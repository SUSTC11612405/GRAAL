class C{  public static boolean isSmallmem(){  return _isSmallmem;}  }
class C{  public void clear(){  tanks.clearTank(index);}  }
class C{  private void fireWindowOrderChanged(){  StringBuilder builder=new StringBuilder();  Iterator<String> it=windowOrder.iterator();  while (it.hasNext()) {    builder.append(it.next());    if (it.hasNext()) {      builder.append(';');    }  }  WtWindowManager.getInstance().setProperty(WINDOW_ORDER_PROPERTY,builder.toString());}  }
class C{  public ImageException(){  super();}  }
class C{  public static void addGzipHeader(HttpServletResponse response) throws GzipResponseHeadersNotModifiableException {  response.setHeader("Content-Encoding","gzip");  boolean containsEncoding=response.containsHeader("Content-Encoding");  if (!containsEncoding) {    throw new GzipResponseHeadersNotModifiableException("Failure when attempting to set " + "Content-Encoding: gzip");  }}  }
class C{  public RendererChangeDetector(){  this.notified=false;}  }
class C{  public boolean retainAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  private void showPage(int index){  if (mPdfRenderer.getPageCount() <= index) {    return;  }  if (null != mCurrentPage) {    mCurrentPage.close();  }  mCurrentPage=mPdfRenderer.openPage(index);  Bitmap bitmap=Bitmap.createBitmap(mCurrentPage.getWidth(),mCurrentPage.getHeight(),Bitmap.Config.ARGB_8888);  mCurrentPage.render(bitmap,null,null,PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);  mImageView.setImageBitmap(bitmap);  updateUi();}  }
class C{  @Override public String graph() throws Exception {  return m_tree.graph();}  }
class C{  public MissingResourceException(String s,String className,String key){  super(s);  this.className=className;  this.key=key;}  }
class C{  public List<Map<String,String>> list(Database conn) throws SQLException {  ResultSet rs=null;  Statement statement=conn.createStatement();  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();  try {    rs=statement.executeQuery(select);    while (rs.next()) {      Map<String,String> shard=new HashMap<String,String>();      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));      shardToChannels.add(shard);    }  }  finally {    close(rs);    close(statement);  }  return shardToChannels;}  }
class C{  public void ininBottomBar(Context context){  mActivity=(Activity)context;  this.setOrientation(LinearLayout.HORIZONTAL);  this.setId(mBottomBarID);  this.setPadding(0,0,0,0);  mInflater=LayoutInflater.from(context);  mWindowManager=mActivity.getWindowManager();  Display display=mWindowManager.getDefaultDisplay();  diaplayWidth=display.getWidth();}  }
class C{  private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){  for (  String path : paths) {    String relativePath=fileHandler.getName(path);    if (prefix != null) {      relativePath=fileHandler.append(prefix,relativePath);    }    if (classpaths != null) {      classpaths.add(relativePath);    }    if (fileHandler.isDirectory(path)) {      String[] children=fileHandler.getChildren(path);      if (children != null && children.length != 0) {        resolveFiles(null,files,children,relativePath);      }    } else {      files.put(relativePath,path);    }  }}  }
class C{  public int countLocalHostCandidates(){synchronized (localCandidates) {    int count=0;    for (    Candidate<?> cand : localCandidates) {      if ((cand.getType() == CandidateType.HOST_CANDIDATE) && !cand.isVirtual()) {        count++;      }    }    return count;  }}  }
class C{  @Inline @Entrypoint public static Object objectStaticRead(Offset offset,int locationMetadata){  if (NEEDS_OBJECT_GC_GETSTATIC_BARRIER) {    ObjectReference src=ObjectReference.fromObject(Magic.getJTOC());    return Selected.Mutator.get().objectReferenceNonHeapRead(src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata)).toObject();  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.168 -0500",hash_original_method="2FE630D35A7B40B0A6753A3386B27535",hash_generated_method="84F92E20F9A31E5E6E1F47A404965C54") private RunnableScheduledFuture pollExpired(){  RunnableScheduledFuture first=queue[0];  if (first == null || first.getDelay(TimeUnit.NANOSECONDS) > 0)   return null;  return finishPoll(first);}  }
class C{  protected void addParameter(Object preparedStatement,int index,Object value){  QueryInformation queryAndParameters=preparedStatements.getIfPresent(preparedStatement);  if (null == queryAndParameters) {    if (LOG.isDebugEnabled()) {      LOG.debug("Could not get the prepared statement from the cache to add a parameter! Prepared Statement:" + preparedStatement + " index:"+ index+ " value:"+ value);    }    return;  }  String[] parameters=queryAndParameters.getParameters();  if ((0 > index) || (parameters.length <= index)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Trying to set the parameter with value " + value + " at index "+ index+ ", but the prepared statement did not have parameter on this index.");    }    return;  }  if (null != value) {    if ((value instanceof String) || (value instanceof Date) || (value instanceof Time)|| (value instanceof Timestamp)) {      parameters[index]="'" + value.toString() + "'";    } else {      parameters[index]=value.toString();    }  } else {    value=NULL_VALUE;    parameters[index]=(String)value;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Prepared Statement :: Added value:" + value.toString() + " with index:"+ index+ " to prepared statement:"+ preparedStatement);  }}  }
class C{  public boolean hasMoreElements(){  return hasMoreTokens();}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  private void disablePacketInThrottle(){  ofMatchCache=null;  macCache=null;  macBlockedCache=null;  portCache=null;  portBlockedCache=null;  packetInThrottleEnabled=false;  floodlightProvider.addSwitchEvent(this.datapathId,"SWITCH_OVERLOAD_THROTTLE_DISABLED ==>" + "Pktin rate " + currentRate + "/s",false);  log.info("Packet in rate is {}, disable throttling on {}",currentRate,this);}  }
class C{  public static BigDecimal arctan(BigDecimal x,int scale){  if (x.abs().compareTo(BigDecimal.valueOf(1)) >= 0) {    throw new IllegalArgumentException("|x| >= 1");  }  if (x.signum() == -1) {    return arctan(x.negate(),scale).negate();  } else {    return arctanTaylor(x,scale);  }}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  public final void write(String s,int off,int len) throws IOException {  if (bufferSize == 0) {    writer.write(s,off,len);    return;  }  int b=off, t=off + len;  while (b < t) {    int d=min(bufferSize - nextChar,t - b);    s.getChars(b,b + d,cb,nextChar);    b+=d;    nextChar+=d;    if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer(); else     bufferOverflow();  }}  }
class C{  public void populatePredictiveParseTable(GrammarNode gn){  gatherPredictSets(gn,null);  predictiveParseTable=new int[ruleHeadToIndex.size()][functionHeadToIndex.size()];  Iterator it=ruleToPredictSet.entrySet().iterator();  while (it.hasNext()) {    Map.Entry pairs=(Map.Entry)it.next();    GrammarNode action=(GrammarNode)pairs.getKey();    String ruleHead=action.getHead();    int ruleIndex=((Integer)ruleHeadToIndex.get(ruleHead)).intValue();    ArrayList functionHeads=(ArrayList)pairs.getValue();    for (int i=0; i < functionHeads.size(); i++) {      String functionHead=(String)functionHeads.get(i);      int functionHeadIndex=((Integer)functionHeadToIndex.get(functionHead)).intValue();      predictiveParseTable[ruleIndex][functionHeadIndex]=((Integer)ruleToIndex.get(action)).intValue();    }  }}  }
class C{  public static byte[] chars2utf(char[] src){  return chars2utf(src,0,src.length);}  }
class C{  public void vmargs(String... vmargs){  int idx=lines.indexOf(VM_ARGS);  if (idx != -1) {    lines=lines.subList(0,idx);  }  lines.add(VM_ARGS);  for (  String vmarg : vmargs) {    lines.add(Line.parse(vmarg));  }}  }
class C{  public AttributedCharacterIterator mutateAttributes(AttributedCharacterIterator aci){  return aci;}  }
class C{  public static String[] split(String text,String pattern){  String[] array=text.split(pattern,-1);  ArrayList<String> list=new ArrayList<String>();  for (int i=0; i < array.length; i++) {    boolean escaped=false;    if (i > 0 && array[i - 1].endsWith("\\")) {      int depth=1;      while (depth < array[i - 1].length() && array[i - 1].charAt(array[i - 1].length() - 1 - depth) == '\\')       depth++;      escaped=depth % 2 == 1;    }    if (!escaped)     list.add(array[i]); else {      String prev=list.remove(list.size() - 1);      list.add(prev.substring(0,prev.length() - 1) + pattern + array[i]);    }  }  return list.toArray(new String[list.size()]);}  }
class C{  private C2sCommunicator(C2sCommunicatorConfiguration configuration){  this.configuration=configuration;}  }
class C{  public static Border createInsetBorder(int thickness,int color){  return createCSSBorder(TYPE_INSET,thickness,color);}  }
class C{  protected StmtBody(){}  }
class C{  public MPaymentProcessor(Properties ctx,int C_PaymentProcessor_ID,String trxName){  super(ctx,C_PaymentProcessor_ID,trxName);  if (C_PaymentProcessor_ID == 0) {    setCommission(Env.ZERO);    setAcceptVisa(false);    setAcceptMC(false);    setAcceptAMEX(false);    setAcceptDiners(false);    setCostPerTrx(Env.ZERO);    setAcceptCheck(false);    setRequireVV(false);    setAcceptCorporate(false);    setAcceptDiscover(false);    setAcceptATM(false);    setAcceptDirectDeposit(false);    setAcceptDirectDebit(false);  }}  }
class C{  public static int confirmPrint(Collection<MHRPaySelectionCheck> checks,MPaymentBatch batch){  int lastDocumentNo=0;  for (  MHRPaySelectionCheck check : checks) {    String sqlConcept="SELECT HR_Concept_ID FROM HR_Movement " + " WHERE HR_Movement_ID IN(SELECT HR_Movement_ID FROM HR_PaySelectionLine " + " WHERE C_BPartner_ID=" + check.getC_BPartner_ID() + " AND HR_PaySelection_ID="+ check.getHR_PaySelection_ID()+ ")";    System.err.println("Concept: " + sqlConcept);    int HR_Concept_ID=DB.getSQLValue(check.get_TrxName(),sqlConcept);    String sqlPayroll="SELECT HR_Payroll_ID FROM HR_Process " + " WHERE HR_Process_ID IN(SELECT HR_Process_ID FROM HR_Movement " + " WHERE HR_Movement_ID IN(SELECT HR_Movement_ID FROM HR_PaySelectionLine "+ " WHERE C_BPartner_ID=" + check.getC_BPartner_ID() + " AND HR_PaySelection_ID="+ check.getHR_PaySelection_ID()+ ") )";    System.err.println("Payroll: " + sqlPayroll);    int HR_Payroll_ID=DB.getSQLValue(check.get_TrxName(),sqlPayroll);    MHRConcept concept=new MHRConcept(check.getCtx(),HR_Concept_ID,check.get_TrxName());    MHRPayroll payroll=new MHRPayroll(check.getCtx(),HR_Payroll_ID,check.get_TrxName());    MPayment payment=new MPayment(check.getCtx(),check.getC_Payment_ID(),check.get_TrxName());    if (check.getC_Payment_ID() != 0) {      if (check.getPaymentRule().equals(PAYMENTRULE_Check)) {        payment.setCheckNo(check.getDocumentNo());        if (!payment.save())         s_log.log(Level.SEVERE,"Payment not saved: " + payment);      }    } else {      payment=new MPayment(check.getCtx(),0,null);      if (check.getPaymentRule().equals(PAYMENTRULE_Check))       payment.setBankCheck(check.getParent().getC_BankAccount_ID(),false,check.getDocumentNo()); else       if (check.getPaymentRule().equals(PAYMENTRULE_CreditCard))       payment.setTenderType(X_C_Payment.TENDERTYPE_CreditCard); else       if (check.getPaymentRule().equals(PAYMENTRULE_DirectDeposit) || check.getPaymentRule().equals(PAYMENTRULE_DirectDebit))       payment.setTenderType(X_C_Payment.TENDERTYPE_DirectDebit); else {        s_log.log(Level.SEVERE,"Unsupported Payment Rule=" + check.getPaymentRule());        continue;      }      payment.setTrxType(X_C_Payment.TRXTYPE_CreditPayment);      payment.setAmount(check.getParent().getC_Currency_ID(),check.getPayAmt());      payment.setDiscountAmt(check.getDiscountAmt());      payment.setDateTrx(check.getParent().getPayDate());      payment.setDateAcct(payment.getDateTrx());      payment.setC_BPartner_ID(check.getC_BPartner_ID());      int C_Charge_ID=DB.getSQLValue(check.get_TrxName(),"SELECT MAX(C_Charge_ID) FROM HR_Attribute WHERE IsActive='Y' AND HR_Concept_ID=" + HR_Concept_ID);      if (C_Charge_ID <= 0)       payment.setC_Charge_ID(payroll.getC_Charge_ID()); else       payment.setC_Charge_ID(C_Charge_ID);      payment.setC_BankAccount_ID(check.getParent().getC_BankAccount_ID());      payment.setWriteOffAmt(Env.ZERO);      if (!payment.save())       s_log.log(Level.SEVERE,"Payment not saved: " + payment);      int C_Payment_ID=payment.get_ID();      if (C_Payment_ID < 1)       s_log.log(Level.SEVERE,"Payment not created=" + check); else {        check.setC_Payment_ID(C_Payment_ID);        check.save();        payment.processIt(DocAction.ACTION_Complete);        if (!payment.save())         s_log.log(Level.SEVERE,"Payment not saved: " + payment);        payment.setAD_Org_ID(check.getAD_Org_ID());        payment.setAD_OrgTrx_ID(check.getAD_Org_ID());        payment.saveEx();      }    }    try {      int no=Integer.parseInt(check.getDocumentNo());      if (lastDocumentNo < no)       lastDocumentNo=no;    } catch (    NumberFormatException ex) {      s_log.log(Level.SEVERE,"DocumentNo=" + check.getDocumentNo(),ex);    }    check.setIsPrinted(true);    check.setProcessed(true);    if (!check.save())     s_log.log(Level.SEVERE,"Check not saved: " + check);  }  s_log.fine("Last Document No = " + lastDocumentNo);  return lastDocumentNo;}  }
class C{  public boolean isDisponible(){  return disponible;}  }
class C{  public static void bindObjectToProgram(SQLiteProgram prog,int index,Object value){  if (value == null) {    prog.bindNull(index);  } else   if (value instanceof Double || value instanceof Float) {    prog.bindDouble(index,((Number)value).doubleValue());  } else   if (value instanceof Number) {    prog.bindLong(index,((Number)value).longValue());  } else   if (value instanceof Boolean) {    Boolean bool=(Boolean)value;    if (bool) {      prog.bindLong(index,1);    } else {      prog.bindLong(index,0);    }  } else   if (value instanceof byte[]) {    prog.bindBlob(index,(byte[])value);  } else {    prog.bindString(index,value.toString());  }}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  @Inline @Entrypoint public static long longArrayRead(long[] ref,int index){  if (NEEDS_LONG_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_LONG);    return Selected.Mutator.get().longRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public void automaticallyGrowCounters(boolean autoGrow){  final int INITIAL_COUNTER_SIZE=20;  automaticallyGrowCounters=autoGrow;  if (automaticallyGrowCounters) {    initializeCounters(INITIAL_COUNTER_SIZE);  }}  }
class C{  public AbstractPseudoState(PseudoStateKind kind){  this.kind=kind;}  }
class C{  void encryptBlock(byte[] plain,int plainOffset,byte[] cipher,int cipherOffset){  cipherBlock(plain,plainOffset,cipher,cipherOffset);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.899 -0500",hash_original_method="0BA14F4ADFDDDB9356E71AC4A1ECA0E9",hash_generated_method="169953A403CAD937E71E29022A5A362F") private void readStyle(){  Style style=new Style();  boolean endOfStyle=false;  while (!endOfStyle && (mParcel.dataAvail() > 0)) {    int key=mParcel.readInt();switch (key) {case KEY_START_CHAR:{        style.startChar=mParcel.readInt();        break;      }case KEY_END_CHAR:{      style.endChar=mParcel.readInt();      break;    }case KEY_FONT_ID:{    style.fontID=mParcel.readInt();    break;  }case KEY_STYLE_FLAGS:{  int flags=mParcel.readInt();  style.isBold=((flags % 2) == 1);  style.isItalic=((flags % 4) >= 2);  style.isUnderlined=((flags / 4) == 1);  break;}case KEY_FONT_SIZE:{style.fontSize=mParcel.readInt();break;}case KEY_TEXT_COLOR_RGBA:{style.colorRGBA=mParcel.readInt();break;}default :{mParcel.setDataPosition(mParcel.dataPosition() - 4);endOfStyle=true;break;}}}if (mStyleList == null) {mStyleList=new ArrayList<Style>();}mStyleList.add(style);}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool: " + HBaseWordCount.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output table: " + args.table);  LOG.info(" - config: " + args.config);  LOG.info(" - number of reducers: " + args.numReducers);  Configuration conf=getConf();  conf.addResource(new Path(args.config));  Configuration hbaseConfig=HBaseConfiguration.create(conf);  HBaseAdmin admin=new HBaseAdmin(hbaseConfig);  if (admin.tableExists(args.table)) {    LOG.info(String.format("Table '%s' exists: dropping table and recreating.",args.table));    LOG.info(String.format("Disabling table '%s'",args.table));    admin.disableTable(args.table);    LOG.info(String.format("Droppping table '%s'",args.table));    admin.deleteTable(args.table);  }  HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(args.table));  for (int i=0; i < FAMILIES.length; i++) {    HColumnDescriptor hColumnDesc=new HColumnDescriptor(FAMILIES[i]);    tableDesc.addFamily(hColumnDesc);  }  admin.createTable(tableDesc);  LOG.info(String.format("Successfully created table '%s'",args.table));  admin.close();  Job job=Job.getInstance(conf);  job.setJobName(HBaseWordCount.class.getSimpleName());  job.setJarByClass(HBaseWordCount.class);  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(IntWritable.class);  job.setMapperClass(WordCount.MyMapper.class);  job.setCombinerClass(WordCount.MyReducer.class);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  TableMapReduceUtil.initTableReducerJob(args.table,MyTableReducer.class,job);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  LOG.info("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  public void addEventListener(MultimediaStreamingSessionListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IMultimediaStreamingSessionListener multimediaStreamingSessionListener=new MultimediaStreamingSessionListenerImpl(listener);    mMultimediaStreamingSessionListeners.put(listener,new WeakReference<>(multimediaStreamingSessionListener));    mApi.addEventListener3(multimediaStreamingSessionListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void stop(){  log.info("Stopping {}: {}",this.getClass().getSimpleName(),this.getServerName());  if (internalClient != null) {    internalClient.stop();    internalClient=null;  }  if (jmsServer != null) {    try {      jmsServer.stop();    } catch (    Exception ex) {      log.warn(String.format("Exception encountered stopping %s: %s - ignoring",jmsServer.getClass().getSimpleName(),this.getServerName()),ex);    }  }}  }
class C{  public Set<String> assembleAllWatchKeys(String appId,String clusterName,String namespace,String dataCenter){  Multimap<String,String> watchedKeysMap=assembleAllWatchKeys(appId,clusterName,Sets.newHashSet(namespace),dataCenter);  return Sets.newHashSet(watchedKeysMap.get(namespace));}  }
class C{  public void process() throws Exception {  WikipediaTemplateInfo info=new WikipediaTemplateInfo(getWiki());  pageTableExists=info.tableExists(GeneratorConstants.TABLE_TPLID_PAGEID);  revisionTableExists=info.tableExists(GeneratorConstants.TABLE_TPLID_REVISIONID);  if (!pageTableExists && !revisionTableExists && mode.active_for_pages&& mode.active_for_revisions) {    throw new IllegalStateException("Currently, you cannot create revision-tpl index and page-tpl index at the same time. The code is there, but it currently assigns separate tpl-name-ids for page-tpls and revisions-tpls. Please create a revision-tpl index, import the data into the db, create the page-tpl index and import this data.");  }  if (mode.useRevisionIterator) {    if (mode.active_for_revisions) {      processRevisions();    }    if (mode.active_for_pages) {      processPages();    }  } else {    try {      extractTemplates();    } catch (    WikiApiException e) {      System.err.println("Error extracting templates.");      e.printStackTrace();    }  }  logger.info("Generating template indices ...");  boolean tableWithTemplatesExists=false;  tableWithTemplatesExists=true;  if (mode.active_for_pages && pageTableExists) {    generateTemplateIndices(info,TPLNAME_TO_PAGEIDS.keySet());  }  if (mode.active_for_revisions && revisionTableExists) {    generateTemplateIndices(info,TPLNAME_TO_REVISIONIDS.keySet());  }  logger.info("Writing SQL dump ...");  WikipediaTemplateInfoDumpWriter writer=new WikipediaTemplateInfoDumpWriter(this.outputPath,this.charset,this.tplNameToTplId,tableWithTemplatesExists);  mode.templateNameToPageId=TPLNAME_TO_PAGEIDS;  mode.templateNameToRevId=TPLNAME_TO_REVISIONIDS;  writer.writeSQL(revisionTableExists,pageTableExists,mode);}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    return (count - pos) > 0;  }}  }
class C{  @Override public Object next(){  if (m_src == null)   compile(realSource);  final Object ret=m_src.next();  if (m_src instanceof ITailOp) {    Object old=m_src;    m_src=((ITailOp)m_src).availableTailOp();  }  return ret;}  }
class C{  public static Typeface droidSerifItalic(Context context){  sDroidSerifItalic=getFontFromRes(R.raw.droidserif_italic,context);  return sDroidSerifItalic;}  }
class C{  public FBObject(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.953 -0400",hash_original_method="753A12A98ABED9FC7E2F432395FDFA70",hash_generated_method="13E906C007B2B64E98EDF6F61A54101F") private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  public String planString(PlanNode.SummaryConfiguration configuration){  return plan.planString(configuration);}  }
class C{  public LuceneSearcher(Directory dir,String field,boolean readOnly){  this(dir,new String[]{field},readOnly);}  }
class C{  protected JPopupMenu createPopupMenu(boolean properties,boolean save,boolean print,boolean zoom){  return createPopupMenu(properties,false,save,print,zoom);}  }
class C{  private void initReservedOrderedTab(boolean reserved){  if (reserved && m_modelReserved != null)   return;  if (!reserved && m_modelOrdered != null)   return;  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),m_C_BPartner_ID == 0 ? "C_BPartner_ID" : "M_Product_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"PriceActual"));  columnNames.add(Msg.translate(Env.getCtx(),reserved ? "QtyReserved" : "QtyOrdered"));  columnNames.add(Msg.translate(Env.getCtx(),"Discount"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"DateOrdered"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  Vector<Vector<Object>> data=null;  if (m_C_BPartner_ID == 0) {    String sql="SELECT bp.Name, ol.PriceActual,ol.PriceList,ol.QtyReserved," + "o.DateOrdered,dt.PrintName || ' ' || o.DocumentNo As DocumentNo, " + "w.Name,"+ "ol.Discount, 0 "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE ol.QtyReserved<>0"+ " AND ol.M_Product_ID=?"+ " AND o.IsSOTrx=" + (reserved ? "'Y'" : "'N'") + " ORDER BY o.DateOrdered";    data=fillTable(sql,m_M_Product_ID);  } else {    String sql="SELECT p.Name, ol.PriceActual,ol.PriceList,ol.QtyReserved," + "o.DateOrdered,dt.PrintName || ' ' || o.DocumentNo As DocumentNo, " + "w.Name,"+ "ol.Discount, 0 "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_Product p  ON (ol.M_Product_ID=p.M_Product_ID) "+ "WHERE ol.QtyReserved<>0"+ " AND o.C_BPartner_ID=?"+ " AND o.IsSOTrx=" + (reserved ? "'Y'" : "'N'") + " ORDER BY o.DateOrdered";    data=fillTable(sql,m_C_BPartner_ID);  }  MiniTable table=null;  if (reserved) {    m_modelReserved=new DefaultTableModel(data,columnNames);    m_tableReserved.setModel(m_modelReserved);    table=m_tableReserved;  } else {    m_modelOrdered=new DefaultTableModel(data,columnNames);    m_tableOrdered.setModel(m_modelOrdered);    table=m_tableOrdered;  }  table.setColumnClass(0,String.class,true);  table.setColumnClass(1,BigDecimal.class,true);  table.setColumnClass(2,Double.class,true);  table.setColumnClass(3,BigDecimal.class,true);  table.setColumnClass(4,String.class,true);  table.setColumnClass(5,Timestamp.class,true);  table.setColumnClass(6,String.class,true);  table.autoSize();}  }
class C{  public boolean isSendfileEnable(){  return _isSendfileEnabled;}  }
class C{  @Override public void run(){  convert();  writeNetwork();}  }
class C{  private boolean containsRestrictedPrefix(String tpl){  for (  String i : blackPrefixList) {    if (tpl.startsWith(i))     return true;  }  return false;}  }
class C{  private Base64(){}  }
class C{  public static void closeReaders(MapFile.Reader[] readers) throws IOException {  if (readers != null) {    for (int i=0; i < readers.length; i++) {      MapFile.Reader reader=readers[i];      if (reader != null) {        reader.close();      }    }  }}  }
class C{  private final double calculateLogProbabilityDensity(TreeColouring colouring,Tree tree,NodeRef node,ColourChangeMatrix mm,double[] N){  double p=1.0;  if (tree.isRoot(node)) {    p=mm.getEquilibrium(colouring.getNodeColour(node));  } else {    NodeRef parent=tree.getParent(node);    BranchColouring history=colouring.getBranchColouring(node);    int fromColour=colouring.getNodeColour(parent);    double fromHeight=tree.getNodeHeight(parent);    for (int i=1; i <= history.getNumEvents(); i++) {      int toColour=history.getForwardColourBelow(i);      double toHeight=history.getForwardTime(i);      p*=Math.exp(-(fromHeight - toHeight) * (-mm.getForwardRate(fromColour,fromColour)));      p*=mm.getForwardRate(fromColour,toColour);      fromHeight=toHeight;      fromColour=toColour;    }    double toHeight=tree.getNodeHeight(node);    p*=Math.exp(-(fromHeight - toHeight) * (-mm.getForwardRate(fromColour,fromColour)));  }  double logP=Math.log(p);  for (int i=0; i < tree.getChildCount(node); i++) {    logP+=calculateLogProbabilityDensity(colouring,tree,tree.getChild(node,i),mm,N);  }  return logP;}  }
class C{  public static double length(double x,double y,double z){  return Math.sqrt(length2(x,y,z));}  }
class C{  public static void register(){  CommandCenter.register(ADDBUDDY,new AddBuddyAction());  CommandCenter.register(IGNORE,new IgnoreAction());  CommandCenter.register(REMOVEBUDDY,new RemoveBuddyAction());  CommandCenter.register(UNIGNORE,new UnignoreAction());  CommandCenter.register(GRUMPY,new GrumpyAction());}  }
class C{  public EsriLayer(String name,int type,int columnCount) throws Exception {  setName(name);switch (type) {case SHAPE_TYPE_POINT:    setList(new EsriPointList());  break;case SHAPE_TYPE_POLYGON:setList(new EsriPolygonList());break;case SHAPE_TYPE_POLYLINE:setList(new EsriPolylineList());break;default :}_model=new DbfTableModel(columnCount);}  }
class C{  public void keyReleased(KeyEvent e){  e.consume();}  }
class C{  public static void detachInstrumentation(Invoke invoke){  FixedNode invokeNode=invoke.asNode();  for (  InstrumentationNode instrumentation : invokeNode.usages().filter(InstrumentationNode.class).snapshot()) {    if (instrumentation.getTarget() == invoke) {      instrumentation.replaceFirstInput(instrumentation.getTarget(),null);    }  }}  }
class C{  private boolean isLastPunctuation(String tweetString){  if (tweetString.endsWith("?") || tweetString.endsWith("!")) {    return true;  }  return false;}  }
class C{  public static final void drawRopeJoint(GL2 gl,RopeJoint joint){  Vector2 v1=joint.getAnchor1();  Vector2 v2=joint.getAnchor2();  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  Vector2 t=v1.to(v2);  t.normalize();  t.left();  t.multiply(0.05);  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(v1.x - t.x,v1.y - t.y);  gl.glVertex2d(v1.x + t.x,v1.y + t.y);  gl.glVertex2d(v2.x + t.x,v2.y + t.y);  gl.glVertex2d(v2.x - t.x,v2.y - t.y);  gl.glEnd();}  }
class C{  @Override public boolean executeScriptLine(final String line){  boolean success=false;  String withPropsExpanded=line;  try {    if (line.contains("$")) {      withPropsExpanded=expandProperties(line);    }    String logMessage="Command String to execute .. ";    if (!line.equals(withPropsExpanded)) {      if (!isQuietMode()) {        Gfsh.println("Post substitution: " + withPropsExpanded);      }      logMessage="Command String after substitution : ";      expandedPropCommandsMap.put(withPropsExpanded,line);    }    if (gfshFileLogger.fineEnabled()) {      gfshFileLogger.fine(logMessage + withPropsExpanded);    }    success=super.executeScriptLine(withPropsExpanded);  } catch (  Exception e) {    setLastExecutionStatus(-1);  } finally {    gfshHistory.setAutoFlush(true);    gfshHistory.addToHistory(line);    gfshHistory.setAutoFlush(false);    expandedPropCommandsMap.clear();  }  return success;}  }
class C{  public void or(BitMatrix other){  checkDimensionCompatibility(other);  toBitVector().or(other.toBitVector());}  }
class C{  protected synchronized void makeLocal(String address,URL url,boolean saveInLocalCache){  if (WorldWind.getNetworkStatus().isHostUnavailable(url) || !WorldWind.getRetrievalService().isAvailable())   return;  DBEntry newEntry=new DBEntry(address);  this.db.add(address,newEntry);  newEntry.state=DBEntry.PENDING;  Retriever retriever=URLRetriever.createRetriever(url,new PostProcessor(address,url,saveInLocalCache));  if (retriever != null && !WorldWind.getRetrievalService().contains(retriever))   WorldWind.getRetrievalService().runRetriever(retriever);}  }
class C{  private static Cursor queryUpcomingEvents(Context context,ContentResolver contentResolver,long currentMillis){  Time time=new Time();  time.normalize(false);  long localOffset=time.gmtoff * 1000;  final long localStartMin=currentMillis;  final long localStartMax=localStartMin + EVENT_LOOKAHEAD_WINDOW_MS;  final long utcStartMin=localStartMin - localOffset;  final long utcStartMax=utcStartMin + EVENT_LOOKAHEAD_WINDOW_MS;  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {    Log.d(TAG,"Manifest.permission.READ_CALENDAR is not granted");    return null;  }  Uri.Builder uriBuilder=Instances.CONTENT_URI.buildUpon();  ContentUris.appendId(uriBuilder,localStartMin - DateUtils.DAY_IN_MILLIS);  ContentUris.appendId(uriBuilder,localStartMax + DateUtils.DAY_IN_MILLIS);  StringBuilder queryBuilder=new StringBuilder();  queryBuilder.append("(");  queryBuilder.append(INSTANCES_WHERE);  queryBuilder.append(") OR (");  queryBuilder.append(INSTANCES_WHERE);  queryBuilder.append(")");  String[] queryArgs=new String[]{"1",String.valueOf(utcStartMin),String.valueOf(utcStartMax),"1","1",String.valueOf(localStartMin),String.valueOf(localStartMax),"0"};  Cursor cursor=contentResolver.query(uriBuilder.build(),INSTANCES_PROJECTION,queryBuilder.toString(),queryArgs,null);  return cursor;}  }
class C{  public boolean isAnimated(){  return null == animated ? _animated : animated.get();}  }
class C{  public HashCode append(final long[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final long element : array) {      append(element);    }  }  return this;}  }
class C{  public static void initializeModules(ShankModule... shankModules){  for (  ShankModule shankModule : shankModules) {    shankModule.registerFactories();  }}  }
class C{  protected void recordConnectionResult(final int resultCode){  RecordHistogram.recordSparseSlowlyHistogram(CONNECTION_RESULT_HISTOGRAM_NAME,resultCode);}  }
class C{  private void buildHomeworld(Planet planet,EntityPlayer player){  planet.setOwner(player);  planet.setHomeworld(true);  planet.setBuildingSpaces(8);  planet.setFleetSpaces(10);  ItemStack base=new ItemStack(MatterOverdrive.items.buildingBase);  ((IBuilding)base.getItem()).setOwner(base,EntityPlayer.getUUID(player.getGameProfile()));  planet.addBuilding(base);  ItemStack scoutShip=new ItemStack(MatterOverdrive.items.scoutShip);  ((IShip)scoutShip.getItem()).setOwner(scoutShip,EntityPlayer.getUUID(player.getGameProfile()));  planet.addShip(scoutShip);  planet.markDirty();}  }
class C{  public double latRadians(){  return latRadians;}  }
class C{  public static boolean testFileExists(String name){  boolean status;  if ((testSaveLocationExists()) && (!name.equals(""))) {    File path=Environment.getExternalStorageDirectory();    File newPath=constructFilePaths(path.toString(),name);    status=newPath.exists();  } else {    status=false;  }  return status;}  }
class C{  public int processMessages(){  int processed=0;  try {    getSession();    getStore();    processed=processInBox();  } catch (  Exception e) {    log.log(Level.SEVERE,"processInBox",e);  }  try {    if (m_store.isConnected())     m_store.close();  } catch (  Exception e) {  }  m_store=null;  return processed;}  }
class C{  private void add(int turn,int length){  for (int i=0; i <= length / 50; i++) {    lastChatTurns.add(turn);  }}  }
class C{  public Bundler putFloatArray(String key,float[] value){  bundle.putFloatArray(key,value);  return this;}  }
class C{  public void createBasicData(boolean basicSetupRequired) throws NonUniqueBusinessKeyException {  if (basicSetupRequired) {    EJBTestBase.createOrganizationRoles(dataService);    EJBTestBase.createPaymentTypes(dataService);    SupportedCountries.createSomeSupportedCountries(dataService);    EJBTestBase.createUserRoles(dataService);    EJBTestBase.createBillingAdapter(dataService);  }}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException("Null buffer for read");  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int cnt=0;  while (len > 0 && !def.finished()) {    int n;    if (def.needsInput()) {      n=in.read(buf,0,buf.length);      if (n < 0) {        def.finish();      } else       if (n > 0) {        def.setInput(buf,0,n);      }    }    n=def.deflate(b,off,len);    cnt+=n;    off+=n;    len-=n;  }  if (cnt == 0 && def.finished()) {    reachEOF=true;    cnt=-1;  }  return cnt;}  }
class C{  private static int[] yy_unpack(){  int[] trans=new int[616];  int offset=0;  offset=yy_unpack(yy_packed0,offset,trans);  return trans;}  }
class C{  protected InlineStateMachine_Impl(){  super();}  }
class C{  public static long addCap(long a,long b){  long u=a + b;  if (u < 0L) {    u=Long.MAX_VALUE;  }  return u;}  }
class C{  protected void revokeConnection(){  if (managedConn == null)   return;  log.warn(MISUSE_MESSAGE);  managedConn.detach();  try {    uniquePoolEntry.shutdown();  } catch (  IOException iox) {    log.debug("Problem while shutting down connection.",iox);  }}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  static int decodeValue(final short encodedSize){  final int value=encodedSize & 0xFFFF;  if (value > MAX_ENC_VALUE) {    throw new SketchesArgumentException("Maximum valid encoded value is " + Integer.toHexString(MAX_ENC_VALUE) + ", found: "+ value);  }  final int p=(value >> EXPONENT_SHIFT) & EXPONENT_MASK;  final int i=value & INDEX_MASK;  return (int)((1 << p) * (i * INV_BINS_PER_OCTAVE + 1.0));}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(){  return (ImmutableRangeMap<K,V>)EMPTY;}  }
class C{  public String process(String uri){  String returnString=uri;  Iterator itr=rules.iterator();  while (itr.hasNext()) {    Rule rule=(Rule)itr.next();    returnString=rule.process(returnString);  }  return returnString;}  }
class C{  protected JSRInlinerAdapter(final int api,final MethodVisitor mv,final int access,final String name,final String desc,final String signature,final String[] exceptions){  super(api,access,name,desc,signature,exceptions);  this.mv=mv;}  }
class C{  @Override public void onWebsocketHandshakeSentAsClient(WebSocket conn,ClientHandshake request) throws InvalidDataException {}  }
class C{  public void actionPerformed(ActionEvent e){  Caret c=textArea.getCaret();  if (c.getDot() != c.getMark()) {    return;  }  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();  doc.readLock();  try {    removeHighlights();    int line=textArea.getCaretLineNumber();    Token tokenList=textArea.getTokenListForLine(line);    int dot=c.getDot();    Token t=RSyntaxUtilities.getTokenAtOffset(tokenList,dot);    if (t == null || !isValidType(t) || isNonWordChar(t)) {      dot--;      try {        if (dot >= textArea.getLineStartOffset(line)) {          t=RSyntaxUtilities.getTokenAtOffset(tokenList,dot);        }      } catch (      BadLocationException ble) {        ble.printStackTrace();      }    }    if (t != null && isValidType(t) && !isNonWordChar(t)) {      RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();      String lexeme=t.getLexeme();      int type=t.type;      for (int i=0; i < textArea.getLineCount(); i++) {        Token temp=textArea.getTokenListForLine(i);        while (temp != null && temp.isPaintable()) {          if (temp.is(type,lexeme)) {            try {              int end=temp.offset + temp.textCount;              Object tag=h.addMarkedOccurrenceHighlight(temp.offset,end,p);              tags.add(tag);            } catch (            BadLocationException ble) {              ble.printStackTrace();            }          }          temp=temp.getNextToken();        }      }    }  }  finally {    doc.readUnlock();  }  textArea.fireMarkedOccurrencesChanged();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.419 -0400",hash_original_method="3D1D436C307AD2BB06496F9C5BF09A1F",hash_generated_method="6A3B4FB9DE06F60D0FBCBA03B22CFCB2") public AtCommandResult handleReadCommand(){  return new AtCommandResult(AtCommandResult.ERROR);}  }
class C{  @Override public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  List ticks=new java.util.ArrayList();  if (dataArea.getHeight() <= 0.0 || dataArea.getWidth() < 0.0) {    return ticks;  }  CategoryPlot plot=(CategoryPlot)getPlot();  List categories=plot.getCategoriesForAxis(this);  double max=0.0;  if (categories != null) {    CategoryLabelPosition position=this.categoryLabelPositions.getLabelPosition(edge);    float r=this.maximumCategoryLabelWidthRatio;    if (r <= 0.0) {      r=position.getWidthRatio();    }    float l;    if (position.getWidthType() == CategoryLabelWidthType.CATEGORY) {      l=(float)calculateCategorySize(categories.size(),dataArea,edge);    } else {      if (RectangleEdge.isLeftOrRight(edge)) {        l=(float)dataArea.getWidth();      } else {        l=(float)dataArea.getHeight();      }    }    int categoryIndex=0;    Iterator iterator=categories.iterator();    while (iterator.hasNext()) {      Comparable category=(Comparable)iterator.next();      g2.setFont(getTickLabelFont(category));      TextBlock label=createLabel(category,l * r,edge,g2);      if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {        max=Math.max(max,calculateTextBlockHeight(label,position,g2));      } else       if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {        max=Math.max(max,calculateTextBlockWidth(label,position,g2));      }      Tick tick=new CategoryTick(category,label,position.getLabelAnchor(),position.getRotationAnchor(),position.getAngle());      ticks.add(tick);      categoryIndex=categoryIndex + 1;    }  }  state.setMax(max);  return ticks;}  }
class C{  public void addDominatorNetSize(long size){  dominatorNetSize+=size;}  }
class C{  public String type(){  return type;}  }
class C{  public void dynInit(){  disableToDeliver();  configureMiniTable(issue);  issue.getModel().addTableModelListener(this);  CompiereColor.setBackground(panel);  issue.setCellSelectionEnabled(true);  issue.getSelectionModel().addListSelectionListener(this);}  }
class C{  @Override public boolean jdbcCompliant(){  return true;}  }
class C{  public Object clone() throws CloneNotSupportedException {  RelativeStrengthIndexSeries clone=(RelativeStrengthIndexSeries)super.clone();  return clone;}  }
class C{  public static final float max(float a,float b,float c){  return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);}  }
class C{  private void initFromExistingLogFiles(){  this.currentLogFileTimeInterval=calculateCurrentTimeInterval();  this.currentLogFileNumber=0;  FileComparator logFileComparator=new FileComparator(this.logFileBaseName);  if (!Files.exists(this.logFileDir)) {    throw new IapToolsException(this.logFileDir.toString() + " does not exist.");  }  if (!Files.isDirectory(this.logFileDir)) {    throw new IapToolsException(this.logFileDir.toString() + " is not a directory");  }  File file=this.logFileDir.toFile();  String latestFile=null;  File[] files=file.listFiles();  for (int i=0; i < files.length; i++) {    String thisFile=files[i].getName();    if (thisFile.startsWith(this.logFileBaseName)) {      if (latestFile == null) {        latestFile=thisFile;      } else {        if (logFileComparator.compare(latestFile,thisFile) < 0) {          latestFile=thisFile;        }      }    }  }  if (latestFile != null) {    String currentLogFileDateTimeStr=this.dateFormat.format(new Date(this.currentLogFileTimeInterval));    int dateTimeStartIndex=this.logFileBaseName.length() + 1;    int dateTimeEndIndex=dateTimeStartIndex + FileUtil.DATE_STR_LENGTH + FileUtil.TIME_STR_LENGTH - 1;    String latestFileDateTimeSubstring=latestFile.substring(dateTimeStartIndex,dateTimeEndIndex);    if (currentLogFileDateTimeStr.equals(latestFileDateTimeSubstring)) {      int fileNoStartIndex=this.logFileBaseName.length() + 1 + FileUtil.DATE_STR_LENGTH+ FileUtil.TIME_STR_LENGTH;      int fileNoEndIndex=latestFile.indexOf('.',fileNoStartIndex);      int latestFileNo=FileUtil.parseInt(latestFile,fileNoStartIndex,fileNoEndIndex);      this.currentLogFileNumber=latestFileNo + 1;    }  }}  }
class C{  public boolean isParent(){  return getM_Product_ID() == getM_ProductionPlan().getM_Product_ID() ? true : false;}  }
class C{  static void replaceLoadWithMove(Register r,Instruction load){  RegisterOperand dest=ResultCarrier.getResult(load);  RegisterOperand rop=new RegisterOperand(r,dest.getType());  load.replace(Move.create(IRTools.getMoveOp(dest.getType()),dest,rop));}  }
class C{  public static IntInterval zeroToBy(int count,int step){  return IntInterval.fromToBy(0,count,step);}  }
class C{  public void registerForgingHammerRecipe(Object... recipe){}  }
class C{  public StextAdapterFactory(){  if (modelPackage == null) {    modelPackage=StextPackage.eINSTANCE;  }}  }
class C{  public static void play(){  if (musicPlaybackService != null) {    try {      musicPlaybackService.play();    } catch (    Throwable ignored) {    }  }}  }
class C{  public Resin3xConfigurationChecker(){  Map<String,String> m=new HashMap<String,String>();  m.put("resin",NS_URL);  NamespaceContext ctx=new SimpleNamespaceContext(m);  XMLUnit.setXpathNamespaceContext(ctx);}  }
class C{  public static void write(float lt,float ln,ImageIcon ii,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {  int image_width, image_height;  Image image;  image_width=ii.getIconWidth();  image_height=ii.getIconHeight();  image=ii.getImage();  LinkRaster.write(lt,ln,image,image_width,image_height,properties,dos);}  }
class C{  public String globalInfo(){  return "This generator produces data for a display with 7 LEDs. The original " + "output consists of 10 concepts and 7 boolean attributes. Here, in " + "addition to the 7 necessary boolean attributes, 17 other, irrelevant "+ "boolean attributes with random values are added to make it harder. "+ "By default 10 percent of noise are added to the data.\n"+ "\n"+ "More information can be found here:\n"+ getTechnicalInformation().toString();}  }
class C{  public static void displayAppTac(final Activity activity){  displayInWebview(activity,"https://riot.im/tac");}  }
class C{  @SuppressWarnings("unchecked") @Override public synchronized void clearReaders(){  rdrs=ReaderId.EMPTY_ARRAY;}  }
class C{  @Override public <T>T instance(InjectionPoint<T> ip){  Objects.requireNonNull(ip);  Provider<T> provider=provider(ip);  if (provider != null) {    return provider.get();  } else {    return null;  }}  }
class C{  protected void notifyClickListenersAboutClick(int item){  if (clickingListeners.size() > 0) {    for (    OnWheelClickedListener listener : clickingListeners) {      listener.onItemClicked(this,item);    }  } else {    setCurrentItem(item,true,500);  }}  }
class C{  public FlipHorizontalToAnimation(View view){  this.view=view;  flipToView=null;  pivot=PIVOT_CENTER;  direction=DIRECTION_RIGHT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public ServerKeyExchange(HandshakeIODataStream in,int length,int keyExchange) throws IOException {  int size=in.readUint16();  bytes1=in.read(size);  par1=new BigInteger(1,bytes1);  this.length=2 + bytes1.length;  size=in.readUint16();  bytes2=in.read(size);  par2=new BigInteger(1,bytes2);  this.length+=2 + bytes2.length;  if (keyExchange != CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    size=in.readUint16();    bytes3=in.read(size);    par3=new BigInteger(1,bytes3);    this.length+=2 + bytes3.length;  } else {    par3=null;    bytes3=null;  }  if (keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT && keyExchange != CipherSuite.KEY_EXCHANGE_DH_anon) {    size=in.readUint16();    hash=in.read(size);    this.length+=2 + hash.length;  } else {    hash=null;  }  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerKeyExchange");  }}  }
class C{  public boolean isRelease(@Body SyndFeed feed){  SyndEntry firstEntry=(SyndEntry)feed.getEntries().get(0);  return firstEntry.getTitle().toLowerCase().contains("release");}  }
class C{  public synchronized void removeObservers(){  observers.removeAllElements();}  }
class C{  public TextField(String name,Reader reader){  super(name,reader,TYPE_NOT_STORED);}  }
class C{  protected boolean isReuseAddressChanged(){  return true;}  }
class C{  @Override synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    if (getCanRead()) {      notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);    } else {      notifyProgListenerEnd(_val,jmri.ProgListener.OK);    }  }}  }
class C{  public RunnableAction(Runnable runnable,String id){  Assert.notNull(runnable,"Runnable must be set");  this.runnable=runnable;  this.id=id;}  }
class C{  public SnmpInt(int v) throws IllegalArgumentException {  if (isInitValueValid(v) == false) {    throw new IllegalArgumentException();  }  value=(long)v;}  }
class C{  public static ParameterSet readParameterSet(InputStream in) throws IOException {  ParameterSet parameterSet=new ParameterSet();  Document document=null;  try {    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in);  } catch (  SAXException e1) {    throw new IOException(e1.getMessage());  }catch (  ParserConfigurationException e1) {    throw new IOException(e1.getMessage());  }  Element parametersElement=document.getDocumentElement();  if (!parametersElement.getTagName().equals("parameterset")) {    throw new IOException("Outer tag of parameter set file must be <parameterset>");  }  NodeList parameters=parametersElement.getChildNodes();  for (int i=0; i < parameters.getLength(); i++) {    Node node=parameters.item(i);    if (node instanceof Element) {      Element parameterTag=(Element)node;      String tagName=parameterTag.getTagName();      if (!tagName.equals("parameter")) {        throw new IOException("Only tags <parameter> are allowed, was " + tagName);      }      String operatorName=parameterTag.getAttribute("operator");      String parameterKey=parameterTag.getAttribute("key");      String parameterValue=parameterTag.getAttribute("value");      parameterSet.parameterValues.add(new ParameterValue(operatorName,parameterKey,parameterValue));    }  }  return parameterSet;}  }
class C{  public XYDataImageAnnotation(Image image,double x,double y,double w,double h,boolean includeInDataBounds){  super();  ParamChecks.nullNotPermitted(image,"image");  this.image=image;  this.x=x;  this.y=y;  this.w=w;  this.h=h;  this.includeInDataBounds=includeInDataBounds;}  }
class C{  public T caseGamlDefinition(GamlDefinition object){  return null;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((columnName == null) ? 0 : columnName.hashCode());  return result;}  }
class C{  public MeekRulesRestricted(){  useRule4=knowledge != null && !knowledge.isEmpty();}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public void testInvalidAnalyzesToNothingOutput() throws Exception {  String testFile="a => 1";  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.SIMPLE,false);  SolrSynonymParser parser=new SolrSynonymParser(true,true,analyzer);  expectThrows(ParseException.class,null);  analyzer.close();}  }
class C{  public AbstractSchemaTest() throws Exception {  super.setUp();}  }
class C{  private static GaData executeDataQuery(Analytics analytics,String tableId) throws IOException {  return analytics.data().ga().get(tableId,"2012-01-01","2012-01-14","ga:visits").setDimensions("ga:source,ga:keyword").setSort("-ga:visits,ga:source").setFilters("ga:medium==organic").setMaxResults(25).execute();}  }
class C{  public Builder newFontBuilder(){  return Font.Builder.getOTFBuilder(this);}  }
class C{  public List<ValueSource> parseValueSourceList() throws SyntaxError {  List<ValueSource> sources=new ArrayList<>(3);  while (hasMoreArguments()) {    sources.add(parseValueSource(FLAG_DEFAULT | FLAG_CONSUME_DELIMITER));  }  return sources;}  }
class C{  public Document readDocument(InputStream is,String systemId) throws XMLStreamException {  XMLEventReader eventReader=inputFactory.createXMLEventReader(systemId,is);  try {    return readDocument(eventReader);  }  finally {    eventReader.close();  }}  }
class C{  public final void negate(){  m00=-m00;  m01=-m01;  m02=-m02;  m03=-m03;  m10=-m10;  m11=-m11;  m12=-m12;  m13=-m13;  m20=-m20;  m21=-m21;  m22=-m22;  m23=-m23;  m30=-m30;  m31=-m31;  m32=-m32;  m33=-m33;}  }
class C{  public Boolean isSearchCaseInsensitive(){  return searchCaseInsensitive;}  }
class C{  public List<List<String>> asStructured(){  if (values.isEmpty()) {    return Collections.emptyList();  }  JsonValue first=values.get(0);  List<JsonValue> array=first.getArray();  if (array != null) {    List<List<String>> components=new ArrayList<List<String>>(array.size());    for (    JsonValue value : array) {      if (value.isNull()) {        components.add(Arrays.<String>asList());        continue;      }      Object obj=value.getValue();      if (obj != null) {        String s=obj.toString();        List<String> component=(s.length() == 0) ? Arrays.<String>asList() : Arrays.asList(s);        components.add(component);        continue;      }      List<JsonValue> subArray=value.getArray();      if (subArray != null) {        List<String> component=new ArrayList<String>(subArray.size());        for (        JsonValue subArrayValue : subArray) {          if (subArrayValue.isNull()) {            component.add("");            continue;          }          obj=subArrayValue.getValue();          if (obj != null) {            component.add(obj.toString());            continue;          }        }        if (component.size() == 1 && component.get(0).length() == 0) {          component.clear();        }        components.add(component);      }    }    return components;  }  Object obj=first.getValue();  if (obj != null) {    List<List<String>> components=new ArrayList<List<String>>(1);    String s=obj.toString();    List<String> component=(s.length() == 0) ? Arrays.<String>asList() : Arrays.asList(s);    components.add(component);    return components;  }  if (first.isNull()) {    List<List<String>> components=new ArrayList<List<String>>(1);    components.add(Arrays.<String>asList());    return components;  }  return Collections.emptyList();}  }
class C{  public void unsubscribe(){  setOptOutDate(null);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GroupImageDao.dropTable(db,ifExists);}  }
class C{  public boolean isVmSearch(){  return vmSearch;}  }
class C{  private void buildInterceptor(String path,Class<?> clazz,Method execMethod,HttpMethod method){  routers.buildRoute(path,clazz,execMethod,method);}  }
class C{  public void removeAllRoles(){  roles.clear();}  }
class C{  private Solution findExtremePoint(int objective){  double eps=0.001;  double[] weights=new double[numberOfObjectives];  for (int i=0; i < weights.length; i++) {    if (i == objective) {      weights[i]=1.0 - eps * (weights.length - 1);    } else {      weights[i]=eps;    }  }  Solution result=get(0);  double resultASF=Double.POSITIVE_INFINITY;  for (int i=1; i < size(); i++) {    Solution solution=get(i);    double solutionASF=achievementScalarizingFunction(solution,weights);    if (solutionASF < resultASF) {      result=solution;      resultASF=solutionASF;    }  }  return result;}  }
class C{  public Info_Column(String colHeader,String colSQL,Class<?> colClass,boolean readOnly,boolean colorColumn,String IDcolSQL){  super(colHeader,colSQL,colClass,readOnly,colorColumn,IDcolSQL);}  }
class C{  void trackVerticalMotionScroll(int deltaY){  if (getChildCount() == 0) {    return;  }  boolean toTop=deltaY < 0;  int limitedDeltaY=0;  if (isScrollCycle()) {    limitedDeltaY=deltaY;  } else {    limitedDeltaY=getVerticalLimitedMotionScrollAmount(toTop,deltaY);  }  if (limitedDeltaY != deltaY) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenTopAndBottom(limitedDeltaY);  detachVerticalOffScreenChildren(toTop);  if (toTop) {    fillToGalleryBottom();  } else {    fillToGalleryTop();  }  mRecycler.clear();  setVerticalSelectionToCenterChild();  final View selChild=mSelectedChild;  if (selChild != null) {    final int childTop=selChild.getTop();    final int childCenter=selChild.getHeight() / 2;    final int galleryCenter=getHeight() / 2;    mSelectedCenterOffset=childTop + childCenter - galleryCenter;  }  onScrollChanged(0,0,0,0);  invalidate();}  }
class C{  public static boolean canGetSeries(String extID){  char three;  return extID != null && extID.startsWith("EP") && extID.length() == 14 && (three=extID.charAt(2)) >= '0' && three <= '9';}  }
class C{  private void deleteChildren(Element container){  while (container.hasChildNodes()) {    container.removeChild(container.getLastChild());  }}  }
class C{  public void testDeepNestedOuterJoin(){  check("t OUTER JOIN (t2 OUTER JOIN (t3 OUTER JOIN t4 ON t3.id=t4.id) ON t2.id=t3.id) ON t.id=t2.id","{oj t OUTER JOIN ({oj t2 OUTER JOIN ({oj t3 OUTER JOIN t4 ON t3.id=t4.id}) ON t2.id=t3.id}) ON t.id=t2.id}");  check("select * from " + "t OUTER JOIN (t2 OUTER JOIN (t3 OUTER JOIN t4 ON t3.id=t4.id) ON t2.id=t3.id) ON t.id=t2.id","select * from " + "{oj t OUTER JOIN ({oj t2 OUTER JOIN ({oj t3 OUTER JOIN t4 ON t3.id=t4.id}) ON t2.id=t3.id})" + " ON t.id=t2.id}");  check("select * from t OUTER JOIN (t2 OUTER JOIN (t3 OUTER JOIN t4 ON t3.id=t4.id) " + "ON t2.id=t3.id) ON t.id=t2.id ORDER BY t4.id","select * from {oj t OUTER JOIN ({oj t2 OUTER JOIN ({oj t3 OUTER JOIN t4 ON t3.id=t4.id}) " + "ON t2.id=t3.id}) ON t.id=t2.id} ORDER BY t4.id");}  }
class C{  public static final Polygon flip(Polygon polygon,Vector2 axis){  return Geometry.flip(polygon,axis,null);}  }
class C{  public static boolean isPublicPublic(Member member){  if (Modifier.isPublic(member.getModifiers()) == true) {    if (Modifier.isPublic(member.getDeclaringClass().getModifiers())) {      return true;    }  }  return false;}  }
class C{  @Override public void clear(Workspace workspace) throws IOException, ServerException {  File wsFolder=workspaceIdHashLocationFinder.calculateDirPath(backupsRootDir,workspace.getId());  CommandLine commandLine=new CommandLine(workspaceCleanUpScript,wsFolder.getAbsolutePath());  try {    execute(commandLine.asArray(),cleanUpTimeOut);  } catch (  InterruptedException|TimeoutException e) {    throw new ServerException(format("Failed to delete workspace files by path: '%s' for workspace with id: '%s'",wsFolder.getAbsolutePath(),workspace.getId()),e);  }}  }
class C{  public Identity(String category,String name,String type){  if ((category == null) || (type == null))   throw new IllegalArgumentException("category and type cannot be null");  this.category=category;  this.name=name;  this.type=type;}  }
class C{  public static void verifyEventIdsOnClient2(){  if (!proceedForValidation) {synchronized (EventIdOptimizationDUnitTest.class) {      if (!proceedForValidation)       try {        LogWriterUtils.getLogWriter().info("Client2 going in wait before starting validation");        EventIdOptimizationDUnitTest.class.wait();      } catch (      InterruptedException e) {        fail("interrupted");      }    }  }  LogWriterUtils.getLogWriter().info("Starting validation on client2");  if (validationFailed) {    fail("\n The following eventIds recieved by client2 were not present in the eventId array sent by client1 \n" + failureMsg);  }  LogWriterUtils.getLogWriter().info("Validation complete on client2, goin to unregister listeners");  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);  if (region != null && !region.isDestroyed()) {    try {      AttributesMutator mutator=region.getAttributesMutator();      mutator.initCacheListeners(null);    } catch (    RegionDestroyedException ignore) {    }  }  for (int i=0; i < eventIds.length; i++) {    region=cache.getRegion(Region.SEPARATOR + REGION_NAME + i);    if (region != null && !region.isDestroyed()) {      try {        AttributesMutator mutator=region.getAttributesMutator();        mutator.initCacheListeners(null);      } catch (      RegionDestroyedException ignore) {      }    }  }  LogWriterUtils.getLogWriter().info("Test completed, Unregistered the listeners");}  }
class C{  @Override public Cloudlet migrateCloudlet(){  ResCloudlet rgl=getCloudletExecList().remove(0);  rgl.finalizeCloudlet();  return rgl.getCloudlet();}  }
class C{  public void addCamera(Camera cam){  view_group.addChild(cam.getNode());}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  return (Math.exp(this.gamma * norm2(x1,x2)));}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public void subscribe(ClientConnection connection,long startOffset){  log.info("Subscribed to channel {} with startOffset {}",channelID,startOffset);  subscriberOffsets.putIfAbsent(connection,startOffset);}  }
class C{  public BufferedImage buildBufferedImage(Dimension size){  return new BufferedImage(size.width,size.height,BufferedImage.TYPE_INT_RGB);}  }
class C{  public void creationError(String message){  if (notification != null) {    notification.setTitle(locale.createSnapshotFailed());    notification.setContent(message);    notification.setStatus(FAIL);  }}  }
class C{  @Override public Iterator<T> iterator(){  return new SelectIterator<>(this.adapted,this.predicate);}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuffer();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  public Property weekyear(){  return new Property(this,getChronology().weekyear());}  }
class C{  private void checkSearch(String inputGraph,String outputGraph){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Pc pc=new Pc(independence);  Graph resultGraph=pc.search(new FasStableConcurrent(independence),independence.getVariables());  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  @Override public void addDropEntry(@Nonnull ItemStack item,int weight){  if (weight <= 0) {    logger.warn("Weight was set to 0 for item {%s}, please fix this by setting it to 1 or greater.",item);    weight=1;  }  addDropEntry(new VineDropEntry(item,weight));}  }
class C{  private void createRowHeading(String title,Image image){  Composite composite=toolkit.createComposite(contentComposite);  composite.setLayoutData(new TableWrapData(TableWrapData.FILL));  GridLayout compositeLayout=new GridLayout(1,true);  compositeLayout.marginHeight=0;  compositeLayout.marginBottom=0;  compositeLayout.horizontalSpacing=0;  compositeLayout.verticalSpacing=0;  composite.setLayout(compositeLayout);  FormText rowText=toolkit.createFormText(composite,false);  if (null != image) {    rowText.setText("<form><p><img href=\"img\"/> <span color=\"headingColor\">" + title + "</span></p></form>",true,false);    rowText.setImage("img",image);  } else {    rowText.setText("<form><p><span color=\"headingColor\">" + title + "</span></p></form>",true,false);  }  rowText.setColor("headingColor",toolkit.getColors().getColor(IFormColors.TITLE));  GridData rowTextGridData=getFixedWidthGridData(ROW_TITLE_WIDTH_HINT);  rowTextGridData.verticalAlignment=SWT.TOP;  rowText.setLayoutData(rowTextGridData);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.842 -0500",hash_original_method="C05DD240630B83BC61ED5B6F9EF8E181",hash_generated_method="7EAEBAF04A69E9DF7BA078C70CD23B54") public int breakText(String text,boolean measureForwards,float maxWidth,float[] measuredWidth){  if (text == null) {    throw new IllegalArgumentException("text cannot be null");  }  if (text.length() == 0) {    return 0;  }  if (!mHasCompatScaling) {    return native_breakText(text,measureForwards,maxWidth,measuredWidth);  }  final float oldSize=getTextSize();  setTextSize(oldSize * mCompatScaling);  int res=native_breakText(text,measureForwards,maxWidth * mCompatScaling,measuredWidth);  setTextSize(oldSize);  if (measuredWidth != null)   measuredWidth[0]*=mInvCompatScaling;  return res;}  }
class C{  public boolean isDeclineCounter(){  return is(DECLINECOUNTER);}  }
class C{  public void testRingWithTail() throws ParseException {  checkDissolve("MULTILINESTRING ((0 0, 1 0, 1 1), (0 0, 0 1, 1 1), (1 0, 2 0))","MULTILINESTRING ((1 0, 0 0, 0 1, 1 1, 1 0), (1 0, 2 0))");}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedLunsForPortResponse queryAssociatedLunsForPort(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedLunsForPort queryAssociatedLunsForPort11) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[5].getName());    _operationClient.getOptions().setAction("urn:queryAssociatedLunsForPort");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryAssociatedLunsForPort11,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryAssociatedLunsForPort")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedLunsForPortResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedLunsForPortResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public synchronized void debug(String msg){  if (m_Debug)   System.err.println("[DEBUG] " + getClass().getName() + " - "+ msg);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void removeColumn(Comparable columnKey){  ParamChecks.nullNotPermitted(columnKey,"columnKey");  if (!this.columnKeys.contains(columnKey)) {    throw new UnknownKeyException("Unknown key: " + columnKey);  }  Iterator iterator=this.rows.iterator();  while (iterator.hasNext()) {    DefaultKeyedValues rowData=(DefaultKeyedValues)iterator.next();    int index=rowData.getIndex(columnKey);    if (index >= 0) {      rowData.removeValue(columnKey);    }  }  this.columnKeys.remove(columnKey);}  }
class C{  public static Character toCharacter(Object o,Character defaultValue){  if (o instanceof Character)   return (Character)o;  if (defaultValue != null)   return new Character(toCharValue(o,defaultValue.charValue()));  char res=toCharValue(o,Character.MIN_VALUE);  if (res == Character.MIN_VALUE)   return defaultValue;  return new Character(res);}  }
class C{  public void testDoConfigureSetsAdminServer() throws Exception {  configuration.setProperty(WebLogicPropertySet.SERVER,"asda");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("asda","//weblogic:admin-server-name",config);}  }
class C{  public void release(){  super.release();  init();}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public void leaveActiveDirectory(CredentialsDTO activeDirectoryCredentials){  Validate.notEmpty(activeDirectoryCredentials.getUsername(),"Missing username. Username is required to leave AD");  Validate.notEmpty(activeDirectoryCredentials.getPassword(),"Missing password. Password is required to leave AD");  try {    getIDMClient().leaveActiveDirectory(activeDirectoryCredentials.getUsername(),activeDirectoryCredentials.getPassword());  } catch (  IdmADDomainAccessDeniedException|ADIDSAlreadyExistException e) {    log.warn("Failed to leave active directory due to a client side error",e);    throw new BadRequestException(sm.getString("res.server.delete.leavead.failed"),e);  }catch (  Exception e) {    log.error("Failed to leave active directory due to a server side error",e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public String createReplicationPolicy(IsilonSyncPolicy replicationPolicy) throws IsilonException {  return create(_baseUrl.resolve(URI_REPLICATION_POLICIES),"policies",replicationPolicy);}  }
class C{  public static boolean isFiniteSlow(Automaton a){  if (a.getNumStates() == 0) {    return true;  }  return isFiniteSlow(a,0,new HashSet<Integer>());}  }
class C{  public boolean hasCcUpdates(){  return hasRepeatingExtension(CcUpdate.class);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  StatementPatternNode stmtPatternWithVar(final String varName){  return stmtPatternWithVar(varName,false);}  }
class C{  public N4MemberAnnotationList createN4MemberAnnotationList(){  N4MemberAnnotationListImpl n4MemberAnnotationList=new N4MemberAnnotationListImpl();  return n4MemberAnnotationList;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  FaviterAppsDao.createTable(db,ifNotExists);}  }
class C{  public static byte[] loadPemFileAsBytes(final String file) throws IOException {  final PemReader pemReader=new PemReader(new FileReader(file));  final PemObject pemObject=pemReader.readPemObject();  final byte[] content=pemObject.getContent();  logger.debug("Reading PEM file {}, type = {}",file,pemObject.getType());  pemReader.close();  return content;}  }
class C{  public void sendMessage(Message message) throws XMPPException {  message.setTo(participant);  message.setType(Message.Type.chat);  message.setThread(threadID);  chatManager.sendMessage(this,message);}  }
class C{  protected void onContextDestroyed0(){}  }
class C{  public MGRSPoint(LatLonPoint llpoint,Ellipsoid ellip){  this();  LLtoMGRS(llpoint,ellip,this);}  }
class C{  public void store(boolean value,Offset offset){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean must=evalBool(stack.pop());  long end=getLong(stack);  long start=getLong(stack);  Channel c=getChannel(stack);  return (c == null) ? null : Wizard.getInstance().getAirings(c.getStationID(),start,end,must);}  }
class C{  private JTree buildJTree(HelpNode root){  if (root == null)   return new JTree();  MutableTreeNode rn=new DefaultMutableTreeNode(root);  DefaultTreeModel model=new DefaultTreeModel(rn);  JTree tree=new JTree(model);  for (int i=0; i < root.nodes.size(); i++) {    addHelpNodesToTree(root.nodes.get(i),model,rn);  }  this.expandAllNodes(tree);  return tree;}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  public void DDScompileDisplayList(float par1){  this.DDSdisplayList=GLAllocation.generateDisplayLists(1);  GL11.glNewList(this.DDSdisplayList,GL11.GL_COMPILE);  Tessellator tessellator=Tessellator.instance;  for (int i=0; i < this.cubeList.size(); ++i) {    ((ModelBox)this.cubeList.get(i)).render(tessellator,par1);  }  GL11.glEndList();  this.DDScompiled=true;}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){  while (true) {    try {      if (!cleanUp(queue.remove())) {        break;      }    } catch (    InterruptedException e) {    }  }}  }
class C{  public SinglePortUdpHarvester(TransportAddress localAddress) throws IOException {  super(localAddress);  logger.info("Initialized SinglePortUdpHarvester with address " + localAddress);}  }
class C{  private void loadProfile(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  public CertificateVersion(DerValue val) throws IOException {  version=V1;  construct(val);}  }
class C{  @Override public boolean addAll(Collection<? extends KnownShield> collection){  throw new UnsupportedOperationException();}  }
class C{  public RpfFileSearch(String startingDir){  handleEntry(startingDir);}  }
class C{  @KnownFailure("Wildcard operator does not seem wo work correctly.") public void test_getColumnsSpecific() throws SQLException {  String[] tablesName={DatabaseCreator.TEST_TABLE1,DatabaseCreator.TEST_TABLE3};  String[] fields={"id","field1","field2","field3","fkey"};  String[] nullable={"YES","NO",""};  int[] nullableInt={DatabaseMetaData.columnNoNulls,DatabaseMetaData.columnNullable,DatabaseMetaData.columnNullableUnknown};  Arrays.sort(tablesName);  Arrays.sort(fields);  Arrays.sort(nullableInt);  Arrays.sort(nullable);  int countSingle=0;  int countAll1=0;  int countAll2=0;  try {    ResultSet rs=meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    while (rs.next()) {      assertTrue("Invalid table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);      assertTrue("Invalid field name",Arrays.binarySearch(fields,rs.getString("COLUMN_NAME")) > -1);      assertTrue("Invalid nullable value",Arrays.binarySearch(nullable,rs.getString("IS_NULLABLE")) > -1);      assertTrue("Invalid nullable code",Arrays.binarySearch(nullableInt,rs.getInt("NULLABLE")) > -1);      countSingle++;    }    assertEquals("Not all results are found",5,countSingle);    rs.close();  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet rs=meta.getColumns(null,null,"%" + DatabaseCreator.CREATE_TABLE1.substring(0,3) + "%","%");    while (rs.next()) {      assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);      countAll1++;    }    assertEquals("Not all results are found",6,countAll1);    rs.close();  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet rs=meta.getColumns(null,null,"%TEST_%","%");    while (rs.next()) {      assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);      countAll2++;    }    assertEquals("Not all results are found",6,countAll2);    rs.close();  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  conn.close();  try {    meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public boolean isSetResponse(){  return this.response != null;}  }
class C{  public static <T>Patch<T> diff(List<T> original,List<T> revised){  return DiffUtils.diff(original,revised,new MyersDiff<T>());}  }
class C{  @Override public void close() throws IOException {  close(ErrorCode.NO_ERROR,ErrorCode.CANCEL);}  }
class C{  public void doProperties(final TradeOrder instance){  try {    if (null == instance.getTradestrategy().getPortfolio().getIndividualAccount()) {      AllocationMethodPanel allocationMethodPanel=new AllocationMethodPanel(instance);      if (null != allocationMethodPanel) {        TextDialog dialog=new TextDialog(this.getFrame(),"FA Account Properties",true,allocationMethodPanel);        dialog.setLocationRelativeTo(this);        dialog.setVisible(true);        if (!dialog.getCancel()) {          if (null != instance.getFAProfile()) {            instance.setFAGroup(null);            instance.setFAMethod(null);            instance.setFAPercent(null);            instance.setAccountNumber(null);          } else {            if (null != instance.getFAGroup()) {              instance.setAccountNumber(null);            } else {              instance.setAccountNumber(instance.getTradestrategy().getPortfolio().getIndividualAccount().getAccountNumber());            }          }        }      }    } else {      this.setStatusBarMessage("No properties for Individual accounts ...\n",BasePanel.INFORMATION);    }  } catch (  Exception ex) {    this.setErrorMessage("Error setting FA properties.",ex.getMessage(),ex);  }}  }
class C{  public boolean isMandatoryWithholding(){  Object oo=get_Value(COLUMNNAME_IsMandatoryWithholding);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int nextInt(){  return nextInt(this.mean);}  }
class C{  private static synchronized void removeTeam(int teamIndex){  TeamInfo removedTeam=liveTeams.remove(teamIndex);  System.out.println("[-" + removedTeam + "]");}  }
class C{  SeaGlassStyle(String prefix,JComponent c){  this.component=c;  this.prefix=prefix;  this.painter=new SeaGlassSynthPainterImpl(this);}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public static double[] mean(double[][] vs){  int k=vs.length;  if (k == 0) {    throw new IllegalArgumentException("empty vector");  }  int n=vs[0].length;  double[] mean=new double[n];  for (int j=0; j < n; j++) {    for (int i=0; i < k; i++) {      mean[j]+=vs[i][j];    }    mean[j]/=k;  }  return mean;}  }
class C{  protected GenericSorting(){}  }
class C{  public Message authResponse(AuthRequest authReq,String userSelId,String userSelClaimed,boolean authenticatedAndApproved,String opEndpoint,boolean signNow){  _log.info("Processing authentication request...");  boolean isVersion2=authReq.isVersion2();  if (authReq.getReturnTo() == null) {    _log.error("No return_to in the received (valid) auth request; " + "returning null auth response.");    return null;  }  try {    if (authenticatedAndApproved) {      try {        new URL(opEndpoint);      } catch (      MalformedURLException e) {        String errMsg="Invalid OP-endpoint configured; " + "cannot issue authentication responses." + opEndpoint;        _log.error(errMsg,e);        return DirectError.createDirectError(new ServerException(errMsg,e),isVersion2);      }      String id;      String claimed;      if (AuthRequest.SELECT_ID.equals(authReq.getIdentity())) {        id=userSelId;        claimed=userSelClaimed;      } else {        id=userSelId != null ? userSelId : authReq.getIdentity();        claimed=userSelClaimed != null ? userSelClaimed : authReq.getClaimed();      }      if (id == null)       throw new ServerException("No identifier provided by the authentication request " + "or by the OpenID Provider");      if (DEBUG)       _log.debug("Using ClaimedID: " + claimed + " OP-specific ID: "+ id);      Association assoc=null;      String handle=authReq.getHandle();      String invalidateHandle=null;      if (handle != null) {        assoc=_sharedAssociations.load(handle);        if (assoc == null) {          _log.info("Invalidating handle: " + handle);          invalidateHandle=handle;        } else         _log.info("Loaded shared association; handle: " + handle);      }      if (assoc == null) {        assoc=_privateAssociations.generate(_prefAssocSessEnc.getAssociationType(),_expireIn);        _log.info("Generated private association; handle: " + assoc.getHandle());      }      AuthSuccess response=AuthSuccess.createAuthSuccess(opEndpoint,claimed,id,!isVersion2,authReq.getReturnTo(),isVersion2 ? _nonceGenerator.next() : null,invalidateHandle,assoc,false);      if (_signFields != null)       response.setSignFields(_signFields);      if (_signExtensions != null)       response.setSignExtensions(_signExtensions);      if (signNow)       response.setSignature(assoc.sign(response.getSignedText()));      _log.info("Returning positive assertion for " + response.getReturnTo());      return response;    } else {      if (authReq.isImmediate()) {        _log.error("Responding with immediate authentication " + "failure to " + authReq.getReturnTo());        authReq.setImmediate(false);        String userSetupUrl=_userSetupUrl == null ? opEndpoint : _userSetupUrl;        userSetupUrl+=(userSetupUrl.contains("?") ? "&" : "?") + authReq.wwwFormEncoding();        return AuthImmediateFailure.createAuthImmediateFailure(userSetupUrl,authReq.getReturnTo(),!isVersion2);      } else {        _log.error("Responding with authentication failure to " + authReq.getReturnTo());        return new AuthFailure(!isVersion2,authReq.getReturnTo());      }    }  } catch (  OpenIDException e) {    if (authReq.hasParameter("openid.return_to")) {      _log.error("Error processing authentication request; " + "responding with an indirect error message.",e);      return IndirectError.createIndirectError(e,authReq.getReturnTo(),!isVersion2);    } else {      _log.error("Error processing authentication request; " + "responding with a direct error message.",e);      return DirectError.createDirectError(e,!isVersion2);    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_SOURCE__MODEL:    return model != null;}return super.eIsSet(featureID);}  }
class C{  public void serializeFields(Map<?,?> value,JsonGenerator jgen,SerializerProvider provider) throws IOException, JsonGenerationException {  if (_valueTypeSerializer != null) {    serializeTypedFields(value,jgen,provider);    return;  }  final JsonSerializer<Object> keySerializer=_keySerializer;  final HashSet<String> ignored=_ignoredEntries;  final boolean skipNulls=!provider.isEnabled(SerializationConfig.Feature.WRITE_NULL_MAP_VALUES);  PropertySerializerMap serializers=_dynamicValueSerializers;  for (  Map.Entry<?,?> entry : value.entrySet()) {    Object valueElem=entry.getValue();    Object keyElem=entry.getKey();    if (keyElem == null) {      provider.getNullKeySerializer().serialize(null,jgen,provider);    } else {      if (skipNulls && valueElem == null)       continue;      if (ignored != null && ignored.contains(keyElem))       continue;      keySerializer.serialize(keyElem,jgen,provider);    }    if (valueElem == null) {      provider.defaultSerializeNull(jgen);    } else {      Class<?> cc=valueElem.getClass();      JsonSerializer<Object> serializer=serializers.serializerFor(cc);      if (serializer == null) {        if (_valueType.hasGenericTypes()) {          serializer=_findAndAddDynamic(serializers,provider.constructSpecializedType(_valueType,cc),provider);        } else {          serializer=_findAndAddDynamic(serializers,cc,provider);        }        serializers=_dynamicValueSerializers;      }      try {        serializer.serialize(valueElem,jgen,provider);      } catch (      Exception e) {        String keyDesc="" + keyElem;        wrapAndThrow(provider,e,value,keyDesc);      }    }  }}  }
class C{  public ScriptedProblem(Reader reader,String name) throws ScriptException {  super();  engine=newScriptEngine(name);  internalProblem=createInvocableInstance(reader);}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return decryptString(civ,secretKeys,"UTF-8");}  }
class C{  public ArrayList assignFrontRanks(Subpopulation subpop){  Individual[] inds=subpop.individuals;  ArrayList frontsByRank=MultiObjectiveFitness.partitionIntoRanks(inds);  int numRanks=frontsByRank.size();  for (int rank=0; rank < numRanks; rank++) {    ArrayList front=(ArrayList)(frontsByRank.get(rank));    int numInds=front.size();    for (int ind=0; ind < numInds; ind++)     ((NSGA2MultiObjectiveFitness)(((Individual)(front.get(ind))).fitness)).rank=rank;  }  return frontsByRank;}  }
class C{  private void finishScrollStacks(){  cancelAnimation(this,Property.STACK_SNAP);  final int currentModelIndex=getTabStackIndex();  float delta=Math.abs(currentModelIndex + mRenderedScrollOffset);  float target=-currentModelIndex;  if (delta != 0) {    long duration=FLING_MIN_DURATION + (long)Math.abs(delta * getFullScrollDistance() / mFlingSpeed);    addToAnimation(this,Property.STACK_SNAP,mRenderedScrollOffset,target,duration,0);  } else {    setProperty(Property.STACK_SNAP,target);    if (mTemporarySelectedStack != null) {      mTabModelSelector.selectModel(mTemporarySelectedStack);      mTemporarySelectedStack=null;    }  }}  }
class C{  public void iterate(){  for (int i=0; i < numfit; i++) {    System.arraycopy(alpha[i],0,covmat[i],0,numfit);    covmat[i][i]*=(1.0 + lambda);  }  LinearEquationSystem ls=new LinearEquationSystem(covmat,beta);  ls.solveByTotalPivotSearch();  covmat=ls.getCoefficents();  deltaparams=ls.getRHS();  int i2=0;  for (int i=0; i < numparams; i++) {    if (dofit[i]) {      paramstry[i]=params[i] + deltaparams[i2];      i2++;    }  }  double newchisq=simulateParameters(paramstry);  if (newchisq < chisq) {    if (lambda * 0.1 > Double.MIN_NORMAL) {      lambda=lambda * 0.1;    }    chisq=newchisq;    for (int i=0; i < numfit; i++) {      System.arraycopy(covmat[i],0,alpha[i],0,numfit);      beta[i]=deltaparams[i];    }    System.arraycopy(paramstry,0,params,0,numparams);  } else {    if (lambda * 10 < Double.MAX_VALUE) {      lambda=lambda * 10;    }  }}  }
class C{  private UUID bestMapperNode(@Nullable Collection<UUID> affIds,HadoopMapReducePlanTopology top){  UUID prioAffId=F.first(affIds);  HadoopMapReducePlanGroup resGrp=null;  MapperPriority resPrio=MapperPriority.NORMAL;  int resWeight=Integer.MAX_VALUE;  for (  HadoopMapReducePlanGroup grp : top.groups()) {    MapperPriority prio=groupPriority(grp,affIds,prioAffId);    int weight=grp.weight() + (prio == MapperPriority.NORMAL ? rmtMapperWeight : locMapperWeight);    if (resGrp == null || weight < resWeight || weight == resWeight && prio.value() > resPrio.value()) {      resGrp=grp;      resPrio=prio;      resWeight=weight;    }  }  assert resGrp != null;  resGrp.weight(resWeight);  return bestMapperNodeForGroup(resGrp,resPrio,affIds,prioAffId);}  }
class C{  private void adjustBlockListeners(List<OBlock> oldRange,List<OBlock> newRange,Tracker tracker){  Iterator<OBlock> iter=newRange.iterator();  while (iter.hasNext()) {    OBlock b=iter.next();    if (oldRange.contains(b)) {      oldRange.remove(b);      continue;    }    addBlockListener(b,tracker);  }  iter=oldRange.iterator();  while (iter.hasNext()) {    removeBlockListener(iter.next(),tracker);  }}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          UNSAFE.compareAndSwapLong(this,stateOffset,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          UNSAFE.compareAndSwapLong(this,stateOffset,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  public IrdaManager(IIrdaManager service){  mService=service;}  }
class C{  public void put(char[] key,int length,int value){  if (key == null)   return;  int hash=hash(key,length) & _mask;  while (true) {    char[] testKey=_keys[hash];    if (testKey == null || equals(testKey,key,length)) {      _keys[hash]=new char[length];      for (int i=length - 1; i >= 0; i--) {        char ch=key[i];        if ('A' <= ch && ch <= 'Z')         ch+='a' - 'A';        _keys[hash][i]=ch;      }      _values[hash]=value;      _size++;      if (_keys.length <= 4 * _size)       resize(2 * _keys.length);      return;    } else     if (key != testKey && !testKey.equals(key)) {      hash=(hash + 1) & _mask;      continue;    } else {      _values[hash]=value;      return;    }  }}  }
class C{  public static void logWarning(Throwable exception,String message){  log(IStatus.WARNING,IStatus.OK,message,exception);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.NEW_EXPRESSION__TYPE_ARGS:    return typeArgs != null && !typeArgs.isEmpty();case N4JSPackage.NEW_EXPRESSION__CALLEE:  return callee != null;case N4JSPackage.NEW_EXPRESSION__ARGUMENTS:return arguments != null && !arguments.isEmpty();case N4JSPackage.NEW_EXPRESSION__WITH_ARGS:return withArgs != WITH_ARGS_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public WFG(int k,int l,int M){  super(k + l,M);  this.k=k;  this.l=l;  this.M=M;}  }
class C{  @Override protected void launch(){  m_FileChooser=GUIHelper.newConverterFileChooser();  int retVal=m_FileChooser.showOpenDialog(null);  if (retVal != JFileChooser.APPROVE_OPTION)   return;  File file=m_FileChooser.getSelectedFile();  Instances data;  try {    data=m_FileChooser.getLoader().getDataSet();  } catch (  Exception e) {    JOptionPane.showMessageDialog(null,"Error loading file '" + file + "':\n"+ e,"Error",JOptionPane.ERROR_MESSAGE);    e.printStackTrace();    return;  }  data.setClassIndex(data.numAttributes() - 1);  ThresholdVisualizePanel vmc=new ThresholdVisualizePanel();  vmc.setROCString("(Area under ROC = " + Utils.doubleToString(ThresholdCurve.getROCArea(data),4) + ")");  vmc.setName(data.relationName());  PlotData2D tempd=new PlotData2D(data);  tempd.setPlotName(data.relationName());  tempd.m_displayAllPoints=true;  boolean[] cp=new boolean[data.numInstances()];  for (int n=1; n < cp.length; n++)   cp[n]=true;  try {    tempd.setConnectPoints(cp);    vmc.addPlot(tempd);    if (data.attribute(ThresholdCurve.FP_RATE_NAME) != null)     vmc.setXIndex(data.attribute(ThresholdCurve.FP_RATE_NAME).index());    if (data.attribute(ThresholdCurve.TP_RATE_NAME) != null)     vmc.setYIndex(data.attribute(ThresholdCurve.TP_RATE_NAME).index());  } catch (  Exception e) {    JOptionPane.showMessageDialog(null,"Error adding plot:\n" + e,"Error",JOptionPane.ERROR_MESSAGE);    e.printStackTrace();    return;  }  MekaFrame frame=new MekaFrame();  frame.setTitle(getName());  frame.setDefaultCloseOperation(MekaFrame.DISPOSE_ON_CLOSE);  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(vmc);  frame.setSize(800,600);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  protected void encodeLineSuffix(OutputStream outStream) throws IOException {  pStream.println();}  }
class C{  public void testLoop(){  DoubleBuffer buffer=new DoubleBuffer(10);  for (int i=0; i < 1000; i++) {    buffer.setNext(i);    assertEquals(i >= 9,buffer.isFull());    if (i > 10) {      assertEquals(i - 4.5,buffer.getAverage());    }  }}  }
class C{  public RegistrationExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  public Vector4f add(Vector4fc v){  x+=v.x();  y+=v.y();  z+=v.z();  w+=v.w();  return this;}  }
class C{  public void enableAllAttributeDependencies(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isAttribute()) {      enableDependency(cap);    }  }}  }
class C{  private static Pair<String,String> preIndexedROR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + Integer.decode(immediateNodeValue),dw,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(32 - Integer.decode(immediateNodeValue)),dw,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public TestStackExRequest clone(){  TestStackExRequest result=new TestStackExRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.TestId=TestId;  result.Iteration=Iteration;  result.Input=Input == null ? null : Input.clone();  return result;}  }
class C{  public static String escapeUriUserInfo(String value){  return URI_USERINFO_ESCAPER.escape(value);}  }
class C{  public MmsException(String message){  super(message);}  }
class C{  private int powMod(int a,int k){  a%=BASE;  int res=1;  for (int i=0; i < k; i++) {    res=(res * a) % BASE;  }  return res;}  }
class C{  @RequestProcessing(value="/notifications/broadcast",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showBroadcastNotifications(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/notifications/broadcast.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final String userId=currentUser.optString(Keys.OBJECT_ID);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("broadcastNotificationsCnt");  final int windowSize=Symphonys.getInt("broadcastNotificationsWindowSize");  final JSONObject result=notificationQueryService.getBroadcastNotifications(userId,pageNum,pageSize);  @SuppressWarnings("unchecked") final List<JSONObject> broadcastNotifications=(List<JSONObject>)result.get(Keys.RESULTS);  dataModel.put(Common.BROADCAST_NOTIFICATIONS,broadcastNotifications);  fillNotificationCount(userId,dataModel);  notificationMgmtService.makeRead(broadcastNotifications);  final int recordCnt=result.getInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)recordCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  private boolean okPath(Positionable pos,OBlock block){  java.util.List<Positionable> icons=_circuitMap.get(block);  if (pos instanceof PortalIcon) {    Portal portal=((PortalIcon)pos).getPortal();    if (portal != null) {      if (block.equals(portal.getFromBlock()) || block.equals(portal.getToBlock())) {        ((PortalIcon)pos).setStatus(PortalIcon.PATH);        return true;      }    }    JOptionPane.showMessageDialog(_editor,java.text.MessageFormat.format(Bundle.getMessage("portalNotInCircuit"),block.getDisplayName()),Bundle.getMessage("badPath"),JOptionPane.WARNING_MESSAGE);    return false;  }  if (!icons.contains(pos)) {    JOptionPane.showMessageDialog(_editor,java.text.MessageFormat.format(Bundle.getMessage("iconNotInCircuit"),block.getDisplayName()),Bundle.getMessage("badPath"),JOptionPane.WARNING_MESSAGE);    return false;  }  return true;}  }
class C{  public void addProcessStateListener(ProcessStateListener processStateListener){  this.processStateListeners.add(processStateListener);}  }
class C{  public NotificationChain basicSetTrigger(Trigger newTrigger,NotificationChain msgs){  Trigger oldTrigger=trigger;  trigger=newTrigger;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SGraphPackage.REACTION__TRIGGER,oldTrigger,newTrigger);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static List<Integer> mapToGridCellsOnWay(float lon1,float lat1,float lon2,float lat2){  int x1=(int)Math.floor((Math.abs(LON_WEST) - Math.abs(lon1)) / DELTA_LON);  int y1=(int)Math.floor((LAT_NORTH - lat1) / DELTA_LAT);  int x2=(int)Math.floor((Math.abs(LON_WEST) - Math.abs(lon2)) / DELTA_LON);  int y2=(int)Math.floor((LAT_NORTH - lat2) / DELTA_LAT);  int startX, startY, endX, endY;  if (x1 <= x2) {    startX=x1;    startY=y1;    endX=x2;    endY=y2;  } else {    startX=x2;    startY=y2;    endX=x1;    endY=y1;  }  double slope=(endY - startY) / ((endX - startX) + 0.00000001);  int curX=startX;  int curY=startY;  ArrayList<Integer> cellIds=new ArrayList<>(64);  cellIds.add(curX + (curY * NUMBER_OF_GRID_X));  while (curX < endX || curY != endY) {    if (slope > 0) {      double y=(curX - startX + 0.5) * slope + startY - 0.5;      if (y > curY - 0.05 && y < curY + 0.05) {        curX++;        curY++;      } else       if (y < curY) {        curX++;      } else {        curY++;      }    } else {      double y=(curX - startX + 0.5) * slope + startY + 0.5;      if (y > curY - 0.05 && y < curY + 0.05) {        curX++;        curY--;      }      if (y > curY) {        curX++;      } else {        curY--;      }    }    cellIds.add(curX + (curY * NUMBER_OF_GRID_X));  }  return cellIds;}  }
class C{  public DTMAxisIterator reset(){  m_ancestorsPos=m_size - 1;  _currentNode=(m_ancestorsPos >= 0) ? m_ancestors[m_ancestorsPos] : DTM.NULL;  return resetPosition();}  }
class C{  @Nullable public static PsiElement restoreBySignature(@NotNull PsiFile file,@NotNull String signature,@Nullable StringBuilder processingInfoStorage){  for (  ElementSignatureProvider provider : Extensions.getExtensions(ElementSignatureProvider.EP_NAME)) {    PsiElement result=provider.restoreBySignature(file,signature,processingInfoStorage);    if (result != null)     return result;  }  return GENERIC_PROVIDER.restoreBySignature(file,signature,processingInfoStorage);}  }
class C{  @SuppressWarnings("unchecked") public <T>T data(){  return (T)data;}  }
class C{  private static List<ChunkCoordinates> scan(IChunkProvider chunkProvider,ChunkData[][] map,ChunkCoordinates coord,int range){  int rangeSqr=range * range;  List<ChunkCoordinates> cc3=new LinkedList<ChunkCoordinates>();  int x=coord.posX;  int y=coord.posY;  int z=coord.posZ;  ChunkData data=map[x][z];  if (data.isAdded(y) || data.distance > rangeSqr)   return cc3;  data.add(y);  Chunk c=chunkProvider.provideChunk(data.x,data.z);  if (!c.isChunkLoaded) {    c=chunkProvider.loadChunk(data.x,data.z);  }  if (c.getAreLevelsEmpty(y << 4,(y << 4) + 15)) {    data.empty(y);    if (x < (range << 1) && !(map[x + 1][z].isAdded(y) || map[x + 1][z].distance > rangeSqr || map[x + 1][z].distance < map[x][z].distance))     cc3.add(new ChunkCoordinates(x + 1,y,z));    if (x > 0 && !(map[x - 1][z].isAdded(y) || map[x - 1][z].distance > rangeSqr || map[x - 1][z].distance < map[x][z].distance))     cc3.add(new ChunkCoordinates(x - 1,y,z));    if (y < 15 && !(map[x][z].isAdded(y + 1) || map[x][z].distance > rangeSqr))     cc3.add(new ChunkCoordinates(x,y + 1,z));    if (y > 0 && !(map[x][z].isAdded(y - 1) || map[x][z].distance > rangeSqr))     cc3.add(new ChunkCoordinates(x,y - 1,z));    ;    if (z < (range << 1) && !(map[x][z + 1].isAdded(y) || map[x][z + 1].distance > rangeSqr || map[x][z + 1].distance < map[x][z].distance))     cc3.add(new ChunkCoordinates(x,y,z + 1));    if (z > 0 && !(map[x][z - 1].isAdded(y) || map[x][z - 1].distance > rangeSqr || map[x][z - 1].distance < map[x][z].distance))     cc3.add(new ChunkCoordinates(x,y,z - 1));  } else {    boolean ok=false;    if (z > 0 && !(map[x][z - 1].isAdded(y) || map[x][z - 1].distance > rangeSqr || map[x][z - 1].distance < map[x][z].distance)) {      for (int i=0; i < 16 && !ok; i++) {        for (int l=0; l < 16 && !ok; l++) {          if (!isBlockNormalCubeDefault(c,l,(y << 4) + i,0,false))           ok=true;        }      }      if (ok) {        cc3.add(new ChunkCoordinates(x,y,z - 1));      }      ok=false;    }    if (z < (range << 1) && !(map[x][z + 1].isAdded(y) || map[x][z + 1].distance > rangeSqr || map[x][z + 1].distance < map[x][z].distance)) {      for (int i=0; i < 16 && !ok; i++) {        for (int l=0; l < 16 && !ok; l++) {          if (!isBlockNormalCubeDefault(c,l,(y << 4) + i,15,false))           ok=true;        }      }      if (ok) {        cc3.add(new ChunkCoordinates(x,y,z + 1));      }      ok=false;    }    if (y > 0 && !(map[x][z].isAdded(y - 1) || map[x][z].distance > rangeSqr)) {      for (int i=0; i < 16 && !ok; i++) {        for (int l=0; l < 16 && !ok; l++) {          if (!isBlockNormalCubeDefault(c,l,(y << 4),i,false))           ok=true;        }      }      if (ok) {        cc3.add(new ChunkCoordinates(x,y - 1,z));      }      ok=false;    }    if (y < 15 && !(map[x][z].isAdded(y + 1) || map[x][z].distance > rangeSqr)) {      for (int i=0; i < 16 && !ok; i++) {        for (int l=0; l < 16 && !ok; l++) {          if (!isBlockNormalCubeDefault(c,l,(y << 4) + 15,i,false))           ok=true;        }      }      if (ok) {        cc3.add(new ChunkCoordinates(x,y + 1,z));      }      ok=false;    }    if (x > 0 && !(map[x - 1][z].isAdded(y) || map[x - 1][z].distance > rangeSqr || map[x - 1][z].distance < map[x][z].distance)) {      for (int i=0; i < 16 && !ok; i++) {        for (int l=0; l < 16 && !ok; l++) {          if (!isBlockNormalCubeDefault(c,0,(y << 4) + l,i,false))           ok=true;        }      }      if (ok) {        cc3.add(new ChunkCoordinates(x - 1,y,z));      }      ok=false;    }    if (x < (range << 1) && !(map[x + 1][z].isAdded(y) || map[x + 1][z].distance > rangeSqr || map[x + 1][z].distance < map[x][z].distance)) {      for (int i=0; i < 16 && !ok; i++) {        for (int l=0; l < 16 && !ok; l++) {          if (!isBlockNormalCubeDefault(c,15,(y << 4) + l,i,false))           ok=true;        }      }      if (ok) {        cc3.add(new ChunkCoordinates(x + 1,y,z));      }    }  }  return cc3;}  }
class C{  public boolean equalsDefault(){  return value == 0;}  }
class C{  public long startstack(){  return Long.parseLong(fields[27]);}  }
class C{  public EmissionLinkAnalyzer(final double simulationEndTime,final String emissionEventFile,final int noOfTimeBins,final String shapeFile,final Network network,final String userGroup){  super(EmissionLinkAnalyzer.class.getSimpleName());  this.emissionEventsFile=emissionEventFile;  LOG.info("Aggregating emissions for each " + simulationEndTime / noOfTimeBins + " sec time bin.");  AreaFilter af=new AreaFilter(shapeFile);  this.warmHandler=new FilteredWarmEmissionHandler(simulationEndTime,noOfTimeBins,userGroup,new MunichPersonFilter(),network,af);  this.coldHandler=new FilteredColdEmissionHandler(simulationEndTime,noOfTimeBins,userGroup,new MunichPersonFilter(),network,af);}  }
class C{  public void show(){  appWindow.setVisible(true);  if (IdeFinder.getOS() == OS.MAC_OS_X) {    try {      AppleNativeLook.go();    } catch (    Throwable ignore) {    }  }}  }
class C{  public static int fetchContextColor(Context context,int androidAttribute){  TypedValue typedValue=new TypedValue();  TypedArray a=context.obtainStyledAttributes(typedValue.data,new int[]{androidAttribute});  int color=a.getColor(0,0);  a.recycle();  return color;}  }
class C{  static TBigInteger pow2ModPow(TBigInteger base,TBigInteger exponent,int j){  TBigInteger res=TBigInteger.ONE;  TBigInteger e=exponent.copy();  TBigInteger baseMod2toN=base.copy();  TBigInteger res2;  if (base.testBit(0)) {    inplaceModPow2(e,j - 1);  }  inplaceModPow2(baseMod2toN,j);  for (int i=e.bitLength() - 1; i >= 0; i--) {    res2=res.copy();    inplaceModPow2(res2,j);    res=res.multiply(res2);    if (TBitLevel.testBit(e,i)) {      res=res.multiply(baseMod2toN);      inplaceModPow2(res,j);    }  }  inplaceModPow2(res,j);  return res;}  }
class C{  public Game init(){  if (state != State.PREINIT) {    throw new IllegalStateException("EntryPoint#postInit() has to be only once.");  }  DIEPBundle.bundles=bundles;  injector=Optional.of(Bootstrap.injector(DIEPBundle.class));  state=State.POSTINIT;  return injector.map(null).orElseThrow(null);}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      throw new UnsupportedOperationException();    }  }  length=len;  return this;}  }
class C{  @SmallTest public void testMusicPlaybackScenario(){  assertBetterCandidate(View.FOCUS_LEFT,new Rect(227,185,312,231),new Rect(195,386,266,438),new Rect(124,386,195,438));}  }
class C{  public Boolean isDeltaDiskBackingsSupported(){  return deltaDiskBackingsSupported;}  }
class C{  public boolean isOnBehalfUser(){  return master != null;}  }
class C{  private DragLayer(){  Toolkit.getDefaultToolkit().addAWTEventListener(this,AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);  setOpaque(false);}  }
class C{  public void updateSystemInsets(Rect insets){  systemInsets.set(insets);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthConfig[");  buffer.append(", m_maxNumTries = ").append(m_maxNumTries);  buffer.append(", m_userSearchByDn = ").append(m_userSearchByDn);  buffer.append(", m_userAttrName = ").append(m_userAttrName);  buffer.append(", m_userStart = ").append(m_userStart);  buffer.append(", m_userScope = ").append(m_userScope);  buffer.append(", m_groupStart = ").append(m_groupStart);  buffer.append(", m_groupScope = ").append(m_groupScope);  buffer.append("]");  return buffer.toString();}  }
class C{  private void titleTable(HSSFWorkbook book,HSSFSheet sheet,int fila,MReportColumn[] m_columns){  short col=0;  HSSFFont font=book.createFont();  font.setFontHeightInPoints((short)13);  font.setFontName(HSSFFont.FONT_ARIAL);  font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);  HSSFCellStyle cellStyle=book.createCellStyle();  cellStyle.setWrapText(true);  cellStyle.setAlignment(HSSFCellStyle.ALIGN_JUSTIFY);  cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);  cellStyle.setFont(font);  HSSFRow row=sheet.createRow(fila);  HSSFRichTextString text=new HSSFRichTextString(Msg.translate(Env.getCtx(),"name").toUpperCase());  HSSFCell cell=row.createCell(col++);  cell.setCellStyle(cellStyle);  cell.setCellType(HSSFCell.CELL_TYPE_STRING);  cell.setCellValue(text);  text=new HSSFRichTextString(Msg.translate(Env.getCtx(),"description").toUpperCase());  cell=row.createCell(col++);  cell.setCellStyle(cellStyle);  cell.setCellType(HSSFCell.CELL_TYPE_STRING);  cell.setCellValue(text);  for (  MReportColumn mcol : m_columns) {    String colName=mcol.getName();    text=new HSSFRichTextString(colName.toUpperCase());    cell=row.createCell(col++);    cell.setCellStyle(cellStyle);    cell.setCellType(HSSFCell.CELL_TYPE_STRING);    cell.setCellValue(text);  }}  }
class C{  public static Image loadImage(String imagePath,boolean flipIt){  try {    BufferedImage bImage=ImageIO.read(new File(imagePath));    if (bImage == null) {      System.out.println("Unable to read image.");      return (null);    }    Image image=convertToArdor3DImage(bImage,flipIt);    return (image);  } catch (  Exception e) {    System.out.println("Unable to read image, see log.");    e.printStackTrace();    return (null);  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.external_load_so_button:    this.onDoBlur();  break;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.404 -0400",hash_original_method="62386991685EFA23920441655B819944",hash_generated_method="5BBB9FC117A95CDC8E04F751688B781F") public static long swapLong(long value){  return (((value >> 0) & 0xff) << 56) + (((value >> 8) & 0xff) << 48) + (((value >> 16) & 0xff) << 40)+ (((value >> 24) & 0xff) << 32)+ (((value >> 32) & 0xff) << 24)+ (((value >> 40) & 0xff) << 16)+ (((value >> 48) & 0xff) << 8)+ (((value >> 56) & 0xff) << 0);}  }
class C{  protected final void handleMove(final int x,final int y,final boolean updateTarget){  if (updateTarget) {    AWTAccessor.getComponentAccessor().setLocation(getTarget(),x,y);  }  postEvent(new ComponentEvent(getTarget(),ComponentEvent.COMPONENT_MOVED));}  }
class C{  public MWorkflow(Properties ctx,int AD_Workflow_ID,String trxName){  super(ctx,AD_Workflow_ID,trxName);  if (AD_Workflow_ID == 0) {    setAccessLevel(ACCESSLEVEL_Organization);    setAuthor("ComPiere, Inc.");    setDurationUnit(DURATIONUNIT_Day);    setDuration(1);    setEntityType(ENTITYTYPE_UserMaintained);    setIsDefault(false);    setPublishStatus(PUBLISHSTATUS_UnderRevision);    setVersion(0);    setCost(Env.ZERO);    setWaitingTime(0);    setWorkingTime(0);    setIsBetaFunctionality(false);  }  loadTrl();  loadNodes();}  }
class C{  public static BufferedImage denoiseImage(BufferedImage img){  double h=5d;  double sigma=2d;  int distance=5;  double sigma2=2 * sigma * sigma;  double h2=h * h;  BufferedImage result=getGrayscaleImage(img);  WritableRaster raster=result.getRaster();  int[] p=new int[1];  int[] pCol=new int[img.getHeight()];  int[] pColD=new int[img.getHeight()];  for (int x=0; x < raster.getWidth(); x++) {    raster.getPixels(x,0,1,raster.getHeight(),pCol);    for (int y=0; y < raster.getHeight(); y++) {      if (pCol[y] < 250) {        double weightSum=0;        double weight=0;        double graySum=0;        for (int dx=Math.max(0,x - distance); dx < Math.min(raster.getWidth(),x + distance); dx++) {          raster.getPixels(dx,0,1,raster.getHeight(),pColD);          for (int dy=Math.max(0,y - distance); dy < Math.min(y + distance,raster.getHeight()); dy++) {            if (dx != x && dy != y) {              double d2=(pCol[y] - pColD[dy]) * (pCol[y] - pColD[dy]);              weight=Math.exp(-1d / (h2) * Math.max(0d,d2 - sigma2));              weightSum+=weight;              graySum+=pColD[dy] * weight;            }          }        }        p[0]=((int)(graySum / weightSum));        raster.setPixel(x,y,p);      }    }  }  return result;}  }
class C{  public WebApp(){  instance=this;}  }
class C{  public int lengthKeyValue(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_KEYVALUE);}  }
class C{  void addClassToScope(Node n){  Preconditions.checkState(n.isClass());  String className=NodeUtil.getName(n);  if (className == null) {    return;  }  addTypeToScope(n,className);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String publicId;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  publicId=docType.getPublicId();  assertEquals("throw_Equals","STAFF",publicId);}  }
class C{  public SyntaxException(String complaint,Parser parser,int reason,String expected){  super(complaint);  this.reason=reason;  this.parser=parser;  this.scanner=parser.tokens;  this.expected=expected;}  }
class C{  protected String colorToString(Color c){  String result;  result="#" + Utils.padLeft(Integer.toHexString(c.getRed()),2) + Utils.padLeft(Integer.toHexString(c.getGreen()),2)+ Utils.padLeft(Integer.toHexString(c.getBlue()),2);  result=result.replaceAll("\\ ","0").toUpperCase();  return result;}  }
class C{  @KnownFailure("(Ticket 91) Tables apply foreign key constraint. Catalogs not supported") public void test_getCrossReferenceLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {  ResultSet rs=meta.getCrossReference(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE3,conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);  ResultSetMetaData rsmd=rs.getMetaData();  assertTrue("Rows do not obtained",rs.next());  int col=rsmd.getColumnCount();  assertEquals("Incorrect number of columns",14,col);  String[] columnNames={"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"};  for (int c=1; c <= col; ++c) {    assertEquals("Incorrect column name",columnNames[c - 1],rsmd.getColumnName(c));  }  assertEquals("Incorrect primary key table catalog",conn.getCatalog(),rs.getString("PKTABLE_CAT"));  assertEquals("Incorrect primary key table schema","",rs.getString("PKTABLE_SCHEM"));  assertEquals("Incorrect primary key table name",DatabaseCreator.TEST_TABLE3,rs.getString("PKTABLE_NAME"));  assertEquals("Incorrect primary key column name","fkey",rs.getString("PKCOLUMN_NAME"));  assertEquals("Incorrect foreign key table catalog",conn.getCatalog(),rs.getString("FKTABLE_CAT"));  assertEquals("Incorrect foreign key table schema","",rs.getString("FKTABLE_SCHEM"));  assertEquals("Incorrect foreign key table name",DatabaseCreator.TEST_TABLE1,rs.getString("FKTABLE_NAME"));  assertEquals("Incorrect foreign key column name","fk",rs.getString("FKCOLUMN_NAME"));  assertEquals("Incorrect sequence number within foreign key",1,rs.getShort("KEY_SEQ"));  assertEquals("Incorrect update rule value",DatabaseMetaData.importedKeyNoAction,rs.getShort("UPDATE_RULE"));  assertEquals("Incorrect delete rule value",DatabaseMetaData.importedKeyNoAction,rs.getShort("DELETE_RULE"));  assertNull("Incorrect foreign key name",rs.getString("FK_NAME"));  assertNull("Incorrect primary key name",rs.getString("PK_NAME"));  assertEquals("Incorrect deferrability",DatabaseMetaData.importedKeyNotDeferrable,rs.getShort("DEFERRABILITY"));  rs.close();  conn.close();  try {    meta.getCrossReference(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE3,conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);    fail("SQLException not thrown");  } catch (  SQLException e) {  }  conn.close();  try {    meta.getCrossReference(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE3,conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public int updateCharacters(Uri uri,ContentValues cvs,String selection,String[] selectionArgs){  int recsUpdated=0;synchronized (this) {    for (    CharacterRecord cr : mCharacterMap.values().toArray(new CharacterRecord[mCharacterMap.values().size()]))     recsUpdated+=updateEntryConditionally(cr,cvs,selection,selectionArgs);  }  return recsUpdated;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 188) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean isFieldsDisabled(){  if (model == null || model.getSelectedMarketplace() == null || model.getSelectedMarketplace().length() == 0) {    return true;  } else {    return false;  }}  }
class C{  public void addComponent(int index,Component cmp){  insertComponentAt(index,null,cmp);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public PseudoRandom prng(){  return prng;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.443 -0500",hash_original_method="885EAD88CE0EDAA6AE8B231FCD302B70",hash_generated_method="8D3182E73E386621BF2B58B3777AA340") public ASN1Implicit(int tagNumber,ASN1Type type){  super(CLASS_CONTEXTSPECIFIC,tagNumber);  if ((type instanceof ASN1Choice) || (type instanceof ASN1Any)) {    throw new IllegalArgumentException("Implicit tagging can not be used for ASN.1 ANY or CHOICE type");  }  this.type=type;  if (type.checkTag(type.id)) {    if (type.checkTag(type.constrId)) {      taggingType=TAGGING_STRING;    } else {      taggingType=TAGGING_PRIMITIVE;    }  } else {    taggingType=TAGGING_CONSTRUCTED;  }}  }
class C{  public static Connection open(DbConnectionConfig dbConConfig) throws Exception {  String cntParam;  String url;  String user;  String pwd;  Connection jdbcConn=null;  cntParam=dbConConfig.getCntParam();  user=dbConConfig.getUser();  pwd=dbConConfig.getPwd();  if (dbConConfig.isCntByDriver()) {    url=dbConConfig.getUrl();    jdbcConn=open(cntParam,url,user,pwd);  } else {    if ((user == null) && (pwd == null))     jdbcConn=open(cntParam); else     jdbcConn=open(cntParam,user,pwd);  }  return jdbcConn;}  }
class C{  public ActivationGroupID(ActivationSystem system){  this.system=system;}  }
class C{  public void sendClientDeletionRequest(SecurityServerId securityServer,ClientId clientId) throws Exception {  sendToProxy(builder.buildClientDeletionRequest(securityServer,clientId));}  }
class C{  public void resume(){  for (  final LifecycleListener listener : listeners) {    listener.resume();  }}  }
class C{  @RequestMapping("/be/taxreceipts") public String index(Map<String,Object> map,HttpServletResponse response){  return getAll(map,response);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  private static void processXML(PrintData pd,Document document,Element root){  for (int r=0; r < pd.getRowCount(); r++) {    pd.setRowIndex(r);    Element row=document.createElement(PrintData.XML_ROW_TAG);    row.setAttribute(XML_ATTRIBUTE_NO,String.valueOf(r));    if (pd.isFunctionRow())     row.setAttribute(XML_ATTRIBUTE_FUNCTION_ROW,"yes");    root.appendChild(row);    for (int i=0; i < pd.getNodeCount(); i++) {      Object o=pd.getNode(i);      if (o instanceof PrintData) {        PrintData pd_x=(PrintData)o;        Element element=document.createElement(PrintData.XML_TAG);        element.setAttribute(XML_ATTRIBUTE_NAME,pd_x.getName());        element.setAttribute(XML_ATTRIBUTE_COUNT,String.valueOf(pd_x.getRowCount()));        row.appendChild(element);        processXML(pd_x,document,element);      } else       if (o instanceof PrintDataElement) {        PrintDataElement pde=(PrintDataElement)o;        if (!pde.isNull()) {          Element element=document.createElement(PrintDataElement.XML_TAG);          element.setAttribute(PrintDataElement.XML_ATTRIBUTE_NAME,pde.getColumnName());          if (pde.hasKey())           element.setAttribute(PrintDataElement.XML_ATTRIBUTE_KEY,pde.getValueKey());          element.appendChild(document.createTextNode(pde.getValueDisplay(null)));          row.appendChild(element);        }      } else       log.log(Level.SEVERE,"Element not PrintData(Element) " + o.getClass().getName());    }  }}  }
class C{  public TermsByQueryRequest termsEncoding(TermsEncoding termsEncoding){  this.termsEncoding=termsEncoding;  return this;}  }
class C{  public void addNode(final INaviViewNode node){  Preconditions.checkNotNull(node,"Error: node argument can not be null");  Preconditions.checkArgument(!m_nodeCache.contains(node),"Error: node can not be added more then once");  m_nodeCache.add(node);  final int index=m_nodeCache.indexOf(node);  fireTableRowsInserted(index,index);}  }
class C{  private boolean isProjectPageEmpty(Eml eml){  if (eml.getProject() != null) {    Project project=eml.getProject();    List<Agent> personnelList=project.getPersonnel();    StudyAreaDescription area=project.getStudyAreaDescription();    String title=project.getTitle();    String funding=project.getFunding();    String design=project.getDesignDescription();    String desc=area.getDescriptorValue();    return (Strings.isNullOrEmpty(title) && Strings.isNullOrEmpty(funding) && Strings.isNullOrEmpty(design)&& Strings.isNullOrEmpty(desc)&& isAgentsListEmpty(personnelList));  }  return false;}  }
class C{  public AddDelegateTransformer(Class delegateIf[],Class delegateImpl){  try {    delegateImpl.getConstructor(new Class[]{Object.class});    this.delegateIf=delegateIf;    this.delegateImpl=delegateImpl;    delegateType=Type.getType(delegateImpl);  } catch (  NoSuchMethodException e) {    throw new CodeGenerationException(e);  }}  }
class C{  private void validateClusterSetup(Collection<String> collectionNames) throws InvalidClusterSetupAction {  for (  String collectionName : collectionNames) {    int numSourceShards=sourceZKClient.getCollectionShards(collectionName);    String destCollectionName=collectionMapper.dest(collectionName);    int numDestShards=destinationZKClient.getCollectionShards(destCollectionName);    if (numSourceShards != numDestShards) {      logger.info("Number of shards in source and destination do not match for collection:" + collectionName + " dest:"+ destCollectionName+ " sourceShards: "+ numSourceShards+ " destShards:"+ numDestShards);      throw new InvalidClusterSetupAction("Number of shards in source and destination do not match for collection:" + collectionName + " dest:"+ destCollectionName+ " sourceShards= "+ numSourceShards+ " destShards="+ numDestShards);    }  }}  }
class C{  protected void addPreferencesFromResource(@XmlRes int prefsResId,@NonNull XmlPreferenceParser parser){  final WearPreferenceScreen prefsRoot=parser.parse(this,prefsResId);  addPreferencesFromPreferenceScreen(prefsRoot);}  }
class C{  public void createSequences() throws EclipseLinkException {  createOrReplaceSequences(true);}  }
class C{  private void validateJobDefinition(String namespace,String jobName,String activitiJobXml,List<Parameter> parameters,S3PropertiesLocation s3PropertiesLocation){  Assert.isTrue(!activitiJobXml.contains("<![CDATA["),"Activiti XML can not contain a CDATA section.");  BpmnModel bpmnModel;  try {    bpmnModel=activitiHelper.constructBpmnModelFromXmlAndValidate(activitiJobXml);  } catch (  Exception ex) {    throw new IllegalArgumentException("Error processing Activiti XML: " + ex.getMessage(),ex);  }  String idInsideActivitiXml=bpmnModel.getProcesses().get(0).getId();  Assert.hasText(idInsideActivitiXml,"ID inside Activiti job XML must be specified.");  Assert.isTrue(idInsideActivitiXml.equalsIgnoreCase(jobDefinitionHelper.buildActivitiIdString(namespace,jobName)),"Namespace \"" + namespace + "\" and Job Name \""+ jobName+ "\" does not match the ID specified within Activiti XML \""+ idInsideActivitiXml+ "\".");  List<ValidationError> activitiModelErrors=activitiRepositoryService.validateProcess(bpmnModel);  StringBuilder validationErrors=new StringBuilder();  for (  ValidationError validationError : activitiModelErrors) {    validationErrors.append('\n').append(validationError.getDefaultDescription());  }  Assert.isTrue(activitiModelErrors.isEmpty(),"Activiti XML is not valid, Errors: " + validationErrors);  Map<String,String> parameterNameMap=new HashMap<>();  if (!CollectionUtils.isEmpty(parameters)) {    for (    Parameter parameter : parameters) {      Assert.hasText(parameter.getName(),"A parameter name must be specified.");      parameter.setName(parameter.getName().trim());      String validationMapKey=parameter.getName().toLowerCase();      Assert.isTrue(!parameterNameMap.containsKey(validationMapKey),"Duplicate parameter name found: " + parameter.getName());      parameterNameMap.put(validationMapKey,validationMapKey);    }  }  if (s3PropertiesLocation != null) {    s3PropertiesLocationHelper.validate(s3PropertiesLocation);  }}  }
class C{  private void printSQL(){  System.out.println();  System.out.println("-- please replace all PA_Measure/PA_MeasureCalc related entries with the following lines");  System.out.println("and place them at the end of the alter tables section");  System.out.println(getHardcodedStuff());  System.out.println();  System.out.println("-- end of the PA_Measure/PA_MeasureCalc replacement lines");  System.out.println();  System.out.println("-- USE THE FOLLOWING LINES FOR YOUR MIGRATION SCRIPT:");  System.out.println("-- INSERT TABLES");  for (int i=0; i < m_newTables.size(); i++) {    System.out.println(m_newTables.get(i).getCreateStatement());  }  System.out.println();  System.out.println("-- ALTER TABLES");  for (int i=0; i < m_changedTables.size(); i++) {    if (m_changedTables.get(i).isAlterAdd()) {      System.out.println(m_changedTables.get(i).getAlterAddStatement());    }  }  System.out.println("-- PLEASE CHECK THE ADD/MODIFY STATEMENTS:");  System.out.println("-- If you find a 'BEWARE' first check if the table has some data");  System.out.println("-- if not, you can ignort the 'BEWARE', if the table has data");  System.out.println("-- you might have to set a temporary default value for the column");  System.out.println("-- (if not all rows have a value for the modied column)");  System.out.println("-- Sample: 		ALTER TABLE TEST ADD ( columnname NOT NULL);");  System.out.println("-- first set default value (for existing data), than remove it (for new data)");  System.out.println("-- change to:	ALTER TABLE TEST ADD ( columnname DEFAULT 'tempDefault' NOT NULL);");  System.out.println("-- 				ALTER TABLE TEST MODIFY ( columnname NULL);");  System.out.println("-- 				ALTER TABLE TEST MODIFY ( columnname NOT NULL);");  System.out.println();  System.out.println("-- FOR MODIFY STATEMENTS");  System.out.println("-- just set a value for all existing rows");  System.out.println();  System.out.println("-- Sample: 		ALTER TABLE TEST MODIFY ( columnname not null);");  System.out.println("-- insert an update statement before the alter statement");  System.out.println("-- insert before:	UPDATE TEST SET columnname 'myDefault';");  for (int i=0; i < m_changedTables.size(); i++) {    if (m_changedTables.get(i).isAlterModify()) {      System.out.println(m_changedTables.get(i).getAlterModifyStatement());    }  }  System.out.println("-- PLEASE CHECK THE FOLLOWING COLUMNS - DON'T DROP CUSTOMIZATIONS");  for (int i=0; i < m_changedTables.size(); i++) {    if (m_changedTables.get(i).isAlterDrop()) {      System.out.println(m_changedTables.get(i).getAlterDropStatement());    }  }  System.out.println();  System.out.println("-- DROP TABLES - but check them first - don't drop customizations...");  for (int i=0; i < m_tablesToDrop.size(); i++) {    System.out.println(m_tablesToDrop.get(i).getDropStatement());  }  System.out.println();  System.out.println();  System.out.println("-- PUT THE FOLLOWING LINES INTO A NEW FILE");  System.out.println();  System.out.println();  System.out.println("-- DROP CONSTRAINTS");  for (int i=0; i < m_constraintsToDrop.size(); i++) {    System.out.println(m_constraintsToDrop.get(i).getDropString());  }  System.out.println();  System.out.println("-- ADD/RECREATE CONSTRAINTS");  for (int i=m_newConstraints.size() - 1; i >= 0; i--) {    System.out.println(m_newConstraints.get(i).getAlterTableString());  }  System.out.println();  System.out.println();  System.out.println("-- PUT THE FOLLOWING LINES INTO A NEW FILE");  System.out.println();  System.out.println();  System.out.println("-- NEW AD_* ENTRIES AND ROWS OF ADDED TABLES");  System.out.println();  System.out.println("SET DEFINE OFF;");  System.out.println();  Collections.sort(m_newTableEntry,new AD_Comparator());  for (int i=0; i < m_newTableEntry.size(); i++) {    System.out.println(m_newTableEntry.get(i).replaceAll("\n"," "));  }  System.out.println();  System.out.println("-- CHANGED AD_* ENTRIES");  Collections.sort(m_alterADEntry);  for (int i=0; i < m_alterADEntry.size(); i++) {    System.out.println(m_alterADEntry.get(i).replaceAll("\n"," "));  }  System.out.println();  System.out.println();  System.out.println("-- PUT THE FOLLOWING LINES INTO A NEW FILE");  System.out.println();  System.out.println();  System.out.println("-- NEW VIEWS");  for (int i=0; i < m_newViews.size(); i++) {    System.out.println(m_newViews.get(i).getCreateStatement());  }  System.out.println();  System.out.println("-- CHANGED VIEWS - but check them first - don't overwrite your customizations...");  for (int i=0; i < m_changedViews.size(); i++) {    System.out.println(m_changedViews.get(i).getCreateStatement());  }  System.out.println();  System.out.println("-- NEW OR CHANGED FUNCTIONS/PROCEDURES");  for (int i=0; i < m_newFunctionStatements.size(); i++) {    System.out.println(m_newFunctionStatements.get(i));  }  System.out.println();  System.out.println("-- DROP FUNCTIONS/PROCEDURES");  for (int i=0; i < m_dropFunctionStatements.size(); i++) {    System.out.println(m_dropFunctionStatements.get(i));  }  System.out.println();  System.out.println("-- DROP TRIGGERS - BUT DON'T DELETE CUSTOMIZATIONS");  for (int i=0; i < m_dropTriggerStatements.size(); i++) {    System.out.println(m_dropTriggerStatements.get(i));  }  System.out.println();  System.out.println("-- DROP INDEXES - BUT DON'T DELETE CUSTOMIZATIONS");  for (int i=0; i < m_dropIndexStatements.size(); i++) {    System.out.println(m_dropIndexStatements.get(i));  }  System.out.println();  System.out.println("-- NEW OR CHANGED INDEXES");  for (int i=0; i < m_newIndexStatements.size(); i++) {    System.out.println(m_newIndexStatements.get(i));  }  System.out.println();  System.out.println("-- PLEASE CHECK THE SEQUENCES BY HAND - USE:");  System.out.println("-- select * from user_sequences;");  System.out.println();  System.out.println(getUpdateVersionStatement());  System.out.println("COMMIT;");}  }
class C{  public void send(Object o){  bus.onNext(o);}  }
class C{  public void invokeHookSpoutFail(Object messageId,long failLatencyNs){  if (taskHooks.size() != 0) {    SpoutFailInfo failInfo=new SpoutFailInfo(messageId,getThisTaskId(),failLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);    for (    ITaskHook taskHook : taskHooks) {      taskHook.spoutFail(failInfo);    }  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.TEMPLATE_SEGMENT___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.448 -0500",hash_original_method="B376012DF0DA3032DA90C2CCE23CE9AB",hash_generated_method="72AC2FEF484178E0E8B1CD63D07623DB") private void initTableLayout(){  if (mCollapsedColumns == null) {    mCollapsedColumns=new SparseBooleanArray();  }  if (mStretchableColumns == null) {    mStretchableColumns=new SparseBooleanArray();  }  if (mShrinkableColumns == null) {    mShrinkableColumns=new SparseBooleanArray();  }  mPassThroughListener=new PassThroughHierarchyChangeListener();  super.setOnHierarchyChangeListener(mPassThroughListener);  mInitialized=true;}  }
class C{  private static void stuffDelayedControlTransfers(LIR l){  for (  AbstractBlockBase<?> b : l.codeEmittingOrder()) {    if (b != null) {      stuffDelayedControlTransfers(l,b);    }  }}  }
class C{  public DERSequence(){}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  CSSConditionalSelector s=(CSSConditionalSelector)obj;  return (s.simpleSelector.equals(simpleSelector) && s.condition.equals(condition));}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public String invertSelectionTipText(){  return "Determines whether to apply the operation to the specified." + " attributes, or all attributes but the specified ones." + " If set to true, all attributes but the speficied ones will be affected.";}  }
class C{  public TabbedInspector(String name){  buildTabbedInspector(name,true);}  }
class C{  public void test_addAllILjava_util_Collection_2(){  LinkedList obj=new LinkedList();  try {    obj.addAll(-1,(Collection)null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public static boolean equals(byte[][] left,byte[][] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=ByteUtils.equals(left[i],right[i]);  }  return result;}  }
class C{  public SearchEngine(IndexManager indexManager,JavaProject javaProject){  this.indexManager=indexManager;  this.basicEngine=new BasicSearchEngine(indexManager,javaProject);}  }
class C{  @Override public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator authenticate() -- returning false",module);  return true;}  }
class C{  private static TagLib[] loadFromSystem(Identification id) throws TagLibException {  if (systemTLDs[CFMLEngine.DIALECT_CFML] == null) {    TagLib cfml=new TagLibFactory(DEFAULT_SAX_PARSER,null,TLD_BASE,id).getLib();    TagLib lucee=cfml.duplicate(false);    systemTLDs[CFMLEngine.DIALECT_CFML]=new TagLibFactory(DEFAULT_SAX_PARSER,cfml,TLD_CFML,id).getLib();    systemTLDs[CFMLEngine.DIALECT_LUCEE]=new TagLibFactory(DEFAULT_SAX_PARSER,lucee,TLD_LUCEE,id).getLib();  }  return systemTLDs;}  }
class C{  public List<Upload> uploads(){  if (uploads == null) {    return new ArrayList<>();  }  return uploads;}  }
class C{  synchronized void unparcel(){  if (mParcelledData == null) {    return;  }  int N=mParcelledData.readInt();  if (N < 0) {    return;  }  if (mMap == null) {    mMap=new HashMap<String,Object>(N);  }  mParcelledData.readMapInternal(mMap,N,mClassLoader);  mParcelledData.recycle();  mParcelledData=null;}  }
class C{  public Builder addPart(Headers headers,RequestBody body){  return addPart(Part.create(headers,body));}  }
class C{  public static int cs_leaf(int i,int j,int[] first,int first_offset,int[] maxfirst,int maxfirst_offset,int[] prevleaf,int prevleaf_offset,int[] ancestor,int ancestor_offset,int[] jleaf){  int q, s, sparent, jprev;  if (first == null || maxfirst == null || prevleaf == null || ancestor == null || jleaf == null)   return (-1);  jleaf[0]=0;  if (i <= j || first[first_offset + j] <= maxfirst[maxfirst_offset + i])   return (-1);  maxfirst[maxfirst_offset + i]=first[first_offset + j];  jprev=prevleaf[prevleaf_offset + i];  prevleaf[prevleaf_offset + i]=j;  jleaf[0]=(jprev == -1) ? 1 : 2;  if (jleaf[0] == 1)   return (i);  for (q=jprev; q != ancestor[ancestor_offset + q]; q=ancestor[ancestor_offset + q])   ;  for (s=jprev; s != q; s=sparent) {    sparent=ancestor[ancestor_offset + s];    ancestor[ancestor_offset + s]=q;  }  return (q);}  }
class C{  public boolean ungroupElements(){  try {    int numSelectedElements=howManyElementsAreSelected();    if (numSelectedElements > 0) {      List<CartographicElementGroup> selectedCEGs=new ArrayList<>();      List<CartographicElement> otherElements=new ArrayList<>();      for (      CartographicElement ce : listOfCartographicElements) {        if (ce.isSelected()) {          if (ce instanceof CartographicElementGroup) {            selectedCEGs.add((CartographicElementGroup)ce);          } else {            otherElements.add(ce);          }        } else {          otherElements.add(ce);        }      }      removeAllCartographicElements();      for (      CartographicElement ce : otherElements) {        addNewCartographicElement(ce);      }      for (      CartographicElementGroup ceg : selectedCEGs) {        List<CartographicElement> myCEs=ceg.getElementList();        for (        CartographicElement ce2 : myCEs) {          addNewCartographicElement(ce2);        }      }    }    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  public boolean hasSubstitutedReturnType(){  if (this.inferredReturnType)   return this.originalMethod.hasSubstitutedReturnType();  return super.hasSubstitutedReturnType();}  }
class C{  public static double blackFormulaImpliedStdDevApproximation(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice){  return blackFormulaImpliedStdDevApproximation(payoff,strike,forward,blackPrice,1.0,0.0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  @SuppressLint("NewApi") public synchronized static Codec[] findDecodersForMimeType(String mimeType){  if (sDecoders != null)   return sDecoders;  ArrayList<Codec> decoders=new ArrayList<Codec>();  for (int j=MediaCodecList.getCodecCount() - 1; j >= 0; j--) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(j);    if (codecInfo.isEncoder())     continue;    String[] types=codecInfo.getSupportedTypes();    for (int i=0; i < types.length; i++) {      if (types[i].equalsIgnoreCase(mimeType)) {        try {          MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);          Set<Integer> formats=new HashSet<Integer>();          for (int k=0; k < capabilities.colorFormats.length; k++) {            int format=capabilities.colorFormats[k];            for (int l=0; l < SUPPORTED_COLOR_FORMATS.length; l++) {              if (format == SUPPORTED_COLOR_FORMATS[l]) {                formats.add(format);              }            }          }          Codec codec=new Codec(codecInfo.getName(),(Integer[])formats.toArray(new Integer[formats.size()]));          decoders.add(codec);        } catch (        Exception e) {          Log.wtf(TAG,e);        }      }    }  }  sDecoders=(Codec[])decoders.toArray(new Codec[decoders.size()]);  for (int i=0; i < sDecoders.length; i++) {    if (sDecoders[i].name.equalsIgnoreCase("omx.google.h264.decoder")) {      Codec codec=sDecoders[0];      sDecoders[0]=sDecoders[i];      sDecoders[i]=codec;    }  }  return sDecoders;}  }
class C{  public String paymentTerm(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_PaymentTerm_ID=(Integer)value;  int C_Invoice_ID=Env.getContextAsInt(ctx,WindowNo,"C_Invoice_ID");  if (C_PaymentTerm_ID == null || C_PaymentTerm_ID.intValue() == 0 || C_Invoice_ID == 0)   return "";  MPaymentTerm pt=new MPaymentTerm(ctx,C_PaymentTerm_ID.intValue(),null);  if (pt.get_ID() == 0)   return "PaymentTerm not found";  boolean valid=pt.apply(C_Invoice_ID);  mTab.setValue("IsPayScheduleValid",valid ? "Y" : "N");  return "";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message){}  }
class C{  public TableViewer build(){  return viewer;}  }
class C{  private static DataStream<String> streamSource(BenchmarkConfig config,StreamExecutionEnvironment env){  RichParallelSourceFunction<String> source;  String sourceName;  if (config.useLocalEventGenerator) {    HighKeyCardinalityGeneratorSource eventGenerator=new HighKeyCardinalityGeneratorSource(config);    source=eventGenerator;    sourceName="EventGenerator";  } else {    source=kafkaSource(config);    sourceName="Kafka";  }  return env.addSource(source,sourceName);}  }
class C{  public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  public static byte[] messageRowKey(MailboxMessage message){  return messageRowKey((HBaseId)message.getMailboxId(),message.getUid());}  }
class C{  public SocketPipe(final Socket socket1,final Socket socket2) throws IOException {  this.socket1=socket1;  this.socket2=socket2;  pipe1=new StreamPipe(socket1.getInputStream(),socket2.getOutputStream(),OUTPUT_PIPE_NAME);  pipe2=new StreamPipe(socket2.getInputStream(),socket1.getOutputStream(),INPUT_PIPE_NAME);  pipe1.addPipeListener(listener);  pipe2.addPipeListener(listener);}  }
class C{  private boolean checkStringLength(String string,String orientation,String fontName,int fontSize){  Font font=new Font(fontName,Font.PLAIN,fontSize);  JLabel label=new JLabel();  FontMetrics metrics=label.getFontMetrics(font);  int stringWidth=metrics.stringWidth(string);  return stringWidth <= getPageSize(orientation).width;}  }
class C{  @Inline @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!Immix.immixSpace.inImmixDefragCollection());  return true;}  }
class C{  public boolean visitTopLevelInstruction(ElemTemplateElement elem){  int type=elem.getXSLToken();switch (type) {case Constants.ELEMNAME_TEMPLATE:    return visitInstruction(elem);default :  return true;}}  }
class C{  public T caseInvocableEndpoint(InvocableEndpoint object){  return null;}  }
class C{  public void initialize(){  if (isSVG12AccessKey) {    NodeEventTarget eventTarget=(NodeEventTarget)owner.getRootEventTarget();    eventTarget.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keydown",this,false,null);  } else {    EventTarget eventTarget=owner.getRootEventTarget();    eventTarget.addEventListener("keypress",this,false);  }}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void writeRawByte(final byte value) throws IOException {  if (position == limit) {    refreshBuffer();  }  buffer[position++]=value;}  }
class C{  @Override public int read(char[] buf,int off,int len) throws IOException {  if (len == 0) {    return 0;  }  if (lookaheadChar == UNDEFINED) {    if (ready()) {      lookaheadChar=super.read();    } else {      return -1;    }  }  if (lookaheadChar == -1) {    return -1;  }  int cOff=off;  while (len > 0 && ready()) {    if (lookaheadChar == -1) {      return cOff - off;    } else {      buf[cOff++]=(char)lookaheadChar;      if (lookaheadChar == '\n') {        lineCounter++;      }      lastChar=lookaheadChar;      lookaheadChar=super.read();      len--;    }  }  return cOff - off;}  }
class C{  @Override public java.util.List<Figure> sort(Collection<? extends Figure> c){  ensureSorted();  ArrayList<Figure> sorted=new ArrayList<Figure>(c.size());  for (  Figure f : children) {    if (c.contains(f)) {      sorted.add(f);    }  }  return sorted;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public static Level toLevel(final int intLevel){  for (  Level level : Level.values()) {    if (level.intLevel() == intLevel) {      return level;    }  }  throw new IllegalArgumentException("Unknown int level [" + intLevel + "].");}  }
class C{  public static void enableKeyboardFocusManagerLogging(){  enableFinest("java.awt.focus.KeyboardFocusManager");  enableFinest("java.awt.focus.DefaultKeyboardFocusManager");}  }
class C{  @Override public void checkAccessPermissions(ContainerRequest request,ResourceServerAccessToken token) throws ExternalException {  TransactionAuthorizationObject transactionAuthorizationObject=this.resolver.evaluate(request);  Set<String> groups=this.fetcher.fetchSecurityGroups(transactionAuthorizationObject);  if (groups.contains(SecurityGroupFetcher.EVERYONE)) {    return;  }  List<String> tokenGroups=token.getGroups().stream().map(null).collect(Collectors.toList());  Set<String> intersectionGroup=new HashSet<>(groups);  intersectionGroup.add(this.defaultAdminGroup);  intersectionGroup.retainAll(tokenGroups);  if (intersectionGroup.isEmpty()) {    logger.info("Deny request: Token id {}, request groups {}",token.getJWTID(),groups);    throw new ExternalException(ErrorCode.ACCESS_FORBIDDEN);  }}  }
class C{  protected void fireImplementationEventListeners(NodeEventTarget node,AbstractEvent e,boolean useCapture){  String type=e.getType();  XBLEventSupport support=(XBLEventSupport)node.getEventSupport();  if (support == null) {    return;  }  EventListenerList list=support.getImplementationEventListeners(type,useCapture);  if (list == null) {    return;  }  EventListenerList.Entry[] listeners=list.getEventListeners();  fireEventListeners(node,e,listeners,null,null);}  }
class C{  private JimpleRelationships(){  logger.info("Calculating Jimple relationships...");  exprToStmt=new HashMap<Expr,Stmt>();  stmtToMethod=new HashMap<Stmt,SootMethod>();  valueBoxToStmt=new HashMap<ValueBox,Stmt>();  for (  SootClass clz : Scene.v().getClasses()) {    if (clz.isPhantom() || clz.isInterface())     continue;    for (    SootMethod method : clz.getMethods()) {      if (!method.isConcrete() || method.isAbstract() || method.isPhantom()|| method.isNative())       continue;      try {        StmtBody stmtBody=(StmtBody)method.retrieveActiveBody();        Chain units=stmtBody.getUnits();        Iterator stmtIt=units.iterator();        while (stmtIt.hasNext()) {          Stmt stmt=(Stmt)stmtIt.next();          stmtToMethod.put(stmt,method);          for (          Object box : stmt.getUseAndDefBoxes()) {            if (box instanceof ValueBox)             valueBoxToStmt.put((ValueBox)box,stmt);            if (((ValueBox)box).getValue() instanceof Expr)             exprToStmt.put((Expr)((ValueBox)box).getValue(),stmt);          }        }      } catch (      Exception e) {        logger.debug("Error in JimpleRelationships. Ignoring: {} {}",method,e);      }    }  }}  }
class C{  private IStatus runSafely(IProgressMonitor monitor) throws Exception {  monitor.beginTask(null,100);  monitor.subTask(NLS.bind(Messages.ConnectingSource,getSourceURL()));  URL url=new URL(sourceURL);  URLConnection connection=url.openConnection();  setURLConnection(connection);  if (monitor.isCanceled())   return cancelStatus();  setupConnection(connection);  if (monitor.isCanceled())   return cancelStatus();  connection.connect();  if (monitor.isCanceled())   return cancelStatus();  IStatus consumed=validateConnection(connection);  if (consumed != null)   return consumed;  if (monitor.isCanceled())   return cancelStatus();  int length=connection.getContentLength();  if (monitor.isCanceled())   return cancelStatus();  InputStream sourceStream=connection.getInputStream();  try {    if (monitor.isCanceled())     return cancelStatus();    monitor.subTask(NLS.bind(Messages.InitializingTarget,getTargetPath()));    OutputStream targetStream=target.openOutputStream();    if (monitor.isCanceled())     return cancelStatus();    try {      sourceStream=new MonitoredInputStream(sourceStream,monitor);      targetStream=new MonitoredOutputStream(targetStream,monitor);      monitor.subTask(Messages.TransferingData);      transfer(sourceStream,targetStream,new SubProgressMonitor(monitor,100),length);      setURLConnection(null);      monitor.done();      return new Status(IStatus.OK,pluginId,NLS.bind(Messages.DownloadFinished,getSourceURL(),getTargetPath()));    }  finally {      try {        targetStream.close();      } catch (      IOException ignore) {      }    }  }  finally {    try {      sourceStream.close();    } catch (    IOException ignore) {    }  }}  }
class C{  @Override public void run(){  getMapPane().setCursorTool(new InfoTool());}  }
class C{  public static StoreRequest createStoreRequest(ParameterList params) throws MessageException {  StoreRequest req=new StoreRequest(params);  if (!req.isValid())   throw new MessageException("Invalid parameters for a store request");  if (DEBUG)   _log.debug("Created store request from parameter list:\n" + params);  return req;}  }
class C{  public void run(){  while (true) {    try {      handleOneIncomingReply();    } catch (    java.io.IOException e) {      log.warn("run: Exception: " + e.toString());    }  }}  }
class C{  private int reProcessTradingdays(Tradingdays tradingdays,ConcurrentHashMap<Integer,Tradingday> runningContractRequests,int totalSumbitted) throws Exception {  while (!this.isCancelled() && !runningContractRequests.isEmpty()) {    if (!this.isCancelled()) {synchronized (this.brokerModel.getHistoricalData()) {        while (this.brokerModel.getHistoricalData().size() > 0) {          this.brokerModel.getHistoricalData().wait();          int percent=(int)(((double)(totalSumbitted - this.brokerModel.getHistoricalData().size()) / getGrandTotal()) * 100d);          setProgress(percent);        }      }    }    for (    Tradingday item : tradingdays.getTradingdays()) {      for (      Integer idTradeingday : runningContractRequests.keySet()) {        Tradingday reProcessTradingday=runningContractRequests.get(idTradeingday);        if (item.equals(reProcessTradingday)) {          totalSumbitted=processTradingday(getTradingdayToProcess(reProcessTradingday,runningContractRequests),totalSumbitted);          break;        }      }    }  }  return totalSumbitted;}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  public void testMultipleTypeIdsDeserialization() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.registerSubtypes(ValueBean.class);  String json=mapper.writeValueAsString(new ExternalBean3(3));  ExternalBean3 result=mapper.readValue(json,ExternalBean3.class);  assertNotNull(result);  assertNotNull(result.value1);  assertNotNull(result.value2);  assertNotNull(result.value3);  assertEquals(3,((ValueBean)result.value1).value);  assertEquals(4,((ValueBean)result.value2).value);  assertEquals(5,((ValueBean)result.value3).value);  assertEquals(3,result.foo);}  }
class C{  @NamespacePermission(fields="#request?.namespace",permissions=NamespacePermissionEnum.WRITE) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public EmrMasterSecurityGroup addSecurityGroupsToClusterMaster(EmrMasterSecurityGroupAddRequest request) throws Exception {  return addSecurityGroupsToClusterMasterImpl(request);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasBookmark(final INaviModule module,final IAddress address){  Preconditions.checkNotNull(address,"IE00330: Address argument can not be null");  for (  final CCodeBookmark bookmark : m_bookmarks) {    if ((bookmark.getModule() == module) && bookmark.getAddress().equals(address)) {      return true;    }  }  return false;}  }
class C{  public static CloseableVectorStore openVectorStore(String storeName,FlagConfig flagConfig) throws IOException {  CloseableVectorStore vectorStore=null;  storeName=VectorStoreUtils.getStoreFileName(storeName,flagConfig);switch (flagConfig.indexfileformat()) {case LUCENE:    vectorStore=new VectorStoreReaderLucene(storeName,flagConfig);  break;case TEXT:vectorStore=new VectorStoreReaderText(storeName,flagConfig);break;default :throw new IllegalStateException("Unknown -indexfileformat: " + flagConfig.indexfileformat());}return vectorStore;}  }
class C{  @Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public HostnameVerifier hostnameVerifier(){  return hostnameVerifier;}  }
class C{  protected void runTests() throws Exception {  startUp("GetUninitializedStringValueTarg");  BreakpointEvent bpe=resumeTo("java.lang.String","<init>","(Ljava/lang/String;)V");  StackFrame frame=bpe.thread().frame(0);  StringReference sr=(StringReference)frame.thisObject();  if (!sr.value().equals("")) {    throw new Exception("Unexpected value for the uninitialized String");  }  listenUntilVMDisconnect();}  }
class C{  private void generateAndTestWithCoverage(TestEnvironment environment,RandoopOptions options,ExpectedTests expectedRegression,ExpectedTests expectedError){  generateAndTestWithCoverage(environment,options,expectedRegression,expectedError,new CoverageChecker(options));}  }
class C{  public KeepAliveFilter(KeepAliveMessageFactory messageFactory,IdleStatus interestedIdleStatus,KeepAliveRequestTimeoutHandler policy){  this(messageFactory,interestedIdleStatus,policy,60,30);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("two",null));}  }
class C{  public void enableLookAt(){  mLookAtEnabled=true;  resetToLookAt();}  }
class C{  public static TsFciRunner serializableInstance(){  return new TsFciRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public int count(){  return mCount;}  }
class C{  private static void fill(final Image image,final int size){  Graphics2D graphics=(Graphics2D)image.getGraphics();  graphics.setComposite(AlphaComposite.Src);  graphics.setColor(Color.GREEN);  graphics.fillRect(0,0,image.getWidth(null),image.getHeight(null));  int row=image.getHeight(null) / size;  for (int i=0; i < size; ++i) {    graphics.setColor(new Color(23,127,189,i));    graphics.fillRect(0,i * row,image.getWidth(null),row);  }  graphics.dispose();}  }
class C{  public MultiModel5(){  m_cList.add(new SimpleScalar("Dummy to make list non-empty"));}  }
class C{  public boolean hasParamsMismatch(){  return !this.partialMatches.stream().filter(null).findAny().isPresent();}  }
class C{  private void finishExecution(){  sendNow(getId(),CloudSimTags.END_OF_SIMULATION);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF:    setIdentifierRef((IdentifierRef)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isAtLeast(JavaVersion javaVersion){  return compareTo(javaVersion) >= 0;}  }
class C{  protected void engineInit(SecureRandom random){  this.random=random;}  }
class C{  private void remove(int tipoFicha,int tipoCampo,String id,String idCampo,String orden){  int tipoElemento=ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO;  if (tipoFicha == TipoFicha.FICHA_UDOCFS)   tipoElemento=ValorCampoGenericoVOBase.TIPO_ELEMENTO_UDOC_EN_FS; else   if (tipoFicha == TipoFicha.FICHA_UDOCRE)   tipoElemento=ValorCampoGenericoVOBase.TIPO_ELEMENTO_UDOC_EN_RE;  Locale locale=getServiceClient().getLocale();  AuditoriaDescripcion.auditaEliminacionValorCampo(locale,this,tipoFicha,id,idCampo,orden);switch (tipoCampo) {case ValorCampoGenericoVO.TIPO_FECHA:    if (tipoFicha == TipoFicha.FICHA_ELEMENTO_CF)     campoFechaDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else     if (tipoFicha == TipoFicha.FICHA_UDOCRE || tipoFicha == TipoFicha.FICHA_UDOCFS)     campoFechaUDocREDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else     campoFechaDescrDBEntity.deleteValue(id,idCampo,orden);  break;case ValorCampoGenericoVO.TIPO_TEXTO_CORTO:if (tipoFicha == TipoFicha.FICHA_ELEMENTO_CF) campoTextoCortoDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else if (tipoFicha == TipoFicha.FICHA_UDOCRE || tipoFicha == TipoFicha.FICHA_UDOCFS) campoTextoCortoUDocREDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else campoTextoCortoDescrDBEntity.deleteValue(id,idCampo,orden);break;case ValorCampoGenericoVO.TIPO_TEXTO_LARGO:if (tipoFicha == TipoFicha.FICHA_ELEMENTO_CF) campoTextoLargoDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else if (tipoFicha == TipoFicha.FICHA_UDOCRE || tipoFicha == TipoFicha.FICHA_UDOCFS) campoTextoLargoUDocREDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else campoTextoLargoDescrDBEntity.deleteValue(id,idCampo,orden);break;case ValorCampoGenericoVO.TIPO_NUMERICO:if (tipoFicha == TipoFicha.FICHA_ELEMENTO_CF) campoNumeroDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else if (tipoFicha == TipoFicha.FICHA_UDOCRE || tipoFicha == TipoFicha.FICHA_UDOCFS) campoNumeroUDocREDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else campoNumeroDescrDBEntity.deleteValue(id,idCampo,orden);break;case ValorCampoGenericoVO.TIPO_REFERENCIA:if (tipoFicha == TipoFicha.FICHA_ELEMENTO_CF) campoReferenciaDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else if (tipoFicha == TipoFicha.FICHA_UDOCRE || tipoFicha == TipoFicha.FICHA_UDOCFS) campoReferenciaUDocREDBEntity.deleteValue(id,idCampo,orden,tipoElemento); else campoReferenciaDescrDBEntity.deleteValue(id,idCampo,orden);break;}}  }
class C{  public static double exp(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Rate lambda must be positive");  return -Math.log(1 - uniform()) / lambda;}  }
class C{  public boolean isCheckUpper(){  return upperCheck;}  }
class C{  public dim3(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public void removeHyperlinkListener(HyperlinkListener l){  listenerList.remove(HyperlinkListener.class,l);}  }
class C{  @Override public Dimension preferredLayoutSize(Container target){  return layoutSize(target,true);}  }
class C{  @Inline @Entrypoint public static void shortFieldWrite(Object ref,short value,Offset offset,int locationMetadata){  if (NEEDS_SHORT_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().shortWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public synchronized void checkpoint(){  trace.debug("checkpoint");  if (log == null || readMode || database.isReadOnly() || backupLevel > 0) {    return;  }  database.checkPowerOff();  writeIndexRowCounts();  log.checkpoint();  writeBack();  int firstUncommittedSection=getFirstUncommittedSection();  log.removeUntil(firstUncommittedSection);  writeBack();  log.checkpoint();  if (trace.isDebugEnabled()) {    trace.debug("writeFree");  }  byte[] test=new byte[16];  byte[] empty=new byte[pageSize];  for (int i=PAGE_ID_FREE_LIST_ROOT; i < pageCount; i++) {    if (isUsed(i)) {      freed.clear(i);    } else     if (!freed.get(i)) {      if (trace.isDebugEnabled()) {        trace.debug("free " + i);      }      file.seek((long)i << pageSizeShift);      file.readFully(test,0,16);      if (test[0] != 0) {        file.seek((long)i << pageSizeShift);        file.write(empty,0,pageSize);        writeCount++;      }      freed.set(i);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.475 -0500",hash_original_method="46925E95C7BFFD2FC27FB6165D068F93",hash_generated_method="89D01FA737447FDF0216F6FA90FA37F9") public static Byte valueOf(String string,int radix) throws NumberFormatException {  return new Byte(string.getTaintByte());}  }
class C{  public void componentHidden(ComponentEvent e){  Layer layer=getLayer();  if (layer != null) {    if (e.getComponent() == layer) {      if (getState() != false && menuType == LAYERS_ON_OFF) {        setState(false);        if (Debug.debugging("layersmenu")) {          Debug.output("layersmenu.LCBMI: layer " + layer.getName() + " is now hidden.");        }      }    } else     if (e.getComponent() == layer.getPalette() && menuType == PALETTES_ON_OFF) {      setState(false);    }  }}  }
class C{  public Feed(){  super(Entry.class);}  }
class C{  public static void generate(String pkg,Collection<PojoDescriptor> pojos,boolean includeKeys,boolean generateAliases,File out,ConfirmCallable askOverwrite){  File outFolder=out.getParentFile();  if (outFolder == null)   throw new IllegalStateException("Invalid output file: " + out);  if (!outFolder.exists() && !outFolder.mkdirs())   throw new IllegalStateException("Failed to create output folder for XML file: " + outFolder);  try {    if (out.exists()) {      MessageBox.Result choice=askOverwrite.confirm(out.getName());      if (CANCEL == choice)       throw new IllegalStateException("XML generation was canceled!");      if (NO == choice || NO_TO_ALL == choice)       return;    }    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();    Document doc=docBuilder.newDocument();    doc.setXmlStandalone(true);    addComment(doc);    Element beans=addElement(doc,doc,"beans");    beans.setAttribute("xmlns","http://www.springframework.org/schema/beans");    beans.setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");    beans.setAttribute("xmlns:util","http://www.springframework.org/schema/util");    beans.setAttribute("xsi:schemaLocation","http://www.springframework.org/schema/beans " + "http://www.springframework.org/schema/beans/spring-beans.xsd " + "http://www.springframework.org/schema/util "+ "http://www.springframework.org/schema/util/spring-util.xsd");    Element factoryBean=addBean(doc,beans,CacheJdbcPojoStoreFactory.class);    Element typesElem=addProperty(doc,factoryBean,"types",null);    Element typesItemsElem=addElement(doc,typesElem,"list");    for (    PojoDescriptor pojo : pojos)     addJdbcPojoStoreFactory(doc,typesItemsElem,pkg,pojo,includeKeys);    for (    PojoDescriptor pojo : pojos)     addQueryEntity(doc,beans,pkg,pojo,generateAliases);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");    ByteArrayOutputStream baos=new ByteArrayOutputStream(65536);    transformer.transform(new DOMSource(doc),new StreamResult(baos));    Files.write(out.toPath(),baos.toString().replaceAll("><",">\n<").replaceFirst("<!--","\n<!--").replaceFirst("-->","-->\n").replaceAll("\" xmlns","\"\n       xmlns").replaceAll("\" xsi","\"\n       xsi").replaceAll(" http://www.springframework","\n                           http://www.springframework").getBytes());  } catch (  ParserConfigurationException|TransformerException|IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  default Groups groups(){  return Groups.empty();}  }
class C{  public FileSystemNotFoundException(String msg){  super(msg);}  }
class C{  private boolean shouldCheckDbStatus(VirtualDataCenter vdc){  if (vdc.getLocal()) {    return true;  }  if (vdc.getShortId() == null) {    log.error("invalid record in db status check {}",vdc.getId());    return false;  }  ConnectionStatus connStatus=vdc.getConnectionStatus();  GeoReplicationStatus repStatus=vdc.getRepStatus();  log.info("vdc connectionStatus {} repStatus {}",connStatus,repStatus);  if (repStatus.equals(GeoReplicationStatus.REP_ALL)) {    log.info("vdc {}, repStatus {}",vdc.getId(),repStatus);    return true;  }  if (connStatus.equals(ConnectionStatus.CONNECTING_SYNCED)) {    return true;  }  return false;}  }
class C{  public Notification(String type,Object source,long sequenceNumber,String message){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=(new java.util.Date()).getTime();  this.message=message;}  }
class C{  public boolean isGeneratedDraft(){  Object oo=get_Value(COLUMNNAME_IsGeneratedDraft);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static long maxMoves(int min,int max){  long maxmoves=0;  for (int n=min; n <= max; n++) {    long moves=hailstoneLengthImp(n);    if (moves > maxmoves) {      maxmoves=moves;    }  }  return maxmoves;}  }
class C{  @Override public void releasePrepareStatement(ServerPrepareResult serverPrepareResult) throws QueryException {  serverPrepareResult.decrementShareCounter();  if (serverPrepareResult.canBeDeallocate()) {    forceReleasePrepareStatement(serverPrepareResult.getStatementId());  }}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public String createApiChanges(ServiceCatalogDiff serviceCatalogDiff){  StringBuilder builder=new StringBuilder();  String serviceName=serviceCatalogDiff.getNewServiceCatalog().getServiceName();  builder.append(HtmlSerializerHelper.buildDivHeader(serviceName));  builder.append(HtmlSerializerHelper.buildContent("API",serviceName,2));  addNormalRecords(serviceCatalogDiff.getNewServiceCatalog(),"Added APIs");  addComparisonRecords(serviceCatalogDiff,"Changed APIs");  addNormalRecords(serviceCatalogDiff.getOldServiceCatalog(),"Removed APIs");  SortedSet<String> sortedSet=new TreeSet<String>(componentMap.keySet());  for (  String key : sortedSet) {    if (!key.startsWith(serviceName)) {      continue;    }    StringBuilder value=componentMap.get(key);    value.append(HtmlSerializerHelper.buildDivTailer());    builder.append(value);  }  builder.append(HtmlSerializerHelper.buildDivTailer());  return builder.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:59.511 -0500",hash_original_method="B3108244F274B858A2EC662DDA9927CD",hash_generated_method="ECC9EF8F4D049CE8B9750D07CE63020C") private void insertBucket(int index,long start){  if (bucketCount >= bucketStart.length) {    final int newLength=Math.max(bucketStart.length,10) * 3 / 2;    bucketStart=Arrays.copyOf(bucketStart,newLength);    if (activeTime != null)     activeTime=Arrays.copyOf(activeTime,newLength);    if (rxBytes != null)     rxBytes=Arrays.copyOf(rxBytes,newLength);    if (rxPackets != null)     rxPackets=Arrays.copyOf(rxPackets,newLength);    if (txBytes != null)     txBytes=Arrays.copyOf(txBytes,newLength);    if (txPackets != null)     txPackets=Arrays.copyOf(txPackets,newLength);    if (operations != null)     operations=Arrays.copyOf(operations,newLength);  }  if (index < bucketCount) {    final int dstPos=index + 1;    final int length=bucketCount - index;    System.arraycopy(bucketStart,index,bucketStart,dstPos,length);    if (activeTime != null)     System.arraycopy(activeTime,index,activeTime,dstPos,length);    if (rxBytes != null)     System.arraycopy(rxBytes,index,rxBytes,dstPos,length);    if (rxPackets != null)     System.arraycopy(rxPackets,index,rxPackets,dstPos,length);    if (txBytes != null)     System.arraycopy(txBytes,index,txBytes,dstPos,length);    if (txPackets != null)     System.arraycopy(txPackets,index,txPackets,dstPos,length);    if (operations != null)     System.arraycopy(operations,index,operations,dstPos,length);  }  bucketStart[index]=start;  setLong(activeTime,index,0L);  setLong(rxBytes,index,0L);  setLong(rxPackets,index,0L);  setLong(txBytes,index,0L);  setLong(txPackets,index,0L);  setLong(operations,index,0L);  bucketCount++;}  }
class C{  protected void initialize(){  setModal(true);  listeners.put("BrowseButtonAction",new BrowseButtonAction());  listeners.put("OKButtonAction",new OKButtonAction());  listeners.put("CancelButtonAction",new CancelButtonAction());  listeners.put("ClearButtonAction",new ClearButtonAction());  setTitle(resources.getString("Dialog.title"));  buttonFactory=new ButtonFactory(bundle,this);  getContentPane().add(createURISelectionPanel(),BorderLayout.NORTH);  getContentPane().add(createButtonsPanel(),BorderLayout.SOUTH);}  }
class C{  public void createPictScenario12() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-05 00:00:00"));  String supplierAdminId="Pict12Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict12SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),5);  String customerAdminId="Pict12DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict12DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-08-02 00:00:00"),DateTimeHandling.calculateMillis("2013-09-04 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("10.00")),null,null);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails rataServiceTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT12_RATA_MONTH_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT12_RATA_MONTH,example2TechService,supplierMarketplace);  VOServiceDetails serviceRataDetails=serviceSetup.activateMarketableService(rataServiceTemplate);  VORoleDefinition role=VOServiceFactory.getRole(serviceRataDetails,"ADMIN");  serviceRataDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceRataDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_12",serviceRataDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-06 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-07 00:00:00"));  role=VOServiceFactory.getRole(serviceRataDetails,"USER");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-08 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-09 00:00:00"),"BOOLEAN_PARAMETER","true");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-10 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-15 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceRataDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-09-06 00:00:00"),"BOOLEAN_PARAMETER","false");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-07 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  role=VOServiceFactory.getRole(serviceRataDetails,"USER");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-08 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-10 00:00:00"));  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-10 13:00:00"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_12",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_12",customer);}  }
class C{  public AppraiseGitReviewClient(Repository repo){  this.repo=repo;  this.author=new PersonIdent(repo);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public IGangliaMetadataMessage putIfAbsent(final IGangliaMetadataMessage decl){  final IGangliaMetadataMessage resolved=metadataFactory.resolve(decl);  if (resolved == null)   throw new RuntimeException("Resolution error for " + decl);  if (!decl.getMetricName().equals(resolved.getMetricName())) {    throw new RuntimeException("Resolution error: decl=" + decl + ", but resolved metricName="+ resolved.getMetricName());  }  IGangliaMetadataMessage tmp;  if ((tmp=metadata.putIfAbsent(decl.getMetricName(),resolved)) == null) {    if (log.isInfoEnabled())     log.info("declared: " + resolved);    return resolved;  }  return tmp;}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  private static DiscordRecord findBestDiscordWithMagic(double[] series,int windowSize,SAXRecords sax,ArrayList<MagicArrayEntry> allWords,HashSet<Integer> discordRegistry,double nThreshold) throws Exception {  int[] visitArray=new int[series.length];  int bestSoFarPosition=-1;  double bestSoFarDistance=0.0D;  String bestSoFarWord="";  int iterationCounter=0;  int distanceCalls=0;  LOGGER.debug("iterating over {} entries",allWords.size());  for (  MagicArrayEntry currentEntry : allWords) {    String currentWord=currentEntry.getStr();    Set<Integer> occurrences=sax.getByWord(currentWord).getIndexes();    for (    int currentPos : occurrences) {      iterationCounter++;      if (discordRegistry.contains(currentPos)) {        continue;      }      LOGGER.trace("conducting search for {} at {}, iteration {}",currentWord,currentPos,iterationCounter);      int markStart=currentPos - windowSize;      int markEnd=currentPos + windowSize;      HashSet<Integer> alreadyVisited=new HashSet<Integer>(occurrences.size() + (markEnd - markStart));      for (int i=markStart; i < markEnd; i++) {        alreadyVisited.add(i);      }      double[] currentCandidateSeq=tp.znorm(tp.subseriesByCopy(series,currentPos,currentPos + windowSize),nThreshold);      double nearestNeighborDist=Double.MAX_VALUE;      boolean doRandomSearch=true;      for (      Integer nextOccurrence : occurrences) {        if (alreadyVisited.contains(nextOccurrence)) {          continue;        } else {          alreadyVisited.add(nextOccurrence);        }        double dist=distance(currentCandidateSeq,series,nextOccurrence,nextOccurrence + windowSize,nThreshold);        distanceCalls++;        if (dist < nearestNeighborDist) {          nearestNeighborDist=dist;          LOGGER.trace(" ** current NN at {}, distance: {}, pos {}",nextOccurrence,nearestNeighborDist,currentPos);        }        if (dist < bestSoFarDistance) {          LOGGER.trace(" ** abandoning the occurrences loop, distance {} is less than the best so far {}",dist,bestSoFarDistance);          doRandomSearch=false;          break;        }      }      if (doRandomSearch) {        LOGGER.trace("starting random search");        int visitCounter=0;        int cIndex=0;        for (int i=0; i < series.length - windowSize; i++) {          if (!(alreadyVisited.contains(i))) {            visitArray[cIndex]=i;            cIndex++;          }        }        cIndex--;        Random rnd=new Random();        for (int i=cIndex; i > 0; i--) {          int index=rnd.nextInt(i + 1);          int a=visitArray[index];          visitArray[index]=visitArray[i];          visitArray[i]=a;        }        while (cIndex >= 0) {          int randomPos=visitArray[cIndex];          cIndex--;          double dist=distance(currentCandidateSeq,series,randomPos,randomPos + windowSize,nThreshold);          distanceCalls++;          if (dist < nearestNeighborDist) {            LOGGER.trace(" ** current NN at {}, distance: {}",+randomPos,dist);            nearestNeighborDist=dist;          }          if (dist < bestSoFarDistance) {            nearestNeighborDist=dist;            LOGGER.trace(" ** abandoning random visits loop, seen distance {} at iteration {}",nearestNeighborDist,visitCounter);            break;          }          visitCounter=visitCounter + 1;        }      }      if (nearestNeighborDist > bestSoFarDistance && nearestNeighborDist < Double.MAX_VALUE) {        LOGGER.debug("discord updated: pos {}, dist {}",currentPos,bestSoFarDistance);        bestSoFarDistance=nearestNeighborDist;        bestSoFarPosition=currentPos;        bestSoFarWord=currentWord;      }      LOGGER.trace(" . . iterated {} times, best distance:  {} for a string {} at {}",iterationCounter,bestSoFarDistance,bestSoFarWord,bestSoFarPosition);    }  }  LOGGER.trace("Distance calls: {}",distanceCalls);  DiscordRecord res=new DiscordRecord(bestSoFarPosition,bestSoFarDistance,bestSoFarWord);  res.setLength(windowSize);  res.setInfo("distance calls: " + distanceCalls);  return res;}  }
class C{  private RangeQuery<V>[] initRangeQueries(Relation<V> relation,int dimensionality){  @SuppressWarnings("unchecked") RangeQuery<V>[] rangeQueries=(RangeQuery<V>[])new RangeQuery[dimensionality];  for (int d=0; d < dimensionality; d++) {    rangeQueries[d]=relation.getRangeQuery(new PrimitiveDistanceQuery<>(relation,new OnedimensionalDistanceFunction(d)));  }  return rangeQueries;}  }
class C{  public SetFullscreen(){  super();  addParameterToRequest("fullscreen","toggle");}  }
class C{  static boolean isStaticImage(FeedItem image){  return image.image().toLowerCase().matches(".*\\.(jpg|jpeg|png)");}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected static boolean isCloneable(Object obj){  return obj instanceof Cloneable;}  }
class C{  public PointsToSet reachingObjects(Local l){  Type t=l.getType();  if (t instanceof RefType)   return FullObjectSet.v((RefType)t);  return FullObjectSet.v();}  }
class C{  public JFXHamburger(){  StackPane line1=new StackPane();  StackPane line2=new StackPane();  StackPane line3=new StackPane();  initStyle(line1);  initStyle(line2);  initStyle(line3);  this.getChildren().add(line1);  this.getChildren().add(line2);  this.getChildren().add(line3);  this.getStyleClass().add(DEFAULT_STYLE_CLASS);  this.setAlignment(Pos.CENTER);  this.setFillWidth(false);  this.setSpacing(4);}  }
class C{  public String formatVector(List list){  return formatVector(list,", "," and ");}  }
class C{  public ProblemReporter problemReporter(){  ProblemReporter problemReporter=referenceCompilationUnit().problemReporter;  problemReporter.referenceContext=this.referenceContext;  return problemReporter;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.REACTION;}  }
class C{  public EditableOMRect(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  private void validateQueryParameter(RamlQueryParameter queryParameter,String name,RamlParamType expectedType){  assertEquals("Expect Correct Type for element: " + name,expectedType,queryParameter.getType());  assertEquals("Expect Name",name,queryParameter.getDisplayName());}  }
class C{  public _BuildStatus(){  super();}  }
class C{  public void addHttpHeader(String name,String value){  headers.add(name,value);}  }
class C{  void restartConnection(boolean abort){}  }
class C{  public void logError(Object message,Throwable exception){  logInternal(ERROR,message,exception);}  }
class C{  public static void removeFile(File file,Drive drive) throws IOException {  drive.files().trash(file.getId()).execute();}  }
class C{  @SuppressWarnings("static-access") private String logLevelToDescription(Level logLevel){  String result=s_logger.localizeMessage("guiLogLevelOff");  if (logLevel.equals(Level.ALL)) {    result=s_logger.localizeMessage("guiLogLevelAll");  } else   if (logLevel.equals(Level.FINEST)) {    result=s_logger.localizeMessage("guiLogLevelFinest");  } else   if (logLevel.equals(Level.FINER)) {    result=s_logger.localizeMessage("guiLogLevelFiner");  } else   if (logLevel.equals(Level.FINE)) {    result=s_logger.localizeMessage("guiLogLevelFine");  } else   if (logLevel.equals(Level.CONFIG)) {    result=s_logger.localizeMessage("guiLogLevelConfig");  } else   if (logLevel.equals(Level.INFO)) {    result=s_logger.localizeMessage("guiLogLevelInfo");  } else   if (logLevel.equals(Level.WARNING)) {    result=s_logger.localizeMessage("guiLogLevelWarning");  } else   if (logLevel.equals(Level.SEVERE)) {    result=s_logger.localizeMessage("guiLogLevelSevere");  } else   if (logLevel.equals(Level.OFF)) {    result=s_logger.localizeMessage("guiLogLevelOff");  }  if (logLevel.equals(s_parameters.getDefaultLogLevel())) {    result=new StringBuffer(result).append(getDefaultMarker()).toString();  }  return result;}  }
class C{  public static void requestPermissions(CordovaPlugin plugin,int requestCode,String[] permissions){  try {    Method requestPermission=CordovaInterface.class.getDeclaredMethod("requestPermissions",CordovaPlugin.class,int.class,String[].class);    requestPermission.invoke(plugin.cordova,plugin,requestCode,permissions);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to request permissions " + Arrays.toString(permissions));    deliverPermissionResult(plugin,requestCode,permissions);  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when requesting permissions " + Arrays.toString(permissions),illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when requesting permissions " + Arrays.toString(permissions),invocationTargetException);  }}  }
class C{  public ClockPane(int hour,int minute,int second){  this.hour=hour;  this.minute=minute;  this.second=second;  paintClock();}  }
class C{  public void testAddOneFilterInitParam() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addFilterInitParam(webXml,"f1","f1param1","f1param1value");  List<String> initParams=WebXmlUtils.getFilterInitParamNames(webXml,"f1");  assertEquals(1,initParams.size());  assertEquals("f1param1",initParams.get(0));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void readPrefs(SharedPreferences settings,ActionFactory factory){  boolean visible=false;  String actionId=settings.getString("button_action_" + name + "_0","");  mainAction=factory.getAction(actionId);  if (mainAction != null)   visible=true;  menuActions.clear();  for (int i=0; i < maxMenuActions; i++) {    actionId=settings.getString("button_action_" + name + "_"+ (i + 1),"");    UIAction a=factory.getAction(actionId);    if (a != null)     visible=true;    menuActions.add(a);  }  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);}  }
class C{  protected ConfigurationSourceImpl(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:22.664 -0500",hash_original_method="0EB66BA5E965B83E191719250E0A82FF",hash_generated_method="20F0D49C8E56D36DAC2B956883654BF6") @Override public final String toString(){  return name;}  }
class C{  public int normalize(char text[],int len){  for (int i=0; i < len; i++) {    final Character.UnicodeBlock block=Character.UnicodeBlock.of(text[i]);    final ScriptData sd=scripts.get(block);    if (sd != null) {      final int ch=text[i] - sd.base;      if (sd.decompMask.get(ch))       len=compose(ch,block,sd,text,i,len);    }  }  return len;}  }
class C{  public boolean isArray(){  return rawClass.isArray();}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  private void updateExistingRow(final SQLiteDatabase database,final long id,boolean bumpCount){  String stringId=String.valueOf(id);  database.beginTransaction();  final Cursor cursor=database.query(SongPlayCountColumns.NAME,null,WHERE_ID_EQUALS,new String[]{stringId},null,null,null);  if (cursor != null && cursor.moveToFirst()) {    int lastUpdatedIndex=cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);    int lastUpdatedWeek=cursor.getInt(lastUpdatedIndex);    int weekDiff=mNumberOfWeeksSinceEpoch - lastUpdatedWeek;    if (Math.abs(weekDiff) >= NUM_WEEKS) {      deleteEntry(database,stringId);      if (bumpCount) {        createNewPlayedEntry(database,id);      }    } else     if (weekDiff != 0) {      int[] playCounts=new int[NUM_WEEKS];      if (weekDiff > 0) {        for (int i=0; i < NUM_WEEKS - weekDiff; i++) {          playCounts[i + weekDiff]=cursor.getInt(getColumnIndexForWeek(i));        }      } else       if (weekDiff < 0) {        for (int i=0; i < NUM_WEEKS + weekDiff; i++) {          playCounts[i]=cursor.getInt(getColumnIndexForWeek(i - weekDiff));        }      }      if (bumpCount) {        playCounts[0]++;      }      float score=calculateScore(playCounts);      if (score < .01f) {        deleteEntry(database,stringId);      } else {        ContentValues values=new ContentValues(NUM_WEEKS + 2);        values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);        values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);        for (int i=0; i < NUM_WEEKS; i++) {          values.put(getColumnNameForWeek(i),playCounts[i]);        }        database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});      }    } else     if (bumpCount) {      ContentValues values=new ContentValues(2);      int scoreIndex=cursor.getColumnIndex(SongPlayCountColumns.PLAYCOUNTSCORE);      float score=cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);      values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);      values.put(getColumnNameForWeek(0),cursor.getInt(getColumnIndexForWeek(0)) + 1);      database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});    }    cursor.close();  } else   if (bumpCount) {    createNewPlayedEntry(database,id);  }  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  double scale(final int pixels,final int total){  double distance=Math.max(upper - lower,0);  double fraction=((double)pixels) / total;  LOGGER.debug("pixels: " + pixels + " total: "+ total+ " scaled: "+ fraction * distance);  return fraction * distance;}  }
class C{  public static boolean containsWhitespace(final CharSequence seq){  if (isEmpty(seq)) {    return false;  }  final int strLen=seq.length();  for (int i=0; i < strLen; i++) {    if (Character.isWhitespace(seq.charAt(i))) {      return true;    }  }  return false;}  }
class C{  private UsernamePasswordCredentials iptCredentials(Ipt ipt){  return new UsernamePasswordCredentials(ipt.getKey().toString(),ipt.getWsPassword());}  }
class C{  protected void loadElites(EvolutionState state,Population newpop){  for (int x=0; x < state.population.subpops.length; x++) {    if (numElites(state,x) > state.population.subpops[x].individuals.length)     state.output.error("The number of elites for subpopulation " + x + " exceeds the actual size of the subpopulation",new Parameter(EvolutionState.P_BREEDER).push(P_ELITE).push("" + x));    if (numElites(state,x) == state.population.subpops[x].individuals.length)     state.output.warning("The number of elites for subpopulation " + x + " is the actual size of the subpopulation",new Parameter(EvolutionState.P_BREEDER).push(P_ELITE).push("" + x));  }  state.output.exitIfErrors();  for (int sub=0; sub < state.population.subpops.length; sub++) {    if (!shouldBreedSubpop(state,sub,0)) {      continue;    }    if (numElites(state,sub) == 1) {      int best=0;      Individual[] oldinds=state.population.subpops[sub].individuals;      for (int x=1; x < oldinds.length; x++)       if (oldinds[x].fitness.betterThan(oldinds[best].fitness))       best=x;      Individual[] inds=newpop.subpops[sub].individuals;      inds[inds.length - 1]=(Individual)(oldinds[best].clone());    } else     if (numElites(state,sub) > 0) {      int[] orderedPop=new int[state.population.subpops[sub].individuals.length];      for (int x=0; x < state.population.subpops[sub].individuals.length; x++)       orderedPop[x]=x;      QuickSort.qsort(orderedPop,new EliteComparator(state.population.subpops[sub].individuals));      Individual[] inds=newpop.subpops[sub].individuals;      Individual[] oldinds=state.population.subpops[sub].individuals;      for (int x=inds.length - numElites(state,sub); x < inds.length; x++)       inds[x]=(Individual)(oldinds[orderedPop[x]].clone());    }  }  unmarkElitesEvaluated(state,newpop);}  }
class C{  public static UpgradeSubscriptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpgradeSubscriptionE object=new UpgradeSubscriptionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","upgradeSubscription").equals(reader.getName())) {          object.setUpgradeSubscription(org.oscm.xsd.UpgradeSubscription.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.887 -0500",hash_original_method="05D5BF6DA908F496FD007CC1987325E5",hash_generated_method="73F79E924F5B25AEE8C8D14FE95F1BA2") public static void colorToHSV(int color,float hsv[]){  RGBToHSV((color >> 16) & 0xFF,(color >> 8) & 0xFF,color & 0xFF,hsv);}  }
class C{  private void buildBrokenAreas(Rect r){  final int SEGMENT_LESS=SEGMENT * 7 / 9;  final int START_LENGTH=(int)(SEGMENT * 1.1);  float linkLen=0;  int repeat=0;  PathMeasure pmNow=new PathMeasure();  PathMeasure pmPre=new PathMeasure();  for (int i=0; i < mConfig.complexity; i++) {    lineRifts[i].setStartLength(Utils.dp2px(START_LENGTH));    if (repeat > 0) {      repeat--;    } else {      linkLen=Utils.nextInt(Utils.dp2px(SEGMENT_LESS),Utils.dp2px(SEGMENT));      repeat=Utils.nextInt(3);    }    int iPre=(i - 1) < 0 ? mConfig.complexity - 1 : i - 1;    pmNow.setPath(lineRifts[i],false);    pmPre.setPath(lineRifts[iPre],false);    if (hasCircleRifts && pmNow.getLength() > linkLen && pmPre.getLength() > linkLen) {      float[] pointNow=new float[2];      float[] pointPre=new float[2];      circleWidth[i]=Utils.nextInt(Utils.dp2px(1)) + 1;      circleRifts[i]=new Path();      pmNow.getPosTan(linkLen,pointNow,null);      circleRifts[i].moveTo(pointNow[0],pointNow[1]);      pmPre.getPosTan(linkLen,pointPre,null);      circleRifts[i].lineTo(pointPre[0],pointPre[1]);      Path pathArea=new Path();      pmPre.getSegment(linkLen,pmPre.getLength(),pathArea,true);      pathArea.rLineTo(0,0);      drawBorder(pathArea,lineRifts[iPre].getEndPoint(),lineRifts[i].points.get(lineRifts[i].points.size() - 1),r);      for (int j=lineRifts[i].points.size() - 2; j >= 0; j--)       pathArea.lineTo(lineRifts[i].points.get(j).x,lineRifts[i].points.get(j).y);      pathArea.lineTo(pointNow[0],pointNow[1]);      pathArea.lineTo(pointPre[0],pointPre[1]);      pathArea.close();      pathArray.add(pathArea);      pathArea=new Path();      pathArea.moveTo(0,0);      pathArea.lineTo(pointPre[0],pointPre[1]);      pathArea.lineTo(pointNow[0],pointNow[1]);      pathArea.close();      pathArray.add(pathArea);    } else {      Path pathArea=new Path(lineRifts[iPre]);      drawBorder(pathArea,lineRifts[iPre].getEndPoint(),lineRifts[i].points.get(lineRifts[i].points.size() - 1),r);      for (int j=lineRifts[i].points.size() - 2; j >= 0; j--)       pathArea.lineTo(lineRifts[i].points.get(j).x,lineRifts[i].points.get(j).y);      pathArea.close();      pathArray.add(pathArea);    }  }}  }
class C{  public static boolean isFileOfSupportedSchema(ResourceByteRangeProvider resourceByteRangeProvider) throws IOException {  try (InputStream inputStream=resourceByteRangeProvider.getByteRangeAsStream(0,resourceByteRangeProvider.getResourceSize() - 1)){    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();    documentBuilderFactory.setNamespaceAware(true);    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();    Document document=documentBuilder.parse(inputStream);    NodeList nodeList=null;    for (    String supportedSchemaURI : supportedPKLNamespaces) {      nodeList=document.getElementsByTagNameNS(supportedSchemaURI,"PackingList");      if (nodeList != null && nodeList.getLength() == 1) {        return true;      }    }  } catch (  ParserConfigurationException|SAXException e) {    return false;  }  return false;}  }
class C{  private static void alterOffsetOfSignalGroup(Node signalGroup,int offsetDiff,final int cycleTime){  NodeList children=signalGroup.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node elem=children.item(i);    if ((elem.getNodeName().equals("roughcast")) || (elem.getNodeName().equals("dropping"))) {      Node sec=elem.getAttributes().getNamedItem("sec");      int oldTime=Integer.valueOf(sec.getNodeValue()).intValue();      int newTime=oldTime + offsetDiff;      if (newTime > cycleTime) {        newTime-=cycleTime;      }      if (newTime < 0) {        newTime+=cycleTime;      }      sec.setNodeValue(Integer.toString(newTime));    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public CBRConnection(DTNHost fromNode,NetworkInterface fromInterface,DTNHost toNode,NetworkInterface toInterface,int connectionSpeed){  super(fromNode,fromInterface,toNode,toInterface);  this.speed=connectionSpeed;  this.transferDoneTime=0;}  }
class C{  private boolean createReversals(){  if (!isSOTrx())   return true;  log.info("createReversals");  StringBuffer info=new StringBuffer();  info.append("@M_InOut_ID@:");  MInOut[] shipments=getShipments();  for (int i=0; i < shipments.length; i++) {    MInOut ship=shipments[i];    if (MInOut.DOCSTATUS_Closed.equals(ship.getDocStatus()) || MInOut.DOCSTATUS_Reversed.equals(ship.getDocStatus()) || MInOut.DOCSTATUS_Voided.equals(ship.getDocStatus()))     continue;    ship.set_TrxName(get_TrxName());    if (!MInOut.DOCSTATUS_Completed.equals(ship.getDocStatus())) {      if (ship.voidIt())       ship.setDocStatus(MInOut.DOCSTATUS_Voided);    } else     if (ship.reverseCorrectIt()) {      ship.setDocStatus(MInOut.DOCSTATUS_Reversed);      info.append(" ").append(ship.getDocumentNo());    } else {      m_processMsg="Could not reverse Shipment " + ship;      return false;    }    ship.setDocAction(MInOut.DOCACTION_None);    ship.save(get_TrxName());  }  info.append(" - @C_Invoice_ID@:");  MInvoice[] invoices=getInvoices();  for (int i=0; i < invoices.length; i++) {    MInvoice invoice=invoices[i];    if (MInvoice.DOCSTATUS_Closed.equals(invoice.getDocStatus()) || MInvoice.DOCSTATUS_Reversed.equals(invoice.getDocStatus()) || MInvoice.DOCSTATUS_Voided.equals(invoice.getDocStatus()))     continue;    invoice.set_TrxName(get_TrxName());    if (!MInvoice.DOCSTATUS_Completed.equals(invoice.getDocStatus())) {      if (invoice.voidIt())       invoice.setDocStatus(MInvoice.DOCSTATUS_Voided);    } else     if (invoice.reverseCorrectIt()) {      invoice.setDocStatus(MInvoice.DOCSTATUS_Reversed);      info.append(" ").append(invoice.getDocumentNo());    } else {      m_processMsg="Could not reverse Invoice " + invoice;      return false;    }    invoice.setDocAction(MInvoice.DOCACTION_None);    invoice.save(get_TrxName());  }  m_processMsg=info.toString();  return true;}  }
class C{  public void processDocument(Collection<String> documentTokens){  Map<String,Integer> termCounts=new HashMap<String,Integer>(1000);  for (  String word : documentTokens) {    if (word.equals(IteratorFactory.EMPTY_TOKEN)) {      continue;    }    addTerm(word);    Integer termCount=termCounts.get(word);    termCounts.put(word,(termCount == null) ? 1 : 1 + termCount.intValue());  }  if (termCounts.isEmpty()) {    return;  }  int totalNumberOfUniqueWords=termIndexCounter.get();  SparseArray<Integer> documentColumn=new SparseIntHashArray(totalNumberOfUniqueWords);  for (  Map.Entry<String,Integer> e : termCounts.entrySet()) {    documentColumn.set(termToIndex.get(e.getKey()),e.getValue());  }  termDocumentMatrixBuilder.addColumn(documentColumn);}  }
class C{  public Task<FileSnapshotRestRep> removeExport(URI id,String protocol,String securityType,String permissions,String rootUserMapping){  return deleteTask(getExportsUrl() + "/{protocol},{securityType},{permissions},{rootUserMapping}",id,protocol,securityType,permissions,rootUserMapping);}  }
class C{  public MeasurementSimulatorParams(Parameters parameters){  simulator=new MeasurementSimulator(parameters);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return XBoolean.S_FALSE;}  }
class C{  public Matrix4d translationRotateScaleInvert(Vector3dc translation,Quaterniondc quat,Vector3dc scale){  return translationRotateScaleInvert(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  @InService(PageServiceSync.class) public void afterDataFlush(Page newPage,int sequenceFlush){  Page page=_pages.get(newPage.getId());  if (page == newPage) {    page.afterDataFlush(this,sequenceFlush);  } else {    System.out.println("AfterDataFlush mismatch: " + page + " "+ newPage);  }}  }
class C{  @Override public LogMessage readNextLogMessage(){  while (true) {    if (fileCounter.get() >= logPaths.size()) {      break;    }    if (reader == null) {      String filePath=logPaths.get(fileCounter.get());      try {        reader=new LogReader(filePath,request,status,basename);      } catch (      Exception e) {        status.append(String.format("Failed to open log file %s",e.getMessage()));        logger.error("Failed to generate log reader for {}",e.getMessage());        return null;      }      logger.debug("Reading file - " + filePath);      File f=new File(filePath);      sizeCounter.addAndGet(f.length());    }    if (currentLog != null) {      prevLogTime=currentLog.getTime();    }    currentLog=reader.readNextLogMessage();    if (currentLog != null) {      logCounter.incrementAndGet();      currentLog.setService(LogUtil.serviceToBytes(basename));      if (!LogUtil.permitCurrentLog(request.getMaxCount(),logCounter.get(),currentLog.getTime(),prevLogTime)) {        break;      }      return currentLog;    } else {      reader=null;      fileCounter.incrementAndGet();    }  }  return null;}  }
class C{  private void handleVNXFileSubscription() throws IOException, ConnectionManagerException {  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  _connectionFactory.refreshVnXFileConnections();  Iterator<String> failedVnxSubscriptionIter=FAILED_VNXFILE_SUBSCRIPTION.iterator();  while (failedVnxSubscriptionIter.hasNext()) {    String storageSystemURI=failedVnxSubscriptionIter.next();    if (makeVNXFileSubscription(storageSystemURI)) {      failedVnxSubscriptionIter.remove();    } else {      _logger.debug("Failed to make new subscription for the {}. " + "This will be taking care in the next monitoring cycle",storageSystemURI);    }  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  protected DefaultLengthListHandler(){}  }
class C{  public NodeId(int namespaceIndex,String value){  if (namespaceIndex < 0 || namespaceIndex > 65535)   throw new IllegalArgumentException("namespaceIndex out of bounds");  if (value != null && value.length() > 4096)   throw new IllegalArgumentException("The length is restricted to 4096 characters");  type=IdType.String;  this.value=value;  this.namespaceIndex=namespaceIndex;}  }
class C{  public static boolean isArray(FTypeRef typeRef){  return isUserDefinedType(typeRef,FArrayType.class);}  }
class C{  public static void logTextResource(LogEvent event){  loggerImpl.logTextResource(event);}  }
class C{  public static boolean testAabAab(Vector3d minA,Vector3d maxA,Vector3d minB,Vector3d maxB){  return testAabAab(minA.x,minA.y,minA.z,maxA.x,maxA.y,maxA.z,minB.x,minB.y,minB.z,maxB.x,maxB.y,maxB.z);}  }
class C{  public CatalogEntryRemovedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){  try {    getServiceRefOut().shutdown(mode);  } catch (  Throwable e) {    log.log(Level.FINER,e.toString(),e);  }  for (  ServiceRefAmp service : _linkServiceMap.values()) {    service.shutdown(mode);  }  for (  StubAmp actor : _closeList) {    actor.onShutdown(mode);  }}  }
class C{  protected AttributedString buildAttributedString(BridgeContext ctx,Element element){  if (element == null)   return null;  List rgns=getRegions(ctx,element);  AttributedString ret=getFlowDiv(ctx,element);  if (ret == null)   return ret;  ret.addAttribute(FLOW_REGIONS,rgns,0,1);  TextLineBreaks.findLineBrk(ret);  return ret;}  }
class C{  public void poweroff(List<String> nodeIds){  for (  String nodeId : nodeIds) {    try {      log.info("Try to power off {}",nodeId);      String svcId=nodeId.replace("vipr","syssvc-");      URI nodeEndpoint=coordinator.getNodeEndpointForSvcId(svcId);      if (nodeEndpoint == null) {        continue;      }      SysClientFactory.getSysClient(coordinator.getNodeEndpointForSvcId(svcId)).post(SysClientFactory.URI_POWEROFF_NODE,null,null);      log.info("Power off {} successfully",nodeId);    } catch (    SysClientException e) {      log.error("Power off node({}) failed",nodeId,e.getMessage());    }  }}  }
class C{  public Id<DgStreet> convertLinkId2StreetId(Id<Link> linkId){  String idString=linkId.toString() + "88";  return idPool.createId(idString,DgStreet.class);}  }
class C{  public boolean containsElement(Element element){  String deepName=getDeepName(element);  return elementNameSortOrderMap.containsKey(deepName);}  }
class C{  private void initializeNode(int nodeIndex,BayesIm oldBayesIm,int initializationMethod){  Node node=nodes[nodeIndex];  Graph graph=getBayesPm().getDag();  List<Node> parentList=graph.getParents(node);  int[] parentArray=new int[parentList.size()];  for (int i=0; i < parentList.size(); i++) {    parentArray[i]=getNodeIndex(parentList.get(i));  }  Arrays.sort(parentArray);  parents[nodeIndex]=parentArray;  int[] dims=new int[parentArray.length];  for (int i=0; i < dims.length; i++) {    Node parNode=nodes[parentArray[i]];    dims[i]=getBayesPm().getNumCategories(parNode);  }  int numRows=1;  for (  int dim : dims) {    if (numRows > 1000000) {      throw new IllegalArgumentException("The number of rows in the " + "conditional probability table for " + nodes[nodeIndex] + " is greater than 1,000,000 and cannot be "+ "represented.");    }    numRows*=dim;  }  int numCols=getBayesPm().getNumCategories(node);  parentDims[nodeIndex]=dims;  probs[nodeIndex]=new double[numRows][numCols];  if (initializationMethod == RANDOM) {    randomizeTable(nodeIndex);  } else {    for (int rowIndex=0; rowIndex < numRows; rowIndex++) {      if (oldBayesIm == null) {        overwriteRow(nodeIndex,rowIndex,initializationMethod);      } else {        retainOldRowIfPossible(nodeIndex,rowIndex,oldBayesIm,initializationMethod);      }    }  }}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    setTranslucentStatus(true);    SystemBarTintManager mTintManager=new SystemBarTintManager(this);    mTintManager.setStatusBarTintEnabled(true);    mTintManager.setNavigationBarTintEnabled(true);    mTintManager.setTintDrawable(UIElementsHelper.getGeneralActionBarBackground(this));    getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(this));  }}  }
class C{  public static String xmlComment(String data){  int idx=0;  while (true) {    idx=data.indexOf("--",idx);    if (idx < 0) {      break;    }    data=data.substring(0,idx + 1) + " " + data.substring(idx + 1);  }  if (data.indexOf('\n') >= 0) {    return "<!--\n" + indent(data) + "-->\n";  }  return "<!-- " + data + " -->\n";}  }
class C{  @Override public void cleanAll(){  clean(-1);}  }
class C{  public StackPageTransformer(int numberOfStacked,Orientation orientation,float currentPageScale,float topStackedScale,float overlapFactor,Gravity gravity){  validateValues(currentPageScale,topStackedScale,overlapFactor);  mNumberOfStacked=numberOfStacked;  mAlphaFactor=1.0f / (mNumberOfStacked + 1);  mZeroPositionScale=currentPageScale;  mStackedScaleFactor=(currentPageScale - topStackedScale) / mNumberOfStacked;  mOverlapFactor=overlapFactor;  mOrientation=orientation;  mGravity=gravity;  mScaleInterpolator=new DecelerateInterpolator(1.3f);  mRotationInterpolator=new AccelerateInterpolator(0.6f);  mValueInterpolator=new ValueInterpolator(0,1,0,mZeroPositionScale);}  }
class C{  public FunctionScoreQueryBuilder add(ScoreFunctionBuilder scoreFunctionBuilder){  if (scoreFunctionBuilder == null) {    throw new IllegalArgumentException("function_score: function must not be null");  }  this.filters.add(null);  this.scoreFunctions.add(scoreFunctionBuilder);  return this;}  }
class C{  @Override protected void onPostExecute(Void notUsed){  super.onPostExecute(notUsed);  getWorldWindow().getLayers().addLayer(this.placeLayer);  statusText.setText(String.format(Locale.US,"%,d US places created",this.numPlacesCreated));  getWorldWindow().requestRedraw();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.253 -0400",hash_original_method="969BBB2B9A0EFD63C3504D154290DE98",hash_generated_method="B0DD693CEE71361E54D3C5E57870D2CA") public FileExistsException(String message){  super(message);}  }
class C{  void downloadCurrent(boolean add){  Log.d("Logic","viewBox: " + viewBox.getBottom() + " "+ viewBox.getLeft()+ " "+ viewBox.getTop()+ " "+ viewBox.getRight());  downloadBox(viewBox.copy(),add,null);}  }
class C{  public boolean deleteEntry(BasicPoolEntry entry){  final boolean found=freeEntries.remove(entry);  if (found)   numEntries--;  return found;}  }
class C{  public float dst2(Vector3 point){  float a=point.x - x;  float b=point.y - y;  float c=point.z - z;  a*=a;  b*=b;  c*=c;  return a + b + c;}  }
class C{  private String formatValueDescriptor(String descriptor){  String[] components=descriptor.split(":");  if (components.length == 1) {    return capitalize(descriptor);  } else   if (components.length == 2) {    return capitalize(components[1]);  } else   if (components.length == 3) {    return capitalize(components[2]);  } else   if (components.length == 4) {    return capitalize(getShortClassName(components[1])) + STR_WHERE + capitalize(getMethodNameWithoutDescriptor(components[2]))+ STR_IS+ capitalize(components[3]);  } else {    throw new RuntimeException("Unsupported value descriptor: " + descriptor);  }}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  public boolean isScanning(){  return isScanning;}  }
class C{  public static boolean isTerminated(final Protos.TaskState state){switch (state) {case TASK_STARTING:case TASK_STAGING:case TASK_RUNNING:    return false;default :  return true;}}  }
class C{  public void refreshPage(){  animatePage(getCurrentItem());}  }
class C{  public List<Site> listSites(String vdcShortId){  List<Site> result=new ArrayList<>();  String siteKind=String.format("%s/%s",Site.CONFIG_KIND,vdcShortId);  for (  Configuration siteConfig : coordinator.queryAllConfiguration(siteKind)) {    result.add(new Site(siteConfig));  }  return result;}  }
class C{  public DatagramPacket responseReceive() throws IOException {  byte[] buf=new byte[1024];  DatagramPacket dp=new DatagramPacket(buf,buf.length);  datagramSocket.receive(dp);  return dp;}  }
class C{  public void createSoldier(StendhalRPZone zone,String name,int x,int y){  ScriptingNPC npc=new ScriptingNPC(name);  npc.setEntityClass("youngsoldiernpc");  npc.setHP((int)(Math.random() * 80) + 10);  npc.setPosition(x,y);  npc.setDirection(Direction.DOWN);  zone.add(npc);}  }
class C{  public Rectangle(double minLat,double maxLat,double minLon,double maxLon){  GeoUtils.checkLatitude(minLat);  GeoUtils.checkLatitude(maxLat);  GeoUtils.checkLongitude(minLon);  GeoUtils.checkLongitude(maxLon);  this.minLon=minLon;  this.maxLon=maxLon;  this.minLat=minLat;  this.maxLat=maxLat;  assert maxLat >= minLat;}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  @Override public int compareTo(WbXmlAttributeDef attr){  int result=this.getNameWithPrefix().compareTo(attr.getNameWithPrefix());  if (result == 0) {    if (this.value == null && attr.getValue() == null) {      result=0;    } else     if (this.value == null) {      result=1;    } else     if (attr.getValue() == null) {      result=-1;    } else {      result=-this.value.compareTo(attr.getValue());    }  }  return result;}  }
class C{  public static void solve(InputStream stream) throws IOException {  solve(new TSPInstance(new InputStreamReader(stream)));}  }
class C{  public static void main(String[] args){  Frame frame=new PacketTool();  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  @Override public void onSharedPreferenceChanged(SharedPreferences aSharedPreferences,String aKey){  if (mIsUiUpdateSkipped) {    Log.d(LOG_TAG,"## onSharedPreferenceChanged(): Skipped");    return;  }  if (aKey.equals(PREF_KEY_ROOM_PHOTO_AVATAR)) {    onRoomAvatarPreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_NAME)) {    onRoomNamePreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_TOPIC)) {    onRoomTopicPreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_MUTE_NOTIFICATIONS_SWITCH)) {    onRoomMuteNotificationsPreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_DIRECTORY_VISIBILITY_SWITCH)) {    onRoomDirectoryVisibilityPreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_TAG_LIST)) {    onRoomTagPreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_ACCESS_RULES_LIST)) {    onRoomAccessPreferenceChanged();  } else   if (aKey.equals(PREF_KEY_ROOM_HISTORY_READABILITY_LIST)) {    onRoomHistoryReadabilityPreferenceChanged();  } else {    Log.w(LOG_TAG,"## onSharedPreferenceChanged(): unknown aKey = " + aKey);  }}  }
class C{  public void cancel(){  try {    executorService.shutdown();    if (!executorService.awaitTermination(30,TimeUnit.MINUTES)) {      executorService.shutdownNow();      if (!executorService.awaitTermination(30,TimeUnit.MINUTES)) {        LOGGER.error("Pool did not terminate... FATAL ERROR");        throw new RuntimeException("Parallel SAX pool did not terminate... FATAL ERROR");      }    } else {      LOGGER.error("Parallel SAX was interrupted by a request");    }  } catch (  InterruptedException ie) {    LOGGER.error("Error while waiting interrupting.",ie);    executorService.shutdownNow();    Thread.currentThread().interrupt();  }}  }
class C{  public boolean addAll(NamedList<T> nl){  nvPairs.addAll(nl.nvPairs);  return nl.size() > 0;}  }
class C{  public void addEventFirst(SimEvent newEvent){  newEvent.setSerial(0);  sortedSet.add(newEvent);}  }
class C{  public DataProviderEntity createDataProviderEntity(String dataProviderName){  DataProviderEntity dataProviderEntity=new DataProviderEntity();  dataProviderEntity.setName(dataProviderName);  return dataProviderDao.saveAndRefresh(dataProviderEntity);}  }
class C{  @Override public void displayAppUsages(List<Usage> appUsages){  this.usages=appUsages;}  }
class C{  public Page findAll(Pageable pageable){  return page(retrieveAll(),pageable);}  }
class C{  public Builder idTokenGroups(GroupMembershipType idTokenGroupsRequested){  this.idTokenGroupsRequested=idTokenGroupsRequested;  return this;}  }
class C{  public void tick(){  final long count=uncounted.getAndSet(0);  final double instantRate=count / interval;  if (initialized) {    rate+=(alpha * (instantRate - rate));  } else {    rate=instantRate;    initialized=true;  }}  }
class C{  public void putUnalignedBitString(BitArray ba) throws IOException {  byte[] bits=ba.toByteArray();  write(DerValue.tag_BitString);  putLength(bits.length + 1);  write(bits.length * 8 - ba.length());  write(bits);}  }
class C{  public View findView(String viewName){  View result=null;  int prefixLength=getPathPrefix().length();  viewName=viewName.substring(prefixLength);  result=findViewInternal(viewName);  return result;}  }
class C{  public void endExecuteFunction(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  this.stats.incInt(executeFunctionInProgressId,-1);  int endExecuteFunctionId;  if (timedOut) {    endExecuteFunctionId=executeFunctionTimedOutId;  } else   if (failed) {    endExecuteFunctionId=executeFunctionFailedId;  } else {    endExecuteFunctionId=executeFunctionId;  }  this.stats.incInt(endExecuteFunctionId,1);  this.stats.incLong(executeFunctionDurationId,duration);}  }
class C{  public int size(){  return count;}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? GpsLatitudeRef.NORTH : GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? GpsLongitudeRef.EAST : GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public void addRectShape(float[] v,float[] v1,float[] v2,float[] v3,float[] v4,float[] v5,float[] v6,float[] v7,int w,int h,int d){  float[] var1=new float[]{1,1,1,1,1,1,1,1,1,1,1,1};  addRectShape(v,v1,v2,v3,v4,v5,v6,v7,w,h,d,var1);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_11:    return getAnonymous_linkingOp_1_1();case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_21:  return getAnonymous_linkingOp_2_1();case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_31:return getAnonymous_linkingOp_3_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void copyFrom(ExceptionsAttribute srcAttr,Map classnames){  ConstPool srcCp=srcAttr.constPool;  ConstPool destCp=this.constPool;  byte[] src=srcAttr.info;  int num=src.length;  byte[] dest=new byte[num];  dest[0]=src[0];  dest[1]=src[1];  for (int i=2; i < num; i+=2) {    int index=ByteArray.readU16bit(src,i);    ByteArray.write16bit(srcCp.copy(index,destCp,classnames),dest,i);  }  this.info=dest;}  }
class C{  public double doOperation() throws OperatorFailedException {  if (DEBUG) {    c2cLikelihood.outputTreeToFile("beforeTSSB.nex",false);  }  BranchMapModel branchMap=c2cLikelihood.getBranchMap();  double logq;  NodeRef i;  do {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));  } while (!eligibleForMove(i,tree,branchMap));  final NodeRef iP=tree.getParent(i);  final NodeRef CiP=getOtherChild(tree,iP,i);  final NodeRef PiP=tree.getParent(iP);  final double delta=getDelta();  final double oldHeight=tree.getNodeHeight(iP);  final double newHeight=oldHeight + delta;  AbstractCase iCase=branchMap.get(i.getNumber());  AbstractCase iPCase=branchMap.get(iP.getNumber());  AbstractCase CiPCase=branchMap.get(CiP.getNumber());  AbstractCase PiPCase=null;  if (PiP != null) {    PiPCase=branchMap.get(PiP.getNumber());  }  if (resampleInfectionTimes) {    iCase.setInfectionBranchPosition(MathUtils.nextDouble());    if (PiPCase == null || CiPCase != PiPCase) {      CiPCase.setInfectionBranchPosition(MathUtils.nextDouble());    }  }  if (delta > 0) {    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {      NodeRef newParent=PiP;      NodeRef newChild=iP;      while (tree.getNodeHeight(newParent) < newHeight) {        newChild=newParent;        newParent=tree.getParent(newParent);        if (newParent == null)         break;      }      tree.beginTreeEdit();      if (tree.isRoot(newChild)) {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.setRoot(iP);        if (tree.hasNodeTraits()) {          tree.swapAllTraits(newChild,iP);        }        if (tree.hasRates()) {          final double rootNodeRate=tree.getNodeRate(newChild);          tree.setNodeRate(newChild,tree.getNodeRate(iP));          tree.setNodeRate(iP,rootNodeRate);        }      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);      logq=-Math.log(possibleSources);      if (PiPCase != CiPCase) {        logq+=Math.log(0.5);      }      AbstractCase newiPCase;      AbstractCase newChildCase=branchMap.get(newChild.getNumber());      if (newParent != null && branchMap.get(newParent.getNumber()) != branchMap.get(newChild.getNumber())) {        if (MathUtils.nextInt(2) == 0) {          newiPCase=branchMap.get(newParent.getNumber());        } else {          newiPCase=newChildCase;        }        if (resampleInfectionTimes) {          newChildCase.setInfectionBranchPosition(MathUtils.nextDouble());        }        logq+=Math.log(2);      } else {        newiPCase=newChildCase;        if (resampleInfectionTimes) {          if (newParent == null) {            newChildCase.setInfectionBranchPosition(MathUtils.nextDouble());          }        }      }      branchMap.set(iP.getNumber(),newiPCase,true);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  } else {    if (tree.getNodeHeight(i) > newHeight) {      return Double.NEGATIVE_INFINITY;    }    if (tree.getNodeHeight(CiP) > newHeight) {      List<NodeRef> newChildren=new ArrayList<NodeRef>();      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);      if (newChildren.size() == 0) {        return Double.NEGATIVE_INFINITY;      }      final int childIndex=MathUtils.nextInt(newChildren.size());      NodeRef newChild=newChildren.get(childIndex);      NodeRef newParent=tree.getParent(newChild);      tree.beginTreeEdit();      if (tree.isRoot(iP)) {        tree.removeChild(iP,CiP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(newParent,iP);        tree.setRoot(CiP);        if (tree.hasNodeTraits()) {          tree.swapAllTraits(iP,CiP);        }        if (tree.hasRates()) {          final double rootNodeRate=tree.getNodeRate(iP);          tree.setNodeRate(iP,tree.getNodeRate(CiP));          tree.setNodeRate(CiP,rootNodeRate);        }      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      logq=Math.log(possibleDestinations);      if (PiP != null && PiPCase != CiPCase) {        logq+=Math.log(0.5);      }      AbstractCase newiPCase;      AbstractCase newChildCase=branchMap.get(newChild.getNumber());      if (branchMap.get(newParent.getNumber()) != branchMap.get(newChild.getNumber())) {        if (MathUtils.nextInt(2) == 0) {          newiPCase=branchMap.get(newParent.getNumber());        } else {          newiPCase=newChildCase;        }        if (resampleInfectionTimes) {          newChildCase.setInfectionBranchPosition(MathUtils.nextDouble());        }        logq+=Math.log(2);      } else {        newiPCase=newChildCase;      }      branchMap.set(iP.getNumber(),newiPCase,true);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  }  if (swapInRandomRate) {    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      final double tmp=tree.getNodeRate(i);      tree.setNodeRate(i,tree.getNodeRate(j));      tree.setNodeRate(j,tmp);    }  }  if (swapInRandomTrait) {    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      tree.swapAllTraits(i,j);    }  }  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide");  if (DEBUG) {    c2cLikelihood.getTreeModel().checkPartitions();    c2cLikelihood.outputTreeToFile("afterTSSB.nex",false);  }  return logq;}  }
class C{  public static String createArgsString(List<String> args){  if (args == null) {    return "";  }  StringBuilder argsSb=new StringBuilder();  for (  String arg : args) {    if ((arg.contains(" ") || arg.contains("${")) && !StringUtilities.isQuoted(arg)) {      argsSb.append(StringUtilities.quote(arg));    } else {      argsSb.append(arg);    }    argsSb.append(' ');  }  if (argsSb.length() > 0) {    argsSb.setLength(argsSb.length() - 1);  }  return argsSb.toString();}  }
class C{  public Instance mergeInstance(Instance inst){  int m=0;  double[] newVals=new double[numAttributes() + inst.numAttributes()];  for (int j=0; j < numAttributes(); j++, m++) {    newVals[m]=value(j);  }  for (int j=0; j < inst.numAttributes(); j++, m++) {    newVals[m]=inst.value(j);  }  return new Instance(1.0,newVals);}  }
class C{  void checkKey() throws IOException {  if (klen >= 0)   return;  if (atEnd()) {    throw new EOFException("No key-value to read");  }  klen=-1;  vlen=-1;  valueChecked=false;  klen=Utils.readVInt(blkReader);  keyOffset=blkReader.getBlockDataInputStream().getPos();  blkReader.getBlockDataInputStream().skip(klen);  valueBufferInputStream.reset(blkReader);  if (valueBufferInputStream.isLastChunk()) {    vlen=valueBufferInputStream.getRemain();    valueOffset=blkReader.getBlockDataInputStream().getPos();  }}  }
class C{  public void testTypical(){  m_Filter=getFilter();  ((ChangeDateFormat)m_Filter).setDateFormat("yyyy-MM");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  boolean equal=false;  for (int i=0; i < m_Instances.numInstances(); i++) {    if (m_Instances.instance(i) instanceof SparseInstance)     continue;    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) == 0) {      equal=true;      break;    }  }  if (equal)   fail("Instances not changed!");}  }
class C{  public void forward(float[] buffReal,float[] buffImag){  if (buffReal.length != timeSize || buffImag.length != timeSize) {    return;  }  setComplex(buffReal,buffImag);  bitReverseComplex();  fft();  fillSpectrum();}  }
class C{  public static String stringFor(int n){switch (n) {case cudaDevAttrMaxThreadsPerBlock:    return "cudaDevAttrMaxThreadsPerBlock";case cudaDevAttrMaxBlockDimX:  return "cudaDevAttrMaxBlockDimX";case cudaDevAttrMaxBlockDimY:return "cudaDevAttrMaxBlockDimY";case cudaDevAttrMaxBlockDimZ:return "cudaDevAttrMaxBlockDimZ";case cudaDevAttrMaxGridDimX:return "cudaDevAttrMaxGridDimX";case cudaDevAttrMaxGridDimY:return "cudaDevAttrMaxGridDimY";case cudaDevAttrMaxGridDimZ:return "cudaDevAttrMaxGridDimZ";case cudaDevAttrMaxSharedMemoryPerBlock:return "cudaDevAttrMaxSharedMemoryPerBlock";case cudaDevAttrTotalConstantMemory:return "cudaDevAttrTotalConstantMemory";case cudaDevAttrWarpSize:return "cudaDevAttrWarpSize";case cudaDevAttrMaxPitch:return "cudaDevAttrMaxPitch";case cudaDevAttrMaxRegistersPerBlock:return "cudaDevAttrMaxRegistersPerBlock";case cudaDevAttrClockRate:return "cudaDevAttrClockRate";case cudaDevAttrTextureAlignment:return "cudaDevAttrTextureAlignment";case cudaDevAttrGpuOverlap:return "cudaDevAttrGpuOverlap";case cudaDevAttrMultiProcessorCount:return "cudaDevAttrMultiProcessorCount";case cudaDevAttrKernelExecTimeout:return "cudaDevAttrKernelExecTimeout";case cudaDevAttrIntegrated:return "cudaDevAttrIntegrated";case cudaDevAttrCanMapHostMemory:return "cudaDevAttrCanMapHostMemory";case cudaDevAttrComputeMode:return "cudaDevAttrComputeMode";case cudaDevAttrMaxTexture1DWidth:return "cudaDevAttrMaxTexture1DWidth";case cudaDevAttrMaxTexture2DWidth:return "cudaDevAttrMaxTexture2DWidth";case cudaDevAttrMaxTexture2DHeight:return "cudaDevAttrMaxTexture2DHeight";case cudaDevAttrMaxTexture3DWidth:return "cudaDevAttrMaxTexture3DWidth";case cudaDevAttrMaxTexture3DHeight:return "cudaDevAttrMaxTexture3DHeight";case cudaDevAttrMaxTexture3DDepth:return "cudaDevAttrMaxTexture3DDepth";case cudaDevAttrMaxTexture2DLayeredWidth:return "cudaDevAttrMaxTexture2DLayeredWidth";case cudaDevAttrMaxTexture2DLayeredHeight:return "cudaDevAttrMaxTexture2DLayeredHeight";case cudaDevAttrMaxTexture2DLayeredLayers:return "cudaDevAttrMaxTexture2DLayeredLayers";case cudaDevAttrSurfaceAlignment:return "cudaDevAttrSurfaceAlignment";case cudaDevAttrConcurrentKernels:return "cudaDevAttrConcurrentKernels";case cudaDevAttrEccEnabled:return "cudaDevAttrEccEnabled";case cudaDevAttrPciBusId:return "cudaDevAttrPciBusId";case cudaDevAttrPciDeviceId:return "cudaDevAttrPciDeviceId";case cudaDevAttrTccDriver:return "cudaDevAttrTccDriver";case cudaDevAttrMemoryClockRate:return "cudaDevAttrMemoryClockRate";case cudaDevAttrGlobalMemoryBusWidth:return "cudaDevAttrGlobalMemoryBusWidth";case cudaDevAttrL2CacheSize:return "cudaDevAttrL2CacheSize";case cudaDevAttrMaxThreadsPerMultiProcessor:return "cudaDevAttrMaxThreadsPerMultiProcessor";case cudaDevAttrAsyncEngineCount:return "cudaDevAttrAsyncEngineCount";case cudaDevAttrUnifiedAddressing:return "cudaDevAttrUnifiedAddressing";case cudaDevAttrMaxTexture1DLayeredWidth:return "cudaDevAttrMaxTexture1DLayeredWidth";case cudaDevAttrMaxTexture1DLayeredLayers:return "cudaDevAttrMaxTexture1DLayeredLayers";case cudaDevAttrMaxTexture2DGatherWidth:return "cudaDevAttrMaxTexture2DGatherWidth";case cudaDevAttrMaxTexture2DGatherHeight:return "cudaDevAttrMaxTexture2DGatherHeight";case cudaDevAttrMaxTexture3DWidthAlt:return "cudaDevAttrMaxTexture3DWidthAlt";case cudaDevAttrMaxTexture3DHeightAlt:return "cudaDevAttrMaxTexture3DHeightAlt";case cudaDevAttrMaxTexture3DDepthAlt:return "cudaDevAttrMaxTexture3DDepthAlt";case cudaDevAttrPciDomainId:return "cudaDevAttrPciDomainId";case cudaDevAttrTexturePitchAlignment:return "cudaDevAttrTexturePitchAlignment";case cudaDevAttrMaxTextureCubemapWidth:return "cudaDevAttrMaxTextureCubemapWidth";case cudaDevAttrMaxTextureCubemapLayeredWidth:return "cudaDevAttrMaxTextureCubemapLayeredWidth";case cudaDevAttrMaxTextureCubemapLayeredLayers:return "cudaDevAttrMaxTextureCubemapLayeredLayers";case cudaDevAttrMaxSurface1DWidth:return "cudaDevAttrMaxSurface1DWidth";case cudaDevAttrMaxSurface2DWidth:return "cudaDevAttrMaxSurface2DWidth";case cudaDevAttrMaxSurface2DHeight:return "cudaDevAttrMaxSurface2DHeight";case cudaDevAttrMaxSurface3DWidth:return "cudaDevAttrMaxSurface3DWidth";case cudaDevAttrMaxSurface3DHeight:return "cudaDevAttrMaxSurface3DHeight";case cudaDevAttrMaxSurface3DDepth:return "cudaDevAttrMaxSurface3DDepth";case cudaDevAttrMaxSurface1DLayeredWidth:return "cudaDevAttrMaxSurface1DLayeredWidth";case cudaDevAttrMaxSurface1DLayeredLayers:return "cudaDevAttrMaxSurface1DLayeredLayers";case cudaDevAttrMaxSurface2DLayeredWidth:return "cudaDevAttrMaxSurface2DLayeredWidth";case cudaDevAttrMaxSurface2DLayeredHeight:return "cudaDevAttrMaxSurface2DLayeredHeight";case cudaDevAttrMaxSurface2DLayeredLayers:return "cudaDevAttrMaxSurface2DLayeredLayers";case cudaDevAttrMaxSurfaceCubemapWidth:return "cudaDevAttrMaxSurfaceCubemapWidth";case cudaDevAttrMaxSurfaceCubemapLayeredWidth:return "cudaDevAttrMaxSurfaceCubemapLayeredWidth";case cudaDevAttrMaxSurfaceCubemapLayeredLayers:return "cudaDevAttrMaxSurfaceCubemapLayeredLayers";case cudaDevAttrMaxTexture1DLinearWidth:return "cudaDevAttrMaxTexture1DLinearWidth";case cudaDevAttrMaxTexture2DLinearWidth:return "cudaDevAttrMaxTexture2DLinearWidth";case cudaDevAttrMaxTexture2DLinearHeight:return "cudaDevAttrMaxTexture2DLinearHeight";case cudaDevAttrMaxTexture2DLinearPitch:return "cudaDevAttrMaxTexture2DLinearPitch";case cudaDevAttrMaxTexture2DMipmappedWidth:return "cudaDevAttrMaxTexture2DMipmappedWidth";case cudaDevAttrMaxTexture2DMipmappedHeight:return "cudaDevAttrMaxTexture2DMipmappedHeight";case cudaDevAttrComputeCapabilityMajor:return "cudaDevAttrComputeCapabilityMajor";case cudaDevAttrComputeCapabilityMinor:return "cudaDevAttrComputeCapabilityMinor";case cudaDevAttrMaxTexture1DMipmappedWidth:return "cudaDevAttrMaxTexture1DMipmappedWidth";case cudaDevAttrStreamPrioritiesSupported:return "cudaDevAttrStreamPrioritiesSupported";}return "INVALID cudaDeviceAttr: " + n;}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public void checkLoadExternalResource(ParsedURL resourceURL,ParsedURL docURL) throws SecurityException {  ExternalResourceSecurity s=getExternalResourceSecurity(resourceURL,docURL);  if (s != null) {    s.checkLoadExternalResource();  }}  }
class C{  public void convertToNumber() throws IOException {  print("convertToNumber",null);}  }
class C{  public static Object[] mergeNativeArrays(Object[] dst,Object[] src,int dstPosition,boolean doPowerOf2){  if (dstPosition < 0)   dstPosition=dst.length;  Object[] result=resizeIfNeeded(dst,dstPosition + src.length,doPowerOf2);  System.arraycopy(src,0,result,dstPosition,src.length);  return result;}  }
class C{  public Builder withClient(UUID client){  request.client=Assert.notNull(client,"client");  return this;}  }
class C{  private CNodeTypeCounter(){}  }
class C{  public void attributeRemoved(HttpSessionBindingEvent event){  if (event.getName().equals(EVENT_KEY) && !isAnonymous()) {    SecurityContext securityContext=(SecurityContext)event.getValue();    Authentication auth=securityContext.getAuthentication();    if (auth != null && (auth.getPrincipal() instanceof User)) {      User user=(User)auth.getPrincipal();      removeUsername(user);    }  }}  }
class C{  public void uploadConfigSet(Path configDir,String configName) throws IOException, KeeperException, InterruptedException {  try (SolrZkClient zkClient=new SolrZkClient(zkServer.getZkAddress(),AbstractZkTestCase.TIMEOUT,AbstractZkTestCase.TIMEOUT,null)){    ZkConfigManager manager=new ZkConfigManager(zkClient);    manager.uploadConfigDir(configDir,configName);  } }  }
class C{  @Override public AttachmentObject copy(){  return new AttachmentObject(this);}  }
class C{  public void remove(EventBean oldEvent){  if (priorEventMap != null) {    priorEventMap.remove(oldEvent);  }}  }
class C{  public String saveCategories() throws SaaSApplicationException {  if (!isTokenValid()) {    this.getMarketplaceBean().setMarketplaceId(null);    return OUTCOME_REFRESH;  }  List<VOCategory> toSave=new ArrayList<>();  toDelete=new ArrayList<>();  for (  CategoryRow row : categoriesRows) {    if (row.isSelected() && !row.isNewCategory()) {      toDelete.add(row.getCategory());    } else     if (!row.isSelected()) {      toSave.add(row.getCategory());    }  }  try {    getCategorizationService().saveCategories(toSave,toDelete,locale);    notifyCategorySelectionBean();    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_CATEGORIES_SAVED);    resetCategoriesLists();  } catch (  ObjectNotFoundException e) {    resetToken();    loadCategories(getLocale());    if (ClassEnum.MARKETPLACE == e.getDomainObjectClassEnum()) {      this.getMarketplaceBean().resetMarketplaces();      ui.handleException(e);    } else {      ui.handleException(new ConcurrentModificationException());    }  } finally {    dirty=false;  }  return null;}  }
class C{  public void addRow(Row row){  rows.add(row);}  }
class C{  public String midString(int index,int length){  if (index < 0) {    index=0;  }  if (length <= 0 || index >= size) {    return "";  }  if (size <= index + length) {    return new String(buffer,index,size - index);  } else {    return new String(buffer,index,length);  }}  }
class C{  private static StringBuilder appendCopyJsonExpression(String inVar,StringBuilder builder){  builder.append(COPY_JSONS_PARAM).append(" ? ");  appendNaiveCopyJsonExpression(inVar,builder).append(" : (JsonElement)(").append(inVar).append(")");  return builder;}  }
class C{  private static ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int index,int size){  throw new ArrayIndexOutOfBoundsException(size,index);}  }
class C{  public void initialize(Element collection){  this.id=DOMUtil.getChildText(collection.getElementsByTagName(TAG_ID).item(0)).trim();  this.name=DOMUtil.getChildText(collection.getElementsByTagName(TAG_NAME).item(0)).trim();  this.wlString=DOMUtil.getChildText(collection.getElementsByTagName(TAG_WHITELIST).item(0)).trim();  parseList(this.whiteList,wlString);  NodeList nodeList=collection.getElementsByTagName(TAG_BLACKLIST);  if (nodeList.getLength() > 0) {    this.blString=DOMUtil.getChildText(nodeList.item(0)).trim();    parseList(this.blackList,blString);  }  nodeList=collection.getElementsByTagName(TAG_KEY);  if (nodeList.getLength() == 1) {    this.key=DOMUtil.getChildText(nodeList.item(0)).trim();  }}  }
class C{  public static void registerPart(Class<? extends IMultipart> clazz,String identifier){  if (clazz == null)   throw new IllegalArgumentException("Attempted to register a null multipart class!");  if (identifier == null)   throw new IllegalArgumentException("Attempted to register a multipart with a null identifier!");  if (partClasses.containsValue(clazz))   throw new IllegalArgumentException("Attempted to register a multipart with a class that's already in use!");  if (partClasses.containsKey(identifier))   throw new IllegalArgumentException("Attempted to register a multipart with an identifier that's already in use!");  partClasses.put(getResourceLocation(identifier),clazz);  registerPartFactory(new SimplePartFactory(clazz),identifier);}  }
class C{  public static long min(final long a,final long b){  return (a <= b) ? a : b;}  }
class C{  protected final int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){  int nodeIndex=m_size++;  if (nodeIndex == m_maxNodeIndex) {    addNewDTMID(nodeIndex);    m_maxNodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);  }  m_firstch.addElement(DTM.NULL);  m_nextsib.addElement(DTM.NULL);  m_parent.addElement(parentIndex);  m_exptype.addElement(expandedTypeID);  m_dataOrQName.addElement(dataOrPrefix);  if (m_prevsib != null) {    m_prevsib.addElement(previousSibling);  }  if (m_locator != null && m_useSourceLocationProperty) {    setSourceLocation();  }switch (type) {case DTM.NAMESPACE_NODE:    declareNamespaceInContext(parentIndex,nodeIndex);  break;case DTM.ATTRIBUTE_NODE:break;default :if (DTM.NULL != previousSibling) {m_nextsib.setElementAt(nodeIndex,previousSibling);} else if (DTM.NULL != parentIndex) {m_firstch.setElementAt(nodeIndex,parentIndex);}break;}return nodeIndex;}  }
class C{  private void cloneClassCloneInheritedMethodsAndInstallClass(){  cloneAndInstallClass();  cim=new CloneInheritedMethods(clone,cloneAllMethods,true);  cim.transform();  RefType originalType=RefType.v(original);  RefType cloneType=RefType.v(clone);  for (  SootMethod method : clone.getMethods()) {    StmtBody stmtBody=null;    try {      stmtBody=(StmtBody)method.retrieveActiveBody();    } catch (    Exception ex) {      logger.info("Exception retrieving method body {}",ex);      continue;    }    for (    ValueBox vb : stmtBody.getUseAndDefBoxes()) {      if (vb.getValue() instanceof NewExpr && ((NewExpr)vb.getValue()).getBaseType().equals(originalType)) {        NewExpr newE=(NewExpr)vb.getValue();        newE.setBaseType(cloneType);      }    }  }}  }
class C{  protected void sequence_Pair(ISerializationContext context,Pair semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getPairAccess().getPairLeftAction_1_0_0(),semanticObject.getLeft());  feeder.accept(grammarAccess.getPairAccess().getOpColonColonKeyword_1_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getPairAccess().getRightIfParserRuleCall_1_1_0(),semanticObject.getRight());  feeder.finish();}  }
class C{  public static void switchPerspective(String perspectiveId){  try {    PlatformUI.getWorkbench().showPerspective(perspectiveId,PlatformUI.getWorkbench().getActiveWorkbenchWindow());  } catch (  WorkbenchException e) {    e.printStackTrace();  }}  }
class C{  @Override public String toString(){  return "Probability: " + takenProbability;}  }
class C{  @Transactional private void updateAgencyWiseCollectionOnCreate(final BillReceiptInfo billRcptInfo,final AgencyWiseCollection agencyWiseCollection,final BigDecimal totalAmount){  for (  AgencyWiseCollectionDetail agencyDtl : agencyWiseCollection.getAgencyWiseCollectionDetails()) {    if (agencyDtl.getDemandDetail() != null && !AdvertisementTaxConstants.DEMANDREASON_PENALTY.equalsIgnoreCase(agencyDtl.getDemandreason().getEgDemandReasonMaster().getReasonMaster())) {      agencyDtl.getDemandDetail().setAmtCollected(agencyDtl.getDemandDetail().getAmtCollected().add(agencyDtl.getAmount()));      persistCollectedReceipts(agencyDtl.getDemandDetail(),billRcptInfo.getReceiptNum(),totalAmount,billRcptInfo.getReceiptDate(),agencyDtl.getAmount());      agencyDtl.getDemand().addCollected(agencyDtl.getAmount());    } else {      final List<EgDemandDetails> penaltyDmtDtails=advertisementDemandService.getDemandDetailByPassingDemandDemandReason(agencyDtl.getDemand(),agencyDtl.getDemandreason());      if (penaltyDmtDtails != null && penaltyDmtDtails.size() > 0) {        penaltyDmtDtails.get(0).setAmount(penaltyDmtDtails.get(0).getAmount().add(agencyDtl.getAmount()));        penaltyDmtDtails.get(0).setAmtCollected(penaltyDmtDtails.get(0).getAmtCollected().add(agencyDtl.getAmount()));        persistCollectedReceipts(penaltyDmtDtails.get(0),billRcptInfo.getReceiptNum(),totalAmount,billRcptInfo.getReceiptDate(),agencyDtl.getAmount());      } else {        final EgDemandDetails demandDetail=advertisementDemandService.createDemandDetails(agencyDtl.getAmount(),agencyDtl.getDemandreason(),agencyDtl.getAmount());        agencyDtl.getDemand().addEgDemandDetails(demandDetail);        agencyDtl.getDemand().addBaseDemand(agencyDtl.getAmount());        agencyDtl.getDemand().addCollected(agencyDtl.getAmount());        getCurrentSession().flush();        persistCollectedReceipts(demandDetail,billRcptInfo.getReceiptNum(),totalAmount,billRcptInfo.getReceiptDate(),agencyDtl.getAmount());      }    }    if (agencyDtl.getDemand() != null)     updateWorkflowState(agencyDtl.getDemand());  }}  }
class C{  private boolean isTagInList(final List<TechnicalProductTag> list,String locale,String value){  Iterator<TechnicalProductTag> iter=list.iterator();  while (iter.hasNext()) {    TechnicalProductTag exTag=iter.next();    if (exTag.getTag().getLocale().equals(locale) && exTag.getTag().getValue().equals(value)) {      return true;    }  }  return false;}  }
class C{  private static Spanned formatPlaceDetails(Resources res,CharSequence name,String id,CharSequence address,CharSequence phoneNumber,Uri websiteUri){  Log.e(TAG,res.getString(R.string.place_details,name,id,address,phoneNumber,websiteUri));  return Html.fromHtml(res.getString(R.string.place_details,name,id,address,phoneNumber,websiteUri));}  }
class C{  public NodeList selectNodeList(Node contextNode,String str) throws TransformerException {  return selectNodeList(contextNode,str,contextNode);}  }
class C{  public void addRtpStreamListener(RtpStreamListener rtpStreamListener){  mRtpStreamListener=rtpStreamListener;}  }
class C{  public static String slurpURLNoExceptions(String path){  try {    return slurpURL(path);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void test_addEdge_correctRejection_002(){  final int CAPACITY=5;  TxDag dag=new TxDag(CAPACITY);  Object tx1="tx1";  try {    dag.addEdge(tx1,tx1);    fail("Expecting exception: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Expected exception: " + ex);  }  try {    dag.addEdge(null,tx1);    fail("Expecting exception: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Expected exception: " + ex);  }  try {    dag.addEdge(tx1,null);    fail("Expecting exception: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Expected exception: " + ex);  }}  }
class C{  public void test_DELETE_accessPath_delete_NothingMatched() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,new URIImpl("http://xmlns.com/foaf/0.1/XXX"));  assertEquals(0,mutationResult);}  }
class C{  public static synchronized void removeFromDisabledList(String classname){  DISABLED.remove(classname);}  }
class C{  public Hex(){  this(0);}  }
class C{  public final LC insets(String top,String left,String bottom,String right){  insets=new UnitValue[]{ConstraintParser.parseUnitValue(top,false),ConstraintParser.parseUnitValue(left,true),ConstraintParser.parseUnitValue(bottom,false),ConstraintParser.parseUnitValue(right,true)};  return this;}  }
class C{  public void push(int value){  this.i++;  if (this.i >= this.N)   throw new InternalError("Cannot push stack!");  this.v[this.i]=value;}  }
class C{  @ObjectiveCName("onDialogsClosed") public void onDialogsClosed(){  modules.getEvents().post(new DialogsClosed());}  }
class C{  public static List<Ignite> allGrids(){  return allGrids(true);}  }
class C{  public IStatus run(IProgressMonitor monitor){  InputStream input=null;  FileOutputStream output=null;  IStatus jobStatus=Status.OK_STATUS;  byte[] b=new byte[1024];  int bytesRead;  try {    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    input=url.openStream();    long totalBytesRead=0L;    int responseStatusCode=connection.getResponseCode();    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format("Remote ServerError: {0} ({1})",responseStatusCode,connection.getResponseMessage()));    }    long contentLength=connection.getContentLength();    output=new FileOutputStream(target);    monitor.beginTask("Downloading " + url.toString(),(int)contentLength);    while (jobStatus == Status.OK_STATUS) {      if (contentLength > 0 && totalBytesRead >= contentLength) {        break;      }      bytesRead=input.read(b);      if (bytesRead == -1) {        break;      }      output.write(b,0,bytesRead);      totalBytesRead+=bytesRead;      monitor.worked(bytesRead);      if (monitor.isCanceled()) {        jobStatus=Status.CANCEL_STATUS;        break;      }    }  } catch (  MalformedURLException e) {    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"Malformed URL: " + url.toExternalForm(),e);  }catch (  IOException e) {    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"IO error while downloading " + url.toExternalForm(),e);  }  closeStreams(input,output);  return jobStatus;}  }
class C{  private boolean isRoutable(){  final Map<Id,Node> visitedNodes=new TreeMap<Id,Node>();  Map<Id,Node> biggestCluster=new TreeMap<Id,Node>();  boolean stillSearching=true;  Iterator<? extends Node> iter=this.network.getNodes().values().iterator();  log.info("  checking " + this.network.getNodes().size() + " nodes and "+ this.network.getLinks().size()+ " links for dead-ends...");  while (iter.hasNext() && stillSearching) {    Node startNode=iter.next();    if (!visitedNodes.containsKey(startNode.getId())) {      Map<Id,Node> cluster=this.findCluster(startNode,this.network);      visitedNodes.putAll(cluster);      if (cluster.size() > biggestCluster.size()) {        biggestCluster=cluster;      }      if (biggestCluster.size() == this.network.getNodes().size()) {        log.info("size of biggest cluster equals network size... continuing with routable network...");        return true;      }      if (biggestCluster.size() >= (this.network.getNodes().size() - visitedNodes.size())) {        log.warn("at least one small cluster found... network is not routable");        stillSearching=false;      }    }  }  for (  Id<Node> nodeId : this.network.getNodes().keySet()) {    if (!biggestCluster.containsKey(nodeId)) {      Node node=this.network.getNodes().get(nodeId);      for (      Link l : node.getOutLinks().values()) {        if (!this.smallClusterLinks.containsKey(l.getId())) {          this.smallClusterLinks.put(l.getId(),l);        }      }    }  }  return false;}  }
class C{  public void testLetterTokenizer() throws Exception {  Reader reader=new StringReader("What's this thing do?");  Tokenizer stream=tokenizerFactory("Letter").create(newAttributeFactory());  stream.setReader(reader);  assertTokenStreamContents(stream,new String[]{"What","s","this","thing","do"});}  }
class C{  public void install(PTQuery query){  install(query,null);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static int invokeI(String signature,boolean isNative,Object caller){  MethodListener i=sMethods.get(signature);  if (i != null) {    return i.onInvokeI(signature,isNative,caller);  } else   if (sDefaultListener != null) {    return sDefaultListener.onInvokeI(signature,isNative,caller);  }  return 0;}  }
class C{  public static void filterLine(InputStream self,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws IOException {  filterLine(newReader(self),writer,predicate);}  }
class C{  public void buildClassifier(Instances data) throws Exception {  if (m_Classifier == null) {    throw new Exception("No base classifiers have been set!");  }  if (!(m_Classifier instanceof Randomizable) && !(m_Filter instanceof Randomizable)) {    throw new Exception("Either the classifier or the filter must implement " + "the Randomizable interface.");  }  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  if (data.numInstances() == 0) {    throw new Exception("Not enough training instances with class labels.");  }  try {    Random r=data.getRandomNumberGenerator(m_Seed);    if (m_Filter instanceof Randomizable) {      ((Randomizable)m_Filter).setSeed(r.nextInt());    }    m_Filter.setInputFormat(data);    data=Filter.useFilter(data,m_Filter);    getClassifier().getCapabilities().testWithFail(data);    m_FilteredInstances=data.stringFreeStructure();    if (m_Classifier instanceof Randomizable) {      ((Randomizable)m_Classifier).setSeed(r.nextInt());    }    m_Classifier.buildClassifier(data);  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  static int bitCount(long lng){  lng=(lng & 0x5555555555555555L) + ((lng >> 1) & 0x5555555555555555L);  lng=(lng & 0x3333333333333333L) + ((lng >> 2) & 0x3333333333333333L);  int i=(int)((lng >>> 32) + lng);  i=(i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F);  i=(i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF);  i=(i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF);  return i;}  }
class C{  public boolean isUIElementHidden(String id){  final Map<String,Boolean> tmpSet=getHiddenUIElements();  return tmpSet.containsKey(id);}  }
class C{  public DataProvider(){  Properties prop=new Properties();  InputStream is=this.getClass().getClassLoader().getResourceAsStream("provider/provider.txt");  if (is == null) {    return;  }  try {    prop.load(is);    is.close();  } catch (  IOException e) {    logger.error(e,e);  }  if (prop.isEmpty()) {    return;  }  data=new HashMap<String,List<TransferContent>>();  for (  Map.Entry<Object,Object> entry : prop.entrySet()) {    File file=new File(entry.getValue().toString());    TransferContent content=new TransferContent();    content.name=file.getName();    content.cacheable=true;    content.data=IO.readFileContent(file.getAbsolutePath());    data.put(entry.getKey().toString(),Arrays.asList(content));  }}  }
class C{  public boolean isClear(){  return objectBeginOffset == size;}  }
class C{  public HomeAwayShareProvider(Context context){  super(context);  mContext=context;}  }
class C{  public void testArrayTypingSimple() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);  ArrayBean bean=new ArrayBean(new String[0]);  String json=m.writeValueAsString(bean);  ArrayBean result=m.readValue(json,ArrayBean.class);  assertNotNull(result.values);  assertEquals(String[].class,result.values.getClass());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int startScan(SiteNode startNode){  return this.startScan(new Target(startNode,true));}  }
class C{  @Override public void addUndoPoint(){  File tempFile;  ObjectOutputStream oos;  if (!isUndoEnabled()) {    return;  }  if (getInstances() != null) {    try {      tempFile=File.createTempFile("arffviewer",null);      tempFile.deleteOnExit();      oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));      oos.writeObject(getInstances());      oos.flush();      oos.close();      m_UndoList.add(tempFile);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isBeforeRange(final Range<T> otherRange){  if (otherRange == null) {    return false;  }  return isBefore(otherRange.minimum);}  }
class C{  public static ThreadFactory daemonThreadFactory(String name){  return new DefaultThreadFactory(name,true);}  }
class C{  public String literal(){  if (literal != null)   return literal;  return super.literal();}  }
class C{  public HtmlButtonRenderer(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String accumHeader=null;  String outputHeader=null;  int row, col, x, y, x2, y2, nx, ny;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double nFlowDir=0;  boolean isOutlet=false;  double maxFlowAccum=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      accumHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (accumHeader == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double streamsNoData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster accum=new WhiteboxRaster(accumHeader,"r");    if (accum.getNumberRows() != rows || accum.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) != 0 && streams.getValue(row,col) != streamsNoData) {          isOutlet=false;          flowDir=pntr.getValue(row,col);          if (flowDir == 0) {            isOutlet=true;          } else {            c=(int)(Math.log(flowDir) / LnOf2);            if (streams.getValue(row + dY[c],col + dX[c]) == 0 || streams.getValue(row + dY[c],col + dX[c]) == streamsNoData) {              isOutlet=true;            }          }          if (isOutlet) {            x=col;            y=row;            flag=true;            do {              output.setValue(y,x,1.0);              maxFlowAccum=0;              nx=0;              ny=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                nFlowDir=pntr.getValue(y2,x2);                if (streams.getValue(y2,x2) > 0 && nFlowDir == inflowingVals[c]) {                  if (accum.getValue(y2,x2) > maxFlowAccum) {                    nx=x2;                    ny=y2;                    maxFlowAccum=accum.getValue(y2,x2);                  }                }              }              if (maxFlowAccum > 0) {                x=nx;                y=ny;              } else {                flag=false;              }            } while (flag);          }        } else         if (streams.getValue(row,col) == streamsNoData) {          output.setValue(row,col,streamsNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isEquals(String actual,String expected){  return ObjectUtils.isEquals(actual,expected);}  }
class C{  public boolean skipToKeyframeBefore(long timeUs){  return rollingBuffer.skipToKeyframeBefore(timeUs);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (documentHandler != null)   documentHandler.endElement(qName);}  }
class C{  public static void printHashmapToConsole(HashMap hm){  for (  Object key : hm.keySet()) {    if (key == null) {      System.out.println("null" + "\t" + hm.get(key));    } else {      System.out.println(key.toString() + "\t" + hm.get(key));    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isIntTblMultCreated(){  boolean isMInt=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.SHORT_INTEGER || type == ArchiveFldType.LONG_INTEGER)         isMInt=true;      }    }  }  return isMInt;}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  PositionableEllipse ps=new PositionableEllipse(ed);  Element elem=element.getChild("size");  ps.setWidth(getInt(elem,"width"));  ps.setHeight(getInt(elem,"height"));  ed.putItem(ps);  loadCommonAttributes(ps,Editor.MARKERS,element);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void info(final String message){  infoLogger.accept(message);}  }
class C{  @Deprecated public boolean isSentToP2SH(){  return isPayToScriptHash();}  }
class C{  private static void addDigest(MessageDigest digest,Annotation ann){  addDigest(digest,ann.annotationType().getName());}  }
class C{  private boolean readHtml5Root(){  if (_reader.eof()) {    return false;  }  char curr=_reader.read();  if (curr == '/') {    _buffer.append(curr);    return true;  } else {    _reader.goBack();    readEnd(ReadEndState.InvalidUrl);  }  return false;}  }
class C{  boolean isSerializable(Type t){  try {    syms.serializableType.complete();  } catch (  CompletionFailure e) {    return false;  }  return types.isSubtype(t,syms.serializableType);}  }
class C{  void resetAppWidget(AppWidgetProviderInfo info){  mInfo=info;  mViewMode=VIEW_MODE_NOINIT;  updateAppWidget(null);}  }
class C{  private void parseExternalsConfig(final Node node,final ConfigSettings config){  String name, value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_SEVENZIP)) {      value=nnode.getChildNodes().item(0).getNodeValue();      value=value.substring(1,value.length() - 1);      config.setConfigParameter(ConfigurationKeys.PATH_PROGRAM_7ZIP,value);    }  }}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.has("metamorphosis")) {    metamorphosis=object.get("metamorphosis");  } else {    metamorphosis=null;  }}  }
class C{  String internalsprintf(final long s) throws IllegalArgumentException {  final String s2;switch (conversionCharacter) {case 'd':case 'i':    if (optionalh) {      s2=printDFormat((short)s);    } else     if (optionall) {      s2=printDFormat(s);    } else {      s2=printDFormat((int)s);    }  break;case 'x':case 'X':if (optionalh) {  s2=printXFormat((short)s);} else if (optionall) {  s2=printXFormat(s);} else {  s2=printXFormat((int)s);}break;case 'o':if (optionalh) {s2=printOFormat((short)s);} else if (optionall) {s2=printOFormat(s);} else {s2=printOFormat((int)s);}break;case 'c':case 'C':s2=printCFormat((char)s);break;default :throw new IllegalArgumentException("Cannot format a long with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  protected static void appendByteType(StringBuilder sb){  sb.append("TINYINT");}  }
class C{  public Builder<T> keys(final Iterable<? extends T> keys){  this.keys=keys;  return this;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer("The independent probability of a class\n--------------------------------------\n");  for (int c=0; c < m_numClasses; c++)   result.append(m_headerInfo.classAttribute().value(c)).append("\t").append(Double.toString(m_probOfClass[c])).append("\n");  result.append("\nThe probability of a word given the class\n-----------------------------------------\n\t");  for (int c=0; c < m_numClasses; c++)   result.append(m_headerInfo.classAttribute().value(c)).append("\t");  result.append("\n");  for (int w=0; w < m_numAttributes; w++) {    if (w != m_headerInfo.classIndex()) {      result.append(m_headerInfo.attribute(w).name()).append("\t");      for (int c=0; c < m_numClasses; c++)       result.append(Double.toString(Math.exp(m_probOfWordGivenClass[c][w]))).append("\t");      result.append("\n");    }  }  return result.toString();}  }
class C{  protected static Vec4 applyOffset(Globe globe,Vec4 point,double metersOffset){  Vec4 normal=globe.computeSurfaceNormalAtPoint(point);  point=Vec4.fromLine3(point,metersOffset,normal);  return point;}  }
class C{  public AndroidCamera(int width,int height,long imageFrameRate){  this.width=width;  this.height=height;  this.imageFrameRate=imageFrameRate;  flag=true;  start=System.currentTimeMillis();  try {    ss=new ServerSocket(6000);  } catch (  IOException e) {    e.printStackTrace();  }  pImage=new PImage(width,height,PImage.RGB);  thread=new Thread(this);}  }
class C{  public void testUnivariateMatchesMultivariateRoute(TransferEntropyCalculatorMultiVariate teCalc,int timeSteps,int k) throws Exception {  if (!(teCalc instanceof TransferEntropyCalculator)) {    throw new Exception("The given calculator does not implement univariate TE");  }  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,1,0,1);  double[][] destData=rg.generateNormalData(timeSteps,1,0,1);  TransferEntropyCalculator teCalcUni=(TransferEntropyCalculator)teCalc;  teCalc.initialise(k,1,1);  teCalcUni.setObservations(MatrixUtils.selectColumn(sourceData,0),MatrixUtils.selectColumn(destData,0));  double teUnivariate=teCalc.computeAverageLocalOfObservations();  teCalc.initialise(k,1,1);  teCalc.setObservations(sourceData,destData);  double teMultivariate=teCalc.computeAverageLocalOfObservations();  assertEquals(teUnivariate,teMultivariate,0.00001);}  }
class C{  @Override public byte[] lpop(final byte[] key){  checkIsInMultiOrPipeline();  client.lpop(key);  return client.getBinaryBulkReply();}  }
class C{  public static boolean isErrorDescription_XTEND_MVN_BUG_HACK(final IEObjectDescription eObjectDescription){  return IEObjectDescriptionWithError.isErrorDescription(eObjectDescription);}  }
class C{  public static void convertToLegacyCigar(SAMRecord record){  record.setCigar(convertToLegacyCigar(record.getCigar()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.720 -0500",hash_original_method="4C234501C46CBF19AFF354B62202B78D",hash_generated_method="CD0E8E2F59AC2669FD1A64098554D833") public List<Cookie> parse(final Header header,final CookieOrigin origin) throws MalformedCookieException {  if (header == null) {    throw new IllegalArgumentException("Header may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  NetscapeDraftHeaderParser parser=NetscapeDraftHeaderParser.DEFAULT;  CharArrayBuffer buffer;  ParserCursor cursor;  if (header instanceof FormattedHeader) {    buffer=((FormattedHeader)header).getBuffer();    cursor=new ParserCursor(((FormattedHeader)header).getValuePos(),buffer.length());  } else {    String s=header.getValue();    if (s == null) {      throw new MalformedCookieException("Header value is null");    }    buffer=new CharArrayBuffer(s.length());    buffer.append(s);    cursor=new ParserCursor(0,buffer.length());  }  return parse(new HeaderElement[]{parser.parseHeader(buffer,cursor)},origin);}  }
class C{  private void testStringReverse(SortField.Type sortType) throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  Type type=sortType == SortField.Type.STRING ? Type.SORTED : Type.BINARY;  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",type));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",sortType,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("foo",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("bar",searcher.doc(td.scoreDocs[1].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private String resolveScoreField(IBindingSet bs){  String scoreFieldStr=resolveAsString(scoreField,bs);  if (scoreFieldStr == null || scoreFieldStr.isEmpty()) {    scoreFieldStr=defaults.getDefaultScoreField();  }  return scoreFieldStr == null || scoreFieldStr.isEmpty() ? FTS.Options.DEFAULT_SCORE_FIELD : scoreFieldStr;}  }
class C{  private static int operatorNameToNodeSubtype(UniqueString opId){  String opName=opId.toString();  if ((opId == ASTConstants.OP_cl) || opName.equals("\\land")) {    return NodeRepresentation.AND_TYPE;  } else   if ((opId == ASTConstants.OP_dl) || opName.equals("\\lor")) {    return NodeRepresentation.OR_TYPE;  } else   if (opName.equals("=>")) {    return NodeRepresentation.IMPLIES_TYPE;  } else   if ((opId == ASTConstants.OP_bf) || (opId == ASTConstants.OP_uf)) {    return NodeRepresentation.FORALL_TYPE;  } else   if ((opId == ASTConstants.OP_be) || (opId == ASTConstants.OP_ue)) {    return NodeRepresentation.EXISTS_TYPE;  } else   if (opId == ASTConstants.OP_sa) {    return NodeRepresentation.SQSUB_TYPE;  } else {    return NodeRepresentation.OTHER_TYPE;  }}  }
class C{  public Interval(float begin,float end,InstanceTime beginInstanceTime,InstanceTime endInstanceTime){  this.begin=begin;  this.end=end;  this.beginInstanceTime=beginInstanceTime;  this.endInstanceTime=endInstanceTime;}  }
class C{  private int peekType(boolean inDeclaration) throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    return END_DOCUMENT;  }switch (buffer[position]) {case '&':    return ENTITY_REF;case '<':  if (position + 3 >= limit && !fillBuffer(4)) {    throw new XmlPullParserException("Dangling <",this,null);  }switch (buffer[position + 1]) {case '/':  return END_TAG;case '?':if ((position + 5 < limit || fillBuffer(6)) && (buffer[position + 2] == 'x' || buffer[position + 2] == 'X') && (buffer[position + 3] == 'm' || buffer[position + 3] == 'M')&& (buffer[position + 4] == 'l' || buffer[position + 4] == 'L')&& (buffer[position + 5] == ' ')) {  return XML_DECLARATION;} else {  return PROCESSING_INSTRUCTION;}case '!':switch (buffer[position + 2]) {case 'D':return DOCDECL;case '[':return CDSECT;case '-':return COMMENT;case 'E':switch (buffer[position + 3]) {case 'L':return ELEMENTDECL;case 'N':return ENTITYDECL;}break;case 'A':return ATTLISTDECL;case 'N':return NOTATIONDECL;}throw new XmlPullParserException("Unexpected <!",this,null);default :return START_TAG;}case '%':return inDeclaration ? PARAMETER_ENTITY_REF : TEXT;default :return TEXT;}}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  return internalIn.read(cbuf,off,len);}  }
class C{  protected IllegalBinaryStateDialog(final IllegalBinaryStateException cause,final String title,final String message){  super(UIUtils.getShell(),title,null,message,ERROR,BUTTON_LABELS,0);  this.cause=cause;}  }
class C{  public MaterialEditText cleanIcon(int resId){  mCleanIconId=resId;  mCleanIcon.setImageResource(mCleanIconId);  return this;}  }
class C{  private void calculateDataSets(){  calculateDataSets(statComboBox.getSelectedItem());}  }
class C{  public ProjectionStack(){}  }
class C{  public static String extractServerUrl(String urlString){  try {    URL url=new URL(urlString);    String result=url.getProtocol() + "://" + url.getHost();    if (url.getPort() != -1) {      result+=":" + url.getPort();    }    return result;  } catch (  MalformedURLException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ycxy2");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static synchronized ComponentUI createUI(JComponent tooltip){  if (instance == null) {    instance=new StyledToolTipUI(StyleUtil.getStyle());  }  return instance;}  }
class C{  public Key(Resources res,Row parent,int x,int y,XmlResourceParser parser){  this(parent);  this.x=x;  this.y=y;  TypedArray a=res.obtainAttributes(Xml.asAttributeSet(parser),R.styleable.Keyboard);  realWidth=getDimensionOrFraction(a,R.styleable.Keyboard_keyWidth,keyboard.mDisplayWidth,parent.defaultWidth);  float realHeight=getDimensionOrFraction(a,R.styleable.Keyboard_keyHeight,keyboard.mDisplayHeight,parent.defaultHeight);  realHeight-=parent.parent.mVerticalPad;  height=Math.round(realHeight);  this.y+=parent.parent.mVerticalPad / 2;  realGap=getDimensionOrFraction(a,R.styleable.Keyboard_horizontalGap,keyboard.mDisplayWidth,parent.defaultHorizontalGap);  realGap+=parent.parent.mHorizontalPad;  realWidth-=parent.parent.mHorizontalPad;  width=Math.round(realWidth);  gap=Math.round(realGap);  a.recycle();  a=res.obtainAttributes(Xml.asAttributeSet(parser),R.styleable.Keyboard_Key);  this.realX=this.x + realGap - parent.parent.mHorizontalPad / 2;  this.x=Math.round(this.realX);  TypedValue codesValue=new TypedValue();  a.getValue(R.styleable.Keyboard_Key_codes,codesValue);  if (codesValue.type == TypedValue.TYPE_INT_DEC || codesValue.type == TypedValue.TYPE_INT_HEX) {    codes=new int[]{codesValue.data};  } else   if (codesValue.type == TypedValue.TYPE_STRING) {    codes=parseCSV(codesValue.string.toString());  }  iconPreview=a.getDrawable(R.styleable.Keyboard_Key_iconPreview);  if (iconPreview != null) {    iconPreview.setBounds(0,0,iconPreview.getIntrinsicWidth(),iconPreview.getIntrinsicHeight());  }  popupCharacters=a.getText(R.styleable.Keyboard_Key_popupCharacters);  popupResId=a.getResourceId(R.styleable.Keyboard_Key_popupKeyboard,0);  repeatable=a.getBoolean(R.styleable.Keyboard_Key_isRepeatable,false);  modifier=a.getBoolean(R.styleable.Keyboard_Key_isModifier,false);  sticky=a.getBoolean(R.styleable.Keyboard_Key_isSticky,false);  isCursor=a.getBoolean(R.styleable.Keyboard_Key_isCursor,false);  icon=a.getDrawable(R.styleable.Keyboard_Key_keyIcon);  if (icon != null) {    icon.setBounds(0,0,icon.getIntrinsicWidth(),icon.getIntrinsicHeight());  }  label=a.getText(R.styleable.Keyboard_Key_keyLabel);  shiftLabel=a.getText(R.styleable.Keyboard_Key_shiftLabel);  if (shiftLabel != null && shiftLabel.length() == 0)   shiftLabel=null;  capsLabel=a.getText(R.styleable.Keyboard_Key_capsLabel);  if (capsLabel != null && capsLabel.length() == 0)   capsLabel=null;  text=a.getText(R.styleable.Keyboard_Key_keyOutputText);  if (codes == null && !TextUtils.isEmpty(label)) {    codes=getFromString(label);    if (codes != null && codes.length == 1) {      final Locale locale=LatinIME.sKeyboardSettings.inputLocale;      String upperLabel=label.toString().toUpperCase(locale);      if (shiftLabel == null) {        if (!upperLabel.equals(label.toString()) && upperLabel.length() == 1) {          shiftLabel=upperLabel;          isSimpleUppercase=true;        }      } else {        if (capsLabel != null) {          isDistinctUppercase=true;        } else         if (upperLabel.equals(shiftLabel.toString())) {          isSimpleUppercase=true;        } else         if (upperLabel.length() == 1) {          capsLabel=upperLabel;          isDistinctUppercase=true;        }      }    }    if ((LatinIME.sKeyboardSettings.popupKeyboardFlags & POPUP_DISABLE) != 0) {      popupCharacters=null;      popupResId=0;    }    if ((LatinIME.sKeyboardSettings.popupKeyboardFlags & POPUP_AUTOREPEAT) != 0) {      repeatable=true;    }  }  a.recycle();}  }
class C{  protected int processIt(boolean reverse){  log.fine("Reverse=" + reverse + " - "+ toString());  int C_Invoice_ID=getC_Invoice_ID();  MInvoice invoice=getInvoice();  if (invoice != null && getC_BPartner_ID() != invoice.getC_BPartner_ID())   setC_BPartner_ID(invoice.getC_BPartner_ID());  int C_Payment_ID=getC_Payment_ID();  int C_CashLine_ID=getC_CashLine_ID();  if (C_Payment_ID != 0) {    MPayment payment=new MPayment(getCtx(),C_Payment_ID,get_TrxName());    if (getC_BPartner_ID() != payment.getC_BPartner_ID())     log.warning("C_BPartner_ID different - Invoice=" + getC_BPartner_ID() + " - Payment="+ payment.getC_BPartner_ID());    if (reverse) {      if (!payment.isCashTrx()) {        payment.setIsAllocated(false);        payment.saveEx();      }    } else {      if (payment.testAllocation())       payment.saveEx();    }  }  if (C_Payment_ID != 0 && invoice != null) {    if (reverse) {      invoice.setC_Payment_ID(0);      log.fine("C_Payment_ID=" + C_Payment_ID + " Unlinked from C_Invoice_ID="+ C_Invoice_ID);    } else     if (invoice.isPaid()) {      invoice.setC_Payment_ID(C_Payment_ID);      log.fine("C_Payment_ID=" + C_Payment_ID + " Linked to C_Invoice_ID="+ C_Invoice_ID);    }    String update="UPDATE C_Order o " + "SET C_Payment_ID=" + (reverse ? "NULL " : "(SELECT C_Payment_ID FROM C_Invoice WHERE C_Invoice_ID=" + C_Invoice_ID + ") ") + "WHERE o.C_Order_ID = (SELECT i.C_Order_ID FROM C_Invoice i "+ "WHERE i.C_Invoice_ID="+ C_Invoice_ID+ ")";    if (DB.executeUpdate(update,get_TrxName()) > 0)     log.fine("C_Payment_ID=" + C_Payment_ID + (reverse ? " UnLinked from" : " Linked to")+ " order of C_Invoice_ID="+ C_Invoice_ID);  }  if (C_CashLine_ID != 0 && invoice != null) {    if (reverse) {      invoice.setC_CashLine_ID(0);      log.fine("C_CashLine_ID=" + C_CashLine_ID + " Unlinked from C_Invoice_ID="+ C_Invoice_ID);    } else {      invoice.setC_CashLine_ID(C_CashLine_ID);      log.fine("C_CashLine_ID=" + C_CashLine_ID + " Linked to C_Invoice_ID="+ C_Invoice_ID);    }    String update="UPDATE C_Order o " + "SET C_CashLine_ID=" + (reverse ? "NULL " : "(SELECT C_CashLine_ID FROM C_Invoice WHERE C_Invoice_ID=" + C_Invoice_ID + ") ") + "WHERE o.C_Order_ID = (SELECT i.C_Order_ID FROM C_Invoice i "+ "WHERE i.C_Invoice_ID="+ C_Invoice_ID+ ")";    if (DB.executeUpdate(update,get_TrxName()) > 0)     log.fine("C_CashLine_ID=" + C_CashLine_ID + (reverse ? " UnLinked from" : " Linked to")+ " order of C_Invoice_ID="+ C_Invoice_ID);  }  if (invoice != null) {    if (invoice.testAllocation() && !invoice.save())     log.log(Level.SEVERE,"Invoice not updated - " + invoice);  }  return getC_BPartner_ID();}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public void removeAllLineHighlights(){  if (lineHighlights != null) {    lineHighlights.clear();    textArea.repaint();  }}  }
class C{  public String globalInfo(){  return "Tells a sub-ResultProducer to reproduce the current run for " + "varying sized subsamples of the dataset. Normally used with " + "an AveragingResultProducer and CrossValidationResultProducer "+ "combo to generate learning curve results. For non-numeric "+ "result fields, the first value is used.";}  }
class C{  public static String lookupMimeType(String ext){  return mimeTypeMapping.get(ext.toLowerCase());}  }
class C{  public T caseAnonymous_afterCode_2_(Anonymous_afterCode_2_ object){  return null;}  }
class C{  public static int findURISplitIndex(String uri){  int uriLength=uri.length();  int i=uriLength - 1;  while (i >= 0) {    char c=uri.charAt(i);    if (c == '#' || c == '/' || !XMLUtil.isNCNameChar(c)) {      break;    }    i--;  }  i++;  while (i < uriLength) {    char c=uri.charAt(i);    if (c == '_' || XMLUtil.isLetter(c)) {      break;    }    i++;  }  if (i == uriLength) {    i=-1;  }  return i;}  }
class C{  public void write(int value,BitWriter bitwriter) throws JSONException {  this.width=0;  write(this.symbols[value],bitwriter);  tick(value);  if (JSONzip.probe) {    JSONzip.logchar(value,this.width);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.874 -0400",hash_original_method="B64EF0C9C53C2B8E1037A43848D2E008",hash_generated_method="DBCE7A953E02A2949C6911887A619ADA") public static IOFileFilter or(IOFileFilter... filters){  return new OrFileFilter(toList(filters));}  }
class C{  public void java_security_AccessController_getInheritedAccessControlContext(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastObject());}  }
class C{  public void testAddPackage1(){  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  utAddPackage(true,true);  mAppIdValue+=10;  utAddPackage(true,false);  mContentTypeValue+=20;  utAddPackage(false,true);  mContentTypeValue+=20;  utAddPackage(false,false);  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  try {    IWapPushManager iwapman=getInterface();    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    mAppIdValue+=10;    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    mContentTypeValue+=20;    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    mContentTypeValue+=20;    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;}  }
class C{  boolean isSuspended(){  return cache != null;}  }
class C{  public boolean hasSystemID(){  return getSiteID() != null;}  }
class C{  public static boolean comparable(IOObject ioobject1,IOObject ioobject2){  return ASSERTER_REGISTRY.getAsserterForObjects(ioobject1,ioobject2) != null;}  }
class C{  public FacesConfigOrderingTestCase(String name){  super(name);}  }
class C{  protected final void updateTime(){  m_currentTimeFrameStartTime+=m_framingFlow.getDuration();}  }
class C{  public static void init(final AsyncContext context){  final SecurityContext security=(SecurityContext)context.getAttribute(AsyncContext.SECURITY_CTX);  final boolean forceSetSecurity=forceSetSecurityContext(context);  if (forceSetSecurity) {    SecurityContextHolder.setContext(security);  }  ctx.set(context);}  }
class C{  public void info(String message,Object... args){  logger.info(message,args);}  }
class C{  public static void main(String[] args){  int[] values={5,6,7,8,9};  System.out.println("\nTest if values are even using isEven(int):");  for (int i=0; i < values.length; i++) {    System.out.println(values[i] + " " + MyInteger.isEven(values[i]));  }  System.out.println("\nTest if values are odd using isOdd(int):");  for (int i=0; i < values.length; i++) {    System.out.println(values[i] + " " + MyInteger.isOdd(values[i]));  }  System.out.println("\nTest if values are prime using isPrime(int):");  for (int i=0; i < values.length; i++) {    System.out.println(values[i] + " " + MyInteger.isPrime(values[i]));  }  System.out.println("\nTest if values are even using isEven():");  for (int i=0; i < values.length; i++) {    MyInteger value=new MyInteger(values[i]);    System.out.println(value.getValue() + " " + value.isEven());  }  System.out.println("\nTest if values are odd using isOdd():");  for (int i=0; i < values.length; i++) {    MyInteger value=new MyInteger(values[i]);    System.out.println(value.getValue() + " " + value.isOdd());  }  System.out.println("\nTest if values are prime using isPrime():");  for (int i=0; i < values.length; i++) {    MyInteger value=new MyInteger(values[i]);    System.out.println(value.getValue() + " " + value.isPrime());  }  System.out.println("\nTest if values are even using isEven(MyInteger):");  for (int i=0; i < values.length; i++) {    MyInteger value=new MyInteger(values[i]);    System.out.println(value.getValue() + " " + MyInteger.isEven(value));  }  System.out.println("\nTest if values are odd using isOdd(MyInteger):");  for (int i=0; i < values.length; i++) {    MyInteger value=new MyInteger(values[i]);    System.out.println(value.getValue() + " " + MyInteger.isOdd(value));  }  System.out.println("\nTest if values are prime using isPrime(MyInteger):");  for (int i=0; i < values.length; i++) {    MyInteger value=new MyInteger(values[i]);    System.out.println(value.getValue() + " " + MyInteger.isPrime(value));  }  int[] values2={5,9,7};  MyInteger value=new MyInteger(9);  System.out.println("\nTest if " + value.getValue() + " is equal to the specified value:");  for (int i=0; i < values2.length; i++) {    System.out.println(values2[i] + " " + value.equals(values2[i]));  }  System.out.println("\nTest if " + value.getValue() + " is equal to the specified value:");  for (int i=0; i < values2.length; i++) {    MyInteger myInteger=new MyInteger(values2[i]);    System.out.println(values2[i] + " " + value.equals(myInteger));  }  System.out.println("\nTest parseInt(char[]) and parseInt(String):");  char[] numericCharacters={'3','4','2'};  String numericString="658";  System.out.print("\'");  for (int i=0; i < numericCharacters.length; i++) {    System.out.print(numericCharacters[i] + "");  }  System.out.println("\' + \"" + numericString + "\" = "+ (MyInteger.parseInt(numericCharacters) + MyInteger.parseInt(numericString)));}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  public static byte[] base32Decode(String base32Data){  Base32 decoder=new Base32();  return decoder.decode(base32Data);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:56.158 -0500",hash_original_method="98A9E577A59DEA03C0EE49B7902CB339",hash_generated_method="449091B95622964E3D2E68F571DEC758") public InvalidityDate(byte[] encoding) throws IOException {  super(encoding);  date=(Date)ASN1.decode(encoding);}  }
class C{  private static void collectAllAnonymous(List<IType> list,IParent parent,boolean allowNested) throws JavaModelException {  IJavaElement[] children=parent.getChildren();  for (int i=0; i < children.length; i++) {    IJavaElement childElem=children[i];    if (isAnonymousType(childElem)) {      list.add((IType)childElem);    }    if (childElem instanceof IParent) {      if (allowNested || !(childElem instanceof IType)) {        collectAllAnonymous(list,(IParent)childElem,allowNested);      }    }  }}  }
class C{  @LogMessageDoc(level="ERROR",message="No listener dependency solution: " + "No listeners without incoming dependencies",explanation="The set of listeners installed " + "have dependencies with no solution",recommendation="Install a different set of listeners " + "or install all dependencies.  This is a defect in " + "the controller installation.") public void addListener(U type,T listener){  List<T> newlisteners=new ArrayList<T>();  if (listeners != null)   newlisteners.addAll(listeners);  newlisteners.add(listener);  List<T> terminals=new ArrayList<T>();  for (  T i : newlisteners) {    boolean isterm=true;    for (    T j : newlisteners) {      if (ispre(type,i,j)) {        isterm=false;        break;      }    }    if (isterm) {      terminals.add(i);    }  }  if (terminals.size() == 0) {    logger.error("No listener dependency solution: " + "No listeners without incoming dependencies");    listeners=newlisteners;    return;  }  HashSet<T> visited=new HashSet<T>();  List<T> ordering=new ArrayList<T>();  for (  T term : terminals) {    visit(newlisteners,type,visited,ordering,term);  }  listeners=ordering;}  }
class C{  @Override public <T>T execute(String expression,Map<String,Object> state,Class<T> clazz){  Object resultObject=execute(expression,state);  T result=ConversionUtils.convert(resultObject,clazz);  if (result == null) {    throw new IllegalArgumentException(String.format("Unexpected type: expected=%s, actual=%s, expression=%s",clazz.getSimpleName(),resultObject.getClass().getSimpleName(),expression));  }  return result;}  }
class C{  public boolean isQuestion(){  return typeString.startsWith(QUESTION);}  }
class C{  public static void registerConfig(){  Config.registerSelf(DummyCommandProcessor.class);}  }
class C{  @Override public void resize(int width,int height){  super.resize(width,height);  fieldCamera.resize(width,height);  double s=fieldCamera.getCamera().getPixelSizeAt(crosshair.getWorldTranslation(),true);  crosshair.setScale(s,s,s);  spatialDirty(null,DirtyType.RenderState);}  }
class C{  public RegionClearedException(){  super();}  }
class C{  public void render(GL2 gl){  gl.glPushMatrix();  gl.glTranslated(this.transform.getTranslationX(),this.transform.getTranslationY(),0.0);  gl.glRotated(Math.toDegrees(this.transform.getRotation()),0.0,0.0,1.0);  for (  BodyFixture fixture : this.fixtures) {    Convex convex=fixture.getShape();    if (convex instanceof Polygon) {      Polygon p=(Polygon)convex;      gl.glColor4fv(this.color,0);      gl.glBegin(GL2.GL_POLYGON);      for (      Vector2 v : p.getVertices()) {        gl.glVertex3d(v.x,v.y,0.0);      }      gl.glEnd();      gl.glColor4f(this.color[0] * 0.8f,this.color[1] * 0.8f,this.color[2] * 0.8f,1.0f);      gl.glBegin(GL.GL_LINE_LOOP);      for (      Vector2 v : p.getVertices()) {        gl.glVertex3d(v.x,v.y,0.0);      }      gl.glEnd();    }  }  gl.glPopMatrix();}  }
class C{  public static final double[] toDoubleArray(String s){  s=new String(s.trim());  return toDoubleArray((s.substring(1,s.length() - 1)).split(","));}  }
class C{  @Override public void onEvent(StatusUpdateEvent event,long sequence,boolean endOfBatch) throws Exception {  TaskStatus status=event.getStatus();  this.schedulerState.updateTask(status);  TaskID taskId=status.getTaskId();  NodeTask task=schedulerState.getTask(taskId);  if (task == null) {    LOGGER.warn("Task: {} not found, status: {}",taskId.getValue(),status.getState());    schedulerState.removeTask(taskId);    return;  }  LOGGER.info("Status Update for task: {} | state: {}",taskId.getValue(),status.getState());  TaskState state=status.getState();switch (state) {case TASK_STAGING:    schedulerState.makeTaskStaging(taskId);  break;case TASK_STARTING:schedulerState.makeTaskStaging(taskId);break;case TASK_RUNNING:schedulerState.makeTaskActive(taskId);break;case TASK_FINISHED:cleanupTask(taskId,task,"finished");break;case TASK_FAILED:cleanupFailedTask(taskId,task,"failed");break;case TASK_KILLED:cleanupTask(taskId,task,"killed");break;case TASK_LOST:cleanupFailedTask(taskId,task,"lost");break;default :LOGGER.error("Invalid state: {}",state);break;}}  }
class C{  public static List<Integer> buildAddressN(URI identityUri,int index){  byte[] leIndex=LittleEndianConversions.I2OSP(index);  byte[] identityUriBytes=identityUri.toASCIIString().getBytes(Charsets.UTF_8);  byte[] canonicalBytes=ByteUtils.concatenate(leIndex,identityUriBytes);  byte[] sha256CanonicalBytes=Sha256Hash.hash(canonicalBytes);  byte[] truncatedSha256CanonicalBytes=ByteUtils.subArray(sha256CanonicalBytes,0,16);  int[] abcdBytes=LittleEndianConversions.toIntArray(truncatedSha256CanonicalBytes);  return Lists.newArrayList(13 | ChildNumber.HARDENED_BIT,abcdBytes[0] | ChildNumber.HARDENED_BIT,abcdBytes[1] | ChildNumber.HARDENED_BIT,abcdBytes[2] | ChildNumber.HARDENED_BIT,abcdBytes[3] | ChildNumber.HARDENED_BIT);}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("eslighttestdata.zip"),"eslight.txt");}  }
class C{  protected long recommendHeapSize(){  final double factor=1.2 * heap.getHeapMemoryUsage().getMax() / getUsage(old,false).getMax();  final long neededOld=getUsage(old,true).getUsed() + getUsage(survivor,false).getMax();  return (long)(neededOld * factor);}  }
class C{  public StringField(String name,BytesRef value,Store stored){  super(name,value,stored == Store.YES ? TYPE_STORED : TYPE_NOT_STORED);}  }
class C{  public void readNBT(NBTTagCompound nbt){  if (nbt.hasKey("decayLevel",99)) {    this.decayLevel=nbt.getInteger("decayLevel");    this.decaySaturationLevel=nbt.getFloat("decaySaturationLevel");    this.decayAccelerationLevel=nbt.getFloat("decayExhaustionLevel");  }}  }
class C{  @Override public DriverTask deleteVolumeClone(VolumeClone clone){  return cloneHelper.deleteVolumeClone(clone);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (!generatableEvent(eventName)) {    return false;  }  if (eventName.compareTo("graph") == 0) {    if (!(m_ClassifierTemplate instanceof weka.core.Drawable)) {      return false;    }    if (!m_listenees.containsKey("trainingSet")) {      return false;    }    Object source=m_listenees.get("trainingSet");    if (source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("trainingSet")) {        return false;      }    }  }  if (eventName.compareTo("batchClassifier") == 0) {    if (!m_listenees.containsKey("testSet") && !m_listenees.containsKey("trainingSet")) {      return false;    }    Object source=m_listenees.get("testSet");    if (source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("testSet")) {        return false;      }    }  }  if (eventName.compareTo("text") == 0) {    if (!m_listenees.containsKey("trainingSet") && !m_listenees.containsKey("instance")) {      return false;    }    Object source=m_listenees.get("trainingSet");    if (source != null && source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("trainingSet")) {        return false;      }    }    source=m_listenees.get("instance");    if (source != null && source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("instance")) {        return false;      }    }  }  if (eventName.compareTo("incrementalClassifier") == 0) {    if (!m_listenees.containsKey("instance")) {      return false;    }    Object source=m_listenees.get("instance");    if (source instanceof EventConstraints) {      if (!((EventConstraints)source).eventGeneratable("instance")) {        return false;      }    }  }  if (eventName.equals("configuration") && m_Classifier == null) {    return false;  }  return true;}  }
class C{  private void sync(){  int s=state;  if ((s & RELOAD_IMAGE_FLAG) != 0) {    refreshImage();  }  s=state;  if ((s & RELOAD_FLAG) != 0) {synchronized (this) {      state=(state | RELOAD_FLAG) ^ RELOAD_FLAG;    }    setPropertiesFromAttributes();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.932 -0500",hash_original_method="5678F2B610228E0CE45D092607B03827",hash_generated_method="7B2C35C921BBD0175CC55FEA5D981832") private static String isimTlvToString(byte[] record){  SimTlv tlv=new SimTlv(record,0,record.length);  do {    if (tlv.getTag() == TAG_ISIM_VALUE) {      return new String(tlv.getData(),Charset.forName("UTF-8"));    }  } while (tlv.nextObject());  Log.e(LOG_TAG,"[ISIM] can't find TLV tag in ISIM record, returning null");  return null;}  }
class C{  TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){  this.typeUtils=typeUtils;  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);  if (base != null) {    typesPlusBase.add(base);  }  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);  this.imports=findImports(typeUtils,packageName,referenced,defined);}  }
class C{  public static <W extends BoundedWindow>StateSpec<Object,WatermarkHoldState<W>> watermarkStateInternal(OutputTimeFn<? super W> outputTimeFn){  return new WatermarkStateSpecInternal<W>(outputTimeFn);}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  public JavaModelStatus(int code,String string){  this(ERROR,code,string);}  }
class C{  @Override public void requestThrottleSetup(LocoAddress address,boolean control){  XNetThrottle throttle;  if (log.isDebugEnabled()) {    log.debug("Requesting Throttle: " + address);  }  if (throttles.containsKey(address)) {    notifyThrottleKnown(throttles.get(address),address);  } else {    throttle=new XNetThrottle((XNetSystemConnectionMemo)adapterMemo,address,tc);    throttles.put(address,throttle);    notifyThrottleKnown(throttle,address);  }}  }
class C{  private boolean checkVNXBlockPolicyNames(Map<String,Object> attributeMap){  String autoTierPolicyName=attributeMap.get(Attributes.auto_tiering_policy_name.toString()).toString();  _logger.info("Policy Name : {}",autoTierPolicyName);  if (AutoTieringPolicy.VnxFastPolicy.DEFAULT_NO_MOVEMENT.toString().equalsIgnoreCase(autoTierPolicyName) || AutoTieringPolicy.VnxFastPolicy.DEFAULT_AUTOTIER.toString().equalsIgnoreCase(autoTierPolicyName) || AutoTieringPolicy.VnxFastPolicy.DEFAULT_HIGHEST_AVAILABLE.toString().equalsIgnoreCase(autoTierPolicyName)|| AutoTieringPolicy.VnxFastPolicy.DEFAULT_LOWEST_AVAILABLE.toString().equalsIgnoreCase(autoTierPolicyName)|| AutoTieringPolicy.VnxFastPolicy.DEFAULT_START_HIGH_THEN_AUTOTIER.toString().equalsIgnoreCase(autoTierPolicyName)) {    return true;  }  return false;}  }
class C{  protected void addToTimePref(HttpServletRequest request,PreferenceGroup owner,String tpat,Set prefs,int idx,boolean timeVertical,Set parentTimePrefs) throws Exception {  TimePatternDAO timePatternDao=new TimePatternDAO();  TimePattern timePattern=(tpat.equals("-1") ? null : timePatternDao.get(new Long(tpat)));  boolean canUseHardTimePrefs=sessionContext.hasPermission(owner,Right.CanUseHardTimePrefs);  RequiredTimeTable rtt=(timePattern == null ? TimePattern.getDefaultRequiredTimeTable() : timePattern.getRequiredTimeTable(canUseHardTimePrefs));  rtt.getModel().setDefaultSelection(RequiredTimeTable.getTimeGridSize(sessionContext.getUser()));  rtt.setName("p" + idx);  rtt.update(request);  TimePref tp=new TimePref();  tp.setOwner(owner);  tp.setPreference(rtt.getModel().getPreferences());  tp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sRequired));  tp.setTimePattern(timePattern);  TimePref sameParentTimePref=null;  if (parentTimePrefs != null && !parentTimePrefs.isEmpty()) {    for (Iterator i=parentTimePrefs.iterator(); i.hasNext(); ) {      TimePref parentTimePref=(TimePref)i.next();      if (parentTimePref.isSame(tp)) {        if (parentTimePref.getPreference().equals(tp.getPreference()) && parentTimePref.getPrefLevel().equals(tp.getPrefLevel()))         sameParentTimePref=parentTimePref;        i.remove();        break;      }    }  }  if (sameParentTimePref == null)   prefs.add(tp);}  }
class C{  @Override public void updateClob(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String repeat(final String rep,final int n){  final StringBuilder sb=new StringBuilder();  for (int i=0; i < n; i++) {    sb.append(rep);  }  return sb.toString();}  }
class C{  protected XMLDTDValidator createDTDValidator(){  return new XMLNSDTDValidator();}  }
class C{  private boolean checkIfContextSupportsExtension(GL10 gl,String extension){  String extensions=" " + gl.glGetString(GL10.GL_EXTENSIONS) + " ";  return extensions.indexOf(" " + extension + " ") >= 0;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.406 -0500",hash_original_method="AC456BDE0EE43978AFAB7EF96C2FFCE8",hash_generated_method="71C955E2605880817A43E46E9C624B08") @Override public void put(String name,double value){  emulatedFields.put(name,value);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.355 -0500",hash_original_method="EB1ABBA9A1AC428A5376D92D0ECDDD75",hash_generated_method="B08B3A0DADC6C8E514CD9EA0934E24A9") public Matcher useTransparentBounds(boolean value){  transparentBounds=value;  useTransparentBoundsImpl(address,value);  return this;}  }
class C{  public char charAt(int offset) throws BadLocationException {  return ((RGapContent)getContent()).charAt(offset);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Vertex fetchDescription(JSONObject json,int cascade,Network network,Map<String,Vertex> processed){  if (json.isNullObject()) {    return null;  }  Object id=json.get("id");  Vertex object=processed.get(id);  if (object != null) {    return object;  }  JSONObject properties=(JSONObject)json.get("property");  if (properties == null) {    return null;  }  List names=extractPropertyValues(properties.get("/type/object/name"),Collections.EMPTY_LIST,cascade,network,processed);  Object name=null;  if (names.size() > 0) {    name=names.get(0);  }  List descriptions=extractPropertyValues(properties.get("/common/topic/description"),Collections.EMPTY_LIST,cascade,network,processed);  log("Processing object:",Bot.FINE,id,names);  try {    if ((name instanceof String) && (((String)name).length() > 0)) {      object=network.createObject((String)name);      if (object.hasRelationship(getPrimitive())) {        return object;      }      object.addRelationship(getPrimitive(),network.createVertex(id));      processed.put((String)id,object);      object.addRelationship(Primitive.INSTANTIATION,Primitive.THING);      for (      Object eachName : names) {        if (eachName instanceof String) {          Vertex word=network.createWord((String)eachName);          word.addRelationship(Primitive.MEANING,object);          object.addRelationship(Primitive.WORD,word);          network.associateCaseInsensitivity((String)eachName,object);        }      }      for (      Object description : descriptions) {        if (description instanceof String) {          Vertex paragraph=network.createParagraph((String)description);          if (paragraph.instanceOf(Primitive.PARAGRAPH)) {            object.addRelationship(Primitive.PARAGRAPH,paragraph);            Vertex sentence=paragraph.orderedRelations(Primitive.SENTENCE).get(0);            object.addRelationship(Primitive.SENTENCE,sentence);          } else {            object.addRelationship(Primitive.SENTENCE,paragraph);          }        }      }    } else {      object=network.createVertex();    }    network.save();  } catch (  Exception ioException) {    log(ioException);  }  return object;}  }
class C{  public static Paint parseColorFromProperties(Properties p,String propName,Paint dfault){  return ColorFactory.parseColorFromProperties(p,propName,dfault);}  }
class C{  public long keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  private static void checkEqualIntArray(int[] arr1,int[] arr2){  assertEquals(arr1.length,arr2.length);  Collection<Integer> col1=new HashSet<>();  for (  int anArr1 : arr1)   col1.add(anArr1);  for (  int anArr2 : arr2) {    assertTrue(col1.contains(anArr2));    col1.remove(anArr2);  }  assertEquals(0,col1.size());}  }
class C{  public static PropertyValueExpression property(String propertyName){  return getPropExpr(propertyName);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void checkConnectivity(State state) throws StopRequest {switch (mService.getNetworkAvailabilityState(mDB)) {case DownloaderService.NETWORK_OK:    return;case DownloaderService.NETWORK_NO_CONNECTION:  throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"waiting for network to return");case DownloaderService.NETWORK_TYPE_DISALLOWED_BY_REQUESTOR:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI_OR_CELLULAR_PERMISSION,"waiting for wifi or for download over cellular to be authorized");case DownloaderService.NETWORK_CANNOT_USE_ROAMING:throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"roaming is not allowed");case DownloaderService.NETWORK_UNUSABLE_DUE_TO_SIZE:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI,"waiting for wifi");}}  }
class C{  public void addSetAttribute(final SetAttribute setAttribute){  setAttributes.add(setAttribute);}  }
class C{  public static MasterPrivateKey create(byte[] seed) throws HyperLedgerException {  try {    Mac mac=Mac.getInstance("HmacSHA512","BC");    SecretKey seedkey=new SecretKeySpec(BITCOIN_SEED,"HmacSHA512");    mac.init(seedkey);    byte[] lr=mac.doFinal(seed);    byte[] l=Arrays.copyOfRange(lr,0,32);    byte[] r=Arrays.copyOfRange(lr,32,64);    BigInteger m=new BigInteger(1,l);    if (m.compareTo(curve.getN()) >= 0 || m.compareTo(BigInteger.ZERO) == 0) {      throw new HyperLedgerException("This is rather unlikely, but it did just happen");    }    PrivateKey keyPair=new PrivateKey(m,true);    return new MasterPrivateKey(keyPair,r,0,0,0);  } catch (  NoSuchAlgorithmException|InvalidKeyException|NoSuchProviderException e) {    throw new HyperLedgerException(e);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Enumeration<T> emptyEnumeration(){  return (Enumeration<T>)EMPTY_ENUMERATION;}  }
class C{  public IonDatagram loadTestFile(String path) throws IOException {  File file=getTestdataFile(path);  return load(file);}  }
class C{  protected void checkVersion(VersionedMessage<T> versionedMessage,String messageJson){  int comp=versionedMessage.compareVersion(expectedVersion);  if (comp > 0) {    String msg=String.format(VERSION_MISMATCH_MSG,expectedVersion,versionedMessage.getVersion(),messageJson);    notificationLogger.error(msg);    throw new IncompatibleVersionException(msg);  }  if (comp < 0) {    notificationLogger.info(String.format(VERSION_MISMATCH_MSG,expectedVersion,versionedMessage.getVersion(),messageJson));  }}  }
class C{  public boolean exists(URL url){  if (url == null)   return false;  Product p=(Product)DataAccessUtils.uniqueResult(getHibernateTemplate().find("from Product where path=?",url));  return p != null;}  }
class C{  public static boolean checkIfCanUse(String className){  if (MockList.shouldBeMocked(className)) {    return false;  }  for (  String s : classExceptions) {    if (className.startsWith(s)) {      return false;    }  }  return true;}  }
class C{  public void paint(Graphics g){  int width=getSize().width;  int height=getSize().height;  g.setColor(BACKGROUND_COLOR);  g.fillRect(0,0,width,height);  int y=this.name.getSize().height;  y+=2;  g.setColor(BORDER_COLOR);  while (y < height) {    g.drawLine(0,y,width,y);    y+=5;  }  g.setColor(BORDER_COLOR);  g.drawRect(0,0,width - 1,height - 1);  super.paint(g);}  }
class C{  private void moveLayer(final int delta){  final Layer selectedMapLayer=mapLayerTableViewer.getSelectedMapLayer();  if (selectedMapLayer == null)   return;  final List<Layer> layersList=mapLayerTableViewer.getLayersList();  final MapContent mapContent=pane.getMapContent();  final int contextIndex=mapContent.layers().indexOf(selectedMapLayer);  final int viewerIndex=layersList.indexOf(selectedMapLayer);  final int newViewerIndex=viewerIndex + delta;  if (newViewerIndex < 0 || newViewerIndex > layersList.size() - 1) {    return;  }  final int newContextIndex=contextIndex - delta;  if (newContextIndex < 0 || newContextIndex > mapContent.layers().size() - 1) {    return;  }  if (contextIndex != newContextIndex) {    mapContent.moveLayer(contextIndex,newContextIndex);    pane.redraw();    Collections.swap(layersList,viewerIndex,newViewerIndex);    mapLayerTableViewer.refresh();  }}  }
class C{  public RowSorterEvent(RowSorter source){  this(source,Type.SORT_ORDER_CHANGED,null);}  }
class C{  public synchronized static void saveWeaponOrderFile() throws IOException {  if (!updated.get()) {    return;  }  String path=CUSTOM_WEAPON_ORDER_FILENAME;  File file=new File(Configuration.configDir(),path);  if (file.exists() && !file.canWrite()) {    System.err.println("WARN: Could not save custom weapon orders " + "from " + path);    return;  }  Writer output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)));  output.write("<?xml version=\"1.0\"?>");  output.write(CommonConstants.NL);  output.write("<" + CUSTOM_WEAPON_ORDER + ">");  output.write(CommonConstants.NL);  for (  String unitId : weaponOrderMap.keySet()) {    StringBuilder weaponList=new StringBuilder();    StringBuilder orderList=new StringBuilder();    WeaponOrder weapOrder=weaponOrderMap.get(unitId);    if (weapOrder == null) {      continue;    }    if (weapOrder.orderType == WeaponSortOrder.CUSTOM) {      for (      Integer weapId : weapOrder.customWeaponOrderMap.keySet()) {        Integer order=weapOrder.customWeaponOrderMap.get(weapId);        weaponList.append(weapId + ",");        orderList.append(order + ",");      }      weaponList.deleteCharAt(weaponList.length() - 1);      orderList.deleteCharAt(orderList.length() - 1);    }    output.write("\t");    output.write("<" + UNIT + ">");    output.write(CommonConstants.NL);    output.write("\t\t");    output.write("<" + ID + ">");    output.write(unitId);    output.write("</" + ID + ">");    output.write(CommonConstants.NL);    output.write("\t\t");    output.write("<" + ORDER_TYPE + ">");    output.write(weapOrder.orderType.toString());    output.write("</" + ORDER_TYPE + ">");    output.write(CommonConstants.NL);    output.write("\t\t");    output.write("<" + WEAPON_LIST + ">");    output.write(weaponList.toString());    output.write("</" + WEAPON_LIST + ">");    output.write(CommonConstants.NL);    output.write("\t\t");    output.write("<" + ORDER_LIST + ">");    output.write(orderList.toString());    output.write("</" + ORDER_LIST + ">");    output.write(CommonConstants.NL);    output.write("\t");    output.write("</" + UNIT + ">");  }  output.write(CommonConstants.NL);  output.write("</" + CUSTOM_WEAPON_ORDER + ">");  output.close();}  }
class C{  final static String trimURISubstring(URL src,String sub){  final String s=src.toExternalForm();  final int endIndex=s.lastIndexOf(sub);  final String t=s.substring(0,endIndex);  return t;}  }
class C{  public boolean addSourceDir(File srcDir){  try {    srcDir=srcDir.getCanonicalFile();  } catch (  IOException e) {  }synchronized (sourceDirs) {    for (int i=0; i < sourceDirs.size(); i++) {      SourceDir src=sourceDirs.get(i);      if (src.srcDir.equals(srcDir)) {        return false;      }    }    SourceDir src=new SourceDir(srcDir);    sourceDirs.add(src);  }  return true;}  }
class C{  public JcaX509v3CertificateBuilder(X509Certificate issuerCert,BigInteger serial,Date notBefore,Date notAfter,X500Principal subject,PublicKey publicKey){  this(issuerCert.getSubjectX500Principal(),serial,notBefore,notAfter,subject,publicKey);}  }
class C{  public void handleEvent(Event evt){  Element elt=(Element)evt.getCurrentTarget();  String script=handlerElement.getTextContent();  if (script.length() == 0)   return;  DocumentLoader dl=bridgeContext.getDocumentLoader();  AbstractDocument d=(AbstractDocument)handlerElement.getOwnerDocument();  int line=dl.getLineNumber(handlerElement);  final String desc=Messages.formatMessage(HANDLER_SCRIPT_DESCRIPTION,new Object[]{d.getDocumentURI(),eventNamespaceURI,eventType,new Integer(line)});  String lang=handlerElement.getAttributeNS(null,SVGConstants.SVG_CONTENT_SCRIPT_TYPE_ATTRIBUTE);  if (lang.length() == 0) {    Element e=elt;    while (e != null && (!SVGConstants.SVG_NAMESPACE_URI.equals(e.getNamespaceURI()) || !SVGConstants.SVG_SVG_TAG.equals(e.getLocalName()))) {      e=SVGUtilities.getParentElement(e);    }    if (e == null)     return;    lang=e.getAttributeNS(null,SVGConstants.SVG_CONTENT_SCRIPT_TYPE_ATTRIBUTE);  }  runEventHandler(script,evt,lang,desc);}  }
class C{  public StringBuffer append(float f){  RealToString.getInstance().appendFloat(this,f);  return this;}  }
class C{  public static boolean isArchiveFileName(String fileName){  String extension=getExtension(fileName);  return ARCHIVE_EXTENSION_SET.contains(extension);}  }
class C{  public FastMpeg2Reader(String filename){  this(new File(filename));}  }
class C{  public Company careerLevel(CareerLevel careerLevel){  this.careerLevel=careerLevel;  return this;}  }
class C{  private String match(MBankStatement bs){  if (m_matchers == null || bs == null)   return "--";  log.fine("match - " + bs);  int count=0;  MBankStatementLine[] lines=bs.getLines(false);  for (int i=0; i < lines.length; i++) {    if (lines[i].getC_Payment_ID() == 0) {      match(lines[i]);      count++;    }  }  return String.valueOf(count);}  }
class C{  @Override public void write(int v) throws IOException {  if (_bufferEnd <= _offset) {    flushBlock(false);  }  _buffer[_offset++]=(byte)v;}  }
class C{  public T caseStructuralTypeRef(StructuralTypeRef object){  return null;}  }
class C{  private int calculateTypeId(Class<?> type){  if (type == null)   throw new NullPointerException("type cannot be null");  return hasher.hash32(type.getName());}  }
class C{  public Link(Link n){  table=new HashTable();  next=n;  if (next != null)   defaultStr=next.defaultStr;}  }
class C{  public OpenStreetMap(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void closeEL(Reader r){  try {    if (r != null)     r.close();  } catch (  Throwable e) {  }}  }
class C{  public EventType(String name,String description){  this(name,description,new EventAttribute[]{});}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attr;  NodeList childList;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attr=element.getAttributeNode("defaultAttr");  importedAttr=doc.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  assertEquals("documentimportnode03_nodeName","defaultAttr",nodeName);  assertEquals("documentimportnode03_nodeType",2,nodeType);  assertEquals("documentimportnode03_nodeValue","defaultVal",nodeValue);}  }
class C{  public static String escapeLuaMagicCharacters(String oldStr){  StringBuffer newStr=new StringBuffer();  for (int i=0; i < oldStr.length(); i++) {    char c=oldStr.charAt(i);    if (LUA_MAGIC_CHARS.contains(c)) {      newStr.append('%');    }    newStr.append(c);  }  return newStr.toString();}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat192.isZero(x1) || Nat192.isOne(x1)) {    return this;  }  int[] t1=Nat192.create();  int[] t2=Nat192.create();  SecP192R1Field.square(x1,t1);  SecP192R1Field.multiply(t1,x1,t1);  SecP192R1Field.squareN(t1,2,t2);  SecP192R1Field.multiply(t2,t1,t2);  SecP192R1Field.squareN(t2,4,t1);  SecP192R1Field.multiply(t1,t2,t1);  SecP192R1Field.squareN(t1,8,t2);  SecP192R1Field.multiply(t2,t1,t2);  SecP192R1Field.squareN(t2,16,t1);  SecP192R1Field.multiply(t1,t2,t1);  SecP192R1Field.squareN(t1,32,t2);  SecP192R1Field.multiply(t2,t1,t2);  SecP192R1Field.squareN(t2,64,t1);  SecP192R1Field.multiply(t1,t2,t1);  SecP192R1Field.squareN(t1,62,t1);  SecP192R1Field.square(t1,t2);  return Nat192.eq(x1,t2) ? new SecP192R1FieldElement(t1) : null;}  }
class C{  boolean usingSaslStreams(){  return (conn.inStream instanceof SaslInputStream);}  }
class C{  @Override public void onAdded(final StendhalRPZone zone){  super.onAdded(zone);  if (coversZone) {    setSize(zone.getWidth(),zone.getHeight());  }  zone.addMovementListener(this);}  }
class C{  public void addColumn(String name,Class type,Object defaultValue){  if (m_locked) {    throw new IllegalStateException("Can not add column to a locked Schema.");  }  if (name == null) {    throw new IllegalArgumentException("Null column names are not allowed.");  }  if (type == null) {    throw new IllegalArgumentException("Null column types are not allowed.");  }  for (int i=0; i < m_size; ++i) {    if (m_names[i].equals(name)) {      throw new IllegalArgumentException("Duplicate column names are not allowed: " + m_names[i]);    }  }  if (m_names.length == m_size) {    int capacity=(3 * m_names.length) / 2 + 1;    String[] names=new String[capacity];    Class[] types=new Class[capacity];    Object[] dflts=new Object[capacity];    System.arraycopy(m_names,0,names,0,m_size);    System.arraycopy(m_types,0,types,0,m_size);    System.arraycopy(m_dflts,0,dflts,0,m_size);    m_names=names;    m_types=types;    m_dflts=dflts;  }  m_names[m_size]=name;  m_types[m_size]=type;  m_dflts[m_size]=defaultValue;  if (m_lookup != null)   m_lookup.put(name,new Integer(m_size));  ++m_size;}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException {  if (fileOut == null) {    logger.error("The output filename doesn't exist or is invalid");    if (!ignoreErrors) {      throw new IOException("The output filename doesn't exist or is invalid");    }  } else {    File parent=fileOut.getParentFile();    if (parent != null && !parent.exists()) {      parent.mkdirs();    }    OutputStream fileStream=null;    try {      fileStream=new FileOutputStream(fileOut);      pipeInputToOutputStream(in,fileStream,true,ignoreErrors);    } catch (    IOException e) {      if (fileStream != null) {        try {          fileStream.close();        } catch (        IOException ex) {          logger.error("Cannot close stream - {}",ex.getMessage());        }      }      if (!ignoreErrors) {        throw e;      }    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYIntervalSeriesCollection)) {    return false;  }  XYIntervalSeriesCollection that=(XYIntervalSeriesCollection)obj;  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  private SnmpPduPacket turboProcessingGetSet(SnmpPduRequest req,Object userData){  int errorStatus;  SnmpSubRequestHandler sub=subs.elements().nextElement();  sub.setUserData(userData);  if (req.type == SnmpDefinitions.pduSetRequestPdu) {    sub.type=pduWalkRequest;    sub.run();    sub.type=pduSetRequestPdu;    errorStatus=sub.getErrorStatus();    if (errorStatus != SnmpDefinitions.snmpRspNoError) {      return newErrorResponsePdu(req,errorStatus,sub.getErrorIndex() + 1);    }  }  sub.run();  errorStatus=sub.getErrorStatus();  if (errorStatus != SnmpDefinitions.snmpRspNoError) {    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"turboProcessingGetSet","an error occurs");    }    int realIndex=sub.getErrorIndex() + 1;    return newErrorResponsePdu(req,errorStatus,realIndex);  }  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"turboProcessingGetSet","build the unified response for request " + req.requestId);  }  return mergeResponses(req);}  }
class C{  static final public Object deserialize(final InputStream is){  try {    final ObjectInputStream ois=new ObjectInputStream(is);    return ois.readObject();  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  DistributedSystemHealthMonitor(DistributedSystemHealthEvaluator eval,GemFireHealthImpl healthImpl,int interval){  this.eval=eval;  this.healthImpl=healthImpl;  this.interval=interval;  this.okayDiagnoses=new ArrayList();  this.poorDiagnoses=new ArrayList();  ThreadGroup group=LoggingThreadGroup.createThreadGroup(LocalizedStrings.DistributedSystemHealthMonitor_HEALTH_MONITORS.toLocalizedString(),logger);  String name=LocalizedStrings.DistributedSystemHealthMonitor_HEALTH_MONITOR_FOR_0.toLocalizedString(eval.getDescription());  this.thread=new Thread(group,this,name);  this.thread.setDaemon(true);}  }
class C{  public void addTitlePrefix(String prfx){  if (!titlePrefix.contains(prfx)) {    titlePrefix.add(prfx);    firePropertyChange(TITLE_PREFIX,null,titlePrefix);  }}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static void batchFilterFile(Filter filter,String[] options) throws Exception {  Instances firstData=null;  Instances secondData=null;  DataSource firstInput=null;  DataSource secondInput=null;  PrintWriter firstOutput=null;  PrintWriter secondOutput=null;  boolean helpRequest;  String sourceCode="";  try {    helpRequest=Utils.getFlag('h',options);    String fileName=Utils.getOption('i',options);    if (fileName.length() != 0) {      firstInput=new DataSource(fileName);    } else {      throw new Exception("No first input file given.\n");    }    fileName=Utils.getOption('r',options);    if (fileName.length() != 0) {      secondInput=new DataSource(fileName);    } else {      throw new Exception("No second input file given.\n");    }    fileName=Utils.getOption('o',options);    if (fileName.length() != 0) {      firstOutput=new PrintWriter(new FileOutputStream(fileName));    } else {      firstOutput=new PrintWriter(System.out);    }    fileName=Utils.getOption('s',options);    if (fileName.length() != 0) {      secondOutput=new PrintWriter(new FileOutputStream(fileName));    } else {      secondOutput=new PrintWriter(System.out);    }    String classIndex=Utils.getOption('c',options);    if (filter instanceof Sourcable) {      sourceCode=Utils.getOption('z',options);    }    if (filter instanceof OptionHandler) {      ((OptionHandler)filter).setOptions(options);    }    Utils.checkForRemainingOptions(options);    if (helpRequest) {      throw new Exception("Help requested.\n");    }    firstData=firstInput.getStructure();    secondData=secondInput.getStructure();    if (!secondData.equalHeaders(firstData)) {      throw new Exception("Input file formats differ.\n" + secondData.equalHeadersMsg(firstData) + "\n");    }    if (classIndex.length() != 0) {      if (classIndex.equals("first")) {        firstData.setClassIndex(0);        secondData.setClassIndex(0);      } else       if (classIndex.equals("last")) {        firstData.setClassIndex(firstData.numAttributes() - 1);        secondData.setClassIndex(secondData.numAttributes() - 1);      } else {        firstData.setClassIndex(Integer.parseInt(classIndex) - 1);        secondData.setClassIndex(Integer.parseInt(classIndex) - 1);      }    }  } catch (  Exception ex) {    String filterOptions="";    if (filter instanceof OptionHandler) {      filterOptions+="\nFilter options:\n\n";      Enumeration<Option> enu=((OptionHandler)filter).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        filterOptions+=option.synopsis() + '\n' + option.description()+ "\n";      }    }    String genericOptions="\nGeneral options:\n\n" + "-h\n" + "\tGet help on available options.\n"+ "-i <filename>\n"+ "\tThe file containing first input instances.\n"+ "-o <filename>\n"+ "\tThe file first output instances will be written to.\n"+ "-r <filename>\n"+ "\tThe file containing second input instances.\n"+ "-s <filename>\n"+ "\tThe file second output instances will be written to.\n"+ "-c <class index>\n"+ "\tThe number of the attribute to use as the class.\n"+ "\t\"first\" and \"last\" are also valid entries.\n"+ "\tIf not supplied then no class is assigned.\n";    if (filter instanceof Sourcable) {      genericOptions+="-z <class name>\n" + "\tOutputs the source code representing the trained filter.\n";    }    throw new Exception('\n' + ex.getMessage() + filterOptions+ genericOptions);  }  boolean printedHeader=false;  if (filter.setInputFormat(firstData)) {    firstOutput.println(filter.getOutputFormat().toString());    printedHeader=true;  }  Instance inst;  while (firstInput.hasMoreElements(firstData)) {    inst=firstInput.nextElement(firstData);    if (filter.input(inst)) {      if (!printedHeader) {        throw new Error("Filter didn't return true from setInputFormat() " + "earlier!");      }      firstOutput.println(filter.output().toString());    }  }  if (filter.batchFinished()) {    if (!printedHeader) {      firstOutput.println(filter.getOutputFormat().toString());    }    while (filter.numPendingOutput() > 0) {      firstOutput.println(filter.output().toString());    }  }  if (firstOutput != null) {    firstOutput.close();  }  printedHeader=false;  if (filter.isOutputFormatDefined()) {    secondOutput.println(filter.getOutputFormat().toString());    printedHeader=true;  }  while (secondInput.hasMoreElements(secondData)) {    inst=secondInput.nextElement(secondData);    if (filter.input(inst)) {      if (!printedHeader) {        throw new Error("Filter didn't return true from" + " isOutputFormatDefined() earlier!");      }      secondOutput.println(filter.output().toString());    }  }  if (filter.batchFinished()) {    if (!printedHeader) {      secondOutput.println(filter.getOutputFormat().toString());    }    while (filter.numPendingOutput() > 0) {      secondOutput.println(filter.output().toString());    }  }  if (secondOutput != null) {    secondOutput.close();  }  if (sourceCode.length() != 0) {    System.out.println(wekaStaticWrapper((Sourcable)filter,sourceCode,firstData,filter.getOutputFormat()));  }}  }
class C{  public int entryPoint(State state,Type pushed){  int pc=curCP();  alive=true;  this.state=state.dup();  Assert.check(state.stacksize <= max_stack);  this.state.push(pushed);  if (debugCode)   System.err.println("entry point " + state);  pendingStackMap=needStackMap;  return pc;}  }
class C{  @Override protected void finalize() throws Throwable {  dispose();  super.finalize();}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public void add(Transaction transaction){  LOG.debug("about to add: " + transaction);  if (!transaction.isEmpty()) {    mTransactions.add(transaction);  }}  }
class C{  @Override public synchronized int size(){  ensureValid();  return mSize;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final double value){  buffer.append(value);}  }
class C{  static public Result doConcurrentClientTest(Journal journal,long timeout,int nresources,int minLocks,int maxLocks,int ntrials,int keyLen,int nops,double failureRate) throws InterruptedException {  if (journal == null)   throw new IllegalArgumentException();  if (timeout <= 0)   throw new IllegalArgumentException();  if (nresources <= 0)   throw new IllegalArgumentException();  if (minLocks < 0)   throw new IllegalArgumentException();  if (maxLocks < minLocks || maxLocks > nresources)   throw new IllegalArgumentException();  if (ntrials < 1)   throw new IllegalArgumentException();  if (keyLen < 1)   throw new IllegalArgumentException();  if (nops < 0)   throw new IllegalArgumentException();  if (failureRate < 0.0 || failureRate > 1.0)   throw new IllegalArgumentException();  final Random r=new Random();  final String[] resources=new String[nresources];{    for (int i=0; i < nresources; i++) {      resources[i]="index#" + i;      journal.registerIndex(resources[i],BTree.create(journal,new IndexMetadata(resources[i],UUID.randomUUID())));    }    journal.commit();  }  if (log.isInfoEnabled())   log.info("Created indices: " + Arrays.toString(resources));  final Collection<AbstractTask<Void>> tasks=new HashSet<AbstractTask<Void>>();  final ConcurrentHashMap<String,Thread> btrees=new ConcurrentHashMap<String,Thread>();  for (int i=0; i < ntrials; i++) {    final int nlocks=r.nextInt(maxLocks - minLocks) + minLocks;    assert nlocks >= minLocks && nlocks <= maxLocks;    final Collection<String> tmp=new HashSet<String>(nlocks);    while (tmp.size() < nlocks) {      tmp.add(resources[r.nextInt(nresources)]);    }    final String[] resource=tmp.toArray(new String[nlocks]);    tasks.add(new WriteTask(journal,resource,i,keyLen,nops,failureRate,btrees));  }  if (log.isInfoEnabled())   log.info("Submitting " + tasks.size() + " tasks");  final long begin=System.currentTimeMillis();  final List<Future<Void>> results=journal.invokeAll(tasks,timeout,TimeUnit.SECONDS);  final long elapsed=System.currentTimeMillis() - begin;  final Iterator<Future<Void>> itr=results.iterator();  int nfailed=0;  int ninterrupt=0;  int ncommitted=0;  int nuncommitted=0;  while (itr.hasNext()) {    final Future<?> future=itr.next();    if (future.isCancelled()) {      nuncommitted++;      continue;    }    try {      future.get();      ncommitted++;    } catch (    ExecutionException ex) {      if (isInnerCause(ex,InterruptedException.class) || isInnerCause(ex,ClosedByInterruptException.class)) {        log.warn("Interrupted: " + ex);        ninterrupt++;      } else       if (isInnerCause(ex,SpuriousException.class)) {        nfailed++;      } else {        fail("Not expecting: " + ex,ex);      }    }  }  final WriteExecutorService writeService=journal.getConcurrencyManager().getWriteService();  journal.shutdownNow();  final long seconds=TimeUnit.SECONDS.convert(elapsed,TimeUnit.MILLISECONDS);  final long bytesWrittenPerSecond=journal.getRootBlockView().getNextOffset() / (seconds == 0 ? 1 : seconds);  final Result ret=new Result();  ret.put("nfailed","" + nfailed);  ret.put("ncommitted","" + ncommitted);  ret.put("ninterrupt","" + ninterrupt);  ret.put("nuncommitted","" + nuncommitted);  ret.put("elapsed(ms)","" + elapsed);  ret.put("bytesWrittenPerSec","" + bytesWrittenPerSecond);  ret.put("tasks/sec","" + (ncommitted * 1000 / elapsed));  ret.put("maxRunning","" + writeService.getMaxRunning());  ret.put("maxPoolSize","" + writeService.getMaxPoolSize());  ret.put("maxLatencyUntilCommit","" + writeService.getMaxCommitWaitingTime());  ret.put("maxCommitLatency","" + writeService.getMaxCommitServiceTime());  System.err.println(ret.toString(true));  journal.deleteResources();  return ret;}  }
class C{  private CompletableFutureUtil(){  instanceNotAllowed(getClass());}  }
class C{  public PerformanceLogger(String title){  time1=System.currentTimeMillis();}  }
class C{  protected void reportSql(String sql,String methodCall){  _reportSql(sql,methodCall);}  }
class C{  public void showWaitingCopyDialog(){  LoadingDialog loading=new LoadingDialog(getResources().getString(R.string.wait_for_tmp_copy_from_private_storage));  FragmentManager fm=getSupportFragmentManager();  FragmentTransaction ft=fm.beginTransaction();  loading.show(ft,DIALOG_WAIT_COPY_FILE);}  }
class C{  protected void assertDeleted(Path path,boolean recursive) throws IOException {  SwiftTestUtils.assertDeleted(sFileSystem,path,recursive);}  }
class C{  public Matrix4f fma4x3(Matrix4fc other,float otherFactor){  return fma4x3(other,otherFactor,this);}  }
class C{  public static boolean isBlankNoTrim(String str){  return (str == null || str.length() == 0);}  }
class C{  void flush(){  String lastLine=lineBuilder.toString();  if (!lastLine.isEmpty()) {    mutableLines.add(lastLine);  }  int jN=mutableLines.size();  Range<Integer> eofRange=Range.closedOpen(kN,kN + 1);  while (range0s.size() < jN) {    range0s.add(Formatter.EMPTY_RANGE);  }  range0s.add(eofRange);  while (ranges.size() < jN) {    ranges.add(Formatter.EMPTY_RANGE);  }  ranges.add(eofRange);  while (range1s.size() < jN) {    range1s.add(Formatter.EMPTY_RANGE);  }  range1s.add(eofRange);  setLines(ImmutableList.copyOf(mutableLines));}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isScaleEnabled(){  return mIsScaleEnabled;}  }
class C{  private static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.578 -0500",hash_original_method="2D6865C117A48D63E7E9EC7F43B1136B",hash_generated_method="B099C923E044E90EB2791899D000130F") public void resetSyntax(){  for (int i=0; i < 256; i++) {    tokenTypes[i]=0;  }}  }
class C{  void moveChild(int oldPos,int newPos){  for (int i=0; i < entryCount + 1; i++) {    if (childPageIds[i] == oldPos) {      index.getPageStore().logUndo(this,data);      written=false;      changeCount=index.getPageStore().getChangeCount();      childPageIds[i]=newPos;      index.getPageStore().update(this);      return;    }  }  throw DbException.throwInternalError();}  }
class C{  public Polygon2D(List<Point2D> points){  this.points=points;}  }
class C{  protected void crash(Connection conn){  try {    conn.createStatement().execute("SET WRITE_DELAY 0");    conn.createStatement().execute("CREATE TABLE TEST_A(ID INT)");    fail("should be crashed already");  } catch (  SQLException e) {  }  try {    conn.close();  } catch (  SQLException e) {  }}  }
class C{  public void sort(){  Arrays.sort(data,0,count);}  }
class C{  public final IRequest fireMessage(Address recipient,String type,Object object){  try {    return base.fireMessage(new Message(new Address(getName()),recipient,type,object));  } catch (  IOException e) {    return new StaticRequest(IRequest.ERROR,e);  }}  }
class C{  public Import(URI importUri,URI absoluteUri,String contents){  this(importUri,absoluteUri,contents,null);}  }
class C{  public void checkGraphicLoader(GraphicLoader gl){  if (gl.getReceiver() == null) {    hookUpGraphicLoaderWithLayer(gl);  }}  }
class C{  public void merge(IStatus status){  Assert.isLegal(status != null);  if (!status.isMultiStatus()) {    add(status);  } else {    addAll(status);  }}  }
class C{  private static int CallIntMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallIntMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Int,false);    return Reflection.unwrapInt(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @CheckReturnValue public <T>Subject5<A,B,C,D,T> asWithPrecursor(Function4<A,B,C,D,T> mapping){  return asWithPrecursor(mapping,null);}  }
class C{  public void registerRegularTileEntities(){  GameRegistry.registerTileEntity(TileEntityReactorFrame.class,"ReactorFrame");  GameRegistry.registerTileEntity(TileEntityReactorGlass.class,"ReactorGlass");  GameRegistry.registerTileEntity(TileEntityReactorLaserFocusMatrix.class,"ReactorLaserFocus");  GameRegistry.registerTileEntity(TileEntityReactorNeutronCapture.class,"ReactorNeutronCapture");  GameRegistry.registerTileEntity(TileEntityReactorPort.class,"ReactorPort");  GameRegistry.registerTileEntity(TileEntityReactorLogicAdapter.class,"ReactorLogicAdapter");}  }
class C{  public void disconnect(){  logger.log("Performing disconnect.");  this.catchDisconnection=false;  sendMessage(Utils.createDisconnectMessage(clientId,accountToken));  closeWebSocket();}  }
class C{  public void build_table_entries(parse_action_table act_table,parse_reduce_table reduce_table) throws internal_error {  parse_action_row our_act_row;  parse_reduce_row our_red_row;  lalr_item itm;  parse_action act, other_act;  symbol sym;  boolean conflicted=false;  our_act_row=act_table.under_state[index()];  our_red_row=reduce_table.under_state[index()];  for (Enumeration i=items().all(); i.hasMoreElements(); ) {    itm=(lalr_item)i.nextElement();    if (itm.dot_at_end()) {      act=new reduce_action(itm.the_production());      for (int t=0; t < terminal.number(); t++) {        if (!itm.lookahead().contains(t))         continue;        if (our_act_row.under_term[t].kind() == parse_action.ERROR) {          our_act_row.under_term[t]=act;        } else {          conflicted=true;          other_act=our_act_row.under_term[t];          if (other_act.kind() != parse_action.SHIFT) {            if (itm.the_production().index() < ((reduce_action)other_act).reduce_with().index()) {              our_act_row.under_term[t]=act;            }          }        }      }    }  }  for (lalr_transition trans=transitions(); trans != null; trans=trans.next()) {    sym=trans.on_symbol();    if (!sym.is_non_term()) {      act=new shift_action(trans.to_state());      if (our_act_row.under_term[sym.index()].kind() == parse_action.ERROR) {        our_act_row.under_term[sym.index()]=act;      } else {        conflicted=true;        our_act_row.under_term[sym.index()]=act;      }    } else {      our_red_row.under_non_term[sym.index()]=trans.to_state();    }  }  if (conflicted)   report_conflicts();}  }
class C{  public static Duration fromMillis(long milliseconds){  Duration.Builder builder=builder();  if (milliseconds < 0) {    builder.prior(true);    milliseconds*=-1;  }  int seconds=(int)(milliseconds / 1000);  Integer weeks=seconds / (60 * 60 * 24* 7);  if (weeks > 0) {    builder.weeks(weeks);  }  seconds%=60 * 60 * 24* 7;  Integer days=seconds / (60 * 60 * 24);  if (days > 0) {    builder.days(days);  }  seconds%=60 * 60 * 24;  Integer hours=seconds / (60 * 60);  if (hours > 0) {    builder.hours(hours);  }  seconds%=60 * 60;  Integer minutes=seconds / (60);  if (minutes > 0) {    builder.minutes(minutes);  }  seconds%=60;  if (seconds > 0) {    builder.seconds(seconds);  }  return builder.build();}  }
class C{  @Override public int runningCloudlets(){  return getCloudletExecList().size();}  }
class C{  protected boolean isValidFragment(final String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || AndroidPreferenceFragment.class.getName().equals(fragmentName) || CorePreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  protected static TableId parse(String[] parts,int numParts,boolean useCatalogBeforeSchema){  if (numParts == 0)   return null;  if (numParts == 1)   return new TableId(null,null,parts[0]);  if (numParts == 2) {    if (useCatalogBeforeSchema)     return new TableId(parts[0],null,parts[1]);    return new TableId(null,parts[0],parts[1]);  }  return new TableId(parts[0],parts[1],parts[2]);}  }
class C{  protected Extent maximumRegionSize(){  return Extent.max();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void removeDirectories(String[] directories){  for (  String directory : directories) {    File dir=new File(directory);    deleteDirectory(dir);  }}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources())) ? (float)getWidth() / 2 - Utils.dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  public static void json(String tag,String json,int methodCount){  validateMethodCount(methodCount);  if (TextUtils.isEmpty(json)) {    d(tag,"Empty/Null json content",methodCount);    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(tag,message,methodCount);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(tag,message,methodCount);    }  } catch (  JSONException e) {    d(tag,e.getCause().getMessage() + "\n" + json,methodCount);  }}  }
class C{  @Override public void removeRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){  try {    if (PropertyUtils.getProperty(task,fieldName) != null) {      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);      Iterator<Project> iterator=projects.iterator();      while (iterator.hasNext()) {        for (        ObjectId projectIdToRemove : projectIds) {          if (iterator.next().getId().equals(projectIdToRemove)) {            iterator.remove();            break;          }        }      }      List<Project> newProjectList=new LinkedList<>();      projects.forEach(null);      PropertyUtils.setProperty(task,fieldName,newProjectList);      taskRepository.save(task);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private static String printHeader(String prefix,EnumSet<FilterOption> show,String header){  if (show.size() > 1) {    System.out.println(prefix + header);  }  return "\n\n";}  }
class C{  public static IGeoPoint execGetPosition(Context context,String fullPath,long id){  QueryParameter query=new QueryParameter().setID(QUERY_TYPE_UNDEFINED).addColumn(SQL_COL_LAT,SQL_COL_LON).addFrom(SQL_TABLE_EXTERNAL_CONTENT_URI.toString()).addWhere(SQL_COL_LAT + " IS NOT NULL").addWhere(SQL_COL_LON + " IS NOT NULL");  if (fullPath != null) {    query.addWhere(SQL_COL_PATH + "= ?",fullPath);  } else {    query.addWhere(SQL_COL_PK + "= ?","" + id);  }  Cursor c=null;  try {    c=createCursorForQuery(context,query);    if (c.moveToFirst()) {      GeoPoint result=new GeoPoint(c.getDouble(0),c.getDouble(1));      return result;    }  } catch (  Exception ex) {    Log.e(Global.LOG_CONTEXT,"FotoSql.execGetPosition: error executing " + query,ex);  } finally {    if (c != null)     c.close();  }  return null;}  }
class C{  public boolean isAnyProduct(){  Object oo=get_Value(COLUMNNAME_AnyProduct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  Object processPATTERN(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    XPath pattern=handler.createMatchPatternXPath(value,owner);    return pattern;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public void runAction(final List<VcsException> exceptions){  final String message=myMessageTextArea.getText();  final boolean hasMessage=message.trim().length() != 0;  final File messageFile;  if (hasMessage) {    try {      messageFile=FileUtil.createTempFile(MESSAGE_FILE_PREFIX,MESSAGE_FILE_SUFFIX);      messageFile.deleteOnExit();      Writer out=new OutputStreamWriter(new FileOutputStream(messageFile),MESSAGE_FILE_ENCODING);      try {        out.write(message);      }  finally {        out.close();      }    } catch (    IOException ex) {      Messages.showErrorDialog(myProject,GitBundle.message("tag.error.creating.message.file.message",ex.toString()),GitBundle.getString("tag.error.creating.message.file.title"));      return;    }  } else {    messageFile=null;  }  try {    GitSimpleHandler h=new GitSimpleHandler(myProject,getGitRoot(),GitCommand.TAG);    if (hasMessage) {      h.addParameters("-a");    }    if (myForceCheckBox.isEnabled() && myForceCheckBox.isSelected()) {      h.addParameters("-f");    }    if (hasMessage) {      h.addParameters("-F",messageFile.getAbsolutePath());    }    h.addParameters(myTagNameTextField.getText());    String object=myCommitTextField.getText().trim();    if (object.length() != 0) {      h.addParameters(object);    }    try {      GitHandlerUtil.doSynchronously(h,GitBundle.getString("tagging.title"),h.printableCommandLine());      VcsNotifier.getInstance(myProject).notifySuccess(myTagNameTextField.getText(),"Created tag " + myTagNameTextField.getText() + " successfully.");      GitRepository repository=GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(getGitRoot());      if (repository != null) {        VfsUtil.markDirtyAndRefresh(true,true,false,repository.getGitDir());      } else {        LOG.error("No repository registered for root: " + getGitRoot());      }    }  finally {      exceptions.addAll(h.errors());    }  }  finally {    if (messageFile != null) {      messageFile.delete();    }  }}  }
class C{  public void addAnnotation(String annotation,double x,double y){  mAnnotations.add(annotation);  mStringXY.put(x,y);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.243 -0500",hash_original_method="3060005E7173CF0D443847A582C02D7D",hash_generated_method="26FBD37699A5E6F17DC0439805AFD705") public static boolean isIdentifierIgnorable(char c){  return isIdentifierIgnorable((int)c);}  }
class C{  public ValueMarker(double value){  super();  this.value=value;}  }
class C{  private void parseVersion(Node node){  String version=null;  String validity=null;  Node versionchild=node.getFirstChild();  if (versionchild != null) {    do {      if (version == null) {        if ((version=getValueByParamName("version",versionchild,TYPE_TXT)) != null) {          provisioningInfo.setVersion(Integer.parseInt(version));          continue;        }      }      if (validity == null) {        if ((validity=getValueByParamName("validity",versionchild,TYPE_INT)) != null) {          provisioningInfo.setValidity(Long.parseLong(validity) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);        }      }    } while ((versionchild=versionchild.getNextSibling()) != null);  }}  }
class C{  private ProcessHelpers(){}  }
class C{  public String uploadVideo(Context context,Uri videoUri){  String filePath=VideoMediaStoreUtils.getPath(context,videoUri);  Video androidVideo=VideoMediaStoreUtils.getVideo(context,filePath);  if (androidVideo != null) {    File videoFile=new File(filePath);    if (videoFile.length() < Constants.MAX_SIZE_MEGA_BYTE) {      try {        Video receivedVideo=mVideoServiceProxy.addVideo(androidVideo);        if (receivedVideo != null) {          VideoStatus status=mVideoServiceProxy.setVideoData(receivedVideo.getId(),new TypedFile(receivedVideo.getContentType(),videoFile));          if (status.getState() == VideoState.READY) {            return STATUS_UPLOAD_SUCCESSFUL;          }        }      } catch (      Exception e) {        return STATUS_UPLOAD_ERROR;      }    } else     return STATUS_UPLOAD_ERROR_FILE_TOO_LARGE;  }  return STATUS_UPLOAD_ERROR;}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (resultCode == RandomScanActivity.RESULT_OK) {    Bundle result=data.getBundleExtra(RandomScanActivity.EXTRAS_SCAN_RESULTS);switch (requestCode) {case SINGLE_GROUP_REQ_CODE:      StringBuilder sb=new StringBuilder();    sb.append("IBAN: ").append(result.getString(IBAN_PARSER_NAME));  sb.append("\nAmount: ").append(result.getString(AMOUNT_PARSER_NAME));String date=result.getString(DATE_PARSER_NAME);if (date != null) {sb.append("\nDate: ").append(date);}Toast.makeText(this,sb.toString(),Toast.LENGTH_LONG).show();break;case MULTIPLE_GROUPS_REQ_CODE:sb=new StringBuilder();sb.append("IBAN: ").append(result.getString(IBAN_PARSER_NAME));sb.append("\nAmount: ").append(result.getString(AMOUNT_PARSER_NAME));date=result.getString(DATE_PARSER_NAME);if (date != null) {sb.append("\nDate: ").append(date);}String email=result.getString(EMAIL_PARSER_NAME);if (email != null) {sb.append("\nEmail: ").append(email);}Toast.makeText(this,sb.toString(),Toast.LENGTH_LONG).show();break;}}}  }
class C{  public boolean inTheSameContainerPrecondition(EObject objectTarget,EObject objectSource){  if (objectTarget instanceof Endpoint) {    if (objectTarget.eContainer().equals(objectSource.eContainer()))     return true;  }  return false;}  }
class C{  static @NonNull Context enterJsContext(){  final Context jsContext=Context.enter();  try {    jsContext.setLanguageVersion(Context.VERSION_1_8);    jsContext.setOptimizationLevel(-1);  } catch (  RuntimeException e) {    Context.exit();    throw e;  }  return jsContext;}  }
class C{  public static String toString(Node node) throws IOException {  return toString(node,DEFAULT_INDENT,DEFAULT_METHOD);}  }
class C{  public void testMergePolicy() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","ram.flush.mb=-1","max.buffered=2","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","merge.policy=" + MyMergePolicy.class.getName(),"doc.stored=false","doc.tokenized=false","debug.level=1","# ----- alg ","{ \"Rounds\"","  ResetSystemErase","  CreateIndex","  { \"AddDocs\"  AddDoc > : * ","} : 2"};  Benchmark benchmark=execBenchmark(algLines);  assertTrue("did not use the specified MergePolicy",((MyMergePolicy)benchmark.getRunData().getIndexWriter().getConfig().getMergePolicy()).called);  benchmark.getRunData().getIndexWriter().close();  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXECUTION_FLOW__SOURCE_ELEMENT:    setSourceElement((EObject)null);  return;case SexecPackage.EXECUTION_FLOW__NAME:setName(NAME_EDEFAULT);return;case SexecPackage.EXECUTION_FLOW__STATE_VECTOR:setStateVector((StateVector)null);return;case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:getSubScopes().clear();return;case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:setSuperScope((ExecutionScope)null);return;case SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES:getEnterSequences().clear();return;case SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE:setExitSequence((Sequence)null);return;case SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE:setInitSequence((Sequence)null);return;case SexecPackage.EXECUTION_FLOW__REACTIONS:getReactions().clear();return;case SexecPackage.EXECUTION_FLOW__SIMPLE_NAME:setSimpleName(SIMPLE_NAME_EDEFAULT);return;case SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE:setReactSequence((Sequence)null);return;case SexecPackage.EXECUTION_FLOW__STATES:getStates().clear();return;case SexecPackage.EXECUTION_FLOW__NODES:getNodes().clear();return;case SexecPackage.EXECUTION_FLOW__REGIONS:getRegions().clear();return;case SexecPackage.EXECUTION_FLOW__HISTORY_VECTOR:setHistoryVector((StateVector)null);return;case SexecPackage.EXECUTION_FLOW__ENTRY_ACTION:setEntryAction((Step)null);return;case SexecPackage.EXECUTION_FLOW__EXIT_ACTION:setExitAction((Step)null);return;case SexecPackage.EXECUTION_FLOW__STATIC_INIT_SEQUENCE:setStaticInitSequence((Sequence)null);return;}super.eUnset(featureID);}  }
class C{  public DelphiNode(Token payload,ASTTree tree){  super(payload);  mainTree=tree;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_CLASS_DECLARATION___IS_ABSTRACT:    return isAbstract();case N4JSPackage.N4_CLASS_DECLARATION___IS_EXTERNAL:  return isExternal();case N4JSPackage.N4_CLASS_DECLARATION___IS_EXPORTED:return isExported();case N4JSPackage.N4_CLASS_DECLARATION___IS_EXPORTED_AS_DEFAULT:return isExportedAsDefault();case N4JSPackage.N4_CLASS_DECLARATION___GET_EXPORTED_NAME:return getExportedName();case N4JSPackage.N4_CLASS_DECLARATION___IS_TOPLEVEL:return isToplevel();case N4JSPackage.N4_CLASS_DECLARATION___GET_ANNOTATIONS:return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public void acceptClassifier(final IncrementalClassifierEvent ce){  try {    if (ce.getStatus() == IncrementalClassifierEvent.NEW_BATCH) {      m_throughput=new StreamThroughput(statusMessagePrefix());      m_throughput.setSamplePeriod(m_statusFrequency);      m_eval=new Evaluation(ce.getStructure());      m_eval.useNoPriors();      m_dataLegend=new Vector<String>();      m_reset=true;      m_dataPoint=new double[0];      ce.getStructure();      System.err.println("NEW BATCH");      m_instanceCount=0;      if (m_windowSize > 0) {        m_window=new LinkedList<Instance>();        m_windowEval=new Evaluation(ce.getStructure());        m_windowEval.useNoPriors();        m_windowedPreds=new LinkedList<double[]>();        if (m_logger != null) {          m_logger.logMessage(statusMessagePrefix() + "[IncrementalClassifierEvaluator] Chart output using windowed " + "evaluation over "+ m_windowSize+ " instances");        }      }    } else {      Instance inst=ce.getCurrentInstance();      if (inst != null) {        m_throughput.updateStart();        m_instanceCount++;        double[] dist=ce.getClassifier().distributionForInstance(inst);        double pred=0;        if (!inst.isMissing(inst.classIndex())) {          if (m_outputInfoRetrievalStats) {            m_eval.evaluateModelOnceAndRecordPrediction(dist,inst);          } else {            m_eval.evaluateModelOnce(dist,inst);          }          if (m_windowSize > 0) {            m_windowEval.evaluateModelOnce(dist,inst);            m_window.addFirst(inst);            m_windowedPreds.addFirst(dist);            if (m_instanceCount > m_windowSize) {              Instance oldest=m_window.removeLast();              double[] oldDist=m_windowedPreds.removeLast();              oldest.setWeight(-oldest.weight());              m_windowEval.evaluateModelOnce(oldDist,oldest);              oldest.setWeight(-oldest.weight());            }          }        } else {          pred=ce.getClassifier().classifyInstance(inst);        }        if (inst.classIndex() >= 0) {          if (inst.attribute(inst.classIndex()).isNominal()) {            if (!inst.isMissing(inst.classIndex())) {              if (m_dataPoint.length < 2) {                m_dataPoint=new double[3];                m_dataLegend.addElement("Accuracy");                m_dataLegend.addElement("RMSE (prob)");                m_dataLegend.addElement("Kappa");              }              if (m_windowSize > 0) {                m_dataPoint[1]=m_windowEval.rootMeanSquaredError();                m_dataPoint[2]=m_windowEval.kappa();              } else {                m_dataPoint[1]=m_eval.rootMeanSquaredError();                m_dataPoint[2]=m_eval.kappa();              }            } else {              if (m_dataPoint.length < 1) {                m_dataPoint=new double[1];                m_dataLegend.addElement("Confidence");              }            }            double primaryMeasure=0;            if (!inst.isMissing(inst.classIndex())) {              if (m_windowSize > 0) {                primaryMeasure=1.0 - m_windowEval.errorRate();              } else {                primaryMeasure=1.0 - m_eval.errorRate();              }            } else {              primaryMeasure=dist[Utils.maxIndex(dist)];            }            m_dataPoint[0]=primaryMeasure;            m_ce.setLegendText(m_dataLegend);            m_ce.setMin(0);            m_ce.setMax(1);            m_ce.setDataPoint(m_dataPoint);            m_ce.setReset(m_reset);            m_reset=false;          } else {            if (m_dataPoint.length < 1) {              m_dataPoint=new double[1];              if (inst.isMissing(inst.classIndex())) {                m_dataLegend.addElement("Prediction");              } else {                m_dataLegend.addElement("RMSE");              }            }            if (!inst.isMissing(inst.classIndex())) {              double update;              if (!inst.isMissing(inst.classIndex())) {                if (m_windowSize > 0) {                  update=m_windowEval.rootMeanSquaredError();                } else {                  update=m_eval.rootMeanSquaredError();                }              } else {                update=pred;              }              m_dataPoint[0]=update;              if (update > m_max) {                m_max=update;              }              if (update < m_min) {                m_min=update;              }            }            m_ce.setLegendText(m_dataLegend);            m_ce.setMin((inst.isMissing(inst.classIndex()) ? m_min : 0));            m_ce.setMax(m_max);            m_ce.setDataPoint(m_dataPoint);            m_ce.setReset(m_reset);            m_reset=false;          }          notifyChartListeners(m_ce);        }        m_throughput.updateEnd(m_logger);      }      if (ce.getStatus() == IncrementalClassifierEvent.BATCH_FINISHED || inst == null) {        if (m_logger != null) {          m_logger.logMessage("[IncrementalClassifierEvaluator]" + statusMessagePrefix() + " Finished processing.");        }        m_throughput.finished(m_logger);        m_windowEval=null;        m_window=null;        m_windowedPreds=null;        if (m_textListeners.size() > 0) {          String textTitle=ce.getClassifier().getClass().getName();          textTitle=textTitle.substring(textTitle.lastIndexOf('.') + 1,textTitle.length());          String results="=== Performance information ===\n\n" + "Scheme:   " + textTitle + "\n"+ "Relation: "+ m_eval.getHeader().relationName()+ "\n\n"+ m_eval.toSummaryString();          if (m_eval.getHeader().classIndex() >= 0 && m_eval.getHeader().classAttribute().isNominal() && (m_outputInfoRetrievalStats)) {            results+="\n" + m_eval.toClassDetailsString();          }          if (m_eval.getHeader().classIndex() >= 0 && m_eval.getHeader().classAttribute().isNominal()) {            results+="\n" + m_eval.toMatrixString();          }          textTitle="Results: " + textTitle;          TextEvent te=new TextEvent(this,results,textTitle);          notifyTextListeners(te);        }      }    }  } catch (  Exception ex) {    if (m_logger != null) {      m_logger.logMessage("[IncrementalClassifierEvaluator]" + statusMessagePrefix() + " Error processing prediction "+ ex.getMessage());      m_logger.statusMessage(statusMessagePrefix() + "ERROR: problem processing prediction (see log for details)");    }    ex.printStackTrace();    stop();  }}  }
class C{  public ZkConf(Map stormConf,ZkBinLogStateConfig zkBinLogStateConfig){  this.zkServers=zkBinLogStateConfig.getZkServers();  if (this.zkServers == null) {    this.zkServers=(List<String>)stormConf.get(Config.STORM_ZOOKEEPER_SERVERS);  }  this.zkPort=zkBinLogStateConfig.getZkPort();  if (this.zkPort == null) {    this.zkPort=((Number)stormConf.get(Config.STORM_ZOOKEEPER_PORT)).intValue();  }  this.zkSessionTimeout=zkBinLogStateConfig.getZkSessionTimeoutInMs();  if (this.zkSessionTimeout == null) {    this.zkSessionTimeout=((Number)stormConf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT)).intValue();  }  this.zkConnectionTimeout=zkBinLogStateConfig.getZkConnectionTimeoutInMs();  if (this.zkConnectionTimeout == null) {    this.zkConnectionTimeout=((Number)stormConf.get(Config.STORM_ZOOKEEPER_CONNECTION_TIMEOUT)).intValue();  }  this.retryTimes=zkBinLogStateConfig.getZkRetryTimes();  if (this.retryTimes == null) {    this.retryTimes=((Number)stormConf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)).intValue();  }  this.sleepMsBetweenRetries=zkBinLogStateConfig.getZkSleepMsBetweenRetries();  if (this.sleepMsBetweenRetries == null) {    this.sleepMsBetweenRetries=((Number)stormConf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)).intValue();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element cdataName;  Node cdataNode;  int nodeType;  String cdataNodeName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  cdataName=(Element)elementList.item(1);  cdataNode=cdataName.getLastChild();  nodeType=(int)cdataNode.getNodeType();  if (!equals(4,nodeType)) {    cdataNode=doc.createCDATASection("");  }  cdataNodeName=cdataNode.getNodeName();  assertEquals("cdataNodeName","#cdata-section",cdataNodeName);}  }
class C{  @Override public List<EvaluationStatistics> aggregate(List<EvaluationStatistics> stats){  List<EvaluationStatistics> result;  List<EvaluationStatistics> temp;  EvaluationStatisticsComparator comp;  int i;  try {    stats=new ArrayList<>(stats);    result=new ArrayList<>();    comp=new EvaluationStatisticsComparator(Utils.splitOptions(m_AggregationKeys));    Collections.sort(stats,comp);    i=0;    temp=new ArrayList<>();    while (i < stats.size()) {      if ((temp.size() == 0) || (comp.compare(temp.get(temp.size() - 1),stats.get(i)) == 0)) {        temp.add(stats.get(i));        i++;      } else {        result.add(doAggregate(temp));        temp.clear();      }    }    if (temp.size() > 0)     result.add(doAggregate(temp));  } catch (  Exception e) {    result=stats;    handleException("Failed to aggregate!",e);  }  return result;}  }
class C{  @Override public Long put(Integer key,Long value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public Vector3(Vector2 vector){  this(vector,0);}  }
class C{  private void addTerm(String term){  Integer index=termToIndex.get(term);  if (index == null) {synchronized (this) {      index=termToIndex.get(term);      if (index == null) {        index=Integer.valueOf(termIndexCounter.getAndIncrement());        termToIndex.put(term,index);      }    }  }}  }
class C{  public Boolean isIpV6Enabled(){  return ipV6Enabled;}  }
class C{  public HostConfig(String address,String port,String api,String user){  this.setAddress(address);  this.setPort(port);  this.setApi(api);  this.setUser(user);}  }
class C{  void reread(ProgressListener listener) throws DataSetException {  DateFormat originalDateFormat=originalDataSourceMetaData.getDateFormat();  originalDataSourceMetaData.setDateFormat(metaData.getDateFormat());  try {    read(dataSet,listener);  }  finally {    originalDataSourceMetaData.setDateFormat(originalDateFormat);  }}  }
class C{  public static void attribute(String name,int value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public boolean checkAfterCondition(Set<MultiKey<EventBean>> newEvents,StatementContext statementContext){  return afterConditionState.checkUpdateAfterCondition(newEvents,statementContext);}  }
class C{  @Override protected boolean updateSlaveDocument(IDocument slaveDocument,int modelRangeOffset,int modelRangeLength) throws BadLocationException {  if (slaveDocument instanceof ProjectionDocument) {    ProjectionDocument projection=(ProjectionDocument)slaveDocument;    int offset=modelRangeOffset;    int length=modelRangeLength;    if (!isProjectionMode()) {      IDocument master=projection.getMasterDocument();      int line=master.getLineOfOffset(modelRangeOffset);      offset+=master.getLineOffset(line);      length=(modelRangeOffset - offset) + modelRangeLength;    }    try {      setPrivateHandleProjectionChangesField(false);      projection.replaceMasterDocumentRanges(offset,length);    }  finally {      setPrivateHandleProjectionChangesField(true);    }    return true;  }  return false;}  }
class C{  public void moveBy(int offset){  cursor+=offset;}  }
class C{  protected void updateDocumentStructures(DocumentEvent event){  if (fDocumentPartitioners != null) {    fDocumentPartitioningChangedEvent=new DocumentPartitioningChangedEvent(this);    Iterator<String> e=fDocumentPartitioners.keySet().iterator();    while (e.hasNext()) {      String partitioning=e.next();      DocumentPartitioner partitioner=(DocumentPartitioner)fDocumentPartitioners.get(partitioning);      if (partitioner.documentChanged(event))       fDocumentPartitioningChangedEvent.setPartitionChange(partitioning,0,event.getDocument().getLength());    }  }  if (fPositions.size() > 0)   updatePositions(event);}  }
class C{  public static long deepMemoryUsageOf(Instrumentation inst,final Object obj,final int referenceFilter){  return deepMemoryUsageOf0(inst,new HashSet<Integer>(),obj,referenceFilter);}  }
class C{  public static PricedProductRole toPricedProductRole(VOPricedRole pricedProductRole) throws ValidationException {  PricedProductRole result=new PricedProductRole();  validatePricedProductRole(pricedProductRole);  copyAttributes(pricedProductRole,result);  return result;}  }
class C{  public void print(PrintStream out){  out.print("Regexp pool:\n");  if (suffixMachine.firstchild != null) {    out.print(" Suffix machine: ");    suffixMachine.firstchild.print(out);    out.print("\n");  }  if (prefixMachine.firstchild != null) {    out.print(" Prefix machine: ");    prefixMachine.firstchild.print(out);    out.print("\n");  }}  }
class C{  public static boolean isLegalPropertyKey(String key){  return (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS) || key.equals(OutputKeys.DOCTYPE_PUBLIC) || key.equals(OutputKeys.DOCTYPE_SYSTEM)|| key.equals(OutputKeys.ENCODING)|| key.equals(OutputKeys.INDENT)|| key.equals(OutputKeys.MEDIA_TYPE)|| key.equals(OutputKeys.METHOD)|| key.equals(OutputKeys.OMIT_XML_DECLARATION)|| key.equals(OutputKeys.STANDALONE)|| key.equals(OutputKeys.VERSION)|| (key.length() > 0) && (key.charAt(0) == '{') && (key.lastIndexOf('{') == 0)&& (key.indexOf('}') > 0)&& (key.lastIndexOf('}') == key.indexOf('}')));}  }
class C{  public static void registerProjects(List<File> projectLocations,FileBasedWorkspace fbWorkspace) throws N4JSCompileException {  List<File> absProjectRoots=HeadlessHelper.toAbsoluteFileList(projectLocations);  ArrayList<File> pDir=HeadlessHelper.collectAllProjectPaths(absProjectRoots);  ArrayList<URI> projectURIs=new ArrayList<>(pDir.size());  for (  File pdir : pDir) {    URI puri=URI.createFileURI(pdir.toString());    projectURIs.add(puri);    try {      fbWorkspace.registerProject(puri);    } catch (    N4JSBrokenProjectException e) {      throw new N4JSCompileException("Unable to register project '" + puri + "'",e);    }  }}  }
class C{  public static boolean isJarURL(URL url){  String protocol=url.getProtocol();  return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol)|| URL_PROTOCOL_WSJAR.equals(protocol)|| (URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)));}  }
class C{  public void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public char[] toChars(char[] existingArray,int[] outLen){  byte[] sig=mSignature;  final int N=sig.length;  final int N2=N * 2;  char[] text=existingArray == null || N2 > existingArray.length ? new char[N2] : existingArray;  for (int j=0; j < N; j++) {    byte v=sig[j];    int d=(v >> 4) & 0xf;    text[j * 2]=(char)(d >= 10 ? ('a' + d - 10) : ('0' + d));    d=v & 0xf;    text[j * 2 + 1]=(char)(d >= 10 ? ('a' + d - 10) : ('0' + d));  }  if (outLen != null)   outLen[0]=N;  return text;}  }
class C{  public final void addException(Throwable cause){  Assert.assertTrue(cause != null,"unexpected null exception to add to FunctionException");  getExceptions().add(cause);}  }
class C{  public int search(final CharList list,final int from,final int to){  final int n=pattern.length;  if (n == 0)   return from > to ? to : (from < 0 ? 0 : from);  if (n == 1)   return list.subList(from,to).indexOf(pattern[0]);  final char[] p=pattern;  final char last=p[n - 1];  final int m1=to - 1;  final int[] shift=badCharShift;  final int[] asciiShift=asciiBadCharShift;  final int m=mask;  final int hs=hashShift;  int i=(from < 0 ? 0 : from) + n - 1, j, k;  char c;  if (caseSensitive) {    while (i < m1) {      if (list.getChar(i) == last) {        j=n - 1;        k=i;        while (j-- != 0 && list.getChar(--k) == p[j])         ;        if (j < 0)         return k;      }      if ((c=list.getChar(++i)) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && list.getChar(i--) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else   if (asciiCase) {    while (i < m1) {      if (asciiToLowerCase(list.getChar(i)) == last) {        j=n - 1;        k=i;        while (j-- != 0 && asciiToLowerCase(list.getChar(--k)) == p[j])         ;        if (j < 0)         return k;      }      if ((c=asciiToLowerCase(list.getChar(++i))) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && asciiToLowerCase(list.getChar(i--)) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else {    while (i < m1) {      if (unicodeToLowerCase(list.getChar(i)) == last) {        j=n - 1;        k=i;        while (j-- != 0 && unicodeToLowerCase(list.getChar(--k)) == p[j])         ;        if (j < 0)         return k;      }      if ((c=unicodeToLowerCase(list.getChar(++i))) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && unicodeToLowerCase(list.getChar(i--)) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  }}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  process(request,response);}  }
class C{  public static void main(String[] args) throws Exception {  initializeLogging();  Arguments arguments=Arguments.parseArguments(args);  TestRunner runner=new TestRunner(arguments);  List<TestStats> testStats=runner.run();  printTestStats(testStats);  LoggingFactory.detachAndStop();}  }
class C{  public void testUnsizedIntsCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.ints().limit(size).forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public static void createBackup(String backupTag,BackupHandler newBackupHandler){  if (backupTag == null || newBackupHandler == null) {    return;  }  BackupHandler backupHandler=backupManager.getBackupHandler();  try {    backupManager.setBackupHandler(newBackupHandler);    backupManager.create(backupTag);  }  finally {    backupManager.setBackupHandler(backupHandler);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy.isServerConfiguredPlugin()) {    stack.push(pluggy);    return makeNetworkedCall(stack);  } else   return (pluggy != null && sage.plugin.CorePluginManager.getInstance().isPluginEnabled(pluggy.getId(),stack.getUIMgr())) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void removeDevice(Versioned<DeviceSyncRepresentation> dev){  try {    cntDeviceRemovedFromStore.increment();    storeClient.delete(dev.getValue().getKey(),dev.getVersion());  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to remove device entry for " + dev.toString() + " from store.",e);  }}  }
class C{  public void systemExit(int status){  try {    sendShutdownMessage();    Thread.sleep(1 * 20 * 1000);    Long timeAlive=System.currentTimeMillis() - startUpTime;    workerState.setTimeAliveMillis(timeAlive);    workerState.setWorkerStatus("COMPLETED");    sendWorkerStateMessage(workerState);    System.out.println(workerState.toString());    LOGGER.debug("Ending WorkerImpl run");  } catch (  InterruptedException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    if (status != 0) {      System.err.println("Interproscan worker failed. Exception thrown by WorkerImpl. Check the log file for details");    }    System.exit(status);  }  System.exit(status);}  }
class C{  public static CostMatrix parseMatlab(String matlab) throws Exception {  StringTokenizer tokRow;  StringTokenizer tokCol;  int rows;  int cols;  CostMatrix result;  String cells;  cells=matlab.substring(matlab.indexOf("[") + 1,matlab.indexOf("]")).trim();  tokRow=new StringTokenizer(cells,";");  rows=tokRow.countTokens();  tokCol=new StringTokenizer(tokRow.nextToken()," ");  cols=tokCol.countTokens();  result=new CostMatrix(rows);  tokRow=new StringTokenizer(cells,";");  rows=0;  while (tokRow.hasMoreTokens()) {    tokCol=new StringTokenizer(tokRow.nextToken()," ");    cols=0;    while (tokCol.hasMoreTokens()) {      String current=tokCol.nextToken();      try {        double val=Double.parseDouble(current);        result.setCell(rows,cols,new Double(val));      } catch (      NumberFormatException e) {        result.setCell(rows,cols,current);      }      cols++;    }    rows++;  }  return result;}  }
class C{  public static boolean remove(Context c){  File fEnvDir=new File(PrefStore.getEnvDir(c));  if (!fEnvDir.exists()) {    return false;  }  cleanDirectory(fEnvDir);  return true;}  }
class C{  public static <V,E>UnmodifiableForest<V,E> unmodifiableForest(Forest<V,E> forest){  return new UnmodifiableForest<V,E>(forest);}  }
class C{  protected void processAttList(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  if (!XMLUtil.checkLiteral(reader,"TTLIST")) {    XMLUtil.skipTag(reader);    return;  }  XMLUtil.skipWhitespace(reader,null);  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  while (ch == '%') {    XMLUtil.processEntity(str,reader,this.parameterEntityResolver);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);  }  reader.unread(ch);  String elementName=XMLUtil.scanIdentifier(reader);  XMLUtil.skipWhitespace(reader,null);  str=XMLUtil.read(reader,'%');  ch=str.charAt(0);  while (ch == '%') {    XMLUtil.processEntity(str,reader,this.parameterEntityResolver);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);  }  Properties props=new Properties();  while (ch != '>') {    reader.unread(ch);    String attName=XMLUtil.scanIdentifier(reader);    XMLUtil.skipWhitespace(reader,null);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);    while (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      str=XMLUtil.read(reader,'%');      ch=str.charAt(0);    }    if (ch == '(') {      while (ch != ')') {        str=XMLUtil.read(reader,'%');        ch=str.charAt(0);        while (ch == '%') {          XMLUtil.processEntity(str,reader,this.parameterEntityResolver);          str=XMLUtil.read(reader,'%');          ch=str.charAt(0);        }      }    } else {      reader.unread(ch);      XMLUtil.scanIdentifier(reader);    }    XMLUtil.skipWhitespace(reader,null);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);    while (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      str=XMLUtil.read(reader,'%');      ch=str.charAt(0);    }    if (ch == '#') {      str=XMLUtil.scanIdentifier(reader);      XMLUtil.skipWhitespace(reader,null);      if (!str.equals("FIXED")) {        XMLUtil.skipWhitespace(reader,null);        str=XMLUtil.read(reader,'%');        ch=str.charAt(0);        while (ch == '%') {          XMLUtil.processEntity(str,reader,this.parameterEntityResolver);          str=XMLUtil.read(reader,'%');          ch=str.charAt(0);        }        continue;      }    } else {      reader.unread(ch);    }    String value=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);    props.put(attName,value);    XMLUtil.skipWhitespace(reader,null);    str=XMLUtil.read(reader,'%');    ch=str.charAt(0);    while (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      str=XMLUtil.read(reader,'%');      ch=str.charAt(0);    }  }  if (!props.isEmpty()) {    this.attributeDefaultValues.put(elementName,props);  }}  }
class C{  protected void logFailedStatementSQL(String sql,SQLException ex){  try {    String log="Statement failed: " + sql;    if (log.length() > maxSQLLogLength)     log=log.substring(0,maxSQLLogLength);    logger.error(log);    if (ex != null && ex.getCause() != null && ex.getCause() instanceof SQLException) {      SQLException nextException=((SQLException)ex.getCause()).getNextException();      if (nextException != null) {        logger.error(nextException.getMessage());      }    }  } catch (  Exception e) {    if (logger.isDebugEnabled())     logger.debug("logFailedStatementSQL failed to log, because: " + e.getMessage());  }}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  static void testIfaceImplement(ClassLoader loader){  Class ifaceImplClass;  Object obj;  try {    ifaceImplClass=loader.loadClass("IfaceImpl");    ifaceImplClass=loader.loadClass("DoubledImplement2");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=ifaceImplClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on IDI (early)");    return;  }  IfaceSuper ifaceSuper=(IfaceSuper)obj;  DoubledImplement2 di2=ifaceSuper.getDoubledInstance2();  di2.one();}  }
class C{  private static BigInteger expandBigIntegerTenPowers(int n){synchronized (BigDecimal.class) {    BigInteger[] pows=BIG_TEN_POWERS_TABLE;    int curLen=pows.length;    if (curLen <= n) {      int newLen=curLen << 1;      while (newLen <= n)       newLen<<=1;      pows=Arrays.copyOf(pows,newLen);      for (int i=curLen; i < newLen; i++)       pows[i]=pows[i - 1].multiply(BigInteger.TEN);      BIG_TEN_POWERS_TABLE=pows;    }    return pows[n];  }}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  double min=mRenderer.getMinValue();  double max=mRenderer.getMaxValue();  double angleMin=mRenderer.getAngleMin();  double angleMax=mRenderer.getAngleMax();  if (!mRenderer.isMinValueSet() || !mRenderer.isMaxValueSet()) {    int count=mRenderer.getSeriesRendererCount();    for (int i=0; i < count; i++) {      double value=mDataset.getValue(i);      if (!mRenderer.isMinValueSet()) {        min=Math.min(min,value);      }      if (!mRenderer.isMaxValueSet()) {        max=Math.max(max,value);      }    }  }  if (min == max) {    min=min * 0.5;    max=max * 1.5;  }  paint.setColor(mRenderer.getLabelsColor());  double minorTicks=mRenderer.getMinorTicksSpacing();  double majorTicks=mRenderer.getMajorTicksSpacing();  if (minorTicks == MathHelper.NULL_VALUE) {    minorTicks=(max - min) / 30;  }  if (majorTicks == MathHelper.NULL_VALUE) {    majorTicks=(max - min) / 10;  }  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,radius,minorTicks,paint,false);  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,shortRadius,majorTicks,paint,true);  int count=mRenderer.getSeriesRendererCount();  for (int i=0; i < count; i++) {    double angle=getAngleForValue(mDataset.getValue(i),angleMin,angleMax,min,max);    paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());    boolean type=mRenderer.getVisualTypeForIndex(i) == Type.ARROW;    drawNeedle(canvas,angle,mCenterX,mCenterY,shortRadius,type,paint);  }  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  public static void main(String[] args){  try {    if (args.length < 2) {      System.out.println("Arguments not valid : {model, folder}.");    } else {      URI modelURI=URI.createFileURI(args[0]);      File folder=new File(args[1]);      List<String> arguments=new ArrayList<String>();      GenerateXmlRoutes generator=new GenerateXmlRoutes(modelURI,folder,arguments);      for (int i=2; i < args.length; i++) {        generator.addPropertiesFile(args[i]);      }      generator.doGenerate(new BasicMonitor());    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void analyze(){  final Resources resources=new ProjectAnalyzer(classPaths.toArray(new Path[classPaths.size()])).analyze(projectPaths.toArray(new Path[projectPaths.size()]));  if (resources.isEmpty()) {    LogProvider.info("Empty JAX-RS analysis result, omitting output");    return;  }  final Project project=new Project(projectName,projectVersion,resources);  final String output=backend.render(project);  if (outputLocation != null) {    outputToFile(output,outputLocation);  } else {    System.out.println(output);  }}  }
class C{  protected void engineInit(AlgorithmParameterSpec genParamSpec,SecureRandom random) throws InvalidAlgorithmParameterException {  if (!(genParamSpec instanceof DSAGenParameterSpec)) {    throw new InvalidAlgorithmParameterException("Invalid parameter");  }  DSAGenParameterSpec dsaGenParams=(DSAGenParameterSpec)genParamSpec;  int primePLen=dsaGenParams.getPrimePLength();  if (primePLen > 2048) {    throw new InvalidParameterException("No support for prime size " + primePLen);  }  this.valueL=primePLen;  this.valueN=dsaGenParams.getSubprimeQLength();  this.seedLen=dsaGenParams.getSeedLength();  this.random=random;}  }
class C{  protected String doIt() throws java.lang.Exception {  if (p_EMailPDF && p_R_MailText_ID == 0)   throw new AdempiereUserError("@NotFound@: @R_MailText_ID@");  log.info("C_BPartner_ID=" + m_C_BPartner_ID + ", C_Invoice_ID="+ m_C_Invoice_ID+ ", EmailPDF="+ p_EMailPDF+ ",R_MailText_ID="+ p_R_MailText_ID+ ", DateInvoiced="+ m_dateInvoiced_From+ "-"+ m_dateInvoiced_To+ ", DocumentNo="+ m_DocumentNo_From+ "-"+ m_DocumentNo_To);  MMailText mText=null;  if (p_R_MailText_ID != 0) {    mText=new MMailText(getCtx(),p_R_MailText_ID,get_TrxName());    if (mText.get_ID() != p_R_MailText_ID)     throw new AdempiereUserError("@NotFound@: @R_MailText_ID@ - " + p_R_MailText_ID);  }  if (m_C_BPartner_ID == 0 && m_C_Invoice_ID == 0 && m_dateInvoiced_From == null && m_dateInvoiced_To == null && m_DocumentNo_From == null && m_DocumentNo_To == null)   throw new AdempiereUserError("@RestrictSelection@");  MClient client=MClient.get(getCtx());  StringBuffer sql=new StringBuffer("SELECT i.C_Invoice_ID,bp.AD_Language,c.IsMultiLingualDocument," + " COALESCE(bp.Invoice_PrintFormat_ID, dt.AD_PrintFormat_ID, pf.Invoice_PrintFormat_ID)," + " dt.DocumentCopies+bp.DocumentCopies,"+ " bpc.AD_User_ID, i.DocumentNo,"+ " bp.C_BPartner_ID "+ "FROM C_Invoice i"+ " INNER JOIN C_BPartner bp ON (i.C_BPartner_ID=bp.C_BPartner_ID)"+ " LEFT OUTER JOIN AD_User bpc ON (i.AD_User_ID=bpc.AD_User_ID)"+ " INNER JOIN AD_Client c ON (i.AD_Client_ID=c.AD_Client_ID)"+ " INNER JOIN AD_PrintForm pf ON (i.AD_Client_ID=pf.AD_Client_ID)"+ " INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"+ " WHERE i.AD_Client_ID=? AND i.AD_Org_ID=? AND i.isSOTrx='Y' AND "+ "       pf.AD_Org_ID IN (0,i.AD_Org_ID) AND ");  boolean needAnd=false;  if (m_C_Invoice_ID != 0)   sql.append("i.C_Invoice_ID=").append(m_C_Invoice_ID); else {    if (m_C_BPartner_ID != 0) {      sql.append("i.C_BPartner_ID=").append(m_C_BPartner_ID);      needAnd=true;    }    if (m_dateInvoiced_From != null && m_dateInvoiced_To != null) {      if (needAnd)       sql.append(" AND ");      sql.append("TRUNC(i.DateInvoiced, 'DD') BETWEEN ").append(DB.TO_DATE(m_dateInvoiced_From,true)).append(" AND ").append(DB.TO_DATE(m_dateInvoiced_To,true));      needAnd=true;    } else     if (m_dateInvoiced_From != null) {      if (needAnd)       sql.append(" AND ");      sql.append("TRUNC(i.DateInvoiced, 'DD') >= ").append(DB.TO_DATE(m_dateInvoiced_From,true));      needAnd=true;    } else     if (m_dateInvoiced_To != null) {      if (needAnd)       sql.append(" AND ");      sql.append("TRUNC(i.DateInvoiced, 'DD') <= ").append(DB.TO_DATE(m_dateInvoiced_To,true));      needAnd=true;    } else     if (m_DocumentNo_From != null && m_DocumentNo_To != null) {      if (needAnd)       sql.append(" AND ");      sql.append("i.DocumentNo BETWEEN ").append(DB.TO_STRING(m_DocumentNo_From)).append(" AND ").append(DB.TO_STRING(m_DocumentNo_To));    } else     if (m_DocumentNo_From != null) {      if (needAnd)       sql.append(" AND ");      if (m_DocumentNo_From.indexOf('%') == -1)       sql.append("i.DocumentNo >= ").append(DB.TO_STRING(m_DocumentNo_From)); else       sql.append("i.DocumentNo LIKE ").append(DB.TO_STRING(m_DocumentNo_From));    }    if (p_EMailPDF) {      if (needAnd) {        sql.append(" AND ");      }      sql.append("i.DocStatus IN ('CO','CL') ");    }  }  sql.append(" ORDER BY i.C_Invoice_ID, pf.AD_Org_ID DESC");  log.fine(sql.toString());  MPrintFormat format=null;  int old_AD_PrintFormat_ID=-1;  int old_C_Invoice_ID=-1;  int C_BPartner_ID=0;  int count=0;  int errors=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  List<File> pdfList=new ArrayList<File>();  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    pstmt.setInt(1,Env.getAD_Client_ID(Env.getCtx()));    pstmt.setInt(2,Env.getAD_Org_ID(Env.getCtx()));    rs=pstmt.executeQuery();    while (rs.next()) {      int C_Invoice_ID=rs.getInt(1);      if (C_Invoice_ID == old_C_Invoice_ID)       continue;      old_C_Invoice_ID=C_Invoice_ID;      Language language=Language.getLoginLanguage();      String AD_Language=rs.getString(2);      if (AD_Language != null && "Y".equals(rs.getString(3)))       language=Language.getLanguage(AD_Language);      int AD_PrintFormat_ID=rs.getInt(4);      int copies=rs.getInt(5);      if (copies == 0)       copies=1;      int AD_User_ID=rs.getInt(6);      MUser to=new MUser(getCtx(),AD_User_ID,get_TrxName());      String DocumentNo=rs.getString(7);      C_BPartner_ID=rs.getInt(8);      String documentDir=client.getDocumentDir();      if (documentDir == null || documentDir.length() == 0)       documentDir=".";      if (p_EMailPDF && (to.get_ID() == 0 || to.getEMail() == null || to.getEMail().length() == 0)) {        addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailNoTo@");        errors++;        continue;      }      if (AD_PrintFormat_ID == 0) {        addLog(C_Invoice_ID,null,null,DocumentNo + " No Print Format");        errors++;        continue;      }      if (AD_PrintFormat_ID != old_AD_PrintFormat_ID) {        format=MPrintFormat.get(getCtx(),AD_PrintFormat_ID,false);        old_AD_PrintFormat_ID=AD_PrintFormat_ID;      }      format.setLanguage(language);      format.setTranslationLanguage(language);      MQuery query=new MQuery("C_Invoice_Header_v");      query.addRestriction("C_Invoice_ID",MQuery.EQUAL,new Integer(C_Invoice_ID));      PrintInfo info=new PrintInfo(DocumentNo,X_C_Invoice.Table_ID,C_Invoice_ID,C_BPartner_ID);      info.setCopies(copies);      ReportEngine re=new ReportEngine(getCtx(),format,query,info);      boolean printed=false;      if (p_EMailPDF) {        String subject=mText.getMailHeader() + " - " + DocumentNo;        EMail email=client.createEMail(to.getEMail(),subject,null);        if (!email.isValid()) {          addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailError@ Invalid EMail: " + to);          errors++;          continue;        }        mText.setUser(to);        mText.setBPartner(C_BPartner_ID);        mText.setPO(new MInvoice(getCtx(),C_Invoice_ID,get_TrxName()));        String message=mText.getMailText(true);        if (mText.isHtml())         email.setMessageHTML(subject,message); else {          email.setSubject(subject);          email.setMessageText(message);        }        File invoice=null;        if (!Ini.isClient())         invoice=new File(MInvoice.getPDFFileName(documentDir,C_Invoice_ID));        File attachment=re.getPDF(invoice);        log.fine(to + " - " + attachment);        email.addAttachment(attachment);        String msg=email.send();        MUserMail um=new MUserMail(mText,getAD_User_ID(),email);        um.saveEx();        if (msg.equals(EMail.SENT_OK)) {          addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailOK@ - " + to.getEMail());          count++;          printed=true;        } else {          addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailError@ " + msg+ " - "+ to.getEMail());          errors++;        }      } else {        pdfList.add(re.getPDF());        count++;        printed=true;      }      if (printed) {        StringBuffer sb=new StringBuffer("UPDATE C_Invoice " + "SET DatePrinted=SysDate, IsPrinted='Y' WHERE C_Invoice_ID=").append(C_Invoice_ID);        DB.executeUpdateEx(sb.toString(),get_TrxName());      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"doIt - " + sql,e);    throw new Exception(e);  } finally {    DB.close(rs,pstmt);  }  if (pdfList.size() > 1) {    try {      File outFile=File.createTempFile("InvoicePrint",".pdf");      AEnv.mergePdf(pdfList,outFile);      Clients.showBusy(null,false);      Window win=new SimplePDFViewer(this.getName(),new FileInputStream(outFile));      win.setAttribute(Window.MODE_KEY,Window.MODE_HIGHLIGHTED);      SessionManager.getAppDesktop().showWindow(win,"center");    } catch (    Exception e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);    }  } else   if (pdfList.size() > 0) {    Clients.showBusy(null,false);    try {      Window win=new SimplePDFViewer(this.getName(),new FileInputStream(pdfList.get(0)));      win.setAttribute(Window.MODE_KEY,Window.MODE_HIGHLIGHTED);      SessionManager.getAppDesktop().showWindow(win,"center");    } catch (    Exception e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);    }  }  if (p_EMailPDF)   return "@Sent@=" + count + " - @Errors@="+ errors;  return "@Printed@=" + count;}  }
class C{  private static Element addAddressPersona(Element persona,String sessionID,String entidad) throws AttributesException, ValidationException, SessionException {  for (Iterator iter=persona.elementIterator(); iter.hasNext(); ) {    Element element=(Element)iter.next();    if (XML_ID_TEXT.equalsIgnoreCase(element.getQName().getName())) {      Element parent=element.getParent();      if (parent != null) {        NodeComparator nodeComparator=new NodeComparator();        if (nodeComparator.compare(parent,persona) == 0) {          String idValue=element.getText();          String xmlAddress=getAddress(idValue,sessionID,entidad);          String xmlAddressTelematica=getAddressTelematica(idValue,sessionID,entidad);          Document docAddress=getAddressDocument(xmlAddress);          if (docAddress != null) {            persona=addDomicilioFromDocumentAddress(persona,docAddress);          }          Document docAddressTel=getAddressDocument(xmlAddressTelematica);          if (docAddressTel != null) {            persona=addTelematicaFromDocumentAddress(persona,docAddressTel);          }        }      }      break;    }  }  return persona;}  }
class C{  private void loadTemplateBytes() throws IOException {  String resourceName='/' + templateClass.getName().replace('.','/') + ".class";  try (InputStream in=ConverterPropertyEditorFactory.class.getResourceAsStream(resourceName)){    if (in != null) {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      byte[] buff=new byte[1024];      int more;      while ((more=in.read(buff)) > 0) {        baos.write(buff,0,more);      }      templateBytes=baos.toByteArray();      assert templateBytes.length > 9;      assert templateBytes[0] == (byte)0xCA;      assert templateBytes[1] == (byte)0xFE;      assert templateBytes[2] == (byte)0xBA;      assert templateBytes[3] == (byte)0xBE;      constant_pool_count=((templateBytes[8] & 0xff) << 8) + (templateBytes[9] & 0xff);    }  } }  }
class C{  public GenericEntry createAlias(String aliasEmail,String userEmail) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("userEmail",userEmail);  entry.addProperty("aliasEmail",aliasEmail);  return service.insert(new URL("https://apps-apis.google.com/a/feeds/alias/2.0/" + domain),entry);}  }
class C{  public static void main(String[] args){  TestSummaryHeading tester=new TestSummaryHeading();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public JPaymentFree(JPaymentNotifier notifier){  m_notifier=notifier;  initComponents();}  }
class C{  @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){  Log.e(key,key);  if (getKey().equalsIgnoreCase(key)) {    mCurrentValue=sharedPreferences.getInt(key,mCurrentValue);    persistInt(mCurrentValue);    updateShownColor();  }}  }
class C{  int write(byte[] buff,int offset,int len){  int max=Math.min(remaining,len);  data.write(buff,offset,max);  remaining-=max;  return max;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Feed.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addUndeclaredElementMarker();  builder.addElement(EventEntry.KEY);  registry.adapt(Feed.KEY,KIND,KEY);}  }
class C{  static public EventBTree create(final IRawStore store){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(EventBTree.class.getName());  metadata.setTupleSerializer(new EventBTreeTupleSerializer(new ASCIIKeyBuilderFactory(Bytes.SIZEOF_LONG)));  return (EventBTree)BTree.create(store,metadata);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Long(a == null ? 0 : a.getEndTime());}  }
class C{  public static DataWrapper serializableInstance(){  return new DataWrapper(new Parameters());}  }
class C{  @Override public void mouseClicked(int par1,int par2,int par3){  super.mouseClicked(par1,par2,par3);  this.textFieldAlarmRange.mouseClicked(par1 - containerPosX,par2 - containerPosY,par3);  this.textFieldSafetyZone.mouseClicked(par1 - containerPosX,par2 - containerPosY,par3);  this.textFieldFrequency.mouseClicked(par1 - containerPosX,par2 - containerPosY,par3);}  }
class C{  public void release(){  if (openCursors != null) {    List<Long> cursorIds=new ArrayList<Long>(openCursors.size());    for (    long id : openCursors.keySet()) {      cursorIds.add(id);    }    for (    long id : cursorIds) {      cursorDeallocate(id);    }  }  if (byteCache != null) {    this.byteCache.deallocate(key);    this.byteCache=null;  }}  }
class C{  public void ensureCapacity(int capacity){  if (capacity > _data.length) {    int newCap=Math.max(_data.length << 1,capacity);    long[] tmp=new long[newCap];    System.arraycopy(_data,0,tmp,0,_data.length);    _data=tmp;  }}  }
class C{  public final CC shrinkPrioX(int p){  hor.setShrinkPriority(p);  return this;}  }
class C{  public void testOrderedByTypeMapping() throws Exception {  List typeNames=getTypeNamesInOrder();  int sqlVariantIndex=typeNames.indexOf("sql_variant");  if (sqlVariantIndex != -1) {    checkOrder(typeNames,"varchar","sql_variant");  }  checkOrder(typeNames,"varchar","nvarchar");  checkOrder(typeNames,"varchar","sysname");  checkOrder(typeNames,"bigint","bigint identity");}  }
class C{  public static void clearSentenceMeta(Vertex question,Vertex answer,Primitive type,Network network){  Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);  if (relationship != null && relationship.hasMeta()) {    relationship.getMeta().internalRemoveRelationships(type);  }  network.checkReduction(question);  Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);  if (synonyms != null) {    for (    Relationship synonym : synonyms) {      relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);      if (relationship != null && relationship.hasMeta()) {        relationship.getMeta().internalRemoveRelationships(type);      }    }  }}  }
class C{  public boolean match(ACLRule r){  if ((this.tp_dst == r.tp_dst || r.tp_dst == 0) && (this.nw_proto == r.nw_proto || r.nw_proto == 0) && (isSubnet(this.getNw_src(),r.getNw_src()) == true)&& (isSubnet(this.getNw_dst(),r.getNw_dst()) == true)) {    return true;  }  return false;}  }
class C{  @Override public Token recoverInline(Parser recognizer) throws RecognitionException {  InputMismatchException e=new InputMismatchException(recognizer);  for (ParserRuleContext context=recognizer.getContext(); context != null; context=context.getParent()) {    context.exception=e;  }  return super.recoverInline(recognizer);}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  public T colspan(String value){  return attr("colspan",value);}  }
class C{  public final DoubleGrid2D floor(){  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     fieldx[y]=Math.floor(fieldx[y]);  }  return this;}  }
class C{  private void deleteUnsortedLifecycleMethods(Collection<PsiMethod> methods){  for (  PsiMethod method : methods)   method.delete();}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public static double blackFormulastddevDerivative(final PlainVanillaPayoff payoff,@Real final double forward,@StdDev final double stddev,@DiscountFactor final double discount){  return blackFormulaStdDevDerivative(payoff,forward,stddev,discount,0.0);}  }
class C{  @Override public final int read() throws IOException {  ByteBuffer bb=waitForAvailableData();  return (bb.get() & 0xff);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void appendDash(StringBuilder state){  state.append(" &ndash; ");}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:29.393 -0500",hash_original_method="7E46CBF823F769C000B50BD24A037D73",hash_generated_method="734D35A9074C3333BADCEA23C260DABC") public void assignContactFromEmail(String emailAddress,boolean lazyLookup){  mContactEmail=emailAddress;  if (!lazyLookup) {    mQueryHandler.startQuery(TOKEN_EMAIL_LOOKUP,null,Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI,Uri.encode(mContactEmail)),EMAIL_LOOKUP_PROJECTION,null,null,null);  } else {    mContactUri=null;    onContactUriChanged();  }}  }
class C{  public String toYaml(ComposeEnvironmentImpl composeEnvironment) throws IllegalArgumentException {  checkNotNull(composeEnvironment,"Compose environment should not be null");  try {    return YAML_PARSER.writeValueAsString(composeEnvironment);  } catch (  JsonProcessingException e) {    throw new IllegalArgumentException(e.getLocalizedMessage(),e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__ORIGINAL_TARGET:    setOriginalTarget((IdentifiableElement)newValue);  return;case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__IMPORT_SPECIFIER:setImportSpecifier((ImportSpecifier)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Tree(int root,int[] parent,List<Integer> searchOrder){  this.root=root;  this.parent=parent;  this.searchOrder=searchOrder;}  }
class C{  public CardLayout(int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;}  }
class C{  public SootMethod addGetCharSequence_ID(Integer intId){  if (intId == null) {    logger.warn("addGetCharSequence_ID null ");    return null;  }  SootField sootField=resolveStringMember(intId);  if (sootField == null) {    logger.warn("Cannot create String field for {} ",String.format("%x",intId));    return null;  }  String stringName=mNumberToIDMap.get(intId);  Set<RString> rvalueSet=mStringToValueSet.get(stringName);  if (rvalueSet == null || rvalueSet.size() == 0) {    logger.warn("String {} has no values ",stringName);    return null;  }  List<Type> params=new LinkedList<Type>();  RefType returnType=(RefType)sootField.getType();  String methodName="getCharSequence_" + String.format("%x",intId);  SootMethod method=null;  try {    method=mSootClass.getMethodByName(methodName);  } catch (  Exception ex) {  }  if (method != null)   return method;  method=new SootMethod(methodName,params,returnType,Modifier.PUBLIC | Modifier.STATIC);  mSootClass.addMethod(method);  API.v().addSafeMethod(method);  JimpleBody body=Jimple.v().newBody(method);  method.setActiveBody(body);  Chain<Unit> units=body.getUnits();  Local localString=Jimple.v().newLocal("_$localString",returnType);  body.getLocals().add(localString);  FieldRef fieldRef=Jimple.v().newStaticFieldRef(sootField.makeRef());  units.add(Jimple.v().newAssignStmt(localString,fieldRef));  Stmt beforeIf=(Stmt)units.getLast();  if (!SootUtils.isStringType(returnType)) {    Expr newExpr=Jimple.v().newNewExpr((RefType)returnType);    units.add(Jimple.v().newAssignStmt(localString,newExpr));  }  for (  RString rstring : rvalueSet) {    units.add(Jimple.v().newAssignStmt(localString,StringConstant.v(rstring.value)));    units.add(Jimple.v().newAssignStmt(fieldRef,localString));  }  units.add(Jimple.v().newAssignStmt(localString,fieldRef));  Stmt afterIf=Jimple.v().newReturnStmt(localString);  units.add(afterIf);  ConditionExpr condExpr=Jimple.v().newNeExpr(localString,NullConstant.v());  Stmt condStmt=Jimple.v().newIfStmt(condExpr,afterIf);  logger.debug("condStmt {} ",condStmt);  units.insertAfter(condStmt,beforeIf);  return method;}  }
class C{  public void connect(int timeout) throws IOException {  if (DBG)   log("connect(timeout) EX");}  }
class C{  @Bean public SchedulerFactoryBean quartzScheduler() throws Exception {  SchedulerFactoryBean quartzScheduler=new SchedulerFactoryBean();  AutowiringQuartzSpringBeanJobFactory jobFactory=new AutowiringQuartzSpringBeanJobFactory();  jobFactory.setApplicationContext(applicationContext);  quartzScheduler.setJobFactory(jobFactory);  quartzScheduler.setSchedulerName("herdScheduler");  quartzScheduler.setDataSource(herdDataSource);  quartzScheduler.setTransactionManager(herdTransactionManager);  if (shouldCreateQuartzTables()) {    ResourceDatabasePopulator resourceDatabasePopulator=new ResourceDatabasePopulator();    resourceDatabasePopulator.addScript(new ClassPathResource("createQuartzTables.sql"));    DatabasePopulatorUtils.execute(resourceDatabasePopulator,herdDataSource);  }  Properties quartzProperties=new Properties();  quartzScheduler.setQuartzProperties(quartzProperties);  quartzProperties.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME,"herdSystemJobScheduler");  quartzProperties.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_ID,StdSchedulerFactory.AUTO_GENERATE_INSTANCE_ID);  quartzProperties.setProperty(StdSchedulerFactory.PROP_SCHED_SKIP_UPDATE_CHECK,"true");  quartzProperties.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,"org.quartz.simpl.SimpleThreadPool");  quartzProperties.setProperty("org.quartz.threadPool.threadCount",configurationHelper.getProperty(ConfigurationValue.SYSTEM_JOBS_THREAD_POOL_THREAD_COUNT));  quartzProperties.setProperty("org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread","true");  quartzProperties.setProperty("org.quartz.jobStore.tablePrefix","QRTZ_");  quartzProperties.setProperty("org.quartz.jobStore.isClustered","true");  quartzProperties.setProperty(ConfigurationValue.QUARTZ_JOBSTORE_DRIVER_DELEGATE_CLASS.getKey(),getQuartzDatabaseDelegateClass());  Map<String,AbstractSystemJob> systemJobs=applicationContext.getBeansOfType(AbstractSystemJob.class);  List<JobDetail> jobDetails=new ArrayList<>();  List<CronTrigger> triggers=new ArrayList<>();  for (  Map.Entry<String,AbstractSystemJob> entry : systemJobs.entrySet()) {    String jobName=entry.getKey();    AbstractSystemJob systemJob=entry.getValue();    JobDetail jobDetail=newJob(systemJob.getClass()).withIdentity(jobName).storeDurably().requestRecovery().build();    TriggerKey jobTriggerKey=TriggerKey.triggerKey(jobName + AbstractSystemJob.CRON_TRIGGER_SUFFIX);    CronTrigger trigger=newTrigger().withIdentity(jobTriggerKey).forJob(jobName).usingJobData(systemJob.getJobDataMap()).withSchedule(cronSchedule(systemJob.getCronExpression())).build();    jobDetails.add(jobDetail);    triggers.add(trigger);  }  quartzScheduler.setJobDetails(jobDetails.toArray(new JobDetail[jobDetails.size()]));  quartzScheduler.setTriggers(triggers.toArray(new CronTrigger[triggers.size()]));  return quartzScheduler;}  }
class C{  public String toString(){  StringBuilder str=new StringBuilder();  str.append(getEntryPoint() + "\n");  for (  OutputEvent oe : getOutputEvents()) {    str.append("\t" + oe.toString().replaceAll("\n","\n\t") + "\n");  }  return str.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ClusterRestRep update(URI id,ClusterUpdateParam input,boolean updateExports){  URI updateUri=client.uriBuilder(getIdUrl()).queryParam("update-exports",updateExports).build(id);  return client.putURI(ClusterRestRep.class,input,updateUri);}  }
class C{  public void write(final String s) throws IOException {  if (m_writer != null)   m_writer.write(s);  final int length=s.length();  int lengthx3=(length << 1) + length;  if (lengthx3 >= buf_length) {    flushBuffer();    setBufferSize(2 * lengthx3);  }  if (lengthx3 > buf_length - count) {    flushBuffer();  }  for (int i=0; i < length; i++) {    final char c=s.charAt(i);    if (c < 0x80)     buf[count++]=(byte)(c); else     if (c < 0x800) {      buf[count++]=(byte)(0xc0 + (c >> 6));      buf[count++]=(byte)(0x80 + (c & 0x3f));    } else {      buf[count++]=(byte)(0xe0 + (c >> 12));      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf[count++]=(byte)(0x80 + (c & 0x3f));    }  }}  }
class C{  public DBGroup loadGroup(Dao<DBGroup,Integer> dao) throws SQLException {  dao.refresh(group);  return group;}  }
class C{  private CacheXmlGenerator(){  this.cache=null;  this.useSchema=true;  this.version=CacheXmlVersion.valueForVersion(VERSION_LATEST);  this.generateDefaults=true;  this.creation=new CacheCreation();  creation.setLockLease(GemFireCacheImpl.DEFAULT_LOCK_LEASE);  creation.setLockTimeout(GemFireCacheImpl.DEFAULT_LOCK_TIMEOUT);  creation.setSearchTimeout(GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT);  creation.setIsServer(false);  creation.setCopyOnRead(GemFireCacheImpl.DEFAULT_COPY_ON_READ);}  }
class C{  public boolean checkInteractiveElement(SVGDocument doc,Element e){  String tag=e.getLocalName();  if (SVGConstants.SVG_A_TAG.equals(tag))   return true;  if (SVGConstants.SVG_TITLE_TAG.equals(tag)) {    return (e.getParentNode() != doc.getRootElement());  }  if (SVGConstants.SVG_DESC_TAG.equals(tag)) {    return (e.getParentNode() != doc.getRootElement());  }  if (SVGConstants.SVG_CURSOR_TAG.equals(tag))   return true;  if (e.getAttribute(CSSConstants.CSS_CURSOR_PROPERTY).length() > 0)   return true;  final String svg_ns=SVGConstants.SVG_NAMESPACE_URI;  for (Node n=e.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() == Node.ELEMENT_NODE) {      Element child=(Element)n;      if (svg_ns.equals(child.getNamespaceURI()))       if (checkInteractiveElement(child))       return true;    }  }  return false;}  }
class C{  public void endDrawing(GL10 gl){  checkState(STATE_DRAWING,STATE_INITIALIZED);  gl.glDisable(GL10.GL_BLEND);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPopMatrix();  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPopMatrix();}  }
class C{  public Justification[] nextChunk(){  if (!hasNext()) {    throw new NoSuchElementException();  }  if (ft != null) {    awaitReader();  }  final int n=buffer.size();  final Justification[] stmts=new Justification[n];  for (int i=0; i < n; i++) {    stmts[i]=next();  }  if (log.isDebugEnabled())   log.debug("chunkSize=" + n + ", nchunks="+ nchunks+ ", #read(caller)="+ numReadByCaller+ ", #read(src)="+ numBuffered);  return stmts;}  }
class C{  public ScheduleItem addItem(String carType,int sequence){  ScheduleItem si=addItem(carType);  if (sequence < 0 || sequence > _scheduleHashTable.size()) {    return si;  }  for (int i=0; i < _scheduleHashTable.size() - sequence - 1; i++) {    moveItemUp(si);  }  return si;}  }
class C{  protected void destroyJMSResources(boolean reconnecting){  if ((context != null) && transacted && (getIterations() != 0)) {    try {      context.rollback();    } catch (    JMSRuntimeException jmsre) {      Log.logger.log(Level.FINE,"Exception received during context rollback: {0}",jmsre);    }  }  if (messageConsumer != null) {    if (!reconnecting)     Log.logger.log(Level.FINE,"Closing consumer: {0}",messageConsumer);    try {      messageConsumer.close();    } catch (    JMSRuntimeException jmsre) {      Log.logger.log(Level.FINE,"Exception received during messageConsumer close: {0}",jmsre);    } finally {      messageConsumer=null;    }  }  messageProducer=null;  if (additionalMessageConsumers != null) {    for (int i=0; i < additionalMessageConsumers.size(); i++) {      MessageConsumer additionalMessageConsumer=additionalMessageConsumers.get(i);      if (!reconnecting)       Log.logger.log(Level.FINE,"Closing additional consumer: {0}",additionalMessageConsumer);      try {        additionalMessageConsumer.close();      } catch (      JMSException jmse) {        Log.logger.log(Level.FINE,"Exception received during additional messageConsumer close: {0}",jmse);      } finally {        additionalMessageConsumers.remove(i);        additionalMessageConsumer=null;      }    }  }  if ((durableSubscriberName != null) && !reconnecting && (context != null)&& (Config.parms.getBoolean("un"))) {    Log.logger.log(Level.FINE,"Unsubscribing {0}",durableSubscriberName);    try {      context.unsubscribe(durableSubscriberName);    } catch (    JMSRuntimeException jmsre) {      Log.logger.log(Level.FINE,"Exception received during durableSubscription unsubscribe: {0}",jmsre);    }  }  if (context != null) {    if (!reconnecting)     Log.logger.log(Level.FINE,"Closing context: {0}",context);    try {      context.close();    } catch (    JMSRuntimeException jmsre) {      Log.logger.log(Level.FINE,"Exception received during context close: {0}",jmsre);    } finally {      context=null;    }  }  if (!reconnecting) {    destProducer=null;    destConsumer=null;    cf=null;  }}  }
class C{  private boolean deleteRecursively(Path path) throws IOException {  if (Files.isDirectory(path)) {    try (DirectoryStream<Path> stream=Files.newDirectoryStream(path)){      for (      Path innerPath : stream) {        boolean res=deleteRecursively(innerPath);        if (!res)         return false;      }    }   }  return path.toFile().delete();}  }
class C{  public double doubleValue(Object obj){  if (obj == null)   return 0.0;  if (obj instanceof Number)   return ((Number)(obj)).doubleValue();  if (obj instanceof Valuable)   return ((Valuable)(obj)).doubleValue();  return 1.0;}  }
class C{  public static Document buildDocument(final Long placeId,final String placeName,final String placeAddress,final GeoPt location){  GeoPoint geoPoint=new GeoPoint(location.getLatitude(),location.getLongitude());  Document.Builder builder=Document.newBuilder().addField(Field.newBuilder().setName("id").setText(placeId.toString())).addField(Field.newBuilder().setName("name").setText(placeName)).addField(Field.newBuilder().setName("address").setText(placeAddress)).addField(Field.newBuilder().setName("place_location").setGeoPoint(geoPoint));  if (environment.value() == Development) {    builder.addField(Field.newBuilder().setName("value").setNumber(1));  }  return builder.build();}  }
class C{  public NoteDisplayComp(){  buildComponents();}  }
class C{  public OrganizationAuthoritiesException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private FilePreferencesImpl(AbstractPreferences parent,String name){  super(parent,name);  path=((FilePreferencesImpl)parent).path + File.separator + name;  initPrefs();}  }
class C{  public static byte[] rsa(byte[] msg,RSAPrivateKey key,boolean verify) throws BadPaddingException {  if (key instanceof RSAPrivateCrtKey) {    return crtCrypt(msg,(RSAPrivateCrtKey)key,verify);  } else {    return priCrypt(msg,key.getModulus(),key.getPrivateExponent());  }}  }
class C{  protected Object readResolve(){  super.readResolve();  postOpenInit();  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addrList;  Node addrNode;  boolean state;  doc=(Document)load("staff",false);  addrList=doc.getElementsByTagName("name");  addrNode=addrList.item(0);  state=addrNode.hasAttributes();  assertFalse("throw_False",state);}  }
class C{  public Matrix3d m22(double m22){  this.m22=m22;  return this;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      if (v != null) {        List<?> array=(List<?>)value;        for (int j=0; j < array.size(); ++j) {          accept(v,null,array.get(j));        }        v.visitEnd();      }    } else {      av.visit(name,value);    }  }}  }
class C{  public static final boolean isSmeDeliveryAckRequested(byte registeredDeliery){  return isSmeAck(registeredDeliery,SMPPConstant.REGDEL_SME_DELIVERY_ACK_REQUESTED);}  }
class C{  protected String toString(AbstractMatrix2D matrix){  return this.toString((ObjectMatrix2D)matrix);}  }
class C{  @Override public int hashCode(){  int hash=37;  hash=HashUtilities.hashCode(hash,this.g1);  hash=HashUtilities.hashCode(hash,this.g2);  hash=HashUtilities.hashCode(hash,this.g3);  return hash;}  }
class C{  private ObjectName connectToSystem() throws OperationsException, AdminException {  ObjectName adminDsObjName=agent.connectToSystem();  AdminDistributedSystem adminDS=agent.getDistributedSystem();  if (adminDSJmx == null && adminDS instanceof AdminDistributedSystemJmxImpl) {    adminDSJmx=(AdminDistributedSystemJmxImpl)adminDS;    refreshInterval=adminDSJmx.getRefreshInterval();    id=adminDSJmx.getId();    forwarder.registerNotificationListener(adminDSJmx.getObjectName());  }  return adminDsObjName;}  }
class C{  public long parseTime(String time) throws IllegalArgumentException {  long t;  if (StringUtils.isEmpty(time)) {    t=0;  } else {    try {      t=Long.valueOf(time);    } catch (    NumberFormatException e) {      throw new IllegalArgumentException(e);    }  }  return t;}  }
class C{  public RewriteMatch matches(HttpServletRequest request,HttpServletResponse response){  return null;}  }
class C{  public void onDestroy(){  this.pcClient.closeAllConnections();  this.mPubNub.unsubscribeAll();}  }
class C{  @Override protected void doGet(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (req.getParameter(ATTR_QUERY) != null) {    doSparqlQuery(req,resp);  } else   if (req.getParameter(ATTR_UUID) != null) {    doUUID(req,resp);  } else   if (req.getParameter(ATTR_ESTCARD) != null) {    doEstCard(req,resp);  } else   if (req.getParameter(ATTR_HASSTMT) != null) {    doHasStmt(req,resp);  } else   if (req.getParameter(ATTR_GETSTMTS) != null) {    doGetStmts(req,resp);  } else   if (req.getParameter(ATTR_CONTEXTS) != null) {    doContexts(req,resp);  } else   if (req.getParameter(ATTR_SHARDS) != null) {    doShardReport(req,resp);  } else {    doServiceDescription(req,resp);    return;  }}  }
class C{  private void handleStateButtonClick(final int idx,int itemsRes,int[] itemIds){  listener.onStateButtonClick(idx,itemsRes,itemIds);}  }
class C{  public String encodeHex(String hexa){  if (!hexa.matches("^[0-9a-fA-F]+$"))   return "";  List<Long> matched=new ArrayList<Long>();  Matcher matcher=Pattern.compile("[\\w\\W]{1,12}").matcher(hexa);  while (matcher.find())   matched.add(Long.parseLong("1" + matcher.group(),16));  long[] result=new long[matched.size()];  for (int i=0; i < matched.size(); i++)   result[i]=matched.get(i);  return this._encode(result);}  }
class C{  public static String bind(String message,Object binding1,Object binding2){  return bind(message,new Object[]{binding1,binding2});}  }
class C{  public void addScanningCallback(OneSheeldScanningCallback scanningCallback){  if (scanningCallback != null && !scanningCallbacks.contains(scanningCallback))   scanningCallbacks.add(scanningCallback);}  }
class C{  private void putInputElementHandlerIntoTheMap(){  for (  Element el : inputElementHandler.get()) {    if (!el.hasAttr(TITLE_ATTR) && !el.hasAttr(ARIA_LABEL_ATTR) && !el.hasAttr(ARIA_LABELLEDBY_ATTR)) {      Element tmpElement=el.parent();      while (StringUtils.isNotBlank(tmpElement.tagName())) {        if (tmpElement.tagName().equals(FORM_ELEMENT)) {          if (inputFormMap.containsKey(tmpElement)) {            inputFormMap.get(tmpElement).add(el);          } else {            ElementHandler<Element> inputElement=new ElementHandlerImpl();            inputElement.add(el);            inputFormMap.put(tmpElement,inputElement);          }          break;        }        tmpElement=tmpElement.parent();      }    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.DISPLAY_COLOR___ANONYMOUS_DISPLAY_COLOR_11:    getAnonymous_displayColor_1_1().clear();  return;case UmplePackage.DISPLAY_COLOR___COLOR_VALUE_1:setColorValue_1(COLOR_VALUE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void update(Instance ins) throws Exception {  addInstanceInfo(ins);  m_InstList=m_TreeConstructor.addInstance(m_Root,ins);}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  public void refreshVnXFileConnections() throws IOException, ConnectionManagerException {  List<URI> allStorageSystemsURIList=_dbClient.queryByType(StorageSystem.class,true);  List<StorageSystem> allStorageSystemList=_dbClient.queryObject(StorageSystem.class,allStorageSystemsURIList);  for (  StorageSystem storageSystem : allStorageSystemList) {    if (null != storageSystem && Type.vnxfile.toString().equals(storageSystem.getSystemType())) {      CimConnection cimConnection=getConnection(storageSystem);      if (null == cimConnection) {        _log.error("No CIMOM connection found for ip/port {}",ConnectionManager.generateConnectionCacheKey(storageSystem.getSmisProviderIP(),storageSystem.getSmisPortNumber()));        recordStorageProviderEvent(OperationTypeEnum.STORAGE_PROVIDER_DOWN,STORAGE_PROVIDER_DOWN_DESCRIPTION_VNXFILE + storageSystem.getSmisProviderIP(),storageSystem.getId());        continue;      }      if (!checkConnectionliveness(cimConnection)) {        if (null != storageSystem.getSmisConnectionStatus() && ConnectionStatus.CONNECTED.toString().equalsIgnoreCase(storageSystem.getSmisConnectionStatus())) {          recordStorageProviderEvent(OperationTypeEnum.STORAGE_PROVIDER_DOWN,STORAGE_PROVIDER_DOWN_DESCRIPTION_VNXFILE + storageSystem.getSmisProviderIP(),storageSystem.getId());          storageSystem.setSmisConnectionStatus(ConnectionStatus.NOTCONNECTED.toString());          _dbClient.persistObject(storageSystem);        }        _connectionManager.removeConnection(storageSystem.getSmisProviderIP(),storageSystem.getPortNumber());        _log.info("Removed invalid connection for smis {} from connectionManager",ConnectionManager.generateConnectionCacheKey(storageSystem.getSmisProviderIP(),storageSystem.getSmisPortNumber()));      } else {        if (null != storageSystem.getSmisConnectionStatus() && ConnectionStatus.NOTCONNECTED.toString().equalsIgnoreCase(storageSystem.getSmisConnectionStatus())) {          recordStorageProviderEvent(OperationTypeEnum.STORAGE_PROVIDER_UP,STORAGE_PROVIDER_UP_DESCRIPTION_VNXFILE + storageSystem.getSmisProviderIP(),storageSystem.getId());          storageSystem.setSmisConnectionStatus(ConnectionStatus.CONNECTED.toString());          _dbClient.persistObject(storageSystem);        }      }    }  }}  }
class C{  public void tryToDeleteGroupChats(){  mImDeleteOperationHandler.post(new GroupFileTransferDeleteTask(mFileTransferService,this,mLocalContentResolver));  mImDeleteOperationHandler.post(new GroupChatMessageDeleteTask(mChatService,this,mLocalContentResolver));  mImDeleteOperationHandler.post(new GroupChatDeleteTask(mChatService,this,mLocalContentResolver));}  }
class C{  @Override public void doTests(){  if (getKernel() == null) {    println("\n=== No kernel set ===");    return;  }  println("\n=== Check on kernel: " + getKernel().getClass().getName() + " ===\n");  m_ClasspathProblems=false;  println("--> Checking for interfaces");  canTakeOptions();  boolean weightedInstancesHandler=weightedInstancesHandler()[0];  boolean multiInstanceHandler=multiInstanceHandler()[0];  println("--> Kernel tests");  declaresSerialVersionUID();  testsPerClassType(Attribute.NOMINAL,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.NUMERIC,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.DATE,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.STRING,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.RELATIONAL,weightedInstancesHandler,multiInstanceHandler);}  }
class C{  public static final int signedToInt(short w){  return ((int)w & 0xffff);}  }
class C{  void validConversion(Converter converter,Object expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public DObjectIdChooser(JFrame parent,String title,ASN1ObjectIdentifier objectId) throws InvalidObjectIdException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(objectId);}  }
class C{  public SpatialObjectPair(double distance,SpatialEntry entry1,SpatialEntry entry2,boolean isExpandable){  this.distance=distance;  this.entry1=entry1;  this.entry2=entry2;  this.isExpandable=isExpandable;}  }
class C{  public static List<? extends Point2D> computeCenterHeadingIndicatorPoints(DrawContext dc,Vec4 symbolPoint,Angle heading,double length){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (heading == null) {    String msg=Logging.getMessage("nullValue.HeadingIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  View view=dc.getView();  Vec4 dir=computeDirectionOfMovement(dc,symbolPoint,heading,length);  Vec4 pt1=view.project(symbolPoint);  Vec4 pt2=view.project(symbolPoint.add3(dir));  return Arrays.asList(new Point2D.Double(0,0),new Point2D.Double(pt2.x - pt1.x,pt2.y - pt1.y));}  }
class C{  public boolean redo(){  if (this.historyPointer < this.pathLists.size()) {    this.historyPointer++;    this.invalidate();    return true;  } else {    return false;  }}  }
class C{  public void check_reductions() throws internal_error {  parse_action act;  production prod;  for (int row=0; row < num_states(); row++) {    for (int col=0; col < under_state[row].size(); col++) {      act=under_state[row].under_term[col];      if (act != null && act.kind() == parse_action.REDUCE) {        ((reduce_action)act).reduce_with().note_reduction_use();      }    }  }  for (Enumeration p=production.all(); p.hasMoreElements(); ) {    prod=(production)p.nextElement();    if (prod.num_reductions() == 0) {      if (!emit.nowarn) {        System.err.println("*** Production \"" + prod.to_simple_string() + "\" never reduced");        lexer.warning_count++;      }    }  }}  }
class C{  public void reset(){synchronized (lock) {    count=0;  }}  }
class C{  public void writeUTF8Const(String value) throws IOException {  ConstantPool pool=_javaClass.getConstantPool();  Utf8Constant entry=pool.getUTF8(value);  if (entry != null)   writeShort(entry.getIndex()); else   throw new NullPointerException(L.l("utf8 constant {0} does not exist",value));}  }
class C{  protected void addDTDDeclaration(Decl declaration){  if (internalDTDDeclarations == null) {    internalDTDDeclarations=new ArrayList<Decl>();  }  internalDTDDeclarations.add(declaration);}  }
class C{  public NTPublishAnnotatedOperation(InputSocket.Factory inputSocketFactory,Class<D> dataType,Class<P> publishType,Function<D,P> converter,MapNetworkPublisherFactory publisherFactory){  super(inputSocketFactory,dataType,publishType,converter,publisherFactory);  super.nameSocket.setValue("my" + dataType.getSimpleName());}  }
class C{  private byte readAndCheckByte() throws IOException, EOFException {  int b1=in.read();  if (-1 == b1) {    throw new EOFException();  }  return (byte)b1;}  }
class C{  public void verbose(CharSequence message){  log(Level.INFO,message);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void decorate(JTextComponent textComponent,List items,boolean strictMatching,ObjectToStringConverter stringConverter){  AbstractAutoCompleteAdaptor adaptor=new TextComponentAdaptor(textComponent,items);  AutoCompleteDocument document=new AutoCompleteDocument(adaptor,strictMatching,stringConverter);  decorate(textComponent,document,adaptor);}  }
class C{  public RecalculateSkuPricesEventCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService){  super(registry,priceService,pricingPolicyProvider,productService,shopService);}  }
class C{  public static void validateImageType(byte[] imageData,String contentType) throws ValidationException {  if (contentType == null || contentType.length() == 0) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image type",null);  }  final ImageIcon image=new ImageIcon(imageData);  if (image.getImage() == null) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image format",null);  }  if (!contentType.equalsIgnoreCase("image/jpeg") && !contentType.equalsIgnoreCase("image/jpg") && !contentType.equalsIgnoreCase("image/pjpeg")&& !contentType.equalsIgnoreCase("image/png")&& !contentType.equalsIgnoreCase("image/x-png")&& !contentType.equalsIgnoreCase("image/gif")) {    throw new ValidationException(ReasonEnum.IMAGE_TYPE,"image type",new Object[]{contentType});  }}  }
class C{  protected JPanel statusPanel(){  JPanel pane1=new JPanel();  pane1.setLayout(new BoxLayout(pane1,BoxLayout.X_AXIS));  log.debug("Fetch main logo: {}",logo());  pane1.add(new JLabel(new ImageIcon(getToolkit().getImage(FileUtil.findURL(logo(),FileUtil.Location.INSTALLED)),"JMRI logo"),JLabel.LEFT));  pane1.add(Box.createRigidArea(new Dimension(15,0)));  log.debug("start labels");  JPanel pane2=new JPanel();  pane2.setLayout(new BoxLayout(pane2,BoxLayout.Y_AXIS));  pane2.add(new JLabel(line1()));  pane2.add(new JLabel(line2()));  pane2.add(new JLabel(line3()));  if (ProfileManager.getDefault() != null && ProfileManager.getDefault().getActiveProfile() != null) {    pane2.add(new JLabel(Bundle.getMessage("ActiveProfile",ProfileManager.getDefault().getActiveProfile().getName())));  } else {    pane2.add(new JLabel(Bundle.getMessage("FailedProfile")));  }  ConnectionStatus.instance().addPropertyChangeListener(this);  int i=0;  for (  ConnectionConfig conn : InstanceManager.getDefault(ConnectionConfigManager.class)) {    if (!conn.getDisabled()) {      connection[i]=conn;      i++;    }    if (i > 3) {      break;    }  }  buildLine4(pane2);  buildLine5(pane2);  buildLine6(pane2);  buildLine7(pane2);  pane2.add(new JLabel(line8()));  pane2.add(new JLabel(line9()));  pane1.add(pane2);  return pane1;}  }
class C{  public Boolean isIpv6DhcpConfigurationEnabled(){  return ipv6DhcpConfigurationEnabled;}  }
class C{  public static boolean isDataUri(Uri uri){  return FrescoUri.DATA_SCHEME.equals(getSchemeOrNull(uri));}  }
class C{  public static <T>LazyDequeX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  @SafeVarargs public final FastAdapterBottomSheetDialog<Item> add(int position,Item... items){  mFastItemAdapter.add(position,items);  return this;}  }
class C{  public Builder st(int depth){  this.withStackTrace=true;  this.stackTraceDepth=depth;  return this;}  }
class C{  void loadLabels() throws IOException {  ListLabelsResponse labelResponse=gmailService.getServiceWithRetries().users().labels().list(user.getEmailAddress()).execute();  Verify.verify(!labelResponse.isEmpty(),"could not get labels %s");  List<Label> labels=labelResponse.getLabels();  labelsByName=labels.stream().collect(toMap(null,null));  labelsById=labels.stream().collect(toMap(null,null));  System.err.format("Got labels: %s",labelsByName);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public boolean kill(String signal) throws IOException, InterruptedException {  try {    new ProcessExecutor().commandSplit(String.format("kill -%s %d",signal,pid)).redirectOutput(Slf4jStream.ofCaller().asDebug()).exitValueNormal().executeNoTimeout();    return true;  } catch (  InvalidExitValueException e) {    if (isNoSuchProcess(e)) {      return false;    }    throw e;  }}  }
class C{  @Override protected void transfer(String seqRange) throws IOException {  final Collection<Long> ids=mTaxToSeqId.get(Integer.parseInt(seqRange));  if (ids != null) {    for (    Long id : ids) {      transfer(id);    }  } else {    warnInvalidSequence(seqRange);  }}  }
class C{  @ObjectiveCName("findPeersWithType:") public Command<List<PeerSearchEntity>> findPeers(PeerSearchType type){  return null;}  }
class C{  public List<String> updateDeletionStatus(List<String> loadIds,String cubeFolderPath){  ICarbonLock carbonLock=CarbonLockFactory.getCarbonLockObj(absoluteTableIdentifier.getCarbonTableIdentifier(),LockUsage.METADATA_LOCK);  List<String> invalidLoadIds=new ArrayList<String>(0);  try {    if (carbonLock.lockWithRetries()) {      LOG.info("Metadata lock has been successfully acquired");      CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());      String dataLoadLocation=carbonTablePath.getTableStatusFilePath();      LoadMetadataDetails[] listOfLoadFolderDetailsArray=null;      if (!FileFactory.isFileExist(dataLoadLocation,FileFactory.getFileType(dataLoadLocation))) {        LOG.error("Load metadata file is not present.");        return loadIds;      }      listOfLoadFolderDetailsArray=readLoadMetadata(cubeFolderPath);      if (listOfLoadFolderDetailsArray != null && listOfLoadFolderDetailsArray.length != 0) {        updateDeletionStatus(loadIds,listOfLoadFolderDetailsArray,invalidLoadIds);        if (invalidLoadIds.isEmpty()) {          writeLoadDetailsIntoFile(dataLoadLocation,listOfLoadFolderDetailsArray);        } else {          return invalidLoadIds;        }      } else {        LOG.audit("Delete load by Id is failed. No matching load id found.");        return loadIds;      }    } else {      LOG.error("Unable to acquire the metadata lock");    }  } catch (  IOException e) {    LOG.error("IOException" + e.getMessage());  } finally {    fileUnlock(carbonLock);  }  return invalidLoadIds;}  }
class C{  private VectorSpliterator(Vector<E> list,Object[] array,int origin,int fence,int expectedModCount){  this.list=list;  this.array=array;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  protected final void addConverter(String name,String converterId,Class type){  this.factories.put(name,new UserConverterHandlerFactory(converterId,type));}  }
class C{  static public MPrintFormat createFromTable(Properties ctx,int AD_Table_ID){  return createFromTable(ctx,AD_Table_ID,0);}  }
class C{  @Override public void insertBack(Blorp x){  size+=1;  Node p=sentinel;  while (p.next != null) {    p=p.next;  }  p.next=new Node(x,null);}  }
class C{  public void put(byte data){  if (position >= getCapacity()) {    byte[][] newbuf=new byte[position / SIZE + 2][];    for (int i=0; i < buffer.length; i++)     newbuf[i]=buffer[i];    for (int i=buffer.length; i < newbuf.length; i++)     newbuf[i]=new byte[SIZE];    buffer=newbuf;  }  buffer[position / SIZE][position % SIZE]=data;  last=Math.max(last,(position++));}  }
class C{  public void onMediaStateChanged(boolean isAudioEnabled,boolean isVideoEnabled){  send(new RTCMediaStateUpdated(deviceId,isAudioEnabled,isVideoEnabled));}  }
class C{  @DSComment("data structure, except writeToParcel") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:48.058 -0500",hash_original_method="E87B5EF1F7D5816785326D2A488F5505",hash_generated_method="869C49A1D3186925B00FD1E1E8A1AABE") public NdefMessage(NdefRecord[] records){  mRecords=new NdefRecord[records.length];  System.arraycopy(records,0,mRecords,0,records.length);}  }
class C{  private List<Parameter> load(CommentedLineReader reader) throws IOException {  List<Parameter> parameters=new ArrayList<Parameter>();  String line=null;  try {    while ((line=reader.readLine()) != null) {      String[] tokens=line.split("\\s+");      if (tokens.length != 3) {        throw new IOException("expected only three items per line");      }      parameters.add(new Parameter(tokens[0],Double.parseDouble(tokens[1]),Double.parseDouble(tokens[2])));    }  }  finally {    if (reader != null) {      reader.close();    }  }  return parameters;}  }
class C{  public ReferenceTarget_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  private static void assertParam(final Request req,final CharSequence param,final String value) throws IOException {  MatcherAssert.assertThat(new RqFormSmart(new RqFormBase(req)).single(param),Matchers.equalTo(value));}  }
class C{  private static RetryOptions.Builder retryOptionsToBuilder(RetryOptions options){  RetryOptions.Builder builder=new RetryOptions.Builder();  builder.setEnableRetries(options.enableRetries());  builder.setInitialBackoffMillis(options.getInitialBackoffMillis());  builder.setBackoffMultiplier(options.getBackoffMultiplier());  builder.setMaxElapsedBackoffMillis(options.getMaxElaspedBackoffMillis());  builder.setStreamingBufferSize(options.getStreamingBufferSize());  builder.setStreamingBatchSize(options.getStreamingBatchSize());  builder.setReadPartialRowTimeoutMillis(options.getReadPartialRowTimeoutMillis());  builder.setMaxScanTimeoutRetries(options.getMaxScanTimeoutRetries());  builder.setAllowRetriesWithoutTimestamp(options.allowRetriesWithoutTimestamp());  for (  Status.Code code : Status.Code.values()) {    if (options.isRetryable(code)) {      builder.addStatusToRetryOn(code);    }  }  return builder;}  }
class C{  static int size(){  File[] files=getKeyValueCacheDir().listFiles();  if (files == null) {    return 0;  }  return files.length;}  }
class C{  public void removeProperty(String key){  carbonMessage.removeProperty(key);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.512 -0500",hash_original_method="47BDB9F0F1E73BBB0BEBE9D5C68FE123",hash_generated_method="23A013C70EEBC3C31C79031F2A1CE622") public boolean isLoggingEnabled(){  return this.stackLogger == null ? false : this.stackLogger.isLoggingEnabled();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public XAConnection createXAConnection() throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXAConnection()");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.XA_CONNECTION);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created connection: " + s);  }  return s;}  }
class C{  public Long sadd(final String key,final String... members){  checkIsInMulti();  client.sadd(key,members);  return client.getIntegerReply();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isDrawBarOutline(){  return this.drawBarOutline;}  }
class C{  public final byte[] computeHash(byte[] data){  byte[] ret=null;  hashLock.lock();  ret=md.digest(data);  hashLock.unlock();  return ret;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);}  }
class C{  private void initialize() throws IOException {  if (this.luceneUtils == null) {    this.luceneUtils=new LuceneUtils(flagConfig);  }  elementalItemVectors=new ElementalVectorStore(flagConfig);  semanticItemVectors=new VectorStoreRAM(flagConfig);  elementalPredicateVectors=new ElementalVectorStore(flagConfig);  semanticPredicateVectors=new VectorStoreRAM(flagConfig);  flagConfig.setContentsfields(itemFields);  HashSet<String> addedConcepts=new HashSet<String>();  int tc=0;  for (  String fieldName : itemFields) {    Terms terms=luceneUtils.getTermsForField(fieldName);    if (terms == null) {      throw new NullPointerException(String.format("No terms for field '%s'. Please check that index at '%s' was built correctly for use with PSI.",fieldName,flagConfig.luceneindexpath()));    }    TermsEnum termsEnum=terms.iterator(null);    BytesRef bytes;    while ((bytes=termsEnum.next()) != null) {      Term term=new Term(fieldName,bytes);      if (!luceneUtils.termFilter(term)) {        VerbatimLogger.fine("Filtering out term: " + term + "\n");        continue;      }      if (!addedConcepts.contains(term.text())) {        addedConcepts.add(term.text());        elementalItemVectors.getVector(term.text());        semanticItemVectors.putVector(term.text(),VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension()));        tc++;        if ((tc > 0) && ((tc % 10000 == 0) || (tc < 10000 && tc % 1000 == 0))) {          VerbatimLogger.info("Initialized " + tc + " term vectors ... ");        }      }    }  }  Terms predicateTerms=luceneUtils.getTermsForField(PREDICATE_FIELD);  String[] dummyArray=new String[]{PREDICATE_FIELD};  TermsEnum termsEnum=predicateTerms.iterator(null);  BytesRef bytes;  while ((bytes=termsEnum.next()) != null) {    Term term=new Term(PREDICATE_FIELD,bytes);    if (!luceneUtils.termFilter(term,dummyArray,0,Integer.MAX_VALUE,Integer.MAX_VALUE,1)) {      continue;    }    elementalPredicateVectors.getVector(term.text().trim());    if (flagConfig.trainingcycles() > 0)     semanticPredicateVectors.putVector(term.text().trim(),VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension()));    elementalPredicateVectors.getVector(term.text().trim() + "-INV");    if (flagConfig.trainingcycles() > 0)     semanticPredicateVectors.putVector(term.text().trim() + "-INV",VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension()));  }}  }
class C{  public AssociationAlreadyRegisteredException(String msg){  super(msg);}  }
class C{  public DateTime(Chronology chronology){  super(chronology);}  }
class C{  public static float ccpDistance(final CGPoint v1,final CGPoint v2){  return ccpLength(ccpSub(v1,v2));}  }
class C{  private Time parseTime(String timeString) throws ParseException {  java.util.Date parsedDate=TimeField.parse(timeString);  if (parsedDate == null)   return null;  return new Time(parsedDate.getTime());}  }
class C{  public static GF2Matrix[] createRandomRegularMatrixAndItsInverse(int n,SecureRandom sr){  GF2Matrix[] result=new GF2Matrix[2];  int length=(n + 31) >> 5;  GF2Matrix lm=new GF2Matrix(n,Matrix.MATRIX_TYPE_RANDOM_LT,sr);  GF2Matrix um=new GF2Matrix(n,Matrix.MATRIX_TYPE_RANDOM_UT,sr);  GF2Matrix rm=(GF2Matrix)lm.rightMultiply(um);  Permutation p=new Permutation(n,sr);  int[] pVec=p.getVector();  int[][] matrix=new int[n][length];  for (int i=0; i < n; i++) {    System.arraycopy(rm.matrix[pVec[i]],0,matrix[i],0,length);  }  result[0]=new GF2Matrix(n,matrix);  GF2Matrix invLm=new GF2Matrix(n,Matrix.MATRIX_TYPE_UNIT);  for (int i=0; i < n; i++) {    int rest=i & 0x1f;    int q=i >>> 5;    int r=1 << rest;    for (int j=i + 1; j < n; j++) {      int b=(lm.matrix[j][q]) & r;      if (b != 0) {        for (int k=0; k <= q; k++) {          invLm.matrix[j][k]^=invLm.matrix[i][k];        }      }    }  }  GF2Matrix invUm=new GF2Matrix(n,Matrix.MATRIX_TYPE_UNIT);  for (int i=n - 1; i >= 0; i--) {    int rest=i & 0x1f;    int q=i >>> 5;    int r=1 << rest;    for (int j=i - 1; j >= 0; j--) {      int b=(um.matrix[j][q]) & r;      if (b != 0) {        for (int k=q; k < length; k++) {          invUm.matrix[j][k]^=invUm.matrix[i][k];        }      }    }  }  result[1]=(GF2Matrix)invUm.rightMultiply(invLm.rightMultiply(p));  return result;}  }
class C{  protected void savePNGImage(String filename,BufferedImage image) throws IOException {  File file=new File(filename);  ImageIO.write(image,"png",file);}  }
class C{  @GetMapping("/users/{id}/resend-verification-mail") public void resendVerificationMail(@PathVariable("id") U user){  log.debug("Resending verification mail for: " + user);  lemonService.resendVerificationMail(user);  log.debug("Resent verification mail for: " + user);}  }
class C{  private static void runInCurrentThread(IRunnableWithProgress runnable,IProgressMonitor progressMonitor) throws InterruptedException, InvocationTargetException {  try {    if (runnable != null) {      runnable.run(progressMonitor);    }  } catch (  InvocationTargetException e) {    throw e;  }catch (  InterruptedException e) {    throw e;  }catch (  OperationCanceledException e) {    throw new InterruptedException();  }catch (  ThreadDeath e) {    throw e;  }catch (  RuntimeException e) {    throw new InvocationTargetException(e);  }catch (  Error e) {    throw new InvocationTargetException(e);  }}  }
class C{  public static Enumeration all(){  return _all.elements();}  }
class C{  public TypeInstance createTypeInstance(final String name,final String commentString,final BaseType baseType,final Section section,final long sectionOffset) throws CouldntSaveDataException, CouldntLoadDataException {  Preconditions.checkNotNull(name,"Error: name argument can not be null");  Preconditions.checkNotNull(baseType,"Error: baseType argument can not be null");  Preconditions.checkNotNull(section,"Error: section argument can not be null");  Preconditions.checkArgument(sectionOffset >= 0,"Error: section offset must be greater or equal to zero");  final CommentManager commentManager=CommentManager.get(provider);  final int typeId=baseType.getId();  final int sectionId=section.getId();  final int instanceId=provider.createTypeInstance(module.getConfiguration().getId(),name,null,typeId,sectionId,sectionOffset);  final TypeInstance instance=new TypeInstance(instanceId,name,baseType,section,sectionOffset,module);  instancesById.put(instanceId,instance);  if (commentString != null) {    commentManager.appendTypeInstanceComment(instance,commentString);  }  return instance;}  }
class C{  public void addValue(double data,double given,double weight){  m_Estimators[(int)given].addValue(data,weight);}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this || (obj instanceof Resource && ((Resource)obj).getDescription().equals(getDescription())));}  }
class C{  protected void dropConnection(Connection connection){  if (this.connections.contains(connection)) {    this.connections.remove(connection);    this.openWire.setVisible(!this.hasConnection());  }}  }
class C{  protected static void dispose(){}  }
class C{  public void deleteCertStore(String storeName){  try (ServerHandle serverHandle=openServer()){    int error=VecsAdapter.VecsDeleteCertStoreHW(serverHandle.getHandle(),storeName);    if (error != VecsAdapter.ERROR_OBJECT_NOT_FOUND) {      if (error != 0) {        throw new VecsGenericException(String.format("Deleting store '%s' failed. [Server: %s, User: %s]",storeName,_serverName,_userName),error);      }    }  } }  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean dialect(int n){  return statics.dialect == n;}  }
class C{  public void add(Tradingday tradingday){  this.tradingdays.add(tradingday);}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the video sharing service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the video sharing service!",e);    }  }  Intent serviceIntent=new Intent(IVideoSharingService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  private URL downloadJar(URL url) throws Exception {  HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();  int responseCode=httpConn.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK) {    logger.error("Error response code for URL: {} : response code={}",url.toExternalForm(),responseCode);    throw new IOException();  }  String fileName="";  String disposition=httpConn.getHeaderField("Content-Disposition");  if (disposition != null) {    int index=disposition.indexOf("filename=");    if (index > 0) {      fileName=disposition.substring(index + 10,disposition.length() - 1);    }  } else {    String path=url.getPath();    if (!path.isEmpty()) {      int lastSlash=path.lastIndexOf("/");      if (lastSlash == -1)       fileName=path; else       fileName=path.substring(lastSlash + 1);    }  }  Path dir=Files.createTempDirectory("edgentjars");  File file;  if (fileName.isEmpty())   file=File.createTempFile("edgent","jar",dir.toFile()); else   file=new File(dir.toFile(),fileName);  InputStream inputStream=httpConn.getInputStream();  FileOutputStream outputStream=new FileOutputStream(file);  int bytesRead;  byte[] buffer=new byte[4096];  while ((bytesRead=inputStream.read(buffer)) != -1) {    outputStream.write(buffer,0,bytesRead);  }  outputStream.flush();  outputStream.close();  inputStream.close();  logger.trace("Register jar downloaded as: {}",file);  return file.toURI().toURL();}  }
class C{  private static boolean isCandidate(TypeReference tref){  RVMType t=tref.peekType();  if (t == null)   return false;  if (t.isPrimitiveType() || t.isUnboxedType()) {    return false;  }  if (t.isClassType() && t.asClass().isFinal()) {    return false;  }  if (t.isArrayType()) {    return isCandidate(tref.getInnermostElementType());  }  return true;}  }
class C{  public void testSetF16Momentary(){  boolean f16Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF16Momentary(f16Momentary);}  }
class C{  public IValidationStatus validateLocation(){  IValidationStatus status;  try {    status=validateLocationGeneric();    if (status.hasErrors()) {      return status;    }    IPath location=new Path(getTargetLocation()).append(getFileName());    if (location.toString().indexOf(ICommonConstants.ARTIFACT_TYPE.MOBILE_APPLICATIONS) == -1) {      return ValidationStatus.createError(TARGET_LOCATION_IS_NOT_ALLOWED);    }  } catch (  Exception e) {    return ValidationStatus.createError("");  }  return status;}  }
class C{  static byte[] ip2ByteArray(String ip){  boolean ipv6Expected=false;  if (ip.charAt(0) == '[') {    if (ip.length() > 2 && ip.charAt(ip.length() - 1) == ']') {      ip=ip.substring(1,ip.length() - 1);      ipv6Expected=true;    } else {      throw new IllegalArgumentException(ip + ": invalid IPv6 address");    }  }  if (Character.digit(ip.charAt(0),16) != -1 || (ip.charAt(0) == ':')) {    byte[] address=IPAddressUtil.textToNumericFormatV4(ip);    if (address != null)     return address;    address=IPAddressUtil.textToNumericFormatV6(ip);    if (address != null)     return address;    if (ipv6Expected) {      throw new IllegalArgumentException(ip + ": invalid IPv6 address");    } else {      throw new IllegalArgumentException(ip + ": invalid IP address");    }  } else {    throw new IllegalArgumentException(ip + ": invalid IP address");  }}  }
class C{  public void bootstrap(){synchronized (bootstrapLock) {    final LinkedHashSet<CoordinatorStreamMessage> bootstrappedMessages=new LinkedHashSet<>(bootstrappedStreamSet);    log.info("Bootstrapping configuration from coordinator stream.");    SystemStreamPartitionIterator iterator=new SystemStreamPartitionIterator(systemConsumer,coordinatorSystemStreamPartition);    try {      while (iterator.hasNext()) {        IncomingMessageEnvelope envelope=iterator.next();        Object[] keyArray=keySerde.fromBytes((byte[])envelope.getKey()).toArray();        Map<String,Object> valueMap=null;        if (envelope.getMessage() != null) {          valueMap=messageSerde.fromBytes((byte[])envelope.getMessage());        }        CoordinatorStreamMessage coordinatorStreamMessage=new CoordinatorStreamMessage(keyArray,valueMap);        log.debug("Received coordinator stream message: {}",coordinatorStreamMessage);        if (bootstrappedMessages.remove(coordinatorStreamMessage)) {          log.debug("Removed duplicate message: {}",coordinatorStreamMessage);        }        bootstrappedMessages.add(coordinatorStreamMessage);        if (SetConfig.TYPE.equals(coordinatorStreamMessage.getType())) {          String configKey=coordinatorStreamMessage.getKey();          if (coordinatorStreamMessage.isDelete()) {            configMap.remove(configKey);          } else {            String configValue=new SetConfig(coordinatorStreamMessage).getConfigValue();            configMap.put(configKey,configValue);          }        }      }      bootstrappedStreamSet=Collections.unmodifiableSet(bootstrappedMessages);      log.debug("Bootstrapped configuration: {}",configMap);      isBootstrapped=true;    } catch (    Exception e) {      throw new SamzaException(e);    }  }}  }
class C{  public boolean nodeIdEquals(ExpandedNodeId n1,ExpandedNodeId n2){  if (ExpandedNodeId.isNull(n1) && ExpandedNodeId.isNull(n2)) {    return true;  }  if (ExpandedNodeId.isNull(n1) || ExpandedNodeId.isNull(n2)) {    return false;  }  if (!n1.getValue().equals(n2.getValue()))   return false;  int i1=n1.getNamespaceUri() == null ? n1.getNamespaceIndex() : getIndex(n1.getNamespaceUri());  int i2=n2.getNamespaceUri() == null ? n2.getNamespaceIndex() : getIndex(n2.getNamespaceUri());  return i1 == i2;}  }
class C{  public String toString(){  if (root == null) {    return "";  }  return toString(root);}  }
class C{  public boolean canGetFile(){  return canGetFile(new File(this.prefs.get("configurationPath","Path to file '/Users/user/desktop/config.xml'")));}  }
class C{  private void sample(){  treeColouring=colourSampler.sampleTreeColouring(treeModel,migrationModel.getMigrationMatrix(),metaPopulationModel);  listenerHelper.fireModelChanged(this);}  }
class C{  public void resetMassData(){  body.resetMassData();}  }
