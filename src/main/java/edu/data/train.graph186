class C{  public boolean equals(Object other){  if (!(other instanceof lalr_item_set))   return false; else   return equals((lalr_item_set)other);}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.hello_world,container,false);  View tv=v.findViewById(R.id.text);  ((TextView)tv).setText("Fragment #" + mNum);  tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));  return v;}  }
class C{  private static boolean isSameScript(int scriptOne,int scriptTwo){  return scriptOne <= UScript.INHERITED || scriptTwo <= UScript.INHERITED || scriptOne == scriptTwo;}  }
class C{  void relaxNodeLogic(final Link l,final RouterPriorityQueue<Node> pendingNodes,final double currTime,final double currCost){  addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost);}  }
class C{  private static String normalizedURL(String host,int port,String path){  if (path == null || path.length() == 0) {    path="/";  }  return "http://" + host + ":"+ port+ path;}  }
class C{  public static String collapseSpaces(String str){  return collapseCharacter(str,' ');}  }
class C{  public void clipRect(int x,int y,int width,int height){  mGraphics.clipRect(x,y,width,height);}  }
class C{  public DefaultRequestHandlerFactory(){  List<RequestHandlerProvider> requestHandlerProviders=Collections.emptyList();  try {    requestHandlerProviders=ProviderFinder.of(RequestHandlerProvider.class).find();  } catch (  final NoClassDefFoundError e) {  }  final List<RequestHandler> requestHandlers=new ArrayList<RequestHandler>();  for (  final RequestHandlerProvider provider : requestHandlerProviders) {    LOG.debug("using provider: {}",provider);    requestHandlers.addAll(provider.provideRequestHandlers().values());  }  setHandlers(requestHandlers);}  }
class C{  private static void GetShortArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetShortArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    short[] sourceArray=(short[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex << LOG_BYTES_IN_SHORT),length << LOG_BYTES_IN_SHORT);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  static BinaryTree<Integer> buildLeftLinear(int n){  BinaryTree<Integer> bt=new BinaryTree<Integer>();  for (int i=n; i > 0; i--) {    bt.insert(i);  }  return bt;}  }
class C{  public void showAppliance(MachineEntity machine){  selectedMachine=machine;  view.showContainer(tabContainer.getView());  String activeTab=activeTabs.get(machine.getId());  activeTab=activeTab != null ? activeTab : locale.tabInfo();  tabContainer.showTab(activeTab);  terminalContainer.addOrShowTerminal(machine);  infoPresenter.update(machine);  recipeTabPresenter.updateInfo(machine);  serverPresenter.updateInfo(machine);}  }
class C{  public static LinearRing[] toLinearRingArray(Collection linearRings){  LinearRing[] linearRingArray=new LinearRing[linearRings.size()];  return (LinearRing[])linearRings.toArray(linearRingArray);}  }
class C{  public InlineQueryResultCachedDocumentBuilder id(String id){  this.id=id;  return this;}  }
class C{  public Map<String,String> removeTokens(String workspaceId){  lock.writeLock().lock();  try {    final Map<String,String> rowCopy=new HashMap<>(tokens.row(workspaceId));    tokens.row(workspaceId).clear();    return rowCopy;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public AcelaNode(int address,int type,AcelaTrafficController tc){  setNodeAddress(address);  setNodeType(type);  transmissionDelay=0;  for (int i=0; i < MAXSENSORBITS; i++) {    sensorArray[i]=null;    sensorNeedInit[i]=false;    sensorHasBeenInit[i]=false;    sensorLastSetting[i]=Sensor.UNKNOWN;    sensorType[i]=2;    sensorPolarity[i]=1;    sensorThreshold[i]=4;    sensorConfigArray[i]=0x00;  }  for (int i=0; i < MAXOUTPUTBITS; i++) {    outputArray[i]=0;    outputSpecial[i]=0;    outputSignalHeadType[i]=0;    outputInit[i]=0;    outputWired[i]=0;    outputType[i]=0;    outputLength[i]=10;    outputNeedToSend[i]=false;  }  resetMustSend();  needInit=false;  hasActiveSensors=false;  tc.registerAcelaNode(this);}  }
class C{  public boolean isUseable(){  return rpObject.has("use");}  }
class C{  public Builder xrule(String name,String value){  name=name.toUpperCase();  if (value == null) {    xrules.removeAll(name);  } else {    xrules.put(name,value);  }  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Weeks weeksBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.weeks());  return Weeks.weeks(amount);}  }
class C{  private void updateUDPPacketIn(){  this.testUDPPacketSrld=this.testUDPPacket.serialize();  this.testUDPPacketIn=OFFactories.getFactory(OFVersion.OF_13).buildPacketIn().setBufferId(OFBufferId.NO_BUFFER).setMatch(OFFactories.getFactory(OFVersion.OF_13).buildMatch().setExact(MatchField.IN_PORT,OFPort.of(3)).build()).setData(this.testUDPPacketSrld).setReason(OFPacketInReason.NO_MATCH).build();}  }
class C{  public void collapsePanels(){  try {    final IStatusBarService svc=getService();    if (svc != null) {      svc.collapsePanels();    }  } catch (  RemoteException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public void adde2f(int f,int e){  e2f[e].add(f);}  }
class C{  public MnemonicCode(InputStream wordstream,String wordListDigest) throws IOException, IllegalArgumentException {  BufferedReader br=new BufferedReader(new InputStreamReader(wordstream,"UTF-8"));  String word;  this.wordList=new ArrayList<String>();  MessageDigest md;  try {    md=MessageDigest.getInstance("SHA-256");  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException(ex);  }  while ((word=br.readLine()) != null) {    md.update(word.getBytes());    this.wordList.add(word);  }  br.close();  if (this.wordList.size() != 2048)   throw new IllegalArgumentException("input stream did not contain 2048 words");  if (wordListDigest != null) {    byte[] digest=md.digest();    String hexdigest=new String(Hex.encode(digest));    if (!hexdigest.equals(wordListDigest))     throw new IllegalArgumentException("wordlist digest mismatch");  }}  }
class C{  public void onSnackbarDismissedAfterAnotherShown(Snackbar snackbar){}  }
class C{  public Id<DgCommodity> convertLinkToLinkPair2CommodityId(Id<Link> fromLinkId,Id<Link> toLinkId){  String idString=fromLinkId + "33" + toLinkId;  return idPool.createId(idString,DgCommodity.class);}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  public String closeExplorer() throws ManagerResponseException {  checkConnectedAndInFileExplorer();  currentContainerId=null;  currentPath=null;  return "Explorer closed";}  }
class C{  public void println(String x){  m_Owner.append(x + m_LineFeed);}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public static JCalValue object(ListMultimap<String,Object> value){  Map<String,JsonValue> object=new LinkedHashMap<String,JsonValue>();  for (  Map.Entry<String,List<Object>> entry : value) {    String key=entry.getKey();    List<Object> list=entry.getValue();    JsonValue v;    if (list.size() == 1) {      v=new JsonValue(list.get(0));    } else {      List<JsonValue> array=new ArrayList<JsonValue>(list.size());      for (      Object element : list) {        array.add(new JsonValue(element));      }      v=new JsonValue(array);    }    object.put(key,v);  }  return new JCalValue(new JsonValue(object));}  }
class C{  public final int yystate(){  return yy_lexical_state;}  }
class C{  protected void add(String str){  if (str == null) {    return;  }  int len=str.length();  int pos=0;  while (pos < len) {    int remainder=(len - pos);    if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {      set.add(new CharRange(str.charAt(pos + 1),str.charAt(pos + 3),true));      pos+=4;    } else     if (remainder >= 3 && str.charAt(pos + 1) == '-') {      set.add(new CharRange(str.charAt(pos),str.charAt(pos + 2)));      pos+=3;    } else     if (remainder >= 2 && str.charAt(pos) == '^') {      set.add(new CharRange(str.charAt(pos + 1),true));      pos+=2;    } else {      set.add(new CharRange(str.charAt(pos)));      pos+=1;    }  }}  }
class C{  @Override protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  mExpandableAdapter.onRestoreInstanceState(savedInstanceState);}  }
class C{  public final void readResponse() throws IOException {  if (hasResponse()) {    responseHeaders.setResponseSource(responseSource);    return;  }  if (responseSource == null) {    throw new IllegalStateException("readResponse() without sendRequest()");  }  if (!responseSource.requiresConnection()) {    return;  }  if (sentRequestMillis == -1) {    if (requestBodyOut instanceof RetryableOutputStream) {      int contentLength=((RetryableOutputStream)requestBodyOut).contentLength();      requestHeaders.setContentLength(contentLength);    }    transport.writeRequestHeaders();  }  if (requestBodyOut != null) {    requestBodyOut.close();    if (requestBodyOut instanceof RetryableOutputStream) {      transport.writeRequestBody((RetryableOutputStream)requestBodyOut);    }  }  transport.flushRequest();  responseHeaders=transport.readResponseHeaders();  responseHeaders.setLocalTimestamps(sentRequestMillis,System.currentTimeMillis());  responseHeaders.setResponseSource(responseSource);  if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    if (cachedResponseHeaders.validate(responseHeaders)) {      release(false);      ResponseHeaders combinedHeaders=cachedResponseHeaders.combine(responseHeaders);      setResponse(combinedHeaders,cachedResponseBody);      OkResponseCache responseCache=client.getOkResponseCache();      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,policy.getHttpConnectionToCache());      return;    } else {      Util.closeQuietly(cachedResponseBody);    }  }  if (hasResponseBody()) {    maybeCache();  }  initContentStream(transport.getTransferStream(cacheRequest));}  }
class C{  public TradestrategyOrders refreshPositionOrdersByTradestrategyId(final TradestrategyOrders positionOrders) throws PersistentModelException {  Integer version=m_tradestrategyHome.findVersionById(positionOrders.getIdTradeStrategy());  if (positionOrders.getVersion().equals(version)) {    return positionOrders;  } else {    TradestrategyOrders instance=m_tradestrategyHome.findPositionOrdersByTradestrategyId(positionOrders.getIdTradeStrategy());    if (null == instance)     throw new PersistentModelException("Tradestrategy not found for id: " + positionOrders.getIdTradeStrategy());    return instance;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.COMPOSITE__CONTENTS:    return ((InternalEList<?>)getContents()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public Property readProperty(final InputStream inputStream,final Function<Attachable<Property>,Property> propertyAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public void add(final SpeakerNPC npc){  final String name=npc.getName().toLowerCase();  if (contents.containsKey(name)) {    logger.error("Not adding " + npc + " to NPCList because there is already an NPC called "+ npc.getName());  } else {    contents.put(name,npc);  }}  }
class C{  private static String latitudeRef(double latitude){  return latitude < 0.0d ? "S" : "N";}  }
class C{  @Override public final void write(int b){  buffer.put((byte)b);}  }
class C{  public static void star(final Window parent,final INaviView[] views){  for (  final INaviView view : views) {    try {      view.getConfiguration().setStared(true);    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00090: " + "View could not be stared";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be stared.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view star was not updated."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public XPathFactoryConfigurationException(String message){  super(message);}  }
class C{  public RxPeople nationality(String nationality){  mNationality=nationality;  return mRxPeople;}  }
class C{  Mode(String name,Mode baseMode){  this.name=name;  this.baseMode=baseMode;}  }
class C{  @Override public void onAction(){  onAction(getActionType());}  }
class C{  public static void showLexiconIndexDetails(final BigdataSailConnection cxn){  final IIndex ndx=cxn.getTripleStore().getLexiconRelation().getBlobsIndex();  final IndexMetadata md=ndx.getIndexMetadata();  System.out.println("Lexicon:");  System.out.println(md.toString());  System.out.println(md.getTupleSerializer().toString());}  }
class C{  private float adjustDirection(float dir){  if (dir < 0)   return dir + 360;  if (dir >= 360)   return dir - 360;  return dir;}  }
class C{  private static void queryComputeStatesWithPowerState(VerificationHost host,ResourcePoolState resourcePool,ComputeState parentCompute,PowerState powerState,Set<String> instanceNames){  Query query=QueryTask.Query.Builder.create().addKindFieldClause(ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_RESOURCE_POOL_LINK,resourcePool.documentSelfLink).addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,parentCompute.documentSelfLink).build();  QueryTask q=QueryTask.Builder.createDirectTask().addOption(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT).setQuery(query).build();  host.sendRequest(Operation.createPost(host,ServiceUriPaths.CORE_QUERY_TASKS).setBody(q).setReferer(host.getUri()).setCompletion(null));}  }
class C{  public static boolean isStringOrSimilarType(Type type){  if (type instanceof RefType) {    RefType refType=(RefType)type;    return refType.equals(RefType.v("java.lang.String")) || refType.equals(RefType.v("java.lang.CharSequence")) || refType.equals(RefType.v("java.lang.StringBuffer"))|| refType.equals(RefType.v("java.lang.StringBuilder"));  }  return false;}  }
class C{  private void loadBooleanValue(final CheckNode comp,final String elementName){  final String value=properties.getValue(elementName).toLowerCase();  comp.setSelected(!value.isEmpty() && value.hashCode() == TRUE_HASH);}  }
class C{  private static void usage(){  System.err.println("Usage: java -jar proxy.jar port [\"proxy instruction\"] [ <JDBC Driver> <JDBC URL> <username> <password> ]");  System.err.println("Where \'proxy instruction\' might look like:");  System.err.println("'DIRECT' or 'PROXY server:port' or 'SOCKS server:port'");  System.err.println("and the JDBC connection details might look like:");  System.err.println("org.h2.Driver jdbc:h2:mem:webscarab3;DB_CLOSE_DELAY=-1 sa \"\"");}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'SISTER_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  public ProviderNotFoundException(String msg){  super(msg);}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  private void initSubAndProd(final long subscriptionCreationTime,final long subscriptionActivationTime) throws NonUniqueBusinessKeyException {  subscription=Subscriptions.createSubscription(mgr,customer.getOrganizationId(),product.getProductId(),"subscriptionId",subscriptionCreationTime,subscriptionActivationTime,product.getVendor(),1);  subscription.getProduct().setHistoryModificationTime(Long.valueOf(subscriptionCreationTime));}  }
class C{  public void test_syntax_update_bad_04() throws MalformedQueryException {  final String query="INSERT DATA { GRAPH ?g {<:s> <:p> <:o> } }";  negativeTest(query);}  }
class C{  public int compareTo(ReadablePartial partial){  if (this == partial) {    return 0;  }  if (partial instanceof LocalDate) {    LocalDate other=(LocalDate)partial;    if (iChronology.equals(other.iChronology)) {      return (iLocalMillis < other.iLocalMillis ? -1 : (iLocalMillis == other.iLocalMillis ? 0 : 1));    }  }  return super.compareTo(partial);}  }
class C{  @Override public AsyncFuture<Void> transform(Void result) throws Exception {  final ArrayList<AsyncFuture<Void>> pending=new ArrayList<>();  pending.add(doLastFlush());synchronized (pendingLock) {    pending.addAll(FlushingPluginSink.this.pending);    FlushingPluginSink.this.pending.clear();  }  return async.collectAndDiscard(pending);}  }
class C{  @BeforeMethod public void init(){  MockitoAnnotations.initMocks(this);  storageBranchIndexer=new StorageBranchIndexer<>(delegateIndexer,childIndexer,1,true);}  }
class C{  private void lock(){  lock.acquire();}  }
class C{  public static long max(final long... array){  validateArray(array);  long max=array[0];  for (int j=1; j < array.length; j++) {    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Builder regulator(final Regulator regulator){  this.regulator=regulator;  return this;}  }
class C{  public String schema(){  return schemaName;}  }
class C{  public PlayerInAreaCondition(final Area area){  this.area=checkNotNull(area);}  }
class C{  public void allowUpdatesAutoDownload(boolean isAllowed){  allowUpdatesAutoDownload=isAllowed;}  }
class C{  public static Properties readProperties(String resourceName) throws Exception {  Properties defaultProps=new Properties();  try {    Utils utils=new Utils();    Enumeration<URL> urls=utils.getClass().getClassLoader().getResources(resourceName);    boolean first=true;    while (urls.hasMoreElements()) {      URL url=urls.nextElement();      if (first) {        defaultProps.load(url.openStream());        first=false;      } else {        Properties props=new Properties(defaultProps);        props.load(url.openStream());        defaultProps=props;      }    }  } catch (  Exception ex) {    System.err.println("Warning, unable to load properties file(s) from " + "system resource (Utils.java): " + resourceName);  }  int slInd=resourceName.lastIndexOf('/');  if (slInd != -1) {    resourceName=resourceName.substring(slInd + 1);  }  Properties userProps=new Properties(defaultProps);  if (!WekaPackageManager.PROPERTIES_DIR.exists()) {    WekaPackageManager.PROPERTIES_DIR.mkdir();  }  File propFile=new File(WekaPackageManager.PROPERTIES_DIR.toString() + File.separator + resourceName);  if (propFile.exists()) {    try {      userProps.load(new FileInputStream(propFile));    } catch (    Exception ex) {      throw new Exception("Problem reading user properties: " + propFile);    }  }  Properties localProps=new Properties(userProps);  propFile=new File(resourceName);  if (propFile.exists()) {    try {      localProps.load(new FileInputStream(propFile));    } catch (    Exception ex) {      throw new Exception("Problem reading local properties: " + propFile);    }  }  return localProps;}  }
class C{  private void layoutInternal(){  layout(true,true);}  }
class C{  private ChartPanel generatePanel(CategoricalTable distrib){  final String variableName=distrib.getVariable();  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  distrib.getValues().stream().forEach(null);  JFreeChart chart=ChartFactory.createBarChart("Probability distribution P(" + variableName + ")","Value","Probability",dataset,PlotOrientation.VERTICAL,false,true,false);  CategoryPlot plot=(CategoryPlot)chart.getPlot();  BarRenderer renderer=(BarRenderer)plot.getRenderer();  renderer.setToolTipGenerator(null);  renderer.setBarPainter(new StandardBarPainter());  renderer.setDrawBarOutline(false);  renderer.setSeriesPaint(0,new Color(5,100,30));  return new ChartPanel(chart,true,true,true,true,true);}  }
class C{  public static String byteArrayToAltBase64(byte[] a){  return byteArrayToBase64(a,true);}  }
class C{  private void closeDialog(java.awt.event.WindowEvent evt){  setVisible(false);  dispose();}  }
class C{  public Shape createRectangle(final int x,final int y,final int w,final int h){  return createRoundRectangleInternal(x,y,w,h,0,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.SQUARE);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static Neo4jGraph open(final Neo4jGraphAPI baseGraph){  return new Neo4jGraph(baseGraph,EMPTY_CONFIGURATION);}  }
class C{  private void attachImageFrom(int aImageOrigin){  if (IMAGE_ORIGIN_CAMERA == aImageOrigin) {    attachImageFromCamera();  } else   if (IMAGE_ORIGIN_GALLERY == aImageOrigin) {    attachImageFrommGallery();  } else {    Log.w(LOG_TAG,"## attachImageFrom(): unknown image origin");  }}  }
class C{  public void run(){  try {    ILaunchConfiguration config=fTab.getLaunchConfiguration();    ILaunchConfigurationWorkingCopy copy=null;    if (config.isWorkingCopy()) {      copy=(ILaunchConfigurationWorkingCopy)config;    } else {      copy=config.getWorkingCopy();    }    copy.removeAttribute(customAttributeName);    fTab.refreshSelection();  } catch (  CoreException e) {    return;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ABSTRACT_CATCH_BLOCK__BLOCK:    return basicSetBlock(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected double test(Algorithm algorithm,long seed){  PRNG.setSeed(seed);  Assert.assertTrue(algorithm instanceof PISAAlgorithm);  Assert.assertEquals(0,algorithm.getNumberOfEvaluations());  Assert.assertEquals(0,algorithm.getResult().size());  Assert.assertFalse(algorithm.isTerminated());  while (algorithm.getNumberOfEvaluations() < 1000) {    algorithm.step();  }  algorithm.terminate();  Assert.assertEquals(1000,algorithm.getNumberOfEvaluations());  Assert.assertTrue(algorithm.getResult().size() > 0);  Assert.assertTrue(algorithm.isTerminated());  qualityIndicator.calculate(algorithm.getResult());  return qualityIndicator.getHypervolume();}  }
class C{  public static byte[] toByteArray(Object obj){  int len=(int)sizeOf(obj);  byte[] bytes=new byte[len];  unsafe.copyMemory(obj,0,bytes,Unsafe.ARRAY_BYTE_BASE_OFFSET,bytes.length);  return bytes;}  }
class C{  public List<Long> readVectorUInt(){  throw new RuntimeException("Vector objects not supported with AMF0");}  }
class C{  public static Boolean convertNumericStringToBoolean(String s){  if (s == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    if (s.length() == 0) {      return null;    }    Integer i=makeInteger(s);    return i != null && i != 0;  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",s);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }}  }
class C{  public static void main(String[] args) throws IOException {  FreeCellNode fcn=Deal.initialize(new File("artifacts","32000.txt"),Integer.valueOf(args[0]));  System.out.println("Game Number:" + args[0]);  System.out.println(fcn);  for (  short s : (short[])fcn.key()) {    System.out.print(s + ",");  }  System.out.println();  Count.computeCount(fcn,16);}  }
class C{  public Object clone() throws CloneNotSupportedException {  TemplateSubPatternAssociation tspa=(TemplateSubPatternAssociation)super.clone();  tspa.m_next=null;  return tspa;}  }
class C{  private void geofenceTriggered(Intent intent){  Log.v(TAG,ACTION_GEOFENCE_TRIGGERED);  boolean geofenceEnabled=Utils.getGeofenceEnabled(this);  GeofencingEvent event=GeofencingEvent.fromIntent(intent);  List<Geofence> geofences=event.getTriggeringGeofences();  if (geofenceEnabled && geofences != null && geofences.size() > 0) {    if (event.getGeofenceTransition() == Geofence.GEOFENCE_TRANSITION_ENTER) {      showNotification(geofences.get(0).getRequestId(),Constants.USE_MICRO_APP);    } else     if (event.getGeofenceTransition() == Geofence.GEOFENCE_TRANSITION_EXIT) {      clearNotificationInternal();      clearRemoteNotifications();    }  }  UtilityReceiver.completeWakefulIntent(intent);}  }
class C{  public SparseArrayCompat(int initialCapacity){  initialCapacity=idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public static Object next(Enum self){  final Method[] methods=self.getClass().getMethods();  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    if (method.getName().equals("next") && method.getParameterTypes().length == 0) {      return InvokerHelper.invokeMethod(self,"next",NO_ARGS);    }  }  Object[] values=(Object[])InvokerHelper.invokeStaticMethod(self.getClass(),"values",NO_ARGS);  int index=Arrays.asList(values).indexOf(self);  return values[index < values.length - 1 ? index + 1 : 0];}  }
class C{  @DSSpec(DSCat.INTERNET) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.748 -0500",hash_original_method="9A475DD1FCE4CCB36A5D73E904D3A34C",hash_generated_method="7D1CD524014605854B17C58503824E09") @Override public void connect() throws IOException {  File f=new File(fileName);  if (f.isDirectory()) {    isDir=true;    is=getDirectoryListing(f);  } else {    is=new BufferedInputStream(new FileInputStream(f));    long lengthAsLong=f.length();    length=lengthAsLong <= Integer.MAX_VALUE ? (int)lengthAsLong : Integer.MAX_VALUE;  }  connected=true;}  }
class C{  private void clearParameters(){  fieldValue.setText("");  fieldName.setText("");  fieldContact.setText("");  fieldEMail.setText("");  fieldPhone.setText("");  fieldPostal.setText("");  checkCustomer.setSelected(m_isSOMatch);  checkAND.setSelected(true);}  }
class C{  @Override void executeSqlBatch(String[] queryarr,JSONArray[] jsonparams,String[] queryIDs,CallbackContext cbc){  if (mydb == null) {    cbc.error("database has been closed");    return;  }  int len=queryarr.length;  JSONArray batchResults=new JSONArray();  for (int i=0; i < len; i++) {    String query_id=queryIDs[i];    JSONObject queryResult=null;    String errorMessage="unknown";    try {      String query=queryarr[i];      long lastTotal=mydb.getTotalChanges();      queryResult=this.executeSqlStatementNDK(query,jsonparams[i],cbc);      long newTotal=mydb.getTotalChanges();      long rowsAffected=newTotal - lastTotal;      queryResult.put("rowsAffected",rowsAffected);      if (rowsAffected > 0) {        long insertId=mydb.getLastInsertRowid();        if (insertId > 0) {          queryResult.put("insertId",insertId);        }      }    } catch (    Exception ex) {      ex.printStackTrace();      errorMessage=ex.getMessage();      Log.v("executeSqlBatch","SQLitePlugin.executeSql[Batch](): Error=" + errorMessage);    }    try {      if (queryResult != null) {        JSONObject r=new JSONObject();        r.put("qid",query_id);        r.put("type","success");        r.put("result",queryResult);        batchResults.put(r);      } else {        JSONObject r=new JSONObject();        r.put("qid",query_id);        r.put("type","error");        JSONObject er=new JSONObject();        er.put("message",errorMessage);        r.put("result",er);        batchResults.put(r);      }    } catch (    JSONException ex) {      ex.printStackTrace();      Log.v("executeSqlBatch","SQLitePlugin.executeSql[Batch](): Error=" + ex.getMessage());    }  }  cbc.success(batchResults);}  }
class C{  public OutlierResult run(Relation<V> relation){  final int dimensionality=RelationUtil.dimensionality(relation);  final int size=relation.size();  ArrayList<ArrayList<DBIDs>> ranges=buildRanges(relation);  ArrayList<ArrayList<IntIntPair>> Rk;{    Rk=new ArrayList<>();    ArrayList<IntIntPair> q=new ArrayList<>();    for (int i=0; i < dimensionality; i++) {      for (int j=0; j < phi; j++) {        IntIntPair s=new IntIntPair(i,j);        q.add(s);        ArrayList<IntIntPair> v=new ArrayList<>();        v.add(s);        Rk.add(v);      }    }    for (int i=2; i <= k; i++) {      ArrayList<ArrayList<IntIntPair>> Rnew=new ArrayList<>();      for (int j=0; j < Rk.size(); j++) {        ArrayList<IntIntPair> c=Rk.get(j);        for (        IntIntPair pair : q) {          boolean invalid=false;          for (int t=0; t < c.size(); t++) {            if (c.get(t).first == pair.first) {              invalid=true;              break;            }          }          if (!invalid) {            ArrayList<IntIntPair> neu=new ArrayList<>(c);            neu.add(pair);            Rnew.add(neu);          }        }      }      Rk=Rnew;    }  }  WritableDoubleDataStore sparsity=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC);  for (  ArrayList<IntIntPair> sub : Rk) {    DBIDs ids=computeSubspace(sub,ranges);    final double sparsityC=sparsity(ids.size(),size,k,phi);    if (sparsityC < 0) {      for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {        double prev=sparsity.doubleValue(iter);        if (Double.isNaN(prev) || sparsityC < prev) {          sparsity.putDouble(iter,sparsityC);        }      }    }  }  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double val=sparsity.doubleValue(iditer);    if (Double.isNaN(val)) {      sparsity.putDouble(iditer,0.0);      val=0.0;    }    minmax.put(val);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("AggarwalYuNaive","aggarwal-yu-outlier",sparsity,relation.getDBIDs());  OutlierScoreMeta meta=new InvertedOutlierScoreMeta(minmax.getMin(),minmax.getMax(),Double.NEGATIVE_INFINITY,0.0);  return new OutlierResult(meta,scoreResult);}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public static Process or(final Process left,final Process right) throws IOException {  return pipeTo(left,right);}  }
class C{  private void computeEquationParts(){  expMultiplier=Math.sqrt(2.0 * Math.PI) / sigma / rho;  expMember=4.0 * sigma * sigma;}  }
class C{  public void message(SourceLocator srcLctr,String msg,boolean terminate) throws TransformerException {  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler) {    errHandler.warning(new TransformerException(msg,srcLctr));  } else {    if (terminate)     throw new TransformerException(msg,srcLctr); else     System.out.println(msg);  }}  }
class C{  public boolean isEmpty(){  return (this.received == null) || (this.received.isEmpty());}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER___GET_VAR_DECL:    return getVarDecl();case N4JSPackage.VARIABLE_DECLARATION_CONTAINER___IS_BLOCK_SCOPED:  return isBlockScoped();}return super.eInvoke(operationID,arguments);}  }
class C{  private void delete(final DiffBlock curA){  DiffPart action=new DiffPart(DiffAction.DELETE);  action.setStart(version.length());  codecData.checkBlocksizeS(version.length());  action.setLength(curA.getRevAEnd() - curA.getRevAStart());  codecData.checkBlocksizeE(action.getLength());  diff.add(action);}  }
class C{  public OptionSet removeUriPort(){  uri_port=null;  return this;}  }
class C{  public HdfsMetadataEtl(int dbId,long whExecId,Properties prop){  super(null,dbId,whExecId,prop);}  }
class C{  protected static <T>void respond(DataSubscriber<T> subscriber,DataSource<T> dataSource,int response){switch (response) {case NO_INTERACTIONS:    break;case ON_NEW_RESULT:  subscriber.onNewResult(dataSource);break;case ON_FAILURE:subscriber.onFailure(dataSource);break;case ON_CANCELLATION:subscriber.onCancellation(dataSource);break;}}  }
class C{  @ApiOperation(value="Sync triggers on the single engine") @RequestMapping(value="engine/synctriggers",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postSyncTriggers(@RequestParam(required=false,value="force") boolean force){  syncTriggersImpl(getSymmetricEngine(),force);}  }
class C{  public double noise(double x,double y,double z,double w,double frequency,double amplitude,boolean normalized){  double result=0;  double amp=1;  double freq=1;  double max=0;  x*=this.xScale;  y*=this.yScale;  z*=this.zScale;  w*=this.wScale;  for (  NoiseGenerator octave : this.octaves) {    result+=((SimplexNoiseGenerator)octave).noise(x * freq,y * freq,z * freq,w * freq) * amp;    max+=amp;    freq*=frequency;    amp*=amplitude;  }  if (normalized) {    result/=max;  }  return result;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String getSystemTimeZoneID(java.lang.String,java.lang.String)")) {    java_util_TimeZone_getSystemTimeZoneID(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public Quaternionf rotateTo(Vector3fc fromDir,Vector3fc toDir){  return rotateTo(fromDir.x(),fromDir.y(),fromDir.z(),toDir.x(),toDir.y(),toDir.z(),this);}  }
class C{  public boolean isFirst() throws SQLException {  return fbFetcher.isFirst();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:49.509 -0500",hash_original_method="9AA82EE1A1BEF7CB34AB2EE7CC0970FC",hash_generated_method="7E14C3B54647C0239A344CC421AAE0ED") public synchronized String generateTag(){  return Integer.toHexString(rand.nextInt());}  }
class C{  protected void postRemove(Object o){}  }
class C{  public KeywordTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public MaterialFilePicker withHiddenFiles(boolean show){  mShowHidden=show;  return this;}  }
class C{  @Override final public boolean isSparql10(){  return false;}  }
class C{  @Override public Object readObject() throws IOException {  return readObject(0);}  }
class C{  @Override public void init(ServletConfig servletConfig) throws ServletException {  this.servletConfig=servletConfig;  try {    facesContextFactory=(FacesContextFactory)FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);  } catch (  FacesException e) {    ResourceBundle rb=LOGGER.getResourceBundle();    String msg=rb.getString("severe.webapp.facesservlet.init_failed");    Throwable rootCause=(e.getCause() != null) ? e.getCause() : e;    LOGGER.log(Level.SEVERE,msg,rootCause);    throw new UnavailableException(msg);  }  try {    LifecycleFactory lifecycleFactory=(LifecycleFactory)FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);    String lifecycleId;    if (null == (lifecycleId=servletConfig.getInitParameter(LIFECYCLE_ID_ATTR))) {      lifecycleId=servletConfig.getServletContext().getInitParameter(LIFECYCLE_ID_ATTR);    }    if (lifecycleId == null) {      lifecycleId=LifecycleFactory.DEFAULT_LIFECYCLE;    }    lifecycle=lifecycleFactory.getLifecycle(lifecycleId);    initHttpMethodValidityVerification();  } catch (  FacesException e) {    Throwable rootCause=e.getCause();    if (rootCause == null) {      throw e;    } else {      throw new ServletException(e.getMessage(),rootCause);    }  }}  }
class C{  public static boolean encodeToFile(byte[] dataToEncode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public static TermsLookupQueryBuilder termsLookupQuery(String name){  return new TermsLookupQueryBuilder(name);}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  protected void onAnimationFinished(){  if (mIsAnimatingPromoAcceptance) {    mIsAnimatingPromoAcceptance=false;    setPreferenceState(true);  }  if (mIsAnimatingPanelClosing) {    mIsAnimatingPanelClosing=false;  }  if (mAnimatingState != PanelState.UNDEFINED && getHeight() == getPanelHeightFromState(mAnimatingState)) {    setPanelState(mAnimatingState,mAnimatingStateReason);  }  mAnimatingState=PanelState.UNDEFINED;  mAnimatingStateReason=StateChangeReason.UNKNOWN;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.492 -0500",hash_original_method="C0F2E9DF48888A828D6640DBBB8ADDE5",hash_generated_method="D3ABD393302D2F8BD59B3AC7E2DC782D") public void putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  unparcel();  mMap.put(key,value);}  }
class C{  public Query aliasFilter(String... aliasNames){  if (aliasNames == null || aliasNames.length == 0) {    return null;  }  if (aliasNames.length == 1) {    AliasMetaData alias=this.aliases.get(aliasNames[0]);    if (alias == null) {      throw new InvalidAliasNameException(index,aliasNames[0],"Unknown alias name was passed to alias Filter");    }    return parse(alias);  } else {    BooleanQuery.Builder combined=new BooleanQuery.Builder();    for (    String aliasName : aliasNames) {      AliasMetaData alias=this.aliases.get(aliasName);      if (alias == null) {        throw new InvalidAliasNameException(index,aliasNames[0],"Unknown alias name was passed to alias Filter");      }      Query parsedFilter=parse(alias);      if (parsedFilter != null) {        combined.add(parsedFilter,BooleanClause.Occur.SHOULD);      } else {        return null;      }    }    return combined.build();  }}  }
class C{  @Override public void update(ExampleSet exampleSet){  try {    this.update(exampleSet,null);  } catch (  ProcessStoppedException e) {  }}  }
class C{  private Query buildQueryForField(String fieldName,PriorityQueue<USField> q,BooleanQuery query){  USField cur;  int qterms=0;  int maxTerms=maxQueryTermsPerField;  if (maxTerms <= 0) {    maxTerms=Integer.MAX_VALUE;  }  BooleanQuery tmpQuery=new BooleanQuery();  double sumQuaredBoost=0.0f;  while ((cur=q.pop()) != null) {    Query tq=null;    final Term term=new Term(cur.getFieldName(),cur.getWord());    if (isPayloadField(cur.getFieldName())) {      tq=new PayloadTermQuery(term,new AveragePayloadFunction(),true);    } else {      tq=new TermQuery(term);    }    float boost=cur.getScore();    sumQuaredBoost+=boost * boost;    tq.setBoost(boost);    try {      tmpQuery.add(tq,BooleanClause.Occur.SHOULD);      qterms++;    } catch (    BooleanQuery.TooManyClauses ignore) {      break;    }    if (qterms >= maxTerms) {      break;    }  }  double vectorLength=Math.sqrt(sumQuaredBoost);  if (vectorLength <= 0.0) {    return query;  }  buildBoostedNormalizedQuery(fieldName,tmpQuery,query,vectorLength);  return query;}  }
class C{  public boolean isSrcClass(SootClass clz){  return isSrcClass(clz.getName());}  }
class C{  protected void doSetParameters(List<String> params){  if (!params.isEmpty()) {    String first=params.get(0);    if (!first.startsWith("-")) {      Class<? extends AbstractApplication> c=ELKIServiceRegistry.findImplementation(AbstractApplication.class,first);      if (c != null) {        maincls=c;        params.remove(0);      }    }  }  SerializedParameterization config=new SerializedParameterization(params);  TrackParameters track=new TrackParameters(config);  track.tryInstantiate(LoggingStep.class);  track.tryInstantiate(maincls);  config.logUnusedParameters();  final boolean hasErrors=(config.getErrors().size() > 0);  if (hasErrors && !params.isEmpty()) {    reportErrors(config);  }  runButton.setEnabled(!hasErrors);  List<String> remainingParameters=config.getRemainingParameters();  outputArea.clear();  String mainnam=maincls.getCanonicalName();  if (mainnam.startsWith(APP_PREFIX)) {    mainnam=mainnam.substring(APP_PREFIX.length());  }  commandLine.setText(format(mainnam,params));  parameterTable.removeEditor();  parameterTable.setEnabled(false);  parameters.updateFromTrackParameters(track);  if (remainingParameters != null && !remainingParameters.isEmpty()) {    DynamicParameters.RemainingOptions remo=new DynamicParameters.RemainingOptions();    try {      remo.setValue(FormatUtil.format(remainingParameters," "));    } catch (    ParameterException e) {      LOG.exception(e);    }    int bits=DynamicParameters.BIT_INVALID | DynamicParameters.BIT_SYNTAX_ERROR;    parameters.addParameter(remo,remo.getValue(),bits,0);  }  config.clearErrors();  parameterTable.revalidate();  parameterTable.setEnabled(true);}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  private void checkRep() throws RuntimeException {  if (denom < 0) {    throw new RuntimeException("Denominator of a RatNum cannot be less than zero");  }  if (denom > 0) {    int thisGcd=gcd(numer,denom);    if (thisGcd != 1 && thisGcd != -1) {      throw new RuntimeException("RatNum not in lowest form");    }  }}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public Handle charSetLiteral(GrammarAST charSetAST){  ATNState left=newState(charSetAST);  ATNState right=newState(charSetAST);  IntervalSet set=getSetFromCharSetLiteral(charSetAST);  left.addTransition(new SetTransition(right,set));  charSetAST.atnState=left;  return new Handle(left,right);}  }
class C{  @Deprecated public boolean hasAudioSegments(){  return getAudioSegments().size() > 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.955 -0400",hash_original_method="EEF82CFD9BF09DDA964C2F803A7E7136",hash_generated_method="13FC2D2C54A6F8A0F7F63524FFF2F2AD") private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          UNSAFE.compareAndSwapLong(this,stateOffset,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          UNSAFE.compareAndSwapLong(this,stateOffset,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  public final GF2nElement at(int index){  return coeff[index];}  }
class C{  public GamlSwitch(){  if (modelPackage == null) {    modelPackage=GamlPackage.eINSTANCE;  }}  }
class C{  @Override public String generateLabel(CategoryDataset dataset,int row,int column){  return generateLabelString(dataset,row,column);}  }
class C{  @Override public Amount calculateMinimumFee(final Transaction transaction){switch (transaction.getType()) {case TransactionTypes.TRANSFER:    return this.calculateMinimumFee((TransferTransaction)transaction);case TransactionTypes.MULTISIG_AGGREGATE_MODIFICATION:  return calculateMinimumFee((MultisigAggregateModificationTransaction)transaction);case TransactionTypes.PROVISION_NAMESPACE:case TransactionTypes.MOSAIC_DEFINITION_CREATION:case TransactionTypes.MOSAIC_SUPPLY_CHANGE:return FEE_UNIT.multiply(FEE_MULTIPLIER).multiply(18);}return FEE_UNIT.multiply(FEE_MULTIPLIER);}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  FileInputStream in=null;  try {    in=new FileInputStream(file);    return readFile(in,in.getChannel().size());  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public static void e(String msg,Object... args){  if (!allowE)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  TaskStats(PerfTask task,int taskRunNum,int round){  this.task=task;  this.taskRunNum=taskRunNum;  this.round=round;  maxTotMem=Runtime.getRuntime().totalMemory();  maxUsedMem=maxTotMem - Runtime.getRuntime().freeMemory();  start=System.currentTimeMillis();}  }
class C{  public static StringBlock read(IntReader reader) throws IOException {  ChunkUtil.readCheckType(reader,CHUNK_TYPE);  int chunkSize=reader.readInt();  int stringCount=reader.readInt();  int styleOffsetCount=reader.readInt();  reader.readInt();  int stringsOffset=reader.readInt();  int stylesOffset=reader.readInt();  StringBlock block=new StringBlock();  block.m_stringOffsets=reader.readIntArray(stringCount);  if (styleOffsetCount != 0) {    block.m_styleOffsets=reader.readIntArray(styleOffsetCount);  }{    int size=((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;    if ((size % 4) != 0) {      throw new IOException("String data size is not multiple of 4 (" + size + ").");    }    block.m_strings=reader.readIntArray(size / 4);  }  if (stylesOffset != 0) {    int size=(chunkSize - stylesOffset);    if ((size % 4) != 0) {      throw new IOException("Style data size is not multiple of 4 (" + size + ").");    }    block.m_styles=reader.readIntArray(size / 4);  }  return block;}  }
class C{  public void truncateTrailingData(boolean t){  this.truncatingTrailingData=t;}  }
class C{  private String makePretty(double number){  String r=mFormat.format(number);  r=r.replaceAll("E[0-9]",SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);  while (r.length() > MAX_LENGTH || r.matches("[0-9]+\\.[a-z]")) {    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);  }  return r;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static String unicode2html(final String text,final boolean amp,final boolean html){  if (text == null)   return null;  final StringBuilder sb=new StringBuilder(text.length() * 12 / 10);  int textpos=0;  String r;  char c;  while (textpos < text.length()) {    c=text.charAt(textpos);    if (amp && c == AMP_UNICODE) {      sb.append(AMP_HTML);      textpos++;      continue;    }    if ((r=UNICODE2HTML4XML.get(c)) != null) {      sb.append(r);      textpos++;      continue;    }    if (html && (r=UNICODE2HTML4HTML.get(c)) != null) {      sb.append(r);      textpos++;      continue;    }    sb.append(c);    textpos++;  }  return sb.toString();}  }
class C{  WriteResult packet(long seq,short flags,long offset,long len){  assert HEADER_SIZE + len <= MAX_PACKET;  long now=now();  byte[] buffer=new byte[HEADER_SIZE + (int)len];  long_to_bytes(m_conv,buffer,0);  long_to_bytes(seq,buffer,4);  long_to_bytes(m_rcv_nxt,buffer,8);  buffer[12]=0;  buffer[13]=(byte)(flags & 0xFF);  short_to_bytes(m_rcv_wnd >> m_rwnd_scale,buffer,14);  long_to_bytes(now,buffer,16);  long_to_bytes(m_ts_recent,buffer,20);  m_ts_lastack=m_rcv_nxt;  if (len > 0) {    int bytes_read=m_sbuf.readOffset(buffer,HEADER_SIZE,(int)len,(int)offset);    assert bytes_read == len;  }  if (logger.isLoggable(Level.FINE)) {    logger.log(Level.FINE,"<-- " + debugName + " <CONV="+ m_conv+ "><FLG="+ flags+ "><SEQ="+ seq+ ":"+ (seq + len)+ "><ACK="+ m_rcv_nxt+ ">"+ "<WND="+ m_rcv_wnd+ "><SCALE="+ m_rwnd_scale+ "><TS="+ now+ "><TSR="+ m_ts_recent+ "><LEN="+ len+ ">");  }  WriteResult wres=m_notify.tcpWritePacket(this,buffer,(int)len + HEADER_SIZE);  if ((wres != WriteResult.WR_SUCCESS) && (0 != len)) {    return wres;  }  m_t_ack=0;  if (len > 0) {    m_lastsend=now;  }  m_lasttraffic=now;  m_bOutgoing=true;  return WriteResult.WR_SUCCESS;}  }
class C{  private void performExchange() throws InterruptedException {  exchangeA=createExchange(true,inputStreamA,outputStreamA,friendStoreA,messageStoreA);  exchangeB=createExchange(true,inputStreamB,outputStreamB,friendStoreB,messageStoreB);  Thread threadA=new Thread(exchangeA);  Thread threadB=new Thread(exchangeB);  threadA.start();  threadB.start();  threadA.join();  threadB.join();  assertEquals(Exchange.Status.SUCCESS,exchangeA.getExchangeStatus());  assertEquals(Exchange.Status.SUCCESS,exchangeB.getExchangeStatus());}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> deactivateSnapshotSession(URI consistencyGroupId,URI snapshotSessionId){  final String url=getIdUrl() + "/protection/snapshot-sessions/{fcid}/deactivate";  return postTasks(url,consistencyGroupId,snapshotSessionId);}  }
class C{  public TagHandlerPool(){}  }
class C{  boolean isValidBackupDir(File ksDir,File cfDir,File bkDir){  if (!bkDir.isDirectory() && !bkDir.exists()) {    return false;  }  String ksName=ksDir.getName();  if (SKIP_KEYSPACES.contains(ksName)) {    logger.debug("Skipping keyspace {}",ksName);    return false;  }  String cfName=cfDir.getName();  if (SKIP_COLUMN_FAMILIES.containsKey(ksName) && SKIP_COLUMN_FAMILIES.get(ksName).contains(cfName)) {    logger.debug("Skipping column family: {}",cfName);    return false;  }  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  double smallNumber=-999999.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      output.setNoDataValue(noData);    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        value=Double.valueOf(allRecords[record.getRecordNumber() - 1][assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        if (!partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,value));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      pq.add(new RowPriorityGridCell(row,col,value));                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      for (part=0; part < numParts; part++) {        if (partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,smallNumber));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      z=output.getValue(row,col);                      if (z == value) {                        pq.add(new RowPriorityGridCell(row,col,smallNumber));                      }                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          if (cell.z == smallNumber) {            output.setValue(cell.row,cell.col,backgroundValue);          } else {            output.setValue(cell.row,cell.col,cell.z);          }          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    if (numCellsToWrite > 0) {      do {        cell=pq.poll();        if (cell.z == smallNumber) {          output.setValue(cell.row,cell.col,backgroundValue);        } else {          output.setValue(cell.row,cell.col,cell.z);        }        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings("unchecked") protected TypeToken(){  this.type=getSuperclassTypeParameter(getClass());  this.rawType=(Class<? super T>)$Type$Types.getRawType(type);  this.hashCode=type.hashCode();}  }
class C{  public void insertString(int offset,String string,AttributeSet attr) throws BadLocationException {  if (string != null && string.length() == 1) {    if (offset > 2)     return;    if (!Character.isDigit(string.charAt(0))) {      log.config("No Digit=" + string);      return;    }    char[] cc=getText().toCharArray();    cc[offset]=string.charAt(0);    String result=new String(cc);    int i=0;    try {      i=Integer.parseInt(result.trim());    } catch (    Exception e) {      log.log(Level.SEVERE,e.toString());    }    if (i < 0) {      log.config("Invalid value: " + i);      return;    }    if (!m_isHour && i > 59) {      log.config("Invalid minute value: " + i);      return;    }    if (m_isHour && m_is12Hour && i > 12) {      log.config("Invalid 12 hour value: " + i);      return;    }    if (m_isHour && !m_is12Hour && i > 24) {      log.config("Invalid 24 hour value: " + i);      return;    }  }  super.insertString(offset,string,attr);}  }
class C{  public Runnable decrementAsRunnable(){  return mDecrementRunnable;}  }
class C{  Record makeRecord(String line){  if (line == null || "".equals(line))   return null;  IrisRecord r=new IrisRecord();  String[] split=line.split(",");  String col;  for (int i=0; i < split.length; i++) {    col=split[i].replaceAll("'","");    if (i == 0) {      r.sepallength=Float.valueOf(col);    } else     if (i == 1) {      r.sepalwidth=Float.valueOf(col);    } else     if (i == 2) {      r.petallength=Float.valueOf(col);    } else     if (i == 3) {      r.petalwidth=Float.valueOf(col);    } else     if (i == 4) {      if ("Iris-setosa".equals(col))       r.setosa=true; else       if ("Iris-versicolor".equals(col))       r.versicolor=true; else       if ("Iris-virginica".equals(col))       r.virginica=true;    } else {      System.err.println("Too many columns!!!");    }  }  return r;}  }
class C{  public List<Edge> toEdges(){  List<Edge> result=new ArrayList<Edge>();  for (int i=0; i < nodes.size(); i++) {    result.add(new Edge(get(i),get(i + 1)));  }  return result;}  }
class C{  public void addPairs(Map<String,Value> pairs){  map.putAll(pairs);  cachedHash=0;}  }
class C{  public boolean optBoolean(int index){  return optBoolean(index,false);}  }
class C{  public void reset(){  textures.clear();}  }
class C{  public void decrementConsciousnessLevel(int amount){  this.consciousnessLevel=this.consciousnessLevel - amount;}  }
class C{  private static byte[] ntlmHash(String password) throws Exception {  byte[] unicodePassword=password.getBytes("UnicodeLittleUnmarked");  MessageDigest md4=MessageDigest.getInstance("MD4");  return md4.digest(unicodePassword);}  }
class C{  public boolean hasNonDefaultBindAddress(){  if (getBindAddress() == null)   return false;  return !DistributionConfig.DEFAULT_BIND_ADDRESS.equals(getBindAddress());}  }
class C{  private void updateStyle(JSeparator sep){  SeaGlassContext context=getContext(sep,ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateStyle(context,this);  if (style != oldStyle) {    if (sep instanceof JToolBar.Separator) {      Dimension size=((JToolBar.Separator)sep).getSeparatorSize();      if (size == null || size instanceof UIResource) {        size=(DimensionUIResource)style.get(context,"ToolBar.separatorSize");        if (true || size == null) {          size=new DimensionUIResource(10,10);        }        ((JToolBar.Separator)sep).setSeparatorSize(size);      }    }  }  context.dispose();}  }
class C{  protected static void addDescriptorFor(@NotNull List<FoldingDescriptor> result,@NotNull Document document,@NotNull PsiElement element,int startMargin,int endMargin,int minLines){  if (!(element.getParent() instanceof PerlNamespaceDefinition)) {    TextRange range=element.getTextRange();    int startOffset=range.getStartOffset() + startMargin;    int endOffset=range.getEndOffset() - endMargin;    int startLine=document.getLineNumber(startOffset);    int endLine=document.getLineNumber(endOffset);    if (endLine - startLine > minLines) {      result.add(new FoldingDescriptor(element.getNode(),new TextRange(startOffset,endOffset)));    }  }}  }
class C{  public TestFailure(Test failedTest,Throwable thrownException){  fFailedTest=failedTest;  fThrownException=thrownException;}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public VirtualPoolList listFileVirtualPool(@DefaultValue("") @QueryParam(TENANT_ID_QUERY_PARAM) String tenantId,@DefaultValue("") @QueryParam(VDC_ID_QUERY_PARAM) String shortVdcId){  _geoHelper.verifyVdcId(shortVdcId);  return getVirtualPoolList(VirtualPool.Type.file,shortVdcId,tenantId);}  }
class C{  public Iterator<? extends Table> iterator(){  return this.tables.values().iterator();}  }
class C{  private void checkCoreModulesAndExternalConfigSettings(CreateTestExternalMATSimConfig externalTestConfig,CreateTestM4UConfig testConfig,Config config){  Assert.assertTrue(config.controler().getFirstIteration() == externalTestConfig.getFirstIteration());  Assert.assertTrue(config.controler().getLastIteration() == externalTestConfig.getLastIteration());  Assert.assertTrue(Paths.checkPathEnding(config.controler().getOutputDirectory()).equalsIgnoreCase(Paths.checkPathEnding(externalTestConfig.getMatsim4opusOutput())));  Assert.assertTrue(Paths.checkPathEnding(config.network().getInputFile()).equalsIgnoreCase(Paths.checkPathEnding(externalTestConfig.getNetworkInputFileName())));  if (testConfig.getStartMode() != CreateTestM4UConfig.COLD_START) {    Assert.assertTrue(Paths.checkPathEnding(config.plans().getInputFile()).equalsIgnoreCase(Paths.checkPathEnding(externalTestConfig.getInputPlansFileName())));  }  Iterator<StrategySettings> iteratorStrategyCG=config.strategy().getStrategySettings().iterator();  while (iteratorStrategyCG.hasNext()) {    StrategySettings strategySettings=iteratorStrategyCG.next();  }  ActivityParams homeActivity=config.planCalcScore().getActivityParams("home");  ActivityParams workActivity=config.planCalcScore().getActivityParams("work");  Assert.assertTrue(homeActivity.getActivityType().equalsIgnoreCase("home"));  Assert.assertTrue(workActivity.getActivityType().equalsIgnoreCase("work"));  AccessibilityConfigGroup acm=ConfigUtils.addOrGetModule(config,AccessibilityConfigGroup.GROUP_NAME,AccessibilityConfigGroup.class);  MatrixBasedPtRouterConfigGroup ippcm=ConfigUtils.addOrGetModule(config,MatrixBasedPtRouterConfigGroup.GROUP_NAME,MatrixBasedPtRouterConfigGroup.class);  Assert.assertTrue(acm.getTimeOfDay() == externalTestConfig.timeOfDay);  boolean usePtStopsFlagFromConfig=ippcm.isUsingPtStops();  Assert.assertTrue(usePtStopsFlagFromConfig == externalTestConfig.usePtStops.equalsIgnoreCase("TRUE"));  if (externalTestConfig.usePtStops.equalsIgnoreCase("TRUE"))   Assert.assertTrue(Paths.checkPathEnding(ippcm.getPtStopsInputFile()).equalsIgnoreCase(Paths.checkPathEnding(externalTestConfig.ptStops)));  boolean usePtTimesAndDiastances=ippcm.isUsingTravelTimesAndDistances();  Assert.assertTrue(usePtTimesAndDiastances == externalTestConfig.useTravelTimesAndDistances.equalsIgnoreCase("TRUE"));  if (externalTestConfig.useTravelTimesAndDistances.equalsIgnoreCase("TRUE")) {    Assert.assertTrue(Paths.checkPathEnding(ippcm.getPtTravelTimesInputFile()).equalsIgnoreCase(externalTestConfig.ptTravelTimes));    Assert.assertTrue(Paths.checkPathEnding(ippcm.getPtTravelDistancesInputFile()).equalsIgnoreCase(externalTestConfig.ptTravelDistances));  }}  }
class C{  protected String internalGet(String key){  if (key == null)   throw new NullPointerException();  String result;synchronized (childAndPropertyLock) {    result=properties.get(key);  }  return result;}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public final <C extends Component>C add(Class<C> theInterface){  return add(Game.injector().resolve(Dependency.dependency(theInterface)));}  }
class C{  public Square(){  ByteBuffer bb=ByteBuffer.allocateDirect(squareCoords.length * 4);  bb.order(ByteOrder.nativeOrder());  vertexBuffer=bb.asFloatBuffer();  vertexBuffer.put(squareCoords);  vertexBuffer.position(0);  ByteBuffer dlb=ByteBuffer.allocateDirect(drawOrder.length * 2);  dlb.order(ByteOrder.nativeOrder());  drawListBuffer=dlb.asShortBuffer();  drawListBuffer.put(drawOrder);  drawListBuffer.position(0);}  }
class C{  private void proposeSetterDelegate(IJavaProject project,IMethod method,int invocationOffset,int indentationUnits,boolean isStatic,List<ICompletionProposal> proposals,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  String[] parameterNames=method.getParameterNames();  String expression=createJsMethodInvocationExpression(method.getElementName(),isStatic,parameterNames);  String code=createJsniBlock(project,expression,indentationUnits);  proposals.add(createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,expression));}  }
class C{  public OrganizationRemovedException(String message,Object[] params,Throwable cause){  super(message,cause,params);}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Long>();  for (  OFMessage m : msgs) {    long xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  @PostConstruct public void init(){  super.init("label.configuration.auth.targettoken");  configurationEnabled=isConfigEnabled();}  }
class C{  public static String formatMillis(int millisec){  int seconds=(int)(millisec / 1000);  int hours=seconds / (60 * 60);  seconds%=(60 * 60);  int minutes=seconds / 60;  seconds%=60;  String time;  if (hours > 0) {    time=String.format("%d:%02d:%02d",hours,minutes,seconds);  } else {    time=String.format("%d:%02d",minutes,seconds);  }  return time;}  }
class C{  public boolean isVertical(){  return vertical;}  }
class C{  public void clear(){  adapter=null;  tag=null;  position=RecyclerView.NO_POSITION;}  }
class C{  private boolean puedeSerAceptada(PrevisionVO prevision){  boolean puedeSerRecibida=false;  if (prevision.getEstado() == EstadoPrevision.ENVIADA.getIdentificador())   puedeSerRecibida=true;  return puedeSerRecibida;}  }
class C{  @SuppressWarnings("unchecked") public <T>T loadAs(String yaml,Class<T> type){  return (T)loadFromReader(new StreamReader(yaml),type);}  }
class C{  public static ExportMask createExportMask(DbClient dbClient,ExportGroup exportGroup,URI sdUri,String maskName) throws DatabaseException {  ExportMask exportMask=new ExportMask();  exportMask.setId(URIUtil.createId(ExportMask.class));  exportMask.setMaskName(maskName);  exportMask.setStorageDevice(sdUri);  dbClient.createObject(exportMask);  exportGroup.addExportMask(exportMask.getId());  dbClient.updateObject(exportGroup);  return exportMask;}  }
class C{  private boolean isAnomaly(Instance instance,ActiveRule rule){  boolean isAnomaly=false;  if (this.noAnomalyDetection == false) {    if (rule.getInstancesSeen() >= this.anomalyNumInstThreshold) {      isAnomaly=rule.isAnomaly(instance,this.univariateAnomalyprobabilityThreshold,this.multivariateAnomalyProbabilityThreshold,this.anomalyNumInstThreshold);    }  }  return isAnomaly;}  }
class C{  public T caseExportedVariableBinding(ExportedVariableBinding object){  return null;}  }
class C{  public boolean add(E e){  typeCheck(e);  long oldElements=elements;  elements|=(1L << ((Enum<?>)e).ordinal());  return elements != oldElements;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static String format(Object obj){  if (obj instanceof Number) {    return format((Number)obj);  } else {    return obj.toString();  }}  }
class C{  public byte[] readBytes() throws IOException {  int len=readInt();  if (len == -1) {    return null;  }  byte[] b=DataUtils.newBytes(len);  in.readFully(b);  return b;}  }
class C{  public void reportGpsGeofenceStatus(int status,int flags,double latitude,double longitude,double altitude,float speed,float bearing,float accuracy,long timestamp){  Location location=getLocation(flags,latitude,longitude,altitude,speed,bearing,accuracy,timestamp);  boolean available=false;  if (status == GeofenceHardware.GPS_GEOFENCE_AVAILABLE)   available=true;  int val=(available ? GeofenceHardware.MONITOR_CURRENTLY_AVAILABLE : GeofenceHardware.MONITOR_CURRENTLY_UNAVAILABLE);  setMonitorAvailability(GeofenceHardware.MONITORING_TYPE_GPS_HARDWARE,val);  acquireWakeLock();  Message m=mCallbacksHandler.obtainMessage(GPS_GEOFENCE_STATUS,location);  m.arg1=val;  mCallbacksHandler.sendMessage(m);}  }
class C{  public void testLocalClose() throws Exception {  grid(0).getOrCreateCache(getLocalConfig());  assert grid(0).cache(CACHE_NAME_LOC).get(KEY_VAL) == null;  assert grid(1).cache(CACHE_NAME_LOC).get(KEY_VAL) == null;  grid(0).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + 0);  grid(1).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + 1);  assert grid(0).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + 0);  assert grid(1).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + 1);  IgniteCache<Object,Object> cache=grid(1).cache(CACHE_NAME_LOC);  cache.close();  checkUsageFails(cache);  assertNull(grid(1).cache(CACHE_NAME_LOC));  AffinityTopologyVersion topVer=grid(1).context().cache().context().exchange().lastTopologyFuture().get();  grid(0).context().cache().context().exchange().affinityReadyFuture(topVer).get();  grid(0).getOrCreateCache(getLocalConfig());  grid(0).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + "recreated0");  grid(1).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + "recreated1");  grid(2).cache(CACHE_NAME_LOC).put(KEY_VAL,KEY_VAL + "recreated2");  assert grid(0).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + "recreated0");  assert grid(1).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + "recreated1");  assert grid(2).cache(CACHE_NAME_LOC).get(KEY_VAL).equals(KEY_VAL + "recreated2");}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_PeriodControl_ID=getRecord_ID();}  }
class C{  public byte ID(){  return 9;}  }
class C{  private void storeObjectInRequest(SOAPMessageContext ctx,String key,Object value){  assert ctx != null;  assert key != null;  assert value != null;  ServletRequest request=(ServletRequest)ctx.get(MessageContext.SERVLET_REQUEST);  request.setAttribute(key,value);}  }
class C{  public SpanQuery snear(String s,String m,String e,int slop,boolean inOrder){  return snear(st(s),st(m),st(e),slop,inOrder);}  }
class C{  private void addWalletTransaction(Pool pool,Transaction tx){  checkState(lock.isHeldByCurrentThread());  transactions.put(tx.getHash(),tx);switch (pool) {case UNSPENT:    unspent.put(tx.getHash(),tx);  break;case SPENT:spent.put(tx.getHash(),tx);break;case PENDING:pending.put(tx.getHash(),tx);break;case DEAD:dead.put(tx.getHash(),tx);break;default :throw new RuntimeException("Unknown wallet transaction type " + pool);}tx.getConfidence().addEventListener(txConfidenceListener,Threading.SAME_THREAD);}  }
class C{  public static ImageRequestBuilder newBuilderWithSource(Uri uri){  return new ImageRequestBuilder().setSource(uri);}  }
class C{  public HAPbrpcClient(List<PbrpcClient> clientList){  this.clientList=clientList;}  }
class C{  protected int countLinesInString(final String stringToSearch,final boolean countBlankLines){  assert (stringToSearch != null);  int length=stringToSearch.length();  int count=0;  char character=0;  boolean foundNonSpaceChar=false;  for (int i=0; i < length; i++) {    character=stringToSearch.charAt(i);    if (character == '\r' && (i + 1) < length && stringToSearch.charAt(i + 1) == '\n') {      i++;    }    if (character == '\n' || character == '\r') {      if (countBlankLines) {        count++;      } else {        if (foundNonSpaceChar) {          count++;        }      }      foundNonSpaceChar=false;    } else     if (character != ' ' && character != '\t') {      foundNonSpaceChar=true;    }  }  if (character != '\n' && character != '\r') {    count++;  }  return count;}  }
class C{  public synchronized boolean continueOperation(boolean sendEmpty,boolean inStream) throws IOException {  if (mGetOperation) {    if ((inStream) && (!mOperationDone)) {      mParent.sendRequest(0x83,null,mReplyHeader,mPrivateInput);      if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE) {        mOperationDone=true;      }      return true;    } else     if ((!inStream) && (!mOperationDone)) {      if (mPrivateInput == null) {        mPrivateInput=new PrivateInputStream(this);      }      if (!mGetFinalFlag) {        sendRequest(0x03);      } else {        sendRequest(0x83);        if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE) {          mOperationDone=true;        }      }      return true;    } else     if (mOperationDone) {      return false;    }  } else {    if ((!inStream) && (!mOperationDone)) {      if (mReplyHeader.responseCode == -1) {        mReplyHeader.responseCode=ResponseCodes.OBEX_HTTP_CONTINUE;      }      sendRequest(0x02);      return true;    } else     if ((inStream) && (!mOperationDone)) {      return false;    } else     if (mOperationDone) {      return false;    }  }  return false;}  }
class C{  public void addCheckConstraint(Session session,Expression expr){  if (expr == null) {    return;  }  resolver=new SingleColumnResolver(this);synchronized (this) {    String oldName=name;    if (name == null) {      name="VALUE";    }    expr.mapColumns(resolver,0);    name=oldName;  }  expr=expr.optimize(session);  resolver.setValue(ValueNull.INSTANCE);synchronized (this) {    expr.getValue(session);  }  if (checkConstraint == null) {    checkConstraint=expr;  } else {    checkConstraint=new ConditionAndOr(ConditionAndOr.AND,checkConstraint,expr);  }  checkConstraintSQL=getCheckConstraintSQL(session,name);}  }
class C{  public static String deriveInitialText(String text){  String result=null;  int startIdx=0;  int endIdx=0;  int textLength=text.length();  while (startIdx < textLength && result == null) {    startIdx=endIdx;    while (startIdx < textLength && !isInitialTextStartChar(text.charAt(startIdx))) {      startIdx++;    }    endIdx=startIdx + 1;    while (endIdx < textLength && ((endIdx - startIdx) < MAX_INITIAL_TEXT_LENGTH) && isInitialTextChar(text.charAt(endIdx))) {      endIdx++;    }    if (endIdx - startIdx >= MIN_INITIAL_TEXT_LENGTH) {      String candidateText=text.substring(startIdx,endIdx).trim();      if (!isGarbageText(candidateText)) {        result=candidateText;      }    }  }  return result;}  }
class C{  private void registerEventHandler(){  if (editor != null) {    editor.addPropertyChangeListener(new WeakPropertyChangeListener(eventHandler));    if (activeView != null) {      activeView.removeFigureSelectionListener(eventHandler);      activeView.removePropertyChangeListener(eventHandler);    }    activeView=editor.getActiveView();    if (activeView != null) {      activeView.addFigureSelectionListener(eventHandler);      activeView.addPropertyChangeListener(eventHandler);    }  }}  }
class C{  private void loadNext(ScheduleItem scheduleItem,Car car){  if (scheduleItem == null) {    log.debug("schedule item is null!, id: {}",getScheduleId());    return;  }  car.setNextLoadName(scheduleItem.getShipLoadName());  car.setFinalDestination(scheduleItem.getDestination());  car.setFinalDestinationTrack(scheduleItem.getDestinationTrack());  car.setNextPickupScheduleId(scheduleItem.getPickupTrainScheduleId());  car.setNextWait(scheduleItem.getWait());  scheduleItem.setHits(scheduleItem.getHits() + 1);  log.debug("Car ({}) type ({}) next load ({}) final destination ({}, {}) next wait: {}",car.toString(),car.getTypeName(),car.getNextLoadName(),car.getFinalDestinationName(),car.getFinalDestinationTrackName(),car.getNextWait());  car.updateKernel();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.groupStroke=SerialUtilities.readStroke(stream);  this.groupPaint=SerialUtilities.readPaint(stream);  this.minIcon=getIcon(new Arc2D.Double(-4,-4,8,8,0,360,Arc2D.OPEN),null,Color.black);  this.maxIcon=getIcon(new Arc2D.Double(-4,-4,8,8,0,360,Arc2D.OPEN),null,Color.black);  this.objectIcon=getIcon(new Line2D.Double(-4,0,4,0),false,true);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.stripOutlinePaint=SerialUtilities.readPaint(stream);  this.stripOutlineStroke=SerialUtilities.readStroke(stream);}  }
class C{  public static boolean checkFileName(String name){  return FILE_NAME.test(name);}  }
class C{  public Object clone(){  DVector2D clone=null;  try {    clone=(DVector2D)super.clone();  } catch (  Exception e) {    System.err.println("Error cloning " + getClass().getName() + ":");    e.printStackTrace();    System.exit(1);  }  clone.vector=(double[][])vector.clone();  for (int i=0; i < vector.length; ++i)   if (clone.vector[i] != null)   clone.vector[i]=(double[])vector[i].clone();  return clone;}  }
class C{  private void addDisableImageAccessSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,List<URI> snapshotIDs) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method disableImageAccessExecuteMethod=new Workflow.Method(METHOD_DISABLE_IMAGE_ACCESS_SINGLE_STEP,rpSystem.getId(),exportGroupID,snapshotIDs,false);  workflow.createStep(STEP_EXPORT_GROUP_DISABLE,"Disable image access subtask for export group: " + exportGroupID,null,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),disableImageAccessExecuteMethod,null,stepId);  _log.info(String.format("Added disable image access step [%s] in workflow",stepId));}  }
class C{  public synchronized void flush() throws IOException {  flushBuffer();  out.flush();}  }
class C{  @DSSpec(DSCat.EXEC) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.187 -0500",hash_original_method="2638FF3E02C15EB097A85AD3BAF82535",hash_generated_method="B03E339FC2895DF48CBE79037980BEB1") public void schedule(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,false);}  }
class C{  public void blockContact(ContactId contact) throws ContactManagerException, FileAccessException {  if (sLogger.isActivated()) {    sLogger.info("Block contact ".concat(contact.toString()));  }synchronized (mContactInfoCache) {    ContactInfo oldInfo=getContactInfoInternal(contact);    ContactInfo newInfo=new ContactInfo(oldInfo);    newInfo.setRcsStatus(RcsStatus.BLOCKED);    setContactInfoInternal(newInfo,oldInfo);  }}  }
class C{  private void resetUniqueId(String uniqueId){  new PreferencesManager(activity).reset(uniqueId);}  }
class C{  public static Bitmap loadArtwork(ArtworkEntry artworkEntry,int artworkSize){  Bitmap bitmap=null;  String artworkPath=artworkEntry.getArtworkPath();  String artworkUrl=artworkEntry.getArtworkLocation();  if (!TextUtils.isEmpty(artworkPath)) {    try {      byte[] bitmapData=SuperUserTools.fileReadToByteArray(artworkPath);      bitmap=ImageTools.decodeByteArraySubsampled(bitmapData,artworkSize,artworkSize);    } catch (    Exception e) {      Logger.getInstance().logError("LoadArtwork",e.toString());    }  }  if (bitmap == null) {    if (!TextUtils.isEmpty(artworkUrl)) {      try {        URL url=new URL(artworkUrl);        bitmap=BitmapFactory.decodeStream(url.openStream());      } catch (      Exception e) {        Logger.getInstance().logError("LoadArtwork",e.toString());      }    }  }  return bitmap;}  }
class C{  public void runInIgfsThreadPool(Runnable r){  try {    igfsSvc.submit(r);  } catch (  RejectedExecutionException ignored) {    try {      r.run();    } catch (    Exception e) {      log.warning("Failed to execute IGFS runnable: " + r,e);    }  }}  }
class C{  public static double pdf(double x,double sigma){  if (x <= 0.) {    return 0.;  }  final double xs=x / sigma;  return xs / sigma * Math.exp(-.5 * xs * xs);}  }
class C{  @Override public int hashCode(){  return (summaryLabel.hashCode() + units.hashCode());}  }
class C{  private void addSpiDependency(GridTestNode node) throws Exception {  node.addAttribute(ATTR_SPI_CLASS,JobStealingCollisionSpi.class.getName());  node.setAttribute(U.spiAttribute(getSpi(),ATTR_SPI_CLASS),getSpi().getClass().getName());}  }
class C{  public static ResultSet query(Connection conn,String sql,int fetchSize) throws SQLException {  return query(conn,sql,fetchSize,Constant.SOCKET_TIMEOUT_INSECOND);}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public void testArriveAndDeregister3(){  Phaser parent=new Phaser();  Phaser child=new Phaser(parent);  assertState(child,0,0,0);  assertState(parent,0,0,0);  assertEquals(0,child.register());  assertState(child,0,1,1);  assertState(parent,0,1,1);  assertEquals(0,child.arriveAndDeregister());  assertTerminated(child,1);  assertTerminated(parent,1);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.classInfoIndex(cp.getUtf8Info(valueIndex));}  }
class C{  protected Object createJvmOSMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   return new JvmOSImpl(this,server); else   return new JvmOSImpl(this);}  }
class C{  private void groovySection(Reader reader,StringWriter sw) throws IOException {  sw.write("\"\"\");");  int c;  while ((c=reader.read()) != -1) {    if (c == '%') {      c=reader.read();      if (c != '>') {        sw.write('%');      } else {        break;      }    }    sw.write(c);  }  sw.write(";\nout.print(\"\"\"");}  }
class C{  protected BytesRef dedupAndEncode(IntsRef ordinals){  Arrays.sort(ordinals.ints,ordinals.offset,ordinals.length);  byte[] bytes=new byte[5 * ordinals.length];  int lastOrd=-1;  int upto=0;  for (int i=0; i < ordinals.length; i++) {    int ord=ordinals.ints[ordinals.offset + i];    if (ord > lastOrd) {      int delta;      if (lastOrd == -1) {        delta=ord;      } else {        delta=ord - lastOrd;      }      if ((delta & ~0x7F) == 0) {        bytes[upto]=(byte)delta;        upto++;      } else       if ((delta & ~0x3FFF) == 0) {        bytes[upto]=(byte)(0x80 | ((delta & 0x3F80) >> 7));        bytes[upto + 1]=(byte)(delta & 0x7F);        upto+=2;      } else       if ((delta & ~0x1FFFFF) == 0) {        bytes[upto]=(byte)(0x80 | ((delta & 0x1FC000) >> 14));        bytes[upto + 1]=(byte)(0x80 | ((delta & 0x3F80) >> 7));        bytes[upto + 2]=(byte)(delta & 0x7F);        upto+=3;      } else       if ((delta & ~0xFFFFFFF) == 0) {        bytes[upto]=(byte)(0x80 | ((delta & 0xFE00000) >> 21));        bytes[upto + 1]=(byte)(0x80 | ((delta & 0x1FC000) >> 14));        bytes[upto + 2]=(byte)(0x80 | ((delta & 0x3F80) >> 7));        bytes[upto + 3]=(byte)(delta & 0x7F);        upto+=4;      } else {        bytes[upto]=(byte)(0x80 | ((delta & 0xF0000000) >> 28));        bytes[upto + 1]=(byte)(0x80 | ((delta & 0xFE00000) >> 21));        bytes[upto + 2]=(byte)(0x80 | ((delta & 0x1FC000) >> 14));        bytes[upto + 3]=(byte)(0x80 | ((delta & 0x3F80) >> 7));        bytes[upto + 4]=(byte)(delta & 0x7F);        upto+=5;      }      lastOrd=ord;    }  }  return new BytesRef(bytes,0,upto);}  }
class C{  NodeRepresentation subNodeRep(SemanticNode sn,Vector<NodeRepresentation> vec,NodeRepresentation father,NodeTextRep setNodeText,Decomposition decomp){  NodeRepresentation result=new NodeRepresentation();  result.parentNode=father;  result.parentVector=vec;  result.semanticNode=sn;  result.isPrimed=this.isPrimed;  result.isSubexpressionName=this.isSubexpressionName;  result.isCreated=this.isCreated;  NodeTextRep nodeTextRep=setNodeText;  if (nodeTextRep == null) {    nodeTextRep=this.subNodeText(sn);  } else {    result.isSubexpressionName=true;  }  result.nodeText=nodeTextRep.nodeText;  result.mapping=nodeTextRep.mapping;switch (sn.getKind()) {case ASTConstants.OpApplKind:    result.nodeType=EXPR_NODE;  result.decomposition=decompose(result,decomp);if (result.decomposition == null) {  result.nodeSubtype=OTHER_TYPE;} else {  result.nodeSubtype=result.decomposition.type;}break;case ASTConstants.NewSymbKind:result.nodeType=NEW_NODE;NewSymbNode newNode=(NewSymbNode)sn;result.newId=newNode.getOpDeclNode().getName().toString();break;case ASTConstants.LeafProofKind:result.nodeType=PROOF_NODE;break;default :result.nodeType=OTHER_NODE;}return result;}  }
class C{  public AsyncIgnoreMessage(){  requestFileName="async.query";  responseFile="getstate.answer";  addRequestHeader(SoapUtils.X_IGNORE_ASYNC,"true");}  }
class C{  public void log(Level level,Supplier<String> msgSupplier){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msgSupplier.get());  doLog(lr);}  }
class C{  static WindowsFileAttributes readAttributes(long handle) throws WindowsException {  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);  try {    long address=buffer.address();    GetFileInformationByHandle(handle,address);    int reparseTag=0;    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);    if (isReparsePoint(fileAttrs)) {      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);      try {        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);        reparseTag=(int)unsafe.getLong(reparseBuffer.address());      }  finally {        reparseBuffer.release();      }    }    return fromFileInformation(address,reparseTag);  }  finally {    buffer.release();  }}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public void commit(){  this.sessionId=0;}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predLabel){  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example current=reader.next();    double[] currentX=new double[exampleSet.getAttributes().size()];    int x=0;    for (    Attribute attribute : exampleSet.getAttributes()) {      currentX[x++]=current.getValue(attribute);    }    double sum=bias + kernel.getSum(supportVectors,currentX);    if (getLabel().isNominal()) {      double probPos=1.0d / (1.0d + Math.exp(-sum));      int index=probPos > 0.5d ? getLabel().getMapping().getPositiveIndex() : getLabel().getMapping().getNegativeIndex();      current.setValue(predLabel,index);      current.setConfidence(predLabel.getMapping().getPositiveString(),probPos);      current.setConfidence(predLabel.getMapping().getNegativeString(),1.0d - probPos);    } else {      current.setValue(predLabel,sum);    }  }  return exampleSet;}  }
class C{  public BrowseDescription clone(){  BrowseDescription result=new BrowseDescription();  result.NodeId=NodeId;  result.BrowseDirection=BrowseDirection;  result.ReferenceTypeId=ReferenceTypeId;  result.IncludeSubtypes=IncludeSubtypes;  result.NodeClassMask=NodeClassMask;  result.ResultMask=ResultMask;  return result;}  }
class C{  @Override public void switchMemory(String database){  switchMemory(database,false);}  }
class C{  public FastIntBuffer append(FastIntBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  public void testBarChartDemo() throws IOException {  System.setProperty("java.awt.headless","true");  String imageFilename=getOutputDirectory() + "barchart.png";  Demo demo=new Demo();  demo.createBarChart(imageFilename);  File imagefile=new File(imageFilename);  assertTrue(imagefile.exists());  BufferedImage image=ImageIO.read(imagefile);  assertEquals(800,image.getWidth(null));  assertEquals(600,image.getHeight(null));}  }
class C{  void spawnDailyMonster(final Player player,final DeathmatchInfo dmInfo){  String dailyInfo=player.getQuest("daily",0);  if (dailyInfo != null) {    if (dailyInfo.startsWith("done")) {      return;    }    boolean questDone=new KilledForQuestCondition("daily",0).fire(player,null,null);    if (!questDone) {      final String[] dTokens=dailyInfo.split(",");      if (dTokens.length > 0) {        final String daily=dTokens[0];        for (        final Creature creature : sortedCreatures) {          if (creature.getName().equals(daily)) {            spawnNewCreature(creature,player,dmInfo);            break;          }        }      }    }  }}  }
class C{  public String toGenericString(){  throw new Error("TODO");}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  reach(env,vset);  checkLabel(env,ctx);  CheckContext destctx=(CheckContext)new CheckContext(ctx,this).getBreakContext(lbl);  if (destctx != null) {    if (destctx.frameNumber != ctx.frameNumber) {      env.error(where,"branch.to.uplevel",lbl);    }    destctx.vsBreak=destctx.vsBreak.join(vset);  } else {    if (lbl != null) {      env.error(where,"label.not.found",lbl);    } else {      env.error(where,"invalid.break");    }  }  CheckContext exitctx=ctx.getTryExitContext();  if (exitctx != null) {    exitctx.vsTryExit=exitctx.vsTryExit.join(vset);  }  return DEAD_END;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public EsriGraphicList(int initialCapacity){  super(initialCapacity);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.008 -0500",hash_original_method="B9994ACC80E0363C78DC4EB28757C058",hash_generated_method="D72AAED57CA4C191874CD040ABE06C73") public Reference<? extends T> remove() throws InterruptedException {  return remove(0L);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_details);}  }
class C{  private static PipelineOp addMockTermResolverOp(PipelineOp left,final Set<IVariable<IV>> vars,final boolean materializeInlineIvs,final Long cutoffLimit,final Properties queryHints,final AST2BOpContext ctx){  final int nvars=vars.size();  if (nvars == 0)   return left;  final long timestamp=ctx.getLexiconReadTimestamp();  final String ns=ctx.getLexiconNamespace();  return (PipelineOp)applyQueryHints(new MockTermResolverOp(leftOrEmpty(left),new NV(MockTermResolverOp.Annotations.VARS,vars.toArray(new IVariable[nvars])),new NV(MockTermResolverOp.Annotations.RELATION_NAME,new String[]{ns}),new NV(MockTermResolverOp.Annotations.TIMESTAMP,timestamp),new NV(PipelineOp.Annotations.SHARED_STATE,!ctx.isCluster()),new NV(BOp.Annotations.BOP_ID,ctx.nextId())),queryHints,ctx);}  }
class C{  public String validate(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      if (count == 1) {        return matcher.group(1);      }      StringBuffer buffer=new StringBuffer();      for (int j=0; j < count; j++) {        String component=matcher.group(j + 1);        if (component != null) {          buffer.append(component);        }      }      return buffer.toString();    }  }  return null;}  }
class C{  public LookupPaintScale(){  this(0.0,1.0,Color.lightGray);}  }
class C{  public static boolean switchTo(String n){  DataStyle p=getStyle(n);  if (p != null) {    currentStyle=p;    Log.i("Style","Switching to " + n);    return true;  }  return false;}  }
class C{  public boolean intersectsRange(DateRange range){  if (isPoint() && range.isPoint() && this.start.equals(range.start)) {    return true;  }  return !before(range) && !after(range);}  }
class C{  static double evaluate(Problem problem,NondominatedPopulation approximationSet){  boolean isInverted=true;  boolean isCustomHypervolume=(Settings.getHypervolume() != null) && (problem.getNumberOfObjectives() > 2);  if (isCustomHypervolume) {    isInverted=Settings.isHypervolumeInverted();  }  List<Solution> solutions=new ArrayList<Solution>();  for (  Solution solution : approximationSet) {    for (int i=0; i < solution.getNumberOfObjectives(); i++) {      if (solution.getObjective(i) > 1.0) {        continue;      }    }    Solution clone=solution.copy();    if (isInverted) {      invert(problem,clone);    }    solutions.add(clone);  }  if (isCustomHypervolume) {    return invokeNativeHypervolume(problem,solutions,isInverted);  } else {    return calculateHypervolume(solutions,solutions.size(),problem.getNumberOfObjectives());  }}  }
class C{  public final void multScalar(double s){  for (int i=0; i < NDIM; i++) {    data[i]*=s;  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case someRegion_A:    return stateVector[0] == State.someRegion_A;case someRegion_B:  return stateVector[0] == State.someRegion_B;case main_region_A:return stateVector[1] == State.main_region_A;case main_region_B:return stateVector[1] == State.main_region_B;case main_region_C:return stateVector[1] == State.main_region_C;case main_region_D:return stateVector[1] == State.main_region_D;case main_region_E:return stateVector[1] == State.main_region_E;default :return false;}}  }
class C{  @Override public final boolean equals(T o1,T o2){  return o1 != null ? o1.equals(o2) : o2 == null;}  }
class C{  private void findExactTypes(String name,ISearchRequestor storage,int type){  SearchableEnvironmentRequestor requestor=new SearchableEnvironmentRequestor(storage,this.unitToSkip,this.project,this.nameLookup);  this.nameLookup.seekTypes(name,null,false,type,requestor);}  }
class C{  public boolean isEmpty(){  return false;}  }
class C{  public static CtMethod abstractMethod(CtClass returnType,String mname,CtClass[] parameters,CtClass[] exceptions,CtClass declaring) throws NotFoundException {  CtMethod cm=new CtMethod(returnType,mname,parameters,declaring);  cm.setExceptionTypes(exceptions);  return cm;}  }
class C{  public DoubleMatrix3D assign(double[][][] values){  if (this.isNoView) {    if (values.length != slices)     throw new IllegalArgumentException("Must have same number of slices: slices=" + values.length + "slices()="+ slices());    int i=slices * rows * columns - columns;    for (int slice=slices; --slice >= 0; ) {      double[][] currentSlice=values[slice];      if (currentSlice.length != rows)       throw new IllegalArgumentException("Must have same number of rows in every slice: rows=" + currentSlice.length + "rows()="+ rows());      for (int row=rows; --row >= 0; ) {        double[] currentRow=currentSlice[row];        if (currentRow.length != columns)         throw new IllegalArgumentException("Must have same number of columns in every row: columns=" + currentRow.length + "columns()="+ columns());        System.arraycopy(currentRow,0,this.elements,i,columns);        i-=columns;      }    }  } else {    super.assign(values);  }  return this;}  }
class C{  public boolean add(final byte[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public static double[] minus(double[] v1,double v){  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v1[i] - v;  return array;}  }
class C{  public static AbLoadDialogFragment newInstance(int style,int theme){  AbLoadDialogFragment f=new AbLoadDialogFragment();  Bundle args=new Bundle();  args.putInt("style",style);  args.putInt("theme",theme);  f.setArguments(args);  return f;}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public void store(int value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public boolean isComplete(){  return completed;}  }
class C{  public static void cancelProverJobs(boolean wait){  ProverJobMatcher jobMatcher=new ProverJob.ProverJobMatcher();  Job.getJobManager().cancel(jobMatcher);  if (wait) {    while (Job.getJobManager().find(jobMatcher).length > 0) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {        ProverUIActivator.getDefault().logError("Error sleeping thread.",e);      }    }  }}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  public static void writeLine(SpannableString spannableString){  buffer.append(spannableString).append(END_LINE);  scheduleBufferPrint();}  }
class C{  public AuthScope(final String host,final int port,final String scheme){  this.host=(host == null) ? ANY_HOST : host.toLowerCase();  this.port=(port < 0) ? ANY_PORT : port;  this.scheme=(scheme == null) ? ANY_SCHEME : scheme.toUpperCase();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void fireControlerBeforeMobsimEvent(final int iteration){  BeforeMobsimEvent event=new BeforeMobsimEvent(this.controler,iteration);  BeforeMobsimListener[] listener=this.coreListenerList.getListeners(BeforeMobsimListener.class);  for (  BeforeMobsimListener aListener : listener) {    log.info("calling notifyBeforeMobsim on " + aListener.getClass().getCanonicalName());    aListener.notifyBeforeMobsim(event);  }  listener=this.listenerList.getListeners(BeforeMobsimListener.class);  for (  BeforeMobsimListener aListener : listener) {    log.info("calling notifyBeforeMobsim on " + aListener.getClass().getCanonicalName());    aListener.notifyBeforeMobsim(event);  }  log.info("[it." + iteration + "] all ControlerBeforeMobsimListeners called.");}  }
class C{  public static boolean clearImagesCache(){  assert isInitialized || SD_CACHE_PATH != null : SD_CARD_HELPER_INIT_ERR;  final File cacheDir=getCacheDir();  if (!cacheDir.exists())   return false;  FileUtils.deleteFiles(cacheDir);  return true;}  }
class C{  public DD floor(){  if (isNaN())   return NaN;  double fhi=Math.floor(hi);  double flo=0.0;  if (fhi == hi) {    flo=Math.floor(lo);  }  return new DD(fhi,flo);}  }
class C{  public UDViewGroup removeView(UDView subView){  final ViewGroup viewGroup=getContainer();  if (viewGroup != null && subView != null && subView.getView() != null) {    final View view=subView.getView();    LuaViewUtil.removeView(viewGroup,view);  }  return this;}  }
class C{  private AttrPolling(final String str) throws BOSHException {  super(str);  checkMinValue(0);}  }
class C{  public ReilFunction translate(final ITranslationEnvironment environment,final IBlockContainer<InstructionType> function,final List<ITranslationExtension<InstructionType>> extensions) throws InternalTranslationException {  final LinkedHashMap<ICodeContainer<InstructionType>,List<ReilInstruction>> instructionMap=new LinkedHashMap<ICodeContainer<InstructionType>,List<ReilInstruction>>();  final Map<IInstruction,ReilInstruction> firstMap=new HashMap<IInstruction,ReilInstruction>();  final Map<IInstruction,ReilInstruction> lastMap=new HashMap<IInstruction,ReilInstruction>();  final List<List<ReilInstruction>> delayedTrueBranches=new ArrayList<List<ReilInstruction>>();  for (  final ICodeContainer<InstructionType> block : function.getBasicBlocks()) {    final Iterable<InstructionType> blockInstructions=block.getInstructions();    final IInstruction lastBlockInstruction=Iterables.getLast(blockInstructions);    final boolean endsWithInlining=isInlineSource(block);    final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();    instructionMap.put(block,instructions);    for (    final InstructionType instruction : blockInstructions) {      environment.nextInstruction();      final ITranslator<InstructionType> translator=m_translators.get(instruction.getArchitecture().toUpperCase());      if (translator == null) {        throw new InternalTranslationException("Could not translate instruction from unknown architecture " + instruction.getArchitecture());      }      try {        final List<ReilInstruction> result=translator.translate(environment,instruction,extensions);        instructions.addAll(result);        if (endsWithInlining && (instruction == lastBlockInstruction)) {          final ReilInstruction lastInstruction=instructions.get(instructions.size() - 1);          if (lastInstruction.getMnemonic().equals(ReilHelpers.OPCODE_JCC) && lastInstruction.getMetaData().containsKey("isCall")) {            instructions.remove(instructions.size() - 1);            result.remove(result.size() - 1);          }        }        firstMap.put(instruction,getFirstInstruction(result));        lastMap.put(instruction,getLastInstruction(result));      } catch (      final InternalTranslationException exception) {        exception.setInstruction(instruction);        throw exception;      }    }    final IInstruction secondLastInstruction=Iterables.size(block.getInstructions()) > 2 ? Iterables.get(block.getInstructions(),Iterables.size(block.getInstructions()) - 2,null) : null;    if (secondLastInstruction != null) {      final List<ReilInstruction> secondLastReil=getReilInstructions(secondLastInstruction,instructions);      if (ReilHelpers.isDelayedBranch(secondLastReil.get(secondLastReil.size() - 1))) {        final IInstruction lastInstruction=getLastInstruction(block);        final List<ReilInstruction> lastReil=getReilInstructions(lastInstruction,instructions);        if (secondLastReil.get(secondLastReil.size() - 1).getMnemonic().equals(ReilHelpers.OPCODE_JCC)) {          instructions.removeAll(lastReil);          instructions.addAll(instructions.size() - 1,lastReil);        }      } else       if (ReilHelpers.isDelayedTrueBranch(secondLastReil.get(secondLastReil.size() - 1))) {        final IInstruction lastInstruction=getLastInstruction(block);        final List<ReilInstruction> lastReil=getReilInstructions(lastInstruction,instructions);        delayedTrueBranches.add(lastReil);      }    }  }  final Collection<IAddress> nativeJumpTargets=getBlockAddresses(function);  final Pair<List<ReilBlock>,List<ReilEdge>> pair=ReilGraphGenerator.createGraphElements(instructionMap.values(),nativeJumpTargets);  final List<ReilBlock> nodes=pair.first();  final List<ReilEdge> edges=pair.second();  insertNativeEdges(function.getBasicBlockEdges(),nodes,edges,firstMap,lastMap);  handleDelayedTrueBranches(nodes,edges,delayedTrueBranches);  return new ReilFunction("REIL - " + function.getName(),new ReilGraph(nodes,edges));}  }
class C{  void pan(final Range temp,double t1,double t2){  if (isLogScaleEnabled()) {    final double m=Math.log10(t2) - Math.log10(t1);    t1=Math.pow(10,Math.log10(temp.getLower()) - m);    t2=Math.pow(10,Math.log10(temp.getUpper()) - m);  } else {    final double m=t2 - t1;    t1=temp.getLower() - m;    t2=temp.getUpper() - m;  }  setRange(t1,t2);}  }
class C{  void doStop(){  if (log.isDebugEnabled()) {    log.debug("Block " + block.getSystemName() + " speed being set to stop");  }  setSpeed(0.0f,false,false,false);}  }
class C{  public static boolean isArrayUnsupported(String str){  if (str.contains("[")) {    if (str.split("\\[").length > 3) {      return true;    }  }  return false;}  }
class C{  public void windowActivated(WindowEvent e){}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  return map;}  }
class C{  public void startInjectorIfNeeded(String inputFile){  ExamplePubsubTopicOptions pubsubTopicOptions=options.as(ExamplePubsubTopicOptions.class);  if (pubsubTopicOptions.isStreaming() && !Strings.isNullOrEmpty(inputFile) && !Strings.isNullOrEmpty(pubsubTopicOptions.getPubsubTopic())) {    runInjectorPipeline(inputFile,pubsubTopicOptions.getPubsubTopic());  }}  }
class C{  private void initHealthChecks(Injector injector){  LOGGER.info("Initializing HealthChecks");  healthCheckRegistry=new HealthCheckRegistry();  healthCheckRegistry.register(MesosMasterHealthCheck.NAME,injector.getInstance(MesosMasterHealthCheck.class));  healthCheckRegistry.register(ZookeeperHealthCheck.NAME,injector.getInstance(ZookeeperHealthCheck.class));  healthCheckRegistry.register(MesosDriverHealthCheck.NAME,injector.getInstance(MesosDriverHealthCheck.class));}  }
class C{  public boolean hasDateComponent(){  return hasYear() || hasMonth() || hasDate();}  }
class C{  public void copy(Hashtable props){  init(props);}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public static String toHex(String arg){  return String.format("%04X",new BigInteger(1,arg.getBytes()));}  }
class C{  public boolean isDetalleDisponible(DetallePrestamoVO detallePrestamo,Date fechaInicial,Date fechaFinal,boolean isReserva){  int disponible=this.isDetalleDisponibleAllConditions(detallePrestamo,fechaInicial,fechaFinal,isReserva);  return (disponible == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE || disponible == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE_PARCIAL);}  }
class C{  @CheckReturnValue public TheoryBuilder4<A,B,C,D> assuming(Predicate4<A,B,C,D> newAssumption){  return new TheoryBuilder4<A,B,C,D>(this.state,this.as,this.bs,this.cs,this.ds,this.assumptions.and(newAssumption));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.384 -0500",hash_original_method="F0ABBF5B9651EE5121610CD48916D5A8",hash_generated_method="085EFC9B30C254937B2F82B25DA23398") public static List<Object> convertFromPem(byte[] bytes) throws IOException {  ByteArrayInputStream bai=new ByteArrayInputStream(bytes);  Reader reader=new InputStreamReader(bai,Charsets.US_ASCII);  PEMReader pr=new PEMReader(reader);  List<Object> result=new ArrayList<Object>();  Object o;  while ((o=pr.readObject()) != null) {    result.add(o);  }  pr.close();  return result;}  }
class C{  public PaymentInfoMagcardRefund(String sHolderName,String sCardNumber,String sExpirationDate,String track1,String track2,String track3,String sTransactionID,double dTotal){  super(sHolderName,sCardNumber,sExpirationDate,track1,track2,track3,sTransactionID,dTotal);}  }
class C{  protected void processUserNotLoggedIn(HttpServletRequest servletRequest){  LOGGER.debug("No user is currently logged in.");  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();  if ((authentication != null) && (!authenticationTrustResolver.isAnonymous(authentication))) {    LOGGER.debug("A previous user with userIdentity " + getExistingUserId() + " was logged in so invalidating the user.");    invalidateUser(servletRequest,true);  }}  }
class C{  public ClassPath(@Nonnull Iterable<DexFile> classPath,int api){  this(Lists.newArrayList(classPath),api == 17,new Opcodes.Version(api));}  }
class C{  public static void clearToolbar(ToolBar toolbar){  if (toolbar != null) {    ToolItem[] toolItems=toolbar.getItems();    for (    ToolItem toolItem : toolItems) {      toolItem.dispose();    }  }}  }
class C{  public Credentials toCredentials(Element el,String attributeUser,String attributePassword,Credentials defaultCredentials){  String user=el.getAttribute(attributeUser);  String pass=el.getAttribute(attributePassword);  if (user == null)   return defaultCredentials;  if (pass == null)   pass="";  return CredentialsImpl.toCredentials(user,pass);}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  public double distance(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  public static MosaicSupplyChangeTransaction createMosaicSupplyChangeTransaction(final TimeInstant timeStamp,final Account signer){  return new MosaicSupplyChangeTransaction(timeStamp,signer,Utils.createMosaicDefinition(signer).getId(),MosaicSupplyType.Create,Supply.fromValue(123));}  }
class C{  public DeltaTetradTest(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  if (!dataSet.isContinuous()) {    throw new IllegalArgumentException();  }  this.cov=new CovarianceMatrix(dataSet);  List<DataSet> data1=new ArrayList<>();  data1.add(dataSet);  List<DataSet> data2=DataUtils.center(data1);  this.dataSet=data2.get(0);  this.data=this.dataSet.getDoubleData().transpose().toArray();  this.N=dataSet.getNumRows();  this.variables=dataSet.getVariables();  this.variablesHash=new HashMap<>();  for (int i=0; i < variables.size(); i++) {    variablesHash.put(variables.get(i),i);  }}  }
class C{  public void vibrate(int duration){  impl.vibrate(duration);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  final String TAB=" ";  return "Runner ( " + "preElements = " + this.preElements + TAB+ "testElements = "+ this.testElements+ TAB+ "postElements = "+ this.postElements+ TAB+ " )";}  }
class C{  private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  protected void diagnoseNumPaths(Vector paths,int numPathsEliminated,int numUniquePathsEliminated){  if (numPathsEliminated > 0) {    if (paths == m_paths) {      System.err.println("Eliminated " + numPathsEliminated + " total paths!");      System.err.println("Consolodated " + numUniquePathsEliminated + " redundent paths!");    } else {      System.err.println("Eliminated " + numPathsEliminated + " total global paths!");      System.err.println("Consolodated " + numUniquePathsEliminated + " redundent global paths!");    }  }}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyProvider02(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l]);          fail(algName[i][0] + ", " + algName[i][1]);        } catch (        InvalidKeyException e) {        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public DSTZone buildTailZone(String id){  if (iRules.size() == 2) {    Rule startRule=iRules.get(0);    Rule endRule=iRules.get(1);    if (startRule.getToYear() == Integer.MAX_VALUE && endRule.getToYear() == Integer.MAX_VALUE) {      return new DSTZone(id,iStandardOffset,startRule.iRecurrence,endRule.iRecurrence);    }  }  return null;}  }
class C{  @Override public boolean previous() throws SQLException {  try {    debugCodeCall("previous");    checkClosed();    return relative(-1);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public WrapLayout(int align,int hgap,int vgap){  super(align,hgap,vgap);}  }
class C{  public static boolean isHpUx(){  return osName.indexOf("HP-UX") > -1;}  }
class C{  public void preApply(PMatrix2D left){  preApply(left.m00,left.m01,left.m02,left.m10,left.m11,left.m12);}  }
class C{  private boolean notifyIfError(Response response,Callback callback){  if (response.getError() != null) {    FacebookRequestError error=response.getError();    callback.onError(new SocialError(error.getException()));    return true;  }  return false;}  }
class C{  public boolean isGradientEnabled(){  return mGradientEnabled;}  }
class C{  private RenewingType createRenewingElement(ObjectFactory wstFactory){  RenewingType renewingType=wstFactory.createRenewingType();  renewingType.setAllow(spec.isRenewable());  renewingType.setOK(false);  return renewingType;}  }
class C{  protected void onQueryCache(Query query,long ramBytesUsed){  assert lock.isHeldByCurrentThread();  this.ramBytesUsed+=ramBytesUsed;}  }
class C{  public void storeCurrentThreads(){  threadStopper.storeCurrentThreads();}  }
class C{  public void undeploy(String path) throws TomcatManagerException, IOException {  undeploy(path,null);}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case StextPackage.TIME_EVENT_TYPE:    return createTimeEventTypeFromString(eDataType,initialValue);case StextPackage.TIME_UNIT:  return createTimeUnitFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return conn == null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public StyledScrollPaneUI(Style style){  this.style=style;}  }
class C{  @Override public void updateEntity(){  if (!addedToEnet)   onLoaded();}  }
class C{  public boolean isParentColumn(){  return m_vo.IsParent;}  }
class C{  public ThumbnailProduct(fr.gael.dhus.database.object.Product product){  super(product);}  }
class C{  public boolean checkRootBySuperUserApk(){  File suApk=new File(SU_APK);  if (suApk.exists()) {    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"Super apk is found in the device");    }    return true;  }  return false;}  }
class C{  private ListenableFuture<Void> indexTableDtos(QualifiedName databaseName,List<Optional<TableDto>> dtos){  return esService.submit(null);}  }
class C{  protected double[] moveCentroid(int centroidIndex,Instances members,boolean updateClusterInfo,boolean addToCentroidInstances){  double[] vals=new double[members.numAttributes()];  Instances sortedMembers=null;  int middle=0;  boolean dataIsEven=false;  if (m_DistanceFunction instanceof ManhattanDistance) {    middle=(members.numInstances() - 1) / 2;    dataIsEven=((members.numInstances() % 2) == 0);    if (m_PreserveOrder) {      sortedMembers=members;    } else {      sortedMembers=new Instances(members);    }  }  for (int j=0; j < members.numAttributes(); j++) {    if (m_DistanceFunction instanceof EuclideanDistance || members.attribute(j).isNominal()) {      vals[j]=members.meanOrMode(j);    } else     if (m_DistanceFunction instanceof ManhattanDistance) {      if (members.numInstances() == 1) {        vals[j]=members.instance(0).value(j);      } else {        vals[j]=sortedMembers.kthSmallestValue(j,middle + 1);        if (dataIsEven) {          vals[j]=(vals[j] + sortedMembers.kthSmallestValue(j,middle + 2)) / 2;        }      }    }    if (updateClusterInfo) {      m_ClusterMissingCounts[centroidIndex][j]=members.attributeStats(j).missingCount;      m_ClusterNominalCounts[centroidIndex][j]=members.attributeStats(j).nominalCounts;      if (members.attribute(j).isNominal()) {        if (m_ClusterMissingCounts[centroidIndex][j] > m_ClusterNominalCounts[centroidIndex][j][Utils.maxIndex(m_ClusterNominalCounts[centroidIndex][j])]) {          vals[j]=Utils.missingValue();        }      } else {        if (m_ClusterMissingCounts[centroidIndex][j] == members.numInstances()) {          vals[j]=Utils.missingValue();        }      }    }  }  if (addToCentroidInstances) {    m_ClusterCentroids.add(new DenseInstance(1.0,vals));  }  return vals;}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public static DCCppMessage makeWriteDCCPacketMainMsg(int register,int num_bytes,byte[] bytes){  if (register < 0 || register > DCCppConstants.MAX_MAIN_REGISTERS)   return (null);  if (num_bytes < 2 || num_bytes > 5)   return (null);  DCCppMessage m=new DCCppMessage(DCCppConstants.WRITE_DCC_PACKET_MAIN);  for (int k=0; k < num_bytes; k++) {    m.myMessage.append(" " + bytes[k]);  }  m.myRegex=DCCppConstants.WRITE_DCC_PACKET_MAIN_REGEX;  return (m);}  }
class C{  public LVQLLC(DistanceMetric dm,int iterations,Classifier localClasifier,double learningRate,int representativesPerClass,LVQVersion lvqVersion,DecayRate learningDecay){  super(dm,iterations,learningRate,representativesPerClass,lvqVersion,learningDecay);  setLocalClassifier(localClasifier);}  }
class C{  protected void startHtml(final ITestContext ctx,final PrintWriter out){  try {    VelocityEngine ve=new VelocityEngine();    ve.setProperty("resource.loader","class");    ve.setProperty("class.resource.loader.class","org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");    ve.init();    Template t=ve.getTemplate("/templates/report.part.header.html");    VelocityContext context=new VelocityContext();    String userName=System.getProperty("user.name");    context.put("userName",userName);    context.put("currentDate",new Date().toString());    String mode=SeleniumTestsContextManager.getGlobalContext().getWebRunMode();    String hubUrl=SeleniumTestsContextManager.getGlobalContext().getWebDriverGrid();    context.put("gridHub","<a href='" + hubUrl + "' target=hub>"+ hubUrl+ "</a>");    context.put("mode",mode);    StringBuilder sbGroups=new StringBuilder();    sbGroups.append("envt,test");    List<SeleniumTestsPageListener> pageListenerList=PluginsHelper.getInstance().getPageListeners();    if (pageListenerList != null && !pageListenerList.isEmpty()) {      for (      SeleniumTestsPageListener abstractPageListener : pageListenerList) {        sbGroups.append(",").append(abstractPageListener.getClass().getSimpleName());      }    }    context.put("groups",sbGroups.toString());    StringWriter writer=new StringWriter();    t.merge(context,writer);    out.write(writer.toString());  } catch (  Exception e) {    logger.error(e.getMessage());  }}  }
class C{  public void reportNewTestUseful(){  nrOfNewTestFound++;}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public TimeDuration(final long milliseconds1,final long milliseconds2){  this(Math.abs(milliseconds1 - milliseconds2));}  }
class C{  public AdaptiveJobCountLoadProbe(boolean useAvg){  this.useAvg=useAvg;}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return false;}  }
class C{  public String gracePeriodTipText(){  return "Number of instances (or total weight of instances) a leaf " + "should observe between split attempts.";}  }
class C{  public void merge(final MatchedEventMap other){  if (!(other instanceof MatchedEventMapImpl)) {    throw new UnsupportedOperationException("Merge requires same types");  }  MatchedEventMapImpl otherImpl=(MatchedEventMapImpl)other;  for (int i=0; i < matches.length; i++) {    if (otherImpl.matches[i] == null) {      continue;    }    matches[i]=otherImpl.matches[i];  }}  }
class C{  public static ZTauElement round(SimpleBigDecimal lambda0,SimpleBigDecimal lambda1,byte mu){  int scale=lambda0.getScale();  if (lambda1.getScale() != scale) {    throw new IllegalArgumentException("lambda0 and lambda1 do not " + "have same scale");  }  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger f0=lambda0.round();  BigInteger f1=lambda1.round();  SimpleBigDecimal eta0=lambda0.subtract(f0);  SimpleBigDecimal eta1=lambda1.subtract(f1);  SimpleBigDecimal eta=eta0.add(eta0);  if (mu == 1) {    eta=eta.add(eta1);  } else {    eta=eta.subtract(eta1);  }  SimpleBigDecimal threeEta1=eta1.add(eta1).add(eta1);  SimpleBigDecimal fourEta1=threeEta1.add(eta1);  SimpleBigDecimal check1;  SimpleBigDecimal check2;  if (mu == 1) {    check1=eta0.subtract(threeEta1);    check2=eta0.add(fourEta1);  } else {    check1=eta0.add(threeEta1);    check2=eta0.subtract(fourEta1);  }  byte h0=0;  byte h1=0;  if (eta.compareTo(ECConstants.ONE) >= 0) {    if (check1.compareTo(MINUS_ONE) < 0) {      h1=mu;    } else {      h0=1;    }  } else {    if (check2.compareTo(ECConstants.TWO) >= 0) {      h1=mu;    }  }  if (eta.compareTo(MINUS_ONE) < 0) {    if (check1.compareTo(ECConstants.ONE) >= 0) {      h1=(byte)-mu;    } else {      h0=-1;    }  } else {    if (check2.compareTo(MINUS_TWO) < 0) {      h1=(byte)-mu;    }  }  BigInteger q0=f0.add(BigInteger.valueOf(h0));  BigInteger q1=f1.add(BigInteger.valueOf(h1));  return new ZTauElement(q0,q1);}  }
class C{  public String toString(){  return "java.util.ServiceLoader[" + service.getName() + "]";}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static void main(String[] argv){  XmlSerTestPerson xmlSerTestPerson=new XmlSerTestPerson();  System.out.println("\ntestSimpleSerialize.xml:\n");  System.out.println(XMLSerializationManager.getSerializer("xml").getXMLStringRepresentation(xmlSerTestPerson));  System.out.println("\ntestSpringSerialize.xml:\n");  System.out.println(XMLSerializationManager.getSerializer("spring").getXMLStringRepresentation(xmlSerTestPerson));}  }
class C{  @SuppressWarnings("unused") public static void blackhole(int value){}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.PARAM__MULTIPLICITY:    return isMultiplicity();case FunctionblockPackage.PARAM__NAME:  return getName();case FunctionblockPackage.PARAM__DESCRIPTION:return getDescription();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!isSeriesVisible(row)) {    return;  }  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  double value=dataValue.doubleValue();  double total=0.0;  if (this.renderAsPercentages) {    total=DataUtilities.calculateColumnTotal(dataset,column,state.getVisibleSeriesArray());    value=value / total;  }  PlotOrientation orientation=plot.getOrientation();  double barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  double positiveBase=getBase();  double negativeBase=positiveBase;  for (int i=0; i < row; i++) {    Number v=dataset.getValue(i,column);    if (v != null && isSeriesVisible(i)) {      double d=v.doubleValue();      if (this.renderAsPercentages) {        d=d / total;      }      if (d > 0) {        positiveBase=positiveBase + d;      } else {        negativeBase=negativeBase + d;      }    }  }  double translatedBase;  double translatedValue;  boolean positive=(value > 0.0);  boolean inverted=rangeAxis.isInverted();  RectangleEdge barBase;  if (orientation == PlotOrientation.HORIZONTAL) {    if (positive && inverted || !positive && !inverted) {      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  RectangleEdge location=plot.getRangeAxisEdge();  if (positive) {    translatedBase=rangeAxis.valueToJava2D(positiveBase,dataArea,location);    translatedValue=rangeAxis.valueToJava2D(positiveBase + value,dataArea,location);  } else {    translatedBase=rangeAxis.valueToJava2D(negativeBase,dataArea,location);    translatedValue=rangeAxis.valueToJava2D(negativeBase + value,dataArea,location);  }  double barL0=Math.min(translatedBase,translatedValue);  double barLength=Math.max(Math.abs(translatedValue - translatedBase),getMinimumBarLength());  Rectangle2D bar;  if (orientation == PlotOrientation.HORIZONTAL) {    bar=new Rectangle2D.Double(barL0,barW0,barLength,state.getBarWidth());  } else {    bar=new Rectangle2D.Double(barW0,barL0,state.getBarWidth(),barLength);  }  if (pass == 0) {    if (getShadowsVisible()) {      boolean pegToBase=(positive && (positiveBase == getBase())) || (!positive && (negativeBase == getBase()));      getBarPainter().paintBarShadow(g2,this,row,column,bar,barBase,pegToBase);    }  } else   if (pass == 1) {    getBarPainter().paintBar(g2,this,row,column,bar,barBase);    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,row,column,bar);    }  } else   if (pass == 2) {    CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);    if (generator != null && isItemLabelVisible(row,column)) {      drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", transition: ");  result.append(transition);  result.append(')');  return result.toString();}  }
class C{  public static S1Interval fromPointPair(double p1,double p2){  if (p1 == -S2.M_PI) {    p1=S2.M_PI;  }  if (p2 == -S2.M_PI) {    p2=S2.M_PI;  }  if (positiveDistance(p1,p2) <= S2.M_PI) {    return new S1Interval(p1,p2,true);  } else {    return new S1Interval(p2,p1,true);  }}  }
class C{  public RobotThread(final RobotDebugTarget target){  super(target);}  }
class C{  public static InsnList debugMarker(MarkerType markerType,String text){  Validate.notNull(markerType);  Validate.notNull(text);  InsnList ret=new InsnList();switch (markerType) {case NONE:    break;case CONSTANT:  ret.add(new LdcInsnNode(text));ret.add(new InsnNode(Opcodes.POP));break;case STDOUT:ret.add(new FieldInsnNode(Opcodes.GETSTATIC,"java/lang/System","out","Ljava/io/PrintStream;"));ret.add(new LdcInsnNode(text));ret.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/io/PrintStream","println","(Ljava/lang/String;)V",false));break;default :throw new IllegalStateException();}return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public HashCodeBuilder append(double value){  return append(Double.doubleToLongBits(value));}  }
class C{  public static String join(String join,String... l){  return join(join,0,l.length,l);}  }
class C{  public NaturalLanguageClassifier(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void updateLists(Collection<E> pool,Collection<E> subset){  this.pool=pool;  this.subset=subset;  this.poolList.setListData(this.pool.toArray());  this.subsetList.setListData(this.subset.toArray());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigma=0;  double recipRoot2PiTimesSigma;  double twoSigmaSqr;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma < 0.5) {    sigma=0.5;  } else   if (sigma > 20) {    sigma=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma=1 / (Math.sqrt(2 * Math.PI) * sigma);    twoSigmaSqr=2 * sigma * sigma;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma * Math.exp(-1 * (i * i) / twoSigmaSqr);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    int cellsOnEitherSide=(int)Math.floor((double)filterSize / 2);    double term1=-1 / (Math.PI * sigma * sigma* sigma* sigma);    double term2=0;    double term3=0;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - cellsOnEitherSide;        y=row - cellsOnEitherSide;        term2=1 - ((x * x + y * y) / twoSigmaSqr);        term3=Math.exp(-(x * x + y * y) / twoSigmaSqr);        weight=term1 * term2 * term3;        weights[a]=weight;        dX[a]=x;        dY[a]=y;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void warmup(){  Polygon poly=PolygonGenerator.RandomCircleSweep2(50,50000);  TriangulationProcess process=new TriangulationProcess();  process.triangulate(poly);}  }
class C{  @Path("/prepare-vdc") @POST @CheckPermission(roles={Role.SECURITY_ADMIN},blockProxies=true) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response prepareLocalVdc(){  try {    _permissionsHelper.removeRootRoleAssignmentOnTenantAndProject();  } catch (  DatabaseException dbe) {    throw InternalServerErrorException.internalServerErrors.genericApisvcError("Fail to remove root's roles and project ownerships.",dbe);  }  return Response.ok().build();}  }
class C{  private void loadClassBytes(JarInputStream jis,String jarName) throws IOException {  BufferedInputStream jarBuf=new BufferedInputStream(jis);  ByteArrayOutputStream jarOut=new ByteArrayOutputStream();  int b;  while ((b=jarBuf.read()) != -1)   jarOut.write(b);  String urlName=jarName.substring(0,jarName.length() - 6);  String name=urlName.replace('/','.');  clsArrs.put(name,jarOut.toByteArray());}  }
class C{  public void add(String string,Image image,int index){  checkWidget();  if (string == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  TableItem newItem=new TableItem(this.table,SWT.NONE,index);  if (image != null)   newItem.setImage(image);}  }
class C{  public void writeSoundStreamHead(int tag,int playbackFrequency,boolean playback16bits,boolean playbackStereo,int streamFormat,int streamFrequency,boolean stream16bits,boolean streamStereo,int averageSampleCount) throws IOException {  startTag(tag,false);  out.writeUBits(4,0);  out.writeUBits(2,playbackFrequency);  out.writeUBits(1,playback16bits ? 1 : 0);  out.writeUBits(1,playbackStereo ? 1 : 0);  out.writeUBits(4,streamFormat);  out.writeUBits(2,streamFrequency);  out.writeUBits(1,stream16bits ? 1 : 0);  out.writeUBits(1,streamStereo ? 1 : 0);  out.writeUI16(averageSampleCount);  if (streamFormat == SWFConstants.SOUND_FORMAT_MP3) {    out.writeUI16(0);  }  completeTag();}  }
class C{  public UserActiveException(){  super();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private boolean certifySolution(Graph G){  for (int v=0; v < V; v++) {    if (mate(v) == -1)     continue;    if (mate(mate(v)) != v)     return false;  }  int matchedVertices=0;  for (int v=0; v < V; v++) {    if (mate(v) != -1)     matchedVertices++;  }  if (2 * size() != matchedVertices)   return false;  int sizeOfMinVertexCover=0;  for (int v=0; v < V; v++)   if (inMinVertexCover(v))   sizeOfMinVertexCover++;  if (size() != sizeOfMinVertexCover)   return false;  boolean[] isMatched=new boolean[V];  for (int v=0; v < V; v++) {    int w=mate[v];    if (w == -1)     continue;    if (v == w)     return false;    if (v >= w)     continue;    if (isMatched[v] || isMatched[w])     return false;    isMatched[v]=true;    isMatched[w]=true;  }  for (int v=0; v < V; v++) {    if (mate(v) == -1)     continue;    boolean isEdge=false;    for (    int w : G.adj(v)) {      if (mate(v) == w)       isEdge=true;    }    if (!isEdge)     return false;  }  for (int v=0; v < V; v++)   for (  int w : G.adj(v))   if (!inMinVertexCover(v) && !inMinVertexCover(w))   return false;  return true;}  }
class C{  private void handleError(@NotNull Throwable exception,@NotNull String commandName){  int errorCode=getErrorCode(exception);  if (errorCode == ErrorCodes.NO_COMMITTER_NAME_OR_EMAIL_DEFINED) {    dialogFactory.createMessageDialog(constant.pullTitle(),constant.committerIdentityInfoEmpty(),null).show();    return;  } else   if (errorCode == ErrorCodes.UNABLE_GET_PRIVATE_SSH_KEY) {    dialogFactory.createMessageDialog(constant.pullTitle(),constant.messagesUnableGetSshKey(),null).show();    return;  }  String errorMessage=exception.getMessage();  if (errorMessage == null) {switch (commandName) {case REMOTE_REPO_COMMAND_NAME:      errorMessage=constant.remoteListFailed();    break;case BRANCH_LIST_COMMAND_NAME:  errorMessage=constant.branchesListFailed();break;case PULL_COMMAND_NAME:errorMessage=constant.pullFail(view.getRepositoryUrl());break;}}GitOutputConsole console=gitOutputConsoleFactory.create(commandName);console.printError(errorMessage);consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(),console);notificationManager.notify(errorMessage,FAIL,FLOAT_MODE);}  }
class C{  public boolean isNullable(){  return this.isNullable;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof GradientEntryNode) {    if (entries == null) {      entries=new ArrayList<GradientEntryNode>(4);    } else     if (entries.size() >= GRADIENT_ENTRIES_MAX_INCLUSIVE) {      FXGLog.getLogger().log(FXGLogger.WARN,"InvalidGradientBevelFilterNumElements",null,getDocumentName(),startLine,startColumn);      return;    }    entries.add((GradientEntryNode)child);  } else {    super.addChild(child);  }}  }
class C{  public int execute(String sql,DropTable drop) throws SQLException {  String index=drop.getTableName().toString();  index=Heading.findOriginal(sql.trim() + ";",index,"table\\s+",";");  DeleteIndexResponse response=client.admin().indices().prepareDelete(index).execute().actionGet();  if (!response.isAcknowledged())   throw new SQLException("Elasticsearch failed to delete the specified index");  return 0;}  }
class C{  private TripPattern processTripPattern(TripPattern originalTripPattern){  if (routes != null && !routes.contains(originalTripPattern.routeId)) {    return originalTripPattern;  }  if (patterns != null && originalTripPattern.containsNoTrips(patterns)) {    return originalTripPattern;  }  nPatternsAffected+=1;  insertBeginIndex=-1;  insertEndIndex=-1;  for (int s=0; s < originalTripPattern.stops.length; s++) {    if (originalTripPattern.stops[s] == intFromStop) {      insertBeginIndex=s + 1;    }    if (originalTripPattern.stops[s] == intToStop) {      insertEndIndex=s;    }  }  if (intFromStop == -1) {    insertBeginIndex=0;  }  if (intToStop == -1) {    insertEndIndex=originalTripPattern.stops.length;  }  if (insertBeginIndex == -1 || insertEndIndex == -1) {    String warning=String.format("The specified fromStop (%s) and/or toStop (%s) could not be matched on %s",fromStop,toStop,originalTripPattern.toStringDetailed(network.transitLayer));    if (routes != null) {      LOG.warn(warning);    } else {      warnings.add(warning);    }    return originalTripPattern;  }  if (insertEndIndex < insertBeginIndex) {    warnings.add("The end of the insertion region must be at or after its beginning.");    return originalTripPattern;  }  int nStopsToRemove=insertEndIndex - insertBeginIndex;  int oldPatternLength=originalTripPattern.stops.length;  newPatternLength=(oldPatternLength + intNewStops.size()) - nStopsToRemove;  TripPattern pattern=reroutePattern(originalTripPattern);  originalFixedPointStopIndex=0;  newFixedPointStopIndex=0;  OUTER:   for (int s=0; s < oldPatternLength; s++) {    for (int t=0; t < newPatternLength; t++) {      if (originalTripPattern.stops[s] == pattern.stops[t]) {        originalFixedPointStopIndex=s;        newFixedPointStopIndex=t;        break OUTER;      }    }  }  pattern.tripSchedules=originalTripPattern.tripSchedules.stream().map(null).collect(Collectors.toList());  return pattern;}  }
class C{  private Patient generatePatient(){  float rand=myRand(seed);  seed=(int)(rand * IM);  Patient p=null;  if (rand > 0.666) {    p=new Patient(this);  }  return p;}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  protected boolean readHeader(){  clear();  byte[] achLeader=new byte[DDF_LEADER_SIZE];  int nReadBytes=poModule.read(achLeader,0,DDF_LEADER_SIZE);  if (nReadBytes == -1) {    return false;  } else   if (nReadBytes != (int)DDF_LEADER_SIZE) {    Debug.error("DDFRecord.readHeader(): Leader is short on DDF file.");    return false;  }  int _recLength, _fieldAreaStart, _sizeFieldLength;  int _sizeFieldPos, _sizeFieldTag;  byte _leaderIden;  try {    String recLength=new String(achLeader,0,5);    String fieldAreaStart=new String(achLeader,12,5);    _recLength=controlValidFileLength(Integer.valueOf(recLength).intValue());    _fieldAreaStart=Integer.valueOf(fieldAreaStart).intValue();  } catch (  NumberFormatException nfe) {    if (Debug.debugging("iso8211")) {      Debug.output("Finished reading headers");    }    if (Debug.debugging("iso8211detail")) {      Debug.error("DDFRecord.readHeader(): " + nfe.getMessage());      nfe.printStackTrace();    } else {    }    return false;  }  _leaderIden=achLeader[6];  _sizeFieldLength=achLeader[20] - '0';  _sizeFieldPos=achLeader[21] - '0';  _sizeFieldTag=achLeader[23] - '0';  if (_leaderIden == 'R') {    nReuseHeader=true;  }  nFieldOffset=_fieldAreaStart - DDF_LEADER_SIZE;  if (Debug.debugging("iso8211")) {    Debug.output("\trecord length [0,5] = " + _recLength);    Debug.output("\tfield area start [12,5]= " + _fieldAreaStart);    Debug.output("\tleader id [6] = " + (char)_leaderIden + ", reuse header = "+ nReuseHeader);    Debug.output("\tfield length [20] = " + _sizeFieldLength);    Debug.output("\tfield position [21] = " + _sizeFieldPos);    Debug.output("\tfield tag [23] = " + _sizeFieldTag);  }  boolean readSubfields=false;  if (_recLength == 0) {    nDataSize=_fieldAreaStart - DDF_LEADER_SIZE;  } else   if (_recLength < 24 || _recLength > 100000000 || _fieldAreaStart < 24 || _fieldAreaStart > 100000) {    Debug.error("DDFRecord: Data record appears to be corrupt on DDF file.\n -- ensure that the files were uncompressed without modifying\n carriage return/linefeeds (by default WINZIP does this).");    return false;  } else {    nDataSize=_recLength - DDF_LEADER_SIZE;    readSubfields=true;  }  pachData=new byte[nDataSize];  if (poModule.read(pachData,0,nDataSize) != nDataSize) {    Debug.error("DDFRecord: Data record is short on DDF file.");    return false;  }  int i;  int nFieldEntryWidth;  nFieldEntryWidth=_sizeFieldLength + _sizeFieldPos + _sizeFieldTag;  nFieldCount=0;  for (i=0; i < nDataSize; i+=nFieldEntryWidth) {    if (pachData[i] == DDF_FIELD_TERMINATOR)     break;    nFieldCount++;  }  paoFields=new Vector(nFieldCount);  for (i=0; i < nFieldCount; i++) {    String szTag;    int nEntryOffset=i * nFieldEntryWidth;    int nFieldLength, nFieldPos;    szTag=new String(pachData,nEntryOffset,_sizeFieldTag);    nEntryOffset+=_sizeFieldTag;    nFieldLength=Integer.valueOf(new String(pachData,nEntryOffset,_sizeFieldLength)).intValue();    nEntryOffset+=_sizeFieldLength;    nFieldPos=Integer.valueOf(new String(pachData,nEntryOffset,_sizeFieldPos)).intValue();    DDFFieldDefinition poFieldDefn=poModule.findFieldDefn(szTag);    if (poFieldDefn == null) {      Debug.error("DDFRecord: Undefined field " + szTag + " encountered in data record.");      return false;    }    DDFField ddff=null;    if (readSubfields) {      byte[] tempData=new byte[nFieldLength];      System.arraycopy(pachData,_fieldAreaStart + nFieldPos - DDF_LEADER_SIZE,tempData,0,tempData.length);      ddff=new DDFField(poFieldDefn,tempData,readSubfields);    } else {      ddff=new DDFField(poFieldDefn,nFieldPos,nFieldLength);      ddff.setHeaderOffset(poModule._recLength + _fieldAreaStart);    }    paoFields.add(ddff);  }  return true;}  }
class C{  public final void addMouseListener(MouseListener l){  String pkg=getPackage(l.getClass());  if (java.beans.Beans.isDesignTime() || pkg.equals(SWING_PACKAGE) || pkg.startsWith(SWING_PACKAGE)|| pkg.startsWith("com.sun.java.accessibility.util")) {    super.addMouseListener(l);  } else {    throw new IllegalArgumentException("This operation is disallowed because the package \"" + getPackage(l.getClass()) + "\" is not in the swing package (\""+ SWING_PACKAGE+ "\").");  }}  }
class C{  public static boolean isJavaKeyword(String key){  int i=0;  int j=javaKeywords.length;  while (i < j) {    int k=(i + j) / 2;    int result=javaKeywords[k].compareTo(key);    if (result == 0) {      return true;    }    if (result < 0) {      i=k + 1;    } else {      j=k;    }  }  return false;}  }
class C{  public AppEngineDeploy(@NotNull AppEngineHelper helper,@NotNull LoggingHandler loggingHandler,@NotNull AppEngineDeploymentConfiguration deploymentConfiguration,@NotNull AppEngineEnvironment environment,@NotNull DeploymentOperationCallback callback){  this.helper=helper;  this.loggingHandler=loggingHandler;  this.deploymentConfiguration=deploymentConfiguration;  this.environment=environment;  this.callback=callback;}  }
class C{  public void testConstructor(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  assertEquals(0.0,ai.get());}  }
class C{  public Optional<String> download(FeedItem feedItem){  Uri url=proxyService.proxy(UriHelper.of(context).media(feedItem,true));  File external;  String location=settings.downloadLocation(context);  if (location.equals(context.getString(R.string.pref_downloadLocation_value_downloads))) {    external=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);  } else   if (location.equals(context.getString(R.string.pref_downloadLocation_value_pictures))) {    external=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);  } else {    external=Environment.getExternalStorageDirectory();  }  File targetDirectory=new File(external,"pr0gramm");  if (!targetDirectory.exists() && !targetDirectory.mkdirs()) {    return Optional.of(context.getString(R.string.error_could_not_create_download_directory));  }  DateTimeFormatter format=DateTimeFormat.forPattern("yyyyMMdd-HHmmss");  String fileType=feedItem.image().toLowerCase().replaceFirst("^.*\\.(\\w+)$","$1");  String prefix=Joiner.on("-").join(feedItem.created().toString(format),feedItem.user(),"id" + feedItem.id());  String name=prefix.replaceAll("[^A-Za-z0-9_-]+","") + "." + fileType;  DownloadManager.Request request=new DownloadManager.Request(url);  request.setVisibleInDownloadsUi(false);  request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);  request.setTitle(name);  request.setDestinationUri(Uri.fromFile(new File(targetDirectory,name)));  request.allowScanningByMediaScanner();  downloadManager.enqueue(request);  Track.download();  return Optional.absent();}  }
class C{  private void purgeSystemRecords(ArrayList<String> truncatedTables){  m_source.temporarilyDisconnectSource();  resetDBObjects(DBObject_Table.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"purgeSystemRecords",new Object[]{m_objectTypes,m_direction});  m_counterPrg=new Integer(0);  m_totalPrg=new Integer(0);  for (Iterator<String> it=truncatedTables.iterator(); it.hasNext(); ) {    m_trackingList.add(it.next());  }  for (Iterator<String> it=m_targetMap.keySet().iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_targetMap.get(key);    String tableName=obj.getName().toUpperCase();    if (tableName.endsWith("_TRL"))     m_trackingList.add(tableName);  }  m_trackingList.add("AD_SYSTEM");  m_trackingList.add("AD_USER");  Savepoint sp=m_target.setSavepoint("purge system records");  m_nodesToPreserve=new HashMap<String,String>();  Vector<String> v=new Vector<String>(m_targetMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_targetMap.get(key);    if (obj.getName().toUpperCase().startsWith("AD_TREENODE")) {      String exclusionClause=protectCustomizedNodes(obj);      if (exclusionClause != null && exclusionClause.length() > 0)       m_nodesToPreserve.put(obj.getName(),exclusionClause);    }  }  v=new Vector<String>(m_targetMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_targetMap.get(key);    purgeSystemRecord(obj);  }  m_target.releaseSavepoint(sp);  logResults();  m_source.reconnectSource();}  }
class C{  private void actionDocument(){  boolean doc=selDocument.isChecked();  selTable.setEnabled(doc);  selRecord.setEnabled(doc);  selDateFrom.setEnabled(!doc);  selDateTo.setEnabled(!doc);  selOrg.setEnabled(!doc);  selAcct.setEnabled(!doc);  sel1.setEnabled(!doc);  sel2.setEnabled(!doc);  sel3.setEnabled(!doc);  sel4.setEnabled(!doc);  sel5.setEnabled(!doc);  sel6.setEnabled(!doc);  sel7.setEnabled(!doc);  sel8.setEnabled(!doc);}  }
class C{  TBigInteger(int sign,int numberLength,int[] digits){  this.sign=sign;  this.numberLength=numberLength;  this.digits=digits;}  }
class C{  CacheLocalMetricsMXBeanImpl(GridCacheAdapter<?,?> cache){  assert cache != null;  this.cache=cache;}  }
class C{  public static cuDoubleComplex cuConj(cuDoubleComplex x){  return cuCmplx(cuCreal(x),-cuCimag(x));}  }
class C{  public synchronized boolean revertToDefault(){  boolean any=false;  for (  Setting setting : settings) {    any|=setting.revertToDefault();  }  return any;}  }
class C{  public Spider thread(int threadNum){  checkIfRunning();  this.threadNum=threadNum;  if (threadNum <= 0) {    throw new IllegalArgumentException("threadNum should be more than one!");  }  return this;}  }
class C{  @Override public void sendRedirect(final String location) throws IOException {  try {    LOG.debug("redirecting to: {}",location);    final InputStream is=externalResourceLocator.locate(location);    IOUtils.copy(is,servletOutputStream);    is.close();    servletOutputStream.close();  } catch (  final IOException e) {    LOG.warn("{}: Invalid response for location: {}",e.getClass().getName(),location);    throw e;  }}  }
class C{  protected TraceDirective_Impl(){  super();}  }
class C{  private Boolean createNtpShare(StorageSystem storage,FileDeviceInputOutput args,SMBFileShare smbFileShare,String forceGroup) throws NetAppException {  String shareId=null;  String portGroup=findVfilerName(args.getFs());  NetAppApi nApi=new NetAppApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).vFiler(portGroup).build();  shareId=smbFileShare.getPath();  _log.info("NetAppFileStorageDevice doShare for {} with id {}",shareId,args.getFileObjId());  if (!nApi.doShare(shareId,smbFileShare.getName(),smbFileShare.getDescription(),smbFileShare.getMaxUsers(),smbFileShare.getPermission(),forceGroup)) {    _log.info("NetAppFileStorageDevice doShare for {} with id {} - failed",shareId,args.getFileObjId());    return false;  } else {    List<CifsAcl> existingAcls=new ArrayList<CifsAcl>();    CifsAcl defaultAcl=new CifsAcl();    defaultAcl.setUserName("everyone");    defaultAcl.setAccess(CifsAccess.full);    existingAcls.add(defaultAcl);    nApi.deleteCIFSShareAcl(smbFileShare.getName(),existingAcls);    smbFileShare.setNativeId(shareId);    if (null != args.getFileObj()) {      nApi.setQtreemode(args.getFsPath(),NTFS_QTREE_SETTING);    }    smbFileShare.setNetBIOSName(nApi.getNetBiosName());    _log.info("NetAppFileStorageDevice doShare for {} with id {} - complete",shareId,args.getFileObjId());    return true;  }}  }
class C{  protected RModel query(){  StringBuffer whereClause=new StringBuffer();  if (C_AcctSchema_ID != 0)   whereClause.append(RModel.TABLE_ALIAS).append(".C_AcctSchema_ID=").append(C_AcctSchema_ID);  if (PostingType != null && PostingType.length() > 0) {    if (whereClause.length() > 0)     whereClause.append(" AND ");    whereClause.append(RModel.TABLE_ALIAS).append(".PostingType='").append(PostingType).append("'");  }  if (documentQuery) {    if (whereClause.length() > 0)     whereClause.append(" AND ");    whereClause.append(RModel.TABLE_ALIAS).append(".AD_Table_ID=").append(AD_Table_ID).append(" AND ").append(RModel.TABLE_ALIAS).append(".Record_ID=").append(Record_ID);  } else {    Iterator<String> it=whereInfo.values().iterator();    while (it.hasNext()) {      String where=it.next();      if (where != null && where.length() > 0) {        if (whereClause.length() > 0)         whereClause.append(" AND ");        whereClause.append(RModel.TABLE_ALIAS).append(".").append(where);      }    }    if (DateFrom != null || DateTo != null) {      if (whereClause.length() > 0)       whereClause.append(" AND ");      if (DateFrom != null && DateTo != null)       whereClause.append("TRUNC(").append(RModel.TABLE_ALIAS).append(".DateAcct, 'DD') BETWEEN ").append(DB.TO_DATE(DateFrom)).append(" AND ").append(DB.TO_DATE(DateTo)); else       if (DateFrom != null)       whereClause.append("TRUNC(").append(RModel.TABLE_ALIAS).append(".DateAcct, 'DD') >= ").append(DB.TO_DATE(DateFrom)); else       whereClause.append("TRUNC(").append(RModel.TABLE_ALIAS).append(".DateAcct, 'DD') <= ").append(DB.TO_DATE(DateTo));    }    if (AD_Org_ID != 0) {      if (whereClause.length() > 0)       whereClause.append(" AND ");      whereClause.append(RModel.TABLE_ALIAS).append(".AD_Org_ID=").append(AD_Org_ID);    }  }  StringBuffer orderClause=new StringBuffer();  if (sortBy1.length() > 0)   orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy1);  if (sortBy2.length() > 0) {    if (orderClause.length() > 0)     orderClause.append(",");    orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy2);  }  if (sortBy3.length() > 0) {    if (orderClause.length() > 0)     orderClause.append(",");    orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy3);  }  if (sortBy4.length() > 0) {    if (orderClause.length() > 0)     orderClause.append(",");    orderClause.append(RModel.TABLE_ALIAS).append(".").append(sortBy4);  }  if (orderClause.length() == 0)   orderClause.append(RModel.TABLE_ALIAS).append(".Fact_Acct_ID");  RModel rm=getRModel();  if (group1 && sortBy1.length() > 0)   rm.setGroup(sortBy1);  if (group2 && sortBy2.length() > 0)   rm.setGroup(sortBy2);  if (group3 && sortBy3.length() > 0)   rm.setGroup(sortBy3);  if (group4 && sortBy4.length() > 0)   rm.setGroup(sortBy4);  rm.setFunction("AmtAcctDr",RModel.FUNCTION_SUM);  rm.setFunction("AmtAcctCr",RModel.FUNCTION_SUM);  rm.query(Env.getCtx(),whereClause.toString(),orderClause.toString());  return rm;}  }
class C{  protected Query createTermQuery(final String field,final String value,final float boost){  final Query query=createTermQuery(field,value);  query.setBoost(boost);  return query;}  }
class C{  public ShouterMain(final String h,final String u,final String p,final String c,final String P) throws SocketException {  super(h,u,p,c,P,false);}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  private void prepareDownload(String urlStr,String toFile) throws IOException {  HttpURLConnection conn=createConnection(urlStr);  downloadedFile=new File(toFile);  String remoteLastModified=conn.getHeaderField("Last-Modified");  fileLength=conn.getContentLength();  startNewDownload=(!downloadedFile.exists() || downloadedFile.length() >= fileLength || !remoteLastModified.equalsIgnoreCase(Variable.getVariable().getMapLastModified()));  conn.disconnect();}  }
class C{  public void testDecodingPlus() throws Exception {  assertEquals("a b",URLDecoder.decode("a+b"));  assertEquals("a b",URLDecoder.decode("a+b","UTF-8"));  assertEquals("a+b",new URI("http://foo#a+b").getFragment());}  }
class C{  public In(Scanner scanner){  this.scanner=scanner;}  }
class C{  private void buildBackwardsStateTable(Vector<String> tempRuleList){  tempStateTable=new Vector<>();  tempStateTable.addElement(new short[numCategories + 1]);  tempStateTable.addElement(new short[numCategories + 1]);  for (int i=0; i < tempRuleList.size(); i++) {    String rule=tempRuleList.elementAt(i);    if (rule.charAt(0) == '!') {      parseRule(rule.substring(1),false);    }  }  backfillLoopingStates();  int backTableOffset=tempStateTable.size();  if (backTableOffset > 2) {    ++backTableOffset;  }  for (int i=0; i < numCategories + 1; i++)   tempStateTable.addElement(new short[numCategories + 1]);  short[] state=tempStateTable.elementAt(backTableOffset - 1);  for (int i=0; i < numCategories; i++)   state[i]=(short)(i + backTableOffset);  int numRows=stateTable.length / numCategories;  for (int column=0; column < numCategories; column++) {    for (int row=0; row < numRows; row++) {      int nextRow=lookupState(row,column);      if (nextRow != 0) {        for (int nextColumn=0; nextColumn < numCategories; nextColumn++) {          int cellValue=lookupState(nextRow,nextColumn);          if (cellValue != 0) {            state=tempStateTable.elementAt(nextColumn + backTableOffset);            state[column]=(short)(column + backTableOffset);          }        }      }    }  }  if (backTableOffset > 1) {    state=tempStateTable.elementAt(1);    for (int i=backTableOffset - 1; i < tempStateTable.size(); i++) {      short[] state2=tempStateTable.elementAt(i);      for (int j=0; j < numCategories; j++) {        if (state[j] != 0 && state2[j] != 0) {          state2[j]=state[j];        }      }    }    state=tempStateTable.elementAt(backTableOffset - 1);    for (int i=1; i < backTableOffset - 1; i++) {      short[] state2=tempStateTable.elementAt(i);      if ((state2[numCategories] & END_STATE_FLAG) == 0) {        for (int j=0; j < numCategories; j++) {          if (state2[j] == 0) {            state2[j]=state[j];          }        }      }    }  }  finishBuildingStateTable(false);}  }
class C{  public FieldAnalysisRequest addFieldName(String fieldName){  if (fieldNames == null) {    fieldNames=new LinkedList<>();  }  fieldNames.add(fieldName);  return this;}  }
class C{  public static boolean deleteDirectory(String path){  return deleteDirectory(new File(path));}  }
class C{  public JSONArray put(int index,Collection<?> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public static boolean checkpw(String plaintext,String hashed){  byte hashed_bytes[];  byte try_bytes[];  try {    String try_pw=hashpw(plaintext,hashed);    hashed_bytes=hashed.getBytes("UTF-8");    try_bytes=try_pw.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    return false;  }  if (hashed_bytes.length != try_bytes.length) {    return false;  }  byte ret=0;  for (int i=0; i < try_bytes.length; i++) {    ret|=hashed_bytes[i] ^ try_bytes[i];  }  return ret == 0;}  }
class C{  private void composePageJPG(File outputFile) throws Exception {  File fileMemoryBlockJPG=null;  BufferedImage imageBlocks=new BufferedImage(memoryWidth,memoryHeight,BufferedImage.TYPE_INT_RGB);  Graphics graphics=imageBlocks.getGraphics();  BufferedImage image=null;  for (int i=memoryBlockProcessed; i < memoryBlockTotal; i++) {    fileMemoryBlockJPG=new File(path,prefix + "-block" + i+ ".jpg");    image=ImageIO.read(fileMemoryBlockJPG);    graphics.drawImage(ImageIO.read(fileMemoryBlockJPG),0,memoryRow,null);    fileMemoryBlockJPG.delete();    memoryRow+=image.getHeight();  }  imageBlocks.flush();  graphics.dispose();  numPage++;  ImageIO.write(imageBlocks,"png",outputFile);  addTempFile(outputFile);  addScanFile(outputFile);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  protected String safeGetTemplateName(Template template){  if (template == null)   return null;  String name=template.getName();  if (name == null)   return null;  String decodedName=name;  if (decodedName.indexOf('%') != -1) {    decodedName=StringUtil.replace(decodedName,"%2e",".",false,false);    decodedName=StringUtil.replace(decodedName,"%2E",".",false,false);    decodedName=StringUtil.replace(decodedName,"%2f","/",false,false);    decodedName=StringUtil.replace(decodedName,"%2F","/",false,false);    decodedName=StringUtil.replace(decodedName,"%5c","\\",false,false);    decodedName=StringUtil.replace(decodedName,"%5C","\\",false,false);  }  int dotDotIdx=decodedName.indexOf("..");  if (dotDotIdx != -1) {    int before=dotDotIdx - 1 >= 0 ? decodedName.charAt(dotDotIdx - 1) : -1;    int after=dotDotIdx + 2 < decodedName.length() ? decodedName.charAt(dotDotIdx + 2) : -1;    if ((before == -1 || before == '/' || before == '\\') && (after == -1 || after == '/' || after == '\\')) {      return null;    }  }  return name.startsWith("/") ? name.substring(1) : name;}  }
class C{  protected static void markRect(int x1,int x2,int inc,int elevationMap[][],int height){  for (int x=x1; x < x2; x++) {    for (int y=0; y < height; y++) {      elevationMap[x][y]+=inc;    }  }}  }
class C{  public BasicPage parallax(boolean showParallax){  this.showParallax=showParallax;  return this;}  }
class C{  @Override public boolean remove(Object obj){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static void populateServerCache() throws Exception {  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  for (int i=0; i < PREPOPULATED_ENTRIES; i++) {    region1.put("key-" + i,"val-" + i);  }}  }
class C{  void addDockWrapper(DockWrapper dw){  super.add(dw,null);}  }
class C{  public void removeLayer(Layer layer){  int length=_layers.size();  int no;  for (no=0; no < length; no++) {    if (((LayerWithZoomLevels)_layers.elementAt(no)).layer == layer) {      break;    }  }  _layers.removeElementAt(no);  refreshLayers=true;  super.repaint();}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DistinguishedNameException(String message){  super(message);}  }
class C{  public static Type union(List<Type> types,Unit unit){  if (types.size() == 1) {    return types.get(0);  }  UnionType ut=new UnionType(unit);  ut.setCaseTypes(types);  return ut.getType();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(4,50);  childData=child.getData();  assertEquals("characterdataDeleteDataExceedsLengthAssert","1230",childData);}  }
class C{  protected int index(int row,int column){  return this.offset + rowOffsets[rowZero + row * rowStride] + columnOffsets[columnZero + column * columnStride];}  }
class C{  public void addAll(List<Field> fields){  mFields.addAll(fields);}  }
class C{  public FastNondominatedSorting(){  this(new ParetoDominanceComparator());}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  GeneralPath shape1=new GeneralPath();  GeneralPath shape2=new GeneralPath();  GeneralPath shape3=new GeneralPath();  float minX=(float)plotArea.getMinX();  float minY=(float)plotArea.getMinY();  float maxX=(float)plotArea.getMaxX();  float maxY=(float)plotArea.getMaxY();  float midX=(float)(minX + (plotArea.getWidth() * 0.5));  float midY=(float)(minY + (plotArea.getHeight() * 0.8));  float y=maxY - (2 * (maxY - midY));  if (y < minY) {    y=minY;  }  shape1.moveTo(minX,midY);  shape1.lineTo(midX,minY);  shape1.lineTo(midX,y);  shape1.closePath();  shape2.moveTo(maxX,midY);  shape2.lineTo(midX,minY);  shape2.lineTo(midX,y);  shape2.closePath();  shape3.moveTo(minX,midY);  shape3.lineTo(midX,maxY);  shape3.lineTo(maxX,midY);  shape3.lineTo(midX,y);  shape3.closePath();  Shape s1=shape1;  Shape s2=shape2;  Shape s3=shape3;  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    s1=shape1.createTransformedShape(transform);    s2=shape2.createTransformedShape(transform);    s3=shape3.createTransformedShape(transform);  }  if (getHighlightPaint() != null) {    g2.setPaint(getHighlightPaint());    g2.fill(s3);  }  if (getFillPaint() != null) {    g2.setPaint(getFillPaint());    g2.fill(s1);    g2.fill(s2);  }  if (getOutlinePaint() != null) {    g2.setStroke(getOutlineStroke());    g2.setPaint(getOutlinePaint());    g2.draw(s1);    g2.draw(s2);    g2.draw(s3);  }}  }
class C{  public int clubPosition(Club club){  List<? extends Club> sortedClubs=clubsStandings();  Optional<? extends Club> selectedClub=FluentIterable.from(sortedClubs).firstMatch(null);  return selectedClub.isPresent() ? sortedClubs.indexOf(selectedClub.get()) : -1;}  }
class C{  public static <T>Observable.Transformer<T,T> applyComputationSchedulers(){  return (Observable.Transformer<T,T>)computationTransformer;}  }
class C{  void addPoint(double x,double y){  if (isVertical) {    double maxY=r.getMaxY();    r.y=Math.min(r.getY(),y);    r.height=Math.max(r.getHeight(),y - r.getY());    if (r.getMaxY() < maxY)     r.height=maxY - r.y;  } else {    double maxX=r.getMaxX();    r.x=Math.min(r.getX(),x);    r.width=Math.max(r.getWidth(),x - r.getX());    if (r.getMaxX() < maxX)     r.width=maxX - r.x;  }}  }
class C{  public JumpingSolitaireState(){  for (int i=0; i < filled.length; i++) {    filled[i]=true;  }  filled[4]=false;}  }
class C{  public EndOfBucket(){}  }
class C{  public static void error(String message){  error(ErrorType.INFO_ERROR,message);}  }
class C{  public List<GenericValue> makeAllOrderItemContactMechs(){  List<GenericValue> allOrderContactMechs=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : cartLines) {    Map<String,String> itemContactMechIds=item.getOrderItemContactMechIds();    if (itemContactMechIds != null) {      for (      Map.Entry<String,String> entry : itemContactMechIds.entrySet()) {        GenericValue orderContactMech=getDelegator().makeValue("OrderItemContactMech");        orderContactMech.set("contactMechPurposeTypeId",entry.getKey());        orderContactMech.set("contactMechId",entry.getValue());        orderContactMech.set("orderItemSeqId",item.getOrderItemSeqId());        allOrderContactMechs.add(orderContactMech);      }    }  }  return allOrderContactMechs;}  }
class C{  public boolean hasNext(){  return ++revisionIndex <= maxRevision;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Vignette(int width,int height,double radius){  region=new Rectangle(width,height);  this.radius=radius;  applyChanges();  getChildren().add(region);}  }
class C{  public static Automaton makeCharRange(int min,int max){  if (min > max) {    return makeEmpty();  }  Automaton a=new Automaton();  int s1=a.createState();  int s2=a.createState();  a.setAccept(s2,true);  a.addTransition(s1,s2,min,max);  a.finishState();  return a;}  }
class C{  protected void replyRejectPacket(IQ packet){  XMPPError xmppError=new XMPPError(XMPPError.Condition.no_acceptable);  IQ errorIQ=IQ.createErrorResponse(packet,xmppError);  this.connection.sendPacket(errorIQ);}  }
class C{  public static <T>T withObjectOutputStream(Path self,@ClosureParams(value=SimpleType.class,options="java.io.ObjectOutputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newObjectOutputStream(self),closure);}  }
class C{  public final void add(TKey key,TValue value){  Preconditions.checkNotNull(key);  Preconditions.checkNotNull(value);synchronized (mLock) {    final Queue<TValue> pool;    mLruKeyList.push(key);    if (!mValuePool.containsKey(key)) {      pool=new LinkedList<>();      mValuePool.put(key,pool);    } else {      pool=mValuePool.get(key);    }    pool.add(value);    mSize+=checkedSizeOf(key,value);    unsafeTrimToSize(mMaxSize);  }}  }
class C{  final public int compareTo(final String s){  final int l1=length();  final int l2=s.length();  final int n=l1 < l2 ? l1 : l2;  final char[] a=array;  for (int i=0; i < n; i++)   if (a[i] != s.charAt(i))   return a[i] - s.charAt(i);  return l1 - l2;}  }
class C{  public StringOwnTokenizer(String text,String delims,boolean delimsAreTokens){  this(text,(delimsAreTokens ? null : delims),(delimsAreTokens ? delims : null));}  }
class C{  private void showMessage(String msg){  Toast.makeText(AppDetailsActivity.this,msg,Toast.LENGTH_LONG).show();}  }
class C{  public void IPAuthenticator(){}  }
class C{  public final long makeInt(byte[] bytes,int offset,boolean isle) throws BinaryParseException {  if (bytes.length < offset + 4)   throw new BinaryParseException("Offset out of range when reading int");  return isle ? (bytes[offset + 3] << 24) + ((bytes[offset + 2] & 0xff) << 16) + ((bytes[offset + 1] & 0xff) << 8)+ (bytes[offset + 0] & 0xff) : (bytes[offset + 0] << 24) + ((bytes[offset + 1] & 0xff) << 16) + ((bytes[offset + 2] & 0xff) << 8)+ (bytes[offset + 3] & 0xff);}  }
class C{  public WebField(WebSessionCtx wsc,String columnName,String name,String description,int displayType,int fieldLength,int displayLength,boolean longField,boolean readOnly,boolean mandatory,boolean error,boolean hasDependents,boolean hasCallout,int AD_Process_ID,int AD_Window_ID,int AD_Record_ID,int AD_Table_ID,int fieldNumber,Object defaultvalue,String callOut,GridTab mTab,GridField mField,MRole mRole){  super();  m_wsc=wsc;  m_columnName=columnName;  if (name == null || name.length() == 0)   m_name=columnName; else   m_name=name;  if (description != null && description.length() > 0)   m_description=description;  m_defaultObject=defaultvalue;  m_displayType=displayType;  m_processID=AD_Process_ID;  m_windowID=AD_Window_ID;  m_tableID=AD_Table_ID;  m_recordID=AD_Record_ID;  m_fieldLength=fieldLength;  m_displayLength=displayLength;  if (m_displayLength <= 22)   m_displayLength=22; else   m_displayLength=44;  m_longField=longField;  m_readOnly=readOnly;  m_mandatory=mandatory;  m_error=error;  m_hasDependents=hasDependents;  m_hasCallout=hasCallout;  m_callOut=callOut;  m_fieldNumber=fieldNumber;  m_Tab=mTab;  m_Field=mField;  m_Role=mRole;}  }
class C{  @ReactMethod public void measure(final int reactTag,final Callback callback){  mOperationsQueue.enqueueMeasure(reactTag,callback);}  }
class C{  public void add(PrintStream p){  add(p,false);}  }
class C{  public DGeneratingKeyPair(JFrame parent,KeyPairType keyPairType,int keySize,Provider provider){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.keyPairType=keyPairType;  this.keySize=keySize;  this.provider=provider;  initComponents();}  }
class C{  public void performDelete(){  if (text.getSelectionCount() > 0) {    text.insert("");  } else {    int pos=text.getCaretOffset();    if (pos < text.getCharCount()) {      text.setSelection(pos,pos + 1);      text.insert("");    }  }  checkSelection();  checkDeleteable();  checkSelectable();}  }
class C{  public void reset(){synchronized (mLock) {    mKnownUsers.clear();    mSynced=false;  }}  }
class C{  @DSComment("input is io writer") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:00.130 -0500",hash_original_method="4C7FF3D19CAA5E8142F763BAEAB400A6",hash_generated_method="0B6B9AC28E672B3BF921A643134A2BD5") public StreamResult(Writer writer){  setWriter(writer);}  }
class C{  public void disconnect(String reason,boolean overrideKick){  if (player != null && !overrideKick) {    PlayerKickEvent event=EventFactory.onPlayerKick(player,reason);    if (event.isCancelled()) {      return;    }    reason=event.getReason();    if (player.isOnline() && event.getLeaveMessage() != null) {      server.broadcastMessage(event.getLeaveMessage());    }  }  if (player != null) {    GlowServer.logger.info(player.getName() + " kicked: " + reason);  } else {    GlowServer.logger.info("[" + address + "] kicked: "+ reason);  }  if (quitReason == null) {    quitReason="kicked";  }  if (isActive() && (getProtocol() instanceof LoginProtocol || getProtocol() instanceof PlayProtocol)) {    sendWithFuture(new KickMessage(reason)).addListener(ChannelFutureListener.CLOSE);  } else {    getChannel().close();  }}  }
class C{  public void attrAdded(Attr node,String newv){  if (!mutate) {    value=cssEngine.parsePropertyValue(SVGStylableElement.this,property,newv);  }}  }
class C{  public void add(long element){  if (size == capacity) {    ensureCapacity(size + 1);  }  int i=size * this.bitsPerElement;  QuickBitVector.putLongFromTo(this.bits,element - this.minValue,i,i + this.bitsPerElement - 1);  size++;}  }
class C{  public ImportOperation(IPath containerPath,IImportStructureProvider provider,IOverwriteQuery overwriteImplementor,List filesToImport){  this(containerPath,null,provider,overwriteImplementor);  setFilesToImport(filesToImport);}  }
class C{  public static List<FPLANRoute> parseFPLAN(Set<Integer> bitfeldNummern,Map<String,String> operators,String FPLANfile) throws IOException {  List<FPLANRoute> hafasRoutes=new ArrayList<>();  FPLANRoute currentFPLANRoute=null;  Counter counter=new Counter("FPLAN line # ");  BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLANfile),"latin1"));  String newLine=readsLines.readLine();  while (newLine != null) {    if (newLine.charAt(0) == '*') {      if (newLine.charAt(1) == 'Z') {        String operator=operators.get(newLine.substring(9,15).trim());        String fahrtnummer=newLine.substring(3,8).trim();        int numberOfDepartures=0;        int cycleTime=0;        try {          numberOfDepartures=Integer.parseInt(newLine.substring(22,25));          cycleTime=Integer.parseInt(newLine.substring(26,29));        } catch (        Exception e) {        }        currentFPLANRoute=new FPLANRoute(operator,fahrtnummer,numberOfDepartures,cycleTime);        hafasRoutes.add(currentFPLANRoute);      } else       if (newLine.charAt(1) == 'G') {        if (currentFPLANRoute != null) {          Id<VehicleType> typeId=Id.create(newLine.substring(3,6).trim(),VehicleType.class);          currentFPLANRoute.setVehicleTypeId(typeId);          int hourFirstDeparture=Integer.parseInt(newLine.substring(25,27));          int minuteFirstDeparture=Integer.parseInt(newLine.substring(27,29));          currentFPLANRoute.setFirstDepartureTime(hourFirstDeparture,minuteFirstDeparture);        }      } else       if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V' && newLine.charAt(4) == 'E') {        if (currentFPLANRoute != null) {          int localBitfeldnr=0;          if (newLine.substring(22,28).trim().length() > 0) {            localBitfeldnr=Integer.parseInt(newLine.substring(22,28));          }          if (!bitfeldNummern.contains(localBitfeldnr)) {            hafasRoutes.remove(currentFPLANRoute);            currentFPLANRoute=null;          }        }      } else       if (newLine.charAt(1) == 'L') {        if (currentFPLANRoute != null) {          currentFPLANRoute.setRouteDescription(newLine.substring(3,11).trim());        }      } else       if (newLine.charAt(1) == 'T') {        log.error("*T-Line in HAFAS discovered. Please implement appropriate read out.");      }    } else     if (newLine.charAt(0) == '+') {      log.error("+-Line in HRDF discovered. Please implement appropriate read out.");    } else {      boolean arrivalTimeNegative=newLine.charAt(29) == '-';      boolean departureTimeNegative=newLine.charAt(36) == '-';      if (currentFPLANRoute != null) {        double arrivalTime=0;        try {          arrivalTime=Double.parseDouble(newLine.substring(31,33)) * 3600 + Double.parseDouble(newLine.substring(33,35)) * 60;        } catch (        Exception e) {        }        double departureTime=0;        try {          departureTime=Double.parseDouble(newLine.substring(38,40)) * 3600 + Double.parseDouble(newLine.substring(40,42)) * 60;        } catch (        Exception e) {        }        if (!(arrivalTimeNegative && departureTimeNegative)) {          currentFPLANRoute.addRouteStop(newLine.substring(0,7),arrivalTime,departureTime);        }      }    }    newLine=readsLines.readLine();    counter.incCounter();  }  readsLines.close();  counter.printCounter();  return hafasRoutes;}  }
class C{  public TCharHash(){  super();  no_entry_value=Constants.DEFAULT_CHAR_NO_ENTRY_VALUE;  if (no_entry_value != (char)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  private void duplicateCode(IR ir,HashMap<BasicBlock,BasicBlock> origToDupMap,HashSet<BasicBlock> exceptionHandlerBlocks){  if (DEBUG)   VM.sysWrite("In duplicate code\n");  BasicBlock origLastBlock=ir.cfg.lastInCodeOrder();  boolean done=false;  BasicBlock curBlock=ir.cfg.firstInCodeOrder();  while (!done && curBlock != null) {    if (curBlock == origLastBlock) {      done=true;    }    if (curBlock == ir.cfg.exit()) {      curBlock=curBlock.nextBasicBlockInCodeOrder();      continue;    }    if (curBlock == ir.cfg.entry() || curBlock.isExceptionHandlerBasicBlock()) {      Instruction splitInstr=null;      if (curBlock == ir.cfg.entry()) {        splitInstr=getFirstInstWithOperator(IR_PROLOGUE,curBlock);      } else {        splitInstr=getFirstInstWithOperator(LABEL,curBlock);      }      BasicBlock blockTail=curBlock.splitNodeWithLinksAt(splitInstr,ir);      curBlock.recomputeNormalOut(ir);      if (curBlock.isExceptionHandlerBasicBlock()) {        exceptionHandlerBlocks.add(blockTail);      }      curBlock=blockTail;      DefUse.recomputeSpansBasicBlock(ir);    }    BasicBlock dup=myCopyWithoutLinks(curBlock,ir);    dup.setInfrequent();    if (DEBUG2) {      VM.sysWrite("Copying bb: " + curBlock + " to be "+ dup+ "\n");    }    ir.cfg.addLastInCodeOrder(dup);    BasicBlock fallthrough=curBlock.getFallThroughBlock();    if (fallthrough != null) {      Instruction g=Goto.create(GOTO,fallthrough.makeJumpTarget());      dup.appendInstruction(g);    }    dup.recomputeNormalOut(ir);    origToDupMap.put(curBlock,dup);    curBlock=curBlock.nextBasicBlockInCodeOrder();  }}  }
class C{  private static Path doPath(String s){  int n=s.length();  ParserHelper ph=new ParserHelper(s,0);  ph.skipWhitespace();  Path p=new Path();  float lastX=0;  float lastY=0;  float lastX1=0;  float lastY1=0;  float subPathStartX=0;  float subPathStartY=0;  char prevCmd=0;  while (ph.pos < n) {    char cmd=s.charAt(ph.pos);switch (cmd) {case '-':case '+':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      if (prevCmd == 'm' || prevCmd == 'M') {        cmd=(char)(((int)prevCmd) - 1);        break;      } else       if (prevCmd == 'c' || prevCmd == 'C') {        cmd=prevCmd;        break;      } else       if (prevCmd == 'l' || prevCmd == 'L') {        cmd=prevCmd;        break;      }default :{      ph.advance();      prevCmd=cmd;    }}boolean wasCurve=false;switch (cmd) {case 'M':case 'm':{    float x=ph.nextFloat();    float y=ph.nextFloat();    if (cmd == 'm') {      subPathStartX+=x;      subPathStartY+=y;      p.rMoveTo(x,y);      lastX+=x;      lastY+=y;    } else {      subPathStartX=x;      subPathStartY=y;      p.moveTo(x,y);      lastX=x;      lastY=y;    }    break;  }case 'Z':case 'z':{  p.close();  p.moveTo(subPathStartX,subPathStartY);  lastX=subPathStartX;  lastY=subPathStartY;  lastX1=subPathStartX;  lastY1=subPathStartY;  wasCurve=true;  break;}case 'L':case 'l':{float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'l') {  p.rLineTo(x,y);  lastX+=x;  lastY+=y;} else {  p.lineTo(x,y);  lastX=x;  lastY=y;}break;}case 'H':case 'h':{float x=ph.nextFloat();if (cmd == 'h') {p.rLineTo(x,0);lastX+=x;} else {p.lineTo(x,lastY);lastX=x;}break;}case 'V':case 'v':{float y=ph.nextFloat();if (cmd == 'v') {p.rLineTo(0,y);lastY+=y;} else {p.lineTo(lastX,y);lastY=y;}break;}case 'C':case 'c':{wasCurve=true;float x1=ph.nextFloat();float y1=ph.nextFloat();float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'c') {x1+=lastX;x2+=lastX;x+=lastX;y1+=lastY;y2+=lastY;y+=lastY;}p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'S':case 's':{wasCurve=true;float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 's') {x2+=lastX;x+=lastX;y2+=lastY;y+=lastY;}float x1=2 * lastX - lastX1;float y1=2 * lastY - lastY1;p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'A':case 'a':{float rx=ph.nextFloat();float ry=ph.nextFloat();float theta=ph.nextFloat();int largeArc=(int)ph.nextFloat();int sweepArc=(int)ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();drawArc(p,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc);lastX=x;lastY=y;break;}}if (!wasCurve) {lastX1=lastX;lastY1=lastY;}ph.skipWhitespace();}return p;}  }
class C{  private static CommandLine parseArg(String[] args) throws ParseException {  Options options=new Options();  options.addOption("h",false,"usage help");  options.addOption("help",false,"usage help");  options.addOption("f",true,"configuration file");  options.addOption("l",true,"log file");  options.addOption("w",true,"filter worker number");  options.addOption("v",false,"print info log");  options.addOption("vv",false,"print debug log");  options.addOption("vvvv",false,"print trace log");  CommandLineParser paraer=new BasicParser();  CommandLine cmdLine=paraer.parse(options,args);  if (cmdLine.hasOption("help") || cmdLine.hasOption("h")) {    usage();    System.exit(-1);  }  if (!cmdLine.hasOption("f")) {    throw new IllegalArgumentException("Required -f argument to specify config file");  }  return cmdLine;}  }
class C{  public Fact(Resource s,URI p,Value o,int iteration,OwlRule rule,Resource node){  this.triple=new StatementImpl(s,p,o);  this.derivation=new Derivation(iteration,rule,node);}  }
class C{  @Override public void mousePressed(MouseEvent event){  _anchorX=xLoc;  _anchorY=yLoc;  _lastX=_anchorX;  _lastY=_anchorY;  calcLocation(event,0,0);  if (isEditable()) {    boolean prevSelectionActive=selectionActive;    selectionActive=false;    xLabel.setText(Integer.toString(xLoc));    yLabel.setText(Integer.toString(yLoc));    if (event.isPopupTrigger()) {      if (event.isMetaDown() || event.isAltDown()) {        delayedPopupTrigger=true;      } else {        checkPopUp(event);      }    }    if (event.isMetaDown() || event.isAltDown()) {      selectedObject=null;      selectedPointType=NONE;      if (checkSelect(dLoc,false)) {        selectedObject=foundObject;        selectedPointType=foundPointType;        startDel.setLocation(foundLocation.getX() - dLoc.getX(),foundLocation.getY() - dLoc.getY());        foundObject=null;      } else {        selectedObject=checkMarkers(dLoc);        if (selectedObject != null) {          selectedPointType=MARKER;          startDel.setLocation((((LocoIcon)selectedObject).getX() - dLoc.getX()),(((LocoIcon)selectedObject).getY() - dLoc.getY()));        } else {          selectedObject=checkClocks(dLoc);          if (selectedObject != null) {            selectedPointType=LAYOUT_POS_JCOMP;            startDel.setLocation((((PositionableJComponent)selectedObject).getX() - dLoc.getX()),(((PositionableJComponent)selectedObject).getY() - dLoc.getY()));          } else {            selectedObject=checkMultiSensors(dLoc);            if (selectedObject != null) {              selectedPointType=MULTI_SENSOR;              startDel.setLocation((((MultiSensorIcon)selectedObject).getX() - dLoc.getX()),(((MultiSensorIcon)selectedObject).getY() - dLoc.getY()));            }          }        }        if (selectedObject == null) {          selectedObject=checkSensorIcons(dLoc);          if (selectedObject == null) {            selectedObject=checkSignalHeadIcons(dLoc);            if (selectedObject == null) {              selectedObject=checkLabelImages(dLoc);              if (selectedObject == null) {                selectedObject=checkSignalMastIcons(dLoc);              }            }          }          if (selectedObject != null) {            selectedPointType=LAYOUT_POS_LABEL;            startDel.setLocation((((PositionableLabel)selectedObject).getX() - dLoc.getX()),(((PositionableLabel)selectedObject).getY() - dLoc.getY()));            if (selectedObject instanceof MemoryIcon) {              MemoryIcon pm=(MemoryIcon)selectedObject;              if (pm.getPopupUtility().getFixedWidth() == 0) {                startDel.setLocation((pm.getOriginalX() - dLoc.getX()),(pm.getOriginalY() - dLoc.getY()));              }            }          } else {            selectedObject=checkBackgrounds(dLoc);            if (selectedObject != null) {              selectedPointType=LAYOUT_POS_LABEL;              startDel.setLocation((((PositionableLabel)selectedObject).getX() - dLoc.getX()),(((PositionableLabel)selectedObject).getY() - dLoc.getY()));            }          }        }      }    } else     if (event.isShiftDown() && trackBox.isSelected() && (!event.isPopupTrigger())) {      selectedObject=null;      if (checkSelect(dLoc,true)) {        beginObject=foundObject;        beginPointType=foundPointType;        beginLocation=foundLocation;      } else {        foundObject=null;        beginObject=null;      }    } else     if ((!event.isShiftDown()) && (!event.isControlDown()) && (!event.isPopupTrigger())) {      selectedObject=null;      if (allControlling()) {        selectedObject=null;        for (int i=0; i < turnoutList.size(); i++) {          LayoutTurnout t=turnoutList.get(i);          Point2D pt=t.getCoordsCenter();          Rectangle2D r=new Rectangle2D.Double(pt.getX() - SIZE2,pt.getY() - SIZE2,2.0 * SIZE2,2.0 * SIZE2);          if (r.contains(dLoc)) {            selectedObject=t;            selectedPointType=TURNOUT_CENTER;            break;          }        }        for (        LayoutSlip sl : slipList) {          Point2D pt=sl.getCoordsCenter();          Rectangle2D r=new Rectangle2D.Double(pt.getX() - (SIZE2 * 2.0),pt.getY() - (SIZE2 * 2.0),4.0 * SIZE2,4.0 * SIZE2);          if (r.contains(dLoc)) {            selectedObject=sl;            selectedPointType=SLIP_CENTER;            break;          }        }        for (int i=0; i < turntableList.size(); i++) {          LayoutTurntable x=turntableList.get(i);          for (int k=0; k < x.getNumberRays(); k++) {            if (x.getRayConnectOrdered(k) != null) {              Point2D pt=x.getRayCoordsOrdered(k);              Rectangle2D r=new Rectangle2D.Double(pt.getX() - SIZE,pt.getY() - SIZE,SIZE2,SIZE2);              if (r.contains(dLoc)) {                selectedObject=x;                selectedPointType=TURNTABLE_RAY_OFFSET + x.getRayIndex(k);                break;              }            }          }        }      }      selectionActive=true;      selectionX=dLoc.getX();      selectionY=dLoc.getY();      selectionWidth=0.0;      selectionHeight=0.0;    }    if (prevSelectionActive) {      repaint();    }  } else   if (allControlling() && (!event.isMetaDown()) && (!event.isPopupTrigger())&& (!event.isAltDown())&& (!event.isShiftDown())&& (!event.isControlDown())) {    selectedObject=null;    for (int i=0; i < turnoutList.size(); i++) {      LayoutTurnout t=turnoutList.get(i);      Point2D pt=t.getCoordsCenter();      double size=SIZE * turnoutCircleSize;      if (size < SIZE2 * 2.0) {        size=SIZE2 * 2.0;      }      Rectangle2D r=new Rectangle2D.Double(pt.getX() - size,pt.getY() - size,size + size,size + size);      if (r.contains(dLoc)) {        selectedObject=t;        selectedPointType=TURNOUT_CENTER;        break;      }    }    for (    LayoutSlip sl : slipList) {      Point2D pt=sl.getCoordsCenter();      Rectangle2D r=new Rectangle2D.Double(pt.getX() - (SIZE2 * 2.0),pt.getY() - (SIZE2 * 2.0),4.0 * SIZE2,4.0 * SIZE2);      if (r.contains(dLoc)) {        selectedObject=sl;        selectedPointType=SLIP_CENTER;        break;      }    }    for (int i=0; i < turntableList.size(); i++) {      LayoutTurntable x=turntableList.get(i);      for (int k=0; k < x.getNumberRays(); k++) {        if (x.getRayConnectOrdered(k) != null) {          Point2D pt=x.getRayCoordsOrdered(k);          Rectangle2D r=new Rectangle2D.Double(pt.getX() - SIZE,pt.getY() - SIZE,SIZE2,SIZE2);          if (r.contains(dLoc)) {            selectedObject=x;            selectedPointType=TURNTABLE_RAY_OFFSET + x.getRayIndex(k);            break;          }        }      }    }  } else   if ((event.isMetaDown() || event.isAltDown()) && (!event.isShiftDown()) && (!event.isControlDown())) {    selectedObject=checkMarkers(dLoc);    if (selectedObject != null) {      selectedPointType=MARKER;      startDel.setLocation((((LocoIcon)selectedObject).getX() - dLoc.getX()),(((LocoIcon)selectedObject).getY() - dLoc.getY()));    }  } else   if (event.isPopupTrigger() && (!event.isShiftDown())) {    LocoIcon lo=checkMarkers(dLoc);    if (lo != null) {      delayedPopupTrigger=true;    }  }  if (!event.isPopupTrigger() && !isDragging) {    List<Positionable> selections=getSelectedItems(event);    if (selections.size() > 0) {      selections.get(0).doMousePressed(event);    }  }  thisPanel.requestFocusInWindow();  return;}  }
class C{  public boolean isDestroying(){  return _lifecycle.isDestroying();}  }
class C{  public void readData(DataInput din) throws IOException {  status=din.readByte() & 0xFF;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.BITMAP_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_BITMAP);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(bytes.length);  dos.write(bytes,0,bytes.length);  properties.write(dos);}  }
class C{  void checkAcceptPermission(SecurityManager sm,AccessControlContext acc){  if (sm != cacheSecurityManager) {    okContext=null;    authCache=new WeakHashMap<AccessControlContext,Reference<AccessControlContext>>();    cacheSecurityManager=sm;  }  if (acc.equals(okContext) || authCache.containsKey(acc)) {    return;  }  InetAddress addr=socket.getInetAddress();  String host=(addr != null) ? addr.getHostAddress() : "*";  sm.checkAccept(host,socket.getPort());  authCache.put(acc,new SoftReference<AccessControlContext>(acc));  okContext=acc;}  }
class C{  @NoInline private static void arraycopyPiecemeal(long[] src,int srcIdx,long[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  public XMPPException(StreamError streamError){  super();  this.streamError=streamError;}  }
class C{  private void deliverBacklog(){  Iterator<StoredMessage> backlog=service.messageStore.getAllArrivedMessages(clientHandle);  while (backlog.hasNext()) {    StoredMessage msgArrived=backlog.next();    Bundle resultBundle=messageToBundle(msgArrived.getMessageId(),msgArrived.getTopic(),msgArrived.getMessage());    resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.MESSAGE_ARRIVED_ACTION);    service.callbackToActivity(clientHandle,Status.OK,resultBundle);  }}  }
class C{  public static CommandContext ignoreExitStatus(){  return builder().ignoreExitStatus().build();}  }
class C{  private void sincronizarBase(){  listaEmprestimo=ControleDAO.getBanco().getEmprestimoDAO().historico();}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public static int toIntValue(String str) throws ExpressionException {  return (int)toDoubleValue(str,false);}  }
class C{  public TLCWorkerRMI removeTLCServerThread(final TLCServerThread thread){  final TLCWorkerRMI worker=threadsToWorkers.remove(thread);  if (worker != null) {    MP.printMessage(EC.TLC_DISTRIBUTED_WORKER_DEREGISTERED,thread.getUri().toString());  }  return worker;}  }
class C{  public BasicRuleCollection(int arity,int[] sourceTokens){  this.rules=new ArrayList<>();  this.sourceTokens=sourceTokens;  this.arity=arity;  this.sorted=false;}  }
class C{  public void parseIndividual(String filename){  Population population=this.sc.getPopulation();  population.setName("Nelson Mandela 2004 travel survey population");  BufferedReader br=IOUtils.getBufferedReader(filename);  Person person=null;  Plan plan=null;  try {    String line=br.readLine();    while ((line=br.readLine()) != null) {      String[] sa=line.split(",");      int enu=Integer.parseInt(sa[0]);      int hhn=Integer.parseInt(sa[1]);      int hhPerson=Integer.parseInt(sa[2]);      String gender=sa[3].equalsIgnoreCase("Male") ? "m" : "f";      int age=Integer.parseInt(sa[4]);      boolean isEmployed=this.isEmployed(Integer.parseInt(sa[5]));      String hasCar=sa[6].equalsIgnoreCase("Yes") ? "always" : "never";      int legNumber=Integer.parseInt(sa[7]);      String activityTypeOrigin=getActivityTypeFromCode(Integer.parseInt(sa[8]));      String activityTypeDestination=getActivityTypeFromCode(Integer.parseInt(sa[9]));      int startTime;      int endTime;      try {        startTime=Integer.parseInt(sa[10].substring(11,13)) * 3600 + Integer.parseInt(sa[10].substring(14,16)) * 60;        endTime=Integer.parseInt(sa[11].substring(11,13)) * 3600 + Integer.parseInt(sa[11].substring(14,16)) * 60;      } catch (      NumberFormatException e) {        throw new RuntimeException(enu + "; " + hhn+ "; "+ hhPerson+ "; "+ legNumber);      }      String zoneFrom=sa[12];      Coord coordFrom=getLocalScrambledCoord(getCoord(zoneFrom));      String zoneTo=sa[13];      Coord coordTo=getLocalScrambledCoord(getCoord(zoneTo));      String mode=getMode(Integer.parseInt(sa[14]));      Id<Person> personId=Id.create(String.format("%03d%03d%03d",enu,hhn,hhPerson),Person.class);      if (age < 12 && isEmployed) {        LOG.warn("Person " + personId.toString() + " is a minor and working. Changing employment status to unemployed.");        isEmployed=false;      }      if (activityTypeOrigin.equalsIgnoreCase("e1") && age >= 23 && isEmployed) {        activityTypeOrigin="w";      }      if (activityTypeDestination.equalsIgnoreCase("e1") && age >= 23 && isEmployed) {        activityTypeDestination="w";      }      if (!population.getPersons().containsKey(personId)) {        if (legNumber == 1) {          if (person != null) {            population.addPerson(person);            Id<Household> hhId=Id.create(String.format("%03d%03d",enu,hhn),Household.class);            if (!sc.getHouseholds().getHouseholds().containsKey(hhId)) {              LOG.error("Could not find the household " + hhId.toString());            }            sc.getHouseholds().getHouseholds().get(hhId).getMemberIds().add(personId);            population.getPersonAttributes().putAttribute(person.getId().toString(),"householdId",hhId.toString());          }          person=population.getFactory().createPerson(personId);          PersonUtils.setSex(person,gender);          if (age > 0) {            PersonUtils.setAge(person,age);          }          PersonUtils.setEmployed(person,isEmployed);          PersonUtils.setCarAvail(person,hasCar);          plan=(Plan)population.getFactory().createPlan();          if (coordFrom == null) {            if (locationlessPersons.containsKey(personId)) {              Integer oldValue=locationlessPersons.get(personId);              locationlessPersons.put(personId,oldValue + 1);            } else {              locationlessPersons.put(personId,new Integer(1));            }            if (locationlessType.containsKey(activityTypeOrigin)) {              Integer oldValue=locationlessType.get(activityTypeOrigin);              locationlessType.put(activityTypeOrigin,oldValue + 1);            } else {              locationlessType.put(activityTypeOrigin,new Integer(1));            }          }          Activity act=population.getFactory().createActivityFromCoord(activityTypeOrigin,coordFrom);          act.setEndTime(startTime);          if (act.getStartTime() >= 0 && act.getEndTime() - act.getStartTime() < 0) {            LOG.error("Negative duration: " + enu + "; "+ hhn+ "; "+ hhPerson+ "; "+ legNumber);          }          plan.addActivity(act);          person.addPlan(plan);        } else {          if (!person.getId().equals(personId)) {            LOG.error("Person Ids are not the same: should be " + person.getId().toString() + " but was "+ personId.toString());          }          Activity a=PopulationUtils.getLastActivity(plan);          a.setEndTime(startTime);          if (a.getEndTime() - a.getStartTime() < 0) {            LOG.error("Negative duration: " + enu + "; "+ hhn+ "; "+ hhPerson+ "; "+ legNumber);          }        }        Leg leg=population.getFactory().createLeg(mode);        leg.setDepartureTime(startTime);        leg.setTravelTime(endTime - startTime);        plan.addLeg(leg);        if (coordTo == null) {          Coord formerCoord=((Activity)plan.getPlanElements().get(plan.getPlanElements().size() - 2)).getCoord();          if (formerCoord != null) {            coordTo=getScrambledCoord(formerCoord);          } else {            if (locationlessPersons.containsKey(personId)) {              Integer oldValue=locationlessPersons.get(personId);              locationlessPersons.put(personId,oldValue + 1);            } else {              locationlessPersons.put(personId,new Integer(1));            }            if (locationlessType.containsKey(activityTypeDestination)) {              Integer oldValue=locationlessType.get(activityTypeDestination);              locationlessType.put(activityTypeDestination,oldValue + 1);            } else {              locationlessType.put(activityTypeDestination,new Integer(1));            }          }        }        Activity act=population.getFactory().createActivityFromCoord(activityTypeDestination,coordTo);        act.setStartTime(endTime);        plan.addActivity(act);      } else {        LOG.error("This should not occur: a person that doesn't exist in the population.");      }    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader for " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader for " + filename);    }  }  LOG.info("People with location-less activities: " + locationlessPersons.size());  for (  Id<Person> id : locationlessPersons.keySet()) {    LOG.info("   " + id.toString() + ": "+ locationlessPersons.get(id));  }  for (  String s : locationlessType.keySet()) {    LOG.info("   " + s + ": "+ locationlessType.get(s));  }  if (removeNullLocationPersons) {    LOG.info("Removing persons with location-less activities from population and households...");    LOG.info("  original population size: " + population.getPersons().size());    int cleaned=0;    for (    Id<Person> id : locationlessPersons.keySet()) {      population.getPersons().remove(id);      cleaned++;      sc.getPopulation().getPersonAttributes().removeAllAttributes(id.toString());      for (      Id<Household> hhid : sc.getHouseholds().getHouseholds().keySet()) {        List<Id<Person>> memberIds=sc.getHouseholds().getHouseholds().get(hhid).getMemberIds();        if (memberIds.contains(id)) {          memberIds.remove(id);        }      }    }    LOG.info("  new population size: " + population.getPersons().size() + " ("+ cleaned+ " removed)");  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UMULL");  translateAll(environment,instruction,"UMULL",instructions);}  }
class C{  public static void loadSubjAbbvChanges(Long sessionId){  subjChanges=SubjectHistory.getSubjectHistoryList(sessionId);}  }
class C{  public static SelectorProvider create(){  String osname=AccessController.doPrivileged(new GetPropertyAction("os.name"));  if (osname.equals("SunOS"))   return createProvider("sun.nio.ch.DevPollSelectorProvider");  if (osname.equals("Linux"))   return createProvider("sun.nio.ch.EPollSelectorProvider");  return new sun.nio.ch.PollSelectorProvider();}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.characters(ch,start,length);}  }
class C{  public PackedColorModel(ColorSpace space,int bits,int rmask,int gmask,int bmask,int amask,boolean isAlphaPremultiplied,int trans,int transferType){  super(bits,PackedColorModel.createBitsArray(rmask,gmask,bmask,amask),space,(amask == 0 ? false : true),isAlphaPremultiplied,trans,transferType);  if (space.getType() != ColorSpace.TYPE_RGB) {    throw new IllegalArgumentException("ColorSpace must be TYPE_RGB.");  }  maskArray=new int[numComponents];  maskOffsets=new int[numComponents];  scaleFactors=new float[numComponents];  DecomposeMask(rmask,0,"red");  DecomposeMask(gmask,1,"green");  DecomposeMask(bmask,2,"blue");  if (amask != 0) {    DecomposeMask(amask,3,"alpha");    if (nBits[3] == 1) {      transparency=Transparency.BITMASK;    }  }}  }
class C{  @Override public void incrementAccessCount(){  accessCount.incrementAndGet();}  }
class C{  public AutoFixEffect(float scale){  if (scale < 0.0f)   scale=0.0f;  if (scale > 1.0f)   scale=1.0f;  this.scale=scale;}  }
class C{  public static String outputNestedList(NestedList nl,int depth){  String result="";  if (nl == null) {    return result;  }  for (int i=0; i < depth; i++) {    result+=" ";  }  if (nl.getClass() == NestedListElement.class) {    result+=nl.getText();  } else {    result+="---";    for (    NestedList nl2 : ((NestedListContainer)nl).getNestedLists()) {      result+="\n" + outputNestedList(nl2,depth + 1);    }  }  return result;}  }
class C{  final int dec(int i){  return ((i == 0) ? items.length : i) - 1;}  }
class C{  private static byte[] prefixKey(String profile,String entity){  byte[] profileBytes=Bytes.toBytes(profile);  byte[] entityBytes=Bytes.toBytes(entity);  return ByteBuffer.allocate(profileBytes.length + entityBytes.length).put(profileBytes).put(entityBytes).array();}  }
class C{  public static void assertEqualsWithRelativeErrorOrBothNaN(String message,double expected,double actual){  if (expected == actual) {    return;  }  if (Double.isNaN(expected) && !Double.isNaN(actual)) {    throw new AssertionFailedError(message + " expected: <" + expected+ "> but was: <"+ actual+ ">");  }  if (!Double.isNaN(expected) && Double.isNaN(actual)) {    throw new AssertionFailedError(message + " expected: <" + expected+ "> but was: <"+ actual+ ">");  }  double relativeError;  if (Math.abs(actual) > Math.abs(expected)) {    relativeError=Math.abs((expected - actual) / actual);  } else {    relativeError=Math.abs((expected - actual) / expected);  }  if (relativeError > MAX_RELATIVE_ERROR) {    throw new AssertionFailedError(message + " expected: <" + expected+ "> but was: <"+ actual+ ">");  }}  }
class C{  public synchronized void renderDataForProjection(Projection proj,java.awt.Graphics g){  fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);  if (proj == null) {    logger.info("null projection!");    return;  } else {    setTargetIndex(proj.getScale());    Layer layer=getAppropriateLayer();    layer.renderDataForProjection(proj,g);  }}  }
class C{  private void prepareSingleSnapshotData(){  ArrayList<DataObject> newObjectsToBeCreated=new ArrayList<DataObject>();  StorageSystem system=new StorageSystem();  URI systemURI=URIUtil.createId(StorageSystem.class);  system.setId(systemURI);  system.setSystemType(DiscoveredDataObject.Type.vnxblock.name());  newObjectsToBeCreated.add(system);  for (int i=0; i < SNAPSHOT_COUNT; i++) {    BlockSnapshot snapshot=new BlockSnapshot();    URI snapshotURI=URIUtil.createId(BlockSnapshot.class);    snapshot.setId(snapshotURI);    snapshot.setLabel(BASE_SNAPSHOT_NAME + i);    snapshot.setSnapsetLabel(snapshot.getLabel());    URI projectURI=URIUtil.createId(Project.class);    snapshot.setProject(new NamedURI(projectURI,PROJECT_NAME));    URI parentURI=URIUtil.createId(Volume.class);    snapshot.setParent(new NamedURI(parentURI,PARENT_NAME + i));    snapshot.setSettingsInstance(BASE_SETTINGS_INSTANCE + i);    snapshot.setStorageController(systemURI);    newObjectsToBeCreated.add(snapshot);  }  system=new StorageSystem();  systemURI=URIUtil.createId(StorageSystem.class);  system.setId(systemURI);  system.setSystemType(DiscoveredDataObject.Type.vmax.name());  system.setFirmwareVersion(VMAX3_SYSTEM_FW_VERSION);  newObjectsToBeCreated.add(system);  for (int i=0; i < SNAPVX_SNAPSHOT_COUNT; i++) {    BlockSnapshot snapshot=new BlockSnapshot();    URI snapshotURI=URIUtil.createId(BlockSnapshot.class);    snapshot.setId(snapshotURI);    snapshot.setLabel(BASE_SNAPVX_SNAPSHOT_NAME + i);    snapshot.setSnapsetLabel(snapshot.getLabel());    URI projectURI=URIUtil.createId(Project.class);    snapshot.setProject(new NamedURI(projectURI,PROJECT_NAME));    URI parentURI=URIUtil.createId(Volume.class);    snapshot.setParent(new NamedURI(parentURI,PARENT_NAME + i));    snapshot.setSettingsInstance(BASE_SETTINGS_INSTANCE + i);    snapshot.setStorageController(systemURI);    newObjectsToBeCreated.add(snapshot);    _linkedTargetsMap.put(snapshotURI.toString(),snapshot);  }  _dbClient.createObject(newObjectsToBeCreated);}  }
class C{  @Override public boolean afterSampling(Sampler<?,?,?> sampler,SampledVertexDecorator<?> vertex){  int n=sampler.getNumSampledVertices();  if (n > prevN) {    if (n < 200) {      if (n % 10 == 0)       dump(sampler);    } else     if (n < 1000) {      if (n % 100 == 0)       dump(sampler);    } else     if (n < 10000) {      if (n % 1000 == 0)       dump(sampler);    } else {      if (n % 5000 == 0)       dump(sampler);    }  }  prevN=n;  return true;}  }
class C{  public static OriginalEntityLoadInfo create(Entity entity){  Objects.requireNonNull(entity,"entity is null");  Metadata metadata=AppBeans.get(Metadata.NAME);  MetaClass metaClass=metadata.getSession().getClassNN(entity.getClass());  MetaClass originalMetaClass=metadata.getExtendedEntities().getOriginalMetaClass(metaClass);  if (originalMetaClass != null) {    metaClass=originalMetaClass;  }  MetaProperty primaryKeyProperty=metadata.getTools().getPrimaryKeyProperty(metaClass);  boolean stringKey=primaryKeyProperty != null && primaryKeyProperty.getJavaType().equals(String.class);  return new OriginalEntityLoadInfo((UUID)entity.getId(),metaClass,stringKey);}  }
class C{  protected AbstractHashedMap(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 1) {    throw new IllegalArgumentException("Initial capacity must be greater than 0");  }  if (loadFactor <= 0.0f || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Load factor must be greater than 0");  }  this.loadFactor=loadFactor;  initialCapacity=calculateNewCapacity(initialCapacity);  this.threshold=calculateThreshold(initialCapacity,loadFactor);  this.data=new HashEntry[initialCapacity];  init();}  }
class C{  public <BeanType extends ConfiguredBean>BeanType createBeanFromJSON(final Class<BeanType> clazz,final String json) throws ConfigException {  try {    final BeanType bean=jsonMapper.readValue(json,clazz);    return bean;  } catch (  final Exception e) {    throw new ConfigException("Failed to deserialize bean: " + clazz,e);  }}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  Instances instances;  if (!isFirstBatchDone()) {    if (m_Seed > 0) {      getInputFormat().randomize(new Random(m_Seed));    }    if (!m_Inverse) {      instances=getInputFormat().testCV(m_NumFolds,m_Fold - 1);    } else {      instances=getInputFormat().trainCV(m_NumFolds,m_Fold - 1);    }  } else {    instances=getInputFormat();  }  flushInput();  for (int i=0; i < instances.numInstances(); i++) {    push(instances.instance(i));  }  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public static void xtLong(Context context,CharSequence text){  Toast.makeText(context,text,Toast.LENGTH_LONG).show();}  }
class C{  public Object parse(URL url,Map params){  return parseURL(url,params);}  }
class C{  public String toValue(){  return value;}  }
class C{  private boolean isExcluded(File dir){  for (  File file : deselected) {    if (FileUtils.isAncestor(file,dir)) {      return true;    }  }  return false;}  }
class C{  @Override public byte ID(){  return 6;}  }
class C{  public static void splitAfter(final INaviView view,final INaviCodeNode originalNode,final INaviInstruction instruction){  final Iterable<INaviInstruction> oldInstructions=originalNode.getInstructions();  if (instruction == Iterables.getLast(oldInstructions)) {    return;  }  final List<INaviInstruction> upperInstructions=new ArrayList<INaviInstruction>();  final List<INaviInstruction> lowerInstructions=new ArrayList<INaviInstruction>();  List<INaviInstruction> currentInstructions=upperInstructions;  for (  final INaviInstruction oldInstruction : oldInstructions) {    currentInstructions.add(oldInstruction);    if (oldInstruction == instruction) {      currentInstructions=lowerInstructions;    }  }  INaviFunction parentFunction=null;  try {    parentFunction=originalNode.getParentFunction();  } catch (  final MaybeNullException e) {  }  final INaviCodeNode newNode1=view.getContent().createCodeNode(parentFunction,upperInstructions);  final INaviCodeNode newNode2=view.getContent().createCodeNode(parentFunction,lowerInstructions);  newNode1.setColor(originalNode.getColor());  newNode1.setBorderColor(originalNode.getBorderColor());  newNode2.setColor(originalNode.getColor());  transferLocalCodeNodeComments(originalNode,newNode1,newNode2);  view.getContent().createEdge(newNode1,newNode2,EdgeType.JUMP_UNCONDITIONAL);  for (  final INaviEdge incomingEdge : originalNode.getIncomingEdges()) {    view.getContent().createEdge(incomingEdge.getSource(),newNode1,incomingEdge.getType());  }  for (  final INaviEdge outgoingEdge : originalNode.getOutgoingEdges()) {    view.getContent().createEdge(newNode2,outgoingEdge.getTarget(),outgoingEdge.getType());  }  view.getContent().deleteNode(originalNode);}  }
class C{  public String realm(){  return realm;}  }
class C{  public static double inverseErf(double z){  return pointNormal(0.5 * z + 0.5) / Math.sqrt(2.0);}  }
class C{  @Override public RegisterOperand nextElement(){  if (current != null) {    LiveSetElement ret=current;    current=current.getNext();    return ret.getRegisterOperand();  } else {    throw new NoSuchElementException("LiveSetEnumerator");  }}  }
class C{  public final void check(final Predicate4<P,P2,P3,T> property){  final TheoryRunner<Tuple4<P,P2,P3,T>,Tuple4<P,P2,P3,T>> qc=new TheoryRunner<>(this.state.get(),ps,null,Function.identity(),ps);  qc.check(null);}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0);}  }
class C{  public String previous(){  append("PREVIOUS PAGE button pressed");  int first=data.getFirst();  scroll(first - data.getRows());  return (null);}  }
class C{  public static String parse(final BluetoothGattCharacteristic characteristic){  final int value=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,0);switch (value) {case 0:    return "No Alert";case 1:  return "Mild Alert";case 2:return "High Alert";default :return "Reserved value (" + value + ")";}}  }
class C{  public void startQueue(){  log.info("Starting job queue for {}",queueName);  try {    queue=coordinator.getQueue(queueName,consumer,new JobSerializer(),DEFAULT_MAX_THREADS);  } catch (  Exception e) {    log.error("can not startup job queue for {}",queueName,e);  }}  }
class C{  @Override public void destroy(){}  }
class C{  public static Account generateRandomAccountWithoutPrivateKey(){  return createPublicOnlyKeyAccount(generateRandomAccount());}  }
class C{  @Override public void init(){  if (_lifecycle.isAfterInit()) {    return;  }  start();  _lifecycle.waitForActive(10000);}  }
class C{  public static List<File> findAll(File baseFile,String regex){  ArrayList<File> found=new ArrayList<File>();  findAll(baseFile,regex,found);  return found;}  }
class C{  public void testCollisions() throws Exception {  Map<Integer,Set<UUID>> map=new HashMap<>();  Collection<UUID> nodes=new LinkedHashSet<>();  while (nodes.size() < 10) {    UUID uuid=UUID.randomUUID();    int hashCode=uuid.hashCode();    Set<UUID> set=map.get(hashCode);    if (set == null)     map.put(hashCode,set=new LinkedHashSet<>());    set.add(uuid);    if (set.size() > 1)     nodes.addAll(set);  }  map.clear();  GridClientConsistentHash<UUID> hash=new GridClientConsistentHash<>();  hash.addNodes(nodes,REPLICAS);  boolean fail=false;  for (  UUID exp : nodes) {    UUID act=hash.node(0,Arrays.asList(exp));    if (exp.equals(act))     info("Validation succeed [exp=" + exp + ", act="+ act+ ']'); else {      info("Validation failed  [exp=" + exp + ", act="+ act+ ']');      fail=true;    }  }  if (fail)   fail("Failed to resolve consistent hash node, when node's hash codes collide: " + nodes);}  }
class C{  public int skipContacts(int numberOfContacts){  return skipElements(numberOfContacts,RDE_CONTACT_URI,"contact");}  }
class C{  @Override public void onNothingSelected(){  mHolder.onNothingSelected();}  }
class C{  public static void addEndpoint(String region,String domain){  regionMap.put(region,domain);  try {    DefaultProfile.addEndpoint(region,region,"BatchCompute",domain);  } catch (  ClientException e) {    e.printStackTrace();  }}  }
class C{  public char[] readableName(){  char[] readableName;  if (isMemberType()) {    readableName=CharOperation.concat(enclosingType().readableName(),this.sourceName,'.');  } else {    readableName=CharOperation.concatWith(this.compoundName,'.');  }  TypeVariableBinding[] typeVars;  if ((typeVars=typeVariables()) != Binding.NO_TYPE_VARIABLES) {    StringBuffer nameBuffer=new StringBuffer(10);    nameBuffer.append(readableName).append('<');    for (int i=0, length=typeVars.length; i < length; i++) {      if (i > 0)       nameBuffer.append(',');      nameBuffer.append(typeVars[i].readableName());    }    nameBuffer.append('>');    int nameLength=nameBuffer.length();    readableName=new char[nameLength];    nameBuffer.getChars(0,nameLength,readableName,0);  }  return readableName;}  }
class C{  public Location(String zoneName,int level,int x,int y){  this.zoneName=zoneName;  this.level=level;  this.x=x;  this.y=y;}  }
class C{  public final boolean oneIteration() throws Exception {  buildJMSResources();  incIterations();  return true;}  }
class C{  public void merge(CallChainInfo other){  if (method != other.method)   throw new RuntimeException("methods don't match: " + method + ", "+ other.method+ " "+ method.equals(other.method)+ " "+ method.hashCode()+ " "+ other.method.hashCode());  if (contents.length == 0) {    contents=other.contents;    return;  } else   if (other.contents.length == 0) {    return;  }  List<CallChainInfo> ccis=new ArrayList<CallChainInfo>(Arrays.asList(contents));  Map<SootMethod,CallChainInfo> minfo=new HashMap<SootMethod,CallChainInfo>();  for (  CallChainInfo cci : contents)   minfo.put(cci.method,cci);  for (  CallChainInfo other_cci : other.contents) {    CallChainInfo cci=minfo.get(other_cci.method);    if (cci == null)     ccis.add(other_cci); else     cci.merge(other_cci);  }  if (contents.length == ccis.size())   logger.info("merge: {} old/new size = {}",method,ccis.size()); else   logger.info("merge: {} orig {} elems, new {} elems",method,contents.length,ccis.size());  contents=ccis.toArray(new CallChainInfo[0]);}  }
class C{  public TreePath subPath(int start,int end){  return new TreePath(this.subList(start,end));}  }
class C{  private String normalizeCommandLine(String commandLine){  return commandLine.trim().replaceAll(PART_SEPARATOR + "+",PART_SEPARATOR);}  }
class C{  public static void export(String address){  if (address == null || address.length() == 0) {    throw new IllegalArgumentException("address not specified");  }  Perf perf=Perf.getPerf();  perf.createString(CONNECTOR_ADDRESS_COUNTER,1,Units.STRING.intValue(),address);}  }
class C{  public void testConnectOnceStrategy() throws Throwable {  ConnectionStrategy strategy=ConnectionStrategies.ONCE;  ConnectionStrategy.Attempt attempt=mock(ConnectionStrategy.Attempt.class);  strategy.attemptFailed(attempt);  verify(attempt).fail();}  }
class C{  public boolean isQtyPercentage(){  Object oo=get_Value(COLUMNNAME_IsQtyPercentage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.736 -0400",hash_original_method="47C1793FC370107B09B70CFDB1B2DA4E",hash_generated_method="BC3D1E61DAFDAE554A0EA697D826A9A7") @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(super.toString());  builder.append('{');  for (int i=0; i < delegates.length; i++) {    if (i > 0) {      builder.append(',');    }    builder.append(delegates[i]);  }  builder.append('}');  return builder.toString();}  }
class C{  protected final void advance(int amount){  cursor+=amount;}  }
class C{  public String rpop(final String key){  checkIsInMulti();  client.rpop(key);  return client.getBulkReply();}  }
class C{  public static void validate(CertPath path,PKIXParameters params) throws Exception {  CertPathValidator validator=CertPathValidator.getInstance("PKIX");  CertPathValidatorResult cpvr=validator.validate(path,params);}  }
class C{  public void animateVisibility(boolean visible){  if (mVisible != visible) {    mVisible=visible;    if (mAlphaAnimator != null) {      mAlphaAnimator.cancel();    }    mAlphaAnimator=ObjectAnimator.ofFloat(this,"alpha",visible ? 1f : 0f);    mAlphaAnimator.setDuration(visible ? 200 : 150);    mAlphaAnimator.start();  }}  }
class C{  public CertificateParsingException(String message){  super(message);}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (params != null) {    throw new InvalidAlgorithmParameterException("This cipher " + "does not accept any parameters");  }  engineInit(opmode,key,random);}  }
class C{  public static String serveImage(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  ServletContext application=session.getServletContext();  Delegator delegator=(Delegator)request.getAttribute("delegator");  Map<String,Object> parameters=UtilHttp.getParameterMap(request);  Debug.logInfo("Img UserAgent - " + request.getHeader("User-Agent"),module);  String dataResourceId=(String)parameters.get("imgId");  if (UtilValidate.isEmpty(dataResourceId)) {    String errorMsg="Error getting image record from db: " + " dataResourceId is empty";    Debug.logError(errorMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    return "error";  }  try {    GenericValue dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).cache().queryOne();    if (!"Y".equals(dataResource.getString("isPublic"))) {      GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");      if (userLogin == null) {        String errorMsg="You must be logged in to download the Data Resource with ID [" + dataResourceId + "]";        Debug.logError(errorMsg,module);        request.setAttribute("_ERROR_MESSAGE_",errorMsg);        return "error";      }      long contentAndRoleCount=EntityQuery.use(delegator).from("ContentAndRole").where("partyId",userLogin.get("partyId"),"dataResourceId",dataResourceId).queryCount();      if (contentAndRoleCount == 0) {        String errorMsg="You do not have permission to download the Data Resource with ID [" + dataResourceId + "], ie you are not associated with it.";        Debug.logError(errorMsg,module);        request.setAttribute("_ERROR_MESSAGE_",errorMsg);        return "error";      }    }    String mimeType=DataResourceWorker.getMimeType(dataResource);    String userAgent=request.getHeader("User-Agent");    if (userAgent.indexOf("MSIE") > -1) {      Debug.logInfo("Found MSIE changing mime type from - " + mimeType,module);      mimeType="application/octet-stream";    }    if (mimeType != null) {      response.setContentType(mimeType);    }    OutputStream os=response.getOutputStream();    DataResourceWorker.streamDataResource(os,delegator,dataResourceId,"",WebSiteWorker.getWebSiteId(request),UtilHttp.getLocale(request),application.getRealPath("/"));    os.flush();  } catch (  GenericEntityException e) {    String errMsg="Error downloading digital product content: " + e.toString();    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }catch (  GeneralException e) {    String errMsg="Error downloading digital product content: " + e.toString();    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }catch (  IOException e) {    String errMsg="Error downloading digital product content: " + e.toString();    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public GetAddons(boolean enabled,String... properties){  super();  addParameterToRequest("enabled",enabled);  addParameterToRequest("properties",properties);}  }
class C{  public final void deleteVariation(int varNo){  if (currentNode.verifyChildren(currentPos))   updateListener();  int nChild=currentNode.children.size();  if ((varNo < 0) || (varNo >= nChild))   return;  currentNode.children.remove(varNo);  if (varNo == currentNode.defaultChild) {    currentNode.defaultChild=0;  } else   if (varNo < currentNode.defaultChild) {    currentNode.defaultChild--;  }  updateListener();}  }
class C{  public static double[][] transpose(double[][] A){  double[][] B=new double[A[0].length][A.length];  for (int i=0; i < B.length; i++) {    for (int j=0; j < B[0].length; j++) {      B[i][j]=A[j][i];    }  }  return B;}  }
class C{  private static boolean isEventNode(final INaviCodeNode node,final TraceList eventList){  for (  final ITraceEvent traceEvent : eventList) {    final BreakpointAddress eventAddress=traceEvent.getOffset();    try {      if (node.getParentFunction().getModule() == eventAddress.getModule() && CCodeNodeHelpers.containsAddress(node,eventAddress.getAddress().getAddress())) {        return true;      }    } catch (    final MaybeNullException e) {    }  }  return false;}  }
class C{  public boolean isInterruptable(){  return interruptable;}  }
class C{  public void addAttributePrefixCondition(String namespaceURI,String name,String value){  _specificityC++;  addCondition(Condition.createAttributePrefixCondition(namespaceURI,name,value));}  }
class C{  private boolean cmd_save(){  KeyNamePair pp=(KeyNamePair)orderField.getSelectedItem();  if (pp != null && pp.getKey() > 0)   return cmd_saveOrder(pp.getKey());  pp=(KeyNamePair)invoiceField.getSelectedItem();  if (pp != null && pp.getKey() > 0)   return cmd_saveInvoice(pp.getKey());  pp=(KeyNamePair)projectField.getSelectedItem();  if (pp != null && pp.getKey() > 0)   return cmd_saveProject(pp.getKey());  log.log(Level.SEVERE,"Nothing selected");  return false;}  }
class C{  static void sleep(long ms,int ns) throws InterruptedException {  RVMThread.sleep(ms,ns);}  }
class C{  public int hashCode(){  return this.audio_sampling_rate.hashCode() + this.channelcount.hashCode() + this.quantization_bits.hashCode()+ this.block_align.hashCode();}  }
class C{  public void add(double... point){  this.points.add(point);  hull=null;  tris=null;}  }
class C{  public void addAnnotation(AnnotationValue annotationValue){  HashMap<ClassDescriptor,AnnotationValue> updatedAnnotations=new HashMap<ClassDescriptor,AnnotationValue>(fieldAnnotations);  updatedAnnotations.put(annotationValue.getAnnotationClass(),annotationValue);  fieldAnnotations=updatedAnnotations;  TypeQualifierApplications.updateAnnotations(this);}  }
class C{  protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  Range range=getRange();  List ticks=new ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  TextAnchor textAnchor;  if (edge == RectangleEdge.RIGHT) {    textAnchor=TextAnchor.CENTER_LEFT;  } else {    textAnchor=TextAnchor.CENTER_RIGHT;  }  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  int minorTickCount=this.tickUnit.getMinorTickCount();  double unit=getTickUnit().getSize();  double index=Math.ceil(calculateLog(getRange().getLowerBound()) / unit);  double start=index * unit;  double end=calculateLog(getUpperBound());  double current=start;  boolean hasTicks=(this.tickUnit.getSize() > 0.0) && !Double.isInfinite(start);  while (hasTicks && current <= end) {    double v=calculateValueNoINF(current);    if (range.contains(v)) {      ticks.add(new LogTick(TickType.MAJOR,v,createTickLabel(v),textAnchor));    }    double next=Math.pow(this.base,current + this.tickUnit.getSize());    for (int i=1; i < minorTickCount; i++) {      double minorV=v + i * ((next - v) / minorTickCount);      if (range.contains(minorV)) {        ticks.add(new LogTick(TickType.MINOR,minorV,null,textAnchor));      }    }    current=current + this.tickUnit.getSize();  }  return ticks;}  }
class C{  protected static BusinessDayConvention eurliborConvention(final Period p){switch (p.units()) {case Days:case Weeks:    return BusinessDayConvention.Following;case Months:case Years:  return BusinessDayConvention.ModifiedFollowing;default :throw new LibraryException("invalid time units");}}  }
class C{  public static void closeQuietly(Statement stmt){  try {    close(stmt);  } catch (  SQLException e) {  }}  }
class C{  public Map<Integer,Double> compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.936 -0500",hash_original_method="F6C0B77A6F010BA1F972A9366C7E6CE6",hash_generated_method="7E55AD8D0773EBBDA8B51AD34E5BAF6B") protected boolean createTunnelToProxy(HttpRoute route,int hop,HttpContext context) throws HttpException, IOException {  throw new UnsupportedOperationException("Proxy chains are not supported.");}  }
class C{  public boolean isFileTransferThumbnailSupported(){  return isFileTransferHttpSupported();}  }
class C{  @Override public boolean supportsExpressionsInOrderBy(){  debugCodeCall("supportsExpressionsInOrderBy");  return true;}  }
class C{  private void saveSharedFiles(List<String> sharedFiles,String handleId,StartRequest request){  int i=0;  if (sharedFiles == null || sharedFiles.size() == 0) {    return;  }  for (  String filename : sharedFiles) {    InputStream inputStream=request.getFile("sharedFileData_" + i,true);    fileManager.saveFile(handleId,filename,inputStream);    i++;  }}  }
class C{  public FeatureVector classify(int[] exampleFeatures,double[] exampleValues){  return new FeatureVector();}  }
class C{  public static String crypt(String key,String setting){  long constdatablock=0L;  byte[] cryptresult=new byte[13];  long keyword=0L;  if (key == null || setting == null)   return "*";  int keylen=key.length();  for (int i=0; i < 8; i++) {    keyword=(keyword << 8) | ((i < keylen) ? 2 * key.charAt(i) : 0);  }  long[] KS=des_setkey(keyword);  int salt=0;  for (int i=2; --i >= 0; ) {    char c=(i < setting.length()) ? setting.charAt(i) : '.';    cryptresult[i]=(byte)c;    salt=(salt << 6) | (0x00ff & A64TOI[c]);  }  long rsltblock=des_cipher(constdatablock,salt,25,KS);  cryptresult[12]=ITOA64[(((int)rsltblock) << 2) & 0x3f];  rsltblock>>=4;  for (int i=12; --i >= 2; ) {    cryptresult[i]=ITOA64[((int)rsltblock) & 0x3f];    rsltblock>>=6;  }  return new String(cryptresult,0,13,StandardCharsets.US_ASCII);}  }
class C{  public synchronized PrologMachineCopy loadMachine(Project.NameKey project,ObjectId rulesId) throws CompileException {  if (!enableProjectRules || project == null || rulesId == null) {    return defaultMachine;  }  Reference<? extends PrologMachineCopy> ref=machineCache.get(rulesId);  if (ref != null) {    PrologMachineCopy pmc=ref.get();    if (pmc != null) {      return pmc;    }    machineCache.remove(rulesId);    ref.enqueue();  }  gc();  PrologMachineCopy pcm=createMachine(project,rulesId);  MachineRef newRef=new MachineRef(rulesId,pcm,dead);  machineCache.put(rulesId,newRef);  return pcm;}  }
class C{  public int placeDirectionSensors(LayoutEditor panel){  int missingSignalsBB=0;  int missingSignalsTurnouts=0;  int missingSignalsLevelXings=0;  int errorCount=0;  if (panel == null) {    log.error("Null Layout Editor panel on call to 'placeDirectionSensors'");    return 1;  }  if (initializationNeeded) {    initializeBlocks();  }  if ((mForwardBlockingSensorName == null) || (mForwardBlockingSensorName.equals("")) || (mReverseBlockingSensorName == null)|| (mReverseBlockingSensorName.equals(""))) {    log.error("Missing direction sensor in Section " + getSystemName());    return 1;  }  LayoutBlockManager layoutBlockManager=jmri.InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class);  ConnectivityUtil cUtil=panel.getConnectivityUtil();  for (int i=0; i < mBlockEntries.size(); i++) {    Block cBlock=mBlockEntries.get(i);    LayoutBlock lBlock=layoutBlockManager.getByUserName(cBlock.getUserName());    ArrayList<PositionablePoint> anchorList=cUtil.getAnchorBoundariesThisBlock(cBlock);    for (int j=0; j < anchorList.size(); j++) {      PositionablePoint p=anchorList.get(j);      if ((!p.getEastBoundSignal().equals("")) && (!p.getWestBoundSignal().equals(""))) {        SignalHead sh=cUtil.getSignalHeadAtAnchor(p,cBlock,false);        if (sh == null) {          log.warn("Unexpected missing signal head at boundary of Block " + cBlock.getUserName());          errorCount++;        } else {          int direction=cUtil.getDirectionFromAnchor(mForwardEntryPoints,mReverseEntryPoints,p);          if (direction == EntryPoint.UNKNOWN) {            sh=cUtil.getSignalHeadAtAnchor(p,cBlock,true);            Block otherBlock=((p.getConnect1()).getLayoutBlock()).getBlock();            if (otherBlock == cBlock) {              otherBlock=((p.getConnect2()).getLayoutBlock()).getBlock();            }            if (getBlockSequenceNumber(cBlock) < getBlockSequenceNumber(otherBlock)) {              direction=EntryPoint.FORWARD;            } else {              direction=EntryPoint.REVERSE;            }          }          if (!checkDirectionSensor(sh,direction,ConnectivityUtil.OVERALL,cUtil)) {            errorCount++;          }        }      } else {        errorCount++;        missingSignalsBB++;      }    }    ArrayList<LevelXing> xingList=cUtil.getLevelCrossingsThisBlock(cBlock);    for (int k=0; k < xingList.size(); k++) {      LevelXing x=xingList.get(k);      LayoutBlock alBlock=((TrackSegment)x.getConnectA()).getLayoutBlock();      LayoutBlock blBlock=((TrackSegment)x.getConnectB()).getLayoutBlock();      LayoutBlock clBlock=((TrackSegment)x.getConnectC()).getLayoutBlock();      LayoutBlock dlBlock=((TrackSegment)x.getConnectD()).getLayoutBlock();      if (cUtil.isInternalLevelXingAC(x,cBlock)) {        if (((x.getSignalAName() != null) && (!x.getSignalAName().equals(""))) || ((x.getSignalCName() != null) && (!x.getSignalCName().equals("")))) {          if ((x.getSignalAName() != null) && (!x.getSignalAName().equals(""))) {            TrackNode tn=new TrackNode(x,LayoutEditor.LEVEL_XING_A,(TrackSegment)x.getConnectA(),false,0);            TrackNode altNode=new TrackNode(x,LayoutEditor.LEVEL_XING_C,(TrackSegment)x.getConnectC(),false,0);            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalAName());            if (!setDirectionSensorByConnectivity(tn,altNode,sh,cBlock,cUtil)) {              errorCount++;            }          }          if ((x.getSignalCName() != null) && (!x.getSignalCName().equals(""))) {            TrackNode tn=new TrackNode(x,LayoutEditor.LEVEL_XING_C,(TrackSegment)x.getConnectC(),false,0);            TrackNode altNode=new TrackNode(x,LayoutEditor.LEVEL_XING_A,(TrackSegment)x.getConnectA(),false,0);            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalCName());            if (!setDirectionSensorByConnectivity(tn,altNode,sh,cBlock,cUtil)) {              errorCount++;            }          }        }      } else       if (alBlock == lBlock) {        int direction=getDirectionForBlocks(alBlock,clBlock);        if (direction != EntryPoint.UNKNOWN) {          if ((x.getSignalCName() != null) && (!x.getSignalCName().equals(""))) {            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalCName());            if (!checkDirectionSensor(sh,direction,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }          }        } else {          errorCount++;        }      } else       if (clBlock == lBlock) {        int direction=getDirectionForBlocks(clBlock,alBlock);        if (direction != EntryPoint.UNKNOWN) {          if ((x.getSignalAName() != null) && (!x.getSignalAName().equals(""))) {            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalAName());            if (!checkDirectionSensor(sh,direction,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }          }        } else {          errorCount++;        }      }      if (cUtil.isInternalLevelXingBD(x,cBlock)) {        if (((x.getSignalBName() != null) && (!x.getSignalBName().equals(""))) || ((x.getSignalDName() != null) && (!x.getSignalDName().equals("")))) {          if ((x.getSignalBName() != null) && (!x.getSignalBName().equals(""))) {            TrackNode tn=new TrackNode(x,LayoutEditor.LEVEL_XING_B,(TrackSegment)x.getConnectB(),false,0);            TrackNode altNode=new TrackNode(x,LayoutEditor.LEVEL_XING_D,(TrackSegment)x.getConnectD(),false,0);            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalBName());            if (!setDirectionSensorByConnectivity(tn,altNode,sh,cBlock,cUtil)) {              errorCount++;            }          }          if ((x.getSignalDName() != null) && (!x.getSignalDName().equals(""))) {            TrackNode tn=new TrackNode(x,LayoutEditor.LEVEL_XING_D,(TrackSegment)x.getConnectD(),false,0);            TrackNode altNode=new TrackNode(x,LayoutEditor.LEVEL_XING_B,(TrackSegment)x.getConnectB(),false,0);            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalDName());            if (!setDirectionSensorByConnectivity(tn,altNode,sh,cBlock,cUtil)) {              errorCount++;            }          }        }      } else       if (blBlock == lBlock) {        int direction=getDirectionForBlocks(blBlock,dlBlock);        if (direction != EntryPoint.UNKNOWN) {          if ((x.getSignalDName() != null) && (!x.getSignalDName().equals(""))) {            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalDName());            if (!checkDirectionSensor(sh,direction,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }          }        } else {          errorCount++;        }      } else       if (dlBlock == lBlock) {        int direction=getDirectionForBlocks(dlBlock,blBlock);        if (direction != EntryPoint.UNKNOWN) {          if ((x.getSignalBName() != null) && (!x.getSignalBName().equals(""))) {            SignalHead sh=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(x.getSignalBName());            if (!checkDirectionSensor(sh,direction,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }          }        } else {          errorCount++;        }      }    }    ArrayList<LayoutTurnout> turnoutList=cUtil.getLayoutTurnoutsThisBlock(cBlock);    for (int m=0; m < turnoutList.size(); m++) {      LayoutTurnout t=turnoutList.get(m);      if (cUtil.layoutTurnoutHasRequiredSignals(t)) {        if ((t.getLinkType() == LayoutTurnout.NO_LINK) && ((t.getTurnoutType() == LayoutTurnout.RH_TURNOUT) || (t.getTurnoutType() == LayoutTurnout.LH_TURNOUT) || (t.getTurnoutType() == LayoutTurnout.WYE_TURNOUT))) {          int direction=getDirectionStandardTurnout(t,cUtil);          int altDirection=EntryPoint.FORWARD;          if (direction == EntryPoint.FORWARD) {            altDirection=EntryPoint.REVERSE;          }          if (direction == EntryPoint.UNKNOWN) {            errorCount++;          } else {            SignalHead aHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalA1Name());            SignalHead a2Head=null;            String a2Name=t.getSignalA2Name();            if ((a2Name != null) && (!a2Name.equals(""))) {              a2Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(a2Name);            }            SignalHead bHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalB1Name());            SignalHead cHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC1Name());            if (t.getLayoutBlock().getBlock() == cBlock) {              if (!checkDirectionSensor(aHead,direction,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }              if (a2Head != null) {                if (!checkDirectionSensor(a2Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }              }              if (!checkDirectionSensor(bHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }              if (!checkDirectionSensor(cHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }            } else {              if (((TrackSegment)t.getConnectA()).getLayoutBlock().getBlock() == cBlock) {                if (!checkDirectionSensor(bHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }                if (!checkDirectionSensor(cHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }              } else               if (((t.getContinuingSense() == Turnout.CLOSED) && (((TrackSegment)t.getConnectB()).getLayoutBlock().getBlock() == cBlock)) || ((t.getContinuingSense() == Turnout.THROWN) && (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock))) {                if (a2Head == null) {                  if (!checkDirectionSensor(aHead,direction,ConnectivityUtil.CONTINUING,cUtil)) {                    errorCount++;                  }                } else {                  if (!checkDirectionSensor(aHead,direction,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                }                if (!checkDirectionSensor(bHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }              } else               if (((t.getContinuingSense() == Turnout.CLOSED) && (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock)) || ((t.getContinuingSense() == Turnout.THROWN) && (((TrackSegment)t.getConnectB()).getLayoutBlock().getBlock() == cBlock))) {                if (a2Head == null) {                  if (!checkDirectionSensor(aHead,direction,ConnectivityUtil.DIVERGING,cUtil)) {                    errorCount++;                  }                } else {                  if (!checkDirectionSensor(a2Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                }                if (!checkDirectionSensor(cHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }              }            }          }        } else         if (t.getLinkType() != LayoutTurnout.NO_LINK) {          LayoutTurnout tLinked=getLayoutTurnoutFromTurnoutName(t.getLinkedTurnoutName(),panel);          if (tLinked == null) {            log.error("null Layout Turnout linked to turnout " + t.getTurnout().getSystemName());          } else           if (t.getLinkType() == LayoutTurnout.THROAT_TO_THROAT) {            SignalHead b1Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalB1Name());            SignalHead b2Head=null;            String hName=t.getSignalB2Name();            if ((hName != null) && (!hName.equals(""))) {              b2Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);            }            SignalHead c1Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC1Name());            SignalHead c2Head=null;            hName=t.getSignalC2Name();            if ((hName != null) && (!hName.equals(""))) {              c2Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);            }            int direction=getDirectionStandardTurnout(t,cUtil);            int altDirection=EntryPoint.FORWARD;            if (direction == EntryPoint.FORWARD) {              altDirection=EntryPoint.REVERSE;            }            if (direction != EntryPoint.UNKNOWN) {              if (t.getLayoutBlock().getBlock() == cBlock) {                if (!checkDirectionSensor(b1Head,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }                if (b2Head != null) {                  if (!checkDirectionSensor(b2Head,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                }                if (!checkDirectionSensor(c1Head,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }                if (c2Head != null) {                  if (!checkDirectionSensor(c2Head,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                }              } else {                b1Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(tLinked.getSignalB1Name());                hName=tLinked.getSignalB2Name();                b2Head=null;                if ((hName != null) && (!hName.equals(""))) {                  b2Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);                }                c1Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(tLinked.getSignalC1Name());                c2Head=null;                hName=tLinked.getSignalC2Name();                if ((hName != null) && (!hName.equals(""))) {                  c2Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);                }                if (((t.getContinuingSense() == Turnout.CLOSED) && (((TrackSegment)t.getConnectB()).getLayoutBlock().getBlock() == cBlock)) || ((t.getContinuingSense() == Turnout.THROWN) && (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock))) {                  if (b2Head != null) {                    if (!checkDirectionSensor(b1Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                      errorCount++;                    }                  } else {                    if (!checkDirectionSensor(b1Head,direction,ConnectivityUtil.CONTINUING,cUtil)) {                      errorCount++;                    }                  }                  if (c2Head != null) {                    if (!checkDirectionSensor(c1Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                      errorCount++;                    }                  } else {                    if (!checkDirectionSensor(c1Head,direction,ConnectivityUtil.CONTINUING,cUtil)) {                      errorCount++;                    }                  }                } else                 if (((t.getContinuingSense() == Turnout.CLOSED) && (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock)) || ((t.getContinuingSense() == Turnout.THROWN) && (((TrackSegment)t.getConnectB()).getLayoutBlock().getBlock() == cBlock))) {                  if (b2Head != null) {                    if (!checkDirectionSensor(b2Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                      errorCount++;                    }                  } else {                    if (!checkDirectionSensor(b1Head,direction,ConnectivityUtil.DIVERGING,cUtil)) {                      errorCount++;                    }                  }                  if (c2Head != null) {                    if (!checkDirectionSensor(c2Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                      errorCount++;                    }                  } else {                    if (!checkDirectionSensor(c1Head,direction,ConnectivityUtil.DIVERGING,cUtil)) {                      errorCount++;                    }                  }                }              }            }          } else           if (t.getLinkType() == LayoutTurnout.FIRST_3_WAY) {            SignalHead a1Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalA1Name());            SignalHead a2Head=null;            String hName=t.getSignalA2Name();            if ((hName != null) && (!hName.equals(""))) {              a2Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);            }            SignalHead a3Head=null;            hName=t.getSignalA3Name();            if ((hName != null) && (!hName.equals(""))) {              a3Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);            }            SignalHead cHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC1Name());            int direction=getDirectionStandardTurnout(t,cUtil);            int altDirection=EntryPoint.FORWARD;            if (direction == EntryPoint.FORWARD) {              altDirection=EntryPoint.REVERSE;            }            if (direction != EntryPoint.UNKNOWN) {              if (t.getLayoutBlock().getBlock() == cBlock) {                if (!checkDirectionSensor(a1Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }                if ((a2Head != null) && (a3Head != null)) {                  if (!checkDirectionSensor(a2Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                  if (!checkDirectionSensor(a3Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                }                if (!checkDirectionSensor(cHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }              } else {                if (((TrackSegment)t.getConnectA()).getLayoutBlock().getBlock() == cBlock) {                  if (!checkDirectionSensor(cHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                } else                 if (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock) {                  if (a2Head != null) {                    if (!checkDirectionSensor(a2Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                      errorCount++;                    }                  } else {                    if (!checkDirectionSensor(a1Head,direction,ConnectivityUtil.DIVERGING,cUtil)) {                      errorCount++;                    }                  }                }              }            }          } else           if (t.getLinkType() == LayoutTurnout.SECOND_3_WAY) {            SignalHead bHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalB1Name());            SignalHead cHead=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC1Name());            SignalHead a1Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(tLinked.getSignalA1Name());            SignalHead a3Head=null;            String hName=tLinked.getSignalA3Name();            if ((hName != null) && (!hName.equals(""))) {              a3Head=InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(hName);            }            int direction=getDirectionStandardTurnout(t,cUtil);            int altDirection=EntryPoint.FORWARD;            if (direction == EntryPoint.FORWARD) {              altDirection=EntryPoint.REVERSE;            }            if (direction != EntryPoint.UNKNOWN) {              if (t.getLayoutBlock().getBlock() == cBlock) {                if (!checkDirectionSensor(bHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }                if (!checkDirectionSensor(cHead,altDirection,ConnectivityUtil.OVERALL,cUtil)) {                  errorCount++;                }              }              if (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock) {                if (a3Head != null) {                  if (!checkDirectionSensor(a3Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                } else {                  log.warn("Turnout " + tLinked.getTurnoutName() + " - SSL for head "+ a1Head.getSystemName()+ " cannot handle direction sensor for second diverging track.");                  errorCount++;                }              } else               if (((TrackSegment)t.getConnectB()).getLayoutBlock().getBlock() == cBlock) {                if (a3Head != null) {                  if (!checkDirectionSensor(a1Head,direction,ConnectivityUtil.OVERALL,cUtil)) {                    errorCount++;                  }                } else {                  if (!checkDirectionSensor(a1Head,direction,ConnectivityUtil.CONTINUING,cUtil)) {                    errorCount++;                  }                }              }            }          }        } else         if ((t.getTurnoutType() == LayoutTurnout.RH_XOVER) || (t.getTurnoutType() == LayoutTurnout.LH_XOVER) || (t.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER)) {          int direction=getDirectionXoverTurnout(t,cUtil);          int altDirection=EntryPoint.FORWARD;          if (direction == EntryPoint.FORWARD) {            altDirection=EntryPoint.REVERSE;          }          if (direction == EntryPoint.UNKNOWN) {            errorCount++;          } else {            if (((TrackSegment)t.getConnectA()).getLayoutBlock().getBlock() == cBlock) {              if ((t.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER) || (t.getTurnoutType() == LayoutTurnout.RH_XOVER)) {                if (!placeSensorInCrossover(t.getSignalB1Name(),t.getSignalB2Name(),t.getSignalC1Name(),t.getSignalC2Name(),altDirection,cUtil)) {                  errorCount++;                }              } else {                if (!placeSensorInCrossover(t.getSignalB1Name(),t.getSignalB2Name(),null,null,altDirection,cUtil)) {                  errorCount++;                }              }            }            if (((TrackSegment)t.getConnectB()).getLayoutBlock().getBlock() == cBlock) {              if ((t.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER) || (t.getTurnoutType() == LayoutTurnout.LH_XOVER)) {                if (!placeSensorInCrossover(t.getSignalA1Name(),t.getSignalA2Name(),t.getSignalD1Name(),t.getSignalD2Name(),direction,cUtil)) {                  errorCount++;                }              } else {                if (!placeSensorInCrossover(t.getSignalA1Name(),t.getSignalA2Name(),null,null,direction,cUtil)) {                  errorCount++;                }              }            }            if (((TrackSegment)t.getConnectC()).getLayoutBlock().getBlock() == cBlock) {              if ((t.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER) || (t.getTurnoutType() == LayoutTurnout.RH_XOVER)) {                if (!placeSensorInCrossover(t.getSignalD1Name(),t.getSignalD2Name(),t.getSignalA1Name(),t.getSignalA2Name(),direction,cUtil)) {                  errorCount++;                }              } else {                if (!placeSensorInCrossover(t.getSignalD1Name(),t.getSignalD2Name(),null,null,direction,cUtil)) {                  errorCount++;                }              }            }            if (((TrackSegment)t.getConnectD()).getLayoutBlock().getBlock() == cBlock) {              if ((t.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER) || (t.getTurnoutType() == LayoutTurnout.LH_XOVER)) {                if (!placeSensorInCrossover(t.getSignalC1Name(),t.getSignalC2Name(),t.getSignalB1Name(),t.getSignalB2Name(),altDirection,cUtil)) {                  errorCount++;                }              } else {                if (!placeSensorInCrossover(t.getSignalC1Name(),t.getSignalC2Name(),null,null,altDirection,cUtil)) {                  errorCount++;                }              }            }          }        } else         if (t.getTurnoutType() == LayoutTurnout.SINGLE_SLIP || t.getTurnoutType() == LayoutTurnout.DOUBLE_SLIP) {          int direction=getDirectionSlip((LayoutSlip)t,cUtil);          int altDirection=EntryPoint.FORWARD;          if (direction == EntryPoint.FORWARD) {            altDirection=EntryPoint.REVERSE;          }          if (direction == EntryPoint.UNKNOWN) {            errorCount++;          } else {            if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalA1Name()),altDirection,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }            if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalA2Name()),altDirection,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }            if (t.getTurnoutType() == LayoutTurnout.SINGLE_SLIP) {              if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalB1Name()),altDirection,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }            } else {              if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalB1Name()),altDirection,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }              if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalB2Name()),altDirection,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }            }            if (t.getTurnoutType() == LayoutTurnout.SINGLE_SLIP) {              if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC1Name()),direction,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }            } else {              if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC1Name()),direction,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }              if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalC2Name()),direction,ConnectivityUtil.OVERALL,cUtil)) {                errorCount++;              }            }            if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalD1Name()),direction,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }            if (!checkDirectionSensor(InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(t.getSignalD2Name()),direction,ConnectivityUtil.OVERALL,cUtil)) {              errorCount++;            }          }        } else {          log.error("Unknown turnout type for turnout " + t.getTurnout().getSystemName() + " in Section "+ getSystemName()+ ".");          errorCount++;        }      } else {        missingSignalsTurnouts++;      }    }  }  if ((missingSignalsBB + missingSignalsTurnouts + missingSignalsLevelXings) > 0) {    String s="Section - " + getSystemName();    String uname=getUserName();    if ((uname != null) && (!uname.equals(""))) {      s=s + "(" + uname+ ")";    }    if (missingSignalsBB > 0) {      s=s + ", " + (missingSignalsBB)+ " anchor point signal heads missing";    }    if (missingSignalsTurnouts > 0) {      s=s + ", " + (missingSignalsTurnouts)+ " turnouts missing signals";    }    if (missingSignalsLevelXings > 0) {      s=s + ", " + (missingSignalsLevelXings)+ " level crossings missing signals";    }    log.warn(s);  }  return errorCount;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Entity entityNode;  String publicId;  String systemId;  String notation;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entityNode=(Entity)entityList.getNamedItem("ent5");  publicId=entityNode.getPublicId();  assertEquals("publicId","entityURI",publicId);  systemId=entityNode.getSystemId();  assertURIEquals("systemId",null,null,null,"entityFile",null,null,null,null,systemId);  notation=entityNode.getNotationName();  assertEquals("notation","notation1",notation);}  }
class C{  public PreAuthTokenSourceTrustAuthenticationProvider(final List<String> authorizedSourceIps){  this.authorizedSourceIps=authorizedSourceIps;}  }
class C{  public Boolean isPssblDplct(){  return pssblDplct;}  }
class C{  private void reduceParseTree(CompilationUnitDeclaration unit){  TypeDeclaration[] types=unit.types;  for (int i=0, l=types == null ? 0 : types.length; i < l; i++)   purgeMethodStatements(types[i]);}  }
class C{  private Group groupParam2PO(GroupParam param,Group group,User currentUser) throws Exception {  transformer.param2PO(getClassT(),param,group,currentUser);  if (!StringUtils.isBlank(param.getResourceIds())) {    List<Resource> resources=resourceService.getAllByIds(transformer.idsStr2List(param.getResourceIds()));    group.setResources(transformer.list2Set(resources));  }  if (!StringUtils.isBlank(param.getRoleIds())) {    List<Role> roles=roleDomain.getAllByIds(transformer.idsStr2List(param.getRoleIds()));    group.setRoles(transformer.list2Set(roles));  }  return group;}  }
class C{  @Override public void modelRestored(Model model){}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this || (obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource)obj).cleanedUrl)));}  }
class C{  public static double min(double... M){  double min=M[0];  for (int i=1; i < M.length; i++)   min=Math.min(min,M[i]);  return min;}  }
class C{  private static Boolean isWarningIcon(final Label icon){  return !isErrorIcon(icon);}  }
class C{  @Override protected void launch(){  m_FileChooser=GUIHelper.newConverterFileChooser();  int retVal=m_FileChooser.showOpenDialog(null);  if (retVal != JFileChooser.APPROVE_OPTION)   return;  File file=m_FileChooser.getSelectedFile();  Instances data;  try {    data=m_FileChooser.getLoader().getDataSet();  } catch (  Exception e) {    JOptionPane.showMessageDialog(null,"Error loading file '" + file + "':\n"+ e,"Error",JOptionPane.ERROR_MESSAGE);    e.printStackTrace();    return;  }  data.setClassIndex(data.numAttributes() - 1);  ThresholdVisualizePanel vmc=new ThresholdVisualizePanel();  vmc.setROCString("(Area under PRC = " + Utils.doubleToString(ThresholdCurve.getPRCArea(data),4) + ")");  vmc.setName(data.relationName());  PlotData2D tempd=new PlotData2D(data);  tempd.setPlotName(data.relationName());  tempd.m_displayAllPoints=true;  boolean[] cp=new boolean[data.numInstances()];  for (int n=1; n < cp.length; n++)   cp[n]=true;  try {    tempd.setConnectPoints(cp);    vmc.addPlot(tempd);    if (data.attribute(ThresholdCurve.RECALL_NAME) != null)     vmc.setXIndex(data.attribute(ThresholdCurve.RECALL_NAME).index());    if (data.attribute(ThresholdCurve.PRECISION_NAME) != null)     vmc.setYIndex(data.attribute(ThresholdCurve.PRECISION_NAME).index());  } catch (  Exception e) {    JOptionPane.showMessageDialog(null,"Error adding plot:\n" + e,"Error",JOptionPane.ERROR_MESSAGE);    e.printStackTrace();    return;  }  MekaFrame frame=new MekaFrame();  frame.setTitle(getName());  frame.setDefaultCloseOperation(MekaFrame.DISPOSE_ON_CLOSE);  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(vmc);  frame.setSize(800,600);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public NotificationLoaderTask(URL serverUrl,NotificationLoaderFinishListener listener){  this.serverUrl=serverUrl;  this.listener=listener;}  }
class C{  public CloneFailedException(final String message){  super(message);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() + right.num());}  }
class C{  public FormFactory createFormFactory(){  return new SwingFormFactory();}  }
class C{  public AbstractRangeReading addRangeNoise(){  if (Double.isInfinite(getValue()))   return this;  final double adaptedRangeReading=Util.generateRandomDoubleBetween(getValue() - RANGE_NOISE,getValue() + RANGE_NOISE);  return new SimpleRangeReading(adaptedRangeReading,getAngle());}  }
class C{  @Override public String globalInfo(){  return "Takes RAndom partition of labELs; like RAkEL but labelsets are disjoint / non-overlapping subsets.";}  }
class C{  public void createFolder(int userId,ArchiveObject arch,FolderObject fdr,String entidad) throws Exception {  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    FolderMdoFdr.createFolder(userId,arch.getArchiveToken(),fdr.getFolderToken(),entidad);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }}  }
class C{  public BalloonLayout(Forest<V,E> g){  super(g);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void notifyDataSetInvalidated(){  super.notifyDataSetInvalidated();  mDataSetObservableExtended.notifyInvalidated();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private static void uaRowSumLtGe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumLtGeColSumGtLe(0.0,bv,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int cnt=(ai == 0) ? agg0 : sumRowSumLtGeColSumGtLe(ai,bv,bOp);    out.quickSetValue(i,0,cnt);  }}  }
class C{  protected void defineCreatures(final CreatureProtectionArea area,final ConfigurableFactoryContext ctx){  String s=ctx.getString("rules",null);  String clazz;  String subclazz;  boolean blocked;  StringTokenizer st;  int i;  if (s == null) {    return;  }  blocked=true;  st=new StringTokenizer(s," \n\t,");  while (st.hasMoreTokens()) {    s=st.nextToken();    if (s.length() == 0) {      continue;    }    if (s.charAt(0) == '-') {      blocked=true;      s=s.substring(1);    } else     if (s.charAt(0) == '+') {      blocked=false;      s=s.substring(1);    }    i=s.indexOf(':');    if (i != -1) {      clazz=s.substring(0,i);      subclazz=s.substring(i + 1);      if ((subclazz.length() == 0) || "*".equals(subclazz)) {        subclazz=null;      }    } else {      clazz=s;      subclazz=null;    }    if ((clazz.length() == 0) || "*".equals(clazz)) {      clazz=null;    }    area.add(clazz,subclazz,blocked);  }}  }
class C{  public static void connectionClosed(){  numConnections.getAndDecrement();}  }
class C{  private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){  if (matches(statusLine,x,y)) {    final String filename=statusLine.substring(3);    if (!container.contains(filename)) {      container.add(filename);    }    return true;  }  return false;}  }
class C{  protected void beginPath(){  prepDrawing();  mPSStream.println(NEWPATH_STR);  mPenX=0;  mPenY=0;}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  return map;}  }
class C{  @Override public void run(){  List<Span> dequeuedSpans=new ArrayList<Span>(maxSpanBatchSize);  long errorCount=0;  while (running.get() || queue.size() > 0) {    Span firstSpan=null;    try {      firstSpan=queue.poll(1,TimeUnit.SECONDS);      if (firstSpan != null) {        dequeuedSpans.add(firstSpan);        queue.drainTo(dequeuedSpans,maxSpanBatchSize - 1);      }    } catch (    InterruptedException ie) {    }    startClient();    if (dequeuedSpans.isEmpty()) {      continue;    }    try {      List<Event> events=new ArrayList<Event>(dequeuedSpans.size());      for (      Span span : dequeuedSpans) {        Map<String,String> headers=new HashMap<String,String>();        headers.put("SpanId",span.toString());        headers.put("TracerId",span.getTracerId());        headers.put("Description",span.getDescription());        String body=span.toJson();        Event evt=EventBuilder.withBody(body,Charset.forName("UTF-8"),headers);        events.add(evt);      }      flumeClient.appendBatch(events);      dequeuedSpans.clear();      errorCount=0;    } catch (    Exception e) {      errorCount+=1;      if (errorCount < MAX_ERRORS) {        try {          queue.addAll(dequeuedSpans);        } catch (        IllegalStateException ex) {          LOG.error("Drop " + dequeuedSpans.size() + " span(s) because writing to HBase failed.");        }      }      closeClient();      try {        Thread.sleep(500);      } catch (      InterruptedException e1) {      }    }  }  closeClient();}  }
class C{  public boolean isClickEnabled(){  return mClickEnabled;}  }
class C{  public static void move(String source,String target){  FilePath.get(source).moveTo(FilePath.get(target),false);}  }
class C{  private static void qualifyTarget(ASTNode target_node,Project project,String qualifier){  final PyElementGenerator generator=PyElementGenerator.getInstance(project);  target_node.addChild(generator.createDot(),target_node.getFirstChildNode());  target_node.addChild(sure(generator.createFromText(LanguageLevel.getDefault(),PyReferenceExpression.class,qualifier,new int[]{0,0}).getNode()),target_node.getFirstChildNode());}  }
class C{  public boolean isHardMode(){  return isHardMode;}  }
class C{  @Override public ListInstancesResult listClusterInstancesRequest(AmazonElasticMapReduceClient emrClient,ListInstancesRequest listInstancesRequest){  return emrClient.listInstances(listInstancesRequest);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.206 -0400",hash_original_method="552A0F275D497E7BD4574D885ADCD2D5",hash_generated_method="5265D0504BE114034C41A56C519080CB") public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  public ImagePortrayal2D(Class c,String resourceName,double scale){  this(new ImageIcon(c.getResource(resourceName)),scale);}  }
class C{  protected SymmetricMatrix secureSubtract(SymmetricMatrix a){  return new SymmetricMatrix(subtractComponents(a));}  }
class C{  public void add(String key,String value){  keys.add(key);  values.add(value);}  }
class C{  protected BaseVsoAuthentication(final VsoTokenScope tokenScope,final ICredentialStore personalAccessTokenStore,final ITokenStore adaRefreshTokenStore){  this(tokenScope,personalAccessTokenStore,new SecretCache("registry"),adaRefreshTokenStore,new VsoAzureAuthority());}  }
class C{  public void onRemoved(final StendhalRPZone zone){  if (this.zone != zone) {    logger.error("Entity removed from wrong zone " + zone + " but it thinks it is in "+ this.zone+ ": ",new Throwable());  }  this.zone=null;}  }
class C{  public static boolean isIdentifierKeyword(CharSequence text){  int pos=0;  int valuelen=text.length();  boolean keyword=false;switch (text.charAt(pos++)) {case '$':    if (valuelen == 1)     return false;  while (pos < valuelen) {    char c=text.charAt(pos++);    if (!isDecimalDigit(c))     return false;  }return true;case 'f':if (valuelen == 5 && text.charAt(pos++) == 'a' && text.charAt(pos++) == 'l' && text.charAt(pos++) == 's' && text.charAt(pos++) == 'e') {keyword=true;}break;case 'n':if (valuelen == 4 && text.charAt(pos++) == 'u' && text.charAt(pos++) == 'l' && text.charAt(pos++) == 'l') {keyword=true;} else if (valuelen == 3 && text.charAt(pos++) == 'a' && text.charAt(pos++) == 'n') {keyword=true;}break;case 't':if (valuelen == 4 && text.charAt(pos++) == 'r' && text.charAt(pos++) == 'u' && text.charAt(pos++) == 'e') {keyword=true;}break;}return keyword;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.676 -0500",hash_original_method="F8427D0E95C386EDB403D30E8B4BBEC5",hash_generated_method="54665CBF5720C1192EBEC39AEE8AD41A") public boolean isAssigned(){  return this.isAssigned;}  }
class C{  public AsyncResult RegisterServerAsync(RequestHeader RequestHeader,RegisteredServer Server){  RegisterServerRequest req=new RegisterServerRequest(RequestHeader,Server);  return channel.serviceRequestAsync(req);}  }
class C{  public SeatAdministration(Vehicle vehicle,SeatAssignmentRule rule){  this.vehicle=vehicle;  this.rule=rule;  this.sittingPersons=new ArrayList<Id>();  this.standingPersons=new ArrayList<Id>();}  }
class C{  public static String formatType(Connection conn,int pgType,int typeMod) throws SQLException {  PreparedStatement prep=conn.prepareStatement("select typname from pg_catalog.pg_type where oid = ? and typtypmod = ?");  prep.setInt(1,pgType);  prep.setInt(2,typeMod);  ResultSet rs=prep.executeQuery();  if (rs.next()) {    return rs.getString(1);  }  return null;}  }
class C{  @TargetApi(21) private void startRing(){  if (audio != null) {    audio.setRingerMode(AudioManager.RINGER_MODE_NORMAL);    audio.setStreamVolume(AudioManager.STREAM_RING,audio.getStreamMaxVolume(AudioManager.STREAM_RING),AudioManager.FLAG_PLAY_SOUND);    defaultRingtoneUri=RingtoneManager.getActualDefaultRingtoneUri(this,RingtoneManager.TYPE_RINGTONE);    if (defaultRingtoneUri != null) {      defaultRingtone=RingtoneManager.getRingtone(this,defaultRingtoneUri);      if (defaultRingtone != null) {        if (deviceInfo.getSdkVersion() >= Build.VERSION_CODES.LOLLIPOP) {          AudioAttributes attributes=new AudioAttributes.Builder().setUsage(AudioAttributes.USAGE_NOTIFICATION).setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION).build();          defaultRingtone.setAudioAttributes(attributes);        } else {          defaultRingtone.setStreamType(AudioManager.STREAM_NOTIFICATION);        }        defaultRingtone.play();      }    }  }}  }
class C{  private void loadStoredConsistFile(String fileName){  if (checkFile(getFileLocation() + fileName)) {    log.debug("Has " + fileName + " file.");    try {      readFile(getFileLocation() + fileName);    } catch (    Exception e) {      log.warn("error reading consist file: " + e);    }  } else {    log.debug("No " + fileName + " file, will check for default file.");    if (checkFile(defaultConsistFilename())) {      log.debug("Has default consist.xml file, will read it.");      try {        readFile();      } catch (      Exception e) {        log.warn("error reading consist file: " + e);      }    } else {      log.debug("No consist files found, will create if needed.");    }  }}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public Tuple2<LALR1CPState,List<CPGoToLink>> goToCP(Symbol symbol){  Set<LALR1CPItem> targetItems=set();  List<CPGoToLink> cpLinks=llist();  for (  LALR1CPItem source : items) {    if (source.getNextSymbol() == symbol) {      LALR1CPItem target=source.shift();      targetItems.add(target);      cpLinks.add(new CPGoToLink(source,null,target.getLR0Item()));    }  }  LALR1CPState targetState=new LALR1CPState(targetItems);  return t(targetState,cpLinks);}  }
class C{  static int intClassify(double a){  if (!isFinite(a) || (a != Math.floor(a))) {    return -1;  } else {    a=StrictMath.abs(a);    if (a + 1.0 == a) {      return 0;    } else {      long ell=(long)a;      return ((ell & 0x1L) == (long)1) ? 1 : 0;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.565 -0500",hash_original_method="92FB3641FED625E21CE916EA375B8557",hash_generated_method="50E48F0F9FC19067DC5965A74F47B2E0") private float measureRun(int start,int offset,int limit,boolean runIsRtl,FontMetricsInt fmi){  return handleRun(start,offset,limit,runIsRtl,null,0,0,0,0,fmi,true);}  }
class C{  public NotificationChain basicSetAnnotationList(N4MemberAnnotationList newAnnotationList,NotificationChain msgs){  N4MemberAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public SocketTimeoutException(String detailMessage){  super(detailMessage);}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public static <A>FluxTValue<A> of(AnyMValue<? extends Flux<A>> monads){  return new FluxTValue<>(monads);}  }
class C{  public IconicsDrawable sizeRes(int dimenRes){  return sizePx(mContext.getResources().getDimensionPixelSize(dimenRes));}  }
class C{  private Node dist(){  Node node=new Node(NodeType.DIST,lineargs);  next();  while (line() != null && line().startsWith(NodeType.DISTCOMP.getMatch())) {    node.getChildren().add(distcomp());  }  return node;}  }
class C{  public void printLenString(String v) throws IOException {  if (v == null) {    os.write(0);    os.write(0);  } else {    int len=v.length();    os.write(len >> 8);    os.write(len);    printString(v,0,len);  }}  }
class C{  public RenameTypeParameterVisitor(CompilationUnitRewrite rewrite,ISourceRange range,RefactoringStatus status){  Assert.isNotNull(rewrite);  Assert.isNotNull(range);  Assert.isNotNull(status);  fRewrite=rewrite;  fName=(SimpleName)NodeFinder.perform(rewrite.getRoot(),range);  fBinding=fName.resolveBinding();  fStatus=status;}  }
class C{  public String localName(){  return theLocalName;}  }
class C{  private void validate(int[][] b){  int found[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  StringBuilder bs=new StringBuilder();  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      found[b[r][c]]=1;      bs.append(b[r][c]);    }    bs.append('|');  }  for (int i=0; i < found.length; i++) {    if (found[i] == 0) {      throw new IllegalArgumentException("Illegal board state:" + bs);    }  }}  }
class C{  public void _testHasAttributeNS1() throws Throwable {  Document doc;  Element element;  boolean state;  NodeList elementList;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("*","employee");  element=(Element)elementList.item(0);  state=element.hasAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  assertTrue("elementhasattributens01",state);}  }
class C{  public TextChangeImpl(@NotNull CharSequence text,int start) throws IllegalArgumentException {  this(text,start,start);}  }
class C{  public Builder clear(){  localeBuilder.clear();  return this;}  }
class C{  protected LocoNetMessage progOnProgrammingTrackMessage(int element6,int val,int cvnum){  LocoNetMessage m=new LocoNetMessage(0x1F);  m.setOpCode(LnConstants.OPC_IMM_PACKET);  m.setElement(1,0x1F);  m.setElement(2,0x01);  m.setElement(3,0x49);  m.setElement(4,0x42);  m.setElement(5,0x71 | (val & 0x80) >> 4 | (cvnum & 0x80) >> 6);  m.setElement(6,element6);  m.setElement(7,cvnum & 0x7F);  m.setElement(8,cvnum / 256);  m.setElement(9,val & 0x7F);  m.setElement(10,0x70);  m.setElement(15,0x10);  return m;}  }
class C{  private void copySourceInformationFrom(Bee src){  copySourceInformation(this,src);}  }
class C{  private void addComponent(JPanel panel,GridBagLayout gbl,Component c,int x,int y,int width,int height,int fill,double weightx,double weighty,Insets insets){  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=x;  gbc.gridy=y;  gbc.gridwidth=width;  gbc.gridheight=height;  gbc.fill=fill;  gbc.weightx=weightx;  gbc.weighty=weighty;  gbc.insets=insets;  gbl.setConstraints(c,gbc);  panel.add(c);}  }
class C{  void popNamespaces(int elemDepth,ContentHandler saxHandler){  while (true) {    if (m_nodeStack.isEmpty())     return;    MappingRecord map=(MappingRecord)(m_nodeStack.peek());    int depth=map.m_declarationDepth;    if (elemDepth < 1 || map.m_declarationDepth < elemDepth)     break;    MappingRecord nm1=(MappingRecord)m_nodeStack.pop();    String prefix=map.m_prefix;    Stack prefixStack=getPrefixStack(prefix);    MappingRecord nm2=(MappingRecord)prefixStack.peek();    if (nm1 == nm2) {      prefixStack.pop();      if (saxHandler != null) {        try {          saxHandler.endPrefixMapping(prefix);        } catch (        SAXException e) {        }      }    }  }}  }
class C{  public ObjectFactory(){}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  if (-1 == m_stackFrame) {    return returnNextNode(m_firstWalker.nextNode());  } else {    VariableStack vars=m_execContext.getVarStack();    int savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);    int n=returnNextNode(m_firstWalker.nextNode());    vars.setStackFrame(savedStart);    return n;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.195 -0400",hash_original_method="567AA28F7AE17CFA4EFEB7E99161964B",hash_generated_method="51A905D1F70C25F8EFE59F9DDFF4FB91") public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  private BakedBezierInterpolator(){  super();}  }
class C{  public void validateNamespacePermissions(List<NamespacePermissionEnum> namespacePermissions) throws IllegalArgumentException {  Assert.isTrue(!CollectionUtils.isEmpty(namespacePermissions),"Namespace permissions must be specified.");  Set<NamespacePermissionEnum> validatedNamespacePermissions=new HashSet<>();  for (  NamespacePermissionEnum namespacePermission : namespacePermissions) {    if (validatedNamespacePermissions.contains(namespacePermission)) {      throw new IllegalArgumentException(String.format("Duplicate namespace permission \"%s\" is found.",namespacePermission.value()));    }    validatedNamespacePermissions.add(namespacePermission);  }}  }
class C{  public static TetradMatrix constructCentralizedGramMatrix(List<Kernel> kernels,DataSet dataset,List<Node> nodes){  int m=dataset.getNumRows();  TetradMatrix gram=constructGramMatrix(kernels,dataset,nodes);  TetradMatrix H=constructH(m);  TetradMatrix KH=gram.times(H);  TetradMatrix HKH=H.times(KH);  return HKH;}  }
class C{  public static PieChart criar(String titulo,Map<String,List<Relatorio>> map){  double total=0;  grafico.setTitle(titulo);  ObservableList<PieChart.Data> dados=FXCollections.observableArrayList();  for (  String chave : map.keySet()) {    List<Relatorio> relatorios=map.get(chave);    for (    Relatorio relatorio : relatorios) {      dados.add(new PieChart.Data(chave,relatorio.getTotal()));      total+=relatorio.getTotal();    }  }  grafico.dataProperty().set(dados);  info(grafico,total);  return grafico;}  }
class C{  public OverScroller(Context context){  this(context,null);}  }
class C{  public InputStream postStream() throws HttpClientException {  return sendHttpRequestStream("post");}  }
class C{  public void changeCall(TestCase test,Statement statement,GenericAccessibleObject<?> call) throws ConstructionFailedException {  int position=statement.getReturnValue().getStPosition();  logger.debug("Changing call {} with {}",test.getStatement(position),call);  if (call.isMethod()) {    GenericMethod method=(GenericMethod)call;    if (method.hasTypeParameters())     throw new ConstructionFailedException("Cannot handle generic methods properly");    VariableReference retval=statement.getReturnValue();    VariableReference callee=null;    if (!method.isStatic()) {      callee=getRandomNonNullNonPrimitiveObject(test,method.getOwnerType(),position);    }    List<VariableReference> parameters=new ArrayList<>();    for (    Type type : method.getParameterTypes()) {      parameters.add(test.getRandomObject(type,position));    }    MethodStatement m=new MethodStatement(test,method,callee,parameters,retval);    test.setStatement(m,position);    logger.debug("Using method {}",m.getCode());  } else   if (call.isConstructor()) {    GenericConstructor constructor=(GenericConstructor)call;    VariableReference retval=statement.getReturnValue();    List<VariableReference> parameters=new ArrayList<>();    for (    Type type : constructor.getParameterTypes()) {      parameters.add(test.getRandomObject(type,position));    }    ConstructorStatement c=new ConstructorStatement(test,constructor,retval,parameters);    test.setStatement(c,position);    logger.debug("Using constructor {}",c.getCode());  } else   if (call.isField()) {    GenericField field=(GenericField)call;    VariableReference retval=statement.getReturnValue();    VariableReference source=null;    if (!field.isStatic())     source=getRandomNonNullNonPrimitiveObject(test,field.getOwnerType(),position);    try {      FieldStatement f=new FieldStatement(test,field,source,retval);      test.setStatement(f,position);      logger.debug("Using field {}",f.getCode());    } catch (    Throwable e) {      logger.error("Error: " + e + " , Field: "+ field+ " , Test: "+ test);      throw new Error(e);    }  }}  }
class C{  public static double computeInterpolationFactor(double v,double x,double y){  return clamp((v - x) / (y - x),0d,1d);}  }
class C{  private void removeOMADownloadFromSharedPrefs(long downloadId){  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);  for (  String omaDownload : omaDownloads) {    OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);    if (entry.mDownloadId == downloadId) {      omaDownloads.remove(omaDownload);      storeDownloadInfo(PENDING_OMA_DOWNLOADS,omaDownloads);      return;    }  }}  }
class C{  private void actionProcess(){  MUser user=MUser.get(Env.getCtx());  if (!user.isAdministrator()) {    fResult.setText("Not Administrator");    return;  }  GroovyShell sh=new GroovyShell();  Exception e=null;  try {    sh.parse(editor.getTextEditor().getText());  } catch (  Exception e1) {    e=e1;  }  if (e != null) {    ADialog.error(m_WindowNo,this,"ScriptError",e.toString());    fResult.setText("Syntax errors detected.");  } else   fResult.setText("No syntax errors detected.");}  }
class C{  void repaintChildren(){  for (  Component child : panel.getComponents()) {    child.repaint();  }}  }
class C{  public boolean isRoleTenantLevel(String role){  return (role.equalsIgnoreCase(Role.TENANT_ADMIN.toString()) || role.equalsIgnoreCase(Role.PROJECT_ADMIN.toString()) || role.equalsIgnoreCase(Role.TENANT_APPROVER.toString()));}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.LIMIT_TASK_SIZE_REVISIONS);  if (o != null) {    this.articleTaskLimitField.setText(Long.toString((Long)o));  } else {    this.articleTaskLimitField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.LIMIT_TASK_SIZE_DIFFS);  if (o != null) {    this.diffTaskLimitField.setText(Long.toString((Long)o));  } else {    this.diffTaskLimitField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.LIMIT_SQLSERVER_MAX_ALLOWED_PACKET);  if (o != null) {    this.maxAllowedPacketField.setText(Long.toString((Long)o));  } else {    this.maxAllowedPacketField.setText("");  }}  }
class C{  public int acquire(){  return doAcquire(range.first,range.second);}  }
class C{  public void putQuick(int bitIndex,boolean value){  if (value)   QuickBitVector.set(bits,bitIndex); else   QuickBitVector.clear(bits,bitIndex);}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound) {    throw new IllegalArgumentException();  }  return nextDouble() * (bound - least) + least;}  }
class C{  private void checkIfProviderSupportsAliasOperations(StorageSystem storageSystem) throws Exception {  String versionSubstring=null;  if (storageSystem.checkIfVmax3() && storageSystem.getUsingSmis80()) {    try {      StorageProvider storageProvider=_dbClient.queryObject(StorageProvider.class,storageSystem.getActiveProviderURI());      String providerVersion=storageProvider.getVersionString();      versionSubstring=providerVersion.split("\\.")[1];    } catch (    Exception e) {      _log.error("Exception get provider version for the storage system {} {}.",storageSystem.getLabel(),storageSystem.getId());      throw e;    }  }  if (NullColumnValueGetter.isNullValue(versionSubstring) || !(Integer.parseInt(versionSubstring) >= 2)) {    String errMsg=String.format("SMI-S Provider associated with Storage System %s does not support Initiator Alias operations",storageSystem.getSerialNumber());    _log.error(errMsg);    throw DeviceControllerException.exceptions.couldNotPerformAliasOperation(errMsg);  }}  }
class C{  @Override public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  MessageOnlyLogFilter msgFilter=new MessageOnlyLogFilter();  logWrapper.setNext(msgFilter);  LogFragment logFragment=(LogFragment)getSupportFragmentManager().findFragmentById(R.id.log_fragment);  msgFilter.setNext(logFragment.getLogView());}  }
class C{  public boolean equals(Object x){  if (!(x instanceof IntList)) {    return false;  }  IntList L=(IntList)x;  IntList p;  for (p=this; p != null && L != null; p=p.tail, L=L.tail) {    if (p.head != L.head) {      return false;    }  }  if (p != null || L != null) {    return false;  }  return true;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void zipFiles(Collection<File> resFileList,File zipFile,HashMap<String,Integer> compressData) throws IOException {  ZipOutputStream zipout=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile),BUFFER));  for (  File resFile : resFileList) {    if (resFile.exists()) {      zipFile(resFile,zipout,"",compressData);    }  }  zipout.close();}  }
class C{  public MalformedBody3(){  requestFileName="malformed-body3.query";}  }
class C{  public static String replaceErrorMsg(String origMsg){  String replaceMsg=origMsg;  for (  ERROR_TYPE errorType : ERROR_TYPE.values()) {    if (origMsg == null) {      replaceMsg=PcConstants.NA;      return replaceMsg;    }    if (origMsg.contains(errorMapOrig.get(errorType))) {      replaceMsg=errorMapReplace.get(errorType);      break;    }  }  return replaceMsg;}  }
class C{  public static RelationalOpExpression ltProperty(String propertyLeft,String propertyRight){  return new RelationalOpExpression(getPropExpr(propertyLeft),"<",new PropertyValueExpression(propertyRight));}  }
class C{  @Override public int compareTo(DiscordRecord other){  if (null == other) {    throw new NullPointerException("Unable compare to null!");  }  return Double.compare(other.getNNDistance(),this.nnDistance);}  }
class C{  private void implDelete(Path obj,boolean haveFlags,int flags) throws IOException {  UnixPath file=getName(obj);  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    ds.directory().resolve(file).checkDelete();  }  ds.readLock().lock();  try {    if (!ds.isOpen())     throw new ClosedDirectoryStreamException();    if (!haveFlags) {      UnixFileAttributes attrs=null;      try {        attrs=UnixFileAttributes.get(dfd,file,false);      } catch (      UnixException x) {        x.rethrowAsIOException(file);      }      flags=(attrs.isDirectory()) ? AT_REMOVEDIR : 0;    }    try {      unlinkat(dfd,file.asByteArray(),flags);    } catch (    UnixException x) {      if ((flags & AT_REMOVEDIR) != 0) {        if (x.errno() == EEXIST || x.errno() == ENOTEMPTY) {          throw new DirectoryNotEmptyException(null);        }      }      x.rethrowAsIOException(file);    }  }  finally {    ds.readLock().unlock();  }}  }
class C{  public CertificateIssuer(byte[] encoding){  super(encoding);}  }
class C{  public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){  Objects.requireNonNull(view);  _view=view;  _type=type;  _priority=priority;}  }
class C{  protected KMLRoot findOpenKmlDocument(String url){  Object o=WorldWind.getSessionCache().get(url);  if (o instanceof KMLRoot)   return (KMLRoot)o; else   return null;}  }
class C{  public static SimpleNode parse(Reader reader,String templateName,boolean dumpNamespace) throws ParseException {  return RuntimeSingleton.parse(reader,templateName,dumpNamespace);}  }
class C{  public void indefinite(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.CATCH_BLOCK__CATCH_VARIABLE:    setCatchVariable((CatchVariable)null);  return;}super.eUnset(featureID);}  }
class C{  public void prepareExpression(Session session){  if (defaultExpression != null) {    computeTableFilter=new TableFilter(session,table,null,false,null,0);    defaultExpression.mapColumns(computeTableFilter,0);    defaultExpression=defaultExpression.optimize(session);  }}  }
class C{  public void loadRoutes(Element routes){  List<Element> routeList=routes.getChildren("route");  if (log.isDebugEnabled()) {    log.debug("Found " + routeList.size() + " routes");  }  RouteManager tm=InstanceManager.getDefault(jmri.RouteManager.class);  for (int i=0; i < routeList.size(); i++) {    String sysName=getSystemName(routeList.get(i));    if (sysName == null) {      log.warn("unexpected null in systemName " + routeList.get(i));      break;    }    String userName=null;    String cTurnout=null;    String cTurnoutState=null;    String addedDelayTxt=null;    String routeLockedTxt=null;    String cLockTurnout=null;    String cLockTurnoutState=null;    int addedDelay=0;    if (routeList.get(i).getAttribute("userName") != null) {      userName=routeList.get(i).getAttribute("userName").getValue();    }    if (routeList.get(i).getAttribute("controlTurnout") != null) {      cTurnout=routeList.get(i).getAttribute("controlTurnout").getValue();    }    if (routeList.get(i).getAttribute("controlTurnoutState") != null) {      cTurnoutState=routeList.get(i).getAttribute("controlTurnoutState").getValue();    }    if (routeList.get(i).getAttribute("controlLockTurnout") != null) {      cLockTurnout=routeList.get(i).getAttribute("controlLockTurnout").getValue();    }    if (routeList.get(i).getAttribute("controlLockTurnoutState") != null) {      cLockTurnoutState=routeList.get(i).getAttribute("controlLockTurnoutState").getValue();    }    if (routeList.get(i).getAttribute("addedDelay") != null) {      addedDelayTxt=routeList.get(i).getAttribute("addedDelay").getValue();      if (addedDelayTxt != null) {        addedDelay=Integer.parseInt(addedDelayTxt);      }    }    if (routeList.get(i).getAttribute("routeLocked") != null) {      routeLockedTxt=routeList.get(i).getAttribute("routeLocked").getValue();    }    if (log.isDebugEnabled()) {      log.debug("create route: (" + sysName + ")("+ (userName == null ? "<null>" : userName)+ ")");    }    Route r;    try {      r=tm.provideRoute(sysName,userName);    } catch (    IllegalArgumentException ex) {      log.error("failed to create Route: " + sysName);      return;    }    loadCommon(r,routeList.get(i));    if (cTurnout != null) {      r.setControlTurnout(cTurnout);      if (cTurnoutState != null) {        if (cTurnoutState.equals("THROWN")) {          r.setControlTurnoutState(Route.ONTHROWN);        } else         if (cTurnoutState.equals("CHANGE")) {          r.setControlTurnoutState(Route.ONCHANGE);        } else         if (cTurnoutState.equals("VETOCLOSED")) {          r.setControlTurnoutState(Route.VETOCLOSED);        } else         if (cTurnoutState.equals("VETOTHROWN")) {          r.setControlTurnoutState(Route.VETOTHROWN);        } else {          r.setControlTurnoutState(Route.ONCLOSED);        }      } else {        log.error("cTurnoutState was null!");      }    }    r.setRouteCommandDelay(addedDelay);    if (routeLockedTxt != null && routeLockedTxt.equals("True")) {      r.setLocked(true);    }    if (cLockTurnout != null) {      r.setLockControlTurnout(cLockTurnout);      if (cLockTurnoutState != null) {        if (cLockTurnoutState.equals("THROWN")) {          r.setLockControlTurnoutState(Route.ONTHROWN);        } else         if (cLockTurnoutState.equals("CHANGE")) {          r.setLockControlTurnoutState(Route.ONCHANGE);        } else {          r.setLockControlTurnoutState(Route.ONCLOSED);        }      } else {        log.error("cLockTurnoutState was null!");      }    }    List<Element> routeTurnoutList=routeList.get(i).getChildren("routeTurnout");    if (routeTurnoutList.size() > 0) {      for (int k=0; k < routeTurnoutList.size(); k++) {        if (((routeTurnoutList.get(k))).getAttribute("systemName") == null) {          log.warn("unexpected null in systemName " + ((routeTurnoutList.get(k))) + " "+ ((routeTurnoutList.get(k))).getAttributes());          break;        }        String tSysName=((routeTurnoutList.get(k))).getAttribute("systemName").getValue();        String rState=((routeTurnoutList.get(k))).getAttribute("state").getValue();        int tSetState=Turnout.CLOSED;        if (rState.equals("THROWN")) {          tSetState=Turnout.THROWN;        } else         if (rState.equals("TOGGLE")) {          tSetState=Route.TOGGLE;        }        r.addOutputTurnout(tSysName,tSetState);      }    }    routeTurnoutList=routeList.get(i).getChildren("routeOutputTurnout");    if (routeTurnoutList.size() > 0) {      for (int k=0; k < routeTurnoutList.size(); k++) {        if (routeTurnoutList.get(k).getAttribute("systemName") == null) {          log.warn("unexpected null in systemName " + routeTurnoutList.get(k) + " "+ routeTurnoutList.get(k).getAttributes());          break;        }        String tSysName=routeTurnoutList.get(k).getAttribute("systemName").getValue();        String rState=routeTurnoutList.get(k).getAttribute("state").getValue();        int tSetState=Turnout.CLOSED;        if (rState.equals("THROWN")) {          tSetState=Turnout.THROWN;        } else         if (rState.equals("TOGGLE")) {          tSetState=Route.TOGGLE;        }        if (!r.isOutputTurnoutIncluded(tSysName)) {          r.addOutputTurnout(tSysName,tSetState);          Turnout t=r.getOutputTurnout(k);          if (r.getLocked()) {            t.setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT,true);          }        }      }    }    routeTurnoutList=routeList.get(i).getChildren("routeOutputSensor");    if (routeTurnoutList.size() > 0) {      for (int k=0; k < routeTurnoutList.size(); k++) {        if (routeTurnoutList.get(k).getAttribute("systemName") == null) {          log.warn("unexpected null in systemName " + routeTurnoutList.get(k) + " "+ routeTurnoutList.get(k).getAttributes());          break;        }        String tSysName=routeTurnoutList.get(k).getAttribute("systemName").getValue();        String rState=routeTurnoutList.get(k).getAttribute("state").getValue();        int tSetState=Sensor.INACTIVE;        if (rState.equals("ACTIVE")) {          tSetState=Sensor.ACTIVE;        } else         if (rState.equals("TOGGLE")) {          tSetState=Route.TOGGLE;        }        if (r.isOutputSensorIncluded(tSysName)) {          break;        }        r.addOutputSensor(tSysName,tSetState);      }    }    Element fileElement=routeList.get(i).getChild("routeSoundFile");    if (fileElement != null) {      r.setOutputSoundName(jmri.util.FileUtil.getExternalFilename(fileElement.getAttribute("name").getValue()));    }    fileElement=routeList.get(i).getChild("routeScriptFile");    if (fileElement != null) {      r.setOutputScriptName(jmri.util.FileUtil.getExternalFilename(fileElement.getAttribute("name").getValue()));    }    fileElement=routeList.get(i).getChild("turnoutsAlignedSensor");    if (fileElement != null) {      r.setTurnoutsAlignedSensor(fileElement.getAttribute("name").getValue());    }    List<Element> routeSensorList=routeList.get(i).getChildren("routeSensor");    if (routeSensorList.size() > 0) {      for (int k=0; k < routeSensorList.size(); k++) {        if (routeSensorList.get(k).getAttribute("systemName") == null) {          log.warn("unexpected null in systemName " + routeSensorList.get(k) + " "+ routeSensorList.get(k).getAttributes());          break;        }        int mode=Route.ONACTIVE;        if (routeSensorList.get(k).getAttribute("mode") != null) {          String sm=routeSensorList.get(k).getAttribute("mode").getValue();          if (sm.equals("onActive")) {            mode=Route.ONACTIVE;          } else           if (sm.equals("onInactive")) {            mode=Route.ONINACTIVE;          } else           if (sm.equals("onChange")) {            mode=Route.ONCHANGE;          } else           if (sm.equals("vetoActive")) {            mode=Route.VETOACTIVE;          } else           if (sm.equals("vetoInactive")) {            mode=Route.VETOINACTIVE;          } else {            log.warn("unexpected sensor mode in route " + sysName + " was "+ sm);          }        }        r.addSensorToRoute(routeSensorList.get(k).getAttribute("systemName").getValue(),mode);      }    }    r.activateRoute();  }}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.FICHAS_EDICION,request);  FichaVO fichaVO=(FichaVO)getFromTemporalSession(request,"fichaVO");  FichasForm fichasForm=(FichasForm)form;  fichasForm.set(fichaVO);  loadListas(request,fichasForm);  setReturnActionFordward(request,mapping.findForward("retrieve"));}  }
class C{  private String flowToString(int flowcontrol){switch (flowcontrol) {case AbstractSerialConnection.FLOW_CONTROL_DISABLED:    return "none";case AbstractSerialConnection.FLOW_CONTROL_XONXOFF_OUT_ENABLED:  return "xon/xoff out";case AbstractSerialConnection.FLOW_CONTROL_XONXOFF_IN_ENABLED:return "xon/xoff in";case AbstractSerialConnection.FLOW_CONTROL_CTS_ENABLED:return "rts/cts";case AbstractSerialConnection.FLOW_CONTROL_DTR_ENABLED:return "dsr/dtr";default :return "none";}}  }
class C{  public boolean meetsInput(ChemicalPairOutput input){  return meets(input) || meets(input.swap());}  }
class C{  public void score(int s){  score=s;}  }
class C{  public static long maxFill(final long n,final float f){  return Math.min((long)Math.ceil(n * f),n - 1);}  }
class C{  protected void engineInit(SecureRandom random){  this.random=random;}  }
class C{  public static StripContextFilter newInstance(){  return new StripContextFilter(BOp.NOARGS,BOp.NOANNS);}  }
class C{  public void handlePOST(CoapExchange exchange){  exchange.respond(ResponseCode.METHOD_NOT_ALLOWED);}  }
class C{  public static ImmutableList<RegistrarCredit> loadAllForRegistrar(Registrar registrar){  return FluentIterable.from(ofy().load().type(RegistrarCredit.class).ancestor(registrar)).toSortedList(CREDIT_PRIORITY_ORDERING);}  }
class C{  public AnnotationFS updateCurationCas(CAS aCas,int aBegin,int aEnd,AnnotationFeature aFeature,Object aValue,AnnotationFS aClickedFs,boolean aIsSlot) throws BratAnnotationException {  Type type=CasUtil.getType(aCas,getAnnotationTypeName());  AnnotationFS newAnnotation=null;  int countAnno=0;  for (  AnnotationFS fs : CasUtil.selectCovered(aCas,type,aBegin,aEnd)) {    countAnno++;    newAnnotation=fs;    if (fs.getBegin() == aBegin && fs.getEnd() == aEnd) {      if (!allowStacking) {        setFeature(fs,aFeature,aValue);        return fs;      }      StringBuilder clickedFtValues=new StringBuilder();      StringBuilder curationFtValues=new StringBuilder();      for (      Feature feat : type.getFeatures()) {switch (feat.getRange().getName()) {case CAS.TYPE_NAME_STRING:case CAS.TYPE_NAME_BOOLEAN:case CAS.TYPE_NAME_FLOAT:case CAS.TYPE_NAME_INTEGER:          clickedFtValues.append(aClickedFs.getFeatureValueAsString(feat));        curationFtValues.append(fs.getFeatureValueAsString(feat));default :      continue;  }}if (clickedFtValues.toString().equals(curationFtValues.toString())) {  return fs;}}}if (!aIsSlot) {newAnnotation=createAnnotation(aCas,aBegin,aEnd,aFeature,aValue,type);}if (aIsSlot && countAnno > 1) {throw new BratAnnotationException("There are different stacking annotation on curation panel, cannot copy the slot feature");}return newAnnotation;}  }
class C{  public IndexColumn(){}  }
class C{  protected void unhighlightNode(final Node node){  CNodeHighlighter.highlightNode(node,false);}  }
class C{  private Map<String,Integer> markParents(CnATreeElement element,Map<String,Integer> currentMap,IDAOFactory daoFactory){  while (!(element instanceof Organization)) {    if (element instanceof IncidentScenarioGroup) {      currentMap.put(element.getUuid(),IRiskAnalysisService.RISK_COLOR_RED);    }    element=element.getParent();    element=daoFactory.getDAO(CnATreeElement.class).initializeAndUnproxy(element);  }  return currentMap;}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  protected List<BlockObject> sortFullCopySourceList(List<BlockObject> fcSourceObjects){  List<BlockObject> sortedSourceObjects=new ArrayList<BlockObject>();  Map<String,BlockObject> fcSourcObjectsMap=new HashMap<String,BlockObject>();  for (  BlockObject fcSourceObject : fcSourceObjects) {    fcSourcObjectsMap.put(fcSourceObject.getLabel(),fcSourceObject);  }  List<String> fcSourceLabels=new ArrayList<String>(fcSourcObjectsMap.keySet());  Collections.sort(fcSourceLabels);  for (  String fcSourceLabel : fcSourceLabels) {    sortedSourceObjects.add(fcSourcObjectsMap.get(fcSourceLabel));  }  return sortedSourceObjects;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(Pageable.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  private static CalendarHierarchy createConfigurationHierarchy(final Configuration c,CalendarHierarchy h){  h=new CalendarHierarchy(h,c.getHierarchy());  h.setFallbackDescription(c.getDescription());  for (  Configuration sub : c.getSubConfigurations()) {    CalendarHierarchy subHierarchy=createConfigurationHierarchy(sub,h);    h.getChildren().put(subHierarchy.getId(),subHierarchy);  }  return h;}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> createSnapshotSession(URI consistencyGroupId,SnapshotSessionCreateParam input){  final String url=getIdUrl() + "/protection/snapshot-sessions";  return postTasks(input,url,consistencyGroupId);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <T>void writeCollection(BinaryRawWriterEx writer,Collection<T> col,@Nullable PlatformWriterClosure<T> writeClo,@Nullable IgnitePredicate<T> filter){  assert col != null;  if (filter == null) {    writer.writeInt(col.size());    if (writeClo == null) {      for (      T entry : col)       writer.writeObject(entry);    } else {      for (      T entry : col)       writeClo.write(writer,entry);    }  } else {    int pos=writer.reserveInt();    int cnt=0;    for (    T entry : col) {      if (filter.apply(entry)) {        cnt++;        if (writeClo == null)         writer.writeObject(entry); else         writeClo.write(writer,entry);      }    }    writer.writeInt(pos,cnt);  }}  }
class C{  public static <T,U extends AutoCloseable>T withAutoCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws Exception {  try {    T result=action.call(self);    AutoCloseable temp=self;    self=null;    temp.close();    return result;  }  finally {    closeWithWarning(self);  }}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  public static void clear(String... keys){  if (mCachePool != null && keys != null) {    AppCache appCache=null;    for (    String key : keys) {      if (mCachePool.containsKey(key)) {        appCache=mCachePool.remove(key);        if (appCache != null) {          if (appCache.mCache != null) {            appCache.mCache.clear();          }          if (appCache.mLruCache != null) {            appCache.mLruCache.evictAll();          }        }      }    }  }}  }
class C{  public void addUncompletedCorrelationId(String id,Node node,int position){  NodePlaceholder placeholder=new NodePlaceholder();  placeholder.setNode(node);  placeholder.setPosition(position);  uncompletedCorrelationIdsNodeMap.put(id,placeholder);}  }
class C{  private final int appendNode(int w0,int w1,int w2,int w3){  int slotnumber=nodes.appendSlot(w0,w1,w2,w3);  if (DEBUG)   System.out.println(slotnumber + ": " + w0+ " "+ w1+ " "+ w2+ " "+ w3);  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,slotnumber);  previousSiblingWasParent=false;  return slotnumber;}  }
class C{  public NTree(int dimensions){  LOGGER.debug("Creating an NTree with " + dimensions + " dimensions.");  this.dimensions=dimensions;  logger=Logger.getLogger(logger.getName() + '.' + dimensions);}  }
class C{  public boolean isDirty(Entity entity,String... attributes){  Set<String> dirtyFields=getDirtyFields(entity);  for (  String attribute : attributes) {    if (dirtyFields.contains(attribute))     return true;  }  return false;}  }
class C{  public static void main(String args[]){  try {    DriverManager.registerDriver(new oracle.jdbc.OracleDriver());    s_ds=new OracleDataSource();    s_ds.setDriverType(DRIVER);    s_ds.setServerName("dev");    s_ds.setNetworkProtocol("tcp");    s_ds.setDatabaseName("dev1");    s_ds.setPortNumber(1521);    s_ds.setUser("adempiere");    s_ds.setPassword("adempiere");    s_fetchSize=10;    s_cType=C_MULTIPLE;    statementTiming();    statementTiming();    statementTiming();    s_cType=C_DATASOURCE;    statementTiming();    statementTiming();    statementTiming();    s_cType=C_CACHE;    statementTiming();    statementTiming();    statementTiming();    s_fetchSize=20;    s_cType=C_MULTIPLE;    statementTiming();    statementTiming();    statementTiming();    s_cType=C_DATASOURCE;    statementTiming();    statementTiming();    statementTiming();    s_cType=C_CACHE;    statementTiming();    statementTiming();    statementTiming();    s_fetchSize=10;    s_cType=C_SHARED;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();    s_cType=C_MULTIPLE;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();    s_cType=C_PRECREATED;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();    s_cType=C_DATASOURCE;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();    s_cType=C_CACHE;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void projectionChanged(ProjectionEvent event){  projection=event.getProjection();  Collection values=graphics.values();  Iterator iter=values.iterator();  while (iter.hasNext())   ((OMGraphic)iter.next()).generate(projection);}  }
class C{  public DoubleMatrix2D assign(double value){  if (value == 0) {    for (int row=rows; --row >= 0; ) {      indexes[row]=null;      values[row]=null;    }  } else   super.assign(value);  return this;}  }
class C{  public ExtentTest error(Throwable t){  log(Status.ERROR,t);  return this;}  }
class C{  public static void main(String[] args){  cleanGautengNetwork cn=new cleanGautengNetwork();  cn.log.info("Number of arguments: " + args.length);  if (args.length == 4) {    cn.inputNetwork=args[0];    cn.laneDefinitionFolder=args[1];    cn.outputNetwork=args[2];    cn.outputShapefile=args[3];    File f=new File(cn.inputNetwork);    if (!f.exists() || !f.canRead()) {      throw new RuntimeException("Network file " + args[0] + "does not exist.");    }  } else {    throw new RuntimeException("Need an input and output network file path specified.");  }  cn.log.info("Gauteng network cleaner created.");  cn.cleanNetwork(cn.inputNetwork,cn.outputNetwork);  cn.writeNetworkToShapefile(cn.outputNetwork);  boolean deleted1=new File(cn.tempFile1).delete();  boolean deleted2=new File(cn.tempFile2).delete();  if (!deleted1 || !deleted2) {    cn.log.warn("Could not delete one or both of the temporary files:");    cn.log.warn("   " + cn.tempFile1);    cn.log.warn("   " + cn.tempFile2);  } else {    cn.log.info("Cleaned temporary files.");  }  cn.log.info("----------------------------");  cn.log.info("         Completed");  cn.log.info("============================");}  }
class C{  public DocumentDictionary(IndexReader reader,String field,String weightField){  this(reader,field,weightField,null);}  }
class C{  private void decorateBookEntry(Element entry,Book book,boolean isFullEntry){  if (logger.isTraceEnabled())   logger.trace("decorateBookEntry: ADDING book decoration to book " + book);  ImageManager iManager;  if (isFullEntry) {    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry: ADDING cover link");    boolean resizeCover;    if (currentProfile.getUseThumbnailsAsCovers()) {      iManager=CatalogManager.thumbnailManager;      resizeCover=currentProfile.getThumbnailGenerate();    } else {      iManager=CatalogManager.coverManager;      resizeCover=currentProfile.getCoverResize();    }    addImageLink(book,entry,iManager,resizeCover,true);  }  if (logger.isTraceEnabled())   logger.trace("decorateBookEntry: ADDING thumbnail link");  iManager=CatalogManager.thumbnailManager;  addImageLink(book,entry,iManager,currentProfile.getThumbnailGenerate(),false);  addAcquisitionLinks(book,entry);  if (currentProfile.getIncludeAuthorInBookDetails()) {    if (book.hasAuthor()) {      for (      Author author : book.getAuthors()) {        if (logger.isTraceEnabled())         logger.trace("decorateBookEntry:   author " + author);        String name=currentProfile.getDisplayAuthorSort() ? author.getSort() : author.getName();        Element authorElement=JDOMManager.element(Constants.OPDS_ELEMENT_AUTHOR).addContent(JDOMManager.element(Constants.OPDS_ELEMENT_NAME).addContent(name)).addContent(JDOMManager.element(Constants.OPDS_ELEMENT_URI).addContent(Constants.PARENT_PATH_PREFIX + AuthorsSubCatalog.getAuthorFolderFilenameNoLevel(author) + Constants.PAGE_ONE_XML));        entry.addContent(authorElement);      }    }  }  if (logger.isTraceEnabled())   logger.trace("decorateBookEntry:   published " + book.getPublicationDate());  Element published=FeedHelper.getPublishedTag(book.getPublicationDate());  entry.addContent(published);  for (  Language language : book.getBookLanguages()) {    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry:   language " + language.getIso2());    Element dcLang=FeedHelper.getDublinCoreLanguageElement(language.getIso2());    entry.addContent(dcLang);  }  Publisher publisher=book.getPublisher();  if (Helper.isNotNullOrEmpty(publisher)) {    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry:   publisher " + publisher.getName());    Element dcPublisher=FeedHelper.getDublinCorePublisherElement(publisher.getName());    entry.addContent(dcPublisher);  }  if (Helper.isNotNullOrEmpty(book.getTags())) {    for (    Tag tag : book.getTags()) {      if (logger.isTraceEnabled())       logger.trace("decorateBookEntry:   tag " + tag.getName());      Element categoryElement=FeedHelper.getCategoryElement(tag.getName());      entry.addContent(categoryElement);    }  }  if (currentProfile.getIncludeSeriesInBookDetails() && Helper.isNotNullOrEmpty(book.getSeries())) {    String seriesName=currentProfile.getSortSeriesUsingLibrarySort() ? book.getSeries().getName() : book.getSeries().getSort();    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry:   series " + seriesName + "["+ book.getSerieIndex()+ "]");    Element categoryElement=FeedHelper.getCategoryElement(seriesName);    entry.addContent(categoryElement);  }  if (isFullEntry) {    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry: FULL ENTRY");    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry:   content element");    Element content=JDOMManager.element("content").setAttribute("type","text/html");    boolean hasContent=false;    if (logger.isTraceEnabled())     logger.trace("decorateBookEntry: computing comments");    if (currentProfile.getIncludeSeriesInBookDetails() && Helper.isNotNullOrEmpty(book.getSeries())) {      String data=Localization.Main.getText("content.series.data",book.getSerieIndex(),currentProfile.getSortSeriesUsingLibrarySort() ? book.getSeries().getName() : book.getSeries().getSort());      content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.series") + ": ")).addContent(data));      hasContent=true;    }    if (currentProfile.getIncludeRatingInBookDetails()) {      if (Helper.isNotNullOrEmpty(book.getRating())) {        String rating=LocalizationHelper.getEnumConstantHumanName(book.getRating());        content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.rating") + ": ")).addContent(rating));        hasContent=true;      }    }    if (currentProfile.getIncludeTagsInBookDetails()) {      if (Helper.isNotNullOrEmpty(book.getTags())) {        String tags=book.getTags().toString();        if (tags != null && tags.startsWith("["))         tags=tags.substring(1,tags.length() - 1); else         tags="";        content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.tags") + ": ")).addContent(tags));        hasContent=true;      }    }    if (currentProfile.getIncludePublisherInBookDetails()) {      if (Helper.isNotNullOrEmpty(book.getPublisher())) {        content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.publisher") + ": ")).addContent(book.getPublisher().getName()));        hasContent=true;      }    }    if (currentProfile.getIncludePublishedInBookDetails()) {      Date pubtmp=book.getPublicationDate();      if (Helper.isNotNullOrEmpty(pubtmp)) {        content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.published") + ": ")).addContent(CatalogManager.bookDateFormat.format(book.getPublicationDate())));        hasContent=true;      }    }    if (currentProfile.getIncludeAddedInBookDetails()) {      Date addtmp=book.getTimestamp();      if (Helper.isNotNullOrEmpty(addtmp)) {        content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.added") + ": ")).addContent(CatalogManager.titleDateFormat.format(addtmp)));        hasContent=true;      }    }    if (currentProfile.getIncludeModifiedInBookDetails()) {      Date modtmp=book.getModified();      if (Helper.isNotNullOrEmpty(modtmp)) {        content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.modified") + ": ")).addContent(CatalogManager.titleDateFormat.format(modtmp)));        hasContent=true;      }    }    List<CustomColumnType> bookDetailsCustomColumnTypes=CatalogManager.getBookDetailsCustomColumns();    if (bookDetailsCustomColumnTypes != null && bookDetailsCustomColumnTypes.size() > 0) {      List<CustomColumnValue> values=DataModel.getMapOfCustomColumnValuesByBookId().get(book.getId().toString());      for (      CustomColumnType columnType : bookDetailsCustomColumnTypes) {        String textValue="";        String dataType=columnType.getDatatype();        String name=columnType.getName();        String label=columnType.getLabel();        if (values != null && values.size() > 0) {          for (          CustomColumnValue value : values) {            if (value.getType().equals(columnType)) {              textValue=value.getValueAsString();              break;            }          }        }        if (currentProfile.getBookDetailsCustomFieldsAlways() || Helper.isNotNullOrEmpty(textValue)) {          if (dataType.equals("bool")) {            if (Helper.isNotNullOrEmpty(textValue)) {              textValue=textValue.equals("0") ? Constants.NO : Constants.YES;            }          }          if (dataType.equals("series")) {          }          if (textValue.toUpperCase().startsWith("http://") || textValue.toString().startsWith("HTTPS://")) {            name="<u><a href=\"" + textValue + "\">"+ name+ "</a></u>";            textValue="";          } else {            name+=": ";          }          String textvaluelower=textValue.toLowerCase();          int posStart=textvaluelower.startsWith("<div>") ? 5 : 0;          if (posStart != 0) {            int posEnd=textvaluelower.endsWith("</div>") ? textValue.length() - 6 : textValue.length();            textValue="<span id=\"" + label + "\">"+ textValue.substring(posStart,posEnd)+ "</span>";          }          Element customElement=JDOMManager.element((Constants.HTML_ELEMENT_PARAGRAPH));          Element nameElement=JDOMManager.element(Constants.HTML_ELEMENT_STRONG);          if (name.startsWith("<")) {            for (            Element p : JDOMManager.convertHtmlTextToXhtml(name)) {              nameElement.addContent(p.detach());            }          } else {            nameElement.addContent(name);          }          customElement.addContent(nameElement);          if (textvaluelower.startsWith("<")) {            for (            Element p : JDOMManager.convertHtmlTextToXhtml(textValue)) {              customElement.addContent(p.detach());            }          } else {            customElement.addContent(textValue);          }          content.addContent(customElement);          hasContent=true;        }      }    }    String commentsString=book.getComment();    List<Element> comments=JDOMManager.convertHtmlTextToXhtml(commentsString);    if (Helper.isNotNullOrEmpty(comments)) {      if (logger.isTraceEnabled())       logger.trace("decorateBookEntry: got comments");      content.addContent(JDOMManager.element(Constants.HTML_ELEMENT_PARAGRAPH).addContent(JDOMManager.element(Constants.HTML_ELEMENT_STRONG).addContent(Localization.Main.getText("content.summary"))));      for (      Element p : comments) {        content.addContent(p.detach());      }      hasContent=true;    } else {      if (Helper.isNotNullOrEmpty(book.getComment())) {        logger.warn(Localization.Main.getText("warn.badComment",book.getId(),book.getTitle()));        logger.warn(book.getComment());        book.setComment("");      }    }    if (hasContent) {      if (logger.isTraceEnabled())       logger.trace("decorateBookEntry: had content");      entry.addContent(content);    }  } else {    if (logger.isTraceEnabled())     logger.trace("getBookEntry: short comment");    String summary=book.getSummary(currentProfile.getMaxBookSummaryLength());    if (Helper.isNotNullOrEmpty(summary)) {      entry.addContent(JDOMManager.element("summary").addContent(summary));    }  }  if (isFullEntry) {    addNavigationLinks(entry,book);    addExternalLinks(entry,book);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UXTAH");  translateAll(environment,instruction,"UXTAH",instructions);}  }
class C{  public void test_binarySearchLjava_util_ListLjava_lang_ObjectLjava_util_Comparator(){  LinkedList<Integer> lst=new LinkedList<Integer>();  lst.add(new Integer(30));  Collections.sort(lst,null);  int index=Collections.binarySearch(lst,new Integer(2),null);  assertEquals(-1,index);  LinkedList<String> lls=new LinkedList<String>();  lls.add("1");  lls.add("2");  lls.add("3");  lls.add("4");  lls.add("");  LinkedList<String> ll=lls;  try {    Collections.binarySearch(ll,new Integer(10),null);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  public static String tranDate2DateTimeStr(Date date){  return tranDate2DateTimeStr(date,timeZone);}  }
class C{  @Override public int hashCode(){  return this.path.hashCode();}  }
class C{  private DiffToolLogMessages(){}  }
class C{  public synchronized boolean checkMouseMode(){  coolMM=false;  Layer layer=getAppropriateLayer();  MapMouseListener mml=layer.getMapMouseListener();  setCurrentLayerMapMouseListener(mml);  if (mml != null) {    String[] mmsl=mml.getMouseModeServiceList();    for (int i=0; i < mmsl.length; i++) {      if (mmsl[i].intern() == mmID) {        coolMM=true;        break;      }    }  }  return coolMM;}  }
class C{  private void markHashtags(TextView textView,String source){  String hashtaggedMessage=source;  String hexColor=String.format("#%06X",(0xFFFFFF & getResources().getColor(R.color.app_purple)));  Set<String> hashtags=Utils.getHashtags(source);  for (  String hashtag : hashtags) {    String textBefore=hashtaggedMessage.substring(0,hashtaggedMessage.indexOf(hashtag));    String textAfter=hashtaggedMessage.substring(hashtaggedMessage.indexOf(hashtag) + hashtag.length());    hashtaggedMessage=textBefore + "<font color=" + hexColor+ ">"+ hashtag+ "</font>"+ textAfter;  }  textView.setText(Html.fromHtml(hashtaggedMessage));}  }
class C{  private static boolean initializeStatistics(GemFireCacheImpl currentCache){  if (currentCache == null) {    return false;  }  LogWriterI18n logger=currentCache.getLoggerI18n();  InternalDistributedSystem ds=(InternalDistributedSystem)currentCache.getDistributedSystem();  if (currentCache.isClosed()) {    return false;  }  boolean restart=lastInitializedCache != currentCache;  lastInitializedCache=currentCache;  if (restart) {    if (logger.infoEnabled()) {      logger.info(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_INTIALIZING_THE_STATISTICS);    }    cachePerfStats=null;    vmStats=null;  }  if (cachePerfStats == null) {    StatisticsType type=ds.findType("CachePerfStats");    if (type != null) {      Statistics[] statistics=ds.findStatisticsByType(type);      if (statistics != null && statistics.length > 0) {        cachePerfStats=statistics[0];      }    }  }  if (vmStats == null) {    StatisticsType type=ds.findType("VMStats");    if (type != null) {      Statistics[] statistics=ds.findStatisticsByType(type);      if (statistics != null && statistics.length > 0) {        vmStats=statistics[0];      }    }  }  if (cachePerfStats == null && restart) {    logger.warning(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_0_ARE_NOT_AVAILABLE,"CachePerfStats");  }  if (vmStats == null && restart) {    logger.warning(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_0_ARE_NOT_AVAILABLE,"VMStats");  }  return true;}  }
class C{  public CertificateMessage(byte[] rawPublicKeyBytes,InetSocketAddress peerAddress){  super(peerAddress);  if (rawPublicKeyBytes == null) {    throw new NullPointerException("Raw public key byte array must not be null");  } else {    this.rawPublicKeyBytes=Arrays.copyOf(rawPublicKeyBytes,rawPublicKeyBytes.length);    length+=this.rawPublicKeyBytes.length;  }}  }
class C{  public _BuildServiceHostUpdate(){  super();}  }
class C{  public static void main(final String[] args){  if (args.length == 3) {    run(args[0],args[1],args[2],args[3]);  }}  }
class C{  public boolean checkMaxIterations(final int iteration,final Type ecType){  if (iteration < maxIterations_)   return false;  this.ecType=Type.MaxIterations;  throw new UnsupportedOperationException("work in progress");}  }
class C{  public Builder binLogFileName(String fileName){  this.innerBinLogFileName=fileName;  return this;}  }
class C{  public static BoundingBox create(Coord[] coords){  if (coords.length <= 0) {    throw new RuntimeException("There must be at least 1 coordinate.");  }  double north=coords[0].getLatitude();  double south=coords[0].getLatitude();  double east=coords[0].getLongitude();  double west=coords[0].getLongitude();  boolean projected=true;  int clen=coords.length;  for (int i=0; i < clen; i++) {    Coord c=coords[i];    projected=c.isProjected();    north=Math.max(north,c.getLatitude());    east=Math.max(east,c.getLongitude());    south=Math.min(south,c.getLatitude());    west=Math.min(west,c.getLongitude());  }  return new BoundingBox(new Coord(south,west,projected),new Coord(north,east,projected));}  }
class C{  public static Stats of(Iterator<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  public void _serializeStruct(Struct struct,StringBuilder sb,Set<Object> done) throws ConverterException {  sb.append(goIn());  sb.append('{');  Iterator it=struct.keyIterator();  boolean doIt=false;  deep++;  while (it.hasNext()) {    String key=Caster.toString(it.next(),"");    if (doIt)     sb.append(',');    doIt=true;    sb.append(QUOTE_CHR);    sb.append(escape(key));    sb.append(QUOTE_CHR);    sb.append(':');    _serialize(struct.get(key,null),sb,done);  }  deep--;  sb.append('}');}  }
class C{  public ModifiableSolrParams add(String name,String... val){  String[] old=vals.put(name,val);  if (old != null) {    if (val == null || val.length < 1) {      String[] both=new String[old.length + 1];      System.arraycopy(old,0,both,0,old.length);      both[old.length]=null;      vals.put(name,both);    } else {      String[] both=new String[old.length + val.length];      System.arraycopy(old,0,both,0,old.length);      System.arraycopy(val,0,both,old.length,val.length);      vals.put(name,both);    }  }  return this;}  }
class C{  public SVGOMFEDistantLightElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static QuadEdge connect(QuadEdge a,QuadEdge b){  QuadEdge e=makeEdge(a.dest(),b.orig());  splice(e,a.lNext());  splice(e.sym(),b);  return e;}  }
class C{  public SelectIncomingWeightsAction(final NetworkPanel networkPanel){  super("Select Incoming Weights");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Select All Incoming Weights");}  }
class C{  public int numBroadcastPeers(Sha256Hash txHash){  lock.lock();  try {    cleanPool();    Entry entry=memoryPool.get(txHash);    if (entry == null) {      return 0;    } else     if (entry.tx == null) {      checkNotNull(entry.addresses);      return entry.addresses.size();    } else {      final Transaction tx=entry.tx.get();      if (tx == null) {        memoryPool.remove(txHash);        return 0;      } else {        checkState(entry.addresses == null);        return tx.getConfidence().numBroadcastPeers();      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static String create(Context context,Exception exception){  String message=context.getString(R.string.exception_message_generic);  if (exception instanceof NetworkConnectionException) {    message=context.getString(R.string.exception_message_no_connection);  } else   if (exception instanceof UserNotFoundException) {    message=context.getString(R.string.exception_message_user_not_found);  }  return message;}  }
class C{  private void handleUpdate(Message m){  String regionName=null;  Object key=null;  Part valuePart=null;  Object newValue=null;  byte[] deltaBytes=null;  Object fullValue=null;  boolean isValueObject=false;  int partCnt=0;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    this.isOpCompleted=false;    if (isDebugEnabled) {      logger.debug("Received put message of length ({} bytes)",m.getPayloadLength());    }    Part regionNamePart=m.getPart(partCnt++);    Part keyPart=m.getPart(partCnt++);    boolean isDeltaSent=((Boolean)m.getPart(partCnt++).getObject()).booleanValue();    valuePart=m.getPart(partCnt++);    Part callbackArgumentPart=m.getPart(partCnt++);    VersionTag versionTag=(VersionTag)m.getPart(partCnt++).getObject();    if (versionTag != null) {      versionTag.replaceNullIDs((InternalDistributedMember)this.endpoint.getMemberId());    }    Part isInterestListPassedPart=m.getPart(partCnt++);    Part hasCqsPart=m.getPart(partCnt++);    EventID eventId=(EventID)m.getPart(m.getNumberOfParts() - 1).getObject();    boolean withInterest=((Boolean)isInterestListPassedPart.getObject()).booleanValue();    boolean withCQs=((Boolean)hasCqsPart.getObject()).booleanValue();    regionName=regionNamePart.getString();    key=keyPart.getStringOrObject();    Object callbackArgument=callbackArgumentPart.getObject();    boolean isCreate=(m.getMessageType() == MessageType.LOCAL_CREATE);    if (isDebugEnabled) {      logger.debug("Putting entry for region: {} key: {} create: {}{} callbackArgument: {} withInterest={} withCQs={} eventID={} version={}",regionName,key,isCreate,(valuePart.isObject() ? new StringBuilder(" value: ").append(deserialize(valuePart.getSerializedForm())) : ""),callbackArgument,withInterest,withCQs,eventId,versionTag);    }    LocalRegion region=(LocalRegion)cacheHelper.getRegion(regionName);    if (!isDeltaSent) {      byte[] serializedForm=valuePart.getSerializedForm();      if (isCreate && InternalDataSerializer.isSerializedNull(serializedForm)) {      } else {        newValue=valuePart.getSerializedForm();      }      if (withCQs) {        fullValue=valuePart.getObject();      }      isValueObject=valuePart.isObject();    } else {      deltaBytes=valuePart.getSerializedForm();      isValueObject=true;    }    if (region == null) {      if (isDebugEnabled && !quitting()) {        logger.debug("{}: Region named {} does not exist",this,regionName);      }    } else     if (region.hasServerProxy() && ServerResponseMatrix.checkForValidStateAfterNotification(region,key,m.getMessageType()) && (withInterest || !withCQs)) {      @Released EntryEventImpl newEvent=null;      try {        newEvent=EntryEventImpl.create(region,((m.getMessageType() == MessageType.LOCAL_CREATE) ? Operation.CREATE : Operation.UPDATE),key,null,callbackArgument,true,eventId.getDistributedMember());        newEvent.setVersionTag(versionTag);        newEvent.setFromServer(true);        region.basicBridgeClientUpdate(eventId.getDistributedMember(),key,newValue,deltaBytes,isValueObject,callbackArgument,m.getMessageType() == MessageType.LOCAL_CREATE,qManager.getState().getProcessedMarker() || !this.isDurableClient,newEvent,eventId);        this.isOpCompleted=true;        if (withCQs && isDeltaSent) {          fullValue=newEvent.getNewValue();        }      } catch (      InvalidDeltaException ide) {        Part fullValuePart=requestFullValue(eventId,"Caught InvalidDeltaException.");        region.getCachePerfStats().incDeltaFullValuesRequested();        fullValue=newValue=fullValuePart.getObject();        isValueObject=Boolean.valueOf(fullValuePart.isObject());        region.basicBridgeClientUpdate(eventId.getDistributedMember(),key,newValue,null,isValueObject,callbackArgument,m.getMessageType() == MessageType.LOCAL_CREATE,qManager.getState().getProcessedMarker() || !this.isDurableClient,newEvent,eventId);        this.isOpCompleted=true;      } finally {        if (newEvent != null)         newEvent.release();      }      if (isDebugEnabled) {        logger.debug("Put entry for region: {} key: {} callbackArgument: {}",regionName,key,callbackArgument);      }    }    if (withCQs) {      Part numCqsPart=m.getPart(partCnt++);      if (isDebugEnabled) {        logger.debug("Received message has CQ Event. Number of cqs interested in the event : {}",numCqsPart.getInt() / 2);      }      partCnt=processCqs(m,partCnt,numCqsPart.getInt(),m.getMessageType(),key,fullValue,deltaBytes,eventId);      this.isOpCompleted=true;    }  } catch (  Exception e) {    String message=LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_PUT_ENTRY_REGION_0_KEY_1_VALUE_2.toLocalizedString(new Object[]{regionName,key,deserialize(valuePart.getSerializedForm())});    handleException(message,e);  }}  }
class C{  private void findCarRulesQuickly() throws Exception {  ArrayList<Object>[] rules;  for (int j=0; j < m_Ls.size(); j++) {    ArrayList<Object> currentLabeledItemSets=m_Ls.get(j);    Enumeration<Object> enumLabeledItemSets=new WekaEnumeration<Object>(currentLabeledItemSets);    while (enumLabeledItemSets.hasMoreElements()) {      LabeledItemSet currentLabeledItemSet=(LabeledItemSet)enumLabeledItemSets.nextElement();      rules=currentLabeledItemSet.generateRules(m_minMetric,false);      for (int k=0; k < rules[0].size(); k++) {        m_allTheRules[0].add(rules[0].get(k));        m_allTheRules[1].add(rules[1].get(k));        m_allTheRules[2].add(rules[2].get(k));      }    }  }}  }
class C{  public ReceptionReport generateReceptionReport(){  ReceptionReport report=new ReceptionReport(ssrc);  updateReceptionReport(report);  return report;}  }
class C{  public void submit(Callable<?> task){  while (queue.isEmpty()) {    int active0=active.get();    if (active0 == maxTasks)     break;    if (active.compareAndSet(active0,active0 + 1)) {      startThread(task);      return;    }  }  try {    while (!queue.offer(task,100,TimeUnit.MILLISECONDS)) {      if (shutdown)       return;    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    return;  }  startFromQueue();}  }
class C{  public boolean hasSource(Fact other){  return derivation != null && derivation.hasSource(other);}  }
class C{  public void erase(ItemStack stack){  stack.setTagCompound(null);}  }
class C{  public HashMap<String,Integer> statisticsEnd(){  HashMap<String,Integer> result=statistics;  statistics=null;  return result;}  }
class C{  public BalancedBinaryNode<K,V> left(){  return left;}  }
class C{  public static void main(String[] args){  try {    JettySolrRunner jetty=new JettySolrRunner(".","/solr",8983);    jetty.start();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public boolean supportsSchemasInTableDefinitions(){  debugCodeCall("supportsSchemasInTableDefinitions");  return true;}  }
class C{  public static boolean isMagic(byte[] input){  if (input == null || input.length != MAGIC.length) {    return false;  }  for (int i=0; i < MAGIC.length; i++) {    if (MAGIC[i] != input[i]) {      return false;    }  }  return true;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public static void clickMenuItem(String name){  if (verbose) {    log("clickMenuItem(" + name + ")");  }  Form f=Display.getInstance().getCurrent();  for (int iter=0; iter < f.getCommandCount(); iter++) {    Command c=f.getCommand(iter);    if (name.equals(c.getCommandName())) {      f.dispatchCommand(c,new ActionEvent(c,ActionEvent.Type.Command));      return;    }  }  throw new RuntimeException("Command not found: " + name);}  }
class C{  public Builder frequency(Frequency frequency){  this.frequency=frequency;  return this;}  }
class C{  private void firePropertyChanged(PropertyDescriptor property,Object newValue,Object oldValue){  boolean notify;  if (alwaysNotifyListeners) {    notify=true;  } else {    notify=false;    if ((newValue != null || oldValue != null)) {      if (newValue == null || oldValue == null || !newValue.equals(oldValue)) {        notify=true;      }    }  }  if (notify) {    List<PropertyChangeListener> _listeners;    PropertyChangeEvent event=new PropertyChangeEvent(this,property.getName(),oldValue,newValue);synchronized (this) {      _listeners=new LinkedList<PropertyChangeListener>(listeners);    }    Adjustable adj=property.getWriteMethod().getAnnotation(Adjustable.class);    try {      for (      PropertyChangeListener listener : _listeners) {        Method actionMethod=null;        if (adj.button() && newValue != null && (Boolean)newValue) {          try {            actionMethod=listener.getClass().getMethod(property.getName());          } catch (          Exception e) {          }        }        if (actionMethod == null) {          listener.propertyChange(event);        } else {          try {            actionMethod.invoke(listener);          } catch (          Exception e) {            throw new IllegalStateException(e);          }        }      }    }  finally {      if (adj.button()) {        values.put(norm(property.getName()),false);      }    }  }}  }
class C{  @NotNull public TabBuilder title(@NotNull String title){  this.title=title;  return this;}  }
class C{  public void run(){  try {    handleClient();  } catch (  IOException ioe) {    link.cleanUp();    link=null;    if (com.bbn.openmap.util.Debug.debugging("link")) {      System.err.println(ioe);    }    com.bbn.openmap.util.Debug.output("LinkServer: Client disconnected");    System.gc();  }}  }
class C{  private TaskResourceRep enqueueJob(VirtualDataCenter vdc,JobType jobType){  return enqueueJob(vdc,jobType,null);}  }
class C{  public boolean isPolyfill(){  return false;}  }
class C{  public boolean isDurableWriteEnabled(){  return this.getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,BKDL_IS_DURABLE_WRITE_ENABLED_DEFAULT);}  }
class C{  public void step(){  setIteration(iteration + 1);}  }
class C{  public SQLIntegrityConstraintViolationException(){}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  final float stroke=paint.getStrokeWidth();  if (renderer.isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStrokeWidth(renderer.getPointStrokeWidth());    paint.setStyle(Style.STROKE);  }  int length=points.size();switch (renderer.getPointStyle()) {case X:    paint.setStrokeWidth(renderer.getPointStrokeWidth());  for (int i=0; i < length; i+=2) {    drawX(canvas,paint,points.get(i),points.get(i + 1));  }break;case CIRCLE:for (int i=0; i < length; i+=2) {drawCircle(canvas,paint,points.get(i),points.get(i + 1));}break;case TRIANGLE:float[] path=new float[6];for (int i=0; i < length; i+=2) {drawTriangle(canvas,paint,path,points.get(i),points.get(i + 1));}break;case SQUARE:for (int i=0; i < length; i+=2) {drawSquare(canvas,paint,points.get(i),points.get(i + 1));}break;case DIAMOND:path=new float[8];for (int i=0; i < length; i+=2) {drawDiamond(canvas,paint,path,points.get(i),points.get(i + 1));}break;case POINT:for (int i=0; i < length; i+=2) {canvas.drawPoint(points.get(i),points.get(i + 1),paint);}break;}paint.setStrokeWidth(stroke);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ArrayVal) {    return ((ArrayVal)o).getVector().equals(getVector());  }  return false;}  }
class C{  protected void startProgrammer(DecoderFile decoderFile,RosterEntry r){  log.error("startProgrammer method in NewLocoSelPane should have been overridden");}  }
class C{  public ServerParser(String server){  super(server);}  }
class C{  public SafePath findFirstEndpoint(){  if (previous == null) {    return null;  }  if (previous.previous == null) {    return this;  }  return previous.findFirstEndpoint();}  }
class C{  public Vertex applyCOUNT(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex source=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex relationship;  if (arguments.size() == 1) {    relationship=network.createVertex(Primitive.SEQUENCE);  } else {    relationship=source;    source=arguments.get(1).getTarget().applyQuotient(variables,network);  }  Collection<Relationship> values=source.getRelationships(relationship);  BigInteger count=null;  if (values == null) {    count=BigInteger.valueOf(0);  } else {    count=BigInteger.valueOf(values.size());  }  return network.createVertex(count);}  }
class C{  private void computeShortestPathsFromSource(V source){  BFSDistanceLabeler<V,E> labeler=new BFSDistanceLabeler<V,E>();  labeler.labelDistances(mGraph,source);  distances=labeler.getDistanceDecorator();  Map<V,Number> currentSourceSPMap=new HashMap<V,Number>();  Map<V,E> currentSourceEdgeMap=new HashMap<V,E>();  for (  V vertex : mGraph.getVertices()) {    Number distanceVal=distances.get(vertex);    if (distanceVal != null && distanceVal.intValue() >= 0) {      currentSourceSPMap.put(vertex,distanceVal);      int minDistance=distanceVal.intValue();      for (      E incomingEdge : mGraph.getInEdges(vertex)) {        for (        V neighbor : mGraph.getIncidentVertices(incomingEdge)) {          if (neighbor.equals(vertex))           continue;          Number predDistanceVal=distances.get(neighbor);          int pred_distance=predDistanceVal.intValue();          if (pred_distance < minDistance && pred_distance >= 0) {            minDistance=predDistanceVal.intValue();            currentSourceEdgeMap.put(vertex,incomingEdge);          }        }      }    }  }  mDistanceMap.put(source,currentSourceSPMap);  mIncomingEdgeMap.put(source,currentSourceEdgeMap);}  }
class C{  public int showDialog(){  m_Result=CANCEL_OPTION;  int[] origSelected=m_List.getSelectedIndices();  setVisible(true);  if (m_Result == CANCEL_OPTION) {    m_List.setSelectedIndices(origSelected);  }  return m_Result;}  }
class C{  public Converter lookup(Class type) throws Exception {  Converter converter=cache.fetch(type);  if (converter == null) {    return create(type);  }  return converter;}  }
class C{  public void clearRequestProperty(String name){  Assertions.checkNotNull(name);synchronized (requestProperties) {    requestProperties.remove(name);  }}  }
class C{  public void init(IndicatorViewPart view){  this.view=view;}  }
class C{  public RectDrawer scaleRegistration(float regX,float regY){  setScaleRegistration(regX,regY);  return this;}  }
class C{  protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType,BeanProperty property){  JsonSerializer<Object> ser=_knownSerializers.untypedValueSerializer(runtimeType);  if (ser != null) {    return ser;  }  ser=_serializerCache.untypedValueSerializer(runtimeType);  if (ser != null) {    return ser;  }  try {    return _createAndCacheUntypedSerializer(runtimeType,property);  } catch (  Exception e) {    return null;  }}  }
class C{  public void release(){  shard.checkinCommand(this);}  }
class C{  @Override protected URLConnection openConnection(URL u) throws IOException {  return new FtpURLConnection(u);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public FasStableConcurrent2(Graph initialGraph,IndependenceTest test){  this.test=test;  this.initialGraph=initialGraph;}  }
class C{  public void initializeAttributes(AttributeSet attrs){  attributes=getContext().obtainStyledAttributes(attrs,R.styleable.dragger_layout);  if (attributes != null) {    draggerLimit=attributes.getFloat(R.styleable.dragger_layout_drag_limit,DEFAULT_DRAG_LIMIT);    draggerPosition=attributes.getInt(R.styleable.dragger_layout_drag_position,DEFAULT_DRAG_POSITION);  }}  }
class C{  public static byte[] decode(String data){  int len=data.length() / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  @Override public void ready(){  if (attacks.isEmpty() && GUIPreferences.getInstance().getNagForNoAction()) {    ConfirmDialog response=clientgui.doYesNoBotherDialog(Messages.getString("PhysicalDisplay.DontPhysicalAttackDialog.title"),Messages.getString("PhysicalDisplay.DontPhysicalAttackDialog.message"));    if (!response.getShowAgain()) {      GUIPreferences.getInstance().setNagForNoAction(false);    }    if (!response.getAnswer()) {      return;    }  }  disableButtons();  clientgui.getClient().sendAttackData(cen,attacks);  attacks.removeAllElements();  ash.closeDialog();  if (ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  endMyTurn();}  }
class C{  private final void putChar(char ch){  if (sp == sbuf.length) {    char[] newsbuf=new char[sbuf.length * 2];    System.arraycopy(sbuf,0,newsbuf,0,sbuf.length);    sbuf=newsbuf;  }  sbuf[sp++]=ch;}  }
class C{  private static XMLConfiguration initializeClassVariable(final String xmlFileName){synchronized (EGovConfig.class) {    XMLConfiguration configuration=null;    try {      if (configurationMap.get(xmlFileName) == null) {        configuration=new XMLConfiguration(toURL(xmlFileName));        configurationMap.put(xmlFileName,configuration);      } else {        configuration=configurationMap.get(xmlFileName);      }      return configuration;    } catch (    final ConfigurationException cex) {      LOGGER.error("Error occurred in initializeClassVariable",cex);      throw new ApplicationRuntimeException("Exception in initializeClassVariable",cex);    }catch (    final Exception exp) {      LOGGER.error("Error occurred in initializeClassVariable",exp);      throw new ApplicationRuntimeException("Exception in initializeClassVariable",exp);    }catch (    final Error exp) {      LOGGER.error("Error occurred in initializeClassVariable",exp);      throw new ApplicationRuntimeException("Exception in initializeClassVariable",exp);    }  }}  }
class C{  protected void popNavigationStack(){  if (baseFormNavigationStack != null && baseFormNavigationStack.size() > 0) {    baseFormNavigationStack.removeElementAt(baseFormNavigationStack.size() - 1);  }}  }
class C{  public static ComponentAttribute valueOfAttribute(String name){  ComponentAttribute[] componentAtts=values();  for (int i=0; i < componentAtts.length; i++) {    if (componentAtts[i].getAttributeName().equals(name)) {      return componentAtts[i];    }  }  return null;}  }
class C{  public void testCertificateFactory12(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  InputStream is1=null;  InputStream is2=new ByteArrayInputStream(new byte[10]);  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(is1);      fail("generateCertificate must thrown CertificateException or NullPointerException when input stream is null");    } catch (    CertificateException e) {    }catch (    NullPointerException e) {    }    try {      certFs[i].generateCertPath(is2);      fail("generateCertificate must thrown CertificateException when input stream contains invalid datas");    } catch (    CertificateException e) {    }    Iterator<String> it=certFs[i].getCertPathEncodings();    while (it.hasNext()) {      String enc=it.next();      try {        certFs[i].generateCertPath(is1,enc);        fail("generateCertificate must thrown CertificateException or NullPointerException when input stream is null and encodings ".concat(enc));      } catch (      CertificateException e) {      }catch (      NullPointerException e) {      }      try {        certFs[i].generateCertPath(is2,enc);        fail("generateCertificate must thrown CertificateException when input stream contains invalid datas  and encodings ".concat(enc));      } catch (      CertificateException e) {      }    }  }}  }
class C{  public KeywordMap(boolean ignoreCase){  this(ignoreCase,52);  this.ignoreCase=ignoreCase;}  }
class C{  @Override protected void onResume(){  super.onResume();  LOG.d(TAG,"Resuming the App");  if (this.activityState == ACTIVITY_STARTING) {    this.activityState=ACTIVITY_RUNNING;    return;  }  if (this.appView == null) {    return;  }  this.getWindow().getDecorView().requestFocus();  this.appView.handleResume(this.keepRunning,this.activityResultKeepRunning);  if (!this.keepRunning || this.activityResultKeepRunning) {    if (this.activityResultKeepRunning) {      this.keepRunning=this.activityResultKeepRunning;      this.activityResultKeepRunning=false;    }  }}  }
class C{  static <T0,T1>Tuple2OfNullables<T0,T1> ofNullables(T0 e0,T1 e1){  return new Tuple2OfNullablesImpl<>(e0,e1);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public EditableOMCircle(OMCircle omc){  setGraphic(omc);}  }
class C{  @Override public boolean wasNull() throws SQLException {  return getOpenResultSet().wasNull();}  }
class C{  @Override public Object pushBut(final FormObject form){  final JButton pushBut=new JButton();  setupButton(pushBut,form);  setupUniversalFeatures(pushBut,form);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    pushBut.setEnabled(false);    pushBut.setDisabledIcon(pushBut.getIcon());    pushBut.setDisabledSelectedIcon(pushBut.getSelectedIcon());  }  return pushBut;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    double east=0, west=0, north=0, south=0;    if (inputFile.toLowerCase().endsWith(".dep")) {      WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");      double gridResX=input.getCellSizeX();      double gridResY=input.getCellSizeY();      east=input.getEast();      west=input.getWest();      north=input.getNorth();      south=input.getSouth();      input.close();    } else     if (inputFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      east=input.getxMax();      west=input.getxMin();      north=input.getyMax();      south=input.getyMin();    } else {      showFeedback("There was a problem reading the input file.");      return;    }    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    if (inputFile.toLowerCase().endsWith(".shp")) {      output.setProjectionStringFromOtherShapefile(new ShapeFile(inputFile));    }    int[] parts={0};    PointsList points=new PointsList();    points.addPoint(west,north);    points.addPoint(east,north);    points.addPoint(east,south);    points.addPoint(west,south);    points.addPoint(west,north);    Polygon poly=new Polygon(parts,points.getPointsArray());    Object[] rowData=new Object[1];    rowData[0]=new Double(1);    output.addRecord(poly,rowData);    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ExtentTest info(String details){  log(Status.INFO,details);  return this;}  }
class C{  @Override protected void computeFollowElements(final FollowElementCalculator calculator,final FollowElement element,final Multimap<Integer,List<AbstractElement>> visited){  if (stop) {    return;  }  final AbstractElement e=element.getGrammarElement();  if (!recurse.containsKey(e)) {    recurse.put(e,1);  } else {    recurse.put(e,recurse.get(e) + 1);  }  if (recurse.get(e) > 3) {    GAMA.getGui().debug("Infinite recursion detected in completion proposal for " + e);    stop=true;    recurse.clear();    return;  }  super.computeFollowElements(calculator,element,visited);}  }
class C{  void updateMnemonicBindingX(AbstractButton b){  int m=b.getMnemonic();  if (m != 0) {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map == null) {      map=new ComponentInputMapUIResource(b);      SwingUtilities.replaceUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW,map);    }    map.clear();    String className=b.getClass().getName();    int mask=InputEvent.ALT_MASK;    if (b instanceof JCheckBox || className.indexOf("VButton") != -1)     mask=InputEvent.SHIFT_MASK + InputEvent.CTRL_MASK;    map.put(KeyStroke.getKeyStroke(m,mask,false),"pressed");    map.put(KeyStroke.getKeyStroke(m,mask,true),"released");    map.put(KeyStroke.getKeyStroke(m,0,true),"released");  } else {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map != null)     map.clear();  }}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public static Set<Role> waitForRequiredRoles(Region<?,?> region,long timeout) throws InterruptedException {  if (region == null) {    throw new NullPointerException(LocalizedStrings.RequiredRoles_REGION_MUST_BE_SPECIFIED.toLocalizedString());  }  if (!(region instanceof DistributedRegion)) {    throw new IllegalStateException(LocalizedStrings.RequiredRoles_REGION_HAS_NOT_BEEN_CONFIGURED_WITH_REQUIRED_ROLES.toLocalizedString());  }  DistributedRegion dr=(DistributedRegion)region;  return dr.waitForRequiredRoles(timeout);}  }
class C{  public CurrencyException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void runCommitTriggers(){  new ArrayList<>(commitTriggers).forEach(null);  commitTriggers.clear();}  }
class C{  public void largestNonDiagonalMagnitude(CorrelationMatrix r){  TetradMatrix residual=r.getMatrix();  for (int i=0; i < residual.columns(); i++) {    double max=0;    for (int j=0; j < residual.columns(); j++) {      if (i == j)       continue;      double temp=Math.abs(residual.get(j,i));      if (temp > max)       max=temp;    }    residual.set(i,i,max);  }}  }
class C{  private void truncationFiller(byte[] buffer,int offset,int length){  for (int i=offset; i < offset + length; i++) {    buffer[i]=ByteFormatter.TRUNCATION_FILL;  }}  }
class C{  ImpreciseCutoverField(DateTimeField julianField,DateTimeField gregorianField,DurationField durationField,long cutoverMillis,boolean convertByWeekyear){  super(julianField,gregorianField,cutoverMillis,convertByWeekyear);  if (durationField == null) {    durationField=new LinkedDurationField(iDurationField,this);  }  iDurationField=durationField;}  }
class C{  public NoParameterValueException(String message,Throwable cause){  super(message,cause);}  }
class C{  @GET @Path("/{id}") @Description("Returns the job history for the given job history Id") @Produces(MediaType.APPLICATION_JSON) public HistoryDTO findById(@Context HttpServletRequest req,@PathParam("id") BigInteger id){  if (id == null || id.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Job History ID cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  History history=_historyService.findHistoryByPrimaryKey(id);  if (history != null) {    PrincipalUser jobOwner=_getJobOwner(history.getEntity().getId());    validateResourceAuthorization(req,jobOwner,getRemoteUser(req));    return HistoryDTO.transformToDto(history);  } else {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }}  }
class C{  public String writeHtmlLink(Impp property){  URI uri=property.getUri();  if (uri == null) {    return null;  }  String protocol=uri.getScheme();  String handle=uri.getSchemeSpecificPart();  for (  HtmlLinkFormat format : htmlLinkFormats) {    if (protocol.equals(format.getProtocol())) {      return format.buildLink(handle);    }  }  return uri.toASCIIString();}  }
class C{  public static void saveFilesystem(final int depth,String path){  EvidenceBuilder fsLog=new EvidenceBuilder(EvidenceType.FILESYSTEM);  if (path.equals("/")) {    if (Cfg.DEBUG) {      Check.log(TAG + " sendFilesystem: root");    }    expandRoot(fsLog,depth);  } else {    if (path.startsWith("//")) {      path=path.substring(1,path.length());    }    if (path.endsWith("/*")) {      path=path.substring(0,path.length() - 2);    }    if (path.startsWith("/")) {      expandPath(fsLog,path,depth,true);    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " Error: sendFilesystem: strange path, ignoring it. " + path);      }    }  }  fsLog.immediateClose();}  }
class C{  private void closeInvalidHttp2ChannelContexts(NettyChannelGroup group,long now){synchronized (group) {    Iterator<NettyChannelContext> it=group.inUseChannels.iterator();    while (it.hasNext()) {      NettyChannelContext http2Channel=it.next();      Channel channel=http2Channel.getChannel();      if (channel == null) {        continue;      }      if (http2Channel.hasActiveStreams()) {        continue;      }      long delta=now - http2Channel.getLastUseTimeMicros();      if (delta < CHANNEL_EXPIRATION_MICROS && http2Channel.isValid()) {        continue;      }      it.remove();      http2Channel.close();    }  }}  }
class C{  LogFile openLastFile(boolean readOnly) throws ReplicatorException, InterruptedException {  String logFileName=index.getLastFile();  return openFile(logFileName,readOnly);}  }
class C{  public void sendPlanetaryConditions(PlanetaryConditions conditions){  send(new Packet(Packet.COMMAND_SENDING_PLANETARY_CONDITIONS,conditions));}  }
class C{  public String printClusters(Cluster clustering,float threshold,HTMLFile f){  int maxSize=0;  ArrayList<Cluster> clusters=getClusters(clustering,threshold);  for (Iterator<Cluster> i=clusters.iterator(); i.hasNext(); ) {    Cluster cluster=i.next();    if (cluster.size() > maxSize)     maxSize=cluster.size();  }  TreeSet<Cluster> sorted=new TreeSet<Cluster>(clusters);  clusters=null;  return outputClustering(f,sorted,maxSize);}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new MalformedJsonException(message + locationString());}  }
class C{  private View makeAndAddView(int position,int offset,int x,boolean fromLeft){  View child;  child=mRecycler.get();  child=mAdapter.getView(position,child,this);  setUpChild(child,offset,x,fromLeft);  return child;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String doubleArrayToClassNames(int[] labels,String[] classNames,Character separatorChar){  StringBuffer buffer=new StringBuffer();  for (int y=0; y < labels.length; y++) {    if (labels[y] == 1) {      buffer.append(classNames[y] + separatorChar);    }  }  String classString;  try {    classString=buffer.substring(0,buffer.length() - 1).toString();  } catch (  StringIndexOutOfBoundsException e) {    classString="";  }  return classString;}  }
class C{  public boolean isVmDirectPathGen2Active(){  return vmDirectPathGen2Active;}  }
class C{  @Override public synchronized void processClose(WebSocketChannel channel,int code,String reason){  nextHandler.processClose(channel,code,reason);}  }
class C{  private static String[] splitWorker(String str,String separatorChars,int max,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  List list=new ArrayList();  int sizePlus1=1;  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  if (separatorChars == null) {    while (i < len) {      if (Character.isWhitespace(str.charAt(i))) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else   if (separatorChars.length() == 1) {    char sep=separatorChars.charAt(0);    while (i < len) {      if (str.charAt(i) == sep) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else {    while (i < len) {      if (separatorChars.indexOf(str.charAt(i)) >= 0) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  }  if (match || (preserveAllTokens && lastMatch)) {    list.add(str.substring(start,i));  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  public static void mapTransactions(DistributedSystem distSystem){  try {    TransactionUtils.setLogWriter(distSystem.getLogWriter().convertToLogWriterI18n());    cleanup();    if (IGNORE_JTA) {      return;    }    ctx=new InitialContext();    doTransactionLookup();  } catch (  NamingException ne) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (ne instanceof NoInitialContextException) {      String exception="JNDIInvoker::mapTransactions:: No application server context found, Starting GemFire JNDI Context Context ";      if (writer.finerEnabled())       writer.finer(exception);      try {        initializeGemFireContext();        transactionManager=TransactionManagerImpl.getTransactionManager();        ctx.rebind("java:/TransactionManager",transactionManager);        if (writer.fineEnabled())         writer.fine("JNDIInvoker::mapTransactions::Bound TransactionManager to Context GemFire JNDI Tree");        UserTransactionImpl utx=new UserTransactionImpl();        ctx.rebind("java:/UserTransaction",utx);        if (writer.fineEnabled())         writer.fine("JNDIInvoker::mapTransactions::Bound Transaction to Context GemFire JNDI Tree");      } catch (      NamingException ne1) {        if (writer.infoEnabled())         writer.info(LocalizedStrings.JNDIInvoker_JNDIINVOKERMAPTRANSACTIONSNAMINGEXCEPTION_WHILE_BINDING_TRANSACTIONMANAGERUSERTRANSACTION_TO_GEMFIRE_JNDI_TREE);      }catch (      SystemException se1) {        if (writer.infoEnabled())         writer.info(LocalizedStrings.JNDIInvoker_JNDIINVOKERMAPTRANSACTIONSSYSTEMEXCEPTION_WHILE_BINDING_USERTRANSACTION_TO_GEMFIRE_JNDI_TREE);      }    } else     if (ne instanceof NameNotFoundException) {      String exception="JNDIInvoker::mapTransactions:: No TransactionManager associated to Application server context, trying to bind GemFire TransactionManager";      if (writer.finerEnabled())       writer.finer(exception);      try {        transactionManager=TransactionManagerImpl.getTransactionManager();        ctx.rebind("java:/TransactionManager",transactionManager);        if (writer.fineEnabled())         writer.fine("JNDIInvoker::mapTransactions::Bound TransactionManager to Application Server Context");        UserTransactionImpl utx=new UserTransactionImpl();        ctx.rebind("java:/UserTransaction",utx);        if (writer.fineEnabled())         writer.fine("JNDIInvoker::mapTransactions::Bound UserTransaction to Application Server Context");      } catch (      NamingException ne1) {        if (writer.infoEnabled())         writer.info(LocalizedStrings.JNDIInvoker_JNDIINVOKERMAPTRANSACTIONSNAMINGEXCEPTION_WHILE_BINDING_TRANSACTIONMANAGERUSERTRANSACTION_TO_APPLICATION_SERVER_JNDI_TREE);      }catch (      SystemException se1) {        if (writer.infoEnabled())         writer.info(LocalizedStrings.JNDIInvoker_JNDIINVOKERMAPTRANSACTIONSSYSTEMEXCEPTION_WHILE_BINDING_TRANSACTIONMANAGERUSERTRANSACTION_TO_APPLICATION_SERVER_JNDI_TREE);      }    }  }}  }
class C{  private void openSession(String aConfig) throws Exception {  final String resource="org/apache/ibatis/submitted/automatic_lazy_loading/ibatis-automatic-lazy-load-" + aConfig + ".xml";  Reader batisConfigReader=Resources.getResourceAsReader(resource);  SqlSessionFactory sqlSessionFactory;  try {    sqlSessionFactory=new SqlSessionFactoryBuilder().build(batisConfigReader);  } catch (  Exception anException) {    throw new RuntimeException("Mapper configuration failed, expected this to work: " + anException.getMessage(),anException);  }  SqlSession session=sqlSessionFactory.openSession();  Connection conn=session.getConnection();  ScriptRunner runner=new ScriptRunner(conn);  runner.setLogWriter(null);  runner.setErrorLogWriter(null);  Reader createScriptReader=Resources.getResourceAsReader("org/apache/ibatis/submitted/automatic_lazy_loading/create.sql");  runner.runScript(createScriptReader);  sqlSession=sqlSessionFactory.openSession();}  }
class C{  public AppendableWriter(){}  }
class C{  public synchronized Vertex findById(Number id){  if (id == null) {    return null;  }  return getEntityManager().find(BasicVertex.class,id,properties);}  }
class C{  public static float[][] calc(int[] xpoints,int[] ypoints,boolean geometryClosed,int steps){  if (geometryClosed) {    return new NatCubicSpline.CLOSED().withSteps(steps).calc(xpoints,ypoints);  }  return new NatCubicSpline().withSteps(steps).calc(xpoints,ypoints);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void classLoaderInit(DynamicClassLoader loader){}  }
class C{  static public void inssort(long[] array){  long tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  protected Anonymous_complexAttribute_1_Impl(){  super();}  }
class C{  public static ASTUpdateSequence parseUpdateSequence(String sequence) throws TokenMgrError, ParseException {  SyntaxTreeBuilder stb=new SyntaxTreeBuilder(new StringReader(sequence));  stb.jj_input_stream.setTabSize(1);  ASTUpdateSequence seq=stb.UpdateSequence();  seq.setSourceString(sequence);  return seq;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.128 -0500",hash_original_method="4CD7AC7DB8F833D7B66F15805AD0D408",hash_generated_method="03BB236682C09B8F2AC30D9CC9680E56") public static float[] temporalSampling(GestureStroke stroke,int numPoints){  final float increment=stroke.length / (numPoints - 1);  int vectorLength=numPoints * 2;  float[] vector=new float[vectorLength];  float distanceSoFar=0;  float[] pts=stroke.points;  float lstPointX=pts[0];  float lstPointY=pts[1];  int index=0;  float currentPointX=Float.MIN_VALUE;  float currentPointY=Float.MIN_VALUE;  vector[index]=lstPointX;  index++;  vector[index]=lstPointY;  index++;  int i=0;  int count=pts.length / 2;  while (i < count) {    if (currentPointX == Float.MIN_VALUE) {      i++;      if (i >= count) {        break;      }      currentPointX=pts[i * 2];      currentPointY=pts[i * 2 + 1];    }    float deltaX=currentPointX - lstPointX;    float deltaY=currentPointY - lstPointY;    float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);    if (distanceSoFar + distance >= increment) {      float ratio=(increment - distanceSoFar) / distance;      float nx=lstPointX + ratio * deltaX;      float ny=lstPointY + ratio * deltaY;      vector[index]=nx;      index++;      vector[index]=ny;      index++;      lstPointX=nx;      lstPointY=ny;      distanceSoFar=0;    } else {      lstPointX=currentPointX;      lstPointY=currentPointY;      currentPointX=Float.MIN_VALUE;      currentPointY=Float.MIN_VALUE;      distanceSoFar+=distance;    }  }  for (i=index; i < vectorLength; i+=2) {    vector[i]=lstPointX;    vector[i + 1]=lstPointY;  }  return vector;}  }
class C{  private static Pair<String,String> preIndexedRRX(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,bt,"C",wd,String.valueOf(31),dw,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,bt,String.valueOf(-1),dw,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  @Override public synchronized boolean next() throws SQLException {  return super.next();}  }
class C{  public void addChangeListener(ChangeListener l){  if (l == null)   return;  if (listeners == null)   listeners=new ArrayList<>();  if (listeners.contains(l))   return;  listeners.add(l);}  }
class C{  private boolean isRunning(){  Collection<Channel> channels=getChannels();  for (  Channel channel : channels) {    if (DefaultFuture.hasFuture(channel)) {      return true;    }  }  return false;}  }
class C{  public String engineGetCertificateAlias(Certificate cert){  Certificate certElem;  Enumeration<String> e=entries.keys();  while (e.hasMoreElements()) {    String alias=e.nextElement();    Object entry=entries.get(alias);    if (entry instanceof TrustedCertEntry) {      certElem=((TrustedCertEntry)entry).cert;    } else     if ((entry instanceof PrivateKeyEntry) && (((PrivateKeyEntry)entry).chain != null)) {      certElem=((PrivateKeyEntry)entry).chain[0];    } else {      continue;    }    if (certElem.equals(cert)) {      return alias;    }  }  return null;}  }
class C{  public void release(){  helper.close();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.513 -0500",hash_original_method="9DAC7AFA4C14A1022E9DEC304018391F",hash_generated_method="B2E7772166FCACAF852F55F44CB46D51") public void sendMessage(Message msg){  msg.replyTo=mSrcMessenger;  try {    mDstMessenger.send(msg);  } catch (  RemoteException e) {    replyDisconnected(STATUS_SEND_UNSUCCESSFUL);  }}  }
class C{  public static void premain(String args,Instrumentation instrumentation){  if (BootstrapMain.instrumentation == null) {    BootstrapMain.instrumentation=instrumentation;  } else {    throw new IllegalStateException("Premain method cannot be called twice (" + BootstrapMain.instrumentation + ")");  }}  }
class C{  public Socks4Message(InputStream in,boolean clientMode) throws IOException {  msgBytes=null;  read(in,clientMode);}  }
class C{  public void process(JCas jCas) throws AnalysisEngineProcessException {  Token t1=new Token(jCas,0,4);  t1.addToIndexes();  Token t2=new Token(jCas,5,7);  t2.addToIndexes();  Token t3=new Token(jCas,8,12);  t3.addToIndexes();  Token t4=new Token(jCas,13,17);  t4.addToIndexes();  Token t5=new Token(jCas,18,22);  t5.addToIndexes();  Token t6=new Token(jCas,22,23);  t6.addToIndexes();  Token t7=new Token(jCas,10,12);  t7.addToIndexes();  Token t8=new Token(jCas,15,20);  t8.addToIndexes();  Token t9=new Token(jCas,0,23);  t9.addToIndexes();}  }
class C{  public void addMatching(final ConversationStates state,final String triggerString,final ExpressionMatcher matcher,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,Arrays.asList(triggerString),matcher,condition,reply,action);  add(triggerExpressions,state,condition,secondary,nextState,reply,action);}  }
class C{  private static int colToLoc(int col,Vector<MappingPair> vec){  int loc=col;  for (int i=0; (i < vec.size()) && (vec.elementAt(i).col <= col); i++) {    loc=loc + vec.elementAt(i).inc;  }  return loc;}  }
class C{  public Map<String,Method> members(){  return members;}  }
class C{  static public Cylinder computeVerticalBoundingCylinder(Globe globe,double verticalExaggeration,Sector sector){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double[] minAndMaxElevations=globe.getMinAndMaxElevations(sector);  return computeVerticalBoundingCylinder(globe,verticalExaggeration,sector,minAndMaxElevations[0],minAndMaxElevations[1]);}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  KeyIterator(QName name,Vector keyDeclarations){  super(Axis.ALL);  m_keyDeclarations=keyDeclarations;  m_name=name;}  }
class C{  public void keyPressed(KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_ENTER)   m_adaptee.keyPressed(e);}  }
class C{  public static String ucfirst(String input){  return withFirst(input,null);}  }
class C{  protected void findCorrelatedNodes(CorrelationIdentifier cid,Set<Node> nodes){  if (isCorrelated(cid)) {    nodes.add(this);  }}  }
class C{  protected void readNetscapeExt(){  do {    readBlock();    if (block[0] == 1) {      final int b1=(block[1]) & 0xff;      final int b2=(block[2]) & 0xff;      loopCount=(b2 << 8) | b1;    }  } while ((blockSize > 0) && !err());}  }
class C{  public CategoryLabelPosition(RectangleAnchor categoryAnchor,TextBlockAnchor labelAnchor,CategoryLabelWidthType widthType,float widthRatio){  this(categoryAnchor,labelAnchor,TextAnchor.CENTER,0.0,widthType,widthRatio);}  }
class C{  public ImportTrustedCertificateAction(KseFrame kseFrame){  this(kseFrame,null);}  }
class C{  public static Bitmap resizeBitmapToFit(Bitmap source,Integer fitWidth,Integer fitHeight){  return ThumbnailUtils.extractThumbnail(source,fitWidth,fitHeight);}  }
class C{  public ValueGrid2DPortrayal3D(){  this("Value");}  }
class C{  public static ExprFloat toExprFloat(Expression expr){  if (expr instanceof ExprFloat)   return (ExprFloat)expr;  if (expr instanceof Literal) {    Double dbl=((Literal)expr).getDouble(null);    if (dbl != null)     return expr.getFactory().createLitFloat((float)dbl.doubleValue(),expr.getStart(),expr.getEnd());  }  return new CastFloat(expr);}  }
class C{  public IRI evaluate(IRIFunction node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value argValue=evaluate(node.getArg(),bindings);  if (argValue instanceof Literal) {    final Literal lit=(Literal)argValue;    String uriString=lit.getLabel();    final String baseURI=node.getBaseURI();    if (!URIUtil.isValidURIReference(uriString)) {      if (baseURI != null) {        uriString=baseURI + uriString;        if (!URIUtil.isValidURIReference(uriString)) {          throw new ValueExprEvaluationException("not a valid URI reference: " + uriString);        }      } else {        throw new ValueExprEvaluationException("not a valid URI reference: " + uriString);      }    }    IRI result=null;    try {      result=tripleSource.getValueFactory().createIRI(uriString);    } catch (    IllegalArgumentException e) {      throw new ValueExprEvaluationException(e.getMessage());    }    return result;  } else   if (argValue instanceof IRI) {    return ((IRI)argValue);  }  throw new ValueExprEvaluationException();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected boolean attachError() throws MessagingException {  return Boolean.valueOf(getInitParameter("attachError"));}  }
class C{  public boolean isNormal(){  if (!isValid) {    throw new IllegalStateException();  }  return getDepth() == 0;}  }
class C{  public String sqlMetadata_tableColumns(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_tableColumns(catalogName,schemaName);}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getVersion();}  }
class C{  public WiThrottleCreationAction(String name){  super(name);  if (jmri.InstanceManager.getNullableDefault(jmri.ThrottleManager.class) == null) {    setEnabled(false);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void enforceExplicitType(Type signature){  Type constraint=signature.getFresh();  constraint.enforcePolymorphism();  Type t=constraint;  for (  BinderAnchor arg : this.args) {    FunType ft=(FunType)t;    arg.setExactRequiredType(ft.getArgument());    t=ft.getResult();  }  this.res.setConstraintType(t);}  }
class C{  private void createEthernetStoragePort(Map<String,Object> keyMap,StoragePort port,CIMInstance endPointInstance,String portInstanceID,CoordinatorClient coordinator,List<StoragePort> newPorts,List<StoragePort> existingPorts) throws IOException {  StoragePort portinMemory=(StoragePort)keyMap.get(portInstanceID);  String endPointInstanceId=endPointInstance.getObjectPath().getKey(NAME).getValue().toString().split(COMMA_STR)[0].toLowerCase();  if (null == port) {    if ((portinMemory != null) && (portinMemory.getPortNetworkId() != null) && !(portinMemory.getPortNetworkId().equals(endPointInstanceId))) {      StoragePort newPortinMemory=portinMemory.clone();      newPortinMemory.setId(URIUtil.createId(StoragePort.class));      newPortinMemory.setPortNetworkId(endPointInstanceId);      newPortinMemory.setPortEndPointID(endPointInstance.getObjectPath().getKey(NAME).getValue().toString());      String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,newPortinMemory);      newPortinMemory.setNativeGuid(portNativeGuid);      newPortinMemory.setLabel(portNativeGuid);      _logger.info("Creating port - {}:{}",newPortinMemory.getLabel(),newPortinMemory.getNativeGuid());      _dbClient.createObject(newPortinMemory);      newPorts.add(newPortinMemory);    } else {      portinMemory.setPortNetworkId(endPointInstanceId);      portinMemory.setPortEndPointID(endPointInstance.getObjectPath().getKey(NAME).getValue().toString());      String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(_dbClient,portinMemory);      portinMemory.setNativeGuid(portNativeGuid);      portinMemory.setLabel(portNativeGuid);      _logger.info("Creating port - {}:{}",portinMemory.getLabel(),portinMemory.getNativeGuid());      _dbClient.createObject(portinMemory);      newPorts.add(portinMemory);    }  } else {    String currentPortName=port.getPortName();    if (!currentPortName.contains(portinMemory.getPortName())) {      StringBuffer appendedPortName=new StringBuffer(currentPortName);      appendedPortName.append(COMMA_STR).append(portinMemory.getPortName());      port.setPortName(appendedPortName.toString());    }    port.setPortSpeed(portinMemory.getPortSpeed());    port.setPortEndPointID(endPointInstance.getObjectPath().getKey(NAME).getValue().toString());    port.setCompatibilityStatus(portinMemory.getCompatibilityStatus());    port.setDiscoveryStatus(portinMemory.getDiscoveryStatus());    if (!OperationalStatus.OK.name().equals(port.getOperationalStatus())) {      port.setOperationalStatus(portinMemory.getOperationalStatus());    }    _logger.info("Updating port - {} : {}",port.getLabel(),port.getNativeGuid());    _dbClient.persistObject(port);    existingPorts.add(port);  }}  }
class C{  public SVGPath smoothQuadTo(double[] xy){  append(SVGConstants.PATH_SMOOTH_QUAD_TO,xy[0],xy[1]);  return this;}  }
class C{  public void poke(){  if (mIsDozing) {    forcePoke();  }}  }
class C{  public HorizontalLayout(int gap,int alignment){  myGap=gap;switch (alignment) {case SwingConstants.TOP:case SwingConstants.BOTTOM:case SwingConstants.CENTER:    myAlignment=alignment;  break;default :throw new IllegalArgumentException("unsupported alignment: " + alignment);}}  }
class C{  public boolean editComment(final SlingHttpServletRequest request,final String id,String text){  boolean result=false;  try {    Session session=request.getResourceResolver().adaptTo(Session.class);    Node node=session.getNodeByIdentifier(id);    if (node != null) {      JcrResourceUtil.setProperty(node,PublickConstants.COMMENT_PROPERTY_COMMENT,text);      JcrResourceUtil.setProperty(node,PublickConstants.COMMENT_PROPERTY_EDITED,true);      session.save();      result=true;    }  } catch (  RepositoryException e) {    LOGGER.error("Could not update comment from JCR",e);  }  return result;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.i(TAG,"called onCreate");  super.onCreate(savedInstanceState);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  setContentView(R.layout.activity_tutorial3);  mOpenCvCameraView=(Tutorial3View)findViewById(R.id.tutorial3_activity_java_surface_view);  mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);  mOpenCvCameraView.setCvCameraViewListener(this);}  }
class C{  public void removeTreeWillExpandListener(TreeWillExpandListener tel){  listenerList.remove(TreeWillExpandListener.class,tel);}  }
class C{  static public boolean createDirectoriesForFile(File file){  try {    String parentName=file.getParent();    if (parentName != null) {      File parent=new File(parentName);      if (!parent.exists()) {        parent.mkdirs();      }    }    return true;  } catch (  SecurityException se) {    System.err.println("No permissions to create " + file.getAbsolutePath());  }  return false;}  }
class C{  public void init() throws SystemException {  closed=false;  checkSetup();}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.469 -0500",hash_original_method="292C24CEC676EE3F6A373A1AE7371B82",hash_generated_method="2FACA41C84A2478691CF5236461898B1") public void putFloat(String key,float value){  unparcel();  mMap.put(key,value);}  }
class C{  public ArtistView(Context context){  super(context);  if (!isInEditMode()) {    init(context);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void add(double x){  add(x,1.0);}  }
class C{  public static int[] dyadCensus(final Network network){  int[] census=new int[3];  int n=network.allNodes.numObjs;  Edge[][] adjacencyMatrix=network.getAdjacencyMatrix();  for (int i=1; i < n; i++) {    Edge[] adj_i=adjacencyMatrix[i];    for (int j=0; j < i; j++) {      int k=(adjacencyMatrix[j][i] == null ? 0 : 1) + (adj_i[j] == null ? 0 : 1);      census[2 - k]++;    }  }  return census;}  }
class C{  public int totalNQueens(int n){  ArrayList<ArrayList<Integer>> rst=new ArrayList<ArrayList<Integer>>();  if (n <= 0) {    return 0;  }  search(n,new ArrayList<Integer>(),rst);  return rst.size();}  }
class C{  public IgfsPath(IgfsPath parentPath,String childPath){  A.notNull(parentPath,"parentPath");  String path=GridFilenameUtils.concat(parentPath.path,childPath);  if (F.isEmpty(path))   throw new IllegalArgumentException("Failed to parse path" + " [parent=" + parentPath + ", childPath="+ childPath+ ']');  this.path=normalizePath(path);}  }
class C{  public Long loginUser(String SID,String username,String userpass) throws AxisFault {  try {    Object obj=userManagement.loginUser(SID,username,userpass,null,false);    if (obj == null) {      return new Long(-1);    }    String objName=obj.getClass().getName();    if (objName.equals("java.lang.Long")) {      return (Long)obj;    } else {      return new Long(1);    }  } catch (  Exception err) {    log.error("[loginUser]",err);  }  return new Long(-1);}  }
class C{  @Override protected void createLabels(){  String text=this.getText();  if (!WWUtil.isEmpty(text))   this.addLabel(text);}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SETEND");  final long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  private void oneRound(){  output=getOutput();  out[0]=(byte)output;  out[1]=(byte)(output >> 8);  nfsr=shift(nfsr,getOutputNFSR() ^ lfsr[0]);  lfsr=shift(lfsr,getOutputLFSR());}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);  this.m_order=order;  this.m_multiAllowed=multiAllowed;}  }
class C{  public JavaRefactoringDescriptor(final String id,final String project,final String description,final String comment,final Map arguments,final int flags){  super(id,project,description,comment,flags);  fArguments=arguments;  fArguments.put(ATTRIBUTE_VERSION,VALUE_VERSION_1_0);}  }
class C{  public <T>void register(final Class<T> cls,StringConverter<T> converter){  if (cls == null) {    throw new IllegalArgumentException("Class must not be null");  }  if (converter == null) {    throw new IllegalArgumentException("StringConverter must not be null");  }  if (this == INSTANCE) {    throw new IllegalStateException("Global singleton cannot be extended");  }  StringConverter<?> old=registered.putIfAbsent(cls,converter);  if (old != null) {    throw new IllegalStateException("Converter already registered for class: " + cls);  }}  }
class C{  public XMPPException(Throwable wrappedThrowable){  super();  this.wrappedThrowable=wrappedThrowable;}  }
class C{  public int put(Object key,int value){  int index=hashCode(key), length=this.keyTable.length;  while (this.keyTable[index] != null) {    if (this.keyTable[index] == key)     return this.valueTable[index]=value;    if (++index == length) {      index=0;    }  }  this.keyTable[index]=key;  this.valueTable[index]=value;  if (++this.elementSize > this.threshold)   rehash();  return value;}  }
class C{  public void createJob(String jobName,String jobXml) throws IOException {  client.post_xml("/createItem?name=" + encode(jobName),jobXml);}  }
class C{  public static double[] toPrimitiveDoubleArray(NumberVector obj){  return toPrimitiveDoubleArray(obj,numberVectorAdapter(obj));}  }
class C{  public void removeNotOverriddenDependency(RVMMethod source,int dependent_cmid){  MethodSet s=nonOverriddenHash.get(source);  if (s != null) {    s.remove(dependent_cmid);  }}  }
class C{  public void addCenterListener(CenterListener listener){  centerDelegate.add(listener);}  }
class C{  public static boolean useCheckAndArrow(JMenuItem menuItem){  boolean b=true;  if ((menuItem instanceof JMenu) && (((JMenu)menuItem).isTopLevelMenu())) {    b=false;  }  return b;}  }
class C{  @Override final public void mouseReleased(MouseEvent e){  if (isComponentPressedDown) {    mouseLiberalClick(e);    long now=System.currentTimeMillis();    long timeBetweenUnusedClicks=now - lastUnusedLiberalSingleClickTimeStamp;    if (timeBetweenUnusedClicks <= slowestDoubleClickMilliseconds) {      mouseLiberalDoubleClick(e);      lastUnusedLiberalSingleClickTimeStamp=0;    } else {      lastUnusedLiberalSingleClickTimeStamp=System.currentTimeMillis();    }  }  isComponentPressedDown=false;  mouseRelease(e);}  }
class C{  public Varargs invoke(Varargs args){  return onInvoke(args).eval();}  }
class C{  CorsServiceBuilder(){  anyOriginSupported=true;  origins=Collections.emptySet();}  }
class C{  public int lastIteration(Set<? extends SampledVertex> vertices){  int it=-1;  for (  SampledVertex v : vertices) {    if (v.isSampled()) {      it=Math.max(it,v.getIterationSampled());    }  }  return it;}  }
class C{  public Iterator<SettableBeanProperty> allProperties(){  return new IteratorImpl(_buckets);}  }
class C{  protected SimpleLiteral(String label){  setLabel(label);  setDatatype(XMLSchema.STRING);}  }
class C{  public synchronized void removeVisualizableErrorListener(VisualizableErrorListener vel){  m_visualizableErrorListeners.remove(vel);}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  public int capacity(){  return c.length;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:04.002 -0500",hash_original_method="DBF96D5200F7739E62BF98EED93355B3",hash_generated_method="C5F3532563C170E7C786BD2894B50C43") private static BitSet readBitSet(Parcel src){  int cardinality=src.readInt();  BitSet set=new BitSet();  for (int i=0; i < cardinality; i++)   set.set(src.readInt());  return set;}  }
class C{  private static void repairSenderAddress(Collective c,Address sender){  if (c.myContribution != null) {    c.cache.put(c.myContribution.contributor.name,new ContributionBox(new Address(sender.getHost(),sender.port,c.myContribution.contributor.name),c.myContribution.timeStamp,c.myContribution.contribution));  } else   Logger.warning("Collective#repairSenderAddress()","Update doesn't contain contribution of sender " + sender,null);}  }
class C{  public static FeatureExtractor<IString,String> factory(String featurizerName,boolean withGaps,LanguageModel<IString> lm,String... featurizerSpecs){  final Map<String,String> paramPairs=FactoryUtil.getParamPairs(featurizerSpecs);  final float futureCostDelay=paramPairs.containsKey(LINEAR_DISTORTION_COST) ? Float.valueOf(paramPairs.get(LINEAR_DISTORTION_COST)) : 0.0f;  final DerivationFeaturizer<IString,String> linearDistortionFeaturizer=withGaps ? new DTULinearDistortionFeaturizer() : new LinearFutureCostFeaturizer(futureCostDelay);  List<DerivationFeaturizer<IString,String>> gapFeaturizers=new ArrayList<>();  if (withGaps) {    GapType gapType=GapType.valueOf(paramPairs.get(GAP_PARAMETER));    if (gapType == GapType.source || gapType == GapType.both)     gapFeaturizers.add(new SourceGapFeaturizer());    if (gapType == GapType.target || gapType == GapType.both)     gapFeaturizers.add(new TargetGapFeaturizer());  }  try {    if (featurizerName.equals(BASELINE_FEATURES)) {      if (!paramPairs.containsKey(ARPA_LM_PARAMETER)) {        throw new RuntimeException(String.format("Baseline featurizers requires that a language model is specificed using the parameter '%s'",ARPA_LM_PARAMETER));      }      List<Featurizer<IString,String>> featurizers=new ArrayList<>();      if (withGaps)       featurizers.addAll(gapFeaturizers);      LanguageModel<IString> myLM=null;      if (lm != null)       myLM=lm; else {        String lmPath=paramPairs.get(ARPA_LM_PARAMETER);        if (lmPath != null)         myLM=LanguageModelFactory.load(lmPath);      }      if (myLM != null) {        DerivationFeaturizer<IString,String> arpaLmFeaturizer=new NGramLanguageModelFeaturizer(myLM);        featurizers.add(arpaLmFeaturizer);      }      featurizers.add(new TranslationModelFeaturizer());      featurizers.add(linearDistortionFeaturizer);      return new FeatureExtractor<IString,String>(featurizers);    } else     if (featurizerName.equals(MOSES_DENSE_FEATURES)) {      List<Featurizer<IString,String>> featurizers=new ArrayList<>();      if (withGaps)       featurizers.addAll(gapFeaturizers);      DerivationFeaturizer<IString,String> arpaLmFeaturizer;      LanguageModel<IString> myLM=null;      if (lm != null)       myLM=lm; else {        String lmPath=paramPairs.get(ARPA_LM_PARAMETER);        if (lmPath != null)         myLM=LanguageModelFactory.load(lmPath);      }      if (myLM != null) {        arpaLmFeaturizer=new NGramLanguageModelFeaturizer(myLM);        featurizers.add(arpaLmFeaturizer);      }      featurizers.add(new TranslationModelFeaturizer());      featurizers.add(linearDistortionFeaturizer);      featurizers.add(new WordPenaltyFeaturizer<IString>());      featurizers.add(new PhrasePenaltyFeaturizer<IString>());      featurizers.add(new UnknownWordFeaturizer<IString>());      return new FeatureExtractor<IString,String>(featurizers);    } else {      logger.error("Unrecognized feature specification: " + featurizerName);      return null;    }  } catch (  IOException e) {    logger.error(e);  }  return null;}  }
class C{  protected void tableInit(int display,int matchToType,boolean matched){  log.config("Display=" + m_matchOptions[display] + ", MatchTo="+ m_matchOptions[matchToType]+ ", Matched="+ matched);  m_sql=new StringBuffer();  if (display == MATCH_INVOICE) {    m_dateColumn="hdr.DateInvoiced";    m_qtyColumn="lin.QtyInvoiced";    m_sql.append("SELECT hdr.C_Invoice_ID,hdr.DocumentNo, hdr.DateInvoiced, bp.Name,hdr.C_BPartner_ID," + " lin.Line,lin.C_InvoiceLine_ID, p.Name,lin.M_Product_ID," + " lin.QtyInvoiced,SUM(NVL(mi.Qty,0)), org.Name, hdr.AD_Org_ID "+ "FROM C_Invoice hdr"+ " INNER JOIN AD_Org org ON (hdr.AD_Org_ID=org.AD_Org_ID)"+ " INNER JOIN C_BPartner bp ON (hdr.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN C_InvoiceLine lin ON (hdr.C_Invoice_ID=lin.C_Invoice_ID)"+ " INNER JOIN M_Product p ON (lin.M_Product_ID=p.M_Product_ID)"+ " INNER JOIN C_DocType dt ON (hdr.C_DocType_ID=dt.C_DocType_ID AND dt.DocBaseType IN ('API','APC'))"+ " FULL JOIN M_MatchInv mi ON (lin.C_InvoiceLine_ID=mi.C_InvoiceLine_ID) "+ "WHERE hdr.DocStatus IN ('CO','CL')");    m_groupBy=" GROUP BY hdr.C_Invoice_ID,hdr.DocumentNo,hdr.DateInvoiced,bp.Name,hdr.C_BPartner_ID," + " lin.Line,lin.C_InvoiceLine_ID,p.Name,lin.M_Product_ID,lin.QtyInvoiced, org.Name, hdr.AD_Org_ID " + "HAVING " + (matched ? "0" : "lin.QtyInvoiced") + "<>SUM(NVL(mi.Qty,0))";  } else   if (display == MATCH_ORDER) {    m_dateColumn="hdr.DateOrdered";    m_qtyColumn="lin.QtyOrdered";    m_sql.append("SELECT hdr.C_Order_ID,hdr.DocumentNo, hdr.DateOrdered, bp.Name,hdr.C_BPartner_ID," + " lin.Line,lin.C_OrderLine_ID, p.Name,lin.M_Product_ID," + " lin.QtyOrdered,SUM(COALESCE(mo.Qty,0)), org.Name, hdr.AD_Org_ID "+ "FROM C_Order hdr"+ " INNER JOIN AD_Org org ON (hdr.AD_Org_ID=org.AD_Org_ID)"+ " INNER JOIN C_BPartner bp ON (hdr.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN C_OrderLine lin ON (hdr.C_Order_ID=lin.C_Order_ID)"+ " INNER JOIN M_Product p ON (lin.M_Product_ID=p.M_Product_ID)"+ " INNER JOIN C_DocType dt ON (hdr.C_DocType_ID=dt.C_DocType_ID AND dt.DocBaseType='POO')"+ " FULL JOIN M_MatchPO mo ON (lin.C_OrderLine_ID=mo.C_OrderLine_ID) "+ " WHERE ");    m_linetype=new StringBuffer();    m_linetype.append(matchToType == MATCH_SHIPMENT ? "M_InOutLine_ID" : "C_InvoiceLine_ID");    if (matched) {      m_sql.append(" mo." + m_linetype + " IS NOT NULL ");    } else {      m_sql.append(" ( mo." + m_linetype + " IS NULL OR "+ " (lin.QtyOrdered <>  (SELECT sum(mo1.Qty) AS Qty"+ " FROM m_matchpo mo1 WHERE "+ " mo1.C_ORDERLINE_ID=lin.C_ORDERLINE_ID AND "+ " hdr.C_ORDER_ID=lin.C_ORDER_ID AND "+ " mo1."+ m_linetype+ " IS NOT NULL group by mo1.C_ORDERLINE_ID))) ");    }    m_sql.append(" AND hdr.DocStatus IN ('CO','CL')");    m_groupBy=" GROUP BY hdr.C_Order_ID,hdr.DocumentNo,hdr.DateOrdered,bp.Name,hdr.C_BPartner_ID," + " lin.Line,lin.C_OrderLine_ID,p.Name,lin.M_Product_ID,lin.QtyOrdered, org.Name, hdr.AD_Org_ID " + "HAVING " + (matched ? "0" : "lin.QtyOrdered") + "<>SUM(COALESCE(mo.Qty,0))";  } else {    m_dateColumn="hdr.MovementDate";    m_qtyColumn="lin.MovementQty";    m_sql.append("SELECT hdr.M_InOut_ID,hdr.DocumentNo, hdr.MovementDate, bp.Name,hdr.C_BPartner_ID," + " lin.Line,lin.M_InOutLine_ID, p.Name,lin.M_Product_ID," + " lin.MovementQty,SUM(NVL(m.Qty,0)),org.Name, hdr.AD_Org_ID "+ "FROM M_InOut hdr"+ " INNER JOIN AD_Org org ON (hdr.AD_Org_ID=org.AD_Org_ID)"+ " INNER JOIN C_BPartner bp ON (hdr.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN M_InOutLine lin ON (hdr.M_InOut_ID=lin.M_InOut_ID)"+ " INNER JOIN M_Product p ON (lin.M_Product_ID=p.M_Product_ID)"+ " INNER JOIN C_DocType dt ON (hdr.C_DocType_ID = dt.C_DocType_ID AND dt.DocBaseType='MMR')"+ " FULL JOIN ").append(matchToType == MATCH_ORDER ? "M_MatchPO" : "M_MatchInv").append(" m ON (lin.M_InOutLine_ID=m.M_InOutLine_ID) " + "WHERE hdr.DocStatus IN ('CO','CL')");    m_groupBy=" GROUP BY hdr.M_InOut_ID,hdr.DocumentNo,hdr.MovementDate,bp.Name,hdr.C_BPartner_ID," + " lin.Line,lin.M_InOutLine_ID,p.Name,lin.M_Product_ID,lin.MovementQty, org.Name, hdr.AD_Org_ID " + "HAVING " + (matched ? "0" : "lin.MovementQty") + "<>SUM(NVL(m.Qty,0))";  }}  }
class C{  private JFreeChart createCombinedChart(DataSequence tsOne,DataSequence tsTwo,ArrayList<Anomaly> anomalyList){  final XYDataset data1=createDataset(tsOne,"Original");  final XYItemRenderer renderer1=new StandardXYItemRenderer();  final NumberAxis rangeAxis1=new NumberAxis("Original Value");  XYPlot subplot1=new XYPlot(data1,null,rangeAxis1,renderer1);  subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);  addAnomalies(subplot1,anomalyList);  final XYDataset data2=createDataset(tsTwo,"Forecast");  final XYItemRenderer renderer2=new StandardXYItemRenderer();  final NumberAxis rangeAxis2=new NumberAxis("Forecast Value");  rangeAxis2.setAutoRangeIncludesZero(false);  final XYPlot subplot2=new XYPlot(data2,null,rangeAxis2,renderer2);  subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  final CombinedDomainXYPlot plot=new CombinedDomainXYPlot(new NumberAxis("Time"));  plot.setGap(10.0);  plot.add(subplot1,1);  plot.add(subplot2,1);  addAnomalyTS(plot,tsOne,tsTwo);  plot.setOrientation(PlotOrientation.VERTICAL);  return new JFreeChart("EGADS GUI",JFreeChart.DEFAULT_TITLE_FONT,plot,true);}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public synchronized void strategyComplete(String strategyClassName,Tradestrategy tradestrategy){synchronized (lockBackTestWorker) {    strategiesRunning.getAndDecrement();    lockBackTestWorker.notifyAll();  }}  }
class C{  public DateFormatter(String format){  _timestamp=parse(format);}  }
class C{  public SpecificMessage(String m,int l){  super(m,l);}  }
class C{  protected synchronized void save(){  int retVal;  File file;  String text;  FileWriter fwriter;  BufferedWriter bwriter;  retVal=m_FileChooser.showOpenDialog(this);  if (retVal != MekaFileChooser.APPROVE_OPTION)   return;  file=m_FileChooser.getSelectedFile();  text=m_TextArea.getText();  fwriter=null;  bwriter=null;  try {    fwriter=new FileWriter(file);    bwriter=new BufferedWriter(fwriter);    bwriter.write(text);    bwriter.newLine();    bwriter.flush();    log("Log successfully saved to: " + file);  } catch (  Exception e) {    handleException("Failed to save log output to: " + file,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }}  }
class C{  private static void swap(int i,int j,String[] index){  String tmp=index[i];  index[i]=index[j];  index[j]=tmp;}  }
class C{  public boolean isCurrency(final int column) throws SQLException {  return false;}  }
class C{  public boolean isTemplate(){  return template;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.934 -0500",hash_original_method="135ABB51CD042C7BF2D35A5F6450399E",hash_generated_method="863385F4DDF4E2867E79479775F0563A") protected boolean createTunnelToTarget(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpHost proxy=route.getProxyHost();  HttpHost target=route.getTargetHost();  HttpResponse response=null;  boolean done=false;  while (!done) {    done=true;    if (!this.managedConn.isOpen()) {      this.managedConn.open(route,context,this.params);    }    HttpRequest connect=createConnectRequest(route,context);    String agent=HttpProtocolParams.getUserAgent(params);    if (agent != null) {      connect.addHeader(HTTP.USER_AGENT,agent);    }    connect.addHeader(HTTP.TARGET_HOST,target.toHostString());    AuthScheme authScheme=this.proxyAuthState.getAuthScheme();    AuthScope authScope=this.proxyAuthState.getAuthScope();    Credentials creds=this.proxyAuthState.getCredentials();    if (creds != null) {      if (authScope != null || !authScheme.isConnectionBased()) {        try {          connect.addHeader(authScheme.authenticate(creds,connect));        } catch (        AuthenticationException ex) {          if (this.log.isErrorEnabled()) {            this.log.error("Proxy authentication error: " + ex.getMessage());          }        }      }    }    response=requestExec.execute(connect,this.managedConn,context);    int status=response.getStatusLine().getStatusCode();    if (status < 200) {      throw new HttpException("Unexpected response to CONNECT request: " + response.getStatusLine());    }    CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);    if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {      if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {        this.log.debug("Proxy requested authentication");        Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);        try {          processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);        } catch (        AuthenticationException ex) {          if (this.log.isWarnEnabled()) {            this.log.warn("Authentication error: " + ex.getMessage());            break;          }        }        updateAuthState(this.proxyAuthState,proxy,credsProvider);        if (this.proxyAuthState.getCredentials() != null) {          done=false;          if (this.reuseStrategy.keepAlive(response,context)) {            this.log.debug("Connection kept alive");            HttpEntity entity=response.getEntity();            if (entity != null) {              entity.consumeContent();            }          } else {            this.managedConn.close();          }        }      } else {        this.proxyAuthState.setAuthScope(null);      }    }  }  int status=response.getStatusLine().getStatusCode();  if (status > 299) {    HttpEntity entity=response.getEntity();    if (entity != null) {      response.setEntity(new BufferedHttpEntity(entity));    }    this.managedConn.close();    throw new TunnelRefusedException("CONNECT refused by proxy: " + response.getStatusLine(),response);  }  this.managedConn.markReusable();  return false;}  }
class C{  private void flushRight() throws IOException {  appendNewlineIfNecessary(rightBuf,rightColumn);  while (rightBuf.length() != 0) {    leftColumn.write('\n');    outputFullLines();  }}  }
class C{  public OperandOrderIterator(final IOperandTreeNode root){  m_root=Preconditions.checkNotNull(root);}  }
class C{  public void start(){  for (  BaseDownloadTask task : tasks) {    task.setListener(target);    if (autoRetryTimes != null) {      task.setAutoRetryTimes(autoRetryTimes);    }    if (syncCallback != null) {      task.setSyncCallback(syncCallback);    }    if (isForceReDownload != null) {      task.setForceReDownload(isForceReDownload);    }    if (callbackProgressTimes != null) {      task.setCallbackProgressTimes(callbackProgressTimes);    }    if (tag != null) {      task.setTag(tag);    }    task.ready();  }  FileDownloader.getImpl().start(target,isSerial);}  }
class C{  static double ensureNonNegative(double value){  checkArgument(!isNaN(value));  if (value > 0.0) {    return value;  } else {    return 0.0;  }}  }
class C{  public boolean isThrowIfPropertyNotFound(){  return throwIfNotFound;}  }
class C{  public static void sort(long[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  public void createSheep(StendhalRPZone zone){  Creature creature=new Sheep();  creature.setPosition(56,46);  zone.add(creature);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private RefactoringContributionManager(){}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public boolean containsKey(int key){  return indexOfKey(key) >= 0;}  }
class C{  public static String tmpJournal(){  final File file=Code.wrapThrow(null);  file.deleteOnExit();  return file.getAbsolutePath();}  }
class C{  private boolean addCollatableAttribute(String value,int shorthandAttr,CSSElement selector){  int attrIndex=CSSElement.CSS_SHORTHAND_ATTRIBUTE_INDEX[shorthandAttr][0];  int result=selector.addAttribute(attrIndex,value);  if (result == -1) {    for (int i=1; i < CSSElement.CSS_SHORTHAND_ATTRIBUTE_INDEX[shorthandAttr].length; i++) {      attrIndex=CSSElement.CSS_SHORTHAND_ATTRIBUTE_INDEX[shorthandAttr][i];      selector.addAttribute(attrIndex,value);    }    return true;  }  return false;}  }
class C{  private void updateDimProperties(){  Map<String,int[]> indices=new HashMap<String,int[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Map<String,String[]> columns=new HashMap<String,String[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Map<String,String[]> dbTypes=new HashMap<String,String[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  if (carbonProps != null && !"".equals(carbonProps)) {    String[] entries=carbonProps.split(CarbonCommonConstants.AMPERSAND_SPC_CHARACTER);    for (int i=0; i < entries.length; i++) {      String[] levelEntry=entries[i].split(CarbonCommonConstants.COLON_SPC_CHARACTER);      String dimColumnName=levelEntry[0];      int[] pIndices=new int[levelEntry.length - 1];      String[] cols=new String[levelEntry.length - 1];      String[] dbType=new String[levelEntry.length - 1];      for (int j=1; j < levelEntry.length; j++) {        String[] propEntry=levelEntry[j].split(CarbonCommonConstants.COMA_SPC_CHARACTER);        pIndices[j - 1]=Integer.parseInt(propEntry[1]);        cols[j - 1]=propEntry[0];        dbType[j - 1]=propEntry[2];      }      indices.put(dimColumnName,pIndices);      columns.put(dimColumnName,cols);      dbTypes.put(dimColumnName,dbType);    }  }  if (indices.isEmpty()) {    return;  }  propColumns=new List[dimColNames.length];  propTypes=new List[dimColNames.length];  propIndxs=new int[dimColNames.length][];  for (int i=0; i < dimColNames.length; i++) {    if (indices.containsKey(dimColNames[i])) {      propColumns[i]=Arrays.asList(columns.get(dimColNames[i]));      propTypes[i]=Arrays.asList(dbTypes.get(dimColNames[i]));      propIndxs[i]=indices.get(dimColNames[i]);    } else {      propColumns[i]=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);      propTypes[i]=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);      propIndxs[i]=new int[0];    }  }}  }
class C{  private AnnotatedTypeMirror asSuperWildcardLowerBound(AnnotatedTypeMirror type,AnnotatedWildcardType superType,Void p){  AnnotatedTypeMirror lowerBound=superType.getSuperBound();  return asSuperLowerBound(type,p,lowerBound);}  }
class C{  private void checkSortMissingFacet(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1"));  assertU(adoc("id","2",field,low));  assertU(adoc("id","3",field,high));  assertU(commit());  assertQ(req("q","*:*","facet","true","facet.field",field,"facet.mincount","1","facet.missing","true"),"//lst[@name='facet_fields']/lst[@name='" + field + "']/int[@name='"+ low+ "'][.=1]","//lst[@name='facet_fields']/lst[@name='" + field + "']/int[@name='"+ high+ "'][.=1]","//lst[@name='facet_fields']/lst[@name='" + field + "']/int[.=2]");}  }
class C{  @Override protected void uninstallDefaults(){  SynthContext context=getContext(splitPane,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;  context=getContext(splitPane,Region.SPLIT_PANE_DIVIDER,ENABLED);  dividerStyle.uninstallDefaults(context);  context.dispose();  dividerStyle=null;  super.uninstallDefaults();}  }
class C{  public boolean canCopy(){  return true;}  }
class C{  public Collection<GridCacheContext> cacheContexts(){  return (Collection)ctxMap.values();}  }
class C{  public OperationStateException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.IMPORT_DECLARATION__IMPORT_SPECIFIERS:    getImportSpecifiers().clear();  return;case N4JSPackage.IMPORT_DECLARATION__IMPORT_FROM:setImportFrom(IMPORT_FROM_EDEFAULT);return;case N4JSPackage.IMPORT_DECLARATION__MODULE:setModule((TModule)null);return;}super.eUnset(featureID);}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="north: " + String.valueOf(wbr.getNorth());      out.println(str1);      str1="south: " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="east: " + String.valueOf(wbr.getEast());      out.println(str1);      str1="west: " + String.valueOf(wbr.getWest());      out.println(str1);      str1="rows: " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="cols: " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IndicatorResult(String indicator,double[] values){  super();  this.indicator=indicator;  this.values=values;  indifferentAlgorithms=new ArrayList<String>();}  }
class C{  public boolean clearSlots(@Nonnull IInventory inv,int[] src){  boolean clearedAnything=false;  for (  int slot : src) {    clearedAnything|=inv.getStackInSlotOnClosing(slot) != null;  }  return clearedAnything;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:employee");  testAddr=elementList.item(0);{    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");      fail("throw_NAMESPACE_ERR");    } catch (    DOMException ex) {    }  }}  }
class C{  public final void mul(double scalar){  m00*=scalar;  m01*=scalar;  m02*=scalar;  m10*=scalar;  m11*=scalar;  m12*=scalar;  m20*=scalar;  m21*=scalar;  m22*=scalar;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.720 -0500",hash_original_method="174C12670562B046AE6DB5A50E90BB9F",hash_generated_method="DF6DB718DAEDFBD90D4BB232ED19A1E2") public final TFTPPacket receive() throws IOException, InterruptedIOException, SocketException, TFTPPacketException {  DatagramPacket packet;  packet=new DatagramPacket(new byte[PACKET_SIZE],PACKET_SIZE);  _socket_.receive(packet);  return TFTPPacket.newTFTPPacket(packet);}  }
class C{  public void zoomToScreen(){  ZoomFunctions.zoomToScreen(m_graph);}  }
class C{  public synchronized void writeBytes(byte[] body,int start){  int length=(body.length - start) + (mData.length - mIndex);  byte[] temp=new byte[length];  System.arraycopy(mData,mIndex,temp,0,mData.length - mIndex);  System.arraycopy(body,start,temp,mData.length - mIndex,body.length - start);  mData=temp;  mIndex=0;  notifyAll();}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","ban");  action.put("target",params[0]);  action.put("hours",params[1]);  action.put("reason",remainder);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  public T caseWordBoundary(WordBoundary object){  return null;}  }
class C{  public static void exponentialSleep(int attempt,int base,int max) throws InterruptedException {  long sleepSeconds=(long)Math.min(max,Math.pow(base,attempt));  LOG.debug(String.format("Attempt %d: sleeping for %d seconds",attempt,sleepSeconds));  Thread.sleep(1000 * sleepSeconds);}  }
class C{  @SuppressWarnings("unused") private ProgramBlock verifyAndCorrectProgramBlock(VariableSet in,VariableSet out,VariableSet kill,ProgramBlock pb) throws DMLRuntimeException {  for (  String varName : in.getVariableNames())   if (!out.containsVariable(varName)) {    DataType dt=in.getVariable(varName).getDataType();    if (!(dt == DataType.MATRIX || dt == DataType.UNKNOWN))     continue;    boolean foundRMInst=rContainsRMInstruction(pb,varName);    if (!foundRMInst) {      Instruction inst=createCleanupInstruction(varName);      inst.setLocation(in.getVariable(varName));      addCleanupInstruction(pb,inst);      LOG.trace("Adding instruction (r1) " + inst.toString());    }  }  for (  String varName : kill.getVariableNames())   if ((!in.containsVariable(varName)) && (!out.containsVariable(varName))) {    DataType dt=kill.getVariable(varName).getDataType();    if (!(dt == DataType.MATRIX || dt == DataType.UNKNOWN))     continue;    boolean foundRMInst=rContainsRMInstruction(pb,varName);    if (!foundRMInst) {      Instruction inst=createCleanupInstruction(varName);      inst.setLocation(kill.getVariable(varName));      addCleanupInstruction(pb,inst);      LOG.trace("Adding instruction (r2) " + inst.toString());    }  }  return pb;}  }
class C{  private void makeCleanCalls(){  assert !Thread.holdsLock(this);  Iterator<CleanRequest> iter=pendingCleans.iterator();  while (iter.hasNext()) {    CleanRequest request=iter.next();    try {      dgc.clean(request.objIDs,request.sequenceNum,vmid,request.strong);      iter.remove();    } catch (    Exception e) {      if (++request.failures >= cleanFailureRetries) {        iter.remove();      }    }  }}  }
class C{  public Random(long seed){}  }
class C{  protected boolean isMultiSelectEvent(MouseEvent event){  return (SwingUtilities.isLeftMouseButton(event) && event.isShiftDown());}  }
class C{  public void loadComplete(){  if (m_loaderThread != null) {    if (m_loaderThread.isAlive()) {      try {        m_loaderThread.join();      } catch (      InterruptedException ie) {        log.log(Level.SEVERE,"Join interrupted",ie);      }    }  }  for (int i=0; i < m_fields.size(); i++) {    GridField field=(GridField)m_fields.get(i);    field.lookupLoadComplete();  }}  }
class C{  protected void assignLevels(int levels[],int depth,int i,int j){  if (i >= graphMatrix.length) {    return;  } else   if (j >= graphMatrix[i].length) {    return;  }  if (graphMatrix[i][j] <= 0) {    assignLevels(levels,depth,i,++j);  } else   if (graphMatrix[i][j] == DIRECTED || graphMatrix[i][j] == DOUBLE) {    if (depth + 1 > levels[j]) {      levels[j]=depth + 1;      assignLevels(levels,depth + 1,j,0);    }    assignLevels(levels,depth,i,++j);  }}  }
class C{  public boolean intersects(IPoint p){  double x=p.getX();  double y=p.getY();  return (FloatingPoint.greaterEquals(x,left) && FloatingPoint.lesserEquals(x,right) && FloatingPoint.greaterEquals(y,bottom)&& FloatingPoint.lesserEquals(y,top));}  }
class C{  public static void startConnection(Context context,TrackRecordingServiceConnection trackRecordingServiceConnection){  trackRecordingServiceConnection.bindIfStarted();  if (!isRecordingServiceRunning(context)) {    resetRecordingState(context);  }}  }
class C{  public static boolean isConnected(ConnectivityManager cm){  return !Controller.getInstance().workOffline() && checkConnected(cm);}  }
class C{  static String translateSQL(String sql,boolean escapeProcessing){  if (sql == null) {    throw DbException.getInvalidValueException("SQL",null);  }  if (!escapeProcessing) {    return sql;  }  if (sql.indexOf('{') < 0) {    return sql;  }  int len=sql.length();  char[] chars=null;  int level=0;  for (int i=0; i < len; i++) {    char c=sql.charAt(i);switch (c) {case '\'':case '"':case '/':case '-':      i=translateGetEnd(sql,i,c);    break;case '{':  level++;if (chars == null) {  chars=sql.toCharArray();}chars[i]=' ';while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}int start=i;if (chars[i] >= '0' && chars[i] <= '9') {chars[i - 1]='{';while (true) {checkRunOver(i,len,sql);c=chars[i];if (c == '}') {break;}switch (c) {case '\'':case '"':case '/':case '-':i=translateGetEnd(sql,i,c);break;default :}i++;}level--;break;} else if (chars[i] == '?') {i++;checkRunOver(i,len,sql);while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}if (sql.charAt(i) != '=') {throw DbException.getSyntaxError(sql,i,"=");}i++;checkRunOver(i,len,sql);while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}}while (!Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}int remove=0;if (found(sql,start,"fn")) {remove=2;} else if (found(sql,start,"escape")) {break;} else if (found(sql,start,"call")) {break;} else if (found(sql,start,"oj")) {remove=2;} else if (found(sql,start,"ts")) {break;} else if (found(sql,start,"t")) {break;} else if (found(sql,start,"d")) {break;} else if (found(sql,start,"params")) {remove="params".length();}for (i=start; remove > 0; i++, remove--) {chars[i]=' ';}break;case '}':if (--level < 0) {throw DbException.getSyntaxError(sql,i);}chars[i]=' ';break;case '$':i=translateGetEnd(sql,i,c);break;default :}}if (level != 0) {throw DbException.getSyntaxError(sql,sql.length() - 1);}if (chars != null) {sql=new String(chars);}return sql;}  }
class C{  public void run(){  while (Thread.currentThread() == mThread) {    try {      Socket client=mServer.accept();      if (mThreadPool != null) {        mThreadPool.submit(new ViewServerWorker(client));      } else {        try {          client.close();        } catch (        IOException e) {          e.printStackTrace();        }      }    } catch (    Exception e) {      Slog.w(LOG_TAG,"Connection error: ",e);    }  }}  }
class C{  private void quicksort(int from,int to){  while (to > from) {    if (to - from < INSERTION_SORT_SIZE) {      binaryInsertionSort(from,to);      return;    }    T pivot=selectPivot(from,to);    int second=partition(pivot,from,to);    if (second > to) {      pivot=selectPivot(from,to);      pivot=data[to];      second=partition(pivot,from,to);      if (second > to) {        second--;      }    }    quicksort(from,second - 1);    from=second;  }}  }
class C{  public TabInfo(String name,JComponent component){  this(name,null,component);}  }
class C{  public JsonElement remove(int index){  return elements.remove(index);}  }
class C{  public void eat(String s){  String pn=peekN(s.length());  if (!pn.equals(s))   throw new RuntimeException("Parser expected '" + s + "' but got '"+ pn+ "'.");  seekN(s.length());}  }
class C{  public boolean boolean_attribute(String name,boolean default_val) throws InvalidPropertiesFormatException {  Boolean val=boolean_attribute(name);  if (val == null)   return default_val; else   return val;}  }
class C{  public static boolean checkResponseStatus(JSONObject jsonResponse){  if (jsonResponse != null) {    if (jsonResponse.getBoolean("ok")) {      return true;    } else {      System.err.println("The API returned the following error: " + jsonResponse.getString("description"));    }  } else {    System.err.println("JSON Response was null, something went wrong...");  }  return false;}  }
class C{  public static void showInstructionCommentDialog(final JFrame parent,final CGraphModel model,final INaviCodeNode node,final INaviInstruction instruction){  final DialogEditCodeNodeComment dlg=new DialogEditCodeNodeComment(parent,model,node,instruction);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);}  }
class C{  @ObjectiveCName("loadMembersWithGid:withLimit:withNext:") public Promise<GroupMembersSlice> loadMembers(int gid,int limit,byte[] next){  return modules.getGroupsModule().loadMembers(gid,limit,next);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.add(new Option("\tThe name of the data set.","relation",1,"-relation <name>"));  result.add(new Option("\tThe seed value.","seed",1,"-seed <num>"));  result.add(new Option("\tThe number of instances in the datasets (default 20).","num-instances",1,"-num-instances <num>"));  result.add(new Option("\tThe class type, see constants in weka.core.Attribute\n" + "\t(default 1=nominal).","class-type",1,"-class-type <num>"));  result.add(new Option("\tThe number of classes to generate (for nominal classes only)\n" + "\t(default 2).","class-values",1,"-class-values <num>"));  result.add(new Option("\tThe class index, with -1=last, (default -1).","class-index",1,"-class-index <num>"));  result.add(new Option("\tDoesn't include a class attribute in the output.","no-class",0,"-no-class"));  result.add(new Option("\tThe number of nominal attributes (default 1).","nominal",1,"-nominal <num>"));  result.add(new Option("\tThe number of values for nominal attributes (default 2).","nominal-values",1,"-nominal-values <num>"));  result.add(new Option("\tThe number of numeric attributes (default 0).","numeric",1,"-numeric <num>"));  result.add(new Option("\tThe number of string attributes (default 0).","string",1,"-string <num>"));  result.add(new Option("\tThe words to use in string attributes.","words",1,"-words <comma-separated-list>"));  result.add(new Option("\tThe word separators to use in string attributes.","word-separators",1,"-word-separators <chars>"));  result.add(new Option("\tThe number of date attributes (default 0).","date",1,"-date <num>"));  result.add(new Option("\tThe number of relational attributes (default 0).","relational",1,"-relational <num>"));  result.add(new Option("\tThe number of nominal attributes in a rel. attribute (default 1).","relational-nominal",1,"-relational-nominal <num>"));  result.add(new Option("\tThe number of values for nominal attributes in a rel. attribute (default 2).","relational-nominal-values",1,"-relational-nominal-values <num>"));  result.add(new Option("\tThe number of numeric attributes in a rel. attribute (default 0).","relational-numeric",1,"-relational-numeric <num>"));  result.add(new Option("\tThe number of string attributes in a rel. attribute (default 0).","relational-string",1,"-relational-string <num>"));  result.add(new Option("\tThe number of date attributes in a rel. attribute (default 0).","relational-date",1,"-relational-date <num>"));  result.add(new Option("\tThe number of instances in relational/bag attributes (default 10).","num-instances-relational",1,"-num-instances-relational <num>"));  result.add(new Option("\tGenerates multi-instance data.","multi-instance",0,"-multi-instance"));  result.add(new Option("\tThe Capabilities handler to base the dataset on.\n" + "\tThe other parameters can be used to override the ones\n" + "\tdetermined from the handler. Additional parameters for\n"+ "\thandler can be passed on after the '--'.","W",1,"-W <classname>"));  return result.elements();}  }
class C{  protected AbLevelChart(){}  }
class C{  public static void unescapeJava(Writer out,String str) throws IOException {  if (out == null) {    throw new IllegalArgumentException("The Writer must not be null");  }  if (str == null) {    return;  }  int sz=str.length();  StringBuffer unicode=new StringBuffer(4);  boolean hadSlash=false;  boolean inUnicode=false;  for (int i=0; i < sz; i++) {    char ch=str.charAt(i);    if (inUnicode) {      unicode.append(ch);      if (unicode.length() == 4) {        try {          int value=Integer.parseInt(unicode.toString(),16);          out.write((char)value);          unicode.setLength(0);          inUnicode=false;          hadSlash=false;        } catch (        NumberFormatException nfe) {          throw new FormatException("Unable to parse unicode value: " + unicode,nfe);        }      }      continue;    }    if (hadSlash) {      hadSlash=false;switch (ch) {case '\\':        out.write('\\');      break;case '\'':    out.write('\'');  break;case '\"':out.write('"');break;case 'r':out.write('\r');break;case 'f':out.write('\f');break;case 't':out.write('\t');break;case 'n':out.write('\n');break;case 'b':out.write('\b');break;case 'u':{inUnicode=true;break;}default :out.write(ch);break;}continue;} else if (ch == '\\') {hadSlash=true;continue;}out.write(ch);}if (hadSlash) {out.write('\\');}}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Dimension maximumLayoutSize(Container parent){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public SlidingTimeWindows slideBy(Duration duration){  return new SlidingTimeWindows(this.duration,duration);}  }
class C{  public static String sendEMail(HttpServletRequest request,WebUser to,String msgType,Object[] parameter){  MobileSessionCtx wsc=MobileSessionCtx.get(request);  MStore wStore=wsc.wstore;  MMailMsg mailMsg=wStore.getMailMsg(msgType);  StringBuffer subject=new StringBuffer(mailMsg.getSubject());  if (parameter.length > 0 && parameter[0] != null)   subject.append(parameter[0]);  StringBuffer message=new StringBuffer();  String hdr=wStore.getEMailFooter();  if (hdr != null && hdr.length() > 0)   message.append(hdr).append("\n");  message.append(mailMsg.getMessage());  if (parameter.length > 1 && parameter[1] != null)   message.append(parameter[1]);  if (mailMsg.getMessage2() != null) {    message.append("\n").append(mailMsg.getMessage2());    if (parameter.length > 2 && parameter[2] != null)     message.append(parameter[2]);  }  if (mailMsg.getMessage3() != null) {    message.append("\n").append(mailMsg.getMessage3());    if (parameter.length > 3 && parameter[3] != null)     message.append(parameter[3]);  }  message.append(MRequest.SEPARATOR).append("http://").append(request.getServerName()).append(request.getContextPath()).append("/ - ").append(wStore.getName()).append("\n").append("Request from: ").append(getFrom(request)).append("\n");  String ftr=wStore.getEMailFooter();  if (ftr != null && ftr.length() > 0)   message.append(ftr);  EMail email=wStore.createEMail(to.getEmail(),subject.toString(),message.toString());  if (msgType.equals(MMailMsg.MAILMSGTYPE_OrderAcknowledgement)) {    String orderEMail=wStore.getWebOrderEMail();    String storeEMail=wStore.getWStoreEMail();    if (orderEMail != null && orderEMail.length() > 0 && !orderEMail.equals(storeEMail))     email.addBcc(orderEMail);  }  String retValue=email.send();  MUserMail um=new MUserMail(mailMsg,to.getAD_User_ID(),email);  um.saveEx();  return retValue;}  }
class C{  private void updatePeriodFactorOneSliceLastValues(TimeSlice timeSlice,LinkedList<XParameterPeriodValue> valuesPerSlice){  if (valuesPerSlice.size() == 1) {    valuesPerSlice.getFirst().setPeriodFactor(1D);    valuesPerSlice.removeFirst();  } else {    updatePeriodFactorLastSliceLastValue(timeSlice,valuesPerSlice);    updatePeriodFactorFirstSliceFirstValue(timeSlice,valuesPerSlice);  }}  }
class C{  public static void main(String... args) throws SQLException {  new FileViewer().runTool(args);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  int numRows;  int numCols;  int row;  int col;  double z;  int i;  int c;  int x, y;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 3) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      caThresholdType=args[i].toLowerCase();    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;switch (caThresholdType) {case "specific catchment area (sca)":      caThreshold=caThreshold / gridRes;    break;case "total catchment area":  caThreshold=caThreshold / (gridRes * gridRes);break;default :break;}updateProgress("Loop 1 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {z=dem.getValue(row,col);if (z != noData) {i=0;for (c=0; c < 8; c++) {  x=col + xd[c];  y=row + yd[c];  if (z < dem.getValue(y,x)) {    i++;  }}tmpArea.setValue(row,col,1);tmpCount.setValue(row,col,i);output.setValue(row,col,-1);} else {tmpArea.setValue(row,col,noData);output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 1 of 2:",(int)progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (dem.getValue(row,col) != noData) {if (tmpCount.getValue(row,col) == 0) {  MDInfAccum(row,col,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();tmpArea.close();tmpCount.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static void playPlaylist(final Context context,final long playlistId){  final long[] playlistList=getSongListForPlaylist(context,playlistId);  if (playlistList != null) {    playAll(playlistList,-1,false);  }}  }
class C{  public String evaluationMetricTipText(){  return "The evaluation metric to use";}  }
class C{  boolean isGenerated(){  return (mFilename != null);}  }
class C{  public void fillOuterParallelogram(SunGraphics2D sg2d,double ux1,double uy1,double ux2,double uy2,double px,double py,double dx1,double dy1,double dx2,double dy2,double len1,double len2,double lw1,double lw2){  double udx1=dx1 / len1;  double udy1=dy1 / len1;  double udx2=dx2 / len2;  double udy2=dy2 / len2;  if (len1 == 0) {    if (len2 == 0) {      udx2=0;      udy2=1;    }    udx1=udy2;    udy1=-udx2;  } else   if (len2 == 0) {    udx2=udy1;    udy2=-udx1;  }  udx1*=lw1;  udy1*=lw1;  udx2*=lw2;  udy2*=lw2;  px-=(udx1 + udx2) / 2;  py-=(udy1 + udy2) / 2;  dx1+=udx1;  dy1+=udy1;  dx2+=udx2;  dy2+=udy2;  outrenderer.fillParallelogram(sg2d,ux1,uy1,ux2,uy2,px,py,dx1,dy1,dx2,dy2);}  }
class C{  public static <D extends GenericDeclaration>AnnotatedType[] parseAnnotatedBounds(Type[] bounds,D decl,int typeVarIndex){  return parseAnnotatedBounds(bounds,decl,typeVarIndex,LocationInfo.BASE_LOCATION);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent intent){  if (requestCode == REQUEST_CODE) {    if (resultCode == Activity.RESULT_OK) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,intent.getStringExtra("SCAN_RESULT"));        obj.put(FORMAT,intent.getStringExtra("SCAN_RESULT_FORMAT"));        obj.put(CANCELLED,false);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else     if (resultCode == Activity.RESULT_CANCELED) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,"");        obj.put(FORMAT,"");        obj.put(CANCELLED,true);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else {      this.callbackContext.error("Unexpected error");    }  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  log.fine("");  if (getC_BPartner_ID() == 0)   setBPartner(MBPartner.getTemplate(getCtx(),getAD_Client_ID()));  if (getC_BPartner_Location_ID() == 0)   setBPartner(new MBPartner(getCtx(),getC_BPartner_ID(),null));  if (getM_PriceList_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#M_PriceList_ID");    if (ii != 0)     setM_PriceList_ID(ii); else {      String sql="SELECT M_PriceList_ID FROM M_PriceList WHERE AD_Client_ID=? AND IsDefault='Y'";      ii=DB.getSQLValue(null,sql,getAD_Client_ID());      if (ii != 0)       setM_PriceList_ID(ii);    }  }  if (getC_Currency_ID() == 0) {    String sql="SELECT C_Currency_ID FROM M_PriceList WHERE M_PriceList_ID=?";    int ii=DB.getSQLValue(null,sql,getM_PriceList_ID());    if (ii != 0)     setC_Currency_ID(ii); else     setC_Currency_ID(Env.getContextAsInt(getCtx(),"#C_Currency_ID"));  }  if (getSalesRep_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#SalesRep_ID");    if (ii != 0)     setSalesRep_ID(ii);  }  if (getC_DocType_ID() == 0)   setC_DocType_ID(0);  if (getC_DocTypeTarget_ID() == 0)   setC_DocTypeTarget_ID(isSOTrx() ? MDocType.DOCBASETYPE_ARInvoice : MDocType.DOCBASETYPE_APInvoice);  if (getC_PaymentTerm_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#C_PaymentTerm_ID");    if (ii != 0)     setC_PaymentTerm_ID(ii); else {      String sql="SELECT C_PaymentTerm_ID FROM C_PaymentTerm WHERE AD_Client_ID=? AND IsDefault='Y'";      ii=DB.getSQLValue(null,sql,getAD_Client_ID());      if (ii != 0)       setC_PaymentTerm_ID(ii);    }  }  return true;}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  private Map<RangeRequest,TokenBackedBasicResultsPage<RowResult<Value>,byte[]>> breakUpByBatch(List<RangeRequest> requests,SortedSetMultimap<Integer,byte[]> rowsForBatches,NavigableMap<byte[],SortedMap<byte[],Value>> cellsByRow){  Map<RangeRequest,TokenBackedBasicResultsPage<RowResult<Value>,byte[]>> ret=Maps.newHashMap();  for (int i=0; i < requests.size(); i++) {    RangeRequest request=requests.get(i);    if (ret.containsKey(request)) {      continue;    }    SortedSet<byte[]> rowNames=rowsForBatches.get(i);    SortedMap<byte[],SortedMap<byte[],Value>> cellsForBatch=Maps.filterKeys(request.isReverse() ? cellsByRow.descendingMap() : cellsByRow,Predicates.in(rowNames));    validateRowNames(cellsForBatch.keySet(),request.getStartInclusive(),request.getEndExclusive(),request.isReverse());    IterableView<RowResult<Value>> rows=RowResults.viewOfMap(cellsForBatch);    if (!request.getColumnNames().isEmpty()) {      rows=filterColumnSelection(rows,request);    }    if (rowNames.isEmpty()) {      assert rows.isEmpty();      ret.put(request,SimpleTokenBackedResultsPage.create(request.getEndExclusive(),rows,false));    } else {      byte[] last=rowNames.last();      if (request.isReverse()) {        last=rowNames.first();      }      if (RangeRequests.isTerminalRow(request.isReverse(),last)) {        ret.put(request,SimpleTokenBackedResultsPage.create(last,rows,false));      } else {        boolean hasMore=request.getBatchHint() == null || request.getBatchHint() <= rowNames.size();        byte[] nextStartRow=RangeRequests.getNextStartRow(request.isReverse(),last);        ret.put(request,SimpleTokenBackedResultsPage.create(nextStartRow,rows,hasMore));      }    }  }  return ret;}  }
class C{  public ToolButton(String htmlImageResource){  initWidget(uiBinder.createAndBindUi(this));  FlowPanel image=new FlowPanel();  image.getElement().setInnerHTML(htmlImageResource);  iconPanel.add(image);}  }
class C{  public GuacamoleResourceNotFoundException(Throwable cause){  super(cause);}  }
class C{  @Override synchronized public void increment(){  this.increment(new Date(),1);}  }
class C{  TIntByteValueHashIterator(TPrimitiveHash hash){  super(hash);}  }
class C{  public void fillUpdatedCollectionProperty(Object entity,Object currentNode,StructuralProperty property,Field field,String node,Map<String,Object> map) throws ODataException {  Collection<Object> valueSet;  if (field.getType().isAssignableFrom(Set.class)) {    valueSet=new HashSet<>();  } else {    valueSet=new ArrayList<>();  }  Object current=(currentNode instanceof Map) ? currentNode : map.get(currentNode);  for (  Object subValue : (Iterable)((Map)current).get(node)) {    Object value=getFieldValueByType(property.getElementTypeName(),subValue,map,true);    if (value != null) {      valueSet.add(value);    }  }  setFieldValue(field,entity,valueSet);}  }
class C{  public static boolean isValid(int c){  return (c < NUMBER_OF_CHARACTERS && (MASKS[c] & VALID_CHARACTER) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void clear(){  LongArrays.fill(bits,0);  size=0;}  }
class C{  private void addValue(String key,int value,Bundle results){  if (results.containsKey(key)) {    List<Integer> list=results.getIntegerArrayList(key);    if (list != null) {      list.add(value);    }  } else {    ArrayList<Integer> list=new ArrayList<Integer>();    list.add(value);    results.putIntegerArrayList(key,list);  }}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  private Figure readTextAreaElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  readFontAttributes(elem,a);  readTextAttributes(elem,a);  readTextFlowAttributes(elem,a);  double x=toNumber(elem,readAttribute(elem,"x","0"));  double y=toNumber(elem,readAttribute(elem,"y","0"));  double w=toWidth(elem,readAttribute(elem,"width","0"));  double h=toHeight(elem,readAttribute(elem,"height","0"));  DefaultStyledDocument doc=new DefaultStyledDocument();  try {    if (elem.getContent() != null) {      doc.insertString(0,toText(elem,elem.getContent()),null);    } else {      for (      IXMLElement node : elem.getChildren()) {        if (node.getName() == null) {          doc.insertString(doc.getLength(),toText(elem,node.getContent()),null);        } else         if (node.getName().equals("tbreak")) {          doc.insertString(doc.getLength(),"\n",null);        } else         if (node.getName().equals("tspan")) {          readTSpanElement((IXMLElement)node,doc);        } else {          if (DEBUG) {            System.out.println("SVGInputFormat unknown  text node " + node.getName());          }        }      }    }  } catch (  BadLocationException e) {    InternalError ex=new InternalError(e.getMessage());    ex.initCause(e);    throw ex;  }  Figure figure=factory.createTextArea(x,y,w,h,doc,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  final public void Text() throws ParseException {  ASTText jjtn000=new ASTText(this,JJTTEXT);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case TEXT:      jj_consume_token(TEXT);    break;case DOT:  jj_consume_token(DOT);break;case RPAREN:jj_consume_token(RPAREN);break;case LPAREN:jj_consume_token(LPAREN);break;case NUMBER_LITERAL:jj_consume_token(NUMBER_LITERAL);break;case STRING_LITERAL:jj_consume_token(STRING_LITERAL);break;case ESCAPE:jj_consume_token(ESCAPE);break;case LCURLY:jj_consume_token(LCURLY);break;case RCURLY:jj_consume_token(RCURLY);break;default :jj_la1[27]=jj_gen;jj_consume_token(-1);throw new ParseException();}}  finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void processNext(){  if (mListOfFtHttpResume.isEmpty())   return;  FtHttpResume ftHttpResume=mListOfFtHttpResume.poll();  if (sLogger.isActivated()) {    sLogger.debug("Resume FT HTTP ".concat(ftHttpResume.toString()));  }switch (ftHttpResume.getDirection()) {case INCOMING:    FtHttpResumeDownload downloadInfo=(FtHttpResumeDownload)ftHttpResume;  MmContent downloadContent=ContentManager.createMmContent(ftHttpResume.getFile(),ftHttpResume.getMimeType(),downloadInfo.getSize(),downloadInfo.getFileName());final DownloadFromResumeFileSharingSession resumeDownload=new DownloadFromResumeFileSharingSession(mImsService,downloadContent,downloadInfo,mRcsSettings,mMessagingLog,mContactManager);resumeDownload.addListener(getFileSharingSessionListener());mImsService.resumeIncomingFileTransfer(resumeDownload,resumeDownload.isGroupFileTransfer());resumeDownload.startSession();break;case OUTGOING:FtHttpResumeUpload uploadInfo=(FtHttpResumeUpload)ftHttpResume;MmContent uploadContent=ContentManager.createMmContent(uploadInfo.getFile(),uploadInfo.getMimeType(),uploadInfo.getSize(),uploadInfo.getFileName());if (!ftHttpResume.isGroupTransfer()) {final ResumeUploadFileSharingSession resumeUpload=new ResumeUploadFileSharingSession(mImsService,uploadContent,uploadInfo,mRcsSettings,mMessagingLog,mContactManager);resumeUpload.addListener(getFileSharingSessionListener());mImsService.resumeOutgoingFileTransfer(resumeUpload,false);resumeUpload.startSession();} else {final ResumeUploadGroupFileSharingSession resumeUpload=new ResumeUploadGroupFileSharingSession(mImsService,uploadContent,uploadInfo,mRcsSettings,mMessagingLog,mContactManager);resumeUpload.addListener(getFileSharingSessionListener());mImsService.resumeOutgoingFileTransfer(resumeUpload,true);resumeUpload.startSession();}break;default :break;}}  }
class C{  public final void testLetterWithContextParameter(){  assertNotNull(Validators.letter(getContext(),Case.CASE_INSENSITIVE,true,new char[]{'-'}));}  }
class C{  private void geofenceTriggered(Intent intent){  Log.v(TAG,ACTION_GEOFENCE_TRIGGERED);  boolean geofenceEnabled=Utils.getGeofenceEnabled(this);  GeofencingEvent event=GeofencingEvent.fromIntent(intent);  List<Geofence> geofences=event.getTriggeringGeofences();  if (geofenceEnabled && geofences != null && geofences.size() > 0) {    if (event.getGeofenceTransition() == Geofence.GEOFENCE_TRANSITION_ENTER) {      showNotification(geofences.get(0).getRequestId(),Constants.USE_MICRO_APP);    } else     if (event.getGeofenceTransition() == Geofence.GEOFENCE_TRANSITION_EXIT) {      clearNotificationInternal();      clearRemoteNotifications();    }  }  UtilityReceiver.completeWakefulIntent(intent);}  }
class C{  final static int compareScore(int wdl1,int score1,int wdl2,int score2){  final int M=1000;  if (wdl1 > 0)   score1=M - score1; else   if (wdl1 < 0)   score1=-M + score1;  if (wdl2 > 0)   score2=M - score2; else   if (wdl2 < 0)   score2=-M + score2;  return score1 - score2;}  }
class C{  public void componentRemoved(ContainerEvent e){  removeListeners(e.getChild());  if (AWTEventMonitor.containerListener_private != null) {    AWTEventMonitor.containerListener_private.componentRemoved(e);  }}  }
class C{  public DistanceMouseMode(boolean consumeEvents,InformationDelegator id){  super(modeID,consumeEvents);  infoDelegator=id;}  }
class C{  public static void removeTrace(String key){  sTraceMap.remove(key);}  }
class C{  public Iterator<Edge> edgesOutOf(Unit u){  return new TargetsOfUnitIterator(u);}  }
class C{  public CoreException(IStatus status){  super(status.getMessage());  this.status=status;}  }
class C{  public void write(String s) throws IOException {  write(s,0,(s != null) ? s.length() : 0);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public int size(){  return this.bitSetSize;}  }
class C{  public AtomicLong(long initialValue){  value=initialValue;}  }
class C{  protected void shutdown() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.shutdown();}  }
class C{  public static byte[] serializeNode(final Node xmlNode){  try {    final DOMImplementationRegistry registry=DOMImplementationRegistry.newInstance();    final DOMImplementationLS impl=(DOMImplementationLS)registry.getDOMImplementation("LS");    final LSSerializer writer=impl.createLSSerializer();    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();    final LSOutput output=impl.createLSOutput();    output.setByteStream(buffer);    writer.write(xmlNode,output);    final byte[] bytes=buffer.toByteArray();    return bytes;  } catch (  Exception e) {    throw new DSSException(e);  }}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public int addStringValue(Attribute src,int index){  if (!isString()) {    return -1;  }  Object store=src.m_Values.elementAt(index);  Integer oldIndex=(Integer)m_Hashtable.get(store);  if (oldIndex != null) {    return oldIndex.intValue();  } else {    int intIndex=m_Values.size();    m_Values.addElement(store);    m_Hashtable.put(store,new Integer(intIndex));    return intIndex;  }}  }
class C{  public boolean isJsonFormatted(){  return jsonFormatted;}  }
class C{  @Override public <T extends DataObject>T find(Class<T> clazz,URI id) throws DatabaseException {  return getDbClient().queryObject(clazz,id);}  }
class C{  public static int nullSafeHashCode(boolean[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  private XMLStreamReader newXMLStreamReader(){  try {    return XML_INPUT_FACTORY.createXMLStreamReader(new ByteArrayInputStream(xml),"UTF-8");  } catch (  Exception xmlEx) {    throw XMLTreeException.wrap(xmlEx);  }}  }
class C{  public TextCharacter withBackgroundColor(TextColor backgroundColor){  if (this.backgroundColor == backgroundColor || this.backgroundColor.equals(backgroundColor)) {    return this;  }  return new TextCharacter(character,foregroundColor,backgroundColor,modifiers);}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  @SuppressWarnings("unchecked") @EventBusListenerMethod(scope=EventScope.SESSION) public void onRolloutChangeEvent(final RolloutChangeEventContainer eventContainer){  eventContainer.getEvents().forEach(null);}  }
class C{  public static <T>Single.Transformer<T,T> subscribeOnIoThreadTransformerSingle(){  return null;}  }
class C{  public void clearDeclinedPaymentMethods(Delegator delegator){  String orderId=this.getOrderId();  if (UtilValidate.isNotEmpty(orderId)) {    try {      List<GenericValue> declinedPaymentMethods=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId,"statusId","PAYMENT_DECLINED").queryList();      if (!UtilValidate.isEmpty(declinedPaymentMethods)) {        List<String> paymentMethodIdsToRemove=new ArrayList<String>();        for (        GenericValue opp : declinedPaymentMethods) {          paymentMethodIdsToRemove.add(opp.getString("paymentMethodId"));        }        clearPaymentMethodsById(paymentMethodIdsToRemove);      }    } catch (    GenericEntityException ex) {      Debug.logError("Unable to remove declined payment methods from cart due to " + ex.getMessage(),module);      return;    }  }}  }
class C{  public static void main(String[] args){  TestHrefInDocComment tester=new TestHrefInDocComment();  if (run(tester,ARGS,TEST,NEGATED_TEST) != 0) {    throw new Error("Javadoc failed to execute properly with given source.");  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLACE\"";  db.execSQL(sql);}  }
class C{  public static void cursorDoubleToCursorValues(Cursor cursor,String field,ContentValues values){  cursorDoubleToContentValues(cursor,field,values,field);}  }
class C{  public UserProjectExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String url){  return helper.shouldOverrideUrlLoading(view,url);}  }
