class C{  @Override public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){  if (VERBOSE)   Log.v(TAG,"onBackup");  Journal in=readJournal(oldState);  if (!launcherIsReady()) {    dataChanged();    writeJournal(newState,in);    return;  }  Log.v(TAG,"lastBackupTime = " + in.t);  mKeys.clear();  applyJournal(in);  long newBackupTime=System.currentTimeMillis();  mBackupDataWasUpdated=false;  try {    backupFavorites(data);    backupScreens(data);    backupIcons(data);    backupWidgets(data);    HashSet<String> validKeys=new HashSet<String>();    for (    Key key : mKeys) {      validKeys.add(keyToBackupKey(key));    }    mExistingKeys.removeAll(validKeys);    for (    String deleted : mExistingKeys) {      if (VERBOSE)       Log.v(TAG,"dropping deleted item " + deleted);      data.writeEntityHeader(deleted,-1);      mBackupDataWasUpdated=true;    }    mExistingKeys.clear();    if (!mBackupDataWasUpdated) {      mBackupDataWasUpdated=false;    }    if (mBackupDataWasUpdated) {      mLastBackupRestoreTime=newBackupTime;      Journal state=getCurrentStateJournal();      writeRowToBackup(JOURNAL_KEY,state,data);    } else {      if (DEBUG)       Log.d(TAG,"Nothing was written during backup");    }  } catch (  IOException e) {    Log.e(TAG,"launcher backup has failed",e);  }  writeNewStateDescription(newState);}  }
class C{  void removeDuplicateChunkReferences(){  HashSet<Integer> chunks=New.hashSet();  chunks.add(DataUtils.getPageChunkId(pos));  for (int i=0; i < children.length; i++) {    long p=children[i];    int chunkId=DataUtils.getPageChunkId(p);    boolean wasNew=chunks.add(chunkId);    if (DataUtils.getPageType(p) == DataUtils.PAGE_TYPE_NODE) {      continue;    }    if (wasNew) {      continue;    }    removeChild(i--);  }}  }
class C{  public boolean isBalancing(){  Object oo=get_Value(COLUMNNAME_IsBalancing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void commitSample(long sampleTimeUs,int flags,long position,int size,byte[] encryptionKey){  infoQueue.commitSample(sampleTimeUs,flags,position,size,encryptionKey);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public OperationNotPermittedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public T caseAnnotablePropertyAssignment(AnnotablePropertyAssignment object){  return null;}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public void recycle(){  if (mIsInPool) {    throw new IllegalStateException("Record already recycled!");  }  clear();synchronized (sPoolLock) {    if (sPoolSize <= MAX_POOL_SIZE) {      mNext=sPool;      sPool=this;      mIsInPool=true;      sPoolSize++;    }  }}  }
class C{  private void updateUi(){  String password=mPasswordEntry.getText().toString();  final int length=password.length();  if (mUiStage == Stage.Introduction && length > 0) {    if (length < mPasswordMinLength) {      String msg=getString(mIsAlphaMode ? R.string.lockpassword_password_too_short : R.string.lockpassword_pin_too_short,mPasswordMinLength);      mHeaderText.setText(msg);      mNextButton.setEnabled(false);    } else {      String error=validatePassword(password);      if (error != null) {        mHeaderText.setText(error);        mNextButton.setEnabled(false);      } else {        mHeaderText.setText(R.string.lockpassword_press_continue);        mNextButton.setEnabled(true);      }    }  } else {    mHeaderText.setText(mIsAlphaMode ? mUiStage.alphaHint : mUiStage.numericHint);    mNextButton.setEnabled(length > 0);  }  mNextButton.setText(mUiStage.buttonText);}  }
class C{  private void updateShade(){  if (mAnimationType == PULL_UP_SHADE || mAnimationType == PULL_DOWN_SHADE) {    mShadePath.reset();    float shadeHeight;    if (mAnimationType == PULL_UP_SHADE) {      mShadePath.addRect(0,mHeight - getScrollDistance(),mWidth,mHeight,Path.Direction.CW);      shadeHeight=getScrollDistance();    } else {      mShadePath.addRect(0,0,mWidth,-getScrollDistance(),Path.Direction.CW);      shadeHeight=getScrollDistance() * (-1);    }    if (mIconDrawable != null) {      if (shadeHeight < mHeight / 2 || mHeight == 0) {        mIconDrawable.setAlpha(ALPHA_FULLY_TRANSPARENT);      } else {        int alpha=((int)shadeHeight - mHeight / 2) * ALPHA_FULLY_OPAQUE / (mHeight / 2);        mIconDrawable.setAlpha(alpha);      }    }    invalidate();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String details=getString(stack);  String name=getString(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()))   Sage.put("transcoder/formats/" + name,details);  return null;}  }
class C{  private static Pair<String,byte[]> parseEsdsFromParent(ParsableByteArray parent,int position){  parent.setPosition(position + Atom.HEADER_SIZE + 4);  parent.skipBytes(1);  int varIntByte=parent.readUnsignedByte();  while (varIntByte > 127) {    varIntByte=parent.readUnsignedByte();  }  parent.skipBytes(2);  int flags=parent.readUnsignedByte();  if ((flags & 0x80) != 0) {    parent.skipBytes(2);  }  if ((flags & 0x40) != 0) {    parent.skipBytes(parent.readUnsignedShort());  }  if ((flags & 0x20) != 0) {    parent.skipBytes(2);  }  parent.skipBytes(1);  varIntByte=parent.readUnsignedByte();  while (varIntByte > 127) {    varIntByte=parent.readUnsignedByte();  }  int objectTypeIndication=parent.readUnsignedByte();  String mimeType;switch (objectTypeIndication) {case 0x6B:    mimeType=MimeTypes.AUDIO_MPEG;  return Pair.create(mimeType,null);case 0x20:mimeType=MimeTypes.VIDEO_MP4V;break;case 0x21:mimeType=MimeTypes.VIDEO_H264;break;case 0x23:mimeType=MimeTypes.VIDEO_H265;break;case 0x40:case 0x66:case 0x67:case 0x68:mimeType=MimeTypes.AUDIO_AAC;break;case 0xA5:mimeType=MimeTypes.AUDIO_AC3;break;case 0xA6:mimeType=MimeTypes.AUDIO_EC3;break;case 0xA9:case 0xAC:mimeType=MimeTypes.AUDIO_DTS;return Pair.create(mimeType,null);case 0xAA:case 0xAB:mimeType=MimeTypes.AUDIO_DTS_HD;return Pair.create(mimeType,null);default :mimeType=null;break;}parent.skipBytes(12);parent.skipBytes(1);varIntByte=parent.readUnsignedByte();int varInt=varIntByte & 0x7F;while (varIntByte > 127) {varIntByte=parent.readUnsignedByte();varInt=varInt << 8;varInt|=varIntByte & 0x7F;}byte[] initializationData=new byte[varInt];parent.readBytes(initializationData,0,varInt);return Pair.create(mimeType,initializationData);}  }
class C{  public XYLineAnnotation(double x1,double y1,double x2,double y2,Stroke stroke,Paint paint){  super();  ParamChecks.nullNotPermitted(stroke,"stroke");  ParamChecks.nullNotPermitted(paint,"paint");  this.x1=x1;  this.y1=y1;  this.x2=x2;  this.y2=y2;  this.stroke=stroke;  this.paint=paint;}  }
class C{  public static List<VOParameterDefinition> toVOParameterDefinitions(List<ParameterDefinition> platformParameterDefinitions,List<ParameterDefinition> parameterDefinitions,boolean excludeNonConfigurableDefs,LocalizerFacade facade){  List<VOParameterDefinition> result=new ArrayList<VOParameterDefinition>();  if (platformParameterDefinitions != null) {    for (    ParameterDefinition paramDef : platformParameterDefinitions) {      if (needToInclude(excludeNonConfigurableDefs,paramDef)) {        VOParameterDefinition voParam=toVOParameterDefinition(paramDef,facade);        result.add(voParam);      }    }  }  if (parameterDefinitions != null) {    for (    ParameterDefinition paramDef : parameterDefinitions) {      if (needToInclude(excludeNonConfigurableDefs,paramDef)) {        VOParameterDefinition voParam=toVOParameterDefinition(paramDef,facade);        result.add(voParam);      }    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.686 -0500",hash_original_method="4AA3C7EB26254985E3ECDF70CE6C2F3C",hash_generated_method="4E77B69C06025364E8D4D70AEF0F602C") public static final ProcessStartResult start(final String processClass,final String niceName,int uid,int gid,int[] gids,int debugFlags,int targetSdkVersion,String[] zygoteArgs){  try {    return startViaZygote(processClass,niceName,uid,gid,gids,debugFlags,targetSdkVersion,zygoteArgs);  } catch (  ZygoteStartFailedEx ex) {    Log.e(LOG_TAG,"Starting VM process through Zygote failed");    throw new RuntimeException("Starting VM process through Zygote failed",ex);  }}  }
class C{  public String sqlAD_getSequences(String vendorName,String catalogName,String schemaName){  String tableName="AD_Sequence";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("Name");  columnNames.add("CurrentNextSys");  columnNames.add("CurrentNext");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("SEQ_NAME");  aliasNames.add("SEQ_SYS");  aliasNames.add("SEQ_USER");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("IsTableID = 'Y'");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public boolean register(Collection<? extends GridReservable> parts){  assert !F.isEmpty(parts) : "empty partitions list";  GridDhtLocalPartition[] arr=new GridDhtLocalPartition[parts.size()];  int i=0;  int prevPart=-1;  boolean sorted=true;  for (  GridReservable part : parts) {    arr[i]=(GridDhtLocalPartition)part;    if (sorted) {      int id=arr[i].id();      if (id <= prevPart)       sorted=false;      prevPart=id;    }    i++;  }  if (!sorted)   Arrays.sort(arr);  i=0;  prevPart=-1;  for (  GridDhtLocalPartition part : arr) {    if (prevPart == part.id())     throw new IllegalStateException("Duplicated partitions.");    prevPart=part.id();    if (!part.addReservation(this)) {      if (i != 0)       throw new IllegalStateException("Trying to reserve different sets of partitions for the same topology version.");      return false;    }    i++;  }  if (!this.parts.compareAndSet(null,arr))   throw new IllegalStateException("Partitions can be registered only once.");  assert reservations.get() != -1 : "all the partitions must be reserved before register, we can't be invalidated";  return true;}  }
class C{  public void remove(final int revisionCounter){  this.set.remove(revisionCounter);  if (this.set.isEmpty()) {    clean(0,0);  }}  }
class C{  void addAssumptionsToComposite(Vector<NodeRepresentation> nodeRepVector,Composite composite){  Composite comp;  GridData gridData;  GridLayout gridLayout;  Label assumeLabel;  int assumeWidth=0;  for (int i=0; i < nodeRepVector.size(); i++) {    for (int j=0; j < nodeRepVector.elementAt(i).nodeText.length; j++) {      assumeWidth=Math.max(assumeWidth,nodeRepVector.elementAt(i).nodeText[j].length());    }  }  for (int i=0; i < nodeRepVector.size(); i++) {    NodeRepresentation aRep=nodeRepVector.elementAt(i);    if (aRep.nodeType != NodeRepresentation.OR_DECOMP) {      String labelText=null;      if ((aRep.semanticNode != null) && (aRep.semanticNode.getKind() == ASTConstants.OpApplKind)) {switch (aRep.nodeSubtype) {case NodeRepresentation.AND_TYPE:          labelText="/\\";        break;case NodeRepresentation.OR_TYPE:case NodeRepresentation.SQSUB_TYPE:      labelText="\\/";    break;case NodeRepresentation.EXISTS_TYPE:  labelText="\\E";break;default :labelText=null;}}if (labelText != null) {Button button=new Button(composite,SWT.PUSH);setupActionButton(button,nodeRepVector.elementAt(i),labelText);if (((chosenSplit != -1) && (i != chosenSplit)) || ((andSplitBegin != -1) && ((i < andSplitBegin) || (i > andSplitEnd)))) {button.setEnabled(false);}} else {comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);assumeLabel=new Label(comp,SWT.NONE);assumeLabel.setText("  ");gridData=new GridData();gridData.horizontalIndent=25;comp.setLayoutData(gridData);}comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);comp.setSize(0,5);comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(3,false);comp.setLayout(gridLayout);if ((chosenSplit == -1) && (andSplitBegin <= i) && (i <= andSplitEnd)) {Button arrowButton=new Button(comp,SWT.ARROW | SWT.UP);arrowButton.addSelectionListener(new ArrowSelectionListener(i,SWT.UP,this));gridData=new GridData();gridData.verticalAlignment=SWT.TOP;arrowButton.setLayoutData(gridData);if (i == andSplitBegin) {arrowButton.setEnabled(false);}arrowButton=new Button(comp,SWT.ARROW | SWT.DOWN);arrowButton.addSelectionListener(new ArrowSelectionListener(i,SWT.DOWN,this));gridData=new GridData();gridData.verticalAlignment=SWT.TOP;arrowButton.setLayoutData(gridData);if (i == andSplitEnd) {arrowButton.setEnabled(false);}}assumeLabel=new Label(comp,SWT.BORDER);String text=stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());while (nodeRepVector.elementAt(i).onSameLineAsNext) {i++;text=text + ", " + stringArrayToString(nodeRepVector.elementAt(i).nodeText);}assumeLabel.setText(text);assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));gridData=new GridData();gridData.horizontalIndent=0;gridData.verticalAlignment=SWT.TOP;gridData.horizontalAlignment=SWT.LEFT;assumeLabel.setLayoutData(gridData);} else {Button goalButton=new Button(composite,SWT.PUSH);setupActionButton(goalButton,aRep,"P");gridData=new GridData();gridData.horizontalIndent=15;goalButton.setLayoutData(gridData);goalButton.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);Composite inner=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(2,false);inner.setLayout(gridLayout);for (int j=0; j < aRep.children.size(); j++) {assumeLabel=new Label(inner,SWT.NONE);assumeLabel.setText("CASE");assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));Composite caseComp=new Composite(inner,SWT.BORDER);gridLayout=new GridLayout(3,false);caseComp.setLayout(gridLayout);addCaseToComposite(aRep.children.elementAt(j),caseComp);gridData=new GridData();gridData.verticalAlignment=SWT.TOP;caseComp.setLayoutData(gridData);}}}}  }
class C{  public Geometry create(){  if (geometryFactory == null) {    throw new NullPointerException("GeometryFactory is not declared");  }  if (boundingBox == null || boundingBox.isNull()) {    throw new NullPointerException("Bounding Box is not declared");  }  if (numberPoints < 4) {    throw new IllegalStateException("Too few points");  }  double x=boundingBox.getMinX();  double dx=boundingBox.getMaxX() - x;  double y=boundingBox.getMinY();  double dy=boundingBox.getMaxY() - y;  Polygon p=null;  for (int i=0; i < RUNS; i++) {switch (getGenerationAlgorithm()) {case BOX:      p=createBox(x,dx,y,dy,numberHoles,numberPoints,geometryFactory);    break;case ARC:  p=createArc(x,dx,y,dy,numberHoles,numberPoints,geometryFactory);break;default :throw new IllegalStateException("Invalid Alg. Specified");}IsValidOp valid=new IsValidOp(p);if (valid.isValid()) {return p;}}return null;}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CODE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.914 -0500",hash_original_method="EE3369F93F89F031119BE898CF210D83",hash_generated_method="B3EFDCB9C29B4EC9F4F562DA178F9D3B") public final void cancelOperation(int token){  mWorkerThreadHandler.removeMessages(token);}  }
class C{  public PrefixedPath createNestedformdirs(){  PrefixedPath p=new PrefixedPath(getProject());  if (myNestedFormPathList == null) {    myNestedFormPathList=new ArrayList();  }  myNestedFormPathList.add(p);  return p;}  }
class C{  public RadialGradientPaint(Point2D center,float radius,Point2D focus,float[] fractions,Color[] colors){  this(center,radius,focus,fractions,colors,NO_CYCLE,SRGB);}  }
class C{  public void testInflectionalOnly() throws IOException {  checkOneTerm(b,"bukunya","buku");  checkOneTerm(b,"bukukah","buku");  checkOneTerm(b,"bukunyakah","buku");  checkOneTerm(b,"dibukukannya","dibukukan");}  }
class C{  public TransportNetwork buildNetwork(String networkId){  TransportNetwork network;  String manifestFile=GTFSCache.cleanId(networkId) + ".json";  if (new File(cacheDir,manifestFile).exists() || sourceBucket != null && s3.doesObjectExist(sourceBucket,manifestFile)) {    LOG.info("Detected new-format bundle with manifest.");    network=buildNetworkFromManifest(networkId);  } else {    LOG.warn("Detected old-format bundle stored as single ZIP file");    network=buildNetworkFromBundleZip(networkId);  }  String filename=networkId + "_" + R5Version.version+ ".dat";  File cacheLocation=new File(cacheDir,networkId + "_" + R5Version.version+ ".dat");  try {    FileOutputStream fos=new FileOutputStream(cacheLocation);    try {      network.write(fos);    }  finally {      fos.close();    }    LOG.info("Uploading the serialized TransportNetwork to S3 for use by other workers.");    s3.putObject(sourceBucket,filename,cacheLocation);    LOG.info("Done uploading the serialized TransportNetwork to S3.");  } catch (  Exception e) {    LOG.error("Error saving cached network",e);    cacheLocation.delete();  }  return network;}  }
class C{  private String calculateAbsoluteDirectory(String type,String directory){  File directoryFile=new File(directory);  if (!directoryFile.isAbsolute()) {    String absoluteDirectory=directoryFile.getAbsolutePath();    if (getLogger() != null) {      getLogger().warn("The provided " + type + " directory ["+ directory+ "] is not an absolute directory. Replacing it with its absolute directory "+ "counterpart, i.e. ["+ absoluteDirectory+ "] To avoid this message in "+ "the future, you can also use the ${basedir} variable in your "+ "paths.",this.getClass().getName());    }    return absoluteDirectory;  } else {    return directory;  }}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  public void afterBeanDiscovery(@Observes final AfterBeanDiscovery event,BeanManager beanManager){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("Adding @ViewScoped context to CDI runtime");  }  event.addContext(new ViewScopeContext());  if (isCdiOneOneOrGreater) {    Class clazz=null;    try {      clazz=Class.forName("com.sun.faces.application.view.ViewScopedCDIEventFireHelperImpl");    } catch (    ClassNotFoundException ex) {      if (LOGGER.isLoggable(Level.SEVERE)) {        LOGGER.log(Level.SEVERE,"CDI 1.1 events not enabled",ex);      }      return;    }    if (null == cdiUtil) {      ServiceLoader<CDIUtil> oneCdiUtil=ServiceLoader.load(CDIUtil.class);      for (      CDIUtil oneAndOnly : oneCdiUtil) {        if (null != cdiUtil) {          String message="Must only have one implementation of CDIUtil available";          if (LOGGER.isLoggable(Level.SEVERE)) {            LOGGER.log(Level.SEVERE,message);          }          throw new IllegalStateException(message);        }        cdiUtil=oneAndOnly;      }    }    if (null != cdiUtil) {      Bean bean=cdiUtil.createHelperBean(beanManager,clazz);      event.addBean(bean);    } else     if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,"Unable to obtain CDI 1.1 utilities for Mojarra");    }  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private void initializeLists(){  if (this.filterPanelList == null) {    this.filterPanelList=new ArrayList<>();  }  if (treeViewPanelList == null) {    this.treeViewPanelList=new ArrayList<>();  }  if (this.tabList == null) {    this.tabList=new ArrayList<>();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private Collection filterByCondition(Collection source,int from,int to) throws XPatherException {  ArrayList result=new ArrayList();  Iterator iterator=source.iterator();  int index=0;  int size=source.size();  while (iterator.hasNext()) {    Object curr=iterator.next();    index++;    ArrayList logicValueList=new ArrayList(evaluateAgainst(singleton(curr),from,to,false,index,size,true,singleton(curr)));    if (logicValueList.size() >= 1) {      Object first=logicValueList.get(0);      if (first instanceof Boolean) {        if (((Boolean)first).booleanValue()) {          result.add(curr);        }      } else       if (first instanceof Integer) {        if (((Integer)first).intValue() == index) {          result.add(curr);        }      } else {        result.add(curr);      }    }  }  return result;}  }
class C{  public synchronized void addYTextLabel(double y,String text,int scale){  mYTextLabels.get(scale).put(y,text);}  }
class C{  public static Builder jsonToBuilder(InputStream inp) throws OracleException {  if (inp == null)   return createStandardBuilder();  Builder builder=new Builder();  DocumentLoader loader;  JsonObject jDocument;  try {    loader=new DocumentLoader(inp);  } catch (  JsonException e) {    Throwable cause=e.getCause();    if (cause instanceof IOException) {      throw SODAUtils.makeException(SODAMessage.EX_METADATA_DOC_IO_EXCEPTION,cause);    } else {      throw SODAUtils.makeException(SODAMessage.EX_METADATA_DOC_INVALID_JSON_CANT_DETERMINE_ENCODING,e);    }  }  try {    JsonStructure structure=loader.parse();    if (JsonValue.ValueType.OBJECT != structure.getValueType())     throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_OBJECT);    jDocument=(JsonObject)structure;  } catch (  JsonParsingException e) {    throw SODAUtils.makeException(SODAMessage.EX_METADATA_DOC_INVALID_JSON,e);  }catch (  JsonException e) {    Throwable cause=e.getCause();    if (cause instanceof IOException) {      throw SODAUtils.makeException(SODAMessage.EX_METADATA_DOC_IO_EXCEPTION,cause);    } else {      throw SODAUtils.makeException(SODAMessage.EX_METADATA_DOC_INVALID_JSON,e);    }  }  for (  Map.Entry<String,JsonValue> entry : jDocument.entrySet()) {    String entryKey=entry.getKey();    if (entryKey.equalsIgnoreCase("schemaName")) {      builder.schemaName(entryToString(entry));    } else     if (entryKey.equalsIgnoreCase("tableName")) {      builder.tableName(entryToString(entry));    } else     if (entryKey.equalsIgnoreCase("viewName")) {      builder.viewName(entryToString(entry));    } else     if (entryKey.equalsIgnoreCase("packageName")) {      builder.packageName(entryToString(entry));    } else     if (entryKey.equalsIgnoreCase("contentColumn")) {      for (      Map.Entry<String,JsonValue> subentry : entryToObject(entry).entrySet()) {        String fieldName=subentry.getKey();        if (fieldName.equalsIgnoreCase("name")) {          builder.contentColumnName(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("sqlType")) {          builder.contentColumnType(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("maxLength")) {          builder.contentColumnMaxLength(entryToInt(subentry));        } else         if (fieldName.equalsIgnoreCase("validation")) {          builder.contentColumnValidation(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("compress")) {          builder.contentColumnCompress(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("cache")) {          builder.contentColumnCache(entryToBoolean(subentry));        } else         if (fieldName.equalsIgnoreCase("encrypt")) {          builder.contentColumnEncrypt(entryToString(subentry));        } else         throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,fieldName);      }    } else     if (entryKey.equalsIgnoreCase("keyColumn")) {      for (      Map.Entry<String,JsonValue> subentry : entryToObject(entry).entrySet()) {        String fieldName=subentry.getKey();        if (fieldName.equalsIgnoreCase("name")) {          builder.keyColumnName(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("sqlType")) {          builder.keyColumnType(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("maxLength")) {          builder.keyColumnMaxLength(entryToInt(subentry));        } else         if (fieldName.equalsIgnoreCase("sequenceName")) {          builder.keyColumnSequenceName(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("assignmentMethod")) {          builder.keyColumnAssignmentMethod(entryToString(subentry));        } else         throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,fieldName);      }    } else     if (entryKey.equalsIgnoreCase("creationTimeColumn")) {      for (      Map.Entry<String,JsonValue> subentry : entryToObject(entry).entrySet()) {        String fieldName=subentry.getKey();        if (fieldName.equalsIgnoreCase("name")) {          builder.creationTimeColumnName(entryToString(subentry));        } else         throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,fieldName);      }    } else     if (entryKey.equalsIgnoreCase("lastModifiedColumn")) {      for (      Map.Entry<String,JsonValue> subentry : entryToObject(entry).entrySet()) {        String fieldName=subentry.getKey();        if (fieldName.equalsIgnoreCase("name")) {          builder.lastModifiedColumnName(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("index")) {          builder.lastModifiedColumnIndex(entryToString(subentry));        } else         throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,fieldName);      }    } else     if (entryKey.equalsIgnoreCase("versionColumn")) {      for (      Map.Entry<String,JsonValue> subentry : entryToObject(entry).entrySet()) {        String fieldName=subentry.getKey();        if (fieldName.equalsIgnoreCase("name")) {          builder.versionColumnName(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("method")) {          builder.versionColumnMethod(entryToString(subentry));        } else         if (fieldName.equalsIgnoreCase("type")) {        } else         throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,fieldName);      }    } else     if (entryKey.equalsIgnoreCase("mediaTypeColumn")) {      for (      Map.Entry<String,JsonValue> subentry : entryToObject(entry).entrySet()) {        String fieldName=subentry.getKey();        if (fieldName.equalsIgnoreCase("name")) {          builder.mediaTypeColumnName(entryToString(subentry));        } else         throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,fieldName);      }    } else     if (entryKey.equalsIgnoreCase("readOnly")) {      JsonValue value=entry.getValue();      if (value.getValueType() == JsonValue.ValueType.TRUE)       builder.readOnly(true); else       if (value.getValueType() == JsonValue.ValueType.FALSE)       builder.readOnly(false); else       if (value.getValueType() == JsonValue.ValueType.STRING) {        String readWrite=((JsonString)value).getString();        if ("READWRITE".equalsIgnoreCase(readWrite))         builder.readOnly(false); else         if ("READONLY".equalsIgnoreCase(readWrite))         builder.readOnly(true); else         throw SODAUtils.makeException(SODAMessage.EX_UNEXPECTED_IN_COL_SPEC,entryKey);      } else       throw SODAUtils.makeException(SODAMessage.EX_UNEXPECTED_IN_COL_SPEC,entryKey);    } else     throw SODAUtils.makeException(SODAMessage.EX_COL_SPEC_NOT_EXPECTED,entryKey);  }  return (builder);}  }
class C{  private TableModel tableModel(Node node){  if (node.getNodeType() != Node.ELEMENT_NODE) {    Toolkit.getDefaultToolkit().beep();    return _defaultTableModel;  }  Map props=_sr.getCascadedPropertiesMap((Element)node);  return new PropertiesTableModel(props);}  }
class C{  private static void saveRootLog(final EvidenceBuilder fsLog){  final int version=2010031501;  if (Cfg.DEBUG) {    Check.requires(fsLog != null,"fsLog null");  }  final byte[] content=new byte[30];  final DataBuffer databuffer=new DataBuffer(content);  databuffer.writeInt(version);  databuffer.writeInt(2);  databuffer.writeInt(1);  databuffer.writeLong(0);  databuffer.writeLong(DateTime.getFiledate(new Date()));  databuffer.write(WChar.getBytes("/"));  fsLog.write(content);}  }
class C{  @Override public void stop(){  Log.i(ZORN_WORKER_TAG,"stop() is not implemented in your worker!!");}  }
class C{  public static String formatDate(Date date,String pattern){  return getSimplDateFormat(pattern).format(date);}  }
class C{  void suspend(ThreadQueue queue){  assert isMutator() : "Collector threads may not yield to a mutator wait queue";  yield(queue);  assert mutatorsBlocked.get() <= mutators.size() : mutatorsBlocked.get() + " mutators are blocked but only " + mutators.size()+ " exist";}  }
class C{  private static String make(){  final ResourceBundle res=ResourceBundle.getBundle("org.takes.version");  return String.format("%s %s %s",res.getString("version"),res.getString("revision"),res.getString("date"));}  }
class C{  public static int indexOf(String[] arr,String value){  for (int i=0; i < arr.length; i++) {    if (arr[i].equals(value))     return i;  }  return -1;}  }
class C{  Map<String,VPlexVirtualVolumeInfo> findVirtualVolumes(List<VPlexClusterInfo> clusterInfoList,List<VPlexVirtualVolumeInfo> virtualVolumeInfos,boolean fetchAtts,boolean retry) throws VPlexApiException {  if (virtualVolumeInfos == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolumeNull();  }  StringBuffer volumeNameStrBuf=new StringBuffer();  Map<String,VPlexVirtualVolumeInfo> virtualVolumesToFind=new HashMap<String,VPlexVirtualVolumeInfo>();  for (  VPlexVirtualVolumeInfo virtualVolumeInfo : virtualVolumeInfos) {    volumeNameStrBuf.append(virtualVolumeInfo.getName()).append(" ");    virtualVolumesToFind.put(virtualVolumeInfo.getName(),virtualVolumeInfo);  }  s_logger.info("Find virtual volume(s) containing {}",volumeNameStrBuf.toString());  Map<String,VPlexVirtualVolumeInfo> foundVirtualVolumes=new HashMap<String,VPlexVirtualVolumeInfo>();  int retryCount=0;  while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {    try {      Map<String,List<VPlexVirtualVolumeInfo>> clusterToVirtualVolumeMap=new HashMap<String,List<VPlexVirtualVolumeInfo>>();      for (      VPlexClusterInfo clusterInfo : clusterInfoList) {        List<VPlexVirtualVolumeInfo> clusterVolumeInfoList=getVirtualVolumesForCluster(clusterInfo.getName());        clusterToVirtualVolumeMap.put(clusterInfo.getName(),clusterVolumeInfoList);      }      List<VPlexVirtualVolumeInfo> virtualVolumeToFindList=new ArrayList<VPlexVirtualVolumeInfo>();      for (      Map.Entry<String,VPlexVirtualVolumeInfo> entry : virtualVolumesToFind.entrySet()) {        virtualVolumeToFindList.add(entry.getValue());      }      for (      VPlexVirtualVolumeInfo virtualVolumeInfo : virtualVolumeToFindList) {        List<VPlexVirtualVolumeInfo> clusterVolumeInfoList=clusterToVirtualVolumeMap.get(virtualVolumeInfo.getClusters().get(0));        for (        VPlexVirtualVolumeInfo volumeInfo : clusterVolumeInfoList) {          s_logger.info("Virtual volume Info: {}",volumeInfo.toString());          if (volumeInfo.getName().equals(virtualVolumeInfo.getName())) {            s_logger.info("Found virtual volume {}",volumeInfo.getName());            foundVirtualVolumes.put(virtualVolumeInfo.getName(),volumeInfo);            virtualVolumesToFind.remove(virtualVolumeInfo.getName());          }        }      }      if (!foundVirtualVolumes.isEmpty() && foundVirtualVolumes.size() == virtualVolumeInfos.size()) {        return foundVirtualVolumes;      }      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.warn(String.format("Virtual volumes %s not found on try %d of %d",geAllVolumeNamesFromMap(virtualVolumesToFind),retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES));        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        break;      }    } catch (    VPlexApiException vae) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding virtual volumes on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        if (!foundVirtualVolumes.isEmpty()) {          return foundVirtualVolumes;        } else {          throw vae;        }      }    }catch (    Exception e) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding virtual volumes on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        if (!foundVirtualVolumes.isEmpty()) {          return foundVirtualVolumes;        } else {          throw e;        }      }    }  }  return null;}  }
class C{  public static int[] values(Integer[] array){  int[] dest=new int[array.length];  for (int i=0; i < array.length; i++) {    Integer v=array[i];    if (v != null) {      dest[i]=v.intValue();    }  }  return dest;}  }
class C{  protected void processFocusEvent(FocusEvent evt){  super.processFocusEvent(evt);  if (evt.getID() == FocusEvent.FOCUS_LOST) {    if (popup != null)     hidePopup();  }}  }
class C{  public ExpandedNodeId(UnsignedInteger serverIndex,String namespaceUri,Object value){  if (namespaceUri == null)   throw new NullPointerException("namespaceUri; value=" + value);  if (namespaceUri.isEmpty())   throw new IllegalArgumentException("namespaceUri not defined");  this.serverIndex=serverIndex == null ? UnsignedInteger.ZERO : serverIndex;  if (value instanceof Integer)   value=UnsignedInteger.valueOf((Integer)value);  this.value=value;  this.namespaceUri=namespaceUri;  if (value == null)   type=IdType.String; else   if (value instanceof UnsignedInteger)   type=IdType.Numeric; else   if (value instanceof String)   type=IdType.String; else   if (value instanceof UUID)   type=IdType.Guid; else   if (value instanceof byte[])   type=IdType.Opaque; else   throw new IllegalArgumentException("value cannot be " + value.getClass().getName());}  }
class C{  private void removeUselessLineNumbers(MethodNode method){  for (ListIterator<?> lit=method.instructions.iterator(); lit.hasNext(); ) {    AbstractInsnNode insn=(AbstractInsnNode)lit.next();    if (insn.getType() == LINE) {      AbstractInsnNode nextInsn=insn.getNext();      if (nextInsn != null && nextInsn.getType() == LINE) {        lit.remove();      }    }  }}  }
class C{  public void dispatch(){  dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:28.748 -0500",hash_original_method="0D14EAB00EC2474BC71AEF293B196DEA",hash_generated_method="D2F960F779FD939B2BC59978D4D13AA0") protected Uri onRestoreRingtone(){  final String uriString=getPersistedString(null);  return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;}  }
class C{  public boolean hasPermission(Security security,GenericValue userLogin){  return OrderReadHelper.hasPermission(security,userLogin,orderHeader);}  }
class C{  public static void drawObjectLocation(Mat output,ObjectAnalysis objectAnalysis,SceneAnalysis sceneAnalysis){  List<Point> ptsObject=new ArrayList<>();  List<Point> ptsScene=new ArrayList<>();  KeyPoint[] keypointsObject=objectAnalysis.keypoints.toArray();  KeyPoint[] keypointsScene=sceneAnalysis.keypoints.toArray();  DMatch[] matches=sceneAnalysis.matches.toArray();  for (  DMatch matche : matches) {    ptsObject.add(keypointsObject[matche.queryIdx].pt);    ptsScene.add(keypointsScene[matche.trainIdx].pt);  }  MatOfPoint2f matObject=new MatOfPoint2f();  matObject.fromList(ptsObject);  MatOfPoint2f matScene=new MatOfPoint2f();  matScene.fromList(ptsScene);  Mat homography=Calib3d.findHomography(matObject,matScene,Calib3d.RANSAC,5.0f);  Point cornersObject[]=new Point[4];  cornersObject[0]=new Point(0,0);  cornersObject[1]=new Point(objectAnalysis.object.cols(),0);  cornersObject[2]=new Point(objectAnalysis.object.cols(),objectAnalysis.object.rows());  cornersObject[3]=new Point(0,objectAnalysis.object.rows());  Point[] cornersSceneTemp=new Point[0];  MatOfPoint2f cornersSceneMatrix=new MatOfPoint2f(cornersSceneTemp);  MatOfPoint2f cornersObjectMatrix=new MatOfPoint2f(cornersObject);  Core.perspectiveTransform(cornersObjectMatrix,cornersSceneMatrix,homography);  Point[] cornersScene=cornersSceneMatrix.toArray();  final ColorRGBA lineColor=new ColorRGBA("#00ff00");  Drawing.drawLine(output,new Point(cornersScene[0].x + objectAnalysis.object.cols(),cornersScene[0].y),new Point(cornersScene[1].x + objectAnalysis.object.cols(),cornersScene[1].y),lineColor,5);  Drawing.drawLine(output,new Point(cornersScene[1].x + objectAnalysis.object.cols(),cornersScene[1].y),new Point(cornersScene[2].x + objectAnalysis.object.cols(),cornersScene[2].y),lineColor,5);  Drawing.drawLine(output,new Point(cornersScene[2].x + objectAnalysis.object.cols(),cornersScene[2].y),new Point(cornersScene[3].x + objectAnalysis.object.cols(),cornersScene[3].y),lineColor,5);  Drawing.drawLine(output,new Point(cornersScene[3].x + objectAnalysis.object.cols(),cornersScene[3].y),new Point(cornersScene[0].x + objectAnalysis.object.cols(),cornersScene[0].y),lineColor,5);}  }
class C{  public void dump(Object data,Writer output){  List<Object> list=new ArrayList<Object>(1);  list.add(data);  dumpAll(list.iterator(),output,null);}  }
class C{  public boolean isMessageIdRequired(){  return false;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void processWindowsLauncherCommandLine(final String currentDirectory,final String commandLine){  if (ourMirrorClass != null) {    try {      Method method=ourMirrorClass.getMethod("processWindowsLauncherCommandLine",String.class,String.class);      method.invoke(null,currentDirectory,commandLine);    } catch (    NoSuchMethodException e) {    }catch (    InvocationTargetException e) {    }catch (    IllegalAccessException e) {    }  } else {    if (LISTENER != null) {      LISTENER.processWindowsLauncherCommandLine(currentDirectory,commandLine);    }  }}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTrainingSetProduced(TrainingSetEvent tse){  Vector<TrainingSetListener> l;synchronized (this) {    l=(Vector<TrainingSetListener>)m_trainingListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (m_foldThread == null) {        break;      }      l.elementAt(i).acceptTrainingSet(tse);    }  }}  }
class C{  @ZeppelinApi public void angularUnwatch(String name){  angularUnwatch(name,interpreterContext.getNoteId());}  }
class C{  public TestGrouping removePackagesRecursive(String... packageNames){  for (  String packageName : packageNames) {    testCaseClasses.removeAll(testCaseClassesInPackage(packageName));  }  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TINTERFACE;}  }
class C{  protected LogicalOrExpressionImpl(){  super();}  }
class C{  private static void rangeCheck(int arrayLen,int fromIndex,int toIndex){  if (fromIndex > toIndex)   throw new IllegalArgumentException("fromIndex(" + fromIndex + ") > toIndex("+ toIndex+ ")");  if (fromIndex < 0)   throw new ArrayIndexOutOfBoundsException(fromIndex);  if (toIndex > arrayLen)   throw new ArrayIndexOutOfBoundsException(toIndex);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=(E)s.readObject();}  }
class C{  public static long bigArraySize(final long expected,final float f){  return nextPowerOfTwo((long)Math.ceil(expected / f));}  }
class C{  public AbstractValidatorImplementation(final CharSequence errorMessage){  super(errorMessage);}  }
class C{  public boolean equals(lalr_state other){  return other != null && items().equals(other.items());}  }
class C{  public void removeOneToOneChat(ContactId contact){  mOneToOneChatCache.remove(contact);  if (sLogger.isActivated()) {    sLogger.debug("Remove oneToOne chat from list (size=" + mOneToOneChatCache.size() + ") for "+ contact);  }}  }
class C{  public LogisticRegressionDCD(double C,int maxIterations){  setC(C);  setMaxIterations(maxIterations);}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  process(request,response);}  }
class C{  public void flattenTransform(){  if (get(TRANSFORM) != null) {    path.transform(get(TRANSFORM));    set(TRANSFORM,null);  }  invalidate();}  }
class C{  public void push(){  state.cliprgn=g.getClipBounds();  stack.push(state);  state=(GraphicsState)state.clone();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  String url="/notes.jsp";  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    log.warning("No web user");    if (!response.isCommitted())     response.sendRedirect("loginServlet?ForwardTo=notes.jsp");    return;  }  WebEnv.dump(request);  int AD_Note_ID=WebUtil.getParameterAsInt(request,P_Note_ID);  String processed=WebUtil.getParameter(request,"Processed");  boolean prc=processed != null && processed.length() > 0;  if (prc) {    MNote note=new MNote(ctx,AD_Note_ID,null);    if (note.get_ID() == AD_Note_ID) {      note.setProcessed(true);      note.saveEx();      log.fine("doPost - " + note);    }  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public SimpleThreadFactory(String prefix){  this.prefix=prefix;}  }
class C{  public static void saveMinifiedSchema(final LmlParser parser,final Appendable appendable){  try {    new Dtd().setAppendComments(false).getDtdSchema(parser,appendable);  } catch (  final IOException exception) {    throw new GdxRuntimeException("Unable to append to file.",exception);  }}  }
class C{  protected void checkBugInstance(BugInstance bugInstance){  for (Iterator<BugAnnotation> i=bugInstance.annotationIterator(); i.hasNext(); ) {    BugAnnotation bugAnnotation=i.next();    if (bugAnnotation instanceof PackageMemberAnnotation) {      PackageMemberAnnotation pkgMember=(PackageMemberAnnotation)bugAnnotation;      if (pkgMember.getSourceLines() == null) {        throw new IllegalStateException("Package member " + pkgMember + " reported without source lines!");      }    }  }}  }
class C{  public static double standardCDF(double x,boolean log_p){  boolean i_tail=false;  if (Double.isNaN(x)) {    return Double.NaN;  }  double xden, xnum, temp, del, eps, xsq, y;  int i;  double p=x, cp=Double.NaN;  boolean lower, upper;  eps=DBL_EPSILON * 0.5;  lower=!i_tail;  upper=i_tail;  y=Math.abs(x);  if (y <= 0.67448975) {    if (y > eps) {      xsq=x * x;      xnum=a[4] * xsq;      xden=xsq;      for (i=0; i < 3; i++) {        xnum=(xnum + a[i]) * xsq;        xden=(xden + b[i]) * xsq;      }    } else {      xnum=xden=0.0;    }    temp=x * (xnum + a[3]) / (xden + b[3]);    if (lower) {      p=0.5 + temp;    }    if (upper) {      cp=0.5 - temp;    }    if (log_p) {      if (lower) {        p=Math.log(p);      }      if (upper) {        cp=Math.log(cp);      }    }  } else   if (y <= M_SQRT_32) {    xnum=c[8] * y;    xden=y;    for (i=0; i < 7; i++) {      xnum=(xnum + c[i]) * y;      xden=(xden + d[i]) * y;    }    temp=(xnum + c[7]) / (xden + d[7]);    xsq=((int)(y * CUTOFF)) * 1.0 / CUTOFF;    del=(y - xsq) * (y + xsq);    if (log_p) {      p=(-xsq * xsq * 0.5) + (-del * 0.5) + Math.log(temp);      if ((lower && x > 0.0) || (upper && x <= 0.0)) {        cp=Math.log(1.0 - Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp);      }    } else {      p=Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp;      cp=1.0 - p;    }    if (x > 0.0) {      temp=p;      if (lower) {        p=cp;      }      cp=temp;    }  } else   if (log_p || (lower && -37.5193 < x && x < 8.2924) || (upper && -8.2924 < x && x < 37.5193)) {    xsq=1.0 / (x * x);    xnum=p_[5] * xsq;    xden=xsq;    for (i=0; i < 4; i++) {      xnum=(xnum + p_[i]) * xsq;      xden=(xden + q[i]) * xsq;    }    temp=xsq * (xnum + p_[4]) / (xden + q[4]);    temp=(M_1_SQRT_2PI - temp) / y;    xsq=((int)(x * CUTOFF)) * 1.0 / CUTOFF;    del=(x - xsq) * (x + xsq);    if (log_p) {      p=(-xsq * xsq * 0.5) + (-del * 0.5) + Math.log(temp);      if ((lower && x > 0.0) || (upper && x <= 0.0)) {        cp=Math.log(1.0 - Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp);      }    } else {      p=Math.exp(-xsq * xsq * 0.5) * Math.exp(-del * 0.5) * temp;      cp=1.0 - p;    }    if (x > 0.0) {      temp=p;      if (lower) {        p=cp;      }      cp=temp;    }  } else {    if (x > 0) {      p=1.0;      cp=0.0;    } else {      p=0.0;      cp=1.0;    }  }  return p;}  }
class C{  public static boolean uninstall(Context context,String packageName){  if (packageName == null || packageName.length() == 0) {    return false;  }  Intent i=new Intent(Intent.ACTION_DELETE,Uri.parse(new StringBuilder(32).append("package:").append(packageName).toString()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public void put(String key,String customFileName,File file) throws FileNotFoundException {  put(key,file,null,customFileName);}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> builder(){  return new Builder<K,V>();}  }
class C{  protected void updateTextBounds(DrawContext dc){  this.textBounds=this.getTextRenderer(dc).getBounds(this.text);}  }
class C{  public static void syncLogPrintln(String s,Object... args){  if (syncLog) {    getSyncLogFile().print(String.format(s,args));    getSyncLogFile().println();  }  return;}  }
class C{  public ReconnectReceiver(IRCService service,Server server){  this.service=service;  this.server=server;}  }
class C{  protected int index(int key){  int hash, index, length;  final byte[] states=_states;  final int[] set=_set;  length=states.length;  hash=HashFunctions.hash(key) & 0x7fffffff;  index=hash % length;  byte state=states[index];  if (state == FREE)   return -1;  if (state == FULL && set[index] == key)   return index;  return indexRehashed(key,index,hash,state);}  }
class C{  public void reset(){  a=0x0123456789ABCDEFL;  b=0xFEDCBA9876543210L;  c=0xF096A5B4C3B2E187L;  xOff=0;  for (int i=0; i != x.length; i++) {    x[i]=0;  }  bOff=0;  for (int i=0; i != buf.length; i++) {    buf[i]=0;  }  byteCount=0;}  }
class C{  Proc(Proc parent,int id){  this.parent=parent;  this.id=id;}  }
class C{  public ZoomToFitControl(){}  }
class C{  private int rotateWordLeft(int x,int y){  x&=0xffff;  return (x << y) | (x >> (16 - y));}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_right.num(xctxt) + m_left.num(xctxt));}  }
class C{  @Override public String toString(){  StringBuilder buff=new StringBuilder("CheckList. (num pairs=");  buff.append(size()).append(")\n");  for (  CandidatePair pair : this)   buff.append(pair).append("\n");  return buff.toString();}  }
class C{  public ClientResponse postWithHeader(URI uri,String body){  return client.resource(uri).header(CinderConstants.AUTH_TOKEN_HEADER,authTokenHeader).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class,body);}  }
class C{  public AggregateTransactionSerializationExtension(final Collection<TransactionSerializationExtension<TData>> extensions){  this.extensions=extensions;}  }
class C{  public void queryEqualsKeys(String type,int index,String value,int page,int limit,int visibilityScope,CloudResponse<String[]> response){  try {    queryImpl(type,value,index,page,limit,visibilityScope,1,0,false,false,true,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public boolean hasRegion(){  return super.hasElement(Region.KEY);}  }
class C{  @SuppressWarnings("unchecked") public <ContainingType extends MessageLite>GeneratedMessageLite.GeneratedExtension<ContainingType,?> findLiteExtensionByNumber(final ContainingType containingTypeDefaultInstance,final int fieldNumber){  return (GeneratedMessageLite.GeneratedExtension<ContainingType,?>)extensionsByNumber.get(new ObjectIntPair(containingTypeDefaultInstance,fieldNumber));}  }
class C{  public void moveToFront(){  if (isIcon()) {    if (getDesktopIcon().getParent() instanceof JLayeredPane) {      ((JLayeredPane)getDesktopIcon().getParent()).moveToFront(getDesktopIcon());    }  } else   if (getParent() instanceof JLayeredPane) {    ((JLayeredPane)getParent()).moveToFront(this);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  EntityReference entRef;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String name;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  entRef=aNewDoc.createEntityReference("entRef1");  assertNotNull("createdEntRefNotNull",entRef);  entRef.setNodeValue("entRef1Value");  aNode=doc.importNode(entRef,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  name=aNode.getNodeName();  assertEquals("nodeName","entRef1",name);}  }
class C{  public static void randShuffleK(ArrayList<Integer> inds,int k,Random rand){  for (int i=0; i < k; i++) {    Collections.swap(inds,i,rand.nextInt(inds.size()));  }}  }
class C{  public static boolean hasErrorElements(@Nullable PsiElement e){  if (e == null)   return false;  for (PsiElement child=e.getFirstChild(); child != null; child=child.getNextSibling()) {    if (child instanceof PsiErrorElement)     return true;  }  return false;}  }
class C{  static RouteBuilder delete(String path){  return builder().delete(path);}  }
class C{  public static void copy(final String src,final String dst) throws IOException {  if (TextUtils.isEmpty(src) || TextUtils.isEmpty(dst))   throw new IOException("IOException (copy file): source file does not exists or not readable");  copy(new File(src),new File(dst));}  }
class C{  protected void sequence_TStructSetter(ISerializationContext context,TStructSetter semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.TSETTER__FPAR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.TSETTER__FPAR));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0(),semanticObject.getName());  feeder.accept(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_2_0(),semanticObject.getFpar());  feeder.finish();}  }
class C{  public static String ensureTrailingSlash(final String path){  if ((path == null) || path.equals("")) {    return "";  }  final StringBuilder buf=new StringBuilder(path);  while (buf.charAt(buf.length() - 1) == File.separatorChar) {    buf.deleteCharAt(buf.length() - 1);  }  return buf.append(File.separatorChar).toString();}  }
class C{  public int doStartTag() throws JspException {  StringBuffer results=new StringBuffer("");  if (this.bean == null) {    if (logger.isDebugEnabled())     logger.debug("bean es null ");    ResponseUtils.write(pageContext,results.toString());    return (SKIP_BODY);  } else {    if (logger.isDebugEnabled())     logger.debug("bean no es null " + this.bean);    ErrorBean error=null;    try {      error=(ErrorBean)this.bean;      if (logger.isDebugEnabled())       logger.debug("error: " + error);    } catch (    Exception e) {      logger.error("El bean pasado al tag de errores no es un ErrorBean",e);      ResponseUtils.write(pageContext,results.toString());      return (SKIP_BODY);    }    if (error.getShowMessage()) {      if (logger.isDebugEnabled())       logger.debug("tengo el showmessage a true empiezo a pintar ");      results.append("<script>\n" + "function cerrar(){\n" + " this.document.getElementById('errorDiv').style.visibility='hidden';\n"+ " this.history.back(-1);\n"+ "}\n"+ "</script><div class=\"errors\" style=\"visibility:visible;\" id=\"errorDiv\" >");      results.append("<table class=\"tableGeneralErrors\" >\n" + "<tr>\n" + "<td width=\"100%\" height=\"18px;\" class=\"blue\">\n");      Enumeration obj=(Enumeration)pageContext.getAttributeNamesInScope(PageContext.APPLICATION_SCOPE);      PropertyMessageResources errors=(PropertyMessageResources)pageContext.getAttribute("errors",PageContext.APPLICATION_SCOPE);      PropertyMessageResources messages=(PropertyMessageResources)pageContext.getAttribute("org.apache.struts.action.MESSAGE",PageContext.APPLICATION_SCOPE);      String errorText=errors.getMessage("message.error.text");      if (logger.isDebugEnabled())       logger.debug("obj: " + errorText);      if (logger.isDebugEnabled())       logger.debug("error.getStatus(): " + error.getStatus());      results.append(errorText);      results.append("</td>\n" + "</tr>\n" + "<tr>\n"+ "<td width=\"100%\" height=\"18px;\">\n"+ "&nbsp;\n"+ "</td>\n"+ "</tr>\n"+ "<tr>\n"+ "<td width=\"100%\" >\n");      results.append(error.getException());      results.append("<br></td>\n");      if (error.getStatus().equals(MvcDefs.EXCEPTION_HANDLE_DEVELOPMENT)) {        for (int i=0; i < error.getStack().length; i++) {          results.append("<tr>\n");          results.append("<td width=\"100%\" >\n");          results.append(error.getStack()[i]);          results.append("</td>\n");          results.append("</tr>\n");        }      }      results.append("</td>\n" + "</tr>\n" + "<tr>\n"+ "<td width=\"100%\" align=\"right\" height=\"18px;\">\n");      HashMap action=(HashMap)error.getActions();      Set actionSet=action.keySet();      Iterator it=actionSet.iterator();      String href=null;      while (it.hasNext()) {        String thisAction=it.next().toString();        href=thisAction + "?" + ((HashMap)action.get(thisAction)).entrySet().iterator().next();      }      if (logger.isDebugEnabled())       logger.debug("href: " + href);      results.append("<a href=" + href + ">Volver</a>\n"+ "<a style=\"cursor:hand;\" onclick=\"cerrar();\">Cerrar</a>\n"+ "</td>\n"+ "</tr>"+ "</table>"+ "</div>");      ResponseUtils.write(pageContext,results.toString());    }  }  return (SKIP_BODY);}  }
class C{  public static void error(String errorString){  try {    if (errorLog == null) {      if (errorFile != null) {        FileOutputStream log=new FileOutputStream(errorFile.getPath(),errorAppend);        errorLog=new DataOutputStream(log);        errorLog.writeBytes("\n");        errorLog.writeBytes(getMapBeanMessage());        errorLog.writeBytes("\n");        errorLog.writeBytes("ERROR log file - " + java.util.Calendar.getInstance().getTime());        errorLog.writeBytes("\n");        errorLog.writeBytes(ERROR_TAIL);        errorLog.writeBytes(ERROR_TAIL);        errorLog.writeBytes(ERROR_TAIL);        errorLog.writeBytes("\n");        errorLog.writeBytes(ERROR_HEADER);        errorLog.writeBytes(errorString);        errorLog.writeBytes("\n");        errorLog.writeBytes(ERROR_TAIL);        errorLog.writeBytes("\n");      }    } else {      errorLog.writeBytes(ERROR_HEADER);      errorLog.writeBytes("\n");      errorLog.writeBytes(errorString);      errorLog.writeBytes("\n");      errorLog.writeBytes(ERROR_TAIL);      errorLog.writeBytes("\n");    }  } catch (  IOException ioe) {    errorFile=null;    notifyErr=true;    err=System.err;    err.println(ERROR_HEADER);    err.println("Debug: error writing <" + errorString + "> to log! \n"+ ioe);    err.println(ERROR_TAIL);    return;  }  if (notifyErr) {    err.println(ERROR_HEADER);    err.println(errorString);    err.println(ERROR_TAIL);  }}  }
class C{  @Override public void addValue(double data,double weight){  if (weight == 0) {    return;  }  data=round(data);  m_SumOfWeights+=weight;  m_SumOfValues+=data * weight;  m_SumOfValuesSq+=data * data * weight;  computeParameters();}  }
class C{  @NotNull @ObjectiveCName("addAutoJoinGroupWithToken:") public ConfigurationBuilder addAutoJoinGroup(String groupTokenOrShortName){  autoJoinGroups.add(groupTokenOrShortName);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.885 -0400",hash_original_method="A03273C32A226825971B412B06E2104C",hash_generated_method="1C6AF5F9751943B3824B12464BC3A948") private PrintDocumentInfo(Parcel parcel){  mName=parcel.readString();  mPageCount=parcel.readInt();  mContentType=parcel.readInt();  mDataSize=parcel.readLong();}  }
class C{  public static int robustCCW(S2Point a,S2Point b,S2Point c){  return robustCCW(a,b,c,S2Point.crossProd(a,b));}  }
class C{  public static final double asin(double a){  return ieee754_asin(a);}  }
class C{  public void clearFilter(){  this.filter=null;  clearFilter((SiteNode)getRoot());}  }
class C{  public GeneralName(int tag,byte[] name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if ((tag < 0) || (tag > 8)) {    throw new IOException("GeneralName: unknown tag: " + tag);  }  this.tag=tag;  this.name_encoding=new byte[name.length];  System.arraycopy(name,0,this.name_encoding,0,name.length);  this.name=nameASN1[tag].decode(this.name_encoding);}  }
class C{  public static int clamp(int c){  if (c < 0)   return 0;  if (c > 255)   return 255;  return c;}  }
class C{  public boolean hasError(){  return errorList != null && !errorList.isEmpty();}  }
class C{  public void insertBar(BarData bar){  barVector.insertElementAt(bar,0);}  }
class C{  public int compareTo(XMLString xstr){  int len1=m_length;  int len2=xstr.length();  int n=Math.min(len1,len2);  FastStringBuffer fsb=fsb();  int i=m_start;  int j=0;  while (n-- != 0) {    char c1=fsb.charAt(i);    char c2=xstr.charAt(j);    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  private SubscriberExceptionContext context(Object event){  return new SubscriberExceptionContext(bus,event,target,method);}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  public int indexOf(int offset,double value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static boolean pauseSimulation(long time){  if (time <= clock) {    return false;  } else {    pauseAt=time;  }  return true;}  }
class C{  public final byte[] export() throws GSSException {  throw new GSSException(GSSException.UNAVAILABLE,-1,"GSS Export Context not available");}  }
class C{  private SchemaVersionDAO createSchemaVersionDAO(final AppliedMigration... appliedMigrations){  SchemaVersionDAO dao=mock(SchemaVersionDAO.class);  when(dao.findAppliedMigrations()).thenReturn(Arrays.asList(appliedMigrations));  return dao;}  }
class C{  public static double random(){  return uniform();}  }
class C{  protected Map<DynamicAccountKey,DynamicAccount> computeDynamicAccounts(Map<DynamicAccountKey,DynamicAccount> oldAccounts,ParsedDynamicAccountParameters parameters) throws ConfigurationException {  Map<DynamicAccountKey,DynamicAccount> accounts;  Iterator<String> usersIterator;  try {    accounts=new HashMap<DynamicAccountKey,DynamicAccount>(getLocalUsers().countUsers());    usersIterator=getLocalUsers().list();  } catch (  UsersRepositoryException e) {    throw new ConfigurationException("Unable to access UsersRepository",e);  }  while (usersIterator.hasNext()) {    String userName=usersIterator.next();    DynamicAccountKey key=new DynamicAccountKey(userName,parameters.getSequenceNumber());    DynamicAccount account=oldAccounts.get(key);    if (null == account) {      account=new DynamicAccount(parameters.getSequenceNumber(),getConfiguration(),userName,parameters.getUserPrefix(),parameters.getUserSuffix(),parameters.getPassword(),parameters.getRecipientPrefix(),parameters.getRecipientSuffix(),parameters.isIgnoreRecipientHeader(),parameters.getCustomRecipientHeader(),getSession());    }    accounts.put(key,account);  }  return accounts;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TitleEntity)) {    return false;  }  TitleEntity that=(TitleEntity)obj;  if (!getArea().equals(that.getArea())) {    return false;  }  if (!ObjectUtilities.equal(getToolTipText(),that.getToolTipText())) {    return false;  }  if (!ObjectUtilities.equal(getURLText(),that.getURLText())) {    return false;  }  if (!(this.title.equals(that.title))) {    return false;  }  return true;}  }
class C{  public XBeeConfiguration withStartupChecks(boolean startupChecks){  this.startupChecks=startupChecks;  return this;}  }
class C{  @Override public void stateChanged(ChangeEvent e){  updateFrameTitle();  updateMenu();  if (e.getSource() instanceof JComponent) {    setTabTitle((JComponent)e.getSource());  }}  }
class C{  private void scheduleScannerJobs() throws Exception {  _logger.info("Started Loading Storage Providers from DB");  List<URI> providerUris=_dbClient.queryByType(StorageProvider.class,true);  List<StorageProvider> providers=_dbClient.queryObject(StorageProvider.class,providerUris);  DataCollectionScanJob scanJob=new DataCollectionScanJob(DataCollectionJob.JobOrigin.SCHEDULER);  for (  StorageProvider provider : providers) {    URI providerURI=provider.getId();    String taskId=UUID.randomUUID().toString();    scanJob.addCompleter(new ScanTaskCompleter(StorageProvider.class,providerURI,taskId));  }  long lastScanTime=0;  boolean inProgress=true;  List<URI> provUris=scanJob.getProviders();  if (provUris != null && !provUris.isEmpty()) {    ControllerServiceImpl.Lock lock=ControllerServiceImpl.Lock.getLock(ControllerServiceImpl.SCANNER);    if (lock.acquire(lock.getRecommendedTimeout())) {      try {        _logger.info("Acquired a lock {} to schedule Jobs",lock.toString());        for (        StorageProvider provider : providers) {          if (!isInProgress(provider)) {            lastScanTime=provider.getLastScanTime();            inProgress=false;            break;          }        }        if (isDataCollectionScanJobSchedulingNeeded(lastScanTime,inProgress)) {          _logger.info("Added Scan job to the Distributed Queue");          ControllerServiceImpl.enqueueDataCollectionJob(scanJob);        }      }  finally {        try {          lock.release();        } catch (        Exception e) {          _logger.error("Failed to release  Lock {} -->{}",lock.toString(),e.getMessage());        }      }    } else {      _logger.debug("Not able to Acquire lock {}-->{}",lock.toString(),Thread.currentThread().getId());      throw new DeviceControllerException("Failed to acquire lock : " + lock.toString());    }  }}  }
class C{  protected void baiscPRTXWithNonColocatedGet(int bucketRedundancy){  dataStore1.invoke(runGetCache);  dataStore2.invoke(runGetCache);  redundancy=new Integer(bucketRedundancy);  localMaxmemory=new Integer(50);  totalNumBuckets=new Integer(2);  setAttributes(CustomerPartitionedRegionName,null);  dataStore1.invoke(PRColocationDUnitTest.class,"createPR",this.attributeObjects);  dataStore2.invoke(PRColocationDUnitTest.class,"createPR",this.attributeObjects);  dataStore1.invoke(null);  dataStore1.invoke(verifyNonColocated);  dataStore2.invoke(verifyNonColocated);  dataStore1.invoke(getTx);}  }
class C{  protected void seekTypesInSourcePackage(String name,IPackageFragment pkg,int firstDot,boolean partialMatch,String topLevelTypeName,int acceptFlags,IJavaElementRequestor requestor){  long start=-1;  if (VERBOSE)   start=System.currentTimeMillis();  try {    if (!partialMatch) {      try {        IJavaElement[] compilationUnits=pkg.getChildren();        for (int i=0, length=compilationUnits.length; i < length; i++) {          if (requestor.isCanceled())           return;          IJavaElement cu=compilationUnits[i];          String cuName=cu.getElementName();          int lastDot=cuName.lastIndexOf('.');          if (lastDot != topLevelTypeName.length() || !topLevelTypeName.regionMatches(0,cuName,0,lastDot))           continue;          if (!(cu instanceof ICompilationUnit))           continue;          IType type=((ICompilationUnit)cu).getType(topLevelTypeName);          type=getMemberType(type,name,firstDot);          if (acceptType(type,acceptFlags,true)) {            requestor.acceptType(type);            break;          }        }      } catch (      JavaModelException e) {      }    } else {      try {        String cuPrefix=firstDot == -1 ? name : name.substring(0,firstDot);        IJavaElement[] compilationUnits=pkg.getChildren();        for (int i=0, length=compilationUnits.length; i < length; i++) {          if (requestor.isCanceled())           return;          IJavaElement cu=compilationUnits[i];          if (!cu.getElementName().toLowerCase().startsWith(cuPrefix))           continue;          try {            IType[] types=((ICompilationUnit)cu).getTypes();            for (int j=0, typeLength=types.length; j < typeLength; j++)             seekTypesInTopLevelType(name,firstDot,types[j],requestor,acceptFlags);          } catch (          JavaModelException e) {          }        }      } catch (      JavaModelException e) {      }    }  }  finally {    if (VERBOSE)     this.timeSpentInSeekTypesInSourcePackage+=System.currentTimeMillis() - start;  }}  }
class C{  @EventHandler(priority=EventPriority.MONITOR) public void onPlayerDeathMon(PlayerDeathEvent event){  String message=event.getDeathMessage();  event.setDeathMessage(null);  WorldDimension.getPlayersAllDimensions(event.getEntity().getWorld()).forEach(null);}  }
class C{  public void testLineCommentWithString() throws IOException {  final InputStream stream=this.getStream(R.raw.line_comment_with_string);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  public Builder withCreateDate(){  message.setCreated(new Date());  return this;}  }
class C{  @SuppressWarnings("unchecked") public void writeRowId(RowId x) throws SQLException {  attribs.add(x);}  }
class C{  public String toStringHeader(){  return new ResultMatrixPlainText(this).toStringHeader();}  }
class C{  @Override public IBinder onBind(Intent intent){  if (ANDROID_CONTENT_SYNCADPTER.equals(intent.getAction())) {    return mSyncAdapter.getSyncAdapterBinder();  }  if (logger.isActivated()) {    logger.error("Bound with unknown intent: ".concat(intent.toString()));  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void activateTestPgParameterSetOff(final String param){  PaymentGatewayParameter p=new PaymentGatewayParameterEntity();  p.setLabel(param);  p.setName(param);  p.setPgLabel("testPaymentGatewayLabel");  p.setValue("false");  TestPaymentGatewayImpl.getGatewayConfig().put(p.getLabel(),p);  testPgAlteredParameters.add(param);}  }
class C{  @Deprecated public ElasticsearchDocument(SearchHit hit){  this(hit,null);}  }
class C{  public FmtFichaVO updateFmtFicha(FmtFichaVO fmtFichaVO){  try {    DbConnection conn=getConnection();    final String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,fmtFichaVO.getId())).toString();    DbUpdateFns.update(conn,TABLE_NAME,COLUM_NAMES_LIST,new SigiaDbInputRecord(COL_DEFS,fmtFichaVO),qual.toString());    return fmtFichaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  public String toISO8601(boolean extended){  StringBuilder sb=new StringBuilder();  NumberFormat nf=new DecimalFormat("00");  String yearStr=hasYear() ? getYear().toString() : null;  String monthStr=hasMonth() ? nf.format(getMonth()) : null;  String dateStr=hasDate() ? nf.format(getDate()) : null;  String dash=extended ? "-" : "";  if (hasYear() && !hasMonth() && !hasDate()) {    sb.append(yearStr);  } else   if (!hasYear() && hasMonth() && !hasDate()) {    sb.append("--").append(monthStr);  } else   if (!hasYear() && !hasMonth() && hasDate()) {    sb.append("---").append(dateStr);  } else   if (hasYear() && hasMonth() && !hasDate()) {    sb.append(yearStr).append("-").append(monthStr);  } else   if (!hasYear() && hasMonth() && hasDate()) {    sb.append("--").append(monthStr).append(dash).append(dateStr);  } else   if (hasYear() && !hasMonth() && hasDate()) {    throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(38));  } else   if (hasYear() && hasMonth() && hasDate()) {    sb.append(yearStr).append(dash).append(monthStr).append(dash).append(dateStr);  }  if (hasTimeComponent()) {    sb.append('T');    String hourStr=hasHour() ? nf.format(getHour()) : null;    String minuteStr=hasMinute() ? nf.format(getMinute()) : null;    String secondStr=hasSecond() ? nf.format(getSecond()) : null;    dash=extended ? ":" : "";    if (hasHour() && !hasMinute() && !hasSecond()) {      sb.append(hourStr);    } else     if (!hasHour() && hasMinute() && !hasSecond()) {      sb.append("-").append(minuteStr);    } else     if (!hasHour() && !hasMinute() && hasSecond()) {      sb.append("--").append(secondStr);    } else     if (hasHour() && hasMinute() && !hasSecond()) {      sb.append(hourStr).append(dash).append(minuteStr);    } else     if (!hasHour() && hasMinute() && hasSecond()) {      sb.append("-").append(minuteStr).append(dash).append(secondStr);    } else     if (hasHour() && !hasMinute() && hasSecond()) {      throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(39));    } else     if (hasHour() && hasMinute() && hasSecond()) {      sb.append(hourStr).append(dash).append(minuteStr).append(dash).append(secondStr);    }    if (hasUtcOffset()) {      sb.append(offset.toString(extended));    }  }  return sb.toString();}  }
class C{  public ConstantCallSite(MethodHandle target){  super(target);  isFrozen=true;}  }
class C{  public static void pause(String url){  getFileDownloadManager().pause(url);}  }
class C{  private boolean isConfigured(){  return maxChars > -1 || maxStanzas > -1 || seconds > -1 || since != null;}  }
class C{  static private String[] initMultiPartTLDs(){  String[] tmp=new String[]{"com.ac","edu.ac","gov.ac","edu.ai","gov.ai","com.ar","net.ar","org.ar","gov.ar","mil.ar","edu.ar","int.ar","co.at","ac.at","or.at","gv.at","priv.at","com.au","gov.au","org.au","edu.au","id.au","oz.au","info.au","net.au","asn.au","csiro.au","telememo.au","conf.au","otc.au","com.az","net.az","org.az","com.bb","net.bb","org.bb","ac.be","belgie.be","dns.be","fgov.be","com.bh","gov.bh","net.bh","edu.bh","org.bh","com.bm","edu.bm","gov.bm","org.bm","net.bm","adm.br","adv.br","agr.br","am.br","arq.br","art.br","ato.br","bio.br","bmd.br","cim.br","cng.br","cnt.br","com.br","coop.br","ecn.br","edu.br","eng.br","esp.br","etc.br","eti.br","far.br","fm.br","fnd.br","fot.br","fst.br","g12.br","ggf.br","gov.br","imb.br","ind.br","inf.br","jor.br","lel.br","mat.br","med.br","mil.br","mus.br","net.br","nom.br","not.br","ntr.br","odo.br","org.br","ppg.br","pro.br","psc.br","psi.br","qsl.br","rec.br","slg.br","srv.br","tmp.br","trd.br","tur.br","tv.br","vet.br","zlg.br","com.bs","net.bs","org.bs","ab.ca","bc.ca","mb.ca","nb.ca","nf.ca","nl.ca","ns.ca","nt.ca","nu.ca","on.ca","pe.ca","qc.ca","sk.ca","yk.ca","co.ck","net.ck","org.ck","edu.ck","gov.ck","com.cn","edu.cn","gov.cn","net.cn","org.cn","ac.cn","ah.cn","bj.cn","cq.cn","gd.cn","gs.cn","gx.cn","gz.cn","hb.cn","he.cn","hi.cn","hk.cn","hl.cn","hn.cn","jl.cn","js.cn","ln.cn","mo.cn","nm.cn","nx.cn","qh.cn","sc.cn","sn.cn","sh.cn","sx.cn","tj.cn","tw.cn","xj.cn","xz.cn","yn.cn","zj.cn","arts.co","com.co","edu.co","firm.co","gov.co","info.co","int.co","nom.co","mil.co","org.co","rec.co","store.co","web.co","ac.cr","co.cr","ed.cr","fi.cr","go.cr","or.cr","sa.cr","com.cu","net.cu","org.cu","ac.cy","com.cy","gov.cy","net.cy","org.cy","co.dk","art.do","com.do","edu.do","gov.do","org.do","mil.do","net.do","web.do","com.dz","org.dz","net.dz","gov.dz","edu.dz","ass.dz","pol.dz","art.dz","com.ec","k12.ec","edu.ec","fin.ec","med.ec","gov.ec","mil.ec","org.ec","net.ec","com.eg","edu.eg","eun.eg","gov.eg","net.eg","org.eg","sci.eg","com.er","net.er","org.er","edu.er","mil.er","gov.er","ind.er","com.et","gov.et","org.et","edu.et","net.et","biz.et","name.et","info.et","ac.fj","com.fj","gov.fj","id.fj","org.fj","school.fj","com.fk","ac.fk","gov.fk","net.fk","nom.fk","org.fk","asso.fr","nom.fr","barreau.fr","com.fr","prd.fr","presse.fr","tm.fr","aeroport.fr","assedic.fr","avocat.fr","avoues.fr","cci.fr","chambagri.fr","chirurgiens-dentistes.fr","experts-comptables.fr","geometre-expert.fr","gouv.fr","greta.fr","huissier-justice.fr","medecin.fr","notaires.fr","pharmacien.fr","port.fr","veterinaire.fr","com.ge","edu.ge","gov.ge","mil.ge","net.ge","org.ge","pvt.ge","co.gg","org.gg","sch.gg","ac.gg","gov.gg","ltd.gg","ind.gg","net.gg","alderney.gg","guernsey.gg","sark.gg","com.gu","edu.gu","net.gu","org.gu","gov.gu","mil.gu","com.hk","net.hk","org.hk","idv.hk","gov.hk","edu.hk","co.hu","2000.hu","erotika.hu","jogasz.hu","sex.hu","video.hu","info.hu","agrar.hu","film.hu","konyvelo.hu","shop.hu","org.hu","bolt.hu","forum.hu","lakas.hu","suli.hu","priv.hu","casino.hu","games.hu","media.hu","szex.hu","sport.hu","city.hu","hotel.hu","news.hu","tozsde.hu","tm.hu","erotica.hu","ingatlan.hu","reklam.hu","utazas.hu","ac.id","co.id","go.id","mil.id","net.id","or.id","co.il","net.il","org.il","ac.il","gov.il","k12.il","muni.il","idf.il","co.im","net.im","org.im","ac.im","lkd.co.im","gov.im","nic.im","plc.co.im","co.in","net.in","ac.in","ernet.in","gov.in","nic.in","res.in","gen.in","firm.in","mil.in","org.in","ind.in","ac.je","co.je","net.je","org.je","gov.je","ind.je","jersey.je","ltd.je","sch.je","com.jo","org.jo","net.jo","gov.jo","edu.jo","mil.jo","ad.jp","ac.jp","co.jp","go.jp","or.jp","ne.jp","gr.jp","ed.jp","lg.jp","net.jp","org.jp","gov.jp","hokkaido.jp","aomori.jp","iwate.jp","miyagi.jp","akita.jp","yamagata.jp","fukushima.jp","ibaraki.jp","tochigi.jp","gunma.jp","saitama.jp","chiba.jp","tokyo.jp","kanagawa.jp","niigata.jp","toyama.jp","ishikawa.jp","fukui.jp","yamanashi.jp","nagano.jp","gifu.jp","shizuoka.jp","aichi.jp","mie.jp","shiga.jp","kyoto.jp","osaka.jp","hyogo.jp","nara.jp","wakayama.jp","tottori.jp","shimane.jp","okayama.jp","hiroshima.jp","yamaguchi.jp","tokushima.jp","kagawa.jp","ehime.jp","kochi.jp","fukuoka.jp","saga.jp","nagasaki.jp","kumamoto.jp","oita.jp","miyazaki.jp","kagoshima.jp","okinawa.jp","sapporo.jp","sendai.jp","yokohama.jp","kawasaki.jp","nagoya.jp","kobe.jp","kitakyushu.jp","utsunomiya.jp","kanazawa.jp","takamatsu.jp","matsuyama.jp","com.kh","net.kh","org.kh","per.kh","edu.kh","gov.kh","mil.kh","ac.kr","co.kr","go.kr","ne.kr","or.kr","pe.kr","re.kr","seoul.kr","kyonggi.kr","com.kw","net.kw","org.kw","edu.kw","gov.kw","com.la","net.la","org.la","com.lb","org.lb","net.lb","edu.lb","gov.lb","mil.lb","com.lc","edu.lc","gov.lc","net.lc","org.lc","com.lv","net.lv","org.lv","edu.lv","gov.lv","mil.lv","id.lv","asn.lv","conf.lv","com.ly","net.ly","org.ly","co.ma","net.ma","org.ma","press.ma","ac.ma","com.mk","com.mm","net.mm","org.mm","edu.mm","gov.mm","com.mo","net.mo","org.mo","edu.mo","gov.mo","com.mt","net.mt","org.mt","edu.mt","tm.mt","uu.mt","com.mx","net.mx","org.mx","com.my","org.my","gov.my","edu.my","net.my","com.na","org.na","net.na","alt.na","edu.na","cul.na","unam.na","telecom.na","com.nc","net.nc","org.nc","ac.ng","edu.ng","sch.ng","com.ng","gov.ng","org.ng","net.ng","gob.ni","com.ni","net.ni","edu.ni","nom.ni","org.ni","com.np","net.np","org.np","gov.np","edu.np","ac.nz","co.nz","cri.nz","gen.nz","geek.nz","govt.nz","iwi.nz","maori.nz","mil.nz","net.nz","org.nz","school.nz","com.om","co.om","edu.om","ac.om","gov.om","net.om","org.om","mod.om","museum.om","biz.om","pro.om","med.om","com.pa","net.pa","org.pa","edu.pa","ac.pa","gob.pa","sld.pa","edu.pe","gob.pe","nom.pe","mil.pe","org.pe","com.pe","net.pe","com.pg","net.pg","ac.pg","com.ph","net.ph","org.ph","mil.ph","ngo.ph","aid.pl","agro.pl","atm.pl","auto.pl","biz.pl","com.pl","edu.pl","gmina.pl","gsm.pl","info.pl","mail.pl","miasta.pl","media.pl","mil.pl","net.pl","nieruchomosci.pl","nom.pl","org.pl","pc.pl","powiat.pl","priv.pl","realestate.pl","rel.pl","sex.pl","shop.pl","sklep.pl","sos.pl","szkola.pl","targi.pl","tm.pl","tourism.pl","travel.pl","turystyka.pl","com.pk","net.pk","edu.pk","org.pk","fam.pk","biz.pk","web.pk","gov.pk","gob.pk","gok.pk","gon.pk","gop.pk","gos.pk","edu.ps","gov.ps","plo.ps","sec.ps","com.py","net.py","org.py","edu.py","com.qa","net.qa","org.qa","edu.qa","gov.qa","asso.re","com.re","nom.re","com.ru","net.ru","org.ru","pp.ru","com.sa","edu.sa","sch.sa","med.sa","gov.sa","net.sa","org.sa","pub.sa","com.sb","net.sb","org.sb","edu.sb","gov.sb","com.sd","net.sd","org.sd","edu.sd","sch.sd","med.sd","gov.sd","tm.se","press.se","parti.se","brand.se","fh.se","fhsk.se","fhv.se","komforb.se","kommunalforbund.se","komvux.se","lanarb.se","lanbib.se","naturbruksgymn.se","sshn.se","org.se","pp.se","com.sg","net.sg","org.sg","edu.sg","gov.sg","per.sg","com.sh","net.sh","org.sh","edu.sh","gov.sh","mil.sh","gov.st","saotome.st","principe.st","consulado.st","embaixada.st","org.st","edu.st","net.st","com.st","store.st","mil.st","co.st","com.sv","org.sv","edu.sv","gob.sv","red.sv","com.sy","net.sy","org.sy","gov.sy","ac.th","co.th","go.th","net.th","or.th","com.tn","net.tn","org.tn","edunet.tn","gov.tn","ens.tn","fin.tn","nat.tn","ind.tn","info.tn","intl.tn","rnrt.tn","rnu.tn","rns.tn","tourism.tn","com.tr","net.tr","org.tr","edu.tr","gov.tr","mil.tr","bbs.tr","k12.tr","gen.tr","co.tt","com.tt","org.tt","net.tt","biz.tt","info.tt","pro.tt","name.tt","gov.tt","edu.tt","nic.tt","us.tt","uk.tt","ca.tt","eu.tt","es.tt","fr.tt","it.tt","se.tt","dk.tt","be.tt","de.tt","at.tt","au.tt","co.tv","com.tw","net.tw","org.tw","edu.tw","idv.tw","gove.tw","com.ua","net.ua","org.ua","edu.ua","gov.ua","ac.ug","co.ug","or.ug","go.ug","co.uk","me.uk","org.uk","edu.uk","ltd.uk","plc.uk","net.uk","sch.uk","nic.uk","ac.uk","gov.uk","nhs.uk","police.uk","mod.uk","dni.us","fed.us","com.uy","edu.uy","net.uy","org.uy","gub.uy","mil.uy","com.ve","net.ve","org.ve","co.ve","edu.ve","gov.ve","mil.ve","arts.ve","bib.ve","firm.ve","info.ve","int.ve","nom.ve","rec.ve","store.ve","tec.ve","web.ve","co.vi","net.vi","org.vi","com.vn","biz.vn","edu.vn","gov.vn","net.vn","org.vn","int.vn","ac.vn","pro.vn","info.vn","health.vn","name.vn","com.vu","edu.vu","net.vu","org.vu","de.vu","ch.vu","fr.vu","com.ws","net.ws","org.ws","gov.ws","edu.ws","ac.yu","co.yu","edu.yu","org.yu","com.ye","net.ye","org.ye","gov.ye","edu.ye","mil.ye","ac.za","alt.za","bourse.za","city.za","co.za","edu.za","gov.za","law.za","mil.za","net.za","ngo.za","nom.za","org.za","school.za","tm.za","web.za","co.zw","ac.zw","org.zw","gov.zw","eu.org","au.com","br.com","cn.com","de.com","de.net","eu.com","gb.com","gb.net","hu.com","no.com","qc.com","ru.com","sa.com","se.com","uk.com","uk.net","us.com","uy.com","za.com","dk.org","tel.no","fax.nr","mob.nr","mobil.nr","mobile.nr","tel.nr","tlf.nr","e164.arpa"};  debugOut("array size=" + tmp.length);  return tmp;}  }
class C{  public void fetchAllLeafComponents(List<CourseComponent> leaves,EnumSet<BlockType> types){  if (!isContainer() && types.contains(type)) {    leaves.add(this);  } else {    for (    CourseComponent comp : children) {      comp.fetchAllLeafComponents(leaves,types);    }  }}  }
class C{  public void registerStandardCoders(){  registerCoder(Byte.class,ByteCoder.class);  registerCoder(ByteString.class,ByteStringCoder.class);  registerCoder(Double.class,DoubleCoder.class);  registerCoder(Instant.class,InstantCoder.class);  registerCoder(Integer.class,VarIntCoder.class);  registerCoder(Iterable.class,IterableCoder.class);  registerCoder(KV.class,KvCoder.class);  registerCoder(List.class,ListCoder.class);  registerCoder(Long.class,VarLongCoder.class);  registerCoder(Map.class,MapCoder.class);  registerCoder(Set.class,SetCoder.class);  registerCoder(String.class,StringUtf8Coder.class);  registerCoder(TableRow.class,TableRowJsonCoder.class);  registerCoder(TimestampedValue.class,TimestampedValue.TimestampedValueCoder.class);  registerCoder(Void.class,VoidCoder.class);  registerCoder(byte[].class,ByteArrayCoder.class);}  }
class C{  public void addToThis(GFElement addend) throws RuntimeException {  if (!(addend instanceof GF2nONBElement)) {    throw new RuntimeException();  }  if (!mField.equals(((GF2nONBElement)addend).mField)) {    throw new RuntimeException();  }  for (int i=0; i < mLength; i++) {    mPol[i]^=((GF2nONBElement)addend).mPol[i];  }}  }
class C{  public SIPServerTransaction findTransactionPendingAck(SIPRequest ackMessage){  return this.terminatedServerTransactionsPendingAck.get(ackMessage.getTopmostVia().getBranch());}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitStringMemberValue(this);}  }
class C{  public ClientHello(HandshakeIODataStream in) throws IOException {  if (in.readUint8() != 1) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello");  }  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  int cipher_spec_length=in.readUint16();  if (in.readUint16() != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, cannot be used for resuming");  }  int challenge_length=in.readUint16();  if (challenge_length < 16) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, short challenge data");  }  session_id=EmptyArray.BYTE;  cipher_suites=new CipherSuite[cipher_spec_length / 3];  for (int i=0; i < cipher_suites.length; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    byte b2=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1,b2);  }  compression_methods=new byte[]{0};  if (challenge_length < 32) {    Arrays.fill(random,0,32 - challenge_length,(byte)0);    System.arraycopy(in.read(challenge_length),0,random,32 - challenge_length,challenge_length);  } else   if (challenge_length == 32) {    System.arraycopy(in.read(32),0,random,0,32);  } else {    System.arraycopy(in.read(challenge_length),challenge_length - 32,random,0,32);  }  if (in.available() > 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, extra data");  }  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.119 -0500",hash_original_method="F3B8683979D1D489E213BCC22FA3BBF8",hash_generated_method="2B849F705D66B3344BB858C062FCF030") public int save(){  return getTaintInt();}  }
class C{  private static boolean allOrNoneNull(Object... args){  int nulls=0;  int objs=0;  for (  Object o : args) {    objs++;    if (null == o)     nulls++;  }  return (0 == nulls || nulls == objs);}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public DOMValidateContext(KeySelector ks,Node node){  if (ks == null) {    throw new NullPointerException("key selector is null");  }  init(node,ks);}  }
class C{  public static void doGet(String url){  try {    doGet(new URL(url));  } catch (  MalformedURLException e) {    warn("The specified URL " + url + " is not a valid URL. Please check");  }}  }
class C{  public AxisAngle4f(float[] a){  this.x=a[0];  this.y=a[1];  this.z=a[2];  this.angle=a[3];}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static QuadrantHelper createQuadrantHelper(int radius,int xOrigin,int yOrigin){  int quadrant=QuadrantCalculator.getQuadrant(radius,xOrigin,yOrigin);  if (SHOW_LOGS)   Log.v(TAG,">> createQuadrantHelper, quadrant " + quadrant);  QuadrantHelper quadrantHelper;switch (quadrant) {case FIRST_QUADRANT:    quadrantHelper=new FirstQuadrantHelper(radius,xOrigin,yOrigin);  break;case SECOND_QUADRANT:case THIRD_QUADRANT:case FOURTH_QUADRANT:throw new RuntimeException("QuadrantHelper is not implemented for quadrant " + quadrant);default :throw new RuntimeException("impossible value " + quadrant + ", circle can have 1,2,3 or 4 quadrant");}if (SHOW_LOGS) Log.v(TAG,"<< createQuadrantHelper, quadrantHelper " + quadrantHelper);return quadrantHelper;}  }
class C{  public PartitionPack(ByteProvider byteProvider,Long byteOffset,boolean checkForSucceedingKLVFillItem) throws IOException {  this(byteProvider,byteOffset,checkForSucceedingKLVFillItem,null);}  }
class C{  protected String convertToString(Object value) throws Throwable {  Date date=null;  if (value instanceof Date) {    date=(Date)value;  } else   if (value instanceof Calendar) {    date=((Calendar)value).getTime();  } else   if (value instanceof Long) {    date=new Date(((Long)value).longValue());  }  String result=null;  if (useLocaleFormat && date != null) {    DateFormat format=null;    if (patterns != null && patterns.length > 0) {      format=getFormat(patterns[0]);    } else {      format=getFormat(locale,timeZone);    }    logFormat("Formatting",format);    result=format.format(date);  } else {    result=value.toString();  }  return result;}  }
class C{  public boolean isReduced(){  return (!hasNotReachableNonTerminals() && !hasNotProductiveNonTerminals());}  }
class C{  public void text(String str,float x1,float y1,float x2,float y2){  g.text(str,x1,y1,x2,y2);}  }
class C{  private void sendConfiguredNetworksChangedBroadcast(){  Intent intent=new Intent(WifiManager.CONFIGURED_NETWORKS_CHANGED_ACTION);  intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);  intent.putExtra(WifiManager.EXTRA_MULTIPLE_NETWORKS_CHANGED,true);  mContext.sendBroadcastAsUser(intent,UserHandle.ALL);}  }
class C{  public void test_getKeyLjava_lang_String$C() throws Exception {  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  keyTest.setKeyEntry("alias2",getPrivateKey(),pssWord,cert);  PrivateKey returnedKey=(PrivateKey)keyTest.getKey("alias2",pssWord);  byte[] retB=returnedKey.getEncoded();  byte[] priB=getPrivateKey().getEncoded();  assertTrue(Arrays.equals(retB,priB));  assertEquals(getPrivateKey().getAlgorithm(),returnedKey.getAlgorithm());  assertEquals(getPrivateKey().getFormat(),returnedKey.getFormat());  try {    keyTest.getKey("alias2","wrong".toCharArray());    fail();  } catch (  UnrecoverableKeyException expected) {  }  keyTest.setCertificateEntry("alias1",cert[1]);  assertNull("the private key returned from getKey for a certificate entry is not null",keyTest.getKey("alias1",pssWord));}  }
class C{  public void write(RotateStream stream,byte[] buffer,int offset,int length) throws IOException {  try {    _queue.offer(new LogItemBinary(stream,buffer,offset,length),10,TimeUnit.SECONDS);    _queue.wake();  } catch (  Throwable e) {    e.printStackTrace(EnvironmentStream.getOriginalSystemErr());  }}  }
class C{  private int readFromStream() throws IOException {  int b=in.read();  rawBytes.write(b);  return b;}  }
class C{  public TimeoutException(String arg0){  super(arg0);}  }
class C{  public void close(){  atomicSeq.close();}  }
class C{  public final void println(boolean b) throws IOException {  println(b ? "true" : "false");}  }
class C{  public static Bitmap createIconBitmap(Bitmap icon,Context context){  if (icon == null) {    return null;  }synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }  }  if (sIconWidth == icon.getWidth() && sIconHeight == icon.getHeight()) {    return icon;  }  return createIconBitmap(new BitmapDrawable(context.getResources(),icon),context);}  }
class C{  private void splitRequest(SnmpPduRequest req){  int nbAgents=mibs.size();  SnmpMibAgent agent=mibs.firstElement();  if (nbAgents == 1) {    subs.put(agent,new SnmpSubRequestHandler(agent,req,true));    return;  }  if (req.type == pduGetNextRequestPdu) {    for (Enumeration<SnmpMibAgent> e=mibs.elements(); e.hasMoreElements(); ) {      final SnmpMibAgent ag=e.nextElement();      subs.put(ag,new SnmpSubNextRequestHandler(adaptor,ag,req));    }    return;  }  int nbReqs=req.varBindList.length;  SnmpVarBind[] vars=req.varBindList;  SnmpSubRequestHandler sub;  for (int i=0; i < nbReqs; i++) {    agent=root.getAgentMib(vars[i].oid);    sub=subs.get(agent);    if (sub == null) {      sub=new SnmpSubRequestHandler(agent,req);      subs.put(agent,sub);    }    sub.updateRequest(vars[i],i);  }}  }
class C{  public static MetricDto transformToDto(Metric metric){  if (metric == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  MetricDto result=createDtoObject(MetricDto.class,metric);  return result;}  }
class C{  private Value readValue(Type type,Class real,NodeMap node) throws Exception {  Class expect=type.getType();  if (expect.isArray()) {    return readArray(type,real,node);  }  return new ObjectValue(real);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.MAC_OS_X ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y, z;  int progress;  int i, n;  double[][] vertices=null;  int pointNum=0;  int numPoints=0;  int numFeatures;  int oneHundredthTotal;  double neighbourhoodRadius;  ShapeType shapeType, outputShapeType;  List<KdTree.Entry<Double>> results;  double[] entry;  double nodeGapThreshold=5;  int[] parts={0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  nodeGapThreshold=Integer.parseInt(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("VALUE");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(4);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      numPoints=vertices.length;      KdTree<Double> pointsTree=new KdTree.SqrEuclid(2,new Integer(numPoints));      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        z=i;        pointsTree.addPoint(entry,z);      }      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int lineLength=0;      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        results=pointsTree.neighborsWithinRange(entry,neighbourhoodRadius);        double maxVal=0;        double minVal=numPoints;        double range=0;        double j;        double[] values=new double[results.size()];        int k=0;        for (        KdTree.Entry entry2 : results) {          j=(double)entry2.value;          values[k]=j;          k++;          if (j > maxVal) {            maxVal=j;          }          if (j < minVal) {            minVal=j;          }        }        range=maxVal - minVal;        if (range == numPoints - 1) {          maxVal=0;          minVal=numPoints;          values=new double[results.size()];          k=0;          for (          KdTree.Entry entry2 : results) {            j=(double)entry2.value;            if (j < numPoints / 2) {              j+=numPoints;            }            if (j > maxVal) {              maxVal=j;            }            if (j < minVal) {              minVal=j;            }            values[k]=j;            k++;          }          range=maxVal - minVal;        }        Arrays.sort(values);        double maxGap=0;        for (int a=1; a < k; a++) {          if (values[a] - values[a - 1] > maxGap) {            maxGap=values[a] - values[a - 1];          }        }        if (maxGap >= nodeGapThreshold) {          pnts.add(new ShapefilePoint(x,y));          lineLength++;          if (i == numPoints - 1) {            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[1];            rowData[0]=new Double(recordNum);            output.addRecord(wbPoly,rowData);            pnts.clear();            lineLength=0;          }        } else         if (lineLength > 1) {          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          Object[] rowData=new Object[1];          rowData[0]=new Double(recordNum);          output.addRecord(wbPoly,rowData);          pnts.clear();          lineLength=0;        } else {          pnts.clear();          lineLength=0;        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  synchronized Value computeValue(Session session,Row row){  computeTableFilter.setSession(session);  computeTableFilter.set(row);  return defaultExpression.getValue(session);}  }
class C{  public static void replaceStyles(List<ShapeRecord> shapeRecords,int lineStyleIndex,int fillStyle0Index,int fillStyle1Index){  if (shapeRecords != null && shapeRecords.size() > 0) {    for (int i=0; i < shapeRecords.size(); i++) {      ShapeRecord record=shapeRecords.get(i);      if (record instanceof StyleChangeRecord) {        StyleChangeRecord old_scr=(StyleChangeRecord)record;        StyleChangeRecord new_scr=new StyleChangeRecord();        if (fillStyle0Index > 0)         new_scr.setFillStyle0(fillStyle0Index);        if (fillStyle1Index > 0)         new_scr.setFillStyle1(fillStyle1Index);        if ((!old_scr.stateLineStyle) && (lineStyleIndex > 0))         new_scr.setLinestyle(lineStyleIndex); else         new_scr.setLinestyle(old_scr.linestyle);        if (old_scr.stateMoveTo)         new_scr.setMove(old_scr.moveDeltaX,old_scr.moveDeltaY);        shapeRecords.set(i,new_scr);      }    }  }}  }
class C{  public StrSubstitutor(){  this((StrLookup<?>)null,DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_ESCAPE);}  }
class C{  CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean ignoreQuotations,CSVReaderNullFieldIndicator nullFieldIndicator){  if (anyCharactersAreTheSame(separator,quotechar,escape)) {    throw new UnsupportedOperationException("The separator, quote, and escape characters must be different!");  }  if (separator == NULL_CHARACTER) {    throw new UnsupportedOperationException("The separator character must be defined!");  }  this.separator=separator;  this.quotechar=quotechar;  this.escape=escape;  this.strictQuotes=strictQuotes;  this.ignoreLeadingWhiteSpace=ignoreLeadingWhiteSpace;  this.ignoreQuotations=ignoreQuotations;  this.nullFieldIndicator=nullFieldIndicator;}  }
class C{  private static Document createPrefsDoc(String qname){  try {    DOMImplementation di=DocumentBuilderFactory.newInstance().newDocumentBuilder().getDOMImplementation();    DocumentType dt=di.createDocumentType(qname,null,PREFS_DTD_URI);    return di.createDocument(null,qname,dt);  } catch (  ParserConfigurationException e) {    throw new AssertionError(e);  }}  }
class C{  @Nullable private static AbstractTestProxy findTestByName(@NotNull final String testName,@NotNull final AbstractTestProxy test){  if (test.getName().equals(testName)) {    return test;  }  for (  final AbstractTestProxy testProxy : test.getChildren()) {    final AbstractTestProxy result=findTestByName(testName,testProxy);    if (result != null) {      return result;    }  }  return null;}  }
class C{  private End end() throws Exception {  return new End();}  }
class C{  public synchronized void close(){  if (!mOpened) {    return;  }  mRtpOutput.close();  mRtpReceiver.stopSession();  mRtpDummySender.stopSession();  try {    NativeH264Decoder.DeinitDecoder();  } catch (  UnsatisfiedLinkError e) {    Log.d(LOGTAG,ExceptionUtil.getFullStackTrace(e));  }  mOpened=false;  mEventListener.onPlayerClosed();}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  public static int equalsOneIgnoreCase(String src,String[] dest){  if (src == null || dest == null) {    return -1;  }  for (int i=0; i < dest.length; i++) {    if (src.equalsIgnoreCase(dest[i])) {      return i;    }  }  return -1;}  }
class C{  public WebSocket clearHeaders(){  mHandshakeBuilder.clearHeaders();  return this;}  }
class C{  public boolean hasClass(Resource r){  return classes.containsKey(r);}  }
class C{  @CanIgnoreReturnValue public Stopwatch stop(){  long tick=ticker.read();  checkState(isRunning,"This stopwatch is already stopped.");  isRunning=false;  elapsedNanos+=tick - startTick;  return this;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this) && value != null) {    value.visit(v);  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  public void testParseUserWithMissingField(){  try {    User.parseUser("name:password:role:");    fail("Should have raised an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid format for [name:password:role:]",expected.getMessage());  }}  }
class C{  @Override public final int readInt() throws IOException {  dis.readFully(work,0,4);  return (work[3]) << 24 | (work[2] & 0xff) << 16 | (work[1] & 0xff) << 8 | (work[0] & 0xff);}  }
class C{  public void add(double v){  expandFor(size,0);  vector[size - 1]=v;}  }
class C{  public boolean hasMipmaps(){  return mDimMipmaps;}  }
class C{  public Transaction isStandard(Transaction tx){  if (tx.getVersion() > 1 || tx.getVersion() < 1)   return tx;  for (  TransactionOutput output : tx.getOutputs()) {    if (MIN_ANALYSIS_NONDUST_OUTPUT.compareTo(output.getValue()) > 0)     return tx;  }  return null;}  }
class C{  @Override public void deletePage(int pageID){  emptyPages.push(pageID);}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  Color color=getColor();  if (color == null) {    g.setColor(c.getSelectionColor());  } else {    g.setColor(color);  }  Rectangle r;  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    if (bounds instanceof Rectangle) {      r=(Rectangle)bounds;    } else {      r=bounds.getBounds();    }  } else {    try {      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);      r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();    } catch (    BadLocationException e) {      r=null;    }  }  if (r != null) {    r.width=Math.max(r.width,1);    g.fillRect(r.x,r.y,r.width,r.height);  }  return r;}  }
class C{  private void initQParsers(){  initPlugins(qParserPlugins,QParserPlugin.class);  for (int i=0; i < QParserPlugin.standardPlugins.length; i+=2) {    try {      String name=(String)QParserPlugin.standardPlugins[i];      if (null == qParserPlugins.get(name)) {        Class<QParserPlugin> clazz=(Class<QParserPlugin>)QParserPlugin.standardPlugins[i + 1];        QParserPlugin plugin=clazz.newInstance();        qParserPlugins.put(name,plugin);        plugin.init(null);        infoRegistry.put(name,plugin);      }    } catch (    Exception e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);    }  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  bindList.drawScreen(par1,par2,par3);  drawCenteredString(fontRendererObj,"Keybind Manager",width / 2,8,16777215);  drawCenteredString(fontRendererObj,"Keybinds: " + WurstClient.INSTANCE.keybinds.size(),width / 2,20,16777215);  super.drawScreen(par1,par2,par3);}  }
class C{  public T caseTEnumLiteral(TEnumLiteral object){  return null;}  }
class C{  public IMqttDeliveryToken publish(String clientHandle,String topic,MqttMessage message,String invocationContext,String activityToken) throws MqttPersistenceException, MqttException {  MqttConnection client=getConnection(clientHandle);  return client.publish(topic,message,invocationContext,activityToken);}  }
class C{  public static MoveParticipant[] loadMoveParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,MoveArguments arguments,String[] affectedNatures,SharableParticipants shared){  return loadMoveParticipants(status,processor,element,arguments,null,affectedNatures,shared);}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  private static String encode(final CharSequence txt){  try {    return URLEncoder.encode(txt.toString(),Charset.defaultCharset().name());  } catch (  final UnsupportedEncodingException ex) {    throw new IllegalStateException(ex);  }}  }
class C{  protected void addScriptingListenersOn(Element elt){  NodeEventTarget target=(NodeEventTarget)elt;  if (SVGConstants.SVG_NAMESPACE_URI.equals(elt.getNamespaceURI())) {    if (SVGConstants.SVG_SVG_TAG.equals(elt.getLocalName())) {      if (elt.hasAttributeNS(null,"onabort")) {        target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGAbort",svgAbortListener,false,null);      }      if (elt.hasAttributeNS(null,"onerror")) {        target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGError",svgErrorListener,false,null);      }      if (elt.hasAttributeNS(null,"onresize")) {        target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGResize",svgResizeListener,false,null);      }      if (elt.hasAttributeNS(null,"onscroll")) {        target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGScroll",svgScrollListener,false,null);      }      if (elt.hasAttributeNS(null,"onunload")) {        target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGUnload",svgUnloadListener,false,null);      }      if (elt.hasAttributeNS(null,"onzoom")) {        target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGZoom",svgZoomListener,false,null);      }    } else {      String name=elt.getLocalName();      if (name.equals(SVGConstants.SVG_SET_TAG) || name.startsWith("animate")) {        if (elt.hasAttributeNS(null,"onbegin")) {          target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"beginEvent",beginListener,false,null);        }        if (elt.hasAttributeNS(null,"onend")) {          target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"endEvent",endListener,false,null);        }        if (elt.hasAttributeNS(null,"onrepeat")) {          target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"repeatEvent",repeatListener,false,null);        }        return;      }    }  }  if (elt.hasAttributeNS(null,"onfocusin")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",focusinListener,false,null);  }  if (elt.hasAttributeNS(null,"onfocusout")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",focusoutListener,false,null);  }  if (elt.hasAttributeNS(null,"onactivate")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMActivate",activateListener,false,null);  }  if (elt.hasAttributeNS(null,"onclick")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"click",clickListener,false,null);  }  if (elt.hasAttributeNS(null,"onmousedown")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mousedown",mousedownListener,false,null);  }  if (elt.hasAttributeNS(null,"onmouseup")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseup",mouseupListener,false,null);  }  if (elt.hasAttributeNS(null,"onmouseover")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseover",mouseoverListener,false,null);  }  if (elt.hasAttributeNS(null,"onmouseout")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseout",mouseoutListener,false,null);  }  if (elt.hasAttributeNS(null,"onmousemove")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mousemove",mousemoveListener,false,null);  }  if (elt.hasAttributeNS(null,"onkeypress")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keypress",keypressListener,false,null);  }  if (elt.hasAttributeNS(null,"onkeydown")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keydown",keydownListener,false,null);  }  if (elt.hasAttributeNS(null,"onkeyup")) {    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keyup",keyupListener,false,null);  }}  }
class C{  public HashMapPro(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public boolean isStatic(){  return isStatic(opcode);}  }
class C{  public synchronized String auditThreads(){  String auditReport=null;  Iterator<ThreadHandle> it=threadHandles.values().iterator();  while (it.hasNext()) {    ThreadHandle threadHandle=(ThreadHandle)it.next();    if (!threadHandle.isThreadActive()) {      Thread thread=threadHandle.getThread();      if (auditReport == null) {        auditReport="Thread Auditor Report:\n";      }      auditReport+="   Thread [" + thread.getName() + "] has failed to respond to an audit request.\n";    }    threadHandle.setThreadActive(false);  }  return auditReport;}  }
class C{  @InfoName("CL_DEVICE_ENDIAN_LITTLE") public boolean isEndianLittle(){  return infos.getBool(getEntity(),CL_DEVICE_ENDIAN_LITTLE);}  }
class C{  public ODataEntry readEntry(String resource_path,Map<String,String> query_parameters) throws IOException, ODataException {  if (resource_path == null || resource_path.isEmpty())   throw new IllegalArgumentException("resource_path must not be null or empty.");  ContentType contentType=ContentType.APPLICATION_ATOM_XML;  String absolutUri=serviceRoot.toString() + '/' + resource_path;  absolutUri=appendQueryParam(absolutUri,query_parameters);  InputStream content=execute(absolutUri,contentType,"GET");  return EntityProvider.readEntry(contentType.type(),getEntitySet(resource_path),content,EntityProviderReadProperties.init().build());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRfQ[");  sb.append(get_ID()).append(",Name=").append(getName()).append(",QuoteType=").append(getQuoteType()).append("]");  return sb.toString();}  }
class C{  public void clear(){  modCount++;  Object[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  @SuppressWarnings({"unchecked"}) public void removeLocks(GridCacheVersion ver,Collection<KeyCacheObject> keys){  if (keys.isEmpty())   return;  try {    int keyCnt=-1;    Map<ClusterNode,GridNearUnlockRequest> map=null;    for (    KeyCacheObject key : keys) {      GridNearUnlockRequest req=null;      while (true) {        GridDistributedCacheEntry entry=peekExx(key);        try {          if (entry != null) {            GridCacheMvccCandidate cand=entry.candidate(ver);            if (cand != null) {              if (map == null) {                Collection<ClusterNode> affNodes=CU.allNodes(ctx,cand.topologyVersion());                if (F.isEmpty(affNodes))                 return;                keyCnt=(int)Math.ceil((double)keys.size() / affNodes.size());                map=U.newHashMap(affNodes.size());              }              ClusterNode primary=ctx.affinity().primary(key,cand.topologyVersion());              if (primary == null) {                if (log.isDebugEnabled())                 log.debug("Failed to unlock key (all partition nodes left the grid).");                break;              }              if (!primary.isLocal()) {                req=map.get(primary);                if (req == null) {                  map.put(primary,req=new GridNearUnlockRequest(ctx.cacheId(),keyCnt,ctx.deploymentEnabled()));                  req.version(ver);                }              }              if (entry.removeLock(cand.version())) {                if (primary.isLocal()) {                  dht.removeLocks(primary.id(),ver,F.asList(key),true);                  assert req == null;                  continue;                }                req.addKey(entry.key(),ctx);              }            }          }          break;        } catch (        GridCacheEntryRemovedException ignored) {          if (log.isDebugEnabled())           log.debug("Attempted to remove lock from removed entry (will retry) [rmvVer=" + ver + ", entry="+ entry+ ']');        }      }    }    if (map == null || map.isEmpty())     return;    IgnitePair<Collection<GridCacheVersion>> versPair=ctx.tm().versions(ver);    Collection<GridCacheVersion> committed=versPair.get1();    Collection<GridCacheVersion> rolledback=versPair.get2();    for (    Map.Entry<ClusterNode,GridNearUnlockRequest> mapping : map.entrySet()) {      ClusterNode n=mapping.getKey();      GridDistributedUnlockRequest req=mapping.getValue();      if (!F.isEmpty(req.keys())) {        req.completedVersions(committed,rolledback);        ctx.io().send(n,req,ctx.ioPolicy());      }    }  } catch (  IgniteCheckedException ex) {    U.error(log,"Failed to unlock the lock for keys: " + keys,ex);  }}  }
class C{  public IntArraySpliterator(int[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public Configuration(){  reset();}  }
class C{  EndWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public synchronized boolean makeProxyClass(Class clazz) throws CannotCompileException, NotFoundException {  String classname=clazz.getName();  if (proxyClasses.get(classname) != null)   return false; else {    CtClass ctclazz=produceProxyClass(classPool.get(classname),clazz);    proxyClasses.put(classname,ctclazz);    modifySuperclass(ctclazz);    return true;  }}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape){  this(reader,separator,quotechar,escape,DEFAULT_SKIP_LINES,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  private boolean holdsSameJavascriptVariant(PolyfillValidationState state){  final TModule fillerModule=state.polyType.getContainingModule();  final TModule filledModule=state.filledType.getContainingModule();  if (fillerModule != null && filledModule != null && fillerModule.isN4jsdModule() != filledModule.isN4jsdModule()) {    final String fileExt=fillerModule.isN4jsdModule() ? N4JSGlobals.N4JSD_FILE_EXTENSION : N4JSGlobals.N4JS_FILE_EXTENSION;    final String msg=getMessageForCLF_POLYFILL_STATIC_DIFFERENT_VARIANT(state.name,"." + fileExt);    addIssue(state,msg,CLF_POLYFILL_STATIC_DIFFERENT_VARIANT);    return false;  }  return true;}  }
class C{  public void test_commonTest_02(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  String defaultAlgorithm=Security.getProperty("ssl.KeyManagerFactory.algorithm");  try {    KeyManagerFactory kmf=KeyManagerFactory.getInstance(defaultAlgorithm);    char[] pass="password".toCharArray();    kmf.init(null,pass);    KeyManager[] km=kmf.getKeyManagers();    defaultAlgorithm=Security.getProperty("ssl.TrustManagerFactory.algorithm");    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(defaultAlgorithm);    KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);    trustMF.init(ks);    TrustManager[] tm=trustMF.getTrustManagers();    SecureRandom sr=SecureRandom.getInstance("SHA1PRNG");    ssl.engineInit(km,tm,sr);  } catch (  Exception ex) {    fail(ex + " unexpected exception");  }  try {    assertNotNull("Subtest_01: Object is NULL",ssl.engineCreateSSLEngine());    SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",1080);    assertNotNull("Subtest_02: Object is NULL",sleng);    assertEquals(sleng.getPeerPort(),1080);    assertEquals(sleng.getPeerHost(),"localhost");    assertNull("Subtest_03: Object not NULL",ssl.engineGetClientSessionContext());    assertNull("Subtest_04: Object not NULL",ssl.engineGetServerSessionContext());    assertNull("Subtest_05: Object not NULL",ssl.engineGetServerSocketFactory());    assertNull("Subtest_06: Object not NULL",ssl.engineGetSocketFactory());  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  public static void replaceValue(Attribute attribute,String oldValue,String newValue){  if (!attribute.isNominal()) {    throw new RuntimeException("Example-Tools: replaceValue is only supported for nominal attributes.");  }  NominalMapping mapping=attribute.getMapping();  int oldIndex=mapping.getIndex(oldValue);  if (oldIndex < 0) {    throw new RuntimeException("Example-Tools: replaceValue cannot be performed since old value was not defined in the attribute.");  }  mapping.setMapping(newValue,oldIndex);}  }
class C{  public boolean wasOKPressed(){  return okPressed;}  }
class C{  public InsertEdit(int offset,String text){  super(offset,0);  fText=text;}  }
class C{  public boolean tenantHasUsageACL(URI tenantUri,VirtualPool virtualPool){  if (_disabler != null) {    return true;  }  if (CollectionUtils.isEmpty(virtualPool.getAcls())) {    return true;  }  Set<String> acls=virtualPool.getAclSet(new PermissionsKey(PermissionsKey.Type.TENANT,tenantUri.toString(),virtualPool.getType()).toString());  if (acls != null && acls.contains(ACL.USE.toString())) {    return true;  }  return false;}  }
class C{  public static boolean supportsEnvelopedEntries(int version){  return version >= LogSegmentMetadataVersion.VERSION_V4_ENVELOPED_ENTRIES.value;}  }
class C{  public VwapSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public OperationSource createOperationSource(){  OperationSourceImpl operationSource=new OperationSourceImpl();  return operationSource;}  }
class C{  public MyCallbackHandler(){  super();}  }
class C{  private String read(String path) throws Exception {  try (IgfsInputStream in=igfs.open(path(path))){    return IOUtils.toString(in,UTF_8);  } }  }
class C{  private String replaceDotInMustacheKeys(final List<String> mustacheKeys,final String pluginCall){  String fixedPluginCall=pluginCall;  for (  String mustacheKey : mustacheKeys) {    if (mustacheKey.contains(".")) {      fixedPluginCall=fixedPluginCall.replace("{{" + mustacheKey + "}}","{{" + mustacheKey.replace('.','#') + "}}");    }  }  return fixedPluginCall;}  }
class C{  public double weight(){  return weight;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SRuntimePackage.REFERENCE_SLOT__REFERENCE:    if (resolve)     return getReference();  return basicGetReference();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public int findColumn(String columnLabel) throws SQLException {  if (columnLabel != null && columns != null) {    for (int i=0, size=columns.size(); i < size; i++) {      if (columnLabel.equalsIgnoreCase(getColumn(i).name)) {        return i + 1;      }    }  }  throw DbException.get(ErrorCode.COLUMN_NOT_FOUND_1,columnLabel).getSQLException();}  }
class C{  public void testCreateContainerWithValidContainerId(){  factory.registerContainer(InstalledLocalContainerStub.ID,ContainerType.INSTALLED,InstalledLocalContainerStub.class);  Container container=factory.createContainer(InstalledLocalContainerStub.ID,ContainerType.INSTALLED,new StandaloneLocalConfigurationStub("some/path"));  assertEquals(InstalledLocalContainerStub.NAME,container.getName());}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  public void initialize(KeyGenerationParameters param){  this.gmssParams=(GMSSKeyGenerationParameters)param;  this.gmssPS=new GMSSParameters(gmssParams.getParameters().getNumOfLayers(),gmssParams.getParameters().getHeightOfTrees(),gmssParams.getParameters().getWinternitzParameter(),gmssParams.getParameters().getK());  this.numLayer=gmssPS.getNumOfLayers();  this.heightOfTrees=gmssPS.getHeightOfTrees();  this.otsIndex=gmssPS.getWinternitzParameter();  this.K=gmssPS.getK();  this.currentSeeds=new byte[numLayer][mdLength];  this.nextNextSeeds=new byte[numLayer - 1][mdLength];  SecureRandom secRan=new SecureRandom();  for (int i=0; i < numLayer; i++) {    secRan.nextBytes(currentSeeds[i]);    gmssRandom.nextSeed(currentSeeds[i]);  }  this.initialized=true;}  }
class C{  public static Vector3f sphericalToCartesian(Vector3f sphereCoords,Vector3f store){  store.y=sphereCoords.x * FastMath.sin(sphereCoords.z);  float a=sphereCoords.x * FastMath.cos(sphereCoords.z);  store.x=a * FastMath.cos(sphereCoords.y);  store.z=a * FastMath.sin(sphereCoords.y);  return store;}  }
class C{  public boolean profiling(){  return soot.PhaseOptions.getBoolean(options,"profiling");}  }
class C{  public void readSequenceOf(ASN1SequenceOf sequenceOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCEOF) {    throw expected("sequenceOf");  }  decodeValueCollection(sequenceOf);}  }
class C{  public boolean contains(S2Loop b){  if (!bound.contains(b.getRectBound())) {    return false;  }  if (!contains(b.vertex(0)) && findVertex(b.vertex(0)) < 0) {    return false;  }  if (checkEdgeCrossings(b,new S2EdgeUtil.WedgeContains()) <= 0) {    return false;  }  if (bound.union(b.getRectBound()).isFull()) {    if (b.contains(vertex(0)) && b.findVertex(vertex(0)) < 0) {      return false;    }  }  return true;}  }
class C{  public void sendFile(InputStream is,int seq) throws IOException {  this.seqNo=seq;  if (!useCompression) {    buffer.clear();    buffer.position(4);    this.checkPacketLength=false;    byte[] buffer=new byte[BUFFER_DEFAULT_SIZE];    int len;    while ((len=is.read(buffer)) > 0) {      write(buffer,0,len);    }    finishPacketWithoutRelease(true);    releaseBuffer();    writeEmptyPacket(this.seqNo++);  } else {    buffer.clear();    buffer.position(4);    this.checkPacketLength=false;    byte[] readFileBuffer=new byte[BUFFER_DEFAULT_SIZE];    int len;    while ((len=is.read(readFileBuffer)) > 0) {      write(readFileBuffer,0,len);    }    if (buffer.position() > 4) {      checkPacketMaxSize(buffer.position());      buffer.flip();      int limit=buffer.limit();      buffer.position(4);      int position=0;      int expectedPacketSize=limit + HEADER_LENGTH * ((limit / maxPacketSize) + 1);      byte[] bufferBytes=new byte[expectedPacketSize];      while (position < expectedPacketSize - 4) {        int length=buffer.remaining();        if (length > maxPacketSize) {          length=maxPacketSize;        }        bufferBytes[position++]=(byte)(length & 0xff);        bufferBytes[position++]=(byte)(length >>> 8);        bufferBytes[position++]=(byte)(length >>> 16);        bufferBytes[position++]=(byte)seqNo++;        if (length > 0) {          buffer.get(bufferBytes,position,length);          position+=length;        }      }      bufferBytes[position++]=(byte)0;      bufferBytes[position++]=(byte)0;      bufferBytes[position++]=(byte)0;      bufferBytes[position++]=(byte)seqNo++;      compressedAndSend(position,bufferBytes,true);    } else {      writeEmptyPacket(seqNo);    }    if (buffer.capacity() > BUFFER_DEFAULT_SIZE) {      buffer=firstBuffer;    }    buffer.clear();    buffer.position(4);  }}  }
class C{  @SuppressWarnings("deprecation") private <T>String generateTestFile(String filename,List<T> elems,AvroCoder<T> coder,String codec) throws IOException {  File tmpFile=tmpFolder.newFile(filename);  String path=tmpFile.toString();  FileOutputStream os=new FileOutputStream(tmpFile);  DatumWriter<T> datumWriter=coder.createDatumWriter();  try (DataFileWriter<T> writer=new DataFileWriter<>(datumWriter)){    writer.setCodec(CodecFactory.fromString(codec));    writer.create(coder.getSchema(),os);    for (    T elem : elems) {      writer.append(elem);    }  }   return path;}  }
class C{  public static Solution evaluateAt(Problem problem,double... variables){  Solution solution=problem.newSolution();  EncodingUtils.setReal(solution,variables);  problem.evaluate(solution);  return solution;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public void processValueChange(final ValueChangeEvent event){  this.setMarketplaceId((String)event.getNewValue());  marketplaceChanged();}  }
class C{  public void archiveCurrentDirectory() throws RuntimeException {  System.out.println("Making zip archive of files in " + getCurrentDirectory() + ", putting it in "+ getArchiveDirectory()+ ".");  File current=new File(getCurrentDirectory());  if (!current.exists() || !current.isDirectory()) {    throw new IllegalArgumentException("There is no " + current.getAbsolutePath() + " directory. "+ "\nThis is where the serialized classes should be. "+ "Please run serializeCurrentDirectory() first.");  }  File archive=new File(getArchiveDirectory());  if (archive.exists() && !archive.isDirectory()) {    throw new IllegalArgumentException("Output directory " + archive.getAbsolutePath() + " is not a directory.");  }  if (!archive.exists()) {    boolean success=archive.mkdirs();  }  String[] filenames=current.list();  byte[] buf=new byte[1024];  try {    String version=Version.currentRepositoryVersion().toString();    String outFilename="serializedclasses-" + version + ".zip";    File _file=new File(getArchiveDirectory(),outFilename);    FileOutputStream fileOut=new FileOutputStream(_file);    ZipOutputStream out=new ZipOutputStream(fileOut);    for (    String filename : filenames) {      File file=new File(current,filename);      FileInputStream in=new FileInputStream(file);      ZipEntry entry=new ZipEntry(filename);      entry.setSize(file.length());      entry.setTime(file.lastModified());      out.putNextEntry(entry);      int len;      while ((len=in.read(buf)) > 0) {        out.write(buf,0,len);      }      out.closeEntry();      in.close();    }    out.close();    System.out.println("Finished writing zip file " + outFilename + ".");  } catch (  IOException e) {    throw new RuntimeException("There was an I/O error associated with " + "the process of zipping up files in " + getCurrentDirectory() + ".",e);  }}  }
class C{  public PaymentDeregistrationException(String message){  super(message);}  }
class C{  protected void moveToTop(ImageTile[] selectedTiles2){  OMGraphicList list=getList();  if (list != null && selectedTiles != null && selectedTiles.length > 0) {    for (int i=selectedTiles2.length - 1; i >= 0; i--) {      ImageTile tile=selectedTiles2[i];      list.moveIndexedToTop(list.indexOf(tile));    }    rebuildListModel();  }}  }
class C{  public boolean isForward(){  return forward;}  }
class C{  @SuppressWarnings("deprecation") public void newMinute(){  if (!inSyncWithInternalFastClock) {    return;  }  if (correctFastClock || synchronizeWithInternalClock) {    Date now=clock.getTime();    if (now.getMinutes() != 0) {      curDays=now.getDate();      curHours=now.getHours();      curMinutes=now.getMinutes();      long millis=now.getTime();      long elapsedMS=millis % MSECPERMINUTE;      double frac_min=elapsedMS / (double)MSECPERMINUTE;      curFractionalMinutes=(int)CORRECTION - (int)(CORRECTION * frac_min);      setClock();    }  } else   if (setInternal && !correctFastClock && !synchronizeWithInternalClock) {    inSyncWithInternalFastClock=false;    initiateRead();  }}  }
class C{  public static long copy(InputStream from,OutputStream to) throws IOException {  Preconditions.checkNotNull(from);  Preconditions.checkNotNull(to);  byte[] buf=new byte[BUF_SIZE];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public static Map<String,Object> createOrderNote(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String noteString=(String)context.get("note");  String noteName=(String)context.get("noteName");  String orderId=(String)context.get("orderId");  String internalNote=(String)context.get("internalNote");  Map<String,Object> noteCtx=UtilMisc.<String,Object>toMap("note",noteString,"userLogin",userLogin,"noteName",noteName);  Locale locale=(Locale)context.get("locale");  try {    Map<String,Object> noteRes=dispatcher.runSync("createNote",noteCtx);    if (ServiceUtil.isError(noteRes))     return noteRes;    String noteId=(String)noteRes.get("noteId");    if (UtilValidate.isEmpty(noteId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingTheNoteNoNoteIdReturned",locale));    }    Map<String,String> fields=UtilMisc.<String,String>toMap("orderId",orderId,"noteId",noteId,"internalNote",internalNote);    GenericValue v=delegator.makeValue("OrderHeaderNote",fields);    delegator.create(v);  } catch (  GenericEntityException ee) {    Debug.logError(ee,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",ee.getMessage()),locale));  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",se.getMessage()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public boolean allowsPersistence(){  return true;}  }
class C{  public FilterExprIteratorSimple(){  super(null);}  }
class C{  public static SidedPlane constructNormalizedThreePointSidedPlane(final Vector insidePoint,final Vector point1,final Vector point2,final Vector point3){  try {    final Vector planeNormal=new Vector(new Vector(point1.x - point2.x,point1.y - point2.y,point1.z - point2.z),new Vector(point2.x - point3.x,point2.y - point3.y,point2.z - point3.z));    return new SidedPlane(insidePoint,planeNormal,-planeNormal.dotProduct(point2));  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public static List<InputDocument> load(List<String> fileNames,LangDescriptor language) throws Exception {  List<InputDocument> documents=new ArrayList<>();  for (  String fileName : fileNames) {    documents.add(parse(fileName,language));  }  if (documents.size() > 0) {    documents.get(0).parser.getInterpreter().clearDFA();  }  return documents;}  }
class C{  public void show(){  view.show();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.897 -0500",hash_original_method="ADC5687DD367DA748E87D370EBAA626A",hash_generated_method="9EE693998BA7A36A3A10E2F3EB609F02") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public boolean login(String hostname) throws IOException {  return SMTPReply.isPositiveCompletion(helo(hostname));}  }
class C{  protected final MySQLConnection checkClosed() throws SQLException {  MySQLConnection c=this.connection;  if (c == null) {    throw SQLError.createSQLException(Messages.getString("ResultSet.Operation_not_allowed_after_ResultSet_closed_144"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());  }  return c;}  }
class C{  @Override public Version version(){  return VersionUtil.versionFor(getClass());}  }
class C{  public CategoricalDistribution rejectionSampling(RandomVariable[] X,AssignmentProposition[] e,BayesianNetwork bn,int Nsamples){  double[] N=new double[ProbUtil.expectedSizeOfCategoricalDistribution(X)];  for (int j=0; j < Nsamples; j++) {    Map<RandomVariable,Object> x=ps.priorSample(bn);    if (isConsistent(x,e)) {      N[ProbUtil.indexOf(X,x)]+=1.0;    }  }  return new ProbabilityTable(N,X).normalize();}  }
class C{  public boolean isShowTotals(){  return showTotals;}  }
class C{  private static int decode(int i){  return (i >>> 1) * (-(i & 1) | 1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public List<Vertex> processCompoundWords(List<Relationship> words){  List<Vertex> compoundedWords=new ArrayList<Vertex>(words.size());  for (int index=0; index < words.size(); index++) {    Vertex word=words.get(index).getTarget();    Collection<Relationship> compoundWords=word.getRelationships(Primitive.COMPOUND_WORD);    if (compoundWords == null) {      compoundedWords.add(word);    } else {      boolean found=false;      for (      Relationship compundWord : compoundWords) {        int compoundIndex=1;        List<Relationship> wordParts=compundWord.getTarget().orderedRelationships(Primitive.WORD);        if ((wordParts == null) || (wordParts.size() <= 1)) {          break;        }        while (((index + compoundIndex) < words.size()) && (compoundIndex < wordParts.size())) {          Vertex wordPart=wordParts.get(compoundIndex).getTarget();          Vertex nextWord=words.get(index + compoundIndex).getTarget();          if (!wordPart.equals(nextWord)) {            break;          }          compoundIndex++;        }        if (compoundIndex == wordParts.size()) {          found=true;          log("Compound word found",Level.FINE,compundWord.getTarget());          compoundedWords.add(compundWord.getTarget());          index=index + compoundIndex - 1;          break;        }      }      if (!found) {        for (        Relationship compundWord : compoundWords) {          int compoundIndex=1;          List<Relationship> wordParts=compundWord.getTarget().orderedRelationships(Primitive.WORD);          if ((wordParts == null) || (wordParts.size() <= 1)) {            break;          }          while (((index + compoundIndex) < words.size()) && (compoundIndex < wordParts.size())) {            Vertex wordPart=wordParts.get(compoundIndex).getTarget();            Vertex nextWord=words.get(index + compoundIndex).getTarget();            if (!wordPart.equalsIgnoreCase(nextWord)) {              break;            }            compoundIndex++;          }          if (compoundIndex == wordParts.size()) {            found=true;            log("Compound word found",Level.FINE,compundWord.getTarget());            compoundedWords.add(compundWord.getTarget());            index=index + compoundIndex - 1;            break;          }        }      }      if (!found) {        compoundedWords.add(word);      }    }  }  if (words.size() == compoundedWords.size()) {    return null;  }  return compoundedWords;}  }
class C{  public void beforeRequestRead(AbstractSerialConnection port){}  }
class C{  private static double acceptanceProbability(double oldCost,double newCost,double temp){  return newCost < oldCost ? 1.0 : Math.exp(-(newCost - oldCost) / temp);}  }
class C{  public void checkInterval(IInterval interval){  int begin=interval.getLeft();  int end=interval.getRight();  if (begin >= end) {    throw new IllegalArgumentException("Invalid SegmentTreeNode insert: begin (" + begin + ") must be strictly less than end ("+ end+ ")");  }}  }
class C{  public static String encode(byte[] bytes){  int length=bytes.length;  if (length == 0)   return "";  StringBuffer buffer=new StringBuffer((int)Math.ceil((double)length / 3d) * 4);  int remainder=length % 3;  length-=remainder;  int block;  int i=0;  while (i < length) {    block=((bytes[i++] & 0xff) << 16) | ((bytes[i++] & 0xff) << 8) | (bytes[i++] & 0xff);    buffer.append(ALPHABET.charAt(block >>> 18));    buffer.append(ALPHABET.charAt((block >>> 12) & 0x3f));    buffer.append(ALPHABET.charAt((block >>> 6) & 0x3f));    buffer.append(ALPHABET.charAt(block & 0x3f));  }  if (remainder == 0)   return buffer.toString();  if (remainder == 1) {    block=(bytes[i] & 0xff) << 4;    buffer.append(ALPHABET.charAt(block >>> 6));    buffer.append(ALPHABET.charAt(block & 0x3f));    buffer.append("==");    return buffer.toString();  }  block=(((bytes[i++] & 0xff) << 8) | ((bytes[i]) & 0xff)) << 2;  buffer.append(ALPHABET.charAt(block >>> 12));  buffer.append(ALPHABET.charAt((block >>> 6) & 0x3f));  buffer.append(ALPHABET.charAt(block & 0x3f));  buffer.append("=");  return buffer.toString();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HideAudio'";  db.execSQL(sql);}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabelAttribute) throws OperatorException {  ExampleSet[] eSet=new ExampleSet[getNumberOfModels()];  for (int i=0; i < getNumberOfModels(); i++) {    Model model=getModel(i);    eSet[i]=(ExampleSet)exampleSet.clone();    eSet[i]=model.apply(eSet[i]);  }  List<Iterator<Example>> reader=new ArrayList<Iterator<Example>>(eSet.length);  for (int r=0; r < eSet.length; r++) {    reader.add(eSet[r].iterator());  }  Iterator<Example> originalReader=exampleSet.iterator();  Attribute predictedLabel=exampleSet.getAttributes().getPredictedLabel();  while (originalReader.hasNext()) {    double bestLabel=Double.NaN;    double highestFunctionValue=Double.NEGATIVE_INFINITY;    for (int k=0; k < reader.size(); k++) {      double functionValue=reader.get(k).next().getPredictedLabel();      if (functionValue > highestFunctionValue) {        highestFunctionValue=functionValue;        bestLabel=k;      }    }    Example example=originalReader.next();    example.setPredictedLabel(bestLabel);    example.setConfidence(predictedLabel.getMapping().mapIndex((int)bestLabel),1.0d);  }  return exampleSet;}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  private int quantize(long x){  return 1 + (int)Math.floor(Math.log(x) / Math.log(quantizationBase));}  }
class C{  public final void transpose(Matrix3d m1){  if (this != m1) {    this.m00=m1.m00;    this.m01=m1.m10;    this.m02=m1.m20;    this.m10=m1.m01;    this.m11=m1.m11;    this.m12=m1.m21;    this.m20=m1.m02;    this.m21=m1.m12;    this.m22=m1.m22;  } else {    this.transpose();  }}  }
class C{  @Override public String toString(){  return (String.valueOf(getType()) + ":" + getKey()+ "="+ getValue());}  }
class C{  public boolean contains(IvrZoneMember zoneMember){  return getMembers().contains(zoneMember);}  }
class C{  @PUT @Path("/enablemonitorcountercollection") @Produces(MediaType.APPLICATION_JSON) @Description("Enables Argus system monitoring.") public Response enableMonitorCounterCollection(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.enableMonitorCounterCollection();  return Response.status(Status.OK).build();}  }
class C{  protected static void checkCRLs(ExtendedPKIXParameters paramsPKIX,X509Certificate cert,Date validDate,X509Certificate sign,PublicKey workingPublicKey,List certPathCerts) throws AnnotatedException {  AnnotatedException lastException=null;  CRLDistPoint crldp=null;  try {    crldp=CRLDistPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(cert,RFC3280CertPathUtilities.CRL_DISTRIBUTION_POINTS));  } catch (  Exception e) {    throw new AnnotatedException("CRL distribution point extension could not be read.",e);  }  try {    CertPathValidatorUtilities.addAdditionalStoresFromCRLDistributionPoint(crldp,paramsPKIX);  } catch (  AnnotatedException e) {    throw new AnnotatedException("No additional CRL locations could be decoded from CRL distribution point extension.",e);  }  CertStatus certStatus=new CertStatus();  ReasonsMask reasonsMask=new ReasonsMask();  boolean validCrlFound=false;  if (crldp != null) {    DistributionPoint dps[]=null;    try {      dps=crldp.getDistributionPoints();    } catch (    Exception e) {      throw new AnnotatedException("Distribution points could not be read.",e);    }    if (dps != null) {      for (int i=0; i < dps.length && certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonsMask.isAllReasons(); i++) {        ExtendedPKIXParameters paramsPKIXClone=(ExtendedPKIXParameters)paramsPKIX.clone();        try {          checkCRL(dps[i],paramsPKIXClone,cert,validDate,sign,workingPublicKey,certStatus,reasonsMask,certPathCerts);          validCrlFound=true;        } catch (        AnnotatedException e) {          lastException=e;        }      }    }  }  if (certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonsMask.isAllReasons()) {    try {      ASN1Primitive issuer=null;      try {        issuer=new ASN1InputStream(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded()).readObject();      } catch (      Exception e) {        throw new AnnotatedException("Issuer from certificate for CRL could not be reencoded.",e);      }      DistributionPoint dp=new DistributionPoint(new DistributionPointName(0,new GeneralNames(new GeneralName(GeneralName.directoryName,issuer))),null,null);      ExtendedPKIXParameters paramsPKIXClone=(ExtendedPKIXParameters)paramsPKIX.clone();      checkCRL(dp,paramsPKIXClone,cert,validDate,sign,workingPublicKey,certStatus,reasonsMask,certPathCerts);      validCrlFound=true;    } catch (    AnnotatedException e) {      lastException=e;    }  }  if (!validCrlFound) {    if (lastException instanceof AnnotatedException) {      throw lastException;    }    throw new AnnotatedException("No valid CRL found.",lastException);  }  if (certStatus.getCertStatus() != CertStatus.UNREVOKED) {    String message="Certificate revocation after " + certStatus.getRevocationDate();    message+=", reason: " + crlReasons[certStatus.getCertStatus()];    throw new AnnotatedException(message);  }  if (!reasonsMask.isAllReasons() && certStatus.getCertStatus() == CertStatus.UNREVOKED) {    certStatus.setCertStatus(CertStatus.UNDETERMINED);  }  if (certStatus.getCertStatus() == CertStatus.UNDETERMINED) {    throw new AnnotatedException("Certificate status could not be determined.");  }}  }
class C{  public static boolean existsResource(URL url){  boolean result=false;  if (url != null) {    if ("file".equals(url.getProtocol())) {      try {        result=new File(url.toURI()).exists();      } catch (      URISyntaxException e) {        result=false;      }    } else {      URLStreamManager manager=new URLStreamManager(url);      InputStream stream=manager.open();      manager.close();      result=stream != null;    }  }  return result;}  }
class C{  @Override protected final long maxMemory(){  return Memory.maxMemory();}  }
class C{  public ManifoldPoint(final ManifoldPoint cp){  localPoint=cp.localPoint.clone();  normalImpulse=cp.normalImpulse;  tangentImpulse=cp.tangentImpulse;  id=new ContactID(cp.id);}  }
class C{  public boolean isSatisfiedBy(Date date){  Calendar testDateCal=Calendar.getInstance(getTimeZone());  testDateCal.setTime(date);  testDateCal.set(Calendar.MILLISECOND,0);  Date originalDate=testDateCal.getTime();  testDateCal.add(Calendar.SECOND,-1);  Date timeAfter=getTimeAfter(testDateCal.getTime());  return ((timeAfter != null) && (timeAfter.equals(originalDate)));}  }
class C{  private void parse(boolean isSecure) throws URIException, HttpMalformedHeaderException {  mIsSecure=isSecure;  Matcher matcher=patternRequestLine.matcher(mStartLine);  if (!matcher.find()) {    mMalformedHeader=true;    throw new HttpMalformedHeaderException("Failed to find pattern: " + patternRequestLine);  }  mMethod=matcher.group(1);  String sUri=matcher.group(2);  mVersion=matcher.group(3);  if (!mVersion.equalsIgnoreCase(HTTP09) && !mVersion.equalsIgnoreCase(HTTP10) && !mVersion.equalsIgnoreCase(HTTP11)) {    mMalformedHeader=true;    throw new HttpMalformedHeaderException("Unexpected version: " + mVersion);  }  mUri=parseURI(sUri);  if (mUri.getScheme() == null || mUri.getScheme().equals("")) {    mUri=new URI(HTTP + "://" + getHeader(HOST)+ mUri.toString(),true);  }  if (isSecure() && mUri.getScheme().equalsIgnoreCase(HTTP)) {    mUri=new URI(mUri.toString().replaceFirst(HTTP,HTTPS),true);  }  if (mUri.getScheme().equalsIgnoreCase(HTTPS)) {    setSecure(true);  }  String hostHeader;  if (mMethod.equalsIgnoreCase(CONNECT)) {    hostHeader=sUri;    parseHostName(hostHeader);  } else {    mHostName=mUri.getHost();    setHostPort(mUri.getPort());  }}  }
class C{  public static String format(int kind,String source,int indentationLevel,String lineSeparator,IJavaProject project){  Map<String,String> options=project != null ? project.getOptions(true) : null;  return format(kind,source,indentationLevel,lineSeparator,options);}  }
class C{  public Builder withClientId(UUID clientId){  request.client=Assert.notNull(clientId,"clientId");  return this;}  }
class C{  String checkString(String s,int base){  if (s == null) {    throw new NullPointerException("s == null");  }  int charCount=s.length();  int i=0;  if (charCount > 0) {    char ch=s.charAt(0);    if (ch == '+') {      s=s.substring(1);      --charCount;    } else     if (ch == '-') {      ++i;    }  }  if (charCount - i == 0) {    throw invalidBigInteger(s);  }  boolean nonAscii=false;  for (; i < charCount; ++i) {    char ch=s.charAt(i);    if (Character.digit(ch,base) == -1) {      throw invalidBigInteger(s);    }    if (ch > 128) {      nonAscii=true;    }  }  return nonAscii ? toAscii(s,base) : s;}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  timeUniform=glGetUniformLocation(computeProgram,"time");  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");  bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount");  IntBuffer params=BufferUtils.createIntBuffer(1);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldPositionImage");  glGetUniformiv(computeProgram,loc,params);  worldPositionImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldNormalImage");  glGetUniformiv(computeProgram,loc,params);  worldNormalImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  protected void add(Rectangle rect,int l,int r){  ensureCapacity(size + 1);  int idx=l;  while (l <= r) {    idx=(l + r) / 2;    while ((rects[idx] == null) && (idx < r))     idx++;    if (rects[idx] == null) {      r=(l + r) / 2;      idx=(l + r) / 2;      if (l > r)       idx=l;      while ((rects[idx] == null) && (idx > l))       idx--;      if (rects[idx] == null) {        rects[idx]=rect;        return;      }    }    if (rect.x == rects[idx].x)     break;    if (rect.x < rects[idx].x) {      if (idx == 0)       break;      if ((rects[idx - 1] != null) && (rect.x >= rects[idx - 1].x))       break;      r=idx - 1;    } else {      if (idx == size - 1) {        idx++;        break;      }      if ((rects[idx + 1] != null) && (rect.x <= rects[idx + 1].x)) {        idx++;        break;      }      l=idx + 1;    }  }  if (idx < size) {    System.arraycopy(rects,idx,rects,idx + 1,size - idx);  }  rects[idx]=rect;  size++;  bounds=null;}  }
class C{  public NTRUEncryptionKeyGenerationParameters(InputStream is) throws IOException {  super(new SecureRandom(),-1);  DataInputStream dis=new DataInputStream(is);  N=dis.readInt();  q=dis.readInt();  df=dis.readInt();  df1=dis.readInt();  df2=dis.readInt();  df3=dis.readInt();  db=dis.readInt();  dm0=dis.readInt();  c=dis.readInt();  minCallsR=dis.readInt();  minCallsMask=dis.readInt();  hashSeed=dis.readBoolean();  oid=new byte[3];  dis.read(oid);  sparse=dis.readBoolean();  fastFp=dis.readBoolean();  polyType=dis.read();  String alg=dis.readUTF();  if ("SHA-512".equals(alg)) {    hashAlg=new SHA512Digest();  } else   if ("SHA-256".equals(alg)) {    hashAlg=new SHA256Digest();  }  init();}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.ContentMaturityRatingType buildContentMaturityRatingType(String agency,String rating,org.smpte_ra.schemas.st2067_2_2013.ContentMaturityRatingType.Audience audience) throws URISyntaxException {  org.smpte_ra.schemas.st2067_2_2013.ContentMaturityRatingType contentMaturityRatingType=new org.smpte_ra.schemas.st2067_2_2013.ContentMaturityRatingType();  if (!agency.matches("^[a-zA-Z0-9._-]+") == true) {    throw new URISyntaxException("Invalid URI","The ContentMaturityRating agency %s does not follow the syntax of a valid URI (a-z, A-Z, 0-9, ., _, -)");  }  contentMaturityRatingType.setAgency(agency);  contentMaturityRatingType.setRating(rating);  contentMaturityRatingType.setAudience(audience);  return contentMaturityRatingType;}  }
class C{  public void clearEscapedReturnValue(){  updateUsages(escapedReturnValue,null);  this.escapedReturnValue=null;}  }
class C{  protected void eleminateRedundent(ElemTemplateElement psuedoVarRecipient,Vector paths){  int n=paths.size();  int numPathsEliminated=0;  int numUniquePathsEliminated=0;  for (int i=0; i < n; i++) {    ExpressionOwner owner=(ExpressionOwner)paths.elementAt(i);    if (null != owner) {      int found=findAndEliminateRedundant(i + 1,i,owner,psuedoVarRecipient,paths);      if (found > 0)       numUniquePathsEliminated++;      numPathsEliminated+=found;    }  }  eleminateSharedPartialPaths(psuedoVarRecipient,paths);  if (DIAGNOSE_NUM_PATHS_REDUCED)   diagnoseNumPaths(paths,numPathsEliminated,numUniquePathsEliminated);}  }
class C{  private void deleteDocumentsFromIndex(Operation delete,String link,long versionsToKeep) throws Throwable {  IndexWriter wr=this.writer;  if (wr == null) {    delete.fail(new CancellationException());    return;  }  Query linkQuery=new TermQuery(new Term(ServiceDocument.FIELD_NAME_SELF_LINK,link));  IndexSearcher s=updateSearcher(link,Integer.MAX_VALUE,wr);  if (s == null) {    delete.fail(new CancellationException());    return;  }  TopDocs results;  results=s.search(linkQuery,Integer.MAX_VALUE,this.versionSort,false,false);  if (results == null) {    return;  }  ScoreDoc[] hits=results.scoreDocs;  if (hits == null || hits.length == 0) {    return;  }  Document hitDoc;  if (versionsToKeep == 0) {    wr.deleteDocuments(linkQuery);    this.indexUpdateTimeMicros=Utils.getNowMicrosUtc();    delete.complete();    return;  }  int versionCount=hits.length;  hitDoc=s.doc(hits[versionCount - 1].doc);  long versionLowerBound=Long.parseLong(hitDoc.get(ServiceDocument.FIELD_NAME_VERSION));  hitDoc=s.doc(hits[0].doc);  long versionUpperBound=Long.parseLong(hitDoc.get(ServiceDocument.FIELD_NAME_VERSION));  if (versionCount <= versionsToKeep) {    return;  }  BooleanQuery.Builder builder=new BooleanQuery.Builder();  hitDoc=s.doc(hits[(int)versionsToKeep].doc);  long cutOffVersion=Long.parseLong(hitDoc.get(ServiceDocument.FIELD_NAME_VERSION));  Query versionQuery=LongPoint.newRangeQuery(ServiceDocument.FIELD_NAME_VERSION,versionLowerBound,cutOffVersion);  builder.add(versionQuery,Occur.MUST);  builder.add(linkQuery,Occur.MUST);  BooleanQuery bq=builder.build();  results=s.search(bq,Integer.MAX_VALUE);  logInfo("Version grooming for %s found %d versions from %d to %d. Trimming %d versions from %d to %d",link,versionCount,versionLowerBound,versionUpperBound,results.scoreDocs.length,versionLowerBound,cutOffVersion);  wr.deleteDocuments(bq);  if (versionCount < versionUpperBound - versionLowerBound + 1) {    logWarning("Adding %s back for version grooming since versionCount %d " + "was lower than version delta from %d to %d.",link,versionCount,versionLowerBound,versionUpperBound);synchronized (this.linkDocumentRetentionEstimates) {      this.linkDocumentRetentionEstimates.put(link,versionsToKeep);    }  }  long now=Utils.getNowMicrosUtc();  updateLinkAccessTime(now,link);  delete.complete();}  }
class C{  public void removeAttributes(Enumeration<?> names){  StyleContext context=StyleContext.this;  attributes=context.removeAttributes(attributes,names);  fireStateChanged();}  }
class C{  private void updateActionMode(){  if (mActionMode != null) {    ListView list=getListView();    int count=list.getCheckedItemCount();    if (count > 0) {      mActionMode.setTitle(getString(R.string.n_selected,count));      mActionMode.invalidate();      String subject=res().getQuantityString(R.plurals.reviews_share,count,a.getTitle());      mShare.putExtra(EXTRA_SUBJECT,subject);      StringBuilder text=new StringBuilder(512 * count);      for (      int i : SparseArrays.trueKeys(list.getCheckedItemPositions())) {        if (text.length() > 0) {          text.append("\n\n");        }        EasyCursor c=(EasyCursor)list.getItemAtPosition(i);        text.append(getString(R.string.review_metadata,ReviewAdapter.name(a,c),ReviewAdapter.time(a,c),c.getInt(Reviews.RATING)));        CharSequence comments=ReviewAdapter.comments(c);        if (comments.length() > 0) {          text.append("\n").append(comments);        }      }      mShare.putExtra(EXTRA_TEXT,text.toString());    }  }}  }
class C{  public AbstractConstrainer(){}  }
class C{  public ReportPair(final String label,final String value){  this.label=label;  this.value=value;}  }
class C{  protected void formBusquedaElementosExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de formExecuteLogic");  Busqueda busqueda=getCfgBusquedaBandejaElementos(request);  PrecondicionesBusquedaFondosGenerica precondiciones=getPrecondicionesBusquedaElementos();  precondiciones.setKeyCfgBusqueda(FondosConstants.CFG_BUSQUEDA_KEY);  precondiciones.setKeyElementos(DescripcionConstants.ELEMENTOS_KEY);  setInTemporalSession(request,FondosConstants.PRECONDICIONES_BUSQUEDA_KEY,precondiciones);  setInTemporalSession(request,precondiciones.getKeyCfgBusqueda(),busqueda);  BusquedaElementosForm busquedaElementosForm=(BusquedaElementosForm)form;  BusquedasHelper.loadListasBusqueda(busqueda,busquedaElementosForm,request,precondiciones);  setReturnActionFordward(request,mapping.findForward("form_busqueda_elementos"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.018 -0400",hash_original_method="7375C00FAA961592B0F1CD7B52495FD2",hash_generated_method="362CF872E8888FAEBE4BA6B6A49DF7DB") public final boolean isWarnEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);}  }
class C{  public void moveUp(){  Coord scale=_map.scale(_zoom);  double partY=1.0 * getHeight() / 4;  _center=_center.translate(partY * scale.getLatitude(),0);  _needTiles=true;}  }
class C{  private void loadCustomEntities(ArrayList<String> sourceEntities){  s_logger.log(Level.FINE,"loadCustomEntities",getDirection());  ArrayList<String> entityTypes=new ArrayList<String>();  String sql=s_dbEngine.sqlAD_getCustomEntityTypes(getVendor(),getCatalog(),getSchema());  ResultSet rs=null;  java.sql.Statement stmt=null;  if (isObjectExists("ad_entitytype",m_tables)) {    stmt=setStatement();    rs=executeQuery(stmt,sql);    while (getResultSetNext(rs)) {      String s=getResultSetString(rs,"EntityType").toUpperCase();      if (!entityTypes.contains(s)) {        if (isTarget()) {          if (sourceEntities != null) {            if (!sourceEntities.contains(s)) {              entityTypes.add(s);            }          } else {            entityTypes.add(s);          }        } else {          entityTypes.add(s);        }      }    }    releaseResultSet(rs);    releaseStatement(stmt);  }  if (!entityTypes.contains("A"))   entityTypes.add("A");  if (!entityTypes.contains("CUST"))   entityTypes.add("CUST");  if (!entityTypes.contains("EXT"))   entityTypes.add("EXT");  if (!entityTypes.contains("U"))   entityTypes.add("U");  if (!entityTypes.contains("XX"))   entityTypes.add("XX");  java.util.Collections.sort(entityTypes);  m_customEntities=new ArrayList<String>(entityTypes);  StringBuffer result=new StringBuffer();  for (Iterator<String> it=m_customEntities.iterator(); it.hasNext(); ) {    String s=it.next();    if (result.length() > 0)     result.append(", ");    result.append(s);  }  s_logger.log(Level.FINE,"customEntitiesLoaded",new Object[]{getDirection(),result});  s_logger.flush();}  }
class C{  private void compareQueryResultsWithoutAndWithIndexes(Object[][] r,int len){  Set set1=null;  Set set2=null;  Iterator itert1=null;  Iterator itert2=null;  ObjectType type1, type2;  for (int j=0; j < len; j++) {    type1=((SelectResults)r[j][0]).getCollectionType().getElementType();    type2=((SelectResults)r[j][1]).getCollectionType().getElementType();    if ((type1.getClass().getName()).equals(type2.getClass().getName())) {      logger.info("Both SelectResults are of the same Type i.e.--> " + ((SelectResults)r[j][0]).getCollectionType().getElementType());    } else {      logger.info("Classes are : " + type1.getClass().getName() + " "+ type2.getClass().getName());      fail("FAILED:Select result Type is different in both the cases");    }    if (((SelectResults)r[j][0]).size() == ((SelectResults)r[j][1]).size()) {      logger.info("Both SelectResults are of Same Size i.e.  Size= " + ((SelectResults)r[j][1]).size());    } else {      fail("FAILED:SelectResults size is different in both the cases. Size1=" + ((SelectResults)r[j][0]).size() + " Size2 = "+ ((SelectResults)r[j][1]).size());    }    set2=(((SelectResults)r[j][1]).asSet());    set1=(((SelectResults)r[j][0]).asSet());    logger.info(" SIZE1 = " + set1.size() + " SIZE2 = "+ set2.size());    itert1=set1.iterator();    while (itert1.hasNext()) {      Object p1=itert1.next();      itert2=set2.iterator();      boolean exactMatch=false;      while (itert2.hasNext()) {        logger.info("### Comparing results..");        Object p2=itert2.next();        if (p1 instanceof Struct) {          logger.info("ITS a Set");          Object[] values1=((Struct)p1).getFieldValues();          Object[] values2=((Struct)p2).getFieldValues();          assertEquals(values1.length,values2.length);          boolean elementEqual=true;          for (int i=0; i < values1.length; ++i) {            elementEqual=elementEqual && ((values1[i] == values2[i]) || values1[i].equals(values2[i]));          }          exactMatch=elementEqual;        } else {          logger.info("Not a Set p2:" + p2 + " p1: "+ p1);          if (p2 instanceof TestObject) {            logger.info("An instance of TestObject");            exactMatch=p2.equals(p1);          } else {            logger.info("Not an instance of TestObject" + p2.getClass().getCanonicalName());            exactMatch=p2.equals(p1);          }        }        if (exactMatch) {          logger.info("Exact MATCH");          break;        }      }      if (!exactMatch) {        logger.info("NOT A MATCH");        fail("Atleast one element in the pair of SelectResults supposedly identical, is not equal ");      }    }    logger.info("### Done Comparing results..");  }}  }
class C{  public DataSet reverse(){  if (sort == null) {    throw new GroovyRuntimeException("reverse() only allowed immediately after a sort()");  }  return new DataSet(this);}  }
class C{  public String typetag(){  return Bytes.getAsString(_myTypetag);}  }
class C{  protected void removeMapping(final HashEntry<K,V> entry,final int hashIndex,final HashEntry<K,V> previous){  modCount++;  removeEntry(entry,hashIndex,previous);  size--;  destroyEntry(entry);}  }
class C{  @Override public double classifyInstance(Instance instance) throws Exception {  double result;  double[] dist;  int index;switch (m_CombinationRule) {case AVERAGE_RULE:case PRODUCT_RULE:case MAJORITY_VOTING_RULE:case MIN_RULE:case MAX_RULE:    dist=distributionForInstance(instance);  if (instance.classAttribute().isNominal()) {    index=Utils.maxIndex(dist);    if (dist[index] == 0) {      result=Utils.missingValue();    } else {      result=index;    }  } else   if (instance.classAttribute().isNumeric()) {    result=dist[0];  } else {    result=Utils.missingValue();  }break;case MEDIAN_RULE:result=classifyInstanceMedian(instance);break;default :throw new IllegalStateException("Unknown combination rule '" + m_CombinationRule + "'!");}return result;}  }
class C{  public Wedge(Position centerPosition,Angle angle,double northSouthRadius,double verticalRadius,double eastWestRadius,Angle heading,Angle tilt,Angle roll){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle.getRadians() < 0 || angle.getRadians() > 2 * Math.PI) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","angle < 0 or angle > 2 PI");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.wedgeAngle=angle;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.heading=heading;  this.tilt=tilt;  this.roll=roll;  this.setUpGeometryCache();}  }
class C{  public boolean isValueObscured(int index){  if (obscuredIndexes.get(new Integer(index)) == null) {    return false;  }  return true;}  }
class C{  private void writeVersion(){  String[] versionComponents=SystemUtils.getMyTracksVersion(context).split("\\.");  int versionMajor=versionComponents.length > 0 ? Integer.valueOf(versionComponents[0]) : 0;  int versionMinor=versionComponents.length > 1 ? Integer.valueOf(versionComponents[1]) : 0;  int buildMajor=versionComponents.length > 2 ? Integer.valueOf(versionComponents[2]) : 0;  printWriter.println("<Version>");  printWriter.println("<VersionMajor>" + versionMajor + "</VersionMajor>");  printWriter.println("<VersionMinor>" + versionMinor + "</VersionMinor>");  printWriter.println("<BuildMajor>" + buildMajor + "</BuildMajor>");  printWriter.println("<BuildMinor>0</BuildMinor>");  printWriter.println("</Version>");}  }
class C{  private static String readResult(InputStream is) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int length=0;  while ((length=is.read(buffer)) != -1) {    baos.write(buffer,0,length);  }  return baos.toString("UTF-8");}  }
class C{  public static CountProjectionExpression countDistinct(Expression expression){  return new CountProjectionExpression(expression,true);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private static boolean startServer(){  if (Cfg.getOs().equals("null")) {    Logger.appendLog("[AdbUtils][E]ADB is not supported by this OS");    return false;  }  String[] cmd={S.getAdbBin(),"start-server"};  return CmdUtils.runCommand(cmd) == 0;}  }
class C{  public ExternalPriceModelException(){}  }
class C{  public double distance(Point2D pt){  final double x_distance=(pt.getX() - x) * (pt.getX() - x);  final double y_distance=(pt.getY() - y) * (pt.getY() - y);  return Math.sqrt(x_distance + y_distance);}  }
class C{  private boolean isStrInList(String name,String[] list){  boolean retValue=false;  if (list != null) {    for (int i=0; i < list.length; i++) {      if (name.startsWith(list[i])) {        retValue=true;        break;      }    }  }  return retValue;}  }
class C{  public boolean hasRoles(){  return roles != null && roles.length > 0;}  }
class C{  public SprogReply(String replyString,boolean isBoot){  this(replyString);  _isBoot=isBoot;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenGroups[");  buffer.append("m_al = ").append(m_al);  buffer.append("]");  return buffer.toString();}  }
class C{  private boolean startServers(){  log.info("");  int noServers=0;  MAcctProcessor[] acctModels=MAcctProcessor.getActive(m_ctx);  for (int i=0; i < acctModels.length; i++) {    MAcctProcessor pModel=acctModels[i];    AdempiereServer server=AdempiereServer.create(pModel);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 2);    m_servers.add(server);  }  MRequestProcessor[] requestModels=MRequestProcessor.getActive(m_ctx);  for (int i=0; i < requestModels.length; i++) {    MRequestProcessor pModel=requestModels[i];    AdempiereServer server=AdempiereServer.create(pModel);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 2);    m_servers.add(server);  }  MWorkflowProcessor[] workflowModels=MWorkflowProcessor.getActive(m_ctx);  for (int i=0; i < workflowModels.length; i++) {    MWorkflowProcessor pModel=workflowModels[i];    AdempiereServer server=AdempiereServer.create(pModel);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 2);    m_servers.add(server);  }  MAlertProcessor[] alertModels=MAlertProcessor.getActive(m_ctx);  for (int i=0; i < alertModels.length; i++) {    MAlertProcessor pModel=alertModels[i];    AdempiereServer server=AdempiereServer.create(pModel);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 2);    m_servers.add(server);  }  MScheduler[] schedulerModels=MScheduler.getActive(m_ctx);  for (int i=0; i < schedulerModels.length; i++) {    MScheduler pModel=schedulerModels[i];    AdempiereServer server=AdempiereServer.create(pModel);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 2);    m_servers.add(server);  }  MLdapProcessor[] ldapModels=MLdapProcessor.getActive(m_ctx);  for (int i=0; i < ldapModels.length; i++) {    MLdapProcessor lp=ldapModels[i];    AdempiereServer server=AdempiereServer.create(lp);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 1);    m_servers.add(server);  }  MIMPProcessor[] importModels=MIMPProcessor.getActive(m_ctx);  for (int i=0; i < importModels.length; i++) {    MIMPProcessor lp=importModels[i];    AdempiereServer server=AdempiereServer.create(lp);    server.start();    server.setPriority(Thread.NORM_PRIORITY - 1);    m_servers.add(server);  }  log.fine("#" + noServers);  return startAll();}  }
class C{  private byte[] encrypt(byte[] m,NTRUEncryptionPublicKeyParameters pubKey){  IntegerPolynomial pub=pubKey.h;  int N=params.N;  int q=params.q;  int maxLenBytes=params.maxMsgLenBytes;  int db=params.db;  int bufferLenBits=params.bufferLenBits;  int dm0=params.dm0;  int pkLen=params.pkLen;  int minCallsMask=params.minCallsMask;  boolean hashSeed=params.hashSeed;  byte[] oid=params.oid;  int l=m.length;  if (maxLenBytes > 255) {    throw new IllegalArgumentException("llen values bigger than 1 are not supported");  }  if (l > maxLenBytes) {    throw new DataLengthException("Message too long: " + l + ">"+ maxLenBytes);  }  while (true) {    byte[] b=new byte[db / 8];    random.nextBytes(b);    byte[] p0=new byte[maxLenBytes + 1 - l];    byte[] M=new byte[bufferLenBits / 8];    System.arraycopy(b,0,M,0,b.length);    M[b.length]=(byte)l;    System.arraycopy(m,0,M,b.length + 1,m.length);    System.arraycopy(p0,0,M,b.length + 1 + m.length,p0.length);    IntegerPolynomial mTrin=IntegerPolynomial.fromBinary3Sves(M,N);    byte[] bh=pub.toBinary(q);    byte[] hTrunc=copyOf(bh,pkLen / 8);    byte[] sData=buildSData(oid,m,l,b,hTrunc);    Polynomial r=generateBlindingPoly(sData,M);    IntegerPolynomial R=r.mult(pub,q);    IntegerPolynomial R4=(IntegerPolynomial)R.clone();    R4.modPositive(4);    byte[] oR4=R4.toBinary(4);    IntegerPolynomial mask=MGF(oR4,N,minCallsMask,hashSeed);    mTrin.add(mask);    mTrin.mod3();    if (mTrin.count(-1) < dm0) {      continue;    }    if (mTrin.count(0) < dm0) {      continue;    }    if (mTrin.count(1) < dm0) {      continue;    }    R.add(mTrin,q);    R.ensurePositive(q);    return R.toBinary(q);  }}  }
class C{  public OSArrayTag(int type,ByteBuffer data){  super(type,data.limit());  this.data=data;  data.rewind();  this.padding=getPadding(data.limit(),false);}  }
class C{  private InputNode readStart(InputNode from,EventNode event) throws Exception {  InputElement input=new InputElement(from,this,event);  if (text.length() > 0) {    text.setLength(0);  }  if (event.isStart()) {    return stack.push(input);  }  return input;}  }
class C{  static private void logDetailRows(final IRunningQuery q,final Map<Integer,QueueStats> queueStats,final StringBuilder sb){  final Integer[] order=BOpUtility.getEvaluationOrder(q.getQuery());  int orderIndex=0;  for (  Integer bopId : order) {    sb.append(getTableRow(q,orderIndex,bopId,false,queueStats));    orderIndex++;  }}  }
class C{  public Relation relate(double minLat,double maxLat,double minLon,double maxLon){  if (minLat <= maxY && minLon <= maxX) {    Relation relation=componentRelate(minLat,maxLat,minLon,maxLon);    if (relation != Relation.CELL_OUTSIDE_QUERY) {      return relation;    }    if (left != null) {      relation=left.relate(minLat,maxLat,minLon,maxLon);      if (relation != Relation.CELL_OUTSIDE_QUERY) {        return relation;      }    }    if (right != null && ((splitX == false && maxLat >= this.minLat) || (splitX && maxLon >= this.minLon))) {      relation=right.relate(minLat,maxLat,minLon,maxLon);      if (relation != Relation.CELL_OUTSIDE_QUERY) {        return relation;      }    }  }  return Relation.CELL_OUTSIDE_QUERY;}  }
class C{  public double differencesBetweenNeighborhoodsVertical(int x,int y,int k){  double result=0;  result=Math.abs(this.averageOverNeighborhoods(x,y + (int)Math.pow(2,k - 1),k) - this.averageOverNeighborhoods(x,y - (int)Math.pow(2,k - 1),k));  return result;}  }
class C{  public void compress_clipVideo(String f1_path,String f2_path,int mCameraId,int video_width,int video_height,int top_x,int top_y,ShellCallback sc) throws Exception {  ArrayList<String> cmd=new ArrayList<String>();  cmd.add(mFfmpegBin);  cmd.add("-threads");  cmd.add("4");  cmd.add("-y");  cmd.add("-i");  cmd.add(f1_path);  cmd.add("-metadata:s:v");  cmd.add("rotate=\"0\"");  if (mCameraId == 0) {    cmd.add("-vf");    cmd.add("transpose=1, crop=" + video_height + ":"+ video_height+ ":"+ top_x+ ":"+ top_y);  } else {    cmd.add("-vf");    cmd.add("transpose=3, crop=" + video_height + ":"+ video_height+ ":"+ (video_width - video_height)+ ":"+ top_y);  }  cmd.add("-preset");  cmd.add("ultrafast");  cmd.add("-tune");  cmd.add("zerolatency");  cmd.add("-r");  cmd.add("25");  cmd.add("-vcodec");  cmd.add("libx264");  cmd.add("-acodec");  cmd.add("copy");  cmd.add(f2_path);  execFFMPEG(cmd,sc);}  }
class C{  public MethodReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean constructor,boolean synthetic,boolean insideDocComment,SearchParticipant participant,IResource resource){  this(enclosingElement,accuracy,offset,length,insideDocComment,participant,resource);  this.constructor=constructor;  this.synthetic=synthetic;}  }
class C{  private void parseNoWildCards(){  fSegments=new String[1];  fSegments[0]=fPattern;  fBound=fLength;}  }
class C{  public boolean isOnPieChart(Point screenPoint){  double sqValue=(Math.pow(mCenterX - screenPoint.getX(),2) + Math.pow(mCenterY - screenPoint.getY(),2));  double radiusSquared=mPieChartRadius * mPieChartRadius;  boolean isOnPieChart=sqValue <= radiusSquared;  return isOnPieChart;}  }
class C{  public JLabel(String text,int horizontalAlignment){  this(text,null,horizontalAlignment);}  }
class C{  HeapCompactSketch(UpdateSketch sketch){  super(sketch.isEmpty(),sketch.getSeedHash(),sketch.getRetainedEntries(true),sketch.getThetaLong());  boolean ordered=false;  cache_=CompactSketch.compactCache(sketch.getCache(),getRetainedEntries(false),getThetaLong(),ordered);}  }
class C{  private void addOption(final List<String> args,final String optName,final String value){  if (value != null && !value.isEmpty()) {    args.add(optName);    args.add(value);  }}  }
class C{  public static void recordFsEvent(DbClient dbClient,FileShare fs,String type,String description,String extensions){  if (fs == null) {    _log.error("Invalid FileShare event");    return;  }  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(fs,type,description,extensions,dbClient,EVENT_SERVICE_TYPE,RecordType.Event.name(),EVENT_SERVICE_SOURCE);  try {    eventManager.recordEvents(event);  } catch (  Exception th) {    _log.error("Failed to record event. Event description: {}.",description,th);  }}  }
class C{  protected final V unwrapKey(Object key){  return (V)key;}  }
class C{  public BSBMVocabulary(){  super();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void init() throws ServletException {}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void startSample(long sampleTimeUs,int offset){  Assertions.checkState(offset <= 0);  pendingSampleTimeUs=sampleTimeUs;  pendingSampleOffset=totalBytesWritten + offset;}  }
class C{  public void load(){}  }
class C{  public String valueToString(double value){  return String.valueOf(value);}  }
class C{  private boolean isQualSuper(){  return superBase != null;}  }
class C{  public void append(StringBuffer buffer,String fieldName,float[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  public void mouseClicked(MouseEvent e){  if (e.getClickCount() > 1)   adaptee.actionPerformed(new ActionEvent(e.getSource(),e.getID(),"Mouse"));  if (SwingUtilities.isRightMouseButton(e))   adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public int insertAchievement(Achievement achievement) throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  int achievementId=insertAchievement(transaction,achievement);  TransactionPool.get().commit(transaction);  return achievementId;}  }
class C{  public void registerKeyboardAction(ActionListener anAction,KeyStroke aKeyStroke,int aCondition){  registerKeyboardAction(anAction,null,aKeyStroke,aCondition);}  }
class C{  public static String toStringExclude(final Object object,final Collection<String> excludeFieldNames){  return toStringExclude(object,toNoNullStringArray(excludeFieldNames));}  }
class C{  protected AssignmentExpressionImpl(){  super();}  }
class C{  public int read() throws IOException {  if (_peek >= 0) {    int peek=_peek;    _peek=-1;    return peek;  }  InputStream is=_is;  int ch1=is.read();  if (ch1 < 0x80) {    return ch1;  } else   if ((ch1 & 0xe0) == 0xc0) {    int ch2=is.read();    if (ch2 < 0) {      return error("unexpected end of file in utf8 character");    } else     if ((ch2 & 0xc0) != 0x80) {      return error("utf-8 character conversion error for '{0}' because second byte is invalid at " + String.format("0x%02x 0x%02x",ch1,ch2));    }    return ((ch1 & 0x1f) << 6) + (ch2 & 0x3f);  } else   if ((ch1 & 0xf0) == 0xe0) {    int ch2=is.read();    int ch3=is.read();    if (ch2 < 0)     return error("unexpected end of file in utf8 character"); else     if ((ch2 & 0xc0) != 0x80) {      return error("illegal utf8 encoding at " + "\\x" + Integer.toHexString(ch1) + "\\x"+ Integer.toHexString(ch2)+ "\\x"+ Integer.toHexString(ch3));    }    if (ch3 < 0)     return error("unexpected end of file in utf8 character"); else     if ((ch3 & 0xc0) != 0x80)     return error("illegal utf8 encoding at " + "\\x" + Integer.toHexString(ch1) + "\\x"+ Integer.toHexString(ch2)+ "\\x"+ Integer.toHexString(ch3));    int ch=((ch1 & 0x1f) << 12) + ((ch2 & 0x3f) << 6) + (ch3 & 0x3f);    if (ch == 0xfeff) {      return read();    } else     return ch;  } else   if ((ch1 & 0xf0) == 0xf0) {    int ch2=is.read();    int ch3=is.read();    int ch4=is.read();    if (ch2 < 0)     return error("unexpected end of file in utf8 character"); else     if ((ch2 & 0xc0) != 0x80)     return error("illegal utf8 encoding at 0x" + Integer.toHexString(ch2));    if (ch3 < 0)     return error("unexpected end of file in utf8 character"); else     if ((ch3 & 0xc0) != 0x80)     return error("illegal utf8 encoding at 0x" + Integer.toHexString(ch3));    if (ch4 < 0)     return error("unexpected end of file in utf8 character"); else     if ((ch4 & 0xc0) != 0x80)     return error("illegal utf8 encoding at 0x" + Integer.toHexString(ch4));    int ch=(((ch1 & 0xf) << 18) + ((ch2 & 0x3f) << 12) + ((ch3 & 0x3f) << 6)+ ((ch4 & 0x3f)));    _peek=0xdc00 + (ch & 0x3ff);    return 0xd800 + ((ch - 0x10000) / 0x400);  } else {    return error("illegal utf8 encoding at (0x" + Integer.toHexString(ch1) + ")");  }}  }
class C{  protected boolean isLeafMatch(Viewer viewer,Object element){  CellLabelProvider cellLabelProvider=null;  if (viewer instanceof ColumnViewer) {    cellLabelProvider=((ColumnViewer)viewer).getLabelProvider(0);  }  String labelText=getTextFromLabelProvider(cellLabelProvider,element);  if (labelText == null) {    IBaseLabelProvider baseLabelProvider=((StructuredViewer)viewer).getLabelProvider();    labelText=getTextFromLabelProvider(baseLabelProvider,element);  }  return wordMatches(labelText);}  }
class C{  private void actionRePost(){  if (m_data.documentQuery && m_data.AD_Table_ID != 0 && m_data.Record_ID != 0 && FDialog.ask(m_data.WindowNo,this,"PostImmediate?")) {    boolean force=forcePost.isChecked();    String error=AEnv.postImmediate(m_data.WindowNo,m_data.AD_Client_ID,m_data.AD_Table_ID,m_data.Record_ID,force);    if (error != null)     FDialog.error(0,this,"PostingError-N",error);    actionQuery();  }}  }
class C{  @Override protected OfferCollection doInBackground(final PlaceInfo... params){  PlaceInfo place=params[0];  if (place == null) {    return null;  }  OfferCollection result;  try {    result=shoppingAssistantAPI.offers().listOffers().execute();  } catch (  IOException e) {    String message=e.getMessage();    if (message == null) {      message=e.toString();    }    log.severe("Exception=" + message);    result=null;  }  return result;}  }
class C{  public void testDoCheckWithEmptyText(){  LOGGER.debug("doCheckWithEmptyText");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("");  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,TEXT_EMPTY_MSG);  expectLastCall().once();  TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,TEXT_EMPTY_MSG,TEXT_NOT_EMPTY_MSG);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  public int size(){  return map.size();}  }
class C{  public static boolean writeFile(String filePath,InputStream is){  return writeFile(filePath,is,false);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.SCHEDULE_TIME_EVENT__TIME_EVENT:    if (resolve)     return getTimeEvent();  return basicGetTimeEvent();case SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE:return getTimeValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  String prefix="", ns="", localName=target;  int colon=target.indexOf(':');  if (colon >= 0) {    ns=getNamespaceForPrefix(prefix=target.substring(0,colon));    localName=target.substring(colon + 1);  }  try {    if ("xalan-doc-cache-off".equals(target) || "xalan:doc-cache-off".equals(target) || ("doc-cache-off".equals(localName) && ns.equals("org.apache.xalan.xslt.extensions.Redirect"))) {      if (!(m_elems.peek() instanceof ElemForEach))       throw new TransformerException("xalan:doc-cache-off not allowed here!",getLocator());      ElemForEach elem=(ElemForEach)m_elems.peek();      elem.m_doc_cache_off=true;    }  } catch (  Exception e) {  }  flushCharacters();  getCurrentProcessor().processingInstruction(this,target,data);}  }
class C{  public void writeText(char text) throws IOException {  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    charHolder[0]=text;    Util.writeText(writer,buffer,charHolder);  }}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public String descriptionline(QueryGoal queryGoal){  if (descriptionline != null)   return descriptionline;  if (this.isMarked) {    descriptionline=CharacterCoding.unicode2html(this.getLineRaw(),false).replaceAll("&lt;b&gt;(.+?)&lt;/b&gt;","<b>$1</b>");  } else {    descriptionline=this.getLineMarked(queryGoal);  }  return descriptionline;}  }
class C{  @Deprecated @Override public void recycle(){  super.recycle();  setFollowRedirects(false);}  }
class C{  protected AbstractHashedMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public static Animation pushDownIn(){  AnimationSet animationSet=new AnimationSet(true);  animationSet.setFillAfter(true);  animationSet.addAnimation(new TranslateAnimation(0,0,-100,0));  animationSet.addAnimation(new AlphaAnimation(0.0f,1.0f));  return animationSet;}  }
class C{  public AllocatableValue spillSlot(){  return splitParent().spillSlot;}  }
class C{  public OsIndicator(String output,String osSensor,String lock){  this.lock=lock;  this.osSensor=osSensor;  this.output=output;}  }
class C{  public static boolean isEmpty(final String str,final boolean trim){  if (!trim)   return isEmpty(str);  return str == null || str.trim().length() == 0;}  }
class C{  public void mark(int readAheadLimit) throws IOException {  if (readAheadLimit < 0) {    throw new IllegalArgumentException("Read-ahead limit < 0");  }synchronized (lock) {    ensureOpen();    this.readAheadLimit=readAheadLimit;    markedChar=nextChar;    markedSkipLF=skipLF;  }}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher){  this(cipher,(cipher.getBlockSize() * 8) / 2,null);}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMTemplateElement(prefix,(AbstractDocument)doc);}  }
class C{  public void disable() throws IOException {  if (!isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("true");    configuration.save();  }  FMLCommonHandler.instance().bus().unregister(this);}  }
class C{  public static final long bitMaskWithBitsSetFromTo(int from,int to){  return pows[to - from + 1] << from;}  }
class C{  protected void afterDisconnected(){}  }
class C{  public static void main(String[] args){}  }
class C{  public List<RevisionMetadata> parseMetadata(String log){  try {    Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(log)));    NodeList nl=doc.getElementsByTagName("logentry");    ImmutableList.Builder<RevisionMetadata> resultBuilder=ImmutableList.builder();    for (int i=0; i < nl.getLength(); i++) {      String revId=nl.item(i).getAttributes().getNamedItem("revision").getNodeValue();      NodeList nlEntries=nl.item(i).getChildNodes();      if (i + 1 >= nl.getLength()) {        resultBuilder.add(parseMetadataNodeList(revId,nlEntries,ImmutableList.<Revision>of()));      } else {        String parentId=nl.item(i + 1).getAttributes().getNamedItem("revision").getNodeValue();        resultBuilder.add(parseMetadataNodeList(revId,nlEntries,ImmutableList.of(Revision.create(parentId,name))));      }    }    return resultBuilder.build();  } catch (  Exception e) {    throw new MoeProblem("Could not parse xml log: " + log + e.getMessage());  }}  }
class C{  public void drawBitmapWithCircleOnCanvas(Bitmap bitmap,Canvas canvas,RectF source,@NonNull RectF dest){  if (bitmap == null) {    if (getStyle() == SHAPE_CIRCLE) {      canvas.drawCircle(dest.centerX(),dest.centerY(),Math.min(dest.width(),dest.height()) / 2f,mSolidColorPaint);    } else {      final float cornerRadius=getCalculatedCornerRadius();      canvas.drawRoundRect(dest,cornerRadius,cornerRadius,mSolidColorPaint);    }    return;  }  final BitmapShader shader=new BitmapShader(bitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  mMatrix.reset();switch (getScaleType()) {case CENTER_CROP:{      final float srcRatio=source.width() / source.height();      final float dstRatio=dest.width() / dest.height();      if (srcRatio > dstRatio) {        mTempDestination.top=dest.top;        mTempDestination.bottom=dest.bottom;        final float dstWidth=dest.height() * srcRatio;        mTempDestination.left=dest.centerX() - dstWidth / 2;        mTempDestination.right=dest.centerX() + dstWidth / 2;      } else       if (srcRatio < dstRatio) {        mTempDestination.left=dest.left;        mTempDestination.right=dest.right;        final float dstHeight=dest.width() / srcRatio;        mTempDestination.top=dest.centerY() - dstHeight / 2;        mTempDestination.bottom=dest.centerY() + dstHeight / 2;      } else {        mTempDestination.set(dest);      }      break;    }default :{    mTempDestination.set(dest);    break;  }}mMatrix.setRectToRect(source,mTempDestination,ScaleToFit.CENTER);shader.setLocalMatrix(mMatrix);mBitmapPaint.setShader(shader);if (mBorderEnabled) {final float inset=mBorderPaint.getStrokeWidth() / 2;if (getStyle() == SHAPE_CIRCLE) {  final float circleRadius=Math.min(dest.width(),dest.height()) / 2f - inset / 2;  canvas.drawCircle(dest.centerX(),dest.centerY(),circleRadius,mBitmapPaint);} else {  final float cornerRadius=getCalculatedCornerRadius();  dest.inset(inset,inset);  canvas.drawRoundRect(dest,cornerRadius,cornerRadius,mBitmapPaint);  dest.inset(-inset,-inset);}} else {if (getStyle() == SHAPE_CIRCLE) {  final float circleRadius=Math.min(dest.width(),dest.height()) / 2f;  canvas.drawCircle(dest.centerX(),dest.centerY(),circleRadius,mBitmapPaint);} else {  final float cornerRadius=getCalculatedCornerRadius();  canvas.drawRoundRect(dest,cornerRadius,cornerRadius,mBitmapPaint);}}}  }
class C{  private void measureItem(View child){  ViewGroup.LayoutParams p=child.getLayoutParams();  if (p == null) {    p=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.MATCH_PARENT);  }  int childHeightSpec=ViewGroup.getChildMeasureSpec(mHeightMeasureSpec,mListPadding.top + mListPadding.bottom,p.height);  int lpWidth=p.width;  int childWidthSpec;  if (lpWidth > 0) {    childWidthSpec=MeasureSpec.makeMeasureSpec(lpWidth,MeasureSpec.EXACTLY);  } else {    childWidthSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  }  child.measure(childWidthSpec,childHeightSpec);}  }
class C{  public Cluster minMaxAvrClustering(){  int nrOfSubmissions=submissions.size();  boolean minClustering=(Options.MIN_CLUSTER == this.program.get_clusterType());  boolean maxClustering=(Options.MAX_CLUSTER == this.program.get_clusterType());  SimilarityMatrix simMatrix=this.program.get_similarity();  ArrayList<Cluster> clusters=new ArrayList<Cluster>(submissions.size());  for (int i=0; i < nrOfSubmissions; i++)   clusters.add(new Cluster(i,this));  while (clusters.size() > 1) {    int indexA=-1, indexB=-1;    float maxSim=-1;    int nrOfClusters=clusters.size();    for (int a=0; a < (nrOfClusters - 1); a++) {      Cluster cluster=clusters.get(a);      for (int b=a + 1; b < nrOfClusters; b++) {        float sim;        if (minClustering)         sim=cluster.maxSimilarity(clusters.get(b),simMatrix); else         if (maxClustering)         sim=cluster.minSimilarity(clusters.get(b),simMatrix); else         sim=cluster.avrSimilarity(clusters.get(b),simMatrix);        if (sim > maxSim) {          maxSim=sim;          indexA=a;          indexB=b;        }      }    }    if (maxSim > maxMergeValue)     maxMergeValue=maxSim;    Cluster clusterA=clusters.get(indexA);    Cluster clusterB=clusters.get(indexB);    clusters.remove(clusterA);    clusters.remove(clusterB);    clusters.add(new Cluster(clusterA,clusterB,maxSim,this));  }  return clusters.get(0);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void testRandomStrings() throws Exception {  Random random=random();  checkRandomData(random,analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public FixedBitSet(int numBits){  this.numBits=numBits;  bits=new long[bits2words(numBits)];  numWords=bits.length;}  }
class C{  public void triggerIpReconfig(ClusterIpInfo clusterIpInfo,String postOperation) throws Exception {  validateParameter(clusterIpInfo,postOperation);  sanityCheckEnv();synchronized (this) {    config=_coordinator.getCoordinatorClient().queryConfiguration(IpReconfigConstants.CONFIG_KIND,IpReconfigConstants.CONFIG_ID);    if (config != null) {      if (isStarted(config)) {        String errmsg="Cluster is already under ip reconfiguration.";        log.error(errmsg);        throw new IllegalStateException(errmsg);      }    }  }  initIpReconfig(clusterIpInfo,postOperation);}  }
class C{  private void updateDosAttribute(int flag,boolean enable) throws IOException {  file.checkWrite();  int fd=file.openForAttributeAccess(followLinks);  try {    int oldValue=getDosAttribute(fd);    int newValue=oldValue;    if (enable) {      newValue|=flag;    } else {      newValue&=~flag;    }    if (newValue != oldValue) {      byte[] value=Util.toBytes("0x" + Integer.toHexString(newValue));      NativeBuffer buffer=NativeBuffers.asNativeBuffer(value);      try {        LinuxNativeDispatcher.fsetxattr(fd,DOS_XATTR_NAME_AS_BYTES,buffer.address(),value.length + 1);      }  finally {        buffer.release();      }    }  } catch (  UnixException x) {    x.rethrowAsIOException(file);  } finally {    close(fd);  }}  }
class C{  public boolean checkConnectionliveness(CimConnection connection){  boolean isLive=false;  if (null == connection) {    return isLive;  }  WBEMClient wbemClient=connection.getCimClient();  _log.debug("copPath:{}",_cop);  try {    wbemClient.enumerateInstanceNames(_cop);    isLive=true;  } catch (  WBEMException wbemEx) {    _log.error("Invalid connection found for ipAddress: {}",connection.getHost());  }  return isLive;}  }
class C{  public TextEditorInit(final TextEditorConfiguration configuration,final EventBus generalEventBus,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final TextEditorPresenter<T> textEditor){  this.configuration=configuration;  this.generalEventBus=generalEventBus;  this.codeAssistantFactory=codeAssistantFactory;  this.quickAssist=quickAssist;  this.textEditor=textEditor;}  }
class C{  public static <T>T eachLine(CharSequence self,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine((CharSequence)self.toString(),0,closure);}  }
class C{  public void end(String namespace,String name) throws Exception {  ListEntriesBean top=null;  try {    top=(ListEntriesBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  ListEntriesHolder leh=(ListEntriesHolder)digester.peek();  ListEntriesBean old=leh.getListEntries();  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ListEntriesRule]{" + digester.getMatch() + "} New");    }    leh.setListEntries(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ManagedBeanRule]{" + digester.getMatch() + "} Merge");    }    mergeListEntries(top,old);  }}  }
class C{  public QueryExecutionCanceledException(String msg){  super(msg);}  }
class C{  private void configureServicePaymentTypes(VOServicePaymentConfiguration conf,Organization supplier) throws ObjectNotFoundException, OperationNotPermittedException {  Product product=dm.getReference(Product.class,conf.getService().getKey());  PermissionCheck.owns(product,supplier,logger,sessionCtx);  new PaymentConfigurationFilter(dm).checkIsTemplate(supplier,product);  Map<String,PaymentType> idToPt=loadPaymentTypeForSupplier(supplier);  Map<PaymentType,List<Subscription>> ptToSubs=loadPtToSubListMap(product,idToPt);  Map<String,ProductToPaymentType> idToRef=loadProductToPaymenttype(product);  Set<VOPaymentType> types=conf.getEnabledPaymentTypes();  for (  VOPaymentType pt : types) {    PaymentType type=idToPt.remove(pt.getPaymentTypeId());    if (type == null) {      throwWarningForTypeEqualsNull(supplier,product,pt);    }    ProductToPaymentType ref=idToRef.remove(pt.getPaymentTypeId());    if (ref == null) {      createNewReference(product,type);      List<Subscription> list=getAffectedSubscriptions(ptToSubs,type);      for (      Subscription sub : list) {        if (isOwningSubscription(supplier.getKey(),sub) && PaymentDataValidator.isPaymentTypeSupportedBySupplier(sub.getOrganization(),sub.getProduct(),type)) {          if (!checkSubKeyInSuspendedTransactionSubKeyList(sub.getKey())) {            revokeSuspendedSubscription(sub);          }        }      }    }  }  for (  Map.Entry<String,ProductToPaymentType> entry : idToRef.entrySet()) {    PaymentType type=removeReference(product,entry);    List<Subscription> list=getAffectedSubscriptions(ptToSubs,type);    for (    Subscription sub : list) {      if (isOwningSubscription(supplier.getKey(),sub)) {        addToSuspendedInTransactionList(sub.getKey());        suspendChargeableActiveSubscription(sub);      }    }  }}  }
class C{  void cancel(){  cancelled=true;  interrupt();}  }
class C{  protected FileIOAnnotationJob(String inputfile,String outputfile,TextAnnotationBuilder tab,NERAnnotator ann){  this.inputfile=inputfile;  this.outputfile=outputfile;  this.tab=tab;  this.nerAnnotator=ann;}  }
class C{  public TeXParser(boolean isPartial,String parseString,ArrayOfAtoms aoa,boolean firstpass,boolean space){  this(isPartial,parseString,(TeXFormula)aoa,firstpass,space);  arrayMode=true;}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot,Task struct) throws org.apache.thrift.TException {  struct.validate();  oprot.writeStructBegin(STRUCT_DESC);  if (struct.isSetTaskId()) {    oprot.writeFieldBegin(TASK_ID_FIELD_DESC);    oprot.writeI32(struct.taskId);    oprot.writeFieldEnd();  }  if (struct.taskName != null) {    oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);    oprot.writeString(struct.taskName);    oprot.writeFieldEnd();  }  if (struct.className != null) {    oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);    oprot.writeString(struct.className);    oprot.writeFieldEnd();  }  if (struct.method != null) {    oprot.writeFieldBegin(METHOD_FIELD_DESC);    oprot.writeString(struct.method);    oprot.writeFieldEnd();  }  if (struct.moduleCode != null) {    if (struct.isSetModuleCode()) {      oprot.writeFieldBegin(MODULE_CODE_FIELD_DESC);      oprot.writeString(struct.moduleCode);      oprot.writeFieldEnd();    }  }  if (struct.isSetPriority()) {    oprot.writeFieldBegin(PRIORITY_FIELD_DESC);    oprot.writeI32(struct.priority);    oprot.writeFieldEnd();  }  if (struct.isConcurrent != null) {    if (struct.isSetIsConcurrent()) {      oprot.writeFieldBegin(IS_CONCURRENT_FIELD_DESC);      oprot.writeString(struct.isConcurrent);      oprot.writeFieldEnd();    }  }  if (struct.taskState != null) {    if (struct.isSetTaskState()) {      oprot.writeFieldBegin(TASK_STATE_FIELD_DESC);      oprot.writeString(struct.taskState);      oprot.writeFieldEnd();    }  }  if (struct.isSetLastExecuteTime()) {    oprot.writeFieldBegin(LAST_EXECUTE_TIME_FIELD_DESC);    oprot.writeI64(struct.lastExecuteTime);    oprot.writeFieldEnd();  }  if (struct.isSetNextExcuteDate()) {    oprot.writeFieldBegin(NEXT_EXCUTE_DATE_FIELD_DESC);    oprot.writeI64(struct.nextExcuteDate);    oprot.writeFieldEnd();  }  if (struct.isSetOperatorId()) {    oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);    oprot.writeI32(struct.operatorId);    oprot.writeFieldEnd();  }  if (struct.isSetCreateTime()) {    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);    oprot.writeI64(struct.createTime);    oprot.writeFieldEnd();  }  oprot.writeFieldStop();  oprot.writeStructEnd();}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  highLightSelectItem();  return updated;}  }
class C{  public void unlock(){  lock.lock();  try {    exclusiveLock.unlock();    resume();  }  finally {    lock.unlock();  }}  }
class C{  public URI normalize(){  if (opaque) {    return this;  }  String normalizedPath=normalize(path,false);  if (path.equals(normalizedPath)) {    return this;  }  URI result=duplicate();  result.path=normalizedPath;  result.setSchemeSpecificPart();  return result;}  }
class C{  public void init(){  SystemProperties props=SystemProperties.getInstance();  Path playlistFolder=props.getApplicationFolder("playlist");  String defaultPlaylistFile=props.get("playlist.v2.defaultfilename","playlist_v2.xml");  String playlistFile=props.get("playlist.v2.currentfilename",defaultPlaylistFile);  mCurrentPlaylistPath=playlistFolder.resolve(playlistFile);  PlaylistV2 playlist=load(mCurrentPlaylistPath);  boolean saveRequired=false;  if (playlist == null) {    mLog.info("Couldn't find version 2 playlist - looking for " + "version 1 playlist to convert");    Path playlistV1Path=playlistFolder.resolve("playlist.xml");    PlaylistConverterV1ToV2 converter=new PlaylistConverterV1ToV2(playlistV1Path);    if (converter.hasErrorMessages()) {      mLog.error("Playlist version 1 conversion errors: " + converter.getErrorMessages());    }    playlist=converter.getConvertedPlaylist();    saveRequired=true;  }  transferPlaylistToModels(playlist);  if (saveRequired) {    schedulePlaylistSave();  }}  }
class C{  public static String[] split(String src,char delim){  return split(src,delim,0);}  }
class C{  @Override public <R>StreamBuilderImpl<R,U> collect(SupplierSync<R> init,BiConsumerSync<R,T> accum,BiConsumerSync<R,R> combiner){  return new CollectSync<>(this,init,accum,combiner);}  }
class C{  protected void resetOptions(){  m_doRank=false;  m_best_group=null;  m_ASEval=null;  m_Instances=null;  m_rankedSoFar=-1;  m_rankedAtts=null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (extendsName_1: ");  result.append(extendsName_1);  result.append(')');  return result.toString();}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 1) % length;  while (index != last) {    if (array[index] == key || array[index] == null) {      break;    }    index=(index + 1) % length;  }  return index;}  }
class C{  @Override public MemChunkHolder<A> createChunk(long size){  return createChunk(size,true);}  }
class C{  protected static boolean establishWekaHome(){  if (m_wekaHomeEstablished) {    return true;  }  Environment env=Environment.getSystemWide();  String wh=env.getVariableValue("WEKA_HOME");  if (wh != null) {    WEKA_HOME=new File(wh);    PACKAGES_DIR=new File(wh + File.separator + "packages");    PROPERTIES_DIR=new File(wh + File.separator + PROPERTIES_DIR_NAME);  } else {    env.addVariableSystemWide("WEKA_HOME",WEKA_HOME.toString());  }  boolean ok=true;  if (!WEKA_HOME.exists()) {    if (!WEKA_HOME.mkdir()) {      System.err.println("Unable to create WEKA_HOME (" + WEKA_HOME.getAbsolutePath() + ")");      ok=false;    }  }  if (!PACKAGES_DIR.exists()) {    if (!PACKAGES_DIR.mkdir()) {      System.err.println("Unable to create packages directory (" + PACKAGES_DIR.getAbsolutePath() + ")");      ok=false;    }  }  m_wekaHomeEstablished=ok;  PACKAGE_MANAGER.setPackageHome(PACKAGES_DIR);  m_doNotLoadList=getDoNotLoadList();  try {    String repURL=env.getVariableValue("weka.core.wekaPackageRepositoryURL");    if (repURL == null || repURL.length() == 0) {      File repPropsFile=new File(PROPERTIES_DIR.toString() + File.separator + "PackageRepository.props");      if (repPropsFile.exists()) {        Properties repProps=new Properties();        repProps.load(new FileInputStream(repPropsFile));        repURL=repProps.getProperty("weka.core.wekaPackageRepositoryURL");      }    }    if (repURL == null || repURL.length() == 0) {      repURL=PRIMARY_REPOSITORY;    } else {      log(weka.core.logging.Logger.Level.INFO,"[WekaPackageManager] weka.core.WekaPackageRepositoryURL = " + repURL);      USER_SET_REPO=true;    }    REP_URL=new URL(repURL);    PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);  } catch (  MalformedURLException ex) {    ex.printStackTrace();  }catch (  IOException ex) {    ex.printStackTrace();  }  PACKAGE_MANAGER.setBaseSystemName("weka");  PACKAGE_MANAGER.setBaseSystemVersion(weka.core.Version.VERSION);  File cacheDir=new File(WEKA_HOME.toString() + File.separator + "repCache");  try {    String tempCacheString="file://" + cacheDir.toString();    tempCacheString=tempCacheString.replace(" ","%20");    tempCacheString=tempCacheString.replace('\\','/');    if (tempCacheString.startsWith("file://") && !tempCacheString.startsWith("file:///")) {      tempCacheString=tempCacheString.substring(7);      tempCacheString="file:///" + tempCacheString;    }    URI tempURI=new URI(tempCacheString);    CACHE_URL=tempURI.toURL();  } catch (  Exception e) {    e.printStackTrace();  }  File packagesList=new File(cacheDir.getAbsolutePath() + File.separator + PACKAGE_LIST_FILENAME);  if (!cacheDir.exists()) {    if (!cacheDir.mkdir()) {      System.err.println("Unable to create repository cache directory (" + cacheDir.getAbsolutePath() + ")");      log(weka.core.logging.Logger.Level.WARNING,"Unable to create repository cache directory (" + cacheDir.getAbsolutePath() + ")");      CACHE_URL=null;    } else {      INITIAL_CACHE_BUILD_NEEDED=true;    }  }  if (!packagesList.exists()) {    INITIAL_CACHE_BUILD_NEEDED=true;  }  String offline=env.getVariableValue("weka.packageManager.offline");  if (offline != null) {    m_offline=offline.equalsIgnoreCase("true");  }  String loadPackages=env.getVariableValue("weka.packageManager.loadPackages");  if (loadPackages == null) {    loadPackages=env.getVariableValue("weka.core.loadPackages");  }  if (loadPackages != null) {    m_loadPackages=loadPackages.equalsIgnoreCase("true");  }  File generalProps=new File(PROPERTIES_DIR.toString() + File.separator + PACKAGE_MANAGER_PROPS_FILE_NAME);  if (generalProps.exists()) {    Properties gProps=new Properties();    try {      gProps.load(new FileInputStream(generalProps));      String repURL=gProps.getProperty("weka.core.wekaPackageRepositoryURL");      if (repURL != null && repURL.length() > 0) {        REP_URL=new URL(repURL);        PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);      }      offline=gProps.getProperty("weka.packageManager.offline");      if (offline != null && offline.length() > 0) {        m_offline=offline.equalsIgnoreCase("true");      }      loadPackages=gProps.getProperty("weka.packageManager.loadPackages");      if (loadPackages == null) {        loadPackages=env.getVariableValue("weka.core.loadPackages");      }      if (loadPackages != null) {        m_loadPackages=loadPackages.equalsIgnoreCase("true");      }      String pluginManagerDisableList=gProps.getProperty("weka.pluginManager.disable");      if (pluginManagerDisableList != null && pluginManagerDisableList.length() > 0) {        List<String> disable=new ArrayList<String>();        String[] parts=pluginManagerDisableList.split(",");        for (        String s : parts) {          disable.add(s.trim());        }        PluginManager.addToDisabledList(disable);      }    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  if (INITIAL_CACHE_BUILD_NEEDED && m_offline) {    m_noPackageMetaDataAvailable=true;  }  PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);  PACKAGE_MANAGER.setProxyAuthentication(REP_URL);  return ok;}  }
class C{  public N4JSSwitch(){  if (modelPackage == null) {    modelPackage=N4JSPackage.eINSTANCE;  }}  }
class C{  public void showContent(){  switchState(CONTENT,null,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  public static String readString(int hkey,String key,String valueName) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    return readString(systemRoot,hkey,key,valueName);  } else   if (hkey == HKEY_CURRENT_USER) {    return readString(userRoot,hkey,key,valueName);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  @Override public void init(NamedList args){  this.initArgs=args;}  }
class C{  public boolean isDataAvailable(){  return model.getBillingData() != null;}  }
class C{  protected SymbolTableEntryOriginalImpl(){  super();}  }
class C{  public Log(String filename){  this(filename,1000000,1);}  }
class C{  public void processAction(ActionEvent event) throws AbortProcessingException {  FacesContext ctx=FacesContext.getCurrentInstance();  UIComponent source=(UIComponent)event.getSource();  String cid=source.getClientId(ctx);  ctx.addMessage(cid,new FacesMessage(FacesMessage.SEVERITY_INFO,"Action Invoked : " + cid,"Action Invoked : " + cid));}  }
class C{  public static <T extends DataObject>Map<URI,T> toMap(Collection<T> col){  Map<URI,T> map=new HashMap<URI,T>();  if (col != null) {    for (    T t : col) {      map.put(t.getId(),t);    }  }  return map;}  }
class C{  public void testContainsEdgeCases() throws Exception {  for (int i=0; i < 1000; i++) {    Polygon polygon=nextPolygon();    Polygon2D impl=Polygon2D.create(polygon);    for (int j=0; j < 10; j++) {      Rectangle rectangle=GeoTestUtil.nextBoxNear(polygon);      if (impl.relate(rectangle.minLat,rectangle.maxLat,rectangle.minLon,rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {        for (int k=0; k < 100; k++) {          double point[]=GeoTestUtil.nextPointNear(rectangle);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertTrue(impl.contains(latitude,longitude));          }        }        for (int k=0; k < 20; k++) {          double point[]=GeoTestUtil.nextPointNear(polygon);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertTrue(impl.contains(latitude,longitude));          }        }      }    }  }}  }
class C{  @Override protected JTabbedPane createPlotTabs(Plot plot){  JTabbedPane tabs=super.createPlotTabs(plot);  tabs.insertTab(localizationResources.getString("General1"),null,createPlotPanel(),null,0);  tabs.setSelectedIndex(0);  return tabs;}  }
class C{  public boolean removeParser(Parser parser){  boolean removed=false;  if (parserManager != null) {    removed=parserManager.removeParser(parser);  }  return removed;}  }
class C{  public void putEncodeable(String fieldName,Class<? extends IEncodeable> clazz,IEncodeable s) throws EncodingException {  ctx.getEncodeableSerializer().putEncodeable(clazz,s,this);}  }
class C{  public DeviceAutomator pressTab(){  typeText("\t");  return this;}  }
class C{  public static ShortestPathFinder newInstanceOfOneToAll(final int maxMP,final MoveStepType stepType,final IGame game){  final ShortestPathFinder spf=new ShortestPathFinder(new ShortestPathFinder.MovePathRelaxer(),new ShortestPathFinder.MovePathMPCostComparator(),stepType,game);  spf.addFilter(new MovePathLengthFilter(maxMP));  spf.addFilter(new MovePathLegalityFilter(game));  return spf;}  }
class C{  public double calcPointToLineDistance(Entry startEntry,Entry endEntry,Entry entryPoint){  float xDiffEndStart=(float)endEntry.getXIndex() - (float)startEntry.getXIndex();  float xDiffEntryStart=(float)entryPoint.getXIndex() - (float)startEntry.getXIndex();  double normalLength=Math.sqrt((xDiffEndStart) * (xDiffEndStart) + (endEntry.getVal() - startEntry.getVal()) * (endEntry.getVal() - startEntry.getVal()));  return Math.abs((xDiffEntryStart) * (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()) * (xDiffEndStart)) / normalLength;}  }
class C{  public static PeriodFormatter alternateExtended(){  if (cAlternateExtended == null) {    cAlternateExtended=new PeriodFormatterBuilder().appendLiteral("P").printZeroAlways().minimumPrintedDigits(4).appendYears().appendSeparator("-").minimumPrintedDigits(2).appendMonths().appendSeparator("-").appendDays().appendSeparatorIfFieldsAfter("T").appendHours().appendSeparator(":").appendMinutes().appendSeparator(":").appendSecondsWithOptionalMillis().toFormatter();  }  return cAlternateExtended;}  }
class C{  public static void sendRefusal(InternalDistributedMember recipient,int processorId,DM dm){  Assert.assertTrue(recipient != null,"ManageBucketReplyMessage NULL reply message");  ManageBucketReplyMessage m=new ManageBucketReplyMessage(processorId,false,false);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static boolean isSimpleDigit(char character){  return !(character < '0' || character > '9');}  }
class C{  public Map<String,RawProtein<PrintsRawMatch>> process(Map<String,RawProtein<PrintsRawMatch>> proteinIdToRawMatchMap) throws IOException {  if (printsModelData == null) {synchronized (HIERCH_DB_LOCK) {      if (printsModelData == null) {        if (hierarchyDBParser == null || fingerPRINTSHierarchyDB == null) {          throw new IllegalStateException("The PrintsPostProcessing class requires the injection of a FingerPRINTSHierarchyDBParser and a fingerPRINTSHierarchyDB resource.");        }        printsModelData=hierarchyDBParser.parse(fingerPRINTSHierarchyDB);        allPrintsModelIDs=new ArrayList<String>(printsModelData.size());        for (        FingerPRINTSHierarchyDBParser.HierachyDBEntry entry : printsModelData.values()) {          allPrintsModelIDs.add(entry.getId());        }        allPrintsModelIDs=Collections.unmodifiableList(allPrintsModelIDs);      }    }  }  Map<String,RawProtein<PrintsRawMatch>> proteinIdToFilteredMatch=new HashMap<String,RawProtein<PrintsRawMatch>>();  for (  String proteinId : proteinIdToRawMatchMap.keySet()) {    proteinIdToFilteredMatch.put(proteinId,processProtein(proteinIdToRawMatchMap.get(proteinId)));  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Total of " + getMatchCountDEBUG(proteinIdToRawMatchMap) + " raw matches passed in and "+ getMatchCountDEBUG(proteinIdToFilteredMatch)+ " passed out.");  }  return proteinIdToFilteredMatch;}  }
class C{  public RuntimeDistributionConfigImpl(InternalDistributedSystem ds){  super(ds.getOriginalConfig());  this.ds=ds;  this.modifiable=false;}  }
class C{  public void addCollisionResponses(Bag collidingList){  for (int i=0; i < collidingList.numObjs; i++) {    CollisionPair pair=(CollisionPair)collidingList.objs[i];    Collision col=new Collision();    PhysicalObject2D collidePoly1=(PhysicalObject2D)pair.c1;    PhysicalObject2D collidePoly2=(PhysicalObject2D)pair.c2;    col.AddPhysicalObject(collidePoly1,pair.getColPoint1());    col.AddPhysicalObject(collidePoly2,pair.getColPoint2());    col.setColNormal(pair.getNormal());    col.setRelVel(pair.getRelativeVelocity());    if (pair.getSticky())     col.setSticky();    this.registerImpulseConstraint(col);    this.setCollisionMatrices();    sim.util.matrix.Vector answerCT=new sim.util.matrix.Vector(collisionResponseAnswersVector.m);    try {      answerCT=BorderedDiagonalIdentityMatrix.solveBiConjugateGradient(collisionResponseMatrix,collisionResponseAnswersVector,answerCT,collisionResponseMatrix.m * 2,1E-5,false);    } catch (    Exception e) {      try {        answerCT=BorderedDiagonalIdentityMatrix.solveBiConjugateGradient(collisionResponseMatrix,collisionResponseAnswersVector,answerCT,collisionResponseMatrix.m * 2,1E-5,true);      } catch (      Exception e2) {        answerCT=new Vector(collisionResponseMatrix.getDenseMatrix().solve(collisionResponseAnswersVector.getDenseMatrix()));      }    }    addCalculatedResponses(answerCT);    this.unRegisterImpulseConstraint(col);    double relVelNorm=pair.getRelativeVelocity();    if (relVelNorm > -ZERO_VELOCITY && relVelNorm < ZERO_VELOCITY) {    }    pair.clear();  }}  }
class C{  public static void monitorExit(Object obj){  UNSAFE.monitorExit(obj);}  }
class C{  public NTRUEncryptionPublicKeyParameters(byte[] b,NTRUEncryptionParameters params){  super(false,params);  h=IntegerPolynomial.fromBinary(b,params.N,params.q);}  }
class C{  public JEditorDouble(){}  }
class C{  public void testInvalidAltitude() throws Exception {  testInvalidGpx(INVALID_ALTITUDE_GPX);}  }
class C{  public static void write(char c){  add(c);}  }
class C{  public boolean dispatchEvent(AWTEvent e){  if (focusLog.isLoggable(PlatformLogger.Level.FINE) && (e instanceof WindowEvent || e instanceof FocusEvent)) {    focusLog.fine("" + e);  }switch (e.getID()) {case WindowEvent.WINDOW_GAINED_FOCUS:{      if (repostIfFollowsKeyEvents((WindowEvent)e)) {        break;      }      WindowEvent we=(WindowEvent)e;      Window oldFocusedWindow=getGlobalFocusedWindow();      Window newFocusedWindow=we.getWindow();      if (newFocusedWindow == oldFocusedWindow) {        break;      }      if (!(newFocusedWindow.isFocusableWindow() && newFocusedWindow.isVisible() && newFocusedWindow.isDisplayable())) {        restoreFocus(we);        break;      }      if (oldFocusedWindow != null) {        boolean isEventDispatched=sendMessage(oldFocusedWindow,new WindowEvent(oldFocusedWindow,WindowEvent.WINDOW_LOST_FOCUS,newFocusedWindow));        if (!isEventDispatched) {          setGlobalFocusOwner(null);          setGlobalFocusedWindow(null);        }      }      Window newActiveWindow=getOwningFrameDialog(newFocusedWindow);      Window currentActiveWindow=getGlobalActiveWindow();      if (newActiveWindow != currentActiveWindow) {        sendMessage(newActiveWindow,new WindowEvent(newActiveWindow,WindowEvent.WINDOW_ACTIVATED,currentActiveWindow));        if (newActiveWindow != getGlobalActiveWindow()) {          restoreFocus(we);          break;        }      }      setGlobalFocusedWindow(newFocusedWindow);      if (newFocusedWindow != getGlobalFocusedWindow()) {        restoreFocus(we);        break;      }      if (inSendMessage == 0) {        Component toFocus=KeyboardFocusManager.getMostRecentFocusOwner(newFocusedWindow);        if ((toFocus == null) && newFocusedWindow.isFocusableWindow()) {          toFocus=newFocusedWindow.getFocusTraversalPolicy().getInitialComponent(newFocusedWindow);        }        Component tempLost=null;synchronized (KeyboardFocusManager.class) {          tempLost=newFocusedWindow.setTemporaryLostComponent(null);        }        if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {          focusLog.finer("tempLost {0}, toFocus {1}",tempLost,toFocus);        }        if (tempLost != null) {          tempLost.requestFocusInWindow(CausedFocusEvent.Cause.ACTIVATION);        }        if (toFocus != null && toFocus != tempLost) {          toFocus.requestFocusInWindow(CausedFocusEvent.Cause.ACTIVATION);        }      }      Window realOppositeWindow=this.realOppositeWindowWR.get();      if (realOppositeWindow != we.getOppositeWindow()) {        we=new WindowEvent(newFocusedWindow,WindowEvent.WINDOW_GAINED_FOCUS,realOppositeWindow);      }      return typeAheadAssertions(newFocusedWindow,we);    }case WindowEvent.WINDOW_ACTIVATED:{    WindowEvent we=(WindowEvent)e;    Window oldActiveWindow=getGlobalActiveWindow();    Window newActiveWindow=we.getWindow();    if (oldActiveWindow == newActiveWindow) {      break;    }    if (oldActiveWindow != null) {      boolean isEventDispatched=sendMessage(oldActiveWindow,new WindowEvent(oldActiveWindow,WindowEvent.WINDOW_DEACTIVATED,newActiveWindow));      if (!isEventDispatched) {        setGlobalActiveWindow(null);      }      if (getGlobalActiveWindow() != null) {        break;      }    }    setGlobalActiveWindow(newActiveWindow);    if (newActiveWindow != getGlobalActiveWindow()) {      break;    }    return typeAheadAssertions(newActiveWindow,we);  }case FocusEvent.FOCUS_GAINED:{  FocusEvent fe=(FocusEvent)e;  CausedFocusEvent.Cause cause=(fe instanceof CausedFocusEvent) ? ((CausedFocusEvent)fe).getCause() : CausedFocusEvent.Cause.UNKNOWN;  Component oldFocusOwner=getGlobalFocusOwner();  Component newFocusOwner=fe.getComponent();  if (oldFocusOwner == newFocusOwner) {    if (focusLog.isLoggable(PlatformLogger.Level.FINE)) {      focusLog.fine("Skipping {0} because focus owner is the same",e);    }    dequeueKeyEvents(-1,newFocusOwner);    break;  }  if (oldFocusOwner != null) {    boolean isEventDispatched=sendMessage(oldFocusOwner,new CausedFocusEvent(oldFocusOwner,FocusEvent.FOCUS_LOST,fe.isTemporary(),newFocusOwner,cause));    if (!isEventDispatched) {      setGlobalFocusOwner(null);      if (!fe.isTemporary()) {        setGlobalPermanentFocusOwner(null);      }    }  }  final Window newFocusedWindow=SunToolkit.getContainingWindow(newFocusOwner);  final Window currentFocusedWindow=getGlobalFocusedWindow();  if (newFocusedWindow != null && newFocusedWindow != currentFocusedWindow) {    sendMessage(newFocusedWindow,new WindowEvent(newFocusedWindow,WindowEvent.WINDOW_GAINED_FOCUS,currentFocusedWindow));    if (newFocusedWindow != getGlobalFocusedWindow()) {      dequeueKeyEvents(-1,newFocusOwner);      break;    }  }  if (!(newFocusOwner.isFocusable() && newFocusOwner.isShowing() && (newFocusOwner.isEnabled() || cause.equals(CausedFocusEvent.Cause.UNKNOWN)))) {    dequeueKeyEvents(-1,newFocusOwner);    if (KeyboardFocusManager.isAutoFocusTransferEnabled()) {      if (newFocusedWindow == null) {        restoreFocus(fe,currentFocusedWindow);      } else {        restoreFocus(fe,newFocusedWindow);      }      setMostRecentFocusOwner(newFocusedWindow,null);    }    break;  }  setGlobalFocusOwner(newFocusOwner);  if (newFocusOwner != getGlobalFocusOwner()) {    dequeueKeyEvents(-1,newFocusOwner);    if (KeyboardFocusManager.isAutoFocusTransferEnabled()) {      restoreFocus(fe,(Window)newFocusedWindow);    }    break;  }  if (!fe.isTemporary()) {    setGlobalPermanentFocusOwner(newFocusOwner);    if (newFocusOwner != getGlobalPermanentFocusOwner()) {      dequeueKeyEvents(-1,newFocusOwner);      if (KeyboardFocusManager.isAutoFocusTransferEnabled()) {        restoreFocus(fe,(Window)newFocusedWindow);      }      break;    }  }  setNativeFocusOwner(getHeavyweight(newFocusOwner));  Component realOppositeComponent=this.realOppositeComponentWR.get();  if (realOppositeComponent != null && realOppositeComponent != fe.getOppositeComponent()) {    fe=new CausedFocusEvent(newFocusOwner,FocusEvent.FOCUS_GAINED,fe.isTemporary(),realOppositeComponent,cause);    ((AWTEvent)fe).isPosted=true;  }  return typeAheadAssertions(newFocusOwner,fe);}case FocusEvent.FOCUS_LOST:{FocusEvent fe=(FocusEvent)e;Component currentFocusOwner=getGlobalFocusOwner();if (currentFocusOwner == null) {  if (focusLog.isLoggable(PlatformLogger.Level.FINE))   focusLog.fine("Skipping {0} because focus owner is null",e);  break;}if (currentFocusOwner == fe.getOppositeComponent()) {  if (focusLog.isLoggable(PlatformLogger.Level.FINE))   focusLog.fine("Skipping {0} because current focus owner is equal to opposite",e);  break;}setGlobalFocusOwner(null);if (getGlobalFocusOwner() != null) {  restoreFocus(currentFocusOwner,true);  break;}if (!fe.isTemporary()) {  setGlobalPermanentFocusOwner(null);  if (getGlobalPermanentFocusOwner() != null) {    restoreFocus(currentFocusOwner,true);    break;  }} else {  Window owningWindow=currentFocusOwner.getContainingWindow();  if (owningWindow != null) {    owningWindow.setTemporaryLostComponent(currentFocusOwner);  }}setNativeFocusOwner(null);fe.setSource(currentFocusOwner);realOppositeComponentWR=(fe.getOppositeComponent() != null) ? new WeakReference<Component>(currentFocusOwner) : NULL_COMPONENT_WR;return typeAheadAssertions(currentFocusOwner,fe);}case WindowEvent.WINDOW_DEACTIVATED:{WindowEvent we=(WindowEvent)e;Window currentActiveWindow=getGlobalActiveWindow();if (currentActiveWindow == null) {break;}if (currentActiveWindow != e.getSource()) {break;}setGlobalActiveWindow(null);if (getGlobalActiveWindow() != null) {break;}we.setSource(currentActiveWindow);return typeAheadAssertions(currentActiveWindow,we);}case WindowEvent.WINDOW_LOST_FOCUS:{if (repostIfFollowsKeyEvents((WindowEvent)e)) {break;}WindowEvent we=(WindowEvent)e;Window currentFocusedWindow=getGlobalFocusedWindow();Window losingFocusWindow=we.getWindow();Window activeWindow=getGlobalActiveWindow();Window oppositeWindow=we.getOppositeWindow();if (focusLog.isLoggable(PlatformLogger.Level.FINE)) focusLog.fine("Active {0}, Current focused {1}, losing focus {2} opposite {3}",activeWindow,currentFocusedWindow,losingFocusWindow,oppositeWindow);if (currentFocusedWindow == null) {break;}if (inSendMessage == 0 && losingFocusWindow == activeWindow && oppositeWindow == currentFocusedWindow) {break;}Component currentFocusOwner=getGlobalFocusOwner();if (currentFocusOwner != null) {Component oppositeComp=null;if (oppositeWindow != null) {oppositeComp=oppositeWindow.getTemporaryLostComponent();if (oppositeComp == null) {  oppositeComp=oppositeWindow.getMostRecentFocusOwner();}}if (oppositeComp == null) {oppositeComp=oppositeWindow;}sendMessage(currentFocusOwner,new CausedFocusEvent(currentFocusOwner,FocusEvent.FOCUS_LOST,true,oppositeComp,CausedFocusEvent.Cause.ACTIVATION));}setGlobalFocusedWindow(null);if (getGlobalFocusedWindow() != null) {restoreFocus(currentFocusedWindow,null,true);break;}we.setSource(currentFocusedWindow);realOppositeWindowWR=(oppositeWindow != null) ? new WeakReference<Window>(currentFocusedWindow) : NULL_WINDOW_WR;typeAheadAssertions(currentFocusedWindow,we);if (oppositeWindow == null) {sendMessage(activeWindow,new WindowEvent(activeWindow,WindowEvent.WINDOW_DEACTIVATED,null));if (getGlobalActiveWindow() != null) {restoreFocus(currentFocusedWindow,null,true);}}break;}case KeyEvent.KEY_TYPED:case KeyEvent.KEY_PRESSED:case KeyEvent.KEY_RELEASED:return typeAheadAssertions(null,e);default :return false;}return true;}  }
class C{  public ZDT2(int numberOfVariables){  super(numberOfVariables);}  }
class C{  private final void validateSurface(SunGraphics2D sg2d){  XRSurfaceData xrsd;  try {    xrsd=(XRSurfaceData)sg2d.surfaceData;  } catch (  ClassCastException e) {    throw new InvalidPipeException("wrong surface data type: " + sg2d.surfaceData);  }  xrsd.validateAsDestination(sg2d,sg2d.getCompClip());  xrsd.maskBuffer.validateCompositeState(sg2d.composite,sg2d.transform,sg2d.paint,sg2d);}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback,PluginResult.Status status){  if (callbackContext != null) {    PluginResult result=new PluginResult(status,obj);    result.setKeepCallback(keepCallback);    callbackContext.sendPluginResult(result);    if (!keepCallback) {      callbackContext=null;    }  }}  }
class C{  private static int readLen(ByteBuffer buffer){  int len=0;  int i=Buffers.readUByte(buffer);  if ((i & 0x80) != 0) {    len|=(i & 0x7f) << 7;    len+=Buffers.readUByte(buffer);  } else {    len=i;  }  return len;}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public static boolean isSdCardMounted(){  String status=Environment.getExternalStorageState();  if (status.equals(Environment.MEDIA_MOUNTED))   return true;  return false;}  }
class C{  private static void processQueue(ReferenceQueue<Key> queue,ConcurrentHashMap<? extends WeakReference<Key>,?> pdMap){  Reference<? extends Key> ref;  while ((ref=queue.poll()) != null) {    pdMap.remove(ref);  }}  }
class C{  public String cloneVolume(String volumeName,long capacity,String volumeTypeId,String sourceVolId) throws Exception {  return createVolume(volumeName,capacity,volumeTypeId,sourceVolId,null);}  }
class C{  public boolean handleMobileCellScroll(Rect r){  int offset=computeVerticalScrollOffset();  int height=getHeight();  int extent=computeVerticalScrollExtent();  int range=computeVerticalScrollRange();  int hoverViewTop=r.top;  int hoverHeight=r.height();  if (hoverViewTop <= 0 && offset > 0) {    smoothScrollBy(-mSmoothScrollAmountAtEdge,0);    return true;  }  if (hoverViewTop + hoverHeight >= height && (offset + extent) < range) {    smoothScrollBy(mSmoothScrollAmountAtEdge,0);    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.007 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=(id % 2 == 1);  return connection.client == streamIsClient;}  }
class C{  private void createFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public SearchSourceBuilder stats(String... statsGroups){  this.stats=statsGroups;  return this;}  }
class C{  private Volume createRecoverPointVolume(RPRecommendation rpRec,String rpVolumeName,Project project,VirtualPoolCapabilityValuesWrapper capabilities,BlockConsistencyGroup consistencyGroup,VolumeCreate param,URI protectionSystemURI,Volume.PersonalityTypes personalityType,String rsetName,Volume preCreatedVolume,Volume sourceVolume,TaskList taskList,String task,String copyName,List<VolumeDescriptor> descriptors,Volume changeVpoolVolume,boolean isChangeVpool,boolean isSrcAndHaSwapped,boolean productionCopy){  boolean isPreCreatedVolume=(preCreatedVolume != null);  Volume rpVolume=preCreatedVolume;  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,rpRec.getVirtualArray());  VirtualPool vpool=rpRec.getVirtualPool();  String rpInternalSiteName=rpRec.getInternalSiteName();  URI storagePoolUri=rpRec.getSourceStoragePool();  URI storageSystemUri=rpRec.getSourceStorageSystem();  String size=String.valueOf(rpRec.getSize());  if (copyName == null) {    copyName=retrieveRpCopyName(vpool,varray,consistencyGroup,productionCopy);  }  boolean vplex=VirtualPool.vPoolSpecifiesHighAvailability(vpool);  _log.info(String.format("Prepare %s Volume %s %s(%s/%s)%s. It will be placed in CG [%s] and " + "will be protected by RecoverPoint (Protection System: %s) with RP Copy Name [%s] on RP Internal Site [%s] " + "as part of RP Replication Set [%s].",personalityType.toString(),(vplex ? "(VPLEX) -" : "-"),rpVolumeName,varray.getLabel(),vpool.getLabel(),(isChangeVpool ? ". This is an existing volume that is involved in a change virtual pool operation." : ""),consistencyGroup.getLabel(),protectionSystemURI.toString(),copyName,rpInternalSiteName,rsetName));  if (vplex) {    List<Recommendation> vplexRecs=new ArrayList<Recommendation>();    vplexRecs.add(0,rpRec.getVirtualVolumeRecommendation());    if (rpRec.getHaRecommendation() != null) {      vplexRecs.add(1,rpRec.getHaRecommendation().getVirtualVolumeRecommendation());    }    rpVolume=prepareVPlexVolume(vplexRecs,project,varray,vpool,storagePoolUri,storageSystemUri,capabilities,consistencyGroup,param,rpVolumeName,size,descriptors,taskList,task,personalityType,isChangeVpool,changeVpoolVolume);  }  rpVolume=prepareVolume(rpVolume,project,varray,vpool,size,rpRec,rpVolumeName,consistencyGroup,protectionSystemURI,personalityType,rsetName,rpInternalSiteName,copyName,sourceVolume,vplex,changeVpoolVolume,isPreCreatedVolume);  boolean createTask=isTaskRequired(rpVolume,capabilities,vplex,taskList);  if (createTask) {    createTaskForVolume(rpVolume,capabilities,taskList,task);  }  return rpVolume;}  }
class C{  public static float[] pow(float[] a,float c){  float[] result=new float[a.length];  for (int i=0; i < a.length; i++) {    result[i]=(float)Math.pow(a[i],c);  }  return result;}  }
class C{  public HUX(double probability){  super();  this.probability=probability;}  }
class C{  public Builder facing(AbstractCameraActivity.Facing facing){  criteria.facing=facing;  return (this);}  }
class C{  public void printExpr(JCTree tree,int prec) throws IOException {  int prevPrec=this.prec;  try {    this.prec=prec;    if (tree == null)     print("/*missing*/"); else {      consumeComments(tree.pos,tree);      tree.accept(this);      int endPos=endPos(tree);      consumeTrailingComments(endPos);    }  } catch (  UncheckedIOException ex) {    IOException e=new IOException(ex.getMessage());    e.initCause(ex);    throw e;  } finally {    this.prec=prevPrec;  }}  }
class C{  public void changeSelectionByOffset(int offset,boolean extend){  offset=Math.max(0,offset);  offset=Math.min(offset,model.getByteCount() - 1);  int row=offset / 16;  int col=offset % 16;  changeSelection(row,col,false,extend);}  }
class C{  public CharSetMap(File file) throws IOException {  this();  mappers[MAP_PROG]=loadFile(file);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  @Uninterruptible private void replaceJNIRefs(AddressArray newrefs){  for (int i=0; i < JNIRefs.length(); i++) {    newrefs.set(i,JNIRefs.get(i));  }  JNIRefs=JNIRefsShadow=newrefs;}  }
class C{  @Uninterruptible private void publishResolved(TIB allocatedTib,short[] superclassIds,int[] doesImplement){  Statics.setSlotContents(getTibOffset(),allocatedTib);  allocatedTib.setType(this);  allocatedTib.setSuperclassIds(superclassIds);  allocatedTib.setDoesImplement(doesImplement);  typeInformationBlock=allocatedTib;  state=CLASS_RESOLVED;}  }
class C{  protected FtpClient(){}  }
class C{  @Override public boolean csConsistNeedsSeperateAddress(){  return false;}  }
class C{  public JSONException(final String message){  super(message);}  }
class C{  int parseInt(String string) throws NumberFormatException {  char c;  if (string != null && string.length() > 0 && ((string.charAt(0) == (c='x')) || c == 'X')) {    return Integer.parseInt(string.substring(1),16);  } else {    try {      return Integer.parseInt(string);    } catch (    NumberFormatException e) {      try {        double d=Double.parseDouble(string);        if (d == (int)d)         return (int)d; else         throw e;      } catch (      NumberFormatException e2) {        throw e;      }    }  }}  }
class C{  public List<NamedRelatedResourceRep> listByVDC(String shortVdcId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.VDC_ID_PARAM,shortVdcId);  VirtualArrayList response=client.getURI(VirtualArrayList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualArrays());}  }
class C{  public int[][] cleanOffsetOfDestFromSources(int[][] sourcesOffsets){  int[][] cleaned=new int[numSources][2];  int countOfSources=0;  for (int index=0; index < sourcesOffsets.length; index++) {    if ((sourcesOffsets[index][0] != 0) || (sourcesOffsets[index][1] != 0)) {      if (countOfSources == numSources) {        countOfSources++;        break;      }      cleaned[countOfSources][ROW_INDEX]=sourcesOffsets[index][ROW_INDEX];      cleaned[countOfSources][COLUMN_INDEX]=sourcesOffsets[index][COLUMN_INDEX];      countOfSources++;    }  }  if (countOfSources < numSources) {    throw new RuntimeException("Too few sources in offsets");  } else   if (countOfSources > numSources) {    throw new RuntimeException("Too many sources in offsets");  }  return cleaned;}  }
class C{  public static long skip(final InputStream inputStream,final long bytesCount) throws IOException {  Preconditions.checkNotNull(inputStream);  Preconditions.checkArgument(bytesCount >= 0);  long toSkip=bytesCount;  while (toSkip > 0) {    final long skipped=inputStream.skip(toSkip);    if (skipped > 0) {      toSkip-=skipped;      continue;    }    if (inputStream.read() != -1) {      toSkip--;      continue;    }    return bytesCount - toSkip;  }  return bytesCount;}  }
class C{  private void checkNotification(){  if (null != mNotificationRoomId) {    boolean clearNotification=true;    MXSession session=Matrix.getInstance(this).getSession(mNotificationSessionId);    if (null != session) {      Room room=session.getDataHandler().getRoom(mNotificationRoomId);      if (null != room) {        Log.d(LOG_TAG,"checkNotification :  the room exists");        if (null == mNotificationEventId) {          Log.d(LOG_TAG,"checkNotification :  room invitation case");          clearNotification=!room.isInvited();        } else {          Log.d(LOG_TAG,"checkNotification :  event case");          clearNotification=room.isEventRead(mNotificationEventId);        }        Log.d(LOG_TAG,"checkNotification :  clearNotification " + clearNotification);      } else {        Log.d(LOG_TAG,"checkNotification :  the room does not exist");      }    }    if (clearNotification) {      clearNotification();    }  }}  }
class C{  public NameService createNameService() throws Exception {  return new SimpleNameService();}  }
class C{  public static boolean transientLastDdlTimesMatch(String expectedTldt,Partition partition){  return StringUtils.equals(expectedTldt,partition.getParameters().get(HiveParameterKeys.TLDT));}  }
class C{  private static String unwrapArgumentCode(Type type,String name){  int typeCode=type.getTypeCode();switch (typeCode) {case TC_BOOLEAN:    return "((java.lang.Boolean) " + name + ").booleanValue()";case TC_BYTE:  return "((java.lang.Byte) " + name + ").byteValue()";case TC_CHAR:return "((java.lang.Character) " + name + ").charValue()";case TC_SHORT:return "((java.lang.Short) " + name + ").shortValue()";case TC_INT:return "((java.lang.Integer) " + name + ").intValue()";case TC_LONG:return "((java.lang.Long) " + name + ").longValue()";case TC_FLOAT:return "((java.lang.Float) " + name + ").floatValue()";case TC_DOUBLE:return "((java.lang.Double) " + name + ").doubleValue()";case TC_ARRAY:case TC_CLASS:return "((" + type + ") "+ name+ ")";default :throw new Error("unexpected type code: " + typeCode);}}  }
class C{  public TemplateCollectionModel values() throws TemplateModelException {  try {    PyObject method=object.__findattr__(VALUES);    if (method != null) {      return (TemplateCollectionModel)wrapper.wrap(method.__call__());    }  } catch (  PyException e) {    throw new TemplateModelException(e);  }  throw new TemplateModelException("'?values' is not supported as there is no 'values' attribute on an instance of " + JythonVersionAdapterHolder.INSTANCE.getPythonClassName(object));}  }
class C{  public void terminateOngoingHandshake(){  cancelPendingFlight();  setOngoingHandshake(null);}  }
class C{  protected boolean doMousePressed(MouseEvent event,Positionable selection){  if (_editCircuitFrame != null) {    _editCircuitFrame.toFront();    _editor.setSelectionGroup(_saveSelectionGroup);  } else   if (_editPathsFrame != null) {    _editPathsFrame.toFront();    _editor.setSelectionGroup(_saveSelectionGroup);  } else   if (_editPortalFrame != null) {    _editPortalFrame.toFront();    _editor.setSelectionGroup(_saveSelectionGroup);  } else   if (_editDirectionFrame != null) {    _editDirectionFrame.toFront();    _editor.setSelectionGroup(_saveSelectionGroup);  } else {    return false;  }  return true;}  }
class C{  public static PeriodType dayTime(){  PeriodType type=cDTime;  if (type == null) {    type=new PeriodType("DayTime",new DurationFieldType[]{DurationFieldType.days(),DurationFieldType.hours(),DurationFieldType.minutes(),DurationFieldType.seconds(),DurationFieldType.millis()},new int[]{-1,-1,-1,0,1,2,3,4});    cDTime=type;  }  return type;}  }
class C{  @Override public String globalInfo(){  return "Draws M subsets of size k from the set of labels, and trains PS upon each one, then combines label votes from the PS classifiers to get a label-vector prediction.";}  }
class C{  public boolean isSatisfiedBy(Date date){  Calendar testDateCal=Calendar.getInstance(getTimeZone());  testDateCal.setTime(date);  testDateCal.set(Calendar.MILLISECOND,0);  Date originalDate=testDateCal.getTime();  testDateCal.add(Calendar.SECOND,-1);  Date timeAfter=getTimeAfter(testDateCal.getTime());  return ((timeAfter != null) && (timeAfter.equals(originalDate)));}  }
class C{  public boolean isForAllDistribution(){  Object oo=get_Value(COLUMNNAME_IsForAllDistribution);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void validateBusinessObjectDataKey(BusinessObjectDataKey key,boolean businessObjectFormatVersionRequired,boolean businessObjectDataVersionRequired) throws IllegalArgumentException {  Assert.notNull(key,"A business object data key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));  key.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",key.getBusinessObjectFormatUsage()));  key.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",key.getBusinessObjectFormatFileType()));  if (businessObjectFormatVersionRequired) {    Assert.notNull(key.getBusinessObjectFormatVersion(),"A business object format version must be specified.");  }  key.setPartitionValue(alternateKeyHelper.validateStringParameter("partition value",key.getPartitionValue()));  validateSubPartitionValues(key.getSubPartitionValues());  if (businessObjectDataVersionRequired) {    Assert.notNull(key.getBusinessObjectDataVersion(),"A business object data version must be specified.");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  boolean flag;  int row, col, rN, cN, r, c, count;  double xCoord, yCoord;  int progress;  int i, a;  boolean patternMatch;  double value, z, zN;  int[] neighbours=new int[8];  int FID=0;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] inputValueData=new double[4];  long numPoints;  int minLineLength=2;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3},{0,1,2,3,4,5,6,7},{0,1,2,3,4,5,6,7}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0}};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  minLineLength=Integer.parseInt(args[2]);  if (minLineLength < 2) {    minLineLength=2;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double rowsD=(double)rows;    double colsD=(double)cols;    double noData=input.getNoDataValue();    double gridResX=input.getCellSizeX();    double gridResY=input.getCellSizeY();    double east=input.getEast() - gridResX / 2.0;    double west=input.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=input.getNorth() - gridResY / 2.0;    double south=input.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=inputFile.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",inputFile,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input.getValue(row,col);        if (z > 0 && z != noData) {          for (i=0; i < 8; i++) {            z=input.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=8; a < elements.length; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 1 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          for (i=0; i < 8; i++) {            z=temp1.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=0; a < 8; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 2 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z > 0 && z != noData) {          count=0;          for (i=0; i < 8; i++) {            rN=row + dY[i];            cN=col + dX[i];            zN=temp1.getValue(rN,cN);            if (zN > 0 && zN != noData) {              count++;            }          }          temp1.setValue(row,col,count);        } else {          temp1.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 3 of 4:",progress);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(2);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    boolean pointAdded=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          PointsList points=new PointsList();          value=1;          r=row;          c=col;          flag=true;          previousTraceDirection=-1;          traceDirection=0;          do {            xCoord=west + (c / colsD) * EWRange;            yCoord=north - (r / rowsD) * NSRange;            pointAdded=false;            if (traceDirection != previousTraceDirection) {              points.addPoint(xCoord,yCoord);              previousTraceDirection=traceDirection;              pointAdded=true;            }            temp1.setValue(r,c,0);            traceDirection=-1;            value=-1;            for (i=0; i < 8; i++) {              rN=r + dY[i];              cN=c + dX[i];              zN=temp1.getValue(rN,cN);              if (zN > 0 && zN != noData) {                traceDirection=i;                value=zN;                break;              }            }            if (value == 2) {              r+=dY[traceDirection];              c+=dX[traceDirection];            } else             if (value >= 0) {              r+=dY[traceDirection];              c+=dX[traceDirection];              if (!pointAdded) {                xCoord=west + (c / colsD) * EWRange;                yCoord=north - (r / rowsD) * NSRange;                points.addPoint(xCoord,yCoord);              }              if (value == 1) {                temp1.setValue(r,c,0);              } else {                temp1.setValue(r,c,value - 1);              }              flag=false;            } else {              flag=false;            }          } while (flag);          if (points.size() >= minLineLength) {            PolyLine poly=new PolyLine(parts,points.getPointsArray());            output.addRecord(poly);            Object[] rowData=new Object[2];            rowData[0]=new Double(FID);            rowData[1]=new Double(z);            writer.addRecord(rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 4 of 4:",progress);    }    temp1.close();    input.close();    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_ConversionType_ID"))     p_C_ConversionType_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("StatementDate"))     p_StatementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("IsSOTrx") && para[i].getParameter() != null)     p_IsSOTrx=(String)para[i].getParameter(); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("ListSources"))     p_ListSources="Y".equals(para[i].getParameter()); else     if (name.equals("IsIncludePayments"))     p_IncludePayments="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  final MAcctSchema as=MAcctSchema.get(getCtx(),p_C_AcctSchema_ID);  as_C_Currency_ID=as.getC_Currency_ID();  if (p_StatementDate == null)   p_StatementDate=new Timestamp(System.currentTimeMillis()); else   m_statementOffset=TimeUtil.getDaysBetween(new Timestamp(System.currentTimeMillis()),p_StatementDate);}  }
class C{  @Override public String toString(){  return "created on " + dateCreated + "\ncolor: "+ color+ " and filled: "+ filled;}  }
class C{  private int readChar(ByteArrayInputStream input){  int ch;  if (buffer.size() > 0) {    ch=(buffer.elementAt(0)).intValue();    buffer.removeElementAt(0);  } else {    ch=input.read();  }  return ch;}  }
class C{  public static SemEstimator serializableInstance(){  return new SemEstimator(CovarianceMatrix.serializableInstance(),SemPm.serializableInstance());}  }
class C{  Operand pop(TypeReference type){  Operand r=pop();  if (VM.VerifyAssertions) {    if ((type == TypeReference.JavaLangObject) && (r.getType().isMagicType()) && !gc.getMethod().getDeclaringClass().getTypeRef().isMagicType()) {      throw new OptimizingCompilerException.IllegalUpcast(r.getType());    }  }  if (type.isLongType() || type.isDoubleType()) {    popDummy();  }  return r;}  }
class C{  protected void showMsgShort(String msg){  showMsg(msg,Snackbar.LENGTH_SHORT);}  }
class C{  @Override public Object executeFunction(){  ReferenceConstant symb_str_buffer=this.getSymbReceiver();  ReferenceConstant symb_string=(ReferenceConstant)this.getSymbArgument(0);  String conc_string=(String)this.getConcArgument(0);  StringValue string_value=this.env.heap.getField(Types.JAVA_LANG_STRING,SymbolicHeap.$STRING_VALUE,conc_string,symb_string,conc_string);  this.env.heap.putField(Types.JAVA_LANG_STRING_BUFFER,SymbolicHeap.$STRING_BUFFER_CONTENTS,null,symb_str_buffer,string_value);  return null;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static Optional<CaptureSupportLevel> fromFlag(int flag){switch (flag) {case 1:    return Optional.of(ZSL);case 2:  return Optional.of(LEGACY_JPEG);case 3:return Optional.of(LIMITED_JPEG);case 4:return Optional.of(LIMITED_YUV);default :return Optional.absent();}}  }
class C{  public synchronized void close(boolean sendEvent) throws Exception {  if (sendEvent && storageManager != null) {    storageManager.pageClosed(storeName,pageId);  }  if (pageCache != null) {    pageCache.close();    pageCache=null;  }  file.close();  Set<PageSubscriptionCounter> counters=getPendingCounters();  if (counters != null) {    for (    PageSubscriptionCounter counter : counters) {      counter.cleanupNonTXCounters(this.getPageId());    }  }}  }
class C{  public int hashCode(){  int hash=37;  hash+=37 * hash + Float.floatToIntBits(x);  hash+=37 * hash + Float.floatToIntBits(y);  return hash;}  }
class C{  private SyncState(){}  }
class C{  boolean isRunning(){  return mThread != null && mThread.isAlive();}  }
class C{  public void addBlock(byte[] block){  blocks.add(block);}  }
class C{  @Transactional public void insert(Map<Step,List<StepInstance>> stepToStepInstances){  if (stepToStepInstances == null) {    return;  }  final Set<StepInstance> stepInstances=new HashSet<StepInstance>();  for (  Step step : stepToStepInstances.keySet()) {    stepInstances.addAll(stepToStepInstances.get(step));  }  this.insert(stepInstances);}  }
class C{  public BSPJob train(HamaConfiguration conf,Path dataInputPath,Map<String,String> trainingParams) throws ClassNotFoundException, IOException, InterruptedException {  return model.train(conf);}  }
class C{  public void postCommentPerIssue(String project,String repository,String pullRequestId,String sonarQubeURL,SonarQubeIssuesReport issueReport,StashDiffReport diffReport,StashClient stashClient){  try {    Map<String,StashCommentReport> commentsByFile=new HashMap<>();    for (    SonarQubeIssue issue : issueReport.getIssues()) {      if (commentsByFile.get(issue.getPath()) == null) {        StashCommentReport comments=stashClient.getPullRequestComments(project,repository,pullRequestId,issue.getPath());        comments.applyDiffReport(diffReport);        commentsByFile.put(issue.getPath(),comments);      }    }    List<String> taskSeverities=getReportedSeverities();    for (    SonarQubeIssue issue : issueReport.getIssues()) {      StashCommentReport comments=commentsByFile.get(issue.getPath());      if ((comments != null) && (comments.contains(MarkdownPrinter.printIssueMarkdown(issue,sonarQubeURL),issue.getPath(),issue.getLine()))) {        LOGGER.debug("Comment \"{}\" already pushed on file {} ({})",issue.getRule(),issue.getPath(),issue.getLine());        continue;      }      String type=diffReport.getType(issue.getPath(),issue.getLine());      if (type == null) {        LOGGER.info("Comment \"{}\" cannot be pushed to Stash like it does not belong to diff view - {} (line: {})",issue.getRule(),issue.getPath(),issue.getLine());        continue;      }      long line=diffReport.getLine(issue.getPath(),issue.getLine());      StashComment comment=stashClient.postCommentLineOnPullRequest(project,repository,pullRequestId,MarkdownPrinter.printIssueMarkdown(issue,sonarQubeURL),issue.getPath(),line,type);      LOGGER.debug("Comment \"{}\" has been created ({}) on file {} ({})",issue.getRule(),type,issue.getPath(),line);      if (taskSeverities.contains(issue.getSeverity())) {        stashClient.postTaskOnComment(issue.getMessage(),comment.getId());        LOGGER.debug("Comment \"{}\" has been linked to a Stash task",comment.getId());      }    }    LOGGER.info("New SonarQube issues have been reported to Stash.");  } catch (  StashClientException e) {    LOGGER.error("Unable to link SonarQube issues to Stash",e);  }}  }
class C{  protected boolean[] updatingEquality(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance){  print("incremental training produces the same results" + " as batch training");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  int numTrain=getNumInstances(), missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Clusterer[] clusterers=null;  ClusterEvaluation evaluationB=null;  ClusterEvaluation evaluationI=null;  boolean built=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    clusterers=AbstractClusterer.makeCopies(getClusterer(),2);    evaluationB=new ClusterEvaluation();    evaluationI=new ClusterEvaluation();    clusterers[0].buildClusterer(train);    evaluationB.setClusterer(clusterers[0]);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    clusterers[1].buildClusterer(new Instances(train,0));    for (int i=0; i < train.numInstances(); i++) {      ((UpdateableClusterer)clusterers[1]).updateClusterer(train.instance(i));    }    built=true;    evaluationI.setClusterer(clusterers[1]);    if (!evaluationB.equals(evaluationI)) {      println("no");      result[0]=false;      if (m_Debug) {        println("\n=== Full Report ===");        println("Results differ between batch and " + "incrementally built models.\n" + "Depending on the classifier, this may be OK");        println("Here are the results:\n");        println("\nbatch built results\n" + evaluationB.clusterResultsToString());        println("\nincrementally built results\n" + evaluationI.clusterResultsToString());        println("Here are the datasets:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");      }    } else {      println("yes");      result[0]=true;    }  } catch (  Exception ex) {    result[0]=false;    print("Problem during");    if (built) {      print(" testing");    } else {      print(" training");    }    println(": " + ex.getMessage() + "\n");  }  return result;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (serialVersionOnStream < 1) {    if (startDayOfWeek == 0) {      startDayOfWeek=Calendar.SUNDAY;    }    if (endDayOfWeek == 0) {      endDayOfWeek=Calendar.SUNDAY;    }    startMode=endMode=DOW_IN_MONTH_MODE;    dstSavings=millisPerHour;  } else {    int length=stream.readInt();    byte[] rules=new byte[length];    stream.readFully(rules);    unpackRules(rules);  }  if (serialVersionOnStream >= 2) {    int[] times=(int[])stream.readObject();    unpackTimes(times);  }  serialVersionOnStream=currentSerialVersion;}  }
class C{  public void drawRangeTickBands(Graphics2D g2,Rectangle2D dataArea,List ticks){  Paint bandPaint=getRangeTickBandPaint();  if (bandPaint != null) {    boolean fillBand=false;    ValueAxis axis=getRangeAxis();    double previous=axis.getLowerBound();    Iterator iterator=ticks.iterator();    while (iterator.hasNext()) {      ValueTick tick=(ValueTick)iterator.next();      double current=tick.getValue();      if (fillBand) {        getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,current);      }      previous=current;      fillBand=!fillBand;    }    double end=axis.getUpperBound();    if (fillBand) {      getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,end);    }  }}  }
class C{  public void onCancel(Interaction iact){}  }
class C{  @Override public int weight(){  return terms.size() * 2;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStateInternal_();}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  if (getNumNodes() <= 0) {    return null;  }  if (curSerialNodeIndex >= getNumNodes()) {    curSerialNodeIndex=0;    mInputBits.makeChanges();    mNeedSend=true;    mStartBitNumber=1;  }  if (mNeedSend) {    int endBitNumber=mStartBitNumber + 98;    if (endBitNumber > OutputBits.getNumOutputBits()) {      endBitNumber=OutputBits.getNumOutputBits();      mNeedSend=false;    }    if (endBitNumber == OutputBits.getNumOutputBits()) {      mNeedSend=false;    }    SerialMessage m=mOutputBits.createOutPacket(mStartBitNumber,endBitNumber);    mCurrentNodeIndexInPoll=-1;    if (mNeedSend) {      mStartBitNumber=endBitNumber + 1;    }    return m;  }  int count=99;  if (count > (InputBits.getNumInputBits() - mStartPollAddress + 1)) {    count=InputBits.getNumInputBits() - mStartPollAddress + 1;  }  SerialMessage m=SerialMessage.getPoll(getNode(curSerialNodeIndex).getNodeAddress(),mStartPollAddress,count);  mSavedPollAddress=mStartPollAddress;  mCurrentNodeIndexInPoll=curSerialNodeIndex;  if ((mStartPollAddress + count - 1) < InputBits.getNumInputBits()) {    mNeedAdditionalPollPacket=true;    mStartPollAddress=mStartPollAddress + 99;  } else {    mNeedAdditionalPollPacket=false;    mStartPollAddress=1;    curSerialNodeIndex++;  }  return m;}  }
class C{  private Boolean isExpanded(){  return getSkinnable().getItem() != null && expander.getCellData(getSkinnable().getIndex());}  }
class C{  public void sort(){  Collections.sort(testCases);}  }
class C{  public void sortWindowInfos(List<WindowInfo> windowInfoCollection){  Collections.sort(windowInfoCollection,null);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void initUpdate(ActionListener doneAction,HashMap<String,HashMap<String,NamedIcon>> iconMaps){  _iconGroupsMap=iconMaps;  checkCurrentMaps(iconMaps);  super.init(doneAction,null);  _bottom1Panel.remove(_editIconsButton);  _detectPanel=new DetectionPanel(this);  add(_detectPanel,1);  add(_iconFamilyPanel,2);  _buttonPosition=2;}  }
class C{  public UnitsFormat(String lengthUnits,String areaUnits,boolean showDMS){  if (lengthUnits == null) {    String msg=Logging.getMessage("nullValue.LengthUnit");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (areaUnits == null) {    String msg=Logging.getMessage("nullValue.AreaUnit");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.setDefaultLabels();  this.setDefaultFormats();  this.setLengthUnits(lengthUnits);  this.setAltitudeUnits(lengthUnits);  this.setAreaUnits(areaUnits);  this.setShowDMS(showDMS);}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  public CardException(String message){  super(message);}  }
class C{  public BuildInfo clone(){  BuildInfo result=new BuildInfo();  result.ProductUri=ProductUri;  result.ManufacturerName=ManufacturerName;  result.ProductName=ProductName;  result.SoftwareVersion=SoftwareVersion;  result.BuildNumber=BuildNumber;  result.BuildDate=BuildDate;  return result;}  }
class C{  @Override public boolean isInSameBroadcastDomain(DatapathId s1,OFPort p1,DatapathId s2,OFPort p2){  return isInSameBroadcastDomain(s1,p1,s2,p2,true);}  }
class C{  public Builder addMatch0Method(Match0MethodSpec match0MethodSpec){  match0Methods.addAll(new Match0MethodPermutationBuilder(matchType,match0MethodSpec).build());  return this;}  }
class C{  public void assignTunerConfiguration(TunerConfiguration configToAssign){  if (configToAssign != null) {    List<TunerConfiguration> configs=getTunerConfigurations(configToAssign.getTunerType(),configToAssign.getUniqueID());    for (    TunerConfiguration config : configs) {      if (config.isAssigned()) {        config.setAssigned(false);        int index=mTunerConfigurations.indexOf(config);        fireTableCellUpdated(index,ASSIGNED);        broadcast(new TunerConfigurationEvent(config,Event.CHANGE));      }    }    configToAssign.setAssigned(true);    int index=mTunerConfigurations.indexOf(configToAssign);    fireTableCellUpdated(index,ASSIGNED);    broadcast(new TunerConfigurationEvent(configToAssign,Event.CHANGE));  }}  }
class C{  protected String splitLines(String origText){  StringBuilder newText=new StringBuilder();  String[] lines=Util.splitLines(origText);  for (  String line : lines) {    newText.append(line.length() <= this.maxLineLength ? line : this.splitLine(line)).append("\n");  }  return newText.toString();}  }
class C{  private List<SnappedPoint> snapToRoads(GeoApiContext context) throws Exception {  List<SnappedPoint> snappedPoints=new ArrayList<>();  int offset=0;  while (offset < mCapturedLocations.size()) {    if (offset > 0) {      offset-=PAGINATION_OVERLAP;    }    int lowerBound=offset;    int upperBound=Math.min(offset + PAGE_SIZE_LIMIT,mCapturedLocations.size());    LatLng[] page=mCapturedLocations.subList(lowerBound,upperBound).toArray(new LatLng[upperBound - lowerBound]);    SnappedPoint[] points=RoadsApi.snapToRoads(context,true,page).await();    boolean passedOverlap=false;    for (    SnappedPoint point : points) {      if (offset == 0 || point.originalIndex >= PAGINATION_OVERLAP) {        passedOverlap=true;      }      if (passedOverlap) {        snappedPoints.add(point);      }    }    offset=upperBound;  }  return snappedPoints;}  }
class C{  public static JPopupButton createSelectionColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes,Shape colorShape){  return createSelectionColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,defaultAttributes,colorShape,new LinkedList<Disposable>());}  }
class C{  public static void AddLabelsToStmtSeq(Vector stmtseq) throws ParseAlgorithmException {  InnerAddLabels(stmtseq,true,false,new Vector(),new Vector());  return;}  }
class C{  @Override public Variable emitIntegerTestMove(Value left,Value right,Value trueValue,Value falseValue){  assert ((AArch64Kind)left.getPlatformKind()).isInteger() && ((AArch64Kind)right.getPlatformKind()).isInteger();  assert ((AArch64Kind)trueValue.getPlatformKind()).isInteger() && ((AArch64Kind)falseValue.getPlatformKind()).isInteger();  ((AArch64ArithmeticLIRGenerator)getArithmetic()).emitBinary(trueValue.getValueKind(),AArch64ArithmeticOp.ANDS,true,left,right);  Variable result=newVariable(trueValue.getValueKind());  append(new CondMoveOp(result,ConditionFlag.EQ,load(trueValue),load(falseValue)));  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void checkNext(String s,TextAttributeSet attrs){  Pair<String,TextAttributeSet> p=data.poll();  assertNotNull(p);  boolean combined=false;  do {    combined=false;    Pair<String,TextAttributeSet> p2=data.peek();    if ((p2 != null) && p2.second().contents().equals(p.second().contents())) {      p=new Pair<String,TextAttributeSet>(p.first() + p2.first(),p.second());      data.remove();      combined=true;    }  } while (combined);  assertEquals("String element differs from expected",s,p.first());  for (  Entry<TextAttribute,Object> e : attrs.contents().entrySet()) {    Object value=p.second().contents().get(e.getKey());    assertNotNull("Missing attribute " + e.getKey(),value);    assertEquals(e.getValue(),value);  }  for (  Entry<TextAttribute,Object> e : p.second().contents().entrySet()) {    assertTrue("Unwanted key " + e.getKey() + " with value "+ e.getValue(),attrs.contents().containsKey(e.getKey()));  }}  }
class C{  public double exponentLengthToJava2D(double length,Rectangle2D area,RectangleEdge edge){  double one=valueToJava2D(calculateValueNoINF(1.0),area,edge);  double l=valueToJava2D(calculateValueNoINF(length + 1.0),area,edge);  return Math.abs(l - one);}  }
class C{  public void destroyVideoEditor(VideoEditor videoEditor){  if (videoEditor != null) {    try {      videoEditor.release();    } catch (    Exception e) {      fail("Unable to destory Video Editor");    }  }}  }
class C{  public static double sinh(double x){  boolean negate=false;  if (x != x) {    return x;  }  if (x > 20) {    if (x >= LOG_MAX_VALUE) {      final double t=exp(0.5 * x);      return (0.5 * t) * t;    } else {      return 0.5 * exp(x);    }  } else   if (x < -20) {    if (x <= -LOG_MAX_VALUE) {      final double t=exp(-0.5 * x);      return (-0.5 * t) * t;    } else {      return -0.5 * exp(-x);    }  }  if (x == 0) {    return x;  }  if (x < 0.0) {    x=-x;    negate=true;  }  double result;  if (x > 0.25) {    double hiPrec[]=new double[2];    exp(x,0.0,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double temp=ya * HEX_40000000;    double yaa=ya + temp - temp;    double yab=ya - yaa;    double recip=1.0 / ya;    temp=recip * HEX_40000000;    double recipa=recip + temp - temp;    double recipb=recip - recipa;    recipb+=(1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;    recipb+=-yb * recip * recip;    recipa=-recipa;    recipb=-recipb;    temp=ya + recipa;    yb+=-(temp - ya - recipa);    ya=temp;    temp=ya + recipb;    yb+=-(temp - ya - recipb);    ya=temp;    result=ya + yb;    result*=0.5;  } else {    double hiPrec[]=new double[2];    expm1(x,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double denom=1.0 + ya;    double denomr=1.0 / denom;    double denomb=-(denom - 1.0 - ya) + yb;    double ratio=ya * denomr;    double temp=ratio * HEX_40000000;    double ra=ratio + temp - temp;    double rb=ratio - ra;    temp=denom * HEX_40000000;    double za=denom + temp - temp;    double zb=denom - za;    rb+=(ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;    rb+=yb * denomr;    rb+=-ya * denomb * denomr* denomr;    temp=ya + ra;    yb+=-(temp - ya - ra);    ya=temp;    temp=ya + rb;    yb+=-(temp - ya - rb);    ya=temp;    result=ya + yb;    result*=0.5;  }  if (negate) {    result=-result;  }  return result;}  }
class C{  public RenameTypeProcessor(IType type){  fType=type;  if (type != null)   setNewElementName(type.getElementName());  fUpdateReferences=true;  fUpdateTextualMatches=false;  fUpdateSimilarElements=false;  fRenamingStrategy=RenamingNameSuggestor.STRATEGY_EXACT;}  }
class C{  public static long longForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForLong();}  }
class C{  protected final IntConstantOperand CAU16(Address a){  return IC(PPCMaskUpper16(a.toWord().toOffset()));}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[string_index]);  return "\"" + ci.convert() + "\"";}  }
class C{  private static Component findByName(Container root,String componentName){  if (verbose) {    log("findByName(" + root + ", "+ componentName+ ")");  }  int count=root.getComponentCount();  for (int iter=0; iter < count; iter++) {    Component c=root.getComponentAt(iter);    String n=c.getName();    if (n != null && n.equals(componentName)) {      return c;    }    if (c instanceof Container) {      c=findByName((Container)c,componentName);      if (c != null) {        return c;      }    }  }  return null;}  }
class C{  private void sendSelfPatch(State s){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);  sendRequest(patch);}  }
class C{  public void populate(PreparedStatementWrapper psHeader,PreparedStatementWrapper psContent){  loadHeaders(psHeader);  loadContents(psContent);}  }
class C{  public static IndexWriter createIndexWriter(String indexPath,boolean create) throws IOException {  return createIndexWriter(indexPath,create,AnalyzerType.SimpleAnalyzer);}  }
class C{  @VisibleForTesting protected void processContentConflict(final ServerContext context,final ResolveConflictsModel model,final ContentTriplet contentTriplet,final FilePath localPath) throws VcsException {  boolean resolved=true;  if (contentTriplet != null) {    final File localFile=new File(localPath.getPath());    ArgumentHelper.checkIfFile(localFile);    VirtualFile vFile=VcsUtil.getVirtualFileWithRefresh(localFile);    if (vFile != null) {      try {        TfsFileUtil.setReadOnly(vFile,false);        resolved=ConflictsEnvironment.getContentMerger().mergeContent(contentTriplet,project,vFile,null);      } catch (      IOException e) {        throw new VcsException(e);      }    } else {      throw new VcsException(TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_MERGE_LOAD_FAILED,localPath.getPresentableUrl()));    }  }  if (resolved) {    resolveConflictWithProgress(localPath.getPath(),ResolveConflictsCommand.AutoResolveType.KeepYours,context,model,true);  } else {    logger.warn("Conflict merge was aborted by user");  }}  }
class C{  private void validateInitiatorData(Initiator initiator,ExportGroup exportGroup){  validatePortConnectivity(exportGroup,Collections.singletonList(initiator));}  }
class C{  private List<ColouredText> removeOverlaps(List<ColouredText> segments){  List<ColouredText> segments2=new ArrayList<ColouredText>(segments);  Iterator<ColouredText> iterator=segments.iterator();  ColouredText current=(iterator.hasNext()) ? iterator.next() : null;  while (iterator.hasNext()) {    ColouredText next=iterator.next();    if (current.start == next.start) {      ColouredText toRemove=(current.end < next.end) ? current : next;      segments2.remove(toRemove);    } else     if (next.start < current.end) {      current.end=next.start;      if (next.end < current.end) {        segments2.add(new ColouredText(next.end,current.end,current.colour));      }    }    current=next;  }  Collections.sort(segments2);  return segments2;}  }
class C{  public void store(Element root){  Element options=new Element(Xml.OPTIONS);  Element e=new Element(Xml.TRAIN_OPTIONS);  e.setAttribute(Xml.BUILD_MESSAGES,isBuildMessagesEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.BUILD_REPORT,isBuildReportEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.PRINT_PREVIEW,isPrintPreviewEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.OPEN_FILE,isOpenFileEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.RUN_FILE,isRunFileEnabled() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.TRAIN_ACTION,getTrainsFrameTrainAction());  options.addContent(e);  e=new Element(Xml.ROW_COLOR_OPTIONS);  e.setAttribute(Xml.ROW_COLOR_MANUAL,isRowColorManual() ? Xml.TRUE : Xml.FALSE);  e.setAttribute(Xml.ROW_COLOR_BUILD_FAILED,getRowColorNameForBuildFailed());  e.setAttribute(Xml.ROW_COLOR_BUILT,getRowColorNameForBuilt());  e.setAttribute(Xml.ROW_COLOR_TRAIN_EN_ROUTE,getRowColorNameForTrainEnRoute());  e.setAttribute(Xml.ROW_COLOR_TERMINATED,getRowColorNameForTerminated());  options.addContent(e);  e=new Element(Xml.TRAIN_SCHEDULE_OPTIONS);  e.setAttribute(Xml.ACTIVE_ID,getTrainScheduleActiveId());  options.addContent(e);  if (getStartUpScripts().size() > 0 || getShutDownScripts().size() > 0) {    Element es=new Element(Xml.SCRIPTS);    for (    String scriptName : getStartUpScripts()) {      Element em=new Element(Xml.START_UP);      em.setAttribute(Xml.NAME,scriptName);      es.addContent(em);    }    for (    String scriptName : getShutDownScripts()) {      Element et=new Element(Xml.SHUT_DOWN);      et.setAttribute(Xml.NAME,scriptName);      es.addContent(et);    }    options.addContent(es);  }  TrainCustomManifest.instance().store(options);  TrainCustomSwitchList.instance().store(options);  root.addContent(options);  Element trains=new Element(Xml.TRAINS);  root.addContent(trains);  for (  Train train : getTrainsByIdList()) {    trains.addContent(train.store());  }}  }
class C{  @Inject(method="onUpdate",at=@At(value="FIELD",target=RTR_CTOR_ENTITY,ordinal=2,shift=At.Shift.AFTER),locals=LocalCapture.CAPTURE_FAILHARD,cancellable=true,require=0) private void onArrowImpact(CallbackInfo ci,BlockPos pos,IBlockState state,Block block,Vec3d vecA,Vec3d vecB,RayTraceResult hitResult,Entity entity){  this.arrowImpact(ci,hitResult);}  }
class C{  @SafeVarargs public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  private static Object modifyCimObjectPathProperties(Map<String,Object> keyMap,CIMObjectPath cimObjectPath,String delimiter,String searchRegex,String replaceWith){  CIMObjectPath result=cimObjectPath;  boolean isModified=false;  CIMProperty<?>[] properties=cimObjectPath.getKeys();  CIMProperty<?>[] changedProperties=new CIMProperty<?>[properties.length];  for (int index=0; index < properties.length; index++) {    CIMProperty property=properties[index];    Object value=cimObjectPath.getKeyValue(property.getName());    if (value instanceof String) {      String string=(String)value;      changedProperties[index]=property;      if (string.contains(delimiter)) {        String modified=string.replaceAll(searchRegex,replaceWith);        CIMProperty changed=new CIMProperty<>(property.getName(),CIMDataType.STRING_T,modified,true,false,null);        changedProperties[index]=changed;        isModified=true;        if (keyMap != null) {          keyMap.put(Constants.USING_SMIS80_DELIMITERS,Boolean.TRUE);        }      }    }  }  if (isModified) {    result=CimObjectPathCreator.createInstance(cimObjectPath.getObjectName(),cimObjectPath.getNamespace(),changedProperties);  }  return result;}  }
class C{  public int size(){  return key.size();}  }
class C{  public MemberName asConstructor(){switch (getReferenceKind()) {case REF_invokeSpecial:    return clone().changeReferenceKind(REF_newInvokeSpecial,REF_invokeSpecial);case REF_newInvokeSpecial:  return this;}throw new IllegalArgumentException(this.toString());}  }
class C{  public boolean deleteLoadName(String load){  if (!_loadList.contains(load)) {    return false;  }  _loadList.remove(load);  log.debug("track ({}) delete car load ({})",getName(),load);  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());  return true;}  }
class C{  private double calculateFitnessForDURange(ExecutionTrace targetTrace,Integer objectId,TestFitnessFunction targetFitness,DefUse targetDU,boolean wantToCoverTargetDU,int duCounterStart,int duCounterEnd,boolean expectNotToBeZero) throws UnexpectedFitnessException {  ExecutionTrace cutTrace=targetTrace.getTraceInDUCounterRange(targetDU,wantToCoverTargetDU,duCounterStart,duCounterEnd);  double fitness=callTestFitnessFunctionForTrace(cutTrace,targetFitness);  if (expectNotToBeZero && fitness == 0.0)   throw new UnexpectedFitnessException();  return fitness;}  }
class C{  public void updatePosition(Coordinate c){  pointMoveTo.setCoordinate(c);  world.agents.setGeometryLocation(location,pointMoveTo);}  }
class C{  @Override public Collection<Handle> createHandles(int detailLevel){  ArrayList<Handle> handles=new ArrayList<Handle>(getNodeCount());switch (detailLevel) {case -1:    handles.add(new BezierOutlineHandle(this,true));  break;case 0:handles.add(new BezierOutlineHandle(this));if (getLiner() == null) {for (int i=1, n=getNodeCount() - 1; i < n; i++) {  handles.add(new BezierNodeHandle(this,i));}}handles.add(new ConnectionStartHandle(this));handles.add(new ConnectionEndHandle(this));break;}return handles;}  }
class C{  public void write(String file,Object o) throws Exception {  toXML(o).write(file);}  }
class C{  public String repository(){  return this.repository;}  }
class C{  @Override public String previous(){  if (hasPrevious()) {    return tokens[--tokenPos];  }  throw new NoSuchElementException();}  }
class C{  @Override protected boolean isFrontierEmpty(){  return frontier.isEmpty();}  }
class C{  public WorldWindowGLJPanel(){  super(Configuration.getRequiredGLCapabilities(),new BasicGLCapabilitiesChooser());  try {    this.wwd=((WorldWindowGLDrawable)WorldWind.createConfigurationComponent(AVKey.WORLD_WINDOW_CLASS_NAME));    this.wwd.initDrawable(this);    this.wwd.addPropertyChangeListener(this);    this.wwd.initGpuResourceCache(WorldWindowImpl.createGpuResourceCache());    this.createView();    this.createDefaultInputHandler();    WorldWind.addPropertyChangeListener(WorldWind.SHUTDOWN_EVENT,this);    this.wwd.endInitialization();  } catch (  Exception e) {    String message=Logging.getMessage("Awt.WorldWindowGLSurface.UnabletoCreateWindow");    Logging.logger().severe(message);    throw new WWRuntimeException(message,e);  }}  }
class C{  public void testIntMissingFunction() throws Exception {  checkSortMissingFunction("intdv","-1","4");}  }
class C{  public void takeHints(Collection<Hint> c,int maxElements) throws InterruptedException {  int count=0;  try {    while (count == 0) {      hintLock.lock();      while (hintQueue.isEmpty()) {        hintsAvailable.await();      }      while (count < maxElements && !hintQueue.isEmpty()) {        HintKey hintKey=hintQueue.pollFirst();        if (hintKey != null) {          List<Versioned<byte[]>> values=hints.remove(hintKey);          if (values == null) {            continue;          }          c.add(new Hint(hintKey,values));          count+=1;        }      }    }  }  finally {    hintLock.unlock();  }}  }
class C{  public synchronized void add(E listener){  if (listener == null) {    throw new IllegalArgumentException();  }  final int oldSize=listeners.length;  for (int i=0; i < oldSize; ++i) {    E listener2=listeners[i];    if (identity ? listener == listener2 : listener.equals(listener2)) {      return;    }  }  E[] newListeners=(E[])new Object[oldSize + 1];  System.arraycopy(listeners,0,newListeners,0,oldSize);  newListeners[oldSize]=listener;  this.listeners=newListeners;}  }
class C{  public SerializerWriteBasicExt(Datas[] classes,int[] index){  m_classes=classes;  m_index=index;}  }
class C{  protected void createTestDataFiles(Path localPath,List<ManifestFile> manifestFiles) throws Exception {  for (  ManifestFile manifestFile : manifestFiles) {    createLocalFile(localPath.toString(),manifestFile.getFileName(),manifestFile.getFileSizeBytes());  }}  }
class C{  final private Response sendClasspathResource(final DeclaredResource decl) throws IOException {  if (decl == null)   throw new IllegalArgumentException();  if (log.isInfoEnabled())   log.info("Serving: " + decl.localResource + " as "+ decl.mimeType);  final Response r=new Response(HTTP_OK,decl.mimeType,decl.getInputStream());  return r;}  }
class C{  public Notification update(NotificationAttributes notificationAttributes){  delete();  attributes=notificationAttributes;  setAlarmAndSaveOrShow();  return this;}  }
class C{  public DownloadRunnable(URL url,File target){  this.url=url;  this.target=target;}  }
class C{  private static JsonElement createTestValueForAny(){  return new JsonParser().parse("{a:100,b:{c:'blah'}}");}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public Table(){  init();}  }
class C{  public static <T>Key<T> of(Class<T> type,Class<? extends Annotation> annType){  Objects.requireNonNull(type);  Objects.requireNonNull(annType);  return new Key<>(type,new Class[]{annType});}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  private void flushCharacters() throws org.xml.sax.SAXException {  XSLTElementProcessor elemProcessor=getCurrentProcessor();  if (null != elemProcessor)   elemProcessor.startNonText(this);}  }
class C{  @Listener(order=Order.POST) public void onChat(MessageChannelEvent.Chat event){  SpongeDiscord mod=SpongeDiscord.getInstance();  GlobalConfig config=mod.getConfig();  Logger logger=mod.getLogger();  if (event.isCancelled() || event.isMessageCancelled())   return;  String plainString=event.getRawMessage().toPlain().trim();  if (StringUtils.isBlank(plainString) || plainString.startsWith("/"))   return;  plainString=TextUtil.formatMinecraftMessage(plainString);  Optional<Player> player=event.getCause().first(Player.class);  if (player.isPresent()) {    UUID playerId=player.get().getUniqueId();    DiscordAPI client=mod.getBotClient();    boolean isDefaultAccount=true;    if (mod.getHumanClients().containsKey(playerId)) {      client=mod.getHumanClients().get(playerId);      isDefaultAccount=false;    }    if (client != null) {      for (      ChannelConfig channelConfig : config.channels) {        if (StringUtils.isNotBlank(channelConfig.discordId) && channelConfig.discord != null) {          Channel channel=client.getChannelById(channelConfig.discordId);          String template=isDefaultAccount ? channelConfig.discord.anonymousChatTemplate : channelConfig.discord.authenticatedChatTemplate;          if (StringUtils.isNotBlank(template)) {            if (isDefaultAccount) {              if (channel == null) {                LoginHandler.loginBotAccount();              }              if (channel != null) {                channel.sendMessage(String.format(template.replace("%a",MessageHandler.formatForDiscord(player.get().getName(),template,"%a")),plainString),false);              } else {                logger.warn("Cannot re-login default account!");              }            } else {              if (channel == null) {                LoginHandler.loginHumanAccount(player.get());              }              if (channel != null) {                channel.sendMessage(String.format(template,plainString),false);              } else {                logger.warn("Cannot re-login user account!");              }            }          }        }      }    }  }}  }
class C{  public boolean isVelocimacro(String vm,String sourceTemplate){synchronized (this) {    if (vmManager.get(vm,sourceTemplate) != null)     return true;  }  return false;}  }
class C{  public void test_rotate2(){  List list=new ArrayList();  try {    Collections.rotate(list,5);  } catch (  UnsupportedOperationException e) {    fail("Unexpected UnsupportedOperationException for empty list, " + e);  }  list.add(0,"zero");  list.add(1,"one");  list.add(2,"two");  list.add(3,"three");  list.add(4,"four");  Collections.rotate(list,Integer.MIN_VALUE);  assertEquals("Rotated incorrectly at position 0, ","three",(String)list.get(0));  assertEquals("Rotated incorrectly at position 1, ","four",(String)list.get(1));  assertEquals("Rotated incorrectly at position 2, ","zero",(String)list.get(2));  assertEquals("Rotated incorrectly at position 3, ","one",(String)list.get(3));  assertEquals("Rotated incorrectly at position 4, ","two",(String)list.get(4));}  }
class C{  public Object evaluate(List elements){  return _evaluate(elements);}  }
class C{  public jmri.Memory validateMemory(String memName,Component openFrame){  if (memName == null || memName.length() < 1) {    return null;  }  jmri.Memory m=InstanceManager.memoryManagerInstance().getMemory(memName);  if (m == null) {    JOptionPane.showMessageDialog(openFrame,java.text.MessageFormat.format(rb.getString("Error16"),new Object[]{memName}),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return null;  }  memoryName=memName;  if (m != getMemory() && panels.size() > 0) {    boolean updateall=false;    boolean found=false;    for (    LayoutEditor panel : panels) {      for (      MemoryIcon memIcon : panel.memoryLabelList) {        if (memIcon.getLayoutBlock() == this) {          if (!updateall && !found) {            int n=JOptionPane.showConfirmDialog(openFrame,"Would you like to update all memory icons on the panel linked to the block to use the new one?","Update Memory Icons",JOptionPane.YES_NO_OPTION);            found=true;            if (n == 0) {              updateall=true;            }          }          if (updateall) {            memIcon.setMemory(memoryName);          }        }      }    }  }  return m;}  }
class C{  public boolean matchesWhitespace(){  return !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos));}  }
class C{  public void testBug62452() throws Exception {  PooledConnection con=null;  MysqlConnectionPoolDataSource pds=new MysqlConnectionPoolDataSource();  pds.setUrl(dbUrl);  con=pds.getPooledConnection();  assertTrue(con instanceof JDBC4MysqlPooledConnection);  testBug62452WithConnection(con);  MysqlXADataSource xads=new MysqlXADataSource();  xads.setUrl(dbUrl);  xads.setPinGlobalTxToPhysicalConnection(false);  con=xads.getXAConnection();  assertTrue(con instanceof JDBC4MysqlXAConnection);  testBug62452WithConnection(con);  xads.setPinGlobalTxToPhysicalConnection(true);  con=xads.getXAConnection();  assertTrue(con instanceof JDBC4SuspendableXAConnection);  testBug62452WithConnection(con);}  }
class C{  public boolean isDurationMode(){  return durationMode;}  }
class C{  protected final void GET_EXCEPTION_OBJECT(Instruction s){  int offset=-burs.ir.stackManager.allocateSpaceForCaughtException();  StackLocationOperand sl=new StackLocationOperand(true,offset,DW);  EMIT(MIR_Move.mutate(s,IA32_MOV,Nullary.getResult(s),sl));}  }
class C{  public void onMapConfigure(){}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private boolean isNewDataArrive(){  boolean isAvailable=false;  for (  String bufferBssid : mLongSocketBufferMap.keySet()) {synchronized (mSentProxyTaskList) {      for (      EspProxyTask proxyTask : mSentProxyTaskList) {        if (proxyTask.getTargetBssid().equals(bufferBssid)) {          return true;        }      }    }  }  try {    isAvailable=mSocket.getInputStream().available() > 0;  } catch (  IOException e) {    String message=EspSocketUtil.getStrackTrace(e);    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"isNewDataArrive() IOException e:" + message);  }  if (isAvailable) {    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"isNewDataArrive() isAvailable: " + isAvailable + " for "+ mTargetInetAddr.getHostAddress());  }  return isAvailable;}  }
class C{  public static Uri addImage(ContentResolver resolver,String title,long date,Location location,int orientation,ExifInterface exif,byte[] jpeg,int width,int height) throws IOException {  return addImage(resolver,title,date,location,orientation,exif,jpeg,width,height,FilmstripItemData.MIME_TYPE_JPEG);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private int queueInputBuffer(MediaCodec codec,ByteBuffer[] inputBuffers,int index,SpeechRecord speechRecord){  if (speechRecord == null || speechRecord.getRecordingState() != SpeechRecord.RECORDSTATE_RECORDING) {    return -1;  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    ByteBuffer inputBuffer=inputBuffers[index];    inputBuffer.clear();    int size=inputBuffer.limit();    byte[] buffer=new byte[size];    int status=read(speechRecord,buffer);    if (status < 0) {      handleError("status = " + status);      return -1;    }    inputBuffer.put(buffer);    codec.queueInputBuffer(index,0,size,0,0);    return size;  }  return -1;}  }
class C{  public byte ID(){  return 2;}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  return;}  }
class C{  private void uninstall(){  editor.getViewer().removeVerifyKeyListener(this);  editor.getViewer().getTextWidget().removeFocusListener(this);  editor.setStatusMessage("");}  }
class C{  public Base64(){  this(0);}  }
class C{  public CBasicBlock(final int blockId,final String globalComment,final List<INaviInstruction> instructions){  Preconditions.checkArgument(blockId >= 0,"IE00050: Basic Block IDs can not be negative");  m_globalComment=Preconditions.checkNotNull(globalComment,"IE00052: Global comment can not be null");  m_instructions=Preconditions.checkNotNull(instructions,"IE01783: Instructions argument can not be null");  m_id=blockId;}  }
class C{  public Vector multiply(double x,double y,double z){  return new Vector(this.x * x,this.y * y,this.z * z);}  }
class C{  public void plnI(String s) throws IOException {  p(s);  pln();  pI();}  }
class C{  private void shutDownActivatedPlugins() throws PluginRuntimeException {  for (  Plugin plugin : fActivatedPlugins.values()) {    plugin.shutDown();  }}  }
class C{  @Override public void transform(AffineTransform tx){  invalidateTransformedShape();  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }}  }
class C{  @Override public void shutdownAndWait(){  mTask.shutdownAndWait();}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((MergeManyValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  final public SyntaxTreeNode GeneralId() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[2];  Token t;  bpa("General ID");  zn[0]=IdPrefix();  zn[1]=Identifier();  epa();{    if (true)     return new SyntaxTreeNode(mn,N_GeneralId,zn);  }  throw new Error("Missing return statement in function");}  }
class C{  static public NetMember newNetMember(String s,int p){  return services.newNetMember(s,p);}  }
class C{  public static void println(String message){synchronized (logSync) {    if (logWriter != null) {      logWriter.println(message);      logWriter.flush();    }  }}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    int n=Integer.parseInt(args[0]);    MyStringBuilder sb=new MyStringBuilder(root,year);    log.info("Reading " + n + " lines from "+ sb.getDigiCoreCsvFilename());    try {      File f=new File(sb.getDigiCoreCsvFilename());      Scanner s=new Scanner(new BufferedReader(new FileReader(f)));      DateString ds=new DateString();      File o=new File(f.getParent() + "/Sample_" + String.valueOf(n)+ "_"+ ds.toString()+ ".csv");      BufferedWriter bw=new BufferedWriter(new FileWriter(o));      try {        for (int i=0; i < n; i++) {          if (s.hasNextLine()) {            String line=s.nextLine();            bw.write(line);            bw.newLine();          } else {            log.warn("Input file does not have sufficient lines. Only " + String.valueOf(i + 1) + " read.");          }        }      }  finally {        bw.close();      }    } catch (    Exception e) {      e.printStackTrace();    }  } else {    throw new RuntimeException("Must provide the number of lines to read!");  }}  }
class C{  private String eFormatString(double x,char eChar){  boolean noDigits=false;  char[] ca4, ca5;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign)       ca4="+Inf".toCharArray(); else       if (leadingSpace)       ca4=" Inf".toCharArray(); else       ca4="Inf".toCharArray();    } else     ca4="-Inf".toCharArray();    noDigits=true;  } else   if (Double.isNaN(x)) {    if (leadingSign)     ca4="+NaN".toCharArray(); else     if (leadingSpace)     ca4=" NaN".toCharArray(); else     ca4="NaN".toCharArray();    noDigits=true;  } else   ca4=eFormatDigits(x,eChar);  ca5=applyFloatPadding(ca4,false);  return new String(ca5);}  }
class C{  public String taskClassName(){  return taskClsName;}  }
class C{  public Product copyTemplate(String productId){  Product copy=new Product();  copy.setDataContainer(new ProductData());  copy.setType(ServiceType.TEMPLATE);  copy.setStatus(ServiceStatus.INACTIVE);  copy.setTemplate(null);  copy.setTargetCustomer(null);  copy.setOwningSubscription(null);  copy.setTechnicalProduct(this.getTechnicalProduct());  copy.setVendor(this.getVendor());  copy.setProductFeedback(null);  setDatacontainerValues(copy,ServiceType.TEMPLATE);  copy.setProductId(productId);  setParamatersAndPriceModel(copy);  return copy;}  }
class C{  public void loadFromFile(){  String walletInfoFilename=null;  InputStream inputStream=null;  try {    walletPreferences=new Properties();    walletInfoFilename=createWalletInfoFilename(walletFilename);    FileInputStream fileInputStream=new FileInputStream(walletInfoFilename);    inputStream=new DataInputStream(fileInputStream);    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream,"UTF8"));    String inputLine;    String firstLine=bufferedReader.readLine();    if (firstLine == null) {      throw new WalletLoadException("The file '" + walletInfoFilename + "' is not a valid wallet info file (empty line 1)");    }    StringTokenizer tokenizer=new StringTokenizer(firstLine,SEPARATOR);    int numberOfTokens=tokenizer.countTokens();    if (numberOfTokens == 2) {      String magicText=tokenizer.nextToken();      String versionNumber=tokenizer.nextToken();      if (!INFO_MAGIC_TEXT.equals(magicText) || !INFO_VERSION_TEXT.equals(versionNumber)) {        throw new WalletLoadException("The file '" + walletInfoFilename + "' is not a valid wallet info file (wrong magic number on line 1)");      }    } else {      throw new WalletLoadException("The file '" + walletInfoFilename + "' is not a valid wallet info file (wrong number of tokens on line 1)");    }    String secondLine=bufferedReader.readLine();    StringTokenizer walletVersionTokenizer=new StringTokenizer(secondLine,SEPARATOR);    int walletVersionTokenNumber=walletVersionTokenizer.countTokens();    if (walletVersionTokenNumber == 2) {      String walletVersionMarker=walletVersionTokenizer.nextToken();      String walletVersionString=walletVersionTokenizer.nextToken();      if (!WALLET_VERSION_MARKER.equals(walletVersionMarker) || !(MultiBitWalletVersion.SERIALIZED.getWalletVersionString().equals(walletVersionString) || MultiBitWalletVersion.PROTOBUF.getWalletVersionString().equals(walletVersionString) || MultiBitWalletVersion.PROTOBUF_ENCRYPTED.getWalletVersionString().equals(walletVersionString))) {        throw new WalletVersionException("Cannot understand wallet version of '" + walletVersionMarker + "', '"+ walletVersionString+ "'");      } else {        if (!walletVersion.getWalletVersionString().equals(walletVersionString)) {          log.debug("The wallet version in the constructor was '" + walletVersion + "'. In the wallet info file it was '"+ walletVersionString+ "'. Using the latter.");          if (MultiBitWalletVersion.SERIALIZED.getWalletVersionString().equals(walletVersionString)) {            walletVersion=MultiBitWalletVersion.SERIALIZED;          } else           if (MultiBitWalletVersion.PROTOBUF.getWalletVersionString().equals(walletVersionString)) {            walletVersion=MultiBitWalletVersion.PROTOBUF;          } else           if (MultiBitWalletVersion.PROTOBUF_ENCRYPTED.getWalletVersionString().equals(walletVersionString)) {            walletVersion=MultiBitWalletVersion.PROTOBUF_ENCRYPTED;          }        }      }    } else {      throw new WalletVersionException("Cannot understand wallet version text of '" + secondLine + "'");    }    boolean isMultilineColumnThree=false;    String previousColumnOne=null;    String previousColumnTwo=null;    String multilineColumnThreeValue=null;    while ((inputLine=bufferedReader.readLine()) != null) {      if (inputLine.startsWith(RECEIVE_ADDRESS_MARKER + SEPARATOR) || inputLine.startsWith(SEND_ADDRESS_MARKER + SEPARATOR) || inputLine.startsWith(PROPERTY_MARKER + SEPARATOR)) {        if (isMultilineColumnThree) {          String decodedMultiLineColumnThreeValue=decodeURLString(multilineColumnThreeValue);          if (RECEIVE_ADDRESS_MARKER.equals(previousColumnOne)) {            addReceivingAddress(new WalletAddressBookData(decodedMultiLineColumnThreeValue,previousColumnTwo),true);          } else {            if (SEND_ADDRESS_MARKER.equals(previousColumnOne)) {              addSendingAddress(new WalletAddressBookData(decodedMultiLineColumnThreeValue,previousColumnTwo));            } else {              if (PROPERTY_MARKER.equals(previousColumnOne)) {                walletPreferences.put(previousColumnTwo,decodedMultiLineColumnThreeValue);              }            }          }          previousColumnOne=null;          previousColumnTwo=null;          multilineColumnThreeValue=null;          isMultilineColumnThree=false;        }        StringTokenizer tokenizer2=new StringTokenizer(inputLine,SEPARATOR);        int numberOfTokens2=tokenizer2.countTokens();        String columnOne=null;        String columnTwo=null;        String columnThree="";        if (numberOfTokens2 == 2) {          columnOne=tokenizer2.nextToken();          columnTwo=tokenizer2.nextToken();        } else {          if (numberOfTokens2 == 3) {            columnOne=tokenizer2.nextToken();            columnTwo=tokenizer2.nextToken();            columnThree=tokenizer2.nextToken();          }        }        String decodedColumnThreeValue=decodeURLString(columnThree);        if (RECEIVE_ADDRESS_MARKER.equals(columnOne)) {          addReceivingAddress(new WalletAddressBookData(decodedColumnThreeValue,columnTwo),true);        } else {          if (SEND_ADDRESS_MARKER.equals(columnOne)) {            addSendingAddress(new WalletAddressBookData(decodedColumnThreeValue,columnTwo));          } else {            if (PROPERTY_MARKER.equals(columnOne)) {              walletPreferences.put(columnTwo,decodedColumnThreeValue);            }          }        }        previousColumnOne=columnOne;        previousColumnTwo=columnTwo;        multilineColumnThreeValue=columnThree;      } else {        isMultilineColumnThree=true;        multilineColumnThreeValue=multilineColumnThreeValue + "\n" + inputLine;      }    }    if (isMultilineColumnThree) {      String decodedMultiLineColumnThreeValue=decodeURLString(multilineColumnThreeValue);      if (RECEIVE_ADDRESS_MARKER.equals(previousColumnOne)) {        addReceivingAddress(new WalletAddressBookData(decodedMultiLineColumnThreeValue,previousColumnTwo),true);      } else {        if (SEND_ADDRESS_MARKER.equals(previousColumnOne)) {          addSendingAddress(new WalletAddressBookData(decodedMultiLineColumnThreeValue,previousColumnTwo));        } else {          if (PROPERTY_MARKER.equals(previousColumnOne)) {            walletPreferences.put(previousColumnTwo,decodedMultiLineColumnThreeValue);          }        }      }      previousColumnOne=null;      previousColumnTwo=null;      multilineColumnThreeValue=null;      isMultilineColumnThree=false;    }  } catch (  IllegalArgumentException iae) {    throw new WalletLoadException("Could not load walletinfo file '" + walletInfoFilename + "'",iae);  }catch (  IOException ioe) {    throw new WalletLoadException("Could not load walletinfo file '" + walletInfoFilename + "'",ioe);  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        throw new WalletLoadException("Could not close walletinfo file '" + walletInfoFilename + "'",e);      }    }  }}  }
class C{  public void autoSize(){  removeRows();  for (int row=0; row < CertificateField.size(); row++) {    model.addRow(new Object[2]);  }  int normalWidth=(int)getPreferredScrollableViewportSize().getWidth();  int autoHeight=(int)getPreferredSize().getHeight();  setPreferredScrollableViewportSize(new Dimension(normalWidth,autoHeight));  setFillsViewportHeight(true);  refreshComponents();}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    int count=3;    if (viewFlow != null) {      count=viewFlow.getViewsCount();    }    result=(int)(getPaddingLeft() + getPaddingRight() + (2 * mRadius)+ (count - 1) * spacing);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public GetIndexedScriptRequest(String scriptLang,String id){  this.scriptLang=scriptLang;  this.id=id;}  }
class C{  public boolean isCompressionLossless(){  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  return false;}  }
class C{  public JActivityView(ActivityModel model){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.gui.Labels");  initComponents();  closeButton.setVisible(false);  setModel(model);}  }
class C{  public static boolean rectangleContains(final int[] area,final int x,final int y){  int lowX=area[0];  int hiX=area[0] + area[2];  int lowY=area[1];  int hiY=area[1] + area[3];  boolean containsPoint=false;  if (lowX > hiX) {    final int temp=lowX;    lowX=hiX;    hiX=temp;  }  if (lowY > hiY) {    final int temp=lowY;    lowY=hiY;    hiY=temp;  }  if ((lowY < y && y < hiY) && (lowX < x && x < hiX)) {    containsPoint=true;  }  return containsPoint;}  }
class C{  public void addEstablishedConnections(int establishedConnectionsDelta){  setEstablishedConnections(getEstablishedConnections() + establishedConnectionsDelta);}  }
class C{  public static void writeDescriptor(Descriptor descriptor,File file,String encoding,boolean isIndent) throws IOException {  OutputStream out=null;  try {    out=new FileOutputStream(file);    writeDescriptor(descriptor,out,encoding,isIndent);  }  finally {    if (out != null) {      try {        out.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public void reset(Graph<V,E> graph,E e){  Pair<V> endpoints=graph.getEndpoints(e);  getIndex(graph,e,endpoints.getFirst());  getIndex(graph,e,endpoints.getFirst(),endpoints.getSecond());}  }
class C{  public Object construct(){  Debug.message("terrain",layer.getName() + "|LOSWorker.construct()");  layer.fireStatusUpdate(LayerStatusEvent.START_WORKING);  createLOSImage();  return null;}  }
class C{  public ServiceNotPublishedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private static void check(double x,double y){  double eps=Math.pow(2.0,-52.0);  if (x == 0 & Math.abs(y) < 10 * eps)   return;  if (y == 0 & Math.abs(x) < 10 * eps)   return;  if (Math.abs(x - y) > 10 * eps * Math.max(Math.abs(x),Math.abs(y))) {    throw new RuntimeException("The difference x-y is too large: x = " + Double.toString(x) + "  y = "+ Double.toString(y));  }}  }
class C{  public Catalog(){  super();  Item root=new Item("root");  getItemMap().put(0,root);}  }
class C{  public LocalDateTime withMillisOfSecond(int millis){  return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(),millis));}  }
class C{  private UIComponents(final String comp){  this.comp=comp;}  }
class C{  public static Date dateOf(int hour,int minute,int second,int dayOfMonth,int month){  validateSecond(second);  validateMinute(minute);  validateHour(hour);  validateDayOfMonth(dayOfMonth);  validateMonth(month);  Date date=new Date();  Calendar c=Calendar.getInstance();  c.setTime(date);  c.set(Calendar.MONTH,month - 1);  c.set(Calendar.DAY_OF_MONTH,dayOfMonth);  c.set(Calendar.HOUR_OF_DAY,hour);  c.set(Calendar.MINUTE,minute);  c.set(Calendar.SECOND,second);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public synchronized void constrain(int x,int y,int w,int h){  for (int i=0; i < RECT_COUNT; i++) {    Rectangle rect=paintRects[i];    if (rect != null) {      if (rect.x < x) {        rect.width-=(x - rect.x);        rect.x=x;      }      if (rect.y < y) {        rect.height-=(y - rect.y);        rect.y=y;      }      int xDelta=rect.x + rect.width - x - w;      if (xDelta > 0) {        rect.width-=xDelta;      }      int yDelta=rect.y + rect.height - y - h;      if (yDelta > 0) {        rect.height-=yDelta;      }      if (rect.width <= 0 || rect.height <= 0) {        paintRects[i]=null;      }    }  }}  }
class C{  public void removeFile(final File file){  m_listModel.remove(file);}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints a disassembled view of the given class.");    System.err.println("Usage: Textifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(new PrintWriter(System.out)),flags);}  }
class C{  @Deprecated public WindowSize(){  this.fullscreen=true;}  }
class C{  public RangeConditionBuilder upper(Object upper){  this.upper=upper;  return this;}  }
class C{  public void close() throws IOException {  if (ois != null)   ois.close();  if (oos != null)   oos.close();  if (socket != null)   socket.close();}  }
class C{  public void turnChecksOn(){  m_checksTurnedOff=false;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.641 -0400",hash_original_method="9AA2BEF9DA8AFF8D251BF2FC6F763561",hash_generated_method="298EFBAA7A51F11C69F08AF0C7F43929") @Override public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException("Byte array must not be null");  }  if (len < 0 || off < 0 || (off + len) > b.length) {    throw new IndexOutOfBoundsException("Array Size=" + b.length + ", offset="+ off+ ", length="+ len);  }  int read=0;  if (len == 0) {    return 0;  }  while (len > 0) {    if (encoderOut.hasRemaining()) {      int c=Math.min(encoderOut.remaining(),len);      encoderOut.get(b,off,c);      off+=c;      len-=c;      read+=c;    } else {      fillBuffer();      if (endOfInput && !encoderOut.hasRemaining()) {        break;      }    }  }  return read == 0 && endOfInput ? -1 : read;}  }
class C{  public Iterator keys(){  return this.keySet().iterator();}  }
class C{  private void updateTargetCostEstimate(){  if (target != null) {    h=g + AStarStatic.getDistanceBetweenNodes(this,target) * 10;  } else {    h=0;  }}  }
class C{  public static void assertDiagonallyDominant(IDoubleMatrix mat){  assertSquare(mat);  for (int i=0; i < mat.getRowNum(); ++i) {    final double d=mat.get(i,i);    if (Double.isNaN(d)) {      continue;    }    for (int j=0; j < mat.getRowNum(); ++j) {      double v;      v=mat.get(i,j);      if (!Double.isNaN(v) && v > d) {        final String msg=String.format("Matrix is not diagonally dominant: (%d,%d)=%f (%d,%d)=%f diff=%f",i,j,v,i,i,d,d - v);        throw new AdeCoreIllegalArgumentException(msg);      }      v=mat.get(j,i);      if (!Double.isNaN(v) && v > d) {        final String msg=String.format("Matrix is nSot diagonally dominant: (%d,%d)=%f (%d,%d)=%f",j,i,v,i,i,d);        throw new AdeCoreIllegalArgumentException(msg);      }    }  }}  }
class C{  public OIDName(DerValue derValue) throws IOException {  oid=derValue.getOID();}  }
class C{  public Point2D forward(double lat,double lon,Point2D p,boolean isRadian){  if (!isRadian) {    lat=ProjMath.degToRad(lat);    lon=ProjMath.degToRad(lon);  }  lat=normalizeLatitude(lat);  lon=wrapLongitude(lon);  double x=(scaled_radius * wrapLongitude(lon - centerX)) + wx;  double y=hy - (scaled_radius * (MoreMath.asinh(Math.tan(lat)) - asinh_of_tanCtrLat));  p.setLocation(x,y);  return p;}  }
class C{  public static boolean isPOSTerminalAccessible(Properties ctx,int terminalId){  String whereClause="AD_Client_ID=" + Env.getAD_Client_ID(ctx) + " AND AD_Org_ID="+ Env.getAD_Org_ID(ctx)+ " AND U_PosTerminal_ID="+ terminalId+ " AND IsActive='Y'";  int posIds[]=MPOSTerminal.getAllIDs(MPOSTerminal.Table_Name,whereClause,null);  if (posIds.length == 0) {    return false;  }  return true;}  }
class C{  public void testSHA512(){  Digest oldDigest=new SHA512Digest();  Digest newDigest=new OpenSSLDigest.SHA512();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public void adToGeoWKT(char[] c){  this.geoWKT=geoWKT.concat(new String(c));}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  if (!isPropertyChanged(oldProps,newProps,_propertyName)) {    return;  }  String newValue=newProps.getProperty(_propertyName);  ArgumentValidator.checkRange(Integer.parseInt(newValue),Constants.MIN_TOKEN_LIFE_TIME,Constants.MAX_TOKEN_LIFE_TIME,_propertyName);}  }
class C{  static public ExportMask initializeExportMask(StorageSystem storage,ExportGroup exportGroup,List<Initiator> initiators,Map<URI,Integer> volumeMap,List<URI> targets,Map<URI,List<URI>> zoneAssignments,String maskName,DbClient dbClient) throws Exception {  if (maskName == null) {    maskName=ExportMaskUtils.getMaskName(dbClient,initiators,exportGroup,storage);  }  ExportMask exportMask=ExportMaskUtils.createExportMask(dbClient,exportGroup,storage.getId(),maskName);  String resourceRef;  if (exportGroup.getType() != null) {    if (exportGroup.getType().equals(ExportGroup.ExportGroupType.Cluster.name())) {      resourceRef=initiators.get(0).getClusterName();    } else {      resourceRef=initiators.get(0).getHost().toString();    }    exportMask.setResource(resourceRef);  } else {    exportMask.setResource(NullColumnValueGetter.getNullURI().toString());  }  exportMask.setCreatedBySystem(true);  exportMaskUpdate(exportMask,volumeMap,initiators,targets);  if (!exportGroup.getZoneAllInitiators() && null != zoneAssignments) {    StringSetMap zoneMap=getZoneMapFromAssignments(zoneAssignments);    if (!zoneMap.isEmpty()) {      exportMask.setZoningMap(zoneMap);    }  }  dbClient.updateObject(exportMask);  return exportMask;}  }
class C{  public IgfsDataOutputStream(OutputStream out){  super(out);}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public void addHandler(String path,ElementHandler handler){  getReader().addHandler(path,handler);}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public SQLSyntaxErrorException(String reason){  super(reason,null,0);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public void close(long maxCompactTime){  try {    if (!store.isClosed() && store.getFileStore() != null) {      boolean compactFully=false;      if (!store.getFileStore().isReadOnly()) {        transactionStore.close();        if (maxCompactTime == Long.MAX_VALUE) {          compactFully=true;        }      }      String fileName=store.getFileStore().getFileName();      store.close();      if (compactFully && FileUtils.exists(fileName)) {        MVStoreTool.compact(fileName,true);      }    }  } catch (  IllegalStateException e) {    int errorCode=DataUtils.getErrorCode(e.getMessage());    if (errorCode == DataUtils.ERROR_WRITING_FAILED) {    } else     if (errorCode == DataUtils.ERROR_FILE_CORRUPT) {    }    store.closeImmediately();    throw DbException.get(ErrorCode.IO_EXCEPTION_1,e,"Closing");  }}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  public void testBug8487() throws Exception {  try {    this.pstmt=this.conn.prepareStatement("SELECT 1",ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);    this.pstmt.setFetchSize(Integer.MIN_VALUE);    this.rs=this.pstmt.executeQuery();    try {      this.rs=this.conn.createStatement().executeQuery("SELECT 2");      fail("Should have caught a streaming exception here");    } catch (    SQLException sqlEx) {      assertTrue(sqlEx.getMessage() != null && sqlEx.getMessage().indexOf("Streaming") != -1);    }  }  finally {    if (this.rs != null) {      while (this.rs.next()) {      }      this.rs.close();    }    if (this.pstmt != null) {      this.pstmt.close();    }  }}  }
class C{  protected void drawTickMarks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  if (RectangleEdge.isTopOrBottom(edge)) {    drawTickMarksHorizontal(g2,state,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    drawTickMarksVertical(g2,state,dataArea,edge);  }}  }
class C{  public boolean hasSkip(){  return _is != null;}  }
class C{  public static Leg createLeg(Leg leg){  Leg newLeg=createLeg(leg.getMode());  copyFromTo(leg,newLeg);  return newLeg;}  }
class C{  @Override public synchronized boolean isClosed(){  return !CloseableReference.isValid(mBufRef);}  }
class C{  @Override public Iterator<T> iterator(){  return Iterators.<T>unmodifiableIterator(heap.iterator());}  }
class C{  public IndependenceFactsAction(Component comp,IndTestProducer indTestProducer,String menuName){  super(menuName);  if (indTestProducer == null) {    throw new NullPointerException();  }  this.centeringComp=comp;  this.indTestProducer=indTestProducer;  this.vars=new LinkedList<>();  this.textField=new JTextField(40);  this.textField.setEditable(false);  this.textField.setFont(new Font("Serif",Font.BOLD,14));  this.textField.setBackground(new Color(250,250,250));  resetText();}  }
class C{  protected void resetDefaultFilters(){  for (  FilterEntity filter : filterEntities) {    if (!ObjectUtils.equals(filter,filterEntity)) {      if (BooleanUtils.isTrue(filter.getIsDefault())) {        filter.setIsDefault(false);      }    }  }}  }
class C{  public boolean isXpoweredBy(){  return xpoweredBy;}  }
class C{  public Scores(double hub,double authority){  this.hub=hub;  this.authority=authority;}  }
class C{  private int factorial(int n){  int retval=1;  if (n > 1)   for (int i=2; i <= n; i++)   retval*=i;  return retval;}  }
class C{  public HasXASupportValidator(ConfigurationType type){  super(type,DatasourcePropertySet.CONNECTION_TYPE);}  }
class C{  private void generateIndexMap(int size){  assert (size % 2 == 1);  int mapWidth=((size + 1) / 2) + 1;  mCenterCoefficient=(size - 1) / 2;  mCenterCoefficientMapIndex=mCenterCoefficient + 1;  mIndexMap=new int[size][mapWidth];  for (int x=0; x < mapWidth - 2; x+=2) {    mIndexMap[0][x]=x;    mIndexMap[0][x + 1]=size - 1 - x;  }  mIndexMap[0][mCenterCoefficientMapIndex]=mCenterCoefficient;  for (int x=1; x < size; x++) {    for (int y=0; y < mapWidth; y++) {      mIndexMap[x][y]=mIndexMap[x - 1][y] + 1;      if (mIndexMap[x][y] >= size) {        mIndexMap[x][y]-=size;      }    }  }}  }
class C{  public boolean isInverse(){  return mInverse;}  }
class C{  protected Void visitParameterizedType(AnnotatedDeclaredType type,ParameterizedTypeTree tree){  if (TreeUtils.isDiamondTree(tree)) {    return null;  }  final TypeElement element=(TypeElement)type.getUnderlyingType().asElement();  if (checker.shouldSkipUses(element)) {    return null;  }  List<AnnotatedTypeParameterBounds> bounds=atypeFactory.typeVariablesFromUse(type,element);  visitor.checkTypeArguments(tree,bounds,type.getTypeArguments(),tree.getTypeArguments());  return null;}  }
class C{  private void applyPageStyle(){  Style pageStyleCopy=new Style(pageStyle);  mainContainer.setUnselectedStyle(pageStyleCopy);  mainContainer.setSelectedStyle(pageStyleCopy);}  }
class C{  private void bindQuery(){  if (!config.getBoolean(Key.QUERY_ENABLED)) {    return;  }  SocketAddress address=getBindAddress(Key.QUERY_PORT);  queryServer=new QueryServer(this,config.getBoolean(Key.QUERY_PLUGINS));  logger.info("Binding query to address: " + address + "...");  ChannelFuture future=queryServer.bind(address);  Channel channel=future.awaitUninterruptibly().channel();  if (!channel.isActive()) {    logger.warning("Failed to bind query. Address already in use?");  }}  }
class C{  @DSComment("Location manager") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.101 -0500",hash_original_method="53855AAE83CDCFDE219D3895B886D007",hash_generated_method="11D02D5FFF7DF18BC5C2C49EC31ACDE3") public void removeUpdates(PendingIntent intent){  if (intent == null) {    throw new IllegalArgumentException("intent==null");  }  if (false) {    Log.d(TAG,"removeUpdates: intent = " + intent);  }  try {    mService.removeUpdatesPI(intent);  } catch (  RemoteException ex) {    Log.e(TAG,"removeUpdates: RemoteException",ex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean conditionallyEnableDebugLogging(){  boolean doFlashes=SystemProperties.getBoolean(VISUAL_PROPERTY,false) && !amTheSystemServerProcess();  final boolean suppress=SystemProperties.getBoolean(DISABLE_PROPERTY,false);  if (!doFlashes && (IS_USER_BUILD || suppress)) {    setCloseGuardEnabled(false);    return false;  }  if (IS_ENG_BUILD) {    doFlashes=true;  }  int threadPolicyMask=StrictMode.DETECT_DISK_WRITE | StrictMode.DETECT_DISK_READ | StrictMode.DETECT_NETWORK;  if (!IS_USER_BUILD) {    threadPolicyMask|=StrictMode.PENALTY_DROPBOX;  }  if (doFlashes) {    threadPolicyMask|=StrictMode.PENALTY_FLASH;  }  StrictMode.setThreadPolicyMask(threadPolicyMask);  if (IS_USER_BUILD) {    setCloseGuardEnabled(false);  } else {    VmPolicy.Builder policyBuilder=new VmPolicy.Builder().detectAll().penaltyDropBox();    if (IS_ENG_BUILD) {      policyBuilder.penaltyLog();    }    setVmPolicy(policyBuilder.build());    setCloseGuardEnabled(vmClosableObjectLeaksEnabled());  }  return true;}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  private final boolean checkInt(int in,Condition condition){  String value=condition.getValue();  int v;  try {    v=Integer.parseInt(value);  } catch (  NumberFormatException e) {    return false;  }switch (condition.getConditionType()) {case EQUALS:{      return (in == v);    }case NOT_EQUALS:{    return (in != v);  }case GREATER:{  return (in > v);}case GREATER_EQ:{return (in >= v);}case LESS:{return (in < v);}case LESS_EQ:{return (in <= v);}default :{return false;}}}  }
class C{  private double iterate(Instances inst,boolean report) throws Exception {  int i;  double llkold=0.0;  double llk=0.0;  if (report) {    EM_Report(inst);  }  boolean ok=false;  int seed=getSeed();  int restartCount=0;  m_iterationsPerformed=-1;  while (!ok) {    try {      for (i=0; i < m_max_iterations; i++) {        llkold=llk;        llk=launchESteps(inst);        if (report) {          System.out.println("Loglikely: " + llk);        }        if (i > 0) {          if ((llk - llkold) < m_minLogLikelihoodImprovementIterating) {            if (llk - llkold < 0) {              m_modelNormal=m_modelNormalPrev;              m_model=m_modelPrev;              m_priors=m_priorsPrev;              m_iterationsPerformed=i - 1;            } else {              m_iterationsPerformed=i;            }            break;          }        }        launchMSteps(inst);      }      ok=true;    } catch (    Exception ex) {      ex.printStackTrace();      seed++;      restartCount++;      m_rr=new Random(seed);      for (int z=0; z < 10; z++) {        m_rr.nextDouble();        m_rr.nextInt();      }      if (restartCount > 5) {        m_num_clusters--;        restartCount=0;      }      EM_Init(m_theInstances);      startExecutorPool();    }  }  if (m_iterationsPerformed == -1) {    m_iterationsPerformed=m_max_iterations;  }  if (m_verbose) {    System.out.println("# iterations performed: " + m_iterationsPerformed);  }  if (report) {    EM_Report(inst);  }  return llk;}  }
class C{  public static void orthoNormalize(Vector3 v1,Vector3 v2){  v1.normalize();  v2.subtract(Vector3.projectAndCreate(v2,v1));  v2.normalize();}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder latitude(Double latitude){  this.latitude=latitude;  return this;}  }
class C{  static void checkForIncompatibilities(List<ResolvedMigration> migrations){  for (int i=0; i < migrations.size() - 1; i++) {    ResolvedMigration current=migrations.get(i);    ResolvedMigration next=migrations.get(i + 1);    if (current.getVersion().compareTo(next.getVersion()) == 0) {      throw new CassandraMigrationException(String.format("Found more than one migration with version %s\nOffenders:\n-> %s (%s)\n-> %s (%s)",current.getVersion(),current.getPhysicalLocation(),current.getType(),next.getPhysicalLocation(),next.getType()));    }  }}  }
class C{  public static TestDiagnosticLine fromJavaSourceLine(String filename,String originalLine,long lineNumber){  final String trimmedLine=originalLine.trim();  long errorLine=lineNumber + 1;  if (trimmedLine.startsWith("//::")) {    String restOfLine=trimmedLine.substring(4);    String[] diagnosticStrs=restOfLine.split("::");    List<TestDiagnostic> diagnostics=new ArrayList<>(diagnosticStrs.length);    for (    String diagnostic : diagnosticStrs) {      diagnostics.add(fromJavaFileComment(filename,errorLine,diagnostic));    }    return new TestDiagnosticLine(filename,errorLine,originalLine,Collections.unmodifiableList(diagnostics));  } else   if (trimmedLine.startsWith("//warning:")) {    String diagnosticString=trimmedLine.substring(2);    TestDiagnostic diagnostic=fromJavaFileComment("",0,diagnosticString);    return new TestDiagnosticLine("",0,originalLine,Collections.singletonList(diagnostic));  } else {    return new TestDiagnosticLine(filename,errorLine,originalLine,EMPTY);  }}  }
class C{  protected void computeFieldPolynomial(){  if (mType == 1) {    fieldPolynomial=new GF2Polynomial(mDegree + 1,"ALL");  } else   if (mType == 2) {    GF2Polynomial q=new GF2Polynomial(mDegree + 1,"ONE");    GF2Polynomial p=new GF2Polynomial(mDegree + 1,"X");    p.addToThis(q);    GF2Polynomial r;    int i;    for (i=1; i < mDegree; i++) {      r=q;      q=p;      p=q.shiftLeft();      p.addToThis(r);    }    fieldPolynomial=p;  }}  }
class C{  public Builder customProperty(String name,Boolean... values){  return customProperty(new Property(name,values));}  }
class C{  public LinkedHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  accessOrder=false;}  }
class C{  public BinaryHttpResponseHandler(String[] allowedContentTypes){  this();  mAllowedContentTypes=allowedContentTypes;}  }
class C{  public void testMain(){  String casFile="sample_data/cooper.data/small_data.cas";  String[] args={"--cas",casFile};  BayesianConstraintInference.main(args);}  }
class C{  private boolean isTableExists(String tableName) throws SQLException {  Connection connection=openConnection();  try {    DatabaseMetaData metaData=connection.getMetaData();    ResultSet resultSet=metaData.getTables(null,null,tableName,null);    while (resultSet.next()) {      String nextTableName=resultSet.getString("TABLE_NAME");      if (tableName.equals(nextTableName)) {        return true;      }    }    return false;  } catch (  SQLException e) {    throw new SQLException("Unable to check if a table with the name [" + tableName + "] exists in the data base",e);  } finally {    closeConnection(connection);  }}  }
class C{  private static long gcd(long n,long d){  long n1=Math.abs(n);  long n2=Math.abs(d);  int gcd=1;  for (int k=1; k <= n1 && k <= n2; k++) {    if (n1 % k == 0 && n2 % k == 0)     gcd=k;  }  return gcd;}  }
class C{  public RefactoringStatusEntry(int severity,String msg,RefactoringStatusContext context){  this(severity,msg,context,null,NO_CODE,null);}  }
class C{  public boolean isValid(){  return this.valid;}  }
class C{  protected boolean addToPendingNodes(final Link l,final Node n,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final Node toNode,final Person person,final Vehicle vehicle,int itID,Map<Id<Node>,DijkstraNodeData> nodeData){  double travelTime=this.timeFunction.getLinkTravelTime(l,currTime,person,vehicle);  double travelCost=this.costFunction.getLinkTravelDisutility(l,currTime,person,vehicle);  DijkstraNodeData data=getData(n,nodeData);  double nCost=data.getCost();  if (!data.isVisited(itID)) {    visitNode(n,data,pendingNodes,currTime + travelTime,currCost + travelCost,l,itID);    return true;  }  double totalCost=currCost + travelCost;  if (totalCost < nCost) {    revisitNode(n,data,pendingNodes,currTime + travelTime,totalCost,l,itID);    return true;  }  return false;}  }
class C{  public LogConfigurationException(Throwable cause){  this((cause == null) ? null : cause.toString(),cause);}  }
class C{  public void fail(GridClientException cause){  lock.writeLock().lock();  try {    lastError=cause;    for (    GridClientNode n : nodes.values())     notifyEvents(Collections.singletonList(new TopologyEvent(false,n)));    nodes=Collections.emptyMap();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private void validateClusterStatus() throws Exception {  for (int i=0; i < RecoveryConstants.RECOVERY_RETRY_COUNT; i++) {    List<String> unavailableNodes=getUnavailableNodes();    if (unavailableNodes.isEmpty()) {      log.info("Dbsvc on all nodes are available");      break;    }    Thread.sleep(RecoveryConstants.RECOVERY_CHECK_INTERVAL);    log.error("Healthy nodes({}) get unavailable during node recovery",unavailableNodes);    markRecoveryFailed(RecoveryStatus.ErrorCode.NEW_NODE_FAILURE);    throw APIException.internalServerErrors.newNodeFailureInNodeRecovery(unavailableNodes.toString());  }}  }
class C{  public void writeState(DataOutputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   stream.writeInt(mt[x]);  len=mag01.length;  for (int x=0; x < len; x++)   stream.writeInt(mag01[x]);  stream.writeInt(mti);  stream.writeDouble(__nextNextGaussian);  stream.writeBoolean(__haveNextNextGaussian);}  }
class C{  public boolean hasAdvancedProperties(){  if (CollectionUtils.isNotEmpty(properties)) {    for (    AbstractProperty property : properties) {      if (property.isAdvanced()) {        return true;      }    }  }  return false;}  }
class C{  public void add(double value){  super.add(value,0);}  }
class C{  public void put(double x,double y){  put(x,y,1.);}  }
class C{  public static boolean isConfirmed(final String title,final String text,final int timer){  return isConfirmed(null,title,text,timer);}  }
class C{  public static double[][] relationAsMatrix(final Relation<? extends NumberVector> relation,ArrayDBIDs ids){  final int rowdim=ids.size();  final int coldim=dimensionality(relation);  double[][] mat=new double[rowdim][coldim];  int r=0;  for (DBIDArrayIter iter=ids.iter(); iter.valid(); iter.advance(), r++) {    NumberVector vec=relation.get(iter);    double[] row=mat[r];    for (int c=0; c < coldim; c++) {      row[c]=vec.doubleValue(c);    }  }  assert (r == rowdim);  return mat;}  }
class C{  public static Date stringToDate(String strDate){  try {    if (strDate != null && !strDate.isEmpty()) {      DateFormat formatter=new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");      return formatter.parse(strDate);    } else     if (strDate != null && strDate.isEmpty()) {      return null;    } else {      return new Date();    }  } catch (  Exception e) {    LOGGER.error("dateConverter.convertReverse error: " + e.getMessage());    throw new MetadataException(e);  }}  }
class C{  public void testOverlappingLineStringsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  LineString[] pt=new LineString[4];  STRUCT[] st=new STRUCT[8];  LineStringGenerator pg=new LineStringGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setNumberPoints(10);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(LineString)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    LineString pt2=(LineString)or.read(st[i]);    assertTrue("The input LineString is not the same as the output LineString",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  void merge(int min,int max){  for (int i=0; i < num; i++) {    if (min >= minRange[i] && max <= maxRange[i]) {      return;    } else     if (min <= minRange[i] && max >= maxRange[i]) {      delete(i);      merge(min,max);      return;    } else     if (min >= minRange[i] && min <= maxRange[i]) {      min=minRange[i];      delete(i);      merge(min,max);      return;    } else     if (max >= minRange[i] && max <= maxRange[i]) {      max=maxRange[i];      delete(i);      merge(min,max);      return;    }  }  if (num >= size) {    size*=2;    int[] newMin=new int[size];    int[] newMax=new int[size];    System.arraycopy(minRange,0,newMin,0,num);    System.arraycopy(maxRange,0,newMax,0,num);    minRange=newMin;    maxRange=newMax;  }  minRange[num]=min;  maxRange[num]=max;  num++;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_11:    getAnonymous_linkingOp_1_1().clear();  return;case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_21:getAnonymous_linkingOp_2_1().clear();return;case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_31:getAnonymous_linkingOp_3_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public DPState compute(Rule rule,List<HGNode> tailNodes,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  Tree baseTree=Tree.buildTree(rule,tailNodes,BUILD_DEPTH);  Stack<Tree> nodeStack=new Stack<>();  nodeStack.add(baseTree);  while (!nodeStack.empty()) {    Tree tree=nodeStack.pop();    if (tree == null)     continue;    if (lmFragments.get(tree.getRule()) != null) {      lmFragments.get(tree.getRule()).stream().filter(null).forEach(null);    }    if (tree.getChildren() != null)     for (    Tree childNode : tree.getChildren()) {      if (!childNode.isBoundary())       nodeStack.add(childNode);    }  }  return new FragmentState(baseTree);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static SnmpOid toOid(long[] index,int start) throws SnmpStatusException {  try {    return new SnmpOid(index[start]);  } catch (  IndexOutOfBoundsException e) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  private void loadMapping(String path) throws IOException {  BufferedReader input=new BufferedReader(new InputStreamReader(System.in));  File f=new File(path);  String dir=f.getParent();  String line;  while ((line=input.readLine()) != null) {    String[] elements=line.split(":",-1);    if (elements.length != 4) {      System.err.println("Invalid line: '" + line + "'");    } else {      int newIndex=0;      if (!"".equals(elements[3])) {        newIndex=Integer.parseInt(elements[3]);      }      String path1=(new File(dir + File.separator + elements[0])).getCanonicalPath();      String path2=(new File(dir + File.separator + elements[2])).getCanonicalPath();      mapping.addMapping(path1,Integer.parseInt(elements[1]),path2,newIndex);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.665 -0500",hash_original_method="3CD97DF13D6C3B595D5C8777AA80A144",hash_generated_method="077DF7ACA3749BD5DB16CC648425AF0D") public SIPHeader parse() throws ParseException {  SessionExpires se=new SessionExpires();  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.SESSIONEXPIRES_TO);    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      se.setExpires(delta);    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    super.parse(se);    return se;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public static List<IModelMetaData> readNonDefault(SQL table,String analysisGroup) throws AdeException {  final List<IModelMetaData> res=new ArrayList<IModelMetaData>();  final ConnectionWrapper cw=new ConnectionWrapper(AdeInternal.getDefaultConnection());  try {    final PreparedStatementWrapper psw=cw.preparedStatement("select MODEL_INTERNAL_ID from " + table + " where is_default=0 and ANALYSIS_GROUP=?");    psw.getPreparedStatement().setString(1,analysisGroup);    final ResultSet rs=psw.executeQuery();    while (rs.next()) {      res.add(readMetaData(table,rs.getInt(1)));    }    cw.close();  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();  }  return res;}  }
class C{  public void endElement(String qName) throws SAXException {  if (!namespaces) {    if (contentHandler != null) {      contentHandler.endElement("","",qName.intern());    }    return;  }  String names[]=processName(qName,false,false);  if (contentHandler != null) {    contentHandler.endElement(names[0],names[1],names[2]);    Enumeration prefixes=nsSupport.getDeclaredPrefixes();    while (prefixes.hasMoreElements()) {      String prefix=(String)prefixes.nextElement();      contentHandler.endPrefixMapping(prefix);    }  }  nsSupport.popContext();}  }
class C{  @Override public String open(){  Shell shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  shell.pack();  textToTest.setText("");  regEx.setText(getInput() == null ? "" : getInput().trim());  SWTUtils.center(shell);  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return input;}  }
class C{  public void checkAdmin(){  if (!admin) {    throw DbException.get(ErrorCode.ADMIN_RIGHTS_REQUIRED);  }}  }
class C{  public static Element detectHashedPostTree(Element signedElement,String postXPath){  Element signedPostPart=signedElement;  Node signedPostPartParent=signedPostPart.getParentNode();  final XPathFactory factory=XPathFactory.newInstance();  final XPath xpath=factory.newXPath();  final Document ownerDocument=signedElement.getOwnerDocument();  final NamespaceResolver nsr=new NamespaceResolver(ownerDocument);  xpath.setNamespaceContext(nsr);  XPathExpression expr=null;  try {    expr=xpath.compile(postXPath);  } catch (  XPathExpressionException e1) {    LOG.warn("No valid PostXPath: " + postXPath);    return null;  }  NodeList nodes;  while (signedPostPartParent != null && signedPostPartParent.getNodeType() == Node.ELEMENT_NODE) {    try {      nodes=(NodeList)expr.evaluate(signedPostPartParent,XPathConstants.NODESET);    } catch (    XPathExpressionException e) {      continue;    }    if (nodes.getLength() == 1) {      if (LOG.isDebugEnabled()) {        LOG.debug("Matched with postXPath from Element: " + signedPostPart.getNodeName());      }      break;    }    signedPostPart=(Element)signedPostPartParent;    signedPostPartParent=signedPostPart.getParentNode();  }  return signedPostPart;}  }
class C{  public void putAll(Map m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0) {    return;  }  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (Iterator i=m.entrySet().iterator(); i.hasNext(); ) {    Map.Entry e=(Map.Entry)i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  public boolean mouseMoved(MouseEvent e){  return false;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.592 -0500",hash_original_method="CB5496AEB6C4A3E562F8F77722FABABF",hash_generated_method="8B6696BF29FAAB0012126FB460B9E25B") public ProtocolException(){  super();}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  @SuppressWarnings("unchecked") public E addOrGet(E obj){  int index=insertKey(obj);  if (index < 0) {    obj=(E)_set[-index - 1];  }  postInsertHook(consumeFreeSlot);  return obj;}  }
class C{  public XMLSignatureInput(byte[] inputOctets){  this.bytes=inputOctets;}  }
class C{  private void refresh(){  final Set<ItemSpec> itemSpecSet=new HashSet<ItemSpec>();  for (final Iterator i=descriptionList.iterator(); i.hasNext(); ) {    final ConflictDescription description=(ConflictDescription)i.next();    final ItemSpec[] descriptionSpecs=description.getConflictItemSpecs();    if (descriptionSpecs != null) {      for (int j=0; j < descriptionSpecs.length; j++) {        itemSpecSet.add(descriptionSpecs[j]);      }    }  }  final ItemSpec[] requerySpecs=itemSpecSet.toArray(new ItemSpec[itemSpecSet.size()]);  final QueryConflictsCommand requeryCommand=new QueryConflictsCommand(repository,requerySpecs);  final IStatus requeryStatus=UICommandExecutorFactory.newUICommandExecutor(getShell()).execute(requeryCommand);  if (requeryStatus.isOK()) {    descriptionList.clear();    descriptionList.addAll(Arrays.asList(requeryCommand.getConflictDescriptions()));  }  refreshLabels();}  }
class C{  public static org.smpte_ra.schemas.st2067_2_2016.PKL.UserText buildPKLUserTextType_2016(String value,String language){  org.smpte_ra.schemas.st2067_2_2016.PKL.UserText userText=new org.smpte_ra.schemas.st2067_2_2016.PKL.UserText();  userText.setValue(value);  userText.setLanguage(language);  return userText;}  }
class C{  public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TYPED_ELEMENT;}  }
class C{  private boolean checkRecoveredMethod(){  if (this.currentElement instanceof RecoveredMethod) {    if (this.indexOfAssistIdentifier() < 0)     return false;    if (this.lastErrorEndPosition <= this.cursorLocation && Util.getLineNumber(this.lastErrorEndPosition,this.scanner.lineEnds,0,this.scanner.linePtr) == Util.getLineNumber(((CompletionScanner)this.scanner).completedIdentifierStart,this.scanner.lineEnds,0,this.scanner.linePtr)) {      return false;    }    RecoveredMethod recoveredMethod=(RecoveredMethod)this.currentElement;    if (!recoveredMethod.foundOpeningBrace && this.lastIgnoredToken == -1) {      this.assistNode=this.getTypeReference(0);      this.lastCheckPoint=this.assistNode.sourceEnd + 1;      this.isOrphanCompletionNode=true;      return true;    }  }  return false;}  }
class C{  @Inline static void compilePutfieldBarrierAddressImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.addressFieldWriteBarrierMethod);}  }
class C{  public void testIdWithJavaColon(){  String jndiName="java:DataSource";  String propertyString=DatasourcePropertySet.JNDI_LOCATION + "=" + jndiName;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("DataSource",ds.getId());}  }
class C{  private void makeTunnel(TunnelRequest tunnelRequest) throws IOException {  RawHeaders requestHeaders=tunnelRequest.getRequestHeaders();  while (true) {    out.write(requestHeaders.toBytes());    RawHeaders responseHeaders=RawHeaders.fromBytes(in);switch (responseHeaders.getResponseCode()) {case HTTP_OK:      return;case HTTP_PROXY_AUTH:    requestHeaders=new RawHeaders(requestHeaders);  URL url=new URL("https",tunnelRequest.host,tunnelRequest.port,"/");boolean credentialsFound=HttpAuthenticator.processAuthHeader(route.address.authenticator,HTTP_PROXY_AUTH,responseHeaders,requestHeaders,route.proxy,url);if (credentialsFound) {continue;} else {throw new IOException("Failed to authenticate with proxy");}default :throw new IOException("Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());}}}  }
class C{  @Override public final int read() throws IOException {  if (_readLength <= _readOffset) {    if (!readBuffer()) {      return -1;    }  }  return _readBuffer[_readOffset++] & 0xff;}  }
class C{  private void defineScrollBars(UIDefaults d){  d.put("scrollBarThumbBorderBasePressed",new Color(0x4879bf));  d.put("scrollBarThumbInteriorBasePressed",new Color(0x82a8ca));  d.put("scrollBarButtonBase",Color.WHITE);  d.put("scrollBarButtonBasePressed",new Color(0xa1bfdb));  d.put("scrollBarTrackBackgroundBase",Color.WHITE);  d.put("scrollBarTrackGradientBase",d.get("seaGlassTransparent"));  d.put("ScrollBar.incrementButtonGap",new Integer(-7));  d.put("ScrollBar.decrementButtonGap",new Integer(-7));  d.put("ScrollBar.capSize",new Integer(11));  d.put("ScrollBar.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ScrollBar.thumbHeight",new Integer(15));  d.put("ScrollBar.minimumThumbSize",new DimensionUIResource(29,29));  d.put("ScrollBar.maximumThumbSize",new DimensionUIResource(1000,1000));  String c=PAINTER_PREFIX + "ScrollBarButtonPainter";  String p="ScrollBar:\"ScrollBar.button\"";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".size",new Integer(22));  d.put(p + ".States","Enabled,Pressed,MouseOver,IncreaseButton,Disabled,ButtonsTogether");  d.put(p + ".IncreaseButton",new ScrollBarButtonIsIncreaseButtonState());  d.put(p + ".ButtonsTogether",new ScrollBarButtonsTogetherState());  d.put(p + ".foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[MouseOver].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_PRESSED));  d.put(p + "[MouseOver+Pressed].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_PRESSED));  d.put(p + "[IncreaseButton+Enabled].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_ENABLED));  d.put(p + "[MouseOver+IncreaseButton].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_ENABLED));  d.put(p + "[IncreaseButton+Disabled].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_DISABLED));  d.put(p + "[IncreaseButton+Pressed].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_PRESSED));  d.put(p + "[MouseOver+IncreaseButton+Pressed].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_PRESSED));  d.put(p + "[Enabled+ButtonsTogether].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_ENABLED_TOGETHER));  d.put(p + "[Disabled+ButtonsTogether].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_DISABLED_TOGETHER));  d.put(p + "[Pressed+ButtonsTogether].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_PRESSED_TOGETHER));  d.put(p + "[IncreaseButton+Enabled+ButtonsTogether].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_ENABLED_TOGETHER));  d.put(p + "[IncreaseButton+Disabled+ButtonsTogether].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_DISABLED_TOGETHER));  d.put(p + "[IncreaseButton+Pressed+ButtonsTogether].foregroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_INCREASE_PRESSED_TOGETHER));  c=PAINTER_PREFIX + "ScrollBarThumbPainter";  p="ScrollBar:ScrollBarThumb";  d.put(p + ".States","Enabled,Pressed,MouseOver,Disabled");  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ScrollBarThumbPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ScrollBarThumbPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,ScrollBarThumbPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,ScrollBarThumbPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[MouseOver+Pressed].backgroundPainter",new LazyPainter(c,ScrollBarThumbPainter.Which.BACKGROUND_PRESSED));  c=PAINTER_PREFIX + "ScrollBarTrackPainter";  p="ScrollBar:ScrollBarTrack";  d.put(p + ".States","Enabled,Disabled");  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ScrollBarTrackPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ScrollBarTrackPainter.Which.BACKGROUND_ENABLED));  c=PAINTER_PREFIX + "ScrollBarButtonPainter";  p="ScrollBar:ScrollBarCap";  d.put(p + ".States","Enabled,Disabled");  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_CAP));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,ScrollBarButtonPainter.Which.FOREGROUND_CAP));}  }
class C{  public <T>T readObject(){  return serializer.readObject(buffer);}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  public static long toExpireTime(long ttl){  assert ttl != CU.TTL_ZERO && ttl != CU.TTL_NOT_CHANGED && ttl >= 0 : "Invalid TTL: " + ttl;  long expireTime=ttl == CU.TTL_ETERNAL ? CU.EXPIRE_TIME_ETERNAL : U.currentTimeMillis() + ttl;  if (expireTime < 0)   expireTime=CU.EXPIRE_TIME_ETERNAL;  return expireTime;}  }
class C{  public static int ceil(float num){  int ceil=(int)num;  return (ceil == num) ? ceil : ((num > 0) ? (ceil + 1) : ceil);}  }
class C{  public static Number max(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return Math.max(a.doubleValue(),b.doubleValue());  } else {    return Math.max(a.longValue(),b.longValue());  }}  }
class C{  public long length(){  return uncompressedSize;}  }
class C{  @RpcMethod public DeleteDisksResponse deleteDisks(List<String> diskIds) throws InterruptedException, RpcException {  SyncHandler<DeleteDisksResponse,Host.AsyncClient.delete_disks_call> syncHandler=new SyncHandler<>();  deleteDisks(diskIds,syncHandler);  syncHandler.await();  logger.info("finished delete_disks diskIds {}, target {}",diskIds,getHostIp());  return ResponseValidator.checkDeleteDisksResponse(syncHandler.getResponse());}  }
class C{  private double computeMaxAgentSphereRadius(){  double max=Double.MIN_VALUE;  double r;  ListIterator<IMovingAgent> li=agents.listIterator();  while (li.hasNext()) {    r=li.next().getSphereRadius();    if (r > max)     max=r;  }  return max;}  }
class C{  public void removeListener(GridLocalEventListener lsnr){  cctx.gridEvents().removeLocalEventListener(lsnr);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int col, row, numImages, x, y;  int cols, rows;  int a=0;  double noData;  double z, zn;  int progress=0;  String progressMessage="";  String inputFilesString=null;  String[] imageFiles;  long[] n;  double[] mean;  String[] shortNames;  String[] units;  double[] I;  double[] stdDev;  double totalDeviation;  int[] dX;  int[] dY;  double numerator, W;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (args[1].toLowerCase().contains("bishop")) {    dX=new int[]{1,1,-1,-1};    dY=new int[]{-1,1,1,-1};  } else   if (args[1].toLowerCase().contains("queen") || args[1].toLowerCase().contains("king")) {    dX=new int[]{1,1,1,0,-1,-1,-1,0};    dY=new int[]{-1,0,1,1,1,0,-1,-1};  } else {    dX=new int[]{1,0,-1,0};    dY=new int[]{0,1,0,-1};  }  try {    double sigmaZ;    n=new long[numImages];    mean=new double[numImages];    I=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    stdDev=new double[numImages];    double[] E_I=new double[numImages];    double[] varNormality=new double[numImages];    double[] varRandomization=new double[numImages];    double[] zN=new double[numImages];    double[] zR=new double[numImages];    double[] pValueN=new double[numImages];    double[] pValueR=new double[numImages];    double[] data;    NormalDistribution distribution=new NormalDistribution(0,1);    for (a=0; a < numImages; a++) {      progressMessage="Image " + (a + 1) + " of "+ numImages;      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      sigmaZ=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            sigmaZ+=data[col];            n[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      mean[a]=sigmaZ / n[a];      E_I[a]=-1.0 / (n[a] - 1);      totalDeviation=0;      W=0;      numerator=0;      double S2=0;      double wij;      int numNeighbours=dX.length;      double k=0;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            totalDeviation+=(z - mean[a]) * (z - mean[a]);            k+=(z - mean[a]) * (z - mean[a]) * (z - mean[a])* (z - mean[a]);            wij=0;            for (int i=0; i < numNeighbours; i++) {              x=col + dX[i];              y=row + dY[i];              zn=image.getValue(y,x);              if (zn != noData) {                W+=1.0;                numerator+=(z - mean[a]) * (zn - mean[a]);                wij+=1;              }            }            S2+=wij * wij;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      double S1=4 * W;      S2=S2 * 4;      stdDev[a]=Math.sqrt(totalDeviation / (n[a] - 1));      I[a]=n[a] * numerator / (totalDeviation * W);      varNormality[a]=(n[a] * n[a] * S1 - n[a] * S2 + 3 * W * W) / ((W * W) * (n[a] * n[a] - 1));      zN[a]=(I[a] - E_I[a]) / (Math.sqrt(varNormality[a]));      pValueN[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zN[a])));      k=k / (n[a] * stdDev[a] * stdDev[a]* stdDev[a]* stdDev[a]);      varRandomization[a]=(n[a] * ((n[a] * n[a] - 3 * n[a] + 3) * S1 - n[a] * S2 + 3 * W * W) - k * (n[a] * n[a] - n[a]) * S1 - 2 * n[a] * S1 + 6 * W * W) / ((n[a] - 1) * (n[a] - 2) * (n[a] - 3)* W* W);      zR[a]=(I[a] - E_I[a]) / (Math.sqrt(varRandomization[a]));      pValueR[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zR[a])));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress(progressMessage,progress);    }    StringBuilder retstr=new StringBuilder();    DecimalFormat df1=new DecimalFormat("###,###,###,###");    DecimalFormat df2=new DecimalFormat("0.0000");    retstr.append("SPATIAL AUTOCORRELATION\n");    for (a=0; a < numImages; a++) {      retstr.append("\n");      retstr.append("Input image:\t\t\t").append(shortNames[a]).append("\n");      retstr.append("Number of cells included:\t\t").append(df1.format(n[a])).append("\n");      if (units[a].equals("")) {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append("\n");      } else {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append(" ").append(units[a]).append("\n");      }      retstr.append("Spatial autocorrelation (Moran's I):\t").append(df2.format(I[a])).append("\n");      retstr.append("Expected value:\t\t").append(df2.format(E_I[a])).append("\n");      retstr.append("Variance of I (normality assumption):\t").append(df2.format(varNormality[a])).append("\n");      retstr.append("z test stat (normality assumption):\t").append(df2.format(zN[a])).append("\n");      retstr.append("p-value (normality assumption):\t").append(df2.format(pValueN[a])).append("\n");      retstr.append("Variance of I (randomization assumption):\t").append(df2.format(varRandomization[a])).append("\n");      retstr.append("z test stat (randomization assumption):\t").append(df2.format(zR[a])).append("\n");      retstr.append("p-value (randomization assumption):\t").append(df2.format(pValueR[a])).append("\n");    }    returnData(retstr.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public XNetLight(XNetTrafficController tc,XNetLightManager lm,String systemName,String userName){  super(systemName,userName);  this.tc=tc;  this.lm=lm;  initializeLight(systemName);}  }
class C{  public <T extends JCTree>void printExprs(List<T> trees,String sep) throws IOException {  if (trees.nonEmpty()) {    printExpr(trees.head);    for (List<T> l=trees.tail; l.nonEmpty(); l=l.tail) {      print(sep);      if (sep.endsWith("\n")) {        align();      }      printExpr(l.head);    }  }}  }
class C{  private void read(){  data.reset();  type=data.readByte();  data.readShortInt();  parentPageId=data.readInt();  if (type == (Page.TYPE_DATA_OVERFLOW | Page.FLAG_LAST)) {    size=data.readShortInt();    nextPage=0;  } else   if (type == Page.TYPE_DATA_OVERFLOW) {    nextPage=data.readInt();    size=store.getPageSize() - data.length();  } else {    throw DbException.get(ErrorCode.FILE_CORRUPTED_1,"page:" + getPos() + " type:"+ type);  }  start=data.length();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.539 -0500",hash_original_method="8AF6434E2BA3E41CBFFC05A34FB3A23C",hash_generated_method="9EE24CFBB8B409AF1FACC1FD06F560DA") public void restat(String path){  native_restat(path);}  }
class C{  public void removed(Container cont){  movingPoints.clear();  stopTimer();}  }
class C{  protected void recordBlockSnapshotSessionEvent(DbClient dbClient,BlockSnapshotSession snapSession,String evtType,Operation.Status status,String description){  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(snapSession,evtType,description,"",dbClient,ControllerUtils.BLOCK_EVENT_SERVICE,RecordType.Event.name(),ControllerUtils.BLOCK_EVENT_SOURCE);  try {    eventManager.recordEvents(event);    s_logger.info("Bourne {} event recorded",evtType);  } catch (  Exception ex) {    s_logger.error("Failed to record event. Event description: {}. Error: ",evtType,ex);  }}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  @Override protected boolean isInAlphabet(final byte octet){  return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;}  }
class C{  @Deprecated public InputDialog(String key){  this(ApplicationFrame.getApplicationFrame(),key);}  }
class C{  public static double[] calcHistogram(ArrayList<Double> data,double min,double max,int numBins,boolean logrpu){  final double[] result=new double[numBins];  final double binSize=(max - min) / numBins;  for (  double d : data) {    if (logrpu) {      d=Math.log10(d);    }    int bin=(int)((d - min) / binSize);    if (bin < 0) {    } else     if (bin >= numBins) {    } else {      result[bin]+=1.0;    }  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public IconicsDrawableOld(Context context,ITypeface font,IIcon icon){  this.context=context;  this.icon=icon;  paint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  paint.setTypeface(font.getTypeface(context));  paint.setStyle(Paint.Style.STROKE);  paint.setTextAlign(Paint.Align.CENTER);  paint.setUnderlineText(false);  paint.setColor(Color.BLACK);  paint.setAntiAlias(true);}  }
class C{  public void addRecord(Record r,int section){  if (sections[section] == null)   sections[section]=new LinkedList();  header.incCount(section);  sections[section].add(r);}  }
class C{  public synchronized void progressStop(){  if (this.progressDialog != null) {    this.progressDialog.dismiss();    this.progressDialog=null;  }}  }
class C{  public static Color parseColorFromProperties(Properties p,String propName,String dfault) throws NumberFormatException {  return ColorFactory.parseColorFromProperties(p,propName,dfault,false);}  }
class C{  public PrincipalId(String name,String domain){  ValidateUtil.validateNotEmpty(name,"name");  ValidateUtil.validateNotEmpty(domain,"domain");  _name=name;  _domain=domain;}  }
class C{  public static ByteBuffer ioResourceToByteBuffer(String resource,int bufferSize) throws IOException {  ByteBuffer buffer;  URL url=Thread.currentThread().getContextClassLoader().getResource(resource);  File file=new File(url.getFile());  if (file.isFile()) {    FileInputStream fis=new FileInputStream(file);    FileChannel fc=fis.getChannel();    buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    fc.close();    fis.close();  } else {    buffer=BufferUtils.createByteBuffer(bufferSize);    InputStream source=url.openStream();    if (source == null)     throw new FileNotFoundException(resource);    try {      ReadableByteChannel rbc=Channels.newChannel(source);      try {        while (true) {          int bytes=rbc.read(buffer);          if (bytes == -1)           break;          if (buffer.remaining() == 0)           buffer=resizeBuffer(buffer,buffer.capacity() * 2);        }        buffer.flip();      }  finally {        rbc.close();      }    }  finally {      source.close();    }  }  return buffer;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static <T>LazyPQueueX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  public ElfHeaderInfo(){  initComponents();  ELFInfoArea.append(PbpInfo);  ELFInfoArea.append(ElfInfo);  ELFInfoArea.append(ProgInfo);  ELFInfoArea.append(SectInfo);  WindowPropSaver.loadWindowProperties(this);}  }
class C{  public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public void arc(double x,double y,double w,double h,double startAngle,double sweepAngle){  arc(x,y,w,h,startAngle,sweepAngle,false);}  }
class C{  void openPortButtonActionPerformed(java.awt.event.ActionEvent e){  log.info("Open button pushed");  openPortButton.setEnabled(false);  portBox.setEnabled(false);  speedBox.setEnabled(false);  openPort((String)portBox.getSelectedItem(),"JMRI");  readerThread=new Thread(new Reader());  readerThread.start();  log.info("Open button processing complete");  addUserGui();}  }
class C{  public ColorList(){}  }
class C{  public static void registerFuelHandler(IFuelHandler handler,FuelType type){switch (type) {case CRYSTALLIZER:    crystallizerFuelHandlers.add(handler);  break;case TRANSMUTATOR:transmutatorFuelHandlers.add(handler);break;case FURNACE:GameRegistry.registerFuelHandler(handler);}}  }
class C{  public void addIstore(int n){  if (n < 4)   addOpcode(59 + n); else   if (n < 0x100) {    addOpcode(ISTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ISTORE);    addIndex(n);  }}  }
class C{  public void add(double d){  data.add((float)d);}  }
class C{  @Override public void show(){  if (myShowDialog) {    super.show();  } else {    mySelectedDir=FileChooser.chooseFile(myFileDescriptor,myProject,null);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.427 -0500",hash_original_method="3259964D642F1E81BEF73199EA8A73AC",hash_generated_method="9E5E54730E70BE586A1A95C1A642A8DE") static boolean isServiceAvailable(){  return serviceAvailable;}  }
class C{  public Observable<Api.NewComment> postComment(long itemId,long parentId,String comment){  return api.postComment(null,itemId,parentId,comment).filter(null).map(null);}  }
class C{  public HMMChineseTokenizer(AttributeFactory factory){  super(factory,(BreakIterator)sentenceProto.clone());}  }
class C{  public static String stemToken(String token){  if (whitespace.matcher(token).find()) {    throw new IllegalArgumentException("Token may not contain a space: " + token);  }  return morpha(cleanText(token),false);}  }
class C{  public WalletData loadFromFile(File walletFile) throws WalletLoadException, WalletVersionException {  if (walletFile == null) {    return null;  }  String walletFilenameToUseInModel=walletFile.getAbsolutePath();  try {    WalletInfoData walletInfo;    if (isWalletSerialised(walletFile)) {      throw new WalletLoadException("Could not load wallet '" + walletFilenameToUseInModel + "'. Serialized wallets are no longer supported.");    } else {      walletInfo=new WalletInfoData(walletFilenameToUseInModel,null,MultiBitWalletVersion.PROTOBUF_ENCRYPTED);    }    boolean useBackupWallets=(!walletFile.exists() || walletFile.length() == 0);    boolean walletWasLoadedSuccessfully=false;    Collection<String> errorMessages=new ArrayList<String>();    Wallet wallet=null;    if (!useBackupWallets) {      FileInputStream fileInputStream=new FileInputStream(walletFile);      InputStream stream=null;      try {        stream=new BufferedInputStream(fileInputStream);        wallet=Wallet.loadFromFileStream(stream);        walletWasLoadedSuccessfully=true;      } catch (      WalletVersionException wve) {        throw wve;      }catch (      Exception e) {        e.printStackTrace();        String description=e.getClass().getCanonicalName() + " " + e.getMessage();        log.error(description);        errorMessages.add(description);      } finally {        if (stream != null) {          stream.close();        }        fileInputStream.close();      }    }    if (!walletWasLoadedSuccessfully) {      useBackupWallets=true;      Collection<String> backupWalletsToTry=BackupManager.INSTANCE.calculateBestWalletBackups(walletFile,walletInfo);      Iterator<String> iterator=backupWalletsToTry.iterator();      while (!walletWasLoadedSuccessfully && iterator.hasNext()) {        String walletToTry=iterator.next();        FileInputStream fileInputStream=new FileInputStream(new File(walletToTry));        InputStream stream=null;        try {          stream=new BufferedInputStream(fileInputStream);          wallet=Wallet.loadFromFileStream(stream);          walletWasLoadedSuccessfully=true;          MessageManager.INSTANCE.addMessage(new Message(bitcoinController.getLocaliser().getString("fileHandler.walletCannotLoadUsingBackup",new String[]{walletFilenameToUseInModel,walletToTry})));        } catch (        Exception e) {          e.printStackTrace();          String description=e.getClass().getCanonicalName() + " " + e.getMessage();          log.error(description);          errorMessages.add(description);        } finally {          if (stream != null) {            stream.close();          }          fileInputStream.close();        }      }    }    WalletData perWalletModelData=null;    if (walletWasLoadedSuccessfully) {      if (walletInfo != null) {        String walletDescriptionInInfo=walletInfo.getProperty(WalletInfoData.DESCRIPTION_PROPERTY);        if ((walletDescriptionInInfo == null || walletDescriptionInInfo.length() == 0) && wallet.getDescription() != null) {          walletInfo.put(WalletInfoData.DESCRIPTION_PROPERTY,wallet.getDescription());        }        walletInfo.checkAllReceivingAddressesAppearInWallet(wallet);        walletInfo.setWalletVersion(wallet.getVersion());      }      BackupManager.INSTANCE.createBackupDirectories(walletFile);      wallet.setNetworkParameters(bitcoinController.getModel().getNetworkParameters());      perWalletModelData=bitcoinController.getModel().addWallet(this.bitcoinController,wallet,walletFilenameToUseInModel);      perWalletModelData.setWalletInfo(walletInfo);      if (useBackupWallets) {        walletInfo.put(BitcoinModel.WALLET_BACKUP_FILE,"");        savePerWalletModelData(perWalletModelData,true);      }synchronized (walletInfo) {        rememberFileSizesAndLastModified(new File(walletFilenameToUseInModel),walletInfo);        perWalletModelData.setDirty(false);      }    } else {      if (walletInfo != null) {        walletInfo.put(BitcoinModel.WALLET_BACKUP_FILE,"");      }      String messageText=bitcoinController.getLocaliser().getString("fileHandler.unableToLoadWalletOrBackups",new String[]{walletFilenameToUseInModel});      if (!errorMessages.isEmpty()) {        StringBuilder errorMessagesAsString=new StringBuilder();        for (        String errorText : errorMessages) {          if (errorMessagesAsString.length() > 0) {            errorMessagesAsString.append("\n");          }          errorMessagesAsString.append(errorText);        }        messageText=messageText + "\n" + bitcoinController.getLocaliser().getString("deleteWalletConfirmDialog.walletDeleteError2",new String[]{errorMessagesAsString.toString()});      }      MessageManager.INSTANCE.addMessage(new Message(messageText));    }    return perWalletModelData;  } catch (  WalletVersionException wve) {    throw wve;  }catch (  Exception e) {    e.printStackTrace();    log.error(e.getClass().getCanonicalName() + " " + e.getMessage());    throw new WalletLoadException(e.getClass().getCanonicalName() + " " + e.getMessage(),e);  }}  }
class C{  public ShortArrayList(){  this(10);}  }
class C{  private void run() throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("jdbcSampleWriter");  JdbcStreams myDb=new JdbcStreams(t,null,null);  TStream<Person> persons=t.collection(PersonData.loadPersonData(props));  myDb.executeStatement(persons,null,null);  tp.submit(t);}  }
class C{  protected boolean shouldWrite(long superstep){  return (frequency == AT_THE_END && superstep == LAST_SUPERSTEP) || (frequency != NEVER && superstep % frequency == 0 && frequency > 0);}  }
class C{  @Override public void fillPolygon(Polygon p){}  }
class C{  @Override public void updateObject(int columnIndex,Object x,int scale) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + columnIndex + ", x, "+ scale+ ");");    }    update(columnIndex,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void addFarSideEntryOp(RegionCommit.FarSideEntryOp entryOp){  this.farSideEntryOps.add(entryOp);}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case TypeRefsPackage.TYPE_REF:{      TypeRef typeRef=(TypeRef)theEObject;      T result=caseTypeRef(typeRef);      if (result == null)       result=caseTypeArgument(typeRef);      if (result == null)       result=defaultCase(theEObject);      return result;    }case TypeRefsPackage.STATIC_BASE_TYPE_REF:{    StaticBaseTypeRef staticBaseTypeRef=(StaticBaseTypeRef)theEObject;    T result=caseStaticBaseTypeRef(staticBaseTypeRef);    if (result == null)     result=caseTypeRef(staticBaseTypeRef);    if (result == null)     result=caseTypeArgument(staticBaseTypeRef);    if (result == null)     result=defaultCase(theEObject);    return result;  }case TypeRefsPackage.BASE_TYPE_REF:{  BaseTypeRef baseTypeRef=(BaseTypeRef)theEObject;  T result=caseBaseTypeRef(baseTypeRef);  if (result == null)   result=caseStaticBaseTypeRef(baseTypeRef);  if (result == null)   result=caseTypeRef(baseTypeRef);  if (result == null)   result=caseTypeArgument(baseTypeRef);  if (result == null)   result=defaultCase(theEObject);  return result;}case TypeRefsPackage.COMPOSED_TYPE_REF:{ComposedTypeRef composedTypeRef=(ComposedTypeRef)theEObject;T result=caseComposedTypeRef(composedTypeRef);if (result == null) result=caseStaticBaseTypeRef(composedTypeRef);if (result == null) result=caseTypeRef(composedTypeRef);if (result == null) result=caseTypeArgument(composedTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.UNION_TYPE_EXPRESSION:{UnionTypeExpression unionTypeExpression=(UnionTypeExpression)theEObject;T result=caseUnionTypeExpression(unionTypeExpression);if (result == null) result=caseComposedTypeRef(unionTypeExpression);if (result == null) result=caseStaticBaseTypeRef(unionTypeExpression);if (result == null) result=caseTypeRef(unionTypeExpression);if (result == null) result=caseTypeArgument(unionTypeExpression);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION:{IntersectionTypeExpression intersectionTypeExpression=(IntersectionTypeExpression)theEObject;T result=caseIntersectionTypeExpression(intersectionTypeExpression);if (result == null) result=caseComposedTypeRef(intersectionTypeExpression);if (result == null) result=caseStaticBaseTypeRef(intersectionTypeExpression);if (result == null) result=caseTypeRef(intersectionTypeExpression);if (result == null) result=caseTypeArgument(intersectionTypeExpression);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.THIS_TYPE_REF:{ThisTypeRef thisTypeRef=(ThisTypeRef)theEObject;T result=caseThisTypeRef(thisTypeRef);if (result == null) result=caseBaseTypeRef(thisTypeRef);if (result == null) result=caseStaticBaseTypeRef(thisTypeRef);if (result == null) result=caseTypeRef(thisTypeRef);if (result == null) result=caseTypeArgument(thisTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.THIS_TYPE_REF_NOMINAL:{ThisTypeRefNominal thisTypeRefNominal=(ThisTypeRefNominal)theEObject;T result=caseThisTypeRefNominal(thisTypeRefNominal);if (result == null) result=caseThisTypeRef(thisTypeRefNominal);if (result == null) result=caseBaseTypeRef(thisTypeRefNominal);if (result == null) result=caseStaticBaseTypeRef(thisTypeRefNominal);if (result == null) result=caseTypeRef(thisTypeRefNominal);if (result == null) result=caseTypeArgument(thisTypeRefNominal);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL:{ThisTypeRefStructural thisTypeRefStructural=(ThisTypeRefStructural)theEObject;T result=caseThisTypeRefStructural(thisTypeRefStructural);if (result == null) result=caseThisTypeRef(thisTypeRefStructural);if (result == null) result=caseStructuralTypeRef(thisTypeRefStructural);if (result == null) result=caseBaseTypeRef(thisTypeRefStructural);if (result == null) result=caseStaticBaseTypeRef(thisTypeRefStructural);if (result == null) result=caseTypeRef(thisTypeRefStructural);if (result == null) result=caseTypeArgument(thisTypeRefStructural);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.BOUND_THIS_TYPE_REF:{BoundThisTypeRef boundThisTypeRef=(BoundThisTypeRef)theEObject;T result=caseBoundThisTypeRef(boundThisTypeRef);if (result == null) result=caseThisTypeRef(boundThisTypeRef);if (result == null) result=caseStructuralTypeRef(boundThisTypeRef);if (result == null) result=caseBaseTypeRef(boundThisTypeRef);if (result == null) result=caseStaticBaseTypeRef(boundThisTypeRef);if (result == null) result=caseTypeRef(boundThisTypeRef);if (result == null) result=caseTypeArgument(boundThisTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.PARAMETERIZED_TYPE_REF:{ParameterizedTypeRef parameterizedTypeRef=(ParameterizedTypeRef)theEObject;T result=caseParameterizedTypeRef(parameterizedTypeRef);if (result == null) result=caseBaseTypeRef(parameterizedTypeRef);if (result == null) result=caseStaticBaseTypeRef(parameterizedTypeRef);if (result == null) result=caseTypeRef(parameterizedTypeRef);if (result == null) result=caseTypeArgument(parameterizedTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.STRUCTURAL_TYPE_REF:{StructuralTypeRef structuralTypeRef=(StructuralTypeRef)theEObject;T result=caseStructuralTypeRef(structuralTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL:{ParameterizedTypeRefStructural parameterizedTypeRefStructural=(ParameterizedTypeRefStructural)theEObject;T result=caseParameterizedTypeRefStructural(parameterizedTypeRefStructural);if (result == null) result=caseParameterizedTypeRef(parameterizedTypeRefStructural);if (result == null) result=caseStructuralTypeRef(parameterizedTypeRefStructural);if (result == null) result=caseBaseTypeRef(parameterizedTypeRefStructural);if (result == null) result=caseStaticBaseTypeRef(parameterizedTypeRefStructural);if (result == null) result=caseTypeRef(parameterizedTypeRefStructural);if (result == null) result=caseTypeArgument(parameterizedTypeRefStructural);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.EXISTENTIAL_TYPE_REF:{ExistentialTypeRef existentialTypeRef=(ExistentialTypeRef)theEObject;T result=caseExistentialTypeRef(existentialTypeRef);if (result == null) result=caseTypeRef(existentialTypeRef);if (result == null) result=caseTypeArgument(existentialTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.UNKNOWN_TYPE_REF:{UnknownTypeRef unknownTypeRef=(UnknownTypeRef)theEObject;T result=caseUnknownTypeRef(unknownTypeRef);if (result == null) result=caseTypeRef(unknownTypeRef);if (result == null) result=caseTypeArgument(unknownTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.TYPE_TYPE_REF:{TypeTypeRef typeTypeRef=(TypeTypeRef)theEObject;T result=caseTypeTypeRef(typeTypeRef);if (result == null) result=caseBaseTypeRef(typeTypeRef);if (result == null) result=caseStaticBaseTypeRef(typeTypeRef);if (result == null) result=caseTypeRef(typeTypeRef);if (result == null) result=caseTypeArgument(typeTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.TYPE_ARGUMENT:{TypeArgument typeArgument=(TypeArgument)theEObject;T result=caseTypeArgument(typeArgument);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.WILDCARD:{Wildcard wildcard=(Wildcard)theEObject;T result=caseWildcard(wildcard);if (result == null) result=caseTypeArgument(wildcard);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF:{FunctionTypeExprOrRef functionTypeExprOrRef=(FunctionTypeExprOrRef)theEObject;T result=caseFunctionTypeExprOrRef(functionTypeExprOrRef);if (result == null) result=caseStaticBaseTypeRef(functionTypeExprOrRef);if (result == null) result=caseTypeRef(functionTypeExprOrRef);if (result == null) result=caseTypeArgument(functionTypeExprOrRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.FUNCTION_TYPE_REF:{FunctionTypeRef functionTypeRef=(FunctionTypeRef)theEObject;T result=caseFunctionTypeRef(functionTypeRef);if (result == null) result=caseParameterizedTypeRef(functionTypeRef);if (result == null) result=caseFunctionTypeExprOrRef(functionTypeRef);if (result == null) result=caseBaseTypeRef(functionTypeRef);if (result == null) result=caseStaticBaseTypeRef(functionTypeRef);if (result == null) result=caseTypeRef(functionTypeRef);if (result == null) result=caseTypeArgument(functionTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION:{FunctionTypeExpression functionTypeExpression=(FunctionTypeExpression)theEObject;T result=caseFunctionTypeExpression(functionTypeExpression);if (result == null) result=caseFunctionTypeExprOrRef(functionTypeExpression);if (result == null) result=caseStaticBaseTypeRef(functionTypeExpression);if (result == null) result=caseTypeRef(functionTypeExpression);if (result == null) result=caseTypeArgument(functionTypeExpression);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.DEFERRED_TYPE_REF:{DeferredTypeRef deferredTypeRef=(DeferredTypeRef)theEObject;T result=caseDeferredTypeRef(deferredTypeRef);if (result == null) result=caseTypeRef(deferredTypeRef);if (result == null) result=caseTypeArgument(deferredTypeRef);if (result == null) result=defaultCase(theEObject);return result;}case TypeRefsPackage.TYPE_VARIABLE_MAPPING:{TypeVariableMapping typeVariableMapping=(TypeVariableMapping)theEObject;T result=caseTypeVariableMapping(typeVariableMapping);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public PortUnreachableException(String detailMessage){  super(detailMessage);}  }
class C{  public static Component createHintPanel(final Component component,final String message){  Preconditions.checkNotNull(component,"IE01256: Component argument can not be null");  Preconditions.checkNotNull(message,"IE01257: Message argument can not be null");  final JPanel panel=new JPanel(new BorderLayout());  panel.add(component,BorderLayout.CENTER);  final JHintIcon hintPopup=new JHintIcon(message);  hintPopup.setBorder(new EmptyBorder(0,3,0,0));  panel.add(hintPopup,BorderLayout.EAST);  return panel;}  }
class C{  private byte[] fetchStringValue() throws BerException {  byte[] result=null;  final int backup=next;  try {    final int length=fetchLength();    if (length < 0)     throw new BerException();    if (length > (bytes.length - next))     throw new IndexOutOfBoundsException("Decoded length exceeds buffer");    final byte data[]=new byte[length];    java.lang.System.arraycopy(bytes,next,data,0,length);    next+=length;    result=data;  } catch (  BerException e) {    next=backup;    throw e;  }catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }catch (  ArithmeticException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  private void accept(Socket socket){  log.info("Client connected from {}",socket.getInetAddress());  try {    InetAddress serverAddress=dns.getAddress("gamea.clashofclans.com");    try (Connection clientConnection=new Connection(socket);Connection serverConnection=new Connection(new Socket(serverAddress,CLASH_PORT))){      ProxySession session=ProxySession.newSession(services.getMessageFactory(),clientConnection,serverConnection,filterChain);      log.info("Client {} disconnected",socket);      VillageAnalyzer.logSession(session);    }   } catch (  IOException e) {    log.info("Could not proxy connection from {}: {}",socket.getInetAddress(),e.toString());  } finally {    try {      socket.close();    } catch (    IOException e) {    }  }}  }
class C{  public void cycleAttributeNameSorting(){  SortingDirection direction=model.getSortingDirection(SortingType.NAME);switch (direction) {case UNDEFINED:    setSorting(SortingType.NAME,SortingDirection.DESCENDING);  break;case DESCENDING:setSorting(SortingType.NAME,SortingDirection.ASCENDING);break;case ASCENDING:setSorting(SortingType.NAME,SortingDirection.UNDEFINED);break;default :setSorting(SortingType.NAME,SortingDirection.UNDEFINED);}}  }
class C{  public LayoutBlock createNewLayoutBlock(String systemName,String userName){  LayoutBlock block=null;  if (userName == null || userName.equals("")) {    log.error("Attempt to create a LayoutBlock with no user name");    return null;  }  block=getByUserName(userName);  if (block != null) {    return null;  }  String sName="";  if (systemName == null) {    boolean found=true;    while (found) {      sName="ILB" + blkNum;      blkNum++;      block=getBySystemName(sName);      if (block == null) {        found=false;      }    }  } else {    block=getBySystemName((systemName.toUpperCase()));    if (block != null) {      return null;    }    sName=systemName.toUpperCase();  }  block=new LayoutBlock(sName,userName);  register(block);  return block;}  }
class C{  TestCSVParser(Reader in){  super(in);}  }
class C{  public boolean isPickQAConfirm(){  Object oo=get_Value(COLUMNNAME_IsPickQAConfirm);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void add(Integer line,String propertyName,String message){  if (line == null && propertyName == null) {    warnings.add(message);    return;  }  int code;  if (line == null && propertyName != null) {    code=35;  } else   if (line != null && propertyName == null) {    code=37;  } else {    code=36;  }  String warning=Messages.INSTANCE.getParseMessage(code,line,propertyName,message);  warnings.add(warning);}  }
class C{  public static Router createModeSeparatedRouter(Network network,Set<String> transportModes){  Network filteredNetwork=NetworkTools.filterNetworkByLinkMode(network,transportModes);  return new FastAStarRouter(filteredNetwork);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Double && val instanceof Double) {          double k=unwrapKey(key);          double v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  boolean evaluateObjectMeet(DF_LatticeCell[] operands){  ObjectCell lhs=(ObjectCell)operands[0];  if (lhs.isBOTTOM()) {    return false;  }  for (int j=1; j < operands.length; j++) {    ObjectCell r=(ObjectCell)operands[j];    if (r.isBOTTOM()) {      lhs.setBOTTOM();      return true;    }  }  boolean lhsWasTOP=lhs.isTOP();  int[] oldNumbers=null;  if (!lhsWasTOP)   oldNumbers=lhs.copyValueNumbers();  lhs.clear();  if (operands.length > 1) {    int firstNonTopRHS=-1;    for (int j=1; j < operands.length; j++) {      ObjectCell r=(ObjectCell)operands[j];      if (!r.isTOP()) {        firstNonTopRHS=j;        break;      }    }    if (firstNonTopRHS == -1) {      lhs.setTOP(true);      return false;    }    int[] rhsNumbers=((ObjectCell)operands[firstNonTopRHS]).copyValueNumbers();    if (rhsNumbers != null) {      for (      int v : rhsNumbers) {        lhs.add(v);        for (int j=firstNonTopRHS + 1; j < operands.length; j++) {          ObjectCell r=(ObjectCell)operands[j];          if (!r.contains(v)) {            lhs.remove(v);            break;          }        }      }    }  }  if (lhsWasTOP)   return true;  int[] newNumbers=lhs.copyValueNumbers();  return ObjectCell.setsDiffer(oldNumbers,newNumbers);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(cdatasectionnormalize.class,args);}  }
class C{  public List<FacetResult> runSearch() throws IOException {  index();  return search();}  }
class C{  public ASTMatcher(boolean matchDocTags){  this.matchDocTags=matchDocTags;}  }
class C{  public void removeListener(final WorkspaceListener listener){  listeners.remove(listener);}  }
class C{  public MetadataEditorCompat putBitmap(int key,Bitmap bitmap){  if (sHasRemoteControlAPIs) {    try {      mPutBitmapMethod.invoke(mActualMetadataEditor,key,bitmap);    } catch (    Exception e) {      throw new RuntimeException(e.getMessage(),e);    }  }  return this;}  }
class C{  public byte[] toByteArray(String ascii){  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  return fromAscii(ascii.toCharArray());}  }
class C{  public synchronized VasaAssociationObject[] queryAssociatedPortsForProcessor(String[] spUniqueIds) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedPortsForProcessor(): ";  log.debug(methodName + "Entry");  List<VasaAssociationObject> returnList=null;  try {    Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));    if (!supportsBlock) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    String bourneProcessorId=this.getProcessorId();    List<String> bourneStoragePortList=this.getStoragePortIds();    returnList=new ArrayList<VasaAssociationObject>();    if (!Util.isEmpty(spUniqueIds)) {      List<String> inputPortIdList=Arrays.asList(spUniqueIds);      log.debug(methodName + "input processor ids: " + inputPortIdList);      for (      String storageProcessorId : spUniqueIds) {        if (!Util.isEmpty(storageProcessorId) && !storageProcessorId.startsWith(STORAGEPROCESSOR_IDENTIFIER_PREFIX)) {          throw FaultUtil.InvalidArgument("Given processor Id is invalid:[" + storageProcessorId + "]");        }        if (!Util.isEmpty(storageProcessorId) && bourneProcessorId.equals(storageProcessorId)) {          log.debug(methodName + "Input processor Id is matching with valid processor Id:[" + storageProcessorId+ "]");          VasaAssociationObject associationObject=new VasaAssociationObject();          BaseStorageEntity entityObject=new BaseStorageEntity();          entityObject.setUniqueIdentifier(storageProcessorId);          associationObject.addEntityId(entityObject);          List<BaseStorageEntity> associatedPortList=new ArrayList<BaseStorageEntity>();          for (          String bourneStoragePortId : bourneStoragePortList) {            BaseStorageEntity associatedPort=new BaseStorageEntity();            log.debug(methodName + "Associating storage port ID [" + bourneStoragePortId+ "] to processor ID["+ storageProcessorId+ "]");            associatedPort.setUniqueIdentifier(bourneStoragePortId);            associatedPortList.add(associatedPort);          }          associationObject.setAssociatedId(associatedPortList.toArray(new BaseStorageEntity[0]));          returnList.add(associationObject);        }      }      log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");      return returnList.toArray(new VasaAssociationObject[0]);    } else     if (spUniqueIds != null && spUniqueIds.length == 0) {      log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");      return returnList.toArray(new VasaAssociationObject[0]);    }    VasaAssociationObject associationObject=new VasaAssociationObject();    BaseStorageEntity entityObject=new BaseStorageEntity();    entityObject.setUniqueIdentifier(bourneProcessorId);    associationObject.addEntityId(entityObject);    List<BaseStorageEntity> associatedPortList=new ArrayList<BaseStorageEntity>();    for (    String bourneStoragePortId : bourneStoragePortList) {      BaseStorageEntity associatedPort=new BaseStorageEntity();      log.debug(methodName + "Associating storage port ID [" + bourneStoragePortId+ "] to processor ID["+ bourneProcessorId+ "]");      associatedPort.setUniqueIdentifier(bourneStoragePortId);      associatedPortList.add(associatedPort);    }    associationObject.setAssociatedId(associatedPortList.toArray(new BaseStorageEntity[0]));    returnList.add(associationObject);  } catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }catch (  StorageFault e) {    log.error(methodName + "StorageFault occured ",e);    throw e;  }  log.debug(methodName + "Exit returning vasa association objects of size[" + returnList.size()+ "]");  return returnList.toArray(new VasaAssociationObject[0]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentfragmentnodename.class,args);}  }
class C{  private double[] subsetArray(double[] x,int start,int end){  double[] subset=new double[end - start + 1];  System.arraycopy(x,start,subset,0,end - start + 1);  return subset;}  }
class C{  @Override public void prepareAccessibilityDrop(){  if (mReorderAlarm.alarmPending()) {    mReorderAlarm.cancelAlarm();    mReorderAlarmListener.onAlarm(mReorderAlarm);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:38.195 -0500",hash_original_method="54C9C23E13579DED3FD2406679DE4E02",hash_generated_method="B1E29AB04D31D94EAFCEB50AEA23032C") private IContentProvider installProvider(Context context,IContentProvider provider,ProviderInfo info,boolean noisy,boolean noReleaseNeeded){  ContentProvider localProvider=null;  if (provider == null) {    if (noisy) {      Slog.d(TAG,"Loading provider " + info.authority + ": "+ info.name);    }    Context c=null;    ApplicationInfo ai=info.applicationInfo;    if (context.getPackageName().equals(ai.packageName)) {      c=context;    } else     if (mInitialApplication != null && mInitialApplication.getPackageName().equals(ai.packageName)) {      c=mInitialApplication;    } else {      try {        c=context.createPackageContext(ai.packageName,Context.CONTEXT_INCLUDE_CODE);      } catch (      PackageManager.NameNotFoundException e) {      }    }    if (c == null) {      Slog.w(TAG,"Unable to get context for package " + ai.packageName + " while loading content provider "+ info.name);      return null;    }    try {      final java.lang.ClassLoader cl=c.getClassLoader();      localProvider=(ContentProvider)cl.loadClass(info.name).newInstance();      provider=localProvider.getIContentProvider();      if (provider == null) {        Slog.e(TAG,"Failed to instantiate class " + info.name + " from sourceDir "+ info.applicationInfo.sourceDir);        return null;      }      if (false)       Slog.v(TAG,"Instantiating local provider " + info.name);      localProvider.attachInfo(c,info);    } catch (    java.lang.Exception e) {      if (!mInstrumentation.onException(null,e)) {        throw new RuntimeException("Unable to get provider " + info.name + ": "+ e.toString(),e);      }      return null;    }  } else   if (localLOGV) {    Slog.v(TAG,"Installing external provider " + info.authority + ": "+ info.name);  }synchronized (mProviderMap) {    IBinder jBinder=provider.asBinder();    String names[]=PATTERN_SEMICOLON.split(info.authority);    for (int i=0; i < names.length; i++) {      ProviderClientRecord pr=mProviderMap.get(names[i]);      if (pr != null) {        if (localLOGV) {          Slog.v(TAG,"installProvider: lost the race, " + "using existing named provider");        }        provider=pr.mProvider;      } else {        pr=new ProviderClientRecord(names[i],provider,localProvider);        if (localProvider == null) {          try {            jBinder.linkToDeath(pr,0);          } catch (          RemoteException e) {            return null;          }        }        mProviderMap.put(names[i],pr);      }    }    if (localProvider != null) {      ProviderClientRecord pr=mLocalProviders.get(jBinder);      if (pr != null) {        if (localLOGV) {          Slog.v(TAG,"installProvider: lost the race, " + "using existing local provider");        }        provider=pr.mProvider;      } else {        pr=new ProviderClientRecord(null,provider,localProvider);        mLocalProviders.put(jBinder,pr);      }    }    if (!noReleaseNeeded) {      ProviderRefCount prc=mProviderRefCountMap.get(jBinder);      if (prc != null) {        if (localLOGV) {          Slog.v(TAG,"installProvider: lost the race, incrementing ref count");        }        prc.count+=1;        if (prc.count == 1) {          if (localLOGV) {            Slog.v(TAG,"installProvider: " + "snatched provider from the jaws of death");          }          mH.removeMessages(H.REMOVE_PROVIDER,provider);        }      } else {        mProviderRefCountMap.put(jBinder,new ProviderRefCount(1));      }    }  }  return provider;}  }
class C{  @Override public void run(){  try {    ServerThreadMain();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      log.debug("Closing server socket channel");      serverSocketChannel.close();      selector.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static <T extends Annotation>void putAnnotation(Class<?> clazz,Class<T> annotationClass,Map<String,Object> valuesMap){  putAnnotation(clazz,annotationClass,annotationForMap(annotationClass,valuesMap));}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static List<CssMetaData<? extends Styleable,?>> createCssMetaDataList(List<CssMetaData<? extends Styleable,?>> baseList,CssMetaData<? extends Styleable,?>... metaData){  List<CssMetaData<? extends Styleable,?>> styleables=new ArrayList<>(baseList);  styleables.addAll(Arrays.asList(metaData));  return Collections.unmodifiableList(styleables);}  }
class C{  @JSFunction public void send(String data){  this.channel.writeAndFlush(new TextWebSocketFrame(data));}  }
class C{  public Offset(@WorldWind.OffsetMode int xUnits,double x,@WorldWind.OffsetMode int yUnits,double y){  this.x=x;  this.y=y;  this.xUnits=xUnits;  this.yUnits=yUnits;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 23:case 22:case 21:case 20:case 13:case 12:case 3:case 11:case 2:case 10:case 1:    return true;default :  break;}return false;}  }
class C{  public GuacamoleConnectionClosedException(String message){  super(message);}  }
class C{  protected IdentServer(Charset encoding,InetAddress localAddress,int port){  try {    this.encoding=encoding;    this.localAddress=localAddress;    this.serverSocket=new ServerSocket(port,50,localAddress);    this.port=port;  } catch (  Exception e) {    throw new RuntimeException("Could not create server socket for IdentServer on " + localAddress.toString() + ", port "+ port,e);  }}  }
class C{  public Hours minus(int hours){  return plus(FieldUtils.safeNegate(hours));}  }
class C{  public Table findTableOrView(Session session,String name){  Table table=tablesAndViews.get(name);  if (table == null && session != null) {    table=session.findLocalTempTable(name);  }  return table;}  }
class C{  public static boolean registerScrewdriver(ItemStack aTool){  return registerTool(aTool,sScrewdriverList);}  }
class C{  public void log(String message,Level level){  getBot().log(this,message,level);}  }
class C{  public void sendEvent(@NotNull String eventCategory,@NotNull String eventAction,@Nullable String eventLabel,@Nullable Integer eventValue){  if (!ApplicationManager.getApplication().isUnitTestMode()) {    if (UsageTrackerManager.getInstance().isTrackingEnabled()) {      List<BasicNameValuePair> postData=Lists.newArrayList(analyticsBaseData);      postData.add(new BasicNameValuePair("tid",analyticsId));      postData.add(new BasicNameValuePair("cd19",eventCategory));      postData.add(new BasicNameValuePair("cd20",eventAction));      postData.add(new BasicNameValuePair("cd16","0"));      postData.add(new BasicNameValuePair("cd17","0"));      String virtualPageUrl="/virtual/" + eventCategory + "/"+ eventAction;      postData.add(new BasicNameValuePair("dp",virtualPageUrl));      postData.add(new BasicNameValuePair("cd21","1"));      if (eventLabel != null) {        String virtualPageTitle=eventLabel + "=" + (eventValue != null ? eventValue : "null");        postData.add(new BasicNameValuePair("dt",virtualPageTitle));      }      sendPing(postData);    }  }}  }
class C{  public static Geometry reduce(Geometry g,PrecisionModel precModel){  GeometryPrecisionReducer reducer=new GeometryPrecisionReducer(precModel);  return reducer.reduce(g);}  }
class C{  protected void tileRects(){  GrowableRectArray rects=mainTile.rects;  for (int i=0; i < rects.getSize(); i++) {    int tileXStartIndex=rects.getX(i) / MASK_SIZE;    int tileYStartIndex=rects.getY(i) / MASK_SIZE;    int tileXLength=((rects.getX(i) + rects.getWidth(i)) / MASK_SIZE + 1) - tileXStartIndex;    int tileYLength=((rects.getY(i) + rects.getHeight(i)) / MASK_SIZE + 1) - tileYStartIndex;    for (int n=0; n < tileYLength; n++) {      for (int m=0; m < tileXLength; m++) {        int tileIndex=xTiles * (tileYStartIndex + n) + tileXStartIndex + m;        MaskTile tile=tileList.get(tileIndex);        GrowableRectArray rectTileList=tile.getRects();        int tileArrayIndex=rectTileList.getNextIndex();        int tileStartPosX=(tileXStartIndex + m) * MASK_SIZE;        int tileStartPosY=(tileYStartIndex + n) * MASK_SIZE;        rectTileList.setX(tileArrayIndex,rects.getX(i) - tileStartPosX);        rectTileList.setY(tileArrayIndex,rects.getY(i) - tileStartPosY);        rectTileList.setWidth(tileArrayIndex,rects.getWidth(i));        rectTileList.setHeight(tileArrayIndex,rects.getHeight(i));        limitRectCoords(rectTileList,tileArrayIndex);        tile.getDirtyArea().growDirtyRegion(rectTileList.getX(tileArrayIndex),rectTileList.getY(tileArrayIndex),rectTileList.getWidth(tileArrayIndex) + rectTileList.getX(tileArrayIndex),rectTileList.getHeight(tileArrayIndex) + rectTileList.getY(tileArrayIndex));      }    }  }}  }
class C{  public void terminate(){  boolean playerWillTerminateItself=false;  try {    playerWillTerminateItself=unbind(true);  } catch (  Exception e) {  }  if (!playerWillTerminateItself) {    if (System.getProperty("os.name").toLowerCase().startsWith("mac os x")) {      if (m_airLaunchInfo != null) {      } else       if (m_launchUrl != null && m_launchUrl.length() > 0) {        boolean closedAnyWindows=false;        Set<String> runningApps=runningApplications();        if (!closedAnyWindows && runningApps.contains("Safari")) {          try {            String url=m_launchUrl.replaceAll(" ","%20");            String safariClosedAnyWindows=executeAppleScript("appleScriptCloseSafariWindow.txt",new String[]{url});            if ("true".equals(safariClosedAnyWindows)) {              closedAnyWindows=true;            } else             if ("appquit".equals(safariClosedAnyWindows)) {              closedAnyWindows=true;              runningApps=waitForMacAppQuit("Safari");            }          } catch (          IOException e) {          }        }        if (!closedAnyWindows && runningApps.contains("Camino")) {          String url=m_launchUrl.replaceFirst("^file:///","file://localhost/");          try {            String caminoClosedAnyWindows=executeAppleScript("appleScriptCloseCaminoWindow.txt",new String[]{url});            if ("true".equals(caminoClosedAnyWindows)) {              closedAnyWindows=true;            } else             if ("appquit".equals(caminoClosedAnyWindows)) {              closedAnyWindows=true;              runningApps=waitForMacAppQuit("Camino");            }          } catch (          IOException e) {          }        }        String[] macStandalonePlayerNames={"Flash Player Debugger","Flash Player","SAFlashPlayer","standalone"};        for (int i=0; !closedAnyWindows && i < macStandalonePlayerNames.length; ++i) {          if (runningApps.contains(macStandalonePlayerNames[i])) {            executeAppleScript(new String[]{"tell application \"" + macStandalonePlayerNames[i] + "\" to quit"},null);            waitForMacAppQuit(macStandalonePlayerNames[i]);            closedAnyWindows=true;          }        }      }    }    if (m_process != null) {      try {        if (null != launcher) {          m_debuggerCallbacks.terminateDebugTarget(m_process,launcher);        } else {          m_debuggerCallbacks.terminateDebugTarget(m_process);        }      } catch (      IOException e) {      }    }  } else   if (m_process != null) {    try {      m_process.waitFor();    } catch (    Exception e) {    }  }  m_isConnected=false;  m_isHalted=false;}  }
class C{  public ThumbnailSetCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public static PhaseId phaseIdValueOf(String phase){  if (null == phase) {    throw new NullPointerException();  }  PhaseId result=null;  if (ANY_PHASE_NAME.equals(phase)) {    result=PhaseId.ANY_PHASE;  } else   if (APPLY_REQUEST_VALUES_NAME.equalsIgnoreCase(phase)) {    result=PhaseId.APPLY_REQUEST_VALUES;  } else   if (INVOKE_APPLICATION_NAME.equalsIgnoreCase(phase)) {    result=PhaseId.INVOKE_APPLICATION;  } else   if (PROCESS_VALIDATIONS_NAME.equalsIgnoreCase(phase)) {    result=PhaseId.PROCESS_VALIDATIONS;  } else   if (RENDER_RESPONSE_NAME.equalsIgnoreCase(phase)) {    result=PhaseId.RENDER_RESPONSE;  } else   if (RESTORE_VIEW_NAME.equalsIgnoreCase(phase)) {    result=PhaseId.RESTORE_VIEW;  } else   if (UPDATE_MODEL_VALUES_NAME.equalsIgnoreCase(phase)) {    result=PhaseId.UPDATE_MODEL_VALUES;  } else {    throw new FacesException("Not a valid phase [" + phase + "]");  }  return result;}  }
class C{  public IntersectIteration(Iteration<? extends E,? extends X> arg1,Iteration<? extends E,? extends X> arg2){  this(arg1,arg2,false);}  }
class C{  public ObjectView(Element elem){  super(elem);}  }
class C{  @Override public String toString(){  return "true";}  }
class C{  public static <T1,T2,R>Mono<R> zip(Mono<? extends T1> mono,BiFunction<? super T1,? super T2,? extends R> fn,Publisher<? extends T2> app){  return Mono.from(FutureW.of(mono.toFuture()).zip(fn,app));}  }
class C{  public static StackTraceElement[] approxSourceStackTraceElement(FrameState frameState){  ArrayList<StackTraceElement> elements=new ArrayList<>();  FrameState state=frameState;  while (state != null) {    Bytecode code=state.getCode();    if (code != null) {      elements.add(code.asStackTraceElement(state.bci - 1));    }    state=state.outerFrameState();  }  return elements.toArray(new StackTraceElement[0]);}  }
class C{  private static String reverseString(String in){  StringBuilder out=new StringBuilder(in).reverse();  return out.toString();}  }
class C{  public boolean isTimecodeDropFrame(){  return timecodeDropFrame;}  }
class C{  public void reset(int firstIndex,int blockNum){  firstIndex_=firstIndex;  blockNum_=blockNum;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void displayPopupMenu(final MouseEvent event){  final int selectedIndex=m_table.rowAtPoint(event.getPoint());  if (selectedIndex != -1) {    final CCrossReference reference=m_crossReferences.get(selectedIndex);    final CCrossReferencesTableMenu popupMenu=new CCrossReferencesTableMenu(m_parent,m_viewContainer,reference.getCallingFunction());    popupMenu.show(m_table,event.getX(),event.getY());  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public boolean isSetRegisterRequest(){  return this.registerRequest != null;}  }
class C{  public BEShadowBorder(){  super(new Insets(TOP,LEFT,BOTTOM,RIGHT),org.jb2011.lnf.beautyeye.widget.__Icon9Factory__.getInstance().getBorderIcon_Shadow1());}  }
class C{  public void handleError(ImsServiceError error){  if (isSessionInterrupted()) {    return;  }  if (sLogger.isActivated()) {    sLogger.info(new StringBuilder("Session error: ").append(error.getErrorCode()).append(", reason=").append(error.getMessage()).toString());  }  closeMediaSession();  removeSession();  ContactId contact=getRemoteContact();  for (int j=0; j < getListeners().size(); j++) {    ((FileSharingSessionListener)getListeners().get(j)).onTransferError(new FileSharingError(error),contact);  }}  }
class C{  @Override public Object apply(List<Object> args,Context context) throws ParseException {  String profile=getArg(0,String.class,args);  String entity=getArg(1,String.class,args);  long durationAgo=getArg(2,Long.class,args);  String unitsName=getArg(3,String.class,args);  TimeUnit units=TimeUnit.valueOf(unitsName);  List<Object> groups=getGroupsArg(4,args);  return client.fetch(Object.class,profile,entity,groups,durationAgo,units);}  }
class C{  private static void pp(GoogleService service,BaseFeed feed,Writer w) throws IOException {  XmlWriter xw=new XmlWriter(w,XML_PP,null);  ExtensionProfile extProfile=service.getExtensionProfile();  feed.generateAtom(xw,extProfile);  xw.flush();  w.write("\n");  w.flush();}  }
class C{  public boolean visit(FieldAccess node){  collectTaint(node,false);  return false;}  }
class C{  public DistanceMouseMode(String name,boolean consumeEvents){  super(name,consumeEvents);}  }
class C{  public SymbolTableEntryInternal steFor_undefined(){  return getSymbolTableEntryInternal("undefined",true);}  }
class C{  public SkullMetaBuilder start(){  return new SkullMetaBuilder();}  }
class C{  private static void startRepository(){  checkForCorrectJvmVersion();  LOGGER.info("Initializing Spring...");  BeanFactoryLocator beanFactoryLocator=ContextSingletonBeanFactoryLocator.getInstance();  BeanFactoryReference beanFactoryReference=beanFactoryLocator.useBeanFactory("ctx");  beanFactory=beanFactoryReference.getFactory();  if (beanFactory instanceof ConfigurableApplicationContext) {    ((ConfigurableApplicationContext)beanFactory).registerShutdownHook();  }  LOGGER.info("Spring successfully initialized");  if (LOGGER.isInfoEnabled()) {    VersionService versionService=(VersionService)getBeanFactory().getBean("versionService");    LOGGER.info("Starting CMR in version " + versionService.getVersionAsString() + ". Please note that inspectIT does not provide any guarantee on backwards compatibility. Only if the version match exactly we ensure that the components are compatible.");  }}  }
class C{  public static Connection newInstance(DataSourceRepository database,SmartDataSource dataSource){  InvocationHandler handler=new SmartConnection(database,dataSource);  ClassLoader cl=Connection.class.getClassLoader();  return (Connection)Proxy.newProxyInstance(cl,new Class[]{Connection.class},handler);}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public double discreteTimeGroupDelay(double Omega){  Complex c=Complex.exp(new Complex(0.0,-Omega));  Complex N=new Complex(a[order] * order);  for (int i=order - 1; i >= 0; i--) {    N=N.times(c).plus(a[i] * i);  }  Complex D=evaluate(c);  return (N.over(D)).real();}  }
class C{  public ColorRGBADialog(java.awt.Frame parent,boolean modal,ColorRGBAPropertyEditor editor){  super(parent,modal);  this.editor=editor;  initComponents();  jColorChooser1.setColor(new Color(((ColorRGBA)editor.getValue()).asIntARGB()));  alphaSlider.setValue(Math.round(((ColorRGBA)editor.getValue()).getAlpha() * 100));}  }
class C{  public static Bitmap scale(Bitmap src,float scale){  return scale(src,scale,scale);}  }
class C{  public static void main(String[] argv){  runFilter(new Remove(),argv);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (contentHandler != null) {    contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  public IsNullValue downgradeOnControlSplit(){  IsNullValue value=this;  if (NCP_EXTRA_BRANCH) {    if (value.isNullOnSomePath()) {      value=nullOnComplexPathValue();    } else     if (value.equals(nullOnComplexPathValue())) {      value=nullOnComplexPathValue3();    }  } else {    if (value.isNullOnSomePath()) {      value=nullOnComplexPathValue();    }  }  return value;}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return maxAgeSeconds == -1 && expires == null;}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public GuacamoleSession(Environment environment,AuthenticatedUser authenticatedUser,List<UserContext> userContexts) throws GuacamoleException {  this.lastAccessedTime=System.currentTimeMillis();  this.authenticatedUser=authenticatedUser;  this.userContexts=userContexts;}  }
class C{  Viewer(){  initGUI();}  }
class C{  protected int processCorePoint(final DBIDRef seed,DoubleDBIDList newneighbors,final int clusterid,final WritableIntegerDataStore clusterids,ArrayModifiableDBIDs activeSet){  clusterids.putInt(seed,clusterid);  int clustersize=0;  for (DoubleDBIDListIter it=newneighbors.iter(); it.valid(); it.advance()) {    final int oldassign=clusterids.intValue(it);    if (oldassign == UNPROCESSED) {      if (it.doubleValue() > 0.) {        activeSet.add(it);      }    } else     if (oldassign != NOISE) {      continue;    }    clustersize++;    clusterids.putInt(it,-clusterid);  }  return clustersize;}  }
class C{  public void log(Level level,String msg,Object[] params){  params=chomp(params);  log(level,null,null,msg,params);}  }
class C{  public static boolean nodesSimilar(Node node1,Node node2,boolean ignoreWhitespace){  if ((node1 == null) || (node2 == null))   return false;  if (areNonNullAndEqual(node1.getNamespaceURI(),node2.getNamespaceURI())) {    if (node1.getNodeType() == node2.getNodeType() && (areNullorEqual(node1.getLocalName(),node2.getLocalName(),ignoreWhitespace,false)))     return true;  } else   if ((node1.getNamespaceURI() == null) && (node2.getNamespaceURI() == null)) {    if (node1.getNodeType() == node2.getNodeType() && (areNullorEqual(node1.getNodeName(),node2.getNodeName(),ignoreWhitespace,false)))     return true;  }  return false;}  }
class C{  static boolean isProperlyFormattedDefaultValue(String defaultValue){  if (StringUtils.isNullOrEmpty(defaultValue)) {    return true;  }  Pattern literalDefault=Pattern.compile("'.*'");  Pattern functionDefault=Pattern.compile("[^'].*[^']");  return literalDefault.matcher(defaultValue).matches() || functionDefault.matcher(defaultValue).matches();}  }
class C{  public static String mpMixedContentType(String boundary){  return contentTypeWithCharsetAndBoundary(MultiPartWriter.MULTIPART_MIXED,UTF8,boundary);}  }
class C{  public static String[] collToStringArray(List<?> coll){  if (coll == null)   return new String[0];  String[] strs=new String[coll.size()];  Iterator<?> iter=coll.iterator();  for (int i=0; i < strs.length; i++) {    strs[i]=iter.next().toString();  }  return strs;}  }
class C{  public AccountLockedException(String msg){  super(msg);}  }
class C{  protected ShadowOverlayHelper.Options createShadowOverlayOptions(){  return ShadowOverlayHelper.Options.DEFAULT;}  }
class C{  CharSequence buildHistory(){  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);    StringBuilder historyText=new StringBuilder(1000);    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(format.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  public static boolean isWindows(){  String osName=System.getProperty("os.name");  osName=osName.toLowerCase();  return osName.indexOf("windows") != -1;}  }
class C{  public int hashCode(){  long scalar=iScalar;  int hash=(int)(scalar ^ (scalar >>> 32));  hash+=getType().hashCode();  hash+=getWrappedField().hashCode();  return hash;}  }
class C{  public int hashCode(){  return super.hashCode() ^ schema.hashCode();}  }
class C{  public static final void sort(Object[] a,int[] b,Comparator cmp){  mergesort(a,b,0,a.length - 1,cmp);}  }
class C{  @Override protected void process(DistributionManager dm){  long startTime=dm.cacheTimeMillis();  int oldLevel=LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);  try {    GemFireCacheImpl gfc=(GemFireCacheImpl)CacheFactory.getInstance(dm.getSystem());    LocalRegion region=(LocalRegion)gfc.getRegion(this.regionName);    if (region != null && region.isInitialized() && (dm.cacheTimeMillis() - startTime < timeoutMs)) {      CacheWriter writer=region.basicGetWriter();      EntryEventImpl entryEvtImpl=null;      RegionEventImpl regionEvtImpl=null;      if (this.event instanceof EntryEventImpl) {        entryEvtImpl=(EntryEventImpl)this.event;        entryEvtImpl.region=region;        Operation op=entryEvtImpl.getOperation();        if (op == Operation.REPLACE) {          entryEvtImpl.setOperation(Operation.UPDATE);        } else         if (op == Operation.PUT_IF_ABSENT) {          entryEvtImpl.setOperation(Operation.CREATE);        } else         if (op == Operation.REMOVE) {          entryEvtImpl.setOperation(Operation.DESTROY);        }        entryEvtImpl.setOriginRemote(event.getDistributedMember() == null || !event.getDistributedMember().equals(dm.getDistributionManagerId()));      } else       if (this.event instanceof RegionEventImpl) {        regionEvtImpl=(RegionEventImpl)this.event;        regionEvtImpl.region=region;        regionEvtImpl.originRemote=true;      }      if (writer != null) {        try {switch (action) {case BEFORECREATE:            writer.beforeCreate(entryEvtImpl);          break;case BEFOREDESTROY:        writer.beforeDestroy(entryEvtImpl);      break;case BEFOREUPDATE:    writer.beforeUpdate(entryEvtImpl);  break;case BEFOREREGIONDESTROY:writer.beforeRegionDestroy(regionEvtImpl);break;case BEFOREREGIONCLEAR:writer.beforeRegionClear(regionEvtImpl);break;default :break;}NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,true,null,false);} catch (CacheWriterException cwe) {NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,cwe,true);}catch (Exception e) {NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,e,false);}} else {NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,new TryAgainException(LocalizedStrings.SearchLoadAndWriteProcessor_NO_CACHEWRITER_DEFINED_0.toLocalizedString()),true);}} else {NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,new TryAgainException(LocalizedStrings.SearchLoadAndWriteProcessor_TIMEOUT_EXPIRED_OR_REGION_NOT_READY_0.toLocalizedString()),true);}} catch (RegionDestroyedException rde) {NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,null,false);}catch (DistributedSystemDisconnectedException e) {throw e;}catch (CancelException cce) {dm.getCancelCriterion().checkCancelInProgress(cce);NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,null,false);}catch (VirtualMachineError err) {SystemFailure.initiateFailure(err);throw err;}catch (Throwable t) {SystemFailure.checkFailure();NetWriteReplyMessage.sendMessage(NetWriteRequestMessage.this.getSender(),processorId,dm,false,new InternalGemFireException(LocalizedStrings.SearchLoadAndWriteProcessor_ERROR_PROCESSING_REQUEST.toLocalizedString(),t),true);} finally {LocalRegion.setThreadInitLevelRequirement(oldLevel);}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.164 -0500",hash_original_method="0CBAC1F89B5D111A3585F82BE6753903",hash_generated_method="1CBD29E7E334507A5B5A2B3CECE9D604") public String toLocalizedPattern(){  return convertPattern(pattern,PATTERN_CHARS,formatData.getLocalPatternChars(),false);}  }
class C{  @Override public void cascadeRegisterNewIfRequired(Object object,UnitOfWorkImpl uow,Map visitedObjects){  cascadeRegisterNewIfRequired(object,uow,visitedObjects,true);}  }
class C{  public mxModelCodec(Object template){  this(template,null,null,null);}  }
class C{  public void testWorkspaceProjectHidingExternalProject_after() throws Exception {  IProject createJSProject=ProjectUtils.createJSProject("LibFoo");  IFolder src=configureProjectWithXtext(createJSProject);  IFile manifest=createJSProject.getProject().getFile("manifest.n4mf");  assertMarkers("manifest of first project should have no errors",manifest,0);  createTestFile(src,"Foo","console.log('hi')");  createTestFile(src,"AAAA","console.log('hi')");  createTestFile(src,"BBB","console.log('hi')");  waitForAutoBuild();  copyProjectsToLocation(externalLibrariesRoot,"LibFoo");  setExternalLibrariesPreferenceStoreLocations(externalLibraryPreferenceStore,externalLibrariesRoot);  Collection<String> expectedWorkspace=collectIndexableFiles(ResourcesPlugin.getWorkspace());  assertResourceDescriptions(expectedWorkspace,BuilderUtil.getAllResourceDescriptions());  removeExternalLibrariesPreferenceStoreLocations(externalLibraryPreferenceStore,externalLibrariesRoot);}  }
class C{  public Point2D.Double chop(Point2D.Double from){  Rectangle2D.Double r=getBounds();  if (get(STROKE_COLOR) != null) {    double grow;switch (get(STROKE_PLACEMENT)) {case CENTER:default :      grow=AttributeKeys.getStrokeTotalWidth(this);    break;case OUTSIDE:  grow=AttributeKeys.getStrokeTotalWidth(this);break;case INSIDE:grow=0d;break;}Geom.grow(r,grow,grow);}return Geom.angleToPoint(r,Geom.pointToAngle(r,from));}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  public static void backgroundMusicStart(Context mContext){  mContext.startService(new Intent(mContext,BackgroundMusicService.class));}  }
class C{  int compareKeys(SearchRow rowData,SearchRow compare){  long k1=rowData.getKey();  long k2=compare.getKey();  if (k1 == k2) {    if (isMultiVersion) {      int v1=rowData.getVersion();      int v2=compare.getVersion();      return MathUtils.compareInt(v2,v1);    }    return 0;  }  return k1 > k2 ? 1 : -1;}  }
class C{  public ServiceNode(final TermNode serviceRef,final GraphPatternGroup<IGroupMemberNode> groupNode){  super(new BOp[]{},null);  setServiceRef(serviceRef);  setGraphPattern(groupNode);}  }
class C{  public String numFeaturesTipText(){  return "The number of attributes to be used in random selection (see RandomTree).";}  }
class C{  public void cropShapeFile() throws IOException {  ESRIPolygonRecord pr;  int nRecordNum=0;  int nRecords=0;  sfin.readHeader();  sfout.setShapeType(sfin.fileShapeType);switch (sfin.fileShapeType) {case (ShapeUtils.SHAPE_TYPE_ARC):case (ShapeUtils.SHAPE_TYPE_POLYGON):    while ((pr=(ESRIPolygonRecord)sfin.getNextRecord()) != null) {      nRecords++;      if (overlapBBTest(pr.bounds) != 0) {        pr.recordNumber=nRecordNum + 1;        sfout.add(pr);        nRecordNum++;        nRecords++;      }    }}System.out.println("Number of input records = " + (nRecords + 1));System.out.println("Number of candidate records = " + nRecordNum);if (nRecordNum > 0) sfout.verify(true,true);sfin.close();sfout.close();}  }
class C{  private static String determineAnyAddress(){  Enumeration<NetworkInterface> ifaces;  try {    ifaces=NetworkInterface.getNetworkInterfaces();  } catch (  SocketException e) {    logger.log(Level.FINE,"Couldn't retrieve local interfaces.",e);    return IN4_ADDR_ANY;  }  while (ifaces.hasMoreElements()) {    Enumeration<InetAddress> addrs=ifaces.nextElement().getInetAddresses();    while (addrs.hasMoreElements()) {      if (addrs.nextElement() instanceof Inet6Address)       return IN6_ADDR_ANY;    }  }  return IN4_ADDR_ANY;}  }
class C{  public boolean isInstanceProvisioningRequested(){  return instanceProvisioningRequested;}  }
class C{  private static double round(double value,int places){  if (places < 0)   throw new IllegalArgumentException();  BigDecimal bd=new BigDecimal(value);  bd=bd.setScale(places,RoundingMode.HALF_UP);  return bd.doubleValue();}  }
class C{  public SmsMmsMessage(Context _context,String _fromAddress,String _messageBody,long _timestamp,long _threadId,int _unreadCount,long _messageId,int _messageType){  context=_context;  fromAddress=_fromAddress;  messageBody=_messageBody;  timestamp=_timestamp;  messageType=_messageType;  ContactIdentification contactIdentify=null;  contactName=PhoneNumberUtils.formatNumber(fromAddress);  if (SmsPopupUtils.isEmailAddress(fromAddress)) {    contactIdentify=SmsPopupUtils.getPersonIdFromEmail(context,fromAddress);    fromEmailGateway=true;  } else {    contactIdentify=SmsPopupUtils.getPersonIdFromPhoneNumber(context,fromAddress);    fromEmailGateway=false;  }  if (contactIdentify != null) {    contactId=contactIdentify.contactId;    contactLookupKey=contactIdentify.contactLookup;    contactName=contactIdentify.contactName;  }  unreadCount=_unreadCount;  threadId=_threadId;  messageId=_messageId;}  }
class C{  public static SimpleCommand createCommand(String command){  return new SimpleCommand(command,new LocalAgent(),null);}  }
class C{  public LinearSGD(){  this(new HingeLoss(),1e-4,0.0);}  }
class C{  ElementMetadataRegistryBuilder(MetadataRegistry root){  this.root=root;}  }
class C{  public Object invoke(Object[] argValues,Interpreter interpreter) throws EvalError {  return invoke(argValues,interpreter,null,null,false);}  }
class C{  public static Byte valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseByte(string,radix));}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof AttributeDescription)) {    return false;  }  AttributeDescription a=(AttributeDescription)o;  if (this.index != a.getTableIndex()) {    return false;  }  if (!this.name.equals(a.getName())) {    return false;  }  return true;}  }
class C{  public void showPage(IPage page){  if (page.getControl() == null || page.getControl().isDisposed() || page.getControl().getParent() != getStackComposite()) {    return;  }  currentPage=page;  page.getControl().setVisible(true);  getStackComposite().layout(true);  Control[] children=getStackComposite().getChildren();  for (int i=0; i < children.length; i++) {    Control child=children[i];    if (child != page.getControl() && !child.isDisposed()) {      child.setVisible(false);    }  }}  }
class C{  public HAPbrpcException(){  super();}  }
class C{  @Override public int size(){  return size;}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return cacheResponse.cacheControl().maxAgeSeconds() == -1 && expires == null;}  }
class C{  private void addCliArguments(JvmLauncher java){  String host=getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME);  String port=getConfiguration().getPropertyValue(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT);  java.setJarFile(new File(getHome(),"jboss-modules.jar"));  String modules=getConfiguration().getPropertyValue(JBossPropertySet.ALTERNATIVE_MODULES_DIR);  if (!new File(modules).isAbsolute()) {    modules=getFileHandler().append(getHome(),modules);  }  java.addAppArguments("-mp",modules,"org.jboss.as.cli");  if (isOnline()) {    java.addAppArguments("--connect","--controller=" + host + ":"+ port);  }}  }
class C{  public CreateIndexRequest source(BytesReference source){  XContentType xContentType=XContentFactory.xContentType(source);  if (xContentType != null) {    try (XContentParser parser=XContentFactory.xContent(xContentType).createParser(source)){      source(parser.map());    } catch (    IOException e) {      throw new ElasticsearchParseException("failed to parse source for create index",e);    }  } else {    settings(new String(source.toBytes(),Charsets.UTF_8));  }  return this;}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.CustomerServiceImpl.create(..))") public Object doCreateCustomer(final ProceedingJoinPoint pjp) throws Throwable {  return notifyInternal(pjp,true);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_KEY_1__KEY_ID_1:    return KEY_ID_1_EDEFAULT == null ? keyId_1 != null : !KEY_ID_1_EDEFAULT.equals(keyId_1);}return super.eIsSet(featureID);}  }
class C{  @Override public final void applyPattern(final String pattern){  if (registry == null) {    super.applyPattern(pattern);    toPattern=super.toPattern();    return;  }  final ArrayList<Format> foundFormats=new ArrayList<Format>();  final ArrayList<String> foundDescriptions=new ArrayList<String>();  final StringBuilder stripCustom=new StringBuilder(pattern.length());  final ParsePosition pos=new ParsePosition(0);  final char[] c=pattern.toCharArray();  int fmtCount=0;  while (pos.getIndex() < pattern.length()) {switch (c[pos.getIndex()]) {case QUOTE:      appendQuotedString(pattern,pos,stripCustom);    break;case START_FE:  fmtCount++;seekNonWs(pattern,pos);final int start=pos.getIndex();final int index=readArgumentIndex(pattern,next(pos));stripCustom.append(START_FE).append(index);seekNonWs(pattern,pos);Format format=null;String formatDescription=null;if (c[pos.getIndex()] == START_FMT) {formatDescription=parseFormatDescription(pattern,next(pos));format=getFormat(formatDescription);if (format == null) {stripCustom.append(START_FMT).append(formatDescription);}}foundFormats.add(format);foundDescriptions.add(format == null ? null : formatDescription);Validate.isTrue(foundFormats.size() == fmtCount);Validate.isTrue(foundDescriptions.size() == fmtCount);if (c[pos.getIndex()] != END_FE) {throw new IllegalArgumentException("Unreadable format element at position " + start);}default :stripCustom.append(c[pos.getIndex()]);next(pos);}}super.applyPattern(stripCustom.toString());toPattern=insertFormats(super.toPattern(),foundDescriptions);if (containsElements(foundFormats)) {final Format[] origFormats=getFormats();int i=0;for (final Iterator<Format> it=foundFormats.iterator(); it.hasNext(); i++) {final Format f=it.next();if (f != null) {origFormats[i]=f;}}super.setFormats(origFormats);}}  }
class C{  private static Object selfConvert(String parsingMethod,String value,Class<? extends Object> type){  try {    Method method=type.getMethod(parsingMethod,String.class);    return method.invoke(null,value);  } catch (  InvocationTargetException e) {    LOG.error(LOG_ERROR,e);    throw new IllegalArgumentException("Can't convert " + value + " to "+ type.getName(),e.getCause());  }catch (  IllegalAccessException e) {    LOG.error(LOG_ERROR,e);    throw new IllegalArgumentException("Can't convert " + value + " to "+ type.getName(),e);  }catch (  NoSuchMethodException e) {    LOG.error(LOG_ERROR,e);    throw new IllegalArgumentException("Can't convert " + value + " to "+ type.getName(),e);  }}  }
class C{  public void makeClass(List<Interval> l,boolean caseless){  makeClass(new IntCharSet(l),caseless);}  }
class C{  public static void syncImmediately(Context context){  Bundle bundle=new Bundle();  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.content_authority),bundle);}  }
class C{  public static boolean hasHoneycombMR1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1;}  }
class C{  public static String checkAndFormatText(final FormatterDetails format,final byte[] text){  if (format != null) {    return FormattingUtils.formatText(format,ConversionUtils.arrayToString(text),text);  }  return ConversionUtils.arrayToString(text);}  }
class C{  private static String percentEncodeRfc3986(String string){  try {    string=string.replace("+","%2B");    string=URLDecoder.decode(string,"UTF-8");    string=URLEncoder.encode(string,"UTF-8");    return string.replace("+","%20").replace("*","%2A").replace("%7E","~");  } catch (  Exception e) {    return string;  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isKeepFullyVisible(){  return this.keepFullyVisible;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_2__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.264 -0400",hash_original_method="C10E35B15C5C34D2F11AD8F56A8AFBE7",hash_generated_method="8538DC9FDF04C178771F287DC9084D00") @Override public void write(int idx) throws IOException {  try {    beforeWrite(1);    out.write(idx);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @Override public void awake(){  this.bot.log(this,"Awake",Bot.FINE);}  }
class C{  static void format(FormattedTweetText formattedTweetText,Tweet tweet){  if (TextUtils.isEmpty(tweet.text))   return;  final HtmlEntities.Unescaped u=HtmlEntities.HTML40.unescape(tweet.text);  final StringBuilder result=new StringBuilder(u.unescaped);  adjustIndicesForEscapedChars(formattedTweetText.urlEntities,u.indices);  adjustIndicesForEscapedChars(formattedTweetText.mediaEntities,u.indices);  adjustIndicesForSupplementaryChars(result,formattedTweetText);  formattedTweetText.text=result.toString();}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  private HeaderPartitionExtractor(){}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder("[");  if (isPrintable(start))   result.append("'").append((char)start).append("'"); else   result.append(start);  if (start != end) {    result.append("-");    if (isPrintable(end))     result.append("'").append((char)end).append("'"); else     result.append(end);  }  result.append("]");  return result.toString();}  }
class C{  public static String decode(String source){  StringBuffer dest=new StringBuffer();  Matcher matcher=ENCODED_PATTERN.matcher(source);  while (matcher.find()) {    int number;    try {      number=Integer.parseInt(matcher.group());    } catch (    NumberFormatException nfe) {      throw new IllegalArgumentException("Unable to decode the cigar string '" + source + "'.  Attempting to convert the substring '"+ matcher.group()+ "' to a number.  Thrown a NumberFormatException (appended).",nfe);    }    matcher.find();    while (number-- != 0) {      dest.append(matcher.group());    }  }  return dest.toString();}  }
class C{  private Resource[][] grabManifests(ResourceCollection[] rcs){  Resource[][] manifests=new Resource[rcs.length][];  for (int i=0; i < rcs.length; i++) {    Resource[][] resources=null;    if (rcs[i] instanceof FileSet) {      resources=grabResources(new FileSet[]{(FileSet)rcs[i]});    } else {      resources=grabNonFileSetResources(new ResourceCollection[]{rcs[i]});    }    for (int j=0; j < resources[0].length; j++) {      String name=resources[0][j].getName().replace('\\','/');      if (rcs[i] instanceof ArchiveFileSet) {        ArchiveFileSet afs=(ArchiveFileSet)rcs[i];        if (!"".equals(afs.getFullpath(getProject()))) {          name=afs.getFullpath(getProject());        } else         if (!"".equals(afs.getPrefix(getProject()))) {          String prefix=afs.getPrefix(getProject());          if (!prefix.endsWith("/") && !prefix.endsWith("\\")) {            prefix+="/";          }          name=prefix + name;        }      }      if (name.equalsIgnoreCase(MANIFEST_NAME)) {        manifests[i]=new Resource[]{resources[0][j]};        break;      }    }    if (manifests[i] == null) {      manifests[i]=new Resource[0];    }  }  return manifests;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Date subAssign(final Period period){  serialNumber=advance(this,-1 * period.length(),period.units());  checkSerialNumber();  delegatedObservable.notifyObservers();  return this;}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  public LatinHypercube(){  super();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[propertyName=").append(getPropertyName());  sb.append("; oldValue=").append(getOldValue());  sb.append("; newValue=").append(getNewValue());  sb.append("; source=").append(getSource());  return sb.append("]").toString();}  }
class C{  public String distanceFunctionTipText(){  return "The distance function to use for instances comparison " + "(default: weka.core.EuclideanDistance). ";}  }
class C{  public static void encodeFileToFile(String infile,String outfile){  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  protected String doIt() throws Exception {  log.info("C_OrderLine_ID=" + p_C_OrderLine_ID);  if (p_C_OrderLine_ID == 0)   throw new IllegalArgumentException("No OrderLine");  MOrderLine line=new MOrderLine(getCtx(),p_C_OrderLine_ID,get_TrxName());  if (line.get_ID() == 0)   throw new IllegalArgumentException("Order line not found");  MOrder order=new MOrder(getCtx(),line.getC_Order_ID(),get_TrxName());  if (!MOrder.DOCSTATUS_Completed.equals(order.getDocStatus()))   throw new IllegalArgumentException("Order not completed");  if ((line.getQtyOrdered().subtract(line.getQtyDelivered())).compareTo(Env.ZERO) <= 0)   return "Ordered quantity already shipped";  int C_DocTypeShipment_ID=DB.getSQLValue(get_TrxName(),"SELECT C_DocTypeShipment_ID FROM C_DocType WHERE C_DocType_ID=?",order.getC_DocType_ID());  MInOut shipment=new MInOut(order,C_DocTypeShipment_ID,p_MovementDate);  shipment.setM_Warehouse_ID(line.getM_Warehouse_ID());  shipment.setMovementDate(line.getDatePromised());  if (!shipment.save())   throw new IllegalArgumentException("Cannot save shipment header");  MInOutLine sline=new MInOutLine(shipment);  sline.setOrderLine(line,0,line.getQtyReserved());  sline.setQtyEntered(line.getQtyReserved());  sline.setC_UOM_ID(line.getC_UOM_ID());  sline.setQty(line.getQtyReserved());  sline.setM_Warehouse_ID(line.getM_Warehouse_ID());  if (!sline.save())   throw new IllegalArgumentException("Cannot save Shipment Line");  return shipment.getDocumentNo();}  }
class C{  public boolean matcher(CommandContext other){  if (this.resource.matches(other.resource) && this.method.equals(other.method)) {    return true;  }  return false;}  }
class C{  protected void doBatchCrudRun(int count) throws Exception {  log("doBatchCrudRun NOT implemented");}  }
class C{  protected void checkAging(Exchange exchange){  return;}  }
class C{  public boolean accept(File dir,String name){  return extension.equalsIgnoreCase(getExtension(name));}  }
class C{  void engineUpdate(byte b){  byte[] data={b};  engineUpdate(data,0,1);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  FriendDao.createTable(db,ifNotExists);  UserDao.createTable(db,ifNotExists);  GroupDao.createTable(db,ifNotExists);}  }
class C{  private void userLeftWorld(@NonNull Player user,@NonNull World world){  WorldDimension.getPlayersAllDimensions(world).forEach(null);  final UserData userData=loadedUserData.get(user.getUniqueId());  if (userData != null)   dataToBeSaved.add(userData);  loadedUserData.remove(user.getUniqueId(),userData);}  }
class C{  public PolynomialFunction integral(){  return integral(0);}  }
class C{  public List<String> lrange(final String key,final long start,final long end){  checkIsInMulti();  client.lrange(key,start,end);  return client.getMultiBulkReply();}  }
class C{  private SafeHtml buildHtmlMessage(String type,String color,String message){  return new SafeHtmlBuilder().appendHtmlConstant("<pre " + PRE_STYLE + ">").appendHtmlConstant("[<span style='color:" + color + ";'><b>"+ type+ "</b></span>]").appendHtmlConstant(message.substring(("[" + type + "]").length())).appendHtmlConstant("</pre>").toSafeHtml();}  }
class C{  public GameCFREvent(Object source,int t){  super(source);  cfrType=t;}  }
class C{  public static void log(Throwable t){  log(IStatus.ERROR,"Internal Error",t);}  }
class C{  public void release(byte[] data,int maxMsgSize){  if (this.data != data)   return;  if (maxMsgSize > this.maxMsgSize)   this.maxMsgSize=maxMsgSize;  this.acquired=false;  long now=U.currentTimeMillis();  if (now - this.lastCheck >= CHECK_FREQ) {    int halfSize=data.length >> 1;    if (this.maxMsgSize < halfSize)     this.data=new byte[halfSize];    this.lastCheck=now;  }}  }
class C{  public void dispose(){  if (minuteChangeListener != null) {    internalClock.removeMinuteChangeListener(minuteChangeListener);    minuteChangeListener=null;  }}  }
class C{  public void addListener(Listener listener){  if (listener == null)   throw new IllegalArgumentException("listener cannot be null.");synchronized (listenerLock) {    Listener[] listeners=this.listeners;    int n=listeners.length;    for (int i=0; i < n; i++)     if (listener == listeners[i])     return;    Listener[] newListeners=new Listener[n + 1];    newListeners[0]=listener;    System.arraycopy(listeners,0,newListeners,1,n);    this.listeners=newListeners;  }  if (TRACE)   trace("kryonet","Connection listener added: " + listener.getClass().getName());}  }
class C{  public static String formatNumber(double value,int numberOfDigits){  return formatNumber(value,numberOfDigits,false);}  }
class C{  public static void releasePooled(long memPtr){  assert !isExternal(memPtr);  assert isPooled(memPtr);  assert isAcquired(memPtr);  flags(memPtr,flags(memPtr) ^ FLAG_ACQUIRED);}  }
class C{  public synchronized void mark(int readlimit){  marklimit=readlimit;  markpos=pos;}  }
class C{  public void buildClassifier(Instances data) throws Exception {  throw new Exception("Don't call this directly, use subclass instead");}  }
class C{  protected static boolean isText(int ch){  if (((ch >= 32) && (ch <= 126)) || ((ch >= 128) && (ch <= 255))) {    return true;  }switch (ch) {case '\t':case '\n':case '\r':    return true;}return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PARAMETERIZED_ACCESS___IS_PARAMETERIZED:    return isParameterized();}return super.eInvoke(operationID,arguments);}  }
class C{  public ClientCertificateTypeExtension(boolean isClient,List<CertificateType> certificateTypes){  super(ExtensionType.CLIENT_CERT_TYPE,isClient,certificateTypes);}  }
class C{  private void cmd_pageSetup(){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  m_reportEngine.pageSetupDialog();  revalidate();  cmd_drill();}  }
class C{  public void findLocal(ResultStream<Cursor> result,String sql,Object... args){  _kraken.findLocal(sql,args,result);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SCD(LossFunc loss,double regularization,int iterations){  double beta=loss.getDeriv2Max();  if (Double.isNaN(beta) || Double.isInfinite(beta) || beta <= 0)   throw new IllegalArgumentException("SCD needs a loss function with a finite positive maximal second derivative");  this.loss=loss;  setRegularization(regularization);  setIterations(iterations);}  }
class C{  @GET @Path("search/dsl") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response searchUsingQueryDSL(@QueryParam("query") String dslQuery,@DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam("limit") int limit,@DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam("offset") int offset){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"MetadataDiscoveryResource.searchUsingQueryDSL(" + dslQuery + ", "+ limit+ ", "+ offset+ ")");    }    dslQuery=ParamChecker.notEmpty(dslQuery,"dslQuery cannot be null");    QueryParams queryParams=validateQueryParams(limit,offset);    final String jsonResultStr=discoveryService.searchByDSL(dslQuery,queryParams);    JSONObject response=new DSLJSONResponseBuilder().results(jsonResultStr).query(dslQuery).build();    return Response.ok(response).build();  } catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get entity list for dslQuery {}",dslQuery,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get entity list for dslQuery {}",dslQuery,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  private void shareMusic(WXShareContent content,WXMediaMessage msg,SendMessageToWX.Req req){  WXMusicObject wxMusicObject=new WXMusicObject();  wxMusicObject.musicUrl=content.getMusic_url();  msg.mediaObject=wxMusicObject;  msg.title=content.getTitle();  msg.description=content.getDescription();  req.transaction=buildTransaction("music");  req.message=msg;  req.scene=content.getScene();  shareAsync(content.getImage_url(),req,true);}  }
class C{  private void adjustDate(int diff){  Timestamp date=fieldDate.getTimestamp();  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(date);  if (timePane.getSelectedIndex() == 0)   cal.add(java.util.Calendar.DAY_OF_YEAR,diff); else   if (timePane.getSelectedIndex() == 1)   cal.add(java.util.Calendar.WEEK_OF_YEAR,diff); else   cal.add(java.util.Calendar.MONTH,diff);  fieldDate.setValue(new Timestamp(cal.getTimeInMillis()));  displayCalendar();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.IDENTIFIER_REF;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ENUM_PROPERTY_SOURCE__PROPERTY:    if (resolve)     return getProperty();  return basicGetProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SkypeBuilder(String username,String password){  this.username=username;  this.password=password;}  }
class C{  public InlineQueryResultCachedDocumentBuilder description(String description){  this.description=description;  return this;}  }
class C{  public void emit(View emiter,int particlesPerSecond,int emitingTime){  emitWithGravity(emiter,Gravity.CENTER,particlesPerSecond,emitingTime);}  }
class C{  private Set<GoTerm> processGoTerms(final XMLEventReader reader) throws XMLStreamException {  Set<GoTerm> goTerms=null;  XMLEvent currentEvent;  boolean stillInClassListElement=true;  while (stillInClassListElement) {    currentEvent=reader.nextEvent();    if (currentEvent.isEndElement()) {      final EndElement endElement=currentEvent.asEndElement();      stillInClassListElement=!EL_CLASS_LIST.equals(endElement.getName().getLocalPart());    } else     if (currentEvent.isStartElement()) {      final StartElement startElement=currentEvent.asStartElement();      final String elementName=startElement.getName().getLocalPart();      if (EL_CLASSIFICATION.equals(elementName)) {        final GoTerm goTerm=processGoTerm(startElement,reader);        if (goTerm != null) {          if (goTerms == null) {            goTerms=new HashSet<GoTerm>();          }          goTerms.add(goTerm);        }      }    }  }  return (goTerms == null) ? Collections.<GoTerm>emptySet() : goTerms;}  }
class C{  RotateStreamQueue(){  _queue=buildQueue();}  }
class C{  public SystemPropertyCondition(String key){  this.key=checkNotNull(key);  this.value=null;}  }
class C{  public boolean containsVarDecl(String id){  return getVarDecls().containsKey(id);}  }
class C{  public URL createURL(String fileName) throws MalformedURLException {  String protocol=URLClassPath.getURLProtocol(fileName);  if (protocol == null) {    fileName="file:" + fileName;  }  return new URL(fileName);}  }
class C{  protected Drawing loadDrawing(ProgressIndicator progress) throws IOException {  Drawing drawing=createDrawing();  if (getParameter("datafile") != null) {    URL url=new URL(getDocumentBase(),getParameter("datafile"));    URLConnection uc=url.openConnection();    if (uc instanceof HttpURLConnection) {      ((HttpURLConnection)uc).setUseCaches(false);    }    int contentLength=uc.getContentLength();    InputStream in=uc.getInputStream();    try {      if (contentLength != -1) {        in=new BoundedRangeInputStream(in);        ((BoundedRangeInputStream)in).setMaximum(contentLength + 1);        progress.setProgressModel((BoundedRangeModel)in);        progress.setIndeterminate(false);      }      BufferedInputStream bin=new BufferedInputStream(in);      bin.mark(512);      IOException formatException=null;      for (      InputFormat format : drawing.getInputFormats()) {        try {          bin.reset();        } catch (        IOException e) {          uc=url.openConnection();          in=uc.getInputStream();          in=new BoundedRangeInputStream(in);          ((BoundedRangeInputStream)in).setMaximum(contentLength + 1);          progress.setProgressModel((BoundedRangeModel)in);          bin=new BufferedInputStream(in);          bin.mark(512);        }        try {          bin.reset();          format.read(bin,drawing,true);          formatException=null;          break;        } catch (        IOException e) {          formatException=e;        }      }      if (formatException != null) {        throw formatException;      }    }  finally {      in.close();    }  }  return drawing;}  }
class C{  public Builder initializeAsRestore(IndexMetaData indexMetaData,RestoreSource restoreSource,IntSet ignoreShards,boolean asNew,UnassignedInfo unassignedInfo){  if (!shards.isEmpty()) {    throw new IllegalStateException("trying to initialize an index with fresh shards, but already has shards created");  }  for (int shardId=0; shardId < indexMetaData.getNumberOfShards(); shardId++) {    IndexShardRoutingTable.Builder indexShardRoutingBuilder=new IndexShardRoutingTable.Builder(new ShardId(indexMetaData.getIndex(),shardId));    for (int i=0; i <= indexMetaData.getNumberOfReplicas(); i++) {      if (asNew && ignoreShards.contains(shardId)) {        indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index,shardId,null,i == 0,unassignedInfo));      } else {        indexShardRoutingBuilder.addShard(ShardRouting.newUnassigned(index,shardId,i == 0 ? restoreSource : null,i == 0,unassignedInfo));      }    }    shards.put(shardId,indexShardRoutingBuilder.build());  }  return this;}  }
class C{  private void addEmptyView(){  if (mRootView == null) {    mRootView=LayoutInflater.from(getContext()).inflate(ResFinder.getLayout("umeng_comm_base_view"),null);    mEmptyViewStub=(ViewStub)mRootView.findViewById(ResFinder.getId("umeng_comm_base_empty_viewstub"));    mLoadingViewStub=(ViewStub)mRootView.findViewById(ResFinder.getId("umeng_comm_base_loading_viewstub"));    FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);    addViewInLayout(mRootView,-1,params);    mRootView.setVisibility(View.GONE);    return;  }}  }
class C{  public void check(){  if (!hasAnimVal) {    if (baseVal == null) {      baseVal=new BaseSVGPARValue();    }    if (baseVal.malformed) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,baseVal.getValueAsString());    }  }}  }
class C{  public Iterator<NameValue> iterator(){  return this.nameValueMap.values().iterator();}  }
class C{  private Calendar asCalendar(Calendar base,Time time){  Calendar timeCalendar=Calendar.getInstance();  timeCalendar.setTime(time);  base.set(Calendar.HOUR_OF_DAY,timeCalendar.get(Calendar.HOUR_OF_DAY));  base.set(Calendar.MINUTE,timeCalendar.get(Calendar.MINUTE));  base.set(Calendar.SECOND,timeCalendar.get(Calendar.SECOND));  base.set(Calendar.MILLISECOND,timeCalendar.get(Calendar.MILLISECOND));  return base;}  }
class C{  public Object source(String filename) throws FileNotFoundException, IOException, EvalError {  return source(filename,globalNameSpace);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void write(byte[] buf,int off,int nbytes){  digest.update(buf,off,nbytes);}  }
class C{  private boolean isThisPrefix(char[] string){  if (string == null || string.length < 5)   return false;  return string[0] == 't' && string[1] == 'h' && string[2] == 'i' && string[3] == 's' && string[4] == '.';}  }
class C{  public static int[] expand(int[] field,int newSize,boolean keepData){  if (field == null || field.length < newSize) {    int[] newArray=new int[newSize];    if (keepData && field != null) {      System.arraycopy(field,0,newArray,0,field.length);    }    return newArray;  }  return field;}  }
class C{  protected Link findLink(final String relation){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.948 -0500",hash_original_method="4CC5BDD9AC3F3A042B96690CFA963EE6",hash_generated_method="AED4949FE3AAE1572680227DF7B4BA1E") final synchronized void _processAYTResponse(){  if (!aytFlag) {synchronized (aytMonitor) {      aytFlag=true;      try {        aytMonitor.notifyAll();      } catch (      Exception e) {        System.err.println("Exception notifying:" + e.getMessage());      }    }  }}  }
class C{  private synchronized boolean alive(boolean action,boolean value){  if (action == SET) {    alive=value;  }  return alive;}  }
class C{  @RequestProcessing(value="/admin/user/{userId}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showUser(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/user.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject user=userQueryService.getUser(userId);  dataModel.put(User.USER,user);  final String teamsStr=Symphonys.get("teams");  dataModel.put(Common.TEAMS,teamsStr.split(","));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public boolean isMaxYSet(int scale){  return mMaxY[scale] != -MathHelper.NULL_VALUE;}  }
class C{  private static Object maskNull(Object key){  return (key == null) ? NULL_KEY : key;}  }
class C{  public boolean canUndo(){  return undoManager.canUndo();}  }
class C{  public static String fixQueryMistakes(String q){  q=q.replaceAll("hashtag:","#");  q=q.replaceAll(" AND "," ");  return q;}  }
class C{  private void update(MouseEvent event){  if (event.getComponent() == mOverlayPanel) {    mOverlayPanel.setCursorLocation(event.getPoint());  } else {    mWaterfallPanel.setCursorLocation(event.getPoint());    mWaterfallPanel.setCursorFrequency(mOverlayPanel.getFrequencyFromAxis(event.getPoint().x));  }}  }
class C{  public boolean deleteProperty(String name){  BugProperty prev=null;  BugProperty prop=propertyListHead;  while (prop != null) {    if (prop.getName().equals(name)) {      break;    }    prev=prop;    prop=prop.getNext();  }  if (prop != null) {    if (prev != null) {      prev.setNext(prop.getNext());    } else {      propertyListHead=prop.getNext();    }    if (prop.getNext() == null) {      propertyListTail=prev;    }    return true;  } else {    return false;  }}  }
class C{  public void parse(InputSource input) throws org.xml.sax.SAXException, IOException {  if (null == getParent()) {    XMLReader reader=null;    try {      javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();      factory.setNamespaceAware(true);      if (m_transformer.getStylesheet().isSecureProcessing()) {        try {          factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);        } catch (        org.xml.sax.SAXException se) {        }      }      javax.xml.parsers.SAXParser jaxpParser=factory.newSAXParser();      reader=jaxpParser.getXMLReader();    } catch (    javax.xml.parsers.ParserConfigurationException ex) {      throw new org.xml.sax.SAXException(ex);    }catch (    javax.xml.parsers.FactoryConfigurationError ex1) {      throw new org.xml.sax.SAXException(ex1.toString());    }catch (    NoSuchMethodError ex2) {    }catch (    AbstractMethodError ame) {    }    XMLReader parent;    if (reader == null)     parent=XMLReaderFactory.createXMLReader(); else     parent=reader;    try {      parent.setFeature("http://xml.org/sax/features/namespace-prefixes",true);    } catch (    org.xml.sax.SAXException se) {    }    setParent(parent);  } else {    setupParse();  }  if (null == m_transformer.getContentHandler()) {    throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_CALL_PARSE,null));  }  getParent().parse(input);  Exception e=m_transformer.getExceptionThrown();  if (null != e) {    if (e instanceof org.xml.sax.SAXException)     throw (org.xml.sax.SAXException)e; else     throw new org.xml.sax.SAXException(e);  }}  }
class C{  @SuppressWarnings("unchecked") private Hop reorderMinusMatrixMult(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof AggBinaryOp && ((AggBinaryOp)hi).isMatrixMultiply()) {    Hop hileft=hi.getInput().get(0);    Hop hiright=hi.getInput().get(1);    if (hileft instanceof BinaryOp && ((BinaryOp)hileft).getOp() == OpOp2.MINUS && hileft.getInput().get(0) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)hileft.getInput().get(0)) == 0.0 && hi.dimsKnown() && hileft.getInput().get(1).dimsKnown() && HopRewriteUtils.compareSize(hi,hileft.getInput().get(1)) < 0) {      Hop hi2=hileft.getInput().get(1);      HopRewriteUtils.removeChildReference(hi,hileft);      ArrayList<Hop> parents=(ArrayList<Hop>)hi.getParent().clone();      BinaryOp minus=new BinaryOp(hi.getName(),hi.getDataType(),hi.getValueType(),OpOp2.MINUS,new LiteralOp(0),hi);      minus.setRowsInBlock(hi.getRowsInBlock());      minus.setColsInBlock(hi.getColsInBlock());      for (      Hop p : parents) {        int ix=HopRewriteUtils.getChildReferencePos(p,hi);        HopRewriteUtils.removeChildReference(p,hi);        HopRewriteUtils.addChildReference(p,minus,ix);      }      HopRewriteUtils.addChildReference(hi,hi2,0);      if (hileft.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hileft);      hi=minus;      LOG.debug("Applied reorderMinusMatrixMult (line " + hi.getBeginLine() + ").");    } else     if (hiright instanceof BinaryOp && ((BinaryOp)hiright).getOp() == OpOp2.MINUS && hiright.getInput().get(0) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)hiright.getInput().get(0)) == 0.0 && hi.dimsKnown() && hiright.getInput().get(1).dimsKnown() && HopRewriteUtils.compareSize(hi,hiright.getInput().get(1)) < 0) {      Hop hi2=hiright.getInput().get(1);      HopRewriteUtils.removeChildReference(hi,hiright);      ArrayList<Hop> parents=(ArrayList<Hop>)hi.getParent().clone();      BinaryOp minus=new BinaryOp(hi.getName(),hi.getDataType(),hi.getValueType(),OpOp2.MINUS,new LiteralOp(0),hi);      minus.setRowsInBlock(hi.getRowsInBlock());      minus.setColsInBlock(hi.getColsInBlock());      for (      Hop p : parents) {        int ix=HopRewriteUtils.getChildReferencePos(p,hi);        HopRewriteUtils.removeChildReference(p,hi);        HopRewriteUtils.addChildReference(p,minus,ix);      }      HopRewriteUtils.addChildReference(hi,hi2,1);      if (hiright.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hiright);      hi=minus;      LOG.debug("Applied reorderMinusMatrixMult (line " + hi.getBeginLine() + ").");    }  }  return hi;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-aliases/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep addAliases(WwnAliasesCreateParam aliases,@PathParam("id") URI id) throws InternalException {  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  ArgValidator.checkFieldNotEmpty(aliases.getAliases(),"aliases");  NetworkSystem device=queryResource(id);  String fabricId=aliases.getFabricId();  if (Type.brocade.toString().equals(device.getSystemType())) {    ArgValidator.checkFieldNotEmpty(fabricId,"fabric-id");  }  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.ADD_ALIAS);  List<ZoneWwnAlias> zoneAliases=new ArrayList<ZoneWwnAlias>();  for (  WwnAliasParam alias : aliases.getAliases()) {    ArgValidator.checkFieldNotEmpty(alias.getAddress(),"address");    validateAlias(alias,true);    zoneAliases.add(new ZoneWwnAlias(alias.getName(),alias.getAddress()));    auditOp(OperationTypeEnum.ADD_ALIAS,true,AuditLogManager.AUDITOP_BEGIN,alias.getName(),device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  }  NetworkController controller=getNetworkController(device.getSystemType());  controller.addAliases(device.getId(),fabricId,fabricWwn,zoneAliases,task);  return toTask(device,task,op);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreatepi.class,args);}  }
class C{  public static Object confirm(Context cx,Scriptable thisObj,Object[] args,Function funObj){  int len=args.length;  WindowWrapper ww=(WindowWrapper)thisObj;  Window window=ww.window;  if (len >= 1) {    String message=(String)Context.jsToJava(args[0],String.class);    if (window.confirm(message))     return Context.toObject(Boolean.TRUE,thisObj); else     return Context.toObject(Boolean.FALSE,thisObj);  }  return Context.toObject(Boolean.FALSE,thisObj);}  }
class C{  private <T>T tryToDo(Callable<T> callback) throws SampleDashboardException {  int retries=3;  int currentTry=0;  SampleDashboardException sdex=null;  while (currentTry < retries) {    currentTry++;    try {      return callback.call();    } catch (    Exception ex) {      sdex=new SampleDashboardException(ex);      log.warning("Caught exception (" + sdex.getStatusCode() + "): "+ ex);    }  }  throw Preconditions.checkNotNull(sdex);}  }
class C{  public UserRoleAssignmentException(String message){  super(message);}  }
class C{  public final TextBuilder append(char chars[],int offset,int length){  final int end=offset + length;  if ((offset < 0) || (length < 0) || (end > chars.length))   throw new IndexOutOfBoundsException();  int newLength=_length + length;  while (_capacity < newLength) {    increaseCapacity();  }  for (int i=offset, j=_length; i < end; ) {    char[] dstChars=_high[j >> B1];    int dstBegin=j & M1;    int inc=MathLib.min(C1 - dstBegin,end - i);    System.arraycopy(chars,i,dstChars,dstBegin,inc);    i+=inc;    j+=inc;  }  _length=newLength;  return this;}  }
class C{  @Override public int hashCode(){  int result;  result=this.seriesKeys.hashCode();  result=29 * result + this.seriesList.hashCode();  return result;}  }
class C{  private void updateAltTextView(){  String text=getAltText();  if (text != null) {    ImageLabelView newView;    newView=new ImageLabelView(getElement(),text);synchronized (this) {      altView=newView;    }  }}  }
class C{  public boolean isNetworkAvailable(){  if (checkPermissions("android.permission.INTERNET")) {    ConnectivityManager cManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo info=cManager.getActiveNetworkInfo();    if (info != null && info.isAvailable()) {      return true;    } else {      Ln.e("error","Network error");      return false;    }  } else {    Ln.e(" lost  permission","lost----> android.permission.INTERNET");    return false;  }}  }
class C{  public String bankAccount(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (value == null)   return "";  int C_BankAccount_ID=((Integer)value).intValue();  MBankAccount ba=MBankAccount.get(ctx,C_BankAccount_ID);  ba.load(ba.get_TrxName());  mTab.setValue("BeginningBalance",ba.getCurrentBalance());  return "";}  }
class C{  public void close(){  for (  EndpointHandle handle : boundHandles) {    logger.debug("unbind: {}",handle);    handle.close();  }  boundHandles.clear();  logger.info("Server {} closed",this);  OpcTcpServer opctcpServer=getApplication().opctcpServer;  HttpsServer httpsServer=getApplication().httpsServer;  if ((opctcpServer == null || opctcpServer.getEndpointBindings().isEmpty()) && (httpsServer == null || httpsServer.getEndpointBindings().isEmpty()))   getApplication().close();}  }
class C{  public GlowOfflinePlayer(GlowServer server,PlayerProfile profile){  checkNotNull(server,"server must not be null");  checkNotNull(profile,"profile must not be null");  this.server=server;  this.profile=profile;  loadData();}  }
class C{  public String save() throws SaaSApplicationException {  POUser user=new POUser();  user.setKey(model.getUserKey().getValue().longValue());  user.setVersion(model.getUserVersion().getValue().intValue());  user.setFirstName(model.getUserFirstName().getValue());  user.setLastName(model.getUserLastName().getValue());  user.setMail(model.getUserMail().getValue());  user.setLocale(model.getUserLocale().getValue());  if (model.getUserTitle().getValue() != null) {    user.setTitle(Salutation.valueOf(model.getUserTitle().getValue()));  }  POOrganization org=null;  POImageResource image=null;  if (model.getOrganizationIdentifier() != null) {    org=new POOrganization();    org.setKey(model.getOrganizationKey());    org.setVersion(model.getOrganizationVersion());    org.setMail(model.getOrganizationMail().getValue());    org.setCountryISOCode(model.getOrganizationCountryISOCode().getValue());    org.setAddress(model.getOrganizationAddress().getValue());    org.setWebsiteUrl(model.getOrganizationWebsiteUrl().getValue());    org.setDescription(model.getOrganizationDescription().getValue());    org.setIdentifier(model.getOrganizationIdentifier().getValue());    org.setName(model.getOrganizationName().getValue());    org.setPhone(model.getOrganizationPhone().getValue());    org.setSupportEmail(model.getOrganizationSupportEmail().getValue());    image=model.getOrganizationImage().getValue().getPOImageResource();  }  POProfile profile=new POProfile(user,org,image);  getProfileSvc().saveProfile(profile,getMarketplaceId());  updateUserInSession();  model.setInitialized(false);  return OUTCOME_SUCCESS;}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public Lifecycle(Logger log){  _log=log;}  }
class C{  protected int string2() throws IOException {  start=position;  loop:   for (; ; ) {switch (nextChar()) {case -1:      throw new ParseException("eof",reader.getLine(),reader.getColumn());case '\'':    break;case '"':  break loop;case '\\':switch (nextChar()) {case '\n':case '\f':  break;default :escape();}break;default :if (!ScannerUtilities.isCSSStringCharacter((char)current)) {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}}}nextChar();return LexicalUnits.STRING;}  }
class C{  public void evaluate(Tag tag,TagLibTag libTag) throws EvaluatorException {}  }
class C{  private void handleSupplicantStateChange(String dataString){  WifiSsid wifiSsid=null;  int index=dataString.lastIndexOf("SSID=");  if (index != -1) {    wifiSsid=WifiSsid.createFromAsciiEncoded(dataString.substring(index + 5));  }  String[] dataTokens=dataString.split(" ");  String BSSID=null;  int networkId=-1;  int newState=-1;  for (  String token : dataTokens) {    String[] nameValue=token.split("=");    if (nameValue.length != 2) {      continue;    }    if (nameValue[0].equals("BSSID")) {      BSSID=nameValue[1];      continue;    }    int value;    try {      value=Integer.parseInt(nameValue[1]);    } catch (    NumberFormatException e) {      continue;    }    if (nameValue[0].equals("id")) {      networkId=value;    } else     if (nameValue[0].equals("state")) {      newState=value;    }  }  if (newState == -1)   return;  SupplicantState newSupplicantState=SupplicantState.INVALID;  for (  SupplicantState state : SupplicantState.values()) {    if (state.ordinal() == newState) {      newSupplicantState=state;      break;    }  }  if (newSupplicantState == SupplicantState.INVALID) {    Log.w(TAG,"Invalid supplicant state: " + newState);  }  notifySupplicantStateChange(networkId,wifiSsid,BSSID,newSupplicantState);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.474 -0500",hash_original_method="FBF38886347372CA6BF9139CF8BB5D1E",hash_generated_method="BAA46BF94DCECA4E55750EF8C3D81E2D") public static byte[] stringToGsm7BitPacked(String data,int startingSeptetOffset,boolean throwException,int languageTable,int languageShiftTable) throws EncodeException {  int dataLen=data.length();  int septetCount=countGsmSeptetsUsingTables(data,!throwException,languageTable,languageShiftTable);  if (septetCount == -1) {    throw new EncodeException("countGsmSeptetsUsingTables(): unencodable char");  }  septetCount+=startingSeptetOffset;  if (septetCount > 255) {    throw new EncodeException("Payload cannot exceed 255 septets");  }  int byteCount=((septetCount * 7) + 7) / 8;  byte[] ret=new byte[byteCount + 1];  SparseIntArray charToLanguageTable=sCharsToGsmTables[languageTable];  SparseIntArray charToShiftTable=sCharsToShiftTables[languageShiftTable];  for (int i=0, septets=startingSeptetOffset, bitOffset=startingSeptetOffset * 7; i < dataLen && septets < septetCount; i++, bitOffset+=7) {    char c=data.charAt(i);    int v=charToLanguageTable.get(c,-1);    if (v == -1) {      v=charToShiftTable.get(c,-1);      if (v == -1) {        if (throwException) {          throw new EncodeException("stringToGsm7BitPacked(): unencodable char");        } else {          v=charToLanguageTable.get(' ',' ');        }      } else {        packSmsChar(ret,bitOffset,GSM_EXTENDED_ESCAPE);        bitOffset+=7;        septets++;      }    }    packSmsChar(ret,bitOffset,v);    septets++;  }  ret[0]=(byte)(septetCount);  return ret;}  }
class C{  DisableOnDebug(TestRule rule,List<String> inputArguments){  this.rule=rule;  debugging=isDebugging(inputArguments);}  }
