class C{  public static boolean isHighSurrogate(char ch){  return (MIN_HIGH_SURROGATE <= ch && MAX_HIGH_SURROGATE >= ch);}  }
class C{  public static void addChemicalDissolutionChamberRecipe(ItemStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalDissolutionChamberRecipe",ItemStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public boolean isGreedy(){  return false;}  }
class C{  private void removeListeners(){  m_node.getFunction().removeListener(m_functionListener);}  }
class C{  public void validateVolume(Volume virtualVolume,boolean delete,boolean remediate,ValCk... checks){  List<ValCk> checkList=Arrays.asList(checks);  String volumeId=String.format("%s (%s)(%s)",virtualVolume.getLabel(),virtualVolume.getNativeGuid(),virtualVolume.getId());  log.info("Initiating Vplex Volume validation: " + volumeId);  VPlexVirtualVolumeInfo vvinfo=null;  try {    vvinfo=client.findVirtualVolume(virtualVolume.getDeviceLabel(),virtualVolume.getNativeId());  } catch (  VPlexApiException ex) {    log.info(ex.getMessage());  }  if (vvinfo == null) {    try {      Volume storageVolume=VPlexUtil.getVPLEXBackendVolume(virtualVolume,true,getDbClient(),false);      if (storageVolume != null) {        StorageSystem system=getDbClient().queryObject(StorageSystem.class,storageVolume.getStorageController());        String deviceName=client.getDeviceForStorageVolume(storageVolume.getNativeId(),storageVolume.getWWN(),system.getSerialNumber());        if (deviceName == null) {          if (!delete) {            getValidatorLogger().logDiff(volumeId,"Vplex device-name",system.getSerialNumber() + "-" + storageVolume.getNativeId(),ValidatorLogger.NO_MATCHING_ENTRY);            return;          }        }        if (!deviceName.matches(VPlexApiConstants.STORAGE_VOLUME_NOT_IN_USE)) {          String volumeType=VPlexApiConstants.LOCAL_VIRTUAL_VOLUME;          if (virtualVolume.getAssociatedVolumes() != null && virtualVolume.getAssociatedVolumes().size() > 1) {            volumeType=VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME;          }          VPlexResourceInfo resourceInfo=client.getDeviceStructure(deviceName,volumeType);          if (resourceInfo instanceof VPlexDeviceInfo) {            VPlexDeviceInfo localDeviceInfo=(VPlexDeviceInfo)resourceInfo;            String virtualVolumeName=localDeviceInfo.getVirtualVolume();            if (virtualVolumeName != null && !virtualVolumeName.equals(virtualVolume.getDeviceLabel())) {              getValidatorLogger().logDiff(volumeId,"virtual-volume name changed",virtualVolume.getDeviceLabel(),virtualVolumeName);            }          } else           if (resourceInfo instanceof VPlexDistributedDeviceInfo) {            VPlexDistributedDeviceInfo distDeviceInfo=(VPlexDistributedDeviceInfo)resourceInfo;            String virtualVolumeName=distDeviceInfo.getVirtualVolume();            if (virtualVolumeName != null && !virtualVolumeName.equals(virtualVolume.getDeviceLabel())) {              getValidatorLogger().logDiff(volumeId,"virtual-volume name changed",virtualVolume.getDeviceLabel(),virtualVolumeName);            }          }        }      }    } catch (    VPlexApiException ex) {      log.error("Unable to determine if VPLEX device reused: " + volumeId,ex);      if (getValidatorConfig().isValidationEnabled()) {        throw ex;      }    }    if (!delete) {      getValidatorLogger().logDiff(volumeId,"virtual-volume",virtualVolume.getDeviceLabel(),ValidatorLogger.NO_MATCHING_ENTRY);    }    log.info("Vplex Validation complete (no vvinfo found); " + volumeId);    return;  }  if (checkList.contains(ValCk.ID)) {    if (!virtualVolume.getDeviceLabel().equals(vvinfo.getName())) {      getValidatorLogger().logDiff(volumeId,"native-id",virtualVolume.getNativeId(),vvinfo.getName());    }    if (!NullColumnValueGetter.isNullValue(virtualVolume.getWWN()) && vvinfo.getWwn() != null && !virtualVolume.getWWN().equalsIgnoreCase(vvinfo.getWwn())) {      getValidatorLogger().logDiff(volumeId,"wwn",virtualVolume.getWWN(),vvinfo.getWwn());    }    if (virtualVolume.getAssociatedVolumes() != null && !virtualVolume.getAssociatedVolumes().isEmpty()) {      String locality=virtualVolume.getAssociatedVolumes().size() > 1 ? VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME : VPlexApiConstants.LOCAL_VIRTUAL_VOLUME;      if (!locality.equalsIgnoreCase(vvinfo.getLocality())) {        getValidatorLogger().logDiff(volumeId,"locality",locality,vvinfo.getLocality());      }    }  }  if (checkList.contains(ValCk.VPLEX) && !virtualVolume.isIngestedVolumeWithoutBackend(getDbClient())) {    try {      String drillDownInfo=client.getDrillDownInfoForDevice(vvinfo.getSupportingDevice());      VPlexDrillDownParser parser=new VPlexDrillDownParser(drillDownInfo);      VPlexDrillDownParser.Node root=parser.parse();      boolean distributed=(root.getType() == VPlexDrillDownParser.NodeType.DIST) ? true : false;      if (distributed) {        List<VPlexDrillDownParser.Node> svols=root.getNodesOfType(NodeType.SVOL);        boolean hasMirror=svols.size() > 2;        String clusterName=VPlexControllerUtils.getVPlexClusterName(getDbClient(),virtualVolume);        for (        VPlexDrillDownParser.Node child : root.getChildren()) {          if (child.getArg2().equals(clusterName)) {            validateStorageVolumes(virtualVolume,volumeId,root.getArg1(),true,child.getArg2(),hasMirror);          }        }      } else {        List<VPlexDrillDownParser.Node> svols=root.getNodesOfType(NodeType.SVOL);        boolean hasMirror=svols.size() > 1;        validateStorageVolumes(virtualVolume,volumeId,root.getArg1(),false,root.getArg2(),hasMirror);      }    } catch (    Exception ex) {      getValidatorLogger().logDiff(volumeId,"exception trying to validate storage volumes",virtualVolume.getDeviceLabel(),"N/A");    }  }  log.info("Vplex Validation complete; " + volumeId);}  }
class C{  static OpenMethod from(Method m){  try {    return new OpenMethod(m);  } catch (  OpenDataException ode) {    final String msg="Method " + m.getDeclaringClass().getName() + "."+ m.getName()+ " has parameter or return type that "+ "cannot be translated into an open type";    throw new IllegalArgumentException(msg,ode);  }}  }
class C{  public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.185 -0400",hash_original_method="68E74736656E5A93054BE7DF7FDFC9F5",hash_generated_method="308B7815A245DDDD6C83FEC3772FB15D") private String doLenientDetection(String httpContentType,XmlStreamReaderException ex) throws IOException {  if (httpContentType != null && httpContentType.startsWith("text/html")) {    httpContentType=httpContentType.substring("text/html".length());    httpContentType="text/xml" + httpContentType;    try {      return calculateHttpEncoding(httpContentType,ex.getBomEncoding(),ex.getXmlGuessEncoding(),ex.getXmlEncoding(),true);    } catch (    XmlStreamReaderException ex2) {      ex=ex2;    }  }  String encoding=ex.getXmlEncoding();  if (encoding == null) {    encoding=ex.getContentTypeEncoding();  }  if (encoding == null) {    encoding=defaultEncoding == null ? UTF_8 : defaultEncoding;  }  return encoding;}  }
class C{  public static SipRequest createReInvite(SipDialogPath dialog,String[] featureTags,String content) throws PayloadException {  try {    Request reInvite=dialog.getStackDialog().createRequest(Request.INVITE);    SipRequest firstInvite=dialog.getInvite();    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.INVITE);    reInvite.removeHeader(CSeqHeader.NAME);    reInvite.addHeader(cseqHeader);    reInvite.removeHeader(ContactHeader.NAME);    reInvite.removeHeader(SipUtils.HEADER_ACCEPT_CONTACT);    reInvite.addHeader(dialog.getSipStack().getContact());    SipUtils.setFeatureTags(reInvite,featureTags);    String remoteInstanceId=dialog.getRemoteSipInstance();    if (remoteInstanceId != null) {      SipUtils.setRemoteInstanceID(firstInvite.getStackMessage(),remoteInstanceId);    }    SipUtils.buildAllowHeader(reInvite);    if (reInvite.getHeader(RouteHeader.NAME) == null && firstInvite.getHeader(RouteHeader.NAME) != null) {      reInvite.addHeader(firstInvite.getHeader(RouteHeader.NAME));    }    if (firstInvite.getHeader(SipUtils.HEADER_P_PREFERRED_IDENTITY) != null) {      reInvite.addHeader(firstInvite.getHeader(SipUtils.HEADER_P_PREFERRED_IDENTITY));    } else {      setPPreferedIdentityHeader(reInvite);    }    reInvite.addHeader(firstInvite.getHeader(UserAgentHeader.NAME));    if (dialog.getSessionExpireTime() >= SessionTimerManager.MIN_EXPIRE_PERIOD) {      Header supportedHeader=SipUtils.HEADER_FACTORY.createHeader(SupportedHeader.NAME,"timer");      reInvite.addHeader(supportedHeader);      Header sessionExpiresHeader=SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_SESSION_EXPIRES,"" + dialog.getSessionExpireTime());      reInvite.addHeader(sessionExpiresHeader);    }    ViaHeader viaHeader=(ViaHeader)reInvite.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    ContentTypeHeader contentType=SipUtils.HEADER_FACTORY.createContentTypeHeader("application","sdp");    reInvite.setContent(content,contentType);    reInvite.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(content.getBytes(UTF8).length));    return new SipRequest(reInvite);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP message with content : " + content,e);  }}  }
class C{  @Override public void requestTimeout(){  System.out.println("REQ_TO:" + this);  requestCloseRead();}  }
class C{  public int size(){  return count;}  }
class C{  public static String defaultString(Object obj,String defaultString){  return (obj == null) ? defaultString : obj.toString();}  }
class C{  public static PGPPublicKeyRing removeSignature(PGPPublicKeyRing keyToRemoveFrom,String id) throws PGPException {  try {    PGPPublicKey oldKey=keyToRemoveFrom.getPublicKey();    PGPPublicKey newKey=PGPPublicKey.removeCertification(oldKey,id);    PGPPublicKeyRing newPublicKeyRing=PGPPublicKeyRing.removePublicKey(keyToRemoveFrom,oldKey);    return PGPPublicKeyRing.insertPublicKey(newPublicKeyRing,newKey);  } catch (  Exception e) {    throw new PGPException("Error removing signature",e);  }}  }
class C{  public AdminDistributedSystemImpl(DistributedSystemConfigImpl config){  this.config=config;  String systemId=this.config.getSystemId();  if (systemId != null && systemId.length() > 0) {    this.id=systemId;  }  if (this.getLocators() != null && this.getLocators().length() > 0) {    this.id=this.getLocators();  } else {    this.id=new StringBuffer(this.getMcastAddress()).append("[").append(this.getMcastPort()).append("]").toString();  }  this.logWriterAppender=LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.MAIN,false,this.config.createLogConfig(),false);  InternalLogWriter existingLogWriter=this.config.getInternalLogWriter();  if (existingLogWriter != null) {    this.logWriter=existingLogWriter;  } else {    this.logWriter=LogWriterFactory.createLogWriterLogger(false,false,this.config.createLogConfig(),false);    if (!Boolean.getBoolean(InternalLocator.INHIBIT_DM_BANNER)) {      this.logWriter.info(Banner.getString(null));    } else {      logger.debug("skipping banner - " + InternalLocator.INHIBIT_DM_BANNER + " is set to true");    }    this.config.setInternalLogWriter(this.logWriter);  }  this.controller=ManagedEntityControllerFactory.createManagedEntityController(this);  initializeDistributionLocators();  initializeCacheServers();}  }
class C{  public AtlasMessageComposer addAttachmentSenders(AttachmentSender... senders){  for (  AttachmentSender sender : senders) {    if (sender.getTitle() == null && sender.getIcon() == null) {      throw new NullPointerException("Attachment handlers must have at least a title or icon specified.");    }    sender.init(this.getContext().getApplicationContext(),mLayerClient);    sender.setConversation(mConversation);    if (mMessageSenderCallback != null)     sender.setCallback(mMessageSenderCallback);    mAttachmentSenders.add(sender);    addAttachmentMenuItem(sender);  }  if (!mAttachmentSenders.isEmpty())   mAttachButton.setVisibility(View.VISIBLE);  return this;}  }
class C{  @Override public void invokePreDestroy(Object managedBean){}  }
class C{  public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root,@NotNull String parentCommit,@NotNull List<String> olderCommits) throws VcsException {  List<String> allCommits=new ArrayList<String>();  if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) {    LOG.info("Nothing to reorder. olderCommits: " + olderCommits + " allCommits: "+ allCommits);    return true;  }  final GitLineHandler h=new GitLineHandler(myProject,root,GitCommand.REBASE);  h.setStdoutSuppressed(false);  Integer rebaseEditorNo=null;  GitRebaseEditorService rebaseEditorService=GitRebaseEditorService.getInstance();  try {    h.addParameters("-i","-m","-v");    h.addParameters(parentCommit);    final GitRebaseProblemDetector rebaseConflictDetector=new GitRebaseProblemDetector();    h.addLineListener(rebaseConflictDetector);    final PushRebaseEditor pushRebaseEditor=new PushRebaseEditor(rebaseEditorService,root,olderCommits,false,h);    rebaseEditorNo=pushRebaseEditor.getHandlerNo();    rebaseEditorService.configureHandler(h,rebaseEditorNo);    final GitTask rebaseTask=new GitTask(myProject,h,"Reordering commits");    rebaseTask.setProgressIndicator(myProgressIndicator);    return executeRebaseTaskInBackground(root,h,rebaseConflictDetector,rebaseTask);  }  finally {    if (rebaseEditorNo != null) {      rebaseEditorService.unregisterHandler(rebaseEditorNo);    }  }}  }
class C{  public static AztecCode encode(byte[] data,int minECCPercent,int userSpecifiedLayers){  BitArray bits=new HighLevelEncoder(data).encode();  int eccBits=bits.getSize() * minECCPercent / 100 + 11;  int totalSizeBits=bits.getSize() + eccBits;  boolean compact;  int layers;  int totalBitsInLayer;  int wordSize;  BitArray stuffedBits;  if (userSpecifiedLayers != DEFAULT_AZTEC_LAYERS) {    compact=userSpecifiedLayers < 0;    layers=Math.abs(userSpecifiedLayers);    if (layers > (compact ? MAX_NB_BITS_COMPACT : MAX_NB_BITS)) {      throw new IllegalArgumentException(String.format("Illegal value %s for layers",userSpecifiedLayers));    }    totalBitsInLayer=totalBitsInLayer(layers,compact);    wordSize=WORD_SIZE[layers];    int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);    stuffedBits=stuffBits(bits,wordSize);    if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {      throw new IllegalArgumentException("Data to large for user specified layer");    }    if (compact && stuffedBits.getSize() > wordSize * 64) {      throw new IllegalArgumentException("Data to large for user specified layer");    }  } else {    wordSize=0;    stuffedBits=null;    for (int i=0; ; i++) {      if (i > MAX_NB_BITS) {        throw new IllegalArgumentException("Data too large for an Aztec code");      }      compact=i <= 3;      layers=compact ? i + 1 : i;      totalBitsInLayer=totalBitsInLayer(layers,compact);      if (totalSizeBits > totalBitsInLayer) {        continue;      }      if (wordSize != WORD_SIZE[layers]) {        wordSize=WORD_SIZE[layers];        stuffedBits=stuffBits(bits,wordSize);      }      int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);      if (compact && stuffedBits.getSize() > wordSize * 64) {        continue;      }      if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {        break;      }    }  }  BitArray messageBits=generateCheckWords(stuffedBits,totalBitsInLayer,wordSize);  int messageSizeInWords=stuffedBits.getSize() / wordSize;  BitArray modeMessage=generateModeMessage(compact,layers,messageSizeInWords);  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  int matrixSize;  if (compact) {    matrixSize=baseMatrixSize;    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  BitMatrix matrix=new BitMatrix(matrixSize);  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        if (messageBits.get(rowOffset + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + k],alignmentMap[i * 2 + j]);        }        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + j],alignmentMap[baseMatrixSize - 1 - i * 2 - k]);        }        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k],alignmentMap[baseMatrixSize - 1 - i * 2 - j]);        }        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j],alignmentMap[i * 2 + k]);        }      }    }    rowOffset+=rowSize * 8;  }  drawModeMessage(matrix,compact,matrixSize,modeMessage);  if (compact) {    drawBullsEye(matrix,matrixSize / 2,5);  } else {    drawBullsEye(matrix,matrixSize / 2,7);    for (int i=0, j=0; i < baseMatrixSize / 2 - 1; i+=15, j+=16) {      for (int k=(matrixSize / 2) & 1; k < matrixSize; k+=2) {        matrix.set(matrixSize / 2 - j,k);        matrix.set(matrixSize / 2 + j,k);        matrix.set(k,matrixSize / 2 - j);        matrix.set(k,matrixSize / 2 + j);      }    }  }  AztecCode aztec=new AztecCode();  aztec.setCompact(compact);  aztec.setSize(matrixSize);  aztec.setLayers(layers);  aztec.setCodeWords(messageSizeInWords);  aztec.setMatrix(matrix);  return aztec;}  }
class C{  public JSONObject(){  super();}  }
class C{  public CertificatePolicySet(DerInputStream in) throws IOException {  ids=new Vector<CertificatePolicyId>();  DerValue[] seq=in.getSequence(5);  for (int i=0; i < seq.length; i++) {    CertificatePolicyId id=new CertificatePolicyId(seq[i]);    ids.addElement(id);  }}  }
class C{  private static void describeModuleAsXML(StringBuffer sb,String name,ResourceBundle bundle,boolean inFull){  sb.append("<module name=\"").append(name).append("\">\n");  if (bundle != null) {    try {      sb.append("<desc>").append(xmlFormat(bundle.getString(name + ".desc"))).append("</desc>\n");    } catch (    MissingResourceException e) {    }    final Enumeration<String> keys=bundle.getKeys();    while (keys.hasMoreElements()) {      String key=keys.nextElement();      if (key.endsWith(".dflt")) {        key=key.substring(0,key.length() - 5);        final String last=findLastClassOwningProperty(key);        if (last == null || last.equals(name)) {          try {            final String desc=bundle.getString(key + ".desc");            sb.append("<arg id=\"").append(key).append("\" default=\"");            String def=null;            try {              def=bundle.getString(key + ".dflt");            } catch (            MissingResourceException e) {            }            if (def != null)             sb.append(def);            sb.append("\"").append(">\n<desc>").append(xmlFormat(desc)).append("</desc>\n");            try {              sb.append("<xtra>").append(xmlFormat(bundle.getString(key + ".xtra"))).append("</xtra>\n");            } catch (            MissingResourceException e) {            }            if (!bundle.getString(key + ".type").startsWith("java.lang")) {              try {                final StringTokenizer modules=new StringTokenizer(bundle.getString(key + ".modules"));                sb.append("<argmodules>\n");                while (modules.hasMoreElements())                 sb.append("<argmodule id=\"" + (String)modules.nextElement() + "\"/>\n");                sb.append("</argmodules>");              } catch (              MissingResourceException e) {              }            }            sb.append("</arg>\n");          } catch (          MissingResourceException e) {          }        }      }    }  }  sb.append("</module>\n");}  }
class C{  @LargeTest public void testProperties3GPWithoutVideoAudioTrack() throws Exception {  final String audioFilename=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";  final int duration=77554;  final int audioBitrate=384000;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=44100;  final int audioChannel=2;  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"a1",audioFilename);  validateAudioProperties(audioCodecType,duration,audioSamplingFrequency,audioChannel,audioBitrate,audioTrack);}  }
class C{  private DualPivotQuicksort(){}  }
class C{  private String addRestrictions(String sql,MGoalRestriction[] restrictions,MRole role){  return addRestrictions(sql,false,restrictions,role,getTableName(),getOrgColumn(),getBPartnerColumn(),getProductColumn());}  }
class C{  public ExtendedType(int nodetype,String namespace,String localName){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=nodetype + namespace.hashCode() + localName.hashCode();}  }
class C{  public Matcher reset(CharSequence input){  text=input;  return reset();}  }
class C{  public AbLevelSeriesRenderer(){  super();}  }
class C{  public boolean dataTableExists(final String name){  return dataTableMap.get(name) != null;}  }
class C{  public void insertBefore(String src) throws CannotCompileException {  edited=true;  ConstPool cp=getConstPool();  CodeAttribute ca=iterator.get();  Javac jv=new Javac(thisClass);  Bytecode b=jv.getBytecode();  b.setStackDepth(1);  b.setMaxLocals(ca.getMaxLocals());  try {    CtClass type=getType();    int var=jv.recordVariable(type,EXCEPTION_NAME);    jv.recordReturnType(type,false);    b.addAstore(var);    jv.compileStmnt(src);    b.addAload(var);    int oldHandler=etable.handlerPc(index);    b.addOpcode(Opcode.GOTO);    b.addIndex(oldHandler - iterator.getCodeLength() - b.currentPc() + 1);    maxStack=b.getMaxStack();    maxLocals=b.getMaxLocals();    int pos=iterator.append(b.get());    iterator.append(b.getExceptionTable(),pos);    etable.setHandlerPc(index,pos);  } catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  CompileError e) {    throw new CannotCompileException(e);  }}  }
class C{  protected int indexedTermPrefixLength(final BytesRef priorTerm,final BytesRef indexedTerm){  return StringHelper.sortKeyLength(priorTerm,indexedTerm);}  }
class C{  public SparseMap(){  this(Order.DEFAULT);}  }
class C{  public void verifyGetComplexResponseWithExample() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/complexResponseWithExample","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  ObjectMapper mapper=Json.mapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS,true);  assertEquals(mapper.readValue(str,JsonNode.class),mapper.readValue("{\n  \"foo\":\"bar\"\n}\n",JsonNode.class));}  }
class C{  private void streamStuff(String cmd,Collection<String> streams){  TwitchUrl.removeInvalidStreams(streams);  if (streams.isEmpty() && cmdRequiresStream(cmd)) {    JOptionPane.showMessageDialog(getActiveWindow(),"Can't perform action: No stream/channel.","Info",JOptionPane.INFORMATION_MESSAGE);    return;  }  String firstStream=null;  if (!streams.isEmpty()) {    firstStream=streams.iterator().next();  }  if (cmd.equals("stream") || cmd.equals("streamPopout") || cmd.equals("streamPopoutOld")|| cmd.equals("profile")) {    List<String> urls=new ArrayList<>();    for (    String stream : streams) {      String url;switch (cmd) {case "stream":        url=TwitchUrl.makeTwitchStreamUrl(stream,false);      break;case "profile":    url=TwitchUrl.makeTwitchProfileUrl(stream);  break;case "streamPopout":url=TwitchUrl.makeTwitchPlayerUrl(stream);break;default :url=TwitchUrl.makeTwitchStreamUrl(stream,true);break;}urls.add(url);}UrlOpener.openUrlsPrompt(getActiveWindow(),urls,true);} else if (cmd.equals("join")) {Set<String> channels=new HashSet<>();for (String stream : streams) {channels.add(stream);}makeVisible();client.joinChannels(channels);} else if (cmd.startsWith("streams")) {ArrayList<String> streams2=new ArrayList<>();for (String stream : streams) {streams2.add(stream);}String type=TwitchUrl.MULTITWITCH;switch (cmd) {case "streamsSpeedruntv":type=TwitchUrl.SPEEDRUNTV;break;case "streamsKadgar":type=TwitchUrl.KADGAR;break;}TwitchUrl.openMultitwitch(streams2,getActiveWindow(),type);} else if (cmd.startsWith("livestreamer")) {String quality=null;if (cmd.startsWith("livestreamerQ")) {quality=StringUtil.toLowerCase(cmd.substring(13));if (quality.equalsIgnoreCase("select")) {quality=null;}}for (String stream : streams) {livestreamerDialog.open(stream.toLowerCase(),quality);}} else if (cmd.equals("showChannelEmotes")) {if (firstStream != null) {openEmotesDialogChannelEmotes(firstStream.toLowerCase());}} else if (cmd.equals("hostchannel")) {if (firstStream != null && streams.size() == 1) {client.command(null,"host2",firstStream.toLowerCase());} else {printLine("Can't host more than one channel.");}} else if (cmd.equals("follow")) {for (String stream : streams) {client.commandFollow(null,stream);}} else if (cmd.equals("unfollow")) {for (String stream : streams) {client.commandUnfollow(null,stream);}} else if (cmd.equals("copy") && !streams.isEmpty()) {MiscUtil.copyToClipboard(StringUtil.join(streams,", "));}}  }
class C{  public P12Reader(File file,String password) throws GeneralSecurityException, IOException {  this(new FileInputStream(file),password);}  }
class C{  public synchronized void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  if (log.isDebugEnabled()) {    log.debug("write CV=" + CV + " val="+ val);  }  byte[] contents=NmraPacket.opsCvWriteByte(mAddress,mLongAddr,CV,val);  EasyDccMessage msg=new EasyDccMessage(4 + 3 * contents.length);  msg.setOpCode('S');  msg.setElement(1,' ');  msg.setElement(2,'0');  msg.setElement(3,'5');  int j=4;  for (int i=0; i < contents.length; i++) {    msg.setElement(j++,' ');    msg.addIntAsTwoHex(contents[i] & 0xFF,j);    j=j + 2;  }  useProgrammer(p);  _progRead=false;  progState=COMMANDSENT;  _val=val;  _cv=CV;  startShortTimer();  controller().sendEasyDccMessage(msg,this);}  }
class C{  @TargetApi(23) private boolean maybeRequestPermission(){  if (requiresPermission(contentUri)) {    requestPermissions(new String[]{permission.READ_EXTERNAL_STORAGE},0);    return true;  } else {    return false;  }}  }
class C{  public static URI encode(final String url){  return URI.create(url.replaceAll(" ",SPACE));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public Transaction(NetworkParameters params,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);}  }
class C{  public boolean isOK(){  return getResult() == RESULT_OK;}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.DELEGATING_GETTER_DECLARATION;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private synchronized void saveToSettings(){  if (settings != null) {    List<List> dataToSave=new ArrayList<>();    for (    Hotkey hotkey : hotkeys) {      dataToSave.add(hotkeyToList(hotkey));    }    settings.putList(SETTING_NAME,dataToSave);  }}  }
class C{  public final void initAction(@NotNull AnAction targetAction){  Presentation sourcePresentation=getTemplatePresentation();  Presentation targetPresentation=targetAction.getTemplatePresentation();  if (targetPresentation.getIcon() == null && sourcePresentation.getIcon() != null) {    targetPresentation.setIcon(sourcePresentation.getIcon());  }  if (targetPresentation.getText() == null && sourcePresentation.getText() != null) {    targetPresentation.setText(sourcePresentation.getText());  }  if (targetPresentation.getDescription() == null && sourcePresentation.getDescription() != null) {    targetPresentation.setDescription(sourcePresentation.getDescription());  }  targetAction.setShortcutSet(getShortcutSet());}  }
class C{  public BusyPeerException(final String message){  super(message);}  }
class C{  private void fillContent(){  id.setText(migrationTask.getId());  name.setText(migrationTask.getName());  description.setText(migrationTask.getDescription());  quarter.setText(migrationTask.getOkrQuarter());  updatedBy.setText(migrationTask.getUpdatedBy());  Calendar date=migrationTask.getUpdatedCalendar();  if (null == date) {    date=Calendar.getInstance();  }  updateDate.setYear(date.get(Calendar.YEAR));  updateDate.setMonth(date.get(Calendar.MONTH));  updateDate.setDay(date.get(Calendar.DAY_OF_MONTH));}  }
class C{  private void addRoundedCorner(@NonNull GeometryArrays geoArrays,@NonNull float[] center,float[] radius,float rads0,float rads1,int triangles,@NonNull RectF viewPort,float z){  final float[] vertices=geoArrays.triangleVertices;  final short[] indices=geoArrays.triangleIndices;  final int verticesOffset=geoArrays.verticesOffset;  final int indicesOffset=geoArrays.indicesOffset;  for (int i=0; i < triangles; i++) {    final int currentOffset=verticesOffset + i * 5 + (i > 0 ? 2 * 5 : 0);    final float rads=rads0 + (rads1 - rads0) * (i / (float)triangles);    final float radsNext=rads0 + (rads1 - rads0) * ((i + 1) / (float)triangles);    final int triangleEdge2Offset;    if (i == 0) {      vertices[currentOffset]=center[0];      vertices[currentOffset + 1]=center[1];      vertices[currentOffset + 2]=z;      vertices[currentOffset + 3]=(vertices[currentOffset] - viewPort.left) / viewPort.width();      vertices[currentOffset + 4]=(vertices[currentOffset + 1] - viewPort.bottom) / -viewPort.height();      vertices[currentOffset + 5]=center[0] + radius[0] * (float)Math.cos(rads);      vertices[currentOffset + 6]=center[1] + radius[1] * (float)Math.sin(rads);      vertices[currentOffset + 7]=z;      vertices[currentOffset + 8]=(vertices[currentOffset + 5] - viewPort.left) / viewPort.width();      vertices[currentOffset + 9]=(vertices[currentOffset + 6] - viewPort.bottom) / -viewPort.height();      triangleEdge2Offset=10;    } else {      triangleEdge2Offset=0;    }    final int edge2Offset=currentOffset + triangleEdge2Offset;    vertices[edge2Offset]=center[0] + radius[0] * (float)Math.cos(radsNext);    vertices[edge2Offset + 1]=center[1] + radius[1] * (float)Math.sin(radsNext);    vertices[edge2Offset + 2]=z;    vertices[edge2Offset + 3]=(vertices[edge2Offset] - viewPort.left) / viewPort.width();    vertices[edge2Offset + 4]=(vertices[edge2Offset + 1] - viewPort.bottom) / -viewPort.height();    final int initialIdx=verticesOffset / 5;    indices[indicesOffset + i * 3]=(short)(initialIdx);    indices[indicesOffset + i * 3 + 1]=(short)(initialIdx + i + 1);    indices[indicesOffset + i * 3 + 2]=(short)(initialIdx + i + 2);  }}  }
class C{  @Activate protected void activate(Map<String,Object> properties){  try {    session=repository.loginAdministrative(null);  } catch (  LoginException e) {    LOGGER.error("Could not get session.",e);  }catch (  RepositoryException e) {    LOGGER.error("Could not get session.",e);  }}  }
class C{  void reset(){  target=null;  reset(true);}  }
class C{  public static int argb(int a,int r,int g,int b){  return (a << 24) | (r << 16) | (g << 8)| b;}  }
class C{  public Boolean isSnapshotUri(){  return snapshotUri;}  }
class C{  public static List<ShapeRecord> path(PathNode node,boolean fill){  String data=node.data;  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();  if (data.length() == 0)   return shapeRecords;  String temp=data;  Matcher m=charNumberPattern.matcher(data);  if (m.find()) {    temp=m.replaceAll("$1 $2");  }  m=numberCharPattern.matcher(temp);  temp=m.replaceAll("$1 $2");  m=charCharPattern.matcher(temp);  temp=m.replaceAll("$1 $2");  m=scientificPattern.matcher(temp);  temp=m.replaceAll("$1$3$5");  m=commaPattern.matcher(temp);  temp=m.replaceAll(" ");  temp=temp.trim();  String[] args=spacePattern.split(temp);  char ic=0;  char prevIc=0;  double lastMoveX=0.0;  double lastMoveY=0.0;  double prevX=0.0;  double prevY=0.0;  double x=0.0;  double y=0.0;  double controlX=0.0;  double controlY=0.0;  double control2X=0.0;  double control2Y=0.0;  boolean firstMove=true;  for (int i=0; i < args.length; ) {    boolean relative=false;    char c=args[i].toCharArray()[0];    if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {      ic=c;      i++;    }    if ((firstMove) && (ic != 'm') && (ic != 'M'))     throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidPathData");switch (ic) {case 'm':      relative=true;case 'M':    if (firstMove) {      x=Double.parseDouble(args[i++]);      y=Double.parseDouble(args[i++]);      shapeRecords.add(move(x,y));      firstMove=false;    } else {      if (fill && (Math.abs(prevX - lastMoveX) > AbstractFXGNode.EPSILON || Math.abs(prevY - lastMoveY) > AbstractFXGNode.EPSILON)) {        if (node.stroke == null)         shapeRecords.addAll(straightEdge(prevX,prevY,lastMoveX,lastMoveY)); else         shapeRecords.addAll(implicitClosepath(prevX,prevY,lastMoveX,lastMoveY));      }      x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);      y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);      shapeRecords.add(move(x,y));    }  lastMoveX=x;lastMoveY=y;ic=(relative) ? 'l' : 'L';break;case 'l':relative=true;case 'L':x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);shapeRecords.addAll(straightEdge(prevX,prevY,x,y));break;case 'h':relative=true;case 'H':x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);y=prevY;shapeRecords.addAll(straightEdge(prevX,prevY,x,y));break;case 'v':relative=true;case 'V':x=prevX;y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);shapeRecords.addAll(straightEdge(prevX,prevY,x,y));break;case 'q':relative=true;case 'Q':controlX=Double.parseDouble(args[i++]) + (relative ? prevX : 0);controlY=Double.parseDouble(args[i++]) + (relative ? prevY : 0);x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);shapeRecords.add(curvedEdge(prevX,prevY,controlX,controlY,x,y));break;case 't':relative=true;case 'T':if ((prevIc == 'T') || (prevIc == 't') || (prevIc == 'q')|| (prevIc == 'Q')) {controlX=prevX + (prevX - controlX);controlY=prevY + (prevY - controlY);} else {controlX=prevX;controlY=prevY;}x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);shapeRecords.add(curvedEdge(prevX,prevY,controlX,controlY,x,y));break;case 'c':relative=true;case 'C':controlX=Double.parseDouble(args[i++]) + (relative ? prevX : 0);controlY=Double.parseDouble(args[i++]) + (relative ? prevY : 0);control2X=Double.parseDouble(args[i++]) + (relative ? prevX : 0);control2Y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);shapeRecords.addAll(cubicToQuadratic(prevX,prevY,controlX,controlY,control2X,control2Y,x,y));break;case 's':relative=true;case 'S':if ((prevIc == 'S') || (prevIc == 's') || (prevIc == 'c')|| (prevIc == 'C')) {controlX=prevX + (prevX - control2X);controlY=prevY + (prevY - control2Y);} else {controlX=prevX;controlY=prevY;}control2X=Double.parseDouble(args[i++]) + (relative ? prevX : 0);control2Y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);x=Double.parseDouble(args[i++]) + (relative ? prevX : 0);y=Double.parseDouble(args[i++]) + (relative ? prevY : 0);shapeRecords.addAll(cubicToQuadratic(prevX,prevY,controlX,controlY,control2X,control2Y,x,y));break;case 'z':case 'Z':shapeRecords.addAll(straightEdge(prevX,prevY,lastMoveX,lastMoveY));x=lastMoveX;y=lastMoveY;break;default :throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidPathData");}prevX=x;prevY=y;prevIc=ic;}if (fill && (Math.abs(prevX - lastMoveX) > AbstractFXGNode.EPSILON) || (Math.abs(prevY - lastMoveY) > AbstractFXGNode.EPSILON)) {if (node.stroke == null) shapeRecords.addAll(straightEdge(prevX,prevY,lastMoveX,lastMoveY)); else shapeRecords.addAll(implicitClosepath(prevX,prevY,lastMoveX,lastMoveY));}return shapeRecords;}  }
class C{  public static void onesI(long[] v,int bits){  final int fillWords=bits >>> LONG_LOG2_SIZE;  final int fillBits=bits & LONG_LOG2_MASK;  Arrays.fill(v,0,fillWords,LONG_ALL_BITS);  v[fillWords]=(1L << fillBits) - 1;  Arrays.fill(v,fillWords + 1,v.length,0L);}  }
class C{  public void updateSkybox(int front,int right,int back,int left,int up,int down) throws Exception {  if (mSkyboxTexture.getClass() != CubeMapTexture.class)   throw new Exception("The skybox texture cannot be updated. It is not a cube map texture.");  int[] resourceIds=new int[]{front,right,back,left,up,down};  CubeMapTexture cubemap=(CubeMapTexture)mSkyboxTexture;  cubemap.setResourceIds(resourceIds);  mRenderer.getTextureManager().replaceTexture(cubemap);}  }
class C{  @NotNull @Contract(pure=true) public static <T>T[] mergeArrayAndCollection(@NotNull T[] array,@NotNull Collection<T> collection,@NotNull final ArrayFactory<T> factory){  if (collection.isEmpty()) {    return array;  }  final T[] array2;  try {    array2=collection.toArray(factory.create(collection.size()));  } catch (  ArrayStoreException e) {    throw new RuntimeException("Bad elements in collection: " + collection,e);  }  if (array.length == 0) {    return array2;  }  final T[] result=factory.create(array.length + collection.size());  System.arraycopy(array,0,result,0,array.length);  System.arraycopy(array2,0,result,array.length,array2.length);  return result;}  }
class C{  IntEntry<VALUE> removeMapping(Object o){  if (!(o instanceof IntEntry))   return null;  IntEntry<VALUE> entry=(IntEntry<VALUE>)o;  int hash=hash(entry.key);  int i=indexFor(hash,table.length);  IntEntry<VALUE> prev=table[i];  IntEntry<VALUE> e=prev;  while (e != null) {    IntEntry<VALUE> next=e.next;    if (e.hash == hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public void reset(){  if (!m_hasBeenReset && m_shouldReset) {    m_hasBeenReset=true;    if (this.m_outputStream != null) {      try {        m_outputStream.close();      } catch (      java.io.IOException ioe) {      }    }    m_outputStream=null;    m_countersTable=null;    m_xcontext.reset();    m_xcontext.getVarStack().reset();    resetUserParameters();    m_currentTemplateElements.removeAllElements();    m_currentMatchTemplates.removeAllElements();    m_currentMatchedNodes.removeAllElements();    m_serializationHandler=null;    m_outputTarget=null;    m_keyManager=new KeyManager();    m_attrSetStack=null;    m_countersTable=null;    m_currentTemplateRuleIsNull=new BoolStack();    m_doc=DTM.NULL;    m_transformThread=null;    m_xcontext.getSourceTreeManager().reset();  }}  }
class C{  public Builder scrollDistance(float refreshScrollDistance){  mOptions.refreshScrollDistance=refreshScrollDistance;  return this;}  }
class C{  protected Buffer(IFile file,IOpenable owner,boolean readOnly){  this.file=file;  this.owner=owner;  if (file == null) {    setReadOnly(readOnly);  }}  }
class C{  public static File pdeBootstrap(){  return defOverride(ROOT + "/pde-bootstrap",override_pdeBootstrap);}  }
class C{  public boolean isPublishedInGlobalMarketPlace(){  return publishedInGlobalMarketPlace;}  }
class C{  public SelectClause add(Expression expression){  selectList.add(new SelectClauseExpression(expression));  return this;}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (SerialAddress.validSystemNameConfig(systemName,'L',_memo.getTrafficController()));}  }
class C{  void error(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=this.getErrorListener();  TransformerException te=new TransformerException(fmsg,m_sourceLocator);  if (null != ehandler) {    ehandler.fatalError(te);  } else {    throw te;  }}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void loadIdentityQuat(){  this.dirty=true;  setX(0);  setY(0);  setZ(0);  setW(1);}  }
class C{  public void deleteStoreFiles(){  Storage cls=new Storage(this);  cls.deleteAll();}  }
class C{  public OutlierResult run(Database database,Relation<NumberVector> relation){  final int dbdim=RelationUtil.dimensionality(relation);  final int mindim=dbdim >> 1;  final int maxdim=dbdim - 1;  final Random rand=rnd.getSingleThreadedRandom();  ArrayList<OutlierResult> results=new ArrayList<>(num);{    FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("LOF iterations",num,LOG) : null;    for (int i=0; i < num; i++) {      long[] dimset=randomSubspace(dbdim,mindim,maxdim,rand);      SubspaceEuclideanDistanceFunction df=new SubspaceEuclideanDistanceFunction(dimset);      LOF<NumberVector> lof=new LOF<>(k,df);      OutlierResult result=lof.run(database,relation);      results.add(result);      LOG.incrementProcessed(prog);    }    LOG.ensureCompleted(prog);  }  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax minmax=new DoubleMinMax();  if (breadth) {    FiniteProgress cprog=LOG.isVerbose() ? new FiniteProgress("Combining results",relation.size(),LOG) : null;    @SuppressWarnings("unchecked") Pair<DBIDIter,DoubleRelation>[] IDVectorOntoScoreVector=(Pair<DBIDIter,DoubleRelation>[])new Pair[results.size()];{      int i=0;      for (      OutlierResult r : results) {        IDVectorOntoScoreVector[i]=new Pair<DBIDIter,DoubleRelation>(r.getOrdering().order(relation.getDBIDs()).iter(),r.getScores());        i++;      }    }    for (int i=0; i < relation.size(); i++) {      for (      Pair<DBIDIter,DoubleRelation> pair : IDVectorOntoScoreVector) {        DBIDIter iter=pair.first;        if (iter.valid()) {          double score=pair.second.doubleValue(iter);          if (Double.isNaN(scores.doubleValue(iter))) {            scores.putDouble(iter,score);            minmax.put(score);          }          iter.advance();        } else {          LOG.warning("Incomplete result: Iterator does not contain |DB| DBIDs");        }      }      LOG.incrementProcessed(cprog);    }    LOG.ensureCompleted(cprog);  } else {    FiniteProgress cprog=LOG.isVerbose() ? new FiniteProgress("Combining results",relation.size(),LOG) : null;    for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {      double sum=0.0;      for (      OutlierResult r : results) {        final double s=r.getScores().doubleValue(iter);        if (!Double.isNaN(s)) {          sum+=s;        }      }      scores.putDouble(iter,sum);      minmax.put(sum);      LOG.incrementProcessed(cprog);    }    LOG.ensureCompleted(cprog);  }  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax());  DoubleRelation scoreres=new MaterializedDoubleRelation("Feature bagging","fb-outlier",scores,relation.getDBIDs());  return new OutlierResult(meta,scoreres);}  }
class C{  @Override public CompletableFuture<Optional<T>> findAny(){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  protected boolean[] canHandleClassAsNthAttribute(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex){  if (classIndex == TestInstances.CLASS_IS_LAST) {    print("class attribute as last attribute");  } else {    print("class attribute as " + (classIndex + 1) + ". attribute");  }  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,classIndex,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  public static ParseTreeNode substV(String patternText,Object... args){  if (args.length % 2 != 0) {    throw new SomethingWidgyHappenedError("Wrong # of args for subst()");  }  Map<String,ParseTreeNode> bindings=makeBindings();  for (int i=0; i < args.length; i+=2) {    ParseTreeNode value=(ParseTreeNode)args[i + 1];    if (value != null) {    }    bindings.put((String)args[i],value);  }  ParseTreeNode result=subst(patternText,bindings);  if (result == null) {    throw new NullPointerException("'" + patternText + "' > "+ bindings.keySet());  }  return result;}  }
class C{  public Floor(){  super("floor",1);}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  public YearMonthDay withYear(int year){  int[] newValues=getValues();  newValues=getChronology().year().set(this,YEAR,newValues,year);  return new YearMonthDay(this,newValues);}  }
class C{  public String toString(){  return (ComponentTime.stampToString(timestamp));}  }
class C{  protected void runDataBridgeAndCheckReturnValue(DataBridgeApp dataBridgeApp,String[] args,Class<?> noLoggingClass,Object expectedException) throws Exception {  runDataBridgeAndCheckReturnValue(dataBridgeApp,args,noLoggingClass,null,expectedException);}  }
class C{  private void pasteIntoColumn(int row,int col,Object value){  int dataRow=row - getNumLeadingRows();  int dataCol=col - getNumLeadingCols();  Node variable=dataSet.getVariable(dataCol);  if (variable instanceof ContinuousVariable && value instanceof Number) {    dataSet.setObject(dataRow,dataCol,value);    return;  }  if ("".equals(value) || value == null) {    return;  }  String valueTrimmed=((String)value).trim();  boolean quoted=false;  if (valueTrimmed.startsWith("\"") && valueTrimmed.endsWith("\"")) {    value=valueTrimmed.substring(1,valueTrimmed.length() - 1);    quoted=true;  }  if (!(variable instanceof DiscreteVariable) && isEmpty(dataSet,dataCol) && (quoted || !isNumber((String)value))) {    variable=swapDiscreteColumnForContinuous(col);  }  if (value instanceof String && ((String)value).trim().equals("*")) {    value=((Variable)variable).getMissingValueMarker();  }  dataSet.setObject(dataRow,dataCol,value);  pcs.firePropertyChange("modelChanged",null,null);}  }
class C{  @DSComment("no suspicious activity, just sets class variable") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.055 -0500",hash_original_method="09713AE8E462C0BAD085649F546AAF7D",hash_generated_method="55E366EE8A7AA79983A756D644DF43C1") public SocketTimeoutException(String detailMessage){  super(detailMessage);}  }
class C{  public void run(){  try {    operatorCheck();    myTurnout.forwardCommandChangeToLayout();    while (++tries < maxTries) {      try {        Thread.sleep(interval);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }      operatorCheck();      myTurnout.forwardCommandChangeToLayout();    }    myTurnout.setKnownStateToCommanded();  } catch (  TurnoutOperatorException e) {  }}  }
class C{  static void link(final BasicBlock parent,final BasicBlock child){  parent.m_children.add(child);  child.m_parents.add(parent);}  }
class C{  protected Package definePackage(String name,String specTitle,String specVersion,String specVendor,String implTitle,String implVersion,String implVendor,URL sealBase) throws IllegalArgumentException {synchronized (definedPackages) {    if (getPackage(name) != null) {      throw new IllegalArgumentException("Package " + name + "has been already defined.");    }    Package pkg=new Package(this,name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase);    definedPackages.put(name,pkg);    return pkg;  }}  }
class C{  public DateTimeFormatterBuilder appendMonthOfYearText(){  return appendText(DateTimeFieldType.monthOfYear());}  }
class C{  public static final boolean isIplDt402IdentityReportMessage(LocoNetMessage m){  return isIplSpecificIdentityReportMessage(m,LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_DT402);}  }
class C{  @Override public void modifyVariableId(String oldId,String newId){  if ((baseVar + primes).equals(oldId)) {    this.baseVar=newId.replace("'","");    this.primes=newId.replace(baseVar,"");  }}  }
class C{  public void activate(){  if (mAccelerometerSensor != null) {    mSensorManager.registerListener(this,mAccelerometerSensor,SensorManager.SENSOR_DELAY_NORMAL);  }  if (mMagneticSensor != null) {    mSensorManager.registerListener(this,mMagneticSensor,SensorManager.SENSOR_DELAY_NORMAL);  }}  }
class C{  private void cancelDownloadsForAccount(Account account){  mPendingDownloads.remove(account);}  }
class C{  public void stop(){  if (stopped) {    return;  }  this.stopped=true;  log.info("Stopping spidering process by request.");  if (this.paused) {    this.resume();  }  this.threadPool.shutdown();  try {    if (!this.threadPool.awaitTermination(2,TimeUnit.SECONDS)) {      log.warn("Failed to await for all spider threads to stop in the given time (2s)...");      for (      Runnable task : this.threadPool.shutdownNow()) {        ((SpiderTask)task).cleanup();      }    }  } catch (  InterruptedException ignore) {    log.warn("Interrupted while awaiting for all spider threads to stop...");  }  if (httpSender != null) {    this.getHttpSender().shutdown();    httpSender=null;  }  controller.reset();  this.threadPool=null;  notifyListenersSpiderComplete(false);}  }
class C{  public TimeEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public final void removeColumn(int index){  if (index < 0 || index >= variables.size()) {    throw new IllegalArgumentException("Not a column in this tetradMatrix set: " + index);  }  variables.remove(index);  int[] rows=new int[tetradMatrix.rows()];  for (int i=0; i < tetradMatrix.rows(); i++) {    rows[i]=i;  }  int[] cols=new int[tetradMatrix.columns() - 1];  int m=-1;  for (int i=0; i < tetradMatrix.columns(); i++) {    if (i != index) {      cols[++m]=i;    }  }  tetradMatrix=tetradMatrix.getSelection(rows,cols).copy();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  Object clone=createCopy(0,getItemCount() - 1);  return clone;}  }
class C{  private void initializeTypeLoader(){  this.typeLoader=new FixtureTypeLoaderChain(classLoader);  if (altLoader != null) {    altLoader.addLoader(classLoader);  }  for (  String importedPackage : importedPackages) {    typeLoader.searchPackage(importedPackage);  }}  }
class C{  public File createFileObject(String path){  if (path.length() >= 2 && path.charAt(1) == ':' && Character.isLetter(path.charAt(0))) {    if (path.length() == 2) {      path+="\\";    } else     if (path.charAt(2) != '\\') {      path=path.substring(0,2) + "\\" + path.substring(2);    }  }  return super.createFileObject(path);}  }
class C{  public boolean areInSameHierarchy(String ac1,String ac2){  if (ac1.equals(ac2)) {    return true;  }  if (this.entryHierarchyDataMap.containsKey(ac1)) {    final EntryHierarchyData data=this.entryHierarchyDataMap.get(ac1);    final Set<String> entriesInSameHierarchy=data.getEntriesInSameHierarchy();    return entriesInSameHierarchy != null && entriesInSameHierarchy.contains(ac2);  }  return false;}  }
class C{  public static DomainObject<?> verifyVersionAndKey(DomainObject<?> toBeUpdated,BasePO template) throws ConcurrentModificationException {  if (toBeUpdated.getVersion() > template.getVersion()) {    ConcurrentModificationException cme=new ConcurrentModificationException(template.getClass().getSimpleName(),template.getVersion());    logger.logWarn(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_CONCURRENT_MODIFICATION,template.getClass().getSimpleName());    throw cme;  }  if (toBeUpdated.getKey() != template.getKey()) {    if (template.getKey() == 0) {      ConcurrentModificationException cme=new ConcurrentModificationException(template.getClass().getSimpleName(),template.getVersion());      logger.logWarn(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_OBJECT_CREATED_CONCURRENTLY,template.getClass().getSimpleName());      throw cme;    } else {      SaaSSystemException sse=new SaaSSystemException(String.format("Different object keys for type %s",DomainObject.getDomainClass(toBeUpdated).getSimpleName()));      logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_DIFFERENT_KEY_TYPE,toBeUpdated.getClass().getSimpleName());      throw sse;    }  }  return toBeUpdated;}  }
class C{  public static <V extends SampledVertex>Set<V> createDetectedPartition(Collection<V> vertices,int iteration){  Set<V> partition=new HashSet<V>();  for (  V vertex : vertices) {    if (vertex.isDetected()) {      if (vertex.getIterationDetected() == iteration)       vertices.add(vertex);    }  }  return partition;}  }
class C{  public static final Map<String,String> parseLabelsSelectors(String selectors) throws ParseException {  String[] tokens=UnsafeString.split(selectors,',');  Map<String,String> result=new HashMap<String,String>(tokens.length);  for (  String token : tokens) {    token=token.trim();    if ("".equals(token)) {      continue;    }    boolean exact=true;    Iterable<String> stokens;    String[] subtokens;    if (token.contains("=")) {      exact=true;      subtokens=UnsafeString.split(token,'=');    } else     if (token.contains("~")) {      exact=false;      subtokens=UnsafeString.split(token,'~');    } else {      throw new ParseException(token,0);    }    String name=subtokens[0];    String value=subtokens.length > 1 ? subtokens[1] : "";    try {      if (name.contains("%")) {        name=URLDecoder.decode(name,"UTF-8");      }      if (value.contains("%")) {        value=URLDecoder.decode(value,"UTF-8");      }    } catch (    UnsupportedEncodingException uee) {    }    result.put(name,(exact ? "=" : "~") + value);  }  return result;}  }
class C{  public static Integer createInteger(final String str){  if (str == null) {    return null;  }  return Integer.decode(str);}  }
class C{  @Override protected void onDraw(Canvas canvas){  if (adaptedImage != null)   canvas.drawBitmap(adaptedImage,0,0,paint);}  }
class C{  private void exit(){  sp.stop();  this.setVisible(false);  if (getOwner() != null) {    getOwner().setEnabled(true);  }  this.dispose();  LOGGER.debug("about dialog closed");}  }
class C{  public static Map<String,List<String>> toMultimap(Headers headers,String valueForNullKey){  Map<String,List<String>> result=new TreeMap<>(FIELD_NAME_COMPARATOR);  for (int i=0, size=headers.size(); i < size; i++) {    String fieldName=headers.name(i);    String value=headers.value(i);    List<String> allValues=new ArrayList<>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (valueForNullKey != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(valueForNullKey)));  }  return Collections.unmodifiableMap(result);}  }
class C{  public TextFormat withFont(Font font){  return new TextFormat(font,this.antialias);}  }
class C{  public void showSplashScreen(){  if (Model.getSingleton().getOptionsParam().getViewParam().isShowSplashScreen()) {    splashScreen=new SplashScreen();  }}  }
class C{  @Override public String toString(){  String result="DensityBasedClustererSplitEvaluator: ";  if (m_clusterer == null) {    return result + "<null> clusterer";  }  return result + m_clusterer.getClass().getName() + " "+ m_clustererOptions+ "(version "+ m_clustererVersion+ ")";}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTDomainPrincipal.name","sun.security.util.AuthResources"));  Object[] source={name};  return form.format(source);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean equivalent(INode n){  if (n == null) {    return false;  }  EightPuzzleNode state=(EightPuzzleNode)n;  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      if (board[r][c] != state.board[r][c]) {        return false;      }    }  }  return true;}  }
class C{  public void requestURL(InfoDisplayEvent event){  displayURL(event.getInformation());}  }
class C{  protected void clearOutEvents(){  sCInterface.clearOutEvents();}  }
class C{  public static String byte2HexFormatted(byte[] arr){  StringBuilder str=new StringBuilder(arr.length * 2);  for (int i=0; i < arr.length; i++) {    String h=Integer.toHexString(arr[i]);    int l=h.length();    if (l == 1)     h="0" + h;    if (l > 2)     h=h.substring(l - 2,l);    str.append(h.toUpperCase());    if (i < (arr.length - 1))     str.append(':');  }  return str.toString();}  }
class C{  public Properties asProperties(){  Properties properties=new Properties();  for (  Setting entry : settings) {    properties.setProperty(entry.getKey(),entry.getValue());  }  return properties;}  }
class C{  public boolean isExistsKey(Connection connection,Object[] keys){  StringBuilder builder=new StringBuilder();  builder.append("select 1 from ");  builder.append(tableName);  builder.append(" where ");  String delimiter="";  for (  String keyField : keyFieldNames) {    builder.append(delimiter);    builder.append(keyField);    builder.append("=?");    delimiter=" and ";  }  String query=builder.toString();  PreparedStatement statement=null;  try {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Executing query '" + query + "' for keys '"+ print(keys)+ "'");    }    statement=connection.prepareStatement(query);    for (int i=0; i < keys.length; i++) {      statement.setObject(i + 1,keys[i]);    }    ResultSet rs=statement.executeQuery();    if (!rs.next()) {      return false;    }    return true;  } catch (  SQLException ex) {    String message="Failed to invoke : " + query + " :"+ ex.getMessage();    log.error(message,ex);    storeExceptionHandler.handle(message,ex);    throw new StoreExceptionDBRel(message,ex);  } finally {    try {      if (statement != null)       statement.close();    } catch (    SQLException e) {    }  }}  }
class C{  void processDragDropEnd(DragSourceDropEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragDropEnd(dsde);  }}  }
class C{  public void generate(java.io.Writer out) throws java.io.IOException {  out.write(s);}  }
class C{  private void validateNoExpansionWithMirroringOrFail(BlockVirtualPoolParam createParam){  Map<String,Object> protections=getProtectionParameters(createParam);  if (protections.get(PROTECTION_MIRRORS) != null && (createParam.getExpandable() == null || createParam.getExpandable())) {    throw APIException.badRequests.virtualPoolDoesNotSupportExpandable();  }}  }
class C{  protected void moveToPosition(Position oldPosition,Position newPosition){  Angle distanceAngle=LatLon.greatCircleDistance(oldPosition,newPosition);  Angle azimuthAngle=LatLon.greatCircleAzimuth(oldPosition,newPosition);  measureTool.moveMeasureShape(azimuthAngle,distanceAngle);  measureTool.firePropertyChange(MeasureTool.EVENT_POSITION_REPLACE,oldPosition,newPosition);}  }
class C{  public textarea addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void createOrderExecution(Contract contract,TradeOrder order,BigDecimal filledPrice,ZonedDateTime date) throws IOException {  double commission=order.getQuantity() * 0.005d;  if (commission < 1) {    commission=1;  }  TradeOrderfill execution=new TradeOrderfill();  execution.setTradeOrder(order);  execution.setAveragePrice(filledPrice);  execution.setCommission(new BigDecimal(commission));  execution.setCumulativeQuantity(order.getQuantity());  execution.setExchange("BATS");  execution.setPrice(filledPrice);  execution.setTime(date);  if (Action.BUY.equals(order.getAction())) {    execution.setSide(Side.BOT);  } else {    execution.setSide(Side.SLD);  }  execution.setQuantity(order.getQuantity());  execution.setExecId(String.valueOf(execId++));  this.brokerModel.execDetails(execution.getTradeOrder().getOrderKey(),contract,execution);  OrderState orderState=new OrderState();  orderState.m_status=OrderStatus.FILLED;  orderState.m_commission=commission;  this.brokerModel.openOrder(order.getOrderKey(),contract,order,orderState);}  }
class C{  public SearchSourceBuilder query(byte[] queryBinary,int queryBinaryOffset,int queryBinaryLength){  return query(new BytesArray(queryBinary,queryBinaryOffset,queryBinaryLength));}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  @After public void wipeMarket(){  Market m=TradeCenterZoneConfigurator.getShopFromZone(player.getZone());  m.getSlot(Market.OFFERS_SLOT_NAME).clear();  final SpeakerNPC npc=getNPC("Harold");  if (npc instanceof MarketManagerNPC) {    ((MarketManagerNPC)npc).getOfferMap().clear();  }}  }
class C{  private IgfsMessage processStatusRequest() throws IgniteCheckedException {  IgfsStatus status=igfs.globalSpace();  IgfsControlResponse res=new IgfsControlResponse();  res.status(status);  return res;}  }
class C{  protected void topLevelExpression(Expression e){switch (e.getOp()) {case ASSIGN:case ASGMUL:case ASGDIV:case ASGREM:case ASGADD:case ASGSUB:case ASGLSHIFT:case ASGRSHIFT:case ASGURSHIFT:case ASGBITAND:case ASGBITOR:case ASGBITXOR:case PREINC:case PREDEC:case POSTINC:case POSTDEC:case METHOD:case NEWINSTANCE:    return;}env.error(e.getWhere(),"invalid.expr");}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMMPathElement(prefix,(AbstractDocument)doc);}  }
class C{  public static Tuple min(TupleSet tuples,String field){  return min(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public void voidActivities(){  for (  MPPOrderNode node : this.getNodes(true,getAD_Client_ID())) {    BigDecimal old=node.getQtyRequired();    if (old.signum() != 0) {      node.addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + old+ ")");      node.voidIt();      node.saveEx();    }  }}  }
class C{  public static boolean validateUint64(String value){  try {    return Long.parseLong(value) >= 0L;  } catch (  Exception e) {    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:07.722 -0500",hash_original_method="023476721C0A94B504CC866383D1773A",hash_generated_method="AA4C89CED7ED4B3C6AD226E2C77331C5") public static boolean isInformational(int reply){  return (reply >= 100 && reply < 200);}  }
class C{  public DelegatingWizardDescriptorPanel(Project project,WizardDescriptor.Panel<Data> delegate){  Parameters.notNull("delegate",delegate);  this.project=project;  this.delegate=delegate;}  }
class C{  public EsriPolylineList(){  super();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.285 -0500",hash_original_method="7B3E247666A6F3E05280E703124B5A4E",hash_generated_method="EC58106DBA84FF2516FCC382DA22D5AA") public final void writeLong(long val) throws IOException {  Memory.pokeLong(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.LONG);}  }
class C{  public static SecretKey createAESKey(){  try {    final KeyGenerator kgen=KeyGenerator.getInstance("AES");    final int keySize=256;    kgen.init(keySize);    return kgen.generateKey();  } catch (  final NoSuchAlgorithmException e) {    e.printStackTrace();  }  return null;}  }
class C{  public Mediator removeMediator(String mediatorName){  if (this.view != null) {    return this.view.removeMediator(mediatorName);  }  return null;}  }
class C{  public boolean isFolder(){  return virtualFile.isFolder();}  }
class C{  public void addValue(Number value,Comparable rowKey,Comparable columnKey){  this.data.addValue(value,rowKey,columnKey);  fireDatasetChanged();}  }
class C{  private void cmd_file(){  JFileChooser jfc=new JFileChooser();  jfc.setMultiSelectionEnabled(false);  jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);  jfc.showOpenDialog(this);  File imageFile=jfc.getSelectedFile();  if (imageFile == null || imageFile.isDirectory() || !imageFile.exists())   return;  String fileName=imageFile.getAbsolutePath();  byte[] data=null;  try {    FileInputStream fis=new FileInputStream(imageFile);    ByteArrayOutputStream os=new ByteArrayOutputStream();    byte[] buffer=new byte[1024 * 8];    int length=-1;    while ((length=fis.read(buffer)) != -1)     os.write(buffer,0,length);    fis.close();    data=os.toByteArray();    os.close();    ImageIcon image=new ImageIcon(data,fileName);    imageLabel.setIcon(image);  } catch (  Exception e) {    log.log(Level.WARNING,"load image",e);    return;  }  fileButton.setText(imageFile.getAbsolutePath());  pack();  m_mImage.setName(fileName);  m_mImage.setImageURL(fileName);  m_mImage.setBinaryData(data);}  }
class C{  public boolean isStopped(){  return mDirection == STOPPED;}  }
class C{  public void testDataSourceTransactionEmulationSupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{DatasourcePropertySet.DATASOURCE,DatasourcePropertySet.TRANSACTION_SUPPORT}));  configuration.getDataSources().add(ConfigurationFixtureFactory.createDataSource().buildDataSource());  configuration.getDataSources().add(ConfigurationFixtureFactory.createDriverConfiguredDataSourceWithXaTransactionSupport().buildDataSource());  configuration.collectUnsupportedDataSourcesAndThrowException();  assertEquals(2,configuration.getDataSources().size());}  }
class C{  public h6(String value){  addElement(value);}  }
class C{  public static boolean writeToFile(String filename,String message){  return writeToFile(filename,message,true);}  }
class C{  protected void cmd_process(IMiniTable xMatchedTable,IMiniTable xMatchedToTable,int matchMode,int matchFrom,Object matchTo,BigDecimal m_xMatched){  log.config("");  int matchedRow=xMatchedTable.getSelectedRow();  if (matchedRow < 0)   return;  KeyNamePair lineMatched=(KeyNamePair)xMatchedTable.getValueAt(matchedRow,I_Line);  KeyNamePair Product=(KeyNamePair)xMatchedTable.getValueAt(matchedRow,I_Product);  double totalQty=m_xMatched.doubleValue();  for (int row=0; row < xMatchedToTable.getRowCount(); row++) {    IDColumn id=(IDColumn)xMatchedToTable.getValueAt(row,0);    if (id != null && id.isSelected()) {      KeyNamePair ProductCompare=(KeyNamePair)xMatchedToTable.getValueAt(row,I_Product);      if (Product.getKey() != ProductCompare.getKey())       continue;      KeyNamePair lineMatchedTo=(KeyNamePair)xMatchedToTable.getValueAt(row,I_Line);      double qty=0.0;      if (matchMode == MODE_NOTMATCHED)       qty=((Double)xMatchedToTable.getValueAt(row,I_QTY)).doubleValue();      qty-=((Double)xMatchedToTable.getValueAt(row,I_MATCHED)).doubleValue();      if (qty > totalQty)       qty=totalQty;      totalQty-=qty;      boolean invoice=true;      if (matchFrom == MATCH_ORDER || matchTo.equals(m_matchOptions[MATCH_ORDER]))       invoice=false;      int M_InOutLine_ID=0;      int Line_ID=0;      if (matchFrom == MATCH_SHIPMENT) {        M_InOutLine_ID=lineMatched.getKey();        Line_ID=lineMatchedTo.getKey();      } else {        M_InOutLine_ID=lineMatchedTo.getKey();        Line_ID=lineMatched.getKey();      }      String innerTrxName=Trx.createTrxName("Match");      Trx innerTrx=Trx.get(innerTrxName,true);      if (createMatchRecord(invoice,M_InOutLine_ID,Line_ID,new BigDecimal(qty),innerTrxName))       innerTrx.commit(); else       innerTrx.rollback();      innerTrx.close();      innerTrx=null;    }  }}  }
class C{  public static int parseEAc3SyncframeAudioSampleCount(byte[] data){  return AUDIO_SAMPLES_PER_AUDIO_BLOCK * (((data[4] & 0xC0) >> 6) == 0x03 ? 6 : BLOCKS_PER_SYNCFRAME_BY_NUMBLKSCOD[(data[4] & 0x30) >> 4]);}  }
class C{  public void addClass(XClass xclass){  addClassAndGetClassVertex(xclass);}  }
class C{  public boolean previousPage() throws SQLException {  int pS;  int mR;  int rem;  pS=getPageSize();  mR=maxRowsreached;  if (populatecallcount == 0) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.nextpage").toString());  }  if (!callWithCon) {    if (resultSet.getType() == ResultSet.TYPE_FORWARD_ONLY) {      throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.fwdonly").toString());    }  }  pagenotend=true;  if (startPrev < startPos) {    onFirstPage=true;    return false;  }  if (onFirstPage) {    return false;  }  rem=mR % pS;  if (rem == 0) {    maxRowsreached-=(2 * pS);    if (callWithCon) {      crsReader.setStartPosition(startPrev);      crsReader.readData((RowSetInternal)this);      resultSet=null;    } else {      populate(resultSet,startPrev);    }    return true;  } else {    maxRowsreached-=(pS + rem);    if (callWithCon) {      crsReader.setStartPosition(startPrev);      crsReader.readData((RowSetInternal)this);      resultSet=null;    } else {      populate(resultSet,startPrev);    }    return true;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public void clear(){  try {    file.setLength(header.size());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  void startCancel(int correlationId){  PendingClientCallState state=removePendingRequest(correlationId);  if (state != null) {    RpcCancel rpcCancel=RpcCancel.newBuilder().setCorrelationId(correlationId).build();    if (log.isDebugEnabled()) {      log.debug("Sending [" + rpcCancel.getCorrelationId() + "]RpcCancel.");    }    WirePayload payload=WirePayload.newBuilder().setRpcCancel(rpcCancel).build();    channel.writeAndFlush(payload).awaitUninterruptibly();    String errorMessage="Cancel";    doLogRpc(state,rpcCancel,errorMessage);    state.handleFailure(errorMessage);  } else {    if (log.isDebugEnabled()) {      log.debug("No PendingClientCallState found for correlationId " + correlationId);    }  }}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public void unmountSnapshot() throws BackupException {  logger.debug("Unmounting snapshot: " + this.snapshotName);  processHelper.exec("Unmounting snapshot",umountCmd);}  }
class C{  protected String buildCacheKey(int x,int y,int z,String fileExt){  if (localCacheDir != null) {    return buildLocalFilePath(x,y,z,fileExt);  }  return super.buildCacheKey(x,y,z,fileExt);}  }
class C{  private static boolean isInternalPlugin(ProtectionDomain domain){  return domain.getClassLoader() instanceof InternalPluginClassLoader;}  }
class C{  public CocoaUIEnhancer(String appName){  this.appName=appName;}  }
class C{  public static byte[] encode(byte[] data){  int len=(data.length + 2) / 3 * 4;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.encode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public String guessEncoding(Content content,String defaultValue){  String base=content.getBaseUrl();  if (LOG.isTraceEnabled()) {    findDisagreements(base,clues);  }  EncodingClue defaultClue=new EncodingClue(defaultValue,"default");  EncodingClue bestClue=defaultClue;  for (  EncodingClue clue : clues) {    if (LOG.isTraceEnabled()) {      LOG.trace(base + ": charset " + clue);    }    String charset=clue.value;    if (minConfidence >= 0 && clue.confidence >= minConfidence) {      if (LOG.isTraceEnabled()) {        LOG.trace(base + ": Choosing encoding: " + charset+ " with confidence "+ clue.confidence);      }      return resolveEncodingAlias(charset).toLowerCase();    } else     if (clue.confidence == NO_THRESHOLD && bestClue == defaultClue) {      bestClue=clue;    }  }  if (LOG.isTraceEnabled()) {    LOG.trace(base + ": Choosing encoding: " + bestClue);  }  return bestClue.value.toLowerCase();}  }
class C{  public final boolean isAbstract(){  return Modifier.isAbstract(getModifiers());}  }
class C{  protected float floatSpeed(int lSpeed){  if (lSpeed == 0) {    return 0.f;  } else   if (lSpeed == 1) {    return -1.f;  }  if (getSpeedStepMode() == DccThrottle.SpeedStepMode28) {    if (lSpeed <= 15) {      return 0.f;    }    return (((lSpeed - 12) / 4f) / 28.f);  } else   if (getSpeedStepMode() == DccThrottle.SpeedStepMode14) {    if (lSpeed <= 15) {      return 0.f;    }    return ((lSpeed - 8) / 8f) / 14.f;  } else {    return ((lSpeed - 1) / 126.f);  }}  }
class C{  public int length(){  return count;}  }
class C{  Node<K> find(int h,Object k){  Node<K> e=this;  if (k != null) {    do {      K ek;      if (e.hash == h && ((ek=e.key) == k || (ek != null && k.equals(ek))))       return e;    } while ((e=e.next) != null);  }  return null;}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  private String writeNumber(double d){  return formatter.format(d);}  }
class C{  @POST @Path("consistency") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response checkDbConsistency(){  log.info("receive db consistency check request");  if (isDbConsistencyCheckInProgress()) {    log.warn("db consistency check is already in progress");    throw APIException.badRequests.dbConsistencyCheckAlreadyProgress();  }  enqueueDbConsistencyJob();  log.info("enqueue job into queue successfully");  return Response.ok().build();}  }
class C{  public RibbonArchiveImpl(ArchiveBase<?> archive){  super(archive);}  }
class C{  public void copyQueryResultsToDatastore(List<TableFieldSchema> fields,List<TableRow> rows){  ArrayList<Entity> entities=new ArrayList<Entity>();  Iterator<TableRow> rowsIterator=rows.iterator();  while (rowsIterator.hasNext()) {    Entity entity=new Entity(resultKind,userEntityKey);    Iterator<TableFieldSchema> fieldsIterator=fields.iterator();    Iterator<TableCell> dataIterator=rowsIterator.next().getF().iterator();    Preconditions.checkState(fieldsIterator.hasNext() == dataIterator.hasNext());    while (fieldsIterator.hasNext() && dataIterator.hasNext()) {      Object value=dataIterator.next().getV();      String strValue=(value != null) ? String.valueOf(value) : null;      entity.setProperty(fieldsIterator.next().getName(),strValue);      Preconditions.checkState(fieldsIterator.hasNext() == dataIterator.hasNext());    }    entities.add(entity);  }  service.put(entities);}  }
class C{  private List<Statement> flattenBlocksAndIgnoreNoops(List<? extends Statement> stmts){  int nStmts=stmts.size();  List<Statement> newStmts=null;  int pos=0;  for (int i=0; i < nStmts; ++i) {    ParseTreeNode s=stmts.get(i);    ParseTreeNode optS=optimize(s,false);    if (s != optS || optS instanceof Noop || optS instanceof Block) {      if (newStmts == null) {        newStmts=Lists.newArrayListWithCapacity(nStmts);      }      newStmts.addAll(stmts.subList(pos,i));      if (optS instanceof Block) {        newStmts.addAll(((Block)optS).children());      } else       if (!(optS instanceof Noop)) {        newStmts.add((Statement)optS);      }      pos=i + 1;    }  }  if (newStmts != null) {    newStmts.addAll(stmts.subList(pos,nStmts));  }{    List<? extends Statement> blockStmts=newStmts != null ? newStmts : stmts;    for (int i=0, last=blockStmts.size() - 1; i < last; ++i) {      if (exits(blockStmts.get(i))) {        boolean hasNonDecls=false;        for (int j=i + 1; j <= last; ++j) {          if (!(blockStmts.get(j) instanceof Declaration || blockStmts.get(j) instanceof MultiDeclaration)) {            hasNonDecls=true;            break;          }        }        if (!hasNonDecls) {          break;        }        newStmts=Lists.newArrayList(blockStmts.subList(0,i + 1));        for (int j=i + 1; j <= last; ++j) {          hoistDecls(blockStmts.get(j),newStmts);        }        break;      }    }  }  return newStmts;}  }
class C{  public static int systemSize(){  return systemIndex.size();}  }
class C{  protected boolean comparePatterns(int[] pattern1,int[] pattern2){  int len=pattern1.length;  for (int i=0; i < len; i++) {    if (pattern1[i] != pattern2[i]) {      return false;    }  }  return true;}  }
class C{  public static void main(String[] args) throws Exception {  TestClassPerformance test;  if (args.length == 0)   test=new TestClassPerformance(); else {    int testIterations=Integer.parseInt(args[0]);    test=new TestClassPerformance(testIterations);  }  System.out.println("\n***** Performance Tests:");  System.out.println("All performance code loops " + test.testIterations + " times");  Monitor totalTime=MonitorFactory.start();  Monitor timingMon=MonitorFactory.start();  test.timingNoMonitor();  log(timingMon.stop());  timingMon.start();  test.basicTimingMonitor();  log(timingMon.stop());  timingMon.start();  test.nullMonitor();  log(timingMon.stop());  timingMon.start();  test.nullMonitor2();  log(timingMon.stop());  timingMon.start();  test.factoryBasicMonitor();  log(timingMon.stop());  timingMon.start();  test.factoryMonitor();  log(timingMon.stop());  System.out.println("\nExecuting full factory monitors a second time.  The second time reflects performance characteristics more accurately");  timingMon.start();  test.factoryMonitor();  log(timingMon.stop());  timingMon.start();  test.addMonitor();  log(timingMon.stop());  Monitor delme=MonitorFactory.start("/jamon/jamonadmin.jsp");  JAMonBufferListener jbl=new JAMonBufferListener();  delme.addListener("max",jbl);  MonitorFactory.getMonitor("/jamon/jamonadmin.jsp","ms.").add(100);  jbl=(JAMonBufferListener)MonitorFactory.getMonitor("/jamon/jamonadmin.jsp","ms.").getListenerType("max").getListener();  Object[][] data=jbl.getDetailData().getData();  for (int i=0; i < data.length; i++)   for (int j=0; j < data[i].length; j++)   System.out.println(data[i][j]);  System.out.println("\n***** Total time for performance tests were: " + totalTime.stop());}  }
class C{  public static ValueTimestamp fromDateValueAndNanos(long dateValue,long timeNanos){  return (ValueTimestamp)Value.cache(new ValueTimestamp(dateValue,timeNanos));}  }
class C{  public static void main(String[] args){  int NGenes=4;  int NConds=3;  String[] GeneNames={"GeneA","GeneB","GeneC","GeneD"};  byte[][] dVals=new byte[NGenes][NConds];  for (int g=0; g < NGenes; g++)   for (int c=0; c < NConds; c++)   dVals[g][c]=(byte)(5 * Math.random());  String[] attNames={"Low","Unaltered","High"};  try {    Instances instances=new Instances(dVals,NGenes,NConds,GeneNames,attNames);  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  public static void execute(String zipFileName,String directory,String db){  InputStream in=null;  try {    if (!FileUtils.exists(zipFileName)) {      throw new IOException("File not found: " + zipFileName);    }    String originalDbName=null;    int originalDbLen=0;    if (db != null) {      originalDbName=getOriginalDbName(zipFileName,db);      if (originalDbName == null) {        throw new IOException("No database named " + db + " found");      }      if (originalDbName.startsWith(SysProperties.FILE_SEPARATOR)) {        originalDbName=originalDbName.substring(1);      }      originalDbLen=originalDbName.length();    }    in=FileUtils.newInputStream(zipFileName);    ZipInputStream zipIn=new ZipInputStream(in);    while (true) {      ZipEntry entry=zipIn.getNextEntry();      if (entry == null) {        break;      }      String fileName=entry.getName();      fileName=fileName.replace('\\',SysProperties.FILE_SEPARATOR.charAt(0));      fileName=fileName.replace('/',SysProperties.FILE_SEPARATOR.charAt(0));      if (fileName.startsWith(SysProperties.FILE_SEPARATOR)) {        fileName=fileName.substring(1);      }      boolean copy=false;      if (db == null) {        copy=true;      } else       if (fileName.startsWith(originalDbName + ".")) {        fileName=db + fileName.substring(originalDbLen);        copy=true;      }      if (copy) {        OutputStream o=null;        try {          o=FileUtils.newOutputStream(directory + SysProperties.FILE_SEPARATOR + fileName,false);          IOUtils.copy(zipIn,o);          o.close();        }  finally {          IOUtils.closeSilently(o);        }      }      zipIn.closeEntry();    }    zipIn.closeEntry();    zipIn.close();  } catch (  IOException e) {    throw DbException.convertIOException(e,zipFileName);  } finally {    IOUtils.closeSilently(in);  }}  }
class C{  public int[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public String toString(){  if (soid == null) {    StringBuilder sb=new StringBuilder(4 * oid.length);    for (int i=0; i < oid.length - 1; ++i) {      sb.append(oid[i]);      sb.append('.');    }    sb.append(oid[oid.length - 1]);    soid=sb.toString();  }  return soid;}  }
class C{  static void releaseMBeanServer(){  try {    Iterator iter=mbeanServer.queryNames(null,null).iterator();    while (iter.hasNext()) {      ObjectName name=(ObjectName)iter.next();      if (name.getDomain().startsWith(DEFAULT_DOMAIN)) {        unregisterMBean(name);      }    }    MBeanServerFactory.releaseMBeanServer(mbeanServer);    mbeanServer=null;  } catch (  JMRuntimeException e) {    logStackTrace(Level.WARN,e);  }synchronized (MBeanUtil.managedResources) {    MBeanUtil.managedResources.clear();  }synchronized (refreshClients) {    refreshClients.clear();  }synchronized (MBeanUtil.managedResources) {    MBeanUtil.managedResources.clear();  }synchronized (refreshClients) {    refreshClients.clear();  }}  }
class C{  private int findMaximum(Peak[] series,int startIndex,int endIndex){  int maxIndex=startIndex;  double maxValue=Double.NEGATIVE_INFINITY;  for (int i=startIndex; i < endIndex; i++) {    if (series[i].getMagnitude() > maxValue) {      maxValue=series[i].getMagnitude();      maxIndex=i;    }  }  return maxIndex;}  }
class C{  public void notifyTurnoutCreationError(String conflict,int bitNum){  javax.swing.JOptionPane.showMessageDialog(null,"ERROR - The output bit, " + bitNum + ", is currently assigned to "+ conflict+ ". Turnout can not be "+ "created as you specified."," Assignment Conflict",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);}  }
class C{  private NFA<LLkItem,LLkState> createAutomaton() throws LLkGeneratorException {  final LookaheadGenerator laGen=new LookaheadGenerator(grammarInfo);  final Production startProduction=grammar.getStartProduction();  final LR0Item startItem=new LR0Item(startProduction,0);  final LR0State startState=new LR0State(startItem);  final ITerminalSeqSet startLookahead=laGen.calcLookahead(startItem,k);  final LLkItem llkStartItem=new LLkItem(startProduction,0,startLookahead);  final LLkState llkStartState=new LLkState(llkStartItem);  final NFA<LLkItem,LLkState> automaton=new NFA<LLkItem,LLkState>(llkStartState);  final Queue<LR0State> todo=new LinkedList<LR0State>();  todo.add(startState);  final Map<LR0Item,LLkItem> createdItems=new HashMap<LR0Item,LLkItem>();  createdItems.put(startItem,llkStartItem);  final Map<LR0State,LLkState> createdStates=new HashMap<LR0State,LLkState>();  createdStates.put(startState,llkStartState);  while (!todo.isEmpty()) {    final LR0State currentState=todo.poll();    final LR0Item currentItem=currentState.getFirstItem();    if (currentItem.isShiftable()) {      final Symbol nextSymbol=currentItem.getNextSymbol();      if (nextSymbol == SpecialTerminals.EndOfInputStream) {      } else {        if (nextSymbol instanceof NonTerminal) {          final NonTerminal nonTerminal=(NonTerminal)nextSymbol;          final LR0State preExpandState=new LR0State(currentItem);          final LLkState fromState=createState(preExpandState,createdStates,createdItems,laGen,k,todo);          for (          Production nextProduction : grammarInfo.getProductionsFrom(nonTerminal)) {            final LR0Item newTopItem=new LR0Item(nextProduction,0);            final LR0State postExpandedState=new LR0State(newTopItem,currentItem);            final LLkState toState=createState(postExpandedState,createdStates,createdItems,laGen,k,todo,false);            automaton.addEdge(fromState,SpecialTerminals.Epsilon,toState);            if (newTopItem.isComplete()) {              todo.add(postExpandedState);            } else {              final LR0Item topItemShifted=newTopItem.complete();              final LR0State interestingState=new LR0State(topItemShifted,currentItem);              createState(interestingState,createdStates,createdItems,laGen,k,todo);              final LR0State newTopState=new LR0State(newTopItem);              createState(newTopState,createdStates,createdItems,laGen,k,todo);            }          }        } else {          final LR0State preShiftState=new LR0State(currentItem);          final LR0Item newShiftedItem=currentItem.shift();          final LR0State postShiftState=new LR0State(newShiftedItem);          final LLkState fromState=createState(preShiftState,createdStates,createdItems,laGen,k,todo);          final LLkState toState=createState(postShiftState,createdStates,createdItems,laGen,k,todo,!newShiftedItem.isComplete());          automaton.addEdge(fromState,nextSymbol,toState);        }      }    } else {      final LLkState fromState=createState(currentState,createdStates,createdItems,laGen,k,todo);      final int itemsCount=currentState.getItemsCount();      final It<LR0Item> it=currentState.getItems();      final LR0Item reducedItem;      final boolean completed;      if (itemsCount == 2) {        it.next();        reducedItem=it.next().shift();        completed=false;      } else       if (itemsCount == 1) {        reducedItem=it.next();        completed=true;      } else {        throw new RuntimeException("LLkState to REDUCE consists not of 2 items!!!");      }      final LR0State newReducedState=new LR0State(reducedItem);      if (reducedItem.getNextSymbol() == SpecialTerminals.EndOfInputStream) {        final LLkState endState=createState(newReducedState,createdStates,createdItems,laGen,k,todo,false);        automaton.addAcceptingEdge(fromState,SpecialTerminals.Epsilon,endState);      } else {        final LLkState toState=createState(newReducedState,createdStates,createdItems,laGen,k,todo,!completed);        automaton.addEdge(fromState,SpecialTerminals.Epsilon,toState);      }    }  }  return automaton;}  }
class C{  public MimbuildEditor(MimBuildRunner runner){  this(runner,"Result MAG");}  }
class C{  public static void mkdirp(Path directory){  boolean result=directory.toFile().mkdirs();  if (!result) {    throw new IllegalStateException("Failed to create directory at: " + directory);  }}  }
class C{  public FastBooleanBuffer(){  this.minChunkLen=1024;}  }
class C{  public void close(){  if (data != null) {    data.clear();    data=null;  }  if (headers != null) {    headers.clear();    headers=null;  }  if (timeToDataIndex != null) {    timeToDataIndex.clear();    timeToDataIndex=null;  }}  }
class C{  @Override public Collection<CRL> engineGetCRLs(CRLSelector selector) throws CertStoreException {  if (coll == null)   throw new CertStoreException("Collection is null");  for (int c=0; c < 10; c++) {    try {      HashSet<CRL> result=new HashSet<>();      if (selector != null) {        for (        Object o : coll) {          if ((o instanceof CRL) && selector.match((CRL)o))           result.add((CRL)o);        }      } else {        for (        Object o : coll) {          if (o instanceof CRL)           result.add((CRL)o);        }      }      return result;    } catch (    ConcurrentModificationException e) {    }  }  throw new ConcurrentModificationException("Too many " + "ConcurrentModificationExceptions");}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private boolean isChar(char ch){  return isChar(_pos,ch);}  }
class C{  @Override public void connect() throws IOException {  LOG.trace("enter HttpURLConnection.connect()");  throw new RuntimeException("This class can only be used with already" + "retrieved data");}  }
class C{  private void handleUnknownRecord(InputStream s,OutputStream o) throws IOException {  if (((buf[0] & 0x080) != 0) && buf[2] == 1) {    if (helloVersion != ProtocolVersion.SSL20Hello) {      throw new SSLHandshakeException("SSLv2Hello is disabled");    }    ProtocolVersion recordVersion=ProtocolVersion.valueOf(buf[3],buf[4]);    if (recordVersion == ProtocolVersion.SSL20Hello) {      try {        writeBuffer(o,v2NoCipher,0,v2NoCipher.length);      } catch (      Exception e) {      }      throw new SSLException("Unsupported SSL v2.0 ClientHello");    }    int len=((buf[0] & 0x7f) << 8) + (buf[1] & 0xff) - 3;    if (v2Buf == null) {      v2Buf=new byte[len];    }    if (exlen < len + headerSize) {      int really=readFully(s,v2Buf,exlen - headerSize,len + headerSize - exlen);      if (really < 0) {        throw new EOFException("SSL peer shut down incorrectly");      }    }    exlen=0;    hashInternal(buf,2,3);    hashInternal(v2Buf,0,len);    V2toV3ClientHello(v2Buf);    v2Buf=null;    lastHashed=count;    if (debug != null && Debug.isOn("record")) {      System.out.println(Thread.currentThread().getName() + ", READ:  SSL v2, contentType = " + contentName(contentType())+ ", translated length = "+ available());    }    return;  } else {    if (((buf[0] & 0x080) != 0) && buf[2] == 4) {      throw new SSLException("SSL V2.0 servers are not supported.");    }    for (int i=0; i < v2NoCipher.length; i++) {      if (buf[i] != v2NoCipher[i]) {        throw new SSLException("Unrecognized SSL message, plaintext connection?");      }    }    throw new SSLException("SSL V2.0 servers are not supported.");  }}  }
class C{  public Counter counter(String name){  return metrics.getCounter(name);}  }
class C{  private static Set<String> findAllImageUrls(String html){  Set<String> ret=new LinkedHashSet<>();  if (html == null || html.length() < 10)   return ret;  int i=html.indexOf("<img");  if (i == -1)   return ret;  Matcher m=Utils.findImageUrlsPattern.matcher(html.substring(i,html.length()));  while (m.find()) {    String url=m.group(1);    if (url.startsWith("http") || url.startsWith("ftp://"))     ret.add(url);  }  return ret;}  }
class C{  public boolean isLessThan(Coin other){  return compareTo(other) < 0;}  }
class C{  public MethodReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,insideDocComment,participant,resource);}  }
class C{  @Override public void createDirs() throws Exception {  boolean ok=journalDir.mkdirs();  if (!ok) {    throw new IOException("Failed to create directory " + journalDir);  }}  }
class C{  double zeta(long st,long n,double theta,double initialsum){  countforzeta=n;  return zetastatic(st,n,theta,initialsum);}  }
class C{  private static int calculateDelayForCall(){  return calculateDelayForSuccess();}  }
class C{  @Override public HijrahDate dateYearDay(int prolepticYear,int dayOfYear){  HijrahDate date=HijrahDate.of(this,prolepticYear,1,1);  if (dayOfYear > date.lengthOfYear()) {    throw new DateTimeException("Invalid dayOfYear: " + dayOfYear);  }  return date.plusDays(dayOfYear - 1);}  }
class C{  public void addLoggingListener(final LoggingListener loggingListener){  this.loggingListeners.add(loggingListener);}  }
class C{  public static PermissionDeniedDialog newInstance(boolean finishActivity){  Bundle arguments=new Bundle();  arguments.putBoolean(ARGUMENT_FINISH_ACTIVITY,finishActivity);  PermissionDeniedDialog dialog=new PermissionDeniedDialog();  dialog.setArguments(arguments);  return dialog;}  }
class C{  @Override protected EClass eStaticClass(){  return ValidationPackage.Literals.VALIDATION_MARKER;}  }
class C{  private static Pair<Boolean,ILogicalOperator> isQualifiedForSpecialFlattening(SubplanOperator subplanOp) throws AlgebricksException {  if (!OperatorManipulationUtil.ancestorOfOperators(subplanOp.getNestedPlans().get(0).getRoots().get(0).getValue(),ImmutableSet.of(LogicalOperatorTag.INNERJOIN,LogicalOperatorTag.LEFTOUTERJOIN))) {    return new Pair<Boolean,ILogicalOperator>(false,null);  }  SubplanSpecialFlatteningCheckVisitor visitor=new SubplanSpecialFlatteningCheckVisitor();  for (  ILogicalPlan plan : subplanOp.getNestedPlans()) {    for (    Mutable<ILogicalOperator> opRef : plan.getRoots()) {      if (!opRef.getValue().accept(visitor,null)) {        return new Pair<Boolean,ILogicalOperator>(false,null);      }    }  }  return new Pair<Boolean,ILogicalOperator>(true,visitor.getQualifiedNts());}  }
class C{  public Phaser(int parties){  this(null,parties);}  }
class C{  public double distance(double[] point1,double[] point2) throws Exception {  return Math.sqrt(distance2(point1,point2));}  }
class C{  public DefaultReadFuture(IoSession session){  super(session);}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  if (adapter == null)   return;  int currentItem=getCurrentItem();  int nextItem=(direction == LEFT) ? --currentItem : ++currentItem;  setCurrentItem(nextItem,true);  sendScrollMessage(interval + scroller.getDuration());}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + right.costInline(thresh,env,ctx);}  }
class C{  public XNetMessage(XNetMessage message){  super(message);  setBinary(true);  setRetries(_nRetries);  setTimeout(XNetMessageTimeout);}  }
class C{  public boolean isMinYSet(){  return isMinYSet(0);}  }
class C{  public MMShuffle(int first,int second){  super(6,1);  this.one=first;  this.two=second;  this.shuffle=0;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.LOOK_AHEAD__PATTERN:    return basicSetPattern(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String identityToString(Object obj){  if (obj == null) {    return EMPTY_STRING;  }  return obj.getClass().getName() + "@" + getIdentityHexString(obj);}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case ExpressionsPackage.ASSIGNMENT_OPERATOR:    return createAssignmentOperatorFromString(eDataType,initialValue);case ExpressionsPackage.SHIFT_OPERATOR:  return createShiftOperatorFromString(eDataType,initialValue);case ExpressionsPackage.ADDITIVE_OPERATOR:return createAdditiveOperatorFromString(eDataType,initialValue);case ExpressionsPackage.MULTIPLICATIVE_OPERATOR:return createMultiplicativeOperatorFromString(eDataType,initialValue);case ExpressionsPackage.UNARY_OPERATOR:return createUnaryOperatorFromString(eDataType,initialValue);case ExpressionsPackage.RELATIONAL_OPERATOR:return createRelationalOperatorFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private NotificationWear extractWearNotification(StatusBarNotification statusBarNotification){  NotificationWear notificationWear=new NotificationWear();  notificationWear.packageName=statusBarNotification.getPackageName();  NotificationCompat.WearableExtender wearableExtender=new NotificationCompat.WearableExtender(statusBarNotification.getNotification());  List<NotificationCompat.Action> actions=wearableExtender.getActions();  for (  NotificationCompat.Action act : actions) {    if (act != null && act.getRemoteInputs() != null) {      notificationWear.remoteInputs.addAll(Arrays.asList(act.getRemoteInputs()));    }  }  List<Notification> pages=wearableExtender.getPages();  notificationWear.pages.addAll(pages);  notificationWear.bundle=statusBarNotification.getNotification().extras;  notificationWear.tag=statusBarNotification.getTag();  notificationWear.pendingIntent=statusBarNotification.getNotification().contentIntent;  return notificationWear;}  }
class C{  private static char shortFormCharFor(Type type){  char descriptorChar=type.getDescriptor().charAt(0);  if (descriptorChar == '[') {    return 'L';  }  return descriptorChar;}  }
class C{  @GwtIncompatible public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  return toArray(iterable,ObjectArrays.newArray(type,0));}  }
class C{  public java.sql.CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  if (versionMeetsMinimum(5,0,0)) {    CallableStatement cStmt=null;    if (!getCacheCallableStatements()) {      cStmt=parseCallableStatement(sql);    } else {synchronized (this.parsedCallableStatementCache) {        CompoundCacheKey key=new CompoundCacheKey(getCatalog(),sql);        CallableStatement.CallableStatementParamInfo cachedParamInfo=(CallableStatement.CallableStatementParamInfo)this.parsedCallableStatementCache.get(key);        if (cachedParamInfo != null) {          cStmt=CallableStatement.getInstance(getMultiHostSafeProxy(),cachedParamInfo);        } else {          cStmt=parseCallableStatement(sql);synchronized (cStmt) {            cachedParamInfo=cStmt.paramInfo;          }          this.parsedCallableStatementCache.put(key,cachedParamInfo);        }      }    }    cStmt.setResultSetType(resultSetType);    cStmt.setResultSetConcurrency(resultSetConcurrency);    return cStmt;  }  throw SQLError.createSQLException("Callable statements not supported.",SQLError.SQL_STATE_DRIVER_NOT_CAPABLE,getExceptionInterceptor());}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case N4mfPackage.PROJECT_TYPE:    return convertProjectTypeToString(eDataType,instanceValue);case N4mfPackage.SOURCE_FRAGMENT_TYPE:  return convertSourceFragmentTypeToString(eDataType,instanceValue);case N4mfPackage.MODULE_FILTER_TYPE:return convertModuleFilterTypeToString(eDataType,instanceValue);case N4mfPackage.PROJECT_DEPENDENCY_SCOPE:return convertProjectDependencyScopeToString(eDataType,instanceValue);case N4mfPackage.MODULE_LOADER:return convertModuleLoaderToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public void endFunctionExecutionWithException(boolean haveResult){  this._stats.incInt(_functionExecutionsRunningId,-1);  this._stats.incInt(_functionExecutionExceptions,1);  if (haveResult) {    this._stats.incInt(_functionExecutionsHasResultRunningId,-1);  }  aggregateStats.endFunctionExecutionWithException(haveResult);}  }
class C{  @Override public Set<String> recommend(final String s){  final Set<String> recommendations=new HashSet<String>();  if (s.isEmpty()) {    return recommendations;  }  for (  final Locations service : this.services.values()) {    recommendations.addAll(service.recommend(s));  }  return recommendations;}  }
class C{  public void clearMessageDeliveryExpiration(Set<String> msgIds) throws RcsServiceNotAvailableException, RcsPersistentStorageException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.clearMessageDeliveryExpiration(new ArrayList<>(msgIds));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public int size(){  return 2 * this.data.length;}  }
class C{  public static List<byte[]> loadDataChunks(final AbstractSQLProvider provider,final CModule module) throws SQLException {  final List<byte[]> dataList=new ArrayList<>();  final String query="SELECT data FROM " + CTableNames.DATA_PARTS_TABLE + " WHERE module_id = "+ module.getConfiguration().getId()+ " ORDER BY part_id ASC";  try (ResultSet resultSet=provider.executeQuery(query)){    while (resultSet.next()) {      dataList.add(resultSet.getBytes("data"));    }  }   return dataList;}  }
class C{  public static double dot(double v[],double u[]){  double sum=0.0;  for (int i=0; i < v.length; i++) {    sum+=(v[i] * u[i]);  }  return sum;}  }
class C{  public void endContainsKey(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(containsKeyInProgressId,-1);  int endContainsKeyId;  if (timedOut) {    endContainsKeyId=containsKeyTimedOutId;  } else   if (failed) {    endContainsKeyId=containsKeyFailedId;  } else {    endContainsKeyId=containsKeyId;  }  this.stats.incInt(endContainsKeyId,1);  this.stats.incLong(containsKeyDurationId,duration);}  }
class C{  @Override public int addRef(Object ref){  if (_refs == null)   _refs=new ArrayList();  _refs.add(ref);  return _refs.size() - 1;}  }
class C{  private static Document loadDocument(Resource xmlFile) throws SAXException, IOException {  DOMParser parser=new DOMParser();  InputStream is=null;  try {    is=IOUtil.toBufferedInputStream(xmlFile.getInputStream());    InputSource source=new InputSource(is);    parser.parse(source);  }  finally {    IOUtil.closeEL(is);  }  return parser.getDocument();}  }
class C{  public RVMField peekResolvedField(){  if (resolvedMember != null)   return resolvedMember;  RVMClass declaringClass=(RVMClass)type.peekType();  if (declaringClass == null)   return null;  return resolveInternal(declaringClass);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.Instructors);  InstructorSearchForm instructorSearchForm=(InstructorSearchForm)form;  Set<Department> departments=setupManagerDepartments(request);  String deptId=(String)sessionContext.getAttribute(SessionAttribute.DepartmentId);  if ((deptId == null || deptId.isEmpty()) && departments.size() == 1)   deptId=departments.iterator().next().getUniqueId().toString();  if (deptId == null || deptId.isEmpty() || !sessionContext.hasPermission(deptId,"Department",Right.Instructors)) {    return mapping.findForward("showInstructorSearch");  } else {    instructorSearchForm.setDeptUniqueId(deptId);    List instructors=DepartmentalInstructor.findInstructorsForDepartment(Long.valueOf(deptId));    if (instructors == null || instructors.isEmpty()) {      ActionMessages errors=new ActionMessages();      errors.add("searchResult",new ActionMessage("errors.generic",MSG.errorNoInstructorsFoundForDepartment()));      saveErrors(request,errors);    }    return mapping.findForward("instructorList");  }}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileDoc doc=null;  sess=request.getSession();  MobileSessionCtx wsc=MobileSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  String line=request.getParameter("record");  int lineNo=-1;  if (!Util.isEmpty(line))   lineNo=Integer.parseInt(line);  if (lineNo != -1) {    ws.curTab.navigate(lineNo);    ws.curTab.setSingleRow(true);    doc=getSR_Form(request.getRequestURI(),wsc,ws);    log.fine("Fini");    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  }  String action=MobileUtil.getParameter(request,"action");  String strSQL=MobileUtil.getParameter(request,"txtSQL");  if ("edit".equals(action)) {    ws.setRO(false);    doc=getSR_Form(request.getRequestURI(),wsc,ws);    log.fine("Fini");    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  } else   if ("insert".equals(action)) {    if (!ws.curTab.dataNew(false))     ws.curTab.dataIgnore();    ws.setRO(false);    doc=getSR_Form(request.getRequestURI(),wsc,ws);    log.fine("Fini");    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  } else   if ("list".equals(action)) {    ws.setRO(true);    ws.curTab.setSingleRow(false);    ws.curTab.query(false);    ws.curTab.navigate(0);    doc=getMR_Form(request.getRequestURI(),wsc,ws,ws.curTab.getTabLevel() == 0);    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  } else   if (!Util.isEmpty(strSQL)) {    MQuery query=new MQuery();    if ("FIND".equals(strSQL)) {      String value=MobileUtil.getParameter(request,"txtValue");      String docno=MobileUtil.getParameter(request,"txtDocumentNo");      String name=MobileUtil.getParameter(request,"txtName");      String desc=MobileUtil.getParameter(request,"txtDescription");      if (value != null && value.length() != 0)       query.addRestriction("UPPER(Value)",MQuery.LIKE,"%" + value.toUpperCase() + "%");      if (docno != null && docno.length() != 0)       query.addRestriction("UPPER(DocumentNo)",MQuery.LIKE,"%" + docno.toUpperCase() + "%");      if (name != null && name.length() != 0)       query.addRestriction("UPPER(Name)",MQuery.LIKE,"%" + name.toUpperCase() + "%");      if (desc != null && desc.length() != 0)       query.addRestriction("(UPPER(Description",MQuery.LIKE,"%" + desc.toUpperCase() + "%");    } else {      query.addRestriction(strSQL);    }    ws.setRO(true);    ws.curTab.setSingleRow(false);    ws.curTab.setQuery(query);    ws.curTab.query(false);    ws.curTab.navigate(0);    doc=getMR_Form(request.getRequestURI(),wsc,ws,ws.curTab.getTabLevel() == 0);    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  } else   if ("previous".equals(action)) {    int curTabLevel=ws.curTab.getTabLevel();    ws.setRO(true);    ws.curTab.setSingleRow(true);    while (curTabLevel <= ws.curTab.getTabLevel()) {      ws.curTab=ws.mWindow.getTab(ws.curTab.getTabNo() - 1);    }    ws.curTab.dataRefresh();    doc=getSR_Form(request.getRequestURI(),wsc,ws);    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  }  String tab=request.getParameter("tab");  int tabNo=-1;  if (!Util.isEmpty(tab))   tabNo=Integer.parseInt(tab);  if (tabNo != -1) {    ws.mWindow.initTab(tabNo);    ws.curTab=ws.mWindow.getTab(tabNo);    ws.curTab.query(false);    ws.curTab.navigate(0);    ws.curTab.setSingleRow(false);    ws.setRO(true);    doc=getMR_Form(request.getRequestURI(),wsc,ws,false);    MobileUtil.createResponse(request,response,this,null,doc,false);    return;  }  int AD_Window_ID=MobileUtil.getParameterAsInt(request,"AD_Window_ID");  int AD_Menu_ID=MobileUtil.getParameterAsInt(request,"AD_Menu_ID");  log.info("AD_Window_ID=" + AD_Window_ID + "; AD_Menu_ID="+ AD_Menu_ID);  String TableName=null;  int AD_Record_ID=MobileUtil.getParameterAsInt(request,"AD_Record_ID");  int AD_Table_ID=MobileUtil.getParameterAsInt(request,"AD_Table_ID");  if (AD_Record_ID != 0 || AD_Table_ID != 0) {    AD_Window_ID=0;    int PO_Window_ID=0;    String sql="SELECT TableName, AD_Window_ID, PO_Window_ID FROM AD_Table WHERE AD_Table_ID=?";    try {      PreparedStatement pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,AD_Table_ID);      ResultSet rs=pstmt.executeQuery();      if (rs.next()) {        TableName=rs.getString(1);        AD_Window_ID=rs.getInt(2);        PO_Window_ID=rs.getInt(3);      }      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    }    if (TableName == null || AD_Window_ID == 0) {      doc=MobileDoc.createPopup("No Context");    }    boolean isSOTrx=true;    if (PO_Window_ID != 0) {      String whereClause=TableName + "_ID=" + AD_Record_ID;      isSOTrx=DB.isSOTrx(TableName,whereClause);      if (!isSOTrx)       AD_Window_ID=PO_Window_ID;    }  }  if (ws != null) {    int WindowNo=ws.mWindow.getWindowNo();    log.fine("Disposing - WindowNo=" + WindowNo + ", ID="+ ws.mWindow.getAD_Window_ID());    ws.mWindow.dispose();    Env.clearWinContext(wsc.ctx,WindowNo);  }  GridWindowVO mWindowVO=GridWindowVO.create(wsc.ctx,s_WindowNo++,AD_Window_ID,AD_Menu_ID);  if (mWindowVO == null) {    String msg=Msg.translate(wsc.ctx,"AD_Window_ID") + " " + Msg.getMsg(wsc.ctx,"NotFound")+ ", ID="+ AD_Window_ID+ "/"+ AD_Menu_ID;    MobileUtil.createErrorPage(request,response,this,msg);    sess.setAttribute(WWindowStatus.NAME,null);    return;  }  ws=new WWindowStatus(mWindowVO);  sess.setAttribute(WWindowStatus.NAME,ws);  if (AD_Record_ID != 0 || AD_Table_ID != 0) {    ws.mWindow.initTab(ws.curTab.getTabNo());    ws.curTab.setQuery(MQuery.getEqualQuery(TableName + "_ID",AD_Record_ID));    ws.curTab.query(false);  } else {    ws.mWindow.initTab(ws.curTab.getTabNo());    ws.curTab.query(ws.mWindow.isTransaction());    ws.curTab.navigate(0);    ws.curTab.setSingleRow(false);  }  if (ws.curTab.isSingleRow())   doc=getSR_Form(request.getRequestURI(),wsc,ws); else   doc=getMR_Form(request.getRequestURI(),wsc,ws,true);  ws.setRO(true);  MobileUtil.createResponse(request,response,this,null,doc,false);  log.fine("Closed");}  }
class C{  public <E>void reuseClassAnalysis(Class<E> analysisClass,Map<ClassDescriptor,Object> map){  Map<ClassDescriptor,Object> myMap=classAnalysisMap.get(analysisClass);  if (myMap != null) {    myMap.putAll(map);  } else {    myMap=createMap(classAnalysisEngineMap,analysisClass);    myMap.putAll(map);    classAnalysisMap.put(analysisClass,myMap);  }}  }
class C{  @Override public String toString(){  return "CUlinkState[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void v(Object str){  if (debug) {    if (logLevel <= Log.VERBOSE) {      String name=getFunctionName();      if (name != null) {        Log.v(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.v(tag,str.toString());      }    }  }}  }
class C{  public InternalScope createInternalScope(){  InternalScopeImpl internalScope=new InternalScopeImpl();  return internalScope;}  }
class C{  public synchronized void write(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (off < 0 || len < 0 || off > b.length - len) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (current == null) {    throw new ZipException("no current ZIP entry");  }  ZipEntry entry=current.entry;switch (entry.method) {case DEFLATED:    super.write(b,off,len);  break;case STORED:written+=len;if (written - locoff > entry.size) {throw new ZipException("attempt to write past end of STORED entry");}out.write(b,off,len);break;default :throw new ZipException("invalid compression method");}crc.update(b,off,len);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(((Agent)stack.pop()).isReRunsOnly());}  }
class C{  public static void execute(Object message,ActorRef receiver){  verifyInitialized();  requestProcessor.tell(message,receiver);}  }
class C{  private void createNonUnique(Table t) throws SQLException {  boolean comma=false;  int indexNumber=1;  Iterator<Key> j=t.getKeys().iterator();  while (j.hasNext()) {    Key key=j.next();    if (key.getType() == Key.NonUnique) {      String SQL="CREATE INDEX " + t.getName() + "_"+ indexNumber;      SQL+=" ON " + t.getSchema() + "."+ t.getName()+ "(";      Iterator<Column> i=key.getColumns().iterator();      comma=false;      while (i.hasNext()) {        Column c=i.next();        SQL+=(comma ? ", " : "") + c.getName();        comma=true;      }      indexNumber++;      SQL+=")";      execute(SQL);    }  }}  }
class C{  public static Media createMediaRecorder(String path,String mimeType) throws IOException {  boolean supportedMime=false;  String[] supported=getAvailableRecordingMimeTypes();  int slen=supported.length;  for (int i=0; i < slen; i++) {    String mime=supported[i];    if (mime.equals(mimeType)) {      supportedMime=true;      break;    }  }  if (!supportedMime) {    throw new IllegalArgumentException("Mime type " + mimeType + " is not supported on this platform use "+ "getAvailableRecordingMimeTypes()");  }  return Display.getInstance().createMediaRecorder(path,mimeType);}  }
class C{  public OutputBitStream(final OutputStream os,final int bufSize,final boolean testForPosition){  this.os=os;  wrapping=false;  if (bufSize != 0) {    this.buffer=new byte[bufSize];    avail=bufSize;  }  free=8;  if (os instanceof RepositionableStream) {    repositionableStream=(RepositionableStream)os;    fileChannel=null;  } else   if (testForPosition) {    FileChannel fc=null;    try {      fc=(FileChannel)(os.getClass().getMethod("getChannel",new Class[]{})).invoke(os,new Object[]{});    } catch (    IllegalAccessException e) {    }catch (    IllegalArgumentException e) {    }catch (    NoSuchMethodException e) {    }catch (    InvocationTargetException e) {    }catch (    ClassCastException e) {    }    fileChannel=fc;    repositionableStream=null;  } else {    repositionableStream=null;    fileChannel=null;  }}  }
class C{  private TypeElement checkAndGetClass(Element e) throws ProcessingException {  if (e.getKind() != ElementKind.CLASS) {    throw new ProcessingException(e,"%s is annotated with @%s but only classes can be annotated with this annotation",e.toString(),ObjectMappable.class.getSimpleName());  }  return (TypeElement)e;}  }
class C{  public void removeIncidenceSet(HGPersistentHandle handle){  if (handle == null)   throw new NullPointerException("HGStore.removeIncidenceSet called with a null handle.");  impl.removeIncidenceSet(handle);}  }
class C{  public boolean verify(PublicKey verificationKey,Signature verificationEngine) throws InvalidKeyException, SignatureException {  verificationEngine.initVerify(verificationKey);  verificationEngine.update(content);  return verificationEngine.verify(signature);}  }
class C{  File sourceFile(Location loc){  try {    String filename=loc.sourceName();    String refName=loc.declaringType().name();    int iDot=refName.lastIndexOf('.');    String pkgName=(iDot >= 0) ? refName.substring(0,iDot + 1) : "";    String full=pkgName.replace('.',File.separatorChar) + filename;    for (int i=0; i < dirs.length; ++i) {      File path=new File(dirs[i],full);      if (path.exists()) {        return path;      }    }    return null;  } catch (  AbsentInformationException e) {    return null;  }}  }
class C{  public static double atanh(double value){  boolean negateResult=false;  if (value < 0.0) {    value=-value;    negateResult=true;  }  double result;  if (!(value < 1.0)) {    if (ANTI_JIT_OPTIM_CRASH_ON_NAN) {      result=value > 1.0 ? Double.NaN : Double.POSITIVE_INFINITY + value;    } else {      result=value == 1.0 ? Double.POSITIVE_INFINITY : Double.NaN;    }  } else {    result=0.5 * log1p((value + value) / (1.0 - value));  }  return negateResult ? -result : result;}  }
class C{  public static void createRingtoneDirIfNotExists(){  createDirIfNotExists(SYSTEM_THEME_RINGTONE_PATH);}  }
class C{  private void addColumn(String column,String type,boolean notNull,boolean checkColumns) throws Exception {  if (!columns.containsKey(column)) {    columns.put(column,column + " " + type+ (notNull ? _NOT_NULL_ + COMMA : COMMA));  } else   if (checkColumns) {    throw new Exception("Repeated columns!: " + column);  }}  }
class C{  @Override public void METHOD_MAXS(String className,String methName,String methDesc,int maxStack,int maxLocals){  if (conf.CLINIT.equals(methName))   return;  Member member=null;  if (conf.INIT.equals(methName))   member=resolveConstructorOverloading(className,methDesc); else   member=resolveMethodOverloading(className,methName,methDesc);  if (member == null)   return;  if (memberInfos.containsKey(member))   return;  memberInfos.put(member,new MemberInfo(maxStack,maxLocals));}  }
class C{  public UISelectItemsTestCase(String name){  super(name);}  }
class C{  private static BitMatrix convertByteMatrixToBitMatrix(ByteMatrix matrix){  int matrixWidgth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  BitMatrix output=new BitMatrix(matrixWidgth,matrixHeight);  output.clear();  for (int i=0; i < matrixWidgth; i++) {    for (int j=0; j < matrixHeight; j++) {      if (matrix.get(i,j) == 1) {        output.set(i,j);      }    }  }  return output;}  }
class C{  private static boolean isSquareImage(final int sourceWidth,final int sourceHeight){  if (sourceHeight > sourceWidth) {    return (sourceWidth / sourceHeight) >= MAX_ALLOWED_SQUARE_FACTOR;  } else {    return (sourceHeight / sourceWidth) >= MAX_ALLOWED_SQUARE_FACTOR;  }}  }
class C{  public ZooKeeperEmbedded() throws Exception {  log.debug("Starting embedded ZooKeeper server...");  this.server=new TestingServer();  log.debug("Embedded ZooKeeper server at {} uses the temp directory at {}",server.getConnectString(),server.getTempDirectory());}  }
class C{  public BusTravellerMovement(BusTravellerMovement proto){  super(proto);  state=proto.state;  controlSystem=proto.controlSystem;  if (proto.location != null) {    location=proto.location.clone();  }  nextPath=proto.nextPath;  id=nextID++;  controlSystem.registerTraveller(this);  probabilities=proto.probabilities;  cbtd=new ContinueBusTripDecider(rng,probabilities);  pathFinder=proto.pathFinder;  this.probTakeOtherBus=proto.probTakeOtherBus;  takeBus=true;}  }
class C{  private static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManagerInterface manager){  long now=System.currentTimeMillis();  long ancient=now - DateUtils.DAY_IN_MILLIS;  String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {    Log.d(TAG,"Manifest.permission.READ_CALENDAR is not granted");    return;  }  Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC);  if (cursor == null) {    return;  }  if (DEBUG) {    Log.d(TAG,"missed alarms found: " + cursor.getCount());  }  try {    long alarmTime=-1;    while (cursor.moveToNext()) {      long newAlarmTime=cursor.getLong(0);      if (alarmTime != newAlarmTime) {        if (DEBUG) {          Log.w(TAG,"rescheduling missed alarm. alarmTime: " + newAlarmTime);        }        AlertUtils.scheduleAlarm(context,manager,newAlarmTime);        alarmTime=newAlarmTime;      }    }  }  finally {    cursor.close();  }}  }
class C{  public static byte[] readFullLength(InputStream is,int length) throws IOException {  byte[] arr=new byte[length];  if (is.read(arr) != arr.length) {    throw new IOException("Not enough bytes to read.");  }  return arr;}  }
class C{  @Override public void RemoveFromSuppressLLDPs(DatapathId sw,OFPort port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.remove(npt);  discover(npt);}  }
class C{  private final void noise2Stitch(final double[] noise,final double vec0,final double vec1,final StitchInfo stitchInfo){  int b0, b1;  final int i, j, b00, b10, b01, b11;  double t;  final double rx0, rx1, ry0, ry1, sx, sy;  t=vec0 + PerlinN;  b0=((int)t);  b1=b0 + 1;  if (b1 >= stitchInfo.wrapX) {    if (b0 >= stitchInfo.wrapX) {      b0-=stitchInfo.width;      b1-=stitchInfo.width;    } else {      b1-=stitchInfo.width;    }  }  i=latticeSelector[b0 & BM];  j=latticeSelector[b1 & BM];  rx0=t - (int)t;  rx1=rx0 - 1.0;  sx=s_curve(rx0);  t=vec1 + PerlinN;  b0=((int)t);  b1=b0 + 1;  if (b1 >= stitchInfo.wrapY) {    if (b0 >= stitchInfo.wrapY) {      b0-=stitchInfo.height;      b1-=stitchInfo.height;    } else {      b1-=stitchInfo.height;    }  }  b00=((i + b0) & BM) << 3;  b10=((j + b0) & BM) << 3;  b01=((i + b1) & BM) << 3;  b11=((j + b1) & BM) << 3;  ry0=t - (int)t;  ry1=ry0 - 1.0;  sy=s_curve(ry0);switch (channels.length) {case 4:    noise[3]=lerp(sy,lerp(sx,rx0 * gradient[b00 + 6] + ry0 * gradient[b00 + 7],rx1 * gradient[b10 + 6] + ry0 * gradient[b10 + 7]),lerp(sx,rx0 * gradient[b01 + 6] + ry1 * gradient[b01 + 7],rx1 * gradient[b11 + 6] + ry1 * gradient[b11 + 7]));case 3:  noise[2]=lerp(sy,lerp(sx,rx0 * gradient[b00 + 4] + ry0 * gradient[b00 + 5],rx1 * gradient[b10 + 4] + ry0 * gradient[b10 + 5]),lerp(sx,rx0 * gradient[b01 + 4] + ry1 * gradient[b01 + 5],rx1 * gradient[b11 + 4] + ry1 * gradient[b11 + 5]));case 2:noise[1]=lerp(sy,lerp(sx,rx0 * gradient[b00 + 2] + ry0 * gradient[b00 + 3],rx1 * gradient[b10 + 2] + ry0 * gradient[b10 + 3]),lerp(sx,rx0 * gradient[b01 + 2] + ry1 * gradient[b01 + 3],rx1 * gradient[b11 + 2] + ry1 * gradient[b11 + 3]));case 1:noise[0]=lerp(sy,lerp(sx,rx0 * gradient[b00 + 0] + ry0 * gradient[b00 + 1],rx1 * gradient[b10 + 0] + ry0 * gradient[b10 + 1]),lerp(sx,rx0 * gradient[b01 + 0] + ry1 * gradient[b01 + 1],rx1 * gradient[b11 + 0] + ry1 * gradient[b11 + 1]));}}  }
class C{  public static final AggregatorRegistry newDefaultAggregatorRegistry(){  AggregatorRegistry aggregatorRegistry=new AggregatorRegistry(DEFAULT_NAME_TO_INCREMENTAL_AGGREGATOR,DEFAULT_NAME_TO_OTF_AGGREGATOR,AggregatorIncrementalType.NAME_TO_ORDINAL);  aggregatorRegistry.setup();  return aggregatorRegistry;}  }
class C{  public void allowSpendingUnconfirmedTransactions(){  setCoinSelector(AllowUnconfirmedCoinSelector.get());}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  private UnManagedVolume createUnManagedSnapshot(VolumeSnapshot driverSnapshot,UnManagedVolume parentUnManagedVolume,com.emc.storageos.db.client.model.StorageSystem storageSystem,com.emc.storageos.db.client.model.StoragePool storagePool,List<UnManagedVolume> unManagedVolumesToCreate,List<UnManagedVolume> unManagedVolumesToUpdate,DbClient dbClient){  boolean newVolume=false;  String unManagedVolumeNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(storageSystem.getNativeGuid(),driverSnapshot.getNativeId());  UnManagedVolume unManagedVolume=DiscoveryUtils.checkUnManagedVolumeExistsInDB(dbClient,unManagedVolumeNatvieGuid);  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNatvieGuid);    unManagedVolume.setStorageSystemUri(storageSystem.getId());    if (driverSnapshot.getWwn() == null) {      unManagedVolume.setWwn(String.format("%s:%s",driverSnapshot.getStorageSystemId(),driverSnapshot.getNativeId()));    } else {      unManagedVolume.setWwn(driverSnapshot.getWwn());    }    newVolume=true;  } else {    unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),Boolean.FALSE.toString());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString(),new StringSet());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SNAPSHOT_CONSISTENCY_GROUP_NAME.toString(),new StringSet());    unManagedVolume.getUnmanagedExportMasks().clear();  }  unManagedVolume.setLabel(driverSnapshot.getDeviceLabel());  Boolean isVolumeExported=false;  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isVolumeExported.toString());  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),FALSE);  StringSet deviceLabel=new StringSet();  deviceLabel.add(driverSnapshot.getDeviceLabel());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  if (driverSnapshot.getAccessStatus() != null) {    StringSet accessState=new StringSet();    accessState.add(driverSnapshot.getAccessStatus().toString());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ACCESS.toString(),accessState);  }  StringSet systemTypes=new StringSet();  systemTypes.add(storageSystem.getSystemType());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(driverSnapshot.getNativeId());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),TRUE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_SNAP_SHOT.toString(),TRUE);  StringSet parentVol=new StringSet();  parentVol.add(parentUnManagedVolume.getNativeGuid());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.toString(),parentVol);  StringSet isSyncActive=new StringSet();  isSyncActive.add(TRUE);  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.IS_SYNC_ACTIVE.toString(),isSyncActive);  StringSet isReadOnly=new StringSet();  Boolean readOnly=Boolean.FALSE;  if (driverSnapshot.getAccessStatus() != null) {    readOnly=(driverSnapshot.getAccessStatus().toString()).equals(StorageObject.AccessStatus.READ_ONLY.toString()) ? Boolean.TRUE : Boolean.FALSE;  }  isReadOnly.add(readOnly.toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.IS_READ_ONLY.toString(),isReadOnly);  StringSet techType=new StringSet();  techType.add(BlockSnapshot.TechnologyType.NATIVE.toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.TECHNOLOGY_TYPE.toString(),techType);  String isParentVolumeInCG=parentUnManagedVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString());  if (isParentVolumeInCG.equals(Boolean.TRUE.toString())) {    if (driverSnapshot.getConsistencyGroup() != null && !driverSnapshot.getConsistencyGroup().isEmpty()) {      StringSet snapCgName=new StringSet();      snapCgName.add(driverSnapshot.getConsistencyGroup());      unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SNAPSHOT_CONSISTENCY_GROUP_NAME.toString(),snapCgName);    }  }  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),parentUnManagedVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()));  unManagedVolume.setStoragePoolUri(storagePool.getId());  StringSet pools=new StringSet();  pools.add(storagePool.getId().toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.STORAGE_POOL.toString(),pools);  StringSet driveTypes=storagePool.getSupportedDriveTypes();  if (null != driveTypes) {    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);  }  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(driverSnapshot.getProvisionedCapacity()));  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(driverSnapshot.getAllocatedCapacity()));  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  StringSet parentMatchedVPools=parentUnManagedVolume.getSupportedVpoolUris();  if (null != parentMatchedVPools) {    log.info("Parent Matched Virtual Pools : {}",Joiner.on("\t").join(parentMatchedVPools));  }  if (null == parentMatchedVPools || parentMatchedVPools.isEmpty()) {    unManagedVolume.getSupportedVpoolUris().clear();  } else {    unManagedVolume.getSupportedVpoolUris().replace(parentMatchedVPools);    log.info("Replaced Virtual Pools :{}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));  }  if (newVolume) {    unManagedVolumesToCreate.add(unManagedVolume);  } else {    unManagedVolumesToUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  public static void updateSubregion(SynthContext state,Graphics g,Rectangle bounds){  paintRegion(state,g,bounds);}  }
class C{  synchronized public void close(){  super.close();  releaseWriteCache();  try {    if (raf != null) {synchronized (this) {        if (raf != null && raf.getChannel().isOpen()) {          raf.close();        }      }    }  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  if (!bufferMode.isStable() && file.exists()) {    if (!file.delete()) {      log.warn("Unable to delete temporary file: " + file);    }  }}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  public static Object createInstanceAndCallStaticMethod(Configuration config,String className,String methodName) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  DexClassLoader dcl=createInstance(config);  Class c=dcl.loadClass(className);  Method m=c.getMethod(methodName,(Class[])null);  return m.invoke(null,(Object[])null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildchildexists.class,args);}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private void silentUninstallApp(Context context,final String packageName){  AppUtils.silentUninstallApp(context,packageName);}  }
class C{  static double svd_random2(long[] iy){  throw null;}  }
class C{  public void removeStorage() throws BackupException {  logger.debug("Removing contents of storage directory: " + dataDirSpec.getAbsolutePath());  processHelper.exec("Removing contents of storage directory",rmCmd);}  }
class C{  public static ReadStreamOld open(String string){  VfsStringReader ss=new VfsStringReader(string);  ReadStreamOld rs=new ReadStreamOld(ss);  try {    rs.setEncoding("UTF-8");  } catch (  Exception e) {  }  return rs;}  }
class C{  public Position addControlPoint(){  Position curPos=this.wwd.getCurrentPosition();  if (curPos == null)   return null;  if (this.isRegularShape()) {    if (this.shapeCenterPosition == null) {      this.shapeCenterPosition=curPos;      this.shapeOrientation=this.getShapeInitialHeading();      updateShapeControlPoints();    } else     if (this.shapeRectangle == null) {      String control=this.getShapeInitialControl(curPos);      updateShapeProperties(control,curPos,null);      updateShapeControlPoints();    }  } else {    if (!this.measureShapeType.equals(SHAPE_POLYGON) || this.positions.size() <= 1) {      this.positions.add(curPos);      addControlPoint(this.positions.get(this.positions.size() - 1),CONTROL_TYPE_LOCATION_INDEX,this.positions.size() - 1);      if (this.measureShapeType.equals(SHAPE_POLYGON) && this.positions.size() == 2) {        this.positions.add(this.positions.get(0));      }      if (this.measureShapeType.equals(SHAPE_LINE) && this.positions.size() > 1) {        this.shapeOrientation=LatLon.greatCircleAzimuth(this.positions.get(0),this.positions.get(1));      }    } else {      this.positions.add(positions.size() - 1,curPos);      addControlPoint(this.positions.get(this.positions.size() - 2),CONTROL_TYPE_LOCATION_INDEX,this.positions.size() - 2);    }  }  updateMeasureShape();  this.firePropertyChange(EVENT_POSITION_ADD,null,curPos);  this.wwd.redraw();  return curPos;}  }
class C{  private static void dualPivotQuicksort(double[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  double ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    double t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    double t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    double t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    double t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    double t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  double pivot1=ae2;  a[e2]=a[left];  double pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public Sensor createNewSensor(String systemName,String userName){  Sensor s;  String sName=SerialAddress.normalizeSystemName(systemName);  if (sName.equals("")) {    log.error("Invalid Sensor system name - " + systemName);    return null;  }  s=getBySystemName(sName);  if (s != null) {    log.error("Sensor with this name already exists - " + systemName);    return null;  }  String altName=SerialAddress.convertSystemNameToAlternate(sName);  s=getBySystemName(altName);  if (s != null) {    log.error("Sensor with name '" + systemName + "' already exists as '"+ altName+ "'");    return null;  }  int bit=SerialAddress.getBitFromSystemName(sName);  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {    log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-"+ Integer.toString(SENSORSPERNODE - 1));    return null;  }  if (userName == null) {    s=new SerialSensor(sName);  } else {    s=new SerialSensor(sName,userName);  }  SerialNode node=SerialAddress.getNodeFromSystemName(sName);  if (node == null) {    log.warn("Sensor " + sName + " refers to an undefined Serial Node.");    return s;  }  node.registerSensor(s,bit - 1);  return s;}  }
class C{  public static <T>T rand(final List<T> list){  return list.get(rand(list.size()));}  }
class C{  public MWMStrategyDetail(Properties ctx,int WM_Strategy_Detail_ID,String trxName){  super(ctx,WM_Strategy_Detail_ID,trxName);  if (WM_Strategy_Detail_ID == 0) {  }}  }
class C{  public boolean isSelected(){  Object oo=get_Value(COLUMNNAME_IsSelected);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static KeyStoreData loadDefaultKeystore() throws SsoKeyStoreOperationException {  return new KeyStoreData(TestUtil.class.getResource("/" + TestUtil.TEST_KEYSTORE_FILENAME).getFile(),TestUtil.TEST_KEYSTORE_KEY.toCharArray(),TestUtil.TEST_KEYSTORE_CERT_ALIAS);}  }
class C{  public static boolean equalsIgnoreCase(String as[],String as1[]){  if (as.length != as1.length) {    return false;  }  for (int i=0; i < as.length; i++) {    if (as[i].equalsIgnoreCase(as1[i]) == false) {      return false;    }  }  return true;}  }
class C{  public AttributeHistogram(GoogleBaseAttributeId attributeId){  this.attributeId=attributeId;}  }
class C{  @SuppressWarnings("unchecked") private void checkAliases(Class<?> parent,String classname,String[] parts){  Class<?> c=ELKIServiceRegistry.findImplementation((Class<Object>)parent,classname);  if (c == null) {    return;  }  Alias ann=c.getAnnotation(Alias.class);  if (ann == null) {    if (parts.length > 1) {      StringBuilder buf=new StringBuilder();      buf.append("Class ").append(classname);      buf.append(" in ").append(parent.getCanonicalName());      buf.append(" has the following extraneous aliases:");      for (int i=1; i < parts.length; i++) {        buf.append(' ').append(parts[i]);      }      LOG.warning(buf);    }    return;  }  HashSet<String> aliases=new HashSet<String>();  for (int i=1; i < parts.length; i++) {    aliases.add(parts[i]);  }  StringBuilder buf=null;  for (  String a : ann.value()) {    if (!aliases.remove(a)) {      if (buf == null) {        buf=new StringBuilder();        buf.append("Class ").append(classname);        buf.append(" in ").append(parent.getCanonicalName());        buf.append(" is missing the following aliases:");      }      buf.append(' ').append(a);    }  }  if (!aliases.isEmpty()) {    if (buf == null) {      buf=new StringBuilder();    } else {      buf.append('\n');    }    buf.append("Class ").append(classname);    buf.append(" in ").append(parent.getCanonicalName());    buf.append(" has the following extraneous aliases:");    for (    String a : aliases) {      buf.append(' ').append(a);    }  }  if (buf != null) {    LOG.warning(buf);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.423 -0400",hash_original_method="7DECE044380D73BAC819BD07020B1534",hash_generated_method="7DECE044380D73BAC819BD07020B1534") Process openProcess(String[] cmdAttribs) throws IOException {  return Runtime.getRuntime().exec(cmdAttribs);}  }
class C{  public final void testToString(){  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      assertNotNull(dis.toString());      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("Process Menu Request");  if (WebUtil.getParameter(request,"Exit") != null) {    WebUtil.createLoginPage(request,response,this,null,"Exit");    return;  }  WebSessionCtx wsc=WebSessionCtx.get(request);  if (wsc.ctx == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Window_ID=WebUtil.getParameterAsInt(request,"AD_Window_ID");  if (AD_Window_ID != 0) {    log.fine("AD_Window_ID=" + AD_Window_ID);    String url=WebEnv.getBaseDirectory("WWindow?AD_Window_ID=" + AD_Window_ID);    log.fine("Forward to=" + url);    RequestDispatcher rd=getServletContext().getRequestDispatcher(url);    rd.forward(request,response);    return;  }  WebUtil.createErrorPage(request,response,this,"NotImplemented");}  }
class C{  private static List<BatchResponse> fromJsonString(final String json){  return new Gson().fromJson(json,new TypeToken<List<BatchResponse>>(){  }.getType());}  }
class C{  @Override public boolean addVelocimacro(String name,Node macro,String argArray[],String sourceTemplate){  macros.put(name,new VelocityMacro(name,argArray,sourceTemplate));  return super.addVelocimacro(name,macro,argArray,sourceTemplate);}  }
class C{  public Complex subtract(Complex secondComplex){  return new Complex(a - secondComplex.a,b - secondComplex.b);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Entry removeEntry(CacheDataPage cacheDataPage,int entryIdx) throws IOException {  return updateEntry(cacheDataPage,entryIdx,null,UpdateType.REMOVE);}  }
class C{  public static String gluErrorString(int error){switch (error) {case GL10.GL_NO_ERROR:    return "no error";case GL10.GL_INVALID_ENUM:  return "invalid enum";case GL10.GL_INVALID_VALUE:return "invalid value";case GL10.GL_INVALID_OPERATION:return "invalid operation";case GL10.GL_STACK_OVERFLOW:return "stack overflow";case GL10.GL_STACK_UNDERFLOW:return "stack underflow";case GL10.GL_OUT_OF_MEMORY:return "out of memory";default :return null;}}  }
class C{  public ScriptEngineVelocity() throws ScriptException {  if (m_ve == null) {    m_ve=new VelocityEngine();    m_ve.setProperty(VelocityEngine.RUNTIME_LOG_LOGSYSTEM_CLASS,"org.apache.velocity.runtime.log.NullLogSystem");    m_ve.setProperty(VelocityEngine.ENCODING_DEFAULT,"UTF-8");    m_ve.setProperty(VelocityEngine.INPUT_ENCODING,"UTF-8");    try {      m_ve.init();    } catch (    Exception e) {      throw new ScriptException("Cannot initialize Velocity Engine",e);    }  }  c=new VelocityContext();}  }
class C{  @Override protected int computeHorizontalScrollRange(){  return mItemCount;}  }
class C{  private boolean resourceIsHostPage(IResource resource){  IProject project=resource.getProject();  if (WebAppUtilities.isWebApp(project)) {    IFolder war=WebAppUtilities.getWarSrc(project);    if (war != null) {      if (war.getFullPath().isPrefixOf(resource.getFullPath())) {        return ResourceUtils.hasJspOrHtmlExtension(resource);      }    }  } else {    return "html".equalsIgnoreCase(resource.getFileExtension());  }  return false;}  }
class C{  public ConcurrentOffHeapHashMap(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,long tableSize,int concurrency){  super(new ReadWriteLockedOffHeapHashMapFactory<K,V>(tableSource,storageEngineFactory,(int)(tableSize / concurrency)),concurrency);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ComparableObjectSeries)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  ComparableObjectSeries that=(ComparableObjectSeries)obj;  if (this.maximumItemCount != that.maximumItemCount) {    return false;  }  if (this.autoSort != that.autoSort) {    return false;  }  if (this.allowDuplicateXValues != that.allowDuplicateXValues) {    return false;  }  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return true;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";  db.execSQL(sql);}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  public synchronized void release(LogConnection connection){  if (done) {    logger.warn("Attempt to release connection after connection manager shutdown: " + connection);    return;  }  connection.releaseInternal();  if (connection.isReadonly()) {    if (!readConnections.remove(connection))     logger.warn("Unable to free read-only connection: " + connection);  } else {    if (writeConnection == connection)     writeConnection=null; else {      logger.warn("Unable to free write connection: " + connection);    }  }}  }
class C{  public void testMT() throws Exception {  tryMT(8,1000,64);}  }
class C{  @Override public void onPostSelected(Post post,boolean isSearch){  mPostFragment=(PostFragment)getSupportFragmentManager().findFragmentByTag(POST_TAG);  Bundle args=new Bundle();  args.putParcelable(PostFragment.POST,post);  mPostFragment.setUIArguments(args);  FragmentTransaction fragmentTransaction=mFragmentManager.beginTransaction();  fragmentTransaction.setCustomAnimations(R.anim.enter_post,R.anim.enter_post2,R.anim.enter_post,R.anim.enter_post2);  if (isSearch) {    fragmentTransaction.hide(mSearchViewFragment);  } else {    fragmentTransaction.hide(mCoordinatorFragment);  }  fragmentTransaction.show(mPostFragment);  fragmentTransaction.addToBackStack(null);  fragmentTransaction.commit();}  }
class C{  public VMOption(String name,String value,boolean writeable,Origin origin){  this.name=name;  this.value=value;  this.writeable=writeable;  this.origin=origin;}  }
class C{  public void dumpUrl(Path webGraphDb,String url) throws IOException {  fs=FileSystem.get(getConf());  loopReaders=MapFileOutputFormat.getReaders(fs,new Path(webGraphDb,Loops.LOOPS_DIR),getConf());  Text key=new Text(url);  LoopSet loop=new LoopSet();  MapFileOutputFormat.getEntry(loopReaders,new HashPartitioner<Text,LoopSet>(),key,loop);  System.out.println(url + ":");  for (  String loopUrl : loop.getLoopSet()) {    System.out.println("  " + loopUrl);  }  FSUtils.closeReaders(loopReaders);}  }
class C{  private static MultisigSignatureTransaction createSignatureWithHash(final Account multisig,final Hash hash){  return createSignature(Utils.generateRandomAccount(),multisig,hash);}  }
class C{  @Override public void onClose(){}  }
class C{  public Matrix4x3d rotateX(double ang){  return rotateX(ang,this);}  }
class C{  public boolean isA_Purchase_Option(){  Object oo=get_Value(COLUMNNAME_A_Purchase_Option);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static byte[] encryptPassword(String pw) throws MasterPasswordUnavailableException {  assert SystemInfo.isWindows;  return WindowsCryptUtils.protect(EncryptionUtil.getUTF8Bytes(pw));}  }
class C{  @RequestMapping(value="/api/greetings/{id}",method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Greeting> updateGreeting(@RequestBody Greeting greeting){  logger.info("> updateGreeting id:{}",greeting.getId());  Greeting updatedGreeting=greetingService.update(greeting);  if (updatedGreeting == null) {    return new ResponseEntity<Greeting>(HttpStatus.INTERNAL_SERVER_ERROR);  }  logger.info("< updateGreeting id:{}",greeting.getId());  return new ResponseEntity<Greeting>(updatedGreeting,HttpStatus.OK);}  }
class C{  public String outputString(EntityRef entity){  StringWriter out=new StringWriter();  try {    output(entity,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  protected double distance(Instance first,Instance second){  double distance=0;  int firstI, secondI;  for (int p1=0, p2=0; p1 < first.numValues() || p2 < second.numValues(); ) {    if (p1 >= first.numValues()) {      firstI=m_instances.numAttributes();    } else {      firstI=first.index(p1);    }    if (p2 >= second.numValues()) {      secondI=m_instances.numAttributes();    } else {      secondI=second.index(p2);    }    if (firstI == m_instances.classIndex()) {      p1++;      continue;    }    if (secondI == m_instances.classIndex()) {      p2++;      continue;    }    double diff;    if (firstI == secondI) {      diff=difference(firstI,first.valueSparse(p1),second.valueSparse(p2));      p1++;      p2++;    } else     if (firstI > secondI) {      diff=difference(secondI,0,second.valueSparse(p2));      p2++;    } else {      diff=difference(firstI,first.valueSparse(p1),0);      p1++;    }    distance+=diff * diff;  }  return Math.sqrt(distance / m_instances.numAttributes());}  }
class C{  public void fireEvent(Object event){  if (event == null) {    throw new IllegalArgumentException("Event must not be null.");  }  mTaskQueue.offer(Task.obtainTask(Task.CODE_FIRE_EVENT,event,-1));  if (!mQueueProcessed)   processTaskQueue();}  }
class C{  protected TMemberWithAccessModifierImpl(){  super();}  }
class C{  public boolean isReadWrite(){  return super.isEnabled();}  }
class C{  protected T createAsyncInstance(){  throw new UnsupportedOperationException();}  }
class C{  public StatusLabelManager(JLabel statusLabel){  ArgumentChecking.notNull(statusLabel,"statusLabel");  this.statusLabel=statusLabel;  this.originalText=statusLabel.getText();  this.originalIsOpaque=statusLabel.isOpaque();  this.originalFGColor=statusLabel.getForeground();  this.originalBGColor=statusLabel.getBackground();  updateTimeStamp();  new Thread(new Deamon(this)).start();}  }
class C{  public JTabbedPane(){  this(TOP,WRAP_TAB_LAYOUT);}  }
class C{  public void pathValueToPixel(Path path){  path.transform(mMatrixValueToPx);  path.transform(mViewPortHandler.getMatrixTouch());  path.transform(mMatrixOffset);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasListeners(){  return listeners != null && listeners.size() > 0;}  }
class C{  public Observable<Boolean> shouldShowRequestPermissionRationale(final Activity activity,final String... permissions){  if (!isMarshmallow()) {    return Observable.just(false);  }  return Observable.just(shouldShowRequestPermissionRationale_(activity,permissions));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("employee");  expectedResult.add("employeeId");  expectedResult.add("name");  expectedResult.add("position");  expectedResult.add("salary");  expectedResult.add("gender");  expectedResult.add("address");  expectedResult.add("emp:employee");  expectedResult.add("emp:employeeId");  expectedResult.add("emp:position");  expectedResult.add("emp:salary");  expectedResult.add("emp:gender");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","*");  for (int indexN10076=0; indexN10076 < elementList.getLength(); indexN10076++) {    child=(Node)elementList.item(indexN10076);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public void postLike(String postId,ActionListener callback) throws IOException {  checkAuthentication();  FacebookRESTService con=new FacebookRESTService(token,postId,FacebookRESTService.LIKES,true);  con.addResponseListener(new Listener(con,callback));  if (slider != null) {    SliderBridge.bindProgress(con,slider);  }  for (int i=0; i < responseCodeListeners.size(); i++) {    con.addResponseCodeListener((ActionListener)responseCodeListeners.elementAt(i));  }  current=con;  NetworkManager.getInstance().addToQueueAndWait(con);}  }
class C{  public Vector add(Vector... others){  double newX=x, newY=y, newZ=z;  for (  Vector other : others) {    newX+=other.x;    newY+=other.y;    newZ+=other.z;  }  return new Vector(newX,newY,newZ);}  }
class C{  public void validateComplete(SampleReader reader){  Properties properties=null;  Assert.assertTrue(reader.hasNext());  properties=reader.next();  Assert.assertEquals(3,properties.size());  Assert.assertEquals("0.0",properties.getProperty("entry1"));  Assert.assertEquals("100.0",properties.getProperty("entry2"));  Assert.assertEquals("0.0",properties.getProperty("entry3"));  Assert.assertTrue(reader.hasNext());  properties=reader.next();  Assert.assertEquals(3,properties.size());  Assert.assertEquals("1.0",properties.getProperty("entry1"));  Assert.assertEquals("10000.0",properties.getProperty("entry2"));  Assert.assertEquals("1.0",properties.getProperty("entry3"));  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  public ObjectFactory(){}  }
class C{  public StepObject(StepObject parent){  this.id=parent.getId();  this.attachType=parent.getAttachType();  this.attachId=parent.getAttachId();  this.content=parent.getContent();  this.dueDate=parent.getDueDate();  this.createdTime=parent.getCreatedTime();  this.updatedTime=parent.getUpdatedTime();  this.creatorId=parent.getCreatorId();  this.creatorName=parent.getCreatorName();  this.assigneeId=parent.getAssigneeId();  this.status=parent.getStatus();  this.startTime=parent.getStartTime();  this.completedTime=parent.getCompletedTime();  this.completerId=parent.getCompleterId();  this.idInProject=parent.getIdInProject();  this.projectId=parent.getProjectId();  this.companyId=parent.getCompanyId();  this.deleted=parent.getDeleted();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  private void runOverlayTest(TourGuide[] tourGuides,int ActualSequence){  if (mActivity.mTutorialHandler.mOverlay != null && tourGuides[ActualSequence].mOverlay != null) {    Log.d(TAG,"Overlay, Sequence " + ActualSequence + " Set Individual Overlay");    assertEquals(mActivity.mTutorialHandler.mOverlay,tourGuides[ActualSequence].mOverlay);  } else   if (mActivity.mTutorialHandler.mOverlay != null && tourGuides[ActualSequence].mOverlay == null) {    Log.d(TAG,"Overlay, Sequence " + ActualSequence + " Set default Overlay");    assertEquals(mActivity.mTutorialHandler.mOverlay,mActivity.mSequence.getDefaultOverlay());  }}  }
class C{  private IRI buildURIFromID(String id) throws RDFParseException {  if (getParserConfig().get(XMLParserSettings.FAIL_ON_INVALID_NCNAME)) {    if (!XMLUtil.isNCName(id)) {      reportError("Not an XML Name: " + id,XMLParserSettings.FAIL_ON_INVALID_NCNAME);    }  }  IRI uri=resolveURI("#" + id);  if (getParserConfig().get(XMLParserSettings.FAIL_ON_DUPLICATE_RDF_ID)) {    if (!usedIDs.add(uri)) {      reportError("ID '" + id + "' has already been defined",XMLParserSettings.FAIL_ON_DUPLICATE_RDF_ID);    }  }  return uri;}  }
class C{  public void cleanUp(){  int nI;  for (nI=0; nI < PBOX_ENTRIES; nI++)   m_pbox[nI]=0;  for (nI=0; nI < SBOX_ENTRIES; nI++)   m_sbox1[nI]=m_sbox2[nI]=m_sbox3[nI]=m_sbox4[nI]=0;}  }
class C{  public static SimpleBigDecimal approximateDivisionByN(BigInteger k,BigInteger s,BigInteger vm,byte a,int m,int c){  int _k=(m + 5) / 2 + c;  BigInteger ns=k.shiftRight(m - _k - 2 + a);  BigInteger gs=s.multiply(ns);  BigInteger hs=gs.shiftRight(m);  BigInteger js=vm.multiply(hs);  BigInteger gsPlusJs=gs.add(js);  BigInteger ls=gsPlusJs.shiftRight(_k - c);  if (gsPlusJs.testBit(_k - c - 1)) {    ls=ls.add(ECConstants.ONE);  }  return new SimpleBigDecimal(ls,c);}  }
class C{  public final void addArg(final Expr arg){  setArg(this.args.size(),arg);}  }
class C{  public void addListener(AfterServerStartListener listener){  _afterStartListeners.add(listener);}  }
class C{  @Deprecated public static String decode(final char[] escapedComponent,final String charset) throws URIException {  return URI.decode(escapedComponent,charset);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(getContextIndex() + ": " + PANEL_NAME);  this.setLayout(new GridBagLayout());  this.setBorder(new EmptyBorder(2,2,2,2));  this.add(new JLabel(LABEL_DESCRIPTION),LayoutHelper.getGBC(0,0,2,0.0D,new Insets(0,0,20,0)));  Insets insets=new Insets(2,5,2,5);  this.add(new JLabel(FIELD_LABEL_INTRO),LayoutHelper.getGBC(0,1,2,0.0D,new Insets(0,0,5,0)));  JPanel configContainerPanel=new JPanel(new GridBagLayout());  configContainerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,"",javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,javax.swing.border.TitledBorder.DEFAULT_POSITION,FontUtils.getFont(FontUtils.Size.standard),java.awt.Color.black));  this.add(configContainerPanel,LayoutHelper.getGBC(0,2,2,0.0D));  configContainerPanel.add(new JLabel(FIELD_LABEL_STATUS_CODE),LayoutHelper.getGBC(0,2,1,0.0D));  statusCodeComboBox=new JComboBox<>(STATUS_CODES);  configContainerPanel.add(statusCodeComboBox,LayoutHelper.getGBC(1,2,1,1.0D,insets));  configContainerPanel.add(new JLabel(FIELD_LABEL_HEADER_PATTERN),LayoutHelper.getGBC(0,3,1,0.0D));  headerPatternText=new JTextField();  configContainerPanel.add(headerPatternText,LayoutHelper.getGBC(1,3,1,1.0D,insets));  configContainerPanel.add(new JLabel(FIELD_LABEL_BODY_PATTERN),LayoutHelper.getGBC(0,4,1,0.0D));  bodyPatternText=new JTextField();  configContainerPanel.add(bodyPatternText,LayoutHelper.getGBC(1,4,1,1.0D,insets));  logicalOperatorComboBox=new JComboBox<>(new String[]{FIELD_VALUE_AND_COMPOSITION,FIELD_VALUE_OR_COMPOSITION});  configContainerPanel.add(logicalOperatorComboBox,LayoutHelper.getGBC(0,5,2,0.0D,new Insets(2,0,2,5)));  this.add(new JLabel(),LayoutHelper.getGBC(0,99,2,1.0D,1.0D));}  }
class C{  public ApplyConnectionAction(final NetworkPanel networkPanel,ConnectNeurons connection,String name){  super(networkPanel,name,EnablingCondition.SOURCE_AND_TARGET_NEURONS);  putValue(SHORT_DESCRIPTION,"Use " + name + " method to connect source to target neurons");  this.connection=connection;}  }
class C{  public static String formatTime(int seconds){  return formatTime(seconds / 3600,(seconds % 3600) / 60,(seconds % 3600) % 60);}  }
class C{  public void run() throws Exception {  rmClient.registerApplicationMaster("",0,"");  log.log(Level.INFO,"Application master registered.");  Priority priority=Records.newRecord(Priority.class);  priority.setPriority(0);  try {    while (!nmClient.isInState(Service.STATE.STOPPED)) {      int runningCnt=containers.size();      if (runningCnt < props.instances() && checkAvailableResource()) {        Resource capability=Records.newRecord(Resource.class);        capability.setMemory((int)props.totalMemoryPerNode());        capability.setVirtualCores((int)props.cpusPerNode());        for (int i=0; i < props.instances() - runningCnt; ++i) {          AMRMClient.ContainerRequest containerAsk=new AMRMClient.ContainerRequest(capability,null,null,priority);          rmClient.addContainerRequest(containerAsk);          log.log(Level.INFO,"Making request. Memory: {0}, cpu {1}.",new Object[]{props.totalMemoryPerNode(),props.cpusPerNode()});        }      }      TimeUnit.MILLISECONDS.sleep(schedulerTimeout);    }  } catch (  InterruptedException e) {    rmClient.unregisterApplicationMaster(FinalApplicationStatus.KILLED,"","");    log.log(Level.WARNING,"Application master killed.");  }catch (  Exception e) {    rmClient.unregisterApplicationMaster(FinalApplicationStatus.FAILED,"","");    log.log(Level.SEVERE,"Application master failed.",e);  }}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.248 -0500",hash_original_method="F4D9898A03FC0DADA999BF46D97F9433",hash_generated_method="F4D9898A03FC0DADA999BF46D97F9433") ObjectStreamClass(){}  }
class C{  public InputVenueMessageContent.InputVenueMessageContentBuilder title(String title){  this.title=title;  return this;}  }
class C{  public static double interpolateZ(Coordinate p,Coordinate p0,Coordinate p1){  double segLen=p0.distance(p1);  double ptLen=p.distance(p0);  double dz=p1.z - p0.z;  double pz=p0.z + dz * (ptLen / segLen);  return pz;}  }
class C{  public void logout(String authToken) throws IOException {  String requestUrl=combinePaths(saasApiEndpoint,"/auth/logout?token=" + authToken);  transport.doPost(requestUrl,null);}  }
class C{  @Override public final int delete(@NonNull Uri uri,String selection,String[] selectionArgs){  SQLiteDatabase dbConnection=database.getWritableDatabase();  int deleteCount=0;  try {    dbConnection.beginTransaction();switch (URI_MATCHER.match(uri)) {case PRODUCT_DIR:      deleteCount=dbConnection.delete(ProductTable.TABLE_NAME,selection,selectionArgs);    dbConnection.setTransactionSuccessful();  break;case PRODUCT_ID:deleteCount=dbConnection.delete(ProductTable.TABLE_NAME,ProductTable.WHERE_ID_EQUALS,new String[]{uri.getPathSegments().get(1)});dbConnection.setTransactionSuccessful();break;default :throw new IllegalArgumentException("Unsupported URI: " + uri);}}  finally {dbConnection.endTransaction();}if (deleteCount > 0) {getContext().getContentResolver().notifyChange(uri,null);}return deleteCount;}  }
class C{  final public static double[] earthCircle(double phi1,double lambda0,double c,int n){  return earthCircle(phi1,lambda0,c,0.0f,MoreMath.TWO_PI_D,n,new double[n << 1]);}  }
class C{  private RemoteRef activate(boolean force) throws RemoteException {  assert Thread.holdsLock(this);  ref=null;  try {    Remote proxy=id.activate(force);    ActivatableRef newRef=null;    if (proxy instanceof RemoteStub) {      newRef=(ActivatableRef)((RemoteStub)proxy).getRef();    } else {      RemoteObjectInvocationHandler handler=(RemoteObjectInvocationHandler)Proxy.getInvocationHandler(proxy);      newRef=(ActivatableRef)handler.getRef();    }    ref=newRef.ref;    return ref;  } catch (  ConnectException e) {    throw new ConnectException("activation failed",e);  }catch (  RemoteException e) {    throw new ConnectIOException("activation failed",e);  }catch (  UnknownObjectException e) {    throw new NoSuchObjectException("object not registered");  }catch (  ActivationException e) {    throw new ActivateFailedException("activation failed",e);  }}  }
class C{  public CSVParserBuilder withEscapeChar(final char escapeChar){  this.escapeChar=escapeChar;  return this;}  }
class C{  public String toString(){  return ">>> Marker after " + after + " on "+ untilFocused;}  }
class C{  public VNXeCifsShare findCifsShareByName(String shareName){  CifsShareRequests req=new CifsShareRequests(_khClient);  List<VNXeCifsShare> shares=req.getCifsShareByName(shareName);  if (shares != null && !shares.isEmpty()) {    return shares.get(0);  } else {    return null;  }}  }
class C{  public Monitor(Map<String,String> dsProperties){  set(dsProperties);}  }
class C{  public boolean relative(int rows) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.rowData.size() == 0) {      setRowPositionValidity();      return false;    }    if (this.thisRow != null) {      this.thisRow.closeOpenStreams();    }    this.rowData.moveRowRelative(rows);    this.thisRow=this.rowData.getAt(this.rowData.getCurrentRowNumber());    setRowPositionValidity();    return (!this.rowData.isAfterLast() && !this.rowData.isBeforeFirst());  }}  }
class C{  public void autoScanActivated(boolean reverseScan){  if (!mIsScanInProgress) {    startScan(reverseScan);    return;  }  if (mReverseScan != reverseScan) {    mReverseScan=reverseScan;    return;  }  mHandler.removeCallbacks(mAutoScanRunnable);  mOptionManager.selectOption(OptionManager.OPTION_INDEX_CLICK);  if (mIsScanInProgress) {    mHandler.postDelayed(mAutoScanRunnable,getAutoScanDelay());  }}  }
class C{  public void testGetUserToken(){  List<User> users=User.parseUsers("u1:p1:r1,r2|u2:p2:r2,r3");  configuration.getUsers().addAll(users);  String token=((AbstractOrionStandaloneLocalConfiguration)configuration).getUserToken();  assertEquals(" " + "<user deactivated=\"false\" username=\"u1\" password=\"p1\"/>" + "<user deactivated=\"false\" username=\"u2\" password=\"p2\"/>",token);}  }
class C{  public IntRangeField(String name,final int[] min,final int[] max){  super(name,getType(min.length));  setRangeValues(min,max);}  }
class C{  public static Map<String,Object> updateContentMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  GenericValue content=null;  Locale locale=(Locale)context.get("locale");  String contentId=(String)context.get("contentId");  try {    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));  }  context.put("currentContent",content);  Map<String,Object> permResults=ContentWorker.callContentPermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    String userLoginId=(String)userLogin.get("userLoginId");    String lastModifiedByUserLogin=userLoginId;    Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();    if (UtilValidate.isNotEmpty(context.get("statusId"))) {      Map<String,Object> statusInMap=UtilMisc.<String,Object>toMap("contentId",context.get("contentId"),"statusId",context.get("statusId"),"userLogin",userLogin);      try {        dispatcher.runSync("setContentStatus",statusInMap);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem updating content Status","ContentServices");        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentStatusUpdateError",UtilMisc.toMap("errorString",e),locale));      }    }    content.setNonPKFields(context);    content.put("lastModifiedByUserLogin",lastModifiedByUserLogin);    content.put("lastModifiedDate",lastModifiedDate);    try {      content.store();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  } else {    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);    return ServiceUtil.returnError(errorMsg);  }  return result;}  }
class C{  @SuppressWarnings("unchecked") protected void addStoragePoolstoPolicy(List<CIMObjectPath> policyObjectPaths,Iterator<CIMObjectPath> it,DbClient dbClient,Map<String,Object> keyMap,String tierID) throws IOException {  Map<String,Set<String>> policytopoolMapping=(Map<String,Set<String>>)keyMap.get(Constants.POLICY_TO_POOLS_MAPPING);  while (it.hasNext()) {    CIMObjectPath poolObjectPath=it.next();    URI poolURI=getStoragePoolURI(poolObjectPath,dbClient);    if (null != poolURI) {      for (      CIMObjectPath policyObjectPath : policyObjectPaths) {        String policyID=getFASTPolicyID(policyObjectPath);        if (!policytopoolMapping.containsKey(policyID)) {          policytopoolMapping.put(policyID,new HashSet<String>());        }        policytopoolMapping.get(policyID).add(poolURI.toString());      }    }  }}  }
class C{  protected ObjectMatrix1D viewSelectionLike(int[] offsets){  return new SelectedDenseObjectMatrix1D(this.elements,offsets);}  }
class C{  public synchronized void removeOutputPort(String key){  outputPorts.remove(key);}  }
class C{  boolean rhsEqualToField(){  return rhs != null && memberName.equals(rhs.getQualifiedName());}  }
class C{  @Override public void toggleSelection(Photo photo){  if (selectedPhotos.contains(photo.getPath())) {    selectedPhotos.remove(photo.getPath());  } else {    selectedPhotos.add(photo.getPath());  }}  }
class C{  public Builder withEmailCollection(){  this.isEmailRequired=true;  return this;}  }
class C{  public final boolean isTopToBottom(){  return topToBottom;}  }
class C{  public TIntFloatHashMap(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private static void fill(DTSweepContext tcx,AdvancingFrontNode node){  DelaunayTriangle triangle=new DelaunayTriangle(node.prev.point,node.point,node.next.point);  triangle.markNeighbor(node.prev.triangle);  triangle.markNeighbor(node.triangle);  tcx.addToList(triangle);  node.prev.next=node.next;  node.next.prev=node.prev;  tcx.removeNode(node);  if (!legalize(tcx,triangle)) {    tcx.mapTriangleToNodes(triangle);  }}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double z=0.0;  if (dataset instanceof XYZDataset) {    z=((XYZDataset)dataset).getZValue(series,item);  }  Paint p=this.paintScale.getPaint(z);  double xx0=domainAxis.valueToJava2D(x + this.xOffset,dataArea,plot.getDomainAxisEdge());  double yy0=rangeAxis.valueToJava2D(y + this.yOffset,dataArea,plot.getRangeAxisEdge());  double xx1=domainAxis.valueToJava2D(x + this.blockWidth + this.xOffset,dataArea,plot.getDomainAxisEdge());  double yy1=rangeAxis.valueToJava2D(y + this.blockHeight + this.yOffset,dataArea,plot.getRangeAxisEdge());  Rectangle2D block;  PlotOrientation orientation=plot.getOrientation();  if (orientation.equals(PlotOrientation.HORIZONTAL)) {    block=new Rectangle2D.Double(Math.min(yy0,yy1),Math.min(xx0,xx1),Math.abs(yy1 - yy0),Math.abs(xx0 - xx1));  } else {    block=new Rectangle2D.Double(Math.min(xx0,xx1),Math.min(yy0,yy1),Math.abs(xx1 - xx0),Math.abs(yy1 - yy0));  }  g2.setPaint(p);  g2.fill(block);  g2.setStroke(new BasicStroke(1.0f));  g2.draw(block);  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addEntity(entities,block,dataset,series,item,0.0,0.0);  }}  }
class C{  public void renderScaledText(String text,int x,int y,int color,int maxX){  int length=fontRendererObj.getStringWidth(text);  if (length <= maxX) {    fontRendererObj.drawString(text,x,y,color);  } else {    float scale=(float)maxX / length;    float reverse=1 / scale;    float yAdd=4 - (scale * 8) / 2F;    GL11.glPushMatrix();    GL11.glScalef(scale,scale,scale);    fontRendererObj.drawString(text,(int)(x * reverse),(int)((y * reverse) + yAdd),color);    GL11.glPopMatrix();  }}  }
class C{  public static double calculateSum(List<Double> valueList){  double sum=0.;  for (  double i : valueList) {    sum=sum + i;  }  return sum;}  }
class C{  public Define(String functionName,Class<?> returnType,String variableName,Class<?> variableType){  this(functionName,returnType,new String[]{variableName},new Class<?>[]{variableType});}  }
class C{  public ForwardEdgeOfBattleArea(String sidc){  super(sidc);  this.init(sidc);}  }
class C{  public float remove(K key){  float prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public void trimTree(){  boolean needsTrim=m_root != null;  while (needsTrim) {    needsTrim=false;    Enumeration en=m_root.preorderEnumeration();    while (m_root.getChildCount() > 0 && en.hasMoreElements()) {      MTreeNode nd=(MTreeNode)en.nextElement();      if (nd.isSummary() && nd.getChildCount() == 0) {        nd.removeFromParent();        needsTrim=true;      }    }  }}  }
class C{  static void cleanUp(IR ir){  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.operator() == PI) {      RegisterOperand result=GuardedUnary.getResult(s);      Operator mv=IRTools.getMoveOp(result.getType());      Operand val=GuardedUnary.getVal(s);      Move.mutate(s,mv,result,val);    }  }  ir.actualSSAOptions=null;}  }
class C{  public static void appendSizeExternalSortableArraySizeArray(InputStream in,OutputStream out,ExternalSortable ex) throws IOException {  int i;  ExternalSortable a;  try {    i=ByteUtils.readInt(in);  } catch (  IOException e) {    throw new IOException("Can't append in to out; in is empty.");  }  ByteUtils.writeInt(out,i);  try {    for (int j=0; j < i; j++) {      a=ex.read(in);      a.write(out);    }  } catch (  IOException e) {    throw new IOException("Can't append in to out; not enough bytes, but not empty.");  }}  }
class C{  public String toString(){  Object[] elements=getArray();  int maxIndex=elements.length - 1;  StringBuffer buf=new StringBuffer();  buf.append("[");  for (int i=0; i <= maxIndex; i++) {    buf.append(String.valueOf(elements[i]));    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  private void swap(int i,int j){  double tmpS=counts[i];  counts[i]=counts[j];  counts[j]=tmpS;  int tmpC=cmids[i];  cmids[i]=cmids[j];  cmids[j]=tmpC;  map[cmids[i]]=i;  map[cmids[j]]=j;}  }
class C{  public ToolBarFactory(ResourceBundle rb,ActionMap am){  super(rb);  buttonFactory=new ButtonFactory(rb,am);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  public void preReplace(Document document,int offset) throws BadLocationException {  fPosition.setOffset(offset);  try {    document.addPositionCategory(CATEGORY);    document.addPositionUpdater(fPositionUpdater);    document.addPosition(CATEGORY,fPosition);  } catch (  BadPositionCategoryException e) {  }}  }
class C{  public void testStaticNoObjectPy2(){  ensureStaticNoObject(false);}  }
class C{  private Class<?> findBaseType(Class<?> type,Map<Class<?>,TypeSerializerFactory> factories){  if (factories.containsKey(type))   return type;  List<Map.Entry<Class<?>,TypeSerializerFactory>> orderedFactories=new ArrayList<>(factories.entrySet());  Collections.reverse(orderedFactories);  Optional<Map.Entry<Class<?>,TypeSerializerFactory>> optional=orderedFactories.stream().filter(null).findFirst();  return optional.isPresent() ? optional.get().getKey() : null;}  }
class C{  public void tick(){  final long count=uncounted.getAndSet(0);  final double instantRate=count / interval;  if (initialized) {    rate+=(alpha * (instantRate - rate));  } else {    rate=instantRate;    initialized=true;  }}  }
class C{  public static Camera createPixelAligned(int pixelWidth,int pixelHeight){  Camera result=new Camera(pixelWidth,pixelHeight);  result.lookAt(new vec3(0,0,1),new vec3(0,0,0),vec3.YAXIS);  return result;}  }
class C{  public void clearCurrentTopology(){  this.clear();  linksUpdated=true;  dtLinksUpdated=true;  tunnelPortsUpdated=true;  createNewInstance("startup");  lastUpdateTime=new Date();}  }
class C{  public ResellerShareResultEvaluator(Document xml,String currency){  super(xml);  setCurrency(currency);}  }
class C{  int relabel(Instruction i){  int index=0;  while (i != null) {    i.label=index;    index=i.nextOffset(index);    i=i.next;  }  return index;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public BufferedFileChannel(String name,String mode,String inCharset) throws java.io.IOException {  this(new java.io.File(name),mode,inCharset);}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToXMLSAXHandler();    wasReset=true;  }  return wasReset;}  }
class C{  public DatePicker(){  this(null,null);}  }
class C{  protected void moveDownItem(){  if (selectionTable.getSelectionCount() == 0) {    return;  }  for (  final int index : selectionTable.getSelectionIndices()) {    if (index == selectionTable.getItemCount() - 1) {      selectionTable.forceFocus();      return;    }  }  final int[] newSelection=new int[selectionTable.getSelectionCount()];  int newSelectionIndex=0;  for (  final TableItem tableItem : selectionTable.getSelection()) {    final int position=selection.indexOf(tableItem.getData());    swap(position,position + 1);    newSelection[newSelectionIndex++]=position + 1;  }  redrawTables();  selectionTable.select(newSelection);  selectionTable.forceFocus();}  }
class C{  public Operation createOperation(){  OperationImpl operation=new OperationImpl();  return operation;}  }
class C{  public CertificateExpiredException(){  super();}  }
class C{  protected void writeShort(int value) throws IOException {  out.write(value & 0xff);  out.write((value >> 8) & 0xff);}  }
class C{  private static void swap(int[] index,int l,int r){  int help=index[l];  index[l]=index[r];  index[r]=help;}  }
class C{  public void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.removeOnItemTouchListener(listener);}  }
class C{  public Bitmap makeIcon(String text){  if (mTextView != null) {    mTextView.setText(text);  }  return makeIcon();}  }
class C{  public static Color convertICCColor(Element e,ICCColor c,float opacity,BridgeContext ctx){  String iccProfileName=c.getColorProfile();  if (iccProfileName == null) {    return null;  }  SVGColorProfileElementBridge profileBridge=(SVGColorProfileElementBridge)ctx.getBridge(SVG_NAMESPACE_URI,SVG_COLOR_PROFILE_TAG);  if (profileBridge == null) {    return null;  }  ICCColorSpaceExt profileCS=profileBridge.createICCColorSpaceExt(ctx,e,iccProfileName);  if (profileCS == null) {    return null;  }  int n=c.getNumberOfColors();  float[] colorValue=new float[n];  if (n == 0) {    return null;  }  for (int i=0; i < n; i++) {    colorValue[i]=c.getColor(i);  }  float[] rgb=profileCS.intendedToRGB(colorValue);  return new Color(rgb[0],rgb[1],rgb[2],opacity);}  }
class C{  public DebugInfoEncoder(PositionList positions,LocalList locals,DexFile file,int codeSize,int regSize,boolean isStatic,CstMethodRef ref){  this.positions=positions;  this.locals=locals;  this.file=file;  this.desc=ref.getPrototype();  this.isStatic=isStatic;  this.codeSize=codeSize;  this.regSize=regSize;  output=new ByteArrayAnnotatedOutput();  lastEntryForReg=new LocalList.Entry[regSize];}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double recipRoot2PiTimesSigmaD;  double twoSigmaSqrD;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weights[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    }  finally {      is.close();      mData=tempData;    }  }}  }
class C{  private String createClassSource(ClassModel model){  String[] names=splitClassName(model.getName());  StringBuffer sb=new StringBuffer();  if (!names[0].equals("")) {    sb.append("package ").append(names[0]).append(";\n\n");  }  sb.append("public ");  if (model.isAbstract()) {    sb.append("abstract ");  }  sb.append("class ").append(names[1]);  sb.append(createParentRelation(model));  sb.append(" {\n");  List<AbstractUMLModel> children=model.getChildren();  for (int i=0; i < children.size(); i++) {    Object child=children.get(i);    if (child instanceof AttributeModel) {      sb.append(createAttribute((AttributeModel)child)).append("\n");    }  }  sb.append("\n");  for (int i=0; i < children.size(); i++) {    Object child=children.get(i);    if (child instanceof OperationModel) {      OperationModel ope=(OperationModel)child;      sb.append(createMethodSignature(ope));      if (ope.isAbstract()) {        sb.append(";\n\n");      } else {        sb.append("{");        sb.append("\n");        if (!ope.getType().equals("void") && ope.getType().length() != 0 && !ope.isConstructor()) {          sb.append("        ");          sb.append("return ");          sb.append(getDefaultValue(ope.getType()));          sb.append(";\n");        }        sb.append("    ");        sb.append("}\n\n");      }    }  }  sb.append("}\n");  return sb.toString();}  }
class C{  @Override protected void writeHeader() throws Exception {  String rootElementName=getWriteOperation().getSink().rootElementName;  os.write(CoderUtils.encodeToByteArray(StringUtf8Coder.of(),"<" + rootElementName + ">\n"));}  }
class C{  public CCFiniteTimeAction reverse(){  ccMacros.CCLOG(LOG_TAG,"Override me");  return null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildZooSub3Area(zone);}  }
class C{  private static boolean rulesEqual(IAccessRule[] a,IAccessRule[] b){  if (a == b) {    return true;  }  if (a.length != b.length) {    return false;  }  for (int j=0; j < a.length; j++) {    if (!a[j].equals(b[j])) {      return false;    }  }  return true;}  }
class C{  private static String[] addElementToArray(String[] array,String element){  Arrays.copyOf(array,array.length + 1);  array[array.length - 1]=element;  return array;}  }
class C{  public static boolean assertDistribution(final double[] da){  double sum=0.0;  for (  final double d : da) {    Exam.assertTrue(Utils.realFormat(d),d >= 0.0 && d <= (1.0 + TOLERANCE) && !Double.isNaN(d));    sum+=d;  }  if (Exam.checkEquals(1.0,sum,0.0001)) {    return true;  }  throw new Exam.ExamException("sum=" + Utils.realFormat(sum) + "  "+ Utils.realFormatArray(da));}  }
class C{  public void showBranches(){  project=appContext.getCurrentProject();  getBranches();}  }
class C{  public static ValidationResult defaultResult(){  return ValidationResultImpl.defaultInstance();}  }
class C{  public int highestLayer(){  if (getComponentCount() > 0)   return getLayer(getComponent(0));  return 0;}  }
class C{  public void clearSticky(){  int size=headComponentStack.size();  while (size > 0 && headerViewStack.size() == size) {    WXCell headComponent=headComponentStack.pop();    View headerView=headerViewStack.pop();    ((ViewGroup)getParent()).removeView(headerView);    headComponent.recoverySticky();  }}  }
class C{  public BaseScan pickBestScan(){  logger.debug("Picking for {}",this);  BaseScan bestScan=null;  bestScan=pickFullText();  if (bestScan != null) {    return bestScan;  }  if (tables.getGroup().getRejectedJoins() != null) {    bestScan=pickBestGroupLoop();  }  IntersectionEnumerator intersections=new IntersectionEnumerator();  Set<TableSource> required=tables.getRequired();  for (  TableGroupJoinNode table : tables) {    IndexScan tableIndex=pickBestIndex(table,required,intersections);    if ((tableIndex != null) && ((bestScan == null) || (compare(tableIndex,bestScan) > 0)))     bestScan=tableIndex;    ExpressionsHKeyScan hKeyRow=pickHKeyRow(table,required);    if ((hKeyRow != null) && ((bestScan == null) || (compare(hKeyRow,bestScan) > 0)))     bestScan=hKeyRow;  }  bestScan=pickBestIntersection(bestScan,intersections);  if (bestScan == null) {    GroupScan groupScan=new GroupScan(tables.getGroup());    groupScan.setCostEstimate(estimateCost(groupScan));    bestScan=groupScan;  }  return bestScan;}  }
class C{  @Override public FlowHandler createFlowHandler(FacesContext context){  FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().put("flowHandlerFactoryWrapped",true);  String id=(null != appBean) ? appBean.getId() : "null";  FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().put("appBean",id);  return getWrapped().createFlowHandler(context);}  }
class C{  Object _remove(Object key,int hash,Object value,Object defaultValue){  lock();  try {    int c=count - 1;    HashEntry<K,V>[] tab=table;    int index=hash & (tab.length - 1);    HashEntry<K,V> first=tab[index];    HashEntry<K,V> e=first;    while (e != null && (e.hash != hash || !key.equals(e.key)))     e=e.next;    if (e == null)     return defaultValue;    V v=e.value;    if ((value == null && v == null) || value.equals(v)) {      ++modCount;      HashEntry<K,V> newFirst=e.next;      for (HashEntry<K,V> p=first; p != e; p=p.next)       newFirst=new HashEntry<K,V>(p.key,p.hash,newFirst,p.value);      tab[index]=newFirst;      count=c;      return v;    }    return defaultValue;  }  finally {    unlock();  }}  }
class C{  public void parseAtom(ExtensionProfile extProfile,InputStream stream) throws IOException, ParseException {  SourceHandler handler=new SourceHandler(extProfile);  new XmlParser().parse(stream,handler,Namespaces.atom,"source");}  }
class C{  private static boolean isBmpHeader(final byte[] imageHeaderBytes,final int headerSize){  if (headerSize < BMP_HEADER.length) {    return false;  }  return ImageFormatCheckerUtils.startsWithPattern(imageHeaderBytes,BMP_HEADER);}  }
class C{  @Override public int hashCode(){  return table.hashCode();}  }
class C{  public boolean IsTLSClientCertAuthnEnabled(){  return this._certAuthEnabled;}  }
class C{  public static PlusUrl listPublicActivities(String userId){  return new PlusUrl("https://www.googleapis.com/plus/v1/people/" + userId + "/activities/public");}  }
class C{  protected void handleDoubleClick(MouseEvent evt){  if (DEBUG) {    System.out.println("DelegationSelectionTool.handleDoubleClick " + evt);  }  DrawingView v=getView();  Point pos=new Point(evt.getX(),evt.getY());  Handle handle=v.findHandle(pos);  if (handle != null) {    if (DEBUG) {      System.out.println("DelegationSelectionTool.handleDoubleClick by handle");    }    handle.trackDoubleClick(pos,evt.getModifiersEx());  } else {    Point2D.Double p=viewToDrawing(pos);    Figure figure=null;    if (isSelectBehindEnabled()) {      for (      Figure f : v.getSelectedFigures()) {        if (f.contains(p)) {          figure=f;          break;        }      }    }    if (figure == null) {      figure=v.findFigure(pos);    }    Figure outerFigure=figure;    if (figure != null && figure.isSelectable()) {      if (DEBUG) {        System.out.println("DelegationSelectionTool.handleDoubleClick by figure");      }      Tool figureTool=figure.getTool(p);      if (figureTool == null) {        figure=getDrawing().findFigureInside(p);        if (figure != null) {          figureTool=figure.getTool(p);        }      }      if (figureTool != null) {        setTracker(figureTool);        figureTool.mousePressed(evt);      } else {        if (outerFigure.handleMouseClick(p,evt,getView())) {          v.clearSelection();          v.addToSelection(outerFigure);        } else {          v.clearSelection();          v.addToSelection(outerFigure);          v.setHandleDetailLevel(v.getHandleDetailLevel() + 1);        }      }    }  }  evt.consume();}  }
class C{  public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  return prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability,false,false);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(PERMITTED_SUBTREES)) {    permitted=null;  } else   if (name.equalsIgnoreCase(EXCLUDED_SUBTREES)) {    excluded=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:NameConstraintsExtension.");  }  encodeThis();}  }
class C{  public void testQueryAnalysis(){  assertQ("Query analysis: ",req("fl","id","q","content:ab","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=1]");  assertQ("Query analysis: ",req("fl","id","q","content:aba","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=2]");}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);  requestUrlBase="http://localhost:" + MAIN_PORT;  resourceStorageBase="http://localhost:" + MAIN_PORT;}  }
class C{  public boolean wasCancelled(){  return m_wasCancelled;}  }
class C{  public static void process(Process p,LineConsumer stdout,LineConsumer stderr) throws IOException {  try (BufferedReader inputReader=new BufferedReader(new InputStreamReader(p.getInputStream()));BufferedReader errorReader=new BufferedReader(new InputStreamReader(p.getErrorStream()))){    String line;    while ((line=inputReader.readLine()) != null) {      stdout.writeLine(line);    }    while ((line=errorReader.readLine()) != null) {      stderr.writeLine(line);    }  } }  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String write(StringBuilder sb,String... strings){  for (  String string : strings)   sb.append(string);  return sb.toString();}  }
class C{  public DESedeKeySpec(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  public static BigdataGraph create() throws Exception {  return create(BigdataRDFFactory.INSTANCE);}  }
class C{  public Chain(int pc,Chain next,Code.State state){  this.pc=pc;  this.next=next;  this.state=state;}  }
class C{  private boolean remove0(Collection<GridCacheMvccCandidate> col,GridCacheVersion ver){  if (col != null) {    for (Iterator<GridCacheMvccCandidate> it=col.iterator(); it.hasNext(); ) {      GridCacheMvccCandidate cand=it.next();      if (cand.version().equals(ver)) {        cand.setUsed();        cand.setRemoved();        it.remove();        reassign();        return true;      }    }  }  return false;}  }
class C{  @Override public final void clear(){  int mc=this.modCount;  Segment<K,V> segment;  for (long segmentIndex=0; segmentIndex >= 0; segmentIndex=nextSegmentIndex(segmentIndex,segment)) {    if (!(segment=segment(segmentIndex)).isEmpty()) {      segment.clear(this);      mc++;      modCount++;    }  }  if (mc != modCount)   throw new ConcurrentModificationException();}  }
class C{  public static boolean safeNavigationOperatorDefined(String nestedFieldName){  if (nestedFieldName.contains(SAFE_NAVIGATION_OPERATOR))   if (!nestedFieldName.startsWith(SAFE_NAVIGATION_OPERATOR))   throw new MappingException("Safe navigation operator must be the first symbol after dot notation"); else   return true;  return false;}  }
class C{  @Override public boolean joinSegments(Point2D.Double join,double tolerance){  if (get(TRANSFORM) != null) {    try {      join=(Point2D.Double)get(TRANSFORM).inverseTransform(join,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");    }  }  int i=getBezierPath().findSegment(join,tolerance);  if (i != -1 && i > 1) {    removeNode(i);    return true;  }  return false;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.184 -0400",hash_original_method="CC940DEAD31703B07C115DBDFF904C00",hash_generated_method="BB56B6662D5F900B39CE5CE303E36706") public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public <T extends ICalComponent>boolean removeComponent(T component){  return components.remove(component.getClass(),component);}  }
class C{  @Override protected void dispatchDraw(final Canvas canvas){  super.dispatchDraw(canvas);  if (mHoverCell != null) {    mHoverCell.draw(canvas);  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> resynchronizeFullCopy(URI consistencyGroupId,URI fullCopyId){  final String url=getIdUrl() + "/protection/full-copies/{fcid}/resynchronize";  return postTasks(url,consistencyGroupId,fullCopyId);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[16];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 6; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }      }    }  }  for (int i=0; i < 16; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public void cancelRequests(Context context,boolean mayInterruptIfRunning){  List<WeakReference<Future<?>>> requestList=requestMap.get(context);  if (requestList != null) {    for (    WeakReference<Future<?>> requestRef : requestList) {      Future<?> request=requestRef.get();      if (request != null) {        request.cancel(mayInterruptIfRunning);      }    }  }  requestMap.remove(context);}  }
class C{  public void close(){  if (!isOpen)   return;  Log.d(TAG,"Trying to close track");  loadingLock.lock();  try {    save();    if (saveFileStream != null) {      SavingHelper.close(saveFileStream);      saveFileStream=null;    }    savingDisabled=true;    isOpen=false;    Log.i(TAG,"Track closed");  }  finally {    loadingLock.unlock();  }}  }
class C{  public void deployEndpoints() throws IOException {  if (log != null) {    log.info("API Gateway deployment is being initialized.");  }  List<Resource> resources=getResources();  if (log != null) {    log.info(resources.size() + " resources found in JAR File.");  }  createOrUpdateApi();  walkThroughResources(resources);  createDeployment();}  }
class C{  protected void process(Document document) throws Exception {  System.out.println("about to output: " + document);  StringWriter out=new StringWriter();  XMLWriter writer=new XMLWriter(out);  writer.write(document);  writer.close();  StringReader in=new StringReader(out.toString());  SAXReader reader=new SAXReader();  Document doc2=reader.read(in);  System.out.println("parsed back again: " + doc2);  writer.setOutputStream(System.out);  writer.write(doc2);}  }
class C{  public ICalReader(InputStream in,ICalVersion defaultVersion){  this(new Utf8Reader(in),defaultVersion);}  }
class C{  public void textElement(String element,String text) throws IOException {  textElement(element,text,null);}  }
class C{  public final T blockingGet(long timeout,TimeUnit unit){  if (getCount() != 0) {    try {      if (!await(timeout,unit)) {        dispose();      }    } catch (    InterruptedException ex) {      dispose();      throw ExceptionHelper.propagate(ex);    }  }  Throwable e=error;  if (e != null) {    ExceptionHelper.propagate(e);  }  return value;}  }
class C{  public TenantConfigurationValueBuilder<T> value(final T value){  this.configuration.value=value;  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TYPE_DEFS__TYPES:    return ((InternalEList<?>)getTypes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Bean public InstallerSource installerSource() throws MalformedURLException {  return new InstallerSourceWebserviceDefaultImplementation(new URL(playOnLinuxContext.getProperty("webservice.apps.url")));}  }
class C{  public void testCreateConsumer() throws Exception {  Message msg=super.createMessage();  producer.send(msg);synchronized (lock) {    while (testConsumer == null) {      lock.wait(3000);    }  }  assertTrue(testConsumer != null);}  }
class C{  public NewsDB.Record myPublication() throws IOException, SpaceExceededException {  if (this.outgoingNews.isEmpty())   return null;  final NewsDB.Record record=this.outgoingNews.pop();  if (record == null)   return null;  record.incDistribution();  if (record.distributed() >= this.maxDistribution) {    this.publishedNews.push(record);  } else {    this.outgoingNews.push(record);  }  return record;}  }
class C{  private ByteBuffer checkMessage(GridNioSession ses,Object msg) throws GridNioException {  if (!(msg instanceof ByteBuffer))   throw new GridNioException("Invalid object type received (is SSL filter correctly placed in filter " + "chain?) [ses=" + ses + ", msgClass="+ msg.getClass().getName()+ ']');  return (ByteBuffer)msg;}  }
class C{  public RangeQueryBuilder gt(float from){  this.from=from;  this.includeLower=false;  return this;}  }
class C{  public boolean isPreviewed(){  return fragment.isPreviewing() && grid.currentlyOpenedGridItem == this;}  }
class C{  @Override public void end(){  super.end();  doAfterEnd();}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_test.getExpression().callVisitors(m_test,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  void processType(Resource type,OwlRule rule,Fact source){  processType(triple(node,RDF.TYPE,type,rule,source));}  }
class C{  public String transformToString(ElemTemplateElement elem) throws TransformerException {  ElemTemplateElement firstChild=elem.getFirstChildElem();  if (null == firstChild)   return "";  if (elem.hasTextLitOnly() && m_optimizer) {    return ((ElemTextLiteral)firstChild).getNodeValue();  }  SerializationHandler savedRTreeHandler=this.m_serializationHandler;  StringWriter sw=(StringWriter)m_stringWriterObjectPool.getInstance();  m_serializationHandler=(ToTextStream)m_textResultHandlerObjectPool.getInstance();  if (null == m_serializationHandler) {    Serializer serializer=org.apache.xml.serializer.SerializerFactory.getSerializer(m_textformat.getProperties());    m_serializationHandler=(SerializationHandler)serializer;  }  m_serializationHandler.setTransformer(this);  m_serializationHandler.setWriter(sw);  String result;  try {    executeChildTemplates(elem,true);    this.m_serializationHandler.endDocument();    result=sw.toString();  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    sw.getBuffer().setLength(0);    try {      sw.close();    } catch (    Exception ioe) {    }    m_stringWriterObjectPool.freeInstance(sw);    m_serializationHandler.reset();    m_textResultHandlerObjectPool.freeInstance(m_serializationHandler);    m_serializationHandler=savedRTreeHandler;  }  return result;}  }
class C{  protected String processCommand(final String command,final byte[][] fileData){  return processCommand(command,getEnvironment(),fileData);}  }
class C{  public ExecutionTargetException(SaaSApplicationException appException){  super(appException,appException.getMessageParams());  setMessageKey(appException.getMessageKey());}  }
class C{  public ImageFetcher(Context context,int imageWidth,int imageHeight){  super(context,imageWidth,imageHeight);  init(context);}  }
class C{  public void disableMobileData(){  try {    ConnectivityManager cm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);    Method dataMtd=ConnectivityManager.class.getDeclaredMethod("setMobileDataEnabled",boolean.class);    dataMtd.setAccessible(true);    dataMtd.invoke(cm,false);  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a credit card number as a long integer: ");  long number=input.nextLong();  System.out.println(number + " is " + (isValid(number) ? "valid" : "invalid"));}  }
class C{  public static void main(String argv[]){  DataScanCtrl ctrl=new DataScanCtrl(argv);  ctrl.go();}  }
class C{  public static void dump(String message,List<StackTraceElement> stack){  printEmphasized(message + "\n" + stackTraceToString(stack));}  }
class C{  public static void text(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws / 2.0),(float)(ys + hs));  draw();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ChangeCorrectionProposal(String name,Change change,int relevance,Image image){  if (name == null) {    throw new IllegalArgumentException("Name must not be null");  }  fName=name;  fChange=change;  fRelevance=relevance;  fImage=image;  fCommandId=null;}  }
class C{  private Place findPlace(final Long id){  return ofy().load().type(Place.class).id(id).now();}  }
class C{  public JsonUUIDAdapter(boolean withDashes){  this.withDashes=withDashes;}  }
class C{  public Builder checkPointAfter(Duration checkPointAfter){  this.checkPointAfter=checkPointAfter;  return this;}  }
class C{  public DTMAxisIterator cloneIterator(){  try {    final DTMAxisIteratorBase clone=(DTMAxisIteratorBase)super.clone();    clone._isRestartable=false;    return clone;  } catch (  CloneNotSupportedException e) {    throw new org.apache.xml.utils.WrappedRuntimeException(e);  }}  }
class C{  public static boolean isPrimitiveType(int type){  return type != _OBJECT && type != _STRING;}  }
class C{  @PreUpdate public void preUpdate(final Object entity){  notifyAll(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.258 -0400",hash_original_method="A4A8433F0A809145998714F482BFD1A6",hash_generated_method="CA7133976EF51E59C65592836B55FE6C") public StringEncoderComparator(StringEncoder stringEncoder){  this.stringEncoder=stringEncoder;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TEMPLATE_LITERAL;}  }
class C{  public Vertex checkDuplicateOrOffensiveResponse(Vertex response,Vertex sentence,Vertex conversation,Vertex input,Map<Vertex,Vertex> variables,Network network,boolean allowMatch,boolean checkUnderstanding){  Vertex self=network.createVertex(Primitive.SELF);  Vertex previousOutput=getLastInputInConversation(conversation,self,1);  Vertex previousResponse=null;  if (previousOutput != null) {    previousResponse=previousOutput.mostConscious(Primitive.INPUT);  }  Vertex newResponse=checkOnRepeat(response,conversation,0);  if (newResponse == null) {    newResponse=response;  }  boolean offensive=newResponse.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE);  boolean repeat=newResponse.hasRelationship(Primitive.REQUIRE,Primitive.NOREPEAT) && conversation.hasRelationship(Primitive.SENTENCE,newResponse);  if ((previousResponse == newResponse) || offensive || repeat) {    if (offensive) {      log("Response was offensive",Level.FINE,response);    } else     if (repeat) {      log("Response was repeat",Level.FINE,response);    } else {      log("Response was same as previous",Level.FINE,previousResponse);    }    newResponse=null;    if (checkUnderstanding) {      newResponse=processUnderstanding(input,sentence,this.conversationMatchPercentage,variables,network);    }    if (newResponse == null) {      Relationship nextBest=bestResponse(this.conversationMatchPercentage,input,sentence,null,response,network);      if (nextBest != null) {        newResponse=nextBest.getTarget();      }      if ((newResponse == null) && allowMatch) {        Relationship relationship=matchPattern(sentence,response,input,variables,network,this.conversationMatchPercentage);        if (relationship != null) {          newResponse=relationship.getTarget();        } else {          relationship=findResponseMatch(sentence,response,input,network,this.conversationMatchPercentage);          if (relationship != null) {            newResponse=relationship.getTarget();          }        }      }    }    if (newResponse == null) {      if (offensive) {        log("Response was offensive, no other response available",Level.FINE,response);        return null;      }      log("Response is duplicate, but no other response available",Level.FINE,previousResponse);      newResponse=response;    } else {      if (newResponse.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {        log("New response was also offensive",Level.FINE,response);        return null;      }      Vertex onRepeat=checkOnRepeat(newResponse,conversation,0);      if (onRepeat != null) {        newResponse=onRepeat;      }      log("Response was duplicate, found another response",Level.FINE,newResponse);    }  }  return newResponse;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean xslAttribute){  boolean was_added;  int index;  if (uri == null || localName == null || uri.length() == 0)   index=m_attributes.getIndex(rawName); else {    index=m_attributes.getIndex(uri,localName);  }  if (index >= 0) {    String old_value=null;    if (m_tracer != null) {      old_value=m_attributes.getValue(index);      if (value.equals(old_value))       old_value=null;    }    m_attributes.setValue(index,value);    was_added=false;    if (old_value != null)     firePseudoAttributes();  } else {    if (xslAttribute) {      final int colonIndex=rawName.indexOf(':');      if (colonIndex > 0) {        String prefix=rawName.substring(0,colonIndex);        NamespaceMappings.MappingRecord existing_mapping=m_prefixMap.getMappingFromPrefix(prefix);        if (existing_mapping != null && existing_mapping.m_declarationDepth == m_elemContext.m_currentElemDepth && !existing_mapping.m_uri.equals(uri)) {          prefix=m_prefixMap.lookupPrefix(uri);          if (prefix == null) {            prefix=m_prefixMap.generateNextPrefix();          }          rawName=prefix + ':' + localName;        }      }      try {        String prefixUsed=ensureAttributesNamespaceIsDeclared(uri,localName,rawName);      } catch (      SAXException e) {        e.printStackTrace();      }    }    m_attributes.addAttribute(uri,localName,rawName,type,value);    was_added=true;    if (m_tracer != null)     firePseudoAttributes();  }  return was_added;}  }
class C{  public int hashCode(){  return value == null ? -1 : value.hashCode();}  }
class C{  public void dup(){  RatPoly top=polys.head;  push(top.mul(new RatPoly(1,0)));}  }
class C{  @Override public String toString(){  String str=this.attribute.getMapping().mapIndex(value);  return "(" + attribute.getName() + "="+ str+ ")";}  }
class C{  @Override public void IF_ICMPGT(String className,String methName,int branchIndex,int left,int right){  IntegerValue rightBv=env.topFrame().operandStack.popBv32();  IntegerValue leftBv=env.topFrame().operandStack.popBv32();  env.topFrame().operandStack.pushBv32(rightBv);  env.topFrame().operandStack.pushBv32(leftBv);  IF_ICMPLT(className,methName,branchIndex,right,left);}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  return checkValue(env,ctx,vset,exp);}  }
class C{  @Override public void mousePressed(MouseEvent evt){  super.mousePressed(evt);  getView().clearSelection();  Point2D.Double startPoint=viewToDrawing(anchor);  Figure startFigure=getDrawing().findFigure(startPoint);  startConnector=(startFigure == null) ? null : startFigure.findConnector(startPoint,prototype);  if (startConnector != null && canConnect(prototype,startConnector)) {    Point2D.Double anchor=startConnector.getAnchor();    createdFigure=createFigure();    createdFigure.setStartPoint(anchor);    createdFigure.setEndPoint(anchor);    getDrawing().add(createdFigure);    Rectangle r=new Rectangle(getView().drawingToView(anchor));    r.grow(ANCHOR_WIDTH,ANCHOR_WIDTH);    fireAreaInvalidated(r);  } else {    startConnector=null;    createdFigure=null;  }  endConnector=null;}  }
class C{  CramMD5Server(String protocol,String serverFqdn,Map<String,?> props,CallbackHandler cbh) throws SaslException {  if (serverFqdn == null) {    throw new SaslException("CRAM-MD5: fully qualified server name must be specified");  }  fqdn=serverFqdn;  this.cbh=cbh;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  buildings=new ArrayList();}  }
class C{  public CoalSource(final String itemName){  this.itemName=itemName;  setRPClass("useable_entity");  put("type","useable_entity");  put("class","source");  put("name","coal_source");  put("state",0);  setDescription("You see something black on the rock.");  handleRespawn();}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public RefExecutor of(final Object e){  return new RefExecutor(e);}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override public void writeStartDocument(String encoding,String version) throws XMLStreamException {  log.log(Level.FINE,"writeStartDocument({0}, {1})",new Object[]{encoding,version});  if (encoding == null) {    encoding=this.encoding;  }  doc=new WbXmlDocument(WbXmlVersion.VERSION_1_3,IanaCharset.getIanaCharset(encoding));  if (def != null) {    log.log(Level.FINE,"Setting definition {0}",def.getName());    doc.setDefinition(def);  }}  }
class C{  protected void deleteExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=null;  FichasForm fichasForm=(FichasForm)form;  if ((errors=validateFormParaEliminarFicha(fichasForm)) == null) {    String idFichasABorrar[]=fichasForm.getFichasABorrar();    GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);    try {      descripcionService.deleteFichas(idFichasABorrar);    } catch (    ArchivoModelException e) {      errors=new ActionErrors();      errors.add(ErrorKeys.ERROR_NO_REMOVE_FICHA,new ActionError(ErrorKeys.ERROR_NO_REMOVE_FICHA));      ErrorsTag.saveErrors(request,errors);      getInvocationStack(request).getLastClientInvocation().addParameters(fichasForm.getMap());    }  } else {    ErrorsTag.saveErrors(request,errors);  }  setReturnActionFordward(request,mapping.findForward("actionList"));}  }
class C{  private void commitChanges(){  networkPropertiesPanel.commitChanges();  quickConnectPanel.commitChanges();}  }
class C{  public static void showMaximized(Frame frame){  frame.pack();  frame.setExtendedState(Frame.MAXIMIZED_BOTH);  frame.setVisible(true);  frame.toFront();}  }
class C{  public void flush(){  for (  OutputStream out : writercache.asMap().values()) {    try {      out.flush();    } catch (    IOException e) {    }  }}  }
class C{  public StorageUnitStatusEntity createStorageUnitStatusEntity(String statusCode,String description,Boolean available){  StorageUnitStatusEntity storageUnitStatusEntity=new StorageUnitStatusEntity();  storageUnitStatusEntity.setCode(statusCode);  storageUnitStatusEntity.setDescription(description);  storageUnitStatusEntity.setAvailable(available);  return storageUnitStatusDao.saveAndRefresh(storageUnitStatusEntity);}  }
class C{  public RetentionJob(){  httpClient=HttpClients.createDefault();}  }
class C{  private static void sortCellsByPlatform(Collection<Cell> cells,ContainerWrapper parent){  String order=PlatformDefaults.getButtonOrder();  String orderLo=order.toLowerCase();  int unrelSize=PlatformDefaults.convertToPixels(1,"u",true,0,parent,null);  if (unrelSize == UnitConverter.UNABLE)   throw new IllegalArgumentException("'unrelated' not recognized by PlatformDefaults!");  int[] gapUnrel=new int[]{unrelSize,unrelSize,LayoutUtil.NOT_SET};  int[] flGap=new int[]{0,0,LayoutUtil.NOT_SET};  for (  Cell cell : cells) {    if (cell.hasTagged == false)     continue;    CompWrap prevCW=null;    boolean nextUnrel=false;    boolean nextPush=false;    ArrayList<CompWrap> sortedList=new ArrayList<CompWrap>(cell.compWraps.size());    for (int i=0, iSz=orderLo.length(); i < iSz; i++) {      char c=orderLo.charAt(i);      if (c == '+' || c == '_') {        nextUnrel=true;        if (c == '+')         nextPush=true;      } else {        String tag=PlatformDefaults.getTagForChar(c);        if (tag != null) {          for (int j=0, jSz=cell.compWraps.size(); j < jSz; j++) {            CompWrap cw=cell.compWraps.get(j);            if (tag.equals(cw.cc.getTag())) {              if (Character.isUpperCase(order.charAt(i)))               cw.adjustMinHorSizeUp((int)PlatformDefaults.getMinimumButtonWidthIncludingPadding(0,parent,cw.comp));              sortedList.add(cw);              if (nextUnrel) {                (prevCW != null ? prevCW : cw).mergeGapSizes(gapUnrel,cell.flowx,prevCW == null);                if (nextPush) {                  cw.forcedPushGaps=1;                  nextUnrel=false;                  nextPush=false;                }              }              if (c == 'u')               nextUnrel=true;              prevCW=cw;            }          }        }      }    }    if (sortedList.size() > 0) {      CompWrap cw=sortedList.get(sortedList.size() - 1);      if (nextUnrel) {        cw.mergeGapSizes(gapUnrel,cell.flowx,false);        if (nextPush)         cw.forcedPushGaps|=2;      }      if (cw.cc.getHorizontal().getGapAfter() == null)       cw.setGaps(flGap,3);      cw=sortedList.get(0);      if (cw.cc.getHorizontal().getGapBefore() == null)       cw.setGaps(flGap,1);    }    if (cell.compWraps.size() == sortedList.size()) {      cell.compWraps.clear();    } else {      cell.compWraps.removeAll(sortedList);    }    cell.compWraps.addAll(sortedList);  }}  }
class C{  public void cancel(Account account,OCFile file){  UploadFileOperation upload;synchronized (mPendingUploads) {    upload=mPendingUploads.remove(buildRemoteName(account,file));  }  if (upload != null) {    upload.cancel();  }}  }
class C{  protected static String createCounterName(String switchID,int portID,String counterName,String subCategory,NetworkLayer layer){  String fullCounterName="";  String groupCounterName="";  if (portID < 0) {    groupCounterName=switchID + TitleDelimitor + counterName;    fullCounterName=groupCounterName + TitleDelimitor + subCategory;  } else {    groupCounterName=switchID + TitleDelimitor + portID+ TitleDelimitor+ counterName;    fullCounterName=groupCounterName + TitleDelimitor + subCategory;  }  Map<String,List<String>> counterToCategories;  if (layeredCategories.containsKey(layer)) {    counterToCategories=layeredCategories.get(layer);  } else {    counterToCategories=new ConcurrentHashMap<String,List<String>>();    layeredCategories.put(layer,counterToCategories);  }  List<String> categories;  if (counterToCategories.containsKey(groupCounterName)) {    categories=counterToCategories.get(groupCounterName);  } else {    categories=new ArrayList<String>();    counterToCategories.put(groupCounterName,categories);  }  if (!categories.contains(subCategory)) {    categories.add(subCategory);  }  return fullCounterName;}  }
class C{  public void mouseClicked(int x,int y,int button){  if (currentPageLeft != null)   currentPageLeft.mouseClicked(x,y,button);  if (currentPageRight != null)   currentPageRight.mouseClicked(x,y,button);}  }
class C{  public Collective(String name,Observer o,Contributor cb,Controller c){  if (o == null)   throw new IllegalArgumentException("null observer");  if (name == null)   throw new IllegalArgumentException("null name");  this.name=name;  observer=o;  controller=c;  contributor=cb;}  }
class C{  public CharSeq replaceAll(String regex,CharSeq replacement){  return this.replaceAll(regex,replacement.str);}  }
class C{  private void closeQuietly(Connection c,Statement s,ResultSet rs){  try {    if (rs != null) {      rs.close();    }    if (s != null) {      s.close();    }    if (c != null) {      c.close();    }  } catch (  SQLException e) {  }}  }
class C{  public NodeSet(NodeSet nodelist){  this(32);  addNodes((NodeIterator)nodelist);}  }
class C{  public static String gzFileToString(final File file) throws IOException {  try (Reader reader=new InputStreamReader(GzipUtils.createGzipInputStream(new FileInputStream(file)))){    return FileHelper.readerToString(reader);  } }  }
class C{  public SVGOMFilterElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static R1Interval fullLat(){  return new R1Interval(-S2.M_PI_2,S2.M_PI_2);}  }
class C{  public PBKDF2Params(byte[] salt,int iterationCount){  this.octStr=new DEROctetString(salt);  this.iterationCount=new ASN1Integer(iterationCount);}  }
class C{  public CachedRowsetTest(String name){  super(name);}  }
class C{  public boolean isHotGrowable(){  return hotGrowable;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean hasCounters(){  return this.counters != null;}  }
class C{  @Override public SelectResults filterEvaluate(ExecutionContext context,SelectResults intermediateResults,boolean completeExpansionNeeded,@Retained CompiledValue iterOperands,RuntimeIterator[] indpndntItrs,boolean isIntersection,boolean conditioningNeeded,boolean evaluateProjection) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  if (!isDependentOnCurrentScope(context))   return super.filterEvaluate(context,intermediateResults);  IndexInfo[] idxInfo=getIndexInfo(context);  Support.Assert(idxInfo != null,"a comparison that is dependent, not indexed, and filter evaluated is not possible");  if (idxInfo.length == 1) {    return singleBaseCollectionFilterEvaluate(context,intermediateResults,completeExpansionNeeded,iterOperands,idxInfo[0],indpndntItrs,isIntersection,conditioningNeeded,evaluateProjection);  } else {    Support.Assert(idxInfo.length == 2,"A Composite CompiledComparison which is filter evaluatable needs to have two indexes");    return doubleBaseCollectionFilterEvaluate(context,intermediateResults,completeExpansionNeeded,iterOperands,idxInfo,indpndntItrs);  }}  }
class C{  private void closeDatabaseNow(String dbname){  DBRunner r=dbrmap.get(dbname);  if (r != null) {    SQLiteAndroidDatabase mydb=r.mydb;    if (mydb != null)     mydb.closeDatabaseNow();  }}  }
class C{  public PhoneticFilter(TokenStream in,Encoder encoder,boolean inject){  super(in);  this.encoder=encoder;  this.inject=inject;}  }
class C{  public static Annotation findFirstQualifierInAnnotations(Class clazz){  return findFirstQualifierInAnnotations(clazz.getAnnotations());}  }
class C{  @Override public Lock tryLock(){  File lockDir=getLockDir();  if (lockDir.exists()) {    removeInvalidLock(lockDir);  }  if (!lockDir.mkdir()) {    return null;  }  Lock lock=null;  try {    File infoFile=new File(lockDir,INFO_FILE_NAME);    File lockedFile=new File(lockDir,LOCK_FILE_NAME);    RandomAccessFile raf=new RandomAccessFile(lockedFile,"rw");    try {      FileLock fileLock=raf.getChannel().lock();      lock=createLock(raf,fileLock);      sign(infoFile);    } catch (    IOException e) {      if (lock != null) {        lock.release();      } else {        raf.close();      }      throw e;    }  } catch (  IOException e) {    logger.error(e.toString(),e);  }  return lock;}  }
class C{  public void addImportFormat(ImportFormat importFormat){  getImportFormats().add(importFormat);}  }
class C{  protected AbstractResourceDescription(){  super();}  }
class C{  public void flushData(){  if (isClosed()) {    if (_pendingFlushEntries.size() > 0) {      System.out.println("PENDING_FLUSH");    }    return;  }  WriteStream out=_out;  if (out != null) {    try {      out.flush();    } catch (    Exception e) {      log.log(Level.FINER,e.toString(),e);    }  }  completePendingFlush();}  }
class C{  void attribAnnotationTypes(List<JCAnnotation> annotations,Env<AttrContext> env){  for (List<JCAnnotation> al=annotations; al.nonEmpty(); al=al.tail) {    JCAnnotation a=al.head;    attribType(a.annotationType,env);  }}  }
class C{  public void testRequest2(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  s1.request=false;  p.submit(1);  p.submit(2);  p.close();  s2.awaitComplete();  assertEquals(2,s2.nexts);  assertEquals(1,s2.completes);  s1.awaitNext(1);  assertEquals(1,s1.nexts);}  }
class C{  public Population normalize(Population population){  Population result=new Population();  normalize(population,result);  return result;}  }
class C{  public static FloatBuffer copyOf(FloatBuffer buffer,int newSize){  if (newSize < 0 || newSize < buffer.remaining()) {    String message=Logging.getMessage("generic.SizeOutOfRange",newSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  FloatBuffer newBuffer=newFloatBuffer(newSize,buffer.isDirect());  int pos=buffer.position();  try {    newBuffer.put(buffer);    newBuffer.rewind();  }  finally {    buffer.position(pos);  }  return newBuffer;}  }
class C{  public ComponentInputMap(JComponent component){  this.component=component;  if (component == null) {    throw new IllegalArgumentException("ComponentInputMaps must be associated with a non-null JComponent");  }}  }
class C{  public IsFoodAhead(){  super(Boolean.class);}  }
class C{  @Override protected String doIt() throws Exception {  if (migrationFrom == null || migrationFrom.is_new() || migrationTo == null || migrationTo.is_new() || migrationFrom.getAD_Migration_ID() == migrationTo.getAD_Migration_ID()) {    addLog("Two different existing migrations required for merge");    return "@Error@";  }  migrationTo.mergeMigration(migrationFrom);  return "@OK@";}  }
class C{  private void paintView(Graphics g){  Rectangle clip=g.getClipBounds();  JComponent view=(JComponent)getView();  if (view.getWidth() >= getWidth()) {    int x=view.getX();    int y=view.getY();    g.translate(x,y);    g.setClip(clip.x - x,clip.y - y,clip.width,clip.height);    view.paintForceDoubleBuffered(g);    g.translate(-x,-y);    g.setClip(clip.x,clip.y,clip.width,clip.height);  } else {    try {      inBlitPaint=true;      paintForceDoubleBuffered(g);    }  finally {      inBlitPaint=false;    }  }}  }
class C{  private void onDataLoaded(String content){  ((TextView)findViewById(R.id.content_text)).setText(content);  mStatefulLayout.showContent();}  }
class C{  private Cipher createCipher(int mode,AlgorithmParameters params) throws Exception {  Cipher ci;  if (Cipher.ENCRYPT_MODE == mode) {    ci=Cipher.getInstance(transformation,provider);    if (params != null) {      ci.init(Cipher.ENCRYPT_MODE,key,params);    } else {      ci.init(Cipher.ENCRYPT_MODE,key);    }  } else {    ci=Cipher.getInstance(transformation,provider);    ci.init(Cipher.DECRYPT_MODE,key,params);  }  return ci;}  }
class C{  public void onTimeout(InetSocketAddress addr){  List<KBucketEntry> entriesRef=entries;  for (int i=0, n=entriesRef.size(); i < n; i++) {    KBucketEntry e=entriesRef.get(i);    if (e.getAddress().equals(addr)) {      e.signalRequestTimeout();      removeEntryIfBad(e,false);      return;    }  }  for (int i=0, n=replacementBucket.length(); i < n; i++) {    KBucketEntry e=replacementBucket.get(i);    if (e != null && e.getAddress().equals(addr)) {      e.signalRequestTimeout();      return;    }  }  return;}  }
class C{  public T caseCheck(Check object){  return null;}  }
class C{  public static Process startProcess(String name,ProcessBuilder processBuilder) throws IOException {  return startProcess(name,processBuilder,null);}  }
class C{  private void resolveCredentials(URL url){  if (defaultUsername != null && defaultUsername.length() > 0) {    int port=url.getPort();    if (port == -1) {      if ("https".equals(url.getProtocol()))       port=443; else       port=80;    }    AuthScope scope=new AuthScope(url.getHost(),port);    if (client.getState().getCredentials(scope) != null) {      if (LOG.isTraceEnabled())       LOG.trace("Pre-configured credentials with scope - host: " + url.getHost() + "; port: "+ port+ "; found for url: "+ url);      return;    }    if (LOG.isTraceEnabled())     LOG.trace("Pre-configured credentials with scope -  host: " + url.getHost() + "; port: "+ port+ "; not found for url: "+ url);    AuthScope serverAuthScope=getAuthScope(url.getHost(),port,defaultRealm,defaultScheme);    NTCredentials serverCredentials=new NTCredentials(defaultUsername,defaultPassword,agentHost,defaultRealm);    client.getState().setCredentials(serverAuthScope,serverCredentials);  }}  }
class C{  public float length(){  return Vector2.length(this);}  }
class C{  static Cancelable doLoadFile(final String url,final ImageOptions options,final Callback.CacheCallback<File> callback){  if (TextUtils.isEmpty(url)) {    postArgsException(null,options,"url is null",callback);    return null;  }  RequestParams params=createRequestParams(url,options);  return x.http().get(params,callback);}  }
class C{  public synchronized void terminate(){  isTerminated=true;  super.notify();  stopTimer();}  }
class C{  public void installListeners(JSeparator c){  c.addPropertyChangeListener(this);}  }
class C{  public synchronized void notifyZoomResetListeners(){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomReset();  }}  }
class C{  public PrefixCoderTransformationStrategy(final PrefixCoder coder,final Char2IntOpenHashMap char2symbol,final boolean prefixFree){  this(coder.codeWords(),char2symbol,prefixFree);}  }
class C{  public void addLiteralResultAttribute(String att){  if (null == m_xslAttr)   m_xslAttr=new ArrayList();  m_xslAttr.add(att);}  }
class C{  public final boolean isSecure(){  return _isSecure;}  }
class C{  public VariablePath protocolConfigurationPath(){  return protocolConfigurationPath;}  }
class C{  protected void processTuple(T tuple){  sendMessage(tuple);}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanOperationInfo))   return false;  MBeanOperationInfo p=(MBeanOperationInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getReturnType(),getReturnType()) && Objects.equals(p.getDescription(),getDescription())&& p.getImpact() == getImpact() && Arrays.equals(p.fastGetSignature(),fastGetSignature()) && Objects.equals(p.getDescriptor(),getDescriptor()));}  }
class C{  public static int bytesToInt(final byte[] bytes){  final ByteBuffer buffer=ByteBuffer.allocate(4);  buffer.put(bytes,0,4);  buffer.flip();  return buffer.getInt();}  }
class C{  public static boolean isLocalResourceUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_RESOURCE_SCHEME.equals(scheme);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.393 -0400",hash_original_method="75E6AD44795DF0269F8B428E9F990646",hash_generated_method="2C0F48E3A9468FE98EC5BC606B4B65E2") private Object readResolve(){  return forName(name);}  }
class C{  public static String toStringLow(long[] v){  if (v == null) {    return "null";  }  final int mag=magnitude(v);  if (mag == 0) {    return "0";  }  char[] digits=new char[mag];  int pos=0;  outer:   for (int w=0; w < v.length; w++) {    long f=1L;    for (int i=0; i < Long.SIZE; i++) {      digits[pos]=((v[w] & f) == 0) ? '0' : '1';      f<<=1;      ++pos;      if (pos >= mag) {        break outer;      }    }  }  for (; pos < mag; ++pos) {    digits[pos]='0';  }  return new String(digits);}  }
class C{  public JSONArray put(int value){  put(new Integer(value));  return this;}  }
class C{  public DLSequence(ASN1Encodable[] array){  super(array);}  }
class C{  @Override public boolean contains(Point2D.Double p){  Rectangle2D.Double r=(Rectangle2D.Double)rectangle.clone();  double grow=AttributeKeys.getPerpendicularHitGrowth(this) + 1d;  Geom.grow(r,grow,grow);  return r.contains(p);}  }
class C{  public void deleteProperty() throws IOException {  writeCode(DEL_VAR);}  }
class C{  public SnmpString(){  value=new byte[0];}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarTrackBorder(context,g,x,y,w,h);}  }
class C{  public String toMatrixString() throws Exception {  return m_delegate.toMatrixString();}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  public void drawSvgAfter(final Canvas canvas,final int width,final int height){  final float strokeWidth=mSourcePaint.getStrokeWidth();  rescaleCanvas(width,height,strokeWidth,canvas);}  }
class C{  public boolean offer(E o){  if (o == null) {    throw new NullPointerException("o == null");  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  private void unshareMain(){  int[] old=_mainHash;  int len=_mainHash.length;  _mainHash=new int[len];  System.arraycopy(old,0,_mainHash,0,len);  _mainHashShared=false;}  }
class C{  @SuppressWarnings("unused") public ApplicationPassivationThread(Application application,Logger logger){  this(application,null,logger);}  }
class C{  public boolean isValid(String email){  if (email == null) {    return false;  }  if (email.endsWith(".")) {    return false;  }  Matcher emailMatcher=EMAIL_PATTERN.matcher(email);  if (!emailMatcher.matches()) {    return false;  }  if (!isValidUser(emailMatcher.group(1))) {    return false;  }  if (!isValidDomain(emailMatcher.group(2))) {    return false;  }  return true;}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public UsageTrackingQueryCachingPolicy(){  this(256);}  }
class C{  protected void removeAllArrows(boolean isForcing){  if (decorators == null) {    return;  }  for (  SquareArrowDecorator decorator : decorators) {    decorator.clear(isForcing);  }}  }
class C{  public void pauseTrigger(TriggerKey triggerKey) throws SchedulerException {  sched.pauseTrigger(triggerKey);}  }
class C{  public static void fill(float[] a,float val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  private void drawContinuousDefault(UncertainObject uo,int col,double size,Random rand){  for (int i=0; i < samples; i++) {    double[] v=proj.fastProjectDataToRenderSpace(uo.drawSample(rand));    Element dot=svgp.svgCircle(v[0],v[1],size);    SVGUtil.addCSSClass(dot,CSS_CLASS);    SVGUtil.setAtt(dot,SVGConstants.SVG_STYLE_ATTRIBUTE,FILL + SVGUtil.colorToString(col));    layer.appendChild(dot);  }}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new int[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  protected void waitForMessageState(NAKACK2 nakack,InternalDistributedMember sender,Long seqno) throws InterruptedException {  long timeout=services.getConfig().getDistributionConfig().getAckWaitThreshold() * 1000L;  long startTime=System.currentTimeMillis();  long warnTime=startTime + timeout;  long quitTime=warnTime + timeout - 1000L;  boolean warned=false;  JGAddress jgSender=new JGAddress(sender);  for (; ; ) {    Digest digest=nakack.getDigest(jgSender);    if (digest == null) {      return;    }    String received="none";    long[] senderSeqnos=digest.get(jgSender);    if (senderSeqnos == null) {      break;    }    if (logger.isDebugEnabled()) {      logger.debug("waiting for multicast messages from {}.  Current seqno={} and expected seqno={}",sender,senderSeqnos[0],seqno);    }    if (senderSeqnos[0] >= seqno.longValue()) {      break;    }    long now=System.currentTimeMillis();    if (!warned && now >= warnTime) {      warned=true;      received=String.valueOf(senderSeqnos[0]);      logger.warn("{} seconds have elapsed while waiting for multicast messages from {}.  Received {} but expecting at least {}.",Long.toString((warnTime - startTime) / 1000L),sender,received,seqno);    }    if (now >= quitTime) {      throw new GemFireIOException("Multicast operations from " + sender + " did not distribute within "+ (now - startTime)+ " milliseconds");    }    Thread.sleep(50);  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.196 -0500",hash_original_method="184F6EBE579A57B9FFCBCC2BBB07DD57",hash_generated_method="6BFEB59CA3578424BEA44BFF5CA3D61D") public String[] filterMimeTypes(String mimeType){  ArrayList<String> array=null;  for (int i=0; i < mMimeTypes.length; i++) {    if (compareMimeTypes(mMimeTypes[i],mimeType)) {      if (array == null) {        array=new ArrayList<String>();      }      array.add(mMimeTypes[i]);    }  }  if (array == null) {    return null;  }  String[] rawArray=new String[array.size()];  array.toArray(rawArray);  return rawArray;}  }
class C{  public boolean isEven(){  return (count % 2) == 0;}  }
class C{  protected double value(Tuple2od<I> iv,Stats relStats,Object2DoubleMap<I> novMap,Stats novStats){  return (1 - lambda) * norm(iv.v2,relStats) + lambda * norm(novMap.getDouble(iv.v1),novStats);}  }
class C{  private void addMultimediaStreaming(MultimediaStreamingSessionImpl multimediaStreaming){  if (sLogger.isActivated()) {    sLogger.debug("Add a MultimediaStreaming in the list (size=" + mMultimediaMessagingCache.size() + ")");  }  mMultimediaStreamingCache.put(multimediaStreaming.getSessionId(),multimediaStreaming);}  }
class C{  private static void log(String msg){  System.out.println(msg);  logger.info(msg);}  }
class C{  public void addPoint(float lt1,float ln1,int radius,LinkProperties properties) throws IOException {  LinkPoint.write(lt1,ln1,radius,properties,link.dos);}  }
class C{  private void remapContinuousReadingMenu(){  final Editor editor=mSharedPreferences.edit();  final String targetValue="READ_ALL_BREAKOUT";  final String replaceValue="LOCAL_BREAKOUT";  final int[] gestureKeys={R.string.pref_shortcut_down_and_left_key,R.string.pref_shortcut_down_and_right_key,R.string.pref_shortcut_left_and_down_key,R.string.pref_shortcut_left_and_up_key,R.string.pref_shortcut_right_and_down_key,R.string.pref_shortcut_right_and_up_key,R.string.pref_shortcut_up_and_left_key,R.string.pref_shortcut_up_and_right_key};  for (  int key : gestureKeys) {    final String prefKey=mService.getString(key);    if (mSharedPreferences.getString(prefKey,"").equals(targetValue)) {      editor.putString(prefKey,replaceValue);    }  }  editor.apply();}  }
class C{  public Builder deleteLocal(){  deleteFields.add("locale");  return this;}  }
class C{  public static void main(String[] args){  ArrayList<Integer> list1=new ArrayList<Integer>();  ArrayList<Integer> list2=new ArrayList<Integer>();  System.out.print("Enter five integers for list1: ");  fill(list1);  System.out.print("Enter five integers for list2: ");  fill(list2);  ArrayList<Integer> list3=union(list1,list2);  System.out.print("The combined list is: ");  for (int i=0; i < list3.size(); i++) {    System.out.print(list3.get(i) + " ");  }  System.out.println();}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  mStep--;  canvas.drawCircle(x + SHAPE_WIDTH - mStep,y,mStep,paint);}  }
class C{  public boolean needSignatureFileBytes(){  return sfBytes == null;}  }
class C{  public ChangeableHighlightPainter(){  this(null);}  }
class C{  public static Vector3f cartesianZToSpherical(Vector3f cartCoords,Vector3f store){  if (cartCoords.x == 0) {    cartCoords.x=FastMath.FLT_EPSILON;  }  store.x=FastMath.sqrt((cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z));  store.z=FastMath.atan(cartCoords.z / cartCoords.x);  if (cartCoords.x < 0) {    store.z+=FastMath.PI;  }  store.y=FastMath.asin(cartCoords.y / store.x);  return store;}  }
class C{  @Override protected void sendFunctionGroup1(){  int new_fn=((getF0() ? CbusConstants.CBUS_F0 : 0) | (getF1() ? CbusConstants.CBUS_F1 : 0) | (getF2() ? CbusConstants.CBUS_F2 : 0)| (getF3() ? CbusConstants.CBUS_F3 : 0)| (getF4() ? CbusConstants.CBUS_F4 : 0));  cs.setFunctions(1,_handle,new_fn);}  }
class C{  @Override public void accept(T model){  requireNonNull(model).getMethods().forEach(null);}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  public void receiveResultqueryUniqueIdentifiersForLuns(com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForLunsResponse result){}  }
class C{  @SuppressWarnings("unchecked") public static org.oscm.internal.vo.VOTriggerProcessParameter convertToUp(org.oscm.vo.VOTriggerProcessParameter oldVO) throws OperationNotPermittedException {  if (oldVO == null) {    return null;  }  ConversionStrategy<String,Object> strategy=TPPConversionStrategyFactory.getStrategy(oldVO.getType());  org.oscm.internal.vo.VOTriggerProcessParameter newVO=new org.oscm.internal.vo.VOTriggerProcessParameter();  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.internal.types.enumtypes.TriggerProcessParameterType.class));  newVO.setValue(strategy.convert(oldVO.getValue()));  newVO.setTriggerProcessKey(oldVO.getTriggerProcessKey());  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  return newVO;}  }
class C{  public static long toLongPow2(double d,int n){  long bits=Double.doubleToLongBits(d);  boolean isNegative=(bits >> 63) != 0;  int exp=((int)(bits >> 52)) & 0x7FF;  long m=bits & 0x000fffffffffffffL;  if (exp == 0x7FF)   throw new ArithmeticException("Cannot convert to long (Infinity or NaN)");  if (exp == 0) {    if (m == 0)     return 0L;    return toLongPow2(d * 18014398509481984L,n - 54);  }  m|=0x0010000000000000L;  long shift=exp - 1023L - 52 + n;  if (shift <= -64)   return 0L;  if (shift >= 11)   throw new ArithmeticException("Cannot convert to long (overflow)");  m=(shift >= 0) ? m << shift : (m >> -shift) + ((m >> -(shift + 1)) & 1);  return isNegative ? -m : m;}  }
class C{  public double pdf(int k){  return Math.exp(k * Math.log(this.mean) - Arithmetic.logFactorial(k) - this.mean);}  }
class C{  public static int endsWithOne(String src,String[] dest){  for (int i=0; i < dest.length; i++) {    String m=dest[i];    if (m == null) {      continue;    }    if (src.endsWith(m)) {      return i;    }  }  return -1;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Node(final Node left,final Node right,final LongArrayBitVector path){  this.left=left;  this.right=right;  this.path=path;}  }
class C{  public static BigInteger calculateA(BigInteger p,BigInteger q,BigInteger gA,BigInteger x2s){  return gA.modPow(x2s,p);}  }
class C{  private void onMissingDisplayNamesComplete(StringBuffer debugMessage){  if (debugMessage != null) {    Log.w(Global.LOG_CONTEXT,mDebugPrefix + debugMessage);  }}  }
class C{  public void addPoint(Point2D point){  points.add(point);}  }
class C{  public void removeEventListener3(IMultimediaStreamingSessionListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Remove an event listener");  }  try {synchronized (mLock) {      mMultimediaStreamingSessionEventBroadcaster.removeMultimediaStreamingEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private int awaitDone(boolean timed,long nanos) throws InterruptedException {  final long deadline=timed ? System.nanoTime() + nanos : 0L;  WaitNode q=null;  boolean queued=false;  for (; ; ) {    if (Thread.interrupted()) {      removeWaiter(q);      throw new InterruptedException();    }    int s=state;    if (s > COMPLETING) {      if (q != null)       q.thread=null;      return s;    } else     if (s == COMPLETING)     Thread.yield(); else     if (q == null)     q=new WaitNode(); else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q); else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos <= 0L) {        removeWaiter(q);        return state;      }      LockSupport.parkNanos(this,nanos);    } else     LockSupport.park(this);  }}  }
class C{  private void initCurrentSection(){  currentSection=new Section(NO_NS,null);  currentSection.addChildMode(new ModeUsage(startMode,startMode),null);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){  Log.w(LOG_TAG,"onSuccess(int, Header[], JSONArray) was not overriden, but callback was received");}  }
class C{  @Deprecated public static TaskEntity convertBackEndToMiddleEnd(TaskService.State taskState){  TaskEntity taskEntity=new TaskEntity();  taskEntity.setId(ServiceUtils.getIDFromDocumentSelfLink(taskState.documentSelfLink));  taskEntity.setEntityId(taskState.entityId);  taskEntity.setEntityKind(taskState.entityKind);  taskEntity.setQueuedTime(taskState.queuedTime);  taskEntity.setStartedTime(taskState.startedTime);  taskEntity.setEndTime(taskState.endTime);  taskEntity.setProjectId(taskState.projectId);  taskEntity.setOperation(Operation.parseOperation(taskState.operation));  taskEntity.setResourceProperties(taskState.resourceProperties);switch (taskState.state) {case COMPLETED:    taskEntity.setState(TaskEntity.State.COMPLETED);  break;case STARTED:taskEntity.setState(TaskEntity.State.STARTED);break;case QUEUED:taskEntity.setState(TaskEntity.State.QUEUED);break;case ERROR:taskEntity.setState(TaskEntity.State.ERROR);break;default :String errorMessage=String.format("Unknown task state {%s} found for task link {%s}",taskState.state,taskState.documentSelfLink);throw new IllegalStateException(errorMessage);}taskEntity.setSteps(new ArrayList<>());if (taskState.steps != null) {for (TaskService.State.Step step : taskState.steps) {StepEntity stepEntity=StepUtils.convertBackEndToMiddleEnd(taskEntity,step);taskEntity.addStep(stepEntity);}}return taskEntity;}  }
class C{  public void load(GeneralNames generalNames){  GeneralName[] generalNamesArray=generalNames.getNames();  data=new ArrayList<GeneralName>(Arrays.asList(generalNamesArray));  Collections.sort(data,new GeneralNameComparator());  fireTableDataChanged();}  }
class C{  public void registerExtension(String namespace){  if (namespaceIndex(namespace,m_extensions) == -1) {    int predef=namespaceIndex(namespace,m_predefExtensions);    if (predef != -1)     m_extensions.add(m_predefExtensions.get(predef)); else     if (!(m_unregisteredExtensions.contains(namespace)))     m_unregisteredExtensions.add(namespace);  }}  }
class C{  public Builder keyCertChainFile(final String keyCertChainFile){  this.keyCertChainFile=keyCertChainFile;  return this;}  }
class C{  public TypesFactoryImpl(){  super();}  }
class C{  @Override public final int hashCode(){  return (int)(first * 2654435761L + second);}  }
class C{  private boolean isConflict(String coordinate,String directVersion,String indirectVersion){  boolean isConflict=LATEST_VERSION_COMPARATOR.compare(directVersion,indirectVersion) < 0;  if (isConflict) {    Set<String> ignoredVersions=ignoreConflictVersions.get(coordinate);    if (null != ignoredVersions && ignoredVersions.contains(indirectVersion)) {      isConflict=false;    }  }  return isConflict;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Timed @ExceptionMetered @POST @Produces(APPLICATION_JSON) public Response logout(@Nullable @CookieParam(value="session") Cookie sessionCookie){  if (sessionCookie != null) {    Optional<User> user=cookieAuthenticator.authenticate(sessionCookie);    if (user.isPresent()) {      logger.info("User logged out: {}",user.get().getName());    } else {      logger.warn("Invalid user cookie on logout.");    }  }  NewCookie expiredCookie=cookieFactory.getExpiredSessionCookie();  return Response.seeOther(URI.create("/ui/index.html")).cacheControl(CacheControl.valueOf("no-cache")).header(HttpHeaders.SET_COOKIE,expiredCookie.toString()).build();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CATEGORY;case 2:  return MESSAGE;default :return null;}}  }
class C{  public static String normalizeUnsignedByte(String value){  return normalizeIntegerValue(value,"0","255");}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  String colorState=restorableSupport.getStateValueAsString("color");  if (colorState != null) {    Color color=RestorableSupport.decodeColor(colorState);    if (color != null)     setColor(color);  }  colorState=restorableSupport.getStateValueAsString("highlightColor");  if (colorState != null) {    Color color=RestorableSupport.decodeColor(colorState);    if (color != null)     setHighlightColor(color);  }  RestorableSupport.StateObject positionsStateObj=restorableSupport.getStateObject("positions");  if (positionsStateObj != null) {    ArrayList<Position> newPositions=new ArrayList<Position>();    RestorableSupport.StateObject[] positionStateArray=restorableSupport.getAllStateObjects(positionsStateObj,"position");    if (positionStateArray != null && positionStateArray.length != 0) {      for (      RestorableSupport.StateObject pStateObj : positionStateArray) {        if (pStateObj != null) {          Double latitudeState=restorableSupport.getStateValueAsDouble(pStateObj,"latitudeDegrees");          Double longitudeState=restorableSupport.getStateValueAsDouble(pStateObj,"longitudeDegrees");          Double elevationState=restorableSupport.getStateValueAsDouble(pStateObj,"elevation");          if (latitudeState != null && longitudeState != null && elevationState != null)           newPositions.add(Position.fromDegrees(latitudeState,longitudeState,elevationState));        }      }    }    setPositions(newPositions);  }  Integer antiAliasHintState=restorableSupport.getStateValueAsInteger("antiAliasHint");  if (antiAliasHintState != null)   setAntiAliasHint(antiAliasHintState);  Boolean isFilledState=restorableSupport.getStateValueAsBoolean("filled");  if (isFilledState != null)   setFilled(isFilledState);  Boolean isClosedState=restorableSupport.getStateValueAsBoolean("closed");  if (isClosedState != null)   setClosed(isClosedState);  Boolean isHighlightedState=restorableSupport.getStateValueAsBoolean("highlighted");  if (isHighlightedState != null)   setHighlighted(isHighlightedState);  Integer pathTypeState=restorableSupport.getStateValueAsInteger("pathType");  if (pathTypeState != null)   setPathType(pathTypeState);  Boolean isFollowTerrainState=restorableSupport.getStateValueAsBoolean("followTerrain");  if (isFollowTerrainState != null)   setFollowTerrain(isFollowTerrainState);  Double offsetState=restorableSupport.getStateValueAsDouble("offset");  if (offsetState != null)   setOffset(offsetState);  Double terrainConformanceState=restorableSupport.getStateValueAsDouble("terrainConformance");  if (terrainConformanceState != null)   setTerrainConformance(terrainConformanceState);  Double lineWidthState=restorableSupport.getStateValueAsDouble("lineWidth");  if (lineWidthState != null)   setLineWidth(lineWidthState);  Integer stipplePatternState=restorableSupport.getStateValueAsInteger("stipplePattern");  if (stipplePatternState != null)   setStipplePattern(stipplePatternState.shortValue());  Integer stippleFactorState=restorableSupport.getStateValueAsInteger("stippleFactor");  if (stippleFactorState != null)   setStippleFactor(stippleFactorState);  Integer numSubsegmentsState=restorableSupport.getStateValueAsInteger("numSubsegments");  if (numSubsegmentsState != null)   setNumSubsegments(numSubsegmentsState);  RestorableSupport.StateObject so=restorableSupport.getStateObject(null,"avlist");  if (so != null) {    RestorableSupport.StateObject[] avpairs=restorableSupport.getAllStateObjects(so,"");    if (avpairs != null) {      for (      RestorableSupport.StateObject avp : avpairs) {        if (avp != null)         this.setValue(avp.getName(),avp.getValue());      }    }  }}  }
class C{  public EventEntry addLocation(Where location){  super.addElement(Where.KEY,location);  return this;}  }
class C{  public boolean equals(final Object other){  return root.equals(other);}  }
class C{  public static Builder builder(){  return builder(new Address(DEFAULT_HOST,DEFAULT_PORT));}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  private void write(Object source,OutputNode root,Session session) throws Exception {  write(source,root,new Source(strategy,support,session));}  }
class C{  public FastByteArrayOutputStream(byte[] buffer,int bumpSize){  buf=buffer;  bumpLen=bumpSize;}  }
class C{  public int indexOf(String string){  return indexOf(string,0);}  }
class C{  public static boolean isInstantiable(Class type){  int modifiers=type.getModifiers();  if (Modifier.isAbstract(modifiers)) {    return false;  }  return !Modifier.isInterface(modifiers);}  }
class C{  public static boolean countWithEarlyTermination(IndexSearcher searcher,Query query,EarlyTerminatingCollector collector) throws IOException {  return countWithEarlyTermination(searcher,null,query,collector);}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#comment: " + start + ", "+ length);  if (null != m_lexicalHandler) {    m_lexicalHandler.comment(ch,start,length);  }}  }
class C{  private void emitEnsureCollection(Method method,String fieldName,StringBuilder builder){  builder.append("    protected void ");  builder.append(getEnsureName(fieldName));  builder.append("() {\n");  builder.append("      if (");  builder.append(fieldName);  builder.append(" == null) {\n        ");  builder.append(fieldName);  builder.append(" = new ");  builder.append(getImplName(method.getGenericReturnType(),true));  builder.append("();\n");  builder.append("      }\n");  builder.append("    }\n");}  }
class C{  public static _QueuePriority fromString(final String value) throws SOAPSerializationException {  return (_QueuePriority)Enumeration.fromString(value,_QueuePriority.VALUES_TO_INSTANCES);}  }
class C{  public void normalizeRow(int nodeIndex,final int rowIndex){  final int numColumns=getNumColumns(nodeIndex);  double total=0.0;  for (int colIndex=0; colIndex < numColumns; colIndex++) {    total+=getProbability(nodeIndex,rowIndex,colIndex);  }  if (total != 0.0) {    for (int colIndex=0; colIndex < numColumns; colIndex++) {      double probability=getProbability(nodeIndex,rowIndex,colIndex);      double prob=probability / total;      setProbability(nodeIndex,rowIndex,colIndex,prob);    }  } else {    double prob=1.0 / numColumns;    for (int colIndex=0; colIndex < numColumns; colIndex++) {      setProbability(nodeIndex,rowIndex,colIndex,prob);    }  }}  }
class C{  public void decrement() throws IOException {  print("decrement",null);}  }
class C{  private void initializeMembers(final ImmutableCollection<TypeMember> members){  Preconditions.checkNotNull(members,"Error: members argument can not be null.");  for (  TypeMember typeMember : members) {    final Node memberTypeNode=containedRelationMap.get(typeMember.getBaseType());    final Node parentNode=containedRelationMap.get(typeMember.getParentType());    containedRelation.createEdge(memberTypeNode,parentNode);  }  if (!Cycles.findCycle(containedRelation,true).isEmpty()) {    throw new IllegalStateException("Error: Dependence graph has cycles after initialization.");  }}  }
class C{  public static boolean isEven(int value){  return value % 2 == 0;}  }
class C{  public EpisodeIDSorter(boolean ascending){  super(ascending);}  }
class C{  private void assertReaderConfigurations(Optional<Integer> numberOfShards,int whichReader,int expectedOffset,int expectedMaxResults) throws Exception {  RdeHostInput input=getInput(numberOfShards);  List<?> readers=input.createReaders();  RdeHostReader reader=(RdeHostReader)readers.get(whichReader);  assertImportBucketAndFilename(reader);  assertThat(reader.offset).isEqualTo(expectedOffset);  assertThat(reader.maxResults).isEqualTo(expectedMaxResults);}  }
class C{  public void write(String code,String... codez){  try {    if (!"\n".equals(code))     nlcount=0;    out.write(code);    for (    String s : codez) {      out.write(s);    }    if (verboseOut != null && out == originalOut) {      verboseOut.print(code);      for (      String s : codez) {        verboseOut.print(s);      }      verboseOut.flush();    }  } catch (  IOException ioe) {    throw new RuntimeException("Generating JS code",ioe);  }}  }
class C{  public List<Recommendation> scheduleStorageForImport(VirtualArray srcNH,Set<URI> vplexs,VirtualArray requestedHaNH,VirtualPool cos,VirtualPoolCapabilityValuesWrapper capabilities){  Set<String> vplexSystemIds=new HashSet<String>();  for (  URI vplexURI : vplexs) {    vplexSystemIds.add(vplexURI.toString());  }  List<Recommendation> recommendations=new ArrayList<Recommendation>();  Map<String,List<String>> vplexHaNHMap=ConnectivityUtil.getVPlexVarrays(_dbClient,vplexSystemIds,srcNH.getId());  for (  URI vplexSystemURI : vplexs) {    StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexSystemURI);    List<String> vplexHaNHIds=vplexHaNHMap.get(vplexSystem.getId().toString());    if (vplexHaNHIds == null) {      continue;    }    _log.info("Found {} HA varrays",vplexHaNHIds.size());    for (    String vplexHaNHId : vplexHaNHIds) {      _log.info("Check HA varray {}",vplexHaNHId);      if ((requestedHaNH != null) && (!vplexHaNHId.equals(requestedHaNH.getId().toString()))) {        _log.info("Not the requested HA varray, skip");        continue;      }      VirtualArray vplexHaNH=_dbClient.queryObject(VirtualArray.class,URI.create(vplexHaNHId));      Map<String,Object> attributeMap=new HashMap<String,Object>();      List<StoragePool> allMatchingPools=getMatchingPools(vplexHaNH,null,cos,capabilities,attributeMap);      _log.info("Found {} matching pools for HA varray",allMatchingPools.size());      Map<String,List<StoragePool>> vplexPoolMapForHaNH=sortPoolsByVPlexStorageSystem(allMatchingPools,vplexHaNHId);      List<Recommendation> recommendationsForHaNH=new ArrayList<Recommendation>();      if (vplexPoolMapForHaNH.containsKey(vplexSystem.getId().toString())) {        _log.info("Found matching pools in HA NH for VPlex {}",vplexSystem.getId());        recommendationsForHaNH=_blockScheduler.getRecommendationsForPools(vplexHaNH.getId().toString(),vplexPoolMapForHaNH.get(vplexSystem.getId().toString()),capabilities);      } else {        _log.info("No matching pools in HA NH for VPlex {}",vplexSystem.getId());      }      recommendations.addAll(createVPlexRecommendations(vplexSystem.getId().toString(),vplexHaNH,cos,recommendationsForHaNH));    }  }  return recommendations;}  }
class C{  @RequestMapping(value=USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + "/userIds/{userId}/namespaces/{namespace}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_DELETE) public UserNamespaceAuthorization deleteUserNamespaceAuthorization(@PathVariable("userId") String userId,@PathVariable("namespace") String namespace){  return userNamespaceAuthorizationService.deleteUserNamespaceAuthorization(new UserNamespaceAuthorizationKey(userId,namespace));}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public boolean isTimeToReloadConf(){  if (!confLoadedFromFile)   return false;  long now=System.currentTimeMillis();  return confReloadCheckEnabled && !confReloadInProgress && (now - confReloadCheckInterval) > confReloadLastCheck;}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=itemsLayout.getLineTop(1);  canvas.translate(0,-top + scrollingOffset);  itemsPaint.setColor(ITEMS_TEXT_COLOR);  itemsPaint.drawableState=getDrawableState();  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  if (getFilter() instanceof OptionHandler) {    newVector.addElement(new Option("","",0,"\nOptions specific to filter " + getFilter().getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)getFilter()).listOptions()));  }  return newVector.elements();}  }
class C{  public static RopMethod optimize(RopMethod rmeth,int paramWidth,boolean isStatic,boolean inPreserveLocals,TranslationAdvice inAdvice){  return optimize(rmeth,paramWidth,isStatic,inPreserveLocals,inAdvice,EnumSet.allOf(OptionalStep.class));}  }
class C{  public SIPObjectList(){  super();}  }
class C{  public void delete(){  if (table.leadSelectionIndex == -1 || table.anchorSelectionIndex == -1) {    UIManager.getLookAndFeel().provideErrorFeedback(table);    return;  }  int start=table.getSmallestSelectionIndex();  int end=table.getLargestSelectionIndex();  int len=end - start + 1;  removeBytes(start,len);}  }
class C{  protected void hideView(final IViewPart viewPart){  getActivePage().hideView(checkNotNull(viewPart,"viewPart"));}  }
class C{  public static String utf8BytesToString(ByteArray bytes){  int length=bytes.size();  char[] chars=new char[length];  int outAt=0;  for (int at=0; length > 0; ) {    int v0=bytes.getUnsignedByte(at);    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        length--;        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      length-=2;      if (length < 0) {        return throwBadUtf8(v0,at);      }      int v1=bytes.getUnsignedByte(at + 1);      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    length-=3;    if (length < 0) {      return throwBadUtf8(v0,at);    }    int v1=bytes.getUnsignedByte(at + 1);    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes.getUnsignedByte(at + 2);    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}return new String(chars,0,outAt);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static TimeEvent create(Object src,long time,long systemTime,long simTime,TimerStatus timerStatus){  if (time == Long.MIN_VALUE || time == Long.MAX_VALUE) {    return NO_TIME;  }  return new TimeEvent(src,time,time - systemTime,simTime + time - systemTime,timerStatus);}  }
class C{  public <ResultT,CollT extends Collection<ResultT>>CollT toCollection(Converter<ResultT> converter,CollT results){  try {    if (isEmpty(cursor)) {      return results;    }    return populate(converter,results);  }  finally {    close();  }}  }
class C{  public void annotate(int length,@Nonnull String msg,Object... formatArgs){  if (startLimit != -1 && endLimit != -1 && (cursor < startLimit || cursor >= endLimit)) {    throw new ExceptionWithContext("Annotating outside the parent bounds");  }  String formattedMsg;  if (formatArgs != null && formatArgs.length > 0) {    formattedMsg=String.format(msg,formatArgs);  } else {    formattedMsg=msg;  }  int exclusiveEndOffset=cursor + length;  AnnotationEndpoint endPoint=null;  AnnotationEndpoint startPoint=annotatations.get(cursor);  if (startPoint == null) {    Map.Entry<Integer,AnnotationEndpoint> previousEntry=annotatations.lowerEntry(cursor);    if (previousEntry != null) {      AnnotationEndpoint previousAnnotations=previousEntry.getValue();      AnnotationItem previousRangeAnnotation=previousAnnotations.rangeAnnotation;      if (previousRangeAnnotation != null) {        throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(previousEntry.getKey(),previousRangeAnnotation.annotation));      }    }  } else   if (length > 0) {    AnnotationItem existingRangeAnnotation=startPoint.rangeAnnotation;    if (existingRangeAnnotation != null) {      throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(cursor,existingRangeAnnotation.annotation));    }  }  if (length > 0) {    Map.Entry<Integer,AnnotationEndpoint> nextEntry=annotatations.higherEntry(cursor);    if (nextEntry != null) {      int nextKey=nextEntry.getKey();      if (nextKey < exclusiveEndOffset) {        AnnotationEndpoint nextEndpoint=nextEntry.getValue();        AnnotationItem nextRangeAnnotation=nextEndpoint.rangeAnnotation;        if (nextRangeAnnotation != null) {          throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(nextKey,nextRangeAnnotation.annotation));        }        if (nextEndpoint.pointAnnotations.size() > 0) {          throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(nextKey,nextKey,nextEndpoint.pointAnnotations.get(0).annotation));        }        throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation endpoint at %d",formatAnnotation(cursor,cursor + length,formattedMsg),nextKey);      }      if (nextKey == exclusiveEndOffset) {        endPoint=nextEntry.getValue();      }    }  }  if (startPoint == null) {    startPoint=new AnnotationEndpoint();    annotatations.put(cursor,startPoint);  }  if (length == 0) {    startPoint.pointAnnotations.add(new AnnotationItem(indentLevel,formattedMsg));  } else {    startPoint.rangeAnnotation=new AnnotationItem(indentLevel,formattedMsg);    if (endPoint == null) {      endPoint=new AnnotationEndpoint();      annotatations.put(exclusiveEndOffset,endPoint);    }  }  cursor+=length;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void onCameraPositionChange(){  if (mapFragment.getMapMode().equals(MapMode.NODE_REF_POSITION_EDITION)) {    mapFragment.onCameraChangeUpdatePolyline();  }  mapFragment.getPresenter().loadPoisIfNeeded();}  }
class C{  ConverterSet remove(Converter converter,Converter[] removed){  Converter[] converters=iConverters;  int length=converters.length;  for (int i=0; i < length; i++) {    if (converter.equals(converters[i])) {      return remove(i,removed);    }  }  if (removed != null) {    removed[0]=null;  }  return this;}  }
class C{  public DVBBroadcastCaptureDevice(){  super();}  }
class C{  public void run(String classname,String[] args) throws Throwable {  Class c=loadClass(classname);  try {    c.getDeclaredMethod("main",new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  java.lang.reflect.InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public void removeContentSelectionChangedListener(ContentSelectionChangedListener l){  contentSelectionChangedListenerList.remove(ContentSelectionChangedListener.class,l);}  }
class C{  public boolean usesAutoPublishing(){  return publicationMode == PublicationMode.AUTO_PUBLISH_ON && updateFrequency != null;}  }
class C{  @Override public TextureData newTextureData(final GLProfile glp,final URL url,final int internalFormat,final int pixelFormat,final boolean mipmap,final String fileSuffix) throws IOException {  return null;}  }
class C{  public UserPreference(String username){  this.username=username;}  }
class C{  public ClaimBuilder array(String key,Object... values){  data.put(key,values);  return this;}  }
class C{  public ResponseWriter cloneWithWriter(Writer writer){  try {    return new CustomResponseWriter(writer,getContentType(),getCharacterEncoding());  } catch (  FacesException e) {    throw new IllegalStateException();  }}  }
class C{  public PooledExecutorWithDMStats(BlockingQueue<Runnable> q,int poolSize,PoolStatHelper stats,ThreadFactory tf){  this(q,poolSize,stats,tf,Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT",30000 * 60).intValue());}  }
class C{  public static boolean isRescaleOpValid(RescaleOp rop,BufferedImage srcImg){  int numFactors=rop.getNumFactors();  ColorModel srcCM=srcImg.getColorModel();  if (srcCM instanceof IndexColorModel) {    throw new IllegalArgumentException("Rescaling cannot be " + "performed on an indexed image");  }  if (numFactors != 1 && numFactors != srcCM.getNumColorComponents() && numFactors != srcCM.getNumComponents()) {    throw new IllegalArgumentException("Number of scaling constants " + "does not equal the number of" + " of color or color/alpha "+ " components");  }  int csType=srcCM.getColorSpace().getType();  if (csType != ColorSpace.TYPE_RGB && csType != ColorSpace.TYPE_GRAY) {    return false;  }  if (numFactors == 2 || numFactors > 4) {    return false;  }  return true;}  }
class C{  public void addHeader(String name,String value){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  this.headers.add(new HeaderItem(name,value));}  }
class C{  public static void checkLatitude(double latitude){  if (Double.isNaN(latitude) || latitude < MIN_LAT_INCL || latitude > MAX_LAT_INCL) {    throw new IllegalArgumentException("invalid latitude " + latitude + "; must be between "+ MIN_LAT_INCL+ " and "+ MAX_LAT_INCL);  }}  }
class C{  public void addRange(BytesRef minPrefixCoded,BytesRef maxPrefixCoded){  throw new UnsupportedOperationException();}  }
class C{  public void testBackupOnEmpty() throws Exception {  BackupManager bmgr=new BackupManager(new MockEventDispatcher());  bmgr.initialize(new TungstenProperties());  try {    bmgr.spawnBackup("foo","file-foo",false);    throw new Exception("Backup spawned when properties are unconfigured");  } catch (  BackupException e) {  }  try {    bmgr.spawnRestore("storage://simple-file/foo.properties");    throw new Exception("Restore spawned when properties are unconfigured");  } catch (  BackupException e) {  }  bmgr.release();}  }
class C{  public static AetherResult asResult(final Collection<ArtifactResult> results,final ImportConfiguration cfg,final Optional<DependencyResult> dependencyResult){  final AetherResult result=new AetherResult();  final Set<String> requested=new HashSet<>(cfg.getCoordinates().size());  for (  final MavenCoordinates mc : cfg.getCoordinates()) {    requested.add(mc.toString());  }  final Map<String,Boolean> optionalDeps=new HashMap<>();  fillOptionalDependenciesMap(dependencyResult,optionalDeps);  for (  final ArtifactResult ar : results) {    final AetherResult.Entry entry=new AetherResult.Entry();    final MavenCoordinates coordinates=MavenCoordinates.fromResult(ar);    final String key=coordinates.toBase().toString();    entry.setCoordinates(coordinates);    entry.setResolved(ar.isResolved());    entry.setRequested(requested.contains(key));    entry.setOptional(optionalDeps.getOrDefault(key,Boolean.FALSE));    if (ar.getExceptions() != null && !ar.getExceptions().isEmpty()) {      final StringBuilder sb=new StringBuilder(ar.getExceptions().get(0).getMessage());      if (ar.getExceptions().size() > 1) {        sb.append(" ...");      }      entry.setError(sb.toString());    }    result.getArtifacts().add(entry);  }  Collections.sort(result.getArtifacts(),Comparator.comparing(null));  result.setRepositoryUrl(cfg.getRepositoryUrl());  return result;}  }
class C{  public BlockingClusterStatePublishResponseHandler(Set<DiscoveryNode> publishingToNodes){  this.pendingNodes=ConcurrentCollections.newConcurrentSet();  this.pendingNodes.addAll(publishingToNodes);  this.latch=new CountDownLatch(pendingNodes.size());}  }
class C{  private void completeInvoice(){  if (m_invoice != null) {    if (!m_invoice.processIt(p_docAction)) {      log.warning("completeInvoice - failed: " + m_invoice);      addLog("completeInvoice - failed: " + m_invoice);    }    m_invoice.saveEx();    addLog(m_invoice.getC_Invoice_ID(),m_invoice.getDateInvoiced(),null,m_invoice.getDocumentNo());    m_created++;  }  m_invoice=null;  m_ship=null;  m_line=0;}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateChildren(changes,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=changes.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null)   v.removeUpdate(changes,alloc,f);}  }
class C{  public static long max(long[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  long max=array[0];  for (int j=1; j < array.length; j++) {    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  public boolean stop(boolean force){  if (!running) {    return true;  }  if (!canStop(force)) {    LOG.warn("Running jobs - can't stop now.");    return false;  }  LOG.info("Stopping NutchServer on port {}...",port);  try {    component.stop();  } catch (  Exception e) {    throw new IllegalStateException("Cannot stop nutch server",e);  }  LOG.info("Stopped NutchServer on port {}",port);  running=false;  return true;}  }
class C{  int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  private void reindexProject(final RegisteredProject project) throws ServerException {  final VirtualFile file=project.getBaseFolder().getVirtualFile();  executor.execute(null);}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  private boolean fireSelectionListeners(final MouseEvent mouseEvent){  for (  final SelectionListener listener : listOfSelectionListeners) {    final Event event=new Event();    event.button=mouseEvent.button;    event.display=getDisplay();    event.item=null;    event.widget=this;    event.data=null;    event.time=mouseEvent.time;    event.x=mouseEvent.x;    event.y=mouseEvent.y;    final SelectionEvent selEvent=new SelectionEvent(event);    listener.widgetSelected(selEvent);    if (!selEvent.doit) {      return false;    }  }  return true;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(0);  childName=child.getNodeName();  if (!equals("#text",childName)) {    assertEquals("childName","employeeId",childName);  }}  }
class C{  @VisibleForTesting boolean updateTopologyHandler(String topologyName,String newParallelism){  LOG.fine(String.format("updateTopologyHandler called for %s with %s",topologyName,newParallelism));  SchedulerStateManagerAdaptor manager=Runtime.schedulerStateManagerAdaptor(runtime);  TopologyAPI.Topology topology=manager.getTopology(topologyName);  Map<String,Integer> changeRequests=parseNewParallelismParam(newParallelism);  PackingPlans.PackingPlan currentPlan=manager.getPackingPlan(topologyName);  if (!changeDetected(currentPlan,changeRequests)) {    LOG.warning(String.format("The component parallelism request (%s) is the same as the " + "current topology parallelism. Not taking action.",newParallelism));    return false;  }  PackingPlans.PackingPlan proposedPlan=buildNewPackingPlan(currentPlan,changeRequests,topology);  Scheduler.UpdateTopologyRequest updateTopologyRequest=Scheduler.UpdateTopologyRequest.newBuilder().setCurrentPackingPlan(currentPlan).setProposedPackingPlan(proposedPlan).build();  LOG.info("Sending Updating topology request: " + updateTopologyRequest);  if (!schedulerClient.updateTopology(updateTopologyRequest)) {    LOG.log(Level.SEVERE,"Failed to update topology with Scheduler, updateTopologyRequest=" + updateTopologyRequest);    return false;  }  LOG.fine("Scheduler updated topology successfully.");  return true;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  private void handleGetSimple(Operation get){  ServiceDocument d=get.getLinkedState();  if (d == null) {    if (checkServiceStopped(get,false)) {      return;    }    if (this.context.version > 0) {      throw new IllegalStateException("Version is non zero but no state was found");    }    d=new ServiceDocument();    d.documentSelfLink=this.context.selfLink;    d.documentKind=Utils.buildKind(this.context.stateType);  }  get.setBodyNoCloning(d).complete();}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("books"),false);  Analyzer a=new EnglishAnalyzer(EnglishAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"books","books");  checkOneTerm(a,"book","book");  a.close();}  }
class C{  public static String difference(String s1,String s2){  int at=differenceAt(s1,s2);  if (at == -1) {    return "";  }  return s2.substring(at);}  }
class C{  @Override public UpdateResponse commit(boolean waitFlush,boolean waitSearcher) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.commit(waitFlush,waitSearcher);  return ur;}  }
class C{  public static Label createNameValueLabel(final String label,final String... values){  final String valueStr=StringUtils.join(Arrays.asList(values)," ");  final Label nameValueLabel=new Label(getBoldHTMLText(label) + valueStr,ContentMode.HTML);  nameValueLabel.setSizeFull();  nameValueLabel.addStyleName(SPUIDefinitions.TEXT_STYLE);  nameValueLabel.addStyleName("label-style");  return nameValueLabel;}  }
class C{  private TextStyle typeRefTextStyle(){  TextStyle textStyle=defaultTextStyle().copy();  textStyle.setColor(new RGB(140,140,140));  return textStyle;}  }
class C{  public static void showSheet(JOptionPane pane,Component parentComponent,SheetListener listener){  final JSheet sheet=createSheet(pane,parentComponent,styleFromMessageType(pane.getMessageType()));  sheet.addSheetListener(listener);  sheet.show();}  }
class C{  protected ConditionalExpressionImpl(){  super();}  }
class C{  public CGPoint locationInView(View view){  return mPosition;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof YIntervalSeriesCollection)) {    return false;  }  YIntervalSeriesCollection that=(YIntervalSeriesCollection)obj;  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,String[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putStringArray(name,value);  return this;}  }
class C{  public ScatterSplitConfiguration(final boolean enabled,final double percentOfSplitThreshold,final int dataServiceCount,final int indexPartitionCount){  if (percentOfSplitThreshold < 0.1 || percentOfSplitThreshold > 1.0) {    throw new IllegalArgumentException(Options.SCATTER_SPLIT_PERCENT_OF_SPLIT_THRESHOLD + " must be in [0.1:1.0]");  }  if (dataServiceCount < 0) {    throw new IllegalArgumentException(Options.SCATTER_SPLIT_DATA_SERVICE_COUNT + " must be non-negative");  }  if (indexPartitionCount < 0) {    throw new IllegalArgumentException(Options.SCATTER_SPLIT_INDEX_PARTITION_COUNT + " must be non-negative");  }  this.enabled=enabled;  this.percentOfSplitThreshold=percentOfSplitThreshold;  this.dataServiceCount=dataServiceCount;  this.indexPartitionCount=indexPartitionCount;}  }
class C{  public IgniteTxRollbackCheckedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static void writeActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Write Actions Instruction not supported in OpenFlow 1.0");    return;  }  OFFlowMod.Builder tmpFmb=OFFactories.getFactory(fmb.getVersion()).buildFlowModify();  OFInstructionWriteActions.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildWriteActions();  ActionUtils.fromString(tmpFmb,inst,log);  ib.setActions(tmpFmb.getActions());  log.debug("Appending WriteActions instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public static Value createSmallLob(int type,byte[] small){  int precision;  if (type == Value.CLOB) {    precision=new String(small,Constants.UTF8).length();  } else {    precision=small.length;  }  return createSmallLob(type,small,precision);}  }
class C{  protected void calculateProfiles(){  if (mProfiles == null) {    mProfiles=new ArrayList<>();  }  if (mCurrentProfile == null) {    int setCount=0;    for (int i=0; i < mProfiles.size(); i++) {      if (mProfiles.size() > i && mProfiles.get(i).isSelectable()) {        if (setCount == 0 && (mCurrentProfile == null)) {          mCurrentProfile=mProfiles.get(i);        } else         if (setCount == 1 && (mProfileFirst == null)) {          mProfileFirst=mProfiles.get(i);        } else         if (setCount == 2 && (mProfileSecond == null)) {          mProfileSecond=mProfiles.get(i);        } else         if (setCount == 3 && (mProfileThird == null)) {          mProfileThird=mProfiles.get(i);        }        setCount++;      }    }    return;  }  IProfile[] previousActiveProfiles=new IProfile[]{mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird};  IProfile[] newActiveProfiles=new IProfile[4];  Stack<IProfile> unusedProfiles=new Stack<>();  for (int i=0; i < mProfiles.size(); i++) {    IProfile p=mProfiles.get(i);    if (p.isSelectable()) {      boolean used=false;      for (int j=0; j < 4; j++) {        if (previousActiveProfiles[j] == p) {          newActiveProfiles[j]=p;          used=true;          break;        }      }      if (!used) {        unusedProfiles.push(p);      }    }  }  Stack<IProfile> activeProfiles=new Stack<>();  for (int i=0; i < 4; i++) {    if (newActiveProfiles[i] != null) {      activeProfiles.push(newActiveProfiles[i]);    } else     if (!unusedProfiles.isEmpty()) {      activeProfiles.push(unusedProfiles.pop());    }  }  Stack<IProfile> reversedActiveProfiles=new Stack<>();  while (!activeProfiles.empty()) {    reversedActiveProfiles.push(activeProfiles.pop());  }  if (reversedActiveProfiles.isEmpty()) {    mCurrentProfile=null;  } else {    mCurrentProfile=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileFirst=null;  } else {    mProfileFirst=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileSecond=null;  } else {    mProfileSecond=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileThird=null;  } else {    mProfileThird=reversedActiveProfiles.pop();  }}  }
class C{  private boolean isShouldOverflow(final IResourceManager rm){  if (rm == null || !rm.isOpen()) {    return false;  }  return rm.isOverflowEnabled() && rm.shouldOverflow();}  }
class C{  protected void stopBridgeServer(Cache cache){  CacheServer bridge=(CacheServer)cache.getCacheServers().iterator().next();  bridge.stop();  assertFalse(bridge.isRunning());}  }
class C{  public TokenImpl(Object data){  fType=T_OTHER;  fData=data;}  }
class C{  protected JMenuBar createMenuBar(@Nullable View v){  JMenuBar mb=new JMenuBar();  JMenu fileMenu=null;  JMenu editMenu=null;  JMenu helpMenu=null;  JMenu viewMenu=null;  JMenu windowMenu=null;  String fileMenuText=labels.getString("file.text");  String editMenuText=labels.getString("edit.text");  String viewMenuText=labels.getString("view.text");  String windowMenuText=labels.getString("window.text");  String helpMenuText=labels.getString("help.text");  LinkedList<JMenu> ll=new LinkedList<JMenu>();  getModel().getMenuBuilder().addOtherMenus(ll,this,v);  for (  JMenu mm : ll) {    String text=mm.getText();    if (text == null) {      mm.setText("-null-");    } else     if (text.equals(fileMenuText)) {      fileMenu=mm;      continue;    } else     if (text.equals(editMenuText)) {      editMenu=mm;      continue;    } else     if (text.equals(viewMenuText)) {      viewMenu=mm;      continue;    } else     if (text.equals(windowMenuText)) {      windowMenu=mm;      continue;    } else     if (text.equals(helpMenuText)) {      helpMenu=mm;      continue;    }    mb.add(mm);  }  if (fileMenu == null) {    fileMenu=createFileMenu(v);  }  if (editMenu == null) {    editMenu=createEditMenu(v);  }  if (viewMenu == null) {    viewMenu=createViewMenu(v);  }  if (windowMenu == null) {    windowMenu=createWindowMenu(v);  }  if (helpMenu == null) {    helpMenu=createHelpMenu(v);  }  if (fileMenu != null) {    mb.add(fileMenu,0);  }  if (editMenu != null) {    mb.add(editMenu,Math.min(1,mb.getComponentCount()));  }  if (viewMenu != null) {    mb.add(viewMenu,Math.min(2,mb.getComponentCount()));  }  if (windowMenu != null) {    mb.add(windowMenu);  }  if (helpMenu != null) {    mb.add(helpMenu);  }  return mb;}  }
class C{  @Override public void playShowAnimation(){  showAnimation.play();}  }
class C{  public void makeSameAs(UnconditionalValueDerefSet source){  valueNumbersUnconditionallyDereferenced.clear();  valueNumbersUnconditionallyDereferenced.or(source.valueNumbersUnconditionallyDereferenced);  lastUpdateTimestamp=source.lastUpdateTimestamp;  derefLocationSetMap.clear();  if (source.derefLocationSetMap.size() > 0) {    for (    Map.Entry<ValueNumber,Set<Location>> sourceEntry : source.derefLocationSetMap.entrySet()) {      Set<Location> derefLocationSet=Util.makeSmallHashSet(sourceEntry.getValue());      derefLocationSetMap.put(sourceEntry.getKey(),derefLocationSet);    }  }}  }
class C{  public boolean isForm(){  return X_AD_Menu.ACTION_Form.equals(m_imageIndicator);}  }
class C{  public void verifyTrace(String substring,Throwable t){  verify(Level.FINEST,substring,t);}  }
class C{  public static boolean assertStrictProbability(final double p){  if (p > 0.0 && p <= 1.0 && !Double.isNaN(p)) {    return true;  }  throw new Exam.ExamException(Utils.realFormat(p));}  }
class C{  protected void incorporateDigestValue(final Element parentDom,final DigestAlgorithm digestAlgorithm,final DSSDocument originalDocument){  final Element digestValueDom=documentDom.createElementNS(XMLNS,DS_DIGEST_VALUE);  final String base64EncodedDigestBytes=originalDocument.getDigest(digestAlgorithm);  if (LOG.isTraceEnabled()) {    LOG.trace("Digest value {} --> {}",parentDom.getNodeName(),base64EncodedDigestBytes);  }  final Text textNode=documentDom.createTextNode(base64EncodedDigestBytes);  digestValueDom.appendChild(textNode);  parentDom.appendChild(digestValueDom);}  }
class C{  static non_terminal create_new(String prefix) throws internal_error {  if (prefix == null)   prefix="NT$";  return new non_terminal(prefix + next_nt++);}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public static CCBlink action(float t,int b){  return new CCBlink(t,b);}  }
class C{  void startSequenceDelay(){  int delay=Integer.parseInt(mDelayField[mNextSequenceElement].getText());  mNextSequenceElement++;  restartTimer(delay);}  }
class C{  public static AppsForYourDomainException narrow(ServiceException se){  if ((se.getResponseContentType() == null) || (se.getResponseBody() == null)) {    return null;  }  if (se.getHttpErrorCodeOverride() == HttpURLConnection.HTTP_BAD_GATEWAY) {    return new AppsForYourDomainException(AppsForYourDomainErrorCode.ServerBusy,"The server is busy and could not complete your request.  Please " + "try again in 30 seconds.");  }  if ((se.getResponseContentType().equals(new ContentType("text/xml"))) && (se.getResponseBody().contains("AppsForYourDomainErrors"))) {    try {      DocumentBuilder builder=factory.newDocumentBuilder();      Document document=builder.parse(new InputSource(new StringReader(se.getResponseBody())));      Element root=document.getDocumentElement();      NodeList errorList=root.getElementsByTagName("error");      Node error=errorList.item(0);      NamedNodeMap attributes=error.getAttributes();      int errorCode=Integer.parseInt(attributes.getNamedItem("errorCode").getNodeValue());      String invalidInput=attributes.getNamedItem("invalidInput").getNodeValue();      AppsForYourDomainException exception=new AppsForYourDomainException(AppsForYourDomainErrorCode.getEnumFromInt(errorCode),invalidInput,se.getHttpErrorCodeOverride());      return exception;    } catch (    NumberFormatException e) {      return null;    }catch (    ParserConfigurationException e) {      return null;    }catch (    SAXException e) {      return null;    }catch (    IOException e) {      return null;    }  }  return null;}  }
class C{  public void testLongestOnly() throws IOException {  MockTokenizer tokenizer=whitespaceMockTokenizer("lucene is awesome");  tokenizer.setEnableChecks(true);  HunspellStemFilter filter=new HunspellStemFilter(tokenizer,dictionary,true,true);  assertTokenStreamContents(filter,new String[]{"lucene","is","awesome"},new int[]{1,1,1});}  }
class C{  public Bindings add(String property,String stateProperty,JToggleButton button,JTextArea textArea){  registerPropertyChangeListener(button);  registerPropertyChangeListener(textArea);  return add(new OptJTextAreaBinding(property,stateProperty,button,textArea));}  }
class C{  public void parseGenotype(final EvolutionState state,final LineNumberReader reader) throws IOException {  for (int x=0; x < rulesets.length; x++) {    reader.readLine();    rulesets[x].readRuleSet(state,reader);  }}  }
class C{  public ReplyKeyboardMarkupBuilder resize(boolean resize){  this.resize_keyboard=resize;  return this;}  }
class C{  @ObjectiveCName("archiveChatCommandWithPeer:") public Command<Void> archiveChat(Peer peer){  return null;}  }
class C{  protected boolean isPrimitiveValue(Object value){  return value instanceof String || value instanceof Boolean || value instanceof Character|| value instanceof Byte|| value instanceof Short|| value instanceof Integer|| value instanceof Long|| value instanceof Float|| value instanceof Double|| value.getClass().isPrimitive();}  }
class C{  private boolean holdsEqualModifiers(PolyfillValidationState state){  boolean result=true;  if (state.polyType.getTypeAccessModifier() != state.filledType.getTypeAccessModifier()) {    final String msg=getMessageForCLF_POLYFILL_DIFFERENT_MODIFIER(state.name,keywordProvider.keyword(state.polyType.getTypeAccessModifier()),keywordProvider.keyword(state.filledType.getTypeAccessModifier()));    addIssue(state,msg,CLF_POLYFILL_DIFFERENT_MODIFIER);    result=false;  }  result&=holdsEqualModifier(state,"abstract",state.polyType.isAbstract(),state.filledType.isAbstract());  result&=holdsEqualModifier(state,"@" + FINAL.name,state.polyType.isFinal(),state.filledType.isFinal());  return result;}  }
class C{  public void doSomethingElse(String z){  if (true) {    System.out.println("True");  }}  }
class C{  protected void addTypeAdapters(GsonBuilder gsonBuilder){}  }
class C{  public ManagedEntity[] searchManagedEntities(String type) throws VMWareException {  return searchManagedEntities(getRootFolder(),type,true);}  }
class C{  public static String classNameOnly(Object o){  String s="[null object ref]";  if (o != null) {    s=classNameOnly(o.getClass().getName());  }  return s;}  }
class C{  public void startDream(){  int userId=ActivityManager.getCurrentUser();  ComponentName dream=chooseDreamForUser(userId);  if (dream != null) {synchronized (mLock) {      startDreamLocked(dream,false,userId);    }  }}  }
class C{  @Override public boolean add(final E o,final double priority){  if (o == null) {    throw new NullPointerException();  }  PseudoEntry<E> entry=new PseudoEntry<E>(o,priority);  if (this.lastEntry.containsKey(o)) {    return false;  }  if (this.delegate.add(entry)) {    this.lastEntry.put(o,entry);    return true;  }  return false;}  }
class C{  public static String decode(String html){  if (html.indexOf('&') < 0) {    return html;  }  char[] chars=html.toCharArray();  int delta=0;  int n=chars.length;  for (int i=0; i < n; ) {    char ch=chars[i];    if (chars[i] == '&') {      long packedEndAndCodepoint=HtmlEntities.decodeEntityAt(chars,i,n);      int end=(int)(packedEndAndCodepoint >>> 32);      if (end != i + 1) {        int codepoint=((int)packedEndAndCodepoint) & 0xffffff;        delta+=end - (i + Character.toChars(codepoint,chars,i - delta));        i=end;      } else {        chars[i - delta]=ch;        ++i;      }    } else {      chars[i - delta]=ch;      ++i;    }  }  if (delta == 0) {    return html;  }  return String.valueOf(chars,0,n - delta);}  }
class C{  public static boolean testCircleCircle(float aX,float aY,float rA,float bX,float bY,float rB){  float d=(aX - bX) * (aX - bX) + (aY - bY) * (aY - bY);  return d <= (rA + rB) * (rA + rB);}  }
class C{  public TimeSeriesDataDisplayTable(TimeSeriesData dataSet){  this.dataSet=dataSet;  colCount=dataSet.getNumVars();  maxRowCount=dataSet.getNumTimePoints();}  }
class C{  void availableLocalesTest(){  HashSet<Locale> result=new HashSet<>(Arrays.asList(Locale.getAvailableLocales()));  HashSet<Locale> expected=new HashSet<>(Arrays.asList(LocaleProviderAdapter.forJRE().getAvailableLocales()));  expected.addAll(Arrays.asList(breakIP.getAvailableLocales()));  expected.addAll(Arrays.asList(collatorP.getAvailableLocales()));  expected.addAll(Arrays.asList(dateFP.getAvailableLocales()));  expected.addAll(Arrays.asList(dateFSP.getAvailableLocales()));  expected.addAll(Arrays.asList(decimalFSP.getAvailableLocales()));  expected.addAll(Arrays.asList(numberFP.getAvailableLocales()));  expected.addAll(Arrays.asList(currencyNP.getAvailableLocales()));  expected.addAll(Arrays.asList(currencyNP2.getAvailableLocales()));  expected.addAll(Arrays.asList(localeNP.getAvailableLocales()));  expected.addAll(Arrays.asList(tzNP.getAvailableLocales()));  expected.addAll(Arrays.asList(tzGenNP.getAvailableLocales()));  expected.addAll(Arrays.asList(calDataP.getAvailableLocales()));  expected.addAll(Arrays.asList(calNameP.getAvailableLocales()));  if (!result.equals(expected)) {    throw new RuntimeException("Locale.getAvailableLocales() does not return the union of locales: diff=" + getDiff(result,expected));  }}  }
class C{  protected void restoreState(){}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.440 -0400",hash_original_method="FBA121B80064AD99E30C613A90CFA3D6",hash_generated_method="78E79B0ADA1605C9FAFD14A005E06430") @Override public int read() throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position++;  return processChar();}  }
class C{  private String readLine(final InputStream is) throws IOException {  _baos.reset();  int lastChar=-1;  int thisChar;  int nread=0;  while ((thisChar=is.read()) != -1) {    nread++;    _baos.write(thisChar);    if (lastChar == '\r' && thisChar == '\n') {      nread-=2;      final String s=new String(_baos.toByteArray(),0,nread,UTF8);      if (log.isTraceEnabled())       log.trace("[" + s + "]");      return s;    }    lastChar=thisChar;  }  if (thisChar == -1 && nread == 0) {    if (log.isTraceEnabled())     log.trace("EOF");    return null;  }  throw new IOException("End of input stream?");}  }
class C{  public boolean hasAdditional(){  return (m_Additional.size() > 0);}  }
class C{  public UnicodeReader(InputStream in,String defaultEncoding) throws IOException {  init(in,defaultEncoding);}  }
class C{  public synchronized void update(Vector2 mousePosition){  this.beginPosition=mousePosition;}  }
class C{  ElementAdapter(Path path){  this.path=path;}  }
class C{  public static ANRequest.DownloadBuilder download(String url,String dirPath,String fileName){  return new ANRequest.DownloadBuilder(url,dirPath,fileName);}  }
class C{  public static DateTimeFormatter yearMonth(){  return Constants.ym;}  }
class C{  public void paint(Graphics2D g2D,int pageNo,Point2D pageStart,Properties ctx,boolean isView){  Point2D.Double location=getAbsoluteLocation(pageStart);  float y=(float)location.y;  for (int row=0; row < m_rows; row++) {    float x=(float)location.x;    for (int col=0; col < m_cols; col++) {      if (m_textLayout[row][col] != null) {        float yy=y + m_textLayout[row][col].getAscent();        m_textLayout[row][col].draw(g2D,x,yy);      }      x+=m_colWidth[col];      if (m_colWidth[col] > 0)       x+=m_colGap;    }    y+=m_rowHeight[row];    if (m_rowHeight[row] > 0)     y+=m_rowGap;  }}  }
class C{  public boolean search(int[] A,int target){  if (A.length == 0) {    return false;  }  int start=0;  int end=A.length - 1;  int mid;  while (start + 1 < end) {    mid=start + (end - start) / 2;    if (A[mid] == target) {      return true;    }    if (A[start] < A[mid]) {      if (A[start] <= target && target <= A[mid]) {        end=mid;      } else {        start=mid;      }    } else {      if (A[mid] <= target && target <= A[end]) {        start=mid;      } else {        end=mid;      }    }  }  return (A[start] == target) || (A[end] == target);}  }
class C{  @Override public void rangeChanged(ColorMap cMap){  Landscape.getInstance().markDirty(DirtyType.RenderState);}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  protected void handleRenameAction(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  SolrParams params=req.getParams();  String name=params.get(CoreAdminParams.OTHER);  String cname=params.get(CoreAdminParams.CORE);  if (cname.equals(name))   return;  coreContainer.rename(cname,name);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof LineFunction2D)) {    return false;  }  LineFunction2D that=(LineFunction2D)obj;  if (this.a != that.a) {    return false;  }  if (this.b != that.b) {    return false;  }  return true;}  }
class C{  public void init(){}  }
class C{  public Builder soTimeoutMs(int soTimeoutMs){  this.soTimeoutMs=soTimeoutMs;  return this;}  }
class C{  private void dumpNamedIndicesMetadata(final PrintWriter out,final List<String> namespaces,final ICommitRecord commitRecord,final boolean dumpPages,final boolean dumpIndices,final boolean showTuples){  final Iterator<String> nitr=journal.indexNameScan(null,commitRecord.getTimestamp());  final Map<String,BaseIndexStats> pageStats=new TreeMap<String,BaseIndexStats>();  while (nitr.hasNext()) {    final String name=nitr.next();    if (namespaces != null && !namespaces.isEmpty()) {      boolean found=false;      for (      String namespace : namespaces) {        if (name.startsWith(namespace)) {          found=true;          break;        }      }      if (!found) {        continue;      }    }    out.println("name=" + name);    final ICheckpointProtocol ndx;    try {      ndx=journal.getIndexWithCommitRecord(name,commitRecord);    } catch (    Throwable t) {      if (InnerCause.isInnerCause(t,ClassNotFoundException.class)) {        log.warn("Could not load index: " + InnerCause.getInnerCause(t,ClassNotFoundException.class));        continue;      } else       throw new RuntimeException(t);    }    out.println("\t" + ndx.getCheckpoint());    out.println("\t" + ndx.getIndexMetadata());{      final BaseIndexStats stats=ndx.dumpPages(dumpPages,dumpPages);      out.println("\t" + stats);      pageStats.put(name,stats);      if (dumpIndices) {        if (ndx instanceof AbstractBTree) {          DumpIndex.dumpIndex((AbstractBTree)ndx,showTuples);        }      }    }  }  BaseIndexStats.writeOn(out,pageStats);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputFile=null;  int minClass;  int maxClass;  int numClasses;  int i1, i2;  int[][] contingency;  double[] data1, data2;  double z1, z2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputFile=args[2];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    minClass=(int)(Math.min(image1.getMinimumValue(),image2.getMinimumValue()));    maxClass=(int)(Math.max(image1.getMaximumValue(),image2.getMaximumValue()));    numClasses=maxClass - minClass + 1;    contingency=new int[numClasses][numClasses];    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if (z1 != noData1 && z2 != noData2) {          i1=(int)(z1 - minClass);          i2=(int)(z2 - minClass);          contingency[i1][i2]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    image1.close();    image2.close();    double agreements=0;    double expectedFrequency=0;    double N=0;    double rowTotal=0;    double colTotal=0;    double kappa=0;    double overallAccuracy=0;    for (int a=0; a <= numClasses - 1; a++) {      agreements+=contingency[a][a];      for (int b=0; b <= numClasses - 1; b++) {        N+=contingency[a][b];      }    }    for (int a=0; a <= numClasses - 1; a++) {      rowTotal=0;      colTotal=0;      for (int b=0; b <= numClasses - 1; b++) {        colTotal+=contingency[a][b];        rowTotal+=contingency[b][a];      }      expectedFrequency+=(colTotal * rowTotal) / N;    }    kappa=(agreements - expectedFrequency) / (N - expectedFrequency);    overallAccuracy=agreements / N;    File file=new File(outputFile);    FileWriter fw=null;    BufferedWriter bw=null;    PrintWriter out=null;    try {      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      String str;      str="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";      out.println(str);      str="<head>";      out.println(str);      str="<meta content=\"text/html; charset=iso-8859-1\" http-equiv=\"content-type\"><title>Kappa Index of Agreement Output</title>";      out.println(str);      str="</head>";      out.println(str);      str="<body><h1>Kappa Index of Agreement</h1>";      out.println(str);      str="<b>Input Images:</b> <br><br><b>Classification Image:</b> " + inputHeader1 + "<br><b>Reference Image:</b> "+ inputHeader2+ "<br>";      out.println(str);      str="<br><b>Contingency Table:</b><br>";      out.println(str);      str="<br><table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr>";      out.println(str);      str="<th colspan=\"2\" rowspan=\"2\"></th><th colspan=\"" + numClasses + "\">Class Image</th><th rowspan=\"2\">Row<br>Totals</th>";      out.println(str);      str="</tr>";      out.println(str);      str="<tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        str="<th>" + (minClass + a) + "</th>";        out.println(str);      }      str="</tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        if (a == 0) {          str="<tr><th rowspan=\"" + numClasses + "\">Ref<br>Image</th> <th>"+ (minClass + a)+ "</th>";          out.println(str);        } else {          str="<tr><th>" + (minClass + a) + "</th>";          out.println(str);        }        rowTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          rowTotal+=contingency[a][b];          str="<td>" + contingency[a][b] + "</td>";          out.println(str);        }        str="<td>" + rowTotal + "</td>";        out.println(str);        str="</tr>";        out.println(str);      }      str="<tr>";      out.println(str);      str="<th colspan=\"2\">Col<br>Totals</th>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[b][a];        }        str="<td>" + colTotal + "</td>";        out.println(str);      }      str="<td><b>N</b>=" + N + "</td></tr>";      out.println(str);      str="</table>";      out.println(str);      str="<br><b>Class Accuracy Statistics:</b><br><br>";      out.println(str);      str="<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr><td><b>Class</b></td><td><b>User's<br>Accuracy</b></td><td><b>Producer's<br>Accuracy</b></td></tr>";      out.println(str);      DecimalFormat df=new DecimalFormat("0.00%");      DecimalFormat df2=new DecimalFormat("0.000");      for (int a=0; a <= numClasses - 1; a++) {        rowTotal=0;        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[a][b];          rowTotal+=contingency[b][a];        }        str="<tr><td>" + a + "</td><td>"+ df.format(contingency[a][a] / colTotal)+ "</td><td>"+ df.format(contingency[a][a] / rowTotal)+ "</td></tr>";        out.println(str);      }      str="</table>";      out.println(str);      str="<br>Note: User's accuracy refers to the proportion of cells correctly assigned to a class (i.e. the number of cells correctly classified for a category divided by the row total in the contingency table). " + "Producer's accuracy is a measure of how much of the land in each category was classified correctly (i.e. the number of cells correctly classified for a category divided by the column total in the contingency table).<br>";      out.println(str);      str="<br><b>Overall Accuracy</b> = " + df.format(overallAccuracy);      out.println(str);      str="<br><br><b>Kappa</b> = " + df2.format(kappa);      out.println(str);      str="</body>";      out.println(str);    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    } finally {      if (out != null || bw != null) {        out.flush();        out.close();      }    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean containsConstant(Enum<?>[] enumValues,String constant){  return containsConstant(enumValues,constant,false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().isDoingImportScan() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static int cs_cumsum(int[] p,int[] c,int n){  int i, nz=0;  double nz2=0;  if (p == null || c == null)   return (-1);  for (i=0; i < n; i++) {    p[i]=nz;    nz+=c[i];    nz2+=c[i];    c[i]=p[i];  }  p[n]=nz;  return (int)nz2;}  }
class C{  public final boolean isRemoteStreamLive() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  MediaInfo info=getRemoteMediaInformation();  return (info != null) && (info.getStreamType() == MediaInfo.STREAM_TYPE_LIVE);}  }
class C{  public static boolean regressEvalLinear(Regressor instance){  return regressEvalLinear(instance,500,100);}  }
class C{  public static void removeCachedFile(CachedFile cf){  removeCachedFile((File)cf);}  }
class C{  public CourtesyHistogram(final int binSize){  this(binSize,30 * 3600 / binSize + 1);}  }
class C{  public KeyValue itemKeyValue(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_KEYVALUE,i);  if (e != null) {    return new KeyValue(e,this.baseURI);  }  return null;}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled) {    int x=touch.x;    if (mRemoveMode == SLIDE_RIGHT_REMOVE) {      int width=mDslv.getWidth();      int thirdWidth=width / 3;      float alpha;      if (x < thirdWidth) {        alpha=1.0f;      } else       if (x < width - thirdWidth) {        alpha=((float)(width - thirdWidth - x)) / ((float)thirdWidth);      } else {        alpha=0.0f;      }      mDslv.setFloatAlpha(mOrigFloatAlpha * alpha);    } else     if (mRemoveMode == SLIDE_LEFT_REMOVE) {      int width=mDslv.getWidth();      int thirdWidth=width / 3;      float alpha;      if (x < thirdWidth) {        alpha=0.0f;      } else       if (x < width - thirdWidth) {        alpha=((float)(x - thirdWidth)) / ((float)thirdWidth);      } else {        alpha=1.0f;      }      mDslv.setFloatAlpha(mOrigFloatAlpha * alpha);    }  }}  }
class C{  private void start(){  if (modules.get() == null) {    LEnv.LOGGER.error("No modules bean, cannot proceed to Start!");    return;  }  try {    final List<URL> cpUrlList=new ArrayList<>();    for (    final ModuleBean mod : modules.get().getModList()) {      for (      final FileBean file : mod.getFileList()) {        if (!isClassPathEntry(file))         continue;        Path filePath=Paths.get(file.getPath());        filePath=LEnv.PATH_APP.resolve(filePath.subpath(1,filePath.getNameCount()));        cpUrlList.add(filePath.toUri().toURL());      }    }    @SuppressWarnings("resource") final URLClassLoader ucl=new URLClassLoader(cpUrlList.toArray(new URL[cpUrlList.size()]),getClass().getClassLoader());    ucl.loadClass("hu.scelight.Scelight").getConstructor().newInstance();    LEnv.LAUNCHER_FRAME.close();  } catch (  final Exception e) {    LEnv.LOGGER.error("Failed to launch " + LConsts.APP_NAME + "!",e);    LEnv.LAUNCHER_FRAME.setStatus(StatusType.ERROR,"Failed to start " + LConsts.APP_NAME + "! See the Logs for details! You must restart "+ LConsts.LAUNCHER_NAME+ " to retry!");    LEnv.LAUNCHER_FRAME.setProceedEnabled(false);    LEnv.LAUNCHER_FRAME.selectLogsPage();  }}  }
class C{  @NotNull @ObjectiveCName("requestPhoneCall") public Command<Boolean> requestPhoneCall(){  return modules.getAuthModule().requestCallActivation();}  }
class C{  public void reset(){  min=Double.POSITIVE_INFINITY;  max=Double.NEGATIVE_INFINITY;}  }
class C{  void recomposeVariables(ElemVariable elemVar){  if (getVariableOrParamComposed(elemVar.getName()) == null) {    elemVar.setIsTopLevel(true);    elemVar.setIndex(m_variables.size());    m_variables.addElement(elemVar);  }}  }
class C{  public void put(Locale locale,PriceModelContent content){  localizedPriceModelContent.put(locale,content);}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public static void print(Object self,Object value){  if (self instanceof Writer) {    try {      ((Writer)self).write(InvokerHelper.toString(value));    } catch (    IOException e) {    }  } else {    System.out.print(InvokerHelper.toString(value));  }}  }
class C{  private HashMapEntry<K,V>[] doubleCapacity(){  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashMapEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashMapEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashMapEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  public static boolean shouldAddParamJavadoc(MethodDeclaration methodDeclaration){  Javadoc javadoc=methodDeclaration.getJavadoc();  if (javadoc == null)   return false;  if (methodDeclaration.parameters().size() == 0)   return true;  List<TagElement> tags=javadoc.tags();  for (Iterator<TagElement> iter=tags.iterator(); iter.hasNext(); ) {    TagElement element=iter.next();    if (TagElement.TAG_PARAM.equals(element.getTagName()))     return true;  }  return false;}  }
class C{  public static String createTestPtStationCSVFile(){  String location=TempDirectoryUtil.createCustomTempDirectory("ptStopFileDir") + "/ptStops.csv";  BufferedWriter bw=IOUtils.getBufferedWriter(location);  try {    bw.write("id,x,y" + org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE);    bw.write("1,10,10" + org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE);    bw.write("2,10, 190" + org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE);    bw.write("3,190,190" + org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE);    bw.write("4,190,10" + org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE);    bw.flush();    bw.close();  } catch (  Exception e) {    e.printStackTrace();  }  return location;}  }
class C{  public static org.oscm.vo.VOCompatibleService convertToApi(org.oscm.internal.vo.VOCompatibleService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOCompatibleService newVO=new org.oscm.vo.VOCompatibleService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToApiVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToApi(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.types.enumtypes.OfferingType.class));  newVO.setCompatible(oldVO.isCompatible());  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  static public void qsort(Object[] array,SortComparator comp){  qsort_h(array,0,array.length - 1,comp);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== HeaderPartition ======================\n");  sb.append(this.getPartitionPack().toString());  sb.append(this.getPrimerPack().toString());  sb.append(this.getPreface().toString());  Set<Map.Entry<String,List<InterchangeObject>>> entrySet=this.interchangeObjectsMap.entrySet();  for (  Map.Entry<String,List<InterchangeObject>> entry : entrySet) {    if (entry.getKey().equals(ContentStorage.class.getSimpleName())) {      sb.append(this.interchangeObjectsMap.get(ContentStorage.class.getSimpleName()).get(0).toString());    } else     if (!entry.getKey().equals(Preface.class.getSimpleName())) {      for (      InterchangeObject object : entry.getValue()) {        sb.append(object.toString());      }    }  }  return sb.toString();}  }
class C{  public void breakpointReached(BreakpointEvent event){  println("Got BreakpointEvent");  locatableEvent(event,event.location());}  }
class C{  public int skipBytes(int n) throws IOException {  seek(getFilePointer() + n);  return n;}  }
class C{  private static int supplementalHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public static <T>boolean addAll(Collection<T> self,T[] items){  return self.addAll(Arrays.asList(items));}  }
class C{  public void addDataValue(double val){  n++;  total+=val;  StdDraw.setPenColor(StdDraw.DARK_GRAY);  StdDraw.point(n,val);  StdDraw.setPenColor(StdDraw.RED);  StdDraw.point(n,total / n);}  }
class C{  public String next(){  append("NEXT PAGE button pressed");  int first=data.getFirst();  scroll(first + data.getRows());  return (null);}  }
class C{  public boolean forEachIndexFromToInState(int from,int to,boolean state,cern.colt.function.IntProcedure procedure){  if (nbits == 0)   return true;  checkRangeFromTo(from,to,nbits);  final long[] theBits=this.bits;  final int bitsPerUnit=QuickBitVector.BITS_PER_UNIT;  int fromUnit=QuickBitVector.unit(from);  int toUnit=QuickBitVector.unit(to);  int i=from;  int bitIndex=QuickBitVector.offset(from);  int partialWidth;  if (bitIndex > 0) {    partialWidth=Math.min(to - from + 1,bitsPerUnit - bitIndex);    for (; --partialWidth >= 0; i++) {      if (QuickBitVector.get(theBits,i) == state) {        if (!procedure.apply(i))         return false;      }    }    fromUnit++;  }  if (i > to)   return true;  bitIndex=QuickBitVector.offset(to);  if (bitIndex < bitsPerUnit - 1) {    toUnit--;    partialWidth=bitIndex + 1;  } else {    partialWidth=0;  }  long comparator;  if (state)   comparator=0L; else   comparator=~0L;  for (int unit=fromUnit; unit <= toUnit; unit++) {    long val=theBits[unit];    if (val != comparator) {      if (state) {        for (int j=0, k=bitsPerUnit; --k >= 0; i++) {          if ((val & (1L << j++)) != 0L) {            if (!procedure.apply(i))             return false;          }        }      } else {        for (int j=0, k=bitsPerUnit; --k >= 0; i++) {          if ((val & (1L << j++)) == 0L) {            if (!procedure.apply(i))             return false;          }        }      }    } else {      i+=bitsPerUnit;    }  }  for (; --partialWidth >= 0; i++) {    if (QuickBitVector.get(theBits,i) == state) {      if (!procedure.apply(i))       return false;    }  }  return true;}  }
class C{  public static void printStackTrace(Throwable e,PrintWriter out){  StackTraceElement lastHead=null;  ClassLoader loader=SimpleLoader.create(WorkDir.getLocalWorkDir());  while (true) {    if (e.getMessage() != null)     out.println(e.getClass().getName() + ": " + e.getMessage()); else     out.println(e.getClass().getName());    StackTraceElement[] trace=e.getStackTrace();    StackTraceElement nextHead=trace.length > 0 ? trace[0] : null;    for (int i=0; i < trace.length; i++) {      if (trace[i].equals(lastHead))       break;      out.print("\tat ");      printStackTraceElement(trace[i],out,loader);    }    lastHead=nextHead;    Throwable cause=e.getCause();    if (cause != null) {      out.print("Caused by: ");      e=cause;    } else     break;  }}  }
class C{  public final double[] weights(Instance instance){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.485 -0500",hash_original_method="DDAEED1DEC80DD4893B8BEC6C1C4D0F1",hash_generated_method="35F783713680EB8370629FE1B8AFEEA2") protected final void transitionTo(IState destState){  mSmHandler.transitionTo(destState);}  }
class C{  public void write(String text){  buffer.append(text);}  }
class C{  boolean sequenceScroll(int direction){  int selectedPosition=mSelectedPosition;  int numColumns=mNumColumns;  int count=mItemCount;  int startOfRow;  int endOfRow;  if (!mStackFromBottom) {    startOfRow=(selectedPosition / numColumns) * numColumns;    endOfRow=Math.min(startOfRow + numColumns - 1,count - 1);  } else {    int invertedSelection=count - 1 - selectedPosition;    endOfRow=count - 1 - (invertedSelection / numColumns) * numColumns;    startOfRow=Math.max(0,endOfRow - numColumns + 1);  }  boolean moved=false;  boolean showScroll=false;switch (direction) {case FOCUS_FORWARD:    if (selectedPosition < count - 1) {      mLayoutMode=LAYOUT_MOVE_SELECTION;      setSelectionInt(selectedPosition + 1);      moved=true;      showScroll=selectedPosition == endOfRow;    }  break;case FOCUS_BACKWARD:if (selectedPosition > 0) {  mLayoutMode=LAYOUT_MOVE_SELECTION;  setSelectionInt(selectedPosition - 1);  moved=true;  showScroll=selectedPosition == startOfRow;}break;}if (moved) {playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));invokeOnItemScrollListener();}if (showScroll) {awakenScrollBars();}return moved;}  }
class C{  public static byte[] toIPv4AddressBytes(String ipAddress){  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  byte[] result=new byte[4];  for (int i=0; i < 4; ++i) {    result[i]=Integer.valueOf(octets[i]).byteValue();  }  return result;}  }
class C{  public String toUpperCase(){  return toUpperCase(Locale.getDefault());}  }
class C{  CipherBox newCipher(ProtocolVersion version,SecretKey key,IvParameterSpec iv,SecureRandom random,boolean encrypt) throws NoSuchAlgorithmException {  return CipherBox.newCipherBox(version,this,key,iv,random,encrypt);}  }
class C{  protected void optimizeJoinGroup(final AST2BOpContext ctx,final StaticAnalysis sa,final IBindingSet[] bSets,final JoinGroupNode group){  for (  PropertyPathNode node : group.getChildren(PropertyPathNode.class)) {    optimize(ctx,sa,group,node,null);  }}  }
class C{  private float calcAngle(float value){  return value / mData.getYValueSum() * 360f;}  }
class C{  public static boolean writeTag(WifiNetwork wifiNetwork,Tag tag){  return NfcUtils.writeTag(generateNdefMessage(wifiNetwork),tag);}  }
class C{  public static QueryGraph analyze(OuterJoinDesc[] outerJoinDescList,QueryGraph queryGraph){  for (  OuterJoinDesc outerJoinDesc : outerJoinDescList) {    if (outerJoinDesc.getOptLeftNode() != null) {      ExprIdentNode identNodeLeft=outerJoinDesc.getOptLeftNode();      ExprIdentNode identNodeRight=outerJoinDesc.getOptRightNode();      add(queryGraph,identNodeLeft,identNodeRight);      if (outerJoinDesc.getAdditionalLeftNodes() != null) {        for (int i=0; i < outerJoinDesc.getAdditionalLeftNodes().length; i++) {          add(queryGraph,outerJoinDesc.getAdditionalLeftNodes()[i],outerJoinDesc.getAdditionalRightNodes()[i]);        }      }    } else {    }  }  return queryGraph;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.893 -0500",hash_original_method="C50EFF03D3756AF141D5513AF20FE391",hash_generated_method="3D009BCAD09D69EB922B16BA96223D20") public final boolean hasResponseBody(){  int responseCode=responseHeaders.getHeaders().getResponseCode();  if (method != HEAD && method != CONNECT && (responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HttpURLConnectionImpl.HTTP_NO_CONTENT && responseCode != HttpURLConnectionImpl.HTTP_NOT_MODIFIED) {    return true;  }  if (responseHeaders.getContentLength() != -1 || responseHeaders.isChunked()) {    return true;  }  return false;}  }
class C{  public static HttpResponse invokeHttpRequest(URL endpointUrl,String httpMethod,Map<String,String> headers,String requestBody){  HttpURLConnection connection=createHttpConnection(endpointUrl,httpMethod,headers);  try {    if (requestBody != null) {      DataOutputStream wr=new DataOutputStream(connection.getOutputStream());      wr.writeBytes(requestBody);      wr.flush();      wr.close();    }  } catch (  Exception e) {    throw new RuntimeException("Request failed. " + e.getMessage(),e);  }  return executeHttpRequest(connection);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Parameter) {    Parameter other=(Parameter)obj;    return (other.executable.equals(executable) && other.index == index);  }  return false;}  }
class C{  @Override public int available() throws IOException {  if (bb == null) {    throw new IOException("available on a closed InputStream");  }  return bb.remaining();}  }
class C{  @HLEFunction(nid=0x6402490B,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlDelHandler(int id){  checkInitialized();  AdhocctlHandler handler=adhocctlIdMap.remove(id);  if (handler != null) {    handler.delete();  }  return 0;}  }
class C{  public boolean isWithin(final Vector point){  return startCutoffPlane.isWithin(point) && endCutoffPlane.isWithin(point) && upperConnectingPlane.isWithin(point)&& lowerConnectingPlane.isWithin(point);}  }
class C{  private void showAll(Object e){  vis().setAllVisible(true);}  }
class C{  static public ReportEngine startStandardReport(ProcessInfo pi){  ReportEngine re=ReportEngine.get(Env.getCtx(),pi);  if (re == null) {    pi.setSummary("No ReportEngine");    return null;  }  return re;}  }
class C{  public static Label createLabel(Composite parent,String text,int hspan){  Label l=new Label(parent,SWT.NONE);  l.setFont(parent.getFont());  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=false;  l.setLayoutData(gd);  return l;}  }
class C{  public void invoke(long window,int button,int action,int mods){}  }
class C{  @Override public void handlePatch(Operation patch){  State task=getState(patch);  State body=getBody(patch);  if (!validateTransition(patch,task,body)) {    return;  }  TaskState.TaskStage currentStage=task.taskInfo.stage;  SubStage currentSubStage=task.subStage;  if (task.subStage == SubStage.RESTART) {    task.taskInfo.stage=TaskState.TaskStage.STARTED;    task.subStage=SubStage.QUERY;  } else {    updateState(task,body);  }  if (this.isDetailedLoggingEnabled) {    logInfo("Transitioning task from %s-%s to %s-%s",currentStage,currentSubStage,task.taskInfo.stage,task.subStage);  }  boolean isTaskFinished=!TaskState.isInProgress(task.taskInfo);  if (isTaskFinished) {    setFactoryAvailability(task,true,null,patch);  } else {    patch.complete();  }switch (task.taskInfo.stage) {case STARTED:    handleSubStage(task);  break;case CANCELLED:logInfo("Task canceled: not implemented, ignoring");break;case FINISHED:break;case FAILED:logWarning("Task failed: %s",(task.failureMessage != null ? task.failureMessage : "No reason given"));break;default :break;}}  }
class C{  public void recordBlockMirrorOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,String evDesc,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType=opType.getEvType(opStatus);    String opStage=AuditLogManager.AUDITOP_END;    _log.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    BlockMirror mirror=(BlockMirror)extParam[0];    recordBourneBlockMirrorEvent(dbClient,mirror.getId(),evType,status,evDesc);    Volume volume=(Volume)extParam[1];switch (opType) {case CREATE_VOLUME_MIRROR:      if (opStatus) {        AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,mirror.getId().toString(),mirror.getLabel(),volume.getId().toString());      } else {        AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,mirror.getLabel(),volume.getId().toString());      }    break;case DEACTIVATE_VOLUME_MIRROR:case DELETE_VOLUME_MIRROR:case DETACH_VOLUME_MIRROR:case FRACTURE_VOLUME_MIRROR:  AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,mirror.getId().toString(),mirror.getLabel(),volume.getId().toString());break;default :_log.error("unrecognized volume mirror operation type");}} catch (Exception e) {_log.error("Failed to record volume mirror operation {}, err: ",opType.toString(),e);}}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,float value){  buffer.append(value);}  }
class C{  int downloadId(){  return downloadId;}  }
class C{  protected final boolean isHelping(){  return Boolean.TRUE.equals(getHelp());}  }
class C{  public void addMosaic(final Mosaic mosaic){  this.addMosaic(mosaic.getMosaicId(),mosaic.getQuantity());}  }
class C{  public void reset(){  final float[] a=mArray;  for (int i=19; i > 0; --i) {    a[i]=0;  }  a[0]=a[6]=a[12]=a[18]=1;}  }
class C{  public static String timeString(int hour,int minute){  String ampm;  if (hour < 12) {    ampm="AM";    if (hour == 0) {      hour=12;    }  } else {    ampm="PM";    hour=hour - 12;  }  return String.format("%02d:%02d %s",hour,minute,ampm);}  }
class C{  public static void register(final InventoryType element){  ASimpleEnum.register(InventoryType.class,element);  if (!element.getMinecraftId().isEmpty()) {    byMcId.put(element.getMinecraftId(),element);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public int checkIfMapObjectExist(final List<HashMap<String,Object>> paramList,final Object[] arrayObjectInitialIndexTemp){  int check=-1;  for (int m=0; m < paramList.size(); m++) {    final HashMap<String,Object> objHashMapTemp=paramList.get(m);    if (arrayObjectInitialIndexTemp[1] != null && arrayObjectInitialIndexTemp[2] != null)     if (arrayObjectInitialIndexTemp[1].equals(objHashMapTemp.get(CollectionConstants.BANKREMITTANCE_RECEIPTDATE)) && arrayObjectInitialIndexTemp[2].equals(objHashMapTemp.get(CollectionConstants.BANKREMITTANCE_SERVICENAME)) && arrayObjectInitialIndexTemp[6].equals(objHashMapTemp.get(CollectionConstants.BANKREMITTANCE_FUNDCODE))&& arrayObjectInitialIndexTemp[7].equals(objHashMapTemp.get(CollectionConstants.BANKREMITTANCE_DEPARTMENTCODE))) {      check=m;      break;    } else     continue;  }  return check;}  }
class C{  public static String ago(final Calendar date){  final Calendar now=Calendar.getInstance();  final double seconds=(now.getTimeInMillis() - date.getTimeInMillis()) / 1000;  return formatTimeSpan(seconds);}  }
class C{  public FutureResult(Object value){  this.value=value;  this.latch=null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.874 -0500",hash_original_method="8D01996EB7B68AD896BC3623C3BCF2F5",hash_generated_method="E3B8323B4E1DE71A252FFB148966DCBC") public static String toString(long ntpTime){  StringBuffer buf=new StringBuffer();  appendHexString(buf,(ntpTime >>> 32) & 0xffffffffL);  buf.append('.');  appendHexString(buf,ntpTime & 0xffffffffL);  return buf.toString();}  }
class C{  public void removePanel(AbstractPanel panel,PanelType panelType){  validateNotNull(panel,"panel");  validateNotNull(panelType,"panelType");  removeTabPanel(getTabbedFull(),panel);  getTabbedFull().revalidate();switch (panelType) {case SELECT:    removeTabPanel(getTabbedSelect(),panel);  getTabbedSelect().revalidate();break;case STATUS:removeTabPanel(getTabbedStatus(),panel);getTabbedStatus().revalidate();break;case WORK:removeTabPanel(getTabbedWork(),panel);getTabbedWork().revalidate();break;default :break;}}  }
class C{  public int size(){  return 1;}  }
class C{  public Builder detectAll(){  return enable(ALL_THREAD_DETECT_BITS);}  }
class C{  public ListProperty(){  values=new ArrayList<T>();}  }
class C{  public void positionClosed(TradePosition trade){}  }
class C{  protected synchronized void syncUpdate() throws SQLException {  if (this.updater == null) {    if (this.updateSQL == null) {      generateStatements();    }    this.updater=(PreparedStatement)this.connection.clientPrepareStatement(this.updateSQL);  }  int numFields=this.fields.length;  this.updater.clearParameters();  for (int i=0; i < numFields; i++) {    if (this.thisRow.getColumnValue(i) != null) {      if (this.fields[i].getvalueNeedsQuoting()) {        this.updater.setBytes(i + 1,this.thisRow.getColumnValue(i),this.fields[i].isBinary(),false);      } else {        this.updater.setBytesNoEscapeNoQuotes(i + 1,this.thisRow.getColumnValue(i));      }    } else {      this.updater.setNull(i + 1,0);    }  }  int numKeys=this.primaryKeyIndicies.size();  if (numKeys == 1) {    int index=this.primaryKeyIndicies.get(0).intValue();    this.setParamValue(this.updater,numFields + 1,this.thisRow,index,this.fields[index].getSQLType());  } else {    for (int i=0; i < numKeys; i++) {      int idx=this.primaryKeyIndicies.get(i).intValue();      this.setParamValue(this.updater,numFields + i + 1,this.thisRow,idx,this.fields[idx].getSQLType());    }  }}  }
class C{  public void visitAnnotations(AnnotatedNode node){}  }
class C{  public boolean isSecureRtpOverWifi(){  return readBoolean(RcsSettingsData.SECURE_RTP_OVER_WIFI);}  }
class C{  @Override public void doSaveAs(){  SaveAsDialog saveAsDialog=new SaveAsDialog(getSite().getShell());  saveAsDialog.open();  IPath path=saveAsDialog.getResult();  if (path != null) {    IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);    if (file != null) {      doSaveAs(URI.createPlatformResourceURI(file.getFullPath().toString(),true),new FileEditorInput(file));    }  }}  }
class C{  private final Object arenaExchange(Object item,boolean timed,long ns){  Node[] a=arena;  Node p=participant.get();  for (int i=p.index; ; ) {    int b, m, c;    long j;    Node q=(Node)U.getObjectVolatile(a,j=(i << ASHIFT) + ABASE);    if (q != null && U.compareAndSwapObject(a,j,q,null)) {      Object v=q.item;      q.match=item;      Thread w=q.parked;      if (w != null)       U.unpark(w);      return v;    } else     if (i <= (m=(b=bound) & MMASK) && q == null) {      p.item=item;      if (U.compareAndSwapObject(a,j,null,p)) {        long end=(timed && m == 0) ? System.nanoTime() + ns : 0L;        Thread t=Thread.currentThread();        for (int h=p.hash, spins=SPINS; ; ) {          Object v=p.match;          if (v != null) {            U.putOrderedObject(p,MATCH,null);            p.item=null;            p.hash=h;            return v;          } else           if (spins > 0) {            h^=h << 1;            h^=h >>> 3;            h^=h << 10;            if (h == 0)             h=SPINS | (int)t.getId(); else             if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)             Thread.yield();          } else           if (U.getObjectVolatile(a,j) != p)           spins=SPINS; else           if (!t.isInterrupted() && m == 0 && (!timed || (ns=end - System.nanoTime()) > 0L)) {            U.putObject(t,BLOCKER,this);            p.parked=t;            if (U.getObjectVolatile(a,j) == p)             U.park(false,ns);            p.parked=null;            U.putObject(t,BLOCKER,null);          } else           if (U.getObjectVolatile(a,j) == p && U.compareAndSwapObject(a,j,p,null)) {            if (m != 0)             U.compareAndSwapInt(this,BOUND,b,b + SEQ - 1);            p.item=null;            p.hash=h;            i=p.index>>>=1;            if (Thread.interrupted())             return null;            if (timed && m == 0 && ns <= 0L)             return TIMED_OUT;            break;          }        }      } else       p.item=null;    } else {      if (p.bound != b) {        p.bound=b;        p.collides=0;        i=(i != m || m == 0) ? m : m - 1;      } else       if ((c=p.collides) < m || m == FULL || !U.compareAndSwapInt(this,BOUND,b,b + SEQ + 1)) {        p.collides=c + 1;        i=(i == 0) ? m : i - 1;      } else       i=m + 1;      p.index=i;    }  }}  }
class C{  public BinaryMemcacheClient<V> connectBinary(){  return new DefaultBinaryMemcacheClient<>(connectRaw(true),metrics,valueTranscoder,charset);}  }
class C{  public String globalInfo(){  return "A filter that removes a given percentage of a dataset.";}  }
class C{  public static byte[] toByteArray(double[] data){  byte[] tmp, result=new byte[data.length * 8];  for (int i=0; i < data.length; i++) {    tmp=toBytes(data[i]);    System.arraycopy(tmp,0,result,i * 8,8);  }  return result;}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  @JsfTest(value=JSF_2_2_0) @Test public void testValidateEmptyFields() throws Exception {  HtmlPage page=webClient.getPage(webUrl + "faces/index.xhtml");  if (page.getWebResponse().getResponseHeaderValue("Server") == null || !page.getWebResponse().getResponseHeaderValue("Server").startsWith("Apache-Coyote")) {    page=webClient.getPage(webUrl + "faces/verifyEmptyAsNull.xhtml");    HtmlInput stringInput=page.getHtmlElementById("form:string");    HtmlInput integerInput=page.getHtmlElementById("form:integer");    assertNotNull(stringInput);    assertNotNull(integerInput);    assertEquals(stringInput.getValueAttribute(),"");    assertEquals(integerInput.getValueAttribute(),"");    String pageAsText=page.asText();    assertTrue(pageAsText.contains("VC1 Fired: false"));    assertTrue(pageAsText.contains("VC2 Fired: false"));    assertTrue(pageAsText.contains("String model set with null: false"));    assertTrue(pageAsText.contains("Integer model set with null: false"));    HtmlSubmitInput submit=(HtmlSubmitInput)page.getHtmlElementById("form:command");    assertNotNull(submit);    stringInput.setValueAttribute("11");    integerInput.setValueAttribute("11");    page=(HtmlPage)submit.click();    stringInput=page.getHtmlElementById("form:string");    integerInput=page.getHtmlElementById("form:integer");    assertNotNull(stringInput);    assertNotNull(integerInput);    assertEquals(stringInput.getValueAttribute(),"11");    assertEquals(integerInput.getValueAttribute(),"11");    pageAsText=page.asText();    assertTrue(pageAsText.contains("VC1 Fired: true"));    assertTrue(pageAsText.contains("VC2 Fired: true"));    assertTrue(pageAsText.contains("String model set with null: false"));    assertTrue(pageAsText.contains("Integer model set with null: false"));    submit=(HtmlSubmitInput)page.getHtmlElementById("form:command");    assertNotNull(submit);    stringInput.setValueAttribute("");    integerInput.setValueAttribute("");    page=(HtmlPage)submit.click();    stringInput=page.getHtmlElementById("form:string");    integerInput=page.getHtmlElementById("form:integer");    assertNotNull(stringInput);    assertNotNull(integerInput);    assertEquals(stringInput.getValueAttribute(),"");    assertEquals(integerInput.getValueAttribute(),"");    pageAsText=page.asText();    assertTrue(pageAsText.contains("VC1 Fired: true"));    assertTrue(pageAsText.contains("VC2 Fired: true"));    assertTrue(pageAsText.contains("String model set with null: true"));    assertTrue(pageAsText.contains("Integer model set with null: true"));    submit=(HtmlSubmitInput)page.getHtmlElementById("form:command");    assertNotNull(submit);    stringInput.setValueAttribute("");    integerInput.setValueAttribute("");    page=(HtmlPage)submit.click();    stringInput=page.getHtmlElementById("form:string");    integerInput=page.getHtmlElementById("form:integer");    assertNotNull(stringInput);    assertNotNull(integerInput);    assertEquals(stringInput.getValueAttribute(),"");    assertEquals(integerInput.getValueAttribute(),"");    pageAsText=page.asText();    assertTrue(pageAsText.contains("VC1 Fired: false"));    assertTrue(pageAsText.contains("VC2 Fired: false"));    assertTrue(pageAsText.contains("String model set with null: true"));    assertTrue(pageAsText.contains("Integer model set with null: true"));  }}  }
class C{  public static List<Dashboard> findSharedDashboards(EntityManager em){  TypedQuery<Dashboard> query=em.createNamedQuery("Dashboard.getSharedDashboards",Dashboard.class);  try {    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public final boolean addAll(E[] array){  if (array == null)   return false;  boolean changed=false;  for (int i=0; i < array.length; i++)   changed|=this.add(array[i]);  return changed;}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  return s.toString();}  }
class C{  public MailResourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public static void main(String[] args){  TestRunner.run(AggregatorTest.class);}  }
class C{  public static String shorten(final INaviView view){  final String name=view.getName();  return name.length() <= MAXIMUM_SIZE ? name : name.substring(0,MAXIMUM_SIZE) + "...";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println("Compute task map example started.");    int cnt=ignite.compute().execute(MapExampleCharacterCountTask.class,"Hello Ignite Enabled World!");    System.out.println();    System.out.println(">>> Total number of characters in the phrase is '" + cnt + "'.");    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public OrderPositionKey(AbstractOrder<?,?> ord,Integer posNo){  super();  this.positionNo=posNo;  this.orderId=ord.getOrderId();}  }
class C{  public ArithmeticException(java.lang.String s){}  }
class C{  private static WriterBolt createInvalidBolt(String brokerUrl,String sensorType,ParserConfigurations configs,SensorParserConfig parserConfig){  AbstractWriter writer=parserConfig.getErrorWriterClassName() == null ? new KafkaWriter(brokerUrl).withTopic(Constants.DEFAULT_PARSER_INVALID_TOPIC).withConfigPrefix("invalid") : ReflectionUtils.createInstance(parserConfig.getWriterClassName());  writer.configure(sensorType,new ParserWriterConfiguration(configs));  WriterHandler writerHandler=createWriterHandler(writer);  return new WriterBolt(writerHandler,configs,sensorType);}  }
class C{  static int computePreferredBufferSize(int dataLength){  if (dataLength > DEFAULT_BUFFER_SIZE)   return DEFAULT_BUFFER_SIZE;  return dataLength;}  }
class C{  public static void addAttributesButtonsTo(JToolBar bar,DrawingEditor editor){  JButton b;  b=bar.add(new PickAttributesAction(editor));  b.setFocusable(false);  b=bar.add(new ApplyAttributesAction(editor));  b.setFocusable(false);  bar.addSeparator();  addColorButtonsTo(bar,editor);  bar.addSeparator();  addStrokeButtonsTo(bar,editor);  bar.addSeparator();  addFontButtonsTo(bar,editor);}  }
class C{  public JedisSentinelPool(String poolName,HostAndPort[] sentinelAddresses,String masterName,ConnectionInfo masterConnectionInfo,JedisPoolConfig masterPoolConfig){  this.poolName=poolName;  assertArgument(((sentinelAddresses == null) || (sentinelAddresses.length == 0)),"seintinelInfos is not set");  for (  HostAndPort sentinelAddress : sentinelAddresses) {    JedisPool sentinelPool=new JedisDirectPool(poolName + "-sentinel",sentinelAddress,new JedisPoolConfig());    sentinelPools.add(sentinelPool);  }  assertArgument(masterConnectionInfo == null,"masterConnectionInfo is not set");  this.masterConnectionInfo=masterConnectionInfo;  assertArgument(((masterName == null) || masterName.isEmpty()),"masterName is not set");  this.masterName=masterName;  assertArgument(masterPoolConfig == null,"masterPoolConfig is not set");  this.masterPoolConfig=masterPoolConfig;  masterSwitchListener=new MasterSwitchListener();  masterSwitchListener.start();  try {    if (!poolInit.await(5,TimeUnit.SECONDS)) {      logger.warn("the sentiel pool can't not init in 5 seconds");    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  protected void sequence_ImportClause_ImportDeclaration_ImportDeclarationImpl_ImportSpecifiersExceptDefault(ISerializationContext context,ImportDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.936 -0500",hash_original_method="7333A4F184A018E8DCD665D788936108",hash_generated_method="DDE001E2C94ED57A95C9B868FAEDFEAD") public void union(RectF r){  union(r.left,r.top,r.right,r.bottom);}  }
class C{  public Utf8Reader(InputStream in){  super(in,Charset.forName("UTF-8"));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean contains(float x,float y){  return isInside(ShapeUtil.crossShape(this,x,y));}  }
class C{  public void drawWorld(){  StdDraw.clear();  StdDraw.setPenColor(StdDraw.BLACK);  StdDraw.setXscale(0,N);  StdDraw.setYscale(0,N);  StdDraw.filledSquare(N / 2.0,N / 2.0,N / 2.0);  for (int x=0; x < N; x+=1) {    for (int y=0; y < N; y+=1) {      Occupant o=getOccupant(x,y);      StdDraw.setPenColor(o.color());      StdDraw.filledSquare(x + 0.5,y + 0.5,0.45);    }  }}  }
class C{  public Method newMethod(Class<?> declaringClass,String name,Class<?>[] parameterTypes,Class<?> returnType,Class<?>[] checkedExceptions,int modifiers,int slot,String signature,byte[] annotations,byte[] parameterAnnotations,byte[] annotationDefault){  return langReflectAccess().newMethod(declaringClass,name,parameterTypes,returnType,checkedExceptions,modifiers,slot,signature,annotations,parameterAnnotations,annotationDefault);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("QSAX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QSAX");    translateAll(environment,instruction,"QSAX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QSUBADDX");    translateAll(environment,instruction,"QSUBADDX",instructions);  }}  }
class C{  public static _InformationEditOptions fromString(final String value) throws SOAPSerializationException {  return (_InformationEditOptions)Enumeration.fromString(value,_InformationEditOptions.VALUES_TO_INSTANCES);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private T removeItem(int position){  final T speaker=dataList.remove(position);  notifyItemRemoved(position);  return speaker;}  }
class C{  public void test_sameIndexObject(){  final Journal journal=getStore();  try {    final String name="abc";{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      journal.commit();    }    final long tx1=journal.newTx(ITx.UNISOLATED);    final IIndex ndx1=journal.getIndex(name,tx1);    assertNotNull(ndx1);    final long tx2=journal.newTx(ITx.UNISOLATED);    final IIndex ndx2=journal.getIndex(name,tx2);    assertTrue(tx1 != tx2);    assertTrue(ndx1 != ndx2);    assertNotNull(ndx2);    assertTrue(ndx1 == journal.getIndex(name,tx1));    assertTrue(ndx2 == journal.getIndex(name,tx2));  }  finally {    journal.destroy();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributens02.class,args);}  }
class C{  @CanIgnoreReturnValue public Stopwatch start(){  checkState(!isRunning,"This stopwatch is already running.");  isRunning=true;  startTick=ticker.read();  return this;}  }
class C{  public void update(List<UserReport> repList){  File idxFile=new File(userroot,idxfile);  FileWriter fw=null;  try {    fw=new FileWriter(idxFile);    for (    UserReport urp : repList) {      String line=urp.encodeLine() + lineSeparator;      fw.write(line);    }  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);  } finally {    try {      if (fw != null)       fw.close();    } catch (    Exception iex) {    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static boolean isServerProblem(Object error){  return (error instanceof ServerError) || (error instanceof AuthFailureError);}  }
class C{  public void AddColumn(Column column,int index){  if (index - 1 > columns.size())   columns.add(column); else   columns.add(index - 1,column);}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public ChatResponse chat(ChatConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/post-chat",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ChatResponse response=new ChatResponse();    response.parseXML(root);    return response;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public URI source(){  return source;}  }
class C{  protected void drawBorder(DrawingContext context){  Stroke stroke=getBorderStroke();  if (stroke != null) {    Paint borderColor=getBorderColor();    GraphicsUtils.drawPaintedShape(context.getGraphics(),getBounds(),borderColor,null,stroke);  }}  }
class C{  public AutomationItem addNewItem(int sequence){  AutomationItem item=addItem();  if (sequence < 0 || sequence > getSize()) {    return item;  }  for (int i=0; i < getSize() - sequence - 1; i++) {    moveItemUp(item);  }  return item;}  }
class C{  Resource(ResourceId resourceId,boolean serializable,String className){  this.r=null;  this.resourceId=resourceId;  this.serializable=serializable;  this.className=className;}  }
class C{  public static String join(List<?> items,char separator){  StringBuilder sb=new StringBuilder(items.size() << 3);  boolean first=true;  for (  Object o : items) {    String item=o.toString();    if (first) {      first=false;    } else {      sb.append(separator);    }    appendEscapedTextToBuilder(sb,item,separator);  }  return sb.toString();}  }
class C{  protected IntersectionTypeExpressionImpl(){  super();}  }
class C{  public boolean isDhcp(){  return dhcp;}  }
class C{  private Expression incrementByOne(Expression expr,ParserRuleContext ctx){  Expression.BinaryOp bop=Expression.getBinaryOp("+");  Expression retVal=new BinaryExpression(bop);  ((BinaryExpression)retVal).setLeft(expr);  int line=ctx.start.getLine();  int col=ctx.start.getCharPositionInLine();  ((BinaryExpression)retVal).setRight(new DoubleIdentifier(1.0,currentFile,line,col,line,col));  setFileLineColumn(retVal,ctx);  return retVal;}  }
class C{  public void search(SearchPattern pattern,SearchParticipant[] participants,IJavaSearchScope scope,SearchRequestor requestor,IProgressMonitor monitor) throws CoreException {  if (VERBOSE) {    Util.verbose("BasicSearchEngine.search(SearchPattern, SearchParticipant[], IJavaSearchScope, SearchRequestor, IProgressMonitor)");  }  findMatches(pattern,participants,scope,requestor,monitor);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SSUB16");  translateAll(environment,instruction,"SSUB16",instructions);}  }
class C{  public SPOAssertionBuffer(AbstractTripleStore focusStore,AbstractTripleStore db,IElementFilter<ISPO> filter,int capacity,boolean justified,final IChangeLog changeLog){  super(db,filter,capacity);  if (focusStore == null)   throw new IllegalArgumentException();  if (db == null)   throw new IllegalArgumentException();  this.db=db;  this.focusStore=focusStore;  this.justify=justified;  justifications=justified ? new Justification[capacity] : null;  this.changeLog=changeLog;}  }
class C{  public ExtensionListing compatible(boolean compatible){  mCompatible=compatible;  return this;}  }
class C{  private void adjustReports(Vector<Report> reports){  for (  Report nr : reports) {    nr.indent();  }  if (reports.size() > 0) {    reports.get(reports.size() - 1).newlines++;  }}  }
class C{  public AttrValueDTO updateEntityAttributeValue(final AttrValueDTO attrValueDTO) throws UnmappedInterfaceException, UnableToCreateInstanceException {  try {    getById(((AttrValueProductSkuDTO)attrValueDTO).getSkuId());  } catch (  UnmappedInterfaceException e) {  }catch (  UnableToCreateInstanceException e) {  }  AttrValueProductSkuDTO rez=(AttrValueProductSkuDTO)dtoProductSkuService.updateEntityAttributeValue(attrValueDTO);  reindexService.reindexProductSku(rez.getSkuId());  return rez;}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  @Override void onShutdown(){  BlockingQueue<Runnable> q=super.getQueue();  boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();  boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();  if (!keepDelayed && !keepPeriodic) {    for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);    q.clear();  } else {    for (    Object e : q.toArray()) {      if (e instanceof RunnableScheduledFuture) {        RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;        if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {          if (q.remove(t))           t.cancel(false);        }      }    }  }  tryTerminate();}  }
class C{  public void testBug6399() throws Exception {  if (versionMeetsMinimum(4,1)) {    try {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug6399");      this.stmt.executeUpdate("CREATE TABLE testBug6399 (field1 CHAR(3) CHARACTER SET UTF8, field2 CHAR(3) CHARACTER SET LATIN1, field3 CHAR(3) CHARACTER SET SJIS)");      this.stmt.executeUpdate("INSERT INTO testBug6399 VALUES ('a', 'a', 'a')");      this.rs=this.stmt.executeQuery("SELECT field1, field2, field3 FROM testBug6399");      ResultSetMetaData rsmd=this.rs.getMetaData();      assertEquals(3,rsmd.getColumnDisplaySize(1));      assertEquals(3,rsmd.getColumnDisplaySize(2));      assertEquals(3,rsmd.getColumnDisplaySize(3));    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug6399");    }  }}  }
class C{  public UnsortedRuleCollectionException(String message){  super(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:56.357 -0500",hash_original_method="A8312771025DBE8D4F255A5056997C06",hash_generated_method="13467E97E20DA612E52BB1C5D9E3ECF2") public static boolean isStatusInformational(int status){  return (status >= 100 && status < 200);}  }
class C{  public void tagEnd() throws IOException {  if (tags != null) {    tags.tagEnd();  }}  }
class C{  public void addRectFrame(int x,int y,int w,int h){  if (s_frame_rect != null) {    s_frame_rect.add(new Rect(x,y,x + w,y + h));  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  public void triggerFilter(){  adjustFilter();}  }
class C{  public static double parseDouble(java.lang.String s) throws java.lang.NumberFormatException {  return 0.0d;}  }
class C{  private static int generateLocalTcpPort(int portBase){  int resp=-1;  int port=portBase;  while (resp == -1) {    if (isLocalTcpPortFree(port)) {      resp=port;    } else {      port++;    }  }  return resp;}  }
class C{  public static List<AlertDto> transformToDto(List<Alert> alerts){  if (alerts == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<AlertDto> result=new ArrayList<AlertDto>();  for (  Alert alert : alerts) {    result.add(transformToDto(alert));  }  return result;}  }
class C{  private static final int computeDirection(int from,int to){  int dx=Position.getX(to) - Position.getX(from);  int dy=Position.getY(to) - Position.getY(from);  if (dx == 0) {    if (dy == 0)     return 0;    return (dy > 0) ? 8 : -8;  }  if (dy == 0)   return (dx > 0) ? 1 : -1;  if (Math.abs(dx) == Math.abs(dy))   return ((dy > 0) ? 8 : -8) + (dx > 0 ? 1 : -1);  if (Math.abs(dx * dy) == 2)   return dy * 8 + dx;  return 0;}  }
class C{  private ViewLoaderThread(final INaviView view){  m_view=Preconditions.checkNotNull(view,"IE00014: View argument can not be null");}  }
class C{  public void addCapabilities(List<String> capabilities){  this.capabilities.addAll(capabilities);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.PROGRAM___ANONYMOUS_PROGRAM_11:    getAnonymous_program_1_1().clear();  getAnonymous_program_1_1().addAll((Collection<? extends Anonymous_program_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public int showOpenDialog(Component parent){  m_DialogType=LOADER_DIALOG;  m_CurrentConverter=null;  initGUI(LOADER_DIALOG);  int result=super.showOpenDialog(parent);  m_DialogType=UNHANDLED_DIALOG;  removePropertyChangeListener(m_Listener);  if ((result == APPROVE_OPTION) && (getSelectedFile().isFile())) {    if (getFileFilter() instanceof ExtensionFileFilter) {      String filename=getSelectedFile().getAbsolutePath();      String[] extensions=((ExtensionFileFilter)getFileFilter()).getExtensions();      if (!filename.endsWith(extensions[0])) {        filename+=extensions[0];        setSelectedFile(new File(filename));      }    }  }  if ((result == APPROVE_OPTION) && (getFileMustExist()) && (getSelectedFile().isFile())&& (!getSelectedFile().exists())) {    int retVal=JOptionPane.showConfirmDialog(parent,"The file '" + getSelectedFile() + "' does not exist - please select again!");    if (retVal == JOptionPane.OK_OPTION) {      result=showOpenDialog(parent);    } else {      result=CANCEL_OPTION;    }  }  if (result == APPROVE_OPTION) {    m_LastFilter=getFileFilter();    configureCurrentConverter(LOADER_DIALOG);    if (m_CheckBoxOptions.isSelected() && m_CurrentConverter != null) {      m_EditorResult=JFileChooser.CANCEL_OPTION;      m_Editor.setValue(m_CurrentConverter);      PropertyDialog pd;      if (PropertyDialog.getParentDialog(this) != null) {        pd=new PropertyDialog(PropertyDialog.getParentDialog(this),m_Editor);      } else {        pd=new PropertyDialog(PropertyDialog.getParentFrame(this),m_Editor);      }      pd.setVisible(true);      result=m_EditorResult;    }  }  return result;}  }
class C{  public boolean copyInto(int lineNum,int columnNum,FormattedCharacterBuffer other){  if ((lineNum + other.getNumberOfLines() > numberOfLinesInBuffer) || (columnNum + other.getNumberOfColumns() > numberOfColumnsInBuffer)) {    return false;  }  for (int lineIndex=0; lineIndex < other.getNumberOfLines(); lineIndex++) {    for (int columnIndex=0; columnIndex < other.getNumberOfColumns(); columnIndex++) {      int readIndex=(lineIndex * other.getNumberOfColumns()) + columnIndex;      char value=other.charBuffer[readIndex];      Font font=other.perCharFonts[readIndex];      Color foreground=other.perCharForegroundColor[readIndex];      Color background=other.perCharBackgroundColor[readIndex];      setAt(lineNum + lineIndex,columnNum + columnIndex,value,font,foreground,background);    }  }  return true;}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  BufferedImage image=null;  List<int[][]> yuv=null;  DWT dwt=null;  ImageTree dwtTree=null;  ImageTree p=null;  Signature sig=null;  Pixel pixel1=null;  Pixel pixel2=null;  Pixel pixel3=null;  int[][] luminance=null;  int imgType=0;  int origWidth=0;  int origHeight=0;  int cols=0;  int rows=0;  int n=0;  double temp=0.0;  if (cover == null) {    throw new OpenStegoException(null,NAMESPACE,DWTXieErrors.ERR_NO_COVER_FILE);  } else {    image=ImageUtil.byteArrayToImage(cover,coverFileName);  }  imgType=image.getType();  origWidth=image.getWidth();  origHeight=image.getHeight();  image=ImageUtil.makeImageSquare(image);  cols=image.getWidth();  rows=image.getHeight();  yuv=ImageUtil.getYuvFromImage(image);  luminance=yuv.get(0);  sig=new Signature(msg);  dwt=new DWT(cols,rows,sig.filterID,sig.embeddingLevel,sig.waveletFilterMethod);  dwtTree=dwt.forwardDWT(luminance);  p=dwtTree;  while (p.getLevel() < sig.embeddingLevel) {    p=p.getCoarse();  }  for (int row=0; row < p.getImage().getHeight(); row++) {    for (int col=0; col < p.getImage().getWidth() - 3; col+=3) {      pixel1=new Pixel(0,DWTUtil.getPixel(p.getImage(),col + 0,row));      pixel2=new Pixel(1,DWTUtil.getPixel(p.getImage(),col + 1,row));      pixel3=new Pixel(2,DWTUtil.getPixel(p.getImage(),col + 2,row));      if (pixel1.value > pixel2.value) {        swapPix(pixel1,pixel2);      }      if (pixel2.value > pixel3.value) {        swapPix(pixel2,pixel3);      }      if (pixel1.value > pixel2.value) {        swapPix(pixel1,pixel2);      }      temp=wmTransform(sig.embeddingStrength,pixel1.value,pixel2.value,pixel3.value,getWatermarkBit(sig.watermark,n % (sig.watermarkLength * 8)));      DWTUtil.setPixel(p.getImage(),col + pixel2.pos,row,temp);      n++;    }  }  dwt.inverseDWT(dwtTree,luminance);  yuv.set(0,luminance);  image=ImageUtil.cropImage(ImageUtil.getImageFromYuv(yuv,imgType),origWidth,origHeight);  return ImageUtil.imageToByteArray(image,stegoFileName,this);}  }
class C{  protected void adjustDownwards(double minY,double height){  for (int i=0; i < this.labels.size() - 1; i++) {    PieLabelRecord record0=getPieLabelRecord(i);    PieLabelRecord record1=getPieLabelRecord(i + 1);    if (record1.getLowerY() < record0.getUpperY()) {      record1.setAllocatedY(Math.min(minY + height - record1.getLabelHeight() / 2.0,record0.getUpperY() + this.minGap + record1.getLabelHeight() / 2.0));    }  }}  }
class C{  public Table retrieve(String schema,String tableName){  String key=generateKey(schema,tableName);  return cache.get(key);}  }
class C{  public CMSSignedData generate(CMSProcessable content,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(content,CMSUtils.getProvider(sigProvider));}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.461 -0500",hash_original_method="44F743D0FCF3A3B09735F92996DFB8B8",hash_generated_method="9A89A17EE52C9990C8D3B5950C6CB8BC") public Intent putExtra(String name,char value){  mExtras.put(name,value);  return this;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        addToken(Token.IDENTIFIER);      }case 11:    break;case 9:{    addToken(Token.MARKUP_TAG_DELIMITER);  }case 12:break;case 2:{addToken(Token.WHITESPACE);}case 13:break;case 10:{addToken(Token.OPERATOR);}case 14:break;case 8:{addToken(Token.MARKUP_TAG_NAME);}case 15:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 16:break;case 6:{addToken(Token.IDENTIFIER);}case 17:break;case 5:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 18:break;case 3:{addNullToken();return firstToken;}case 19:break;case 7:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 20:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 42:break;case YYINITIAL:{addNullToken();return firstToken;}case 43:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public CUDA_RESOURCE_VIEW_DESC(){}  }
class C{  public void startTest(Test test){  mTimingValid=true;  mStartTime=System.currentTimeMillis();}  }
class C{  private Collection<RPExport> generateStorageSystemExportMaps(CGRequestParams cgParams,List<VolumeDescriptor> volumeDescriptors){  _log.info("Generate the storage system exports...START");  Map<String,RPExport> rpExportMap=new HashMap<String,RPExport>();  for (  CreateRSetParams rset : cgParams.getRsets()) {    _log.info("Replication Set: " + rset.getName());    Set<CreateVolumeParams> createVolumeParams=new HashSet<CreateVolumeParams>();    createVolumeParams.addAll(rset.getVolumes());    List<URI> processedRsetVolumes=new ArrayList<URI>();    for (    CreateVolumeParams rsetVolume : createVolumeParams) {      if (processedRsetVolumes.contains(rsetVolume.getVolumeURI())) {        continue;      }      processedRsetVolumes.add(rsetVolume.getVolumeURI());      Volume volume=_dbClient.queryObject(Volume.class,rsetVolume.getVolumeURI());      _log.info(String.format("Generating Exports for %s volume [%s](%s)...",volume.getPersonality().toString(),volume.getLabel(),volume.getId()));      Set<Volume> volumes=new HashSet<Volume>();      if (volume.checkPersonality(PersonalityTypes.SOURCE.toString())) {        URI vpoolURI=null;        if (VolumeDescriptor.getVirtualPoolChangeVolume(volumeDescriptors) != null) {          vpoolURI=getVirtualPoolChangeNewVirtualPool(volumeDescriptors);        } else {          vpoolURI=volume.getVirtualPool();        }        VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,vpoolURI);        boolean exportToHASideOnly=VirtualPool.isRPVPlexProtectHASide(vpool);        if (exportToHASideOnly || VirtualPool.vPoolSpecifiesMetroPoint(vpool)) {          _log.info("Export is for {}. Basing export(s) off backing VPLEX volumes for RP Source volume [{}].",(exportToHASideOnly ? "RP+VPLEX distributed HA side only" : "MetroPoint"),volume.getLabel());          StringSet backingVolumes=volume.getAssociatedVolumes();          if (null == backingVolumes || backingVolumes.isEmpty()) {            _log.error("VPLEX volume {} has no backend volumes.",volume.forDisplay());            throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(volume.forDisplay());          }          for (          String volumeId : backingVolumes) {            Volume vol=_dbClient.queryObject(Volume.class,URI.create(volumeId));            if (exportToHASideOnly) {              if (!vol.getVirtualArray().toString().equals(vpool.getHaVarrayConnectedToRp())) {                continue;              }            }            volumes.add(vol);          }        } else {          volumes.add(volume);        }      } else {        volumes.add(volume);      }      for (      Volume vol : volumes) {        URI storageSystem=rsetVolume.getStorageSystem();        String rpSiteName=vol.getInternalSiteName();        URI varray=vol.getVirtualArray();        URI volumeId=volume.getId();        String key=storageSystem.toString() + rpSiteName + varray.toString();        RPExport rpExport=rpExportMap.get(key);        if (rpExport == null) {          rpExport=new RPExport(storageSystem,rpSiteName,varray);          rpExportMap.put(key,rpExport);        }        if (vol.checkPersonality(Volume.PersonalityTypes.SOURCE.name())) {          for (          VolumeDescriptor desc : volumeDescriptors) {            if (desc.getVolumeURI().equals(vol.getId())) {              if (!NullColumnValueGetter.isNullURI(desc.getComputeResource())) {                _log.info("Add Host/Cluster information for source volume exports");                rpExport.setComputeResource(desc.getComputeResource());                break;              }            }          }        }        _log.info(String.format("Adding %s volume [%s](%s) to export: %s",volume.getPersonality().toString(),volume.getLabel(),volume.getId(),rpExport.toString()));        rpExport.getVolumes().add(volumeId);      }    }  }  for (  CreateCopyParams copy : cgParams.getCopies()) {    _log.info("Copy: " + copy.getName());    for (    CreateVolumeParams journalVolume : copy.getJournals()) {      Volume volume=_dbClient.queryObject(Volume.class,journalVolume.getVolumeURI());      _log.info(String.format("Generating export for %s volume [%s](%s)...",volume.getPersonality().toString(),volume.getLabel(),volume.getId()));      URI storageSystem=journalVolume.getStorageSystem();      String rpSiteName=volume.getInternalSiteName();      URI varray=volume.getVirtualArray();      URI volumeId=volume.getId();      String key=storageSystem.toString() + rpSiteName + varray.toString();      RPExport rpExport=rpExportMap.get(key);      if (rpExport == null) {        _log.info("RPExport is for journals only");        rpExport=new RPExport(storageSystem,rpSiteName,varray);        rpExport.setIsJournalExport(true);        rpExportMap.put(key,rpExport);      }      _log.info(String.format("Adding %s volume [%s](%s) to export: %s",volume.getPersonality().toString(),volume.getLabel(),volume.getId(),rpExport.toString()));      rpExport.getVolumes().add(volumeId);    }  }  _log.info("Generate the storage system exports...END");  return rpExportMap.values();}  }
class C{  @Override public void write(int oneByte) throws IOException {  Streams.writeSingleByte(this,oneByte);}  }
class C{  public EntityAnnotation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_name=jcas.getRequiredFeatureDE(casType,"name","uima.cas.String",featOkTst);  casFeatCode_name=(null == casFeat_name) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_name).getCode();  casFeat_entity=jcas.getRequiredFeatureDE(casType,"entity","uima.cas.String",featOkTst);  casFeatCode_entity=(null == casFeat_entity) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_entity).getCode();}  }
class C{  private void fillFieldValues(){  tfK.setText("5");}  }
class C{  @Override public int hashCode(){  return this.getMBeanName().hashCode();}  }
class C{  private boolean isWhitespace(int c){  return c == ' ' || c == '\n' || c == '\r' || c == '\t';}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  mIsStopping=false;  if (intent != null && intent.getAction() != null && intent.getAction().equals(ACTION_COMMAND)) {switch (intent.getIntExtra(EXTRA_COMMAND_NAME,-1)) {case COMMAND_NEXT:      nextImpl();    break;case COMMAND_PREVIOUS:  previousImpl();break;case COMMAND_PAUSE:if (mState == STATE_STOPPED || mState == STATE_PAUSED || mState == STATE_PAUSING) {playImpl();} else {pauseImpl();}break;case COMMAND_STOP:stopImpl();break;}}return super.onStartCommand(intent,flags,startId);}  }
class C{  public void testConfigGuess2() throws Exception {  CSVConfig expected=new CSVConfig();  expected.setDelimiter(';');  expected.setValueDelimiter(' ');  expected.setFill(CSVConfig.FILLRIGHT);  expected.setIgnoreValueDelimiter(false);  StringBuilder sb=new StringBuilder();  sb.append("1,2,3,4\n");  sb.append("abcd,1234,abcd,1234");  ByteArrayInputStream in=new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8));  CSVConfigGuesser guesser=new CSVConfigGuesser(in);  CSVConfig guessed=guesser.guess();  assertEquals(expected.isFixedWidth(),guessed.isFixedWidth());}  }
class C{  public void decrease(){  value--;}  }
class C{  public synchronized void unRegisterClientUrl(String clientUrl){  registeredClients.remove(clientUrl);}  }
class C{  public JsonResponse<T> addCookie(NewCookie newCookie){  if (cookies == null) {    cookies=new ArrayList<NewCookie>();  }  cookies.add(newCookie);  return this;}  }
class C{  Frame loadCeilFrame(int label,Frame top,Frame frame) throws IOException {  FST.Arc<Long> arc=frame.arc;  arc=Util.readCeilArc(label,fst,top.arc,arc,fstReader);  if (arc == null) {    return null;  }  frame.state=fsa.step(top.state,arc.label);  if (frame.state == -1) {    return loadNextFrame(top,frame);  }  return frame;}  }
class C{  public void pullFile(String remote,String local) throws IOException, AdbCommandRejectedException, TimeoutException, SyncException {  SyncService sync=null;  try {    String targetFileName=getFileName(remote);    Log.d(targetFileName,String.format("Downloading %1$s from device '%2$s'",targetFileName,getSerialNumber()));    sync=getSyncService();    if (sync != null) {      String message=String.format("Downloading file from device '%1$s'",getSerialNumber());      Log.d(LOG_TAG,message);      sync.pullFile(remote,local,SyncService.getNullProgressMonitor());    } else {      throw new IOException("Unable to open sync connection!");    }  } catch (  TimeoutException e) {    Log.e(LOG_TAG,"Error during Sync: timeout.");    throw e;  }catch (  SyncException|IOException e) {    Log.e(LOG_TAG,String.format("Error during Sync: %1$s",e.getMessage()));    throw e;  } finally {    if (sync != null) {      sync.close();    }  }}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  int cursor1=tmpBase;  int cursor2=base2;  int dest=base1;  System.arraycopy(a,base1,tmp,cursor1,len1);  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.GENERATE___GENERATE_1:    return GENERATE_1_EDEFAULT == null ? generate_1 != null : !GENERATE_1_EDEFAULT.equals(generate_1);}return super.eIsSet(featureID);}  }
class C{  @Override public String toString(){  return "{OSMetrics : maxFileDescriptorCount = " + maxFileDescriptorCount + " openFileDescriptorCount = "+ openFileDescriptorCount+ " processCpuTime = "+ processCpuTime+ " committedVirtualMemorySize = "+ committedVirtualMemorySize+ " totalPhysicalMemorySize = "+ totalPhysicalMemorySize+ " freePhysicalMemorySize = "+ freePhysicalMemorySize+ " totalSwapSpaceSize = "+ totalSwapSpaceSize+ " freeSwapSpaceSize = "+ freeSwapSpaceSize+ " name = "+ name+ " version = "+ version+ " arch = "+ arch+ " availableProcessors = "+ availableProcessors+ " systemLoadAverage = "+ systemLoadAverage+ "}";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.160 -0500",hash_original_method="91B272278DB88F42B96F73872CBFFA74",hash_generated_method="2BAD7E2C66283498F1FE17C97BEBA274") private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  return (w != null) ? w.symbol() : null;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (name == null) {    throw new NullPointerException();  }  if (type == null) {    throw new NullPointerException();  }  if (distribution == null) {    throw new NullPointerException();  }  if (type == ParamType.VAR && nodeA != nodeB) {    throw new IllegalStateException();  }  if (type == ParamType.COVAR && nodeA == nodeB) {    throw new IllegalStateException();  }}  }
class C{  public BurpCertificate cloneAndSignCertificate(BurpCertificate certificate,BurpCertificateBuilder burpCertificateBuilder,BurpCertificate issuerCertificate){  cloneProperties(certificate,burpCertificateBuilder);  try {    if (!issuerCertificate.hasPrivateKey()) {      throw new Exception("No private key found.");    }  } catch (  Exception e) {    setStatus("No private key found");    e.printStackTrace();  }  BurpCertificate burpCertificate;  try {    burpCertificate=burpCertificateBuilder.generateCertificate(issuerCertificate);    burpCertificate.setSource("Cloned and signed by cloned " + issuerCertificate.getSubject());    burpCertificateStore.addCertificate(burpCertificate);    setCertificateTree();    setStatus("Certificate cloned and signed.");    return burpCertificate;  } catch (  CertificateEncodingException|InvalidKeyException|IllegalStateException|NoSuchAlgorithmException|SignatureException|NoSuchProviderException|InvalidKeySpecException|IOException e) {    setStatus("Error cloning certificate. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }  return null;}  }
class C{  public static ConstantNode forBoolean(boolean i){  return createPrimitive(JavaConstant.forInt(i ? 1 : 0));}  }
class C{  void decryptBlock(byte[] cipher,int cipherOffset,byte[] plain,int plainOffset){  cipherBlock(cipher,cipherOffset,plain,plainOffset);}  }
class C{  protected boolean err(){  return status != STATUS_OK;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public boolean isEchoOn(){  return echoOn;}  }
class C{  public BulletConstructor(final Model model){  this(model,-1f);}  }
class C{  public DoughnutChart(MultipleCategorySeries dataset,DefaultRenderer renderer){  super(null,renderer);  mDataset=dataset;}  }
class C{  public static ComponentUI createUI(JComponent textArea){  return new RTextAreaUI(textArea);}  }
class C{  protected Probability(){}  }
class C{  public String id(){  return id;}  }
class C{  public void close() throws IOException {  internalOut.close();}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  @Override public Enumeration<URL> findResources(final String name) throws IOException {  if (name == null) {    return null;  }  ArrayList<URL> result=new ArrayList<URL>();  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    handler.findResources(name,result);  }  return Collections.enumeration(result);}  }
class C{  public final boolean hasDataPath(String data){  if (mDataPaths == null) {    return false;  }  final int numDataPaths=mDataPaths.size();  for (int i=0; i < numDataPaths; i++) {    final PatternMatcher pe=mDataPaths.get(i);    if (pe.match(data)) {      return true;    }  }  return false;}  }
class C{  private Set<ClassDescriptor> computeKnownSubtypes(ClassDescriptor classDescriptor) throws ClassNotFoundException {  LinkedList<ClassVertex> workList=new LinkedList<ClassVertex>();  ClassVertex startVertex=resolveClassVertex(classDescriptor);  workList.addLast(startVertex);  Set<ClassDescriptor> result=new HashSet<ClassDescriptor>();  while (!workList.isEmpty()) {    ClassVertex current=workList.removeFirst();    if (result.contains(current.getClassDescriptor())) {      continue;    }    result.add(current.getClassDescriptor());    Iterator<InheritanceEdge> i=graph.incomingEdgeIterator(current);    while (i.hasNext()) {      InheritanceEdge edge=i.next();      workList.addLast(edge.getSource());    }  }  return new HashSet<ClassDescriptor>(result);}  }
class C{  public InitialContext() throws NamingException {  init(null);}  }
class C{  static private byte[] toBytes(Vector octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.size(); i++) {    try {      DEROctetString o=(DEROctetString)octs.elementAt(i);      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs.elementAt(i).getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public int deleteFiredTrigger(Connection conn,String entryId) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(DELETE_FIRED_TRIGGER));    ps.setString(1,entryId);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public boolean isZipCompressionEnabled(){  return enableZipCompression;}  }
class C{  void stop(boolean failoverOnServerShutdown,final boolean criticalIOError,boolean restarting){synchronized (this) {    if (state == SERVER_STATE.STOPPED || state == SERVER_STATE.STOPPING) {      return;    }    state=SERVER_STATE.STOPPING;    if (fileStoreMonitor != null) {      fileStoreMonitor.stop();      fileStoreMonitor=null;    }    activation.sendLiveIsStopping();    stopComponent(connectorsService);    if (groupingHandler != null) {      managementService.removeNotificationListener(groupingHandler);      stopComponent(groupingHandler);    }    stopComponent(clusterManager);    if (remotingService != null) {      remotingService.pauseAcceptors();    }    if (remotingService != null && configuration.isGracefulShutdownEnabled()) {      long timeout=configuration.getGracefulShutdownTimeout();      try {        if (timeout == -1) {          remotingService.getConnectionCountLatch().await();        } else {          remotingService.getConnectionCountLatch().await(timeout);        }      } catch (      InterruptedException e) {        ActiveMQServerLogger.LOGGER.interruptWhilstStoppingComponent(remotingService.getClass().getName());      }    }    freezeConnections();  }  activation.postConnectionFreeze();  closeAllServerSessions(criticalIOError);  if (storageManager != null)   storageManager.clearContext();  callDeActiveCallbacks();  stopComponent(backupManager);  try {    activation.preStorageClose();  } catch (  Throwable t) {    ActiveMQServerLogger.LOGGER.errorStoppingComponent(t,activation.getClass().getName());  }  stopComponent(pagingManager);  if (storageManager != null)   try {    storageManager.stop(criticalIOError);  } catch (  Throwable t) {    ActiveMQServerLogger.LOGGER.errorStoppingComponent(t,storageManager.getClass().getName());  }  if (remotingService != null)   try {    remotingService.stop(criticalIOError);  } catch (  Throwable t) {    ActiveMQServerLogger.LOGGER.errorStoppingComponent(t,remotingService.getClass().getName());  }  if (managementService != null)   try {    managementService.unregisterServer();  } catch (  Throwable t) {    ActiveMQServerLogger.LOGGER.errorStoppingComponent(t,managementService.getClass().getName());  }  stopComponent(managementService);  stopComponent(resourceManager);  stopComponent(postOffice);  if (scheduledPool != null && !scheduledPoolSupplied) {    scheduledPool.shutdownNow();  }  stopComponent(memoryManager);  for (  SecuritySettingPlugin securitySettingPlugin : configuration.getSecuritySettingPlugins()) {    securitySettingPlugin.stop();  }  if (threadPool != null && !threadPoolSupplied) {    threadPool.shutdown();    try {      if (!threadPool.awaitTermination(10,TimeUnit.SECONDS)) {        ActiveMQServerLogger.LOGGER.timedOutStoppingThreadpool(threadPool);        for (        Runnable r : threadPool.shutdownNow()) {          logger.debug("Cancelled the execution of " + r);        }      }    } catch (    InterruptedException e) {      ActiveMQServerLogger.LOGGER.interruptWhilstStoppingComponent(threadPool.getClass().getName());    }  }  if (!threadPoolSupplied)   threadPool=null;  if (!scheduledPoolSupplied)   scheduledPool=null;  if (securityStore != null) {    try {      securityStore.stop();    } catch (    Throwable t) {      ActiveMQServerLogger.LOGGER.errorStoppingComponent(t,managementService.getClass().getName());    }  }  pagingManager=null;  securityStore=null;  resourceManager=null;  postOffice=null;  queueFactory=null;  resourceManager=null;  messagingServerControl=null;  memoryManager=null;  backupManager=null;  storageManager=null;  sessions.clear();  state=SERVER_STATE.STOPPED;  activationLatch.setCount(1);  SimpleString tempNodeID=getNodeID();  if (activation != null) {    try {      activation.close(failoverOnServerShutdown,restarting);    } catch (    Throwable t) {      ActiveMQServerLogger.LOGGER.errorStoppingComponent(t,activation.getClass().getName());    }  }  if (backupActivationThread != null) {    try {      backupActivationThread.join(30000);    } catch (    InterruptedException e) {      ActiveMQServerLogger.LOGGER.interruptWhilstStoppingComponent(backupActivationThread.getClass().getName());    }    if (backupActivationThread.isAlive()) {      ActiveMQServerLogger.LOGGER.backupActivationDidntFinish(this);      backupActivationThread.interrupt();    }  }  stopComponent(nodeManager);  nodeManager=null;  addressSettingsRepository.clearListeners();  addressSettingsRepository.clearCache();  scaledDownNodeIDs.clear();  for (  ActiveMQComponent externalComponent : externalComponents) {    try {      externalComponent.stop();    } catch (    Exception e) {      ActiveMQServerLogger.LOGGER.errorStoppingComponent(e,externalComponent.getClass().getName());    }  }  if (identity != null) {    ActiveMQServerLogger.LOGGER.serverStopped("identity=" + identity + ",version="+ getVersion().getFullVersion(),tempNodeID,getUptime());  } else {    ActiveMQServerLogger.LOGGER.serverStopped(getVersion().getFullVersion(),tempNodeID,getUptime());  }}  }
class C{  public double measureAttributesUsed(){  return m_boostedModel.percentAttributesUsed();}  }
class C{  public void localToWorld(Vector2 coord){  coord.setX(coord.getX() + physicalWidth / 2 + tiePoint[0]);  coord.setY(coord.getY() - (physicalLength / 2) + tiePoint[1]);}  }
class C{  public static String wantFilesPath(Context context,boolean externalStorageFirst){  String path=null;  File f=null;  if (externalStorageFirst && DiskFileUtils.hasSDCardMounted() && (f=context.getExternalFilesDir("xxx")) != null) {    path=f.getAbsolutePath();  } else {    path=context.getFilesDir().getAbsolutePath();  }  return path;}  }
class C{  private static String commonPrefix(String a,String b){  StringBuilder pref=new StringBuilder();  int lenA=a.length();  int lenB=b.length();  int i=0;  while (i < lenA && i < lenB) {    if (a.charAt(i) == b.charAt(i))     pref.append(a.charAt(i)); else     break;    i++;  }  return pref.toString();}  }
class C{  private void updateThreshold(int i){  double Fi=fcache[i];  double F_tilde_i=b_low;  if (I0_b[i] || I2[i])   F_tilde_i=Fi + epsilon; else   if (I0_a[i] || I1[i])   F_tilde_i=Fi - epsilon;  double F_bar_i=b_up;  if (I0_a[i] || I3[i])   F_bar_i=Fi - epsilon; else   if (I0_b[i] || I1[i])   F_bar_i=Fi + epsilon;  if (b_low < F_tilde_i) {    b_low=F_tilde_i;    i_low=i;  }  if (b_up > F_bar_i) {    b_up=F_bar_i;    i_up=i;  }}  }
class C{  public Matcher matcher(CharSequence input){  return new Matcher(this,input);}  }
class C{  public void testSyncIntervals() throws Exception {  int loopSize=100;  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  for (int syncInterval=1; syncInterval < 10; syncInterval++) {    ParallelQueueStore pqs=new ParallelQueueStore();    pqs.setPartitions(1);    pqs.setMaxSize(200);    pqs.setSyncEnabled(true);    pqs.setSyncInterval(syncInterval);    pqs.configure(context);    pqs.prepare(context);    assertEquals("1 partition defined",1,pqs.getPartitions());    assertEquals("Sync interval set",syncInterval,pqs.getSyncInterval());    logger.info("Sync interval: " + syncInterval);    for (int i=0; i < loopSize; i++) {      ReplDBMSEvent event=createEvent(i);      pqs.put(0,event);    }    int expectedSyncEvents=loopSize / syncInterval;    int expectedEvents=loopSize + expectedSyncEvents;    assertEquals("Partition has generated plus events sync events",expectedEvents,pqs.size(0));    for (int i=0; i < loopSize; i++) {      ReplDBMSEvent event1=(ReplDBMSEvent)pqs.get(0);      assertEquals("First event has same seqno as loop counter",i,event1.getSeqno());      if ((i + 1) % syncInterval == 0) {        ReplEvent ctl=pqs.get(0);        assertTrue("Control event",ctl instanceof ReplControlEvent);        ReplDBMSHeader event2=((ReplControlEvent)ctl).getHeader();        assertEquals("Control event contains previous event",event1.getSeqno(),event2.getSeqno());      }    }    pqs.release(context);  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public FastAdapterBottomSheetDialog<Item> add(int position,List<Item> items){  mFastItemAdapter.add(position,items);  return this;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  public static int yToLatE7(final int screenHeight,int screenWidth,final BoundingBox viewBox,final float y){  double pixelRadius=screenWidth / (viewBox.getWidth() / 1E7d);  double lat=mercatorToLatE7(viewBox.getBottomMercator() + ((double)screenHeight - y) / pixelRadius);  return (int)lat;}  }
class C{  public boolean isSetField(){  return this.field != null;}  }
class C{  public boolean hasConditions(){  return ifModifiedSince != null || ifNoneMatch != null;}  }
class C{  public int valueAt(int index){  return mValues[index];}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public static void ICONST_3(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_3();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public boolean isAnisotropicTextureFilterEnabled(){  return this.isAnisotropicTextureFilterEnabled;}  }
class C{  public String numTreesTipText(){  return "The number of trees to be generated.";}  }
class C{  public ShrinkContext(int step,int remainingCyles,PseudoRandom prng){  this.step=step;  this.remainingCyles=remainingCyles;  this.prng=prng;}  }
class C{  public static byte[] fromAscii(byte[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  public void removeMailToAddress(String toAddress){  mailToSet.remove(toAddress);  mailToAddresses=getAllToAddresses();}  }
class C{  protected void paintBoundaries(Graphics graphics){  if (boundaries != null) {    boundaries.render(graphics);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.897 -0500",hash_original_method="3DB74F10ACB7465BB59ECD7AE11AEF17",hash_generated_method="05F734B07F12F2772C33A856D1EC69F4") private void findClassesInApk(String apkPath,String packageName,Set<String> classNames,Set<String> subpackageNames) throws IOException {  DexFile dexFile=null;  try {    dexFile=new DexFile(apkPath);    Enumeration<String> apkClassNames=dexFile.entries();    while (apkClassNames.hasMoreElements()) {      String className=apkClassNames.nextElement();      if (className.startsWith(packageName)) {        String subPackageName=packageName;        int lastPackageSeparator=className.lastIndexOf('.');        if (lastPackageSeparator > 0) {          subPackageName=className.substring(0,lastPackageSeparator);        }        if (subPackageName.length() > packageName.length()) {          subpackageNames.add(subPackageName);        } else         if (isToplevelClass(className)) {          classNames.add(className);        }      }    }  } catch (  IOException e) {    if (false) {      Log.w("ClassPathPackageInfoSource","Error finding classes at apk path: " + apkPath,e);    }  } finally {    if (dexFile != null) {    }  }}  }
class C{  public static void deviceUnbinding(Context context,String accessToken,String identifier,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  try {    post(context,String.format(getApiServerUrl() + DEVICE_UNBINDING,identifier),headerList,null,responseHandler);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public boolean isRowLayout(){  return rowLayout;}  }
class C{  public IncompatibleRolesException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void load(Element e,Object o) throws Exception {  throw new Exception("Method not coded");}  }
class C{  private void assertUnaryOperator(final String operator){  if (!("+".equals(operator) || "-".equals(operator) || "~".equals(operator))) {    throw new JBBPCompilationException("Wrong unary operator '" + operator + "' ["+ this.expressionSource+ ']');  }}  }
class C{  public RolloutRendererData(){}  }
class C{  public void align(int incr){  if (alive)   while (cp % incr != 0)   emitop0(nop);}  }
class C{  protected Class loadClass(String name,boolean resolve) throws ClassFormatError, ClassNotFoundException {  name=name.intern();synchronized (name) {    Class c=findLoadedClass(name);    if (c == null)     c=loadClassByDelegation(name);    if (c == null)     c=findClass(name);    if (c == null)     c=delegateToParent(name);    if (resolve)     resolveClass(c);    return c;  }}  }
class C{  @SuppressWarnings("unchecked") public static <F extends IFeed>F readFeed(ParseSource source,Class<F> requestedClass,ExtensionProfile extProfile,Schema schema) throws IOException, ParseException, ServiceException {  if (source == null) {    throw new NullPointerException("Null source");  }  Class<? extends IFeed> feedClass=requestedClass;  Class<? extends IFeed> responseClass=requestedClass;  if (feedClass == null) {    feedClass=Feed.class;    responseClass=BaseFeed.class;  }  boolean isAdapting=isAdapting(feedClass);  IFeed feed;  try {    feed=feedClass.newInstance();  } catch (  IllegalAccessException iae) {    throw new ServiceException(CoreErrorDomain.ERR.cantCreateFeed,iae);  }catch (  InstantiationException ie) {    throw new ServiceException(CoreErrorDomain.ERR.cantCreateFeed,ie);  }  if (feed instanceof Element) {    feed=feedClass.cast(parseElement(source,(Element)feed,schema));  } else {    BaseFeed<?,?> baseFeed=(BaseFeed<?,?>)feed;    if (extProfile == null) {      extProfile=getExtProfile(baseFeed,isAdapting);    }    parseFeed(source,baseFeed,extProfile);    if (isAdapting) {      BaseFeed<?,?> adaptedFeed=baseFeed.getAdaptedFeed();      if (responseClass.isInstance(adaptedFeed)) {        feed=adaptedFeed;      }    }  }  return (F)responseClass.cast(feed);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public HadoopV2Counter(HadoopLongCounter cntr){  assert cntr != null : "counter must be non-null";  this.cntr=cntr;}  }
class C{  public synchronized void showErrorDialog(String message,String content,Exception exception){  Platform.runLater(null);}  }
class C{  public boolean acceptsLoad(String load,String type){  if (_loadOption.equals(ALL_LOADS)) {    return true;  }  if (_loadOption.equals(INCLUDE_LOADS)) {    return _loadList.contains(load) || _loadList.contains(type + CarLoad.SPLIT_CHAR + load);  }  return !_loadList.contains(load) && !_loadList.contains(type + CarLoad.SPLIT_CHAR + load);}  }
class C{  static public U64 makeCookie(int application,int user){  if (!appIdMap.containsKey(application)) {    throw new AppIDNotRegisteredException(application);  }  long longApp=application;  long longUser=user & USER_MASK;  return U64.of((longApp << APP_ID_SHIFT) | longUser);}  }
class C{  public static ValueDate fromMillis(long ms){  return fromDateValue(DateTimeUtils.dateValueFromDate(ms));}  }
class C{  public boolean isLocalAndExists(){  return file.exists();}  }
class C{  public SizeSequence(){  a=emptyArray;}  }
class C{  public AdminCondition(){  requiredAdminlevel=5000;}  }
class C{  public static void logRequestParameters(HttpServletRequest request){  Logger logger=LoggerFactory.getLogger(ProtocolUtil.class);  if (logger.isDebugEnabled()) {    @SuppressWarnings("unchecked") Enumeration<String> paramNames=request.getParameterNames();    while (paramNames.hasMoreElements()) {      String name=paramNames.nextElement();      for (      String value : request.getParameterValues(name)) {        logger.debug("{}=\"{}\"",name,value);      }    }  }}  }
class C{  @Override public void commit() throws IOException {  if (!committed && currentFile.isPresent()) {    currentFile.get().getDeserializer().mark();    committed=true;  }}  }
class C{  public boolean login() throws IOException {  final String loginUrl=this.mShaarliUrl;  try {    Connection.Response loginPage=this.createShaarliConnection(loginUrl,true).data("login",this.mUsername).data("password",this.mPassword).data("token",this.mToken).data("returnurl",this.mShaarliUrl).execute();    this.mCookies=loginPage.cookies();    loginPage.parse().body().select("a[href=?do=logout]").first().attr("href");  } catch (  NullPointerException e) {    return false;  }  return true;}  }
class C{  public NameConstraints(GeneralSubtrees permittedSubtrees,GeneralSubtrees excludedSubtrees){  if (permittedSubtrees != null) {    List<GeneralSubtree> ps=permittedSubtrees.getSubtrees();    if (ps == null || ps.isEmpty()) {      throw new IllegalArgumentException("permittedSubtrees are empty");    }  }  if (excludedSubtrees != null) {    List<GeneralSubtree> es=excludedSubtrees.getSubtrees();    if (es == null || es.isEmpty()) {      throw new IllegalArgumentException("excludedSubtrees are empty");    }  }  this.permittedSubtrees=permittedSubtrees;  this.excludedSubtrees=excludedSubtrees;}  }
class C{  public static void clear(TrayPreferences... modules){  for (  Preferences module : modules) {    if (module == null) {      continue;    }    module.clear();  }}  }
