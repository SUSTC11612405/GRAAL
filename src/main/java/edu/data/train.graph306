class C{  private static String concatWithSeparator(Collection<String> words,String separator){  StringBuilder wordList=new StringBuilder();  for (  String word : words) {    wordList.append(new String(word) + separator);  }  return new String(wordList.deleteCharAt(wordList.length() - 1));}  }
class C{  public AsyncExecutor(){  this.streamHandler=new PumpStreamHandler();  this.launcher=CommandLauncherFactory.createVMLauncher();  this.exitValues=new int[0];}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String[] args){  if (args.length < 2) {    printUsage();    System.exit(1);  }  String input=args[0];  String output=args[1];  File file=new File(input);  if (!file.canRead()) {    printError("Cannot read input file: " + file.getAbsolutePath());    printUsage();    System.exit(1);  }  String method="test";  String clas="Test";  boolean pdf=false;  boolean error=false;  for (int i=2; i < args.length; i++) {    if (args[i].equals("-pdf")) {      pdf=true;    } else     if (args[i].equals("-method")) {      if (i >= args.length - 1) {        printError("Did not find <name> after -method.");        continue;      }      i++;      method=args[i];    } else     if (args[i].equals("-class")) {      if (i >= args.length - 1) {        printError("Did not find <name> after -class.");        continue;      }      i++;      clas=args[i];    } else {      printError("Unknown command line argument: " + args[i]);      error=true;    }  }  if (error) {    System.exit(1);  }  generateDOTofCFG(input,output,method,clas,pdf);}  }
class C{  public RunnerDescriptorImpl(String id,String name,RuntimeEnvironment environment,IRunner runner){  this.id=id;  this.name=name;  this.environment=environment;  this.runner=runner;}  }
class C{  public void put(Object key,Object value){  int weight=getWeight(key) + getWeight(value) + OVERHEAD;  currentWeight+=weight;  if (cache.put(key,value == null ? NULL_VALUE : value) != null) {    currentWeight-=weight;  }}  }
class C{  public static WebXml parseWebXml(InputStream theInput,EntityResolver theEntityResolver) throws IOException, JDOMException {  WebXmlTypeAwareParser handler=new WebXmlTypeAwareParser(theInput,theEntityResolver);  WebXml result=handler.parse();  if (result == null) {    throw new CargoException("Parsing the web.xml returned null");  }  return result;}  }
class C{  public synchronized boolean compactMoveChunks(){  return compactMoveChunks(100,Long.MAX_VALUE);}  }
class C{  public DateRangeBuilder addUnboundedTo(String key,Object to){  ranges.add(new Range(key,null,to));  return this;}  }
class C{  private static int decode(final int hex){  if (hex >= CcHex.BACK.length) {    throw new DecodingException(String.format("invalid hex char: 0x%2x",hex));  }  final int dec=CcHex.BACK[hex];  if (dec < 0) {    throw new DecodingException(String.format("invalid hex character: 0x%2x",hex));  }  return dec;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ReadFIFOQueueResponse(){  super();  setFunctionCode(Modbus.READ_FIFO_QUEUE);  count=0;  registers=new InputRegister[0];  setDataLength(7);}  }
class C{  public SecurityException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public TodoObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  @Override protected void initView(View view){}  }
class C{  public ElementRule(String name,Class type,String description,boolean optional){  this.name=name;  this.description=description;  this.rules=new XMLSyntaxRule[]{new ElementRule(type)};  this.min=1;  this.max=1;  if (optional)   this.min=0;}  }
class C{  public <X extends Throwable>FluentTriFunction<T1,T2,T3,R> recover(final Class<X> type,final TriFunction<T1,T2,T3,R> onError){  return FluentFunctions.of(null);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public WeightVector(WeightVector old,int additionalSpace){  u=new float[old.u.length + additionalSpace];  System.arraycopy(old.u,0,u,0,old.u.length);  extendable=old.extendable;  size=old.size;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public void collapseBuilding(Coords coords){  final IHex curHex=this.getHex(coords);  Building bldg=bldgByCoords.get(coords);  if (bldg == null) {    return;  }  bldg.removeHex(coords);  bldgByCoords.remove(coords);  int type=curHex.terrainLevel(Terrains.BUILDING);  type=Math.max(type,curHex.terrainLevel(Terrains.BRIDGE));  type=Math.max(type,curHex.terrainLevel(Terrains.FUEL_TANK));  curHex.removeTerrain(Terrains.BUILDING);  curHex.removeTerrain(Terrains.BLDG_CF);  curHex.removeTerrain(Terrains.BLDG_ELEV);  curHex.removeTerrain(Terrains.FUEL_TANK);  curHex.removeTerrain(Terrains.FUEL_TANK_CF);  curHex.removeTerrain(Terrains.FUEL_TANK_ELEV);  curHex.removeTerrain(Terrains.BRIDGE);  curHex.removeTerrain(Terrains.BRIDGE_CF);  curHex.removeTerrain(Terrains.BRIDGE_ELEV);  if (type > 0) {    int rubbleLevel=bldg.getBldgClass() == Building.FORTRESS ? 2 : 1;    curHex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.RUBBLE,rubbleLevel));  }  if (curHex.containsTerrain(Terrains.BLDG_BASEMENT_TYPE)) {    curHex.removeTerrain(Terrains.BLDG_BASEMENT_TYPE);  }  this.setHex(coords,curHex);}  }
class C{  @Override public void configureManagers(RfidSensorManager sensorManager,RfidReporterManager reporterManager){  InstanceManager.setSensorManager(new ConcentratorSensorManager(getTrafficController(),getSystemPrefix()));  InstanceManager.setReporterManager(new ConcentratorReporterManager(getTrafficController(),getSystemPrefix()));}  }
class C{  public List<IMessage> deleteBefore(IMessage message,int amount) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteBefore(indexOf(message),amount);}  }
class C{  public SendableForwardMessage build(){  return new SendableForwardMessage(messageID,chatID,disableNotification);}  }
class C{  public void write(byte b){  check(1);  buffer[write_pos++]=b;}  }
class C{  public int width(){  return w;}  }
class C{  public SelectionColorChooserAction(DrawingEditor editor,AttributeKey<Color> key,@Nullable Icon icon){  this(editor,key,null,icon);}  }
class C{  protected Long wrapValue(long k){  return new Long(k);}  }
class C{  public void removeInterface(NetworkInterface ni){  this.interfaces.remove(ni);}  }
class C{  public void close(){  text=null;}  }
class C{  public static <T>T inject(){  return null;}  }
class C{  protected boolean isEqualKey(Object key1,Object key2){  key2=(keyType > HARD ? ((Reference)key2).get() : key2);  return (key1 == key2 || key1.equals(key2));}  }
class C{  @RequestMapping(value="/posts/{id:\\d+}/vote",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<PostVoteDTO> vote(@PathVariable Long id,@RequestParam(required=true) String type){  log.debug("REST request to vote-up Post : {}",id);  Post post=postRepository.findByStatusAndId(PostStatus.PUBLIC,id);  if (post == null || !(type.equals("up") || type.equals("down"))) {    return new ResponseEntity<>(new PostVoteDTO(),HttpStatus.UNPROCESSABLE_ENTITY);  }  String result;  if (type.equals("up")) {    result=voteService.voteUp(post,userService.getUserWithAuthorities());  } else {    result=voteService.voteDown(post,userService.getUserWithAuthorities());  }  return new ResponseEntity<>(new PostVoteDTO(post,result),HttpStatus.OK);}  }
class C{  public void registerPostExecHooks(AbstractTask task,List<AbstractHook> hooks){  this.taskToPostExecHookMap.put(task.getClass().getName(),hooks);}  }
class C{  public void verify(List<T> target) throws PatchFailedException {  if (last() > target.size()) {    throw new PatchFailedException("Incorrect Chunk: the position of chunk > target size");  }  for (int i=0; i < size(); i++) {    if (!target.get(position + i).equals(lines.get(i))) {      throw new PatchFailedException("Incorrect Chunk: the chunk content doesn't match the target");    }  }}  }
class C{  @SuppressFBWarnings(value="DP_DO_INSIDE_DO_PRIVILEGED",justification="EV is run only from within unit tests") public Object returnConstant(String constantName){  try {    Class<?> type=resolve();    if (type == null) {      return null;    }    Field field=type.getField(constantName);    field.setAccessible(true);    return field.get(null);  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  static Instruction checkcastNotNull(Instruction s,IR ir){  Operand ref=TypeCheck.getClearRef(s);  TypeReference LHStype=TypeCheck.getType(s).getTypeRef();  Operand guard=TypeCheck.getClearGuard(s);  BasicBlock myBlock=s.getBasicBlock();  BasicBlock failBlock=myBlock.createSubBlock(s.getBytecodeIndex(),ir,.0001f);  BasicBlock succBlock=myBlock.splitNodeAt(s,ir);  succBlock.firstInstruction().insertAfter(Move.create(REF_MOVE,TypeCheck.getClearResult(s),ref.copy()));  myBlock.insertOut(failBlock);  myBlock.insertOut(succBlock);  ir.cfg.linkInCodeOrder(myBlock,succBlock);  ir.cfg.addLastInCodeOrder(failBlock);  Instruction raiseError=Trap.create(TRAP,null,TrapCodeOperand.CheckCast());  raiseError.copyPosition(s);  failBlock.appendInstruction(raiseError);  Operand RHStib=getTIB(s,ir,ref,guard);  return generateBranchingTypeCheck(s,ir,ref.copy(),LHStype,RHStib,succBlock,failBlock,ir.regpool.makeTempValidation(),BranchProfileOperand.never());}  }
class C{  public T withIconTintingEnabled(boolean iconTintingEnabled){  this.iconTinted=iconTintingEnabled;  return (T)this;}  }
class C{  public synchronized long skipToKeyframeBefore(long timeUs){  if (queueSize == 0 || timeUs < timesUs[relativeReadIndex]) {    return -1;  }  int lastWriteIndex=(relativeWriteIndex == 0 ? capacity : relativeWriteIndex) - 1;  long lastTimeUs=timesUs[lastWriteIndex];  if (timeUs > lastTimeUs) {    return -1;  }  int sampleCount=0;  int sampleCountToKeyframe=-1;  int searchIndex=relativeReadIndex;  while (searchIndex != relativeWriteIndex) {    if (timesUs[searchIndex] > timeUs) {      break;    } else     if ((flags[searchIndex] & C.SAMPLE_FLAG_SYNC) != 0) {      sampleCountToKeyframe=sampleCount;    }    searchIndex=(searchIndex + 1) % capacity;    sampleCount++;  }  if (sampleCountToKeyframe == -1) {    return -1;  }  queueSize-=sampleCountToKeyframe;  relativeReadIndex=(relativeReadIndex + sampleCountToKeyframe) % capacity;  absoluteReadIndex+=sampleCountToKeyframe;  return offsets[relativeReadIndex];}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public void removeCustomBaseParameter(String key){  remove(key,baseParameters);}  }
class C{  public int continuousQueryFilterApply(long filterPtr,long memPtr){  enter();  try {    return PlatformCallbackUtils.continuousQueryFilterApply(envPtr,filterPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public Observation(double value,int group){  super();  this.value=value;  this.group=group;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void persist(int maxDelaySec,AuthenticationInfo subject){  startDelayedPersistTimer(maxDelaySec,subject);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (deprecated: ");  result.append(deprecated);  result.append(", comment: ");  result.append(comment);  result.append(", optional: ");  result.append(optional);  result.append(", parameterType: ");  result.append(parameterType);  result.append(')');  return result.toString();}  }
class C{  public void clearTagFileJarUrls(){  tagFileJarUrls.clear();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static void enableOnce(){  if (logged)   return;  ResourcesPlugin.getPlugin().getLog().log(new Status(IStatus.OK,ResourcesPlugin.PI_RESOURCES,"Place holder to init log-system. Loaded by " + EclipseGracefulUIShutdownEnabler.class.getName() + " @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=460863 "));  logged=true;}  }
class C{  public boolean launchAppOnNodes(@Nullable final String activityName,@Nullable Bundle bundle,boolean relaunchIfRunning,final String capability,@Nullable NodeSelectionFilter filter){  Set<Node> nodes=getNodesForCapability(capability);  if (nodes != null && !nodes.isEmpty()) {    if (filter == null) {      filter=new NearbyFilter();    }    Set<Node> filteredNodes=filter.filterNodes(nodes);    if (filteredNodes == null) {      Log.w(TAG,"No node was found to match the filter " + filter.describe());      return false;    }    for (    Node targetNode : filteredNodes) {      launchAppOnNode(activityName,bundle,relaunchIfRunning,targetNode);    }    return true;  }  return false;}  }
class C{  public static IStatus validateClassFileName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_nullName,null);  }  if (!org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name)) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  String identifier;  int index;  index=name.lastIndexOf('.');  if (index == -1) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  identifier=name.substring(0,index);  if (!identifier.equals(PACKAGE_INFO)) {    IStatus status=validateIdentifier(identifier,sourceLevel,complianceLevel);    if (!status.isOK()) {      return status;    }  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  public TaskList executeEventMethod(ActionableEvent event,boolean approve){  TaskList taskList=new TaskList();  byte[] method=approve ? event.getApproveMethod() : event.getDeclineMethod();  String eventStatus=approve ? ActionableEvent.Status.approved.name() : ActionableEvent.Status.declined.name();  event.setEventExecutionTime(Calendar.getInstance());  event.setApproveDetails(new StringSet(getEventDetails(event,true)));  event.setDeclineDetails(new StringSet(getEventDetails(event,false)));  if (method == null || method.length == 0) {    _log.info("Method is null or empty for event " + event.getId());    event.setEventStatus(eventStatus);    _dbClient.updateObject(event);    return taskList;  }  ActionableEvent.Method eventMethod=ActionableEvent.Method.deserialize(method);  if (eventMethod == null) {    _log.info("Event method is null or empty for event " + event.getId());    event.setEventStatus(eventStatus);    _dbClient.updateObject(event);    return taskList;  }  try {    Method classMethod=getMethod(ActionableEventExecutor.class,eventMethod.getMethodName());    ComputeSystemController controller=getController(ComputeSystemController.class,null);    ActionableEventExecutor executor=new ActionableEventExecutor(_dbClient,controller);    Object[] parameters=Arrays.copyOf(eventMethod.getArgs(),eventMethod.getArgs().length + 1);    parameters[parameters.length - 1]=event.getId();    TaskResourceRep result=(TaskResourceRep)classMethod.invoke(executor,parameters);    event.setEventStatus(eventStatus);    if (result != null && result.getId() != null) {      Collection<String> taskCollection=Lists.newArrayList(result.getId().toString());      event.setTaskIds(new StringSet(taskCollection));    }    _dbClient.updateObject(event);    taskList.addTask(result);    return taskList;  } catch (  SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    _log.error(e.getMessage(),e.getCause());    throw APIException.badRequests.errorInvokingEventMethod(event.getId(),eventMethod.getMethodName());  }}  }
class C{  public static void releaseDB(){  dbLock.unlock();}  }
class C{  public java.lang.StringBuilder append(float f){  return null;}  }
class C{  @Override protected TemplateModel handleUnknownType(Object obj) throws TemplateModelException {  throw new TemplateModelException("SimpleObjectWrapper deliberately won't wrap this type: " + obj.getClass().getName());}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  private void transferData(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  for (; ; ) {    int bytesRead=readFromResponse(state,innerState,data,entityStream);    if (bytesRead == -1) {      handleEndOfStream(state,innerState);      return;    }    state.mGotData=true;    writeDataToDestination(state,data,bytesRead);    innerState.mBytesSoFar+=bytesRead;    innerState.mBytesThisSession+=bytesRead;    reportProgress(state,innerState);    checkPausedOrCanceled(state);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int length(){  return w.length;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static WebSocketFrame createContinuationFrame(byte[] payload){  return createContinuationFrame().setPayload(payload);}  }
class C{  public XMLEntityResolver(){  this.entities=new Hashtable();  this.entities.put("amp","&#38;");  this.entities.put("quot","&#34;");  this.entities.put("apos","&#39;");  this.entities.put("lt","&#60;");  this.entities.put("gt","&#62;");}  }
class C{  Round(Context context,List<JCCompilationUnit> roots,List<ClassSymbol> classSymbols,Log.DeferredDiagnosticHandler deferredDiagnosticHandler){  this(context,1,0,0,deferredDiagnosticHandler);  this.roots=roots;  genClassFiles=new HashMap<String,JavaFileObject>();  compiler.todo.clear();  topLevelClasses=getTopLevelClasses(roots).prependList(classSymbols.reverse());  packageInfoFiles=getPackageInfoFiles(roots);  findAnnotationsPresent();}  }
class C{  public AnalogButterworth(int order){  super();  int nRealPoles=order - 2 * (order / 2);  int nComplexPolePairs=order / 2;  int nPoles=nRealPoles + 2 * nComplexPolePairs;  if (nRealPoles == 1) {    double[] td={1.0,1.0};    addSection(new Rational(new Polynomial(1.0),new Polynomial(td)));  }  double dAngle=Math.PI / nPoles;  for (int i=0; i < nComplexPolePairs; i++) {    double angle=-Math.PI / 2 + dAngle / 2 * (1 + nRealPoles) + i * dAngle;    double[] td={1.0,-2 * Math.sin(angle),1.0};    addSection(new Rational(new Polynomial(1.0),new Polynomial(td)));  }}  }
class C{  public AttrValueDTO updateEntityAttributeValue(final AttrValueDTO attrValueDTO){  final AttrValueEntityCategory valueEntityCategory=attrValueEntityCategoryDao.findById(attrValueDTO.getAttrvalueId());  attrValueAssembler.assembleEntity(attrValueDTO,valueEntityCategory,getAdaptersRepository(),dtoFactory);  attrValueEntityCategoryDao.update(valueEntityCategory);  return attrValueDTO;}  }
class C{  public UTF8StreamWriter(){  _bytes=new byte[2048];}  }
class C{  static FloatingActionButton createBadge(String text){  return new FloatingActionButton(text);}  }
class C{  public static UnixTime fromUnixTimeInMillis(final long millis){  return new UnixTime(new TimeInstant(SystemTimeProvider.getTime(millis)));}  }
class C{  private void assertStatementProperty(ReplDBMSEvent event,String name){  String value=event.getData().get(0).getOption(name);  Assert.assertNotNull("Expected statement property to be set: " + name,value);}  }
class C{  public void clearParameters(){  if (null == m_params)   return;  m_params.clear();}  }
class C{  public static boolean isEmailIdValid(String email){  String expression="^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";  Pattern pattern=Pattern.compile(expression,Pattern.CASE_INSENSITIVE);  Matcher matcher=pattern.matcher(email);  return matcher.matches();}  }
class C{  protected static float[] convertStdDeviation(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_STD_DEVIATION_ATTRIBUTE);  if (s.length() == 0) {    return new float[]{0,0};  }  float[] stdDevs=new float[2];  StringTokenizer tokens=new StringTokenizer(s," ,");  try {    stdDevs[0]=SVGUtilities.convertSVGNumber(tokens.nextToken());    if (tokens.hasMoreTokens()) {      stdDevs[1]=SVGUtilities.convertSVGNumber(tokens.nextToken());    } else {      stdDevs[1]=stdDevs[0];    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_STD_DEVIATION_ATTRIBUTE,s,nfEx});  }  if (tokens.hasMoreTokens()) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_STD_DEVIATION_ATTRIBUTE,s});  }  return stdDevs;}  }
class C{  @Override public void nodeChanged(){  log.info("category or service acl changed, clearing play.Cache");  Cache.clear();}  }
class C{  private OIDCClientDTO registerClient(URI redirectURI,URI logoutURI,URI postLogoutURI) throws AuthException {  Exception registerException=null;  try {    OIDCClientMetadataDTO oidcClientMetadataDTO=new OIDCClientMetadataDTO.Builder().withRedirectUris(Arrays.asList(redirectURI.toString())).withPostLogoutRedirectUris(Arrays.asList(postLogoutURI.toString())).withLogoutUri(logoutURI.toString()).withTokenEndpointAuthMethod(ClientAuthenticationMethod.NONE.getValue()).build();    idmClient.oidcClient().register(tenant,oidcClientMetadataDTO);  } catch (  ClientException|HttpException|IOException e) {    registerException=new AuthException("failed to registerClient",e);  }  try {    List<OIDCClientDTO> oidcClientDTOList=idmClient.oidcClient().getAll(tenant);    for (    OIDCClientDTO oidcClientDTO : oidcClientDTOList) {      if (oidcClientDTO.getOIDCClientMetadataDTO().getRedirectUris().size() == 1 && oidcClientDTO.getOIDCClientMetadataDTO().getRedirectUris().iterator().next().compareTo(redirectURI.toString()) == 0) {        return oidcClientDTO;      }    }  } catch (  ClientException|HttpException|IOException e) {    throw new AuthException("failed to registerClient",e);  }  throw new AuthException("Client expected to be registered,  but not found",registerException);}  }
class C{  public void addStatusComponent(JComponent component){  this.add(component,BorderLayout.EAST);}  }
class C{  public static byte parseByte(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  byte result=(byte)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for byte: \"" + string + "\"");}  }
class C{  private int[] toTMArray(Sequence<IString> sequence){  final int sourceSize=sequence.size();  int[] tmIds=new int[sourceSize];  for (int i=0; i < sourceSize; ++i) {    tmIds[i]=toTMId(sequence.get(i));  }  return tmIds;}  }
class C{  public String readUrl(String url){  try {    HttpGet method=new HttpGet(url);    HttpResponse response=mHttpClient.execute(method);    if (response.getStatusLine().getStatusCode() == 200) {      return EntityUtils.toString(response.getEntity());    } else {      Log.i(TAG,"Suggestion request failed");      return null;    }  } catch (  IOException e) {    Log.w(TAG,"Error",e);    return null;  }}  }
class C{  @Override public V call(final Object... args){  return loop(original.call(args));}  }
class C{  private void checkCipherState(){  if (!(this instanceof NullCipher)) {    if (!initialized) {      throw new IllegalStateException("Cipher not initialized");    }    if ((opmode != Cipher.ENCRYPT_MODE) && (opmode != Cipher.DECRYPT_MODE)) {      throw new IllegalStateException("Cipher not initialized " + "for encryption/decryption");    }  }}  }
class C{  public static LocalVariableInfo extract(SsaMethod method){  LocalVariableExtractor lve=new LocalVariableExtractor(method);  return lve.doit();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrName;  Node setNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("lang");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("lang");  attrName=districtNode.getNodeName();  assertEqualsAutoCase("attribute","nodeName","lang",attrName);}  }
class C{  public PaymentProcessorImpl(final CustomerOrderPaymentService customerOrderPaymentService){  this.customerOrderPaymentService=customerOrderPaymentService;}  }
class C{  public static DateTimeFormatter dateHourMinuteSecond(){  if (dhms == null) {    dhms=new DateTimeFormatterBuilder().append(date()).append(literalTElement()).append(hourMinuteSecond()).toFormatter();  }  return dhms;}  }
class C{  public boolean isLeapYear(){  return leapYear;}  }
class C{  public InvocableEndpoint createInvocableEndpoint(){  InvocableEndpointImpl invocableEndpoint=new InvocableEndpointImpl();  return invocableEndpoint;}  }
class C{  @Bean public JpaTransactionManager herdTransactionManager(){  JpaTransactionManager transactionManager=new JpaTransactionManager();  transactionManager.setDataSource(getHerdDataSource());  transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());  return transactionManager;}  }
class C{  public String edgeId(){  return id;}  }
class C{  public static void register(){  CommandCenter.register(LOOK,new LookAction());}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!super.equals(obj))   return false;  RuleBasedCollator other=(RuleBasedCollator)obj;  return (getRules().equals(other.getRules()));}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  protected void saveSwcFileChecksums(){  if (!isSwcChecksumEnabled) {    swcFileChecksums=null;    return;  }  for (  Map.Entry<String,VirtualFile> entry : swcContext.getFiles().entrySet()) {    String filename=entry.getKey();    VirtualFile file=entry.getValue();    swcFileChecksums.put(filename,new Long(file.getLastModified()));  }}  }
class C{  public static VersionedObjectList execute(ExecutablePool pool,String region,List keys,Object callback){  AbstractOp op=new GetAllOpImpl(region,keys,callback);  op.initMessagePart();  return ((VersionedObjectList)pool.execute(op)).setKeys(keys);}  }
class C{  public BrazilianAnalyzer(CharArraySet stopwords,CharArraySet stemExclusionSet){  this(stopwords);  excltable=CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclusionSet));}  }
class C{  public static String[] parseWords(String tagValue){  StreamTokenizer tokenizer=makeTokenizer(tagValue);  List<String> wordList=new ArrayList<String>();  try {    while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {      if (tokenizer.sval == null) {        wordList.add(Character.toString((char)tokenizer.ttype));      } else {        wordList.add(tokenizer.sval);      }    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("error tokenizing tag");  }  return wordList.toArray(new String[0]);}  }
class C{  public void endBatchMode(){  mPreventInvalidateCount--;  invalidateSelf();}  }
class C{  public String valuesAsString(){  StringBuilder sb=new StringBuilder(80);  sb.append(className);  for (  Map.Entry<String,String> entry : variables.entrySet()) {    sb.append(',').append(entry.getKey()).append(':').append(entry.getValue());  }  return sb.toString();}  }
class C{  public boolean doesTrigger(Block b,Player p){  String blockShape=b.getShape();  String targetShape=this.getShape();  boolean shapeFits=true;  boolean conditionMet=true;  if (targetShape != null) {    shapeFits=targetShape.equals(blockShape);  }  if (this.condition != null) {    conditionMet=this.condition.fire(p,null,null);  }  return conditionMet && shapeFits;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public DOMKeyName(Element knElem){  name=knElem.getFirstChild().getNodeValue();}  }
class C{  @Override public String toString(){  return prefixLabel(scale) + "format " + pattern();}  }
class C{  public static boolean equals(List<?> xs,List<?> ys){  while (xs.tail != null && ys.tail != null) {    if (xs.head == null) {      if (ys.head != null)       return false;    } else {      if (!xs.head.equals(ys.head))       return false;    }    xs=xs.tail;    ys=ys.tail;  }  return xs.tail == null && ys.tail == null;}  }
class C{  private void updateMiniController(IMiniController controller) throws TransientNetworkDisconnectionException, NoConnectionException {  String titleText;  String subTitleText="";  String imageId="";  if (isAudioPlayerAlive()) {    BaseItemDto item=MainApplication.getAudioService().getCurrentItem();    if (item == null)     return;    LockScreenPayload payload=new LockScreenPayload(item);    titleText=payload.title;    subTitleText=payload.secondaryText;    imageId=payload.primaryImageItemId;  } else {    checkConnectivity();    SessionInfoDto sessionInfo=getCurrentSessionInfo();    if (null == sessionInfo || null == sessionInfo.getNowPlayingItem()) {      return;    }    titleText=sessionInfo.getNowPlayingItem().getName();    subTitleText=mContext.getResources().getString(R.string.casting_to_device,sessionInfo.getDeviceName());    if (sessionInfo.getNowPlayingItem().getHasPrimaryImage()) {      imageId=sessionInfo.getNowPlayingItem().getId();    } else     if (!tangible.DotNetToJavaStringHelper.isNullOrEmpty(sessionInfo.getNowPlayingItem().getPrimaryImageItemId())) {      imageId=sessionInfo.getNowPlayingItem().getPrimaryImageItemId();    }  }  controller.setStreamType(MediaInfo.STREAM_TYPE_BUFFERED);  controller.setPlaybackStatus(mState,mIdleReason);  controller.setSubTitle(subTitleText);  controller.setTitle(titleText);  if (!tangible.DotNetToJavaStringHelper.isNullOrEmpty(imageId)) {    ImageOptions options=new ImageOptions();    options.setImageType(ImageType.Primary);    options.setMaxWidth(400);    String imageUrl=MainApplication.getInstance().API.GetImageUrl(imageId,options);    controller.setIcon(Uri.parse(imageUrl));  }}  }
class C{  public void refreshUpdateDocument(int id,FolderDocUpdIds docUpdIds) throws Exception {  m_documents.refreshUpdateDocument(id,docUpdIds);}  }
class C{  public static void startActivity(Context context,String sharingId){  Intent intent=new Intent(context,VideoSharingLogView.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(EXTRA_SHARING_ID,sharingId);  context.startActivity(intent);}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  public void destroySubcontext(Name name) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  NamingContext the_nc=_nc;  NameComponent[] path=CNNameParser.nameToCosName(name);  if (name.size() > 0) {    try {      javax.naming.Context ctx=(javax.naming.Context)callResolve(path);      CNCtx cnc=(CNCtx)ctx;      the_nc=cnc._nc;      cnc.close();    } catch (    ClassCastException e) {      throw new NotContextException(name.toString());    }catch (    CannotProceedException e) {      javax.naming.Context cctx=getContinuationContext(e);      cctx.destroySubcontext(e.getRemainingName());      return;    }catch (    NameNotFoundException e) {      if (e.getRootCause() instanceof NotFound && leafNotFound((NotFound)e.getRootCause(),path[path.length - 1])) {        return;      }      throw e;    }catch (    NamingException e) {      throw e;    }  }  callDestroy(the_nc);  callUnbind(path);}  }
class C{  private ChartPanel createChartPanel(Tradestrategy tradestrategy) throws PersistentModelException {  ZonedDateTime startDate=null;  ZonedDateTime endDate=null;  if (null == tradestrategy.getStrategyData()) {    tradestrategy.setStrategyData(StrategyData.create(tradestrategy));  }  if (tradestrategy.getStrategyData().getBaseCandleSeries().isEmpty()) {    endDate=TradingCalendar.getDateAtTime(TradingCalendar.addTradingDays(tradestrategy.getTradingday().getClose(),backfillOffsetDays),tradestrategy.getTradingday().getClose());    startDate=endDate.minusDays((tradestrategy.getChartDays() - 1));    startDate=TradingCalendar.getPrevTradingDay(startDate);    startDate=TradingCalendar.getDateAtTime(startDate,tradestrategy.getTradingday().getOpen());    List<Candle> candles=m_tradePersistentModel.findCandlesByContractDateRangeBarSize(tradestrategy.getContract().getIdContract(),startDate,endDate,tradestrategy.getBarSize());    if (candles.isEmpty()) {      this.setStatusBarMessage("No chart data available for " + tradestrategy.getContract().getSymbol(),BasePanel.INFORMATION);    } else {      CandleDataset.populateSeries(tradestrategy.getStrategyData(),candles);      candles.clear();      populateIndicatorCandleSeries(tradestrategy,startDate,endDate);    }  }  ChartPanel chartPanel=new ChartPanel(tradestrategy);  return chartPanel;}  }
class C{  public boolean allowAimedShotWith(Mounted weapon){  return Compute.allowAimedShotWith(weapon,aimingMode);}  }
class C{  public int writeBit(final int bit) throws IOException {  if (bit < 0 || bit > 1)   throw new IllegalArgumentException("The argument " + bit + " is not a bit.");  return writeInCurrent(bit,1);}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new NorwegianAnalyzer();  checkOneTerm(a,"havnedistriktene","havnedistrikt");  checkOneTerm(a,"havnedistrikter","havnedistrikt");  assertAnalyzesTo(a,"det",new String[]{});  a.close();}  }
class C{  public DefaultTextField(Border border){  setBorder(border);}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.remove(propertyName,listener);  }}  }
class C{  public MarkerBubblePopup(Activity owner){  this(owner,org.osmdroid.library.R.layout.bonuspack_bubble,R.id.bubble_title,R.id.bubble_description,R.id.bubble_subdescription,R.id.bubble_image,R.id.bubble_moreinfo);}  }
class C{  @FromString public static Weeks parseWeeks(String periodStr){  if (periodStr == null) {    return Weeks.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Weeks.weeks(p.getWeeks());}  }
class C{  public static void delete(String code,JDA jda){  Invite invite=resolve(code);  if (invite == null)   throw new IllegalArgumentException("The provided Invite code was invalid, thus JDA cannot attempt" + "to delete it! Provided Code: " + code);  delete(invite,jda);}  }
class C{  public static ImageIcon createImageIcon(int width,int height){  return createImageIcon(width,height,BufferedImage.TYPE_INT_ARGB);}  }
class C{  public void createTestDatabaseEntitiesForBusinessObjectFormatTesting(){  createTestDatabaseEntitiesForBusinessObjectFormatTesting(AbstractServiceTest.NAMESPACE,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.PARTITION_KEY_GROUP);}  }
class C{  void notifyNoxItemReady(int position){  setChanged();  notifyObservers(position);}  }
class C{  @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.252 -0500",hash_original_method="543113738AC73676270E7FCF210EDB1F",hash_generated_method="A7851546E4E62DD9E4A187AF2279F6AD") public void addRoundRect(RectF rect,float[] radii,Direction dir){  if (rect == null) {    throw new NullPointerException("need rect parameter");  }  if (radii.length < 8) {    throw new ArrayIndexOutOfBoundsException("radii[] needs 8 values");  }  isSimplePath=false;  addTaint(rect.getTaintInt() + radii[0] + dir.nativeInt);}  }
class C{  boolean isSuccessful(){  return success;}  }
class C{  public static InfraredPacket sendPacket(final World world,final Vec3 position,final Vec3 direction,final short value){  if (API.infraredAPI != null)   return API.infraredAPI.sendPacket(world,position,direction,value);  return null;}  }
class C{  public static GF2Vector encode(final int n,final int t,final byte[] m){  if (n < t) {    throw new IllegalArgumentException("n < t");  }  BigInteger c=IntegerFunctions.binomial(n,t);  BigInteger i=new BigInteger(1,m);  if (i.compareTo(c) >= 0) {    throw new IllegalArgumentException("Encoded number too large.");  }  GF2Vector result=new GF2Vector(n);  int nn=n;  int tt=t;  for (int j=0; j < n; j++) {    c=c.multiply(BigInteger.valueOf(nn - tt)).divide(BigInteger.valueOf(nn));    nn--;    if (c.compareTo(i) <= 0) {      result.setBit(j);      i=i.subtract(c);      tt--;      if (nn == tt) {        c=ONE;      } else {        c=(c.multiply(BigInteger.valueOf(tt + 1))).divide(BigInteger.valueOf(nn - tt));      }    }  }  return result;}  }
class C{  protected CellRendererPane createCellRendererPane(){  return new CellRendererPane();}  }
class C{  protected PropertyListParser(){}  }
class C{  public Completable delete(Bookmark bookmark){  return Async.<Void>start(null,BackgroundScheduler.instance()).toCompletable();}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || DataSyncPreferenceFragment.class.getName().equals(fragmentName)|| NotificationPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public boolean isIDRSlice(){  if (FUI_TYPE == (byte)0x05) {    return true;  }  if (isFrameNonInterleaved() && FUH_TYPE == (byte)0x05) {    return true;  }  return false;}  }
class C{  public boolean isBuiltinSoundAvailable(String soundIdentifier){  return impl.isBuiltinSoundAvailable(soundIdentifier);}  }
class C{  static public int ceilPositive(float x){  return (int)(x + CEIL);}  }
class C{  private void resetUserFactors(XParameterData parameterData){  for (  XParameterIdData parameterIdData : parameterData.getIdData()) {    for (    XParameterPeriodValue periodValue : parameterIdData.getPeriodValues()) {      periodValue.setUserAssignmentFactor(0);      if (periodValue.getRolePrices() != null) {        Set<Long> containerKeys=periodValue.getRolePrices().getContainerKeys();        for (        Long containerKey : containerKeys) {          Map<Long,RolePricingDetails> rolePricesForContainerKey=periodValue.getRolePrices().getRolePricesForContainerKey(containerKey);          for (          Long k : rolePricesForContainerKey.keySet()) {            rolePricesForContainerKey.get(k).setFactor(0D);          }        }      }    }  }}  }
class C{  private long computeFreshnessLifetime(){  if (maxAgeSeconds != -1) {    return TimeUnit.SECONDS.toMillis(maxAgeSeconds);  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && uri.getRawQuery() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  public static PrincipalId parseGroupId(String groupId) throws ParserException {  ValidateUtil.validateNotEmpty(groupId,"groupId");  final PrincipalId group;  if (groupId.contains("\\")) {    String[] parts=splitInTwo(groupId,'\\');    group=new PrincipalId(parts[1],parts[0]);  } else {    String[] parts=splitInTwo(groupId,'/');    group=new PrincipalId(parts[0],parts[1]);  }  return group;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.947 -0500",hash_original_method="E0DF0E5E95BB69DC7E72889656D60AB7",hash_generated_method="160F3AEDF71F294F3E46D3510750FE44") public void delete() throws IOException {  close();  IoUtils.deleteContents(directory);}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(this.getModifiers());}  }
class C{  public static void add(List<String> options,String option,OptionHandler value){  options.add("-" + option);  options.add("" + Utils.toCommandLine(value));}  }
class C{  protected void commandContinuationRequest() throws DecodingException {  try {    output.write('+');    output.write('\r');    output.write('\n');    output.flush();  } catch (  IOException e) {    throw new DecodingException(HumanReadableText.SOCKET_IO_FAILURE,"Unexpected exception in sending command continuation request.",e);  }}  }
class C{  public CombinedRangeXYPlot(ValueAxis rangeAxis){  super(null,null,rangeAxis,null);  this.subplots=new java.util.ArrayList<XYPlot>();}  }
class C{  public void unsetTimes(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,TIMES_ISSET_ID);}  }
class C{  private void handleAllocation(AzureAllocationContext ctx){switch (ctx.stage) {case VMDESC:    getVMDescription(ctx,AzureStages.PARENTDESC);  break;case PARENTDESC:getParentDescription(ctx,AzureStages.PARENTAUTH);break;case PARENTAUTH:getParentAuth(ctx,AzureStages.CLIENT);break;case CLIENT:if (ctx.credentials == null) {try {ctx.credentials=getAzureConfig(ctx.parentAuth);} catch (Throwable e) {logSevere(e);ctx.error=e;ctx.stage=AzureStages.ERROR;handleAllocation(ctx);return;}}try {ctx.httpClient=new OkHttpClient();ctx.clientBuilder=ctx.httpClient.newBuilder();} catch (Exception e) {handleError(ctx,e);return;}switch (ctx.computeRequest.requestType) {case CREATE:ctx.stage=AzureStages.CHILDAUTH;handleAllocation(ctx);break;case VALIDATE_CREDENTIALS:validateAzureCredentials(ctx);break;case DELETE:case DELETE_DOCUMENTS_ONLY:ctx.stage=AzureStages.DELETE;handleAllocation(ctx);break;default :ctx.error=new IllegalStateException("Unknown compute request type: " + ctx.computeRequest.requestType);ctx.stage=AzureStages.ERROR;handleAllocation(ctx);}break;case CHILDAUTH:getChildAuth(ctx,AzureStages.VMDISKS);break;case VMDISKS:getVMDisks(ctx,AzureStages.INIT_RES_GROUP);break;case INIT_RES_GROUP:initResourceGroup(ctx,AzureStages.GET_DISK_OS_FAMILY);break;case GET_DISK_OS_FAMILY:differentiateVMImages(ctx,AzureStages.INIT_STORAGE);break;case INIT_STORAGE:initStorageAccount(ctx,AzureStages.INIT_NETWORK);break;case INIT_NETWORK:initNetwork(ctx,AzureStages.INIT_PUBLIC_IP);break;case INIT_PUBLIC_IP:initPublicIP(ctx,AzureStages.INIT_SEC_GROUP);break;case INIT_SEC_GROUP:initSecurityGroup(ctx,AzureStages.INIT_NIC);break;case INIT_NIC:initNIC(ctx,AzureStages.CREATE);break;case CREATE:createVM(ctx,AzureStages.GET_PUBLIC_IP_ADDRESS);break;case ENABLE_MONITORING:try {enableMonitoring(ctx,AzureStages.GET_STORAGE_KEYS);} catch (Throwable e) {this.handleError(ctx,e);return;}break;case GET_PUBLIC_IP_ADDRESS:getPublicIpAddress(ctx,AzureStages.GET_STORAGE_KEYS);break;case GET_STORAGE_KEYS:getStorageKeys(ctx,AzureStages.FINISHED);break;case FINISHED:AdapterUtils.sendPatchToProvisioningTask(AzureInstanceService.this,ctx.computeRequest.taskReference);cleanUpHttpClient(this,ctx.httpClient);break;case DELETE:deleteVM(ctx);break;case ERROR:if (ctx.computeRequest.taskReference != null) {AdapterUtils.sendFailurePatchToProvisioningTask(this,ctx.computeRequest.taskReference,ctx.error);}cleanUpHttpClient(this,ctx.httpClient);break;default :logSevere("Unhandled stage: %s",ctx.stage.toString());cleanUpHttpClient(this,ctx.httpClient);break;}}  }
class C{  public void removeAll(){  this.connectionToTimes.clear();}  }
class C{  public WarCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private boolean isNotOlderThan(String already,String target) throws NumberFormatException {  if (already == null || already.length() < 1) {    throw new NumberFormatException("Empty version string");  }  StringTokenizer dtok=new StringTokenizer(target,".",true);  StringTokenizer stok=new StringTokenizer(already,".",true);  while (dtok.hasMoreTokens() || stok.hasMoreTokens()) {    int dver;    int sver;    if (dtok.hasMoreTokens()) {      dver=Integer.parseInt(dtok.nextToken());    } else     dver=0;    if (stok.hasMoreTokens()) {      sver=Integer.parseInt(stok.nextToken());    } else     sver=0;    if (sver < dver)     return false;    if (sver > dver)     return true;    if (dtok.hasMoreTokens())     dtok.nextToken();    if (stok.hasMoreTokens())     stok.nextToken();  }  return true;}  }
class C{  void updateInputMap(Keymap oldKm,Keymap newKm){  InputMap km=getInputMap(JComponent.WHEN_FOCUSED);  InputMap last=km;  while (km != null && !(km instanceof KeymapWrapper)) {    last=km;    km=km.getParent();  }  if (km != null) {    if (newKm == null) {      if (last != km) {        last.setParent(km.getParent());      } else {        last.setParent(null);      }    } else {      InputMap newKM=new KeymapWrapper(newKm);      last.setParent(newKM);      if (last != km) {        newKM.setParent(km.getParent());      }    }  } else   if (newKm != null) {    km=getInputMap(JComponent.WHEN_FOCUSED);    if (km != null) {      InputMap newKM=new KeymapWrapper(newKm);      newKM.setParent(km.getParent());      km.setParent(newKM);    }  }  ActionMap am=getActionMap();  ActionMap lastAM=am;  while (am != null && !(am instanceof KeymapActionMap)) {    lastAM=am;    am=am.getParent();  }  if (am != null) {    if (newKm == null) {      if (lastAM != am) {        lastAM.setParent(am.getParent());      } else {        lastAM.setParent(null);      }    } else {      ActionMap newAM=new KeymapActionMap(newKm);      lastAM.setParent(newAM);      if (lastAM != am) {        newAM.setParent(am.getParent());      }    }  } else   if (newKm != null) {    am=getActionMap();    if (am != null) {      ActionMap newAM=new KeymapActionMap(newKm);      newAM.setParent(am.getParent());      am.setParent(newAM);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__LIST_1:    return isList_1();case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__NAME_1:  return getName_1();case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__TYPE_1:return getType_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean meekR3(Graph graph,IKnowledge knowledge){  List<Node> nodes=graph.getNodes();  boolean changed=false;  for (  Node a : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(a);    if (adjacentNodes.size() < 3) {      continue;    }    for (    Node b : adjacentNodes) {      List<Node> otherAdjacents=new LinkedList<>(adjacentNodes);      otherAdjacents.remove(b);      if (!graph.isUndirectedFromTo(a,b)) {        continue;      }      ChoiceGenerator cg=new ChoiceGenerator(otherAdjacents.size(),2);      int[] combination;      while ((combination=cg.next()) != null) {        Node c=otherAdjacents.get(combination[0]);        Node d=otherAdjacents.get(combination[1]);        if (graph.isAdjacentTo(c,d)) {          continue;        }        if (!graph.isUndirectedFromTo(a,c)) {          continue;        }        if (!graph.isUndirectedFromTo(a,d)) {          continue;        }        if (graph.isDirectedFromTo(c,b) && graph.isDirectedFromTo(d,b)) {          if (isArrowpointAllowed(a,b,knowledge)) {            graph.setEndpoint(a,b,Endpoint.ARROW);            TetradLogger.getInstance().log("impliedOrientation",SearchLogUtils.edgeOrientedMsg("Meek R3",graph.getEdge(a,b)));            changed=true;            break;          }        }      }    }  }  return changed;}  }
class C{  public VisualizationImageServer(Layout<V,E> layout,Dimension preferredSize){  super(layout,preferredSize);  setSize(preferredSize);  renderingHints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  addNotify();}  }
class C{  public KMLBoundary(String namespaceURI){  super(namespaceURI);}  }
class C{  public boolean retry(){  return (_retries++) < _RETRY_LIMIT;}  }
class C{  @NotNull default B append(long value) throws BufferOverflowException {  BytesInternal.append(this,value,10);  return (B)this;}  }
class C{  public DateTime withMinuteOfHour(int minute){  return withMillis(getChronology().minuteOfHour().set(getMillis(),minute));}  }
class C{  public void importPackage(String name){  getParent().importPackage(name);}  }
class C{  public static double[][] scalarProduct(double scalar,double[][] m){  TetradMatrix _m=new TetradMatrix(m);  return _m.scalarMult(scalar).toArray();}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private boolean replaceBadEntry(KBucketEntry entry){  List<KBucketEntry> entriesRef=entries;  for (int i=0, n=entriesRef.size(); i < n; i++) {    KBucketEntry e=entriesRef.get(i);    if (e.needsReplacement()) {      modifyMainBucket(e,entry);      return true;    }  }  return false;}  }
class C{  public void addNodes(NodeList nodelist){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null != nodelist) {    int nChildren=nodelist.getLength();    for (int i=0; i < nChildren; i++) {      Node obj=nodelist.item(i);      if (null != obj) {        addElement(obj);      }    }  }}  }
class C{  public void testJavaContextClassLoader() throws Exception {  Assert.assertNotNull("Must have a Java context ClassLoader",Thread.currentThread().getContextClassLoader());}  }
class C{  private Point pointAtDefaultZoom(Point p){  return new Point(toDefaultZoom(p.getX()),toDefaultZoom(p.getY()));}  }
class C{  public void checkLongestWinStreak(TeamStreak streak){  if (streak.getStreakLength() > longestWinStreak.getStreakLength()) {    longestWinStreak=new TeamStreak(streak.getStartYear(),streak.getEndYear(),streak.getStreakLength(),streak.getTeam());  }}  }
class C{  public int readDelta() throws IOException {  int preComp;  if ((fill >= 16 || refill() >= 16) && (preComp=DELTA[current >> (fill - 16) & 0xFFFF]) != 0) {    readBits+=preComp >> 16;    fill-=preComp >> 16;    return preComp & 0xFFFF;  }  final int msb=readGamma();  return ((1 << msb) | readInt(msb)) - 1;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("No dataset supplied!");    System.exit(1);  }  Instances data=DataSource.read(args[0]);  JSONNode json=toJSON(data);  StringBuffer buffer=new StringBuffer();  json.toString(buffer);  System.out.println(buffer.toString());  Instances inst=toInstances(json);  System.out.println(inst);}  }
class C{  public boolean userCanMoveDept(int connectedUserId,int DeptId,int dstDeptId,String entidad) throws Exception {  boolean can=false;  int parentId=Defs.NULL_ID;  int parentDeptMgrId=Defs.NULL_ID;  int dstDeptMgrId=Defs.NULL_ID;  try {    parentId=getDeptParentId(DeptId,entidad);    if (parentId == Defs.ROOT_DEPT_ID)     parentDeptMgrId=0; else     parentDeptMgrId=getDeptMgrId(DeptId,entidad);    if (dstDeptId == Defs.NULL_ID || dstDeptId == Defs.ROOT_DEPT_ID)     dstDeptMgrId=0; else     dstDeptMgrId=getDeptMgrId(dstDeptId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_EDIT,Defs.NULL_ID,parentDeptMgrId,dstDeptMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static WritableRaster makeRasterWritable(Raster ras){  return makeRasterWritable(ras,ras.getMinX(),ras.getMinY());}  }
class C{  public static boolean[] join(boolean[] arrayA,boolean... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  boolean[] array=new boolean[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public static void dragQuarterScreenUp(InstrumentationTestCase test,Activity activity){  Display display=activity.getWindowManager().getDefaultDisplay();  final Point size=new Point();  display.getSize(size);  final float x=size.x / 2.0f;  final float fromY=size.y * 0.5f;  final float toY=size.y * 0.25f;  drag(test,x,x,fromY,toY,4);}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  List<Game> currentGames=gameAdapter.getCurrentGames();  Parcelable currentGamesParcel=Parcels.wrap(currentGames);  outState.putParcelable(EXTRA_CURRENT_GAMES_LOADED,currentGamesParcel);}  }
class C{  public void register3(String name,Type arg1,Type arg2,Type arg3,InvocationPlugin plugin){  plugins.register(plugin,false,allowOverwrite,declaringType,name,arg1,arg2,arg3);}  }
class C{  void replace(DocumentFilter.FilterBypass fb,int offset,int length,String text,AttributeSet attrs) throws BadLocationException {  if (ignoreDocumentMutate) {    fb.replace(offset,length,text,attrs);    return;  }  super.replace(fb,offset,length,text,attrs);}  }
class C{  public String globalInfo(){  return "Reduces the dimensionality of the data by projecting" + " it onto a lower dimensional subspace using a random" + " matrix with columns of unit length (i.e. It will reduce"+ " the number of attributes in the data while preserving"+ " much of its variation like PCA, but at a much less"+ " computational cost).\n"+ "It first applies the  NominalToBinary filter to"+ " convert all attributes to numeric before reducing the"+ " dimension. It preserves the class attribute.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static String markJavaElementLabelLTR(String string){  if (!USE_TEXT_PROCESSOR)   return string;  return TextProcessor.process(string,JAVA_ELEMENT_DELIMITERS);}  }
class C{  public ShapeData(DrawContext dc,AbstractGeneralShape shape){  super(dc,shape);}  }
class C{  private ValidationResult validateLogoutRequest(ValidationResult vr,IdmAccessor accessor,LogoutRequest request){  Validate.notNull(request.getIssuer());  try {    @SuppressWarnings("unused") String acsUrl=accessor.getSloForRelyingParty(request.getIssuer().getValue(),OasisNames.HTTP_REDIRECT);  } catch (  IllegalStateException e) {    log.debug("Caught illegal state exception while Validating " + e.toString() + ", returning 400");    vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,e.getMessage(),null);  }  if (vr == null && request.getID() == null) {    vr=new ValidationResult(OasisNames.REQUESTER);    log.debug("Validation FAILED - Request ID is missing");  }  if (vr == null) {    SAMLVersion version=request.getVersion();    if ((version.getMajorVersion() > Shared.REQUIRED_SAML_VERSION.getMajorVersion()) || version.getMajorVersion() == Shared.REQUIRED_SAML_VERSION.getMajorVersion() && version.getMinorVersion() > Shared.REQUIRED_SAML_VERSION.getMinorVersion()) {      vr=new ValidationResult(OasisNames.VERSION_MISMATCH,OasisNames.REQUEST_VERSION_TOO_HIGH);      log.debug("Validation FAILED - Version is too high");    } else     if ((version.getMajorVersion() < Shared.REQUIRED_SAML_VERSION.getMajorVersion()) || version.getMajorVersion() == Shared.REQUIRED_SAML_VERSION.getMajorVersion() && version.getMinorVersion() < Shared.REQUIRED_SAML_VERSION.getMinorVersion()) {      vr=new ValidationResult(OasisNames.VERSION_MISMATCH,OasisNames.REQUEST_VERSION_TOO_LOW);      log.debug("Validation FAILED - Version is too low");    }  }  if (vr == null) {    DateTime dtPlus=request.getIssueInstant();    DateTime dtMinus=request.getIssueInstant();    DateTime instant=new DateTime();    long clockTolerance=accessor.getClockTolerance();    if (dtPlus == null) {      vr=new ValidationResult(OasisNames.REQUESTER);      log.debug("Validation FAILED - Issue Instant is missing");    } else {      dtPlus=dtPlus.plus(clockTolerance);      dtMinus=dtMinus.minus(clockTolerance);      if (dtPlus.isBefore(instant) || dtMinus.isAfter(instant)) {        vr=new ValidationResult(OasisNames.REQUESTER);        log.debug("Validation FAILED - Issue Instant outside of clock tolerance");        log.debug("clockTolerance {}",clockTolerance);        log.debug("now {}",instant);        log.debug("dtPlus {}",dtPlus.toString());        log.debug("dtMinus {}",dtMinus.toString());      }    }  }  if (vr == null) {    DateTime notOnOrAfter=request.getNotOnOrAfter();    if (notOnOrAfter != null) {      DateTime instant=new DateTime();      if (!instant.isBefore(notOnOrAfter)) {        vr=new ValidationResult(OasisNames.REQUESTER,OasisNames.REQUEST_DENIED);        log.debug("Validation FAILED - NotOnOrAfter condition violated");        log.debug("now {}",instant);        log.debug("notOnOrAfter {}",notOnOrAfter.toString());      }    }  }  if (vr == null) {    NameID nameID=request.getNameID();    if (nameID == null || nameID.getFormat() == null || nameID.getValue() == null) {      log.debug("Validation FAILED for NameID: node, format or value missing");      vr=new ValidationResult(OasisNames.REQUESTER);    }  }  if (vr == null) {    List<SessionIndex> sessionList=request.getSessionIndexes();    if (sessionList == null || sessionList.size() == 0) {      log.debug("Validation FAILED for session indices: at least one session index is required");      vr=new ValidationResult(OasisNames.REQUESTER);    }  }  if (vr == null) {    vr=new ValidationResult();  }  return vr;}  }
class C{  public static StringBuilder whitespace(StringBuilder buf,int n){  while (n >= WHITESPACE_BUFFER_LENGTH) {    buf.append(WHITESPACE_BUFFER);    n-=WHITESPACE_BUFFER_LENGTH;  }  return n > 0 ? buf.append(WHITESPACE_BUFFER,0,n) : buf;}  }
class C{  protected void appendNullText(StringBuffer buffer,String fieldName){  buffer.append(nullText);}  }
class C{  @Override public void messageArrived(String topic,MqttMessage message) throws Exception {  log.debug("[{}] New message on '{}' arrived.",mMqttClientId,topic);  this.mQueue.add(mConfig.getConfiguredInstance(MqttSourceConstant.MESSAGE_PROCESSOR,MqttMessageProcessor.class).process(topic,message));}  }
class C{  private static boolean isCurrentOS(String osname){  if (osname == null) {    return false;  } else {    return (OS_NAME.indexOf(osname) >= 0);  }}  }
class C{  public static String toString(long x){  if (x == MIN_VALUE) {    return String.wrap("-9223372036854775808");  }  char[] ch=new char[30];  int i=30 - 1, count=0;  boolean negative;  if (x < 0) {    negative=true;    x=-x;  } else {    negative=false;  }  for (; i >= 0; i--) {    ch[i]=(char)('0' + (x % 10));    x/=10;    count++;    if (x == 0) {      break;    }  }  if (negative) {    ch[--i]='-';    count++;  }  return new String(ch,i,count);}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.610 -0500",hash_original_method="B6A6DA92002B5EA057CE082C91930B65",hash_generated_method="A603441423DB3EB7274980FF307DAD07") public SIPRequest createRequest(SipUri requestURI,Via via,CSeq cseq,From from,To to){  SIPRequest newRequest=new SIPRequest();  String method=cseq.getMethod();  newRequest.setMethod(method);  newRequest.setRequestURI(requestURI);  this.setBranch(via,method);  newRequest.setHeader(via);  newRequest.setHeader(cseq);  Iterator headerIterator=getHeaders();  while (headerIterator.hasNext()) {    SIPHeader nextHeader=(SIPHeader)headerIterator.next();    if (SIPMessage.isResponseHeader(nextHeader) || nextHeader instanceof ViaList || nextHeader instanceof CSeq|| nextHeader instanceof ContentType|| nextHeader instanceof ContentLength|| nextHeader instanceof RecordRouteList|| nextHeader instanceof RequireList|| nextHeader instanceof ContactList|| nextHeader instanceof ContentLength|| nextHeader instanceof ServerHeader|| nextHeader instanceof ReasonHeader|| nextHeader instanceof SessionExpires|| nextHeader instanceof ReasonList) {      continue;    }    if (nextHeader instanceof To)     nextHeader=(SIPHeader)to; else     if (nextHeader instanceof From)     nextHeader=(SIPHeader)from;    try {      newRequest.attachHeader(nextHeader,false);    } catch (    SIPDuplicateHeaderException e) {      e.printStackTrace();    }  }  try {    newRequest.attachHeader(new MaxForwards(70),false);  } catch (  Exception d) {  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  public void testMoveDirectorySourceAndDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,DIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,SUBDIR,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.403 -0500",hash_original_method="E19FA42AA082CC163404041188B59FFA",hash_generated_method="4CEFECF21EB2AF8C2BB7F8E6763AB164") public static void sort(char[] a){  doSort(a,0,a.length - 1);}  }
class C{  public void clear(){  rows.clear();}  }
class C{  public static CCFadeTo action(float t,int a){  return new CCFadeTo(t,a);}  }
class C{  public EquipRandomAmountOfItemAction(final String item,final int min,final int max){  this(item,min,max,1);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public List<String> validate(boolean requireProcessors){  List<String> errors=new ArrayList<>();  if (testSourceFiles == null || !testSourceFiles.iterator().hasNext()) {    errors.add("No source files specified!");  }  if (requireProcessors && !processors.iterator().hasNext()) {    errors.add("No processors were specified!");  }  final Map<String,String> optionMap=options.getOptions();  if (!optionMap.containsKey("-d") || optionMap.get("-d") == null) {    errors.add("No output directory was specified.");  }  if (optionMap.containsKey("-processor")) {    errors.add("Processors should not be added to the options list");  }  return errors;}  }
class C{  @Deprecated public void sendJavascript(String statement){  if (this.appView != null) {    this.appView.bridge.getMessageQueue().addJavaScript(statement);  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void enableBuffer(){  if (bufferToggle == null) {    bufferToggle=this.newLogReader();  }}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  public void executeCmdLine(String[] cmd){  if (RR_VIA_LINK.equals(cmd[0])) {    if (cmd.length == 5) {      rerouteViaLink(getTransitRoute(cmd[1],cmd[2]),cmd[3],cmd[4]);    } else {      throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 5 needed, "+ cmd.length+ " given");    }  } else   if (RR_FROM_STOP.equals(cmd[0])) {    if (cmd.length == 5) {      rerouteFromStop(getTransitRoute(cmd[1],cmd[2]),cmd[3],cmd[4]);    } else {      throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 5 needed, "+ cmd.length+ " given");    }  } else   if (CHANGE_REF_LINK.equals(cmd[0])) {    if ("".equals(cmd[3])) {      changeRefLink(cmd[1],cmd[2]);    } else     if (cmd.length == 5) {switch (cmd[1]) {case ALL_TRANSIT_ROUTES_ON_LINK:        Set<TransitRoute> tmpTransitRoutes=getTransitRoutesOnLink(Id.createLinkId(cmd[2]));      for (      TransitRoute tr : tmpTransitRoutes) {        changeRefLink(tr,cmd[3],cmd[4]);      }    break;default :  changeRefLink(getTransitRoute(cmd[1],cmd[2]),cmd[3],cmd[4]);}} else {throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 3 or 5 needed, "+ cmd.length+ " given");}} else if (ADD_LINK.equals(cmd[0])) {if (cmd.length == 5) {addLink(cmd[1],cmd[2],cmd[3],cmd[4]);refreshSchedule();} else {throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 5 needed, "+ cmd.length+ " given");}} else if (REFRESH_TRANSIT_ROUTE.equals(cmd[0])) {if (cmd.length >= 3) {refreshTransitRoute(getTransitRoute(cmd[1],cmd[2]));} else {throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 3 needed, "+ cmd.length+ " given");}} else if (COMMENT_START.equals(cmd[0].substring(0,2))) {} else {throw new IllegalArgumentException("Invalid command \"" + cmd[0] + "\"");}}  }
class C{  public SE8cSignalHead(String sname,NamedBeanHandle<Turnout> lowTO,NamedBeanHandle<Turnout> highTO,String userName){  super(sname,userName);  this.lowTurnout=lowTO;  this.highTurnout=highTO;  systemName=sname;  init();}  }
class C{  public double[][] bias(){  int numValues=m_classAttribute.numValues();  double[][] bias=new double[numValues][numValues];  for (int i=0; i < numValues; i++) {    for (int j=i + 1; j < numValues; j++) {      bias[i][j]=m_classifiers[i][j].m_b;    }  }  return bias;}  }
class C{  public boolean isFramebufferObjectEnabled(){  return this.isFramebufferObjectEnabled;}  }
class C{  @DSComment("GUI, no security concern") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.074 -0500",hash_original_method="4A0CDBB7EA97DC376E25E0EE43387CF4",hash_generated_method="2974FADFA5947469B520D265DBDEB530") public void hide(){  if (mDecor != null) {    mDecor.setVisibility(View.GONE);  }}  }
class C{  @Override protected void initData(){}  }
class C{  @Override public KernelDensityFunction copy(){  KernelDensityFunction copy=new KernelDensityFunction(points);  return copy;}  }
class C{  public static Object loadModule(String homedir,ScriptEngine engine,String name) throws FileNotFoundException, ScriptException {  HashMap<String,File> mp=(HashMap<String,File>)engine.get("__MODULES");  Object ret=load(mp.get(name),engine);  return ret;}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  public long value(int i){  return Array.getLong(values,i);}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands){  char[] out=new char[35];  boolean neg=false;  if (number == 0) {    return "0";  }  boolean zero=false;  if (number < 1 && number > -1) {    zero=true;  }  if (number < 0) {    neg=true;    number=-number;  }  if (digitCount > POW_10.length) {    digitCount=POW_10.length - 1;  }  number*=POW_10[digitCount];  long lval=Math.round(number);  int ind=out.length - 1;  int charCount=0;  boolean decimalPointAdded=false;  while (lval != 0 || charCount < (digitCount + 1)) {    int digit=(int)(lval % 10);    lval=lval / 10;    out[ind--]=(char)(digit + '0');    charCount++;    if (charCount == digitCount) {      out[ind--]=',';      charCount++;      decimalPointAdded=true;    } else     if (separateThousands && lval != 0 && charCount > digitCount) {      if (decimalPointAdded) {        if ((charCount - digitCount) % 4 == 0) {          out[ind--]='.';          charCount++;        }      } else {        if ((charCount - digitCount) % 4 == 3) {          out[ind--]='.';          charCount++;        }      }    }  }  if (zero) {    out[ind--]='0';    charCount+=1;  }  if (neg) {    out[ind--]='-';    charCount+=1;  }  int start=out.length - charCount;  return String.valueOf(out,start,out.length - start);}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_String(){  Locale x=new Locale("xx","CV","ZZ");  assertTrue("Failed to create Locale",x.getLanguage().equals("xx") && (x.getCountry().equals("CV") && x.getVariant().equals("ZZ")));  try {    new Locale(null,"CV","ZZ");    fail("expected NullPointerException with 1st parameter == null");  } catch (  NullPointerException e) {  }  try {    new Locale("xx",null,"ZZ");    fail("expected NullPointerException with 2nd parameter == null");  } catch (  NullPointerException e) {  }  try {    new Locale("xx","CV",null);    fail("expected NullPointerException with 3rd parameter == null");  } catch (  NullPointerException e) {  }}  }
class C{  public void toXML(final Object obj,final OutputStream out){  @SuppressWarnings("resource") final HierarchicalStreamWriter writer=hierarchicalStreamDriver.createWriter(out);  try {    marshal(obj,writer);  }  finally {    writer.flush();  }}  }
class C{  public boolean updateVotesAndBounds(final Key photoKey,final long oldVote,final long newVote) throws DatastoreException {  Entity photoEntity=getPhoto(photoKey);  Map<String,Value> propsPhoto=getPropertyMap(photoEntity);  long newVoteCount=propsPhoto.get("numberVotes").getIntegerValue();  long newPositiveVoteCount=propsPhoto.get("numberPositiveVotes").getIntegerValue();  if (newVote == 0) {    newVoteCount--;  }  if (oldVote == 0) {    newVoteCount++;  }  if (oldVote == 1 && newVote != 1) {    newPositiveVoteCount--;  }  if (oldVote != 1 && newVote == 1) {    newPositiveVoteCount++;  }  double lowerTruePopularity=0;  double upperTruePopularity=0;  if (newVoteCount > 0) {    WilsonScoreInterval wilsonScoreInterval=new WilsonScoreInterval();    ConfidenceInterval confidenceInterval=wilsonScoreInterval.createInterval((int)newVoteCount,(int)newPositiveVoteCount,BackendConstants.CONFIDENCE_INTERVAL);    lowerTruePopularity=confidenceInterval.getLowerBound();    upperTruePopularity=confidenceInterval.getUpperBound();  }  List<Property> properties=ImmutableList.of(makeProperty("numberVotes",makeValue(newVoteCount)).build(),makeProperty("numberPositiveVotes",makeValue(newPositiveVoteCount)).build(),makeProperty("lowerTruePopularity",makeValue(lowerTruePopularity)).build(),makeProperty("upperTruePopularity",makeValue(upperTruePopularity)).build());  return DbUtils.updateEntity(datastore,photoEntity.getKey(),properties);}  }
class C{  public void testClose(){  SubmissionPublisher<Integer> p=basicPublisher();  checkInitialState(p);  p.close();  assertTrue(p.isClosed());  assertNull(p.getClosedException());  try {    p.submit(1);    shouldThrow();  } catch (  IllegalStateException success) {  }  Throwable ex=new SPException();  p.closeExceptionally(ex);  assertTrue(p.isClosed());  assertNull(p.getClosedException());}  }
class C{  static Observable<FingerprintDecryptionResult> create(Context context,String encrypted){  return Observable.create(new FingerprintDecryptionObservable(context,null,encrypted,new Base64Provider()));}  }
class C{  public SeekableFileInputStream(File file) throws FileNotFoundException {  randomAccessFile=new RandomAccessFile(file,"r");}  }
class C{  private void installApplication(JSONObject data,org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String appUrl;  String type;  String name;  String operationType;  String schedule=null;  try {    if (!data.isNull(getContextResources().getString(R.string.app_type))) {      type=data.getString(getContextResources().getString(R.string.app_type));      if (type.equalsIgnoreCase(getContextResources().getString(R.string.intent_extra_enterprise))) {        appUrl=data.getString(getContextResources().getString(R.string.app_url));        if (data.has(getContextResources().getString(R.string.app_schedule))) {          schedule=data.getString(getContextResources().getString(R.string.app_schedule));        }        operation.setStatus(getContextResources().getString(R.string.operation_value_progress));        getResultBuilder().build(operation);        getAppList().installApp(appUrl,schedule,operation);      } else       if (type.equalsIgnoreCase(getContextResources().getString(R.string.intent_extra_public))) {        appUrl=data.getString(getContextResources().getString(R.string.app_identifier));        operation.setStatus(getContextResources().getString(R.string.operation_value_completed));        getResultBuilder().build(operation);        Preference.putInt(getContext(),getContext().getResources().getString(R.string.app_install_id),operation.getId());        Preference.putString(getContext(),getContext().getResources().getString(R.string.app_install_code),operation.getCode());        triggerGooglePlayApp(appUrl);      } else       if (type.equalsIgnoreCase(getContextResources().getString(R.string.intent_extra_web))) {        name=data.getString(getContextResources().getString(R.string.intent_extra_name));        appUrl=data.getString(getContextResources().getString(R.string.app_url));        operationType=getContextResources().getString(R.string.operation_install);        JSONObject payload=new JSONObject();        payload.put(getContextResources().getString(R.string.intent_extra_identity),appUrl);        payload.put(getContextResources().getString(R.string.intent_extra_title),name);        payload.put(getContextResources().getString(R.string.operation_type),operationType);        operation.setPayLoad(payload.toString());        manageWebClip(operation);      } else {        operation.setStatus(getContextResources().getString(R.string.operation_value_error));        operation.setOperationResponse("Invalid application details provided.");        getResultBuilder().build(operation);        throw new AndroidAgentException("Invalid application details");      }      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(TAG,"Application installation triggered.");      }    }  } catch (  JSONException e) {    operation.setStatus(getContextResources().getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing APPLICATION payload.");    getResultBuilder().build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (comparator.compare(list.get(currentIndex),list.get(parentIndex)) > 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public Analyzer includeContribution(){  includeContribution=true;  return this;}  }
class C{  public void moveTo(float x,float y){  mPoints.add(PathPoint.moveTo(x,y));}  }
class C{  @Override protected boolean afterDelete(boolean success){  return success;}  }
class C{  public boolean containsValue(Object value){  return super.containsValue(value);}  }
class C{  public static LoggingFraction createDebugLoggingFraction(){  return createDefaultLoggingFraction(Level.DEBUG);}  }
class C{  public static boolean isDefaultToPortrait(Activity activity){  Display currentDisplay=activity.getWindowManager().getDefaultDisplay();  Point displaySize=new Point();  currentDisplay.getSize(displaySize);  int orientation=currentDisplay.getRotation();  int naturalWidth, naturalHeight;  if (orientation == Surface.ROTATION_0 || orientation == Surface.ROTATION_180) {    naturalWidth=displaySize.x;    naturalHeight=displaySize.y;  } else {    naturalWidth=displaySize.y;    naturalHeight=displaySize.x;  }  return naturalWidth < naturalHeight;}  }
class C{  @Override public void releaseTasks(){synchronized (lock) {    paused=false;  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  static double decodeMin(byte[] b,int dimension){  int offset=dimension * BYTES;  return NumericUtils.sortableLongToDouble(NumericUtils.sortableBytesToLong(b,offset));}  }
class C{  public void refresh(){  MouseEvent event=new MouseEvent(canvasPanel,MouseEvent.MOUSE_MOVED,System.currentTimeMillis(),0,1,1,0,false);  canvasPanel.dispatchEvent(event);}  }
class C{  @Override public Parcelable onSaveInstanceState(){  Parcelable superState=super.onSaveInstanceState();  SavedState ss=new SavedState(superState);  ss.toolbarTitle=this.toolbar.getTitle().toString();  return ss;}  }
class C{  private void initShadow(Context context){  view=new View(context);  view.setBackgroundResource(R.drawable.loading_shadow);  addView(view);}  }
class C{  private void validateExpandingSrdfVolume(Volume volume){  if (ControllerUtils.checkIfVolumeHasSnapshot(volume,_dbClient) || BlockSnapshotSessionUtils.volumeHasSnapshotSession(volume,_dbClient)) {    throw BadRequestException.badRequests.cannotExpandSRDFVolumeWithSnapshots(volume.getLabel());  }  Volume srdfVolume=volume;  if (volume.isVPlexVolume(_dbClient)) {    srdfVolume=VPlexSrdfUtil.getSrdfVolumeFromVplexVolume(_dbClient,volume);    if (srdfVolume != null) {      if (ControllerUtils.checkIfVolumeHasSnapshot(srdfVolume,_dbClient) || BlockSnapshotSessionUtils.volumeHasSnapshotSession(srdfVolume,_dbClient)) {        throw BadRequestException.badRequests.cannotExpandSRDFVolumeWithSnapshots(srdfVolume.getLabel());      }    }  }  if (srdfVolume.getSrdfTargets() != null) {    for (    String target : srdfVolume.getSrdfTargets()) {      Volume targetVolume=_dbClient.queryObject(Volume.class,URI.create(target));      if (BlockSnapshotSessionUtils.volumeHasSnapshotSession(targetVolume,_dbClient) || BlockSnapshotSessionUtils.volumeHasSnapshotSession(targetVolume,_dbClient)) {        throw BadRequestException.badRequests.cannotExpandSRDFVolumeWithSnapshots(targetVolume.getLabel());      }    }  }}  }
class C{  public int lastIndexOf(StrMatcher matcher,int startIndex){  startIndex=(startIndex >= size ? size - 1 : startIndex);  if (matcher == null || startIndex < 0) {    return -1;  }  char[] buf=buffer;  int endIndex=startIndex + 1;  for (int i=startIndex; i >= 0; i--) {    if (matcher.isMatch(buf,i,0,endIndex) > 0) {      return i;    }  }  return -1;}  }
class C{  public static String concatenate(final Collection<?> c){  final StringBuilder sb=new StringBuilder();  for (  final Object o : c) {    if (sb.length() > 0)     sb.append(", ");    sb.append(o);  }  return sb.toString();}  }
class C{  public static void loadEmergencyClasses(){  ConnectionTable.loadEmergencyClasses();}  }
class C{  public String currentDate(String format){  DateFormat formatter=getFormatter(format);  return formatter.format(new Date());}  }
class C{  @Override public void profile(){  recordStats();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.274 -0500",hash_original_method="9245089A3DC1CB81EAEF9FD5F462A315",hash_generated_method="55622FB3A2216EBA0977FFD151FF7F19") private DdmServer(){}  }
class C{  public int minCut(String s){  if (s == null || s.length() == 0)   return 0;  int len=s.length();  boolean[][] p=new boolean[len][len];  for (int i=0; i < len; i++)   Arrays.fill(p[i],false);  int[] results=new int[len];  for (int start=len - 1; start >= 0; start--) {    results[start]=len - start - 1;    for (int end=start; end < len; end++) {      if (s.charAt(start) == s.charAt(end)) {        if (end - start < 2)         p[start][end]=true; else         p[start][end]=p[start + 1][end - 1];      }      if (p[start][end]) {        if (end=len - 1)         results[start]=0; else         results[start]=Math.min(results[start],results[end + 1] + 1);      }    }  }  return results[0];}  }
class C{  public void reload(){  if (!mIsContainerOnly) {    mGeometry.reload();  }  for (int i=0, j=mChildren.size(); i < j; i++)   mChildren.get(i).reload();  if (mGeometry.hasBoundingBox() && mGeometry.getBoundingBox().getVisual() != null)   mGeometry.getBoundingBox().getVisual().reload();  if (mGeometry.hasBoundingSphere() && mGeometry.getBoundingSphere().getVisual() != null)   mGeometry.getBoundingSphere().getVisual().reload();}  }
class C{  protected Task<T> doGetTask(URI id,URI taskId){  TaskResourceRep response=client.get(TaskResourceRep.class,getIdUrl() + "/tasks/{taskId}",id,taskId);  return new Task<T>(client,response,resourceClass);}  }
class C{  public static Constraint validEmail(String errorMessage){  return new RegexConstraint(validEmailRegex,errorMessage);}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  private void obtainStyledAttributes(@StyleRes final int themeResourceId){  obtainBackground(themeResourceId);  obtainTitleColor(themeResourceId);  obtainItemColor(themeResourceId);  obtainDividerColor(themeResourceId);  obtainDimAmount(themeResourceId);  obtainDragSensitivity(themeResourceId);}  }
class C{  public GuardingProfiler(Writer writer,Writer verbose){  this(writer,verbose,DEFAULT_GUARD_DURATION_MILLIS);}  }
class C{  public Instances notCoveredInstances(){  return m_notCovered;}  }
class C{  private boolean processVarArg(CodeWriter code,MethodNode callMth,InsnArg lastArg) throws CodegenException {  if (callMth == null || !callMth.getAccessFlags().isVarArgs()) {    return false;  }  if (!lastArg.getType().isArray() || !lastArg.isInsnWrap()) {    return false;  }  InsnNode insn=((InsnWrapArg)lastArg).getWrapInsn();  if (insn.getType() == InsnType.FILLED_NEW_ARRAY) {    int count=insn.getArgsCount();    for (int i=0; i < count; i++) {      InsnArg elemArg=insn.getArg(i);      addArg(code,elemArg,false);      if (i < count - 1) {        code.add(", ");      }    }    return true;  }  return false;}  }
class C{  public void addAxisReflection(int axis){  assert (0 < axis && axis <= dim);  inv=null;  for (int i=0; i <= dim; i++) {    trans[axis - 1][i]=-trans[axis - 1][i];  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public StandardTokenizerImpl(java.io.Reader in){  this.zzReader=in;}  }
class C{  public void close(){  if (database != null) {    this.database.close();  }}  }
class C{  void imtqlb(int n,double d[],double e[],double bnd[],int offset){  double[] dn=new double[n];  System.arraycopy(d,offset,dn,0,n);  double[] en=new double[n];  System.arraycopy(e,offset,en,0,n);  double[] bndn=new double[n];  System.arraycopy(bnd,offset,bndn,0,n);  imtqlb(n,dn,en,bndn);  System.arraycopy(dn,0,d,offset,n);  System.arraycopy(en,0,e,offset,n);  System.arraycopy(bndn,0,bnd,offset,n);}  }
class C{  private static void serviceProxyExample(Ignite ignite) throws Exception {  System.out.println(">>>");  System.out.println(">>> Starting service proxy example.");  System.out.println(">>>");  SimpleMapService<Integer,String> mapSvc=ignite.services().serviceProxy("myNodeSingletonService",SimpleMapService.class,true);  int cnt=10;  for (int i=0; i < cnt; i++)   mapSvc.put(i,Integer.toString(i));  int mapSize=mapSvc.size();  System.out.println("Map service size: " + mapSize);  if (mapSize != cnt)   throw new Exception("Invalid map size [expected=" + cnt + ", actual="+ mapSize+ ']');}  }
class C{  public IndexShardRoutingTable(ShardId shardId,ShardRouting shard){  List<ShardRouting> singleton=Collections.singletonList(shard);  this.shardId=shardId;  this.shards=singleton;  this.allShardsStarted=shard.started();  this.primary=shard;  this.primaryAsList=singleton;  this.replicas=EMPTY_LIST;  this.activeShards=(shard.active()) ? singleton : EMPTY_LIST;  this.allInitializingShards=(shard.initializing()) ? singleton : EMPTY_LIST;  this.assignedShards=(shard.assignedToNode()) ? singleton : EMPTY_LIST;  this.shuffler=DUMMY_SHARD_SHUFFLER;}  }
class C{  public void sync(){  try {    file.force(true);  } catch (  IOException e) {    closeFileSilently();    throw DbException.convertIOException(e,name);  }}  }
class C{  public int diff_xIndex(LinkedList<Diff> diffs,int loc){  int chars1=0;  int chars2=0;  int last_chars1=0;  int last_chars2=0;  Diff lastDiff=null;  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      chars1+=aDiff.text.length();    }    if (aDiff.operation != Operation.DELETE) {      chars2+=aDiff.text.length();    }    if (chars1 > loc) {      lastDiff=aDiff;      break;    }    last_chars1=chars1;    last_chars2=chars2;  }  if (lastDiff != null && lastDiff.operation == Operation.DELETE) {    return last_chars2;  }  return last_chars2 + (loc - last_chars1);}  }
class C{  public static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  public DtoPromotionCouponServiceImpl(final DtoFactory dtoFactory,final GenericService<PromotionCoupon> promotionCouponGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,promotionCouponGenericService,adaptersRepository);}  }
class C{  private final boolean readUCIOption(UCIEngine uci,String s){  String[] tokens=tokenize(s);  if (tokens[0].equals("uciok"))   return true;  if (tokens[0].equals("id")) {    if (tokens[1].equals("name")) {      engineName="";      for (int i=2; i < tokens.length; i++) {        if (engineName.length() > 0)         engineName+=" ";        engineName+=tokens[i];      }      listener.notifyEngineName(engineName);    }  } else   if (tokens[0].equals("option")) {    UCIOptions.OptionBase o=uci.registerOption(tokens);    if (o instanceof UCIOptions.SpinOption && o.name.toLowerCase(Locale.US).equals("multipv"))     maxPV=Math.max(maxPV,((UCIOptions.SpinOption)o).maxValue);  }  return false;}  }
class C{  static boolean classLoadable(Class clazz){  return !clazz.isAnnotationPresent(NoLoad.class);}  }
class C{  public VisorGridEventsLost(UUID nid){  super(0,IgniteUuid.randomUuid(),"EVT_VISOR_EVENTS_LOST",nid,U.currentTimeMillis(),"Some Visor events were lost and Visor may show inconsistent results. " + "Configure your grid to disable not important events.","");}  }
class C{  public static void hshaServer(PacketStreamer.Processor<PacketStreamerHandler> processor){  try {    TNonblockingServerTransport serverTransport=new TNonblockingServerSocket(port);    THsHaServer.Args args=new THsHaServer.Args(serverTransport);    args.processor(processor);    args.transportFactory(new TFramedTransport.Factory());    args.protocolFactory(new TBinaryProtocol.Factory(true,true));    TServer server=new THsHaServer(args);    log.info("Starting the packetstreamer hsha server on port {} ...",port);    server.serve();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static TernaryPolynomial generateRandomTernary(int N,int numOnes,int numNegOnes,boolean sparse,SecureRandom random){  if (sparse) {    return SparseTernaryPolynomial.generateRandom(N,numOnes,numNegOnes,random);  } else {    return DenseTernaryPolynomial.generateRandom(N,numOnes,numNegOnes,random);  }}  }
class C{  public TableLayout(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.TableLayout);  String stretchedColumns=a.getString(R.styleable.TableLayout_stretchColumns);  if (stretchedColumns != null) {    if (stretchedColumns.charAt(0) == '*') {      mStretchAllColumns=true;    } else {      mStretchableColumns=parseColumns(stretchedColumns);    }  }  String shrinkedColumns=a.getString(R.styleable.TableLayout_shrinkColumns);  if (shrinkedColumns != null) {    if (shrinkedColumns.charAt(0) == '*') {      mShrinkAllColumns=true;    } else {      mShrinkableColumns=parseColumns(shrinkedColumns);    }  }  String collapsedColumns=a.getString(R.styleable.TableLayout_collapseColumns);  if (collapsedColumns != null) {    mCollapsedColumns=parseColumns(collapsedColumns);  }  a.recycle();  initTableLayout();}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  private static void fillTextArea(final BufferedImage bi,final AffineTransform tx1,final AffineTransform tx2){  final Graphics2D bg=bi.createGraphics();  bg.translate(100,100);  bg.transform(tx1);  bg.transform(tx2);  bg.setColor(Color.GREEN);  final Font font=bg.getFont().deriveFont(20.0f);  bg.setFont(font);  bg.fill(font.getStringBounds(STR,bg.getFontRenderContext()));  bg.dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.450 -0500",hash_original_method="8CC326C1A1CE427AC85501B720437F4A",hash_generated_method="695FE39C6F48DCAEAE8CBE221DA9AF6D") public void registerNotifHandler(TelnetNotificationHandler notifhand){  super.registerNotifHandler(notifhand);}  }
class C{  public static void println(byte x){  out.println(x);}  }
class C{  protected void resetChildrenRowsFrom(int newRow,int childIndex,int modelIndex){  int lastRow=newRow;  int lastModelIndex=modelIndex;  FHTreeStateNode node;  int maxCounter=getChildCount();  for (int counter=childIndex; counter < maxCounter; counter++) {    node=(FHTreeStateNode)getChildAt(counter);    lastRow+=(node.childIndex - lastModelIndex);    lastModelIndex=node.childIndex + 1;    if (node.isExpanded) {      lastRow=node.setRowAndChildren(lastRow);    } else {      node.row=lastRow++;    }  }  lastRow+=childCount - lastModelIndex;  node=(FHTreeStateNode)getParent();  if (node != null) {    node.resetChildrenRowsFrom(lastRow,node.getIndex(this) + 1,this.childIndex + 1);  } else {    rowCount=lastRow;  }}  }
class C{  public void makeDynamic(VariableExpression vexp,ClassNode returnType){  context.getEnclosingMethod().putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,Boolean.TRUE);  vexp.putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,returnType);  storeType(vexp,returnType);  setHandled(true);  if (debug) {    LOG.info("Turning '" + vexp.getText() + "' into a dynamic variable access of type "+ returnType.toString(false));  }}  }
class C{  public IndTestDSep(Graph graph,boolean keepLatents){  if (graph == null) {    throw new NullPointerException();  }  this.graph=graph;  this._observedVars=calcVars(graph,keepLatents);  this.observedVars=new HashSet<>(_observedVars);}  }
class C{  protected int unicodeEscapeLexer(int c) throws IOException {  int ret=0;  c=in.read();  code.clear();  try {    for (int i=0; i < 4; i++) {      c=in.read();      if (isEndOfFile(c) || isEndOfLine(c)) {        throw new NumberFormatException("number too short");      }      code.append((char)c);    }    ret=Integer.parseInt(code.toString(),16);  } catch (  NumberFormatException e) {    throw new IOException("(line " + getLineNumber() + ") Wrong unicode escape sequence found '"+ code.toString()+ "'"+ e.toString());  }  return ret;}  }
class C{  @Override public int compareTo(CompositeRequestCondition other,ServerWebExchange exchange){  if (isEmpty() && other.isEmpty()) {    return 0;  } else   if (isEmpty()) {    return 1;  } else   if (other.isEmpty()) {    return -1;  } else {    assertNumberOfConditions(other);    for (int i=0; i < getLength(); i++) {      int result=this.requestConditions[i].compareTo(other.requestConditions[i],exchange);      if (result != 0) {        return result;      }    }    return 0;  }}  }
class C{  @Nullable private File doGetGradleHome(@Nullable Project project,@NotNull String linkedProjectPath){  if (project == null) {    return null;  }  GradleProjectSettings settings=GradleSettings.getInstance(project).getLinkedProjectSettings(linkedProjectPath);  if (settings == null || settings.getDistributionType() == null) {    return null;  }  return getGradleHome(settings.getDistributionType(),linkedProjectPath,settings.getGradleHome());}  }
class C{  public E forward(){  E nextItem=peekForward();  if (nextItem == null) {    return null;  }  pos=(pos + 1) % size;  return nextItem;}  }
class C{  public int findCurrentOpenFileAfterTruncate(){  Preconditions.checkNotNull(currentOpenFile);  Preconditions.checkState(incoming.size() > 1);  Preconditions.checkState(hasCounterpart(incoming.get(0)));  if (hasCounterpart(currentOpenFile)) {    int counterpartIndex=getCounterpartIndex(currentOpenFile);    if (counterpartIndex == -1) {      return -1;    } else     if (counterpartIndex == 0) {      int lastUntracked=1;      while (lastUntracked < incoming.size()) {        if (hasCounterpart(incoming.get(lastUntracked))) {          break;        }        ++lastUntracked;      }      lastUntracked-=1;      if (lastUntracked == incoming.size()) {        return -1;      } else {        for (; lastUntracked > 0 && !hasCounterpart(incoming.get(lastUntracked)); --lastUntracked) {          if (couldHaveBeenCurrentOpenFile(incoming.get(lastUntracked)))           break;        }        if (lastUntracked == 0)         return -1; else         return lastUntracked;      }    } else {      return counterpartIndex;    }  }  return -1;}  }
class C{  @Deprecated public static String readLastMailAndSetCommonPassword() throws Exception {  String userKey=getMailReader().readUserKeyFromMail();  String userPwd=getMailReader().readPasswordFromMail();  IdentityService id=ServiceFactory.getDefault().getIdentityService(userKey,userPwd);  id.changePassword(userPwd,DEFAULT_PASSWORD);  getMailReader().deleteMails();  return userKey;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void updateSizesForCamera(Context context,int cameraId,List<Size> sizes){  String key_build=PICTURE_SIZES_BUILD_KEY + cameraId;  SharedPreferences defaultPrefs=PreferenceManager.getDefaultSharedPreferences(context);  String thisCameraCachedBuild=defaultPrefs.getString(key_build,null);  if (thisCameraCachedBuild == null) {    String key_sizes=PICTURE_SIZES_SIZES_KEY + cameraId;    SharedPreferences.Editor editor=defaultPrefs.edit();    editor.putString(key_build,Build.DISPLAY);    editor.putString(key_sizes,Size.listToString(sizes));    editor.apply();  }}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("kafkaSamplePublisher");  Map<String,Object> kafkaConfig=createKafkaConfig();  KafkaProducer kafka=new KafkaProducer(t,null);  AtomicInteger cnt=new AtomicInteger();  TStream<String> msgs=t.poll(null,1L,TimeUnit.SECONDS);  kafka.publish(msgs,topic);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  public ClcKeyValueStorage(Connection db,String name,String context){  this.db=new DBWrapper(db);  this.name=name;  this.context=context;  if (context == null) {    logger.warn("context is not set");    this.context="";  }}  }
class C{  public EventLogControl addControl(String name,boolean showOn,boolean pauseOn){  JCheckBox filterCheck;  JCheckBox pauseCheck;  EventLogControl control;  c.gridwidth=1;  addLabel(name);  filterCheck=addCheckBox(showOn,false);  pauseCheck=addCheckBox(pauseOn,true);  control=new EventLogControl(filterCheck,pauseCheck);  this.logControls.add(control);  return control;}  }
class C{  public boolean isExternal(){  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:06.305 -0500",hash_original_method="566ADAA0BA7A180A2DDEAD33A7978412",hash_generated_method="566ADAA0BA7A180A2DDEAD33A7978412") boolean isConnected(){  return !(channel instanceof SocketChannel) || ((SocketChannel)channel).isConnected();}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitAnnotationMemberValue(this);}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public void notifyAdded(){synchronized (mObservers) {    for (    DataSetObserverExtended observer : mObservers) {      observer.onAdded();    }  }}  }
class C{  private static boolean isFiveBytesSequence(byte b){  return -8 <= b && b <= -5;}  }
class C{  public void printout(){  int widthTrak=-1;  for (int i=0; i < pict_size; i++) {    int val=new Byte(bits[i]).intValue();    widthTrak=widthCheck(widthTrak);    if ((val & 0x01) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x02) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x04) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x08) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x10) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x20) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x40) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');    widthTrak=widthCheck(widthTrak);    if ((val & 0x80) != 0)     System.out.print((char)'*'); else     System.out.print((char)' ');  }  System.out.println();}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof Card) {    Card other=(Card)o;    return (other.rank == rank) && (other.suit == suit);  }  return false;}  }
class C{  @Override public boolean isVisible(){  return (getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public void append(StringBuffer buffer,String fieldName,int value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  private Object decodeObj(short flags,byte[] bytes) throws IgniteCheckedException {  assert bytes != null;  if ((flags & SERIALIZED_FLAG) != 0)   return jdkMarshaller.unmarshal(bytes,null);  int masked=flags & 0xff00;switch (masked) {case BOOLEAN_FLAG:    return bytes[0] == '1';case INT_FLAG:  return U.bytesToInt(bytes,0);case LONG_FLAG:return U.bytesToLong(bytes,0);case DATE_FLAG:return new Date(U.bytesToLong(bytes,0));case BYTE_FLAG:return bytes[0];case FLOAT_FLAG:return Float.intBitsToFloat(U.bytesToInt(bytes,0));case DOUBLE_FLAG:return Double.longBitsToDouble(U.bytesToLong(bytes,0));case BYTE_ARR_FLAG:return bytes;default :return new String(bytes,UTF_8);}}  }
class C{  public static void initialize(Class<?>... classes){  for (  Class<?> clazz : classes) {    try {      Class.forName(clazz.getName(),true,clazz.getClassLoader());    } catch (    ClassNotFoundException e) {      throw new AssertionError(e);    }  }}  }
class C{  public IFileTransfer transferFile(final ContactId contact,Uri file,boolean attachFileIcon) throws RemoteException {  return transferFile2(contact,file,Disposition.ATTACH.toInt(),attachFileIcon);}  }
class C{  public void test_parkFor_1() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,false,500);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,1000,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(500);  waiterThread.join();  parkerThread.join();}  }
class C{  public Taxonomy(InputStream is) throws IOException {  read(is);}  }
class C{  public boolean match(Element e,String pseudoE){  return (e instanceof CSSStylableElement) ? ((CSSStylableElement)e).getXMLId().equals(getValue()) : false;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean contains(int test){  int[] data=_data;  for (int i=_size - 1; i >= 0; i--) {    if (data[i] == test)     return true;  }  return false;}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof org.apache.xml.dtm.ref.dom2dtm.DOM2DTM.CharacterNodeHandler) {    ((org.apache.xml.dtm.ref.dom2dtm.DOM2DTM.CharacterNodeHandler)m_contentHandler).characters(node);  } else {    String data=((Text)node).getData();    this.m_contentHandler.characters(data.toCharArray(),0,data.length());  }}  }
class C{  public void removeInitiatorsUsingREST(StorageSystem storage,URI exportMaskURI,List<URI> volumeURIs,List<Initiator> initiatorList,TaskCompleter taskCompleter){  try {    ExportMask mask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    XIVRestClient restExportOpr=getRestClient(storage);    final String storageIP=storage.getSmisProviderIP();    List<URI> userRemovedInitiators=new ArrayList<URI>();    Set<URI> hostURIs=new HashSet<URI>();    if (null != initiatorList) {      for (      Initiator initiator : initiatorList) {        final Host host=_dbClient.queryObject(Host.class,initiator.getHost());        final String normalizedPort=Initiator.normalizePort(initiator.getInitiatorPort());        if (restExportOpr.deleteHostPort(storageIP,host.getLabel(),normalizedPort,initiator.getProtocol().toLowerCase(),true)) {          userRemovedInitiators.add(initiator.getId());          hostURIs.add(initiator.getHost());        }      }    }    mask.removeFromUserAddedInitiatorsByURI(userRemovedInitiators);    for (    URI hostURI : hostURIs) {      Host host=_dbClient.queryObject(Host.class,hostURI);      boolean hostDeleted=restExportOpr.deleteHost(storageIP,host.getLabel(),true);      if (hostDeleted) {        unsetTag(host,storage.getSerialNumber());      }    }    ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,mask);    _dbClient.updateObject(mask);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.error("Unexpected error: addInitiator failed.",e);    ServiceError error=XIVRestException.exceptions.methodFailed("addInitiator",e);    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static boolean isJdk(Class<?> cls){  if (cls.isPrimitive())   return true;  String s=cls.getName();  return s.startsWith("java.") || s.startsWith("javax.");}  }
class C{  @Deprecated public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,final String storageConnectionString){  this(hostName,eventHubPath,consumerGroupName,eventHubConnectionString,new AzureStorageCheckpointLeaseManager(storageConnectionString),(ExecutorService)null);  this.initializeLeaseManager=true;}  }
class C{  public void testCase6(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={9,18,27,36,45,54,63,9,18,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public SQLTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  protected static boolean uninstallAddOnExtension(AddOn addOn,Extension extension,AddOnUninstallationProgressCallback callback){  boolean uninstalledWithoutErrors=true;  if (extension.isEnabled()) {    String extUiName=extension.getUIName();    if (extension.canUnload()) {      logger.debug("Unloading ext: " + extension.getName());      try {        extension.unload();        ExtensionFactory.unloadAddOnExtension(extension);      } catch (      Exception e) {        logger.error("An error occurred while uninstalling the extension \"" + extension.getName() + "\" bundled in the add-on \""+ addOn.getId()+ "\":",e);        uninstalledWithoutErrors=false;      }    } else {      logger.debug("Cant dynamically unload ext: " + extension.getName());      uninstalledWithoutErrors=false;    }    callback.extensionRemoved(extUiName);  }  addOn.removeLoadedExtension(extension);  return uninstalledWithoutErrors;}  }
class C{  public void go(){  if (errors.size() > 0)   throw this;}  }
class C{  public ElemTemplateElement(){}  }
class C{  public static boolean isFinal(int flags){  return (flags & FINAL) != 0;}  }
class C{  public void addFileToDumpFiles(String key,Map threadDumpsInFile){  if (dumpFiles == null) {    dumpFiles=new HashMap();  }  if (threadDumpsInFile != null) {    dumpFiles.put(key,threadDumpsInFile);  }}  }
class C{  public static void clear(){  domainThreadLocal.set(null);  shopThreadLocal.set(null);  shoppingCartThreadLocal.set(null);  shopperIPAddressThreadLocal.set(null);  currentThemeChainThreadLocal.set(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.424 -0500",hash_original_method="E118D63661EEDB81E619AEC2D5F479DE",hash_generated_method="AE9D1B942B27BD13C63E02FC14050738") public boolean isTransactionPendingAck(SIPServerTransaction serverTransaction){  String branchId=((SIPRequest)serverTransaction.getRequest()).getTopmostVia().getBranch();  return this.terminatedServerTransactionsPendingAck.contains(branchId);}  }
class C{  static public boolean doesParsedDateMatchText(LocalDate parsedDate,String text,Locale formatLocale){  if (parsedDate == null || text == null) {    return false;  }  text=text.toLowerCase();  Pattern pattern=Pattern.compile("\\d+");  Matcher matcher=pattern.matcher(text);  ArrayList<String> unsignedNumbersFound=new ArrayList<String>();  while (matcher.find()) {    String foundString=matcher.group();    foundString=forceNumberStringToTwoDigits(foundString);    unsignedNumbersFound.add(foundString);  }  String parsedDayOfMonth="" + parsedDate.getDayOfMonth();  parsedDayOfMonth=forceNumberStringToTwoDigits(parsedDayOfMonth);  boolean dayOfMonthFound=unsignedNumbersFound.remove(parsedDayOfMonth);  DateTimeFormatter formatBC=DateTimeFormatter.ofPattern("G",formatLocale);  String eraBCString=LocalDate.of(-100,1,1).format(formatBC).toLowerCase();  if (parsedDate.getYear() < 1 && text.contains(eraBCString)) {    String parsedYearForBC="" + (parsedDate.getYear() - 1);    parsedYearForBC=parsedYearForBC.replace("-","");    parsedYearForBC=forceNumberStringToTwoDigits(parsedYearForBC);    boolean yearFoundForBC=unsignedNumbersFound.remove(parsedYearForBC);    return yearFoundForBC && dayOfMonthFound;  } else {    String parsedYear="" + parsedDate.getYear();    parsedYear=parsedYear.replace("-","");    parsedYear=forceNumberStringToTwoDigits(parsedYear);    boolean yearFound=unsignedNumbersFound.remove(parsedYear);    return yearFound && dayOfMonthFound;  }}  }
class C{  public static List<Section> extractSections(Document document){  SectionsMarkdownVisitor v=new SectionsMarkdownVisitor();  document.accept(v);  List<Section> result=new ArrayList<>();  for (int levelIndex=1; levelIndex <= 6; levelIndex++) {    List<Header> sections=v.sections.get(levelIndex);    if (sections != null) {      Node parent;{        Header header=sections.get(0);        parent=header.jjtGetParent();        Document doc=extractBetween(v,parent,null,header);        result.add(new Section(null,doc));      }      for (int sectionIndex=0; sectionIndex < sections.size(); sectionIndex++) {        Header header=sections.get(sectionIndex);        Header next=sectionIndex < sections.size() - 1 ? sections.get(sectionIndex + 1) : null;        Document doc=extractBetween(v,parent,header,next);        result.add(new Section(header,doc));      }      break;    }  }  return result;}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(getGraphics2D(g));}  }
class C{  public String toString(){  return m_values.toString();}  }
class C{  public final void remove() throws UnsupportedOperationException {  throw new UnsupportedOperationException("Removing tokens is not supported.");}  }
class C{  public BaseThumbnailSetCollectionRequest(final String requestUrl,IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BaseThumbnailSetCollectionResponse.class,IThumbnailSetCollectionPage.class);}  }
class C{  private boolean hasBufferedBigram(){  return bufferLen - index > 1;}  }
class C{  public void expectError(String... parts){  expected=join(parts);  expectedSuffix=false;}  }
class C{  public void makePath(String path,byte[] data,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,data,CreateMode.PERSISTENT,retryOnConnLoss);}  }
class C{  public boolean isGrowHorizontally(){  return growHorizontally;}  }
class C{  public ModelBuilder namedGraph(String prefixedNameOrIRI){  return namedGraph(mapToIRI(prefixedNameOrIRI));}  }
class C{  public void append(final byte[] b,final int off,final int len){  if (b == null) {    return;  }  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) < 0)|| ((off + len) > b.length)) {    throw new IndexOutOfBoundsException("off: " + off + " len: "+ len+ " b.length: "+ b.length);  }  if (len == 0) {    return;  }  final int newlen=this.len + len;  if (newlen > this.buffer.length) {    expand(newlen);  }  System.arraycopy(b,off,this.buffer,this.len,len);  this.len=newlen;}  }
class C{  private Bitmap fallbackDecode(Object encodedImage,Rect area,BitmapFactory.Options opts){  int rectFactor=1;  if (opts != null) {    rectFactor=opts.inSampleSize >= 1 ? opts.inSampleSize : 1;  }  return Bitmap.createBitmap(decodeObjectToBitmap(encodedImage,opts),area.left / rectFactor,area.top / rectFactor,area.right / rectFactor - area.left / rectFactor,area.bottom / rectFactor - area.top / rectFactor);}  }
class C{  private boolean purgeOldHost(final String hostName,final int dmax){  if (dmax == 0) {    return false;  }  final ConcurrentHashMap<String,TimestampMetricValue> hostCounters=knownHosts.get(hostName);  if (hostCounters == null) {    return false;  }  TimestampMetricValue tmv=hostCounters.get("heartbeat");  int minAge=Integer.MAX_VALUE;  if (tmv != null) {    minAge=tmv.getAge();  } else {    final Iterator<TimestampMetricValue> itr=hostCounters.values().iterator();    while (itr.hasNext()) {      final TimestampMetricValue tmv2=itr.next();      final int age=tmv2.getAge();      if (age < minAge) {        minAge=age;        tmv=tmv2;      }    }  }  if (minAge > dmax) {    deleteHost(hostName);    log.warn("Purged host: " + hostName + ", last update was "+ minAge+ " seconds ago for "+ tmv.getMetadata().getMetricName());    return true;  }  return false;}  }
class C{  public Object instantiateBean(boolean fixAccess){  AnnotatedConstructor ac=_classInfo.getDefaultConstructor();  if (ac == null) {    return null;  }  if (fixAccess) {    ac.fixAccess();  }  try {    return ac.getAnnotated().newInstance();  } catch (  Exception e) {    Throwable t=e;    while (t.getCause() != null) {      t=t.getCause();    }    if (t instanceof Error)     throw (Error)t;    if (t instanceof RuntimeException)     throw (RuntimeException)t;    throw new IllegalArgumentException("Failed to instantiate bean of type " + _classInfo.getAnnotated().getName() + ": ("+ t.getClass().getName()+ ") "+ t.getMessage(),t);  }}  }
class C{  private static RenameConflict findLocalRename(final ServerContext context,final String serverName,final String root,final Conflict.ConflictType type){  final RenameConflict conflict=searchChangeSetForRename(context,serverName,root,type,50);  return conflict != null ? conflict : searchChangeSetForRename(context,serverName,root,type,-1);}  }
class C{  private LogFile openFile(String logFileName,boolean readOnly) throws ReplicatorException, InterruptedException {  LogFile data=new LogFile(logDir,logFileName);  if (!readOnly) {    data.setLogSyncTask(logSyncTask);    data.setFlushIntervalMillis(flushIntervalMillis);    data.setFsyncOnFlush(readOnly);  }  data.setBufferSize(bufferSize);  if (!data.getFile().exists()) {    throw new ReplicatorException("Last log file does not exist; index may be corrupt: " + data.getFile().getName());  }  if (logger.isDebugEnabled())   logger.debug("Opening log file: " + data.getFile().getAbsolutePath());  if (readOnly)   data.openRead(); else   data.openWrite();  return data;}  }
class C{  public void add(VwapItem dataItem,boolean notify){  if (!this.isEmpty()) {    VwapItem item0=(VwapItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  public void registerOptimizerCall(final String optimizerName,final long elapsedNanoSec){  if (optimizerStats.get(optimizerName) == null) {    optimizerStats.put(optimizerName,new StaticAnalysisStat(optimizerName));  }  StaticAnalysisStat stat=optimizerStats.get(optimizerName);  stat.incrementNrCalls();  stat.addElapsed(elapsedNanoSec);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTabbedPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiTabbedPaneUI)mui).uis,a);}  }
class C{  @Override public synchronized int remove(final HandleSet urlHashes) throws IOException {  final int s=this.urlFileIndex.size();  int removedCounter=0;  for (  final byte[] urlhash : urlHashes) {    final Row.Entry entry=this.urlFileIndex.remove(urlhash);    if (entry != null)     removedCounter++;    this.double_push_check.remove(urlhash);  }  if (removedCounter == 0)   return 0;  assert this.urlFileIndex.size() + removedCounter == s : "urlFileIndex.size() = " + this.urlFileIndex.size() + ", s = "+ s;  final Iterator<Map.Entry<String,HostHandles>> q=this.domainStacks.entrySet().iterator();  HandleSet stack;  while (q.hasNext()) {    stack=q.next().getValue().handleSet;    for (    final byte[] handle : urlHashes)     stack.remove(handle);    if (stack.isEmpty())     q.remove();  }  final Iterator<Map.Entry<String,byte[]>> i=this.zeroWaitingCandidates.iterator();  while (i.hasNext()) {    if (urlHashes.has(i.next().getValue()))     i.remove();  }  return removedCounter;}  }
class C{  private void close(){  storeParameters();  s_parameters.saveToFile();  m_frame.setVisible(false);  m_frame.dispose();  System.exit(0);}  }
class C{  private void handleHtmlShowAccounts(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleAccounts();  if (addTitle(requestAndResponse,title)) {    return;  }  final String paneId="accounts";  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId(paneId);  pageWrapper.addHeader();  pageWrapper.addMetaData(new KeyAndValue("notEditable",true));  pageWrapper.addMetaData(new KeyAndValue("paneType","accounts"));  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    pageWrapper.addPageIntroText(servletText.introTextShowAccounts(false),servletText.introTextShowAccounts(true));    try {      final StringBuilder result=new StringBuilder();      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceNoAccountsExist(),result,servletText);      startItemList(result,paneId);      final List<?> users=dbLogic.getAllUsers(paginator.getStartPosition(),paginator.getMaxResults());      for (      final Object userUncasted : users) {        final User user=(User)userUncasted;        final int resultNumber=paginator.next();        if (resultNumber == -1) {          continue;        } else         if (resultNumber == 0) {          break;        }        addUserHtml(user,result,resultNumber,paneId);      }      finishItemList(result);      paginator.done();      dbLogic.commit();      requestAndResponse.print(result.toString());    } catch (    final PersistenceException e) {      requestAndResponse.print(servletText.errorInternalDatabase());    }  }  pageWrapper.addFooter();}  }
class C{  public HttpPrincipal(String username,String realm){  if (username == null || realm == null) {    throw new NullPointerException();  }  this.username=username;  this.realm=realm;}  }
class C{  private void updateVPLEXSessionId(ClientResponse response){  List<NewCookie> cookies=response.getCookies();  for (  NewCookie cookie : cookies) {    if (VPlexApiConstants.SESSION_COOKIE.equals(cookie.getName())) {      String newSessionId=cookie.getValue();      if ((_vplexSessionId == null) || (!_vplexSessionId.equals(newSessionId))) {        s_logger.info("VPLEX Session ID changing from {} to {}",(_vplexSessionId == null ? "null" : _vplexSessionId),newSessionId);        _vplexSessionId=newSessionId;      }      break;    }  }}  }
class C{  public File file(){  return ((FileBytes)bytes).file();}  }
class C{  public void unsubscribe(GlowPlayer player){  players.remove(player);  for (  GlowTeam team : teams.values()) {    player.getSession().send(ScoreboardTeamMessage.remove(team.getName()));  }  for (  DisplaySlot slot : DisplaySlot.values()) {    player.getSession().send(new ScoreboardDisplayMessage(GlowDisplaySlot.getId(slot),""));  }  for (  GlowObjective objective : objectives.values()) {    player.getSession().send(ScoreboardObjectiveMessage.remove(objective.getName()));  }}  }
class C{  public static boolean hasLoadFailure(){  return loadFailureEncountered;}  }
class C{  @Override public void deleteFileSystems(List<FileDescriptor> fileDescriptors,String taskId) throws ControllerException {  String waitFor=null;  List<URI> fileShareUris=FileDescriptor.getFileSystemURIs(fileDescriptors);  FileDeleteWorkflowCompleter completer=new FileDeleteWorkflowCompleter(fileShareUris,taskId);  Workflow workflow=null;  try {    workflow=_workflowService.getNewWorkflow(this,DELETE_FILESYSTEMS_WF_NAME,false,taskId);    waitFor=_fileReplicationDeviceController.addStepsForDeleteFileSystems(workflow,waitFor,fileDescriptors,taskId);    waitFor=_fileDeviceController.addStepsForDeleteFileSystems(workflow,waitFor,fileDescriptors,taskId);    String successMessage="Delete FileShares successful for: " + fileShareUris.toString();    Object[] callbackArgs=new Object[]{fileShareUris};    workflow.executePlan(completer,successMessage,new WorkflowCallback(),callbackArgs,null,null);  } catch (  Exception ex) {    s_logger.error("Could not delete FileShares: " + fileShareUris,ex);    releaseWorkflowLocks(workflow);    String opName=ResourceOperationTypeEnum.DELETE_FILE_SYSTEM.getName();    ServiceError serviceError=DeviceControllerException.errors.deleteFileSharesFailed(fileShareUris.toString(),opName,ex);    completer.error(s_dbClient,_locker,serviceError);  }}  }
class C{  public static String start(String header,String script,boolean editable,int WindowNo){  return start(null,header,script,editable,WindowNo);}  }
class C{  @Override public synchronized void removeInstanceListener(InstanceListener tsl){  m_instanceListeners.remove(tsl);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void fireRemove(){  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();  for (  Object selectedObject : selection.toArray()) {    if (selectedObject instanceof AgentMapping) {      inputList.remove(selectedObject);    }  }  updateInternal(true);}  }
class C{  public static MarketingPermissionNotFoundException convertToApi(org.oscm.internal.types.exception.MarketingPermissionNotFoundException oldEx){  return convertExceptionToApi(oldEx,MarketingPermissionNotFoundException.class);}  }
class C{  public void destroyAndRemove(){  boolean isCurrentlyLockGrantor=false;  boolean isMakingLockGrantor=false;  boolean maybeHasActiveLocks=false;synchronized (creationLock) {    try {synchronized (services) {        try {          if (isDestroyed())           return;          setDestroyingThread();synchronized (this.lockGrantorIdLock) {synchronized (this.destroyLock) {              this.destroyed=true;              maybeHasActiveLocks=this.activeLocks > 0;            }            isCurrentlyLockGrantor=this.isCurrentlyLockGrantor();            isMakingLockGrantor=this.isMakingLockGrantor();          }        }  finally {          if (isCurrentThreadDoingDestroy()) {            removeLockService(this);          }        }      }    } catch (    CancelException e) {    } finally {      if (isCurrentThreadDoingDestroy()) {        try {          this.basicDestroy(isCurrentlyLockGrantor,isMakingLockGrantor,maybeHasActiveLocks);        } catch (        CancelException e) {        } finally {          clearDestroyingThread();        }      }      postDestroyAction();    }  }}  }
class C{  public static boolean validateLoggersLevel(String pattern,String level){  if (!LOGGERS_PATTERN.matcher(pattern).matches()) {    return false;  }  if (Level.toLevel(level,null) == null) {    return false;  }  return true;}  }
class C{  @Override public final Publisher<? extends T> upstream(){  return source;}  }
class C{  public void reconfigure(SQLiteDatabaseConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException("configuration must not be null.");  }synchronized (mLock) {    throwIfClosedLocked();    boolean walModeChanged=((configuration.openFlags ^ mConfiguration.openFlags) & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0;    if (walModeChanged) {      if (!mAcquiredConnections.isEmpty()) {        throw new IllegalStateException("Write Ahead Logging (WAL) mode cannot " + "be enabled or disabled while there are transactions in " + "progress.  Finish all transactions and release all active "+ "database connections first.");      }      closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked();      assert mAvailableNonPrimaryConnections.isEmpty();    }    boolean foreignKeyModeChanged=configuration.foreignKeyConstraintsEnabled != mConfiguration.foreignKeyConstraintsEnabled;    if (foreignKeyModeChanged) {      if (!mAcquiredConnections.isEmpty()) {        throw new IllegalStateException("Foreign Key Constraints cannot " + "be enabled or disabled while there are transactions in " + "progress.  Finish all transactions and release all active "+ "database connections first.");      }    }    if (mConfiguration.openFlags != configuration.openFlags) {      if (walModeChanged) {        closeAvailableConnectionsAndLogExceptionsLocked();      }      SQLiteConnection newPrimaryConnection=openConnectionLocked(configuration,true);      closeAvailableConnectionsAndLogExceptionsLocked();      discardAcquiredConnectionsLocked();      mAvailablePrimaryConnection=newPrimaryConnection;      mConfiguration.updateParametersFrom(configuration);      setMaxConnectionPoolSizeLocked();    } else {      mConfiguration.updateParametersFrom(configuration);      setMaxConnectionPoolSizeLocked();      closeExcessConnectionsAndLogExceptionsLocked();      reconfigureAllConnectionsLocked();    }    wakeConnectionWaitersLocked();  }}  }
class C{  public static SynapsePropertiesSimple createBasicSynapseInfoPanel(final Collection<Synapse> synapses,final Window parent){  boolean displayIDInfo=synapses != null && synapses.size() == 1;  if (displayIDInfo) {    Iterator<Synapse> synIter=synapses.iterator();    displayIDInfo=synIter.next().getSource() != null;  }  return createBasicSynapseInfoPanel(synapses,parent,displayIDInfo);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X509Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  X509Name other;  try {    other=X509Name.getInstance(obj);  } catch (  IllegalArgumentException e) {    return false;  }  int orderingSize=ordering.size();  if (orderingSize != other.ordering.size()) {    return false;  }  boolean[] indexes=new boolean[orderingSize];  int start, end, delta;  if (ordering.elementAt(0).equals(other.ordering.elementAt(0))) {    start=0;    end=orderingSize;    delta=1;  } else {    start=orderingSize - 1;    end=-1;    delta=-1;  }  for (int i=start; i != end; i+=delta) {    boolean found=false;    ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)ordering.elementAt(i);    String value=(String)values.elementAt(i);    for (int j=0; j < orderingSize; j++) {      if (indexes[j]) {        continue;      }      ASN1ObjectIdentifier oOid=(ASN1ObjectIdentifier)other.ordering.elementAt(j);      if (oid.equals(oOid)) {        String oValue=(String)other.values.elementAt(j);        if (equivalentStrings(value,oValue)) {          indexes[j]=true;          found=true;          break;        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  private void configureApiBinding(){  bind(KeyBindingAgent.class).to(KeyBindingManager.class).in(Singleton.class);  bind(SelectionAgent.class).to(SelectionAgentImpl.class).in(Singleton.class);  bind(WorkspaceAgent.class).to(WorkspacePresenter.class).in(Singleton.class);  bind(IconRegistry.class).to(IconRegistryImpl.class).in(Singleton.class);  bind(EditorPartStack.class).to(EditorPartStackPresenter.class).in(Singleton.class);  bind(ConsolePart.class).to(ConsolePartPresenter.class).in(Singleton.class);  bind(OutlinePart.class).to(OutlinePartPresenter.class).in(Singleton.class);  GinMultibinder<NodeInterceptor> nodeInterceptors=GinMultibinder.newSetBinder(binder(),NodeInterceptor.class);  nodeInterceptors.addBinding().to(DefaultNodeInterceptor.class);  bind(ProjectExplorerPart.class).to(ProjectExplorerPresenter.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().build(NodeFactory.class));  bind(NodeManager.class);  bind(ActionManager.class).to(ActionManagerImpl.class).in(Singleton.class);}  }
class C{  public Domain createDomain(){  DomainImpl domain=new DomainImpl();  return domain;}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return new String(decrypt(civ,secretKeys),encoding);}  }
class C{  public void add(String methodName,List<Expression> parameters,boolean isProperty){  chain.add(new DotExpressionItem(methodName,parameters,isProperty));}  }
class C{  @Override public void initialize(){  if (databaseConnection != null) {    if (LOG.isDebugging()) {      LOG.debugFine("Loading data from database connection.");    }    MultipleObjectsBundle bundle=databaseConnection.loadData();    databaseConnection=null;{      DBIDs bids=bundle.getDBIDs();      if (bids instanceof ArrayStaticDBIDs) {        this.ids=(ArrayStaticDBIDs)bids;      } else       if (bids == null) {        this.ids=DBIDUtil.generateStaticDBIDRange(bundle.dataLength());      } else {        this.ids=(ArrayStaticDBIDs)DBIDUtil.makeUnmodifiable(bids);      }    }    this.idrep=new DBIDView(this.ids);    relations.add(this.idrep);    getHierarchy().add(this,idrep);    DBIDArrayIter it=this.ids.iter();    int numrel=bundle.metaLength();    for (int i=0; i < numrel; i++) {      SimpleTypeInformation<?> meta=bundle.meta(i);      @SuppressWarnings("unchecked") SimpleTypeInformation<Object> ometa=(SimpleTypeInformation<Object>)meta;      WritableDataStore<Object> store=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_DB,ometa.getRestrictionClass());      for (it.seek(0); it.valid(); it.advance()) {        store.put(it,bundle.data(it.getOffset(),i));      }      Relation<?> relation=new MaterializedRelation<>(ometa,ids,null,store);      relations.add(relation);      getHierarchy().add(this,relation);      for (      IndexFactory<?,?> factory : indexFactories) {        if (factory.getInputTypeRestriction().isAssignableFromType(ometa)) {          @SuppressWarnings("unchecked") final IndexFactory<Object,?> ofact=(IndexFactory<Object,?>)factory;          @SuppressWarnings("unchecked") final Relation<Object> orep=(Relation<Object>)relation;          final Index index=ofact.instantiate(orep);          Duration duration=LOG.isStatistics() ? LOG.newDuration(index.getClass().getName() + ".construction").begin() : null;          index.initialize();          if (duration != null) {            LOG.statistics(duration.end());          }          getHierarchy().add(relation,index);        }      }    }    eventManager.fireObjectsInserted(ids);  }}  }
class C{  public static double range(double min,double max,double value){  if (value < min) {    value=min;  }  if (value > max) {    value=max;  }  return value;}  }
class C{  private void destroyPiedPiper(){  piedpiper.getZone().remove(piedpiper);}  }
class C{  public HttpsURL(final HttpsURL base,final String relative) throws URIException {  this(base,new HttpsURL(relative));}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_patterns) {    int n=m_patterns.length;    for (int i=0; i < n; i++) {      if (m_patterns[i].canTraverseOutsideSubtree())       return true;    }  }  return false;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 27:{        addToken(Token.PREPROCESSOR);      }case 30:    break;case 7:{    addNullToken();    return firstToken;  }case 31:break;case 24:{addToken(Token.LITERAL_CHAR);}case 32:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 33:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 34:break;case 9:{addToken(Token.WHITESPACE);}case 35:break;case 26:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 36:break;case 18:{addToken(Token.ERROR_CHAR);}case 37:break;case 25:{addToken(Token.ERROR_STRING_DOUBLE);}case 38:break;case 14:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 39:break;case 15:{addToken(Token.RESERVED_WORD);}case 40:break;case 5:{addToken(Token.SEPARATOR);}case 41:break;case 2:{addToken(Token.IDENTIFIER);}case 42:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 43:break;case 16:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 44:break;case 22:{addToken(Token.FUNCTION);}case 45:break;case 6:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 46:break;case 8:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 47:break;case 23:{addToken(Token.DATA_TYPE);}case 48:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 49:break;case 19:{addToken(Token.ERROR_CHAR);}case 50:break;case 20:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 51:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 52:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 53:break;case 13:{addToken(Token.ERROR_NUMBER_FORMAT);}case 54:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 55:break;case 4:{addToken(Token.OPERATOR);}case 56:break;case 10:{}case 57:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 58:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 501:break;case YYINITIAL:{addNullToken();return firstToken;}case 502:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 503:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.POSTCONDITION___NAME_1:    return getName_1();case UmplePackage.POSTCONDITION___CONSTRAINT_1:  return getConstraint_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void addVertex(Vertex vertex){  mBufVertices.put((float)vertex.mPosX);  mBufVertices.put((float)vertex.mPosY);  mBufVertices.put((float)vertex.mPosZ);  mBufColors.put(vertex.mColorFactor * Color.red(vertex.mColor) / 255f);  mBufColors.put(vertex.mColorFactor * Color.green(vertex.mColor) / 255f);  mBufColors.put(vertex.mColorFactor * Color.blue(vertex.mColor) / 255f);  mBufColors.put(Color.alpha(vertex.mColor) / 255f);  if (DRAW_TEXTURE) {    mBufTexCoords.put((float)vertex.mTexX);    mBufTexCoords.put((float)vertex.mTexY);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void addUnknownSignednessToSomeLocals(Tree tree,AnnotatedTypeMirror type){switch (type.getKind()) {case BYTE:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:case CHAR:    QualifierDefaults defaults=new QualifierDefaults(elements,this);  defaults.addCheckedCodeDefault(UNKNOWN_SIGNEDNESS,TypeUseLocation.LOCAL_VARIABLE);defaults.annotate(tree,type);break;default :}}  }
class C{  public static void init(){  logger=Logger.getLogger("");  final Handler[] handlers=logger.getHandlers();  if (handlers.length > 0)   handlers[0].setFormatter(new BriefLogFormatter());}  }
class C{  public void checkPassword(String password) throws BadRequestException {  if (password == null) {    throw new BadRequestException("Password required");  }  if (password.length() < 8) {    throw new BadRequestException("Password should contain at least 8 characters");  }  int numOfLetters=0;  int numOfDigits=0;  for (  char passwordChar : password.toCharArray()) {    if (Character.isDigit(passwordChar)) {      numOfDigits++;    } else     if (Character.isLetter(passwordChar)) {      numOfLetters++;    }  }  if (numOfDigits == 0 || numOfLetters == 0) {    throw new BadRequestException("Password should contain letters and digits");  }}  }
class C{  public final void testToString(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.toString();}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  private static Point2D detectLine(Point2D p1,Point2D p2,Point2D p,Line2D line,GeneralPath path){  if (line.ptLineDistSq(p) == 0) {    p2.setLocation(p);  } else {    p1.setLocation(p2);    p2.setLocation(p);    line.setLine(p1,p2);    path.lineTo((float)p1.getX(),(float)p1.getY());  }  return p2;}  }
class C{  public AtomicInteger(int initialValue){  value=initialValue;}  }
class C{  public void init(ReadStreamOld is,String headerBoundary) throws IOException {  _is=is;  _boundary.clear();  _boundary.add("--");  _boundary.add(headerBoundary);  _boundaryBuffer=_boundary.getBuffer();  _boundaryLength=_boundary.getLength();  _peekBuffer.setLength(_boundaryLength + 5);  _peek=_peekBuffer.getBuffer();  _peekOffset=0;  _peekLength=0;  _peek[_peekLength++]=(byte)'\n';  _isPartDone=false;  _isDone=false;  _isComplete=false;  while (read(_dummyBuffer,0,_dummyBuffer.length) >= 0) {  }  _isPartDone=true;}  }
class C{  @POST @Path("/internal/resumeprecheck") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public SiteErrorResponse resumePrecheck(){  log.info("Precheck for resume internally");  SiteErrorResponse response=new SiteErrorResponse();  try {    precheckForResumeLocalStandby();  } catch (  APIException e) {    log.warn("Failed to precheck switchover",e);    response.setErrorMessage(e.getMessage());    response.setServiceCode(e.getServiceCode().ordinal());    return response;  }catch (  Exception e) {    log.error("Failed to precheck switchover",e);    response.setErrorMessage(e.getMessage());    return response;  }  return response;}  }
class C{  String playIndexInPlaylist(int index){  return "invalid.index: " + index;}  }
class C{  public void onReset(){}  }
class C{  public static boolean isExceptionClass(PsiClass clazz){  return InheritanceUtil.isInheritor(clazz,JAVA_LANG_THROWABLE);}  }
class C{  private boolean hasCMTaboo(BasicBlock bb){  if (bb == null)   return false;  HashSet<Register> defined=new HashSet<Register>();  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.isBranch())     continue;switch (s.getOpcode()) {case INT_MOVE_opcode:case REF_MOVE_opcode:case DOUBLE_MOVE_opcode:case FLOAT_MOVE_opcode:case INT_ADD_opcode:case REF_ADD_opcode:case FLOAT_ADD_opcode:case DOUBLE_ADD_opcode:case INT_SUB_opcode:case REF_SUB_opcode:case FLOAT_SUB_opcode:case DOUBLE_SUB_opcode:case INT_MUL_opcode:case FLOAT_MUL_opcode:case DOUBLE_MUL_opcode:case INT_NEG_opcode:case FLOAT_NEG_opcode:case DOUBLE_NEG_opcode:case REF_SHL_opcode:case INT_SHL_opcode:case REF_SHR_opcode:case INT_SHR_opcode:case REF_USHR_opcode:case INT_USHR_opcode:case REF_AND_opcode:case INT_AND_opcode:case REF_OR_opcode:case INT_OR_opcode:case REF_XOR_opcode:case INT_XOR_opcode:case REF_NOT_opcode:case INT_NOT_opcode:case INT_2BYTE_opcode:case INT_2USHORT_opcode:case INT_2SHORT_opcode:case FLOAT_2DOUBLE_opcode:case DOUBLE_2FLOAT_opcode:      break;default :    return true;}for (Enumeration<Operand> defs=s.getDefs(); defs.hasMoreElements(); ) {  Operand def=defs.nextElement();  if (VM.VerifyAssertions)   VM._assert(def.isRegister());  Register r=def.asRegister().getRegister();  if (defined.contains(r))   return true;  defined.add(r);}}return false;}  }
class C{  public TxtFileWriter(String filename) throws IOException {  super(new FileOutputStream(filename),AUTOFLUSH,ENCODING);}  }
class C{  public CloseSecureChannelResponse CloseSecureChannel(RequestHeader RequestHeader) throws ServiceFaultException, ServiceResultException {  CloseSecureChannelRequest req=new CloseSecureChannelRequest(RequestHeader);  return (CloseSecureChannelResponse)channel.serviceRequest(req);}  }
class C{  public boolean isMaria10(){  return isMaria10;}  }
class C{  public void paint(Graphics g,JComponent c){  getColorBackground(c).paint(g,c);}  }
class C{  void clear(){  nextNodes.clear();  prevNodes.clear();  trailingJoins.clear();  leadingJoins.clear();  if (leadingJoin != null) {    leadingJoin.trailingJoins.remove(this);    leadingJoin=null;  }  if (trailingJoin != null) {    trailingJoin.leadingJoins.remove(this);    trailingJoin=null;  }}  }
class C{  private void drawHex(Coords c,Graphics boardGraph,boolean saveBoardImage){  if (!game.getBoard().contains(c)) {    return;  }  final GUIPreferences guip=GUIPreferences.getInstance();  final IHex hex=game.getBoard().getHex(c);  final Point hexLoc=getHexLocation(c);  HexImageCacheEntry cacheEntry=hexImageCache.get(c);  if ((cacheEntry != null) && !cacheEntry.needsUpdating) {    boardGraph.drawImage(cacheEntry.hexImage,hexLoc.x,hexLoc.y,this);    return;  }  int level=hex.getLevel();  int depth=hex.depth(false);  ITerrain basement=hex.getTerrain(Terrains.BLDG_BASEMENT_TYPE);  if (basement != null) {    depth=0;  }  int height=Math.max(hex.terrainLevel(Terrains.BLDG_ELEV),hex.terrainLevel(Terrains.BRIDGE_ELEV));  height=Math.max(height,hex.terrainLevel(Terrains.INDUSTRIAL));  Image boardBgHexImg=getBoardBackgroundHexImage(c,hex);  Image baseImage, scaledImage;  if (boardBgHexImg != null) {    baseImage=boardBgHexImg;    scaledImage=boardBgHexImg;  } else {    baseImage=tileManager.baseFor(hex);    scaledImage=getScaledImage(baseImage,true);  }  boolean dontCache=animatedImages.contains(baseImage.hashCode());  boolean standardTile=(baseImage.getHeight(null) == HEX_H) && (baseImage.getWidth(null) == HEX_W);  int imgHeight, imgWidth;  imgWidth=scaledImage.getWidth(null);  imgHeight=scaledImage.getHeight(null);  int origImgWidth=imgWidth;  int origImgHeight=imgHeight;  imgWidth=Math.min(imgWidth,(int)(HEX_W * scale));  imgHeight=Math.min(imgHeight,(int)(HEX_H * scale));  if (useIsometric()) {    int largestLevelDiff=0;    for (    int dir : allDirections) {      IHex adjHex=game.getBoard().getHexInDir(c,dir);      if (adjHex == null) {        continue;      }      int levelDiff=Math.abs(level - adjHex.getLevel());      if (levelDiff > largestLevelDiff) {        largestLevelDiff=levelDiff;      }    }    imgHeight+=HEX_ELEV * scale * largestLevelDiff;  }  if ((imgWidth < 0) || (imgHeight < 0)) {    repaint();    return;  }  BufferedImage hexImage=new BufferedImage(imgWidth,imgHeight,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=(Graphics2D)(hexImage.getGraphics());  GUIPreferences.AntiAliasifSet(g);  if (standardTile) {    g.drawImage(scaledImage,0,0,this);  } else {    Point p1SRC=getHexLocationLargeTile(c.getX(),c.getY());    p1SRC.x=p1SRC.x % origImgWidth;    p1SRC.y=p1SRC.y % origImgHeight;    Point p2SRC=new Point((int)(p1SRC.x + HEX_W * scale),(int)(p1SRC.y + HEX_H * scale));    Point p2DST=new Point((int)(HEX_W * scale),(int)(HEX_H * scale));    Image hexMask=getScaledImage(tileManager.getHexMask(),true);    g.drawImage(hexMask,0,0,this);    Composite svComp=g.getComposite();    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,1f));    g.drawImage(scaledImage,0,0,p2DST.x,p2DST.y,p1SRC.x,p1SRC.y,p2SRC.x,p2SRC.y,null);    if (p2SRC.x > origImgWidth && p2SRC.y <= origImgHeight) {      g.drawImage(scaledImage,origImgWidth - p1SRC.x,0,p2DST.x,p2DST.y,0,p1SRC.y,p2SRC.x - origImgWidth,p2SRC.y,null);    } else     if (p2SRC.x <= origImgWidth && p2SRC.y > origImgHeight) {      g.drawImage(scaledImage,0,origImgHeight - p1SRC.y,p2DST.x,p2DST.y,p1SRC.x,0,p2SRC.x,p2SRC.y - origImgHeight,null);    } else     if (p2SRC.x > origImgWidth && p2SRC.y > origImgHeight) {      g.drawImage(scaledImage,origImgWidth - p1SRC.x,0,p2DST.x,p2DST.y,0,p1SRC.y,p2SRC.x - origImgWidth,p2SRC.y,null);      g.drawImage(scaledImage,0,origImgHeight - p1SRC.y,p2DST.x,p2DST.y,p1SRC.x,0,p2SRC.x,p2SRC.y - origImgHeight,null);      g.drawImage(scaledImage,origImgWidth - p1SRC.x,origImgHeight - p1SRC.y,p2DST.x,p2DST.y,0,0,p2SRC.x - origImgWidth,p2SRC.y - origImgHeight,null);    }    g.setComposite(svComp);  }  List<Image> supers=tileManager.supersFor(hex);  boolean supersUnderShadow=false;  if (hex.containsTerrain(Terrains.ROAD) || hex.containsTerrain(Terrains.WATER)) {    supersUnderShadow=true;    if (supers != null) {      for (      Image image : supers) {        if (animatedImages.contains(image.hashCode())) {          dontCache=true;        }        scaledImage=getScaledImage(image,true);        g.drawImage(scaledImage,0,0,this);      }    }  }  if (guip.getBoolean(GUIPreferences.SHADOWMAP) && (shadowMap != null)) {    Point p1SRC=getHexLocationLargeTile(c.getX(),c.getY(),1);    Point p2SRC=new Point(p1SRC.x + HEX_W,p1SRC.y + HEX_H);    Point p2DST=new Point(hex_size.width,hex_size.height);    Composite svComp=g.getComposite();    if (game.getPlanetaryConditions().getLight() == PlanetaryConditions.L_DAY) {      g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,0.55f));    } else {      g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,0.45f));    }    g.drawImage(shadowMap,0,0,p2DST.x,p2DST.y,p1SRC.x,p1SRC.y,p2SRC.x,p2SRC.y,null);    g.setComposite(svComp);  }  if (!supersUnderShadow) {    if (supers != null) {      for (      Image image : supers) {        if (null != image) {          if (animatedImages.contains(image.hashCode())) {            dontCache=true;          }          scaledImage=getScaledImage(image,true);          g.drawImage(scaledImage,0,0,this);        }      }    }  }  if (guip.getBoolean(GUIPreferences.AOHEXSHADOWS) || guip.getBoolean(GUIPreferences.SHADOWMAP)) {    for (    int dir : allDirections) {      Shape ShadowShape=getElevationShadowArea(c,dir);      GradientPaint gpl=getElevationShadowGP(c,dir);      if (ShadowShape != null && gpl != null) {        g.setPaint(gpl);        g.fill(getElevationShadowArea(c,dir));      }    }  }  List<Image> orthos=tileManager.orthoFor(hex);  if (orthos != null) {    for (    Image image : orthos) {      if (animatedImages.contains(image.hashCode())) {        dontCache=true;      }      scaledImage=getScaledImage(image,true);      if (!useIsometric()) {        g.drawImage(scaledImage,0,0,this);      }      if (useIsometric() && !guip.getBoolean(GUIPreferences.SHADOWMAP) && (hex.terrainLevel(Terrains.BRIDGE_ELEV) > 0)) {        Image shadow=createShadowMask(scaledImage);        g.drawImage(shadow,0,0,this);      }    }  }  if (ecmHexes != null) {    Color tint=ecmHexes.get(c);    if (tint != null) {      Color origColor=g.getColor();      g.setColor(tint);      AffineTransform sc=new AffineTransform();      sc.scale(scale,scale);      g.fill(sc.createTransformedShape(hexPoly));      g.setColor(origColor);      Image staticImage=getScaledImage(tileManager.getEcmStaticImage(tint),false);      g.drawImage(staticImage,0,0,staticImage.getWidth(null),staticImage.getHeight(null),this);    }  }  if (eccmHexes != null) {    Color tint=eccmHexes.get(c);    if (tint != null) {      Color origColor=g.getColor();      g.setColor(tint);      AffineTransform sc=new AffineTransform();      sc.scale(scale,scale);      g.fill(sc.createTransformedShape(hexPoly));      g.setColor(origColor);    }  }  if (ecmCenters != null) {    Color tint=ecmCenters.get(c);    if (tint != null) {      drawHexBorder(g,tint.darker(),5,10);    }  }  if (eccmCenters != null) {    Color tint=eccmCenters.get(c);    if (tint != null) {      drawHexBorder(g,tint.darker(),5,10);    }  }  if (guip.getBoolean(GUIPreferences.ADVANCED_DARKEN_MAP_AT_NIGHT) && (game.isPositionIlluminated(c) == IGame.ILLUMINATED_NONE) && (game.getPlanetaryConditions().getLight() > PlanetaryConditions.L_DAY)) {    for (int x=0; x < hexImage.getWidth(); ++x) {      for (int y=0; y < hexImage.getHeight(); ++y) {        int rgb=hexImage.getRGB(x,y);        int rd=(rgb >> 16) & 0xFF;        int gr=(rgb >> 8) & 0xFF;        int bl=rgb & 0xFF;        int al=(rgb >> 24);switch (game.getPlanetaryConditions().getLight()) {case PlanetaryConditions.L_FULL_MOON:          rd=rd / 4;        gr=gr / 4;      bl=bl / 2;    break;case PlanetaryConditions.L_PITCH_BLACK:  int gy=(rd + gr + bl) / 16;if (Math.random() < 0.3) {  gy=gy * 4 / 5;}if (Math.random() < 0.3) {gy=gy * 5 / 4;}rd=gy + rd / 5;gr=gy + gr / 5;bl=gy + bl / 5;break;case PlanetaryConditions.L_MOONLESS:rd=rd / 4;gr=gr / 4;bl=bl / 2;break;case PlanetaryConditions.L_DUSK:bl=bl * 3 / 4;break;default :}int nc=(al << 24) + (rd << 16) + (gr << 8)+ bl;hexImage.setRGB(x,y,nc);}}}g.setColor(guip.getMapTextColor());if (game.getBoard().inSpace()) g.setColor(Color.LIGHT_GRAY);final Collection<SpecialHexDisplay> shdList=game.getBoard().getSpecialHexDisplay(c);try {if (shdList != null) {for (SpecialHexDisplay shd : shdList) {if (shd.drawNow(game.getPhase(),game.getRoundCount(),localPlayer)) {scaledImage=getScaledImage(shd.getType().getDefaultImage(),true);g.drawImage(scaledImage,0,0,this);}}}} catch (IllegalArgumentException e) {System.err.println("Illegal argument exception, probably " + "can't load file.");e.printStackTrace();drawCenteredString("Loading Error",0,0 + (int)(50 * scale),font_note,g);return;}if (guip.getBoolean(GUIPreferences.ADVANCED_SHOW_COORDS) && (scale >= 0.5)) {drawCenteredString(c.getBoardNum(),0,0 + (int)(12 * scale),font_hexnum,g);}if (scale > 0.5f) {int ypos=HEX_H - 2;if (level != 0) {drawCenteredString(Messages.getString("BoardView1.LEVEL") + level,0,(int)(ypos * scale),font_elev,g);ypos-=10;}if (depth != 0) {drawCenteredString(Messages.getString("BoardView1.DEPTH") + depth,0,(int)(ypos * scale),font_elev,g);ypos-=10;}if (height > 0) {g.setColor(GUIPreferences.getInstance().getColor("AdvancedBuildingTextColor"));drawCenteredString(Messages.getString("BoardView1.HEIGHT") + height,0,(int)(ypos * scale),font_elev,g);ypos-=10;}}int s21=(int)(21 * scale);int s71=(int)(71 * scale);int s35=(int)(35 * scale);int s36=(int)(36 * scale);int s62=(int)(62 * scale);int s83=(int)(83 * scale);Point p1=new Point(s62,0);Point p2=new Point(s21,0);Point p3=new Point(s83,s35);Point p4=new Point(s83,s36);Point p5=new Point(s62,s71);Point p6=new Point(s21,s71);Point p7=new Point(0,s36);Point p8=new Point(0,s35);g.setColor(Color.black);g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1f));if (drawElevationLine(c,0)) {drawIsometricElevation(c,Color.GRAY,p1,p2,0,g);if (guip.getBoolean(GUIPreferences.LEVELHIGHLIGHT)) {g.drawLine(s21,0,s62,0);}}if (drawElevationLine(c,1)) {drawIsometricElevation(c,Color.DARK_GRAY,p3,p1,1,g);if (guip.getBoolean(GUIPreferences.LEVELHIGHLIGHT)) {g.drawLine(s62,0,s83,s35);}}if (drawElevationLine(c,2)) {drawIsometricElevation(c,Color.LIGHT_GRAY,p4,p5,2,g);if (guip.getBoolean(GUIPreferences.LEVELHIGHLIGHT)) {g.drawLine(s83,s36,s62,s71);}}if (drawElevationLine(c,3)) {drawIsometricElevation(c,Color.GRAY,p6,p5,3,g);if (guip.getBoolean(GUIPreferences.LEVELHIGHLIGHT)) {g.drawLine(s62,s71,s21,s71);}}if (drawElevationLine(c,4)) {drawIsometricElevation(c,Color.DARK_GRAY,p7,p6,4,g);if (guip.getBoolean(GUIPreferences.LEVELHIGHLIGHT)) {g.drawLine(s21,s71,0,s36);}}if (drawElevationLine(c,5)) {drawIsometricElevation(c,Color.LIGHT_GRAY,p8,p2,5,g);if (guip.getBoolean(GUIPreferences.LEVELHIGHLIGHT)) {g.drawLine(0,s35,s21,0);}}boolean hasLoS=fovHighlightingAndDarkening.draw(g,c,0,0,saveBoardImage);if (GUIPreferences.getInstance().getShowMapsheets()) {g.setColor(GUIPreferences.getInstance().getColor(GUIPreferences.ADVANCED_MAPSHEET_COLOR));if ((c.getX() % 16) == 0) {g.drawLine(s21,s71,0,s36);g.drawLine(0,s35,s21,0);} else if ((c.getX() % 16) == 15) {g.drawLine(s62,0,s83,s35);g.drawLine(s83,s36,s62,s71);}if ((c.getY() % 17) == 0) {g.drawLine(s21,0,s62,0);if ((c.getX() % 2) == 0) {g.drawLine(s62,0,s83,s35);g.drawLine(0,s35,s21,0);}} else if ((c.getY() % 17) == 16) {g.drawLine(s62,s71,s21,s71);if ((c.getX() % 2) == 1) {g.drawLine(s83,s36,s62,s71);g.drawLine(s21,s71,0,s36);}}}if (!hasLoS && guip.getFovGrayscale()) {for (int x=0; x < hexImage.getWidth(); ++x) {for (int y=0; y < hexImage.getHeight(); ++y) {int rgb=hexImage.getRGB(x,y);int rd=(rgb >> 16) & 0xFF;int gr=(rgb >> 8) & 0xFF;int bl=(rgb & 0xFF);int al=(rgb >> 24);int grayLevel=(rd + gr + bl) / 3;int gray=(al << 24) + (grayLevel << 16) + (grayLevel << 8)+ grayLevel;hexImage.setRGB(x,y,gray);}}}cacheEntry=new HexImageCacheEntry(hexImage);if (!dontCache) {hexImageCache.put(c,cacheEntry);}boardGraph.drawImage(cacheEntry.hexImage,hexLoc.x,hexLoc.y,this);}  }
class C{  public EmailIntentBuilder cc(@NonNull Collection<String> cc){  checkNotNull(cc);  for (  String email : cc) {    checkEmail(email);  }  this.cc.addAll(cc);  return this;}  }
class C{  public void addInvokeinterface(CtClass clazz,String name,String desc,int count){  addInvokeinterface(constPool.addClassInfo(clazz),name,desc,count);}  }
class C{  public final void pushIteratorRoot(int n){  m_iteratorRoots.push(n);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof OMDrawingTool) {    Debug.message("dtl","DrawingToolLayer: found a drawing tool");    setDrawingTool((OMDrawingTool)someObj);  }}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  MDDOrderLine[] lines=getLines(true,"M_Product_ID");  for (int i=0; i < lines.length; i++) {    MDDOrderLine line=lines[i];    BigDecimal old=line.getQtyOrdered();    if (old.signum() != 0) {      line.addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + old+ ")");      line.save(get_TrxName());    }  }  addDescription(Msg.getMsg(getCtx(),"Voided"));  reserveStock(lines);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isRootNode(){  return parent == null;}  }
class C{  public void testIntValuePos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int result=-218520473;  assertTrue("incorrect value",aNumber.intValue() == result);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode == Activity.RESULT_OK && requestCode == REQUEST_GET_VIDEO) {    Utils.showToast(this,"Uploading video");    getOps().uploadVideo(data.getData());  } else   Utils.showToast(this,"Could not get video to upload");}  }
class C{  private void secureOwner(MutableAcl acl,int indexOfAce){  if (acl.getOwner().equals(acl.getEntries().get(indexOfAce).getSid()) && BasePermission.ADMINISTRATION.equals(acl.getEntries().get(indexOfAce).getPermission())) {    throw new ForbiddenException("Can't revoke admin permission of owner.");  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.errorIndicatorPaint,stream);  SerialUtilities.writeStroke(this.errorIndicatorStroke,stream);}  }
class C{  protected void handleReplaceSelection(String content){  super.replaceSelection(content);}  }
class C{  public TungstenProperties subset(String prefix,boolean removePrefix){  return subset(prefix,removePrefix,false);}  }
class C{  public float clamp(float domainValue){  if (mDomainA > mDomainB) {    return Math.max(mDomainB,Math.min(mDomainA,domainValue));  }  return Math.max(mDomainA,Math.min(mDomainB,domainValue));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:33.253 -0500",hash_original_method="DCB176B376623FC7561DCD073EB66D0A",hash_generated_method="BC07DF84425BB82DDA544CDA0E99B7FE") public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(),this)) {    return true;  }  if (mItemCallback != null) {    mItemCallback.run();    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {    return true;  }  return false;}  }
class C{  int lastUseIndex(Name n){  if (arguments == null)   return -1;  for (int i=arguments.length; --i >= 0; ) {    if (arguments[i] == n)     return i;  }  return -1;}  }
class C{  public void allowTypesByRegExp(final Pattern... regexps){  addPermission(new RegExpTypePermission(regexps));}  }
class C{  public static Object deserializeObject(final byte[] objBytes,final ClassLoader loader) throws IOException, ClassNotFoundException {  ObjectInputStream objIn=null;  try {    objIn=new ClassLoaderObjectInputStream(new ByteArrayInputStream(objBytes),loader);    return objIn.readObject();  }  finally {    close(objIn);  }}  }
class C{  public boolean validateBrokerData(Tradestrategy tradestrategy) throws BrokerModelException {  boolean valid=true;  String errorMsg="Symbol: " + tradestrategy.getContract().getSymbol() + " Bar Size/Chart Days combination was not valid for TWS API, these values have been updated.\n Please validate and save.\n "+ "Note Chart Days/BarSize combinations for IB TWS:\n "+ "Chart Hist/Bar Size 1 Y/1 day, 6 M/1 day, 3 M/1 day 1 M/(1 day, 1 hour)\n "+ "Chart Hist 1 W/ Bar Size(1 day, 1 hour, 30 mins, 15 mins 2 D 1 hour, 30 mins, 15 mins, 3 mins, 2 mins, 1 min)\n "+ "Chart Hist 1 D/ Bar Size(1 hour, 30 mins, 15 mins, 5 mins 3 mins, 2 mins, 1 min, 30 secs)\n ";  if (tradestrategy.getChartDays() > 1 && (tradestrategy.getBarSize() < 60)) {    tradestrategy.setBarSize(60);    valid=false;  } else   if (tradestrategy.getChartDays() > 7 && tradestrategy.getBarSize() < 3600) {    tradestrategy.setBarSize(3600);    valid=false;  }  if (tradestrategy.getBarSize() == 30 && tradestrategy.getChartDays() > 1) {    tradestrategy.setChartDays(1);    valid=false;  } else   if (tradestrategy.getBarSize() <= 1800 && tradestrategy.getChartDays() > 7) {    tradestrategy.setChartDays(7);    valid=false;  } else   if (tradestrategy.getBarSize() == 3600 && tradestrategy.getChartDays() > 30) {    tradestrategy.setChartDays(30);    valid=false;  }  if (!valid) {    tradestrategy.setDirty(true);    throw new BrokerModelException(1,3901,errorMsg);  }  return valid;}  }
class C{  public static void validate(VOLandingpageService voObj) throws ValidationException {  BLValidator.isNonNegativeNumber("position",voObj.getPosition());}  }
class C{  protected void addProperties(Map<String,String> propMap) throws OpenStegoException {  Iterator<String> keys=null;  String key=null;  String value=null;  keys=propMap.keySet().iterator();  while (keys.hasNext()) {    key=keys.next();    if (key.equals(USE_COMPRESSION)) {      value=propMap.get(key).toString().trim();      if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("y") || value.equals("1")) {        this.useCompression=true;      } else       if (value.equalsIgnoreCase("false") || value.equalsIgnoreCase("n") || value.equals("0")) {        this.useCompression=false;      } else {        throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.INVALID_USE_COMPR_VALUE,value);      }    } else     if (key.equals(USE_ENCRYPTION)) {      value=propMap.get(key).toString().trim();      if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("y") || value.equals("1")) {        this.useEncryption=true;      } else       if (value.equalsIgnoreCase("false") || value.equalsIgnoreCase("n") || value.equals("0")) {        this.useEncryption=false;      } else {        throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.INVALID_USE_ENCRYPT_VALUE,value);      }    } else     if (key.equals(PASSWORD)) {      this.password=propMap.get(key).toString();    }  }}  }
class C{  @Override public URI toEdgeURI(final Object key){  return toURI(key.toString());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.FIELD_ACCESSOR__DECLARED_ABSTRACT:    setDeclaredAbstract(DECLARED_ABSTRACT_EDEFAULT);  return;case TypesPackage.FIELD_ACCESSOR__DECLARED_THIS_TYPE:setDeclaredThisType((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  public void disconnectFromBroker(final MqttAsyncConnection connection){  try {    connection.disconnect(new MqttDisconnectionResultHandler());  } catch (  SpyException e) {    Platform.runLater(new MqttEventHandler(new MqttDisconnectionAttemptFailureEvent(connection,e)));    logger.error(e.getMessage(),e);  }}  }
class C{  private ControllerAdvisor(DistributionAdvisee server){  super(server);}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList_TypeRefWithModifiers(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private FunctionLibFactory(String saxParser,FunctionLib lib,String systemFLD,Identification id) throws FunctionLibException {  super();  this.id=id;  this.lib=lib == null ? new FunctionLib() : lib;  InputSource is=new InputSource(this.getClass().getResourceAsStream(systemFLD));  init(saxParser,is);}  }
class C{  public String toString(){  return toString(0L,true);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public void createSubUsageScenario07() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(3.2);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO07_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO07_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(2.31);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","14");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(2.31);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","25");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(2.9);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","35");  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(4.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.terminateSubscription(basicSetup.getSupplierAdminKey(),subDetails,"");  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO07_PERUNIT_DAY",subDetails);}  }
class C{  public long add(long instant,long value){  return getDurationField().add(instant,value);}  }
class C{  public Track addTrack(String name,String type){  Track track=getTrackByName(name,type);  if (track == null) {    _IdNumber++;    String id=_id + "s" + Integer.toString(_IdNumber);    log.debug("Adding new ({}) to ({}) track name ({}) id: {}",type,getName(),name,id);    track=new Track(id,name,type,this);    register(track);  }  resetMoves();  return track;}  }
class C{  public Result(Query query,long countdown){  super(query.getId());  setQuery(query);  setCountdown(countdown);}  }
class C{  public Attachment(){  requestFileName="attachm.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";  responseFile="attachm.answer";}  }
class C{  @Provides @Config("supportEmail") public static String provideSupportEmail(RegistryEnvironment environment){  return "support@example.com";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.668 -0500",hash_original_method="CA414FF436476B2FF81777F9CBBFC86F",hash_generated_method="F6306F7924D61C0659C380C9D4C4BD69") public Request createRequest(javax.sip.address.URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setContent(content,contentType);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  protected ScriptC(RenderScript rs,Resources resources,int resourceID){  super(0,rs);  int id=internalCreate(rs,resources,resourceID);  if (id == 0) {    throw new RSRuntimeException("Loading of ScriptC script failed.");  }  setID(id);}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  protected void sendLogEvent(String component,String message,Callback<Object> callback){  String syslogMessage=String.format(Locale.US,"<22>%s %s %s:%s",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);  sendDataOverUDP(syslogMessage,callback);}  }
class C{  protected static Plane createHessePlane(Vector3 p0,Vector3 p1,Vector3 p2){  Vector3 a=p1.clone().subtract(p0);  Vector3 b=p2.clone().subtract(p0);  Vector3 normal=a.cross(b);  normal.normalize();  Vector3 scale=p0.clone().multiply(normal);  double distance=scale.x + scale.y + scale.z;  return new Plane(normal,distance);}  }
class C{  public static void callCommitThreads(){  LogWriterUtils.getLogWriter().fine("This is callCommitThreads method");  try {    new CommitThread("ct1",LogWriterUtils.getLogWriter());    new CommitThread("ct2",LogWriterUtils.getLogWriter());    new CommitThread("ct3",LogWriterUtils.getLogWriter());    new CommitThread("ct4",LogWriterUtils.getLogWriter());  } catch (  Exception e) {    LogWriterUtils.getLogWriter().warning("Failed in Commit Threads",e);    fail("Failed in Commit Threads",e);  }}  }
class C{  protected void encodeLineSuffix(OutputStream outStream) throws IOException {  tmp[0]=(byte)((crc.value >>> 8) & 0xff);  tmp[1]=(byte)(crc.value & 0xff);  encodeAtom(outStream,tmp,0,2);  super.pStream.println();}  }
class C{  public CGPoint deltaTransform(CGPoint src,CGPoint dst){  if (dst == null) {    dst=CGPoint.make(0,0);  }  double x=src.x;  double y=src.y;  dst.x=(float)(x * m00 + y * m01);  dst.y=(float)(x * m10 + y * m11);  return dst;}  }
class C{  public void run(){synchronized (updaterLock) {    updater.run();  }}  }
class C{  public boolean isLoggingEnabled(int logLevel){  return this.stackLogger == null ? false : this.stackLogger.isLoggingEnabled(logLevel);}  }
class C{  public static List<CompoundTag> writeInventory(ItemStack[] items,int start){  List<CompoundTag> out=new ArrayList<>();  for (int i=0; i < items.length; i++) {    ItemStack stack=items[i];    if (stack != null) {      out.add(writeItem(stack,start + i));    }  }  return out;}  }
class C{  public EmphasisBoost(Classifier weakLearner,int maxIterations,double lambda){  setWeakLearner(weakLearner);  setMaxIterations(maxIterations);  setLambda(lambda);}  }
class C{  public void testEmptyTerm() throws Exception {  checkOneTerm(keyword,"","");}  }
class C{  protected void longKeyPress(int keyCode){}  }
class C{  public NullFaweChunk(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  private void updateStyle(JComponent c){  SeaGlassContext context=getContext(this,ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateStyle(context,this);  if (style != oldStyle) {    titleSpacing=style.getInt(context,"InternalFrameTitlePane.titleSpacing",2);  }  context.dispose();}  }
class C{  public void tick(){  final long count=uncounted.sumThenReset();  final double instantRate=count / interval;  if (initialized) {    rate+=(alpha * (instantRate - rate));  } else {    rate=instantRate;    initialized=true;  }}  }
class C{  public boolean hasFormattedAddress(){  return super.hasElement(FormattedAddress.KEY);}  }
class C{  public void postTweet(int userId,int tweetId){  if (!tweet.containsKey(userId)) {    LinkedList<Integer> tweetList=new LinkedList<Integer>();    tweetList.add(globalStamp);    tweet.put(userId,tweetList);  } else {    tweet.get(userId).add(globalStamp);  }  map.put(globalStamp,tweetId);  globalStamp++;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public LiveNodeTrasher(String id,int numNodesToAdd){  this.id=id;  this.numNodesToAdd=numNodesToAdd;  this.client=newSolrZkClient();}  }
class C{  protected void dropFewItems(boolean p_70628_1_,int p_70628_2_){  int i=this.rand.nextInt(3) + this.rand.nextInt(1 + p_70628_2_);  for (int j=0; j < i; ++j) {    this.dropItem(Items.fish,1);  }  i=this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + p_70628_2_);  for (int k=0; k < i; ++k) {    if (this.isBurning()) {      this.dropItem(Items.cooked_fish,1);    } else {      this.dropItem(Items.fish,1);    }  }}  }
class C{  public boolean isStatic(){  return isStatic;}  }
class C{  void mergeWith(DirtyRegion dr){  int start=Math.min(fOffset,dr.fOffset);  int end=Math.max(fOffset + fLength,dr.fOffset + dr.fLength);  fOffset=start;  fLength=end - start;  fText=(dr.fText == null ? fText : (fText == null) ? dr.fText : fText + dr.fText);}  }
class C{  public void reply(CanReply m){}  }
class C{  public synchronized void cancel(){  cancelled=true;  tasks.reset();  this.notify();}  }
class C{  private int calculateRotationForFile(final File file){  final String filename=file.toString();  final int length=filename.length();  final int minDigits=m_decimalFormat.getMinimumIntegerDigits();  final String rotation=filename.substring(length - minDigits);  return Integer.parseInt(rotation);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int firstId() throws DBException {  return firstId(false);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T findValueOfType(Collection<?> collection,Class<T> type){  if (isEmpty(collection)) {    return null;  }  T value=null;  for (  Object element : collection) {    if (type == null || type.isInstance(element)) {      if (value != null) {        return null;      }      value=(T)element;    }  }  return value;}  }
class C{  public Hex(final String charsetName){  this(Charset.forName(charsetName));}  }
class C{  public int addEOFTransitionToStartRules(){  int n=0;  ATNState eofTarget=newState(null);  for (  Rule r : g.rules.values()) {    ATNState stop=atn.ruleToStopState[r.index];    if (stop.getNumberOfTransitions() > 0)     continue;    n++;    Transition t=new AtomTransition(eofTarget,Token.EOF);    stop.addTransition(t);  }  return n;}  }
class C{  public static void write(int x1,int y1,String url,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_XY);  dos.writeByte(COLORMODEL_URL);  dos.writeInt(x1);  dos.writeInt(y1);  properties.setProperty(LPC_LINKRASTERIMAGEURL,url);  properties.write(dos);}  }
class C{  @SuppressWarnings("unchecked") public void addCacheContext(GridCacheContext cacheCtx) throws IgniteCheckedException {  if (ctxMap.containsKey(cacheCtx.cacheId())) {    GridCacheContext<K,V> existing=ctxMap.get(cacheCtx.cacheId());    throw new IgniteCheckedException("Failed to start cache due to conflicting cache ID " + "(change cache name and restart grid) [cacheName=" + cacheCtx.name() + ", conflictingCacheName="+ existing.name()+ ']');  }  CacheStoreManager mgr=cacheCtx.store();  if (mgr.configured() && mgr.isLocal())   locStoreCnt.incrementAndGet();  ctxMap.put(cacheCtx.cacheId(),cacheCtx);}  }
class C{  public void clearWorkspace(){  stop();  removeAllComponents();  resetTime();  this.setWorkspaceChanged(false);  currentFile=null;  fireWorkspaceCleared();  manager.clearCouplings();  this.getUpdater().getUpdateManager().setDefaultUpdateActions();}  }
class C{  public void warn(String msg){  innerLog(Level.WARNING,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  @DSComment("information about package") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.335 -0500",hash_original_method="3469F3AC66BE0248CB548730284A6983",hash_generated_method="2485624FC9F5EDA0944762D77FF0BA2E") public XmlResourceParser loadXmlMetaData(PackageManager pm,String name){  if (metaData != null) {    int resid=metaData.getInt(name);    if (resid != 0) {      return pm.getXml(packageName,resid,getApplicationInfo());    }  }  return null;}  }
class C{  public void testAlgorithmParameterGenerator10() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg=AlgorithmParameterGenerator.getInstance(validAlgName);  apg.init(512);  AlgorithmParameters ap=apg.generateParameters();  assertEquals("Incorrect algorithm",ap.getAlgorithm().toUpperCase(),apg.getAlgorithm().toUpperCase());}  }
class C{  @Override public InputStream openResource(String resource) throws IOException {  InputStream is=null;  try {    File f0=new File(resource), f=f0;    if (!f.isAbsolute()) {      f=new File(getConfigDir() + resource).getAbsoluteFile();    }    boolean found=f.isFile() && f.canRead();    if (!found) {      f=f0.getAbsoluteFile();      found=f.isFile() && f.canRead();    }    if (found) {      if (!Boolean.parseBoolean(System.getProperty("solr.allow.unsafe.resourceloading","false"))) {        final URI instanceURI=new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();        final URI fileURI=f.toURI().normalize();        if (instanceURI.relativize(fileURI) == fileURI) {          throw new IOException("For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: " + f + "; if you want to override this safety feature and you are sure about the consequences, you can pass the system property "+ "-Dsolr.allow.unsafe.resourceloading=true to your JVM");        }      }      return new FileInputStream(f);    }    is=classLoader.getResourceAsStream(resource.replace(File.separatorChar,'/'));    if (is == null && System.getProperty("jetty.testMode") != null && !new File(getConfigDir()).isAbsolute()) {      is=classLoader.getResourceAsStream((getConfigDir() + resource).replace(File.separatorChar,'/'));    }  } catch (  IOException ioe) {    throw ioe;  }catch (  Exception e) {    throw new IOException("Error opening " + resource,e);  }  if (is == null) {    throw new IOException("Can't find resource '" + resource + "' in classpath or '"+ new File(getConfigDir()).getAbsolutePath()+ "'");  }  return is;}  }
class C{  public boolean checkPermission(java.security.acl.Permission perm){  return (permList.contains(perm));}  }
class C{  public Builder withTransport(Transport transport){  Assert.notNull(transport,"transport");  this.clientTransport=transport;  this.serverTransport=transport;  return this;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  try {    s.defaultReadObject();    this.queue=new Object[q.size()];    comparator=q.comparator();    addAll(q);  }  finally {    q=null;  }}  }
class C{  @Override public IMessage onMessage(MessageOpenLockGui message,MessageContext ctx){  final Minecraft minecraft=Minecraft.getMinecraft();  minecraft.addScheduledTask(null);  return null;}  }
class C{  private static void recursiveInvalidate(View view){  view.invalidate();  if (view instanceof ViewGroup) {    ViewGroup group=(ViewGroup)view;    int childCount=group.getChildCount();    for (int i=0; i < childCount; i++) {      View child=group.getChildAt(i);      if (child.getVisibility() == View.VISIBLE) {        recursiveInvalidate(child);      }    }  }}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  public static Long fromString(String str){  if (null == str) {    return null;  }  int exp=0;  int length=str.length();  Character c=str.charAt(length - 2);switch (c) {case 'E':    exp++;case 'P':  exp++;case 'T':exp++;case 'G':exp++;case 'M':exp++;case 'K':exp++;default :break;}String number=(exp == 0) ? str.substring(0,length - 1) : str.substring(0,length - 2);try {return Long.valueOf((long)(Double.parseDouble(number) * Math.pow(1024,exp)));} catch (NumberFormatException e) {return null;}}  }
class C{  private ReminderEntry(int minutes,int method){  mMinutes=minutes;  mMethod=method;}  }
class C{  public ArrayLongCompressed(long[] longs){  this(longs,0,longs.length);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public NonUniqueBusinessKeyException(){  super();}  }
class C{  public RequestCreator resize(int targetWidth,int targetHeight){  data.resize(targetWidth,targetHeight);  return this;}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String command=e.getActionCommand();  Debug.message("navpanel","NavigatePanel.actionPerformed(): " + command);  if (command.equals(panNWCmd)) {    firePanEvent(-45f);  } else   if (command.equals(panNCmd)) {    firePanEvent(0f);  } else   if (command.equals(panNECmd)) {    firePanEvent(45f);  } else   if (command.equals(panECmd)) {    firePanEvent(90f);  } else   if (command.equals(panSECmd)) {    firePanEvent(135f);  } else   if (command.equals(panSCmd)) {    firePanEvent(180f);  } else   if (command.equals(panSWCmd)) {    firePanEvent(-135f);  } else   if (command.equals(panWCmd)) {    firePanEvent(-90f);  } else   if (command.equals(centerCmd)) {    float lat;    float lon;    if (useDefaultCenter) {      lat=defaultCenterLat;      lon=defaultCenterLon;    } else {      lat=Environment.getFloat(Environment.Latitude,0f);      lon=Environment.getFloat(Environment.Longitude,0f);    }    fireCenterEvent(lat,lon);  }}  }
class C{  public JavaContext(TemplateContextType type,IDocument document,Position completionPosition,ISourceFile compilationUnit){  super(type,document,completionPosition,compilationUnit);}  }
class C{  public FluentFunction<T,R> around(final Function<Advice1<T,R>,R> around){  return withFn(null);}  }
class C{  private KeyParameter extract(byte[] salt,byte[] ikm){  hMacHash.init(new KeyParameter(ikm));  if (salt == null) {    hMacHash.init(new KeyParameter(new byte[hashLen]));  } else {    hMacHash.init(new KeyParameter(salt));  }  hMacHash.update(ikm,0,ikm.length);  byte[] prk=new byte[hashLen];  hMacHash.doFinal(prk,0);  return new KeyParameter(prk);}  }
class C{  public BukkitChunk_1_10(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public QName(String qname,Element namespaceContext,PrefixResolver resolver){  this(qname,namespaceContext,resolver,false);}  }
class C{  public Builder byDay(Integer num,DayOfWeek day){  byDay.add(new ByDay(num,day));  return this;}  }
class C{  private int invWmTransform(double alpha,double f1,double f2,double f3){  double s=alpha * Math.abs(f3 - f1) / 2.0;  double l=f1;  int x=0;  while (l < f2) {    l+=s;    x++;  }  if (Math.abs(l - s - f2) < Math.abs(l - f2)) {    return (x + 1) % 2;  } else {    return x % 2;  }}  }
class C{  public RolloutRenderer(final Class<RolloutRendererData> presentationType){  super(presentationType);}  }
class C{  public boolean isDecimalSeparatorAlwaysShown(){  return ndf.isDecimalSeparatorAlwaysShown();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private byte[] readArray(Command command,int value,int index,int length) throws LibUsbException, UsbException {  if (mDeviceHandle != null) {    ByteBuffer buffer=ByteBuffer.allocateDirect(length);    int transferred=LibUsb.controlTransfer(mDeviceHandle,USB_REQUEST_IN,command.getValue(),(short)value,(short)index,buffer,USB_TIMEOUT_MS);    if (transferred < 0) {      throw new LibUsbException("read error",transferred);    }    byte[] results=new byte[transferred];    buffer.get(results);    return results;  } else {    throw new LibUsbException("device handle is null",LibUsb.ERROR_NO_DEVICE);  }}  }
class C{  public boolean is_set_id1(){  return this.id1 != null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.735 -0500",hash_original_method="FE893551BF445ECD0CF959494571F82D",hash_generated_method="8F0D47E467026B0C124288864DEB5D88") private void tryAllAddresses(String dstName,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  InetAddress[] dstAddresses=InetAddress.getAllByName(dstName);  InetAddress dstAddress;  for (int i=0; i < dstAddresses.length - 1; i++) {    dstAddress=dstAddresses[i];    try {      checkDestination(dstAddress,dstPort);      startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);      return;    } catch (    IOException ex) {    }  }  dstAddress=dstAddresses[dstAddresses.length - 1];  checkDestination(dstAddress,dstPort);  startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);}  }
class C{  protected boolean[] declaresSerialVersionUID(){  boolean[] result=new boolean[2];  boolean eval;  boolean search;  print("serialVersionUID...");  eval=!SerializationHelper.needsUID(m_Evaluator.getClass());  search=!SerializationHelper.needsUID(m_Search.getClass());  result[0]=eval && search;  if (result[0]) {    println("yes");  } else {    println("no");  }  return result;}  }
class C{  private int decodeChannelWordlen(int chNum){  int ret;  Channel chan=ctx.channels[chNum];  Channel refChan=ctx.channels[0];  int weightIdx=0;  chan.fillMode=0;switch (br.read(2)) {case 0:    for (int i=0; i < ctx.numQuantUnits; i++) {      chan.quWordlen[i]=br.read(3);    }  break;case 1:if (chNum > 0) {  ret=numCodedUnits(chan);  if (ret < 0) {    return ret;  }  if (chan.numCodedVals > 0) {    VLC vlcTab=wl_vlc_tabs[br.read(2)];    for (int i=0; i < chan.numCodedVals; i++) {      int delta=vlcTab.getVLC2(br);      chan.quWordlen[i]=(refChan.quWordlen[i] + delta) & 7;    }  }} else {  weightIdx=br.read(2);  ret=numCodedUnits(chan);  if (ret < 0) {    return ret;  }  if (chan.numCodedVals > 0) {    int pos=br.read(5);    if (pos > chan.numCodedVals) {      log.error(String.format("WL mode 1: invalid position %d",pos));      return AT3P_ERROR;    }    int deltaBits=br.read(2);    int minVal=br.read(3);    for (int i=0; i < pos; i++) {      chan.quWordlen[i]=br.read(3);    }    for (int i=pos; i < chan.numCodedVals; i++) {      chan.quWordlen[i]=(minVal + getDelta(deltaBits)) & 7;    }  }}break;case 2:ret=numCodedUnits(chan);if (ret < 0) {return ret;}if (chNum > 0 && chan.numCodedVals > 0) {VLC vlcTab=wl_vlc_tabs[br.read(2)];int delta=vlcTab.getVLC2(br);chan.quWordlen[0]=(refChan.quWordlen[0] + delta) & 7;for (int i=1; i < chan.numCodedVals; i++) {int diff=refChan.quWordlen[i] - refChan.quWordlen[i - 1];delta=vlcTab.getVLC2(br);chan.quWordlen[i]=(chan.quWordlen[i - 1] + diff + delta) & 7;}} else if (chan.numCodedVals > 0) {boolean flag=br.readBool();VLC vlcTab=wl_vlc_tabs[br.read(1)];int startVal=br.read(3);unpackVqShape(startVal,atrac3p_wl_shapes[startVal][br.read(4)],chan.quWordlen,chan.numCodedVals);if (!flag) {for (int i=0; i < chan.numCodedVals; i++) {int delta=vlcTab.getVLC2(br);chan.quWordlen[i]=(chan.quWordlen[i] + delta) & 7;}} else {int i;for (i=0; i < (chan.numCodedVals & -2); i+=2) {if (!br.readBool()) {chan.quWordlen[i]=(chan.quWordlen[i] + vlcTab.getVLC2(br)) & 7;chan.quWordlen[i + 1]=(chan.quWordlen[i + 1] + vlcTab.getVLC2(br)) & 7;}}if ((chan.numCodedVals & 1) != 0) {chan.quWordlen[i]=(chan.quWordlen[i] + vlcTab.getVLC2(br)) & 7;}}}break;case 3:weightIdx=br.read(2);ret=numCodedUnits(chan);if (ret < 0) {return ret;}if (chan.numCodedVals > 0) {VLC vlcTab=wl_vlc_tabs[br.read(2)];chan.quWordlen[0]=br.read(3);for (int i=1; i < chan.numCodedVals; i++) {int delta=vlcTab.getVLC2(br);chan.quWordlen[i]=(chan.quWordlen[i - 1] + delta) & 7;}}break;}if (chan.fillMode == 2) {for (int i=chan.numCodedVals; i < ctx.numQuantUnits; i++) {chan.quWordlen[i]=(chNum > 0 ? br.read1() : 1);}} else if (chan.fillMode == 3) {int pos=(chNum > 0 ? chan.numCodedVals + chan.splitPoint : ctx.numQuantUnits - chan.splitPoint);for (int i=chan.numCodedVals; i < pos; i++) {chan.quWordlen[i]=1;}}if (weightIdx != 0) {return addWordlenWeights(chan,weightIdx);}return 0;}  }
class C{  protected String createStartTag(){  StringBuffer out=new StringBuffer();  out.append(getStartTagChar());  if (getBeginStartModifierDefined()) {    out.append(getBeginStartModifier());  }  out.append(getElementType());  Enumeration<String> en=getElementHashEntry().keys();  String value=null;  while (en.hasMoreElements()) {    String attr=en.nextElement();    if (getAttributeFilterState()) {      value=getAttributeFilter().process(getElementHashEntry().get(attr).toString());    } else {      value=(String)getElementHashEntry().get(attr);    }    out.append(' ');    out.append(alterCase(attr));    if (!value.equalsIgnoreCase(NO_ATTRIBUTE_VALUE) && getAttributeQuote()) {      out.append(getAttributeEqualitySign());      out.append(getAttributeQuoteChar());      out.append(value);      out.append(getAttributeQuoteChar());    } else     if (!getAttributeQuote()) {      out.append(getAttributeEqualitySign());      out.append(value);    }  }  if (getBeginEndModifierDefined()) {    out.append(getBeginEndModifier());  }  out.append(getEndTagChar());  return (out.toString());}  }
class C{  private void executeQuery(){  log.info("");  String sql="";  if (m_DD_Order_ID == null)   return;  sql=getOrderSQL();  log.fine(sql);  int row=0;  miniTable.setRowCount(row);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,Integer.parseInt(m_DD_Order_ID.toString()));    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,0);      miniTable.setValueAt(rs.getBigDecimal(2),row,1);      miniTable.setValueAt(rs.getString(3),row,2);      miniTable.setValueAt(rs.getString(4),row,4);      miniTable.setValueAt(rs.getString(5),row,3);      miniTable.setValueAt(rs.getString(6),row,5);      row++;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  miniTable.autoSize();}  }
class C{  public Matrix4d translationRotateScaleInvert(double tx,double ty,double tz,double qx,double qy,double qz,double qw,double sx,double sy,double sz){  double nqx=-qx, nqy=-qy, nqz=-qz;  double dqx=nqx + nqx;  double dqy=nqy + nqy;  double dqz=nqz + nqz;  double q00=dqx * nqx;  double q11=dqy * nqy;  double q22=dqz * nqz;  double q01=dqx * nqy;  double q02=dqx * nqz;  double q03=dqx * qw;  double q12=dqy * nqz;  double q13=dqy * qw;  double q23=dqz * qw;  double isx=1 / sx, isy=1 / sy, isz=1 / sz;  m00=isx * (1.0 - q11 - q22);  m01=isy * (q01 + q23);  m02=isz * (q02 - q13);  m03=0.0;  m10=isx * (q01 - q23);  m11=isy * (1.0 - q22 - q00);  m12=isz * (q12 + q03);  m13=0.0;  m20=isx * (q02 + q13);  m21=isy * (q12 - q03);  m22=isz * (1.0 - q11 - q00);  m23=0.0;  m30=-m00 * tx - m10 * ty - m20 * tz;  m31=-m01 * tx - m11 * ty - m21 * tz;  m32=-m02 * tx - m12 * ty - m22 * tz;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public String adoc(int commitWithin,String... fieldsAndValues){  XmlDoc d=doc(fieldsAndValues);  return add(d,"commitWithin",String.valueOf(commitWithin));}  }
class C{  private boolean isNotificationsEnabled(Peer peer,boolean hasMention){  if (!context().getSettingsModule().isNotificationsEnabled()) {    return false;  }  if (peer.getPeerType() == PeerType.GROUP) {    if (getGroup(peer.getPeerId()).isHidden()) {      return false;    }    if (context().getSettingsModule().isGroupNotificationsEnabled()) {      if (hasMention) {        return true;      }      if (context().getSettingsModule().isNotificationsEnabled(peer)) {        if (context().getSettingsModule().isGroupNotificationsOnlyMentionsEnabled()) {          return false;        } else {          return true;        }      } else {        return false;      }    } else {      return false;    }  } else   if (peer.getPeerType() == PeerType.PRIVATE) {    return context().getSettingsModule().isNotificationsEnabled(peer);  } else {    throw new RuntimeException("Unknown peer type");  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void initialize(){  VidPvs.clear();  PidPvs.clear();  tCodes.clear();  tCodes.put(Integer.valueOf(0),knownCodes.get(Integer.valueOf(0)));  setNumCodes(0);  knownGrpItems.clear();  for (int i=0; i <= 0xFF; i++) {    knownGrpItems.put(Integer.valueOf(i),new Vector<EcuDataItem>());  }  currDataGroup=selectedDataGroup=0;  currGrpItems=knownGrpItems.get(Integer.valueOf(currDataGroup));  firePropertyChange(new PropertyChangeEvent(this,"preset",null,knownGrpItems));}  }
class C{  private static void copy(InputStream i,OutputStream o,int bufferSize) throws IOException {  try {    byte[] buffer=new byte[bufferSize];    int size=i.read(buffer);    while (size > -1) {      o.write(buffer,0,size);      size=i.read(buffer);    }  }  finally {    sCleanup(o);    sCleanup(i);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHALLENGE\"";  db.execSQL(sql);}  }
class C{  public static void main(String[] args){  try {    new JDABuilder().setBotToken("TOKEN").addListener(new MessageListenerExample()).buildBlocking();  } catch (  IllegalArgumentException e) {    System.out.println("The config was not populated. Please enter a bot token.");  }catch (  LoginException e) {    System.out.println("The provided bot token was incorrect. Please provide valid details.");  }catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  protected void listExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listExecuteLogic");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List camposTabla=descripcionService.getCamposTabla();  request.setAttribute(ControlAccesoConstants.LISTA_CAMPOS,camposTabla);  List tipoCampoEntidad=descripcionService.makeListTipoCampoEntidad();  request.setAttribute(DescripcionConstants.LISTA_TIPOS_CAMPO_ENTIDAD_KEY,tipoCampoEntidad);  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.CAMPOS_TABLA_LISTADO,request);  invocation.setAsReturnPoint(true);  setReturnActionFordward(request,mapping.findForward("list"));}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  private void processCreature(CountCreature creature){  for (  DropItem item : creature.getDropList()) {    double probability=item.probability / 100 / creature.getRespawnTime();    addToProbability(item.name,probability);  }}  }
class C{  public DataLoader(final Properties properties,final AbstractTripleStore database,final PrintStream os){  output=os;  if (properties == null)   throw new IllegalArgumentException();  if (database == null)   throw new IllegalArgumentException();{    this.parserOptions=new RDFParserOptions(properties);    if ((properties.getProperty(Options.PRESERVE_BNODE_IDS) == null) && database.getLexiconRelation().isStoreBlankNodes()) {      parserOptions.setPreserveBNodeIDs(true);    }  }{    durableQueues=Boolean.parseBoolean(properties.getProperty(Options.DURABLE_QUEUES,Options.DEFAULT_DURABLE_QUEUES));    if (durableQueues) {      properties.setProperty(Options.IGNORE_INVALID_FILES,"true");      properties.setProperty(RDFParserOptions.Options.STOP_AT_FIRST_ERROR,"false");    }    if (log.isInfoEnabled())     log.info(Options.DURABLE_QUEUES + "=" + durableQueues);  }{    commitEnum=CommitEnum.valueOf(properties.getProperty(Options.COMMIT,Options.DEFAULT_COMMIT));    if (log.isInfoEnabled())     log.info(Options.COMMIT + "=" + commitEnum);  }{    closureEnum=database.getAxioms().isNone() ? ClosureEnum.None : (ClosureEnum.valueOf(properties.getProperty(Options.CLOSURE,Options.DEFAULT_CLOSURE)));    if (log.isInfoEnabled())     log.info(Options.CLOSURE + "=" + closureEnum);  }{    bufferCapacity=Integer.parseInt(properties.getProperty(Options.BUFFER_CAPACITY,Options.DEFAULT_BUFFER_CAPACITY));    if (log.isInfoEnabled())     log.info(Options.BUFFER_CAPACITY + "=" + bufferCapacity);  }{    queueCapacity=Integer.parseInt(properties.getProperty(Options.QUEUE_CAPACITY,Options.DEFAULT_QUEUE_CAPACITY));    if (log.isInfoEnabled())     log.info(Options.QUEUE_CAPACITY + "=" + queueCapacity);  }  this.database=database;  inferenceEngine=database.getInferenceEngine();  if (closureEnum != ClosureEnum.None) {    tm=new TruthMaintenance(inferenceEngine);  } else {    tm=null;  }{    flush=Boolean.parseBoolean(properties.getProperty(Options.FLUSH,Options.DEFAULT_FLUSH));    if (log.isInfoEnabled())     log.info(Options.FLUSH + "=" + flush);  }{    ignoreInvalidFiles=Boolean.parseBoolean(properties.getProperty(Options.IGNORE_INVALID_FILES,Options.DEFAULT_IGNORE_INVALID_FILES));    if (log.isInfoEnabled())     log.info(Options.IGNORE_INVALID_FILES + "=" + ignoreInvalidFiles);  }{    verbose=Integer.parseInt(properties.getProperty(Options.VERBOSE,Options.DEFAULT_VERBOSE));    if (log.isInfoEnabled())     log.info(Options.VERBOSE + "=" + verbose);  }{    dumpJournal=Boolean.parseBoolean(properties.getProperty(Options.DUMP_JOURNAL,Options.DEFAULT_DUMP_JOURNAL));    if (log.isInfoEnabled())     log.info(Options.DUMP_JOURNAL + "=" + dumpJournal);  }}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  public Address street(String street){  this.street=street;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.933 -0500",hash_original_method="B250150142DA03B7AD8AE045EB4F7730",hash_generated_method="5491A0EA98C716E5394E1F17693AAE39") public ViewPropertyAnimator translationY(float value){  animateProperty(TRANSLATION_Y,value);  return this;}  }
class C{  public boolean isVisible(){  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent == null)   return true;  return (parent.isExpanded() && parent.isVisible());}  }
class C{  public boolean test(String username,String password) throws UsersRepositoryException {  try {    final Session session=login();    try {      final String name=toSafeName(username);      final String path=USERS_PATH + "/" + name;      final Node rootNode=session.getRootNode();      try {        final Node node=rootNode.getNode(path);        final String current=node.getProperty(PASSWD_PROPERTY).getString();        if (current == null || current.equals("")) {          return password == null || password.equals("");        }        final String hashPassword=JCRUser.hashPassword(username,password);        return current.equals(hashPassword);      } catch (      PathNotFoundException e) {        getLogger().debug("User not found");        return false;      }    }  finally {      session.logout();    }  } catch (  RepositoryException e) {    if (getLogger().isInfoEnabled()) {      getLogger().info("Failed to search user: " + username,e);    }    throw new UsersRepositoryException("Failed to search for user: " + username,e);  }}  }
class C{  public IntArray(int[] data){  this.data=data;  size=data.length;}  }
class C{  private void drawElements(final Graphics g){  if (isEnabled()) {    g.setColor(m_fontColorValues);  } else {    g.setColor(m_disabledColor != m_bgColorOffset ? m_disabledColor : Color.WHITE);  }  final int x=(10 + m_offsetViewWidth) - (m_charWidth * m_firstColumn);  int linesToDraw=getNumberOfVisibleRows();  if ((m_firstRow + linesToDraw) >= m_model.getNumberOfEntries()) {    linesToDraw=m_model.getNumberOfEntries() - m_firstRow;    if (linesToDraw < 0) {      return;    }  }  if (m_model.getStartAddress() == -1) {    return;  }  final long elementSize=getElementSize();  if (m_status == DefinitionStatus.DEFINED) {    final long startAddress=m_model.getStartAddress() + (m_firstRow * elementSize);    final long numberOfBytes=linesToDraw * elementSize;    if (!m_model.hasData(startAddress,numberOfBytes)) {      setDefinitionStatus(DefinitionStatus.UNDEFINED);      setEnabled(false);      if (m_updateTimer != null) {        m_updateTimer.setRepeats(false);        m_updateTimer.stop();      }      m_updateTimer=new Timer(1000,new WaitingForDataAction(startAddress,numberOfBytes));      m_updateTimer.setRepeats(true);      m_updateTimer.start();      return;    }    for (int i=0; i < linesToDraw; i++) {      final long elementAddress=startAddress + (i * elementSize);      g.drawString(m_model.getElement(elementAddress),x,m_paddingTop + (i * m_rowHeight));    }  } else {    for (int i=0; i < linesToDraw; i++) {      g.drawString(Strings.repeat("?",2 * getElementSize()),x,m_paddingTop + (i * m_rowHeight));    }  }}  }
class C{  @SuppressWarnings("unused") private void createTestData(){  Calendar calendar=new GregorianCalendar();  for (int i=0; i < 20; i++) {    calendar.add(Calendar.MINUTE,-30);    Date date=calendar.getTime();    SensorData sensor=new SensorData();    sensor.setChannel("temperature");    sensor.setDateTime(date);    sensor.setValue(10 + i * Math.random());    sensor.save();    sensor=new SensorData();    sensor.setChannel("voltage");    sensor.setDateTime(date);    sensor.setValue(2 + Math.random());    sensor.save();    sensor=new SensorData();    sensor.setChannel("illuminance");    sensor.setDateTime(date);    sensor.setValue(300 + i * Math.random());    sensor.save();  }}  }
class C{  public boolean canIncreaseTimer(){  return this.timer < this.duration;}  }
class C{  public FasFdr(IndependenceTest test){  this.graph=new EdgeListGraph(test.getVariables());  this.test=test;  this.alpha=test.getAlpha();  this.cov=test.getCov().getMatrix();}  }
class C{  AbstractMimRunner(DataWrapper dataWrapper,Clusters clusters,Parameters params){  if (dataWrapper == null) {    throw new NullPointerException();  }  if (params == null) {    throw new NullPointerException();  }  this.dataWrapper=dataWrapper;  this.params=params;  setClusters(clusters);  this.sourceGraph=dataWrapper.getSourceGraph();  DataModel data=getDataModel(dataWrapper);  getParams().set("knowledge",dataWrapper.getKnowledge());  List names=data.getVariableNames();  transferVarNamesToParams(names);  this.dataModel=data;}  }
class C{  static String classReaderToClassName(ClassReader classReader){  if (classReader == null) {    return null;  } else {    return classReader.getClassName().replace('/','.');  }}  }
class C{  private void copyFrom(ExceptionsAttribute srcAttr,Map classnames){  ConstPool srcCp=srcAttr.constPool;  ConstPool destCp=this.constPool;  byte[] src=srcAttr.info;  int num=src.length;  byte[] dest=new byte[num];  dest[0]=src[0];  dest[1]=src[1];  for (int i=2; i < num; i+=2) {    int index=ByteArray.readU16bit(src,i);    ByteArray.write16bit(srcCp.copy(index,destCp,classnames),dest,i);  }  this.info=dest;}  }
class C{  public NormalFullGCParser(){  patterns.add(Pattern.compile("^([^\\s]+): (?:[\\.0-9]+): \\[Full GC(?:[^\\s]+): (?:[\\.0-9]+): \\[CMS: ([0-9]+)K->([0-9]+)K\\(([0-9]+)K\\), (?:[\\.0-9]+) secs\\] ([0-9]+)K->([0-9]+)K\\(([0-9]+)K\\), \\[CMS Perm : ([0-9]+)K->([0-9]+)K\\(([0-9]+)K\\)\\], ([\\.0-9]+) secs\\] \\[Times: user=(?:[\\.0-9]+) sys=(?:[\\.0-9]+), real=([\\.0-9]+) secs\\]"));}  }
class C{  public StatusProvider create(InetSocketAddress server) throws InternalException {  ClientProxy proxy=createClientProxy(server,this.clientPoolFactory,this.clientProxyFactory);  return createClient(proxy);}  }
class C{  public FgsMbRunner(DagWrapper dagWrapper,Parameters params){  super(dagWrapper.getDag(),params);}  }
class C{  public DoubleMatrix3D make(int slices,int rows,int columns,double initialValue){  return make(slices,rows,columns).assign(initialValue);}  }
class C{  static final public Identifier mangleClass(Identifier className){  if (!className.isInner())   return className;  Identifier mangled=Identifier.lookup(className.getFlatName().toString().replace('.',sun.tools.java.Constants.SIGC_INNERCLASS));  if (mangled.isInner())   throw new Error("failed to mangle inner class name");  return Identifier.lookup(className.getQualifier(),mangled);}  }
class C{  public void appendDouble(double x){  ByteArrayOutputStream buffer=new ByteArrayOutputStream(8);  DataOutputStream bufout=new DataOutputStream(buffer);  try {    bufout.writeDouble(x);    appendBytes(buffer.toByteArray(),0,8);  } catch (  IOException e) {    throw new AssertionError("write");  }}  }
class C{  private static void traverseMonitorExits(SynchronizedRegion region,InsnArg arg,BlockNode block,Set<BlockNode> exits,Set<BlockNode> visited){  visited.add(block);  for (  InsnNode insn : block.getInstructions()) {    if (insn.getType() == InsnType.MONITOR_EXIT && insn.getArg(0).equals(arg)) {      exits.add(block);      region.getExitInsns().add(insn);      return;    }  }  for (  BlockNode node : block.getSuccessors()) {    if (!visited.contains(node)) {      traverseMonitorExits(region,arg,node,exits,visited);    }  }}  }
class C{  public void classLoaderDestroy(DynamicClassLoader loader){  Method destroy=getDestroyMethod(_resource.getClass());  if (destroy == null)   return;  try {    destroy.invoke(_resource);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public TIntDoubleHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void processStartupEvent(StartupEvent o){  if (o.isDistributionMessage()) {    try {      dispatchMessage(o.dmsg);    } catch (    MemberShunnedException e) {    }  } else   if (o.isGmsView()) {    processView(o.gmsView.getViewId(),o.gmsView);  } else   if (o.isSurpriseConnect()) {    processSurpriseConnect(o.member);  } else   throw new InternalGemFireError(LocalizedStrings.GroupMembershipService_UNKNOWN_STARTUP_EVENT_0.toLocalizedString(o));}  }
class C{  public static String createWebXmlSource(){  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");  sb.append("<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");  sb.append("xmlns=\"http://java.sun.com/xml/ns/javaee\"\n");  sb.append("xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n");  sb.append("xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n");  sb.append("http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" version=\"2.5\">\n");  sb.append("\t<!-- TODO: Add <servlet> tags for each servlet here. -->\n");  sb.append("\t<!-- TODO: Add <servlet-mapping> tags for each <servlet> here. -->\n");  sb.append("\t<!-- TODO: Optionally add a <welcome-file-list> tag to display a welcome file. -->\n");  sb.append("</web-app>\n");  return sb.toString();}  }
class C{  public void removeAllIms(){  ims.clear();}  }
class C{  public boolean isControlling(){  return isControlling;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:00.127 -0500",hash_original_method="44ABD7B5C901E57BDC7AEA5540DA591C",hash_generated_method="90E2E048EB317FFAF4C1EAD650590D36") public StreamResult(OutputStream outputStream){  setOutputStream(outputStream);}  }
class C{  private void makeItems(int fingerPosition,List<View> viewList){  if (fingerPosition >= viewList.size()) {    return;  }  for (int i=0; i < viewList.size(); i++) {    int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight);    updateItemHeightAnimator(viewList.get(i),translationY);  }}  }
class C{  @Override public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public TransformerConfigurationException(String msg){  super(msg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.968 -0500",hash_original_method="9E25ADC04DC19743F5D672C3FA9262A8",hash_generated_method="7A042046982B20BD0D28A6D98CF6237D") private boolean processPlayTone(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process PlayTone");  Tone tone=null;  TextMessage textMsg=new TextMessage();  Duration duration=null;  IconId iconId=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.TONE,ctlvs);  if (ctlv != null) {    if (ctlv.getLength() > 0) {      try {        byte[] rawValue=ctlv.getRawValue();        int valueIndex=ctlv.getValueIndex();        int toneVal=rawValue[valueIndex];        tone=Tone.fromInt(toneVal);      } catch (      IndexOutOfBoundsException e) {        throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);      }    }  }  ctlv=searchForTag(ComprehensionTlvTag.ALPHA_ID,ctlvs);  if (ctlv != null) {    textMsg.text=ValueParser.retrieveAlphaId(ctlv);  }  ctlv=searchForTag(ComprehensionTlvTag.DURATION,ctlvs);  if (ctlv != null) {    duration=ValueParser.retrieveDuration(ctlv);  }  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    iconId=ValueParser.retrieveIconId(ctlv);    textMsg.iconSelfExplanatory=iconId.selfExplanatory;  }  boolean vibrate=(cmdDet.commandQualifier & 0x01) != 0x00;  textMsg.responseNeeded=false;  mCmdParams=new PlayToneParams(cmdDet,textMsg,tone,duration,vibrate);  if (iconId != null) {    mIconLoadState=LOAD_SINGLE_ICON;    mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  public void visitEnd(){  if (this.visitor != null) {    visitor.visitEnd();  }}  }
class C{  public float put(long key,float value){  float previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public static boolean isEmpty(Automaton a){  if (a.getNumStates() == 0) {    return true;  }  if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {    return true;  }  if (a.isAccept(0) == true) {    return false;  }  LinkedList<Integer> workList=new LinkedList<>();  BitSet seen=new BitSet(a.getNumStates());  workList.add(0);  seen.set(0);  Transition t=new Transition();  while (workList.isEmpty() == false) {    int state=workList.removeFirst();    if (a.isAccept(state)) {      return false;    }    int count=a.initTransition(state,t);    for (int i=0; i < count; i++) {      a.getNextTransition(t);      if (seen.get(t.dest) == false) {        workList.add(t.dest);        seen.set(t.dest);      }    }  }  return true;}  }
class C{  public int peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public void test_Range_EE(){  try {    EnumSet.range(EnumWithInnerClass.c,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,EnumWithInnerClass.c);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,(EnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(EnumWithInnerClass.b,EnumWithInnerClass.a);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  EnumSet<EnumWithInnerClass> enumSet=EnumSet.range(EnumWithInnerClass.a,EnumWithInnerClass.a);  assertEquals("Size of enumSet should be 1",1,enumSet.size());  enumSet=EnumSet.range(EnumWithInnerClass.a,EnumWithInnerClass.c);  assertEquals("Size of enumSet should be 3",3,enumSet.size());  try {    EnumSet.range(HugeEnumWithInnerClass.c,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,HugeEnumWithInnerClass.c);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,(HugeEnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.a);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.a);  assertEquals(1,hugeEnumSet.size());  hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.aa);  assertEquals(51,hugeEnumSet.size());  hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.mm);  assertEquals(65,hugeEnumSet.size());  hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.mm);  assertEquals(64,hugeEnumSet.size());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.855 -0500",hash_original_method="F0FED94C714DCB7A0D654E5FF6165803",hash_generated_method="DC16AC6C2BF1FCD472133390104DC745") private boolean parseCurrentTlvObject(){  try {    if (record[curOffset] == 0 || (record[curOffset] & 0xff) == 0xff) {      return false;    }    if ((record[curOffset + 1] & 0xff) < 0x80) {      curDataLength=record[curOffset + 1] & 0xff;      curDataOffset=curOffset + 2;    } else     if ((record[curOffset + 1] & 0xff) == 0x81) {      curDataLength=record[curOffset + 2] & 0xff;      curDataOffset=curOffset + 3;    } else {      return false;    }  } catch (  ArrayIndexOutOfBoundsException ex) {    return false;  }  if (curDataLength + curDataOffset > tlvOffset + tlvLength) {    return false;  }  return true;}  }
class C{  public boolean wasCancelled(){  return m_wasCancelled;}  }
class C{  @Override public void updateAfterMisfire(org.quartz.Calendar cal){  int instr=getMisfireInstruction();  if (instr == Trigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY)   return;  if (instr == MISFIRE_INSTRUCTION_SMART_POLICY) {    instr=MISFIRE_INSTRUCTION_FIRE_ONCE_NOW;  }  if (instr == MISFIRE_INSTRUCTION_DO_NOTHING) {    Date newFireTime=getFireTimeAfter(new Date());    while (newFireTime != null && cal != null && !cal.isTimeIncluded(newFireTime.getTime())) {      newFireTime=getFireTimeAfter(newFireTime);    }    setNextFireTime(newFireTime);  } else   if (instr == MISFIRE_INSTRUCTION_FIRE_ONCE_NOW) {    setNextFireTime(new Date());  }}  }
class C{  public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public BackpropCreationDialog(final NetworkPanel np){  super(np);  setTitle("New Backprop Network");}  }
class C{  public static boolean isSingletonEntity(EntityDataModel entityDataModel,Object entity) throws ODataEdmException {  EntityType entityType=getAndCheckEntityType(entityDataModel,entity.getClass());  boolean isSingletonEntity=false;  for (  Singleton singleton : entityDataModel.getEntityContainer().getSingletons()) {    if (singleton.getTypeName().equals(entityType.getFullyQualifiedName())) {      isSingletonEntity=true;      break;    }  }  return isSingletonEntity;}  }
class C{  public static double signDistPointLine(double px,double py,double lx0,double ly0,double dxl,double dyl){  double s=((ly0 - py) * dxl - (lx0 - px) * dyl);  return s;}  }
class C{  public static String toJavaName(String classname){  return Descriptor.toJavaName(classname);}  }
class C{  public ConstantDeclaration_ createConstantDeclaration_(){  ConstantDeclaration_Impl constantDeclaration_=new ConstantDeclaration_Impl();  return constantDeclaration_;}  }
class C{  public boolean isArcUp(){  return arcUp;}  }
class C{  private void addBefore(Entry<K,V> existingEntry){  after=existingEntry;  before=existingEntry.before;  before.after=this;  after.before=this;}  }
class C{  public void fireResultAdded(Result r,Result parent){  for (int i=resultListenerList.size(); --i >= 0; ) {    resultListenerList.get(i).resultAdded(r,parent);  }}  }
class C{  public static void runInBackground(Task.Backgroundable task){  task.queue();}  }
class C{  public void displayItems() throws IOException {  URL url=new URL(SNIPPETS_FEED + "?bq=" + URLEncoder.encode(QUERY,"UTF-8"));  HttpURLConnection httpConnection=(HttpURLConnection)url.openConnection();  InputStream inputStream=httpConnection.getInputStream();  int ch;  while ((ch=inputStream.read()) > 0) {    System.out.print((char)ch);  }}  }
class C{  @SuppressWarnings("fallthrough") public static int lookup3(int[] k,int offset,int length,int initval){  int a, b, c;  a=b=c=0xdeadbeef + (length << 2) + initval;  int i=offset;  while (length > 3) {    a+=k[i];    b+=k[i + 1];    c+=k[i + 2];{      a-=c;      a^=(c << 4) | (c >>> -4);      c+=b;      b-=a;      b^=(a << 6) | (a >>> -6);      a+=c;      c-=b;      c^=(b << 8) | (b >>> -8);      b+=a;      a-=c;      a^=(c << 16) | (c >>> -16);      c+=b;      b-=a;      b^=(a << 19) | (a >>> -19);      a+=c;      c-=b;      c^=(b << 4) | (b >>> -4);      b+=a;    }    length-=3;    i+=3;  }switch (length) {case 3:    c+=k[i + 2];case 2:  b+=k[i + 1];case 1:a+=k[i + 0];{c^=b;c-=(b << 14) | (b >>> -14);a^=c;a-=(c << 11) | (c >>> -11);b^=a;b-=(a << 25) | (a >>> -25);c^=b;c-=(b << 16) | (b >>> -16);a^=c;a-=(c << 4) | (c >>> -4);b^=a;b-=(a << 14) | (a >>> -14);c^=b;c-=(b << 24) | (b >>> -24);}case 0:break;}return c;}  }
class C{  public static MgmtDistributionSet toResponse(final DistributionSet distributionSet){  if (distributionSet == null) {    return null;  }  final MgmtDistributionSet response=new MgmtDistributionSet();  MgmtRestModelMapper.mapNamedToNamed(response,distributionSet);  response.setDsId(distributionSet.getId());  response.setVersion(distributionSet.getVersion());  response.setComplete(distributionSet.isComplete());  response.setType(distributionSet.getType().getKey());  distributionSet.getModules().forEach(null);  response.setRequiredMigrationStep(distributionSet.isRequiredMigrationStep());  response.add(linkTo(methodOn(MgmtDistributionSetRestApi.class).getDistributionSet(response.getDsId())).withRel("self"));  response.add(linkTo(methodOn(MgmtDistributionSetTypeRestApi.class).getDistributionSetType(distributionSet.getType().getId())).withRel("type"));  response.add(linkTo(methodOn(MgmtDistributionSetRestApi.class).getMetadata(response.getDsId(),Integer.parseInt(MgmtRestConstants.REQUEST_PARAMETER_PAGING_DEFAULT_OFFSET),Integer.parseInt(MgmtRestConstants.REQUEST_PARAMETER_PAGING_DEFAULT_LIMIT),null,null)).withRel("metadata"));  return response;}  }
class C{  TimeAxis(ImageParameters im,ImageWorker worker,RrdGraphDef gdef,Mapper mapper){  this.im=im;  this.worker=worker;  this.gdef=gdef;  this.mapper=mapper;  this.secPerPix=(im.end - im.start) / (double)im.xsize;  this.calendar=Calendar.getInstance(gdef.tz,gdef.locale);  this.calendar.setFirstDayOfWeek(gdef.firstDayOfWeek);}  }
class C{  protected ExitEventImpl(){  super();}  }
class C{  public void bind(String address,ServiceRefAmp linkService){  _linkServiceMap.put(address,linkService);}  }
class C{  public static boolean exceedsSize(Configuration conf,Path path,long maxSize) throws IOException {  long totalSize=0;  FileSystem fs=FileSystem.get(path.toUri(),conf);  Queue<Path> pathsToCheck=new LinkedList<>();  pathsToCheck.add(path);  while (pathsToCheck.size() > 0) {    Path pathToCheck=pathsToCheck.remove();    FileStatus[] statuses=fs.listStatus(pathToCheck);    for (    FileStatus status : statuses) {      if (status.isDirectory()) {        pathsToCheck.add(status.getPath());      } else {        totalSize+=status.getLen();        if (totalSize > maxSize) {          return true;        }      }    }  }  return false;}  }
class C{  private void connect() throws VMConnectException {  final String connectorName="com.sun.jdi.SocketAttach";  AttachingConnector connector=connector(connectorName);  if (connector == null) {    throw new VMConnectException(String.format("Unable connect to target Java VM. Requested connector '%s' not found. ",connectorName));  }  Map<String,Connector.Argument> arguments=connector.defaultArguments();  arguments.get("hostname").setValue(host);  ((Connector.IntegerArgument)arguments.get("port")).setValue(port);  int attempt=0;  for (; ; ) {    try {      Thread.sleep(2000);      vm=connector.attach(arguments);      break;    } catch (    UnknownHostException|IllegalConnectorArgumentsException e) {      throw new VMConnectException(e.getMessage(),e);    }catch (    IOException e) {      LOG.error(e.getMessage(),e);      if (++attempt > 10) {        throw new VMConnectException(e.getMessage(),e);      }      try {        Thread.sleep(2000);      } catch (      InterruptedException ignored) {      }    }catch (    InterruptedException ignored) {    }  }  eventsCollector=new EventsCollector(vm.eventQueue(),this);  LOG.debug("Connect {}:{}",host,port);}  }
class C{  private boolean isRequiredFieldsOk(){  String fieldRequired=getString(R.string.Required_field);  boolean nameCheck=Utils.checkTextInputLayoutValueRequirement(nameInputWrapper,fieldRequired);  boolean streetCheck=Utils.checkTextInputLayoutValueRequirement(streetInputWrapper,fieldRequired);  boolean houseNumberCheck=Utils.checkTextInputLayoutValueRequirement(houseNumberInputWrapper,fieldRequired);  boolean cityCheck=Utils.checkTextInputLayoutValueRequirement(cityInputWrapper,fieldRequired);  boolean zipCheck=Utils.checkTextInputLayoutValueRequirement(zipInputWrapper,fieldRequired);  boolean phoneCheck=Utils.checkTextInputLayoutValueRequirement(phoneInputWrapper,fieldRequired);  boolean emailCheck=Utils.checkTextInputLayoutValueRequirement(emailInputWrapper,fieldRequired);  if (nameCheck && streetCheck && houseNumberCheck&& cityCheck&& zipCheck&& phoneCheck&& emailCheck) {    if (selectedShipping == null) {      MsgUtils.showToast(getActivity(),MsgUtils.TOAST_TYPE_MESSAGE,getString(R.string.Choose_shipping_method),MsgUtils.ToastLength.SHORT);      scrollLayout.smoothScrollTo(0,deliveryShippingLayout.getTop());      return false;    }    if (selectedPayment == null) {      MsgUtils.showToast(getActivity(),MsgUtils.TOAST_TYPE_MESSAGE,getString(R.string.Choose_payment_method),MsgUtils.ToastLength.SHORT);      scrollLayout.smoothScrollTo(0,deliveryShippingLayout.getTop());      return false;    }    return true;  } else {    return false;  }}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    RelativeStrengthIndexSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  @Override public Result evaluate(TaskRequest taskRequest,VirtualMachineCurrentState targetVM,TaskTrackerState taskTrackerState){  Set<String> coTasks=coTasksGetter.call(taskRequest.getId());  String targetHostAttrVal=AttributeUtilities.getAttrValue(targetVM.getCurrAvailableResources(),hostAttributeName);  if (targetHostAttrVal == null || targetHostAttrVal.isEmpty()) {    return new Result(false,hostAttributeName + " attribute unavailable on host " + targetVM.getCurrAvailableResources().hostname());  }  for (  String coTask : coTasks) {    TaskTracker.ActiveTask activeTask=taskTrackerState.getAllRunningTasks().get(coTask);    if (activeTask == null)     activeTask=taskTrackerState.getAllCurrentlyAssignedTasks().get(coTask);    if (activeTask != null) {      String usedAttrVal=AttributeUtilities.getAttrValue(activeTask.getTotalLease(),hostAttributeName);      if (usedAttrVal == null || usedAttrVal.isEmpty())       return new Result(false,hostAttributeName + " attribute unavailable on host " + activeTask.getTotalLease().hostname()+ " running co-task "+ coTask);      if (usedAttrVal.equals(targetHostAttrVal)) {        return new Result(false,hostAttributeName + " " + targetHostAttrVal+ " already used for another co-task "+ coTask);      }    }  }  return new Result(true,"");}  }
class C{  public Factory buildEncoded(String json) throws ApiException {  Factory factory=DtoFactory.getInstance().createDtoFromJson(json,Factory.class);  checkValid(factory);  return factory;}  }
class C{  public static void registerProtocol(Protocol protocol,List<Integer> supported,Integer output){  if (pathCache.size() > 0)   pathCache.clear();  for (  Integer version : supported) {    if (!registryMap.containsKey(version)) {      registryMap.put(version,new HashMap<Integer,Protocol>());    }    registryMap.get(version).put(output,protocol);  }  if (Bukkit.getPluginManager().getPlugin("ViaVersion").isEnabled()) {    protocol.registerListeners();    refreshVersions();  } else {    registerList.add(protocol);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  synchronized public void vmidDead(VMID vmid){  if (DGCImpl.dgcLog.isLoggable(Log.BRIEF)) {    DGCImpl.dgcLog.log(Log.BRIEF,"removing endpoint " + vmid + " from reference set");  }  sequenceTable.remove(vmid);  refSetRemove(vmid);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.656 -0400",hash_original_method="E09FCBCF5B6CC9BA43DA329534B3A534",hash_generated_method="57CB43660391177D3EF86809A9F80388") protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {  BigInteger p, q, y;  int n1;  if (publicKey == null || !(publicKey instanceof DSAPublicKey)) {    throw new InvalidKeyException("publicKey is not an instance of DSAPublicKey");  }  DSAParams params=((DSAPublicKey)publicKey).getParams();  p=params.getP();  q=params.getQ();  y=((DSAPublicKey)publicKey).getY();  n1=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n1 < 512 || n1 > 1024 || (n1 & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 || q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (y.signum() != 1) {    throw new InvalidKeyException("y <= 0");  }  dsaKey=(DSAKey)publicKey;  msgDigest.reset();}  }
class C{  public static <T>boolean removeIf(Iterable<T> removeFrom,Predicate<? super T> predicate){  if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {    return removeIfFromRandomAccessList((List<T>)removeFrom,checkNotNull(predicate));  }  return Iterators.removeIf(removeFrom.iterator(),predicate);}  }
class C{  @Deprecated public ObjectInputStream deserialize(ObjectName name,byte[] data) throws InstanceNotFoundException, OperationsException {  final ClassLoader loader=getClassLoaderFor(name);  return instantiator.deserialize(loader,data);}  }
class C{  public void insertOrRefresh(final KBucketEntry newEntry){  if (newEntry == null)   return;  List<KBucketEntry> entriesRef=entries;  for (  KBucketEntry existing : entriesRef) {    if (existing.equals(newEntry)) {      existing.mergeInTimestamps(newEntry);      return;    }    if (existing.matchIPorID(newEntry)) {      DHT.logInfo("new node " + newEntry + " claims same ID or IP as "+ existing+ ", might be impersonation attack or IP change. ignoring until old entry times out");      return;    }  }  if (newEntry.verifiedReachable()) {    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {      modifyMainBucket(null,newEntry);      return;    }    if (replaceBadEntry(newEntry))     return;    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {      modifyMainBucket(youngest,newEntry);      insertInReplacementBucket(youngest);      return;    }  }  insertInReplacementBucket(newEntry);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  void crossOver(BayesNetRepresentation other){  boolean[] bits=new boolean[m_bits.length];  for (int i=0; i < m_bits.length; i++) {    bits[i]=m_bits[i];  }  int iCrossOverPoint=m_bits.length;  do {    for (int i=iCrossOverPoint; i < m_bits.length; i++) {      m_bits[i]=bits[i];    }    iCrossOverPoint=m_random.nextInt(m_bits.length);    for (int i=iCrossOverPoint; i < m_bits.length; i++) {      m_bits[i]=other.m_bits[i];    }  } while (hasCycles());  calcGlobalScore();}  }
class C{  public void generateOptimizedLogicalAnd(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  Constant condConst;  if ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {    if ((condConst=this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);      } else {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      }      return;    }    if ((condConst=this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      } else {        BranchLabel internalTrueLabel=new BranchLabel();        this.left.generateOptimizedBoolean(currentScope,internalTrueLabel,falseLabel,false);        this.right.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,false);      }      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public static String evaluate(String jsonpath,Object data){  String json=serialize(data);  if (jsonpath == null || jsonpath.trim().isEmpty()) {    return json;  }  if (json != null) {    Object result=JsonPath.parse(json).read(jsonpath);    if (result != null) {      if (result.getClass() == JSONArray.class) {        JSONArray arr=(JSONArray)result;        if (arr.isEmpty()) {          result=null;        } else         if (arr.size() == 1) {          result=arr.get(0);        }      }      return serialize(result);    }  }  return null;}  }
class C{  public boolean serialGroupCanRun(final StepInstance stepInstance,final Jobs jobs){  final SerialGroup serialGroup=stepInstance.getStep(jobs).getSerialGroup();  if (serialGroup == null) {    return true;  }  if (!serialGroupToStepIdMap.containsKey(serialGroup)) {    serialGroupToStepIdMap.put(serialGroup,buildMapStepIdsInGroup(serialGroup,jobs));  }  final List<String> stepIds=serialGroupToStepIdMap.get(serialGroup);  if (stepIds == null) {    return true;  }  final int stepIdCount=stepIds.size();  for (int index=0; index < stepIdCount; index+=MAXIMUM_IN_CLAUSE_SIZE) {    int endIndex=index + MAXIMUM_IN_CLAUSE_SIZE;    if (endIndex > stepIdCount) {      endIndex=stepIdCount;    }    final List<String> slice=stepIds.subList(index,endIndex);    final Query query=entityManager.createQuery("select count(i) from StepInstance i inner join i.executions e " + "where i.stepId in (:stepIds) and e.submittedTime is not null and e.completedTime is null");    query.setParameter("stepIds",slice);    if ((Long)query.getSingleResult() >= maxSerialGroupExecutions) {      return false;    }  }  return true;}  }
class C{  @Override public void drawLeft(){  drawFrame(backgroundFrameLeft);  drawPhotoCube(texCube);  drawReticle(.1f);  drawTextGraphics(textImage);}  }
class C{  protected int compare(String word,String letter){  final String firstLetter;  if (word.length() == 0) {    firstLetter=" ";  } else {    firstLetter=word.substring(0,1);  }  return mCollator.compare(firstLetter,letter);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (list_1: ");  result.append(list_1);  result.append(", name_1: ");  result.append(name_1);  result.append(", type_1: ");  result.append(type_1);  result.append(')');  return result.toString();}  }
class C{  public static boolean equals(short[] a,short a2[]){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  public static Socket createLoopbackSocket(int port,boolean ssl) throws IOException {  InetAddress address=getBindAddress();  if (address == null) {    address=InetAddress.getLocalHost();  }  try {    return createSocket(getHostAddress(address),port,ssl);  } catch (  IOException e) {    try {      return createSocket("localhost",port,ssl);    } catch (    IOException e2) {      throw e;    }  }}  }
class C{  public AugmentedDickeyFuller(double[] ts,int lag){  this.ts=ts;  this.lag=lag;  computeADFStatistics();}  }
class C{  public Method element(){  return element;}  }
class C{  private void process(MethodPart method,PartMap map){  String name=method.getName();  if (name != null) {    map.put(name,method);  }}  }
class C{  public SimpleLoader(DynamicClassLoader loader,PathImpl path){  this(loader);  setPath(path);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws InterruptedException {  TestSlidingWindow oper=new TestSlidingWindow();  CollectorTestSink swinSink=new CollectorTestSink();  oper.out.setSink(swinSink);  oper.setWindowSize(3);  oper.setup(null);  oper.beginWindow(0);  oper.data.process("a0");  oper.data.process("b0");  oper.endWindow();  oper.beginWindow(1);  oper.data.process("a1");  oper.data.process("b1");  oper.endWindow();  oper.beginWindow(2);  oper.data.process("a2");  oper.data.process("b2");  oper.endWindow();  oper.beginWindow(3);  oper.data.process("a3");  oper.data.process("b3");  oper.endWindow();  Assert.assertEquals("number emitted tuples",4,swinSink.collectedTuples.size());  Assert.assertEquals("Invalid second stream window state.",oper.getStreamingWindowState(1),Lists.newArrayList("a2","b2"));  Assert.assertEquals("Invalid expired stream window state.",oper.lastExpiredWindowState,Lists.newArrayList("a0","b0"));}  }
class C{  public SyncFactoryException(String msg){  super(msg);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String patch_toText(List<Patch> patches){  StringBuilder text=new StringBuilder();  for (  Patch aPatch : patches) {    text.append(aPatch);  }  return text.toString();}  }
class C{  public boolean isSupported(){  return false;}  }
class C{  public void existingEventPrepare(EventBean newEvent){  if (priorEventMap != null) {    lastNew=priorEventMap.get(newEvent);  }  getter.setRandomAccess(this);}  }
class C{  public void release(){}  }
class C{  public Map<NetworkLite,List<StoragePort>> allocatePorts(StorageSystem system,URI varray,Map<NetworkLite,List<Initiator>> initiatorsByNetwork,Map<NetworkLite,List<StoragePort>> portsByNetwork,Collection<URI> volumeURIs,ExportPathParams pathParams,StringSetMap existingZoningMap){  checkPathParams(pathParams,system);  _log.info(String.format("Assigning Ports for Array %s params %s Varray %s",system.getNativeGuid(),pathParams.toString(),varray));  Map<Initiator,List<StoragePort>> existingAssignments=generateInitiatorsToStoragePortsMap(existingZoningMap,varray);  Map<URI,Set<Initiator>> existingInitiatorsMap=generateNetworkToInitiatorsMap(existingAssignments,_dbClient);  Map<URI,Set<StoragePort>> existingPortsMap=generateNetworkToStoragePortsMap(existingAssignments,existingInitiatorsMap);  Map<URI,List<Initiator>> net2InitiatorsMap=new HashMap<URI,List<Initiator>>();  Map<URI,NetworkLite> networkMap=new HashMap<URI,NetworkLite>();  for (  NetworkLite network : initiatorsByNetwork.keySet()) {    if (!networkMap.containsKey(network.getId())) {      networkMap.put(network.getId(),network);      net2InitiatorsMap.put(network.getId(),initiatorsByNetwork.get(network));    }  }  filterRemoteInitiators(system,varray,net2InitiatorsMap,networkMap);  List<URI> orderedNetworks=new ArrayList<URI>();  StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssigner(system.getSystemType());  Map<URI,Integer> net2PortsNeeded=assigner.getPortsNeededPerNetwork(net2InitiatorsMap,pathParams,existingPortsMap,existingInitiatorsMap,orderedNetworks);  for (  Map.Entry<URI,Integer> entry : net2PortsNeeded.entrySet()) {    if (networkMap.get(entry.getKey()) != null) {      _log.info(String.format("Network %s (%s) requested ports %d",networkMap.get(entry.getKey()).getLabel(),entry.getKey().toString(),entry.getValue()));    }  }  StoragePortsAllocator allocator=new StoragePortsAllocator();  for (  URI netURI : existingPortsMap.keySet()) {    NetworkLite network=networkMap.get(netURI);    Set<StoragePort> existingPorts=existingPortsMap.get(netURI);    allocator.addPortsToAlreadyAllocatedContext(_dbClient,network,existingPorts);  }  Map<URI,Map<StoragePort,Long>> portUsageMap=computeStoragePortUsageMapForPorts(system.getId(),networkMap,varray,portsByNetwork);  portUsageMap=filterStoragePortsForRPVMAX(system.getId(),networkMap,varray,portUsageMap,volumeURIs);  Map<NetworkLite,List<StoragePort>> portsAllocated=new HashMap<NetworkLite,List<StoragePort>>();  for (  URI netURI : orderedNetworks) {    NetworkLite network=networkMap.get(netURI);    Integer portsNeeded=net2PortsNeeded.get(netURI);    if (portsNeeded == null || portsNeeded == 0) {      _log.info("No ports to be assigned for network: " + netURI);      continue;    }    List<Initiator> initiators=net2InitiatorsMap.get(netURI);    if (initiators == null || initiators.isEmpty()) {      _log.info("No initiators to be assigned for network: " + netURI);      continue;    }    if (portUsageMap.get(netURI).isEmpty()) {      _log.warn(String.format("No ports available for network: %s. Hence skipping allocation of ports in this network",netURI));      continue;    }    portsAllocated.put(network,allocatePortsFromNetwork(system.getId(),network,varray,portsNeeded,portUsageMap.get(netURI),allocator,existingPortsMap.get(netURI),true));  }  return portsAllocated;}  }
class C{  public static void openImage(Context mContext,String imagePath){  Intent intent=new Intent("android.intent.action.VIEW");  intent.addCategory("android.intent.category.DEFAULT");  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  Uri uri=Uri.fromFile(new File(imagePath));  intent.setDataAndType(uri,"image/*");  mContext.startActivity(intent);}  }
class C{  public void testCountWhereClauseSql(){  final String expected="SELECT EXISTS(SELECT 1 FROM MockModel WHERE intField = ? )";  String actual=new Select().from(MockModel.class).where("intField = ?",1).toExistsSql();  assertEquals(expected,actual);}  }
class C{  public static String fromFileToClass(String name){  return name.substring(0,name.length() - 6).replace(File.separatorChar,'.');}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static void mergeSort(Object[] src,Object[] dest,int low,int high,int off){  int length=high - low;  if (length < INSERTIONSORT_THRESHOLD) {    for (int i=low; i < high; i++)     for (int j=i; j > low && ((Comparable)dest[j - 1]).compareTo(dest[j]) > 0; j--)     swap(dest,j,j - 1);    return;  }  int destLow=low;  int destHigh=high;  low+=off;  high+=off;  int mid=(low + high) >>> 1;  mergeSort(dest,src,low,mid,-off);  mergeSort(dest,src,mid,high,-off);  if (((Comparable)src[mid - 1]).compareTo(src[mid]) <= 0) {    System.arraycopy(src,low,dest,destLow,length);    return;  }  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {    if (q >= high || p < mid && ((Comparable)src[p]).compareTo(src[q]) <= 0)     dest[i]=src[p++]; else     dest[i]=src[q++];  }}  }
class C{  public CloseHandle(Figure owner){  this(owner,new RelativeLocator(1.0,0.0));}  }
class C{  public static Label createWrapLabel(Composite parent,String text,int hspan){  Label l=new Label(parent,SWT.NONE | SWT.WRAP);  l.setFont(parent.getFont());  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  l.setLayoutData(gd);  return l;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.103 -0500",hash_original_method="A9D6B0D7435532871C80AFF391EAC1F3",hash_generated_method="D3243309923E5918CFAFBA2AA7C0AD41") SslErrorHandlerImpl(){  mLoaderQueue=new LinkedList<LoadListener>();  mSslPrefTable=new Bundle();  mOriginHandler=null;  mLoadListener=null;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExpandedRow)) {    return false;  }  ExpandedRow that=(ExpandedRow)o;  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;}  }
class C{  private static NodeTree pruneTopNodeChain(NodeTree subtree,Node firstContentNode){  while (subtree.getChildren().size() == 1 && !subtree.getNode().equals(firstContentNode) && subtree.getChildren().get(0).getNode().getNodeType() != Node.TEXT_NODE) {    subtree=subtree.getChildren().get(0);  }  return subtree;}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  public ProductListItem(){  m_sName=null;  m_sProduct=null;  m_sReference=null;}  }
class C{  public ASN1Primitive toASN1Primitive(){  return info.toASN1Primitive();}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  default String renderModifiers(Generator gen,M model,Modifier... allowed){  final Set<Modifier> modifiers;  if (allowed.length == 0) {    modifiers=model.getModifiers();  } else {    modifiers=Stream.of(allowed).collect(toSet());    modifiers.retainAll(model.getModifiers());  }  return gen.onEach(modifiers).collect(joinIfNotEmpty(" ",""," "));}  }
class C{  public AuthResult updateLink(Account.Id to,AuthRequest who) throws OrmException, AccountException, IOException {  try (ReviewDb db=schema.open()){    AccountExternalId.Key key=id(who);    List<AccountExternalId.Key> filteredKeysByScheme=filterKeysByScheme(key.getScheme(),db.accountExternalIds().byAccount(to));    if (!filteredKeysByScheme.isEmpty() && (filteredKeysByScheme.size() > 1 || !filteredKeysByScheme.contains(key))) {      db.accountExternalIds().deleteKeys(filteredKeysByScheme);    }    byIdCache.evict(to);    return link(to,who);  } }  }
class C{  protected void includeProperties(Set<Property> allProperties){  allProperties.addAll(this.properties);}  }
class C{  public boolean verifySignature(byte[] data){  if (signature != null) {    try {      if (sha_hash == null) {        sha_hash=sha.digest();      }      signature.update(sha_hash);      return signature.verify(data);    } catch (    SignatureException e) {      return false;    }  }  if (cipher != null) {    final byte[] decrypt;    try {      decrypt=cipher.doFinal(data);    } catch (    IllegalBlockSizeException e) {      return false;    }catch (    BadPaddingException e) {      return false;    }    final byte[] md5_sha;    if (sha != null && sha_hash == null) {      sha_hash=sha.digest();    }    if (md5 != null && md5_hash == null) {      md5_hash=md5.digest();    }    if (md5_hash != null && sha_hash != null) {      md5_sha=new byte[md5_hash.length + sha_hash.length];      System.arraycopy(md5_hash,0,md5_sha,0,md5_hash.length);      System.arraycopy(sha_hash,0,md5_sha,md5_hash.length,sha_hash.length);    } else     if (md5_hash != null) {      md5_sha=md5_hash;    } else {      md5_sha=sha_hash;    }    return Arrays.equals(decrypt,md5_sha);  } else   if (data == null || data.length == 0) {    return true;  } else {    return false;  }}  }
class C{  public void stopProfiling(){  if (mThread.isProfiling()) {    Debug.stopMethodTracing();  }}  }
class C{  public static BufferedImage scaleImage(BufferedImage image,int width,int height){  assert (width > 0 && height > 0);  BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  Graphics g=img.getGraphics();  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  g.drawImage(image,0,0,img.getWidth(),img.getHeight(),null);  return img;}  }
class C{  private static boolean processTrustedFacetsList(TrustedFacetsList trustedFacetsList,Version version,String facetId){  for (  TrustedFacets trustedFacets : trustedFacetsList.getTrustedFacets()) {    if ((trustedFacets.getVersion().minor >= version.minor) && (trustedFacets.getVersion().major <= version.major)) {      for (      String id : trustedFacets.getIds()) {        if (id.equals(facetId)) {          return true;        }      }    }  }  return false;}  }
class C{  public Node removeChild(Node oldChild){  if (oldChild == null) {    throw new IllegalArgumentException("oldChild == null!");  }  checkNode(oldChild);  IIOMetadataNode oldChildNode=(IIOMetadataNode)oldChild;  IIOMetadataNode previous=oldChildNode.previousSibling;  IIOMetadataNode next=oldChildNode.nextSibling;  if (previous != null) {    previous.nextSibling=next;  }  if (next != null) {    next.previousSibling=previous;  }  if (this.firstChild == oldChildNode) {    this.firstChild=next;  }  if (this.lastChild == oldChildNode) {    this.lastChild=previous;  }  oldChildNode.parent=null;  oldChildNode.previousSibling=null;  oldChildNode.nextSibling=null;  --numChildren;  return oldChildNode;}  }
class C{  public static String toString(Object object){  Objects.requireNonNull(object);  StringBuilder sb=new StringBuilder();  try {    for (    Field field : object.getClass().getFields()) {      sb.append(field.getName()).append(":").append(field.get(object)).append("\n");    }  } catch (  IllegalAccessException e) {    throw new RuntimeException("Error while executing " + object.getClass() + ".toString()",e);  }  return sb.toString();}  }
class C{  private void createGroups(BundleContext bundleContext){  ServiceReference SlingRepositoryFactoryReference=bundleContext.getServiceReference(SlingRepository.class.getName());  SlingRepository repository=(SlingRepository)bundleContext.getService(SlingRepositoryFactoryReference);  Session session=null;  if (repository != null) {    try {      session=repository.loginAdministrative(null);      if (session != null && session instanceof JackrabbitSession) {        UserManager userManager=((JackrabbitSession)session).getUserManager();        ValueFactory valueFactory=session.getValueFactory();        Authorizable authors=userManager.getAuthorizable(PublickConstants.GROUP_ID_AUTHORS);        if (authors == null) {          authors=userManager.createGroup(PublickConstants.GROUP_ID_AUTHORS);          authors.setProperty(GROUP_DISPLAY_NAME,valueFactory.createValue(PublickConstants.GROUP_DISPLAY_AUTHORS));        }        Authorizable testers=userManager.getAuthorizable(PublickConstants.GROUP_ID_TESTERS);        if (testers == null) {          testers=userManager.createGroup(PublickConstants.GROUP_ID_TESTERS);          testers.setProperty(GROUP_DISPLAY_NAME,valueFactory.createValue(PublickConstants.GROUP_DISPLAY_TESTERS));        }      }    } catch (    RepositoryException e) {      LOGGER.error("Could not get session",e);    } finally {      if (session != null && session.isLive()) {        session.logout();        session=null;      }    }  }}  }
class C{  public float determinant(){  float fCo00=m11 * m22 - m12 * m21;  float fCo10=m12 * m20 - m10 * m22;  float fCo20=m10 * m21 - m11 * m20;  float fDet=m00 * fCo00 + m01 * fCo10 + m02 * fCo20;  return fDet;}  }
class C{  public boolean wasNull() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public MyHashMap(int initialCapacity,float loadFactorThreshold){  if (initialCapacity > MAXIMUM_CAPACITY)   this.capacity=MAXIMUM_CAPACITY; else   this.capacity=trimToPowerOf2(initialCapacity);  this.loadFactorThreshold=loadFactorThreshold;  table=new ArrayList<>();  for (int i=0; i < capacity; i++) {    table.add(null);  }}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public static void checkSameHost(Path p1,Path p2){  Host p1Host=Host.fromUri(p1.toUri());  Host p2Host=Host.fromUri(p2.toUri());  checkArgument(p1Host.equals(p2Host),"first path host (%s) must equal second path host (%s)",p1Host,p2Host);}  }
class C{  private static String substParams(String text,final String[] params){  for (int i=0; i < params.length; i+=2)   if (text.indexOf(params[i]) >= 0)   text=text.replace(params[i],params[i + 1]);  return text;}  }
class C{  public Element removeAttribute(String name){  checkNotRemoved();  final Attribute attribute=getAttribute(name);  if (attribute != null) {    xmlTree.removeAttribute(attribute);    delegate.getAttributes().removeNamedItem(name);  }  return this;}  }
class C{  public void delete(@Nonnull T_ENTITY entity) throws HibernateException {  delete(entity.getId());}  }
class C{  public void updateTitle(){  Project project=getProject();  String name=project.getProjectName();  if ((name == null || "".equals(name.trim())) && saveFile != null) {    name=saveFile.getAbsolutePath();  }  if (name == null) {    name="";  }  String oldTitle=this.getTitle();  String newTitle=TITLE_START_TXT + ("".equals(name.trim()) ? "" : " - " + name);  if (oldTitle.equals(newTitle)) {    return;  }  this.setTitle(newTitle);}  }
class C{  public boolean unicodeCase(){  return !asciiCase;}  }
class C{  @Override public boolean pinchIn(String obj,int percent,int steps) throws UiObjectNotFoundException, NotImplementedException {  return pinchIn(getUiObject(obj),percent,steps);}  }
class C{  public Blade post(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.POST);  return this;}  }
class C{  public void testUnivariateSignatureMatchesMultivariate() throws Exception {  TransferEntropyCalculatorMultiVariateGaussian teCalc=new TransferEntropyCalculatorMultiVariateGaussian();  super.testUnivariateMatchesMultivariateRoute(teCalc,100,1);}  }
class C{  public int assignLeafModelNumbers(int leafCounter){  if (!m_isLeaf) {    m_leafModelNum=0;    for (    LMTNode m_son : m_sons) {      leafCounter=m_son.assignLeafModelNumbers(leafCounter);    }  } else {    leafCounter++;    m_leafModelNum=leafCounter;  }  return leafCounter;}  }
class C{  public void fireAreaInvalidated(){  fireAreaInvalidated(getDrawingArea());}  }
class C{  public boolean isDurableSubscriber(){  return isTopic && durableName != null;}  }
class C{  public boolean isText(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.388 -0400",hash_original_method="9A8A9369607CBCE0B198118FFA0FC7E8",hash_generated_method="5716A6A6812CE555B3B711E566D55EB5") public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL decoded");  }}  }
class C{  private PrivateIonBinaryWriterBuilder fillDefaults(){  PrivateIonBinaryWriterBuilder b=copy();  if (b.getSymtabValueFactory() == null) {    IonSystem system=IonSystemBuilder.standard().build();    b.setSymtabValueFactory(system);  }  return b.immutable();}  }
class C{  public int size(){  return iterators.size();}  }
class C{  public static char toLowerCase(char ch){  return ' ';}  }
class C{  public void clearRect(int x,int y,int width,int height){  Paint paint=gc.getPaint();  gc.setColor(gc.getBackground());  fillRect(x,y,width,height);  gc.setPaint(paint);}  }
class C{  public static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  protected void initialize(){  size=0;  for (Node n=AbstractParentNode.this.getFirstChild(); n != null; n=n.getNextSibling()) {    initialize(n);  }}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  protected void commit() throws MailboxException {  try {    if (getSession().hasPendingChanges()) {      getSession().save();    }  } catch (  RepositoryException e) {    throw new MailboxException("Unable to commit",e);  }}  }
class C{  public final boolean canGetInt(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetInt());}  }
class C{  XmlElements(XmlElement[] elems){  m_elems=elems;}  }
class C{  public static Map<String,Set<String>> parse(final URI uri,final String encoding){  Map<String,Set<String>> result=Collections.emptyMap();  final String query=uri.getRawQuery();  if (query != null && query.length() > 0) {    result=new HashMap<>();    parse(result,new Scanner(query),encoding,true);  }  return result;}  }
class C{  public void build(String type,String username){  result=new JSONObject();  try {    result.put(DEVICE_IDENTIFIER,deviceInfo.getMACAddress());    result.put(DEVICE_DESCRIPTION,deviceInfo.getDeviceName());    result.put(DEVICE_OWNERSHIP,type);    JSONArray properties=new JSONArray();    JSONObject property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_USERNAME);    property.put(DEVICE_PROPERTY_VALUE,username);    properties.put(property);    property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_DESCRIPTION);    property.put(DEVICE_PROPERTY_VALUE,deviceInfo.getDeviceName());    properties.put(property);    property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_IMEI);    property.put(DEVICE_PROPERTY_VALUE,deviceInfo.getDeviceId());    properties.put(property);    property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_IMSI);    property.put(DEVICE_PROPERTY_VALUE,deviceInfo.getIMSINumber());    properties.put(property);    property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_MODEL);    property.put(DEVICE_PROPERTY_VALUE,deviceInfo.getDeviceModel());    properties.put(property);    property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_VENDOR);    property.put(DEVICE_PROPERTY_VALUE,deviceInfo.getOsVersion());    properties.put(property);    property=new JSONObject();    property.put(DEVICE_PROPERTY_NAME,DEVICE_PROPERTY_OS);    property.put(DEVICE_PROPERTY_VALUE,deviceInfo.getOsVersion());    properties.put(property);    result.put(DEVICE_PROPERTY_TAG,properties);  } catch (  JSONException e) {    Log.e(TAG,"Invalid object saved in JSON.");  }}  }
class C{  static Observable<FingerprintEncryptionResult> create(Context context,String keyName,String toEncrypt){  return Observable.create(new FingerprintEncryptionObservable(context,keyName,toEncrypt,new Base64Provider()));}  }
class C{  @Deprecated public Map<String,String[]> toMap(){  Map<String,String[]> newMap=Maps.newHashMap();  for (  Map.Entry<String,List<String>> entry : map.entrySet()) {    List<String> l=entry.getValue();    newMap.put(entry.getKey(),l.toArray(new String[l.size()]));  }  return newMap;}  }
class C{  public void addGatewayReceiverToSystem(ObjectName objectName,GatewayReceiverMXBean proxy,FederationComponent newState){  if (mapOfGatewayReceivers != null) {    mapOfGatewayReceivers.put(objectName,proxy);    gatewayReceiverSetSize=mapOfGatewayReceivers.values().size();  }  updateGatewayReceiver(objectName,newState,null);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getPropertyName() == "p_table_update")   calculateSelection();}  }
class C{  public EntityEvent(@NamedArg("eventType") EventType<? extends Event> eventType,Entity triggerEntity,Entity targetEntity){  super(eventType);  this.triggerEntity=triggerEntity;  this.targetEntity=targetEntity;}  }
class C{  public PrefixQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @Override protected void finalize(){}  }
class C{  @Override public int read(byte b[],int off,int len){  if (b == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  }  if (pos >= count) {    return -1;  }  if (pos + len > count) {    len=count - pos;  }  if (len <= 0) {    return 0;  }  System.arraycopy(buf,pos,b,off,len);  pos+=len;  return len;}  }
class C{  @Override public void putAll(Map<? extends Double,? extends Double> map){  Iterator<? extends Entry<? extends Double,? extends Double>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Double,? extends Double> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public static String[] list(String name) throws RemoteException, java.net.MalformedURLException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  String prefix="";  if (parsed.port > 0 || !parsed.host.equals(""))   prefix+="//" + parsed.host;  if (parsed.port > 0)   prefix+=":" + parsed.port;  prefix+="/";  String[] names=registry.list();  for (int i=0; i < names.length; i++) {    names[i]=prefix + names[i];  }  return names;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object elem=stack.pop();  Object obj=stack.pop();  Object rv=null;  try {    if (obj instanceof java.util.Collection)     rv=((java.util.Collection)obj).remove(elem) ? Boolean.TRUE : Boolean.FALSE; else     if (obj instanceof java.util.Map)     rv=((java.util.Map)obj).remove(elem);  } catch (  Exception e) {  }  return (rv);}  }
class C{  public TaskLockingCompleter(){}  }
class C{  private static List<CalendarEvent> readEvents(File f){  try {    CompatibilityHints.setHintEnabled(CompatibilityHints.KEY_RELAXED_PARSING,true);    CalendarBuilder builder=new CalendarBuilder();    List<CalendarEvent> gpEvents=Lists.newArrayList();    Calendar c=builder.build(new UnfoldingReader(new FileReader(f)));    for (    Component comp : (List<Component>)c.getComponents()) {      if (comp instanceof VEvent) {        VEvent event=(VEvent)comp;        if (event.getStartDate() == null) {          GPLogger.log("No start date found, ignoring. Event=" + event);          continue;        }        Date eventStartDate=event.getStartDate().getDate();        if (event.getEndDate() == null) {          GPLogger.log("No end date found, using start date instead. Event=" + event);        }        Date eventEndDate=event.getEndDate() == null ? eventStartDate : event.getEndDate().getDate();        TimeDuration oneDay=GPTimeUnitStack.createLength(GPTimeUnitStack.DAY,1);        if (eventEndDate != null) {          java.util.Date startDate=GPTimeUnitStack.DAY.adjustLeft(eventStartDate);          java.util.Date endDate=GPTimeUnitStack.DAY.adjustLeft(eventEndDate);          RRule recurrenceRule=(RRule)event.getProperty(Property.RRULE);          boolean recursYearly=false;          if (recurrenceRule != null) {            recursYearly=Recur.YEARLY.equals(recurrenceRule.getRecur().getFrequency()) && 1 == recurrenceRule.getRecur().getInterval();          }          while (startDate.compareTo(endDate) <= 0) {            gpEvents.add(CalendarEvent.newEvent(startDate,recursYearly,CalendarEvent.Type.HOLIDAY,event.getSummary().getValue(),null));            startDate=GPCalendarCalc.PLAIN.shiftDate(startDate,oneDay);          }        }      }    }    return gpEvents;  } catch (  IOException|ParserException e) {    GPLogger.log(e);    return null;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue04.class,args);}  }
class C{  public final boolean isOverwriteEnabled(){  return overwrite;}  }
class C{  protected static void println(String msg){  System.out.println(msg);}  }
class C{  private void processRevisions(){  logger.info("Processing revisions, extracting template information ...");  RevisionIterator revisionIter=null;  try {    revisionIter=new RevisionIterator(dbConf);    int revCounter=0;    while (revisionIter.hasNext()) {      revCounter++;      if (revCounter % VERBOSITY == 0) {        logger.info(revCounter + " revisions processed ...");      }      Revision curRevision=revisionIter.next();      int curRevisionId=curRevision.getRevisionID();      fillMapWithTemplateData(curRevision.getRevisionText(),revisionFilter,curRevisionId,TPLNAME_TO_REVISIONIDS);    }  } catch (  WikiApiException e) {    System.err.println("Error initializing Revision Iterator");    e.printStackTrace();  } finally {    if (revisionIter != null) {      try {        revisionIter.close();      } catch (      SQLException e) {        System.err.println("Error closing RevisionIterator");        e.printStackTrace();      }    }  }}  }
class C{  private static String buildSdpWithOrientationExtension(VideoCodec codec,int localRtpPort,int extensionId){  StringBuilder sdp=new StringBuilder(buildSdpWithoutOrientation(codec,localRtpPort)).append("a=").append(ATTRIBUTE_EXTENSION).append(':').append(extensionId).append(" ").append(SdpOrientationExtension.VIDEO_ORIENTATION_URI).append(SipUtils.CRLF);  return sdp.toString();}  }
class C{  @Override public void paintThumb(Graphics g){}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.ARRAY__EXPRS:    return getExprs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public AsyncResult RegisterServer2Async(RequestHeader RequestHeader,RegisteredServer2 Server){  RegisterServer2Request req=new RegisterServer2Request(RequestHeader,Server);  return channel.serviceRequestAsync(req);}  }
class C{  @Override public void onStart(Intent intent,int startId){  super.onStart(intent,startId);  handleCommand(intent);}  }
class C{  public static void main(String[] args){  Header.printHeader(ExtractCapeTownVehiclesFromPopulation.class.toString(),args);  String inputPopulationFile=args[0];  String inputAttributeFile=args[1];  String shapefile=args[2];  String outputPopulationfile=args[3];  String outputAttributeFile=args[4];  Scenario scInput=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(scInput).readFile(inputPopulationFile);  new ObjectAttributesXmlReader(scInput.getPopulation().getPersonAttributes()).readFile(inputAttributeFile);  LOG.info("Total number in population before extraction: " + scInput.getPopulation().getPersons().size());  ShapeFileReader sfr=new ShapeFileReader();  sfr.readFileAndInitialize(shapefile);  Collection<SimpleFeature> features=sfr.getFeatureSet();  if (features.size() > 1) {    LOG.warn("Multiple features in given shapefile. Number of features: " + features.size());  }  MultiPolygon city=null;  Iterator<SimpleFeature> iterator=features.iterator();  SimpleFeature sf=iterator.next();  if (sf.getDefaultGeometry() instanceof MultiPolygon) {    LOG.info("Great! Geometry is MultiPolygon.");    city=(MultiPolygon)sf.getDefaultGeometry();  }  Counter counter=new Counter("  persons # ");  Scenario scOutput=ScenarioUtils.createScenario(ConfigUtils.createConfig());  GeometryFactory gf=new GeometryFactory();  for (  Person person : scInput.getPopulation().getPersons().values()) {    boolean inCapeTown=false;    Iterator<PlanElement> elements=person.getSelectedPlan().getPlanElements().iterator();    while (elements.hasNext() && !inCapeTown) {      PlanElement pe=elements.next();      if (pe instanceof Activity) {        Activity act=(Activity)pe;        Point p=gf.createPoint(new Coordinate(act.getCoord().getX(),act.getCoord().getY()));        if (city.covers(p)) {          inCapeTown=true;        }      }    }    if (inCapeTown) {      scOutput.getPopulation().addPerson(person);      scOutput.getPopulation().getPersonAttributes().putAttribute(person.getId().toString(),"subpopulation",scInput.getPopulation().getPersonAttributes().getAttribute(person.getId().toString(),"subpopulation"));    }    counter.incCounter();  }  counter.printCounter();  LOG.info("Total number in population after extraction: " + scOutput.getPopulation().getPersons().size());  new PopulationWriter(scOutput.getPopulation()).write(outputPopulationfile);  new ObjectAttributesXmlWriter(scOutput.getPopulation().getPersonAttributes()).writeFile(outputAttributeFile);  Header.printFooter();}  }
class C{  public void push(){  Map<K,V> newMap=new HashMap<K,V>();  this.stackList.add(0,newMap);}  }
class C{  public void removeRtcpListener(RtcpEventListener listener){  listeners.removeElement(listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.316 -0500",hash_original_method="E3BB57144A133C8AFDA0829EAE12FAAB",hash_generated_method="3BF3976AD13BB809A78001ADD263A2CE") public ReplacesHeader createReplacesHeader(String callId,String toTag,String fromTag) throws ParseException {  Replaces replaces=new Replaces();  replaces.setCallId(callId);  replaces.setFromTag(fromTag);  replaces.setToTag(toTag);  return replaces;}  }
class C{  public char charAt(int index){  return _toString.charAt(index);}  }
class C{  public static Value defaultValue(Session session,Value v,PreferredType optionalPreferredType,int isolateId){  v=safeValue(v,isolateId);  String typename=v.getTypeName();  int at=typename.indexOf('@');  if (at != -1)   typename=typename.substring(0,at);  if (optionalPreferredType == null) {    if (typename.equals("Date"))     optionalPreferredType=PreferredType.STRING; else     optionalPreferredType=PreferredType.NUMBER;  }  if (optionalPreferredType == PreferredType.NUMBER) {    Value result=callValueOf(session,v,isolateId);    if (isPrimitive(result))     return result;    result=callToString(session,v,isolateId);    if (isPrimitive(result))     return result;    throw new RuntimeException(new PlayerFaultException(new ExceptionFault(ASTBuilder.getLocalizationManager().getLocalizedTextString("typeError"),false,null,isolateId)));  } else {    Value result=callToString(session,v,isolateId);    if (isPrimitive(result))     return result;    result=callValueOf(session,v,isolateId);    if (isPrimitive(result))     return result;    throw new RuntimeException(new PlayerFaultException(new ExceptionFault(ASTBuilder.getLocalizationManager().getLocalizedTextString("typeError"),false,null,isolateId)));  }}  }
class C{  public SortField(String field,FieldComparatorSource comparator){  initFieldType(field,Type.CUSTOM);  this.comparatorSource=comparator;}  }
class C{  public GameNewActionEvent(Object source,EntityAction action){  super(source);  this.action=action;}  }
class C{  public static EnumFacing rotateDirection(EnumFacing dir,Quaternion rot,Iterable<EnumFacing> allow){  Vec3d v=fromDirection(dir);  rot.applyRotation(v);  EnumFacing best=null;  double bestDot=Double.POSITIVE_INFINITY;  for (  EnumFacing fd : allow) {    Vec3d f=fromDirection(fd);    rot.applyRotation(f);    double dot=v.dotProduct(f);    if (dot < bestDot) {      bestDot=dot;      best=fd;    }  }  return best;}  }
class C{  public ReadWriteMultipleResponse(int count){  super();  setFunctionCode(Modbus.READ_WRITE_MULTIPLE);  setDataLength(count * 2 + 1);  registers=new InputRegister[count];  byteCount=count * 2;}  }
class C{  public CharSeq concat(String another){  return new CharSeq(str + another);}  }
class C{  public PurifyParamsEditor(){}  }
class C{  public APPlatformException(List<LocalizedText> messages,Throwable cause){  super(getDefaultOrFirst(messages),cause);  this.messages=messages;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.080 -0500",hash_original_method="5F9B58135FF863A8E24F4B2AD9DF48BE",hash_generated_method="E3DD63383478888733F50795F38A2121") private String quotedAV() throws IOException {  pos++;  beg=pos;  end=beg;  while (true) {    if (pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }    if (chars[pos] == '"') {      pos++;      break;    } else     if (chars[pos] == '\\') {      chars[end]=getEscaped();    } else {      chars[end]=chars[pos];    }    pos++;    end++;  }  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  return new String(chars,beg,end - beg);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMultilineComment_();}  }
class C{  public String makeAlternator(String name,String alt1,String alt2,String alt3,String alt4){  String[] alternates={alt1,alt2,alt3,alt4};  context.put(name,new VelocityAlternator(alternates));  return "";}  }
class C{  @Override public String toString(){  return "Regression-RVM";}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:02.111 -0500",hash_original_method="3FE28D69AE0A8005556F51C699865935",hash_generated_method="55E4F634A2EDA6DFDC26144D997CFC2C") public String chooseEngineServerAlias(String keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  public Iterable<Node<Label>> reachableNodes(){  final Iterator<Arc<Label>> arcIterator=outgoingArcs.iterator();  return null;}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public InterruptedIOException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public Entry(float val,int xIndex){  mVal=val;  mXIndex=xIndex;}  }
class C{  public LevelSet(){  this.firstLevelDelta=0;  this.tileWidth=0;  this.tileHeight=0;  this.levels=new Level[0];}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  view.setRotationX(baseRotation);  view.setTranslationY(view.getHeight() / 3);  view.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public boolean isSystemSchema(String vendorName,String schemaName){  boolean result=false;  List<String> definedNames=m_interfaces.get(getDBVendorID(vendorName)).getSystemSchemas();  if (definedNames == null || definedNames.size() == 0)   return false;  ArrayList<String> reservedNames=new ArrayList<String>();  for (  String name : definedNames) {    reservedNames.add(name.toUpperCase());  }  if (reservedNames.contains(schemaName.toUpperCase()))   result=true;  return result;}  }
class C{  public boolean isDrawValuesForWholeStackEnabled(){  return mDrawValuesForWholeStack;}  }
class C{  public static String toBase58WithChecksum(byte[] b){  byte[] cs=Hash.hash(b);  byte[] extended=new byte[b.length + 4];  System.arraycopy(b,0,extended,0,b.length);  System.arraycopy(cs,0,extended,b.length,4);  return toBase58(extended);}  }
class C{  public DimensionalComparator(){  this(2);}  }
class C{  public boolean onOptionsItemSelected(MenuItem item){  if (mParent != null) {    return mParent.onOptionsItemSelected(item);  }  return false;}  }
class C{  public T caseFunctionOrFieldAccessor(FunctionOrFieldAccessor object){  return null;}  }
class C{  static void injectTurbolinksBridge(final TurbolinksSession turbolinksSession,Context context,WebView webView){  try {    String jsCall=String.format(scriptInjectionFormat,TurbolinksHelper.getContentFromAssetFile(context,"js/turbolinks_bridge.js"));    runJavascriptRaw(context,webView,jsCall);  } catch (  IOException e) {    TurbolinksLog.e("Error injecting script file into webview: " + e.toString());  }}  }
class C{  public AABB(final AABB copy){  this(copy.lowerBound,copy.upperBound);}  }
class C{  public ColumnVector abs(){  return this.transform(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.859 -0500",hash_original_method="D92C5605473C5A0CC5D42CEA0CF2519F",hash_generated_method="BCD783C806CC805C067A2537640620F6") public TestRunner(PrintStream writer){  this(new ResultPrinter(writer));}  }
class C{  public int send(MembershipManager mgr,InternalDistributedMember[] destinations,DistributionMessage msg,long ackWaitThreshold,long ackSAThreshold) throws ConnectExceptions, NotSerializableException {  if (disconnected) {    if (logger.isDebugEnabled()) {      logger.debug("Returning from DirectChannel send because channel is disconnected: {}",msg);    }    return 0;  }  if (destinations == null) {    if (logger.isDebugEnabled()) {      logger.debug("Returning from DirectChannel send because null set passed in: {}",msg);    }    return 0;  }  if (destinations.length == 0) {    if (logger.isDebugEnabled()) {      logger.debug("Returning from DirectChannel send because empty destinations passed in {}",msg);    }    return 0;  }  msg.setSender(localAddr);  if (destinations.length == 1) {    return sendToOne(mgr,destinations,msg,ackWaitThreshold,ackSAThreshold);  } else {    return sendToMany(mgr,destinations,msg,ackWaitThreshold,ackSAThreshold);  }}  }
class C{  public static void fallocateIfSupported(FileDescriptor fd,long length) throws IOException {  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    LollipopSysdeps.fallocate(fd,length);  }}  }
class C{  public static long currentTimeMillis(){  wasTimeAccessed=true;  return currentTime;}  }
class C{  public static QuarkMetaResultSet create(String connectionId,int statementId,ResultSet resultSet){  return create(connectionId,statementId,resultSet,QuarkMetaImpl.UNLIMITED_COUNT);}  }
class C{  public Matrix4x3f billboardCylindrical(Vector3fc objPos,Vector3fc targetPos,Vector3fc up){  float dirX=targetPos.x() - objPos.x();  float dirY=targetPos.y() - objPos.y();  float dirZ=targetPos.z() - objPos.z();  float leftX=up.y() * dirZ - up.z() * dirY;  float leftY=up.z() * dirX - up.x() * dirZ;  float leftZ=up.x() * dirY - up.y() * dirX;  float invLeftLen=1.0f / (float)Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLen;  leftY*=invLeftLen;  leftZ*=invLeftLen;  dirX=leftY * up.z() - leftZ * up.y();  dirY=leftZ * up.x() - leftX * up.z();  dirZ=leftX * up.y() - leftY * up.x();  float invDirLen=1.0f / (float)Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  dirX*=invDirLen;  dirY*=invDirLen;  dirZ*=invDirLen;  m00=leftX;  m01=leftY;  m02=leftZ;  m10=up.x();  m11=up.y();  m12=up.z();  m20=dirX;  m21=dirY;  m22=dirZ;  m30=objPos.x();  m31=objPos.y();  m32=objPos.z();  properties=0;  return this;}  }
class C{  private static boolean regionMatches(final CharSequence cs,final boolean ignoreCase,final int thisStart,final CharSequence substring,final int start,final int length){  return ((String)cs).regionMatches(ignoreCase,thisStart,(String)substring,start,length);}  }
class C{  public void test_DivideBigDecimalRoundingExc(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.UNNECESSARY;  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  try {    aNumber.divide(bNumber,rm);    fail("ArithmeticException is not thrown for RoundingMode.UNNECESSARY divider");  } catch (  java.lang.ArithmeticException ae) {  }  try {    bNumber=new BigDecimal(0);    aNumber.divide(bNumber,rm);    fail("ArithmeticException is not thrown for zero divider");  } catch (  java.lang.ArithmeticException ae) {  }}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void removeAllRats(){  final int sz=rats.size();  int i=0;  while (rats.size() != 0) {    try {      final Creature rat=rats.get(0);      rat.stopAttack();      rat.clearDropItemList();      rat.getZone().remove(rat);      rats.remove(0);      i++;    } catch (    IndexOutOfBoundsException ioobe) {      logger.error("removeAllRats IndexOutOfBoundException at " + Integer.toString(i) + " position. Total "+ Integer.toString(sz)+ " elements.",ioobe);    }  }}  }
class C{  public boolean isFullRevision(){  if (this.parts.size() == 1) {    DiffPart p=this.parts.get(0);    if (p.getAction() == DiffAction.FULL_REVISION_UNCOMPRESSED) {      return true;    }  }  return false;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzLexicalState=YYINITIAL;}  }
class C{  static String format(String key,String argument){  return format(key,new Object[]{argument});}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void drag(double dx,double dy){  if (hikeMode) {    workVec.set(-dx,-dy,0);    workRot.fromAngleNormalAxis(azimuth,Vector3.UNIT_Z);    workRot.applyPost(workVec,workVec);    workVec.multiplyLocal(zOffset);  } else {    workVec.set(-dx,-dy,0);    workRot.fromAngleNormalAxis(azimuth,Vector3.NEG_UNIT_Z);    workRot.applyPost(workVec,workVec);    workVec.multiplyLocal(camera.getPixelSizeAt(camera.getLookAt(),true));  }  translate(workVec);}  }
class C{  public PersistedServiceJob(DispatchContext dctx,GenericValue jobValue,GenericRequester req){  super(dctx,jobValue.getString("jobId"),jobValue.getString("jobName"),null,null,req);  this.delegator=dctx.getDelegator();  this.jobValue=jobValue;  Timestamp storedDate=jobValue.getTimestamp("runTime");  this.startTime=storedDate.getTime();  this.maxRetry=jobValue.get("maxRetry") != null ? jobValue.getLong("maxRetry").longValue() : -1;  Long retryCount=jobValue.getLong("currentRetryCount");  if (retryCount != null) {    this.currentRetryCount=retryCount.longValue();  } else {    this.currentRetryCount=getRetries(this.delegator);  }}  }
class C{  public static Container encloseRightBottom(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.RIGHT,Component.BOTTOM),cmps);}  }
class C{  private void updateSnackbar(int selectedPage){  View snackbar=findViewById(R.id.snackbar);switch (selectedPage) {case MainPagerAdapter.SHARED_POS:    snackbar.setVisibility(View.VISIBLE);  break;case MainPagerAdapter.ALL_POS:case MainPagerAdapter.FAVORITES_POS:default :snackbar.setVisibility(View.GONE);break;}}  }
class C{  public boolean attempt(Word old,Word val){  return SimulatedMemory.exchangeWord(this,old.value,val.value);}  }
class C{  public void readPointFile(String inputFile,String fieldName){  int fieldNum=0;  WhiteboxRasterBase.DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  boolean useRecID=false;  ShapeFile input=null;  try {    input=new ShapeFile(inputFile);  } catch (  IOException ex) {    System.out.println(ex.getMessage().toString());    Logger.getLogger(Kriging.class.getName()).log(Level.SEVERE,null,ex);  }  if (input.getShapeType() != ShapeType.POINT && input.getShapeType() != ShapeType.POINTZ && input.getShapeType() != ShapeType.POINTM && input.getShapeType() != ShapeType.MULTIPOINT && input.getShapeType() != ShapeType.MULTIPOINTZ && input.getShapeType() != ShapeType.MULTIPOINTM) {    JOptionPane.showMessageDialog(null,"The input shapefile must be of a 'point' data type.");    return;  }  AttributeTable reader=input.getAttributeTable();  int numberOfFields=reader.getFieldCount();  for (int i=0; i < numberOfFields; i++) {    DBFField field=reader.getField(i);    if (field.getName().equals(fieldName)) {      fieldNum=i;      if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {        if (field.getDecimalCount() == 0) {          dataType=WhiteboxRasterBase.DataType.INTEGER;        } else {          dataType=WhiteboxRasterBase.DataType.FLOAT;        }      } else {        useRecID=true;      }    }  }  if (fieldNum < 0) {    useRecID=true;  }  Object[] data=null;  double[][] geometry;  points=new ArrayList<>();  for (  ShapeFileRecord record : input.records) {    try {      data=reader.nextRecord();    } catch (    DBFException ex) {      Logger.getLogger(Kriging.class.getName()).log(Level.SEVERE,null,ex);    }    geometry=getXYFromShapefileRecord(record);    for (int i=0; i < geometry.length; i++) {      KrigingPoint p=new KrigingPoint(geometry[i][0],geometry[i][1],Double.valueOf(data[fieldNum].toString()));      points.add(p);    }  }}  }
class C{  protected void updateMu(){  mu=SIGMA.times(PHI_t.times(new Matrix(t)));  mu.timesEquals(beta);}  }
class C{  public boolean isEmpty(){  return head == null;}  }
class C{  public static Sampler WRAP_LINEAR_MIP_LINEAR(RenderScript rs){  if (rs.mSampler_WRAP_LINEAR_MIP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR_MIP_LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.WRAP);    b.setWrapT(Value.WRAP);    rs.mSampler_WRAP_LINEAR_MIP_LINEAR=b.create();  }  return rs.mSampler_WRAP_LINEAR_MIP_LINEAR;}  }
class C{  public void calculateTrendAndArrow(MedtronicSensorRecord record,CircleList<Record> list){  String trend="Not Calculated";  String trendA="--X";  Float diff=getGlucoseDifferentialIn(3,list);  if (diff != null) {    diff/=5f;    diff*=0.0555f;    int trendArrow=0;    if (diff >= -0.06f && diff <= 0.06f)     trendArrow=4; else     if ((diff > 0.06f) && (diff <= 0.11f)) {      trendArrow=3;    } else     if ((diff < -0.06f) && (diff >= -0.11f)) {      trendArrow=5;    } else     if ((diff > 0.11f) && (diff <= 0.17f)) {      trendArrow=2;    } else     if ((diff < -0.11f) && (diff >= -0.17f)) {      trendArrow=6;    } else     if ((diff > 0.17f)) {      trendArrow=1;    } else     if ((diff < -0.17f)) {      trendArrow=7;    } else {      trendArrow=0;    }switch (trendArrow) {case (0):      trendA="\u2194";    trend="NONE";  break;case (1):trendA="\u21C8";trend="DoubleUp";break;case (2):trendA="\u2191";trend="SingleUp";break;case (3):trendA="\u2197";trend="FortyFiveUp";break;case (4):trendA="\u2192";trend="Flat";break;case (5):trendA="\u2198";trend="FortyFiveDown";break;case (6):trendA="\u2193";trend="SingleDown";break;case (7):trendA="\u21CA";trend="DoubleDown";break;case (8):trendA="\u2194";trend="NOT COMPUTABLE";break;case (9):trendA="\u2194";trend="RATE OUT OF RANGE";break;}} else {trendA="\u2194";trend="RATE OUT OF RANGE";}record.trend=trend;record.trendArrow=trendA;}  }
class C{  private boolean isSessionCommitted(int sessionId,int logId,int pos){  SessionState state=sessionStates.get(sessionId);  if (state == null) {    return false;  }  return state.isCommitted(logId,pos);}  }
class C{  private static BasicBlock _lookupswitchHelper(Instruction switchInstr,RegisterOperand reg,BasicBlock defaultBB,IR ir,BasicBlock curBlock,int low,int high,int min,int max){  if (VM.VerifyAssertions) {    VM._assert(low <= high,"broken control logic in _lookupswitchHelper");  }  int middle=(low + high) >> 1;  float lessProb=0.0f;  float greaterProb=0.0f;  float equalProb=0.0f;  float sum=0.0f;  for (int i=low; i < middle; i++) {    lessProb+=LookupSwitch.getBranchProfile(switchInstr,i).takenProbability;  }  for (int i=middle + 1; i <= high; i++) {    greaterProb+=LookupSwitch.getBranchProfile(switchInstr,i).takenProbability;  }  equalProb=LookupSwitch.getBranchProfile(switchInstr,middle).takenProbability;  if (low == 0) {    lessProb+=LookupSwitch.getDefaultBranchProfile(switchInstr).takenProbability;  }  sum=lessProb + equalProb + greaterProb;  if (sum > 0) {    lessProb/=sum;    equalProb/=sum;    greaterProb/=sum;  }  IntConstantOperand val=LookupSwitch.getClearMatch(switchInstr,middle);  int value=val.value;  BasicBlock greaterBlock=middle == high ? defaultBB : curBlock.createSubBlock(0,ir);  BasicBlock lesserBlock=low == middle ? defaultBB : curBlock.createSubBlock(0,ir);  BranchOperand branch=LookupSwitch.getClearTarget(switchInstr,middle);  BasicBlock branchBB=branch.target.getBasicBlock();  curBlock.insertOut(branchBB);  if (low != high) {    if (value == min) {      curBlock.appendInstruction(IfCmp.create(INT_IFCMP,ir.regpool.makeTempValidation(),reg.copy(),val,ConditionOperand.EQUAL(),branchBB.makeJumpTarget(),new BranchProfileOperand(equalProb)));    } else {      float secondIfProb=0.0f;      sum=equalProb + greaterProb;      if (sum > 0) {        secondIfProb=equalProb / sum;      }      curBlock.appendInstruction(IfCmp2.create(INT_IFCMP2,ir.regpool.makeTempValidation(),reg.copy(),val,ConditionOperand.LESS(),lesserBlock.makeJumpTarget(),new BranchProfileOperand(lessProb),ConditionOperand.EQUAL(),branchBB.makeJumpTarget(),new BranchProfileOperand(secondIfProb)));      curBlock.insertOut(lesserBlock);    }  } else {    if (min == max) {      curBlock.appendInstruction(Goto.create(GOTO,branch));      curBlock.insertOut(branchBB);    } else {      curBlock.appendInstruction(IfCmp.create(INT_IFCMP,ir.regpool.makeTempValidation(),reg.copy(),val,ConditionOperand.EQUAL(),branchBB.makeJumpTarget(),new BranchProfileOperand(equalProb)));      BasicBlock newBlock=curBlock.createSubBlock(0,ir);      curBlock.insertOut(newBlock);      ir.cfg.linkInCodeOrder(curBlock,newBlock);      curBlock=newBlock;      curBlock.appendInstruction(defaultBB.makeGOTO());      curBlock.insertOut(defaultBB);    }  }  if (middle < high) {    curBlock.insertOut(greaterBlock);    ir.cfg.linkInCodeOrder(curBlock,greaterBlock);    curBlock=_lookupswitchHelper(switchInstr,reg,defaultBB,ir,greaterBlock,middle + 1,high,value + 1,max);  }  if (low < middle) {    ir.cfg.linkInCodeOrder(curBlock,lesserBlock);    curBlock=_lookupswitchHelper(switchInstr,reg,defaultBB,ir,lesserBlock,low,middle - 1,min,value - 1);  }  return curBlock;}  }
class C{  private void configure(@Nullable Logger initImpl){  if (initImpl != null)   impl=initImpl;  if (inited)   return;synchronized (mux) {    if (inited)     return;    if (isConfigured()) {      boolean consoleHndFound=findHandler(impl,ConsoleHandler.class) != null;      quiet0=!consoleHndFound;      inited=true;      return;    }    defaultConfiguration();    boolean quiet=Boolean.valueOf(System.getProperty(IGNITE_QUIET,"true"));    boolean useConsoleAppender=Boolean.valueOf(System.getProperty(IGNITE_CONSOLE_APPENDER,"true"));    if (useConsoleAppender) {      ConsoleHandler consoleHnd=findHandler(impl,ConsoleHandler.class);      if (consoleHnd != null)       consoleHnd.setLevel(quiet ? SEVERE : INFO); else       System.err.println("Console logging handler is not configured.");    } else {      Handler[] handlers=Logger.getLogger("").getHandlers();      if (!F.isEmpty(handlers)) {        for (        Handler h : handlers) {          if (h instanceof ConsoleHandler)           impl.removeHandler(h);        }      }    }    quiet0=quiet;    inited=true;  }}  }
class C{  public static MPPOrderCost createOrderCostDimension(int PP_Order_ID,MCost cost){  MPPOrderCost orderCostDimension=MPPOrderCost.getByCostDimension(PP_Order_ID,cost);  if (orderCostDimension == null) {    orderCostDimension=new MPPOrderCost(cost,PP_Order_ID,cost.get_TrxName());  } else {    orderCostDimension.setCostDimension(cost);  }  orderCostDimension.saveEx();  return orderCostDimension;}  }
class C{  private void parseDom(OpenElementStack out) throws ParseException {  while (!tokens.isEmpty()) {    Token<HtmlTokenType> t=tokens.pop();switch (t.type) {case TAGBEGIN:{        List<AttrStub> attribs;        Token<HtmlTokenType> end;        if (isClose(t)) {          attribs=Collections.emptyList();          while (true) {            end=tokens.pop();            if (end.type == HtmlTokenType.TAGEND) {              break;            }            if (end.type != HtmlTokenType.IGNORABLE) {              mq.addMessage(DomParserMessageType.IGNORING_TOKEN,end.pos,MessagePart.Factory.valueOf(end.text));            }          }        } else {          attribs=Lists.newArrayList();          end=parseTagAttributes(t.pos,attribs,out);        }        try {          out.processTag(t,end,attribs);        } catch (        IllegalDocumentStateException ex) {          throw new ParseException(ex.getCajaMessage(),ex);        }      }    return;case CDATA:case TEXT:case UNESCAPED:  out.processText(t);return;case COMMENT:out.processComment(t);return;case IE_DR_COMMENT_BEGIN:case IE_DR_COMMENT_END:out.processComment(t);if (!wantsComments()) {mq.addMessage(DomParserMessageType.NOT_IGNORING_DOWNLEVEL_REVEALED_COMMENT,t.pos,MessagePart.Factory.valueOf(t.text));}break;default :throw new ParseException(new Message(MessageType.MALFORMED_XHTML,t.pos,MessagePart.Factory.valueOf(t.text)));}}}  }
class C{  @Deprecated public IconDrawerItem withTintSelectedIcon(boolean iconTinted){  return withIconTintingEnabled(iconTinted);}  }
class C{  @Benchmark public long test11_UsingJava8StreamApi2() throws IOException {  return map.entrySet().stream().mapToLong(null).sum();}  }
class C{  public static void closeDatabase(final Window parent,final IDatabase database){  if (!database.close()) {    CMessageBox.showInformation(parent,"Could not close the selected database because views or other elements from the database are still open.");  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PARAMETERIZED_TYPE__PARAMETER:    getParameter().clear();  return;}super.eUnset(featureID);}  }
class C{  private Colors(){  throw new Error("Do not need instantiate!");}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataNotificationRegistrationTesting(String namespace,List<String> notificationEventTypes,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,List<String> fileTypes,List<String> storageNames,List<String> businessObjectDataStatuses,List<JobAction> jobActions){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(namespace);  if (namespaceEntity == null) {    namespaceDaoTestHelper.createNamespaceEntity(namespace);  }  if (!CollectionUtils.isEmpty(notificationEventTypes)) {    for (    String notificationEventType : notificationEventTypes) {      NotificationEventTypeEntity notificationEventTypeEntity=notificationEventTypeDao.getNotificationEventTypeByCode(notificationEventType);      if (notificationEventTypeEntity == null) {        notificationRegistrationDaoTestHelper.createNotificationEventTypeEntity(notificationEventType);      }    }  }  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_DESCRIPTION);  }  if (!CollectionUtils.isEmpty(fileTypes)) {    for (    String businessObjectFormatFileType : fileTypes) {      fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);    }  }  if (!CollectionUtils.isEmpty(storageNames)) {    for (    String storageName : storageNames) {      storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);    }  }  if (!CollectionUtils.isEmpty(businessObjectDataStatuses)) {    for (    String businessObjectDataStatus : businessObjectDataStatuses) {      BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(businessObjectDataStatus);      if (businessObjectDataStatusEntity == null) {        businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(businessObjectDataStatus);      }    }  }  if (!CollectionUtils.isEmpty(jobActions)) {    for (    JobAction jobAction : jobActions) {      jobDefinitionDaoTestHelper.createJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName(),String.format("Description of \"%s.%s\" job definition.",jobAction.getNamespace(),jobAction.getJobName()),String.format("%s.%s.%s",jobAction.getNamespace(),jobAction.getJobName(),AbstractServiceTest.ACTIVITI_ID));    }  }}  }
class C{  public void refresh(){  if (getComponent() != null) {    getComponent().removeAll();    int sepWidth=Math.max(2,createSeparator().getWidth());    int remainingWidth=BAR.getWidth();    if (remainingWidth <= 0)     remainingWidth=ApplicationSettings.APP_WIDTH.getValue();    remainingWidth-=sepWidth;    remainingWidth-=GUIConstants.SEPARATOR / 2;    if (_donationButtons != null) {      remainingWidth-=_donationButtons.getWidth();      remainingWidth-=GUIConstants.SEPARATOR;    }    int indicatorWidth=_centerComponent.getWidth();    remainingWidth-=indicatorWidth;    GridBagConstraints gbc=new GridBagConstraints();    gbc.insets=new Insets(0,0,0,0);    gbc.weightx=0;    gbc.fill=GridBagConstraints.NONE;    gbc.anchor=GridBagConstraints.CENTER;    gbc.gridx=GridBagConstraints.RELATIVE;    if (StatusBarSettings.CONNECTION_QUALITY_DISPLAY_ENABLED.getValue()) {      remainingWidth=addStatusIndicator(_connectionQualityMeter,sepWidth,remainingWidth,gbc);    }    if (StatusBarSettings.VPN_DISPLAY_ENABLED.getValue()) {      _vpnStatus.refresh();      remainingWidth=addStatusIndicator(_vpnStatus,sepWidth,remainingWidth,gbc);    }    if (getLanguageSetting().getValue() && remainingWidth > indicatorWidth) {      remainingWidth=addStatusIndicator(_languageButton,sepWidth,remainingWidth,gbc);    }    if (StatusBarSettings.FIREWALL_DISPLAY_ENABLED.getValue()) {      remainingWidth=addStatusIndicator(_firewallStatus,sepWidth,remainingWidth,gbc);      updateFirewall();    }    indicatorWidth=GUIConstants.SEPARATOR + GUIConstants.SEPARATOR / 2 + sepWidth + Math.max((int)_bandwidthUsageDown.getMinimumSize().getWidth(),_bandwidthUsageDown.getWidth()) + Math.max((int)_bandwidthUsageUp.getMinimumSize().getWidth(),_bandwidthUsageUp.getWidth());    if (StatusBarSettings.BANDWIDTH_DISPLAY_ENABLED.getValue() && remainingWidth > indicatorWidth) {      BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR / 2),gbc);      BAR.add(_bandwidthUsageDown,gbc);      BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR),gbc);      BAR.add(_bandwidthUsageUp,gbc);      BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR / 2),gbc);      BAR.add(createSeparator(),gbc);    }    gbc=new GridBagConstraints();    gbc.gridx=GridBagConstraints.RELATIVE;    BAR.add(seedingStatusButton,gbc);    BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR / 2),gbc);    BAR.add(createSeparator(),gbc);    updateSeedingStatus();    gbc=new GridBagConstraints();    gbc.gridx=GridBagConstraints.RELATIVE;    BAR.add(_facebookButton,gbc);    BAR.add(_twitterButton,gbc);    BAR.add(_googlePlusButton,gbc);    BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR / 2),gbc);    gbc.weightx=1;    BAR.add(_centerPanel,gbc);    gbc.weightx=0;    BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR / 2),gbc);    if (_donationButtons != null && StatusBarSettings.DONATION_BUTTONS_DISPLAY_ENABLED.getValue()) {      BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR / 2),gbc);      BAR.add(_donationButtons,gbc);      BAR.add(Box.createHorizontalStrut(10));      BAR.add(Box.createHorizontalStrut(GUIConstants.SEPARATOR),gbc);    }    try {      BAR.validate();    } catch (    Throwable ignored) {    }    BAR.repaint();  }}  }
class C{  public double[] applyRelativeInverse(double[] v){  if (inv == null) {    updateInverse();  }  return unhomogeneRelativeVector(times(inv,homogeneRelativeVector(v)));}  }
class C{  protected QueryParser createQueryParser(String fieldName,Analyzer analyzer){  return new QueryParser(fieldName,analyzer);}  }
class C{  private int[] intPermutation(int length){  int[] aux=new int[length];  int[] result=new int[length];  for (int i=0; i < length; i++) {    result[i]=i;    aux[i]=Randomness.nextInt(0,length - 1);  }  for (int i=0; i < length; i++) {    for (int j=i + 1; j < length; j++) {      if (aux[i] > aux[j]) {        int tmp;        tmp=aux[i];        aux[i]=aux[j];        aux[j]=tmp;        tmp=result[i];        result[i]=result[j];        result[j]=tmp;      }    }  }  return result;}  }
class C{  public void addListener(final IPerspectiveModelListener listener){  m_listeners.addListener(listener);}  }
class C{  public BytesReference internalSourceRef(){  return sourceAsBytes;}  }
class C{  public static SolrDocument buildDocument(MetricTimeSeries timeSeries,FunctionValueMap functionValues,String key,boolean dataShouldReturned,boolean dataAsJson){  SolrDocument doc=convert(timeSeries,dataShouldReturned,dataAsJson);  doc.put(ChronixQueryParams.JOIN_KEY,key);  if (functionValues != null) {    addAnalysesAndResults(functionValues,doc);  }  return doc;}  }
class C{  protected boolean connectInput(NeuralConnection i,int n){  if (!super.connectInput(i,n)) {    return false;  }  m_weights[m_numInputs]=m_random.nextDouble() * .1 - .05;  m_changeInWeights[m_numInputs]=0;  return true;}  }
class C{  public boolean isAllocated(){  Object oo=get_Value(COLUMNNAME_IsAllocated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void flushAdditionalObjectsOnPage(final int page) throws PdfException {  if (page == getPageNumber()) {    fileAccess.setLastPageDecoded(-page);    decodePage(page);  }}  }
class C{  public void generateStreetTransfers(TransportNetwork transportNetwork,ProfileRequest request){  Map<Integer,List<Transfer>> transfersWithSameStart=transferToOption.keySet().stream().collect(Collectors.groupingBy(null));  for (  Map.Entry<Integer,List<Transfer>> entry : transfersWithSameStart.entrySet()) {    StreetRouter streetRouter=new StreetRouter(transportNetwork.streetLayer);    streetRouter.streetMode=StreetMode.WALK;    streetRouter.profileRequest=request;    streetRouter.distanceLimitMeters=TransitLayer.TRANSFER_DISTANCE_LIMIT;    int stopIndex=transportNetwork.transitLayer.streetVertexForStop.get(entry.getKey());    streetRouter.setOrigin(stopIndex);    streetRouter.route();    for (    Transfer transfer : entry.getValue()) {      int endIndex=transportNetwork.transitLayer.streetVertexForStop.get(transfer.boardStop);      StreetRouter.State lastState=streetRouter.getStateAtVertex(endIndex);      if (lastState != null) {        StreetPath streetPath=new StreetPath(lastState,transportNetwork);        StreetSegment streetSegment=new StreetSegment(streetPath,LegMode.WALK,transportNetwork.streetLayer);        for (        ProfileOption profileOption : transferToOption.get(transfer)) {          profileOption.addMiddle(streetSegment,transfer);        }      } else {        LOG.warn("Street transfer: {} not found in streetlayer",transfer);      }    }  }}  }
class C{  private void addFamilySet(){  if (log.isDebugEnabled()) {    log.debug("addFamilySet: type= \"" + _type + "\", family= \""+ _family+ "\" key= "+ _key);  }  setVisible(false);  IndicatorTOItemPanel parent=(IndicatorTOItemPanel)_parent;  if (parent._iconGroupsMap.size() < IndicatorTOItemPanel.STATUS_KEYS.length) {    Set<String> keys=ItemPalette.getLevel4Family(_type,_family).keySet();    ArrayList<String> options=new ArrayList<String>();    for (int i=0; i < IndicatorTOItemPanel.STATUS_KEYS.length; i++) {      if (!keys.contains(IndicatorTOItemPanel.STATUS_KEYS[i])) {        options.add(IndicatorTOItemPanel.STATUS_KEYS[i]);      }    }    Object[] selections=options.toArray();    String key=(String)JOptionPane.showInputDialog(_parent._paletteFrame,Bundle.getMessage("PickStatus"),Bundle.getMessage("questionTitle"),JOptionPane.QUESTION_MESSAGE,null,selections,selections[0]);    if (key != null) {      _key=key;      createNewStatusSet();    }  } else {    JOptionPane.showMessageDialog(_parent._paletteFrame,Bundle.getMessage("AllStatus"),Bundle.getMessage("infoTitle"),JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  public static String readConfigProperty(String property){  Properties prop=new Properties();  InputStream input=null;  String propertyVal="";  try {    input=Utils.class.getResourceAsStream("/testConfig.properties");    prop.load(input);    propertyVal=prop.getProperty(property);  } catch (  Exception ex) {    logger.error("ERROR: Unable to read property",ex);  }  return propertyVal;}  }
class C{  public String longestMatch(String input){  TrieNode node=root;  String result=null;  for (int i=0; i < input.length(); i++) {    node=node.getChild(input.charAt(i));    if (node == null)     break;    if (node.isTerminal())     result=input.substring(0,i + 1);  }  return result;}  }
class C{  boolean foldConstants(IR ir){  boolean recomputeRegList=false;  boolean needDeadCodeElimination=false;  for (Instruction s=ir.firstInstructionInCodeOrder(); s != null; s=s.nextInstructionInCodeOrder()) {    Simplifier.DefUseEffect code=Simplifier.simplify(ir.isHIR(),ir.regpool,ir.options,s);    boolean trapReduced=code == Simplifier.DefUseEffect.TRAP_REDUCED;    needDeadCodeElimination|=trapReduced;    recomputeRegList|=(code == Simplifier.DefUseEffect.MOVE_REDUCED || trapReduced || code == Simplifier.DefUseEffect.REDUCED);  }  if (recomputeRegList) {    DefUse.computeDU(ir);    DefUse.recomputeSSA(ir);  }  return needDeadCodeElimination;}  }
class C{  public static int compressTime(long date){  Long lowResolutionDate=new Long((date - TIME_ZERO) / MS_IN_SEC);  return lowResolutionDate.intValue();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.IMPORT_SPECIFIER;}  }
class C{  public SamRecordException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      List<URI> volUris=getTaskCompleter().getIds();      List<String> volsInPool=new ArrayList<String>();      for (      URI voluri : volUris) {        volsInPool.add(voluri.toString());      }      VNXeJob.updateStoragePoolCapacity(dbClient,vnxeApiClient,storagePool,volsInPool);    }    Calendar now=Calendar.getInstance();    int volumeCount=0;    if (_status == JobStatus.SUCCESS) {      if (!isConsistencyGroup) {        for (        String jobId : getJobIds()) {          VNXeCommandJob vnxeJob=vnxeApiClient.getJob(jobId);          ParametersOut output=vnxeJob.getParametersOut();          String nativeId=null;          URI volumeId=getTaskCompleter().getId(volumeCount);          if (output != null) {            VNXeBase storageResource=output.getStorageResource();            if (storageResource != null) {              nativeId=storageResource.getId();            }          }          processVolume(vnxeApiClient,nativeId,volumeId,dbClient,logMsgBuilder,now);          volumeCount++;        }      } else {        List<URI> volIds=getTaskCompleter().getIds();        processVolumesinConsistencyGroup(vnxeApiClient,volIds,dbClient,logMsgBuilder,now);      }    } else     if (_status == JobStatus.FAILED) {      List<URI> volIds=getTaskCompleter().getIds();      for (      URI volId : volIds) {        Volume volume=dbClient.queryObject(Volume.class,volId);        volume.setInactive(true);        dbClient.updateObject(volume);        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Task %s failed to create volume: %s",opId,volId));      }    }    _logger.info(logMsgBuilder.toString());  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeCreateVolumesJob",e);    setErrorStatus("Encountered an internal error during volume create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public char last(){  if (start == end) {    return DONE;  }  offset=end - 1;  return string.charAt(offset);}  }
class C{  protected void printPI() throws TranscoderException, XMLException, IOException {  char[] target=getCurrentValue();  type=scanner.next();  char[] space={};  if (type == LexicalUnits.S) {    space=getCurrentValue();    type=scanner.next();  }  if (type != LexicalUnits.PI_DATA) {    throw fatalError("pi.data",null);  }  char[] data=getCurrentValue();  type=scanner.next();  if (type != LexicalUnits.PI_END) {    throw fatalError("pi.end",null);  }  output.printPI(target,space,data);  type=scanner.next();}  }
class C{  public String processAndMerge(final List<Resource> resources,final boolean minimize) throws IOException {  return processAndMerge(resources,ProcessingCriteria.create(ProcessingType.ALL,minimize));}  }
class C{  public static void writeJSONString(Collection collection,Writer out) throws IOException {  if (collection == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=collection.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  protected boolean acceptMethod(char method){switch (method) {case Message.STUN_METHOD_BINDING:case 0x0000:case 0x0002:    return true;default :  return false;}}  }
class C{  public static Typeface caviarDreamsBoldItalic(Context context){  return FontSourceProcessor.process(R.raw.caviardreams_bolditalic,context);}  }
class C{  public void throwRuntime(String reason){  throwRuntime(reason,Optional.empty());}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  @Deprecated public URI(final URI base,final String relative) throws URIException {  this(base,new URI(relative));}  }
class C{  @Override public void send(HandshakeIODataStream out){  if (signedHash.length != 0) {    out.writeUint16(signedHash.length);    out.write(signedHash);  }}  }
class C{  public void rollback() throws SortServiceProviderException {  env.rollback(this);}  }
class C{  public boolean hasSplit(boolean[] split){  for (int i=0; i < splitCount; i++) {    if (SplitUtils.isSame(split,splits[i]))     return true;  }  return false;}  }
class C{  public double variance(){  return (alpha * beta) / ((alpha + beta) * (alpha + beta) * (alpha + beta + 1));}  }
class C{  private void updateTickLabelForLinearScale(int length){  double min=scale.getRange().getLower();  double max=scale.getRange().getUpper();  BigDecimal gridStepBigDecimal=getGridStep(length,min,max);  gridStepInPixel=(int)(length * gridStepBigDecimal.doubleValue() / (max - min));  updateTickLabelForLinearScale(length,gridStepBigDecimal);}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (comparator.compare(list.get(maxIndex),list.get(rightChildIndex)) < 0) {        maxIndex=rightChildIndex;      }    }    if (comparator.compare(list.get(currentIndex),list.get(maxIndex)) < 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public void fine(CharSequence message,Throwable e){  log(Level.FINE,message,e);}  }
class C{  public void putInterpreterFactory(String language,InterpreterFactory factory){  factories.put(language,factory);}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public String chooseEngineServerAlias(String keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  static ReversePurgeLongHashMap deserializeFromStringArray(String[] tokens){  final int ignore=STR_PREAMBLE_TOKENS;  final int numActive=Integer.parseInt(tokens[ignore]);  final int length=Integer.parseInt(tokens[ignore + 1]);  final ReversePurgeLongHashMap hashMap=new ReversePurgeLongHashMap(length);  int j=2 + ignore;  for (int i=0; i < numActive; i++) {    long key=Long.parseLong(tokens[j++]);    long value=Long.parseLong(tokens[j++]);    hashMap.adjustOrPutValue(key,value);  }  return hashMap;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  @SuppressWarnings({"unchecked"}) private void processIsolatedModeTest(DeploymentMode depMode) throws Exception {  this.depMode=depMode;  try {    Ignite ignite1=startGrid(1);    Ignite ignite2=startGrid(2);    ClassLoader ldr1=new URLClassLoader(new URL[]{new URL(GridTestProperties.getProperty("p2p.uri.cls"))},getClass().getClassLoader());    ClassLoader ldr2=new URLClassLoader(new URL[]{new URL(GridTestProperties.getProperty("p2p.uri.cls"))},getClass().getClassLoader());    Class task1=ldr1.loadClass("org.apache.ignite.tests.p2p.P2PTestTaskExternalPath1");    Class task2=ldr2.loadClass("org.apache.ignite.tests.p2p.P2PTestTaskExternalPath1");    Integer res1=(Integer)ignite1.compute().execute(task1,ignite2.cluster().localNode().id());    Integer res2=(Integer)ignite2.compute().execute(task2,ignite1.cluster().localNode().id());    assert !res1.equals(res2);    assert !res1.equals(System.identityHashCode(ldr1));    assert !res2.equals(System.identityHashCode(ldr2));  }  finally {    stopGrid(1);    stopGrid(2);  }}  }
class C{  public void draw(){  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("draw start");  if (!sDrawPrepared) {    throw new RuntimeException("not prepared");  }  GLES20.glVertexAttribPointer(sTexCoordHandle,TEX_COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,TEX_VERTEX_STRIDE,mTexBuffer);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glVertexAttribPointer");  float[] mvp=sTempMVP;  Matrix.multiplyMM(mvp,0,GameSurfaceRenderer.mProjectionMatrix,0,mModelView,0);  GLES20.glUniformMatrix4fv(sMVPMatrixHandle,1,false,mvp,0);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glUniformMatrix4fv");  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glActiveTexture");  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mTextureDataHandle);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glBindTexture");  GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,VERTEX_COUNT);  if (GameSurfaceRenderer.EXTRA_CHECK)   Util.checkGlError("glDrawArrays");}  }
class C{  public static final boolean isBracket(char ch){  return ch <= '}' && (dataTable[ch] & BRACKET_MASK) > 0;}  }
class C{  private boolean installed(String file) throws DaemonException, IOException {  DaemonParameters parameters=new DaemonParameters();  parameters.setParameter("file",fileHandler.getName(file));  String response=invoke("installed",parameters);  if (response != null) {    response=response.trim();  }  return "OK - INSTALLED".equals(response);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static State fromValue(byte value){switch (value) {case 0:    return INIT;case 1:  return STARTED;case 2:return SUCCESS;case 3:return FAILURE;default :throw new IllegalArgumentException("No snapshot state for value [" + value + "]");}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.564 -0500",hash_original_method="458D6DD6719B8027CA3FE9134A58BF91",hash_generated_method="8DD64E9834DC70811B76533374F3E9D2") public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public void addAll(T... items){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.addAll(mOriginalValues,items);    } else {      Collections.addAll(mObjects,items);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public StandardErrorPrinter(final int level){  super(level,System.err);}  }
class C{  @Override public void deleteOneToOneChats(){  mImService.tryToDeleteOneToOneChats();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.407 -0500",hash_original_method="0A271D2A4C7890E9466C28EF447DC416",hash_generated_method="E1A375CD5D20AF529A55BF1855FAA640") public void putAll(ContentValues other){  mValues.putAll(other.mValues);}  }
class C{  public Pointer(int datasetIndex){  super(datasetIndex);  this.widthRadius=0.05;  this.fillPaint=Color.gray;  this.outlinePaint=Color.black;}  }
class C{  public void removeAllLineHighlights(){  if (lineHighlights != null) {    lineHighlights.clear();    textArea.repaint();  }}  }
class C{  public int[] readIntArray(){  FileInputStream fis=null;  try {    fis=new FileInputStream(file);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedInputStream bis=new BufferedInputStream(fis);  BinaryInputStream bs=new BinaryInputStream(bis,bigEndian);  return bs.readIntArray();}  }
class C{  private void computeTopAndBottomTab(){  computeTabsThatFitInComposite();  if (elements.length == 0) {    topVisibleIndex=0;    bottomVisibleIndex=0;  } else   if (tabsThatFitInComposite >= elements.length) {    topVisibleIndex=0;    bottomVisibleIndex=elements.length - 1;  } else   if (getSelectionIndex() == NONE) {    topVisibleIndex=0;    bottomVisibleIndex=tabsThatFitInComposite - 1;  } else   if (getSelectionIndex() + tabsThatFitInComposite > elements.length) {    bottomVisibleIndex=elements.length - 1;    topVisibleIndex=bottomVisibleIndex - tabsThatFitInComposite + 1;  } else {    topVisibleIndex=selectedElementIndex;    bottomVisibleIndex=selectedElementIndex + tabsThatFitInComposite - 1;  }  layoutTabs();}  }
class C{  public void initWeights(int d){  initWeights(d,m_H);}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("wildfly8x",WildFlyContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("wildfly9x",WildFlyContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("wildfly10x",WildFlyContainerCapability.class);}  }
class C{  public HalfBandFilter(float[] coefficients,float gain){  mCoefficients=coefficients;  mGain=gain;  mBufferSize=mCoefficients.length;  mBuffer=new float[mBufferSize];  generateIndexMap(mCoefficients.length);}  }
class C{  public static int value(String s){  return protocols.getValue(s);}  }
class C{  public IDataProcessStatus makeCopy(){  IDataProcessStatus copy=new DataProcessTaskStatus();  copy.setCubeName(this.cubeName);  copy.setDataloadstatusid(this.dataloadstatusid);  copy.setDesc(this.desc);  copy.setKey(this.key);  copy.setSchemaName(schemaName);  copy.setStatus(status);  return copy;}  }
class C{  @Override public SipRequest createSubscribe(SipDialogPath dialog,long expirePeriod) throws PayloadException {  try {    SipRequest subscribe=SipMessageFactory.createSubscribe(dialog,expirePeriod);    subscribe.addHeader(EventHeader.NAME,"presence");    subscribe.addHeader(AcceptHeader.NAME,"application/pidf+xml, application/rlmi+xml, multipart/related");    subscribe.addHeader(SupportedHeader.NAME,"eventlist");    return subscribe;  } catch (  ParseException e) {    throw new PayloadException("Failed to create subscribe request!",e);  }}  }
class C{  private static int med3(char x[],int a,int b,int c,CharComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public ClassNode redirect(){  if (redirect == null)   return this;  return redirect.redirect();}  }
class C{  public Boolean isD0On(){  if (isDigitalEnabled(0)) {    return isDigitalOn(0);  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element firstNode;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Attr setAttr;  Node setNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  firstNode=(Element)elementList.item(0);  domesticAttr=doc.createAttribute("domestic");  domesticAttr.setValue("Yes");  setAttr=firstNode.setAttributeNode(domesticAttr);  elementList=doc.getElementsByTagName("address");  testNode=elementList.item(2);  attributes=testNode.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(domesticAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public static void execute(final Runnable task,final long timeout) throws TimeoutException {  final Thread t=new Thread(task,"Timeout guard");  t.setDaemon(true);  execute(t,timeout);}  }
class C{  public boolean containsKey(Object key1,Object key2,Object key3,Object key4){  int hashCode=hash(key1,key2,key3,key4);  AbstractHashedMap.HashEntry entry=map.data[map.hashIndex(hashCode,map.data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3,key4)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  protected BindingPatternImpl(){  super();}  }
class C{  public SIPMessage parseSIPMessage(String msgString) throws ParseException {  if (msgString == null || msgString.length() == 0)   return null;  rawStringMessage=msgString;  int i=0;  try {    while (msgString.charAt(i) < 0x20)     i++;  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }catch (  StringIndexOutOfBoundsException ex) {    return null;  }  String currentLine=null;  String currentHeader=null;  boolean isFirstLine=true;  SIPMessage message=null;  do {    int lineStart=i;    try {      char c=msgString.charAt(i);      while (c != '\r' && c != '\n')       c=msgString.charAt(++i);    } catch (    ArrayIndexOutOfBoundsException e) {      break;    }catch (    StringIndexOutOfBoundsException ex) {      break;    }    currentLine=msgString.substring(lineStart,i);    currentLine=trimEndOfLine(currentLine);    if (currentLine.length() == 0) {      if (currentHeader != null) {        processHeader(currentHeader,message);      }    } else {      if (isFirstLine) {        message=processFirstLine(currentLine);      } else {        char firstChar=currentLine.charAt(0);        if (firstChar == '\t' || firstChar == ' ') {          if (currentHeader == null)           throw new ParseException("Bad header continuation.",0);          currentHeader+=currentLine.substring(1);        } else {          if (currentHeader != null) {            processHeader(currentHeader,message);          }          currentHeader=currentLine;        }      }    }    if (msgString.charAt(i) == '\r' && msgString.length() > i + 1 && msgString.charAt(i + 1) == '\n')     i++;    i++;    isFirstLine=false;  } while (currentLine.length() > 0);  message.setSize(i);  if (readBody && message.getContentLength() != null) {    if (message.getContentLength().getContentLength() != 0) {      String body=msgString.substring(i);      message.setMessageContent(body,this.strict,computeContentLengthFromMessage,message.getContentLength().getContentLength());    } else     if (!computeContentLengthFromMessage && message.getContentLength().getContentLength() == 0 && !msgString.endsWith("\r\n\r\n")) {      if (strict) {        throw new ParseException("Extraneous characters at the end of the message ",i);      }    }  }  return message;}  }
class C{  public IsotonicCalibration(BinaryScoreClassifier base,CalibrationMode mode){  super(base,mode);}  }
class C{  public <S>T manyToOne(T destination,final S source){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestination(destination,source);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  private double[] computeLocalUsingPreviousObservations(double[] source,double[] destination,boolean isPreviousObservations) throws Exception {  double[][] newDestNextPastSourceVectors;  if (isPreviousObservations) {    newDestNextPastSourceVectors=destNextPastSourceVectors;  } else {    newDestNextPastSourceVectors=makeJointVectorForNextPastSource(destination,source);  }  double te=0.0;  int numLocalObservations=newDestNextPastSourceVectors.length;  double[] localTE;  int offset=0;  if (isPreviousObservations && addedMoreThanOneObservationSet) {    localTE=new double[numLocalObservations];    offset=0;  } else {    localTE=new double[numLocalObservations + k];    offset=k;  }  for (int b=0; b < numLocalObservations; b++) {    int[] counts=getCounts(newDestNextPastSourceVectors[b],isPreviousObservations ? b : -1);    double logTerm=0.0;    double local=0.0;    if (counts[NEXT_PAST_SOURCE] > 0) {      logTerm=((double)counts[NEXT_PAST_SOURCE] / (double)counts[PAST_SOURCE]) / ((double)counts[NEXT_PAST] / (double)counts[PAST]);      local=Math.log(logTerm);    }    localTE[offset + b]=local;    te+=local;    if (debug) {      System.out.println(b + ": " + logTerm+ " -> "+ (local / Math.log(2.0))+ " -> sum: "+ (te / Math.log(2.0)));    }  }  lastAverage=te / (double)numLocalObservations / Math.log(2.0);  return localTE;}  }
class C{  @VisibleForTesting protected void awaitIndex(){  try {    mCountDownLatch.await();  } catch (  InterruptedException e) {    FLog.e(TAG,"Memory Index is not ready yet. ");  }}  }
class C{  public String numNumericTipText(){  return "The number of numerical attributes.";}  }
class C{  public JSONObject(Map map){  this.map=new HashMap();  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      Object value=e.getValue();      if (value != null) {        this.map.put(e.getKey(),wrap(value));      }    }  }}  }
class C{  public StylesheetComposed(Stylesheet parent){  super(parent);}  }
class C{  public Minutes dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Minutes.minutes(getValue() / divisor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.353 -0500",hash_original_method="0C3980D24E651B574AA14368331D3B6C",hash_generated_method="1DB559FD55A7FA848028D6B734FFE588") protected SSLRecordProtocol(HandshakeProtocol handshakeProtocol,AlertProtocol alertProtocol,SSLInputStream in,Appendable appData){  this.handshakeProtocol=handshakeProtocol;  this.handshakeProtocol.setRecordProtocol(this);  this.alertProtocol=alertProtocol;  this.alertProtocol.setRecordProtocol(this);  this.in=in;  this.appData=appData;}  }
class C{  public String search() throws Exception {  executeQuery();  return SUCCESS;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public FocusFinderHelper(FocusFinder focusFinder){  mFocusFinder=focusFinder;}  }
class C{  public CopyOnWriteArrayList(){  elements=EmptyArray.OBJECT;}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  protected void addImageToLists(ImageTile imageTile,OMGraphicList ret,URL fileURL){  imageTile.generate(getProjection());  ret.add(imageTile);  addImageTileToList(imageTile);  imageTile.putAttribute(FILE_PATH_ATTRIBUTE,fileURL.getPath());  imageTile.putAttribute(NAME_ATTRIBUTE,fileURL.getFile());  selectedDrawingAttributes.setTo(imageTile);  repaint();  if (resultsList != null) {    resultsList.repaint();  }}  }
class C{  private void createDataComponents(MetaClass metaClass,Entity item){  FieldGroup fieldGroup=componentsFactory.createComponent(FieldGroup.class);  fieldGroup.setWidth("100%");  LinkedList<FieldGroup.FieldConfig> customFields=new LinkedList<>();  contentPane.add(fieldGroup);  fieldGroup.setFrame(frame);  MetadataTools tools=metadata.getTools();  MetaProperty primaryKeyProperty=tools.getPrimaryKeyProperty(metaClass);  for (  MetaProperty metaProperty : metaClass.getProperties()) {    boolean isRequired=isRequired(metaProperty);    boolean isReadonly=metaProperty.isReadOnly();switch (metaProperty.getType()) {case DATATYPE:case ENUM:      boolean includeId=primaryKeyProperty.equals(metaProperty) && String.class.equals(metaProperty.getJavaType());    if (tools.isSystem(metaProperty) && !showSystemFields && !includeId) {      continue;    }  if (metaProperty.getType() != MetaProperty.Type.ENUM && (isByteArray(metaProperty) || isUuid(metaProperty))) {    continue;  }if (includeId && !isNew) {  isReadonly=true;}addField(metaClass,metaProperty,item,fieldGroup,isRequired,false,isReadonly,customFields);break;case COMPOSITION:case ASSOCIATION:if (metaProperty.getRange().getCardinality().isMany()) {addTable(metaClass,metaProperty);} else {if (isEmbedded(metaProperty)) {Entity propertyValue=item.getValue(metaProperty.getName());addEmbeddedFieldGroup(metaProperty,"",propertyValue);} else {addField(metaClass,metaProperty,item,fieldGroup,isRequired,true,isReadonly,customFields);}}break;default :break;}}fieldGroup.setDatasource(datasource);createCustomFields(fieldGroup,customFields);fieldGroup.setBorderVisible(true);}  }
class C{  public static X509Certificate generateIssuerCert(PublicKey publicKey,PrivateKey privateKey,KeyPair issuerKeys,String commonName,BigInteger serialNr,Date startDate,Date expiryDate) throws GeneralSecurityException, IOException {  JcaX509v3CertificateBuilder certBldr;  JcaX509ExtensionUtils extUtils=new JcaX509ExtensionUtils();  AuthorityKeyIdentifier authorityKeyIdentifier;  if (issuerKeys == null) {    X500Name dn=new X500Name(commonName);    certBldr=new JcaX509v3CertificateBuilder(dn,serialNr,startDate,expiryDate,dn,publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(publicKey);  } else {    X509Certificate caCert=issuerKeys.getCertificate().getCertificate();    certBldr=new JcaX509v3CertificateBuilder(caCert,serialNr,startDate,expiryDate,new X500Principal(commonName),publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(caCert);  }  certBldr.addExtension(Extension.authorityKeyIdentifier,false,authorityKeyIdentifier).addExtension(Extension.subjectKeyIdentifier,false,extUtils.createSubjectKeyIdentifier(publicKey)).addExtension(Extension.basicConstraints,true,new BasicConstraints(0)).addExtension(Extension.keyUsage,true,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));  ContentSigner signer;  try {    signer=new JcaContentSignerBuilder(CertificateUtils.getCertificateSignatureAlgorithm()).setProvider("BC").build(privateKey);  } catch (  OperatorCreationException e) {    throw new GeneralSecurityException("Failed to sign the certificate",e);  }  return new JcaX509CertificateConverter().setProvider("BC").getCertificate(certBldr.build(signer));}  }
class C{  @Override public boolean isReadOnly(int column) throws SQLException {  try {    debugCodeCall("isReadOnly",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (curURL != null) {    if ("ExternalPage".equals(qName)) {      System.out.println(curURL);      pages++;      if (title.length() > 0) {        title.delete(0,title.length());      }      if (desc.length() > 0) {        desc.delete(0,desc.length());      }      curURL=null;    } else     if ("d:Title".equals(qName)) {      titlePending=false;    } else     if ("d:Description".equals(qName)) {      descPending=false;    }  }}  }
class C{  @Override protected boolean onAccessDenied(ServletRequest request,ServletResponse response,Object mappedValue) throws IOException {  int port=toPort(mappedValue);  String scheme=getScheme(request.getScheme(),port);  StringBuilder sb=new StringBuilder();  sb.append(scheme).append("://");  sb.append(request.getServerName());  if (port != DEFAULT_HTTP_PORT && port != SslFilter.DEFAULT_HTTPS_PORT) {    sb.append(":");    sb.append(port);  }  if (request instanceof HttpServletRequest) {    sb.append(WebUtils.toHttp(request).getRequestURI());    String query=WebUtils.toHttp(request).getQueryString();    if (query != null) {      sb.append("?").append(query);    }  }  WebUtils.issueRedirect(request,response,sb.toString());  return false;}  }
class C{  public static DiscountDialogFragment newInstance(RequestListener requestListener){  DiscountDialogFragment frag=new DiscountDialogFragment();  frag.requestListener=requestListener;  return frag;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public static final long available(){  return maxMemory() - total() + free();}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public void testRemoveLast(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=SIZE - 1; i >= 0; --i) {    assertEquals(i,q.removeLast());  }  try {    q.removeLast();    shouldThrow();  } catch (  NoSuchElementException success) {  }  assertNull(q.peekLast());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int rowsLessOne=rows - 1;    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    if (myHost != null) {      DEM.setCommunicator(myHost);      output.setCommunicator(myHost);    }    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                flowDir=1 << i;              }            }            if (dist == gridRes) {              dist=diagGridRes;            } else {              dist=gridRes;            }          }          if (maxSlope > 0) {            output.setValue(row,col,flowDir);          } else {            output.setValue(row,col,0);          }        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Nullable @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public void reset(){  this.fBuffer.setLength(0);}  }
class C{  public void addSatallite(SatelliteBase satellite,World world){  satallites.put(satellite.getId(),satellite);  satellite.setDimensionId(world);  if (satellite.canTick())   tickingSatallites.put(satellite.getId(),satellite);  if (!world.isRemote)   PacketHandler.sendToAll(new PacketSatellite(satellite));}  }
class C{  public static Map<String,Object> prodFindAllVariants(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> subContext=UtilMisc.makeMapWritable(context);  subContext.put("type","PRODUCT_VARIANT");  return prodFindAssociatedByType(dctx,subContext);}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  public static Color rgbaf(double red,double green,double blue,double alpha){  return rgba(colorConvert(red),colorConvert(green),colorConvert(blue),colorConvert(alpha));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textValue=textNode.getNodeValue();  assertEquals("textNodeValue","1230 North Ave. Dallas, Texas 98551",textValue);}  }
class C{  protected String newVariableExpression(String varName,String arg){  return VariablesPlugin.getDefault().getStringVariableManager().generateVariableExpression(varName,arg);}  }
class C{  private void actionTable(){  Listitem listitem=selTable.getSelectedItem();  ValueNamePair vp=null;  if (listitem != null)   vp=(ValueNamePair)listitem.getValue(); else   return;  m_data.AD_Table_ID=((Integer)m_data.tableInfo.get(vp.getValue())).intValue();  log.config(vp.getValue() + " = " + m_data.AD_Table_ID);  m_data.Record_ID=0;  selRecord.setLabel("");  selRecord.setName(vp.getValue() + "_ID");}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{uuid}/retry") public SiteRestRep retryOperation(@PathParam("uuid") String uuid){  log.info("Begin to get site error by uuid {}",uuid);  Site standby;  try {    standby=drUtil.getSiteFromLocalVdc(uuid);  } catch (  CoordinatorException e) {    log.error("Can't find site {} from ZK",uuid);    throw APIException.badRequests.siteIdNotFound();  }  if (!standby.getState().equals(SiteState.STANDBY_ERROR)) {    log.error("site {} is in state {}, should be STANDBY_ERROR",uuid,standby.getState());    throw APIException.badRequests.operationOnlyAllowedOnErrorSite(standby.getName(),standby.getState().toString());  }  if (!standby.getLastState().equals(SiteState.STANDBY_PAUSING) && !standby.getLastState().equals(SiteState.STANDBY_RESUMING) && !standby.getLastState().equals(SiteState.STANDBY_FAILING_OVER)) {    log.error("site {} lastState was {}, retry is only supported for Pause, Resume and Failover",uuid,standby.getLastState());    throw APIException.badRequests.operationRetryOnlyAllowedOnLastState(standby.getName(),standby.getLastState().toString());  }  Site localSite=drUtil.getLocalSite();  SiteInfo siteInfo=coordinator.getTargetInfo(localSite.getUuid(),SiteInfo.class);  String drOperation=siteInfo.getActionRequired();  if (!drOperation.equals(standby.getLastState().getDRAction())) {    log.error("Active site last operation was {}, retry is only supported if no other operations have been performed",drOperation);    throw APIException.internalServerErrors.retryStandbyPrecheckFailed(standby.getName(),standby.getLastState().toString(),String.format("Another DR operation %s has been run on Active site. Only the latest operation can be retried. " + "This is an unrecoverable Error, please remove site and deploy a new one.",drOperation));  }  InterProcessLock lock=drUtil.getDROperationLock();  try {    coordinator.startTransaction();    standby.setState(standby.getLastState());    if (standby.getState() == SiteState.STANDBY_FAILING_OVER) {      for (      Site site : drUtil.listSites()) {        if (site.getLastState() == SiteState.ACTIVE_FAILING_OVER) {          site.setState(SiteState.ACTIVE_FAILING_OVER);          coordinator.persistServiceConfiguration(site.toConfiguration());        }      }    }    coordinator.persistServiceConfiguration(standby.toConfiguration());    log.info("Notify all sites for reconfig");    long vdcTargetVersion=DrUtil.newVdcConfigVersion();    for (    Site site : drUtil.listSites()) {      String siteUuid=site.getUuid();      if (site.getLastState() == SiteState.STANDBY_RESUMING) {        SiteInfo siteTargetInfo=coordinator.getTargetInfo(siteUuid,SiteInfo.class);        String resumeSiteOperation=siteTargetInfo.getActionRequired();        if (resumeSiteOperation.equals(SiteInfo.DR_OP_CHANGE_DATA_REVISION)) {          long dataRevision=vdcTargetVersion;          drUtil.updateVdcTargetVersion(siteUuid,resumeSiteOperation,vdcTargetVersion,dataRevision);          continue;        }      }      log.info("Set dr operation {} on site {}",drOperation,siteUuid);      drUtil.updateVdcTargetVersion(siteUuid,drOperation,vdcTargetVersion);    }    coordinator.commitTransaction();    return siteMapper.map(standby);  } catch (  Exception e) {    log.error("Error retrying site operation for site {}",uuid,e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.RETRY_STANDBY_OP,AuditLogManager.AUDITLOG_FAILURE,null,standby);    InternalServerErrorException retryStandbyOpFailedException=APIException.internalServerErrors.retryStandbyOpFailed(standby.getName(),e.getMessage());    throw retryStandbyOpFailedException;  } finally {    try {      lock.release();    } catch (    Exception ignore) {      log.error(String.format("Lock release failed when retrying standby site last op: %s",uuid));    }  }}  }
class C{  public void decrypt(byte[] inbuffer,byte[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(inbuffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void finishStoredFields() throws IOException, AbortingException {  try {    storedFieldsWriter.finishDocument();  } catch (  Throwable th) {    throw AbortingException.wrap(th);  }}  }
class C{  private static byte[] generateInput(int size){  Random random=new Random(285930);  byte[] buff=new byte[size];  random.nextBytes(buff);  return buff;}  }
class C{  public boolean equalsNormalized(final Sentence other){  if (other == this) {    return true;  } else   if (other == null) {    return false;  }  if (expressions.size() != other.expressions.size()) {    return false;  }  final Iterator<Expression> it1=expressions.iterator();  final Iterator<Expression> it2=other.expressions.iterator();  while (it1.hasNext() && it2.hasNext()) {    final Expression e1=it1.next();    final Expression e2=it2.next();    if (!e1.matchesNormalized(e2)) {      return false;    }  }  return (!it1.hasNext() && !it2.hasNext());}  }
class C{  synchronized public int flush(final IReopenChannel<FileChannel> opener) throws IOException {  final ByteBuffer m_data=this.m_data.get().buffer();  if (m_data.position() == 0) {    return 0;  }  m_storeCounters.bufferDataBytes+=m_data.position();  m_data.flip();  final int nwrites=FileChannelUtility.writeAll(opener,m_data,m_startAddr);  m_storeCounters.bufferFileWrites+=nwrites;  reset();  return nwrites;}  }
class C{  public void addObservations(int timeSeries[]){  int timeSteps=timeSeries.length;  if (timeSteps - k - (k - 1) <= 0) {    return;  }  observations+=(timeSteps - k - (k - 1));  int prevVal=0;  int nextVal=0;  for (int p=0; p < k; p++) {    prevVal*=numDiscreteValues;    prevVal+=timeSeries[p];    nextVal*=numDiscreteValues;    nextVal+=timeSeries[k - 1 + p];  }  for (int t=k; t < timeSteps - (k - 1); t++) {    nextVal-=maxShiftedValue[timeSeries[t - 1]];    nextVal*=numDiscreteValues;    nextVal+=timeSeries[k - 1 + t];    jointCount[nextVal][prevVal]++;    prevCount[prevVal]++;    nextCount[nextVal]++;    prevVal-=maxShiftedValue[timeSeries[t - k]];    prevVal*=numDiscreteValues;    prevVal+=timeSeries[t];  }}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length || count == 0) {    throw new InvalidCipherTextException("pad block corrupted");  }  for (int i=1; i <= count; i++) {    if (in[in.length - i] != count) {      throw new InvalidCipherTextException("pad block corrupted");    }  }  return count;}  }
class C{  private void handleExceptionalStatus(State state,InnerState innerState,HttpResponse response) throws StopRequest, RetryDownload {  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode == 503 && mInfo.mNumFailed < Constants.MAX_RETRIES) {    handleServiceUnavailable(state,response);  }  if (statusCode == 301 || statusCode == 302 || statusCode == 303 || statusCode == 307) {    handleRedirect(state,response,statusCode);  }  int expectedStatus=innerState.mContinuingDownload ? 206 : DownloaderService.STATUS_SUCCESS;  if (statusCode != expectedStatus) {    handleOtherStatus(state,innerState,statusCode);  } else {    state.mRedirectCount=0;  }}  }
class C{  private void sendMsrpResponse(String code,String txId,Hashtable<String,String> headers) throws NetworkException {  ByteArrayOutputStream buffer=null;  try {    buffer=new ByteArrayOutputStream(4000);    buffer.write(MsrpConstants.MSRP_HEADER.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_SP);    buffer.write(txId.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_SP);    buffer.write(code.getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_TO_PATH.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    buffer.write((headers.get(MsrpConstants.HEADER_FROM_PATH)).getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.HEADER_FROM_PATH.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_DOUBLE_POINT);    buffer.write(MsrpConstants.CHAR_SP);    buffer.write((headers.get(MsrpConstants.HEADER_TO_PATH)).getBytes(UTF8));    buffer.write(NEW_LINE);    buffer.write(MsrpConstants.END_MSRP_MSG.getBytes(UTF8));    buffer.write(txId.getBytes(UTF8));    buffer.write(MsrpConstants.FLAG_LAST_CHUNK);    buffer.write(NEW_LINE);    mConnection.sendChunk(buffer.toByteArray());  } catch (  IOException e) {    throw new NetworkException("Failed to send Msrp response!",e);  } finally {    CloseableUtils.tryToClose(buffer);  }}  }
class C{  public Tomcat80AgentValve(){  super(true);}  }
class C{  @Override public void visit(Visitor visitor){  visitor.visit(this);}  }
class C{  @Override protected synchronized void processFailure(BaseStunMessageEvent event){synchronized (sendLock) {    ended=true;    notifyAll();  }}  }
class C{  public boolean isConstant(){switch (op) {case POS:case NEG:case BITNOT:case NOT:case EXPR:case CONVERT:    return right.isConstant();}return false;}  }
class C{  private boolean shouldFormat(){  return !isFormatted && getRowCount() > 0;}  }
class C{  public E remove(int index){  rangeCheck(index);  modCount++;  E oldValue=(E)elementData[index];  int numMoved=size - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--size]=null;  return oldValue;}  }
class C{  public static Scsd cs_scc(Scs A){  int n, i, k, b, nb=0, top, xi[], pstack[], p[], r[], Ap[], ATp[], rcopy[], Blk[];  Scs AT;  Scsd S;  if (!Scs_util.CS_CSC(A))   return (null);  n=A.n;  Ap=A.p;  S=Scs_util.cs_dalloc(n,0);  AT=Scs_transpose.cs_transpose(A,false);  xi=new int[2 * n + 1];  if (S == null || AT == null)   return (null);  Blk=xi;  rcopy=xi;  int rcopy_offset=n;  pstack=xi;  int pstack_offset=n;  p=S.p;  r=S.r;  ATp=AT.p;  top=n;  for (i=0; i < n; i++) {    if (!Scs_util.CS_MARKES(Ap,i))     top=Scs_dfs.cs_dfs(i,A,top,xi,0,pstack,pstack_offset,null,0);  }  for (i=0; i < n; i++)   Scs_util.CS_MARK(Ap,i);  top=n;  nb=n;  for (k=0; k < n; k++) {    i=xi[k];    if (Scs_util.CS_MARKES(ATp,i))     continue;    r[nb--]=top;    top=Scs_dfs.cs_dfs(i,AT,top,p,0,pstack,pstack_offset,null,0);  }  r[nb]=0;  for (k=nb; k <= n; k++)   r[k - nb]=r[k];  S.nb=nb=n - nb;  for (b=0; b < nb; b++) {    for (k=r[b]; k < r[b + 1]; k++)     Blk[p[k]]=b;  }  for (b=0; b <= nb; b++)   rcopy[rcopy_offset + b]=r[b];  for (i=0; i < n; i++)   p[rcopy[rcopy_offset + Blk[i]]++]=i;  return S;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void update(){  updateWithoutTimer(true);  nextTimer();}  }
class C{  public Object __getitem__(String key) throws TemplateModelException {  return BeansWrapper.getDefaultInstance().unwrap(getVariable(key));}  }
class C{  ArgusServiceException(int status,String message,String url,String json){  super(message);  _status=status;  _url=url;  _json=json;}  }
class C{  public static boolean refreshDeviceCache(BluetoothGatt gatt){  try {    final Method refresh=BluetoothGatt.class.getMethod("refresh");    if (refresh != null) {      final boolean success=(Boolean)refresh.invoke(gatt);      Log.i(TAG,"Refreshing result: " + success);      return success;    }  } catch (  Exception e) {    Log.e(TAG,"An exception occured while refreshing device",e);  }  return false;}  }
class C{  public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.notEquals(this);  return !equals(obj2);}  }
class C{  @Ignore public int $getLength$(){  return Util.toInt(array.length + rest.getSize());}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  public Builder(String field,boolean ordered){  this.field=field;  this.ordered=ordered;}  }
class C{  protected void addItemEntity(EntityCollection entities,CategoryDataset dataset,int row,int column,Shape hotspot){  ParamChecks.nullNotPermitted(hotspot,"hotspot");  if (!getItemCreateEntity(row,column)) {    return;  }  String tip=null;  CategoryToolTipGenerator tipster=getToolTipGenerator(row,column);  if (tipster != null) {    tip=tipster.generateToolTip(dataset,row,column);  }  String url=null;  CategoryURLGenerator urlster=getItemURLGenerator(row,column);  if (urlster != null) {    url=urlster.generateURL(dataset,row,column);  }  CategoryItemEntity entity=new CategoryItemEntity(hotspot,tip,url,dataset,dataset.getRowKey(row),dataset.getColumnKey(column));  entities.add(entity);}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  private static void applyCapabilitiesSecurityPolicy(Arguments args,Credentials peer,String peerSecurityContext) throws ZygoteSecurityException {  if (args.permittedCapabilities == 0 && args.effectiveCapabilities == 0) {    return;  }  boolean allowed=SELinux.checkSELinuxAccess(peerSecurityContext,peerSecurityContext,"zygote","specifycapabilities");  if (!allowed) {    throw new ZygoteSecurityException("Peer may not specify capabilities");  }  if (peer.getUid() == 0) {    return;  }  long permittedCaps;  try {    permittedCaps=ZygoteInit.capgetPermitted(peer.getPid());  } catch (  IOException ex) {    throw new ZygoteSecurityException("Error retrieving peer's capabilities.");  }  if (((~args.permittedCapabilities) & args.effectiveCapabilities) != 0) {    throw new ZygoteSecurityException("Effective capabilities cannot be superset of " + " permitted capabilities");  }  if (((~permittedCaps) & args.permittedCapabilities) != 0) {    throw new ZygoteSecurityException("Peer specified unpermitted capabilities");  }}  }
class C{  public void cancel(){  request.cancel();}  }
class C{  public static Instances curveData(int y[],double p[]){  double[][] aligned=align(y,p);  y=toIntArray(aligned[0]);  p=aligned[1];  ThresholdCurve curve=new ThresholdCurve();  return curve.getCurve(MLUtils.toWekaPredictions(y,p));}  }
class C{  protected void processFetchResponse() throws IOException, SQLException {  Response response;  while (!isAllRowsFetched() && (response=getDatabase().readResponse(getStatementWarningCallback())) instanceof FetchResponse) {    final FetchResponse fetchResponse=(FetchResponse)response;    if (fetchResponse.getCount() > 0 && fetchResponse.getStatus() == ISCConstants.FETCH_OK) {      queueRowData(readSqlData());    } else     if (fetchResponse.getStatus() == ISCConstants.FETCH_NO_MORE_ROWS) {      setAllRowsFetched(true);      getSqlCounts();    } else {      break;    }  }}  }
class C{  public boolean addAll(float[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (add(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  private <T extends Holiday>boolean isValidForCycle(T h,int year){  if (h.getEvery() != null) {    if (!EVERY_YEAR.equals(h.getEvery())) {      if (ODD_YEARS.equals(h.getEvery())) {        return year % 2 != 0;      } else       if (EVEN_YEARS.equals(h.getEvery())) {        return year % 2 == 0;      } else {        if (h.getValidFrom() != null) {          int cycleYears;          if (TWO_YEARS.equalsIgnoreCase(h.getEvery())) {            cycleYears=2;          } else           if (THREE_YEARS.equalsIgnoreCase(h.getEvery())) {            cycleYears=3;          } else           if (FOUR_YEARS.equalsIgnoreCase(h.getEvery())) {            cycleYears=4;          } else           if (FIVE_YEARS.equalsIgnoreCase(h.getEvery())) {            cycleYears=5;          } else           if (SIX_YEARS.equalsIgnoreCase(h.getEvery())) {            cycleYears=6;          } else {            throw new IllegalArgumentException("Cannot handle unknown cycle type '" + h.getEvery() + "'.");          }          return (year - h.getValidFrom()) % cycleYears == 0;        }      }    }  }  return true;}  }
class C{  @Override public SQLiteDatabase openOrCreateDatabase(String name,int mode,CursorFactory factory,DatabaseErrorHandler errorHandler){  return SQLiteDatabase.openOrCreateDatabase(getDatabasePath(name),null);}  }
class C{  public boolean hasQuest(final String name){  return quests.hasQuest(name);}  }
class C{  public HMAC(String digestName,int blockLength,byte[] key){  try {    digest=MessageDigest.getInstance(digestName);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException("unknown digest algorithm " + digestName);  }  this.blockLength=blockLength;  init(key);}  }
class C{  public String toString(){  String interpolation=null;  return this.getClass().getName() + "(" + ((cdf != null) ? cdf.length : 0)+ ")";}  }
class C{  public static <T>LazyPVectorX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  private int h(int k,int w){  int h1, h2, h3, h4, h5, h6;  h1=w & 0xff;  h2=(w >> 8) & 0xff;  h3=ftable[h2 ^ key3[k]] ^ h1;  h4=ftable[h3 ^ key2[k]] ^ h2;  h5=ftable[h4 ^ key1[k]] ^ h3;  h6=ftable[h5 ^ key0[k]] ^ h4;  return ((h6 << 8) + h5);}  }
class C{  public void testBinarylizable() throws Exception {  check(EntityBinarylizable.class);}  }
class C{  @Override public int hashCode(){  return getValue().hashCode();}  }
class C{  protected PoolEntry(){  super(SingleClientConnManager.this.connOperator,null);}  }
class C{  public ObjectWriter withView(Class<?> view){  if (view == _config.getSerializationView())   return this;  return new ObjectWriter(this,_config.withView(view));}  }
class C{  public boolean before(Timestamp ts){  return compareTo(ts) < 0;}  }
class C{  protected TransitionImpl(){  super();}  }
class C{  public static RemoveContainerParams create(@NotNull String container){  return new RemoveContainerParams().withContainer(container);}  }
class C{  public boolean triggerExists(Connection conn,TriggerKey triggerKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGER_EXISTENCE));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      return true;    } else {      return false;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  private void startStorageSystem(StorageSystem system) throws ControllerException {  if (!DiscoveredDataObject.Type.vplex.name().equals(system.getSystemType())) {    StorageController controller=getStorageController(system.getSystemType());    controller.connectStorage(system.getId());  }}  }
class C{  public static double uniform(double a,double b){  if (!(a < b))   throw new IllegalArgumentException("Invalid range");  return a + uniform() * (b - a);}  }
class C{  private void checkDatabases(){  AnalysisContext analysisContext=AnalysisContext.currentAnalysisContext();  unconditionalDerefParamDatabase=analysisContext.getUnconditionalDerefParamDatabase();}  }
class C{  public InterruptedIOException(String detailMessage){  super(detailMessage);}  }
class C{  public LocalizedText(String text,String localeId){  this.text=text;  this.locale=localeId;}  }
class C{  protected void encodeAtom(OutputStream outStream,byte data[],int offset,int len) throws IOException {  byte a, b, c;  if (len == 1) {    a=data[offset];    b=0;    c=0;    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write('=');    outStream.write('=');  } else   if (len == 2) {    a=data[offset];    b=data[offset + 1];    c=0;    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write(pem_array[((b << 2) & 0x3c) + ((c >>> 6) & 0x3)]);    outStream.write('=');  } else {    a=data[offset];    b=data[offset + 1];    c=data[offset + 2];    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write(pem_array[((b << 2) & 0x3c) + ((c >>> 6) & 0x3)]);    outStream.write(pem_array[c & 0x3F]);  }}  }
class C{  public static <S extends HasMouseOverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseOverEvent event=new MouseOverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private Bitmap scaleImage(String filename,int width,int height) throws IOException {  final BitmapFactory.Options dbo=new BitmapFactory.Options();  dbo.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,dbo);  final int nativeWidth=dbo.outWidth;  final int nativeHeight=dbo.outHeight;  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"generateThumbnail: Input: " + nativeWidth + "x"+ nativeHeight+ ", resize to: "+ width+ "x"+ height);  }  final Bitmap srcBitmap;  float bitmapWidth, bitmapHeight;  if (nativeWidth > width || nativeHeight > height) {    float dx=((float)nativeWidth) / ((float)width);    float dy=((float)nativeHeight) / ((float)height);    if (dx > dy) {      bitmapWidth=width;      if (((float)nativeHeight / dx) < (float)height) {        bitmapHeight=(float)Math.ceil(nativeHeight / dx);      } else {        bitmapHeight=(float)Math.floor(nativeHeight / dx);      }    } else {      if (((float)nativeWidth / dy) > (float)width) {        bitmapWidth=(float)Math.floor(nativeWidth / dy);      } else {        bitmapWidth=(float)Math.ceil(nativeWidth / dy);      }      bitmapHeight=height;    }    int sampleSize=(int)Math.ceil(Math.max((float)nativeWidth / bitmapWidth,(float)nativeHeight / bitmapHeight));    sampleSize=nextPowerOf2(sampleSize);    final BitmapFactory.Options options=new BitmapFactory.Options();    options.inSampleSize=sampleSize;    srcBitmap=BitmapFactory.decodeFile(filename,options);  } else {    bitmapWidth=width;    bitmapHeight=height;    srcBitmap=BitmapFactory.decodeFile(filename);  }  if (srcBitmap == null) {    Log.e(TAG,"generateThumbnail: Cannot decode image bytes");    throw new IOException("Cannot decode file: " + mFilename);  }  final Bitmap bitmap=Bitmap.createBitmap((int)bitmapWidth,(int)bitmapHeight,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmap);  canvas.drawBitmap(srcBitmap,new Rect(0,0,srcBitmap.getWidth(),srcBitmap.getHeight()),new Rect(0,0,(int)bitmapWidth,(int)bitmapHeight),sResizePaint);  canvas.setBitmap(null);  srcBitmap.recycle();  return bitmap;}  }
class C{  public void removeConnection(final IConnectionWithReconnect connection){synchronized (connections) {    connections.remove(connection);  }}  }
class C{  public static Interval fromTo(int from,int to){  if (from <= to) {    return Interval.fromToBy(from,to,1);  }  return Interval.fromToBy(from,to,-1);}  }
class C{  public static byte[] asciiBytes(String value){  Preconditions.checkNotNull(value);  try {    return value.getBytes("ASCII");  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException("ASCII not found!",uee);  }}  }
class C{  @Override public void validate(){}  }
class C{  public static <T extends Object & Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  @VisibleForTesting protected void doUpdateDoi(Resource resource){  Preconditions.checkNotNull(resource);  if (resource.getDoi() != null && resource.isPubliclyAvailable()) {    DOI doi=resource.getDoi();    try {      DataCiteMetadata dataCiteMetadata=DataCiteMetadataBuilder.createDataCiteMetadata(doi,resource);      registrationManager.getDoiService().update(doi,dataCiteMetadata);    } catch (    InvalidMetadataException e) {      String errorMsg="Failed to update " + doi.toString() + " metadata: "+ e.getMessage();      log.error(errorMsg);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }catch (    DoiException e) {      String errorMsg="Failed to update " + doi.toString() + " metadata: "+ e.getMessage();      log.error(errorMsg);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }  } else {    throw new InvalidConfigException(TYPE.INVALID_DOI_REGISTRATION,"Resource not in required state to update DOI!");  }}  }
class C{  public static long lastModified(){  if (tv.sage.ModuleManager.defaultModuleGroup != null) {    return (tv.sage.ModuleManager.defaultModuleGroup.defaultModule.lastModified());  } else   throw (new IllegalStateException("Missing defaultModuleGroup for lastModified"));}  }
class C{  @Override @Unpreemptible("Deliver exception possibly from unpreemptible code") public void deliverException(CompiledMethod cm,Address catchBlockInstructionAddress,Throwable exceptionObject,AbstractRegisters registers){  OptCompiledMethod compiledMethod=(OptCompiledMethod)cm;  Offset offset=Offset.fromIntSignExtend(compiledMethod.getUnsignedExceptionOffset());  if (!offset.isZero()) {    Address fp=registers.getInnermostFramePointer();    Magic.setObjectAtOffset(Magic.addressAsObject(fp),offset,exceptionObject);  }  registers.setIP(catchBlockInstructionAddress);  VM.enableGC();  if (VM.VerifyAssertions)   VM._assert(registers.getInUse());  registers.setInUse(false);  Magic.restoreHardwareExceptionState(registers);  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);}  }
class C{  public void or(ShiftingBitSet set){  if (this == set)   return;  int wordsInCommon=Math.min(wordsInUse,set.wordsInUse);  if (wordsInUse < set.wordsInUse) {    ensureCapacity(set.wordsInUse);    wordsInUse=set.wordsInUse;  }  for (int i=0; i < wordsInCommon; i++)   words[i]|=set.words[i];  if (wordsInCommon < set.wordsInUse)   System.arraycopy(set.words,wordsInCommon,words,wordsInCommon,wordsInUse - wordsInCommon);  checkInvariants();}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.459 -0500",hash_original_method="60D945D31D7D04981E268C4CC855B009",hash_generated_method="240CCC45A5DAEB561D1B1CD9883B6407") public void putByte(String key,byte value){  unparcel();  mMap.put(key,value);}  }
class C{  public void persist(MemBufferHolder<NonVolatileMemAllocator> mbuf){  m_nvmasvc.persist(m_nid,getBufferAddress(mbuf),0L,true);}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  @Override public Object next(){  try {    return nextEvent();  } catch (  XMLStreamException e) {    throw new IllegalStateException(e);  }}  }
class C{  boolean isWeakerThan(SideEffectAnnotation other){  boolean weaker=false;switch (other) {case MAYRELEASELOCKS:    break;case RELEASESNOLOCKS:  if (this == SideEffectAnnotation.MAYRELEASELOCKS) {    weaker=true;  }break;case LOCKINGFREE:switch (this) {case MAYRELEASELOCKS:case RELEASESNOLOCKS:weaker=true;break;default :}break;case SIDEEFFECTFREE:switch (this) {case MAYRELEASELOCKS:case RELEASESNOLOCKS:case LOCKINGFREE:weaker=true;break;default :}break;case PURE:switch (this) {case MAYRELEASELOCKS:case RELEASESNOLOCKS:case LOCKINGFREE:case SIDEEFFECTFREE:weaker=true;break;default :}break;}return weaker;}  }
class C{  @Override public boolean supportsCatalogsInDataManipulation(){  debugCodeCall("supportsCatalogsInDataManipulation");  return true;}  }
class C{  public static int calcUTF16toUTF8Length(CharSequence s,int offset,int len){  final int end=offset + len;  int res=0;  for (int i=offset; i < end; i++) {    final int code=(int)s.charAt(i);    if (code < 0x80)     res++; else     if (code < 0x800) {      res+=2;    } else     if (code < 0xD800 || code > 0xDFFF) {      res+=3;    } else {      if (code < 0xDC00 && (i < end - 1)) {        int utf32=(int)s.charAt(i + 1);        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {          i++;          res+=4;          continue;        }      }      res+=3;    }  }  return res;}  }
class C{  private void checkAllExternalCssHaveBeenAdapted(Audit audit){  if (!externalCssMap.containsKey(audit.getId())) {    LOGGER.debug("No Css found for the id " + audit.getId());    return;  }  Collection<StylesheetContent> externalStyleSheet=externalCssMap.get(audit.getId());  for (  StylesheetContent stylesheetContent : externalStyleSheet) {    if (stylesheetContent.getAdaptedContent() == null || stylesheetContent.getAdaptedContent().isEmpty()) {      stylesheetContent.setAdaptedContent(CSSContentAdapter.CSS_ON_ERROR);      if (persistOnTheFly) {        contentDataService.saveOrUpdate(stylesheetContent);      }      if (LOGGER.isDebugEnabled()) {        LOGGER.debug(stylesheetContent.getURI() + " hasn't been adapted" + "for any reason and is set on error");      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.867 -0500",hash_original_method="55359692B6793E8A8B1383DAA231ACAC",hash_generated_method="F7C149BFBB01A4F53FCD11FC96FCE6DE") final void runWorker(Worker w){  Runnable task=w.firstTask;  w.firstTask=null;  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      clearInterruptsForTaskRun();      try {        beforeExecute(w.thread,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  public LocalDateTime withHourOfDay(int hour){  return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(),hour));}  }
class C{  @Inline @Entrypoint public static float floatFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_FLOAT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().floatRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof RouteTracker))   return false;  RouteTracker that=(RouteTracker)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.connected == that.connected) && (this.secure == that.secure) && (this.tunnelled == that.tunnelled)&& (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  public boolean isInitialized(){  return value != -1;}  }
class C{  public void doDoubleClickAction(Graph graph){  if (!isEditExitingMeasuredVarsAllowed()) {    return;  }  String newName;  List<Node> nodes=graph.getNodes();  JCheckBox latentCheckBox=new JCheckBox("Latent",false);  newName=chooseNewVariableName(latentCheckBox,nodes);  boolean changed=false;  if (super.getModelNode() != null && !newName.equals(super.getModelNode().getName())) {    super.getModelNode().setName(newName);    firePropertyChange("resetGraph",null,null);    changed=true;  }  if (latentCheckBox.isSelected()) {    super.getModelNode().setNodeType(NodeType.LATENT);    firePropertyChange("resetGraph",null,null);    changed=true;  }  if (changed) {    firePropertyChange("editingValueChanged",null,null);  }}  }
class C{  public void sendStream(Reader reader) throws IOException {  char[] buffer=new char[BUFFER_DEFAULT_SIZE];  int len;  while ((len=reader.read(buffer)) > 0) {    byte[] bytes=new String(buffer,0,len).getBytes("UTF-8");    write(bytes,0,bytes.length);  }}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(8,4,new Insets(0,0,0,0),-1,-1));  final Spacer spacer1=new Spacer();  contentPanel.add(spacer1,new GridConstraints(7,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  descriptionLabel=new WrappingLabel();  descriptionLabel.setEnabled(true);  descriptionLabel.setName("");  descriptionLabel.setText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLoginForm.Description"));  contentPanel.add(descriptionLabel,new GridConstraints(1,1,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  headerLabel=new JLabel();  this.$$$loadLabelText$$$(headerLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLoginForm.Header"));  contentPanel.add(headerLabel,new GridConstraints(0,1,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  contentPanel.add(vsIcon,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  busySpinnerPanel=new BusySpinnerPanel();  contentPanel.add(busySpinnerPanel,new GridConstraints(3,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  loginProgressLabel=new JLabel();  loginProgressLabel.setText("Sample Text for Busy Spinner Message");  contentPanel.add(loginProgressLabel,new GridConstraints(3,2,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer2=new Spacer();  contentPanel.add(spacer2,new GridConstraints(3,3,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  signInLink=new Hyperlink();  this.$$$loadLabelText$$$(signInLink,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLoginForm.SignIn"));  contentPanel.add(signInLink,new GridConstraints(2,1,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  moreInfoLabel=new JLabel();  this.$$$loadLabelText$$$(moreInfoLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("LoginForm.VSO.MoreInformationLabel"));  contentPanel.add(moreInfoLabel,new GridConstraints(4,1,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  createAnAccountLink=new Hyperlink();  this.$$$loadLabelText$$$(createAnAccountLink,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLoginForm.CreateAccount"));  contentPanel.add(createAnAccountLink,new GridConstraints(5,1,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  learnMoreLink=new Hyperlink();  this.$$$loadLabelText$$$(learnMoreLink,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLoginForm.LearnMore"));  contentPanel.add(learnMoreLink,new GridConstraints(6,1,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));}  }
class C{  public InvalidObjectException(String reason){  super(reason);}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody UserDTO userDTO,HttpServletRequest request){  return userRepository.findOneByLogin(userDTO.getLogin()).map(null).orElseGet(null);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_extendedStateMachine_1_();}  }
class C{  public void dumpSystemProperties(){  Properties sysProps=System.getProperties();  log.fine(CLASS_NAME,"dumpSystemProperties",dumpProperties(sysProps,"SystemProperties").toString());}  }
class C{  public static <U>Function<U,IntPredicate> notSelf(FastUserIndex<U> users){  return null;}  }
class C{  public static String join(CharSequence delimiter,Iterable tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  public boolean isDiscard(){  return (flags & FLAG_DISCARD) != 0;}  }
class C{  public static boolean findPage(EntityPlayer player,String pageName,Item itemManual){  if (pageName != null && player != null) {    for (int i=-1; i < player.inventory.getSizeInventory(); i++) {      ItemStack stack;      if (i >= 0)       stack=player.inventory.getStackInSlot(i); else       stack=player.getHeldItem(EnumHand.OFF_HAND);      if (stack != null && stack.getItem() == itemManual) {        NBTTagCompound nbt=stack.getTagCompound();        if (nbt == null)         nbt=new NBTTagCompound();        ArrayList<String> foundPages=getFoundPages(player,itemManual);        if (foundPages != null && !foundPages.contains(pageName)) {          NBTTagList pages=new NBTTagList();          for (          String string : foundPages) {            NBTTagCompound data=new NBTTagCompound();            data.setString("page",string);            pages.appendTag(data);          }          NBTTagCompound data=new NBTTagCompound();          data.setString("page",pageName);          pages.appendTag(data);          nbt.setTag("pages",pages);        } else {          NBTTagList pages=new NBTTagList();          NBTTagCompound data=new NBTTagCompound();          data.setString("page",pageName);          pages.appendTag(data);          nbt.setTag("pages",pages);        }        player.inventory.getStackInSlot(i).setTagCompound(nbt);        return true;      }    }  }  return false;}  }
class C{  protected synchronized Object extract(){  Object x=null;  LinkedNode first=head_.next;  if (first != null) {    x=first.value;    first.value=null;    head_=first;    count_--;  }  return x;}  }
class C{  public static Integer execute(InternalPool pool,String region){  AbstractOp op=new SizeOpImpl(region);  return (Integer)pool.execute(op);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void saveWindowState(Window window){  if (!locationSet.contains(window) && window != primaryWindow) {    return;  }  StateItem item=windows.get(window);  Point location=window.getLocation();  String state=location.x + "," + location.y;  Dimension size=window.getSize();  state+=";" + size.width + ","+ size.height;  state+=";" + (window.isVisible() ? "1" : "0");  settings.mapPut(SETTING,item.id,state);}  }
class C{  public SparseArrayCompatSerializable(){  this(10);}  }
class C{  public static OrganizationAuthoritiesException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  OrganizationAuthoritiesException object=new OrganizationAuthoritiesException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","OrganizationAuthoritiesException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setOrganizationAuthoritiesException(null);            reader.next();          } else {            object.setOrganizationAuthoritiesException(ApplicationExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public byte[] calculateChecksum(byte[] data,int size) throws KrbCryptoException {  MessageDigest md5;  byte[] result=null;  try {    md5=MessageDigest.getInstance("MD5");  } catch (  Exception e) {    throw new KrbCryptoException("JCE provider may not be installed. " + e.getMessage());  }  try {    md5.update(data);    result=md5.digest();  } catch (  Exception e) {    throw new KrbCryptoException(e.getMessage());  }  return result;}  }
class C{  private Boolean aliasExists(String alias,String functionName){  GetAliasRequest getAliasRequest=new GetAliasRequest().withName(alias).withFunctionName(functionName);  logger.log("Lambda function alias existence check:%n%s%n%s%n",functionName,alias);  try {    GetAliasResult functionResult=client.getAlias(getAliasRequest);    logger.log("Lambda function alias exists:%n%s%n",functionResult.toString());    return true;  } catch (  ResourceNotFoundException rnfe) {    logger.log("Lambda alias does not exist for function.");    return false;  }}  }
class C{  protected void finalize(){  quit();}  }
class C{  public static LogoutRequest createSamlLogoutRequestFromIDP(String id,String sessionIndex) throws NoSuchAlgorithmException {  String issuerUrl=TestConfig.idpEntityID;  String destination=TestConfig.SpSloService_loc;  SamlUtils samlUtils=new SamlUtils(null,null,null,null,issuerUrl);  return samlUtils.createSamlLogoutRequest(id,destination,SamlNames.PERSISTENT,TestConstants.USER,sessionIndex);}  }
class C{  public BasicView(){}  }
class C{  public static void clearSearchQuery(Activity activity){  EspressoTestUtils.clickMenuItem(activity,activity.getString(R.string.action_search),R.id.action_search);  onView(isAssignableFrom(AutoCompleteTextView.class)).perform(click(),clearText());  Espresso.closeSoftKeyboard();}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case MappingPackage.MODEL_ATTRIBUTE:    return createModelAttributeFromString(eDataType,initialValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public SingleThreadContext(ScheduledExecutorService executor,Serializer serializer){  this(getThread(executor),executor,serializer);}  }
class C{  public Animation(final String[] imageLocations,final long frameDuration){  this.imageNames=imageLocations;  this.frameDuration=frameDuration;  initializeImages();  start();}  }
class C{  public void populateRelations(GraphModel subview){  Set<GraphNode> subviewNodes=subview.getNodesSet();  GraphBuilder builder=subview.getBuilder();  for (  GraphEdge edge : getEdges()) {    if (subviewNodes.contains(edge.getHead()) && subviewNodes.contains(edge.getTail())) {      builder.addEdge(edge);    }  }}  }
class C{  @Inline public final Address alloc(int bytes,int align,int offset){  int alignedBytes=getMaximumAlignedSize(bytes,align);  int sizeClass=getSizeClass(alignedBytes);  Address cell=freeList.get(sizeClass);  if (!cell.isZero()) {    freeList.set(sizeClass,cell.loadAddress());    cell.store(Address.zero());    if (alignedBytes != bytes) {      cell=alignAllocation(cell,align,offset);    }    return cell;  }  return allocSlow(bytes,align,offset);}  }
class C{  public void addPortToAlreadyAllocatedContext(StoragePort port,StorageHADomain haDomain,StorageSystem.Type arrayType,String switchName){  String engine=getEngine(port,haDomain,arrayType);  if (engine != null) {    _alreadyAllocatedEngines.add(engine);  }  String directorType=getDirectorType(arrayType,haDomain);  if (directorType != null) {    _alreadyAllocatedDirectorTypes.add(directorType);  }  String director=getDirector(port,haDomain);  if (director != null) {    _alreadyAllocatedDirectors.add(director);  }  String cpu=getCpu(port,haDomain,arrayType);  if (cpu != null) {    _alreadyAllocatedCpus.add(cpu);  }  if (switchName != null) {    _alreadyAllocatedSwitches.add(switchName);  }}  }
class C{  public DoubleMatrix2D solveTranspose(DoubleMatrix2D A,DoubleMatrix2D B){  return solve(transpose(A),transpose(B));}  }
class C{  public static int createNativeCallgraphView(final CConnection connection,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00706: connection argument can not be null");  final String query="{ ? = call create_native_call_graph_view(?) }";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.registerOutParameter(1,Types.INTEGER);  call.setInt(2,moduleId);  call.execute();  return call.getInt(1);}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  public static boolean[] toBooleanArray(Short[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  public NonBlockingStatsDClient(String prefix,String hostname,int port,StatsDClientErrorHandler errorHandler) throws StatsDClientException {  this.prefix=(prefix == null || prefix.trim().isEmpty()) ? "" : (prefix.trim() + ".");  try {    this.sender=new NonBlockingUdpSender(hostname,port,STATS_D_ENCODING,errorHandler);  } catch (  Exception e) {    throw new StatsDClientException("Failed to start StatsD client",e);  }}  }
class C{  private static DiceRoll rollDiceNormal(final List<Unit> unitsList,final boolean defending,final PlayerID player,final IDelegateBridge bridge,final IBattle battle,final String annotation,final Collection<TerritoryEffect> territoryEffects,final List<Unit> allEnemyUnitsAliveOrWaitingToDie){  final List<Unit> units=new ArrayList<>(unitsList);{    final Set<Unit> duplicatesCheckSet=new HashSet<>(unitsList);    if (units.size() != duplicatesCheckSet.size()) {      throw new IllegalStateException("Duplicate Units Detected: Original List:" + units + "  HashSet:"+ duplicatesCheckSet);    }  }  final GameData data=bridge.getData();  sortByStrength(units,defending);  final Territory location=battle.getTerritory();  final boolean isAmphibiousBattle=battle.isAmphibious();  final Collection<Unit> amphibiousLandAttackers=battle.getAmphibiousLandAttackers();  final Map<Unit,Tuple<Integer,Integer>> unitPowerAndRollsMap=DiceRoll.getUnitPowerAndRollsForNormalBattles(units,allEnemyUnitsAliveOrWaitingToDie,defending,false,data,location,territoryEffects,isAmphibiousBattle,amphibiousLandAttackers);  final Tuple<Integer,Integer> totalPowerAndRolls=getTotalPowerAndRolls(unitPowerAndRollsMap,data);  final int rollCount=totalPowerAndRolls.getSecond();  if (rollCount == 0) {    return new DiceRoll(new ArrayList<>(),0);  }  final int[] random=bridge.getRandom(data.getDiceSides(),rollCount,player,DiceType.COMBAT,annotation);  final boolean lhtrBombers=games.strategy.triplea.Properties.getLHTR_Heavy_Bombers(data);  final List<Die> dice=new ArrayList<>();  int hitCount=0;  int diceIndex=0;  for (  final Unit current : units) {    final UnitAttachment ua=UnitAttachment.get(current.getType());    final Tuple<Integer,Integer> powerAndRolls=unitPowerAndRollsMap.get(current);    final int strength=powerAndRolls.getFirst();    final int rolls=powerAndRolls.getSecond();    if (rolls <= 0 || strength <= 0) {      continue;    }    if (rolls > 1 && (lhtrBombers || ua.getChooseBestRoll())) {      int smallestDieIndex=0;      int smallestDie=data.getDiceSides();      for (int i=0; i < rolls; i++) {        if (random[diceIndex + i] < smallestDie) {          smallestDie=random[diceIndex + i];          smallestDieIndex=i;        }      }      final boolean hit=strength > random[diceIndex + smallestDieIndex];      dice.add(new Die(random[diceIndex + smallestDieIndex],strength,hit ? DieType.HIT : DieType.MISS));      for (int i=0; i < rolls; i++) {        if (i != smallestDieIndex) {          dice.add(new Die(random[diceIndex + i],strength,DieType.IGNORED));        }      }      if (hit) {        hitCount++;      }      diceIndex+=rolls;    } else {      for (int i=0; i < rolls; i++) {        final boolean hit=strength > random[diceIndex];        dice.add(new Die(random[diceIndex],strength,hit ? DieType.HIT : DieType.MISS));        if (hit) {          hitCount++;        }        diceIndex++;      }    }  }  final DiceRoll rVal=new DiceRoll(dice,hitCount);  bridge.getHistoryWriter().addChildToEvent(annotation + " : " + MyFormatter.asDice(random),rVal);  return rVal;}  }
class C{  @ValidationErrorPage(value=COMMON_FORM) @Action(value="/search/searchProperty-commonSearch") public String commonSearch(){  final BasicProperty basicProperty=basicPropertyDAO.getBasicPropertyByIndexNumAndParcelID(assessmentNum,null);  if (basicProperty == null) {    addActionError(getText("validation.property.doesnot.exists"));    return COMMON_FORM;  }  checkIsDemandActive(basicProperty.getProperty());  if (!applicationType.equalsIgnoreCase(APPLICATION_TYPE_COLLECT_TAX) && !applicationType.equalsIgnoreCase(APPLICATION_TYPE_DEMAND_BILL) && !applicationType.equalsIgnoreCase(APPLICATION_TYPE_REVISION_PETITION)) {    if (!isDemandActive) {      addActionError(getText("error.msg.demandInactive"));      return COMMON_FORM;    } else     if (basicProperty.getActiveProperty().getPropertyDetail().getPropertyTypeMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.OWNERSHIP_TYPE_EWSHS)) {      addActionError(getText("EWSHS.transaction.error"));      return COMMON_FORM;    }  }  if (applicationType.equalsIgnoreCase(APPLICATION_TYPE_MODIFY_DATA_ENTRY)) {    Property activeProperty=basicProperty.getProperty();    if (!basicProperty.getSource().toString().equalsIgnoreCase(SOURCEOFDATA_DATAENTRY.toString())) {      addActionError(getText("edit.dataEntry.source.error"));      return COMMON_FORM;    }    if (basicProperty.getSource().toString().equalsIgnoreCase(SOURCEOFDATA_DATAENTRY.toString())) {      if (basicProperty.getPropertySet().size() > 1) {        addActionError(getText("edit.dataEntry.transaction.error"));        return COMMON_FORM;      }      if (!activeProperty.getPtDemandSet().isEmpty()) {        BigDecimal arrearCollection=BigDecimal.ZERO;        BigDecimal currentCollection=BigDecimal.ZERO;        Map<String,BigDecimal> demandCollectionMap=propertyTaxUtil.getDemandAndCollection(activeProperty);        if (!demandCollectionMap.isEmpty()) {          arrearCollection=demandCollectionMap.get(ARR_COLL_STR);          currentCollection=demandCollectionMap.get(CURR_COLL_STR);          if (arrearCollection.compareTo(BigDecimal.ZERO) > 0 || currentCollection.compareTo(BigDecimal.ZERO) > 0) {            addActionError(getText("edit.dataEntry.collection.done.error"));            return COMMON_FORM;          }        }      }    }    activePropertyId=basicProperty.getActiveProperty().getId().toString();  }  boolean hasChildPropertyUnderWorkflow=propertyTaxUtil.checkForParentUsedInBifurcation(assessmentNum);  if (hasChildPropertyUnderWorkflow) {    addActionError(getText("error.msg.child.underworkflow"));    return COMMON_FORM;  }  if (APPLICATION_TYPE_REVISION_PETITION.equals(applicationType)) {    if (isDemandActive) {      addActionError(getText("revPetition.demandActive"));      return COMMON_FORM;    }  } else   if (APPLICATION_TYPE_ALTER_ASSESSENT.equals(applicationType) || APPLICATION_TYPE_BIFURCATE_ASSESSENT.equals(applicationType) || APPLICATION_TYPE_TRANSFER_OF_OWNERSHIP.equals(applicationType)|| APPLICATION_TYPE_GRP.equals(applicationType)|| APPLICATION_TYPE_DEMOLITION.equals(applicationType)) {    if (!isDemandActive) {      addActionError(getText("error.msg.demandInactive"));      return COMMON_FORM;    }  } else   if (APPLICATION_TYPE_DEMAND_BILL.equals(applicationType))   if (basicProperty.getProperty().getIsExemptedFromTax()) {    addActionError(getText("error.msg.taxExempted"));    return COMMON_FORM;  }  loggedUserIsMeesevaUser=propertyService.isMeesevaUser(securityUtils.getCurrentUser());  if (loggedUserIsMeesevaUser) {    if (APPLICATION_TYPE_TRANSFER_OF_OWNERSHIP.equals(applicationType))     return APPLICATION_TYPE_MEESEVA_TRANSFER_OF_OWNERSHIP; else     if (APPLICATION_TYPE_GRP.equals(applicationType))     return APPLICATION_TYPE_MEESEVA_GRP; else     if (APPLICATION_TYPE_REVISION_PETITION.equals(applicationType))     return APPLICATION_TYPE_MEESEVA_RP;  }  if (APPLICATION_TYPE_EDIT_DEMAND.equals(applicationType)) {    if (!(basicProperty.getSource().toString().equalsIgnoreCase(SOURCEOFDATA_DATAENTRY.toString()))) {      addActionError(getText("edit.dataEntry.source.error"));      return COMMON_FORM;    }    return APPLICATION_TYPE_EDIT_DEMAND;  }  if (APPLICATION_TYPE_ADD_DEMAND.equals(applicationType)) {    if (!(basicProperty.getSource().toString().equalsIgnoreCase(SOURCEOFDATA_DATAENTRY.toString()) || basicProperty.getSource().toString().equalsIgnoreCase(SOURCEOFDATA_MIGRATION.toString()))) {      addActionError(getText("add.dataEntry.source.error"));      return COMMON_FORM;    }    return APPLICATION_TYPE_ADD_DEMAND;  }  if (basicProperty.getProperty().getIsExemptedFromTax() && !(applicationType.equalsIgnoreCase(APPLICATION_TYPE_TAX_EXEMTION)) && !applicationType.equalsIgnoreCase(APPLICATION_TYPE_MODIFY_DATA_ENTRY)) {    addActionError(getText("action.error.msg.for.taxExempted"));    return COMMON_FORM;  }  if (APPLICATION_TYPE_EDIT_OWNER.equals(applicationType)) {    return APPLICATION_TYPE_EDIT_OWNER;  }  if (applicationType.equalsIgnoreCase(APPLICATION_TYPE_VACANCY_REMISSION) || applicationType.equalsIgnoreCase(APPLICATION_TYPE_TAX_EXEMTION)) {    if (!isDemandActive) {      addActionError(getText("error.msg.demandInactive"));      return COMMON_FORM;    } else     mode="commonSearch";  }  if (APPLICATION_TYPE_EDIT_COLLECTION.equals(applicationType)) {    if (!basicProperty.isEligible()) {      addActionError(getText("error.msg.editCollection.noteligible"));      return COMMON_FORM;    } else {      return APPLICATION_TYPE_EDIT_COLLECTION;    }  }  return applicationType;}  }
class C{  @Override public boolean handleWaterMovement(){  return this.worldObj.handleMaterialAcceleration(this.boundingBox,Material.water,this);}  }
class C{  public ConfigurationException(String explanation){  super(explanation);}  }
class C{  public static final int binarySearch(Object[] a,Object key,Comparator cp,int begin,int end){  int x1=begin;  int x2=end;  int i=x1 + (x2 - x1) / 2, c;  while (x1 < x2) {    c=cp.compare(a[i],key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public boolean restoreThinImagePair(String pairMgmtServerHostObjId,String snapshotGroupObjId,String replicationInfoObjId,String model) throws Exception {  InputStream responseStream=null;  ReplicationInfo replicationInfo=null;  boolean status=false;  try {    if (pairMgmtServerHostObjId != null && snapshotGroupObjId != null && replicationInfoObjId != null) {      log.info("Restore thin image pair started");      Map<String,Object> attributeMap=new HashMap<String,Object>();      Modify modifyOp=new Modify(HDSConstants.REPLICATION);      modifyOp.setOption(HDSConstants.RESTORE_INBAND2);      HDSHost host=new HDSHost();      host.setObjectID(pairMgmtServerHostObjId);      SnapshotGroup snapshotGroup=new SnapshotGroup();      snapshotGroup.setObjectID(snapshotGroupObjId);      replicationInfo=new ReplicationInfo();      replicationInfo.setObjectID(replicationInfoObjId);      attributeMap.put(HDSConstants.MODIFY,modifyOp);      attributeMap.put(HDSConstants.MODEL,model);      attributeMap.put(HDSConstants.HOST,host);      attributeMap.put(HDSConstants.SNAPSHOTGROUP,snapshotGroup);      attributeMap.put(HDSConstants.REPLICATION_INFO,replicationInfo);      String restoreThinImagePairQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.RESTORE_THIN_IMAGE_PAIR_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);      log.info("Query to restore thin image pair  Query: {}",restoreThinImagePairQuery);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,restoreThinImagePairQuery);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HITACHI_SMOOKS_THINIMAGE_CONFIG_FILE);        verifyErrorPayload(javaResult);        log.info("Successfully restored thin image pair");        status=true;        replicationInfo=javaResult.getBean(ReplicationInfo.class);        log.info("replicationInfo :{}",replicationInfo);      } else {        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete shadow image pair due to invalid response %1$s from server",response.getStatus()));      }    } else {      log.info("Replication info is not available on pair management server");    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return status;}  }
class C{  public static <T extends Map<?,?>>void notEmpty(String argumentName,T argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.size() == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  public static boolean containsAll(Iterable self,Object[] items){  return asCollection(self).containsAll(Arrays.asList(items));}  }
class C{  private Properties readProperties(String filePath) throws IOException {  File inFile=new File(filePath);  FileInputStream fis=null;  try {    fis=new FileInputStream(inFile);    if (props.size() > 0) {      for (      Object entryKey : props.keySet()) {        props.put(entryKey,"TODO");      }    }    props.load(fis);    return props;  }  finally {    if (fis != null) {      fis.close();    }  }}  }
class C{  public boolean next(){  if (keys_ == null)   return false;  i_++;  while (i_ < keys_.length) {    if (keys_[i_] != 0)     return true;    i_++;  }  return false;}  }
class C{  public _BuildReason(){  super();}  }
class C{  public void verifyDebug(String message,Throwable t){  verify(Level.FINE,message,t);}  }
class C{  private void processNonOptionToken(String value,boolean stopAtNonOption){  if (stopAtNonOption && (currentOption == null || !currentOption.hasArg())) {    eatTheRest=true;    tokens.add("--");  }  tokens.add(value);  currentOption=null;}  }
class C{  public float magnitude(){  return (float)Math.sqrt(magnitudeSquared());}  }
class C{  public Attendee(String name,String email){  this(name,email,null);}  }
class C{  public static void assertVector4fEquals(Vector4f expected,Vector4f actual,float delta){  Assert.assertEquals(expected.x,actual.x,delta);  Assert.assertEquals(expected.y,actual.y,delta);  Assert.assertEquals(expected.z,actual.z,delta);  Assert.assertEquals(expected.w,actual.w,delta);}  }
class C{  public static ResultSet nullResultSet(Connection conn){  return null;}  }
class C{  public void remove(){  throw new UnsupportedOperationException("This is a read only iterator.");}  }
class C{  public Record(){  super();  addParameterToRequest("record","toggle");}  }
class C{  public double deriv(){  return deriv;}  }
class C{  public static void line(double x0,double y0,double x1,double y1){  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));  draw();}  }
class C{  public void test_insertIntoSolutions_01() throws Exception {  if (!isSolutionSetUpdateEnabled()) {    return;  }  loadDataset(packagePath + "dataset-01.trig");{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("INSERT INTO %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE { SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  ?x rdf:type foaf:Person .\n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("}\n");    sb.append("ORDER BY ?name\n");    sb.append("}");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  INCLUDE %namedSet1 .\n");    sb.append("  ?x rdfs:label \"Mike\" .\n");    sb.append("}\n");    final TupleQueryResult ret=con.prepareTupleQuery(QueryLanguage.SPARQL,sb.toString()).evaluate();    final TupleQueryResult expected=readExpectedTupleQueryResult(packagePath + "test_insertIntoSolutions_01.srx");    compareTupleQueryResults(ret,expected);  }}  }
class C{  protected void appendSequence(final CharSequence sequence,final String name){  if (Strings.isNotEmpty(sequence)) {    queueCurrentSequence();    setCurrentSequence(new CharSequenceEntry(sequence,name));  }}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  AntPathStringMatcher(String pattern,String str,Map<String,String> uriTemplateVariables){  this.str=str;  this.uriTemplateVariables=uriTemplateVariables;  this.pattern=createPattern(pattern);}  }
class C{  public void clear(){  digest.reset();  digest.update(ipad);}  }
class C{  public Map<String,ComponentDescriptor> addComponentFolder(final String componentFolder) throws RequiredInputMissingException, IOException {  if (StringUtils.isBlank(componentFolder)) {    throw new RequiredInputMissingException("Missing required component folder");  }  CachedComponentClassLoader componentClassLoader=new CachedComponentClassLoader(CachedComponentClassLoader.class.getClassLoader());  componentClassLoader.initialize(componentFolder);  this.componentClassLoaders.add(componentClassLoader);  return componentClassLoader.getManagedComponents();}  }
class C{  void shadowTreeSelectedContentChanged(Set deselected,Set selected){  Iterator i=deselected.iterator();  while (i.hasNext()) {    Node n=(Node)i.next();    if (n.getNodeType() == Node.ELEMENT_NODE) {      unbind((Element)n);    }  }  i=selected.iterator();  while (i.hasNext()) {    Node n=(Node)i.next();    if (n.getNodeType() == Node.ELEMENT_NODE) {      bind((Element)n);    }  }}  }
class C{  public static Date convertToDate(String date){  if (date == null) {    return null;  }  try {    return getFullDateFormat().parse(date);  } catch (  ParseException e1) {  }  try {    return DatatypeConverter.parseDateTime(date).getTime();  } catch (  IllegalArgumentException e) {    Matcher m=W3C_NO_SECONDS_PATTERN.matcher(date);    if (m.matches()) {      try {        StringBuffer mungedDate=new StringBuffer(m.group(1));        mungedDate.append(m.group(2));        mungedDate.append(m.group(3));        mungedDate.append(m.group(4));        return W3C_NO_SECONDS_FORMAT.get().parse(mungedDate.toString());      } catch (      ParseException e2) {        return null;      }    } else {      return null;    }  }}  }
class C{  public ExpressionsSwitch(){  if (modelPackage == null) {    modelPackage=ExpressionsPackage.eINSTANCE;  }}  }
class C{  @Override public void startupServer() throws Exception {  server.setStopAtShutdown(true);  server.start();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public int encodeAndWrite(byte[] rawAudio) throws IOException {  int uploadedAudioSize=0;  ByteArrayInputStream ios=new ByteArrayInputStream(rawAudio);  byte[] data=new byte[SpeechConfiguration.FRAME_SIZE * 2];  int bufferSize, read;  while ((read=ios.read(data)) > 0) {    bufferSize=read;    byte[] pcmBuffer=new byte[read];    System.arraycopy(data,0,pcmBuffer,0,read);    ShortBuffer shortBuffer=ShortBuffer.allocate(bufferSize);    for (int i=0; i < read; i+=2) {      int b1=pcmBuffer[i] & 0xff;      int b2=pcmBuffer[i + 1] << 8;      shortBuffer.put((short)(b1 | b2));    }    shortBuffer.flip();    ByteBuffer opusBuffer=ByteBuffer.allocate(bufferSize);    int opus_encoded=JNAOpus.INSTANCE.opus_encode(this.opusEncoder,shortBuffer,SpeechConfiguration.FRAME_SIZE,opusBuffer,bufferSize);    opusBuffer.position(opus_encoded);    opusBuffer.flip();    byte[] opusData=new byte[opusBuffer.remaining()];    opusBuffer.get(opusData,0,opusData.length);    if (opus_encoded > 0) {      uploadedAudioSize+=opusData.length;      writer.writePacket(opusData,0,opusData.length);    }  }  ios.close();  return uploadedAudioSize;}  }
class C{  public void markFileTransferAsRead(String transferId) throws RcsServiceNotAvailableException, RcsPersistentStorageException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.markFileTransferAsRead(transferId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static byte[] readInputStream(InputStream i) throws IOException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  copy(i,b);  return b.toByteArray();}  }
class C{  static void waitForThreadToBlockOnDB(Thread t){  while (true) {    Map<Thread,StackTraceElement[]> threadMap=Thread.getAllStackTraces();    StackTraceElement[] elements=threadMap.get(t);    if (elements != null && elements.length > 1 && "wait".equals(elements[0].getMethodName()) && "filterConcurrentUpdate".equals(elements[1].getMethodName())) {      return;    }    try {      Thread.sleep(10);    } catch (    InterruptedException e1) {    }  }}  }
class C{  public void deleteLocalInstructionComment(final Instruction instruction,final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_node.getComments().deleteLocalInstructionComment(instruction.getNative(),comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.GROUP__NON_CAPTURING:    return nonCapturing != NON_CAPTURING_EDEFAULT;case RegularExpressionPackage.GROUP__PATTERN:  return pattern != null;}return super.eIsSet(featureID);}  }
class C{  public final void append(CharSequence text){  mInputView.append(text);}  }
class C{  public SQLDataException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public String byteStringNoSemicolon(){  StringBuffer retval=new StringBuffer();  try {    while (true) {      char next=lookAhead(0);      if (next == '\0' || next == '\n' || next == ';' || next == ',') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {    return retval.toString();  }  return retval.toString();}  }
class C{  public void testCase22(){  byte bBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int bSign=-1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public void push(SlackAttachment attachment) throws IOException {  if (attachment != null) {    slackService.push(webhookUrl,new SlackMessage(),user,icon,channel,parse,Lists.of(attachment));  }}  }
class C{  public EchoBreakpointRemovedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public void ifPresent(DoubleConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  public ServiceParameterException(String message,ParameterType type,String id,Object[] params){  super(message,params);  String enumName=type.toString();  enumName=enumName.substring(enumName.lastIndexOf(".") + 1);  setMessageKey(getMessageKey() + "." + enumName+ "."+ id);}  }
class C{  protected void checkWrite() throws IOException {  if (beginningOfLine) {    beginningOfLine=false;    int i=currentIndent;    while (i >= tabSize) {      super.write('\t');      i-=tabSize;    }    while (i > 0) {      super.write(' ');      --i;    }  }}  }
class C{  public ConcurrentWriteLockedOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener){  super(new WriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory,evictionListener));}  }
class C{  public void onStop(){}  }
