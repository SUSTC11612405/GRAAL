class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:03:05.867 -0400",hash_original_method="7B87EB758D2E1E15E358062221E5691B",hash_generated_method="9A81A7AF4AF0283C87E613C6120CCAF0") public void hide(){  mDismissed=true;  removeCallbacks(mDelayedShow);  long diff=System.currentTimeMillis() - mStartTime;  if (diff >= MIN_SHOW_TIME || mStartTime == -1) {    setVisibility(View.GONE);  } else {    if (!mPostedHide) {      postDelayed(mDelayedHide,MIN_SHOW_TIME - diff);      mPostedHide=true;    }  }}  }
class C{  @Deprecated public void reStart(String url,OnFileDownloadStatusListener onFileDownloadStatusListener){  DownloadStatusConfiguration.Builder builder=new Builder();  builder.addListenUrl(url);  builder.configAutoRelease(true);  registerDownloadStatusListener(onFileDownloadStatusListener,builder.build());  reStart(url);}  }
class C{  @After public void tearDown() throws Exception {  if (cache != null) {    cache.close();  }  if (system != null) {    final String removeExpectedPEM="<ExpectedException action=remove>" + expectedPrimaryErrorMsg + "</ExpectedException>";    final String removeExpectedREM="<ExpectedException action=remove>" + expectedRedundantErrorMsg + "</ExpectedException>";    system.getLogWriter().info(removeExpectedPEM);    system.getLogWriter().info(removeExpectedREM);    system.disconnect();  }}  }
class C{  public static int appendLocalFunctionNodeComment(final SQLProvider provider,final INaviFunctionNode functionNode,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02457: provider argument can not be null");  Preconditions.checkNotNull(functionNode,"IE02458: functionNode argument can not be null");  Preconditions.checkNotNull(commentText,"IE02459: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02460: userId argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final int moduleId=functionNode.getFunction().getModule().getConfiguration().getId();  final String function=" { ? = call append_function_node_comment(?, ?, ?, ?) } ";  try {    final CallableStatement appendCommentFunction=connection.prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,moduleId);      appendCommentFunction.setInt(3,functionNode.getId());      appendCommentFunction.setInt(4,userId);      appendCommentFunction.setString(5,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  protected V initialValue() throws Exception {  return null;}  }
class C{  public GridCacheVersionedEntry<K,V> newEntry(){  return newEntry;}  }
class C{  private void assertNotEmpty(final String s){  assertNotNull(s);  MoreAsserts.assertNotEqual(s,"");}  }
class C{  public void checkImsServices(){  for (  ImsService imsService : mServices.values()) {    if (imsService.isActivated()) {      imsService.check();    }  }}  }
class C{  public String substitute(String source) throws Exception {  int index=source.indexOf("${");  while (index >= 0) {    index+=2;    int endIndex=source.indexOf('}');    if (endIndex >= 0 && endIndex > index + 1) {      String key=source.substring(index,endIndex);      String replace=m_envVars.get(key);      if (replace != null) {        String toReplace="${" + key + "}";        source=source.replace(toReplace,replace);      } else {        throw new Exception("[Environment] Variable " + key + " doesn't seem to be set.");      }    } else {      break;    }    index=source.indexOf("${");  }  return source;}  }
class C{  public Boolean isNoRxLoss(){  return noRxLoss;}  }
class C{  public NotificationChain basicSetInitialStep(Step newInitialStep,NotificationChain msgs){  Step oldInitialStep=initialStep;  initialStep=newInitialStep;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.HISTORY_ENTRY__INITIAL_STEP,oldInitialStep,newInitialStep);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void enhancedNotLike(boolean useBindPrms,boolean useIndex) throws Exception {  Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  RegionAttributes regionAttributes=attributesFactory.create();  Region region=cache.createRegion("pos",regionAttributes);  String[] values=new String[]{"active","inactive"};  String[] likePredicates1=new String[]{"active","act%%ve","a%e","activ_","ac_ive","act__e","a%iv_","a_tiv%","ac%"};  String[] likePredicates2=new String[]{"%ctiv%","%c%iv%","%ctive","%%ti%","%"};  String[] likePredicates3=new String[]{"___ctive","___c_iv_","___ctiv%","____tive"};  for (int i=0; i < values.length; i++) {    region.put(new Integer(i),values[i]);  }  QueryService qs=cache.getQueryService();  if (useIndex) {    qs.createIndex("p",IndexType.FUNCTIONAL,"p","/pos.values p");  }  Query q;  SelectResults results;  for (int i=0; i < likePredicates1.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos p where NOT (p like '" + likePredicates1[i] + "')");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos p where NOT (p like $1)");      results=(SelectResults)q.execute(new Object[]{likePredicates1[i]});    }    List r=results.asList();    if (r.size() != 1 || !r.get(0).equals(values[1])) {      fail("Unexprected result. expected :" + values[1] + " for the like predicate1: "+ likePredicates1[i]+ " found : "+ (r.size() == 1 ? r.get(0) : "Result size not equal to 1"));    }  }  for (int i=0; i < likePredicates2.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos p where NOT (p like '" + likePredicates2[i] + "')");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos p where NOT (p like $1)");      results=(SelectResults)q.execute(new Object[]{likePredicates2[i]});    }    List r=results.asList();    if (r.size() != 0) {      fail("Unexprected result. expected nothing for the like predicate2: " + likePredicates2[i] + " found : "+ (r.size() != 0 ? r.get(0) + " Result size not equal to 0" : ""));    }  }  for (int i=0; i < likePredicates3.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos p where NOT (p like '" + likePredicates3[i] + "')");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos p where NOT (p like $1)");      results=(SelectResults)q.execute(new Object[]{likePredicates3[i]});    }    List r=results.asList();    if (r.size() != 1 || !r.get(0).equals(values[0])) {      fail("Unexprected result. expected :" + values[0] + " for the like predicate3: "+ likePredicates3[i]+ " found : "+ (r.size() == 1 ? r.get(0) : "Result size not equal to 1"));    }  }}  }
class C{  public void clear(){  decimalAt=0;  count=0;}  }
class C{  public static ContentProviderOperation newUpdateOperation(Uri uri,byte[] data){  ContentValues values=new ContentValues();  values.put(Columns.DATA,data);  return ContentProviderOperation.newUpdate(uri).withValues(values).build();}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIActionMap(list,null);  SwingUtilities.replaceUIInputMap(list,JComponent.WHEN_FOCUSED,null);}  }
class C{  public void removeDoubleClickListener(IDoubleClickListener listener){  doubleClickListenerList.remove(listener);}  }
class C{  public String encodeBody(){  String retval="";  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=LESS_THAN;  }  retval+=address.encode();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=GREATER_THAN;  }  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  public static String lcFirst(String str){  if (str == null)   return null; else   if (str.length() <= 1)   return str.toLowerCase(); else {    return str.substring(0,1).toLowerCase() + str.substring(1);  }}  }
class C{  public PointF mapViewToImage(PointF viewPoint){  float[] points=mTempValues;  points[0]=viewPoint.x;  points[1]=viewPoint.y;  mActiveTransform.invert(mActiveTransformInverse);  mActiveTransformInverse.mapPoints(points,0,points,0,1);  mapAbsoluteToRelative(points,points,1);  return new PointF(points[0],points[1]);}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  private static CreateDisksResponse checkCreateDisksResponse(CreateDisksResponse createDisksResponse) throws RpcException {  logger.info("Checking {}",createDisksResponse);switch (createDisksResponse.getResult()) {case OK:    break;case INVALID_RESERVATION:  throw new InvalidReservationException(createDisksResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(createDisksResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",createDisksResponse.getResult()));}return createDisksResponse;}  }
class C{  protected AnnotatedTypeFormatter createAnnotatedTypeFormatter(){  return new DefaultAnnotatedTypeFormatter(checker.hasOption("printVerboseGenerics"),checker.hasOption("printAllQualifiers"));}  }
class C{  public static String join(Collection<?> col,String delim){  if (UtilValidate.isEmpty(col))   return null;  StringBuilder buf=new StringBuilder();  Iterator<?> i=col.iterator();  while (i.hasNext()) {    buf.append(i.next());    if (i.hasNext())     buf.append(delim);  }  return buf.toString();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","huhst");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRANSACTION_ID;default :  return null;}}  }
class C{  public void add(T node){  for (int i=0; i < numberOfReplicas; i++) {    circle.put(hashFunction.hashString(node.toString() + i,Charset.defaultCharset()).asLong(),node);  }}  }
class C{  private DataResultSetTranslationConfiguration(AbstractDataResultSetReader readerOperator,DataResultSet dataResultSet){  reconfigure(dataResultSet);  reconfigure(readerOperator);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Double) {          double k=unwrapKey(key);          Object v=unwrapValue((V)val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  protected VertexImpl(){  super();}  }
class C{  public Activity currentActivity(){  if (mActivityStack == null)   return null;  return mActivityStack.lastElement();}  }
class C{  public static ShortBuffer copyOf(ShortBuffer buffer,int newSize){  if (newSize < 0 || newSize < buffer.remaining()) {    String message=Logging.getMessage("generic.SizeOutOfRange",newSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  ShortBuffer newBuffer=newShortBuffer(newSize,buffer.isDirect());  int pos=buffer.position();  try {    newBuffer.put(buffer);    newBuffer.rewind();  }  finally {    buffer.position(pos);  }  return newBuffer;}  }
class C{  public void disconnect(){  responseCode=-1;  if (pi != null) {    pi.finishTracking();    pi=null;  }  if (http != null) {    if (inputStream != null) {      HttpClient hc=http;      boolean ka=hc.isKeepingAlive();      try {        inputStream.close();      } catch (      IOException ioe) {      }      if (ka) {        hc.closeIdleConnection();      }    } else {      http.setDoNotRetry(true);      http.closeServer();    }    http=null;    connected=false;  }  cachedInputStream=null;  if (cachedHeaders != null) {    cachedHeaders.reset();  }}  }
class C{  protected void notifyShow(final JComponent panel){  for (  final IResultsPanelListener listener : m_listeners) {    try {      listener.show(panel);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  synchronized public String toString(){  final int[] order;  if (sortOrderForDisplay) {    order=(int[])getOrder().clone();    Arrays.sort(order);  } else {    order=getOrder();  }  StringBuffer sb=new StringBuffer();  sb.append("TxDag::\ncapacity=" + capacity() + ", size="+ size()+ "\n");  sb.append("index\t#in\t#out\n");  for (int i=0; i < order.length; i++) {    final int oi=order[i];    sb.append("" + order[i] + "\t"+ inbound[oi]+ "\t"+ outbound[oi]+ "\n");  }  for (int i=0; i < order.length; i++) {    final int oi=order[i];    for (int j=0; j < order.length; j++) {      final int oj=order[j];      if (W[oi][oj]) {        sb.append("\t" + transactions[oi] + " -> "+ transactions[oj]+ "\n");      }    }  }  sb.append("index");  for (int j=0; j < order.length; j++) {    sb.append("\t" + order[j]);  }  sb.append("\n");  boolean deadlock=false;  for (int i=0; i < order.length; i++) {    final int oi=order[i];    sb.append("" + oi);    for (int j=0; j < order.length; j++) {      final int oj=order[j];      final int count=M[oi][oj];      if (count != 0) {        sb.append("\t" + count);      } else {        sb.append("\t-");      }      if (oi == oj && count > 0) {        deadlock=true;      }    }    sb.append("\t" + transactions[oi] + "\n");  }  for (int j=0; j < order.length; j++) {    sb.append("\t" + transactions[order[j]]);  }  sb.append("\n");  sb.append("deadlock=" + deadlock + "\n");  return sb.toString();}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  dest.writeInt(mMcc);  dest.writeInt(mMnc);  dest.writeInt(mLac);  dest.writeInt(mCid);}  }
class C{  public void resetSubsamplingIndices(){  if (neuronList != null) {    subsamplingIndices=SimbrainMath.randPermute(0,neuronList.size());  }}  }
class C{  public int size(){  return mSize;}  }
class C{  public boolean isNativePickerTypeSupported(int pickerType){  return impl.isNativePickerTypeSupported(pickerType);}  }
class C{  public V removeAt(int index){  final Object old=mArray[(index << 1) + 1];  if (mSize <= 1) {    freeArrays(mHashes,mArray,mSize);    mHashes=EMPTY_INTS;    mArray=EMPTY_OBJECTS;    mSize=0;  } else {    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);      final int[] ohashes=mHashes;      final Object[] oarray=mArray;      allocArrays(n);      mSize--;      if (index > 0) {        System.arraycopy(ohashes,0,mHashes,0,index);        System.arraycopy(oarray,0,mArray,0,index << 1);      }      if (index < mSize) {        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(oarray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }    } else {      mSize--;      if (index < mSize) {        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(mArray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }      mArray[mSize << 1]=null;      mArray[(mSize << 1) + 1]=null;    }  }  return (V)old;}  }
class C{  public final CC y2(String y2){  return corrPos(y2,3);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.SHIFT_EXPRESSION;}  }
class C{  public void deleteBucketCORS(GenericRequest genericRequest){  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> parameters=new LinkedHashMap<String,String>();  parameters.put(SUBRESOURCE_CORS,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setParameters(parameters).setBucket(bucketName).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  protected Feature(RandomAccessFile raf,int offset) throws IOException {  raf.seek(offset);  featureParams=raf.readUnsignedShort();  lookupCount=raf.readUnsignedShort();  lookupListIndex=new int[lookupCount];  for (int i=0; i < lookupCount; i++) {    lookupListIndex[i]=raf.readUnsignedShort();  }}  }
class C{  protected String encodeAttribute(final String name){  return nameCoder.encodeAttribute(name);}  }
class C{  public IdentifiedLanguage(final String language,final Double confidence){  super(language);  this.confidence=confidence;}  }
class C{  protected void checkTEForGivenData(double[] var1,double[] var2,int[] kNNs,double[] expectedResults) throws Exception {  checkTEForGivenData(var1,var2,1,1,kNNs,expectedResults);}  }
class C{  private table printWorkflow(int activeNode,MWorkflow wf,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){  table imageTable=new table();  final int ROW=imageMap.length;  final int COL=imageMap[0].length;  for (int i=0; i < ROW; i++) {    tr aRow=new tr();    for (int j=0; j < COL; j++) {      td grid=new td();      grid.setAlign("center");      img spaceImage=createWorkflowImage("Spacer",0,null,true);      img arrowForwardImage=createWorkflowImage("ArrowFW_",0,null,true);      img arrowBackwardImage=createWorkflowImage("ArrowBW_",0,null,true);      img arrowDownImage=createWorkflowImage("ArrowDown_",0,null,true);      img normalNodeImage=null;      img activeNodeImage=null;      if (imageMap[i][j] <= 0) {        if (imageMap[i][j] == ARROW_FORWARD)         grid.addElement(arrowForwardImage);        if (imageMap[i][j] == ARROW_BACKWARD)         grid.addElement(arrowBackwardImage);        if (imageMap[i][j] == ARROW_DOWN)         grid.addElement(arrowDownImage);        if (imageMap[i][j] == SPACE)         grid.addElement(spaceImage);      } else {        int AD_Window_ID=0;        String url="";        String Target_Window="";        String parameters="";        String js_command="";        if (imageMap[i][j] == activeNode) {          AD_Window_ID=nodes[getIndex(imageMap[i][j],nodes_ID)].getAD_Window_ID();          url="'WWindow?AD_Window_ID=" + AD_Window_ID;          Target_Window="'WWindow" + AD_Window_ID + "'";          System.out.println("WorkFlow if(true)======" + url);          parameters=url + "'," + Target_Window;          js_command="popUp(" + parameters + ");submit()";          activeNodeImage=createWorkflowImage("mWorkFlow_",imageMap[i][j],js_command,true);          grid.addElement(activeNodeImage);          grid.addElement(new br());          grid.addElement("" + imageMap[i][j]);          grid.addElement(new br());          grid.addElement("<font color=blue>" + nodes[getIndex(imageMap[i][j],nodes_ID)].getName() + "</font>");        } else {          AD_Window_ID=nodes[getIndex(imageMap[i][j],nodes_ID)].getAD_Window_ID();          url="'WWindow?AD_Window_ID=" + AD_Window_ID;          Target_Window="'WWindow" + AD_Window_ID + "'";          System.out.println("WorkFlow else======" + url);          parameters=url + "'," + Target_Window;          js_command="popUp(" + parameters + ");submit()";          normalNodeImage=createWorkflowImage("mWorkFlow_",imageMap[i][j],js_command,false);          grid.addElement(normalNodeImage);          grid.addElement(new br());          grid.addElement("" + imageMap[i][j]);          grid.addElement(new br());          grid.addElement(nodes[getIndex(imageMap[i][j],nodes_ID)].getName());        }      }      aRow.addElement(grid);    }    imageTable.addElement(aRow);  }  return imageTable;}  }
class C{  public void tagGeneratorCommand(byte[] data) throws IOException {  if (tags != null) {    tags.tagGeneratorCommand(data);  }}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/quota") public QuotaInfo updateQuota(@PathParam("id") URI id,QuotaUpdateParam param) throws DatabaseException {  return updateQuota(getVirtualPool(Type.object,id),param);}  }
class C{  public void end(){}  }
class C{  public void testDeployWhenContainerDoesNotSupportDeployableType(){  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.EAR),null));  try {    deployer.deploy(new WAR("dummy"));    fail("Should have thrown a ContainerException here");  } catch (  ContainerException expected) {    assertEquals("WAR archives are not supported for deployment in [mycontainer]. " + "Got [dummy]",expected.getMessage());  }}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public static boolean isKPrefixed(String name){  if (name.length() < 2) {    return false;  }  if (isUpperCamelCase(name)) {    return name.charAt(0) == 'K' && Character.isUpperCase(name.charAt(1));  }  if (isLowerCamelCase(name)) {    return name.charAt(0) == 'k' && Character.isUpperCase(name.charAt(1));  }  return false;}  }
class C{  public MyConverter(String studyArea){  this.studyArea=studyArea;  if (this.studyArea.equalsIgnoreCase("eThekwini")) {    this.studyAreaCode=1;  } else {    log.warn("Do not have a distance -> time conversion function for " + studyArea);    throw new RuntimeException("Unable to convert.");  }}  }
class C{  public static ICallgraphView loadNativeCallgraph(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  final List<ICallgraphView> views=loadModuleCallgraphs(provider,module,viewTagManager,nodeTagManager,ViewType.Native);  if (views.size() != 1) {    throw new CouldntLoadDataException("Error: Malformed project");  }  return views.get(0);}  }
class C{  private MPayment createPayment(int C_Invoice_ID,int C_BPartner_ID,int C_Currency_ID,BigDecimal StmtAmt,BigDecimal TrxAmt,int C_BankAccount_ID,Timestamp DateTrx,Timestamp DateAcct,String Description,int AD_Org_ID){  BigDecimal PayAmt=TrxAmt;  if (PayAmt == null || Env.ZERO.compareTo(PayAmt) == 0)   PayAmt=StmtAmt;  if (C_Invoice_ID == 0 && (PayAmt == null || Env.ZERO.compareTo(PayAmt) == 0))   throw new IllegalStateException("@PayAmt@ = 0");  if (PayAmt == null)   PayAmt=Env.ZERO;  MPayment payment=new MPayment(getCtx(),0,get_TrxName());  payment.setAD_Org_ID(AD_Org_ID);  payment.setC_BankAccount_ID(C_BankAccount_ID);  payment.setTenderType(MPayment.TENDERTYPE_Check);  if (DateTrx != null)   payment.setDateTrx(DateTrx); else   if (DateAcct != null)   payment.setDateTrx(DateAcct);  if (DateAcct != null)   payment.setDateAcct(DateAcct); else   payment.setDateAcct(payment.getDateTrx());  payment.setDescription(Description);  if (C_Invoice_ID != 0) {    MInvoice invoice=new MInvoice(getCtx(),C_Invoice_ID,null);    payment.setC_DocType_ID(invoice.isSOTrx());    payment.setC_Invoice_ID(invoice.getC_Invoice_ID());    payment.setC_BPartner_ID(invoice.getC_BPartner_ID());    if (PayAmt.signum() != 0) {      payment.setC_Currency_ID(C_Currency_ID);      if (invoice.isSOTrx())       payment.setPayAmt(PayAmt); else       payment.setPayAmt(PayAmt.negate());      payment.setOverUnderAmt(invoice.getGrandTotal(true).subtract(payment.getPayAmt()));    } else {      payment.setC_Currency_ID(invoice.getC_Currency_ID());      payment.setPayAmt(invoice.getGrandTotal(true));    }  } else   if (C_BPartner_ID != 0) {    payment.setC_BPartner_ID(C_BPartner_ID);    payment.setC_Currency_ID(C_Currency_ID);    if (PayAmt.signum() < 0) {      payment.setPayAmt(PayAmt.abs());      payment.setC_DocType_ID(false);    } else {      payment.setPayAmt(PayAmt);      payment.setC_DocType_ID(true);    }  } else   return null;  payment.saveEx();  payment.processIt(MPayment.DOCACTION_Complete);  payment.saveEx();  return payment;}  }
class C{  private boolean canBePlacedAtPosition(final boolean requiresAllBound,final GroupNodeVarBindingInfo bindingInfo,final HashSet<IVariable<?>> knownBound,final Map<IVariable<?>,Integer> remainingMaybeBound,int i){  final Set<IVariable<?>> leftToBeBound=bindingInfo.leftToBeBound(knownBound);  if (leftToBeBound.isEmpty()) {    return true;  }  if (!requiresAllBound) {    boolean moreCanBeBound=false;    final Set<IVariable<?>> canBeBound=remainingMaybeBound.keySet();    for (    IVariable<?> leftToBeBoundVar : leftToBeBound) {      moreCanBeBound|=canBeBound.contains(leftToBeBoundVar);      if (moreCanBeBound) {        break;      }    }    if (!moreCanBeBound) {      return true;    }  }  return false;}  }
class C{  @GenIgnore static Record createRecord(String name,String address,Class type,JsonObject metadata){  return createRecord(name,address,type != null ? type.getName() : null,metadata);}  }
class C{  private void parseAndAddWallDetailsLocally(GetWallResponseModel mGetWallResponseModel){  for (int i=0; i < mGetWallResponseModel.search.size(); i++) {    if (i == mWallItemSize - 1) {      allLoaded=true;    } else {      allLoaded=false;    }    ContentValues values=new ContentValues(25);    values.put(DatabaseColumns.ID,mGetWallResponseModel.search.get(i).id);    values.put(DatabaseColumns.MESSAGE,mGetWallResponseModel.search.get(i).message);    values.put(DatabaseColumns.TAG_NAME,mGetWallResponseModel.search.get(i).tag_name);    values.put(DatabaseColumns.TAG_ID,mGetWallResponseModel.search.get(i).tag_id);    values.put(DatabaseColumns.TAG_USER_COUNT,mGetWallResponseModel.search.get(i).tagged_users_count);    values.put(DatabaseColumns.CHAT_USER_COUNT,mGetWallResponseModel.search.get(i).chat_users_count);    values.put(DatabaseColumns.COMMENT_USER_COUNT,mGetWallResponseModel.search.get(i).comments_count);    values.put(DatabaseColumns.USER_NAME,mGetWallResponseModel.search.get(i).wall_owner.name);    values.put(DatabaseColumns.USER_ID,mGetWallResponseModel.search.get(i).wall_owner.user_id);    if (mGetWallResponseModel.search.get(i).wall_owner.user_id.equals(AppConstants.UserInfo.INSTANCE.getId())) {      mWallItemSize--;    }    values.put(DatabaseColumns.DATE_TIME,mGetWallResponseModel.search.get(i).created_at);    values.put(DatabaseColumns.CITY,mGetWallResponseModel.search.get(i).city);    values.put(DatabaseColumns.COLOR,mGetWallResponseModel.search.get(i).group_color);    values.put(DatabaseColumns.COUNTRY,mGetWallResponseModel.search.get(i).country);    values.put(DatabaseColumns.GROUP_ID,mGetWallResponseModel.search.get(i).group_id);    values.put(DatabaseColumns.GROUP_NAME,mGetWallResponseModel.search.get(i).group_name);    if (TextUtils.isEmpty(mGetWallResponseModel.search.get(i).address)) {      values.put(DatabaseColumns.ADDRESS,Character.toUpperCase(mGetWallResponseModel.search.get(i).city.charAt(0)) + mGetWallResponseModel.search.get(i).city.substring(1));    } else {      values.put(DatabaseColumns.ADDRESS,mGetWallResponseModel.search.get(i).address);    }    try {      values.put(DatabaseColumns.TIMESTAMP_EPOCH,mMessageDateFormatter.getEpoch(mGetWallResponseModel.search.get(i).created_at));      values.put(DatabaseColumns.TIMESTAMP_EPOCH_UPDATED_AT,mMessageDateFormatter.getEpoch(mGetWallResponseModel.search.get(i).updated_at));      values.put(DatabaseColumns.TIMESTAMP_HUMAN,mMessageDateFormatter.getOutputTimestamp(mGetWallResponseModel.search.get(i).created_at));    } catch (    ParseException e) {      e.printStackTrace();    }    if (mGetWallResponseModel.search.get(i).wall_image != null) {      values.put(DatabaseColumns.WALL_IMAGES,mGetWallResponseModel.search.get(i).wall_image.image_url);    }    values.put(DatabaseColumns.USER_IMAGE,mGetWallResponseModel.search.get(i).wall_owner.image_url);    String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;    if (mFetchedOnOpen) {      DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLPOST,getTaskTag(),values,TableWallPosts.NAME,values,selection,new String[]{mGetWallResponseModel.search.get(i).id},true,this);    } else {      DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLPOST,getTaskTag(),values,TableWallPosts.NAME,values,selection,new String[]{mGetWallResponseModel.search.get(i).id},false,this);    }    if (mGetWallResponseModel.search.get(i).wall_items.size() != 0) {      for (int j=0; j < mGetWallResponseModel.search.get(i).wall_items.size(); j++) {        GetWallItemResponseModel.WallItem wallItem=mGetWallResponseModel.search.get(i).wall_items.get(j);        ContentValues valuesComments=new ContentValues();        valuesComments.put(DatabaseColumns.WALL_ID,mGetWallResponseModel.search.get(i).id);        valuesComments.put(DatabaseColumns.ID,wallItem.id);        valuesComments.put(DatabaseColumns.COMMENT,wallItem.comment);        valuesComments.put(DatabaseColumns.WALL_USER_ID,mGetWallResponseModel.search.get(i).wall_owner.user_id);        valuesComments.put(DatabaseColumns.USER_ID,wallItem.user_id);        valuesComments.put(DatabaseColumns.TYPE,AppConstants.CommentType.REFER);        valuesComments.put(DatabaseColumns.USER_NAME,wallItem.name);        valuesComments.put(DatabaseColumns.IMAGE_URL,wallItem.image_url);        valuesComments.put(DatabaseColumns.DATE_TIME,wallItem.created_at);        try {          valuesComments.put(DatabaseColumns.TIMESTAMP_EPOCH,mMessageDateFormatter.getEpoch(wallItem.created_at));          valuesComments.put(DatabaseColumns.TIMESTAMP_HUMAN,mMessageDateFormatter.getOutputTimestamp(wallItem.created_at));        } catch (        ParseException e) {          e.printStackTrace();        }        if (wallItem.tagged_users.size() > 0) {          valuesComments.put(DatabaseColumns.TAGGED_USER_IDS,wallItem.tagged_users.get(0).id);          valuesComments.put(DatabaseColumns.TAGGED_NAMES,wallItem.tagged_users.get(0).name);          valuesComments.put(DatabaseColumns.IS_PRESENT,wallItem.tagged_users.get(0).is_present + "");          if (wallItem.tagged_users.get(0).details != null) {            valuesComments.put(DatabaseColumns.TAGGED_USER_NUMBERS,wallItem.tagged_users.get(0).details.mobile_number);            valuesComments.put(DatabaseColumns.TAGGED_USER_EMAILS,wallItem.tagged_users.get(0).details.email);          }          valuesComments.put(DatabaseColumns.TAGGED_IMAGE_URLS,wallItem.tagged_users.get(0).image_url);          valuesComments.put(DatabaseColumns.TAGGED_USER_IDS,wallItem.tagged_users.get(0).user_id);          valuesComments.put(DatabaseColumns.TAGGED_IDS,wallItem.tagged_users.get(0).id);        }        String selectionWallId=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;        DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLCOMMENTS,getTaskTag(),valuesComments,TableWallComments.NAME,valuesComments,selectionWallId,new String[]{wallItem.id},false,this);      }    }    if (mGetWallResponseModel.search.get(i).wall_chats.size() != 0) {      for (int j=0; j < mGetWallResponseModel.search.get(i).wall_chats.size(); j++) {        GetCreateWallResponseModel.WallChats wallItem=mGetWallResponseModel.search.get(i).wall_chats.get(j);        ContentValues valuesComments=new ContentValues();        valuesComments.put(DatabaseColumns.WALL_ID,mGetWallResponseModel.search.get(i).id);        valuesComments.put(DatabaseColumns.ID,mGetWallResponseModel.search.get(i).id + wallItem.user_id);        valuesComments.put(DatabaseColumns.WALL_USER_ID,mGetWallResponseModel.search.get(i).wall_owner.user_id);        valuesComments.put(DatabaseColumns.TAGGED_USER_IDS,wallItem.user_id);        valuesComments.put(DatabaseColumns.TAGGED_NAMES,wallItem.name);        valuesComments.put(DatabaseColumns.TYPE,AppConstants.CommentType.CHAT);        valuesComments.put(DatabaseColumns.USER_ID,mGetWallResponseModel.search.get(i).wall_owner.user_id);        valuesComments.put(DatabaseColumns.USER_NAME,mGetWallResponseModel.search.get(i).wall_owner.name);        valuesComments.put(DatabaseColumns.TAGGED_IMAGE_URLS,wallItem.image_url);        valuesComments.put(DatabaseColumns.TAGGED_IDS,wallItem.user_id);        valuesComments.put(DatabaseColumns.IS_PRESENT,"true");        valuesComments.put(DatabaseColumns.DATE_TIME,wallItem.last_chat);        try {          valuesComments.put(DatabaseColumns.TIMESTAMP_EPOCH,mMessageDateFormatter.getEpoch(wallItem.last_chat));          valuesComments.put(DatabaseColumns.TIMESTAMP_HUMAN,mMessageDateFormatter.getOutputTimestamp(wallItem.last_chat));        } catch (        ParseException e) {          e.printStackTrace();        }        String selectionWallId=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;        DBInterface.updateAsync(AppConstants.QueryTokens.UPDATE_WALLCOMMENTS,getTaskTag(),valuesComments,TableWallComments.NAME,valuesComments,selectionWallId,new String[]{mGetWallResponseModel.search.get(i).id + wallItem.user_id},false,this);      }    }  }}  }
class C{  void runBenchmark() throws Exception {  time=benchmark.run(args);}  }
class C{  public EventSet remove(long timeout) throws InterruptedException {  if (timeout < 0) {    throw new IllegalArgumentException("Timeout cannot be negative");  }  EventSet eventSet;  while (true) {    EventSetImpl fullEventSet=removeUnfiltered(timeout);    if (fullEventSet == null) {      eventSet=null;      break;    }    eventSet=fullEventSet.userFilter();    if (!eventSet.isEmpty()) {      break;    }  }  if ((eventSet != null) && (eventSet.suspendPolicy() == JDWP.SuspendPolicy.ALL)) {    vm.notifySuspend();  }  return eventSet;}  }
class C{  private int levelOfProofStepLexeme(Token tok){  String im=tok.image;  if (im.substring(1,2).equals("*")) {    return -1;  }  ;  if (im.substring(1,2).equals("+")) {    return -2;  }  ;  return new Integer(im.substring(1,im.indexOf('>'))).intValue();}  }
class C{  public SpecificationRunnerExecutor debugEnabled(boolean enabled){  this.debugEnabled=enabled;  return this;}  }
class C{  private boolean havePreviousDigestAuthorizationAndShouldAbort(Request request,String nonce,boolean isStale){  final String previousAuthorizationHeader=request.header("Authorization");  if (previousAuthorizationHeader != null && previousAuthorizationHeader.startsWith("Digest")) {    return !isStale;  }  return false;}  }
class C{  public void moveDown(final URI location){  if (null != location) {    final String path=new File(checkUri(location)).getAbsolutePath();    int indexOf=externalLibraryLocations.indexOf(path);    if (indexOf >= 0 && indexOf < externalLibraryLocations.size() - 1) {      externalLibraryLocations.remove(indexOf);      externalLibraryLocations.add(indexOf + 1,path);    }  }}  }
class C{  public static String decodeAsUtf8(byte[] bytes,int offset,int length){  int i, j, n, b;  for (i=offset, j=offset + length, n=0; i < j; ++n) {switch (0xE0 & bytes[i++]) {case 0xE0:      ++i;case 0xC0:    ++i;}}char[] chars=new char[n];for (i=offset, j=offset + length, n=0; i < j; ) {chars[n++]=(char)(((b=bytes[i++]) >= 0 || i >= j) ? b : (b < -32 || i + 1 >= j) ? (((b & 0x3f) << 6) | (bytes[i++] & 0x3f)) : (((b & 0xf) << 12) | ((bytes[i++] & 0x3f) << 6) | (bytes[i++] & 0x3f)));}return new String(chars);}  }
class C{  public AtomicIntervalGuard(int expected){  array=new HashMap<Integer,ThreadPosition>(expected);}  }
class C{  public void readNodes(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    final String[] parts=line.split(";");    Node node=NetworkUtils.createNode(Id.createNodeId(parts[columnsIndices[0]]));    node.setCoord(new Coord(Double.parseDouble(parts[columnsIndices[1]]),Double.parseDouble(parts[columnsIndices[2]])));    network.addNode(node);    line=reader.readLine();  }}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public static void submitTopology(String name,Config heronConfig,HeronTopology topology) throws AlreadyAliveException, InvalidTopologyException {  Map<String,String> heronCmdOptions=Utils.readCommandLineOpts();  TopologyAPI.TopologyState initialState;  if (heronCmdOptions.get("cmdline.topology.initial.state") != null) {    initialState=TopologyAPI.TopologyState.valueOf(heronCmdOptions.get("cmdline.topology.initial.state"));  } else {    initialState=TopologyAPI.TopologyState.RUNNING;  }  LOG.log(Level.FINE,"To deploy a topology in initial state {0}",initialState);  TopologyAPI.Topology fTopology=topology.setConfig(heronConfig).setName(name).setState(initialState).getTopology();  assert fTopology.isInitialized();  if (heronCmdOptions.get("cmdline.topologydefn.tmpdirectory") != null) {    submitTopologyToFile(fTopology,heronCmdOptions);  } else {    throw new RuntimeException("topology definition temp directory not specified");  }}  }
class C{  public ExperimentBuilder withTrafficFraction(Double fraction){  if (fraction < 0 || fraction > 1) {    throw new BadTrafficFractionException();  }  this.trafficFraction=fraction;  return this;}  }
class C{  public void applyBodyLinearImpulse(Vec2 impulse,Vec2 point,boolean wake){  getBody().applyLinearImpulse(impulse,point,wake);}  }
class C{  public HttpCache(SSLContext sslContext,X509HostnameVerifier hostnameVerifier){  super();  _client=HttpClientFactory.getInstance(getDefaultRequestOptions().getMaxRedirects(),getDefaultRequestOptions().getAllowCircularRedirects(),getDefaultRequestOptions().getSocketTimeout(),getDefaultRequestOptions().getConnTimeout(),null,sslContext,hostnameVerifier);}  }
class C{  private void validateNames(Label label,Parameter parameter) throws Exception {  String[] options=label.getNames();  String name=parameter.getName();  if (!contains(options,name)) {    String require=label.getName();    if (name != require) {      if (name == null || require == null) {        throw new ConstructorException("Annotation does not match %s for '%s' in %s",label,name,parameter);      }      if (!name.equals(require)) {        throw new ConstructorException("Annotation does not match %s for '%s' in %s",label,name,parameter);      }    }  }}  }
class C{  private void clearCallData(){  if (null != mCall) {    mCall.removeListener(mListener);  }  mCall=null;  mCallView=null;  mSavedCallview=null;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public String toString(){  return getClass().getName() + "[source=" + source+ "]";}  }
class C{  public MessageArea addChoice(final int defaultSelection,final ChoiceItem... items){  setInitialised(true);  this.choiceDefaultSelection=defaultSelection;  this.choiceValues=items;  return this;}  }
class C{  public ParallelSequence(Steppable[] steps,int threads){  super(steps);  numThreads=threads;}  }
class C{  public String pay(double amount,String currency,String invoiceNumber){  return pay(amount,currency);}  }
class C{  @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouchEvent(MotionEvent ev){  return true;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    if (((KeyParameter)params).getKey().length > 8) {      throw new IllegalArgumentException("DES key too long - should be 8 bytes");    }    workingKey=generateWorkingKey(encrypting,((KeyParameter)params).getKey());    return;  }  throw new IllegalArgumentException("invalid parameter passed to DES init - " + params.getClass().getName());}  }
class C{  public int minCostII(int[][] costs){  if (costs == null || costs.length == 0 || costs[0].length == 0) {    return 0;  }  int n=costs.length;  int k=costs[0].length;  if (k == 1) {    return n == 1 ? costs[0][0] : -1;  }  int prevMin=0;  int prevSecMin=0;  int prevIndex=-1;  for (int i=0; i < n; i++) {    int curMin=Integer.MAX_VALUE;    int curSecMin=Integer.MAX_VALUE;    int curIndex=-1;    for (int j=0; j < k; j++) {      int val=costs[i][j] + (j == prevIndex ? prevSecMin : prevMin);      if (curIndex == -1) {        curMin=val;        curIndex=j;      } else       if (val < curMin) {        curSecMin=curMin;        curMin=val;        curIndex=j;      } else       if (val < curSecMin) {        curSecMin=val;      }    }    prevMin=curMin;    prevIndex=curIndex;    prevSecMin=curSecMin;  }  return prevMin;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public sub addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private static void initRequestId(ReleaseIPTask currentState){  if (currentState.requestId == null) {    currentState.requestId=UUID.randomUUID().toString();  }  LoggingUtils.setRequestId(currentState.requestId);}  }
class C{  public static PointDouble draw(DrawHandler drawHandler,String[] textLines,double width,PointDouble topLeft,Collection<Line1D> slopeNotPermittedAreas){  boolean splitIsNecessary=false;  double textWidth=width - getStaticWidthPadding();  for (  String l : textLines) {    if (TextSplitter.splitStringAlgorithm(l,textWidth,drawHandler).length > 1) {      splitIsNecessary=true;      break;    }  }  double height=getHeight(drawHandler,textLines,width);  if (!splitIsNecessary) {    textWidth=0;    for (    String l : textLines) {      textWidth=Math.max(textWidth,drawHandler.textWidth(l));    }    textWidth+=drawHandler.textWidth("n");  }  TextSplitter.drawText(drawHandler,textLines,topLeft.x + HEADER_TEXT_X_PADDING,topLeft.y,textWidth,height,AlignHorizontal.LEFT,AlignVertical.CENTER);  LineType oldLt=drawHandler.getLineType();  drawHandler.setLineType(LineType.SOLID);  double slopeStartX=topLeft.x + textWidth + HEADER_TEXT_X_PADDING * 2;  double slopeEndX=slopeStartX + HEADER_PENTAGON_SLOPE_WIDTH;  for (  Line1D line : slopeNotPermittedAreas) {    if (line.getLow() > slopeEndX) {      break;    } else     if (line.isIntersecting(new Line1D(slopeStartX,slopeEndX))) {      slopeStartX=line.getHigh();      slopeEndX=slopeStartX + HEADER_PENTAGON_SLOPE_WIDTH;      break;    }  }  drawHandler.drawLines(new PointDouble[]{new PointDouble(topLeft.x,topLeft.y + height),new PointDouble(slopeStartX,topLeft.y + height),new PointDouble(slopeEndX,topLeft.y + height * (1 - HEADER_PENTAGON_SLOPE_HEIGHT_PERCENTAGE)),new PointDouble(slopeEndX,topLeft.y)});  drawHandler.setLineType(oldLt);  return new PointDouble(slopeEndX - topLeft.x,height);}  }
class C{  public ASN1InputStream(InputStream input,int limit,boolean lazyEvaluate){  super(input);  this.limit=limit;  this.lazyEvaluate=lazyEvaluate;  this.tmpBuffers=new byte[11][];}  }
class C{  public Vector(List<Double> lst){  super(lst.size(),1);  for (int i=0; i < lst.size(); i++) {    setValue(i,lst.get(i));  }}  }
class C{  private static String[] sampleCharactersFromNetwork(String initialization,MultiLayerNetwork net,Random rng,Map<Integer,Character> intToChar,int charactersToSample,int numSamples){  if (initialization == null) {    int randomCharIdx=rng.nextInt(intToChar.size());    initialization=String.valueOf(intToChar.get(randomCharIdx));  }  INDArray initializationInput=Nd4j.zeros(numSamples,intToChar.size(),initialization.length());  char[] init=initialization.toCharArray();  for (int i=0; i < init.length; i++) {    int idx=CHAR_TO_INT.get(init[i]);    for (int j=0; j < numSamples; j++) {      initializationInput.putScalar(new int[]{j,idx,i},1.0f);    }  }  StringBuilder[] sb=new StringBuilder[numSamples];  for (int i=0; i < numSamples; i++)   sb[i]=new StringBuilder(initialization);  net.rnnClearPreviousState();  INDArray output=net.rnnTimeStep(initializationInput);  output=output.tensorAlongDimension(output.size(2) - 1,1,0);  for (int i=0; i < charactersToSample; i++) {    INDArray nextInput=Nd4j.zeros(numSamples,intToChar.size());    for (int s=0; s < numSamples; s++) {      double[] outputProbDistribution=new double[intToChar.size()];      for (int j=0; j < outputProbDistribution.length; j++)       outputProbDistribution[j]=output.getDouble(s,j);      int sampledCharacterIdx=sampleFromDistribution(outputProbDistribution,rng);      nextInput.putScalar(new int[]{s,sampledCharacterIdx},1.0f);      sb[s].append(intToChar.get(sampledCharacterIdx));    }    output=net.rnnTimeStep(nextInput);  }  String[] out=new String[numSamples];  for (int i=0; i < numSamples; i++)   out[i]=sb[i].toString();  return out;}  }
class C{  @Override protected void onStop(){  super.onStop();  ResponseHandler.unregister(mDungeonsPurchaseObserver);}  }
class C{  public void logError(Object message){  logInternal(ERROR,message,null);}  }
class C{  public RuntimeCryptoException(String message){  super(message);}  }
class C{  protected void makeOrderedRenderable(DrawContext dc){  if (this.lines == null || this.position == null)   return;  this.computeGeometryIfNeeded(dc);  double horizon=dc.getView().getHorizonDistance();  if (!dc.is2DGlobe() && this.thisFramesOrderedLabel.eyeDistance > horizon)   return;  if (this.intersectsFrustum(dc,this.thisFramesOrderedLabel))   dc.addOrderedRenderable(this.thisFramesOrderedLabel);  if (dc.isPickingMode())   this.pickLayer=dc.getCurrentLayer();}  }
class C{  public boolean cancelRecoveriesForShard(ShardId shardId,String reason,Predicate<RecoveryStatus> shouldCancel){  boolean cancelled=false;  for (  RecoveryStatus status : onGoingRecoveries.values()) {    if (status.shardId().equals(shardId)) {      boolean cancel=false;      if (status.tryIncRef()) {        try {          cancel=shouldCancel.apply(status);        }  finally {          status.decRef();        }      }      if (cancel && cancelRecovery(status.recoveryId(),reason)) {        cancelled=true;      }    }  }  return cancelled;}  }
class C{  public void add(RegularTimePeriod period,double open,double high,double low,double close){  if (getItemCount() > 0) {    OHLCItem item0=(OHLCItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new OHLCItem(period,open,high,low,close),true);}  }
class C{  private int sieveSearch(int limit,int start){  if (start >= limit)   return -1;  int index=start;  do {    if (!get(index))     return index;    index++;  } while (index < limit - 1);  return -1;}  }
class C{  public PasteBuilder(ClipboardHolder holder,Extent targetExtent,WorldData targetWorldData){  checkNotNull(holder);  checkNotNull(targetExtent);  checkNotNull(targetWorldData);  this.clipboard=holder.getClipboard();  this.worldData=holder.getWorldData();  this.transform=holder.getTransform();  this.targetExtent=targetExtent;  this.targetWorldData=targetWorldData;}  }
class C{  public Boolean isLocked(){  return locked;}  }
class C{  @Override protected EClass eStaticClass(){  return OrientedPackage.Literals.COMPONENT;}  }
class C{  private static URI buildUriStringFromParamsHash(Hashtable<String,String> uriParamsHash,String path) throws URISyntaxException {  URIBuilder urib=new URIBuilder();  urib.setScheme("http");  urib.setHost(TMDB_BASE_URL);  urib.setPath(path);  urib.addParameter("api_key",themoviedbapikey);  if (uriParamsHash != null) {    Set<String> keys=uriParamsHash.keySet();    for (    String key : keys) {      urib.addParameter(key,uriParamsHash.get(key));    }  }  return urib.build();}  }
class C{  public static String updateLabels(String instList,LocalVariableMap labelValueMapping) throws DMLRuntimeException {  if (!instList.contains(Lop.VARIABLE_NAME_PLACEHOLDER))   return instList;  StringBuilder updateInstList=new StringBuilder();  String[] ilist=instList.split(Lop.INSTRUCTION_DELIMITOR);  for (int i=0; i < ilist.length; i++) {    if (i > 0)     updateInstList.append(Lop.INSTRUCTION_DELIMITOR);    updateInstList.append(updateInstLabels(ilist[i],labelValueMapping));  }  return updateInstList.toString();}  }
class C{  public static void sendToNearby(World world,BlockPos pos,IMessage toSend){  if (world instanceof WorldServer) {    WorldServer ws=((WorldServer)world);    for (    EntityPlayer player : ws.playerEntities) {      EntityPlayerMP playerMP=((EntityPlayerMP)player);      if (playerMP.getDistanceSq(pos) < 64 * 64 && ws.getPlayerChunkMap().isPlayerWatchingChunk(playerMP,pos.getX() >> 4,pos.getZ() >> 4)) {        HANDLER.sendTo(toSend,playerMP);      }    }  }}  }
class C{  public ObjectFactory(){}  }
class C{  private String transformSQLCase(String sql){  StringBuilder s=new StringBuilder(sql);  try {    PositionedStringReader r=new PositionedStringReader(sql);    StreamTokenizer st=new StreamTokenizer(r);    st.resetSyntax();    for (    char quote : valueQuotes)     st.quoteChar(quote);    int start=0;    int end=0;    while (st.nextToken() != StreamTokenizer.TT_EOF) {      if (end < (r.getCurrentPosition() - 1) || r.getCurrentPosition() >= (sql.length())) {        String str=sql.substring(start,end + 1);        str=transformCase(str);        s.replace(start,end + 1,str);        start=r.getCurrentPosition();      }      end=r.getCurrentPosition();    }  } catch (  IOException e) {    logger.warn("Unexpected exception while transforming SQL statement case: " + e);  }  return s.toString();}  }
class C{  public CreateSubscriptionResponse clone(){  CreateSubscriptionResponse result=new CreateSubscriptionResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.SubscriptionId=SubscriptionId;  result.RevisedPublishingInterval=RevisedPublishingInterval;  result.RevisedLifetimeCount=RevisedLifetimeCount;  result.RevisedMaxKeepAliveCount=RevisedMaxKeepAliveCount;  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.607 -0500",hash_original_method="B311542306ECD32A0F10ABE0BAAE80D2",hash_generated_method="C756A705C3626349AFC522FCA146EF5D") public void parse(AuthenticationHeader header) throws ParseException {  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  Token type=lexer.getNextToken();  this.lexer.SPorHT();  header.setScheme(type.getTokenValue());  try {    while (lexer.lookAhead(0) != '\n') {      this.parseParameter(header);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == '\n' || la == '\0')       break;      this.lexer.match(',');      this.lexer.SPorHT();    }  } catch (  ParseException ex) {    throw ex;  }}  }
class C{  private static boolean areClasspathsEqual(IClasspathEntry[] newClasspath,IPath newOutputLocation,IClasspathEntry[] otherClasspathWithOutput){  if (otherClasspathWithOutput == null || otherClasspathWithOutput.length == 0)   return false;  int length=otherClasspathWithOutput.length;  if (length != newClasspath.length + 1)   return false;  for (int i=0; i < length - 1; i++) {    if (!otherClasspathWithOutput[i].equals(newClasspath[i]))     return false;  }  IClasspathEntry output=otherClasspathWithOutput[length - 1];  if (output.getContentKind() != ClasspathEntry.K_OUTPUT || !output.getPath().equals(newOutputLocation))   return false;  return true;}  }
class C{  private byte[] createPacket(GridClientMessage msg) throws IOException {  msg.clientId(id);  ByteBuffer res=marsh.marshal(msg,45);  ByteBuffer slice=res.slice();  slice.put((byte)0x90);  slice.putInt(res.remaining() - 5);  slice.putLong(msg.requestId());  slice.put(U.uuidToBytes(msg.clientId()));  slice.put(U.uuidToBytes(msg.destinationId()));  byte[] arr=new byte[res.remaining()];  res.get(arr);  return arr;}  }
class C{  @Uninterruptible public static void snipObsoleteCompiledMethods(){  Magic.isync();  if (!scanForObsoleteMethods)   return;  scanForObsoleteMethods=false;  Magic.sync();  int max=numCompiledMethods();  for (int i=0; i < max; i++) {    CompiledMethod cm=getCompiledMethodUnchecked(i);    if (cm != null) {      if (cm.isActiveOnStack()) {        if (cm.isObsolete()) {          scanForObsoleteMethods=true;          Magic.sync();        }        cm.clearActiveOnStack();      } else {        if (cm.isObsolete()) {          setCompiledMethod(i,null);        }      }    }  }}  }
class C{  public void unsetDecodeTables(){  this.qTables=null;  this.DCHuffmanTables=null;  this.ACHuffmanTables=null;}  }
class C{  public boolean addRule(Rule r){  if (!validRule(r)) {    return false;  }  rules.add(r);  updateVarsAndTerminals(r);  return true;}  }
class C{  public boolean isAltGlyph(){  return this.isAltGlyph;}  }
class C{  public boolean isValid(World world){  return true;}  }
class C{  public Matrix rightMultiply(Permutation p){  int[] pVec=p.getVector();  if (pVec.length != numColumns) {    throw new ArithmeticException("length mismatch");  }  GF2Matrix result=new GF2Matrix(numRows,numColumns);  for (int i=numColumns - 1; i >= 0; i--) {    int q=i >>> 5;    int r=i & 0x1f;    int pq=pVec[i] >>> 5;    int pr=pVec[i] & 0x1f;    for (int j=numRows - 1; j >= 0; j--) {      result.matrix[j][q]|=((matrix[j][pq] >>> pr) & 1) << r;    }  }  return result;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean isOlderOrEqualVersionOf(PersistentMemberID id){  return (id != null) && (diskStoreId.equals(id.diskStoreId)) && (timeStamp <= id.timeStamp && (timeStamp < id.timeStamp || version <= id.version));}  }
class C{  MyDate(long elapsedTime){  setDate(elapsedTime);}  }
class C{  private static Date parseDateWithLeniency(final String str,final Locale locale,final String[] parsePatterns,final boolean lenient) throws ParseException {  if (str == null || parsePatterns == null) {    throw new IllegalArgumentException("Date and Patterns must not be null");  }  SimpleDateFormat parser;  if (locale == null) {    parser=new SimpleDateFormat();  } else {    parser=new SimpleDateFormat("",locale);  }  parser.setLenient(lenient);  final ParsePosition pos=new ParsePosition(0);  for (  final String parsePattern : parsePatterns) {    String pattern=parsePattern;    if (parsePattern.endsWith("ZZ")) {      pattern=pattern.substring(0,pattern.length() - 1);    }    parser.applyPattern(pattern);    pos.setIndex(0);    String str2=str;    if (parsePattern.endsWith("ZZ")) {      str2=str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$","$1$2");    }    final Date date=parser.parse(str2,pos);    if (date != null && pos.getIndex() == str2.length()) {      return date;    }  }  throw new ParseException("Unable to parse the date: " + str,-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:35.140 -0500",hash_original_method="F8F3061CB658BFF4D286A709EC298A75",hash_generated_method="E1809C03B742FCFD7814F9D2D09ABC71") static public IServiceManager asInterface(IBinder obj){  if (obj == null) {    return null;  }  IServiceManager in=(IServiceManager)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new ServiceManagerProxy(obj);}  }
class C{  public byte[] toByteArray(){  ByteBuffer buffer=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  xStats.writeTo(buffer);  yStats.writeTo(buffer);  buffer.putDouble(sumOfProductsOfDeltas);  return buffer.array();}  }
class C{  public void resetStats(){  m_msgsRcvdPerSec.reset();  m_msgsSentPerSec.reset();  m_totalMsgsRcvd.reset();  m_totalMsgsSent.reset();}  }
class C{  public void write(FastPreferenceData<?,?> prefData,OutputStream uo,OutputStream io) throws IOException {  BiConsumer<FastPreferenceData<?,?>,OutputStream> saver=Unchecked.biConsumer(null);  saver.accept(prefData,uo);  saver.accept(new TransposedPreferenceData<>(prefData),io);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public int export(ConstantPool target){  return target.addLong(_value).getIndex();}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public OuterEdgeLayout(double gap){  super(gap,gap);}  }
class C{  public Element writeBeanVisual(Element parent,Object o,String name) throws Exception {  Element node;  BeanVisual visual;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  visual=(BeanVisual)o;  node=writeToXML(parent,o,name);  invokeWriteToXML(node,visual.getIconPath(),VAL_ICONPATH);  invokeWriteToXML(node,visual.getAnimatedIconPath(),VAL_ANIMATEDICONPATH);  return node;}  }
class C{  public static boolean loadProperties(String filename){  boolean loadOK=true;  boolean firstTime=false;  s_prop=new Properties();  FileInputStream fis=null;  try {    fis=new FileInputStream(filename);    s_prop.load(fis);    fis.close();  } catch (  FileNotFoundException e) {    log.warning(filename + " not found");    loadOK=false;  }catch (  Exception e) {    log.log(Level.SEVERE,filename + " - " + e.toString());    loadOK=false;  }catch (  Throwable t) {    log.log(Level.SEVERE,filename + " - " + t.toString());    loadOK=false;  }  if (!loadOK || s_prop.getProperty(P_TODAY,"").equals("")) {    log.config(filename);    firstTime=true;    if (isShowLicenseDialog())     if (!IniDialog.accept())     System.exit(-1);    checkProperties();  }  if (!loadOK || firstTime)   saveProperties(true);  s_loaded=true;  log.info(filename + " #" + s_prop.size());  s_propertyFileName=filename;  return firstTime;}  }
class C{  static ComputedDayOfField ofWeekOfMonthField(WeekFields weekDef){  return new ComputedDayOfField("WeekOfMonth",weekDef,WEEKS,MONTHS,WEEK_OF_MONTH_RANGE);}  }
class C{  public void addDocument(String referenceURI,Transforms trans,String digestURI,String referenceId,String referenceType) throws XMLSignatureException {  this.signedInfo.addDocument(this.baseURI,referenceURI,trans,digestURI,referenceId,referenceType);}  }
class C{  public Exchange(InputStream in,OutputStream out,boolean asInitiator,FriendStore friendStore,MessageStore messageStore,ExchangeCallback callback) throws IllegalArgumentException {  this.in=in;  this.out=out;  this.friendStore=friendStore;  this.messageStore=messageStore;  this.asInitiator=asInitiator;  this.callback=callback;  if (in == null) {    throw new IllegalArgumentException("Input stream for exchange is null.");  }  if (out == null) {    throw new IllegalArgumentException("Output stream for exchange is null.");  }  if (friendStore == null) {    throw new IllegalArgumentException("Friend store for exchange is null.");  }  if (messageStore == null) {    throw new IllegalArgumentException("Message store for exchange is null.");  }  if (callback == null) {    Log.w(TAG,"No callback provided for exchange - nothing would happen locally!");    throw new IllegalArgumentException("No callback provided for exchange.");  }}  }
class C{  public DateTime toDateTimeAtStartOfDay(){  return toDateTimeAtStartOfDay(null);}  }
class C{  public long numCqsOnClient(){  return this.cqService.getCqServiceVsdStats().getNumCqsOnClient();}  }
class C{  @Inline @Entrypoint public static void extentFieldWrite(Object ref,Extent value,Offset offset,int locationMetadata){  if (NEEDS_EXTENT_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().extentWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static byte[] toBytes(int x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos++]=(byte)(x >> 8);  bytes[bytePos++]=(byte)(x >> 16);  bytes[bytePos]=(byte)(x >> 24);  return bytes;}  }
class C{  public void testGenerateDomainLimit() throws Exception {  ArrayList<URLCrawlDatum> list=new ArrayList<URLCrawlDatum>();  list.add(createURLCrawlDatum("http://a.example.com/index.html",1,1));  list.add(createURLCrawlDatum("http://b.example.com/index.html",1,1));  list.add(createURLCrawlDatum("http://c.example.com/index.html",1,1));  createCrawlDB(list);  Configuration myConfiguration=new Configuration(conf);  myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2);  myConfiguration.set(Generator.GENERATOR_COUNT_MODE,Generator.GENERATOR_COUNT_VALUE_DOMAIN);  Path generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  Path fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  ArrayList<URLCrawlDatum> fetchList=readContents(fetchlistPath);  assertEquals(1,fetchList.size());  myConfiguration=new Configuration(myConfiguration);  myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3);  generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  fetchList=readContents(fetchlistPath);  assertEquals(2,fetchList.size());  myConfiguration=new Configuration(myConfiguration);  myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,4);  generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  fetchList=readContents(fetchlistPath);  assertEquals(3,fetchList.size());}  }
class C{  private String makeMetalinkDocument(Iterable<Product> lp) throws ParserConfigurationException, TransformerException {  MetalinkBuilder mb=new MetalinkBuilder();  for (  Product p : lp) {    String product_entity=configurationManager.getServerConfiguration().getExternalUrl() + "odata/v1/Products('" + p.getUuid()+ "')/$value";    MetalinkFileBuilder fb=mb.addFile(new File(p.getDownload().getPath()).getName()).addUrl(product_entity,null,0);    if (!p.getDownload().getChecksums().isEmpty()) {      Map<String,String> checksums=p.getDownload().getChecksums();      for (      String algo : checksums.keySet())       fb.setHash(algo,checksums.get(algo));    }  }  StringWriter sw=new StringWriter();  Document doc=mb.build();  Transformer transformer=TransformerFactory.newInstance().newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");  transformer.transform(new DOMSource(doc),new StreamResult(sw));  return sw.toString();}  }
class C{  public static boolean deltree(File directory){  if (directory == null || !directory.exists()) {    return true;  }  boolean result=true;  if (directory.isFile()) {    result=directory.delete();  } else {    File[] list=directory.listFiles();    for (int i=list.length; i-- > 0; ) {      if (!deltree(list[i])) {        result=false;      }    }    if (!directory.delete()) {      result=false;    }  }  return result;}  }
class C{  public static void FNTConfigRemoveCache(){  configurations.clear();}  }
class C{  public String toString(){  return getClass().getSimpleName() + "{filename=" + getFile()+ ",uuid="+ getUUID()+ ",createTime="+ getCreateTime()+ ",commitTime="+ getCommitTime()+ "}";}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z != 0) {            val=0;            for (i=0; i < 8; i++) {              if (image.getValue(row + dY[i],col + dX[i]) != z) {                val=z;                break;              }            }            output.setValue(row,col,val);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static String[] splitLine(final String line){  final int ix0=line.indexOf('#');  final int ix=ix0 == -1 ? line.length() : ix0;  final String lessComment=line.substring(0,ix);  if (lessComment.matches("^\\s*$")) {    return null;  }  return lessComment.split("\\s+");}  }
class C{  protected boolean hasCustomize(){  return false;}  }
class C{  public static org.oscm.vo.VOMarketplace convertToApi(org.oscm.internal.vo.VOMarketplace oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOMarketplace newVO=new org.oscm.vo.VOMarketplace();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setCategoriesEnabled(oldVO.isCategoriesEnabled());  newVO.setMarketplaceId(oldVO.getMarketplaceId());  newVO.setName(oldVO.getName());  newVO.setOpen(oldVO.isOpen());  newVO.setOwningOrganizationId(oldVO.getOwningOrganizationId());  newVO.setOwningOrganizationName(oldVO.getOwningOrganizationName());  newVO.setReviewEnabled(oldVO.isReviewEnabled());  newVO.setSocialBookmarkEnabled(oldVO.isSocialBookmarkEnabled());  newVO.setTaggingEnabled(oldVO.isTaggingEnabled());  return newVO;}  }
class C{  public BlockingIOPbrpcClient(String ip,int port,int connTimeout,int readTimeout){  this(null,true,ip,port,connTimeout,readTimeout);}  }
class C{  protected void actionButton(VButton vButton){  log.info(vButton.toString());  if (m_curTab.hasChangedCurrentTabAndParents()) {    String msg=CLogger.retrieveErrorString("Please ReQuery Window");    ADialog.error(m_curWindowNo,this,null,msg);    return;  }  boolean startWOasking=false;  String col=vButton.getColumnName();  if (col.equals("Record_ID")) {    int AD_Table_ID=Env.getContextAsInt(m_ctx,m_curWindowNo,"AD_Table_ID");    int Record_ID=Env.getContextAsInt(m_ctx,m_curWindowNo,"Record_ID");    AEnv.zoom(AD_Table_ID,Record_ID);    return;  }  if (m_curTab.needSave(true,false))   if (!cmd_save(true))   return;  for (  GridTab includedTab : m_curTab.getIncludedTabs()) {    if (includedTab.needSave(true,false))     if (!includedTab.dataSave(true))     return;  }  int table_ID=m_curTab.getAD_Table_ID();  int record_ID=m_curTab.getRecord_ID();  if (record_ID == -1 && m_curTab.getKeyColumnName().equals("AD_Language"))   record_ID=Env.getContextAsInt(m_ctx,m_curWindowNo,"AD_Language_ID");  if (record_ID == -1 && (vButton.getProcess_ID() == 306 || vButton.getProcess_ID() == 307)) {    Integer id=(Integer)m_curTab.getValue("AD_ChangeLog_ID");    record_ID=id.intValue();  }  if (record_ID == -1 && m_curTab.getKeyColumnName().endsWith("_ID")) {    ADialog.error(m_curWindowNo,this,"SaveErrorRowNotFound");    return;  }  boolean isProcessMandatory=false;  if (col.equals("PaymentRule")) {    VPayment vp=new VPayment(m_curWindowNo,m_curTab,vButton);    if (vp.isInitOK())     vp.setVisible(true);    vp.dispose();    if (vp.needSave()) {      cmd_save(false);      cmd_refresh();    }  } else   if (col.equals("DocAction")) {    isProcessMandatory=true;    VDocAction vda=new VDocAction(m_curWindowNo,m_curTab,vButton,record_ID);    if (vda.getNumberOfOptions() == 0) {      vda.dispose();      log.info("DocAction - No Options");      return;    } else {      vda.setVisible(true);      if (!vda.isStartProcess())       return;      startWOasking=true;      vda.dispose();    }  } else   if (col.equals("CreateFrom")) {    if (vButton.getProcess_ID() <= 0) {      ICreateFrom cf=VCreateFromFactory.create(m_curTab);      if (cf != null) {        if (cf.isInitOK()) {          cf.showWindow();          cf.closeWindow();          m_curTab.dataRefresh();        } else         cf.closeWindow();        return;      }    }  } else   if (col.equals("Posted") && MRole.getDefault().isShowAcct()) {    String processed=Env.getContext(m_ctx,m_curWindowNo,"Processed");    if (!processed.equals("Y")) {      String docStatus=Env.getContext(m_ctx,m_curWindowNo,"DocStatus");      if (DocAction.STATUS_Completed.equals(docStatus) || DocAction.STATUS_Closed.equals(docStatus) || DocAction.STATUS_Reversed.equals(docStatus)|| DocAction.STATUS_Voided.equals(docStatus))       ; else {        ADialog.error(m_curWindowNo,this,"PostDocNotComplete");        return;      }    }    int tableId=Env.getContextAsInt(m_ctx,m_curWindowNo,"AD_Table_ID",true);    int recordId=Env.getContextAsInt(m_ctx,m_curWindowNo,"Record_ID",true);    if (tableId == 0 || recordId == 0) {      tableId=m_curTab.getAD_Table_ID();      recordId=m_curTab.getRecord_ID();    }    Object ps=m_curTab.getValue("Posted");    if (ps != null && ps.equals("Y")) {      new org.compiere.acct.AcctViewer(Env.getContextAsInt(m_ctx,m_curWindowNo,"AD_Client_ID"),tableId,recordId);    } else {      if (ADialog.ask(m_curWindowNo,this,"PostImmediate?")) {        boolean force=ps != null && !ps.equals("N");        String error=AEnv.postImmediate(m_curWindowNo,Env.getAD_Client_ID(m_ctx),tableId,recordId,force);        if (error != null)         ADialog.error(m_curWindowNo,this,"PostingError-N",error);        cmd_refresh();      }    }    return;  }  log.config("Process_ID=" + vButton.getProcess_ID() + ", Record_ID="+ record_ID);  if (vButton.getProcess_ID() == 0) {    if (isProcessMandatory) {      ADialog.error(m_curWindowNo,this,null,Msg.parseTranslation(m_ctx,"@NotFound@ @AD_Process_ID@"));    }    return;  }  if (m_curTab.needSave(true,false))   if (!cmd_save(true))   return;  MProcess pr=new MProcess(m_ctx,vButton.getProcess_ID(),null);  int form_ID=pr.getAD_Form_ID();  if (form_ID != 0) {    if (m_curTab.needSave(true,false))     if (!cmd_save(true))     return;    FormFrame ff=new FormFrame(getGraphicsConfiguration());    String title=vButton.getDescription();    if (title == null || title.length() == 0)     title=vButton.getName();    ProcessInfo pi=new ProcessInfo(title,vButton.getProcess_ID(),table_ID,record_ID);    pi.setAD_User_ID(Env.getAD_User_ID(m_ctx));    pi.setAD_Client_ID(Env.getAD_Client_ID(m_ctx));    ff.setProcessInfo(pi);    ff.openForm(form_ID);    ff.pack();    AEnv.showCenterScreen(ff);    return;  }  int browse_ID=pr.getAD_Browse_ID();  if (browse_ID != 0) {    if (m_curTab.needSave(true,false))     if (!cmd_save(true))     return;    String title=vButton.getDescription();    if (title == null || title.length() == 0)     title=vButton.getName();    ProcessInfo pi=new ProcessInfo(title,vButton.getProcess_ID(),table_ID,record_ID);    pi.setAD_User_ID(Env.getAD_User_ID(m_ctx));    pi.setAD_Client_ID(Env.getAD_Client_ID(m_ctx));    CFrame ff=new CFrame();    MBrowse browse=new MBrowse(Env.getCtx(),browse_ID,null);    VBrowser browser=new VBrowser(ff,true,m_curWindowNo,"",browse,"",true,"");    browser.setProcessInfo(pi);    ff=browser.getFrame();    ff.setVisible(true);    ff.pack();    AEnv.showCenterScreen(ff);    return;  } else {    ProcessModalDialog dialog=new ProcessModalDialog(m_ctx,Env.getWindow(m_curWindowNo),Env.getHeader(m_ctx,m_curWindowNo),this,m_curWindowNo,vButton.getProcess_ID(),table_ID,record_ID,startWOasking);    if (dialog.isValidDialog()) {      dialog.validate();      dialog.pack();      AEnv.showCenterWindow(Env.getWindow(m_curWindowNo),dialog);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public StatisticNotFoundException(String message){  super(message);}  }
class C{  public void clickMenuItem(String name){  TestUtils.clickMenuItem(name);}  }
class C{  @SuppressWarnings("synthetic-access") protected void txApplyEntryOpAdjunctOnly(FarSideEntryOp entryOp){  if (this.r == null) {    return;  }  EventID eventID=getEventId(entryOp);  boolean isDuplicate=this.r.hasSeenEvent(eventID);  boolean callbacksOnly=(this.r.getDataPolicy() == DataPolicy.PARTITION) || isDuplicate;  if (this.r instanceof PartitionedRegion) {    PartitionedRegion pr=(PartitionedRegion)r;    BucketRegion br=pr.getBucketRegion(entryOp.key);    Set bucketOwners=br.getBucketOwners();    InternalDistributedMember thisMember=GemFireCacheImpl.getExisting().getDistributionManager().getId();    if (bucketOwners.contains(thisMember)) {      return;    }    @Released EntryEventImpl eei=AbstractRegionMap.createCBEvent(this.r,entryOp.op,entryOp.key,entryOp.value,this.msg.txIdent,txEvent,getEventId(entryOp),entryOp.callbackArg,entryOp.filterRoutingInfo,this.msg.bridgeContext,null,entryOp.versionTag,entryOp.tailKey);    try {      if (entryOp.filterRoutingInfo != null) {        eei.setLocalFilterInfo(entryOp.filterRoutingInfo.getFilterInfo(this.r.getCache().getMyId()));      }      if (isDuplicate) {        eei.setPossibleDuplicate(true);      }      if (logger.isDebugEnabled()) {        logger.debug("invoking transactional callbacks for {} key={} needsUnlock={} event={}",entryOp.op,entryOp.key,this.needsUnlock,eei);      }      final boolean skipListeners=!isDuplicate;      eei.invokeCallbacks(this.r,skipListeners,true);    }  finally {      eei.release();    }    return;  }}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public AddTileSensorsAction(OdorWorldEntity entity){  super("Add Tile Sensors");  this.entity=entity;  putValue(SHORT_DESCRIPTION,"Add tile sensors...");}  }
class C{  @SuppressWarnings("unchecked") protected boolean heapifyDownComparable(final int ipos,Object reinsert){  Comparable<Object> cur=(Comparable<Object>)reinsert;  int pos=ipos;  final int half=size >>> 1;  while (pos < half) {    int cpos=(pos << 1) + 1;    Object child=queue[cpos];    final int rchild=cpos + 1;    if (rchild < size) {      Object right=queue[rchild];      if (((Comparable<Object>)child).compareTo(right) > 0) {        cpos=rchild;        child=right;      }    }    if (cur.compareTo(child) <= 0) {      break;    }    queue[pos]=child;    pos=cpos;  }  queue[pos]=cur;  return (pos != ipos);}  }
class C{  public PreparedStatementWrapper preparedStatement(String sql) throws SQLException {  final PreparedStatementWrapper psw=new PreparedStatementWrapper(m_connection,sql);  if (m_preparedStatements == null) {    m_preparedStatements=new ArrayList<PreparedStatementWrapper>();  }  m_preparedStatements.add(psw);  return psw;}  }
class C{  public static boolean isMac(){  String osName=System.getProperty("os.name");  osName=osName.toLowerCase();  return osName.indexOf("mac") != -1;}  }
class C{  public boolean isUseDeltasEnabled(){  return useDeltas;}  }
class C{  private void validateAlias(WwnAliasParam alias,boolean forAdd){  if (forAdd || !StringUtils.isEmpty(alias.getAddress())) {    validateWWN(alias.getAddress());  }  validateWWNAlias(alias.getName());}  }
class C{  @Override public final boolean shouldPerform(OptOptions options){  return options.SSA;}  }
class C{  public void testCertPathValidator09() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathValidator.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithm must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  public static double norm_1(float[] a){  double sum=0;  for (int i=0; i < a.length; i++) {    sum+=(a[i] < 0 ? -a[i] : a[i]);  }  return sum;}  }
class C{  public void put(String key,long value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/restore") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep restoreSnapshotSession(@PathParam("id") URI id){  return getSnapshotSessionManager().restoreSnapshotSession(id);}  }
class C{  public final BulkRequest timeout(String timeout){  return timeout(TimeValue.parseTimeValue(timeout,null,getClass().getSimpleName() + ".timeout"));}  }
class C{  public StringProperty lastReceivedPayloadShortProperty(){  return lastReceivedPayloadShort;}  }
class C{  private void updateOptStateAndReps(){  int optPrev=opts[optCur].optPrev;  assert optPrev < optCur;  if (opts[optCur].prev1IsLiteral) {    --optPrev;    if (opts[optCur].hasPrev2) {      opts[optCur].state.set(opts[opts[optCur].optPrev2].state);      if (opts[optCur].backPrev2 < REPS)       opts[optCur].state.updateLongRep(); else       opts[optCur].state.updateMatch();    } else {      opts[optCur].state.set(opts[optPrev].state);    }    opts[optCur].state.updateLiteral();  } else {    opts[optCur].state.set(opts[optPrev].state);  }  if (optPrev == optCur - 1) {    assert opts[optCur].backPrev == 0 || opts[optCur].backPrev == -1;    if (opts[optCur].backPrev == 0)     opts[optCur].state.updateShortRep(); else     opts[optCur].state.updateLiteral();    System.arraycopy(opts[optPrev].reps,0,opts[optCur].reps,0,REPS);  } else {    int back;    if (opts[optCur].prev1IsLiteral && opts[optCur].hasPrev2) {      optPrev=opts[optCur].optPrev2;      back=opts[optCur].backPrev2;      opts[optCur].state.updateLongRep();    } else {      back=opts[optCur].backPrev;      if (back < REPS)       opts[optCur].state.updateLongRep(); else       opts[optCur].state.updateMatch();    }    if (back < REPS) {      opts[optCur].reps[0]=opts[optPrev].reps[back];      int rep;      for (rep=1; rep <= back; ++rep)       opts[optCur].reps[rep]=opts[optPrev].reps[rep - 1];      for (; rep < REPS; ++rep)       opts[optCur].reps[rep]=opts[optPrev].reps[rep];    } else {      opts[optCur].reps[0]=back - REPS;      System.arraycopy(opts[optPrev].reps,0,opts[optCur].reps,1,REPS - 1);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.604 -0500",hash_original_method="03979FBB0BB429E6C16375AAFE9C359F",hash_generated_method="3ABC81C77C859CFD1418771BD04B5D0A") public void proceed(){}  }
class C{  private void updateTalkPlan(Cycle cycle){  view.updateCycleView(cycle);}  }
class C{  public void testSimpleClassObjects() throws RepositoryException, IOException {  final ValueFactory vf=om.getValueFactory();  final URI clssclssName=vf.createURI("attr:/classClass");  final URI descr=vf.createURI("attr:/classClass#description");  final URI superClss=vf.createURI("attr:/class#super");  final URI className=vf.createURI("attr:/class#name");  final URI gpoType=vf.createURI("attr:/gpo#type");  final int transCounter=om.beginNativeTransaction();  try {    final IGPO clssclss=om.createGPO();    om.save(clssclssName,clssclss.getId());    clssclss.setValue(descr,vf.createLiteral("The class of all classes"));    final IGPO clssPerson=om.createGPO();    clssPerson.setValue(gpoType,clssclss.getId());    clssPerson.setValue(className,vf.createLiteral("Person"));    final IGPO clssEmployee=om.createGPO();    clssEmployee.setValue(gpoType,clssclss.getId());    clssEmployee.setValue(superClss,clssPerson.getId());    clssEmployee.setValue(className,vf.createLiteral("Employee"));    om.commitNativeTransaction(transCounter);  } catch (  Throwable t) {    om.rollbackNativeTransaction();    throw new RuntimeException(t);  }{    final IGPO clssclss=om.recallAsGPO(clssclssName);    final Iterator<IGPO> classes=clssclss.getLinksIn(gpoType).iterator();    while (classes.hasNext()) {      final IGPO cls=classes.next();      if (log.isInfoEnabled())       log.info("Class: " + cls.pp());    }  }  ((ObjectMgrModel)om).clearCache();{    final IGPO clssclss=om.recallAsGPO(clssclssName);    final Iterator<IGPO> classes=clssclss.getLinksIn(gpoType).iterator();    while (classes.hasNext()) {      final IGPO clss=classes.next();      if (log.isInfoEnabled())       log.info("Class: " + clss.pp());    }  }}  }
class C{  public boolean force(){  return force;}  }
class C{  @Override public boolean isValid(){  return true;}  }
class C{  public ItemGroupsXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  public void dispose(){  m_provider.removeListener(m_internalDebuggerListener);}  }
class C{  private static int availableCapacity(Buffer buffer){  return buffer.capacity() - buffer.limit();}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  @Override public void addAppOffer(Offer appOffer){  offerModel.acceptAppOffer(appOffer);}  }
class C{  public static String readString(ByteBuffer buff,int len){  char[] chars=new char[len];  for (int i=0; i < len; i++) {    int x=buff.get() & 0xff;    if (x < 0x80) {      chars[i]=(char)x;    } else     if (x >= 0xe0) {      chars[i]=(char)(((x & 0xf) << 12) + ((buff.get() & 0x3f) << 6) + (buff.get() & 0x3f));    } else {      chars[i]=(char)(((x & 0x1f) << 6) + (buff.get() & 0x3f));    }  }  return new String(chars);}  }
class C{  public void addLocation(Location location){  if (!pendingLocations.offer(new CachedLocation(location))) {    Log.e(TAG,"Unable to add to pendingLocations.");  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected BinaryIntLiteralImpl(){  super();}  }
class C{  @Override public void onMessageReceived(MessageEvent messageEvent){  if (mGoogleApiClient == null) {    mGoogleApiClient=new GoogleApiClient.Builder(this).addConnectionCallbacks(this).addOnConnectionFailedListener(this).addApi(Wearable.API).build();  }  if (!mGoogleApiClient.isConnected()) {    ConnectionResult connectionResult=mGoogleApiClient.blockingConnect(30,TimeUnit.SECONDS);    if (!connectionResult.isSuccess()) {      Log.e(TAG,"Failed to connect to GoogleApiClient.");      return;    }  }  if (messageEvent.getPath().equals(BReelWatchFaceUtil.PATH_WITH_FEATURE)) {    byte[] rawData=messageEvent.getData();    DataMap configKeysToOverwrite=DataMap.fromByteArray(rawData);    Log.d(TAG,"Received watch face config message: " + configKeysToOverwrite);    BReelWatchFaceUtil.overwriteKeysInConfigDataMap(mGoogleApiClient,configKeysToOverwrite);  }  if (messageEvent.getPath().equals(BReelWatchFaceUtil.PATH_WITH_FEATURE_ASSET)) {    byte[] rawData=messageEvent.getData();    DataMap assetKeyToOverwrite=DataMap.fromByteArray(rawData);    Log.d(TAG,"ASSET RECEIVED: " + assetKeyToOverwrite);    BReelWatchFaceUtil.overwriteKeysInAssetConfigDataMap(mGoogleApiClient,assetKeyToOverwrite);  }}  }
class C{  private void updateView(){  final NewProject project=dataObject.getProject();  view.setProjectName(project.getName());  view.setProjectDescription(project.getDescription());  view.setVisibility(PUBLIC_VISIBILITY.equals(project.getVisibility()));  view.setProjectUrl(dataObject.getSource().getProject().getLocation());  final String value=getImportParameterValue(SKIP_FIRST_LEVEL_PARAM_NAME);  if (value != null) {    view.setSkipFirstLevel(Boolean.valueOf(value));  }}  }
class C{  public ConsensusMessage createWrite(int id,int epoch,byte[] value){  return new ConsensusMessage(WRITE,id,epoch,from,value);}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testGreatCircleDistance_WithNaN() throws Exception {  Location location=new Location(Double.NaN,Double.NaN);  double nanDistance=location.greatCircleDistance(new Location(34.2,-119.2));  assertTrue("expecting NaN",Double.isNaN(nanDistance));}  }
class C{  public static Duration millis(long millis){  if (millis == 0) {    return ZERO;  }  return new Duration(millis);}  }
class C{  public T casePresence(Presence object){  return null;}  }
class C{  public boolean isConnectionBased(){  return false;}  }
class C{  public void manualTestNewConnHasNewState() throws Exception {  FabricMySQLConnection conn1=(FabricMySQLConnection)this.ds.getConnection(this.username,this.password);  conn1.setServerGroupName("ha_config1_group");  String query="SELECT CONCAT(@@hostname, ':', @@port) AS 'Value'";  ResultSet rs=conn1.createStatement().executeQuery(query);  rs.next();  String startingMaster=rs.getString(1);  System.err.println("Starting master: " + startingMaster);  rs.close();  conn1.close();  int secs=15000;  System.err.println("Sleeping " + (secs / 1000.0) + " seconds.... Please perform manual failover");  Thread.sleep(secs);  System.err.println("Continuing");  conn1=(FabricMySQLConnection)this.ds.getConnection(this.username,this.password);  conn1.setServerGroupName("ha_config1_group");  rs=conn1.createStatement().executeQuery(query);  rs.next();  String newMaster=rs.getString(1);  System.err.println("New master: " + newMaster);  assertFalse(startingMaster.equals(newMaster));  conn1.close();}  }
class C{  public void ifPresentOrElse(DoubleConsumer action,Runnable emptyAction){  if (isPresent) {    action.accept(value);  } else {    emptyAction.run();  }}  }
class C{  public void deleteGeolocSharing(String sharingId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGeolocSharing(sharingId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public SimpleScheduleBuilder withRepeatCount(int triggerRepeatCount){  this.repeatCount=triggerRepeatCount;  return this;}  }
class C{  public StringLocator(Instances data){  super(data,Attribute.STRING);}  }
class C{  public DependencyCalculator(ArtifactFactory artifactFactory,ArtifactResolver resolver,ArtifactRepository localRepository,List<ArtifactRepository> remoteRepositories,MavenProject mavenProject,MavenProjectBuilder mavenProjectBuilder,ArtifactInstaller installer,PlexusContainer container){  this.artifactFactory=artifactFactory;  this.resolver=resolver;  this.localRepository=localRepository;  this.remoteRepositories=remoteRepositories;  this.mavenProject=mavenProject;  this.mavenProjectBuilder=mavenProjectBuilder;  this.installer=installer;  this.container=container;}  }
class C{  public UAX29URLEmailAnalyzer(Reader stopwords) throws IOException {  this(loadStopwordSet(stopwords));}  }
class C{  public static boolean passesNgramFilter(List<String> tokenList,Set<String> stopwords,boolean filterPartialMatches){  List<String> filteredList=new ArrayList<String>();  for (  String ngram : tokenList) {    if (!stopwords.contains(ngram)) {      filteredList.add(ngram);    }  }  if (filterPartialMatches) {    return filteredList.size() == tokenList.size();  } else {    return filteredList.size() != 0;  }}  }
class C{  @Override public Date computeFirstFireTime(Calendar calendar){  nextFireTime=getStartTime();  while (nextFireTime != null && calendar != null && !calendar.isTimeIncluded(nextFireTime.getTime())) {    nextFireTime=getFireTimeAfter(nextFireTime);    if (nextFireTime == null)     break;    java.util.Calendar c=java.util.Calendar.getInstance();    c.setTime(nextFireTime);    if (c.get(java.util.Calendar.YEAR) > YEAR_TO_GIVEUP_SCHEDULING_AT) {      return null;    }  }  return nextFireTime;}  }
class C{  public Call(String functionName,Class<?> returnType,String variableName,Class<?> variableType){  this(functionName,returnType,new String[]{variableName},new Class<?>[]{variableType});}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public void onEvent(ProjectEvent event){  if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) {    update(event);  }}  }
class C{  public Configurator recordEventsToFile(String filenamePrefix,long sizeInBytes){  if (filenamePrefix == null)   throw new IllegalArgumentException("The filename prefix may not be null");  if (sizeInBytes < 1024)   throw new IllegalArgumentException("The event file size must be at least 1024 bytes");  eventRecorderFilenameRoot=filenamePrefix;  eventRecordFileSizeInBytes=sizeInBytes;  eventWriterFactory=null;  return this;}  }
class C{  private Volume findRPVPlexVolumeWithOrginalAssets(StringSet backingVolumeURIs){  Volume volWithOriginalAssets=null;  for (  String backingVolumeURI : backingVolumeURIs) {    Volume backingVolume=_dbClient.queryObject(Volume.class,URI.create(backingVolumeURI));    if (backingVolume != null && backingVolume.getVirtualPool() != null) {      VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,backingVolume.getVirtualPool());      if (VirtualPool.isRPVPlexProtectHASide(vpool)) {        volWithOriginalAssets=backingVolume;        break;      }    }  }  return volWithOriginalAssets;}  }
class C{  public ProfileVisit companyName(String companyName){  this.companyName=companyName;  return this;}  }
class C{  public Composer waitTime(long animDuration){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  mTweenParameterList.add(new TweenParameter(beforeParam.x,beforeParam.y,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,animDuration,Ease.NONE));  return this;}  }
class C{  public String toString(){  String out="" + this.big8 + "  ";  int[] statInt=new int[9];  statInt=this.getStatInt();  byte[][] statByte=new byte[5][mdsize];  statByte=this.getStatByte();  for (int i=0; i < 9; i++) {    out=out + statInt[i] + " ";  }  for (int i=0; i < 5; i++) {    out=out + new String(Hex.encode(statByte[i])) + " ";  }  return out;}  }
class C{  private void distributedUnlockForClear(){  if (!this.scope.isGlobal()) {    try {      getLockService().unlock("_clearOperation");    } catch (    IllegalStateException e) {      lockCheckReadiness();      throw e;    }  }}  }
class C{  protected void addResult(final NamedAttachable obj,final int quantity){  if (!(obj instanceof UnitType) && !(obj instanceof Resource)) {    throw new IllegalArgumentException("results must be units or resources, not:" + obj.getClass().getName());  }  m_results.put(obj,quantity);}  }
class C{  @Override public String updateFactory(String factoryId,Factory factory) throws ApiException {  lock.writeLock().lock();  try {    final Factory clonedFactory=DtoFactory.getInstance().clone(factory);    factories.put(factoryId,clonedFactory);    return clonedFactory.getId();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  protected String attributeValuesString(Instance instance){  StringBuffer text=new StringBuffer();  if (m_Attributes != null) {    text.append("    <" + TAG_ATTRIBUTES + ">\n");    m_Attributes.setUpper(instance.numAttributes() - 1);    for (int i=0; i < instance.numAttributes(); i++) {      if (m_Attributes.isInRange(i) && i != instance.classIndex()) {        text.append("      <" + TAG_ATTRIBUTE + " "+ ATT_INDEX+ "=\""+ (i + 1)+ "\""+ " "+ ATT_NAME+ "=\""+ sanitize(instance.attribute(i).name())+ "\""+ " "+ ATT_TYPE+ "=\""+ Attribute.typeToString(instance.attribute(i).type())+ "\""+ ">");        text.append(sanitize(instance.toString(i)));        text.append("</" + TAG_ATTRIBUTE + ">\n");      }    }    text.append("    </" + TAG_ATTRIBUTES + ">\n");  }  return text.toString();}  }
class C{  private synchronized void updateKey(final String key,final boolean recycleable,long owner){  CacheElement toRemove=null;  for (  CacheElement ce : list) {    if (ce.key.equals(key)) {      toRemove=ce;      break;    }  }  if (toRemove != null)   list.remove(toRemove);  list.addFirst(new CacheElement(key,recycleable,owner));}  }
class C{  @Override protected ISPO resolve(final ISPO spo){  final ISPO timestamped=new SPO(spo.s(),spo.p(),timestamp,StatementEnum.Explicit);  if (log.isTraceEnabled()) {    log.trace(spo);    log.trace(timestamped);  }  return timestamped;}  }
class C{  public static void assertGoodbye(Speechlet speechlet,Session session) throws SpeechletException {  SpeechletResponse sr=speechlet.onIntent(IntentRequest.builder().withRequestId("test-request-id").withIntent(Intent.builder().withName(STOP).withSlots(new HashMap<String,Slot>()).build()).build(),session);  String spoken=((PlainTextOutputSpeech)sr.getOutputSpeech()).getText();  assertThat(spoken,containsString("Good-bye"));}  }
class C{  private Map<String,Object> createMap(){  final Map<String,Object> params=new HashMap<String,Object>();  params.put("A",1);  params.put("B",2);  params.put("C",3);  params.put("D",4);  return params;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.235 -0500",hash_original_method="3A92EA3385CE026A7E99F46A314647AE",hash_generated_method="3A92EA3385CE026A7E99F46A314647AE") EmulatedFieldsForLoading(ObjectStreamClass streamClass){  this.streamClass=streamClass;  emulatedFields=new EmulatedFields(streamClass.getLoadFields(),streamClass.fields());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (multiplicity: ");  result.append(multiplicity);  result.append(", name: ");  result.append(name);  result.append(", description: ");  result.append(description);  result.append(')');  return result.toString();}  }
class C{  public static void validate(CertPath path,PKIXParameters params) throws Exception {  CertPathValidator validator=CertPathValidator.getInstance("PKIX","SUN");  CertPathValidatorResult cpvr=validator.validate(path,params);}  }
class C{  public Weight(BigDecimal magnitude){  this.magnitude=magnitude;  this.unit=WeightUnit.T.getBaseUnit();}  }
class C{  private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  @Override public void addTableModelListener(TableModelListener l){}  }
class C{  public void mouseReleased(MouseEvent e){  if (log.isDebugEnabled()) {    log.debug("released " + (e.getModifiers() & MouseEvent.BUTTON1_MASK) + " "+ e.isPopupTrigger()+ " "+ (e.getModifiers() & (MouseEvent.ALT_MASK + InputEvent.META_MASK + MouseEvent.CTRL_MASK)));  }  if (e.isPopupTrigger()) {    try {      _menu.show(e.getComponent(),e.getX(),e.getY());    } catch (    java.awt.IllegalComponentStateException cs) {    }    e.consume();  }}  }
class C{  public boolean isMarkUndeliverableSeen(){  return fieldMarkUndeliverableSeen;}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale,final Date centuryStart){  printer=new FastDatePrinter(pattern,timeZone,locale);  parser=new FastDateParser(pattern,timeZone,locale,centuryStart);}  }
class C{  public ValidationResult validate(){  result=new ValidationResult();  cu.accept(new UiBinderSubtypeVisitor());  cu.accept(new UiBinderOwnerVisitor());  return result;}  }
class C{  public void testTlsConfigContainer() throws Exception {  File localhostJksFile=new File("target/test-classes/localhost.jks");  assertTrue(localhostJksFile.isFile());  StandaloneLocalConfiguration configuration=(StandaloneLocalConfiguration)createConfiguration(ConfigurationType.STANDALONE);  configuration.setProperty(GeneralPropertySet.PROTOCOL,"https");  configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_STORE_FILE,localhostJksFile.getAbsolutePath());  configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_STORE_PASSWORD,"password");  configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_STORE_TYPE,"jks");  configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_ALIAS,"localhost");  configuration.setProperty(TomcatPropertySet.CONNECTOR_TRUST_STORE_FILE,localhostJksFile.getAbsolutePath());  configuration.setProperty(TomcatPropertySet.CONNECTOR_TRUST_STORE_PASSWORD,"password");  configuration.setProperty(TomcatPropertySet.CONNECTOR_TRUST_STORE_TYPE,"jks");  configuration.setProperty(TomcatPropertySet.CONNECTOR_CLIENT_AUTH,"want");  InstalledLocalContainer container=(InstalledLocalContainer)createContainer(configuration);  Deployable war=new DefaultDeployableFactory().createDeployable(container.getId(),getTestData().getTestDataFileFor("simple-war"),DeployableType.WAR);  configuration.addDeployable(war);  configuration.configure(container);  URL warPingURL=new URL("https://localhost:" + getTestData().port + "/simple-war/index.jsp");  container.start();  PingUtils.assertPingTrue("simple war not started",warPingURL,getLogger());  container.stop();  PingUtils.assertPingFalse("simple war not stopped",warPingURL,getLogger());}  }
class C{  public boolean isCritical(){  return !connected;}  }
class C{  public void deleteProperty() throws IOException {  print("deleteProperty",null);}  }
class C{  public ExtentTest skip(String details){  log(Status.SKIP,details);  return this;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  void resetRequiredChildren(){  ArrayList<Element> requiredChildren=this.requiredChilden;  if (requiredChildren != null) {    for (int i=requiredChildren.size() - 1; i >= 0; i--) {      requiredChildren.get(i).visited=false;    }  }}  }
class C{  public Transition(final ConversationStates currentState,final Collection<Expression> triggers,final PreTransitionCondition condition,final boolean secondary,final ConversationStates nextState,final String reply,final PostTransitionAction action,final String label){  this.state=currentState;  this.condition=condition;  this.secondary=secondary;  this.nextState=nextState;  this.triggers=triggers;  this.reply=reply;  this.action=action;  this.label=TransitionContext.getWithFallback(label);}  }
class C{  @Override public Dimension preferredLayoutSize(Container target){  return layoutSize(target,true);}  }
class C{  public static final CButton createOKButton(String text){  AppsAction aa=new AppsAction(A_OK,KeyStroke.getKeyStroke(KeyEvent.VK_F4,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  button.setDefaultCapable(true);  return button;}  }
class C{  private void discoverDeduplicationCapabilityForStoragePool(StorageSystem driverStorageSystem,StoragePool driverPool,com.emc.storageos.db.client.model.StoragePool dbPool){  List<CapabilityInstance> capabilities=driverPool.getCapabilities();  if (capabilities == null) {    return;  }  for (  CapabilityInstance capability : capabilities) {    String capabilityDefinitionUid=capability.getCapabilityDefinitionUid();    if ((capabilityDefinitionUid == null) || (capabilityDefinitionUid.isEmpty())) {      _log.error(String.format("Skipping capability %s with no capability definition UID for storage pool %s on system %s",capability.getName(),driverPool.getNativeId(),driverStorageSystem.getNativeId()));      continue;    }    CapabilityDefinition capabilityDefinition=capabilityDefinitions.get(capabilityDefinitionUid);    if (capabilityDefinition == null) {      _log.info(String.format("Skipping unsupported capability of type %s for storage pool %s on system %s",capabilityDefinitionUid,driverPool.getNativeId(),driverStorageSystem.getNativeId()));      continue;    }    if (DeduplicationCapabilityDefinition.CAPABILITY_UID.equals(capabilityDefinitionUid)) {      String isEnabled=capability.getPropertyValue(DeduplicationCapabilityDefinition.PROPERTY_NAME.ENABLED.name());      if (isEnabled != null && isEnabled.equalsIgnoreCase("false")) {        _log.info(String.format("StoragePool %s of storage system %s has deduplication disabled",driverPool.getNativeId(),driverStorageSystem.getNativeId()));        dbPool.setDedupCapable(false);      } else {        _log.info(String.format("Enable deduplication for StoragePool %s of storage system %s ",driverPool.getNativeId(),driverStorageSystem.getNativeId()));        dbPool.setDedupCapable(true);      }    }  }}  }
class C{  @Deprecated public static String[] split(String raw,char ch){  final List<String> list=new ArrayList<>(4);  int n=0;  int p;  while ((p=raw.indexOf(ch,n)) != -1) {    list.add(raw.substring(n,p).trim());    n=p + 1;  }  list.add(raw.substring(n).trim());  return list.toArray(new String[list.size()]);}  }
class C{  public static void addDefaultNullnessAnnotations(INullnessAnnotationDatabase database){  if (AnnotationDatabase.IGNORE_BUILTIN_ANNOTATIONS) {    return;  }  boolean missingClassWarningsSuppressed=AnalysisContext.currentAnalysisContext().setMissingClassWarningsSuppressed(true);  database.addDefaultAnnotation(AnnotationDatabase.Target.METHOD,"java.lang.String",NullnessAnnotation.NONNULL);  database.addFieldAnnotation("java.lang.System","out","Ljava/io/PrintStream;",true,NullnessAnnotation.NONNULL);  database.addFieldAnnotation("java.lang.System","err","Ljava/io/PrintStream;",true,NullnessAnnotation.NONNULL);  database.addFieldAnnotation("java.lang.System","in","Ljava/io/InputStream;",true,NullnessAnnotation.NONNULL);  database.addFieldAnnotation("java.math.BigInteger","ZERO","Ljava/math/BigInteger;",true,NullnessAnnotation.NONNULL);  database.addFieldAnnotation("java.math.BigInteger","ONE","Ljava/math/BigInteger;",true,NullnessAnnotation.NONNULL);  database.addFieldAnnotation("java.math.BigInteger","TEN","Ljava/math/BigInteger;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.nio.file.Files","probeContentType","(Ljava/nio/file/Path;)Ljava/lang/String;",true,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.nio.file.Path","getRoot","()Ljava/nio/file/Path;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.nio.file.Path","getFileName","()Ljava/nio/file/Path;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.nio.file.Path","getParent","()Ljava/nio/file/Path;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.io.File","list","()[Ljava/lang/String;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.io.File","list","(Ljava/io/FilenameFilter;)[Ljava/lang/String;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.io.File","listFiles","()[Ljava/io/File;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.io.File","listFiles","(Ljava/io/FilenameFilter;)[Ljava/io/File;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.io.File","listFiles","(Ljava/io/FileFilter;)[Ljava/io/File;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.lang.ref.ReferenceQueue","poll","()Ljava/lang/ref/Reference;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.lang.ref.Reference","get","()Ljava/lang/Object;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.lang.Class","newInstance","()Ljava/lang/Object;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.lang.Class","forName","(Ljava/lang/String;)Ljava/lang/Class;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.lang.reflect.Method","getParameterTypes","()[Ljava/lang/Class;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.lang.Object","clone","()Ljava/lang/Object;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.lang.Object","toString","()Ljava/lang/String;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.lang.Object","getClass","()Ljava/lang/Class;",false,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.lang.Object","equals","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.Arrays","asList","([Ljava/lang/Object;)Ljava/util/List;",true,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.lang.Integer","<init>","(Ljava/lang/String;)V",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.lang.Integer","parseInt","(Ljava/lang/String;I)I",true,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.lang.Integer","parseInt","(Ljava/lang/String;)I",true,0,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.nio.channels.SocketChannel","open","()Ljava/nio/channels/SocketChannel;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.sql.Statement","executeQuery","(Ljava/lang/String;)Ljava/sql/ResultSet;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.sql.PreparedStatement","executeQuery","()Ljava/sql/ResultSet;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.sql.Connection","prepareStatement","(Ljava/lang/String;)Ljava/sql/PreparedStatement;",false,NullnessAnnotation.NONNULL);  database.addDefaultAnnotation(AnnotationDatabase.Target.METHOD,"java.sql.DatabaseMetaData",NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getConnection","()Ljava/sql/Connection;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getAttributes","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getColumns","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getSuperTables","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getSuperTypes","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getTimeDateFunctions","()Ljava/lang/String;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getTypeInfo","()Ljava/sql/ResultSet;",false,NullnessAnnotation.NULLABLE);  database.addMethodAnnotation("java.sql.DatabaseMetaData","getURL","()Ljava/lang/String;",false,NullnessAnnotation.NULLABLE);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.package-info",NullnessAnnotation.NONNULL);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.CopyOnWriteArrayList",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.CopyOnWriteArraySet",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentLinkedQueue$Node",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.Exchanger",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.FutureTask",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.LinkedBlockingQueue$Node",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.SynchronousQueue$WaitQueue",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.SynchronousQueue$Node",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ThreadPoolExecutor$Worker",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.AbstractExecutorService",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentSkipListMap$ConcurrentSkipListSubMap",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentSkipListMap$HeadIndex",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentSkipListMap$Index",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentSkipListMap$Node",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentSkipListMap$SubMap",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentSkipListSet$ConcurrentSkipListSubSet",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.LinkedBlockingDeque$Node",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.SynchronousQueue$TransferQueue",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.SynchronousQueue$TransferQueue$QNode",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.SynchronousQueue$TransferStack",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.SynchronousQueue$Transferer",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","containsKey","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","containsValue","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","get","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","remove","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,1,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentHashMap","remove","(Ljava/lang/Object;Ljava/lang/Object;)Z",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentHashMap","setEntryAt","([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;ILjava/util/concurrent/ConcurrentHashMap$HashEntry;)V",false,1,NullnessAnnotation.NULLABLE);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinPool","<init>","(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V",false,1,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinPool","<init>","(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V",false,2,NullnessAnnotation.NULLABLE);  database.addMethodParameterAnnotation("java.util.concurrent.PriorityBlockingQueue","<init>","(ILjava/util/Comparator;)V",false,1,NullnessAnnotation.NULLABLE);  database.addDefaultAnnotation(AnnotationDatabase.Target.PARAMETER,"java.util.concurrent.ConcurrentLinkedDeque$Node",NullnessAnnotation.UNKNOWN_NULLNESS);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentMap","remove","(Ljava/lang/Object;Ljava/lang/Object;)Z",false,1,NullnessAnnotation.NULLABLE);  database.addMethodParameterAnnotation("java.util.concurrent.FutureTask","<init>","(Ljava/lang/Runnable;Ljava/lang/Object;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.Executors","callable","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;",true,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ThreadPoolExecutor","addWorker","(Ljava/lang/Runnable;Z)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentHashMap$Segment","remove","(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;",false,2,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.CyclicBarrier","<init>","(ILjava/lang/Runnable;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.BrokenBarrierException","<init>","(Ljava/lang/String;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.CancellationException","<init>","(Ljava/lang/String;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutionException","<init>","(Ljava/lang/String;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutionException","<init>","(Ljava/lang/String;Ljava/lang/Throwable;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutionException","<init>","(Ljava/lang/String;Ljava/lang/Throwable;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutionException","<init>","(Ljava/lang/Throwable;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.RejectedExecutionException","<init>","(Ljava/lang/String;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.RejectedExecutionException","<init>","(Ljava/lang/String;Ljava/lang/Throwable;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.RejectedExecutionException","<init>","(Ljava/lang/String;Ljava/lang/Throwable;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.RejectedExecutionException","<init>","(Ljava/lang/Throwable;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.TimeoutException","<init>","(Ljava/lang/String;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.Executors$RunnableAdapter","<init>","(Ljava/lang/Runnable;Ljava/lang/Object;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentSkipListMap","<init>","(Ljava/util/Comparator;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ConcurrentSkipListMap","doRemove","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinPool","casBarrierStack","(Ljava/util/concurrent/ForkJoinPool$WaitQueueNode;Ljava/util/concurrent/ForkJoinPool$WaitQueueNode;)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinPool","casBarrierStack","(Ljava/util/concurrent/ForkJoinPool$WaitQueueNode;Ljava/util/concurrent/ForkJoinPool$WaitQueueNode;)Z",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinPool","casSpareStack","(Ljava/util/concurrent/ForkJoinPool$WaitQueueNode;Ljava/util/concurrent/ForkJoinPool$WaitQueueNode;)Z",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinTask","adapt","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;",true,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinTask","awaitDone","(Ljava/util/concurrent/ForkJoinWorkerThread;J)I",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinTask","awaitDone","(Ljava/util/concurrent/ForkJoinWorkerThread;Z)I",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinTask$AdaptedRunnable","<init>","(Ljava/lang/Runnable;Ljava/lang/Object;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinWorkerThread","onTermination","(Ljava/lang/Throwable;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ForkJoinWorkerThread","setSlot","([Ljava/util/concurrent/ForkJoinTask;ILjava/util/concurrent/ForkJoinTask;)V",true,2,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue","casCleanMe","(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue","casCleanMe","(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue","casHead","(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue","xfer","(Ljava/lang/Object;ZIJ)Ljava/lang/Object;",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue$Itr","advance","(Ljava/util/concurrent/LinkedTransferQueue$Node;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue$Node","casItem","(Ljava/lang/Object;Ljava/lang/Object;)Z",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.LinkedTransferQueue$Node","casNext","(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.Phaser","<init>","(Ljava/util/concurrent/Phaser;)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.Phaser","<init>","(Ljava/util/concurrent/Phaser;I)V",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodAnnotation("java.util.concurrent.locks.ReadWriteLock","readLock","()Ljava/util/concurrent/locks/Lock;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.util.concurrent.locks.ReadWriteLock","writeLock","()Ljava/util/concurrent/locks/Lock;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.util.concurrent.locks.ReentrantReadWriteLock","readLock","()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.util.concurrent.locks.ReentrantReadWriteLock","writeLock","()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;",false,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutorService","submit","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.AbstractExecutorService","submit","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutorCompletionService","submit","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.AbstractExecutorServiceNullnessAnnotationDatabase","newTaskFor","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ExecutorCompletionService","newTaskFor","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ThreadPoolExecutor","addIfUnderCorePoolSize","(Ljava/lang/Runnable;)Z",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ThreadPoolExecutor","addThread","(Ljava/lang/Runnable;)Ljava/lang/Thread;",false,0,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.concurrent.ThreadPoolExecutor","afterExecute","(Ljava/lang/Runnable;Ljava/lang/Throwable;)V",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.EnumMap","get","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.EnumMap","containsKey","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.EnumMap","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.EnumMap","remove","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedMap","get","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedMap","containsKey","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedMap","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedMap","remove","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedSet","add","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedSet","remove","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.SortedSet","contains","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Hashtable","get","(Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Hashtable","containsKey","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Hashtable","containsValue","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Hashtable","contains","(Ljava/lang/Object;)Z",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Hashtable","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Hashtable","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,1,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("javax.swing.UIDefaults","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",false,1,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("java.util.Properties","getProperty","(Ljava/lang/String;)Ljava/lang/String;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Properties","setProperty","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",false,1,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Properties","setProperty","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("org.w3c.dom.Element","setAttribute","(Ljava/lang/String;Ljava/lang/String;)V",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.text.DateFormat","parse","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;",false,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.text.DateFormat","parse","(Ljava/lang/String;)Ljava/util/Date;",false,0,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.io.BufferedReader","readLine","()Ljava/lang/String;",false,NullnessAnnotation.CHECK_FOR_NULL);  database.addMethodParameterAnnotation("com.google.common.base.Preconditions","checkNotNull","(Ljava/lang/Object;)Ljava/lang/Object;",true,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("com.google.common.base.Preconditions","checkNotNull","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",true,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("com.google.common.base.Preconditions","checkNotNull","(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;",true,0,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("com.google.common.base.Preconditions","checkNotNull","(Ljava/lang/Object;)Ljava/lang/Object;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("com.google.common.base.Preconditions","checkNotNull","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("com.google.common.base.Preconditions","checkNotNull","(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;",true,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Objects","requireNonNull","(Ljava/lang/Object;)Ljava/lang/Object;",true,0,NullnessAnnotation.NONNULL);  database.addMethodParameterAnnotation("java.util.Objects","requireNonNull","(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",true,0,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.util.Objects","requireNonNull","(Ljava/lang/Object;)Ljava/lang/Object;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("java.util.Objects","requireNonNull","(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",true,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("org.w3c.dom.Element","getAttribute","(Ljava/lang/String;)Ljava/lang/String;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("org.w3c.dom.Element","getAttributeNS","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("org.w3c.dom.Element","getElementsByTagName","(Ljava/lang/String;)Lorg/w3c/dom/NodeList;",false,NullnessAnnotation.NONNULL);  database.addMethodAnnotation("org.w3c.dom.Element","getElementsByTagNameNS","(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/NodeList;",false,NullnessAnnotation.NONNULL);  addEclipseSpecificAnnotations(database);  AnalysisContext.currentAnalysisContext().setMissingClassWarningsSuppressed(missingClassWarningsSuppressed);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  PositionableRectangle ps=new PositionableRectangle(ed);  Element elem=element.getChild("size");  ps.setWidth(getInt(elem,"width"));  ps.setHeight(getInt(elem,"height"));  ed.putItem(ps);  loadCommonAttributes(ps,Editor.MARKERS,element);}  }
class C{  @SuppressWarnings("javadoc") public void lookupCrossReference(EObject model,EReference reference,ContentAssistContext context,ICompletionProposalAcceptor acceptor,Predicate<IEObjectDescription> filter,Function<IEObjectDescription,ICompletionProposal> proposalFactory){  if (model != null) {    final IScope scope=((IContentAssistScopeProvider)scopeProvider).getScopeForContentAssist(model,reference);    final Function<IEObjectDescription,ICompletionProposal> wrappedProposalFactory=null;    final Iterable<IEObjectDescription> candidates=scope.getAllElements();    for (    IEObjectDescription candidate : candidates) {      if (!acceptor.canAcceptMoreProposals())       return;      if (filter.apply(candidate)) {        final ICompletionProposal proposal=wrappedProposalFactory.apply(candidate);        if (proposal instanceof ConfigurableCompletionProposal && candidate.getName().getSegmentCount() > 1) {          ((ConfigurableCompletionProposal)proposal).setAdditionalData(FQNImporter.KEY_QUALIFIED_NAME,candidate.getQualifiedName());        }        acceptor.accept(proposal);      }    }  }}  }
class C{  static <T>T checkNotNull(T instance,String name){  if (instance == null) {    throw new NullPointerException(name + " must not be null");  }  return instance;}  }
class C{  public void fullyConnect(Endpoint endpoint){  short s=endpointsToShorts.get(endpoint);  for (int i=0; i < nodes.size(); i++) {    for (int j=0; j < nodes.size(); j++) {      graphMatrix[i][j]=s;    }  }}  }
class C{  private Process executeCompiler(ArrayList<String> argList,ArrayList<String> envList,boolean chdir) throws IOException {  String[] args;  if (chdir) {    CharBuffer cb=new CharBuffer();    cb.append("cd ");    cb.append(_compiler.getSourceDirName());    cb.append(";");    for (int i=0; i < argList.size(); i++) {      cb.append(" ");      cb.append(argList.get(i));    }    args=new String[3];    args[0]="/bin/sh";    args[1]="-c";    args[2]=cb.toString();  } else {    args=new String[argList.size()];    argList.toArray(args);  }  String[] envp=new String[envList.size()];  envList.toArray(envp);  if (log.isLoggable(Level.FINE)) {    CharBuffer cb=CharBuffer.allocate();    for (int i=0; i < args.length; i++) {      if (i != 0)       cb.append(" ");      cb.append(args[i]);    }    log.fine(cb.close());  }  Runtime runtime=Runtime.getRuntime();  try {    return runtime.exec(args);  } catch (  Exception e) {    throw new JavaCompileException(L.l("Can't execute the compiler `{0}'.  This usually means that the compiler is not in the operating system's PATH or the compiler is incorrectly specified in the configuration.  You may need to add the full path to <java compiler='{0}'/>.\n\n{1}",args[0],String.valueOf(e)));  }}  }
class C{  public static long parseLong(java.lang.String s) throws java.lang.NumberFormatException {  return 0l;}  }
class C{  public WoimsDemo(long seed){  super(seed);}  }
class C{  public void menuSelected(final MenuEvent arg0){  if (workspace.changesExist()) {    actionManager.getSaveWorkspaceAction().setEnabled(true);  } else {    actionManager.getSaveWorkspaceAction().setEnabled(false);  }}  }
class C{  public GlobalRunAction(Workspace workspace){  super("Global run",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Play.png"));  putValue(SHORT_DESCRIPTION,"Global iterate network update algorithm");}  }
class C{  public static final Criterion and(Criterion one,Criterion two){  final List<Criterion> criteria=new ArrayList<Criterion>();  criteria.add(one);  criteria.add(two);  return new ConjunctionCriterion(Conjunction.AND,criteria);}  }
class C{  public Object[] toArray(){  return Arrays.copyOf(elementData,size);}  }
class C{  public static String readerToString(final Reader fileReader) throws IOException {  final StringBuilder sb=new StringBuilder();  try (BufferedReader br=new BufferedReader(fileReader)){    final char[] buffer=FileUtils.makeBuffer();    final int eof=-1;    for (int len=br.read(buffer); len > eof; len=br.read(buffer)) {      for (int i=0; i < len; i++) {        sb.append(buffer[i]);      }    }  }   return sb.toString();}  }
class C{  private void addInstanceParameterToService(String paramKey,String paramValue){  InstanceParameter param=new InstanceParameter();  param.setParameterKey(paramKey);  param.setParameterValue(paramValue);  param.setServiceInstance(instance);  instance.getInstanceParameters().add(param);}  }
class C{  public int selectorsCount(){  return selectors.size();}  }
class C{  public String time(Long distanceMillis){  final double seconds=distanceMillis / 1000;  final double minutes=seconds / 60;  final double hours=minutes / 60;  final double days=hours / 24;  final double years=days / 365;  final String time;  if (seconds < 45) {    time=resources.getString(R.string.time_seconds);  } else   if (seconds < 90 || minutes < 45) {    time=resources.getQuantityString(R.plurals.time_minute,minutes < 2 ? 1 : 2,Math.round(minutes));  } else   if (minutes < 90 || hours < 24) {    time=resources.getQuantityString(R.plurals.time_hour,hours < 2 ? 1 : 2,Math.round(hours));  } else   if (hours < 48 || days < 30) {    time=resources.getQuantityString(R.plurals.time_day,days < 2 ? 1 : 2,Math.round(days));  } else   if (days < 60 || days < 365) {    time=resources.getQuantityString(R.plurals.time_month,(days / 30) < 2 ? 1 : 2,Math.round(days / 30));  } else {    time=resources.getQuantityString(R.plurals.time_year,years < 2 ? 1 : 2,Math.round(years));  }  return time + " " + resources.getString(R.string.time_ago);}  }
class C{  protected AbstractSensorMatrixNode(final SensorMatrix sensorMatrix){  super();  if (sensorMatrix == null) {    throw new IllegalArgumentException("sensorMatrix must not be null");  }  this.sensorMatrix=sensorMatrix;  setWidth(sensorMatrix.columns() * sensorMatrix.getReceptiveFieldWidth());  setHeight(sensorMatrix.rows() * sensorMatrix.getReceptiveFieldHeight());}  }
class C{  public static synchronized void play(String filename){  if (filename == null)   throw new NullPointerException();  try {    Clip clip=AudioSystem.getClip();    InputStream is=StdAudio.class.getResourceAsStream(filename);    AudioInputStream ais=AudioSystem.getAudioInputStream(is);    clip.open(ais);    clip.start();  } catch (  RuntimeException e) {    System.out.println("could not play '" + filename + "'");    throw e;  }catch (  Exception e) {    System.out.println("could not play '" + filename + "'");    e.printStackTrace();  }}  }
class C{  public static String[] toStringArray(Collection<String> collection){  if (collection == null) {    return null;  }  return collection.toArray(new String[collection.size()]);}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  public synchronized void save(){  Properties toSave=(Properties)PROPS.clone();  for (  Setting set : settings) {    if (!set.shouldAlwaysSave() && set.isDefault())     toSave.remove(set.getKey());  }  OutputStream out=null;  try {    if (SETTINGS_FILE.isDirectory())     SETTINGS_FILE.delete();    File parent=SETTINGS_FILE.getParentFile();    if (parent != null) {      parent.mkdirs();    }    FileUtils.setWriteable(SETTINGS_FILE);    if (SETTINGS_FILE.exists() && !SETTINGS_FILE.canRead()) {      SETTINGS_FILE.delete();    }    try {      out=new BufferedOutputStream(new FileOutputStream(SETTINGS_FILE));    } catch (    IOException ioe) {      if (SETTINGS_FILE.exists()) {        SETTINGS_FILE.delete();        out=new BufferedOutputStream(new FileOutputStream(SETTINGS_FILE));      }    }    if (out != null) {      toSave.store(out,HEADING);    } else {      markFailure();    }  } catch (  IOException e) {    markFailure();  } finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void deactivate(){  if (renderer != null)   renderer.stopEditing(false);}  }
class C{  private boolean skipCheckForAccessor(CacheDistributionAdvisee rgn,CacheProfile profile){  boolean skip=false;  if (rgn instanceof DistributedRegion) {    DistributedRegion dr=(DistributedRegion)rgn;    skip=!dr.getGenerateVersionTag();  }  return skip || isLocalOrRemoteAccessor(rgn,profile);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString="";    String sagaHeaderFile="";    String sagaDataFile="";    int i=0;    int row, col, rows=0, cols=0;    double north=0, south=0, east=0, west=0, cellSize=0;    long dataFileOffset=0;    double zFactor=1.0;    String description="";    String xyUnit="not specified";    String dataFormat="";    boolean topToBottom=false;    int rowStart=0;    int rowIncrement=1;    java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;    String[] imageFiles;    int numImages=0;    double noData=-32768;    String returnHeaderFile="";    DataInputStream in=null;    BufferedReader br=null;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      String inputFile=imageFiles[i];      File file=new File(inputFile);      if (!file.exists()) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(inputFile).toLowerCase();      if (fileExtension.equals("sgrd")) {        sagaHeaderFile=inputFile;        sagaDataFile=inputFile.replace(fileExtension,"sdat");        if (!new File(sagaDataFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      } else {        sagaDataFile=inputFile;        sagaHeaderFile=inputFile.replace(fileExtension,"sgrd");        if (!new File(sagaHeaderFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      }      FileInputStream fstream=new FileInputStream(sagaHeaderFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      String line;      String[] str;      while ((line=br.readLine()) != null) {        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter=",";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("description")) {          description=str[str.length - 1].replace("=","").trim();        } else         if (str[0].toLowerCase().contains("unit")) {          if (!str[str.length - 1].replace("=","").trim().isEmpty()) {            xyUnit=str[str.length - 1].replace("=","").trim();          }        } else         if (str[0].toLowerCase().contains("datafile_offset")) {          dataFileOffset=Long.parseLong(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("dataformat")) {          dataFormat=str[str.length - 1].replace("=","").trim().toLowerCase();        } else         if (str[0].toLowerCase().contains("byteorder_big")) {          if (str[str.length - 1].toLowerCase().contains("f")) {            byteorder=java.nio.ByteOrder.LITTLE_ENDIAN;          } else {            byteorder=java.nio.ByteOrder.BIG_ENDIAN;          }        } else         if (str[0].toLowerCase().contains("position_xmin")) {          west=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("position_ymin")) {          south=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_x")) {          cols=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_y")) {          rows=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellsize")) {          cellSize=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("z_factor")) {          zFactor=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("nodata_value")) {          noData=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("toptobottom")) {          topToBottom=!str[str.length - 1].toLowerCase().contains("f");        }      }      north=south + cellSize * rows;      east=west + cellSize * cols;      if (!topToBottom) {        rowStart=rows - 1;        rowIncrement=-1;      }      in.close();      br.close();      WhiteboxRasterBase.DataType outputDataType;switch (dataFormat) {case "bit":case "byte_unsigned":case "byte":case "shortint_unsigned":case "shortint":        outputDataType=WhiteboxRasterBase.DataType.INTEGER;      break;case "float":    outputDataType=WhiteboxRasterBase.DataType.FLOAT;  break;default :outputDataType=WhiteboxRasterBase.DataType.DOUBLE;break;}if (zFactor < 1.0 && outputDataType == WhiteboxRasterBase.DataType.INTEGER) {outputDataType=WhiteboxRasterBase.DataType.FLOAT;}String whiteboxHeaderFile=imageFiles[i].replace(fileExtension,"dep");if (i == 0) {returnHeaderFile=whiteboxHeaderFile;}WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,outputDataType,noData,noData);file=new File(sagaDataFile);int fileLength=(int)file.length();RandomAccessFile rIn=null;FileChannel inChannel=null;ByteBuffer buf=ByteBuffer.allocate(fileLength);rIn=new RandomAccessFile(sagaDataFile,"r");inChannel=rIn.getChannel();inChannel.position(0);inChannel.read(buf);buf.order(byteorder);buf.rewind();byte[] ba=new byte[(int)fileLength];buf.get(ba);double z;row=0;col=0;int pos=(int)dataFileOffset;int oldProgress=-1;boolean flag=true;row=rowStart;switch (dataFormat) {case "bit":byte b;while (flag) {b=buf.get(pos);for (int bit=0; bit < 8; bit++) {if (BitOps.checkBit(b,bit)) {output.setValue(row,col,1.0);} else {output.setValue(row,col,0.0);}col++;if (col >= cols) {row+=rowIncrement;progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {  updateProgress("Importing SAGA file...",progress);  oldProgress=progress;}}if (row >= rows || row < 0) {flag=false;}}pos+=1;if (pos >= fileLength) {flag=false;}}case "byte_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedByte(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "byte":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.get(pos) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedShort(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getShort(pos) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "integer":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getInt(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;case "integer_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedInt(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "float":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getFloat(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;default :while (flag) {for (col=0; col < cols; col++) {z=buf.getDouble(pos) * zFactor;output.setValue(row,col,z);pos+=8;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;}inChannel.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.flush();output.findMinAndMaxVals();output.writeHeaderFile();output.close();}returnData(returnHeaderFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void updateWorldSize(final int screenWidth,final int screenHeight){  final float width=screenWidth * scaleX;  final float height=screenHeight * scaleY;  final float fitHeight=width / aspectRatio;  if (fitHeight > height) {    setWorldSize(height * aspectRatio,height);  } else {    setWorldSize(width,fitHeight);  }}  }
class C{  @Override public void removeMatch(final String match){  lock.writeLock().lock();  try {    boolean isImmutable=immutables.contains(match);    if (isImmutable) {      logger.debug("Cannot remove match " + match + " since it came from a main config");    } else {      clearCache();      matches.remove(match);      onChange();    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static Token newSymbol(int type,int startLine,int startColumn){  return new Token(type,Types.getText(type),startLine,startColumn);}  }
class C{  public static boolean isValid(@Nullable EncodedImage encodedImage){  return encodedImage != null && encodedImage.isValid();}  }
class C{  public void updateVisiblityValue(int referenceIndex){  mCachedVisibleArea=mLayoutTab.computeVisibleArea();  mCachedIndexDistance=Math.abs(mIndex - referenceIndex);  mOrderSortingValue=computeOrderSortingValue(mCachedIndexDistance,mCacheStackVisibility);  mVisiblitySortingValue=computeVisibilitySortingValue(mCachedVisibleArea,mOrderSortingValue,mCacheStackVisibility);}  }
class C{  public static Transaction roundTripTransaction(NetworkParameters params,Transaction tx) throws IOException, ProtocolException {  BitcoinSerializer bs=new BitcoinSerializer(params);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  bs.serialize(tx,bos);  return (Transaction)bs.deserialize(ByteBuffer.wrap(bos.toByteArray()));}  }
class C{  public boolean isCellEditable(int row,int column){  return true;}  }
class C{  protected char skipAllWhitespace(Reader r) throws IOException {  char c;  do {    c=(char)r.read();  } while (Character.isWhitespace(c) && c != (char)-1);  return c;}  }
class C{  public static void serveImage(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String filename=request.getParameter("file");  filename=JSPHelper.convertRequestParamToUTF8(filename);  if (filename.indexOf(".." + File.separator) >= 0) {    log.warn("File traversal attack !? Disallowing serveFile for illegal filename: " + filename);    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  if (File.separator.equals("\\"))   filename=filename.replaceAll("/","\\\\"); else   filename=filename.replaceAll("/",File.separator);  HttpSession session=request.getSession();  String mode=request.getParameter("mode");  String baseDir, filePath;  if ("processing".equalsIgnoreCase(mode)) {    baseDir=edu.stanford.epadd.Config.REPO_DIR_PROCESSING;    filePath=baseDir + File.separator + filename;  } else   if ("discovery".equalsIgnoreCase(mode)) {    baseDir=edu.stanford.epadd.Config.REPO_DIR_DISCOVERY;    filePath=baseDir + File.separator + filename;  } else   if ("delivery".equalsIgnoreCase(mode)) {    baseDir=Config.REPO_DIR_DELIVERY;    filePath=baseDir + File.separator + filename;  } else {    baseDir=(String)JSPHelper.getSessionAttribute(session,"cacheDir");    filePath=baseDir + File.separator + Archive.IMAGES_SUBDIR+ File.separator+ filename;  }  JSPHelper.writeFileToResponse(session,response,filePath,true);}  }
class C{  @Override public void startElement(String name,UIComponent componentForElement) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if ("script".equalsIgnoreCase(name)) {    withinScript=true;  }  if ("style".equalsIgnoreCase(name)) {    withinStyle=true;  }  closeStartIfNecessary();  isScriptOrStyle(name);  scriptOrStyleSrc=false;  if ("cdata".equalsIgnoreCase(name)) {    isCdata=true;    startCDATA();    return;  } else   if (writingCdata) {    isCdata=false;    writingCdata=true;  }  if (null != componentForElement) {    Map<String,Object> passThroughAttrs=componentForElement.getPassThroughAttributes(false);    if (null != passThroughAttrs && !passThroughAttrs.isEmpty()) {      considerPassThroughAttributes(passThroughAttrs);    }  }  writer.write('<');  String elementName=pushElementName(name);  writer.write(elementName);  closeStart=true;}  }
class C{  public boolean isColumnMajor(){  return colMaj;}  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder id(String id){  this.id=id;  return this;}  }
class C{  protected void debugCodeCall(String methodName,long param){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "("+ param+ ");");  }}  }
class C{  private static void addStoreOnCloud(String storeName,Context context,SpiceManager spiceManager){  if (AccountManager.get(context).getAccountsByType(Aptoide.getConfiguration().getAccountType()).length > 0) {    ChangeUserRepoSubscription changeUserRepoSubscription=new ChangeUserRepoSubscription();    ChangeUserRepoSubscription.RepoSubscription repoSubscription=new ChangeUserRepoSubscription.RepoSubscription(storeName,true);    changeUserRepoSubscription.setRepoSubscription(repoSubscription);    spiceManager.execute(changeUserRepoSubscription,null);  }}  }
class C{  public int intersectionType(ILineSegment other){  double x1=start.getX();  double y1=start.getY();  double x2=end.getX();  double y2=end.getY();  double x3=other.getStart().getX();  double y3=other.getStart().getY();  double x4=other.getEnd().getX();  double y4=other.getEnd().getY();  double da=(y4 - y3) * (x2 - x1);  double db=(x4 - x3) * (y2 - y1);  double denom=da - db;  double ux=(x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);  double uy=(x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);  if (FloatingPoint.value(denom) == 0.0) {    if (FloatingPoint.value(ux) == 0 && FloatingPoint.value(uy) == 0) {      return COINCIDENT;    }    return PARALLEL;  }  ux=ux / denom;  uy=uy / denom;  if (ux < 0)   return NON_INTERSECTING;  if (ux > 1)   return NON_INTERSECTING;  if (uy < 0)   return NON_INTERSECTING;  if (uy > 1)   return NON_INTERSECTING;  return INTERSECTING;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private DownloadUtils(){  throw new AssertionError();}  }
class C{  protected Attribute_Impl(){  super();}  }
class C{  public FlexSharedObjectMessage(IEventListener source,String name,int version,boolean persistent){  super(source,name,version,persistent);}  }
class C{  public void startLoad(){  loading=true;  stopAnimator=false;  setLineToArcAnimator();  setAppearAnimator();  loading();}  }
class C{  public static void assertEquals(String message,double expected,double actual){  assertEquals(message,expected,actual,0d);}  }
class C{  public void test_orderByAggregateFlatteningOptimizer_high_coverage_case_1() throws MalformedQueryException {  final String queryStr="" + "PREFIX ex: <http://example.org/>\n" + "SELECT ?x ?y\n"+ "WHERE {\n"+ "  ?x ex:r ?y .\n"+ "  ?y ex:q ?z }\n"+ "GROUP BY ?x ?y\n"+ "ORDER BY DESC(max(?z)) ?x (count(?z)) DESC(?y)";  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  ASTDeferredIVResolution.resolveQuery(store,astContainer);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  QueryRoot given=astContainer.getOriginalAST();  final IASTOptimizer rewriter=new ASTOrderByAggregateFlatteningOptimizer();  final QueryRoot actual=(QueryRoot)rewriter.optimize(context,new QueryNodeWithBindingSet(given,new IBindingSet[]{})).getQueryNode();  final NamedSubqueriesNode namedSubqueries=actual.getNamedSubqueries();  assertNull(namedSubqueries);  assertSame(QueryType.SELECT,actual.getQueryType());  final ProjectionNode projection=actual.getProjection();  assertNotNull(projection);  final IValueExpression[] assignments=projection.getValueExpressions();  assertEquals(4,assignments.length);  assertNotNull(assignments[0]);  assertTrue(assignments[0] instanceof Bind);  final IVariable<IV> var1=((Bind)assignments[0]).getVar();  final IValueExpression<IV> expr1=((Bind)assignments[0]).getExpr();  assertSame(var1,expr1);  assertEquals("x",var1.getName());  assertFalse(projection.excludeFromProjection(var1));  assertNotNull(assignments[1]);  assertTrue(assignments[1] instanceof Bind);  final IVariable<IV> var2=((Bind)assignments[1]).getVar();  final IValueExpression<IV> expr2=((Bind)assignments[1]).getExpr();  assertSame(var2,expr2);  assertEquals("y",var2.getName());  assertFalse(projection.excludeFromProjection(var2));  assertNotNull(assignments[2]);  assertTrue(assignments[2] instanceof Bind);  final IVariable<IV> var3=((Bind)assignments[2]).getVar();  assertFalse("x".equals(var3.getName()));  assertFalse("y".equals(var3.getName()));  assertFalse("z".equals(var3.getName()));  assertTrue(projection.excludeFromProjection(var3));  final IValueExpression<IV> expr3=((Bind)assignments[2]).getExpr();  assertTrue(expr3 instanceof MAX);  assertTrue(((MAX)expr3).get(0) instanceof Var);  assertEquals("z",((Var)((MAX)expr3).get(0)).getName());  assertNotNull(assignments[3]);  assertTrue(assignments[3] instanceof Bind);  final IVariable<IV> var4=((Bind)assignments[3]).getVar();  assertFalse("x".equals(var4.getName()));  assertFalse("y".equals(var4.getName()));  assertFalse("z".equals(var4.getName()));  assertFalse(var3.getName().equals(var4.getName()));  assertTrue(projection.excludeFromProjection(var4));  final IValueExpression<IV> expr4=((Bind)assignments[3]).getExpr();  assertTrue(expr4 instanceof COUNT);  assertTrue(((COUNT)expr4).get(0) instanceof Var);  assertEquals("z",((Var)((COUNT)expr4).get(0)).getName());  final GroupByNode groupBy=actual.getGroupBy();  assertNotNull(groupBy);  final IValueExpression[] groupByArgs=groupBy.getValueExpressions();  assertNotNull(groupByArgs);  assertEquals(2,groupByArgs.length);  assertNotNull(groupByArgs[0]);  assertTrue(groupByArgs[0] instanceof Bind);  assertEquals("x",((Bind)groupByArgs[0]).getVar().getName());  assertNotNull(groupByArgs[1]);  assertTrue(groupByArgs[1] instanceof Bind);  assertEquals("y",((Bind)groupByArgs[1]).getVar().getName());  final OrderByNode orderBy=actual.getOrderBy();  final Iterator<OrderByExpr> orderByArgs=orderBy.iterator();  assertTrue(orderByArgs.hasNext());  final OrderByExpr orderByArg1=orderByArgs.next();  assertTrue(orderByArg1.getValueExpression() instanceof Var);  assertEquals(var3.getName(),((Var)orderByArg1.getValueExpression()).getName());  assertFalse(orderByArg1.isAscending());  assertTrue(orderByArgs.hasNext());  final OrderByExpr orderByArg2=orderByArgs.next();  assertTrue(orderByArg2.getValueExpression() instanceof Var);  assertEquals("x",((Var)orderByArg2.getValueExpression()).getName());  assertTrue(orderByArg2.isAscending());  assertTrue(orderByArgs.hasNext());  final OrderByExpr orderByArg3=orderByArgs.next();  assertTrue(orderByArg3.getValueExpression() instanceof Var);  assertEquals(var4.getName(),((Var)orderByArg3.getValueExpression()).getName());  assertTrue(orderByArg3.isAscending());  assertTrue(orderByArgs.hasNext());  final OrderByExpr orderByArg4=orderByArgs.next();  assertTrue(orderByArg4.getValueExpression() instanceof Var);  assertEquals("y",((Var)orderByArg4.getValueExpression()).getName());  assertFalse(orderByArg4.isAscending());  assertFalse(orderByArgs.hasNext());  final GraphPatternGroup whereClause=actual.getWhereClause();  assertNotNull(whereClause);  assertTrue(whereClause instanceof JoinGroupNode);  final List<StatementPatternNode> patterns=((JoinGroupNode)whereClause).getStatementPatterns();  assertNotNull(patterns);  assertEquals(2,patterns.size());  final StatementPatternNode pattern1=patterns.get(0);  assertTrue(pattern1.s() instanceof VarNode);  assertEquals("x",((VarNode)pattern1.s()).getValueExpression().getName());  assertTrue(pattern1.p() instanceof ConstantNode);  assertTrue(((ConstantNode)pattern1.p()).getValueExpression() instanceof Constant);  assertTrue(((Constant)((ConstantNode)pattern1.p()).getValueExpression()).get() instanceof TermId);  assertEquals("http://example.org/r",((TermId)((Constant)((ConstantNode)pattern1.p()).getValueExpression()).get()).getValue().stringValue());  assertTrue(pattern1.o() instanceof VarNode);  assertEquals("y",((VarNode)pattern1.o()).getValueExpression().getName());  final StatementPatternNode pattern2=patterns.get(1);  assertTrue(pattern2.s() instanceof VarNode);  assertEquals("y",((VarNode)pattern2.s()).getValueExpression().getName());  assertTrue(pattern2.p() instanceof ConstantNode);  assertTrue(((ConstantNode)pattern2.p()).getValueExpression() instanceof Constant);  assertTrue(((Constant)((ConstantNode)pattern2.p()).getValueExpression()).get() instanceof TermId);  assertEquals("http://example.org/q",((TermId)((Constant)((ConstantNode)pattern2.p()).getValueExpression()).get()).getValue().stringValue());  assertTrue(pattern2.o() instanceof VarNode);  assertEquals("z",((VarNode)pattern2.o()).getValueExpression().getName());}  }
class C{  protected void start(){  checkState(executorService == null,"Cannot restart a Model");  executorService=Executors.newSingleThreadExecutor();  requestQueue=new SynchronousQueue<GenerationRequest>();  CompilerRunner compilerRunner=new CompilerRunner();  executorService.execute(compilerRunner);  processingEnv=compilerRunner.getProcessingEnvironment();}  }
class C{  public static String unescape(String input){  return StringEscapeUtils.unescapeJavaScript(input);}  }
class C{  private boolean isInputValid(){  if (null != keyValidator) {    String errorMessage=keyValidator.isValid(keyBox.getText());    if (null != errorMessage) {      setErrorMessage(errorMessage);      return false;    }  }  if (null != valueValidator) {    String errorMessage=valueValidator.isValid(valueBox.getText());    if (null != errorMessage) {      setErrorMessage(errorMessage);      return false;    }  }  setErrorMessage(null);  return true;}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  private void createMovements(){  int noMoves=0;  String info="";  MClient client=null;  MMovement move=null;  int M_Warehouse_ID=0;  int M_WarehouseSource_ID=0;  MWarehouse whSource=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NOT NULL");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (whSource == null || whSource.getM_WarehouseSource_ID() != replenish.getM_WarehouseSource_ID())     whSource=MWarehouse.get(getCtx(),replenish.getM_WarehouseSource_ID());    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (client == null || client.getAD_Client_ID() != whSource.getAD_Client_ID())     client=MClient.get(getCtx(),whSource.getAD_Client_ID());    if (move == null || M_WarehouseSource_ID != replenish.getM_WarehouseSource_ID() || M_Warehouse_ID != replenish.getM_Warehouse_ID()) {      M_WarehouseSource_ID=replenish.getM_WarehouseSource_ID();      M_Warehouse_ID=replenish.getM_Warehouse_ID();      move=new MMovement(getCtx(),0,get_TrxName());      move.setC_DocType_ID(p_C_DocType_ID);      move.setDescription(Msg.getMsg(getCtx(),"Replenishment") + ": " + whSource.getName()+ "->"+ wh.getName());      move.setAD_Org_ID(whSource.getAD_Org_ID());      if (!move.save())       return;      log.fine(move.toString());      noMoves++;      info+=" - " + move.getDocumentNo();    }    int M_LocatorTo_ID=wh.getDefaultLocator().getM_Locator_ID();    MProduct product=MProduct.get(getCtx(),replenish.getM_Product_ID());    String MMPolicy=product.getMMPolicy();    MStorage[] storages=MStorage.getWarehouse(getCtx(),whSource.getM_Warehouse_ID(),replenish.getM_Product_ID(),0,0,true,null,MClient.MMPOLICY_FiFo.equals(MMPolicy),get_TrxName());    BigDecimal target=replenish.getQtyToOrder();    for (int j=0; j < storages.length; j++) {      MStorage storage=storages[j];      if (storage.getQtyOnHand().signum() <= 0)       continue;      BigDecimal moveQty=target;      if (storage.getQtyOnHand().compareTo(moveQty) < 0)       moveQty=storage.getQtyOnHand();      MMovementLine line=new MMovementLine(move);      line.setM_Product_ID(replenish.getM_Product_ID());      line.setMovementQty(moveQty);      if (replenish.getQtyToOrder().compareTo(moveQty) != 0)       line.setDescription("Total: " + replenish.getQtyToOrder());      line.setM_Locator_ID(storage.getM_Locator_ID());      line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());      line.setM_LocatorTo_ID(M_LocatorTo_ID);      line.setM_AttributeSetInstanceTo_ID(storage.getM_AttributeSetInstance_ID());      line.saveEx();      target=target.subtract(moveQty);      if (target.signum() == 0)       break;    }  }  if (replenishs.length == 0) {    m_info="No Source Warehouse";    log.warning(m_info);  } else {    m_info="#" + noMoves + info;    log.info(m_info);  }}  }
class C{  public boolean isPending(int reqId){  return getPending(reqId) != null;}  }
class C{  public static String format(final long l){  final StringBuffer s=new StringBuffer();  return FORMAT_LONG.format(l,s,new java.text.FieldPosition(0)).toString();}  }
class C{  static String debugEncode(String input){  final int n=input.length();  StringBuilder buf=new StringBuilder(n * 2);  for (int i=0; i < n; ++i) {    char ch=input.charAt(i);switch (ch) {case '\\':      buf.append("\\\\");    break;case '\'':  buf.append("\\\'");break;case '\"':buf.append("\\\"");break;case '\r':buf.append("\\r");break;case '\n':buf.append("\\n");break;case '\t':buf.append("\\t");break;default :if (' ' <= ch && ch <= '~') {buf.append(ch);} else {buf.append(String.format("\\u%04x",(int)ch));}break;}}return buf.toString();}  }
class C{  @Synchronized("stateLock") public void addNetwork(PircBotX bot){  checkNotNull(bot,"Bot cannot be null");  checkArgument(!bot.isConnected(),"Bot must not already be connected");  if (state == State.NEW) {    log.debug("Not started yet, add to queue");    startQueue.add(bot);  } else   if (state == State.RUNNING) {    log.debug("Already running, start bot immediately");    startBot(bot);  } else   throw new RuntimeException("MultiBotManager is not running. State: " + state);}  }
class C{  public void update(){  if (!dirty) {    return;  }  for (  EnableDisableFlag flag : flags) {    flag.update();  }  if (fogFlag.isEnabled()) {    re.setFogHint();  }  if (lineSmoothFlag.isEnabled()) {    re.setLineSmoothHint();  }  re.setPatchDiv(patch_div_s,patch_div_t);  re.setPatchPrim(patch_prim);  re.setShadeModel(shadeModel);  re.setMaterialEmissiveColor(mat_emissive);  re.setMaterialShininess(materialShininess);  re.setLightModelAmbientColor(ambient_light);  re.setLightMode(lightMode);  for (int light=0; light < NUM_LIGHTS; light++) {    re.setLightType(light,light_type[light],light_kind[light]);    re.setLightConstantAttenuation(light,lightConstantAttenuation[light]);    re.setLightLinearAttenuation(light,lightLinearAttenuation[light]);    re.setLightQuadraticAttenuation(light,lightQuadraticAttenuation[light]);    re.setLightAmbientColor(light,lightAmbientColor[light]);    re.setLightDiffuseColor(light,lightDiffuseColor[light]);    re.setLightSpecularColor(light,lightSpecularColor[light]);  }  re.setFrontFace(frontFaceCw);  re.setTextureEnvColor(tex_env_color);  re.setFogColor(fog_color);  re.setColorTestFunc(colorTestFunc);  re.setColorTestReference(colorTestRef);  re.setColorTestMask(colorTestMsk);  re.setAlphaFunc(alphaFunc,alphaRef,alphaMask);  re.setStencilFunc(stencilFunc,stencilRef,stencilMask);  re.setStencilOp(stencilOpFail,stencilOpZFail,stencilOpZPass);  re.setBlendEquation(blendEquation);  re.setLogicOp(logicOp);  re.setDepthMask(depthMask);  re.setColorMask(colorMask[0],colorMask[1],colorMask[2],colorMask[3]);  re.setTextureFunc(textureFunc,textureAlphaUsed,textureColorDoubled);  dirty=false;}  }
class C{  public String generateWorkflowStepToMarkExportMaskInActive(Workflow workflow,String previousStep,ExportGroup exportGroup,ExportMask exportMask,ExportTaskCompleter completer){  URI exportGroupURI=exportGroup.getId();  String stepId=workflow.createStepId();  ExportTaskCompleter exportTaskCompleter;  if (completer != null) {    exportTaskCompleter=completer;    exportTaskCompleter.setOpId(stepId);  } else {    exportTaskCompleter=new ExportMaskDeleteCompleter(exportGroupURI,exportMask.getId(),stepId);  }  Workflow.Method markExportMaskInActiveExecuteMethod=new Workflow.Method("doExportGroupToCleanExportMask",exportGroupURI,exportMask.getId(),exportTaskCompleter);  stepId=workflow.createStep(EXPORT_MASK_CLEANUP_TASK,String.format("Marking exportmasks to inactive %s (%s)",exportMask.getMaskName(),exportMask.getId().toString()),previousStep,NullColumnValueGetter.getNullURI(),"storage-system",MaskingWorkflowEntryPoints.class,markExportMaskInActiveExecuteMethod,null,stepId);  return stepId;}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  public static int[] readInts(){  return new In().readAllInts();}  }
class C{  public BranchGroupPortrayal3D(BranchGroup scene,double scale){  this(scene,scale,null);}  }
class C{  public static Object fromSpec(Object context,String spec) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(context,spec,Object.class,null,null);}  }
class C{  public LessThanOrEqual(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public boolean matches(@Nullable String string){  if (string == null) {    return false;  }  int lengthAccountedFor=0;  if (initialString != null) {    if (!string.startsWith(initialString)) {      return false;    }    lengthAccountedFor+=initialString.length();  }  if (suffix != null) {    if (!string.endsWith(suffix)) {      return false;    }    lengthAccountedFor+=suffix.length();  }  return hasWildcard ? (lengthAccountedFor <= string.length()) : (lengthAccountedFor == string.length());}  }
class C{  private void shouldDealWithOutgoingEdgesOnlyOption(final AccumuloStore store){  try {    final Set<Element> data=new HashSet<>();    data.add(AccumuloTestData.EDGE_A1_B1);    data.add(AccumuloTestData.EDGE_B2_A2);    addElements(data,store,new User());    final AbstractAccumuloTwoSetSeededOperation<EntitySeed,Element> opA1B1=new GetElementsBetweenSets<>(AccumuloTestData.SEED_A1_SET,AccumuloTestData.SEED_B1_SET,defaultView);    opA1B1.setIncludeEntities(false);    opA1B1.setIncludeIncomingOutGoing(IncludeIncomingOutgoingType.OUTGOING);    final Set<Element> a1B1OutgoingEdgeResults=returnElementsFromOperation(store,opA1B1,new User(),false);    assertThat(a1B1OutgoingEdgeResults,IsCollectionContaining.hasItem(AccumuloTestData.EDGE_A1_B1));    opA1B1.setIncludeIncomingOutGoing(IncludeIncomingOutgoingType.INCOMING);    final Set<Element> a1B1EdgeIncomingResults=returnElementsFromOperation(store,opA1B1,new User(),false);    assertEquals(0,a1B1EdgeIncomingResults.size());    final AbstractAccumuloTwoSetSeededOperation<EntitySeed,Element> opA2B2=new GetElementsBetweenSets<>(AccumuloTestData.SEED_A2_SET,AccumuloTestData.SEED_B2_SET,defaultView);    opA2B2.setIncludeEntities(false);    opA2B2.setIncludeIncomingOutGoing(IncludeIncomingOutgoingType.INCOMING);    final Set<Element> a2B2EdgeIncomingResults=returnElementsFromOperation(store,opA2B2,new User(),false);    assertThat(a2B2EdgeIncomingResults,IsCollectionContaining.hasItem(AccumuloTestData.EDGE_B2_A2));    opA2B2.setIncludeIncomingOutGoing(IncludeIncomingOutgoingType.OUTGOING);    final Set<Element> a2B2EdgeOutgoingResults=returnElementsFromOperation(store,opA2B2,new User(),false);    assertEquals(0,a2B2EdgeOutgoingResults.size());  } catch (  StoreException e) {    fail("Failed to set up graph in Accumulo with exception: " + e);  }}  }
class C{  private boolean insertChild(Object parent,Object child){  Set children=(Set)fChildrenMap.get(parent);  if (children == null) {    children=new HashSet();    fChildrenMap.put(parent,children);  }  return children.add(child);}  }
class C{  protected StringBuffer parseString(StringBuffer sbuf) throws IOException {  int ch;  while ((ch=readChar()) >= 0)   sbuf.append((char)ch);  return sbuf;}  }
class C{  private ExpressionResult computeCheck(){  Object entity=(resource == null) ? null : resource.getObject();  result=check.ok(entity,requestScope,changeSpec) ? PASS : FAIL;  return result;}  }
class C{  public static Map<Pattern,Set<Pattern>> loadPatterns(@NonNls String propertyKey){  final Map<Pattern,Set<Pattern>> result=new HashMap<Pattern,Set<Pattern>>();  final String patterns=System.getProperty(propertyKey);  if (patterns != null) {    final String[] pathPatterns=patterns.split(";");    for (    String excludedPattern : pathPatterns) {      String module=null;      int idx=0;      if (excludedPattern.startsWith("[")) {        idx=excludedPattern.indexOf("]") + 1;        module=excludedPattern.substring(1,idx - 1);      }      final Pattern modulePattern=module != null ? Pattern.compile(StringUtil.replace(module,"*",".*")) : null;      final Pattern pattern=Pattern.compile(FileUtil.convertAntToRegexp(excludedPattern.substring(idx)));      Set<Pattern> dirPatterns=result.get(modulePattern);      if (dirPatterns == null) {        dirPatterns=new HashSet<Pattern>();        result.put(modulePattern,dirPatterns);      }      dirPatterns.add(pattern);    }  }  return result;}  }
class C{  private void parseClassTypeSignatureSuffix(List<SimpleClassTypeSignature> scts){  while (current() == '.') {    advance();    scts.add(parseSimpleClassTypeSignature(true));  }}  }
class C{  protected PrimitiveParamImpl(){  super();}  }
class C{  Object processENUM_OR_PQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  Object objToReturn=null;  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if (!avt.isSimple())       return avt; else       objToReturn=avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  }  int key=this.getEnum(value);  if (key != StringToIntTable.INVALID_KEY) {    if (objToReturn == null)     objToReturn=new Integer(key);  } else {    try {      QName qname=new QName(value,handler,true);      if (objToReturn == null)       objToReturn=qname;      if (qname.getPrefix() == null) {        StringBuffer enumNamesList=getListOfEnums();        enumNamesList.append(" <qname-but-not-ncname>");        handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);        return null;      }    } catch (    IllegalArgumentException ie) {      StringBuffer enumNamesList=getListOfEnums();      enumNamesList.append(" <qname-but-not-ncname>");      handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},ie);      return null;    }catch (    RuntimeException re) {      StringBuffer enumNamesList=getListOfEnums();      enumNamesList.append(" <qname-but-not-ncname>");      handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},re);      return null;    }  }  return objToReturn;}  }
class C{  public ColumnVector(final int size){  if (0 == size) {    throw new IllegalArgumentException("cannot create a vector of zero size");  }  this.size=size;  this.vector=new double[this.size];  this.matrix=new DenseMatrix(this.size,1,this.vector);}  }
class C{  public static int bitCount(int i){  i-=((i >> 1) & 0x55555555);  i=(i & 0x33333333) + ((i >> 2) & 0x33333333);  i=(((i >> 4) + i) & 0x0F0F0F0F);  i+=(i >> 8);  i+=(i >> 16);  return (i & 0x0000003F);}  }
class C{  public static InstanceRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InstanceRequest object=new InstanceRequest();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"instanceRequest".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InstanceRequest)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list5=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","defaultLocale").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setDefaultLocale(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","loginUrl").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setLoginUrl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","organizationId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setOrganizationId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","organizationName").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setOrganizationName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","parameterValue").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list5.add(null);        reader.next();      } else {        list5.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));      }      boolean loopDone5=false;      while (!loopDone5) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone5=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org/xsd","parameterValue").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list5.add(null);              reader.next();            } else {              list5.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));            }          } else {            loopDone5=true;          }        }      }      object.setParameterValue((org.oscm.xsd.ServiceParameter[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.ServiceParameter.class,list5));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","subscriptionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  StackMap(ConstPool cp,byte[] newInfo){  super(cp,tag,newInfo);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node removedNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      removedNode=entRef.removeChild(entElement);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void clearListeners(){  mListenerList.clear();}  }
class C{  public NotificationChain basicSetEvent(Expression newEvent,NotificationChain msgs){  Expression oldEvent=event;  event=newEvent;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.EVENT_RAISING_EXPRESSION__EVENT,oldEvent,newEvent);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected TStructGetterImpl(){  super();}  }
class C{  public boolean isDeleteContents(){  return fDeleteContents;}  }
class C{  public void start(){  mEgl=(EGL10)EGLContext.getEGL();  mEglDisplay=mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);  if (mEglDisplay == EGL10.EGL_NO_DISPLAY) {    throw new RuntimeException("eglGetDisplay failed");  }  int[] version=new int[2];  if (!mEgl.eglInitialize(mEglDisplay,version)) {    throw new RuntimeException("eglInitialize failed");  }  mEglConfig=chooseEglConfig();  mEglContext=createContext(mEgl,mEglDisplay,mEglConfig);  if (mEglContext == null || mEglContext == EGL10.EGL_NO_CONTEXT) {    mEglContext=null;    throwEglException("createContext");  }  mEglSurface=null;}  }
class C{  public void java_lang_Class_getClassLoader0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  private void cancelRepeatingAlarm(){  Intent requestIntent=createRegisterRequestIntent(mApplicationContext,false);  PendingIntent pendingIntent=PendingIntent.getService(mApplicationContext,0,requestIntent,PendingIntent.FLAG_NO_CREATE);  if (pendingIntent != null) {    AlarmManager am=(AlarmManager)mApplicationContext.getSystemService(Context.ALARM_SERVICE);    am.cancel(pendingIntent);    pendingIntent.cancel();  }}  }
class C{  private void initializeModuleListeners(final INaviModule module){  module.addListener(m_moduleListener);  if (module.isLoaded()) {    notifyModuleViews(module);  }}  }
class C{  private void updateUserProjectAclBasedOnUserGroup(StorageOSUser user,Project project,Set<String> projectAcls){  if (user == null || project == null) {    _log.error("Invalid user or project",user,project);    return;  }  StringSetMap roleAssignments=project.getAcls();  Map<UserGroup,StringSet> userGroupsWithRoles=getUserGroupsFromRoleAssignments(roleAssignments);  if (CollectionUtils.isEmpty(userGroupsWithRoles)) {    _log.debug("There are no role assignments for project {} with user group",project.getLabel());    return;  }  StringSet roleSet=findAllRolesToAdd(user,userGroupsWithRoles);  if (CollectionUtils.isEmpty(roleSet)) {    _log.debug("There are no roles found for user group in the project {}",project.getLabel());    return;  }  for (  String role : roleSet) {    if (isProjectACL(role)) {      _log.debug("Adding the project acl {} to the user {}",role,user.getDistinguishedName());      projectAcls.add(role);    }  }}  }
class C{  public List<FileShare> prepareFileSystems(FileSystemParam param,String task,TaskList taskList,Project project,TenantOrg tenantOrg,DataObject.Flag[] flags,VirtualArray varray,VirtualPool vpool,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper cosCapabilities,Boolean createInactive){  List<FileShare> preparedFileSystems=new ArrayList<>();  Iterator<Recommendation> recommendationsIter=recommendations.iterator();  while (recommendationsIter.hasNext()) {    FileMirrorRecommendation recommendation=(FileMirrorRecommendation)recommendationsIter.next();    if (recommendation.getId() != null) {      continue;    }    FileShare sourceFileShare=getPrecreatedFile(taskList,param.getLabel());    if (!cosCapabilities.createMirrorExistingFileSystem()) {      _log.info(String.format("createFileSystem --- FileShare: %1$s, StoragePool: %2$s, StorageSystem: %3$s",sourceFileShare.getId(),recommendation.getSourceStoragePool(),recommendation.getSourceStorageSystem()));      validateFileSystem(recommendation,sourceFileShare);    }    setFileMirrorRecommendation(recommendation,vpool,varray,false,false,sourceFileShare);    FileShare targetFileShare=null;    StringBuilder fileLabelBuilder=null;    VirtualPool targetVpool=vpool;    String targetFsPrefix=sourceFileShare.getName();    if (cosCapabilities.getFileTargetCopyName() != null && !cosCapabilities.getFileTargetCopyName().isEmpty()) {      targetFsPrefix=cosCapabilities.getFileTargetCopyName();    }    if (vpool.getFileReplicationType().equals(FileReplicationType.LOCAL.name())) {      String varrayName=varray.getLabel().replaceAll("[^\\dA-Za-z\\_]","");      fileLabelBuilder=new StringBuilder(targetFsPrefix).append("-target-" + varrayName);      _log.info("Target file system name {}",fileLabelBuilder.toString());      targetFileShare=prepareEmptyFileSystem(fileLabelBuilder.toString(),sourceFileShare.getCapacity(),project,recommendation,tenantOrg,varray,vpool,targetVpool,flags,task);      setFileMirrorRecommendation(recommendation,vpool,varray,true,false,targetFileShare);      setMirrorFileShareAttributes(sourceFileShare,targetFileShare);      preparedFileSystems.add(sourceFileShare);      preparedFileSystems.add(targetFileShare);    } else {      Map<URI,VpoolRemoteCopyProtectionSettings> settingMap=VirtualPool.getFileRemoteProtectionSettings(vpool,_dbClient);      VpoolRemoteCopyProtectionSettings protectionSettings=null;      List<VirtualArray> virtualArrayTargets=FileMirrorScheduler.getTargetVirtualArraysForVirtualPool(project,vpool,_dbClient,getPermissionsHelper());      preparedFileSystems.add(sourceFileShare);      for (      VirtualArray targetVArray : virtualArrayTargets) {        protectionSettings=settingMap.get(targetVArray.getId());        if (protectionSettings.getVirtualPool() != null) {          targetVpool=_dbClient.queryObject(VirtualPool.class,protectionSettings.getVirtualPool());        }        String varrayName=targetVArray.getLabel().replaceAll("[^\\dA-Za-z\\_]","");        fileLabelBuilder=new StringBuilder(targetFsPrefix).append("-target-" + varrayName);        _log.info("Target file system name {}",fileLabelBuilder.toString());        targetFileShare=prepareEmptyFileSystem(fileLabelBuilder.toString(),sourceFileShare.getCapacity(),project,recommendation,tenantOrg,targetVArray,vpool,targetVpool,flags,task);        setFileMirrorRecommendation(recommendation,targetVpool,targetVArray,true,false,targetFileShare);        setMirrorFileShareAttributes(sourceFileShare,targetFileShare);        preparedFileSystems.add(targetFileShare);      }    }  }  return preparedFileSystems;}  }
class C{  public Matrix4f add4x3(Matrix4fc other){  return add4x3(other,this);}  }
class C{  public static List<String> sanitize(String topic){  if (topic.contains("+") || topic.endsWith("#") || topic.endsWith("#/" + END)) {    return sanitizeTopicFilter(topic);  } else {    return sanitizeTopicName(topic);  }}  }
class C{  @Nonnull public BugInstance addClass(PreorderVisitor visitor){  String className=visitor.getDottedClassName();  addClass(className);  return this;}  }
class C{  public boolean useSsl(){  return useSsl;}  }
class C{  private static void restoreLibraryInfo(){  fgLibraryInfoMap=new HashMap<String,LibraryInfo>(10);  IPath libPath=getDefault().getStateLocation();  libPath=libPath.append("libraryInfos.xml");  File file=libPath.toFile();  if (file.exists()) {    try {      InputStream stream=new BufferedInputStream(new FileInputStream(file));      DocumentBuilder parser=DocumentBuilderFactory.newInstance().newDocumentBuilder();      parser.setErrorHandler(new DefaultHandler());      Element root=parser.parse(new InputSource(stream)).getDocumentElement();      if (!root.getNodeName().equals("libraryInfos")) {        return;      }      NodeList list=root.getChildNodes();      int length=list.getLength();      for (int i=0; i < length; ++i) {        Node node=list.item(i);        short type=node.getNodeType();        if (type == Node.ELEMENT_NODE) {          Element element=(Element)node;          String nodeName=element.getNodeName();          if (nodeName.equalsIgnoreCase("libraryInfo")) {            String version=element.getAttribute("version");            String location=element.getAttribute("home");            String[] bootpath=getPathsFromXML(element,"bootpath");            String[] extDirs=getPathsFromXML(element,"extensionDirs");            String[] endDirs=getPathsFromXML(element,"endorsedDirs");            if (location != null) {              LibraryInfo info=new LibraryInfo(version,bootpath,extDirs,endDirs);              fgLibraryInfoMap.put(location,info);            }          }        }      }    } catch (    IOException|SAXException|ParserConfigurationException e) {      log(e);    }  }}  }
class C{  public static void serialize(Object value,OutputStream outputStream) throws IOException {  try {    new ObjectOutputStream(outputStream).writeObject(value);  }  finally {    outputStream.close();  }}  }
class C{  boolean tooDirty(CompressingTermVectorsReader candidate){  return candidate.getNumDirtyChunks() > 1024 || candidate.getNumDirtyChunks() * 100 > candidate.getNumChunks();}  }
class C{  public void writeToParcel(Parcel dest,int flags){  if (address != null) {    dest.writeByte((byte)1);    dest.writeByteArray(address.getAddress());    dest.writeInt(prefixLength);  } else {    dest.writeByte((byte)0);  }}  }
class C{  private EntryImpl checkOldName(String baseName){  EntryImpl e=(EntryImpl)name2entry.get(baseName);  if (e == null) {    throw new IllegalArgumentException("Filter not found:" + baseName);  }  return e;}  }
class C{  public void addInMessage(final String address){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.TYPE_INFO__FIRST:    setFirst((Expression)newValue);  return;case GamlPackage.TYPE_INFO__SECOND:setSecond((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public INarcPod(int team,int type,int location){  this.team=team;  this.type=type;  this.location=location;}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public CallMethodRequest clone(){  CallMethodRequest result=new CallMethodRequest();  result.ObjectId=ObjectId;  result.MethodId=MethodId;  result.InputArguments=InputArguments == null ? null : InputArguments.clone();  return result;}  }
class C{  private static boolean[] calcFarray(final int flagValue){  if (flagValue == 0) {    return new boolean[10];  }  final boolean[] Farray=new boolean[10];  final int[] pow={0,1,2,4,8,16,32,64,128,256,512};  for (int jj=1; jj < 10; jj++) {    if (((flagValue & pow[jj]) == pow[jj])) {      Farray[jj - 1]=true;    }  }  return Farray;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchForTitles(getRegex(stack),masky);  } else   return Wizard.getInstance().searchForTitles(getRegex(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public void load(int AD_Workflow_ID,boolean readWrite){  log.fine("RW=" + readWrite + " - AD_Workflow_ID="+ AD_Workflow_ID);  if (AD_Workflow_ID == 0)   return;  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  m_wf=new MWorkflow(Env.getCtx(),AD_Workflow_ID,null);  centerPanel.removeAll();  centerPanel.setReadWrite(readWrite);  if (readWrite)   centerPanel.setWorkflow(m_wf);  MWFNode[] nodes=m_wf.getNodes(true,AD_Client_ID);  for (int i=0; i < nodes.length; i++) {    WFNode wfn=new WFNode(nodes[i]);    wfn.addPropertyChangeListener(WFNode.PROPERTY_SELECTED,this);    boolean rw=readWrite && (AD_Client_ID == nodes[i].getAD_Client_ID());    centerPanel.add(wfn,rw);    MWFNodeNext[] nexts=nodes[i].getTransitions(AD_Client_ID);    for (int j=0; j < nexts.length; j++)     centerPanel.add(new WFLine(nexts[j]),false);  }  StringBuffer msg=new StringBuffer("<HTML>");  msg.append("<H2>").append(m_wf.getName(true)).append("</H2>");  String s=m_wf.getDescription(true);  if (s != null && s.length() > 0)   msg.append("<B>").append(s).append("</B>");  s=m_wf.getHelp(true);  if (s != null && s.length() > 0)   msg.append("<BR>").append(s);  msg.append("</HTML>");  infoTextPane.setText(msg.toString());  infoTextPane.setCaretPosition(0);  centerPanel.validate();  centerPanel.repaint();  validate();}  }
class C{  private Header readHeader() throws IOException {  final Header header=new Header();  header.headerSize=readFullBuffer(4).getInt();  final ByteBuffer headerBuffer=readFullBuffer(header.headerSize - 8);  header.archiveSize=headerBuffer.getInt();  header.formatVersion=headerBuffer.getShort();  header.sectorSizeShift=headerBuffer.getShort();  header.hashTableOffset=headerBuffer.getInt();  header.blockTableOffset=headerBuffer.getInt();  header.hashTableEntries=headerBuffer.getInt();  header.blockTableEntries=headerBuffer.getInt();  if (header.formatVersion == Header.FORMAT_VERSION_BURNING_CRUSADE) {    header.extendedBlockTableOffset=headerBuffer.getLong();    header.hashTableOffsetHigh=headerBuffer.getShort();    header.blockTableOffsetHigh=headerBuffer.getShort();  }  return header;}  }
class C{  public Manifest createTimestampManifest(String rnd) throws Exception {  Manifest manifest=new Manifest(document);  manifest.setId(ID_TS_MANIFEST + "-" + rnd);  addManifestReference(manifest,SIGNATURE_VALUE_ID);  if (XmlUtils.getElementById(document,COMPLETE_CERTIFICATE_REFS_ID) != null) {    addManifestReference(manifest,COMPLETE_CERTIFICATE_REFS_ID);  }  manifest.addResourceResolver(new IdResolver(document));  manifest.generateDigestValues();  objectContainer.appendChild(manifest.getElement());  return manifest;}  }
class C{  public void addSpoken(CharSequence text){  mSpokenFeedback.add(text);}  }
class C{  protected void canSplitUpClass(AttrTypes attrTypes,int classType){  if (attrTypes.nominal) {    canSplitUpClass(Attribute.NOMINAL,classType);  }  if (attrTypes.numeric) {    canSplitUpClass(Attribute.NUMERIC,classType);  }}  }
class C{  @Override public boolean determineExportGroupCreateSteps(Workflow workflow,String previousStep,BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,boolean zoningStepNeeded,String token) throws Exception {  boolean flowCreated=false;  InitiatorHelper initiatorHelper=new InitiatorHelper(initiatorURIs).process(exportGroup);  Set<URI> partialMasks=new HashSet<>();  Map<String,Set<URI>> initiatorToExportMaskPlacementMap=determineInitiatorToExportMaskPlacements(exportGroup,storage.getId(),initiatorHelper.getResourceToInitiators(),device.findExportMasks(storage,initiatorHelper.getPortNames(),false),initiatorHelper.getPortNameToInitiatorURI(),partialMasks);  if (initiatorToExportMaskPlacementMap.isEmpty()) {    _log.info(String.format("No existing mask found w/ initiators { %s }",Joiner.on(",").join(initiatorHelper.getPortNames())));    if (!initiatorURIs.isEmpty()) {      Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);      for (      Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {        String computeKey=resourceEntry.getKey();        List<URI> computeInitiatorURIs=resourceEntry.getValue();        _log.info(String.format("New export masks for %s",computeKey));        GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);        previousStep=result.getStepId();        flowCreated=true;      }    }  } else {    Map<URI,ExportMaskPolicy> policyCache=new HashMap<>();    _log.info(String.format("Mask(s) found w/ initiators {%s}. " + "MatchingExportMaskURIs {%s}, portNameToInitiators {%s}",Joiner.on(",").join(initiatorHelper.getPortNames()),Joiner.on(",").join(initiatorToExportMaskPlacementMap.keySet()),Joiner.on(",").join(initiatorHelper.getPortNameToInitiatorURI().entrySet())));    List<URI> initiatorURIsCopy=new ArrayList<URI>();    initiatorURIsCopy.addAll(initiatorURIs);    Map<URI,Map<URI,Integer>> existingMasksToUpdateWithNewVolumes=new HashMap<URI,Map<URI,Integer>>();    Map<URI,Set<Initiator>> existingMasksToUpdateWithNewInitiators=new HashMap<URI,Set<Initiator>>();    Set<URI> initiatorsForNewExport=new HashSet<>();    if (exportGroup.forCluster() || exportGroup.forHost()) {      updatePlacementMapForCluster(exportGroup,initiatorHelper.getResourceToInitiators(),initiatorToExportMaskPlacementMap);    }    for (    Map.Entry<String,Set<URI>> entry : initiatorToExportMaskPlacementMap.entrySet()) {      URI initiatorURI=initiatorHelper.getPortNameToInitiatorURI().get(entry.getKey());      Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorURI);      initiatorURIsCopy.remove(initiatorURI);      List<URI> exportMaskURIs=new ArrayList<URI>();      exportMaskURIs.addAll(entry.getValue());      List<ExportMask> masks=_dbClient.queryObject(ExportMask.class,exportMaskURIs);      _log.info(String.format("initiator %s masks {%s}",initiator.getInitiatorPort(),Joiner.on(',').join(exportMaskURIs)));      for (      ExportMask mask : masks) {        _log.info(String.format("processing mask %s and initiator %s",mask.getMaskName(),initiator.getInitiatorPort()));        if (mask.getMaskName() != null && mask.getMaskName().toUpperCase().contains(ExportUtils.NO_VIPR)) {          _log.info(String.format("ExportMask %s disqualified because the name contains %s (in upper or lower case) to exclude it",mask.getMaskName(),ExportUtils.NO_VIPR));          continue;        }        ExportMaskPolicy exportMaskDetails=getExportMaskPolicy(policyCache,device,storage,mask);        boolean hasMultipleHosts=maskAppliesToMultipleHosts(mask);        boolean createHostExportWhenClusterExportExists=(hasMultipleHosts && exportGroup.forHost());        boolean createClusterExportWhenHostExportExists=(exportGroup.forCluster() && !exportMaskDetails.isCascadedIG());        if (createClusterExportWhenHostExportExists || createHostExportWhenClusterExportExists) {          initiatorsForNewExport.add(initiatorURI);          continue;        }        if (mask.getInitiators() != null) {          for (          String existingMaskInitiatorStr : mask.getInitiators()) {            Initiator existingMaskInitiator=_dbClient.queryObject(Initiator.class,URI.create(existingMaskInitiatorStr));            if ((initiator != null && initiator.getId() != null) && (!existingMasksToUpdateWithNewInitiators.containsKey(mask.getId()) || !existingMasksToUpdateWithNewInitiators.get(mask.getId()).contains(initiator)) && (existingMaskInitiator != null && (exportGroup.forHost() && initiator.getHost() != null && initiator.getHost().equals(existingMaskInitiator.getHost()) || (exportGroup.forCluster() && initiator.getClusterName() != null && initiator.getClusterName().equals(existingMaskInitiator.getClusterName()))))) {              Set<Initiator> existingMaskInitiators=existingMasksToUpdateWithNewInitiators.get(mask.getId());              if (existingMaskInitiators == null) {                existingMaskInitiators=new HashSet<Initiator>();                existingMasksToUpdateWithNewInitiators.put(mask.getId(),existingMaskInitiators);              }              if (!mask.hasInitiator(initiator.getId().toString())) {                existingMaskInitiators.add(initiator);                _log.info(String.format("initiator %s needs to be added to mask %s",initiator.getInitiatorPort(),mask.getMaskName()));              }            }          }        }      }    }    VmaxVolumeToExportMaskApplicatorContext context=createVmaxNativeApplicatorContext(workflow,exportGroup,storage,policyCache,zoningStepNeeded,token,initiatorHelper,initiatorToExportMaskPlacementMap,initiatorURIsCopy,partialMasks,volumeMap,initiatorsForNewExport,existingMasksToUpdateWithNewVolumes,existingMasksToUpdateWithNewInitiators,previousStep);    NativeVolumeToExportMaskRuleApplicator ruleApplicator=new NativeVolumeToExportMaskRuleApplicator(_dbClient,context);    ruleApplicator.run();    if (context.resultSuccess) {      previousStep=context.previousStep;      flowCreated=context.flowCreated;    } else {      _log.info("Failure in volume to ExportMask rules");      return false;    }    _log.info(String.format("existingMasksToUpdateWithNewVolumes.size = %d",existingMasksToUpdateWithNewVolumes.size()));    if (!initiatorsForNewExport.isEmpty()) {      if (exportGroup.forCluster() && !initiatorURIsCopy.isEmpty()) {        initiatorsForNewExport.addAll(initiatorURIsCopy);        initiatorURIsCopy.clear();      }      Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorsForNewExport);      for (      Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {        String computeKey=resourceEntry.getKey();        List<URI> computeInitiatorURIs=resourceEntry.getValue();        _log.info(String.format("New export masks for %s",computeKey));        GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);        flowCreated=true;        previousStep=result.getStepId();        if (zoningStepNeeded) {          String zoningStep=workflow.createStepId();          List<URI> masks=new ArrayList<URI>();          masks.add(result.getMaskURI());          previousStep=generateZoningCreateWorkflow(workflow,previousStep,exportGroup,masks,volumeMap,zoningStep);        }      }    }    Map<String,List<URI>> newComputeResources=mapInitiatorsToComputeResource(exportGroup,initiatorURIsCopy);    if (newComputeResources != null && !newComputeResources.isEmpty()) {      for (      Map.Entry<String,List<URI>> entry : newComputeResources.entrySet()) {        _log.info(String.format("New mask needed for compute resource %s",entry.getKey()));        GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(workflow,previousStep,storage,exportGroup,entry.getValue(),volumeMap,token);        flowCreated=true;        previousStep=result.getStepId();        if (zoningStepNeeded) {          String zoningStep=workflow.createStepId();          List<URI> masks=new ArrayList<URI>();          masks.add(result.getMaskURI());          previousStep=generateZoningCreateWorkflow(workflow,previousStep,exportGroup,masks,volumeMap,zoningStep);        }      }    }    for (    Map.Entry<URI,Map<URI,Integer>> entry : existingMasksToUpdateWithNewVolumes.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      updateZoningMap(exportGroup,mask,true);      Map<URI,Integer> volumesToAdd=entry.getValue();      _log.info(String.format("adding these volumes %s to mask %s",Joiner.on(",").join(volumesToAdd.keySet()),mask.getMaskName()));      previousStep=generateZoningAddVolumesWorkflow(workflow,previousStep,exportGroup,Arrays.asList(mask),new ArrayList<URI>(volumesToAdd.keySet()));      previousStep=generateExportMaskAddVolumesWorkflow(workflow,previousStep,storage,exportGroup,mask,volumesToAdd,null);      flowCreated=true;      exportGroup.addExportMask(mask.getId());      _dbClient.updateObject(exportGroup);    }    for (    Map.Entry<URI,Set<Initiator>> entry : existingMasksToUpdateWithNewInitiators.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      if (!existingMasksToUpdateWithNewVolumes.containsKey(mask.getId())) {        _log.info(String.format("Not adding initiators to mask: %s because we found we don't need to change the mask",mask.getMaskName()));        continue;      }      updateZoningMap(exportGroup,mask,true);      exportGroup.addExportMask(mask.getId());      _dbClient.updateObject(exportGroup);      Set<Initiator> initiatorsToAdd=entry.getValue();      if (!initiatorsToAdd.isEmpty()) {        List<URI> initiatorsURIs=new ArrayList<URI>();        for (        Initiator initiator : initiatorsToAdd) {          initiatorsURIs.add(initiator.getId());        }        _log.info(String.format("adding these initiators %s to mask %s",Joiner.on(",").join(initiatorsURIs),mask.getMaskName()));        Map<URI,List<URI>> maskToInitiatorsMap=new HashMap<URI,List<URI>>();        maskToInitiatorsMap.put(mask.getId(),initiatorsURIs);        previousStep=generateZoningAddInitiatorsWorkflow(workflow,previousStep,exportGroup,maskToInitiatorsMap);        previousStep=generateExportMaskAddInitiatorsWorkflow(workflow,previousStep,storage,exportGroup,mask,initiatorsURIs,volumeMap.keySet(),token);        flowCreated=true;      }    }  }  if (!flowCreated) {    ExportOrchestrationTask completer=new ExportOrchestrationTask(exportGroup.getId(),token);    completer.ready(_dbClient);    return true;  }  return true;}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  protected PasswordDialog(Shell parentShell,boolean isKeyStoreEnabled,boolean isTokenPINEnabled){  super(parentShell);  setShellStyle(SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);  setBlockOnOpen(true);  this.isKeyStoreEnabled=isKeyStoreEnabled;  this.isTokenPINEnabled=isTokenPINEnabled;}  }
class C{  @Deprecated public static void disableSwingFocusManager(){  if (enabled) {    enabled=false;    KeyboardFocusManager.getCurrentKeyboardFocusManager().setDefaultFocusTraversalPolicy(new DefaultFocusTraversalPolicy());  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public Input(IoBuffer buf,RefStorage refStorage){  super(buf);  this.stringReferences=refStorage.stringReferences;  this.classReferences=refStorage.classReferences;  this.refMap=refStorage.refMap;  amf3_mode=0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String store=getString(stack);  return Wizard.getInstance().getAllUserRecords(store);}  }
class C{  private void addStaticSprite(Sprite sprite,long persistTime,int priority){  int x=(getWidth() - sprite.getWidth()) / 2;  int y=getHeight() - sprite.getHeight();  RemovableSprite msg=new RemovableSprite(sprite,x,y,persistTime);  msg.setPriority(priority);  staticSprites.add(msg);  Collections.sort(staticSprites);}  }
class C{  public TransformerTest(String name){  super(name);}  }
class C{  public Pattern extractIp(String str){  Pattern pattern=null;  String[] ips=str.split("[|]");  List<IpNode> ipNodes=new ArrayList<>();  for (  String ip : ips) {    ip=ip.trim();    if (ip.indexOf("/") != -1) {      int mask=Integer.valueOf(ip.substring(ip.indexOf("/") + 1));      ip=ip.substring(0,ip.indexOf("/"));      while (ip.split("[.]").length < 4) {        ip+=".0";      }      IpNode node=new IpNode(ip,mask);      ipNodes.add(node);    } else {      IpNode node=new IpNode(ip,32);      ipNodes.add(node);    }  }  pattern=new IpPattern(ipNodes);  return pattern;}  }
class C{  protected Struct inner(Struct struct){  if (struct._outer != null)   throw new java.lang.IllegalArgumentException("struct: Already an inner struct");  struct._outer=this;  final int bitSize=struct.size() << 3;  updateIndexes(struct._alignment,bitSize,bitSize);  struct._outerOffset=(_bitIndex - bitSize) >> 3;  return (Struct)struct;}  }
class C{  public FindInSourceControlQuery(final String serverPath,final String wildcard,final boolean recursive,final boolean checkedOut,final boolean showStatus,final String checkedOutUser){  Check.notNull(serverPath,"serverPath");  this.serverPath=serverPath;  this.wildcard=wildcard;  this.recursive=recursive;  this.checkedOut=checkedOut;  this.checkedOutUser=checkedOutUser;  this.showStatus=showStatus;}  }
class C{  void messageReceived(ByteBuffer buf) throws IgniteCheckedException, SSLException {  if (buf.limit() > inNetBuf.remaining()) {    inNetBuf=expandBuffer(inNetBuf,inNetBuf.capacity() + buf.limit() * 2);    appBuf=expandBuffer(appBuf,inNetBuf.capacity() * 2);    if (log.isDebugEnabled())     log.debug("Expanded buffers [inNetBufCapacity=" + inNetBuf.capacity() + ", appBufCapacity="+ appBuf.capacity()+ ", ses="+ ses+ ", ");  }  inNetBuf.put(buf);  if (!handshakeFinished)   handshake(); else   unwrapData();  if (isInboundDone()) {    int newPosition=buf.position() - inNetBuf.position();    if (newPosition >= 0) {      buf.position(newPosition);      if (buf.hasRemaining())       U.warn(log,"Got unread bytes after receiving close_notify message (will ignore): " + ses);    }    inNetBuf.clear();  }}  }
class C{  public void clear(){  mCategories.clear();  mTitles.clear();  mValues.clear();}  }
class C{  public void jumpTo(int x,int y){  int width=getWidth();  int height=getHeight();  scrollTo((int)(x * getScale() - width / 2),(int)(y * getScale() - height / 2));  doCorrectPosition(false,false);}  }
class C{  private TransitSchedule mergeEqualTransitRoutes(final Scenario scenario,String outputDirectory){  final Logger log=Logger.getLogger(TransitScheduleSimplifier.class);  log.info("starting simplify method for given transit schedule...");  log.info("equal transit routes within a transit line will be merged...");  final String UNDERLINE="__";  TransitScheduleFactoryImpl factory=new TransitScheduleFactoryImpl();  TransitSchedule schedule=scenario.getTransitSchedule();  Map<Id<TransitLine>,TransitLine> transitLines=schedule.getTransitLines();  TransitSchedule mergedSchedule=factory.createTransitSchedule();  for (  TransitStopFacility stop : schedule.getFacilities().values())   mergedSchedule.addStopFacility(stop);  int routesCounter=0;  int mergedRoutesCounter=0;  Iterator<TransitLine> transitLineIterator=transitLines.values().iterator();  while (transitLineIterator.hasNext()) {    TransitLine transitLine=transitLineIterator.next();    Map<Id<TransitRoute>,TransitRoute> transitRoutes=transitLine.getRoutes();    TransitRoute refTransitRoute=null;    TransitLine mergedTransitLine=factory.createTransitLine(transitLine.getId());    TransitRoute mergedTransitRoute=null;    routesCounter+=transitRoutes.size();    PriorityQueue<Id> uncheckedRoutes=new PriorityQueue<Id>();    uncheckedRoutes.addAll(transitRoutes.keySet());    while (uncheckedRoutes.size() > 0) {      refTransitRoute=transitRoutes.get(uncheckedRoutes.remove());      String id=refTransitRoute.getId().toString();      for (      Id transitRouteId : transitRoutes.keySet()) {        if (!transitRouteId.equals(refTransitRoute.getId())) {          TransitRoute transitRoute=transitRoutes.get(transitRouteId);          if (routeProfilesEqual(transitRoute,refTransitRoute)) {            id+=UNDERLINE + transitRoute.getId().toString();            uncheckedRoutes.remove(transitRoute.getId());          }        }      }      if (id.equals(refTransitRoute.getId().toString())) {        mergedTransitLine.addRoute(refTransitRoute);        mergedRoutesCounter++;        continue;      }      String[] listOfRoutes=id.split(UNDERLINE);      NetworkRoute newRoute=refTransitRoute.getRoute();      List<TransitRouteStop> newStops=computeNewRouteProfile(factory,refTransitRoute,transitRoutes,listOfRoutes,newRoute,null);      compareRouteProfiles(refTransitRoute.getStops(),newStops);      mergedTransitRoute=factory.createTransitRoute(Id.create(id,TransitRoute.class),newRoute,newStops,TransportMode.pt);      mergeDepartures(factory,transitRoutes,mergedTransitRoute.getStops().get(0),mergedTransitRoute,listOfRoutes);      mergedTransitLine.addRoute(mergedTransitRoute);      mergedRoutesCounter++;    }    mergedSchedule.addTransitLine(mergedTransitLine);  }  log.info("number of initial transit routes: " + routesCounter);  String diff=routesCounter > mergedRoutesCounter ? Integer.toString(mergedRoutesCounter - routesCounter) : "+" + Integer.toString(mergedRoutesCounter - routesCounter);  log.info("number of merged transit routes: " + mergedRoutesCounter + " ( "+ diff+ " )");  log.info("writing simplified transit schedule to " + outputDirectory);  new TransitScheduleWriter(mergedSchedule).writeFile(outputDirectory);  log.info("... done.");  return mergedSchedule;}  }
class C{  public static void createTopic(Pubsub client,String fullTopicName) throws IOException {  try {    client.projects().topics().get(fullTopicName).execute();  } catch (  GoogleJsonResponseException e) {    if (e.getStatusCode() == HttpStatusCodes.STATUS_CODE_NOT_FOUND) {      Topic topic=client.projects().topics().create(fullTopicName,new Topic()).execute();      System.out.printf("Topic %s was created.\n",topic.getName());    }  }}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return false;}  }
class C{  public boolean isValidConstant(){  return type == TokenType.STRING || type == TokenType.INT || type == TokenType.ID || type == TokenType.LONG || type == TokenType.TRUE || type == TokenType.FALSE || type == TokenType.DOUBLE;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void testGISPreciseSpatialFunctions() throws Exception {  if (!versionMeetsMinimum(5,6)) {    return;  }  String[] querySamples=new String[]{"SELECT ST_AsText(ST_Intersection(ST_GeomFromText('POLYGON((0 0, 8 0, 4 6, 0 0))'), ST_GeomFromText('POLYGON((0 3, 8 3, 4 9, 0 3))')))","SELECT ST_AsText(ST_Difference(ST_GeomFromText('POLYGON((0 0, 8 0, 4 6, 0 0))'), ST_GeomFromText('POLYGON((0 3, 8 3, 4 9, 0 3))')))","SELECT ST_AsText(ST_Union(ST_GeomFromText('POLYGON((0 0, 8 0, 4 6, 0 0))'), ST_GeomFromText('POLYGON((0 3, 8 3, 4 9, 0 3))')))","SELECT ST_AsText(ST_SymDifference(ST_GeomFromText('POLYGON((0 0, 8 0, 4 6, 0 0))'), ST_GeomFromText('POLYGON((0 3, 8 3, 4 9, 0 3))')))","SELECT ST_AsText(ST_Buffer(ST_GeomFromText('POLYGON((0 0, 8 0, 4 6, 0 0))'), 0.5))","SELECT ST_Distance(ST_GeomFromText('POLYGON((0 0, 8 0, 4 6, 0 0))'), ST_GeomFromText('POLYGON((0 10, 8 10, 4 16, 0 10))'))"};  for (  String query : querySamples) {    this.rs=this.stmt.executeQuery(query);    assertTrue("Query should return  at least one row.",this.rs.next());    assertFalse("Query should return only one row.",this.rs.next());    this.rs.close();  }}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  void addBoundingBox(final BoundingBox bbox){  if (this.bboxes == null)   this.bboxes=Collections.synchronizedList(new ArrayList<BoundingBox>());  this.bboxes.add(bbox);}  }
class C{  protected Polygon computeBounds(Polygon currentPolyBounds){  if (parsedData == null) {    parseData();  }  if (currentPolyBounds == null && pt != null && fm != null) {    int xoffset=0;    int i;    int height;    int descent;    if (fmHeight == HEIGHT) {      height=fm.getHeight();      descent=fm.getDescent();    } else     if (fmHeight == ASCENT_DESCENT) {      height=fm.getAscent();      descent=fm.getDescent();    } else     if (fmHeight == ASCENT_LEADING) {      height=fm.getHeight() - fm.getDescent();      descent=0;    } else {      height=fm.getAscent();      descent=0;    }    int nLines=parsedData.length;    currentPolyBounds=new Polygon();    computeStringWidths(fm);    int baselineOffset=0;    if (baseline == BASELINE_MIDDLE) {      baselineOffset=(fm.getAscent() - fm.getDescent()) / 2;    } else     if (baseline == BASELINE_TOP) {      baselineOffset=fm.getAscent() - fm.getDescent();    }    int currenty=(int)pt.getY() + descent - height + baselineOffset;    for (i=0; i < nLines; i++) {switch (justify) {case JUSTIFY_LEFT:        xoffset=widths[i];      break;case JUSTIFY_CENTER:    xoffset=widths[i] / 2;  break;case JUSTIFY_RIGHT:xoffset=0;break;}currentPolyBounds.addPoint((int)pt.getX() + xoffset,currenty);currenty+=height;currentPolyBounds.addPoint((int)pt.getX() + xoffset,currenty);}for (i=nLines - 1; i >= 0; i--) {switch (justify) {case JUSTIFY_LEFT:xoffset=0;break;case JUSTIFY_CENTER:xoffset=-widths[i] / 2;break;case JUSTIFY_RIGHT:xoffset=-widths[i];break;}currentPolyBounds.addPoint((int)pt.getX() + xoffset,currenty);currenty-=height;currentPolyBounds.addPoint((int)pt.getX() + xoffset,currenty);}GeneralPath projectedShape=null;if (useMaxWidthForBounds) {projectedShape=new GeneralPath(currentPolyBounds.getBounds());} else {projectedShape=new GeneralPath(currentPolyBounds);}Double angle=renderRotationAngle;if (angle != null) {Rectangle rect=currentPolyBounds.getBounds();double rx=rect.getX();double rw=rect.getWidth();double woffset=0.0;switch (justify) {case JUSTIFY_LEFT:break;case JUSTIFY_CENTER:woffset=rw / 2;break;case JUSTIFY_RIGHT:woffset=rw;}AffineTransform at=new AffineTransform();at.rotate(angle,rx + woffset,pt.getY());PathIterator pi=projectedShape.getPathIterator(at);GeneralPath gp=new GeneralPath();gp.append(pi,false);projectedShape=gp;}setShape(projectedShape);} else {if (Debug.debugging("omtext")) {Debug.output("OMText.computeBounds() didn't compute because polybounds = " + currentPolyBounds + " or  pt = "+ pt+ " or fm = "+ fm+ ", (only polybounds should be null)");}}return currentPolyBounds;}  }
class C{  public boolean userCanCreateUser(int connectedUserId,int deptId,String entidad) throws Exception {  boolean can=false;  int deptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    deptMgrId=getDeptMgrId(deptId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_CREATE,deptMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public String shortSummary(){  return "StopWatch '" + this.id + "': running time (millis) = "+ getTotalTimeMillis();}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(this.getModifiers());}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  LDJSLOG.d(TAG,"LDPBaseWebViewActivity.onCreate()");  super.onCreate(savedInstanceState);  Intent intent=getIntent();  this.url=intent.getStringExtra(MainActivity.EXTRA_URL);  initActivity();}  }
class C{  private BackupStatus performIncremental2(){  return incremental2(Host.getHost(0).getVM(1));}  }
class C{  private static int directionalRegexp(boolean forward,RegExp regexp,String text,int column){  MatchResult result=forward ? RegExpUtils.findMatchAfterIndex(regexp,text,column) : RegExpUtils.findMatchBeforeIndex(regexp,text,column);  int fallback=forward ? text.length() : -1;  return result == null ? fallback : result.getIndex();}  }
class C{  public void testDeleteSometimesFails() throws IOException {  Path dir=wrap(createTempDir());  int counter=0;  while (true) {    Path path=dir.resolve("file" + counter);    counter++;    OutputStream file=Files.newOutputStream(path);    file.write(5);    file.close();    try {      Files.delete(path);    } catch (    AccessDeniedException ade) {      assertTrue(ade.getMessage().contains("VirusCheckingFS is randomly refusing to delete file "));      break;    }    assertFalse(Files.exists(path));  }}  }
class C{  protected static int SBSRemoveFeature(Set<Integer> available,DataSet dataSet,Set<Integer> catToRemove,Set<Integer> numToRemove,Set<Integer> catSelecteed,Set<Integer> numSelected,Object evaluater,int folds,Random rand,int maxFeatures,double[] PbestScore,double maxDecrease){  int curBest=-1;  int nCat=dataSet.getNumCategoricalVars();  double curBestScore=Double.POSITIVE_INFINITY;  for (  int feature : available) {    DataSet workOn=dataSet.shallowClone();    addFeature(feature,nCat,catToRemove,numToRemove);    RemoveAttributeTransform remove=new RemoveAttributeTransform(workOn,catToRemove,numToRemove);    workOn.applyTransform(remove);    double score=SFS.getScore(workOn,evaluater,folds,rand);    if (score < curBestScore) {      curBestScore=score;      curBest=feature;    }    removeFeature(feature,nCat,catToRemove,numToRemove);  }  if (catSelecteed.size() + numSelected.size() > maxFeatures || PbestScore[0] - curBestScore > -maxDecrease) {    PbestScore[0]=curBestScore;    removeFeature(curBest,nCat,catSelecteed,numSelected);    addFeature(curBest,nCat,catToRemove,numToRemove);    available.remove(curBest);    return curBest;  } else   return -1;}  }
class C{  private AnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static void main(String args[]) throws IOException, ServiceException {  if (args.length != 2) {    usage();    return;  }  String uname=args[0];  String upassword=args[1];  CalendarService myService=new CalendarService("gdata-CalendarPartialDemo");  myService.setUserCredentials(uname,upassword);  EventFeedPartialDemo demo=new EventFeedPartialDemo(myService);  while (true) {    try {      demo.printMenu();      int choice=readInt();switch (choice) {case 1:        demo.printAttendeeStatus(uname);      break;case 2:    demo.updateAttendeeStatus(uname);  break;case 0:System.exit(1);break;}} catch (IOException e) {System.err.println("There was a problem communicating with the service.");e.printStackTrace();}catch (ServiceException e) {System.err.println("The server had a problem handling your request.");e.printStackTrace();}}}  }
class C{  public boolean isDesktop(){  return impl.isDesktop();}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public boolean isCurrencyBalancing(){  if (m_gl == null)   getAcctSchemaGL();  return m_gl.isUseCurrencyBalancing();}  }
class C{  public ReadMultipleRegistersResponse(){  super();  setFunctionCode(Modbus.READ_MULTIPLE_REGISTERS);}  }
class C{  public String accumulate(String msgText) throws ProtocolException {  if (msgText.startsWith(HEAD_FRAGMENT_V2)) {    msgText=msgText.substring(HEAD_FRAGMENT_V2.length());  } else   if (msgText.startsWith(HEAD_FRAGMENT_V3)) {    msgText=msgText.substring(HEAD_FRAGMENT_V3.length());    String[] instancePart=msgText.split(",",2);    String[] instances=instancePart[0].split("\\|",2);    if (instancePart.length != 2 || instances.length != 2) {      discard();      throw new ProtocolException();    }    int receiverInstance;    try {      receiverInstance=Integer.parseInt(instances[1],16);    } catch (    NumberFormatException e) {      discard();      throw new ProtocolException();    }    msgText=instancePart[1];  } else {    discard();    return msgText;  }  String[] params=msgText.split(",",4);  int k, n;  try {    k=Integer.parseInt(params[0]);    n=Integer.parseInt(params[1]);  } catch (  NumberFormatException e) {    discard();    throw new ProtocolException();  }catch (  ArrayIndexOutOfBoundsException e) {    discard();    throw new ProtocolException();  }  if (k == 0 || n == 0 || k > n || params.length != 4 || params[3].length() != 0) {    discard();    throw new ProtocolException();  }  msgText=params[2];  if (k == 1) {    discard();    fragmentCur=k;    fragmentMax=n;    fragment.append(msgText);  } else   if (n == fragmentMax && k == fragmentCur + 1) {    fragmentCur++;    fragment.append(msgText);  } else {    discard();    throw new ProtocolException();  }  if (n == k && n > 0) {    String result=fragment.toString();    discard();    return result;  } else {    return null;  }}  }
class C{  @Override public boolean automaticUpdates(){  return automaticUpdates;}  }
class C{  public static ECKey fromEncrypted(EncryptedData encryptedPrivateKey,KeyCrypter crypter,byte[] pubKey){  ECKey key=fromPublicOnly(pubKey);  key.encryptedPrivateKey=checkNotNull(encryptedPrivateKey);  key.keyCrypter=checkNotNull(crypter);  return key;}  }
class C{  protected boolean acceptFile(String filePathStr){  if (fs.getScheme().equalsIgnoreCase("hdfs") && filePathStr.endsWith(FILE_BEING_COPIED)) {    return false;  }  if (regex != null) {    Matcher matcher=regex.matcher(filePathStr);    if (!matcher.matches()) {      return false;    }  }  if (ignoreRegex != null) {    Matcher matcher=ignoreRegex.matcher(filePathStr);    if (matcher.matches()) {      return false;    }  }  return true;}  }
class C{  public static Date createDate(String dateString) throws NumberFormatException, InstantiationException, IllegalAccessException {  Date date=Date.class.newInstance().setYear(Integer.parseInt(dateString.split("-")[0],BASE_10)).setMonth(Integer.parseInt(dateString.split("-")[1],BASE_10)).setDay(Integer.parseInt(dateString.split("-")[2],BASE_10));  return date;}  }
class C{  public SecurityTokenServiceConfig(ConnectionConfig connConfig,X509Certificate[] trustedIssuerCertificates,ExecutorService executorService,HolderOfKeyConfig holderOfKeyConfig){  ValidateUtil.validateNotNull(connConfig,"STS connection configuration");  this.connConfig=connConfig;  this.trustedIssuerCertificates=trustedIssuerCertificates;  this.executorService=(executorService != null) ? executorService : Executors.newSingleThreadExecutor();  this.holderOfKeyConfig=holderOfKeyConfig;}  }
class C{  public BigInteger read(String value){  return new BigInteger(value);}  }
class C{  private void orientTailPath(List<Node> path,Graph graph){  for (int i=0; i < path.size() - 1; i++) {    Node n1=path.get(i);    Node n2=path.get(i + 1);    graph.setEndpoint(n1,n2,Endpoint.TAIL);    this.orientSimilarPairs(graph,this.getKnowledge(),n1,n2,Endpoint.TAIL);    graph.setEndpoint(n2,n1,Endpoint.TAIL);    this.orientSimilarPairs(graph,this.getKnowledge(),n2,n1,Endpoint.TAIL);    changeFlag=true;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle undirectedPaths",graph.getEdge(n1,n2)));  }}  }
class C{  public Bundler putDouble(String key,double value){  bundle.putDouble(key,value);  return this;}  }
class C{  public static IJavaSearchScope createHierarchyScope(IType type) throws JavaModelException {  return BasicSearchEngine.createHierarchyScope(type);}  }
class C{  public Polygon(Iterable<? extends Position> corners){  this();  if (corners == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setOuterBoundary(corners);}  }
class C{  public DomainObjectException(String message){  super(message);}  }
class C{  public MapStream<K,V> filter(BiPredicate<? super K,? super V> predicate){  return filter(null);}  }
class C{  public static boolean isValidAction(final String action){  if (action == null) {    return false;  } else {    return ACTIONS.contains(action);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:58.285 -0400",hash_original_method="BB75EF8F6E0673F65CCB71D9E93FEF94",hash_generated_method="BD5AE59555BC5F38C24F9EF27A079410") public void restart(){  if (isFailed()) {    mPrintManager.restartPrintJob(mCachedInfo.getId());  }}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public void addPainter(Painter<T> painter){  Collection<Painter<T>> old=new ArrayList<Painter<T>>(getPainters());  this.painters.add(painter);  if (painter instanceof AbstractPainter) {    ((AbstractPainter<?>)painter).addPropertyChangeListener(handler);  }  setDirty(true);  firePropertyChange("painters",old,getPainters());}  }
class C{  public VariableDeclarationExpression newVariableDeclarationExpression(VariableDeclarationFragment fragment){  if (fragment == null) {    throw new IllegalArgumentException();  }  VariableDeclarationExpression result=new VariableDeclarationExpression(this);  result.fragments().add(fragment);  return result;}  }
class C{  public synchronized Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c;  try {    c=findLoadedClass(name);    if (c != null)     return c;    c=findSystemClass(name);    if (c != null)     return c;  } catch (  ClassNotFoundException e) {  }  byte[] data=lookupClassData(name);  if (data == null)   throw new ClassNotFoundException();  c=defineClass(name,data,0,data.length);  if (resolve)   resolveClass(c);  return c;}  }
class C{  public LocalDate addWrapFieldToCopy(int value){  return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(),value));}  }
class C{  public RefactoringStatus perform(boolean fork,boolean cancelable) throws InterruptedException, InvocationTargetException, CoreException {  return perform(fork,false,cancelable);}  }
class C{  private boolean tagMatches(String propertyTags){  if (filterTags == null || filterTags.length == 0 || propertyTags == null || propertyTags.length() == 0) {    return false;  }  for (  String searchTag : filterTags) {    if (propertyTags.indexOf(searchTag) > -1) {      return true;    }  }  return false;}  }
class C{  public BigInteger toBigInteger(){  return new BigInteger(1,ByteUtils.reverse(toByteArray()));}  }
class C{  public String addPagingSQL(String sql,int start,int end){  String newSql=sql + " " + NATIVE_MARKER+ "LIMIT "+ (end - start + 1)+ "  "+ NATIVE_MARKER+ "OFFSET "+ (start - 1);  return newSql;}  }
class C{  protected void buildProfiles(){  mCurrentProfileView.setVisibility(View.INVISIBLE);  mAccountHeaderTextSection.setVisibility(View.INVISIBLE);  mAccountSwitcherArrow.setVisibility(View.INVISIBLE);  mProfileFirstView.setVisibility(View.GONE);  mProfileFirstView.setOnClickListener(null);  mProfileSecondView.setVisibility(View.GONE);  mProfileSecondView.setOnClickListener(null);  mProfileThirdView.setVisibility(View.GONE);  mProfileThirdView.setOnClickListener(null);  mCurrentProfileName.setText("");  mCurrentProfileEmail.setText("");  handleSelectionView(mCurrentProfile,true);  if (mCurrentProfile != null) {    if ((mProfileImagesVisible || mOnlyMainProfileImageVisible) && !mOnlySmallProfileImagesVisible) {      setImageOrPlaceholder(mCurrentProfileView,mCurrentProfile.getIcon());      if (mProfileImagesClickable) {        mCurrentProfileView.setOnClickListener(onCurrentProfileClickListener);        mCurrentProfileView.setOnLongClickListener(onCurrentProfileLongClickListener);        mCurrentProfileView.disableTouchFeedback(false);      } else {        mCurrentProfileView.disableTouchFeedback(true);      }      mCurrentProfileView.setVisibility(View.VISIBLE);      mCurrentProfileView.invalidate();    } else     if (mCompactStyle) {      mCurrentProfileView.setVisibility(View.GONE);    }    mAccountHeaderTextSection.setVisibility(View.VISIBLE);    handleSelectionView(mCurrentProfile,true);    mAccountSwitcherArrow.setVisibility(View.VISIBLE);    mCurrentProfileView.setTag(R.id.material_drawer_profile_header,mCurrentProfile);    StringHolder.applyTo(mCurrentProfile.getName(),mCurrentProfileName);    StringHolder.applyTo(mCurrentProfile.getEmail(),mCurrentProfileEmail);    if (mProfileFirst != null && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileFirstView,mProfileFirst.getIcon());      mProfileFirstView.setTag(R.id.material_drawer_profile_header,mProfileFirst);      if (mProfileImagesClickable) {        mProfileFirstView.setOnClickListener(onProfileClickListener);        mProfileFirstView.setOnLongClickListener(onProfileLongClickListener);        mProfileFirstView.disableTouchFeedback(false);      } else {        mProfileFirstView.disableTouchFeedback(true);      }      mProfileFirstView.setVisibility(View.VISIBLE);      mProfileFirstView.invalidate();    }    if (mProfileSecond != null && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileSecondView,mProfileSecond.getIcon());      mProfileSecondView.setTag(R.id.material_drawer_profile_header,mProfileSecond);      if (mProfileImagesClickable) {        mProfileSecondView.setOnClickListener(onProfileClickListener);        mProfileSecondView.setOnLongClickListener(onProfileLongClickListener);        mProfileSecondView.disableTouchFeedback(false);      } else {        mProfileSecondView.disableTouchFeedback(true);      }      mProfileSecondView.setVisibility(View.VISIBLE);      mProfileSecondView.invalidate();    }    if (mProfileThird != null && mThreeSmallProfileImages && mProfileImagesVisible && !mOnlyMainProfileImageVisible) {      setImageOrPlaceholder(mProfileThirdView,mProfileThird.getIcon());      mProfileThirdView.setTag(R.id.material_drawer_profile_header,mProfileThird);      if (mProfileImagesClickable) {        mProfileThirdView.setOnClickListener(onProfileClickListener);        mProfileThirdView.setOnLongClickListener(onProfileLongClickListener);        mProfileThirdView.disableTouchFeedback(false);      } else {        mProfileThirdView.disableTouchFeedback(true);      }      mProfileThirdView.setVisibility(View.VISIBLE);      mProfileThirdView.invalidate();    }  } else   if (mProfiles != null && mProfiles.size() > 0) {    IProfile profile=mProfiles.get(0);    mAccountHeaderTextSection.setTag(R.id.material_drawer_profile_header,profile);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);    handleSelectionView(mCurrentProfile,true);    mAccountSwitcherArrow.setVisibility(View.VISIBLE);    if (mCurrentProfile != null) {      StringHolder.applyTo(mCurrentProfile.getName(),mCurrentProfileName);      StringHolder.applyTo(mCurrentProfile.getEmail(),mCurrentProfileEmail);    }  }  if (!mSelectionFirstLineShown) {    mCurrentProfileName.setVisibility(View.GONE);  }  if (!TextUtils.isEmpty(mSelectionFirstLine)) {    mCurrentProfileName.setText(mSelectionFirstLine);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);  }  if (!mSelectionSecondLineShown) {    mCurrentProfileEmail.setVisibility(View.GONE);  }  if (!TextUtils.isEmpty(mSelectionSecondLine)) {    mCurrentProfileEmail.setText(mSelectionSecondLine);    mAccountHeaderTextSection.setVisibility(View.VISIBLE);  }  if (!mSelectionListEnabled) {    mAccountSwitcherArrow.setVisibility(View.INVISIBLE);    handleSelectionView(null,false);  }  if (!mSelectionListEnabledForSingleProfile && mProfileFirst == null && (mProfiles == null || mProfiles.size() == 1)) {    mAccountSwitcherArrow.setVisibility(View.INVISIBLE);    handleSelectionView(null,false);  }  if (mOnAccountHeaderSelectionViewClickListener != null) {    handleSelectionView(mCurrentProfile,true);  }}  }
class C{  @Override public String format(double value,int formatNumber){  return format.format(value);}  }
class C{  public PhantomReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  public void testBug575() throws Exception {  Statement sta=con.createStatement();  sta.executeUpdate("create table #Bug575( A varchar(11), B int, C bit )");  PreparedStatement ps=con.prepareStatement("update #Bug575 set A=?, C=? where B=?");  ParameterMetaData paramMetaData=ps.getParameterMetaData();  Assert.assertEquals("varchar",paramMetaData.getParameterType(1));  Assert.assertEquals("int",paramMetaData.getParameterType(2));  Assert.assertEquals("bit",paramMetaData.getParameterType(3));}  }
class C{  public Set<Tree> subTrees(){  return (Set<Tree>)subTrees(new HashSet<>());}  }
class C{  public static int decompress(DataInput compressed,int decompressedLen,byte[] dest,int dOff) throws IOException {  final int destEnd=dest.length;  do {    final int token=compressed.readByte() & 0xFF;    int literalLen=token >>> 4;    if (literalLen != 0) {      if (literalLen == 0x0F) {        byte len;        while ((len=compressed.readByte()) == (byte)0xFF) {          literalLen+=0xFF;        }        literalLen+=len & 0xFF;      }      compressed.readBytes(dest,dOff,literalLen);      dOff+=literalLen;    }    if (dOff >= decompressedLen) {      break;    }    final int matchDec=(compressed.readByte() & 0xFF) | ((compressed.readByte() & 0xFF) << 8);    assert matchDec > 0;    int matchLen=token & 0x0F;    if (matchLen == 0x0F) {      int len;      while ((len=compressed.readByte()) == (byte)0xFF) {        matchLen+=0xFF;      }      matchLen+=len & 0xFF;    }    matchLen+=MIN_MATCH;    final int fastLen=(matchLen + 7) & 0xFFFFFFF8;    if (matchDec < matchLen || dOff + fastLen > destEnd) {      for (int ref=dOff - matchDec, end=dOff + matchLen; dOff < end; ++ref, ++dOff) {        dest[dOff]=dest[ref];      }    } else {      System.arraycopy(dest,dOff - matchDec,dest,dOff,fastLen);      dOff+=matchLen;    }  } while (dOff < decompressedLen);  return dOff;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public boolean connectAudio(){  if (mService != null && isEnabled()) {    try {      return mService.connectAudio();    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  Class<?> loadClass(String className,URL[] urls) throws ClassNotFoundException {  URLClassLoader cl=new URLClassLoader(urls);  Class<?> testClass=cl.loadClass(className);  return testClass;}  }
class C{  public List<GenericEntry> retrieveChildOrganizationUnits(String customerId,String orgUnitPath) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/orgunit/2.0/" + customerId + "?get=children&orgUnitPath="+ URLEncoder.encode(orgUnitPath,"UTF-8")));}  }
class C{  void validate() throws BuildException {  if (script == null && scriptText == null) {    throw new BuildException("Either the 'script' attribute must be set, or the body must contain the text of the script");  }  if (script != null && scriptText != null) {    throw new BuildException("Choose either script text or script attribute but not both.");  }  if (port <= 0) {    throw new BuildException("'port' attribute must be set on AddUser to the port against which the script should run.");  }}  }
class C{  public static void recompileAllDynamicallyLoadedMethods(boolean report){  int numMethods=CompiledMethods.numCompiledMethods();  for (int cmid=1; cmid < numMethods; cmid++) {    CompiledMethod cpMeth=CompiledMethods.getCompiledMethodUnchecked(cmid);    if (cpMeth == null) {      if (DEBUG) {        VM.sysWrite("Not recompiling method ID ",cmid," because it has no compiledMethod\n");      }    } else {      RVMMethod meth=cpMeth.getMethod();      if (DEBUG) {        VM.sysWrite("numMethods: " + numMethods + ", Inspecting cpMethod "+ cpMeth+ ", method: "+ cpMeth.getMethod()+ "("+ cmid+ ")\n");      }      if (cpMeth.getCompilerType() == CompiledMethod.TRAP) {        if (DEBUG) {          VM.sysWrite("Not recompiling compiled method " + cpMeth + "("+ cmid+ ") because it a TRAP, i.e. has no source code\n");        }      } else {        if (meth.getDeclaringClass().isResolved()) {          if (meth.getDeclaringClass().isInBootImage()) {            if (DEBUG) {              VM.sysWrite("Not recompiling bootimage method " + meth + "("+ cmid+ ")\n");            }          } else {            if (meth.isAbstract()) {              if (DEBUG)               VM.sysWrite("Not recompiling abstract method " + meth + "("+ cmid+ ")\n");            } else             if (meth.isNative()) {              if (DEBUG)               VM.sysWrite("Not recompiling native method " + meth + "("+ cmid+ ")\n");            } else {              if (DEBUG || report)               VM.sysWrite("Recompiling " + meth + "("+ cmid+ ") ");              recompile((NormalMethod)meth);              if (DEBUG || report)               VM.sysWrite("...done\n");            }          }        } else {          if (DEBUG)           VM.sysWrite("Class not resolved" + meth + "("+ cmid+ ")\n");        }      }    }  }  if (VM.BuildForAdaptiveSystem) {    if (DEBUG || report) {      VM.sysWrite("Reseting profiling information\n");    }    RuntimeMeasurements.resetReportableObjects();  }}  }
class C{  @Override public void generate(final ITranslationEnvironment environment,final long baseOffset,final OperandSize operandSize,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final long offset=baseOffset;  final int previousInstructions=(int)(baseOffset % 0x100);  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(operandSize);  final String ediChange=String.valueOf(operandSize.getByteSize());  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String temp=environment.getNextVariableString();  final String tempEsi1=environment.getNextVariableString();  final String tempEdi1=environment.getNextVariableString();  final String tempEsi2=environment.getNextVariableString();  final String tempEdi2=environment.getNextVariableString();  instructions.add(ReilHelpers.createLdm(offset,archSize,"esi",operandSize,temp));  instructions.add(ReilHelpers.createStm(offset + 1,operandSize,temp,archSize,"edi"));  final String jmpGoal=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 8);  instructions.add(ReilHelpers.createJcc(offset + 2,OperandSize.BYTE,Helpers.DIRECTION_FLAG,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAdd(offset + 3,archSize,"esi",archSize,ediChange,resultSize,tempEsi1));  instructions.add(ReilHelpers.createAnd(offset + 4,resultSize,tempEsi1,archSize,truncateMask,archSize,"esi"));  instructions.add(ReilHelpers.createAdd(offset + 5,archSize,"edi",archSize,ediChange,resultSize,tempEdi1));  instructions.add(ReilHelpers.createAnd(offset + 6,resultSize,tempEdi1,archSize,truncateMask,archSize,"edi"));  final String jmpGoal2=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 12);  instructions.add(ReilHelpers.createJcc(offset + 7,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createSub(offset + 8,archSize,"esi",archSize,ediChange,resultSize,tempEsi2));  instructions.add(ReilHelpers.createAnd(offset + 9,resultSize,tempEsi2,archSize,truncateMask,archSize,"esi"));  instructions.add(ReilHelpers.createSub(offset + 10,archSize,"edi",archSize,ediChange,resultSize,tempEdi2));  instructions.add(ReilHelpers.createAnd(offset + 11,resultSize,tempEdi2,archSize,truncateMask,archSize,"edi"));  instructions.add(ReilHelpers.createNop(offset + 12));}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache API example started.");    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(CACHE_NAME)){      atomicMapOperations(cache);    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPORTED_VARIABLE_STATEMENT;}  }
class C{  public void test_getIterator(){  String test="Test string";  try {    AttributedString attrString=new AttributedString(test);    AttributedCharacterIterator it=attrString.getIterator();    assertEquals("Incorrect iteration on AttributedString",it.first(),test.charAt(0));  } catch (  Exception e) {    fail("Unexpected exceptiption " + e.toString());  }}  }
class C{  public Interval toIntervalTo(ReadableInstant endInstant){  return new Interval(this,endInstant);}  }
class C{  @Override public String reason(){  return this.reason;}  }
class C{  public T width(int dip){  size(true,dip,true);  return self();}  }
class C{  public void menuSelected(final MenuEvent e){  if (e.getSource().equals(fileItem)) {    if (getWorkspaceComponent().hasChangedSinceLastSave()) {      saveItem.setEnabled(true);    } else     if (!getWorkspaceComponent().hasChangedSinceLastSave()) {      saveItem.setEnabled(false);    }  }}  }
class C{  public ApplyMaskFilter(BufferedImage maskImage,BufferedImage destination){  this.maskImage=maskImage;  this.destination=destination;}  }
class C{  public void tableChanged(TableModelEvent e){  int rowsSelected=0;  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     rowsSelected++;  }  statusBar.setStatusDB(" " + rowsSelected + " ");}  }
class C{  protected void fireConstantMetaClassUpdate(Object obj,Class c,final MetaClass oldMC,MetaClass newMc){  MetaClassRegistryChangeEventListener[] listener=getMetaClassRegistryChangeEventListeners();  MetaClassRegistryChangeEvent cmcu=new MetaClassRegistryChangeEvent(this,obj,c,oldMC,newMc);  for (int i=0; i < listener.length; i++) {    listener[i].updateConstantMetaClass(cmcu);  }}  }
class C{  public void pointerDrag(float x,float y,String componentName){  TestUtils.pointerDrag(x,y,componentName);}  }
class C{  protected void simpleClear(){  _numResults=0;  _indexes.clear();  super.clear();}  }
class C{  public void deleteNickname(String nickname) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Deleting nickname '" + nickname + "'.");  URL deleteUrl=new URL(domainUrlBase + "nickname/" + SERVICE_VERSION+ "/"+ nickname);  nicknameService.delete(deleteUrl);}  }
class C{  @Override public Object clone(){  NodeList result=new NodeList(size());  for (int i=0; i < size(); i++) {    Object next=get(i);    if (next instanceof Node) {      Node n=(Node)next;      result.add(n.clone());    } else {      result.add(next);    }  }  return result;}  }
class C{  public static String updateEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_EVENT_MESSAGE_",errMsg);    return "error";  }  String name=request.getParameter("UTIL_CACHE_NAME");  if (name == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotUpdateCacheSetting",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String maxInMemoryStr=request.getParameter("UTIL_CACHE_MAX_IN_MEMORY");  String expireTimeStr=request.getParameter("UTIL_CACHE_EXPIRE_TIME");  String useSoftReferenceStr=request.getParameter("UTIL_CACHE_USE_SOFT_REFERENCE");  Integer maxInMemory=null;  Long expireTime=null;  try {    maxInMemory=Integer.valueOf(maxInMemoryStr);  } catch (  Exception e) {  }  try {    expireTime=Long.valueOf(expireTimeStr);  } catch (  Exception e) {  }  UtilCache<?,?> utilCache=UtilCache.findCache(name);  if (utilCache != null) {    if (maxInMemory != null)     utilCache.setMaxInMemory(maxInMemory.intValue());    if (expireTime != null)     utilCache.setExpireTime(expireTime.longValue());    if (useSoftReferenceStr != null) {      utilCache.setUseSoftReference("true".equals(useSoftReferenceStr));    }  }  return "success";}  }
class C{  public static char[] toCharArray(Byte[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].byteValue();  }  return result;}  }
class C{  public static Element toElement(String html,String baseUrl){  Document d=(baseUrl == null) ? Jsoup.parse(html) : Jsoup.parse(html,baseUrl);  return d.getElementsByTag("body").first().children().first();}  }
class C{  public EditCanvasPanel(){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  initComponents();  colorButton.putClientProperty("Quaqua.Button.style","colorWell");  opacitySlider=new JAttributeSlider(JSlider.VERTICAL,0,100,100);  opacityPopupButton.add(opacitySlider);  opacityPopupButton.putClientProperty("JButton.buttonType","toolbar");  add(opacityPopupButton);  NumberFormatter nf=new NumberFormatter();  nf.setMaximum(1d);  nf.setMinimum(0d);  opacityField.setFormatterFactory(JavaNumberFormatter.createFormatterFactory(0d,1d,100d));  opacityFieldHandler=new DrawingAttributeEditorHandler<Double>(CANVAS_FILL_OPACITY,opacityField,null);  opacitySliderHandler=new DrawingAttributeEditorHandler<Double>(CANVAS_FILL_OPACITY,opacitySlider,null);}  }
class C{  public LocaleHandler(String languages,String charsets){  Locale defaultLocale=new Locale("en","US");  String defaultCharset="ISO-8859-1";  if (languages == null) {    m_chosenLocale=defaultLocale;    m_chosenCharset=defaultCharset;    return;  }  StringTokenizer langTokenizer=new StringTokenizer(languages,",");  while (langTokenizer.hasMoreTokens()) {    String lang=langTokenizer.nextToken();    Locale loc=getLocaleForLanguage(lang);    String charset=getCharsetForLocale(loc,charsets);    if (charset == null)     continue;    m_chosenLocale=loc;    m_chosenCharset=charset;    return;  }  m_chosenLocale=defaultLocale;  m_chosenCharset=defaultCharset;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  protected void updateFigure(PositionableShape p){  PositionableEllipse pos=(PositionableEllipse)p;  p._width=getInteger(_widthText,p._width);  p._height=getInteger(_heightText,p._height);  pos.makeShape();  setPositionableParams(pos);}  }
class C{  public ScriptEngines(final Consumer<ScriptEngines> initializer){  this.initializer=initializer;  this.initializer.accept(this);}  }
class C{  public void learnEdges(int iterLimit){  ProximalGradient pg=new ProximalGradient(.5,.9,true);  setParams(new MGMParams(pg.learnBackTrack(this,params.toMatrix1D(),0.0,iterLimit),p,lsum));}  }
class C{  public ParkingAgentsTracker(Scenario scenario,double distance){  this.scenario=scenario;  this.distance=distance;  this.carLegAgents=new HashSet<Id>();  this.linkEnteredAgents=new HashSet<Id>();  this.selectedParkingsMap=new HashMap<Id,Id>();  this.lastTimeStepsLinkEnteredAgents=new TreeSet<Id>();  this.searchingAgents=new HashSet<Id>();  this.nextActivityFacilityMap=new HashMap<Id,ActivityFacility>();  this.agents=new HashMap<Id,PersonDriverAgentImpl>();}  }
class C{  private boolean isEmpty(int x,int y){  return getOccupant(x,y).name.equals("empty");}  }
class C{  public VMCACertIterator(VMCAServerContext context,int certFilter) throws VMCAException {  this.certFilter=certFilter;  this.serverContext=context;  enumContext=VMCAAdapter2.VMCAOpenEnumContext(context,this.certFilter);}  }
class C{  @Override public boolean contains(int value){  return this.isWithinBoundaries(value) && (value - this.from) % this.step == 0;}  }
class C{  public void addStateValueAsString(String name,String value,boolean escapeValue){  addStateValueAsString(null,name,value,escapeValue);}  }
class C{  public List<QueryStat> recentFailed(){  return _recentFailedList;}  }
class C{  public Coords(int x,int y){  this.x=x;  this.y=y;  this.hash=(HashCodeUtil.hash1(x + 1337) ^ HashCodeUtil.hash1(y + 97331)) & 0x7FFFFFFF;}  }
class C{  @Override public void testSupportedDeployableTypes(){  super.testSupportedDeployableTypes();  testSupportedDeployableType(DeployableType.BUNDLE);}  }
class C{  public void processValue(W window,Instant timestamp,Timers timers,StateAccessor<?> state) throws Exception {  FinishedTriggersBitSet finishedSet=readFinishedBits(state.access(FINISHED_BITS_TAG)).copy();  TriggerStateMachine.OnElementContext triggerContext=contextFactory.createOnElementContext(window,timers,timestamp,rootTrigger,finishedSet);  rootTrigger.invokeOnElement(triggerContext);  persistFinishedSet(state,finishedSet);}  }
class C{  public JarIndex(String[] files) throws IOException {  this();  this.jarFiles=files;  parseJars(files);}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  public AttributeSet removeAttributes(AttributeSet old,Enumeration<?> names){  return super.removeAttributes(old,names);}  }
class C{  public static RecyclerView.AdapterDataObserver fixAdapterForTesting(RecyclerView.Adapter adapter) throws NoSuchFieldException, IllegalAccessException {  Field observableField=RecyclerView.Adapter.class.getDeclaredField("mObservable");  observableField.setAccessible(true);  Object observable=observableField.get(adapter);  Field observersField=Observable.class.getDeclaredField("mObservers");  observersField.setAccessible(true);  final ArrayList<Object> observers=new ArrayList<>();  RecyclerView.AdapterDataObserver dataObserver=mock(RecyclerView.AdapterDataObserver.class);  observers.add(dataObserver);  observersField.set(observable,observers);  return dataObserver;}  }
class C{  public BezierPath.Node removeNode(int index){  return path.remove(index);}  }
class C{  @SuppressWarnings("LeakingThisInConstructor") public NodeToolBar(NodePanel node){  initComponents();  this.node=node;  if (node.getType() != NodePanel.NodeType.Fragment && node.getType() != NodePanel.NodeType.Vertex) {    remove(codeButton);  }  node.addComponentListener(this);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMCircleElement(prefix,(AbstractDocument)doc);}  }
class C{  public EigenPair(double[] eigenvector,double eigenvalue){  this.eigenvalue=eigenvalue;  this.eigenvector=eigenvector;}  }
class C{  public Tomcat90AgentValve(){  super(true);}  }
class C{  public SlideMove(int tile,int fromC,int fromR,int toC,int toR){  this.tile=tile;  this.fromC=fromC;  this.fromR=fromR;  this.toC=toC;  this.toR=toR;}  }
class C{  public List<Contact> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public GrayscaleMatrix(final int width,final int height){  this.data=new float[width * height];  this.width=width;  this.height=height;}  }
class C{  public Connection removeConnection(String identifier){  return connections.remove(identifier);}  }
class C{  public BillingAdapterNotFoundException(String message,Object[] params){  super(message,params);}  }
class C{  public static byte[] toIPv4AddressBytes(String ipAddress){  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  byte[] result=new byte[4];  for (int i=0; i < 4; ++i) {    result[i]=Integer.valueOf(octets[i]).byteValue();  }  return result;}  }
class C{  public BigOperatorAtom(Atom base,Atom under,Atom over){  this.base=base;  this.under=under;  this.over=over;  type=TeXConstants.TYPE_BIG_OPERATOR;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override @CallSuper public void onSelectedChanged(RecyclerView.ViewHolder viewHolder,int actionState){  shouldNotifyOfSingleItemMoves=false;}  }
class C{  @Override public void activateSingleVolumeSnapshot(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  BlockSnapshot snapshotObj=null;  try {    snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    if (snapshotObj.getIsSyncActive()) {      taskCompleter.ready(_dbClient);      return;    }    BlockObject bo=BlockObject.fetch(_dbClient,snapshotObj.getParent().getURI());    _log.info("activateSingleVolumeSnapshot operation START");    CIMObjectPath blockObjectPath=_cimPath.getBlockObjectPath(storage,bo);    CIMArgument[] inArgs=_helper.getCreateSynchronizationAspectInput(blockObjectPath,true,null,null);    CIMArgument[] outArgs=new CIMArgument[5];    CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);    _helper.invokeMethod(storage,replicationSvcPath,SmisConstants.CREATE_SYNCHRONIZATION_ASPECT,inArgs,outArgs);    setIsSyncActive(snapshotObj,true);    CIMObjectPath settingsPath=(CIMObjectPath)outArgs[0].getValue();    CIMObjectPath syncPath=(CIMObjectPath)settingsPath.getKey(SmisConstants.CP_SETTING_DATA).getValue();    String instanceId=(String)syncPath.getKey(SmisConstants.CP_INSTANCE_ID).getValue();    snapshotObj.setSettingsInstance(instanceId);    snapshotObj.setNeedsCopyToTarget(true);    snapshotObj.setRefreshRequired(true);    _dbClient.persistObject(snapshotObj);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  } finally {    _log.info("activateSingleVolumeSnapshot operation END");  }}  }
class C{  @Override public void tableChanged(TableModelEvent e){  super.tableChanged(e);  setLayout();  notifyListener();}  }
class C{  public Document loadDocument(String uri,InputStream is) throws IOException {  Document ret=checkCache(uri);  if (ret != null)   return ret;  SVGDocument document=documentFactory.createSVGDocument(uri,is);  DocumentDescriptor desc=documentFactory.getDocumentDescriptor();  DocumentState state=new DocumentState(uri,document,desc);synchronized (cacheMap) {    cacheMap.put(uri,state);  }  return state.getDocument();}  }
class C{  public byte readByte(){  return scanner.nextByte();}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public static long bearing(double lon1,double lat1,double lon2,double lat2){  lat1=Math.toRadians(lat1);  lat2=Math.toRadians(lat2);  double dLon=Math.toRadians(lon2 - lon1);  double y=Math.sin(dLon) * Math.cos(lat2);  double x=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);  double bearing=Math.toDegrees(Math.atan2(y,x));  if (bearing < 0) {    bearing=bearing + 360;  }  return Math.round(bearing);}  }
class C{  private void assertTraceOk(String pivotName,SolrParams baseParams,List<PivotField> constraints){  if (null == constraints || 0 == constraints.size()) {    return;  }  final int maxIdx=constraints.size() - 1;  final int min=baseParams.getInt(TRACE_MIN,-1);  final boolean expectMissing=baseParams.getBool(TRACE_MISS,false);  final boolean checkCount="count".equals(baseParams.get(TRACE_SORT,"count"));  int prevCount=Integer.MAX_VALUE;  for (int i=0; i <= maxIdx; i++) {    final PivotField constraint=constraints.get(i);    final int count=constraint.getCount();    if (0 < min) {      assertTrue(pivotName + ": val #" + i+ " of "+ maxIdx+ ": count("+ count+ ") < facet.mincount("+ min+ "): "+ constraint,min <= count);    }    if ((i < maxIdx) || (!expectMissing)) {      assertNotNull(pivotName + ": val #" + i+ " of "+ maxIdx+ " has null value: "+ constraint,constraint.getValue());    }    if (checkCount) {      assertTrue(pivotName + ": val #" + i+ " of"+ maxIdx+ ": count("+ count+ ") > prevCount("+ prevCount+ "): "+ constraint,((count <= prevCount) || (expectMissing && i == maxIdx && null == constraint.getValue())));      prevCount=count;    }  }}  }
class C{  static Class<?> toBoxedType(Class<?> cls){  return primitiveToBoxed.get(cls);}  }
class C{  private LinkedBlockingDeque<Integer> populatedDeque(int n){  LinkedBlockingDeque<Integer> q=new LinkedBlockingDeque<Integer>(n);  assertTrue(q.isEmpty());  for (int i=0; i < n; i++)   assertTrue(q.offer(new Integer(i)));  assertFalse(q.isEmpty());  assertEquals(0,q.remainingCapacity());  assertEquals(n,q.size());  return q;}  }
class C{  public void updateProjectionStackStatus(boolean haveBackProjections,boolean haveForwardProjections){  forwardProjectionButton.setIcon(haveForwardProjections ? forwardIcon : forwardDimIcon);  backProjectionButton.setIcon(haveBackProjections ? backIcon : backDimIcon);  forwardProjectionButton.setEnabled(haveForwardProjections);  backProjectionButton.setEnabled(haveBackProjections);}  }
class C{  public void initOptions(){  for (int i=0, size=OPTIONS_PANE_LIST.size(); i < size; i++) {    OptionsPane op=OPTIONS_PANE_LIST.get(i);    op.initOptions();  }}  }
class C{  public static float[] checkArrayElementsInRange(float[] value,float lower,float upper,String valueName){  checkNotNull(value,valueName + " must not be null");  for (int i=0; i < value.length; ++i) {    float v=value[i];    if (Float.isNaN(v)) {      throw new IllegalArgumentException(valueName + "[" + i+ "] must not be NaN");    } else     if (v < lower) {      throw new IllegalArgumentException(String.format("%s[%d] is out of range of [%f, %f] (too low)",valueName,i,lower,upper));    } else     if (v > upper) {      throw new IllegalArgumentException(String.format("%s[%d] is out of range of [%f, %f] (too high)",valueName,i,lower,upper));    }  }  return value;}  }
class C{  public void write(IXMLElement xml,boolean prettyPrint) throws IOException {  this.write(xml,prettyPrint,0,true);}  }
class C{  public ProcessInfo dbProcess(ProcessInfo processInfo,String procedureName){  ProcessUtil.startDatabaseProcedure(processInfo,procedureName,null);  return processInfo;}  }
class C{  public CardImages(){  super();}  }
class C{  private Target<P> connectDirect(Target<P> target){  vertex.connect(oport,target,new DirectEdge(this,vertex,oport,target.vertex,target.port));  return target;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static double min(double x,double y){  return (x < y) ? x : y;}  }
class C{  public void addListener(final IDebuggerTemplateManagerListener listener){  listeners.addListener(listener);}  }
class C{  private Size decodeBitmapDimensions(String filePath){  int width;  int height;  BitmapFactory.Options opts=new BitmapFactory.Options();  opts.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filePath,opts);  if (opts.outWidth > 0 && opts.outHeight > 0) {    width=opts.outWidth;    height=opts.outHeight;  } else {    Log.w(TAG,"Dimension decode failed for " + filePath);    Bitmap b=BitmapFactory.decodeFile(filePath);    if (b == null) {      Log.w(TAG,"PhotoData skipped." + " Decoding " + filePath + " failed.");      return null;    }    width=b.getWidth();    height=b.getHeight();    if (width == 0 || height == 0) {      Log.w(TAG,"PhotoData skipped. Bitmap size 0 for " + filePath);      return null;    }  }  return new Size(width,height);}  }
class C{  private void createAnnotators(List<Object> annotatorsConfig){  for (  Object objAnnotator : annotatorsConfig) {    String className=CpeBuilderUtils.getClassNameFromConfig(objAnnotator);    Map<String,Object> params=CpeBuilderUtils.getParamsFromConfig(objAnnotator);    Optional<AnalysisEngineDescription> desc=createAnnotator(className,params,ANNOTATOR_DEFAULT_PACKAGE);    if (desc.isPresent()) {      String name=CpeBuilderUtils.getComponentName(getAnnotatorNames(),"annotator:" + className);      addAnnotator(name,desc.get());    }  }}  }
class C{  public static void run(String gtfsFolder,String serviceIdsParam,String outputCoordinateSystem,String scheduleFile,String vehicleFile,String shapeFile){  Logger.getLogger(MGC.class).setLevel(Level.ERROR);  TransitSchedule schedule=ScheduleTools.createSchedule();  Vehicles vehicles=VehicleUtils.createVehiclesContainer();  CoordinateTransformation transformation=outputCoordinateSystem != null ? TransformationFactory.getCoordinateTransformation("WGS84",outputCoordinateSystem) : new IdentityTransformation();  GtfsConverter gtfsConverter=new GtfsConverter(schedule,vehicles,transformation);  String param=serviceIdsParam == null ? DAY_WITH_MOST_SERVICES : serviceIdsParam;  gtfsConverter.run(gtfsFolder,param);  boolean authExists=true;  ScheduleTools.writeTransitSchedule(gtfsConverter.getSchedule(),scheduleFile);  if (vehicleFile != null) {    ScheduleTools.writeVehicles(gtfsConverter.getVehicles(),vehicleFile);  }  if (shapeFile != null) {    try {      MGC.getCRS(outputCoordinateSystem);    } catch (    Exception e) {      authExists=false;      log.warn("Code " + outputCoordinateSystem + " not recognized by geotools. Shapefile not written.");    }    if (authExists)     GtfsShapeFileTools.writeGtfsTripsToFile(gtfsConverter.getGtfsRoutes(),gtfsConverter.getServiceIds(),outputCoordinateSystem,shapeFile);  }}  }
class C{  private void collectLineEdge(DirectedEdge de,int opCode,List edges){  Label label=de.getLabel();  Edge e=de.getEdge();  if (de.isLineEdge()) {    if (!de.isVisited() && OverlayOp.isResultOfOp(label,opCode) && !e.isCovered()) {      edges.add(e);      de.setVisitedEdge(true);    }  }}  }
class C{  protected void updateEnabledState(){  calcButton.setEnabled(frame.getMap().getMarkers().size() > 1);}  }
class C{  private Value readReference(Type type,Class real,NodeMap node) throws Exception {  Node entry=node.remove(refer);  if (entry == null) {    return readValue(type,real,node);  }  String key=entry.getValue();  Object value=get(key);  if (!containsKey(key)) {    throw new CycleException("Invalid reference '%s' found",key);  }  return new Reference(value,real);}  }
class C{  public JsonDeserializer(final JSONObject object,final DeserializationContext context){  super(context);  this.object=object;  this.propertyOrderArray=(JSONArray)object.get(JsonSerializer.PROPERTY_ORDER_ARRAY_NAME);  this.propertyOrderArrayIndex=0;}  }
class C{  public static Geometry createShape(AssetManager assetManager,String name){  return createShape(assetManager,name,256);}  }
class C{  public boolean hasFeatureRate(){  return hasExtension(FeatureRate.class);}  }
class C{  public void sortValuesReverse(){  sortImpl(false,true);}  }
class C{  public static void main(String... args) throws Exception {  DeleteDbFiles.execute("data",null,true);  Class.forName("org.h2.Driver");  Connection conn;  conn=DriverManager.getConnection("jdbc:h2:data/test");  Statement stat=conn.createStatement();  stat.execute("create table test(id int primary key, name varchar)");  stat.execute("insert into test values(1, 'Hello')");  stat.execute("insert into test values(2, 'World')");  stat.execute("create linked table test_link" + "('', 'jdbc:h2:data/test', '', '', 'TEST')");  stat.execute("set trace_level_system_out 2");  stat.execute("select * from test_link " + "where id = 1 and name = 'Hello'");  conn.close();}  }
class C{  protected Rectangle computeTextExtent(int x,int y,OrderedLabel olbl){  double width=this.bounds.getWidth();  double height=this.bounds.getHeight();  String textAlign=this.getTextAlign();  int xAligned=x;  if (AVKey.CENTER.equals(textAlign))   xAligned=x - (int)(width / 2); else   if (AVKey.RIGHT.equals(textAlign))   xAligned=x - (int)width;  int yAligned=(int)(y - height);  Rectangle screenRect=new Rectangle(xAligned,yAligned,(int)width,(int)height);  if (olbl.rotation != null && olbl.rotation.degrees != 0) {    screenRect=this.computeRotatedScreenExtent(screenRect,x,y,olbl.rotation);  }  return screenRect;}  }
class C{  public static ComponentUI createUI(JComponent c){  c.addFocusListener(FocusListenerImpl.getInstance());  return new BEPasswordFieldUI();}  }
class C{  @Override public void modifyVariableId(String oldVarId,String newVarId){  Map<Assignment,Double> newTable=new HashMap<Assignment,Double>();  for (  Assignment head : table.keySet()) {    Assignment newHead=head.copy();    if (head.containsVar(oldVarId)) {      Value condVal=newHead.removePair(oldVarId);      newHead.addPair(newVarId,condVal);    }    newTable.put(newHead,table.get(head));  }  if (headVars.contains(oldVarId)) {    headVars.remove(oldVarId);    headVars.add(newVarId);  }  table=newTable;  intervals=null;}  }
class C{  protected static boolean hasValue(final Object value){  return (value instanceof String[] ? hasValue((String[])value) : (value instanceof String ? hasValue((String)value) : value != null));}  }
class C{  public static boolean isWifiRestrict(Context context,String pkgName){  return isNetworkRestrict(context,pkgName,FIREWALL_WIFI_RULE);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.407 -0500",hash_original_method="0B661C1775BD5742177C9AA146CAD19A",hash_generated_method="91A6F2C697F8646D37959F5B88D7E471") public void processMessage(SIPMessage sipMessage) throws Exception {  try {    if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {      String badmsg=sipMessage.encode();      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logError("bad message " + badmsg);        sipStack.getStackLogger().logError(">>> Dropped Bad Msg");      }      return;    }    ViaList viaList=sipMessage.getViaHeaders();    if (sipMessage instanceof SIPRequest) {      Via v=(Via)viaList.getFirst();      Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());      this.peerProtocol=v.getTransport();      try {        this.peerAddress=mySock.getInetAddress();        if (v.hasParameter(Via.RPORT) || !hop.getHost().equals(this.peerAddress.getHostAddress())) {          v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());        }        v.setParameter(Via.RPORT,Integer.toString(this.peerPort));      } catch (      java.text.ParseException ex) {        InternalErrorHandler.handleException(ex);      }      if (!this.isCached) {        ((TLSMessageProcessor)this.messageProcessor).cacheMessageChannel(this);        this.isCached=true;        String key=IOHandler.makeKey(mySock.getInetAddress(),this.peerPort);        sipStack.ioHandler.putSocket(key,mySock);      }    }    long receptionTime=System.currentTimeMillis();    if (sipMessage instanceof SIPRequest) {      SIPRequest sipRequest=(SIPRequest)sipMessage;      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("----Processing Message---");      }      if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {        sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.messageProcessor.getIpAddress().getHostAddress() + ":" + this.messageProcessor.getPort(),false,receptionTime);      }      if (sipStack.getMaxMessageSize() > 0 && sipRequest.getSize() + (sipRequest.getContentLength() == null ? 0 : sipRequest.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        SIPResponse sipResponse=sipRequest.createResponse(SIPResponse.MESSAGE_TOO_LARGE);        byte[] resp=sipResponse.encodeAsBytes(this.getTransport());        this.sendMessage(resp,false);        throw new Exception("Message size exceeded");      }      ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);      if (sipServerRequest != null) {        try {          sipServerRequest.processRequest(sipRequest,this);        }  finally {          if (sipServerRequest instanceof SIPTransaction) {            SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;            if (!sipServerTx.passToListener())             ((SIPTransaction)sipServerRequest).releaseSem();          }        }      } else {        SIPResponse response=sipRequest.createResponse(Response.SERVICE_UNAVAILABLE);        RetryAfter retryAfter=new RetryAfter();        try {          retryAfter.setRetryAfter((int)(10 * (Math.random())));          response.setHeader(retryAfter);          this.sendMessage(response);        } catch (        Exception e) {        }        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logWarning("Dropping message -- could not acquire semaphore");      }    } else {      SIPResponse sipResponse=(SIPResponse)sipMessage;      try {        sipResponse.checkHeaders();      } catch (      ParseException ex) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Dropping Badly formatted response message >>> " + sipResponse);        return;      }      if (sipStack.getMaxMessageSize() > 0 && sipResponse.getSize() + (sipResponse.getContentLength() == null ? 0 : sipResponse.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        if (sipStack.isLoggingEnabled())         this.sipStack.getStackLogger().logDebug("Message size exceeded");        return;      }      ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);      if (sipServerResponse != null) {        try {          if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logError("Dropping response message with invalid tag >>> " + sipResponse);            return;          }          sipServerResponse.processResponse(sipResponse,this);        }  finally {          if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener()) {            ((SIPTransaction)sipServerResponse).releaseSem();          }        }      } else {        sipStack.getStackLogger().logWarning("Could not get semaphore... dropping response");      }    }  }  finally {  }}  }
class C{  public boolean continueRebase(@NotNull Collection<VirtualFile> rebasingRoots){  AccessToken token=DvcsUtil.workingTreeChangeStarted(myProject);  try {    boolean success=true;    for (    VirtualFile root : rebasingRoots) {      success&=continueRebase(root);    }    return success;  }  finally {    DvcsUtil.workingTreeChangeFinished(myProject,token);  }}  }
class C{  private void callListeners(final CFMLEngine engine){  final Iterator<EngineChangeListener> it=listeners.iterator();  while (it.hasNext())   it.next().onUpdate();}  }
class C{  public static synchronized void startup(StringId msgID,Object[] params){  String message=msgID.toLocalizedString(params);  if (listener != null) {    listener.setStatus(message);  }  logger.info(message);}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},blockProxies=true) public ACLAssignments updateAcls(@PathParam("id") URI id,ACLAssignmentChanges changes){  ComputeVirtualPool vpool=(ComputeVirtualPool)queryResource(id);  ArgValidator.checkEntityNotNull(vpool,id,isIdEmbeddedInURL(id));  _permissionsHelper.updateACLs(vpool,changes,new PermissionsHelper.UsageACLFilter(_permissionsHelper,vpool.getSystemType()));  _dbClient.updateAndReindexObject(vpool);  auditOp(OperationTypeEnum.MODIFY_VPOOL_ACL,true,null,vpool.getId().toString(),vpool.getLabel(),vpool.getSystemType());  return getAclsOnVirtualPool(id);}  }
class C{  public void testDynFloatSortMissingFirst() throws Exception {  checkSortMissingFirst("dyn_floatdv_missingfirst","-1.3","4.2");}  }
class C{  public byte[] extractCertificateData(final byte[][] recipients,final Certificate certificate,final Key key){  return decryptionMethods.readCertificate(recipients,certificate,key);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SeaGlassOptionPaneUI();}  }
class C{  public Pair<SolrCore,SolrCore> replicateToDestination(SolrCore bestsrcCore,SolrCore destinationCore) throws Exception {  Pair<SolrCore,SolrCore> replicationRequestPair=null;  try {    SolrInteractionUtils.replicateIndex(destinationCore.host,destinationCore.name,bestsrcCore.host,bestsrcCore.name);    String fullReplication="http://%s:%s/solr/%s/replication?command=fetchindex&masterUrl=http://%s:%s/solr/%s";    String replicator=String.format(fullReplication,destinationCore.host,SolrInteractionUtils.DEFAULT_SOLR_PORT,destinationCore.name,bestsrcCore.host,SolrInteractionUtils.DEFAULT_SOLR_PORT,bestsrcCore.name);    logger.info("Using Replication Command -> " + replicator);    replicationRequestPair=new Pair<SolrCore,SolrCore>(destinationCore,bestsrcCore);    logger.info("Adding Replication Request to the Queue: " + destinationCore.host + ":"+ destinationCore.name+ " --> "+ bestsrcCore.host+ ":"+ bestsrcCore.name);  } catch (  Exception e) {    logger.info("Encountered Exception while Trying to connect to destination host " + destinationCore.host + " or source host"+ bestsrcCore.host);    if (!replicatorConfig.shouldSkipReplicationFailures()) {      throw new ReplicationFailureException("Replication failures while tyring to talk to nodes " + destinationCore.host + " or source host"+ bestsrcCore.host);    }  }  return replicationRequestPair;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.POSTCONDITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.POSTCONDITION___CONSTRAINT_1:getConstraint_1().clear();getConstraint_1().addAll((Collection<? extends Constraint_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private final void augmentTokenList(){  Token[] temp=new Token[size + increment];  System.arraycopy(tokenList,0,temp,0,size);  size+=increment;  tokenList=temp;  for (int i=0; i < increment; i++) {    tokenList[size - i - 1]=createInternalUseOnlyToken();  }}  }
class C{  public ObjectNode clone(){  ObjectNode result=new ObjectNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.EventNotifier=EventNotifier;  return result;}  }
class C{  public synchronized void damageReport(){  m_clip.invalidate();}  }
class C{  @Override public boolean shouldNotBeLogged(){  return true;}  }
class C{  @Override public String toString(){  return StringUtils.hasLength(classifier) ? String.format("%s:%s:%s:%s:%s",groupId,artifactId,extension,classifier,version) : String.format("%s:%s:%s:%s",groupId,artifactId,extension,version);}  }
class C{  protected static CompareOp convertToHBaseCompareOp(ComparisonOperator comp){  if (comp == ComparisonOperator.EQUAL || comp == ComparisonOperator.LIKE || comp == ComparisonOperator.CONTAINS || comp == ComparisonOperator.IN || comp == ComparisonOperator.IS) {    return CompareOp.EQUAL;  } else   if (comp == ComparisonOperator.LESS) {    return CompareOp.LESS;  } else   if (comp == ComparisonOperator.LESS_OR_EQUAL) {    return CompareOp.LESS_OR_EQUAL;  } else   if (comp == ComparisonOperator.GREATER) {    return CompareOp.GREATER;  } else   if (comp == ComparisonOperator.GREATER_OR_EQUAL) {    return CompareOp.GREATER_OR_EQUAL;  } else   if (comp == ComparisonOperator.NOT_EQUAL || comp == ComparisonOperator.NOT_LIKE || comp == ComparisonOperator.NOT_CONTAINS || comp == ComparisonOperator.IS_NOT || comp == ComparisonOperator.NOT_IN) {    return CompareOp.NOT_EQUAL;  } else {    LOG.error("{} operation is not supported now\n",comp);    throw new IllegalArgumentException("Illegal operation: " + comp + ", avaliable options: "+ Arrays.toString(ComparisonOperator.values()));  }}  }
class C{  public int readInteger() throws EOFException, FormatException {  assertSize(4);  curptr+=4;  bytesinbuffer-=4;  return MoreMath.BuildInteger(buffer,curptr - 4,MSBFirst);}  }
class C{  public void paint(Graphics g){  g=g.create();  setRenderingHints(g);  setCompositeOnGraphics((Graphics2D)g);  super.paint(g);}  }
class C{  public CNameDescriptionGenerator(final IViewContainer module){  m_module=module;}  }
class C{  public void processPackageAdd(String[] packages){  initVars();  HashSet<String> packageSet=new HashSet<>();  final boolean userAppsExisted=getUserApps(packageSet);  boolean newPackageAdded=false;  long installTime=System.currentTimeMillis();  LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(mContext);  for (  String packageName : packages) {    if (!packageSet.contains(packageName)) {      packageSet.add(packageName);      newPackageAdded=true;      List<LauncherActivityInfoCompat> activities=launcherApps.getActivityList(packageName,mUser);      if (!activities.isEmpty()) {        markForAddition(activities.get(0),installTime);      }    }  }  if (newPackageAdded) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();    finalizeAdditions(userAppsExisted);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.718 -0500",hash_original_method="BB37CE4D8DBA00C0591EE6D75240E9EE",hash_generated_method="1F8E7E903F1CF9C0B2E747D36CDD4F31") @Override protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  super.formatCookieAsVer(buffer,cookie,version);  if (cookie instanceof ClientCookie) {    String s=((ClientCookie)cookie).getAttribute(ClientCookie.PORT_ATTR);    if (s != null) {      buffer.append("; $Port");      buffer.append("=\"");      if (s.trim().length() > 0) {        int[] ports=cookie.getPorts();        if (ports != null) {          for (int i=0, len=ports.length; i < len; i++) {            if (i > 0) {              buffer.append(",");            }            buffer.append(Integer.toString(ports[i]));          }        }      }      buffer.append("\"");    }  }}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  public static Range findCumulativeRangeBounds(CategoryDataset dataset){  ParamChecks.nullNotPermitted(dataset,"dataset");  boolean allItemsNull=true;  double minimum=0.0;  double maximum=0.0;  for (int row=0; row < dataset.getRowCount(); row++) {    double runningTotal=0.0;    for (int column=0; column <= dataset.getColumnCount() - 1; column++) {      Number n=dataset.getValue(row,column);      if (n != null) {        allItemsNull=false;        double value=n.doubleValue();        if (!Double.isNaN(value)) {          runningTotal=runningTotal + value;          minimum=Math.min(minimum,runningTotal);          maximum=Math.max(maximum,runningTotal);        }      }    }  }  if (!allItemsNull) {    return new Range(minimum,maximum);  } else {    return null;  }}  }
class C{  public InternalFrameBorder(JInternalFrame aFrame){  super(aFrame);  frame=aFrame;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosTownhallArea(zone);}  }
class C{  public static int ENOSPC(){  return Errno.ENOSPC.intValue();}  }
class C{  public ObjectFactory(){}  }
class C{  private boolean doRotate(MotionEvent ev){  if (ev.getPointerCount() != 2) {    return false;  }  float deltaX=ev.getX(0) - ev.getX(1);  float deltaY=ev.getY(0) - ev.getY(1);  double radians=Math.atan(deltaY / deltaX);  int degrees=(int)(radians * 180 / Math.PI);switch (ev.getActionMasked()) {case MotionEvent.ACTION_DOWN:    mLastAngle=degrees;  mIsRotate=false;break;case MotionEvent.ACTION_UP:mIsRotate=false;break;case MotionEvent.ACTION_POINTER_DOWN:mLastAngle=degrees;mIsRotate=false;break;case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_POINTER_UP:mIsRotate=false;upRotate();mLastAngle=degrees;break;case MotionEvent.ACTION_MOVE:mIsRotate=true;int degreesValue=degrees - mLastAngle;if (degreesValue > 45) {rotate(-5);} else if (degreesValue < -45) {rotate(5);} else {rotate(degreesValue);}mLastAngle=degrees;break;}return true;}  }
class C{  public MimeMessageJDBCSource(JDBCMailRepository repository,String key,StreamRepository sr) throws IOException {  super();  if (repository == null) {    throw new IOException("Repository is null");  }  if (key == null) {    throw new IOException("Message name (key) was not defined");  }  this.repository=repository;  this.key=key;  this.sr=sr;  retrieveMessageBodySQL=repository.sqlQueries.getSqlString("retrieveMessageBodySQL",true);  retrieveMessageBodySizeSQL=repository.sqlQueries.getSqlString("retrieveMessageBodySizeSQL");}  }
class C{  public static URL toURL(String self) throws MalformedURLException {  return new URL(self);}  }
class C{  public void markSnapSessionsInactiveOrRemoveTargetId(URI snapSessionURI,List<URI> targetIds,String stepId){  try {    BlockSnapshotSession snapSession=_dbClient.queryObject(BlockSnapshotSession.class,snapSessionURI);    StringSet linkedTargets=null;    if (snapSession != null && !snapSession.getInactive()) {      if (targetIds != null) {        log.info("Removing target ids {} from snap session {}",Joiner.on(", ").join(targetIds),snapSession.getLabel());        List<String> targets=newArrayList(transform(targetIds,FCTN_URI_TO_STRING));        linkedTargets=snapSession.getLinkedTargets();        if (linkedTargets != null) {          log.info("target ids present: {}",Joiner.on(", ").join(linkedTargets));          linkedTargets.removeAll(targets);        }      }      if (targetIds == null || (linkedTargets == null || linkedTargets.isEmpty())) {        log.info("Marking snap session in-active: {}",snapSession.getLabel());        snapSession.setInactive(true);      }      _dbClient.updateObject(snapSession);    }  }  finally {    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  public HeldLocksToken(BigInteger tokenId,LockClient client,long creationDateMs,long expirationDateMs,SortedLockCollection<LockDescriptor> lockMap,TimeDuration lockTimeout,@Nullable Long versionId){  this.tokenId=Preconditions.checkNotNull(tokenId);  this.client=Preconditions.checkNotNull(client);  this.creationDateMs=creationDateMs;  this.expirationDateMs=expirationDateMs;  this.lockMap=lockMap;  this.lockTimeout=SimpleTimeDuration.of(lockTimeout);  this.versionId=versionId;  Preconditions.checkArgument(!this.lockMap.isEmpty());}  }
class C{  public void update(Completion completed){  mDaoSession.update(completed);}  }
class C{  protected OAuthParameters OAuthParametersFactory(){  OAuthParameters oparams=new OAuthParameters();  oparams.addParameter(OAUTH_CONSUMER_KEY,consumerKey);  oparams.addParameter(OAUTH_NONCE,getNonce());  oparams.addParameter(OAUTH_TIMESTAMP,getTimestamp());  oparams.addParameter(OAUTH_SIGNATURE_METHOD,RSA_SHA1);  oparams.addParameter(OAUTH_VERSION,ONE_POINT_ZERO);  return oparams;}  }
class C{  public void addAllOfFromTo(DoubleArrayList values,int from,int to){  buffer.addAllOfFromTo(values,from,to);  this.isSorted=false;}  }
class C{  public static int convertStrokeLinecap(Value v){  String s=v.getStringValue();switch (s.charAt(0)) {case 'b':    return BasicStroke.CAP_BUTT;case 'r':  return BasicStroke.CAP_ROUND;case 's':return BasicStroke.CAP_SQUARE;default :throw new IllegalArgumentException("Linecap argument is not an appropriate CSS value");}}  }
class C{  public JSONObject put(String key,Collection<?> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  void appendComment(int m_char_current_start,int contentLength){  int w0=COMMENT_NODE;  int w1=currentParent;  int w2=m_char_current_start;  int w3=contentLength;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrsetvaluenomodificationallowederr.class,args);}  }
class C{  public static boolean parseBoolean(InputStream in,QueryResultFormat format) throws IOException, QueryResultParseException, UnsupportedQueryResultFormatException {  BooleanQueryResultParser parser=createBooleanParser(format);  try {    QueryResultCollector handler=new QueryResultCollector();    parser.setQueryResultHandler(handler);    parser.parseQueryResult(in);    if (handler.getHandledBoolean()) {      return handler.getBoolean();    } else {      throw new QueryResultParseException("Did not find a boolean result");    }  } catch (  QueryResultHandlerException e) {    throw new QueryResultParseException(e);  }}  }
class C{  public boolean isAutoFoldVKBOnFormSwitch(){  return autoFoldVKBOnFormSwitch;}  }
class C{  public ExecutionEvent createExecutionEvent(){  ExecutionEventImpl executionEvent=new ExecutionEventImpl();  return executionEvent;}  }
class C{  public void removeAllItems(){  int cnt=getItemCount();  for (int i=cnt - 1; i >= 0; i--) {    removeItemAt(i);  }}  }
class C{  protected final void GET_EXCEPTION_OBJECT(Instruction s){  burs.ir.stackManager.forceFrameAllocation();  int offset=burs.ir.stackManager.allocateSpaceForCaughtException();  Register FP=regpool.getPhysicalRegisterSet().asPPC().getFP();  LocationOperand loc=new LocationOperand(-offset);  EMIT(MIR_Load.mutate(s,PPC_LAddr,Nullary.getClearResult(s),A(FP),IC(offset),loc,TG()));}  }
class C{  public Hyperbolic(double alpha,double beta,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(alpha,beta);}  }
class C{  private void cmd_detail(){  int index=m_curWinTab.getSelectedIndex();  if (index == m_curWinTab.getTabCount() - 1)   return;  if (m_curWinTab instanceof VTabbedPane) {    VTabbedPane tabPane=(VTabbedPane)m_curWinTab;    index++;    while (index < tabPane.getTabCount()) {      if (tabPane.isEnabledAt(index)) {        m_curGC.getTable().removeEditor();        m_curGC.acceptEditorChanges();        tabPane.setSelectedIndex(index);        break;      } else       index++;    }  } else {    m_curGC.getTable().removeEditor();    m_curGC.acceptEditorChanges();    m_curWinTab.setSelectedIndex(index + 1);  }}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  protected void onNewChannelCreated(Channel ch){}  }
class C{  public DefaultFilter(final IFilterExpression<Wrapper> expression,final IWrapperCreator<T> wrapper){  m_expression=expression;  m_wrapper=wrapper;}  }
class C{  public SearchTree(VertexType v){  m_vertex=v;  m_childList=new ArrayList<SearchTree<VertexType>>();}  }
class C{  public boolean loadSpec(String rootExternalModuleName,Errors errors) throws AbortException {  rootParseUnit=findOrCreateParsedUnit(rootExternalModuleName,errors,true);  rootModule=rootParseUnit.getRootModule();  ParseUnit nextExtentionOrInstantiationParseUnit=null;  while (findNextUnresolvedExtention(rootModule) || findNextUnresolvedInstantiation(rootModule)) {    if (parseUnitContext.get(nextParseUnitName) == null) {      nextExtentionOrInstantiationParseUnit=findOrCreateParsedUnit(nextParseUnitName,errors,false);    } else {      nextExtentionOrInstantiationParseUnit=(ParseUnit)parseUnitContext.get(nextParseUnitName);    }    ParseUnit extenderOrInstancerParseUnit=nextExtenderOrInstancerModule.getParseUnit();    if (extentionFound) {      extenderOrInstancerParseUnit.addExtendee(nextExtentionOrInstantiationParseUnit);      nextExtentionOrInstantiationParseUnit.addExtendedBy(extenderOrInstancerParseUnit);    }    if (instantiationFound) {      extenderOrInstancerParseUnit.addInstancee(nextExtentionOrInstantiationParseUnit);      nextExtentionOrInstantiationParseUnit.addInstancedBy(extenderOrInstancerParseUnit);    }    nonCircularityTest(nextExtentionOrInstantiationParseUnit,errors);    if (extentionFound) {      resolveNamesBetweenSpecAndExtention(nextExtenderOrInstancerModule,nextExtentionOrInstantiationParseUnit);    }    if (instantiationFound) {      resolveNamesBetweenSpecAndInstantiation(nextExtenderOrInstancerModule,nextExtentionOrInstantiationParseUnit);    }  }  calculateDependencies(rootParseUnit);  return true;}  }
class C{  @SuppressWarnings("unused") public static void blackhole(double value){}  }
class C{  synchronized protected void keepAlive(){  cs.sendKeepAlive(_handle);  mRefreshTimer.stop();  mRefreshTimer.setRepeats(true);  mRefreshTimer.start();}  }
class C{  public void stop(){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VALUE:    return isSetValue();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  protected void computeLOFs(KNNQuery<O> knnq,DBIDs ids,DoubleDataStore lrds,WritableDoubleDataStore lofs,DoubleMinMax lofminmax){  FiniteProgress progressLOFs=LOG.isVerbose() ? new FiniteProgress("LOF_SCORE for objects",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final double lof;    final double lrdp=lrds.doubleValue(iter);    final KNNList neighbors=knnq.getKNNForDBID(iter,krefer);    if (!Double.isInfinite(lrdp)) {      double sum=0.;      int count=0;      for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {        if (DBIDUtil.equal(neighbor,iter)) {          continue;        }        final double val=lrds.doubleValue(neighbor);        sum+=val;        count++;        if (Double.isInfinite(val)) {          break;        }      }      lof=sum / (lrdp * count);    } else {      lof=1.0;    }    lofs.putDouble(iter,lof);    lofminmax.put(lof);    LOG.incrementProcessed(progressLOFs);  }  LOG.ensureCompleted(progressLOFs);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K[] oldKeys=(K[])_set;  long[] oldVals=_values;  _set=new Object[newCapacity];  _values=new long[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != null && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[-index - 1],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public final void movePrev() throws BasicException {  saveData();  if (m_iIndex > 0) {    baseMoveTo(m_iIndex - 1);  }}  }
class C{  protected void postCreateComponent(Component cmp){}  }
class C{  public static double twoPow(int power){  if (power <= -MAX_DOUBLE_EXPONENT) {    if (power >= MIN_DOUBLE_EXPONENT) {      return Double.longBitsToDouble(0x0008000000000000L >> (-(power + MAX_DOUBLE_EXPONENT)));    } else {      return 0.0;    }  } else   if (power > MAX_DOUBLE_EXPONENT) {    return Double.POSITIVE_INFINITY;  } else {    return Double.longBitsToDouble(((long)(power + MAX_DOUBLE_EXPONENT)) << 52);  }}  }
class C{  public void testBinaryMapParse() throws Exception {  String[] setDefs={"opt1","opt2","opt3","opt4","opt5"};  String[] binary={"00000","00001","01000","00011","11001"};  String[] expected={"","opt1","opt4","opt1,opt2","opt1,opt4,opt5"};  for (int i=0; i < binary.length; i++) {    Long value=Long.parseLong(binary[i],2);    String parsed=SetToStringFilter.binarySetMapToString(setDefs,value);    Assert.assertEquals("SET options parsed incorrectly",expected[i],parsed);  }}  }
class C{  private boolean isConnectedToServerOrTryToConnect(){  return mConnected || initServerConnection();}  }
class C{  public IBlockingBuffer<E> newInstance(){  lock.lock();  try {    if (!isOpen())     throw new BufferClosedException();    final IBlockingBuffer<E> n=new InnerBlockingBuffer();    if (!set.add(n))     throw new AssertionError();    counter++;    return n;  }  finally {    lock.unlock();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public Uri insert(Uri uri,ContentValues initialValues){  if (mUriMatcher.match(uri) != MAIN) {    throw new IllegalArgumentException("Unknown URI " + uri);  }  ContentValues values;  if (initialValues != null) {    values=new ContentValues(initialValues);  } else {    values=new ContentValues();  }  if (values.containsKey(MainTable.COLUMN_NAME_DATA) == false) {    values.put(MainTable.COLUMN_NAME_DATA,"");  }  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  long rowId=db.insert(MainTable.TABLE_NAME,null,values);  if (rowId > 0) {    Uri noteUri=ContentUris.withAppendedId(MainTable.CONTENT_ID_URI_BASE,rowId);    getContext().getContentResolver().notifyChange(noteUri,null);    return noteUri;  }  throw new SQLException("Failed to insert row into " + uri);}  }
class C{  public static void blockESPBox(BlockPos blockPos){  double x=blockPos.getX() - Minecraft.getMinecraft().getRenderManager().renderPosX;  double y=blockPos.getY() - Minecraft.getMinecraft().getRenderManager().renderPosY;  double z=blockPos.getZ() - Minecraft.getMinecraft().getRenderManager().renderPosZ;  GL11.glBlendFunc(770,771);  GL11.glEnable(GL_BLEND);  GL11.glLineWidth(1.0F);  GL11.glDisable(GL11.GL_TEXTURE_2D);  GL11.glDisable(GL_DEPTH_TEST);  GL11.glDepthMask(false);  GL11.glColor4d(0,1,0,0.15F);  drawColorBox(new AxisAlignedBB(x,y,z,x + 1.0,y + 1.0,z + 1.0),0F,1F,0F,0.15F);  GL11.glColor4d(0,0,0,0.5F);  RenderGlobal.drawSelectionBoundingBox(new AxisAlignedBB(x,y,z,x + 1.0,y + 1.0,z + 1.0));  GL11.glEnable(GL11.GL_TEXTURE_2D);  GL11.glEnable(GL_DEPTH_TEST);  GL11.glDepthMask(true);  GL11.glDisable(GL_BLEND);}  }
class C{  public Commafier(final String initial){  m_separator=DEFAULT_SEPARATOR;  sb.append(initial);}  }
class C{  @HLEFunction(nid=0x82826F70,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelSleepThreadCB(){  int result=hleKernelSleepThread(true);  checkCallbacks();  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void initListView(){  super.initListView();  if (mAdapter != null) {    mAdapter.setTouchPlay(true);  }}  }
class C{  public void onStop(){  mMediaRouter.removeCallback(this);  PlaybackProxy.removeCallback(mPlaybackCallback);}  }
class C{  private void deleteSelectedInstances(){  if (mDeleteInstancesTask == null) {    mDeleteInstancesTask=new DeleteInstancesTask();    mDeleteInstancesTask.setContentResolver(getContentResolver());    mDeleteInstancesTask.setDeleteListener(this);    mDeleteInstancesTask.execute(mSelected.toArray(new Long[mSelected.size()]));  } else {    Toast.makeText(this,getString(R.string.file_delete_in_progress),Toast.LENGTH_LONG).show();  }}  }
class C{  public boolean forEachValue(TDoubleProcedure procedure){  Object[] keys=_set;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public ManualRecordFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  public static DateTime parseDate(String str) throws NumberFormatException {  Matcher m=str == null ? null : datePattern.matcher(str);  if (str == null || !m.matches()) {    throw new NumberFormatException("Invalid date format.");  }  DateTime ret=new DateTime();  ret.dateOnly=true;  if (m.group(4) == null) {  } else   if (m.group(4).equalsIgnoreCase("Z")) {    ret.tzShift=new Integer(0);  } else {    ret.tzShift=new Integer((Integer.valueOf(m.group(7)) * 60 + Integer.valueOf(m.group(8))));    if (m.group(6).equals("-")) {      ret.tzShift=new Integer(-ret.tzShift.intValue());    }  }  Calendar dateTime=new GregorianCalendar(GMT);  dateTime.clear();  dateTime.set(Integer.valueOf(m.group(1)),Integer.valueOf(m.group(2)) - 1,Integer.valueOf(m.group(3)));  ret.value=dateTime.getTimeInMillis();  if (ret.tzShift != null) {    ret.value-=ret.tzShift.intValue() * 60000;  }  return ret;}  }
class C{  public static float[] toArray(Vector2 a){  return new float[]{a.getX(),a.getY()};}  }
class C{  @NonNull public static Animator scaleBy(float scaleX,float scaleY,float duration,@Nullable Interpolator interpolator){  return scale(scaleX,scaleY,duration,interpolator,ActionType.SCALE_BY);}  }
class C{  public void end(String namespace,String name) throws Exception {  DescriptionBean top=null;  try {    top=(DescriptionBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[DescriptionRule]{" + digester.getMatch() + "} Pop ("+ top.getLang()+ ")");  }}  }
class C{  public void shutdown(){  log.debug("Shutting down sounds...");  for (  VSDSound vs : sound_list.values()) {    log.debug("Stopping sound: " + vs.getName());    vs.shutdown();  }}  }
class C{  public ValidateTokenRequestBuilder(SamlToken token,JAXBContext jaxbContext,int requestValidityInSeconds){  assert token != null;  this.token=token;  this.requestBuilderHelper=new RequestBuilderHelper(jaxbContext,requestValidityInSeconds,SOAP_ACTION_VALIDATE);}  }
class C{  private void notifyInterfaceAdded(String iface){  final int length=mObservers.beginBroadcast();  for (int i=0; i < length; i++) {    try {      mObservers.getBroadcastItem(i).interfaceAdded(iface);    } catch (    RemoteException e) {    }catch (    RuntimeException e) {    }  }  mObservers.finishBroadcast();}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public boolean isLineVisible(){  return this.lineVisible;}  }
class C{  public Namespace updateNamespace(BigInteger id,Namespace namespace) throws IOException {  String requestUrl=RESOURCE + "/" + id.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT,requestUrl,namespace);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Namespace.class);}  }
class C{  public String stackSimpleCrawl(final DigestURL url){  final CrawlProfile pe=this.crawler.defaultSurrogateProfile;  return stackCrawl(new Request(this.peers.mySeed().hash.getBytes(),url,null,"CRAWLING-ROOT",new Date(),pe.handle(),0,0));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public String engineGetProperty(String key){  if (properties == null) {    return null;  }  return properties.get(key);}  }
class C{  public synchronized SiteNode addPath(HistoryReference ref){  if (Constant.isLowMemoryOptionSet()) {    throw new InvalidParameterException("SiteMap should not be accessed when the low memory option is set");  }  HttpMessage msg=null;  try {    msg=ref.getHttpMessage();  } catch (  Exception e) {    log.error(e.getMessage(),e);    return null;  }  return addPath(ref,msg);}  }
class C{  @Override public void process(final Player admin,RPObject object,final List<String> args){  String playerName=args.get(0);  String newLevel=args.get(1);  object.put("adminlevel",Integer.parseInt(newLevel));  new GameEvent(admin.getName(),"adminlevel",playerName,"adminlevel",newLevel).raise();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.407 -0500",hash_original_method="07633DDCD66F05F9C6104D95040C4376",hash_generated_method="0A3B75AAA278D1333D8A6F2CA489E687") private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      scrollBy(delta,0);    } else {      smoothScrollBy(delta,0);    }  }  return scroll;}  }
class C{  public GraphPattern(GraphPattern parent){  if (parent != null) {    this.parent=parent;    contextVar=parent.contextVar;    spScope=parent.spScope;  }}  }
class C{  public Property secondOfMinute(){  return new Property(this,getChronology().secondOfMinute());}  }
class C{  public void extinguishAll(){  burningLocations=0;  infernoFire=false;  infernos.clear();}  }
class C{  private View createCustomViewInternal(View parent,View view,String name,Context viewContext,AttributeSet attrs){  if (view == null && name.indexOf('.') > -1) {    if (mConstructorArgs == null)     mConstructorArgs=ReflectionUtils.getField(LayoutInflater.class,"mConstructorArgs");    final Object[] mConstructorArgsArr=(Object[])ReflectionUtils.getValue(mConstructorArgs,this);    final Object lastContext=mConstructorArgsArr[0];    mConstructorArgsArr[0]=viewContext;    ReflectionUtils.setValue(mConstructorArgs,this,mConstructorArgsArr);    try {      view=createView(name,null,attrs);    } catch (    ClassNotFoundException ignored) {    } finally {      mConstructorArgsArr[0]=lastContext;      ReflectionUtils.setValue(mConstructorArgs,this,mConstructorArgsArr);    }  }  return view;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:    getTypeArgs().clear();  getTypeArgs().addAll((Collection<? extends TypeRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public BigDecimal optBigDecimal(String key,BigDecimal defaultValue){  try {    return this.getBigDecimal(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public KeyGetterFirst(int[] aElems){  m_aElems=aElems;}  }
class C{  @Override public boolean isValid(String string){  return !isReserved(string);}  }
class C{  public char[] sourceFileName(){  return this.sourceFileName;}  }
class C{  public void save(){  if (m_CurrentFile == null) {    saveAs();    return;  }  save(m_CurrentFile,null);}  }
class C{  public void handleServerConfigProperties(ConfigData configData) throws ServletException {  boolean recreateClientWhenExists=false;  String addProxyHeaders=configData.getProperty("proxy.headers");  ServiceUtils.setAddProxyHeaders(!"false".equalsIgnoreCase(addProxyHeaders));  String redirects=configData.getProperty("redirects");  if (redirects != null) {    int maxRedirects=0;    try {      maxRedirects=Integer.parseInt(redirects);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: redirects " + redirects);    }    if (_maxRedirects != maxRedirects)     recreateClientWhenExists=true;    _maxRedirects=maxRedirects;  } else {    if (_maxRedirects != 0)     recreateClientWhenExists=true;    _maxRedirects=0;  }  String sslProtocolsText=configData.getProperty("ssl.protocols");  if (!_sslProtocolsText.equals(sslProtocolsText))   recreateClientWhenExists=true;  if (sslProtocolsText != null) {    _sslProtocolsText=sslProtocolsText;    _sslProtocols=sslProtocolsText.split(",");  } else {    _sslProtocolsText="TLSv1";    _sslProtocols=new String[]{"TLSv1"};  }  try {    createHttpClient(recreateClientWhenExists,configData);  } catch (  Exception exc) {    throw new ServletException(exc);  }  if (_context != null) {    _context.setAttribute(SERVLET_NAME + ".ThreadPool",_client.getThreadPool());    _context.setAttribute(SERVLET_NAME + ".HttpClient",_client);  }}  }
class C{  public void registerMediator(final Mediator mediator){  if (mediatorMap.containsKey(mediator.getMediatorName())) {    return;  }  mediatorMap.put(mediator.getMediatorName(),mediator);  String[] noteInterests=mediator.listNotificationInterests();  if (noteInterests.length != 0) {    BaseObserver observer=new BaseObserver(null,mediator);    for (    String noteInterest : noteInterests) {      registerObserver(noteInterest,observer);    }  }  mediator.onRegister();}  }
class C{  public static void isSubjectOfSupportEmail(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_EMAIL_SUBJECT,flag);}  }
class C{  public Depend(PathImpl source,long digest,boolean requireSource){  this(source);  long newDigest=source.getCrc64();  _requireSource=requireSource;  if (newDigest == digest) {  } else   if (!requireSource && newDigest == 0) {  } else   if (newDigest == 0) {    if (log.isLoggable(Level.FINE))     log.fine(_source.getNativePath() + " source is deleted.");    _isDigestModified=true;  } else {    _isDigestModified=true;  }}  }
class C{  static void registerRefs(Endpoint ep,List<LiveRef> refs){  EndpointEntry epEntry;  do {    epEntry=EndpointEntry.lookup(ep);  } while (!epEntry.registerRefs(refs));}  }
class C{  public void writeBytes(long ptr,byte[] arr){  GridUnsafe.copyMemory(arr,GridUnsafe.BYTE_ARR_OFF,null,ptr,arr.length);}  }
class C{  public static String bytesRefToString(BytesRef br){  if (br == null) {    return "(null)";  } else {    try {      return br.utf8ToString() + " " + br.toString();    } catch (    AssertionError|IllegalArgumentException t) {      return br.toString();    }  }}  }
class C{  public GeoDistanceSortBuilder point(double lat,double lon){  points.add(new GeoPoint(lat,lon));  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void createManySignalsOn3WayCrossing(SignalSystemsData ss){  SignalSystemsDataFactory fac=ss.getFactory();  SignalSystemData system=fac.createSignalSystemData(Id.create(1,SignalSystem.class));  ss.addSignalSystemData(system);  SignalData signal=fac.createSignalData(Id.create(231,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(23,Link.class));  signal.addLaneId(Id.create(1,Lane.class));  signal=fac.createSignalData(Id.create(232,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(23,Link.class));  signal.addLaneId(Id.create(2,Lane.class));  signal=fac.createSignalData(Id.create(431,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(43,Link.class));  signal.addLaneId(Id.create(1,Lane.class));  signal=fac.createSignalData(Id.create(432,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(43,Link.class));  signal.addLaneId(Id.create(2,Lane.class));  signal=fac.createSignalData(Id.create(131,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(13,Link.class));  signal.addLaneId(Id.create(1,Lane.class));  signal=fac.createSignalData(Id.create(132,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(13,Link.class));  signal.addLaneId(Id.create(2,Lane.class));}  }
class C{  public void testLoggingDisabledSamplingEnabled() throws Exception {  sampling=true;  startUp();  assert logEnabled();}  }
class C{  public TradelogReport findByTradelogReport(Portfolio portfolio,ZonedDateTime start,ZonedDateTime end,boolean filter,String symbol,BigDecimal winLossAmount){  EntityManager entityManagerLocal=EntityManagerHelper.getLocalEntityManager();  try {    entityManagerLocal.getTransaction().begin();    Query queryDetail=entityManagerLocal.createNativeQuery(TradelogDetail.getSQLString(),TradelogDetail.class);    queryDetail.setParameter("idPortfolio",portfolio.getIdPortfolio());    queryDetail.setParameter("start",TradingCalendar.getFormattedDate(start,DATE_FORMAT));    queryDetail.setParameter("end",TradingCalendar.getFormattedDate(end,DATE_FORMAT));    queryDetail.setParameter("filter",filter);    queryDetail.setParameter("symbol",symbol);    TradelogReport tradelogReport=new TradelogReport();    for (    Object item : queryDetail.getResultList()) {      tradelogReport.add((TradelogDetail)item);    }    Query querySummary=entityManagerLocal.createNativeQuery(TradelogSummary.getSQLString(),TradelogSummary.class);    querySummary.setParameter("idPortfolio",portfolio.getIdPortfolio());    querySummary.setParameter("start",TradingCalendar.getFormattedDate(start,DATE_FORMAT));    querySummary.setParameter("end",TradingCalendar.getFormattedDate(end,DATE_FORMAT));    querySummary.setParameter("symbol",symbol);    querySummary.setParameter("winLossAmount",winLossAmount);    for (    Object item : querySummary.getResultList()) {      tradelogReport.add((TradelogSummary)item);    }    entityManagerLocal.getTransaction().commit();    return tradelogReport;  } catch (  Exception re) {    if ((entityManagerLocal.getTransaction() != null) && entityManagerLocal.getTransaction().isActive()) {      entityManagerLocal.getTransaction().rollback();    }    throw re;  } finally {    entityManagerLocal.close();  }}  }
class C{  private boolean validUsername(String username){  if (username.length() == 0) {    mUsername.setError("Username cannot be empty.");    return false;  }  if (username.length() > 16) {    mUsername.setError("Username too long.");    return false;  }  return true;}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  @Override public Value convertTo(int t){  if (t == type) {    return this;  } else   if (t == Value.CLOB) {    ValueLob copy=ValueLob.createClob(getReader(),-1,handler);    return copy;  } else   if (t == Value.BLOB) {    ValueLob copy=ValueLob.createBlob(getInputStream(),-1,handler);    return copy;  }  return super.convertTo(t);}  }
class C{  public void clear(){  setType(-1);  setTargetIsolate(Isolate.DEFAULT_ID);  m_debugFormatted.setLength(0);  m_debugFormattedThroughIndex=0;  reset();}  }
class C{  @Override public boolean equals(Object obj){  return (compareTo(obj) == 0);}  }
class C{  public OutputStreamWriter(OutputStream out,String charsetName) throws UnsupportedEncodingException {  super(out);  if (charsetName == null)   throw new NullPointerException("charsetName");  se=StreamEncoder.forOutputStreamWriter(out,this,charsetName);}  }
class C{  public void updateFromDebuggerOptions(final DebuggerOptions options){  Preconditions.checkNotNull(options,"IE01521: Options argument can not be null");  m_detachButton.setEnabled(options.canDetach());  m_terminateButton.setEnabled(options.canTerminate());  m_haltButton.setEnabled(options.canHalt());  updateGui();}  }
class C{  public static void w(String message,Throwable cause){  Log.w(LOG_TAG,"[" + message + "]",cause);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public int executeForChangedRowCount(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForChangedRowCount(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public Ifle4(){  super("ifle4",4);}  }
class C{  public Long saveAsObject(String SID,Long room_id,String fileName,Object tObjectRef){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      log.debug("saveAsObject :1: " + tObjectRef);      log.debug("saveAsObject :2: " + tObjectRef.getClass().getName());      @SuppressWarnings("rawtypes") ArrayList tObject=(ArrayList)tObjectRef;      log.debug("saveAsObject" + tObject.size());      String current_dir=ScopeApplicationAdapter.webAppPath + File.separatorChar + OpenmeetingsVariables.UPLOAD_DIR+ File.separatorChar;      log.debug("### this is my working directory: " + current_dir);      String localFileName=MD5.do_checksum(new Date().toString()) + ".wml";      LibraryDocumentConverter.getInstance().writeToLocalFolder(current_dir,localFileName,tObject);      Long fileExplorerId=fileExplorerItemDao.add(fileName,"",0L,null,room_id,users_id,false,false,false,localFileName,true,true,0L,"");      return fileExplorerId;    }  } catch (  Exception err) {    log.error("[saveAsObject] ",err);  }  return -1L;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new NotSerializableException();}  }
class C{  public void emit(int count,int value){  numEntries+=count;  breaks();  emitUC(count);  emitUC(value + translate);}  }
class C{  private CacheDataPage allocateNewCacheDataPage(Integer parentPageNumber,boolean isLeaf) throws IOException {  DataPageMain dpMain=new DataPageMain(getPageChannel().allocateNewPage());  DataPageExtra dpExtra=new DataPageExtra();  dpMain.initParentPage(parentPageNumber,false);  dpMain._leaf=isLeaf;  dpMain._prevPageNumber=INVALID_INDEX_PAGE_NUMBER;  dpMain._nextPageNumber=INVALID_INDEX_PAGE_NUMBER;  dpMain._childTailPageNumber=INVALID_INDEX_PAGE_NUMBER;  dpExtra._entries=new ArrayList<Entry>();  dpExtra._entryPrefix=EMPTY_PREFIX;  dpMain.setExtra(dpExtra);  _dataPages.put(dpMain._pageNumber,dpMain);  _indexData.addOwnedPage(dpMain._pageNumber);  CacheDataPage cacheDataPage=new CacheDataPage(dpMain,dpExtra);  setModified(cacheDataPage);  return cacheDataPage;}  }
class C{  public ExecutionTargetException(String message){  super(message);}  }
class C{  public FlowLayout(){  this(CENTER,5,5);}  }
class C{  public void checkLogicalRouterExistence(String id,FutureCallback<Boolean> responseCallback) throws IOException {  checkExistenceAsync(LOGICAL_ROUTERS_BASE_PATH + "/" + id,responseCallback);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  protected void processCharacter(Appendable appendable,char nextChar) throws IOException {  if (escapechar != NO_ESCAPE_CHARACTER && checkCharactersToEscape(nextChar)) {    appendable.append(escapechar);  }  appendable.append(nextChar);}  }
class C{  public void schedule(Envelope envelope){  if (envelope.getMailbox() != this) {    throw new RuntimeException("envelope.mailbox != this mailbox");  }  queueCollection.post(queueId,envelope);}  }
class C{  public static void addNewline(Vector<Report> v){  try {    v.elementAt(v.size() - 1).newlines++;  } catch (  ArrayIndexOutOfBoundsException ex) {    System.err.println("Report.addNewline failed, array index out " + "of bounds");  }}  }
class C{  private boolean adjustHue(int x,int y,boolean check){  double rad=Math.sqrt(x * x + y * y);  int size=getWheelRadius();  if (!check || (rad >= size - getWheelWidth() && rad < size)) {    double angle;    if (x == 0) {      if (y > 0) {        angle=Math.PI / 2.0;      } else {        angle=Math.PI + Math.PI / 2.0;      }    } else {      angle=Math.atan((double)y / (double)x);      if (x < 0) {        angle+=Math.PI;      } else       if (angle < 0) {        angle+=2 * Math.PI;      }    }    setFlag(FLAGS_SETTING_COLOR,true);    setHue((float)(1.0 - angle / Math.PI / 2),true);    setFlag(FLAGS_SETTING_COLOR,false);    setHueAngle(angle);    setSaturationAndBrightness(getSaturation(),getBrightness());    return true;  }  return false;}  }
class C{  public FmtFichaVO createFmtFicha(FmtFichaVO fmtFichaVO){  DbConnection conn=getConnection();  try {    fmtFichaVO.setId(getGuid(fmtFichaVO.getId()));    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,fmtFichaVO));    return fmtFichaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  public void debugPrint(PrintWriter out,String prefix){  encode(null,prefix,out,null,false);}  }
class C{  public void replaceAnnFile(String pathAnnFile){  m_doc.replaceAnnFile(pathAnnFile);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.METHOD_DECLARATOR___METHOD_NAME_1:    setMethodName_1(METHOD_NAME_1_EDEFAULT);  return;case UmplePackage.METHOD_DECLARATOR___PARAMETER_LIST_1:getParameterList_1().clear();return;}super.eUnset(featureID);}  }
class C{  public final void endDocument() throws org.xml.sax.SAXException {  flushPending();  if (m_doIndent && !m_isprevtext) {    try {      outputLineSep();    } catch (    IOException e) {      throw new SAXException(e);    }  }  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  private String findMatchingTypeArgument(String signature,int index,IType context) throws IndexOutOfBoundsException {  String[] typeArguments=Signature.getTypeArguments(signature);  if (typeArguments.length > 0 && typeArguments.length <= index)   throw new IndexOutOfBoundsException();  if (typeArguments.length == 0) {    return OBJECT_SIGNATURE;  } else {    String bound=SignatureUtil.getUpperBound(typeArguments[index]);    return SignatureUtil.qualifySignature(bound,context);  }}  }
class C{  @Override public int hashCode(){  int result=39;  result=HashUtilities.hashCode(result,getToolTipText());  result=HashUtilities.hashCode(result,getURLText());  return result;}  }
class C{  public LiveChatConnection(Credentials credentials,LiveChatListener listener){  this.credentials=credentials;  this.listener=listener;}  }
class C{  private void isPositionIndex(int index){  if (index < 0 || index > size) {    throw new IndexOutOfBoundsException("Index [" + index + "] must be less than or equal to size ["+ size+ "]");  }}  }
class C{  private List<String> createCommands(){  List<String> commands=createNodeCommands(nodejsFile,tsFile);  List<String> args=createNodeArgs();  if (args != null) {    commands.addAll(args);  }  return commands;}  }
class C{  public static String createLink(String uri,String label){  return "<a href='" + uri + "'>"+ label+ "</a>";}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  protected void editServerConfiguration(@Nullable Project project,@Nullable ServerConfiguration source){  if (project != null) {    boolean isOk;    do {      isOk=true;      ServerConfigurationDialog dialog=new ServerConfigurationDialog(project,source);      if (dialog.showAndGet()) {        final ServerConfigurationManager configuration=ComponentProvider.getComponent(project,ServerConfigurationManager.class);        ServerConfiguration target=dialog.getConfiguration();        if (source != null && !source.getName().equals(target.getName())) {          ServerConfiguration other=configuration.findServerConfigurationByName(target.getName());          if (other != null) {            isOk=false;            getMessageManager(project).sendErrorNotification("server.configuration.cannot.change.configuration",target.getName());          }        } else {          String message=target.verify();          if (message != null) {            isOk=false;            getMessageManager(project).sendErrorNotification("server.configuration.configuration.invalid",AEMBundle.message(message));          }        }        if (isOk) {          if (source != null) {            configuration.updateServerConfiguration(source,target);          } else {            configuration.addServerConfiguration(target);          }          doVerify(project,null,new ProgressHandlerImpl(getTemplatePresentation().getText()));        }      }    } while (!isOk);  }}  }
class C{  public synchronized void remove(int index){  mCategories.remove(index);  mValues.remove(index);}  }
class C{  public FileShareExport(FileExport fileExport){  _clients=fileExport.getClients();  _permissions=Permissions.valueOf(fileExport.getPermissions());  if (fileExport.getSecurityType() != null) {    for (    String secType : fileExport.getSecurityType().split(SEC_SEPARATOR)) {      if (_securityType == null) {        _securityType=new HashSet<SecurityTypes>();      }      _securityType.add(Enum.valueOf(SecurityTypes.class,secType.trim()));    }  }  _rootUserMapping=fileExport.getRootUserMapping();  _storagePortName=fileExport.getStoragePortName();  _storagePort=fileExport.getStoragePort();  _protocol=StorageProtocol.File.valueOf(fileExport.getProtocol());  _path=fileExport.getPath();  _mountPath=fileExport.getMountPath();  _isilonId=fileExport.getIsilonId();  _subDirectory=fileExport.getSubDirectory();}  }
class C{  public boolean isStatic(){  return this.mass.isInfinite() && this.velocity.isZero() && Math.abs(this.angularVelocity) <= Epsilon.E;}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderProfileImageListener(AccountHeader.OnAccountHeaderProfileImageListener onAccountHeaderProfileImageListener){  this.mOnAccountHeaderProfileImageListener=onAccountHeaderProfileImageListener;  return this;}  }
class C{  public void onBeforeExit(){}  }
class C{  public Network(){  this(true);}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  @Override public void modelNormalInstruction(Instruction ins,int numWordsConsumed,int numWordsProduced){  int flags=0;  if (ins instanceof InvokeInstruction) {    flags=ValueNumber.RETURN_VALUE;  } else   if (ins instanceof ArrayInstruction) {    flags=ValueNumber.ARRAY_VALUE;  } else   if (ins instanceof ConstantPushInstruction) {    flags=ValueNumber.CONSTANT_VALUE;  }  ValueNumber[] inputValueList=popInputValues(numWordsConsumed);  ValueNumber[] outputValueList=getOutputValues(inputValueList,numWordsProduced,flags);  if (VERIFY_INTEGRITY) {    checkConsumedAndProducedValues(ins,inputValueList,outputValueList);  }  pushOutputValues(outputValueList);}  }
class C{  private void computeAmount(){  amount=concentration * getSize();}  }
class C{  private static void SetBooleanField(JNIEnvironment env,int objJREF,int fieldID,boolean value){  if (traceJNI)   VM.sysWrite("JNI called: SetBooleanField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setBooleanValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  synchronized public void reset(){  final IBufferAccess tmp=m_data.get();  if (tmp == null) {    return;  }  final ByteBuffer m_data=tmp.buffer();  m_data.clear();  m_startAddr=-1;  m_endAddr=0;}  }
class C{  @Override public List<JToolBar> createToolBars(Application app,@Nullable View p){  return Collections.emptyList();}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public static float convertDpToPixel(float dp){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertDpToPixel(...). Otherwise conversion does not take place.");    return dp;  }  DisplayMetrics metrics=mMetrics;  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  @Override public void init(){  Render render;  render=new RenderPortal();  render.setRenderManager(RenderManager.instance);  RenderingRegistry.registerEntityRenderingHandler(EntityPortal.class,render);}  }
class C{  public int delete(SQLiteDatabase db){  return db.delete(mTable.name,mCondition,mArgs);}  }
class C{  public GeoPoint(final PlanetModel planetModel,final double sinLat,final double sinLon,final double cosLat,final double cosLon,final double lat,final double lon){  this(computeDesiredEllipsoidMagnitude(planetModel,cosLat * cosLon,cosLat * sinLon,sinLat),cosLat * cosLon,cosLat * sinLon,sinLat,lat,lon);}  }
class C{  public static Function<String,String> expand(){  return null;}  }
class C{  private static boolean tooCloseToRound(double source,int scale){  source=Math.abs(source);  long intPart=(long)Math.floor(source);  double fracPart=(source - intPart) * tenPowDouble(scale);  double decExp=Math.log10(source);  double range=decExp + scale >= 12 ? .1 : .001;  double distanceToRound1=Math.abs(fracPart - Math.floor(fracPart));  double distanceToRound2=Math.abs(fracPart - Math.floor(fracPart) - 0.5);  return distanceToRound1 <= range || distanceToRound2 <= range;}  }
class C{  InitializedArrayCreation(ArrayType arrayType,int length){  assert length >= 0 : "array length may not be negative: " + length;  this.elementType=arrayType.getComponentType();  this.length=length;}  }
class C{  public static void tripleToEquation(final long[] triple,final long seed,final int numVariables,final int e[]){  if (numVariables == 0) {    e[0]=e[1]=e[2]=e[3]=-1;    return;  }  final long[] hash=new long[4];  Hashes.spooky4(triple,seed,hash);  e[0]=(int)((hash[0] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[1]=(int)((hash[1] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[2]=(int)((hash[2] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[3]=(int)((hash[3] & 0x7FFFFFFFFFFFFFFFL) % numVariables);}  }
class C{  public static TimeZone toTimeZone(String strTimezone,TimeZone defaultValue){  if (strTimezone == null)   return defaultValue;  strTimezone=StringUtil.replace(strTimezone.trim().toLowerCase()," ","",false);  TimeZone tz=IDS.get(strTimezone);  if (tz != null)   return tz;  float gmtOffset=Float.NaN;  if (strTimezone.startsWith("gmt"))   gmtOffset=getGMTOffset(strTimezone.substring(3).trim(),Float.NaN); else   if (strTimezone.startsWith("etc/gmt"))   gmtOffset=getGMTOffset(strTimezone.substring(7).trim(),Float.NaN); else   if (strTimezone.startsWith("utc"))   gmtOffset=getGMTOffset(strTimezone.substring(3).trim(),Float.NaN); else   if (strTimezone.startsWith("etc/utc"))   gmtOffset=getGMTOffset(strTimezone.substring(7).trim(),Float.NaN);  if (!Float.isNaN(gmtOffset)) {    strTimezone="etc/gmt" + (gmtOffset >= 0 ? "+" : "") + Caster.toString(gmtOffset);    tz=IDS.get(strTimezone);    if (tz != null)     return tz;  }  return defaultValue;}  }
class C{  public Object clone(){  BiolinguaDigraph g2=new BiolinguaDigraph("Clone_of_[" + this.graphName + "]",this.nNodes);  for (int i=0; i < this.nNodes; i++) {    g2.nodeNames[i]=this.nodeNames[i];    for (int j=0; j < i; j++) {      g2.setEdge(i,j,this.getEdge(i,j));    }  }  return g2;}  }
class C{  public void testInvalidDefinitionsFile() throws Exception {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  ncf.setDefinitionsFile(definitionsFile);  try {    PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));    out.println("{");    out.println("\"BLOB_to_String_v1\": [");    out.println("{");    out.println("  \"schema\": \"vip\",");    out.println("  \"table\": \"clients\",");    out.println("  \"columns\": [");    out.println("    \"personal_code\",");    out.println("    \"birth_date\",");    out.println("    \"email\"");    out.println("    ]");    out.println("}");    out.close();    filterHelper.setContext(replicatorContext);    filterHelper.setFilter(ncf);    filterHelper.done();    fail("Exception not thrown during preparation though definitions file was an invalid JSON");  } catch (  ReplicatorException e) {    logger.info("Expected error received: " + e);  }}  }
class C{  public long start_brk(){  return Long.parseLong(fields[46]);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }      if (k == 0) {        g1=factory.buildGeometry(inputGeometryList);        inputGeometryList.clear();      } else {        g2=factory.buildGeometry(inputGeometryList);        updateProgress("Performing operation (progress will not be updated):",-1);        try {          outputGeometry=g1.intersection(g2);        } catch (        Exception ex) {          outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);        }        g1=(com.vividsolutions.jts.geom.Geometry)outputGeometry.clone();        inputGeometryList.clear();      }    }    ShapeFile output=null;    DBFWriter writer=null;    if (outputGeometry instanceof GeometryCollection) {      com.vividsolutions.jts.geom.Geometry gN0=outputGeometry.getGeometryN(0);      if (gN0 instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POLYLINE) {        outputShapeType=ShapeType.POINT;      }      output=new ShapeFile(outputFile,outputShapeType);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      String DBFName=output.getDatabaseFile();      writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          com.vividsolutions.jts.geom.Point p=(com.vividsolutions.jts.geom.Point)gN;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.getX(),p.getY());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public void updateGPSCoordinates(){  if (location != null) {    latitude=location.getLatitude();    longitude=location.getLongitude();  }}  }
class C{  public Result run(Database database,Relation<O> relation){  if (queries == null) {    throw new AbortException("A query set is required for this 'run' method.");  }  DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  RangeQuery<O> rangeQuery=database.getRangeQuery(distQuery);  NumberVector.Factory<O> ofactory=RelationUtil.getNumberVectorFactory(relation);  int dim=RelationUtil.dimensionality(relation);  TypeInformation res=VectorFieldTypeInformation.typeRequest(NumberVector.class,dim + 1,dim + 1);  MultipleObjectsBundle bundle=queries.loadData();  int col=-1;  for (int i=0; i < bundle.metaLength(); i++) {    if (res.isAssignableFromType(bundle.meta(i))) {      col=i;      break;    }  }  if (col < 0) {    StringBuilder buf=new StringBuilder();    buf.append("No compatible data type in query input was found. Expected: ");    buf.append(res.toString());    buf.append(" have: ");    for (int i=0; i < bundle.metaLength(); i++) {      if (i > 0) {        buf.append(' ');      }      buf.append(bundle.meta(i).toString());    }    throw new IncompatibleDataException(buf.toString());  }  DBIDRange sids=DBIDUtil.generateStaticDBIDRange(bundle.dataLength());  final DBIDs sample=DBIDUtil.randomSample(sids,sampling,random);  FiniteProgress prog=LOG.isVeryVerbose() ? new FiniteProgress("kNN queries",sample.size(),LOG) : null;  int hash=0;  MeanVariance mv=new MeanVariance();  double[] buf=new double[dim];  for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance()) {    int off=sids.binarySearch(iditer);    assert (off >= 0);    NumberVector o=(NumberVector)bundle.data(off,col);    for (int i=0; i < dim; i++) {      buf[i]=o.doubleValue(i);    }    O v=ofactory.newNumberVector(buf);    double r=o.doubleValue(dim);    DoubleDBIDList rres=rangeQuery.getRangeForObject(v,r);    int ichecksum=0;    for (DBIDIter it=rres.iter(); it.valid(); it.advance()) {      ichecksum+=DBIDUtil.asInteger(it);    }    hash=Util.mixHashCodes(hash,ichecksum);    mv.put(rres.size());    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  if (LOG.isStatistics()) {    LOG.statistics("Result hashcode: " + hash);    LOG.statistics("Mean number of results: " + mv.getMean() + " +- "+ mv.getNaiveStddev());  }  return null;}  }
class C{  public boolean checkError(){  OutputStream delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError;}  }
class C{  public static void main(String args[]){  IntVector u=new IntVector();  System.out.println(u);  IntVector v=IntVector.seq(10,25);  System.out.println(v);  IntVector w=IntVector.seq(25,10);  System.out.println(w);}  }
class C{  private boolean inView(VisualNode node){  return node.getVisualRow(getId()) != -1;}  }
class C{  public GeoDistanceBuilder lon(double lon){  if (this.point == null) {    point=new GeoPoint();  }  point.resetLon(lon);  return this;}  }
class C{  public MekaDialog(Dialog owner,String title){  this(owner,title,ModalityType.MODELESS);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TFieldIdEnum successField(){  return successField;}  }
class C{  protected void extendElement(Element e){  SerialSystemConnectionMemo scm;  try {    scm=(SerialSystemConnectionMemo)adapter.getSystemConnectionMemo();  } catch (  NullPointerException npe) {    return;  }  SerialTrafficController stc=(SerialTrafficController)scm.getTrafficController();  SerialNode node=(SerialNode)stc.getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("PAN","" + jmri.util.StringUtil.hexStringFromBytes(node.getPANAddress())));    n.addContent(makeParameter("address","" + jmri.util.StringUtil.hexStringFromBytes(node.getUserAddress())));    n.addContent(makeParameter("GUID","" + jmri.util.StringUtil.hexStringFromBytes(node.getGlobalAddress())));    node=(SerialNode)stc.getNode(index);    index++;  }}  }
class C{  public GenericFeed retrievePageOfMailboxDumpRequests(Date fromDate) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  String url=BASE_URL + "mail/export/" + domain;  if (fromDate != null) {    url+="?fromDate=" + DATE_FORMAT.format(fromDate);  }  return getFeed(new URL(url),GenericFeed.class);}  }
class C{  public static final double[] toDoubleArray(String s[]){  double y[]=new double[s.length];  for (int j=0; j < s.length; j++) {    y[j]=Double.parseDouble(s[j].trim());  }  return y;}  }
class C{  @Override public List<String> latterChunks(List<String> chunks){  if (chunks == null || chunks.size() < 2) {    return null;  }  return new ArrayList<String>(chunks.subList(1,chunks.size()));}  }
class C{  public String descriptor(int i){  return getConstPool().getUtf8Info(descriptorIndex(i));}  }
class C{  public void registerWildcard(Symbol holder,JCWildcard wildcard){  if (wildcard.getBound() == null) {    return;  }  List<JCWildcard> l=wildcards.get(holder);  if (l == null) {    l=new ArrayList<>();    wildcards.put(holder,l);  }  l.add(wildcard);  wildcardNames.put(wildcard,"__T" + l.size());}  }
class C{  public IgniteThreadFactory(String gridName){  this(gridName,"ignite");}  }
class C{  List<VPlexExtentInfo> findExtents(List<VPlexStorageVolumeInfo> storageVolumeInfoList) throws VPlexApiException {  List<VPlexExtentInfo> extentInfoList=new ArrayList<VPlexExtentInfo>();  Iterator<VPlexStorageVolumeInfo> storageVolumeIter=storageVolumeInfoList.iterator();  while (storageVolumeIter.hasNext()) {    VPlexStorageVolumeInfo storageVolumeInfo=storageVolumeIter.next();    boolean extentFound=false;    int retryCount=0;    while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {      try {        String storageVolumeName=storageVolumeInfo.getName();        s_logger.info("Find extent for volume {}",storageVolumeName);        List<VPlexExtentInfo> clusterExtentInfoList=getExtentInfoForCluster(storageVolumeInfo.getClusterId());        for (        VPlexExtentInfo extentInfo : clusterExtentInfoList) {          s_logger.info("Extent Info: {}",extentInfo.toString());          StringBuilder nameBuilder=new StringBuilder();          nameBuilder.append(VPlexApiConstants.EXTENT_PREFIX);          nameBuilder.append(storageVolumeName);          nameBuilder.append(VPlexApiConstants.EXTENT_SUFFIX);          if (extentInfo.getName().equals(nameBuilder.toString())) {            s_logger.info("Found extent for volume {}",storageVolumeName);            extentFound=true;            extentInfo.setStorageVolumeInfo(storageVolumeInfo);            extentInfo.setClusterId(storageVolumeInfo.getClusterId());            extentInfoList.add(extentInfo);            break;          }        }        if (!extentFound) {          s_logger.warn("Extent not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);          if (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {            VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);          } else {            throw VPlexApiException.exceptions.cantFindExtentForClaimedVolume(storageVolumeName);          }        } else {          break;        }      } catch (      VPlexApiException vae) {        s_logger.error(String.format("Exception finding extent on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        if (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {          VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);        } else {          throw vae;        }      }catch (      Exception e) {        s_logger.error(String.format("Exception finding extent on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        if (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {          VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);        } else {          throw e;        }      }    }  }  return extentInfoList;}  }
class C{  public String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  public static String createTestPtStationCSVFile(){  String location=utils.getOutputDirectory() + "/ptStops.csv";  BufferedWriter bw=IOUtils.getBufferedWriter(location);  try {    bw.write("id,x,y" + NEW_LINE);    bw.write("1,10,10" + NEW_LINE);    bw.write("2,10, 190" + NEW_LINE);    bw.write("3,190,190" + NEW_LINE);    bw.write("4,190,10" + NEW_LINE);    bw.flush();    bw.close();  } catch (  Exception e) {    e.printStackTrace();  }  return location;}  }
class C{  protected void inicializaElemento(ElementoEtiquetaDato elemento){  if ((elemento.getEdicion() != null) && (elemento.getEdicion().getValorInicial() != null) && StringUtils.isNotBlank(elemento.getEdicion().getValorInicial().getValor())&& (elemento.getTotalValores() == 0)) {    Valor valor=new Valor(elemento.getEdicion().getValorInicial());    valor.setAccion(TipoAccion.CREAR);    elemento.addValor(valor);  }}  }
class C{  public static String quote(String s,String nullResult){  if (s == null) {    return nullResult;  }  StringBuffer result=new StringBuffer();  result.append('"');  int length=s.length();  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '\b':{        result.append("\\b");        break;      }case '\f':{      result.append("\\f");      break;    }case '\n':{    result.append("\\n");    break;  }case '\r':{  result.append("\\r");  break;}case '\t':{result.append("\\t");break;}case '\\':{result.append("\\\\");break;}case '"':{result.append("\\\"");break;}default :{if (c < ' ' || c >= '\u0080') {String n=Integer.toHexString(c);result.append("\\u");result.append("0000".substring(n.length()));result.append(n);} else {result.append(c);}}}}result.append('"');return result.toString();}  }
class C{  public int addBarPlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addBarPlot(name,color,XY);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public void warn(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {  warn(srcLctr,null,null,msg,args);}  }
class C{  final public static List<int[]> generateWidePoly(int lw,int[] xpts,int[] ypts,int[] altx,boolean connect){  return generateWidePoly(lw,xpts.length,xpts,ypts,altx,connect);}  }
class C{  private int calculatePassedSeconds(){  return currentProgress;}  }
class C{  public static long[] interleaveBits(int[] coords,int iter){  final int numdim=coords.length;  final long[] bitset=BitsUtil.zero(numdim);  final long mask=1L << 31 - iter;  for (int dim=0; dim < numdim; dim++) {    if ((coords[dim] & mask) != 0) {      BitsUtil.setI(bitset,dim);    }  }  return bitset;}  }
class C{  public void delNodeValue(int nTargetNode,String sValue) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new DelValueAction(nTargetNode,sValue));  }  Attribute att=m_Instances.attribute(nTargetNode);  int nCardinality=att.numValues();  ArrayList<String> values=new ArrayList<String>(nCardinality);  int nValue=-1;  for (int iValue=0; iValue < nCardinality; iValue++) {    if (att.value(iValue).equals(sValue)) {      nValue=iValue;    } else {      values.add(att.value(iValue));    }  }  if (nValue < 0) {    throw new Exception("Node " + nTargetNode + " does not have value ("+ sValue+ ")");  }  replaceAtt(nTargetNode,att.name(),values);  Estimator[] distributions=m_Distributions[nTargetNode];  int nCard=values.size();  for (int iParent=0; iParent < distributions.length; iParent++) {    DiscreteEstimatorBayes distribution=new DiscreteEstimatorBayes(nCard,0);    double sum=0;    for (int iValue=0; iValue < nCard; iValue++) {      sum+=distributions[iParent].getProbability(iValue);    }    if (sum > 0) {      for (int iValue=0; iValue < nCard; iValue++) {        distribution.addValue(iValue,distributions[iParent].getProbability(iValue) / sum);      }    } else {      for (int iValue=0; iValue < nCard; iValue++) {        distribution.addValue(iValue,1.0 / nCard);      }    }    distributions[iParent]=distribution;  }  for (int iNode=0; iNode < getNrOfNodes(); iNode++) {    if (m_ParentSets[iNode].contains(nTargetNode)) {      ParentSet parentSet=m_ParentSets[iNode];      distributions=m_Distributions[iNode];      Estimator[] newDistributions=new Estimator[distributions.length * nCard / (nCard + 1)];      int iCurrentDist=0;      int nParents=parentSet.getNrOfParents();      int[] values2=new int[nParents];      int nParentCard=parentSet.getFreshCardinalityOfParents(m_Instances) * (nCard + 1) / nCard;      int iTargetNode=0;      while (parentSet.getParent(iTargetNode) != nTargetNode) {        iTargetNode++;      }      int[] nCards=new int[nParents];      for (int iParent=0; iParent < nParents; iParent++) {        nCards[iParent]=getCardinality(parentSet.getParent(iParent));      }      nCards[iTargetNode]++;      for (int iPos=0; iPos < nParentCard; iPos++) {        if (values2[iTargetNode] != nValue) {          newDistributions[iCurrentDist++]=distributions[iPos];        }        int i=0;        values2[i]++;        while (i < nParents && values2[i] == nCards[i]) {          values2[i]=0;          i++;          if (i < nParents) {            values2[i]++;          }        }      }      m_Distributions[iNode]=newDistributions;    }  }  if (getEvidence(nTargetNode) > nValue) {    setEvidence(nTargetNode,getEvidence(nTargetNode) - 1);  }}  }
class C{  double gain(double score,double ref,double optimal){  return 1 - ((optimal - score) / (optimal - ref));}  }
class C{  @Override protected void handleVariableChangedEvent(Variable variable,int index,Variable.ChangeType type){  if (variable == beta) {    betaChanged=true;    if (type == Variable.ChangeType.ALL_VALUES_CHANGED) {      betaFlag.clear();    } else {      betaFlag.add(index);    }  } else   if (variable == precision) {    precisionChanged=true;  } else {    throw new IllegalArgumentException("Unknown variable in SCCS");  }}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] vectorFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  ShapeType shapeType=ShapeType.POINT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    vectorFiles=inputFilesString.split(";");    int numVectorFiles=vectorFiles.length;    long numPointsInFile=0;    for (int j=0; j < numVectorFiles; j++) {      String fileName=vectorFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      long fileLength=file.length();      if (fileLength > Integer.MAX_VALUE) {        showFeedback("File is too large!");      }      buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      FileChannel inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      buf.order(ByteOrder.LITTLE_ENDIAN);      buf.rewind();      minValue=buf.getFloat(0);      maxValue=buf.getFloat(4);      north=Math.max(buf.getDouble(8),buf.getDouble(16));      south=Math.min(buf.getDouble(8),buf.getDouble(16));      east=Math.max(buf.getDouble(24),buf.getDouble(32));      west=Math.min(buf.getDouble(24),buf.getDouble(32));      loc=40;      do {        numVertices=buf.getInt(loc);        featureValue=buf.getFloat(loc + 4);        if (numVertices == 1) {          shapeType=ShapeType.POINT;        } else {          shapeType=ShapeType.POLYLINE;        }        break;      } while (loc < fileLength);      String outputFile=fileName.replace(".vtr",".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType);      DBFField fields[]=new DBFField[2];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("VALUE");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      String DBFName=output.getDatabaseFile();      DBFWriter writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      progress=(int)((j + 1) * 100d / numVectorFiles);      updateProgress("Loop " + (j + 1) + " of "+ numVectorFiles+ ":",progress);      buf.rewind();      loc=40;      if (shapeType == ShapeType.POINT) {        do {          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          x=buf.getFloat(loc + 8) + west;          y=buf.getFloat(loc + 12) + south;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      } else {        ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();        int[] parts={0};        do {          pnts.clear();          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          int startingByte=loc + 8;          for (a=0; a < numVertices; a++) {            x=buf.getFloat(startingByte + a * 8) + west;            y=buf.getFloat(startingByte + a * 8 + 4) + south;            pnts.add(new ShapefilePoint(x,y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      }      output.write();      writer.write();    }    returnData(vectorFiles[0].replace(".vtr",".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected boolean engineVerify(byte[] sigBytes,int offset,int length) throws SignatureException {  return checkSignature(sigBytes,offset,length);}  }
class C{  private static Object tryCall(String methodName,Throwing.Supplier<Object> supplier){  try {    return supplier.get();  } catch (  Throwable error) {    return new CallException(methodName,error);  }}  }
class C{  public static long FNVhash64(long val){  long hashval=FNV_offset_basis_64;  for (int i=0; i < 8; i++) {    long octet=val & 0x00ff;    val=val >> 8;    hashval=hashval ^ octet;    hashval=hashval * FNV_prime_64;  }  return Math.abs(hashval);}  }
class C{  public static void validateFile(Path path,String[] lines) throws Exception {  List<String> actLines=new ArrayList<>();  try (BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(path.toFile()),StandardCharsets.UTF_8))){    String line;    while ((line=reader.readLine()) != null) {      actLines.add(line);    }    assertArrayEquals(lines,actLines.toArray(new String[actLines.size()]));  } }  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("LineNumberOnBraceTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  resumeTo("LineNumberOnBraceTarg",LineNumberOnBraceTarg.stopLine);  StepEvent stepev=stepOverLine(mainThread);  int ln=stepev.location().lineNumber();  System.out.println("Debuggee is stopped at line " + ln);  if (ln != LineNumberOnBraceTarg.stopLine + 4) {    failure("FAIL: Bug 4952629: Should be at line " + (LineNumberOnBraceTarg.stopLine + 4) + ", am at "+ ln);  } else {    System.out.println("Passed test for 4952629");  }  System.out.println("Resuming to " + LineNumberOnBraceTarg.stopLine2);  resumeTo("LineNumberOnBraceTarg",LineNumberOnBraceTarg.stopLine2);  System.out.println("Stopped at " + LineNumberOnBraceTarg.stopLine2);  stepev=stepOverLine(mainThread);  ln=stepev.location().lineNumber();  System.out.println("Debuggee is stopped at line " + ln);  if (ln == LineNumberOnBraceTarg.stopLine2 + 1) {    failure("FAIL: bug 4870514: Incorrectly stopped at " + (LineNumberOnBraceTarg.stopLine2 + 1));  } else {    System.out.println("Passed test for 4870514");  }  listenUntilVMDisconnect();  if (!testFailed) {    println("LineNumberOnBraceTest: passed");  } else {    throw new Exception("LineNumberOnBraceTest: failed");  }}  }
class C{  private boolean ruleR9(Node a,Node c,Graph graph){  List<List<Node>> ucPdPsToC=getUcPdPaths(a,c,graph);  for (  List<Node> u : ucPdPsToC) {    Node b=u.get(1);    if (graph.isAdjacentTo(b,c))     continue;    if (b == c)     continue;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R9",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    this.orientSimilarPairs(graph,this.getKnowledge(),c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_right.bool(xctxt);}  }
class C{  @Override public double variance(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double mean=this.utility(totalWeight,totalPositiveWeight,hypo);  double innerTerm=hypo.getPositiveWeight() * Math.pow(1.0d - mean,2.0d) + (totalWeight - hypo.getPositiveWeight()) * Math.pow(0.0d - mean,2.0d);  return Math.sqrt(innerTerm) / totalWeight;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.561 -0500",hash_original_method="977238F2CE06FE4C6D167170C229C693",hash_generated_method="7183DDBB0956A3DB834943941911A91C") public void writeToParcel(Parcel dest,int flags){  if (address != null) {    dest.writeByte((byte)1);    dest.writeByteArray(address.getAddress());    dest.writeInt(prefixLength);  } else {    dest.writeByte((byte)0);  }}  }
class C{  public static PropertyValuesHolder ofFloat(Property<?,Float> property,float... values){  return new FloatPropertyValuesHolder(property,values);}  }
class C{  public TestBase(String name){  testName=name;}  }
class C{  public TemplatePersistenceData readSingle(Reader reader,String id) throws IOException {  TemplatePersistenceData[] datas=read(new InputSource(reader),null,id);  if (datas.length > 0)   return datas[0];  return null;}  }
class C{  public void unsetMatchColumn(int columnIdx) throws SQLException {  if (!iMatchColumns.get(0).equals(Integer.valueOf(columnIdx))) {    throw new SQLException(resBundle.handleGetObject("jdbcrowsetimpl.unsetmatch").toString());  } else   if (strMatchColumns.get(0) != null) {    throw new SQLException(resBundle.handleGetObject("jdbcrowsetimpl.usecolname").toString());  } else {    iMatchColumns.set(0,Integer.valueOf(-1));  }}  }
class C{  public char[] GetSuffix(int len){  char[] ret=new char[len];  if ((bufpos + 1) >= len)   System.arraycopy(buffer,bufpos - len + 1,ret,0,len); else {    System.arraycopy(buffer,bufsize - (len - bufpos - 1),ret,0,len - bufpos - 1);    System.arraycopy(buffer,0,ret,len - bufpos - 1,bufpos + 1);  }  return ret;}  }
class C{  private void reconstitutionPut(Entry<?,?>[] tab,K key,V value) throws StreamCorruptedException {  if (value == null) {    throw new java.io.StreamCorruptedException();  }  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry<?,?> e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      throw new java.io.StreamCorruptedException();    }  }  @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)tab[index];  tab[index]=new Entry<>(hash,key,value,e);  count++;}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataAvailabilityTesting(String partitionKeyGroupName){  createDatabaseEntitiesForBusinessObjectDataAvailabilityTesting(partitionKeyGroupName,schemaColumnDaoTestHelper.getTestSchemaColumns(),schemaColumnDaoTestHelper.getTestPartitionColumns(),BusinessObjectDataEntity.FIRST_PARTITION_COLUMN_POSITION,AbstractDaoTest.NO_SUBPARTITION_VALUES,AbstractDaoTest.ALLOW_DUPLICATE_BUSINESS_OBJECT_DATA);}  }
class C{  protected void finalize() throws Throwable {  close();  classCount--;}  }
class C{  public void groupingSets(Object key,ISelectPiece piece){  GroupingSet set=groupingSets.get(key);  if (set == null) {    set=mixedSelect.getGrouping().addGroupingSet();    groupingSets.put(key,set);  }  set.add(piece.getSelect());}  }
class C{  static Pointer adjustAddress(Pointer address,int offset){  return getPointerFromAddress(getAddressFromPointer(address).toWord().plus(Word.fromIntSignExtend(offset)).toAddress());}  }
class C{  private void throwCauseException(ExecutionException e){  Throwable cause=getCauseException(e);  throwAPIException(cause);}  }
class C{  public static void closeEL(InputStream is){  try {    if (is != null)     is.close();  } catch (  Throwable t) {  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  OPTRecord opt=getOPT();  if (opt != null)   sb.append(header.toStringWithRcode(getRcode()) + "\n"); else   sb.append(header + "\n");  if (isSigned()) {    sb.append(";; TSIG ");    if (isVerified())     sb.append("ok"); else     sb.append("invalid");    sb.append('\n');  }  for (int i=0; i < 4; i++) {    if (header.getOpcode() != Opcode.UPDATE)     sb.append(";; " + Section.longString(i) + ":\n"); else     sb.append(";; " + Section.updString(i) + ":\n");    sb.append(sectionToString(i) + "\n");  }  sb.append(";; Message size: " + numBytes() + " bytes");  return sb.toString();}  }
class C{  public DenseMatrix solve(DenseMatrix B){  if (B.m != m)   throw new IllegalArgumentException("Matrix row dimensions must agree.");  if (!this.isNonsingular())   throw new RuntimeException("Matrix is singular.");  int nx=B.n;  DenseMatrix Xmat=B.getSubMatrix(piv,0,nx - 1);  double[][] X=Xmat.vals;  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++)       X[i][j]-=X[k][j] * LU[i][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++)     X[k][j]/=LU[k][k];    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++)       X[i][j]-=X[k][j] * LU[i][k];    }  }  return Xmat;}  }
class C{  public Object removeInternalSetting(Object key){  Object removed=null;  if (_internalSettings != null) {    removed=_internalSettings.remove(key);    if (_internalSettings.size() == 0) {      _internalSettings=null;    }  }  return removed;}  }
class C{  public BaggingMLTest(String name){  super(name);}  }
class C{  @ReactMethod public void canShow(Promise promise){  promise.resolve(CreateAppGroupDialog.canShow());}  }
class C{  private YearMonth with(int newYear,int newMonth){  if (year == newYear && month == newMonth) {    return this;  }  return new YearMonth(newYear,newMonth);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x6E205974,version=271) public int sceUsbCamSetSaturation(int saturation){  this.saturation=saturation;  return 0;}  }
class C{  public int showDialog(String channelPreset,String action,String actionOneChannel){  doneButton.setText(action);  doneButtonText=action;  doneButtonTextOneChannel=actionOneChannel;  setChannel(channelPreset);  result=-1;  updateEditButtons();  setVisible(true);  return result;}  }
class C{  public MoveStep(MovePath path,MoveStepType type,Targetable target,Coords pos){  this(path,type);  targetId=target.getTargetId();  targetType=target.getTargetType();  targetPos=pos;  if ((type == MoveStepType.UNLOAD) || (type == MoveStepType.LAUNCH) || (type == MoveStepType.DROP)|| (type == MoveStepType.UNDOCK)) {    hasEverUnloaded=true;  } else {    hasEverUnloaded=false;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_LIST_1__PARAMETER_1:    return getParameter_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected String e(String s) throws Exception {  return fmt.format(parser.parse(s));}  }
class C{  public static Operator indexScan_Default(IndexRowType indexType){  return indexScan_Default(indexType,false,IndexKeyRange.unbounded(indexType));}  }
class C{  private void findResultAreaEdges(int opCode){  for (Iterator it=graph.getEdgeEnds().iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    Label label=de.getLabel();    if (label.isArea() && !de.isInteriorAreaEdge() && isResultOfOp(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),opCode)) {      de.setInResult(true);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.278 -0400",hash_original_method="A7230128DD423D1B7536E07303DF6D4F",hash_generated_method="56FBE1220EA5B4DB0310C2F49525E0FB") public String encode(final String value,final String charset) throws EncoderException {  if (value == null) {    return null;  }  try {    return encodeText(value,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  SimpleEntityDao.dropTable(db,ifExists);  SimpleEntityNotNullDao.dropTable(db,ifExists);}  }
class C{  public void testFile() throws Exception {  File src=new File("/test").getAbsoluteFile();  File result=mapper.readValue("\"" + src.getAbsolutePath() + "\"",File.class);  assertEquals(src.getAbsolutePath(),result.getAbsolutePath());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.970 -0500",hash_original_method="BFFEAAE12F87E8C46DFE1D4E07480604",hash_generated_method="334A04C7A877D8F80032EA2843B99838") public void increaseRetryCount(){  mRetryCount++;  if (mRetryCount > mMaxRetryCount) {    mRetryCount=mMaxRetryCount;  }  if (DBG)   log("increaseRetryCount: " + mRetryCount);}  }
class C{  protected void emit_FunctionTypeExpressionOLD_PrimaryTypeExpression_LeftParenthesisKeyword_0_0_0_1_or___LeftCurlyBracketKeyword_1_FunctionKeyword_3_LeftParenthesisKeyword_5__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public ResourceList<Flavor> listAll() throws IOException {  ResourceList<Flavor> flavorResourceList=new ResourceList<>();  ResourceList<Flavor> resourceList=getFlavorResourceList(getBasePath());  flavorResourceList.setItems(resourceList.getItems());  while (resourceList.getNextPageLink() != null && !resourceList.getNextPageLink().isEmpty()) {    resourceList=getFlavorResourceList(resourceList.getNextPageLink());    flavorResourceList.getItems().addAll(resourceList.getItems());  }  return flavorResourceList;}  }
class C{  public void writeBoolean(String key,Boolean value){  if (writeParameter(key,value.toString()) != 0) {    mCache.put(key,value);  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public boolean isMaximum(){  return isMaximum;}  }
class C{  ObjectChunks(final long length,final int chunkBits){  super(length);  assert chunkBits > 0 && chunkBits <= 30;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException("length requested too long length=" + length + " mChunkSize="+ mChunkSize);  }  final int chunks=(int)ch;  mArray=new Object[chunks][];  long left=mLength;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    if (assignedLength == 0) {      throw new RuntimeException("zero assigned length");    }    mArray[i]=new Object[assignedLength];    left-=assignedLength;  }  if (left != 0) {    throw new RuntimeException("Did not assign requested memory mLength=" + mLength + " mChunkSize="+ mChunkSize+ " left="+ left+ " chunks="+ chunks);  }  assert integrity();}  }
class C{  @Override public void reset() throws IOException {  m_structure=null;  m_ArffReader=null;  setRetrieval(NONE);  if (m_File != null && !(new File(m_File).isDirectory())) {    setFile(new File(m_File));  } else   if (m_URL != null && !m_URL.equals("http://")) {    setURL(m_URL);  }}  }
class C{  public int size(){  return fifo.size();}  }
class C{  private void addReference(Reference<?> ref,ObjectReference referent){  ObjectReference reference=ObjectReference.fromObject(ref);  setReferent(reference,referent);  setReference(maxIndex++,reference);}  }
class C{  public PropertyMethodDeclaration createPropertyMethodDeclaration(){  PropertyMethodDeclarationImpl propertyMethodDeclaration=new PropertyMethodDeclarationImpl();  return propertyMethodDeclaration;}  }
class C{  public static <E>List<E> asList(Iterator<? extends E> iter){  List<E> result=new ArrayList<E>();  addAll(iter,result);  return result;}  }
class C{  public Query execute(PageContext pc,SQL sql,int maxrows,int fetchsize,TimeSpan timeout) throws PageException {  Stopwatch stopwatch=new Stopwatch(Stopwatch.UNIT_NANO);  stopwatch.start();  String prettySQL=null;  Selects selects=null;  try {    SelectParser parser=new SelectParser();    selects=parser.parse(sql.getSQLString());    Query q=qoq.execute(pc,sql,selects,maxrows);    q.setExecutionTime(stopwatch.time());    return q;  } catch (  SQLParserException spe) {    prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString());    try {      Query query=executer.execute(pc,sql,prettySQL,maxrows);      query.setExecutionTime(stopwatch.time());      return query;    } catch (    PageException ex) {    }  }catch (  PageException e) {  }  try {    boolean isUnion=false;    Set<String> tables=null;    if (selects != null) {      HSQLUtil2 hsql2=new HSQLUtil2(selects);      isUnion=hsql2.isUnion();      tables=hsql2.getInvokedTables();    } else {      if (prettySQL == null)       prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString());      HSQLUtil hsql=new HSQLUtil(prettySQL);      tables=hsql.getInvokedTables();      isUnion=hsql.isUnion();    }    String strSQL=StringUtil.replace(sql.getSQLString(),"[","",false);    strSQL=StringUtil.replace(strSQL,"]","",false);    sql.setSQLString(strSQL);    return _execute(pc,sql,maxrows,fetchsize,timeout,stopwatch,tables,isUnion);  } catch (  ParseException e) {    throw new DatabaseException(e.getMessage(),null,sql,null);  }}  }
class C{  public void insertFront(Blorp x){  Node oldFrontNode=sentinel.next;  Node newNode=new Node(x,oldFrontNode);  sentinel.next=newNode;  size+=1;}  }
class C{  private Image createDefaultImage(final int w,final int h){  final Display display=Display.getCurrent();  final Color backgroundColor=new Color(display,49,121,242);  final Color gradientColor1=new Color(display,155,185,245);  final Color gradientColor2=new Color(display,53,123,242);  final Image img=new Image(display,w,h);  final GC gc=new GC(img);  gc.setAdvanced(true);  gc.setAntialias(SWT.ON);  gc.setBackground(backgroundColor);  gc.fillRectangle(0,0,w,h);  final Path curveShape=new Path(display);  curveShape.moveTo(0,h * .6f);  curveShape.cubicTo(w * .167f,h * 1.2f,w * .667f,h * -.5f,w,h * .75f);  curveShape.lineTo(w,h);  curveShape.lineTo(0,h);  curveShape.lineTo(0,h * .8f);  curveShape.close();  final Pattern pattern=new Pattern(display,0,0,1,h * 1.2f,gradientColor1,gradientColor2);  gc.setBackgroundPattern(pattern);  gc.fillPath(curveShape);  final Font font=new Font(display,"Arial Bold",30,SWT.NONE);  gc.setFont(font);  gc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));  final Point textSize=gc.stringExtent(ResourceManager.getLabel(ResourceManager.LOGIN));  gc.drawString(ResourceManager.getLabel(ResourceManager.LOGIN),(int)(w * .05f),(h - textSize.y) / 2,true);  font.dispose();  curveShape.dispose();  pattern.dispose();  backgroundColor.dispose();  gradientColor1.dispose();  gradientColor2.dispose();  gc.dispose();  return img;}  }
class C{  public UniformSelection(){  super();}  }
class C{  public static void main(String[] args){  Main m=new Main();  int ret=m.run(args);  if ((ret != 0) || (cmdLineTestFlag))   System.exit(ret);}  }
class C{  public TSink<String> sendString(TStream<String> stream){  Objects.requireNonNull(stream,"stream");  return sendText(stream,null);}  }
class C{  @After public void cleanup(){  for (  File f : indexDir.listFiles())   f.delete();  indexDir.delete();}  }
class C{  public static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  public void connect(LocoNetInterface i){  destination=i;  connected=true;  i.addLocoNetListener(LocoNetInterface.ALL,this);}  }
class C{  Model3D(InputStream is) throws IOException, FileFormatException {  this();  StreamTokenizer st=new StreamTokenizer(new BufferedReader(new InputStreamReader(is,"UTF-8")));  st.eolIsSignificant(true);  st.commentChar('#');  scan:   while (true) {switch (st.nextToken()) {default :      break scan;case StreamTokenizer.TT_EOL:    break;case StreamTokenizer.TT_WORD:  if ("v".equals(st.sval)) {    double x=0, y=0, z=0;    if (st.nextToken() == StreamTokenizer.TT_NUMBER) {      x=st.nval;      if (st.nextToken() == StreamTokenizer.TT_NUMBER) {        y=st.nval;        if (st.nextToken() == StreamTokenizer.TT_NUMBER) {          z=st.nval;        }      }    }    addVert((float)x,(float)y,(float)z);    while (st.ttype != StreamTokenizer.TT_EOL && st.ttype != StreamTokenizer.TT_EOF) {      st.nextToken();    }  } else   if ("f".equals(st.sval) || "fo".equals(st.sval) || "l".equals(st.sval)) {    int start=-1;    int prev=-1;    int n=-1;    while (true) {      if (st.nextToken() == StreamTokenizer.TT_NUMBER) {        n=(int)st.nval;        if (prev >= 0) {          add(prev - 1,n - 1);        }        if (start < 0) {          start=n;        }        prev=n;      } else       if (st.ttype == '/') {        st.nextToken();      } else {        break;      }    }    if (start >= 0) {      add(start - 1,prev - 1);    }    if (st.ttype != StreamTokenizer.TT_EOL) {      break scan;    }  } else {    while (st.nextToken() != StreamTokenizer.TT_EOL && st.ttype != StreamTokenizer.TT_EOF) {    }  }}}is.close();if (st.ttype != StreamTokenizer.TT_EOF) {throw new FileFormatException(st.toString());}}  }
class C{  public void add(MgmtData mgmtdata){  this.constructionElement.appendChild(mgmtdata.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public void copyMeta(Object[] data){  assert data != null;synchronized (this) {    if (this.data.length < data.length)     this.data=Arrays.copyOf(this.data,data.length);    for (int k=0; k < data.length; k++) {      if (data[k] != null)       this.data[k]=data[k];    }  }}  }
class C{  public Element store(Object o){  Timebase clock=InstanceManager.getDefault(jmri.Timebase.class);  Element elem=new Element("timebase");  elem.setAttribute("class",this.getClass().getName());  elem.setAttribute("time",clock.getStartTime().toString());  elem.setAttribute("rate","" + clock.userGetRate());  elem.setAttribute("run",(!clock.getStartStopped() ? "yes" : "no"));  elem.setAttribute("master",(clock.getInternalMaster() ? "yes" : "no"));  if (!clock.getInternalMaster()) {    elem.setAttribute("mastername",clock.getMasterName());  }  elem.setAttribute("sync",(clock.getSynchronize() ? "yes" : "no"));  elem.setAttribute("correct",(clock.getCorrectHardware() ? "yes" : "no"));  elem.setAttribute("display",(clock.use12HourDisplay() ? "yes" : "no"));  elem.setAttribute("startstopped",(clock.getStartStopped() ? "yes" : "no"));  elem.setAttribute("startsettime",(clock.getStartSetTime() ? "yes" : "no"));  elem.setAttribute("startclockoption",Integer.toString(clock.getStartClockOption()));  return elem;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public Expansion(Type units){  super(units);}  }
class C{  public NegativeBalanceException(final long amount){  super(String.format("amount (%d) must be non-negative",amount));}  }
class C{  private V doGet(Object okey){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (V)v;  }}  }
class C{  public PathExtensionContentTypeResolver(Map<String,MediaType> mediaTypes){  super(mediaTypes);}  }
class C{  public static RegionResponse create(DistributionManager dm,InternalDistributedMember recipient,RegionRequest request){  RegionResponse m=new RegionResponse();  try {    Cache cache=CacheFactory.getInstance(dm.getSystem());    int cacheId=request.cacheId;    if (System.identityHashCode(cache) == cacheId) {      Region r;      int action=request.action;switch (action) {case RegionRequest.GET_REGION:        r=cache.getRegion(request.path);      break;case RegionRequest.CREATE_VM_ROOT:    r=cache.createRegion(request.newRegionName,request.newRegionAttributes);  break;case RegionRequest.CREATE_VM_REGION:Region parent=cache.getRegion(request.path);r=parent.createSubregion(request.newRegionName,request.newRegionAttributes);break;default :throw new InternalGemFireException(LocalizedStrings.RegionResponse_UNKNOWN_REGIONREQUEST_OPERATION_0.toLocalizedString(Integer.valueOf(action)));}if (r != null) {m.name=r.getFullPath();m.userAttribute=(String)CacheDisplay.getCachedObjectDisplay(r.getUserAttribute(),GemFireVM.LIGHTWEIGHT_CACHE_VALUE);} else {m.name=null;}}} catch (CancelException cce) {}catch (Exception ex) {m.exception=ex;}m.setRecipient(recipient);return m;}  }
class C{  private void adjustNameAndPosition(Node node,int deltaX,int deltaY){  String originalName=node.getName();  String uniqueName=nextUniqueName(originalName);  if (!uniqueName.equals(originalName)) {    node.setName(uniqueName);    node.setCenterX(node.getCenterX() + deltaX);    node.setCenterY(node.getCenterY() + deltaY);  }}  }
class C{  private void saveAttachmentToFile(){  int index=cbContent.getSelectedIndex();  log.info("index=" + index);  if (m_attachment.getEntryCount() < index)   return;  MAttachmentEntry entry=m_attachment.getEntry(index);  if (entry != null && entry.getData() != null) {    try {      AMedia media=new AMedia(entry.getName(),null,entry.getContentType(),entry.getData());      Filedownload.save(media);    } catch (    Exception e) {      log.log(Level.SEVERE,"attachment",e);    }  }}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus updateUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  public static long readAddress(final ClientReader inputStream) throws IOException {  readDWord(inputStream,8);  readDWord(inputStream,DebugArgumentType.ADDRESS.getValue());  final long addressHigh32=readDWord(inputStream);  final long addressLow32=readDWord(inputStream);  final long address=(addressLow32 & 0x00000000FFFFFFFFL) + (addressHigh32 << 32L & 0xFFFFFFFF00000000L);  return address;}  }
class C{  public static <T1,T2,T3,T4,R>Function4<T1,T2,T3,T4,R> memoizeQuadFunction(Function4<T1,T2,T3,T4,R> fn){  val memoise2=memoizeFunction(null);  return null;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthMenuUI();}  }
class C{  public void writeXmlForUnit(final XMLStreamWriter xsw) throws XMLStreamException {  xsw.writeStartElement("unit");  xsw.writeAttribute("id",this.id);  xsw.writeAttribute("version","" + this.version);  xsw.writeAttribute("singleton",Boolean.toString(this.singleton));{    xsw.writeEmptyElement("update");    xsw.writeAttribute("id",this.id);    xsw.writeAttribute("range","[0.0.0," + this.version + ")");    xsw.writeAttribute("severity","0");  }{    xsw.writeStartElement("properties");    xsw.writeAttribute("size",Integer.toString(this.properties.size()));    for (    final Map.Entry<String,String> entry : this.properties.entrySet()) {      xsw.writeStartElement("property");      xsw.writeAttribute("name",entry.getKey());      if (entry.getValue() != null) {        xsw.writeAttribute("value",entry.getValue());      }      xsw.writeEndElement();    }    xsw.writeEndElement();  }{    xsw.writeStartElement("provides");    xsw.writeAttribute("size",Integer.toString(this.provides.size()));    for (    final Entry<String> entry : this.provides) {      xsw.writeStartElement("provided");      xsw.writeAttribute("namespace",entry.getNamespace());      xsw.writeAttribute("name",entry.getKey());      xsw.writeAttribute("version",entry.getValue());      xsw.writeEndElement();    }    xsw.writeEndElement();  }{    xsw.writeStartElement("requires");    xsw.writeAttribute("size",Integer.toString(this.requires.size()));    for (    final Entry<Requirement> entry : this.requires) {      xsw.writeStartElement("required");      xsw.writeAttribute("namespace",entry.getNamespace());      xsw.writeAttribute("name",entry.getKey());      xsw.writeAttribute("range",makeString(entry.getValue().getRange()));      if (entry.getValue().isOptional()) {        xsw.writeAttribute("optional","true");      }      if (entry.getValue().getGreedy() != null) {        xsw.writeAttribute("greedy","" + entry.getValue().getGreedy());      }      final String filterString=entry.getValue().getFilter();      if (filterString != null && !filterString.isEmpty()) {        xsw.writeStartElement("filter");        xsw.writeCharacters(entry.getValue().getFilter());        xsw.writeEndElement();      }      xsw.writeEndElement();    }    xsw.writeEndElement();  }{    if (this.filter != null && !this.filter.isEmpty()) {      xsw.writeStartElement("filter");      xsw.writeCharacters(this.filter);      xsw.writeEndElement();    }  }  if (!this.artifacts.isEmpty()) {    xsw.writeStartElement("artifacts");    xsw.writeAttribute("size",Integer.toString(this.artifacts.size()));    for (    final Artifact artifact : this.artifacts) {      xsw.writeEmptyElement("artifact");      xsw.writeAttribute("classifier",artifact.getClassifer());      xsw.writeAttribute("id",artifact.getId());      xsw.writeAttribute("version","" + artifact.getVersion());    }    xsw.writeEndElement();  }{    if (this.touchpoints.isEmpty()) {      xsw.writeEmptyElement("touchpoint");      xsw.writeAttribute("id","null");      xsw.writeAttribute("version","0.0.0");    } else {      for (      final Touchpoint tp : this.touchpoints) {        xsw.writeEmptyElement("touchpoint");        xsw.writeAttribute("id",tp.getId());        xsw.writeAttribute("version",tp.getVersion());        if (!tp.getInstructions().isEmpty()) {          xsw.writeStartElement("touchpointData");          xsw.writeAttribute("size","1");          xsw.writeStartElement("instructions");          xsw.writeAttribute("size",Integer.toString(tp.getInstructions().size()));          for (          final Map.Entry<String,String> entry : tp.getInstructions().entrySet()) {            xsw.writeStartElement("instruction");            xsw.writeAttribute("key",entry.getKey());            xsw.writeCharacters(entry.getValue());            xsw.writeEndElement();          }          xsw.writeEndElement();          xsw.writeEndElement();        }      }    }  }{    xsw.writeStartElement("licenses");    xsw.writeAttribute("size",Integer.toString(this.licenses.size()));    for (    final License licenseEntry : this.licenses) {      xsw.writeStartElement("license");      if (licenseEntry.getUri() != null) {        xsw.writeAttribute("url",licenseEntry.getUri());        xsw.writeAttribute("uri",licenseEntry.getUri());      }      if (licenseEntry.getText() != null) {        xsw.writeCData(licenseEntry.getText());      }      xsw.writeEndElement();    }    xsw.writeEndElement();  }  if (this.copyright != null || this.copyrightUrl != null) {    xsw.writeStartElement("copyright");    if (this.copyrightUrl != null) {      xsw.writeAttribute("url",this.copyrightUrl);      xsw.writeAttribute("uri",this.copyrightUrl);    }    if (this.copyright != null) {      xsw.writeCData(this.copyright);    }    xsw.writeEndElement();  }  xsw.writeEndElement();}  }
class C{  public static String reomoveApostrophes(String fileName){  if ((fileName != null) && (fileName.length() > 2) && (fileName.startsWith(SORUNDER))&& (fileName.endsWith(SORUNDER))) {    return fileName.substring(1,fileName.length() - 1);  }  return fileName;}  }
class C{  public void output(List list,Writer out) throws IOException {  printContentRange(out,list,0,list.size(),0,createNamespaceStack());  out.flush();}  }
class C{  public static String parseCardKey(String card){  int indexOfEquals=card.indexOf('=');  StringBuilder builder=new StringBuilder();  Matcher kewordMatcher=FitsHeaderCardParser.KEYWORD_PATTERN.matcher(card);  while (kewordMatcher.find() && kewordMatcher.start() < indexOfEquals) {    if (builder.length() != 0) {      builder.append('.');    }    builder.append(kewordMatcher.group(1).toUpperCase(Locale.US));    if (kewordMatcher.group(2).endsWith("=")) {      break;    }  }  return builder.toString();}  }
class C{  public Iterator childNodes(){  throw new GroovyRuntimeException("Can't get the child nodes on a GPath expression selecting attributes: ...." + this.parent.name() + "."+ name()+ ".childNodes()");}  }
class C{  protected HttpRequest execute(HttpRequest request) throws IOException {  if (!configure(request).ok())   throw new IOException("Unexpected response code: " + request.code());  return request;}  }
class C{  private void updateChart(){  mainPanel.removeAll();  GridBagConstraints constraints=new GridBagConstraints();  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=0;  constraints.gridy=0;  constraints.gridwidth=1;  constraints.weightx=1;  constraints.weighty=1;  constraints.anchor=GridBagConstraints.CENTER;  JPanel chartPanel=createChartPanel();  chartPanel.setOpaque(true);  chartPanel.setBackground(ColorAndFontConstants.BACKGROUND_COLOR);  chartPanel.setForeground(ColorAndFontConstants.TEXT_COLOR);  mainPanel.add(chartPanel,constraints);}  }
class C{  private void unlock(){  lock.release();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.990 -0500",hash_original_method="9F4DF343DCBEC04991EBDE6ED7288C44",hash_generated_method="6F00E9C69051D804E6CB090610FEE3B0") final synchronized void _requestWill(int option) throws IOException {  if ((_willResponse[option] == 0 && _stateIsWill(option)) || _requestedWill(option)) {    return;  }  _setWantWill(option);  ++_doResponse[option];  _sendWill(option);}  }
class C{  public Iterator<Capability> dependencies(){  return m_Dependencies.iterator();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void engineUpdate(byte b){  md.update(b);}  }
class C{  public boolean sameAs(LockGrantorId otherLockGrantorId){  if (otherLockGrantorId == null) {    return false;  }  return sameAs(otherLockGrantorId.lockGrantorMember,otherLockGrantorId.lockGrantorVersion,otherLockGrantorId.lockGrantorSerialNumber);}  }
class C{  public BOSHConnection(boolean https,String host,int port,String filePath,String xmppDomain){  super(new BOSHConfiguration(https,host,port,filePath,xmppDomain));  this.config=(BOSHConfiguration)getConfiguration();}  }
class C{  public void testByteArray() throws IOException {  final byte[] a=new byte[]{0,1,2,3,4,5,6,7,8,9};  final InputBitStream ibs=new InputBitStream(a);  assertEquals(0,ibs.readBits());  assertEquals(0,ibs.readInt(8));  assertEquals(8,ibs.readBits());  assertEquals(1,ibs.readInt(8));  assertEquals(16,ibs.readBits());  assertEquals(2,ibs.readInt(8));  assertEquals(24,ibs.readBits());  assertEquals(3,ibs.readInt(8));  assertEquals(32,ibs.readBits());  ibs.position(2 << 3);  assertEquals(2,ibs.readInt(8));  try {    ibs.position(-1);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    System.err.println("Ignoring expected exception: " + ex);  }  try {    ibs.position(a.length << 3 + 1);    fail("Expecting: " + UnsupportedOperationException.class);  } catch (  UnsupportedOperationException ex) {    System.err.println("Ignoring expected exception: " + ex);  }}  }
class C{  public void makeShape(){  setShape(new Ellipse2D.Double(0,0,_width,_width));}  }
class C{  public void resetToDefaultPose(){  this.rotateAngleX=this.defaultRotationX;  this.rotateAngleY=this.defaultRotationY;  this.rotateAngleZ=this.defaultRotationZ;  this.offsetX=this.defaultOffsetX;  this.offsetY=this.defaultOffsetY;  this.offsetZ=this.defaultOffsetZ;  this.rotationPointX=this.defaultPositionX;  this.rotationPointY=this.defaultPositionY;  this.rotationPointZ=this.defaultPositionZ;}  }
class C{  public List<DTUHypothesis<TK,FV>> mergeHypothesisAndPendingPhrase(int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){  if (hasExpired)   return new LinkedList<DTUHypothesis<TK,FV>>();  for (  PendingPhrase<TK,FV> pendingPhrase : pendingPhrases) {    if (pendingPhrase.lastPosition < length) {      hasExpired=true;      return new LinkedList<DTUHypothesis<TK,FV>>();    }  }  List<DTUHypothesis<TK,FV>> nextHyps=new LinkedList<DTUHypothesis<TK,FV>>();  for (  PendingPhrase<TK,FV> currentPhrase : pendingPhrases) {    DTURule<TK> dtuOpt=(DTURule<TK>)currentPhrase.concreteOpt.abstractRule;    if (currentPhrase.segmentIdx + 1 < dtuOpt.dtus.length) {      int currentSegmentIdx=currentPhrase.segmentIdx + 1;      if (currentPhrase.firstPosition <= length) {        nextHyps.add(new DTUHypothesis<TK,FV>(sourceInputId,currentPhrase.concreteOpt,length,this,featurizer,scorer,heuristic,currentPhrase,currentSegmentIdx,currentPhrase.concreteOpt.abstractRule,outputSpace));      }    }  }  return nextHyps;}  }
class C{  void check(File dir,String... paths){  Set<String> found=new TreeSet<String>(Arrays.asList(dir.list()));  Set<String> expect=new TreeSet<String>(Arrays.asList(paths));  if (found.equals(expect))   return;  for (  String f : found) {    if (!expect.contains(f))     error("Unexpected file found: " + f);  }  for (  String e : expect) {    if (!found.contains(e))     error("Expected file not found: " + e);  }}  }
class C{  public PriceModel resetToNonChargeable(PriceModelType priceModelType){  priceModel.setType(priceModelType);  priceModel.setPeriod(null);  priceModel.setPricePerPeriod(BigDecimal.ZERO);  priceModel.setPricePerUserAssignment(BigDecimal.ZERO);  priceModel.setCurrency(null);  priceModel.setOneTimeFee(BigDecimal.ZERO);  List<PricedEvent> events=priceModel.getConsideredEvents();  for (  PricedEvent pricedEvent : events) {    pricedEvent.setHistoryModificationTime(txnTime);    List<SteppedPrice> steppedPrices=pricedEvent.getSteppedPrices();    for (    SteppedPrice price : steppedPrices) {      price.setHistoryModificationTime(txnTime);    }    mgr.remove(pricedEvent);  }  events.clear();  List<PricedParameter> selectedParameters=priceModel.getSelectedParameters();  for (  PricedParameter pricedParameter : selectedParameters) {    pricedParameter.setHistoryModificationTime(txnTime);    List<SteppedPrice> steppedPrices=pricedParameter.getSteppedPrices();    for (    SteppedPrice price : steppedPrices) {      price.setHistoryModificationTime(txnTime);    }    List<PricedProductRole> roleSpecificUserPrices=pricedParameter.getRoleSpecificUserPrices();    for (    PricedProductRole price : roleSpecificUserPrices) {      price.setHistoryModificationTime(txnTime);    }    List<PricedOption> pricedOptions=pricedParameter.getPricedOptionList();    for (    PricedOption option : pricedOptions) {      option.setHistoryModificationTime(txnTime);      List<PricedProductRole> rolePrices=option.getRoleSpecificUserPrices();      for (      PricedProductRole rolePrice : rolePrices) {        rolePrice.setHistoryModificationTime(txnTime);      }    }    mgr.remove(pricedParameter);  }  selectedParameters.clear();  List<SteppedPrice> steppedPrices=priceModel.getSteppedPrices();  for (  SteppedPrice steppedPrice : steppedPrices) {    steppedPrice.setHistoryModificationTime(txnTime);    mgr.remove(steppedPrice);  }  steppedPrices.clear();  List<PricedProductRole> rolePrices=priceModel.getRoleSpecificUserPrices();  for (  PricedProductRole rolePrice : rolePrices) {    rolePrice.setHistoryModificationTime(txnTime);    mgr.remove(rolePrice);  }  rolePrices.clear();  return priceModel;}  }
class C{  public synchronized boolean isModified(){  return headersModified || bodyModified || modified;}  }
class C{  @Override protected void onBindDialogView(View view){  super.onBindDialogView(view);  long currentValue=Long.valueOf(getPersistedString(getContext().getString(R.string.pref_interval_default)));  Interval interval=getInterval(currentValue);  mHourPicker=(NumberPicker)view.findViewById(R.id.hourPicker);  mHourPicker.setMinValue(0);  mHourPicker.setMaxValue(23);  mHourPicker.setValue(interval.mHours);  mMinutePicker=(NumberPicker)view.findViewById(R.id.minutePicker);  mMinutePicker.setMinValue(0);  mMinutePicker.setMaxValue(59);  mMinutePicker.setValue(interval.mMinutes);  mSecondPicker=(NumberPicker)view.findViewById(R.id.secondPicker);  mSecondPicker.setMinValue(0);  mSecondPicker.setMaxValue(59);  mSecondPicker.setValue(interval.mSeconds);}  }
class C{  public synchronized void removeListener(UpdateListener listener){  if (listener == null) {    throw new IllegalArgumentException("Null listener reference supplied");  }  int index=-1;  for (int i=0; i < listeners.length; i++) {    if (listeners[i] == listener) {      index=i;      break;    }  }  if (index == -1) {    return;  }  listeners=(UpdateListener[])CollectionUtil.arrayShrinkRemoveSingle(listeners,index);}  }
class C{  protected static void closeStatement(Statement statement){  if (null != statement) {    try {      statement.close();    } catch (    SQLException ignore) {    }  }}  }
class C{  public ReactionFiredItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){  String deleteStatement="DELETE FROM " + RULES_TABLE + " WHERE RULE_INTERNAL_ID=%d";  for (  Rule rule : rulesToDelete) {    batchList.add(String.format(deleteStatement,rule.getUid()));  }}  }
class C{  public void test_construct_where_shortcut() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="" + "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" + "construct where {?s rdf:type ?o}";  final QueryRoot expected=new QueryRoot(QueryType.CONSTRUCT);{{      final Map<String,String> prefixDecls=new LinkedHashMap<String,String>(PrefixDeclProcessor.defaultDecls);      prefixDecls.put("rdf",RDF.NAMESPACE);      expected.setPrefixDecls(prefixDecls);    }    final ConstructNode construct=new ConstructNode();    expected.setConstruct(construct);    construct.addChild(new StatementPatternNode(new VarNode("s"),new ConstantNode(makeIV(valueFactory.createURI(RDF.TYPE.toString()))),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));    final JoinGroupNode whereClause=new JoinGroupNode();    expected.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new ConstantNode(makeIV(valueFactory.createURI(RDF.TYPE.toString()))),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected,actual);}  }
class C{  public Object put(Object o1,Object o2,Object o3,Object value){  int hash=hashCode(o1,o2,o3) & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.match(o1,o2,o3)) {      Object old=e.value;      e.value=value;      return old;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  Entry e=new Entry(hash,o1,o2,o3,value,table[index]);  table[index]=e;  return null;}  }
class C{  private void updateFormBody(){  clearFormBody();  if (remoteStorageSelection.getSelection()) {    if (!storageRepositoryMap.isEmpty()) {      treeViewer.getTree().setVisible(true);      treeViewer.getTree().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));      treeViewer.setInput(new StorageTreeModelManager(storageRepositoryMap,orderingLabelType));      treeViewer.expandToLevel(AbstractTreeViewer.ALL_LEVELS);      if ((null != lastSelectedLeaf) && storageRepositoryMap.keySet().contains(lastSelectedLeaf.getStorageData())) {        StructuredSelection ss=new StructuredSelection(lastSelectedLeaf);        treeViewer.setSelection(ss,true);      }      filterStorageComposite.setEnabled(true);    } else {      displayMessage("No storage information available on currently available CMR repositories.",Display.getDefault().getSystemImage(SWT.ICON_INFORMATION));      filterStorageComposite.setEnabled(false);    }  } else {    if (!downloadedStorages.isEmpty()) {      treeViewer.getTree().setVisible(true);      treeViewer.getTree().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));      treeViewer.setInput(new LocalStorageTreeModelManager(downloadedStorages,orderingLabelType));      treeViewer.expandToLevel(AbstractTreeViewer.ALL_LEVELS);      if ((null != lastSelectedLocalStorageLeaf) && downloadedStorages.contains(lastSelectedLocalStorageLeaf.getLocalStorageData())) {        StructuredSelection ss=new StructuredSelection(lastSelectedLocalStorageLeaf);        treeViewer.setSelection(ss,true);      }      filterStorageComposite.setEnabled(true);    } else {      displayMessage("No downloaded storage is available on the local machine.",Display.getDefault().getSystemImage(SWT.ICON_INFORMATION));      filterStorageComposite.setEnabled(false);    }  }  upperComposite.layout();}  }
class C{  public Quaternion mul(Quaternion q){  float newX=w * q.x + x * q.w + y * q.z - z * q.y;  float newY=w * q.y + y * q.w + z * q.x - x * q.z;  float newZ=w * q.z + z * q.w + x * q.y - y * q.x;  float newW=w * q.w - x * q.x - y * q.y - z * q.z;  x=newX;  y=newY;  z=newZ;  w=newW;  return this;}  }
class C{  public static long sizeOf(Object obj){  return sizeOf(obj,new Accumulator());}  }
class C{  public boolean intersects(Line line){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return line.distanceTo(this.center) <= this.radius;}  }
class C{  public void addEventType(Class eventClass){  addEventType(eventClass.getSimpleName(),eventClass.getName());}  }
class C{  public static void useInternalFrames(JLayeredPane layeredPane){  if (layeredPane != null) {    env.desktop=layeredPane;    env.desktop.setOpaque(true);    set(UseInternalFrames,"true");  } else {    env.desktop=null;    set(UseInternalFrames,"false");  }}  }
class C{  public static ComponentUI createUI(JComponent b){  return new BECheckBoxMenuItemUI();}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    double[] tmp=new double[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  public String toString(){  return String.format("%s %s",text,label);}  }
class C{  protected void applyColorTheme(String subreddit){  getTheme().applyStyle(new FontPreferences(this).getPostFontStyle().getResId(),true);  getTheme().applyStyle(new ColorPreferences(this).getThemeSubreddit(subreddit),true);  getTheme().applyStyle(new FontPreferences(this).getCommentFontStyle().getResId(),true);}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  public boolean removeEntry(String data){  return map.remove(data);}  }
class C{  public static String docToString1(Document dom){  StringWriter sw=new StringWriter();  DOM2Writer.serializeAsXML(dom,sw);  return sw.toString();}  }
class C{  public EmptyValuesRaba(){}  }
class C{  private int parseNonce(final byte[] b,final int off) throws ParseException {  final int bytesToParseLen=b.length - off;  if (bytesToParseLen >= nonceLength_) {    nonce_=Arrays.copyOfRange(b,off,off + nonceLength_);    return nonceLength_;  } else {    throw new ParseException("Not enough bytes to parse nonce");  }}  }
class C{  public static boolean hasValidAppToOpen(Intent i,Context c){  return i.resolveActivity(c.getPackageManager()) != null;}  }
class C{  public void write(byte b){  check(1);  buffer[write_pos++]=b;}  }
class C{  public void runTest() throws Throwable {  String localName="district";  String namespaceURI="http://www.nist.gov";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testNode=(Element)elementList.item(0);  assertNotNull("empAddressNotNull",testNode);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertTrue("hasAttribute",state);}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  public void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setErrorEnabled(false);  mPasswordView.setErrorEnabled(false);  String email=mEmailView.getEditText().getText().toString();  String password=mPasswordView.getEditText().getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  public Object object(){  return str();}  }
class C{  public void testCallStmtExecuteLargeUpdate() throws Exception {  createTable("testExecuteLargeUpdate","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  createProcedure("testExecuteLargeUpdateProc","(IN n1 INT, IN n2 INT, IN n3 INT, IN n4 INT, IN n5 INT) BEGIN " + "INSERT INTO testExecuteLargeUpdate (n) VALUES (n1), (n2), (n3), (n4), (n5); END");  CallableStatement testCstmt=this.conn.prepareCall("{CALL testExecuteLargeUpdateProc(?, ?, ?, ?, ?)}");  testCstmt.setInt(1,1);  testCstmt.setInt(2,2);  testCstmt.setInt(3,3);  testCstmt.setInt(4,4);  testCstmt.setInt(5,5);  long count=testCstmt.executeLargeUpdate();  assertEquals(5,count);  assertEquals(5,testCstmt.getLargeUpdateCount());  this.rs=testCstmt.getGeneratedKeys();  ResultSetMetaData rsmd=this.rs.getMetaData();  assertEquals(1,rsmd.getColumnCount());  assertEquals(JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));  assertEquals(20,rsmd.getColumnDisplaySize(1));  this.rs.close();}  }
class C{  public static float ccpDot(final CGPoint v1,final CGPoint v2){  return v1.x * v2.x + v1.y * v2.y;}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  super.paint(g);}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public void addIgnored(String displayName){  HashSet<String> list;  list=new HashSet<String>();  list.add(displayName);  m_Ignored.put(displayName,list);}  }
class C{  private String createDocumentString(int[] hashes,int length){  StringBuilder sb=new StringBuilder(256);  for (int i=0; i < length; i++) {    int hash=hashes[i];    for (int y=0; y < (length - i); y++)     sb.append(" p" + hash);  }  return sb.toString().trim();}  }
class C{  protected boolean nextNode(){  if (null == m_incrementalSAXSource)   return false;  if (m_endDocumentOccured) {    clearCoRoutine();    return false;  }  Object gotMore=m_incrementalSAXSource.deliverMoreNodes(true);  if (!(gotMore instanceof Boolean)) {    if (gotMore instanceof RuntimeException) {      throw (RuntimeException)gotMore;    } else     if (gotMore instanceof Exception) {      throw new WrappedRuntimeException((Exception)gotMore);    }    clearCoRoutine();    return false;  }  if (gotMore != Boolean.TRUE) {    clearCoRoutine();  }  return true;}  }
class C{  public void beforeSendMessage(DistributionManager dm,DistributionMessage msg){}  }
class C{  public void addProperties(URL urlToProperties){  addProperties(fetchProperties(urlToProperties));}  }
class C{  public HttpConnection(String host,String virtualHost,int port,Protocol protocol){  this(null,-1,host,virtualHost,port,protocol);}  }
class C{  public boolean isValueTypeLong(){  return valueType == ParameterValueType.LONG;}  }
class C{  public List<Site> listStandbySites(){  Site activeSite=getActiveSite();  List<Site> result=new ArrayList<>();  for (  Site site : listSites()) {    if (!site.getUuid().equals(activeSite.getUuid())) {      result.add(site);    }  }  return result;}  }
class C{  public static double variance(double lower,double upper){  return (upper - lower) * (upper - lower) / 12;}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForCDATATag instance=new ForCDATATag();  String value="<div>]]></div>";  String expected="<div>]]>]]<![CDATA[></div>";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public final void normVector(){  double len=this.norm();  this.scalarMultiply(1 / len);}  }
class C{  public JobDetail build(){  JobDetailImpl job=new JobDetailImpl();  job.setJobClass(jobClass);  job.setDescription(description);  if (key == null)   key=new JobKey(Key.createUniqueName(null),null);  job.setKey(key);  job.setDurability(durability);  job.setRequestsRecovery(shouldRecover);  if (!jobDataMap.isEmpty())   job.setJobDataMap(jobDataMap);  return job;}  }
class C{  public void testSerialization(){}  }
class C{  private PaymentInfo createPaymentInfo(PaymentCollectionType collectionType,String paymentTypeId){  PaymentInfo pi=new PaymentInfo();  PaymentType pt=new PaymentType();  pt.setCollectionType(collectionType);  pt.setPaymentTypeId(paymentTypeId);  if (paymentTypeId.equals(PaymentInfoType.DIRECT_DEBIT.name())) {    pt.setPaymentTypeId("DIRECT_DEBIT");  }  if (paymentTypeId.equals(PaymentInfoType.CREDIT_CARD.name())) {    pt.setPaymentTypeId("CREDIT_CARD");  }  pi.setPaymentType(pt);  pi.setOrganization(customer);  pi.setPaymentInfoId("paymentInfoId");  return pi;}  }
class C{  public static boolean isWhitespace(Character self){  return Character.isWhitespace(self);}  }
class C{  public static boolean isSQL99Keyword(String identifier,boolean upperOnly){  if (identifier == null) {    throw new NullPointerException("The identifier cannot be null");  }  if (upperOnly) {    return Arrays.binarySearch(SQL99_RESERVED,identifier) >= 0 || Arrays.binarySearch(SQL99_NON_RESERVED,identifier) >= 0;  } else {    return isSQL99ReservedKeyword(identifier) || isSQL99NonReservedKeyword(identifier);  }}  }
class C{  public static int findName(String name,int[] table){  for (int i=0; i < table.length; i++) {    if (name.equals(getName(table[i]))) {      return i;    }  }  return -1;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public boolean userCanEditDept(int connectedUserId,int DeptId,String entidad) throws Exception {  boolean can=false;  int deptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    deptMgrId=getDeptMgrId(DeptId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_EDIT,deptMgrId,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  private static String[] removeNamesAndCreateIndex(MessageFormat mf){  StringTokenizer tokenizer=new StringTokenizer(mf.toPattern(),"#");  int nbrTokens=tokenizer.countTokens();  int counter=0;  Vector<String> returnVector=new Vector<String>();  StringBuffer buf=new StringBuffer();  for (int i=0; i < nbrTokens; i++) {    String token=tokenizer.nextToken();    if ((i % 2) == 0) {      buf.append(token);    } else {      returnVector.addElement(token);      buf.append("{" + counter + "}");      counter++;    }  }  mf.applyPattern(buf.toString());  if (returnVector.size() >= 1) {    String[] namedIndexes=new String[returnVector.size()];    returnVector.copyInto(namedIndexes);    return namedIndexes;  } else {    return new String[0];  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static DecoratorColor decoratorColor(SamtTopic isaControl){  int maturity=getMaturity(isaControl);  int targetMaturity=getTargetMaturity(isaControl);  if (targetMaturity < TargetMaturity.MIN.value()) {    return DecoratorColor.NULL;  }  return computeDecoratorColor(maturity,targetMaturity);}  }
class C{  public void insertLastFocused(String symbol,boolean append){  if (this.variable == lastFocused) {    setVariable(symbol,append);  } else {    setExpression(symbol,append);  }}  }
class C{  @Override public void validate(){}  }
class C{  private static String normalize(StringBuilder sb,String path,int off){  int len=path.length();  off=nextNonSlash(path,off,len);  int start=off;  char lastC=0;  while (off < len) {    char c=path.charAt(off);    if (isSlash(c)) {      if (lastC == ' ')       throw new InvalidPathException(path,"Trailing char <" + lastC + ">",off - 1);      sb.append(path,start,off);      off=nextNonSlash(path,off,len);      if (off != len)       sb.append('\\');      start=off;    } else {      if (isInvalidPathChar(c))       throw new InvalidPathException(path,"Illegal char <" + c + ">",off);      lastC=c;      off++;    }  }  if (start != off) {    if (lastC == ' ')     throw new InvalidPathException(path,"Trailing char <" + lastC + ">",off - 1);    sb.append(path,start,off);  }  return sb.toString();}  }
class C{  private void backupDeployedJars(RestoreScript restoreScript,File backupDir) throws IOException {  JarDeployer deployer=null;  try {    deployer=new JarDeployer();    deployer.suspendAll();    List<JarClassLoader> jarList=deployer.findJarClassLoaders();    if (!jarList.isEmpty()) {      File userBackupDir=new File(backupDir,USER_FILES);      if (!userBackupDir.exists()) {        userBackupDir.mkdir();      }      for (      JarClassLoader loader : jarList) {        File source=new File(loader.getFileCanonicalPath());        File dest=new File(userBackupDir,source.getName());        FileUtil.copy(source,dest);        restoreScript.addFile(source,dest);      }    }  }  finally {    if (null != deployer) {      deployer.resumeAll();    }  }}  }
class C{  @Ignore("perf") @Test public void testPerformanceForMatchingCQs() throws Exception {  final Host host=Host.getHost(0);  VM server1=host.getVM(0);  VM server2=host.getVM(1);  VM client1=host.getVM(2);  VM client2=host.getVM(3);  cqDUnitTest.createServer(server1);  cqDUnitTest.createServer(server2);  final int port1=server1.invoke(null);  final int port2=server2.invoke(null);  final String host0=NetworkUtils.getServerHostName(server1.getHost());  cqDUnitTest.createClient(client1,new int[]{port1},host0,"-1");  cqDUnitTest.createClient(client2,new int[]{port2},host0,"-1");  boolean uniqueQueries=false;  String[] matchingCqs=this.generateCqQueries(uniqueQueries);  for (int i=0; i < matchingCqs.length; i++) {    cqDUnitTest.createCQ(client1,"testPerformanceForMatchingCQs_" + i,matchingCqs[i]);    cqDUnitTest.executeCQ(client1,"testPerformanceForMatchingCQs_" + i,false,null);  }  uniqueQueries=true;  matchingCqs=this.generateCqQueries(uniqueQueries);  for (int i=0; i < matchingCqs.length; i++) {    cqDUnitTest.createCQ(client2,"testPerformanceForMatchingCQs_" + i,matchingCqs[i]);    cqDUnitTest.executeCQ(client2,"testPerformanceForMatchingCQs_" + i,false,null);  }  Wait.pause(1 * 1000);  int size=1000;  cqDUnitTest.createValues(server1,cqDUnitTest.regions[0],size);  cqDUnitTest.createValues(server2,cqDUnitTest.regions[1],size);  for (int j=0; j < 5; j++) {    cqDUnitTest.createValues(server1,cqDUnitTest.regions[0],size - 1);    cqDUnitTest.createValues(server2,cqDUnitTest.regions[1],size - 1);  }  for (int j=0; j < 4; j++) {    cqDUnitTest.createValues(server2,cqDUnitTest.regions[0],size - 1);    cqDUnitTest.createValues(server1,cqDUnitTest.regions[1],size - 1);  }  cqDUnitTest.createValues(server2,cqDUnitTest.regions[0],size);  cqDUnitTest.createValues(server1,cqDUnitTest.regions[1],size);  for (int k=1; k <= size; k++) {    cqDUnitTest.waitForUpdated(client1,"testPerformanceForMatchingCQs_0",CqQueryDUnitTest.KEY + k);  }  Wait.pause(1 * 1000);  printCqQueryExecutionTime(server1);  printCqQueryExecutionTime(server2);  cqDUnitTest.closeClient(client1);  cqDUnitTest.closeClient(client2);  cqDUnitTest.closeServer(server2);  cqDUnitTest.closeServer(server1);}  }
class C{  public NBTTagCompound save(NBTTagCompound tag,String key,Object value){  if (value instanceof Boolean) {    tag.setBoolean("isBoolean",true);    tag.setBoolean(key,(boolean)value);  } else   if (value instanceof Byte) {    tag.setBoolean("isBoolean",false);    tag.setByte(key,(byte)value);  } else   if (value instanceof Short) {    tag.setShort(key,(short)value);  } else   if (value instanceof Integer) {    tag.setInteger(key,(int)value);  } else   if (value instanceof Long) {    tag.setLong(key,(long)value);  } else   if (value instanceof Character) {    tag.setInteger(key,(Character)value);  } else   if (value instanceof Float) {    tag.setFloat(key,(float)value);  } else   if (value instanceof Double) {    tag.setDouble(key,(double)value);  } else   if (value instanceof String) {    tag.setString(key,(String)value);  } else   if (value instanceof Data) {    NBTTagCompound innerTag=new NBTTagCompound();    toNative(innerTag,(Data)value);    tag.setTag(key,innerTag);  }  return tag;}  }
class C{  public OrderRecyclerAdapter(Context context){  this.context=context;}  }
class C{  public PlatformDotNetSessionData unlock(UUID lockNodeId,long lockId){  assert isLocked();  if (!this.lockNodeId.equals(lockNodeId))   throw new IllegalStateException("Can not unlock session data: lock node id check failed.");  if (this.lockId != lockId)   throw new IllegalStateException("Can not unlock session data: lock id check failed.");  return copyWithoutLockInfo();}  }
class C{  public XMLStringDefault(String str){  m_str=str;}  }
class C{  public DefaultModel(ExampleSet exampleSet,double value,double[] confidences){  super(exampleSet,null,null);  this.value=value;  this.confidences=confidences;}  }
class C{  protected void updateValues(String key,Integer color){  ContentResolver resolver=getContentResolver();  if (key.equals(LOW_COLOR_PREF)) {    Settings.System.putInt(resolver,Settings.System.BATTERY_LIGHT_LOW_COLOR,color);  } else   if (key.equals(MEDIUM_COLOR_PREF)) {    Settings.System.putInt(resolver,Settings.System.BATTERY_LIGHT_MEDIUM_COLOR,color);  } else   if (key.equals(FULL_COLOR_PREF)) {    Settings.System.putInt(resolver,Settings.System.BATTERY_LIGHT_FULL_COLOR,color);  }}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] > z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(label,progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String toString(boolean[][] m){  String result;  if (m == null) {    result=nullMessage();  } else {    TextTable textTable=new TextTable(m.length,m[0].length);    for (int i=0; i < m.length; i++) {      for (int j=0; j < m[0].length; j++) {        textTable.setToken(i,j,Boolean.toString(m[i][j]));      }    }    result="\n" + textTable.toString();  }  return result;}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isFullRank()) {    throw new RuntimeException("Matrix is rank deficient.");  }  int nx=B.getColumnDimension();  double[][] X=B.getArrayCopy();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      double s=0.0;      for (int i=k; i < m; i++) {        s+=QR[i][k] * X[i][j];      }      s=-s / QR[k][k];      for (int i=k; i < m; i++) {        X[i][j]+=s * QR[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=Rdiag[k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * QR[i][k];      }    }  }  return (new Matrix(X,n,nx).getMatrix(0,n - 1,0,nx - 1));}  }
class C{  private void callDeleteApi(String wallId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.DELETE_WALL);  retroCallbackList.add(retroCallback);  mYeloApi.deleteWall(wallId,retroCallback);  String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;  DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_WALL_POST,getTaskTag(),null,TableWallPosts.NAME,selection,new String[]{wallId},true,this);}  }
class C{  public void emote(EmotionalState state,Network memory){}  }
class C{  public boolean isNetworkError(){  return networkError;}  }
class C{  public NodesStatsRequest process(boolean process){  this.process=process;  return this;}  }
class C{  void load(ReferenceableInstance i) throws RepositoryException {  int pos=idPosMap.get(i.getId());  loadFields(pos,i);  for (  HierarchicalTypeStore s : superTypeStores) {    s.load(i);  }}  }
class C{  @Override public synchronized void removeDataSourceListener(DataSourceListener dsl){  m_dataListeners.remove(dsl);}  }
class C{  public ItemStack yank(){  return InventoryProcessor.instance().yankSlot(inventory,index);}  }
class C{  public boolean isEmpty(){  return root == null;}  }
class C{  public void handleDrawMessage(DrawMessage msg,long msgId){  room.internalHandleDrawMessage(this,msg,msgId);}  }
class C{  public StunException(){}  }
class C{  protected void createFromHValues(int[] hValues,int partitions){  Arrays.sort(hValues);  this.splits=new int[partitions];  int maxH=0x7fffffff;  for (int i=0; i < splits.length; i++) {    int quantile=(int)((long)(i + 1) * hValues.length / partitions);    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];  }}  }
class C{  @Override public String toXMLBIF03(){  if (m_Instances == null) {    return ("<!--No model built yet-->");  }  StringBuffer text=new StringBuffer();  text.append(getBIFHeader());  text.append("\n");  text.append("\n");  text.append("<BIF VERSION=\"0.3\">\n");  text.append("<NETWORK>\n");  text.append("<NAME>" + XMLNormalize(m_Instances.relationName()) + "</NAME>\n");  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    text.append("<VARIABLE TYPE=\"nature\">\n");    text.append("<NAME>" + XMLNormalize(m_Instances.attribute(iAttribute).name()) + "</NAME>\n");    for (int iValue=0; iValue < m_Instances.attribute(iAttribute).numValues(); iValue++) {      text.append("<OUTCOME>" + XMLNormalize(m_Instances.attribute(iAttribute).value(iValue)) + "</OUTCOME>\n");    }    text.append("<PROPERTY>position = (" + getPositionX(iAttribute) + ","+ getPositionY(iAttribute)+ ")</PROPERTY>\n");    text.append("</VARIABLE>\n");  }  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    text.append("<DEFINITION>\n");    text.append("<FOR>" + XMLNormalize(m_Instances.attribute(iAttribute).name()) + "</FOR>\n");    for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {      text.append("<GIVEN>" + XMLNormalize(m_Instances.attribute(m_ParentSets[iAttribute].getParent(iParent)).name()) + "</GIVEN>\n");    }    text.append("<TABLE>\n");    for (int iParent=0; iParent < m_ParentSets[iAttribute].getCardinalityOfParents(); iParent++) {      for (int iValue=0; iValue < m_Instances.attribute(iAttribute).numValues(); iValue++) {        text.append(m_Distributions[iAttribute][iParent].getProbability(iValue));        text.append(' ');      }      text.append('\n');    }    text.append("</TABLE>\n");    text.append("</DEFINITION>\n");  }  text.append("</NETWORK>\n");  text.append("</BIF>\n");  return text.toString();}  }
class C{  @Override public boolean usesLocalFiles(){  debugCodeCall("usesLocalFiles");  return true;}  }
class C{  private void rotateRight(Entry p){  Entry l=p.left;  p.left=l.right;  if (l.right != null)   l.right.parent=p;  l.parent=p.parent;  if (p.parent == null)   root=l; else   if (p.parent.right == p)   p.parent.right=l; else   p.parent.left=l;  l.right=p;  p.parent=l;}  }
class C{  public PPlanRouter(final TripRouter routingHandler,final ActivityFacilities facilities){  this.routingHandler=routingHandler;  this.facilities=facilities;}  }
class C{  static <T>Partition<T> partition(Iterable<? extends Iterable<T>> sets,Class<T> type,Comparator<?> cmp){  T[] universe;  int nSets=0;  Map<T,Integer> elToIndex=Maps.newHashMap();{    Bag<T> bag=Bag.newHashBag();    for (    Iterable<T> set : sets) {      for (      T el : set) {        bag.incr(el);      }      ++nSets;    }    Set<T> uniq=bag.nonZeroCounts();    universe=allocateReferenceTypeArray(type,uniq.size());{      int i=0;      for (      T el : uniq) {        universe[i++]=el;      }    }    tryToSort(universe,cmp);    for (int i=0; i < universe.length; ++i) {      elToIndex.put(universe[i],i);    }  }  ISlice nonZeroCols=new ISlice();  nonZeroCols.els=new int[nonZeroCols.count=universe.length];  for (int i=0; i < nonZeroCols.count; ++i) {    nonZeroCols.els[i]=i;  }  ISlice[] matrix=new ISlice[nSets];{    int i=0;    BitSet rowBits=new BitSet(universe.length);    for (    Iterable<T> set : sets) {      rowBits.clear();      for (      T el : set) {        int index=elToIndex.get(el);        if (!rowBits.get(index)) {          rowBits.set(index);        }      }      ISlice row=new ISlice();      row.count=rowBits.cardinality();      row.els=new int[row.count];      for (int b=-1, j=0; (b=rowBits.nextSetBit(b + 1)) >= 0; ) {        row.els[j++]=b;      }      Arrays.sort(row.els);      matrix[i++]=row;    }  }  ISlice nonZeroRows=new ISlice();  nonZeroRows.els=new int[nSets];  for (int i=0; i < matrix.length; ++i) {    if (matrix[i].count != 0) {      nonZeroRows.els[nonZeroRows.count++]=i;    }  }  List<ISlice> partition=Lists.newArrayList();  ISlice[] unionIndices=new ISlice[nSets];  for (int i=0; i < nSets; ++i) {    unionIndices[i]=new ISlice();    unionIndices[i].els=new int[universe.length];  }  while (nonZeroRows.count != 0) {    ISlice bestPartitionElement=null;    for (int i=0; i < nonZeroCols.count; ++i) {      int el=nonZeroCols.els[i];      ISlice candidate=null;      for (int j=0; j < nonZeroRows.count; ++j) {        ISlice r=matrix[nonZeroRows.els[j]];        if (r.contains(el)) {          if (candidate == null) {            candidate=r.clone();          } else {            candidate.preserve(r);          }        }      }      assert candidate != null;      for (int j=0; j < nonZeroRows.count; ++j) {        ISlice r=matrix[nonZeroRows.els[j]];        if (!r.contains(el)) {          candidate.subtract(r);        }      }      if (bestPartitionElement == null || bestPartitionElement.count < candidate.count) {        bestPartitionElement=candidate;      }    }    assert bestPartitionElement != null;    int partitionIndex=partition.size();    partition.add(bestPartitionElement);    nonZeroCols.subtract(bestPartitionElement);    int k=0;    for (int j=0; j < nonZeroRows.count; ++j) {      int rowIndex=nonZeroRows.els[j];      ISlice r=matrix[rowIndex];      boolean changed=r.subtract(bestPartitionElement);      if (changed) {        unionIndices[rowIndex].els[unionIndices[rowIndex].count++]=partitionIndex;      }      if (r.count != 0) {        nonZeroRows.els[k++]=rowIndex;      } else {        assert changed;      }    }    nonZeroRows.count=k;    if (bestPartitionElement.count == 1) {      break;    }  }{    int[] elementToPartition=new int[universe.length];    for (int i=0; i < nonZeroCols.count; ++i) {      int el=nonZeroCols.els[i];      ISlice singleton=new ISlice();      singleton.count=1;      singleton.els=new int[]{el};      elementToPartition[el]=partition.size();      partition.add(singleton);    }    nonZeroCols.count=0;    for (int j=0; j < nonZeroRows.count; ++j) {      int rowIndex=nonZeroRows.els[j];      ISlice r=matrix[rowIndex];      ISlice union=unionIndices[rowIndex];      for (int i=0; i < r.count; ++i) {        int el=r.els[i];        union.els[union.count++]=elementToPartition[el];      }      r.count=0;    }    nonZeroRows.count=0;  }  Partition<T> result=new Partition<T>();  result.universe=universe;  result.unions=new int[unionIndices.length][];  for (int i=0; i < unionIndices.length; ++i) {    result.unions[i]=unionIndices[i].toArray();  }  result.partition=new int[partition.size()][];  for (int i=0; i < result.partition.length; ++i) {    result.partition[i]=partition.get(i).toArray();  }  return result;}  }
class C{  @Override public void onDrawEye(EyeTransform transform){}  }
class C{  public void addPanListener(PanListener listener){  mTouchHandler.addPanListener(listener);}  }
class C{  @Override public Properties trackTranscriptLanguage(String videoId,Double currentTime,String lang,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.TRANSCRIPT_LANGUAGE);  aEvent.properties.putValue(Keys.LANGUAGE,lang);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.LANGUAGE_CLICKED,aEvent.properties);  return aEvent.properties;}  }
class C{  public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime) throws JobManagerException {  schedule(null,serviceName,context,startTime,frequency,interval,count,endTime);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    super.put(key,value);  }  return this;}  }
class C{  public Object put(long key,Object value){  int hash=(int)(key & mask);  int count=size;  while (count-- >= 0) {    long testKey=keys[hash];    if (testKey == DEAD_KEY || (flags[hash] & DELETED) != 0) {      keys[hash]=key;      values[hash]=value;      flags[hash]=0;      size++;      if (keys.length <= 2 * size)       resize(2 * keys.length);      return null;    } else     if (key != testKey) {      hash=(hash + 1) & mask;      continue;    } else {      Object old=values[hash];      values[hash]=value;      return old;    }  }  return null;}  }
class C{  @Override public int compareTo(FileHandleInfo obj){  return (sortId - obj.sortId);}  }
class C{  public void readFully(byte b[],int off,int len) throws IOException {  if (len < 0)   throw new IndexOutOfBoundsException();  int n=0;  while (n < len) {    int count=in.read(b,off + n,len - n);    if (count < 0)     throw new EOFException();    n+=count;  }}  }
class C{  private JsonWriter open(JsonScope empty,String openBracket) throws IOException {  beforeValue(true);  stack.add(empty);  out.write(openBracket);  return this;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public void addExtractor(Class<? extends LocalFeatureExtractor> localFeatureExtractorClass,Cluster[] codebook){  if ((!(codebook.length > 0)) || (codebook == null))   throw new UnsupportedOperationException("Codebook cannot be empty or null!!");  LinkedList<Cluster[]> listOfCodebooks=new LinkedList<Cluster[]>();  listOfCodebooks.add(codebook);  addExtractor(new ExtractorItem(localFeatureExtractorClass),listOfCodebooks);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.361 -0500",hash_original_method="561BEB6A8D834A34E4D5A2503144263D",hash_generated_method="818CA09102D790BE8758F466E76831EF") @Override public int hashCode(){  int result=algorithm.length();  for (  byte element : key) {    result+=element;  }  return result;}  }
class C{  public ClassTemplate createClassTemplate(String className){  ClassPool cp=getClassPool();  return new ClassTemplate(cp.makeClass(className),this);}  }
class C{  protected void launchMSteps(Instances inst) throws Exception {  if (m_executionSlots <= 1 || inst.numInstances() < 2 * m_executionSlots) {    M(inst);    return;  }  new_estimators();  estimate_priors(inst);  int numPerTask=inst.numInstances() / m_executionSlots;  List<Future<MTask>> results=new ArrayList<Future<MTask>>();  for (int i=0; i < m_executionSlots; i++) {    int start=i * numPerTask;    int end=start + numPerTask;    if (i == m_executionSlots - 1) {      end=inst.numInstances();    }    DiscreteEstimator[][] model=new DiscreteEstimator[m_num_clusters][m_num_attribs];    double[][][] normal=new double[m_num_clusters][m_num_attribs][3];    for (int ii=0; ii < m_num_clusters; ii++) {      for (int j=0; j < m_num_attribs; j++) {        if (m_theInstances.attribute(j).isNominal()) {          model[ii][j]=new DiscreteEstimator(m_theInstances.attribute(j).numValues(),false);        } else {          normal[ii][j][0]=normal[ii][j][1]=normal[ii][j][2]=0.0;        }      }    }    MTask newTask=new MTask(inst,start,end,model,normal);    Future<MTask> futureM=m_executorPool.submit(newTask);    results.add(futureM);  }  for (  Future<MTask> t : results) {    MTask m=t.get();    for (int i=0; i < m_num_clusters; i++) {      for (int j=0; j < m_num_attribs; j++) {        if (m_theInstances.attribute(j).isNominal()) {          for (int k=0; k < m_theInstances.attribute(j).numValues(); k++) {            m_model[i][j].addValue(k,m.m_taskModel[i][j].getCount(k));          }        } else {          m_modelNormal[i][j][0]+=m.m_taskModelNormal[i][j][0];          m_modelNormal[i][j][2]+=m.m_taskModelNormal[i][j][2];          m_modelNormal[i][j][1]+=m.m_taskModelNormal[i][j][1];        }      }    }  }  M_reEstimate(inst);}  }
class C{  public double[] readTS(String dataFileName,int loadLimit) throws SAXException, IOException {  Path path=Paths.get(dataFileName);  if (!(Files.exists(path))) {    throw new SAXException("unable to load data - data source not found.");  }  BufferedReader reader=Files.newBufferedReader(path,DEFAULT_CHARSET);  return readTS(reader,0,loadLimit);}  }
class C{  public FormatterDocument(Document document){  super();  ConfigurableLineTracker lineTracker=new ConfigurableLineTracker(delimeters);  setTextStore(new FormatterStore(document));  setLineTracker(lineTracker);  getTracker().set(document.getContents());  completeInitialization();}  }
class C{  public void addColumn(Column column){  data.columns.add(column);}  }
class C{  public static int indexOf(double[] array,double value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (Double.compare(array[i],value) == 0) {      return i;    }  }  return -1;}  }
class C{  public void readInteger() throws IOException {  if (tag != ASN1Constants.TAG_INTEGER) {    throw expected("integer");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 integer at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    byte firstByte=buffer[offset - length];    byte secondByte=(byte)(buffer[offset - length + 1] & 0x80);    if (firstByte == 0 && secondByte == 0 || firstByte == (byte)0xFF && secondByte == (byte)0x80) {      throw new ASN1Exception("Wrong content for ASN.1 integer at [" + (offset - length) + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Builder body(String value){  body=value;  return this;}  }
class C{  protected Path download(Artifact artifact,Version version) throws IOException, IllegalStateException {  try {    String requestUrl=combinePaths(updateEndpoint,"/repository/public/download/" + artifact.getName() + "/"+ version);    Path artifactDownloadDir=getDownloadDirectory(artifact,version);    deleteDirectory(artifactDownloadDir.toFile());    return transport.download(requestUrl,artifactDownloadDir,MediaType.APPLICATION_OCTET_STREAM);  } catch (  IOException e) {    throw getProperException(e,artifact);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=clean(str);  if (str.isEmpty()) {    return str;  }  char out[]={'0','0','0','0'};  char last, mapped;  int incount=1, count=1;  out[0]=str.charAt(0);  last=getMappingCode(str,0);  while ((incount < str.length()) && (count < out.length)) {    mapped=getMappingCode(str,incount++);    if (mapped != 0) {      if ((mapped != '0') && (mapped != last)) {        out[count++]=mapped;      }      last=mapped;    }  }  return new String(out);}  }
class C{  public void removeNode(N node){  Pair<HashSet<N>,HashSet<N>> p=nodes.remove(node);  if (p == null)   return;  HashSet<N> incomingNodes=p.getIncoming();  for (  N incomingNode : incomingNodes)   nodes.get(incomingNode).getOutgoing().remove(node);}  }
class C{  protected AccessImpl(){  super();}  }
class C{  private List<CharsRef> stem(char word[],int length,int previous,int prevFlag,int prefixFlag,int recursionDepth,boolean doPrefix,boolean doSuffix,boolean previousWasPrefix,boolean circumfix,boolean caseVariant) throws IOException {  List<CharsRef> stems=new ArrayList<>();  if (doPrefix && dictionary.prefixes != null) {    FST<IntsRef> fst=dictionary.prefixes;    Outputs<IntsRef> outputs=fst.outputs;    FST.BytesReader bytesReader=prefixReaders[recursionDepth];    FST.Arc<IntsRef> arc=prefixArcs[recursionDepth];    fst.getFirstArc(arc);    IntsRef NO_OUTPUT=outputs.getNoOutput();    IntsRef output=NO_OUTPUT;    int limit=dictionary.fullStrip ? length : length - 1;    for (int i=0; i < limit; i++) {      if (i > 0) {        int ch=word[i - 1];        if (fst.findTargetArc(ch,arc,arc,bytesReader) == null) {          break;        } else         if (arc.output != NO_OUTPUT) {          output=fst.outputs.add(output,arc.output);        }      }      IntsRef prefixes=null;      if (!arc.isFinal()) {        continue;      } else {        prefixes=fst.outputs.add(output,arc.nextFinalOutput);      }      for (int j=0; j < prefixes.length; j++) {        int prefix=prefixes.ints[prefixes.offset + j];        if (prefix == previous) {          continue;        }        affixReader.setPosition(8 * prefix);        char flag=(char)(affixReader.readShort() & 0xffff);        char stripOrd=(char)(affixReader.readShort() & 0xffff);        int condition=(char)(affixReader.readShort() & 0xffff);        boolean crossProduct=(condition & 1) == 1;        condition>>>=1;        char append=(char)(affixReader.readShort() & 0xffff);        final boolean compatible;        if (recursionDepth == 0) {          if (dictionary.onlyincompound == -1) {            compatible=true;          } else {            dictionary.flagLookup.get(append,scratch);            char appendFlags[]=Dictionary.decodeFlags(scratch);            compatible=!Dictionary.hasFlag(appendFlags,(char)dictionary.onlyincompound);          }        } else         if (crossProduct) {          dictionary.flagLookup.get(append,scratch);          char appendFlags[]=Dictionary.decodeFlags(scratch);          assert prevFlag >= 0;          boolean allowed=dictionary.onlyincompound == -1 || !Dictionary.hasFlag(appendFlags,(char)dictionary.onlyincompound);          compatible=allowed && hasCrossCheckedFlag((char)prevFlag,appendFlags,false);        } else {          compatible=false;        }        if (compatible) {          int deAffixedStart=i;          int deAffixedLength=length - deAffixedStart;          int stripStart=dictionary.stripOffsets[stripOrd];          int stripEnd=dictionary.stripOffsets[stripOrd + 1];          int stripLength=stripEnd - stripStart;          if (!checkCondition(condition,dictionary.stripData,stripStart,stripLength,word,deAffixedStart,deAffixedLength)) {            continue;          }          char strippedWord[]=new char[stripLength + deAffixedLength];          System.arraycopy(dictionary.stripData,stripStart,strippedWord,0,stripLength);          System.arraycopy(word,deAffixedStart,strippedWord,stripLength,deAffixedLength);          List<CharsRef> stemList=applyAffix(strippedWord,strippedWord.length,prefix,-1,recursionDepth,true,circumfix,caseVariant);          stems.addAll(stemList);        }      }    }  }  if (doSuffix && dictionary.suffixes != null) {    FST<IntsRef> fst=dictionary.suffixes;    Outputs<IntsRef> outputs=fst.outputs;    FST.BytesReader bytesReader=suffixReaders[recursionDepth];    FST.Arc<IntsRef> arc=suffixArcs[recursionDepth];    fst.getFirstArc(arc);    IntsRef NO_OUTPUT=outputs.getNoOutput();    IntsRef output=NO_OUTPUT;    int limit=dictionary.fullStrip ? 0 : 1;    for (int i=length; i >= limit; i--) {      if (i < length) {        int ch=word[i];        if (fst.findTargetArc(ch,arc,arc,bytesReader) == null) {          break;        } else         if (arc.output != NO_OUTPUT) {          output=fst.outputs.add(output,arc.output);        }      }      IntsRef suffixes=null;      if (!arc.isFinal()) {        continue;      } else {        suffixes=fst.outputs.add(output,arc.nextFinalOutput);      }      for (int j=0; j < suffixes.length; j++) {        int suffix=suffixes.ints[suffixes.offset + j];        if (suffix == previous) {          continue;        }        affixReader.setPosition(8 * suffix);        char flag=(char)(affixReader.readShort() & 0xffff);        char stripOrd=(char)(affixReader.readShort() & 0xffff);        int condition=(char)(affixReader.readShort() & 0xffff);        boolean crossProduct=(condition & 1) == 1;        condition>>>=1;        char append=(char)(affixReader.readShort() & 0xffff);        final boolean compatible;        if (recursionDepth == 0) {          if (dictionary.onlyincompound == -1) {            compatible=true;          } else {            dictionary.flagLookup.get(append,scratch);            char appendFlags[]=Dictionary.decodeFlags(scratch);            compatible=!Dictionary.hasFlag(appendFlags,(char)dictionary.onlyincompound);          }        } else         if (crossProduct) {          dictionary.flagLookup.get(append,scratch);          char appendFlags[]=Dictionary.decodeFlags(scratch);          assert prevFlag >= 0;          boolean allowed=dictionary.onlyincompound == -1 || !Dictionary.hasFlag(appendFlags,(char)dictionary.onlyincompound);          compatible=allowed && hasCrossCheckedFlag((char)prevFlag,appendFlags,previousWasPrefix);        } else {          compatible=false;        }        if (compatible) {          int appendLength=length - i;          int deAffixedLength=length - appendLength;          int stripStart=dictionary.stripOffsets[stripOrd];          int stripEnd=dictionary.stripOffsets[stripOrd + 1];          int stripLength=stripEnd - stripStart;          if (!checkCondition(condition,word,0,deAffixedLength,dictionary.stripData,stripStart,stripLength)) {            continue;          }          char strippedWord[]=new char[stripLength + deAffixedLength];          System.arraycopy(word,0,strippedWord,0,deAffixedLength);          System.arraycopy(dictionary.stripData,stripStart,strippedWord,deAffixedLength,stripLength);          List<CharsRef> stemList=applyAffix(strippedWord,strippedWord.length,suffix,prefixFlag,recursionDepth,false,circumfix,caseVariant);          stems.addAll(stemList);        }      }    }  }  return stems;}  }
class C{  public RollbackException(JCTree target,Consumer<JCTree> onRollbacked){  super();  this.target=target;  this.onRollbacked=onRollbacked;}  }
class C{  public Normal(double mean,double standardDeviation,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(mean,standardDeviation);}  }
class C{  public static int compute(Object... objects){  return computeHashCode(0,objects);}  }
class C{  public void execute(NodeTaskContext context){  NodeTaskReporter taskReporter=new NodeTaskReporter(this);  taskQueue=new ArrayDeque<>(tasks);  if (!taskQueue.isEmpty()) {    NodeTask task=taskQueue.poll();    task.execute(context,taskReporter);  } else {    listener.onSuccess();  }}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public static void register(Resource aggType,String name){  type2Name.put(aggType,name);  name2Type.put(name,aggType);}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public static String uuid(){  char[] uuid=new char[36];  int r;  uuid[8]=uuid[13]=uuid[18]=uuid[23]='-';  uuid[14]='4';  for (int i=0; i < 36; i++) {    if (uuid[i] == 0) {      r=(int)(Math.random() * 16);      uuid[i]=CHARS[(i == 19) ? (r & 0x3) | 0x8 : r & 0xf];    }  }  return new String(uuid);}  }
class C{  @Override public final boolean shouldPerform(OptOptions options){  return options.SSA_COALESCE_AFTER;}  }
class C{  public TLongHashSetDecorator(TLongHashSet set){  super();  this._set=set;}  }
class C{  public boolean hasReceiver(){  return invokeExpr != null && invokeExpr instanceof InstanceInvokeExpr;}  }
class C{  public TagBasedTLCOutputIncrementalParser(Model model,int prio,boolean isTraceExplorer){  this(model,prio,isTraceExplorer,Mode.INCREMENTAL,LargeTextStoreDocument.SIZE_UNKNOWN);}  }
class C{  public void tokenizeLines(int start,int len){  if (tokenMarker == null || !tokenMarker.supportsMultilineTokens())   return;  Segment lineSegment=new Segment();  Element map=getDefaultRootElement();  len+=start;  try {    for (int i=start; i < len; i++) {      Element lineElement=map.getElement(i);      int lineStart=lineElement.getStartOffset();      getText(lineStart,lineElement.getEndOffset() - lineStart - 1,lineSegment);      tokenMarker.markTokens(lineSegment,i);    }  } catch (  BadLocationException bl) {    bl.printStackTrace();  }}  }
class C{  public Pos3D translate(double x,double y,double z){  xPos+=x;  yPos+=y;  zPos+=z;  return this;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public ImageSprite(final Image image){  this(image,null);}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static String formatCurrency(BigDecimal price,String isoCode,Locale locale){  return formatCurrency(price,isoCode,locale,-1);}  }
class C{  public void put(StreamState streamState){  streams.put(streamState.partition(),streamState);}  }
class C{  public static void main(String args[]) throws PatternSyntaxException, IOException {  RegexURLNormalizer normalizer=new RegexURLNormalizer();  normalizer.setConf(NutchConfiguration.create());  HashMap<String,List<Rule>> scopedRules=normalizer.getScopedRules();  Iterator<Rule> i=normalizer.defaultRules.iterator();  System.out.println("* Rules for 'DEFAULT' scope:");  while (i.hasNext()) {    Rule r=i.next();    System.out.print("  " + r.pattern.pattern() + " -> ");    System.out.println(r.substitution);  }  if (args.length > 1) {    normalizer.normalize("http://test.com",args[1]);  }  if (scopedRules.size() > 1) {    Iterator<String> it=scopedRules.keySet().iterator();    while (it.hasNext()) {      String scope=it.next();      if (URLNormalizers.SCOPE_DEFAULT.equals(scope))       continue;      System.out.println("* Rules for '" + scope + "' scope:");      i=((List<Rule>)scopedRules.get(scope)).iterator();      while (i.hasNext()) {        Rule r=(Rule)i.next();        System.out.print("  " + r.pattern.pattern() + " -> ");        System.out.println(r.substitution);      }    }  }  if (args.length > 0) {    System.out.println("\n---------- Normalizer test -----------");    String scope=URLNormalizers.SCOPE_DEFAULT;    if (args.length > 1)     scope=args[1];    System.out.println("Scope: " + scope);    System.out.println("Input url:  '" + args[0] + "'");    System.out.println("Output url: '" + normalizer.normalize(args[0],scope) + "'");  }  System.exit(0);}  }
class C{  @Override protected void buildActions(final List<String> list){  super.buildActions(list);  User user=User.get();  Pet pet=entity;  if (user != null) {    if (!user.hasPet()) {      list.add(ActionType.OWN.getRepresentation());    } else     if ((pet != null) && (user.getPetID() == pet.getID().getObjectID())) {      list.add(ActionType.LEAVE_PET.getRepresentation());    }  }}  }
class C{  public PSpecified(byte[] p){  super("PSpecified");  if (p == null) {    throw new NullPointerException("p == null");  }  this.p=new byte[p.length];  System.arraycopy(p,0,this.p,0,p.length);}  }
class C{  private void finishedEditingDialog(){  if (!ModificationRegistery.modelHasChanged(getSessionNode())) {    return;  }  for (  SessionNode child : getChildren()) {    if (child.getModel() != null) {      continue;    }    return;  }  Object[] options={"Execute","Break Edges"};  Component centeringComp=SessionEditorNode.this;  int selection=JOptionPane.showOptionDialog(centeringComp,"Changing this node will affect its children.\n" + "Click on \"Execute\" to percolate changes down.\n" + "Click on \"Break Edges\" to leave the children the same.","Warning",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);  if (selection == 0) {    for (    SessionNode child : getChildren()) {      executeSessionNode(child,true);    }  } else   if (selection == 1) {    for (    Edge edge : sessionWrapper.getEdges(getModelNode())) {      if (edge.getNode2() == getModelNode()) {        SessionNodeWrapper otherWrapper=(SessionNodeWrapper)edge.getNode1();        SessionNode other=otherWrapper.getSessionNode();        if (getChildren().contains(other)) {          sessionWrapper.removeEdge(edge);        }      } else {        SessionNodeWrapper otherWrapper=(SessionNodeWrapper)edge.getNode2();        SessionNode other=otherWrapper.getSessionNode();        if (getChildren().contains(other)) {          sessionWrapper.removeEdge(edge);        }      }    }  }}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public DOMTreeWalker(Node n,int what,NodeFilter nf,boolean exp){  root=n;  whatToShow=what;  filter=nf;  expandEntityReferences=exp;  currentNode=root;}  }
class C{  public static BufferedReader newReader(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));}  }
class C{  public GridClientClosedException(String msg){  super(msg);}  }
class C{  public void addFactor(String factor){  if (!NamingProtocol.isLegalName(factor)) {    throw new IllegalArgumentException(NamingProtocol.getProtocolDescription());  }  if (!connectivity.containsKey(factor)) {    SortedSet<LaggedFactor> laggedFactors=new TreeSet<>();    connectivity.put(factor,laggedFactors);  }}  }
class C{  public HashMap<String,String> validateStretchyReportParamMap(String stretchyReportParamMap){  HashMap<String,String> stretchyReportParamHashMap=new HashMap<>();  if (!StringUtils.isEmpty(stretchyReportParamMap)) {    try {      stretchyReportParamHashMap=new ObjectMapper().readValue(stretchyReportParamMap,new TypeReference<HashMap<String,String>>(){      });    } catch (    Exception e) {      stretchyReportParamHashMap=null;    }  }  return stretchyReportParamHashMap;}  }
class C{  public static double pdf(double x,double m,double sd){  double a=1.0 / (Math.sqrt(2.0 * Math.PI) * sd);  double b=-(x - m) * (x - m) / (2.0 * sd * sd);  return a * Math.exp(b);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final boolean isInsideDocComment(){  return this.insideDocComment;}  }
class C{  public boolean isShowTotals(){  return showTotals;}  }
class C{  public Vector3 round(){  return new Vector3(Math.round(x),Math.round(y),Math.round(z));}  }
class C{  public TCPSlaveConnection(Socket socket){  try {    setSocket(socket);  } catch (  IOException ex) {    logger.debug("TCPSlaveConnection::Socket invalid");    throw new IllegalStateException("Socket invalid",ex);  }}  }
class C{  public static IntList dincrList(IntList L,int x){  if (L == null) {    return null;  }  L.head=L.head + x;  dincrList(L.tail,x);  return L;}  }
class C{  public MutableTupleQueryResult(Collection<String> bindingNames,Collection<? extends BindingSet> bindingSets){  this.bindingNames.addAll(bindingNames);  this.bindingSets.addAll(bindingSets);}  }
class C{  private void writeServiceKeyIdentifier(long triggerProcessKey) throws Exception {  long serviceKey=determineServiceKey(triggerProcessKey);  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.SERVICE_KEY,String.valueOf(serviceKey));}  }
class C{  public static String toString(long x){  return toString(x,10);}  }
class C{  private void logDropDetail(int counter,String annotation){  if (annotation == null)   annotation="";  if (counter > 0) {    String detailType=m_detailTypes;    if (counter == 1)     detailType=m_detailType;    s_logger.log(Level.FINE,"deleteDetailResult",new Object[]{Integer.toString(counter),detailType,annotation});  }  if (m_detailCounterDrp == null)   m_detailCounterDrp=new Integer(0);  m_detailCounterDrp=new Integer(m_detailCounterDrp.intValue() + counter);}  }
class C{  private SimpleItem makeItem(@IntRange(from=0,to=25) int position){  SimpleItem result=new SimpleItem();  result.withName(ALPHABET[position]);  position++;  String description="The " + (position);  if (position == 1 || position == 21) {    description+="st";  } else   if (position == 2 || position == 22) {    description+="nd";  } else   if (position == 3 || position == 23) {    description+="rd";  } else {    description+="th";  }  return result.withDescription(description + " letter in the alphabet");}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  @Override public long skip(long numToSkip) throws IOException {  byte[] skipBuf=new byte[BUFFER_SIZE];  long skip=numToSkip;  while (skip > 0) {    int realSkip=(int)(skip > skipBuf.length ? skipBuf.length : skip);    int numRead=read(skipBuf,0,realSkip);    if (numRead == -1) {      break;    }    skip-=numRead;  }  return (numToSkip - skip);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isVMwareSVGA3D(){  return this.isVMwareSVGA3D;}  }
class C{  protected void addPressed(ActionEvent e){  editMode=false;  if ((blockManager.getSystemNameList().size()) > 0) {    addEditPressed();  } else {    javax.swing.JOptionPane.showMessageDialog(null,rbx.getString("Message1"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);  }}  }
class C{  void read(Reader policy) throws ParsingException, IOException {  if (!(policy instanceof BufferedReader)) {    policy=new BufferedReader(policy);  }  st=new StreamTokenizer(policy);  st.resetSyntax();  st.wordChars('a','z');  st.wordChars('A','Z');  st.wordChars('.','.');  st.wordChars('0','9');  st.wordChars('_','_');  st.wordChars('$','$');  st.wordChars(128 + 32,255);  st.whitespaceChars(0,' ');  st.commentChar('/');  st.quoteChar('\'');  st.quoteChar('"');  st.lowerCaseMode(false);  st.ordinaryChar('/');  st.slashSlashComments(true);  st.slashStarComments(true);  st.parseNumbers();  Hashtable<String,Vector<String>> processedPermissions=null;  lookahead=st.nextToken();  while (lookahead != StreamTokenizer.TT_EOF) {    if (peek("grant")) {      GrantEntry ge=parseGrantEntry(processedPermissions);      if (ge != null)       grantEntries.addElement(ge);    } else {      throw new ParsingException(st.lineno(),"expected grant " + "statement");    }    match(";");  }}  }
class C{  public synchronized T removeNextHatchedUninterruptibly(){  while (true) {    try {      return removeNextHatched();    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override public void run(int connId,String[] args){  try {    int eid=Integer.parseInt(args[1]);    Entity ent=server.getGame().getEntity(eid);    int pid=Integer.parseInt(args[2]);    IPlayer player=server.getGame().getPlayer(pid);    if (null == ent) {      server.sendServerChat(connId,"No such entity");    } else     if (ent.getOwner().getId() != connId) {      server.sendServerChat(connId,"You must own an entity to make it switch sides.");    } else     if (null == player) {      server.sendServerChat(connId,"No such player");    } else     if (player.getTeam() == IPlayer.TEAM_UNASSIGNED) {      server.sendServerChat(connId,"Player must be assigned a team!");    } else     if (pid == connId) {      server.sendServerChat(connId,"You can't switch to the same side!");    } else {      server.sendServerChat(connId,ent.getDisplayName() + " will switch to " + player.getName()+ "'s side at the end of this turn.");      ent.setTraitorId(pid);    }  } catch (  NumberFormatException nfe) {  }catch (  NullPointerException npe) {  }catch (  IndexOutOfBoundsException ioobe) {  }}  }
class C{  public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {  String urlFile=jarUrl.getFile();  int separatorIndex=urlFile.indexOf(JAR_URL_SEPARATOR);  if (separatorIndex != -1) {    String jarFile=urlFile.substring(0,separatorIndex);    try {      return new URL(jarFile);    } catch (    MalformedURLException ex) {      if (!jarFile.startsWith("/")) {        jarFile="/" + jarFile;      }      return new URL(FILE_URL_PREFIX + jarFile);    }  } else {    return jarUrl;  }}  }
class C{  public int addRootRow(){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public void applyParams(){  mVertexShader.setColor(mColor);  mVertexShader.setTime(mTime);  mVertexShader.applyParams();  mFragmentShader.setColorInfluence(mColorInfluence);  mFragmentShader.applyParams();}  }
class C{  public BytesReference bytes(){  return this.innerBytes;}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func,GeodeConnectionConf connConf,Properties opConf){  dsf.saveToGeode(regionPath,func,connConf,propertiesToScalaMap(opConf));}  }
class C{  public void testDoConfigureCreatesFiles() throws Exception {  configuration.doConfigure(container);  assertTrue(fileHandler.exists(DOMAIN_HOME + "/config"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/config/config.xml"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security/DefaultAuthenticatorInit.ldift"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/security/SerializedSystemIni.dat"));  assertTrue(fileHandler.exists(DOMAIN_HOME + "/autodeploy/cargocpc.war"));}  }
class C{  public InputStream openInputStreamNoFree() throws IOException {  close();  TempBuffer head=_head;  return new TempInputStreamNoFree(head);}  }
class C{  protected UIViewRoot restoreSerializedView(FacesContext context,SerializedView sv,String viewId){  if (sv == null) {    return null;  }  TreeStructure structRoot=(TreeStructure)sv.getStructure();  if (structRoot == null) {    return null;  }  UIComponent viewRoot=structRoot.createComponent();  if (viewRoot != null) {    restoreComponentTreeStructure(structRoot,viewRoot);    Object state=sv.getState();    viewRoot.processRestoreState(context,state);  }  return ((UIViewRoot)viewRoot);}  }
class C{  public static void checkNotNullArgument(Object reference,@Nullable String errorMessage){  if (reference == null) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public int compareTo(AttributeLocator o){  int result;  int i;  result=0;  if (this.getType() < o.getType()) {    result=-1;  } else   if (this.getType() > o.getType()) {    result=1;  } else {    if (this.getAllowedIndices().length < o.getAllowedIndices().length) {      result=-1;    } else     if (this.getAllowedIndices().length > o.getAllowedIndices().length) {      result=1;    } else {      for (i=0; i < this.getAllowedIndices().length; i++) {        if (this.getAllowedIndices()[i] < o.getAllowedIndices()[i]) {          result=-1;          break;        } else         if (this.getAllowedIndices()[i] > o.getAllowedIndices()[i]) {          result=1;          break;        } else {          result=0;        }      }    }  }  return result;}  }
class C{  public void displayNotification(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  try {    operation.setStatus(getContextResources().getString(R.string.operation_value_progress));    operation.setOperationResponse(notificationService.buildResponse(Notification.Status.RECEIVED));    getResultBuilder().build(operation);    JSONObject inputData=new JSONObject(operation.getPayLoad().toString());    String messageTitle=inputData.getString(getContextResources().getString(R.string.intent_extra_message_title));    String messageText=inputData.getString(getContextResources().getString(R.string.intent_extra_message_text));    if (messageTitle != null && !messageTitle.isEmpty() && messageText != null && !messageText.isEmpty()) {      notificationService.addNotification(operation.getId(),messageTitle,messageText,Notification.Status.RECEIVED);      notificationService.showNotification(operation.getId(),messageTitle,messageText);    } else {      operation.setStatus(getContextResources().getString(R.string.operation_value_error));      String errorMessage="Message title/text is empty. Please retry with valid inputs";      JSONObject errorResult=new JSONObject();      errorResult.put(STATUS,errorMessage);      operation.setOperationResponse(errorMessage);      getResultBuilder().build(operation);      Log.e(TAG,errorMessage);    }    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"Notification received");    }  } catch (  JSONException e) {    operation.setStatus(getContextResources().getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing NOTIFICATION payload.");    getResultBuilder().build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  public Attribute(AttribKey key,Type type,String defaultValue,String safeValue,boolean valueless,boolean optional,LoaderType loaderType,UriEffect effect,RegularCriterion valueCriterion){  assert key != null;  assert type != null;  assert safeValue == null || valueCriterion.accept(safeValue) : ("[" + safeValue + "] for "+ key+ " with criterion /"+ valueCriterion.toRegularExpression()+ "/");  assert (type == Type.URI) == (effect != null) : key;  assert (type == Type.URI) == (loaderType != null) : key;  this.key_=key;  this.type_=type;  this.defaultValue_=defaultValue;  this.safeValue_=safeValue;  this.valueless_=valueless;  this.optional_=optional;  this.loaderType_=loaderType;  this.effect_=effect;  this.valueCriterion_=valueCriterion;}  }
class C{  public boolean isAddressLinesReverse(){  if (getC_Country_ID() == MCountry.getDefault(getCtx()).getC_Country_ID())   return getCountry().isAddressLinesLocalReverse();  return getCountry().isAddressLinesReverse();}  }
class C{  public RecyclerViewCacheUtil withCacheSize(int cacheSize){  mCacheSize=cacheSize;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Hashtable(Map t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  void invalidate(){  currentFrameIndex=0;}  }
class C{  public static String packageName(IPath pkgPath,String sourceLevel,String complianceLevel){  StringBuffer pkgName=new StringBuffer(IPackageFragment.DEFAULT_PACKAGE_NAME);  for (int j=0, max=pkgPath.segmentCount(); j < max; j++) {    String segment=pkgPath.segment(j);    if (!isValidFolderNameForPackage(segment,sourceLevel,complianceLevel)) {      return null;    }    pkgName.append(segment);    if (j < pkgPath.segmentCount() - 1) {      pkgName.append(".");    }  }  return pkgName.toString();}  }
class C{  public static jMatrix read(BufferedReader input) throws java.io.IOException {  StreamTokenizer tokenizer=new StreamTokenizer(input);  tokenizer.resetSyntax();  tokenizer.wordChars(0,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.eolIsSignificant(true);  java.util.Vector v=new java.util.Vector();  while (tokenizer.nextToken() == StreamTokenizer.TT_EOL)   ;  if (tokenizer.ttype == StreamTokenizer.TT_EOF)   throw new java.io.IOException("Unexpected EOF on matrix read.");  do {    v.addElement(Double.valueOf(tokenizer.sval));  } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);  int n=v.size();  double row[]=new double[n];  for (int j=0; j < n; j++)   row[j]=((Double)v.elementAt(j)).doubleValue();  v.removeAllElements();  v.addElement(row);  while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {    v.addElement(row=new double[n]);    int j=0;    do {      if (j >= n)       throw new java.io.IOException("Row " + v.size() + " is too long.");      row[j++]=Double.valueOf(tokenizer.sval).doubleValue();    } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);    if (j < n)     throw new java.io.IOException("Row " + v.size() + " is too short.");  }  int m=v.size();  double[][] A=new double[m][];  v.copyInto(A);  return new jMatrix(A);}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!mutate) {    value=null;  }}  }
class C{  @Catch(value=Exception.class,priority=Integer.MAX_VALUE) public static void flashExceptionHandler(Exception e) throws Exception {  FlashException handler=getActionAnnotation(FlashException.class);  if (handler != null) {    flashException(e);    if (handler.keep()) {      params.flash();      Validation.keep();    }    String action=handler.value();    String[] referrer=handler.referrer();    if (!action.isEmpty()) {      if (!action.contains(".")) {        action=getControllerClass().getName() + "." + action;      }      redirect(action);    } else     if (referrer != null && referrer.length > 0) {      Http.Header headerReferrer=request.headers.get("referer");      if (headerReferrer != null && StringUtils.isNotBlank(headerReferrer.value())) {        Pattern p=Pattern.compile(StringUtils.join(referrer,"|"),Pattern.CASE_INSENSITIVE);        Matcher m=p.matcher(headerReferrer.value());        if (m.find()) {          redirectToReferrer();        } else {          Logger.error(String.format("The redirect page is not valid base on the FlashException referrer restriction: %s",referrer.toString()));        }      } else {        Logger.error("Unable to redirect. No referrer available in request header");      }    } else {      redirectToReferrer();    }  }}  }
class C{  @Override protected Scalar parseScalar(Scalar s){  if (s.val.length < 3)   throw new IllegalArgumentException("Scalar must have 3 dimensions.");  return new Scalar(s.val[0],s.val[1],s.val[2]);}  }
