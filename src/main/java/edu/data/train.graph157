class C{  public boolean activateLaser(World world,int x,int z){  ticketLaser=ForgeChunkManager.requestTicket(AdvancedRocketry.instance,world,Type.NORMAL);  if (ticketLaser != null) {    ForgeChunkManager.forceChunk(ticketLaser,new ChunkCoordIntPair(x >> 4,z >> 4));    int y=64;    if (world.getChunkFromBlockCoords(x,z).isChunkLoaded) {      int current=0;      for (int i=0; i < 9; i++) {        current=world.getTopSolidOrLiquidBlock(x + (i % 3) - 1,z + (i / 3) - 1);        if (current > y)         y=current;      }      if (y < 1)       y=255;    } else     y=255;    laser=new EntityLaserNode(world,x,y,z);    laser.forceSpawn=true;    world.spawnEntityInWorld(laser);    return true;  }  return false;}  }
class C{  private static a createImageLink(String AD_Language,String name){  return createImageLink(AD_Language,name,null,true,false);}  }
class C{  public Boolean isVPMCEnabled(){  return vpmcEnabled;}  }
class C{  protected boolean select(MethodIdent methodIdent){  return !hideInactiveInstrumentations || methodIdent.hasActiveSensorTypes();}  }
class C{  public static LatLon[] greatCircleArcExtremeLocations(LatLon begin,LatLon end){  if (begin == null) {    String message=Logging.getMessage("nullValue.BeginIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (end == null) {    String message=Logging.getMessage("nullValue.EndIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LatLon minLatLocation=null;  LatLon maxLatLocation=null;  double minLat=Angle.POS90.degrees;  double maxLat=Angle.NEG90.degrees;  for (  LatLon ll : java.util.Arrays.asList(begin,end)) {    if (minLat >= ll.getLatitude().degrees) {      minLat=ll.getLatitude().degrees;      minLatLocation=ll;    }    if (maxLat <= ll.getLatitude().degrees) {      maxLat=ll.getLatitude().degrees;      maxLatLocation=ll;    }  }  Angle greatArcAzimuth=greatCircleAzimuth(begin,end);  Angle greatArcDistance=greatCircleDistance(begin,end);  LatLon[] greatCircleExtremes=greatCircleExtremeLocations(begin,greatArcAzimuth);  for (  LatLon ll : greatCircleExtremes) {    Angle az=LatLon.greatCircleAzimuth(begin,ll);    Angle d=LatLon.greatCircleDistance(begin,ll);    if (Math.signum(az.degrees) == Math.signum(greatArcAzimuth.degrees)) {      if (d.degrees >= 0 && d.degrees <= greatArcDistance.degrees) {        if (minLat >= ll.getLatitude().degrees) {          minLat=ll.getLatitude().degrees;          minLatLocation=ll;        }        if (maxLat <= ll.getLatitude().degrees) {          maxLat=ll.getLatitude().degrees;          maxLatLocation=ll;        }      }    }  }  return new LatLon[]{minLatLocation,maxLatLocation};}  }
class C{  public boolean isSpinning(){  return isSpinning;}  }
class C{  public List<BatchRequest> extractList(final String json){  final Type listType=new TypeToken<List<BatchRequest>>(){  }.getType();  final List<BatchRequest> requests=super.getGsonConverter().fromJson(json,listType);  return requests;}  }
class C{  public List<VmfsDatastoreOption> queryVmfsDatastoreCreateOptions(HostScsiDisk disk){  HostDatastoreSystem datastoreSystem=getDatastoreSystem();  try {    return createList(datastoreSystem.queryVmfsDatastoreCreateOptions(disk.getDevicePath()));  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public static double normalizeZero(double value){  return value == 0.0 ? 0.0 : value;}  }
class C{  public Builder withThreads(int threads){  properties.setProperty(NettyOptions.THREADS,String.valueOf(Assert.argNot(threads,threads <= 0,"threads must be positive")));  return this;}  }
class C{  public int nextInt(){  int c=0;  double u, f;  u=this.randomGenerator.raw();  u*=this.K;  c=(int)u;  u-=c;  f=this.F[c];  if (f == 1.0)   return c;  if (u < f) {    return c;  } else {    return this.A[c];  }}  }
class C{  public JarInfoTableModel(){  columnNames=new String[8];  columnNames[0]=res.getString("JarInfoTableModel.JarFileColumn");  columnNames[1]=res.getString("JarInfoTableModel.SizeColumn");  columnNames[2]=res.getString("JarInfoTableModel.SpecificationTitleColumn");  columnNames[3]=res.getString("JarInfoTableModel.SpecificationVersionColumn");  columnNames[4]=res.getString("JarInfoTableModel.SpecificationVendorColumn");  columnNames[5]=res.getString("JarInfoTableModel.ImplementationTitleColumn");  columnNames[6]=res.getString("JarInfoTableModel.ImplementationVersionColumn");  columnNames[7]=res.getString("JarInfoTableModel.ImplementationVendorColumn");  data=new Object[0][0];}  }
class C{  public ThickCloseableIterator(final E[] a){  if (a == null)   throw new IllegalArgumentException();  this.a=a;  this.len=a.length;  lastIndex=-1;}  }
class C{  private void checkCapabilities(){  if (!this.checked) {    this.checked=true;    ContextCapabilities contextCapabilities=GLContext.getCapabilities();    boolean supported=contextCapabilities.OpenGL21 || (contextCapabilities.GL_ARB_vertex_shader && contextCapabilities.GL_ARB_fragment_shader && contextCapabilities.GL_ARB_shader_objects);    boolean arbMultitexture=contextCapabilities.GL_ARB_multitexture && !contextCapabilities.OpenGL13;    int maxTextureUnits=arbMultitexture ? GL11.glGetInteger(ARBMultitexture.GL_MAX_TEXTURE_UNITS_ARB) : (!contextCapabilities.OpenGL20 ? GL11.glGetInteger(GL13.GL_MAX_TEXTURE_UNITS) : GL11.glGetInteger(GL20.GL_MAX_TEXTURE_IMAGE_UNITS));    boolean textureUnitsSupported=maxTextureUnits >= MIN_REQUIRED_TEX_UNITS;    this.shadersSupported=OpenGlHelper.areShadersSupported() && supported && OpenGlHelper.framebufferSupported&& textureUnitsSupported;    this.floatBufferSupported=contextCapabilities.OpenGL30;    this.arbFloatBufferSupported=contextCapabilities.GL_ARB_texture_float;  }}  }
class C{  public Node beforeDecode(mxCodec dec,Node node,Object obj){  Element inner=(Element)node;  if (obj instanceof mxCell) {    mxCell cell=(mxCell)obj;    String className=mxCodecRegistry.getName(template);    if (!node.getNodeName().equals(className)) {      Node tmp=inner.getElementsByTagName(className).item(0);      if (tmp != null && tmp.getParentNode() == node) {        inner=(Element)tmp;        Node tmp2=tmp.getPreviousSibling();        while (tmp2 != null && tmp2.getNodeType() == Node.TEXT_NODE) {          Node tmp3=tmp2.getPreviousSibling();          if (tmp2.getTextContent().trim().length() == 0) {            tmp2.getParentNode().removeChild(tmp2);          }          tmp2=tmp3;        }        tmp2=tmp.getNextSibling();        while (tmp2 != null && tmp2.getNodeType() == Node.TEXT_NODE) {          Node tmp3=tmp2.getPreviousSibling();          if (tmp2.getTextContent().trim().length() == 0) {            tmp2.getParentNode().removeChild(tmp2);          }          tmp2=tmp3;        }        tmp.getParentNode().removeChild(tmp);      } else {        inner=null;      }      Element value=(Element)node.cloneNode(true);      cell.setValue(value);      String id=value.getAttribute("id");      if (id != null) {        cell.setId(id);        value.removeAttribute("id");      }    } else {      cell.setId(((Element)node).getAttribute("id"));    }    if (inner != null && idrefs != null) {      Iterator<String> it=idrefs.iterator();      while (it.hasNext()) {        String attr=it.next();        String ref=inner.getAttribute(attr);        if (ref != null && ref.length() > 0) {          inner.removeAttribute(attr);          Object object=dec.objects.get(ref);          if (object == null) {            object=dec.lookup(ref);          }          if (object == null) {            Node element=dec.getElementById(ref);            if (element != null) {              mxObjectCodec decoder=mxCodecRegistry.getCodec(element.getNodeName());              if (decoder == null) {                decoder=this;              }              object=decoder.decode(dec,element);            }          }          setFieldValue(obj,attr,object);        }      }    }  }  return inner;}  }
class C{  public String transBinaryXml(String path) throws IOException {  ZipEntry entry=Utils.getEntry(zipFile,path);  if (entry == null) {    return null;  }  if (resourceTable == null) {    parseResourceTable();  }  try {    XmlTranslator xmlTranslator=new XmlTranslator();    transBinaryXml(path,xmlTranslator);    return xmlTranslator.getXml();  } catch (  ParserException e) {    InputStream in=zipFile.getInputStream(entry);    ByteArrayOutputStream baos=new ByteArrayOutputStream(8192);    byte[] buffer=new byte[8192];    int length;    while ((length=in.read(buffer)) != -1) {      baos.write(buffer,0,length);    }    in.close();    return baos.toString("UTF-8");  }}  }
class C{  @Override public boolean remove(Object obj){  int index=index((E)obj);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  public static Set<InetAddress> myPublicIPv6(){  return publicIPv6HostAddresses;}  }
class C{  private QueueUtils(){}  }
class C{  public DateTimeException(String message){  super(message);}  }
class C{  public void validate(final FacesContext facesContext,final UIComponent component,final Object value) throws ValidatorException {  String clientId=component.getClientId(facesContext);  if (value == null) {    handleError(facesContext,clientId,"javax.faces.component.UIInput.REQUIRED");  }  Date fromDate=getFromDate();  Date toDate=getToDate();  String msgKey=null;  if (clientId.endsWith(FROM_DATE)) {    fromDate=(Date)value;    msgKey=BaseBean.ERROR_FROM_DATE_AFTER_TO_DATE;  } else   if (clientId.endsWith(TO_DATE)) {    msgKey=BaseBean.ERROR_TO_DATE_BEFORE_FROM_DATE;    toDate=(Date)value;  }  if (fromDate != null && toDate != null) {    if (fromDate.after(toDate)) {      handleError(facesContext,clientId,msgKey);    }  }}  }
class C{  private static void sortHelper(String[] asciis,int start,int end,int index){}  }
class C{  public void stop(){  running=false;}  }
class C{  public MapRoute replicate(){  return new MapRoute(type,stops);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSymbolElement(prefix,(AbstractDocument)doc);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public EventStoreBuilder withoutUserCredentials(){  settingsBuilder.withoutUserCredentials();  return this;}  }
class C{  @Override public String generateLabel(CategoryDataset dataset,int series){  ParamChecks.nullNotPermitted(dataset,"dataset");  String label=MessageFormat.format(this.formatPattern,createItemArray(dataset,series));  return label;}  }
class C{  @Override public void updateNavigationDrawerBottomHandler(NavigationDrawerBottomHandler navigationDrawerBottomHandler){  replaceBottomItems(navigationDrawerBottomHandler);}  }
class C{  public String generateCallId(){  return IdGenerator.getIdentifier() + "@" + mLocalIpAddress;}  }
class C{  public UnderflowException(final String message){  super(message);}  }
class C{  private void destinationTypeChanged(){  if (m_Exp == null)   return;  String str="";  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {    m_ResultsDestinationPathLabel.setText("URL:");    str=m_destinationDatabaseURL;    m_BrowseDestinationButton.setEnabled(true);    m_BrowseDestinationButton.setText("User...");  } else {    m_ResultsDestinationPathLabel.setText("Filename:");    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {      int ind=m_destinationFilename.lastIndexOf(".csv");      if (ind > -1) {        m_destinationFilename=m_destinationFilename.substring(0,ind) + ".arff";      }    }    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {      int ind=m_destinationFilename.lastIndexOf(".arff");      if (ind > -1) {        m_destinationFilename=m_destinationFilename.substring(0,ind) + ".csv";      }    }    str=m_destinationFilename;    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {      int ind=str.lastIndexOf(".csv");      if (ind > -1) {        str=str.substring(0,ind) + ".arff";      }    }    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {      int ind=str.lastIndexOf(".arff");      if (ind > -1) {        str=str.substring(0,ind) + ".csv";      }    }    m_BrowseDestinationButton.setEnabled(true);    m_BrowseDestinationButton.setText("Browse...");  }  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {    DatabaseResultListener drl=null;    try {      drl=new DatabaseResultListener();    } catch (    Exception e) {      e.printStackTrace();    }    drl.setDatabaseURL(m_destinationDatabaseURL);    m_Exp.setResultListener(drl);  } else {    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {      InstancesResultListener irl=new InstancesResultListener();      if (!m_destinationFilename.equals("")) {        irl.setOutputFile(new File(m_destinationFilename));      }      m_Exp.setResultListener(irl);    } else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {      CSVResultListener crl=new CSVResultListener();      if (!m_destinationFilename.equals("")) {        crl.setOutputFile(new File(m_destinationFilename));      }      m_Exp.setResultListener(crl);    }  }  m_ResultsDestinationPathTField.setText(str);  m_Support.firePropertyChange("",null,null);}  }
class C{  public static void clearInterval(Context cx,Scriptable thisObj,Object[] args,Function funObj){  int len=args.length;  WindowWrapper ww=(WindowWrapper)thisObj;  Window window=ww.window;  if (len >= 1) {    window.clearInterval(Context.jsToJava(args[0],Object.class));  }}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  public void startButtonActionPerformed(){  clock.setRun(true);}  }
class C{  private boolean switchesHaveAnotherMaster(){  IOFSwitchService switchService=controller.getSwitchService();  for (  Entry<DatapathId,IOFSwitch> switchMap : switchService.getAllSwitchMap().entrySet()) {    IOFSwitchBackend sw=(IOFSwitchBackend)switchMap.getValue();    if (sw.hasAnotherMaster()) {      return true;    }  }  return false;}  }
class C{  public IBinding resolveBinding(){  return this.ast.getBindingResolver().resolveImport(this);}  }
class C{  public static double pdf(double x,double M,double S){  if (x <= 0)   return 0;  return NormalDistribution.pdf(Math.log(x),M,S) / x;}  }
class C{  private PrintElement createStringElement(String content,int AD_PrintColor_ID,int AD_PrintFont_ID,int maxWidth,int maxHeight,boolean isHeightOneLine,String FieldAlignmentType,boolean isTranslated){  if (content == null || content.length() == 0)   return null;  Color color=getColor();  if (AD_PrintColor_ID != 0 && m_printColor.get_ID() != AD_PrintColor_ID) {    MPrintColor c=MPrintColor.get(getCtx(),AD_PrintColor_ID);    if (c.getColor() != null)     color=c.getColor();  }  Font font=m_printFont.getFont();  if (AD_PrintFont_ID != 0 && m_printFont.get_ID() != AD_PrintFont_ID) {    MPrintFont f=MPrintFont.get(AD_PrintFont_ID);    if (f.getFont() != null)     font=f.getFont();  }  PrintElement e=new StringElement(content,font,color,null,isTranslated);  e.layout(maxWidth,maxHeight,isHeightOneLine,FieldAlignmentType);  return e;}  }
class C{  public static boolean equals(int[] left,int[] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=left[i] == right[i];  }  return result;}  }
class C{  private Object[] maybeEnableIconFilter(Object[] defaults){  if (NbPreferences.forModule(DarculaLAFPanel.class).getBoolean("invertIcons",false)) {    return appendToArray(defaults,"nb.imageicon.filter",new DarkIconFilter());  }  return defaults;}  }
class C{  public void finest(Supplier<String> msgSupplier){  log(Level.FINEST,msgSupplier);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  tokenBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public void onDescriptorRead(BluetoothGatt gatt,BluetoothGattDescriptor descriptor,int status){}  }
class C{  public static Map<String,Object> cdyneReturnCityState(DispatchContext dctx,Map<String,?> context){  String zipcode=(String)context.get("zipcode");  Locale locale=(Locale)context.get("locale");  String serviceUrl="http://ws.cdyne.com/psaddress/addresslookup.asmx/ReturnCityState?zipcode=" + zipcode + "&LicenseKey="+ licenseKey;  try {    String httpResponse=HttpClient.getUrlContent(serviceUrl);    Document addressDocument=UtilXml.readXmlDocument(httpResponse);    Element addressRootElement=addressDocument.getDocumentElement();    Map<String,Object> response=ServiceUtil.returnSuccess();    populateCdyneAddress(addressRootElement,response);    if ("true".equals(response.get("ServiceError"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneServiceError",UtilMisc.toMap("zipcode",zipcode),locale));    }    if ("true".equals(response.get("AddressError"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneAddressError",UtilMisc.toMap("zipcode",zipcode),locale));    }    return response;  } catch (  HttpClientException e) {    Debug.logError(e,"Error calling CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneCallingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }catch (  SAXException e) {    Debug.logError(e,"Error parsing XML result from CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneParsingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }catch (  ParserConfigurationException e) {    Debug.logError(e,"Error parsing XML result from CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneParsingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }catch (  IOException e) {    Debug.logError(e,"Error parsing XML result from CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneParsingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }}  }
class C{  protected AbstractTextChildTextContent(BridgeContext ctx,SVGTextElementBridge parent,Element e){  super(ctx,parent,e);}  }
class C{  private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        String entityString=stream.toString();        builder.append(" --data-ascii \"").append(entityString).append("\"");      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  public static boolean equalsIgnoreNull(final Object obj1,final Object obj2){  return (obj1 == null ? obj2 == null : obj1.equals(obj2));}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.353 -0500",hash_original_method="8C47C531A43F622294BF6051B04C8993",hash_generated_method="25171806BEBD83F72AE1C91C485F28E6") private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public boolean isOpen(){  return STATE_Running.equals(m_state) || STATE_NotStarted.equals(m_state) || STATE_Suspended.equals(m_state);}  }
class C{  public static RegionAttributes createRegionAttrsForPR(int red,int localMaxMem,long recoveryDelay){  return createRegionAttrsForPR(red,localMaxMem,recoveryDelay,null,null);}  }
class C{  boolean isInsideCircle(float centerPointX,float centerPointY,float radius){  double xValue=Math.pow((getX() - centerPointX),2);  double yValue=Math.pow((getY() - centerPointY),2);  double radiusValue=Math.pow(radius,2);  boolean touchPointInsideCircle=xValue + yValue <= radiusValue;  LOGGER.trace("Detected touch point {} inside the main circle",touchPointInsideCircle ? "IS" : "IS NOT");  return touchPointInsideCircle;}  }
class C{  public void onDescriptorWriteRequest(String address,int transId,int offset,int length,boolean isPrep,boolean needRsp,int srvcType,int srvcInstId,ParcelUuid srvcId,int charInstId,ParcelUuid charId,ParcelUuid descrId,byte[] value){  UUID srvcUuid=srvcId.getUuid();  UUID charUuid=charId.getUuid();  UUID descrUuid=descrId.getUuid();  if (DBG)   Log.d(TAG,"onDescriptorWriteRequest() - " + "service=" + srvcUuid + ", characteristic="+ charUuid+ "descriptor="+ descrUuid);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  BluetoothGattService service=getService(srvcUuid,srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid);  if (characteristic == null)   return;  BluetoothGattDescriptor descriptor=characteristic.getDescriptor(descrUuid);  if (descriptor == null)   return;  try {    mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.203 -0500",hash_original_method="BE346953D196911D47A80804A6B74A8F",hash_generated_method="FA1FF0D936D9A45B6AB85F09FD7B00BB") public TableRow(Context context,AttributeSet attrs){  super(context,attrs);  initTableRow();}  }
class C{  public static Bitmap createVideoThumbnail(String filePath){  Bitmap bitmap=null;  return bitmap;}  }
class C{  public Geometry symDifference(Geometry geom0,Geometry geom1){  Geometry[] geom=removeCommonBits(geom0,geom1);  return computeResultPrecision(geom[0].symDifference(geom[1]));}  }
class C{  public String reportIssue(String selectedSubscriptionId){  try {    if (selectedSubscriptionId == null || ADMStringUtils.isBlank(selectedSubscriptionId))     throw new ValidationException();    if (validateSubscriptionStatus()) {      ui.handleError(null,ERROR_SUBSCRIPTION_NOT_ACCESSIBLE,selectedSubscriptionId);      return OUTCOME_SUBSCRIPTION_NOT_AVAILABLE;    }    getSubscriptionService().reportIssue(selectedSubscriptionId,getSupportEmailTitle(),getSupportEmailContent());  } catch (  SaaSApplicationException e) {    handleException(e);    return OUTCOME_ERROR;  } finally {    this.supportEmailContent=null;    this.supportEmailTitle=null;  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_ORGANIZATION_SUPPORTMAIL_SENT);  return OUTCOME_SUCCESS;}  }
class C{  public XmlBlob generateCumulativeXmlBlob(ExtensionProfile extProfile) throws IOException {  XmlBlob cumulative=new XmlBlob();  Collection<XmlNamespace> namespaces=cumulative.getNamespaces();  StringWriter w=new StringWriter();  XmlWriter xw=new XmlWriter(w);  if (xmlBlob != null) {    cumulative.setLang(xmlBlob.getLang());    cumulative.setBase(xmlBlob.getBase());    namespaces.addAll(xmlBlob.getNamespaces());    w.write(xmlBlob.getBlob());  }  if (manifest != null) {    for (    XmlNamespace ns : manifest.getNamespaceDecls()) {      XmlNamespace newNs=new XmlNamespace(ns.getAlias(),ns.getUri());      if (!namespaces.contains(newNs)) {        namespaces.add(newNs);      }    }  }  for (  Extension ext : nonRepeatingExtensionMap.values()) {    ext.generate(xw,extProfile);  }  for (  List<Extension> extList : repeatingExtensionMap.values()) {    xw.startRepeatingElement();    for (    Extension ext : extList) {      ext.generate(xw,extProfile);    }    xw.endRepeatingElement();  }  cumulative.setBlob(w.toString());  return cumulative;}  }
class C{  public int write(Sequence sequence,int nFileType,OutputStream outputStream) throws IOException {  if (!isFileTypeSupported(nFileType,sequence)) {    throw new IllegalArgumentException("file type is not supported for this sequence");  }  Track[] aTracks=sequence.getTracks();  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);  dataOutputStream.writeInt(MidiConstants.HEADER_MAGIC);  dataOutputStream.writeInt(6);  dataOutputStream.writeShort(nFileType);  dataOutputStream.writeShort(aTracks.length);  float fDivisionType=sequence.getDivisionType();  int nResolution=sequence.getResolution();  int nDivision=0;  if (fDivisionType == Sequence.PPQ) {    nDivision=nResolution & 0x7fff;  } else {  }  dataOutputStream.writeShort(nDivision);  int nBytesWritten=14;  for (int nTrack=0; nTrack < aTracks.length; nTrack++) {    nBytesWritten+=writeTrack(aTracks[nTrack],dataOutputStream);  }  return nBytesWritten;}  }
class C{  public Command(String command){  this.command=command;}  }
class C{  public void mutableMultiply(Complex c){  mutableMultiply(c.real,c.imag);}  }
class C{  public ParagraphView(Element elem){  super(elem);}  }
class C{  public OrientedAdapterFactory(){  if (modelPackage == null) {    modelPackage=OrientedPackage.eINSTANCE;  }}  }
class C{  protected List<Coord> parseLineString(String line){  List<Coord> coords=new ArrayList<Coord>();  Scanner lineScan;  Scanner tupleScan;  double x, y;  Coord c;  lineScan=new Scanner(line);  lineScan.useDelimiter(",");  while (lineScan.hasNext()) {    tupleScan=new Scanner(lineScan.next());    x=Double.parseDouble(tupleScan.next());    y=Double.parseDouble(tupleScan.next());    c=new Coord(x,y);    coords.add(c);  }  return coords;}  }
class C{  private void scalarReplace(RegisterOperand use,RegisterOperand[] scalars,Set<Register> visited){  Instruction inst=use.instruction;  RVMType type=vmArray.getElementType();switch (inst.getOpcode()) {case INT_ALOAD_opcode:case LONG_ALOAD_opcode:case FLOAT_ALOAD_opcode:case DOUBLE_ALOAD_opcode:case BYTE_ALOAD_opcode:case UBYTE_ALOAD_opcode:case USHORT_ALOAD_opcode:case SHORT_ALOAD_opcode:case REF_ALOAD_opcode:{      if (ALoad.getIndex(inst).isIntConstant()) {        Operator moveOp=IRTools.getMoveOp(type.getTypeRef());        int index=ALoad.getIndex(inst).asIntConstant().value;        if (index >= 0 && index < size) {          Instruction i2=Move.create(moveOp,ALoad.getClearResult(inst),scalars[index].copyRO());          DefUse.replaceInstructionAndUpdateDU(inst,i2);        } else {          DefUse.removeInstructionAndUpdateDU(inst);        }      } else {        if (VM.BuildForIA32) {          if (size == 0) {            DefUse.removeInstructionAndUpdateDU(inst);          } else           if (size == 1) {            int index=0;            Operator moveOp=IRTools.getMoveOp(type.getTypeRef());            Instruction i2=Move.create(moveOp,ALoad.getClearResult(inst),scalars[index].copyRO());            DefUse.replaceInstructionAndUpdateDU(inst,i2);          } else {            Operator moveOp=IRTools.getCondMoveOp(type.getTypeRef());            Instruction i2=CondMove.create(moveOp,ALoad.getClearResult(inst),ALoad.getClearIndex(inst),IC(0),ConditionOperand.EQUAL(),scalars[0].copyRO(),scalars[1].copyRO());            DefUse.replaceInstructionAndUpdateDU(inst,i2);          }        } else {          if (size == 1) {            int index=0;            Operator moveOp=IRTools.getMoveOp(type.getTypeRef());            Instruction i2=Move.create(moveOp,ALoad.getClearResult(inst),scalars[index].copyRO());            DefUse.replaceInstructionAndUpdateDU(inst,i2);          } else {            DefUse.removeInstructionAndUpdateDU(inst);          }        }      }    }  break;case INT_ASTORE_opcode:case LONG_ASTORE_opcode:case FLOAT_ASTORE_opcode:case DOUBLE_ASTORE_opcode:case BYTE_ASTORE_opcode:case SHORT_ASTORE_opcode:case REF_ASTORE_opcode:{  if (AStore.getIndex(inst).isIntConstant()) {    int index=AStore.getIndex(inst).asIntConstant().value;    if (index >= 0 && index < size) {      Operator moveOp=IRTools.getMoveOp(type.getTypeRef());      Instruction i2=Move.create(moveOp,scalars[index].copyRO(),AStore.getClearValue(inst));      DefUse.replaceInstructionAndUpdateDU(inst,i2);    } else {      DefUse.removeInstructionAndUpdateDU(inst);    }  } else {    if (VM.BuildForIA32) {      if (size == 0) {        DefUse.removeInstructionAndUpdateDU(inst);      } else       if (size == 1) {        int index=0;        Operator moveOp=IRTools.getMoveOp(type.getTypeRef());        Instruction i2=Move.create(moveOp,scalars[index].copyRO(),AStore.getClearValue(inst));        DefUse.replaceInstructionAndUpdateDU(inst,i2);      } else {        Operator moveOp=IRTools.getCondMoveOp(type.getTypeRef());        Operand value=AStore.getClearValue(inst);        Instruction i2=CondMove.create(moveOp,scalars[0].copyRO(),AStore.getIndex(inst),IC(0),ConditionOperand.EQUAL(),value,scalars[0].copyRO());        DefUse.replaceInstructionAndUpdateDU(inst,i2);        Instruction i3=CondMove.create(moveOp,scalars[1].copyRO(),AStore.getIndex(inst),IC(0),ConditionOperand.NOT_EQUAL(),value,scalars[1].copyRO());        i2.insertAfter(i3);        DefUse.updateDUForNewInstruction(i3);      }    } else {      if (size == 1) {        int index=0;        Operator moveOp=IRTools.getMoveOp(type.getTypeRef());        Instruction i2=Move.create(moveOp,scalars[index].copyRO(),AStore.getClearValue(inst));        DefUse.replaceInstructionAndUpdateDU(inst,i2);      } else {        DefUse.removeInstructionAndUpdateDU(inst);      }    }  }}break;case NULL_CHECK_opcode:{Instruction i2=Move.create(GUARD_MOVE,NullCheck.getClearGuardResult(inst),new TrueGuardOperand());DefUse.replaceInstructionAndUpdateDU(inst,i2);}break;case BOUNDS_CHECK_opcode:{Instruction i2=TrapIf.create(TRAP_IF,BoundsCheck.getClearGuardResult(inst),IC(size),BoundsCheck.getClearIndex(inst),ConditionOperand.LOWER_EQUAL(),TrapCodeOperand.ArrayBounds());DefUse.replaceInstructionAndUpdateDU(inst,i2);}break;case CHECKCAST_opcode:case CHECKCAST_NOTNULL_opcode:case CHECKCAST_UNRESOLVED_opcode:{TypeReference lhsType=TypeCheck.getType(inst).getTypeRef();if (ClassLoaderProxy.includesType(lhsType,vmArray.getTypeRef()) == YES) {if (visited == null) {visited=new HashSet<Register>();}Register copy=TypeCheck.getResult(inst).getRegister();if (!visited.contains(copy)) {visited.add(copy);transform2(copy,inst,scalars);} else {DefUse.removeInstructionAndUpdateDU(inst);}} else {Instruction i2=Trap.create(TRAP,null,TrapCodeOperand.CheckCast());DefUse.replaceInstructionAndUpdateDU(inst,i2);}}break;case INSTANCEOF_opcode:case INSTANCEOF_NOTNULL_opcode:case INSTANCEOF_UNRESOLVED_opcode:{TypeReference lhsType=InstanceOf.getType(inst).getTypeRef();Instruction i2;if (ClassLoaderProxy.includesType(lhsType,vmArray.getTypeRef()) == YES) {i2=Move.create(INT_MOVE,InstanceOf.getClearResult(inst),IC(1));} else {i2=Move.create(INT_MOVE,InstanceOf.getClearResult(inst),IC(0));}DefUse.replaceInstructionAndUpdateDU(inst,i2);}break;case GET_OBJ_TIB_opcode:{Instruction i2=Move.create(REF_MOVE,GuardedUnary.getClearResult(inst),new TIBConstantOperand(vmArray));DefUse.replaceInstructionAndUpdateDU(inst,i2);}break;case REF_MOVE_opcode:{if (visited == null) {visited=new HashSet<Register>();}Register copy=Move.getResult(inst).getRegister();if (!visited.contains(copy)) {visited.add(copy);transform2(copy,inst,scalars);} else {DefUse.removeInstructionAndUpdateDU(inst);}}break;default :throw new OptimizingCompilerException("Unexpected instruction: " + inst);}}  }
class C{  public SVGDocumentBridge(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.176 -0400",hash_original_method="EB432720F1C4A1499C3914FA0FDC8415",hash_generated_method="6F28D00E2A0FB0CA84C20828718F5CF9") protected void handleEnd(Collection<T> results) throws IOException {}  }
class C{  protected void broadcast(){  for (  NavigatorListener listener : listeners) {    listener.statusChanged(isOn());  }}  }
class C{  public void release(){  mediaPlayerImpl.release();}  }
class C{  public void list(){  System.out.println("- " + toString());  if (m_sources == null)   return;  for (int i=0; i < m_sources.length; i++)   System.out.println("  - " + m_sources[i].toString());}  }
class C{  public DirectedPathsAction(GraphWorkbench workbench){  super("Directed Paths");  this.workbench=workbench;}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  XMLString s=xstr();  return s.toDouble();}  }
class C{  final public int loadSigned8(int addr){  return loadSigned8(addr,AccessSource.CODE);}  }
class C{  private void cleanAllDescendentsIfCleanBefore(AreaPanelSpaceTimeBox newStBox,AreaPanelSpaceTimeBox parentStBox,int minDepth){  if (status == null || this.stBox != parentStBox)   return;  this.stBox=newStBox;  this.dirtyDescendents--;  if (status == VNStatus.EMPTY) {    return;  }  if (ap().getDepth() != minDepth)   for (  ViewNode child : children) {    if (child == null)     continue;    int oldChildDirtyDescendents=child.dirtyDescendents;    child.cleanAllDescendentsIfCleanBefore(newStBox,parentStBox,minDepth);    dirtyDescendents+=child.dirtyDescendents - oldChildDirtyDescendents;  }}  }
class C{  public int addMultiNewarray(CtClass clazz,int dim){  add(MULTIANEWARRAY);  addIndex(constPool.addClassInfo(clazz));  add(dim);  growStack(1 - dim);  return dim;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isCurrent(char c){  if (!isValidIndex())   return false;  return lcText[pos] == c;}  }
class C{  public void append(StringBuilder buff,String formatting,int[] index,String placeholder) throws ParseException {  boolean inString=index[0] < formatting.length();  char aChar=inString ? formatting.charAt(index[0]) : 0;  if (isLiteral()) {    buff.append(getChar(aChar));    if (getValueContainsLiteralCharacters()) {      if (inString && aChar != getChar(aChar)) {        throw new ParseException("Invalid character: " + aChar,index[0]);      }      index[0]=index[0] + 1;    }  } else   if (index[0] >= formatting.length()) {    if (placeholder != null && index[0] < placeholder.length()) {      buff.append(placeholder.charAt(index[0]));    } else {      buff.append(getPlaceholderCharacter());    }    index[0]=index[0] + 1;  } else   if (isValidCharacter(aChar)) {    buff.append(getChar(aChar));    index[0]=index[0] + 1;  } else {    throw new ParseException("Invalid character: " + aChar,index[0]);  }}  }
class C{  private void updateUI(){  reloadListFragment();}  }
class C{  public ArffTableCellRenderer(){  this(new Color(223,223,223),new Color(192,192,192));}  }
class C{  protected static Span findRootOrServerSpan(String tenantId,Span span,SpanCache spanCache){  while (span != null && !span.serverSpan() && !span.topLevelSpan()) {    span=spanCache.get(tenantId,span.getParentId());  }  return span;}  }
class C{  private Properties readProperties(final String propertiesFilePath) throws IOException {  Properties properties=new Properties();  File propsFile=new File(propertiesFilePath);  FileInputStream fis=null;  if (propsFile.exists()) {    try {      fis=new FileInputStream(propsFile);      properties.load(fis);    }  finally {      if (fis != null) {        fis.close();      }    }  }  return properties;}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  SessionEditorWorkbench workbench=sessionEditor.getSessionWorkbench();  SessionWrapper sessionWrapper=workbench.getSessionWrapper();  TetradMetadata metadata=new TetradMetadata();  File file=new File(Preferences.userRoot().get("fileSaveLocation",Preferences.userRoot().absolutePath()),sessionWrapper.getName());  if (!file.exists() || sessionWrapper.isNewSession()) {    SaveSessionAsAction saveSessionAsAction=new SaveSessionAsAction();    saveSessionAsAction.actionPerformed(e);    this.saved=saveSessionAsAction.isSaved();    return;  }  if (file.exists()) {    int ret=JOptionPane.showConfirmDialog(JOptionUtils.centeringComp(),"File already exists. Overwrite?","Save",JOptionPane.YES_NO_OPTION);    if (ret == JOptionPane.NO_OPTION) {      SaveSessionAsAction saveSessionAsAction=new SaveSessionAsAction();      saveSessionAsAction.actionPerformed(e);      this.saved=saveSessionAsAction.isSaved();      return;    }  }  try {    FileOutputStream out=new FileOutputStream(file);    ObjectOutputStream objOut=new ObjectOutputStream(out);    sessionWrapper.setNewSession(false);    objOut.writeObject(metadata);    objOut.writeObject(sessionWrapper);    out.close();    FileInputStream in=new FileInputStream(file);    ObjectInputStream objIn=new ObjectInputStream(in);    objIn.readObject();  } catch (  Exception e2) {    e2.printStackTrace();    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"An error occurred while attempting to save the session as " + file.getAbsolutePath() + ".");  }  sessionWrapper.setSessionChanged(false);  DesktopController.getInstance().putMetadata(sessionWrapper,metadata);}  }
class C{  @Override public SnmpMibHandler addMib(SnmpMibAgent mib,String contextName,SnmpOid[] oids) throws IllegalArgumentException {  return addMib(mib,oids);}  }
class C{  private void checkRoll(){  if (segments.currentSegment().isFull()) {    segments.currentSegment().flush();    segments.nextSegment();  }}  }
class C{  public boolean method_context_counts(){  return soot.PhaseOptions.getBoolean(options,"method-context-counts");}  }
class C{  public ShiftedVec(Vec base,double shift){  this.base=base;  this.shift=shift;}  }
class C{  public void addResultSet(MariaSelectResultSet result,boolean moreResultAvailable){  this.resultSet=result;  this.insertId.add((long)Statement.SUCCESS_NO_INFO);  this.affectedRows.add(-1);  this.setMoreResultAvailable(moreResultAvailable);}  }
class C{  @Override public List<byte[]> read(long startOffset,long endOffset) throws IOException {  List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks=readDictionaryMetadataFile();  return read(carbonDictionaryColumnMetaChunks,startOffset,endOffset);}  }
class C{  public boolean isSetCursorRequest(){  return this.cursorRequest != null;}  }
class C{  static void runTest() throws Exception {  Class.forName("org.h2.Driver");  Class.forName("org.h2.upgrade.v1_1.Driver");  Driver d1=DriverManager.getDriver("jdbc:h2:mem:test");  Driver d2=DriverManager.getDriver("jdbc:h2v1_1:mem:test");  Connection connection;  connection=DriverManager.getConnection("jdbc:h2:mem:test");  DriverManager.deregisterDriver(d1);  DriverManager.deregisterDriver(d2);  connection.close();  connection=null;}  }
class C{  public static Effect parseEffect(String str){  if (str.contains(" ^ ")) {    List<BasicEffect> effects=new ArrayList<BasicEffect>();    for (    String split : str.split(" \\^ ")) {      Effect subOutput=parseEffect(split);      effects.addAll(subOutput.getSubEffects());    }    return new Effect(effects);  } else {    if (str.contains("Void")) {      return new Effect(new ArrayList<BasicEffect>());    }    String var="";    String val="";    boolean exclusive=true;    boolean negated=false;    if (str.contains(":=")) {      var=str.split(":=")[0];      val=str.split(":=")[1];      val=(val.contains("{}")) ? "None" : val;    } else     if (str.contains("!=")) {      var=str.split("!=")[0];      val=str.split("!=")[1];      negated=true;    } else     if (str.contains("+=")) {      var=str.split("\\+=")[0];      val=str.split("\\+=")[1];      exclusive=false;    }    Template tvar=Template.create(var);    Template tval=Template.create(val);    if (tvar.isUnderspecified() || tval.isUnderspecified()) {      return new Effect(new TemplateEffect(tvar,tval,1,exclusive,negated));    } else {      return new Effect(new BasicEffect(var,ValueFactory.create(val),1,exclusive,negated));    }  }}  }
class C{  private boolean hasDefClearPath(DefUse targetDU,BytecodeInstruction currentVertex,Set<String> handle){  if (!graph.containsVertex(currentVertex))   throw new IllegalArgumentException("vertex not in graph");  handle.add(methodName);  String targetVariable=targetDU.getVariableName();  if (currentVertex.isDefinitionForVariable(targetVariable))   return false;  Set<ControlFlowEdge> outgoingEdges=graph.outgoingEdgesOf(currentVertex);  if (outgoingEdges.size() == 0)   return true;  for (  ControlFlowEdge e : outgoingEdges) {    BytecodeInstruction edgeTarget=graph.getEdgeTarget(e);    if (canBeOverwritingMethod(targetDU,edgeTarget) && !handle.contains(edgeTarget.getCalledMethod()) && canOverwriteDU(targetDU,edgeTarget,handle))     continue;    if (hasDefClearPath(targetDU,edgeTarget,handle))     return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.956 -0500",hash_original_method="0941112ABD9069C80C65289B6D5666C2",hash_generated_method="2B2E591A90F2D66450BD3C85D36EE73D") public static boolean isProfileId(long id){  return id >= Profile.MIN_ID;}  }
class C{  public Builder id(final String id){  this.id=of(id);  return this;}  }
class C{  protected void removeSql(){  sqlThreadLocalStack.pop();}  }
class C{  @Inline @Override public final Address addressRead(ObjectReference ref,Word offset,Word location,int mode){  return Magic.getAddressAtOffset(ref.toObject(),offset.toOffset(),location.toInt());}  }
class C{  public boolean containsAny(Collection<Taxon> taxa){  for (  Taxon taxon : taxa) {    if (taxa.contains(taxon)) {      return true;    }  }  return false;}  }
class C{  public void resetActivation(){  activation=DEFAULT_ACTIVATION;}  }
class C{  private PostgreSQLProjectCallgraphLoader(){}  }
class C{  public void test_setLenientZ(){  DateFormat df=DateFormat.getInstance();  Calendar c=df.getCalendar();  try {    c.setLenient(true);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);    } catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }    c.setLenient(false);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }  } catch (  Exception e) {    fail("Uexpected exception " + e.toString());  }}  }
class C{  public FrenchAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public boolean generateAndSort(final Iterator<? extends T> iterator,final TransformationStrategy<? super T> transform,final long seed){  final int[] d=this.d;  final int[] e=new int[3];  cleanUpIfNecessary();  for (int k=0; k < numEdges; k++) {    bitVectorToEdge(transform.toBitVector(iterator.next()),seed,numVertices,partSize,e);    xorEdge(k,e[0],e[1],e[2],false);    d[e[0]]++;    d[e[1]]++;    d[e[2]]++;  }  if (iterator.hasNext())   throw new IllegalStateException("This " + HypergraphSorter.class.getSimpleName() + " has "+ numEdges+ " edges, but the provided iterator returns more");  return sort();}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  shutdown();}  }
class C{  static double svd_fsign(double a,double b){  if ((a >= 0.0 && b >= 0.0) || (a < 0.0 && b < 0.0))   return a; else   return -a;}  }
class C{  protected void writeMessageOut(ModbusMessage msg) throws ModbusIOException {  try {    int len;synchronized (byteOutputStream) {      clearInput();      byteOutputStream.reset();      msg.setHeadless();      msg.writeTo(byteOutputStream);      len=byteOutputStream.size();      int[] crc=ModbusUtil.calculateCRC(byteOutputStream.getBuffer(),0,len);      byteOutputStream.writeByte(crc[0]);      byteOutputStream.writeByte(crc[1]);      writeBytes(byteOutputStream.getBuffer(),byteOutputStream.size());      logger.debug("Sent: {}",ModbusUtil.toHex(byteOutputStream.getBuffer(),0,byteOutputStream.size()));      if (echo) {        readEcho(len);      }      lastRequest=new byte[len];      System.arraycopy(byteOutputStream.getBuffer(),0,lastRequest,0,len);    }  } catch (  IOException ex) {    throw new ModbusIOException("I/O failed to write");  }}  }
class C{  public void pause() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  pause(null);}  }
class C{  private Bitmap readAndDecompressThumbnail(File file){  try {    if (file.length() > 0) {      FileInputStream instream=new FileInputStream(file);      ReadableByteChannel bytechan=Channels.newChannel(instream);      ByteBuffer buff=ByteBuffer.allocateDirect((int)file.length());      if (buff != null) {        bytechan.read(buff);        instream.close();        buff.rewind();        PDQImage pthumb=DecompressionService.decompressThumbnailImage(buff);        if (pthumb != null) {          Bitmap bm=ConversionService.convertPDQImageToBitmap(pthumb,false);          pthumb.close();          return bm;        }      }    }  } catch (  IOException ex) {    ex.printStackTrace();  }  return null;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Date add(final int days){  return new Date(this.serialNumber + days);}  }
class C{  public InvalidityDateExtension(boolean critical,Date date) throws IOException {  this.extensionId=PKIXExtensions.InvalidityDate_Id;  this.critical=critical;  this.date=date;  encodeThis();}  }
class C{  public void executeASync(ProcessInfo pi){}  }
class C{  public static Drawable byteToDrawable(byte[] b){  return bitmapToDrawable(byteToBitmap(b));}  }
class C{  public SSLSession negotiate(SSLSocketFactory factory) throws IOException {  if (isClosed && sslSocket != null) {    throw new IOException("TLS connection is closed.");  }  if (factory == null) {    factory=getDefaultFactory();  }  if (debug) {    System.out.println("StartTLS: About to start handshake");  }  SSLSession sslSession=startHandshake(factory).getSession();  if (debug) {    System.out.println("StartTLS: Completed handshake");  }  SSLPeerUnverifiedException verifExcep=null;  try {    if (verify(hostname,sslSession)) {      isClosed=false;      return sslSession;    }  } catch (  SSLPeerUnverifiedException e) {    verifExcep=e;  }  if ((verifier != null) && verifier.verify(hostname,sslSession)) {    isClosed=false;    return sslSession;  }  close();  sslSession.invalidate();  if (verifExcep == null) {    verifExcep=new SSLPeerUnverifiedException("hostname of the server '" + hostname + "' does not match the hostname in the "+ "server's certificate.");  }  throw verifExcep;}  }
class C{  public AbstractLocator(){}  }
class C{  private void refreshData(){  if (mLoadJoke != null) {    mLoadJoke.setRefreshing(true);    if (mCurrentType == JOKE_TYPE._CONTENT) {      mJokeData.setAdapter(mJokeContentAdapter);      mJokePresenter.getJokeEntity(mContentPage,PAG_COUNT_NUM);    } else     if (mCurrentType == JOKE_TYPE._IMG) {      mJokeData.setAdapter(mJokeIMGAdapter);      mJokePresenter.getJokeImgEntity(mIMGPage,PAG_COUNT_NUM);    }  }}  }
class C{  public CstInsn(Rop opcode,SourcePosition position,RegisterSpec result,RegisterSpecList sources,Constant cst){  super(opcode,position,result,sources);  if (cst == null) {    throw new NullPointerException("cst == null");  }  this.cst=cst;}  }
class C{  private String findMatchingSuperTypeSignature(IType subType,IType superType) throws JavaModelException {  String[] signatures=getSuperTypeSignatures(subType,superType);  for (int i=0; i < signatures.length; i++) {    String signature=signatures[i];    String qualified=SignatureUtil.qualifySignature(signature,subType);    String subFQN=SignatureUtil.stripSignatureToFQN(qualified);    String superFQN=superType.getFullyQualifiedName();    if (subFQN.equals(superFQN)) {      return signature;    }    if (fLocalTypes.containsValue(subFQN)) {      return signature;    }  }  throw new JavaModelException(new CoreException(new Status(IStatus.ERROR,JavaPlugin.getPluginId(),IStatus.OK,"Illegal hierarchy",null)));}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public CronTrigger(CronTrigger other){  issetBitfield=other.issetBitfield;  this.triggerId=other.triggerId;  if (other.isSetTriggerName()) {    this.triggerName=other.triggerName;  }  this.createTime=other.createTime;  this.operatorId=other.operatorId;  if (other.isSetTriggerType()) {    this.triggerType=other.triggerType;  }  if (other.isSetCronExpression()) {    this.cronExpression=other.cronExpression;  }}  }
class C{  public WebappActivity(){  mWebappInfo=WebappInfo.createEmpty();}  }
class C{  public Second(int second,Minute minute){  ParamChecks.requireInRange(second,"second",Second.FIRST_SECOND_IN_MINUTE,Second.LAST_SECOND_IN_MINUTE);  ParamChecks.nullNotPermitted(minute,"minute");  this.day=minute.getDay();  this.hour=(byte)minute.getHourValue();  this.minute=(byte)minute.getMinute();  this.second=(byte)second;  peg(Calendar.getInstance());}  }
class C{  public void initializeInputLayer(NeuronGroup neuronGroup){  if (inputLayer != null) {    throw new IllegalStateException("The input layer has already" + " been set.");  }  inputLayer=neuronGroup;  numInputs=inputLayer.size();  inputLayer.setLabel("Inputs");  inputLayer.setClamped(true);  addNeuronGroup(neuronGroup);}  }
class C{  public PutObjectResult putObject(URL signedUrl,InputStream requestContent,long contentLength,Map<String,String> requestHeaders,boolean useChunkEncoding) throws OSSException, ClientException {  assertParameterNotNull(signedUrl,"signedUrl");  assertParameterNotNull(requestContent,"requestContent");  if (requestHeaders == null) {    requestHeaders=new HashMap<String,String>();  }  RequestMessage request=new RequestMessage();  request.setMethod(HttpMethod.PUT);  request.setAbsoluteUrl(signedUrl);  request.setUseUrlSignature(true);  request.setContent(requestContent);  request.setContentLength(determineInputStreamLength(requestContent,contentLength,useChunkEncoding));  request.setHeaders(requestHeaders);  request.setUseChunkEncoding(useChunkEncoding);  return doOperation(request,putObjectReponseParser,null,null,true);}  }
class C{  public void testAssertVectorEquals_differentDirections(){  Vector3 v1=new Vector3(0,0,1);  Vector3 v2=new Vector3(0,1,0);  try {    assertVectorEquals(v1,v2,0.0001f,0.0001f);    fail("Vectors should have been found to point in different directions.");  } catch (  junit.framework.AssertionFailedError e) {  }}  }
class C{  public ToStringBuilder append(long value){  style.append(buffer,null,value);  return this;}  }
class C{  public T caseStrictModeRelevant(StrictModeRelevant object){  return null;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override protected void init(){}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  void addChildTab(Tab child){  if (mChildren == null) {    mChildren=new Vector<Tab>();  }  mChildren.add(child);  child.setParent(this);}  }
class C{  public void updateRequestByAddingReplaceVarPair(ParallelTask task,String replaceVarKey,String replaceVarValue){  Map<String,NodeReqResponse> taskResult=task.getParallelTaskResult();  for (  Entry<String,NodeReqResponse> entry : taskResult.entrySet()) {    NodeReqResponse nodeReqResponse=entry.getValue();    nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_PREFIX_REPLACE_VAR + replaceVarKey,replaceVarValue);    nodeReqResponse.getRequestParameters().put(PcConstants.NODE_REQUEST_WILL_EXECUTE,Boolean.toString(true));  }}  }
class C{  static String toLowerCase(String s){  int len=s.length();  StringBuilder sb=null;  for (int i=0; i < len; i++) {    char c=s.charAt(i);    if ((c >= 'a' && c <= 'z') || (c == '.')) {      if (sb != null)       sb.append(c);    } else     if ((c >= '0' && c <= '9') || (c == '-')) {      if (sb != null)       sb.append(c);    } else     if (c >= 'A' && c <= 'Z') {      if (sb == null) {        sb=new StringBuilder(len);        sb.append(s,0,i);      }      sb.append((char)(c - CASE_DIFF));    } else {      throw new IllegalArgumentException("Invalid characters in hostname");    }  }  return sb == null ? s : sb.toString();}  }
class C{  protected MkAppEntry createNewLeafEntry(DBID id,O object,double parentDistance){  return new MkAppLeafEntry(id,parentDistance,null);}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  public Item(String name,String typeId){  if (name != null) {    this.name=name.replaceAll("\\s"," ");  }  if (typeId != null && typeId.length() > 0) {    this.typeId=Integer.valueOf(typeId);  }  itemMap=new TreeMap<Integer,IItem>();}  }
class C{  private void enter(){  if (cctx.deploymentEnabled())   cctx.deploy().onEnter();  try {    cctx.kernalContext().gateway().readLock();  } catch (  IllegalStateException|IgniteClientDisconnectedException e) {    throw e;  }catch (  RuntimeException|Error e) {    cctx.kernalContext().gateway().readUnlock();    throw e;  }}  }
class C{  public boolean isPercentWithholding(){  Object oo=get_Value(COLUMNNAME_IsPercentWithholding);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataappenddatagetdata.class,args);}  }
class C{  @Override public void onData(Client client,ByteBuffer buffer,int bytes){  buffer.flip();  String name;  name=this.buffer.append(new String(buffer.array(),0,bytes)).toString();  if (name.contains(NEWLINE)) {    onUserNameRead(client,name);  }}  }
class C{  private Map<String,TeamExplorerSectionConfig[]> discoverSections(){  final Map<String,List<TeamExplorerSectionConfig>> map;  map=new HashMap<String,List<TeamExplorerSectionConfig>>();  for (  final IConfigurationElement element : getExtensions(SECTION_EXTENSION_POINT_ID)) {    final TeamExplorerSectionConfig section=TeamExplorerSectionConfig.fromConfigurationElement(element);    List<TeamExplorerSectionConfig> sections=map.get(section.getPageID());    if (sections == null) {      sections=new ArrayList<TeamExplorerSectionConfig>();      map.put(section.getPageID(),sections);    }    sections.add(section);  }  final Map<String,TeamExplorerSectionConfig[]> toReturn;  toReturn=new HashMap<String,TeamExplorerSectionConfig[]>();  for (  final String pageID : map.keySet()) {    final List<TeamExplorerSectionConfig> list=map.get(pageID);    final TeamExplorerSectionConfig[] sections=list.toArray(new TeamExplorerSectionConfig[list.size()]);    Arrays.sort(sections,new TeamExplorerOrderedComponentComparator());    toReturn.put(pageID,sections);  }  return toReturn;}  }
class C{  private static void findAnnotations(ClassFile cf,Method m,String name,List<Annotation> annos){  int index=m.attributes.getIndex(cf.constant_pool,name);  if (index != -1) {    Attribute attr=m.attributes.get(index);    assert attr instanceof RuntimeAnnotations_attribute;    RuntimeAnnotations_attribute tAttr=(RuntimeAnnotations_attribute)attr;    for (    Annotation an : tAttr.annotations) {      if (!containsName(annos,an,cf)) {        annos.add(an);      }    }  }}  }
class C{  void sizeChangedInternal(int w,int h){  int oldWidth=getWidth();  int oldHeight=getHeight();  sizeChanged(w,h);  Style formStyle=getStyle();  w=w - (formStyle.getMargin(isRTL(),Component.LEFT) + formStyle.getMargin(isRTL(),Component.RIGHT));  h=h - (formStyle.getMargin(false,Component.TOP) + formStyle.getMargin(false,Component.BOTTOM));  setSize(new Dimension(w,h));  setShouldCalcPreferredSize(true);  doLayout();  focused=getFocused();  if (focused != null) {    Component.setDisableSmoothScrolling(true);    scrollComponentToVisible(focused);    Component.setDisableSmoothScrolling(false);  }  if (oldWidth != w && oldHeight != h) {    if (orientationListener != null) {      orientationListener.fireActionEvent(new ActionEvent(this,ActionEvent.Type.OrientationChange));    }  }  if (sizeChangedListener != null) {    sizeChangedListener.fireActionEvent(new ActionEvent(this,ActionEvent.Type.SizeChange,w,h));  }  repaint();}  }
class C{  public void validate() throws MessageException {  if (!_parameters.hasParameter("preferred_auth_policies")) {    throw new MessageException("preferred_auth_policies is required in a PAPE request.",OpenIDException.PAPE_ERROR);  }  Iterator it=_parameters.getParameters().iterator();  while (it.hasNext()) {    String paramName=((Parameter)it.next()).getKey();    if (!PAPE_FIELDS.contains(paramName) && !paramName.startsWith(PapeMessage.AUTH_LEVEL_NS_PREFIX)) {      throw new MessageException("Invalid parameter name in PAPE request: " + paramName,OpenIDException.PAPE_ERROR);    }  }}  }
class C{  public XMLException(String message,Exception e){  super(message);  exception=e;}  }
class C{  public boolean contains(char c){  return inverse[c] != -1;}  }
class C{  @Override public int hashCode(){  int hash=1;  hash=hash * 31 + this.numerator.hashCode();  hash=hash * 31 + this.denominator.hashCode();  return hash;}  }
class C{  public void testOptimisticMixed() throws Exception {  testTransactionMixed(cache,OPTIMISTIC,KEY_1,wrap(1),KEY_2,1);}  }
class C{  public static GeoTimeSerie fromDNA(String dna){  GeoTimeSerie gts=new GeoTimeSerie(dna.length());  long value=0;  int codepoint;  for (int i=0; i < dna.length(); i++) {    codepoint=dna.codePointAt(i);switch (codepoint) {case 65:case 97:      value=value + 2;    break;case 71:case 103:  value=value + 1;break;case 67:case 99:value=value - 1;break;case 84:case 116:value=value - 2;break;default :;}GTSHelper.setValue(gts,i,value);}return gts;}  }
class C{  public boolean containsPoint(Coordinate p){  for (Iterator it=shellList.iterator(); it.hasNext(); ) {    EdgeRing er=(EdgeRing)it.next();    if (er.containsPoint(p))     return true;  }  return false;}  }
class C{  public String undo(){  String name=getDelegator().getUndo().undo();  getDelegator().dirty();  return name;}  }
class C{  public static <I>Flux<I> firstEmitting(Iterable<? extends Publisher<? extends I>> sources){  return onAssembly(new FluxFirstEmitting<>(sources));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.456 -0500",hash_original_method="F49AF4817F29179E4378A66D59AF945F",hash_generated_method="0BDFB16238344617095C12C55C0809DF") public SipUri parseSIPUrl(String url) throws ParseException {  try {    return new URLParser(url).sipURL(true);  } catch (  ClassCastException ex) {    throw new ParseException(url + " Not a SIP URL ",0);  }}  }
class C{  public void addHubNotificationListener(String memberName,ObjectName objectName){  try {synchronized (listenerObjectMap) {      NotificationHubListener listener=listenerObjectMap.get(objectName);      if (listener == null) {        listener=new NotificationHubListener(objectName);        listener.incNumCounter();        mbeanServer.addNotificationListener(objectName,listener,null,null);        listenerObjectMap.put(objectName,listener);      } else {        listener.incNumCounter();      }    }  } catch (  InstanceNotFoundException e) {    throw new ManagementException(e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TCLASS;}  }
class C{  public boolean isShared(){  return shared;}  }
class C{  protected void onReceiveResult(int resultCode,Bundle resultData){}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  protected DoubleDataStore computeIDs(DBIDs ids,KNNQuery<O> knnQ){  WritableDoubleDataStore intDims=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Intrinsic dimensionality",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double id=0.;    try {      id=estimator.estimate(knnQ,iter,k_c + 1);    } catch (    ArithmeticException e) {      id=0;    }    intDims.putDouble(iter,id);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  return intDims;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public LogMessage(String template,PersistentResource record,String[] expressions,int code,Optional<ChangeSpec> changeSpec) throws InvalidSyntaxException {  this.template=template;  this.record=record;  this.expressions=expressions;  this.operationCode=code;  this.changeSpec=changeSpec;}  }
class C{  private Workflow validateWorkflow(Task task){  if (task.getWorkflow() == null) {    throw APIException.badRequests.noWorkflowAssociatedWithTask(task.getId());  }  Workflow workflow=_dbClient.queryObject(Workflow.class,task.getWorkflow());  if (workflow == null) {    throw APIException.badRequests.noWorkflowAssociatedWithURI(task.getWorkflow());  }  if (workflow.getCompletionState() == null) {    throw APIException.badRequests.workflowCompletionStateNotFound(workflow.getId());  }  WorkflowState state=WorkflowState.valueOf(WorkflowState.class,workflow.getCompletionState());  EnumSet<WorkflowState> expected=EnumSet.of(WorkflowState.SUSPENDED_NO_ERROR,WorkflowState.SUSPENDED_ERROR);  ArgValidator.checkFieldForValueFromEnum(state,"Workflow completion state",expected);  return workflow;}  }
class C{  @Override public boolean equals(final Object other){  if (!(other instanceof IDKey)) {    return false;  }  final IDKey idKey=(IDKey)other;  if (id != idKey.id) {    return false;  }  return value == idKey.value;}  }
class C{  @Override public final boolean parseLine(String line){  return parseLine(pattern,RFC3164_HEADER_TIMESTAMP_GROUP,RFC3164_HEADER_HOSTNAME_GROUP,0,0,MSG_GROUP,line);}  }
class C{  public V remove(K key){  if (key != null) {    CacheEntry<V> entry=entries.remove(key);    if (entry != null) {      return entry.getValue();    }  }  return null;}  }
class C{  public void test_reallocation() throws IOException {  final Properties properties=new Properties(getProperties());  final File tmpfile=File.createTempFile("TestRW",".rw");  properties.setProperty(Options.FILE,tmpfile.getAbsolutePath());  properties.setProperty(Options.CREATE_TEMP_FILE,"false");  Journal store=getStore(properties);  try {    RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    RWStore rw=bufferStrategy.getStore();    long numAllocs=rw.getTotalAllocations();    long startAllocations=rw.getTotalAllocationsSize();    reallocBatch(rw,1000,275,1000);    store.commit();    store.close();    store=new Journal(properties);    bufferStrategy=(RWStrategy)store.getBufferStrategy();    rw=bufferStrategy.getStore();    reallocBatch(rw,1000,100,1000);    store.commit();    store.close();    store=new Journal(properties);    bufferStrategy=(RWStrategy)store.getBufferStrategy();    rw=bufferStrategy.getStore();    reallocBatch(rw,1000,100,1000);    store.commit();    store.close();    store=new Journal(properties);    bufferStrategy=(RWStrategy)store.getBufferStrategy();    rw=bufferStrategy.getStore();    if (log.isInfoEnabled())     log.info("Final allocations: " + (rw.getTotalAllocations() - numAllocs) + ", allocated bytes: "+ (rw.getTotalAllocationsSize() - startAllocations)+ ", file length: "+ rw.getStoreFile().length());  }  finally {    store.destroy();  }}  }
class C{  public void validateAttributes(List<Attribute> expectedAttributes,List<Attribute> actualAttributes){  assertEquals(expectedAttributes.size(),actualAttributes.size());  for (int i=0; i < expectedAttributes.size(); i++) {    Attribute expectedAttribute=expectedAttributes.get(i);    Attribute actualAttribute=actualAttributes.get(i);    assertEquals(expectedAttribute.getName(),actualAttribute.getName());    assertEquals(expectedAttribute.getValue(),actualAttribute.getValue());  }}  }
class C{  public void testUpdateThroughput() throws RepositoryException, IOException {  final ValueFactory vf=om.getValueFactory();  final int transCounter=om.beginNativeTransaction();  final URI name=vf.createURI("attr:/test#name");  final URI ni=vf.createURI("attr:/test#ni");  final URI age=vf.createURI("attr:/test#age");  final URI mob=vf.createURI("attr:/test#mobile");  final URI gender=vf.createURI("attr:/test#mail");  try {    for (int i=0; i < 10000; i++) {      final IGPO tst=om.createGPO();      tst.setValue(name,vf.createLiteral("Test" + i));    }    final long start=System.currentTimeMillis();    final int creates=50000;    for (int i=0; i < creates; i++) {      final IGPO tst=om.createGPO();      tst.setValue(name,vf.createLiteral("Name" + i));      tst.setValue(ni,vf.createLiteral("NI" + i));      tst.setValue(age,vf.createLiteral(i));      tst.setValue(mob,vf.createLiteral("0123-" + i));      tst.setValue(gender,vf.createLiteral(1 % 3 == 0));    }    om.commitNativeTransaction(transCounter);    final long duration=(System.currentTimeMillis() - start);    final long objectsPS=creates * 1000 / duration;    final long statementsPS=objectsPS * 5;    if (log.isInfoEnabled()) {      log.info("Creation rate of " + objectsPS + " objects per second");      log.info("Creation rate of " + statementsPS + " statements per second");    }    assertTrue(statementsPS > 5000);  } catch (  Throwable t) {    om.rollbackNativeTransaction();    throw new RuntimeException(t);  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  public static boolean isCastableTo(String type,Object o,boolean alsoAlias,boolean alsoPattern,int maxlength){  type=StringUtil.toLowerCase(type).trim();  if (type.length() > 2) {    char first=type.charAt(0);switch (first) {case 'a':      if (type.equals("any")) {        return true;      } else       if (type.equals("array")) {        return isCastableToArray(o);      }    break;case 'b':  if (type.equals("boolean") || (alsoAlias && type.equals("bool"))) {    return isCastableToBoolean(o);  } else   if (type.equals("binary")) {    return isCastableToBinary(o,true);  } else   if (alsoAlias && type.equals("bigint")) {    return isCastableToNumeric(o);  } else   if (type.equals("base64")) {    return Caster.toBase64(o,null,null) != null;  }break;case 'c':if (alsoPattern && type.equals("creditcard")) {return Caster.toCreditCard(o,null) != null;}if (alsoPattern && type.equals("char")) {if (maxlength > -1) {String str=Caster.toString(o,null);if (str == null) return false;return str.length() <= maxlength;}return isCastableToString(o);}break;case 'd':if (type.equals("date")) {return isDateAdvanced(o,true);} else if (type.equals("datetime")) {return isDateAdvanced(o,true);} else if (alsoAlias && type.equals("double")) {return isCastableToNumeric(o);} else if (alsoAlias && type.equals("decimal")) {return Caster.toDecimal(o,null) != null;}break;case 'e':if (alsoAlias && type.equals("eurodate")) {return isDateAdvanced(o,true);} else if (alsoPattern && type.equals("email")) {if (maxlength > -1) {String str=Caster.toEmail(o,null);if (str == null) return false;return str.length() <= maxlength;}return Caster.toEmail(o,null) != null;}break;case 'f':if (alsoAlias && type.equals("float")) {return isCastableToNumeric(o);}if (type.equals("function")) {return isFunction(o);}break;case 'g':if (type.equals("guid")) {return isGUId(o);}break;case 'i':if (alsoAlias && (type.equals("integer") || type.equals("int"))) {return isCastableToNumeric(o);}break;case 'l':if (alsoAlias && type.equals("long")) {return isCastableToNumeric(o);}break;case 'n':if (type.equals("numeric")) {return isCastableToNumeric(o);} else if (type.equals("number")) {return isCastableToNumeric(o);}if (alsoAlias) {if (type.equals("node")) return isXML(o); else if (type.equals("nvarchar") || type.equals("nchar")) {if (maxlength > -1) {String str=Caster.toString(o,null);if (str == null) return false;return str.length() <= maxlength;}return isCastableToString(o);}}break;case 'o':if (type.equals("object")) {return true;} else if (alsoAlias && type.equals("other")) {return true;}break;case 'p':if (alsoPattern && type.equals("phone")) {return Caster.toPhone(o,null) != null;}break;case 'q':if (type.equals("query")) {return isQuery(o);}if (type.equals("querycolumn")) return isQueryColumn(o);break;case 's':if (type.equals("string")) {if (maxlength > -1) {String str=Caster.toString(o,null);if (str == null) return false;return str.length() <= maxlength;}return isCastableToString(o);} else if (type.equals("struct")) {return isCastableToStruct(o);} else if (alsoAlias && type.equals("short")) {return isCastableToNumeric(o);} else if (alsoPattern && (type.equals("ssn") || type.equals("social_security_number"))) {return Caster.toSSN(o,null) != null;}break;case 't':if (type.equals("timespan")) {return Caster.toTimespan(o,null) != null;}if (type.equals("time")) {return isDateAdvanced(o,true);}if (alsoPattern && type.equals("telephone")) {return Caster.toPhone(o,null) != null;}if (alsoAlias && type.equals("timestamp")) return isDateAdvanced(o,true);if (alsoAlias && type.equals("text")) {if (maxlength > -1) {String str=Caster.toString(o,null);if (str == null) return false;return str.length() <= maxlength;}return isCastableToString(o);}case 'u':if (type.equals("uuid")) {return isUUId(o);}if (alsoAlias && type.equals("usdate")) {return isDateAdvanced(o,true);}if (alsoPattern && type.equals("url")) {if (maxlength > -1) {String str=Caster.toURL(o,null);if (str == null) return false;return str.length() <= maxlength;}return Caster.toURL(o,null) != null;}if (alsoAlias && type.equals("udf")) {return isFunction(o);}break;case 'v':if (type.equals("variablename")) {return isVariableName(o);} else if (type.equals("void")) {return isVoid(o);} else if (alsoAlias && type.equals("variable_name")) {return isVariableName(o);} else if (alsoAlias && type.equals("variable-name")) {return isVariableName(o);}if (type.equals("varchar")) {if (maxlength > -1) {String str=Caster.toString(o,null);if (str == null) return false;return str.length() <= maxlength;}return isCastableToString(o);}break;case 'x':if (type.equals("xml")) {return isXML(o);}break;case 'z':if (alsoPattern && (type.equals("zip") || type.equals("zipcode"))) {return Caster.toZip(o,null) != null;}break;}}return _isCastableTo(null,type,o);}  }
class C{  public static String valueOf(boolean value){  return value ? "true" : "false";}  }
class C{  protected void tearDown(){}  }
class C{  public void onTick(){  int prevLight=lightLevel;  lightLevel=getLightFromItemStack(player.getCurrentEquippedItem());  for (  ItemStack armor : player.inventory.armorInventory) {    lightLevel=Math.max(lightLevel,getLightFromItemStack(armor));  }  if (prevLight != 0 && lightLevel != prevLight) {    lightLevel=0;  } else {    if (player.isBurning()) {      lightLevel=15;    }  }  if (!enabled && lightLevel > 0) {    enableLight();  } else   if (enabled && lightLevel < 1) {    disableLight();  }}  }
class C{  public static boolean isNonterminal(String token){  return (token.length() >= 3 && token.charAt(0) == '[') && (token.charAt(token.length() - 1) == ']');}  }
class C{  @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk){  dictionaryChunks.add(dictionaryChunk);}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  public Complex multiply(Complex secondComplex){  return new Complex(a * secondComplex.a - b * secondComplex.b,b * secondComplex.a + a * secondComplex.b);}  }
class C{  protected boolean isInJavadoc(){  return fIsInJavadoc;}  }
class C{  public static CatalogEntryRemovedException convertToApi(org.oscm.internal.types.exception.CatalogEntryRemovedException oldEx){  return convertExceptionToApi(oldEx,CatalogEntryRemovedException.class);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void deleteBucket(Bucket bucket){  if (bucket == null) {    return;  }  Map<Object,List<T>> writtens=bucket.getEvents();  if (writtens == null) {    return;  }  for (  Map.Entry<Object,List<T>> e : writtens.entrySet()) {    if (isOuter) {      for (      T event : e.getValue()) {        if (!event.isMatch()) {          unmatchedEvents.add(event);        }      }    }    key2Buckets.get(e.getKey()).remove(bucket.bucketKey);    if (key2Buckets.get(e.getKey()).size() == 0) {      key2Buckets.remove(e.getKey());    }  }}  }
class C{  public static String encodeBase64(String data){  byte[] bytes=null;  try {    bytes=data.getBytes("ISO-8859-1");  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();  }  return encodeBase64(bytes);}  }
class C{  public static final long maxMemory(){  return runtime.maxMemory();}  }
class C{  public InvalidDeltaException(Throwable e){  super(e);}  }
class C{  @Override protected int defaultNumAttributes(){  return 1;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.fillPaint=SerialUtilities.readPaint(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);}  }
class C{  public RoundedColorDrawable(float radius,int color){  this(color);  setRadius(radius);}  }
class C{  @Override public boolean supportsTransactionIsolationLevel(int level) throws SQLException {  debugCodeCall("supportsTransactionIsolationLevel");  if (level == Connection.TRANSACTION_READ_UNCOMMITTED) {    PreparedStatement prep=conn.prepareAutoCloseStatement("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");    prep.setString(1,"MULTI_THREADED");    ResultSet rs=prep.executeQuery();    if (rs.next() && rs.getString(1).equals("1")) {      return false;    }  }  return true;}  }
class C{  public static RecipeManaInfusion registerManaConjurationRecipe(ItemStack output,Object input,int mana){  RecipeManaInfusion recipe=registerManaInfusionRecipe(output,input,mana);  recipe.setCatalyst(RecipeManaInfusion.conjurationState);  return recipe;}  }
class C{  protected static void removeDuplicateProperties(List<InternalEventPropDescriptor> properties){  LinkedHashMap<String,InternalEventPropDescriptor> set=new LinkedHashMap<String,InternalEventPropDescriptor>();  List<InternalEventPropDescriptor> toRemove=new LinkedList<InternalEventPropDescriptor>();  for (  InternalEventPropDescriptor desc : properties) {    if (set.containsKey(desc.getPropertyName())) {      toRemove.add(desc);      continue;    }    set.put(desc.getPropertyName(),desc);  }  for (  InternalEventPropDescriptor desc : toRemove) {    properties.remove(desc);  }}  }
class C{  public static synchronized Image loadImage(URL url){  Image image=null;  image=Toolkit.getDefaultToolkit().getImage(url);  if (image != null) {    s_tracker.addImage(image,0);    try {      s_tracker.waitForAll();    } catch (    InterruptedException e) {      log.severe("Url= " + url + " - "+ e.getMessage());      s_tracker.removeImage(image);      image=null;    } finally {      if (image != null)       s_tracker.removeImage(image);      if (s_tracker.isErrorAny()) {        log.severe("Tracker: " + s_tracker.getErrorsAny()[0]);        image=null;      }      if (image != null) {        if (image.getWidth(null) < 0 || image.getHeight(null) < 0) {          log.severe("Image=0");          image=null;        }      }    }  }  return image;}  }
class C{  public static float pxToSp(Context context,Float px){  float scaledDensity=context.getResources().getDisplayMetrics().scaledDensity;  return px / scaledDensity;}  }
class C{  private static boolean infoExternalStoragePermission(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    Log.i(TAG,"External storage properly mounted");    return true;  } else   if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    Log.i(TAG,"External storage mounted readonly");    return false;  } else {    Log.i(TAG,"External storage not available");    return false;  }}  }
class C{  private static long freeSpaceCalculation(String path){  StatFs stat=new StatFs(path);  long blockSize=stat.getBlockSize();  long availableBlocks=stat.getAvailableBlocks();  return availableBlocks * blockSize / 1024;}  }
class C{  protected static void printPackageArchiveInfo(String packagePath) throws Exception {  Map<?,?> packageProps=getPackageArchiveInfo(packagePath).getPackageMetaData();  printPackageInfo(packageProps);}  }
class C{  public String toString(){  if (m_Parameter_To != null || m_Info_To.length() > 0)   return "ProcessInfoParameter[" + m_ParameterName + "="+ m_Parameter+ (m_Parameter == null ? "" : "{" + m_Parameter.getClass().getName() + "}")+ " ("+ m_Info+ ") - "+ m_Parameter_To+ (m_Parameter_To == null ? "" : "{" + m_Parameter_To.getClass().getName() + "}")+ " ("+ m_Info_To+ ")";  return "ProcessInfoParameter[" + m_ParameterName + "="+ m_Parameter+ (m_Parameter == null ? "" : "{" + m_Parameter.getClass().getName() + "}")+ " ("+ m_Info+ ")";}  }
class C{  public DatasourceArchiveImpl(Archive<?> archive){  super(DatasourceArchive.class,archive);}  }
class C{  @Override public boolean is(Class<? extends Transform<?,?>> transformer){  return steps.stream().anyMatch(null);}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static double cos(double a){  return 0.0d;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.UNIT_FAKE_DEFINITION;}  }
class C{  public HttpResponse removeContactFromGrantedList(ContactId contact) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Remove " + contact + " from granted list");  }  String url="/resource-lists/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/index/~~/resource-lists/list%5B@name=%22rcs%22%5D/entry%5B@uri=%22"+ Uri.encode(PhoneUtils.formatContactIdToUri(contact).toString())+ "%22%5D";  HttpDeleteRequest request=new HttpDeleteRequest(url);  HttpResponse response=sendRequestToXDMS(request);  if (response.isSuccessfullResponse()) {    if (sLogger.isActivated()) {      sLogger.info(contact + " has been removed with success from granted list");    }  } else {    if (sLogger.isActivated()) {      sLogger.info("Can't remove " + contact + " from granted list: "+ response.getResponseCode()+ " error");    }  }  return response;}  }
class C{  @Override public String toString(){  return String.format("%s@%s(%s:%s) STATUS(%s)",getName(),getDataServiceName(),getRole(),getState(),getAlertStatus());}  }
class C{  private void unifyUsernameByEmail(Map<String,List<LogCommitInfo>> usernameMap){  for (  Entry<String,List<LogCommitInfo>> entry : usernameMap.entrySet()) {    List<String> names=getNamesList(entry.getValue());    String newUserName=names.get(0);    if (names.size() > 1)     newUserName=getNewName(names);    for (    LogCommitInfo commit : entry.getValue()) {      commit.setUserName(newUserName);    }  }}  }
class C{  public float eval(float u){  return (((d * u) + c) * u + b) * u + a;}  }
class C{  private int calculatePosition(int spot,int width){  if (spot < BORDER_DRAG_THICKNESS) {    return 0;  }  if (spot < CORNER_DRAG_WIDTH) {    return 1;  }  if (spot >= (width - BORDER_DRAG_THICKNESS)) {    return 4;  }  if (spot >= (width - CORNER_DRAG_WIDTH)) {    return 3;  }  return 2;}  }
class C{  public static void printLibrary(String prefix,CoverageAttributeTable cat){  StringBuffer printedlayers=new StringBuffer();  String printedlayername=null;  if (cat == null) {    System.err.println(prefix + "Library doesn't exist");    return;  }  String[] coverages=cat.getCoverageNames();  if (Debug.debugging("vpf")) {    Debug.output(prefix + "uses " + (cat.isTiledData() ? "tiled" : "untiled")+ " data");  }  for (int i=0; i < coverages.length; i++) {    printedlayername=printCoverageProperties(prefix,cat,coverages[i]);    if (printedlayername != null) {      printedlayers.append(" ").append(printedlayername);    }  }  println("# Summary:" + printedlayers);}  }
class C{  public static void delete(File... filesOrFolder) throws IOException {  for (  File fileOrFolder : filesOrFolder) {    delete(fileOrFolder);  }}  }
class C{  public static String string(int type){  return types.getText(type);}  }
class C{  public static RefreshRequest refreshRequest(String... indices){  return new RefreshRequest(indices);}  }
class C{  public int offset(){  return offset;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (!isClosed()) {      in.close();      buf=null;    }  }}  }
class C{  public FractionAtom(Atom num,Atom den,boolean rule,int numAlign,int denomAlign){  this(num,den,rule);  this.numAlign=checkAlignment(numAlign);  this.denomAlign=checkAlignment(denomAlign);}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x,int length) throws SQLException {  updateBinaryStream(columnLabel,x,(long)length);}  }
class C{  public void onHit(RPEntity target,RPEntity attacker,@SuppressWarnings("unused") int damage){  Status inflictedStatus=(Status)status.clone();  StatusType statusType=inflictedStatus.getStatusType();  String resistAttribute="resist_" + statusType.toString().toLowerCase();  Double actualProbability=probability;  if (target.has(resistAttribute)) {    Double probabilityAdjust=1.0 - target.getDouble(resistAttribute);    if (logger.isDebugEnabled()) {      logger.info("Adjusting " + statusType.toString() + " status infliction resistance: "+ Double.toString(probability)+ " * "+ Double.toString(probabilityAdjust)+ " = "+ Double.toString(probability * probabilityAdjust));    }    actualProbability=probability * probabilityAdjust;  }  if (logger.isDebugEnabled() || Testing.DEBUG) {    if (target.has(resistAttribute)) {      double resistValue=target.getDouble(resistAttribute);      String debugString1=attacker.getName() + " " + inflictedStatus.getName()+ " probability: "+ Double.toString(probability);      String debugString2=target.getName() + statusType.getName() + " resistance: "+ Double.toString(resistValue);      String debugString3="New probability: " + Double.toString(actualProbability) + " ("+ Double.toString(probability)+ " * (1.0 - "+ Double.toString(resistValue)+ "))";      logger.info(debugString1);      logger.info(debugString2);      logger.info(debugString3);      if (target instanceof Player) {        Player player=(Player)target;        player.sendPrivateText(NotificationType.SERVER,debugString1 + "\n" + debugString2+ "\n"+ debugString3);      }    }  }  int roll=Rand.randUniform(1,100);  if (roll <= actualProbability) {    target.getStatusList().inflictStatus(inflictedStatus,attacker);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsInfo[");  buffer.append("m_acsType = ").append(m_acsType);  buffer.append(", m_acsId = ").append(m_acsId);  return buffer.toString();}  }
class C{  @Pure(Enforcement.FORCE) public PersistentList(Collection<K> init){  PersistentList<K> ret=emptyList();  if (init instanceof List) {    ListIterator<K> li=((List<K>)init).listIterator(init.size());    while (li.hasPrevious()) {      K k=li.previous();      Pure4J.immutable(k);      ret=ret.cons(k);    }  } else {    for (    K k : init) {      Pure4J.immutable(k);      ret=ret.cons(k);    }  }  this._count=ret.size();  this._first=ret._first;  this._rest=ret._rest;}  }
class C{  public int calculate(String s){  int lowVal=0;  int highVal=0;  int sign=1;  int priority=0;  int num=0;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (Character.isDigit(c)) {      num=num * 10 + (c - '0');      if (i == s.length() - 1 || !Character.isDigit(s.charAt(i + 1))) {        highVal=(priority == 0 ? num : (priority == 1 ? highVal * num : highVal / num));      }    } else     if (c == '*' || c == '/') {      priority=(c == '*' ? 1 : -1);      num=0;    } else     if (c == '+' || c == '-') {      lowVal+=sign * highVal;      sign=(c == '+' ? 1 : -1);      priority=0;      num=0;    }  }  return lowVal + sign * highVal;}  }
class C{  @Override public int compareTo(Entrant o){  if (place > o.place) {    return 1;  } else   if (place < o.place) {    return -1;  }  return name.compareTo(o.name);}  }
class C{  public void writeByteBufferStart() throws IOException {  throw new UnsupportedOperationException();}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  PurityIntraproceduralAnalysis(UnitGraph g,AbstractInterproceduralAnalysis inter){  super(g);  this.inter=inter;  doAnalysis();}  }
class C{  protected void registerDragPaneAttributes(){  addAttributeProcessor(new AcceptForeignLmlAttribute(),"foreign","acceptForeign");  addAttributeProcessor(new DragPaneListenerLmlAttribute(),"listener");  addAttributeProcessor(new GroupIdLmlAttribute(),"groupId");  addAttributeProcessor(new MaxChildrenLmlAttribute(),"maxChildren");}  }
class C{  public boolean isInterface(){  return _class.isInterface();}  }
class C{  public void deleteOneToOneChats() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteOneToOneChats();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public static Insert newInsert(DatabaseManager manager){  return new InsertImpl(manager);}  }
class C{  public static void main(String argv[]){  if (argv.length == 0) {    System.out.println("Usage : java PTBLexer <inputfile>");  } else {    for (int i=0; i < argv.length; i++) {      PTBLexer scanner=null;      try {        scanner=new PTBLexer(new java.io.FileReader(argv[i]));        while (!scanner.yy_atEOF)         scanner.next();      } catch (      java.io.FileNotFoundException e) {        System.out.println("File not found : \"" + argv[i] + "\"");      }catch (      java.io.IOException e) {        System.out.println("IO error scanning file \"" + argv[i] + "\"");        System.out.println(e);      }catch (      Exception e) {        System.out.println("Unexpected exception:");        e.printStackTrace();      }    }  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowRootElement(prefix,(AbstractDocument)doc);}  }
class C{  public Bundler putAll(Bundle bundle){  this.bundle.putAll(bundle);  return this;}  }
class C{  public boolean isSlpDiscoverySettable(){  return slpDiscoverySettable;}  }
class C{  public DynamicTimeSeriesCollection(int nSeries,int nMoments,RegularTimePeriod timeSample,TimeZone zone){  this.maximumItemCount=nMoments;  this.historyCount=nMoments;  this.seriesKeys=new Comparable[nSeries];  for (int i=0; i < nSeries; i++) {    this.seriesKeys[i]="";  }  this.newestAt=nMoments - 1;  this.valueHistory=new ValueSequence[nSeries];  this.timePeriodClass=timeSample.getClass();  if (this.timePeriodClass == Millisecond.class) {    this.pointsInTime=new Millisecond[nMoments];  } else   if (this.timePeriodClass == Second.class) {    this.pointsInTime=new Second[nMoments];  } else   if (this.timePeriodClass == Minute.class) {    this.pointsInTime=new Minute[nMoments];  } else   if (this.timePeriodClass == Hour.class) {    this.pointsInTime=new Hour[nMoments];  }  this.workingCalendar=Calendar.getInstance(zone);  this.position=START;  this.domainIsPointsInTime=true;}  }
class C{  public void testSendWithDelayAndLoss(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setDelay(50);  test.setLoss(10);  test.doTestTransfer(100000);}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME:    return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void send(String sql,byte commandType) throws IOException, QueryException {  startPacket(0,true);  int charsLength=sql.length();  int charsOffset=0;  int position=4;  assureBufferCapacity((charsLength * 3) + 1);  byte[] arr=buffer.array();  arr[position++]=commandType;  while (charsOffset < charsLength) {    char currChar=sql.charAt(charsOffset++);    if (currChar < 0x80) {      arr[position++]=(byte)currChar;    } else     if (currChar < 0x800) {      arr[position++]=(byte)(0xc0 | (currChar >> 6));      arr[position++]=(byte)(0x80 | (currChar & 0x3f));    } else     if (currChar >= 0xD800 && currChar < 0xE000) {      if (currChar >= 0xD800 && currChar < 0xDC00) {        if (charsOffset + 1 > charsLength) {          arr[position++]=(byte)0x63;        } else {          char nextChar=sql.charAt(charsOffset);          if (nextChar >= 0xDC00 && nextChar < 0xE000) {            int surrogatePairs=((currChar << 10) + nextChar) + (0x010000 - (0xD800 << 10) - 0xDC00);            arr[position++]=(byte)(0xf0 | ((surrogatePairs >> 18)));            arr[position++]=(byte)(0x80 | ((surrogatePairs >> 12) & 0x3f));            arr[position++]=(byte)(0x80 | ((surrogatePairs >> 6) & 0x3f));            arr[position++]=(byte)(0x80 | (surrogatePairs & 0x3f));            charsOffset++;          } else {            arr[position++]=(byte)0x63;          }        }      } else {        arr[position++]=(byte)0x63;      }    } else {      arr[position++]=(byte)(0xe0 | ((currChar >> 12)));      arr[position++]=(byte)(0x80 | ((currChar >> 6) & 0x3f));      arr[position++]=(byte)(0x80 | (currChar & 0x3f));    }  }  if (position - 4 < maxPacketSize && !useCompression) {    arr[0]=(byte)((position - 4) & 0xff);    arr[1]=(byte)((position - 4) >>> 8);    arr[2]=(byte)((position - 4) >>> 16);    arr[3]=(byte)0;    if (logger.isTraceEnabled()) {      logger.trace("send packet seq:" + seqNo + " length:"+ (position - 4)+ " data:"+ Utils.hexdump(arr,maxQuerySizeToLog,4,position - 4));    }    outputStream.write(arr,0,position);  } else {    sendDirect(arr,5,position - 5,commandType);  }}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  public static void loadOptimizerDetail(){  File f=getOptimizeFile();  coverFlowModeSame=false;  generatedDate=0;  if (currentProfile.getDisableOptimizer()) {    logger.info(Localization.Main.getText("optimizer.disabled"));  } else {    if (!f.getParentFile().exists()) {      logger.info(Localization.Main.getText("optimizer.catalogNotFound",f.getParentFile()));    } else {      if (!f.exists()) {        logger.info(Localization.Main.getText("optimizer.fileNotFound",f));      } else {        try {          generatedConfig=new ConfigurationHolder(getOptimizeFile());          generatedConfig.load();          logger.info(Localization.Main.getText("optimizer.loadedFile",f));          generatedDate=Long.parseLong(generatedConfig.getSecurityCode());          SimpleDateFormat sdf=new SimpleDateFormat("dd MMM yyyy-HH:mm");          logger.info(Localization.Main.getText("optimizer.previousCatalogOn",sdf.format(generatedDate)));          boolean oldCoverFlowMode=generatedConfig.getBrowseByCover();          boolean newCoverFlowMode=currentProfile.getBrowseByCover();          coverFlowModeSame=(oldCoverFlowMode == newCoverFlowMode);          if (!coverFlowModeSame) {            logger.info(Localization.Main.getText("optimizer.coverFlowChanged"));          }          deleteoptimizerFile();        } catch (        Exception e) {          logger.info(Localization.Main.getText("optimizer.fileNotLoaded"),f);        }      }    }  }  deleteoptimizerFile();}  }
class C{  public StatelessPartitioner(){}  }
class C{  public boolean isSourcesModifiedSinceLastPublication(){  return sourcesModifiedSinceLastPublication;}  }
class C{  private String append(String path,boolean create,String text) throws Exception {  try (IgfsOutputStream out=igfs.append(path(path),create)){    IOUtils.write(text,out,UTF_8);  }   assertNotNull(igfs.info(path(path)));  return read(path);}  }
class C{  @Override public boolean isValidateRoot(){  return true;}  }
class C{  public static double uniform(double a,double b){  return a + uniform() * (b - a);}  }
class C{  public synchronized void validate() throws RuntimeException {  if (head == null) {    if (tail != null)     bug("Head is null but tail is set"); else     if (array.size() != 0)     bug("Array is size > 0 when head and tail are empty");  } else {    if (tail == null)     bug("Head is set but not tail"); else     if (head.before != null)     bug("Head position points to previous position: " + head.after); else     if (tail.after != null)     bug("Tail position points to following position: " + tail.after); else {      ThreadPosition tp=head;      int linkedSize;      for (linkedSize=1; linkedSize < array.size(); linkedSize++) {        if (tp.after == null)         break; else         tp=tp.after;      }      if (linkedSize != array.size())       bug("Linked size is different from array size: linked=" + linkedSize + " array="+ array.size());      if (tp != tail)       bug("Last item in list is not the tail: last=[" + tp + "] tail=["+ tail+ "]");    }  }}  }
class C{  public static boolean supported(){  return engine != null;}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public T caseSimpleQuantifier(SimpleQuantifier object){  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:32.602 -0500",hash_original_method="3F81F4D6513F732B569C05DC90B32139",hash_generated_method="C8E2544D3D4A91601DCA092D1A682824") static GsmDataConnection makeDataConnection(PhoneBase phone,int id,RetryManager rm){synchronized (mCountLock) {    mCount+=1;  }  GsmDataConnection gsmDc=new GsmDataConnection(phone,"GsmDC-" + mCount,id,rm);  gsmDc.start();  if (DBG)   gsmDc.log("Made " + gsmDc.getName());  return gsmDc;}  }
class C{  public static boolean doShowDeodexAlert(){  return showDeodexAlert == 1;}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  super(false,httpPort,httpsPort);}  }
class C{  public static String decapitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  int offset1=Character.offsetByCodePoints(name,0,1);  if (offset1 < name.length() && Character.isUpperCase(name.codePointAt(offset1)))   return name;  return name.substring(0,offset1).toLowerCase() + name.substring(offset1);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void enableCarMode(int flags){  if (mService != null) {    try {      mService.enableCarMode(flags);    } catch (    RemoteException e) {      Log.e(TAG,"disableCarMode: RemoteException",e);    }  }}  }
class C{  @Override @Nullable protected Object extractParameter(@Nullable String cacheName,String typeName,TypeKind typeKind,String fldName,Object obj) throws CacheException {switch (typeKind) {case BUILT_IN:    return obj;case POJO:  return extractPojoParameter(cacheName,typeName,fldName,obj);default :return extractBinaryParameter(fldName,obj);}}  }
class C{  public SerialException(){}  }
class C{  void sparqlUpdateResults(final ConnectOptions opts,final UUID queryId,final IPreparedQueryListener listener) throws Exception {  JettyResponseListener response=null;  try {    response=doConnect(opts);    checkResponseCode(response);  }  finally {    if (response == null) {      try {        cancel(queryId);      } catch (      Exception ex) {        log.warn(ex);      }    } else {    }    if (listener != null) {      listener.closed(queryId);    }  }}  }
class C{  public synchronized void init() throws JMSException {  if (LOGGER.isDebugEnabled())   LOGGER.logInfo(this + ": init...");  if (connectionPool != null)   return;  if (maxPoolSize < 1)   throwAtomikosJMSException("Property 'maxPoolSize' of class AtomikosConnectionFactoryBean must be greater than 0, was: " + maxPoolSize);  if (minPoolSize < 0 || minPoolSize > maxPoolSize)   throwAtomikosJMSException("Property 'minPoolSize' of class AtomikosConnectionFactoryBean must be at least 0 and at most maxPoolSize, was: " + minPoolSize);  if (getUniqueResourceName() == null)   throwAtomikosJMSException("Property 'uniqueResourceName' of class AtomikosConnectionFactoryBean cannot be null.");  try {    getReference();    ConnectionFactory cf=doInit();    connectionPool=new ConnectionPool(cf,this);  } catch (  AtomikosJMSException e) {    throw e;  }catch (  Exception ex) {    throwAtomikosJMSException("Cannot initialize AtomikosConnectionFactoryBean",ex);  }  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(this + ": init done.");}  }
class C{  boolean inOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));}  }
class C{  public INode contains(INode n){  return hash.contains(n);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public void write(MAVLinkMessage msg) throws IOException {  channel.write(msg.encode(txSeq++));}  }
class C{  private LineString readLine(OraGeom oraGeom,int elemIndex){  int etype=oraGeom.eType(elemIndex);  int interpretation=oraGeom.interpretation(elemIndex);  checkOrdinates(oraGeom,elemIndex,"LineString");  checkETYPE(etype,OraGeom.ETYPE.LINE,"LineString");  checkInterpretation(interpretation,OraGeom.INTERP.LINESTRING,"LineString");  LineString line=geometryFactory.createLineString(extractCoords(oraGeom,elemIndex));  return line;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entText;  EntityReference entReference;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  appendedChild=genderNode.appendChild(entReference);  entText=entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      ((CharacterData)entText).appendData("newString");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void initialize(String key,String salt) throws IllegalArgumentException, NoSuchAlgorithmException {  if (!isValidArgKey(key)) {    throw new IllegalArgumentException(INIT_ILLEGAL_ARG_KEY);  } else {    this.key=key;  }  if (!isValidArg(salt)) {    throw new IllegalArgumentException(INIT_ILLEGAL_ARG_SALT);  } else {    this.salt=hexStringToByteArray(salt);  }  this.iv=new byte[16];  secureRandom=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);  ivParameterSpec=new IvParameterSpec(this.iv);}  }
class C{  public final void append(final CharSequence text){  getView().append(text);}  }
class C{  @Override public boolean input(Instance instance){  Instance newInstance;  double[] values;  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  values=instance.toDoubleArray();  if (!instance.isMissing(m_AttIndex.getIndex())) {    values[m_AttIndex.getIndex()]=m_SortedIndices[(int)values[m_AttIndex.getIndex()]];  }  newInstance=new DenseInstance(instance.weight(),values);  copyValues(instance,false,instance.dataset(),getOutputFormat());  push(newInstance);  return true;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  @Override protected void trackException(JoinPoint jp,Throwable throwable){  List<String> labels=getLabels(throwable);  for (  String label : labels) {    statsdClient.incrementCounter(Utils.formatExceptionForToolsWithLimitedCharacterSet(label));  }}  }
class C{  @Override public boolean unload(Entity unit){  boolean retval=false;  double unloadWeight=0;  if (unit != null) {    unloadWeight=troops.get(unit.getId());  }  if (troops.remove(unit.getId()) != null) {    retval=true;    currentSpace+=unloadWeight;  }  return retval;}  }
class C{  public int hashCode(){  return 1;}  }
class C{  public void onLongClick(View widget){  if (link.getLongClickListener() != null) {    link.getLongClickListener().onLongClick(link.getText());  }  super.onLongClick(widget);}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  @SuppressWarnings("unchecked") public static List<String> parseGetBucketReplicationLocation(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    List<String> locationList=new ArrayList<String>();    List<Element> locElements=root.getChildren("Location");    for (    Element locElem : locElements) {      locationList.add(locElem.getText());    }    return locationList;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public ChunkedOutputStream(final SessionOutputBuffer out) throws IOException {  this(out,2048);}  }
class C{  HGNode addHyperEdgeInCell(ComputeNodeResult result,Rule rule,int i,int j,List<HGNode> ants,SourcePath srcPath,boolean noPrune){  List<DPState> dpStates=result.getDPStates();  float pruningEstimate=result.getPruningEstimate();  float transitionLogP=result.getTransitionCost();  float finalizedTotalLogP=result.getViterbiCost();  HyperEdge hyperEdge=new HyperEdge(rule,finalizedTotalLogP,transitionLogP,ants,srcPath);  HGNode newNode=new HGNode(i,j,rule.getLHS(),dpStates,hyperEdge,pruningEstimate);  HGNode oldNode=this.nodesSigTbl.get(newNode.signature());  if (null != oldNode) {    this.chart.nMerged++;    if (newNode.getScore() > oldNode.getScore()) {      newNode.addHyperedgesInNode(oldNode.hyperedges);      addNewNode(newNode);    } else {      oldNode.addHyperedgesInNode(newNode.hyperedges);    }  } else {    this.chart.nAdded++;    addNewNode(newNode);  }  return newNode;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private GuiBase(){}  }
class C{  public List<Intent> intents(){  return intents;}  }
class C{  public boolean isClosed(){  return m_state.isClosed();}  }
class C{  private void appendOutput(final String string){  outputArea.setText(outputArea.getText() + string + "\n");  outputArea.setCaretPosition(outputArea.getDocument().getLength());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  initOutfits();  buildBoutiqueArea(zone);}  }
class C{  public TvShowUpdateDatasourceTask2(List<Path> tvShowFolders){  super(BUNDLE.getString("update.datasource"));  tvShowList=TvShowList.getInstance();  dataSources=new ArrayList<>(0);  this.tvShowFolders.addAll(tvShowFolders);}  }
class C{  public static void startAppByPackageName(final Context context,String packageName,Boolean isClickAction,Boolean isStartupAction,Boolean isClearPreviousInstancesForced){  try {    stopWatchThread();synchronized (mSyncObj) {      if (packageName != null && !packageName.equals("")) {        final Intent launchIntent=InstalledAppsAdapter.getLaunchableIntentByPackageName(context,packageName);        if (isStartupAction || isClearPreviousInstancesForced) {          Log.d(AppStarter.class.getName(),"Using FLAG_ACTIVITY_CLEAR_TASK: isStartupAction=" + isStartupAction.toString() + ", isClearPreviousInstancesForced="+ isClearPreviousInstancesForced.toString());          launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);          launchIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);        }        Log.d(AppStarter.class.getName(),"Starting launcher activity of package: " + packageName);        context.startActivity(launchIntent);      }    }  } catch (  Exception e) {    StringWriter errors=new StringWriter();    e.printStackTrace(new PrintWriter(errors));    String errorReason=errors.toString();    Log.d(AppStarter.class.getName(),"Failed to launch activity: \n" + errorReason);  }}  }
class C{  public void loadDictionaryAsync(){}  }
class C{  public TransformerException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  setEnabled(false);  try {    DeleteSendingAddressConfirmDialog deleteSendingAddressConfirmDialog=new DeleteSendingAddressConfirmDialog(super.bitcoinController,mainFrame,sendBitcoinPanel);    deleteSendingAddressConfirmDialog.setVisible(true);  }  finally {    setEnabled(true);    mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }}  }
class C{  public Query query(final String query){  setQuery(query);  return this;}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes * 8;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public void reportException(Exception status) throws RemoteException {synchronized (AppleUserImpl.class) {    this.status=status;    AppleUserImpl.class.notifyAll();  }}  }
class C{  private boolean resourceIsProject(IResource resource){  return resource != null && resource.getType() == IResource.PROJECT;}  }
class C{  public ProjectResource parse(String id) throws UnprocessableEntityException, IOException {  ProjectResource rsrc=_parse(id);  if (rsrc == null) {    throw new UnprocessableEntityException(String.format("Project Not Found: %s",id));  }  return rsrc;}  }
class C{  public static String evaluateTemplate(Template template,ICompilationUnit compilationUnit,int position) throws CoreException, BadLocationException, TemplateException {  TemplateContextType contextType=JavaPlugin.getDefault().getTemplateContextRegistry().getContextType(template.getContextTypeId());  if (!(contextType instanceof CompilationUnitContextType))   throw new CoreException(new Status(IStatus.ERROR,JavaPlugin.ID_PLUGIN,IStatus.ERROR,JavaTemplateMessages.JavaContext_error_message,null));  IDocument document=new Document();  if (compilationUnit != null && compilationUnit.exists())   document.set(compilationUnit.getSource());  CompilationUnitContext context=((CompilationUnitContextType)contextType).createContext(document,position,0,compilationUnit);  context.setForceEvaluation(true);  TemplateBuffer buffer=context.evaluate(template);  if (buffer == null)   return null;  return buffer.getString();}  }
class C{  public MultivariateDistribution queryProb(Collection<String> variables){  if (!getNodeIds().containsAll(variables)) {    log.warning(variables + " not contained in " + getNodeIds());  }  try {    return new SwitchingAlgorithm().queryProb(this,variables,evidence);  } catch (  Exception e) {    log.warning("cannot perform inference: " + e);    e.printStackTrace();    return new MultivariateTable(Assignment.createDefault());  }}  }
class C{  public synchronized final void incrementSecondaryProgressBy(int diff){  setSecondaryProgress(mSecondaryProgress + diff);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Minimal360PhotoMain main=new Minimal360PhotoMain();  setMain(main,"gvr.xml");}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void showData(int position,String itemData){  mImageView.loadImage(mImageLoader,itemData);}  }
class C{  public void close(Result<Boolean> result){  closeImpl();  result.ok(true);}  }
class C{  public static String readData(InputStream inputStream) throws IOException {  ByteArrayOutputStream buffer=null;  try {    buffer=new ByteArrayOutputStream();    int bytesRead;    byte[] bytes=new byte[BUFFER_SIZE];    while ((bytesRead=inputStream.read(bytes,0,bytes.length)) != -1) {      buffer.write(bytes,0,bytesRead);    }    buffer.flush();  }  finally {    ResourceHelper.closeResource(buffer);  }  return buffer.toString("UTF-8").trim();}  }
class C{  public Binh3(){  super(2,3);}  }
class C{  private void initTransactionConfiguration(){  String maxRetransmissionsStr=System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  if (maxRetransmissionsStr != null && maxRetransmissionsStr.trim().length() > 0) {    try {      maxRetransmissions=Integer.parseInt(maxRetransmissionsStr);    } catch (    NumberFormatException e) {      logger.log(Level.FINE,"Failed to parse MAX_RETRANSMISSIONS",e);      maxRetransmissions=DEFAULT_MAX_RETRANSMISSIONS;    }  }  String originalWaitIntervalStr=System.getProperty(StackProperties.FIRST_CTRAN_RETRANS_AFTER);  if (originalWaitIntervalStr != null && originalWaitIntervalStr.trim().length() > 0) {    try {      originalWaitInterval=Integer.parseInt(originalWaitIntervalStr);    } catch (    NumberFormatException e) {      logger.log(Level.FINE,"Failed to parse ORIGINAL_WAIT_INTERVAL",e);      originalWaitInterval=DEFAULT_ORIGINAL_WAIT_INTERVAL;    }  }  String maxWaitIntervalStr=System.getProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER);  if (maxWaitIntervalStr != null && maxWaitIntervalStr.trim().length() > 0) {    try {      maxWaitInterval=Integer.parseInt(maxWaitIntervalStr);    } catch (    NumberFormatException e) {      logger.log(Level.FINE,"Failed to parse MAX_WAIT_INTERVAL",e);      maxWaitInterval=DEFAULT_MAX_WAIT_INTERVAL;    }  }}  }
class C{  InputStream readChannel(int channel) throws IOException {  while (!isClosed) {    if (inputReady[channel]) {      inputReady[channel]=false;      return is;    }    boolean canRead=false;synchronized (READ_LOCK) {      if (!isReadLocked) {        isReadLocked=true;        canRead=true;      } else {        try {          READ_LOCK.wait(5000);        } catch (        Exception e) {        }      }    }    if (canRead) {      try {        readData();      } catch (      IOException e) {        close();      }    }  }  return null;}  }
class C{  public void deselectAll(){  TestLogging.logWebStep("deselect all options on " + toHTML(),false);  findElement();  if (!isMultiple()) {    throw new UnsupportedOperationException("You may only deselect all options of a multi-select");  }  for (  WebElement option : options) {    if (option.isSelected()) {      option.click();    }  }}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  if (WindowsMenuItemUI.isVistaPainting()) {    WindowsMenuItemUI.paintText(accessor,g,menuItem,textRect,text);    return;  }  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  if (model.isEnabled() && model.isArmed()) {    g.setColor(selectionForeground);  }  WindowsGraphicsUtils.paintText(g,menuItem,textRect,text,0);  g.setColor(oldColor);}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  private OMLine createPlotLine(int x1,int y1,int x2,int y2,Paint color){  OMLine line=new OMLine(x1,y1,x2,y2);  line.setLinePaint(color);  line.setSelectPaint(Color.white);  return line;}  }
class C{  private void addEndpoints(HashMap<String,String> endpoints){  if (getEndpointsMap() == null) {    setEndpointsMap(new StringMap());  }  getEndpointsMap().putAll(endpoints);  setChanged("endpoints");}  }
class C{  public int size(){  return map.size();}  }
class C{  private void deleteOldIntermediatePath(final Session session,Node oldIntermediateNode) throws RepositoryException, PathNotFoundException, VersionException, LockException, ConstraintViolationException, AccessDeniedException {  while (!StringUtils.equals(PATH_HOME_GROUPS,oldIntermediateNode.getPath()) && !StringUtils.equals(PATH_HOME_USERS,oldIntermediateNode.getPath()) && !oldIntermediateNode.hasNodes()) {    Node parent=oldIntermediateNode.getParent();    session.removeItem(oldIntermediateNode.getPath());    oldIntermediateNode=parent;  }}  }
class C{  public static void checkSnappy() throws Throwable {  try {    byte[] expBytes=new byte[BYTE_SIZE];    byte[] actualBytes=new byte[BYTE_SIZE];    for (int i=0; i < expBytes.length; i++)     expBytes[i]=(byte)ThreadLocalRandom.current().nextInt(16);    SnappyCodec codec=new SnappyCodec();    codec.setConf(new Configuration());    ByteArrayOutputStream baos=new ByteArrayOutputStream();    try (CompressionOutputStream cos=codec.createOutputStream(baos)){      cos.write(expBytes);      cos.flush();    }     try (CompressionInputStream cis=codec.createInputStream(new ByteArrayInputStream(baos.toByteArray()))){      int read=cis.read(actualBytes,0,actualBytes.length);      assert read == actualBytes.length;    }     assert Arrays.equals(expBytes,actualBytes);  } catch (  Throwable e) {    System.out.println("Snappy check failed:");    System.out.println("### NativeCodeLoader.isNativeCodeLoaded:  " + NativeCodeLoader.isNativeCodeLoaded());    System.out.println("### SnappyCompressor.isNativeCodeLoaded:  " + SnappyCompressor.isNativeCodeLoaded());    throw e;  }}  }
class C{  private void interpretInstruction(final ReilInstruction instruction,final String programCounter){  final Integer mnemonic=instruction.getMnemonicCode();switch (mnemonic) {case ReilHelpers._OPCODE_ADD:    interpretAdd(instruction);  break;case ReilHelpers._OPCODE_AND:interpretAnd(instruction);break;case ReilHelpers._OPCODE_BISZ:interpretBisz(instruction);break;case ReilHelpers._OPCODE_BSH:interpretBsh(instruction);break;case ReilHelpers._OPCODE_DIV:interpretDiv(instruction);break;case ReilHelpers._OPCODE_JCC:interpretJcc(instruction,programCounter);break;case ReilHelpers._OPCODE_LDM:interpretLdm(instruction);break;case ReilHelpers._OPCODE_MOD:interpretMod(instruction);break;case ReilHelpers._OPCODE_MUL:interpretMul(instruction);break;case ReilHelpers._OPCODE_NOP:break;case ReilHelpers._OPCODE_OR:interpretOr(instruction);break;case ReilHelpers._OPCODE_STM:interpretStm(instruction);break;case ReilHelpers._OPCODE_STR:interpretStr(instruction);break;case ReilHelpers._OPCODE_SUB:interpretSub(instruction);break;case ReilHelpers._OPCODE_UNDEF:interpretUndef(instruction);break;case ReilHelpers._OPCODE_UNKNOWN:break;case ReilHelpers._OPCODE_XOR:interpretXor(instruction);break;default :throw new IllegalArgumentException("invalid Mnemonic in REIL interpreting loop");}}  }
class C{  private void paintCanvas(final PaintEvent e){  final Rectangle clientArea=((Canvas)e.widget).getClientArea();  final GC gc=e.gc;  gc.setBackground(this.panel.getDisplay().getSystemColor(SWT.COLOR_BLACK));  gc.fillRectangle(clientArea);}  }
class C{  private void refreshVariables(){  clear();  for (int i=0; i < mVariableNameManager.size(); i++) {    add(mVariableNameManager.get(i));  }  notifyDataSetChanged();}  }
class C{  public boolean hasSummary(){  return hasExtension(Summary.class);}  }
class C{  public void removeMessage(Message m){  m.killMessage();  queueSize--;}  }
class C{  private String[] split(Matcher m,int limit){  int matchCount=0;  int arraySize=0;  int last=0;  while (m.find()) {    matchCount++;    if (limit != 0 || last < m.start()) {      arraySize=matchCount;    }    last=m.end();  }  if (last < m.inputLength() || limit != 0) {    matchCount++;    arraySize=matchCount;  }  int trunc=0;  if (limit > 0 && arraySize > limit) {    arraySize=limit;    trunc=1;  }  String[] array=new String[arraySize];  int i=0;  last=0;  m.reset();  while (m.find() && i < arraySize - trunc) {    array[i++]=m.substring(last,m.start());    last=m.end();  }  if (i < arraySize) {    array[i]=m.substring(last,m.inputLength());  }  return array;}  }
class C{  public EventTimeInputBuilder<T> emit(T record,long timeStamp){  if (timeStamp < 0) {    throw new IllegalArgumentException("negative timestamp: " + timeStamp);  }  if (record == null) {    throw new IllegalArgumentException("Elem has to be not null!");  }  add(new StreamRecord<T>(record,timeStamp));  return this;}  }
class C{  public char next(){  if (pos < end - 1) {    pos++;    return text.charAt(pos);  } else {    pos=end;    return DONE;  }}  }
class C{  public static <S,E>StateMachineTestPlanBuilder<S,E> builder(){  return new StateMachineTestPlanBuilder<S,E>();}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  public void init(){  initialize();}  }
class C{  public static StyledString markLTR(StyledString styledString,String delimiters){  if (!USE_TEXT_PROCESSOR)   return styledString;  String inputString=styledString.getString();  String string=TextProcessor.process(inputString,delimiters);  if (string != inputString)   insertMarks(styledString,inputString,string);  return styledString;}  }
class C{  private void flushBlock(boolean isClose) throws IOException {  if (isClose) {    if (!_isLargeBlob && _offset <= _table.getInlineBlobMax()) {      return;    }  }  _isLargeBlob=true;  if (_blobOut == null) {    _blobOut=_table.getTempStore().openWriter();  }  if (_offset != _bufferEnd && !isClose) {    throw new IllegalStateException();  }  _blobOut.write(_tempBuffer.buffer(),0,_offset);  _offset=0;  if (!isClose) {    return;  }  StreamSource ss=_blobOut.getStreamSource();  _blobOut=null;  int len=(int)ss.getLength();  int blobPageSizeMax=_table.getBlobPageSizeMax();  int pid=-1;  int nextPid=-1;  int tailLen=len % blobPageSizeMax;  PageServiceSync tableService=_table.getTableService();  if (tailLen > 0) {    int tailOffset=len - tailLen;    pid=tableService.writeBlob(pid,ss.openChild(),tailOffset,tailLen);    len-=tailLen;  }  while (len > 0) {    int sublen=blobPageSizeMax;    int offset=len - blobPageSizeMax;    pid=tableService.writeBlob(pid,ss.openChild(),offset,sublen);    len-=sublen;  }  ss.close();  _blobId=Math.max(pid,0);}  }
class C{  @Override public void destroy(){  if (manager != null) {    manager.stop();  }}  }
class C{  public boolean isAttribute(){  return ((m_Flags & ATTRIBUTE) == ATTRIBUTE);}  }
class C{  @Override public void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession session=request.getSession();  String filename=request.getParameter("filename");  if (filename == null) {    throw new ServletException("Parameter 'filename' must be supplied");  }  filename=ServletUtilities.searchReplace(filename,"..","");  File file=new File(System.getProperty("java.io.tmpdir"),filename);  if (!file.exists()) {    throw new ServletException("Unable to display the chart with the filename '" + filename + "'.");  }  boolean isChartInUserList=false;  ChartDeleter chartDeleter=(ChartDeleter)session.getAttribute("JFreeChart_Deleter");  if (chartDeleter != null) {    isChartInUserList=chartDeleter.isChartAvailable(filename);  }  boolean isChartPublic=false;  if (filename.length() >= 6) {    if (filename.substring(0,6).equals("public")) {      isChartPublic=true;    }  }  boolean isOneTimeChart=false;  if (filename.startsWith(ServletUtilities.getTempOneTimeFilePrefix())) {    isOneTimeChart=true;  }  if (isChartInUserList || isChartPublic || isOneTimeChart) {    ServletUtilities.sendTempFile(file,response);    if (isOneTimeChart) {      file.delete();    }  } else {    throw new ServletException("Chart image not found");  }}  }
class C{  private static String readLine() throws IOException {  return IN.readLine();}  }
class C{  public static String[] readFontNames(final FontData fontData,final int mode){  final FontFile2 currentFontFile=new FontFile2(fontData);  final int fontCount=currentFontFile.getFontCount();  final String[] fontNames=new String[fontCount];  for (int i=0; i < fontCount; i++) {    currentFontFile.setSelectedFontIndex(i);    final Name currentName=new Name(currentFontFile);    final String name;switch (mode) {case PdfDecoderInt.SUBSTITUTE_FONT_USING_POSTSCRIPT_NAME:      name=currentName.getString(Name.POSTSCRIPT_NAME);    break;case PdfDecoderInt.SUBSTITUTE_FONT_USING_FAMILY_NAME:  name=currentName.getString(Name.FONT_FAMILY_NAME);break;case PdfDecoderInt.SUBSTITUTE_FONT_USING_FULL_FONT_NAME:name=currentName.getString(Name.FULL_FONT_NAME);break;default :throw new RuntimeException("Unsupported mode " + mode + ". Unable to resolve font names");}if (name == null) {fontNames[i]=null;} else {fontNames[i]=name.toLowerCase();}}if (fontData != null) {fontData.close();}return fontNames;}  }
class C{  public TheoryBuilder(final Supplier<Strategy> state,final Source<A> source,Predicate<A> assumptions){  this.state=state;  this.ps=source;  this.assumptions=assumptions;}  }
class C{  public PoliticalArea findPoliticalArea(String area_key){  if (politicalAreas == null) {    Debug.message("areas","AreaHandler: initializing graphic attributes");    initialize(originalPrefix,originalProperties);    if (omgraphics == null) {      omgraphics=getGraphics();      if (dbfModel != null)       loadDbfModelIntoGraphics(omgraphics); else       infoFile.loadIntoGraphics(omgraphics);    }    politicalAreas=determinePoliticalAreas(omgraphics);    Debug.message("areas","AreaHandler: completed initialization");  }  if (politicalAreas != null) {    String key=area_key.toUpperCase().intern();    return (PoliticalArea)politicalAreas.get(key);  } else {    Debug.error("AreaHandler: initialization failed for " + originalPrefix + "\n\tNo data will be displayed");    return null;  }}  }
class C{  public static void reversedMergesort(double[] a){  reversedMergesort(a,0,a.length);}  }
class C{  public void addTrustedCertEntry(String alias,X509Certificate cert) throws CertificateEncodingException {  if (cert == null) {    throw new IllegalArgumentException("'cert' cannot be null");  }  String pemCert=VecsUtils.encodeX509CertificatesToString(new X509Certificate[]{cert});  int error=VecsAdapter.VecsAddEntryW(_storeHandle,VecsEntryType.CERT_ENTRY_TYPE_TRUSTED_CERT.getValue(),alias,pemCert,null,null,false);  BAIL_ON_ERROR(error,"Adding VecsEntryType.CERT_ENTRY_TYPE_TRUSTED_CERT entry " + "into store '%s' failed. [Server: %s, User: %s]",_storeName,_serverName,_userName);}  }
class C{  public static void resetDistCache(){  for (  DistributedCacheInput dcInput : dcValues.values())   dcInput.reset();  dcValues.clear();}  }
class C{  public boolean isFactDomain(DomainPK source){  LinkedHashSet<DomainPK> vicinity=getVicinity(source);  for (  DomainPK target : vicinity) {    List<Path> paths=getPaths(source,target);    for (    Path path : paths) {switch (path.getType()) {case MANY_MANY:case ONE_MANY:case INFINITE:        return false;default :    }  }}return true;}  }
class C{  static public Class<?> loadClass(String name) throws ReplicatorException {  if (name == null)   throw new PluginException("Unable to load plugin with null name");  try {    return (Class<?>)Class.forName(name);  } catch (  Exception e) {    throw new PluginException(e);  }}  }
class C{  private static boolean isPrintableAscii(char ch){  return ch >= ' ' && ch <= '~';}  }
class C{  public synchronized void remove(AbstractOption option){  if (options.contains(option)) {    int position=indexOf(option);    List<AbstractOption> oldOptions=new ArrayList<AbstractOption>(options);    options.remove(option);    List<AbstractOption> newOptions=getOptions();    option.setCollection(null);    fireIndexedPropertyChange(PROP_OPTIONS,position,oldOptions,newOptions);  }}  }
class C{  public Class<? extends TargetURIKey> bindTargetURIKey(){  return BuiltinSchemeAwareTargetURIKey.class;}  }
class C{  public static boolean hasLeadingWhitespace(File inputFile) throws IOException {  BufferedReader reader=Files.newBufferedReader(inputFile.toPath());  int character=reader.read();  if (character != -1 && Character.isWhitespace((char)character)) {    return true;  }  reader.close();  return false;}  }
class C{  @Transactional public void followArticle(final String followerId,final String followingArticleId) throws ServiceException {  try {    follow(followerId,followingArticleId,Follow.FOLLOWING_TYPE_C_ARTICLE);  } catch (  final RepositoryException e) {    final String msg="User[id=" + followerId + "] follows an article[id="+ followingArticleId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public GuacamoleUnsupportedException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override default CompletableFuture<OptionalDouble> averageLong(final ToLongFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public CompilingLoader createCompilingLoader(){  return new CompilingLoader(_classLoader);}  }
class C{  Job startJobMonitorApp() throws InterruptedException, ExecutionException {  Topology topology=dp.newTopology("JobMonitorApp");  TStream<JsonObject> jobEvents=JobEvents.source(topology,null);  jobEvents.sink(null);  Future<Job> f=dp.submit(topology);  return f.get();}  }
class C{  public void addCriteria(Criterion c){  String opString=this.getAttributeAsString("operator");  if (opString != null && opString.equals(OperatorId.AND.getValue())) {    appendToCriterionList(c);  } else {    Criterion thisCopy=new Criterion(this);    JSOHelper.deleteAttributeIfExists(jsObj,"fieldName");    JSOHelper.deleteAttributeIfExists(jsObj,"value");    Criterion[] criteriaList={thisCopy,c};    buildCriterionFromList(OperatorId.AND,criteriaList);  }}  }
class C{  public static void sort(double[] values,int[] indexes){  int i=0;  int count=values.length;  for (; i < count; i++) {    if (i == (count - 1))     return;    double v1=values[i], v2=values[i + 1];    int i1=indexes[i], i2=indexes[i + 1];    if (v1 <= v2)     continue;    values[i]=v2;    values[i + 1]=v1;    indexes[i]=i2;    indexes[i + 1]=i1;    i=-1;  }}  }
class C{  public CliDiagnosticListener(final PrintStream err){  this(err,System.out);}  }
class C{  public List<Statistics> findByUser(long userId){  return mDaoSession.getStatisticsDao().queryBuilder().where(StatisticsDao.Properties.UserId.eq(userId)).list();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testCopyHardLinks() throws IOException {  Path tempDir=createTempDir();  Path dir_1=tempDir.resolve("dir_1");  Path dir_2=tempDir.resolve("dir_2");  Files.createDirectories(dir_1);  Files.createDirectories(dir_2);  Directory luceneDir_1=newFSDirectory(dir_1);  Directory luceneDir_2=newFSDirectory(dir_2);  try {    try (IndexOutput output=luceneDir_1.createOutput("foo.bar",IOContext.DEFAULT)){      CodecUtil.writeHeader(output,"foo",0);      output.writeString("hey man, nice shot!");      CodecUtil.writeFooter(output);    }     luceneDir_1.sync(Collections.singleton("foo.bar"));    try {      Files.createLink(tempDir.resolve("test"),dir_1.resolve("foo.bar"));      BasicFileAttributes destAttr=Files.readAttributes(tempDir.resolve("test"),BasicFileAttributes.class);      BasicFileAttributes sourceAttr=Files.readAttributes(dir_1.resolve("foo.bar"),BasicFileAttributes.class);      assumeTrue("hardlinks are not supported",destAttr.fileKey() != null && destAttr.fileKey().equals(sourceAttr.fileKey()));    } catch (    UnsupportedOperationException ex) {      assumeFalse("hardlinks are not supported",true);    }    HardlinkCopyDirectoryWrapper wrapper=new HardlinkCopyDirectoryWrapper(luceneDir_2);    wrapper.copyFrom(luceneDir_1,"foo.bar","bar.foo",IOContext.DEFAULT);    assertTrue(Files.exists(dir_2.resolve("bar.foo")));    BasicFileAttributes destAttr=Files.readAttributes(dir_2.resolve("bar.foo"),BasicFileAttributes.class);    BasicFileAttributes sourceAttr=Files.readAttributes(dir_1.resolve("foo.bar"),BasicFileAttributes.class);    assertEquals(destAttr.fileKey(),sourceAttr.fileKey());    try (ChecksumIndexInput indexInput=wrapper.openChecksumInput("bar.foo",IOContext.DEFAULT)){      CodecUtil.checkHeader(indexInput,"foo",0,0);      assertEquals("hey man, nice shot!",indexInput.readString());      CodecUtil.checkFooter(indexInput);    }   }  finally {    IOUtils.close(luceneDir_1,luceneDir_2);  }}  }
class C{  public static void sleep(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {    throw new LuaError(e);  }}  }
class C{  @Override public final char readChar() throws IOException {  d.readFully(w,0,2);  return (char)((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  public OrderEventImpl(final OrderEvent parent,final String eventId,final CustomerOrder customerOrder,final CustomerOrderDelivery customerOrderDelivery,final Map params){  this.parent=parent;  this.eventId=eventId;  this.customerOrder=customerOrder;  this.customerOrderOriginalStatus=customerOrder != null ? customerOrder.getOrderStatus() : "-";  this.customerOrderDelivery=customerOrderDelivery;  this.customerOrderDeliveryOriginalStatus=customerOrderDelivery != null ? customerOrderDelivery.getDeliveryStatus() : "-";  this.params=params == null ? Collections.emptyMap() : Collections.unmodifiableMap(params);}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  @Override protected void doAction(){  saveKeyStore(kseFrame.getActiveKeyStoreHistory());}  }
class C{  public void uninitialize(){  KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventPostProcessor(AquaMnemonicHandler.getInstance());  final PopupFactory popupFactory=PopupFactory.getSharedInstance();  if (popupFactory != null && popupFactory instanceof ScreenPopupFactory) {    ((ScreenPopupFactory)popupFactory).setActive(false);  }  super.uninitialize();}  }
class C{  public void agregarUsuariosAGrupo(String[] idGrupo,String[] idUsuario) throws ActionNotAllowedException {  checkPermission(ControlAccesoSecurityManager.MODIFICACION_GRUPO);  Locale locale=getServiceClient().getLocale();  List gruposVO=getGrupos(idGrupo);  LoggingEvent event1=AuditUsuarios.getLogginEventAsignacionGrupo(this);  AuditUsuarios.addDataLogInfoGrupos(locale,event1,gruposVO);  iniciarTransaccion();  int nGrupos=idGrupo.length;  int nUsuarios=idUsuario.length;  for (int i=0; i < nGrupos; i++)   for (int j=0; j < nUsuarios; j++)   grupoUsuarioDBEntity.insertGrupoUsuario(idGrupo[i],idUsuario[j]);  commit();}  }
class C{  private final int _prependOrWriteCharacterEscape(char[] buffer,int ptr,int end,char ch,int escCode) throws IOException, JsonGenerationException {  if (escCode >= 0) {    if (ptr > 1 && ptr < end) {      ptr-=2;      buffer[ptr]='\\';      buffer[ptr + 1]=(char)escCode;    } else {      char[] ent=_entityBuffer;      if (ent == null) {        ent=_allocateEntityBuffer();      }      ent[1]=(char)escCode;      _writer.write(ent,0,2);    }    return ptr;  }  if (escCode != CharacterEscapes.ESCAPE_CUSTOM) {    if (ptr > 5 && ptr < end) {      ptr-=6;      buffer[ptr++]='\\';      buffer[ptr++]='u';      if (ch > 0xFF) {        int hi=(ch >> 8) & 0xFF;        buffer[ptr++]=HEX_CHARS[hi >> 4];        buffer[ptr++]=HEX_CHARS[hi & 0xF];        ch&=0xFF;      } else {        buffer[ptr++]='0';        buffer[ptr++]='0';      }      buffer[ptr++]=HEX_CHARS[ch >> 4];      buffer[ptr]=HEX_CHARS[ch & 0xF];      ptr-=5;    } else {      char[] ent=_entityBuffer;      if (ent == null) {        ent=_allocateEntityBuffer();      }      _outputHead=_outputTail;      if (ch > 0xFF) {        int hi=(ch >> 8) & 0xFF;        int lo=ch & 0xFF;        ent[10]=HEX_CHARS[hi >> 4];        ent[11]=HEX_CHARS[hi & 0xF];        ent[12]=HEX_CHARS[lo >> 4];        ent[13]=HEX_CHARS[lo & 0xF];        _writer.write(ent,8,6);      } else {        ent[6]=HEX_CHARS[ch >> 4];        ent[7]=HEX_CHARS[ch & 0xF];        _writer.write(ent,2,6);      }    }    return ptr;  }  String escape;  if (_currentEscape == null) {    escape=_characterEscapes.getEscapeSequence(ch).getValue();  } else {    escape=_currentEscape.getValue();    _currentEscape=null;  }  int len=escape.length();  if (ptr >= len && ptr < end) {    ptr-=len;    escape.getChars(0,len,buffer,ptr);  } else {    _writer.write(escape);  }  return ptr;}  }
class C{  protected String[] constructProgramArguments() throws CoreException {  final List<String> arguments=new ArrayList<String>();  final List<String> superArguments=Arrays.asList(super.constructProgramArguments());  for (int i=0; i < superArguments.size(); i++) {    final String arg=superArguments.get(i);    if (WHITELIST.contains(arg)) {      arguments.add(arg);    } else     if (WHITELIST_WITH_ARG.contains(arg)) {      arguments.add(arg);      arguments.add(superArguments.get(++i));    }  }  final String userDir=launchDir.getLocation().toOSString();  final String specFile=ResourceHelper.getModuleName(rootModule);  arguments.add(userDir + File.separator + specFile);  arguments.add("-tool");  return arguments.toArray(new String[arguments.size()]);}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {  return Class.forName(name);}  }
class C{  public void addInvokevirtual(String classname,String name,String desc){  addInvokevirtual(constPool.addClassInfo(classname),name,desc);}  }
class C{  @Override public void remove(Result<Boolean> result){  _root.remove(_path,result);}  }
class C{  public void gotoLatLon(double lat,double lon){  this.gotoLatLon(lat,lon,Double.NaN,0,0);}  }
class C{  JCERSAPrivateCrtKey(PrivateKeyInfo info) throws IOException {  this(org.bouncycastle.asn1.pkcs.RSAPrivateKey.getInstance(info.parsePrivateKey()));}  }
class C{  private boolean isAnyCall(final List<INaviInstruction> instructions,final Set<INaviInstruction> calls){  for (  final INaviInstruction naviInstruction : instructions) {    if (calls.contains(naviInstruction)) {      return true;    }  }  return false;}  }
class C{  public Element writeDefaultListModel(Element parent,Object o,String name) throws Exception {  Element node;  int i;  DefaultListModel model;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  model=(DefaultListModel)o;  node=addElement(parent,name,o.getClass().getName(),false);  for (i=0; i < model.getSize(); i++) {    invokeWriteToXML(node,model.get(i),Integer.toString(i));  }  return node;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.HISTORY_ENTRY__INITIAL_STEP:    setInitialStep((Step)null);  return;case SexecPackage.HISTORY_ENTRY__DEEP:setDeep(DEEP_EDEFAULT);return;case SexecPackage.HISTORY_ENTRY__REGION:setRegion((ExecutionRegion)null);return;case SexecPackage.HISTORY_ENTRY__HISTORY_STEP:setHistoryStep((Step)null);return;}super.eUnset(featureID);}  }
class C{  @Override public int calculateOffsetY(){  return -(int)(Math.sin(this.angle) * this.distance) - this.shadowSize;}  }
class C{  public void reset(){  cursor=Address.zero();  limit=Address.zero();  largeCursor=Address.zero();  largeLimit=Address.zero();  markTable=Address.zero();  recyclableBlock=Address.zero();  requestForLarge=false;  recyclableExhausted=false;  line=LINES_IN_BLOCK;  lineUseCount=0;}  }
class C{  private Timestamp parseOfxDate(String value) throws ParseException {  try {    SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");    sdf.setLenient(false);    return new Timestamp(sdf.parse(value).getTime());  } catch (  Exception e) {    throw new ParseException("Error parsing date: " + value,0);  }}  }
class C{  public void registerProxyListener(ProxyListener listener){  proxyListeners.add(listener);}  }
class C{  public ExternalLibraryPreferenceModel(final List<URI> locations){  this.externalLibraryLocations=newArrayList();  for (  final URI location : locations) {    checkUri(location);    final String path=new File(location).getAbsolutePath();    if (!this.externalLibraryLocations.contains(path)) {      this.externalLibraryLocations.add(path);    }  }}  }
class C{  public Session createSession(SecureChannel channel,UnsignedInteger maxResponseMessageSize,Double requestedSessionTimeout,String sessionName) throws IllegalArgumentException, ServiceResultException {  return createSession(channel,maxResponseMessageSize,requestedSessionTimeout,sessionName,null);}  }
class C{  protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (this.fixedDomainAxisSpace != null) {    if (this.orientation.isHorizontal()) {      space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);      space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);    } else     if (this.orientation.isVertical()) {      space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);      space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);    }  } else {    RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);    if (this.drawSharedDomainAxis) {      space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);    }    for (    CategoryAxis xAxis : this.domainAxes.values()) {      if (xAxis != null) {        int i=getDomainAxisIndex(xAxis);        RectangleEdge edge=getDomainAxisEdge(i);        space=xAxis.reserveSpace(g2,this,plotArea,edge,space);      }    }  }  return space;}  }
class C{  public static Set<String> flattenPaths(Object value){  Set<String> paths=new HashSet<>();  if (value == null) {    return paths;  } else   if (Draft2SchemaHelper.isFileFromValue(value)) {    paths.add(getPath(value));    List<Map<String,Object>> secondaryFiles=getSecondaryFiles(value);    if (secondaryFiles != null) {      paths.addAll(flattenPaths(secondaryFiles));    }    return paths;  } else   if (value instanceof List<?>) {    for (    Object subvalue : ((List<?>)value)) {      paths.addAll(flattenPaths(subvalue));    }    return paths;  } else   if (value instanceof Map<?,?>) {    for (    Object subvalue : ((Map<?,?>)value).values()) {      paths.addAll(flattenPaths(subvalue));    }  }  return paths;}  }
class C{  public Perceptron(){  this(0.1,400);}  }
class C{  private void createDescription(){  final StyledText labelDescription=new StyledText(this,SWT.WRAP | SWT.READ_ONLY);  labelDescription.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));  labelDescription.setEnabled(false);  labelDescription.setFont(getFont());  labelDescription.setForeground(getForeground());  labelDescription.setText(this.description);  SWTGraphicUtil.applyHTMLFormating(labelDescription);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extensionProfile){  ExtensionDescription desc=EmailList.getDefaultDescription();  desc.setRequired(true);  extensionProfile.declare(EmailListEntry.class,desc);  desc=FeedLink.getDefaultDescription();  desc.setRepeatable(true);  extensionProfile.declare(EmailListEntry.class,desc);  extensionProfile.declareAdditionalNamespace(com.google.gdata.data.appsforyourdomain.Namespaces.APPS_NAMESPACE);}  }
class C{  public boolean isServiceActivated(String serviceId) throws RcsGenericException {  try {    return mIConfig.isServiceActivated(serviceId);  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  @Override public void beforePassivation(ActivateeType passivating) throws Exception {}  }
class C{  public static <T extends DataObject>Object invokeMethod(Class<T> clzz,DataObject dataObject,String methodName) throws Exception {  Method method=String.class.getDeclaredMethod(methodName,new Class[]{});  return (Object)method.invoke(dataObject,new Object[]{});}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  protected void reportPurityErrors(PurityResult result,MethodTree node,Collection<Pure.Kind> expectedTypes){  assert !result.isPure(expectedTypes);  Collection<Pure.Kind> t=EnumSet.copyOf(expectedTypes);  t.removeAll(result.getTypes());  if (t.contains(Pure.Kind.DETERMINISTIC) || t.contains(Pure.Kind.SIDE_EFFECT_FREE)) {    String msgPrefix="purity.not.deterministic.not.sideeffectfree.";    if (!t.contains(Pure.Kind.SIDE_EFFECT_FREE)) {      msgPrefix="purity.not.deterministic.";    } else     if (!t.contains(Pure.Kind.DETERMINISTIC)) {      msgPrefix="purity.not.sideeffectfree.";    }    for (    Pair<Tree,String> r : result.getNotBothReasons()) {      @SuppressWarnings("CompilerMessages") String msg=msgPrefix + r.second;      checker.report(Result.failure(msg),r.first);    }    if (t.contains(Pure.Kind.SIDE_EFFECT_FREE)) {      for (      Pair<Tree,String> r : result.getNotSeFreeReasons()) {        @SuppressWarnings("CompilerMessages") String msg="purity.not.sideeffectfree." + r.second;        checker.report(Result.failure(msg),r.first);      }    }    if (t.contains(Pure.Kind.DETERMINISTIC)) {      for (      Pair<Tree,String> r : result.getNotDetReasons()) {        @SuppressWarnings("CompilerMessages") String msg="purity.not.deterministic." + r.second;        checker.report(Result.failure(msg),r.first);      }    }  }}  }
class C{  public static void encodeVaxLongWithoutLength(OutputStream stream,long value) throws IOException {  stream.write((int)value);  stream.write((int)(value >> 8));  stream.write((int)(value >> 16));  stream.write((int)(value >> 24));  stream.write((int)(value >> 32));  stream.write((int)(value >> 40));  stream.write((int)(value >> 48));  stream.write((int)(value >> 56));}  }
class C{  public static String translateDataRowConstraint(License license){  String limit;  try {    limit=license.getConstraints().getConstraintValue(ProductConstraintManager.INSTANCE.getDataRowConstraint());    try {      limit=NumberFormat.getInstance().format(Integer.parseInt(limit));    } catch (    NumberFormatException e) {    }  } catch (  ConstraintNotRestrictedException e) {    limit=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.unlimited.label");  }  return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.data_row.label",limit);}  }
class C{  private final void printLatin1Direct(String string,int strlen) throws IOException {  require(strlen);  byte[] buffer=buffer();  int offset=offset();  for (int i=0; i < strlen; i++) {    char ch=string.charAt(i);    if (ch < 0x100) {      buffer[offset + i]=(byte)ch;    } else {      buffer[offset + i]=LATIN1[ch];    }  }  offset(offset + strlen);}  }
class C{  public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){  List<String> result=new ArrayList<String>(names.size());  for (  String name : names) {    expandWildcard(result,dirs,name,forBackend);  }  return result;}  }
class C{  public void drawStringBaseline(String str,int x,int y){  drawString(str,x,y - current.getAscent());}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  SVGOMToBeImplementedElement ae=(SVGOMToBeImplementedElement)n;  ae.localName=localName;  return n;}  }
class C{  public static BitmapRegionDecoderCompat newInstance(InputStream is,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(is,isShareable) : BitmapRegionDecoderGinger.newInstance(is,isShareable));}  }
class C{  public void terminate(){  for (int i=0; i < threads; i++) {    servers[i].terminate();  }}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("ArgumentValuesTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();{    System.out.println("----- Testing each type of arg");    bpe=resumeTo("ArgumentValuesTarg",45);    StackFrame frame=bpe.thread().frame(0);    Method mmm=frame.location().method();    System.out.println("Arg types are: " + mmm.argumentTypeNames());    List<Value> argVals=frame.getArgumentValues();    if (argVals.size() != fieldNames.length) {      failure("failure: Varargs: expected length " + fieldNames.length + " args, got: "+ argVals);    }    for (int ii=0; ii < argVals.size(); ii++) {      Value gotVal=argVals.get(ii);      Field theField=targetClass.fieldByName(fieldNames[ii]);      Value expectedVal=targetClass.getValue(theField);      System.out.println(fieldNames[ii] + ": gotVal = " + gotVal+ ", expected = "+ expectedVal);      if (!gotVal.equals(expectedVal)) {        failure("     failure: gotVal != expected");      }    }  }{    System.out.println("----- Testing no args");    bpe=resumeTo("ArgumentValuesTarg",38);    StackFrame frame=bpe.thread().frame(0);    Method mmm=frame.location().method();    System.out.println("Arg types are: " + mmm.argumentTypeNames());    List<Value> argVals=frame.getArgumentValues();    if (argVals.size() == 0) {      System.out.println("Empty arg list ok");    } else {      failure("failure: Expected empty val list, got: " + argVals);    }  }{    System.out.println("----- Testing var args");    bpe=resumeTo("ArgumentValuesTarg",49);    StackFrame frame=bpe.thread().frame(0);    Method mmm=frame.location().method();    System.out.println("Arg types are: " + mmm.argumentTypeNames());    List<Value> argVals=frame.getArgumentValues();    if (argVals.size() != 1) {      failure("failure: Varargs: expected one arg, got: " + argVals);    }    argVals=((ArrayReference)argVals.get(0)).getValues();    if (argVals.size() != fieldNamesVarArgs.length) {      failure("failure: Varargs: expected length " + fieldNamesVarArgs.length + " array elements, got: "+ argVals);    }    for (int ii=0; ii < argVals.size(); ii++) {      Value gotVal=argVals.get(ii);      Field theField=targetClass.fieldByName(fieldNamesVarArgs[ii]);      Value expectedVal=targetClass.getValue(theField);      System.out.println(fieldNamesVarArgs[ii] + ": gotVal = " + gotVal+ ", expected = "+ expectedVal);      if (!gotVal.equals(expectedVal)) {        failure("     failure: gotVal != expected");      }    }  }{    System.out.println("----- Testing generic args");    bpe=resumeTo("ArgumentValuesTarg",53);    StackFrame frame=bpe.thread().frame(0);    Method mmm=frame.location().method();    System.out.println("Arg types are: " + mmm.argumentTypeNames());    List<Value> argVals=frame.getArgumentValues();    if (argVals.size() != 1) {      failure("failure: Expected one arg, got: " + argVals);    } else {      Value gotVal=argVals.get(0);      Field theField=targetClass.fieldByName("intList");      Value expectedVal=targetClass.getValue(theField);      System.out.println("intList " + ": gotVal = " + gotVal + ", expected = "+ expectedVal);      if (!gotVal.equals(expectedVal)) {        failure("failure: gotVal != expected");      }    }  }{    System.out.println("----- Testing instance method call");    bpe=resumeTo("ArgumentValuesTarg",57);    StackFrame frame=bpe.thread().frame(0);    Method mmm=frame.location().method();    System.out.println("Arg types are: " + mmm.argumentTypeNames());    List<Value> argVals=frame.getArgumentValues();    if (argVals.size() != fieldNamesInstance.length) {      failure("failure: Varargs: expected length " + fieldNamesInstance.length + " args, got: "+ argVals);    }    for (int ii=0; ii < argVals.size(); ii++) {      Value gotVal=argVals.get(ii);      Field theField=targetClass.fieldByName(fieldNamesInstance[ii]);      Value expectedVal=targetClass.getValue(theField);      System.out.println(fieldNamesInstance[ii] + ": gotVal = " + gotVal+ ", expected = "+ expectedVal);      if (!gotVal.equals(expectedVal)) {        failure("     failure: gotVal != expected");      }    }  }  listenUntilVMDisconnect();  if (!testFailed) {    println("ArgumentValuesTest: passed");  } else {    throw new Exception("ArgumentValuesTest: failed");  }}  }
class C{  public synchronized int size(){  return elementCount;}  }
class C{  public List<DiffRow> generateDiffRows(List<String> original,List<String> revised,Patch<String> patch){  original=StringUtills.normalize(original);  revised=StringUtills.normalize(revised);  original=StringUtills.wrapText(original,this.columnWidth);  revised=StringUtills.wrapText(revised,this.columnWidth);  List<DiffRow> diffRows=new ArrayList<DiffRow>();  int endPos=0;  final List<Delta<String>> deltaList=patch.getDeltas();  for (int i=0; i < deltaList.size(); i++) {    Delta<String> delta=deltaList.get(i);    Chunk<String> orig=delta.getOriginal();    Chunk<String> rev=delta.getRevised();    orig.setLines(StringUtills.normalize((List<String>)orig.getLines()));    rev.setLines(StringUtills.normalize((List<String>)rev.getLines()));    orig.setLines(StringUtills.wrapText((List<String>)orig.getLines(),this.columnWidth));    rev.setLines(StringUtills.wrapText((List<String>)rev.getLines(),this.columnWidth));    for (    String line : original.subList(endPos,orig.getPosition())) {      diffRows.add(new DiffRow(Tag.EQUAL,line,line));    }    if (delta.getClass().equals(InsertDelta.class)) {      endPos=orig.last() + 1;      for (      String line : (List<String>)rev.getLines()) {        diffRows.add(new DiffRow(Tag.INSERT,"",line));      }      continue;    }    if (delta.getClass().equals(DeleteDelta.class)) {      endPos=orig.last() + 1;      for (      String line : (List<String>)orig.getLines()) {        diffRows.add(new DiffRow(Tag.DELETE,line,""));      }      continue;    }    if (showInlineDiffs) {      addInlineDiffs(delta);    }    if (orig.size() == rev.size()) {      for (int j=0; j < orig.size(); j++) {        diffRows.add(new DiffRow(Tag.CHANGE,(String)orig.getLines().get(j),(String)rev.getLines().get(j)));      }    } else     if (orig.size() > rev.size()) {      for (int j=0; j < orig.size(); j++) {        diffRows.add(new DiffRow(Tag.CHANGE,(String)orig.getLines().get(j),rev.getLines().size() > j ? (String)rev.getLines().get(j) : ""));      }    } else {      for (int j=0; j < rev.size(); j++) {        diffRows.add(new DiffRow(Tag.CHANGE,orig.getLines().size() > j ? (String)orig.getLines().get(j) : "",(String)rev.getLines().get(j)));      }    }    endPos=orig.last() + 1;  }  for (  String line : original.subList(endPos,original.size())) {    diffRows.add(new DiffRow(Tag.EQUAL,line,line));  }  return diffRows;}  }
class C{  void checkGoal(HaitiFood state){  timeSinceReevaluate=0;  if (hasFood && position.equals(home)) {    activity=ACTION_STAY_HOME;    goal=null;    path=null;    return;  } else   if (goal != null && goal.equals(home)) {    activity=ACTION_GO_HOME;    return;  } else   if (hasFood && goal != null) {    activity=ACTION_GO_HOME;    goal=home;    path=null;    return;  } else   if (goal != null && centerInfo > 0) {    return;  }  if (centerInfo == 0) {    activity=ACTION_STAY_HOME;    goal=null;    return;  }  Location oldGoal=goal;  goal=null;  for (int i=0; i < state.centersList.size(); i++) {    if ((centerInfo & powers[i]) == 0) {      continue;    }    Center c=state.centersList.get(i);    if (goal == null) {      goal=c.loc;    } else     if (position.distanceTo(c.loc) < position.distanceTo(goal)) {      goal=c.loc;    }  }  if (goal != null && (goal.distanceTo(position) + goal.distanceTo(home)) * ENERGY_TO_WALK_PAVED < energyLevel) {    if (goal != oldGoal) {      path=null;    }    activity=ACTION_GO_TO_CENTER;  } else {    goal=null;    activity=ACTION_STAY_HOME;  }}  }
class C{  private static void addAuthorizedActions(final Switchboard sb,final serverObjects prop,final SearchEvent theSearch,final String resultUrlstring,final String resource,final String origQ,final String urlhash){  boolean bookmarkexists=sb.bookmarksDB.getBookmark(urlhash) != null;  prop.put("content_authorized_bookmark",!bookmarkexists);  StringBuilder linkBuilder=new StringBuilder();  String actionLinkPrefix=linkBuilder.append("yacysearch.html?query=").append(origQ.replace(' ','+')).append("&Enter=Search&count=").append(theSearch.query.itemsPerPage()).append("&offset=").append((theSearch.query.neededResults() - theSearch.query.itemsPerPage())).append("&resource=").append(resource).append("&time=3").toString();  linkBuilder.setLength(0);  String encodedURLString;  try {    encodedURLString=URLEncoder.encode(crypt.simpleEncode(resultUrlstring),StandardCharsets.UTF_8.name());  } catch (  UnsupportedEncodingException e1) {    ConcurrentLog.warn("YACY_SEARCH_ITEM","UTF-8 encoding is not supported!");    encodedURLString=crypt.simpleEncode(resultUrlstring);  }  String bookmarkLink=linkBuilder.append(actionLinkPrefix).append("&bookmarkref=").append(urlhash).append("&bookmarkurl=").append(encodedURLString).append("&urlmaskfilter=.*").toString();  linkBuilder.setLength(0);  String encodedRanking;  try {    encodedRanking=URLEncoder.encode(crypt.simpleEncode(theSearch.query.ranking.toExternalString()),StandardCharsets.UTF_8.name());  } catch (  UnsupportedEncodingException e1) {    ConcurrentLog.warn("YACY_SEARCH_ITEM","UTF-8 encoding is not supported!");    encodedRanking=crypt.simpleEncode(resultUrlstring);  }  String actionLinkSuffix=linkBuilder.append(urlhash).append("&urlmaskfilter=.*").append("&order=").append(encodedRanking).toString();  linkBuilder.setLength(0);  String deleteLink=linkBuilder.append(actionLinkPrefix).append("&deleteref=").append(actionLinkSuffix).toString();  linkBuilder.setLength(0);  String recommendLink=linkBuilder.append(actionLinkPrefix).append("&recommendref=").append(actionLinkSuffix).toString();  linkBuilder.setLength(0);  prop.put("content_authorized_bookmark_bookmarklink",bookmarkLink);  prop.put("content_authorized_recommend_deletelink",deleteLink);  prop.put("content_authorized_recommend_recommendlink",recommendLink);  prop.put("content_authorized_recommend",(sb.peers.newsPool.getSpecific(NewsPool.OUTGOING_DB,NewsPool.CATEGORY_SURFTIPP_ADD,"url",resultUrlstring) == null) ? "1" : "0");  prop.put("content_authorized_urlhash",urlhash);}  }
class C{  public static void run(AnalyticsService myService,String username,String password) throws ServiceException, IOException {  myService.setUserCredentials(username,password);  AccountFeed accountFeed=getAvailableAccounts(myService);  printAccounts(accountFeed);  if (accountFeed.getEntries().isEmpty()) {    return;  }  AccountEntry profile=accountFeed.getEntries().get(0);  String tableId=profile.getTableId().getValue();  DataQuery basicQuery=getBasicQuery(tableId);  DataFeed basicData=myService.getFeed(basicQuery,DataFeed.class);  printData("BASIC RESULTS",basicData);  DataQuery sortedQuery=getBasicQuery(tableId);  sortedQuery.setSort("-ga:visits");  DataFeed sortedData=myService.getFeed(sortedQuery,DataFeed.class);  printData("SORTED RESULTS",sortedData);  DataQuery filteredQuery=getBasicQuery(tableId);  filteredQuery.setFilters("ga:browser!@Explorer");  DataFeed filteredData=myService.getFeed(filteredQuery,DataFeed.class);  printData("FILTERED RESULTS",filteredData);}  }
class C{  public void delete(T node){  for (int i=0; i < numberOfReplicas; i++) {    circle.remove(hashFunction.hashString(node.toString() + i,Charset.defaultCharset()).asLong());  }}  }
class C{  public String(byte[] bytes,int off,int len){}  }
class C{  public T caseReferencingElementExpression_IM(ReferencingElementExpression_IM object){  return null;}  }
class C{  private void reportError(String msg,Element e){  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public boolean userCanCreateUser(int connectedUserId,int deptId,String entidad) throws Exception {  boolean can=false;  int deptMgrId=Defs.NULL_ID;  try {    deptMgrId=getDeptMgrId(deptId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_CREATE,deptMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MViewDefinition[").append(get_ID()).append("-").append("").append("]");  return sb.toString();}  }
class C{  public static boolean isConfirmed(final Shell shell,final String title,final String text){  return isConfirmed(shell,title,text,-1);}  }
class C{  private boolean isPaintLineSeperators(JComponent c){  boolean paintLines=c instanceof JTextArea;  String globalOverride=System.getProperty("SeaGlass.JTextArea.drawLineSeparator");  if (globalOverride != null && globalOverride.length() > 0) {    paintLines=Boolean.valueOf(globalOverride);  }  Boolean overrideProperty=(Boolean)c.getClientProperty("SeaGlass.JTextArea.drawLineSeparator");  if (overrideProperty != null) {    paintLines=overrideProperty;  }  return paintLines;}  }
class C{  public boolean onUpdateViewAnimation(long time,boolean jumpToEnd){  boolean finished=true;  if (mViewAnimations != null) {    finished=!mViewAnimations.isRunning();    finishAnimationsIfDone(time,jumpToEnd);  }  return finished;}  }
class C{  public static void saveAsBinary(NSObject root,OutputStream out) throws IOException {  BinaryPropertyListWriter.write(out,root);}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private void loadExistingReviewComments() throws IOException {  for (  GHPullRequestReviewComment comment : pr.listReviewComments()) {    if (!myself.equals(comment.getUser().getLogin())) {      continue;    }    if (!existingReviewCommentsByLocationByFile.containsKey(comment.getPath())) {      existingReviewCommentsByLocationByFile.put(comment.getPath(),new HashMap<Integer,GHPullRequestReviewComment>());    }    reviewCommentToBeDeletedById.put(comment.getId(),comment);    existingReviewCommentsByLocationByFile.get(comment.getPath()).put(comment.getPosition(),comment);  }}  }
class C{  protected List<StepInstance> createStepInstances(Step step,Long bottomProteinId,Long topProteinId){  final List<StepInstance> stepInstances=new ArrayList<StepInstance>();  final long sliceSize=(step.getMaxProteins() == null) ? topProteinId - bottomProteinId + 1 : step.getMaxProteins();  for (long bottom=bottomProteinId; bottom <= topProteinId; bottom+=sliceSize) {    final long top=Math.min(topProteinId,bottom + sliceSize - 1);    stepInstances.add(new StepInstance(step,bottom,top,null,null));  }  return stepInstances;}  }
class C{  static public int extractApp(long cookie){  return (int)((cookie >>> APP_ID_SHIFT) & APP_ID_MASK);}  }
class C{  @Inject public ToolbarViewImpl(ActionManager actionManager,KeyBindingAgent keyBindingAgent,ToolbarResources toolbarResources){  this.actionManager=actionManager;  this.keyBindingAgent=keyBindingAgent;  this.toolbarResources=toolbarResources;  toolbarResources.toolbar().ensureInjected();  setStyleName(toolbarResources.toolbar().toolbarPanel());  leftToolbar=new FlowPanel();  add(leftToolbar);  rightToolbar=new FlowPanel();  rightToolbar.addStyleName(toolbarResources.toolbar().rightPanel());  add(rightToolbar);  newLeftVisibleActions=new ArrayList<>();  leftVisibleActions=new ArrayList<>();  newRightVisibleActions=new ArrayList<>();  rightVisibleActions=new ArrayList<>();  presentationFactory=new PresentationFactory();}  }
class C{  protected String validateNewAirCanLandOnCarriers(final Territory to,final Collection<Unit> units){  final int cost=AirMovementValidator.carrierCost(units);  int capacity=AirMovementValidator.carrierCapacity(units,to);  capacity+=AirMovementValidator.carrierCapacity(to.getUnits().getUnits(),to);  if (cost > capacity) {    return "Not enough new carriers to land all the fighters";  }  return null;}  }
class C{  private boolean queueOrForwardRequest(Service s,String path,Operation op){  if (s == null && op.isFromReplication()) {    if (op.getAction() == Action.DELETE) {      op.complete();    } else {      failRequestServiceNotFound(op);    }    return true;  }  String nodeSelectorPath;  Service parent=null;  EnumSet<ServiceOption> options=null;  if (s != null) {    options=s.getOptions();    if (options == null) {      return false;    } else     if (options.contains(ServiceOption.UTILITY)) {      path=UriUtils.getParentPath(path);      parent=findService(path);      if (parent == null) {        if (op.getRetryCount() == 0) {          op.setRetryCount(1);        }        if (op.decrementRetriesRemaining() >= 0) {          log(Level.WARNING,"Parent for %s missing, retrying",op.getUri().getPath());          retryPauseOrOnDemandLoadConflict(op,false);          return true;        }        failRequestServiceNotFound(op);        return true;      }      options=parent.getOptions();    }    if (options == null || !options.contains(ServiceOption.OWNER_SELECTION) || options.contains(ServiceOption.FACTORY)) {      return false;    }  } else {    if (isHelperServicePath(path)) {      path=UriUtils.getParentPath(path);    }    String factoryPath=UriUtils.getParentPath(path);    if (factoryPath == null) {      failRequestServiceNotFound(op);      return true;    }    parent=findService(factoryPath);    if (parent == null) {      failRequestServiceNotFound(op);      return true;    }    options=parent.getOptions();    if (options == null || !options.contains(ServiceOption.FACTORY) || !options.contains(ServiceOption.REPLICATION)) {      return false;    }  }  if (op.isForwardingDisabled()) {    return false;  }  if (options.contains(ServiceOption.ON_DEMAND_LOAD) && op.getAction() == Action.DELETE && op.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_NO_INDEX_UPDATE)) {    if (s == null) {      op.complete();      return true;    }    return false;  }  if (parent != null) {    nodeSelectorPath=parent.getPeerNodeSelectorPath();  } else {    nodeSelectorPath=s.getPeerNodeSelectorPath();  }  op.setStatusCode(Operation.STATUS_CODE_OK);  String servicePath=path;  CompletionHandler ch=null;  Operation selectOwnerOp=Operation.createPost(null).setExpiration(op.getExpirationMicrosUtc()).setCompletion(ch);  selectOwner(nodeSelectorPath,path,selectOwnerOp);  return true;}  }
class C{  public void saveData(File file) throws IOException {synchronized (accumulators) {    ObjectOutputStream oos=null;    try {      oos=new ObjectOutputStream(new FileOutputStream(file));      oos.writeObject(accumulators);    }  finally {      if (oos != null) {        oos.close();      }    }  }}  }
class C{  public static void warning(File file,ErrorMessages message,int line,int column){  String msg=NL + "Warning";  if (file != null)   msg+=" in file \"" + file + "\"";  if (line >= 0)   msg=msg + " (line " + (line + 1)+ ")";  try {    err(msg + ": " + NL+ ErrorMessages.get(message));  } catch (  ArrayIndexOutOfBoundsException e) {    err(msg);  }  warnings++;  if (line >= 0) {    if (column >= 0)     showPosition(file,line,column); else     showPosition(file,line);  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String prop=e.getPropertyName();  if (isVisible() && (e.getSource() == optionPane) && (JOptionPane.VALUE_PROPERTY.equals(prop) || JOptionPane.INPUT_VALUE_PROPERTY.equals(prop))) {    Object value=optionPane.getValue();    if (value == JOptionPane.UNINITIALIZED_VALUE) {      return;    }    optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);    if (btnString1.equals(value)) {      if (generator == null) {        dispose();      } else {        output.setText(generator.generate());        copyToClipboard(output.getText());      }    } else {      parent.setLabel("Change settings and try again, or cancel");      dispose();    }  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature,Base64.DEFAULT))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:44.444 -0500",hash_original_method="4162893AC611CC9D36B64E02A003D671",hash_generated_method="CCDF140A01AA368F6DDADE96FB661656") public WebResourceResponse(String mimeType,String encoding,InputStream data){  mMimeType=mimeType;  mEncoding=encoding;  mInputStream=data;}  }
class C{  @SuppressWarnings("null") public void load(Element element,Object o){  Editor p=(Editor)o;  TurnoutIcon l=new TurnoutIcon(p);  String name;  try {    name=element.getAttribute("turnout").getValue();  } catch (  NullPointerException e) {    log.error("incorrect information for turnout; must use turnout name");    p.loadFailed();    return;  }  l.setTurnout(name);  Attribute a=element.getAttribute("tristate");  if ((a == null) || a.getValue().equals("true")) {    l.setTristate(true);  } else {    l.setTristate(false);  }  a=element.getAttribute("momentary");  if ((a != null) && a.getValue().equals("true")) {    l.setMomentary(true);  } else {    l.setMomentary(false);  }  a=element.getAttribute("directControl");  if ((a != null) && a.getValue().equals("true")) {    l.setDirectControl(true);  } else {    l.setDirectControl(false);  }  List<Element> states=element.getChildren();  if (states.size() > 0) {    if (log.isDebugEnabled()) {      log.debug("Main element has" + states.size() + " items");    }    Element elem=element;    Element icons=element.getChild("icons");    if (icons != null) {      List<Element> s=icons.getChildren();      states=s;      elem=icons;      if (log.isDebugEnabled()) {        log.debug("icons element has" + states.size() + " items");      }    }    for (int i=0; i < states.size(); i++) {      String state=states.get(i).getName();      if (log.isDebugEnabled()) {        log.debug("setIcon for state \"" + state + "\" and "+ _nameMap.get(state));      }      NamedIcon icon=loadIcon(l,state,elem,"TurnoutIcon \"" + name + "\": icon \""+ state+ "\" ",p);      if (icon != null) {        l.setIcon(_nameMap.get(state),icon);      } else {        log.info("TurnoutIcon \"" + name + "\": icon \""+ state+ "\" removed");        return;      }    }    log.debug(states.size() + " icons loaded for " + l.getNameString());  } else {    int rotation=0;    try {      rotation=element.getAttribute("rotate").getIntValue();    } catch (    org.jdom2.DataConversionException e) {    }catch (    NullPointerException e) {    }    if (loadTurnoutIcon("thrown",rotation,l,element,name,p) == null) {      return;    }    if (loadTurnoutIcon("closed",rotation,l,element,name,p) == null) {      return;    }    if (loadTurnoutIcon("unknown",rotation,l,element,name,p) == null) {      return;    }    if (loadTurnoutIcon("inconsistent",rotation,l,element,name,p) == null) {      return;    }  }  Element elem=element.getChild("iconmaps");  if (elem != null) {    Attribute attr=elem.getAttribute("family");    if (attr != null) {      l.setFamily(attr.getValue());    }  }  p.putItem(l);  loadCommonAttributes(l,Editor.TURNOUTS,element);}  }
class C{  private void fillIDValues() throws SQLException {  for (  X_I_SalesHistory ish : getRecords(false,m_IsImportOnlyNoErrors)) {    int AD_Org_ID=0;    if (ish.getAD_Org_ID() > 0)     AD_Org_ID=getID(MOrg.Table_Name,"AD_Org_ID = ?",ish.getAD_Org_ID());    if (AD_Org_ID <= 0 && ish.getOrgValue() != null) {      AD_Org_ID=getID(MOrg.Table_Name,"Value = ?",ish.getOrgValue());      ish.setAD_Org_ID(AD_Org_ID);    } else     ish.setAD_Org_ID(AD_Org_ID);    int C_BPartner_ID=0;    if (ish.getC_BPartner_ID() > 0)     C_BPartner_ID=getID(MBPartner.Table_Name,"C_BPartner_ID = ?",ish.getC_BPartner_ID());    if (C_BPartner_ID <= 0 && ish.getBPartnerValue() != null) {      C_BPartner_ID=getID(MBPartner.Table_Name,"Value = ?",ish.getBPartnerValue());      ish.setC_BPartner_ID(C_BPartner_ID);    } else     ish.setC_BPartner_ID(C_BPartner_ID);    int C_BP_Group_ID=0;    if (ish.getC_BP_Group_ID() > 0)     C_BP_Group_ID=getID(MBPGroup.Table_Name,"C_BP_Group_ID = ?",ish.getC_BP_Group_ID());    if (C_BP_Group_ID <= 0 && ish.getGroupValue() != null) {      C_BP_Group_ID=getID(MBPGroup.Table_Name,"Value = ?",ish.getGroupValue());      ish.setC_BP_Group_ID(C_BP_Group_ID);    } else     ish.setC_BP_Group_ID(C_BP_Group_ID);    int SalesRep_ID=0;    if (ish.getSalesRep_ID() > 0)     SalesRep_ID=getID(MUser.Table_Name,"AD_User_ID = ?",ish.getSalesRep_ID());    if (SalesRep_ID <= 0 && ish.getSalesRep_Name() != null) {      SalesRep_ID=getID(MUser.Table_Name,"Name = ?",ish.getSalesRep_Name());      ish.setSalesRep_ID(SalesRep_ID);    } else     ish.setSalesRep_ID(SalesRep_ID);    int C_SalesRegion_ID=0;    if (ish.getC_SalesRegion_ID() > 0)     C_SalesRegion_ID=getID(MSalesRegion.Table_Name,"C_SalesRegion_ID = ?",ish.getC_SalesRegion_ID());    if (C_SalesRegion_ID <= 0 && ish.getRegionName() != null) {      C_SalesRegion_ID=getID(MSalesRegion.Table_Name,"Name = ?",ish.getRegionName());      ish.setC_SalesRegion_ID(C_SalesRegion_ID);    } else     ish.setC_SalesRegion_ID(C_SalesRegion_ID);    int M_Product_ID=0;    if (ish.getM_Product_ID() > 0)     M_Product_ID=getID(MProduct.Table_Name,"M_Product_ID = ?",ish.getM_Product_ID());    if (M_Product_ID <= 0 && ish.getProductValue() != null) {      M_Product_ID=getID(MProduct.Table_Name,"Value = ?",ish.getProductValue());      ish.setM_Product_ID(M_Product_ID);    } else     ish.setM_Product_ID(M_Product_ID);    int M_Product_Category_ID=0;    if (ish.getM_Product_Category_ID() > 0)     M_Product_Category_ID=getID(MProductCategory.Table_Name,"M_Product_Category_ID = ?",ish.getM_Product_Category_ID());    if (M_Product_Category_ID <= 0 && ish.getCategoryName() != null) {      M_Product_Category_ID=getID(MProductCategory.Table_Name,"Name = ?",ish.getCategoryName());      ish.setM_Product_Category_ID(M_Product_Category_ID);    } else     ish.setM_Product_Category_ID(M_Product_Category_ID);    int M_Product_Classification_ID=0;    if (ish.getM_Product_Classification_ID() > 0)     M_Product_Classification_ID=getID(MProductClassification.Table_Name,"M_Product_Classification_ID = ?",ish.getM_Product_Classification_ID());    ish.setM_Product_Classification_ID(M_Product_Classification_ID);    int M_Product_Class_ID=0;    if (ish.getM_Product_Class_ID() > 0)     M_Product_Class_ID=getID(MProductClass.Table_Name,"M_Product_Class_ID = ?",ish.getM_Product_Class_ID());    ish.setM_Product_Class_ID(M_Product_Class_ID);    int M_Product_Group_ID=0;    if (ish.getM_Product_Group_ID() > 0)     M_Product_Group_ID=getID(MProductGroup.Table_Name,"M_Product_Group_ID = ?",ish.getM_Product_Group_ID());    ish.setM_Product_Group_ID(M_Product_Group_ID);    int M_Warehouse_ID=0;    if (ish.getM_Warehouse_ID() > 0)     M_Warehouse_ID=getID(MWarehouse.Table_Name,"M_Warehouse_ID = ?",ish.getM_Warehouse_ID());    if (M_Warehouse_ID <= 0 && ish.getWarehouseValue() != null) {      M_Warehouse_ID=getID(MWarehouse.Table_Name,"Value = ?",ish.getWarehouseValue());      ish.setM_Warehouse_ID(M_Warehouse_ID);    } else     ish.setM_Warehouse_ID(M_Warehouse_ID);    int C_Project_ID=0;    if (ish.getC_Project_ID() > 0)     C_Project_ID=getID(MProject.Table_Name,"C_Project_ID = ?",ish.getC_Project_ID());    if (C_Project_ID <= 0 && ish.getProjectName() != null) {      C_Project_ID=getID(MProject.Table_Name,"Name = ?",ish.getProjectName());      ish.setC_Project_ID(C_Project_ID);    } else     ish.setC_Project_ID(C_Project_ID);    int C_ProjectPhase_ID=0;    if (ish.getC_ProjectPhase_ID() > 0)     C_ProjectPhase_ID=getID(MProjectPhase.Table_Name,"C_ProjectPhase_ID = ?",ish.getC_ProjectPhase_ID());    ish.setC_ProjectPhase_ID(C_ProjectPhase_ID);    int C_ProjectTask_ID=0;    if (ish.getC_ProjectTask_ID() > 0)     C_ProjectTask_ID=getID(MProjectTask.Table_Name,"C_ProjectTask_ID = ?",ish.getC_ProjectTask_ID());    ish.setC_ProjectTask_ID(C_ProjectTask_ID);    int C_Campaign_ID=0;    if (ish.getC_Campaign_ID() > 0)     C_Campaign_ID=getID(MCampaign.Table_Name,"C_Campaign_ID = ?",ish.getC_Campaign_ID());    if (C_Campaign_ID <= 0 && ish.getCampaignValue() != null) {      C_Campaign_ID=getID(MCampaign.Table_Name,"Value = ?",ish.getCampaignValue());      ish.setC_Campaign_ID(C_Campaign_ID);    } else     ish.setC_Campaign_ID(C_Campaign_ID);    int C_Activity_ID=0;    if (ish.getC_Activity_ID() > 0)     C_Activity_ID=getID(MActivity.Table_Name,"C_Activity_ID = ?",ish.getC_Activity_ID());    if (C_Activity_ID <= 0 && ish.getActivityValue() != null) {      C_Activity_ID=getID(MActivity.Table_Name,"Value = ?",ish.getActivityValue());      ish.setC_Activity_ID(C_Activity_ID);    } else     ish.setC_Activity_ID(C_Activity_ID);    ish.saveEx();    StringBuffer err=new StringBuffer("");    if (ish.getAD_Org_ID() <= 0)     err.append(" @AD_Org_ID@ @NotFound@,");    if (ish.getM_Product_ID() <= 0)     err.append(" @M_Product_ID@ @NotFound@,");    if (ish.getM_Warehouse_ID() <= 0)     err.append(" @M_Warehouse_ID@ @NotFound@,");    if (ish.getC_BPartner_ID() <= 0)     err.append(" @C_BPartner_ID@ @NotFound@,");    if (err.toString() != null && err.toString().length() > 0) {      notimported++;      ish.setI_ErrorMsg(Msg.parseTranslation(getCtx(),err.toString()));      ish.saveEx();    }    commitEx();  }}  }
class C{  protected void sequence_ProjectDescription(ISerializationContext context,ProjectDescription semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void updateSelectionRectKoordinates(double x1,double x2,double y1,double y2,ModifiableHyperBoundingBox ranges){  double[] nv1=proj.fastProjectRenderToDataSpace(x1,y1);  double[] nv2=proj.fastProjectRenderToDataSpace(x2,y2);  long[] actDim=proj.getVisibleDimensions2D();  for (int d=BitsUtil.nextSetBit(actDim,0); d >= 0; d=BitsUtil.nextSetBit(actDim,d + 1)) {    ranges.setMin(d,Math.min(nv1[d],nv2[d]));    ranges.setMax(d,Math.max(nv1[d],nv2[d]));  }}  }
class C{  public LocationOperand(MethodOperand m){  type=METHOD_ACCESS;  methOp=m;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return Boolean.valueOf((((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsGetPathAttributes(getString(stack)) & MiniClientSageRenderer.FS_PATH_FILE) != 0);  } else   return Boolean.valueOf(getFile(stack).isFile());}  }
class C{  public final void assertRemsetFlushed(){  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(modBuffer.isFlushed());  }}  }
class C{  public Poly1305(final BlockCipher cipher){  if (cipher.getBlockSize() != BLOCK_SIZE) {    throw new IllegalArgumentException("Poly1305 requires a 128 bit block cipher.");  }  this.cipher=cipher;}  }
class C{  void addRow(int rowIndex,Table sourceTable){  for (int i=0; i < columnCount(); i++) {    Column column=column(i);    ColumnType type=column.type();switch (type) {case FLOAT:      FloatColumn floatColumn=(FloatColumn)column;    floatColumn.add(sourceTable.floatColumn(i).get(rowIndex));  break;case INTEGER:IntColumn intColumn=(IntColumn)column;intColumn.add(sourceTable.intColumn(i).get(rowIndex));break;case SHORT_INT:ShortColumn shortColumn=(ShortColumn)column;shortColumn.add(sourceTable.shortColumn(i).get(rowIndex));break;case LONG_INT:LongColumn longColumn=(LongColumn)column;longColumn.add(sourceTable.longColumn(i).get(rowIndex));break;case BOOLEAN:BooleanColumn booleanColumn=(BooleanColumn)column;booleanColumn.add(sourceTable.booleanColumn(i).get(rowIndex));break;case LOCAL_DATE:DateColumn localDateColumn=(DateColumn)column;localDateColumn.add(sourceTable.dateColumn(i).getInt(rowIndex));break;case LOCAL_TIME:TimeColumn timeColumn=(TimeColumn)column;timeColumn.add(sourceTable.timeColumn(i).getInt(rowIndex));break;case LOCAL_DATE_TIME:DateTimeColumn localDateTimeColumn=(DateTimeColumn)column;localDateTimeColumn.add(sourceTable.dateTimeColumn(i).getLong(rowIndex));break;case CATEGORY:CategoryColumn categoryColumn=(CategoryColumn)column;categoryColumn.add(sourceTable.categoryColumn(i).get(rowIndex));break;default :throw new RuntimeException("Unhandled column type updating columns");}}}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public RetrieveResult containerViewByType(final ManagedObjectReference container,final String morefType,final RetrieveOptions retrieveOptions,final String... morefProperties) throws RuntimeFaultFaultMsg, InvalidPropertyFaultMsg {  init();  PropertyFilterSpec[] propertyFilterSpecs=propertyFilterSpecs(container,morefType,morefProperties);  return containerViewByType(container,morefType,morefProperties,retrieveOptions,propertyFilterSpecs);}  }
class C{  LongEntry(int h,long k,VALUE v,LongEntry<VALUE> n){  value=v;  next=n;  key=k;  hash=h;}  }
class C{  public boolean isIPCSink(SootMethod method){  Set<InfoKind> infoKinds=getSinkInfoKinds(method);  for (  InfoKind kind : infoKinds) {    if ("IPC".equals(kind.toString()))     return true;  }  return false;}  }
class C{  private JEditorPane createLogArea(){  JEditorPane textArea=new JEditorPane();  textArea.setContentType("text/html");  textArea.setEditable(false);  Insets inset=new Insets(10,5,10,10);  textArea.setMargin(inset);  textArea.setSize(new Dimension(900,100));  return textArea;}  }
class C{  private double decodeTemperature(byte[] data) throws Exception {  double temperatureValue;  byte flag=data[0];  byte exponential=data[4];  short firstOctet=convertNegativeByteToPositiveShort(data[1]);  short secondOctet=convertNegativeByteToPositiveShort(data[2]);  short thirdOctet=convertNegativeByteToPositiveShort(data[3]);  int mantissa=((thirdOctet << SHIFT_LEFT_16BITS) | (secondOctet << SHIFT_LEFT_8BITS) | (firstOctet)) & HIDE_MSB_8BITS_OUT_OF_32BITS;  mantissa=getTwosComplimentOfNegativeMantissa(mantissa);  temperatureValue=(mantissa * Math.pow(10,exponential));  if ((flag & FIRST_BIT_MASK) != 0) {    temperatureValue=(float)((temperatureValue - 32) * (5 / 9.0));  }  return temperatureValue;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Supplier<Pair<Integer,JsonNode>> handleGet(StateContext state) throws HttpStatusException {  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.969 -0500",hash_original_method="0BF828F72F7601E47AA52D725EC1C4EF",hash_generated_method="EE6573A2B8B4EA11640B079D92F4EA4B") protected boolean scrollDown(TextView widget,Spannable buffer,int amount){  final Layout layout=widget.getLayout();  final int innerHeight=getInnerHeight(widget);  final int bottom=widget.getScrollY() + innerHeight;  int bottomLine=layout.getLineForVertical(bottom);  if (layout.getLineTop(bottomLine + 1) < bottom + 1) {    bottomLine+=1;  }  final int limit=layout.getLineCount() - 1;  if (bottomLine <= limit) {    bottomLine=Math.min(bottomLine + amount - 1,limit);    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(bottomLine + 1) - innerHeight);    return true;  }  return false;}  }
class C{  public void paint(Graphics g){  getRenderPolicy().paint(g);}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  public final void revertOptions(){  SettingsGroupManager.instance().revertToDefault();  BTEngine.getInstance().revertToDefaultConfiguration();  LibrarySettings.setupInitialLibraryFolders();  GUIMediator.showMessage(I18n.tr("One or more options will take effect the next time FrostWire is restarted."));}  }
class C{  public void addSelectionBoxes(List<AxisAlignedBB> list){}  }
class C{  public Bundler putBundle(String key,Bundle value){  bundle.putBundle(key,value);  return this;}  }
class C{  @Override public int estimateOutputSize(final int inLen){  if (contentCryptoHandler_ != null) {    return contentCryptoHandler_.estimateOutputSize(inLen);  } else {    return (inLen > 0) ? inLen : 0;  }}  }
class C{  @Override protected void onStartLoading(){  if (mPackageObserver == null) {    mPackageObserver=new PackageIntentReceiver(this);  }  final boolean configChange=mLastConfig.applyNewConfig(getContext().getResources());  if (takeContentChanged() || configChange) {    forceLoad();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y, x1, x2, y1, y2;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType;  int[] parts={0};  double psi=0;  Object[] rowData;  double DegreeToRad=Math.PI / 180;  double[] axes=new double[2];  double newXAxis=0;  double newYAxis=0;  double longAxis;  double shortAxis;  final double rightAngle=Math.toRadians(90);  double midX, midY;  double[] newBoundingBox=new double[4];  double slope;  double boxCentreX, boxCentreY;  double elongation;  double elongationThreshold=0.25;  double dist;  boolean outputChainVector=false;  PointsList points=new PointsList();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  String outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  int minChainLength=Integer.parseInt(args[3]);  String outputChainVectorFile=args[4];  if (!outputChainVectorFile.toLowerCase().contains("not specified")) {    outputChainVector=true;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    pointLocations=new double[numPolys * 2][2];    pointAttributes=new int[numPolys * 2][4];    int[][] polyAttributes=new int[numPolys][3];    DBFField[] fields=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("GROUP_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    ShapeFile chainVector=new ShapeFile();    if (outputChainVector) {      fields=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("GROUP_ID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      chainVector=new ShapeFile(outputChainVectorFile,ShapeType.POLYLINE,fields);    }    pointsTree=new KdTree.SqrEuclid(2,new Integer(numPolys * 2));    int recordNum;    oldProgress=-1;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      int numVertices=vertices.length;      double east=Double.NEGATIVE_INFINITY;      double west=Double.POSITIVE_INFINITY;      double north=Double.NEGATIVE_INFINITY;      double south=Double.POSITIVE_INFINITY;      for (i=0; i < numVertices; i++) {        if (vertices[i][0] > east) {          east=vertices[i][0];        }        if (vertices[i][0] < west) {          west=vertices[i][0];        }        if (vertices[i][1] > north) {          north=vertices[i][1];        }        if (vertices[i][1] < south) {          south=vertices[i][1];        }      }      midX=west + (east - west) / 2.0;      midY=south + (north - south) / 2.0;      double[][] verticesRotated=new double[numVertices][2];      int[] keyPoints=new int[4];      axes[0]=9999999;      axes[1]=9999999;      slope=0;      boxCentreX=0;      boxCentreY=0;      for (int m=0; m <= 180; m++) {        psi=-m * 0.5 * DegreeToRad;        for (n=0; n < numVertices; n++) {          x=vertices[n][0] - midX;          y=vertices[n][1] - midY;          verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));          verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));        }        int[] currentKeyPoints=new int[4];        newBoundingBox[0]=Double.MAX_VALUE;        newBoundingBox[1]=Double.MIN_VALUE;        newBoundingBox[2]=Double.MAX_VALUE;        newBoundingBox[3]=Double.MIN_VALUE;        for (n=0; n < numVertices; n++) {          x=verticesRotated[n][0];          y=verticesRotated[n][1];          if (x < newBoundingBox[0]) {            newBoundingBox[0]=x;            currentKeyPoints[0]=n;          }          if (x > newBoundingBox[1]) {            newBoundingBox[1]=x;            currentKeyPoints[1]=n;          }          if (y < newBoundingBox[2]) {            newBoundingBox[2]=y;            currentKeyPoints[2]=n;          }          if (y > newBoundingBox[3]) {            newBoundingBox[3]=y;            currentKeyPoints[3]=n;          }        }        newXAxis=newBoundingBox[1] - newBoundingBox[0];        newYAxis=newBoundingBox[3] - newBoundingBox[2];        if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {          axes[0]=newXAxis;          axes[1]=newYAxis;          if (axes[0] > axes[1]) {            slope=-psi;          } else {            slope=-(rightAngle + psi);          }          x=newBoundingBox[0] + newXAxis / 2;          y=newBoundingBox[2] + newYAxis / 2;          boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));          boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));          keyPoints=currentKeyPoints.clone();        }      }      longAxis=Math.max(axes[0],axes[1]);      shortAxis=Math.min(axes[0],axes[1]);      elongation=1 - shortAxis / longAxis;      slope=AxialData.rationalizeAxialAngle(slope);      x1=boxCentreX + longAxis / 2.0 * Math.cos(slope);      y1=boxCentreY + longAxis / 2.0 * Math.sin(slope);      x2=boxCentreX - longAxis / 2.0 * Math.cos(slope);      y2=boxCentreY - longAxis / 2.0 * Math.sin(slope);      int keyPoint1=-1;      int keyPoint2=-1;      double minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x1) * (x - x1) + (y - y1) * (y - y1);        if (dist < minDist) {          keyPoint1=keyPoints[i];          minDist=dist;        }      }      minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x2) * (x - x2) + (y - y2) * (y - y2);        if (dist < minDist) {          keyPoint2=keyPoints[i];          minDist=dist;        }      }      if (elongation > elongationThreshold) {        i=(recordNum - 1) * 2;        x=vertices[keyPoint1][0];        y=vertices[keyPoint1][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i));        pointLocations[i][0]=x;        pointLocations[i][1]=y;        pointAttributes[i][0]=recordNum;        pointAttributes[i][1]=1;        x=vertices[keyPoint2][0];        y=vertices[keyPoint2][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i + 1));        pointLocations[i + 1][0]=x;        pointLocations[i + 1][1]=y;        pointAttributes[i + 1][0]=recordNum;        pointAttributes[i + 1][1]=2;      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((recordNum * 100.0) / numPolys);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    oldProgress=-1;    for (i=0; i < (numPolys * 2); i++) {      if (pointAttributes[i][0] > 0) {        int neighbourID=findConnectedNeighbour(i);        if (neighbourID >= 0 && findConnectedNeighbour(neighbourID) == i) {          pointAttributes[i][2]=pointAttributes[neighbourID][0];          pointAttributes[neighbourID][2]=pointAttributes[i][0];          pointAttributes[i][3]=neighbourID;          pointAttributes[neighbourID][3]=i;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys * 2));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    List<Integer> chainPolys=new ArrayList<Integer>();    List<Integer> chainKeyPoints=new ArrayList<Integer>();    oldProgress=-1;    int currentGroupID=1;    int activeNode=0, lastNode=0;    int currentPoly=0;    for (i=0; i < numPolys; i++) {      if (polyAttributes[i][0] == 0) {        int linkedEndNodes=0;        if (pointAttributes[i * 2][2] > 0) {          linkedEndNodes++;          activeNode=i * 2;          lastNode=i * 2 + 1;        }        if (pointAttributes[i * 2 + 1][2] > 0) {          linkedEndNodes++;          activeNode=i * 2 + 1;          lastNode=i * 2;        }        if (linkedEndNodes == 1) {          polyAttributes[i][0]=currentGroupID;          boolean flag=true;          currentPoly=i;          chainPolys.clear();          chainPolys.add(currentPoly);          chainKeyPoints.clear();          points.clear();          points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);          points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);          do {            polyAttributes[currentPoly][0]=currentGroupID;            if (pointAttributes[activeNode][0] == pointAttributes[lastNode][0]) {              if (pointAttributes[activeNode][2] > 0) {                currentPoly=pointAttributes[activeNode][2] - 1;                lastNode=activeNode;                activeNode=pointAttributes[activeNode][3];                chainPolys.add(currentPoly);              } else {                if (chainPolys.size() >= minChainLength) {                  for (                  int c : chainPolys) {                    rowData=new Object[2];                    rowData[0]=new Double(c + 1);                    rowData[1]=new Double(currentGroupID);                    output.addRecord(input.getRecord(c).getGeometry(),rowData);                  }                  chainPolys.clear();                  if (outputChainVector) {                    rowData=new Object[1];                    rowData[0]=new Double(currentGroupID);                    chainVector.addRecord(new PolyLine(parts,points.getPointsArray()),rowData);                  }                  currentGroupID++;                }                flag=false;              }            } else {              if (pointAttributes[activeNode][1] == 1) {                lastNode=activeNode;                activeNode++;              } else {                lastNode=activeNode;                activeNode--;              }              points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);              points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    output.write();    if (outputChainVector) {      chainVector.write();    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  private static void touch(final File file) throws IOException {  final OutputStream out=new FileOutputStream(file);  try {    out.write('+');  }  finally {    out.close();  }}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  @Override public int hashCode(){  return distributedMember.hashCode();}  }
class C{  public GenericObjectEditorDialog(Dialog owner,String title,Dialog.ModalityType modality){  super(owner,title,modality);}  }
class C{  public DeploymentDisplay(ClientGUI clientgui){  super(clientgui);  clientgui.getClient().getGame().addGameListener(this);  clientgui.getBoardView().addBoardViewListener(this);  setupStatusBar(Messages.getString("DeploymentDisplay.waitingForDeploymentPhase"));  buttons=new HashMap<DeployCommand,MegamekButton>((int)(DeployCommand.values().length * 1.25 + 0.5));  for (  DeployCommand cmd : DeployCommand.values()) {    String title=Messages.getString("DeploymentDisplay." + cmd.getCmd());    MegamekButton newButton=new MegamekButton(title,SkinSpecification.UIComponents.PhaseDisplayButton.getComp());    newButton.addActionListener(this);    newButton.setActionCommand(cmd.getCmd());    newButton.setEnabled(false);    buttons.put(cmd,newButton);  }  numButtonGroups=(int)Math.ceil((buttons.size() + 0.0) / buttonsPerGroup);  butDone.setText("<html><b>" + Messages.getString("DeploymentDisplay.Deploy") + "</b></html>");  butDone.setEnabled(false);  layoutScreen();  setupButtonPanel();}  }
class C{  @LogMessageDoc(level="INFO",message="Listening for internal floodlight RPC on {port}",explanation="The internal RPC service is ready for connections") protected void startServer(ChannelPipelineFactory pipelineFactory){  final ServerBootstrap bootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(bossExecutor,workerExecutor));  bootstrap.setOption("reuseAddr",true);  bootstrap.setOption("child.keepAlive",true);  bootstrap.setOption("child.tcpNoDelay",true);  bootstrap.setOption("child.sendBufferSize",SEND_BUFFER_SIZE);  bootstrap.setOption("child.receiveBufferSize",SEND_BUFFER_SIZE);  bootstrap.setPipelineFactory(pipelineFactory);  serverBootstrap=bootstrap;  int port=syncManager.getClusterConfig().getNode().getPort();  InetSocketAddress sa;  String listenAddress=syncManager.getClusterConfig().getListenAddress();  if (listenAddress != null)   sa=new InetSocketAddress(listenAddress,port); else   sa=new InetSocketAddress(port);  cg.add(bootstrap.bind(sa));  logger.info("Listening for internal floodlight RPC on {}",sa);}  }
class C{  private static void insertCommentsInCu(CompilationUnit cu,CommentsCollection commentsCollection){  if (commentsCollection.size() == 0)   return;  List<Comment> comments=commentsCollection.getAll();  PositionUtils.sortByBeginPosition(comments);  List<Node> children=cu.getChildrenNodes();  PositionUtils.sortByBeginPosition(children);  if (cu.getPackage() != null && (children.size() == 0 || PositionUtils.areInOrder(comments.get(0),children.get(0)))) {    cu.setComment(comments.get(0));    comments.remove(0);  }  insertCommentsInNode(cu,comments);}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  s=domesticAttr.getParentNode();  assertNull("attrParentNodeNullAssert",s);}  }
class C{  public static HistoryEvent createMerged(Recordable recordable,String referrer,long mergedId){  return createMerged(System.currentTimeMillis(),recordable,referrer,mergedId);}  }
class C{  public void CopyFrom(ToXMLStream xmlListener){  setWriter(xmlListener.m_writer);  String encoding=xmlListener.getEncoding();  setEncoding(encoding);  setOmitXMLDeclaration(xmlListener.getOmitXMLDeclaration());  m_ispreserve=xmlListener.m_ispreserve;  m_preserves=xmlListener.m_preserves;  m_isprevtext=xmlListener.m_isprevtext;  m_doIndent=xmlListener.m_doIndent;  setIndentAmount(xmlListener.getIndentAmount());  m_startNewLine=xmlListener.m_startNewLine;  m_needToOutputDocTypeDecl=xmlListener.m_needToOutputDocTypeDecl;  setDoctypeSystem(xmlListener.getDoctypeSystem());  setDoctypePublic(xmlListener.getDoctypePublic());  setStandalone(xmlListener.getStandalone());  setMediaType(xmlListener.getMediaType());  m_encodingInfo=xmlListener.m_encodingInfo;  m_spaceBeforeClose=xmlListener.m_spaceBeforeClose;  m_cdataStartCalled=xmlListener.m_cdataStartCalled;}  }
class C{  protected boolean lineEnd(TextView widget,Spannable buffer){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:35.208 -0500",hash_original_method="51D4B09F0769DB498C88D93C1DD1D610",hash_generated_method="51243C913151924050D95A4116E417C8") public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  public void printStackTrace(PrintStream output){synchronized (output) {    super.printStackTrace(output);    Throwable throwable=getException();    if (throwable != null) {      if (this.fileName != null) {        output.print("Caused in ");        output.print(this.fileName);        output.print(" by: ");      } else {        output.print("Caused by: ");      }      throwable.printStackTrace(output);    }  }}  }
class C{  protected static String indent(final int height){  if (height == -1) {    return "";  }  return ws.substring(0,Math.min(ws.length(),height * 4));}  }
class C{  @GET @Path("backup/info/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public BackupInfo queryBackupInfo(@QueryParam("backupname") String backupName,@QueryParam("isLocal") @DefaultValue("false") boolean isLocal){  log.info("Query backup info backupName={} isLocal={}",backupName,isLocal);  try {    if (isLocal) {      return backupOps.queryLocalBackupInfo(backupName);    }    checkExternalServer();    SchedulerConfig cfg=backupScheduler.getCfg();    BackupInfo backupInfo=backupOps.getBackupInfo(backupName,getExternalServerClient(cfg));    log.info("The backupInfo={}",backupInfo);    return backupInfo;  } catch (  Exception e) {    log.error("Failed to query external backup info",e);    throw APIException.internalServerErrors.queryExternalBackupFailed(e);  }}  }
class C{  @SuppressWarnings("SameParameterValue") public static TerminalEmulatorColorConfiguration newInstance(TerminalEmulatorPalette colorPalette){  return new TerminalEmulatorColorConfiguration(colorPalette,true);}  }
class C{  public static void reloadUserDataCache(List<UserData> userDataList){  Map<String,UserData> users=Maps.newConcurrentMap();  if (userDataList != null) {    for (    UserData userData : userDataList) {      users.put(userData.getUsername(),userData);    }  }  users.put("root",UserData.restoreFromESData("root",rootPassword,"/*"));  UserAuthenticator.users=users;}  }
class C{  public synchronized void associateAll(Primitive associate,Vertex target,Primitive type){  associateAll(this.network.createVertex(associate),target,this.network.createVertex(type));}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JTextPane(StyledDocument doc){  this();  setStyledDocument(doc);}  }
class C{  @RequestMapping(value=PARTITION_KEY_GROUPS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_PARTITION_KEY_GROUPS_POST) public PartitionKeyGroup createPartitionKeyGroup(@RequestBody PartitionKeyGroupCreateRequest request){  return partitionKeyGroupService.createPartitionKeyGroup(request);}  }
class C{  public ListResponse list(final ListRequest request) throws ApiException {  final List<String> args=defaultArgs();  args.add("list");  final CommandLineResult result=runCommand(null,args,new File(request.getProjectPath()),singletonList(request.getTargetPath()),request.getUsername(),request.getPassword());  return newDto(ListResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrorOutput(result.getStderr());}  }
class C{  @Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString("\u00a77" + tileEntity.getInventoryName(),this.xSize / 2 - 30,6,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.radar.coords"),155,18,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.misc.x") + " " + (int)Math.round(mouseOverCoords.x)+ " "+ LangUtils.localize("gui.misc.z")+ " "+ (int)Math.round(mouseOverCoords.y),155,30,4210752);  this.fontRendererObj.drawString("\u00a76" + this.info,155,42,4210752);  this.fontRendererObj.drawString("\u00a74" + this.info2,155,54,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.radar.zoneSafe"),152,70,4210752);  this.textFieldSafetyZone.drawTextBox();  this.fontRendererObj.drawString(LangUtils.localize("gui.radar.zoneAlarm"),150,85,4210752);  this.textFieldAlarmRange.drawTextBox();  this.fontRendererObj.drawString(LangUtils.localize("gui.misc.freq"),155,100,4210752);  this.textFieldFrequency.drawTextBox();  String color="\u00a74";  String status=LangUtils.localize("gui.misc.idle");  if (this.tileEntity.getEnergy() >= tileEntity.ENERGY_USAGE) {    color="\u00a72";    status=LangUtils.localize("gui.radar.on");  } else {    status=LangUtils.localize("gui.radar.nopower");  }  this.fontRendererObj.drawString(color + status,155,150,4210752);}  }
class C{  public Iterator nodes(){  return m_nodeTuples.iterator(nodeRows());}  }
class C{  public Resequencer createResequencer(){  ResequencerImpl resequencer=new ResequencerImpl();  return resequencer;}  }
class C{  private ScheduleItem checkScheduleItem(ScheduleItem si,Car car,Track track){  if (!car.getTypeName().equals(si.getTypeName()) || si.getReceiveLoadName().equals(ScheduleItem.NONE) || si.getReceiveLoadName().equals(CarLoads.instance().getDefaultEmptyName())|| si.getReceiveLoadName().equals(CarLoads.instance().getDefaultLoadName())) {    log.debug("Not using track ({}) schedule request type ({}) road ({}) load ({})",track.getName(),si.getTypeName(),si.getRoadName(),si.getReceiveLoadName());    if (!Setup.getRouterBuildReportLevel().equals(Setup.BUILD_REPORT_NORMAL)) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSpurScheduleNotUsed"),new Object[]{track.getLocation().getName(),track.getName(),track.getScheduleName(),si.getId(),si.getTypeName(),si.getRoadName(),si.getReceiveLoadName()}));    }    return null;  }  if (!si.getRoadName().equals(ScheduleItem.NONE) && !car.getRoadName().equals(si.getRoadName())) {    log.debug("Not using track ({}) schedule request type ({}) road ({}) load ({})",track.getName(),si.getTypeName(),si.getRoadName(),si.getReceiveLoadName());    if (!Setup.getRouterBuildReportLevel().equals(Setup.BUILD_REPORT_NORMAL)) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSpurScheduleNotUsed"),new Object[]{track.getName(),track.getScheduleName(),si.getId(),si.getTypeName(),si.getRoadName(),si.getReceiveLoadName()}));    }    return null;  }  if (!_train.acceptsLoad(si.getReceiveLoadName(),si.getTypeName())) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrainNotNewLoad"),new Object[]{_train.getName(),si.getReceiveLoadName(),track.getLocation().getName(),track.getName()}));    return null;  }  if (!car.getTrack().shipsLoad(si.getReceiveLoadName(),car.getTypeName())) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackNotNewLoad"),new Object[]{car.getTrackName(),si.getReceiveLoadName(),track.getLocation().getName(),track.getName()}));    return null;  }  if (!si.getSetoutTrainScheduleId().equals(ScheduleItem.NONE) && !TrainManager.instance().getTrainScheduleActiveId().equals(si.getSetoutTrainScheduleId())) {    log.debug("Schedule item isn't active");    TrainSchedule aSch=TrainScheduleManager.instance().getScheduleById(TrainManager.instance().getTrainScheduleActiveId());    TrainSchedule tSch=TrainScheduleManager.instance().getScheduleById(si.getSetoutTrainScheduleId());    String aName="";    String tName="";    if (aSch != null) {      aName=aSch.getName();    }    if (tSch != null) {      tName=tSch.getName();    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildScheduleNotActive"),new Object[]{track.getName(),si.getId(),tName,aName}));    return null;  }  if (!si.getRandom().equals(ScheduleItem.NONE)) {    try {      int value=Integer.parseInt(si.getRandom());      double random=100 * Math.random();      log.debug("Selected random {}, created random {}",si.getRandom(),random);      if (random > value) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildScheduleRandom"),new Object[]{track.getName(),track.getScheduleName(),si.getId(),value,random}));        return null;      }    } catch (    NumberFormatException e) {      log.error("Random value {} isn't a number",si.getRandom());    }  }  log.debug("Found track ({}) schedule item id ({}) for car ({})",track.getName(),si.getId(),car.toString());  car.setScheduleItemId(si.getId());  return si;}  }
class C{  public DefaultEntity(String name,String text){  super(name,text);}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  Context ctx=viewHolder.itemView.getContext();  UIUtils.setBackground(viewHolder.view,FastAdapterUIUtils.getSelectableBackground(ctx,Color.RED,true));  StringHolder.applyTo(name,viewHolder.name);  StringHolder.applyToOrHide(description,viewHolder.description);}  }
class C{  protected DiscreteVariableAnalysis analyzeVariables(Set<String> excludedVariables) throws IOException {  DiscreteVariableAnalysis variableAnalysis=new DiscreteVariableAnalysis();  extractVariables(excludedVariables,variableAnalysis);  extractVariableValues(excludedVariables,variableAnalysis);  return variableAnalysis;}  }
class C{  public FileUtil(File file,String filter,String action,String p1,String p2){  if (action == null || action.length() == 0)   System.err.println("FileUtil: No Action"); else   if (!validAction(action))   System.err.println("FileUtil: Action not valid: " + action + ACTIONS); else   if (file == null)   System.err.println("FileUtil: No Input file"); else   if (!file.exists())   System.err.println("FileUtil: Input file does not exist: " + file); else {    System.out.println("FileUtil (" + file + ", Filter="+ filter+ ", Action="+ action+ ")");    m_filterString=filter;    processFile(file,p1,p2);    System.out.println("FileUtil  Process count = " + m_count + "  actions="+ m_actions);  }}  }
class C{  private static CreateImageFromVmResponse checkCreateImageResponse(CreateImageFromVmResponse createImageFromVmResponse) throws RpcException {  logger.info("Checking {}",createImageFromVmResponse);switch (createImageFromVmResponse.getResult()) {case OK:    break;case INVALID_VM_POWER_STATE:  throw new InvalidVmPowerStateException(createImageFromVmResponse.getError());case IMAGE_ALREADY_EXIST:throw new ImageAlreadyExistException(createImageFromVmResponse.getError());case VM_NOT_FOUND:throw new VmNotFoundException(createImageFromVmResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(createImageFromVmResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",createImageFromVmResponse.getResult()));}return createImageFromVmResponse;}  }
class C{  public static double ellipsoidalDistance(LatLon p1,LatLon p2,double equatorialRadius,double polarRadius){  final double F=(equatorialRadius - polarRadius) / equatorialRadius;  final double R=1.0 - F;  final double EPS=0.5E-13;  if (p1 == null || p2 == null) {    throw new IllegalArgumentException("Position Is Null");  }  double GLAT1=p1.getLatitude().radians;  double GLAT2=p2.getLatitude().radians;  double TU1=R * Math.sin(GLAT1) / Math.cos(GLAT1);  double TU2=R * Math.sin(GLAT2) / Math.cos(GLAT2);  double CU1=1. / Math.sqrt(TU1 * TU1 + 1.);  double SU1=CU1 * TU1;  double CU2=1. / Math.sqrt(TU2 * TU2 + 1.);  double S=CU1 * CU2;  double BAZ=S * TU2;  double FAZ=BAZ * TU1;  double GLON1=p1.getLongitude().radians;  double GLON2=p2.getLongitude().radians;  double X=GLON2 - GLON1;  double D, SX, CX, SY, CY, Y, SA, C2A, CZ, E, C;  do {    SX=Math.sin(X);    CX=Math.cos(X);    TU1=CU2 * SX;    TU2=BAZ - SU1 * CU2 * CX;    SY=Math.sqrt(TU1 * TU1 + TU2 * TU2);    CY=S * CX + FAZ;    Y=Math.atan2(SY,CY);    SA=S * SX / SY;    C2A=-SA * SA + 1.;    CZ=FAZ + FAZ;    if (C2A > 0.) {      CZ=-CZ / C2A + CY;    }    E=CZ * CZ * 2. - 1.;    C=((-3. * C2A + 4.) * F + 4.) * C2A * F / 16.;    D=X;    X=((E * CY * C + CZ) * SY * C + Y) * SA;    X=(1. - C) * X * F + GLON2 - GLON1;  } while (Math.abs(D - X) > EPS);  X=Math.sqrt((1. / R / R - 1.) * C2A + 1.) + 1.;  X=(X - 2.) / X;  C=1. - X;  C=(X * X / 4. + 1.) / C;  D=(0.375 * X * X - 1.) * X;  X=E * CY;  S=1. - E - E;  S=((((SY * SY * 4. - 3.) * S * CZ* D / 6. - X) * D / 4. + CZ) * SY * D + Y) * C * equatorialRadius* R;  return S;}  }
class C{  private double[] calculateNormal(double[] p1,double[] p2,double[] p3){  double[] u=getVector(p1,p2);  double[] v=getVector(p1,p3);  return normalize(crossProduct(u,v));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean onCoverRightclick(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity,EntityPlayer aPlayer,float aX,float aY,float aZ){  return false;}  }
class C{  public void flip(long index){  assert index >= 0 && index < numBits : "index=" + index + " numBits="+ numBits;  int wordNum=(int)(index >> 6);  long bitmask=1L << index;  bits[wordNum]^=bitmask;}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  private void addResolutions(AST2BOpContext ctx,JoinGroupNode g,ProjectionNode p){  if (p == null) {    return;  }  for (  AssignmentNode a : p) {    IVariable<IV> var=a.getVar();    if (a.getValueExpression() != var) {      continue;    }    boolean replaced=addResolutionIfSuffix(ctx,g,"AltLabel",SKOS.ALT_LABEL,var) || addResolutionIfSuffix(ctx,g,"Label",RDFS.LABEL,var) || addResolutionIfSuffix(ctx,g,"Description",DESCRIPTION,var);    if (replaced && log.isDebugEnabled()) {      log.debug("Resolving " + var + " using a label lookup.");    }  }}  }
class C{  public void createCashBasedJournalEntriesAndReversalsForSavingsTax(final Office office,final String currencyCode,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long savingsId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal,final List<TaxPaymentDTO> taxDetails){  for (  TaxPaymentDTO taxPaymentDTO : taxDetails) {    if (taxPaymentDTO.getAmount() != null) {      if (taxPaymentDTO.getCreditAccountId() == null) {        createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeCredited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal);      } else {        createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,taxPaymentDTO.getCreditAccountId(),savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal);      }    }  }  createCashBasedDebitJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeDebited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,amount,isReversal);}  }
class C{  public boolean rta(){  return soot.PhaseOptions.getBoolean(options,"rta");}  }
class C{  public void save(File file){  filename=file.getName();  if (frame != null)   frame.setTitle(filename);  String suffix=filename.substring(filename.lastIndexOf('.') + 1);  suffix=suffix.toLowerCase();  if (suffix.equals("jpg") || suffix.equals("png")) {    try {      ImageIO.write(image,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    System.out.println("Error: filename must end in .jpg or .png");  }}  }
class C{  public void removeHandler(@Nullable Handler handler) throws SecurityException {  throw new RuntimeException();}  }
class C{  public void init(File sqlFile,String sqlDefsSection,Connection conn,Map<String,String> configParameters) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document sqlDoc=builder.parse(sqlFile);  init(sqlDoc,sqlDefsSection,conn,configParameters);}  }
class C{  public static byte[] decode(byte[] data){  int len=data.length / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static final String moveToString(Position pos,Move move,boolean longForm,boolean localized){  return moveToString(pos,move,longForm,localized,null);}  }
class C{  public WireLogOutputStream(final OutputStream out,final Wire wire){  super(out);  this.out=out;  this.wire=wire;}  }
class C{  private void verifyIsDelegatingForAppenderFilter(final Level level,final boolean expectIsDelegating) throws Exception {  assertThat(expectIsDelegating,is(true));  writeAppenderFilterConfigFile(this.configFile,level);  this.appenderContext.reconfigure();  assertThat(this.logger.getLevel(),is(level));  assertThat(this.logger.isTraceEnabled(),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(((FastLogger)this.logger).isDelegating(),is(expectIsDelegating));}  }
class C{  void enterInterruptImpl(Dim.StackFrame lastFrame,String threadTitle,String alertMessage){  statusBar.setText("Thread: " + threadTitle);  showStopLine(lastFrame);  if (alertMessage != null) {    MessageDialogWrapper.showMessageDialog(this,alertMessage,"Exception in Script",JOptionPane.ERROR_MESSAGE);  }  updateEnabled(true);  Dim.ContextData contextData=lastFrame.contextData();  JComboBox ctx=context.context;  List<String> toolTips=context.toolTips;  context.disableUpdate();  int frameCount=contextData.frameCount();  ctx.removeAllItems();  ctx.setSelectedItem(null);  toolTips.clear();  for (int i=0; i < frameCount; i++) {    Dim.StackFrame frame=contextData.getFrame(i);    String url=frame.getUrl();    int lineNumber=frame.getLineNumber();    String shortName=url;    if (url.length() > 20) {      shortName="..." + url.substring(url.length() - 17);    }    String location="\"" + shortName + "\", line "+ lineNumber;    ctx.insertItemAt(location,i);    location="\"" + url + "\", line "+ lineNumber;    toolTips.add(location);  }  context.enableUpdate();  ctx.setSelectedIndex(0);  ctx.setMinimumSize(new Dimension(50,ctx.getMinimumSize().height));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static float svgHorizontalLengthToUserSpace(String s,String attr,Context ctx){  return svgLengthToUserSpace(s,attr,HORIZONTAL_LENGTH,ctx);}  }
class C{  @HttpUrl(value="^/clientinfo/(*)/$",weight=1) public void addClientFilterSecond(int clientId,FilterChain chain) throws SQLException {}  }
class C{  private Base64(){}  }
class C{  public void append(StringBuffer buffer,String fieldName,float value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  private void sendQuickReply(String quickReplyMessage){  hideSoftKeyboard();  if (quickReplyMessage != null) {    if (quickReplyMessage.length() > 0 && quickReplySmsMessage != null) {      Intent i=new Intent(SmsPopupActivity.this.getApplicationContext(),SmsPopupUtilsService.class);      i.setAction(SmsPopupUtilsService.ACTION_QUICKREPLY);      i.putExtras(quickReplySmsMessage.toBundle());      i.putExtra(SmsMmsMessage.EXTRAS_QUICKREPLY,quickReplyMessage);      if (BuildConfig.DEBUG)       Log.v("Sending message to " + quickReplySmsMessage.getContactName());      WakefulBroadcastReceiver.startWakefulService(getApplicationContext(),i);      Toast.makeText(this,R.string.quickreply_sending_toast,Toast.LENGTH_LONG).show();      dismissDialog(DIALOG_QUICKREPLY);      removeActiveMessage();    } else {      Toast.makeText(this,R.string.quickreply_nomessage_toast,Toast.LENGTH_LONG).show();    }  }}  }
class C{  public void testSeekFinalFilteredEvent() throws Exception {  File logDir=prepareLogDir("testSeekFinalFilteredEvent");  DiskLog log=openLog(logDir,false);  long seqno=30;  LogConnection conn=log.connect(false);  THLEvent e1=this.createTHLEvent(seqno++);  conn.store(e1,true);  long lastSeqno=seqno + 4;  THLEvent e2=this.createFilteredTHLEvent(seqno,lastSeqno,(short)0);  conn.store(e2,true);  DiskLog log2=openLog(logDir,true);  log2.validate();  LogConnection conn2=log2.connect(true);  logger.info("Seeking seqno: " + seqno);  boolean found=conn2.seek(seqno);  Assert.assertTrue("Found initial seqno with seek: " + seqno,found);  THLEvent foundEvent=conn2.next(false);  Assert.assertEquals("Expect the filtered event",foundEvent.getSeqno(),seqno);  seqno=lastSeqno + 1;  THLEvent e3=this.createTHLEvent(seqno);  conn.store(e3,true);  THLEvent foundEvent3=conn2.next();  Assert.assertEquals("Expect the filtered event",e3.getSeqno(),foundEvent3.getSeqno());  conn.release();  log.release();  conn2.release();  log2.release();}  }
class C{  protected JSONArray(Object array){  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.append(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new RuntimeException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  @Benchmark public long test2_UsingForEachAndMapEntry() throws IOException {  long i=0;  for (  Map.Entry<Integer,Integer> pair : map.entrySet()) {    i+=pair.getKey() + pair.getValue();  }  return i;}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  public Plugin(File file) throws IOException {  this.file=file;  this.archive=new JarFile(this.file);  this.classLoader=makeInitialClassloader();  Tools.addResourceSource(new ResourceSource(this.classLoader));  fetchMetaData();  this.classLoader.setPluginKey(getExtensionId());  if (!RapidMiner.getExecutionMode().isHeadless()) {    RapidMiner.getSplashScreen().addExtension(this);  }}  }
class C{  public String urlname(){  return (this.alternative_urlname == null) ? MultiProtocolURL.unescape(urlstring()) : this.alternative_urlname;}  }
class C{  public static ByteArray toByteArray(String s){  try {    return new ByteArray(s.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException(e);  }}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  public void testRemoteBrokerHasConsumer() throws Exception {  bridgeBrokers("BrokerA","BrokerB");  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  Thread.sleep(2000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT);  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT,msgsB.getMessageCount());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.backgroundPaint=SerialUtilities.readPaint(stream);  this.foregroundPaint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=indexMap.get(vars.get(i));  }  ICovarianceMatrix newCovMatrix=covMatrix.getSubmatrix(indices);  double alphaNew=getAlpha();  return new IndTestFisherZ(newCovMatrix,alphaNew);}  }
class C{  public static int mainInit(final OutputStream outStream,CommandLookup info){  final PrintStream psoutStream=new PrintStream(outStream);  try {    printLicense(psoutStream,info);  }  finally {    psoutStream.flush();  }  return 0;}  }
class C{  public Ellipsoid(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius,Angle heading,Angle tilt,Angle roll){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.heading=heading;  this.tilt=tilt;  this.roll=roll;  this.setUpGeometryCache();}  }
class C{  protected void doDecodeSharedObject(SharedObjectMessage so,IoBuffer in,Input input){  Input amf3Input=new org.red5.io.amf3.Input(in);  while (in.hasRemaining()) {    final ISharedObjectEvent.Type type=SharedObjectTypeMapping.toType(in.get());    if (type == null) {      in.skip(in.remaining());      return;    }    String key=null;    Object value=null;    final int length=in.getInt();    if (type == ISharedObjectEvent.Type.CLIENT_STATUS) {      key=input.getString();      value=input.getString();    } else     if (type == ISharedObjectEvent.Type.CLIENT_UPDATE_DATA) {      key=null;      final Map<String,Object> map=new HashMap<String,Object>();      final int start=in.position();      while (in.position() - start < length) {        String tmp=input.getString();        map.put(tmp,deserializer.deserialize(input,Object.class));      }      value=map;    } else     if (type != ISharedObjectEvent.Type.SERVER_SEND_MESSAGE && type != ISharedObjectEvent.Type.CLIENT_SEND_MESSAGE) {      if (length > 0) {        key=input.getString();        if (length > key.length() + 2) {          byte objType=in.get();          in.position(in.position() - 1);          Input propertyInput;          if (objType == AMF.TYPE_AMF3_OBJECT && !(input instanceof org.red5.io.amf3.Input)) {            propertyInput=amf3Input;          } else {            propertyInput=input;          }          value=deserializer.deserialize(propertyInput,Object.class);        }      }    } else {      final int start=in.position();      key=deserializer.deserialize(input,String.class);      final List<Object> list=new LinkedList<Object>();      while (in.position() - start < length) {        byte objType=in.get();        in.position(in.position() - 1);        Input propertyInput;        if (objType == AMF.TYPE_AMF3_OBJECT && !(input instanceof org.red5.io.amf3.Input)) {          propertyInput=amf3Input;        } else {          propertyInput=input;        }        Object tmp=deserializer.deserialize(propertyInput,Object.class);        list.add(tmp);      }      value=list;    }    so.addEvent(type,key,value);  }}  }
class C{  public final boolean isAbstract(){  return Modifier.isAbstract(getModifiers());}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  MonitoringEventQueryResult(EventMarshaller marshaller,Writer out){  _out=out;  _marshaller=marshaller;}  }
class C{  public void testIssue492() throws Exception {  doTestIssue492(false);  doTestIssue492(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.048 -0500",hash_original_method="BEC503CA854BAF195D783D6731B76102",hash_generated_method="C371817E500B8F6A2040126BFF50B869") public DHPublicKeySpec(BigInteger y,BigInteger p,BigInteger g){  this.y=y;  this.p=p;  this.g=g;}  }
class C{  public void clearErrorList(){  clear(Port.CLEAR_META_DATA_ERRORS);}  }
class C{  public TLongFloatHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public void deliverResult(List<AppEntry> apps){  if (isReset()) {    if (apps != null) {      onReleaseResources(apps);    }  }  List<AppEntry> oldApps=mApps;  mApps=apps;  if (isStarted()) {    super.deliverResult(apps);  }  if (oldApps != null) {    onReleaseResources(oldApps);  }}  }
class C{  public ObjectFactory(){}  }
class C{  @Deprecated public void addHelpMenuItem(JMenuItem menuItem){  getHelpMenus().add(menuItem);}  }
class C{  private long rotateLeft(long x,long y){  return ((x << (y & (wordSize - 1))) | (x >>> (wordSize - (y & (wordSize - 1)))));}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  int crossOverUp(int index,E x){  if (index == 0) {    queue[0]=x;    return 0;  }  int parentIndex=getParentIndex(index);  E parentElement=elementData(parentIndex);  if (parentIndex != 0) {    int grandparentIndex=getParentIndex(parentIndex);    int uncleIndex=getRightChildIndex(grandparentIndex);    if (uncleIndex != parentIndex && getLeftChildIndex(uncleIndex) >= size) {      E uncleElement=elementData(uncleIndex);      if (ordering.compare(uncleElement,parentElement) < 0) {        parentIndex=uncleIndex;        parentElement=uncleElement;      }    }  }  if (ordering.compare(parentElement,x) < 0) {    queue[index]=parentElement;    queue[parentIndex]=x;    return parentIndex;  }  queue[index]=x;  return index;}  }
class C{  public static char charAt(StyledText text,int position){  return text.getContent().getTextRange(position,1).charAt(0);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof AddressAttribute))   return false;  if (obj == this)   return true;  AddressAttribute att=(AddressAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.getFamily() != getFamily() || (att.getAddress() != null && !address.equals(att.getAddress())))   return false;  if (att.getAddress() == null && getAddress() == null)   return true;  return true;}  }
class C{  public boolean equivalent(INode state){  return equals(state);}  }
class C{  @Override public void run(){  String inputImageFile=args[0];  String imageGCPFile=args[1];  String mapGCPFile=args[2];  String outputFile=args[3];  ImageRectificationPanel ird=new ImageRectificationPanel(inputImageFile,imageGCPFile,mapGCPFile,outputFile,myHost);  returnData(ird);}  }
class C{  public boolean containsAll(Collection c){  if (c instanceof RectListManager)   return containsAll((RectListManager)c);  return containsAll(new RectListManager(c));}  }
class C{  private void addPageIntroText(String clickText,String touchText) throws IOException {  requestAndResponse.println("<div class=\"infotext\">" + clickText + "</div>");  addMetaData(new KeyAndValue("touchInfoText",touchText));}  }
class C{  private void clear(Range r){  if (ranges.isEmpty()) {    return;  }  int pos=find(r.first);  if (pos > 0) {    Range prev=ranges.get(pos - 1);    if (prev.includes(r.first)) {      if (prev.last > r.last) {        Range n=new Range(r.last + 1,prev.last);        prev.last=r.first - 1;        ranges.add(pos,n);        refreshAsciiSet();        return;      } else {        prev.last=r.first - 1;      }    }  }  while ((pos < ranges.size()) && r.includes(ranges.get(pos))) {    ranges.remove(pos);  }  if ((pos < ranges.size()) && ranges.get(pos).includes(r.last)) {    ranges.get(pos).first=r.last + 1;  }  refreshAsciiSet();}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public static String byteArrayToIPString(byte[] addr){  final int netmask=addr[4] & 0xff;  return (addr[0] & 0xff) + "." + (addr[1] & 0xff)+ "."+ (addr[2] & 0xff)+ "."+ (addr[3] & 0xff)+ (netmask <= 32 ? "/" + netmask : "");}  }
class C{  public SText(LLPoint ll1,String data,java.awt.Font font,short justify){  super(GraphicType.GT_Text,RenderType.RT_LatLon,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=ll1;  p1_=new XYPoint((short)0,(short)0);  data_=data;  realFont_=font;  justify_=justify;}  }
class C{  public static int UTF8toUTF16(byte[] utf8,int offset,int len,char[] out,int out_offset){  int out_start=out_offset;  final int limit=offset + len;  while (offset < limit) {    int b=utf8[offset++] & 0xff;    if (b < 0xc0) {      assert b < 0x80;      out[out_offset++]=(char)b;    } else     if (b < 0xe0) {      out[out_offset++]=(char)(((b & 0x1f) << 6) + (utf8[offset++] & 0x3f));    } else     if (b < 0xf0) {      out[out_offset++]=(char)(((b & 0xf) << 12) + ((utf8[offset] & 0x3f) << 6) + (utf8[offset + 1] & 0x3f));      offset+=2;    } else {      assert b < 0xf8;      int ch=((b & 0x7) << 18) + ((utf8[offset] & 0x3f) << 12) + ((utf8[offset + 1] & 0x3f) << 6)+ (utf8[offset + 2] & 0x3f);      offset+=3;      if (ch < 0xffff) {        out[out_offset++]=(char)ch;      } else {        int chHalf=ch - 0x0010000;        out[out_offset++]=(char)((chHalf >> 10) + 0xD800);        out[out_offset++]=(char)((chHalf & 0x3FFL) + 0xDC00);      }    }  }  return out_offset - out_start;}  }
class C{  public ObjectFactory(){}  }
class C{  public static void main(String[] args){  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  String token=parser.getValue("token","token","t");  String domain=parser.getValue("domain","d");  String siteName=parser.getValue("siteName","site","s");  boolean help=parser.containsKey("help","h");  boolean logItUp=parser.containsKey("log","l");  if (siteName == null || help) {    printMessage(USAGE_MESSAGE);    System.exit(1);  }  if (domain == null) {    domain="site";  }  SitesDemo demo=null;  try {    if (username != null && password != null) {      demo=new SitesDemo(APP_NAME,domain,siteName,username,password,logItUp);    } else     if (token != null) {      demo=new SitesDemo(APP_NAME,domain,siteName,token,logItUp);    } else {      printMessage(USAGE_MESSAGE);      System.exit(1);    }    demo.run();  } catch (  IOException e) {    e.printStackTrace();  }catch (  AuthenticationException e) {    e.printStackTrace();  }catch (  ServiceException e) {    e.printStackTrace();  }}  }
class C{  public TreeNode inorderSuccessorB(TreeNode root,TreeNode p){  TreeNode succ=null;  while (root != null) {    if (p.val < root.val) {      succ=root;      root=root.left;    } else {      root=root.right;    }  }  return succ;}  }
class C{  public String resolve(){  notNull(buildDirectory,"Build directory cannot be null!");  notNull(log,"Logger cannot be null!");  String result=null;  final File cssTargetFolder=cssDestinationFolder == null ? destinationFolder : cssDestinationFolder;  File rootFolder=null;  notNull(cssTargetFolder,"cssTargetFolder cannot be null!");  if (buildFinalName != null && cssTargetFolder.getPath().startsWith(buildFinalName.getPath())) {    rootFolder=buildFinalName;  } else   if (cssTargetFolder.getPath().startsWith(buildDirectory.getPath())) {    rootFolder=buildDirectory;  } else {    for (    final String contextFolder : getContextFolders()) {      if (cssTargetFolder.getPath().startsWith(contextFolder)) {        rootFolder=new File(contextFolder);        break;      }    }  }  log.debug("buildDirectory: " + buildDirectory);  log.debug("contextFolders: " + contextFoldersAsCSV);  log.debug("cssTargetFolder: " + cssTargetFolder);  log.debug("rootFolder: " + rootFolder);  if (rootFolder != null) {    result=StringUtils.removeStart(cssTargetFolder.getPath(),rootFolder.getPath());  }  log.debug("computedAggregatedFolderPath: " + result);  return result;}  }
class C{  public FancyButton(Action a){  this();  super.setAction(a);}  }
class C{  public void clearTextLabels(){  clearXTextLabels();}  }
class C{  private MiBand2Support sendCustomNotification(VibrationProfile vibrationProfile,int flashTimes,int flashColour,int originalColour,long flashDuration,BtLEAction extraAction,TransactionBuilder builder){  getNotificationStrategy().sendCustomNotification(vibrationProfile,flashTimes,flashColour,originalColour,flashDuration,extraAction,builder);  LOG.info("Sending notification to MiBand");  return this;}  }
class C{  protected void disableWelcomeRoot(){  String configurationXmlFile="configuration/" + getPropertyValue(JBossPropertySet.CONFIGURATION) + ".xml";  addXmlReplacement(configurationXmlFile,"//server/profile/subsystem/virtual-server","enable-welcome-root","false");}  }
class C{  void collectTypes(){  for (  Resource type : knownTypes.keySet()) {    collect(knownTypes.get(type));  }}  }
class C{  private JvmLauncher createDeployerJava(String action){  JvmLauncher java=createJava();  if (getContainer() instanceof Geronimo3xInstalledLocalContainer) {    ((Geronimo3xInstalledLocalContainer)getContainer()).prepareJvmLauncher(java);    java.setMainClass("org.apache.geronimo.cli.deployer.DeployerCLI");  } else {    java.setJarFile(new File(getInstalledContainer().getHome(),"bin/deployer.jar"));  }  java.addAppArguments(action);  return java;}  }
class C{  public CacheServerStats(StatisticsFactory f,String ownerName,String typeName,StatisticDescriptor[] descriptiors){  if (f == null) {    return;  }  StatisticDescriptor[] serverStatDescriptors=new StatisticDescriptor[]{f.createIntCounter("getRequests","Number of cache client get requests.","operations"),f.createLongCounter("readGetRequestTime","Total time spent in reading get requests.","nanoseconds"),f.createLongCounter("processGetTime","Total time spent in processing a cache client get request, including the time to get an object from the cache.","nanoseconds"),f.createIntCounter("getResponses","Number of get responses written to the cache client.","operations"),f.createLongCounter("writeGetResponseTime","Total time spent in writing get responses.","nanoseconds"),f.createIntCounter("putRequests","Number of cache client put requests.","operations"),f.createLongCounter("readPutRequestTime","Total time spent in reading put requests.","nanoseconds"),f.createLongCounter("processPutTime","Total time spent in processing a cache client put request, including the time to put an object into the cache.","nanoseconds"),f.createIntCounter("putResponses","Number of put responses written to the cache client.","operations"),f.createLongCounter("writePutResponseTime","Total time spent in writing put responses.","nanoseconds"),f.createIntCounter("putAllRequests","Number of cache client putAll requests.","operations"),f.createLongCounter("readPutAllRequestTime","Total time spent in reading putAll requests.","nanoseconds"),f.createLongCounter("processPutAllTime","Total time spent in processing a cache client putAll request, including the time to put all objects into the cache.","nanoseconds"),f.createIntCounter("putAllResponses","Number of putAll responses written to the cache client.","operations"),f.createLongCounter("writePutAllResponseTime","Total time spent in writing putAll responses.","nanoseconds"),f.createIntCounter("removeAllRequests","Number of cache client removeAll requests.","operations"),f.createLongCounter("readRemoveAllRequestTime","Total time spent in reading removeAll requests.","nanoseconds"),f.createLongCounter("processRemoveAllTime","Total time spent in processing a cache client removeAll request, including the time to remove all objects from the cache.","nanoseconds"),f.createIntCounter("removeAllResponses","Number of removeAll responses written to the cache client.","operations"),f.createLongCounter("writeRemoveAllResponseTime","Total time spent in writing removeAll responses.","nanoseconds"),f.createIntCounter("getAllRequests","Number of cache client getAll requests.","operations"),f.createLongCounter("readGetAllRequestTime","Total time spent in reading getAll requests.","nanoseconds"),f.createLongCounter("processGetAllTime","Total time spent in processing a cache client getAll request.","nanoseconds"),f.createIntCounter("getAllResponses","Number of getAll responses written to the cache client.","operations"),f.createLongCounter("writeGetAllResponseTime","Total time spent in writing getAll responses.","nanoseconds"),f.createIntCounter("destroyRequests","Number of cache client destroy requests.","operations"),f.createLongCounter("readDestroyRequestTime","Total time spent in reading destroy requests.","nanoseconds"),f.createLongCounter("processDestroyTime","Total time spent in processing a cache client destroy request, including the time to destroy an object from the cache.","nanoseconds"),f.createIntCounter("destroyResponses","Number of destroy responses written to the cache client.","operations"),f.createLongCounter("writeDestroyResponseTime","Total time spent in writing destroy responses.","nanoseconds"),f.createIntCounter("invalidateRequests","Number of cache client invalidate requests.","operations"),f.createLongCounter("readInvalidateRequestTime","Total time spent in reading invalidate requests.","nanoseconds"),f.createLongCounter("processInvalidateTime","Total time spent in processing a cache client invalidate request, including the time to invalidate an object from the cache.","nanoseconds"),f.createIntCounter("invalidateResponses","Number of invalidate responses written to the cache client.","operations"),f.createLongCounter("writeInvalidateResponseTime","Total time spent in writing invalidate responses.","nanoseconds"),f.createIntCounter("sizeRequests","Number of cache client size requests.","operations"),f.createLongCounter("readSizeRequestTime","Total time spent in reading size requests.","nanoseconds"),f.createLongCounter("processSizeTime","Total time spent in processing a cache client size request, including the time to size an object from the cache.","nanoseconds"),f.createIntCounter("sizeResponses","Number of size responses written to the cache client.","operations"),f.createLongCounter("writeSizeResponseTime","Total time spent in writing size responses.","nanoseconds"),f.createIntCounter("queryRequests","Number of cache client query requests.","operations"),f.createLongCounter("readQueryRequestTime","Total time spent in reading query requests.","nanoseconds"),f.createLongCounter("processQueryTime","Total time spent in processing a cache client query request, including the time to destroy an object from the cache.","nanoseconds"),f.createIntCounter("queryResponses","Number of query responses written to the cache client.","operations"),f.createLongCounter("writeQueryResponseTime","Total time spent in writing query responses.","nanoseconds"),f.createIntCounter("destroyRegionRequests","Number of cache client destroyRegion requests.","operations"),f.createLongCounter("readDestroyRegionRequestTime","Total time spent in reading destroyRegion requests.","nanoseconds"),f.createLongCounter("processDestroyRegionTime","Total time spent in processing a cache client destroyRegion request, including the time to destroy the region from the cache.","nanoseconds"),f.createIntCounter("destroyRegionResponses","Number of destroyRegion responses written to the cache client.","operations"),f.createLongCounter("writeDestroyRegionResponseTime","Total time spent in writing destroyRegion responses.","nanoseconds"),f.createIntCounter("containsKeyRequests","Number of cache client containsKey requests.","operations"),f.createLongCounter("readContainsKeyRequestTime","Total time spent reading containsKey requests.","nanoseconds"),f.createLongCounter("processContainsKeyTime","Total time spent processing a containsKey request.","nanoseconds"),f.createIntCounter("containsKeyResponses","Number of containsKey responses written to the cache client.","operations"),f.createLongCounter("writeContainsKeyResponseTime","Total time spent writing containsKey responses.","nanoseconds"),f.createIntCounter("processBatchRequests","Number of cache client processBatch requests.","operations"),f.createLongCounter("readProcessBatchRequestTime","Total time spent in reading processBatch requests.","nanoseconds"),f.createLongCounter("processBatchTime","Total time spent in processing a cache client processBatch request.","nanoseconds"),f.createIntCounter("processBatchResponses","Number of processBatch responses written to the cache client.","operations"),f.createLongCounter("writeProcessBatchResponseTime","Total time spent in writing processBatch responses.","nanoseconds"),f.createLongCounter("batchSize","The size of the batches received.","bytes"),f.createIntCounter("clearRegionRequests","Number of cache client clearRegion requests.","operations"),f.createLongCounter("readClearRegionRequestTime","Total time spent in reading clearRegion requests.","nanoseconds"),f.createLongCounter("processClearRegionTime","Total time spent in processing a cache client clearRegion request, including the time to clear the region from the cache.","nanoseconds"),f.createIntCounter("clearRegionResponses","Number of clearRegion responses written to the cache client.","operations"),f.createLongCounter("writeClearRegionResponseTime","Total time spent in writing clearRegion responses.","nanoseconds"),f.createIntCounter("clientNotificationRequests","Number of cache client notification requests.","operations"),f.createLongCounter("readClientNotificationRequestTime","Total time spent in reading client notification requests.","nanoseconds"),f.createLongCounter("processClientNotificationTime","Total time spent in processing a cache client notification request.","nanoseconds"),f.createIntCounter("updateClientNotificationRequests","Number of cache client notification update requests.","operations"),f.createLongCounter("readUpdateClientNotificationRequestTime","Total time spent in reading client notification update requests.","nanoseconds"),f.createLongCounter("processUpdateClientNotificationTime","Total time spent in processing a client notification update request.","nanoseconds"),f.createIntCounter("clientReadyRequests","Number of cache client ready requests.","operations"),f.createLongCounter("readClientReadyRequestTime","Total time spent in reading cache client ready requests.","nanoseconds"),f.createLongCounter("processClientReadyTime","Total time spent in processing a cache client ready request, including the time to destroy an object from the cache.","nanoseconds"),f.createIntCounter("clientReadyResponses","Number of client ready responses written to the cache client.","operations"),f.createLongCounter("writeClientReadyResponseTime","Total time spent in writing client ready responses.","nanoseconds"),f.createIntCounter("closeConnectionRequests","Number of cache client close connection requests.","operations"),f.createLongCounter("readCloseConnectionRequestTime","Total time spent in reading close connection requests.","nanoseconds"),f.createLongCounter("processCloseConnectionTime","Total time spent in processing a cache client close connection request.","nanoseconds"),f.createIntCounter("failedConnectionAttempts","Number of failed connection attempts.","attempts"),f.createIntGauge("currentClientConnections","Number of sockets accepted and used for client to server messaging.","sockets"),f.createIntGauge("currentQueueConnections","Number of sockets accepted and used for server to client messaging.","sockets"),f.createIntGauge("currentClients","Number of client virtual machines connected.","clients"),f.createIntCounter("outOfOrderGatewayBatchIds","Number of Out of order batch IDs.","batches"),f.createIntCounter("abandonedWriteRequests","Number of write opertations abandond by clients","requests"),f.createIntCounter("abandonedReadRequests","Number of read opertations abandond by clients","requests"),f.createLongCounter("receivedBytes","Total number of bytes received from clients.","bytes"),f.createLongCounter("sentBytes","Total number of bytes sent to clients.","bytes"),f.createIntGauge("messagesBeingReceived","Current number of message being received off the network or being processed after reception.","messages"),f.createLongGauge("messageBytesBeingReceived","Current number of bytes consumed by messages being received or processed.","bytes"),f.createIntCounter("connectionsTimedOut","Total number of connections that have been timed out by the server because of client inactivity","connections"),f.createIntGauge("threadQueueSize","Current number of connections waiting for a thread to start processing their message.","connections"),f.createIntGauge("acceptsInProgress","Current number of server accepts that are attempting to do the initial handshake with the client.","accepts"),f.createIntCounter("acceptThreadStarts","Total number of threads created to deal with an accepted socket. Note that this is not the current number of threads.","starts"),f.createIntCounter("connectionThreadStarts","Total number of threads created to deal with a client connection. Note that this is not the current number of threads.","starts"),f.createIntGauge("connectionThreads","Current number of threads dealing with a client connection.","threads"),f.createDoubleGauge("connectionLoad","The load from client to server connections as reported by the load probe installed in this server","load"),f.createDoubleGauge("loadPerConnection","The estimate of how much load is added for each new connection as reported by the load probe installed in this server","load"),f.createDoubleGauge("queueLoad","The load from queues as reported by the load probe installed in this server","load"),f.createDoubleGauge("loadPerQueue","The estimate of how much load is added for each new connection as reported by the load probe installed in this server","load")};  StatisticDescriptor[] alldescriptors=serverStatDescriptors;  if (descriptiors != null) {    alldescriptors=new StatisticDescriptor[descriptiors.length + serverStatDescriptors.length];    System.arraycopy(descriptiors,0,alldescriptors,0,descriptiors.length);    System.arraycopy(serverStatDescriptors,0,alldescriptors,descriptiors.length,serverStatDescriptors.length);  }  statType=f.createType(typeName,typeName,alldescriptors);  try {    ownerName=SocketCreator.getLocalHost().getCanonicalHostName() + "-" + ownerName;  } catch (  Exception e) {  }  this.stats=f.createAtomicStatistics(statType,ownerName);  getRequestsId=this.stats.nameToId("getRequests");  readGetRequestTimeId=this.stats.nameToId("readGetRequestTime");  processGetTimeId=this.stats.nameToId("processGetTime");  getResponsesId=this.stats.nameToId("getResponses");  writeGetResponseTimeId=this.stats.nameToId("writeGetResponseTime");  putRequestsId=this.stats.nameToId("putRequests");  readPutRequestTimeId=this.stats.nameToId("readPutRequestTime");  processPutTimeId=this.stats.nameToId("processPutTime");  putResponsesId=this.stats.nameToId("putResponses");  writePutResponseTimeId=this.stats.nameToId("writePutResponseTime");  putAllRequestsId=this.stats.nameToId("putAllRequests");  readPutAllRequestTimeId=this.stats.nameToId("readPutAllRequestTime");  processPutAllTimeId=this.stats.nameToId("processPutAllTime");  putAllResponsesId=this.stats.nameToId("putAllResponses");  writePutAllResponseTimeId=this.stats.nameToId("writePutAllResponseTime");  removeAllRequestsId=this.stats.nameToId("removeAllRequests");  readRemoveAllRequestTimeId=this.stats.nameToId("readRemoveAllRequestTime");  processRemoveAllTimeId=this.stats.nameToId("processRemoveAllTime");  removeAllResponsesId=this.stats.nameToId("removeAllResponses");  writeRemoveAllResponseTimeId=this.stats.nameToId("writeRemoveAllResponseTime");  getAllRequestsId=this.stats.nameToId("getAllRequests");  readGetAllRequestTimeId=this.stats.nameToId("readGetAllRequestTime");  processGetAllTimeId=this.stats.nameToId("processGetAllTime");  getAllResponsesId=this.stats.nameToId("getAllResponses");  writeGetAllResponseTimeId=this.stats.nameToId("writeGetAllResponseTime");  destroyRequestsId=this.stats.nameToId("destroyRequests");  readDestroyRequestTimeId=this.stats.nameToId("readDestroyRequestTime");  processDestroyTimeId=this.stats.nameToId("processDestroyTime");  destroyResponsesId=this.stats.nameToId("destroyResponses");  writeDestroyResponseTimeId=this.stats.nameToId("writeDestroyResponseTime");  queryRequestsId=this.stats.nameToId("queryRequests");  readQueryRequestTimeId=this.stats.nameToId("readQueryRequestTime");  processQueryTimeId=this.stats.nameToId("processQueryTime");  queryResponsesId=this.stats.nameToId("queryResponses");  writeQueryResponseTimeId=this.stats.nameToId("writeQueryResponseTime");  destroyRegionRequestsId=this.stats.nameToId("destroyRegionRequests");  readDestroyRegionRequestTimeId=this.stats.nameToId("readDestroyRegionRequestTime");  processDestroyRegionTimeId=this.stats.nameToId("processDestroyRegionTime");  destroyRegionResponsesId=this.stats.nameToId("destroyRegionResponses");  writeDestroyRegionResponseTimeId=this.stats.nameToId("writeDestroyRegionResponseTime");  clearRegionRequestsId=this.stats.nameToId("clearRegionRequests");  readClearRegionRequestTimeId=this.stats.nameToId("readClearRegionRequestTime");  processClearRegionTimeId=this.stats.nameToId("processClearRegionTime");  clearRegionResponsesId=this.stats.nameToId("clearRegionResponses");  writeClearRegionResponseTimeId=this.stats.nameToId("writeClearRegionResponseTime");  containsKeyRequestsId=this.stats.nameToId("containsKeyRequests");  readContainsKeyRequestTimeId=this.stats.nameToId("readContainsKeyRequestTime");  processContainsKeyTimeId=this.stats.nameToId("processContainsKeyTime");  containsKeyResponsesId=this.stats.nameToId("containsKeyResponses");  writeContainsKeyResponseTimeId=this.stats.nameToId("writeContainsKeyResponseTime");  processBatchRequestsId=this.stats.nameToId("processBatchRequests");  readProcessBatchRequestTimeId=this.stats.nameToId("readProcessBatchRequestTime");  processBatchTimeId=this.stats.nameToId("processBatchTime");  processBatchResponsesId=this.stats.nameToId("processBatchResponses");  writeProcessBatchResponseTimeId=this.stats.nameToId("writeProcessBatchResponseTime");  batchSizeId=this.stats.nameToId("batchSize");  clientNotificationRequestsId=this.stats.nameToId("clientNotificationRequests");  readClientNotificationRequestTimeId=this.stats.nameToId("readClientNotificationRequestTime");  processClientNotificationTimeId=this.stats.nameToId("processClientNotificationTime");  updateClientNotificationRequestsId=this.stats.nameToId("updateClientNotificationRequests");  readUpdateClientNotificationRequestTimeId=this.stats.nameToId("readUpdateClientNotificationRequestTime");  processUpdateClientNotificationTimeId=this.stats.nameToId("processUpdateClientNotificationTime");  clientReadyRequestsId=this.stats.nameToId("clientReadyRequests");  readClientReadyRequestTimeId=this.stats.nameToId("readClientReadyRequestTime");  processClientReadyTimeId=this.stats.nameToId("processClientReadyTime");  clientReadyResponsesId=this.stats.nameToId("clientReadyResponses");  writeClientReadyResponseTimeId=this.stats.nameToId("writeClientReadyResponseTime");  closeConnectionRequestsId=this.stats.nameToId("closeConnectionRequests");  readCloseConnectionRequestTimeId=this.stats.nameToId("readCloseConnectionRequestTime");  processCloseConnectionTimeId=this.stats.nameToId("processCloseConnectionTime");  currentClientConnectionsId=this.stats.nameToId("currentClientConnections");  currentQueueConnectionsId=this.stats.nameToId("currentQueueConnections");  currentClientsId=this.stats.nameToId("currentClients");  failedConnectionAttemptsId=this.stats.nameToId("failedConnectionAttempts");  outOfOrderBatchIdsId=this.stats.nameToId("outOfOrderGatewayBatchIds");  abandonedWriteRequestsId=this.stats.nameToId("abandonedWriteRequests");  abandonedReadRequestsId=this.stats.nameToId("abandonedReadRequests");  receivedBytesId=this.stats.nameToId("receivedBytes");  sentBytesId=this.stats.nameToId("sentBytes");  messagesBeingReceivedId=this.stats.nameToId("messagesBeingReceived");  messageBytesBeingReceivedId=this.stats.nameToId("messageBytesBeingReceived");  connectionsTimedOutId=this.stats.nameToId("connectionsTimedOut");  threadQueueSizeId=this.stats.nameToId("threadQueueSize");  acceptsInProgressId=this.stats.nameToId("acceptsInProgress");  acceptThreadStartsId=this.stats.nameToId("acceptThreadStarts");  connectionThreadStartsId=this.stats.nameToId("connectionThreadStarts");  connectionThreadsId=this.stats.nameToId("connectionThreads");  connectionLoadId=this.stats.nameToId("connectionLoad");  queueLoadId=this.stats.nameToId("queueLoad");  loadPerConnectionId=this.stats.nameToId("loadPerConnection");  loadPerQueueId=this.stats.nameToId("loadPerQueue");}  }
class C{  private static void adjustRectToAvoidIntersection(Rect rectToModify,Rect otherRect){  rectToModify.sort();  otherRect.sort();  Rect[] cuts={new Rect(Integer.MIN_VALUE,Integer.MIN_VALUE,otherRect.left,Integer.MAX_VALUE),new Rect(Integer.MIN_VALUE,Integer.MIN_VALUE,Integer.MAX_VALUE,otherRect.top),new Rect(otherRect.right,Integer.MIN_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE),new Rect(Integer.MIN_VALUE,otherRect.bottom,Integer.MAX_VALUE,Integer.MAX_VALUE)};  int maxIntersectingRectArea=0;  int indexOfLargestIntersection=-1;  for (int i=0; i < cuts.length; i++) {    if (cuts[i].intersect(rectToModify)) {      int visibleRectArea=cuts[i].width() * cuts[i].height();      if (visibleRectArea > maxIntersectingRectArea) {        maxIntersectingRectArea=visibleRectArea;        indexOfLargestIntersection=i;      }    }  }  if (maxIntersectingRectArea <= 0) {    rectToModify.setEmpty();    return;  }  rectToModify.set(cuts[indexOfLargestIntersection]);  return;}  }
class C{  public static boolean tryCooldown(Player player,String key,long delay){  if (getCooldown(player,key) <= 0) {    setCooldown(player,key,delay);    return true;  }  return false;}  }
class C{  public final void testToString(){  CRL crl=new MyCRL("TEST_TYPE");  crl.toString();}  }
class C{  @Override public void replaceChildNode(final QueryModelNode current,final QueryModelNode replacement){  if (current.equals(condition) && replacement instanceof ValueExpr) {    setCondition(((ValueExpr)replacement).clone());  } else   if (current.equals(condition) && replacement == null) {    condition=null;  } else   if (condition != null) {    condition.replaceChildNode(current,replacement.clone());  }}  }
class C{  public Task<FileShareRestRep> removeShare(URI id,String shareName){  return deleteTask(getSharesUrl() + "/{shareName}",id,shareName);}  }
class C{  private void assertListDir(String path,String... item){  Collection<IgfsFile> files=igfs.listFiles(new IgfsPath(path));  List<String> names=new ArrayList<>(item.length);  for (  IgfsFile file : files)   names.add(file.path().name());  Arrays.sort(item);  Collections.sort(names);  assertEquals(Arrays.asList(item),names);}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  private void addLowerPlotData(List<MemoryInformationData> memoryData){  for (  MemoryInformationData data : memoryData) {    long usedNonHeapMemoryAvg=(data.getTotalUsedNonHeapMemorySize() / data.getCount()) / 1024;    nonHeapMemory.add(data.getTimeStamp().getTime(),usedNonHeapMemoryAvg,data.getMinUsedNonHeapMemorySize() / 1024.0d,data.getMaxUsedNonHeapMemorySize() / 1024.0d,false);  }  nonHeapMemory.fireSeriesChanged();}  }
class C{  public void updateCollider(){  if (wrapped.components.has(Collider.class)) {    Collider collider=wrapped.components.get(Collider.class);    Cuboid size=collider.boundingBox.get();    setBounds(size);  }}  }
class C{  public boolean verifyCopyCapableOfEnableImageAccess(FunctionalAPIImpl impl,ConsistencyGroupCopyUID cgCopy,String copyToEnable,boolean failover) throws RecoverPointException {  String cgCopyName=NAME_UNKNOWN;  String cgName=NAME_UNKNOWN;  try {    cgCopyName=impl.getGroupCopyName(cgCopy);    cgName=impl.getGroupName(cgCopy.getGroupUID());    ConsistencyGroupCopyState cgCopyState=getCopyState(impl,cgCopy);    if (cgCopyState != null) {      StorageAccessState copyAccessState=cgCopyState.getStorageAccessState();      logger.info("Current Copy Access State: " + copyAccessState);      if (copyAccessState == StorageAccessState.NO_ACCESS) {        return true;      }      if ((copyAccessState == StorageAccessState.LOGGED_ACCESS) && failover) {        ConsistencyGroupLinkState cgLinkState=getCopyLinkState(impl,cgCopy);        if ((cgLinkState != null) && (cgLinkState.getPipeState() == PipeState.PAUSED)) {          return true;        }      }      if (copyAccessState == StorageAccessState.LOGGED_ACCESS && cgCopyState.getAccessedImage().getDescription().equals(copyToEnable)) {        return true;      }    }    return false;  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToEnableCopy(cgCopyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToEnableCopy(cgCopyName,cgName,e);  }}  }
class C{  @Override public String globalInfo(){  return "A data generator for generating y according to a given expression " + "out of randomly generated x.\n" + "E.g., the mexican hat can be generated like this:\n"+ "   sin(abs(a1)) / abs(a1)\n"+ "In addition to this function, the amplitude can be changed and "+ "gaussian noise can be added.";}  }
class C{  public T caseSymbolTable(SymbolTable object){  return null;}  }
class C{  public boolean notifyPendingInvalidations(final Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String accountName=prefs.getString(DELAYED_ACCOUNT_NAME,null);  if (accountName == null) {    Log.d(TAG,"No pending invalidations.");    return false;  } else {    Log.d(TAG,"Handling pending invalidations.");    Account account=AccountManagerHelper.createAccountFromName(accountName);    List<Bundle> bundles=popPendingInvalidations(context);    notifyInvalidationsOnBackgroundThread(context,account,bundles);    return true;  }}  }
class C{  public static boolean orient(final int[][] edges,final int[] d,final int[] vertex0,final int[] vertex1,final int[] vertex2,final int[] hinges){  final int numVertices=d.length;  final int numEdges=vertex0.length;  final int[] weight=new int[numEdges];  final boolean[] isHinge=new boolean[numVertices];  final boolean[] isDone=new boolean[numEdges];  Arrays.fill(weight,3);  if (ASSERTS) {    final int[] testd=new int[d.length];    for (int i=0; i < numEdges; i++) {      testd[vertex0[i]]++;      testd[vertex1[i]]++;      testd[vertex2[i]]++;    }    if (!Arrays.equals(testd,d))     throw new AssertionError("Degree array not valid: " + Arrays.toString(testd) + " != "+ Arrays.toString(d));  }  final IntArrayList[] queue=new IntArrayList[8];  for (int i=queue.length; i-- != 0; )   queue[i]=new IntArrayList();  final int[] posInQueue=new int[numVertices];  final int[] priority=new int[numVertices];  for (int i=0; i < numVertices; i++)   priority[i]+=2 * d[i];  for (int i=0; i < d.length; i++)   if (d[i] > 0) {    final IntArrayList q=queue[Math.min(7,priority[i])];    posInQueue[i]=q.size();    q.add(i);  }  for (int t=0; t < numEdges; t++) {    int minPriority=0;    while (minPriority < 8 && queue[minPriority].isEmpty())     minPriority++;    if (minPriority == 8)     return false;    final int hinge=queue[minPriority].popInt();    int edge=-1;    int minWeight=Integer.MAX_VALUE;    for (int i=edges[hinge].length; i-- != 0; ) {      final int e=edges[hinge][i];      if (!isDone[e] && weight[e] < minWeight) {        edge=e;        minWeight=weight[e];      }    }    assert edge != -1;    if (ASSERTS) {      int minEdgeWeight=Integer.MAX_VALUE;      int minEdge=-1;      for (int i=0; i < numEdges; i++)       if (!isDone[i]) {        if (vertex0[i] == hinge || vertex1[i] == hinge || vertex2[i] == hinge) {          if (weight[i] < minEdgeWeight) {            minEdgeWeight=weight[i];            minEdge=i;          }        }      }      if (weight[edge] != weight[minEdge])       throw new AssertionError("Min edge " + t + ": "+ minEdge+ " != "+ edge);    }    if (priority[hinge] > 6)     return false;    hinges[edge]=hinge;    isHinge[hinge]=true;    isDone[edge]=true;    for (int i=edges[hinge].length; i-- != 0; ) {      final int e=edges[hinge][i];      if (isDone[e])       continue;      final int v0=vertex0[e];      final int v1=vertex1[e];      final int v2=vertex2[e];      assert hinge == v0 || hinge == v1 || hinge == v2 : hinge + " != " + v0+ ", "+ v1+ ", "+ v2;      final int update=-6 / weight[e] + 6 / --weight[e];      if (!isHinge[v0])       increase(queue,posInQueue,priority,v0,update);      if (!isHinge[v1])       increase(queue,posInQueue,priority,v1,update);      if (!isHinge[v2])       increase(queue,posInQueue,priority,v2,update);    }    final int v0=vertex0[edge];    final int v1=vertex1[edge];    final int v2=vertex2[edge];    assert hinge == v0 || hinge == v1 || hinge == v2 : hinge + " != " + v0+ ", "+ v1+ ", "+ v2;    d[v0]--;    if (!isHinge[v0])     decrease(queue,posInQueue,priority,d,v0,weight[edge]);    d[v1]--;    if (!isHinge[v1])     decrease(queue,posInQueue,priority,d,v1,weight[edge]);    d[v2]--;    if (!isHinge[v2])     decrease(queue,posInQueue,priority,d,v2,weight[edge]);    if (ASSERTS) {      final double[] pri=new double[numVertices];      for (int i=0; i < numEdges; i++)       if (!isDone[i]) {        int w=0;        if (!isHinge[vertex0[i]])         w++;        if (!isHinge[vertex1[i]])         w++;        if (!isHinge[vertex2[i]])         w++;        pri[vertex0[i]]+=6 / w;        pri[vertex1[i]]+=6 / w;        pri[vertex2[i]]+=6 / w;        if (weight[i] != w)         throw new AssertionError("Edge " + i + ": "+ w+ " != "+ weight[i]);      }      for (int i=0; i < numVertices; i++)       if (!isHinge[i] && d[i] > 1 && pri[i] != priority[i])       throw new AssertionError("Vertex " + i + ": "+ pri[i]+ " != "+ priority[i]);    }  }  return true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  protected SVGOMCircleElement(){}  }
class C{  public void clear(){  if (relations != null) {    relations.removeAllElements();  }}  }
class C{  @BeforeClass public void init(){  MockitoAnnotations.initMocks(this);  Mockito.when(classSchemaManager.getSchema(Matchers.anyString())).thenReturn(classSchema);}  }
class C{  public final boolean dump(){  return (getFlags() & F_DUMP) != 0;}  }
class C{  private void addDisableImageAccessSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID) throws WorkflowException {  String stepId=workflow.createStepId();  Workflow.Method disableImageAccessExecuteMethod=new Workflow.Method(METHOD_DISABLE_IMAGE_ACCESS_STEP,rpSystem.getId(),exportGroupID);  workflow.createStep(STEP_EXPORT_GROUP_DELETE,"Disable image access subtask for export group: " + exportGroupID,null,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),disableImageAccessExecuteMethod,null,stepId);  _log.info(String.format("Added disable image access step [%s] in workflow",stepId));}  }
class C{  private int min(int a,int b){  if (a < b)   return a;  return b;}  }
class C{  @Override protected void resetupConnection(){  this.getSystemConnectionMemo().getXNetTrafficController().connectPort(this);}  }
class C{  private void expandTo(int wordIndex){  int wordsRequired=wordIndex + 1;  if (wordsInUse < wordsRequired) {    ensureCapacity(wordsRequired);    wordsInUse=wordsRequired;  }}  }
class C{  protected ExecutionNodeImpl(){  super();}  }
class C{  public ScalarDataModelTestCase(String name){  super(name);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_invariant_1_();}  }
class C{  Symbol owner(Env<AttrContext> env){  while (true) {switch (env.tree.getTag()) {case VARDEF:      VarSymbol vsym=((JCVariableDecl)env.tree).sym;    if (vsym.owner.kind == TYP) {      return vsym;    }  break;case METHODDEF:return ((JCMethodDecl)env.tree).sym;case CLASSDEF:return ((JCClassDecl)env.tree).sym;case BLOCK:Symbol blockSym=env.info.scope.owner;if ((blockSym.flags() & BLOCK) != 0) {return blockSym;}break;case TOPLEVEL:return env.info.scope.owner;}Assert.checkNonNull(env.next);env=env.next;}}  }
class C{  public void block(){  subscriptionAndTask.v2.join();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public UserIdNotFoundException(){}  }
class C{  public void fireSelectionChanged(final SelectionChangedEvent event){  Object[] listeners=this.listeners.getListeners();  fireEventChange(event,listeners);}  }
class C{  public static void main(String[] args) throws IOException, SAXException, ParserConfigurationException {  final ConfigFileTagProvider provider=new ConfigFileTagProvider();  provider.generateCode=true;  String fileName="default.xml";  if (args != null && args.length > 0) {    fileName=args[0];  }  File configFile=new File(fileName);  String packagePath="org.htmlcleaner";  String className="CustomTagProvider";  final ConfigParser parser=provider.new ConfigParser(provider);  System.out.println("package " + packagePath + ";");  System.out.println("import java.util.HashMap;");  System.out.println("public class " + className + " extends HashMap implements ITagInfoProvider {");  System.out.println("private ConcurrentMap<String, TagInfo> tagInfoMap = new ConcurrentHashMap<String, TagInfo>();");  System.out.println("// singleton instance, used if no other TagInfoProvider is specified");  System.out.println("public final static " + className + " INSTANCE= new "+ className+ "();");  System.out.println("public " + className + "() {");  System.out.println("TagInfo tagInfo;");  parser.parse(new InputSource(new FileReader(configFile)));  System.out.println("}");  System.out.println("}");}  }
class C{  public boolean considerSegmentXRegion(GeoSegment segment,GeoRegion region){  List hits=Intersection.segmentNearPoly(segment,region.getPoints(),0.0);  if (hits != null) {    ((Collector)collector).addCrossing(hits,segment,region);    return true;  }  return false;}  }
class C{  @Pointcut("execution(* org.finra.herd.service.*Service.*(..))") protected void serviceMethods(){}  }
class C{  public static Settings init(){  return settings;}  }
class C{  public static Map<String,Object> createMrpEvent(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Map<String,Object> parameters=UtilMisc.<String,Object>toMap("mrpId",context.get("mrpId"),"productId",context.get("productId"),"eventDate",context.get("eventDate"),"mrpEventTypeId",context.get("mrpEventTypeId"));  BigDecimal quantity=(BigDecimal)context.get("quantity");  try {    createOrUpdateMrpEvent(parameters,quantity,(String)context.get("facilityId"),(String)context.get("eventName"),false,delegator);  } catch (  GenericEntityException e) {    Debug.logError(e,"Error : findOne(\"MrpEvent\", parameters =)" + parameters,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCreateOrUpdateEvent",UtilMisc.toMap("parameters",parameters),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  private boolean isText(char ch){switch (ch) {case ' ':case '\n':case '\r':case '\t':    return true;}if (ch > ' ' && ch <= 0x7E) {  return ch != 0xF7;}return false;}  }
class C{  public int append(byte b){  return append(new byte[]{b});}  }
class C{  public static void jsFunction_write(Context cx,Scriptable thisObj,Object[] args,Function funObj) throws IOException {  write0(thisObj,args,false);}  }
class C{  public AnnotationStyle(AnnotationColor color,AnnotationAlignment alignment){  if (color == null) {    throw new IllegalArgumentException("color must not be null!");  }  this.color=color;  this.alignment=alignment;  this.padding=5;}  }
class C{  public static void drawPickableRect(DrawContext dc,PickSupport pickSupport,Object pickedObject,Rectangle bounds){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawingContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  Color color=dc.getUniquePickColor();  int colorCode=color.getRGB();  pickSupport.addPickableObject(colorCode,pickedObject);  gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());  drawRect(gl,bounds);}  }
class C{  public ExpectedPartitionValuesCreateRequest createExpectedPartitionValuesCreateRequest(String partitionKeyGroupName,List<String> expectedPartitionValues){  ExpectedPartitionValuesCreateRequest expectedPartitionValuesCreateRequest=new ExpectedPartitionValuesCreateRequest();  expectedPartitionValuesCreateRequest.setPartitionKeyGroupKey(partitionKeyGroupServiceTestHelper.createPartitionKeyGroupKey(partitionKeyGroupName));  expectedPartitionValuesCreateRequest.setExpectedPartitionValues(expectedPartitionValues);  return expectedPartitionValuesCreateRequest;}  }
class C{  public TimePeriodValue(TimePeriod period,double value){  this(period,new Double(value));}  }
class C{  public double amount(){  return amount;}  }
class C{  private static android.widget.Toast createOrUpdateToastFromToastBean(android.widget.Toast toast,@NonNull ToastBean bean){  int duration;  if (bean.mDuration == android.widget.Toast.LENGTH_SHORT) {    duration=android.widget.Toast.LENGTH_SHORT;  } else {    duration=android.widget.Toast.LENGTH_LONG;  }  if (toast == null) {    if (!TextUtils.isEmpty(bean.text)) {      toast=android.widget.Toast.makeText(bean.mContext,bean.text,duration);      bean.mView=toast.getView();    } else     if (bean.resId != -1) {      toast=android.widget.Toast.makeText(bean.mContext,bean.resId,duration);      bean.mView=toast.getView();    } else {      toast=new android.widget.Toast(bean.mContext);      toast.setView(bean.mView);    }  } else {    if (!TextUtils.isEmpty(bean.text)) {      mToast.setText(bean.text);    } else     if (bean.resId != -1) {      mToast.setText(bean.resId);    } else     if (bean.mView != null) {      mToast.setView(bean.mView);    }  }  toast.setGravity(bean.mGravity,bean.mX,bean.mY);  toast.setMargin(bean.mHorizontalMargin,bean.mHorizontalMargin);  return toast;}  }
class C{  public static String nextCode(final String immCode){  return nextCode(immCode,true);}  }
class C{  public void testMultivariateMIforRandomGaussianVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/10ColsRandomGaussian-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,4,10,15};  double[] expectedFromMILCA_2={0.00932984,0.00662195,0.01697033,0.00397984,0.00212609};  System.out.println("Kraskov comparison 8 - multivariate uncorrelated Gaussian data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3,4,5,6,7,8,9}),kNNs,expectedFromMILCA_2);}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public boolean updateTransparency(){  boolean ret=false;  if (children.size() == 1) {    boolean t=dockPanel.getConstraint(getChild()).canTransparent();    transparent=t;    ret|=setTransparent(getChild(),t);  } else {    transparent=false;    for (Iterator iter=children.iterator(); iter.hasNext(); ) {      JComponent c=(JComponent)iter.next();      ret|=setTransparent(c,transparent);    }  }  return ret;}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public static CipherParameters makePBEParameters(PBEKeySpec keySpec,int type,int hash,int keySize,int ivSize){  PBEParametersGenerator generator=makePBEGenerator(type,hash);  byte[] key;  CipherParameters param;  key=convertPassword(type,keySpec);  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());  if (ivSize != 0) {    param=generator.generateDerivedParameters(keySize,ivSize);  } else {    param=generator.generateDerivedParameters(keySize);  }  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  private Workflow.Method storageViewRemoveInitiatorsMethod(URI vplexURI,URI exportGroupURI,URI exportMaskURI,List<URI> initiatorURIs,List<URI> targetURIs){  return new Workflow.Method("storageViewRemoveInitiators",vplexURI,exportGroupURI,exportMaskURI,initiatorURIs,targetURIs);}  }
class C{  @Override protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  super.formatCookieAsVer(buffer,cookie,version);  if (cookie instanceof ClientCookie) {    String s=((ClientCookie)cookie).getAttribute(ClientCookie.PORT_ATTR);    if (s != null) {      buffer.append("; $Port");      buffer.append("=\"");      if (s.trim().length() > 0) {        int[] ports=cookie.getPorts();        if (ports != null) {          for (int i=0, len=ports.length; i < len; i++) {            if (i > 0) {              buffer.append(",");            }            buffer.append(Integer.toString(ports[i]));          }        }      }      buffer.append("\"");    }  }}  }
class C{  public static String normalizeSystemName(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String nName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    nName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    nName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  }  return nName;}  }
class C{  public ButtonBubble(Window owner,String nextDockableKey,AlignedSide preferredAlignment,String i18nKey,String buttonKeyToAttach,boolean addListener,boolean listenToPerspective,JButton[] buttonsToAdd,Object... arguments){  super(owner,preferredAlignment,i18nKey,nextDockableKey,buttonsToAdd,arguments);  if (preferredAlignment != AlignedSide.MIDDLE) {    this.buttonKey=buttonKeyToAttach;    this.addListener=addListener;    if (buttonKey == null || buttonKey.equals("")) {      throw new IllegalArgumentException("key of the Button can not be null if the Alignment is not MIDDLE");    } else {      this.button=BubbleWindow.findButton(buttonKey,owner);    }  }  setAddPerspectiveListener(listenToPerspective);  super.paint(false);}  }
class C{  @SuppressWarnings("unused") public StreamingCombineGloballyAsSingletonView(FlinkRunner runner,Combine.GloballyAsSingletonView<InputT,OutputT> transform){  this.transform=transform;}  }
class C{  private void updateEventAudit(){  getEventAudit();  m_audit.setTextMsg(getTextMsg());  m_audit.setWFState(getWFState());  if (m_newValue != null)   m_audit.setNewValue(m_newValue);  if (m_state.isClosed()) {    m_audit.setEventType(MWFEventAudit.EVENTTYPE_ProcessCompleted);    long ms=System.currentTimeMillis() - m_audit.getCreated().getTime();    m_audit.setElapsedTimeMS(new BigDecimal(ms));  } else   m_audit.setEventType(MWFEventAudit.EVENTTYPE_StateChanged);  m_audit.saveEx();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void storeData(ExchangerData data){synchronized (mailbox) {    mailbox.add(data);  }}  }
class C{  public static String extractHostAddress(String host){  if (host == null) {    return null;  }  int index=host.indexOf("/");  if (index != -1) {    host=host.substring(0,index);  }  index=host.indexOf("%");  if (index != -1) {    host=host.substring(0,index);  }  return host;}  }
class C{  public void reset(){  usageCount_=new HashMap<Integer,Integer>();}  }
class C{  @Override public void onPermissionsSatisfied(){  Log.d(TAG,"onPermissionsSatisfied()");  mPermissionsSatisfied=true;}  }
class C{  @Nonnull public BugInstance addClassAndMethod(MethodGen methodGen,String sourceFile){  addClass(methodGen.getClassName());  addMethod(methodGen,sourceFile);  if (BCELUtil.isSynthetic(methodGen)) {    foundInSyntheticMethod();  }  return this;}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  public void warning(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.warning(e);  }}  }
class C{  @Override public boolean undo(){  LOG.info("Clean uploaded jar");  File file=new File(destTopologyFile);  return file.delete();}  }
class C{  public static long count(){  return hawkFacade.count();}  }
class C{  public void useProgram(){  if (mIsDirty) {    createShaders();  }  GLES20.glUseProgram(mProgramHandle);}  }
class C{  public void testChipToChipError(){  setDefaultParameters();  this.simulator.setDishDishVariability(0.0001);  this.simulator.setNumSamplesPerDish(1000);  this.simulator.setSampleSampleVariability(0.0001);  this.simulator.setChipChipVariability(0.3);  this.simulator.setPixelDigitalization(0.0001);  this.simulator.setStepsGenerated(2);  this.simulator.setNumCellsPerDish(100);  this.simulator.simulate(this.history);  double[][][] measuredData=this.simulator.getMeasuredData();  DoubleArrayList doubleArrayList=new DoubleArrayList(measuredData[1][0]);  double sum=Descriptive.sum(doubleArrayList);  double sumOfSquares=Descriptive.sumOfSquares(doubleArrayList);  double gene2time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[1][0].length,sum,sumOfSquares));  DoubleArrayList doubleArrayList1=new DoubleArrayList(measuredData[2][0]);  double sum1=Descriptive.sum(doubleArrayList1);  double sumOfSquares1=Descriptive.sumOfSquares(doubleArrayList1);  double gene3time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[2][0].length,sum1,sumOfSquares1));  DoubleArrayList doubleArrayList2=new DoubleArrayList(measuredData[1][1]);  double sum2=Descriptive.sum(doubleArrayList2);  double sumOfSquares2=Descriptive.sumOfSquares(doubleArrayList2);  double gene1time2sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[1][1].length,sum2,sumOfSquares2));  assertEquals(0.3,gene2time1sd,0.02);  assertEquals(0.3,gene3time1sd,0.02);  assertEquals(0.3,gene1time2sd,0.02);}  }
class C{  public static RelationalOpExpression isNotNull(String property){  return new RelationalOpExpression(getPropExpr(property),"is not",null);}  }
class C{  protected void bindListenerToComponent(Component cmp,Object listener){  if (cmp instanceof Container) {    cmp=((Container)cmp).getLeadComponent();  }  if (listener instanceof FocusListener) {    cmp.addFocusListener((FocusListener)listener);    return;  }  if (listener instanceof ActionListener) {    if (cmp instanceof Button) {      ((Button)cmp).addActionListener((ActionListener)listener);      return;    }    if (cmp instanceof List) {      ((List)cmp).addActionListener((ActionListener)listener);      return;    }    if (cmp instanceof ContainerList) {      ((ContainerList)cmp).addActionListener((ActionListener)listener);      return;    }    if (cmp instanceof com.codename1.ui.Calendar) {      ((com.codename1.ui.Calendar)cmp).addActionListener((ActionListener)listener);      return;    }    ((TextArea)cmp).addActionListener((ActionListener)listener);    return;  }  if (listener instanceof DataChangedListener) {    if (cmp instanceof TextField) {      ((TextField)cmp).addDataChangedListener((DataChangedListener)listener);      return;    }    ((Slider)cmp).addDataChangedListener((DataChangedListener)listener);    return;  }  if (listener instanceof SelectionListener) {    if (cmp instanceof List) {      ((List)cmp).addSelectionListener((SelectionListener)listener);      return;    }    ((Slider)cmp).addDataChangedListener((DataChangedListener)listener);    return;  }}  }
class C{  private JButton createToolBarButton(String text,String fileName){  JButton toolbarButton=new JButton(TDA.createImageIcon(fileName));  if (text != null) {    toolbarButton.setToolTipText(text);  }  toolbarButton.addActionListener(listener);  toolbarButton.setFocusable(false);  return (toolbarButton);}  }
class C{  public void removeZoomListener(ZoomListener listener){}  }
class C{  protected int readBlock(){  blockSize=read();  int n=0;  if (blockSize > 0) {    try {      int count;      while (n < blockSize) {        count=blockSize - n;        rawData.get(block,n,count);        n+=count;      }    } catch (    final Exception e) {      Log.w(TAG,"Error Reading Block",e);      status=STATUS_FORMAT_ERROR;    }  }  return n;}  }
class C{  public Users createUsers(){  return mAdapter.create(Users.class);}  }
class C{  public void execute() throws BuildException {  checkParameters();  resetFileLists();  loadRegisteredScriptExtensions();  if (javac != null)   jointCompilation=true;  String[] list=src.list();  for (  String filename : list) {    File file=getProject().resolveFile(filename);    if (!file.exists()) {      throw new BuildException("srcdir \"" + file.getPath() + "\" does not exist!",getLocation());    }    DirectoryScanner ds=this.getDirectoryScanner(file);    String[] files=ds.getIncludedFiles();    scanDir(file,destDir != null ? destDir : file,files);  }  compile();  if (updatedProperty != null && taskSuccess && compileList.length != 0) {    getProject().setNewProperty(updatedProperty,"true");  }}  }
class C{  public static BarChartComponent open(final InputStream input,final String name,final String format){  BarChartModel dataModel=(BarChartModel)BarChartModel.getXStream().fromXML(input);  return new BarChartComponent(name,dataModel);}  }
class C{  public void sendChangeVariableRequest(final String variable,final String value){  sendEventToAgent("{\"" + variable + "\":[\""+ value+ "\"]}");}  }
class C{  @Builder.Factory public static TerminateWorkflowExecutionRequest terminateWorkflowRequest(@Nonnull Domain domain,@Nonnull WorkflowId workflowId,Optional<RunId> runId,Optional<Reason> reason,Optional<Details> details,Optional<ChildPolicy> childPolicy){  ChildPolicy cp=childPolicy.orElse(ChildPolicy.TERMINATE);  return new TerminateWorkflowExecutionRequest().withDomain(domain.value()).withWorkflowId(workflowId.value()).withRunId(runId.map(null).orElse(null)).withReason(reason.map(null).orElse(null)).withDetails(details.map(null).orElse(null)).withChildPolicy(cp);}  }
class C{  public Node vet(byte cell){  return vet(((int)cell) & 0xFF);}  }
class C{  private String executeAppleScript(String appleScriptFilename,String[] argv) throws IOException {  InputStream stm=null;  try {    stm=PlayerSession.class.getResourceAsStream(appleScriptFilename);    BufferedReader reader=new BufferedReader(new InputStreamReader(stm));    String line;    List<String> appleScriptLines=new ArrayList<String>();    while ((line=reader.readLine()) != null)     appleScriptLines.add(line);    String[] lines=appleScriptLines.toArray(new String[appleScriptLines.size()]);    return executeAppleScript(lines,argv);  }  finally {    if (stm != null) {      stm.close();    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowTVPlayer.getEnableHWDecoder());}  }
class C{  private ECDHServerKeyExchange(SignatureAndHashAlgorithm signatureAndHashAlgorithm,int curveId,byte[] pointEncoded,byte[] signatureEncoded,InetSocketAddress peerAddress) throws HandshakeException {  this(signatureAndHashAlgorithm,curveId,peerAddress);  this.pointEncoded=Arrays.copyOf(pointEncoded,pointEncoded.length);  this.signatureEncoded=Arrays.copyOf(signatureEncoded,signatureEncoded.length);  SupportedGroup group=SupportedGroup.fromId(curveId);  if (group == null || !group.isUsable()) {    throw new HandshakeException(String.format("Server used unsupported elliptic curve (%d) for ECDH",curveId),new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,peerAddress));  } else {    try {      point=ECDHECryptography.decodePoint(pointEncoded,group.getEcParams().getCurve());      KeyFactory keyFactory=KeyFactory.getInstance(KEYPAIR_GENERATOR_INSTANCE);      publicKey=(ECPublicKey)keyFactory.generatePublic(new ECPublicKeySpec(point,group.getEcParams()));    } catch (    GeneralSecurityException e) {      LOGGER.log(Level.FINE,"Cannot re-create server's public key from params",e);      throw new HandshakeException(String.format("Cannot re-create server's public key from params: %s",e.getMessage()),new AlertMessage(AlertLevel.FATAL,AlertDescription.INTERNAL_ERROR,peerAddress));    }  }}  }
class C{  public StringCollectionPage(final BaseStringCollectionResponse response,final IStringCollectionRequestBuilder builder){  super(response,builder);}  }
class C{  public static void main(final String[] args) throws Exception {  final Properties properties=new Properties();  properties.put(Options.MAXIMUM_EXTENT,"" + Bytes.megabyte32 * 400);  properties.setProperty(Options.BUFFER_MODE,BufferMode.Disk.toString());  properties.setProperty(Options.CREATE_TEMP_FILE,"true");  properties.setProperty(TestOptions.TIMEOUT,"60");  properties.setProperty(TestOptions.NRESOURCES,"10");  properties.setProperty(TestOptions.MIN_LOCKS,"1");  properties.setProperty(TestOptions.MAX_LOCKS,"3");  properties.setProperty(TestOptions.NTRIALS,"20000");  properties.setProperty(TestOptions.KEYLEN,"4");  properties.setProperty(TestOptions.NOPS,"4");  properties.setProperty(TestOptions.FAILURE_RATE,"0.00");  IComparisonTest test=new StressTestConcurrentUnisolatedIndices();  test.setUpComparisonTest(properties);  try {    test.doComparisonTest(properties);  }  finally {    try {      test.tearDownComparisonTest();    } catch (    Throwable t) {      log.warn("Tear down problem: " + t,t);    }  }}  }
class C{  public synchronized void stopPolling(){  m_scheduler.shutdown();}  }
class C{  private CustomDdl createCustomDdlFromEntity(CustomDdlEntity customDdlEntity){  CustomDdl customDdl=new CustomDdl();  customDdl.setId(customDdlEntity.getId());  customDdl.setCustomDdlKey(new CustomDdlKey(customDdlEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getNamespace().getCode(),customDdlEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getName(),customDdlEntity.getBusinessObjectFormat().getUsage(),customDdlEntity.getBusinessObjectFormat().getFileType().getCode(),customDdlEntity.getBusinessObjectFormat().getBusinessObjectFormatVersion(),customDdlEntity.getCustomDdlName()));  customDdl.setDdl(customDdlEntity.getDdl());  return customDdl;}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public static void removeLoggingBehavior(LoggingBehavior behavior){synchronized (loggingBehaviors) {    loggingBehaviors.remove(behavior);  }}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    StochasticOscillatorSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public void paint(Graphics g){  PointPair pp;switch (getMode()) {case HALF_ANCHORED:    g.setColor(getLineColor());  pp=calculateEdge(getNode1(),getRelativeMouseTrackPoint());if (pp != null) {  pp.getFrom().translate(-getLocation().x,-getLocation().y);  pp.getTo().translate(-getLocation().x,-getLocation().y);  setClickRegion(null);  g.drawLine(pp.getFrom().x,pp.getFrom().y,pp.getTo().x,pp.getTo().y);  drawEndpoints(pp,g);  firePropertyChange("newPointPair",null,pp);}break;case ANCHORED_UNSELECTED:g.setColor(getLineColor());pp=calculateEdge(getNode1(),getNode2());if (pp != null) {pp.getFrom().translate(-getLocation().x,-getLocation().y);pp.getTo().translate(-getLocation().x,-getLocation().y);setClickRegion(null);g.drawLine(pp.getFrom().x,pp.getFrom().y,pp.getTo().x,pp.getTo().y);drawEndpoints(pp,g);firePropertyChange("newPointPair",null,pp);}break;case ANCHORED_SELECTED:g.setColor(getSelectedColor());pp=calculateEdge(getNode1(),getNode2());if (pp != null) {pp.getFrom().translate(-getLocation().x,-getLocation().y);pp.getTo().translate(-getLocation().x,-getLocation().y);setClickRegion(null);g.drawLine(pp.getFrom().x,pp.getFrom().y,pp.getTo().x,pp.getTo().y);drawEndpoints(pp,g);firePropertyChange("newPointPair",null,pp);}break;default :throw new IllegalStateException();}setConnectedPoints(pp);if (sessionEdgeMode == RANDOMIZED) {drawDice(g,false,curr_color);}}  }
class C{  public static void fail(Formatter message,Throwable cause){  throw new AssertionException(message,cause);}  }
class C{  @Override public final int computeHashCode(double val){  return HashFunctions.hash(val);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SecretKeySpec)) {    return false;  }  SecretKeySpec ks=(SecretKeySpec)obj;  return (algorithm.equalsIgnoreCase(ks.algorithm)) && (Arrays.equals(key,ks.key));}  }
class C{  public AttributeInfo(String id,String name){  this.id=id;  this.name=name;}  }
class C{  private void _enable_buttons(){  final Preference reset=findPreference("pref_reset_ignored_apps");  final Preference ignore_system=findPreference("pref_ignore_system_apps");  final Preference ignore_xposed=findPreference("pref_ignore_xposed_apps");  if (reset != null) {    long ignored_apps=InstalledApp.count(InstalledApp.class,"_isignored = 1",null);    reset.setEnabled(ignored_apps != 0);  }  if (ignore_xposed != null) {    long xposed_apps=InstalledApp.count(InstalledApp.class,"_updatesource LIKE 'Xposed%' AND _isignored = 0",null);    ignore_xposed.setEnabled(xposed_apps != 0);  }  if (ignore_system != null) {    ignore_system.setEnabled(InstalledApp.check_system_apps_tracked());  }}  }
class C{  public void authenticate(){  log.info("Authenticating user: " + this.name);  WebSession result=getContext().getAuthenticationMethod().authenticate(getContext().getSessionManagementMethod(),this.authenticationCredentials,this);synchronized (this) {    this.lastSuccessfulAuthTime=System.currentTimeMillis();    this.authenticatedSession=result;  }}  }
class C{  public void tryToDispatchAllPendingDisplayNotifications(){  mImOperationHandler.post(new DelayedDisplayNotificationDispatcher(mLocalContentResolver,mChatService));}  }
class C{  public static String generateXPath(Node node,boolean ignoreWhitespace,boolean noValues){  return generateXPath(node,ignoreWhitespace,noValues,false);}  }
class C{  public MenuDialogHelper show(View originalView,IBinder token){  if (originalView != null) {    originalView.createContextMenu(this);  }  if (getVisibleItems().size() > 0) {    EventLog.writeEvent(50001,1);    MenuDialogHelper helper=new MenuDialogHelper(this);    helper.show(token);    return helper;  }  return null;}  }
class C{  protected void validateIscsiInitiatorIpAddress(java.lang.String[] param){}  }
class C{  public void addColumn(Column column){  getColumns().add(column);}  }
class C{  public static <T1,T2,R>Mono<R> combine(Mono<? extends T1> mono,Mono<? extends T2> app,BiFunction<? super T1,? super T2,? extends R> fn){  return Mono.from(FutureW.of(mono.toFuture()).combine(FutureW.of(app.toFuture()),fn));}  }
class C{  public static void evolve(Subset subset){  if (subset.getK() < subset.getN()) {    int i=PRNG.nextInt(subset.getK());    subset.set(i,subset.randomNonmember());  }}  }
class C{  public Parameter remove(Object key){  return parameters.remove(key);}  }
class C{  public TagManager(final ITagManager manager){  m_manager=manager;  m_root=clone(manager.getRootTag(),null);  manager.addListener(m_listener);}  }
class C{  public void resetViewPortOffsets(){  mCustomViewPortEnabled=false;  calculateOffsets();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StackedXYBarRenderer)) {    return false;  }  StackedXYBarRenderer that=(StackedXYBarRenderer)obj;  if (this.renderAsPercentages != that.renderAsPercentages) {    return false;  }  return super.equals(obj);}  }
class C{  @Override public void doWork() throws OperatorException {  IOObject[] input=portExtender.getData(IOObject.class).toArray(new IOObject[0]);  File file=getParameterAsFile(PARAMETER_RESULT_FILE,true);  if (file != null) {    PrintWriter out=null;    try {      out=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file,!firstRun),Encoding.getEncoding(this)));      firstRun=false;    } catch (    IOException e) {      throw new UserError(this,301,file);    }    if (out != null) {      ResultService.logResult("Results of ResultWriter '" + getName() + "' ["+ getApplyCount()+ "]: ",out);      for (int i=0; i < input.length; i++) {        if (input[i] instanceof ResultObject) {          ResultService.logResult((ResultObject)input[i],out);        }      }      out.close();    }  } else {    ResultService.logResult("Results of ResultWriter '" + getName() + "' ["+ getApplyCount()+ "]: ");    for (int i=0; i < input.length; i++) {      if (input[i] instanceof ResultObject) {        ResultService.logResult((ResultObject)input[i]);      }    }  }  portExtender.passDataThrough();}  }
class C{  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord,ArrayList<FixedBitSet> bb) throws IOException {  HashMap<Term,Integer> tg=new HashMap<>();  Term[] t=tord.keySet().toArray(new Term[0]);  for (int i=0; i < bb.size(); i++) {    FixedBitSet bits=bb.get(i);    for (int ord=bits.nextSetBit(0); ord != DocIdSetIterator.NO_MORE_DOCS; ord=ord + 1 >= bits.length() ? DocIdSetIterator.NO_MORE_DOCS : bits.nextSetBit(ord + 1)) {      tg.put(t[ord],i);    }  }  return tg;}  }
class C{  private double PStar(Instance test,Instance train,int col,double stop){  double pstar;  int numvalues=0;  try {    numvalues=test.attribute(col).numValues();  } catch (  Exception ex) {    ex.printStackTrace();  }  if ((int)test.value(col) == (int)train.value(col)) {    pstar=stop + (1 - stop) / numvalues;  } else {    pstar=(1 - stop) / numvalues;  }  return pstar;}  }
class C{  @Override public Scorer scorer(LeafReaderContext context) throws IOException {  List<Scorer> scorers=new ArrayList<>();  for (  Weight w : weights) {    Scorer subScorer=w.scorer(context);    if (subScorer != null) {      scorers.add(subScorer);    }  }  if (scorers.isEmpty()) {    return null;  } else   if (scorers.size() == 1) {    return scorers.get(0);  } else {    return new DisjunctionMaxScorer(this,tieBreakerMultiplier,scorers,needsScores);  }}  }
class C{  public boolean showPopupSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_POPUPS;}  }
class C{  public ErdosRenyiRelationshipGenerator(ErdosRenyiConfig configuration){  super(configuration);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public void enableAndShow(){  setEnabled(true);  setVisibility(VISIBLE);}  }
class C{  public void destroy(){  conf.destroy();}  }
class C{  public static boolean isAvailable(){  return s_links.size() != 0;}  }
class C{  public static boolean isJavaVersionAtLeast(float requiredVersion){  return JAVA_VERSION_FLOAT >= requiredVersion;}  }
class C{  public boolean evaluate(Context context,Writer writer,String logTag,Reader reader) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {  SimpleNode nodeTree=null;  try {    nodeTree=ri.parse(reader,logTag);  } catch (  ParseException pex) {    throw new ParseErrorException(pex.getMessage());  }  if (nodeTree != null) {    InternalContextAdapterImpl ica=new InternalContextAdapterImpl(context);    ica.pushCurrentTemplateName(logTag);    try {      try {        nodeTree.init(ica,ri);      } catch (      Exception e) {        ri.error("Velocity.evaluate() : init exception for tag = " + logTag + " : "+ e);      }      nodeTree.render(ica,writer);    }  finally {      ica.popCurrentTemplateName();    }    return true;  }  return false;}  }
class C{  protected void farthestFirstInit(Instances data) throws Exception {  FarthestFirst ff=new FarthestFirst();  ff.setNumClusters(m_NumClusters);  ff.buildClusterer(data);  m_ClusterCentroids=ff.getClusterCentroids();}  }
class C{  public void putInPixels(final int key,final int value){  if (key >= 0 && key < cvt.length) {    cvt[key]=value;  } else   if (LogWriter.isRunningFromIDE) {    System.err.println("Cvt.putInPixels(): Key out of range. (" + key + ')');  }}  }
class C{  private void cmd_print(){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  m_reportEngine.getPrintInfo().setWithDialog(true);  m_reportEngine.print();  cmd_drill();}  }
class C{  public synchronized int removeStatements(final Resource s,final URI p,final Value o,final Resource c) throws SailException {  assertWritableConn();  flushStatementBuffers(true,false);  if (m_listeners != null) {    throw new UnsupportedOperationException();  }  long n=0;  if (getTruthMaintenance()) {    final IChunkedOrderedIterator<ISPO> itr=database.getAccessPath(s,p,o,ExplicitSPOFilter.INSTANCE).iterator();    final AbstractTripleStore tempStore=getRetractionBuffer().getStatementStore();    n=tempStore.addStatements(tempStore,true,itr,null);  } else {    if (changeLog == null) {      n=database.removeStatements(s,p,o,c);    } else {      final IChunkedOrderedIterator<ISPO> itr=database.computeClosureForStatementIdentifiers(database.getAccessPath(s,p,o,c).iterator());      n=StatementWriter.removeStatements(database,itr,false,changeLog);    }  }  return (int)Math.min(Integer.MAX_VALUE,n);}  }
class C{  public void createPictScenario03_5() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-03-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict03_5Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_5SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_5Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_5Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_5CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_5",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_5_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_5",serviceDetails,customerAdmin,role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-03 05:00:00"),"FILE_DOWNLOAD",1);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 10:20:00"),"PERIOD",DateTimeHandling.daysToMillis(200) + "");  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-23 05:00:00"),"FILE_UPLOAD",1);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-04-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_5",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_5",customer);}  }
class C{  public static Object callN(Callable fun,Scriptable thisObj,Object[] args,Context cx,Scriptable scope){  return fun.call(cx,scope,thisObj,args);}  }
class C{  public void add(PublicKey pk){  this.add(new KeyValue(this.doc,pk));}  }
class C{  @Override public String basePath(){  return "/wm/staticflowpusher";}  }
class C{  public void run(IDroidsafeProgressMonitor monitor){  try {    if (Config.v().multipassfb) {      for (int i=0; i < NUM_PASSES; i++) {        Main.afterTransformPrecise(monitor,false,2);        int numChanges=findAPICallsWithNullReturnValues();        firstRun=false;        System.out.printf("Ran fallback API object insertion phase %d with %d objects created.\n",i,numChanges);        if (numChanges == 0)         break;      }    } else {      Main.afterTransformPrecise(monitor,false,2);      findAPICallsWithNullReturnValues();      firstRun=false;    }    fixUpUserRefsToComponents();  } catch (  Exception e) {    logger.warn("Error during InsertUnmodeledObjects.  Continuing...",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.091 -0500",hash_original_method="FE3D5B55E53BDF1600935D20E2D4BB17",hash_generated_method="C63988662C52768F3AC4AD1066D1DB21") public Type create(){  if (mDimZ > 0) {    if ((mDimX < 1) || (mDimY < 1)) {      throw new RSInvalidStateException("Both X and Y dimension required when Z is present.");    }    if (mDimFaces) {      throw new RSInvalidStateException("Cube maps not supported with 3D types.");    }  }  if (mDimY > 0) {    if (mDimX < 1) {      throw new RSInvalidStateException("X dimension required when Y is present.");    }  }  if (mDimFaces) {    if (mDimY < 1) {      throw new RSInvalidStateException("Cube maps require 2D Types.");    }  }  int id=mRS.nTypeCreate(mElement.getID(),mDimX,mDimY,mDimZ,mDimMipmaps,mDimFaces);  Type t=new Type(id,mRS);  t.mElement=mElement;  t.mDimX=mDimX;  t.mDimY=mDimY;  t.mDimZ=mDimZ;  t.mDimMipmaps=mDimMipmaps;  t.mDimFaces=mDimFaces;  t.calcElementCount();  return t;}  }
class C{  private ChannelInstance findChannel(final By by){  final Optional<ChannelInstance> channel;  try (Locked l=lock(this.readLock)){    channel=find(by);  }   if (!channel.isPresent()) {    throw new ChannelNotFoundException(by.toString());  }  return channel.get();}  }
class C{  public static boolean mayBeDecimalDouble(String s){  char[] c=getChars(s);  for (int i=0; i < c.length; i++) {    if ((c[i] < '0' || c[i] > '9') && '.' != c[i] && '+' != c[i] && '-' != c[i]) {      return false;    }  }  return true;}  }
class C{  public int size(){  return rowChangeData.getRowChanges().size();}  }
class C{  protected void addToMaintenanceQueue(NodePortTuple npt){  if (maintenanceQueue.contains(npt) == false) {    maintenanceQueue.add(npt);  }}  }
class C{  @FlashException public static void addStoragePools(String virtualArrayId,@As(",") String[] ids){  if ((ids != null) && (ids.length > 0)) {    VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);    updateStoragePools(uris(ids),addVirtualArray(virtualArray));  }  storagePools(virtualArrayId);}  }
class C{  private FlexibleNode readExternalNode(TaxonList taxonList) throws IOException, ImportException {  FlexibleNode node=new FlexibleNode();  String label=readToken(":(),;");  Taxon taxon;  if (taxonList != null) {    int index=taxonList.getTaxonIndex(label);    if (index != -1) {      taxon=taxonList.getTaxon(index);    } else {      throw new UnknownTaxonException("Taxon in tree, '" + label + "' is unknown");    }  } else {    taxon=new Taxon(label);  }  node.setTaxon(taxon);  return node;}  }
class C{  public void testEncodeZigZag() throws Exception {  assertEquals(0,CodedOutputStream.encodeZigZag32(0));  assertEquals(1,CodedOutputStream.encodeZigZag32(-1));  assertEquals(2,CodedOutputStream.encodeZigZag32(1));  assertEquals(3,CodedOutputStream.encodeZigZag32(-2));  assertEquals(0x7FFFFFFE,CodedOutputStream.encodeZigZag32(0x3FFFFFFF));  assertEquals(0x7FFFFFFF,CodedOutputStream.encodeZigZag32(0xC0000000));  assertEquals(0xFFFFFFFE,CodedOutputStream.encodeZigZag32(0x7FFFFFFF));  assertEquals(0xFFFFFFFF,CodedOutputStream.encodeZigZag32(0x80000000));  assertEquals(0,CodedOutputStream.encodeZigZag64(0));  assertEquals(1,CodedOutputStream.encodeZigZag64(-1));  assertEquals(2,CodedOutputStream.encodeZigZag64(1));  assertEquals(3,CodedOutputStream.encodeZigZag64(-2));  assertEquals(0x000000007FFFFFFEL,CodedOutputStream.encodeZigZag64(0x000000003FFFFFFFL));  assertEquals(0x000000007FFFFFFFL,CodedOutputStream.encodeZigZag64(0xFFFFFFFFC0000000L));  assertEquals(0x00000000FFFFFFFEL,CodedOutputStream.encodeZigZag64(0x000000007FFFFFFFL));  assertEquals(0x00000000FFFFFFFFL,CodedOutputStream.encodeZigZag64(0xFFFFFFFF80000000L));  assertEquals(0xFFFFFFFFFFFFFFFEL,CodedOutputStream.encodeZigZag64(0x7FFFFFFFFFFFFFFFL));  assertEquals(0xFFFFFFFFFFFFFFFFL,CodedOutputStream.encodeZigZag64(0x8000000000000000L));  assertEquals(0,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(0)));  assertEquals(1,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(1)));  assertEquals(-1,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(-1)));  assertEquals(14927,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(14927)));  assertEquals(-3612,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(-3612)));  assertEquals(0,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(0)));  assertEquals(1,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(1)));  assertEquals(-1,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-1)));  assertEquals(14927,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(14927)));  assertEquals(-3612,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-3612)));  assertEquals(856912304801416L,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(856912304801416L)));  assertEquals(-75123905439571256L,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-75123905439571256L)));}  }
class C{  public Complex(double a){  this(a,0);}  }
class C{  public int genID(){  int uid=this.hashCode();  if (uid < 0) {    uid=Math.abs(uid);    uid=uid * 15551;  }  return uid;}  }
class C{  void applyExpensiveOutlineWithBlur(Bitmap srcDst,Canvas srcDstCanvas,int color,int outlineColor){  applyExpensiveOutlineWithBlur(srcDst,srcDstCanvas,color,outlineColor,true);}  }
class C{  public static void growBb(AxisAlignedBB target,AxisAlignedBB source,int x,int y,int z){  target.minX=source.minX - x;  target.minY=source.minY - y;  target.minZ=source.minZ - z;  target.maxX=source.maxX + x;  target.maxY=source.maxY + y;  target.maxZ=source.maxZ + z;}  }
class C{  public static boolean isPowerOfTwo(final int value){  return (value & (value - 1)) == 0;}  }
class C{  public static void schedule(Runnable runnable,BooleanSupplier terminated){  AtomicBoolean available=new AtomicBoolean(false);  Bukkit.getScheduler().scheduleSyncDelayedTask(Computers.getInstance(),null);  try {    while (!available.get()) {      if (terminated.getAsBoolean())       break;      Thread.sleep(40);    }  } catch (  InterruptedException e) {    throw new LuaError(e);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public void emptyLine() throws IOException {  _writeLn("");}  }
class C{  public static List<Statement> randomStatementsAbout(String s,int count){  List<Statement> statements=new ArrayList<>();  for (int i=0; i < count; i++) {    String p="P" + randomInt();    LiteralImpl o=randomDate();    statements.add(statement(s,p,o));  }  return statements;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe number of attributes (default " + defaultNumAttributes() + ").","a",1,"-a <num>"));  result.addElement(new Option("\tClass Flag, if set, the cluster is listed in extra attribute.","c",0,"-c"));  result.addElement(new Option("\tThe indices for boolean attributes.","b",1,"-b <range>"));  result.addElement(new Option("\tThe indices for nominal attributes.","m",1,"-m <range>"));  return result.elements();}  }
class C{  public StatusSource createStatusSource(){  StatusSourceImpl statusSource=new StatusSourceImpl();  return statusSource;}  }
class C{  protected Connection exchangeDeliverableMessages(){  List<Connection> connections=getConnections();  if (connections.size() == 0) {    return null;  }  @SuppressWarnings(value="unchecked") Tuple<Message,Connection> t=tryMessagesForConnected(sortByQueueMode(getMessagesForConnected()));  if (t != null) {    return t.getValue();  }  for (  Connection con : connections) {    if (con.getOtherNode(getHost()).requestDeliverableMessages(con)) {      return con;    }  }  return null;}  }
class C{  public DExportPrivateKeyPvk(JFrame parent,String entryAlias,PrivateKey privateKey,PasswordQualityConfig passwordQualityConfig){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.entryAlias=entryAlias;  this.privateKey=privateKey;  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  public LMSOfflineControlPanel(final LMSOffline trainer,Window frame){  this.frame=frame;  this.trainer=trainer;  noisePanel=new RandomizerPanel(frame);  noisePanel.fillFieldValues(trainer.getNoiseGen());  noiseTri=new DropDownTriangle(UpDirection.LEFT,false,"","",frame);  String text=noisePanel.getSummary();  noiseTri.setBothTexts(text,text);  init();}  }
class C{  void becomeCoordinator(){  becomeCoordinator(null);}  }
class C{  @Override protected void initData(){}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    target.replaceSelection("\t");  }}  }
class C{  public PcPatternRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public static int str2Int(String s){  int i=0;  try {    i=Integer.parseInt(strReplace(",","",null2Str(s,"0")));  } catch (  Exception e) {    i=0;  }  return i;}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public static void logForDataLoss(PartitionedRegion partitionedRegion,int bucketId,String callingMethod){  if (!Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "PRDebug")) {    return;  }  Region root=PartitionedRegionHelper.getPRRoot(partitionedRegion.getCache());  PartitionRegionConfig prConfig=(PartitionRegionConfig)root.get(partitionedRegion.getRegionIdentifier());  if (prConfig == null)   return;  Set members=partitionedRegion.getDistributionManager().getDistributionManagerIds();  logger.warn(LocalizedMessage.create(LocalizedStrings.PartitionedRegionHelper_DATALOSS___0____SIZE_OF_NODELIST_AFTER_VERIFYBUCKETNODES_FOR_BUKID___1__IS_0,new Object[]{callingMethod,Integer.valueOf(bucketId)}));  logger.warn(LocalizedMessage.create(LocalizedStrings.PartitionedRegionHelper_DATALOSS___0____NODELIST_FROM_PRCONFIG___1,new Object[]{callingMethod,printCollection(prConfig.getNodes())}));  logger.warn(LocalizedMessage.create(LocalizedStrings.PartitionedRegionHelper_DATALOSS___0____CURRENT_MEMBERSHIP_LIST___1,new Object[]{callingMethod,printCollection(members)}));}  }
class C{  public void start(){  this.server.start();}  }
class C{  public static double powFast(double value,int power){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);  }  if (power > 5) {    double oddRemains=1.0;    do {      if ((power & 1) != 0) {        oddRemains*=value;      }      value*=value;      power>>=1;    } while (power > 5);    if (power == 3) {      return oddRemains * value * value* value;    } else {      double v2=value * value;      if (power == 4) {        return oddRemains * v2 * v2;      } else {        return oddRemains * v2 * v2* value;      }    }  } else   if (power >= 0) {    if (power < 3) {      if (power == 2) {        return value * value;      } else       if (power != 0) {        return value;      } else {        return 1.0;      }    } else {      if (power == 3) {        return value * value * value;      } else {        double v2=value * value;        if (power == 4) {          return v2 * v2;        } else {          return v2 * v2 * value;        }      }    }  } else {    if (power == Integer.MIN_VALUE) {      return 1.0 / (FastMath.powFast(value,Integer.MAX_VALUE) * value);    } else {      return 1.0 / FastMath.powFast(value,-power);    }  }}  }
class C{  protected void parseM() throws ParseException, IOException {  current=reader.read();  skipSpaces();  float x=parseFloat();  skipCommaSpaces();  float y=parseFloat();  pathHandler.movetoAbs(x,y);  boolean expectNumber=skipCommaSpaces2();  _parseL(expectNumber);}  }
class C{  public static int negate(int opcode){  if (opcode == if_acmp_null)   return if_acmp_nonnull; else   if (opcode == if_acmp_nonnull)   return if_acmp_null; else   return ((opcode + 1) ^ 1) - 1;}  }
class C{  public WordDistance(WordToken word,WordDistance wordDistance){  this.word=word;  this.previous=wordDistance;  this.distance=wordDistance.getDistance() + 1;}  }
class C{  ValidatorsContainer(){  this.arrayValidators=new HashMap<>();  for (  ArrayTypeValidator.ArrayTypeEnum entr : ArrayTypeValidator.ArrayTypeEnum.values()) {    this.arrayValidators.put(entr.getType(),ArrayTypeValidator.fromValues(entr,this));  }  this.validators=new HashMap<>();  this.validators.put(XMPConstants.DATE,new DateTypeValidator());  this.validators.put(XMPConstants.LANG_ALT,new LangAltValidator());  this.validators.put(XMPConstants.URI,new URITypeValidator());  this.validators.put(XMPConstants.URL,new URLTypeValidator());  this.validators.put(XMPConstants.XPATH,new XPathTypeValidator());  for (  SimpleTypeValidator.SimpleTypeEnum entr : SimpleTypeValidator.SimpleTypeEnum.values()) {    this.validators.put(entr.getType(),SimpleTypeValidator.fromValue(entr));  }}  }
class C{  public SparseByteVector(TIntDoubleMap values,int dimensionality) throws IllegalArgumentException {  if (values.size() > dimensionality) {    throw new IllegalArgumentException("values.size() > dimensionality!");  }  this.indexes=new int[values.size()];  this.values=new byte[values.size()];{    TIntDoubleIterator iter=values.iterator();    for (int i=0; iter.hasNext(); i++) {      iter.advance();      this.indexes[i]=iter.key();    }    Arrays.sort(this.indexes);  }{    for (int i=0; i < values.size(); i++) {      this.values[i]=(byte)values.get(this.indexes[i]);    }  }  this.dimensionality=dimensionality;  final int maxdim=getMaxDim();  if (maxdim > dimensionality) {    throw new IllegalArgumentException("Given dimensionality " + dimensionality + " is too small w.r.t. the given values (occurring maximum: "+ maxdim+ ").");  }}  }
class C{  @Override public int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException {  try {    debugCode("executeUpdate(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testCompareToNegZero(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  public long rangeCount(final boolean exact,final Resource s,final URI p,final Value o,final Resource... c) throws Exception {  if (c == null) {    throw new IllegalArgumentException();  }  final UUID uuid=UUID.randomUUID();  final ConnectOptions opts=mgr.newQueryConnectOptions(sparqlEndpointURL,uuid,tx);  opts.addRequestParam("ESTCARD");  if (exact) {    opts.addRequestParam("exact","true");  }  if (s != null) {    opts.addRequestParam("s",EncodeDecodeValue.encodeValue(s));  }  if (p != null) {    opts.addRequestParam("p",EncodeDecodeValue.encodeValue(p));  }  if (o != null) {    opts.addRequestParam("o",EncodeDecodeValue.encodeValue(o));  }  opts.addRequestParam("c",EncodeDecodeValue.encodeContexts(c));  JettyResponseListener resp=null;  try {    opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);    checkResponseCode(resp=doConnect(opts));    final RangeCountResult result=rangeCountResults(resp);    return result.rangeCount;  }  finally {    if (resp != null)     resp.abort();  }}  }
class C{  public boolean updateFromGallery(GpsTrailerCacheCreator gtcc,ContentResolver contentResolver){  if (!GTG.apCache.hasGpsPoints())   return true;  if (GTG.timmyDb.getProperty("lastImageDateMs") == null) {    try {      GTG.timmyDb.beginTransaction();      GTG.timmyDb.setProperty("lastImageDateMs","0");      GTG.timmyDb.setProperty("lastVideoDateMs","0");      GTG.timmyDb.saveProperties();      GTG.timmyDb.setTransactionSuccessful();      GTG.timmyDb.endTransaction();    } catch (    IOException e) {      throw new IllegalStateException(e);    }  }  GTG.mediaLocTimeMap.deleteMarkedMltsFromDb();  long lastImageDateMs=Long.parseLong(GTG.timmyDb.getProperty("lastImageDateMs"));  long lastVideoDateMs=Long.parseLong(GTG.timmyDb.getProperty("lastVideoDateMs"));  long startTimeMs=GTG.cacheCreator.minTimeSec * 1000l;  ArrayList<MediaLocTime> media=new ArrayList<MediaLocTime>(rTree.count() + futureMltArray.size());  ArrayList<Integer> deletedMediaIds=new ArrayList<Integer>();  TimmyDatastoreAccessor<MediaLocTime> dataAccessor=new TimmyDatastoreAccessor(GTG.mediaLocTimeTimmyTable);  Cursor cursor=null;  boolean mediaUpToDate=true;  try {    GTG.timmyDb.beginTransaction();    int nextRowId=dataAccessor.getNextRowId();    boolean mediaNodesRetreived=false;    for (    int type : new int[]{MediaLocTime.TYPE_IMAGE,MediaLocTime.TYPE_VIDEO}) {      if (type == MediaLocTime.TYPE_IMAGE) {        String[] columns=new String[]{ImageColumns._ID,ImageColumns.DATA,ImageColumns.DATE_TAKEN,ImageColumns.LONGITUDE,ImageColumns.LATITUDE,ImageColumns.ORIENTATION};        cursor=contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,columns,ImageColumns.DATE_TAKEN + " >= ?",new String[]{String.valueOf(Math.max(startTimeMs,lastImageDateMs + 1))},ImageColumns.DATE_TAKEN + " limit " + MEDIA_SQL_LIMIT);      } else {        String[] columns=new String[]{VideoColumns._ID,VideoColumns.DATA,VideoColumns.DATE_TAKEN,VideoColumns.LONGITUDE,VideoColumns.LATITUDE};        cursor=contentResolver.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,columns,VideoColumns.DATE_TAKEN + " >= ?",new String[]{String.valueOf(Math.max(startTimeMs,lastVideoDateMs + 1))},ImageColumns.DATE_TAKEN + " limit " + MEDIA_SQL_LIMIT);      }      if (gtcc.isShutdown)       break;      if (!cursor.moveToFirst())       continue;      GTG.alert(GTGEvent.LOADING_MEDIA);      if (!mediaNodesRetreived) {        getAllNodesAndFindDeletedIds(media,deletedMediaIds,dataAccessor.getNextRowId());        mediaNodesRetreived=true;      }      int highestMediaIdForTypeInMlts=Integer.MIN_VALUE;      for (      MediaLocTime mlt : media) {        if (mlt.getType() == type)         highestMediaIdForTypeInMlts=Math.max(mlt.getFk(),highestMediaIdForTypeInMlts);      }      int mediaQueried=0;      while (!cursor.isAfterLast()) {        int mediaId=cursor.getInt(0);        String data=cursor.getString(1);        mediaQueried++;        if (!new File(data).exists()) {          Log.d(GTG.TAG,"File " + data + " returned from gallery but doesn't really exist");          cursor.moveToNext();          continue;        }        long dateTakenMs=cursor.getLong(2);        int orientation=0;        double lon=cursor.isNull(3) ? 0 : cursor.getDouble(3);        double lat=cursor.isNull(4) ? 0 : cursor.getDouble(4);        if (!Util.isLonLatSane(lon,lat)) {          lon=lat=0;        }        if (type == MediaLocTime.TYPE_IMAGE)         lastImageDateMs=dateTakenMs; else         if (type == MediaLocTime.TYPE_VIDEO)         lastVideoDateMs=dateTakenMs;        if (type == MediaLocTime.TYPE_IMAGE) {          orientation=cursor.getInt(5);          ExifInterface ei;          try {            ei=new ExifInterface(data);            long exifDate=Util.getExifDateInUTC(ei);            TimeZoneTimeRow tz=GTG.tztSet.getTimeZoneCovering((int)(exifDate / 1000l));            if (tz != null && tz.getTimeZone() != null) {              int offset=tz.getTimeZone().getOffset(exifDate - tz.getTimeZone().getRawOffset());              exifDate-=offset;              Log.d(GTG.TAG,"adjusting exifDate by " + offset + " to "+ exifDate);            }            Log.d(GTG.TAG,"exifDate is " + exifDate + " android date is "+ dateTakenMs);            if (exifDate != 0) {              dateTakenMs=exifDate;              if (exifDate < startTimeMs) {                cursor.moveToNext();                continue;              }            }          } catch (          IOException e1) {            Log.d(GTG.TAG,"No exif data for image " + data);          }        }        Log.d(GTG.TAG,"type " + type + ", mediaId "+ mediaId+ " timeMs "+ dateTakenMs+ " data "+ data);synchronized (this) {          if (mediaId <= highestMediaIdForTypeInMlts) {            int currMltItemIndex=findMlt(mediaId,type,media);            if (currMltItemIndex != -1) {              Log.d(GTG.TAG,"Updating media " + mediaId + " type "+ type);              MediaLocTime mlt=media.get(currMltItemIndex);              mlt.markDeleted();              deletedMediaIds.add(mlt.id);              dataAccessor.updateRow(mlt);              media.remove(currMltItemIndex);            }          }          MediaLocTime mlt=createMediaLocTime(mediaId,dateTakenMs,type,orientation,lon,lat);          if (deletedMediaIds.isEmpty()) {            mlt.id=nextRowId++;            dataAccessor.insertRow(mlt);          } else {            mlt.id=deletedMediaIds.remove(deletedMediaIds.size() - 1);            dataAccessor.updateRow(mlt);          }          media.add(mlt);          Bitmap x=mlt.getThumbnailBitmap(contentResolver,true);          if (x != null)           x.recycle();        }        cursor.moveToNext();      }      if (mediaQueried == MEDIA_SQL_LIMIT)       mediaUpToDate=false;      Log.d(GTG.TAG,"Media queried for type " + type + " is "+ mediaQueried);      cursor.close();    }    GTG.timmyDb.setProperty("lastImageDateMs",String.valueOf(lastImageDateMs));    GTG.timmyDb.setProperty("lastVideoDateMs",String.valueOf(lastVideoDateMs));    GTG.timmyDb.saveProperties();    GTG.timmyDb.setTransactionSuccessful();    if (mediaNodesRetreived) {      resetAllMedia(media);      final OsmMapGpsTrailerReviewerMapActivity localGtum=GTG.cacheCreator.gtum;      if (localGtum != null) {        localGtum.notifyMediaChanged();      }    }  } catch (  IOException e) {    throw new IllegalStateException(e);  } finally {    DbUtil.closeCursors(cursor);    try {      GTG.timmyDb.endTransaction();    } catch (    IOException e) {      throw new IllegalStateException(e);    }  }  return mediaUpToDate;}  }
class C{  public static void addFlow(Map<String,Flow> flowMap){  sFlowMap.putAll(flowMap);}  }
class C{  public SimpleLoader createSimpleLoader(){  return new SimpleLoader(_classLoader);}  }
class C{  public void start(){  startProcessThread(serviceName,DBSVC_MAIN,getFullConfigFilePath(configFile));}  }
class C{  synchronized protected int next(int bits){  int y;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return y >>> (32 - bits);}  }
class C{  public Uniform(double min,double max,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(min,max);}  }
class C{  public static void init(final Context context,FileDownloadHelper.OkHttpClientCustomMaker okHttpClientCustomMaker){  init(context,okHttpClientCustomMaker,0);}  }
class C{  public void makeImmutable(){  if (!isImmutable) {    overflowEntries=overflowEntries.isEmpty() ? Collections.<K,V>emptyMap() : Collections.unmodifiableMap(overflowEntries);    isImmutable=true;  }}  }
class C{  public static byte[] rotateCW(byte[] data,int imageWidth,int imageHeight){  byte[] yuv=new byte[imageWidth * imageHeight];  int i=0;  for (int x=0; x < imageWidth; x++) {    for (int y=imageHeight - 1; y >= 0; y--) {      yuv[i]=data[y * imageWidth + x];      i++;    }  }  return yuv;}  }
class C{  private MrcMessage loadChars() throws java.io.IOException {  int nchars;  byte[] rcvBuffer=new byte[32];  nchars=inpipe.read(rcvBuffer,0,32);  MrcMessage msg=new MrcMessage(nchars);  for (int i=0; i < nchars; i++) {    msg.setElement(i,rcvBuffer[i] & 0xFF);  }  return msg;}  }
class C{  private void updateOptimisticLocks(Long optimisticLockTime,List<Entity> entities){  for (  Entity entity : entities) {    if (entity.getEntityType().supportsOptimisticLocking()) {      entity.getOptimisticLock().setValue(optimisticLockTime);    }  }}  }
class C{  protected void updateEnabled(){  setEnabled(this.enabled);}  }
class C{  public DocumentFragment parseFragment(Document doc) throws ParseException {  OpenElementStack elementStack=makeElementStack(doc,mq);  elementStack.open(true);  skipFragmentIgnorables();  while (!tokens.isEmpty()) {    parseDom(elementStack);    skipFragmentIgnorables();  }  checkEnd(elementStack);  DocumentFragment fragment=elementStack.getRootElement();  if (elementStack.needsNamespaceFixup()) {    fragment=(DocumentFragment)fixup(fragment,ns);  }  return fragment;}  }
class C{  public synchronized void close(){}  }
class C{  public SaveLabel(final JList<? extends T> list,final Object value,final int index,final boolean isSelected){  labelIndex=index;  if (isSelected) {    setBackground(list.getSelectionBackground());    setForeground(list.getSelectionForeground());  } else {    setBackground(list.getBackground());    setForeground(list.getForeground());  }  setText(value.toString());}  }
class C{  public boolean isMultipleLines(){  return isMultipleLines;}  }
class C{  public void localTransactionStarted(ConnectionEvent event){}  }
class C{  public void add(Predicate p,double size){  super.add(p,new Double(size));}  }
class C{  public void add(@Nullable Component component,String description){  items.add(new Item(component,description));}  }
class C{  public Bean(){}  }
class C{  public TFloatLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public SerialVersionDefaultOperation(ASTNode[] nodes){  super(nodes);}  }
class C{  @Override public long skip(long n) throws IOException {  if (n == 0) {    return 0;  }  long target=nextByteIndex + n;  long skipped;  int currentLength=(int)(alloc.memoryLength + alloc.storageLength);  if (target > currentLength) {    skipped=currentLength - nextByteIndex;    nextByteIndex=currentLength;    if (fileInput != null)     seek(alloc.storageLength);  } else   if (target < alloc.memoryLength) {    skipped=target - nextByteIndex;    long amountToSkip=skipped;    while (amountToSkip > 0) {      int currentBufferLength=alloc.buffers.get(bufferIndex).length;      if (bufferOffset + amountToSkip >= alloc.buffers.get(bufferIndex).length) {        amountToSkip-=(currentBufferLength - bufferOffset);        bufferIndex++;        bufferOffset=0;      } else {        bufferOffset=(int)amountToSkip;        amountToSkip=0;        nextByteIndex=target;      }    }  } else {    if (fileInput == null) {      fileInput=new FileInputStream(alloc.cacheFile);      input=new BufferedInputStream(fileInput);    }    seek(target - alloc.memoryLength);    skipped=target - nextByteIndex;    nextByteIndex=target;  }  return skipped;}  }
class C{  private static void addClassFilePath(String classPath,Set<String> patternList){  if (classPath != null && classPath.length() > 0) {    if (classPath.endsWith(CLASS_SUFFIX)) {      classPath=classPath.substring(0,classPath.length() - CLASS_SUFFIX.length()).replace('.','/') + CLASS_SUFFIX;    } else {      classPath=classPath.replace('.','/');    }    patternList.add(classPath);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SMALLER_OP___SMALLER_OP_1:    setSmallerOp_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isArrayContentDetail(){  return super.isArrayContentDetail();}  }
class C{  final Executor executor(){  return executor;}  }
class C{  private void printSolution(Solution solution){  if (includeVariables) {    for (int i=0; i < solution.getNumberOfVariables(); i++) {      if (i > 0) {        writer.print(' ');      }      writer.print(encode(solution.getVariable(i)));    }  }  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    if ((i > 0) || (includeVariables && (solution.getNumberOfVariables() > 0))) {      writer.print(' ');    }    writer.print(solution.getObjective(i));  }  writer.println();}  }
class C{  public static void isNotNull(Object object,String message){  if (object == null)   throw new AssertionFailedException("null argument:" + message);}  }
class C{  public AbstractGraph(int[][] edges,int numberOfVertices){  for (int i=0; i < numberOfVertices; i++) {    addVertex((V)(new Integer(i)));  }  createAdjacencyLists(edges,numberOfVertices);}  }
class C{  public title addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private synchronized void reinit(){  disposeLock.lock();  try {    if (getPartControl().isDisposed()) {      return;    }    this.startTimestampText.setText("");    this.startTime=0;    this.finishTimestampText.setText("");    this.lastCheckpointTimeText.setText("");    this.currentStatusText.setText(TLCModelLaunchDataProvider.NOT_RUNNING);    this.errorStatusHyperLink.setText(TLCModelLaunchDataProvider.NO_ERRORS);    this.coverage.setInput(new Vector<CoverageInformationItem>());    this.stateSpace.setInput(new Vector<StateSpaceInformationItem>());    this.progressOutput.setDocument(new Document(TLCModelLaunchDataProvider.NO_OUTPUT_AVAILABLE));    this.userOutput.setDocument(new Document(TLCModelLaunchDataProvider.NO_OUTPUT_AVAILABLE));  }  finally {    disposeLock.unlock();  }}  }
class C{  public StatementSequence normalizeAssignments(){  LinkedList<RTLStatement> oldSequence=sequence;  sequence=new LinkedList<RTLStatement>();  for (  RTLStatement statement : oldSequence) {    if (statement instanceof AssignmentTemplate)     sequence.addLast(((AssignmentTemplate)statement).convertToSpecificAssignmentType()); else     sequence.addLast(statement);  }  return this;}  }
class C{  public void testBug1958() throws Exception {  PreparedStatement pStmt=null;  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1958");    this.stmt.executeUpdate("CREATE TABLE testBug1958 (field1 int)");    pStmt=this.conn.prepareStatement("SELECT * FROM testBug1958 WHERE field1 IN (?, ?, ?)");    try {      pStmt.setInt(4,1);    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }  }  finally {    if (pStmt != null) {      pStmt.close();    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1958");  }}  }
class C{  public boolean isScrollPage(){  return scrollPage;}  }
class C{  public static boolean createNPC(String name){  User user=getUserByName(name);  if (user == null) {    createNPCFile(name);    return true;  }  return false;}  }
class C{  @Override public Long append(final byte[] key,final byte[] value){  checkIsInMultiOrPipeline();  client.append(key,value);  return client.getIntegerReply();}  }
class C{  public synchronized boolean removeEdge(Edge edge){  if (!edgesSet.contains(edge)) {    return false;  }  List<Edge> edgeList1=edgeLists.get(edge.getNode1());  List<Edge> edgeList2=edgeLists.get(edge.getNode2());  edgeList1=new ArrayList<>(edgeList1);  edgeList2=new ArrayList<>(edgeList2);  edgesSet.remove(edge);  edgeList1.remove(edge);  edgeList2.remove(edge);  edgeLists.put(edge.getNode1(),edgeList1);  edgeLists.put(edge.getNode2(),edgeList2);  highlightedEdges.remove(edge);  stuffRemovedSinceLastTripleAccess=true;  ancestors=null;  getPcs().firePropertyChange("edgeRemoved",edge,null);  return true;}  }
class C{  private void createCameraSource(){  Context context=getApplicationContext();  FaceDetector detector=new FaceDetector.Builder(context).setClassificationType(FaceDetector.ALL_CLASSIFICATIONS).build();  detector.setProcessor(new MultiProcessor.Builder<>(new GraphicFaceTrackerFactory()).build());  if (!detector.isOperational()) {    Log.w(TAG,"Face detector dependencies are not yet available.");  }  mCameraSource=new CameraSource.Builder(context,detector).setRequestedPreviewSize(640,480).setFacing(CameraSource.CAMERA_FACING_BACK).setRequestedFps(30.0f).build();}  }
class C{  private void verifyIsDelegatingForLoggerFilter(final Level level,final boolean expectIsDelegating) throws Exception {  assertThat(expectIsDelegating,is(true));  writeLoggerFilterConfigFile(this.configFile,level);  this.appenderContext.reconfigure();  assertThat(this.logger.getLevel(),is(level));  assertThat(this.logger.isTraceEnabled(),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(((FastLogger)this.logger).isDelegating(),is(expectIsDelegating));}  }
class C{  public MyCertPath(byte[] encoding){  super("MyEncoding");  this.encoding=encoding;  certificates=new Vector<MyCertificate>();  certificates.add(new MyCertificate("MyEncoding",encoding));  encodingNames=new Vector<String>();  encodingNames.add("MyEncoding");}  }
class C{  private void dump_entry_fixed(int entry_start,int nameOffset,int vectorLength,byte typeCodeByte,byte flags,byte unitsByte,byte varByte,int dataOffset){  if (DEBUG) {    System.err.println("Entry at offset: 0x" + Integer.toHexString(entry_start));    System.err.println("\tname_offset = 0x" + Integer.toHexString(nameOffset));    System.err.println("\tvector_length = 0x" + Integer.toHexString(vectorLength));    System.err.println("\tdata_type = 0x" + Integer.toHexString(typeCodeByte));    System.err.println("\tflags = 0x" + Integer.toHexString(flags));    System.err.println("\tdata_units = 0x" + Integer.toHexString(unitsByte));    System.err.println("\tdata_variability = 0x" + Integer.toHexString(varByte));    System.err.println("\tdata_offset = 0x" + Integer.toHexString(dataOffset));  }}  }
class C{  public synchronized void startTest() throws RemoteException {  this.notifyAll();}  }
class C{  public int renameConfiguration(final String oldName,final String newName,final String configuration){  mSingleArg[0]=oldName;  final ContentValues values=mValues;  values.clear();  values.put(ConfigurationContract.Configuration.NAME,newName);  values.put(ConfigurationContract.Configuration.XML,configuration);  return mDatabase.update(Tables.CONFIGURATIONS,values,NAME_SELECTION,mSingleArg);}  }
class C{  public FormatRed(CachableRed cr,SampleModel sm){  super(cr,cr.getBounds(),makeColorModel(cr,sm),sm,cr.getTileGridXOffset(),cr.getTileGridYOffset(),null);}  }
class C{  public static List<StorageObject> listBucket(String bucketName) throws IOException, GeneralSecurityException {  Storage client=StorageFactory.getService();  Storage.Objects.List listRequest=client.objects().list(bucketName);  List<StorageObject> results=new ArrayList<StorageObject>();  Objects objects;  do {    objects=listRequest.execute();    results.addAll(objects.getItems());    listRequest.setPageToken(objects.getNextPageToken());  } while (null != objects.getNextPageToken());  return results;}  }
class C{  public BlockChainScore(final Deserializer deserializer){  this(deserializer.readBigInteger("score"));}  }
class C{  public int maxProfit(int[] prices){  if (prices == null || prices.length < 2)   return 0;  int sell=0, lastSell=0, buy=-prices[0], lastBuy;  for (  int price : prices) {    lastBuy=buy;    buy=Math.max(lastSell - price,lastBuy);    lastSell=sell;    sell=Math.max(lastBuy + price,lastSell);  }  return sell;}  }
class C{  public PlainTextConverter(SimpleWikiConfiguration config,boolean enumerateSections,int wrapCol){  this.config=config;  this.wrapCol=wrapCol;  this.enumerateSections=enumerateSections;}  }
class C{  public final void markResourceAbsent(long resourceID){  this.markResourceAbsent(Long.toString(resourceID));}  }
class C{  public static byte[] concatenate(byte[][] array){  int rowLength=array[0].length;  byte[] result=new byte[array.length * rowLength];  int index=0;  for (int i=0; i < array.length; i++) {    System.arraycopy(array[i],0,result,index,rowLength);    index+=rowLength;  }  return result;}  }
class C{  public static boolean isBasic(Class<?> aClass){  return basicTypes.contains(aClass.getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.276 -0400",hash_original_method="08C317BDC8285190F2AC301E6C0D0898",hash_generated_method="B137EE2164366D1C4100E2586B9D52DF") public boolean isPortrait(){  return mHeightMils >= mWidthMils;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public boolean equals(Object o){  if (this == o)   return true; else   if (o == null)   return false;  if (_handler == null)   return false; else   if (o.equals(_handler))   return true;  if (!(o instanceof SubHandler))   return false;  SubHandler subHandler=(SubHandler)o;  return _handler.equals(subHandler._handler);}  }
class C{  private float spacing(float x1,float y1,float x2,float y2){  float x=x1 - x2;  float y=y1 - y2;  return (float)Math.sqrt(x * x + y * y);}  }
class C{  public DockerMachineSource withTag(String tag){  this.tag=tag;  return this;}  }
class C{  @Path("cleanup") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse cleanup(final CleanupRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.cleanup(request);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public double value(double x){  double x1=x == 0 ? relativePrecision : x * (1 + relativePrecision);  double x2=2 * x - x1;  return (f.value(x1) - f.value(x2)) / (x1 - x2);}  }
class C{  public ByteSparseArrayDataRow(int size){  super(size);  values=new byte[size];}  }
class C{  private int referenceKind(Symbol refSym){  if (refSym.isConstructor()) {    return ClassFile.REF_newInvokeSpecial;  } else {    if (refSym.isStatic()) {      return ClassFile.REF_invokeStatic;    } else     if ((refSym.flags() & PRIVATE) != 0) {      return ClassFile.REF_invokeSpecial;    } else     if (refSym.enclClass().isInterface()) {      return ClassFile.REF_invokeInterface;    } else {      return ClassFile.REF_invokeVirtual;    }  }}  }
class C{  @POST @Path("rename/linked/apply") @Consumes("application/json") @Produces("application/json") public RefactoringResult applyLinkedModeRename(LinkedRenameRefactoringApply refactoringApply) throws RefactoringException, CoreException {  return manager.applyLinkedRename(refactoringApply);}  }
class C{  public void shearY(float angle){  g.shearY(angle);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SGLOBAL;}  }
class C{  public void test_ticket_1202k() throws Exception {  new TestHelper("ticket-1202-group05-modified4","ticket-1202-group05-modified4.rq","ticket-1202-group05-modified4.ttl","ticket-1202-group05-modified4.srx").runTest();}  }
class C{  public static void log(int type,String sender,String comment,Throwable thr){synchronized (listeners) {    for (int i=0; i < listeners.size(); ++i) {      ((ILogListener)listeners.elementAt(i)).handleLogMessage(type,sender,comment,thr);    }  }}  }
class C{  public void addRow(Object[] row) throws CarbonSortKeyAndGroupByException {  int currentSize=entryCount;  if (sortBufferSize == currentSize) {    LOGGER.debug("************ Writing to temp file ********** ");    File[] fileList;    if (procFiles.size() >= numberOfIntermediateFileToBeMerged) {synchronized (lockObject) {        fileList=procFiles.toArray(new File[procFiles.size()]);        this.procFiles=new ArrayList<File>(1);      }      LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);      startIntermediateMerging(fileList);    }    Object[][] recordHolderListLocal=recordHolderList;    try {      semaphore.acquire();      dataSorterAndWriterExecutorService.submit(new DataSorterAndWriter(recordHolderListLocal));    } catch (    InterruptedException e) {      LOGGER.error("exception occurred while trying to acquire a semaphore lock: " + e.getMessage());      throw new CarbonSortKeyAndGroupByException(e.getMessage());    }    this.recordHolderList=new Object[this.sortBufferSize][];    this.entryCount=0;  }  recordHolderList[entryCount++]=row;}  }
class C{  public static TopTreebankNode parse(String parse){  parse=prepareString(parse);  String plainText=inferPlainText(parse).trim();  return parse(parse,plainText,0);}  }
class C{  public static final String decode(final long[] obfuscated){  final int length=obfuscated.length;  final byte[] encoded=new byte[8 * (length - 1)];  final long seed=obfuscated[0];  final Random prng=new Random(seed);  for (int i=1; i < length; i++) {    final long key=prng.nextLong();    final int off=8 * (i - 1);    long l=obfuscated[i] ^ key;    final int end=Math.min(encoded.length,off + 8);    for (int i2=off; i2 < end; i2++) {      encoded[i2]=(byte)l;      l>>=8;    }  }  final String decoded;  try {    decoded=new String(encoded,"UTF8");  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  final int i=decoded.indexOf(0);  return i != -1 ? decoded.substring(0,i) : decoded;}  }
class C{  protected void checkForAnnotatedJdk(){  if (checkedJDK) {    return;  }  checkedJDK=true;  if (checker.hasOption("nocheckjdk")) {    return;  }  TypeElement objectTE=elements.getTypeElement("java.lang.Object");  List<? extends Element> members=elements.getAllMembers(objectTE);  for (  Element member : members) {    if (member.toString().equals("equals(java.lang.Object)")) {      ExecutableElement m=(ExecutableElement)member;      boolean foundNN=false;      for (      com.sun.tools.javac.code.Attribute.TypeCompound tc : ((com.sun.tools.javac.code.Symbol)m).getRawTypeAttributes()) {        if (tc.position.type == com.sun.tools.javac.code.TargetType.METHOD_FORMAL_PARAMETER && tc.position.parameter_index == 0 && tc.type.toString().equals("org.checkerframework.checker.nullness.qual.Nullable")) {          foundNN=true;        }      }      if (!foundNN) {        String jdkJarName=PluginUtil.getJdkJarName();        checker.message(Kind.WARNING,"You do not seem to be using the distributed annotated JDK.  To fix the" + System.getProperty("line.separator") + "problem, supply this argument (first, fill in the \"...\") when you run javac:"+ System.getProperty("line.separator")+ "  -Xbootclasspath/p:.../checker/dist/"+ jdkJarName);      }    }  }}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_MethodParamsAndBody_PropertyMethodDeclaration_StrictFormalParameters_TypeVariables(ISerializationContext context,PropertyMethodDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void createResponseFragment(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties cookieProperties,MobileDoc doc) throws IOException {  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/html; charset=UTF-8");  if (cookieProperties != null) {    Cookie cookie=new Cookie(MobileEnv.COOKIE_INFO,propertiesEncode(cookieProperties));    cookie.setComment("(c) adempiere, Inc - Jorg Janke");    cookie.setSecure(false);    cookie.setPath("/");    if (cookieProperties.size() == 0)     cookie.setMaxAge(0); else     cookie.setMaxAge(2592000);    response.addCookie(cookie);  }  PrintWriter out=response.getWriter();  doc.outputBody(out);  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"error writing");  out.close();}  }
class C{  protected void stratStep(int numFolds){  ArrayList<Instance> newVec=new ArrayList<Instance>(m_Instances.size());  int start=0, j;  while (newVec.size() < numInstances()) {    j=start;    while (j < numInstances()) {      newVec.add(instance(j));      j=j + numFolds;    }    start++;  }  m_Instances=newVec;}  }
class C{  public void removeHttpSession(HttpSession session){  if (session == activeSession) {    activeSession=null;  }synchronized (this.sessions) {    this.sessions.remove(session);  }  this.model.removeHttpSession(session);  session.invalidate();}  }
class C{  public IdentifierTree buildVariableUse(VariableTree decl){  return (IdentifierTree)maker.Ident((JCTree.JCVariableDecl)decl);}  }
class C{  public boolean isLeaf(){  return !hasChildren();}  }
class C{  @GwtIncompatible @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  private void handleCommandButton(){  Attributes attrs=validatorInfo.getAttributes();  String ln=validatorInfo.getLocalName();  boolean hasValue=false;  boolean hasImage=false;  boolean hasBinding=false;  for (int i=0; i < attrs.getLength(); i++) {    if (attrs.getLocalName(i).equals("value")) {      hasValue=true;    }    if (attrs.getLocalName(i).equals("image")) {      hasImage=true;    }    if (attrs.getLocalName(i).equals("binding")) {      hasBinding=true;    }  }  if (failed=(!hasBinding && !(hasValue || hasImage))) {    Object[] obj=new Object[1];    obj[0]=ln;    ResourceBundle rb=ResourceBundle.getBundle(RIConstants.TLV_RESOURCE_LOCATION);    failureMessages.append(MessageFormat.format(rb.getString("TLV_COMMAND_ERROR"),obj));    failureMessages.append("\n");  }}  }
class C{  public static String parseFileSetFromURI(String uri){  Matcher matcher=uriPattern.matcher(uri);  if (matcher.matches()) {    return matcher.group(1);  }  return null;}  }
class C{  public SQLTimeoutException(String reason){  super(reason,null,0);}  }
class C{  public DbfTableModel headerClone(){  int size=getColumnCount();  DbfFile dtm=new DbfFile(size);  for (int i=0; i < size; i++) {    dtm.setColumnName(i,this.getColumnName(i));    dtm.setDecimalCount(i,this.getDecimalCount(i));    dtm.setLength(i,this.getLength(i));    dtm.setType(i,this.getType(i));  }  return dtm;}  }
class C{  protected void keyReleaseOccured(KeyEvent keyEvent){  if (keyEvent.character == '\r') {    if (text != null && !text.isDisposed() && (text.getStyle() & SWT.MULTI) != 0) {      if ((keyEvent.stateMask & SWT.CTRL) != 0) {        super.keyReleaseOccured(keyEvent);      }    }    return;  }  super.keyReleaseOccured(keyEvent);}  }
class C{  public VectorSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key,autoSort,allowDuplicateXValues);}  }
class C{  private Alignment readDataBlock() throws ImportException, IOException {  taxonCount=0;  siteCount=0;  dataType=null;  readDataBlockHeader("MATRIX",DATA_BLOCK);  SimpleAlignment alignment=new SimpleAlignment();  readSequenceData(alignment,null);  alignment.updateSiteCount();  findEndBlock();  return alignment;}  }
class C{  private void showFormulario(ActionMapping mapping,BusquedaElementosForm form,Busqueda busqueda,HttpServletRequest request){  BusquedasHelper.loadListasBusqueda(busqueda,form,request,null);  setReturnActionFordward(request,mapping.findForward("busqueda_elementos"));}  }
class C{  public ReverseListIterator(List<T> list){  this.delegate=list.listIterator(list.size());}  }
class C{  @Override public synchronized void flush() throws IOException {  forceFlush();}  }
class C{  public Author(String name){  super(KEY,name);}  }
class C{  public void addRow(Assignment condition,String head,double prob){  addRow(condition,ValueFactory.create(head),prob);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  private BusinessObjectDataStatus createNotAvailableBusinessObjectDataStatus(BusinessObjectDataAvailabilityRequest businessObjectDataAvailabilityRequest,List<String> unmatchedPartitionFilter,String reason){  BusinessObjectDataStatus businessObjectDataStatus=new BusinessObjectDataStatus();  businessObjectDataStatus.setBusinessObjectFormatVersion(businessObjectDataAvailabilityRequest.getBusinessObjectFormatVersion());  if (businessObjectDataAvailabilityRequest.getPartitionValueFilters() != null) {    replaceAllNullsWithEmptyString(unmatchedPartitionFilter);    businessObjectDataStatus.setPartitionValue(unmatchedPartitionFilter.get(0));    businessObjectDataStatus.setSubPartitionValues(unmatchedPartitionFilter.subList(1,unmatchedPartitionFilter.size()));  } else {    for (    String partitionValue : unmatchedPartitionFilter) {      if (partitionValue != null) {        businessObjectDataStatus.setPartitionValue(partitionValue);        break;      }    }  }  businessObjectDataStatus.setBusinessObjectDataVersion(businessObjectDataAvailabilityRequest.getBusinessObjectDataVersion());  businessObjectDataStatus.setReason(reason);  return businessObjectDataStatus;}  }
class C{  public String deleteAsocRegs(UseCaseConf useCaseConf,Integer bookId,Integer folderId) throws Exception {  BookUseCaseAsocRegsUtil.deleteAsocRegsSec(useCaseConf,bookId,folderId);  Document doc=XMLAsocRegsValidate.createXMLAsocRegsValidate("10","");  OutputFormat format=OutputFormat.createPrettyPrint();  format.setEncoding("UTF-8");  StringWriter writer=new StringWriter();  XMLWriter xmlWriter=new XMLWriter(writer,format);  try {    xmlWriter.write(doc);  } catch (  IOException e) {    throw new BookException(BookException.ERROR_ASOCREGS_VALIDATED_SELECTED);  }  String xml=writer.toString();  if (_logger.isDebugEnabled()) {    _logger.debug(xml);  }  return xml;}  }
class C{  public static MongoDatabase createDatabaseProxy(final MongoDatabase database){  if (DISABLED) {    return database;  }  SERVICES_COUNTER.setDisplayed(!COUNTER_HIDDEN);  SERVICES_COUNTER.setUsed(true);  return JdbcWrapper.createProxy(database,new MongoDatabaseHandler(database));}  }
class C{  public void removePropertyChangeListener(final String propertyName,final PropertyChangeListener listener){  m_PropertyChangeSupport.removePropertyChangeListener(propertyName,listener);}  }
class C{  public AttributeNotFoundError(Operator operator,int code,String key,String attributeName){  super(operator,code,attributeName);  if (attributeName == null) {    this.attributeName="";  } else {    this.attributeName=attributeName;  }  this.key=key;}  }
class C{  public static void main(String[] args){  new AdditionExample().generateTable();}  }
class C{  public NetscapeCertTypeExtension(){  extensionId=NetscapeCertType_Id;  critical=true;  bitString=new boolean[0];}  }
class C{  @Override public T[] nextChunk(){  throw new UnsupportedOperationException();}  }
class C{  public void testFailedNodes5() throws Exception {  try {    ThreadLocalRandom rnd=ThreadLocalRandom.current();    for (int iter=0; iter < 3; iter++) {      final int NODES=iter == 0 ? 2 : rnd.nextInt(3,6);      for (int i=0; i < NODES; i++) {        nodeSpi.set(new TestFailedNodesSpi(-1));        startGrid(i);      }      Map<Long,Ignite> nodes=new HashMap<>();      for (int i=0; i < NODES; i++) {        Ignite ignite=ignite(i);        nodes.put(ignite.cluster().localNode().order(),ignite);      }      Ignite ignite=ignite(rnd.nextInt(NODES));      log.info("Iteration [iter=" + iter + ", nodes="+ NODES+ ", failFrom="+ ignite.name()+ ']');      TestFailedNodesSpi spi=(TestFailedNodesSpi)ignite.configuration().getDiscoverySpi();      spi.failSingleMsg=true;      long order=ignite.cluster().localNode().order();      long nextOrder=order == NODES ? 1 : order + 1;      Ignite failingNode=nodes.get(nextOrder);      assertNotNull(failingNode);      waitNodeStop(failingNode.name());      Ignite newNode=startGrid(NODES);      assertEquals(NODES,newNode.cluster().nodes().size());      tryCreateCache(NODES);      stopAllGrids();    }  }  finally {    stopAllGrids();  }}  }
class C{  private void onJoinComplete(Integer count,Result<Boolean> result){  if (count == null) {    count=0;  }  _joinState=_joinState.onJoinComplete(count,this);  updatePodsFromHeartbeat();  waitForHubHeartbeat(count,result);  if (_joinLifecycle.toActive()) {    _timer.runAfter(_joinTask,getJoinTimeout(),TimeUnit.MILLISECONDS,Result.ignore());  }}  }
class C{  private void init(){  Element documentElement=documentInfo.getDocument().getDocumentElement();  String namespace=documentElement.getNamespaceURI();  id=getDocumentName(documentElement);  NodeList orderingElements=documentElement.getElementsByTagNameNS(namespace,ORDERING);  Set<String> beforeIds=null;  Set<String> afterIds=null;  if (orderingElements.getLength() > 0) {    for (int i=0, len=orderingElements.getLength(); i < len; i++) {      Node orderingNode=orderingElements.item(i);      NodeList children=orderingNode.getChildNodes();      for (int j=0, jlen=children.getLength(); j < jlen; j++) {        Node n=children.item(j);        if (beforeIds == null) {          beforeIds=extractIds(n,BEFORE);        }        if (afterIds == null) {          afterIds=extractIds(n,AFTER);        }      }    }  }  this.beforeIds=((beforeIds != null) ? beforeIds.toArray(new String[beforeIds.size()]) : new String[0]);  this.afterIds=((afterIds != null) ? afterIds.toArray(new String[afterIds.size()]) : new String[0]);  Arrays.sort(this.beforeIds);  Arrays.sort(this.afterIds);  checkDuplicates(this.beforeIds,this.afterIds);  checkDuplicates(this.afterIds,this.beforeIds);}  }
class C{  public AbstractRectangularGraphic(String sidc){  super(sidc);  this.quad=this.createShape();}  }
class C{  public static int clearListInfoBatch(Delegator delegator,String shoppingListId) throws GenericEntityException {  ModelEntity shoppingListItemSurveyModelEntity=delegator.getModelReader().getModelEntity("ShoppingListItemSurvey");  List<EntityCondition> toBeRemovedCondition=new LinkedList<EntityCondition>();  EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toMap("shoppingListId",shoppingListId));  toBeRemovedCondition.add(condition);  delegator.removeAllByAndBatch(shoppingListItemSurveyModelEntity,toBeRemovedCondition);  delegator.removeByAnd("ShoppingListItem",UtilMisc.toMap("shoppingListId",shoppingListId));  ModelEntity shoppingListItemModelEntity=delegator.getModelReader().getModelEntity("ShoppingListItemSurvey");  List<EntityCondition> toBeRemovedShoppingListItemCondition=new LinkedList<EntityCondition>();  EntityCondition shoppingListItemCondition=EntityCondition.makeCondition(UtilMisc.toMap("shoppingListId",shoppingListId));  toBeRemovedShoppingListItemCondition.add(shoppingListItemCondition);  return delegator.removeAllByAndBatch(shoppingListItemModelEntity,toBeRemovedShoppingListItemCondition);}  }
class C{  final void tryTerminate(){  for (; ; ) {    int c=ctl.get();    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {        try {          terminated();        }  finally {          ctl.set(ctlOf(TERMINATED,0));          termination.signalAll();        }        return;      }    }  finally {      mainLock.unlock();    }  }}  }
class C{  public static void highlightEdgesOfNode(final Node node,final boolean highlight){  final EdgeCursor edges=node.edges();  int edgeCount=node.degree();  for (Edge edge=edges.edge(); edgeCount > 0; edgeCount--) {    final EdgeRealizer edgeRealizer=((Graph2D)node.getGraph()).getRealizer(edge);    highlightEdge(edgeRealizer,highlight);    edges.cyclicNext();    edge=edges.edge();  }}  }
class C{  public boolean isAxisModulusCustom(){  return mIsAxisModulusCustom;}  }
class C{  public void onAppVisible(){  isAppVisible=true;  hideNotification();}  }
class C{  public void reduce(Text key,Iterator<ObjectWritable> values,OutputCollector<Text,CrawlDatum> output,Reporter reporter) throws IOException {  String url=key.toString();  Node node=null;  CrawlDatum datum=null;  while (values.hasNext()) {    ObjectWritable next=values.next();    Object value=next.get();    if (value instanceof Node) {      node=(Node)value;    } else     if (value instanceof CrawlDatum) {      datum=(CrawlDatum)value;    }  }  if (datum != null) {    if (node != null) {      float inlinkScore=node.getInlinkScore();      datum.setScore(inlinkScore);      LOG.debug(url + ": setting to score " + inlinkScore);    } else {      datum.setScore(clearScore);      LOG.debug(url + ": setting to clear score of " + clearScore);    }    output.collect(key,datum);  } else {    LOG.debug(url + ": no datum");  }}  }
class C{  protected void removeNotesFrame(){  m_NotesFrame.setVisible(false);}  }
class C{  public static final int minimum(){  return Integer.MIN_VALUE + 1;}  }
class C{  public Builder addListenUrls(List<String> urls){  List<String> needAdd=new ArrayList<String>();  for (  String url : urls) {    if (!UrlUtil.isUrl(url)) {      continue;    }    needAdd.add(url);  }  if (!CollectionUtil.isEmpty(needAdd)) {    if (mListenUrls == null) {      mListenUrls=new HashSet<String>();    }    mListenUrls.addAll(needAdd);  }  return this;}  }
class C{  public void workspaceToVirtualViewDelta(WorkspacePoint workspacePointIn,ViewPoint viewPointOut){  viewPointOut.set(workspaceToVirtualViewUnits(mRtl ? -workspacePointIn.x : workspacePointIn.x),workspaceToVirtualViewUnits(workspacePointIn.y));}  }
class C{  private void resetOverScroller(){  overScroller.forceFinished(true);  isScrollingFast=false;}  }
class C{  private Supplier<int[]> initializeEnglishSupplier(){  return Suppliers.memoize(null);}  }
class C{  public CombinationIterator(int[] maxValues){  numValues=maxValues.length;  values=new int[numValues];  this.maxValues=maxValues;  hasNext=true;}  }
class C{  public TernaryInstruction(OperationTypes op,byte in1,byte in2,double scalar_in3,byte out,long outputDim1,long outputDim2,String istr){  super(null,out);  mrtype=MRINSTRUCTION_TYPE.Ternary;  _op=op;  input1=in1;  input2=in2;  scalar_input3=scalar_in3;  _outputDim1=outputDim1;  _outputDim2=outputDim2;  instString=istr;}  }
class C{  public sub removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void testComputeCompletionProposalsNoProposals() throws CoreException, BadLocationException {  IProgressMonitor monitor=new NullProgressMonitor();  JsniMethodBodyCompletionProposalComputer jcpc=new JsniMethodBodyCompletionProposalComputer();  IJavaProject javaProject=JavaProjectUtilities.createJavaProject(synthesizeProjectNameForThisTest(this));  StringBuilder source=new StringBuilder();  source.append("class A {\n");  int methodALineNum=1;  source.append("  private native void a()\n");  int methodBLineNum=2;  source.append("  private native void b()/*-{}-*/;\n");  int methodCLineNum=3;  source.append("  private native void c();\n");  ICompilationUnit iCompilationUnit=JavaProjectUtilities.createCompilationUnit(javaProject,"A",source.toString());  CompilationUnitEditor cuEditor=(CompilationUnitEditor)JavaUI.openInEditor(iCompilationUnit);  ISourceViewer viewer=cuEditor.getViewer();  IDocument document=viewer.getDocument();  IRegion methodALineInfo=document.getLineInformation(methodALineNum);  assertNoProposals(monitor,jcpc,cuEditor,viewer,methodALineInfo.getOffset());  assertNoProposals(monitor,jcpc,cuEditor,viewer,methodALineInfo.getOffset() + (methodALineInfo.getLength() / 2));  assertTrue(jcpc.computeCompletionProposals(new JavaContentAssistInvocationContext(viewer,methodALineInfo.getOffset() + methodALineInfo.getLength(),cuEditor),monitor).size() > 0);  IRegion methodBLineInfo=document.getLineInformation(methodBLineNum);  assertNoProposals(monitor,jcpc,cuEditor,viewer,methodBLineInfo.getOffset() + methodBLineInfo.getLength());  IRegion methodCLineInfo=document.getLineInformation(methodCLineNum);  assertNoProposals(monitor,jcpc,cuEditor,viewer,methodCLineInfo.getOffset() + methodCLineInfo.getLength());  StringBuilder sourceI=new StringBuilder();  sourceI.append("interface B {\n");  sourceI.append("  private native void d()\n");  iCompilationUnit=JavaProjectUtilities.createCompilationUnit(javaProject,"B",sourceI.toString());  cuEditor=(CompilationUnitEditor)JavaUI.openInEditor(iCompilationUnit);  viewer=cuEditor.getViewer();  document=viewer.getDocument();  int methodDLineNum=1;  IRegion methodDLineInfo=document.getLineInformation(methodDLineNum);  assertNoProposals(monitor,jcpc,cuEditor,viewer,methodDLineInfo.getOffset());  assertNoProposals(monitor,jcpc,cuEditor,viewer,methodDLineInfo.getOffset() + methodDLineInfo.getLength());}  }
class C{  public static void logOrderStatus(int orderId,String status,int filled,int remaining,double avgFillPrice,int permId,int parentId,double lastFillPrice,int clientId,String whyHeld){  _log.info("orderId: " + orderId + " status: "+ status+ " filled: "+ filled+ " remaining: "+ remaining+ " avgFillPrice: "+ avgFillPrice+ " permId: "+ permId+ " parentId: "+ parentId+ " lastFillPrice: "+ lastFillPrice+ " clientId: "+ clientId+ " whyHeld: "+ whyHeld);}  }
class C{  public VariableTracker(TemplateBuffer buffer) throws MalformedTreeException, BadLocationException {  Assert.isLegal(buffer != null);  fBuffer=buffer;  fDocument=new Document(fBuffer.getString());  installJavaStuff(fDocument);  fDocument.addPositionCategory(CATEGORY);  fDocument.addPositionUpdater(new ExclusivePositionUpdater(CATEGORY));  fPositions=createRangeMarkers(fBuffer.getVariables(),fDocument);}  }
class C{  private void readyNextChunk(){  String[] firstLineOfChunk=csvReader.peek();  if (firstLineOfChunk == null) {    nextChunk=null;  } else {    nextChunk=new ArrayList<String[]>();    currentFieldValue=firstLineOfChunk[field];    String[] nextLine;    while (csvReader.peek() != null && csvReader.peek()[field].equals(currentFieldValue)) {      nextChunk.add(csvReader.readNext());    }  }}  }
class C{  public boolean attempt(long old,long val,Offset offset){  return this.plus(offset).attempt(old,val);}  }
class C{  private void removeElementWithParentWithLangAttr(){  if (elementWithLang.isEmpty()) {    return;  }  ElementHandler<Element> elementWithParentWithLang=new ElementHandlerImpl();  for (  Element el : elementWithoutLang.get()) {    if (isElementHasParentWithLang(el)) {      elementWithParentWithLang.add(el);    }  }  elementWithoutLang.removeAll(elementWithParentWithLang);  elementWithLang.addAll(elementWithParentWithLang.get());}  }
class C{  public static <K,V>SmallLRUCache<K,V> newInstance(int size){  return new SmallLRUCache<K,V>(size);}  }
class C{  public void testSystemProperty() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/systemproperty-war/test?systemPropertyName=cargo.system.property");  final String expected="CargoSystemProp";  PingUtils.assertPingTrue("System property cargo.system.property not found",expected,url,logger);}  }
class C{  @Override public synchronized int read(){  return pos < count ? buf[pos++] & 0xFF : -1;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEVICE_DB'";  db.execSQL(sql);}  }
class C{  public void removeTag(final Tag tag) throws CouldntSaveDataException {  try {    naviView.getConfiguration().untagView(tag.getNative().getObject());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public static void disableConnectionReuseIfNecessary(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {    System.setProperty("http.keepAlive","false");  }}  }
class C{  public T caseInfomodelSource(InfomodelSource object){  return null;}  }
class C{  public Class<V> valueType(){  return valueType;}  }
class C{  protected void parseDefineShape(int type,InStream in) throws IOException {  int id=in.readUI16();  Rect rect=new Rect(in);  SWFShape shape=null;switch (type) {case TAG_DEFINESHAPE:    shape=tagtypes.tagDefineShape(id,rect);  break;case TAG_DEFINESHAPE2:shape=tagtypes.tagDefineShape2(id,rect);break;case TAG_DEFINESHAPE3:shape=tagtypes.tagDefineShape3(id,rect);break;default :break;}if (shape == null) {return;}parseShape(in,shape,true,type == TAG_DEFINESHAPE3);}  }
class C{  public void sendLocoNetMessage(LocoNetMessage m){  transmittedMsgCount++;  destination.sendLocoNetMessage(m);}  }
class C{  private void checkSendEventStatus(){  if ((null != mRoom) && (null != mRoom.getLiveState())) {    boolean canSendMessage=canSendMessages();    mSendingMessagesLayout.setVisibility(canSendMessage ? View.VISIBLE : View.GONE);    mCanNotPostTextView.setVisibility(!canSendMessage ? View.VISIBLE : View.GONE);  }}  }
class C{  private static void outputCsv(CommandLine cmdLine,KeywordCollection bestKeywords) throws KeywordOptimizerException {  if (!cmdLine.hasOption("of")) {    throw new KeywordOptimizerException("No output file (option -of specified)");  }  try {    PrintStream printer=new PrintStream(cmdLine.getOptionValue("of"));    printer.println(CSV_JOINER.join(CSV_HEADERS));    for (    KeywordInfo eval : bestKeywords.getListSortedByScore()) {      TrafficEstimate estimate=eval.getTrafficEstimate();      Object[] rowData={eval.getKeyword().getText(),eval.getKeyword().getMatchType(),eval.getScore(),KeywordOptimizerUtil.formatCsv(estimate.getMin().getImpressionsPerDay()),KeywordOptimizerUtil.formatCsv(estimate.getMean().getImpressionsPerDay()),KeywordOptimizerUtil.formatCsv(estimate.getMax().getImpressionsPerDay()),KeywordOptimizerUtil.formatCsv(estimate.getMin().getClicksPerDay()),KeywordOptimizerUtil.formatCsv(estimate.getMean().getClicksPerDay()),KeywordOptimizerUtil.formatCsv(estimate.getMax().getClicksPerDay()),KeywordOptimizerUtil.formatCsv(estimate.getMin().getClickThroughRate()),KeywordOptimizerUtil.formatCsv(estimate.getMean().getClickThroughRate()),KeywordOptimizerUtil.formatCsv(estimate.getMax().getClickThroughRate()),KeywordOptimizerUtil.formatCsv(estimate.getMin().getAveragePosition()),KeywordOptimizerUtil.formatCsv(estimate.getMean().getAveragePosition()),KeywordOptimizerUtil.formatCsv(estimate.getMax().getAveragePosition()),KeywordOptimizerUtil.format(estimate.getMin().getAverageCpc()),KeywordOptimizerUtil.format(estimate.getMean().getAverageCpc()),KeywordOptimizerUtil.format(estimate.getMax().getAverageCpc()),KeywordOptimizerUtil.format(estimate.getMin().getTotalCost()),KeywordOptimizerUtil.format(estimate.getMean().getTotalCost()),KeywordOptimizerUtil.format(estimate.getMax().getTotalCost())};      printer.println(CSV_JOINER.join(rowData));    }    printer.close();  } catch (  IOException e) {    throw new KeywordOptimizerException("Error writing to output file",e);  }}  }
class C{  private static String translateSQL(String sql){  return translateSQL(sql,true);}  }
class C{  public void replace(String statement) throws CannotCompileException {  throw new RuntimeException("not implemented yet");}  }
class C{  public void endMessage(long start){  long ts=DistributionStats.getStatTime();  this._stats.incInt(_messagesProcessedId,1);  long elapsed=ts - start;  this._stats.incLong(_messageProcessingTimeId,elapsed);}  }
class C{  private void readResources(ResourceMap hmResourcesRules) throws ResourceInitializationException {  Pattern paReadRules=Pattern.compile("RULENAME=\"(.*?)\",EXTRACTION=\"(.*?)\",NORM_VALUE=\"(.*?)\"(.*)");  Pattern paVariable=Pattern.compile("%(re[a-zA-Z0-9]*)");  InputStream is=null;  InputStreamReader isr=null;  BufferedReader br=null;  try {    for (    String resource : hmResourcesRules.keySet()) {      is=hmResourcesRules.getInputStream(resource);      isr=new InputStreamReader(is,"UTF-8");      br=new BufferedReader(isr);      Logger.printDetail(component,"Adding rule resource: " + resource);      for (String line; (line=br.readLine()) != null; ) {        if (line.startsWith("//") || line.equals("")) {          continue;        }        Logger.printDetail("DEBUGGING: reading rules..." + line);        for (        MatchResult r : Toolbox.findMatches(paReadRules,line)) {          String rule_name=r.group(1);          String rule_extraction=r.group(2);          String rule_normalization=r.group(3);          RePatternManager rpm=RePatternManager.getInstance(language,false);          for (          MatchResult mr : Toolbox.findMatches(paVariable,rule_extraction)) {            Logger.printDetail("DEBUGGING: replacing patterns..." + mr.group());            if (!(rpm.containsKey(mr.group(1)))) {              Logger.printError("Error creating rule:" + rule_name);              Logger.printError("The following pattern used in this rule does not exist, does it? %" + mr.group(1));              System.exit(-1);            }            rule_extraction=rule_extraction.replaceAll("%" + mr.group(1),rpm.get(mr.group(1)));          }          rule_extraction=rule_extraction.replaceAll(" ","[\\\\s]+");          Pattern pattern=null;          try {            pattern=Pattern.compile(rule_extraction);          } catch (          java.util.regex.PatternSyntaxException e) {            Logger.printError("Compiling rules resulted in errors.");            Logger.printError("Problematic rule is " + rule_name);            Logger.printError("Cannot compile pattern: " + rule_extraction);            e.printStackTrace();            System.exit(-1);          }          if (resource.equals("intervalrules")) {            hmIntervalPattern.put(pattern,rule_name);            hmIntervalNormalization.put(rule_name,rule_normalization);          }        }      }    }  } catch (  IOException e) {    e.printStackTrace();    throw new ResourceInitializationException();  } finally {    try {      if (br != null) {        br.close();      }      if (isr != null) {        isr.close();      }      if (is != null) {        is.close();      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public Object exec(List arguments) throws TemplateModelException {  MemberAndArguments maa=overloadedMethods.getMemberAndArguments(arguments,wrapper);  try {    return maa.invokeMethod(wrapper,object);  } catch (  Exception e) {    if (e instanceof TemplateModelException)     throw (TemplateModelException)e;    throw _MethodUtil.newInvocationTemplateModelException(object,maa.getCallableMemberDescriptor(),e);  }}  }
class C{  public static <T>Streamable<T> reversedListOf(final List<T> elements){  Objects.requireNonNull(elements);  return fromStream(ReactiveSeq.reversedListOf(elements));}  }
class C{  private OverrideCompatibilityResult constraints_65_overrideCompatible(RedefinitionType redefinitionType,TMember m,TMember s,boolean consumptionConflict,MemberMatrix mm){  boolean metaTypeCompatible=MemberRedefinitionUtils.isMetaTypeCompatible(m,s);  if (!metaTypeCompatible) {    if (!consumptionConflict) {      messageOverrideMetaTypeIncompatible(redefinitionType,m,s,mm);    }    return OverrideCompatibilityResult.ERROR;  }  if (s.isFinal()) {    if (!consumptionConflict) {      messageOverrideFinal(redefinitionType,m,s);    }    return OverrideCompatibilityResult.ERROR;  }  if (s instanceof TField) {    TField sF=(TField)s;    if (sF.isConst()) {      if (!((m instanceof TField) && ((TField)m).isConst())) {        if (!consumptionConflict) {          messageOverrideConst(redefinitionType,m,sF);        }        return OverrideCompatibilityResult.ERROR;      }    } else {      if (m instanceof TField) {        TField fM=(TField)m;        if (fM.isConst()) {          if (!consumptionConflict) {            messageOverrideConst(redefinitionType,m,sF);          }          return OverrideCompatibilityResult.ERROR;        }      }    }  }  if (m.isAbstract() && !s.isAbstract()) {    if (!consumptionConflict) {      messageOverrideAbstract(redefinitionType,m,s);    }    return OverrideCompatibilityResult.ERROR;  }  if (!m.isSetter() && !s.isSetter()) {    Result<Boolean> result=isSubTypeResult(m,s);    if (result.failed()) {      if (!consumptionConflict) {        messageOverrideMemberTypeConflict(redefinitionType,m,s,result,mm);      }      return OverrideCompatibilityResult.ERROR;    }  }  boolean sIsConst=false;  if (s instanceof TField) {    sIsConst=((TField)s).isConst();  }  if ((m.isSetter() || m.isField()) && !s.isGetter() && !sIsConst) {    Result<Boolean> result=isSubTypeResult(s,m);    if (result.failed()) {      if (!consumptionConflict) {        messageOverrideMemberTypeConflict(redefinitionType,m,s,result,mm);      }      return OverrideCompatibilityResult.ERROR;    }  }  if (AccessModifiers.checkedLess(m,s)) {    if (!consumptionConflict) {      messageOverrideAccessibilityReduced(redefinitionType,m,s);    }    return OverrideCompatibilityResult.ERROR;  }  MemberAccessModifier fixedLeft=AccessModifiers.fixed(m);  MemberAccessModifier fixedRight=AccessModifiers.fixed(s);  if ((fixedLeft == MemberAccessModifier.PROTECTED && fixedRight == MemberAccessModifier.PUBLIC_INTERNAL) || (fixedLeft == MemberAccessModifier.PUBLIC_INTERNAL && fixedRight == MemberAccessModifier.PROTECTED)) {    messageOverrideAccessibilityReduced(redefinitionType,m,s);    return OverrideCompatibilityResult.ERROR;  }  return OverrideCompatibilityResult.COMPATIBLE;}  }
class C{  private double[][] makeJointVectorForPast(double[][] destination){  try {    return MatrixUtils.makeDelayEmbeddingVector(destination,k,k - 1,destination.length - k);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static void write(String s){  for (int i=0; i < s.length(); i++)   write(s.charAt(i));}  }
class C{  public void sendAddSquadron(FighterSquadron fs,Vector<Integer> fighterIds){  checkDuplicateNamesDuringAdd(fs);  send(new Packet(Packet.COMMAND_SQUADRON_ADD,new Object[]{fs,fighterIds}));}  }
class C{  static public JLabel createJLabelForTable(String str){  ArgumentChecking.notNull(str,"str");  JLabel label=createJLabelForTable();  label.setText(str);  return label;}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    if (pos < buf.length)     return buf[pos++]; else     return super.read();  }}  }
class C{  private AFTPClient actionRemove() throws IOException, PageException {  required("item",item);  AFTPClient client=getClient();  client.deleteFile(item);  writeCfftp(client);  return client;}  }
class C{  public void testGetDataLength(){  char expectedReturn=(char)usernameValue.length();  char actualReturn=usernameAttribute.getDataLength();  assertEquals("getDataLength - failed",expectedReturn,actualReturn);}  }
class C{  public B ioThreads(final int ioThreads){  mIoThreads=ioThreads;  return self();}  }
class C{  public static boolean isPalindrom(int num){  if (num < 0)   return false;  int div=1;  while (num / div >= 10)   div*=10;  while (num != 0) {    int l=num / div;    int r=num % 10;    if (l != r)     return false;    num=(num % div) / 10;    div/=100;  }  return true;}  }
class C{  private void reconnect(){  Connections.getInstance(context).getConnection(clientHandle).changeConnectionStatus(ConnectionStatus.CONNECTING);  Connection c=Connections.getInstance(context).getConnection(clientHandle);  try {    c.getClient().connect(c.getConnectionOptions(),null,new ActionListener(context,Action.CONNECT,clientHandle,null));  } catch (  MqttSecurityException e) {    Log.e(this.getClass().getCanonicalName(),"Failed to reconnect the client with the handle " + clientHandle,e);    c.addAction("Client failed to connect");  }catch (  MqttException e) {    Log.e(this.getClass().getCanonicalName(),"Failed to reconnect the client with the handle " + clientHandle,e);    c.addAction("Client failed to connect");  }}  }
class C{  public static void testDefaultConn() throws SQLException {  DriverManager.getConnection("jdbc:default:connection");}  }
class C{  public void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){  preferences.registerOnSharedPreferenceChangeListener(listener);}  }
class C{  private void decodeMidSideStereo(ChannelElement cpe,int msPresent){  if (msPresent == 1) {    for (int idx=0; idx < cpe.ch[0].ics.numWindowGroups * cpe.ch[0].ics.maxSfb; idx++) {      cpe.msMask[idx]=br.read1();    }  } else   if (msPresent == 2) {    Arrays.fill(cpe.msMask,0,cpe.ch[0].ics.numWindowGroups * cpe.ch[0].ics.maxSfb,1);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MSG:    return isSetMsg();}throw new IllegalStateException();}  }
class C{  public JTicketContainer(){  initComponents();  setLayout(null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.264 -0500",hash_original_method="CAC5AC041AD65DE746A86B06B460473E",hash_generated_method="73AE5058C776F471080D184F0ABD763B") private void nativeCreateFrame(WebViewCore w,AssetManager am,WebBackForwardList list){  addTaint(w.getTaint());  addTaint(am.getTaint());  addTaint(list.getTaint());}  }
class C{  public final boolean equals(Object node){  try {    return equals((Node)node);  } catch (  ClassCastException cce) {    return false;  }}  }
class C{  public boolean isIvrEnabled() throws NetworkDeviceControllerException {  boolean ivrEnabled=false;  boolean ivrDistributeEnabled=false;  ;  boolean ivrVsanTopologyActive=false;  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.ivr.show.cmd"),10000,prompts,buf);  String[] lines=getLines(buf);  for (  String line : lines) {    if (line.indexOf(MDSDialogProperties.getString("MDSDialog.ivr.enabled")) >= 0) {      ivrEnabled=true;    } else     if (line.indexOf(MDSDialogProperties.getString("MDSDialog.ivr.distribute.enabled")) >= 0) {      ivrDistributeEnabled=true;    } else     if (line.indexOf(MDSDialogProperties.getString("MDSDialog.ivr.auto.topology.enabled")) >= 0) {      ivrVsanTopologyActive=true;    }    if (ivrEnabled && ivrVsanTopologyActive && ivrDistributeEnabled) {      break;    }  }  return ivrEnabled && ivrVsanTopologyActive && ivrDistributeEnabled;}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  public MidiUnavailableException(String message){  super(message);}  }
class C{  protected FunctionBlockMappingRuleImpl(){  super();}  }
class C{  public boolean hasQuotaBytesUsedInTrash(){  return hasExtension(QuotaBytesUsedInTrash.class);}  }
class C{  @Override public void widgetSelected(SelectionEvent event){  Button button=(Button)event.widget;  if (button.getSelection()) {    viewer.addFilter(ownGefaehrdungFilter);    refresh();    packAllColumns();  } else {    viewer.removeFilter(ownGefaehrdungFilter);    refresh();    selectAssignedGefaehrdungen();    packAllColumns();  }}  }
class C{  private static void checkCalcForceExertedBy(){  System.out.println("Checking calcForceExertedBy...");  Planet p1=new Planet(1.0,1.0,3.0,4.0,5.0,"jupiter.gif");  Planet p2=new Planet(2.0,1.0,3.0,4.0,4e11,"jupiter.gif");  Planet p3=new Planet(4.0,5.0,3.0,4.0,5.0,"jupiter.gif");  checkEquals(p1.calcForceExertedBy(p2),133.4,"calcForceExertedBy()",0.01);  checkEquals(p1.calcForceExertedBy(p3),6.67e-11,"calcForceExertedBy()",0.01);}  }
class C{  public void testDisconnectedInteriorShellSelfTouchAtVertex(){  String wkt="POLYGON ((20 20, 20 100, 140 100, 140 180, 260 180, 260 100, 140 100, 140 20, 20 20))";  checkIsValidSTR(wkt,false);  checkIsValidDefault(wkt,false);}  }
class C{  public String toString(){  return value;}  }
class C{  @Override public void estimateCPTs(BayesNet bayesNet) throws Exception {  initCPTs(bayesNet);  for (int iAttribute=0; iAttribute < bayesNet.m_Instances.numAttributes(); iAttribute++) {    if (bayesNet.getParentSet(iAttribute).getNrOfParents() > 1) {      throw new Exception("Cannot handle networks with nodes with more than 1 parent (yet).");    }  }  Instances instances=new Instances(bayesNet.m_Instances);  while (instances.numInstances() > 0) {    instances.delete(0);  }  for (int iAttribute=instances.numAttributes() - 1; iAttribute >= 0; iAttribute--) {    if (iAttribute != instances.classIndex()) {      ArrayList<String> values=new ArrayList<String>();      values.add("0");      values.add("1");      Attribute a=new Attribute(instances.attribute(iAttribute).name(),values);      instances.replaceAttributeAt(a,iAttribute);    }  }  for (int iInstance=0; iInstance < bayesNet.m_Instances.numInstances(); iInstance++) {    Instance instanceOrig=bayesNet.m_Instances.instance(iInstance);    Instance instance=new DenseInstance(instances.numAttributes());    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {      if (iAttribute != instances.classIndex()) {        if (instanceOrig.value(iAttribute) > 0) {          instance.setValue(iAttribute,1);        }      } else {        instance.setValue(iAttribute,instanceOrig.value(iAttribute));      }    }  }  BayesNet EmptyNet=new BayesNet();  K2 oSearchAlgorithm=new K2();  oSearchAlgorithm.setInitAsNaiveBayes(false);  oSearchAlgorithm.setMaxNrOfParents(0);  EmptyNet.setSearchAlgorithm(oSearchAlgorithm);  EmptyNet.buildClassifier(instances);  BayesNet NBNet=new BayesNet();  oSearchAlgorithm.setInitAsNaiveBayes(true);  oSearchAlgorithm.setMaxNrOfParents(1);  NBNet.setSearchAlgorithm(oSearchAlgorithm);  NBNet.buildClassifier(instances);  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    if (iAttribute != instances.classIndex()) {      double w1=0.0, w2=0.0;      int nAttValues=instances.attribute(iAttribute).numValues();      if (m_bUseK2Prior == true) {        for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {          w1+=Statistics.lnGamma(1 + ((DiscreteEstimatorBayes)EmptyNet.m_Distributions[iAttribute][0]).getCount(iAttValue)) - Statistics.lnGamma(1);        }        w1+=Statistics.lnGamma(nAttValues) - Statistics.lnGamma(nAttValues + instances.numInstances());        for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getCardinalityOfParents(); iParent++) {          int nTotal=0;          for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {            double nCount=((DiscreteEstimatorBayes)NBNet.m_Distributions[iAttribute][iParent]).getCount(iAttValue);            w2+=Statistics.lnGamma(1 + nCount) - Statistics.lnGamma(1);            nTotal+=nCount;          }          w2+=Statistics.lnGamma(nAttValues) - Statistics.lnGamma(nAttValues + nTotal);        }      } else {        for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {          w1+=Statistics.lnGamma(1.0 / nAttValues + ((DiscreteEstimatorBayes)EmptyNet.m_Distributions[iAttribute][0]).getCount(iAttValue)) - Statistics.lnGamma(1.0 / nAttValues);        }        w1+=Statistics.lnGamma(1) - Statistics.lnGamma(1 + instances.numInstances());        int nParentValues=bayesNet.getParentSet(iAttribute).getCardinalityOfParents();        for (int iParent=0; iParent < nParentValues; iParent++) {          int nTotal=0;          for (int iAttValue=0; iAttValue < nAttValues; iAttValue++) {            double nCount=((DiscreteEstimatorBayes)NBNet.m_Distributions[iAttribute][iParent]).getCount(iAttValue);            w2+=Statistics.lnGamma(1.0 / (nAttValues * nParentValues) + nCount) - Statistics.lnGamma(1.0 / (nAttValues * nParentValues));            nTotal+=nCount;          }          w2+=Statistics.lnGamma(1) - Statistics.lnGamma(1 + nTotal);        }      }      if (w1 < w2) {        w2=w2 - w1;        w1=0;        w1=1 / (1 + Math.exp(w2));        w2=Math.exp(w2) / (1 + Math.exp(w2));      } else {        w1=w1 - w2;        w2=0;        w2=1 / (1 + Math.exp(w1));        w1=Math.exp(w1) / (1 + Math.exp(w1));      }      for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getCardinalityOfParents(); iParent++) {        bayesNet.m_Distributions[iAttribute][iParent]=new DiscreteEstimatorFullBayes(instances.attribute(iAttribute).numValues(),w1,w2,(DiscreteEstimatorBayes)EmptyNet.m_Distributions[iAttribute][0],(DiscreteEstimatorBayes)NBNet.m_Distributions[iAttribute][iParent],m_fAlpha);      }    }  }  int iAttribute=instances.classIndex();  bayesNet.m_Distributions[iAttribute][0]=EmptyNet.m_Distributions[iAttribute][0];}  }
class C{  public static void print(CtMethod method,PrintStream stream){  (new InstructionPrinter(stream)).print(method);}  }
class C{  public static <T>T eachLine(InputStream stream,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(new InputStreamReader(stream),firstLine,closure);}  }
class C{  public void addFailedNode(UUID nodeId){  assert nodeId != null;  if (failedNodes == null)   failedNodes=new HashSet<>();  failedNodes.add(nodeId);}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  public boolean receivesMapEvents(){  return false;}  }
class C{  void onCancel(){  onUp();}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  FontMetrics fm=getFontMetrics(new Font("Monospaced",Font.PLAIN,3));  int width=getPreferredSize().width;  String name=getName();  if (name.startsWith("X"))   name=name.substring(1,name.length());  int stringWidth=fm.stringWidth(name);  int stringX=2;  int stringY=4 * fm.getAscent() + DisplayNodeUtils.getPixelGap();  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedFillColor() : DisplayNodeUtils.getNodeFillColor());  g2.fill(getShape());  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedEdgeColor() : DisplayNodeUtils.getNodeEdgeColor());  g2.draw(getShape());  g2.setColor(DisplayNodeUtils.getNodeTextColor());  g2.setFont(DisplayNodeUtils.getFont());  g2.drawString(name,stringX,stringY);}  }
class C{  public long roundFloor(long instant){  throw unsupported();}  }
class C{  public String toString(){  if (notBefore == null || notAfter == null)   return "";  return ("Validity: [From: " + notBefore.toString() + ",\n               To: "+ notAfter.toString()+ "]");}  }
class C{  public boolean logModified(Logger log){  if (isModified()) {    log.info(_className + " is modified");    return true;  } else   return false;}  }
class C{  @Override public final boolean isInputShutdown(){  if (self == this) {    return super.isInputShutdown();  } else {    return self.isInputShutdown();  }}  }
class C{  public GAVariation(Variation crossover,Variation mutation){  super(crossover,mutation);  setName(crossover.getClass().getSimpleName());}  }
class C{  public static <T>String joinAnd(final String delimiter,final String lastDelimiter,final Collection<T> objs){  if (objs == null || objs.isEmpty()) {    return "";  }  final Iterator<T> iter=objs.iterator();  final StringBuilder buffer=new StringBuilder(Strings.toString(iter.next()));  int i=1;  while (iter.hasNext()) {    final T obj=iter.next();    if (notEmpty(obj)) {      buffer.append(++i == objs.size() ? lastDelimiter : delimiter).append(Strings.toString(obj));    }  }  return buffer.toString();}  }
class C{  public static byte[] decode(String s,int options){  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  if (bytes != null && bytes.length >= 4) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public boolean isIsolatedModules(){  return isolatedModules;}  }
class C{  private void filterForMine(List<Offer> offers,Player player){  Iterator<Offer> it=offers.iterator();  while (it.hasNext()) {    if (!it.next().getOfferer().equals(player.getName())) {      it.remove();    }  }}  }
class C{  public boolean isGasEqual(GasStack stack){  return stack != null && getGas() == stack.getGas();}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  out.defaultWriteObject();  out.writeObject(SerializationUtils.wrap(borderStroke));  for (  DataSource source : getData()) {    source.addDataListener(this);  }}  }
class C{  public int update(String query){  return execute("update",RdfRepository.UPDATE_COUNT_RESPONSE,query);}  }
class C{  public static int countCSSNames(){  return CSSName.maxAssigned;}  }
class C{  public void testNoConditionalsIsMIforRandomVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA={-0.05294175,-0.03944338,-0.02190217,0.00120807,-0.00924771,-0.00316402,-0.00778205,-0.00565778};  System.out.println("Kraskov comparison 1 - univariate random data 1 --");  System.out.println("Algorithm 1:");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,null);  System.out.println("Algorithm 2:");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromMILCA);  afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  data=afr.getDouble2DMatrix();  double[] expectedFromMILCA_2={-0.04614525,-0.00861460,-0.00164540,-0.01130354,-0.01339670,-0.00964035,-0.00237072,-0.00096891};  System.out.println("Kraskov comparison 2 - univariate random data 2 --");  System.out.println("Algorithm 1:");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,null);  System.out.println("Algorithm 2:");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromMILCA_2);}  }
class C{  public boolean isOverwriteProject(){  Object oo=get_Value(COLUMNNAME_OverwriteProject);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isAlt(){  return this.alt;}  }
class C{  protected boolean nameMatches(String searchName,IJavaElement element,boolean partialMatch){  if (partialMatch) {    return element.getElementName().toLowerCase().startsWith(searchName);  } else {    return element.getElementName().equals(searchName);  }}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer("MWFNode[");  sb.append(getName()).append("-").append(getActionInfo()).append("]");  return sb.toString();}  }
class C{  public static int hash32(final String text,int from,int length){  return hash32(text.substring(from,from + length));}  }
class C{  public void traverseTreeForDepth(GPNode node,ArrayList nodeToDepth,HashMap sizeToNodes){  GPNode[] children=node.children;  NodeInfo nodeInfo=new NodeInfo(node,node.numNodes(GPNode.NODESEARCH_NONTERMINALS));  nodeToDepth.add(nodeInfo);  LinkedList listForSize=(LinkedList)(sizeToNodes.get(Integer.valueOf(nodeInfo.numberOfSubTreesBeneath)));  if (listForSize == null) {    listForSize=new LinkedList();    sizeToNodes.put(new Integer(nodeInfo.numberOfSubTreesBeneath),listForSize);  }  listForSize.add(nodeInfo);  if (children.length > 0) {    for (int i=0; i < children.length; i++) {      traverseTreeForDepth(children[i],nodeToDepth,sizeToNodes);    }  }}  }
class C{  public byte[] decrypt(InputStream fileInput) throws NoSuchAlgorithmException, InvalidKeySpecException, IOException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {  if ((fileInput == null) || (fileInput.available() == 0)) {    return null;  }  Cipher cipher=getCipher(Cipher.DECRYPT_MODE);  return getDecryptFromCipherInputStream(fileInput,cipher);}  }
class C{  public boolean isPersistent(){  return persistent;}  }
class C{  @Override public Object instantiateItem(View collection,int position){  ConversationInfo convInfo=conversations.get(position);  View view;  if (convInfo.view != null) {    view=convInfo.view;  } else {    view=renderConversation(convInfo,collection);  }  views.put(position,view);  ((ViewPager)collection).addView(view);  return view;}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public void addMergeProcessor(String path,MergeProcessor merger){  if (path == null || merger == null) {    throw new NullPointerException();  }  this.result.addProcessor(path,merger);}  }
class C{  public static void removeDetachedFullCopyFromSourceFullCopiesList(Volume fullCopy,DbClient dbClient){  URI sourceURI=fullCopy.getAssociatedSourceVolume();  if ((!NullColumnValueGetter.isNullURI(sourceURI)) && (URIUtil.isType(sourceURI,Volume.class))) {    Volume sourceVolume=dbClient.queryObject(Volume.class,sourceURI);    StringSet fullCopies=sourceVolume.getFullCopies();    String fullCopyId=fullCopy.getId().toString();    if ((fullCopies != null) && (fullCopies.contains(fullCopyId))) {      fullCopies.remove(fullCopyId);      dbClient.persistObject(sourceVolume);    }  }}  }
class C{  public void init(KeyStore ks,char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {  factorySpi.engineInit(ks,password);}  }
class C{  public void handleSelection(int i){  setButtonEnabled(SearchButtons.DOWNLOAD_BUTTON_INDEX,true);  setButtonEnabled(SearchButtons.STOP_SEARCH_BUTTON_INDEX,!isStopped());  SearchResultDataLine[] allSelectedLines=getAllSelectedLines();  setButtonEnabled(SearchButtons.TORRENT_DETAILS_BUTTON_INDEX,allSelectedLines != null && allSelectedLines.length == 1);}  }
class C{  private static void s_uaColSumGtLe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumLtGeColSumGtLe(0.0,bv,bOp);  out.allocateDenseBlock(true);  Arrays.fill(out.getDenseBlock(),0,out.getNumColumns(),agg0);  if (agg0 != 0.0)   out.setNonZeros(out.getNumColumns());  if (in.isEmptyBlock(false))   return;  SparseBlock sblock=in.getSparseBlock();  for (int j=0; j < sblock.numRows(); j++)   if (!sblock.isEmpty(j)) {    int apos=sblock.pos(j);    int alen=sblock.size(j);    int[] aix=sblock.indexes(j);    double[] avals=sblock.values(j);    for (int i=apos; i < apos + alen; i++) {      int cnt=sumRowSumLtGeColSumGtLe(avals[i],bv,bOp);      out.quickSetValue(0,aix[i],cnt);    }  }}  }
class C{  public void dataRefresh(int row){  dataRefresh(row,true);}  }
class C{  public static ClearIndicesCacheRequest clearIndicesCacheRequest(String... indices){  return new ClearIndicesCacheRequest(indices);}  }
class C{  public int next(){  final int result=_currentNode;  _currentNode=END;  return returnNode(result);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.040 -0500",hash_original_method="DEBABCFB0D5C81DCE0E37961227F43C9",hash_generated_method="259E44B8B64C1FF49A2A2EC42CFB5CBE") @Override public int read() throws IOException {  return droidsafeRead();}  }
class C{  public static Complex fromAngle(float angle){  return new Complex((float)Math.cos(angle),(float)Math.sin(angle));}  }
class C{  public void tryVibrate(){  if (mVibrator != null && mIsGloballyEnabled) {    long now=SystemClock.uptimeMillis();    if (now - mLastVibrate >= VIBRATE_DELAY_MS) {      mVibrator.vibrate(VIBRATE_LENGTH_MS);      mLastVibrate=now;    }  }}  }
class C{  public static String reduce(String sentence){  if (sentence.length() == 0) {    return sentence;  }  int terminate=sentence.length();  while ((terminate > 0) && TextStream.TERMINATORS.indexOf(sentence.charAt(terminate - 1)) != -1) {    terminate--;  }  StringWriter writer=new StringWriter();  TextStream stream=new TextStream(sentence);  boolean first=true;  boolean ignore=false;  String previous=null;  while (stream.getPosition() < terminate) {    String word=stream.nextWord();    if (word == null) {      break;    }    word=word.toLowerCase();    if (word.equals("'") && "what".equals(previous)) {      if ("s".equals(stream.peekWord())) {        writer.write(" is");        stream.nextWord();        continue;      }    }    if (!first && !ignore) {      writer.write(" ");    } else {      first=false;    }    if (word.equals("whats")) {      writer.write("what is");    } else     if (!TextStream.IGNORABLE.contains(word)) {      writer.write(word);      ignore=false;    } else {      ignore=true;    }    previous=word;  }  return writer.toString();}  }
class C{  protected UndoEvent createUndoEventForCurrentState(String whatHappened){  if (whatHappened == null) {    whatHappened=i18n.get(this.getClass(),"polygonUndoString","Edit");  }  return new OMPolyUndoEvent(this,whatHappened);}  }
class C{  public void refresh(){  validate();  repaint();}  }
class C{  private void inflateLayout(Context context){  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  inflater.inflate(R.layout.compound_like,this,true);  likeContainer=findViewById(R.id.like_container);  dislikeContainer=findViewById(R.id.dislike_container);  likeImage=(ImageView)findViewById(R.id.like_image);  likeAmountText=(TextView)findViewById(R.id.like_amount_text);  dislikeImage=(ImageView)findViewById(R.id.dislike_image);  dislikeAmountText=(TextView)findViewById(R.id.dislike_amount_text);  likeFriendsText=(TextView)findViewById(R.id.like_friends_text);  dislikeFriendsText=(TextView)findViewById(R.id.dislike_friends_text);}  }
class C{  protected boolean[] canPredict(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance){  print("basic predict");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  Vector<String> accepts=new Vector<String>();  accepts.addElement("unary");  accepts.addElement("binary");  accepts.addElement("nominal");  accepts.addElement("numeric");  accepts.addElement("string");  accepts.addElement("date");  accepts.addElement("relational");  accepts.addElement("multi-instance");  accepts.addElement("not in classpath");  int numTrain=getNumInstances(), missingLevel=0;  boolean predictorMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,missingLevel,predictorMissing,numTrain,accepts);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCY__VERSION_CONSTRAINT:    setVersionConstraint((VersionConstraint)null);  return;case N4mfPackage.PROJECT_DEPENDENCY__DECLARED_SCOPE:setDeclaredScope(DECLARED_SCOPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void pushOutputConfiguration(){  if (ac.oc[1].status == OC_LOCKED) {    ac.oc[0].copy(ac.oc[1]);  }  ac.oc[1].status=OC_NONE;}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public C3_DTLZ1(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  @Override protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List ticks=new java.util.ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  double size=getTickUnit().getSize();  int count=calculateVisibleTickCount();  double lowestTickValue=calculateLowestVisibleTickValue();  double previousDrawnTickLabelPos=0.0;  double previousDrawnTickLabelLength=0.0;  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {    for (int i=0; i < count; i++) {      double currentTickValue=lowestTickValue + (i * size);      double yy=valueToJava2D(currentTickValue,dataArea,edge);      String tickLabel;      NumberFormat formatter=getNumberFormatOverride();      if (formatter != null) {        tickLabel=formatter.format(currentTickValue);      } else {        tickLabel=valueToString(currentTickValue);      }      Rectangle2D bounds=TextUtilities.getTextBounds(tickLabel,g2,g2.getFontMetrics());      double tickLabelLength=isVerticalTickLabels() ? bounds.getWidth() : bounds.getHeight();      boolean tickLabelsOverlapping=false;      if (i > 0) {        double avgTickLabelLength=(previousDrawnTickLabelLength + tickLabelLength) / 2.0;        if (Math.abs(yy - previousDrawnTickLabelPos) < avgTickLabelLength) {          tickLabelsOverlapping=true;        }      }      if (tickLabelsOverlapping) {        tickLabel="";      } else {        previousDrawnTickLabelPos=yy;        previousDrawnTickLabelLength=tickLabelLength;      }      TextAnchor anchor;      TextAnchor rotationAnchor;      double angle=0.0;      if (isVerticalTickLabels()) {        anchor=TextAnchor.BOTTOM_CENTER;        rotationAnchor=TextAnchor.BOTTOM_CENTER;        if (edge == RectangleEdge.LEFT) {          angle=-Math.PI / 2.0;        } else {          angle=Math.PI / 2.0;        }      } else {        if (edge == RectangleEdge.LEFT) {          anchor=TextAnchor.CENTER_RIGHT;          rotationAnchor=TextAnchor.CENTER_RIGHT;        } else {          anchor=TextAnchor.CENTER_LEFT;          rotationAnchor=TextAnchor.CENTER_LEFT;        }      }      Tick tick=new NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);      ticks.add(tick);    }  }  return ticks;}  }
class C{  protected String apply(String source){  String result=source;  String match=m_matchS;  boolean ruleMatches=false;  if (m_ignoreCase) {    result=result.toLowerCase();    match=match.toLowerCase();  }  if (result != null && result.length() > 0) {    if (m_regex) {      if (m_regexPattern.matcher(result).matches()) {        ruleMatches=true;      }    } else {      ruleMatches=(result.indexOf(match) >= 0);    }  }  return (ruleMatches) ? m_label : null;}  }
class C{  public int compareTo(Card c){  if (c == null)   return Integer.MAX_VALUE;  return rank - c.getRank();}  }
class C{  public TriggerProcessStatusException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static void clearReleaseNotesVersion(){  if (ensureInitialized()) {    FreshAirLog.v("Clearing release notes version history");    preferences.clearLastReleaseNotesPromptVersion();  }}  }
class C{  protected Property addCustomProperty(Property property){  if (property != null) {    customProperties.add(property);  }  return property;}  }
class C{  public void afterBuild(StructDescription desc){}  }
class C{  private static double score(final CharSequence first,final CharSequence second){  String shorter;  String longer;  if (first.length() > second.length()) {    longer=first.toString().toLowerCase();    shorter=second.toString().toLowerCase();  } else {    longer=second.toString().toLowerCase();    shorter=first.toString().toLowerCase();  }  final int halflength=(shorter.length() / 2) + 1;  final String m1=getSetOfMatchingCharacterWithin(shorter,longer,halflength);  final String m2=getSetOfMatchingCharacterWithin(longer,shorter,halflength);  if (m1.length() == 0 || m2.length() == 0) {    return 0.0;  }  if (m1.length() != m2.length()) {    return 0.0;  }  final int transpositions=transpositions(m1,m2);  final double dist=(m1.length() / ((double)shorter.length()) + m2.length() / ((double)longer.length()) + (m1.length() - transpositions) / ((double)m1.length())) / 3.0;  return dist;}  }
class C{  @Override public void selectAndNotify(AbstractTestProxy testProxy){  selectAndNotify(testProxy,null);}  }
class C{  public static int compare(int x,int y){  if (x > y) {    return 1;  }  if (x < y) {    return -1;  }  return 0;}  }
class C{  public long id(){  return id;}  }
class C{  public DomainModelRuntimeException(String message){  super(message);}  }
class C{  public Builder(String name){  action=new Action();  action.setName(name);}  }
class C{  public static void sort(Comparable[] a){  int n=a.length;  int exchanges=0;  for (int i=n - 1; i > 0; i--) {    if (less(a[i],a[i - 1])) {      exch(a,i,i - 1);      exchanges++;    }  }  if (exchanges == 0)   return;  for (int i=2; i < n; i++) {    Comparable v=a[i];    int j=i;    while (less(v,a[j - 1])) {      a[j]=a[j - 1];      j--;    }    a[j]=v;  }  assert isSorted(a);}  }
class C{  public List<Song> buildArtistRadio(Artist artist){  final List<Song> output=new ArrayList<>();  final List<Song> allSongs=new ArrayList<>();  final ProviderAggregator aggregator=ProviderAggregator.getDefault();  final List<String> albumReferences=artist.getAlbums();  for (  String albumRef : albumReferences) {    Album album=aggregator.retrieveAlbum(albumRef,artist.getProvider());    if (album != null && album.isLoaded()) {      Iterator<String> songsIt=album.songs();      while (songsIt.hasNext()) {        String songRef=songsIt.next();        Song song=aggregator.retrieveSong(songRef,artist.getProvider());        allSongs.add(song);      }    }  }  long seed=System.nanoTime();  Collections.shuffle(allSongs,new Random(seed));  final int numTracks=Math.min(100,allSongs.size());  for (int i=0; i < numTracks; ++i) {    output.add(allSongs.get(i));  }  Log.d(TAG,"Building artist radio for " + artist.getName() + ": "+ artist.getAlbums().size()+ " albums, "+ output.size()+ " songs chosen");  return output;}  }
class C{  public static Map<String,Object> returnError(String errorMessage,List<? extends Object> errorMessageList,Map<String,? extends Object> errorMessageMap,Map<String,? extends Object> nestedResult){  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,errorMessageList,errorMessageMap,nestedResult);}  }
class C{  public void addLevel(int infractionCount,long timeToSuspendInMillis){  this.levels.put(infractionCount,timeToSuspendInMillis);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:  return N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private Observable<Result> streamOfImages(ImageResponse imageResponse){  return Observable.from(imageResponse.getResponseData().getResults());}  }
class C{  private int decodeAddr(long addr){  addr>>=32;  return (int)addr;}  }
class C{  public void writeBootstrapXML(){  Network network=new BasicNetwork();  bootstrapNetwork(network);  File file=new File("bootstrap.xml");  NetworkXMLParser.instance().toXML(network,file);  network=new BasicNetwork();  languageNetwork(network);  englishNetwork(network);  file=new File("language.xml");  NetworkXMLParser.instance().toXML(network,file);}  }
class C{  @SuppressWarnings("unchecked") public static int binarySearch(Object[] array,int startIndex,int endIndex,Object object){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  if (array.length == 0) {    return -1;  }  int low=startIndex, mid=-1, high=endIndex - 1, result=0;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=((java.lang.Comparable<Object>)array[mid]).compareTo(object)) < 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (((java.lang.Comparable<Object>)object).compareTo(array[index]) < 0) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (result >= 0 ? 1 : 2);}  }
class C{  public String repository(){  return this.repository;}  }
class C{  private void writeInstance(Instance inst) throws Exception {  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO ");  insert.append(m_resolvedTableName);  insert.append(" VALUES ( ");  if (m_id) {    insert.append(m_count);    insert.append(", ");    m_count++;  }  for (int j=0; j < inst.numAttributes(); j++) {    if (inst.isMissing(j)) {      insert.append("NULL");    } else {      if ((inst.attribute(j)).isDate()) {        insert.append("'" + m_DateFormat.format((long)inst.value(j)) + "'");      } else       if ((inst.attribute(j)).isNumeric()) {        insert.append(inst.value(j));      } else {        String stringInsert="'" + inst.stringValue(j) + "'";        if (stringInsert.length() > 2) {          stringInsert=stringInsert.replaceAll("''","'");        }        insert.append(stringInsert);      }    }    if (j != inst.numAttributes() - 1) {      insert.append(", ");    }  }  insert.append(" )");  if (m_DataBaseConnection.update(insert.toString()) < 1) {    throw new IOException("Tuple cannot be inserted.");  } else {    m_DataBaseConnection.close();  }}  }
class C{  @Override public void onFinish(){  BroadcastHelper.broadcastDownloadServiceFinished(this);  Intent intent=new Intent(this,DeleteEpisodeService.class);  intent.setAction(DeleteEpisodeService.ACTION_ELIGIBLE_EPISODES);  startService(intent);  stopSelf();}  }
class C{  public RefactoringSessionReader(boolean createDefaultDescriptors,String project){  fCreateDefaultDescriptors=createDefaultDescriptors;  fProject=project;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean isLineAlignTrailing(){  return getLineAlignmentType().equals(LINEALIGNMENTTYPE_TrailingRight);}  }
class C{  @Override protected Bitmap alloc(int size){  return Bitmap.createBitmap(1,(int)Math.ceil(size / (double)BitmapUtil.RGB_565_BYTES_PER_PIXEL),Bitmap.Config.RGB_565);}  }
class C{  public static String makeEndpointsKey(String ep1,String ep2){  StringBuilder key=new StringBuilder();  if (StringUtils.isEmpty(ep2) && StringUtils.isEmpty(ep1)) {    return NULL_KEY;  }  TreeSet<String> set=new TreeSet<String>();  set.add(ep1);  set.add(ep2);  Iterator<String> iter=set.iterator();  key.append(iter.next().replaceAll(":","").toUpperCase());  while (iter.hasNext()) {    key.append("_").append(iter.next().replaceAll(":","").toUpperCase());  }  return key.toString();}  }
class C{  private void resetReportingIterator(){  rowError=false;  exception=null;  errorMessage=null;}  }
class C{  public SSLTestConfig(){  this(false,false);}  }
class C{  public static <T extends PointerBase>T min(T x,T y){  return (((Pointer)x).belowOrEqual((Pointer)y)) ? x : y;}  }
class C{  public ServiceManager(Iterable<? extends Service> services){  ImmutableList<Service> copy=ImmutableList.copyOf(services);  if (copy.isEmpty()) {    logger.log(Level.WARNING,"ServiceManager configured with no services.  Is your application configured properly?",new EmptyServiceManagerWarning());    copy=ImmutableList.<Service>of(new NoOpService());  }  this.state=new ServiceManagerState(copy);  this.services=copy;  WeakReference<ServiceManagerState> stateReference=new WeakReference<ServiceManagerState>(state);  for (  Service service : copy) {    service.addListener(new ServiceListener(service,stateReference),directExecutor());    checkArgument(service.state() == NEW,"Can only manage NEW services, %s",service);  }  this.state.markReady();}  }
class C{  public void process(HttpServletResponse response){  if (useOwnAllow) {    response.setStatus(HttpServletResponse.SC_OK);    response.setHeader("allow",AllowedMethodHandler.getAllowHeader());    response.setHeader("Connection","close");    response.setHeader("content-length","0");  } else {    setHeaders(response);    response.setStatus(getStatusCode());    String allow=method.getResponseHeader("allow").getValue();    response.setHeader("allow",AllowedMethodHandler.processAllowHeader(allow));    Header contentLength=method.getResponseHeader("Content-Length");    if (contentLength == null || contentLength.getValue().equals("0")) {      response.setHeader("Content-Length","0");    } else {      try {        sendStreamToClient(response);      } catch (      IOException e) {        log.error("Problem with writing response stream, solving by setting Content-Length=0",e);        response.setHeader("Content-Length","0");      }    }  }}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle rect,short[] spixels){  unpackShorts(input,spixels,unitsInThisTile);}  }
class C{  @Synchronized("INSTANCE_CREATE_LOCK") public static void stopServer() throws IOException {  if (server == null)   throw new RuntimeException("Never created an IdentServer");  server.doClose();  server=null;}  }
class C{  public VirtualFileEntry moveTo(String itemPath,String newParentPath,String newName,boolean overwrite) throws ServerException, NotFoundException, ConflictException, ForbiddenException {  final VirtualFile oldItem=vfs.getRoot().getChild(Path.of(itemPath));  if (oldItem == null) {    throw new NotFoundException("Item not found " + itemPath);  }  final VirtualFile newParent;  if (newParentPath == null) {    newParent=oldItem.getParent();  } else {    newParent=vfs.getRoot().getChild(Path.of(newParentPath));  }  if (newParent == null) {    throw new NotFoundException("New parent not found " + newParentPath);  }  final VirtualFile newItem=oldItem.moveTo(newParent,newName,overwrite,null);  final RegisteredProject owner=projectRegistry.getParentProject(newItem.getPath().toString());  if (owner == null) {    throw new NotFoundException("Parent project not found " + newItem.getPath().toString());  }  final VirtualFileEntry move;  if (newItem.isFile()) {    move=new FileEntry(newItem,projectRegistry);  } else {    move=new FolderEntry(newItem,projectRegistry);  }  if (move.isProject()) {    final RegisteredProject project=projectRegistry.getProject(itemPath);    NewProjectConfig projectConfig=new NewProjectConfig(newItem.getPath().toString(),project.getType(),project.getMixins(),newName,project.getDescription(),project.getAttributes(),project.getSource());    if (move instanceof FolderEntry) {      projectRegistry.removeProjects(project.getPath());      updateProject(projectConfig);    }  }  return move;}  }
class C{  private void updateOver(boolean o){  boolean old=isRollover();  this.over=o && isEnabled();  boolean newo=isRollover();  if (shouldActLikeButton() && old != newo) {    comboBox.repaint();  }}  }
class C{  public static String formatCpuPercent(float percent){  return cpuFormat.format(percent) + " %";}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  public static String[][] APOS_ESCAPE(){  return APOS_ESCAPE.clone();}  }
class C{  public static IStatus checkInSync(IResource resource){  return checkInSync(new IResource[]{resource});}  }
class C{  public boolean isFemale(){  return Compute.randomInt(100) < percentFemale;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (obj instanceof AppSize) {    AppSize other=(AppSize)obj;    return mWidth == other.mWidth && mHeight == other.mHeight;  }  return false;}  }
class C{  public int indexOf(String string){  checkWidget();  if (string == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  return Arrays.asList(getStringsFromTable()).indexOf(string);}  }
class C{  public ClosenessCentrality(Hypergraph<V,E> graph){  super(graph,true);}  }
class C{  public Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public void addNotificationGroup(NotificationGroup group){  try {    getService().addNotificationGroup(group);  } catch (  RemoteException e) {    Log.e(TAG,e.getLocalizedMessage(),e);  }}  }
class C{  private void callTableChanged(){  model.fireTableDataChanged();  table.clearSelection();}  }
