class C{  public void addTag(String text){  addTag(text,mChildViews.size());}  }
class C{  public void validateStorageFileEntity(StorageFileEntity storageFileEntity,String s3BucketName,Map<String,StorageFile> actualS3Keys,boolean validateFileSize){  if (!actualS3Keys.containsKey(storageFileEntity.getPath())) {    throw new ObjectNotFoundException(String.format("Previously registered storage file not found at s3://%s/%s location.",s3BucketName,storageFileEntity.getPath()));  } else   if (validateFileSize) {    StorageFile actualS3StorageFile=actualS3Keys.get(storageFileEntity.getPath());    Assert.isTrue(storageFileEntity.getFileSizeBytes() != null,String.format("Previously registered storage file \"%s\" has no file size specified.",storageFileEntity.getPath()));    Assert.isTrue(storageFileEntity.getFileSizeBytes().equals(actualS3StorageFile.getFileSizeBytes()),String.format("Previously registered storage file \"%s\" has file size of %d bytes that does not match file size of %d bytes reported by S3.",storageFileEntity.getPath(),storageFileEntity.getFileSizeBytes(),actualS3StorageFile.getFileSizeBytes()));  }}  }
class C{  public GdbInfoProgram infoProgram() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("info program");  return GdbInfoProgram.parse(gdbOutput);}  }
class C{  public Sensor newSensor(String systemName,String userName){  return (Sensor)newNamedBean(systemName,userName);}  }
class C{  public EMTest(String name){  super(name);}  }
class C{  public static void logInitiator(Initiator initiator,NetworkLite network){  String networkName=(network != null ? network.getLabel() : "<unknown network>");  _log.info(String.format("Attempting to assign port(s) to initiator: %s (%s) in network: %s",initiator.getInitiatorPort(),initiator.getHostName(),networkName));}  }
class C{  String authenticate(DistributedMember member,Properties credentials,Properties secProps) throws AuthenticationFailedException {  String authMethod=secProps.getProperty(SECURITY_PEER_AUTHENTICATOR);  if (!securityService.isPeerSecurityRequired() && StringUtils.isBlank(authMethod)) {    return null;  }  InternalLogWriter securityLogWriter=this.services.getSecurityLogWriter();  if (credentials == null) {    securityLogWriter.warning(AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS,member);    return AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS.toLocalizedString(member);  }  String failMsg=null;  try {    if (this.securityService.isIntegratedSecurity()) {      this.securityService.login(credentials);      this.securityService.authorizeClusterManage();    } else {      invokeAuthenticator(secProps,member,credentials);    }  } catch (  Exception ex) {    securityLogWriter.warning(AUTH_PEER_AUTHENTICATION_FAILED_WITH_EXCEPTION,new Object[]{member,ex.getLocalizedMessage()},ex);    failMsg=AUTH_PEER_AUTHENTICATION_FAILED.toLocalizedString(ex.getLocalizedMessage());  }  return failMsg;}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  public static CompletableFuture<Transport> bind(TransportConfig config){  return new Transport(config).bind0();}  }
class C{  private static byte[] lmResponse(byte[] hash,byte[] challenge) throws Exception {  byte[] keyBytes=new byte[21];  System.arraycopy(hash,0,keyBytes,0,16);  Key lowKey=createDESKey(keyBytes,0);  Key middleKey=createDESKey(keyBytes,7);  Key highKey=createDESKey(keyBytes,14);  Cipher des=Cipher.getInstance("DES/ECB/NoPadding");  des.init(Cipher.ENCRYPT_MODE,lowKey);  byte[] lowResponse=des.doFinal(challenge);  des.init(Cipher.ENCRYPT_MODE,middleKey);  byte[] middleResponse=des.doFinal(challenge);  des.init(Cipher.ENCRYPT_MODE,highKey);  byte[] highResponse=des.doFinal(challenge);  byte[] lmResponse=new byte[24];  System.arraycopy(lowResponse,0,lmResponse,0,8);  System.arraycopy(middleResponse,0,lmResponse,8,8);  System.arraycopy(highResponse,0,lmResponse,16,8);  return lmResponse;}  }
class C{  private boolean containsFinal(StateSet set){  states.reset(set);  while (states.hasMoreElements())   if (isFinal[states.nextElement()])   return true;  return false;}  }
class C{  protected boolean hasVisibility(int modifiers){  return (modifiers & (Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED | Opcodes.ACC_PUBLIC)) != 0;}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  BitVectorSpecies s=(BitVectorSpecies)species;  for (int x=0; x < genome.length; x++) {    if (state.random[thread].nextBoolean(s.mutationProbability(x))) {      boolean old=genome[x];      for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {switch (s.mutationType(x)) {case BitVectorSpecies.C_FLIP_MUTATION:          genome[x]=!genome[x];        break;case BitVectorSpecies.C_RESET_MUTATION:      genome[x]=state.random[thread].nextBoolean();    break;default :  state.output.fatal("In BitVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}}  }
class C{  public static Integer extractDuplexGroupID(LocoNetMessage m){switch (getDuplexGroupIdentityMessageType(m)) {case DUPLEX_GROUP_NAME_ETC_REPORT_MESSAGE:    return m.getElement(18) + (((m.getElement(14) & 0x8) == 0x8) ? 128 : 0);case DUPLEX_GROUP_ID_REPORT_MESSAGE:case DUPLEX_GROUP_ID_WRITE_MESSAGE:  return m.getElement(5) + (((m.getElement(4) & 0x1) == 0x1) ? 128 : 0);default :return -1;}}  }
class C{  public static void show(final Window parent,final INaviInstruction instruction) throws InternalTranslationException {  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();  final ReilGraph reilGraph=translator.translate(new StandardEnvironment(),instruction);  final String text=reilGraphToText(reilGraph);  final String title=String.format("REIL code of '%s'",instruction.toString());  final CReilInstructionDialog dialog=new CReilInstructionDialog(parent,title,text);  GuiHelper.centerChildToParent(parent,dialog,true);  dialog.setVisible(true);}  }
class C{  public void populateAll() throws GeneralException {  this.populateUsedEntities();  this.populateCalledServices();  this.populateTriggeredServiceEcas();}  }
class C{  public boolean isLeadingEdge(){  return leadingEdge;}  }
class C{  public String toString(){  return source.toString();}  }
class C{  @Override protected void createItemsLayout(){  if (mItemsLayout == null) {    mItemsLayout=new LinearLayout(getContext());    mItemsLayout.setOrientation(LinearLayout.HORIZONTAL);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildgulimo(zone);}  }
class C{  protected boolean matchElement(Node node){  if (node.getNodeType() != Node.NodeType.ELEMENT) {    return false;  }  String element=getElement();  String nodeName=node.getNodeName();  return element.equals(StringPool.STAR) || element.equals(nodeName);}  }
class C{  public LocalDateTime withDayOfYear(int dayOfYear){  return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(),dayOfYear));}  }
class C{  public TexturePanel(ProjectAssetManager manager){  this.manager=manager;  editor=new TexturePropertyEditor(manager);  initComponents();}  }
class C{  public static void extract(int[] n1,int off1,int n2[],int off2,int len2){  for (int i=0; i < len2; i++) {    n1[off1 + i]=n2[off2 + i];  }}  }
class C{  protected boolean scanDoctypeDecl() throws IOException, XNIException {  if (!fEntityScanner.skipSpaces()) {    reportFatalError("MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL",null);  }  fDoctypeName=fEntityScanner.scanName();  if (fDoctypeName == null) {    reportFatalError("MSG_ROOT_ELEMENT_TYPE_REQUIRED",null);  }  if (fEntityScanner.skipSpaces()) {    scanExternalID(fStrings,false);    fDoctypeSystemId=fStrings[0];    fDoctypePublicId=fStrings[1];    fEntityScanner.skipSpaces();  }  fHasExternalDTD=fDoctypeSystemId != null;  if (!fHasExternalDTD && fExternalSubsetResolver != null) {    fDTDDescription.setValues(null,null,fEntityManager.getCurrentResourceIdentifier().getExpandedSystemId(),null);    fDTDDescription.setRootName(fDoctypeName);    fExternalSubsetSource=fExternalSubsetResolver.getExternalSubset(fDTDDescription);    fHasExternalDTD=fExternalSubsetSource != null;  }  if (fDocumentHandler != null) {    if (fExternalSubsetSource == null) {      fDocumentHandler.doctypeDecl(fDoctypeName,fDoctypePublicId,fDoctypeSystemId,null);    } else {      fDocumentHandler.doctypeDecl(fDoctypeName,fExternalSubsetSource.getPublicId(),fExternalSubsetSource.getSystemId(),null);    }  }  boolean internalSubset=true;  if (!fEntityScanner.skipChar('[')) {    internalSubset=false;    fEntityScanner.skipSpaces();    if (!fEntityScanner.skipChar('>')) {      reportFatalError("DoctypedeclUnterminated",new Object[]{fDoctypeName});    }    fMarkupDepth--;  }  return internalSubset;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.696 -0500",hash_original_method="52FB523EE33548A5337713590AB1DF72",hash_generated_method="2AFD9511A9C9359DA57C31C6DF79FB99") public boolean isConnectionBased(){  return false;}  }
class C{  private static final boolean isIdeographic(char c,boolean includeNonStarters){  if (c >= '\u2E80' && c <= '\u2FFF') {    return true;  }  if (c == '\u3000') {    return true;  }  if (c >= '\u3040' && c <= '\u309F') {    if (!includeNonStarters) {switch (c) {case '\u3041':case '\u3043':case '\u3045':case '\u3047':case '\u3049':case '\u3063':case '\u3083':case '\u3085':case '\u3087':case '\u308E':case '\u3095':case '\u3096':case '\u309B':case '\u309C':case '\u309D':case '\u309E':        return false;    }  }  return true;}if (c >= '\u30A0' && c <= '\u30FF') {  if (!includeNonStarters) {switch (c) {case '\u30A0':case '\u30A1':case '\u30A3':case '\u30A5':case '\u30A7':case '\u30A9':case '\u30C3':case '\u30E3':case '\u30E5':case '\u30E7':case '\u30EE':case '\u30F5':case '\u30F6':case '\u30FB':case '\u30FC':case '\u30FD':case '\u30FE':      return false;  }}return true;}if (c >= '\u3400' && c <= '\u4DB5') {return true;}if (c >= '\u4E00' && c <= '\u9FBB') {return true;}if (c >= '\uF900' && c <= '\uFAD9') {return true;}if (c >= '\uA000' && c <= '\uA48F') {return true;}if (c >= '\uA490' && c <= '\uA4CF') {return true;}if (c >= '\uFE62' && c <= '\uFE66') {return true;}if (c >= '\uFF10' && c <= '\uFF19') {return true;}return false;}  }
class C{  private static void clearAllExceptRelationships(Resource resource){  resource.setAttributes(null);  resource.setLinks(null);  resource.setMeta(null);}  }
class C{  public Note(int lat,int lon){  id=Application.getTaskStorage().getNextId();  this.created=new Date();  this.lat=lat;  this.lon=lon;  open();  comments=new ArrayList<NoteComment>();}  }
class C{  public void sort(){  if (left > right) {    int temp=left;    left=right;    right=temp;  }  if (top > bottom) {    int temp=top;    top=bottom;    bottom=temp;  }}  }
class C{  public void testGetReaderPort(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  char expResult=0x00;  assertEquals(expResult,instance.getReaderPort(msgStandalone));}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case TypesPackage.TYPE_DEFS:    return createTypeDefs();case TypesPackage.TMODULE:  return createTModule();case TypesPackage.IDENTIFIABLE_ELEMENT:return createIdentifiableElement();case TypesPackage.TEXPORTABLE_ELEMENT:return createTExportableElement();case TypesPackage.TANNOTATION:return createTAnnotation();case TypesPackage.TANNOTATION_STRING_ARGUMENT:return createTAnnotationStringArgument();case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT:return createTAnnotationTypeRefArgument();case TypesPackage.TANNOTABLE_ELEMENT:return createTAnnotableElement();case TypesPackage.TYPE_VARIABLE:return createTypeVariable();case TypesPackage.INFERENCE_VARIABLE:return createInferenceVariable();case TypesPackage.TFUNCTION:return createTFunction();case TypesPackage.TYPE:return createType();case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER:return createDeclaredTypeWithAccessModifier();case TypesPackage.VIRTUAL_BASE_TYPE:return createVirtualBaseType();case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE:return createModuleNamespaceVirtualType();case TypesPackage.PRIMITIVE_TYPE:return createPrimitiveType();case TypesPackage.BUILT_IN_TYPE:return createBuiltInType();case TypesPackage.ANY_TYPE:return createAnyType();case TypesPackage.UNDEFINED_TYPE:return createUndefinedType();case TypesPackage.NULL_TYPE:return createNullType();case TypesPackage.VOID_TYPE:return createVoidType();case TypesPackage.TSTRUCTURAL_TYPE:return createTStructuralType();case TypesPackage.TOBJECT_PROTOTYPE:return createTObjectPrototype();case TypesPackage.TN4_CLASSIFIER:return createTN4Classifier();case TypesPackage.TCLASS:return createTClass();case TypesPackage.TINTERFACE:return createTInterface();case TypesPackage.TMETHOD:return createTMethod();case TypesPackage.TSTRUCT_METHOD:return createTStructMethod();case TypesPackage.TFORMAL_PARAMETER:return createTFormalParameter();case TypesPackage.TANONYMOUS_FORMAL_PARAMETER:return createTAnonymousFormalParameter();case TypesPackage.TFIELD:return createTField();case TypesPackage.TSTRUCT_FIELD:return createTStructField();case TypesPackage.TGETTER:return createTGetter();case TypesPackage.TSTRUCT_GETTER:return createTStructGetter();case TypesPackage.TSETTER:return createTSetter();case TypesPackage.TSTRUCT_SETTER:return createTStructSetter();case TypesPackage.TENUM:return createTEnum();case TypesPackage.TENUM_LITERAL:return createTEnumLiteral();case TypesPackage.TVARIABLE:return createTVariable();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String bitcoinValueToStringNotLocalised(BigInteger value,boolean addUnit,boolean blankZero){  if (blankZero && value.compareTo(BigInteger.ZERO) == 0) {    return "";  }  boolean negative=value.compareTo(BigInteger.ZERO) < 0;  if (negative) {    value=value.negate();  }  String toReturn="";  if (negative) {    toReturn="-";  }  if (value == null) {    throw new IllegalArgumentException("Value cannot be null");  }  BigDecimal valueInBTC=new BigDecimal(value).divide(new BigDecimal(Utils.COIN));  toReturn=toReturn + numberFormatNotLocalised.format(valueInBTC.doubleValue());  if (addUnit) {    toReturn=toReturn + " " + getString("sendBitcoinPanel.amountUnitLabel");  }  return toReturn;}  }
class C{  public DoubleBuffer(int size){  if (size < 1) {    throw new IllegalArgumentException("The buffer size must be greater than 1.");  }  buffer=new double[size];  reset();}  }
class C{  public Exchanger(){  participant=new Participant();}  }
class C{  public Interval splitParent(){  assert splitParent.isSplitParent() : "not a split parent: " + this;  return splitParent;}  }
class C{  @Dev() public TriggerExactlyInListCondition(final List<String> triggers){  SimilarExprMatcher matcher=new SimilarExprMatcher();  for (  String trigger : triggers) {    final Sentence expected=ConversationParser.parse(trigger,matcher);    this.triggers.add(expected);  }}  }
class C{  public static ResponseProperties createPartialContentResponse(String statusMessage){  return new ResponseProperties(HttpServletResponse.SC_PARTIAL_CONTENT,statusMessage);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void collectHeadingsInfo(){  Map<Id,Departure> map=new HashMap<Id,Departure>(this.transitRoute.getDepartures().size() * 2);  for (  Departure departure : this.transitRoute.getDepartures().values()) {    if (departure.getVehicleId() != null) {      map.put(departure.getVehicleId(),departure);    }  }  this.headings=map;}  }
class C{  private void testInfiniteStreams(){  Random rand=new Random();  Supplier<Integer> randomIntegerSupplier=null;  Stream<Integer> randomIntStream=Stream.generate(randomIntegerSupplier);  randomIntStream.forEach(null);  Stream<Double> randomStream=Stream.generate(null);  randomStream.forEach(null);  Stream<Integer> wholeNumbers=Stream.iterate(1,null);  wholeNumbers.forEach(null);}  }
class C{  public boolean isOutAllowed(int x,int y){  for (  Shape r : leavingBarriers) {    if (r.contains(x,y)) {      return false;    }  }  return true;}  }
class C{  private void updatePreview(){  String overlayConfig=mOverlayConfig.getText().toString();  if (validate(overlayConfig)) {    mDoRender=true;    final RhythmOverlay overlay=mOverlayInflater.inflateOverlay(overlayConfig);    mPreview.getRhythmDrawable().setOverlay(overlay);  }}  }
class C{  void action(long when){  if (!isSeparator() && isTargetItemEnabled()) {    XWindow.postEventStatic(new ActionEvent(target,ActionEvent.ACTION_PERFORMED,getTargetActionCommand(),when,0));  }}  }
class C{  void restartConnection(boolean proceed){  if (HttpLog.LOGV) {    HttpLog.v("HttpsConnection.restartConnection():" + " proceed: " + proceed);  }synchronized (mSuspendLock) {    if (mSuspended) {      mSuspended=false;      mAborted=!proceed;      mSuspendLock.notify();    }  }}  }
class C{  public static void log(String t){  TestReporting.getInstance().logMessage(t);}  }
class C{  public Frame copy(){  Frame frame=new Frame(locals.length,stack.length);  System.arraycopy(locals,0,frame.locals,0,locals.length);  System.arraycopy(stack,0,frame.stack,0,stack.length);  frame.top=top;  return frame;}  }
class C{  public CIMObjectPath callModifySettingsDefineState(StorageSystem storage,CIMArgument[] inArgs) throws WBEMException {  CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);  CIMArgument[] outArgs=new CIMArgument[5];  invokeMethod(storage,replicationSvcPath,MODIFY_SETTINGS_DEFINE_STATE,inArgs,outArgs);  return _cimPath.getCimObjectPathFromOutputArgs(outArgs,JOB);}  }
class C{  public int toChar(){  return value;}  }
class C{  public float remove(int key){  float prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public Metadata_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_key=jcas.getRequiredFeatureDE(casType,"key","uima.cas.String",featOkTst);  casFeatCode_key=(null == casFeat_key) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_key).getCode();  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();}  }
class C{  public static final Geo isPolyNearPoly(GeoArray s,GeoArray r,double near){  int rlen=r.getSize();  int slen=s.getSize();  Geo pl0=r.get(rlen - 1);  Geo pl1=new Geo();  Geo sl0=s.get(slen - 1);  Geo sl1=new Geo();  for (int j=0; j < rlen; j++) {    pl1=r.get(j,pl1);    for (int i=0; i < slen; i++) {      sl1=s.get(i,sl1);      Geo ret=segmentsIntersectOrNear(sl0,sl1,pl0,pl1,near);      if (ret != null) {        return ret;      }      sl0=sl1;    }    pl0=pl1;  }  return null;}  }
class C{  public boolean satisfiesCurveEquation(){switch (this.coordinateSystem) {case P2:case P3:    final Ed25519FieldElement inverse=this.Z.invert();  final Ed25519FieldElement x=this.X.multiply(inverse);final Ed25519FieldElement y=this.Y.multiply(inverse);final Ed25519FieldElement xSquare=x.square();final Ed25519FieldElement ySquare=y.square();final Ed25519FieldElement dXSquareYSquare=Ed25519Field.D.multiply(xSquare).multiply(ySquare);return Ed25519Field.ONE.add(dXSquareYSquare).add(xSquare).equals(ySquare);default :return this.toP2().satisfiesCurveEquation();}}  }
class C{  public static double FProbability(double F,int df1,int df2){  return incompleteBeta(df2 / 2.0,df1 / 2.0,df2 / (df2 + df1 * F));}  }
class C{  protected Instance nextInstance(){  if (this.isInited) {    return streamSource.nextInstance().getData();  } else {    this.isInited=true;    return firstInstance;  }}  }
class C{  public synchronized void animateZoom(final Point2D p,double scale,long duration){  Point2D pp=new Point2D.Double();  m_itransform.transform(p,pp);  animateZoomAbs(pp,scale,duration);}  }
class C{  private String formatAddress(final Address address,final Shop shop,final Customer customer,final String lang){  final String customerType=customer != null ? customer.getCustomerType() : null;  final String addressType=address.getAddressType();  final String format=shop.getAddressFormatByCountryAndLocaleAndCustomerTypeAndAddressType(address.getCountryCode(),lang,customerType,addressType);  return addressFormatter.formatAddress(address,format);}  }
class C{  public IntRange(boolean inclusive,int from,int to){  this.from=from;  this.to=to;  this.inclusive=inclusive;  this.reverse=false;  checkSize();}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage || patchState.taskState.subStage != startState.taskState.subStage) {    ServiceUtils.logInfo(this,"Moving from %s:%s to stage %s:%s",startState.taskState.stage,startState.taskState.subStage,patchState.taskState.stage,patchState.taskState.subStage);switch (patchState.taskState.stage) {case STARTED:      startState.taskSubStates.set(patchState.taskState.subStage.ordinal(),TaskState.TaskStage.STARTED);case FINISHED:    startState.taskSubStates.set(startState.taskState.subStage.ordinal(),TaskState.TaskStage.FINISHED);  break;case FAILED:startState.taskSubStates.set(startState.taskState.subStage.ordinal(),TaskState.TaskStage.FAILED);break;case CANCELLED:startState.taskSubStates.set(startState.taskState.subStage.ordinal(),TaskState.TaskStage.CANCELLED);break;}}PatchUtils.patchState(startState,patchState);return startState;}  }
class C{  public Object[] importCells(Object[] cells,double dx,double dy,Object target,Point location){  mxIGraphModel model=getGraph().getModel();  for (  Object cell : cells) {    Object value=model.getValue(cell);    if (value instanceof SCXMLNode) {      model.setStyle(cell,((SCXMLNode)value).getStyle());    } else     if (value instanceof SCXMLEdge) {      model.setStyle(cell,((SCXMLEdge)value).getStyle((mxCell)cell));    }  }  return super.importCells(cells,dx,dy,target,location);}  }
class C{  private void waitForInProgressClear(){  RegionVersionVector rvv=getVersionVector();  if (rvv != null) {synchronized (clearLock) {      if (logger.isDebugEnabled()) {        logger.debug("Done waiting for clear");      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void calcScore(){  for (int iNode=0; iNode < m_nNodes; iNode++) {    ParentSet parentSet=m_BayesNet.getParentSet(iNode);    while (parentSet.getNrOfParents() > 0) {      parentSet.deleteLastParent(m_BayesNet.m_Instances);    }  }  for (int iNode=0; iNode < m_nNodes; iNode++) {    ParentSet parentSet=m_BayesNet.getParentSet(iNode);    for (int iNode2=0; iNode2 < m_nNodes; iNode2++) {      if (m_bits[iNode2 + iNode * m_nNodes]) {        parentSet.addParent(iNode2,m_BayesNet.m_Instances);      }    }  }  m_fScore=0.0;  for (int iNode=0; iNode < m_nNodes; iNode++) {    m_fScore+=calcNodeScore(iNode);  }}  }
class C{  public ClassFile(){}  }
class C{  public String createLocalWsdl(){  String fullFilePath;  String property="java.io.tmpdir";  String tempDir=System.getProperty(property);  System.out.println("OS current temporary directory is " + tempDir);  File resultDir=new File(tempDir + "/wsattackerdos");  if (!resultDir.exists()) {    resultDir.mkdir();  }  fullFilePath=resultDir + "/genericRequest.wsdl";  URL inputUrl;  inputUrl=getClass().getResource("/TestWsdls/genericRequest.wsdl");  File dest=new File(fullFilePath);  try {    FileUtils.copyURLToFile(inputUrl,dest);  } catch (  Exception e) {    e.printStackTrace();  }  return fullFilePath;}  }
class C{  public T caseLogicalNotExpression(LogicalNotExpression object){  return null;}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(PrivateKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  public static Scope container(Tree.Declaration decl){  return container(decl.getDeclarationModel());}  }
class C{  public static List<URI> filterInitiatorsForVplex(DbClient dbClient,List<URI> initiators){  List<URI> initsToRemove=new ArrayList<>();  for (  URI init : initiators) {    Initiator initiator=dbClient.queryObject(Initiator.class,init);    if ((null != initiator) && !HostInterface.Protocol.FC.toString().equals(initiator.getProtocol())) {      initsToRemove.add(init);    }  }  initiators.removeAll(initsToRemove);  return initiators;}  }
class C{  protected void writeHeader(PrintWriter out){  StringBuilder sb=threadBuffer.get();  if (sb == null) {    sb=new StringBuilder();    threadBuffer.set(sb);  }  sb.setLength(0);  sb.append(FIELDS_HEADER_INDICATOR);  for (  String f : fieldsToWrite) {    sb.append(SEP).append(f);  }  out.println(sb.toString());}  }
class C{  private void markCacheComplete(){  NodeVector nv=getVector();  if (nv != null) {    m_cache.setCacheComplete(true);  }}  }
class C{  public boolean evaluateHistories(){  if (!hasOnlyDeactivatedHistory()) {    lastValidSubscriptionId=getLastValidSubscriptionId();    lastPurchaseOrderNumber=getLastPurchaseOrderNumber();    lastValidGroupHistory=getLastValidGroupHistory();    List<SubscriptionHistory> subscriptionHistories=filterSubscriptionHistories();    splitHistories(subscriptionHistories);    return (subscriptions.size() > 0);  } else {    return false;  }}  }
class C{  private static List<Throwable> expandFromMultiple(Throwable t,List<Throwable> list){  if (t instanceof org.junit.runners.model.MultipleFailureException) {    for (    Throwable sub : ((org.junit.runners.model.MultipleFailureException)t).getFailures()) {      expandFromMultiple(sub,list);    }  } else {    list.add(t);  }  return list;}  }
class C{  @Deprecated public KernelLogisticRegressionOptimization(ExampleSet exampleSet,Kernel kernel,double c,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,RandomGenerator random,LoggingHandler logging){  this(exampleSet,kernel,c,initType,maxIterations,generationsWithoutImprovement,popSize,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showConvergencePlot,random,logging,null);}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public Serializer serializer(){  return serializer;}  }
class C{  public Relationship checkTemplate(Vertex input,Network network){  if (!isEnabled()) {    return null;  }  Language language=getBot().mind().getThought(Language.class);  Vertex speaker=input.getRelationship(Primitive.SPEAKER);  boolean learn=language.shouldLearn(input,speaker);  boolean correction=input.hasRelationship(Primitive.ASSOCIATED,Primitive.CORRECTION);  if (correction) {    if (!language.shouldCorrect(input,speaker)) {      return null;    }  } else   if (!learn) {    return null;  }  Vertex sentence=input.mostConscious(Primitive.INPUT);  if (sentence == null || (!sentence.instanceOf(Primitive.SENTENCE))) {    return null;  }  log("Checking sentence",Bot.FINE,sentence);  Vertex questionInput=input.mostConscious(Primitive.QUESTION);  if (questionInput == null) {    log("No question",Bot.FINE,sentence);    return null;  }  Vertex mimic=questionInput.getRelationship(Primitive.MIMIC);  if (mimic != null) {    questionInput=mimic;    questionInput=questionInput.copy();    questionInput.internalRemoveRelationships(Primitive.SPEAKER);    questionInput.internalRemoveRelationships(Primitive.TARGET);    questionInput.addRelationship(Primitive.SPEAKER,Primitive.SELF);    questionInput.addRelationship(Primitive.TARGET,speaker);  }  if (correction) {    input=input.copy();    input.internalRemoveRelationships(Primitive.SPEAKER);    input.internalRemoveRelationships(Primitive.TARGET);    input.addRelationship(Primitive.SPEAKER,Primitive.SELF);    input.addRelationship(Primitive.TARGET,speaker);  }  Vertex question=questionInput.mostConscious(Primitive.INPUT);  log("Checking question response",Bot.FINE,question,sentence);  List<Vertex> words=question.orderedRelations(Primitive.WORD);  if (words == null) {    log("Question missing words",Bot.FINE,question);    return null;  }  Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();  Vertex inputVariable=network.createVertex(Primitive.INPUT_VARIABLE);  Bootstrap.checkInputVariable(inputVariable,network);  variables.put(questionInput,inputVariable);  Vertex newQuotient=createTemplate(questionInput,input,variables,network);  Relationship relationship=null;  if (newQuotient != null) {    relationship=question.getRelationship(Primitive.RESPONSE,newQuotient);    if (relationship != null) {      log("Existing response template",Level.FINER,question,relationship.getTarget());      question.addRelationship(Primitive.RESPONSE,relationship.getTarget());    } else {      log("Adding response template",Bot.FINE,question,newQuotient);      relationship=question.addRelationship(Primitive.RESPONSE,newQuotient);      question.associateAll(Primitive.WORD,question,Primitive.QUESTION);    }    network.checkReduction(question);    question.associateAll(Primitive.SYNONYM,newQuotient,Primitive.RESPONSE);    relationship.getTarget().addRelationship(Primitive.QUESTION,question);  }  return relationship;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.517 -0500",hash_original_method="0B5C776E3038172CE320CE66ECCB4725",hash_generated_method="F1E8DD31974A88EA2B2A7C28D7F65EC3") public HopImpl(String hostName,int portNumber,String trans){  host=hostName;  if (host.indexOf(":") >= 0)   if (host.indexOf("[") < 0)   host="[" + host + "]";  port=portNumber;  transport=trans;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String f=getString(stack);  if (f != null)   Seeker.getInstance().addArchiveDirectory(f,Seeker.VIDEO_DIR_MASK);  return null;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static boolean haveRightsForAction(Uri uri,int action){  DrmManagerClient drmManagerClient=QKSMSApp.getApplication().getDrmManagerClient();  try {    if (drmManagerClient.canHandle(uri.toString(),null)) {      int check=drmManagerClient.checkRightsStatus(uri.toString(),action);      return (check == DrmStore.RightsStatus.RIGHTS_VALID);    }  } catch (  Exception e) {  } finally {  }  return true;}  }
class C{  @Override public Data execute(Data in1,double in2,double w2) throws DMLRuntimeException {  CM_COV_Object cm1=(CM_COV_Object)in1;  if (cm1.isCMAllZeros()) {    cm1.w=w2;    cm1.mean.set(in2,0);    cm1.m2.set(0,0);    cm1.m3.set(0,0);    cm1.m4.set(0,0);    return cm1;  }switch (_type) {case COUNT:{      cm1.w=Math.round(cm1.w + w2);      break;    }case MEAN:{    double w=cm1.w + w2;    double d=in2 - cm1.mean._sum;    cm1.mean=(KahanObject)_plus.execute(cm1.mean,w2 * d / w);    cm1.w=w;    break;  }case CM2:{  double w=cm1.w + w2;  double d=in2 - cm1.mean._sum;  cm1.mean=(KahanObject)_plus.execute(cm1.mean,w2 * d / w);  double t1=cm1.w * w2 / w * d;  double lt1=t1 * d;  _buff2.set(cm1.m2);  _buff2=(KahanObject)_plus.execute(_buff2,lt1);  cm1.m2.set(_buff2);  cm1.w=w;  break;}case CM3:{double w=cm1.w + w2;double d=in2 - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,w2 * d / w);double t1=cm1.w * w2 / w * d;double t2=-1 / cm1.w;double lt1=t1 * d;double lt2=Math.pow(t1,3) * (1 / Math.pow(w2,2) - Math.pow(t2,2));double f2=w2 / w;_buff2.set(cm1.m2);_buff2=(KahanObject)_plus.execute(_buff2,lt1);_buff3.set(cm1.m3);_buff3=(KahanObject)_plus.execute(_buff3,lt2 - 3 * cm1.m2._sum * f2* d);cm1.m2.set(_buff2);cm1.m3.set(_buff3);cm1.w=w;break;}case CM4:{double w=cm1.w + w2;double d=in2 - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,w2 * d / w);double t1=cm1.w * w2 / w * d;double t2=-1 / cm1.w;double lt1=t1 * d;double lt2=Math.pow(t1,3) * (1 / Math.pow(w2,2) - Math.pow(t2,2));double lt3=Math.pow(t1,4) * (1 / Math.pow(w2,3) - Math.pow(t2,3));double f2=w2 / w;_buff2.set(cm1.m2);_buff2=(KahanObject)_plus.execute(_buff2,lt1);_buff3.set(cm1.m3);_buff3=(KahanObject)_plus.execute(_buff3,lt2 - 3 * cm1.m2._sum * f2* d);cm1.m4=(KahanObject)_plus.execute(cm1.m4,6 * cm1.m2._sum * Math.pow(-f2 * d,2) + lt3 - 4 * cm1.m3._sum * f2* d);cm1.m2.set(_buff2);cm1.m3.set(_buff3);cm1.w=w;break;}case VARIANCE:{double w=cm1.w + w2;double d=in2 - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,w2 * d / w);double t1=cm1.w * w2 / w * d;double lt1=t1 * d;cm1.m2=(KahanObject)_plus.execute(cm1.m2,lt1);cm1.w=w;break;}default :throw new DMLRuntimeException("Unsupported operation type: " + _type);}return cm1;}  }
class C{  public static double floor(double a){  return 0.0d;}  }
class C{  private void run(){  int regCount=ssaMeth.getRegCount();  for (int reg=0; reg < regCount; reg++) {    SsaInsn definsn=ssaMeth.getDefinitionForRegister(reg);    if (definsn != null && (definsn.getResult().getBasicType() == Type.BT_VOID)) {      worklist.set(reg);    }  }  int reg;  while (0 <= (reg=worklist.nextSetBit(0))) {    worklist.clear(reg);    PhiInsn definsn=(PhiInsn)ssaMeth.getDefinitionForRegister(reg);    if (resolveResultType(definsn)) {      List<SsaInsn> useList=ssaMeth.getUseListForRegister(reg);      int sz=useList.size();      for (int i=0; i < sz; i++) {        SsaInsn useInsn=useList.get(i);        RegisterSpec resultReg=useInsn.getResult();        if (resultReg != null && useInsn instanceof PhiInsn) {          worklist.set(resultReg.getReg());        }      }    }  }}  }
class C{  @Nonnull public BugInstance addSourceLine(BytecodeScanningDetector visitor){  SourceLineAnnotation sourceLineAnnotation=SourceLineAnnotation.fromVisitedInstruction(visitor);  if (sourceLineAnnotation != null) {    add(sourceLineAnnotation);  }  return this;}  }
class C{  public int register(Advice advice){  int adviceId=adviceIdSeed.getAndIncrement();  ActiveInstances current, next;  do {    current=active.get();    next=current.add(advice,adviceId);  } while (!active.compareAndSet(current,next));  return adviceId;}  }
class C{  private byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  @Override public void plus(int value){  this.value+=value;}  }
class C{  private Map<String,Set<URI>> findSMISExportMasks(StorageSystem storage,List<String> initiatorNames,boolean mustHaveAllPorts){  long startTime=System.currentTimeMillis();  Map<String,Set<URI>> matchingMasks=new HashMap<String,Set<URI>>();  CloseableIterator<CIMInstance> lunMaskingIter=null;  try {    StringBuilder builder=new StringBuilder();    lunMaskingIter=_helper.getSCSIProtocolControllers(storage);    while (lunMaskingIter.hasNext()) {      CIMInstance instance=lunMaskingIter.next();      String name=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_NAME);      String deviceId=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_DEVICE_ID);      CIMObjectPath controllerPath=instance.getObjectPath();      Map<String,CIMObjectPath> initiatorPortPaths=_helper.getInitiatorsFromScsiProtocolController(storage,controllerPath);      Set<String> initiatorPorts=initiatorPortPaths.keySet();      List<String> matchingInitiators=new ArrayList<String>();      for (      String port : initiatorNames) {        if (initiatorPorts.contains(port)) {          matchingInitiators.add(port);        }      }      builder.append(String.format("XM:%s I:{%s}%n",name,Joiner.on(',').join(initiatorPorts)));      if (!matchingInitiators.isEmpty()) {        boolean foundMaskInDb=false;        ExportMask exportMask=null;        URIQueryResultList uriQueryList=new URIQueryResultList();        _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMaskByNameConstraint(name),uriQueryList);        while (uriQueryList.iterator().hasNext()) {          URI uri=uriQueryList.iterator().next();          exportMask=_dbClient.queryObject(ExportMask.class,uri);          if (exportMask != null && !exportMask.getInactive() && exportMask.getStorageDevice().equals(storage.getId())) {            foundMaskInDb=true;            break;          }        }        if (!foundMaskInDb) {          exportMask=new ExportMask();          exportMask.setLabel(name);          exportMask.setMaskName(name);          exportMask.setNativeId(deviceId);          exportMask.setStorageDevice(storage.getId());          exportMask.setId(URIUtil.createId(ExportMask.class));          exportMask.setCreatedBySystem(false);          List<String> storagePorts=_helper.getStoragePortsFromScsiProtocolController(storage,controllerPath);          List<String> storagePortURIs=storagePortNamesToURIs(storagePorts);          if (storagePortURIs.isEmpty()) {            _log.info("No storage port in the mask " + name);          } else {            exportMask.setStoragePorts(storagePortURIs);            builder.append(String.format("   ----> SP { %s }\n" + "         URI{ %s }\n",Joiner.on(',').join(storagePorts),Joiner.on(',').join(storagePortURIs)));          }        }        Map<String,Integer> volumeWWNs=_helper.getVolumesFromScsiProtocolController(storage,controllerPath);        builder.append(String.format("XM:%s V:{%s}%n",name,Joiner.on(',').join(volumeWWNs.keySet())));        exportMask.addToExistingVolumesIfAbsent(volumeWWNs);        exportMask.addToExistingInitiatorsIfAbsent(matchingInitiators);        builder.append(String.format("XM %s is matching. " + "EI: { %s }, EV: { %s }%n",name,Joiner.on(',').join(exportMask.getExistingInitiators()),Joiner.on(',').join(exportMask.getExistingVolumes().keySet())));        if (foundMaskInDb) {          ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,exportMask);          _dbClient.updateObject(exportMask);        } else {          _dbClient.createObject(exportMask);        }        Initiator initiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(matchingInitiators.get(0)),_dbClient);        if (null != initiator && null != initiator.getHost()) {          Host host=_dbClient.queryObject(Host.class,initiator.getHost());          String label=host.getLabel();          if (label.equals(name)) {            _helper.unsetTag(host,storage.getSerialNumber());          } else {            _helper.setTag(host,storage.getSerialNumber(),name);          }        }        for (        String it : matchingInitiators) {          Set<URI> maskURIs=matchingMasks.get(it);          if (maskURIs == null) {            maskURIs=new HashSet<URI>();            matchingMasks.put(it,maskURIs);          }          maskURIs.add(exportMask.getId());        }      }    }    _log.info(builder.toString());  } catch (  Exception e) {    String msg="Error when attempting to query LUN masking information: " + e.getMessage();    _log.error(MessageFormat.format("Encountered an SMIS error when attempting to query existing exports: {0}",msg),e);    throw SmisException.exceptions.queryExistingMasksFailure(msg,e);  } finally {    if (lunMaskingIter != null) {      lunMaskingIter.close();    }    long totalTime=System.currentTimeMillis() - startTime;    _log.info(String.format("findExportMasks took %f seconds",(double)totalTime / (double)1000));  }  return matchingMasks;}  }
class C{  public void fileNotFound(File f){  if (!recentFiles.contains(f)) {    throw new IllegalStateException("Well no wonder it wasn't found, its not in the list.");  } else {    recentFiles.remove(f);  }}  }
class C{  public synchronized BookKeeperClientBuilder bkc(BookKeeperClient bkc){  this.cachedClient=bkc;  return this;}  }
class C{  public void createTable() throws SQLException {  if (mCreated) {    throw new IllegalStateException("createTable was already called on this instance.");  }  mDatabase.execSQL(buildQueryString());  mCreated=true;}  }
class C{  public static BufferedImage createTestImage(){  return new BufferedImage(40,30,BufferedImage.TYPE_INT_ARGB);}  }
class C{  public boolean remove(String configID){  boolean res=false;  if (configID != null) {    res=this.configs.remove(configID) != null;  } else {    if (null != this.defaultProperties) {      res=true;      this.defaultProperties=null;    }  }  return res;}  }
class C{  private void calcPercentiles(){  m_percentiles=new double[NUM_BUCKETS];  if (m_rawScores.isEmpty()) {    return;  }  Collections.sort(m_rawScores);  final int numIntervals=m_rawScores.size();  for (int i=0; i < NUM_BUCKETS; i++) {    final int index=((numIntervals * i) / NUM_BUCKETS);    m_percentiles[i]=m_rawScores.get(index);  }}  }
class C{  private FCZoneReference addZoneReference(URI exportGroupURI,NetworkFCZoneInfo zoneInfo,String[] newOrExisting){  String refKey=zoneInfo.makeEndpointsKey();  FCZoneReference ref=addZoneReference(exportGroupURI,zoneInfo.getVolumeId(),refKey,zoneInfo.getFabricId(),zoneInfo.getNetworkDeviceId(),zoneInfo.getZoneName(),zoneInfo.isExistingZone(),newOrExisting);  return ref;}  }
class C{  public synchronized NativeTcp connect(EndPointInfo sutAddress) throws IOException {  if (this.connection.isBound()) {    throw new IOException("Server is already connected");  }  if (sutAddress == null) {    throw new IOException("Null local SUT address");  }  connection.bind(sutAddress);  return connection;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.763 -0500",hash_original_method="10AFFFE45F62C15CA0052EB0BB14A8D3",hash_generated_method="3D313DA5441FEBF36B8C87503DF1A73A") public int compare(String o1,String o2){  return o1.compareToIgnoreCase(o2);}  }
class C{  public Department addDepartment(long parentId,String name,String description,ServiceContext serviceContext) throws SystemException, PortalException {  long departmentId=CounterLocalServiceUtil.increment(Department.class.getName());  Department department=departmentPersistence.create(departmentId);  Date now=new Date();  User user=UserLocalServiceUtil.getUser(serviceContext.getUserId());  department.setGroupId(serviceContext.getScopeGroupId());  department.setCompanyId(serviceContext.getCompanyId());  department.setUserId(serviceContext.getUserId());  department.setUserName(user != null ? user.getScreenName() : StringPool.BLANK);  department.setCreateDate(now);  department.setModifiedDate(now);  department.setParentId(parentId);  department.setName(name);  department.setDescription(description);  return departmentPersistence.update(department);}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  @ObjectiveCName("unfavouriteChatCommandWithPeer:") public Command<Void> unfavoriteChat(Peer peer){  return null;}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public boolean isGlyphVisible(int glyphIndex){  return glyphVisible[glyphIndex];}  }
class C{  @Override public void beginProcessSubTokens(){  vals=null;  tok="";}  }
class C{  public Collection(String href){  this();  setHref(href);}  }
class C{  public BubbleTransition(){}  }
class C{  public boolean isInvalid(){  return createException != null;}  }
class C{  public static <T>T rand(final T[] array){  return array[rand(array.length)];}  }
class C{  public void queryContacts(){  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()].execute(null);}  }
class C{  public void updateNodeLocations(Map<GraphNode,Point2D> newLocations){  glPanel.updateNodeLocations(newLocations);}  }
class C{  public static <ENUM extends Enum<ENUM>>EnumSet<ENUM> enumsFromPossiblyInvalidStrings(Class<ENUM> enumClass,List<String> elems){  return enumsFromStrings(enumClass,elems,true);}  }
class C{  public boolean isReuseLocalVariables(){  return false;}  }
class C{  public int export(ConstantPool target){  return target.addString(getString()).getIndex();}  }
class C{  public static String resolveVariables(String input,Map<String,String> props,boolean includeSysProps){  final int NORMAL=0;  final int SEEN_DOLLAR=1;  final int IN_BRACKET=2;  if (input == null) {    return input;  }  if (!includeSysProps && (props == null || props.size() == 0)) {    return input;  }  char[] chars=input.toCharArray();  StringBuffer buffer=new StringBuffer();  boolean properties=false;  int state=NORMAL;  int start=0;  for (int i=0; i < chars.length; ++i) {    char c=chars[i];    if (c == '$' && state != IN_BRACKET) {      state=SEEN_DOLLAR;    } else     if (c == '{' && state == SEEN_DOLLAR) {      buffer.append(input.substring(start,i - 1));      state=IN_BRACKET;      start=i - 1;    } else     if (state == SEEN_DOLLAR) {      state=NORMAL;    } else     if (c == '}' && state == IN_BRACKET) {      if (start + 2 == i) {        buffer.append("${}");      } else {        String value=null;        String key=input.substring(start + 2,i);        if (props != null) {          String sValue=props.get(key);          value=sValue == null || sValue.length() == 0 ? null : sValue;        }        if (value == null && includeSysProps) {          value=System.getProperty(key);        }        if (value != null) {          properties=true;          buffer.append(value);        }      }      start=i + 1;      state=NORMAL;    }  }  if (properties == false) {    return input;  }  if (start != chars.length) {    buffer.append(input.substring(start,chars.length));  }  return buffer.toString();}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeChar(separatorChar);}  }
class C{  public UserObject(int id){  this.id=id;}  }
class C{  @Override public R scan(Tree tree,P p){  if (tree == null)   return null;  TreePath prev=path;  path=new TreePath(path,tree);  try {    return tree.accept(this,p);  }  finally {    path=prev;  }}  }
class C{  private void printAnnotations(List<AnnotationExpr> annotations,Object arg){  printAnnotations(annotations,arg,false);}  }
class C{  private void anchorAtThisPositionAndScale(){  if (selectedObject == null) {    return;  }  objectCanvas.getPositionAndScale(selectedObject,mCurrentTouchPointPosAndScale);  float currScaleInv=1.0f / (!mCurrentTouchPointPosAndScale.isUpdateScale() ? 1.0f : mCurrentTouchPointPosAndScale.getScale() == 0.0f ? 1.0f : mCurrentTouchPointPosAndScale.getScale());  extractCurrentTouchPointInfo();  startPosX=(mCurrentTouchPointX - mCurrentTouchPointPosAndScale.getXOff()) * currScaleInv;  startPosY=(mCurrentTouchPointY - mCurrentTouchPointPosAndScale.getYOff()) * currScaleInv;  startScaleOverPinchDiam=mCurrentTouchPointPosAndScale.getScale() / mCurrentTouchPointDiam;  startScaleXOverPinchWidth=mCurrentTouchPointPosAndScale.getScaleX() / mCurrentTouchPointWidth;  startScaleYOverPinchHeight=mCurrentTouchPointPosAndScale.getScaleY() / mCurrentTouchPointHeight;  startAngleMinusPinchAngle=mCurrentTouchPointPosAndScale.getAngle() - mCurrentTouchPointAng;}  }
class C{  public static String extractRemoteHost(SessionDescription sessionDescription,MediaDescription mediaDescription){  String remoteHost=null;  if ((mediaDescription != null) && (mediaDescription.mConnectionInfo != null)) {    remoteHost=extractRemoteHost(mediaDescription.mConnectionInfo);  }  if ((remoteHost == null) && (sessionDescription != null) && (sessionDescription.connectionInfo != null)) {    remoteHost=extractRemoteHost(sessionDescription.connectionInfo);  }  return remoteHost;}  }
class C{  private static boolean isValidPort(int port){  return port >= 0 && port <= 65535;}  }
class C{  public boolean verifyNonce(AuthSuccess authResp,DiscoveryInformation discovered){  String nonce=authResp.getNonce();  if (nonce == null)   nonce=extractConsumerNonce(authResp.getReturnTo(),discovered.getOPEndpoint().toString());  if (nonce == null)   return false;  return (NonceVerifier.OK == _nonceVerifier.seen(discovered.getOPEndpoint().toString(),nonce));}  }
class C{  public boolean equals(Object other){  if (!(other instanceof IDKey)) {    return false;  }  IDKey idKey=(IDKey)other;  if (id != idKey.id) {    return false;  }  return value == idKey.value;}  }
class C{  @Override public boolean isEmpty(){  return mSize <= 0;}  }
class C{  public Matrix plus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  public JsonHttpResponseHandler(String encoding,boolean useRFC5179CompatibilityMode){  super(encoding);  this.useRFC5179CompatibilityMode=useRFC5179CompatibilityMode;}  }
class C{  @Deprecated static public AcelaTurnoutManager instance(){  return null;}  }
class C{  public Source resolveURI(String base,String urlString,SourceLocator locator) throws TransformerException, IOException {  Source source=null;  if (null != m_uriResolver) {    source=m_uriResolver.resolve(urlString,base);  }  if (null == source) {    String uri=SystemIDResolver.getAbsoluteURI(urlString,base);    source=new StreamSource(uri);  }  return source;}  }
class C{  public void Gen_populate(android.content.ContentValues values){  gen__Id=values.getAsLong(GEN_FIELD__ID);  gen_metaListId=values.getAsLong(GEN_FIELD_METALISTID);  gen_keyDesc=values.getAsString(GEN_FIELD_KEYDESC);  gen_metaFlags=(int)values.getAsInteger(GEN_FIELD_METAFLAGS);  gen_mouseClick=(values.getAsInteger(GEN_FIELD_MOUSECLICK) != 0);  gen_mouseButtons=(int)values.getAsInteger(GEN_FIELD_MOUSEBUTTONS);  gen_keySym=(int)values.getAsInteger(GEN_FIELD_KEYSYM);  gen_shortcut=values.getAsString(GEN_FIELD_SHORTCUT);}  }
class C{  public DataModelList simulateData(){  simulator.simulate(history);  DataModelList dataModelList=new DataModelList();  List<Node> variables=new LinkedList<>();  if (simulator.isIncludeDishAndChipVariables()) {    DiscreteVariable dishVar=new DiscreteVariable("Dish");    DiscreteVariable chipVar=new DiscreteVariable("Chip");    variables.add(dishVar);    variables.add(chipVar);  }  double[][][] measuredData=simulator.getMeasuredData();  int[] timeSteps=simulator.getTimeSteps();  List<String> factors=new ArrayList<>(genePm.getLagGraph().getFactors());  for (int i=0; i < measuredData[0].length; i++) {    for (int j=0; j < measuredData.length; j++) {      String name=factors.get(j) + ":t" + timeSteps[i];      ContinuousVariable var=new ContinuousVariable(name);      variables.add(var);    }  }  DataSet measuredDataSet=new ColtDataSet(measuredData[0][0].length,variables);  for (int i=0; i < measuredData[0].length; i++) {    for (int j=0; j < measuredData.length; j++) {      double[] _data=measuredData[j][i];      String name=factors.get(j) + ":t" + timeSteps[i];      ContinuousVariable var=(ContinuousVariable)measuredDataSet.getVariable(name);      int col=measuredDataSet.getVariables().indexOf(var);      for (int i1=0; i1 < _data.length; i1++) {        measuredDataSet.setDouble(i1,col,_data[i1]);      }    }  }  measuredDataSet.setName("Measurement Data");  dataModelList.add(measuredDataSet);  if (simulator.isIncludeDishAndChipVariables()) {    for (int i=0; i < measuredData[0][0].length; i++) {      int samplesPerDish=simulator.getNumSamplesPerDish();      measuredDataSet.setInt(i,0,i / samplesPerDish + 1);      measuredDataSet.setInt(i,1,i + 1);    }  }  if (simulator.isRawDataSaved()) {    double[][][] rawData=simulator.getRawData();    List<Node> _variables=new LinkedList<>();    for (int i=0; i < rawData[0].length; i++) {      for (int j=0; j < rawData.length; j++) {        String name="G" + (j + 1) + ":t"+ timeSteps[i];        _variables.add(new ContinuousVariable(name));      }    }    DataSet rawDataSet=new ColtDataSet(rawData[0][0].length,_variables);    for (int i=0; i < rawData[0].length; i++) {      for (int j=0; j < rawData.length; j++) {        double[] _data=rawData[j][i];        String name="G" + (j + 1) + ":t"+ timeSteps[i];        Node var=rawDataSet.getVariable(name);        int col=rawDataSet.getVariables().indexOf(var);        for (int i1=0; i1 < _data.length; i1++) {          rawDataSet.setDouble(i1,col,_data[i1]);        }      }    }    int n=rawData[0][0].length;    int cellsPerDish=simulator.getNumCellsPerDish();    if (simulator.isIncludeDishAndChipVariables()) {      DiscreteVariable dishVar2=new DiscreteVariable("Dish",n / cellsPerDish + 1);      rawDataSet.addVariable(0,dishVar2);    }    rawDataSet.setName("Raw Data");    if (simulator.isIncludeDishAndChipVariables()) {      for (int i=0; i < n; i++) {        rawDataSet.setInt(i,0,i / cellsPerDish + 1);      }    }    dataModelList.add(rawDataSet);  }  if (measuredData[0][0].length == 1) {    dataModelList.add(0,asTimeSeriesData(measuredData,0,factors));  }  return dataModelList;}  }
class C{  public TextAction(String name){  super(name);}  }
class C{  public TableReference ensureTable(TableReference table,String sqlQuery){  try {    runJob(new Job().setConfiguration(new JobConfiguration().setQuery(new JobConfigurationQuery().setQuery(sqlQuery).setDefaultDataset(getDataset()).setDestinationTable(table))));  } catch (  BigqueryJobFailureException e) {    if (e.getReason().equals("duplicate")) {    } else {      throw e;    }  }  return table;}  }
class C{  public void executeSelectQuery(Repository repo,String query,QueryLanguage ql) throws Exception {  RepositoryConnection cxn;  if (repo instanceof BigdataSailRepository) {    cxn=((BigdataSailRepository)repo).getReadOnlyConnection();  } else {    cxn=repo.getConnection();  }  try {    final TupleQuery tupleQuery=cxn.prepareTupleQuery(ql,query);    tupleQuery.setIncludeInferred(true);    TupleQueryResult result=tupleQuery.evaluate();    while (result.hasNext()) {      BindingSet bindingSet=result.next();      log.info(bindingSet);    }  }  finally {    cxn.close();  }}  }
class C{  public static void verifyLabel(String label){  if (label == null || label.isEmpty()) {    throw new IllegalArgumentException("empty or null components not allowed; got: " + label);  }}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  private void handleHtmlUserBackupForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleUserBackup();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("backup");  pageWrapper.addHeader();  if (!isUserSignedIn(requestAndResponse)) {    requestAndResponse.print(servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));  } else   if (isUsersAccountClosed(requestAndResponse)) {    requestAndResponse.print(servletText.errorAccountIsClosed());  } else {    requestAndResponse.print("<table class=\"nopadding\"><tr><td>");    requestAndResponse.print(servletText.userBackupAreYouSure());    requestAndResponse.print("</td></tr><tr><td>");    requestAndResponse.print("<form action=\"/doBackup/" + "\" method=\"POST\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<button class=\"specialbutton withTopMargin\">"+ servletText.pageTitleUserBackup()+ "</button></form>");    requestAndResponse.print("</td></tr></table>");  }  pageWrapper.addFooter();}  }
class C{  @Override public final String rightSide(int index,Instances data){  StringBuffer text;  text=new StringBuffer();  if (data.attribute(m_attIndex).isNominal()) {    if (index == 0) {      text.append(" = " + data.attribute(m_attIndex).value((int)m_splitPoint));    } else {      text.append(" != " + data.attribute(m_attIndex).value((int)m_splitPoint));    }  } else   if (index == 0) {    text.append(" <= " + m_splitPoint);  } else {    text.append(" > " + m_splitPoint);  }  return text.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.806 -0500",hash_original_method="17C821CA89D37F65B71D1113A8F4C810",hash_generated_method="C9D874D615A7328641199CCE9614B8DE") protected AbstractPooledConnAdapter(ClientConnectionManager manager,AbstractPoolEntry entry){  super(manager,entry.connection);  this.poolEntry=entry;}  }
class C{  public void applyMovement(){  if (speed == 0) {    stepsTaken=0;    return;  }  if (direction == Direction.STOP) {    stepsTaken=0;    return;  }  final int x=getX();  final int y=getY();  final int nx=x + direction.getdx();  final int ny=y + direction.getdy();  final StendhalRPZone zone=getZone();  zone.notifyBeforeMovement(this,x,y,nx,ny);  if (!ignoresCollision()) {    if (zone.simpleCollides(this,nx,ny,this.getWidth(),this.getHeight())) {      handleSimpleCollision(nx,ny);      return;    }  }  final Portal p=zone.getPortal(nx,ny);  if (p != null) {    if (handlePortal(p)) {      return;    }  }  if (isGhost()) {    if (isMoveCompleted()) {      move(x,y,nx,ny);      return;    }  }  final boolean collision=zone.collidesObjects(this,this.getArea(nx,ny));  if (collision) {    if (logger.isDebugEnabled()) {      logger.debug("Collision at (" + nx + ","+ ny+ ")");    }    handleObjectCollision();  } else {    if (!isMoveCompleted()) {      if (logger.isDebugEnabled()) {        logger.debug(get("type") + ") move not completed");      }      return;    }    if (logger.isDebugEnabled()) {      logger.debug("Moving from (" + x + ","+ y+ ") to ("+ nx+ ","+ ny+ ")");    }    move(x,y,nx,ny);    stepsTaken+=1;  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Throwable>void throwIfInstance(Throwable t,Class<K> clazz) throws K {  if ((t != null) && clazz.isAssignableFrom(t.getClass())) {    K kt=(K)t;    throw kt;  }}  }
class C{  @Override public List<NamedRelatedResourceRep> listByTenant(URI tenantId){  return getList(PathConstants.CLUSTER_BY_TENANT_URL,tenantId);}  }
class C{  private void logMin(String type,String value,String arg,long amount){  Key key=new Key(type,value,arg + MINIMUM_INDICATOR);synchronized (counts) {    Long oldMin=counts.get(key);    if (oldMin == null) {      oldMin=amount;    }    counts.put(key,Math.min(oldMin,amount));  }}  }
class C{  public Signature(InputStream signatureXml){  try {    document=XmlUtils.parseDocument(signatureXml);    readSignature();    readObjectContainer();  } catch (  Exception e) {    throw translateException(e);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int begOffs=Utilities.getRowStart(target,offs);      if (select) {        target.moveCaretPosition(begOffs);      } else {        target.setCaretPosition(begOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public void testResultSet() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement storedProc=null;    createTable("testSpResultTbl1","(field1 INT)");    this.stmt.executeUpdate("INSERT INTO testSpResultTbl1 VALUES (1), (2)");    createTable("testSpResultTbl2","(field2 varchar(255))");    this.stmt.executeUpdate("INSERT INTO testSpResultTbl2 VALUES ('abc'), ('def')");    createProcedure("testSpResult","()\nBEGIN\nSELECT field2 FROM testSpResultTbl2 WHERE field2='abc';\n" + "UPDATE testSpResultTbl1 SET field1=2;\nSELECT field2 FROM testSpResultTbl2 WHERE field2='def';\nend\n");    storedProc=this.conn.prepareCall("{call testSpResult()}");    storedProc.execute();    this.rs=storedProc.getResultSet();    ResultSetMetaData rsmd=this.rs.getMetaData();    assertTrue(rsmd.getColumnCount() == 1);    assertTrue("field2".equals(rsmd.getColumnName(1)));    assertTrue(rsmd.getColumnType(1) == Types.VARCHAR);    assertTrue(this.rs.next());    assertTrue("abc".equals(this.rs.getString(1)));    assertTrue(storedProc.getMoreResults());    ResultSet nextResultSet=storedProc.getResultSet();    rsmd=nextResultSet.getMetaData();    assertTrue(rsmd.getColumnCount() == 1);    assertTrue("field2".equals(rsmd.getColumnName(1)));    assertTrue(rsmd.getColumnType(1) == Types.VARCHAR);    assertTrue(nextResultSet.next());    assertTrue("def".equals(nextResultSet.getString(1)));    nextResultSet.close();    this.rs.close();    storedProc.execute();  }}  }
class C{  public SubReqClientHandler(){}  }
class C{  protected void insertHoldOutSet(Instances data) throws Exception {  for (int i=0; i < data.numInstances(); i++) {    insertHoldOutInstance(data.instance(i),data.instance(i).weight(),this);  }}  }
class C{  @Override public boolean isValidRow(Map<String,Object> row){  if (equalMap.size() == 0) {    return true;  }  for (  Map.Entry<String,Object> entry : equalMap.entrySet()) {    if (!row.containsKey(entry.getKey())) {      return false;    }    Object value=row.get(entry.getKey());    if (entry.getValue() == null) {      if (value == null) {        return true;      }      return false;    }    if (value == null) {      return false;    }    if (!entry.getValue().equals(value)) {      return false;    }  }  return true;}  }
class C{  public static boolean isVolatile(int mod){  return Modifier.isVolatile(mod);}  }
class C{  public boolean add(final float[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  protected ListCellRenderer createRenderer(){  return new BEComboBoxRenderer.UIResource(this);}  }
class C{  public final double pdf(double x){  if (offset < 0)   return 0.0;  return distribution.pdf(x - offset);}  }
class C{  private boolean isFrameworkClass(String name){  boolean isIt=(name.startsWith("mx.") && name.indexOf(":") != -1 && name.endsWith(".as")) || (name.indexOf("/mx/") > -1);  return isIt;}  }
class C{  synchronized void receive(char oneChar) throws IOException {  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  try {    while (buffer != null && out == in) {      notifyAll();      wait(1000);      if (lastReader != null && !lastReader.isAlive()) {        throw new IOException("Pipe broken");      }    }  } catch (  InterruptedException e) {    IoUtils.throwInterruptedIoException();  }  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (in == -1) {    in=0;  }  buffer[in++]=oneChar;  if (in == buffer.length) {    in=0;  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 5:{        addNullToken();        return firstToken;      }case 30:    break;case 22:{    addToken(Token.LITERAL_CHAR);  }case 31:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 32:break;case 25:{addToken(Token.COMMENT_MULTILINE);}case 33:break;case 20:{start=zzMarkedPos - 2;yybegin(MLC);}case 34:break;case 7:{addToken(Token.WHITESPACE);}case 35:break;case 15:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 36:break;case 23:{addToken(Token.ERROR_STRING_DOUBLE);}case 37:break;case 14:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 38:break;case 17:{addToken(Token.RESERVED_WORD);}case 39:break;case 9:{addToken(Token.SEPARATOR);}case 40:break;case 2:{addToken(Token.IDENTIFIER);}case 41:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 42:break;case 19:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 43:break;case 27:{addToken(Token.FUNCTION);}case 44:break;case 4:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 45:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 46:break;case 24:{addToken(Token.DATA_TYPE);}case 47:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 48:break;case 16:{addToken(Token.ERROR_CHAR);}case 49:break;case 26:{addToken(Token.LITERAL_BOOLEAN);}case 50:break;case 18:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 51:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 52:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 53:break;case 13:{addToken(Token.ERROR_NUMBER_FORMAT);}case 54:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 55:break;case 8:{addToken(Token.OPERATOR);}case 56:break;case 10:{}case 57:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 58:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 532:break;case YYINITIAL:{addNullToken();return firstToken;}case 533:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 534:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public ExponetialDecay(double min){  this(min,1000000);}  }
class C{  public boolean authenticate() throws SecurityException {switch (sasl.getState()) {case PN_SASL_IDLE:    handleSaslInit();  break;case PN_SASL_STEP:handleSaslStep();break;case PN_SASL_FAIL:handleSaslFail();break;case PN_SASL_PASS:return true;default :}return false;}  }
class C{  private void checkPermittedIP(Set permitted,byte[] ip) throws PKIXNameConstraintValidatorException {  if (permitted == null) {    return;  }  Iterator it=permitted.iterator();  while (it.hasNext()) {    byte[] ipWithSubnet=(byte[])it.next();    if (isIPConstrained(ip,ipWithSubnet)) {      return;    }  }  if (ip.length == 0 && permitted.size() == 0) {    return;  }  throw new PKIXNameConstraintValidatorException("IP is not from a permitted subtree.");}  }
class C{  public void build(DOMTestSink sink){  sink.addTest(attrcreatedocumentfragment.class);  sink.addTest(attrcreatetextnode.class);  sink.addTest(attrcreatetextnode2.class);  sink.addTest(attreffectivevalue.class);  sink.addTest(attrname.class);  sink.addTest(attrnextsiblingnull.class);  sink.addTest(attrparentnodenull.class);  sink.addTest(attrprevioussiblingnull.class);  sink.addTest(attrspecifiedvalue.class);  sink.addTest(attrspecifiedvaluechanged.class);  sink.addTest(cdatasectiongetdata.class);  sink.addTest(characterdataappenddata.class);  sink.addTest(characterdataappenddatagetdata.class);  sink.addTest(characterdatadeletedatabegining.class);  sink.addTest(characterdatadeletedataend.class);  sink.addTest(characterdatadeletedataexceedslength.class);  sink.addTest(characterdatadeletedatagetlengthanddata.class);  sink.addTest(characterdatadeletedatamiddle.class);  sink.addTest(characterdatagetdata.class);  sink.addTest(characterdatagetlength.class);  sink.addTest(characterdatainsertdatabeginning.class);  sink.addTest(characterdatainsertdataend.class);  sink.addTest(characterdatainsertdatamiddle.class);  sink.addTest(characterdatareplacedatabegining.class);  sink.addTest(characterdatareplacedataend.class);  sink.addTest(characterdatareplacedataexceedslengthofarg.class);  sink.addTest(characterdatareplacedataexceedslengthofdata.class);  sink.addTest(characterdatareplacedatamiddle.class);  sink.addTest(characterdatasubstringvalue.class);  sink.addTest(commentgetcomment.class);  sink.addTest(documentcreatecdatasection.class);  sink.addTest(documentcreatecomment.class);  sink.addTest(documentcreatedocumentfragment.class);  sink.addTest(documentcreateelement.class);  sink.addTest(documentcreateelementcasesensitive.class);  sink.addTest(documentcreateentityreference.class);  sink.addTest(documentcreateprocessinginstruction.class);  sink.addTest(documentcreatetextnode.class);  sink.addTest(documentgetdoctype.class);  sink.addTest(documentgetdoctypenodtd.class);  sink.addTest(documentgetelementsbytagnamelength.class);  sink.addTest(documentgetelementsbytagnamevalue.class);  sink.addTest(documentgetimplementation.class);  sink.addTest(documentgetrootnode.class);  sink.addTest(documentinvalidcharacterexceptioncreateattribute.class);  sink.addTest(documentinvalidcharacterexceptioncreateelement.class);  sink.addTest(documenttypegetdoctype.class);  sink.addTest(domimplementationfeaturenoversion.class);  sink.addTest(domimplementationfeaturenull.class);  sink.addTest(domimplementationfeaturexml.class);  sink.addTest(elementaddnewattribute.class);  sink.addTest(elementassociatedattribute.class);  sink.addTest(elementchangeattributevalue.class);  sink.addTest(elementgetattributenode.class);  sink.addTest(elementgetattributenodenull.class);  sink.addTest(elementgetelementsbytagname.class);  sink.addTest(elementgetelementsbytagnameaccessnodelist.class);  sink.addTest(elementgetelementsbytagnamenomatch.class);  sink.addTest(elementgettagname.class);  sink.addTest(elementinuseattributeerr.class);  sink.addTest(elementinvalidcharacterexception.class);  sink.addTest(elementnormalize.class);  sink.addTest(elementnotfounderr.class);  sink.addTest(elementremoveattributeaftercreate.class);  sink.addTest(elementremoveattributenode.class);  sink.addTest(elementreplaceexistingattributegevalue.class);  sink.addTest(elementretrieveattrvalue.class);  sink.addTest(elementretrievetagname.class);  sink.addTest(elementsetattributenodenull.class);  sink.addTest(elementwrongdocumenterr.class);  sink.addTest(namednodemapchildnoderange.class);  sink.addTest(namednodemapgetnameditem.class);  sink.addTest(namednodemapinuseattributeerr.class);  sink.addTest(namednodemapnotfounderr.class);  sink.addTest(namednodemapnumberofnodes.class);  sink.addTest(namednodemapremovenameditemreturnnodevalue.class);  sink.addTest(namednodemapreturnattrnode.class);  sink.addTest(namednodemapreturnfirstitem.class);  sink.addTest(namednodemapreturnlastitem.class);  sink.addTest(namednodemapreturnnull.class);  sink.addTest(namednodemapsetnameditem.class);  sink.addTest(namednodemapsetnameditemreturnvalue.class);  sink.addTest(namednodemapsetnameditemwithnewvalue.class);  sink.addTest(namednodemapwrongdocumenterr.class);  sink.addTest(nodeappendchild.class);  sink.addTest(nodeappendchildgetnodename.class);  sink.addTest(nodeappendchildnewchilddiffdocument.class);  sink.addTest(nodeappendchildnodeancestor.class);  sink.addTest(nodeattributenodeattribute.class);  sink.addTest(nodeattributenodename.class);  sink.addTest(nodeattributenodetype.class);  sink.addTest(nodeattributenodevalue.class);  sink.addTest(nodecdatasectionnodeattribute.class);  sink.addTest(nodecdatasectionnodename.class);  sink.addTest(nodecdatasectionnodetype.class);  sink.addTest(nodecdatasectionnodevalue.class);  sink.addTest(nodechildnodes.class);  sink.addTest(nodechildnodesempty.class);  sink.addTest(nodecommentnodeattributes.class);  sink.addTest(nodecommentnodename.class);  sink.addTest(nodecommentnodetype.class);  sink.addTest(nodecommentnodevalue.class);  sink.addTest(nodedocumentfragmentnodename.class);  sink.addTest(nodedocumentfragmentnodetype.class);  sink.addTest(nodedocumentfragmentnodevalue.class);  sink.addTest(nodedocumentnodeattribute.class);  sink.addTest(nodedocumentnodename.class);  sink.addTest(nodedocumentnodetype.class);  sink.addTest(nodedocumentnodevalue.class);  sink.addTest(nodedocumenttypenodename.class);  sink.addTest(nodedocumenttypenodetype.class);  sink.addTest(nodedocumenttypenodevalue.class);  sink.addTest(nodeelementnodeattributes.class);  sink.addTest(nodeelementnodename.class);  sink.addTest(nodeelementnodetype.class);  sink.addTest(nodeelementnodevalue.class);  sink.addTest(nodeentityreferencenodeattributes.class);  sink.addTest(nodeentityreferencenodename.class);  sink.addTest(nodeentityreferencenodetype.class);  sink.addTest(nodeentityreferencenodevalue.class);  sink.addTest(nodegetfirstchild.class);  sink.addTest(nodegetfirstchildnull.class);  sink.addTest(nodegetlastchild.class);  sink.addTest(nodegetlastchildnull.class);  sink.addTest(nodegetnextsibling.class);  sink.addTest(nodegetnextsiblingnull.class);  sink.addTest(nodegetownerdocument.class);  sink.addTest(nodegetownerdocumentnull.class);  sink.addTest(nodegetprevioussibling.class);  sink.addTest(nodegetprevioussiblingnull.class);  sink.addTest(nodehaschildnodes.class);  sink.addTest(nodehaschildnodesfalse.class);  sink.addTest(nodeinsertbeforenewchilddiffdocument.class);  sink.addTest(nodeinsertbeforenewchildexists.class);  sink.addTest(nodeinsertbeforenodeancestor.class);  sink.addTest(nodeinsertbeforenodename.class);  sink.addTest(nodelistindexequalzero.class);  sink.addTest(nodelistindexgetlength.class);  sink.addTest(nodelistindexgetlengthofemptylist.class);  sink.addTest(nodelistindexnotzero.class);  sink.addTest(nodelistreturnfirstitem.class);  sink.addTest(nodelistreturnlastitem.class);  sink.addTest(nodelisttraverselist.class);  sink.addTest(nodeparentnode.class);  sink.addTest(nodeparentnodenull.class);  sink.addTest(nodeprocessinginstructionnodeattributes.class);  sink.addTest(nodeprocessinginstructionnodename.class);  sink.addTest(nodeprocessinginstructionnodetype.class);  sink.addTest(nodeprocessinginstructionnodevalue.class);  sink.addTest(noderemovechild.class);  sink.addTest(noderemovechildgetnodename.class);  sink.addTest(nodereplacechildnewchilddiffdocument.class);  sink.addTest(nodereplacechildnodeancestor.class);  sink.addTest(nodereplacechildnodename.class);  sink.addTest(nodetextnodeattribute.class);  sink.addTest(nodetextnodename.class);  sink.addTest(nodetextnodetype.class);  sink.addTest(nodetextnodevalue.class);  sink.addTest(processinginstructiongetdata.class);  sink.addTest(processinginstructiongettarget.class);  sink.addTest(textsplittextfour.class);  sink.addTest(textsplittextone.class);  sink.addTest(textsplittextthree.class);  sink.addTest(textwithnomarkup.class);  sink.addTest(nodevalue01.class);  sink.addTest(nodevalue03.class);  sink.addTest(nodevalue04.class);  sink.addTest(nodevalue05.class);  sink.addTest(nodevalue06.class);  sink.addTest(hc_attrcreatedocumentfragment.class);  sink.addTest(hc_attrcreatetextnode.class);  sink.addTest(hc_attrcreatetextnode2.class);  sink.addTest(hc_attreffectivevalue.class);  sink.addTest(hc_attrname.class);  sink.addTest(hc_attrnextsiblingnull.class);  sink.addTest(hc_attrparentnodenull.class);  sink.addTest(hc_attrprevioussiblingnull.class);  sink.addTest(hc_attrspecifiedvalue.class);  sink.addTest(hc_attrspecifiedvaluechanged.class);  sink.addTest(hc_characterdataappenddata.class);  sink.addTest(hc_characterdataappenddatagetdata.class);  sink.addTest(hc_characterdatadeletedatabegining.class);  sink.addTest(hc_characterdatadeletedataend.class);  sink.addTest(hc_characterdatadeletedataexceedslength.class);  sink.addTest(hc_characterdatadeletedatagetlengthanddata.class);  sink.addTest(hc_characterdatadeletedatamiddle.class);  sink.addTest(hc_characterdatagetdata.class);  sink.addTest(hc_characterdatagetlength.class);  sink.addTest(hc_characterdatainsertdatabeginning.class);  sink.addTest(hc_characterdatainsertdataend.class);  sink.addTest(hc_characterdatainsertdatamiddle.class);  sink.addTest(hc_characterdatareplacedatabegining.class);  sink.addTest(hc_characterdatareplacedataend.class);  sink.addTest(hc_characterdatareplacedataexceedslengthofarg.class);  sink.addTest(hc_characterdatareplacedataexceedslengthofdata.class);  sink.addTest(hc_characterdatareplacedatamiddle.class);  sink.addTest(hc_characterdatasubstringvalue.class);  sink.addTest(hc_commentgetcomment.class);  sink.addTest(hc_documentcreatecomment.class);  sink.addTest(hc_documentcreatedocumentfragment.class);  sink.addTest(hc_documentcreateelement.class);  sink.addTest(hc_documentcreateelementcasesensitive.class);  sink.addTest(hc_documentcreatetextnode.class);  sink.addTest(hc_documentgetdoctype.class);  sink.addTest(hc_documentgetelementsbytagnamelength.class);  sink.addTest(hc_documentgetelementsbytagnametotallength.class);  sink.addTest(hc_documentgetelementsbytagnamevalue.class);  sink.addTest(hc_documentgetimplementation.class);  sink.addTest(hc_documentgetrootnode.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateattribute.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateattribute1.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateelement.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateelement1.class);  sink.addTest(hc_domimplementationfeaturenoversion.class);  sink.addTest(hc_domimplementationfeaturenull.class);  sink.addTest(hc_domimplementationfeaturexml.class);  sink.addTest(hc_elementaddnewattribute.class);  sink.addTest(hc_elementassociatedattribute.class);  sink.addTest(hc_elementchangeattributevalue.class);  sink.addTest(hc_elementgetattributenode.class);  sink.addTest(hc_elementgetattributenodenull.class);  sink.addTest(hc_elementgetelementsbytagname.class);  sink.addTest(hc_elementgetelementsbytagnameaccessnodelist.class);  sink.addTest(hc_elementgetelementsbytagnamenomatch.class);  sink.addTest(hc_elementgettagname.class);  sink.addTest(hc_elementinuseattributeerr.class);  sink.addTest(hc_elementinvalidcharacterexception.class);  sink.addTest(hc_elementinvalidcharacterexception1.class);  sink.addTest(hc_elementnormalize.class);  sink.addTest(hc_elementnotfounderr.class);  sink.addTest(hc_elementremoveattribute.class);  sink.addTest(hc_elementremoveattributeaftercreate.class);  sink.addTest(hc_elementremoveattributenode.class);  sink.addTest(hc_elementreplaceexistingattributegevalue.class);  sink.addTest(hc_elementretrieveattrvalue.class);  sink.addTest(hc_elementretrievetagname.class);  sink.addTest(hc_elementsetattributenodenull.class);  sink.addTest(hc_elementwrongdocumenterr.class);  sink.addTest(hc_namednodemapgetnameditem.class);  sink.addTest(hc_namednodemapinuseattributeerr.class);  sink.addTest(hc_namednodemapnotfounderr.class);  sink.addTest(hc_namednodemapremovenameditem.class);  sink.addTest(hc_namednodemapreturnattrnode.class);  sink.addTest(hc_namednodemapreturnnull.class);  sink.addTest(hc_namednodemapsetnameditem.class);  sink.addTest(hc_namednodemapsetnameditemreturnvalue.class);  sink.addTest(hc_namednodemapsetnameditemwithnewvalue.class);  sink.addTest(hc_namednodemapwrongdocumenterr.class);  sink.addTest(hc_nodeappendchild.class);  sink.addTest(hc_nodeappendchildgetnodename.class);  sink.addTest(hc_nodeappendchildnewchilddiffdocument.class);  sink.addTest(hc_nodeappendchildnodeancestor.class);  sink.addTest(hc_nodeattributenodeattribute.class);  sink.addTest(hc_nodeattributenodename.class);  sink.addTest(hc_nodeattributenodetype.class);  sink.addTest(hc_nodeattributenodevalue.class);  sink.addTest(hc_nodechildnodes.class);  sink.addTest(hc_nodechildnodesempty.class);  sink.addTest(hc_nodecommentnodeattributes.class);  sink.addTest(hc_nodecommentnodename.class);  sink.addTest(hc_nodecommentnodetype.class);  sink.addTest(hc_nodecommentnodevalue.class);  sink.addTest(hc_nodedocumentfragmentnodename.class);  sink.addTest(hc_nodedocumentfragmentnodetype.class);  sink.addTest(hc_nodedocumentfragmentnodevalue.class);  sink.addTest(hc_nodedocumentnodeattribute.class);  sink.addTest(hc_nodedocumentnodename.class);  sink.addTest(hc_nodedocumentnodetype.class);  sink.addTest(hc_nodedocumentnodevalue.class);  sink.addTest(hc_nodeelementnodename.class);  sink.addTest(hc_nodeelementnodetype.class);  sink.addTest(hc_nodeelementnodevalue.class);  sink.addTest(hc_nodegetfirstchild.class);  sink.addTest(hc_nodegetfirstchildnull.class);  sink.addTest(hc_nodegetlastchild.class);  sink.addTest(hc_nodegetlastchildnull.class);  sink.addTest(hc_nodegetnextsibling.class);  sink.addTest(hc_nodegetnextsiblingnull.class);  sink.addTest(hc_nodegetownerdocument.class);  sink.addTest(hc_nodegetownerdocumentnull.class);  sink.addTest(hc_nodegetprevioussibling.class);  sink.addTest(hc_nodegetprevioussiblingnull.class);  sink.addTest(hc_nodehaschildnodes.class);  sink.addTest(hc_nodehaschildnodesfalse.class);  sink.addTest(hc_nodeinsertbeforenewchilddiffdocument.class);  sink.addTest(hc_nodeinsertbeforenodeancestor.class);  sink.addTest(hc_nodeinsertbeforenodename.class);  sink.addTest(hc_nodelistindexequalzero.class);  sink.addTest(hc_nodelistindexgetlength.class);  sink.addTest(hc_nodelistindexgetlengthofemptylist.class);  sink.addTest(hc_nodelistindexnotzero.class);  sink.addTest(hc_nodelistreturnfirstitem.class);  sink.addTest(hc_nodelistreturnlastitem.class);  sink.addTest(hc_nodelisttraverselist.class);  sink.addTest(hc_nodeparentnode.class);  sink.addTest(hc_nodeparentnodenull.class);  sink.addTest(hc_noderemovechild.class);  sink.addTest(hc_noderemovechildgetnodename.class);  sink.addTest(hc_nodereplacechildnewchilddiffdocument.class);  sink.addTest(hc_nodereplacechildnodeancestor.class);  sink.addTest(hc_nodereplacechildnodename.class);  sink.addTest(hc_nodetextnodeattribute.class);  sink.addTest(hc_nodetextnodename.class);  sink.addTest(hc_nodetextnodetype.class);  sink.addTest(hc_nodetextnodevalue.class);  sink.addTest(hc_nodevalue01.class);  sink.addTest(hc_nodevalue03.class);  sink.addTest(hc_nodevalue04.class);  sink.addTest(hc_nodevalue05.class);  sink.addTest(hc_nodevalue06.class);  sink.addTest(hc_textsplittextfour.class);  sink.addTest(hc_textsplittextone.class);  sink.addTest(hc_textsplittextthree.class);  sink.addTest(hc_textwithnomarkup.class);  sink.addTest(hc_attrappendchild2.class);  sink.addTest(hc_attrappendchild4.class);  sink.addTest(hc_attrinsertbefore5.class);  sink.addTest(hc_attrinsertbefore7.class);}  }
class C{  public LogWriter(int priority,String tag){  mPriority=priority;  mTag=tag;  mBuffer=Log.LOG_ID_MAIN;}  }
class C{  private static double normalize(double x){  return x / (x + 1.0);}  }
class C{  @Override public void onDestroy(){synchronized (mThread) {    mReady=false;    mQuiting=true;    mThread.notify();  }  super.onDestroy();}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  ForStatement s=(ForStatement)clone();  if (init != null) {    s.init=init.copyInline(ctx,valNeeded);  }  if (cond != null) {    s.cond=cond.copyInline(ctx);  }  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  if (inc != null) {    s.inc=inc.copyInline(ctx);  }  return s;}  }
class C{  public String sendInvitationHash(String SID,String username,String message,String baseurl,String email,String subject,Long room_id,String conferencedomain,Boolean isPasswordProtected,String invitationpass,Integer valid,String validFromDate,String validFromTime,String validToDate,String validToTime,Long language_id,Boolean sendMail) throws AxisFault {  return this.getRoomServiceProxy().sendInvitationHash(SID,username,message,baseurl,email,subject,room_id,conferencedomain,isPasswordProtected,invitationpass,valid,validFromDate,validFromTime,validToDate,validToTime,language_id,sendMail);}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSeparatorBackground(context,g,x,y,w,h);}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Map map=(Map)value;  if (map != null) {    return read(node,map);  }  return read(node);}  }
class C{  public SnmpIpAddress(String dotAddress) throws IllegalArgumentException {  super(dotAddress);  if ((componentCount > 4) || (components[0] > 255) || (components[1] > 255)|| (components[2] > 255)|| (components[3] > 255)) {    throw new IllegalArgumentException(dotAddress);  }}  }
class C{  private boolean isEmptyConfig(){  return !configSet.isPresent();}  }
class C{  static final void localInit(){  int p=probeGenerator.addAndGet(PROBE_INCREMENT);  int probe=(p == 0) ? 1 : p;  long seed=mix64(seeder.getAndAdd(SEEDER_INCREMENT));  setThreadLocalRandomSeed(seed);  setThreadLocalRandomProbe(probe);}  }
class C{  private static void add1(Collection<String> src,String line){  src.add(TAB + line);}  }
class C{  public boolean isSendfileEnabled(){  return false;}  }
class C{  public void testIntOptions() throws Exception {  DatabaseMetaData dbmd=con.getMetaData();  int sysnamelen=(dbmd.getDatabaseProductName().startsWith("Microsoft")) ? 128 : 30;  Assert.assertEquals("getDefaultTransactionIsolation",Connection.TRANSACTION_READ_COMMITTED,dbmd.getDefaultTransactionIsolation());  assertTrue("getDriverMajorVersion",dbmd.getDriverMajorVersion() >= 0);  assertTrue("getDriverMinorVersion",dbmd.getDriverMinorVersion() >= 0);  Assert.assertEquals("getMaxBinaryLiteralLength",131072,dbmd.getMaxBinaryLiteralLength());  Assert.assertEquals("getMaxCatalogNameLength",sysnamelen,dbmd.getMaxCatalogNameLength());  Assert.assertEquals("getMaxCharLiteralLength",131072,dbmd.getMaxCharLiteralLength());  Assert.assertEquals("getMaxColumnNameLength",sysnamelen,dbmd.getMaxColumnNameLength());  Assert.assertEquals("getMaxColumnsInIndex",16,dbmd.getMaxColumnsInIndex());  Assert.assertEquals("getMaxColumnsInSelect",4096,dbmd.getMaxColumnsInSelect());  Assert.assertEquals("getMaxConnections",32767,dbmd.getMaxConnections());  Assert.assertEquals("getMaxCursorNameLength",sysnamelen,dbmd.getMaxCursorNameLength());  Assert.assertEquals("getMaxProcedureNameLength",sysnamelen,dbmd.getMaxProcedureNameLength());  Assert.assertEquals("getMaxSchemaNameLength",sysnamelen,dbmd.getMaxSchemaNameLength());  Assert.assertEquals("getMaxStatementLength",0,dbmd.getMaxStatementLength());  Assert.assertEquals("getMaxStatements",0,dbmd.getMaxStatements());  Assert.assertEquals("getMaxTableNameLength",sysnamelen,dbmd.getMaxTableNameLength());  Assert.assertEquals("getMaxUserNameLength",sysnamelen,dbmd.getMaxUserNameLength());  if (dbmd.getDatabaseProductName().startsWith("Microsoft")) {    Assert.assertEquals("getMaxColumnsInGroupBy",0,dbmd.getMaxColumnsInGroupBy());    Assert.assertEquals("getMaxColumnsInOrderBy",0,dbmd.getMaxColumnsInOrderBy());    Assert.assertEquals("getMaxColumnsInTable",1024,dbmd.getMaxColumnsInTable());    Assert.assertEquals("getMaxIndexLength",900,dbmd.getMaxIndexLength());    Assert.assertEquals("getMaxRowSize",8060,dbmd.getMaxRowSize());    Assert.assertEquals("getMaxTablesInSelect",256,dbmd.getMaxTablesInSelect());  } else {    Assert.assertEquals("getMaxColumnsInGroupBy",16,dbmd.getMaxColumnsInGroupBy());    Assert.assertEquals("getMaxColumnsInOrderBy",16,dbmd.getMaxColumnsInOrderBy());    Assert.assertEquals("getMaxColumnsInTable",250,dbmd.getMaxColumnsInTable());    Assert.assertEquals("getMaxIndexLength",255,dbmd.getMaxIndexLength());    Assert.assertEquals("getMaxRowSize",1962,dbmd.getMaxRowSize());    Assert.assertEquals("getMaxTablesInSelect",16,dbmd.getMaxTablesInSelect());  }}  }
class C{  public ControlConfig(java.awt.Frame parent,boolean modal,ControlMap map){  super(parent,modal);  this.map=map;  initComponents();  initButtonList();  initCommandList();  buttonList.setSelectedIndex(0);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:57.248 -0500",hash_original_method="C72D64DE5C06A555CE5E29E3236A56AC",hash_generated_method="C72D64DE5C06A555CE5E29E3236A56AC") void clearDisconnected(){  for (int i=connections.size() - 1; i >= 0; i--) {    CdmaConnection cn=(CdmaConnection)connections.get(i);    if (cn.getState() == State.DISCONNECTED) {      connections.remove(i);    }  }  if (connections.size() == 0) {    state=State.IDLE;  }}  }
class C{  public void test_syntax_update_38() throws MalformedQueryException {  final String query="# Empty\n";  parseOperation(query);}  }
class C{  @SuppressWarnings("unchecked") private <T>T lookDependencyAmongDependants(final Class<T> dependencyType){  for (int i=dependants.size() - 1; i >= 0; i--) {    final Object dependant=dependants.get(i);    if (dependencyType.isAssignableFrom(dependant.getClass())) {      dependants.remove(dependant);      return cache(dependencyType,dependant);    }  }  return null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (loneBoolean_1: ");  result.append(loneBoolean_1);  result.append(')');  return result.toString();}  }
class C{  public void removeTrace(Trace trace){  if (legendMap.containsKey(trace.getYAxis())) {    legendMap.get(trace.getYAxis()).removeTrace(trace);    if (legendMap.get(trace.getYAxis()).getTraceList().size() <= 0) {      remove(legendMap.remove(trace.getYAxis()));    }  }  plotArea.removeTrace(trace);  revalidate();  repaint();}  }
class C{  private void checkNotParsing(String type,String name) throws SAXNotSupportedException {  if (parsing) {    throw new SAXNotSupportedException("Cannot change " + type + ' '+ name+ " while parsing");  }}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  this(context,attrs,com.android.internal.R.attr.switchPreferenceStyle);}  }
class C{  default <T2,R>Zippable<R> zip(final Iterable<? extends T2> iterable,final BiFunction<? super T,? super T2,? extends R> fn){  return ReactiveSeq.fromIterable(this).zip(iterable,fn);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Matrix(int m,int n){  values=new double[m][n];}  }
class C{  @Override protected void resetBeanDefinition(String beanName){  String[] dependentBeans=getDependentBeans(beanName);  super.resetBeanDefinition(beanName);  if (dependentBeans != null) {    for (    String dependentBean : dependentBeans) {      resetBeanDefinition(dependentBean);      registerDependentBean(beanName,dependentBean);    }  }}  }
class C{  private <T>Dao<T,Long> createDao(OsmSqliteOpenHelper helper,Class<T> clazz){  try {    return helper.getDao(clazz);  } catch (  SQLException e) {    Timber.e(e,"Error while creating %s dao",clazz.getSimpleName());    throw new RuntimeException(e);  }}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void fillFieldValues(List<SynapseUpdateRule> ruleList){  HebbianRule synapseRef=(HebbianRule)ruleList.get(0);  if (!NetworkUtils.isConsistent(ruleList,HebbianRule.class,"getLearningRate")) {    tfLearningRate.setText(SimbrainConstants.NULL_STRING);  } else {    tfLearningRate.setText(Double.toString(synapseRef.getLearningRate()));  }}  }
class C{  public static void printf(Item item,String pattern,Object... args){  printf(prefix(item) + pattern,args);}  }
class C{  boolean isSegmentEnd(int row){  if ((segmentEnds == null) || (row < 0) || (row >= rows.size())) {    return false;  }  return segmentEnds.contains(rows.elementAt(row));}  }
class C{  public void updateAuthDescriptions(Context context){  mAuthDescs=AccountManager.get(context).getAuthenticatorTypes();  for (int i=0; i < mAuthDescs.length; i++) {    mTypeToAuthDescription.put(mAuthDescs[i].type,mAuthDescs[i]);  }}  }
class C{  public static void perform(IR ir){  if (DEBUG)   System.out.println("LSTGraph:" + ir.method);  ir.HIRInfo.loopStructureTree=new LSTGraph(ir);  if (DEBUG) {    System.out.println(ir.HIRInfo.loopStructureTree.toString());  }}  }
class C{  public void addDiscoverer(ParameterNameDiscoverer pnd){  this.parameterNameDiscoverers.add(pnd);}  }
class C{  protected void skipWhitespace(final CharArrayBuffer buffer,final ParserCursor cursor){  int pos=cursor.getPos();  int indexTo=cursor.getUpperBound();  while ((pos < indexTo) && HTTP.isWhitespace(buffer.charAt(pos))) {    pos++;  }  cursor.updatePos(pos);}  }
class C{  public long position(String searchstr,long start) throws SQLException {  throw new FBDriverNotCapableException("Method position(String, long) is not supported");}  }
class C{  private void verifyMinimumSupportedFirmwareVersion(VPlexApiClient client,StorageProvider mgmntServer) throws VPlexCollectionException {  try {    String fwVersion=client.getManagementSoftwareVersion();    mgmntServer.setVersionString(fwVersion);    String minFWVersion=VersionChecker.getMinimumSupportedVersion(Type.valueOf(mgmntServer.getInterfaceType()));    s_logger.info("Verifying VPLEX management server version: Minimum Supported Version {} - " + "Discovered Version {}",minFWVersion,fwVersion);    if (VersionChecker.verifyVersionDetails(minFWVersion,fwVersion) < 0) {      setStorageProviderCompatibilityStatus(mgmntServer,CompatibilityStatus.INCOMPATIBLE);      throw VPlexCollectionException.exceptions.unsupportedManagementServerVersion(fwVersion,mgmntServer.getIPAddress(),minFWVersion);    } else {      setStorageProviderCompatibilityStatus(mgmntServer,CompatibilityStatus.COMPATIBLE);    }  } catch (  VPlexCollectionException vce) {    s_logger.error("Error verifying management server version {}:",mgmntServer.getIPAddress(),vce);    throw vce;  }catch (  Exception e) {    s_logger.error("Error verifying management server version {}:",mgmntServer.getIPAddress(),e);    throw VPlexCollectionException.exceptions.failedVerifyingManagementServerVersion(mgmntServer.getIPAddress(),e);  }}  }
class C{  public AbstractWarCapabilityContainerTestCase(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private Map<AnnotationPair,AnnotationMirror> calculateGlbs(){  Map<AnnotationPair,AnnotationMirror> newglbs=new HashMap<AnnotationPair,AnnotationMirror>();  for (  AnnotationMirror a1 : supertypesGraph.keySet()) {    for (    AnnotationMirror a2 : supertypesGraph.keySet()) {      if (AnnotationUtils.areSameIgnoringValues(a1,a2)) {        continue;      }      if (!AnnotationUtils.areSame(getTopAnnotation(a1),getTopAnnotation(a2))) {        continue;      }      AnnotationPair pair=new AnnotationPair(a1,a2);      if (newglbs.containsKey(pair)) {        continue;      }      AnnotationMirror glb=findGlb(a1,a2);      newglbs.put(pair,glb);    }  }  return newglbs;}  }
class C{  public BorderArrangement(){}  }
class C{  @Override public void releaseSemaphoreReference(final ImageToProcess img,Executor executor){synchronized (mImageSemaphoreMap) {    ImageReleaseProtocol protocol=mImageSemaphoreMap.get(img);    if (protocol == null || protocol.getCount() <= 0) {      throw new RuntimeException("ERROR: Task implementation did NOT balance its release.");    }    protocol.addCount(-1);    mOutstandingImageRefs--;    logWrapper("Ref release.  Total refs = " + mOutstandingImageRefs);    if (protocol.getCount() == 0) {      mImageSemaphoreMap.remove(img);      if (protocol.closeOnRelease) {        closeImageExecutorSafe(img,executor);        logWrapper("Ref release close.");      }      if (protocol.blockUntilRelease) {        protocol.signal();      }    } else {      mImageSemaphoreMap.put(img,protocol);    }  }}  }
class C{  @Override public void accept(final Visitor v){  throw new UnsupportedOperationException();}  }
class C{  private static Date parseTimestamp(String value){  final long parsed;  parsed=Long.parseLong(value.trim());  return new Date(parsed * 1000);}  }
class C{  static void registerMonitoredApplicationTwo(DirectSubmitter<Topology,Job> submitter){  ApplicationService appService=submitter.getServices().getService(ApplicationService.class);  appService.registerTopology(MONITORED_APP_NAME_2,null);}  }
class C{  @Override public String word(){  return loremWords.get(new Random().nextInt(loremWords.size()));}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  private void convertAndAddRoutesToPlans(){  int maxNumberOfPlans=Integer.MIN_VALUE;  for (  DgCommodity com : this.btuComsWithRoutes.getCommodities().values()) {    Id<Link> matsimStartLinkId=createMatsimLink(com.getSourceNodeId(),com.getId(),true);    Id<Link> matsimEndLinkId=createMatsimLink(com.getDrainNodeId(),com.getId(),false);    List<Leg> legs=convertPathsToLegs(com,matsimStartLinkId,matsimEndLinkId);    if (legs.size() > maxNumberOfPlans)     maxNumberOfPlans=legs.size();    int roundedFlow=(int)Math.round(com.getFlow());    for (int i=0; i < roundedFlow; i++) {      Person correspondingPerson=getCorrespondingMatsimAgent(matsimStartLinkId,matsimEndLinkId);      correspondingPerson.getPlans().clear();      for (      Leg leg : legs) {        Plan plan=this.population.getFactory().createPlan();        Activity start=this.population.getFactory().createActivityFromLinkId("dummy",matsimStartLinkId);        start.setEndTime(this.currentDepartureTime);        plan.addActivity(start);        plan.addLeg(leg);        Activity end=this.population.getFactory().createActivityFromLinkId("dummy",matsimEndLinkId);        plan.addActivity(end);        correspondingPerson.addPlan(plan);      }      this.popWithRoutes.addPerson(correspondingPerson);    }  }  log.info("The maximal number of plans per agent is " + maxNumberOfPlans);  if (!this.population.getPersons().isEmpty()) {    throw new RuntimeException("There are " + this.population.getPersons().size() + " persons left with no route.");  }}  }
class C{  private ContentValues unpackFavorite(byte[] buffer,int dataSize) throws IOException {  Favorite favorite=unpackProto(new Favorite(),buffer,dataSize);  if (favorite.container == Favorites.CONTAINER_HOTSEAT) {    favorite.screen+=mHotseatShift;  }  ContentValues values=new ContentValues();  values.put(Favorites._ID,favorite.id);  values.put(Favorites.SCREEN,favorite.screen);  values.put(Favorites.CONTAINER,favorite.container);  values.put(Favorites.CELLX,favorite.cellX);  values.put(Favorites.CELLY,favorite.cellY);  values.put(Favorites.SPANX,favorite.spanX);  values.put(Favorites.SPANY,favorite.spanY);  if (favorite.itemType == Favorites.ITEM_TYPE_SHORTCUT) {    values.put(Favorites.ICON_TYPE,favorite.iconType);    if (favorite.iconType == Favorites.ICON_TYPE_RESOURCE) {      values.put(Favorites.ICON_PACKAGE,favorite.iconPackage);      values.put(Favorites.ICON_RESOURCE,favorite.iconResource);    }    values.put(Favorites.ICON,favorite.icon);  }  if (!TextUtils.isEmpty(favorite.title)) {    values.put(Favorites.TITLE,favorite.title);  } else {    values.put(Favorites.TITLE,"");  }  if (!TextUtils.isEmpty(favorite.intent)) {    values.put(Favorites.INTENT,favorite.intent);  }  values.put(Favorites.ITEM_TYPE,favorite.itemType);  UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  long userSerialNumber=UserManagerCompat.getInstance(mContext).getSerialNumberForUser(myUserHandle);  values.put(LauncherSettings.Favorites.PROFILE_ID,userSerialNumber);  if (favorite.itemType == Favorites.ITEM_TYPE_APPWIDGET) {    if (!TextUtils.isEmpty(favorite.appWidgetProvider)) {      values.put(Favorites.APPWIDGET_PROVIDER,favorite.appWidgetProvider);    }    values.put(Favorites.APPWIDGET_ID,favorite.appWidgetId);    values.put(LauncherSettings.Favorites.RESTORED,LauncherAppWidgetInfo.FLAG_ID_NOT_VALID | LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY | LauncherAppWidgetInfo.FLAG_UI_NOT_READY);    restoreSuccessful=false;  } else {    restoreSuccessful=false;  }  return values;}  }
class C{  public Entry(char[] ch,int offset,int length,Entry next){  characters=new char[length];  System.arraycopy(ch,offset,characters,0,length);  symbol=new String(characters).intern();  this.next=next;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementretrieveattrvalue.class,args);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSetMultimap<K,V> of(){  return (ImmutableSetMultimap<K,V>)EmptyImmutableSetMultimap.INSTANCE;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public boolean handleItemSelected(MenuItem item,Context context){  return false;}  }
class C{  public boolean isValid(){  return true;}  }
class C{  public static int intersectLineRectangle(Line2D l,Rectangle2D r,Point2D[] pts){  double a1x=l.getX1(), a1y=l.getY1();  double a2x=l.getX2(), a2y=l.getY2();  double mxx=r.getMaxX(), mxy=r.getMaxY();  double mnx=r.getMinX(), mny=r.getMinY();  if (pts[0] == null)   pts[0]=new Point2D.Double();  if (pts[1] == null)   pts[1]=new Point2D.Double();  int i=0;  if (intersectLineLine(mnx,mny,mxx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (intersectLineLine(mxx,mny,mxx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mxx,mxy,mnx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mnx,mxy,mnx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  return i;}  }
class C{  public static boolean considerHeapSize(){  Extent oldSize=currentHeapSize;  Extent reserved=Plan.reservedMemory();  double liveRatio=reserved.toLong() / ((double)currentHeapSize.toLong());  double ratio=computeHeapChangeRatio(liveRatio);  Extent newSize=Word.fromIntSignExtend((int)(ratio * (oldSize.toLong() >> LOG_BYTES_IN_MBYTE))).lsh(LOG_BYTES_IN_MBYTE).toExtent();  if (newSize.LT(reserved))   newSize=reserved;  newSize=newSize.plus(BYTES_IN_MBYTE - 1).toWord().rshl(LOG_BYTES_IN_MBYTE).lsh(LOG_BYTES_IN_MBYTE).toExtent();  if (newSize.GT(maxHeapSize))   newSize=maxHeapSize;  if (newSize.NE(oldSize) && newSize.GT(Extent.zero())) {    currentHeapSize=newSize;    if (Options.verbose.getValue() >= 2) {      Log.write("GC Message: Heap changed from ");      Log.writeDec(oldSize.toWord().rshl(LOG_BYTES_IN_KBYTE));      Log.write("KB to ");      Log.writeDec(newSize.toWord().rshl(LOG_BYTES_IN_KBYTE));      Log.writeln("KB");    }    VM.events.heapSizeChanged(currentHeapSize);    return true;  } else {    return false;  }}  }
class C{  public void testHyphenationOnly() throws Exception {  Reader reader=new StringReader("basketballkurv");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("HyphenationCompoundWord","hyphenator","da_UTF8.xml","minSubwordSize","2","maxSubwordSize","4").create(stream);  assertTokenStreamContents(stream,new String[]{"basketballkurv","ba","sket","bal","ball","kurv"});}  }
class C{  public static String stemToken(final String token){  String result=cache.get(token);  if (result == null) {    if (whitespace.matcher(token).find()) {      throw new IllegalArgumentException("Token may not contain a space: " + token);    }    result=morpha(cleanText(token),false);synchronized (cache) {      cache.put(token,result);    }  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static long lookup3ycs64(CharSequence s,int start,int end,long initval){  int a, b, c;  a=b=c=0xdeadbeef + (int)initval;  c+=(int)(initval >>> 32);  int i=start;  boolean mixed=true;  for (; ; ) {    if (i >= end)     break;    mixed=false;    char ch;    ch=s.charAt(i++);    a+=Character.isHighSurrogate(ch) && i < end ? Character.toCodePoint(ch,s.charAt(i++)) : ch;    if (i >= end)     break;    ch=s.charAt(i++);    b+=Character.isHighSurrogate(ch) && i < end ? Character.toCodePoint(ch,s.charAt(i++)) : ch;    if (i >= end)     break;    ch=s.charAt(i++);    c+=Character.isHighSurrogate(ch) && i < end ? Character.toCodePoint(ch,s.charAt(i++)) : ch;    if (i >= end)     break;{      a-=c;      a^=(c << 4) | (c >>> -4);      c+=b;      b-=a;      b^=(a << 6) | (a >>> -6);      a+=c;      c-=b;      c^=(b << 8) | (b >>> -8);      b+=a;      a-=c;      a^=(c << 16) | (c >>> -16);      c+=b;      b-=a;      b^=(a << 19) | (a >>> -19);      a+=c;      c-=b;      c^=(b << 4) | (b >>> -4);      b+=a;    }    mixed=true;  }  if (!mixed) {    c^=b;    c-=(b << 14) | (b >>> -14);    a^=c;    a-=(c << 11) | (c >>> -11);    b^=a;    b-=(a << 25) | (a >>> -25);    c^=b;    c-=(b << 16) | (b >>> -16);    a^=c;    a-=(c << 4) | (c >>> -4);    b^=a;    b-=(a << 14) | (a >>> -14);    c^=b;    c-=(b << 24) | (b >>> -24);  }  return c + (((long)b) << 32);}  }
class C{  public int append(final boolean lhs,final boolean rhs,final String fieldName){  int comparison=0;  if (lhs == rhs) {    comparison=1;  }  if (lhs == false) {    comparison=-1;  } else {    comparison=+1;  }  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  public void refreshDistance(Player player){  Location previousLocation=playerLocations.get(player);  if (previousLocation == null || !previousLocation.getWorld().getName().equals(player.getWorld().getName())) {    playerLocations.put(player,player.getLocation());    return;  }  if (plugin.isRestrictCreative() && player.getGameMode() == GameMode.CREATIVE || plugin.isInExludedWorld(player))   return;  int difference=getDistanceDifference(player,previousLocation);  if (difference == 0)   return;  boolean updateLocation=true;  if (player.isInsideVehicle()) {    if (player.getVehicle() instanceof Horse && player.hasPermission("achievement.count.distancehorse") && !plugin.getDisabledCategorySet().contains("DistanceHorse")) {      updateLocation=updateDistanceAndCheckAchievements(difference,player,distancesHorse,"DistanceHorse",horseAchievementsCache);    } else     if (player.getVehicle() instanceof Pig && player.hasPermission("achievement.count.distancepig") && !plugin.getDisabledCategorySet().contains("DistancePig")) {      updateLocation=updateDistanceAndCheckAchievements(difference,player,distancesPig,"DistancePig",pigAchievementsCache);    } else     if (player.getVehicle() instanceof Minecart && player.hasPermission("achievement.count.distanceminecart") && !plugin.getDisabledCategorySet().contains("DistanceMinecart")) {      updateLocation=updateDistanceAndCheckAchievements(difference,player,distancesMinecart,"DistanceMinecart",minecartAchievementsCache);    } else     if (player.getVehicle() instanceof Boat && player.hasPermission("achievement.count.distanceboat") && !plugin.getDisabledCategorySet().contains("DistanceBoat")) {      updateLocation=updateDistanceAndCheckAchievements(difference,player,distancesBoat,"DistanceBoat",boatAchievementsCache);    }  } else   if (player.hasPermission("achievement.count.distancefoot") && !player.isFlying() && (version < 9 || !player.isGliding())&& !plugin.getDisabledCategorySet().contains("DistanceFoot")) {    updateLocation=updateDistanceAndCheckAchievements(difference,player,distancesFoot,"DistanceFoot",footAchievementsCache);  } else   if (player.hasPermission("achievement.count.distancegliding") && version >= 9 && player.isGliding() && !plugin.getDisabledCategorySet().contains("DistanceGliding")) {    updateLocation=updateDistanceAndCheckAchievements(difference,player,distancesGliding,"DistanceGliding",glidingAchievementsCache);  }  if (updateLocation)   playerLocations.put(player,player.getLocation());}  }
class C{  public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  public AbstractProblem(int numberOfVariables,int numberOfObjectives,int numberOfConstraints){  super();  this.numberOfVariables=numberOfVariables;  this.numberOfObjectives=numberOfObjectives;  this.numberOfConstraints=numberOfConstraints;}  }
class C{  private Segment loadMappedSegment(long segmentId,long segmentVersion){  File file=SegmentFile.createSegmentFile(name,storage.directory(),segmentId,segmentVersion);  Buffer buffer=MappedBuffer.allocate(file,Math.min(DEFAULT_BUFFER_SIZE,storage.maxSegmentSize()),Integer.MAX_VALUE);  SegmentDescriptor descriptor=new SegmentDescriptor(buffer);  Segment segment=new Segment(new SegmentFile(file),buffer.position(SegmentDescriptor.BYTES).slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);  LOGGER.debug("Loaded mapped segment: {} ({})",descriptor.id(),file.getName());  return segment;}  }
class C{  <T>void checkEqual(String label,T expect,T found){  if (!expect.equals(found))   error("Unexpected value for " + label + ": "+ found+ "; expected: "+ expect);}  }
class C{  public String path() throws HttpException {  if (!this.uri.isAbsolute()) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("URI \"%s\" is not absolute",this.uri));  }  final String protocol=this.uri.getScheme();  if (!"https".equals(protocol) && !"http".equals(protocol)) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("protocol must be either HTTP or HTTPS at \"%s\"",this.uri));  }  if (this.uri.getHost() == null) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("URI \"%s\" doesn't have a host",this.uri));  }  final StringBuilder path=new StringBuilder(Tv.HUNDRED);  if (this.uri.getPath().isEmpty()) {    path.append('/');  } else {    path.append(this.uri.getPath());  }  if (this.uri.getQuery() != null) {    path.append('?').append(this.uri.getQuery());  }  if (this.uri.getFragment() != null) {    path.append('#').append(this.uri.getFragment());  }  return path.toString();}  }
class C{  public void fullCopyOperationComplete(List<URI> fullCopyVolumeURIs){  for (  URI fullCopyVolumeURI : fullCopyVolumeURIs) {    Volume fullCopyVolume=_dbClient.queryObject(Volume.class,fullCopyVolumeURI);    if (fullCopyVolume != null) {      Volume nativeFullCopyVolume=VPlexUtil.getVPLEXBackendVolume(fullCopyVolume,true,_dbClient,false);      if (nativeFullCopyVolume != null) {        String nativeFCReplicaState=nativeFullCopyVolume.getReplicaState();        if (ReplicationState.DETACHED.name().equals(nativeFCReplicaState)) {          ReplicationUtils.removeDetachedFullCopyFromSourceFullCopiesList(fullCopyVolume,_dbClient);          fullCopyVolume.setAssociatedSourceVolume(NullColumnValueGetter.getNullURI());          if (NullColumnValueGetter.isNotNullValue(fullCopyVolume.getFullCopySetName())) {            fullCopyVolume.setFullCopySetName(NullColumnValueGetter.getNullStr());          }        }        fullCopyVolume.setReplicaState(nativeFCReplicaState);        _dbClient.updateObject(fullCopyVolume);      } else {        _log.warn("Can't find native full copy volume");      }    } else {      _log.warn("Full copy volume {} is null",fullCopyVolumeURI);    }  }}  }
class C{  public static List<Locale> countriesByLanguage(final String languageCode){  if (languageCode == null) {    return Collections.emptyList();  }  List<Locale> countries=cCountriesByLanguage.get(languageCode);  if (countries == null) {    countries=new ArrayList<Locale>();    final List<Locale> locales=availableLocaleList();    for (int i=0; i < locales.size(); i++) {      final Locale locale=locales.get(i);      if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) {        countries.add(locale);      }    }    countries=Collections.unmodifiableList(countries);    cCountriesByLanguage.putIfAbsent(languageCode,countries);    countries=cCountriesByLanguage.get(languageCode);  }  return countries;}  }
class C{  public DrawerBuilder withDrawerWidthDp(int drawerWidthDp){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.mDrawerWidth=Utils.convertDpToPx(mActivity,drawerWidthDp);  return this;}  }
class C{  public CGlobalProgressDialog(){  super((Window)null,"Ongoing operations");  CIconInitializer.initializeWindowIcons(this);  setLayout(new BorderLayout());  final JPanel innerPanel=new JPanel(new BorderLayout());  final JPanel upperPanel=new JPanel(new BorderLayout());  upperPanel.add(m_progressPanel,BorderLayout.NORTH);  innerPanel.add(new JScrollPane(upperPanel));  add(innerPanel);  final JPanel lowerPanel=new JPanel(new BorderLayout());  lowerPanel.add(new JButton(new CHideAction()),BorderLayout.EAST);  add(lowerPanel,BorderLayout.SOUTH);  setSize(400,300);  GuiHelper.centerOnScreen(this);  setDefaultCloseOperation(HIDE_ON_CLOSE);  for (  final IProgressOperation operation : CGlobalProgressManager.instance().getOperations()) {    add(operation);  }  setFocusable(false);  CGlobalProgressManager.instance().addListener(m_listener);}  }
class C{  public TheoryBuilder4(final Supplier<Strategy> state,final Source<A> as,Source<B> bs,Source<C> cs,Source<D> ds,Predicate4<A,B,C,D> assumptions){  this.state=state;  this.as=as;  this.bs=bs;  this.cs=cs;  this.ds=ds;  this.assumptions=assumptions;}  }
class C{  public static boolean checkDir(final File f){  return f.exists() && f.isDirectory();}  }
class C{  public final long zobristHash(){  return hashKey;}  }
class C{  protected void diagnoseLineNumber(Expression expr){  ElemTemplateElement e=getElemFromExpression(expr);  System.err.println("   " + e.getSystemId() + " Line "+ e.getLineNumber());}  }
class C{  @NotNull public WindowInfoImpl copy(){  try {    WindowInfoImpl info=(WindowInfoImpl)clone();    if (myFloatingBounds != null) {      info.myFloatingBounds=(Rectangle)myFloatingBounds.clone();    }    return info;  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e);  }}  }
class C{  public Groestl256(){  super();}  }
class C{  private void drawTriangle(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size - size / 2;  path[2]=x - size;  path[3]=y + size;  path[4]=x + size;  path[5]=path[3];  drawPath(canvas,path,paint,true);}  }
class C{  public long kstkeip(){  return Long.parseLong(fields[29]);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  protected String adjustFormattedCssWhitespace(String formattedCssBlock,IDocument originalDocument,TypedPosition partition,CssExtractor extractor){  return formattedCssBlock;}  }
class C{  public boolean forwardIfCurrentAndNoWordAfter(String str){  int c=pos;  if (forwardIfCurrent(str)) {    if (!isCurrentLetter() && !isCurrent('_'))     return true;  }  pos=c;  return false;}  }
class C{  public void testBulkRegister3(){  assertEquals(0,new Phaser().bulkRegister((1 << 16) - 1));  try {    new Phaser().bulkRegister(1 << 16);    shouldThrow();  } catch (  IllegalStateException success) {  }  try {    new Phaser(2).bulkRegister((1 << 16) - 2);    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  protected void send(Packet packet){  if (connection != null) {    connection.send(packet);  }}  }
class C{  public void addFormField(String name,String value){  writer.append("--" + boundary).append(LINE_FEED);  writer.append("Content-Disposition: form-data; name=\"" + name + "\"").append(LINE_FEED);  writer.append("Content-Type: text/plain; charset=" + charset).append(LINE_FEED);  writer.append(LINE_FEED);  writer.append(value).append(LINE_FEED);  writer.flush();}  }
class C{  public static void assertNotEquals(String message,BufferedImage image1,BufferedImage image2){  if (isEqual(image1,image2)) {    fail((String.valueOf(message) + " Image contents are identical.").trim());  }}  }
class C{  public DataTruncation(int index,boolean parameter,boolean read,int dataSize,int transferSize,Throwable cause){  super("Data truncation",read == true ? "01004" : "22001",cause);  this.index=index;  this.parameter=parameter;  this.read=read;  this.dataSize=dataSize;  this.transferSize=transferSize;}  }
class C{  @Override public State create(AppContext ctx,State newInstance){  if (newInstance.getCreationTime() == null) {    newInstance.setCreationTime(System.currentTimeMillis());  }  Persistent<? extends GenericPK> parent=newInstance.getParentObject(ServiceUtils.getInstance().getRootUserContext(ctx));  AccessRightsUtils.getInstance().setAccessRights(ctx,newInstance,parent);  return ds.create(ctx,newInstance);}  }
class C{  public int length(){  return count;}  }
class C{  public static String buildSelectorFromAttributeTypeAndValue(String attributeType,String attributeValue){  StringBuilder strb=new StringBuilder();  strb.append(OPEN_BRACKET);  strb.append(attributeType);  strb.append(EQUAL);  strb.append(attributeValue);  strb.append(CLOSE_BRACKET);  return strb.toString();}  }
class C{  public void moveToInsertRow() throws SQLException {  checkState();  rs.moveToInsertRow();}  }
class C{  public TurnoutOperation loadOne(Element e){  try {    Class<?> myOpClass=Class.forName("jmri.RawTurnoutOperation");    return super.loadOne(e,myOpClass.getConstructor(new Class[]{String.class,int.class,int.class}),RawTurnoutOperation.getDefaultIntervalStatic(),RawTurnoutOperation.getDefaultMaxTriesStatic());  } catch (  ClassNotFoundException e1) {    log.error("while creating NoFeedbackTurnoutOperation",e1);    return null;  }catch (  NoSuchMethodException e2) {    log.error("while creating NoFeedbackTurnoutOperation",e2);    return null;  }}  }
class C{  @Override protected void closeDialogOk(){  hopPropertiesPanel.commitChanges();  Hopfield hopfield=(Hopfield)hopPropertiesPanel.getGroup();  layoutPanel.commitChanges();  layoutPanel.getCurrentLayout().setInitialLocation(networkPanel.getWhereToAdd());  hopfield.getNeuronGroup().setLayout(layoutPanel.getCurrentLayout());  hopfield.getNeuronGroup().applyLayout();  networkPanel.getNetwork().addGroup(hopfield);  networkPanel.repaint();  super.closeDialogOk();}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  protected void writePrintln() throws IOException {  if (format.isNewlines()) {    writer.write(format.getLineSeparator());  }}  }
class C{  public synchronized boolean isAscending(){  return m_Model.isAscending();}  }
class C{  public NewHadoopRunWriter(Mapper<Text,VALUEIN,NewSplitEmittedTerm,MapEmittedPostingList>.Context context,String mapId,int splitId,int flushNo){  this.context=context;  this.mapId=mapId;  this.flushNo=flushNo;  this.splitId=splitId;  this.info="NewHadoopRunWriter(Map " + mapId + ", flush "+ flushNo+ ")";}  }
class C{  public static void generateErrorException(final String errCode,final Object[] errParams,final Logger logger,final Exception exception){  String msg=LdapMessages.formatMessage(LdapErrorCodes.BUNDLE,errCode,errParams);  if (exception != null) {    logger.error(msg,exception);    throw new LdapException(errCode,msg,exception);  } else {    logger.error(msg);    throw new LdapException(errCode,msg);  }}  }
class C{  public void futureCharResult(long futPtr,int res){  enter();  try {    PlatformCallbackUtils.futureCharResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  public static void main(String[] args){  String directory=DgPaths.REPOS + "shared-svn/projects/cottbus/data/optimization/cb2ks2010/" + "2015-02-25_minflow_50.0_morning_peak_speedFilter15.0_SP_tt_cBB50.0_sBB500.0/";  String btuRoutesFilename="routeComparison/paths.xml";  String networkFilename="network_small_simplified.xml.gz";  String populationFile="trip_plans_from_morning_peak_ks_commodities_minFlow50.0.xml";  String[] filenameAttributes=btuRoutesFilename.split("/");  String outputFilename=directory + "routeComparison/2015-03-10_sameEndTimes_ksOptTripPlans_" + filenameAttributes[filenameAttributes.length - 1];  new ConvertBTURoutes2Matsim().startConversion(directory,btuRoutesFilename,networkFilename,populationFile,outputFilename);}  }
class C{  @SuppressWarnings("serial") public void testBindingsClause(){  final LinkedHashSet<IVariable<?>> declaredVars=new LinkedHashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));    }  };  final List<IBindingSet> bindingSets=new ArrayList<IBindingSet>(){{      add(new ListBindingSet(){{          set(Var.var("x"),new Constant<>(TermId.mockIV(VTE.URI)));          set(Var.var("y"),new Constant<>(TermId.mockIV(VTE.URI)));        }      });    }  };  final BindingsClause bc=new BindingsClause(declaredVars,bindingSets);  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(new HashSet<IVariable<?>>(),bc.getRequiredBound(sa));  assertEquals(new HashSet<IVariable<?>>(),bc.getDesiredBound(sa));}  }
class C{  @Override public void onMessage(Message message){  System.out.println("____________onmessage " + message);  try {synchronized (lock) {      testConsumer=consumerSession.createConsumer(topic);      consumerSession.createProducer(topic);      lock.notify();    }  } catch (  Exception ex) {    ex.printStackTrace();    assertTrue(false);  }}  }
class C{  public LogFileTailer(File file,long sampleInterval,boolean startAtBeginning){  this.logfile=file;  this.sampleInterval=sampleInterval;}  }
class C{  public static double[] toDoubleArray(float[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(double)array[i];  }  return result;}  }
class C{  public T caseIdentifierRef_IM(IdentifierRef_IM object){  return null;}  }
class C{  protected static void remoteCreateService(String name){  DistributedLockService newService=DistributedLockService.create(name,system);  logInfo("Created " + newService);}  }
class C{  public static DeleteInstanceE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteInstanceE object=new DeleteInstanceE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","deleteInstance").equals(reader.getName())) {          object.setDeleteInstance(org.oscm.xsd.DeleteInstance.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void updateIPEndPointDetails(Map<String,Object> keyMap,StoragePort port,CIMInstance ipPointInstance,String portInstanceID) throws IOException {  if (null != port) {    updateIPAddress(getCIMPropertyValue(ipPointInstance,IPv4Address),port);    _dbClient.persistObject(port);  }}  }
class C{  FilterDocValuesProducer(DocValuesProducer in){  this.in=in;}  }
class C{  private void updateClusterSystem(ObjectName mbeanName) throws IOException {  try {    if (!this.isAddedNotiListner) {      this.mbs.addNotificationListener(mbeanName,this,null,new Object());      this.isAddedNotiListner=true;    }    if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController.getPulseProductSupport())) {      cluster.setServerCount(0);      cluster.setTotalRegionCount(0);    } else {      String[] serverCnt=(String[])(this.mbs.invoke(mbeanName,PulseConstants.MBEAN_OPERATION_LISTSERVERS,null,null));      cluster.setServerCount(serverCnt.length);    }    TabularData table=(TabularData)(this.mbs.invoke(mbeanName,PulseConstants.MBEAN_OPERATION_VIEWREMOTECLUSTERSTATUS,null,null));    Collection<CompositeData> rows=(Collection<CompositeData>)table.values();    cluster.getWanInformationObject().clear();    for (    CompositeData row : rows) {      final Object key=row.get("key");      final Object value=row.get("value");      cluster.getWanInformationObject().put((String)key,(Boolean)value);    }    AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.CLUSTER_MBEAN_ATTRIBUTES);    for (int i=0; i < attributeList.size(); i++) {      Attribute attribute=(Attribute)attributeList.get(i);      String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:        cluster.setMemberCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));      break;case PulseConstants.MBEAN_ATTRIBUTE_NUMCLIENTS:    cluster.setClientConnectionCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));  break;case PulseConstants.MBEAN_ATTRIBUTE_DISTRIBUTEDSYSTEMID:cluster.setClusterId(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_LOCATORCOUNT:cluster.setLocatorCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NUMRUNNIGFUNCTION:try {cluster.setRunningFunctionCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));} catch (Exception e) {cluster.setRunningFunctionCount(0);continue;}break;case PulseConstants.MBEAN_ATTRIBUTE_REGISTEREDCQCOUNT:cluster.setRegisteredCQCount(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NUMSUBSCRIPTIONS:cluster.setSubscriptionCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NUMTXNCOMMITTED:cluster.setTxnCommittedCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NUMTXNROLLBACK:cluster.setTxnRollbackCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALHEAPSIZE:cluster.setTotalHeapSize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_USEDHEAPSIZE:try {cluster.setUsedHeapSize(getLongAttribute(attribute.getValue(),attribute.getName()));} catch (Exception e) {cluster.setUsedHeapSize((long)0);continue;}cluster.getMemoryUsageTrend().add(cluster.getUsedHeapSize());break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONENTRYCOUNT:cluster.setTotalRegionEntryCount(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_CURRENTENTRYCOUNT:cluster.setCurrentQueryCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALDISKUSAGE:try {cluster.setTotalBytesOnDisk(getLongAttribute(attribute.getValue(),attribute.getName()));} catch (Exception e) {cluster.setTotalBytesOnDisk((long)0);continue;}cluster.getTotalBytesOnDiskTrend().add(cluster.getTotalBytesOnDisk());break;case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:cluster.setDiskWritesRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));cluster.getThroughoutWritesTrend().add(cluster.getDiskWritesRate());break;case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEWRITES:try {cluster.setWritePerSec(getDoubleAttribute(attribute.getValue(),attribute.getName()));} catch (Exception e) {cluster.setWritePerSec(0);continue;}cluster.getWritePerSecTrend().add(cluster.getWritePerSec());break;case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEREADS:try {cluster.setReadPerSec(getDoubleAttribute(attribute.getValue(),attribute.getName()));} catch (Exception e) {cluster.setReadPerSec(0);continue;}cluster.getReadPerSecTrend().add(cluster.getReadPerSec());break;case PulseConstants.MBEAN_ATTRIBUTE_QUERYREQUESTRATE:cluster.setQueriesPerSec(getDoubleAttribute(attribute.getValue(),attribute.getName()));cluster.getQueriesPerSecTrend().add(cluster.getQueriesPerSec());break;case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:cluster.setDiskReadsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));cluster.getThroughoutReadsTrend().add(cluster.getDiskReadsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_JVMPAUSES:long trendVal=determineCurrentJVMPauses(PulseConstants.JVM_PAUSES_TYPE_CLUSTER,"",getLongAttribute(attribute.getValue(),attribute.getName()));cluster.setGarbageCollectionCount(trendVal);cluster.getGarbageCollectionTrend().add(cluster.getGarbageCollectionCount());break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONCOUNT:if (!PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController.getPulseProductSupport())) {cluster.setTotalRegionCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));}break;}}if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController.getPulseProductSupport())) {try {ObjectName sfMemberMbeansObjectName=new ObjectName(PulseConstants.OBJECT_NAME_SF_CLUSTER);Set<ObjectName> sfCluserMBeans=this.mbs.queryNames(sfMemberMbeansObjectName,null);for (ObjectName sfCluserMBean : sfCluserMBeans) {AttributeList attrList=this.mbs.getAttributes(sfCluserMBean,PulseConstants.SF_CLUSTER_MBEAN_ATTRIBUTES);for (int i=0; i < attrList.size(); i++) {Attribute attribute=(Attribute)attrList.get(i);if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_PROCEDURECALLSINPROGRESS)) {try {cluster.setRunningFunctionCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));} catch (Exception e) {cluster.setRunningFunctionCount(0);continue;}} else if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_NETWORKSERVERCLIENTCONNECTIONSTATS)) {CompositeData nscConnStats=(CompositeData)attribute.getValue();cluster.setClientConnectionCount(getLongAttribute(nscConnStats.get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE),PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE));}}break;}} catch (MalformedObjectNameException e) {LOGGER.warning(e);}catch (NullPointerException e) {LOGGER.warning(e);}}} catch (InstanceNotFoundException infe) {LOGGER.warning(infe);}catch (ReflectionException re) {LOGGER.warning(re);}catch (MBeanException anfe) {LOGGER.warning(anfe);}}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:00.764 -0500",hash_original_method="AB8CC8AEC36CC88806001A57825CD492",hash_generated_method="BC051192CB190142B14BAD493C862225") public WordIterator(){  this(Locale.getDefault());}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public static double[] toPrimitiveDoubleArray(List<? extends Number> array){  return toPrimitiveDoubleArray(array,NUMBERLISTADAPTER);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SINGLETON___SINGLETON_1:    return singleton_1 != SINGLETON_1_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    String[] srv=((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsDirListing(f.toString());    java.io.File[] rv=new java.io.File[(srv == null) ? 0 : srv.length];    for (int i=0; i < rv.length; i++)     rv[i]=new java.io.File(srv[i]);    return rv;  } else   return f == null ? null : f.listFiles();}  }
class C{  private void simulateMethodHandle(final InvokeDynamicInstruction instruction){  final List<Element> arguments=IntStream.range(0,instruction.getDynamicIdentifier().getParameters()).mapToObj(null).collect(Collectors.toList());  Collections.reverse(arguments);  if (!instruction.getDynamicIdentifier().isStaticMethod())   arguments.remove(0);  runtimeStack.push(new MethodHandle(instruction.getDynamicIdentifier().getReturnType(),instruction.getIdentifier(),arguments));}  }
class C{  private void trackFPS(){  long nowTime=System.currentTimeMillis();  if (mFpsStartTime < 0) {    mFpsStartTime=mFpsPrevTime=nowTime;    mFpsNumFrames=0;  } else {    ++mFpsNumFrames;    String thisHash=Integer.toHexString(System.identityHashCode(this));    long frameTime=nowTime - mFpsPrevTime;    long totalTime=nowTime - mFpsStartTime;    Log.v(TAG,"0x" + thisHash + "\tFrame time:\t"+ frameTime);    mFpsPrevTime=nowTime;    if (totalTime > 1000) {      float fps=(float)mFpsNumFrames * 1000 / totalTime;      Log.v(TAG,"0x" + thisHash + "\tFPS:\t"+ fps);      mFpsStartTime=nowTime;      mFpsNumFrames=0;    }  }}  }
class C{  public static void addCrusherRecipe(ItemStack input,ItemStack output){  addRecipe(Recipe.CRUSHER,new CrusherRecipe(input,output));}  }
class C{  protected void log(String msg){  if (!isLoggingEnabled())   return;  System.out.println(msg);}  }
class C{  private void addPivotDoc(SolrServer client,Object... fields) throws IOException, SolrServerException {  indexDoc(client,params(),sdoc(fields));}  }
class C{  public RandomPolicyMax(){  super(Harness.options,"Random Policy Max","Maximum yield interval for the random scheduler policy",Integer.valueOf(System.getProperty("mmtk.harness.yieldpolicy.random.max","20")));}  }
class C{  public void forEachPhiInsn(PhiInsn.Visitor v){  for (  SsaBasicBlock block : blocks) {    block.forEachPhiInsn(v);  }}  }
class C{  private JScrollPane workbenchScroll(){  this.workbenchScroll=new JScrollPane(table);  this.workbenchScroll.setPreferredSize(new Dimension(500,500));  this.setLabel();  return workbenchScroll;}  }
class C{  private void cancelAppendTimer(){  if (appendTimer != null) {    LOGGER.debug("{} - Cancelling append timer",context.getCluster().member().address());    appendTimer.cancel();  }}  }
class C{  @Override public void load(Raster raster) throws IOException {  int stripHeight=Math.min(STRIP_ROWS,rasterLength);  int stripWidth=rasterWidth * samplesPerPixel;  int stripSize=stripWidth * stripHeight * bytesPerSample;  int numStrips=(int)Math.ceil((double)rasterLength / stripHeight);  if (stripSize > Integer.MAX_VALUE) {    throw new IllegalArgumentException("Cannot load PDS file with strip size > " + Integer.MAX_VALUE + ".");  }  if ((minimum == null) || (maximum == null)) {    computeMinMaxFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight);  }  loadFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight,raster,false);}  }
class C{  public void load(){}  }
class C{  public static String sendDhlRequest(String xmlString,Delegator delegator,String shipmentGatewayConfigId,String resource,Locale locale) throws DhlConnectException {  String conStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectUrl",resource,"shipment.dhl.connect.url");  if (conStr == null) {    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlConnectUrlIncomplete",locale));  }  if (xmlString == null) {    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlXmlCannotBeNull",locale));  }  conStr=conStr.trim();  String timeOutStr=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"connectTimeout",resource,"shipment.dhl.connect.timeout","60");  int timeout=60;  try {    timeout=Integer.parseInt(timeOutStr);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeOutStr + " using default "+ timeout);  }  if (Debug.verboseOn()) {    Debug.logVerbose("DHL Connect URL : " + conStr,module);    Debug.logVerbose("DHL XML String : " + xmlString,module);  }  HttpClient http=new HttpClient(conStr);  http.setTimeout(timeout * 1000);  String response=null;  try {    response=http.post(xmlString);  } catch (  HttpClientException e) {    Debug.logError(e,"Problem connecting with DHL server",module);    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlConnectUrlProblem",UtilMisc.toMap("errorString",e),locale),e);  }  if (response == null) {    throw new DhlConnectException(UtilProperties.getMessage(resourceError,"FacilityShipmentDhlReceivedNullResponse",locale));  }  if (Debug.verboseOn()) {    Debug.logVerbose("DHL Response : " + response,module);  }  return response;}  }
class C{  public void addFileset(FileSet set){  filesets.addElement(set);}  }
class C{  public DBInstanceInfo copy(){  DBInstanceInfo db=new DBInstanceInfo();  db.setDbType(this.dbType);  db.setDbGroupName(this.dbGroupName);  db.setHostName(this.hostName);  db.setPort(this.port);  db.setDatabaseName(this.databaseName);  db.setLocalHostName(this.localHostName);  db.setUseTunneling(this.useTunneling);  db.setLocalPort(this.localPort);  db.setUsername(this.username);  db.setPassword(this.password);  db.setInstance(this.instance);  db.setSnmpEnabled(this.snmpEnabled);  db.setMetricsEnabled(this.metricsEnabled);  db.setConnectionVerified(this.connectionVerified);  db.setAlertEnabled(this.alertEnabled);  return db;}  }
class C{  private void updateOrCreateVariable(Map variables,String name,TemplateVariableType type,int offset) throws TemplateException {  VariableDescription varDesc=(VariableDescription)variables.get(name);  if (varDesc == null) {    varDesc=new VariableDescription(name,type);    variables.put(name,varDesc);  } else {    varDesc.mergeType(type);  }  varDesc.fOffsets.add(new Integer(offset));}  }
class C{  public GBC weighty(double weight){  weighty=weight;  return this;}  }
class C{  public void onRenamingRequestReceivedSuccessfully(OneSheeldDevice device){}  }
class C{  public void sort(List<String> componentsOrder){  int targetIndex=index(componentsOrder,target);  for (  String dep : dependents) {    int depIndex=index(componentsOrder,dep);    if (depIndex > targetIndex) {      Collections.swap(componentsOrder,targetIndex,depIndex);    }  }}  }
class C{  private String makeDeleteAllUrl() throws UnsupportedEncodingException {  HttpSolrServer solrServer=(HttpSolrServer)getSolrServer();  String deleteQuery="<delete><query>*:*</query></delete>";  return solrServer.getBaseURL() + "/update?commit=true&stream.body=" + URLEncoder.encode(deleteQuery,"UTF-8");}  }
class C{  private boolean isStaticEnumField(VarSymbol v){  return Flags.isEnum(v.owner) && Flags.isStatic(v) && !Flags.isConstant(v)&& v.name != names._class;}  }
class C{  public DeviceAutomator pressMenu(){  mDevice.pressMenu();  return this;}  }
class C{  static RegisterOperand InsertGuardedUnary(Instruction s,IR ir,Operator operator,TypeReference type,Operand o1,Operand guard){  RegisterOperand t=ir.regpool.makeTemp(type);  s.insertBefore(GuardedUnary.create(operator,t,o1,guard));  return t.copyD2U();}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public Polygon(PolygonPoint p1,PolygonPoint p2,PolygonPoint p3){  p1._next=p2;  p2._next=p3;  p3._next=p1;  p1._previous=p3;  p2._previous=p1;  p3._previous=p2;  _points.add(p1);  _points.add(p2);  _points.add(p3);}  }
class C{  public int capacity(){  return buffer.length;}  }
class C{  public MColor(Properties ctx,int AD_Color_ID,String trxName){  super(ctx,AD_Color_ID,trxName);  if (AD_Color_ID == 0)   setName("-/-");}  }
class C{  public N4JSUiModule(AbstractUIPlugin plugin){  super(plugin);  N4jsUiLoggingInitializer.init();}  }
class C{  public static PropertyEditor findEditor(Class<?> targetType){  return ThreadGroupContext.getContext().getPropertyEditorFinder().find(targetType);}  }
class C{  public static String tryGetCanonicalPath(File file,String errorValue){  if (file == null)   return null;  try {    return file.getCanonicalPath();  } catch (  IOException ex) {    if (FotoLibGlobal.debugEnabled) {      logger.warn("Error tryGetCanonicalPath('" + file.getAbsolutePath() + "') => '"+ errorValue+ "' exception "+ ex.getMessage(),ex);    }    return errorValue;  }}  }
class C{  public static boolean blockContains(BlockNode block,InsnNode insn){  for (  InsnNode bi : block.getInstructions()) {    if (bi == insn) {      return true;    }  }  return false;}  }
class C{  public static boolean isNullOrEmpty(@Nullable Map map){  return isNull(map) || map.isEmpty();}  }
class C{  public Map<Integer,Double> compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  private void initTOMLayer(){  if (tomStackCreated) {    return;  }  if (!SVController.isInCurrentView()) {    throw new RuntimeException("I'm not an acceptor!");  }  MessageFactory messageFactory=new MessageFactory(id);  Acceptor acceptor=new Acceptor(cs,messageFactory,SVController);  cs.setAcceptor(acceptor);  Proposer proposer=new Proposer(cs,messageFactory,SVController);  ExecutionManager executionManager=new ExecutionManager(SVController,acceptor,proposer,id);  acceptor.setExecutionManager(executionManager);  tomLayer=new TOMLayer(executionManager,this,recoverer,acceptor,cs,SVController,verifier);  executionManager.setTOMLayer(tomLayer);  SVController.setTomLayer(tomLayer);  cs.setTOMLayer(tomLayer);  cs.setRequestReceiver(tomLayer);  acceptor.setTOMLayer(tomLayer);  if (SVController.getStaticConf().isShutdownHookEnabled()) {    Runtime.getRuntime().addShutdownHook(new ShutdownHookThread(tomLayer));  }  tomLayer.start();  tomStackCreated=true;  replicaCtx=new ReplicaContext(cs,SVController);}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void exit(){  client.exit();}  }
class C{  public static <T>void let(Var<T> var,UnsafeFunction<T> initFunction){  isValidContext("let");  contexts.get().current().addVarInitializer(var,initFunction);}  }
class C{  public StorageFile createStorageFileFromEntity(StorageFileEntity storageFileEntity){  StorageFile storageFile=new StorageFile();  storageFile.setFilePath(storageFileEntity.getPath());  storageFile.setFileSizeBytes(storageFileEntity.getFileSizeBytes());  storageFile.setRowCount(storageFileEntity.getRowCount());  return storageFile;}  }
class C{  public void execute(@NotNull Collection<VirtualFile> files){  execute(files,null);}  }
class C{  public static boolean contains(final float[] array,final float valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  public String toString(){  if (isSVG12AccessKey) {    return "accessKey(" + keyName + ")"+ (offset != 0 ? super.toString() : "");  }  return "accesskey(" + accesskey + ")"+ (offset != 0 ? super.toString() : "");}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public static Button createPushButton(Composite parent,String label,Image image,int fill){  Button button=new Button(parent,SWT.PUSH);  button.setFont(parent.getFont());  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData(fill);  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String doIt() throws Exception {  log.info("M_DistributionRun_ID=" + p_M_DistributionRun_ID + ", C_DocType_ID="+ p_C_DocType_ID+ ", DatePromised="+ p_DatePromised+ ", Test="+ p_IsTest);  if (p_M_DistributionRun_ID == 0)   throw new IllegalArgumentException("No Distribution Run ID");  m_run=new MDistributionRun(getCtx(),p_M_DistributionRun_ID,get_TrxName());  if (m_run.get_ID() == 0)   throw new Exception("Distribution Run not found -  M_DistributionRun_ID=" + p_M_DistributionRun_ID);  m_runLines=m_run.getLines(true);  if (m_runLines == null || m_runLines.length == 0)   throw new Exception("No active, non-zero Distribution Run Lines found");  if (p_C_DocType_ID == 0)   throw new IllegalArgumentException("No Document Type ID");  m_docType=new MDocType(getCtx(),p_C_DocType_ID,null);  if (m_docType.get_ID() == 0)   throw new Exception("Document Type not found -  C_DocType_ID=" + p_C_DocType_ID);  m_DateOrdered=new Timestamp(System.currentTimeMillis());  if (p_DatePromised == null)   p_DatePromised=m_DateOrdered;  if (m_docType.getDocBaseType().equals(MDocType.DOCBASETYPE_DistributionOrder) & p_M_Warehouse_ID > 0) {    if (p_BasedInDamnd) {      if (insertDetailsDistributionDemand() == 0)       throw new Exception("No Lines");    } else {      if (insertDetailsDistribution() == 0)       throw new Exception("No Lines");    }  } else {    if (insertDetails() == 0)     throw new Exception("No Lines");  }  m_details=MDistributionRunDetail.get(getCtx(),p_M_DistributionRun_ID,false,get_TrxName());  addAllocations();  int loops=0;  while (!isAllocationEqTotal()) {    adjustAllocation();    addAllocations();    if (++loops > 10)     throw new Exception("Loop detected - more than 10 Allocation attempts");  }  m_details=MDistributionRunDetail.get(getCtx(),p_M_DistributionRun_ID,true,get_TrxName());  if (m_docType.getDocBaseType().equals(MDocType.DOCBASETYPE_DistributionOrder)) {    distributionOrders();  } else {    createOrders();  }  return "@Created@ #" + m_counter;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.809 -0400",hash_original_method="E682935B1A0A2E688E0EDE52B81DA148",hash_generated_method="7A41EE5AA907CDB020EFC139D49BB6F2") public void addResponse(String response){  appendWithCrlf(mResponse,response);}  }
class C{  public final Enumeration<E> elements(int index){  return new WekaEnumeration<E>(this,index);}  }
class C{  public boolean isDirectory(){  int t=type();  return t == EVT_IGFS_DIR_CREATED || t == EVT_IGFS_DIR_RENAMED || t == EVT_IGFS_DIR_DELETED;}  }
class C{  public DANN(){  this(DEFAULT_KN,DEFAULT_K);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void put(double d) throws Exception {  if ((m_heap[0].index + 1) > (m_heap.length - 1)) {    throw new Exception("the number of elements cannot exceed the " + "initially set maximum limit");  }  m_heap[0].index++;  m_heap[m_heap[0].index]=new MyHeapElement(d);  upheap();}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int currentA=Integer.parseInt(argv[0]);    int maxA=currentA;    int currentB=Integer.parseInt(argv[1]);    int maxB=currentB;    for (int i=2; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      if (currentA > maxA) {        maxA=currentA;      }      if (currentB > maxB) {        maxB=currentB;      }    }    KDConditionalEstimator newEst=new KDConditionalEstimator(maxB + 1,1);    for (int i=0; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      System.out.println(newEst);      System.out.println("Prediction for " + currentA + '|'+ currentB+ " = "+ newEst.getProbability(currentA,currentB));      newEst.addValue(currentA,currentB,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public int size(){  return names.size();}  }
class C{  public void doStrategyParameters(final Tradestrategy tradestrategy){  try {    this.clearStatusBarMessage();    CodeType codeType=m_tradePersistentModel.findCodeTypeByNameType(tradestrategy.getStrategy().getName(),CodeType.StrategyParameters);    if (null == codeType) {      return;    } else {      Tradestrategy instance=m_tradePersistentModel.findTradestrategyById(tradestrategy);      CodeAttributePanel codeAttributePanel=new CodeAttributePanel(codeType,instance.getCodeValues());      if (null != codeAttributePanel) {        TextDialog dialog=new TextDialog(this.getFrame(),"Strategy Parms",true,codeAttributePanel);        dialog.setLocationRelativeTo(this);        dialog.setVisible(true);        if (!dialog.getCancel()) {          for (          CodeValue value : codeAttributePanel.getCodeValues()) {            if (null == value.getTradestrategy())             value.setTradestrategy(instance);            m_tradePersistentModel.persistAspect(value);          }        }      }    }  } catch (  Exception ex) {    setErrorMessage("Error getting Indicator properties.",ex.getMessage(),ex);  } finally {    this.getFrame().setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public static long[] coordinatesToHilbert(short[] coords,int bitsperdim,int offset){  final int numdim=coords.length;  final int numbits=numdim * bitsperdim;  final long[] output=BitsUtil.zero(numbits);  int rotation=0;  long[] refl=BitsUtil.zero(numdim);  for (int i=0; i < bitsperdim; i++) {    final long[] hist=interleaveBits(coords,i + offset);    final long[] bits=BitsUtil.copy(hist);    BitsUtil.xorI(bits,refl);    BitsUtil.cycleRightI(bits,rotation,numdim);    final int nextrot=(rotation + BitsUtil.numberOfTrailingZerosSigned(bits) + 2) % numdim;    BitsUtil.invgrayI(bits);    BitsUtil.orI(output,bits,numbits - (i + 1) * numdim);    refl=hist;    BitsUtil.flipI(refl,rotation);    if (!BitsUtil.get(bits,0)) {      BitsUtil.flipI(refl,(nextrot - 1 + numdim) % numdim);    }    rotation=nextrot;  }  return output;}  }
class C{  public Message(String message,int startPosition,int length){  if (message == null) {    throw new IllegalArgumentException();  }  if (startPosition < -1) {    throw new IllegalArgumentException();  }  this.message=message;  this.startPosition=startPosition;  if (length <= 0) {    this.length=0;  } else {    this.length=length;  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public AsyncResult SetPublishingModeAsync(RequestHeader RequestHeader,Boolean PublishingEnabled,UnsignedInteger... SubscriptionIds){  SetPublishingModeRequest req=new SetPublishingModeRequest(RequestHeader,PublishingEnabled,SubscriptionIds);  return channel.serviceRequestAsync(req);}  }
class C{  void init(TransformerFactoryImpl processor){  m_stylesheetProcessor=processor;  m_processors.push(m_schema.getElementProcessor());  this.pushNewNamespaceSupport();}  }
class C{  public final boolean removeStrategy(final PlanStrategy strategy,final String subpopulation){  return delegate.removeStrategy(strategy,subpopulation);}  }
class C{  protected Polynomial(){}  }
class C{  protected static Font createFont(SharedContext ctx,Font rootFont,float size,IdentValue weight,IdentValue style,IdentValue variant){  int fontConst=Font.PLAIN;  if (weight != null && (weight == IdentValue.BOLD || weight == IdentValue.FONT_WEIGHT_700 || weight == IdentValue.FONT_WEIGHT_800 || weight == IdentValue.FONT_WEIGHT_900)) {    fontConst=fontConst | Font.BOLD;  }  if (style != null && (style == IdentValue.ITALIC || style == IdentValue.OBLIQUE)) {    fontConst=fontConst | Font.ITALIC;  }  size*=ctx.getTextRenderer().getFontScale();  Font fnt=rootFont.deriveFont(fontConst,size);  if (variant != null) {    if (variant == IdentValue.SMALL_CAPS) {      fnt=fnt.deriveFont((float)(((float)fnt.getSize()) * 0.6));    }  }  return fnt;}  }
class C{  public void addHandler(WarningHandler handler){  _handlers.add(handler);}  }
class C{  public static String gsub(String olds,String news,String text){  if (olds == null || olds.length() == 0) {    return text;  }  if (text == null) {    return null;  }  int oldsIndex=text.indexOf(olds);  if (oldsIndex == -1) {    return text;  }  StringBuilder buf=new StringBuilder(text.length());  int prevIndex=0;  while (oldsIndex >= 0) {    buf.append(text.substring(prevIndex,oldsIndex));    buf.append(news);    prevIndex=oldsIndex + olds.length();    oldsIndex=text.indexOf(olds,prevIndex);  }  buf.append(text.substring(prevIndex));  return buf.toString();}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Usage: java javassist.tools.framedump <fully-qualified class name>");    return;  }  ClassPool pool=ClassPool.getDefault();  CtClass clazz=pool.get(args[0]);  System.out.println("Frame Dump of " + clazz.getName() + ":");  FramePrinter.print(clazz,System.out);}  }
class C{  public void testActiveJoinEvent() throws Throwable {  testJoinEvent(Member.Type.ACTIVE);}  }
class C{  public ScrollHandlerFX(String id){  super(id,false,false,false,false);  this.zoomFactor=0.1;}  }
class C{  public boolean hasCUISupport(){  return hasCUISupport;}  }
class C{  public static void compareProcessedResourceContents(final String inputResourceUri,final String expectedContentResourceUri,final ResourcePostProcessor processor) throws IOException {  final Reader resultReader=getReaderFromUri(inputResourceUri);  final Reader expectedReader=getReaderFromUri(expectedContentResourceUri);  compare(resultReader,expectedReader,processor);}  }
class C{  void updateExtensionButtons(){  for (  ExtensionButton button : subprocessExtensionButtons) {    int subprocessIndex=button.getSubprocessIndex();    int buttonSize=button.getWidth();    int gap=2 * ProcessDrawer.WALL_WIDTH;    if (subprocessIndex >= 0) {      Point location=ProcessDrawUtils.convertToAbsoluteProcessPoint(new Point(0,0),subprocessIndex,model);      int height=(int)model.getProcessHeight(model.getProcess(subprocessIndex));      int width=(int)model.getProcessWidth(model.getProcess(subprocessIndex));      button.setBounds(location.x + width - buttonSize - gap - (button.isAdd() ? 0 : buttonSize),location.y + height - gap - buttonSize,buttonSize,buttonSize);    } else {      Point location=ProcessDrawUtils.convertToAbsoluteProcessPoint(new Point(0,0),0,model);      int height=(int)model.getProcessHeight(model.getProcess(0));      button.setBounds(location.x + gap,location.y + height - gap - buttonSize,buttonSize,buttonSize);    }  }}  }
class C{  @Action(value="/reports/remittanceVoucherReport-criteria") public String criteria(){  List<User> usersList=persistenceService.findAllByNamedQuery(CollectionConstants.QUERY_REMITTANCEVOUCHER_CREATOR_LIST);  final User user=collectionsUtil.getLoggedInUser();  employeeService.getEmployeeById(user.getId());  populateBankAccountList();  addDropdownData("collectionServiceList",Collections.EMPTY_LIST);  addDropdownData("remittanceVoucherCreatorList",usersList);  setReportParam(EGOV_FROM_DATE,new Date());  setReportParam(EGOV_TO_DATE,new Date());  critParams.put(EGOV_FROM_DATE,new Date());  critParams.put(EGOV_TO_DATE,new Date());  return INDEX;}  }
class C{  public StrBuilder appendln(final boolean value){  return append(value).appendNewLine();}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public BasicHttpResponse(final StatusLine statusline){  this(statusline,null,null);}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(15,", Esquire");  childData=child.getData();  assertEquals("characterdataInsertDataEndAssert","Margaret Martin, Esquire",childData);}  }
class C{  @Override public boolean execute() throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeCall("execute");    }    checkClosedForWrite();    try {      boolean returnsResultSet;synchronized (conn.getSession()) {        closeOldResultSet();        try {          setExecutingStatement(command);          if (command.isQuery()) {            returnsResultSet=true;            boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;            boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;            ResultInterface result=command.executeQuery(maxRows,scrollable);            resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable);          } else {            returnsResultSet=false;            updateCount=command.executeUpdate();          }        }  finally {          setExecutingStatement(null);        }      }      return returnsResultSet;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static void restartBridge(boolean debug){  WXEnvironment.sDebugMode=debug;  WXSDKManager.getInstance().restartBridge();}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public static String systemAcceptLanguage(){  if (TextUtils.isEmpty(acceptLanguageInstance)) {    Locale locale=Locale.getDefault();    String language=locale.getLanguage();    String country=locale.getCountry();    StringBuilder acceptLanguageBuilder=new StringBuilder(language);    if (!TextUtils.isEmpty(country))     acceptLanguageBuilder.append('-').append(country).append(',').append(language);    acceptLanguageInstance=acceptLanguageBuilder.toString();  }  return acceptLanguageInstance;}  }
class C{  public Lucene70Codec(){  this(Mode.BEST_SPEED);}  }
class C{  @RequestMapping("/shutdown") public void shutdown(HttpServletRequest request,HttpServletResponse response) throws IOException {  boolean localRequest=false;  final String remoteIP=request.getRemoteAddr();  if ("0:0:0:0:0:0:0:1".equals(remoteIP) || "127.0.0.1".equals(remoteIP) || "0.0.0.0".equals(remoteIP)) {    localRequest=true;  }  if (!localRequest) {    Enumeration<NetworkInterface> e=NetworkInterface.getNetworkInterfaces();    networkInterfaces:     while (e.hasMoreElements()) {      NetworkInterface ni=e.nextElement();      Enumeration<InetAddress> e2=ni.getInetAddresses();      while (e2.hasMoreElements()) {        InetAddress localHost=e2.nextElement();        final String localIP=localHost.getHostAddress();        if (localIP.equals(remoteIP)) {          localRequest=true;          break networkInterfaces;        }      }    }  }  final PrintWriter writer=response.getWriter();  if (localRequest) {    matchService.shutdown();    writer.println("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n" + "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>Shut down BerkeleyDB</title></head>" + "<body><p>BerkeleyDB <b>shut down successfully</b></p></body></html>");  } else {    writer.println("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n" + "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>FAILED to shut down BerkeleyDB</title></head>" + "<body><p>BerkeleyDB <b>NOT</b> shut down.  You must shut down directly <b>from the server running this "+ "service</b>, using wget or curl.</p></body></html>");  }  writer.close();}  }
class C{  public void addFrictionForce(){  if (this.coefficientOfFriction > 0 || this.coefficientOfStaticFriction > 0) {    Double2D velocity=this.getVelocity();    double velLength=velocity.length();    if (velLength < zeroVelocity) {      Double2D externalForce=this.getForceAccumulator();      if (normalForce * this.getCoefficientOfStaticFriction() > externalForce.length())       this.addForce(new Double2D(-externalForce.x,-externalForce.y));    }    if (velLength > 0) {      Double2D velRot=new Double2D(-velocity.x,-velocity.y);      this.addForce(velRot.multiply(this.getCoefficientOfFriction() * normalForce));    }  }}  }
class C{  public boolean isCrossedAboveThreshold(){  return crossedAboveThreshold;}  }
class C{  private static void performSetCompressedSize(ZipEntry ze,long size){  final Object[] s={new Long(size)};  try {    setCompressedSizeMethod.invoke(ze,s);  } catch (  InvocationTargetException ite) {    Throwable nested=ite.getTargetException();    throw new SwcException.CouldNotSetZipSize(ze.getName(),nested.getMessage());  }catch (  Throwable other) {    throw new SwcException.CouldNotSetZipSize(ze.getName(),other.getMessage());  }}  }
class C{  private void initializeSelectdUserRole(){  for (  UserRole userRole : userRolesForNewUser) {    if (userRole.isSelected()) {      userRole.setSelected(false);    }  }}  }
class C{  @Override public void readFromNBT(NBTTagCompound nbt,EnumSet<MachineNBTCategory> categories){}  }
class C{  public Anonymous_constraintExpr_1_ createAnonymous_constraintExpr_1_(){  Anonymous_constraintExpr_1_Impl anonymous_constraintExpr_1_=new Anonymous_constraintExpr_1_Impl();  return anonymous_constraintExpr_1_;}  }
class C{  public Boolean shouldAllowBridgeAccess(String url){  return shouldAllowNavigation(url);}  }
class C{  public static void pullImage(String imageName,String imageVersion,long timeoutSecs){  try {    final CompletableFuture<Void> result=new CompletableFuture<>();    DockerClientFactory.build().pullImageCmd(imageName).withTag(imageVersion).exec(new FastFailPullImageResultCallback(result));    result.get(timeoutSecs,TimeUnit.SECONDS);  } catch (  TimeoutException e) {    throw new MinimesosException(String.format("# Timeout while pulling image from registry. Try executing the command below manually%ndocker pull %s:%s",imageName,imageVersion),e);  }catch (  ExecutionException e) {    throw new MinimesosException(String.format("# Error pulling image from registry. Try executing the command below manually%ndocker pull %s:%s",imageName,imageVersion),e);  }catch (  InterruptedException|RuntimeException e) {    throw new MinimesosException("Error pulling image or image not found in registry: " + imageName + ":"+ imageVersion,e);  }}  }
class C{  public boolean applyOptions() throws IOException {  boolean isDirty=isDirty();  if (!isDirty) {    return false;  }  ConnectionSettings.CUSTOM_NETWORK_INTERFACE.setValue(CUSTOM.isSelected());  Enumeration<AbstractButton> buttons=GROUP.getElements();  while (buttons.hasMoreElements()) {    AbstractButton bt=buttons.nextElement();    if (bt.isSelected()) {      InetAddress addr=(InetAddress)bt.getClientProperty(ADDRESS);      ConnectionSettings.CUSTOM_INETADRESS.setValue(addr.getHostAddress());    }  }  String iface="0.0.0.0";  if (ConnectionSettings.CUSTOM_NETWORK_INTERFACE.getValue()) {    iface=ConnectionSettings.CUSTOM_INETADRESS.getValue();  }  if (!ConnectionSettings.CUSTOM_NETWORK_INTERFACE.getValue()) {    iface="0.0.0.0";    ConnectionSettings.CUSTOM_INETADRESS.setValue(iface);  }  if (iface.equals("0.0.0.0")) {    iface="0.0.0.0:%1$d,[::]:%1$d";  } else {    iface=iface + ":%1$d";  }  int port0=0;  if (ConnectionSettings.MANUAL_PORT_RANGE.getValue()) {    port0=ConnectionSettings.PORT_RANGE_0.getValue();  }  String if_string=String.format(iface,port0);  BTEngine.getInstance().listenInterfaces(if_string);  return isDirty;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_SCOPE;}  }
class C{  public static int parseThreads(Integer threads){  return threads == null ? Environment.defaultThreads() : threads;}  }
class C{  public IntStream takeWhile(IntPredicate predicate){  requireNonNull(predicate);  if (predicate.test(element)) {    return this;  } else {    return empty();  }}  }
class C{  public RemoveDuplicatesTokenFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  private void run() throws IOException, ServiceException {  IssuesEntry issueInserted=client.insertIssue(makeNewIssue());  String issueId=client.getIssueId(issueInserted.getId());  System.out.println("Issue #" + issueId + " created");  addComment(issueId,makeUpdatingComment());  addComment(issueId,makePlainComment());  addComment(issueId,makeClosingComment());  System.out.println("-----------------------------------------------------");  System.out.println("Issue created and comments added:");  client.printIssueAndComments(issueInserted);}  }
class C{  private void finishMode() throws SAXException {}  }
class C{  private void preloadContext(ClassLoader classLoader) throws Exception {  contextClass=Class.forName("org.apache.catalina.Context",true,classLoader);  try {    contextDestroy=contextClass.getMethod("destroy",new Class[0]);  } catch (  NoSuchMethodException ignored) {  }  contextReload=contextClass.getMethod("reload",new Class[0]);  try {    contextSetAvailable=contextClass.getMethod("setAvailable",new Class[]{boolean.class});  } catch (  NoSuchMethodException e) {    contextStart=contextClass.getMethod("start",new Class[0]);    contextStop=contextClass.getMethod("stop",new Class[0]);  }  contextAddParameter=contextClass.getMethod("addParameter",new Class[]{String.class,String.class});}  }
class C{  @Override public String toString(){  if (m_eigenvalues == null) {    return "Principal components hasn't been built yet!";  } else {    return "\tPrincipal Components Attribute Transformer\n\n" + principalComponentsSummary();  }}  }
class C{  public static int javaVersion(int major,int minor,int micro){  return (major << 16) + (minor << 8) + micro;}  }
class C{  protected synchronized ProjHolder pop(){  ProjHolder proj=backStack.pop();  if (forwardStack == null) {    forwardStack=new Stack<ProjHolder>();  }  while (forwardStack.size() >= stackSize) {    forwardStack.removeElementAt(0);  }  forwardStack.push(proj);  return proj;}  }
class C{  private void drawNeedle(Canvas canvas,double angle,int centerX,int centerY,double radius,boolean arrow,Paint paint){  double diff=Math.toRadians(90);  int needleSinValue=(int)(NEEDLE_RADIUS * Math.sin(angle - diff));  int needleCosValue=(int)(NEEDLE_RADIUS * Math.cos(angle - diff));  int needleX=(int)(radius * Math.sin(angle));  int needleY=(int)(radius * Math.cos(angle));  int needleCenterX=centerX + needleX;  int needleCenterY=centerY + needleY;  float[] points;  if (arrow) {    int arrowBaseX=centerX + (int)(radius * 0.85 * Math.sin(angle));    int arrowBaseY=centerY + (int)(radius * 0.85 * Math.cos(angle));    points=new float[]{arrowBaseX - needleSinValue,arrowBaseY - needleCosValue,needleCenterX,needleCenterY,arrowBaseX + needleSinValue,arrowBaseY + needleCosValue};    float width=paint.getStrokeWidth();    paint.setStrokeWidth(5);    canvas.drawLine(centerX,centerY,needleCenterX,needleCenterY,paint);    paint.setStrokeWidth(width);  } else {    points=new float[]{centerX - needleSinValue,centerY - needleCosValue,needleCenterX,needleCenterY,centerX + needleSinValue,centerY + needleCosValue};  }  drawPath(canvas,points,paint,true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.284 -0500",hash_original_method="F1AF23545DF8C9E4F21CC9D8D7EE161E",hash_generated_method="5E9D8CBCBFA5C7025C23AC3E711CF9B2") public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<K,V>[] segments=this.segments;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      int c=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;      if (segments[i].containsValue(value))       return true;    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        int c=segments[i].count;        if (mc[i] != segments[i].modCount) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep)     return false;  }  for (int i=0; i < segments.length; ++i)   segments[i].lock();  boolean found=false;  try {    for (int i=0; i < segments.length; ++i) {      if (segments[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  return found;}  }
class C{  public final void configureSpliceTo(HlsExtractorWrapper nextExtractor){  Assertions.checkState(isPrepared());  if (spliceConfigured || !nextExtractor.shouldSpliceIn || !nextExtractor.isPrepared()) {    return;  }  boolean spliceConfigured=true;  int trackCount=getTrackCount();  for (int i=0; i < trackCount; i++) {    DefaultTrackOutput currentSampleQueue=sampleQueues.valueAt(i);    DefaultTrackOutput nextSampleQueue=nextExtractor.sampleQueues.valueAt(i);    spliceConfigured&=currentSampleQueue.configureSpliceTo(nextSampleQueue);  }  this.spliceConfigured=spliceConfigured;  return;}  }
class C{  public RTextArea(int textMode){  init(textMode);}  }
class C{  public static IOException convertToIOException(Throwable e){  if (e instanceof IOException) {    return (IOException)e;  }  if (e instanceof JdbcSQLException) {    JdbcSQLException e2=(JdbcSQLException)e;    if (e2.getOriginalCause() != null) {      e=e2.getOriginalCause();    }  }  return new IOException(e.toString(),e);}  }
class C{  void checkShadowed(CompoundScope cs,Filter<Symbol> sf){  for (  Map.Entry<Name,List<Symbol>> shadowedEntry : shadowedMap.entrySet()) {    int count=0;    List<Symbol> shadowed=sf == null ? shadowedEntry.getValue() : filter(shadowedEntry.getValue(),sf);    int expectedCount=shadowed.length();    Name name=shadowedEntry.getKey();    for (    Symbol s : sf == null ? cs.getElementsByName(name) : cs.getElementsByName(name,sf)) {      checkSameSymbols(s,shadowed.head);      shadowed=shadowed.tail;      count++;    }    if (count != expectedCount) {      error("CompoundScope.lookup() did not returned enough symbols for name " + name);    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return FULL_NAME;case 2:  return GENDER;case 3:return LOCATION;default :return null;}}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK) {    m_script=editor.getTextEditor().getText();    dispose();  } else   if (e.getSource() == bCancel) {    m_script=m_origScript;    dispose();  } else   if (e.getSource() == bProcess)   actionProcess(); else   if (e.getSource() == bHelp) {    Help h=new Help(this,Msg.getMsg(Env.getCtx(),"ScriptHelp"),getClass().getResource("Script.html"));    h.setVisible(true);  }}  }
class C{  public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);  if (rootCause != null) {    pw.println("With Root Cause:");    rootCause.printStackTrace(pw);  }}  }
class C{  float layerSize(int p_76490_1_){  if ((float)p_76490_1_ < (float)this.heightLimit * 0.3F) {    return -1.0F;  } else {    float f=(float)this.heightLimit / 2.0F;    float f1=f - (float)p_76490_1_;    float f2=MathHelper.sqrt_float(f * f - f1 * f1);    if (f1 == 0.0F) {      f2=f;    } else     if (Math.abs(f1) >= f) {      return 0.0F;    }    return f2 * 0.5F;  }}  }
class C{  public MicroPipelineInstantiationResponse updatePipeline(final MicroPipelineConfiguration pipelineConfiguration) throws IOException, RemoteClientConnectionFailedException {  MicroPipelineValidationResult cfgValidationResult=this.pipelineConfigurationValidator.validate(pipelineConfiguration);  if (cfgValidationResult != MicroPipelineValidationResult.OK)   return new MicroPipelineInstantiationResponse("",cfgValidationResult,"Failed to validate pipeline configuration");  if (StringUtils.isBlank(pipelineConfiguration.getId()))   return new MicroPipelineInstantiationResponse("",MicroPipelineValidationResult.MISSING_PIPELINE_ID,"Failed to generated unique pipeline identifier");  StringBuffer url=new StringBuffer(this.processingNodeServiceBaseUrl).append("/pipelines/").append(pipelineConfiguration.getId());  if (logger.isDebugEnabled())   logger.debug("Updating or instantiating pipeline [id=" + pipelineConfiguration.getId() + "] on processing node "+ url.toString());  try {    final WebTarget webTarget=this.restClient.target(url.toString());    return webTarget.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).put(Entity.entity(pipelineConfiguration,MediaType.APPLICATION_JSON),MicroPipelineInstantiationResponse.class);  } catch (  Exception e) {    throw new RemoteClientConnectionFailedException("Failed to establish a connection with the remote resource manager [url=" + url.toString() + "]. Error: "+ e.getMessage());  }}  }
class C{  public CSwitchToStandardView(final IViewSwitcher viewSwitcher){  super("Standard Perspective");  m_viewSwitcher=Preconditions.checkNotNull(viewSwitcher,"IE02840: viewSwitcher argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_SWITCH_TO_STANDARD_PERSPECTIVE_HK.getKeyStroke());}  }
class C{  public boolean canTraverseOutsideSubtree(){  return m_arg0.canTraverseOutsideSubtree();}  }
class C{  public boolean has(String memberName){  return members.containsKey(memberName);}  }
class C{  public static ArticleReaderException createArticleReaderException(final ErrorKeys errorId){  return new ArticleReaderException(errorId.toString());}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  splitPane=new JSplitPane();  contentPane.add(splitPane,BorderLayout.CENTER);  final JScrollPane scrollPane1=new JScrollPane();  splitPane.setLeftComponent(scrollPane1);  methodList=new JList();  scrollPane1.setViewportView(methodList);  final JScrollPane scrollPane2=new JScrollPane();  splitPane.setRightComponent(scrollPane2);  methodDetailTable=new JTable();  scrollPane2.setViewportView(methodDetailTable);}  }
class C{  @Override public SparseGraph createGraph(){  return new SparseGraph();}  }
class C{  public static OptionBuilder withDescription(String newDescription){  OptionBuilder.description=newDescription;  return instance;}  }
class C{  public T caseStateCase(StateCase object){  return null;}  }
class C{  @RequestMapping(value="forgotStuff/{somethingID}/resendStuff",method=POST) public void forgotStuffResendStuff(@PathVariable String tokenID) throws IllegalStateException {}  }
class C{  public PropertyStatusValues createPropStatVal(final BasicProperty basicProperty,final String statusCode,final Date propCompletionDate,final String courtOrdNum,final Date orderDate,final String judgmtDetails,final String parentPropId){  LOGGER.debug("Entered into createPropStatVal");  LOGGER.debug("createPropStatVal: basicProperty: " + basicProperty + ", statusCode: "+ statusCode+ ", propCompletionDate: "+ propCompletionDate+ ", courtOrdNum: "+ courtOrdNum+ ", orderDate: "+ orderDate+ ", judgmtDetails: "+ judgmtDetails+ ", parentPropId: "+ parentPropId);  final PropertyStatusValues propStatVal=new PropertyStatusValues();  final PropertyStatus propertyStatus=(PropertyStatus)getPropPerServ().find("from PropertyStatus where statusCode=?",statusCode);  propStatVal.setIsActive("Y");  final User user=userService.getUserById(ApplicationThreadLocals.getUserId());  propStatVal.setCreatedDate(new Date());  propStatVal.setModifiedDate(new Date());  propStatVal.setCreatedBy(user);  propStatVal.setModifiedBy(user);  propStatVal.setPropertyStatus(propertyStatus);  if (orderDate != null || courtOrdNum != null && !courtOrdNum.equals("") || judgmtDetails != null && !judgmtDetails.equals("")) {    propStatVal.setReferenceDate(orderDate);    propStatVal.setReferenceNo(courtOrdNum);    propStatVal.setRemarks(judgmtDetails);  } else {    propStatVal.setReferenceDate(new Date());    propStatVal.setReferenceNo("0001");  }  if (!statusCode.equals(PROP_CREATE_RSN) && propCompletionDate != null) {    final String propCompDateStr=DateUtils.getFormattedDate(propCompletionDate,DATE_FORMAT_DDMMYYY);    propStatVal.setExtraField1(propCompDateStr);  }  propStatVal.setBasicProperty(basicProperty);  if (basicProperty.getPropertyMutationMaster() != null && basicProperty.getPropertyMutationMaster().getCode().equals(PROP_CREATE_RSN_BIFUR)) {    final BasicProperty referenceBasicProperty=(BasicProperty)propPerServ.find("from BasicPropertyImpl bp where bp.upicNo=?",parentPropId);    propStatVal.setReferenceBasicProperty(referenceBasicProperty);  }  LOGGER.debug("createPropStatVal: PropertyStatusValues: " + propStatVal);  LOGGER.debug("Exiting from createPropStatVal");  return propStatVal;}  }
class C{  @Override public Iterator<T> iterator(){  return this.iterable.iterator();}  }
class C{  public void put(String fieldName,float v){  _put(fieldName,numberNode(v));}  }
class C{  public OracleException(Throwable cause,int errorCode){  this(null,cause,errorCode);}  }
class C{  protected DoubleType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ArrivalTimeToStopMutator(Config config,Map<Id,Double> originalTimes){  super(config.global());  this.mutationRange=config.timeAllocationMutator().getMutationRange();  this.originalTimes=originalTimes;}  }
class C{  static long sampleSizeFromEstimationError(double estimationError){  return Math.round(Math.ceil(4.0 / Math.pow(estimationError,2.0)));}  }
class C{  private DiscreteVariable accomodateCategory(DiscreteVariable variable,String category){  if (category == null) {    throw new NullPointerException();  }  List<String> categories=variable.getCategories();  if (!categories.contains(category)) {    List<String> newCategories=new LinkedList<>(categories);    newCategories.add(category);    DiscreteVariable newVariable=new DiscreteVariable(variable.getName(),newCategories);    changeVariable(variable,newVariable);    return newVariable;  }  return variable;}  }
class C{  public AbSoapParams(){  init();}  }
class C{  public boolean isSet(Option option,String value){  return (values.get(option.text + value) != null);}  }
class C{  static Map<String,Object> parseParameters(String args[]) throws Exception {  Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: Start");  HashMap<String,Object> map=new HashMap<>();  for (int i=0; i < args.length; i++) {    if (args[i].trim().startsWith("-")) {      if ((i + 1) < args.length && !args[i + 1].startsWith("-")) {        Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with value "+ args[i + 1]);        map.put(args[i].trim(),args[i + 1].trim());      } else       if ((i + 1) < args.length && args[i + 1].startsWith("-") || (i + 1) == args.length) {        Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with null value");        map.put(args[i].trim(),null);      } else {        System.out.println("TestRoot::parseParameters: (WARNING) not added in map = " + args[i]);      }    }  }  Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: Done");  return map;}  }
class C{  static void sort(Object[] a,int lo,int hi,Object[] work,int workBase,int workLen){  assert a != null && lo >= 0 && lo <= hi && hi <= a.length;  int nRemaining=hi - lo;  if (nRemaining < 2)   return;  if (nRemaining < MIN_MERGE) {    int initRunLen=countRunAndMakeAscending(a,lo,hi);    binarySort(a,lo,hi,lo + initRunLen);    return;  }  ComparableTimSort ts=new ComparableTimSort(a,work,workBase,workLen);  int minRun=minRunLength(nRemaining);  do {    int runLen=countRunAndMakeAscending(a,lo,hi);    if (runLen < minRun) {      int force=nRemaining <= minRun ? nRemaining : minRun;      binarySort(a,lo,lo + force,lo + runLen);      runLen=force;    }    ts.pushRun(lo,runLen);    ts.mergeCollapse();    lo+=runLen;    nRemaining-=runLen;  } while (nRemaining != 0);  assert lo == hi;  ts.mergeForceCollapse();  assert ts.stackSize == 1;}  }
class C{  public void requestFocus(){  this.m_queryF.requestFocus();}  }
class C{  public Matrix3 idt(){  this.val[0]=1;  this.val[1]=0;  this.val[2]=0;  this.val[3]=0;  this.val[4]=1;  this.val[5]=0;  this.val[6]=0;  this.val[7]=0;  this.val[8]=1;  return this;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  if (originatorInfo != null) {    v.add(new DERTaggedObject(false,0,originatorInfo));  }  v.add(recipientInfos);  v.add(authEncryptedContentInfo);  if (authAttrs != null) {    v.add(new DERTaggedObject(false,1,authAttrs));  }  v.add(mac);  if (unauthAttrs != null) {    v.add(new DERTaggedObject(false,2,unauthAttrs));  }  return new BERSequence(v);}  }
class C{  public void add(Track track){  if (!_tracks.contains(track)) {    int oldSize=_tracks.size();    _tracks.add(track);    this.propertyChangeSupport.firePropertyChange(LISTCHANGE_CHANGED_PROPERTY,Integer.valueOf(oldSize),Integer.valueOf(_tracks.size()));  }}  }
class C{  public Key ceil(Key key){  if (key == null)   throw new NullPointerException("called ceil() with null key");  SortedMap<Key,Value> tail=st.tailMap(key);  if (tail.isEmpty())   throw new NoSuchElementException();  return tail.firstKey();}  }
class C{  public Value removePair(String var){  Value v=map.remove(var);  cachedHash=0;  return v;}  }
class C{  private Map.Entry<Integer,Integer> addUsageMaps(int numMaps,Integer firstUsedPage) throws IOException {  JetFormat format=getFormat();  PageChannel pageChannel=getPageChannel();  int umapRowLength=format.OFFSET_USAGE_MAP_START + format.USAGE_MAP_TABLE_BYTE_LENGTH;  int totalUmapSpaceUsage=getRowSpaceUsage(umapRowLength,format) * numMaps;  int umapPageNumber=PageChannel.INVALID_PAGE_NUMBER;  int firstRowNum=-1;  int freeSpace=0;  Set<Integer> knownPages=new TreeSet<Integer>(Collections.reverseOrder());  collectUsageMapPages(knownPages);  ByteBuffer umapBuf=pageChannel.createPageBuffer();  for (  Integer pageNum : knownPages) {    pageChannel.readPage(umapBuf,pageNum);    freeSpace=umapBuf.getShort(format.OFFSET_FREE_SPACE);    if (freeSpace >= totalUmapSpaceUsage) {      umapPageNumber=pageNum;      firstRowNum=getRowsOnDataPage(umapBuf,format);      break;    }  }  if (umapPageNumber == PageChannel.INVALID_PAGE_NUMBER) {    umapPageNumber=pageChannel.allocateNewPage();    freeSpace=format.DATA_PAGE_INITIAL_FREE_SPACE;    firstRowNum=0;    umapBuf=createUsageMapDefPage(pageChannel,freeSpace);  }  int rowStart=findRowEnd(umapBuf,firstRowNum,format) - umapRowLength;  int umapRowNum=firstRowNum;  for (int i=0; i < numMaps; ++i) {    umapBuf.putShort(getRowStartOffset(umapRowNum,format),(short)rowStart);    umapBuf.put(rowStart,UsageMap.MAP_TYPE_INLINE);    if (firstUsedPage != null) {      umapBuf.putInt(rowStart + 1,firstUsedPage);      umapBuf.put(rowStart + 5,(byte)1);    }    rowStart-=umapRowLength;    ++umapRowNum;  }  freeSpace-=totalUmapSpaceUsage;  umapBuf.putShort(format.OFFSET_FREE_SPACE,(short)freeSpace);  umapBuf.putShort(format.OFFSET_NUM_ROWS_ON_DATA_PAGE,(short)umapRowNum);  pageChannel.writePage(umapBuf,umapPageNumber);  return new AbstractMap.SimpleImmutableEntry<Integer,Integer>(umapPageNumber,firstRowNum);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public synchronized TradestrategyOrders findPositionOrdersByTradestrategyId(Integer idTradestrategy){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradestrategyOrders instance=entityManager.find(TradestrategyOrders.class,idTradestrategy);    if (instance.hasOpenTradePosition())     instance.getOpenTradePosition().getTradeOrders().size();    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public boolean isAdHocStationMode(){  return adHocStationMode;}  }
class C{  public synchronized Relationship removeRelationship(Relationship relationship){  relationship=addRelationship(relationship,true);  float correctness=relationship.getCorrectness();  if (correctness > 0) {    relationship.setCorrectness((1.0f - correctness) * -1.0f);  } else {    correctness=correctness + ((-1.0f - correctness) * 0.5f);    if (correctness <= -0.99) {      correctness=-1;    }    relationship.setCorrectness(correctness);  }  return relationship;}  }
class C{  public void writeLineNumberTable(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  long ln=-1;  int count=0;  for (Instruction inst=first; inst != null; inst=inst.next) {    long n=(inst.where >> WHEREOFFSETBITS);    if ((n > 0) && (ln != n)) {      ln=n;      count++;    }  }  ln=-1;  out.writeShort(count);  for (Instruction inst=first; inst != null; inst=inst.next) {    long n=(inst.where >> WHEREOFFSETBITS);    if ((n > 0) && (ln != n)) {      ln=n;      out.writeShort(inst.pc);      out.writeShort((int)ln);    }  }}  }
class C{  private CProjectTreeNode<?> findProjectNode(final CProjectTreeNode<?> databaseNode,final INaviProject project){  final List<CProjectTreeNode<?>> nodes=new ArrayList<CProjectTreeNode<?>>();  nodes.add(databaseNode);  while (!nodes.isEmpty()) {    final CProjectTreeNode<?> current=nodes.get(0);    nodes.remove(0);    if ((current instanceof CProjectNode) && (((CProjectNode)current).getObject() == project)) {      return current;    }    for (final Enumeration<?> e=current.children(); e.hasMoreElements(); ) {      final CProjectTreeNode<?> element=(CProjectTreeNode<?>)e.nextElement();      if ((element instanceof CProjectContainerNode) || (element instanceof CProjectNode)) {        nodes.add(element);      }    }  }  throw new IllegalStateException("IE01202: Project node not found");}  }
class C{  public Category_Deleter idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:54.333 -0500",hash_original_method="296A7913293032A81F372D58309D975C",hash_generated_method="2DCFB75665D03A476E8B08961103B604") public void appendName(String attrFormat,StringBuilder sb){  boolean hexFormat=false;  if (X500Principal.RFC1779.equals(attrFormat)) {    if (RFC1779_NAMES == oid.getGroup()) {      sb.append(oid.getName());    } else {      sb.append(oid.toOIDString());    }    sb.append('=');    if (value.escapedString == value.getHexString()) {      sb.append(value.getHexString().toUpperCase(Locale.US));    } else     if (value.escapedString.length() != value.rawString.length()) {      value.appendQEString(sb);    } else {      sb.append(value.escapedString);    }  } else {    Object group=oid.getGroup();    if (RFC1779_NAMES == group || RFC2253_NAMES == group) {      sb.append(oid.getName());      if (X500Principal.CANONICAL.equals(attrFormat)) {        int tag=value.getTag();        if (!ASN1StringType.UTF8STRING.checkTag(tag) && !ASN1StringType.PRINTABLESTRING.checkTag(tag) && !ASN1StringType.TELETEXSTRING.checkTag(tag)) {          hexFormat=true;        }      }    } else {      sb.append(oid.toString());      hexFormat=true;    }    sb.append('=');    if (hexFormat) {      sb.append(value.getHexString());    } else {      if (X500Principal.CANONICAL.equals(attrFormat)) {        sb.append(value.makeCanonical());      } else {        sb.append(value.escapedString);      }    }  }}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  reset();  getCapabilities().testWithFail(data);  m_dictionary=new LinkedHashMap<String,Count>(10000);  m_numInstances=data.numInstances();  m_data=new Instances(data,0);  data=new Instances(data);  if (m_fitLogistic && m_loss == HINGE) {    initializeSVMProbs(data);  }  if (data.numInstances() > 0) {    data.randomize(new Random(getSeed()));    train(data);    pruneDictionary(true);  }}  }
class C{  protected void checkTEForGivenData(double[][] var1,double[][] var2,int[] kNNs,double[] expectedResults) throws Exception {  checkTEForGivenData(var1,var2,1,1,kNNs,expectedResults);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void v(String tag,String s,Throwable e){  if (LDJSLOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s,e);}  }
class C{  public static int testSplit2Snippet(int a){  try {    return container.a;  }  finally {    if (a < 0) {      container.c=15;    } else {      container.b=15;    }    container.obj=null;  }}  }
class C{  public PdfRendererBuilder useUnicodeToTitleTransformer(FSTextTransformer tr){  this._unicodeToTitleTransformer=tr;  return this;}  }
class C{  private void updateMenuItems(boolean isRecording,boolean isPaused){  if (insertMarkerMenuItem != null) {    insertMarkerMenuItem.setVisible(isRecording && !isPaused);  }  if (insertPhotoMenuItem != null) {    insertPhotoMenuItem.setVisible(hasCamera && isRecording && !isPaused);  }  if (playMenuItem != null) {    playMenuItem.setVisible(!isRecording);  }  if (shareMenuItem != null && shareMenuItem.isEnabled()) {    shareMenuItem.setVisible(!isRecording);  }  if (exportMenuItem != null) {    exportMenuItem.setVisible(!isRecording);  }  if (voiceFrequencyMenuItem != null) {    voiceFrequencyMenuItem.setVisible(isRecording);  }  if (splitFrequencyMenuItem != null) {    splitFrequencyMenuItem.setVisible(isRecording);  }  if (sensorStateMenuItem != null) {    sensorStateMenuItem.setVisible(!PreferencesUtils.SENSOR_TYPE_DEFAULT.equals(sensorType));  }  String title;  if (isRecording) {    title=getString(isPaused ? R.string.generic_paused : R.string.generic_recording);  } else {    Track track=myTracksProviderUtils.getTrack(trackId);    title=track != null ? track.getName() : "";  }  setTitle(title);}  }
class C{  private static boolean extractFile(Context c,String rootAsset,String path){  AssetManager assetManager=c.getAssets();  InputStream in=null;  OutputStream out=null;  try {    in=assetManager.open(rootAsset + path);    String fullPath=PrefStore.getEnvDir(c) + path;    out=new FileOutputStream(fullPath);    byte[] buffer=new byte[1024];    int read;    while ((read=in.read(buffer)) != -1) {      out.write(buffer,0,read);    }    out.flush();  } catch (  IOException e) {    e.printStackTrace();    return false;  } finally {    close(in);    close(out);  }  return true;}  }
class C{  public boolean isOther(){  return other;}  }
class C{  private static QuadTree<Coord> buildQuadTree(){  QuadTree<Coord> qt=new QuadTree<Coord>(130000.0,-3707000.0,152000.0,-3684000.0);  final double y9=-3685018.8482;  qt.put(130048.2549,-3685018.8482,new Coord(130048.2549,y9));  final double y8=-3702339.3562;  qt.put(148048.2549,-3702339.3562,new Coord(148048.2549,y8));  final double y7=-3704504.4197;  qt.put(148798.2549,-3704504.4197,new Coord(148798.2549,y7));  final double y6=-3706669.4833;  qt.put(149548.2549,-3706669.4833,new Coord(149548.2549,y6));  final double y5=-3706669.4833;  qt.put(151048.2549,-3706669.4833,new Coord(151048.2549,y5));  final double y4=-3701473.3308;  qt.put(148048.2549,-3701473.3308,new Coord(148048.2549,y4));  final double y3=-3697143.2038;  qt.put(146548.2549,-3697143.2038,new Coord(146548.2549,y3));  final double y2=-3704937.4325;  qt.put(146548.2549,-3704937.4325,new Coord(146548.2549,y2));  final double y1=-3705803.4579;  qt.put(148048.2549,-3705803.4579,new Coord(148048.2549,y1));  final double y=-3684152.8228;  qt.put(130048.2549,-3684152.8228,new Coord(130048.2549,y));  return qt;}  }
class C{  @Override public void render(float worldScale){  render(worldScale,false);}  }
class C{  public void saveCameraPosition(ScenePreferences prefs){  CameraPosPreference prefsPos=prefs.getCameraPos();  if (null == prefsPos) {    prefsPos=CameraPosPreference.getDefaultCameraPos();    prefs.setCameraPos(prefsPos);  }  float[] scenePos=glPanel.getCameraPosition();  prefsPos.setX(scenePos[0]);  prefsPos.setY(scenePos[1]);  prefsPos.setZ(scenePos[2]);}  }
class C{  public void modifyContacts(){  mCommands[ContactsCommandType.MODIFY_COMMAND.ordinal()].execute(mModifyContacts.iterator());}  }
class C{  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,final String collection) throws Exception {  final CloudSolrClient cloudClient=cluster.getSolrClient();  CollectionAdminRequest.createCollection(collection,CONF_NAME,NUM_SERVERS,1).withProperty("config","solrconfig-tlog.xml").process(cloudClient);  ZkStateReader zkStateReader=cloudClient.getZkStateReader();  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection,zkStateReader,true,true,330);  assertEquals("sanity query",0,cloudClient.query(collection,params("q","*:*")).getStatus());}  }
class C{  public DoublyIndexedTable(){  this(16);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void isComment(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_COMMENT,flag);}  }
class C{  public String generateSummary(){  if (transit == null || transit.isEmpty()) {    return "Non-transit options";  }  List<String> vias=Lists.newArrayList();  List<String> routes=Lists.newArrayList();  for (  TransitSegment segment : transit) {    List<String> routeShortNames=Lists.newArrayList();    for (    Route rs : segment.getRoutes()) {      String routeName=rs.shortName == null ? rs.longName : rs.shortName;      routeShortNames.add(routeName);    }    routes.add(Joiner.on("/").join(routeShortNames));    vias.add(segment.to.name);  }  StringBuilder sb=new StringBuilder();  sb.append("routes ");  sb.append(Joiner.on(", ").join(routes));  if (!vias.isEmpty())   vias.remove(vias.size() - 1);  if (!vias.isEmpty()) {    sb.append(" via ");    sb.append(Joiner.on(", ").join(vias));  }  return sb.toString();}  }
class C{  private static void mergeReturnBlocks(MethodNode mth){  List<BlockNode> exitBlocks=mth.getExitBlocks();  BlockNode pred=getFinallyOutBlock(exitBlocks);  if (pred == null) {    return;  }  IgnoreEdgeAttr edgeAttr=pred.get(AType.IGNORE_EDGE);  if (edgeAttr == null) {    return;  }  List<BlockNode> merge=new LinkedList<BlockNode>();  for (  BlockNode blockNode : pred.getSuccessors()) {    if (blockNode.contains(AFlag.RETURN)) {      merge.add(blockNode);    }  }  if (merge.size() < 2) {    return;  }  BlockNode origReturnBlock=null;  for (  BlockNode ret : merge) {    if (ret.contains(AFlag.ORIG_RETURN)) {      origReturnBlock=ret;      break;    }  }  if (origReturnBlock == null) {    return;  }  for (  BlockNode mb : merge) {    if (mb == origReturnBlock) {      continue;    }    for (    BlockNode remPred : mb.getPredecessors()) {      connect(remPred,origReturnBlock);    }    markForRemove(mth,mb);    edgeAttr.getBlocks().remove(mb);  }  mergeSyntheticPredecessors(mth,origReturnBlock);}  }
class C{  private void actionTouch() throws PageException {  checkFile(pageContext,securityManager,file,serverPassword,createPath,true,true,true);  try {    ResourceUtil.touch(file);  } catch (  IOException e) {    throw new ApplicationException("can't touch file " + file.getAbsolutePath(),e.getMessage());  }  setACL(pageContext,file,acl);  setMode(file,mode);  setAttributes(file,attributes);}  }
class C{  public void clearTextLabels(){  clearXTextLabels();}  }
class C{  private void createSingleMovieFromDir(Path dataSource,Path movieDir,boolean isDiscFolder){  LOGGER.info("Parsing single movie directory: " + movieDir + " (are we a disc folder? "+ isDiscFolder+ ")");  Path relative=dataSource.relativize(movieDir);  if (!Utils.getFolderStackingMarker(relative.toString()).isEmpty() && Utils.getFolderStackingMarker(relative.toString()).equals(movieDir.getFileName().toString())) {    movieDir=movieDir.getParent();  }  Movie movie=movieList.getMovieByPath(movieDir);  HashSet<Path> allFiles=getAllFilesRecursive(movieDir,3);  filesFound.add(movieDir.toAbsolutePath());  filesFound.addAll(allFiles);  ArrayList<MediaFile> mfs=new ArrayList<>();  for (  Path file : allFiles) {    mfs.add(new MediaFile(file));  }  allFiles.clear();  if (movie == null) {    LOGGER.debug("| movie not found; looking for NFOs");    movie=new Movie();    String bdinfoTitle="";    String videoName="";    for (    MediaFile mf : mfs) {      if (mf.getType().equals(MediaFileType.NFO)) {        LOGGER.info("| parsing NFO " + mf.getFileAsPath());        Movie nfo=null;switch (MovieModuleManager.MOVIE_SETTINGS.getMovieConnector()) {case XBMC:          nfo=MovieToXbmcNfoConnector.getData(mf.getFileAsPath());        if (nfo == null) {          nfo=MovieToMpNfoConnector.getData(mf.getFileAsPath());        }      break;case MP:    nfo=MovieToMpNfoConnector.getData(mf.getFileAsPath());  if (nfo == null) {    nfo=MovieToXbmcNfoConnector.getData(mf.getFileAsPath());  }break;}if (nfo != null) {movie=nfo;}if (movie.getImdbId().isEmpty()) {try {String imdb=Utils.readFileToString(mf.getFileAsPath());imdb=ParserUtils.detectImdbId(imdb);if (!imdb.isEmpty()) {  LOGGER.debug("| Found IMDB id: " + imdb);  movie.setImdbId(imdb);}} catch (IOException e) {LOGGER.warn("| couldn't read NFO " + mf);}}} else if (mf.getType().equals(MediaFileType.TEXT)) {try {String txtFile=Utils.readFileToString(mf.getFileAsPath());String bdinfo=StrgUtils.substr(txtFile,".*Disc Title:\\s+(.*?)[\\n\\r]");if (!bdinfo.isEmpty()) {LOGGER.debug("| Found Disc Title in BDInfo.txt: " + bdinfo);bdinfoTitle=WordUtils.capitalizeFully(bdinfo);}String imdb=ParserUtils.detectImdbId(txtFile);if (!imdb.isEmpty()) {LOGGER.debug("| Found IMDB id: " + imdb);movie.setImdbId(imdb);}} catch (Exception e) {LOGGER.warn("| couldn't read TXT " + mf.getFilename());}} else if (mf.getType().equals(MediaFileType.VIDEO)) {videoName=mf.getBasename();}}movie.setNewlyAdded(true);movie.setDateAdded(new Date());}if (movie.getTitle().isEmpty()) {String[] video=ParserUtils.detectCleanMovienameAndYear(movieDir.getFileName().toString());movie.setTitle(video[0]);if (!video[1].isEmpty()) {movie.setYear(video[1]);}}Matcher matcher=video3DPattern.matcher(movieDir.getFileName().toString());if (matcher.find()) {movie.setVideoIn3D(true);}movie.setEdition(MovieEdition.getMovieEditionFromString(movieDir.getFileName().toString()));movie.setPath(movieDir.toAbsolutePath().toString());movie.setDataSource(dataSource.toString());LOGGER.debug("| store movie into DB as: " + movie.getTitle());movieList.addMovie(movie);if (movie.getMovieSet() != null) {LOGGER.debug("| movie is part of a movieset");movie.getMovieSet().insertMovie(movie);movieList.sortMoviesInMovieSet(movie.getMovieSet());movie.getMovieSet().saveToDb();}addMediafilesToMovie(movie,mfs);if (movie.getArtworkFilename(MediaFileType.POSTER).isEmpty()) {for (MediaFile mf : mfs) {if (mf.getType().equals(MediaFileType.GRAPHIC)) {LOGGER.debug("| parsing unknown graphic " + mf.getFilename());List<MediaFile> vid=movie.getMediaFiles(MediaFileType.VIDEO);if (vid != null && !vid.isEmpty()) {String vfilename=vid.get(0).getFilename();if (FilenameUtils.getBaseName(vfilename).equals(FilenameUtils.getBaseName(mf.getFilename())) || FilenameUtils.getBaseName(Utils.cleanStackingMarkers(vfilename)).trim().equals(FilenameUtils.getBaseName(mf.getFilename())) || movie.getTitle().equals(FilenameUtils.getBaseName(mf.getFilename()))) {mf.setType(MediaFileType.POSTER);movie.addToMediaFiles(mf);}}}}}boolean isOffline=false;for (MediaFile mf : movie.getMediaFiles(MediaFileType.VIDEO)) {if ("disc".equalsIgnoreCase(mf.getExtension())) {isOffline=true;}}movie.setOffline(isOffline);movie.reEvaluateStacking();movie.saveToDb();}  }
class C{  public void testCheckBox(){  JFrame f=new JFrame("SwingTextCaseTest");  f.setSize(100,100);  JCheckBox b=new JCheckBox("Check");  b.setName("Check");  f.add(b);  f.setVisible(true);  NamedComponentFinder finder=new NamedComponentFinder(JCheckBox.class,"Check");  JCheckBox testBox=(JCheckBox)finder.find(f,0);  Assert.assertNotNull(testBox);  Assert.assertTrue(!testBox.isSelected());  getHelper().enterClickAndLeave(new MouseEventData(this,testBox));  Assert.assertTrue(testBox.isSelected());  f.dispose();}  }
class C{  public CF1(){  this(10);}  }
class C{  public final void mulNormalize(Matrix3d m1,Matrix3d m2){  double[] tmp=new double[9];  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  tmp[0]=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20;  tmp[1]=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21;  tmp[2]=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22;  tmp[3]=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20;  tmp[4]=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21;  tmp[5]=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22;  tmp[6]=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20;  tmp[7]=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21;  tmp[8]=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22;  compute_svd(tmp,tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  public boolean canAssign(XCourseRequest request){  if (request.getEnrollment() != null)   return true;  int alt=0;  boolean found=false;  for (  XRequest r : iRequests) {    if (r.equals(request))     found=true;    boolean course=(r instanceof XCourseRequest);    boolean assigned=(!course || ((XCourseRequest)r).getEnrollment() != null || r.equals(request));    boolean waitlist=(course && ((XCourseRequest)r).isWaitlist());    if (r.isAlternative()) {      if (assigned || (!found && waitlist))       alt--;    } else {      if (course && !waitlist && !assigned)       alt++;    }  }  return (alt >= 0);}  }
class C{  public void testDoConfigureSetsDomainVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.DOMAIN_VERSION,DOMAIN_VERSION);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(DOMAIN_VERSION,"//weblogic:domain-version",config);}  }
class C{  @Deprecated public EditSession(final LocalWorld world,final int maxBlocks){  this(world,maxBlocks,null);}  }
class C{  public static boolean isXML11Character(int c){  return c >= 1 && c <= 0xd7ff || c >= 0xe000 && c <= 0xfffd || c >= 0x10000 && c <= 0x10ffff;}  }
class C{  public boolean isWideningConversion(Column newColumn){  if (type != newColumn.type) {    return false;  }  if (precision > newColumn.precision) {    return false;  }  if (scale != newColumn.scale) {    return false;  }  if (nullable && !newColumn.nullable) {    return false;  }  if (convertNullToDefault != newColumn.convertNullToDefault) {    return false;  }  if (primaryKey != newColumn.primaryKey) {    return false;  }  if (autoIncrement || newColumn.autoIncrement) {    return false;  }  if (checkConstraint != null || newColumn.checkConstraint != null) {    return false;  }  if (convertNullToDefault || newColumn.convertNullToDefault) {    return false;  }  if (defaultExpression != null || newColumn.defaultExpression != null) {    return false;  }  if (isComputed || newColumn.isComputed) {    return false;  }  return true;}  }
class C{  public ClientConnectionWork(HttpsURLConnection connection){  this.connection=connection;  log("Created over connection: " + connection.getClass());}  }
class C{  public void parseDoByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  dataStream.writeLong(network.createVertex(Primitive.DO).getId());  parseOperatorByteCode(dataStream,stream,elements,debug,network);  ensureNext(';',stream);}  }
class C{  public ArrayList<Row> generateRows(Session session,SearchRow first,SearchRow last){  Value indexFrom=null, indexTo=null;  if (indexColumn >= 0) {    if (first != null) {      indexFrom=first.getValue(indexColumn);    }    if (last != null) {      indexTo=last.getValue(indexColumn);    }  }  ArrayList<Row> rows=New.arrayList();  String catalog=identifier(database.getShortName());  boolean admin=session.getUser().isAdmin();switch (type) {case TABLES:{      for (      Table table : getAllTables(session)) {        String tableName=identifier(table.getName());        if (!checkIndex(session,tableName,indexFrom,indexTo)) {          continue;        }        if (hideTable(table,session)) {          continue;        }        String storageType;        if (table.isTemporary()) {          if (table.isGlobalTemporary()) {            storageType="GLOBAL TEMPORARY";          } else {            storageType="LOCAL TEMPORARY";          }        } else {          storageType=table.isPersistIndexes() ? "CACHED" : "MEMORY";        }        String sql=table.getCreateSQL();        if (!admin) {          if (sql != null && sql.contains(JdbcSQLException.HIDE_SQL)) {            sql="-";          }        }        add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getTableType(),storageType,sql,replaceNullWithEmpty(table.getComment()),"" + table.getMaxDataModificationId(),"" + table.getId(),null,table.getClass().getName(),"" + table.getRowCountApproximation());      }      break;    }case COLUMNS:{    final ArrayList<Table> tablesToList;    if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {      String tableName=identifier(indexFrom.getString());      tablesToList=getTablesByName(session,tableName);    } else {      tablesToList=getAllTables(session);    }    for (    Table table : tablesToList) {      String tableName=identifier(table.getName());      if (!checkIndex(session,tableName,indexFrom,indexTo)) {        continue;      }      if (hideTable(table,session)) {        continue;      }      Column[] cols=table.getColumns();      String collation=database.getCompareMode().getName();      for (int j=0; j < cols.length; j++) {        Column c=cols[j];        Sequence sequence=c.getSequence();        add(rows,catalog,identifier(table.getSchema().getName()),tableName,identifier(c.getName()),String.valueOf(j + 1),c.getDefaultSQL(),c.isNullable() ? "YES" : "NO","" + DataType.convertTypeToSQLType(c.getType()),"" + c.getPrecisionAsInt(),"" + c.getPrecisionAsInt(),"" + c.getPrecisionAsInt(),"10","" + c.getScale(),CHARACTER_SET_NAME,collation,identifier(DataType.getDataType(c.getType()).name),"" + (c.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls),"" + (c.getComputed() ? "TRUE" : "FALSE"),"" + (c.getSelectivity()),c.getCheckConstraintSQL(session,c.getName()),sequence == null ? null : sequence.getName(),replaceNullWithEmpty(c.getComment()),null);      }    }    break;  }case INDEXES:{  final ArrayList<Table> tablesToList;  if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {    String tableName=identifier(indexFrom.getString());    tablesToList=getTablesByName(session,tableName);  } else {    tablesToList=getAllTables(session);  }  for (  Table table : tablesToList) {    String tableName=identifier(table.getName());    if (!checkIndex(session,tableName,indexFrom,indexTo)) {      continue;    }    if (hideTable(table,session)) {      continue;    }    ArrayList<Index> indexes=table.getIndexes();    ArrayList<Constraint> constraints=table.getConstraints();    for (int j=0; indexes != null && j < indexes.size(); j++) {      Index index=indexes.get(j);      if (index.getCreateSQL() == null) {        continue;      }      String constraintName=null;      for (int k=0; constraints != null && k < constraints.size(); k++) {        Constraint constraint=constraints.get(k);        if (constraint.usesIndex(index)) {          if (index.getIndexType().isPrimaryKey()) {            if (constraint.getConstraintType().equals(Constraint.PRIMARY_KEY)) {              constraintName=constraint.getName();            }          } else {            constraintName=constraint.getName();          }        }      }      IndexColumn[] cols=index.getIndexColumns();      String indexClass;      if (index instanceof MultiVersionIndex) {        indexClass=((MultiVersionIndex)index).getBaseIndex().getClass().getName();      } else {        indexClass=index.getClass().getName();      }      for (int k=0; k < cols.length; k++) {        IndexColumn idxCol=cols[k];        Column column=idxCol.column;        add(rows,catalog,identifier(table.getSchema().getName()),tableName,index.getIndexType().isUnique() ? "FALSE" : "TRUE",identifier(index.getName()),"" + (k + 1),identifier(column.getName()),"0",index.getIndexType().isPrimaryKey() ? "TRUE" : "FALSE",index.getIndexType().getSQL(),index.getIndexType().getBelongsToConstraint() ? "TRUE" : "FALSE","" + DatabaseMetaData.tableIndexOther,(idxCol.sortType & SortOrder.DESCENDING) != 0 ? "D" : "A","0","",replaceNullWithEmpty(index.getComment()),index.getCreateSQL(),"" + index.getId(),"" + idxCol.sortType,constraintName,indexClass);      }    }  }  break;}case TABLE_TYPES:{add(rows,Table.TABLE);add(rows,Table.TABLE_LINK);add(rows,Table.SYSTEM_TABLE);add(rows,Table.VIEW);add(rows,Table.EXTERNAL_TABLE_ENGINE);break;}case CATALOGS:{add(rows,catalog);break;}case SETTINGS:{for (Setting s : database.getAllSettings()) {String value=s.getStringValue();if (value == null) {value="" + s.getIntValue();}add(rows,identifier(s.getName()),value);}add(rows,"info.BUILD_ID","" + Constants.BUILD_ID);add(rows,"info.VERSION_MAJOR","" + Constants.VERSION_MAJOR);add(rows,"info.VERSION_MINOR","" + Constants.VERSION_MINOR);add(rows,"info.VERSION","" + Constants.getFullVersion());if (admin) {String[] settings={"java.runtime.version","java.vm.name","java.vendor","os.name","os.arch","os.version","sun.os.patch.level","file.separator","path.separator","line.separator","user.country","user.language","user.variant","file.encoding"};for (String s : settings) {add(rows,"property." + s,Utils.getProperty(s,""));}}add(rows,"EXCLUSIVE",database.getExclusiveSession() == null ? "FALSE" : "TRUE");add(rows,"MODE",database.getMode().getName());add(rows,"MULTI_THREADED",database.isMultiThreaded() ? "1" : "0");add(rows,"MVCC",database.isMultiVersion() ? "TRUE" : "FALSE");add(rows,"QUERY_TIMEOUT","" + session.getQueryTimeout());add(rows,"RETENTION_TIME","" + database.getRetentionTime());add(rows,"LOG","" + database.getLogMode());ArrayList<String> settingNames=New.arrayList();HashMap<String,String> s=database.getSettings().getSettings();for (String k : s.keySet()) {settingNames.add(k);}Collections.sort(settingNames);for (String k : settingNames) {add(rows,k,s.get(k));}if (database.isPersistent()) {PageStore store=database.getPageStore();if (store != null) {add(rows,"info.FILE_WRITE_TOTAL","" + store.getWriteCountTotal());add(rows,"info.FILE_WRITE","" + store.getWriteCount());add(rows,"info.FILE_READ","" + store.getReadCount());add(rows,"info.PAGE_COUNT","" + store.getPageCount());add(rows,"info.PAGE_SIZE","" + store.getPageSize());add(rows,"info.CACHE_MAX_SIZE","" + store.getCache().getMaxMemory());add(rows,"info.CACHE_SIZE","" + store.getCache().getMemory());}Store mvStore=database.getMvStore();if (mvStore != null) {FileStore fs=mvStore.getStore().getFileStore();add(rows,"info.FILE_WRITE","" + fs.getWriteCount());add(rows,"info.FILE_READ","" + fs.getReadCount());long size;try {  size=fs.getFile().size();} catch (IOException e) {  throw DbException.convertIOException(e,"Can not get size");}int pageSize=4 * 1024;long pageCount=size / pageSize;add(rows,"info.PAGE_COUNT","" + pageCount);add(rows,"info.PAGE_SIZE","" + pageSize);add(rows,"info.CACHE_MAX_SIZE","" + mvStore.getStore().getCacheSize());add(rows,"info.CACHE_SIZE","" + mvStore.getStore().getCacheSizeUsed());}}break;}case TYPE_INFO:{for (DataType t : DataType.getTypes()) {if (t.hidden || t.sqlType == Value.NULL) {continue;}add(rows,t.name,String.valueOf(t.sqlType),String.valueOf(MathUtils.convertLongToInt(t.maxPrecision)),t.prefix,t.suffix,t.params,String.valueOf(t.autoIncrement),String.valueOf(t.minScale),String.valueOf(t.maxScale),t.decimal ? "10" : null,String.valueOf(t.sqlTypePos),String.valueOf(t.caseSensitive),"" + DatabaseMetaData.typeNullable,"" + DatabaseMetaData.typeSearchable);}break;}case HELP:{String resource="/org/h2/res/help.csv";try {byte[] data=Utils.getResource(resource);Reader reader=new InputStreamReader(new ByteArrayInputStream(data));Csv csv=new Csv();csv.setLineCommentCharacter('#');ResultSet rs=csv.read(reader,null);for (int i=0; rs.next(); i++) {add(rows,String.valueOf(i),rs.getString(1).trim(),rs.getString(2).trim(),rs.getString(3).trim(),rs.getString(4).trim());}} catch (Exception e) {throw DbException.convert(e);}break;}case SEQUENCES:{for (SchemaObject obj : database.getAllSchemaObjects(DbObject.SEQUENCE)) {Sequence s=(Sequence)obj;add(rows,catalog,identifier(s.getSchema().getName()),identifier(s.getName()),String.valueOf(s.getCurrentValue()),String.valueOf(s.getIncrement()),s.getBelongsToTable() ? "TRUE" : "FALSE",replaceNullWithEmpty(s.getComment()),String.valueOf(s.getCacheSize()),String.valueOf(s.getMinValue()),String.valueOf(s.getMaxValue()),s.getCycle() ? "TRUE" : "FALSE","" + s.getId());}break;}case USERS:{for (User u : database.getAllUsers()) {if (admin || session.getUser() == u) {add(rows,identifier(u.getName()),String.valueOf(u.isAdmin()),replaceNullWithEmpty(u.getComment()),"" + u.getId());}}break;}case ROLES:{for (Role r : database.getAllRoles()) {if (admin || session.getUser().isRoleGranted(r)) {add(rows,identifier(r.getName()),replaceNullWithEmpty(r.getComment()),"" + r.getId());}}break;}case RIGHTS:{if (admin) {for (Right r : database.getAllRights()) {Role role=r.getGrantedRole();DbObject grantee=r.getGrantee();String rightType=grantee.getType() == DbObject.USER ? "USER" : "ROLE";if (role == null) {DbObject object=r.getGrantedObject();Schema schema=null;Table table=null;if (object != null) {if (object instanceof Schema) {schema=(Schema)object;} else if (object instanceof Table) {table=(Table)object;schema=table.getSchema();}}String tableName=(table != null) ? identifier(table.getName()) : "";String schemaName=(schema != null) ? identifier(schema.getName()) : "";if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}add(rows,identifier(grantee.getName()),rightType,"",r.getRights(),schemaName,tableName,"" + r.getId());} else {add(rows,identifier(grantee.getName()),rightType,identifier(role.getName()),"","","","" + r.getId());}}}break;}case FUNCTION_ALIASES:{for (SchemaObject aliasAsSchemaObject : database.getAllSchemaObjects(DbObject.FUNCTION_ALIAS)) {FunctionAlias alias=(FunctionAlias)aliasAsSchemaObject;JavaMethod[] methods;try {methods=alias.getJavaMethods();} catch (DbException e) {methods=new JavaMethod[0];}for (FunctionAlias.JavaMethod method : methods) {int returnsResult=method.getDataType() == Value.NULL ? DatabaseMetaData.procedureNoResult : DatabaseMetaData.procedureReturnsResult;add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),"" + DataType.convertTypeToSQLType(method.getDataType()),DataType.getDataType(method.getDataType()).name,"" + method.getParameterCount(),"" + returnsResult,replaceNullWithEmpty(alias.getComment()),"" + alias.getId(),alias.getSource());}}for (UserAggregate agg : database.getAllAggregates()) {int returnsResult=DatabaseMetaData.procedureReturnsResult;add(rows,catalog,Constants.SCHEMA_MAIN,identifier(agg.getName()),agg.getJavaClassName(),"","" + DataType.convertTypeToSQLType(Value.NULL),DataType.getDataType(Value.NULL).name,"1","" + returnsResult,replaceNullWithEmpty(agg.getComment()),"" + agg.getId(),"");}break;}case FUNCTION_COLUMNS:{for (SchemaObject aliasAsSchemaObject : database.getAllSchemaObjects(DbObject.FUNCTION_ALIAS)) {FunctionAlias alias=(FunctionAlias)aliasAsSchemaObject;JavaMethod[] methods;try {methods=alias.getJavaMethods();} catch (DbException e) {methods=new JavaMethod[0];}for (FunctionAlias.JavaMethod method : methods) {if (method.getDataType() != Value.NULL) {DataType dt=DataType.getDataType(method.getDataType());add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),"" + method.getParameterCount(),"0","P0","" + DataType.convertTypeToSQLType(method.getDataType()),dt.name,"" + MathUtils.convertLongToInt(dt.defaultPrecision),"" + dt.defaultScale,"10","" + DatabaseMetaData.columnNullableUnknown,"" + DatabaseMetaData.procedureColumnReturn,"",null);}Class<?>[] columnList=method.getColumnClasses();for (int k=0; k < columnList.length; k++) {if (method.hasConnectionParam() && k == 0) {continue;}Class<?> clazz=columnList[k];int dataType=DataType.getTypeFromClass(clazz);DataType dt=DataType.getDataType(dataType);int nullable=clazz.isPrimitive() ? DatabaseMetaData.columnNoNulls : DatabaseMetaData.columnNullable;add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),"" + method.getParameterCount(),"" + (k + (method.hasConnectionParam() ? 0 : 1)),"P" + (k + 1),"" + DataType.convertTypeToSQLType(dt.type),dt.name,"" + MathUtils.convertLongToInt(dt.defaultPrecision),"" + dt.defaultScale,"10","" + nullable,"" + DatabaseMetaData.procedureColumnIn,"",null);}}}break;}case SCHEMATA:{String collation=database.getCompareMode().getName();for (Schema schema : database.getAllSchemas()) {add(rows,catalog,identifier(schema.getName()),identifier(schema.getOwner().getName()),CHARACTER_SET_NAME,collation,Constants.SCHEMA_MAIN.equals(schema.getName()) ? "TRUE" : "FALSE",replaceNullWithEmpty(schema.getComment()),"" + schema.getId());}break;}case TABLE_PRIVILEGES:{for (Right r : database.getAllRights()) {DbObject object=r.getGrantedObject();if (!(object instanceof Table)) {continue;}Table table=(Table)object;if (table == null || hideTable(table,session)) {continue;}String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}addPrivileges(rows,r.getGrantee(),catalog,table,null,r.getRightMask());}break;}case COLUMN_PRIVILEGES:{for (Right r : database.getAllRights()) {DbObject object=r.getGrantedObject();if (!(object instanceof Table)) {continue;}Table table=(Table)object;if (table == null || hideTable(table,session)) {continue;}String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}DbObject grantee=r.getGrantee();int mask=r.getRightMask();for (Column column : table.getColumns()) {addPrivileges(rows,grantee,catalog,table,column.getName(),mask);}}break;}case COLLATIONS:{for (Locale l : Collator.getAvailableLocales()) {add(rows,CompareMode.getName(l),l.toString());}break;}case VIEWS:{for (Table table : getAllTables(session)) {if (!table.getTableType().equals(Table.VIEW)) {continue;}String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}TableView view=(TableView)table;add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getCreateSQL(),"NONE","NO",view.isInvalid() ? "INVALID" : "VALID",replaceNullWithEmpty(view.getComment()),"" + view.getId());}break;}case IN_DOUBT:{ArrayList<InDoubtTransaction> prepared=database.getInDoubtTransactions();if (prepared != null && admin) {for (InDoubtTransaction prep : prepared) {add(rows,prep.getTransactionName(),prep.getState());}}break;}case CROSS_REFERENCES:{for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {Constraint constraint=(Constraint)obj;if (!(constraint.getConstraintType().equals(Constraint.REFERENTIAL))) {continue;}ConstraintReferential ref=(ConstraintReferential)constraint;IndexColumn[] cols=ref.getColumns();IndexColumn[] refCols=ref.getRefColumns();Table tab=ref.getTable();Table refTab=ref.getRefTable();String tableName=identifier(refTab.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}int update=getRefAction(ref.getUpdateAction());int delete=getRefAction(ref.getDeleteAction());for (int j=0; j < cols.length; j++) {add(rows,catalog,identifier(refTab.getSchema().getName()),identifier(refTab.getName()),identifier(refCols[j].column.getName()),catalog,identifier(tab.getSchema().getName()),identifier(tab.getName()),identifier(cols[j].column.getName()),String.valueOf(j + 1),String.valueOf(update),String.valueOf(delete),identifier(ref.getName()),identifier(ref.getUniqueIndex().getName()),"" + DatabaseMetaData.importedKeyNotDeferrable);}}break;}case CONSTRAINTS:{for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {Constraint constraint=(Constraint)obj;String constraintType=constraint.getConstraintType();String checkExpression=null;IndexColumn[] indexColumns=null;Table table=constraint.getTable();if (hideTable(table,session)) {continue;}Index index=constraint.getUniqueIndex();String uniqueIndexName=null;if (index != null) {uniqueIndexName=index.getName();}String tableName=identifier(table.getName());if (!checkIndex(session,tableName,indexFrom,indexTo)) {continue;}if (constraintType.equals(Constraint.CHECK)) {checkExpression=((ConstraintCheck)constraint).getExpression().getSQL();} else if (constraintType.equals(Constraint.UNIQUE) || constraintType.equals(Constraint.PRIMARY_KEY)) {indexColumns=((ConstraintUnique)constraint).getColumns();} else if (constraintType.equals(Constraint.REFERENTIAL)) {indexColumns=((ConstraintReferential)constraint).getColumns();}String columnList=null;if (indexColumns != null) {StatementBuilder buff=new StatementBuilder();for (IndexColumn col : indexColumns) {buff.appendExceptFirst(",");buff.append(col.column.getName());}columnList=buff.toString();}add(rows,catalog,identifier(constraint.getSchema().getName()),identifier(constraint.getName()),constraintType,catalog,identifier(table.getSchema().getName()),tableName,uniqueIndexName,checkExpression,columnList,replaceNullWithEmpty(constraint.getComment()),constraint.getCreateSQL(),"" + constraint.getId());}break;}case CONSTANTS:{for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTANT)) {Constant constant=(Constant)obj;ValueExpression expr=constant.getValue();add(rows,catalog,identifier(constant.getSchema().getName()),identifier(constant.getName()),"" + DataType.convertTypeToSQLType(expr.getType()),replaceNullWithEmpty(constant.getComment()),expr.getSQL(),"" + constant.getId());}break;}case DOMAINS:{for (UserDataType dt : database.getAllUserDataTypes()) {Column col=dt.getColumn();add(rows,catalog,Constants.SCHEMA_MAIN,identifier(dt.getName()),col.getDefaultSQL(),col.isNullable() ? "YES" : "NO","" + col.getDataType().sqlType,"" + col.getPrecisionAsInt(),"" + col.getScale(),col.getDataType().name,"" + col.getSelectivity(),"" + col.getCheckConstraintSQL(session,"VALUE"),replaceNullWithEmpty(dt.getComment()),"" + dt.getCreateSQL(),"" + dt.getId());}break;}case TRIGGERS:{for (SchemaObject obj : database.getAllSchemaObjects(DbObject.TRIGGER)) {TriggerObject trigger=(TriggerObject)obj;Table table=trigger.getTable();add(rows,catalog,identifier(trigger.getSchema().getName()),identifier(trigger.getName()),trigger.getTypeNameList(),catalog,identifier(table.getSchema().getName()),identifier(table.getName()),"" + trigger.isBefore(),trigger.getTriggerClassName(),"" + trigger.getQueueSize(),"" + trigger.isNoWait(),replaceNullWithEmpty(trigger.getComment()),trigger.getCreateSQL(),"" + trigger.getId());}break;}case SESSIONS:{long now=System.currentTimeMillis();for (Session s : database.getSessions(false)) {if (admin || s == session) {Command command=s.getCurrentCommand();long start=s.getCurrentCommandStart();if (start == 0) {start=now;}add(rows,"" + s.getId(),s.getUser().getName(),new Timestamp(s.getSessionStart()).toString(),command == null ? null : command.toString(),new Timestamp(start).toString(),"" + s.containsUncommitted());}}break;}case LOCKS:{for (Session s : database.getSessions(false)) {if (admin || s == session) {for (Table table : s.getLocks()) {add(rows,table.getSchema().getName(),table.getName(),"" + s.getId(),table.isLockedExclusivelyBy(s) ? "WRITE" : "READ");}}}break;}case SESSION_STATE:{for (String name : session.getVariableNames()) {Value v=session.getVariable(name);add(rows,"@" + name,"SET @" + name + " "+ v.getSQL());}for (Table table : session.getLocalTempTables()) {add(rows,"TABLE " + table.getName(),table.getCreateSQL());}String[] path=session.getSchemaSearchPath();if (path != null && path.length > 0) {StatementBuilder buff=new StatementBuilder("SET SCHEMA_SEARCH_PATH ");for (String p : path) {buff.appendExceptFirst(", ");buff.append(StringUtils.quoteIdentifier(p));}add(rows,"SCHEMA_SEARCH_PATH",buff.toString());}String schema=session.getCurrentSchemaName();if (schema != null) {add(rows,"SCHEMA","SET SCHEMA " + StringUtils.quoteIdentifier(schema));}break;}case QUERY_STATISTICS:{QueryStatisticsData control=database.getQueryStatisticsData();if (control != null) {for (QueryStatisticsData.QueryEntry entry : control.getQueries()) {add(rows,entry.sqlStatement,"" + entry.count,"" + entry.executionTimeMinNanos / 1000d / 1000,"" + entry.executionTimeMaxNanos / 1000d / 1000,"" + entry.executionTimeCumulativeNanos / 1000d / 1000,"" + entry.executionTimeMeanNanos / 1000d / 1000,"" + entry.getExecutionTimeStandardDeviation() / 1000d / 1000,"" + entry.rowCountMin,"" + entry.rowCountMax,"" + entry.rowCountCumulative,"" + entry.rowCountMean,"" + entry.getRowCountStandardDeviation());}}break;}default :DbException.throwInternalError("type=" + type);}return rows;}  }
class C{  public static Calculator newCalculator(Point3d[] points,double vs,int offset,String name){  if (name.equals(names[0])) {    return new Ash2_0Algorithm(points,vs,offset);  } else   if (name.equals(names[1])) {    return new Ash2_1Algorithm(points,vs,offset);  } else   if (name.equals(names[2])) {    return new Ash2_2Algorithm(points,vs,offset);  } else   if (name.equals(names[3])) {    return new Analytic_AAlgorithm(points,vs,offset);  } else {    return new Ash2_1Algorithm(points,vs);  }}  }
class C{  public static double kthSmallestValue(int[] array,int k){  int[] index=new int[array.length];  for (int i=0; i < index.length; i++) {    index[i]=i;  }  return array[index[select(array,index,0,array.length - 1,k)]];}  }
class C{  private static void assertMapTypeOfString(@SuppressWarnings("rawtypes") Map columnMapping){  if (columnMapping == null) {    throw new ServerApiIllegalArgumentException("Column mapping of history log field names to internal field names must not be null!");  }  for (  Object key : columnMapping.keySet()) {    if (!((key instanceof String) && (columnMapping.get(key) instanceof String))) {      throw new ServerApiIllegalArgumentException(new StringBuilder("Map not valid when registering provider with key ").append(key).append("!").toString());    }  }}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassPasswordFieldUI();}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  protected void addListValue(final Map<String,Object> context,final BigDecimal listValue){  final String promoCode=getPromotionCode(context);  final Total total=getTotal(context);  setTotal(context,total.add(new TotalImpl(listValue,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,true,promoCode,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,false,null,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO,MoneyUtils.ZERO)));}  }
class C{  public VNXeCommandJob updateQuotaDirectory(String quotaId,final Long hardLimit,final Long softLimit,final long softGrace) throws VNXeException {  _logger.info("updating quota directory with ID: {} ","/" + quotaId);  FileSystemQuotaModifyParam param=new FileSystemQuotaModifyParam();  FileSystemQuotaConfigParam qcParam=new FileSystemQuotaConfigParam();  FileSystemQuotaRequests req=new FileSystemQuotaRequests(_khClient);  if (hardLimit > 0) {    param.setHardLimit(hardLimit);  }  if (softLimit > 0) {    param.setSoftLimit(softLimit);  }  if (softGrace > 0) {    qcParam.setGracePeriod(softGrace);    req.updateFileSystemQuotaConfig(quotaId,qcParam);  }  return req.updateFileSystemQuotaAsync(quotaId,param);}  }
class C{  public static void showError(Context c,String tag,String log,Exception e,String toast){  if (e != null)   Log.e(tag,log,e); else   Log.e(tag,log);  Toast.makeText(c,toast,Toast.LENGTH_SHORT).show();}  }
class C{  private void runTest() throws FileNotFoundException, CertificateException, KeyStoreException, IOException, NoSuchAlgorithmException {  Certificate cert;  CertificateFactory cf;  try (FileInputStream fi=new FileInputStream(CERT_PATH)){    cf=CertificateFactory.getInstance("X.509");    cert=cf.generateCertificate(fi);    KeyStore ks=KeyStore.getInstance(Utils.KeyStoreType.pkcs12.name());    ks.load(null,null);    ks.setCertificateEntry(ALIAS,cert);    Utils.saveKeyStore(ks,KEYSTORE_PATH,PASSWORD);    ks=Utils.loadKeyStore(KEYSTORE_PATH,Utils.KeyStoreType.pkcs12,PASSWORD);    final Certificate ksCert=ks.getCertificate(ALIAS);    if (!ksCert.equals(cert)) {      err.println("Orig cert: " + cert.toString());      err.println("Cert from keystore: " + ksCert.toString());      throw new RuntimeException("Certificates don't match");    }  } }  }
class C{  private static int changeKeyChangePolicy(String uname,String server){  ClientUser user=users.get(uname);  if (!user.isAllowsUnsignedChanges()) {    System.out.println("Allowing unsigned key changes for user " + uname);    user.allowUnsignedChanges();  } else {    System.out.println("Disallowing unsigned key changes for user " + uname);    user.disallowUnsignedChanges();  }  DSAPrivateKey prKey=user.loadChangePrivKey();  if (prKey == null) {    System.out.println("no private key for " + uname);    return ConsistencyErr.KEYSTORE_ERR;  }  KeyPair newCk=null;  try {    newCk=Keys.generateDSAKeyPair();  } catch (  NoSuchAlgorithmException e) {    Logging.error("[TestClient] " + e.getMessage());    user.unloadChangePrivKey();    return ClientUtils.INTERNAL_CLIENT_ERR;  }  byte[] sig=null;  try {    ULNChangeReq changeReq=ClientMessaging.buildULNChangeReqMsgProto(user.getUsername(),user.getKeyData(),(DSAPublicKey)newCk.getPublic(),user.isAllowsUnsignedChanges(),user.isAllowsPublicVisibility());    sig=Signing.dsaSign(prKey,changeReq.toByteArray());  } catch (  NoSuchAlgorithmException e) {    Logging.error("[TestClient] " + e.getMessage());    user.unloadChangePrivKey();    return ClientUtils.INTERNAL_CLIENT_ERR;  }  user.unloadChangePrivKey();  if (sig == null) {    Logging.error("Couldn't get a signature for the new policy");    return ClientUtils.INTERNAL_CLIENT_ERR;  }  user.saveChangeKeyPair(newCk);  ClientMessaging.sendSignedULNChangeReqProto(user,sig,server);  newCk=null;  AbstractMessage serverMsg=ClientMessaging.receiveRegistrationRespProto();  if (serverMsg == null) {    return ServerErr.MALFORMED_SERVER_MSG_ERR;  } else   if (serverMsg instanceof ServerResp) {    return getServerErr((ServerResp)serverMsg);  } else {    return ConsistencyErr.CHECK_PASSED;  }}  }
class C{  public synchronized void putMessage(Object obj){  fifo.addElement(obj);  numMessage++;  notifyAll();}  }
class C{  private boolean shouldMakeRequest(){  boolean shouldMakeRequest=lastRequestCompletedTime == -1;  shouldMakeRequest|=next != null;  shouldMakeRequest|=(haveMorePages && conf.pagination.mode != PaginationMode.LINK_HEADER);  shouldMakeRequest|=System.currentTimeMillis() > lastRequestCompletedTime + conf.pollingInterval && conf.httpMode == HttpClientMode.POLLING;  return shouldMakeRequest;}  }
class C{  @Ignore @Test public void testInDecompositionWithFunctionalIndex() throws Exception {}  }
class C{  public InlineQueryResultCachedSticker.InlineQueryResultCachedStickerBuilder id(String id){  this.id=id;  return this;}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Document";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("RegistryNumber",registryNumber);  bdr.addSimpleElement("Code",code);  bdr.addSimpleElement("Guid",guid);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  private static File unpackNar(final File nar,final File baseWorkingDirectory) throws IOException {  final File narWorkingDirectory=new File(baseWorkingDirectory,nar.getName() + "-unpacked");  if (!narWorkingDirectory.exists()) {    unpack(nar,narWorkingDirectory,calculateMd5sum(nar));  } else {    final byte[] narMd5=calculateMd5sum(nar);    final File workingHashFile=new File(narWorkingDirectory,HASH_FILENAME);    if (!workingHashFile.exists()) {      FileUtils.deleteFile(narWorkingDirectory,true);      unpack(nar,narWorkingDirectory,narMd5);    } else {      final byte[] hashFileContents=Files.readAllBytes(workingHashFile.toPath());      if (!Arrays.equals(hashFileContents,narMd5)) {        logger.info("Contents of nar {} have changed. Reloading.",new Object[]{nar.getAbsolutePath()});        FileUtils.deleteFile(narWorkingDirectory,true);        unpack(nar,narWorkingDirectory,narMd5);      }    }  }  return narWorkingDirectory;}  }
class C{  public void run(){  analysis.log("CorpusLoader thread started: will wake up every " + CORPUS_RELOAD_INTERVAL + " ms");  try {    Thread.sleep(CORPUS_RELOAD_INTERVAL);    while (true) {      if (analysis.getLastCorpusLoadTime() < JDBCBayesianAnalyzer.getLastDatabaseUpdateTime()) {        analysis.log("Reloading Corpus ...");        try {          analysis.loadData(analysis.datasource.getConnection());          analysis.log("Corpus reloaded");        } catch (        java.sql.SQLException se) {          analysis.log("SQLException: ",se);        }      }      if (Thread.interrupted()) {        break;      }      Thread.sleep(CORPUS_RELOAD_INTERVAL);    }  } catch (  InterruptedException ex) {    interrupt();  }}  }
class C{  public void clear(FacesContext facesContext,Map<String,Object> viewMap){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Clearing @ViewScoped CDI beans for given view map: {0}");  }  Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,viewMap);  if (contextMap != null) {    destroyBeans(viewMap,contextMap);  }}  }
class C{  public boolean isHighlighted(){  return mHighlighted;}  }
class C{  private boolean isMagic(String expression){  return StringUtils.startsWith(expression,MAGIC_PREFIX);}  }
class C{  public RequestBuilder withRunAs(String runAs){  Preconditions.checkArgument(!Strings.isNullOrEmpty(runAs),"Run As is null or empty");  this.runAs=runAs;  return this;}  }
class C{  protected String doIt() throws java.lang.Exception {  if (m_DeleteOldImported) {    int no=0;    for (    X_I_Forecast forecast : getRecords(true,false)) {      forecast.deleteEx(true);      no++;    }    log.fine("Delete Old Impored =" + no);  }  fillIDValues();  importRecords();  return "Imported: " + imported + ", Not imported: "+ notimported;}  }
class C{  public static int nextGeometric(double p,MersenneTwisterFast randomGenerator){  double u=randomGenerator.nextDouble();  return (int)(Math.log(u) / Math.log(1.0 - p));}  }
class C{  public final BooleanProperty resizableProperty(){  return stageResizableProperty;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  public synchronized void log(String msg){  LogEvent e;  debug(msg);  if (getLogListeners().size() == 0) {    System.err.println(msg);    return;  }  e=new LogEvent(this,msg);  for (  LogListener l : getLogListeners())   l.logMessage(e);}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  public T caseNullType(NullType object){  return null;}  }
class C{  @Override public void resolve(SerializerProvider provider) throws JsonMappingException {  if (_staticTyping && _elementSerializer == null) {    _elementSerializer=provider.findValueSerializer(_elementType,_property);  }}  }
class C{  public void mouseEntered(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mouseEntered(e);    }  } else {    super.mouseEntered(e);  }}  }
class C{  public void update(AnActionEvent event){  Presentation presentation=event.getPresentation();  presentation.setIcon(icon);  presentation.setText(CommonBundle.getHelpButtonText());}  }
class C{  public BulkRequest add(BytesReference data,@Nullable String defaultIndex,@Nullable String defaultType) throws Exception {  return add(data,defaultIndex,defaultType,null,null,null,true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected ElemTemplateElement findCommonAncestor(MultistepExprHolder head){  int numExprs=head.getLength();  ElemTemplateElement[] elems=new ElemTemplateElement[numExprs];  int[] ancestorCounts=new int[numExprs];  MultistepExprHolder next=head;  int shortestAncestorCount=10000;  for (int i=0; i < numExprs; i++) {    ElemTemplateElement elem=getElemFromExpression(next.m_exprOwner.getExpression());    elems[i]=elem;    int numAncestors=countAncestors(elem);    ancestorCounts[i]=numAncestors;    if (numAncestors < shortestAncestorCount) {      shortestAncestorCount=numAncestors;    }    next=next.m_next;  }  for (int i=0; i < numExprs; i++) {    if (ancestorCounts[i] > shortestAncestorCount) {      int numStepCorrection=ancestorCounts[i] - shortestAncestorCount;      for (int j=0; j < numStepCorrection; j++) {        elems[i]=elems[i].getParentElem();      }    }  }  ElemTemplateElement first=null;  while (shortestAncestorCount-- >= 0) {    boolean areEqual=true;    first=elems[0];    for (int i=1; i < numExprs; i++) {      if (first != elems[i]) {        areEqual=false;        break;      }    }    if (areEqual && isNotSameAsOwner(head,first) && first.canAcceptVariables()) {      if (DIAGNOSE_MULTISTEPLIST) {        System.err.print(first.getClass().getName());        System.err.println(" at   " + first.getSystemId() + " Line "+ first.getLineNumber());      }      return first;    }    for (int i=0; i < numExprs; i++) {      elems[i]=elems[i].getParentElem();    }  }  assertion(false,"Could not find common ancestor!!!");  return null;}  }
class C{  public void populateDeviceInfoMetrics(Map<String,String> runMetrics){  mDeviceInfo.populateMetrics(runMetrics);}  }
class C{  public static String createQueryString(Map<String,? extends Object> options) throws URISyntaxException {  try {    if (options.size() > 0) {      StringBuilder rc=new StringBuilder();      boolean first=true;      List<String> keys=new ArrayList<>();      keys.addAll(options.keySet());      Collections.sort(keys);      for (      String key : keys) {        if (first) {          first=false;        } else {          rc.append("&");        }        String value=(String)options.get(key);        rc.append(URLEncoder.encode(key,"UTF-8"));        rc.append("=");        rc.append(URLEncoder.encode(value,"UTF-8"));      }      return rc.toString();    } else {      return "";    }  } catch (  UnsupportedEncodingException e) {    throw (URISyntaxException)new URISyntaxException(e.toString(),"Invalid encoding").initCause(e);  }}  }
class C{  public synchronized void createBuffer(int w,int h){  if (w > 0 && h > 0 && (w != beanBufferWidth || h != beanBufferHeight)) {    beanBufferWidth=w;    beanBufferHeight=h;    createBufferImpl(w,h);  }}  }
class C{  @Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){  Server server=adapter.getItem(position);  if (server == null) {    startActivityForResult(new Intent(this,AddServerActivity.class),0);    return;  }  Intent intent=new Intent(this,ConversationActivity.class);  finish();  if (server.getStatus() == Status.DISCONNECTED && !server.mayReconnect()) {    server.setStatus(Status.PRE_CONNECTING);    intent.putExtra("connect",true);  }  intent.putExtra("serverId",server.getId());  startActivity(intent);}  }
class C{  private static String encode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  private static long countBytes(String s,boolean shortLength) throws UTFDataFormatException {  long result=0;  final int length=s.length();  for (int i=0; i < length; ++i) {    char ch=s.charAt(i);    if (ch != 0 && ch <= 127) {      ++result;    } else     if (ch <= 2047) {      result+=2;    } else {      result+=3;    }    if (shortLength && result > 65535) {      throw new UTFDataFormatException("String more than 65535 UTF bytes long");    }  }  return result;}  }
class C{  public boolean unlimited(){  return totalSize() == 0;}  }
class C{  boolean writeClass(DataOutputStream dd){  try {    dd.writeInt((int)magic);    dd.writeShort(minor_version);    dd.writeShort(major_version);    dd.writeShort(constant_pool_count);    if (!writeConstantPool(dd))     return false;    dd.writeShort(access_flags);    dd.writeShort(this_class);    dd.writeShort(super_class);    dd.writeShort(interfaces_count);    if (interfaces_count > 0) {      int j;      for (j=0; j < interfaces_count; j++)       dd.writeShort(interfaces[j]);    }    dd.writeShort(fields_count);    writeFields(dd);    dd.writeShort(methods_count);    writeMethods(dd);    dd.writeShort(attributes_count);    if (attributes_count > 0) {      writeAttributes(dd,attributes_count,attributes);    }  } catch (  IOException e) {    G.v().out.println("IOException with " + fn + ": "+ e.getMessage());    return false;  }  return true;}  }
class C{  public void onTaskFinished(BlockTask task,int x,int y,int z){}  }
class C{  private boolean isPositionIndex(int index){  return index >= 0 && index <= size;}  }
class C{  public CertificateAlgorithmId(DerInputStream in) throws IOException {  DerValue val=in.getDerValue();  algId=AlgorithmId.parse(val);}  }
class C{  public void selfAdd(LowerTriangularMatrix l){  if ((rows != l.rows) || (columns != l.columns)) {    throw new IllegalArgumentException("cannot add a " + l.rows + 'x'+ l.columns+ " matrix to a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    for (int index=i * columns; index < i * (columns + 1) + 1; ++index) {      data[index]+=l.data[index];    }  }}  }
class C{  public AttributeSelectionExampleSet(ExampleSet exampleSet,boolean[] selectionMask){  this.parent=(ExampleSet)exampleSet.clone();  if (selectionMask != null) {    if (selectionMask.length != exampleSet.getAttributes().size()) {      throw new IllegalArgumentException("Length of the selection mask must be equal to the parent's number of attributes.");    }    int counter=0;    Iterator<Attribute> i=this.parent.getAttributes().iterator();    while (i.hasNext()) {      i.next();      if (!selectionMask[counter]) {        i.remove();      }      counter++;    }  }}  }
class C{  public static X500Principal x500NameToX500Principal(X500Name name) throws IOException {  return new X500Principal(name.getEncoded());}  }
class C{  @Override public Sprite createRegion(final int x,final int y,final int width,final int height,final Object ref){  return new TileSprite(this,x,y,width,height,ref);}  }
class C{  public CompressionStatsDUnitTest(){  super();}  }
class C{  public void onNotify(String address,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid,byte[] value){  if (DBG)   Log.d(TAG,"onNotify() - Device=" + address + " UUID="+ charUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid.getUuid(),charInstId);  if (characteristic == null)   return;  characteristic.setValue(value);  try {    mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  private void purchaseSuccess(Purchase info){  AlertDialog.Builder build=new AlertDialog.Builder(this);  build.setMessage(String.format(getResources().getString(R.string.support_thanks),info.getSku()));  build.setPositiveButton(R.string.support_thanks_positive_btn,null);  build.create().show();  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  final SharedPreferences.Editor editor=sharedPreferences.edit();  editor.putInt(SupportUtils.SUPPORT_SHARED_KEY,SupportUtils.SUPPORT_DONATE);  editor.commit();}  }
class C{  public final boolean isInitiatingTransfer(){  return this.initiatingTransfer;}  }
class C{  public static int checkAndCorrect(BinaryMessage frame,int startIndex){  int syndrome=getSyndrome(frame,startIndex);  if (syndrome == 0) {    return 0;  }  BinaryMessage copy=frame.getSubMessage(startIndex,startIndex + 23);  int index=-1;  int syndromeWeight=MAX_CORRECTABLE_ERRORS;  int errors=0;  while (index < 23) {    if (index != -1) {      if (index > 0) {        copy.flip(index - 1);      }      copy.flip(index);      syndromeWeight=MAX_CORRECTABLE_ERRORS - 1;    }    syndrome=getSyndrome(copy,0);    if (syndrome > 0) {      for (int i=0; i < 23; i++) {        errors=Integer.bitCount(syndrome);        if (errors <= syndromeWeight) {          copy.xor(12,11,syndrome);          copy.rotateRight(i,0,22);          if (index >= 0) {            errors++;          }          int corrected=copy.getInt(0,22);          int original=frame.getInt(startIndex,startIndex + 22);          int errorCount=Integer.bitCount(original ^ corrected);          if (errorCount <= 3) {            frame.load(startIndex,23,corrected);          }          return errorCount;        } else {          copy.rotateLeft(0,22);          syndrome=getSyndrome(copy,0);        }      }      index++;    }  }  return 4;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.MAPPING_MODEL__NAME:    setName(NAME_EDEFAULT);  return;case MappingPackage.MAPPING_MODEL__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;case MappingPackage.MAPPING_MODEL__VERSION:setVersion(VERSION_EDEFAULT);return;case MappingPackage.MAPPING_MODEL__REFERENCES:getReferences().clear();return;case MappingPackage.MAPPING_MODEL__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case MappingPackage.MAPPING_MODEL__DISPLAYNAME:setDisplayname(DISPLAYNAME_EDEFAULT);return;case MappingPackage.MAPPING_MODEL__CATEGORY:setCategory(CATEGORY_EDEFAULT);return;case MappingPackage.MAPPING_MODEL__RULES:getRules().clear();return;case MappingPackage.MAPPING_MODEL__TARGET_PLATFORM:setTargetPlatform(TARGET_PLATFORM_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void showColumn(Object columnName){  for (  TableColumn column : allColumns) {    if (column.getHeaderValue().equals(columnName)) {      showColumn(column);      break;    }  }}  }
class C{  public void testGetContentAdapterService(){  System.out.println("getContentAdapterService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  ContentAdapterService result=instance.getContentAdapterService();  assertEquals(mockContentAdapterService,result);  setVerifyMode();}  }
class C{  private static void diagM2V(MatrixBlock in,MatrixBlock out){  int rlen=in.rlen;  for (int i=0; i < rlen; i++) {    double val=in.quickGetValue(i,i);    if (val != 0)     out.quickSetValue(i,0,val);  }}  }
class C{  public void assertTextArea(int[] path,String text){  TestUtils.assertTextArea(path,text);}  }
class C{  public IFeatureVector toFeatureVector(){  return toFeatureVector(true);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  private void updateLocalStorageData(LocalStorageData localStorageData,StorageData storageData) throws IOException, SerializationException {  localStorageData.copyStorageDataInformation(storageData);  writeLocalStorageDataToDisk(localStorageData);}  }
class C{  public BNetwork(Collection<BNode> nodes){  this();  addNodes(nodes);}  }
class C{  public Config toConfig(){  return new Config(this);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  private int readSurrogatesFromColumnBlock(BlocksChunkHolder blockChunkHolder,int index,DimColumnResolvedFilterInfo dimColumnEvaluatorInfo,int blockIndex){  if (dimColumnEvaluatorInfo.getDimension().isColumnar()) {    byte[] rawData=blockChunkHolder.getDimensionDataChunk()[blockIndex].getChunkData(index);    ByteBuffer byteBuffer=ByteBuffer.allocate(CarbonCommonConstants.INT_SIZE_IN_BYTE);    int dictionaryValue=CarbonUtil.getSurrogateKey(rawData,byteBuffer);    return dictionaryValue;  } else {    return readSurrogatesFromColumnGroupBlock(blockChunkHolder,index,dimColumnEvaluatorInfo,blockIndex);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATISTICS\"";  db.execSQL(sql);}  }
class C{  public static float atan(float fValue){  return (float)Math.atan(fValue);}  }
class C{  public static Test suite(){  return new TestSuite(TestPolynomialTerm.class);}  }
class C{  public AddressedProgrammer reserveAddressedProgrammer(boolean pLongAddress,int pAddress){  return null;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  AbstractUserNotification that=(AbstractUserNotification)o;  return !(notificationConfiguration != null ? !notificationConfiguration.equals(that.notificationConfiguration) : that.notificationConfiguration != null);}  }
class C{  @Override public ContinuousDistribution toContinuous(){  if (isContinuous()) {    Map<double[],Double> points=new HashMap<double[],Double>();    for (    Value v : getValues()) {      if (v instanceof ArrayVal) {        points.put(((ArrayVal)v).getArray(),getProb(v));      } else       if (v instanceof DoubleVal) {        points.put(new double[]{((DoubleVal)v).getDouble()},getProb(v));      }    }    DiscreteDensityFunction fun=new DiscreteDensityFunction(points);    return new ContinuousDistribution(variable,fun);  }  throw new RuntimeException("Distribution could not be converted to a " + "continuous distribution: " + variable);}  }
class C{  private void generate(String kind,ExpirationAttributes attrs,CustomExpiry custom) throws SAXException {  if (attrs == null) {    return;  }  handler.startElement("",kind,kind,EMPTY);  int timeout=attrs.getTimeout();  ExpirationAction action=attrs.getAction();  AttributesImpl atts=new AttributesImpl();  atts.addAttribute("","",TIMEOUT,"",String.valueOf(timeout));  String actionString;  if (action.equals(ExpirationAction.DESTROY)) {    actionString=DESTROY;  } else   if (action.equals(ExpirationAction.INVALIDATE)) {    actionString=INVALIDATE;  } else   if (action.equals(ExpirationAction.LOCAL_DESTROY)) {    actionString=LOCAL_DESTROY;  } else   if (action.equals(ExpirationAction.LOCAL_INVALIDATE)) {    actionString=LOCAL_INVALIDATE;  } else {    throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_EXPIRATIONACTION_0.toLocalizedString(action));  }  atts.addAttribute("","",ACTION,"",actionString);  handler.startElement("",EXPIRATION_ATTRIBUTES,EXPIRATION_ATTRIBUTES,atts);  if (custom != null) {    AttributesImpl endAtts=new AttributesImpl();    handler.startElement("",CUSTOM_EXPIRY,CUSTOM_EXPIRY,endAtts);    generate((Declarable)custom,false);    handler.endElement("",CUSTOM_EXPIRY,CUSTOM_EXPIRY);  }  handler.endElement("",EXPIRATION_ATTRIBUTES,EXPIRATION_ATTRIBUTES);  handler.endElement("",kind,kind);}  }
class C{  public HotPixel(Coordinate pt,double scaleFactor,LineIntersector li){  originalPt=pt;  this.pt=pt;  this.scaleFactor=scaleFactor;  this.li=li;  if (scaleFactor <= 0)   throw new IllegalArgumentException("Scale factor must be non-zero");  if (scaleFactor != 1.0) {    this.pt=new Coordinate(scale(pt.x),scale(pt.y));    p0Scaled=new Coordinate();    p1Scaled=new Coordinate();  }  initCorners(this.pt);}  }
class C{  List<String> parseRedisAddress(String address,int defaultPort){  List<String> list=new ArrayList<>();  String[] array=address.split(",");  for (  String s : array) {    if (!s.contains(":"))     s=s + ":" + defaultPort;    list.add(s);  }  return list;}  }
class C{  public void initialize(Body b1,Body b2,Vec2 anchor,Vec2 axis){  bodyA=b1;  bodyB=b2;  bodyA.getLocalPointToOut(anchor,localAnchorA);  bodyB.getLocalPointToOut(anchor,localAnchorB);  bodyA.getLocalVectorToOut(axis,localAxisA);  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @VisibleForTesting void runPipeline(){  runPipeline(null);}  }
class C{  private void doAcquireInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  private static void addChildren(Lop node,ArrayList<Lop> node_v,ArrayList<Lop> exec_n){  if (exec_n.contains(node) && node.getExecLocation() != ExecLocation.ControlProgram) {    if (!node_v.contains(node)) {      node_v.add(node);      if (LOG.isTraceEnabled())       LOG.trace("      Added child " + node.toString());    }  }  if (!exec_n.contains(node))   return;  for (  Lop n : node.getInputs()) {    addChildren(n,node_v,exec_n);  }}  }
class C{  public Instrumenter withFrequency(int frequency){  this.frequency=frequency;  return this;}  }
class C{  private void createManager(){  final WroManager manager=victim.create();  processorsFactory=manager.getProcessorsFactory();  uriLocatorFactory=(ConfigurableLocatorFactory)AbstractDecorator.getOriginalDecoratedObject(manager.getUriLocatorFactory());}  }
class C{  public Object clone(){  GraphicContext copy=new GraphicContext(width,height);  copy.bufferedImageGraphics=this.bufferedImageGraphics;  copy.setTransform(this.transform);  copy.setPaint(this.paint);  copy.setStroke(this.stroke);  copy.setComposite(this.composite);  if (clip != null)   copy.clip=new GeneralPath(clip); else   copy.clip=null;  copy.setRenderingHints((RenderingHints)this.hints.clone());  copy.setFont(this.font);  copy.setBackground(this.background);  return copy;}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public static String stringFor(int n){switch (n) {case CU_TR_FILTER_MODE_POINT:    return "CU_TR_FILTER_MODE_POINT";case CU_TR_FILTER_MODE_LINEAR:  return "CU_TR_FILTER_MODE_LINEAR";}return "INVALID CUfilter_mode: " + n;}  }
class C{  public int send(byte[] buffer,int len) throws IOException {  return send(buffer,0,len);}  }
class C{  public static void loadCompilationUnits(Configuration configuration,FileSpec fileSpec,SourceList sourceList,SourcePath sourcePath,ResourceContainer resources,ResourceBundlePath bundlePath,int checksum,RandomAccessFile f,String cacheName) throws IOException {  loadCompilationUnits(configuration,fileSpec,sourceList,sourcePath,resources,bundlePath,null,null,new int[]{checksum,checksum,checksum,checksum},null,null,null,f,cacheName,null);}  }
class C{  boolean isCaseSensitive(){  return caseSensitive;}  }
class C{  public static long floorMod(final long x,final long y){  return x - floorDiv(x,y) * y;}  }
class C{  protected boolean sameElement(Element element1,Element element2){  if (!element1.getName().equals(element2.getName())) {    return false;  }  List<Element> children1=element1.getChildren();  List<Element> children2=element2.getChildren();  if (children1.size() != children2.size()) {    return false;  }  if (children1.isEmpty()) {    return sameContent(element1,element2);  }  for (int i=0; i < children1.size(); i++) {    if (!sameElement(children1.get(i),children2.get(i))) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.158 -0400",hash_original_method="C049CEFDA7A5BCB5BA0800C3390BB89B",hash_generated_method="6F48A97CC72605DE2FEBC8CF1D078A6D") public AtomicReferenceArray(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    result=(int)(getPaddingLeft() + getPaddingRight() + (itemCount * 2 * mRadius)+ (itemCount - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private boolean convertNonCorrelatedSubQuery(SubQuery subQuery,Blackboard bb,RelNode converted,boolean isExists){  SqlCall call=(SqlBasicCall)subQuery.node;  if (subqueryConverter.canConvertSubquery() && isSubQueryNonCorrelated(converted,bb)) {    RexNode constExpr=mapConvertedNonCorrSubqs.get(call);    if (constExpr == null) {      constExpr=subqueryConverter.convertSubquery(call,this,isExists,isExplain);    }    if (constExpr != null) {      subQuery.expr=constExpr;      mapConvertedNonCorrSubqs.put(call,constExpr);      return true;    }  }  return false;}  }
class C{  public void preWrite(@Nullable String clsName){  out.position(out.position() + GridBinaryMarshaller.DFLT_HDR_LEN);  if (clsName != null)   doWriteString(clsName);}  }
class C{  public void remove(T object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.remove(object);    }  } else {    mObjects.remove(object);  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @Override public void onClick(View v){  if (v == mBuyButton) {    if (Consts.DEBUG) {      Log.d(TAG,"buying: " + mItemName + " sku: "+ mSku);    }    if (mManagedType != Managed.SUBSCRIPTION && !mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_INAPP,mPayloadContents)) {      showDialog(DIALOG_BILLING_NOT_SUPPORTED_ID);    } else     if (!mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_SUBSCRIPTION,mPayloadContents)) {      showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);    }  } else   if (v == mEditPayloadButton) {    showPayloadEditDialog();  } else   if (v == mEditSubscriptionsButton) {    editSubscriptions();  }}  }
class C{  public int navigateRelative(int rowChange){  return navigate(m_currentRow + rowChange);}  }
class C{  synchronized public void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  log.debug("write CV=" + CV + " val="+ val);  useProgrammer(p);  _progRead=false;  progState=COMMANDSENT;  _val=val;  _cv=CV;  if (_memo.getCommandStation().opsModepacket(mAddress,mLongAddr,CV,val) != null) {    javax.swing.Timer t=new javax.swing.Timer(250,null);    t.setRepeats(false);    t.start();  } else {    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public Boolean isFixedHomePosition(){  return fixedHomePosition;}  }
class C{  public String etag(){  return this.etag;}  }
class C{  public JRangeSlider(BoundedRangeModel model,int orientation,int direction){  super.setFocusable(true);  this.model=model;  this.orientation=orientation;  this.direction=direction;  setForeground(Color.LIGHT_GRAY);  this.lstnr=createListener();  model.addChangeListener(lstnr);  addMouseListener(this);  addMouseMotionListener(this);  addKeyListener(this);}  }
class C{  public MemcacheClientBuilder<V> withMaxSetLength(final int maxSetLength){  this.maxSetLength=maxSetLength;  return this;}  }
class C{  public static Point toSwtPoint(final java.awt.Point p){  return new Point(p.x,p.y);}  }
class C{  @Override public void showSearchError(){  showToast("Search error");}  }
class C{  protected KeyListener createKeyListener(){  return null;}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  public static String arrayCombine(String[] list,char separatorChar){  StatementBuilder buff=new StatementBuilder();  for (  String s : list) {    buff.appendExceptFirst(String.valueOf(separatorChar));    if (s == null) {      s="";    }    for (int j=0, length=s.length(); j < length; j++) {      char c=s.charAt(j);      if (c == '\\' || c == separatorChar) {        buff.append('\\');      }      buff.append(c);    }  }  return buff.toString();}  }
class C{  public static BytesRef deepCopyOf(BytesRef other){  BytesRef copy=new BytesRef();  copy.bytes=Arrays.copyOfRange(other.bytes,other.offset,other.offset + other.length);  copy.offset=0;  copy.length=other.length;  return copy;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void testSetIsForward(){  boolean forward=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setIsForward(forward);}  }
class C{  public Builder port(int port){  this.innerZkPort=port;  return this;}  }
class C{  public GraphScore(Graph dag){  this.dag=dag;  this.variables=new ArrayList<>();  for (  Node node : dag.getNodes()) {    if (node.getNodeType() == NodeType.MEASURED) {      this.variables.add(node);    }  }}  }
class C{  public void testCertPathBuilder06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathBuilder.getInstance(null,defaultProviderName);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof Collection) {    JSONArray.writeJSONString((Collection)value,out);    return;  }  if (value instanceof byte[]) {    JSONArray.writeJSONString((byte[])value,out);    return;  }  if (value instanceof short[]) {    JSONArray.writeJSONString((short[])value,out);    return;  }  if (value instanceof int[]) {    JSONArray.writeJSONString((int[])value,out);    return;  }  if (value instanceof long[]) {    JSONArray.writeJSONString((long[])value,out);    return;  }  if (value instanceof float[]) {    JSONArray.writeJSONString((float[])value,out);    return;  }  if (value instanceof double[]) {    JSONArray.writeJSONString((double[])value,out);    return;  }  if (value instanceof boolean[]) {    JSONArray.writeJSONString((boolean[])value,out);    return;  }  if (value instanceof char[]) {    JSONArray.writeJSONString((char[])value,out);    return;  }  if (value instanceof Object[]) {    JSONArray.writeJSONString((Object[])value,out);    return;  }  out.write(value.toString());}  }
class C{  public void test_DELETE_accessPath_delete_c() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long mutationResult=doDeleteWithAccessPath(null,null,null,new URIImpl("http://www.bigdata.com/"));  assertEquals(3,mutationResult);}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  public Logo(String url,ImageType type){  super(url,type);}  }
class C{  public IntIterator columnRows(IntIterator rows,int col){  return new ColumnRowIterator(rows,col);}  }
class C{  public BenchmarkConfig(ParameterTool parameterTool){  this.parameters=parameterTool;  this.loadTargetHz=parameterTool.getInt("load.target.hz",400_000);  this.timeSliceLengthMs=parameterTool.getInt("load.time.slice.length.ms",100);  this.useLocalEventGenerator=parameters.has("use.local.event.generator");  this.numCampaigns=parameterTool.getInt("num.campaigns",1_000_000);  this.kafkaTopic=parameterTool.getRequired("kafka.topic");  this.redisHost=parameterTool.get("redis.host","localhost");  this.redisDb=parameterTool.getInt("redis.db",0);  this.redisFlush=parameterTool.has("redis.flush");  this.numRedisThreads=parameterTool.getInt("redis.threads",20);  this.akkaZookeeperQuorum=parameterTool.get("akka.zookeeper.quorum","localhost");  this.akkaZookeeperPath=parameterTool.get("akka.zookeeper.path","/akkaQuery");  this.windowSize=parameterTool.getLong("window.size",10_000);  this.checkpointInterval=parameterTool.getLong("flink.checkpoint.interval",0);  this.checkpointsEnabled=checkpointInterval > 0;  this.checkpointUri=parameterTool.get("flink.checkpoint.uri","");  this.checkpointToUri=checkpointUri.length() > 0;}  }
class C{  public JpaTargetFilterQuery(String name,String query,JpaDistributionSet autoAssignDistributionSet){  this.name=name;  this.query=query;  this.autoAssignDistributionSet=autoAssignDistributionSet;}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  this.proxy=null;}  }
class C{  public void addCertificate(X509Certificate x509certificate) throws XMLSecurityException {  this.add(new XMLX509Certificate(this.doc,x509certificate));}  }
class C{  public static double quantile(double y,double shape,double scale){  final GammaDistribution g=new GammaDistribution(shape,scale);  return 1 / g.quantile(1 - y);}  }
class C{  public EaseOutIn(){}  }
class C{  void updateKeeper(SolrZooKeeper keeper) throws InterruptedException {  SolrZooKeeper oldKeeper=this.keeper;  this.keeper=keeper;  if (oldKeeper != null) {    oldKeeper.close();  }  if (isClosed)   this.keeper.close();}  }
class C{  public void startAuthActivity(Context context,Bundle extras){  if (!startDelegateActivity(context,delegate.getAuthStartIntent(),extras)) {    startActivity(context,extras,AuthActivity.class);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void add(AbstractButton b){  if (b == null) {    return;  }  buttons.addElement(b);  if (b.isSelected()) {    if (selection == null) {      selection=b.getModel();    } else {      b.setSelected(false);    }  }  b.getModel().setGroup(this);}  }
class C{  protected IntType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public static double ceil(double a){  return 0.0d;}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  private void joinBid2A(JClass jc,Set<URI> selectionUris){  JClass joinToClass=lookupAlias(jc.joinToAlias);  String joinToField=jc.getJoinToField();  Set<URI> bURIs=selectionUris;  if (bURIs == null) {    bURIs=engine.queryByType(jc.getClazz());  }  jc.setCacheValid(true);  boolean aIndexed=joinToClass.getMetaData().isIndexed(joinToField);  if (!aIndexed || joinToClass.getUris().size() < bURIs.size()) {    Iterator aIter=joinToClass.iterator(engine);    while (aIter.hasNext()) {      DataObject object=(DataObject)aIter.next();      Method method=getGettr(joinToClass,joinToField);      if (method == null) {        throw new JoinerException("Cannot find gettr for join: " + jc.getField());      }      Object values=null;      try {        values=method.invoke(object);      } catch (      Exception ex) {        log.warn("failed to invoke {} ",method.getName());      }      for (      URI uri : bURIs) {        if (uriInObject(uri,values)) {          DataObject bobj=engine.queryObject(jc.getClazz(),uri);          if (testSelections(jc,bobj) == false) {            continue;          }          jc.addToJoinMap(object.getId(),uri);          jc.getUris().add(uri);          jc.addToCache(bobj);        }      }    }  } else {    for (    URI bURI : bURIs) {      Constraint constraint=joinToClass.getMetaData().buildConstraint(bURI,joinToClass.getClazz(),joinToField);      Set<URI> aURIs=engine.queryByConstraint(constraint);      for (      URI aURI : aURIs) {        if (!joinToClass.getUris().contains(aURI)) {          continue;        }        DataObject object=(DataObject)engine.queryObject(jc.getClazz(),bURI);        if (testSelections(jc,object) == false) {          continue;        }        jc.addToJoinMap(aURI,bURI);        jc.addToCache(object);        jc.getUris().add(bURI);      }    }  }}  }
class C{  public static boolean addFilesToExistingZipSevenZip(File tempApk,ArrayList<File> classesFiles){  ArrayList<String> cmds=new ArrayList<String>();  String seven[]=Zip.get7ZipCommand();  for (  String str : seven) {    cmds.add(str);  }  cmds.add(tempApk.getAbsolutePath());  for (  File f : classesFiles)   cmds.add(f.getAbsolutePath());  String[] cmd=new String[cmds.size()];  for (int i=0; i < cmds.size(); i++)   cmd[i]=cmds.get(i);  boolean sucess=(CmdUtils.runCommand(cmd) == 0);  if (!sucess) {    sucess=true;    for (    File f : classesFiles) {      try {        sucess=sucess && ZipTools.isFileinZip(f.getName(),new ZipFile(tempApk));      } catch (      ZipException e) {        e.printStackTrace();      }    }  }  return sucess;}  }
class C{  public VcpcAltRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public void assertSameEdges(Edge[] expected,Edge[] actual){  if (expected == null) {    throw new IllegalArgumentException("expected is null");  }  if (actual == null) {    fail("actual is null.");  }  expected=(Edge[])expected.clone();  assertEquals("length",expected.length,actual.length);  final int len=expected.length;  for (int i=0; i < len; i++) {    if (expected[i] == null) {      throw new IllegalArgumentException("expected[" + i + "] is null.");    }    if (actual[i] == null) {      fail("actual[" + i + "] is null.");    }  }  for (int i=0; i < len; i++) {    Edge actualEdge=actual[i];    boolean matched=false;    for (int j=0; j < len; j++) {      Edge expectedEdge=expected[j];      if (expectedEdge == null)       continue;      if (expectedEdge.src == actualEdge.src && expectedEdge.tgt == actualEdge.tgt) {        expected[j]=null;        matched=true;        break;      }    }    if (!matched) {      fail("unexpected edge: src=" + actualEdge.src + ", tgt="+ actual[i].tgt);    }  }}  }
class C{  public static long[][] preprocessMurmur3(final BitVector bv,final long seed){  long from=0;  final long length=bv.length();  long h1=0x9368e53c2f6af274L ^ seed;  long h2=0x586dcd208f7cd3fdL ^ seed;  long c1=0x87c37b91114253d5L;  long c2=0x4cf5ad432745937fL;  final int wordLength=(int)(length / (2 * Long.SIZE));  final long state[][]=new long[4][wordLength + 1];  long k1, k2;  int i=0;  state[0][i]=h1;  state[1][i]=h2;  state[2][i]=c1;  state[3][i]=c2;  for (i++; length - from >= Long.SIZE * 2; i++) {    k1=bv.getLong(from,from + Long.SIZE);    k2=bv.getLong(from + Long.SIZE,from+=2 * Long.SIZE);    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;    state[0][i]=h1;    state[1][i]=h2;    state[2][i]=c1;    state[3][i]=c2;  }  return state;}  }
class C{  public static FileEncodedImageAsync create(String fileName,byte[] placeholder,int width,int height){  return new FileEncodedImageAsync(fileName,placeholder,width,height);}  }
class C{  public static void addCustomChannelCommands(ContextMenu m){  if (channelCustomCommands != null) {    addCustomCommands(channelCustomCommands,m);  }}  }
class C{  public label addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (priority_1: ");  result.append(priority_1);  result.append(')');  return result.toString();}  }
class C{  public void reduce(Text key,Iterator<LinkNode> values,OutputCollector<Text,LinkNodes> output,Reporter reporter) throws IOException {  List<LinkNode> nodeList=new ArrayList<LinkNode>();  int numNodes=0;  while (values.hasNext()) {    LinkNode cur=values.next();    if (numNodes < maxInlinks) {      nodeList.add((LinkNode)WritableUtils.clone(cur,conf));      numNodes++;    } else {      break;    }  }  LinkNode[] linkNodesAr=nodeList.toArray(new LinkNode[nodeList.size()]);  LinkNodes linkNodes=new LinkNodes(linkNodesAr);  output.collect(key,linkNodes);}  }
class C{  public RunSetUpHqlStatement(Statement wrappedStatement,TestHiveServer testingHiveServer,HqlScript setUpHql){  this.wrappedStatement=wrappedStatement;  this.testingHiveServer=testingHiveServer;  this.setUpHql=setUpHql;}  }
class C{  public ItemGuardCreature(final Creature copy,final String itemType,final String questSlot,final String questState){  this(copy,itemType,questSlot,questState,0);}  }
class C{  public SootMethod(String name,List parameterTypes,Type returnType){  this(name,parameterTypes,returnType,0,Collections.<SootClass>emptyList());}  }
class C{  public int hashCode(){  return nodes.hashCode();}  }
class C{  private List<Activity> buildActivityList1(){  List<Activity> list=new ArrayList<Activity>();  t=0;  list.add(addActivity(0,0,1));  list.add(addActivity(1,0,1));  list.add(addActivity(2,0,2));  list.add(addActivity(3,0,1));  list.add(addActivity(4,0,1));  list.add(addActivity(5,0,2));  list.add(addActivity(6,0,2));  list.add(addActivity(7,0,1));  list.add(addActivity(8,0,2));  list.add(addActivity(9,0,1));  list.add(addActivity(10,0,1));  return list;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("");  doPost(request,response);}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public static void trace(String format,Object... args){  trace(null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected static void saveSessionData(HttpServletRequest request,UseCaseConf useCaseConf){  HttpSession session=request.getSession(true);  session.setAttribute(Keys.J_USECASECONF,useCaseConf);  session.setAttribute(Keys.J_USERNAME,getName(request));  Idioma idioma=new Idioma();  session.setAttribute(Keys.J_IDIOMA,idioma.getIdioma(request));  session.setAttribute(Keys.J_NUM_IDIOMA,idioma.getNumIdioma(request));  session.setAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_ID_ENTIDAD,useCaseConf.getEntidadId());  session.setAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_USUARIO,useCaseConf.getUserName());  session.setAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_KEY_SESION_USUARIO_ADM,useCaseConf.getUserName());  session.setAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_KEY_SESION_USUARIO_ADM_ENTIDAD,useCaseConf.getEntidadId());}  }
class C{  private JFreeChart createChart(PieDataset dataset,String title){  JFreeChart chart=ChartFactory.createPieChart3D(title,dataset,true,true,false);  PiePlot3D plot=(PiePlot3D)chart.getPlot();  plot.setBackgroundPaint(Color.black);  plot.setStartAngle(290);  plot.setDirection(Rotation.CLOCKWISE);  plot.setForegroundAlpha(0.5f);  chart.setBackgroundPaint(Color.black);  return chart;}  }
class C{  public PLListenerManagerBase(){  super();}  }
class C{  public XY2Links(final Network network,final ActivityFacilities facilities){  super();  this.network=network;  this.facilities=facilities;}  }
class C{  @Override public TreeSet<GeoLocation> find(final String anyname,final boolean locationexact){  final HashSet<Integer> r=new HashSet<Integer>();  List<Integer> c;  final StringBuilder an=new StringBuilder(anyname);  if (locationexact) {    c=this.name2ids.get(an);    if (c != null) {      r.addAll(c);    }  } else {    final SortedMap<StringBuilder,List<Integer>> cities=this.name2ids.tailMap(an);    for (    final Map.Entry<StringBuilder,List<Integer>> e : cities.entrySet()) {      if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(e.getKey(),an)) {        r.addAll(e.getValue());      } else {        break;      }    }    c=this.kfz2ids.get(an);    if (c != null) {      r.addAll(c);    }    c=this.predial2ids.get(anyname);    if (c != null) {      r.addAll(c);    }    final Integer i=this.zip2id.get(anyname);    if (i != null) {      r.add(i);    }  }  final TreeSet<GeoLocation> a=new TreeSet<GeoLocation>();  for (  final Integer e : r) {    final GeoLocation w=this.id2loc.get(e);    if (w != null) {      a.add(w);    }  }  return a;}  }
class C{  public final void testEqualsObject(){  CodeSigner one=new CodeSigner(cpath,ts);  CodeSigner two=new CodeSigner(cpath,ts);  CodeSigner three=new CodeSigner(cpath,null);  CertPath cpath2=TestCertUtils.genCertPath(5,3);  CodeSigner four=new CodeSigner(cpath2,null);  assertTrue(one.equals(one));  assertTrue(one.equals(two));  assertTrue(two.equals(one));  assertFalse(one.equals(three));  assertFalse(three.equals(one));  assertTrue(three.equals(three));  assertFalse(three.equals(four));  assertFalse(one.equals(null));  assertFalse(one.equals(new Object()));}  }
class C{  public void stop(){  super.stop();  if (node != null)   node.close();}  }
class C{  public FindBugsWorker(IProject project,IProgressMonitor monitor) throws CoreException {  this((IResource)project,monitor);}  }
class C{  public static boolean isExecutable(int octalMode){  return hasPermission(ROLE_OWNER,PERM_EXECUTE,octalMode);}  }
class C{  public void read(ExceptionlessInputStream in){  sizes=new IVector();  sizes.read(in);  if (sizes.size() == 0) {    defaultCapacity2=defaultDefaultCapacity2;    vector=new double[defaultCapacity1][defaultCapacity2];  } else {    vector=new double[sizes.size()][];    for (int i=0; i < vector.length; ++i) {      vector[i]=new double[sizes.get(i)];      for (int j=0; j < vector[i].length; ++j)       vector[i][j]=in.readDouble();    }    defaultCapacity2=in.readInt();  }}  }
class C{  public static boolean isBlank(@Nullable final CharSequence charSequence){  if (charSequence == null) {    return true;  }  final int sequenceLength=charSequence.length();  if (sequenceLength == 0) {    return true;  }  for (int i=0; i < sequenceLength; i++) {    if (!Character.isWhitespace(charSequence.charAt(i))) {      return false;    }  }  return true;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  boolean haveFilesChanged=this.bitcoinController.getFileHandler().haveFilesChanged(perWalletModelData);  if (haveFilesChanged) {    perWalletModelData.setFilesHaveBeenChangedByAnotherProcess(true);    this.bitcoinController.fireFilesHaveBeenChangedByAnotherProcess(perWalletModelData);  } else {    String sendAddress=dataProvider.getAddress();    String sendLabel=dataProvider.getLabel();    String sendAmount=dataProvider.getAmount();    boolean showDialog=dataProvider.isShowUriDialog();    if (sendAddress != null) {      this.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_ADDRESS,sendAddress);    }    if (sendLabel != null) {      this.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_LABEL,sendLabel);    }    if (sendAmount != null) {      this.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_AMOUNT,sendAmount);    }    this.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_PERFORM_PASTE_NOW,"true");    controller.getModel().setUserPreference(BitcoinModel.OPEN_URI_USE_URI,"true");    controller.getModel().setUserPreference(BitcoinModel.OPEN_URI_SHOW_DIALOG,(Boolean.valueOf(showDialog)).toString());    showOpenUriDialog.setVisible(false);    controller.displayView(View.SEND_BITCOIN_VIEW);  }}  }
class C{  public VendingMachine(){  super();}  }
class C{  public void remove(KeyStroke key){  if (arrayTable != null) {    arrayTable.remove(key);  }}  }
class C{  @RequestMapping(value="/table/viewcount",method=RequestMethod.POST) @ResponseStatus(value=HttpStatus.OK) public void increaseViewCount(String fqdn){  tableEntityService.increaseViewCount(fqdn);}  }
class C{  @Override public void preCheckout(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {  String abortOnRevisionId=getAbortOnRevisionId(build);  if (!CommonUtils.isBlank(abortOnRevisionId)) {    PhabricatorCauseOfInterruption causeOfInterruption=new PhabricatorCauseOfInterruption(build.getUrl());    Run upstreamRun=getUpstreamRun(build);    RunList<AbstractBuild> runningBuilds=(RunList<AbstractBuild>)build.getProject().getBuilds();    for (    AbstractBuild runningBuild : runningBuilds) {      Executor executor=runningBuild.getExecutor();      Run runningBuildUpstreamRun=getUpstreamRun(runningBuild);      if (runningBuild.isBuilding() && runningBuild.number < build.number && abortOnRevisionId.equals(getAbortOnRevisionId(runningBuild)) && (upstreamRun == null || runningBuildUpstreamRun == null || !upstreamRun.equals(runningBuildUpstreamRun)) && executor != null) {        executor.interrupt(Result.ABORTED,causeOfInterruption);      }    }  }}  }
class C{  public Ceil(){  super(Number.class,Number.class);}  }
class C{  public static CommandEnvironment emptyEnvironment(){  return new CommandEnvironment(BaseEnvironment.EMPTY,new HashMap<String,String>());}  }
class C{  public void recordState(InternalDistributedMember provider,Map<ThreadIdentifier,EventSeqnoHolder> state){  this.initialImageProvider=provider;  StringBuffer sb=null;  if (logger.isDebugEnabled()) {    sb=new StringBuffer(200);    sb.append("Recording initial state for ").append(this.name).append(": ");  }  for (Iterator<Map.Entry<ThreadIdentifier,EventSeqnoHolder>> it=state.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<ThreadIdentifier,EventSeqnoHolder> entry=it.next();    if (sb != null) {      sb.append("\n  ").append(entry.getKey().expensiveToString()).append("; sequenceID=").append(entry.getValue());    }    recordSeqno(entry.getKey(),entry.getValue(),true);  }  if (sb != null) {    logger.debug(sb);  }  setInitialized();}  }
class C{  public static ReilInstruction createStr(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize thirdSize,final String thirdValue){  checkBinaryOperandSizeTypes(firstSize,thirdSize);  return createBinaryInstruction(ReilHelpers.OPCODE_STR,new CAddress(offset),firstSize,firstValue,thirdSize,thirdValue);}  }
class C{  public String validateQuery(String request,String... tests) throws Exception {  String res=query(request);  return validateXPath(res,tests);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Sage.removeNode("mru/recent_channels");  return null;}  }
class C{  public SelectClause distinct(){  this.distinct=true;  return this;}  }
class C{  public void antientropy(){  ArrayList<Node> candidates=new ArrayList<Node>();  for (  Node n : clusterConfig.getNodes())   if (rpcService.isConnected(n.getNodeId()))   candidates.add(n);  int numNodes=candidates.size();  if (numNodes == 0)   return;  Node[] nodes=candidates.toArray(new Node[numNodes]);  int rn=random.nextInt(numNodes);  antientropy(nodes[rn]);}  }
class C{  void createEdges(Number[] v){  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[0],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[5],v[3],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[2],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[8],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[7],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[9],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[9],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[6],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[5],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[10],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[10],v[4],EdgeType.DIRECTED);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  protected boolean isFeatureActive(KMLTraversalContext tc,DrawContext dc){  if (this.getVisibility() != null && !this.getVisibility())   return false;  KMLRegion region=this.getRegion();  if (region == null)   region=tc.peekRegion();  return region == null || region.isActive(tc,dc);}  }
class C{  private boolean looksLikeAnonymousTypeDecl(){  nextToken();  if (fToken == Symbols.TokenIDENT) {    nextToken();    while (fToken == Symbols.TokenOTHER) {      nextToken();      if (fToken != Symbols.TokenIDENT)       return false;      nextToken();    }    return fToken == Symbols.TokenNEW;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public FileParameter(OptionID optionID,FileType fileType){  super(optionID);  this.fileType=fileType;}  }
class C{  public boolean remove(Object targetChild){  return remove(targetChild,true);}  }
class C{  private Monitoring buildClient() throws GeneralSecurityException, IOException {  GoogleCredential credential=GoogleCredential.getApplicationDefault().createScoped(MonitoringScopes.all());  HttpTransport httpTransport=new NetHttpTransport();  JsonFactory jsonFactory=new JacksonFactory();  return new Monitoring.Builder(httpTransport,jsonFactory,credential).setApplicationName("MacroBase Ingester").build();}  }
class C{  public StringProperty lastReceivedPayloadProperty(){  return lastReceivedPayload;}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    dismissLoadingDialog();    refreshListOfFilesFragment();  } else {    dismissLoadingDialog();    try {      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  private void doWarmStartIfNotNull(Object warmSolution) throws FailedToFitException {  if (warmSolution != null) {    if (warmSolution instanceof SimpleWeightVectorModel) {      SimpleWeightVectorModel warm=(SimpleWeightVectorModel)warmSolution;      if (warm.numWeightsVecs() != ws.length)       throw new FailedToFitException("Warm solution has " + warm.numWeightsVecs() + " weight vectors instead of "+ ws.length);      for (int i=0; i < ws.length; i++) {        warm.getRawWeight(i).copyTo(ws[i]);        if (useBiasTerm)         bs[i]=warm.getBias(i);      }    } else     throw new FailedToFitException("Can not warm warm from " + warmSolution.getClass().getCanonicalName());  }}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);  fileArrayParams.remove(key);}  }
class C{  public static boolean isGlobalResourceCreatable(User user){  return !user.isAnonymous();}  }
class C{  public static String postPresignV4(String stringToSign,String secretKey,DateTime date,String region) throws NoSuchAlgorithmException, InvalidKeyException {  Signer signer=new Signer(null,null,date,region,null,secretKey);  signer.stringToSign=stringToSign;  signer.setSigningKey();  signer.setSignature();  return signer.signature;}  }
class C{  public Route newRoute(String name){  Route route=getRouteByName(name);  if (route == null) {    _id++;    route=new Route(Integer.toString(_id),name);    Integer oldSize=Integer.valueOf(_routeHashTable.size());    _routeHashTable.put(route.getId(),route);    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_routeHashTable.size()));  }  return route;}  }
class C{  public boolean isUnsubscribed(int restartableId){  Subscription subscription=restartableSubscriptions.get(restartableId);  return subscription == null || subscription.isUnsubscribed();}  }
class C{  public float filter(float[] samples,int offset,float mu){  assert (samples.length >= offset + 7);  int index=(int)(NSTEPS * mu);  float accumulator=(TAPS[index][7] * samples[offset]);  accumulator+=(TAPS[index][6] * samples[offset + 1]);  accumulator+=(TAPS[index][5] * samples[offset + 2]);  accumulator+=(TAPS[index][4] * samples[offset + 3]);  accumulator+=(TAPS[index][3] * samples[offset + 4]);  accumulator+=(TAPS[index][2] * samples[offset + 5]);  accumulator+=(TAPS[index][1] * samples[offset + 6]);  accumulator+=(TAPS[index][0] * samples[offset + 7]);  return accumulator * mGain;}  }
class C{  public static ConstantNode forBoolean(boolean i,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forInt(i ? 1 : 0)));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean containsAnalog(){  return this.getAnalogChannelMask() > 0;}  }
class C{  public UpdateRequest script(Script script){  this.script=script;  return this;}  }
class C{  public BigInteger[] generateSignature(byte[] message){  byte[] mRev=new byte[message.length];  for (int i=0; i != mRev.length; i++) {    mRev[i]=message[mRev.length - 1 - i];  }  BigInteger e=new BigInteger(1,mRev);  ECDomainParameters ec=key.getParameters();  BigInteger n=ec.getN();  BigInteger d=((ECPrivateKeyParameters)key).getD();  BigInteger r, s;  ECMultiplier basePointMultiplier=createBasePointMultiplier();  do {    BigInteger k;    do {      do {        k=new BigInteger(n.bitLength(),random);      } while (k.equals(ECConstants.ZERO));      ECPoint p=basePointMultiplier.multiply(ec.getG(),k).normalize();      r=p.getAffineXCoord().toBigInteger().mod(n);    } while (r.equals(ECConstants.ZERO));    s=(k.multiply(e)).add(d.multiply(r)).mod(n);  } while (s.equals(ECConstants.ZERO));  return new BigInteger[]{r,s};}  }
class C{  public void reset(){  setService(OBD_SVC_NONE,true);  cmdQueue.clear();  pidSupported.clear();  resetFixedPid();  PidPvs.clear();  tCodes.clear();  VidPvs.clear();}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public static boolean includesClasspathContainerWithContainerId(IJavaProject javaProject,String containerId) throws JavaModelException {  IClasspathEntry[] classpathEntries=javaProject.getRawClasspath();  int indexOfClasspathEntryContainer=ClasspathUtilities.indexOfClasspathEntryContainer(classpathEntries,containerId);  return indexOfClasspathEntryContainer >= 0;}  }
class C{  private Mode lookupCreateMode(String name){  if (name == null)   return null;  name=name.trim();  Mode mode=(Mode)modeMap.get(name);  if (mode == null) {    mode=new Mode(name,defaultBaseMode);    modeMap.put(name,mode);  }  return mode;}  }
class C{  public ObjectMatrix2D make(Object[][] values){  if (this == sparse)   return new SparseObjectMatrix2D(values); else   return new DenseObjectMatrix2D(values);}  }
class C{  public static void saveData(Map<String,List<double[]>> data,File file) throws IOException {  BufferedWriter bw=new BufferedWriter(new FileWriter(file));  for (  Entry<String,List<double[]>> classEntry : data.entrySet()) {    String classLabel=classEntry.getKey();    for (    double[] arr : classEntry.getValue()) {      String arrStr=Arrays.toString(arr).replaceAll("[\\]\\[\\s]+","");      bw.write(classLabel + "," + arrStr+ CR);    }  }  bw.close();}  }
class C{  public String convertSystemNameToAlternate(String systemName){  return (SerialAddress.convertSystemNameToAlternate(systemName));}  }
class C{  public static Workflow.Method restoreBlockSnapshotSessionMethod(URI systemURI,URI snapSessionURI){  return new Workflow.Method(RESTORE_SNAPSHOT_SESSION_METHOD,systemURI,snapSessionURI);}  }
class C{  public NodeIterator createNodeIterator(AbstractDocument doc,Node root,int whatToShow,NodeFilter filter,boolean entityReferenceExpansion) throws DOMException {  if (root == null) {    throw doc.createDOMException(DOMException.NOT_SUPPORTED_ERR,"null.root",null);  }  NodeIterator result=new DOMNodeIterator(doc,root,whatToShow,filter,entityReferenceExpansion);  if (iterators == null) {    iterators=new LinkedList();  }  iterators.add(result);  return result;}  }
class C{  public Context(NetworkParameters params,int eventHorizon,Coin feePerKb,boolean ensureMinRequiredFee){  this(params);  this.eventHorizon=eventHorizon;  this.feePerKb=feePerKb;  this.ensureMinRequiredFee=ensureMinRequiredFee;}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public static void assertCompileFails(String regex,int flag){  try {    Pattern.compile(regex,flag);    fail("Compiling Pattern with regex: " + regex + " and flag: "+ flag+ " passed, when it should have failed.");  } catch (  IllegalArgumentException e) {    if (!"Flags UNIX_LINES and COMMENTS unsupported".equals(e.getMessage())) {      throw e;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.218 -0400",hash_original_method="74B8316ED8B5F40365D8BD9CF002AB2D",hash_generated_method="953C50BB61ABB847A70272FFFA04A172") private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public XppReader(final Reader reader,final XmlPullParser parser){  this(reader,parser,new XmlFriendlyNameCoder());}  }
class C{  protected void doShutdown(){  shutdown=true;  if (shutdownHookThread != null && !shutdownHookThread.isAlive()) {    try {      Runtime.getRuntime().removeShutdownHook(shutdownHookThread);    } catch (    IllegalStateException e) {    }  }  stopWorkers(workers);  if (stats != null) {    stats.stop();  }  if (runlengthTimer != null) {    runlengthTimer.cancel();  }  int count=Config.parms.getInt("wk");  StringBuffer activethreads=new StringBuffer();  waiting:   while ((count-- != 0)) {    activethreads.setLength(0);    final Iterator<WorkerThread> iter=workers.iterator();    while (iter.hasNext()) {      final WorkerThread worker=iter.next();      if ((worker.getStatus() & WorkerThread.sENDED) == 0) {        activethreads.append(worker.getName());        activethreads.append(" ");        if ((worker.getStatus() & WorkerThread.sENDING) == 0 && count == 5) {          if (!worker.usesAsynchronousShutdownSignal()) {            Log.logger.log(Level.FINER,"Interrupting inactive WorkerThread {0}",worker.getName());            worker.interrupt();          }        }      }    }    if (activethreads.length() > 0) {      if (count % 10 == 0) {        Log.logger.log(Level.WARNING,"Waiting for ( {0} )",activethreads);      }    } else {      break waiting;    }    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }  }  removeController(this);}  }
class C{  public static final double[][] plusTimes(final double[][] m1,final double[][] m2,final double s2){  return plusTimesEquals(copy(m1),m2,s2);}  }
class C{  private void initCustomerAndBillingResult(boolean setPSPIdentifier,long supplierKey,boolean setDiscount,String totalAmount){  supplier.setKey(supplierKey);  supplier.setName("supplier_name");  supplier.setEmail("supplier_email");  supplier.setOrganizationId("supplier_id");  String discountEntry="";  if (setDiscount) {    discountEntry="<Discount discountNetAmount=\"50\" netAmountAfterDiscount=\"100\" netAmountBeforeDiscount=\"200\"/>";  }  billingResult=spy(new BillingResult());  billingResult.setChargingOrgKey(supplierKey);  billingResult.setOrganizationTKey(customer.getKey());  billingResult.setKey(1);  billingResult.setPeriodStartTime(123456789L);  billingResult.setPeriodEndTime(133456789L);  billingResult.setResultXML(String.format("<BillingDetails><Period endDate=\"1262300400000\" startDate=\"1259622000000\"/>" + "<OrganizationDetails><Email>the customer's email</Email><Name>Name of organization 1000</Name>" + "<Address>Address of organization 1000</Address></OrganizationDetails>"+ "<Subscriptions><Subscription id=\"sub\" purchaseOrderNumber=\"12345\">"+ "<PriceModels><PriceModel id=\"5\"><UsagePeriod endDate=\"1262300400000\" startDate=\"1259622000000\"/>"+ "<GatheredEvents/><PeriodFee basePeriod=\"MONTH\" basePrice=\"1000\" factor=\"1.0\" price=\"1000\"/>"+ "<UserAssignmentCosts basePeriod=\"MONTH\" basePrice=\"100\" factor=\"0.0\" numberOfUsersTotal=\"0\" price=\"0\"/>"+ "<PriceModelCosts amount=\"1000\"/></PriceModel></PriceModels>"+ "<SubscriptionCosts amount=\"1000\"/></Subscription>"+ "<Subscription id=\"sub2\" purchaseOrderNumber=\"\"><PriceModels>"+ "<PriceModel id=\"6\"><UsagePeriod endDate=\"1262300400000\" startDate=\"1260428424625\"/>"+ "<GatheredEvents/><PeriodFee basePeriod=\"WEEK\" basePrice=\"500\" factor=\"3.095197379298942\" price=\"1548\"/>"+ "<UserAssignmentCosts basePeriod=\"DAY\" basePrice=\"4\" factor=\"0.0\" numberOfUsersTotal=\"0\" price=\"0\"/><PriceModelCosts amount=\"1548\"/></PriceModel></PriceModels>"+ "<SubscriptionCosts amount=\"1548\"/></Subscription>"+ "<Subscription id=\"sub2\" purchaseOrderNumber=\"\"><PriceModels><PriceModel id=\"6\">"+ "<UsagePeriod endDate=\"1260039564578\" startDate=\"1259622000000\"/><GatheredEvents/>"+ "<PeriodFee basePeriod=\"WEEK\" basePrice=\"500\" factor=\"0.6904176223544973\" price=\"345\"/>"+ "<UserAssignmentCosts basePeriod=\"DAY\" basePrice=\"4\" factor=\"0.0\" numberOfUsersTotal=\"0\" price=\"0\"/>"+ "<PriceModelCosts amount=\"345\"/></PriceModel></PriceModels>"+ "<SubscriptionCosts amount=\"345\"/></Subscription>"+ "<Subscription id=\"sub3\" purchaseOrderNumber=\"\"><PriceModels><PriceModel id=\"7\">"+ "<UsagePeriod endDate=\"1261335624781\" startDate=\"1259780424671\"/><GatheredEvents/>"+ "<PeriodFee basePeriod=\"DAY\" basePrice=\"500\" factor=\"18.000001273148147\" price=\"9000\"/>"+ "<UserAssignmentCosts basePeriod=\"WEEK\" basePrice=\"4\" factor=\"0.0\" numberOfUsersTotal=\"0\" price=\"0\"/>"+ "<PriceModelCosts amount=\"9000\">%s<VAT percent='40' amount='312'/></PriceModelCosts></PriceModel></PriceModels>"+ "<SubscriptionCosts amount=\"9000\"/>"+ "</Subscription></Subscriptions>"+ "<OverallCosts currency=\"EUR\" grossAmount=\"%s\">"+ "%s<VAT percent='40' amount='312'/></OverallCosts></BillingDetails>",discountEntry,totalAmount,discountEntry));  billingResult.setSubscriptionKey(Long.valueOf(12345L));  billingResult.setCurrency(new SupportedCurrency("EUR"));  billingResult.setGrossAmount(new BigDecimal(totalAmount));  qs.setQueryResultList(new ArrayList<PaymentResult>());}  }
class C{  public static String lowerCase(String str){  if (str == null) {    return null;  }  return str.toLowerCase();}  }
class C{  private void processElementGamma(GeneratorSingleCluster cluster,Node cur){  double k=1.0;  double theta=1.0;  String kstr=((Element)cur).getAttribute(ATTR_K);  if (kstr != null && kstr.length() > 0) {    k=ParseUtil.parseDouble(kstr);  }  String thetastr=((Element)cur).getAttribute(ATTR_THETA);  if (thetastr != null && thetastr.length() > 0) {    theta=ParseUtil.parseDouble(thetastr);  }  Random random=cluster.getNewRandomGenerator();  Distribution generator=new GammaDistribution(k,theta,random);  cluster.addGenerator(generator);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  private Offer buildRechargeOffer(Context context){  String prefix=context.getString(R.string.you_added);  String suffix=context.getString(R.string.to_plan);  String body=String.format(context.getResources().getConfiguration().locale,"%s %d %s %s.",prefix,recharge.getCurrentAmount(),recharge.getUnits(),suffix);  Offer offer=new Offer(recharge.getTitle(),body,recharge.getDrawableIcon(),recharge.getCurrentCost(),"recharge",false,false,false);  offer.setType(type);  offer.setAmountAddedToCycle(recharge.getCurrentAmount());  return offer;}  }
class C{  final public void yyclose() throws java.io.IOException {  yy_atEOF=true;  yy_endRead=yy_startRead;  if (yy_reader != null)   yy_reader.close();}  }
class C{  protected void removeMarkers(){  for (int i=markerImage.size(); i > 0; i--) {    LocoIcon il=markerImage.get(i - 1);    if ((il != null) && (il.isActive())) {      markerImage.remove(i - 1);      il.remove();      il.dispose();      setDirty(true);    }  }  super.removeMarkers();  repaint();}  }
class C{  public ExecuteAddon(String addonId){  super();  addParameterToRequest("addonid",addonId);}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public Iterable<EAnnotationWrapper<A>> findAnnotationsByName(final String name){  checkNotNull(name,"name");  return from(annotationResolver.apply(annotatable)).filter(null);}  }
class C{  private IceSocketWrapper createServerSocket(InetAddress laddr,int preferredPort,int minPort,int maxPort,Component component) throws IllegalArgumentException, IOException, BindException {  this.checkPorts(preferredPort,minPort,maxPort);  int bindRetries=StackProperties.getInt(StackProperties.BIND_RETRIES,StackProperties.BIND_RETRIES_DEFAULT_VALUE);  int port=preferredPort;  for (int i=0; i < bindRetries; i++) {    try {      ServerSocket sock=new ServerSocket();      sock.setReuseAddress(true);      sock.bind(new InetSocketAddress(laddr,port));      IceSocketWrapper socket=new IceTcpServerSocketWrapper(sock,component);      if (logger.isLoggable(Level.FINEST)) {        logger.log(Level.FINEST,"just bound to: " + sock.getLocalSocketAddress());      }      return socket;    } catch (    SocketException se) {      logger.log(Level.INFO,"Retrying a bind because of a failure to bind to" + " address " + laddr + " and port "+ port+ " ("+ se.getMessage()+ ")");      logger.log(Level.INFO,"",se);    }    port++;    if (port > maxPort)     port=minPort;  }  throw new BindException("Could not bind to any port between " + minPort + " and "+ (port - 1));}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  delayForNfs();  InputStream inputStreamParser=null;  try {    final String printsOutputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,printsOutputFileNameTemplate);    inputStreamParser=new FileInputStream(printsOutputFilePath);    final Set<RawProtein<PrintsRawMatch>> parsedResults=parser.parse(inputStreamParser,printsOutputFilePath,signatureLibraryRelease);    RawMatch represantiveRawMatch=null;    int count=0;    for (    RawProtein<PrintsRawMatch> rawProtein : parsedResults) {      count+=rawProtein.getMatches().size();      if (represantiveRawMatch == null) {        if (rawProtein.getMatches().size() > 0) {          represantiveRawMatch=rawProtein.getMatches().iterator().next();        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Parsed out " + parsedResults.size() + " proteins with matches from file "+ printsOutputFilePath);      LOGGER.debug("A total of " + count + " matches from file "+ printsOutputFilePath);    }    printsMatchDAO.insertProteinMatches(parsedResults);    Long now=System.currentTimeMillis();    if (count > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        String signatureLibraryRelease=represantiveRawMatch.getSignatureLibraryRelease();        while (matchesFound < count) {          Utilities.sleep(waitTimeFactor * 1000);          matchesFound=printsMatchDAO.getActualRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease).size();          if (matchesFound < count) {            LOGGER.warn("Raw matches not yet committed - sleep for 5 seconds , count: " + count);            Utilities.verboseLog("Raw matches not yet committed - sleep for " + waitTimeFactor + " seconds, matches found: "+ matchesFound+ " matchesCount expected: "+ count);          }          Long timeTaken=System.currentTimeMillis() - now;          if (timeTaken > (waitTimeFactor * waitTimeFactor * 100* 1000)) {            LOGGER.warn("H2 database problem: failed to verify " + count + " matches in database for "+ represantiveRawMatch.getSignatureLibrary().getName()+ " after "+ timeTaken+ " ms "+ " - matches found : "+ matchesFound);            break;          }        }      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse Prints file " + printsOutputFileNameTemplate,e);  } finally {    if (inputStreamParser != null) {      try {        inputStreamParser.close();      } catch (      IOException e) {        LOGGER.error("Unable to close connection to the Prints output file located at " + printsOutputFileNameTemplate,e);      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.107 -0500",hash_original_method="588CB65AC18071EB5B02ABC642CC0A1A",hash_generated_method="C7BFA5CBEA1F09A3E6248BC6D75CCF70") private void loadStarted(String url,Bitmap favicon,int loadType,boolean isMainFrame){  mIsMainFrame=isMainFrame;  if (isMainFrame || loadType == FRAME_LOADTYPE_STANDARD) {    mLoadType=loadType;    if (isMainFrame) {      mCallbackProxy.onPageStarted(url,favicon);      mFirstLayoutDone=false;      mCommitted=false;      mWebViewCore.removeMessages(WebViewCore.EventHub.WEBKIT_DRAW);    }  }}  }
class C{  public S1Interval complement(){  if (lo() == hi()) {    return full();  }  return new S1Interval(hi(),lo(),true);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  protected void init(){  if (webConfig.canProcessJndiEntries() && !webConfig.isSet(BooleanWebContextInitParameter.DisableClientStateEncryption)) {    guard=new ByteArrayGuard();  } else {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"jsf.config.webconfig.enventry.clientencrypt");    }  }  stateTimeoutEnabled=webConfig.isSet(ClientStateTimeout);  if (stateTimeoutEnabled) {    String timeout=webConfig.getOptionValue(ClientStateTimeout);    try {      stateTimeout=Long.parseLong(timeout);    } catch (    NumberFormatException nfe) {      stateTimeout=Long.parseLong(ClientStateTimeout.getDefaultValue());    }  }  String size=webConfig.getOptionValue(ClientStateWriteBufferSize);  String defaultSize=ClientStateWriteBufferSize.getDefaultValue();  try {    csBuffSize=Integer.parseInt(size);    if (csBuffSize % 2 != 0) {      if (LOGGER.isLoggable(Level.WARNING)) {        LOGGER.log(Level.WARNING,"jsf.renderkit.resstatemgr.clientbuf_div_two",new Object[]{ClientStateWriteBufferSize.getQualifiedName(),size,defaultSize});      }      csBuffSize=Integer.parseInt(defaultSize);    } else {      csBuffSize/=2;      if (LOGGER.isLoggable(Level.FINE)) {        LOGGER.fine("Using client state buffer size of " + csBuffSize);      }    }  } catch (  NumberFormatException nfe) {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"jsf.renderkit.resstatemgr.clientbuf_not_integer",new Object[]{ClientStateWriteBufferSize.getQualifiedName(),size,defaultSize});    }    csBuffSize=Integer.parseInt(defaultSize);  }  debugSerializedState=webConfig.isOptionEnabled(BooleanWebContextInitParameter.EnableClientStateDebugging);}  }
class C{  public void removeStyleSheet(StyleSheet ss){synchronized (this) {    if (linkedStyleSheets != null) {      int index=linkedStyleSheets.indexOf(ss);      if (index != -1) {        linkedStyleSheets.removeElementAt(index);        unlinkStyleSheet(ss,index);        if (index == 0 && linkedStyleSheets.size() == 0) {          linkedStyleSheets=null;        }      }    }  }}  }
class C{  public void sendRegistrationId() throws AndroidAgentException {  Log.i(TAG,"EMM auto enrollment, GCM ID retrieval successful, updating enrollment");  DeviceInfo deviceInfo=new DeviceInfo(context);  DeviceInfoPayload deviceInfoPayload=new DeviceInfoPayload(context);  deviceInfoPayload.build();  String replyPayload=deviceInfoPayload.getDeviceInfoPayload();  String ipSaved=Constants.DEFAULT_HOST;  String prefIP=Preference.getString(context,Constants.PreferenceFlag.IP);  if (prefIP != null) {    ipSaved=prefIP;  }  if (!ipSaved.isEmpty()) {    ServerConfig utils=new ServerConfig();    utils.setServerIP(ipSaved);    String url=utils.getAPIServerURL(context) + Constants.DEVICE_ENDPOINT + deviceInfo.getDeviceId();    CommonUtils.callSecuredAPI(context,url,org.wso2.emm.agent.proxy.utils.Constants.HTTP_METHODS.PUT,replyPayload,EnrollmentService.this,Constants.GCM_REGISTRATION_ID_SEND_CODE);  } else {    Log.e(TAG,"There is no valid IP to contact the server");  }}  }
class C{  protected void connect(InetAddress address,int port) throws IOException {  connect(address.getHostAddress(),port);}  }
class C{  protected int drawSelectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(selected);  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.drawSelectedText(g,x,y,p0,p1);    }    char echoChar=f.getEchoChar();    int n=p1 - p0;    for (int i=0; i < n; i++) {      x=drawEchoCharacter(g,x,y,echoChar);    }  }  return x;}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public void suspendResumeBrokerService(String testName,BigDecimal discount,double operatorShare) throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker");  updateOperatorRevenueShare(operatorShare,supplService.getKey());  updatePartnerRevenueShares(15.0D,20.0D,supplService);  VendorData brokerData=setupNewBroker("2013-01-03 08:00:00");  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");  updateMarketplaceRevenueShare(10.0D,brokerData.getMarketplaceId(0));  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);  brokerService=publishActivateService(brokerData,brokerService);  subscribe(brokerCustomerData.getAdminUser(),"brokerSubscrDiscount",brokerService,"2013-08-01 12:00:00","ADMIN");  updateCustomerDiscount(supplierData.getAdminKey(),brokerCustomerData,discount,DateTimeHandling.calculateMillis("2013-08-01 08:00:00"),DateTimeHandling.calculateMillis("2013-08-31 23:00:00"));  setDateFactory("2013-08-10 07:00:00");  paymentSetup.deleteCustomerPaymentTypes(supplierData,brokerCustomerData.getOrganization());  setDateFactory("2013-08-27 12:00:00");  paymentSetup.reassignCustomerPaymentTypes(supplierData,brokerCustomerData.getOrganization());  resetCutOffDay(supplierData.getAdminKey());  cacheTestData(testName,new TestData(supplierData,brokerData));}  }
class C{  public void keyPressed(KeyEvent e){  if (log.isDebugEnabled()) {    log.debug("keyPressed: KeyCode= " + e.getKeyCode());  }  if (keyReleased) {    if (log.isDebugEnabled()) {      log.debug("Pressed");    }    for (int i=0; i < NUM_FUNCTION_BUTTONS; i++) {      if (functionButton[i].checkKeyCode(e.getKeyCode())) {        functionButton[i].changeState(!functionButton[i].isSelected());      }    }  }  keyReleased=false;}  }
class C{  public Item(){  itemMap=new TreeMap<Integer,IItem>();}  }
class C{  protected void updateAutoscroll(Point dragCursorLocn){  if (autoScroller != null)   autoScroller.updateLocation(dragCursorLocn);}  }
class C{  public static String toString(SQLItem item){  try {    return _toString(item);  } catch (  PageException e) {    try {      return "[" + toStringType(item.getType()) + "]";    } catch (    DatabaseException e1) {      return "";    }  }}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  area=trimMargin(area);  drawBorder(g2,area);  area=trimBorder(area);  area=trimPadding(area);  g2.setPaint(this.paint);  g2.fill(area);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.UNION_TYPE_EXPRESSION;}  }
class C{  public static TableView createTempView(Session session,User owner,String name,Query query,Query topQuery){  Schema mainSchema=session.getDatabase().getSchema(Constants.SCHEMA_MAIN);  String querySQL=query.getPlanSQL();  TableView v=new TableView(mainSchema,0,name,querySQL,query.getParameters(),null,session,false);  if (v.createException != null) {    throw v.createException;  }  v.setTopQuery(topQuery);  v.setOwner(owner);  v.setTemporary(true);  return v;}  }
class C{  public HighlightAnimation(View view){  this.view=view;  color=Color.YELLOW;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public LayerFilterParser(Element element) throws FilterException {  if (element.getAttribute("layer") == null) {    throw new MissingFilterPropertyException("layer",element);  }  layer=Numbers.parseInteger(element.getAttributeValue("layer"));  String coordinateProperty=element.getAttributeValue("coordinate");  if (coordinateProperty == null) {    throw new MissingFilterPropertyException("coordinate",element);  }  try {    coordinate=LayerFilter.Coordinate.valueOf(Strings.getTechnicalName(coordinateProperty));  } catch (  IllegalArgumentException e) {    throw new InvalidFilterPropertyException("coordinate",element);  }}  }
class C{  public static boolean errorDialogWithStackTrace(String msg,Throwable t){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  t.printStackTrace(pw);  final String trace=sw.toString();  List<Status> childStatuses=new ArrayList<>();  for (  String line : trace.split(System.getProperty("line.separator"))) {    childStatuses.add(new Status(IStatus.ERROR,"N4js-plugin-id",line));  }  MultiStatus ms=new MultiStatus("N4js-plugin-id",IStatus.ERROR,childStatuses.toArray(new Status[]{}),t.getLocalizedMessage(),t);  final AtomicBoolean result=new AtomicBoolean(true);  Display.getDefault().syncExec(null);  return result.get();}  }
class C{  public static final SpellCheckedMetadata constructSpellCheckedMetadata(){  SpellCheckedMetadata scmd=new SpellCheckedMetadata();  scmd.add("Content-type","foo/bar");  scmd.add("Connection","close");  scmd.add("Last-Modified","Sat, 09 Dec 2006 15:09:57 GMT");  scmd.add("Server","Foobar");  scmd.add("Date","Sat, 09 Dec 2006 18:07:20 GMT");  scmd.add("Accept-Ranges","bytes");  scmd.add("ETag","\"1234567-89-01234567\"");  scmd.add("Content-Length","123");  scmd.add(Nutch.SEGMENT_NAME_KEY,"segmentzzz");  scmd.add(Nutch.SIGNATURE_KEY,"123");  return scmd;}  }
class C{  public AnnotationFormatError(String message){  super(message);}  }
class C{  public static void main(String[] args){  String runNumber="2038";  Integer lastIteration=1400;  String BTUsignalControl="new_optimum";  String ksModelDirectory=DgPaths.REPOS + "shared-svn/projects/cottbus/data/optimization/cb2ks2010/" + "2015-02-06_minflow_50.0_morning_peak_speedFilter15.0_SP_tt_cBB50.0_sBB500.0/";  String ksModelFile="ks2010_model_50.0_19800.0_50.0.xml";  String ksOptFile="btu/" + BTUsignalControl + ".xml";  String outputFile="routeComparison/2015-03-10_matsimRoutes_" + BTUsignalControl + ".xml";  String description="matsim routes with " + BTUsignalControl + " offsets";  new ConvertMatsimRoutes2KS2015().convertRoutes(runNumber,lastIteration,ksModelDirectory,ksModelFile,ksOptFile,outputFile,description);}  }
class C{  public static float pxToDp(Resources res,float px){  float dp=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,px,res.getDisplayMetrics());  return dp;}  }
class C{  public Boolean isDigestEnabled(){  return digestEnabled;}  }
class C{  @Override public BigdataStatementIteratorImpl start(final ExecutorService service){  return (BigdataStatementIteratorImpl)super.start(service);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  float[] oldKeys=_set;  V[] oldVals=_values;  _set=new float[newCapacity];  _values=(V[])new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (isFull(oldVals,i)) {      float o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public void shutdown(){  IDataProvider dataProvider=this.injector.getInstance(IDataProvider.class);  dataProvider.shutdown();}  }
class C{  public AbLevelView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  private void logPerClassCost(long cost,Map<String,Long> costMap){  Class<?> superclass=getClass().getSuperclass();  Long oldCost=costMap.get(superclass.getName());  long newCost=oldCost == null ? cost : oldCost + cost;  costMap.put(superclass.getName(),newCost);}  }
class C{  private double paintNode(Graphics2D g2,Tree tree,NodeRef node,double x0,double x1,boolean hilight){  double y;  double ix0=convertX(x0);  double ix1=convertX(x1);  double iy;  if (tree.getNodeAttribute(node,"selected") != null) {    hilight=true;  }  if (tree.isExternal(node)) {    if (rememberYPositions) {      String taxonId=tree.getNodeTaxon(node).getId();      Double pos=yPositionMap.get(taxonId);      if (pos != null) {        y=pos;      } else {        y=currentY;        currentY+=1.0;        yPositionMap.put(taxonId,y);      }    } else {      y=currentY;      currentY+=1.0;    }    if (hilight) {      g2.setPaint(hilightLabelPaint);      g2.setFont(hilightLabelFont);    } else {      g2.setPaint(labelPaint);      g2.setFont(labelFont);    }    String label=tree.getTaxonId(node.getNumber());    double labelWidth=g2.getFontMetrics().stringWidth(label);    double labelHeight=g2.getFontMetrics().getAscent();    double labelOffset=labelHeight / 2;    iy=convertY(y);    if (label != null && label.length() > 0 && drawLabels) {      g2.drawString(label,(float)(ix1 + 4),(float)(iy + labelOffset));    }    nodeRectVert[node.getNumber()]=new Rectangle.Double(ix1 + 4,iy,labelWidth,labelHeight);    if (hilight) {      g2.setPaint(hilightPaint);      g2.setStroke(hilightStroke);    } else {      if (colorAttribute != null) {        Paint c=(Color)tree.getNodeAttribute(node,colorAttribute);        if (c == null)         c=linePaint;        g2.setPaint(c);      } else {        g2.setPaint(linePaint);      }      if (lineAttribute != null) {        Stroke stroke=(Stroke)tree.getNodeAttribute(node,lineAttribute);        if (stroke == null)         stroke=lineStroke;        g2.setStroke(stroke);      } else       g2.setStroke(lineStroke);    }  } else {    double y0, y1;    NodeRef child=tree.getChild(node,0);    double length=tree.getNodeHeight(node) - tree.getNodeHeight(child);    y0=paintNode(g2,tree,child,x1,x1 - length,hilight);    y1=y0;    for (int i=1; i < tree.getChildCount(node); i++) {      child=tree.getChild(node,i);      length=tree.getNodeHeight(node) - tree.getNodeHeight(child);      y1=paintNode(g2,tree,child,x1,x1 - length,hilight);    }    double iy0=convertY(y0);    double iy1=convertY(y1);    if (hilight) {      g2.setPaint(hilightPaint);      g2.setStroke(hilightStroke);    } else {      if (colorAttribute != null) {        Paint c=(Color)tree.getNodeAttribute(node,colorAttribute);        if (c == null)         c=linePaint;        g2.setPaint(c);      } else {        g2.setPaint(linePaint);      }      if (lineAttribute != null) {        Stroke stroke=(Stroke)tree.getNodeAttribute(node,lineAttribute);        if (stroke == null)         stroke=lineStroke;        g2.setStroke(stroke);      } else       g2.setStroke(lineStroke);    }    if (drawHorizontals) {      Line2D line=new Line2D.Double(ix1,iy0,ix1,iy1);      g2.draw(line);    }    nodeRectVert[node.getNumber()]=new Rectangle.Double(ix1 - 2,iy0 - 2,5,(iy1 - iy0) + 4);    y=(y1 + y0) / 2;    iy=convertY(y);  }  if (drawVerticals) {    Line2D line=new Line2D.Double(ix0,iy,ix1,iy);    g2.draw(line);  }  nodeRectHoriz[node.getNumber()]=new Rectangle.Double(ix0 - 2,iy - 2,(ix1 - ix0) + 4,5);  if (shapeAttribute != null) {    Shape shape=(Shape)tree.getNodeAttribute(node,shapeAttribute);    if (shape != null) {      Rectangle bounds=shape.getBounds();      double tx=ix1 - bounds.getWidth() / 2.0;      double ty=iy - bounds.getHeight() / 2.0;      g2.translate(tx,ty);      g2.fill(shape);      g2.translate(-tx,-ty);    }  }  if (labelAttribute != null) {    Object label=tree.getNodeAttribute(node,labelAttribute);    if (label != null) {      Color c=g2.getColor();      Font f=g2.getFont();      Font fsmall=f.deriveFont(f.getSize() - 1.0f);      g2.setFont(fsmall);      String labelString=label.toString();      int width=g2.getFontMetrics().stringWidth(labelString);      g2.setColor(textColor);      g2.drawString(labelString,(float)(ix1 - width - 1.0),(float)(iy - 2.0));      g2.setColor(c);      g2.setFont(f);    }  }  return y;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  protected void write(final String data){  try {    m_output.write(data);    m_output.flush();  } catch (  final IOException ioe) {    getErrorHandler().error("Caught an IOException",ioe,null);  }}  }
class C{  private Query makeTopQuery(final int currentPageNum,final int fetchSize){  final Query query=new Query().addSort(Article.REDDIT_SCORE,SortDirection.DESCENDING).addSort(Article.ARTICLE_LATEST_CMT_TIME,SortDirection.DESCENDING).setPageCount(1).setPageSize(fetchSize).setCurrentPageNum(currentPageNum);  query.setFilter(makeArticleShowingFilter());  return query;}  }
class C{  @SuppressWarnings("unchecked") public static Object convertType(Object obj,Class<?> targetClass,Locale locale,TimeZone timeZone,String format) throws Exception {  if (obj == null || obj == GenericEntity.NULL_FIELD) {    return null;  }  if (obj instanceof Node) {    Node node=(Node)obj;    String nodeValue=node.getTextContent();    if (targetClass == String.class) {      return nodeValue;    } else {      return convertType(nodeValue,targetClass,locale,timeZone,format);    }  }  if (targetClass == PlainString.class) {    return obj.toString();  }  Class<?> sourceClass=obj.getClass();  if (sourceClass == targetClass) {    return obj;  }  Converter<Object,Object> converter=(Converter<Object,Object>)Converters.getConverter(sourceClass,targetClass);  LocalizedConverter<Object,Object> localizedConverter=null;  try {    localizedConverter=(LocalizedConverter)converter;    if (locale == null) {      locale=Locale.getDefault();    }    if (timeZone == null) {      timeZone=TimeZone.getDefault();    }    if (format != null && format.isEmpty()) {      format=null;    }    return localizedConverter.convert(obj,locale,timeZone,format);  } catch (  ClassCastException e) {  }  return converter.convert(obj);}  }
class C{  public CounterMap<V,K> invert(){  CounterMap<V,K> invertCounterMap=new CounterMap<V,K>();  for (  K key : this.keySet()) {    Counter<V> keyCounts=this.getCounter(key);    for (    V val : keyCounts.keySet()) {      double count=keyCounts.getCount(val);      invertCounterMap.setCount(val,key,count);    }  }  return invertCounterMap;}  }
class C{  private void processTab(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public byte[] signData(SignatureType signatureType,KeyPair keyPair,String fileName){  byte[] signedData=null;  try {    signature=Signature.getInstance(signatureType.jce());    signature.initSign(keyPair.getPrivate());    FileInputStream fis=new FileInputStream(fileName);    BufferedInputStream bufin=new BufferedInputStream(fis);    byte[] buffer=new byte[1024];    int len;    while ((len=bufin.read(buffer)) >= 0) {      signature.update(buffer,0,len);    }    bufin.close();    signedData=signature.sign();  } catch (  Exception e) {    LOG.error("Error signing data",e);  }  return signedData;}  }
class C{  public static boolean isBeanPropertyGetter(Method method){  return getBeanPropertyGetterPrefixLength(method) != 0;}  }
class C{  @Override public int doStartTagInternal() throws JspTagException {  Action action=null;  final Set userRoles=this.getPrincipalRoles();  if ((null == this.actionId || 0 >= this.actionId) && (null == this.actionName || "".equals(this.actionName)) && null == this.ruleObject) {    return Tag.SKIP_BODY;  }  if (this.ruleObject != null) {  }  final ActionService rbacService=(ActionService)getRequestContext().getWebApplicationContext().getBean("actionService");  if (this.actionName != null) {    action=rbacService.getActionByName(this.actionName);  }  if (this.actionId != null) {    action=(Action)rbacService.getActionById(this.actionId);  }  if (action != null) {    final Set actionRoles=action.getRoles();    final Set grantedCopy=this.retainAll(userRoles,actionRoles);    if (grantedCopy.isEmpty()) {      return Tag.SKIP_BODY;    }  }  return Tag.EVAL_BODY_INCLUDE;}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte[] bytes;  byte b1;  byte b2;  byte b3;  byte b4;  int outLen=0;  int end=off + length;  while (end > 0) {    if (!ignore((char)data[end - 1]))     break;    end--;  }  int i=off;  int finish=end - 4;  while (i < finish) {    while ((i < finish) && ignore((char)data[i]))     i++;    b1=decodingTable[data[i++]];    while ((i < finish) && ignore((char)data[i]))     i++;    b2=decodingTable[data[i++]];    while ((i < finish) && ignore((char)data[i]))     i++;    b3=decodingTable[data[i++]];    while ((i < finish) && ignore((char)data[i]))     i++;    b4=decodingTable[data[i++]];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;  }  if (data[end - 2] == padding) {    b1=decodingTable[data[end - 4]];    b2=decodingTable[data[end - 3]];    out.write((b1 << 2) | (b2 >> 4));    outLen+=1;  } else   if (data[end - 1] == padding) {    b1=decodingTable[data[end - 4]];    b2=decodingTable[data[end - 3]];    b3=decodingTable[data[end - 2]];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    outLen+=2;  } else {    b1=decodingTable[data[end - 4]];    b2=decodingTable[data[end - 3]];    b3=decodingTable[data[end - 2]];    b4=decodingTable[data[end - 1]];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;  }  return outLen;}  }
class C{  public synchronized void updateConfiguration(ConfigurationUpdate update,boolean executeRestart) throws Exception {  for (  IPropertyUpdate<?> propertyUpdate : update.getPropertyUpdates()) {    SingleProperty<Object> property=configuration.forLogicalName(propertyUpdate.getPropertyLogicalName());    if (null == property) {      throw new Exception("Property " + propertyUpdate.getPropertyLogicalName() + " can not be updated because the property does not exist in the current configuration.");    } else     if (!property.canUpdate(propertyUpdate)) {      throw new Exception("Property " + propertyUpdate.getPropertyLogicalName() + " can not be updated because the property update value is not valid.");    }  }  List<SingleProperty<?>> updatedProperties=new ArrayList<>();  for (  IPropertyUpdate<?> propertyUpdate : update.getPropertyUpdates()) {    SingleProperty<Object> property=configuration.forLogicalName(propertyUpdate.getPropertyLogicalName());    if (propertyUpdate.isRestoreDefault()) {      property.setToDefaultValue();    } else {      property.setValue(propertyUpdate.getUpdateValue());    }    updatedProperties.add(property);    if (LOG.isInfoEnabled()) {      LOG.info("Property '" + property.getName() + "' successfully updated, new value is "+ property.getFormattedValue());    }  }  if (null == configurationUpdate) {    configurationUpdate=update;  } else {    configurationUpdate.merge(update,true);  }  if (Files.exists(getConfigurationUpdatePath())) {    String backupPathString=getConfigurationUpdatePath().toString() + "~" + System.currentTimeMillis()+ ".backup";    Path backupPath=Paths.get(backupPathString);    try {      Files.copy(getConfigurationUpdatePath(),backupPath,StandardCopyOption.REPLACE_EXISTING);    } catch (    IOException e) {      LOG.warn("Could not back up the current configuration update",e);    }  }  try {    transformator.marshall(getConfigurationUpdatePath(),configurationUpdate,getBaseConfigDir().relativize(getConfigurationUpdateSchemaPath()).toString());  } catch (  JAXBException|IOException e) {    LOG.warn("Could not flush the new configuration update",e);  }  if (executeRestart) {    shutdownService.restart();  } else {    propertyUpdateExecutor.executePropertyUpdates(updatedProperties);  }}  }
class C{  public List<SnapshotShardFailure> shardFailures(){  return shardFailures;}  }
class C{  protected long parseTimeValue(String parsingValue){  long calculatedMillis=0;  if (parsingValue.startsWith("access"))   parsingValue=parsingValue.substring("access".length()).trim();  if (parsingValue.startsWith("plus"))   parsingValue=parsingValue.substring("plus".length()).trim();  log.debug("calculating expires ms based on '" + parsingValue + "'");  Matcher matcher=Pattern.compile("([0-9]+)\\s+(\\w+)").matcher(parsingValue);  while (matcher.find()) {    long num=NumberUtils.stringToInt(matcher.group(1),-1);    if (num < 0)     setError("could not calculate numeric value of " + matcher.group(1));    String part=matcher.group(2);    log.debug("adding '" + num + "' '"+ part+ "'");    long addThisRound=0;    if (part.matches("year[s]?"))     addThisRound=num * Math.round(1000 * 60 * 60* 24* 365.25);    if (part.matches("month[s]?"))     addThisRound=num * Math.round(1000 * 60 * 60* 24* (365.25 / 12));    if (part.matches("week[s]?"))     addThisRound=num * (1000 * 60 * 60* 24* 7);    if (part.matches("day[s]?"))     addThisRound=num * (1000 * 60 * 60* 24);    if (part.matches("hour[s]?"))     addThisRound=num * (1000 * 60 * 60);    if (part.matches("minute[s]?"))     addThisRound=num * (1000 * 60);    if (part.matches("second[s]?"))     addThisRound=num * (1000);    if (addThisRound == 0) {      setError("unkown time unit '" + part + "'");    }    calculatedMillis+=addThisRound;  }  if (calculatedMillis == 0) {    setError("could not calculate expires time from '" + parsingValue + "'");  }  return calculatedMillis;}  }
class C{  @Override public void writeEmptyElement(String localName) throws XMLStreamException {  writeEmptyElement(null,localName,null);}  }
class C{  public Boolean isSleep(){  if (sleepTime != null) {    Date now=new Date();    long diff=now.getTime() - sleepTime.getTime();    if (diff <= 0) {      metricIgnoreFromSleepSec++;      return true;    }  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.LOGICAL_NOT_EXPRESSION__OPERAND:    return getOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected File assertCreateFile(File parent,String name) throws IOException {  File file=new File(parent,name);  assertCreateFile(file);  return file;}  }
class C{  public ToStringBuilder append(String fieldName,int value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public void pause(){  if (!isPausing) {    int result=mAudioManager.requestAudioFocus(mAfChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);    if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      Log.i("AUDIOFOCUS_REQUEST_GRANTED");    }    if (mIsMuteStream) {      mCurrentVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);      if (mCurrentVolume > 0) {        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,0,0);      }    }    isPausing=true;  }}  }
class C{  public void shutdown(){  executor.shutdown();}  }
class C{  public boolean isShapeFilled(){  return this.shapeFilled;}  }
class C{  public static InetAddress increment(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0xff) {    addr[i]=0;    i--;  }  Preconditions.checkArgument(i >= 0,"Incrementing %s would wrap.",address);  addr[i]++;  return bytesToInetAddress(addr);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.192 -0500",hash_original_method="5987C40EBD16187447E09174CE17A1D5",hash_generated_method="11C8E65F36ECC436105906060B9725E9") public int read() throws IOException {  if (this.closed) {    throw new IOException("Attempted read from closed stream.");  }  if (this.eof) {    return -1;  }  if (this.pos >= this.chunkSize) {    nextChunk();    if (this.eof) {      return -1;    }  }  pos++;  return in.read();}  }
class C{  private ExprKraken parseAddExpr(){  ExprKraken left=parseMulExpr();  while (true) {    Token token=scanToken();switch (token) {case PLUS:      left=new BinaryExpr(BinaryOp.ADD,left,parseSimpleTerm());    break;case MINUS:  left=new BinaryExpr(BinaryOp.SUB,left,parseSimpleTerm());break;default :_token=token;return left;}}}  }
class C{  public byte[] encrypt(byte[] baseKey,int usage,byte[] ivec,byte[] new_ivec,byte[] plaintext,int start,int len) throws GeneralSecurityException, KrbCryptoException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  if (debug) {    System.out.println("ArcFour: ENCRYPT with key usage = " + usage);  }  byte[] confounder=Confounder.bytes(confounderSize);  int plainSize=roundup(confounder.length + len,1);  byte[] toBeEncrypted=new byte[plainSize];  System.arraycopy(confounder,0,toBeEncrypted,0,confounder.length);  System.arraycopy(plaintext,start,toBeEncrypted,confounder.length,len);  byte[] k1=new byte[baseKey.length];  System.arraycopy(baseKey,0,k1,0,baseKey.length);  byte[] salt=getSalt(usage);  byte[] k2=getHmac(k1,salt);  byte[] checksum=getHmac(k2,toBeEncrypted);  byte[] k3=getHmac(k2,checksum);  Cipher cipher=Cipher.getInstance("ARCFOUR");  SecretKeySpec secretKey=new SecretKeySpec(k3,"ARCFOUR");  cipher.init(Cipher.ENCRYPT_MODE,secretKey);  byte[] output=cipher.doFinal(toBeEncrypted,0,toBeEncrypted.length);  byte[] result=new byte[hashSize + output.length];  System.arraycopy(checksum,0,result,0,hashSize);  System.arraycopy(output,0,result,hashSize,output.length);  return result;}  }
class C{  private Batch batch(int batchStart){  int batchStop=min(batchStart + batchSize,ids.length);  ImmutableList.Builder<Change> changes=ImmutableList.builder();  for (int id=batchStart; id < batchStop; id++) {    changes.add(new Change(ids[id],-1,null,id));  }  return new Batch(changes.build(),batchStop - batchStart,batchStop);}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public Property yearOfEra(){  return new Property(this,getChronology().yearOfEra());}  }
class C{  private void upgradeRPVPlexToMetroPoint(Volume sourceVolume,VirtualPool newVpool,VirtualPool oldVpool,ProtectionSystem rpSystem){  String standbyCopyName=RPHelper.getStandbyProductionCopyName(_dbClient,sourceVolume);  List<Volume> existingStandbyJournals=RPHelper.findExistingJournalsForCopy(_dbClient,sourceVolume.getConsistencyGroup(),standbyCopyName);  if (existingStandbyJournals.isEmpty()) {    _log.error(String.format("Could not find standby journal during upgrade to MetroPoint operation. " + "Expected to find a new standby journal for RP copy [%s]",standbyCopyName));    throw RecoverPointException.exceptions.cannotFindJournal(String.format("for RP copy [%s]",standbyCopyName));  }  Volume standbyProdJournal=existingStandbyJournals.get(0);  if (standbyProdJournal != null) {    _log.info(String.format("Upgrade RP+VPLEX CG to MetroPoint by adding new standby journal [%s] to the CG",standbyProdJournal.getLabel()));    RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);    RecoverPointVolumeProtectionInfo protectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(sourceVolume.getId(),_dbClient));    _log.info(String.format("RecoverPointVolumeProtectionInfo [%s] retrieved",protectionInfo.getRpProtectionName()));    RPCopyRequestParams copyParams=new RPCopyRequestParams();    copyParams.setCopyVolumeInfo(protectionInfo);    List<CreateVolumeParams> journaVols=new ArrayList<CreateVolumeParams>();    CreateVolumeParams journalVolParams=new CreateVolumeParams();    journalVolParams.setWwn(RPHelper.getRPWWn(standbyProdJournal.getId(),_dbClient));    journalVolParams.setInternalSiteName(standbyProdJournal.getInternalSiteName());    journaVols.add(journalVolParams);    CreateCopyParams standbyProdCopyParams=new CreateCopyParams();    standbyProdCopyParams.setName(standbyProdJournal.getRpCopyName());    standbyProdCopyParams.setJournals(journaVols);    _log.info(String.format("Adding standby journal [%s] to teh RP CG...",standbyProdJournal.getLabel()));    List<CreateRSetParams> rSets=new ArrayList<CreateRSetParams>();    rp.addStandbyProductionCopy(standbyProdCopyParams,null,rSets,copyParams);    _log.info("Standby journal added successfully.");    BlockConsistencyGroup viprCG=_dbClient.queryObject(BlockConsistencyGroup.class,sourceVolume.getConsistencyGroup());    List<Volume> allSourceVolumesInCG=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(viprCG,_dbClient,Volume.PersonalityTypes.SOURCE);    for (    Volume sourceVol : allSourceVolumesInCG) {      Set<Volume> allRelatedVolumes=RPHelper.getAllRelatedVolumesForSource(sourceVol.getId(),_dbClient,true,true);      for (      Volume rpRelatedVol : allRelatedVolumes) {        if (rpRelatedVol.getVirtualPool().equals(oldVpool.getId())) {          rpRelatedVol.setVirtualPool(newVpool.getId());          _dbClient.updateObject(rpRelatedVol);          _log.info(String.format("Volume [%s] has had its virtual pool updated to [%s].",rpRelatedVol.getLabel(),newVpool.getLabel()));        }      }    }  }}  }
class C{  public static byte[] fromString(String str){  ByteArrayOutputStream bs=new ByteArrayOutputStream();  byte[] raw=str.getBytes();  for (int i=0; i < raw.length; i++) {    if (!Character.isWhitespace((char)raw[i]))     bs.write(raw[i]);  }  byte[] in=bs.toByteArray();  if (in.length % 2 != 0) {    return null;  }  bs.reset();  DataOutputStream ds=new DataOutputStream(bs);  for (int i=0; i < in.length; i+=2) {    byte high=(byte)Base16.indexOf(Character.toUpperCase((char)in[i]));    byte low=(byte)Base16.indexOf(Character.toUpperCase((char)in[i + 1]));    try {      ds.writeByte((high << 4) + low);    } catch (    IOException e) {    }  }  return bs.toByteArray();}  }
class C{  public URI normalize(){  String thisPath=getPath();  StringTokenizer st=new StringTokenizer(thisPath,String.valueOf(PATH_SEPARATOR));  List<String> segments=new ArrayList<String>();  while (st.hasMoreTokens()) {    segments.add(st.nextToken());  }  List<Integer> removals=new ArrayList<Integer>();  for (int i=0; i < segments.size(); i++) {    String segment=segments.get(i);    if (segment.equals(".")) {      removals.add(0,i);      continue;    } else     if (i > 0 && segment.equals("..")) {      if (segments.get(i - 1).equals("..") == false) {        removals.add(0,i - 1);        removals.add(0,i);        continue;      }    }  }  Iterator<Integer> iter=removals.iterator();  while (iter.hasNext()) {    segments.remove(iter.next());  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < segments.size(); i++) {    String segment=segments.get(i);    if (i == 0) {      if (isAbsolute()) {        buffer.append(PATH_SEPARATOR);      } else       if (segment.indexOf(SCHEME_SEPARATOR) != -1) {        buffer.append('.');        buffer.append(PATH_SEPARATOR);      }      buffer.append(segment);      continue;    }    buffer.append(PATH_SEPARATOR);    buffer.append(segment);  }  try {    return new URI(getScheme(),getUserInfo(),getHost(),getPort(),buffer.toString(),getQuery(),getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.949 -0500",hash_original_method="6EAEE94A5AFBBE3CB405FFF6432059B8",hash_generated_method="95284BF4A594F05C5AB99E7B8C5A943E") public void onChange(boolean selfChange){}  }
class C{  public static void scaleM(double[] sm,int smOffset,double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 4; i++) {    int smi=smOffset + i;    int mi=mOffset + i;    sm[smi]=m[mi] * x;    sm[4 + smi]=m[4 + mi] * y;    sm[8 + smi]=m[8 + mi] * z;    sm[12 + smi]=m[12 + mi];  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void startRecording(){  String externalStorageState=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(externalStorageState)) {    if (BuildConfig.DEBUG) {      screenCaptureOn=true;      recorderHandler.postDelayed(recorderRunnable,32);    }  } else   if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(externalStorageState)) {    Log.e("LinearLayoutScreenRec","sdCard ko read only " + externalStorageState);  } else {    Log.e("LinearLayoutScreenRec","sdCard ko no access " + externalStorageState);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  NamedNodeMap attributes;  Node removedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  attributes=testEmployee.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItem("district");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.284 -0500",hash_original_method="82C3193F23F6D7770C948A8F860700C8",hash_generated_method="ECFDA70CD333AB189AE460B59374A49D") public boolean isInfinite(){  return isInfinite(value);}  }
class C{  @Override public void acknowledge(final ClientConsumer consumer,final Message message) throws ActiveMQException {  if (preAcknowledge) {    return;  }  checkClosed();  if (logger.isDebugEnabled()) {    logger.debug("client ack messageID = " + message.getMessageID());  }  startCall();  try {    sessionContext.sendACK(false,blockOnAcknowledge,consumer,message);  }  finally {    endCall();  }}  }
class C{  static boolean deleteDir(@NonNull final File folder){  if (!folder.exists()) {    return true;  }  if (!folder.isDirectory()) {    return false;  }  String[] fileList=folder.list();  if (fileList != null && fileList.length > 0) {    rmDir(folder);  }  String[] fileList1=folder.list();  if (fileList1 != null && fileList1.length > 0) {    return false;  }  if (folder.delete()) {    return true;  }  if (Helper.isAtLeastAPI(LOLLIPOP)) {    DocumentFile document=getDocumentFile(folder,true);    if (document != null) {      return document.delete();    }  }  return !folder.exists();}  }
class C{  public AmqpMessage pull() throws IOException {  return pull(-1,TimeUnit.MILLISECONDS);}  }
class C{  public static void openFile(final File file){  if (Desktop.isDesktopSupported()) {    try {      Desktop.getDesktop().open(file);    } catch (    IOException e) {      ClientLogger.logError("Could not open File " + file.getAbsolutePath(),e);    }  } else {    logDesktopAPIMessage(file.getAbsolutePath());  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.UNIT;}  }
class C{  public RandomLayout(String group){  super(group);}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public long logTerm(){  return logTerm;}  }
class C{  public static Address create(String host,int port){  return new Address(host,port);}  }
class C{  public <T extends S>ConsumerChain register(Class<T> type){  InstanceListener.this.register(type,null);  return this;}  }
class C{  public static void main(String[] args) throws Exception {  String topologyName="slidingWindowCounts";  if (args.length >= 1) {    topologyName=args[0];  }  boolean runLocally=true;  if (args.length >= 2 && args[1].equalsIgnoreCase("remote")) {    runLocally=false;  }  LOG.info("Topology name: " + topologyName);  SkewedRollingTopWords rtw=new SkewedRollingTopWords(topologyName);  if (runLocally) {    LOG.info("Running in local mode");    rtw.runLocally();  } else {    LOG.info("Running in remote (cluster) mode");    rtw.runRemotely();  }}  }
class C{  public boolean mouseReleased(MouseEvent e){  return false;}  }
class C{  public PingPongBuffer(FrameBuffer buffer1,FrameBuffer buffer2){  ownResources=false;  owned1=null;  owned2=null;  set(buffer1,buffer2);}  }
class C{  public boolean isOrgLevelOnly(){  return getShareType().equals(SHARETYPE_OrgNotShared);}  }
class C{  public void updateJSAResults(Body originalBody,Body cloneBody){  if (!Config.v().runStringAnalysis || !JSAStrings.v().hasRun())   return;  assert originalBody.getUnits().size() == cloneBody.getUnits().size();  Iterator originalIt=originalBody.getUnits().iterator();  Iterator cloneIt=cloneBody.getUnits().iterator();  while (originalIt.hasNext()) {    Stmt origStmt=(Stmt)originalIt.next();    Stmt cloneStmt=(Stmt)cloneIt.next();    if (!origStmt.containsInvokeExpr()) {      continue;    }    InvokeExpr origInvokeExpr=(InvokeExpr)origStmt.getInvokeExpr();    InvokeExpr cloneInvokeExpr=(InvokeExpr)cloneStmt.getInvokeExpr();    for (int i=0; i < origInvokeExpr.getArgCount(); i++) {      ValueBox origVB=origInvokeExpr.getArgBox(i);      if (JSAStrings.v().isHotspotValue(origVB.getValue())) {        ValueBox cloneVB=cloneInvokeExpr.getArgBox(i);        JSAStrings.v().copyResult(origVB.getValue(),cloneInvokeExpr.getMethodRef().getSignature(),i,cloneVB);      }    }  }}  }
class C{  public void savePoiType(PoiType poiType){  bus.post(new InternalSavePoiTypeEvent(poiType));}  }
class C{  protected JvmRTBootClassPathTableMeta createJvmRTBootClassPathTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTBootClassPathTableMeta(mib,objectserver);}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public static boolean PM(long packedDateTime){  return PackedLocalTime.PM(time(packedDateTime));}  }
class C{  private Base64(){}  }
class C{  DeviceCommsApp(String propsPath) throws Exception {  super(propsPath);}  }
class C{  public void onReset(){}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void resume(){  checkAccess();synchronized (this.childrenThreadsLock) {    for (int i=0; i < numThreads; i++) {      this.childrenThreads[i].resume();    }  }synchronized (this.childrenGroupsLock) {    for (int i=0; i < numGroups; i++) {      this.childrenGroups[i].resume();    }  }}  }
class C{  private void resize(int c){  int[] newItems=new int[c];  for (int i=0; i < items.length; i+=1) {    newItems[i]=items[i];  }  items=newItems;}  }
class C{  void addItem(final BreadcrumbItem item){  this.items.add(item);}  }
class C{  @Override protected void onResume(){  super.onResume();  initializeListeners();}  }
class C{  private static boolean canUpdateCube(Cube cube){  BlockPos cubeCenter=getCubeCenter(cube);  return cube.getCubicWorld().testForCubes(cubeCenter,UPDATE_RADIUS,null);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:      return N4JSPackage.PROPERTY_NAME_VALUE_PAIR___IS_VALID_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER:  return N4JSPackage.PROPERTY_NAME_VALUE_PAIR___GET_DEFINED_MEMBER;case N4JSPackage.PROPERTY_ASSIGNMENT___IS_VALID_NAME:return N4JSPackage.PROPERTY_NAME_VALUE_PAIR___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:return N4JSPackage.PROPERTY_NAME_VALUE_PAIR___GET_DECLARED_TYPE_REF;default :return -1;}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"CreateBucketReplyMessage process invoking reply processor with processorId:" + this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"CreateBucketReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  protected void sendDeviceMovedNotification(Device d){  cntDeviceMoved.increment();  deviceSyncManager.storeDevice(d);  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      listener.deviceMoved(d);    }  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (qName.equals(Translation.XML_TAG) || qName.equals(Translation.XML_TAG2)) {  } else   if (qName.equals(Translation.XML_ROW_TAG)) {    if (m_sql.length() > 0)     m_sql.append(",");    m_sql.append("Updated=").append(DB.TO_DATE(m_time,false));    if (!m_isBaseLanguage) {      if (m_trl != null && ("Y".equals(m_trl) || "N".equals(m_trl)))       m_sql.append(",IsTranslated='").append(m_trl).append("'"); else       m_sql.append(",IsTranslated='Y'");    }    m_sql.append(" WHERE ").append(m_TableName).append("_ID=").append(m_curID);    if (!m_isBaseLanguage)     m_sql.append(" AND AD_Language='").append(m_AD_Language).append("'");    if (m_AD_Client_ID >= 0)     m_sql.append(" AND AD_Client_ID=").append(m_AD_Client_ID);    m_sql.insert(0,m_updateSQL);    int no=DB.executeUpdate(m_sql.toString(),null);    if (no == 1) {      if (CLogMgt.isLevelFinest())       log.fine(m_sql.toString());      m_updateCount++;    } else     if (no == 0)     log.warning("Not Found - " + m_sql.toString()); else     log.severe("Update Rows=" + no + " (Should be 1) - "+ m_sql.toString());  } else   if (qName.equals(Translation.XML_VALUE_TAG)) {    if (m_sql.length() > 0)     m_sql.append(",");    m_sql.append(m_curColumnName).append("=").append(DB.TO_STRING(m_curValue.toString()));  }}  }
class C{  public static void openSettingsScreen(@NonNull Fragment context){  Intent intent=new Intent();  intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);  Uri uri=Uri.parse("package:" + context.getContext().getPackageName());  intent.setData(uri);  context.startActivity(intent);}  }
class C{  public void login(Presence presence){  presence.setType(Presence.Type.available);  presence.setTo(entityJID);  presence.setFrom(connection.getUser());  connection.sendPacket(presence);}  }
class C{  public Cos(){  super(Number.class,Number.class);}  }
class C{  public void store(Address value,Offset offset){}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  protected void doProcessEvent(LogEvent event){  final String data=format(event);  write(data);}  }
class C{  public Set<Group> findNestedParentGroups(String tenantName,PrincipalId userId) throws Exception {  return getService().findNestedParentGroups(tenantName,userId,this.getServiceContext());}  }
class C{  private static void addMediaTypeConverter(MediaTypeConverter mediaTypeConverter){  for (  String mediaType : mediaTypeConverter.getSupportedMediaTypes()) {    converterMap.put(mediaType.toLowerCase(Locale.US),mediaTypeConverter);  }}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public static boolean addCraftingRecipe(ItemStack aResult,Enchantment[] aEnchantmentsAdded,int[] aEnchantmentLevelsAdded,Object[] aRecipe){  return addCraftingRecipe(aResult,aEnchantmentsAdded,aEnchantmentLevelsAdded,false,true,false,false,false,false,false,false,false,false,false,false,true,aRecipe);}  }
class C{  private static Reader _getReader(InputStream is,Charset charset) throws IOException {  if (charset == null)   charset=SystemUtil.getCharset();  return new BufferedReader(new InputStreamReader(is,charset));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void verifyClearRecursively(FinishedTriggers finishedSet){  ExecutableTrigger trigger=ExecutableTrigger.create(AfterAll.of(AfterFirst.of(AfterPane.elementCountAtLeast(3),AfterWatermark.pastEndOfWindow()),AfterAll.of(AfterPane.elementCountAtLeast(10),AfterProcessingTime.pastFirstElementInPane())));  setFinishedRecursively(finishedSet,trigger);  assertTrue(finishedSet.isFinished(trigger));  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0)));  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0).subTriggers().get(0)));  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0).subTriggers().get(1)));  finishedSet.clearRecursively(trigger.subTriggers().get(1));  assertTrue(finishedSet.isFinished(trigger));  verifyFinishedRecursively(finishedSet,trigger.subTriggers().get(0));  verifyUnfinishedRecursively(finishedSet,trigger.subTriggers().get(1));}  }
class C{  public static void log(String msg){  log(null,msg,3,null);}  }
class C{  public ListView(Element elem){  super(elem,View.Y_AXIS);}  }
class C{  public Object unmarshal(final String xml,final Class rootClass) throws XMLException {  Object readObject=null;  try {    if (xml == null || xml.isEmpty()) {      throw new XMLException("Cannot parse empty XML");    }    final DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();    final InputSource is=new InputSource();    is.setCharacterStream(new StringReader(xml));    readObject=unmarshaller.unmarshal(db.parse(is).getFirstChild(),rootClass);    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  SAXException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  IOException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  ParserConfigurationException e) {    throw new XMLException("Cannot read the XML ",e);  }  return readObject;}  }
class C{  protected Collection<UUID> readNodeIds(BinaryRawReaderEx reader){  if (reader.readBoolean()) {    int len=reader.readInt();    List<UUID> res=new ArrayList<>(len);    for (int i=0; i < len; i++)     res.add(reader.readUuid());    return res;  } else   return null;}  }
class C{  public final boolean readln(CharBuffer cb) throws IOException {  return readLine(cb,true);}  }
class C{  public void startDrag(Cursor dragCursor,Transferable transferable) throws InvalidDnDOperationException {  dragSource.startDrag(this,dragCursor,transferable,null);}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  private static int perSecond(float meanTime){  return (meanTime > 0) ? (int)(MICROSECONDS_IN_SECOND / meanTime) : 0;}  }
class C{  public String generateExportGroupUpdateWorkflow(Workflow workflow,String wfGroupId,String waitFor,URI storageUri,URI exportGroupUri,ExportMask exportMask,Map<URI,Integer> addedBlockObjects,Map<URI,Integer> removedBlockObjects,List<URI> addedInitiators,List<URI> removedInitiators,URI blockStorageControllerUri) throws IOException, WorkflowException, WorkflowRestartedException {  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupUri);  addedInitiators=ExportUtils.filterNonVplexInitiatorsByExportGroupVarray(exportGroup,addedInitiators,storageUri,_dbClient);  if (allCollectionsAreEmpty(addedBlockObjects,removedBlockObjects,addedInitiators,removedInitiators)) {    _log.info(String.format("There is no export updated required for %s",storageUri.toString()));    return null;  }  Workflow storageWorkflow=newWorkflow("storageSystemExportGroupUpdate",false,workflow.getOrchTaskId());  DiscoveredSystemObject storageSystem=getStorageSystem(_dbClient,storageUri);  String stepId=null;  List<URI> lockedInitiatorURIs=new ArrayList<URI>();  lockedInitiatorURIs.addAll(addedInitiators);  lockedInitiatorURIs.addAll(StringSetUtil.stringSetToUriList(exportGroup.getInitiators()));  List<String> lockKeys=ControllerLockingUtil.getHostStorageLockKeys(_dbClient,ExportGroup.ExportGroupType.valueOf(exportGroup.getType()),lockedInitiatorURIs,blockStorageControllerUri);  if (addedInitiators != null && !addedInitiators.isEmpty()) {    stepId=generateExportGroupAddInitiators(storageWorkflow,null,stepId,exportGroupUri,blockStorageControllerUri,addedInitiators);  }  if (removedInitiators != null && !removedInitiators.isEmpty()) {    stepId=generateExportGroupRemoveInitiators(storageWorkflow,null,stepId,exportGroupUri,blockStorageControllerUri,removedInitiators);  }  if (removedBlockObjects != null && !removedBlockObjects.isEmpty()) {    stepId=generateExportGroupRemoveVolumes(storageWorkflow,null,stepId,storageUri,exportGroupUri,new ArrayList<URI>(removedBlockObjects.keySet()));  }  if (addedBlockObjects != null && !addedBlockObjects.isEmpty()) {    stepId=generateExportGroupAddVolumes(storageWorkflow,null,stepId,storageUri,exportGroupUri,addedBlockObjects);  }  if (exportMask == null) {    if (addedInitiators == null) {      addedInitiators=new ArrayList<URI>();    }    if (addedInitiators.isEmpty()) {      addedInitiators.addAll(getInitiators(exportGroup));    }    if (exportGroup.getVolumes() != null) {      for (      String key : exportGroup.getVolumes().keySet()) {        BlockObject bobject=BlockObject.fetch(_dbClient,URI.create(key));        if (bobject.getStorageController().equals(storageUri)) {          addedBlockObjects.put(URI.create(key),Integer.valueOf(exportGroup.getVolumes().get(key)));        }      }    }    boolean acquiredLocks=getWorkflowService().acquireWorkflowLocks(workflow,lockKeys,LockTimeoutValue.get(LockType.EXPORT_GROUP_OPS));    if (!acquiredLocks) {      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),"ExportMaskUpgrade: " + exportGroup.getLabel());    }    return generateExportGroupCreateWorkflow(workflow,wfGroupId,waitFor,storageUri,exportGroupUri,addedBlockObjects,addedInitiators);  }  try {    boolean acquiredLocks=getWorkflowService().acquireWorkflowLocks(storageWorkflow,lockKeys,LockTimeoutValue.get(LockType.EXPORT_GROUP_OPS));    if (!acquiredLocks) {      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),"ExportMaskUpgrade: " + exportMask.getMaskName());    }    Workflow.Method method=ExportWorkflowEntryPoints.exportGroupUpdateMethod(storageUri,exportGroupUri,storageWorkflow);    return newWorkflowStep(workflow,wfGroupId,String.format("Updating export on storage array %s (%s)",storageSystem.getNativeGuid(),storageUri.toString()),storageSystem,method,null,waitFor);  } catch (  Exception ex) {    getWorkflowService().releaseAllWorkflowLocks(storageWorkflow);    throw ex;  }}  }
class C{  public static String roundValue(PriceConverter formatter,BigDecimal value,BigDecimal... factors){  if (BigDecimal.ZERO.compareTo(value) == 0) {    if (factors.length == 0) {      return EMPTY_STRING;    } else     if (containsZeroFactor(factors)) {      return EMPTY_STRING;    }  }  return formatter.getValueToDisplay(value.setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP),true);}  }
class C{  public DAuthorityKeyIdentifier(JDialog parent,byte[] value,PublicKey authorityPublicKey) throws IOException {  super(parent);  setTitle(res.getString("DAuthorityKeyIdentifier.Title"));  this.authorityPublicKey=authorityPublicKey;  initComponents();  prepopulateWithValue(value);}  }
class C{  public <N extends Node>ParseResult<N> parse(ParseStart<N> start,Provider provider){  try {    final ASTParser parser=getParserForProvider(provider);    N resultNode=start.parse(parser);    final CommentsCollection comments=astParser.getCommentsCollection();    commentsInserter.insertComments(resultNode,comments.copy().getComments());    return new ParseResult<>(Optional.of(resultNode),parser.problems,Optional.of(astParser.getTokens()),Optional.of(astParser.getCommentsCollection()));  } catch (  ParseException e) {    return new ParseResult<>(e);  }catch (  TokenMgrException e) {    return new ParseResult<>(e);  } finally {    try {      provider.close();    } catch (    IOException e) {    }  }}  }
class C{  public void write(String filename){  logger.info("write carrier plans");  try {    openFile(filename);    writeXmlHead();    startCarriers(this.writer);    for (    Carrier carrier : carriers) {      startCarrier(carrier,this.writer);      writeVehicles(carrier,this.writer);      writeShipments(carrier,this.writer);      writePlans(carrier,this.writer);      endCarrier(this.writer);    }    endCarriers(this.writer);    close();    logger.info("done");  } catch (  IOException e) {    e.printStackTrace();    logger.error(e);    System.exit(1);  }}  }
class C{  private static void parse(URL url,String mt) throws IOException, UnknownFormatException {  byte[] content=IOUtils.toByteArray(url);  AbstractSiteMap sm=null;  if (mt == null || mt.equals("")) {    sm=parser.parseSiteMap(content,url);  } else {    sm=parser.parseSiteMap(mt,content,url);  }  if (sm.isIndex()) {    Collection<AbstractSiteMap> links=((SiteMapIndex)sm).getSitemaps();    for (    AbstractSiteMap asm : links) {      parse(asm.getUrl(),mt);    }  } else {    Collection<SiteMapURL> links=((SiteMap)sm).getSiteMapUrls();    for (    SiteMapURL smu : links) {      LOG.info(smu.getUrl().toString());    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Nullable StoredException loadStoredExceptionData(String fileName){  StoredException storedException=null;  FileInputStream in=null;  try {    in=context.openFileInput(fileName);    if (in != null) {      final InputStreamReader reader=new InputStreamReader(in,"UTF-8");      final Gson gson=new Gson();      storedException=gson.fromJson(reader,StoredException.class);    }  } catch (  Exception ex) {    utils.logIssue("Could not load file [" + fileName + "]",ex);  } finally {    closeStream(in);  }  return storedException;}  }
class C{  public static void main(String a[]) throws Throwable {  final String main="ResetPeakMemoryUsage$TestMain";  final String ms="-Xms256m";  final String mn="-Xmn8m";  RunUtil.runTestClearGcOpts(main,ms,mn,"-XX:+UseConcMarkSweepGC");  RunUtil.runTestClearGcOpts(main,ms,mn,"-XX:+UseParallelGC");  RunUtil.runTestClearGcOpts(main,ms,mn,"-XX:+UseG1GC","-XX:G1HeapRegionSize=1m");  RunUtil.runTestClearGcOpts(main,ms,mn,"-XX:+UseSerialGC","-XX:MarkSweepAlwaysCompactCount=1");}  }
class C{  public void addTypedSerializer(JavaType type,JsonSerializer<Object> ser){synchronized (this) {    if (_sharedMap.put(new TypeKey(type,true),ser) == null) {      _readOnlyMap=null;    }  }}  }
class C{  @OnError public void onError(Session session,Throwable t){  callInternal("onError",session,t.getMessage());  logger.error(t.getMessage(),t);}  }
class C{  public boolean needSave(){  return m_needSave;}  }
class C{  private void updatePreferredSize(){  final int width=m_offsetViewWidth + m_hexViewWidth + (18 * m_charWidth)+ m_scrollbar.getWidth();  setPreferredSize(new Dimension(width,getHeight()));  revalidate();}  }
class C{  public static Map<String,String> populateRequestProperties(Map<String,String> requestProperties,int bodyLength,MediaType contentType,MediaType acceptType){  Map<String,String> properties;  if (requestProperties == null || requestProperties.isEmpty()) {    properties=new HashMap<>();  } else {    properties=new HashMap<>(requestProperties);  }  if (acceptType != null) {    properties.put(HeaderNames.ACCEPT,acceptType.toString());  }  if (contentType != null) {    properties.put(HeaderNames.CONTENT_TYPE,contentType.toString());  }  if (bodyLength > -1) {    properties.put(HeaderNames.CONTENT_LENGTH,String.valueOf(bodyLength));  }  return properties;}  }
class C{  public void assertTextArea(String name,String text){  TestUtils.assertTextArea(name,text);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  String action=intent.getAction();  if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {    onBluetoothActionStateChanged(context,intent);  } else   if (BluetoothDevice.ACTION_ACL_CONNECTED.equals(action)) {    onBluetoothConnected(context,intent);  } else   if (BluetoothDevice.ACTION_ACL_DISCONNECTED.equals(action)) {    onBluetoothDisconnected(context,intent);  } else   if (BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED.equals(action)) {    onBluetoothDisconnectRequested(context,intent);  } else   if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {    onBluetoothBondStateChange(context,intent);  } else   if (BluetoothDevice.ACTION_CLASS_CHANGED.equals(action)) {    onBluetoothRemoteDeviceClassChange(context,intent);  } else   if (BluetoothDevice.ACTION_FOUND.equals(action)) {    onBluetoothPeerFound(context,intent);  } else   if (BluetoothDevice.ACTION_NAME_CHANGED.equals(action)) {    onBluetoothRemoteNameChange(context,intent);  } else   if (BluetoothDevice.ACTION_UUID.equals(action)) {    onBluetoothBroadcastRemoteUUID(context,intent);  } else {    Log.wtf(TAG,"Received an event we weren't expecting: " + action);  }}  }
class C{  public void sleepTurns(final long turns){  sleepMillis(turns * 300);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.TAG_VALUE__KEY:    setKey((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private KrbApRep(byte[] msg,Credentials tgs_creds) throws KrbException, IOException {  this(new DerValue(msg),tgs_creds);}  }
class C{  public AlgorithmException(Algorithm algorithm){  this(algorithm,null,null);}  }
class C{  public static JsonArray array(boolean... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  boolean value : values) {    array.add(value);  }  return array;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public static void writeCovMatrix(ICovarianceMatrix covMatrix,PrintWriter out,NumberFormat nf){  int numVars=covMatrix.getVariableNames().size();  out.println(covMatrix.getSampleSize());  for (int i=0; i < numVars; i++) {    String name=covMatrix.getVariableNames().get(i);    out.print(name + "\t");  }  out.println();  for (int j=0; j < numVars; j++) {    for (int i=0; i <= j; i++) {      if (Double.isNaN(covMatrix.getValue(i,j))) {        out.print("*" + "\t");      } else {        out.print(nf.format(covMatrix.getValue(i,j)) + "\t");      }    }    out.println();  }  out.flush();  out.close();}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected void processUpdates(Queue<DeviceUpdate> updates){  if (updates == null)   return;  DeviceUpdate update=null;  while (null != (update=updates.poll())) {    if (logger.isTraceEnabled()) {      logger.trace("Dispatching device update: {}",update);    }    if (update.change == DeviceUpdate.Change.DELETE)     deviceSyncManager.removeDevice(update.device); else     deviceSyncManager.storeDevice(update.device);    List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();    notifyListeners(listeners,update);  }}  }
class C{  public void testConstrStringExceptionExponentGreaterIntegerMax(){  String a="-238768.787678287e214748364767876";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  private void selectArrowTools(){  addDirectedEdge.setEnabled(true);  addNondirectedEdge.setEnabled(true);  addPartiallyOrientedEdge.setEnabled(true);  addBidirectedEdge.setEnabled(true);}  }
class C{  public boolean verify(byte[] sign) throws SignatureException {  return signature.verify(sign);}  }
class C{  public void replyToMessage(Message srcMsg,int what,int arg1,int arg2,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  msg.obj=obj;  replyToMessage(srcMsg,msg);}  }
class C{  private static boolean kenLMIsLoaded(){  try {    System.loadLibrary(KenLanguageModel.KENLM_LIBRARY_NAME);    return true;  } catch (  java.lang.UnsatisfiedLinkError e) {    return false;  }}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public void add(BigDecimal v){  if (v == null) {    addNull();  } else {    _add(numberNode(v));  }}  }
class C{  public void close(){  m_database.close();}  }
class C{  private boolean verifyValueInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    Double.parseDouble(inputString);  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  public N4ClassifierDefinition basicGetOwner(){  if (eContainerFeatureID() != N4JSPackage.N4_SETTER_DECLARATION__OWNER)   return null;  return (N4ClassifierDefinition)eInternalContainer();}  }
class C{  public String createContact(String firstName,String familyName,String officePhone,String homePhone,String cellPhone,String email){  return impl.createContact(firstName,familyName,officePhone,homePhone,cellPhone,email);}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public static void requestBugReport(Error e){  err("An unexpected error occurred. Please send a report of this to");  err("<bugs@jflex.de> and include the following information:");  err("");  printSystemInfo();  err("Exception:");  e.printStackTrace(out);  err("");  err("Please also include a specification (as small as possible)");  err("that triggers this error. You may also want to check at");  err("http://www.jflex.de if there is a newer version available");  err("that doesn't have this problem");  err("");  err("Thanks for your support.");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  UserRecord rec=getUserRecord(stack);  if (name == null || rec == null)   return null;  return rec.getProperty(name);}  }
class C{  public boolean providesIdentifier(){  return false;}  }
class C{  public static void prepareList(Context context,Window window){  View content=window.findViewById(NativeResources.getIdentifier("contentPanel"));  if (content != null && content instanceof ViewGroup) {    ViewGroup viewGroup=(ViewGroup)content;    if (viewGroup.getChildCount() > 0) {      View firstView=viewGroup.getChildAt(0);      if (firstView instanceof ListView)       ((ListView)firstView).setDividerHeight(0);    }  }}  }
class C{  public void testConstructorSignBytesPositive5(){  byte aBytes[]={-127,56,100,-2};  int aSign=1;  byte rBytes[]={0,-127,56,100,-2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  @Deprecated public static void handleAverages(IOContainer evalOutput,List<AverageVector> averageVectors,boolean onlyPerformanceVectors) throws OperatorException {  Class<? extends IOObject> requestClass=AverageVector.class;  if (onlyPerformanceVectors) {    requestClass=PerformanceVector.class;  }  if (averageVectors.size() == 0) {    boolean inputOk=true;    while (inputOk) {      try {        AverageVector currentAverage=(AverageVector)evalOutput.remove(requestClass);        averageVectors.add(currentAverage);        for (int i=0; i < currentAverage.getSize(); i++) {          currentAverage.getAveragable(i).setAverageCount(0);        }      } catch (      MissingIOObjectException e) {        inputOk=false;      }    }  } else {    for (int n=0; n < averageVectors.size(); n++) {      AverageVector currentAverage=(AverageVector)evalOutput.remove(requestClass);      AverageVector oldVector=averageVectors.get(n);      if (!oldVector.getClass().isInstance(currentAverage)) {        throw new OperatorException("ValidationChain: Average vector mismatch! Fatal error.");      }      for (int i=0; i < oldVector.size(); i++) {        oldVector.getAveragable(i).buildAverage(currentAverage.getAveragable(i));      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.INLINE_TAG__TITLE:    setTitle((TagTitle)newValue);  return;case DomPackage.INLINE_TAG__VALUES:getValues().clear();getValues().addAll((Collection<? extends TagValue>)newValue);return;case DomPackage.INLINE_TAG__TAG_DEFINITION:setTagDefinition((ITagDefinition)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static Schema parseSchema(String schemaStr,Configuration conf){  Schema schema=null;  try {    schema=new Schema.Parser().parse(schemaStr);  } catch (  SchemaParseException ex) {    boolean skipNameValidation=skipNameValidation(conf);    if (skipNameValidation) {      LOG.warn("Cannot parse schema. " + ex);      LOG.info("Try one more time without name validation.");      Schema.Parser parser=new Schema.Parser();      schema=parser.setValidate(false).parse(schemaStr);    } else {      throw ex;    }  }  return schema;}  }
class C{  @SuppressWarnings({"HardCodedStringLiteral"}) public static void generateDataBindingMethods(final WizardData data) throws MyException {  if (data.myBindToNewBean) {    data.myBeanClass=createBeanClass(data);  } else {    if (!CommonRefactoringUtil.checkReadOnlyStatus(data.myBeanClass.getProject(),data.myBeanClass)) {      return;    }  }  final HashMap<String,String> binding2beanGetter=new HashMap<String,String>();  final HashMap<String,String> binding2beanSetter=new HashMap<String,String>();  final FormProperty2BeanProperty[] bindings=data.myBindings;  for (  final FormProperty2BeanProperty form2bean : bindings) {    if (form2bean == null || form2bean.myBeanProperty == null) {      continue;    }{      final String setterName=PropertyUtil.suggestSetterName(form2bean.myBeanProperty.myName);      final PsiMethod[] methodsByName=data.myBeanClass.findMethodsByName(setterName,true);      if (methodsByName.length < 1) {        LOG.assertTrue(!data.myBindToNewBean);        if (!data.myBeanClass.isWritable()) {          throw new MyException("Cannot add property to non writable class " + data.myBeanClass.getQualifiedName());        }        final StringBuffer membersBuffer=new StringBuffer();        final StringBuffer methodsBuffer=new StringBuffer();        final Project project=data.myBeanClass.getProject();        final CodeStyleManager formatter=CodeStyleManager.getInstance(project);        final JavaCodeStyleManager styler=JavaCodeStyleManager.getInstance(project);        generateProperty(styler,form2bean.myBeanProperty.myName,form2bean.myBeanProperty.myType,membersBuffer,methodsBuffer);        final PsiClass fakeClass;        try {          fakeClass=JavaPsiFacade.getInstance(data.myBeanClass.getProject()).getElementFactory().createClassFromText(membersBuffer.toString() + methodsBuffer.toString(),null);          final PsiField[] fields=fakeClass.getFields();{            final PsiElement result=data.myBeanClass.add(fields[0]);            styler.shortenClassReferences(result);            formatter.reformat(result);          }          final PsiMethod[] methods=fakeClass.getMethods();{            final PsiElement result=data.myBeanClass.add(methods[0]);            styler.shortenClassReferences(result);            formatter.reformat(result);          }{            final PsiElement result=data.myBeanClass.add(methods[1]);            styler.shortenClassReferences(result);            formatter.reformat(result);          }        } catch (        IncorrectOperationException e) {          throw new MyException(e.getMessage());        }      }    }    final PsiMethod propertySetter=PropertyUtil.findPropertySetter(data.myBeanClass,form2bean.myBeanProperty.myName,false,true);    final PsiMethod propertyGetter=PropertyUtil.findPropertyGetter(data.myBeanClass,form2bean.myBeanProperty.myName,false,true);    if (propertyGetter == null) {      continue;    }    if (propertySetter == null) {      continue;    }    final String binding=form2bean.myFormProperty.getLwComponent().getBinding();    binding2beanGetter.put(binding,propertyGetter.getName());    binding2beanSetter.put(binding,propertySetter.getName());  }  final String dataBeanClassName=data.myBeanClass.getQualifiedName();  final LwRootContainer[] rootContainer=new LwRootContainer[1];  final FormProperty[] formProperties=exposeForm(data.myProject,data.myFormFile,rootContainer);  final StringBuffer getDataBody=new StringBuffer();  final StringBuffer setDataBody=new StringBuffer();  final StringBuffer isModifiedBody=new StringBuffer();  for (  final FormProperty formProperty : formProperties) {    final String binding=formProperty.getLwComponent().getBinding();    if (!binding2beanGetter.containsKey(binding)) {      continue;    }    getDataBody.append("data.");    getDataBody.append(binding2beanSetter.get(binding));    getDataBody.append("(");    getDataBody.append(binding);    getDataBody.append(".");    getDataBody.append(formProperty.getComponentPropertyGetterName());    getDataBody.append("());\n");    setDataBody.append(binding);    setDataBody.append(".");    setDataBody.append(formProperty.getComponentPropertySetterName());    setDataBody.append("(data.");    setDataBody.append(binding2beanGetter.get(binding));    setDataBody.append("());\n");    final String propertyClassName=formProperty.getComponentPropertyClassName();    if ("boolean".equals(propertyClassName)) {      isModifiedBody.append("if (");      isModifiedBody.append(binding);      isModifiedBody.append(".");      isModifiedBody.append(formProperty.getComponentPropertyGetterName());      isModifiedBody.append("()");      isModifiedBody.append("!= ");      isModifiedBody.append("data.");      isModifiedBody.append(binding2beanGetter.get(binding));      isModifiedBody.append("()");      isModifiedBody.append(") return true;\n");    } else {      isModifiedBody.append("if (");      isModifiedBody.append(binding);      isModifiedBody.append(".");      isModifiedBody.append(formProperty.getComponentPropertyGetterName());      isModifiedBody.append("()");      isModifiedBody.append("!= null ? ");      isModifiedBody.append("!");      isModifiedBody.append(binding);      isModifiedBody.append(".");      isModifiedBody.append(formProperty.getComponentPropertyGetterName());      isModifiedBody.append("()");      isModifiedBody.append(".equals(");      isModifiedBody.append("data.");      isModifiedBody.append(binding2beanGetter.get(binding));      isModifiedBody.append("()");      isModifiedBody.append(") : ");      isModifiedBody.append("data.");      isModifiedBody.append(binding2beanGetter.get(binding));      isModifiedBody.append("()");      isModifiedBody.append("!= null");      isModifiedBody.append(") return true;\n");    }  }  isModifiedBody.append("return false;\n");  final String textOfMethods="public void setData(" + dataBeanClassName + " data){\n"+ setDataBody.toString()+ "}\n"+ "\n"+ "public void getData("+ dataBeanClassName+ " data){\n"+ getDataBody.toString()+ "}\n"+ "\n"+ "public boolean isModified("+ dataBeanClassName+ " data){\n"+ isModifiedBody.toString()+ "}\n";  final Module module=ModuleUtil.findModuleForFile(data.myFormFile,data.myProject);  LOG.assertTrue(module != null);  final PsiClass boundClass=FormEditingUtil.findClassToBind(module,rootContainer[0].getClassToBind());  LOG.assertTrue(boundClass != null);  if (!CommonRefactoringUtil.checkReadOnlyStatus(module.getProject(),boundClass)) {    return;  }  final PsiClass fakeClass;  try {    fakeClass=JavaPsiFacade.getInstance(data.myProject).getElementFactory().createClassFromText(textOfMethods,null);    final PsiMethod methodSetData=fakeClass.getMethods()[0];    final PsiMethod methodGetData=fakeClass.getMethods()[1];    final PsiMethod methodIsModified=fakeClass.getMethods()[2];    final PsiMethod existing1=boundClass.findMethodBySignature(methodSetData,false);    final PsiMethod existing2=boundClass.findMethodBySignature(methodGetData,false);    final PsiMethod existing3=boundClass.findMethodBySignature(methodIsModified,false);    if (existing1 != null) {      existing1.delete();    }    if (existing2 != null) {      existing2.delete();    }    if (existing3 != null) {      existing3.delete();    }    final CodeStyleManager formatter=CodeStyleManager.getInstance(module.getProject());    final JavaCodeStyleManager styler=JavaCodeStyleManager.getInstance(module.getProject());    final PsiElement setData=boundClass.add(methodSetData);    styler.shortenClassReferences(setData);    formatter.reformat(setData);    final PsiElement getData=boundClass.add(methodGetData);    styler.shortenClassReferences(getData);    formatter.reformat(getData);    if (data.myGenerateIsModified) {      final PsiElement isModified=boundClass.add(methodIsModified);      styler.shortenClassReferences(isModified);      formatter.reformat(isModified);    }    final OpenFileDescriptor descriptor=new OpenFileDescriptor(setData.getProject(),setData.getContainingFile().getVirtualFile(),setData.getTextOffset());    FileEditorManager.getInstance(data.myProject).openTextEditor(descriptor,true);  } catch (  IncorrectOperationException e) {    throw new MyException(e.getMessage());  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTATION_ARGUMENT;}  }
class C{  protected void connectionEstablished(Channel connectedChannel){  LOG.info("WebSocket connectionEstablished! {}",connectedChannel);  channel=connectedChannel;  connected.set(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.012 -0500",hash_original_method="A9DB3F83816CED00173237937952E9D8",hash_generated_method="F79B5A2E07ACD55A548C33C3CE214E10") public SIPHeader parse() throws ParseException {  AcceptEncodingList acceptEncodingList=new AcceptEncodingList();  if (debug)   dbg_enter("AcceptEncodingParser.parse");  try {    headerName(TokenTypes.ACCEPT_ENCODING);    if (lexer.lookAhead(0) == '\n') {      AcceptEncoding acceptEncoding=new AcceptEncoding();      acceptEncodingList.add(acceptEncoding);    } else {      while (lexer.lookAhead(0) != '\n') {        AcceptEncoding acceptEncoding=new AcceptEncoding();        if (lexer.lookAhead(0) != ';') {          lexer.match(TokenTypes.ID);          Token value=lexer.getNextToken();          acceptEncoding.setEncoding(value.getTokenValue());        }        while (lexer.lookAhead(0) == ';') {          this.lexer.match(';');          this.lexer.SPorHT();          this.lexer.match('q');          this.lexer.SPorHT();          this.lexer.match('=');          this.lexer.SPorHT();          lexer.match(TokenTypes.ID);          Token value=lexer.getNextToken();          try {            float qv=Float.parseFloat(value.getTokenValue());            acceptEncoding.setQValue(qv);          } catch (          NumberFormatException ex) {            throw createParseException(ex.getMessage());          }catch (          InvalidArgumentException ex) {            throw createParseException(ex.getMessage());          }          this.lexer.SPorHT();        }        acceptEncodingList.add(acceptEncoding);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');          this.lexer.SPorHT();        }      }    }    return acceptEncodingList;  }  finally {    if (debug)     dbg_leave("AcceptEncodingParser.parse");  }}  }
class C{  private IJavaElement[] computeChildren(ArrayList namesWithoutExtension){  int size=namesWithoutExtension.size();  if (size == 0)   return NO_ELEMENTS;  IJavaElement[] children=new IJavaElement[size];  for (int i=0; i < size; i++) {    String nameWithoutExtension=(String)namesWithoutExtension.get(i);    children[i]=new ClassFile(this,manager,nameWithoutExtension);  }  return children;}  }
class C{  public Grammar(int size){  this(new int[size]);}  }
class C{  public static String encodeHexString(final byte[] data){  return new String(encodeHex(data));}  }
class C{  private int supplementalHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public static boolean isFile(String fileName){  File f=new File(fileName);  return f.isFile();}  }
class C{  private void executePerms(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length < 3) {    printMessage(COMMAND_HELP_PERMS);    return;  }  if (args[1].equals("list") && args.length == 3) {    AclFeed feed=documentList.getAclFeed(args[2]);    if (feed != null) {      for (      AclEntry entry : feed.getEntries()) {        printAclEntry(entry);      }    }  } else   if (args[1].equals("add") && args.length == 6) {    AclRole role=new AclRole(args[2]);    AclScope scope;    if (args[3].equals("user")) {      scope=new AclScope(AclScope.Type.USER,args[4]);    } else     if (args[3].equals("domain")) {      scope=new AclScope(AclScope.Type.DOMAIN,args[4]);    } else {      printMessage(COMMAND_HELP_PERMS);      return;    }    printAclEntry(documentList.addAclRole(role,scope,args[5]));  } else   if (args[1].equals("change") && args.length == 6) {    AclRole role=new AclRole(args[2]);    AclScope scope;    if (args[3].equals("user")) {      scope=new AclScope(AclScope.Type.USER,args[4]);    } else     if (args[3].equals("domain")) {      scope=new AclScope(AclScope.Type.DOMAIN,args[4]);    } else {      printMessage(COMMAND_HELP_PERMS);      return;    }    printAclEntry(documentList.changeAclRole(role,scope,args[5]));  } else   if (args[1].equals("remove") && args.length == 5) {    documentList.removeAclRole(args[2],args[3],args[4]);  } else {    printMessage(COMMAND_HELP_PERMS);  }}  }
class C{  public T casePropertyNameValuePair(PropertyNameValuePair object){  return null;}  }
class C{  public DeleteKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("DeleteKeyPairAction.statusbar"));  putValue(NAME,res.getString("DeleteKeyPairAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("DeleteKeyPairAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DeleteKeyPairAction.image")))));}  }
class C{  @Override public void onWebSocketClose(int statusCode,String reason){  super.onWebSocketClose(statusCode,reason);  log.info("Socket for peer {} closed: {}",peerID,Integer.toString(statusCode) + " " + reason);  store.unsubscribe(handle);}  }
class C{  @ReactMethod public void rClear(int notificationID,Callback errorCallback,Callback successCallback){  try {    Notification n=mNotificationManager.clear(notificationID);    successCallback.invoke(n.getAttributes().asReadableMap());  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rClear Error: " + Log.getStackTraceString(e));  }}  }
class C{  public boolean isStopping(){  return this.donePlaying || this.fadeOut || !this.type.isActive();}  }
class C{  public boolean returnsMissingImageOnError(){  return cache.returnMissingImageOnError;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FINALLY_BLOCK;}  }
class C{  protected CheckRefImpl(){  super();}  }
class C{  public BasicPoolEntryRef(BasicPoolEntry entry,ReferenceQueue<Object> queue){  super(entry,queue);  if (entry == null) {    throw new IllegalArgumentException("Pool entry must not be null.");  }  route=entry.getPlannedRoute();}  }
class C{  public ExtendedErrorDialog(Window owner,String key,String errorMessage,Object... arguments){  super(owner,"error." + key,ModalityType.APPLICATION_MODAL,arguments);  boolean hasError=errorMessage != null && !errorMessage.isEmpty();  JScrollPane detailedPane=hasError ? createDetailPanel(errorMessage) : null;  layoutDefault(mainComponent,SIZE,getButtons(hasError,false,detailedPane,null));}  }
class C{  public Matrix3 trn(float x,float y){  val[6]+=x;  val[7]+=y;  return this;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public SimpleSAXParser(XMLReader xmlReader){  super();  this.xmlReader=xmlReader;}  }
class C{  public ContactHeader createContactHeader(){  Contact contact=new Contact();  contact.setWildCardFlag(true);  contact.setExpires(0);  return contact;}  }
class C{  public <T>boolean has(Class<T> clazz){  return configuration.getClass().equals(clazz) || (fieldCache.getIfPresent(clazz) != null);}  }
class C{  public void testHashCode(){  byte[] key=new byte[]{1,2,3,4,5};  String algorithm="Algorithm";  SecretKeySpec ks1=new SecretKeySpec(key,algorithm);  SecretKeySpec ks2=new SecretKeySpec(key,algorithm);  assertTrue("Equal objects should have the same hash codes.",ks1.hashCode() == ks2.hashCode());}  }
class C{  @Override public void stop(BundleContext context) throws Exception {  if (xmindWorkspaceSession != null) {    xmindWorkspaceSession.close();    xmindWorkspaceSession=null;  }  licenseAgent=null;  super.stop(context);  plugin=null;}  }
class C{  synchronized void showSelectedFrames(){  Object[] vals=frameListDisplay.getSelectedValues();  for (int x=0; x < vals.length; x++) {    ((JFrame)(vals[x])).toFront();    ((JFrame)(vals[x])).setVisible(true);  }  frameListDisplay.repaint();}  }
class C{  protected boolean isReuseAddressChanged(){  return true;}  }
class C{  private static MobileDoc createPage(WWindowStatus ws){  MobileDoc doc=MobileDoc.createWindow(ws.mWindow.getName());  return doc;}  }
class C{  public static String sanitizeSAMHeader(String samString){  return samString.replaceAll("@PG.*\n","").replaceAll("@CO.*\n","");}  }
class C{  public void replaceExternalIdsWithDbIds(){  Set<Entry<CnATreeElement,List<SyncAttribute>>> entrySet=cnaTreeElement2SyncAttributes.entrySet();  for (  Map.Entry<CnATreeElement,List<SyncAttribute>> syncElement : entrySet) {    CnATreeElement hydratedElement=hydrateCnaTreeElement(syncElement);    List<SyncAttribute> syncAttributes=syncElement.getValue();    for (    SyncAttribute syncAttribute : syncAttributes) {      String name=syncAttribute.getName();      PropertyList propertiesList=hydratedElement.getEntity().getProperties(name);      overWriteExternalIdWithDatabaseId(hydratedElement,propertiesList);      updateElement(hydratedElement);    }  }}  }
class C{  public TaskList createFullCopy(URI sourceURI,VolumeFullCopyCreateParam param) throws InternalException {  s_logger.info("START create full copy for source {}",sourceURI);  String taskId=UUID.randomUUID().toString();  List<BlockObject> fcSourceObjList=null;  BlockFullCopyApi fullCopyApiImpl=null;  BlockObject fcSourceObj=BlockFullCopyUtils.queryFullCopyResource(sourceURI,_uriInfo,true,_dbClient);  int count=param.getCount() == null ? 1 : param.getCount();  String name=TimeUtils.formatDateForCurrent(param.getName());  boolean createInactive=param.getCreateInactive() == null ? Boolean.FALSE : param.getCreateInactive();  VolumeGroup volumeGroup=(fcSourceObj instanceof Volume) ? ((Volume)fcSourceObj).getApplication(_dbClient) : null;  boolean partialRequest=fcSourceObj.checkInternalFlags(Flag.VOLUME_GROUP_PARTIAL_REQUEST);  VirtualArray varray=null;  if (volumeGroup != null && !partialRequest) {    s_logger.info("Volume {} is part of Application, Creating full copy for all volumes in the Application.",sourceURI);    List<Volume> volumes=ControllerUtils.getVolumeGroupVolumes(_dbClient,volumeGroup);    if (volumes != null && !volumes.isEmpty() && Volume.checkForRP(_dbClient,volumes.iterator().next().getId())) {      List<Volume> rpVolumes=RPHelper.getVolumesForSite(param.getVarrayId(),param.getVpoolId(),volumes);      volumes.clear();      volumes.addAll(rpVolumes);    }    Map<String,List<Volume>> arrayGroupToVolumesMap=ControllerUtils.groupVolumesByArrayGroup(volumes,_dbClient);    fcSourceObjList=new ArrayList<BlockObject>();    for (    String arrayGroupName : arrayGroupToVolumesMap.keySet()) {      List<Volume> volumeList=arrayGroupToVolumesMap.get(arrayGroupName);      s_logger.debug("Processing Array Replication Group {}, volumes: {}",arrayGroupName,volumeList.size());      fcSourceObj=volumeList.iterator().next();      s_logger.debug("volume selected :{}",fcSourceObj.getNativeGuid());      Project project=BlockFullCopyUtils.queryFullCopySourceProject(fcSourceObj,_dbClient);      varray=BlockServiceUtils.verifyVirtualArrayForRequest(project,fcSourceObj.getVirtualArray(),_uriInfo,_permissionsHelper,_dbClient);      fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fcSourceObj);      List<BlockObject> fcSourceObjListPerArrayGroup=fullCopyApiImpl.getAllSourceObjectsForFullCopyRequest(fcSourceObj);      validateFullCopyCreateRequest(fcSourceObjListPerArrayGroup,project,name,count,createInactive,fullCopyApiImpl);      fcSourceObjList.addAll(fcSourceObjListPerArrayGroup);    }  } else {    Project project=BlockFullCopyUtils.queryFullCopySourceProject(fcSourceObj,_dbClient);    varray=BlockServiceUtils.verifyVirtualArrayForRequest(project,fcSourceObj.getVirtualArray(),_uriInfo,_permissionsHelper,_dbClient);    fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fcSourceObj);    fcSourceObjList=fullCopyApiImpl.getAllSourceObjectsForFullCopyRequest(fcSourceObj);    validateFullCopyCreateRequest(fcSourceObjList,project,name,count,createInactive,fullCopyApiImpl);  }  TaskList taskList=fullCopyApiImpl.create(fcSourceObjList,varray,name,createInactive,count,taskId);  s_logger.info("FINISH create full copy for source {}",sourceURI);  return taskList;}  }
class C{  public static void inFromRightAnimation(View view){  Animation inFromRight=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,+1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);  inFromRight.setDuration(240);  inFromRight.setInterpolator(new AccelerateInterpolator());  view.startAnimation(inFromRight);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  String line(final String line){  final String[] split=splitLine(line);  if (split == null) {    return null;  }  mNonblankLines++;  if (split.length < 2) {    return "Version line too short";  }  if (mNonblankLines == 1) {    if (split.length != 2 || !split[0].equals("version") || !(split[1].equals("0") || split[1].equals("1"))) {      return "Invalid version line.";    }    return null;  }  final Sex lineSex=getSex(split[0]);  if (lineSex == null) {    return "Invalid sex:" + split[0];  }  final String type=split[1];  final boolean match=sexMatch(mSex,lineSex);switch (type) {case "def":    return def(split,match);case "seq":  return seq(split,match);case "dup":return dup(split,match);default :return "Invalid line type (should be one of: def, seq, dup):" + type;}}  }
class C{  public ElkanKMeans(DistanceMetric dm,Random rand,SeedSelection seedSelection){  super(dm,seedSelection,rand);  if (!dm.isSubadditive())   throw new ClusterFailureException("KMeans implementation requires the triangle inequality");}  }
class C{  public boolean contains(Coordinate p){  return covers(p);}  }
class C{  public void focusGained(FocusEvent e){  if (log.isDebugEnabled()) {    log.debug("focusGained");  }  enterField();}  }
class C{  public void reset(){  currentPosition=0;}  }
class C{  public static void startOtherActivity(Context context,Intent intent){  startOtherActivity(context,intent,context.getString(R.string.target_app_not_found));}  }
class C{  @Override public void initializeService(org.jsoup.nodes.Document document,String adaptedContent){  Date beginDate=null;  if (document != null) {    this.jsoupDocument=document;  }  if (LOGGER.isDebugEnabled()) {    beginDate=new Date();    LOGGER.debug("Initialising source Map by line");  }  if (adaptedContent != null) {    initializeRawSourceCodeMap(adaptedContent);  }  if (LOGGER.isDebugEnabled()) {    Date endDate=new Date();    LOGGER.debug("initialisation of source map by line took " + (endDate.getTime() - beginDate.getTime()) + "ms");  }  resetService();}  }
class C{  public HashKey(byte[] hash){  if (hash == null)   throw new NullPointerException();  _hash=hash;}  }
class C{  public Fingerprint open(){  if (ENABLED) {    assert current.get() == null;    current.set(this);    return this;  }  return null;}  }
class C{  public void schedule(String selector,Object target,float interval,boolean paused){  assert selector != null : "Argument selector must be non-nil";  assert target != null : "Argument target must be non-nil";  tHashSelectorEntry element=hashForSelectors.get(target);  if (element == null) {    element=new tHashSelectorEntry();    element.target=target;    hashForSelectors.put(target,element);    element.paused=paused;  } else {    assert element.paused == paused : "CCScheduler. Trying to schedule a selector with a pause value different than the target";  }  if (element.timers == null) {    element.timers=new ArrayList<CCTimer>();  }  CCTimer timer=new CCTimer(target,selector,interval);  element.timers.add(timer);}  }
class C{  private void initClusterContext(){  int port=getThriftPort();  ConnectionPoolConfigurationImpl cfg=new ConnectionPoolConfigurationImpl(clusterName).setMaxConnsPerHost(1).setSeeds(String.format("%1$s:%2$d",LOCAL_HOST,port));  if (isClientToNodeEncrypted()) {    SSLConnectionContext sslContext=getSSLConnectionContext();    cfg.setSSLConnectionContext(sslContext);  }  clusterContext=new AstyanaxContext.Builder().forCluster(clusterName).forKeyspace(getKeyspaceName()).withAstyanaxConfiguration(new AstyanaxConfigurationImpl().setRetryPolicy(new QueryRetryPolicy(10,1000))).withConnectionPoolConfiguration(cfg).buildCluster(ThriftFamilyFactory.getInstance());  clusterContext.start();  cluster=clusterContext.getClient();}  }
class C{  public EventTimeInputBuilder<T> repeatAll(TimeSpan timeSpan,int times){  long start=getLastTimestamp();  List<Pair<StreamRecord<T>,Long>> toAppend=new ArrayList<>();  for (int i=0; i < times; i++) {    toAppend.addAll(repeatInput(timeSpan.getTimestamp(0),start));    start=calculateShiftDifference(toAppend.get(toAppend.size() - 1));  }  input.addAll(toAppend);  return this;}  }
class C{  public BinaryContext pushContext(){  return pushContext(ctx);}  }
class C{  private static long dateValueFromCalendar(Calendar cal){  int year, month, day;  year=getYear(cal);  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  return ((long)year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;}  }
class C{  public boolean forEach(CharProcedure procedure){  char[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public byte readByte(){  return data[pos++];}  }
class C{  public void test_8_2_1() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-8-2-1","named-graphs-8-2-1.rq","named-graphs-8-2-1.trig","named-graphs-8-2-1.srx").runTest();}  }
class C{  public static int minIndex(int[] ints){  int minimum=0;  int minIndex=0;  for (int i=0; i < ints.length; i++) {    if ((i == 0) || (ints[i] < minimum)) {      minIndex=i;      minimum=ints[i];    }  }  return minIndex;}  }
class C{  public Vector3f mulProject(Matrix4fc mat){  return mulProject(mat,this);}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;}  }
class C{  public final void writeLong(long v) throws IOException {  w[0]=(byte)v;  w[1]=(byte)(v >> 8);  w[2]=(byte)(v >> 16);  w[3]=(byte)(v >> 24);  w[4]=(byte)(v >> 32);  w[5]=(byte)(v >> 40);  w[6]=(byte)(v >> 48);  w[7]=(byte)(v >> 56);  r.write(w,0,8);}  }
class C{  public CstAnnotation(Annotation annotation){  if (annotation == null) {    throw new NullPointerException("annotation == null");  }  annotation.throwIfMutable();  this.annotation=annotation;}  }
class C{  private void teleportAway(int turn){  Iterator<PlayerPositionEntry> itr=playerPositions.iterator();  while (itr.hasNext()) {    PlayerPositionEntry entry=itr.next();    if (entry.getTurn() + GRACE_PERIOD_IN_TURNS < turn) {      itr.remove();      KeepFreeArea keepFreeArea=entry.getKeepFreeArea();      Player player=entry.getPlayer();      if (player == null) {        continue;      }      player.teleport(keepFreeArea.getZone(),keepFreeArea.getX(),keepFreeArea.getY(),Direction.DOWN,player);    }  }}  }
class C{  public double eval(double params[]){  return (Math.tan(params[0]));}  }
class C{  protected void sequence_Addition_And_Comparison_Exponentiation_Multiplication_Or(ISerializationContext context,Expression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementassociatedattribute.class,args);}  }
class C{  public Hessian2StreamingInput(InputStream is){  _is=new StreamingInputStream(is);  _in=new Hessian2Input(_is);}  }
class C{  public void removeEventListener(IFileUploadListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Remove a file upload event listener");  }  try {synchronized (lock) {      mBroadcaster.removeEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public ASTVisitor(boolean visitDocTags){  this.visitDocTags=visitDocTags;}  }
class C{  public boolean isAbstract(){  return true;}  }
class C{  @SideOnly(Side.CLIENT) public static void bindTexture(final ResourceLocation location){  Minecraft.getMinecraft().getTextureManager().bindTexture(location);}  }
class C{  private void updateSoundList(){  if (getWeight() > 50) {    setSounds(largeSheepSounds);  } else {    setSounds(smallSheepSounds);  }}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  public void concatenate(SIPObjectList otherList){  super.concatenate(otherList);}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  private boolean checkTwoNodes(SpeakerNPC npc,Node first,Node second,StringBuilder msg){  StendhalRPZone zone=npc.getZone();  ActiveEntity entity=new ActiveEntity(){  };  entity.setPosition(first.getX(),first.getY());  while ((entity.getX() != second.getX()) || (entity.getY() != second.getY())) {    if (zone.collides(entity.getX(),entity.getY())) {      msg.append(npc.getName());      msg.append(" will hit collision at (");      msg.append(entity.getX());      msg.append(",");      msg.append(entity.getY());      msg.append(").\n");      return false;    }    entity.faceto(second.getX(),second.getY());    Direction d=entity.getDirection();    entity.setPosition(entity.getX() + d.getdx(),entity.getY() + d.getdy());  }  return true;}  }
class C{  public final ResultSet executeQuery() throws SQLException {  return m_ps.executeQuery();}  }
class C{  public void writeToNBT(){  NBTTagList list=new NBTTagList();  NBTTagCompound dummy=new NBTTagCompound();  for (  ItemStack stack : stacks) {    NBTTagCompound itemTag=new NBTTagCompound();    itemTag.setInteger(NBT_ITEM_TYPE,Item.getIdFromItem(stack.getItem()));    itemTag.setInteger(NBT_ITEM_QUANTITY,stack.stackSize);    itemTag.setInteger(NBT_ITEM_DAMAGE,stack.getItemDamage());    if (stack.hasTagCompound()) {      itemTag.setTag(NBT_ITEM_NBT,stack.getTagCompound());    }    stack.writeToNBT(dummy);    if (dummy.hasKey("ForgeCaps")) {      itemTag.setTag(NBT_ITEM_CAPS,dummy.getTag("ForgeCaps"));    }    dummy.removeTag("ForgeCaps");    list.appendTag(itemTag);  }  tag.setTag(NBT_ITEMS,list);  tag.setInteger(NBT_PROTOCOL,PROTOCOL);}  }
class C{  public MailboxQuery(MailboxPath base,String expression,char pathDelimiter){  super();  this.base=base;  if (base.getName() == null)   this.base.setName("");  if (expression == null) {    this.expression="";  } else {    this.expression=expression;  }  this.pathDelimiter=pathDelimiter;  pattern=constructEscapedRegex();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.stroke,stream);}  }
class C{  protected DocumentCommand(){}  }
class C{  private void fetchFlowCollectionEnd(boolean isMappingEnd){  removePossibleSimpleKey();  this.flowLevel--;  this.allowSimpleKey=false;  Mark startMark=reader.getMark();  reader.forward();  Mark endMark=reader.getMark();  Token token;  if (isMappingEnd) {    token=new FlowMappingEndToken(startMark,endMark);  } else {    token=new FlowSequenceEndToken(startMark,endMark);  }  this.tokens.add(token);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Ripper.getGlobalRipper().cancel();  return null;}  }
class C{  public final void selectNone(){  select(getCaretPosition(),getCaretPosition());}  }
class C{  public IElementType parseHeredocOpener(){  CharSequence openToken=yytext();  Matcher m;  int newState=LEX_HEREDOC_WAITING_QQ;  if (StringUtil.endsWithChar(openToken,'"')) {    m=HEREDOC_OPENER_PATTERN_DQ.matcher(openToken);  } else   if (StringUtil.endsWithChar(openToken,'\'')) {    m=HEREDOC_OPENER_PATTERN_SQ.matcher(openToken);    newState=LEX_HEREDOC_WAITING;  } else   if (StringUtil.endsWithChar(openToken,'`')) {    m=HEREDOC_OPENER_PATTERN_XQ.matcher(openToken);    newState=LEX_HEREDOC_WAITING_QX;  } else {    m=HEREDOC_OPENER_PATTERN.matcher(openToken);  }  Character nextCharacter=getNextSignificantCharacter();  yypushback(openToken.length() - 2);  if (m.matches()) {    preparsedTokensList.clear();    int currentPosition=getNextTokenStart();    if (m.groupCount() > 1) {      String heredocMarker=m.group(3);      heredocQueue.push(new PerlHeredocQueueElement(newState,heredocMarker));      int elementLength=m.group(1).length();      if (elementLength > 0) {        pushPreparsedToken(currentPosition,currentPosition + elementLength,TokenType.WHITE_SPACE);      }      currentPosition+=elementLength;      pushPreparsedToken(currentPosition,currentPosition + 1,getOpenQuoteTokenType(m.group(2).charAt(0)));      currentPosition++;      if (heredocMarker.length() > 0) {        pushPreparsedToken(currentPosition,currentPosition + heredocMarker.length(),STRING_IDENTIFIER);        currentPosition+=heredocMarker.length();      }      pushPreparsedToken(currentPosition,currentPosition + 1,getCloseQuoteTokenType(m.group(2).charAt(0)));    } else     if (m.group(1).matches("\\d+")) {      return OPERATOR_SHIFT_LEFT;    } else {      if (nextCharacter != null && nextCharacter.equals('(')) {        return OPERATOR_SHIFT_LEFT;      }      String heredocMarker=m.group(1);      heredocQueue.push(new PerlHeredocQueueElement(newState,heredocMarker));      preparsedTokensList.add(new CustomToken(currentPosition,currentPosition + heredocMarker.length(),STRING_IDENTIFIER));    }  } else {    throw new RuntimeException("Unable to parse HEREDOC opener " + openToken);  }  pushState();  yybegin(LEX_HEREDOC_WAITING);  return OPERATOR_HEREDOC;}  }
class C{  public long nrBits(){  return this.nrBits;}  }
class C{  public void removeServer(ServerInfo server){  if (server == null || mServerList == null || mServerList.size() <= 0)   return;  if (!server.getServerName().equals(Domoticz.DOMOTICZ_DEFAULT_SERVER)) {    boolean found=false;    int i=0;    for (    ServerInfo s : mServerList) {      if (s.getServerName().equals(server.getServerName())) {        found=true;        break;      }      i++;    }    if (found) {      mServerList.remove(i);    }  }  saveDomoticzServers(false);}  }
class C{  @Override public boolean isDefault(){  Component parentCmp=getParentComponent();  if (parentCmp == null)   return false;  return equals(parentCmp.getDefaultRemoteCandidate());}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  private void writeRootBlock(final boolean isRootBlock0,final IRootBlockView rootBlock) throws IOException {  if (rootBlock == null)   throw new IllegalArgumentException();  final long position=isRootBlock0 ? OFFSET_ROOT_BLOCK0 : OFFSET_ROOT_BLOCK1;  FileChannelUtility.writeAll(reopener,rootBlock.asReadOnlyBuffer(),position);  if (haLog.isDebugEnabled())   haLog.debug("wrote root block: " + rootBlock);}  }
class C{  static SVGGraphicContext processDeltaGC(SVGGraphicContext gc,SVGGraphicContext referenceGc){  Map groupDelta=processDeltaMap(gc.getGroupContext(),referenceGc.getGroupContext());  Map graphicElementDelta=gc.getGraphicElementContext();  TransformStackElement[] gcTransformStack=gc.getTransformStack();  TransformStackElement[] referenceStack=referenceGc.getTransformStack();  int deltaStackLength=gcTransformStack.length - referenceStack.length;  TransformStackElement[] deltaTransformStack=new TransformStackElement[deltaStackLength];  System.arraycopy(gcTransformStack,referenceStack.length,deltaTransformStack,0,deltaStackLength);  SVGGraphicContext deltaGC=new SVGGraphicContext(groupDelta,graphicElementDelta,deltaTransformStack);  return deltaGC;}  }
class C{  public SVGOMAnimatedLengthList(AbstractElement elt,String ns,String ln,String defaultValue,boolean emptyAllowed,short direction){  super(elt,ns,ln);  this.defaultValue=defaultValue;  this.emptyAllowed=emptyAllowed;  this.direction=direction;}  }
class C{  public boolean isCostAllowed(){  return mCostAllowed;}  }
class C{  public boolean equals(Object other){  if (this == other)   return (true);  if (other instanceof Oid)   return this.oid.equals((Object)((Oid)other).oid); else   if (other instanceof ObjectIdentifier)   return this.oid.equals(other); else   return false;}  }
class C{  public void putString(String key,String value){  sharedPreferences.edit().putString(key,value).commit();}  }
class C{  public BitmapCache(BitmapGlobalConfig globalConfig){  if (globalConfig == null)   throw new IllegalArgumentException("globalConfig may not be null");  this.globalConfig=globalConfig;}  }
class C{  public void layoutContainer(){}  }
class C{  public static void attachToActivity(Activity activity){  ViewGroup decorView=(ViewGroup)activity.getWindow().getDecorView();  for (int i=0; i < decorView.getChildCount(); i++) {    View view=decorView.getChildAt(i);    if (view instanceof DraggableLayout) {      return;    }  }  DraggableLayout draggableLayout=new DraggableLayout(activity);  FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  draggableLayout.setLayoutParams(params);  for (int i=0; i < decorView.getChildCount(); i++) {    View v=decorView.getChildAt(i);    decorView.removeView(v);    draggableLayout.addView(v);  }  decorView.addView(draggableLayout,0);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.859 -0500",hash_original_method="5C9219C47AC485F782454E337FD705F5",hash_generated_method="9EC41D60B9E82340DD96551BF7F48F3A") synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (buffer == null) {    buffer=new byte[PipedInputStream.PIPE_SIZE];  }  isConnected=true;}  }
class C{  static String attemptFQDN(InetAddress localAddr) throws java.net.UnknownHostException {  String hostName=localAddr.getHostName();  if (hostName.indexOf('.') < 0) {    String hostAddress=localAddr.getHostAddress();    FQDN f=new FQDN(hostAddress);    int nameServiceTimeOut=TCPEndpoint.getInt("sun.rmi.transport.tcp.localHostNameTimeOut",10000);    try {synchronized (f) {        f.getFQDN();        f.wait(nameServiceTimeOut);      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }    hostName=f.getHost();    if ((hostName == null) || (hostName.equals("")) || (hostName.indexOf('.') < 0)) {      hostName=hostAddress;    }  }  return hostName;}  }
class C{  private void onMoveFileOperationFinish(MoveFileOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    dismissLoadingDialog();    refreshListOfFilesFragment();  } else {    dismissLoadingDialog();    try {      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  public void actualizarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  NivelesArchivoForm nivelesArchivoForm=(NivelesArchivoForm)form;  NivelArchivoVO nivelArchivoVO=new NivelArchivoVO();  ActionErrors errors=validateForm(request,nivelesArchivoForm);  if (errors.size() > 0) {    ErrorsTag.saveErrors(request,errors);    goLastClientExecuteLogic(mappings,form,request,response);  } else {    nivelesArchivoForm.populate(nivelArchivoVO);    int orden=0;    if (nivelArchivoVO.getOrden() != null) {      orden=nivelArchivoVO.getOrden().intValue();    }    if (orden != 0) {      List listaNivelesArchivo=getListaNivelesArchivo(request,false);      boolean isNuevoElemento=((NivelArchivoVO)listaNivelesArchivo.get(orden - 1)).isNuevoElemento();      nivelArchivoVO.setNuevoElemento(isNuevoElemento);      listaNivelesArchivo.remove(orden - 1);      listaNivelesArchivo.add(orden - 1,nivelArchivoVO);      actualizarNiveles(listaNivelesArchivo);      setCambiosSinGuardar(request,new Boolean(true));    }    goReturnPointExecuteLogic(mappings,form,request,response);  }}  }
class C{  public void increment(final long time){  assert time >= 0;  if (mState == State.RUNNING) {    throw new IllegalStateException();  }  mTime+=time;  mStartCount++;  mState=State.STOPPED;}  }
class C{  boolean removeSubtree(BinarySearchTreeNode<E> node){  if (node == null)   return false;  if (this.root == null)   return false;  if (this.root == node) {    this.root=null;  } else {    if (this.contains(node)) {      if (node.isLeftChild()) {        node.parent.left=null;      } else {        node.parent.right=null;      }      this.size-=this.size(node);      if (this.selfBalancing)       this.balanceTree(node.parent);      return true;    }  }  return false;}  }
class C{  public JSONObject toJSON(Context context,int sharedFriends,int myFriends){  JSONObject result=new JSONObject();  try {    result.put(MESSAGE_ID_KEY,this.messageid);    result.put(TEXT_KEY,this.text);    result.put(PRIORITY_KEY,this.priority);    result.put(HOP_KEY,this.hop + 1);    result.put(MIN_USERS_P_HOP_KEY,this.contacts_hop);    if (parent != null)     result.put(PARENT_KEY,this.parent);    if (bigparent != null)     result.put(BIGPARENT_KEY,this.bigparent);    if (timebound > 0)     result.put(TIMEBOUND_KEY,this.timebound);    SecurityProfile profile=SecurityManager.getCurrentProfile(context);    if (profile.isUseTrust())     result.put(TRUST_KEY,(profile.isUseTrust() ? makeNoise(trust,sharedFriends,myFriends) : 0));    if (profile.isPseudonyms())     result.put(PSEUDONYM_KEY,this.pseudonym);    if (profile.isShareLocation())     result.put(LATLONG_KEY,this.latlong);  } catch (  JSONException e) {    e.printStackTrace();  }  return result;}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>GePredicate<T> ge(Property<T> property,Variable variable){  return new GePredicate(property(property),variable);}  }
class C{  public Vector3 subtract(Vector3 that){  return Vector3.subtract(this,that);}  }
class C{  public static void navigateToTrafficPurchasePage(Context context){  Intent intent=new Intent(NETWORKASSISTANT_PURCHASE_ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public static void replace(FileSystem fs,Path current,Path replacement,boolean removeOld) throws IOException {  Path old=new Path(current + ".old");  if (fs.exists(current)) {    fs.rename(current,old);  }  fs.rename(replacement,current);  if (fs.exists(old) && removeOld) {    fs.delete(old,true);  }}  }
class C{  public int size(){  return cardinality;}  }
class C{  public TagParams withRepository(@NotNull String repository){  requireNonNull(repository);  this.repository=repository;  return this;}  }
class C{  private String encodeProduct(){  StringBuffer tokens=new StringBuffer();  ListIterator it=productTokens.listIterator();  while (it.hasNext()) {    tokens.append((String)it.next());    if (it.hasNext())     tokens.append('/'); else     break;  }  return tokens.toString();}  }
class C{  public static String asBasicString(byte[] bytes){  return asBasicString(bytes,0,bytes.length);}  }
class C{  public label removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override public void sleep() throws RemoteException {  device.sleep();}  }
class C{  public static String urlNoFragString(URL url){  StringBuilder strForm=new StringBuilder();  String protocol=url.getProtocol();  if (protocol != null) {    protocol=protocol.toLowerCase();    strForm.append(protocol);    strForm.append("://");  }  String host=url.getHost();  if (host != null) {    host=host.toLowerCase();    strForm.append(host);    int port=url.getPort();    if (port == -1) {      port=url.getDefaultPort();    }    if (port != -1) {      strForm.append(":").append(port);    }  }  String file=url.getFile();  if (file != null) {    strForm.append(file);  }  return strForm.toString();}  }
class C{  protected int encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int result[]=new int[2];  int L0=BytesTo32bits(src,srcIndex);  int R0=BytesTo32bits(src,srcIndex + 4);  CAST_Encipher(L0,R0,result);  Bits32ToBytes(result[0],dst,dstIndex);  Bits32ToBytes(result[1],dst,dstIndex + 4);  return BLOCK_SIZE;}  }
class C{  public OverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  static final int interpolate(int x,int x1,int y1,int x2,int y2){  if (x > x2) {    return y2;  } else   if (x < x1) {    return y1;  } else {    return (x - x1) * (y2 - y1) / (x2 - x1) + y1;  }}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  JimpleBody(){}  }
class C{  protected void readHeap(ArrayDataInput input) throws FitsException {  FitsUtil.reposition(input,this.fileOffset + this.nRow * this.rowLen + this.heapOffset);  this.heap.read(input);  this.heapReadFromStream=true;}  }
class C{  public float norm(){  return w * w + x * x + y * y + z * z;}  }
class C{  private AllocatableValue evacuateRegisterAndSpill(Register reg){  AllocatableValue val=evacuateRegister(reg);  spillVariable(val,reg);  return val;}  }
class C{  public MutableDateTime toMutableDateTime(Chronology chronology){  return new MutableDateTime(getMillis(),chronology);}  }
class C{  private void removeNonVisibleViews(final int offset){  int childCount=getChildCount();  if (mLastItemPosition != mAdapter.getCount() - 1 && childCount > 1) {    View firstChild=getChildAt(0);    while (firstChild != null && getChildBottom(firstChild) + offset < 0) {      removeViewInLayout(firstChild);      childCount--;      mCachedItemViews.addLast(firstChild);      mFirstItemPosition++;      mListTopOffset+=getChildHeight(firstChild);      if (childCount > 1) {        firstChild=getChildAt(0);      } else {        firstChild=null;      }    }  }  if (mFirstItemPosition != 0 && childCount > 1) {    View lastChild=getChildAt(childCount - 1);    while (lastChild != null && getChildTop(lastChild) + offset > getHeight()) {      removeViewInLayout(lastChild);      childCount--;      mCachedItemViews.addLast(lastChild);      mLastItemPosition--;      if (childCount > 1) {        lastChild=getChildAt(childCount - 1);      } else {        lastChild=null;      }    }  }}  }
class C{  public void clearSearch(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().clearSearch();}  }
class C{  @Override public void meet(final And expr){  final ValueExpr left=expr.getLeftArg();  final ValueExpr right=expr.getRightArg();  left.visit(this);  right.visit(this);  final QueryModelNode parent=expr.getParentNode();  if (trivialCondition(left)) {    if (trivialCondition(right)) {      parent.replaceChildNode(expr,null);    } else {      parent.replaceChildNode(expr,right);    }  } else   if (trivialCondition(right)) {    parent.replaceChildNode(expr,left);  }}  }
class C{  public synchronized int joinedNodesCount(){  return joinedNodesCnt;}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  public PaymentResponse send(String toAddress,long amount,String fromAddress,Long fee,String note) throws APIException, IOException {  Map<String,Long> recipient=new HashMap<String,Long>();  recipient.put(toAddress,amount);  return sendMany(recipient,fromAddress,fee,note);}  }
class C{  public Boolean isVPMCEnabled(){  return vpmcEnabled;}  }
class C{  public void save(Writer out) throws IOException {  reset();  try {    if (doctype != null) {      out.write("<!DOCTYPE ");      out.write(doctype);      out.write(">\n");    }    Transformer t=TransformerFactory.newInstance().newTransformer();    t.transform(new DOMSource(document),new StreamResult(out));  } catch (  TransformerException e) {    IOException error=new IOException(e.getMessage());    error.initCause(e);    throw error;  }}  }
class C{  public static String decode(String str) throws RuntimeException {  byte[] bytes;  try {    bytes=str.getBytes("ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }  byte[] decoded=decode(bytes);  return new String(decoded);}  }
class C{  public Drawable colorDrawableWrap(Drawable drawable,int color){  if (drawable != null) {    Drawable wrapped=DrawableCompat.wrap(drawable);    DrawableCompat.setTint(wrapped,color);    DrawableCompat.setTintMode(wrapped,PorterDuff.Mode.SRC_ATOP);    return DrawableCompat.unwrap(wrapped);  }  return null;}  }
class C{  public AndroidLogHandler(){  setFormatter(THE_FORMATTER);}  }
class C{  private void initMail() throws Exception, IOException {  Properties mailProperties=getProperties(getProperiesForComputerName(testmailPropertiesFilePath));  InetAddress localMachine=InetAddress.getLocalHost();  String localHostName=localMachine.getHostName();  int i=localHostName.indexOf(".");  if (i > -1) {    localHostName=localHostName.substring(0,i);  }  Assert.assertNotNull(localHostName);  String username=mailProperties.getProperty("mail.username");  Assert.assertNotNull(username);  testMailAddress=username.replace("${env.HOSTNAME}",localHostName);  testMailServer=mailProperties.getProperty("mail.server");  testMailPasswd=mailProperties.getProperty("mail.password");  testMailDelay=Integer.parseInt(mailProperties.getProperty("mail.delay"));}  }
class C{  @SuppressWarnings("unchecked") public static <T>Sequence<T> emptySequence(){  return (Sequence<T>)EMPTY_SEQUENCE;}  }
