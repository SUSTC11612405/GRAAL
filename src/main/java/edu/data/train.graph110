class C{  public boolean addRoot(File dir){  boolean changed=deselected.remove(dir);  for (  File root : roots) {    if (FileUtils.isAncestor(root,dir)) {      if (root.equals(dir)) {        if (changed) {          directoryTreeModel.valueForPathChanged(getTreePath(dir),null);        }        return changed;      }      removeFromPath(dir);      TreePath path=getTreePath(dir);      directoryTree.scrollPathToVisible(path);      return changed;    } else     if (FileUtils.isAncestor(dir,root)) {      removeRoot(root);      addDirToTree(dir);      setExpanded(root);      setExpanded(root.getParentFile());      return true;    }  }  addDirToTree(dir);  setRootExpanded();  return true;}  }
class C{  private String computeScriptName(){  if (srcFile != null) {    return srcFile.getAbsolutePath();  } else {    String name=PREFIX;    if (getLocation().getFileName().length() > 0)     name+=getLocation().getFileName().replaceAll("[^\\w_\\.]","_").replaceAll("[\\.]","_dot_"); else     name+=SUFFIX;    return name;  }}  }
class C{  public int lengthOfLIS(int[] nums){  int[] tails=new int[nums.length];  int size=0;  for (  int x : nums) {    int l=0;    int r=size;    while (l < r) {      int m=l + (r - l) / 2;      if (tails[m] < x) {        l=m + 1;      } else {        r=m;      }    }    tails[l]=x;    if (l == size) {      size++;    }  }  return size;}  }
class C{  public void addListener(final IProjectListener listener){  m_listeners.addListener(listener);}  }
class C{  private static double incompleteGamma(double x,double alpha,double ln_gamma_alpha){  double accurate=1e-8, overflow=1e30;  double factor, gin, rn, a, b, an, dif, term;  double pn0, pn1, pn2, pn3, pn4, pn5;  if (x == 0.0) {    return 0.0;  }  if (x < 0.0 || alpha <= 0.0) {    throw new IllegalArgumentException("Arguments out of bounds");  }  factor=Math.exp(alpha * Math.log(x) - x - ln_gamma_alpha);  if (x > 1 && x >= alpha) {    a=1 - alpha;    b=a + x + 1;    term=0;    pn0=1;    pn1=x;    pn2=x + 1;    pn3=x * b;    gin=pn2 / pn3;    do {      a++;      b+=2;      term++;      an=a * term;      pn4=b * pn2 - an * pn0;      pn5=b * pn3 - an * pn1;      if (pn5 != 0) {        rn=pn4 / pn5;        dif=Math.abs(gin - rn);        if (dif <= accurate) {          if (dif <= accurate * rn) {            break;          }        }        gin=rn;      }      pn0=pn2;      pn1=pn3;      pn2=pn4;      pn3=pn5;      if (Math.abs(pn4) >= overflow) {        pn0/=overflow;        pn1/=overflow;        pn2/=overflow;        pn3/=overflow;      }    } while (true);    gin=1 - factor * gin;  } else {    gin=1;    term=1;    rn=alpha;    do {      rn++;      term*=x / rn;      gin+=term;    } while (term > accurate);    gin*=factor / alpha;  }  return gin;}  }
class C{  private static Properties configuration(final String mes,final File homePath){  ConcurrentLog.config(mes,"Application Root Path: " + homePath.toString());  final File dataFolder=new File(homePath,"DATA");  if (!(dataFolder.exists())) {    ConcurrentLog.severe(mes,"Application was never started or root path wrong.");    System.exit(-1);  }  final Properties config=new Properties();  FileInputStream fis=null;  try {    fis=new FileInputStream(new File(homePath,"DATA/SETTINGS/yacy.conf"));    config.load(fis);  } catch (  final FileNotFoundException e) {    ConcurrentLog.severe(mes,"could not find configuration file.");    System.exit(-1);  }catch (  final IOException e) {    ConcurrentLog.severe(mes,"could not read configuration file.");    System.exit(-1);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }    }  }  return config;}  }
class C{  public void deletePhotoByID(String photoID){  photoRepository.delete(photoID);}  }
class C{  static TextEditProcessor createSourceComputationProcessor(Document document,TextEdit root,int style){  return new TextEditProcessor(document,root,style,true);}  }
class C{  public SIPRequest createACKRequest(){  RequestLine requestLine=(RequestLine)this.requestLine.clone();  requestLine.setMethod(Request.ACK);  return this.createSIPRequest(requestLine,false);}  }
class C{  public static void heapDump(Env env){  Mutator.dumpHeap();}  }
class C{  public InstructionGraph(final List<InstructionGraphNode> nodes,final List<InstructionGraphEdge> edges){  super(nodes,edges);}  }
class C{  public DoubleMatrix1D like1D(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  private float computeOverscrollPercent(){  if (mOverScrollOffset >= 0) {    return mOverScrollOffset / mMaxOverScroll;  } else {    return mOverScrollOffset / mMaxUnderScroll;  }}  }
class C{  public static AppEventsLogger newLogger(Context context,String applicationId,AccessToken accessToken){  return new AppEventsLogger(context,applicationId,accessToken);}  }
class C{  @DSComment("ListView") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.194 -0500",hash_original_method="9CDB9BC1941825D09F579B09BA5203C8",hash_generated_method="4DF54523D3EC1F125E11DDC6B52B4BA2") public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  private void assertLayout(Integer... expectedLayout){  toggleMenu();}  }
class C{  public static void registerAuthenticationCallback(String authType,AuthenticationCallback callback){  getAuthenticationManager().register(authType,callback);}  }
class C{  protected AttributeEntry(int begin,int end,TextAttribute textAttribute,Object value){  this.begin=begin;  this.end=end;  this.textAttribute=textAttribute;  this.value=value;}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix3D other){  if (other instanceof SelectedSparseDoubleMatrix3D) {    SelectedSparseDoubleMatrix3D otherMatrix=(SelectedSparseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseDoubleMatrix3D) {    SparseDoubleMatrix3D otherMatrix=(SparseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.091 -0500",hash_original_method="28173EE669492C23D10F671D2D034693",hash_generated_method="67FB30F07373DAF067C9EA6C2F3D55DD") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) protected void onStop(){  if (mActionBar != null)   mActionBar.setShowHideAnimationEnabled(false);}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public TextFieldSmartTableCell(String text,int textPosition,FireAction fa){  textField=new JTextField(text);  textField.addFocusListener(fl);  textField.setScrollOffset(2);  this.fireAction=fa;  textJL=new JLabel(text);  panel=new JPanel(new FlowLayout(textPosition));  panel.add(textJL);}  }
class C{  public boolean canGetBoolean(){  return canGet(boolean.class);}  }
class C{  public static <E>List<E> asList(Iterable<E> iterable){  if (iterable instanceof List) {    return (List<E>)iterable;  }  List<E> result=new ArrayList<E>();  for (  E e : iterable) {    result.add(e);  }  return result;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("processtype") @Valid ProcessType processType,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.ProcessType jpaProcessType=new com.wipro.ats.bdre.md.dao.jpa.ProcessType();    jpaProcessType.setProcessTypeId(processType.getProcessTypeId());    jpaProcessType.setParentProcessTypeId(processType.getParentProcessTypeId());    jpaProcessType.setProcessTypeName(processType.getProcessTypeName());    processTypeDAO.update(jpaProcessType);    restWrapper=new RestWrapper(processType,RestWrapper.OK);    LOGGER.info("Record with ID: " + processType.getProcessTypeId() + " updated in ProcessType by User:"+ principal.getName()+ processType);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public ScannerVisitor(final Path base,final Path path){  this.base=base;  this.path=path;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void addTermsDict(FieldInfo field,final Iterable<BytesRef> values) throws IOException {  int minLength=Integer.MAX_VALUE;  int maxLength=Integer.MIN_VALUE;  long numValues=0;  BytesRefBuilder previousValue=new BytesRefBuilder();  long prefixSum=0;  for (  BytesRef v : values) {    minLength=Math.min(minLength,v.length);    maxLength=Math.max(maxLength,v.length);    if (minLength == maxLength) {      int termPosition=(int)(numValues & INTERVAL_MASK);      if (termPosition == 0) {        previousValue.copyBytes(v);      } else       if (termPosition == INTERVAL_COUNT - 1) {        prefixSum+=StringHelper.bytesDifference(previousValue.get(),v);      }    }    numValues++;  }  if (minLength == maxLength && prefixSum <= 3 * (numValues >> INTERVAL_SHIFT)) {    addBinaryField(field,values);  } else   if (numValues < REVERSE_INTERVAL_COUNT) {    addBinaryField(field,values);  } else {    assert numValues > 0;    meta.writeVInt(field.number);    meta.writeByte(Lucene54DocValuesFormat.BINARY);    meta.writeVInt(BINARY_PREFIX_COMPRESSED);    meta.writeLong(-1L);    final long startFP=data.getFilePointer();    RAMOutputStream addressBuffer=new RAMOutputStream();    MonotonicBlockPackedWriter termAddresses=new MonotonicBlockPackedWriter(addressBuffer,MONOTONIC_BLOCK_SIZE);    RAMOutputStream bytesBuffer=new RAMOutputStream();    RAMOutputStream headerBuffer=new RAMOutputStream();    BytesRefBuilder lastTerm=new BytesRefBuilder();    lastTerm.grow(maxLength);    long count=0;    int suffixDeltas[]=new int[INTERVAL_COUNT];    for (    BytesRef v : values) {      int termPosition=(int)(count & INTERVAL_MASK);      if (termPosition == 0) {        termAddresses.add(data.getFilePointer() - startFP);        headerBuffer.writeVInt(v.length);        headerBuffer.writeBytes(v.bytes,v.offset,v.length);        lastTerm.copyBytes(v);      } else {        int sharedPrefix=Math.min(255,StringHelper.bytesDifference(lastTerm.get(),v));        bytesBuffer.writeByte((byte)sharedPrefix);        bytesBuffer.writeBytes(v.bytes,v.offset + sharedPrefix,v.length - sharedPrefix);        suffixDeltas[termPosition]=v.length - sharedPrefix - 1;      }      count++;      if ((count & INTERVAL_MASK) == 0) {        flushTermsDictBlock(headerBuffer,bytesBuffer,suffixDeltas);      }    }    int leftover=(int)(count & INTERVAL_MASK);    if (leftover > 0) {      Arrays.fill(suffixDeltas,leftover,suffixDeltas.length,0);      flushTermsDictBlock(headerBuffer,bytesBuffer,suffixDeltas);    }    final long indexStartFP=data.getFilePointer();    termAddresses.finish();    addressBuffer.writeTo(data);    addressBuffer=null;    termAddresses=null;    meta.writeVInt(minLength);    meta.writeVInt(maxLength);    meta.writeVLong(count);    meta.writeLong(startFP);    meta.writeLong(indexStartFP);    meta.writeVInt(PackedInts.VERSION_CURRENT);    meta.writeVInt(MONOTONIC_BLOCK_SIZE);    addReverseTermIndex(field,values,maxLength);  }}  }
class C{  protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){  IDevice srcDevice=null;  IDevice dstDevice=null;  Collection<? extends IDevice> allDevices=deviceManagerService.getAllDevices();  for (  IDevice d : allDevices) {    for (int j=0; j < d.getIPv4Addresses().length; j++) {      if (srcDevice == null && client.ipAddress.equals(d.getIPv4Addresses()[j]))       srcDevice=d;      if (dstDevice == null && member.address == d.getIPv4Addresses()[j].getInt()) {        dstDevice=d;        member.macString=dstDevice.getMACAddressString();      }      if (srcDevice != null && dstDevice != null)       break;    }  }  if (srcDevice == null || dstDevice == null)   return;  DatapathId srcIsland=topologyService.getL2DomainId(sw.getId());  if (srcIsland == null) {    log.debug("No openflow island found for source {}/{}",sw.getId().toString(),pi.getInPort());    return;  }  boolean on_same_island=false;  boolean on_same_if=false;  for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) {    DatapathId dstSwDpid=dstDap.getSwitchDPID();    DatapathId dstIsland=topologyService.getL2DomainId(dstSwDpid);    if ((dstIsland != null) && dstIsland.equals(srcIsland)) {      on_same_island=true;      if ((sw.getId().equals(dstSwDpid)) && ((pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)).equals(dstDap.getPort()))) {        on_same_if=true;      }      break;    }  }  if (!on_same_island) {    if (log.isTraceEnabled()) {      log.trace("No first hop island found for destination " + "device {}, Action = flooding",dstDevice);    }    return;  }  if (on_same_if) {    if (log.isTraceEnabled()) {      log.trace("Both source and destination are on the same " + "switch/port {}/{}, Action = NOP",sw.toString(),pi.getInPort());    }    return;  }  SwitchPort[] srcDaps=srcDevice.getAttachmentPoints();  Arrays.sort(srcDaps,clusterIdComparator);  SwitchPort[] dstDaps=dstDevice.getAttachmentPoints();  Arrays.sort(dstDaps,clusterIdComparator);  int iSrcDaps=0, iDstDaps=0;  while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) {    SwitchPort srcDap=srcDaps[iSrcDaps];    SwitchPort dstDap=dstDaps[iDstDaps];    DatapathId srcCluster=topologyService.getL2DomainId(srcDap.getSwitchDPID());    DatapathId dstCluster=topologyService.getL2DomainId(dstDap.getSwitchDPID());    int srcVsDest=srcCluster.compareTo(dstCluster);    if (srcVsDest == 0) {      if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) {        Route routeIn=routingEngineService.getRoute(srcDap.getSwitchDPID(),srcDap.getPort(),dstDap.getSwitchDPID(),dstDap.getPort(),U64.of(0));        Route routeOut=routingEngineService.getRoute(dstDap.getSwitchDPID(),dstDap.getPort(),srcDap.getSwitchDPID(),srcDap.getPort(),U64.of(0));        if (routeIn != null) {          pushStaticVipRoute(true,routeIn,client,member,sw);        }        if (routeOut != null) {          pushStaticVipRoute(false,routeOut,client,member,sw);        }      }      iSrcDaps++;      iDstDaps++;    } else     if (srcVsDest < 0) {      iSrcDaps++;    } else {      iDstDaps++;    }  }  return;}  }
class C{  @Override public void parse(final Cookie cookie,final String path) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (path == null) {    throw new MalformedCookieException("Missing value for path attribute");  }  if (path.trim().equals("")) {    throw new MalformedCookieException("Blank value for path attribute");  }  cookie.setPath(path);  cookie.setPathAttributeSpecified(true);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#characters: " + start + ", "+ length);  if (m_contentHandler != null) {    m_contentHandler.characters(ch,start,length);  }}  }
class C{  private void socksSendRequest(int command,InetAddress address,int port) throws IOException {  Socks4Message request=new Socks4Message();  request.setCommandOrResult(command);  request.setPort(port);  request.setIP(address.getAddress());  request.setUserId("default");  getOutputStream().write(request.getBytes(),0,request.getLength());}  }
class C{  private List<NodePair> allNodePairs(List<Node> nodes){  List<NodePair> nodePairs=new ArrayList<>();  for (int j=0; j < nodes.size() - 1; j++) {    for (int k=j + 1; k < nodes.size(); k++) {      nodePairs.add(new NodePair(nodes.get(j),nodes.get(k)));    }  }  return nodePairs;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MoveEvaluation(IGameMove m,int score){  this.move=m;  this.score=score;}  }
class C{  public TargetActivity(Context context,ResolveInfo resolveInfo,long lastSelection){  this.lastSelection=lastSelection;  this.resolveInfo=resolveInfo;  int icon=resolveInfo.activityInfo.icon;  if (icon == 0) {    icon=resolveInfo.activityInfo.applicationInfo.icon;  }  this.iconUri=Uri.parse("android.resource://" + resolveInfo.activityInfo.applicationInfo.packageName + File.separator+ icon);  this.activityLabelResId=resolveInfo.labelRes;  this.isMail=resolveInfo.filter.hasDataType("message/rfc822");}  }
class C{  void signedAdd(MutableBigInteger addend){  if (sign == 1)   add(addend); else   sign=sign * subtract(addend);}  }
class C{  public boolean canHaveDuplicates(){  return canHaveDuplicates;}  }
class C{  private DownloadUtils(){  throw new AssertionError();}  }
class C{  public void parse(File schema) throws SAXException, IOException {  parse(schema.toURI().toURL());}  }
class C{  public TrackView(){  try {    car=ImageIO.read(TrackView.class.getResource("images/beetle_red.gif"));    track=ImageIO.read(TrackView.class.getResource("images/track.jpg"));  } catch (  Exception e) {    System.out.println("Problem loading track/car images: " + e);  }  carPosition=new Point(START_POS.x,START_POS.y);  carW=car.getWidth();  carH=car.getHeight();  carWHalf=carW / 2;  carHHalf=carH / 2;  trackW=track.getWidth();  trackH=track.getHeight();}  }
class C{  public MyStringBuilder2 insert(int offset,MyStringBuilder2 s){  String newStr="";  int i;  for (i=0; i < offset; i++) {    if (i < offset)     newStr+=this.s.charAt(i) + "";  }  newStr+=s;  return new MyStringBuilder2(newStr + substring(offset));}  }
class C{  public void attributeRemoved(HttpSessionBindingEvent event){  handleAttributeEvent(event.getName(),event.getValue(),ELUtils.Scope.SESSION);}  }
class C{  public TransformerFactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public static void main(String[] args) throws Throwable {  if (args.length < 1) {    System.err.println(LocalizedStrings.LogFileParser_MISSING_LOG_FILE_NAME.toLocalizedString());    System.exit(1);  }  String logFileName=args[0];  BufferedReader br=new BufferedReader(new FileReader(logFileName));  LogFileParser parser=new LogFileParser(logFileName,br,false,false);  PrintWriter pw=new PrintWriter(System.out);  while (parser.hasMoreEntries()) {    LogEntry entry=parser.getNextEntry();    entry.writeTo(pw);  }}  }
class C{  public CMWC4096(){  super();}  }
class C{  public String toString(){  if (root == null) {    return "";  }  StringBuilder sb=new StringBuilder();  buildString(sb,root);  return sb.toString();}  }
class C{  boolean badModeOk(String currentMode,String resetModes,String availableModes){  String resetWarning=ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetModeWarn1") + "\n\n" + java.text.MessageFormat.format(ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetModeWarn2"),resetModes)+ "\n"+ java.text.MessageFormat.format(ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetModeWarn3"),availableModes)+ "\n"+ ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetModeWarn4")+ "\n\n"+ java.text.MessageFormat.format(ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetModeWarn5"),currentMode);  return (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,resetWarning,ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE));}  }
class C{  public DD(String str) throws NumberFormatException {  this(parse(str));}  }
class C{  private static CView createView(final AbstractSQLProvider provider,final int containerId,final INaviView view,final String name,final String description,final String containerTable,final String viewContainerTable,final ViewGenerator generator) throws CouldntSaveDataException {  final CConnection connection=provider.getConnection();  try {    PostgreSQLHelpers.beginTransaction(connection);    final int viewId=insertView(connection,name,description);    connection.executeUpdate("INSERT INTO " + viewContainerTable + " VALUES("+ containerId+ ", "+ viewId+ ")",true);    final List<INaviViewNode> nodes=view.getGraph().getNodes();    final List<INaviEdge> edges=view.getGraph().getEdges();    PostgreSQLNodeSaver.writeNodes(provider,viewId,nodes);    PostgreSQLEdgeSaver.writeEdges(provider,edges);    PostgreSQLHelpers.endTransaction(connection);    final String query="SELECT creation_date, modification_date FROM " + CTableNames.VIEWS_TABLE + " WHERE id = "+ viewId;    final ResultSet resultSet=connection.executeQuery(query,true);    try {      while (resultSet.next()) {        final Timestamp creationDate=resultSet.getTimestamp("creation_date");        final Timestamp modificationDate=resultSet.getTimestamp("modification_date");        PostgreSQLHelpers.updateModificationDate(connection,containerTable,containerId);        return generator.generate(viewId,name,description,ViewType.NonNative,view.getGraphType(),creationDate,modificationDate,view.getNodeCount(),view.getEdgeCount(),new HashSet<CTag>(),new HashSet<CTag>(),false);      }      throw new CouldntSaveDataException("Error: Couldnt't load the created view");    }  finally {      resultSet.close();    }  } catch (  final SQLException exception) {    CUtilityFunctions.logException(exception);    try {      PostgreSQLHelpers.rollback(connection);    } catch (    final SQLException e) {      CUtilityFunctions.logException(e);    }    throw new CouldntSaveDataException(exception);  }}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType,Interface instance){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType,instance);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  public void removeBuilder(final INaviView view){  final ZyGraphBuilder builder=m_builders.get(view);  Preconditions.checkNotNull(builder,"IE00704: View was not managed");  m_builders.remove(view);  for (  final IGraphBuilderManagerListener listener : m_listeners) {    try {      listener.removedBuilder(view,builder);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public TimeSeries(Comparable name,String domain,String range,Class timePeriodClass){  super(name);  this.domain=domain;  this.range=range;  this.timePeriodClass=timePeriodClass;  this.data=new java.util.ArrayList();  this.maximumItemCount=Integer.MAX_VALUE;  this.maximumItemAge=Long.MAX_VALUE;  this.minY=Double.NaN;  this.maxY=Double.NaN;}  }
class C{  public static void n2sort(String[] index,boolean asc){  for (int i=0; i < index.length; i++) {    for (int j=i + 1; j < index.length; j++) {      if (compare(index[i],index[j],asc) == -1) {        swap(i,j,index);      }    }  }}  }
class C{  public static boolean isWritable(int octalMode){  return hasPermission(ROLE_OWNER,PERM_WRITE,octalMode);}  }
class C{  public static String serializeStrings(List<String> strings){  return join(strings,"|");}  }
class C{  public static boolean validSkinSpecFile(String fileName){  File file=new File(Configuration.skinsDir(),fileName);  if (!file.exists() || !file.isFile()) {    return false;  }  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  try {    DocumentBuilder builder=dbf.newDocumentBuilder();    Document doc=builder.parse(file);    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);    if (listOfComponents.getLength() > 0) {      return true;    } else {      return false;    }  } catch (  Exception e) {    return false;  }}  }
class C{  public Matrix4 invertOrthonormal(){  double[] m=this.m;  double tmp=m[1];  m[1]=m[4];  m[4]=tmp;  tmp=m[2];  m[2]=m[8];  m[8]=tmp;  tmp=m[6];  m[6]=m[9];  m[9]=tmp;  double x=m[3];  double y=m[7];  double z=m[11];  m[3]=-(m[0] * x) - (m[1] * y) - (m[2] * z);  m[7]=-(m[4] * x) - (m[5] * y) - (m[6] * z);  m[11]=-(m[8] * x) - (m[9] * y) - (m[10] * z);  m[12]=0;  m[13]=0;  m[14]=0;  m[15]=1;  return this;}  }
class C{  @SideEffectFree @Override public ImmutableCollection<V> values(){  ImmutableCollection<V> v=values;  return (v == null) ? (values=new Values<V>(this)) : v;}  }
class C{  private InterpreterResult processGet(String[] urlItems){  if (urlItems.length != 3 || StringUtils.isEmpty(urlItems[0]) || StringUtils.isEmpty(urlItems[1]) || StringUtils.isEmpty(urlItems[2])) {    return new InterpreterResult(InterpreterResult.Code.ERROR,"Bad URL (it should be /index/type/id)");  }  final GetResponse response=client.prepareGet(urlItems[0],urlItems[1],urlItems[2]).get();  if (response.isExists()) {    final String json=gson.toJson(response.getSource());    return new InterpreterResult(InterpreterResult.Code.SUCCESS,InterpreterResult.Type.TEXT,json);  }  return new InterpreterResult(InterpreterResult.Code.ERROR,"Document not found");}  }
class C{  public void notifyValue(XScrollbar obj,int type,int v,boolean isAdjusting){  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine("Notify value changed on " + obj + " to "+ v);  }  int value=obj.getValue();  if (obj == vsb) {    scrollVertical(v - value);    int oldSel=eventIndex;    int newSel=eventIndex + v - value;    if (mouseDraggedOutVertically && !isSelected(newSel)) {      selectItem(newSel);      eventIndex=newSel;      repaint(oldSel,eventIndex,PAINT_ITEMS);      setFocusIndex(newSel);      repaint(PAINT_FOCUS);    }  } else   if ((XHorizontalScrollbar)obj == hsb) {    scrollHorizontal(v - value);  }}  }
class C{  public void waitForMessageToArrive(){  LOG.info("Waiting for message to arrive");  long start=System.currentTimeMillis();synchronized (messages) {    try {      while (hasReceivedMessage()) {        messages.wait(4000);      }    } catch (    InterruptedException e) {      LOG.info("Caught: " + e);    }  }  long end=System.currentTimeMillis() - start;  LOG.info("End of wait for " + end + " millis");}  }
class C{  private static void decimate(double tolerance,ArrayList<Location> locations,ArrayList<Location> decimated){  final int n=locations.size();  if (n < 1) {    return;  }  int idx;  int maxIdx=0;  Stack<int[]> stack=new Stack<int[]>();  double[] dists=new double[n];  dists[0]=1;  dists[n - 1]=1;  double maxDist;  double dist=0.0;  int[] current;  if (n > 2) {    int[] stackVal=new int[]{0,(n - 1)};    stack.push(stackVal);    while (stack.size() > 0) {      current=stack.pop();      maxDist=0;      for (idx=current[0] + 1; idx < current[1]; ++idx) {        dist=LocationUtils.distance(locations.get(idx),locations.get(current[0]),locations.get(current[1]));        if (dist > maxDist) {          maxDist=dist;          maxIdx=idx;        }      }      if (maxDist > tolerance) {        dists[maxIdx]=maxDist;        int[] stackValCurMax={current[0],maxIdx};        stack.push(stackValCurMax);        int[] stackValMaxCur={maxIdx,current[1]};        stack.push(stackValMaxCur);      }    }  }  int i=0;  idx=0;  decimated.clear();  for (  Location l : locations) {    if (dists[idx] != 0) {      decimated.add(l);      i++;    }    idx++;  }  Log.d(TAG,"Decimating " + n + " points to "+ i+ " w/ tolerance = "+ tolerance);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.resourcesTV=(TextView)this.findViewById(R.id.resources_tv);  this.resourcesIV=(ImageView)this.findViewById(R.id.resources_iv);}  }
class C{  private SpeechletResponse handleSetupNameWhoIntent(final Session session){  String speechOutput="", repromptText="";  SimpleCard card=new SimpleCard();  card.setTitle("Wise Guy");  if (session.getAttributes().containsKey(SESSION_STAGE)) {    if ((Integer)session.getAttribute(SESSION_STAGE) == SETUP_STAGE) {      int jokeID=(Integer)session.getAttribute(SESSION_JOKE_ID);      speechOutput=JOKE_LIST.get(jokeID).speechPunchline;      card.setContent(JOKE_LIST.get(jokeID).cardPunchline);      SsmlOutputSpeech outputSpeech=new SsmlOutputSpeech();      outputSpeech.setSsml("<speak>" + speechOutput + "</speak>");      return SpeechletResponse.newTellResponse(outputSpeech,card);    } else {      session.setAttribute(SESSION_STAGE,KNOCK_KNOCK_STAGE);      speechOutput="That's not how knock knock jokes work! <break time=\"0.3s\" /> Knock knock";      repromptText="You can ask who's there.";      card.setContent("That's not how knock knock jokes work! Knock knock");      SsmlOutputSpeech outputSpeech=new SsmlOutputSpeech();      outputSpeech.setSsml("<speak>" + speechOutput + "</speak>");      PlainTextOutputSpeech repromptOutputSpeech=new PlainTextOutputSpeech();      repromptOutputSpeech.setText(repromptText);      Reprompt repromptSpeech=new Reprompt();      repromptSpeech.setOutputSpeech(repromptOutputSpeech);      return SpeechletResponse.newAskResponse(outputSpeech,repromptSpeech,card);    }  } else {    speechOutput="Sorry, I couldn't correctly retrieve the joke. You can say, tell me a joke";    repromptText="You can say, tell me a joke";    card.setContent(speechOutput);    SpeechletResponse response=newAskResponse(speechOutput,false,repromptText,false);    response.setCard(card);    return response;  }}  }
class C{  public boolean equals(ExtendedType other){  try {    return other.nodetype == this.nodetype && other.localName.equals(this.localName) && other.namespace.equals(this.namespace);  } catch (  NullPointerException e) {    return false;  }}  }
class C{  public boolean isClientAccess(int AD_Client_ID,boolean rw){  if (AD_Client_ID == 0 && !rw)   return true;  if (isAccessAllOrgs()) {    return getAD_Client_ID() == AD_Client_ID;  }  loadOrgAccess(false);  for (int i=0; i < m_orgAccess.length; i++) {    if (m_orgAccess[i].AD_Client_ID == AD_Client_ID) {      if (!rw)       return true;      if (!m_orgAccess[i].readOnly)       return true;    }  }  return false;}  }
class C{  public Bindings add(String property,JRadioButton[] cs){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,0));}  }
class C{  public boolean isLegalEndPos(){  boolean legal=true;  if (isStackingViolation) {    legal=false;  } else   if (terrainInvalid) {    legal=false;  } else   if (isJumping() && (distance == 0)) {    legal=false;  } else   if (hasEverUnloaded && (type != MoveStepType.UNLOAD) && (type != MoveStepType.LAUNCH)&& (type != MoveStepType.DROP)&& (type != MoveStepType.UNDOCK)) {    legal=false;  }  return legal;}  }
class C{  public TOMMessage(int sender,int session,int sequence,byte[] content,int view){  this(sender,session,sequence,content,view,TOMMessageType.ORDERED_REQUEST);}  }
class C{  public static Exception retrieveException(){  Exception ex=(Exception)Env.getCtx().remove(LAST_EXCEPTION);  return ex;}  }
class C{  public PageProperty(PageProperty other){  if (other.is_set_id()) {    this.id=new PageID(other.id);  }  if (other.is_set_property()) {    this.property=new PagePropertyValue(other.property);  }}  }
class C{  public T addSort(String field,SortOrder order){  sourceBuilder().sort(field,order);  return (T)this;}  }
class C{  public int indexOf(int value){  return indexOf(0,value);}  }
class C{  public PowerShellResponse executeScript(String scriptPath){  return executeScript(scriptPath,"");}  }
class C{  public void writeStream(InputStream source,int totalLength) throws IOException {  if (source == null)   return;  int length=_writeBuffer.length;  if (length <= _writeLength) {    int tmplen=_writeLength;    _writeLength=0;    _source.write(_writeBuffer,0,tmplen,false);    _position+=tmplen;    _isFlushRequired=true;  }  while (totalLength > 0) {    int sublen=Math.min(totalLength,length - _writeLength);    sublen=source.read(_writeBuffer,_writeLength,sublen);    if (sublen < 0)     break;    _writeLength+=sublen;    totalLength-=sublen;    if (length <= _writeLength) {      int tmplen=_writeLength;      _writeLength=0;      _source.write(_writeBuffer,0,tmplen,false);      _position+=tmplen;      _isFlushRequired=true;    }  }  if (_isFlushOnNewline || _implicitFlush) {    flush();  }}  }
class C{  public static boolean visitHierarchy(ITypeBinding type,TypeBindingVisitor visitor){  boolean result=visitSuperclasses(type,visitor);  if (result) {    result=visitInterfaces(type,visitor);  }  return result;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  double[] oldKeys=_set;  float[] oldVals=_values;  byte[] oldStates=_states;  _set=new double[newCapacity];  _values=new float[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      double o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("IsSendRfQ"))     p_IsSendRfQ="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_RfQ_ID=getRecord_ID();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public FanPane(){  setPadding(new Insets(10,10,10,10));  circle.setStroke(Color.BLACK);  circle.setFill(Color.WHITE);  circle.centerXProperty().bind(widthProperty().divide(2));  circle.centerYProperty().bind(heightProperty().divide(2));  circle.radiusProperty().bind((heightProperty().divide(2)).multiply(.90));  getBlades();  getChildren().addAll(circle,paneForBlades);  fan=new Timeline(new KeyFrame(Duration.millis(50),null));  fan.setCycleCount(Timeline.INDEFINITE);  fan.play();}  }
class C{  public static int readOrientationFromTIFF(InputStream is,int length) throws IOException {  TiffHeader tiffHeader=new TiffHeader();  length=readTiffHeader(is,length,tiffHeader);  int toSkip=tiffHeader.firstIfdOffset - 8;  if (length == 0 || toSkip > length) {    return 0;  }  is.skip(toSkip);  length-=toSkip;  length=moveToTiffEntryWithTag(is,length,tiffHeader.isLittleEndian,TIFF_TAG_ORIENTATION);  return getOrientationFromTiffEntry(is,length,tiffHeader.isLittleEndian);}  }
class C{  public T peek(){  throw new UnsupportedOperationException();}  }
class C{  @Override public String[] list(String path) throws IOException {  if (path.startsWith("/")) {    path=path.substring(1);  }  if (!path.endsWith("/")) {    path=path + "/";  }  ArrayList<String> names=new ArrayList<>();  try (ZipInputStream zIn=new ZipInputStream(getBacking().openRead())){    ZipEntry entry;    while ((entry=zIn.getNextEntry()) != null) {      String name=entry.getName();      if (name.startsWith(path)) {        String tail=name.substring(path.length());        int p=tail.indexOf('/');        if (p >= 0) {          tail=tail.substring(0,p);        }        if (!tail.equals("") && !names.contains(tail)) {          names.add(tail);        }      }    }  }   String[] list=new String[names.size()];  names.toArray(list);  return list;}  }
class C{  private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){  QuadEdge curr=edge;  int edgeCount=0;  boolean isFrame=false;  do {    triEdges[edgeCount]=curr;    if (isFrameEdge(curr))     isFrame=true;    QuadEdge sym=curr.sym();    if (!visitedEdges.contains(sym))     edgeStack.push(sym);    visitedEdges.add(curr);    edgeCount++;    curr=curr.lNext();  } while (curr != edge);  if (isFrame && !includeFrame)   return null;  return triEdges;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void calculateLogAxis(){  int mLogMax=getMaxValue(values);  int mLogMin=getMinValue(values);  int size=mLogMax - mLogMin + 1;  for (int index=0; index < size; index++) {    int num=(int)Math.pow(10,mLogMax);    paint.setTextSize(18);    create_y_axis(index,formatNum((double)num,0),size - 1);    mLogMax--;  }}  }
class C{  public boolean isInfinite(){  return false;}  }
class C{  public boolean sendKeyEvent(KeyEvent event){synchronized (mIMM.mH) {    ViewRootImpl viewRootImpl=mTargetView != null ? mTargetView.getViewRootImpl() : null;    if (viewRootImpl == null) {      if (mIMM.mServedView != null) {        viewRootImpl=mIMM.mServedView.getViewRootImpl();      }    }    if (viewRootImpl != null) {      viewRootImpl.dispatchKeyFromIme(event);    }  }  return false;}  }
class C{  public boolean isSpatial(){  return spatial;}  }
class C{  public void parent(BalancedBinaryNode<K,V> newParent){  parent=newParent;}  }
class C{  protected boolean makeClassForNameCall(Expression origin,Expression receiver,Expression message,Expression arguments){  if (!(receiver instanceof ClassExpression))   return false;  ClassExpression ce=(ClassExpression)receiver;  if (!ClassHelper.CLASS_Type.equals(ce.getType()))   return false;  String msg=getMethodName(message);  if (!"forName".equals(msg))   return false;  ArgumentListExpression ae=makeArgumentList(arguments);  if (ae.getExpressions().size() != 1)   return false;  return writeDirectMethodCall(CLASS_FOR_NAME_STRING,false,receiver,ae);}  }
class C{  public TreeEvaluationException(){}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public CRLDistributionPoints(List<DistributionPoint> distributionPointList){  this.distributionPointList=distributionPointList;}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  operator=createLiveAnimatedEnumeration(null,SVG_OPERATOR_ATTRIBUTE,OPERATOR_VALUES,(short)1);}  }
class C{  private void refreshLegacyClusterState(Watcher watcher) throws KeeperException, InterruptedException {  try {    final Stat stat=new Stat();    final byte[] data=zkClient.getData(CLUSTER_STATE,watcher,stat,true);    final ClusterState loadedData=ClusterState.load(stat.getVersion(),data,emptySet(),CLUSTER_STATE);synchronized (getUpdateLock()) {      if (this.legacyClusterStateVersion >= stat.getVersion()) {        return;      }      Set<String> updatedCollections=new HashSet<>();      for (      String coll : this.collectionWatches.keySet()) {        ClusterState.CollectionRef ref=this.legacyCollectionStates.get(coll);        DocCollection oldState=ref == null ? null : ref.get();        ClusterState.CollectionRef newRef=loadedData.getCollectionStates().get(coll);        DocCollection newState=newRef == null ? null : newRef.get();        if (newState == null) {          newState=watchedCollectionStates.get(coll);        }        if (!Objects.equals(oldState,newState)) {          updatedCollections.add(coll);        }      }      this.legacyCollectionStates=loadedData.getCollectionStates();      this.legacyClusterStateVersion=stat.getVersion();      constructState(updatedCollections);    }  } catch (  KeeperException.NoNodeException e) {synchronized (getUpdateLock()) {      this.legacyCollectionStates=emptyMap();      this.legacyClusterStateVersion=0;      constructState(Collections.emptySet());    }  }}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  private synchronized boolean cancel(final int id,final boolean mayInterrupt,final boolean removeOperation){  final RunningOperation runningOperation=mRunningOperations.get(id);  if (runningOperation != null) {    if (removeOperation) {      mRunningOperations.remove(id);    }    mCancelledOperations.add(id);    return runningOperation.cancel(mayInterrupt);  } else {    return false;  }}  }
class C{  @RequestMapping(value="/businessObjectData/search",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_SEARCH_POST) public BusinessObjectDataSearchResult searchBusinessObjectData(@RequestBody BusinessObjectDataSearchRequest businessObjectDataSearchRequest){  return businessObjectDataService.searchBusinessObjectData(businessObjectDataSearchRequest);}  }
class C{  private void sendCallOrTransactionDoesNotExistResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    if (sipRequest.getMethod().equals(Request.INVITE)) {      sipStack.addTransactionPendingAck(transaction);    }    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public static ExceptionlessOutputStream openCompressedStream(String filename){  ExceptionlessOutputStream eos=null;  try {    ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(filename));    zip.putNextEntry(new ZipEntry(ExceptionlessInputStream.zipEntryName));    eos=new ExceptionlessOutputStream(new BufferedOutputStream(zip));  } catch (  Exception e) {    System.err.println("Can't open '" + filename + "' for output:");    e.printStackTrace();    System.exit(1);  }  return eos;}  }
class C{  public static void sort(char[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public String toString(){  if (size() == 0) {    return "{}";  }  StringBuffer buf=new StringBuffer(32 * size());  buf.append('{');  MapIterator it=mapIterator();  boolean hasNext=it.hasNext();  while (hasNext) {    Object key=it.next();    Object value=it.getValue();    buf.append(key == this ? "(this Map)" : key).append('=').append(value == this ? "(this Map)" : value);    hasNext=it.hasNext();    if (hasNext) {      buf.append(',').append(' ');    }  }  buf.append('}');  return buf.toString();}  }
class C{  private static String resampleLocalHost(){  String hostnameProperty=getHostnameProperty();synchronized (localEndpoints) {    if (hostnameProperty != null) {      if (!localHostKnown) {        setLocalHost(hostnameProperty);      } else       if (!hostnameProperty.equals(localHost)) {        localHost=hostnameProperty;        if (TCPTransport.tcpLog.isLoggable(Log.BRIEF)) {          TCPTransport.tcpLog.log(Log.BRIEF,"updated local hostname to: " + localHost);        }      }    }    return localHost;  }}  }
class C{  private static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope,MethodBinding originalMethod,TypeBinding[] arguments,TypeBinding[] parameters,InferenceContext inferenceContext){  if (originalMethod.isVarargs()) {    int paramLength=parameters.length;    int minArgLength=paramLength - 1;    int argLength=arguments.length;    for (int i=0; i < minArgLength; i++) {      parameters[i].collectSubstitutes(scope,arguments[i],inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);      if (inferenceContext.status == InferenceContext.FAILED)       return null;    }    if (minArgLength < argLength) {      TypeBinding varargType=parameters[minArgLength];      TypeBinding lastArgument=arguments[minArgLength];      checkVarargDimension: {        if (paramLength == argLength) {          if (lastArgument == TypeBinding.NULL)           break checkVarargDimension;switch (lastArgument.dimensions()) {case 0:            break;case 1:          if (!lastArgument.leafComponentType().isBaseType())           break checkVarargDimension;        break;default :      break checkVarargDimension;  }}varargType=((ArrayBinding)varargType).elementsType();}for (int i=minArgLength; i < argLength; i++) {varargType.collectSubstitutes(scope,arguments[i],inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);if (inferenceContext.status == InferenceContext.FAILED) return null;}}} else {int paramLength=parameters.length;for (int i=0; i < paramLength; i++) {parameters[i].collectSubstitutes(scope,arguments[i],inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);if (inferenceContext.status == InferenceContext.FAILED) return null;}}TypeVariableBinding[] originalVariables=originalMethod.typeVariables;if (!resolveSubstituteConstraints(scope,originalVariables,inferenceContext,false)) return null;TypeBinding[] inferredSustitutes=inferenceContext.substitutes;TypeBinding[] actualSubstitutes=inferredSustitutes;for (int i=0, varLength=originalVariables.length; i < varLength; i++) {if (inferredSustitutes[i] == null) {if (actualSubstitutes == inferredSustitutes) {System.arraycopy(inferredSustitutes,0,actualSubstitutes=new TypeBinding[varLength],0,i);}actualSubstitutes[i]=originalVariables[i];} else if (actualSubstitutes != inferredSustitutes) {actualSubstitutes[i]=inferredSustitutes[i];}}ParameterizedGenericMethodBinding paramMethod=scope.environment().createParameterizedGenericMethod(originalMethod,actualSubstitutes);return paramMethod;}  }
class C{  public TwitterMoPubAdAdapter(Activity activity,Adapter originalAdapter,MoPubNativeAdPositioning.MoPubServerPositioning adPositioning){  super(activity,originalAdapter,adPositioning);}  }
class C{  @Override boolean shouldExceptionTriggerConnectionSwitch(Throwable t){  return false;}  }
class C{  public ToStringBuilder append(String fieldName,int value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public int startCharInLine(){  return breaks.charInLineAt(startCharInFile);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private ModelScene createSceneFrom(final ModelScene existing){  ModelScene newScene;  if (existing == null) {    newScene=new ModelScene(renderer,true);  } else {    newScene=existing.copyStatic();  }  return newScene;}  }
class C{  public void register(ICalComponentScribe<? extends ICalComponent> scribe){  experimentalCompByName.put(scribe.getComponentName().toUpperCase(),scribe);  experimentalCompByClass.put(scribe.getComponentClass(),scribe);}  }
class C{  public ChunkedOutputStream(final OutputStream stream,final int bufferSize) throws IOException {  cache=new byte[bufferSize];  this.stream=stream;}  }
class C{  public byte nextByte(){  return (byte)nextInt();}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException("Null buffer for read");  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int cnt=0;  while (len > 0 && !def.finished()) {    int n;    if (def.needsInput()) {      n=in.read(buf,0,buf.length);      if (n < 0) {        def.finish();      } else       if (n > 0) {        def.setInput(buf,0,n);      }    }    n=def.deflate(b,off,len);    cnt+=n;    off+=n;    len-=n;  }  if (cnt == 0 && def.finished()) {    reachEOF=true;    cnt=-1;  }  return cnt;}  }
class C{  public static String tokenLiteral(Token t){  return specialText(t) + t.image;}  }
class C{  public boolean shouldStartDownload(){  return startDownload;}  }
class C{  private static boolean isTextObscured(JComponent c,String s){  Graphics g=c.getGraphics();  FontMetrics fm=g.getFontMetrics(c.getFont());  int sw=fm.stringWidth(s);  return (sw > c.getWidth());}  }
class C{  public void resetTask(){  this.attackTarget=null;  this.pathRetryTimer=0;  this.rangedAttackDelayTime=-1;  this.shootPatienceTime=0;}  }
class C{  void clearParserHighlights(){  for (int i=0; i < parserHighlights.size(); i++) {    Object tag=parserHighlights.get(i);    if (tag instanceof LayeredHighlightInfo) {      LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;      if (lhi.width > 0 && lhi.height > 0) {        textArea.repaint(lhi.x,lhi.y,lhi.width,lhi.height);      }    } else {      HighlightInfo info=(HighlightInfo)tag;      TextUI ui=textArea.getUI();      ui.damageRange(textArea,info.getStartOffset(),info.getEndOffset());    }  }  parserHighlights.clear();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @Override public Object deepCopy(Object value) throws HibernateException {  return value;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public PivotalTrackerRepository(){  myCommitMessageFormat="[fixes #{number}] {summary}";}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  DoStatement s=(DoStatement)clone();  s.cond=cond.copyInline(ctx);  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  return s;}  }
class C{  protected void installSheet(){  if (!isNativeSheetSupported() && !isInstalled) {    Window owner=getOwner();    if (owner != null) {      Point ownerLoc=owner.getLocation();      Point sheetLoc;      if (isShowAsSheet()) {        if (owner instanceof JFrame) {          sheetLoc=new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + owner.getInsets().top + ((JFrame)owner).getRootPane().getContentPane().getY());        } else         if (owner instanceof JDialog) {          sheetLoc=new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + owner.getInsets().top + ((JDialog)owner).getRootPane().getContentPane().getY());        } else {          sheetLoc=new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + owner.getInsets().top);        }        if (sheetLoc.x < 0) {          owner.setLocation(ownerLoc.x - sheetLoc.x,ownerLoc.y);          sheetLoc.x=0;          shiftBackLocation=ownerLoc;          oldLocation=owner.getLocation();        } else {          shiftBackLocation=null;          oldLocation=ownerLoc;        }      } else {        sheetLoc=new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + (owner.getHeight() - getHeight()) / 3);      }      setLocation(sheetLoc);      oldFocusOwner=owner.getFocusOwner();      owner.setEnabled(false);      if (isShowAsSheet()) {        owner.addComponentListener(ownerMovementHandler);      } else {        if (owner instanceof Frame) {          setTitle(((Frame)owner).getTitle());        }      }    }    isInstalled=true;  } else {    Window owner=getOwner();    Point ownerLoc=owner.getLocation();    Point sheetLoc=new Point(ownerLoc.x + (owner.getWidth() - getWidth()) / 2,ownerLoc.y + (owner.getHeight() - getHeight()) / 3);    setLocation(sheetLoc);  }}  }
class C{  @Override protected void beginRender(GL10 gl,PLIRenderer renderer){  super.beginRender(gl,renderer);  mCamera.render(gl,renderer);}  }
class C{  public boolean isInstantiation(){  return getPrimary() instanceof Class;}  }
class C{  public static List<CompositeMethodDetailDescriptor> findMethod(CompositeDetailDescriptor descriptor){  return new MethodFinder().findMethod(descriptor);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void print(PrintWriter out){  XMLWriter writer=new XMLWriter(out);  try {    writer.write((XMLElement)document.getChildren().get(0),true);  } catch (  IOException e) {    InternalError error=new InternalError();    error.initCause(e);    throw error;  }}  }
class C{  public JsonObject remove(String name){  if (name == null) {    throw new NullPointerException("name is null");  }  int index=indexOf(name);  if (index != -1) {    table.remove(index);    names.remove(index);    values.remove(index);  }  return this;}  }
class C{  public Vec3D(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public LabeledPath(){}  }
class C{  private TestSolution computeResultAndCreateRemarks(List<ProcessResult> processResultList,List<DefiniteResult> netResultList,String elementValue,int elementCounter){  Collection<WebResource> wrsOnError=createUrlListFromProcessResultList(processResultList,netResultList);  TestSolution testSolution=TestSolution.PASSED;  if (CollectionUtils.isNotEmpty(wrsOnError)) {    for (    WebResource wr : wrsOnError) {      testSolution=TestSolution.FAILED;      prs.addConsolidationRemark(TestSolution.FAILED,siteLevelMessageCode,elementValue,wr.getURL());      Collection<ProcessRemark> processRemarkList=createProcessRemarkListForPageOnError(elementValue,wrsOnError);      netResultList.add(createResultAtPageLevel(wr,TestSolution.FAILED,elementCounter,processRemarkList));    }  } else {    netResultList.addAll(createResultAtPageLevel(wrsOnError,TestSolution.PASSED,0,null));  }  return testSolution;}  }
class C{  public static boolean isHoliday(ZonedDateTime date){  int year=date.getYear();  int[] hols=HOLIDAYS.get(year);  if (null != hols) {    for (    int hol : hols) {      if (hol == date.getDayOfYear()) {        return true;      }    }  }  return false;}  }
class C{  public void testFourMomentConstruction(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createSpokenTextMomentXml("start","second","Hello!");  xml+=createSfxMomentXml("second","third","path/to/something");  xml+=createStartChoiceMomentXml("third",0.5,"Example ChoiceMoment Description","choice_2");  xml+=createChoiceXml("fire","Example Choice Description 1","fourth",true,false,"test_icon");  xml+=createChoiceXml("choice_2","Example Choice Description 2","fourth",false,false,"test_icon");  xml+=createEndChoiceMomentXml();  xml+=createTimerMomentXml("fourth",null,0.25);  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals("Mission 1",mMissionData.getMissionId());  Assert.assertEquals(4,mMissionData.getNumMoments());  Moment spokenTextMoment=mMissionData.getMomentFromId("start");  Moment sfxMoment=mMissionData.getMomentFromId("second");  Moment choiceMoment=mMissionData.getMomentFromId("third");  Moment timerMoment=mMissionData.getMomentFromId("fourth");  Assert.assertEquals(true,spokenTextMoment instanceof SpokenTextMoment);  Assert.assertEquals(true,sfxMoment instanceof SfxMoment);  Assert.assertEquals(true,choiceMoment instanceof ChoiceMoment);  Assert.assertEquals(true,timerMoment instanceof TimerMoment);  SpokenTextMoment moment1=(SpokenTextMoment)spokenTextMoment;  SfxMoment moment2=(SfxMoment)sfxMoment;  ChoiceMoment moment3=(ChoiceMoment)choiceMoment;  TimerMoment moment4=(TimerMoment)timerMoment;  Assert.assertEquals("second",moment1.getNextMomentId());  Assert.assertEquals("third",moment2.getNextMomentId());  Assert.assertEquals(null,moment3.getNextMomentId());  Assert.assertEquals("fourth",moment3.getMomentData().getChoices()[0].getNextMomentId());  Assert.assertEquals(null,moment4.getNextMomentId());  Assert.assertEquals(true,moment3.getMomentData().getChoiceById("fire").requiresChargedWeapon());  Assert.assertEquals(false,moment3.getMomentData().getChoiceById("choice_2").requiresChargedWeapon());}  }
class C{  public StringBody(final String text) throws UnsupportedEncodingException {  this(text,"text/plain",null);}  }
class C{  public boolean zoneRollback(URI exportGroupURI,String contextKey,String taskId) throws DeviceControllerException {  try {    NetworkFCContext context=(NetworkFCContext)WorkflowService.getInstance().loadStepData(contextKey);    if (context == null) {      _log.warn("No zone rollback information for Step: " + contextKey + " , Export Group: "+ exportGroupURI.toString()+ ", and Task: "+ taskId+ ". The zoning step either did not complete or encountered an error.");      WorkflowStepCompleter.stepSucceded(taskId);      return true;    }    logZones(context.getZoneInfos());    WorkflowStepCompleter.stepExecuting(taskId);    _log.info("Beginning zone rollback");    List<NetworkFCZoneInfo> lastReferenceZoneInfo=new ArrayList<NetworkFCZoneInfo>();    List<NetworkFCZoneInfo> rollbackList=new ArrayList<NetworkFCZoneInfo>();    for (    NetworkFCZoneInfo info : context.getZoneInfos()) {      if (info.canBeRolledBack()) {        if (context.isAddingZones()) {          info.setLastReference(true);          lastReferenceZoneInfo.add(info);        }        rollbackList.add(info);      }    }    BiosCommandResult result=addRemoveZones(exportGroupURI,rollbackList,context.isAddingZones());    completeWorkflowState(taskId,"ZoneRollback",result);    if (result.isCommandSuccess() && !lastReferenceZoneInfo.isEmpty()) {      _log.info("There seems to be last reference zones that were removed, clean those zones from the zoning map.");      updateZoningMap(lastReferenceZoneInfo,exportGroupURI,null);    }    return result.isCommandSuccess();  } catch (  Exception ex) {    _log.error("Exception occurred while doing zone rollback",ex);    ServiceError svcError=NetworkDeviceControllerException.errors.zoneRollbackFailedExc(exportGroupURI.toString(),ex);    WorkflowStepCompleter.stepFailed(taskId,svcError);    return false;  }}  }
class C{  public void collectDeviceInfo(Context ctx){  try {    PackageManager pm=ctx.getPackageManager();    PackageInfo pi=pm.getPackageInfo(ctx.getPackageName(),PackageManager.GET_ACTIVITIES);    if (pi != null) {      String versionName=pi.versionName == null ? "null" : pi.versionName;      String versionCode=pi.versionCode + "";      info.put("versionName",versionName);      info.put("versionCode",versionCode);      info.put("crashTime",formatter.format(new Date()));    }  } catch (  PackageManager.NameNotFoundException e) {    Log.e(TAG,"an error occurred when collect package info",e);  }  Field[] fields=Build.class.getDeclaredFields();  for (  Field field : fields) {    try {      field.setAccessible(true);      info.put(field.getName(),field.get(null).toString());      Log.d(TAG,field.getName() + " : " + field.get(null));    } catch (    Exception e) {      Log.e(TAG,"an error occurred when collect crash info",e);    }  }}  }
class C{  protected void paintLine(Graphics g){  g.setColor(Color.RED);  MutableCoord transformed=transform(line.start);  g.fillOval((int)transformed.getX() - 2,(int)transformed.getY() - 2,4,4);  MutableCoord end;  Point p=this.getMousePosition();  if (p == null)   return;  end=new MutableCoord(p.getX(),p.getY());  g.setColor(Color.BLACK);  g.drawLine((int)transformed.getX(),(int)transformed.getY(),(int)end.getX(),(int)end.getY());}  }
class C{  public boolean hasNext(){  return iterator.hasNext();}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public <T extends DragGestureRecognizer>T createDragGestureRecognizer(Class<T> recognizerAbstractClass,Component c,int actions,DragGestureListener dgl){  return Toolkit.getDefaultToolkit().createDragGestureRecognizer(recognizerAbstractClass,this,c,actions,dgl);}  }
class C{  @Override public void close() throws IOException {  if (log.isDebugEnabled()) {    if (cachingEnabled) {      final StringBuilder sb=new StringBuilder();      sb.append("Closing ").append(name);      for (      SolrCache cache : cacheList) {        sb.append("\n\t");        sb.append(cache);      }      log.debug(sb.toString());    } else {      log.debug("Closing [{}]",name);    }  }  core.getInfoRegistry().remove(name);  long cpg=reader.getIndexCommit().getGeneration();  try {    if (closeReader)     rawReader.decRef();  } catch (  Exception e) {    SolrException.log(log,"Problem dec ref'ing reader",e);  }  if (directoryFactory.searchersReserveCommitPoints()) {    core.getDeletionPolicy().releaseCommitPoint(cpg);  }  for (  SolrCache cache : cacheList) {    cache.close();  }  if (releaseDirectory) {    directoryFactory.release(getIndexReader().directory());  }  numCloses.incrementAndGet();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void printString(String v) throws IOException {  printString(v,0,v.length());}  }
class C{  boolean opsResetOk(){  String resetWarning=ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn1") + "\n\n" + ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn2")+ "\n"+ ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn3")+ "\n"+ ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn4")+ "\n\n"+ ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn5")+ "\n"+ ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn6")+ "\n\n"+ ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsWarn7");  return (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,resetWarning,ResourceBundle.getBundle("jmri.jmrit.symbolicprog.SymbolicProgBundle").getString("FactoryResetOpsTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE));}  }
class C{  public RefreshFailedException(){  super();}  }
class C{  public void clear(){  m_ConnectionPanel.clear();  m_QueryPanel.clear();  m_ResultPanel.clear();  m_InfoPanel.clear();}  }
class C{  public void acquireReadLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRE_TEXT + " read " + name,lock);  }  lock.readLock().lock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRED_TEXT + " read " + name,lock);  }}  }
class C{  private boolean fileExportContainsEndpoint(FileExport fileExport,List<String> endpoints){  for (  String endpoint : endpoints) {    if (fileExport.getClients().contains(endpoint)) {      return true;    }  }  return false;}  }
class C{  public MySqlSpoutConfig(MySqlConfig mysqlConfig,ZkBinLogStateConfig zkBinLogStateConfig,int metricsTimeBucketSizeInSecs){  this(mysqlConfig,zkBinLogStateConfig,new FailureConfig(SpoutConstants.DEFAULT_NUMMAXRETRIES,SpoutConstants.DEFAULT_NUMMAXTOTFAILALLOWED),metricsTimeBucketSizeInSecs,SpoutConstants.DEFAULT_BUFFER_CAPACITY);}  }
class C{  public boolean contains(Object attrVal){  return (find(attrVal) >= 0);}  }
class C{  @Override public Item withOnItemClickListener(FastAdapter.OnClickListener<Item> onItemClickListener){  mOnItemClickListener=onItemClickListener;  return (Item)this;}  }
class C{  public boolean isWebCanUpdate(){  if (isProcessed())   return false;  if (getR_Status_ID() == 0)   setR_Status_ID();  if (getR_Status_ID() == 0)   return false;  MStatus status=MStatus.get(getCtx(),getR_Status_ID());  if (status == null)   return false;  return status.isWebCanUpdate();}  }
class C{  public void skipStore(boolean skipStore){  setFlag(skipStore,SKIP_STORE_FLAG_MASK);}  }
class C{  public static void populate(SettingsCache cache,ContentValues contentValues){  if (cache == null) {    return;  }  String name=contentValues.getAsString(Settings.NameValueTable.NAME);  if (name == null) {    Log.w(TAG,"null name populating settings cache.");    return;  }  String value=contentValues.getAsString(Settings.NameValueTable.VALUE);  cache.populate(name,value);}  }
class C{  public ShortBandedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  @Override public boolean hasFunctionalLegAES(){  boolean rightLeg=false;  boolean leftLeg=false;  boolean centerLeg=false;  for (  Mounted mounted : getMisc()) {    if ((mounted.getLocation() == Mech.LOC_LLEG) || (mounted.getLocation() == Mech.LOC_RLEG) || (mounted.getLocation() == Mech.LOC_CLEG)) {      if (((MiscType)mounted.getType()).hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM) && !mounted.isDestroyed() && !mounted.isBreached()&& !mounted.isMissing()) {        if (mounted.getLocation() == Mech.LOC_LLEG) {          leftLeg=true;        } else         if (mounted.getLocation() == Mech.LOC_RLEG) {          rightLeg=true;        } else {          centerLeg=true;        }      } else       if (((MiscType)mounted.getType()).hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM)) {        return false;      }    }  }  return rightLeg && leftLeg && centerLeg;}  }
class C{  private XMLStreamWriter startServiceDocument(ByteArrayOutputStream outputStream) throws XMLStreamException, ODataRenderException {  XMLStreamWriter writer=XMLWriterUtil.startDocument(outputStream,null,SERVICE,ODATA_SERVICE_NS);  writer.writeNamespace(ATOM,ATOM_NS);  writer.writeNamespace(METADATA,ODATA_METADATA_NS);  writer.writeNamespace(SERVICE_BASE,oDataUri.serviceRoot());  writer.writeNamespace(ODATA_CONTEXT,getContextURL(oDataUri,entityDataModel));  writer.writeStartElement(ODATA_SERVICE_NS,WORKSPACE);  writeTitle(writer,getEntityContainer().getName());  return writer;}  }
class C{  public long tryConvertToWriteLock(long stamp){  long a=stamp & ABITS, m, s, next;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      if (U.compareAndSwapLong(this,STATE,s,next=s + WBIT))       return next;    } else     if (m == WBIT) {      if (a != m)       break;      return stamp;    } else     if (m == RUNIT && a != 0L) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT + WBIT))       return next;    } else     break;  }  return 0L;}  }
class C{  @Override public void close() throws IOException {  this.buffer=null;  if (null != this.reader) {    try {      this.reader.close();    } catch (    IOException e) {      this.error=null;      throw e;    } finally {      this.reader=null;    }  }  if (null != this.error) {    IOException e=this.error;    this.error=null;    throw e;  }}  }
class C{  public static boolean doesDataFrameLookLikeMatrix(DataFrame df){  StructType schema=df.schema();  StructField[] fields=schema.fields();  if (fields == null) {    return true;  }  for (  StructField field : fields) {    DataType dataType=field.dataType();    if ((dataType != DataTypes.DoubleType) && (dataType != DataTypes.IntegerType) && (dataType != DataTypes.LongType)&& (!(dataType instanceof VectorUDT))) {      return false;    }  }  return true;}  }
class C{  public void addError(SyntaxException error,SourceUnit source) throws CompilationFailedException {  addError(Message.create(error,source),error.isFatal());}  }
class C{  private void generateConnectedDag(){  initializeGraphAsChain();  if (getNumNodes() <= 1) {    return;  }  int totalEdges=getNumNodes() - 1;  while (isDisconnecting()) {    sampleEdge();    if (edgeExists()) {      continue;    }    if (isAcyclic() && maxDegreeNotExceeded()) {      addEdge();      totalEdges++;    }  }  for (int i=0; i < getNumIterations(); i++) {    sampleEdge();    if (edgeExists()) {      if (isDisconnecting()) {        removeEdge();        reverseDirection();        if (totalEdges < getMaxEdges() && maxDegreeNotExceeded() && maxIndegreeNotExceeded() && maxOutdegreeNotExceeded() && isAcyclic()) {          addEdge();        } else {          reverseDirection();          addEdge();        }      } else {        removeEdge();        totalEdges--;      }    } else {      if (totalEdges < getMaxEdges() && maxDegreeNotExceeded() && maxIndegreeNotExceeded() && maxOutdegreeNotExceeded() && isAcyclic()) {        addEdge();        totalEdges++;      }    }  }}  }
class C{  public ParsableByteArray(){}  }
class C{  public double abs(){  return abs(this);}  }
class C{  public void updateString(int columnIndex,String x) throws SQLException {  throw new NotUpdatable();}  }
class C{  private MergePolicy buildMergePolicyFromInfo(IndexSchema schema){  final MergePolicy policy;  if (mergePolicyInfo == null) {    final SolrResourceLoader resourceLoader=schema.getResourceLoader();    final MergePolicyFactoryArgs mpfArgs=new MergePolicyFactoryArgs();    final MergePolicyFactory defaultMergePolicyFactory=resourceLoader.newInstance(DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME,MergePolicyFactory.class,NO_SUB_PACKAGES,new Class[]{SolrResourceLoader.class,MergePolicyFactoryArgs.class,IndexSchema.class},new Object[]{resourceLoader,mpfArgs,schema});    policy=defaultMergePolicyFactory.getMergePolicy();  } else {    policy=schema.getResourceLoader().newInstance(mergePolicyInfo.className,MergePolicy.class);  }  if (policy instanceof LogMergePolicy) {    LogMergePolicy logMergePolicy=(LogMergePolicy)policy;    fixUseCFMergePolicyInitArg(LogMergePolicy.class);    if (maxMergeDocs != -1)     logMergePolicy.setMaxMergeDocs(maxMergeDocs);    if (mergeFactor != -1)     logMergePolicy.setMergeFactor(mergeFactor);  } else   if (policy instanceof TieredMergePolicy) {    TieredMergePolicy tieredMergePolicy=(TieredMergePolicy)policy;    fixUseCFMergePolicyInitArg(TieredMergePolicy.class);    if (mergeFactor != -1) {      tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);      tieredMergePolicy.setSegmentsPerTier(mergeFactor);    }  } else   if (mergeFactor != -1) {    log.warn("Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.");  }  if (mergePolicyInfo != null) {    SolrPluginUtils.invokeSetters(policy,mergePolicyInfo.initArgs);  }  return policy;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void addAnewarray(String classname){  addOpcode(ANEWARRAY);  addIndex(constPool.addClassInfo(classname));}  }
class C{  private boolean createIvrZone(MDSDialog dialog,IvrZone ivrZone,List<IvrZone> ivrZonesInFabric,IvrZoneset activeIvrZoneset) throws NetworkDeviceControllerException {  _log.info("Creating ivr zone: " + ivrZone.getName());  boolean added=false;  IvrZone activeIvrZone=getIvrZoneInFabric(ivrZone.getName(),activeIvrZoneset.getZones());  if (activeIvrZone != null) {    _log.info("Found an active ivr zone with the name " + activeIvrZone.getName());    if (activeIvrZone.getMembers().size() != ivrZone.getMembers().size()) {      throw NetworkDeviceControllerException.exceptions.activeZoneWithSameNameExists(activeIvrZone.getName());    }    for (    IvrZoneMember member : ivrZone.getMembers()) {      if (!activeIvrZone.contains(member)) {        _log.info("Zone member pwwn/vsanId: " + member.getPwwn() + "/"+ member.getVsanId()+ " was not found in the active zone.");        throw NetworkDeviceControllerException.exceptions.activeZoneWithSameNameExists(activeIvrZone.getName());      }    }  } else {    IvrZone ivrZoneInFabric=getIvrZoneInFabric(ivrZone.getName(),ivrZonesInFabric);    if (ivrZoneInFabric != null) {      _log.info("Found an inactive zone with the name " + ivrZoneInFabric.getName());      dialog.ivrZoneName(ivrZoneInFabric.getName(),true);      _log.info("Deleted inactive zone with the name " + ivrZoneInFabric.getName());    }    dialog.ivrZoneName(ivrZone.getName(),false);    for (    IvrZoneMember member : ivrZone.getMembers()) {      dialog.ivrZoneMember(member.getPwwn(),member.getVsanId(),false);    }    dialog.exitToConfig();    added=true;  }  return added;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static NumericEntityEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  public int countNumbersWithUniqueDigits(int n){  if (n == 0) {    return 1;  }  int res=10;  int uniqueDigits=9;  int availableNums=9;  while (n > 1 && availableNums > 0) {    uniqueDigits*=availableNums;    res+=uniqueDigits;    availableNums--;    n--;  }  return res;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public static Map<String,String> parseDigestChallenge(String headerValue){  if (!headerValue.startsWith("Digest ")) {    throw new IllegalArgumentException("Header is not a digest challenge");  }  String params=headerValue.substring(7);  Map<String,String> paramMap=new HashMap<String,String>();  for (  String param : params.split(",\\s*")) {    String pieces[]=param.split("=");    paramMap.put(pieces[0],pieces[1].replaceAll("^\"(.*)\"$","$1"));  }  return paramMap;}  }
class C{  private void initCropWindow(Rect bitmapRect){  if (initializedCropWindow == false)   initializedCropWindow=true;  if (mFixAspectRatio) {    if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {      Edge.TOP.setCoordinate(bitmapRect.top);      Edge.BOTTOM.setCoordinate(bitmapRect.bottom);      final float centerX=getWidth() / 2f;      final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));      if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());      final float halfCropWidth=cropWidth / 2f;      Edge.LEFT.setCoordinate(centerX - halfCropWidth);      Edge.RIGHT.setCoordinate(centerX + halfCropWidth);    } else {      Edge.LEFT.setCoordinate(bitmapRect.left);      Edge.RIGHT.setCoordinate(bitmapRect.right);      final float centerY=getHeight() / 2f;      final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));      if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;      final float halfCropHeight=cropHeight / 2f;      Edge.TOP.setCoordinate(centerY - halfCropHeight);      Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);    }  } else {    final float horizontalPadding=0.1f * bitmapRect.width();    final float verticalPadding=0.1f * bitmapRect.height();    Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);    Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);    Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);    Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);  }}  }
class C{  public void testBug9917() throws Exception {  String tableName="testBug9917";  boolean defaultCatalogConfig=((com.mysql.jdbc.Connection)this.conn).getNullCatalogMeansCurrent();  if (this.conn.getMetaData().getDriverMajorVersion() == 3 && this.conn.getMetaData().getDriverMinorVersion() >= 2) {    assertEquals(false,defaultCatalogConfig);  } else {    assertEquals(true,defaultCatalogConfig);  }  try {    createTable(tableName,"(field1 int)");    String currentCatalog=this.conn.getCatalog();    try {      this.rs=this.conn.getMetaData().getTables(null,null,tableName,new String[]{"TABLE"});      if (!defaultCatalogConfig) {        fail("Exception should've been thrown");      }      assertEquals(true,this.rs.next());      assertEquals(currentCatalog,this.rs.getString("TABLE_CAT"));    } catch (    SQLException sqlEx) {      if (!defaultCatalogConfig) {        assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());      } else {        throw sqlEx;      }    }  }  finally {    if (this.rs != null) {      this.rs.close();      this.rs=null;    }  }}  }
class C{  public static void revealEditText(EditText text){  int cx=text.getRight() - 30;  int cy=text.getBottom() - 60;  int finalRadius=Math.max(text.getWidth(),text.getHeight());  Animator anim=ViewAnimationUtils.createCircularReveal(text,cx,cy,0,finalRadius);  text.setVisibility(View.VISIBLE);  anim.start();}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  public static boolean isSpace(int c){  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public static <T1,T2,T3>Flux<Tuple3<T1,T2,T3>> zip(Publisher<? extends T1> source1,Publisher<? extends T2> source2,Publisher<? extends T3> source3){  return zip(Tuples.fn3(),source1,source2,source3);}  }
class C{  public NotificationChain basicSetStatement(Statement newStatement,NotificationChain msgs){  Statement oldStatement=statement;  statement=newStatement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ITERATION_STATEMENT__STATEMENT,oldStatement,newStatement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Object launch(java.net.URLConnection urlc,InputStream is,MimeTable mt) throws ApplicationLaunchException {switch (action) {case SAVE_TO_FILE:    try {      return is;    } catch (    Exception e) {      return "Load to file failed:\n" + e;    }case LOAD_INTO_BROWSER:  try {    return urlc.getContent();  } catch (  Exception e) {    return null;  }case LAUNCH_APPLICATION:{  String threadName=command;  int fst=threadName.indexOf(' ');  if (fst > 0) {    threadName=threadName.substring(0,fst);  }  return new MimeLauncher(this,urlc,is,mt.getTempFileTemplate(),threadName);}case UNKNOWN:return null;}return null;}  }
class C{  private void paintWrappedLineNumbers(Graphics g,Rectangle visibleRect){  int width=getWidth();  RTextAreaUI ui=(RTextAreaUI)textArea.getUI();  View v=ui.getRootView(textArea).getView(0);  boolean currentLineHighlighted=textArea.getHighlightCurrentLine();  Document doc=textArea.getDocument();  Element root=doc.getDefaultRootElement();  int lineCount=root.getElementCount();  int topPosition=textArea.viewToModel(new Point(visibleRect.x,visibleRect.y));  int topLine=root.getElementIndex(topPosition);  Rectangle visibleEditorRect=ui.getVisibleEditorRect();  Rectangle r=LineNumberList.getChildViewBounds(v,topLine,visibleEditorRect);  int y=r.y;  int rhs;  boolean ltr=getComponentOrientation().isLeftToRight();  if (ltr) {    rhs=width - RHS_BORDER_WIDTH;  } else {    rhs=RHS_BORDER_WIDTH;  }  int visibleBottom=visibleRect.y + visibleRect.height;  FontMetrics metrics=g.getFontMetrics();  g.setColor(getForeground());  while (y < visibleBottom) {    r=LineNumberList.getChildViewBounds(v,topLine,visibleEditorRect);    if (currentLineHighlighted && topLine == currentLine) {      g.setColor(textArea.getCurrentLineHighlightColor());      g.fillRect(0,y,width,(r.y + r.height) - y);      g.setColor(getForeground());    }    int index=(topLine + 1) + getLineNumberingStartIndex() - 1;    String number=Integer.toString(index);    if (ltr) {      int strWidth=metrics.stringWidth(number);      g.drawString(number,rhs - strWidth,y + ascent);    } else {      int x=RHS_BORDER_WIDTH;      g.drawString(number,x,y + ascent);    }    y+=r.height;    topLine++;    if (topLine >= lineCount)     break;  }}  }
class C{  public char next(char c){  char n=this.next();  if (n != c) {    throw new RuntimeException("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public static int advanceBufferToNextLine(ByteBuffer buffer){  while (buffer.hasRemaining()) {    if (buffer.get() == Constants.NEW_LINE) {      return buffer.position();    }  }  return -1;}  }
class C{  public OperationStateException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public boolean shouldIncludeInGlobalSearch(){  return mIncludeInGlobalSearch;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validOption3(){  return new String[]{"Normal","Spread","One Only","Both"};}  }
class C{  @Inject public AddToIndexPresenter(AddToIndexView view,AppContext appContext,DtoUnmarshallerFactory dtoUnmarshallerFactory,GitLocalizationConstant constant,GitOutputPartPresenter console,GitServiceClient service,NotificationManager notificationManager,ProjectExplorerPresenter projectExplorer){  this.view=view;  this.view.setDelegate(this);  this.service=service;  this.console=console;  this.constant=constant;  this.appContext=appContext;  this.projectExplorer=projectExplorer;  this.notificationManager=notificationManager;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  testError();}  }
class C{  public CustomerExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public double doubleValue(){  return data;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private void readObject(){}  }
class C{  private static int blend_soft_light(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=((ar * br) >> 7) + ((ar * ar) >> 8) - ((ar * ar * br) >> 15);  int cg=((ag * bg) >> 7) + ((ag * ag) >> 8) - ((ag * ag * bg) >> 15);  int cb=((ab * bb) >> 7) + ((ab * ab) >> 8) - ((ab * ab * bb) >> 15);  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  public WorkSource(){  mNum=0;}  }
class C{  public PrivateInputStream(BaseStream p){  mParent=p;  mData=new byte[0];  mIndex=0;  mOpen=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.284 -0500",hash_original_method="B2EE2F5677BCC95DB5D614A683A4C62D",hash_generated_method="9A1B96AA867156E1AB7A89966D62E473") public void onProceededAfterSslError(WebView view,SslError error){}  }
class C{  public static Combo createCombo(Composite parent,int style,int hspan,int fill,String[] items){  Combo c=new Combo(parent,style);  c.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  c.setLayoutData(gd);  if (items != null) {    c.setItems(items);  }  c.select(0);  return c;}  }
class C{  public static void finishedDrawing(){  sDrawPrepared=false;  GLES20.glDisableVertexAttribArray(sPositionHandle);  GLES20.glUseProgram(0);}  }
class C{  private static void sumSqAgg(double[] a,double[] c,int ai,int ci,final int len,KahanObject kbuff,KahanPlusSq kplusSq){  sumAggWithFn(a,c,ai,ci,len,kbuff,kplusSq);}  }
class C{  @Override public Iterable<Edge> edges(){  try {    final String queryStr=toQueryStr(EDGE);    return graph.getEdges(queryStr);  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  private int accumDefaultEscape(Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {  int pos=accumDefaultEntity(writer,ch,i,chars,len,fromTextNode,escLF);  if (i == pos) {    if (Encodings.isHighUTF16Surrogate(ch)) {      char next;      int codePoint=0;      if (i + 1 >= len) {        throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch)}));      } else {        next=chars[++i];        if (!(Encodings.isLowUTF16Surrogate(next)))         throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch) + " " + Integer.toHexString(next)}));        codePoint=Encodings.toCodePoint(ch,next);      }      writer.write("&#");      writer.write(Integer.toString(codePoint));      writer.write(';');      pos+=2;    } else {      if (isCharacterInC0orC1Range(ch) || isNELorLSEPCharacter(ch)) {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      } else       if ((!escapingNotNeeded(ch) || ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch)))) && m_elemContext.m_currentElemDepth > 0) {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      } else {        writer.write(ch);      }      pos++;    }  }  return pos;}  }
class C{  private static String capitalize(String input){  final char[] buffer=input.toCharArray();  buffer[0]=Character.toTitleCase(buffer[0]);  return new String(buffer);}  }
class C{  public static int globalCentroid(Centroid overallCentroid,Relation<? extends NumberVector> rel,List<? extends Cluster<?>> clusters,NumberVector[] centroids,NoiseHandling noiseOption){  int clustercount=0;  Iterator<? extends Cluster<?>> ci=clusters.iterator();  for (int i=0; ci.hasNext(); i++) {    Cluster<?> cluster=ci.next();    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        continue;case TREAT_NOISE_AS_SINGLETONS:      clustercount+=cluster.size();    for (DBIDIter it=cluster.getIDs().iter(); it.valid(); it.advance()) {      overallCentroid.put(rel.get(it));    }  continue;case MERGE_NOISE:break;}}assert (centroids[i] != null);overallCentroid.put(centroids[i],cluster.size());++clustercount;}return clustercount;}  }
class C{  protected URL findResource(String resName){  return null;}  }
class C{  public DaemonClient(URL url){  this(url,"admin");}  }
class C{  private void closeDialog(){  m_table.removeMouseListener(m_listener);  dispose();}  }
class C{  public void installKeyboardActions(JComponent c){  AbstractButton b=(AbstractButton)c;  updateMnemonicBinding(b);  LazyActionMap.installLazyActionMap(c,BasicButtonListener.class,"Button.actionMap");  InputMap km=getInputMap(JComponent.WHEN_FOCUSED,c);  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_FOCUSED,km);}  }
class C{  public SpanTermQuery(Term term,TermContext context){  this.term=Objects.requireNonNull(term);  this.termContext=context;}  }
class C{  public Statement lt(Object value){  return compare("<",value);}  }
class C{  private void testExportImportMultiple(TrackFileFormat trackFileFormat){  addTracks();  exportImport(trackFileFormat);}  }
class C{  public static int evaluateExpression(String expression) throws Exception {  Stack<Integer> operandStack=new Stack<>();  expression=insertBlanks(expression);  String[] tokens=expression.split(" ");  for (  String token : tokens) {    if (token.length() == 0)     continue; else     if (token.charAt(0) == '+' || token.charAt(0) == '-' || token.charAt(0) == '/' || token.charAt(0) == '*') {      processAnOperator(operandStack,token.charAt(0));    } else     if (Character.isDigit(token.charAt(0))) {      operandStack.push(Integer.parseInt(token));    } else     throw new Exception("Wrong expression: ");  }  return operandStack.pop();}  }
class C{  public static boolean isLongDistance(Effect particle){switch (particle) {case EXPLOSION:case EXPLOSION_LARGE:case EXPLOSION_HUGE:case MOB_APPEARANCE:    return true;}return false;}  }
class C{  private static GetImagesResponse checkGetImagesResponse(GetImagesResponse getImagesResponse) throws RpcException {  logger.info("Checking {}",getImagesResponse);switch (getImagesResponse.getResult()) {case OK:    break;case DATASTORE_NOT_FOUND:  throw new DatastoreNotFoundException(getImagesResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(getImagesResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",getImagesResponse.getResult()));}return getImagesResponse;}  }
class C{  private void addRules(IAccessRule[][] accessRules,ArrayList<List<IAccessRule>> collect){  for (int i=0; i < accessRules.length; i++) {    IAccessRule[] libRules=accessRules[i];    List<IAccessRule> list=collect.get(i);    if (!list.isEmpty()) {      IAccessRule lastRule=list.get(list.size() - 1);      if (lastRule.getPattern().equals(ALL_PATTERN)) {        continue;      }    }    for (int j=0; j < libRules.length; j++) {      list.add(libRules[j]);    }  }}  }
class C{  protected int retrieveRightBrace(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameRBRACE:        return this.scanner.currentPosition - 1;    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  private float render708ops(char[][] screenData,long[][] screenCellData,java.awt.geom.Rectangle2D.Float clipRect,float alphaFactor,float xoff,float yoff,float rowHeight,float currY,float charWidth,float currX,StringBuffer sb,long cellFormat,float rowStartY,float textOffset,int lastRenderedCol,int row,int col){  int windowID=CellFormat.getWindowID(cellFormat);  if (windowID == -1) {    return sb.length() * charWidth;  }  DTVCCFontType font=CellFormat.getFont(cellFormat);  DTVCCSize font_size=CellFormat.getSize(cellFormat);  Color bgColor=CellFormat.getBackgroundAwtColor(cellFormat);  Color fgColor=CellFormat.getForegroundAwtColor(cellFormat);  DTVCCOpacity bgOpacity=CellFormat.getBackgroundOpacity(cellFormat);  DTVCCOpacity fgOpacity=CellFormat.getForegroundOpacity(cellFormat);  DTVCCBorderType edgeStyle=CellFormat.getEdgeType(cellFormat);  Color edgeColor=CellFormat.getEdgeAwtColor(cellFormat);  if (uiMgr.getBoolean("cc/708/user_override",false) == true) {    font_size=getUserSizeOverride(font_size,uiMgr.get("cc/708/font_size",null));    font=getUserFontOverride(font,uiMgr.get("cc/708/font",null));    fgColor=getUserColorOverride(fgColor,uiMgr.get("cc/708/foreground_color",null));    fgOpacity=getUserOpacityOverride(fgOpacity,uiMgr.get("cc/708/foreground_opacity",null));    bgColor=getUserColorOverride(bgColor,uiMgr.get("cc/708/background_color",null));    bgOpacity=getUserOpacityOverride(bgOpacity,uiMgr.get("cc/708/background_opacity",null));    edgeStyle=getEdgeTypeOverride(edgeStyle,uiMgr.get("cc/708/edge_style",null));    edgeColor=getUserColorOverride(edgeColor,uiMgr.get("cc/708/edge_color",null));  }  MetaFont currFont=fonts708[font.ordinal()][font_size.ordinal()][CellFormat.getItalic(cellFormat) ? 1 : 0];  String currText=sb.toString();  MetaFont.GlyphVector gvec=currFont.createGlyphVector(currText);  float visAdv=gvec.getAdvance();  if (reality.isIntegerPixels())   visAdv=(float)Math.floor(visAdv);  int trimLength=currText.trim().length();  if (trimLength == 0) {    visAdv=charWidth * currText.length();  }  float leadingSpace=0;  float rectExtraWidth=charWidth;  if (lastRenderedCol < 0 || lastRenderedCol != (col - currText.length() - 1)) {    leadingSpace=charWidth / 2;    if (reality.isIntegerPixels())     leadingSpace=(float)Math.floor(leadingSpace);  } else {    rectExtraWidth/=2;    if (reality.isIntegerPixels())     rectExtraWidth=(float)Math.floor(rectExtraWidth);  }  if ((CellFormat.getForegroundOpacity(screenCellData[row][col]) != DTVCCOpacity.TRANSPARENT || CellFormat.getBackgroundOpacity(screenCellData[row][col]) != DTVCCOpacity.TRANSPARENT) && screenData[row][col] != 0) {    rectExtraWidth-=charWidth / 2;    if (reality.isIntegerPixels())     rectExtraWidth=(float)Math.floor(rectExtraWidth);    rectExtraWidth=Math.max(0.0f,rectExtraWidth);  }  currY+=yoff + rowStartY;  cached708WindowOps.get(windowID).add(new RenderingOp(new SageRenderer.ShapeDescription(rectExtraWidth + visAdv,rowHeight,bgColor),bgOpacity.toFloat(),clipRect,xoff + currX + Math.max(0,textOffset - leadingSpace),currY));  addTo708WindowRect(windowID,xoff + currX + Math.max(0,textOffset - leadingSpace),currY,rectExtraWidth + visAdv,rowHeight);  if (trimLength > 0) {    if (currFont.getHeight() < rowHeight)     currY+=(rowHeight - currFont.getHeight()) / 2;    if (reality.isIntegerPixels())     currY=(float)Math.floor(currY);    float transX=xoff + currX + textOffset;    float textOpacity=fgOpacity.toFloat();switch (fgOpacity) {case TRANSLUCENT:      textOpacity*=-1;    break;case TRANSPARENT:  textOpacity*=-1;break;default :break;}switch (edgeStyle) {case DEPRESSED:cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,edgeColor,currFont,currText,gvec,transX + 1,currY + 1));break;case RAISED:cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,edgeColor,currFont,currText,gvec,transX - 1,currY - 1));break;case SHADOW_LEFT:cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,edgeColor,currFont,currText,gvec,transX - 2,currY + 2));break;case SHADOW_RIGHT:cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,edgeColor,currFont,currText,gvec,transX + 2,currY + 2));break;case UNIFORM:cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,edgeColor,currFont,currText,gvec,transX + 1,currY + 1));cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,edgeColor,currFont,currText,gvec,transX + -1,currY - 1));break;case INVALID:case NONE:default :break;}cached708WindowOps.get(windowID).add(renderFont(clipRect,textOpacity,fgColor,currFont,currText,gvec,transX,currY));if (CellFormat.getUnderline(cellFormat)) {float underY=currY + rowHeight - (rowHeight - currFont.getAscent()) / 2;if (reality.isIntegerPixels()) underY=(float)Math.floor(underY);cached708WindowOps.get(windowID).add(new RenderingOp(new SageRenderer.ShapeDescription(visAdv,2,fgColor),alphaFactor,clipRect,transX,yoff + underY));}}return visAdv;}  }
class C{  @Override public void debugPrint(PrintStream out) throws AdeException {  super.debugPrint(out);  out.println("Ade 1 message anomaly scorer.");}  }
class C{  public static int testIfRead2Snippet(int a){  int res=0;  if (a < 0) {    container.a=10;  } else {    res=container.a;  }  return res;}  }
class C{  public static long composeExpandableGroupId(@IntRange(from=MIN_GROUP_ID,to=MAX_GROUP_ID) long groupId){  if (groupId < MIN_GROUP_ID || groupId > MAX_GROUP_ID) {    throw new IllegalArgumentException("Group ID value is out of range. (groupId = " + groupId + ")");  }  return ((groupId << BIT_OFFSET_GROUP_ID) & BIT_MASK_GROUP_ID) | ((RecyclerView.NO_ID << BIT_OFFSET_CHILD_ID) & BIT_MASK_CHILD_ID);}  }
class C{  public void update(){  JSONObject frame=getFrame(channel);  if (this.name != null) {    frame.put("name",this.name);  }  if (this.topic != null) {    frame.put("topic",this.topic);  }  if (position != -1 && !newPositions.isEmpty()) {    updatePosition();    frame.put("position",this.position);  }  if (userLimit != -1) {    frame.put("user_limit",userLimit);  }  if (bitrate != -1) {    frame.put("bitrate",bitrate);  }  update(channel,frame);  reset();}  }
class C{  public EmptyRegionFunctionException(Throwable cause){  super(cause);}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE:    return basicSetDeclaredElementType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public NativeMemory(long[] longArray){  this(ARRAY_LONG_BASE_OFFSET,longArray,null);  if ((longArray == null) || (longArray.length == 0)) {    throw new IllegalArgumentException("Array must must not be null and have a length greater than zero.");  }  nativeRawStartAddress_=0L;  capacityBytes_=longArray.length << LONG_SHIFT;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected IdentifierRefImpl(){  super();}  }
class C{  public boolean isIncludeHiddenLayers(){  return this.includeHiddenLayers;}  }
class C{  public static Map<String,Object> ccProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  GenericValue paymentPref=(GenericValue)context.get("orderPaymentPreference");  GenericValue authTrans=(GenericValue)context.get("authTrans");  String orderId=(String)context.get("orderId");  String cvv2=(String)context.get("cardSecurityCode");  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  GenericValue party=(GenericValue)context.get("billToParty");  GenericValue cc=(GenericValue)context.get("creditCard");  GenericValue payPalPaymentMethod=(GenericValue)context.get("payPalPaymentMethod");  GenericValue ps=(GenericValue)context.get("billingAddress");  String paymentGatewayConfigId=(String)context.get("paymentGatewayConfigId");  String configString=(String)context.get("paymentConfig");  if (configString == null) {    configString="payment.properties";  }  boolean isPayPal=false;  if ("EXT_PAYPAL".equals(paymentPref.getString("paymentMethodTypeId"))) {    isPayPal=true;  }  Map<String,String> data=FastMap.newInstance();  boolean isReAuth=false;  if (isPayPal) {    data.put("TRXTYPE","A");    data.put("TENDER","P");    data.put("ORIGID",payPalPaymentMethod.getString("transactionId"));  } else {    if (authTrans == null) {      authTrans=PaymentGatewayServices.getAuthTransaction(paymentPref);    }    data.put("COMMENT1",orderId);    data.put("PONUM",orderId);    data.put("CUSTCODE",party.getString("partyId"));    if (comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"preAuth",configString,"payment.verisign.preAuth","Y")) {      data.put("TRXTYPE","A");      if (authTrans != null) {        String refNum=authTrans.getString("referenceNum");        data.put("ORIGID",refNum);        isReAuth=true;      }    } else {      data.put("TRXTYPE","S");    }    data.put("TENDER","C");    if (UtilValidate.isNotEmpty(cvv2)) {      data.put("CVV2",cvv2);    }    data.put("ACCT",cc.getString("cardNumber"));    String name=cc.getString("firstNameOnCard") + " " + cc.getString("lastNameOnCard");    data.put("FIRSTNAME",cc.getString("firstNameOnCard"));    data.put("LASTNAME",cc.getString("lastNameOnCard"));    data.put("COMMENT2",name);    if (cc.get("expireDate") != null) {      String exp=cc.getString("expireDate");      String expDate=exp.substring(0,2);      expDate=expDate + exp.substring(exp.length() - 2);      data.put("EXPDATE",expDate);    }    if (ps != null) {      String street=ps.getString("address1") + ((UtilValidate.isNotEmpty(ps.getString("address2"))) ? " " + ps.getString("address2") : "");      data.put("STREET" + "[" + street.length() + "]",street);      data.put("ZIP",ps.getString("postalCode"));    }  }  data.put("AMT",processAmount.toString());  PayflowAPI pfp=init(delegator,paymentGatewayConfigId,configString,context);  StringBuilder params=makeBaseParams(delegator,paymentGatewayConfigId,configString);  params.append("&").append(parseContext(data));  String resp;  if (!comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"enableTransmit",configString,"payment.verisign.enable_transmit","false")) {    resp=pfp.submitTransaction(params.toString(),pfp.generateRequestId());  } else {    resp="RESULT=0&AUTHCODE=T&PNREF=" + (new Date()).getTime() + "&RESPMSG=Testing";  }  if (Debug.verboseOn()) {    Debug.logVerbose("Response from Verisign: " + resp,module);  }  if (isPayPal) {    resp+="&AVSADDR=" + payPalPaymentMethod.getString("avsAddr") + "&AVSZIP="+ payPalPaymentMethod.getString("avsZip");  }  Map<String,Object> result=ServiceUtil.returnSuccess();  parseAuthResponse(delegator,paymentGatewayConfigId,resp,result,configString,isReAuth,isPayPal);  result.put("processAmount",processAmount);  return result;}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public void initServer(int port,int timeout,boolean log) throws Exception {  mPort=port;  mTimeout=timeout;  mLog=log;  keepAlive=true;  if (acceptT == null) {    acceptT=new AcceptThread();    acceptT.init();    acceptT.start();  }}  }
class C{  protected boolean handleInterval(final RPEntity entity){  return true;}  }
class C{  public static boolean validateExportMaskMatchesVplexCluster(IngestionRequestContext requestContext,UnManagedVolume unManagedVolume,UnManagedExportMask unManagedExportMask){  VolumeIngestionContext volumeContext=requestContext.getRootIngestionRequestContext().getProcessedVolumeContext(unManagedVolume.getNativeGuid());  if (volumeContext == null) {    volumeContext=requestContext.getVolumeContext();  }  if (volumeContext != null && volumeContext instanceof RpVplexVolumeIngestionContext) {    volumeContext=((RpVplexVolumeIngestionContext)volumeContext).getVplexVolumeIngestionContext();  }  if (volumeContext != null && volumeContext instanceof VplexVolumeIngestionContext) {    String clusterName=((VplexVolumeIngestionContext)volumeContext).getVirtualVolumeVplexClusterName();    String maskingViewPath=unManagedExportMask.getMaskingViewPath();    _logger.info("cluster name is {} and masking view path is {}",clusterName,maskingViewPath);    if (clusterName != null && maskingViewPath != null) {      String startOfPath=VPlexApiConstants.URI_CLUSTERS_RELATIVE + clusterName;      if (maskingViewPath.startsWith(startOfPath)) {        _logger.info("\tUnManagedExportMask {} is on VPLEX cluster {} and will be processed now",unManagedExportMask.getMaskName(),clusterName);        return true;      }    }  }  _logger.warn("\tUnManagedExportMask {} is not on the right VPLEX cluster for this ingestion request",unManagedExportMask.getMaskName());  return false;}  }
class C{  public boolean requiresSickle(){  return requiresSickle;}  }
class C{  public static ObjectLink fromPath(String path){  LwM2mPath lwM2mPath=new LwM2mPath(path);  if (lwM2mPath.isRoot()) {    return new ObjectLink();  } else   if (lwM2mPath.isObjectInstance()) {    return new ObjectLink(lwM2mPath.getObjectId(),lwM2mPath.getObjectInstanceId());  } else {    throw new IllegalArgumentException("Invalid path: ObjectLink should reference an object instance");  }}  }
class C{  public void print(char[] charArray){  print(new String(charArray,0,charArray.length));}  }
class C{  public AbstractAQuery(Context context){  this.context=context;}  }
class C{  private Object readResolve(){  return ObjectUtils.NULL;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public void removeElements(PsiElement[] elements) throws IncorrectOperationException {  removeElements(this,elements);}  }
class C{  protected boolean validatePageConfiguration(){  return pageConfigurationForm.validate();}  }
class C{  public static void fillMatrix_3D(int n1,int n2,int n3,double[] m){  Random r=new Random(2);  int sliceStride=n2 * n3;  int rowStride=n3;  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      for (int k=0; k < n3; k++) {        m[i * sliceStride + j * rowStride + k]=r.nextDouble();      }    }  }}  }
class C{  public Iterator<? extends ITPS> rangeIterator(final Schema schema,final Object fromKey,final Object toKey,final INameFilter filter){  return rangeIterator(schema,fromKey,toKey,0,MIN_TIMESTAMP,CURRENT_ROW,filter);}  }
class C{  public synchronized int read() throws IOException {  if (pos >= count) {    fill();    if (pos >= count)     return -1;  }  return getBufIfOpen()[pos++] & 0xff;}  }
class C{  public LongListAdapter(AbstractLongList content){  this.content=content;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String[] args){  Properties properties=null;  try {    if (args.length == 1 && args[0].endsWith(".properties")) {      properties=loadProperties(args[0]);      new NatsBench(properties).run();    } else {      new NatsBench(args).run();    }  } catch (  Exception e) {    log.error("Exception:",e);    System.exit(-1);  }  System.exit(0);}  }
class C{  private void buildTree(List<Strategy> items) throws ValueTypeException {  m_nodeMap.put(m_root,m_root.getRoot());  for (Iterator<Strategy> iter=items.iterator(); iter.hasNext(); ) {    Strategy strategy=iter.next();    addItem(strategy);  }}  }
class C{  public static SpatialPickResults pickBounds(Node root,Ray3 pickRay,Node pickTop){  root.updateWorldBound(true);  if (pickTop == null) {    pickTop=root;  }  final SpatialPickResults spr=new SpatialPickResults();  spr.setCheckDistance(true);  PickingUtil.findPick(pickTop,pickRay,spr);  if (spr.getMeshList() == null) {    return (null);  } else {    return (spr);  }}  }
class C{  protected void reportWork(long amount){  reportWork(this,amount);}  }
class C{  @UiHandler("secondChoiceButton") public void handleSecondChoiceClick(final ClickEvent event){  this.actionDelegate.secondChoiceClicked();}  }
class C{  public static void ensureVirtualized(@SuppressWarnings("unused") Object object){}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected static void showNotification(Context context,NotificationId notificationId,@DrawableRes int iconResource,String title,List<CharSequence> content,PendingIntent viewIntent,PendingIntent deleteIntent){  NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();  for (  CharSequence c : content)   inboxStyle.addLine(c);  Notification notification=new NotificationCompat.Builder(context).setSmallIcon(iconResource).setPriority(NotificationCompat.PRIORITY_LOW).setCategory(NotificationCompat.CATEGORY_SOCIAL).setContentTitle(title).setContentText(content.get(0)).setStyle(inboxStyle).setNumber(SteamGiftsUserData.getCurrent(context).getMessageNotification()).setContentIntent(viewIntent).setDeleteIntent(deleteIntent).setAutoCancel(true).build();  showNotification(context,notificationId,notification);}  }
class C{  public void testMismatchedFields() throws Exception {  Directory dirs[]=new Directory[10];  for (int i=0; i < dirs.length; i++) {    Directory dir=newDirectory();    IndexWriterConfig iwc=new IndexWriterConfig(null);    IndexWriter iw=new IndexWriter(dir,iwc);    Document doc=new Document();    for (int j=0; j < 10; j++) {      doc.add(new StringField(Integer.toString(j),Integer.toString(j),Field.Store.YES));    }    for (int j=0; j < 10; j++) {      iw.addDocument(doc);    }    DirectoryReader reader=DirectoryReader.open(iw);    if (random().nextBoolean()) {      reader=new MismatchedDirectoryReader(reader,random());    }    dirs[i]=newDirectory();    IndexWriter adder=new IndexWriter(dirs[i],new IndexWriterConfig(null));    TestUtil.addIndexesSlowly(adder,reader);    adder.commit();    adder.close();    IOUtils.close(reader,iw,dir);  }  Directory everything=newDirectory();  IndexWriter iw=new IndexWriter(everything,new IndexWriterConfig(null));  iw.addIndexes(dirs);  iw.forceMerge(1);  LeafReader ir=getOnlyLeafReader(DirectoryReader.open(iw));  for (int i=0; i < ir.maxDoc(); i++) {    Document doc=ir.document(i);    assertEquals(10,doc.getFields().size());    for (int j=0; j < 10; j++) {      assertEquals(Integer.toString(j),doc.get(Integer.toString(j)));    }  }  IOUtils.close(iw,ir,everything);  IOUtils.close(dirs);}  }
class C{  @Override public MeasureColumnDataChunk readMeasureChunk(FileHolder fileReader,int blockIndex){  MeasureColumnDataChunk datChunk=new MeasureColumnDataChunk();  ValueCompressonHolder.UnCompressValue copy=values[blockIndex].getNew();  copy.setValue(fileReader.readByteArray(filePath,measureColumnChunk.get(blockIndex).getDataPageOffset(),measureColumnChunk.get(blockIndex).getDataPageLength()));  CarbonReadDataHolder measureDataHolder=copy.uncompress(compressionModel.getChangedDataType()[blockIndex]).getValues(compressionModel.getDecimal()[blockIndex],compressionModel.getMaxValue()[blockIndex]);  datChunk.setMeasureDataHolder(measureDataHolder);  datChunk.setNullValueIndexHolder(measureColumnChunk.get(blockIndex).getNullValueIndexForColumn());  return datChunk;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public byte[] compress(float[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:27.773 -0500",hash_original_method="11CB195F3B96E0AC481420CD2EA50370",hash_generated_method="F9701C25E71A197B713A220C3D33D83B") public static void write(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return;  }  try {    while (byteCount > 0) {      int bytesWritten=Libcore.os.write(fd,bytes,byteOffset,byteCount);      byteCount-=bytesWritten;      byteOffset+=bytesWritten;    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public final void testPhoneNumberWithCharSequenceParameter(){  assertNotNull(Validators.phoneNumber("foo"));}  }
class C{  private ImageView createBlankSpace(){  ImageView view=new ImageView(getContext());  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public static boolean isARMBasedDevice(){  final String arch=System.getProperty("os.arch");  return arch.startsWith("arm") || arch.startsWith("ARM");}  }
class C{  public String toString(){  StringBuilder str=new StringBuilder();  Formatter formatter=new Formatter(str,Locale.US);  str.append(getTarget() + "\n");  if (hasReceiver()) {    formatter.format("\tReceiver: %s (%s)\n",getReceiver(),getReceiver().getClass());    str.append("\t\tPT Set:\n");    for (    IAllocNode receiverNode : receiverNodes)     formatter.format("\t\tNode: %s (%s)\n",receiverNode,receiverNode.getClass());    for (int i=0; i < getNumArgs(); i++) {      if (isArgPointer(i)) {        Set<? extends IAllocNode> nodes=getArgPTSet(i);        formatter.format("\tArg %d (size %d)\n",i,nodes.size());        for (        IAllocNode node : nodes) {          formatter.format("\t\tNode: %s (%s), New expr: %s (%s)\n",node,node.getClass(),node.getNewExpr(),node.getNewExpr().getClass());        }      } else {        formatter.format("\tArg %d: %s (%s)\n",i,getArgValue(i).getClass(),getArgValue(i));      }    }  }  formatter.close();  return str.toString();}  }
class C{  public T next(){  if (!hasNext) {    throw new NoSuchElementException();  }  try {    T response=request.execute();    if (response.containsKey("pageToken")) {      request=request.set("pageToken",response.get("pageToken"));    } else {      hasNext=false;    }    return response;  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public void scale(double scaleFactor){  for (  K key : keySet()) {    Counter<V> counts=getCounter(key);    counts.scale(scaleFactor);  }}  }
class C{  public void beginPaint(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowDVDPlayer.getDVDAudioRenderFilter();}  }
class C{  private Class<T> castable(Class<T> newClass,Class<?>... types) throws ClassCastException {  for (  Class<?> type : types)   if (!type.isAssignableFrom(newClass)) {    throw new ClassCastException(type.getName());  }  return newClass;}  }
class C{  public Version(Integer... components){  if (components.length == 0) {    throw new IllegalArgumentException("Must receive at least one version component");  }  for (  int component : components) {    if (component < 0) {      throw new IllegalArgumentException("Version components must be non negative");    }  }  m_rawVersion=Arrays.copyOf(components,components.length);  final String strRepresentation=this.toString();  if (strRepresentation.length() > VERSION_MAX_STRING_LENGTH) {    throw new IllegalArgumentException(String.format("Exceeded " + "maximal string representation length: %s (max length: %d)",strRepresentation,VERSION_MAX_STRING_LENGTH));  }}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static Map<String,List<Volume>> groupVolumesByArrayGroup(List<Volume> volumes,DbClient dbClient){  Map<String,List<Volume>> arrayGroupToVolumes=new HashMap<String,List<Volume>>();  for (  Volume volume : volumes) {    String storage=volume.getStorageController().toString();    String repGroupName=volume.getReplicationGroupInstance();    if (volume.isVPlexVolume(dbClient)) {      Volume backedVol=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);      if (backedVol != null) {        repGroupName=backedVol.getReplicationGroupInstance();        storage=backedVol.getStorageController().toString();      }    }    if (NullColumnValueGetter.isNullValue(repGroupName)) {      repGroupName="";    }    String key=repGroupName + storage;    if (arrayGroupToVolumes.get(key) == null) {      arrayGroupToVolumes.put(key,new ArrayList<Volume>());    }    arrayGroupToVolumes.get(key).add(volume);  }  return arrayGroupToVolumes;}  }
class C{  public static DoubleMatrix1D pow(DoubleMatrix1D A,DoubleMatrix1D B){  return A.assign(B,F.pow);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.724 -0500",hash_original_method="FBD3A634F75EF390904BDDFD24CE73C8",hash_generated_method="5B6D7B9372740F7BA2CAF352A032C7FC") private void writeStatisticsLocked(){  if (DEBUG_FILE)   Log.v(TAG,"Writing new " + mStatisticsFile.getBaseFile());  removeMessages(MSG_WRITE_STATISTICS);  FileOutputStream fos=null;  try {    fos=mStatisticsFile.startWrite();    Parcel out=Parcel.obtain();    final int N=mDayStats.length;    for (int i=0; i < N; i++) {      DayStats ds=mDayStats[i];      if (ds == null) {        break;      }      out.writeInt(STATISTICS_FILE_ITEM);      out.writeInt(ds.day);      out.writeInt(ds.successCount);      out.writeLong(ds.successTime);      out.writeInt(ds.failureCount);      out.writeLong(ds.failureTime);    }    out.writeInt(STATISTICS_FILE_END);    fos.write(out.marshall());    out.recycle();    mStatisticsFile.finishWrite(fos);  } catch (  java.io.IOException e1) {    Log.w(TAG,"Error writing stats",e1);    if (fos != null) {      mStatisticsFile.failWrite(fos);    }  }}  }
class C{  public SelectItem(Object value,String label,String description){  this(value,label,description,false,true,false);}  }
class C{  public void drawPoint(Graphics graphics,Point pos){  if (pointStyle == PointStyle.NONE)   return;  graphics.pushState();  graphics.setBackgroundColor(traceColor);  graphics.setLineWidth(1);  graphics.setLineStyle(SWTConstants.LINE_SOLID);switch (pointStyle) {case POINT:    graphics.fillOval(new Rectangle(pos.x - pointSize / 2,pos.y - pointSize / 2,pointSize,pointSize));  break;case CIRCLE:graphics.drawOval(new Rectangle(pos.x - pointSize / 2,pos.y - pointSize / 2,pointSize,pointSize));break;case TRIANGLE:graphics.drawPolygon(new int[]{pos.x - pointSize / 2,pos.y + pointSize / 2,pos.x,pos.y - pointSize / 2,pos.x + pointSize / 2,pos.y + pointSize / 2});break;case FILLED_TRIANGLE:graphics.fillPolygon(new int[]{pos.x - pointSize / 2,pos.y + pointSize / 2,pos.x,pos.y - pointSize / 2,pos.x + pointSize / 2,pos.y + pointSize / 2});break;case SQUARE:graphics.drawRectangle(new Rectangle(pos.x - pointSize / 2,pos.y - pointSize / 2,pointSize,pointSize));break;case FILLED_SQUARE:graphics.fillRectangle(new Rectangle(pos.x - pointSize / 2,pos.y - pointSize / 2,pointSize,pointSize));break;case BAR:graphics.drawLine(pos.x,pos.y - pointSize / 2,pos.x,pos.y + pointSize / 2);break;case CROSS:graphics.drawLine(pos.x,pos.y - pointSize / 2,pos.x,pos.y + pointSize / 2);graphics.drawLine(pos.x - pointSize / 2,pos.y,pos.x + pointSize / 2,pos.y);break;case XCROSS:graphics.drawLine(pos.x - pointSize / 2,pos.y - pointSize / 2,pos.x + pointSize / 2,pos.y + pointSize / 2);graphics.drawLine(pos.x + pointSize / 2,pos.y - pointSize / 2,pos.x - pointSize / 2,pos.y + pointSize / 2);break;case DIAMOND:graphics.drawPolyline(new int[]{pos.x,pos.y - pointSize / 2,pos.x - pointSize / 2,pos.y,pos.x,pos.y + pointSize / 2,pos.x + pointSize / 2,pos.y,pos.x,pos.y - pointSize / 2});break;case FILLED_DIAMOND:graphics.fillPolygon(new int[]{pos.x,pos.y - pointSize / 2,pos.x - pointSize / 2,pos.y,pos.x,pos.y + pointSize / 2,pos.x + pointSize / 2,pos.y});break;default :break;}graphics.popState();}  }
class C{  public ExistsRequest routing(String... routings){  this.routing=Strings.arrayToCommaDelimitedString(routings);  return this;}  }
class C{  public boolean isAGCEnabled(){  return mAGCEnabled.get();}  }
class C{  boolean replaceKey(IFitsHeader oldKey,IFitsHeader newKey) throws HeaderCardException {  return replaceKey(oldKey.key(),newKey.key());}  }
class C{  public final T blockFirst(Duration d){  return blockFirstMillis(d.toMillis());}  }
class C{  public InvalidContentTypeException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public ChatEvent parse(String text){  ChatEvent result=null;  if (text.endsWith(END_MESSAGE) && text.startsWith(START_MESSAGE) || text.startsWith(START_MESSAGE,1)) {    result=new ChatEvent(null,ChatType.BUGWHO_ALL,text);  }  return result;}  }
class C{  public static String join(short[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  short next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  private void readListStyleElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {  if (DEBUG) {    System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> element.");  }}  }
class C{  @RequestMapping(value="/stub/admin/filescanners/count") public ResponseEntity<?> count(){  fr.gael.dhus.service.UploadService uploadService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UploadService.class);  try {    return new ResponseEntity<>("{\"count\":" + uploadService.countFileScanners() + "}",HttpStatus.OK);  } catch (  org.springframework.security.access.AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  public DeserializationSpeedMetric(int iterations,boolean validate){  this.iterations=iterations;  this.validate=validate;}  }
class C{  public long utime(){  return Long.parseLong(fields[13]);}  }
class C{  public static void saveAs(Process process){  saveAs(process,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.561 -0500",hash_original_method="2D34DDD985EB62B933696188ECD0E85B",hash_generated_method="F8A1F343999E726AB5380E952822DA7C") public static byte[] decode(String data){  int len=data.length() / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception decoding base64 string: " + e);  }  return bOut.toByteArray();}  }
class C{  @Field(7) public cl_image_desc num_mip_levels(int num_mip_levels){  this.io.setIntField(this,7,num_mip_levels);  return this;}  }
class C{  public long topologyVersion(){  return topVer;}  }
class C{  private void performStorageTierBookKeeping(URI storageSystemUri) throws IOException {  List<URI> storageTierUris=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStorageTierConstraint(storageSystemUri));  List<StorageTier> storageTiers=_dbClient.queryObject(StorageTier.class,storageTierUris);  for (  StorageTier tier : storageTiers) {    if (!_tierNativeGuids.contains(tier.getNativeGuid())) {      tier.setInactive(true);      _dbClient.persistObject(tier);    }  }}  }
class C{  private ConcurrentMap<Class<?>,MailAction> defaultMethodMap(){  final ConcurrentMap<Class<?>,MailAction> actionMap=new ConcurrentHashMap<Class<?>,MailAction>(4);  actionMap.put(ActionFileInto.class,new FileIntoAction());  actionMap.put(ActionKeep.class,new KeepAction());  actionMap.put(ActionRedirect.class,new RedirectAction());  actionMap.put(ActionReject.class,new RejectAction());  actionMap.put(ActionVacation.class,new VacationAction());  return actionMap;}  }
class C{  public DefaultExternalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger){  super(source,target,actions,event,guard,trigger);}  }
class C{  private void sceneRecognize(){  Log.d(TAG,"sceneRecognize");  mAction=VisionAction.SceneRecognition;  lockFocus();}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  if (!m_Initialized) {    if ((getInitFile() != null) && getInitFile().isFile()) {      DataSource source=new DataSource(getInitFile().getAbsolutePath());      Instances data=source.getDataSet();      m_InitFileClassIndex.setUpper(data.numAttributes() - 1);      data.setClassIndex(m_InitFileClassIndex.getIndex());      initFilter(data);    } else {      initFilter(instances);    }  }  if (m_Missing != null) {    instances=Filter.useFilter(instances,m_Missing);  }  if (m_NominalToBinary != null) {    instances=Filter.useFilter(instances,m_NominalToBinary);  }  if (m_ActualFilter != null) {    instances=Filter.useFilter(instances,m_ActualFilter);  }  double[] classes=instances.attributeToDoubleArray(instances.classIndex());  int classIndex=instances.classIndex();  Attribute classAttribute=(Attribute)instances.classAttribute().copy();  instances.setClassIndex(-1);  instances.deleteAttributeAt(classIndex);  ArrayList<Attribute> atts=new ArrayList<Attribute>();  for (int j=0; j < m_NumTrainInstances; j++) {    atts.add(new Attribute("Kernel " + j));  }  atts.add(classAttribute);  Instances result=new Instances("Kernel",atts,0);  result.setClassIndex(result.numAttributes() - 1);  for (int i=0; i < instances.numInstances(); i++) {    double[] k=new double[m_NumTrainInstances + 1];    for (int j=0; j < m_NumTrainInstances; j++) {      double v=m_ActualKernel.eval(-1,j,instances.instance(i));      k[j]=v;    }    k[k.length - 1]=classes[i];    Instance in=new DenseInstance(1.0,k);    result.add(in);  }  if (!isFirstBatchDone()) {    setOutputFormat(result);  }  return result;}  }
class C{  public static boolean arrayequals(byte[] a,byte[] b,int count){  for (int i=0; i < count; i++) {    if (a[i] != b[i]) {      return false;    }  }  return true;}  }
class C{  public VOSubscriptionDetails modifyUserRole(VOUsageLicense license,VORoleDefinition newRole,String subscriptionId) throws Exception {  license.setRoleDefinition(newRole);  subscriptionService.addRevokeUser(subscriptionId,Arrays.asList(new VOUsageLicense[]{license}),null);  return subscriptionService.getSubscriptionDetails(subscriptionId);}  }
class C{  public CSVParserBuilder withStrictQuotes(final boolean strictQuotes){  this.strictQuotes=strictQuotes;  return this;}  }
class C{  public static ResinWebXml parseResinXml(InputStream input) throws IOException, JDOMException {  ResinWebXmlIo io=new ResinWebXmlIo();  return (ResinWebXml)io.parseXml(input);}  }
class C{  public void displayValidationError(final String message){  final StringBuilder updatedMsg=new StringBuilder(FontAwesome.EXCLAMATION_TRIANGLE.getHtml());  updatedMsg.append(' ');  updatedMsg.append(message);  notificationMessage.showNotification(SPUILabelDefinitions.SP_NOTIFICATION_ERROR_MESSAGE_STYLE,null,updatedMsg.toString(),true);}  }
class C{  public void recordBourneFileSystemEvent(DbClient dbClient,String evtType,Operation.Status status,String desc,URI id) throws Exception {  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  FileShare fileShareObj=dbClient.queryObject(FileShare.class,id);  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(fileShareObj,evtType,desc,"",dbClient,EVENT_SERVICE_TYPE,RecordType.Event.name(),EVENT_SERVICE_SOURCE);  try {    eventManager.recordEvents(event);    _logger.info("ViPR {} event recorded",evtType);  } catch (  Exception ex) {    _logger.error("Failed to record event. Event description: {}. Error:",evtType,ex);  }}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  protected PropertyChangeListener createActionPropertyChangeListener(Action a){  return createActionPropertyChangeListener0(a);}  }
class C{  public String rewriteLink(final String link){  return rewriteLink(link,null);}  }
class C{  public static Map toMap(Object o,Map defaultValue){  return toMap(o,false,defaultValue);}  }
class C{  public RemoteCacheInfo(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int idx=getInt(stack);  Widget cw=getWidget(stack);  Widget pw=getWidget(stack);  if (SageConstants.LITE)   return null;  if (cw != null && pw != null && pw.willContain(cw))   WidgetFidget.contain(pw,cw,idx);  return null;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONSTRAINT___ANONYMOUS_CONSTRAINT_11:    getAnonymous_constraint_1_1().clear();  getAnonymous_constraint_1_1().addAll((Collection<? extends Anonymous_constraint_1_>)newValue);return;case UmplePackage.CONSTRAINT___CONSTRAINT_BODY_1:getConstraintBody_1().clear();getConstraintBody_1().addAll((Collection<? extends ConstraintBody_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.893 -0500",hash_original_method="8C3C0DB6E3E572D598F887EBD1169042",hash_generated_method="CF84313E0A656F6B37009570B4E262F7") public void start(){  startAnimation();}  }
class C{  public int max(int i){  if (i < 0 || i >= sizes.size())   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of IVector2D.");  int result=Integer.MIN_VALUE, size=sizes.get(i);  for (int j=0; j < size; ++j)   if (vector[i][j] > result)   result=vector[i][j];  return result;}  }
class C{  public ESRIRecord[] locateRecords(double xmin,double ymin,double xmax,double ymax) throws IOException, FormatException {  boolean gatherBounds=false;  if (bounds == null) {    bounds=new ESRIBoundingBox();    gatherBounds=true;  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("locateRecords:\n\txmin: " + xmin + "; ymin: "+ ymin+ "\n\txmax: "+ xmax+ "; ymax: "+ ymax);  }  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];  int recNum=0;  Vector<ESRIRecord> v=new Vector<ESRIRecord>();  int sRecordSize=DEFAULT_SHAPE_RECORD_SIZE;  byte sRecord[]=new byte[sRecordSize];  if (shpFileName == null) {    return null;  }  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));  if (shp == null) {    shp=getShpFile(shpFileName);  }  ssx.seek(32);  ssx.byteOrder(false);  int shapeType=ssx.readInteger();  ssx.seek(100);  while (true) {    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);    if (result <= 0) {      break;    } else {      recNum++;      double xmin2=readLEDouble(ixRecord,8);      double ymin2=readLEDouble(ixRecord,16);      double xmax2=readLEDouble(ixRecord,24);      double ymax2=readLEDouble(ixRecord,32);      if (logger.isLoggable(Level.FINER)) {        logger.finer("Looking at rec num " + recNum);        logger.finer("  " + xmin2 + ", "+ ymin2+ "\n  "+ xmax2+ ", "+ ymax2);      }      if (gatherBounds) {        bounds.addPoint(xmin2,ymin2);        bounds.addPoint(xmax2,ymax2);      }      if (intersects(xmin,ymin,xmax,ymax,xmin2,ymin2,xmax2,ymax2)) {        int offset=readBEInt(ixRecord,0);        int byteOffset=offset * 2;        int contentLength=readBEInt(ixRecord,4);        int recordSize=(contentLength * 2) + 8;        if (recordSize < 0) {          logger.warning("SpatialIndex: supposed to read record size of " + recordSize);          break;        }        if (recordSize > sRecordSize) {          sRecordSize=recordSize;          if (logger.isLoggable(Level.FINER)) {            logger.finer("Shapefile SpatialIndex record size: " + sRecordSize);          }          sRecord=new byte[sRecordSize];        }        if (logger.isLoggable(Level.FINE)) {          logger.fine("going to shp byteOffset = " + byteOffset + " for record size = "+ recordSize+ ", offset = "+ offset+ ", shape type = "+ shapeType);        }        try {          shp.seek(byteOffset);          int nBytes=shp.read(sRecord,0,recordSize);          if (nBytes < recordSize) {            logger.warning("Shapefile SpatialIndex expected " + recordSize + " bytes, but got "+ nBytes+ " bytes instead.");          }          ESRIRecord record=makeESRIRecord(shapeType,sRecord,0);          v.addElement(record);        } catch (        IOException ioe) {          logger.warning("SpatialIndex.locateRecords: IOException. ");          ioe.printStackTrace();          break;        }      }    }  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("Processed " + recNum + " records");    logger.fine("Selected " + v.size() + " records");  }  int nRecords=v.size();  ssx.close();  shp.close();  shp=null;  ESRIRecord result[]=new ESRIRecord[nRecords];  v.copyInto(result);  return result;}  }
class C{  @Override public void readFromNBT(NBTTagCompound tag){  super.readFromNBT(tag);  NBTTagCompound data=tag.getCompoundTag("IC2BasicSource");  energyStored=data.getDouble("energy");}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  private Race parseRace(JSONObject o){  try {    String id=(String)o.get("id");    JSONObject gameInfo=(JSONObject)o.get("game");    String game=(String)gameInfo.get("name");    String goal=(String)o.get("goal");    int state=((Number)o.get("state")).intValue();    String statetext=(String)o.get("statetext");    long time=((Number)o.get("time")).longValue();    Race race=new Race(id,game,goal,state,statetext,time);    JSONObject entrants=(JSONObject)o.get("entrants");    parseEntrants(entrants,race);    return race;  } catch (  ClassCastException|NullPointerException|NumberFormatException ex) {    LOGGER.warning("Error parsing race: " + ex);    return null;  }}  }
class C{  public void testCase14(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public Builder deleteX509Certificate(X509Certificate certificate){  X509Certificate deleteCertificates=new X509Certificate.Builder().setValue(certificate.getValue()).setOperation(DELETE).build();  certificates.add(deleteCertificates);  return this;}  }
class C{  private synchronized void incrementSessionRefs(){  refCnt++;}  }
class C{  public static <T>T invokeMethod(Object obj,String methodName,Object... args){  try {    Class<?>[] paramTypes=new Class<?>[args.length];    for (int i=0; i < paramTypes.length; i++) {      paramTypes[i]=args[i].getClass();    }    Method method=getAvailableMethod(obj.getClass(),methodName,paramTypes);    @SuppressWarnings("unchecked") T result=(T)method.invoke(obj,args);    return result;  } catch (  IllegalArgumentException e) {    throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e);  }catch (  IllegalAccessException e) {    throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e);  }catch (  InvocationTargetException e) {    throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e.getTargetException());  }}  }
class C{  public void increaseFilteredOccurrences(){  if (this != empty) {    filteredOccurrences++;  }}  }
class C{  public CTSTestCase(Class testCase,String testName){  super("testMethod");  this.props.putAll(CTSTestConfig.getProperties());  this.testCase=testCase;  this.testName=testName;  Method[] methods=testCase.getMethods();  for (int i=0; i < methods.length; i++) {    if (methods[i].getName().equals("setup") && Arrays.equals(methods[i].getParameterTypes(),SETUP_PARAMS))     setupMethod=methods[i]; else     if (methods[i].getName().equals("cleanup") && methods[i].getParameterTypes().length == 0)     cleanupMethod=methods[i];  }}  }
class C{  public NodeList selectNodes(String xpathExpression){  return new NodeList(XPathCache.getXPath(xpathExpression).applyTo(this),false);}  }
class C{  private void doLog(Request request,Response response,AccessInformation ai) throws IOException, ServletException {  Cookie integrityCookie=CookieKey.getIntegrityCookie(request.getCookies());  SecurityContext ctx=null;  if (integrityCookie != null) {    String integrity=integrityCookie.getValue();    if (integrity != null && !integrity.isEmpty()) {      ctx=SecurityContextProvider.getSecurityContext(integrity);    }  }  if ((ctx != null) && (ctx.getAuthentication() != null)) {    ai.setUsername(ctx.getAuthentication().getName());  } else {    String[] basicAuth=extractAndDecodeHeader(request.getHeader("Authorization"));    if (basicAuth != null)     ai.setUsername(basicAuth[0]);  }  if (request.getQueryString() != null) {    ai.setRequest(request.getRequestURL().append('?').append(request.getQueryString()).toString());  } else {    ai.setRequest(request.getRequestURL().toString());  }  ai.setLocalAddress(LOCAL_ADDR_VALUE);  ai.setLocalHost(request.getServerName());  ai.setRemoteAddress(ProxyWebAuthenticationDetails.getRemoteIp(request));  ai.setRemoteHost(ProxyWebAuthenticationDetails.getRemoteHost(request));}  }
class C{  public BaseDriveCollectionRequest(final String requestUrl,IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BaseDriveCollectionResponse.class,IDriveCollectionPage.class);}  }
class C{  public static Instances linkTransform(Instances D,int j,int exl[]){  Instances D_j=new Instances(D);  D_j.setClassIndex(-1);  int ndx=j;  for (int i=exl.length - 1; i >= 0; i--) {    D_j.deleteAttributeAt(exl[i]);    if (exl[i] < ndx)     ndx--;  }  D_j.setClassIndex(ndx);  return D_j;}  }
class C{  public void insert(T object,int index){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(index,object);    } else {      mObjects.add(index,object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public String toString(String fmt,String open,String close,String colSep,String rowSep){  StringWriter s=new StringWriter();  PrintWriter p=new PrintWriter(s);  p.print(open);  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      p.printf(fmt,get(r,c));      if (c < columns - 1) {        p.print(colSep);      }    }    if (r < rows - 1) {      p.print(rowSep);    }  }  p.print(close);  return s.toString();}  }
class C{  private void removeStatements(String prefix){  String bucketResource=Constants.AWS_RESOURCE_PREFIX + bucketName;  String objectResource=Constants.AWS_RESOURCE_PREFIX + bucketName + "/"+ prefix+ "*";  boolean[] inUse=getInUsePolicy(prefix);  boolean readOnlyInUse=inUse[0];  boolean writeOnlyInUse=inUse[1];  List<Statement> out=new ArrayList<Statement>();  Set<String> s3PrefixValues=new HashSet<String>();  List<Statement> readOnlyBucketStatements=new ArrayList<Statement>();  for (  Statement statement : statements) {    if (!statement.isValid(bucketName)) {      out.add(statement);      continue;    }    if (statement.resources().contains(bucketResource)) {      if (statement.conditions() != null) {        statement.removeBucketActions(prefix,bucketResource,false,false);      } else {        statement.removeBucketActions(prefix,bucketResource,readOnlyInUse,writeOnlyInUse);      }    } else     if (statement.resources().contains(objectResource)) {      statement.removeObjectActions(objectResource);    }    if (!statement.actions().isEmpty()) {      if (statement.resources().contains(bucketResource) && statement.actions().containsAll(Constants.READ_ONLY_BUCKET_ACTIONS) && statement.effect().equals("Allow")&& statement.principal().aws().contains("*")) {        if (statement.conditions() != null) {          ConditionKeyMap stringEqualsValue=statement.conditions().get("StringEquals");          if (stringEqualsValue != null) {            Set<String> values=stringEqualsValue.get("s3:prefix");            if (values != null) {              for (              String v : values) {                s3PrefixValues.add(bucketResource + "/" + v+ "*");              }            }          }        } else         if (!s3PrefixValues.isEmpty()) {          readOnlyBucketStatements.add(statement);          continue;        }      }      out.add(statement);    }  }  boolean skipBucketStatement=true;  String resourcePrefix=Constants.AWS_RESOURCE_PREFIX + bucketName + "/";  for (  Statement statement : out) {    Set<String> intersection=new HashSet<String>(s3PrefixValues);    intersection.retainAll(statement.resources());    if (!statement.resources().startsWith(resourcePrefix).isEmpty() && intersection.isEmpty()) {      skipBucketStatement=false;      break;    }  }  for (  Statement statement : readOnlyBucketStatements) {    Set<String> aws=statement.principal().aws();    if (skipBucketStatement && statement.resources().contains(bucketResource) && statement.effect().equals("Allow")&& aws != null && aws.contains("*") && statement.conditions() == null) {      continue;    }    out.add(statement);  }  if (out.size() == 1) {    Statement statement=out.get(0);    Set<String> aws=statement.principal().aws();    if (statement.resources().contains(bucketResource) && statement.actions().containsAll(Constants.COMMON_BUCKET_ACTIONS) && statement.effect().equals("Allow")&& aws != null && aws.contains("*") && statement.conditions() == null) {      out=new ArrayList<Statement>();    }  }  statements=out;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AllStatsTablePanelSingle(DatasetGenerator datasetGenerator,Locker locker){  super("All GC Stats");  addTable(datasetGenerator,locker);}  }
class C{  public void testLocalsAverageCorrectly(MultiInfoCalculator miCalc,int dimensions,int timeSteps) throws Exception {  miCalc.initialise(dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] data=rg.generateNormalData(timeSteps,dimensions,0,1);  miCalc.setObservations(data);  double mi=miCalc.computeAverageLocalOfObservations();  lastResult=mi;  double[] miLocal=miCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",mi);  assertEquals(mi,MatrixUtils.mean(miLocal),0.00001);}  }
class C{  public Vertex mostConscious(Vertex type,float min){  return nextMostConscious(type,(Vertex)null,min,false);}  }
class C{  public static XPath2FilterContainer newInstance(Element element,String BaseURI) throws XMLSecurityException {  return new XPath2FilterContainer(element,BaseURI);}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public Object clone(){  return new FakeJimpleLocal(getName(),getType(),realLocal,info);}  }
class C{  public QueryInvocationTargetException(Throwable cause){  super(cause);}  }
class C{  public static void refreshUser(String username){  String endpoint=null;  int attempts=0;  while (attempts < _MAX_VALIDATION_RETRIES) {    _log.debug("Refresh user, attempt {}",++attempts);    AuthSvcInternalApiClientIterator authSvcClientItr=new AuthSvcInternalApiClientIterator(_authSvcEndPointLocator,_coordinator);    try {      if (authSvcClientItr.hasNext()) {        endpoint=authSvcClientItr.peek().toString();        final ClientResponse response=authSvcClientItr.put(URI.create(_URI_REFRESH + "?username=" + URLEncoder.encode(username,"UTF-8")),null);        final int status=response.getStatus();        _log.debug("Status: {}",status);        if (status == ClientResponse.Status.OK.getStatusCode()) {          return;        } else         if (status == ClientResponse.Status.BAD_REQUEST.getStatusCode()) {          throw APIException.badRequests.principalSearchFailed(username);        } else         if (status == ClientResponse.Status.INTERNAL_SERVER_ERROR.getStatusCode()) {          ServiceErrorRestRep error=response.getEntity(ServiceErrorRestRep.class);          throw SecurityException.fatals.failedToRefreshUser(error.getDetailedMessage());        } else {          _log.error("Unexpected response code {}.",status);        }      }    } catch (    APIException e) {      throw e;    }catch (    FatalSecurityException e) {      throw e;    }catch (    Exception e) {      _log.info("Exception connecting to {}. ",endpoint,e);    }  }  throw SecurityException.retryables.requiredServiceUnvailable(ServiceLocatorInfo.AUTH_SVC.getServiceName());}  }
class C{  @Override public boolean isDefect(){  if (myDefectFound) {    return true;  }  final List<? extends SMTestProxy> children=new ArrayList<SMTestProxy>(mySuiteProxy.getChildren());  for (  SMTestProxy child : children) {    if (child.isDefect()) {      myDefectFound=true;      return true;    }  }  return false;}  }
class C{  public ICalDate(boolean hasTime){  this(new Date(),null,hasTime);}  }
class C{  public void clearDiskCaches(){  mMainBufferedDiskCache.clearAll();  mSmallImageBufferedDiskCache.clearAll();}  }
class C{  public EaseIn(float overshoot){  this.overshoot=overshoot;}  }
class C{  private void initSummaries(PreferenceGroup pg){  for (int i=0; i < pg.getPreferenceCount(); ++i) {    Preference p=pg.getPreference(i);    if (p instanceof PreferenceGroup)     initSummaries((PreferenceGroup)p); else     setSummary(p,false);    if (p instanceof PreferenceScreen)     p.setOnPreferenceClickListener(this);  }}  }
class C{  public SerializableList(final int initialCapacity){  super(initialCapacity);}  }
class C{  public final boolean isSuffices(){  return this.suffices;}  }
class C{  public int isSSL(){  return sslConnection ? 1 : 0;}  }
class C{  public EligibleException(String message){  super(message);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN}) @Path("/scan") public TaskList scanSMISProviders(){  TaskList taskList=new TaskList();  List<StorageProvider> providerList=CustomQueryUtility.getActiveStorageProvidersByInterfaceType(_dbClient,StorageProvider.InterfaceType.smis.name());  if (providerList == null || providerList.isEmpty()) {    return taskList;  }  BlockController controller=getController(BlockController.class,"vnxblock");  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new ScanJobExec(controller));  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>();  for (  StorageProvider smisProvider : providerList) {    String taskId=UUID.randomUUID().toString();    tasks.add(new AsyncTask(StorageProvider.class,smisProvider.getId(),taskId));  }  taskList=scheduler.scheduleAsyncTasks(tasks);  return taskList;}  }
class C{  public boolean verifyConsistencyGroupHasSnapshot(BlockConsistencyGroup consistencyGroup){  final URIQueryResultList cgSnapshotsResults=new URIQueryResultList();  _dbClient.queryByConstraint(getBlockSnapshotByConsistencyGroup(consistencyGroup.getId()),cgSnapshotsResults);  Iterator<BlockSnapshot> blockSnapshotIterator=_dbClient.queryIterativeObjects(BlockSnapshot.class,cgSnapshotsResults);  if (blockSnapshotIterator.hasNext()) {    return true;  }  return false;}  }
class C{  public static void fill(byte[] array,int start,int end,byte value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public NameAlreadyBoundException(String explanation){  super(explanation);}  }
class C{  public String load(boolean loadEvenIfExpired){  LOGGER.info("Cache: Trying to load " + id + "..");  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){    long time=Long.parseLong(reader.readLine());    long timePassed=(System.currentTimeMillis() / 1000) - time;    if (!loadEvenIfExpired && timePassed > expireTime) {      LOGGER.info("Cache: Did not load " + id + " (expired)");      return null;    }    StringBuilder data=new StringBuilder();    String line;    while ((line=reader.readLine()) != null) {      data.append(line);      data.append("\n");    }    return data.toString();  } catch (  IOException|NumberFormatException ex) {    LOGGER.warning("Cache: Error loading " + id + " ["+ ex+ "]");    return null;  }}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void add(String v){  if (v == null) {    addNull();  } else {    _add(textNode(v));  }}  }
class C{  public Initializer newInitializer(){  Initializer result=new Initializer(this);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.477 -0500",hash_original_method="F533043312AA12AABEB855D393677CB5",hash_generated_method="AF6C93F953B0F20CBCE3F7AEC88E7E4D") public boolean performEditorAction(int actionCode){  long eventTime=SystemClock.uptimeMillis();  sendKeyEvent(new KeyEvent(eventTime,eventTime,KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_ENTER,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE | KeyEvent.FLAG_EDITOR_ACTION));  sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(),eventTime,KeyEvent.ACTION_UP,KeyEvent.KEYCODE_ENTER,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE | KeyEvent.FLAG_EDITOR_ACTION));  return true;}  }
class C{  public void stopHardwareClock(){  if (DEBUG_SHOW_PUBLIC_CALLS && log.isDebugEnabled()) {    log.debug("stopHardwareClock");  }  issueClockStop();}  }
class C{  protected AbstractColorInterpolationRable(Filter src,Map props){  super(src,props);}  }
class C{  public Builder maxRetryCount(int maxRetryCount){  this.maxRetryCount=maxRetryCount;  return this;}  }
class C{  public PersonalityInsightsTest() throws FileNotFoundException {  profile=loadFixture(RESOURCE + "profile.json",Profile.class);  text="foo-bar-text";  contentItem=new ContentItem();  contentItem.setContent(text);}  }
class C{  private void learn(){  int listSize=learningQueue.size();  for (int i=0; i < listSize; i++) {    Instance inst=learningQueue.poll();    if (inst != null)     learner.trainOnInstance(inst);  }}  }
class C{  @Override public byte[] serialize(Object o){  try {    return this.marshal((Date)o).getBytes();  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public DoubleDataStore computeAverageDistInSet(){  WritableDoubleDataStore davg=DataStoreUtil.makeDoubleStorage(points.getDBIDs(),DataStoreFactory.HINT_HOT);  WritableIntegerDataStore nDists=DataStoreUtil.makeIntegerStorage(points.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  FiniteProgress splitp=LOG.isVerbose() ? new FiniteProgress("Processing splits for density estimation",splitsets.size(),LOG) : null;  DBIDVar v=DBIDUtil.newVar();  for (Iterator<ArrayDBIDs> it1=splitsets.iterator(); it1.hasNext(); ) {    ArrayDBIDs pinSet=it1.next();    final int len=pinSet.size();    final int indoff=len >> 1;    pinSet.assignVar(indoff,v);    V midpoint=points.get(v);    for (DBIDArrayIter it=pinSet.iter(); it.getOffset() < len; it.advance()) {      if (DBIDUtil.equal(it,v)) {        continue;      }      double dist=EuclideanDistanceFunction.STATIC.distance(points.get(it),midpoint);      ++distanceComputations;      davg.increment(v,dist);      nDists.increment(v,1);      davg.increment(it,dist);      nDists.increment(it,1);    }    LOG.incrementProcessed(splitp);  }  LOG.ensureCompleted(splitp);  for (DBIDIter it=points.getDBIDs().iter(); it.valid(); it.advance()) {    int count=nDists.intValue(it);    double val=(count == 0) ? FastOPTICS.UNDEFINED_DISTANCE : (davg.doubleValue(it) / count);    davg.put(it,val);  }  nDists.destroy();  return davg;}  }
class C{  public BigDecimal parseMediumKanjiNumeral(NumberBuffer buffer){  int i=buffer.position();  if (i >= buffer.length()) {    return null;  }  char c=buffer.charAt(i);  int power=exponents[c];  if (1 <= power && power <= 3) {    buffer.advance();    return BigDecimal.TEN.pow(power);  }  return null;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == StrictModeRelevant.class) {switch (derivedFeatureID) {case N4JSPackage.THIS_LITERAL__STRICT_MODE:      return N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void unregisterElement(Element element){  elements.remove(element);  for (  Element child : element.getChildren()) {    unregisterElement(child);  }}  }
class C{  protected Key_Impl(){  super();}  }
class C{  public static float mapCoordInSelfToDescendent(View descendant,View root,float[] coord,Matrix tmpInverseMatrix){  ArrayList<View> ancestorChain=new ArrayList<View>();  float[] pt={coord[0],coord[1]};  View v=descendant;  while (v != root) {    ancestorChain.add(v);    v=(View)v.getParent();  }  ancestorChain.add(root);  float scale=1.0f;  int count=ancestorChain.size();  tmpInverseMatrix.set(new Matrix());  for (int i=count - 1; i >= 0; i--) {    View ancestor=ancestorChain.get(i);    View next=i > 0 ? ancestorChain.get(i - 1) : null;    pt[0]+=ancestor.getScrollX();    pt[1]+=ancestor.getScrollY();    if (next != null) {      pt[0]-=next.getLeft();      pt[1]-=next.getTop();      next.getMatrix().invert(tmpInverseMatrix);      tmpInverseMatrix.mapPoints(pt);      scale*=next.getScaleX();    }  }  coord[0]=pt[0];  coord[1]=pt[1];  return scale;}  }
class C{  public ForceDirectedLayout(String graph){  this(graph,false,false);}  }
class C{  private static boolean isBinaryComparisonOrInstanceOfOperator(Kind opKind){switch (opKind) {case EQUAL_TO:case NOT_EQUAL_TO:case LESS_THAN:case LESS_THAN_EQUAL:case GREATER_THAN:case GREATER_THAN_EQUAL:case INSTANCE_OF:    return true;default :}return false;}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  core.init(forEncryption,param);  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();    random=rParam.getRandom();  } else {    key=(RSAKeyParameters)param;    random=new SecureRandom();  }}  }
class C{  private RPAction makeAction(){  RPAction action=new RPAction();  action.put("type","trade");  return action;}  }
class C{  public void testLast() throws Exception {  StorageAgent agent=this.configureStorageService("testLast",3);  assertEquals("Initial backups should be 0",0,agent.list().length);  for (int i=0; i < 20; i++) {    BackupSpecification backupSpecStore=createBackup("testLast",100);    URI uri=agent.store(backupSpecStore);    URI lastUri=agent.last();    assertEquals("Last backup should match",uri,lastUri);  }  agent.release();}  }
class C{  public ImageDownloadTask(@Nullable ImageView imageView,@Nullable String savePath){  this.imageView=imageView;  this.savePath=savePath;}  }
class C{  private static long startOffset(int level,long slice){  return slice << level;}  }
class C{  private void closeOk(){  try {    m_start=new CAddress(new BigInteger(m_startField.getText(),16));  } catch (  final NumberFormatException e) {    CMessageBox.showError(CMemoryRangeDialog.this,"You have entered an invalid start address.");    return;  }  try {    m_bytes=new CAddress(new BigInteger(m_endField.getText(),16));  } catch (  final NumberFormatException e) {    CMessageBox.showError(CMemoryRangeDialog.this,"You have entered an invalid end address.");    return;  }  if (m_bytes.toBigInteger().equals(BigInteger.ZERO)) {    CMessageBox.showError(CMemoryRangeDialog.this,"You have entered an invalid memory range.");    return;  }  dispose();}  }
class C{  protected Pair<Class<? extends Page>,PageParameters> determineSuccessTarget(boolean isCheckout,final Customer customer){  final Class<? extends Page> successfulPage;  final PageParameters parameters=new PageParameters();  if (isCheckout) {    if (customer.isGuest()) {      parameters.set("guest","1");    }    successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/checkout").get();  } else {    successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/profile").get();  }  return new Pair<Class<? extends Page>,PageParameters>(successfulPage,parameters);}  }
class C{  public LocalDateTime parseDate(String dateStr){  return parseDate(dateStr,true);}  }
class C{  protected Iterator createEntrySetIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new EntrySetIterator(this);}  }
class C{  public static void isNotInstanceOf(String argumentName,Object argumentObject,Class<?>... targetClasses){  notNull(argumentName,argumentObject);  for (int i=0; i < targetClasses.length; ) {    Class<?> targetClass=targetClasses[i++];    if (targetClass.isInstance(argumentObject)) {      throw new IllegalArgumentException(argumentName + " cannot be an instance of " + targetClass.getName());    }  }}  }
class C{  public static synchronized void recycle(GeneralPath p){  if (pathPool().size() >= MAX_POOL_SIZE || p == null)   return;  pathPool.add(p);}  }
class C{  public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset dataset,PlotRenderingInfo info){  ValueAxis axis=plot.getDomainAxis();  double x1=axis.getLowerBound();  double x2=x1 + getMaxCandleWidthInMilliseconds();  RectangleEdge edge=plot.getDomainAxisEdge();  double xx1=axis.valueToJava2D(x1,dataArea,edge);  double xx2=axis.valueToJava2D(x2,dataArea,edge);  maxCandleWidth=Math.abs(xx2 - xx1);  return new XYItemRendererState(info);}  }
class C{  public static void sent(Channel channel,Object message){  ChannelBuffer buf=(ChannelBuffer)message;  int id=TBaseTools.getTMessageId(buf);  DefaultFuture future=FUTURES.get(id);  if (future != null) {    future.doSent();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.324 -0500",hash_original_method="887F094692FA72239FA373420B7D2404",hash_generated_method="DF7223F1354FFC21F5CBD418A7364F9B") public void drawPosText(String text,float[] pos,Paint paint){  if (text.length() * 2 > pos.length) {    throw new ArrayIndexOutOfBoundsException();  }  native_drawPosText(mNativeCanvas,text,pos,paint.mNativePaint);}  }
class C{  public SVGCSSEngine(Document doc,ParsedURL uri,ExtendedParser p,ValueManager[] vms,ShorthandManager[] sms,CSSContext ctx){  super(doc,uri,p,mergeArrays(SVG_VALUE_MANAGERS,vms),mergeArrays(SVG_SHORTHAND_MANAGERS,sms),null,null,"style",null,"class",true,null,ctx);  lineHeightIndex=fontSizeIndex;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'USER' ("+ "'ID' INTEGER PRIMARY KEY ,"+ "'NAME' TEXT,"+ "'PASSWORD' TEXT,"+ "'NICKNAME' TEXT);");  db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ID ON USER"+ " (ID);");}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String index,String alias,QueryBuilder filterBuilder){  request.addAlias(alias,filterBuilder,index);  return this;}  }
class C{  protected double rootMeanSquaredError(){  return m_rootMeanSquaredError;}  }
class C{  void recomposeAttributeSets(ElemAttributeSet attrSet){  ArrayList attrSetList=(ArrayList)m_attrSets.get(attrSet.getName());  if (null == attrSetList) {    attrSetList=new ArrayList();    m_attrSets.put(attrSet.getName(),attrSetList);  }  attrSetList.add(attrSet);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new PaletteTextFieldUI();}  }
class C{  public void reportBenefitRatio(int compiler1,int compiler2,double rate){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("Benefit Ratio from " + CompilerDNA.getCompilerString(compiler1) + " compiler to "+ CompilerDNA.getCompilerString(compiler2)+ " compiler: "+ rate);  }}  }
class C{  public String globalInfo(){  return "Converts all nominal attributes into binary numeric attributes. An " + "attribute with k values is transformed into k binary attributes if " + "the class is nominal (using the one-attribute-per-value approach). "+ "Binary attributes are left binary, if option '-A' is not given."+ "If the class is numeric, k - 1 new binary attributes are generated "+ "in the manner described in \"Classification and Regression "+ "Trees\" by Breiman et al. (i.e. taking the average class value associated "+ "with each attribute value into account)\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void addBinding(String name,Value value){  addBinding(new SimpleBinding(name,value));}  }
class C{  private CommitmentTypeQualifier(ASN1Sequence as){  commitmentTypeIdentifier=(ASN1ObjectIdentifier)as.getObjectAt(0);  if (as.size() > 1) {    qualifier=as.getObjectAt(1);  }}  }
class C{  private static ArrayList<ContainerVm> createVmList(int brokerId,int containerVmsNumber){  ArrayList<ContainerVm> containerVms=new ArrayList<ContainerVm>();  for (int i=0; i < containerVmsNumber; ++i) {    ArrayList<ContainerPe> peList=new ArrayList<ContainerPe>();    int vmType=i / (int)Math.ceil((double)containerVmsNumber / 4.0D);    for (int j=0; j < ConstantsExamples.VM_PES[vmType]; ++j) {      peList.add(new ContainerPe(j,new CotainerPeProvisionerSimple((double)ConstantsExamples.VM_MIPS[vmType])));    }    containerVms.add(new PowerContainerVm(IDs.pollId(ContainerVm.class),brokerId,(double)ConstantsExamples.VM_MIPS[vmType],(float)ConstantsExamples.VM_RAM[vmType],ConstantsExamples.VM_BW,ConstantsExamples.VM_SIZE,"Xen",new ContainerSchedulerTimeSharedOverSubscription(peList),new ContainerRamProvisionerSimple(ConstantsExamples.VM_RAM[vmType]),new ContainerBwProvisionerSimple(ConstantsExamples.VM_BW),peList,ConstantsExamples.SCHEDULING_INTERVAL));  }  return containerVms;}  }
class C{  public DefaultLmlData(){  this(InterfaceSkin.get());}  }
class C{  void c1b1a1__c1b1a1c1(){  mv.visitInsn(DUP_X2);  mv.visitInsn(POP);  mv.visitInsn(DUP_X2);  mv.visitInsn(POP);  mv.visitInsn(DUP_X2);}  }
class C{  @Override public void initContext(Object context) throws Exception {}  }
class C{  public T caseIntLiteral(IntLiteral object){  return null;}  }
class C{  public Task<StorageProviderRestRep> create(StorageProviderCreateParam input){  return postTask(input,baseUrl);}  }
class C{  String[] primedNodeText(){  if (!this.isPrimed) {    return this.nodeText;  }  boolean needsParens=(!this.isSubexpressionName) && primingNeedsParens(this.semanticNode);  String[] result=this.nodeText.clone();  if (needsParens) {    result=prependToStringArray(result,"(");    result[result.length - 1]=StringHelper.trimEnd(result[result.length - 1]) + ")'";  } else {    result[result.length - 1]=StringHelper.trimEnd(result[result.length - 1]) + "'";  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Sage.getBoolean("videoframe/force_live_playback_on_currently_airing_programs",Sage.EMBEDDED));}  }
class C{  private void fillDeliveryDetail(final CustomerOrderDelivery customerOrderDelivery,final CustomerOrderDet orderDet){  final CustomerOrderDeliveryDet deliveryDet=entityFactory.getByIface(CustomerOrderDeliveryDet.class);  deliveryDet.setDelivery(customerOrderDelivery);  customerOrderDelivery.getDetail().add(deliveryDet);  deliveryDet.setQty(orderDet.getQty());  deliveryDet.setProductSkuCode(orderDet.getProductSkuCode());  deliveryDet.setProductName(orderDet.getProductName());  deliveryDet.setPrice(orderDet.getPrice());  deliveryDet.setSalePrice(orderDet.getSalePrice());  deliveryDet.setListPrice(orderDet.getListPrice());  deliveryDet.setGift(orderDet.isGift());  deliveryDet.setPromoApplied(orderDet.isPromoApplied());  deliveryDet.setFixedPrice(orderDet.isFixedPrice());  deliveryDet.setAppliedPromo(orderDet.getAppliedPromo());  deliveryDet.setNetPrice(orderDet.getNetPrice());  deliveryDet.setGrossPrice(orderDet.getGrossPrice());  deliveryDet.setTaxCode(orderDet.getTaxCode());  deliveryDet.setTaxRate(orderDet.getTaxRate());  deliveryDet.setTaxExclusiveOfPrice(orderDet.isTaxExclusiveOfPrice());}  }
class C{  protected static Object callMethod(Object obj,MethodReference mr,Object[] args,TypeReference expectedReturnType,boolean nonVirtual) throws InvocationTargetException {  RVMMethod targetMethod=mr.resolve();  TypeReference returnType=targetMethod.getReturnType();  if (JNIFunctions.traceJNI) {    VM.sysWriteln("JNI CallXXXMethod: " + mr);  }  if (expectedReturnType == null) {    if (!returnType.isReferenceType()) {      throw new IllegalArgumentException("Wrong return type for method (" + targetMethod + "): expected reference type instead of "+ returnType);    }  } else {    if (!returnType.definitelySame(expectedReturnType)) {      throw new IllegalArgumentException("Wrong return type for method (" + targetMethod + "): expected "+ expectedReturnType+ " instead of "+ returnType);    }  }  return Reflection.invoke(targetMethod,null,obj,args,nonVirtual);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasRelationship(Primitive type,Vertex target){  return hasRelationship(this.network.createVertex(type),target);}  }
class C{  public final void removeConstraint(@NonNull final Constraint<CharSequence> constraint){  ensureNotNull(constraint,"The constraint may not be null");  constraints.remove(constraint);  verifyPasswordStrength();}  }
class C{  public void changeWorkingDirectory(String dir) throws IOException {  send("CWD " + dir);  readCode(250);}  }
class C{  public static void ICONST_M1(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_M1();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public void shutdownImmediately(){  close();}  }
class C{  public boolean isUseCompression(){  return this.useCompression;}  }
class C{  protected void onLooperPrepared(){}  }
class C{  public <T extends IOObject>T remove(Class<T> cls) throws MissingIOObjectException {  return getInput(cls,0,true);}  }
class C{  private Element writeAttributeMetaData(AttributeRole attributeRole,int sourcecol,Document document,boolean sparse){  String tag="attribute";  if (attributeRole.isSpecial()) {    tag=attributeRole.getSpecialName();  }  Attribute attribute=attributeRole.getAttribute();  return writeAttributeMetaData(tag,attribute,sourcecol,document,sparse);}  }
class C{  private void doFailTask(Class<? extends DataObject> clazz,URI id,String opId,ServiceCoded serviceCoded){  List<URI> ids=new ArrayList<URI>();  ids.add(id);  doFailTask(clazz,ids,opId,serviceCoded);}  }
class C{  public static int[] cs_maxtrans(Dcs A,int seed){  int i, j, k, n, m, p, n2=0, m2=0, Ap[], jimatch[], w[], cheap[], js[], is[], ps[], Ai[], Cp[], jmatch[], imatch[], q[];  Dcs C;  if (!Dcs_util.CS_CSC(A))   return (null);  n=A.n;  m=A.m;  Ap=A.p;  Ai=A.i;  w=jimatch=new int[m + n];  for (k=0, j=0; j < n; j++) {    if (Ap[j] < Ap[j + 1])     n2++;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      w[Ai[p]]=1;      if (j == Ai[p])       k++;    }  }  if (k == Math.min(m,n)) {    jmatch=jimatch;    imatch=jimatch;    int imatch_offset=m;    for (i=0; i < k; i++)     jmatch[i]=i;    for (; i < m; i++)     jmatch[i]=-1;    for (j=0; j < k; j++)     imatch[imatch_offset + j]=j;    for (; j < n; j++)     imatch[imatch_offset + j]=-1;    return jimatch;  }  for (i=0; i < m; i++)   m2+=w[i];  C=(m2 < n2) ? Dcs_transpose.cs_transpose(A,false) : A;  if (C == null)   return null;  n=C.n;  m=C.m;  Cp=C.p;  jmatch=jimatch;  imatch=jimatch;  int jmatch_offset=0;  int imatch_offset=0;  if (m2 < n2) {    jmatch_offset=n;  } else {    imatch_offset=m;  }  w=new int[5 * n];  cheap=w;  int cheap_offset=n;  js=w;  int js_offset=2 * n;  is=w;  int is_offset=3 * n;  ps=w;  int ps_offset=4 * n;  for (j=0; j < n; j++)   cheap[cheap_offset + j]=Cp[j];  for (j=0; j < n; j++)   w[j]=-1;  for (i=0; i < m; i++)   jmatch[jmatch_offset + i]=-1;  q=Dcs_randperm.cs_randperm(n,seed);  for (k=0; k < n; k++) {    cs_augment(q != null ? q[k] : k,C,jmatch,jmatch_offset,cheap,cheap_offset,w,0,js,js_offset,is,is_offset,ps,ps_offset);  }  q=null;  for (j=0; j < n; j++)   imatch[imatch_offset + j]=-1;  for (i=0; i < m; i++)   if (jmatch[jmatch_offset + i] >= 0)   imatch[imatch_offset + jmatch[jmatch_offset + i]]=i;  return jimatch;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.855 -0500",hash_original_method="A83DC80DE6B8698A045EDE141AC37084",hash_generated_method="A0816D2AFEC14D094AF4E3ECDC02456C") private OpcodeInfo(){}  }
class C{  public LongBitSet(long[] storedBits,long numBits){  this.numWords=bits2words(numBits);  if (numWords > storedBits.length) {    throw new IllegalArgumentException("The given long array is too small  to hold " + numBits + " bits");  }  this.numBits=numBits;  this.bits=storedBits;  assert verifyGhostBitsClear();}  }
class C{  public static boolean isFirstLetterSeparatorChar(int currentChar){switch (Character.getType(currentChar)) {case Character.START_PUNCTUATION:case Character.END_PUNCTUATION:case Character.INITIAL_QUOTE_PUNCTUATION:case Character.FINAL_QUOTE_PUNCTUATION:case Character.OTHER_PUNCTUATION:case Character.SPACE_SEPARATOR:    return true;default :  return false;}}  }
class C{  public MultiInputStream(Iterator<? extends ByteSource> it) throws IOException {  this.it=checkNotNull(it);  advance();}  }
class C{  private int mul(int x,int y){  if (x == 0) {    x=(BASE - y);  } else   if (y == 0) {    x=(BASE - x);  } else {    int p=x * y;    y=p & MASK;    x=p >>> 16;    x=y - x + ((y < x) ? 1 : 0);  }  return x & MASK;}  }
class C{  @Override public boolean isPrepared(){  return env.getCSP() != null && (!actions.isEmpty() || env.getAssignment() == null);}  }
class C{  @Override public void removeAttribute(String key){  channel.removeAttribute(key);}  }
class C{  @SuppressWarnings("resource") @Test public void testRenamingMethodAccessedViaSubclass() throws Exception {  final IProject project=createJSProject("testRenamingMethodAccessedViaSubclass");  IFolder folder=configureProjectWithXtext(project);  IFolder moduleFolder=createFolder(folder,TransitiveInheritMemberTestFiles.moduleFolder());  IFile fileC=createTestFile(moduleFolder,"C",TransitiveInheritMemberTestFiles.C());  IFile fileB=createTestFile(moduleFolder,"B",TransitiveInheritMemberTestFiles.B());  IFile fileA=createTestFile(moduleFolder,"A",TransitiveInheritMemberTestFiles.A());  waitForAutoBuild();  assertMarkers("File A should have no errors",fileA,0);  assertMarkers("File B should have no errors",fileB,0);  assertMarkers("File C should have no errors",fileC,0);  fileC.setContents(new StringInputStream(TransitiveInheritMemberTestFiles.CChanged().toString()),true,true,monitor());  waitForAutoBuild();  assertMarkers("File A with other missing method name in chain should have errors",fileA,1);  assertMarkers("File B should have no errors",fileB,0);  assertMarkers("File C should have no errors",fileC,0);  fileC.setContents(new StringInputStream(TransitiveInheritMemberTestFiles.C().toString()),true,true,monitor());  waitForAutoBuild();  assertMarkers("File A with old method name in chain should have no errors",fileA,0);}  }
class C{  public boolean isAccepted(){  return accepted;}  }
class C{  public void appendAssignment(ArrayReference array,int index,VariableReference var){  ArrayIndex arrayIndex=new ArrayIndex(tc,array,index);  AssignmentStatement stmt=new AssignmentStatement(tc,arrayIndex,var);  tc.addStatement(stmt);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static <T>StoredValue<T> create(){  return new StoredValue<>();}  }
class C{  public static Bitmap createBitmapFromView(View view){  if (null == view) {    return null;  }  Bitmap bm=Bitmap.createBitmap(view.getWidth(),view.getHeight(),Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bm);  view.draw(canvas);  return bm;}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  private void init(){  try {    this.vimPort=this.connection.getVimPort();    this.serviceContent=this.connection.getServiceContent();  } catch (  Throwable cause) {    throw new HelperException(cause);  }}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  protected void drawArc(Graphics2D g2,Rectangle2D area,double minValue,double maxValue,Paint paint,Stroke stroke){  double startAngle=valueToAngle(maxValue);  double endAngle=valueToAngle(minValue);  double extent=endAngle - startAngle;  double x=area.getX();  double y=area.getY();  double w=area.getWidth();  double h=area.getHeight();  g2.setPaint(paint);  g2.setStroke(stroke);  if (paint != null && stroke != null) {    Arc2D.Double arc=new Arc2D.Double(x,y,w,h,startAngle,extent,Arc2D.OPEN);    g2.setPaint(paint);    g2.setStroke(stroke);    g2.draw(arc);  }}  }
class C{  public void store(String sequence,Map<String,SignatureLibraryRelease> analysisJobMap,String... crossReferences){  if (sequence != null && sequence.length() > 0) {    Protein protein=new Protein(sequence);    if (crossReferences != null) {      for (      String crossReference : crossReferences) {        ProteinXref xref=XrefParser.getProteinXref(crossReference);        protein.addCrossReference(xref);      }    }    proteinsAwaitingPrecalcLookup.add(protein);    if (proteinsAwaitingPrecalcLookup.size() > proteinPrecalcLookupBatchSize) {      lookupProteins(analysisJobMap);    }  }}  }
class C{  @Before public void loadCerts() throws Exception {  GlobalConf.reload(new TestGlobalConf());  if (issuer == null) {    issuer=TestCertUtil.getCertChainCert("root_ca.p12");    assertNotNull(issuer);    signer=issuer;    signerKey=TestCertUtil.getCertChainKey("root_ca.p12");    assertNotNull(signerKey);  }  if (subject == null) {    subject=TestCertUtil.getCertChainCert("user_0.p12");    assertNotNull(subject);  }}  }
class C{  public CursorManager(BridgeContext ctx){  this.ctx=ctx;}  }
class C{  BucketPage lastChild(){  assert isOverflowDirectory();  for (int i=data.getChildCount() - 1; i >= 0; i--) {    final BucketPage aChild=(BucketPage)deref(i);    if (aChild != null) {      return aChild;    }    if (data.getChildAddr(i) != NULL)     return (BucketPage)getChild(i);  }  throw new AssertionError();}  }
class C{  public ServerInfo(String host){  this(host,25565);}  }
class C{  public void notifyFailedExecutionOf(Failure failure){  testsExecutionStatus.executionFailed(failure);  testTreeViewer.setInput(this.dataRoot);}  }
class C{  public static void main(String... args) throws Exception {  OutputCatcher catcher=OutputCatcher.start();  run(args);  catcher.stop();  catcher.writeTo("Test Output","docs/html/testOutput.html");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override protected void processAppRun() throws SQLException {  conn.setAutoCommit(false);  traceOperation("setAutoCommit false");  int rows=10000 + value;  PreparedStatement prepInsert=conn.prepareStatement("INSERT INTO TEST(NAME, DATA) VALUES('Hello World', ?)");  PreparedStatement prepUpdate=conn.prepareStatement("UPDATE TEST SET NAME = 'Hallo Welt', DATA = ? WHERE ID = ?");  for (int i=0; i < rows; i++) {    Statement stat=conn.createStatement();    if ((operations & OP_INSERT) != 0) {      if ((flags & FLAG_LOBS) != 0) {        String s=getRandomString(random.nextInt(200));        prepInsert.setString(1,s);        traceOperation("insert " + s);        prepInsert.execute();      } else {        execute(stat,"INSERT INTO TEST(NAME) " + "VALUES('Hello World')");      }      ResultSet rs=stat.getGeneratedKeys();      rs.next();      int key=rs.getInt(1);      traceOperation("inserted key: " + key);      rowCount++;    }    if ((operations & OP_UPDATE) != 0) {      if ((flags & FLAG_LOBS) != 0) {        String s=getRandomString(random.nextInt(200));        prepUpdate.setString(1,s);        int x=random.nextInt(rowCount + 1);        prepUpdate.setInt(2,x);        traceOperation("update " + s + " "+ x);        prepUpdate.execute();      } else {        int x=random.nextInt(rowCount + 1);        execute(stat,"UPDATE TEST SET VALUE = 'Hallo Welt' " + "WHERE ID = " + x);      }    }    if ((operations & OP_DELETE) != 0) {      int x=random.nextInt(rowCount + 1);      traceOperation("deleting " + x);      int uc=stat.executeUpdate("DELETE FROM TEST " + "WHERE ID = " + x);      traceOperation("updated: " + uc);      rowCount-=uc;    }    traceOperation("rowCount " + rowCount);    traceOperation("rows now: " + rowCount,null);    if (rowCount % 2 == 0) {      traceOperation("commit " + rowCount);      conn.commit();      traceOperation("committed: " + rowCount,null);    }    if ((flags & FLAG_NO_DELAY) != 0) {      if (random.nextInt(10) == 0 && (rowCount % 2 == 0)) {        execute(stat,"CHECKPOINT");      }    }  }  traceOperation("rollback");  conn.rollback();}  }
class C{  public DelegatingResourceLoader(Map<String,ResourceLoader> loaders,File cacheDirectory){  this.loaders=CollectionUtils.isEmpty(loaders) ? Collections.<String,ResourceLoader>emptyMap() : Collections.unmodifiableMap(loaders);  this.cacheDirectory=initCacheDirectory(cacheDirectory);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void renderEdge(){  glDisable(GL_DEPTH_TEST);  if (outlineOnly) {    glUseProgram(this.outlineProgram);    glUniform1i(outlineShowEdgeUniform,showEdge ? 1 : 0);  } else {    glUseProgram(this.edgeProgram);    glUniform1i(edgeShowEdgeUniform,showEdge ? 1 : 0);  }  glClear(GL_COLOR_BUFFER_BIT);  glUniform1f(invWidthUniform,1.0f / width);  glUniform1f(invHeightUniform,1.0f / height);  glUniform1i(normalTexUniform,0);  glBindTexture(GL_TEXTURE_2D,tex);  glBindBuffer(GL_ARRAY_BUFFER,this.quadVbo);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glDrawArrays(GL_TRIANGLES,0,6);  glDisableVertexAttribArray(0);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindTexture(GL_TEXTURE_2D,0);  glUseProgram(0);}  }
class C{  public boolean isHasSeconds(){  return hasSeconds;}  }
class C{  public static void startActivity(Context context,Intent intent,boolean isSingleChat,String chatId){  if (isSingleChat) {    intent.setClass(context,SendMultiFileSingleChat.class);  } else {    intent.setClass(context,SendMultiFileGroupChat.class);  }  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(EXTRA_CHAT_ID,chatId);  context.startActivity(intent);}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write to switch {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeOFMessageToSwitch(DatapathId dpid,OFMessage message){  IOFSwitch ofswitch=switchService.getSwitch(dpid);  if (ofswitch != null) {    if (log.isDebugEnabled()) {      log.debug("Sending 1 new entries to {}",dpid.toString());    }    ofswitch.write(message);    ofswitch.flush();  }}  }
class C{  public void uncaughtException(Thread t,Throwable e){  if (parent != null) {    parent.uncaughtException(t,e);  } else   if (!(e instanceof ThreadDeath)) {    e.printStackTrace(System.err);  }}  }
class C{  public synchronized static KeyTab create(String name) throws IOException, RealmException {  try (KeyTabOutputStream kos=new KeyTabOutputStream(new FileOutputStream(name))){    kos.writeVersion(KRB5_KT_VNO);  }   return new KeyTab(name);}  }
class C{  int[] toIntArray(){  int[] result=new int[intLen];  for (int i=0; i < intLen; i++)   result[i]=value[offset + i];  return result;}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") public void testCustomFactory() throws Exception {  assert START_CNT.get() == 1;  assert STOP_CNT.get() == 0;  primary.mkdirs(IGFS_PATH_DUAL);  assert primary.exists(IGFS_PATH_DUAL);  assert secondary.exists(IGFS_PATH_DUAL);  FileSystem fs=FileSystem.get(URI.create("igfs://primary:primary@127.0.0.1:10500/"),baseConfiguration());  assert START_CNT.get() == 2;  assert STOP_CNT.get() == 0;  assert fs.exists(PATH_DUAL);  assert fs.delete(PATH_DUAL,true);  assert !primary.exists(IGFS_PATH_DUAL);  assert !secondary.exists(IGFS_PATH_DUAL);  assert !fs.exists(PATH_DUAL);  assert fs.mkdirs(PATH_DUAL);  assert primary.exists(IGFS_PATH_DUAL);  assert secondary.exists(IGFS_PATH_DUAL);  assert fs.exists(PATH_DUAL);  assert fs.mkdirs(PATH_PROXY);  assert secondary.exists(IGFS_PATH_PROXY);  assert fs.exists(PATH_PROXY);  fs.close();  assert START_CNT.get() == 2;  assert STOP_CNT.get() == 1;  G.stop(primary.context().kernalContext().grid().name(),true);  assert START_CNT.get() == 2;  assert STOP_CNT.get() == 2;}  }
class C{  public PolynomialApproximation(double[] b){  this.b=b;}  }
class C{  public void updateExecutionStatus(Long stateMachineId,Long taskId,Status status,long retryCount,long currentRetryCount,String errorMessage){  this.statesDAO.updateStatus(taskId,stateMachineId,status);  this.auditDAO.create(new AuditRecord(stateMachineId,taskId,currentRetryCount,status,null,errorMessage));  if (status.equals(Status.completed) && retryCount > 0) {    this.redriverRegistry.deRegisterTask(taskId);  }}  }
class C{  protected float sloppyFreq(int distance){  return 1.0f / (distance + 1);}  }
class C{  private void checkSchemaHasFullDbName(PojoDescriptor type){  assertNotNull("The DB schema should have a non-null fullDbName",type.fullDbName());}  }
class C{  public CqlMigrationExecutor(Resource cqlScriptResource,String encoding){  this.cqlScriptResource=cqlScriptResource;  this.encoding=encoding;}  }
class C{  private void processFontWord(StringTokenizer st,OMText omTxt){  st.nextToken();  String fontName=st.nextToken();  int style=Integer.parseInt(st.nextToken());  Integer.parseInt(st.nextToken());  Color foreColor=convertColor(Integer.parseInt(st.nextToken()));  int fontStyle=Font.PLAIN;switch (style) {case 0:    fontStyle=Font.PLAIN;  break;case 1:fontStyle=Font.BOLD;break;case 2:fontStyle=Font.ITALIC;break;case 3:fontStyle=Font.BOLD & Font.ITALIC;break;}omTxt.setFillPaint(foreColor);omTxt.setFont(new Font(fontName.substring(1,fontName.length() - 1),fontStyle,10));}  }
class C{  public static double asinInRange(double value){  if (value <= -1) {    return -Math.PI / 2;  } else   if (value >= 1) {    return Math.PI / 2;  } else {    return FastMath.asin(value);  }}  }
class C{  public boolean shouldLearn(Vertex input,Vertex speaker){  if (this.allowLearning == Boolean.TRUE) {    return true;  } else   if (this.allowLearning == Boolean.FALSE) {    return false;  }  boolean isAdmin=false;  boolean isAnonymous=true;  if (speaker != null) {    isAdmin=speaker.hasRelationship(Primitive.ASSOCIATED,Primitive.ADMINISTRATOR);    isAnonymous=speaker.hasRelationship(Primitive.ASSOCIATED,Primitive.ANONYMOUS);  }  if (this.learningMode == LearningMode.Disabled) {    return false;  } else   if (!isAdmin && (this.learningMode == LearningMode.Administrators)) {    if (speaker.is(Primitive.SELF)) {      return true;    }    return false;  } else   if (isAnonymous && (this.learningMode == LearningMode.Users)) {    return false;  }  return true;}  }
class C{  public void clear() throws Exception {  super.clear();  m_Properties.addAllowed(weka.classifiers.Classifier.class,"debug");  m_Properties.addAllowed(weka.classifiers.Classifier.class,"options");}  }
class C{  public DCCppMessage(DCCppReply message){  super(message.getNumDataElements());  setBinary(false);  setRetries(_nRetries);  setTimeout(DCCppMessageTimeout);  for (int i=0; i < message.getNumDataElements(); i++) {    setElement(i,message.getElement(i));  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares - (sum * sum) / n) / n;            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            outputFile.setValue(row,col,stdDev);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void scaleComponent(final FormObject formObject,final float scale,final int rotate,final Component curComp,final boolean redraw,int indent,final boolean isPrinting){  if (curComp == null || formObject.getPageNumber() == -1) {    return;  }  final int curPage=formObject.getPageNumber();  if (layers != null) {    final String layerName=formObject.getLayerName();    if (layerName != null && layers.isLayerName(layerName)) {      final boolean isVisible=layers.isVisible(layerName);      curComp.setVisible(isVisible);    }  }  final int[] bounds;  if (formObject.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Popup && !isPrinting) {    bounds=cropComponent(formObject,scale,rotate,redraw,true);  } else {    bounds=cropComponent(formObject,scale,rotate,redraw,false);  }  final Font resetFont=curComp.getFont();  if (resetFont != null) {    if (formObject.getParameterConstant(PdfDictionary.Subtype) != PdfDictionary.Popup) {      recalcFontSize(scale,rotate,formObject,curComp);    } else {      if (isPrinting) {        curComp.setFont(curComp.getFont().deriveFont(formObject.getFontSize() * (72.0f / 96.0f)));      } else {        curComp.setFont(curComp.getFont().deriveFont(formObject.getFontSize()));      }    }  }  if ((curComp instanceof JComponent && ((JComponent)curComp).getBorder() != null) && (formObject != null)) {    ((JComponent)curComp).setBorder(generateBorderfromForm(formObject,scale));  }  if (xReached != null) {    bounds[0]+=xReached[curPage];    bounds[1]+=yReached[curPage];  }  final int pageWidth;  if ((pageData.getRotation(curPage) + rotate) % 180 == 90) {    pageWidth=pageData.getCropBoxHeight(curPage);  } else {    pageWidth=pageData.getCropBoxWidth(curPage);  }  if (displayView == Display.CONTINUOUS) {    final double newIndent;    if (rotate == 0 || rotate == 180) {      newIndent=(widestPageNR - (pageWidth)) / 2;    } else {      newIndent=(widestPageR - (pageWidth)) / 2;    }    indent=(int)(indent + (newIndent * scale));  }  final int totalOffsetX=userX + indent + insetW;  final int totalOffsetY=userY + insetH;  final Rectangle boundRect=new Rectangle(totalOffsetX + bounds[0],totalOffsetY + bounds[1],bounds[2],bounds[3]);  curComp.setBounds(boundRect);  if (curComp instanceof AbstractButton) {    final AbstractButton but=((AbstractButton)curComp);    Icon curIcon=but.getIcon();    boolean displaySingle=false;    if (displayView == Display.SINGLE_PAGE || displayView == Display.NODISPLAY) {      displaySingle=true;    }    if (curIcon instanceof FixImageIcon) {      ((CustomImageIcon)curIcon).setAttributes(curComp.getWidth(),curComp.getHeight(),rotate,displaySingle);    } else     if (curIcon instanceof ReadOnlyTextIcon) {      ((CustomImageIcon)curIcon).setAttributes(curComp.getWidth(),curComp.getHeight(),rotate,displaySingle);    }    curIcon=but.getPressedIcon();    if (curIcon instanceof FixImageIcon) {      ((CustomImageIcon)curIcon).setAttributes(curComp.getWidth(),curComp.getHeight(),rotate,displaySingle);    }    curIcon=but.getSelectedIcon();    if (curIcon instanceof FixImageIcon) {      ((CustomImageIcon)curIcon).setAttributes(curComp.getWidth(),curComp.getHeight(),rotate,displaySingle);    }    curIcon=but.getRolloverIcon();    if (curIcon instanceof FixImageIcon) {      ((CustomImageIcon)curIcon).setAttributes(curComp.getWidth(),curComp.getHeight(),rotate,displaySingle);    }    curIcon=but.getRolloverSelectedIcon();    if (curIcon instanceof FixImageIcon) {      ((CustomImageIcon)curIcon).setAttributes(curComp.getWidth(),curComp.getHeight(),rotate,displaySingle);    }  }}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}labels[label].line=readUnsignedShort(v + 12);v+=4;}}} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,labels,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public void addFirst(String seq){  queue=seq + queue.substring(pos);  pos=0;}  }
class C{  private void ensureCellIsVisible(int row,int col){  Rectangle cellRect=getCellRect(row,col,false);  if (cellRect != null) {    scrollRectToVisible(cellRect);  }}  }
class C{  public void appendToNalUnit(byte[] data,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (nalData.length < nalLength + readLength) {    nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2);  }  System.arraycopy(data,offset,nalData,nalLength,readLength);  nalLength+=readLength;}  }
class C{  public void create(View view){  InstanceConfig instance=new InstanceConfig();  saveProperties(instance);  EditText text=(EditText)findViewById(R.id.templateText);  instance.template=text.getText().toString().trim();  CheckBox checkbox=(CheckBox)findViewById(R.id.forkingCheckBox);  instance.allowForking=checkbox.isChecked();  HttpAction action=new HttpCreateAction(this,instance);  action.execute();}  }
class C{  public static void write(String s){  add(s);}  }
class C{  private static ORB initAppletORB(Object applet,Properties orbProp){  try {    Class<?> appletClass=Class.forName("java.applet.Applet",true,null);    if (!appletClass.isInstance(applet)) {      throw new ClassCastException(applet.getClass().getName());    }    Method method=ORB.class.getMethod("init",appletClass,Properties.class);    return (ORB)method.invoke(null,applet,orbProp);  } catch (  ClassNotFoundException e) {    throw new ClassCastException(applet.getClass().getName());  }catch (  NoSuchMethodException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    Throwable cause=e.getCause();    if (cause instanceof RuntimeException) {      throw (RuntimeException)cause;    } else     if (cause instanceof Error) {      throw (Error)cause;    }    throw new AssertionError(e);  }catch (  IllegalAccessException iae) {    throw new AssertionError(iae);  }}  }
class C{  public void testAuditScenario(){  System.out.println("auditScenario");  String scenarioName="MyScenario";  String scenario="";  AuditServiceImpl instance=initialiseAuditService();  Audit auditCreateByAuditCommand=EasyMock.createMock(Audit.class);  AuditCommand mockAuditCommand=EasyMock.createMock(AuditCommand.class);  EasyMock.expect(mockAuditCommand.getAudit()).andReturn(auditCreateByAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommand);  AuditCommandFactory mockAuditCommandFactory=EasyMock.createMock(AuditCommandFactory.class);  EasyMock.expect(mockAuditCommandFactory.create(scenarioName,scenario,null)).andReturn(mockAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommandFactory);  instance.setAuditCommandFactory(mockAuditCommandFactory);  AuditServiceThreadQueue mockAuditServiceThreadQueue=EasyMock.createMock(AuditServiceThreadQueue.class);  mockAuditServiceThreadQueue.add(instance);  EasyMock.expectLastCall().anyTimes();  mockAuditServiceThreadQueue.addScenarioAudit(mockAuditCommand);  EasyMock.expectLastCall().anyTimes();  EasyMock.replay(mockAuditServiceThreadQueue);  instance.setAuditServiceThreadQueue(mockAuditServiceThreadQueue);  Audit result=instance.auditScenario(scenarioName,scenario,null);  assertEquals(auditCreateByAuditCommand,result);  EasyMock.verify(mockAuditServiceThreadQueue);  EasyMock.verify(mockAuditCommand);  EasyMock.verify(mockAuditCommandFactory);}  }
class C{  public E poll(){  E result=buffer.poll();  if (producer != null) {    producer.wakeUp();  }  return result;}  }
class C{  public void postScale(float deltaScale,float px,float py){  if (deltaScale > 1 && getCurrentScale() * deltaScale <= getMaxScale()) {    super.postScale(deltaScale,px,py);  } else   if (deltaScale < 1 && getCurrentScale() * deltaScale >= getMinScale()) {    super.postScale(deltaScale,px,py);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.822 -0500",hash_original_method="9BCFE06D96770C193778FD581B5E01A8",hash_generated_method="16BFD9FBD063C00124000FB057591644") @Override public void close() throws IOException {  if (!def.finished()) {    finish();  }  def.end();  out.close();}  }
class C{  public RenameMethodAdapter(MethodVisitor mv){  super(Opcodes.ASM4,mv);}  }
class C{  private RegisterValuesParser(){}  }
class C{  public final boolean readBoolean() throws IOException {  int ch=in.read();  if (ch < 0)   throw new EOFException();  return (ch != 0);}  }
class C{  public static final void clearHostCredentials(String host){  CredentialsProvider credsProvider=Collect.getInstance().getCredentialsProvider();  Log.i(t,"clearHostCredentials: " + host);  List<AuthScope> asList=buildAuthScopes(host);  for (  AuthScope a : asList) {    credsProvider.setCredentials(a,null);  }}  }
class C{  public void playerOnPlay(PlayerType.GetActivePlayersReturnType getActivePlayerResult,PlayerType.PropertyValue getPropertiesResult,ListType.ItemsAll getItemResult){  setNowPlayingInfo(getItemResult,getPropertiesResult);  currentActivePlayerId=getActivePlayerResult.playerid;  currentNowPlayingItemType=getItemResult.type;  UIUtils.setPlayPauseButtonIcon(getActivity(),playButton,getPropertiesResult.speed);}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("ellipse iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  if (index == 0) {    double ctrls[]=ctrlpts[3];    coords[0]=(float)(x + ctrls[4] * w);    coords[1]=(float)(y + ctrls[5] * h);    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  double ctrls[]=ctrlpts[index - 1];  coords[0]=(float)(x + ctrls[0] * w);  coords[1]=(float)(y + ctrls[1] * h);  coords[2]=(float)(x + ctrls[2] * w);  coords[3]=(float)(y + ctrls[3] * h);  coords[4]=(float)(x + ctrls[4] * w);  coords[5]=(float)(y + ctrls[5] * h);  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  public SequenceNameLocusSimple(SequenceNameLocus other){  this(other.getSequenceName(),other.getStart(),other.getEnd());}  }
class C{  public void countDown(int count){  sync.releaseShared(1 * (Math.abs(count)));}  }
class C{  public final void printTrace(int errorCode,String[] parameters,TLCState s1,TLCState s2){  MP.printError(errorCode,parameters);  MP.printError(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);  int idx=0;  while (idx < this.curLevel) {    StatePrinter.printState(this.stateStack[idx],++idx);  }  assert s1.equals(this.stateStack[idx]);  StatePrinter.printState(s1,++idx);  if (s2 != null) {    StatePrinter.printState(s2,idx + 1);  }}  }
class C{  private double computeRepulsiveForces(double[] rep_i,int off,double[] sol_i,QuadTree node){  final double[] center=node.center;  double dist=sqDist(sol_i,center);  if (node.weight == 1 || node.squareSize / dist < sqtheta) {    double u=1. / (1. + dist);    double z=node.weight * u;    double a=z * u;    for (int k=0; k < dim; k++) {      rep_i[off + k]+=a * (sol_i[k] - center[k]);    }    return z;  }  double z=0.;  if (node.points != null) {    for (    double[] point : node.points) {      double pdist=sqDist(sol_i,point);      double pz=1. / (1. + pdist);      double a=pz * pz;      for (int k=0; k < dim; k++) {        rep_i[off + k]+=a * (sol_i[k] - point[k]);      }      z+=pz;    }  }  if (node.children != null) {    for (    QuadTree child : node.children) {      z+=computeRepulsiveForces(rep_i,off,sol_i,child);    }  }  return z;}  }
class C{  protected void browseFiles(){  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  ResourceListSelectionDialog dialog=new ResourceListSelectionDialog(getShell(),root,IResource.FILE);  dialog.setTitle("Search File");  if (dialog.open() == Window.OK) {    Object[] files=dialog.getResult();    IFile file=(IFile)files[0];    fileText.setText(file.getFullPath().toString());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF:    setTypeRef((TypeRef)null);  return;}super.eUnset(featureID);}  }
class C{  private static void swap(int a,int b,Object[] arr){  Object tmp=arr[a];  arr[a]=arr[b];  arr[b]=tmp;}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  protected boolean prepareQueryForDimension(Domain domain,HierarchyQuery select,DimensionIndex index){  try {    if (index.getStatus() == Status.ERROR) {      return false;    }    Dimension d=index.getDimension();    ExpressionAST definition=DimensionIndexCreationUtils.getDefinition(index.getAxis());    IDomain image=definition.getImageDomain();    if (image.isInstanceOf(IDomain.CONDITIONAL)) {      index.getMemberByID(true);      return false;    } else     if (d.getType().equals(Type.CATEGORICAL)) {      DimensionMapping dmap=select.select(domain,index);      select.getSelect().getStatement().addComment("Indexing dimension " + index.getDimensionName());      for (      Attribute attr : index.getAttributes()) {        AttributeMapping attrmap=select.select(domain,index,attr);        dmap.putMapping(attr.getId().getAttributeId(),attrmap);      }      return true;    } else     if (d.getType().equals(Type.CONTINUOUS)) {      Axis axis=index.getAxis();      Measure min=axis.getParent().M(ExpressionMaker.MIN(axis.getDefinitionSafe()));      Measure max=axis.getParent().M(ExpressionMaker.MAX(axis.getDefinitionSafe()));      MeasureMapping kxmin=select.select(min);      MeasureMapping kxmax=select.select(max);      select.add(kxmin,kxmax,domain,index);      select.getSelect().getStatement().addComment("Indexing dimension " + index.getDimensionName());      return true;    } else {      return false;    }  } catch (  ScopeException|SQLScopeException e) {    index.setPermanentError(e.getMessage());    logger.error("failed to compute dimension " + index.getAxis().prettyPrint() + " with error: "+ e);    return false;  }}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  RectangleInsets insets=getInsets();  insets.trim(area);  drawBackground(g2,area);  drawOutline(g2,area);  if (DatasetUtilities.isEmptyOrNull(this.dataset)) {    drawNoDataMessage(g2,area);    return;  }  int pieCount;  if (this.dataExtractOrder == TableOrder.BY_ROW) {    pieCount=this.dataset.getRowCount();  } else {    pieCount=this.dataset.getColumnCount();  }  int displayCols=(int)Math.ceil(Math.sqrt(pieCount));  int displayRows=(int)Math.ceil((double)pieCount / (double)displayCols);  if (displayCols > displayRows && area.getWidth() < area.getHeight()) {    int temp=displayCols;    displayCols=displayRows;    displayRows=temp;  }  prefetchSectionPaints();  int x=(int)area.getX();  int y=(int)area.getY();  int width=((int)area.getWidth()) / displayCols;  int height=((int)area.getHeight()) / displayRows;  int row=0;  int column=0;  int diff=(displayRows * displayCols) - pieCount;  int xoffset=0;  Rectangle rect=new Rectangle();  for (int pieIndex=0; pieIndex < pieCount; pieIndex++) {    rect.setBounds(x + xoffset + (width * column),y + (height * row),width,height);    String title;    if (this.dataExtractOrder == TableOrder.BY_ROW) {      title=this.dataset.getRowKey(pieIndex).toString();    } else {      title=this.dataset.getColumnKey(pieIndex).toString();    }    this.pieChart.setTitle(title);    PieDataset piedataset;    PieDataset dd=new CategoryToPieDataset(this.dataset,this.dataExtractOrder,pieIndex);    if (this.limit > 0.0) {      piedataset=DatasetUtilities.createConsolidatedPieDataset(dd,this.aggregatedItemsKey,this.limit);    } else {      piedataset=dd;    }    PiePlot piePlot=(PiePlot)this.pieChart.getPlot();    piePlot.setDataset(piedataset);    piePlot.setPieIndex(pieIndex);    for (int i=0; i < piedataset.getItemCount(); i++) {      Comparable key=piedataset.getKey(i);      Paint p;      if (key.equals(this.aggregatedItemsKey)) {        p=this.aggregatedItemsPaint;      } else {        p=(Paint)this.sectionPaints.get(key);      }      piePlot.setSectionPaint(key,p);    }    ChartRenderingInfo subinfo=null;    if (info != null) {      subinfo=new ChartRenderingInfo();    }    this.pieChart.draw(g2,rect,subinfo);    if (info != null) {      assert subinfo != null;      info.getOwner().getEntityCollection().addAll(subinfo.getEntityCollection());      info.addSubplotInfo(subinfo.getPlotInfo());    }    ++column;    if (column == displayCols) {      column=0;      ++row;      if (row == displayRows - 1 && diff != 0) {        xoffset=(diff * width) / 2;      }    }  }}  }
class C{  public static List<URI> uris(String... values){  if (values != null) {    return uris(Arrays.asList(values));  } else {    return new ArrayList<URI>();  }}  }
class C{  public HttpHealthCheckService(HealthChecker... healthCheckers){  this.healthCheckers=Collections.unmodifiableList(Arrays.asList(healthCheckers));  serverHealth=new SettableHealthChecker();  serverHealthUpdater=new ServerHealthUpdater();}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  String action=intent.getAction();  if (action.equals(NOTIFICATION_INTENT_CANCEL)) {    if (isPlaying()) {      isClosedFromNotification=true;      stop();    }    if (mNotificationManager != null)     mNotificationManager.cancel(NOTIFICATION_ID);  } else   if (action.equals(NOTIFICATION_INTENT_PLAY_PAUSE)) {    if (isPlaying())     stop(); else     if (mRadioUrl != null)     play(mRadioUrl);  }  return START_NOT_STICKY;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Text newTextNode;  String newTextName;  String newTextValue;  int newTextType;  doc=(Document)load("hc_staff",true);  newTextNode=doc.createTextNode("This is a new Text node");  newTextValue=newTextNode.getNodeValue();  assertEquals("value","This is a new Text node",newTextValue);  newTextName=newTextNode.getNodeName();  assertEquals("strong","#text",newTextName);  newTextType=(int)newTextNode.getNodeType();  assertEquals("type",3,newTextType);}  }
class C{  private boolean fireEvent(@NotNull GwtEvent<?> event){  if (eventBus != null) {    eventBus.fireEvent(event);  }  if (event instanceof CancellableEvent) {    return !((CancellableEvent)event).isCancelled();  }  return true;}  }
class C{  public static void toXContent(FileInfo file,XContentBuilder builder,ToXContent.Params params) throws IOException {  builder.startObject();  builder.field(Fields.NAME,file.name);  builder.field(Fields.PHYSICAL_NAME,file.metadata.name());  builder.field(Fields.LENGTH,file.metadata.length());  if (file.metadata.checksum() != null) {    builder.field(Fields.CHECKSUM,file.metadata.checksum());  }  if (file.partSize != null) {    builder.field(Fields.PART_SIZE,file.partSize.bytes());  }  if (file.metadata.writtenBy() != null) {    builder.field(Fields.WRITTEN_BY,file.metadata.writtenBy());  }  if (file.metadata.hash() != null && file.metadata().hash().length > 0) {    builder.field(Fields.META_HASH,file.metadata.hash());  }  builder.endObject();}  }
class C{  public boolean removeAxis(Axis axis){  remove(axis);  plotArea.removeGrid(axis.getGrid());  revalidate();  if (axis.isHorizontal())   return xAxisList.remove(axis); else   return yAxisList.remove(axis);}  }
class C{  public Token next() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        String str=yytext();        int first=str.charAt(0);        String msg=String.format("Untokenizable: %s (U+%s, decimal: %s)",yytext(),Integer.toHexString(first).toUpperCase(),Integer.toString(first));switch (untokenizable) {case NONE_DELETE:          break;case FIRST_DELETE:        if (!this.seenUntokenizableCharacter) {          this.seenUntokenizableCharacter=true;        }      break;case ALL_DELETE:    this.seenUntokenizableCharacter=true;  break;case NONE_KEEP:return getNext();case FIRST_KEEP:if (!this.seenUntokenizableCharacter) {this.seenUntokenizableCharacter=true;}return getNext();case ALL_KEEP:this.seenUntokenizableCharacter=true;return getNext();}}case 55:break;case 2:{return getNext("<",yytext());}case 56:break;case 3:{return getNext();}case 57:break;case 4:{if (yylength() >= 3 && yylength() <= 4 && ptb3Dashes) {return getNext(ptbmdash,yytext());} else {return getNext();}}case 58:break;case 5:{if (tokenizeNLs) {return getNext(NEWLINE_TOKEN,yytext());}}case 59:break;case 6:{final String origTxt=yytext();String tmp=removeSoftHyphens(origTxt);if (americanize) {tmp=Americanize.americanize(tmp);}return getNext(tmp,origTxt);}case 60:break;case 7:{}case 61:break;case 8:{return handleQuotes(yytext(),false);}case 62:break;case 9:{if (escapeForwardSlashAsterisk) {return getNext(delimit(yytext(),'/'),yytext());} else {return getNext();}}case 63:break;case 10:{return getNext(">",yytext());}case 64:break;case 11:{if (ptb3Dashes) {return getNext(ptbmdash,yytext());} else {return getNext();}}case 65:break;case 12:{return getNext(removeSoftHyphens(yytext()),yytext());}case 66:break;case 13:{return handleEllipsis(yytext());}case 67:break;case 14:{return normalizeFractions(yytext());}case 68:break;case 15:{if (normalizeCurrency) {return getNext(normalizeCurrency(yytext()),yytext());} else {return getNext();}}case 69:break;case 16:{if (normalizeOtherBrackets) {return getNext(closebrace,yytext());} else {return getNext();}}case 70:break;case 17:{if (normalizeParentheses) {return getNext(openparen,yytext());} else {return getNext();}}case 71:break;case 18:{if (normalizeParentheses) {return getNext(closeparen,yytext());} else {return getNext();}}case 72:break;case 19:{if (escapeForwardSlashAsterisk) {return getNext(delimit(yytext(),'*'),yytext());} else {return getNext();}}case 73:break;case 20:{if (normalizeOtherBrackets) {return getNext(openbrace,yytext());} else {return getNext();}}case 74:break;case 21:{if (normalizeOtherBrackets) {return getNext("-RSB-",yytext());} else {return getNext();}}case 75:break;case 22:{if (normalizeOtherBrackets) {return getNext("-LSB-",yytext());} else {return getNext();}}case 76:break;case 23:{}case 77:break;case 24:{int zzFState=13;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=14;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{return getNext();}case 78:break;case 25:yypushback(1);{return getNext();}case 79:break;case 26:yypushback(1);{return handleQuotes(yytext(),true);}case 80:break;case 27:{final String origTxt=yytext();String txt=origTxt;if (normalizeSpace) {txt=txt.replace(' ','\u00A0');}return getNext(txt,origTxt);}case 81:break;case 28:{String txt=yytext();String origText=txt;if (normalizeParentheses) {txt=LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);txt=RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);}return getNext(txt,origText);}case 82:break;case 29:{return getNext(removeSoftHyphens(yytext()),yytext());}case 83:break;case 30:{int zzFState=3;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=4;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{final String origTxt=yytext();String tmp=removeSoftHyphens(origTxt);if (americanize) {tmp=Americanize.americanize(tmp);}return getNext(tmp,origTxt);}case 84:break;case 31:{if (escapeForwardSlashAsterisk) {return getNext(delimit(yytext(),'/'),yytext());} else {return getNext();}}case 85:break;case 32:yypushback(1);{return getNext(removeSoftHyphens(yytext()),yytext());}case 86:break;case 33:{String s;if (strictTreebank3 && !"U.S.".equals(yytext())) {yypushback(1);s=yytext();} else {s=yytext();yypushback(1);}return getNext(s,yytext());}case 87:break;case 34:yypushback(1);{String txt=yytext();String origText=txt;if (normalizeParentheses) {txt=LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);txt=RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);}return getNext(txt,origText);}case 88:break;case 35:zzMarkedPos=zzStartRead + 1;{return handleQuotes(yytext(),true);}case 89:break;case 36:yypushback(1);{return handleQuotes(yytext(),false);}case 90:break;case 37:{return getNormalizedAmpNext();}case 91:break;case 38:{String txt=yytext();if (escapeForwardSlashAsterisk) {txt=delimit(txt,'/');}if (normalizeSpace) {txt=txt.replace(' ','\u00A0');}return getNext(txt,yytext());}case 92:break;case 39:{String txt=yytext();if (escapeForwardSlashAsterisk) {txt=delimit(txt,'/');}if (normalizeSpace) {txt=txt.replace(' ','\u00A0');}return getNext(txt,yytext());}case 93:break;case 40:{int zzFState=5;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=6;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{final String txt=yytext();return getNext(removeSoftHyphens(txt),txt);}case 94:break;case 41:{int zzFState=16;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=17;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{return getNext();}case 95:break;case 42:{if (splitAssimilations) {yypushback(2);return getNext();} else {return getNext();}}case 96:break;case 43:{int zzFState=15;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=14;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{return getNext();}case 97:break;case 44:{int zzFState=9;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=10;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{while (yylength() > 0) {char last=yycharat(yylength() - 1);if (last == ' ' || last == '\t' || (last >= '\n' && last <= '\r' || last == '\u0085')) {yypushback(1);} else {break;}}return getNext();}case 98:break;case 45:{String txt=yytext();if (escapeForwardSlashAsterisk) {txt=delimit(txt,'/');txt=delimit(txt,'*');}return getNext(txt,yytext());}case 99:break;case 46:yypushback(1);{return getNext(removeSoftHyphens(yytext()),yytext());}case 100:break;case 47:{int zzFState=7;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=8;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{while (yylength() > 0) {char last=yycharat(yylength() - 1);if (last == ' ' || last == '\t' || (last >= '\n' && last <= '\r' || last == '\u0085')) {yypushback(1);} else {break;}}String s;if (yylength() == 2) {yypushback(1);s=yytext();} else if (strictTreebank3 && !"U.S.".equals(yytext())) {yypushback(1);s=yytext();} else {s=yytext();yypushback(1);}return getNext(s,yytext());}case 101:break;case 48:yypushback(2);{return getNext();}case 102:break;case 49:{int zzFState=11;int zzFPos=zzStartRead;if (zzFin.length <= zzBufferL.length) {zzFin=new boolean[zzBufferL.length + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);zzInput=zzBufferL[zzFPos++];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1) {zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);}while (zzFPos <= zzMarkedPos) {zzFinL[zzFPos++]=false;}zzFState=12;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=zzBufferL[--zzFPos];zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{String s;if (strictTreebank3 && !"U.S.".equals(yytext())) {yypushback(1);s=yytext();} else {s=yytext();yypushback(1);}return getNext(s,yytext());}case 103:break;case 50:{if (splitAssimilations) {yypushback(3);return getNext();} else {return getNext();}}case 104:break;case 51:yypushback(1);{return getNormalizedAmpNext();}case 105:break;case 52:{String txt=yytext();if (escapeForwardSlashAsterisk) {txt=delimit(txt,'/');}return getNext(txt,yytext());}case 106:break;case 53:yypushback(4);{return getNext();}case 107:break;case 54:{String txt=yytext();if (normalizeSpace) {txt=txt.replace(' ','\u00A0');}if (normalizeParentheses) {txt=LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);txt=RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);}return getNext(txt,yytext());}case 108:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private static LineMap parseSmap(ReadStreamOld is) throws IOException {  String smap=is.readln();  if (!smap.equals("SMAP"))   throw new IOException(L.l("Illegal header"));  String outputFile=is.readln().trim();  String defaultStratum=is.readln().trim();  String stratum=defaultStratum;  HashMap<String,String> fileMap=new HashMap<String,String>();  LineMap lineMap=new LineMap(outputFile);  loop:   while (true) {    int ch=is.read();    if (ch < 0)     break;    if (ch != '*')     throw new IOException(L.l("unexpected character '{0}'",String.valueOf((char)ch)));    int code=is.read();    String value=is.readln();switch (code) {case 'E':      break loop;case 'S':    stratum=value.trim();  break;case 'F':while ((ch=is.read()) > 0 && ch != '*') {  if (ch == '+') {    String first=is.readln().trim();    String second=is.readln().trim();    int p=first.indexOf(' ');    String key=first.substring(0,p);    String file=first.substring(p + 1).trim();    if (fileMap.size() == 0)     fileMap.put("",second);    fileMap.put(key,second);  } else {    String first=is.readln().trim();    int p=first.indexOf(' ');    String key=first.substring(0,p);    String file=first.substring(p + 1).trim();    if (fileMap.size() == 0)     fileMap.put("",file);    fileMap.put(key,file);  }}if (ch == '*') is.unread();break;case 'L':while ((ch=is.read()) != '*' && ch > 0) {is.unread();String line=is.readln().trim();addMap(line,fileMap,lineMap);}if (ch == '*') is.unread();break;default :while ((ch=is.read()) != '*') {is.readln();}if (ch == '*') is.unread();break;}}return lineMap;}  }
class C{  BigInteger(int sign,int numberLength,int[] digits){  setJavaRepresentation(sign,numberLength,digits);}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public Object produceEvent() throws InvocationTargetException {  if (!valid) {    throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");  }  try {    return method.invoke(target);  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  float lineWidth=paint.getStrokeWidth();  paint.setStrokeWidth(renderer.getLineWidth());  final FillOutsideLine[] fillOutsideLine=renderer.getFillOutsideLine();  for (  FillOutsideLine fill : fillOutsideLine) {    if (fill.getType() != FillOutsideLine.Type.NONE) {      paint.setColor(fill.getColor());      List<Float> fillPoints=new ArrayList<Float>();      int[] range=fill.getFillRange();      if (range == null) {        fillPoints.addAll(points);      } else {        if (points.size() > range[0] * 2 && points.size() > range[1] * 2) {          fillPoints.addAll(points.subList(range[0] * 2,range[1] * 2));        }      }      final float referencePoint;      FillOutsideLine.Type tt=fill.getType();      if (tt == FillOutsideLine.Type.BOUNDS_ALL || tt == FillOutsideLine.Type.BOUNDS_BELOW || tt == FillOutsideLine.Type.BOUNDS_ABOVE) {        referencePoint=yAxisValue;      } else {        if (tt == FillOutsideLine.Type.BELOW) {          referencePoint=canvas.getHeight();        } else {          if (tt == FillOutsideLine.Type.ABOVE) {            referencePoint=0;          } else {            throw new RuntimeException("You have added a new type of filling but have not implemented.");          }        }      }      if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW) {        List<Float> boundsPoints=new ArrayList<Float>();        boolean add=false;        int length=fillPoints.size();        if (length > 0 && fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && fillPoints.get(1) < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && fillPoints.get(1) > referencePoint) {          boundsPoints.add(fillPoints.get(0));          boundsPoints.add(fillPoints.get(1));          add=true;        }        for (int i=3; i < length; i+=2) {          float prevValue=fillPoints.get(i - 2);          float value=fillPoints.get(i);          if (prevValue < referencePoint && value > referencePoint || prevValue > referencePoint && value < referencePoint) {            float prevX=fillPoints.get(i - 3);            float x=fillPoints.get(i - 1);            boundsPoints.add(prevX + (x - prevX) * (referencePoint - prevValue) / (value - prevValue));            boundsPoints.add(referencePoint);            if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value > referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value < referencePoint) {              i+=2;              add=false;            } else {              boundsPoints.add(x);              boundsPoints.add(value);              add=true;            }          } else {            if (add || fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value > referencePoint) {              boundsPoints.add(fillPoints.get(i - 1));              boundsPoints.add(value);            }          }        }        fillPoints.clear();        fillPoints.addAll(boundsPoints);      }      int length=fillPoints.size();      if (length > 0) {        fillPoints.set(0,fillPoints.get(0) + 1);        fillPoints.add(fillPoints.get(length - 2));        fillPoints.add(referencePoint);        fillPoints.add(fillPoints.get(0));        fillPoints.add(fillPoints.get(length + 1));        for (int i=0; i < length + 4; i+=2) {          if (fillPoints.get(i + 1) < 0) {            fillPoints.set(i + 1,0f);          }        }        paint.setStyle(Style.FILL);        drawPath(canvas,fillPoints,paint,true);      }    }  }  paint.setColor(renderer.getColor());  paint.setStyle(Style.STROKE);  drawPath(canvas,points,paint,false);  paint.setStrokeWidth(lineWidth);}  }
class C{  public static void register(){  final SlashAction msg=new MessageAction();  final SlashAction supporta=new SupportAnswerAction();  final SlashAction who=new WhoAction();  final SlashAction help=new HelpAction();  final GroupMessageAction groupMessage=new GroupMessageAction();  actions.put("/",new RemessageAction());  actions.put("add",new AddBuddyAction());  actions.put("adminlevel",new AdminLevelAction());  actions.put("adminnote",new AdminNoteAction());  actions.put("alter",new AlterAction());  actions.put("altercreature",new AlterCreatureAction());  actions.put("alterquest",new AlterQuestAction());  actions.put("answer",new AnswerAction());  actions.put("atlas",new AtlasBrowserLaunchCommand());  actions.put("away",new AwayAction());  actions.put("ban",new BanAction());  actions.put("clear",new ClearChatLogAction());  actions.put("clickmode",new ClickModeAction());  actions.put("clientinfo",new ClientInfoAction());  actions.put("commands",help);  actions.put("config",new ConfigAction());  actions.put("drop",new DropAction());  actions.put("cast",new CastSpellAction());  actions.put("gag",new GagAction());  actions.put("gmhelp",new GMHelpAction());  actions.put("group",new GroupManagementAction(groupMessage));  actions.put("groupmessage",groupMessage);  actions.put("grumpy",new GrumpyAction());  actions.put("help",help);  actions.put("ignore",new IgnoreAction());  actions.put("inspect",new InspectAction());  actions.put("invisible",new InvisibleAction());  actions.put("jail",new JailAction());  actions.put("listproducers",new ListProducersAction());  actions.put("me",new EmoteAction());  actions.put("msg",msg);  actions.put("mute",new MuteAction());  actions.put("names",who);  actions.put("p",groupMessage);  actions.put("profile",new ProfileAction());  actions.put("travellog",new TravelLogAction());  actions.put("quit",new QuitAction());  actions.put("remove",new RemoveBuddyAction());  actions.put("sentence",new SentenceAction());  actions.put("status",new SentenceAction());  actions.put("settings",new SettingsAction());  actions.put("sound",new SoundAction());  actions.put("volume",new VolumeAction());  actions.put("vol",new VolumeAction());  actions.put("storemessage",new StoreMessageAction());  actions.put("postmessage",new StoreMessageAction());  actions.put("summonat",new SummonAtAction());  actions.put("summon",new SummonAction());  actions.put("supportanswer",supporta);  actions.put("supporta",supporta);  actions.put("support",new SupportAction());  actions.put("takescreenshot",new ScreenshotAction());  actions.put("teleport",new TeleportAction());  actions.put("teleportto",new TeleportToAction());  actions.put("tellall",new TellAllAction());  actions.put("tell",msg);  actions.put("where",new WhereAction());  actions.put("who",who);  actions.putAll(BareBonesBrowserLaunchCommandsFactory.createBrowserCommands());  actions.put("walk",new AutoWalkAction());  actions.put("stopwalk",new AutoWalkStopAction());}  }
class C{  public Iterator<String> iterator(){  return keySet().iterator();}  }
class C{  public int ppid(){  return Integer.parseInt(fields[3]);}  }
class C{  public boolean needViewAttributeUpdates(){  return false;}  }
class C{  public void addHeader(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null header!");  }  mHeaders.add(view);}  }
class C{  public void groupIterator(FDBStore store,Session session,FDBStoreData storeData,FDBStore.GroupIteratorBoundary left,FDBStore.GroupIteratorBoundary right,int limit,FDBScanTransactionOptions transactionOptions){  TransactionState txnState=store.getTransaction(session,storeData);  if ((left == FDBStore.GroupIteratorBoundary.KEY) && (right == FDBStore.GroupIteratorBoundary.NEXT_KEY) && (limit == 1)) {    byte[] key=packKey(storeData);    Future<byte[]> future=txnState.getFuture(key,transactionOptions);    storeData.iterator=new FDBStoreDataSingleKeyValueIterator(storeData,key,future);    return;  }  KeySelector ksLeft, ksRight;switch (left) {case START:    ksLeft=KeySelector.firstGreaterOrEqual(prefixBytes(storeData));  break;case KEY:ksLeft=KeySelector.firstGreaterOrEqual(packKey(storeData));break;case NEXT_KEY:ksLeft=KeySelector.firstGreaterThan(packKey(storeData));break;case FIRST_DESCENDANT:ksLeft=KeySelector.firstGreaterOrEqual(packKey(storeData,Key.BEFORE));break;default :throw new IllegalArgumentException(left.toString());}switch (right) {case END:ksRight=KeySelector.firstGreaterOrEqual(ByteArrayUtil.strinc(prefixBytes(storeData)));break;case LAST_DESCENDANT:ksRight=KeySelector.firstGreaterOrEqual(packKey(storeData,Key.AFTER));break;default :throw new IllegalArgumentException(right.toString());}storeData.iterator=new FDBStoreDataKeyValueIterator(storeData,txnState.getRangeIterator(ksLeft,ksRight,limit,false,transactionOptions));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(9,"Ann ");  childData=child.getData();  assertEquals("characterdataInsertDataMiddleAssert","Margaret Ann Martin",childData);}  }
class C{  public TransportTimeoutException(String message){  super(message);}  }
class C{  public void evaluateTestSet(ClassificationDataSet testSet){  if (keepModels)   keptModels=new Classifier[1];  int numOfClasses=dataSet.getClassSize();  sumOfWeights=0.0;  confusionMatrix=new double[numOfClasses][numOfClasses];  setUpResults(testSet.getSampleSize());  totalTrainingTime=totalClassificationTime=0;  evaluationWork(dataSet,testSet,0);}  }
class C{  public SQLClientInfoException(String reason,String sqlState,int vendorCode,Map<String,ClientInfoStatus> failedProperties){  super(reason,sqlState,vendorCode);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.879 -0500",hash_original_method="5482932EB1112689442580A552BBCA6A",hash_generated_method="A4DC5A2D85DC90524D819CAEFED47975") public final void automaticallyReleaseConnectionToPool(){  automaticallyReleaseConnectionToPool=true;  if (connection != null && connectionReleased) {    HttpConnectionPool.INSTANCE.recycle(connection);    connection=null;  }}  }
class C{  public Matrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  public void runTest() throws Throwable {  String localName="blank";  String namespaceURI="http://www.nist.gov";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testNode=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testNode);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  public static void main(String... args) throws BrokenBarrierException, InterruptedException {  doTestMaps();}  }
class C{  public void serve() throws InterruptedException {  try {    chain.onSessionOpened(ses);    InputStream in=endp.inputStream();    ByteBuffer readBuf=ByteBuffer.allocate(8 << 10);    readBuf.order(ByteOrder.nativeOrder());    assert readBuf.hasArray();    while (!Thread.interrupted()) {      int pos=readBuf.position();      int read=in.read(readBuf.array(),pos,readBuf.remaining());      if (read > 0) {        metricsLsnr.onBytesReceived(read);        readBuf.position(0);        readBuf.limit(pos + read);        chain.onMessageReceived(ses,readBuf);        if (readBuf.hasRemaining())         readBuf.compact(); else         readBuf.clear();        CountDownLatch latch=latchRef.get();        if (latch != null)         latch.await();      } else       if (read < 0) {        endp.close();        break;      }    }  } catch (  Exception e) {    chain.onExceptionCaught(ses,new IgniteCheckedException("Failed to read from IPC endpoint.",e));  } finally {    try {      chain.onSessionClosed(ses);    } catch (    IgniteCheckedException e) {      chain.onExceptionCaught(ses,new IgniteCheckedException("Failed to process session close event " + "for IPC endpoint.",e));    }  }}  }
class C{  public FractionDescriptor fraction(final String name){  final String match=matchingSpec(name);  if (match != null) {    this.matches.add(match);  }  return this.matches.equals(matchSpecs) ? this.descriptor : null;}  }
class C{  private boolean isMaintainAspectRatio(){  return preferences.getBoolean("SplashMaintainAspectRatio",false);}  }
class C{  public DataSet sample(DataSet dataSet,int newSampleSize){  if (newSampleSize < 1) {    throw new IllegalArgumentException("Sample size must be > 0.");  }  if (dataSet.getNumRows() < 1) {    throw new IllegalArgumentException("Dataset must contain samples.");  }  int oldSampleSize=dataSet.getNumRows();  int ncols=dataSet.getNumColumns();  DataSet newDataSet=new ColtDataSet(newSampleSize,dataSet.getVariables());  for (int row=0; row < newSampleSize; row++) {    int oldCase=RandomUtil.getInstance().nextInt(oldSampleSize);    for (int col=0; col < ncols; col++) {      newDataSet.setObject(row,col,dataSet.getObject(oldCase,col));    }  }  newDataSet.setKnowledge(dataSet.getKnowledge().copy());  return newDataSet;}  }
class C{  public static double pooledVariance(int size1,double variance1,int size2,double variance2){  return (size1 * variance1 + size2 * variance2) / (size1 + size2);}  }
class C{  private void extractCarrotAttributes(SolrParams solrParams,Map<String,Object> attributes){  for (Iterator<String> paramNames=solrParams.getParameterNamesIterator(); paramNames.hasNext(); ) {    String paramName=paramNames.next();    if (!CarrotParams.CARROT_PARAM_NAMES.contains(paramName)) {      attributes.put(paramName,solrParams.get(paramName));    }  }}  }
class C{  public Object visit(ASTprocess node,Object data){  return showNode(node,data);}  }
class C{  public Builder put(Settings settings){  removeNonArraysFieldsIfNewSettingsContainsFieldAsArray(settings.getAsMap());  map.putAll(settings.getAsMap());  return this;}  }
class C{  public void registerSettingChangeListener(String key,SettingChangeListener listener){  String realKey="config." + key;  List<SettingChangeListener> list=listeners.get(realKey);  if (list == null) {    list=new ArrayList<SettingChangeListener>();    listeners.put(realKey,list);  }  list.add(listener);}  }
class C{  protected static void initializeViewport(BridgeContext ctx,Element e,GraphicsNode node,float[] vb,Rectangle2D bounds){  float x=(float)bounds.getX();  float y=(float)bounds.getY();  float w=(float)bounds.getWidth();  float h=(float)bounds.getHeight();  try {    SVGImageElement ie=(SVGImageElement)e;    SVGOMAnimatedPreserveAspectRatio _par=(SVGOMAnimatedPreserveAspectRatio)ie.getPreserveAspectRatio();    _par.check();    AffineTransform at=ViewBox.getPreserveAspectRatioTransform(e,vb,w,h,_par,ctx);    at.preConcatenate(AffineTransform.getTranslateInstance(x,y));    node.setTransform(at);    Shape clip=null;    if (CSSUtilities.convertOverflow(e)) {      float[] offsets=CSSUtilities.convertClip(e);      if (offsets == null) {        clip=new Rectangle2D.Float(x,y,w,h);      } else {        clip=new Rectangle2D.Float(x + offsets[3],y + offsets[0],w - offsets[1] - offsets[3],h - offsets[2] - offsets[0]);      }    }    if (clip != null) {      try {        at=at.createInverse();        Filter filter=node.getGraphicsNodeRable(true);        clip=at.createTransformedShape(clip);        node.setClip(new ClipRable8Bit(filter,clip));      } catch (      java.awt.geom.NoninvertibleTransformException ex) {      }    }  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_SIGNATURE);}  }
class C{  public PrintJobEvent(DocPrintJob source,int reason){  super(source);  this.reason=reason;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___MULTIPLICITY_1:    return getMultiplicity_1();case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___ROLE_NAME_1:  return getRoleName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean wasCanceled(){  return wasCanceled;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader;  String pointerHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag;  double flowDir;  double previousFlowDir;  double linkLength;  double streamValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputFileName=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double east=streams.getEast() - gridResX / 2.0;    double west=streams.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=streams.getNorth() - gridResY / 2.0;    double south=streams.getSouth() + gridResY / 2.0;    double NSRange=north - south;    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("STRM_VAL");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("Length");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE,fields);    byte numNeighbouringStreamCells;    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        streamValue=streams.getValue(row,col);        if (streamValue > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells != 1) {            FID++;            linkLength=0;            int[] parts={0};            PointsList points=new PointsList();            x=col;            y=row;            previousFlowDir=-99;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                if (flowDir != previousFlowDir) {                  xCoord=west + ((double)x / cols) * EWRange;                  yCoord=north - ((double)y / rows) * NSRange;                  points.addPoint(xCoord,yCoord);                  previousFlowDir=flowDir;                }                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                linkLength+=gridLengths[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells > 1) {                    flag=false;                  }                }              } else {                flag=false;              }              if (!flag) {                xCoord=west + ((double)x / cols) * EWRange;                yCoord=north - ((double)y / rows) * NSRange;                points.addPoint(xCoord,yCoord);              }            } while (flag);            PolyLine line=new PolyLine(parts,points.getPointsArray());            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(streamValue);            rowData[2]=new Double(linkLength / 1000.0);            output.addRecord(line,rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    pntr.close();    streams.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ObjectParameter(OptionID optionID,Class<?> restrictionClass,Class<?> defaultValue){  super(optionID,restrictionClass,defaultValue);}  }
class C{  public void robotInit(){  System.out.println("NerdyIterativeRobot IterativeRobot.robotInit() method... Overload me!");}  }
class C{  private static ArrayList<Face> mergeAxisFaces(ArrayList<Face> faceList,int axis){  ArrayList<Face> faceList2=new ArrayList<Face>();  for (  Face face : faceList) {    if (!faceList2.isEmpty()) {      boolean merged=false;      for (      Face face2 : faceList2) {        merged=mergeFaces(face,face2,axis);        if (merged)         break;      }      if (!merged) {        faceList2.add(face);      }    } else {      faceList2.add(face);    }  }  return faceList2;}  }
class C{  public void onActivityCreated(@Nullable Bundle savedInstanceState){  if (!showsBottomSheet) {    return;  }  View view=fragment.getView();  if (view != null) {    if (view.getParent() != null) {      throw new IllegalStateException("BottomSheetFragment can not be attached to a container view");    }  }}  }
class C{  public static IMouseStateChange enterBend(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo){  final Bend b=hitInfo.getHitBend();  return new CStateChange(m_factory.createBendEnterState(b,event),true);}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (  DataTableRow row : this) {    for (int i=0; i < getNumberOfColumns(); i++) {      if (i != 0) {        result.append(", ");      }      result.append(row.getValue(i));    }    result.append(Tools.getLineSeparator());  }  return result.toString();}  }
class C{  private Bezier(){}  }
class C{  private void watchTheme(Theme theme){  Path themePath=getThemeDirectory(theme);  logger.debug("Watching theme directory for changes: {}",themePath.toAbsolutePath());  noCatch(null);}  }
class C{  public void showUpdateInfobarIfNecessary(ChromeActivity activity){  if (mMustShowInfoBar)   showUpdateInfoBar(activity);}  }
class C{  public MethodRef(String declClass,String[] argTypes,String returnType,String methodName){  mDeclClass=declClass;  mArgTypes=argTypes;  mReturnType=returnType;  mMethodName=methodName;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.METADATA;}  }
class C{  private static char toHex(int nibble){  return hexDigit[(nibble & 0xF)];}  }
class C{  @Inline public void releasePages(Address first){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(Conversions.isPageAligned(first));  int pageOffset=Conversions.bytesToPages(first.diff(start));  int pages=freeList.size(pageOffset);  if (VM.config.ZERO_PAGES_ON_RELEASE)   VM.memory.zero(false,first,Conversions.pagesToBytes(pages));  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(pages <= committed);  lock();  reserved-=pages;  committed-=pages;  int freed=freeList.free(pageOffset,true);  pagesCurrentlyOnFreeList+=pages;  if (!contiguous)   releaseFreeChunks(first,freed);  unlock();  VM.events.tracePageReleased(space,first,pages);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.562 -0500",hash_original_method="2AE8554E2C6CFEA55F148AAA6C526165",hash_generated_method="974D64E5B862CB1550A41D214F458228") public static String normalizeNumber(String phoneNumber){  StringBuilder sb=new StringBuilder();  int len=phoneNumber.length();  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if ((i == 0 && c == '+') || PhoneNumberUtils.isISODigit(c)) {      sb.append(c);    } else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {      return normalizeNumber(PhoneNumberUtils.convertKeypadLettersToDigits(phoneNumber));    }  }  return sb.toString();}  }
class C{  public ResourceNotificationException(Throwable cause){  super(cause);}  }
class C{  public FunctionblockModel basicGetSuperType(){  return superType;}  }
class C{  private boolean needMoreTokens(){  if (this.done) {    return false;  }  if (this.tokens.isEmpty()) {    return true;  }  stalePossibleSimpleKeys();  return nextPossibleSimpleKey() == this.tokensTaken;}  }
class C{  public static int capacity(long[] v){  return v.length * Long.SIZE;}  }
class C{  public void vaciaCampo(int tipoFicha,int tipoCampo,String id,String idCampo){  remove(tipoFicha,tipoCampo,id,idCampo,null);}  }
class C{  public void addGenerateCondition(PassThroughOrGenerateRuleCondition condition){  generateConditions.add(condition);}  }
class C{  private void createMigrationRulePage(){  MigrationRuleEditor migrationRuleEditor=new MigrationRuleEditor(getContainer(),migrationTask);  int index=addPage(migrationRuleEditor.getControl());  setPageText(index,"Rule");  taskListeners.add(migrationRuleEditor);}  }
class C{  @Override public void insertString(int offs,String str,AttributeSet a) throws BadLocationException {  if (this.pattern != null) {    String s=this.getText(0,this.getLength());    Matcher m=this.pattern.matcher(s + str);    if (m.matches())     super.insertString(offs,str,a);  } else {    StringBuffer sb=new StringBuffer();    for (int i=0; i < str.length(); i++)     if (this.valid_characters == null || this.valid_characters.indexOf(str.charAt(i)) != -1)     sb.append(str.charAt(i)); else     Toolkit.getDefaultToolkit().beep();    super.insertString(offs,sb.toString(),a);  }}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  out.write(val ? 1 : 0);  written++;}  }
class C{  public void addLayerControls(){  if (getControls() == null) {    setControls(createControlButtons());  }}  }
class C{  private void performFeatureCheck(){  if (sensorManager == null) {    Log.e(TAG,"No sensor manager");    analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_AVAILABILITY,"No Sensor Manager",0);  }  if (hasDefaultSensor(Sensor.TYPE_ACCELEROMETER)) {    if (hasDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)) {      Log.i(TAG,"Minimal sensors available");      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_AVAILABILITY,"Minimal Sensors: Yes",1);    } else {      Log.e(TAG,"No magnetic field sensor");      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_AVAILABILITY,"No Mag Field Sensor",0);    }  } else {    if (hasDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)) {      Log.e(TAG,"No accelerometer");      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_AVAILABILITY,"No Accel Sensor",0);    } else {      Log.e(TAG,"No magnetic field sensor or accelerometer");      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_AVAILABILITY,"No Mag Field/Accel Sensors",0);    }  }  boolean hasRotationSensor=false;  if (hasDefaultSensor(Sensor.TYPE_ROTATION_VECTOR)) {    if (hasDefaultSensor(Sensor.TYPE_ACCELEROMETER) && hasDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) && hasDefaultSensor(Sensor.TYPE_GYROSCOPE)) {      hasRotationSensor=true;      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.ROT_SENSOR_AVAILABILITY,"OK - All Sensors",1);    } else     if (hasDefaultSensor(Sensor.TYPE_ACCELEROMETER) && hasDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)) {      hasRotationSensor=false;      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.ROT_SENSOR_AVAILABILITY,"Disabled - No gyro",1);    } else {      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.ROT_SENSOR_AVAILABILITY,"Disabled - Missing Mag/Accel",0);    }  } else {    analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.ROT_SENSOR_AVAILABILITY,"No rotation",0);  }  if (!preferences.contains(ApplicationConstants.SHARED_PREFERENCE_DISABLE_GYRO)) {    preferences.edit().putBoolean(ApplicationConstants.SHARED_PREFERENCE_DISABLE_GYRO,!hasRotationSensor).apply();  }  int[] importantSensorTypes={Sensor.TYPE_ACCELEROMETER,Sensor.TYPE_GYROSCOPE,Sensor.TYPE_MAGNETIC_FIELD,Sensor.TYPE_LIGHT,Sensor.TYPE_ROTATION_VECTOR,Sensor.TYPE_ORIENTATION};  for (  int sensorType : importantSensorTypes) {    if (hasDefaultSensor(sensorType)) {      Log.i(TAG,"No sensor of type " + sensorType);      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_TYPE + sensorType,"Sensor Absent",0);    } else {      Log.i(TAG,"Sensor present of type " + sensorType);      analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_TYPE + sensorType,"Sensor Present",1);    }  }  Log.d(TAG,"All sensors:");  List<Sensor> allSensors=sensorManager.getSensorList(Sensor.TYPE_ALL);  Set<String> sensorTypes=new HashSet<>();  for (  Sensor sensor : allSensors) {    Log.i(TAG,sensor.getName());    sensorTypes.add(Analytics.getSafeNameForSensor(sensor));  }  Log.d(TAG,"All sensors summary:");  for (  String sensorType : sensorTypes) {    Log.i(TAG,sensorType);    analytics.trackEvent(Analytics.SENSOR_CATEGORY,Analytics.SENSOR_NAME,sensorType,1);  }}  }
class C{  protected Map<Character,Integer> match_alphabet(String pattern){  Map<Character,Integer> s=new HashMap<Character,Integer>();  char[] char_pattern=pattern.toCharArray();  for (  char c : char_pattern) {    s.put(c,0);  }  int i=0;  for (  char c : char_pattern) {    s.put(c,s.get(c) | (1 << (pattern.length() - i - 1)));    i++;  }  return s;}  }
class C{  public boolean hasThree(){  return points.size() > 2;}  }
class C{  public void toWireCanonical(DNSOutput out){  byte[] b=toWireCanonical();  out.writeByteArray(b);}  }
class C{  public void hideLoading(){  if (viewLoading == null) {    throw new NullPointerException("Unable to access Loading View, check if the loading view was initialized");  } else {    isLoadingViewBeingShown=false;    changeViewsVisibility();    setViewVisibility(viewLoading,View.GONE);  }}  }
class C{  public static boolean equals(CharSequence a,CharSequence b){  return TextUtils.equals(a,b);}  }
class C{  public DuplicatePrimaryPartitionException(){  super();}  }
class C{  public String toString(){  return new StringBuffer().append(this.lowValue).append("->").append(this.highValue).toString();}  }
class C{  public void addActionFactory(final IPlayerActionFactory actionFactory){  actionFactories.add(actionFactory);}  }
class C{  private static IFile computeOutFile(IDETsconfigJson tsconfig){  CompilerOptions options=tsconfig.getCompilerOptions();  if (options != null) {    String outFile=options.getOutFile();    if (StringUtils.isEmpty(outFile)) {      outFile=options.getOut();    }    if (StringUtils.isEmpty(outFile)) {      return null;    }    try {      return tsconfig.getTsconfigFile().getParent().getFile(new Path(outFile));    } catch (    Throwable e) {      Trace.trace(Trace.SEVERE,"Error while getting compilerOption/outFile",e);    }  }  return null;}  }
class C{  @Override public Object deepCopy(Object value) throws HibernateException {  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(baos);    oos.writeObject(value);    byte[] bytes=baos.toByteArray();    ByteArrayInputStream baip=new ByteArrayInputStream(bytes);    ObjectInputStream ois=new ObjectInputStream(baip);    return ois.readObject();  } catch (  Exception e) {    throw new HibernateException("Unable to deep copy. Exception: " + e.getMessage());  }}  }
class C{  private int extend(final int required){  final int capacity=Math.max(required,capacity() * 2);  if (log.isInfoEnabled())   log.info("Extending buffer to capacity=" + capacity + " bytes.");  return capacity;}  }
class C{  public int length(){  return array.length();}  }
class C{  public int size(){  return revokes.size();}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  protected ConvertedMap(Map closures){  super(closures);}  }
class C{  public void addBookmarkedURL(String URL,String name,boolean isRSS) throws XMPPException {  retrieveBookmarks();  BookmarkedURL bookmark=new BookmarkedURL(URL,name,isRSS);  List<BookmarkedURL> urls=bookmarks.getBookmarkedURLS();  if (urls.contains(bookmark)) {    BookmarkedURL oldURL=urls.get(urls.indexOf(bookmark));    if (oldURL.isShared()) {      throw new IllegalArgumentException("Cannot modify shared bookmarks");    }    oldURL.setName(name);    oldURL.setRss(isRSS);  } else {    bookmarks.addBookmarkedURL(bookmark);  }  privateDataManager.setPrivateData(bookmarks);}  }
class C{  private void adjustActivationWithoutCatalog(List<VOServiceActivation> activations,int index,boolean active){  VOServiceActivation activation=activations.get(index);  activation.setActive(active);}  }
class C{  private boolean queryCommandEnabled(final String commandIdentifier){  Check.notNull(commandIdentifier,"command");  final StringBuffer cmd=new StringBuffer();  cmd.append("return editor.queryCommandEnabled(\"");  cmd.append(commandIdentifier);  cmd.append("\") || ''");  final Object ret=browser.evaluate(cmd.toString());  if (ret instanceof Boolean == false) {    return false;  }  return ((Boolean)ret).booleanValue();}  }
class C{  public ScrollFrame(int x,int y){  this(new Offset((double)x,(double)y,AVKey.PIXELS,AVKey.INSET_PIXELS));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.STATUS__PROPERTIES:    return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void clear(){  EntityAttributeManager.instance().clearHash();  nodes.clear();  ways.clear();  pois.clear();  markers.clear();  tracks.clear();  entityTree=null;  boundingBox=null;  fireMapDataEvent(new MapEvent(this,MapEvent.Type.MAP_CLEARED));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_BINDING__PATTERN:    setPattern((BindingPattern)null);  return;case N4JSPackage.VARIABLE_BINDING__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,char value){  if (extras == null) {    extras=new Bundle();  }  extras.putChar(name,value);  return this;}  }
class C{  public static void v(String tag,String s,Object... args){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));}  }
class C{  private static PropertyTable buildPropertyTable(final Composite composite){  final PropertyTable table=new PropertyTable(composite,SWT.NONE);  table.showButtons();  table.viewAsCategories();  table.showDescription();  table.addProperty(new PTProperty("id","Identifier","Description for identifier","My id")).setCategory("General");  table.addProperty(new PTProperty("text","Description","Description for the description field","blahblah...")).setCategory("General");  table.addProperty(new PTProperty("url","URL:","This is a nice <b>URL</b>","http://www.google.com").setCategory("General")).setEditor(new PTURLEditor());  table.addProperty(new PTProperty("password","Password","Enter your <i>password</i> and keep it secret...","password")).setCategory("General").setEditor(new PTPasswordEditor());  table.addProperty(new PTProperty("int","An integer","Type any integer","123")).setCategory("Number").setEditor(new PTIntegerEditor());  table.addProperty(new PTProperty("float","A float","Type any float","123.45")).setCategory("Number").setEditor(new PTFloatEditor());  table.addProperty(new PTProperty("spinner","Another integer","Use a spinner to enter an integer")).setCategory("Number").setEditor(new PTSpinnerEditor(0,100));  table.addProperty(new PTProperty("directory","Directory","Select a directory")).setCategory("Directory/File").setEditor(new PTDirectoryEditor());  table.addProperty(new PTProperty("file","File","Select a file")).setCategory("Directory/File").setEditor(new PTFileEditor());  table.addProperty(new PTProperty("comboReadOnly","Combo (read-only)","A simple combo with seasons")).setCategory("Combo").setEditor(new PTComboEditor(true,new Object[]{"Spring","Summer","Autumn","Winter"}));  table.addProperty(new PTProperty("combo","Combo","A combo that is not read-only")).setCategory("Combo").setEditor(new PTComboEditor("Value 1","Value 2","Value 3"));  table.addProperty(new PTProperty("cb","Checkbox","A checkbox")).setCategory("Checkbox").setEditor(new PTCheckboxEditor()).setCategory("Checkbox");  table.addProperty(new PTProperty("cb2","Checkbox (disabled)","A disabled checkbox...")).setEditor(new PTCheckboxEditor()).setCategory("Checkbox").setEnabled(false);  table.addProperty(new PTProperty("color","Color","Pick it !")).setCategory("Misc").setEditor(new PTColorEditor());  table.addProperty(new PTProperty("font","Font","Pick again my friend")).setEditor(new PTFontEditor()).setCategory("Misc");  table.addProperty(new PTProperty("dimension","Dimension","A dimension is composed of a width and a height")).setCategory("Misc").setEditor(new PTDimensionEditor());  table.addProperty(new PTProperty("rectangle","Rectangle","A rectangle is composed of a position (x,y) and a dimension(width,height)")).setCategory("Misc").setEditor(new PTRectangleEditor());  table.addProperty(new PTProperty("inset","Inset","An inset is composed of the following fields:top,left,bottom,right)")).setCategory("Misc").setEditor(new PTInsetsEditor());  table.addProperty(new PTProperty("date","Date","Well, is there something more to say ?")).setCategory("Misc").setEditor(new PTDateEditor());  return table;}  }
class C{  public boolean needSave(){  return m_needSave;}  }
class C{  private static Map<Node,InductionVariable> findInductionVariables(LoopEx loop){  Map<Node,InductionVariable> ivs=newIdentityMap();  Queue<InductionVariable> scanQueue=new LinkedList<>();  LoopBeginNode loopBegin=loop.loopBegin();  AbstractEndNode forwardEnd=loopBegin.forwardEnd();  for (  PhiNode phi : loopBegin.phis().filter(ValuePhiNode.class)) {    ValueNode backValue=phi.singleBackValue();    if (backValue == PhiNode.MULTIPLE_VALUES) {      continue;    }    ValueNode stride=addSub(loop,backValue,phi);    if (stride != null) {      BasicInductionVariable biv=new BasicInductionVariable(loop,(ValuePhiNode)phi,phi.valueAt(forwardEnd),stride,(BinaryArithmeticNode<?>)backValue);      ivs.put(phi,biv);      scanQueue.add(biv);    }  }  while (!scanQueue.isEmpty()) {    InductionVariable baseIv=scanQueue.remove();    ValueNode baseIvNode=baseIv.valueNode();    for (    ValueNode op : baseIvNode.usages().filter(ValueNode.class)) {      if (loop.isOutsideLoop(op)) {        continue;      }      if (op.usages().count() == 1 && op.usages().first() == baseIvNode) {        continue;      }      InductionVariable iv=null;      ValueNode offset=addSub(loop,op,baseIvNode);      ValueNode scale;      if (offset != null) {        iv=new DerivedOffsetInductionVariable(loop,baseIv,offset,(BinaryArithmeticNode<?>)op);      } else       if (op instanceof NegateNode) {        iv=new DerivedScaledInductionVariable(loop,baseIv,(NegateNode)op);      } else       if ((scale=mul(loop,op,baseIvNode)) != null) {        iv=new DerivedScaledInductionVariable(loop,baseIv,scale,op);      } else {        boolean isValidConvert=op instanceof PiNode || op instanceof SignExtendNode;        if (!isValidConvert && op instanceof ZeroExtendNode) {          IntegerStamp inputStamp=(IntegerStamp)((ZeroExtendNode)op).getValue().stamp();          isValidConvert=inputStamp.isPositive();        }        if (isValidConvert) {          iv=new DerivedConvertedInductionVariable(loop,baseIv,op.stamp(),op);        }      }      if (iv != null) {        ivs.put(op,iv);        scanQueue.offer(iv);      }    }  }  return Collections.unmodifiableMap(ivs);}  }
class C{  protected Expression parseNewInstanceExpression(long p,Expression outerArg,Expression type) throws SyntaxError, IOException {  int i=argIndex;  expect(LPAREN);  if (token != RPAREN) {    addArgument(parseExpression());    while (token == COMMA) {      scan();      addArgument(parseExpression());    }  }  expect(RPAREN);  ClassDefinition body=null;  if (token == LBRACE && !(type instanceof TypeExpression)) {    long tp=pos;    Identifier superName=FieldExpression.toIdentifier(type);    if (superName == null) {      env.error(type.getWhere(),"type.expected");    }    Vector ext=new Vector(1);    Vector impl=new Vector(0);    ext.addElement(new IdentifierToken(idNull));    if (token == IMPLEMENTS || token == EXTENDS) {      env.error(pos,"anonymous.extends");      parseInheritance(ext,impl);    }    body=parseClassBody(new IdentifierToken(tp,idNull),M_ANONYMOUS | M_LOCAL,EXPR,null,ext,impl,type.getWhere());  }  if (outerArg == null && body == null) {    return new NewInstanceExpression(p,type,exprArgs(i));  }  return new NewInstanceExpression(p,type,exprArgs(i),outerArg,body);}  }
class C{  public XMLParser(final String namespace,final String schema) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(namespace);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schema));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schema));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + namespace,e);  }}  }
class C{  @Override protected Boolean reduce(Boolean r1,Boolean r2){  if (r1 == null) {    return r2;  } else   if (r2 == null) {    return r1;  } else {    return r1 && r2;  }}  }
class C{  public boolean reverseWay(final Way way){  dirty=true;  undo.save(way);  Map<String,String> dirTags=Reverse.getDirectionDependentTags(way);  if (dirTags != null) {    Reverse.reverseDirectionDependentTags(way,dirTags,false);  }  reverseWayNodeTags(way.getNodes());  way.reverse();  List<Relation> relations=Reverse.getRelationsWithDirectionDependentRoles(way);  if (relations != null) {    Reverse.reverseRoleDirection(way,relations);    for (    Relation r : relations) {      r.updateState(OsmElement.STATE_MODIFIED);      try {        apiStorage.insertElementSafe(r);      } catch (      StorageException e) {        e.printStackTrace();      }    }  }  way.updateState(OsmElement.STATE_MODIFIED);  try {    apiStorage.insertElementSafe(way);    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }  return ((dirTags != null) && dirTags.containsKey(Tags.KEY_ONEWAY));}  }
class C{  public SampledGraphProjectionBuilder(){  super(new SampledGraphProjectionFactory<G,V,E>());}  }
class C{  public static String[] splitStringIntoArray(String value){  String[] values=new String[0];  if (value != null && value.length() > 0) {    if (value.indexOf(CIMConstants.COMMA_SEPERATOR) != -1) {      values=value.split(",");    } else {      values=new String[1];      values[0]=value;    }  }  return values;}  }
class C{  public static boolean renameFile(final File fromFile,final File toFile){  File toFile2=toFile;  if (fromFile.renameTo(toFile)) {    return true;  }  if (!fromFile.exists()) {    return false;  }  if (!fromFile.canRead()) {    return false;  }  if (toFile.isDirectory()) {    toFile2=new File(toFile,fromFile.getName());  }  if (toFile2.exists()) {    return false;  }  String parent=toFile2.getParent();  if (parent == null)   parent=System.getProperty("user.dir");  File dir=new File(parent);  if (!dir.exists()) {    return false;  }  if (!dir.canWrite()) {    return false;  }  try {    copyFile(fromFile,toFile2);  } catch (  UncheckedIOException e) {    if (toFile2.exists())     toFile2.delete();    return false;  }  fromFile.delete();  return true;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeUTF(this.facetName);}  }
class C{  public ZipUtil(String fileName){  open(fileName);}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public boolean isScanAvailableNetworks(){  return scanAvailableNetworks;}  }
class C{  public GetFieldMappingsRequest includeDefaults(boolean includeDefaults){  this.includeDefaults=includeDefaults;  return this;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDimmedLayer(canvas);  drawCropGrid(canvas);}  }
class C{  public _ScheduleDays(){  super();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void map(Text key,Node node,OutputCollector<FloatWritable,Text> output,Reporter reporter) throws IOException {  float number=0;  if (inlinks) {    number=node.getNumInlinks();  } else   if (outlinks) {    number=node.getNumOutlinks();  } else {    number=node.getInlinkScore();  }  output.collect(new FloatWritable(-number),key);}  }
class C{  @SuppressWarnings("unchecked") public final void integrityCheck(AbstractMTree<O,N,E,?> mTree,E entry){  if (isLeaf()) {    for (int i=0; i < getCapacity(); i++) {      E e=getEntry(i);      if (i < getNumEntries() && e == null) {        throw new InconsistentDataException("i < numEntries && entry == null");      }      if (i >= getNumEntries() && e != null) {        throw new InconsistentDataException("i >= numEntries && entry != null");      }    }  } else {    N tmp=mTree.getNode(getEntry(0));    boolean childIsLeaf=tmp.isLeaf();    for (int i=0; i < getCapacity(); i++) {      E e=getEntry(i);      if (i < getNumEntries() && e == null) {        throw new InconsistentDataException("i < numEntries && entry == null");      }      if (i >= getNumEntries() && e != null) {        throw new InconsistentDataException("i >= numEntries && entry != null");      }      if (e != null) {        N node=mTree.getNode(e);        if (childIsLeaf && !node.isLeaf()) {          for (int k=0; k < getNumEntries(); k++) {            mTree.getNode(getEntry(k));          }          throw new InconsistentDataException("Wrong Child in " + this + " at "+ i);        }        if (!childIsLeaf && node.isLeaf()) {          throw new InconsistentDataException("Wrong Child: child id no leaf, but node is leaf!");        }        node.integrityCheckParameters(entry,(N)this,i,mTree);        node.integrityCheck(mTree,e);      }    }    if (LoggingConfiguration.DEBUG) {      Logger.getLogger(this.getClass().getName()).fine("DirNode " + getPageID() + " ok!");    }  }}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public void reEvaluateStacking(){  List<MediaFile> mfs=getMediaFiles(MediaFileType.VIDEO);  if (mfs.size() > 1 && !isDisc()) {    this.setStacked(true);    for (    MediaFile mf : getMediaFiles(MediaFileType.VIDEO,MediaFileType.AUDIO,MediaFileType.SUBTITLE)) {      mf.detectStackingInformation();    }  } else {    this.setStacked(false);    for (    MediaFile mf : getMediaFiles(MediaFileType.VIDEO,MediaFileType.AUDIO,MediaFileType.SUBTITLE)) {      mf.removeStackingInformation();    }  }}  }
class C{  private void resizeText(){  final int availableHeightPixels=getHeight() - getCompoundPaddingBottom() - getCompoundPaddingTop();  final int availableWidthPixels=getWidth() - getCompoundPaddingLeft() - getCompoundPaddingRight();  final CharSequence text=getText();  if (text == null || text.length() <= 0 || availableHeightPixels <= 0 || availableWidthPixels <= 0 || mMaxTextSizePixels <= 0) {    return;  }  float targetTextSizePixels=mMaxTextSizePixels;  int targetTextHeightPixels=getTextHeightPixels(text,availableWidthPixels,targetTextSizePixels);  while (targetTextHeightPixels > availableHeightPixels && targetTextSizePixels > mMinTextSizePixels) {    targetTextSizePixels=Math.max(targetTextSizePixels - 2,mMinTextSizePixels);    targetTextHeightPixels=getTextHeightPixels(text,availableWidthPixels,targetTextSizePixels);  }  if (getEllipsize() != null && targetTextSizePixels == mMinTextSizePixels && targetTextHeightPixels > availableHeightPixels) {    TextPaint textPaintCopy=new TextPaint(getPaint());    textPaintCopy.setTextSize(targetTextSizePixels);    StaticLayout staticLayout=new StaticLayout(text,textPaintCopy,availableWidthPixels,Layout.Alignment.ALIGN_NORMAL,mLineSpacingMultiplier,mLineSpacingExtra,false);    if (staticLayout.getLineCount() > 0) {      int lastLine=staticLayout.getLineForVertical(availableHeightPixels) - 1;      if (lastLine >= 0) {        int startOffset=staticLayout.getLineStart(lastLine);        int endOffset=staticLayout.getLineEnd(lastLine);        float lineWidthPixels=staticLayout.getLineWidth(lastLine);        float ellipseWidth=textPaintCopy.measureText(mEllipsis);        while (availableWidthPixels < lineWidthPixels + ellipseWidth) {          endOffset--;          lineWidthPixels=textPaintCopy.measureText(text.subSequence(startOffset,endOffset + 1).toString());        }        setText(text.subSequence(0,endOffset) + mEllipsis);      }    }  }  super.setTextSize(TypedValue.COMPLEX_UNIT_PX,targetTextSizePixels);  super.setLineSpacing(mLineSpacingExtra,mLineSpacingMultiplier);}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  protected void runTLCPreLoop(){  this.done=false;}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    return false;  }  K[] keys=_keys;  for (int i=_size - 1; i >= 0; i--) {    K testKey=keys[i];    if (key.equals(testKey)) {      return true;    }  }  return false;}  }
class C{  boolean isTransition(int savingsBeforeSecs){  return savingAmountSecs != savingsBeforeSecs;}  }
class C{  public boolean contains(String displayName){  return m_Methods.containsKey(displayName);}  }
class C{  protected static List primitiveArrayGet(Object self,Range range){  List answer=new ArrayList();  for (  Object next : range) {    int idx=DefaultTypeTransformation.intUnbox(next);    answer.add(primitiveArrayGet(self,idx));  }  return answer;}  }
class C{  public final Children inferiors(){  return inferiors;}  }
class C{  public static String login(TestNodeGroupManager nodeGroup,String username,String password){  ServiceHost peer=nodeGroup.getHost();  return login(peer,username,password,true);}  }
class C{  private long checkKey(Key key){  CRC32 checksum=new CRC32();  checksum.update(key.type);  checksum.update((int)(key.id & 0xffff));  checksum.update((int)((key.id >> 32) & 0xffff));  if (!TextUtils.isEmpty(key.name)) {    checksum.update(key.name.getBytes());  }  return checksum.getValue();}  }
class C{  void test(int[] state){  int a1=state[0];  int b1=state[1];  int c1=state[2];  int d1=state[3];  int e1=state[4];  int f1=state[5];  int g1=state[6];  int h1=state[7];  int a2=state[8];  int b2=state[9];  int c2=state[10];  int d2=state[11];  int e2=state[12];  int f2=state[13];  int g2=state[14];  int h2=state[15];  for (int i=0; i < ITERATION; i++) {    h1=g1;    g1=f1;    f1=e1;    e1=d1;    d1=c1;    c1=b1;    b1=a1;    a1=h1;    h2=g2;    g2=f2;    f2=e2;    e2=d2;    d2=c2;    c2=b2;    b2=a2;    a2=h2;  }  state[0]+=a1;  state[1]+=b1;  state[2]+=c1;  state[3]+=d1;  state[4]+=e1;  state[5]+=f1;  state[6]+=g1;  state[7]+=h1;  state[8]+=a2;  state[9]+=b2;  state[10]+=c2;  state[11]+=d2;  state[12]+=e2;  state[13]+=f2;  state[14]+=g2;  state[15]+=h2;}  }
class C{  static protected String valueToString(Object value){  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  private void loadChildrenImpl(final String parentMediaId,final Result<List<MediaBrowserCompat.MediaItem>> result){  LogUtils.d(TAG,"OnLoadChildren: parentMediaId=",parentMediaId);  List<MediaBrowserCompat.MediaItem> mediaItems=new ArrayList<>();  if (MEDIA_ID_ROOT.equals(parentMediaId)) {    LogUtils.d(TAG,"OnLoadChildren.ROOT");    mediaItems.add(new MediaBrowserCompat.MediaItem(new MediaDescriptionCompat.Builder().setMediaId(MEDIA_ID_MUSICS_BY_GENRE).setTitle(getString(R.string.browse_genres)).setIconUri(Uri.parse("android.resource://markzhai.lyrichere.app/drawable/ic_by_genre")).setSubtitle(getString(R.string.browse_genre_subtitle)).build(),MediaBrowserCompat.MediaItem.FLAG_BROWSABLE));    mediaItems.add(new MediaBrowserCompat.MediaItem(new MediaDescriptionCompat.Builder().setMediaId(MEDIA_ID_MUSICS_BY_ARTIST).setTitle(getString(R.string.browse_artists)).setIconUri(Uri.parse("android.resource://markzhai.lyrichere.app/drawable/ic_by_artist")).setSubtitle(getString(R.string.browse_artist_subtitle)).build(),MediaBrowserCompat.MediaItem.FLAG_BROWSABLE));    mediaItems.add(new MediaBrowserCompat.MediaItem(new MediaDescriptionCompat.Builder().setMediaId(MEDIA_ID_MUSICS_BY_ALBUM).setTitle(getString(R.string.browse_albums)).setIconUri(Uri.parse("android.resource://markzhai.lyrichere.app/drawable/ic_by_album")).setSubtitle(getString(R.string.browse_album_subtitle)).build(),MediaBrowserCompat.MediaItem.FLAG_BROWSABLE));  } else   if (MEDIA_ID_MUSICS_BY_GENRE.equals(parentMediaId)) {    LogUtils.d(TAG,"OnLoadChildren.GENRES");    for (    String genre : mMusicProvider.getGenres()) {      MediaBrowserCompat.MediaItem item=new MediaBrowserCompat.MediaItem(new MediaDescriptionCompat.Builder().setMediaId(createBrowseCategoryMediaID(MEDIA_ID_MUSICS_BY_GENRE,genre)).setTitle(genre).setSubtitle(getString(R.string.browse_musics_by_genre_subtitle,genre)).build(),MediaBrowserCompat.MediaItem.FLAG_BROWSABLE);      mediaItems.add(item);    }  } else   if (MEDIA_ID_MUSICS_BY_ARTIST.equals(parentMediaId)) {    LogUtils.d(TAG,"OnLoadChildren.ARTISTS");    for (    String artist : mMusicProvider.getArtists()) {      MediaBrowserCompat.MediaItem item=new MediaBrowserCompat.MediaItem(new MediaDescriptionCompat.Builder().setMediaId(createBrowseCategoryMediaID(MEDIA_ID_MUSICS_BY_ARTIST,artist)).setTitle(artist).setSubtitle(getString(R.string.browse_musics_by_genre_subtitle,artist)).build(),MediaBrowserCompat.MediaItem.FLAG_BROWSABLE);      mediaItems.add(item);    }  } else   if (MEDIA_ID_MUSICS_BY_ALBUM.equals(parentMediaId)) {    LogUtils.d(TAG,"OnLoadChildren.ALBUMS");    for (    String album : mMusicProvider.getAlbums()) {      MediaBrowserCompat.MediaItem item=new MediaBrowserCompat.MediaItem(new MediaDescriptionCompat.Builder().setMediaId(createBrowseCategoryMediaID(MEDIA_ID_MUSICS_BY_ALBUM,album)).setTitle(album).setIconUri(Uri.parse(mMusicProvider.getAlbumArt(album))).setSubtitle(getString(R.string.browse_musics_by_genre_subtitle,album)).build(),MediaBrowserCompat.MediaItem.FLAG_BROWSABLE);      mediaItems.add(item);    }  } else   if (parentMediaId.startsWith(MEDIA_ID_MUSICS_BY_GENRE)) {    String genre=MediaIDHelper.getHierarchy(parentMediaId)[1];    LogUtils.d(TAG,"OnLoadChildren.SONGS_BY_GENRE  genre=",genre);    for (    MediaMetadataCompat track : mMusicProvider.getMusicsByGenre(genre)) {      String hierarchyAwareMediaID=MediaIDHelper.createMediaID(track.getDescription().getMediaId(),MEDIA_ID_MUSICS_BY_GENRE,genre);      MediaMetadataCompat trackCopy=new MediaMetadataCompat.Builder(track).putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID,hierarchyAwareMediaID).build();      MediaBrowserCompat.MediaItem bItem=new MediaBrowserCompat.MediaItem(trackCopy.getDescription(),MediaBrowserCompat.MediaItem.FLAG_PLAYABLE);      mediaItems.add(bItem);    }  } else   if (parentMediaId.startsWith(MEDIA_ID_MUSICS_BY_ARTIST)) {    String artist=MediaIDHelper.getHierarchy(parentMediaId)[1];    LogUtils.d(TAG,"OnLoadChildren.SONGS_BY_ARTIST  artist=",artist);    for (    MediaMetadataCompat track : mMusicProvider.getMusicsByArtist(artist)) {      String hierarchyAwareMediaID=MediaIDHelper.createMediaID(track.getDescription().getMediaId(),MEDIA_ID_MUSICS_BY_ARTIST,artist);      MediaMetadataCompat trackCopy=new MediaMetadataCompat.Builder(track).putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID,hierarchyAwareMediaID).build();      MediaBrowserCompat.MediaItem bItem=new MediaBrowserCompat.MediaItem(trackCopy.getDescription(),MediaBrowserCompat.MediaItem.FLAG_PLAYABLE);      mediaItems.add(bItem);    }  } else   if (parentMediaId.startsWith(MEDIA_ID_MUSICS_BY_ALBUM)) {    String album=MediaIDHelper.getHierarchy(parentMediaId)[1];    LogUtils.d(TAG,"OnLoadChildren.SONGS_BY_ALBUM  album=",album);    for (    MediaMetadataCompat track : mMusicProvider.getMusicsByAlbum(album)) {      String hierarchyAwareMediaID=MediaIDHelper.createMediaID(track.getDescription().getMediaId(),MEDIA_ID_MUSICS_BY_ALBUM,album);      MediaMetadataCompat trackCopy=new MediaMetadataCompat.Builder(track).putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID,hierarchyAwareMediaID).build();      MediaBrowserCompat.MediaItem bItem=new MediaBrowserCompat.MediaItem(trackCopy.getDescription(),MediaBrowserCompat.MediaItem.FLAG_PLAYABLE);      mediaItems.add(bItem);    }  } else {    LogUtils.w(TAG,"Skipping unmatched parentMediaId: ",parentMediaId);  }  LogUtils.d(TAG,"OnLoadChildren sending ",mediaItems.size()," results for ",parentMediaId);  result.sendResult(mediaItems);}  }
class C{  public synchronized void clearSessions(Context context,Boolean clearCredentials){synchronized (LOG_TAG) {    while (mMXSessions.size() > 0) {      clearSession(context,mMXSessions.get(0),clearCredentials);    }  }}  }
class C{  public static boolean checkForSupportedThreadDump(String logLine){  return (logLine.trim().indexOf("===== FULL THREAD DUMP ===============") >= 0);}  }
class C{  public static final String createXMLMessage(String msgKey,Object args[]){  return createMsg(XMLBundle,msgKey,args);}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  @Override public boolean isWeaponBlockedAt(int loc,boolean isRear){  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected SVGOMFECompositeElement(){}  }
class C{  public void markChanges(SerialReply l){  try {    for (int i=0; i <= lastUsedSensor; i++) {      if (sensorArray[i] == null) {        continue;      }      int loc=i / 8;      if (loc + 2 >= l.getNumDataElements()) {        continue;      }      int bit=i % 8;      boolean value=(((l.getElement(loc + 2) >> bit) & 0x01) == 1) ^ sensorArray[i].getInverted();      if (value) {        if (((sensorTempSetting[i] == Sensor.ACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.ACTIVE)) {          sensorLastSetting[i]=Sensor.ACTIVE;          sensorArray[i].setKnownState(Sensor.ACTIVE);        }        sensorTempSetting[i]=Sensor.ACTIVE;      } else {        if (((sensorTempSetting[i] == Sensor.INACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.INACTIVE)) {          sensorLastSetting[i]=Sensor.INACTIVE;          sensorArray[i].setKnownState(Sensor.INACTIVE);        }        sensorTempSetting[i]=Sensor.INACTIVE;      }    }  } catch (  JmriException e) {    log.error("exception in markChanges: " + e);  }}  }
class C{  public boolean isDoubleBufferingEnabled(){  return doubleBufferingEnabled;}  }
class C{  @Override public void put(double val){  n+=1.0;  final double delta=val - m1;  m1+=delta / n;  m2+=delta * (val - m1);}  }
class C{  public String posTagging(String text){  String ret=text;  if (vnPosTagger != null) {    ret=vnPosTagger.tagging(text);  }  return ret;}  }
class C{  protected boolean hasSpaceUp(){  return false;}  }
class C{  public ToHitData toHit(IGame game){  return toHit(game,game.getTarget(getTargetType(),getTargetId()));}  }
class C{  @Override public boolean okPressed(){  setLastPath(fileChooser.getCurrentDirectory().getAbsolutePath());  return (landscapePath != null);}  }
class C{  @Override public void removeCustomTileFromListener(ICustomTileListener token,String pkg,String tag,int id){  final int callingUid=Binder.getCallingUid();  final int callingPid=Binder.getCallingPid();  long identity=Binder.clearCallingIdentity();  try {synchronized (mQSTileList) {      final ManagedServices.ManagedServiceInfo info=mCustomTileListeners.checkServiceTokenLocked(token);      removeCustomTileFromListenerLocked(info,callingUid,callingPid,pkg,tag,id,info.userid);    }  }  finally {    Binder.restoreCallingIdentity(identity);  }}  }
class C{  void removeLocalTempTableConstraint(Constraint constraint){  if (localTempTableConstraints != null) {    localTempTableConstraints.remove(constraint.getName());synchronized (database) {      constraint.removeChildrenAndResources(this);    }  }}  }
class C{  public TcpHarvester(List<TransportAddress> transportAddresses,boolean ssltcp) throws IOException {  super(transportAddresses);  this.ssltcp=ssltcp;}  }
class C{  public void addAddDeleteButtons(){  JButton deleteButton=new JButton("Delete");  deleteButton.setAction(RasterPlotActions.getRemoveSourceAction(this));  JButton addButton=new JButton("Add");  addButton.setAction(RasterPlotActions.getAddSourceAction(this));  buttonPanel.add(deleteButton);  buttonPanel.add(addButton);}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final String[] value) throws XMLStreamException {  if (value == null || value.length == 0) {    return;  }  writer.writeStartElement(elementName);  for (int i=0; i < value.length; i++) {    writer.writeStartElement("string");    writer.writeCharacters(value[i]);    writer.writeEndElement();  }  writer.writeEndElement();}  }
class C{  public RectangleConstraint(double w,Range widthRange,LengthConstraintType widthConstraintType,double h,Range heightRange,LengthConstraintType heightConstraintType){  ParamChecks.nullNotPermitted(widthConstraintType,"widthConstraintType");  ParamChecks.nullNotPermitted(heightConstraintType,"heightConstraintType");  this.width=w;  this.widthRange=widthRange;  this.widthConstraintType=widthConstraintType;  this.height=h;  this.heightRange=heightRange;  this.heightConstraintType=heightConstraintType;}  }
class C{  public static void shuffle(Object[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public void append(StringBuffer buffer,String fieldName,boolean value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  protected void sequence_Term_UnicodeEscapeSequence(ISerializationContext context,UnicodeEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testSystemId(){  String expectedName="anEntity";  String expectedPublicID=null;  String expectedSystemID="http://www.myorg.org/foo";  String expectedText="<!ENTITY anEntity " + "SYSTEM \"http://www.myorg.org/foo\" >";  ExternalEntityDecl actual=new ExternalEntityDecl(expectedName,expectedPublicID,expectedSystemID);  assertEquals("name is correct",expectedName,actual.getName());  assertEquals("publicID is correct",expectedPublicID,actual.getPublicID());  assertEquals("systemID is correct",expectedSystemID,actual.getSystemID());  assertEquals("toString() is correct",expectedText,actual.toString());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.583 -0500",hash_original_method="4DD589701E4616BA47B948814EEFA62E",hash_generated_method="CDAFBC587B77D8A86F03744E5A7B44EE") public static int red(int color){  return (color >> 16) & 0xFF;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private int keepSpriteOnMapX(Sprite sprite,int sx){  sx=Math.max(sx,0);  if (ww != 0) {    sx=Math.min(sx,Math.max(getWidth() + svx,convertWorldXToScaledScreen(ww)) - sprite.getWidth());  }  return sx;}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  private static List<Object> createListTestValueForAny(){  final ArrayList<Object> objects=new ArrayList<>();  objects.add(new JsonParser().parse("{x:1}"));  objects.add(new JsonParser().parse("{b:120}"));  return objects;}  }
class C{  public File(String fileName,int fileSize) throws ParameterException {  if (fileName == null || fileName.length() == 0) {    throw new ParameterException("File(): Error - invalid file name.");  }  if (fileSize <= 0) {    throw new ParameterException("File(): Error - size <= 0.");  }  name=fileName;  attribute=new FileAttribute(fileName,fileSize);  transactionTime=0;}  }
class C{  public CSVReaderBuilder withSkipLines(final int skipLines){  this.skipLines=(skipLines <= 0 ? 0 : skipLines);  return this;}  }
class C{  private DomainApplication updateApplication(DomainApplication application){  return application.asBuilder().setApplicationStatus(ApplicationStatus.ALLOCATED).removeStatusValue(StatusValue.PENDING_CREATE).build();}  }
class C{  public boolean noStore(){  return noStore;}  }
class C{  @RequestMapping(value="/{type}/{uuid}",method={RequestMethod.POST}) @ResponseBody public List<AccessEntryResponse> grant(@PathVariable String type,@PathVariable String uuid,@RequestBody AccessRequest accessRequest){  AclEntity ae=accessService.getAclEntity(type,uuid);  Sid sid=accessService.getSid(accessRequest.getSid(),accessRequest.isPrincipal());  Permission permission=AclPermissionFactory.getPermission(accessRequest.getPermission());  Acl acl=accessService.grant(ae,permission,sid);  return accessService.generateAceResponses(acl);}  }
class C{  public static KafkaStream of(final Map<String,Object> cfg){  return new KafkaStream(cfg);}  }
class C{  public ConfigExceptionLocation(){}  }
class C{  @SuppressWarnings("unchecked") private static int find(Object[] arr,Object val,int bnd,int l,int r,Comparator c){  int m=l;  int d=1;  while (m <= r) {    if (c.compare(val,arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;      break;    }    m+=d;    d<<=1;  }  while (l <= r) {    m=(l + r) >>> 1;    if (c.compare(val,arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;    }  }  return l - 1;}  }
class C{  protected RemoteObject(){  ref=null;}  }
class C{  static long insertName(final Journal jrnl,final String name){  IIndex index=jrnl.getIndex("TestIndex");  index.remove("Name");  index.insert("Name",name);  final long ret=jrnl.commit();  if (!name.equals(index.lookup("Name"))) {    throw new AssertionError(name + " != " + index.lookup("Name"));  }  return ret;}  }
class C{  private void sendRegistrationToServer(String token) throws IOException {  final GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Plus.API).addScope(Plus.SCOPE_PLUS_PROFILE).build();  googleApiClient.blockingConnect();  Bundle registration=createRegistrationBundle(googleApiClient);  registration.putString(PingerKeys.REGISTRATION_TOKEN,token);  GoogleCloudMessaging.getInstance(this).send(FriendlyPingUtil.getServerUrl(this),String.valueOf(System.currentTimeMillis()),registration);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private static boolean shouldForceClassicVM(Sdk jdk){  if (SystemInfo.isMac) {    return false;  }  if (jdk == null)   return false;  String version=JdkUtil.getJdkMainAttribute(jdk,Attributes.Name.IMPLEMENTATION_VERSION);  if (version != null) {    if (version.compareTo("1.4") >= 0) {      return false;    }    if (version.startsWith("1.2") && SystemInfo.isWindows) {      return true;    }    version+=".0";    if (version.startsWith("1.3.0") && SystemInfo.isWindows) {      return true;    }    if ((version.startsWith("1.3.1_07") || version.startsWith("1.3.1_08")) && SystemInfo.isWindows) {      return false;    }  }  return DebuggerSettings.getInstance().FORCE_CLASSIC_VM;}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  private static ReilOperand check2(final ReilOperand secondOperand){  Preconditions.checkNotNull(secondOperand,"Error: Second operand can not be null");  return secondOperand;}  }
class C{  public static final int writeInt(int val,byte[] dest,int pos){  dest[pos++]=(byte)(val >>> 8);  dest[pos++]=(byte)val;  return pos;}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public void mouseEntered(MouseEvent e){  if (isVisible())   e.consume();}  }
class C{  public static BufferedImage createBufferedImage(String format,int width,int height){  if (ImageConstants.WBMP.equalsIgnoreCase(format)) {    return new BufferedImage(width,height,BufferedImage.TYPE_BYTE_BINARY);  }  if (ImageConstants.JPG.equalsIgnoreCase(format)) {    return new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  }  if (ImageConstants.BMP.equalsIgnoreCase(format)) {    return new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  }  return new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);}  }
class C{  public long nextLong(long itemcount){  if (itemcount != countforzeta) {synchronized (this) {      if (itemcount > countforzeta) {        zetan=zeta(countforzeta,itemcount,theta,zetan);        eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);      } else       if ((itemcount < countforzeta) && (allowitemcountdecrease)) {        System.err.println("WARNING: Recomputing Zipfian distribtion. This is slow and should be avoided. (itemcount=" + itemcount + " countforzeta="+ countforzeta+ ")");        zetan=zeta(itemcount,theta);        eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);      }    }  }  double u=random.nextDouble();  double uz=u * zetan;  if (uz < 1.0) {    return 0;  }  if (uz < 1.0 + Math.pow(0.5,theta)) {    return 1;  }  long ret=base + (long)((itemcount) * Math.pow(eta * u - eta + 1,alpha));  setLastInt((int)ret);  return ret;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.302 -0500",hash_original_method="E64504FDFA81026BF4EAE79A420D3010",hash_generated_method="93138780AA183F7F543C2CE5B8DA3BEA") private int addOrUpdateNetwork(WifiConfiguration config){  try {    return mService.addOrUpdateNetwork(config);  } catch (  RemoteException e) {    return -1;  }}  }
class C{  public void testPageLock(final View v){  final Intent testActivity=new Intent(this,TestPageLock.class);  startActivity(testActivity);}  }
class C{  public PermissionExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void destroy(){}  }
class C{  void checkSecurityManager(Class<?> refc,MemberName m){  SecurityManager smgr=System.getSecurityManager();  if (smgr == null)   return;  if (allowedModes == TRUSTED)   return;  boolean fullPowerLookup=hasPrivateAccess();  if (!fullPowerLookup || !VerifyAccess.classLoaderIsAncestor(lookupClass,refc)) {    ReflectUtil.checkPackageAccess(refc);  }  if (m.isPublic())   return;  if (!fullPowerLookup) {    smgr.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);  }  Class<?> defc=m.getDeclaringClass();  if (!fullPowerLookup && defc != refc) {    ReflectUtil.checkPackageAccess(defc);  }}  }
class C{  public boolean isNumber(String s){  int len=s.length();  int i=0, e=len - 1;  while (i <= e && Character.isWhitespace(s.charAt(i))) {    i++;  }  if (i > len - 1) {    return false;  }  while (e >= i && Character.isWhitespace(s.charAt(e))) {    e--;  }  if (s.charAt(i) == '+' || s.charAt(i) == '-') {    i++;  }  boolean num=false;  boolean dot=false;  boolean exp=false;  while (i <= e) {    char c=s.charAt(i);    if (Character.isDigit(c)) {      num=true;    } else     if (c == '.') {      if (exp || dot) {        return false;      }      dot=true;    } else     if (c == 'e') {      if (exp || num == false) {        return false;      }      exp=true;      num=false;    } else     if (c == '+' || c == '-') {      if (s.charAt(i - 1) != 'e') {        return false;      }    } else {      return false;    }    i++;  }  return num;}  }
class C{  public VictoryCommand(Server server){  super(server,commandName,helpText);}  }
class C{  public void saveOMGraphics(Projection proj){  if (fileName == null) {    fileName=FileUtils.getFilePathToSaveFromUser(i18n.get(DrawingToolLayer.class,"CHOOSE_SAVE","Choose file to use to save layer:"));  }  if (fileName != null) {    OMGraphicList list=getOMGraphics();    if (fileName.toLowerCase().endsWith(".shp")) {      EsriShapeExport ese=new EsriShapeExport(list,proj,fileName);      ese.setTransform(getCoordTransform());      ese.export();    } else {      if (list != null) {        try {          FileOutputStream fos=new FileOutputStream(new File(fileName));          ObjectOutputStream oos=new ObjectOutputStream(fos);          oos.writeObject(list);          oos.close();        } catch (        FileNotFoundException e) {          e.printStackTrace();        }catch (        IOException e) {          e.printStackTrace();        }      }    }  }}  }
class C{  public PriceModelException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public String toString(){  String s=board.toString() + "\n";  s+="stored Data:\n" + stored;  return s;}  }
class C{  public int numRules(){  return numRules;}  }
class C{  private boolean assignToNearestCluster(Relation<V> relation,double[][] means,List<ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[] varsum,double[][] cdist,int[][] cnum,LongStatistic diststat){  assert (k == means.length);  long dists=0;  boolean changed=false;  Arrays.fill(varsum,0.);  for (  ModifiableDBIDs cluster : clusters) {    cluster.clear();  }  final NumberVectorDistanceFunction<?> df=getDistanceFunction();  double mult=(df instanceof SquaredEuclideanDistanceFunction) ? 4 : 2;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final int cur=assignment.intValue(iditer), ini=cur >= 0 ? cur : 0;    V fv=relation.get(iditer);    double mindist=df.distance(fv,DoubleVector.wrap(means[ini]));    ++dists;    final double threshold=mult * mindist;    int minIndex=ini;    for (    int i : cnum[ini]) {      if (cdist[minIndex][i] >= threshold) {        break;      }      double dist=df.distance(fv,DoubleVector.wrap(means[i]));      ++dists;      if (dist < mindist) {        minIndex=i;        mindist=dist;      }    }    varsum[minIndex]+=mindist;    clusters.get(minIndex).add(iditer);    changed|=assignment.putInt(iditer,minIndex) != minIndex;  }  if (diststat != null) {    diststat.increment(dists);  }  return changed;}  }
class C{  public DumpInfo dumpCacheContent(){synchronized (mCountingBitmapCache) {    DumpInfo<K,V> dumpInfo=new DumpInfo<>(mCountingBitmapCache.getSizeInBytes(),mCountingBitmapCache.getEvictionQueueSizeInBytes(),mCountingBitmapCache.mMemoryCacheParams);    final List<LinkedHashMap.Entry<K,CountingMemoryCache.Entry<K,V>>> cachedEntries=mCountingBitmapCache.mCachedEntries.getMatchingEntries(null);    for (    LinkedHashMap.Entry<K,CountingMemoryCache.Entry<K,V>> cachedEntry : cachedEntries) {      CountingMemoryCache.Entry<K,V> entry=cachedEntry.getValue();      DumpInfoEntry<K,V> dumpEntry=new DumpInfoEntry<>(entry.key,entry.valueRef);      if (entry.clientCount > 0) {        dumpInfo.sharedEntries.add(dumpEntry);      } else {        dumpInfo.lruEntries.add(dumpEntry);      }    }    return dumpInfo;  }}  }
class C{  private VOPriceModel createPriceModelForParameter(VOServiceDetails productDetails,ArrayList<VORoleDefinition> roleDefs,BigDecimal rolePrice,Long roleKey){  ArrayList<VOPricedRole> pricedRoles=definePricedProductRoles(roleDefs);  if (rolePrice != null) {    pricedRoles.get(0).setPricePerUser(rolePrice);  }  if (roleKey != null) {    pricedRoles.get(0).getRole().setKey(roleKey.longValue());  }  VOPriceModel pm=createPriceModelDefinition(pricedRoles,productDetails);  pm.setRoleSpecificUserPrices(new ArrayList<VOPricedRole>());  VOPricedParameter pricedParameter=new VOPricedParameter();  pricedParameter.setPricePerSubscription(BigDecimal.valueOf(12L));  pricedParameter.setPricePerUser(BigDecimal.valueOf(999L));  pricedParameter.setVoParameterDef(productDetails.getParameters().get(0).getParameterDefinition());  pricedParameter.setRoleSpecificUserPrices(pricedRoles);  pm.setSelectedParameters(Collections.singletonList(pricedParameter));  return pm;}  }
class C{  public <T extends Tool>T bindArguments(ToolModel<T> toolModel,CeylonTool mainTool,Iterable<String> args){  T tool=newInstance(toolModel);  return bindArguments(toolModel,tool,mainTool,args);}  }
class C{  public T caseParameterizedTypeRef(ParameterizedTypeRef object){  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(String[] args){  ArrayList<Number> list=new ArrayList<>();  list.add(1);  list.add(8);  list.add(2.3);  list.add(7.43);  list.add(3);  list.add(6.246);  list.add(5);  list.add(4.6);  System.out.println(list.toString());  sort(list);  System.out.println(list.toString());}  }
class C{  public IdentityHashMap(Map m){  this((int)((1 + m.size()) * 1.1));  putAll(m);}  }
class C{  public void stop(boolean hide){  if (hide) {    setVisible(false);  }  timer.stop();}  }
class C{  public void testGetReaderPort(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  char expResult=0x00;  assertEquals(expResult,instance.getReaderPort(msgStandalone));}  }
class C{  public synchronized void close() throws IOException {  if (out != null)   out.close();}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private void performFlightMovement(){  double diffX, diffY, diffZ;  if (petBat.getAttackTarget() == null || !petBat.getAttackTarget().isEntityAlive()) {    if (petBat.getFoodAttackTarget() != null && petBat.getFoodAttackTarget().isEntityAlive()) {      diffX=petBat.getFoodAttackTarget().posX - petBat.posX;      diffY=petBat.getFoodAttackTarget().posY - petBat.posY;      diffZ=petBat.getFoodAttackTarget().posZ - petBat.posZ;    } else     if (currentFlightTarget != null) {      diffX=(double)currentFlightTarget.getX() + 0.5D - petBat.posX;      diffY=(double)currentFlightTarget.getY() + 0.1D - petBat.posY;      diffZ=(double)currentFlightTarget.getZ() + 0.5D - petBat.posZ;    } else {      diffX=diffY=diffZ=0D;    }  } else {    diffX=petBat.getAttackTarget().posX - petBat.posX;    diffY=petBat.getAttackTarget().posY - petBat.posY + 1.5D;    diffZ=petBat.getAttackTarget().posZ - petBat.posZ;  }  petBat.motionX+=(Math.signum(diffX) * 0.5D - petBat.motionX) * 0.1D;  petBat.motionY+=(Math.signum(diffY) * 0.7D - petBat.motionY) * 0.1D;  petBat.motionZ+=(Math.signum(diffZ) * 0.5D - petBat.motionZ) * 0.1D;  float var7=(float)(Math.atan2(petBat.motionZ,petBat.motionX) * 180.0D / Math.PI) - 90.0F;  float var8=MathHelper.wrapAngleTo180_float(var7 - petBat.rotationYaw);  petBat.setMoveForward(0.5F);  petBat.rotationYaw+=var8;}  }
class C{  public void publish(String topic,String payload,int qos,boolean retained,boolean subscribed,boolean waitForCompletion) throws Exception {  logToFile("publish [topic:" + topic + "][payload:"+ payload+ "][qos:"+ qos+ "][retained:"+ retained+ "][subscribed:"+ subscribed+ "][waitForCompletion:"+ waitForCompletion+ "]");  if (subscribed != subscribedTopics.containsKey(topic)) {    throw new Exception("Subscription state mismatch [topic:" + topic + "][expected:"+ subscribed+ "]");  }  MqttMessage msg=new MqttMessage(payload.getBytes());  msg.setQos(qos);  msg.setRetained(retained);  if (retained) {    retainedPublishes.put(topic,msg);  }  MqttDeliveryToken token=client.getTopic(topic).publish(msg);synchronized (currentTokens) {    if (!token.isComplete()) {      currentTokens.put(token,"[" + topic + "]["+ msg.toString()+ "]");    }  }  if (retained || waitForCompletion) {    token.waitForCompletion();synchronized (currentTokens) {      currentTokens.remove(token);    }  }  if (subscribed) {    waitForMessage(topic,msg,false);  }}  }
class C{  public void remove() throws Exception {  if (stack.isEmpty()) {    throw new NodeException("No root node");  }  stack.bottom().remove();}  }
class C{  public void listing(PrintStream out){  out.println("-- listing --");  for (Instruction inst=first; inst != null; inst=inst.next) {    out.println(inst.toString());  }}  }
class C{  public CModuleInitializeReporter(final ListenerProvider<IModuleListener> listeners){  m_listeners=listeners;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.282 -0500",hash_original_method="841672D97CF75C5F24DD91219B8271EA",hash_generated_method="8F2F6B8B6FB5820FB660E656203CC417") public void drawBitmap(Bitmap bitmap,Rect src,Rect dst,Paint paint){  if (dst == null) {    throw new NullPointerException();  }  addTaint(bitmap.getTaintInt() + src.getTaintInt() + paint.getTaintInt());  dst.addTaint(getTaint());}  }
class C{  public FileImportError[] importFile(String SID,String externalUserId,Long externalFileId,String externalType,Long room_id,boolean isOwner,String path,Long parentFolderId,String fileSystemName) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(User_level)) {      String current_dir=getServletContext().getRealPath("/");      URL url=new URL(path);      URLConnection uc=url.openConnection();      InputStream inputstream=new BufferedInputStream(uc.getInputStream());      Users externalUser=userManagement.getUserByExternalIdAndType(externalUserId,externalType);      LinkedHashMap<String,Object> hs=new LinkedHashMap<String,Object>();      hs.put("user",externalUser);      HashMap<String,HashMap<String,String>> returnError=fileProcessor.processFile(externalUser.getUser_id(),room_id,isOwner,inputstream,parentFolderId,fileSystemName,current_dir,hs,externalFileId,externalType);      HashMap<String,String> returnAttributes=returnError.get("returnAttributes");      hs.put("message","library");      hs.put("action","newFile");      hs.put("fileExplorerItem",fileExplorerItemDao.getFileExplorerItemsById(Long.parseLong(returnAttributes.get("fileExplorerItemId").toString())));      hs.put("error",returnError);      hs.put("fileName",returnAttributes.get("completeName"));      FileImportError[] fileImportErrors=new FileImportError[returnError.size()];      int i=0;      for (Iterator<String> iter=returnError.keySet().iterator(); iter.hasNext(); ) {        HashMap<String,String> returnAttribute=returnError.get(iter.next());        fileImportErrors[i]=new FileImportError();        fileImportErrors[i].setCommand((returnAttribute.get("command") != null) ? returnAttribute.get("command").toString() : "");        fileImportErrors[i].setError((returnAttribute.get("error") != null) ? returnAttribute.get("error").toString() : "");        fileImportErrors[i].setExitValue((returnAttribute.get("exitValue") != null) ? Integer.valueOf(returnAttribute.get("exitValue").toString()).intValue() : 0);        fileImportErrors[i].setProcess((returnAttribute.get("process") != null) ? returnAttribute.get("process").toString() : "");        i++;      }      return fileImportErrors;    }  } catch (  Exception err) {    log.error("[importFile]",err);  }  return null;}  }
class C{  public boolean containsURL(Path path){  URL url=pathToURL(path);  if (url == null)   return false; else   return containsURL(url);}  }
class C{  public X509CRLHolder(CertificateList x509CRL){  this.x509CRL=x509CRL;  this.extensions=x509CRL.getTBSCertList().getExtensions();  this.isIndirect=isIndirectCRL(extensions);  this.issuerName=new GeneralNames(new GeneralName(x509CRL.getIssuer()));}  }
class C{  private DefaultParser(){}  }
class C{  public BatchFraction defaultJobRepository(final DatasourcesFraction datasource){  return defaultJobRepository(datasource.getKey(),datasource);}  }
class C{  public static double[] toDoubleArray(Integer[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  private void unarchiveExpandedState(Object state){  if (state instanceof Vector) {    Vector<?> paths=(Vector)state;    for (int counter=paths.size() - 1; counter >= 0; counter--) {      Boolean eState=(Boolean)paths.elementAt(counter--);      TreePath path;      try {        path=getPathForIndexs((int[])paths.elementAt(counter));        if (path != null)         expandedState.put(path,eState);      } catch (      Error error) {      }    }  }}  }
class C{  public ObserveRequest(int objectId,int objectInstanceId,int resourceId){  this(null,new LwM2mPath(objectId,objectInstanceId,resourceId),null);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public boolean isPrepared(){  return isPrepared && !env.isDone();}  }
class C{  public static boolean isNullOrEmpty(String s){  return s == null || s.length() == 0;}  }
class C{  public static void isContentOfSupportEmail(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_EMAIL_CONTENT,flag);}  }
class C{  public BinaryTextFinder(CharSequence literal,BinaryContent aContent){  this.literal=literal;  initSearchUnicodeAscii();  content=aContent;  bufferPosition=0L;  currentPosition=0L;}  }
class C{  public void put(E key,double count,boolean keepHigher){  if (keepHigher && entries.containsKey(key)) {    double oldCount=entries.get(key);    if (count > oldCount) {      entries.put(key,count);    }  } else {    entries.put(key,count);  }  dirty=true;}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.146 -0400",hash_original_method="8A4B58739FD03C96102234AFF51BEC4F",hash_generated_method="EB32B3C16C086F091A98B7A73942B15F") public boolean isEncodeBlanks(){  return this.encodeBlanks;}  }
class C{  private int epochMonthToEpochDay(int epochMonth){  return hijrahEpochMonthStartDays[epochMonth];}  }
class C{  public DatabaseConnection(File propsFile) throws Exception {  super(propsFile);}  }
class C{  @Override public String toString(){  return "JITOptions[" + createString(",") + "]";}  }
class C{  public CancelOrderWithRefundOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory,final WarehouseService warehouseService,final SkuWarehouseService skuWarehouseService){  super(warehouseService,skuWarehouseService);  this.paymentProcessorFactory=paymentProcessorFactory;}  }
class C{  static int compareTableFilters(TableFilter o1,TableFilter o2){  assert o1.getOrderInFrom() != o2.getOrderInFrom();  return o1.getOrderInFrom() > o2.getOrderInFrom() ? 1 : -1;}  }
class C{  public ByteArrayOutputStream post() throws IOException {  if (connection != null) {    return sendHttpRequest(HttpConnection.POST_METHOD);  }  throw new IOException("Connection not opened");}  }
class C{  static TimePeriod fromRequestLifetime(TimestampType lifetime) throws InvalidSecurityException {  assert lifetime != null;  try {    return newTimePeriod(lifetime.getCreated(),lifetime.getExpires());  } catch (  ParseException e) {    throw newInvalidSecurityException(lifetime,e,"Cannot parse request lifetime ");  }catch (  IllegalArgumentException e) {    throw newInvalidSecurityException(lifetime,e,"Invalid request lifetime ");  }}  }
class C{  public double[] expectedCosts(double[] classProbs) throws Exception {  if (classProbs.length != m_size) {    throw new Exception("Length of probability estimates don't " + "match cost matrix");  }  double[] costs=new double[m_size];  for (int x=0; x < m_size; x++) {    for (int y=0; y < m_size; y++) {      Object element=getCell(y,x);      if (!(element instanceof Double)) {        throw new Exception("Can't use non-fixed costs in " + "computing expected costs.");      }      costs[x]+=classProbs[y] * ((Double)element).doubleValue();    }  }  return costs;}  }
class C{  @Override public List<String> searchWOToPaginatedView(final Map<String,Object> criteriaMap,final List<Object> paramList){  logger.info("-------------------------Inside searchWOToView-----------------------");  return searchWOQuery(criteriaMap,paramList);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  DateIterator(final Calendar startFinal,final Calendar endFinal){  super();  this.endFinal=endFinal;  spot=startFinal;  spot.add(Calendar.DATE,-1);}  }
class C{  public Optional<String> fullMethod(){  return Optional.ofNullable(fullMethodArg);}  }
class C{  public TreeModelEvent(Object source,TreePath path){  super(source);  this.path=path;  this.childIndices=new int[0];}  }
class C{  public static void openFile(Activity activity,String mimeType,int action){  Intent intent=forgeIntentToOpenFile();  intent.setType(mimeType);  activity.startActivityForResult(intent,action);}  }
class C{  public RecursiveProduction substitute(RecursiveProduction other) throws InterruptedException {  RecursiveProduction newEqn=new RecursiveProduction(this);  newEqn.substituteDestructive(other);  return newEqn;}  }
class C{  public void removeBaseParameter(String key){  remove(key,null);}  }
class C{  public void commit() throws IOException {  if (writer != null) {    OutputCommitter outputCommitter=jobConf.getOutputCommitter();    TaskAttemptContext taskCtx=new TaskAttemptContextImpl(jobConf,attempt);    if (outputCommitter.needsTaskCommit(taskCtx))     outputCommitter.commitTask(taskCtx);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.REGULAR_EVENT_SPEC__EVENT:    return event != null;}return super.eIsSet(featureID);}  }
class C{  public FillToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));  setDisclosureStateCount(3);}  }
class C{  public static _ControllerStatus fromString(final String value) throws SOAPSerializationException {  return (_ControllerStatus)Enumeration.fromString(value,_ControllerStatus.VALUES_TO_INSTANCES);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public SList(){  size=0;  sentinel=new IntNode(982734,null);}  }
class C{  public final void removeNotify(){  myUISettings.removeUISettingsListener(this);  super.removeNotify();}  }
class C{  void m7(){  Iterable i=java.util.Collections.EMPTY_LIST;  Iterable<RuntimeException> e=empty2(i);}  }
class C{  public static String removeCRs(String text){  if (text == null) {    return "";  }  if ((text.indexOf("\n") == -1) && (text.indexOf("\r") == -1) && (text.indexOf("\f") == -1)) {    return text;  }  text=text.replace("\n","");  text=text.replace("\r","");  text=text.replace("\f","");  return text;}  }
class C{  public JSONObject(Object object,String names[]){  this();  @SuppressWarnings("rawtypes") Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public ASN1InputStream(byte[] input){  this(new ByteArrayInputStream(input),input.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lchildNode;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  lchildNode=employeeNode.getLastChild();  childName=lchildNode.getNodeName();  if (equals("#text",childName)) {    lchildNode=lchildNode.getPreviousSibling();    childName=lchildNode.getNodeName();  }  assertEquals("nodeName","address",childName);}  }
class C{  public boolean isWritable(int column) throws SQLException {  return !isReadOnly(column);}  }
class C{  public BevelBorder(int bevelType,Color highlight,Color shadow){  this(bevelType,highlight.brighter(),highlight,shadow,shadow.brighter());}  }
class C{  private boolean defineEntity(String name,char value){  StringBuffer sb=new StringBuffer("&");  sb.append(name);  sb.append(';');  String entityString=sb.toString();  boolean extra=defineChar2StringMapping(entityString,value);  return extra;}  }
class C{  public static void main(final String[] args){  Log4J.init();  new DatabaseFactory().initializeDatabase();  String timedate="1900-01-01";  if (args.length > 0) {    timedate=args[0];  }  final Analyser analyser=new Analyser();  analyser.analyse(timedate);}  }
class C{  public ReadMEIRequest(int level,int id){  super();  setFunctionCode(Modbus.READ_MEI);  subCode=0x0E;  setDataLength(3);  setLevel(level);  setFieldId(id);}  }
class C{  public void packageDeclaration(long where,IdentifierToken t){  Identifier nm=t.getName();  if (pkg == null) {    pkg=t.getName();    imports.setCurrentPackage(t);  } else {    env.error(where,"package.repeated");  }}  }
class C{  public void onSend(){synchronized (this) {    if (log.isTraceEnabled())     log.trace("Moved transaction synchronizer to waiting state [nodeId=" + nodeId + ", threadId="+ threadId+ ']');    assert cnt == 0 || nodeLeft;    if (nodeLeft)     return;    cnt=1;  }}  }
class C{  public boolean hasMoreEvenElements(){  return this.getEvenEnum().hasMoreElements();}  }
class C{  public void endElement(String uri,String name,String qName) throws SAXException {  if (currGeomHandler != null) {    currGeomHandler.endElement(uri,name,qName);    if (currGeomHandler.isGeometryComplete()) {      Geometry g=currGeomHandler.getGeometry();      System.out.println(g);      geoms.add(g);      currGeomHandler=null;    }  }}  }
class C{  public void eliminarListasAcceso(String[] listasAcceso) throws UsuariosNotAllowedException {  iniciarTransaccion();  eliminarListasAccesoNoTransaccional(listasAcceso);  commit();}  }
class C{  public AppsForYourDomainMigrationClient(String username,String password,String domain,String destinationUser) throws Exception {  this.domain=domain;  if (destinationUser == null) {    this.destinationUser=username;  } else {    this.destinationUser=destinationUser;  }  mailItemService=new MailItemService("exampleCo-exampleApp-1");  mailItemService.setUserCredentials(username + "@" + domain,password);  runSample();}  }
class C{  protected void checkLock(){  ReentrantLock lock=Bridge.getLock();  if (lock.isHeldByCurrentThread() == false) {    throw new IllegalStateException("scene must be acquired first. see #acquire(long)");  }  if (sCurrentContext != mContext) {    throw new IllegalStateException("Thread acquired a scene but is rendering a different one");  }}  }
class C{  public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException, ServletException {  if (req != null) {    HttpServletRequest request=(HttpServletRequest)req;    HttpServletResponse response=(HttpServletResponse)res;    HttpSession mySession=request.getSession();    UseCaseConf loginStatus=(UseCaseConf)mySession.getAttribute(Keys.J_USECASECONF);    Utils.setAuditContext(request);    String sessionID=null;    if (loginStatus != null) {      sessionID=loginStatus.getSessionID();    }    if (sessionID != null || request.getRequestURI().indexOf("/FileUploadScan") != -1 || request.getRequestURI().indexOf(".pdf") != -1 || request.getRequestURI().indexOf("/remoting") != -1) {      String ae=request.getHeader("accept-encoding");      if (ae != null && ae.indexOf("gzip") != -1 && Configurator.getInstance().getPropertyBoolean(ConfigurationKeys.KEY_DESKTOP_USECOMPRESSEDCONTENTS) && (request.getRequestURI().indexOf("/validatecode") == -1) && (request.getRequestURI().indexOf("/validateunit") == -1) && (request.getRequestURI().indexOf("/reportdoc") == -1) && (request.getRequestURI().indexOf("/updatefields") == -1)) {        GZIPResponseWrapper wrappedResponse=new GZIPResponseWrapper(response);        chain.doFilter(req,wrappedResponse);        wrappedResponse.finishResponse();        return;      } else {        chain.doFilter(req,res);      }    } else {      if ((request.getRequestURI().indexOf("__index") != -1) || (request.getRequestURI().equals(request.getContextPath() + "/")) || (request.getRequestURI().equals(request.getContextPath()))|| (request.getRequestURI().indexOf("css") != -1)|| (request.getRequestURI().indexOf("gif") != -1)|| (request.getRequestURI().indexOf("png") != -1)|| (request.getRequestURI().indexOf("jpg") != -1)|| (request.getRequestURI().indexOf("logout") != -1)|| (request.getRequestURI().indexOf("login") != -1)|| (request.getRequestURI().indexOf("default") != -1)|| (request.getRequestURI().indexOf("chgpwdsrv") != -1)|| (request.getRequestURI().indexOf("cab") != -1)|| (request.getRequestURI().indexOf("js") != -1 && request.getRequestURI().indexOf("jsp") == -1)|| (request.getRequestURI().indexOf("htm") != -1)|| (request.getRequestURI().indexOf("html") != -1)|| (request.getRequestURI().indexOf("xsl") != -1)|| (containsPathToIgnore(request.getRequestURI()))) {        String ae=request.getHeader("accept-encoding");        if (ae != null && ae.indexOf("gzip") != -1 && Configurator.getInstance().getPropertyBoolean(ConfigurationKeys.KEY_DESKTOP_USECOMPRESSEDCONTENTS)) {          GZIPResponseWrapper wrappedResponse=new GZIPResponseWrapper(response);          chain.doFilter(req,wrappedResponse);          wrappedResponse.finishResponse();          return;        } else {          chain.doFilter(req,res);        }      } else {        String idioma=(String)mySession.getAttribute(Keys.J_IDIOMA);        if (idioma == null) {          idioma=IdiomaUtils.getInstance().getIdioma(request);        }        Long numIdioma=(Long)mySession.getAttribute(Keys.J_NUM_IDIOMA);        if (numIdioma == null) {          numIdioma=IdiomaUtils.getInstance().getNumIdioma(request);        }        Boolean form=RequestUtils.parseRequestParameterAsBoolean(request,"Form");        int enabled=RequestUtils.parseRequestParameterAsint(request,"Enabled");        int isDtrList=RequestUtils.parseRequestParameterAsint(request,"IsDtrList");        int enabledImp=1;        response.setContentType("text/html; charset=UTF-8");        PrintWriter writer=response.getWriter();        if ((request.getRequestURI().indexOf("openfolder") != -1) || (request.getRequestURI().indexOf("newfolder") != -1) || (request.getRequestURI().indexOf("newfldbuc") != -1)|| (request.getRequestURI().indexOf("printsello") != -1)) {          ResponseUtils.generateJavaScriptErrorSessionExpiredOpenFolder(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED),idioma,numIdioma,form);        } else         if ((request.getRequestURI().indexOf("vldres") != -1)) {          if (isDtrList == 1) {            enabled=0;          }          ResponseUtils.generateJavaScriptLogSessionExpiredVldRes(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma,enabled);        } else         if ((request.getRequestURI().indexOf("validateunit") != -1) || (request.getRequestURI().indexOf("validatecode") != -1) || (request.getRequestURI().indexOf("actionform") != -1)|| (request.getRequestURI().indexOf("updatefields") != -1)) {          ResponseUtils.generateJavaScriptLogSessionExpiredValidateUnit(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma);        } else         if ((request.getRequestURI().indexOf("report") != -1) || (request.getRequestURI().indexOf("frmpersistflds") != -1) || (request.getRequestURI().indexOf("reportdoc") != -1)) {          if ((request.getRequestURI().indexOf("reportsfmt") != -1)) {            ResponseUtils.generateJavaScriptLogSessionExpiredVldRes(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma,enabled);          } else           if ((request.getRequestURI().indexOf("reportdoc") != -1)) {            ResponseUtils.generateJavaScriptLogSessionExpiredReportDoc(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage());          } else {            ResponseUtils.generateJavaScriptLogSessionExpiredVldRes(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma,enabledImp);          }        } else         if ((request.getRequestURI().indexOf("closefolder") != -1)) {          ResponseUtils.generateJavaScriptLogSessionExpiredCloseFolder(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage());        } else         if ((request.getRequestURI().indexOf("SetPersistFields") != -1)) {          ResponseUtils.generateJavaScriptLogSessionExpiredSetPersistFields(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma,enabledImp);        } else         if ((request.getRequestURI().indexOf("dtrfdr") != -1) || (request.getRequestURI().indexOf("origdocfdr") != -1) || (request.getRequestURI().indexOf("vldbuscinter") != -1)|| (request.getRequestURI().indexOf("asocregsfdr") != -1)|| (request.getRequestURI().indexOf("saveorigdoc") != -1)|| (request.getRequestURI().indexOf("getpage") != -1)|| (request.getRequestURI().indexOf("flushfdr") != -1)) {          ResponseUtils.generateJavaScriptLogSessionExpiredDtrfdr(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma);        } else         if ((request.getRequestURI().indexOf("vldpoblacion") != -1)) {          provCityDir++;          ResponseUtils.generateJavaScriptLogSessionExpiredProvCityDir(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage());        } else         if ((request.getRequestURI().indexOf("vlddirinter") != -1)) {          ResponseUtils.generateJavaScriptLogSessionExpiredProvCityDir(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage());        } else         if ((request.getRequestURI().indexOf("getsearchdist") != -1) || (request.getRequestURI().indexOf("validatesearchdist") != -1)) {          ResponseUtils.generateJavaScriptLogSessionExpiredGetSearchDist(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma);        } else         if (((request.getRequestURI().indexOf("vlddireccion") != -1) || (request.getRequestURI().indexOf("vldciudad") != -1))) {          if (provCityDir > 0) {            provCityDir=0;          }        } else         if (request.getRequestURI().indexOf("frmdata") != -1) {          ResponseUtils.generateJavaScriptLogSessionExpiredFrmData(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),idioma,numIdioma);        } else         if (request.getRequestURI().indexOf("RelFilter") != -1) {          ResponseUtils.generateJavaScriptLogSessionExpiredRelation(writer,idioma,numIdioma,new SessionException(SessionException.ERROR_SESSION_EXPIRED).getMessage(),1);        } else {          ResponseUtils.generateJavaScriptErrorSessionExpired(writer,new SessionException(SessionException.ERROR_SESSION_EXPIRED),idioma,numIdioma);        }      }    }  }}  }
class C{  public Swagger2MarkupConfigBuilder withInterDocumentCrossReferences(String prefix){  Validate.notNull(prefix,"%s must not be null","prefix");  config.interDocumentCrossReferencesEnabled=true;  config.interDocumentCrossReferencesPrefix=prefix;  return this;}  }
class C{  @NonNull public Builder addMethod(@NonNull Class<?> clazz,@NonNull String methodName){  try {    clazz.getDeclaredMethod(methodName);  } catch (  NoSuchMethodException e) {    addError(clazz.getCanonicalName() + ":" + methodName);    return this;  }  if (ignoreMap == null) {    ignoreMap=new HashMap<>();  }  ValidationIgnore ignore=ignoreMap.get(clazz);  if (ignore == null) {    ignore=new ValidationIgnore(clazz);    ignoreMap.put(clazz,ignore);  }  ignore.addMethod(methodName);  return this;}  }
class C{  public void hits(int hits){  this.hits=hits;}  }
class C{  public Info_Column(String colHeader,String colSQL,Class colClass){  this(colHeader,colSQL,colClass,true,false,null);}  }
class C{  public void removeTmpStore(IMXStore store){  if (null != store) {    mTmpStores.remove(store);  }}  }
class C{  private void doFinalOrientation(){  changeFlag=true;  while (changeFlag) {    changeFlag=false;    rulesR1R2cycle();    ruleR3();    ruleR4();  }  if (isCompleteRuleSetUsed()) {    ruleR5();    changeFlag=true;    while (changeFlag) {      changeFlag=false;      ruleR6R7();    }    changeFlag=true;    while (changeFlag) {      changeFlag=false;      rulesR8R9R10();    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SINGLETON___SINGLETON_1:    return isSingleton_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public RectangleRDD(JavaSparkContext spark,String InputLocation,Integer Offset,String Splitter){  this.setRawRectangleRDD(spark.textFile(InputLocation).map(new RectangleFormatMapper(Offset,Splitter)));}  }
class C{  public boolean contains(int val){  return index(val) >= 0;}  }
class C{  private void onGroupItemClicked(View view,Node node){  boolean isExpanded=node.isExpanded();  if (!isAlwaysExpanded()) {    if (isExpanded) {      mAdapter.collapseNode(node);    } else {      mAdapter.extendNode(node,mNestType);    }  }  if (mNestType == NestType.SINGLE) {    scrollToItemIfNeeded(mAdapter.getFlatItems().indexOf(node));  }  notifyGroupItemClicked(view,node);}  }
class C{  public boolean hasValidPublishingOrganisation(Resource resource){  if (resource.getOrganisation() == null) {    return false;  } else   if (resource.getOrganisation().getKey().equals(Constants.DEFAULT_ORG_KEY)) {    return false;  } else {    return true;  }}  }
class C{  public static boolean loggingEnabled(){  return perfLoggingOn;}  }
class C{  public void run(){  try {    ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();    while (true) {      EventWrapper eventWrapper=null;      LinkedList eventsToDeliver;synchronized (this.eventMutex) {        while (pendingEvents.isEmpty()) {          if (this.isStopped) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("Stopped event scanner!!");            return;          }          try {            threadHandle.ping();            eventMutex.wait(threadHandle.getPingIntervalInMillisecs());          } catch (          InterruptedException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("Interrupted!");            return;          }        }        eventsToDeliver=pendingEvents;        pendingEvents=new LinkedList();      }      ListIterator iterator=eventsToDeliver.listIterator();      while (iterator.hasNext()) {        eventWrapper=(EventWrapper)iterator.next();        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Processing " + eventWrapper + "nevents "+ eventsToDeliver.size());        }        try {          deliverEvent(eventWrapper);        } catch (        Exception e) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logError("Unexpected exception caught while delivering event -- carrying on bravely",e);          }        }      }    }  }  finally {    if (sipStack.isLoggingEnabled()) {      if (!this.isStopped) {        sipStack.getStackLogger().logFatalError("Event scanner exited abnormally");      }    }  }}  }
class C{  private void handleViewWorksheetsButton(){  int selected=spreadsheetListBox.getSelectedIndex();  if (spreadsheetEntries != null && selected >= 0) {    populateWorksheetList(spreadsheetEntries.get(selected));  }}  }
class C{  public static final double[] minusTimesEquals(final double[] v1,final double[] v2,final double s2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]-=v2[i] * s2;  }  return v1;}  }
class C{  protected int parseTag() throws IOException {  if (_peekTag >= 0) {    int tag=_peekTag;    _peekTag=-1;    return tag;  }  int ch=skipWhitespace();  int endTagDelta=0;  if (ch != '<')   throw expectedChar("'<'",ch);  ch=read();  if (ch == '/') {    endTagDelta=100;    ch=_is.read();  }  if (!isTagChar(ch))   throw expectedChar("tag",ch);  _sbuf.setLength(0);  for (; isTagChar(ch); ch=read())   _sbuf.append((char)ch);  if (ch != '>')   throw expectedChar("'>'",ch);  Integer value=(Integer)_tagMap.get(_sbuf.toString());  if (value == null)   throw error("Unknown tag <" + _sbuf + ">");  return value.intValue() + endTagDelta;}  }
class C{  public void testMinimizeHuge(){  new RegExp("+-*(A|.....|BC)*]",RegExp.NONE).toAutomaton(1000000);}  }
class C{  public boolean isAttached(DialogField editor){  if (fAttachedDialogFields != null) {    for (int i=0; i < fAttachedDialogFields.length; i++) {      if (fAttachedDialogFields[i] == editor) {        return true;      }    }  }  return false;}  }
class C{  public ScannerToken<? extends Object> readNextTerminal() throws IOException {  if (!DEBUG) {    ScannerToken<? extends Object> pt=processedTokens.poll();    if (pt != null)     return pt;  }  if (maxErrors > 0 && (currentToken == null || currentToken.getSymbol() != SpecialTerminals.EndOfInputStream)) {    if (DEBUG_statistics)     if (changeAbleTokens.size() > bufferPeak)     bufferPeak=changeAbleTokens.size();    while_bufferFill:     while ((numGen != null && processedTokens.size() == 0) || changeAbleTokens.size() + processedTokens.size() < insertionBufferLength) {      rdState=rdStack.peek();      if (currentToken == null) {        if (numGen != null && numGen.tokenInsertTries >= 0 && numGen.hasNumberNotMinimumOrNull(numGen.position++)) {          if (numGen.possibilitiesBefore - numGen.startPosition * numGen.startPosition > maxPossibilities || numGen.position > numGen.startPosition + maxOversize - numGen.anzTooMuch) {            if (numGen.tooMuchPosition == -1) {              if (DEBUG) {                if (numGen.possibilitiesBefore > maxPossibilities)                 System.out.println("!!! Too much possibilities before : " + numGen.possibilitiesBefore); else                 System.out.println("!!! Too much insertions, indicating previous insertion erroneous");              }              numGen.tooMuchPosition=numGen.position - 1;              numGen.possibilitiesBeforeTooMuch=numGen.possibilitiesBefore;              if (numGen.anzTooMuch < maxOversize - 2)               numGen.anzTooMuch++;            }            currentToken=getNextToken();            continue while_bufferFill;          }          ArrayList<Insertable> insertables=new ArrayList<Insertable>();          List<Terminal> expected=new ArrayList<Terminal>();          boolean noInsertablesAnyMore=false;          currentToken=getNextToken();          for (          Terminal t : table.getActionTable().getColumns()) {            if (t == currentToken.getSymbol() || t == SpecialTerminals.EndOfInputStream || t == SpecialTerminals.Error)             continue;            LRAction act=table.getActionTable().getWithNull(rdState,t);            if (act == null)             continue;            expected.add(t);            if (noInsertablesAnyMore)             continue;            Insertable ins=null;            try {              ins=(Insertable)Reflection.getFieldValueFromObject(t,"insert");            } catch (            Exception e) {            }            if (ins == null) {              noInsertablesAnyMore=true;              continue;            }            insertables.add(ins);          }          input.pushBackToken(currentToken);          Integer terminalToChoose=-1;          boolean doCount=(numGen.position > numGen.lastBreakPosition);          try {            terminalToChoose=numGen.getTokenNumber(numGen.position - 1,-1,insertables.size() - 1);          } catch (          RuntimeException e) {            if (DEBUG)             System.out.println("No solution found!");            numGen.tokenInsertTries=0;          }          if (terminalToChoose >= insertables.size()) {            System.err.println("Reinterpreting token due to internal error: " + "numGen-oracle exceeded maxtoken");            numGen.position--;            currentToken=null;            continue while_bufferFill;          }          if (terminalToChoose == -1) {            currentToken=getNextToken();            continue while_bufferFill;          }          Insertable chosenInsertable=insertables.get(terminalToChoose);          while (chosenInsertable.times > 0) {            int t=chosenInsertable.times;            if (t > changeAbleTokens.size())             t=0; else             t=changeAbleTokens.size() - t;            boolean oneEven=false;            for (int i=t; i < changeAbleTokens.size(); i++) {              ScannerToken<? extends Object> chg=changeAbleTokens.get(i);              if (chg.getSymbol() == chosenInsertable.symbol) {                oneEven=true;                break;              }            }            if (oneEven) {              System.out.println("!!! Nearly inserted : " + chosenInsertable);              numGen.possibilitiesBefore--;              if (++terminalToChoose >= insertables.size()) {                currentToken=getNextToken();                continue while_bufferFill;              } else {                chosenInsertable=insertables.get(terminalToChoose);                numGen.setValue(numGen.position - 1,terminalToChoose);              }            } else {              break;            }          }          if (DEBUG)           System.out.println("!!! Inserting token : " + chosenInsertable);          if (doCount && numGen.tokenInsertTries > 0)           numGen.tokenInsertTries--;          currentToken=new InsertedScannerToken<Object>((Terminal)chosenInsertable.symbol,chosenInsertable.value,currentToken.getLine(),currentToken.getColumn(),new ErrorInformation(currentToken,true,new Object[]{},(ScannerToken<? extends Object>[])new ScannerToken[]{},(ScannerToken<? extends Object>[])new ScannerToken[]{},expected.toArray(new Terminal[expected.size()]),currentToken.getLine(),currentToken.getColumn(),currentToken.getLine(),currentToken.getColumn(),chosenInsertable.possible,chosenInsertable.value));          numGen.inserted++;        } else {          currentToken=getNextToken();        }      }      rdAction=table.getActionTable().get(rdState,currentToken.getSymbol());      if (rdAction instanceof ErrorAction) {        if (DEBUG)         System.out.println("Token-recovery...");        if (numGen == null) {          if (DEBUG)           System.out.println("Starting TBER");          if (DEBUG_possibilities) {            System.out.print("START    : ");            System.out.print(this.processedTokens);            System.out.print(this.changeAbleTokens);            System.out.println(currentToken);          }          numGen=new TokenNumberGenerator(changeAbleTokens.size());          updateErrorSyncSize(true);          numGen.startPosition=changeAbleTokens.size();          numGen.lastInsertStart=changeAbleTokens.size();          numGen.tokenInsertTries=maxIns;          numGen.tooMuchPosition=-1;          numGen.anzTooMuch=0;          rdStack=(Stack<LRParserState>)chgStack.clone();          numGen.inserted=0;          if (!(currentToken instanceof InsertedScannerToken))           input.pushBackToken(currentToken);          for (int i=changeAbleTokens.size() - 1; i >= 0; i--) {            ScannerToken<? extends Object> tk=changeAbleTokens.remove(i);            if (!(tk instanceof InsertedScannerToken))             input.pushBackToken(tk);          }          changeAbleActions.clear();          currentToken=null;          continue while_bufferFill;        } else {          if (numGen.tokenInsertTries == 0) {            numGen.inserted=0;            numGen.tokenInsertTries=-1;            rdStack=(Stack<LRParserState>)chgStack.clone();            if (!(currentToken instanceof InsertedScannerToken))             input.pushBackToken(currentToken);            for (int i=changeAbleTokens.size() - 1; i >= 0; i--) {              ScannerToken<? extends Object> tk=changeAbleTokens.remove(i);              if (!(tk instanceof InsertedScannerToken))               input.pushBackToken(tk);            }            changeAbleActions.clear();            numGen.position=0;            numGen.possibilitiesBefore=0;            currentToken=null;            continue while_bufferFill;          } else           if (numGen.tokenInsertTries < 0)           fail(); else {            if (DEBUG_possibilities) {              System.out.print("           ");              System.out.print(this.processedTokens);              System.out.print(this.changeAbleTokens);              if (currentToken != null)               System.out.print(currentToken);              System.out.println();            }            if (numGen.tooMuchPosition != -1 && numGen.tooMuchPosition < numGen.position) {              if (DEBUG_possibilities)               System.out.println("    I think I should change somthing before here!");              numGen.possibilitiesBefore=numGen.possibilitiesBeforeTooMuch;              numGen.position=numGen.tooMuchPosition;            }            numGen.tooMuchPosition=-1;            if (!numGen.indicateBad(numGen.position - 1)) {              if (DEBUG)               System.out.println("!!! No further ideas. Could not recover by looking back");              numGen.tokenInsertTries=0;              numGen.inserted=0;              continue while_bufferFill;            } else {              rdStack=(Stack<LRParserState>)chgStack.clone();              numGen.inserted=0;              if (!(currentToken instanceof InsertedScannerToken))               input.pushBackToken(currentToken);              for (int i=changeAbleTokens.size() - 1; i >= 0; i--) {                ScannerToken<? extends Object> tk=changeAbleTokens.remove(i);                if (!(tk instanceof InsertedScannerToken))                 input.pushBackToken(tk);              }              changeAbleActions.clear();              numGen.position=0;              numGen.possibilitiesBefore=0;              currentToken=null;              continue while_bufferFill;            }          }        }      } else {        if (numGen != null && numGen.tokenInsertTries >= 0 && numGen.lastInsertStart + numGen.inserted + numGen.errorSyncSize < numGen.position) {          if (DEBUG_possibilities || DEBUG) {            System.out.print("ACCEPTED : ");            System.out.print(this.processedTokens);            System.out.println(this.changeAbleTokens);            maxErrors--;            updateErrorSyncSize(false);          }{            chgStack=(Stack<LRParserState>)rdStack.clone();            processedTokens.addAll(changeAbleTokens);            changeAbleTokens.clear();            changeAbleActions.clear();          }          if (DEBUG_statistics)           insertedTokens+=numGen.inserted;          numGen=null;        }      }      if (currentToken == null) {        processedTokens.add(new ScannerToken<Object>(SpecialTerminals.EndOfInputStream,"$is3$"));        maxErrors=0;        break while_bufferFill;      }      changeAbleActions.add(rdAction);      if (rdAction instanceof Shift) {        Shift shift=(Shift)rdAction;        LRParserState s=shift.getState();        if (currentToken.getLine() != -1 || currentToken.getColumn() != -1) {          s=(LRParserState)(shift.getState().clone());          s.beginLine=currentToken.getLine();          s.beginColumn=currentToken.getColumn();        }        rdStack.push(s);        changeAbleTokens.add(currentToken);        currentToken=null;      } else       if (rdAction instanceof Reduce) {        Reduce reduce=(Reduce)rdAction;        Production production=reduce.getProduction();        LRParserState lastBeginInfo=rdState;        for (int i=0; i < production.getRHSSizeWithoutEpsilon(); i++) {          lastBeginInfo=rdStack.pop();        }        LRParserState newState=table.getGotoTable().get(rdStack.peek(),production.getLHS());        if (newState instanceof ErrorState) {          throw new RuntimeException("Table bad (goto missing!) : " + rdStack.peek() + ", "+ production.getLHS());        } else {          LRParserState s=(LRParserState)newState.clone();          s.beginColumn=lastBeginInfo.beginColumn;          s.beginLine=lastBeginInfo.beginLine;          rdStack.push(s);        }      } else       if (rdAction instanceof Accept) {        if (DEBUG)         System.out.println("FINISHED :-)");        if (currentToken.getSymbol() != SpecialTerminals.EndOfInputStream)         currentToken=new ScannerToken<Object>(SpecialTerminals.EndOfInputStream);        changeAbleTokens.add(currentToken);        break while_bufferFill;      } else       System.err.println("Internal error: Impossible action!!!");      if (DEBUG_statistics)       if (changeAbleTokens.size() > bufferPeak)       bufferPeak=changeAbleTokens.size();    }  } else {    if (DEBUG_statistics && bufferPeak > 0) {      System.out.println("Buffer peak : " + bufferPeak + " ( max. "+ (this.insertionBufferLength + "+" + maxOversize)+ " )");      System.out.println("Inserted    : " + insertedTokens + " token(s)");      bufferPeak=0;    }  }  ScannerToken<? extends Object> pt=processedTokens.poll();  if (pt != null) {    return pt;  }  ScannerToken<? extends Object> returnToken;  if (changeAbleTokens.size() > 0)   returnToken=changeAbleTokens.remove(0); else {    if (maxErrors == 0)     return getNextToken();    if (currentToken.getSymbol() != SpecialTerminals.EndOfInputStream) {      System.err.println("!!! Critical internal error in InsertionScanner");      currentToken=new ScannerToken<Object>(SpecialTerminals.EndOfInputStream,"$is4 - critical error in InsertionScanner$");    }    return currentToken;  }  if (returnToken.getSymbol() != SpecialTerminals.EndOfInputStream) {    LRAction act;    do {      act=changeAbleActions.poll();      if (act instanceof Shift) {        Shift shift=(Shift)act;        if (DEBUG)         System.out.println("  DryRunReturn2Normal S: to state " + shift.getState().getID() + " ("+ returnToken+ ")");        LRParserState s=shift.getState();        if (returnToken.getLine() != -1 || returnToken.getColumn() != -1) {          s=(LRParserState)(shift.getState().clone());          s.beginLine=returnToken.getLine();          s.beginColumn=returnToken.getColumn();        }        chgStack.push(s);      } else       if (act instanceof Reduce) {        Reduce reduce=(Reduce)act;        if (DEBUG)         System.out.println("  DryRunReturn2Normal R: " + reduce.getProduction().toString());        LRParserState lastBeginInfo=chgStack.peek();        for (int i=0; i < reduce.getProduction().getRHSSizeWithoutEpsilon(); i++) {          lastBeginInfo=chgStack.pop();        }        LRParserState newState=table.getGotoTable().get(chgStack.peek(),reduce.getProduction().getLHS());        if (newState instanceof ErrorState) {          throw new RuntimeException("errorstate for changedstack : " + chgStack.peek() + ", "+ reduce.getProduction().getLHS());        } else {          LRParserState s=(LRParserState)newState.clone();          s.beginColumn=lastBeginInfo.beginColumn;          s.beginLine=lastBeginInfo.beginLine;          chgStack.push(s);          if (DEBUG)           System.out.println("  DryRunReturn2Normal G: to state " + newState.getID() + " ("+ returnToken.getSymbol()+ ")");        }      } else       if (!(act instanceof Accept)) {        System.err.println("Critical internal error in parser driver : Found illegal action while returning to normal mode from dry run!");      }    } while (!(act instanceof Shift));  }  if (numGen != null)   numGen.removeFirst();  return returnToken;}  }
class C{  public HorizontalLineDrawable(int color,float lineWidthRelative){  mState=new HorizontalLineConstantState(null,color,0f,lineWidthRelative);  mPaint=initPaint(color,0f);}  }
class C{  public static boolean isTranslucencySupported(Translucency translucencyKind){switch (translucencyKind) {case PERPIXEL_TRANSPARENT:    return isWindowShapingSupported();case TRANSLUCENT:  return isWindowOpacitySupported();case PERPIXEL_TRANSLUCENT:return isWindowTranslucencySupported();}return false;}  }
class C{  public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){  if (cursor != null && cursor.getCount() != 0)   mOps.displayCursor(cursor);}  }
class C{  EditModeAction(final String name,final NetworkPanel networkPanel,final EditMode editMode){  super(name);  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  if (editMode == null) {    throw new IllegalArgumentException("editMode must not be null");  }  this.networkPanel=networkPanel;  this.editMode=editMode;}  }
class C{  private void adaptTitleView(){  if (titleContainer != null) {    inflateTitleView();    adaptTitle();    adaptTitleColor();    adaptIcon();  }}  }
class C{  public double slope(){  return beta;}  }
class C{  private static void buildInstructionLines(final INaviCodeNode node,final ZyLabelContent content,final ZyGraphViewSettings graphSettings,final INodeModifier modifier){  final List<Pair<String,List<CStyleRunData>>> lines=new ArrayList<Pair<String,List<CStyleRunData>>>();  final HashMap<Pair<String,List<CStyleRunData>>,ArrayList<CommentContainer>> comments=new HashMap<Pair<String,List<CStyleRunData>>,ArrayList<CommentContainer>>();  final int maxLine=createLines(node,lines,comments,graphSettings,modifier);  insertLines(content,lines,comments,maxLine);  ZyNodeBuilder.addCommentTagLines(content,node,node.getComments().getLocalCodeNodeComment(),node.getComments().getGlobalCodeNodeComment());}  }
class C{  public void testABandCBbrokerNetwork() throws Exception {  bridgeBrokers("BrokerA","BrokerB");  bridgeBrokers("BrokerC","BrokerB");  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  MessageConsumer clientC=createConsumer("BrokerC",dest);  Thread.sleep(2000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  sendMessages("BrokerB",dest,MESSAGE_COUNT);  sendMessages("BrokerC",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);  msgsC.waitForMessagesToArrive(MESSAGE_COUNT);  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT * 3,msgsB.getMessageCount());  assertEquals(MESSAGE_COUNT,msgsC.getMessageCount());}  }
class C{  public boolean isPointBehindLineOrigin(Vec4 point){  double dot=point.subtract3(this.getOrigin()).dot3(this.getDirection());  return dot < 0.0;}  }
class C{  protected ConnectionStateTLS(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    hash_size=cipherSuite.getMACLength();    boolean is_exportabe=cipherSuite.isExportable();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String macName=cipherSuite.getHmacName();    if (logger != null) {      logger.println("ConnectionStateTLS.create:");      logger.println("  cipher suite name: " + cipherSuite.getName());      logger.println("  encryption alg name: " + algName);      logger.println("  mac alg name: " + macName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF(key_block,session.master_secret,KEY_EXPANSION_LABEL,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      System.arraycopy(clientRandom,0,seed,0,clientRandom.length);      System.arraycopy(serverRandom,0,seed,clientRandom.length,serverRandom.length);      byte[] final_client_key=new byte[cipherSuite.expandedKeyMaterial];      byte[] final_server_key=new byte[cipherSuite.expandedKeyMaterial];      PRF.computePRF(final_client_key,client_key,CLIENT_WRITE_KEY_LABEL,seed);      PRF.computePRF(final_server_key,server_key,SERVER_WRITE_KEY_LABEL,seed);      client_key=final_client_key;      server_key=final_server_key;      if (block_size != 0) {        byte[] iv_block=new byte[2 * iv_size];        PRF.computePRF(iv_block,null,IV_BLOCK_LABEL,seed);        clientIV=new IvParameterSpec(iv_block,0,iv_size);        serverIV=new IvParameterSpec(iv_block,iv_size,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * (hash_size + key_size),iv_size);      serverIV=new IvParameterSpec(key_block,2 * (hash_size + key_size) + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key);      logger.println("server_key");      logger.print(server_key);      if (clientIV == null) {        logger.println("no IV.");      } else {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);      }    }    encMac=Mac.getInstance(macName);    decMac=Mac.getInstance(macName);    if (is_client) {      encMac.init(new SecretKeySpec(client_mac_secret,macName));      decMac.init(new SecretKeySpec(server_mac_secret,macName));    } else {      encMac.init(new SecretKeySpec(server_mac_secret,macName));      decMac.init(new SecretKeySpec(client_mac_secret,macName));    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public AddSignalMastPanel(SignalMast mast){  this();  inEditMode=true;  this.mast=mast;  sigSysBox.setEnabled(false);  mastBox.setEnabled(false);  signalMastDriver.setEnabled(false);  userName.setText(mast.getUserName());  userName.setEnabled(false);  sigSysBox.setSelectedItem(mast.getSignalSystem().getUserName());  loadMastDefinitions();  allowUnLit.setSelected(mast.allowUnLit());  String mastType="appearance-" + extractMastTypeFromMast(((jmri.implementation.AbstractSignalMast)mast).getSystemName()) + ".xml";  for (int i=0; i < mastNames.size(); i++) {    if (mastNames.get(i).getName().endsWith(mastType)) {      mastBox.setSelectedIndex(i);      break;    }  }  mastNames.get(mastBox.getSelectedIndex()).getName();  signalMastDriver.setEnabled(false);  systemPrefixBoxLabel.setEnabled(true);  systemPrefixBox.setEnabled(true);  dccAspectAddressLabel.setEnabled(true);  dccAspectAddressField.setEnabled(true);  if (mast instanceof jmri.implementation.SignalHeadSignalMast) {    signalMastDriver.setSelectedItem(Bundle.getMessage("HeadCtlMast"));    updateSelectedDriver();    signalHeadPanel.setVisible(false);    List<String> disabled=((SignalHeadSignalMast)mast).getDisabledAspects();    if (disabled != null) {      for (      String aspect : disabled) {        if (disabledAspects.containsKey(aspect)) {          disabledAspects.get(aspect).setSelected(true);        }      }    }  } else   if (mast instanceof jmri.implementation.TurnoutSignalMast) {    signalMastDriver.setSelectedItem(Bundle.getMessage("TurnCtlMast"));    updateSelectedDriver();    SignalAppearanceMap appMap=mast.getAppearanceMap();    TurnoutSignalMast tmast=(TurnoutSignalMast)mast;    if (appMap != null) {      java.util.Enumeration<String> aspects=appMap.getAspects();      while (aspects.hasMoreElements()) {        String key=aspects.nextElement();        TurnoutAspectPanel turnPanel=turnoutAspect.get(key);        turnPanel.setSelectedTurnout(tmast.getTurnoutName(key));        turnPanel.setTurnoutState(tmast.getTurnoutState(key));        turnPanel.setAspectDisabled(tmast.isAspectDisabled(key));      }    }    if (tmast.resetPreviousStates()) {      resetPreviousState.setSelected(true);    }    if (tmast.allowUnLit()) {      turnoutUnLitBox.setDefaultNamedBean(tmast.getUnLitTurnout());      if (tmast.getUnLitTurnoutState() == Turnout.CLOSED) {        turnoutUnLitState.setSelectedItem(stateClosed);      } else {        turnoutUnLitState.setSelectedItem(stateThrown);      }    }  } else   if (mast instanceof jmri.implementation.VirtualSignalMast) {    signalMastDriver.setSelectedItem(Bundle.getMessage("VirtualMast"));    updateSelectedDriver();    List<String> disabled=((VirtualSignalMast)mast).getDisabledAspects();    if (disabled != null) {      for (      String aspect : disabled) {        if (disabledAspects.containsKey(aspect)) {          disabledAspects.get(aspect).setSelected(true);        }      }    }  } else   if (mast instanceof jmri.implementation.DccSignalMast) {    if (mast instanceof jmri.jmrix.loconet.LNCPSignalMast) {      signalMastDriver.setSelectedItem(Bundle.getMessage("LNCPMast"));    } else {      signalMastDriver.setSelectedItem(Bundle.getMessage("DCCMast"));    }    updateSelectedDriver();    SignalAppearanceMap appMap=mast.getAppearanceMap();    DccSignalMast dmast=(DccSignalMast)mast;    if (appMap != null) {      java.util.Enumeration<String> aspects=appMap.getAspects();      while (aspects.hasMoreElements()) {        String key=aspects.nextElement();        DCCAspectPanel dccPanel=dccAspect.get(key);        dccPanel.setAspectDisabled(dmast.isAspectDisabled(key));        if (!dmast.isAspectDisabled(key)) {          dccPanel.setAspectId(dmast.getOutputForAppearance(key));        }      }    }    java.util.List<jmri.CommandStation> connList=jmri.InstanceManager.getList(jmri.CommandStation.class);    if (!connList.isEmpty()) {      for (int x=0; x < connList.size(); x++) {        jmri.CommandStation station=connList.get(x);        systemPrefixBox.addItem(station.getUserName());      }    } else {      systemPrefixBox.addItem("None");    }    dccAspectAddressField.setText("" + dmast.getDccSignalMastAddress());    systemPrefixBox.setSelectedItem(dmast.getCommandStation().getUserName());    systemPrefixBoxLabel.setEnabled(false);    systemPrefixBox.setEnabled(false);    dccAspectAddressLabel.setEnabled(false);    dccAspectAddressField.setEnabled(false);    if (dmast.allowUnLit()) {      unLitAspectField.setText("" + dmast.getUnlitId());    }  } else   if (mast instanceof jmri.implementation.MatrixSignalMast) {    signalMastDriver.setSelectedItem(Bundle.getMessage("MatrixCtlMast"));    updateSelectedDriver();    SignalAppearanceMap appMap=mast.getAppearanceMap();    MatrixSignalMast xmast=(MatrixSignalMast)mast;    bitNum=xmast.getBitNum();    updateMatrixMastPanel();    if (appMap != null) {      java.util.Enumeration<String> aspects=appMap.getAspects();      while (aspects.hasMoreElements()) {        String key=aspects.nextElement();        MatrixAspectPanel matrixPanel=matrixAspect.get(key);        matrixPanel.setAspectDisabled(xmast.isAspectDisabled(key));        if (!xmast.isAspectDisabled(key)) {          char[] mastBits=xmast.getBitsForAspect(key);          char[] panelAspectBits=Arrays.copyOf(mastBits,5);          matrixPanel.updateAspectBits(panelAspectBits);          matrixPanel.setAspectBoxes(panelAspectBits);        }      }    }    columnChoice.setSelectedIndex(bitNum - 1);    columnChoice.setEnabled(false);    if (!xmast.getOutputName(1).equals("")) {      turnoutBox1.setDefaultNamedBean(InstanceManager.turnoutManagerInstance().getTurnout(xmast.getOutputName(1)));    }    if (bitNum > 1 && !xmast.getOutputName(2).equals("")) {      turnoutBox2.setDefaultNamedBean(InstanceManager.turnoutManagerInstance().getTurnout(xmast.getOutputName(2)));    }    if (bitNum > 2 && !xmast.getOutputName(3).equals("")) {      turnoutBox3.setDefaultNamedBean(InstanceManager.turnoutManagerInstance().getTurnout(xmast.getOutputName(3)));    }    if (bitNum > 3 && !xmast.getOutputName(4).equals("")) {      turnoutBox4.setDefaultNamedBean(InstanceManager.turnoutManagerInstance().getTurnout(xmast.getOutputName(4)));    }    if (bitNum > 4 && !xmast.getOutputName(5).equals("")) {      turnoutBox5.setDefaultNamedBean(InstanceManager.turnoutManagerInstance().getTurnout(xmast.getOutputName(5)));    }    if (xmast.resetPreviousStates()) {      resetPreviousState.setSelected(true);    }    if (xmast.allowUnLit()) {      char[] mastUnLitBits=xmast.getUnLitBits();      char[] unLitPanelBits=Arrays.copyOf(mastUnLitBits,5);      UnLitCheck1.setSelected(unLitPanelBits[0] == '1');      if (bitNum > 1) {        UnLitCheck2.setSelected(unLitPanelBits[1] == '1');      }      if (bitNum > 2) {        UnLitCheck3.setSelected(unLitPanelBits[2] == '1');      }      if (bitNum > 3) {        UnLitCheck4.setSelected(unLitPanelBits[3] == '1');      }      if (bitNum > 4) {        UnLitCheck5.setSelected(unLitPanelBits[4] == '1');      }      String value=String.valueOf(unLitPanelBits);      unLitBitsField.setText(value);    }  }  cancel.setVisible(true);  apply.setVisible(true);  create.setVisible(false);}  }
class C{  public void switchUser(User user){  mCurrentUser=user;  persistCurrentUser();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private static void weakHashLength32WithSeeds(byte[] bytes,int offset,long seedA,long seedB,long[] output){  long part1=load64(bytes,offset);  long part2=load64(bytes,offset + 8);  long part3=load64(bytes,offset + 16);  long part4=load64(bytes,offset + 24);  seedA+=part1;  seedB=rotateRight(seedB + seedA + part4,21);  long c=seedA;  seedA+=part2;  seedA+=part3;  seedB+=rotateRight(seedA,44);  output[0]=seedA + part4;  output[1]=seedB + c;}  }
class C{  public Vector3f cross(float otherX,float otherY,float otherZ,Vector3f result){  if (result == null)   result=new Vector3f();  float resX=((y * otherZ) - (z * otherY));  float resY=((z * otherX) - (x * otherZ));  float resZ=((x * otherY) - (y * otherX));  result.set(resX,resY,resZ);  return result;}  }
class C{  @Transactional public long createVoucherFromBill(final int billId) throws ApplicationRuntimeException {  try {    String voucherStatus=null;    final List vStatusList=appConfigValuesService.getConfigValuesByModuleAndKey("EGF","DEFAULTVOUCHERCREATIONSTATUS");    if (!vStatusList.isEmpty() && vStatusList.size() == 1) {      final AppConfigValues appVal=(AppConfigValues)vStatusList.get(0);      voucherStatus=appVal.getValue();    } else     throw new ApplicationRuntimeException("DEFAULTVOUCHERCREATIONSTATUS" + MISSINGMSG);    final long vh=createVoucher.createVoucherFromBill(billId,voucherStatus,null,null);    return vh;  } catch (  final Exception e) {    LOGGER.error(e.getMessage());    throw new ApplicationRuntimeException(e.getMessage());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void addMember(TypeDeclaration type,BodyDeclaration decl){  List<BodyDeclaration> members=type.getMembers();  if (members == null) {    members=new ArrayList<BodyDeclaration>();    type.setMembers(members);  }  members.add(decl);}  }
class C{  public static void checkMagic(int magic) throws JdpException {  if (magic != MAGIC) {    throw new JdpException("Invalid JDP magic header: " + magic);  }}  }
class C{  public static void reset(){  nextAddress=0;}  }
class C{  public boolean isNullOnSomePath(){  int baseKind=getBaseKind();  if (NCP_EXTRA_BRANCH) {    return baseKind == NSP || baseKind == NCP2;  } else {    return baseKind == NSP;  }}  }
class C{  private static void usage(final String message){  final PrintStream out=System.out;  out.println("\n** " + message + "\n");  out.println("agent start [-J<vmarg>]* [-dir=<dir>] [prop=value]*");  out.println(LocalizedStrings.AgentLauncher_STARTS_THE_GEMFIRE_JMX_AGENT.toLocalizedString());  out.println("\t" + LocalizedStrings.AgentLauncher_VMARG.toLocalizedString());  out.println("\t" + LocalizedStrings.AgentLauncher_DIR.toLocalizedString());  out.println("\t" + LocalizedStrings.AgentLauncher_PROP.toLocalizedString());  out.println("\t" + LocalizedStrings.AgentLauncher_SEE_HELP_CONFIG.toLocalizedString());  out.println();  out.println("agent stop [-dir=<dir>]");  out.println(LocalizedStrings.AgentLauncher_STOPS_A_GEMFIRE_JMX_AGENT.toLocalizedString());  out.println("\t" + LocalizedStrings.AgentLauncher_DIR.toLocalizedString());  out.println("");  out.println("agent status [-dir=<dir>]");  out.println(LocalizedStrings.AgentLauncher_REPORTS_THE_STATUS_AND_THE_PROCESS_ID_OF_A_GEMFIRE_JMX_AGENT.toLocalizedString());  out.println("\t" + LocalizedStrings.AgentLauncher_DIR.toLocalizedString());  out.println();  System.exit(1);}  }
class C{  public AccountHeaderBuilder withHeightDp(int heightDp){  this.mHeight=DimenHolder.fromDp(heightDp);  return this;}  }
class C{  private static String generateRandomString(){  final StringBuilder res=new StringBuilder();  final Random rnd=new SecureRandom();  for (int i=0; i < 32; i++) {    int pos=(int)(rnd.nextFloat() * CHARS.length());    res.append(CHARS.charAt(pos));  }  return res.toString();}  }
class C{  public int size(){  return nodes.size();}  }
class C{  public void run(){  if (type != EXIT_ACTION)   Kit.codeBug();  System.exit(0);}  }
class C{  public void handleEvent(Event evt){  Node n=(Node)evt.getTarget();  while (n != null && !(n instanceof XBLOMDefinitionElement)) {    n=n.getParentNode();  }  DefinitionRecord defRec=(DefinitionRecord)definitions.get(n,importElement);  if (defRec == null) {    return;  }  rebind(defRec.namespaceURI,defRec.localName,document.getDocumentElement());}  }
class C{  private GroovyShell createGroovyShell(){  Binding groovyBinding=new Binding();  final GroovyShell interp=new GroovyShell(groovyBinding);  return interp;}  }
class C{  public GOETreeNode(Object userObject){  super(userObject);}  }
class C{  protected static NullableObject<Object>[] arrayCopy(NullableObject<Object>[] array){  if (array == null) {    return null;  }  NullableObject<Object>[] result=(NullableObject<Object>[])new NullableObject[array.length];  System.arraycopy(array,0,result,0,array.length);  return result;}  }
class C{  protected void addTo(Group bg,Iterator shapeIterator){  while (shapeIterator.hasNext()) {    try {      Shape3D shape=(Shape3D)shapeIterator.next();      if (shape != null) {        bg.addChild(shape);      }    } catch (    ClassCastException cce) {      continue;    }  }}  }
class C{  public String toStringShort(){  return AbstractFormatter.shape(this);}  }
class C{  public void addMetaData(KeyAndValue keyAndValue){  metaData.add(keyAndValue);}  }
class C{  @Deprecated public static List collectAll(Collection self,Closure transform){  return collectNested(self,transform);}  }
class C{  private void compactPublicKey(short[][][] coeff_quadratic_to_compact){  int polynomials=coeff_quadratic_to_compact.length;  int n=coeff_quadratic_to_compact[0].length;  int entries=n * (n + 1) / 2;  this.pub_quadratic=new short[polynomials][entries];  int offset=0;  for (int p=0; p < polynomials; p++) {    offset=0;    for (int x=0; x < n; x++) {      for (int y=x; y < n; y++) {        if (y == x) {          this.pub_quadratic[p][offset]=coeff_quadratic_to_compact[p][x][y];        } else {          this.pub_quadratic[p][offset]=GF2Field.addElem(coeff_quadratic_to_compact[p][x][y],coeff_quadratic_to_compact[p][y][x]);        }        offset++;      }    }  }}  }
class C{  protected void onWornOff(final Player player){  if (wearsOutfitFromHere(player)) {    player.sendPrivateText(wearOffMessage);    returnToOriginalOutfit(player);  }}  }
class C{  public MsgMgr(TransformerImpl transformer){  m_transformer=transformer;}  }
class C{  public static double calcRadius(int[] instList,Instances insts,Instance pivot,DistanceFunction distanceFunction) throws Exception {  return calcRadius(0,instList.length - 1,instList,insts,pivot,distanceFunction);}  }
class C{  public boolean isFluid(){  return typeString.contains(SUFFIX_FLUID);}  }
class C{  protected void assertInspect(Object value,String expected){  Object console=InvokerHelper.invokeMethod(value,"inspect",null);  assertEquals("inspect() on value: " + value,expected,console);}  }
class C{  @Override public boolean isRunning(){  return running;}  }
class C{  public NodeCoordinates(int size,EdgeWeightType edgeWeightType){  this(size,edgeWeightType.getNodeCoordType(),edgeWeightType.getDistanceFunction());}  }
class C{  public void testGetDumpParserForBeaLogfile() throws FileNotFoundException {  System.out.println("getDumpParserForVersion");  InputStream dumpFileStream=new FileInputStream("test/none/jrockit_15_dump.txt");  Map threadStore=null;  DumpParserFactory instance=DumpParserFactory.get();  DumpParser result=instance.getDumpParserForLogfile(dumpFileStream,threadStore,false,0);  assertNotNull(result);  assertTrue(result instanceof com.pironet.tda.BeaJDKParser);}  }
class C{  public AsyncResult TransferSubscriptionsAsync(RequestHeader RequestHeader,UnsignedInteger[] SubscriptionIds,Boolean SendInitialValues){  TransferSubscriptionsRequest req=new TransferSubscriptionsRequest(RequestHeader,SubscriptionIds,SendInitialValues);  return channel.serviceRequestAsync(req);}  }
class C{  private static void _register(Instantiator instantiator,boolean distribute){  if (instantiator == null) {    throw new NullPointerException(LocalizedStrings.InternalInstantiator_CANNOT_REGISTER_A_NULL_INSTANTIATOR.toLocalizedString());  }  final int classId=instantiator.getId();  if (classId == 0) {    throw new IllegalArgumentException(LocalizedStrings.Instantiator_INSTANTIATOR_ID_CANNOT_BE_ZERO.toLocalizedString());  }  Class c=instantiator.getInstantiatedClass();  final String cName=c.getName();{    int oldId=getClassId(c);    if (oldId != 0 && oldId != classId) {      throw new IllegalStateException(LocalizedStrings.InternalInstantiator_CLASS_0_IS_ALREADY_REGISTERED_WITH_ID_1_SO_IT_CANNOT_BE_REGISTERED_WTH_ID_2.toLocalizedString(new Object[]{c.getName(),Integer.valueOf(oldId),Integer.valueOf(classId)}));    }  }  final Integer idx=Integer.valueOf(classId);synchronized (InternalInstantiator.class) {    boolean retry;    do {      retry=false;      Object oldInst=idsToInstantiators.putIfAbsent(idx,instantiator);      if (oldInst != null) {        if (oldInst instanceof Marker) {          retry=!idsToInstantiators.replace(idx,oldInst,instantiator);          if (!retry) {            dsMap.put(cName,instantiator);            ((Marker)oldInst).setInstantiator(instantiator);          }        } else {          Class oldClass=((Instantiator)oldInst).getInstantiatedClass();          if (!oldClass.getName().equals(cName)) {            throw new IllegalStateException(LocalizedStrings.InternalInstantiator_CLASS_ID_0_IS_ALREADY_REGISTERED_FOR_CLASS_1_SO_IT_COULD_NOT_BE_REGISTED_FOR_CLASS_2.toLocalizedString(new Object[]{Integer.valueOf(classId),oldClass.getName(),cName}));          } else {            return;          }        }      } else {        dsMap.put(cName,instantiator);      }    } while (retry);    GemFireCacheImpl cache=GemFireCacheImpl.getInstance();    if (cache != null && instantiator.getEventId() == null) {      instantiator.setEventId(new EventID(cache.getDistributedSystem()));    }    logger.info(LocalizedMessage.create(LocalizedStrings.InternalInstantiator_REGISTERED,new Object[]{Integer.valueOf(classId),c.getName()}));  }  if (distribute) {    sendRegistrationMessage(instantiator);    sendRegistrationMessageToServers(instantiator);  }  sendRegistrationMessageToClients(instantiator);  InternalDataSerializer.fireNewInstantiator(instantiator);}  }
class C{  static long divWord(long n,int d){  long dLong=d & LONG_MASK;  long r;  long q;  if (dLong == 1) {    q=(int)n;    r=0;    return (r << 32) | (q & LONG_MASK);  }  q=(n >>> 1) / (dLong >>> 1);  r=n - q * dLong;  while (r < 0) {    r+=dLong;    q--;  }  while (r >= dLong) {    r-=dLong;    q++;  }  return (r << 32) | (q & LONG_MASK);}  }
class C{  public String maxKey(){  checkMinMax("maxKey");  return keys[maxIndex()];}  }
class C{  protected void recoverField(ClassDefinition newClass) throws SyntaxError, IOException {  while (true) {switch (token) {case EOF:case STATIC:case FINAL:case PUBLIC:case PRIVATE:case SYNCHRONIZED:case TRANSIENT:case VOID:case BOOLEAN:case BYTE:case CHAR:case SHORT:case INT:case FLOAT:case LONG:case DOUBLE:      return;case LBRACE:    match(LBRACE,RBRACE);  scan();break;case LPAREN:match(LPAREN,RPAREN);scan();break;case LSQBRACKET:match(LSQBRACKET,RSQBRACKET);scan();break;case RBRACE:case INTERFACE:case CLASS:case IMPORT:case PACKAGE:actions.endClass(pos,newClass);throw new SyntaxError();default :scan();break;}}}  }
class C{  public void writeField(String name,short value) throws java.io.IOException {  writeField(name,Short.toString(value));}  }
class C{  private static void registerFakeFiles(FileCommands sut,String... filenames){  if (filenames.length == 0) {    doReturn(false).when(sut).osFileExists(any(File.class));  } else {    for (    String filename : filenames) {      doReturn(true).when(sut).osFileExists(new File(X_FAKE_OUTPUT_DIR,filename));      doReturn(true).when(sut).osFileExists(createTestFile(filename));    }  }}  }
class C{  public static int intersectQuad(double x1,double y1,double cx,double cy,double x2,double y2,double rx1,double ry1,double rx2,double ry2){  if ((rx2 < x1 && rx2 < cx && rx2 < x2) || (rx1 > x1 && rx1 > cx && rx1 > x2) || (ry1 > y1 && ry1 > cy && ry1 > y2)) {    return 0;  }  if (ry2 < y1 && ry2 < cy && ry2 < y2 && rx1 != x1 && rx1 != x2) {    if (x1 < x2) {      return x1 < rx1 && rx1 < x2 ? 1 : 0;    }    return x2 < rx1 && rx1 < x1 ? -1 : 0;  }  QuadCurve c=new QuadCurve(x1,y1,cx,cy,x2,y2);  double px1=rx1 - x1;  double py1=ry1 - y1;  double px2=rx2 - x1;  double py2=ry2 - y1;  double res1[]=new double[3];  double res2[]=new double[3];  int rc1=c.solvePoint(res1,px1);  int rc2=c.solvePoint(res2,px2);  if (rc1 == 0 && rc2 == 0) {    return 0;  }  double minX=px1 - DELTA;  double maxX=px2 + DELTA;  double bound[]=new double[28];  int bc=0;  bc=c.addBound(bound,bc,res1,rc1,minX,maxX,false,0);  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,false,1);  rc2=c.solveExtrem(res2);  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,true,2);  if (rx1 < x1 && x1 < rx2) {    bound[bc++]=0.0;    bound[bc++]=0.0;    bound[bc++]=0.0;    bound[bc++]=4;  }  if (rx1 < x2 && x2 < rx2) {    bound[bc++]=1.0;    bound[bc++]=c.ax;    bound[bc++]=c.ay;    bound[bc++]=5;  }  int cross=crossBound(bound,bc,py1,py2);  if (cross != UNKNOWN) {    return cross;  }  return c.cross(res1,rc1,py1,py2);}  }
class C{  private static int NewObject(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: NewObject  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    RVMClass vmcls=java.lang.JikesRVMSupport.getTypeForClass(cls).asClass();    if (vmcls.isAbstract() || vmcls.isInterface()) {      env.recordException(new InstantiationException());      return 0;    }    Object newobj=JNIHelpers.invokeInitializer(cls,methodID,Address.zero(),false,true);    return env.pushJNIRef(newobj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public boolean isFacingFront(){  return getCameraFacing() == OneCamera.Facing.FRONT;}  }
class C{  private int loadNextByteInBuffer() throws IOException {  final int value=this.readByteFromStream();  if (value < 0) {    return value;  }  this.bitBuffer=value;  this.bitsInBuffer=8;  return value;}  }
class C{  public boolean isClique(Set<String> subsetIds){  if (!subsetIds.isEmpty()) {    String first=subsetIds.iterator().next();    return hasNode(first) && getNode(first).getClique().equals(subsetIds);  }  return false;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) private void dimStatusBar(boolean dim){  if (!AndroidVersion.isHoneycombOrLater() || mIsNavMenu)   return;  int visibility=0;  int navbar=0;  if (!AndroidDevices.hasCombBar() && AndroidVersion.isJellyBeanOrLater()) {    visibility=View.SYSTEM_UI_FLAG_LAYOUT_STABLE;    navbar=View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;  }  visibility|=View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;  if (dim) {    navbar|=View.SYSTEM_UI_FLAG_LOW_PROFILE;    if (!AndroidDevices.hasCombBar()) {      navbar|=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;      if (AndroidVersion.isKitKatOrLater())       visibility|=View.SYSTEM_UI_FLAG_IMMERSIVE;      visibility|=View.SYSTEM_UI_FLAG_FULLSCREEN;    }  } else {    getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);    visibility|=View.SYSTEM_UI_FLAG_VISIBLE;  }  if (AndroidDevices.hasNavBar())   visibility|=navbar;  getWindow().getDecorView().setSystemUiVisibility(visibility);}  }
class C{  public static void putAt(BitSet self,int index,boolean value){  self.set(index,value);}  }
class C{  public void testRemove(){  System.out.println("remove");  AuditServiceListener listener=EasyMock.createMock(AuditServiceListener.class);  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  instance.add(listener);  assertEquals(1,instance.getListeners().size());  instance.remove(listener);  assertEquals(0,instance.getListeners().size());}  }
class C{  private void toggleComponents(Container container){}  }
class C{  public void writeLine(double[] column){  String str=Double.toString(column[0]);  for (int i=1; i < column.length; ++i) {    str+=", " + column[i];  }  writer.println(str);}  }
class C{  public static void main(String[] args) throws TestFailed, ClassNotFoundException {  testFailLoadAndGc();}  }
class C{  public WindDataItem(Number x,Number windDir,Number windForce){  this.x=x;  this.windDir=windDir;  this.windForce=windForce;}  }
class C{  protected void assertLength(int length,Object[] array){  assertEquals(length,array.length);}  }
class C{  public void open(String url) throws IOException {  URL urlConn=new URL(url);  connection=(HttpURLConnection)urlConn.openConnection();  connection.connect();}  }
class C{  @Override public PropertiesConfigurer<I> property(String key,String value){  properties.put(key,value);  return this;}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public void addElement(Element element){  addElement(element,(short)(DRAW | FILL));}  }
class C{  protected BufferedImage createBackingImage(int width,int height){  int potWidth=WWMath.powerOfTwoCeiling(width);  int potHeight=WWMath.powerOfTwoCeiling(height);  BufferedImage bi=new BufferedImage(potWidth,potHeight,BufferedImage.TYPE_4BYTE_ABGR_PRE);  this.clearRect(bi,0,0,potWidth,potHeight);  return bi;}  }
class C{  public Node afterEncode(mxCodec enc,Object obj,Node node){  return node;}  }
class C{  public String toString(){  if (null == getForObject()) {    return null;  } else {    return getForObject().toString();  }}  }
class C{  private List<ORCLUSCluster> initialSeeds(Relation<V> database,int k){  DBIDs randomSample=DBIDUtil.randomSample(database.getDBIDs(),k,rnd);  List<ORCLUSCluster> seeds=new ArrayList<>(k);  for (DBIDIter iter=randomSample.iter(); iter.valid(); iter.advance()) {    seeds.add(new ORCLUSCluster(database.get(iter).toArray(),iter));  }  return seeds;}  }
class C{  public void renderCenteredString(String string,float minX,float minY,float maxX,float maxY,ScreenType type){}  }
class C{  public ServerState stop(){  final ServerLauncher launcher=getInstance();  if (isStoppable()) {    return stopInProcess();  } else   if (isPidInProcess() && launcher != null) {    return launcher.stopInProcess();  } else   if (getPid() != null) {    return stopWithPid();  } else   if (getWorkingDirectory() != null) {    return stopWithWorkingDirectory();  }  return new ServerState(this,Status.NOT_RESPONDING);}  }
class C{  public void started(){  fireCreationEvent();}  }
class C{  public void clearAuthenticationTokens(){  this.authenticationTokens.clear();}  }
class C{  public BigdataCoreVocabulary_v20160317(){  super();}  }
class C{  private void skipStore(boolean skipStore){  flags=skipStore ? (byte)(flags | SKIP_STORE_FLAG_MASK) : (byte)(flags & ~SKIP_STORE_FLAG_MASK);}  }
class C{  private void appendXMLStructureToNode(Element parentNode,Document doc){  if (doc != null) {    Node cloneNode=doc.getFirstChild().cloneNode(true);    cloneNode=parentNode.getOwnerDocument().importNode(cloneNode,true);    parentNode.appendChild(cloneNode);  }}  }
class C{  public static String encodeECC200(String codewords,SymbolInfo symbolInfo){  if (codewords.length() != symbolInfo.getDataCapacity()) {    throw new IllegalArgumentException("The number of codewords does not match the selected symbol");  }  StringBuilder sb=new StringBuilder(symbolInfo.getDataCapacity() + symbolInfo.getErrorCodewords());  sb.append(codewords);  int blockCount=symbolInfo.getInterleavedBlockCount();  if (blockCount == 1) {    String ecc=createECCBlock(codewords,symbolInfo.getErrorCodewords());    sb.append(ecc);  } else {    sb.setLength(sb.capacity());    int[] dataSizes=new int[blockCount];    int[] errorSizes=new int[blockCount];    int[] startPos=new int[blockCount];    for (int i=0; i < blockCount; i++) {      dataSizes[i]=symbolInfo.getDataLengthForInterleavedBlock(i + 1);      errorSizes[i]=symbolInfo.getErrorLengthForInterleavedBlock(i + 1);      startPos[i]=0;      if (i > 0) {        startPos[i]=startPos[i - 1] + dataSizes[i];      }    }    for (int block=0; block < blockCount; block++) {      StringBuilder temp=new StringBuilder(dataSizes[block]);      for (int d=block; d < symbolInfo.getDataCapacity(); d+=blockCount) {        temp.append(codewords.charAt(d));      }      String ecc=createECCBlock(temp.toString(),errorSizes[block]);      int pos=0;      for (int e=block; e < errorSizes[block] * blockCount; e+=blockCount) {        sb.setCharAt(symbolInfo.getDataCapacity() + e,ecc.charAt(pos++));      }    }  }  return sb.toString();}  }
class C{  public GT_Recipe addFakeRecipe(boolean aCheckForCollisions,ItemStack[] aInputs,ItemStack[] aOutputs,Object aSpecial,int[] aOutputChances,FluidStack[] aFluidInputs,FluidStack[] aFluidOutputs,int aDuration,int aEUt,int aSpecialValue){  return addFakeRecipe(aCheckForCollisions,new GT_Recipe(false,aInputs,aOutputs,aSpecial,aOutputChances,aFluidInputs,aFluidOutputs,aDuration,aEUt,aSpecialValue));}  }
class C{  public AVList extractViewingParameters(Vec4 origin,Angle roll,Globe globe){  if (origin == null) {    String msg=Logging.getMessage("nullValue.OriginIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (roll == null) {    String msg=Logging.getMessage("nullValue.RollIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Position originPos=globe.computePositionFromPoint(origin);  Matrix modelviewLocal=this.multiply(globe.computeModelCoordinateOriginTransform(originPos));  Matrix m=modelviewLocal;  double range=-m.m34;  double ct=m.m33;  double st=Math.sqrt(m.m13 * m.m13 + m.m23 * m.m23);  double tilt=Math.atan2(st,ct);  double cr=Math.cos(roll.radians);  double sr=Math.sin(roll.radians);  double ch=cr * m.m11 - sr * m.m21;  double sh=sr * m.m22 - cr * m.m12;  double heading=Math.atan2(sh,ch);  AVList params=new AVListImpl();  params.setValue(AVKey.ORIGIN,originPos);  params.setValue(AVKey.RANGE,range);  params.setValue(AVKey.HEADING,Angle.fromRadians(heading));  params.setValue(AVKey.TILT,Angle.fromRadians(tilt));  params.setValue(AVKey.ROLL,roll);  return params;}  }
class C{  public void close() throws SQLException {  close(true);}  }
class C{  public static Properties loadReportConfig(){  final Properties reportProps=new Properties();  try {    reportProps.load(getFileAsStream(ReportConstants.REPORT_CONFIG_FILE));    return reportProps;  } catch (  final IOException e) {    LOGGER.warn("Exception while loading report configuration file [" + ReportConstants.REPORT_CONFIG_FILE + "]",e);    return null;  }catch (  final ApplicationRuntimeException e) {    LOGGER.warn("Exception while loading report configuration file [" + ReportConstants.REPORT_CONFIG_FILE + "]",e);    return null;  }}  }
class C{  public GdbDirectory directory(@NotNull String directory) throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("directory " + directory);  return GdbDirectory.parse(gdbOutput);}  }
class C{  private void updateConnectionUI(int quality){  getStatusLine().setConnectionQuality(quality);}  }
class C{  public synchronized boolean removeLast(K obj){  if (peekLast() != obj) {    return false;  }  array=Arrays.copyOf(array,array.length - 1);  return true;}  }
class C{  public SchemaReceiverImpl(PropertyMap properties){  this.attributeOwner=properties.get(WrapProperty.ATTRIBUTE_OWNER);  PropertyMapBuilder builder=new PropertyMapBuilder();  for (int i=0; i < subSchemaProperties.length; i++) {    Object value=properties.get(subSchemaProperties[i]);    if (value != null)     builder.put(subSchemaProperties[i],value);  }  this.properties=builder.toPropertyMap();  this.autoSchemaReader=new AutoSchemaReader(properties.get(SchemaReceiverFactory.PROPERTY));}  }
class C{  public static byte[] toBytes(char x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos]=(byte)(x >> 8);  return bytes;}  }
class C{  private static boolean isSorted(JavaPairRDD<Long,FrameBlock> in){  List<Long> keys=in.keys().mapPartitions(new SortingAnalysisFunction()).collect();  long max=0;  for (  Long val : keys) {    if (val < max)     return false;    max=val;  }  return true;}  }
class C{  public void elementStarted(String name,String systemId,int lineNr) throws Exception {  this.delegate.elementStarted(name,systemId,lineNr);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public label addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private static void checkFromToBounds(int arrayLength,int origin,int fence){  if (origin > fence) {    throw new ArrayIndexOutOfBoundsException("origin(" + origin + ") > fence("+ fence+ ")");  }  if (origin < 0) {    throw new ArrayIndexOutOfBoundsException(origin);  }  if (fence > arrayLength) {    throw new ArrayIndexOutOfBoundsException(fence);  }}  }
class C{  public NOPRecordCompressor(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.COMPLEX_ATTRIBUTE___UNIQUE_1:    setUnique_1(UNIQUE_1_EDEFAULT);  return;case UmplePackage.COMPLEX_ATTRIBUTE___LAZY_1:setLazy_1(LAZY_1_EDEFAULT);return;case UmplePackage.COMPLEX_ATTRIBUTE___MODIFIER_1:setModifier_1(MODIFIER_1_EDEFAULT);return;case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_11:getAnonymous_complexAttribute_1_1().clear();return;case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_21:getAnonymous_complexAttribute_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public List<SootMethod> all(){  List<SootMethod> ret=new ArrayList<SootMethod>();  ret.addAll(application());  ret.addAll(implicit());  return ret;}  }
class C{  public FgsMbRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  boolean isInitValueValid(long v){  if ((v < Integer.MIN_VALUE) || (v > Integer.MAX_VALUE)) {    return false;  }  return true;}  }
class C{  public KMLOrientation(String namespaceURI){  super(namespaceURI);}  }
class C{  CounterContext(CalculatedStyle style,Integer startIndex){  if (startIndex != null) {    _counters.put("list-item",startIndex);  }  _parent=(LayoutContext.CounterContext)_counterContextMap.get(style.getParent());  if (_parent == null)   _parent=new CounterContext();  List resets=style.getCounterReset();  if (resets != null)   for (Iterator i=resets.iterator(); i.hasNext(); ) {    CounterData cd=(CounterData)i.next();    _parent.resetCounter(cd);  }  List increments=style.getCounterIncrement();  if (increments != null)   for (Iterator i=increments.iterator(); i.hasNext(); ) {    CounterData cd=(CounterData)i.next();    if (!_parent.incrementCounter(cd)) {      _parent.resetCounter(new CounterData(cd.getName(),0));      _parent.incrementCounter(cd);    }  }  if (style.isIdent(CSSName.DISPLAY,IdentValue.LIST_ITEM)) {    if (startIndex != null) {      _parent._counters.put("list-item",startIndex);    }    _parent.incrementListItemCounter(1);  }}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {  SCHEMES.get(oprot.getScheme()).getScheme().write(oprot,this);}  }
class C{  public void updateSchema(Session session,ConnectorSchemaMetadata schemaMetadata){  String schemaName=session.getSchema();  checkArgument(schemaName != null,"Schema cannot be null");  ConnectorMetadataEntry entry=validateCatalogName(session.getCatalog());  ConnectorMetadata metadata=entry.getMetadata();  if (!(metadata instanceof ConnectorDetailMetadata)) {    throw new PrestoException(NOT_SUPPORTED,"Update schema not supported for connector " + entry.getConnectorId());  }  ConnectorDetailMetadata detailMetadata=(ConnectorDetailMetadata)metadata;  detailMetadata.updateSchema(session.toConnectorSession(),schemaMetadata);}  }
class C{  @Override public boolean test(T first,T second){  final AtomicReferenceArray<Object> buffer=producerArray;  final long p=producerIndex;  final int m=mask;  int pi=(int)(p + 2) & m;  if (null == buffer.get(pi)) {    pi=(int)p & m;    buffer.lazySet(pi + 1,second);    buffer.lazySet(pi,first);    PRODUCER_INDEX.lazySet(this,p + 2);  } else {    final int capacity=buffer.length();    final AtomicReferenceArray<Object> newBuffer=new AtomicReferenceArray<>(capacity);    producerArray=newBuffer;    pi=(int)p & m;    newBuffer.lazySet(pi + 1,second);    newBuffer.lazySet(pi,first);    buffer.lazySet(buffer.length() - 1,newBuffer);    buffer.lazySet(pi,NEXT);    PRODUCER_INDEX.lazySet(this,p + 2);  }  return true;}  }
class C{  public static int tests(int b){  short x=(short)b;  int y=x & 0xffff;  if (y == 0xffff) {    y=(int)(System.currentTimeMillis() >> 32);  }  return y;}  }
class C{  protected JvmMemGCTableMeta createJvmMemGCTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmMemGCTableMetaImpl(mib,objectserver);}  }
class C{  public static void main(String[] args){  Utils.runTests(new MacSameTest());}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!MPeriod.isOpen(getCtx(),getUpdated(),MDocType.DOCBASETYPE_MaterialMovement,getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MMovementLineConfirm[] lines=getLines(true);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  boolean difference=false;  for (int i=0; i < lines.length; i++) {    if (!lines[i].isFullyConfirmed()) {      difference=true;      break;    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  public boolean isReconnectNeeded(){  if (fileLockMethod != FileLock.LOCK_SERIALIZED) {    return false;  }  if (reconnectChangePending) {    return false;  }  long now=System.currentTimeMillis();  if (now < reconnectCheckNext) {    return false;  }  reconnectCheckNext=now + reconnectCheckDelay;  if (lock == null) {    lock=new FileLock(traceSystem,databaseName + Constants.SUFFIX_LOCK_FILE,Constants.LOCK_SLEEP);  }  try {    Properties prop=lock.load(), first=prop;    while (true) {      if (prop.equals(reconnectLastLock)) {        return false;      }      if (prop.getProperty("changePending",null) == null) {        break;      }      if (System.currentTimeMillis() > now + reconnectCheckDelay * 10) {        if (first.equals(prop)) {          lock.setProperty("changePending",null);          lock.save();          break;        }      }      trace.debug("delay (change pending)");      Thread.sleep(reconnectCheckDelay);      prop=lock.load();    }    reconnectLastLock=prop;  } catch (  Exception e) {    trace.error(e,"readOnly {0}",readOnly);  }  return true;}  }
class C{  @Override public boolean hasNext(){  boolean scanHasMore=((null == scaniter) || nvalues <= 0) ? false : scaniter.hasNext();  if (scanHasMore) {    return true;  }  if (null != scaniter) {    this.scanner.close();    this.scanner=null;    this.scaniter=null;  }  if (idx >= metadatas.size()) {    return false;  }  Metadata metadata=metadatas.get(idx++);  byte[] startkey=new byte[Store.HBASE_RAW_DATA_KEY_PREFIX.length + 8 + 8+ 8];  byte[] endkey=new byte[startkey.length];  ByteBuffer bb=ByteBuffer.wrap(startkey).order(ByteOrder.BIG_ENDIAN);  bb.put(Store.HBASE_RAW_DATA_KEY_PREFIX);  bb.putLong(metadata.getClassId());  bb.putLong(metadata.getLabelsId());  long modulus=now - (now % Constants.DEFAULT_MODULUS);  bb.putLong(Long.MAX_VALUE - modulus);  bb=ByteBuffer.wrap(endkey).order(ByteOrder.BIG_ENDIAN);  bb.put(Store.HBASE_RAW_DATA_KEY_PREFIX);  bb.putLong(metadata.getClassId());  bb.putLong(metadata.getLabelsId());  if (timespan >= 0) {    modulus=(now - timespan);    modulus=(modulus - (modulus % Constants.DEFAULT_MODULUS)) - Constants.DEFAULT_MODULUS;    bb.putLong(Long.MAX_VALUE - modulus);  } else {    bb.putLong(0xffffffffffffffffL);  }  nvalues=timespan < 0 ? -timespan : Long.MAX_VALUE;  Scan scan=new Scan();  scan.addFamily(colfam);  scan.setStartRow(startkey);  scan.setStopRow(endkey);  if (timespan > 0) {    scan.setMaxResultSize(1000000L);  }  scan.setBatch((int)(timespan < 0 ? Math.min(-timespan,100000) : 100000));  scan.setCaching((int)(timespan < 0 ? Math.min(-timespan,100000) : 100000));  if (this.useBlockcache) {    scan.setCacheBlocks(true);  } else {    scan.setCacheBlocks(false);  }  try {    this.scanner=htable.getScanner(scan);    Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_HBASE_CLIENT_SCANNERS,Sensision.EMPTY_LABELS,1);    this.scaniter=this.scanner.iterator();  } catch (  IOException ioe) {    this.scanner=null;    this.scaniter=null;    return hasNext();  }  if (this.scaniter.hasNext()) {    return true;  } else {    return hasNext();  }}  }
class C{  public char skipTo(char to){  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new RuntimeException(exc);  }  this.back();  return c;}  }
class C{  public final void writeChar(int v) throws IOException {  write((v >>> 8) & 0xFF);  write((v) & 0xFF);}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException(padding + " cannot be used");  }}  }
class C{  public static Object invokeStatic(Class clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {  try {    Method method=clazz.getMethod(methodName,types);    Object result=method.invoke(null,values);    return result;  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  private static void queryItemType(String locale,String itemType) throws IOException, ServiceException {  URL url=urlFactory.getItemTypesEntryURL(locale,itemType);  System.out.println("Sending request to: " + url);  try {    GoogleBaseEntry entry=service.getEntry(url);    printItemTypeEntry(entry);  } catch (  ServiceException e) {    printServiceException(e);  }}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  double value=dataValue.doubleValue();  PlotOrientation orientation=plot.getOrientation();  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);  RectangleEdge edge=plot.getRangeAxisEdge();  double barL=rangeAxis.valueToJava2D(value,dataArea,edge);  Line2D line;  double x, y;  if (orientation.isHorizontal()) {    x=barL;    y=barW0 + state.getBarWidth() / 2.0;    line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth());  } else {    x=barW0 + state.getBarWidth() / 2.0;    y=barL;    line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL);  }  if (state.getElementHinting()) {    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));  }  Stroke itemStroke=getItemStroke(row,column);  Paint itemPaint=getItemPaint(row,column);  g2.setStroke(itemStroke);  g2.setPaint(itemPaint);  g2.draw(line);  if (state.getElementHinting()) {    endElementGroup(g2);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,orientation,dataset,row,column,x,y,(value < 0.0));  }  int datasetIndex=plot.indexOf(dataset);  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,line.getBounds());  }}  }
class C{  public static SecurityServerId create(ClientId client,String serverCode){  return create(client.getXRoadInstance(),client.getMemberClass(),client.getMemberCode(),serverCode);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple2<Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2){  return fromStream(Seq.super.window(specification1,specification2));}  }
class C{  public void split(){  if (!needsSplitting()) {    return;  }  Node parent=getParentNode();  String[] parts=getData().split("\\]\\]>");  parent.insertBefore(new CDATASectionImpl(document,parts[0] + "]]"),this);  for (int p=1; p < parts.length - 1; p++) {    parent.insertBefore(new CDATASectionImpl(document,">" + parts[p] + "]]"),this);  }  setData(">" + parts[parts.length - 1]);}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Long>();  for (  OFMessage m : msgs) {    long xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  public static <T>LazyPOrderedSetX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:44.171 -0500",hash_original_method="C612ABEE1C0679BFBBDBFDD36B58357B",hash_generated_method="7BC317122D8F42B263139F55F07CA8D6") public static boolean isBackBufferPreserved(){  return nIsBackBufferPreserved();}  }
class C{  public OutlierResult run(Database database,Relation<V> relationx,Relation<? extends NumberVector> relationy){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relationx.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax mm=new DoubleMinMax(0.0,0.0);{    ModifiableDBIDs idview=DBIDUtil.newHashSet(relationx.getDBIDs());    ProxyView<V> proxy=new ProxyView<>(idview,relationx);    double phialpha=NormalDistribution.standardNormalQuantile(1.0 - alpha * .5);    while (true) {      Pair<DBIDVar,Double> candidate=singleIteration(proxy,relationy);      if (candidate.second < phialpha) {        break;      }      scores.putDouble(candidate.first,candidate.second);      if (!Double.isNaN(candidate.second)) {        mm.put(candidate.second);      }      idview.remove(candidate.first);    }    for (DBIDIter iter=idview.iter(); iter.valid(); iter.advance()) {      scores.putDouble(iter,0.0);    }  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("GLSSODBackward","GLSSODbackward-outlier",scores,relationx.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(mm.getMin(),mm.getMax(),0,Double.POSITIVE_INFINITY,0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public final boolean hasSetting(DOMTestDocumentBuilderFactory factory){  return strategy.hasSetting(factory) == value;}  }
class C{  private void verifyAllocator(final IdentityHashMap<UnsafeDirectLittleEndian,BaseAllocator> buffersSeen){  if (!DEBUG) {    return;  }synchronized (DEBUG_LOCK) {    final long allocated=getAllocatedMemory();    final Set<BaseAllocator> childSet=childAllocators.keySet();    for (    final BaseAllocator childAllocator : childSet) {      childAllocator.verifyAllocator(buffersSeen);    }    long childTotal=0;    for (    final BaseAllocator childAllocator : childSet) {      childTotal+=Math.max(childAllocator.getAllocatedMemory(),childAllocator.reservation);    }    if (childTotal > getAllocatedMemory()) {      historicalLog.logHistory(logger);      logger.debug("allocator[" + name + "] child event logs BEGIN");      for (      final BaseAllocator childAllocator : childSet) {        childAllocator.historicalLog.logHistory(logger);      }      logger.debug("allocator[" + name + "] child event logs END");      throw new IllegalStateException("Child allocators own more memory (" + childTotal + ") than their parent (name = "+ name+ " ) has allocated ("+ getAllocatedMemory()+ ')');    }    long bufferTotal=0;    final Set<BufferLedger> ledgerSet=childLedgers.keySet();    for (    final BufferLedger ledger : ledgerSet) {      if (!ledger.isOwningLedger()) {        continue;      }      final UnsafeDirectLittleEndian udle=ledger.getUnderlying();      final BaseAllocator otherOwner=buffersSeen.get(udle);      if (otherOwner != null) {        throw new IllegalStateException("This allocator's ArrowBuf already owned by another allocator");      }      buffersSeen.put(udle,this);      bufferTotal+=udle.capacity();    }    final Set<Reservation> reservationSet=reservations.keySet();    long reservedTotal=0;    for (    final Reservation reservation : reservationSet) {      if (!reservation.isUsed()) {        reservedTotal+=reservation.getSize();      }    }    if (bufferTotal + reservedTotal + childTotal != getAllocatedMemory()) {      final StringBuilder sb=new StringBuilder();      sb.append("allocator[");      sb.append(name);      sb.append("]\nallocated: ");      sb.append(Long.toString(allocated));      sb.append(" allocated - (bufferTotal + reservedTotal + childTotal): ");      sb.append(Long.toString(allocated - (bufferTotal + reservedTotal + childTotal)));      sb.append('\n');      if (bufferTotal != 0) {        sb.append("buffer total: ");        sb.append(Long.toString(bufferTotal));        sb.append('\n');        dumpBuffers(sb,ledgerSet);      }      if (childTotal != 0) {        sb.append("child total: ");        sb.append(Long.toString(childTotal));        sb.append('\n');        for (        final BaseAllocator childAllocator : childSet) {          sb.append("child allocator[");          sb.append(childAllocator.name);          sb.append("] owned ");          sb.append(Long.toString(childAllocator.getAllocatedMemory()));          sb.append('\n');        }      }      if (reservedTotal != 0) {        sb.append(String.format("reserved total : %d bytes.",reservedTotal));        for (        final Reservation reservation : reservationSet) {          reservation.historicalLog.buildHistory(sb,0,true);          sb.append('\n');        }      }      logger.debug(sb.toString());      final long allocated2=getAllocatedMemory();      if (allocated2 != allocated) {        throw new IllegalStateException(String.format("allocator[%s]: allocated t1 (%d) + allocated t2 (%d). Someone released memory while in verification.",name,allocated,allocated2));      }      throw new IllegalStateException(String.format("allocator[%s]: buffer space (%d) + prealloc space (%d) + child space (%d) != allocated (%d)",name,bufferTotal,reservedTotal,childTotal,allocated));    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 112) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public int loadInstruction32(int addr){  return (loadInstruction8(addr) << 24) | (loadInstruction8(addr + 1) << 16) | (loadInstruction8(addr + 2) << 8)| loadInstruction8(addr + 3);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_NOTIFICATIONS_URI_PREFIX + "/namespaces/{namespace}/notificationNames/{notificationName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_NOTIFICATION_REGISTRATIONS_DELETE) public BusinessObjectDataNotificationRegistration deleteBusinessObjectDataNotification(@PathVariable("namespace") String namespace,@PathVariable("notificationName") String notificationName){  return businessObjectDataNotificationRegistrationService.deleteBusinessObjectDataNotificationRegistration(new NotificationRegistrationKey(namespace,notificationName));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tIf set, filter is run in debug mode and\n" + "\tmay output additional info to the console","output-debug-info",0,"-output-debug-info"));  newVector.addElement(new Option("\tIf set, filter capabilities are not checked before filter is built\n" + "\t(use with caution).","-do-not-check-capabilities",0,"-do-not-check-capabilities"));  return newVector.elements();}  }
class C{  public void put(int key,E value){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~ContainerHelpers.binarySearch(mKeys,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ContainerHelpers.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public final void swap(int first,int second){  Object help=m_Objects[first];  m_Objects[first]=m_Objects[second];  m_Objects[second]=help;}  }
class C{  public void put(int childRow,int parentRow){  if (childRow >= m_childToParent.getRowCount())   m_childToParent.setMaximumRow(childRow + 1);  m_childToParent.setInt(parentRow,childRow);  m_parentToChild.put(parentRow,childRow);}  }
class C{  protected ControlLetterEscapeSequenceImpl(){  super();}  }
class C{  public static int indexOf(float[] array,float[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  public static StringBlock read(ExtDataInput reader) throws IOException {  reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE,CHUNK_NULL_TYPE);  int chunkSize=reader.readInt();  int stringCount=reader.readInt();  int styleCount=reader.readInt();  int flags=reader.readInt();  int stringsOffset=reader.readInt();  int stylesOffset=reader.readInt();  StringBlock block=new StringBlock();  block.m_isUTF8=(flags & UTF8_FLAG) != 0;  block.m_stringOffsets=reader.readIntArray(stringCount);  block.m_stringOwns=new int[stringCount];  Arrays.fill(block.m_stringOwns,-1);  if (styleCount != 0) {    block.m_styleOffsets=reader.readIntArray(styleCount);  }{    int size=((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;    if ((size % 4) != 0) {      throw new IOException("String data size is not multiple of 4 (" + size + ").");    }    block.m_strings=new byte[size];    reader.readFully(block.m_strings);  }  if (stylesOffset != 0) {    int size=(chunkSize - stylesOffset);    if ((size % 4) != 0) {      throw new IOException("Style data size is not multiple of 4 (" + size + ").");    }    block.m_styles=reader.readIntArray(size / 4);  }  return block;}  }
class C{  public void printMessage(Diagnostic.Kind kind,CharSequence msg,com.redhat.ceylon.langtools.source.tree.Tree t,com.redhat.ceylon.langtools.source.tree.CompilationUnitTree root){  printMessage(kind,msg,((JCTree)t).pos(),root);}  }
class C{  public static String makeDescriptor(Method m){  Class[] params=m.getParameterTypes();  return makeDescriptor(params,m.getReturnType());}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  changeSupport.removePropertyChangeListener(listener);}  }
class C{  public final void handleMessage(Object message,ActorRef sender){  intHandle(message,sender);}  }
class C{  public static void main(String[] args) throws Exception {  new Analysis().start(args);}  }
class C{  public void addField(JavaField field){  _fields.add(field);}  }
class C{  static boolean isRegistered(Object value){  Map m=getRegistry();  return m != null && m.containsKey(value);}  }
class C{  private static boolean between(int chainStart,int chainEnd,int slot){  if (chainStart <= chainEnd) {    return chainStart <= slot && slot <= chainEnd;  } else {    return slot >= chainStart || slot <= chainEnd;  }}  }
class C{  public static boolean containsGas(String name){  return getGas(name) != null;}  }
class C{  private Ease overlap(int l){  Ease a=new Ease();  for (int noa=l; noa < m_levelNum; noa++) {    for (int nob=m_levels[noa].m_start; nob < m_levels[noa].m_end; nob++) {      a.m_amount=m_groups[nob].m_right - m_groups[nob + 1].m_left + 2;      if (a.m_amount >= 0) {        a.m_amount++;        a.m_lev=noa;        a.m_place=nob;        return a;      }    }  }  return null;}  }
class C{  public void drawStringBaseline(String str,int x,int y,int textDecoration){  drawString(str,x,y - current.getAscent(),textDecoration);}  }
class C{  public final void negate(Matrix4f m1){  this.m00=-m1.m00;  this.m01=-m1.m01;  this.m02=-m1.m02;  this.m03=-m1.m03;  this.m10=-m1.m10;  this.m11=-m1.m11;  this.m12=-m1.m12;  this.m13=-m1.m13;  this.m20=-m1.m20;  this.m21=-m1.m21;  this.m22=-m1.m22;  this.m23=-m1.m23;  this.m30=-m1.m30;  this.m31=-m1.m31;  this.m32=-m1.m32;  this.m33=-m1.m33;}  }
class C{  public static ProjectFilterSettings createDefault(){  ProjectFilterSettings result=new ProjectFilterSettings();  result.setMinPriority(DEFAULT_PRIORITY);  return result;}  }
class C{  public static String decodeClientURI(String clientUri){  return clientUri.startsWith(Constants.URI_CLIENT_PREFIX) ? clientUri.substring(Constants.URI_CLIENT_PREFIX.length()) : clientUri;}  }
class C{  public static byte[] decode(final String s,final int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  final java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  final boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    final int head=(bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      final byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      final java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        final Exception e) {        }        try {          gzis.close();        } catch (        final Exception e) {        }        try {          bais.close();        } catch (        final Exception e) {        }      }    }  }  return bytes;}  }
class C{  public static void fill(char[] array,int start,int end,char value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void open(){  start();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.932 -0500",hash_original_method="D2570999F2D51C5CE871F64BF39BACFE",hash_generated_method="D909EAFDB0519CD702FFA646FE63378F") public boolean usedInFix(){  return mUsedInFix;}  }
class C{  public Animation(final String imageLocation){  this(new String[]{imageLocation},1);}  }
class C{  public Space space(String expression) throws ScopeException {  UniverseScope scope=new UniverseScope(this);  ExpressionAST expr=scope.parseExpression(expression);  if (expr instanceof SpaceExpression) {    return ((SpaceExpression)expr).getSpace();  } else {    throw new ScopeException("the expression doesn't resolve to a space");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void registerParameterChangeListener(ParameterChangeListener listener){  PARAMETER_LISTENERS.add(listener);}  }
class C{  public void insertNewContacts(Dao<AddressBook,Integer> addressBookDao,Dao<Contact,Integer> contactDao) throws SQLException {  if (this.nonDaoContacts == null) {    return;  }  addressBookDao.assignEmptyForeignCollection(this,"contacts");  for (  Contact contact : nonDaoContacts) {    contact.setAddressBook(this);    contactDao.create(contact);    contacts.add(contact);  }}  }
class C{  private void animateToolbar(int translation){  View view;  for (int i=2; i < toolbar.getChildCount(); i++) {    view=toolbar.getChildAt(i);    view.setTranslationY(translation);    view.animate().setStartDelay(50 * (i + 1)).setDuration(70 * (i + 1)).translationY(0);  }  toolbar.getChildAt(0).setAlpha(0);  toolbar.getChildAt(0).animate().alpha(1).setDuration(200).setInterpolator(new AccelerateInterpolator());}  }
class C{  public void cleanup(Environment env){  if (env.dump()) {    env.output("[cleanup " + getName() + "]");  }  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    f.cleanup(env);  }  documentation=null;}  }
class C{  public void shouldCompleteAsync() throws Throwable {  Waiter waiter=new Waiter();  Failsafe.with(retryAlways).with(executor).runAsync(null);  waiter.await(5000);}  }
class C{  public void keyTyped(KeyEvent e){synchronized (keyLock) {    keysTyped.addFirst(e.getKeyChar());  }}  }
class C{  public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack stack,EnumFacing side,float hitX,float hitY,float hitZ){  return false;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static void onCollection(MongoClient client,String dbName,String collectionName,Consumer<MongoCollection<Document>> collectionOperation){  onDatabase(client,dbName,null);}  }
class C{  public ExceptionContext create(Object dynamicValue){  ExceptionContext exceptionContext;  exceptionContext=new ExceptionContext(m_exceptionContext,dynamicValue);  return exceptionContext;}  }
class C{  public Image convertToArdor3DImage(ByteBuffer raster,int pixelSize,DataType dataType,int width,int height){  return (convertToArdor3DImage(raster,pixelSize,null,dataType,width,height));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.418 -0500",hash_original_method="4D2BE48844A5433A791E1AA55F49F841",hash_generated_method="A3397764598A0C4CC0F2531E4ECB699A") static public void assertEquals(String message,int expected,int actual){  assertEquals(message,new Integer(expected),new Integer(actual));}  }
class C{  public static Config loadConfig(){  final Config internalConfig=ConfigFactory.load("planout4j").resolve();  final String customConfigPath=System.getProperty(P4J_CONF_FILE);  final Logger log=LoggerFactory.getLogger(ConfFileLoader.class);  if (customConfigPath != null) {    final File configFile=new File(customConfigPath);    if (configFile.isFile() && configFile.canRead()) {      log.info("Using custom config: {}",configFile.getAbsolutePath());      return ConfigFactory.defaultOverrides().withFallback(ConfigFactory.parseFile(configFile).withFallback(internalConfig)).resolve();    } else {      log.warn("Invalid custom config path: {} (resolves to {})",customConfigPath,configFile.getAbsolutePath());    }  }  log.info("Using embedded default config");  return internalConfig;}  }
class C{  private void handleException(final Call call,final Exception e,final Callback callback){  if (call.isCanceled()) {    callback.onCancellation();  } else {    callback.onFailure(e);  }}  }
class C{  public int[] suffStats(String cand_str,int i){  int[] stats=new int[suffStatsCount];  if (!cand_str.equals("")) {    String[] words=cand_str.split("\\s+");    set_prec_suffStats(stats,words,i);    stats[suffStatsCount - 2]=words.length;    stats[suffStatsCount - 1]=effLength(words.length,i);  } else {    String[] words=new String[0];    set_prec_suffStats(stats,words,i);    stats[suffStatsCount - 2]=0;    stats[suffStatsCount - 1]=effLength(0,i);  }  return stats;}  }
class C{  @Nullable public Dimension adjust(@NotNull Dimension newPreferredSize,@Nullable Dimension oldPreferredSize,@NotNull EditorImpl editor){  if (oldPreferredSize == null || mySkip) {    return newPreferredSize;  }  if (newPreferredSize.height != oldPreferredSize.height) {    return newPreferredSize;  }  stripTimings();  myTimings.add(System.currentTimeMillis());  if (myTimings.size() < FREQUENT_SIZE_CHANGES_NUMBER) {    return newPreferredSize;  }  boolean increaseWidth=newPreferredSize.width > oldPreferredSize.width;  Dimension result;  if (increaseWidth) {    final int spaceWidth=EditorUtil.getSpaceWidth(Font.PLAIN,editor);    newPreferredSize.width+=myReserveColumns * spaceWidth;    myReserveColumns+=3;    result=newPreferredSize;  } else {    result=oldPreferredSize;  }  scheduleSizeUpdate(editor);  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void removeLoggingAppender(String appenderName){  loggingHelper.removeLoggingAppender(appenderName);}  }
class C{  @Override public String globalInfo(){  return "Pruned Sets with a a threshold so as to be able to predict sets not seen in the training set." + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  public void ensureRows(int rows){  if (rows > getNumRows()) {    resize(rows,getNumColumns());  }}  }
class C{  private static String removeWhitespace(String toCollapse){  if (toCollapse == null) {    return null;  }  int length=toCollapse.length();  StringBuilder collapsed=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=toCollapse.charAt(i);    if (!Character.isWhitespace(c)) {      collapsed.append(c);    }  }  return collapsed.toString();}  }
class C{  PubSubIotDevice(Topology topology){  this.topology=topology;}  }
class C{  private void registerNewClient(JsonObject jData){  Client newClient=gson.fromJson(jData,Client.class);  if (newClient.isValid()) {    addClient(newClient);    broadcastNewClient(newClient);    sendClientList(newClient);  } else {    logger.log(Level.WARNING,"Could not unpack received data into a Client.");  }}  }
class C{  public ClubAttackAction(int entityId,int targetId,Mounted club,int aimTable){  super(entityId,targetId);  this.club=club;  aiming=aimTable;}  }
class C{  public PriceModelException(){}  }
class C{  public void scan(Reader r0,ScanHandler h) throws IOException, SAXException {  theState=S_PCDATA;  PushbackReader r;  if (r0 instanceof PushbackReader) {    r=(PushbackReader)r0;  } else   if (r0 instanceof BufferedReader) {    r=new PushbackReader(r0);  } else {    r=new PushbackReader(new BufferedReader(r0,200));  }  int firstChar=r.read();  if (firstChar != '\uFEFF')   unread(r,firstChar);  while (theState != S_DONE) {    int ch=r.read();    if (ch >= 0x80 && ch <= 0x9F)     ch=theWinMap[ch - 0x80];    if (ch == '\r') {      ch=r.read();      if (ch != '\n') {        unread(r,ch);        ch='\n';      }    }    if (ch == '\n') {      theCurrentLine++;      theCurrentColumn=0;    } else {      theCurrentColumn++;    }    if (!(ch >= 0x20 || ch == '\n' || ch == '\t' || ch == -1))     continue;    int action=0;    for (int i=0; i < statetable.length; i+=4) {      if (theState != statetable[i]) {        if (action != 0)         break;        continue;      }      if (statetable[i + 1] == 0) {        action=statetable[i + 2];        theNextState=statetable[i + 3];      } else       if (statetable[i + 1] == ch) {        action=statetable[i + 2];        theNextState=statetable[i + 3];        break;      }    }switch (action) {case 0:      throw new Error("HTMLScanner can't cope with " + Integer.toString(ch) + " in state "+ Integer.toString(theState));case A_ADUP:    h.adup(theOutputBuffer,0,theSize);  theSize=0;break;case A_ADUP_SAVE:h.adup(theOutputBuffer,0,theSize);theSize=0;save(ch,h);break;case A_ADUP_STAGC:h.adup(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_ANAME:h.aname(theOutputBuffer,0,theSize);theSize=0;break;case A_ANAME_ADUP:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);break;case A_ANAME_ADUP_STAGC:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);h.stagc(theOutputBuffer,0,theSize);break;case A_AVAL:h.aval(theOutputBuffer,0,theSize);theSize=0;break;case A_AVAL_STAGC:h.aval(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_CDATA:mark();if (theSize > 1) theSize-=2;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_ENTITY_START:h.pcdata(theOutputBuffer,0,theSize);theSize=0;save(ch,h);break;case A_ENTITY:mark();char ch1=(char)ch;if (theState == S_ENT && ch1 == '#') {theNextState=S_NCR;save(ch,h);break;} else if (theState == S_NCR && (ch1 == 'x' || ch1 == 'X')) {theNextState=S_XNCR;save(ch,h);break;} else if (theState == S_ENT && Character.isLetterOrDigit(ch1)) {save(ch,h);break;} else if (theState == S_NCR && Character.isDigit(ch1)) {save(ch,h);break;} else if (theState == S_XNCR && (Character.isDigit(ch1) || "abcdefABCDEF".indexOf(ch1) != -1)) {save(ch,h);break;}h.entity(theOutputBuffer,1,theSize - 1);int ent=h.getEntity();if (ent != 0) {theSize=0;if (ent >= 0x80 && ent <= 0x9F) {ent=theWinMap[ent - 0x80];}if (ent < 0x20) {ent=0x20;} else if (ent >= 0xD800 && ent <= 0xDFFF) {ent=0;} else if (ent <= 0xFFFF) {save(ent,h);} else {ent-=0x10000;save((ent >> 10) + 0xD800,h);save((ent & 0x3FF) + 0xDC00,h);}if (ch != ';') {unread(r,ch);theCurrentColumn--;}} else {unread(r,ch);theCurrentColumn--;}theNextState=S_PCDATA;break;case A_ETAG:h.etag(theOutputBuffer,0,theSize);theSize=0;break;case A_DECL:h.decl(theOutputBuffer,0,theSize);theSize=0;break;case A_GI:h.gi(theOutputBuffer,0,theSize);theSize=0;break;case A_GI_STAGC:h.gi(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_LT:mark();save('<',h);save(ch,h);break;case A_LT_PCDATA:mark();save('<',h);h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_PCDATA:mark();h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_CMNT:mark();h.cmnt(theOutputBuffer,0,theSize);theSize=0;break;case A_MINUS3:save('-',h);save(' ',h);break;case A_MINUS2:save('-',h);save(' ',h);case A_MINUS:save('-',h);save(ch,h);break;case A_PI:mark();h.pi(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET:h.pitarget(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET_PI:h.pitarget(theOutputBuffer,0,theSize);theSize=0;h.pi(theOutputBuffer,0,theSize);break;case A_SAVE:save(ch,h);break;case A_SKIP:break;case A_SP:save(' ',h);break;case A_STAGC:h.stagc(theOutputBuffer,0,theSize);theSize=0;break;case A_EMPTYTAG:mark();if (theSize > 0) h.gi(theOutputBuffer,0,theSize);theSize=0;h.stage(theOutputBuffer,0,theSize);break;case A_UNGET:unread(r,ch);theCurrentColumn--;break;case A_UNSAVE_PCDATA:if (theSize > 0) theSize--;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;default :throw new Error("Can't process state " + action);}theState=theNextState;}h.eof(theOutputBuffer,0,0);}  }
class C{  protected void readGraphicControlExt(){  read();  final int packed=read();  currentFrame.dispose=(packed & 0x1c) >> 2;  if (currentFrame.dispose == 0) {    currentFrame.dispose=1;  }  currentFrame.transparency=(packed & 1) != 0;  currentFrame.delay=readShort() * 10;  currentFrame.transIndex=read();  read();}  }
class C{  public void clearYTextLabels(){  clearYTextLabels(0);}  }
class C{  @Override public void addWithPackedColor(final ITextureRegion pTextureRegion,final float pX1,final float pY1,final float pX2,final float pY2,final float pColorABGRPackedInt){  final FloatBuffer bufferData=this.getFloatBuffer();  final int bufferDataOffset=this.mBufferDataOffset;  final float x1=pX1;  final float y1=pY1;  final float x2=pX2;  final float y2=pY2;  final float u=pTextureRegion.getU();  final float v=pTextureRegion.getV();  final float u2=pTextureRegion.getU2();  final float v2=pTextureRegion.getV2();  if (pTextureRegion.isRotated()) {    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);  } else {    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y1);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x1);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u);    bufferData.put(bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X,x2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y,y2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX,pColorABGRPackedInt);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U,u2);    bufferData.put(bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V,v);  }  this.mBufferDataOffset+=SpriteBatch.SPRITE_SIZE;}  }
class C{  public LabelCellEditorLocator(Label label){  setLabel(label);}  }
class C{  private void toPolyArc(Polygon2D poly,Vec2D o,float radius,float theta,int res){  for (int i=0; i <= res; i++) {    poly.add(o.add(Vec2D.fromTheta(theta + i * MathUtils.HALF_PI / res).scaleSelf(radius)));  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void updateTransferredBytesAvg(int newValue){  int realCount=0;  int sum=0;  this.avgSamples[this.nextSampleIndex++]=newValue;  if (this.nextSampleIndex >= BYTES_TRANSFERRED_AVG_SAMPLES) {    this.nextSampleIndex=0;  }  for (int i=0; i < BYTES_TRANSFERRED_AVG_SAMPLES; i++) {    if (this.avgSamples[i] > 0) {      realCount++;      sum+=this.avgSamples[i];    }  }  if (realCount > 0) {    this.avgTransferredBytes=sum / realCount;  } else {    this.avgTransferredBytes=0;  }}  }
class C{  private int findPLV(int M_PriceList_ID){  Timestamp priceDate=null;  String dateStr=Env.getContext(Env.getCtx(),p_WindowNo,"DateOrdered");  if (dateStr != null && dateStr.length() > 0)   priceDate=Env.getContextAsDate(Env.getCtx(),p_WindowNo,"DateOrdered"); else {    dateStr=Env.getContext(Env.getCtx(),p_WindowNo,"DateInvoiced");    if (dateStr != null && dateStr.length() > 0)     priceDate=Env.getContextAsDate(Env.getCtx(),p_WindowNo,"DateInvoiced");  }  if (priceDate == null)   priceDate=new Timestamp(System.currentTimeMillis());  log.config("M_PriceList_ID=" + M_PriceList_ID + " - "+ priceDate);  int retValue=0;  String sql="SELECT plv.M_PriceList_Version_ID, plv.ValidFrom " + "FROM M_PriceList pl, M_PriceList_Version plv " + "WHERE pl.M_PriceList_ID=plv.M_PriceList_ID"+ " AND plv.IsActive='Y'"+ " AND pl.M_PriceList_ID=? "+ "ORDER BY plv.ValidFrom DESC";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_PriceList_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next() && retValue == 0) {      Timestamp plDate=rs.getTimestamp(2);      if (!priceDate.before(plDate))       retValue=rs.getInt(1);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  Env.setContext(Env.getCtx(),p_WindowNo,"M_PriceList_Version_ID",retValue);  return retValue;}  }
class C{  public static Intent composeQuickContactsIntent(Context context,View target,Uri lookupUri,int mode,String[] excludeMimes){  final float appScale=context.getResources().getCompatibilityInfo().applicationScale;  final int[] pos=new int[2];  target.getLocationOnScreen(pos);  final Rect rect=new Rect();  rect.left=(int)(pos[0] * appScale + 0.5f);  rect.top=(int)(pos[1] * appScale + 0.5f);  rect.right=(int)((pos[0] + target.getWidth()) * appScale + 0.5f);  rect.bottom=(int)((pos[1] + target.getHeight()) * appScale + 0.5f);  return composeQuickContactsIntent(context,rect,lookupUri,mode,excludeMimes);}  }
class C{  public BarEntry copy(){  BarEntry copied=new BarEntry(getVal(),getXIndex(),getData());  copied.setVals(mVals);  return copied;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected NativeMemoryChunk alloc(int bucketedSize){  return new NativeMemoryChunk(bucketedSize);}  }
class C{  public static String xmlCData(String data){  if (data.contains("]]>")) {    return xmlText(data);  }  boolean newline=data.endsWith("\n");  data="<![CDATA[" + data + "]]>";  return newline ? data + "\n" : data;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public static boolean parseFloatAttribute(String attribute,String value,TypedValue outValue,boolean requireUnit){  assert requireUnit == false || attribute != null;  value=value.trim();  int len=value.length();  if (len <= 0) {    return false;  }  char[] buf=value.toCharArray();  for (int i=0; i < len; i++) {    if (buf[i] > 255) {      return false;    }  }  if (buf[0] < '0' && buf[0] > '9' && buf[0] != '.' && buf[0] != '-') {    return false;  }  Matcher m=sFloatPattern.matcher(value);  if (m.matches()) {    String f_str=m.group(1);    String end=m.group(2);    float f;    try {      f=Float.parseFloat(f_str);    } catch (    NumberFormatException e) {      return false;    }    if (end.length() > 0 && end.charAt(0) != ' ') {      if (parseUnit(end,outValue,sFloatOut)) {        computeTypedValue(outValue,f,sFloatOut[0]);        return true;      }      return false;    }    end=end.trim();    if (end.length() == 0) {      if (outValue != null) {        if (requireUnit == false) {          outValue.type=TypedValue.TYPE_FLOAT;          outValue.data=Float.floatToIntBits(f);        } else {          applyUnit(sUnitNames[1],outValue,sFloatOut);          computeTypedValue(outValue,f,sFloatOut[0]);          Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE,String.format("Dimension \"%1$s\" in attribute \"%2$s\" is missing unit!",value,attribute),null);        }        return true;      }    }  }  return false;}  }
class C{  public static <T>void notEmpty(String argumentName,T[] argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.length == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  public String[] names(){  return this.names;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.774 -0500",hash_original_method="4E5704FEDE8F5CB4F4DD07601A88E91F",hash_generated_method="03CA403F85885102137BFBAC5377436F") public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public byte[] booleanRepresentation(int ind,int n){  byte[] rep=new byte[n];  for (int i=0; i < n; i++) {    rep[i]=(byte)0;  }  for (int i=0; i < n; i++) {    int rem=ind % 2;    if (rem == 1) {      rep[n - i - 1]=(byte)1;      ind-=1;    }    ind/=2;  }  return rep;}  }
class C{  public static String toString(int[] oid){  StringBuilder sb=new StringBuilder(3 * oid.length);  for (int i=0; i < oid.length - 1; ++i) {    sb.append(oid[i]);    sb.append('.');  }  sb.append(oid[oid.length - 1]);  return sb.toString();}  }
class C{  public LaggedEdge(String factor,LaggedFactor laggedFactor){  if (factor == null) {    throw new NullPointerException("Edge name must not be null");  }  if (laggedFactor == null) {    throw new NullPointerException("Lagged factor must not be null");  }  this.factor=factor;  this.laggedFactor=laggedFactor;}  }
class C{  public boolean isToolsAutoUpdateSupported(){  return toolsAutoUpdateSupported;}  }
class C{  private static String num2ShortID(int num,char[] IDChars,int IDWidth){  char ID[]=new char[IDWidth];  int i;  for (i=IDWidth - 1; i >= 0; i--) {    ID[i]=IDChars[num % IDChars.length];    num=num / IDChars.length - 1;    if (num < 0) {      break;    }  }  for (i--; i >= 0; i--) {    ID[i]=' ';  }  return new String(ID);}  }
class C{  public Builder withTokenizer(String name,String... params) throws IOException {  return withTokenizer(name,paramsToMap(params));}  }
class C{  @Override public void onUpdate(){  if (this.getEntityItem() == null) {    this.setDead();  } else {    super.onUpdate();    this.prevPosX=this.posX;    this.prevPosY=this.posY;    this.prevPosZ=this.posZ;    this.noClip=this.pushOutOfBlocks(this.posX,(this.getEntityBoundingBox().minY + this.getEntityBoundingBox().maxY) / 2.0D,this.posZ);    if (this.noClip) {      dropAsItem();    }    this.motionX=direction.getFrontOffsetX() / 10D;    this.motionY=direction.getFrontOffsetY() / 10D;    this.motionZ=direction.getFrontOffsetZ() / 10D;    this.moveEntity(motionX,motionY,motionZ);    if (this.motionX == 0 && this.motionY == 0 && this.motionZ == 0 && !this.worldObj.isRemote) {      if (this.enterInventories) {        TileEntity nextTileEntity=this.worldObj.getTileEntity(new BlockPos(this.posX,this.posY,this.posZ).offset(this.direction));        if (this.getEntityItem() != null && this.getEntityItem().stackSize > 0 && nextTileEntity != null && nextTileEntity.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,direction.getOpposite())) {          IItemHandler itemHandler=nextTileEntity.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,direction.getOpposite());          ItemStack remaining=ItemHandlerHelper.insertItemStacked(itemHandler,this.getEntityItem(),false);          if (remaining != null && remaining.stackSize > 0) {            this.dropAsItem();          } else {            this.setDead();          }        }      } else {        this.dropAsItem();      }    }    float f=0.98F;    if (this.onGround) {      f=this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX),MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1,MathHelper.floor_double(this.posZ))).getBlock().slipperiness * 0.98F;    }    if (this.age != -32768) {      ++this.age;    }    ItemStack item=this.getDataManager().get(ITEM).orNull();    if (!this.worldObj.isRemote && this.age >= lifespan) {      this.setDead();      this.dropAsItem();    }    if (item != null && item.stackSize <= 0) {      this.setDead();    }  }}  }
class C{  private ContentComparisonResult tfsItemCompareToLocalFile(final TFSItemNode tfsItemNode,final Object obj,final IProgressMonitor monitor){  final Item item=tfsItemNode.getItem();  if (item.getItemType() == ItemType.FOLDER) {    return ContentComparisonResult.EQUAL;  }  final byte[] itemHash=item.getContentHashValue();  final byte[] otherItemHash=getItemHash(obj,monitor);  return compareByHash(itemHash,otherItemHash);}  }
class C{  public GuacamoleException(String message){  super(message);}  }
class C{  public void testMakeMove() throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  Position origPos=new Position(pos);  assertTrue(pos.equals(origPos));  Move move=new Move(Position.getSquare(4,1),Position.getSquare(4,3),Piece.EMPTY);  UndoInfo ui=new UndoInfo();  pos.makeMove(move,ui);  assertEquals(pos.whiteMove,false);  assertEquals(-1,pos.getEpSquare());  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(4,1)));  assertEquals(Piece.WPAWN,pos.getPiece(Position.getSquare(4,3)));  assertTrue(!pos.equals(origPos));  int castleMask=(1 << Position.A1_CASTLE) | (1 << Position.H1_CASTLE) | (1 << Position.A8_CASTLE)| (1 << Position.H8_CASTLE);  assertEquals(castleMask,pos.getCastleMask());  pos.unMakeMove(move,ui);  assertEquals(pos.whiteMove,true);  assertEquals(Piece.WPAWN,pos.getPiece(Position.getSquare(4,1)));  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(4,3)));  assertTrue(pos.equals(origPos));  String fen="r1bqk2r/2ppbppp/p1n2n2/1pP1p3/B3P3/5N2/PP1P1PPP/RNBQK2R w KQkq b6 0 2";  pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  origPos=new Position(pos);  assertEquals(Position.getSquare(1,5),pos.getEpSquare());  move=new Move(Position.getSquare(0,3),Position.getSquare(1,4),Piece.EMPTY);  pos.makeMove(move,ui);  assertEquals(-1,pos.getEpSquare());  assertEquals(Piece.WBISHOP,pos.getPiece(Position.getSquare(1,4)));  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(0,3)));  pos.unMakeMove(move,ui);  assertTrue(pos.equals(origPos));  move=new Move(Position.getSquare(4,0),Position.getSquare(6,0),Piece.EMPTY);  pos.makeMove(move,ui);  assertEquals(Piece.WROOK,pos.getPiece(Position.getSquare(5,0)));  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(7,0)));  castleMask=(1 << Position.A8_CASTLE) | (1 << Position.H8_CASTLE);  assertEquals(castleMask,pos.getCastleMask());  assertEquals(-1,pos.getEpSquare());  pos.unMakeMove(move,ui);  assertTrue(pos.equals(origPos));  move=new Move(Position.getSquare(4,0),Position.getSquare(4,1),Piece.EMPTY);  pos.makeMove(move,ui);  castleMask=(1 << Position.A8_CASTLE) | (1 << Position.H8_CASTLE);  assertEquals(castleMask,pos.getCastleMask());  assertEquals(-1,pos.getEpSquare());  pos.unMakeMove(move,ui);  assertTrue(pos.equals(origPos));  move=new Move(Position.getSquare(7,0),Position.getSquare(6,0),Piece.EMPTY);  pos.makeMove(move,ui);  castleMask=(1 << Position.A1_CASTLE) | (1 << Position.A8_CASTLE) | (1 << Position.H8_CASTLE);  assertEquals(castleMask,pos.getCastleMask());  assertEquals(-1,pos.getEpSquare());  pos.unMakeMove(move,ui);  assertTrue(pos.equals(origPos));  move=new Move(Position.getSquare(2,4),Position.getSquare(1,5),Piece.EMPTY);  pos.makeMove(move,ui);  assertEquals(Piece.WPAWN,pos.getPiece(Position.getSquare(1,5)));  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(2,4)));  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(1,4)));  pos.unMakeMove(move,ui);  assertTrue(pos.equals(origPos));  pos.setPiece(Position.getSquare(6,2),Piece.BKNIGHT);  pos.setWhiteMove(false);  Position origPos2=new Position(pos);  move=new Move(Position.getSquare(6,2),Position.getSquare(7,0),Piece.EMPTY);  pos.makeMove(move,ui);  castleMask=(1 << Position.A1_CASTLE) | (1 << Position.A8_CASTLE) | (1 << Position.H8_CASTLE);  assertEquals(castleMask,pos.getCastleMask());  assertEquals(-1,pos.getEpSquare());  pos.unMakeMove(move,ui);  assertTrue(pos.equals(origPos2));}  }
class C{  public static void main(String[] args){  final VerifyLinuxTraining instance=new VerifyLinuxTraining();  instance.verifyTraining(args);}  }
class C{  protected void initialize(){  fIsInitialized=true;  clearPositionCache();  fScanner.setRange(fDocument,0,fDocument.getLength());  try {    IToken token=fScanner.nextToken();    while (!token.isEOF()) {      String contentType=getTokenContentType(token);      if (isSupportedContentType(contentType)) {        TypedPosition p=new TypedPosition(fScanner.getTokenOffset(),fScanner.getTokenLength(),contentType);        fDocument.addPosition(fPositionCategory,p);      }      token=fScanner.nextToken();    }  } catch (  BadLocationException x) {  }catch (  BadPositionCategoryException x) {  }}  }
class C{  @Override public void drawString(OutputDevice outputDevice,String string,float x,float y,JustificationInfo info){  Object aaHint=null;  Object fracHint=null;  Graphics2D graphics=((Java2DOutputDevice)outputDevice).getGraphics();  if (graphics.getFont().getSize() > threshold) {    aaHint=graphics.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);    graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,antiAliasRenderingHint);  }  fracHint=graphics.getRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS);  graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,fractionalFontMetricsHint);  GlyphVector vector=graphics.getFont().createGlyphVector(graphics.getFontRenderContext(),string);  adjustGlyphPositions(string,info,vector);  graphics.drawGlyphVector(vector,x,y);  if (graphics.getFont().getSize() > threshold) {    graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,aaHint);  }  graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,fracHint);}  }
class C{  public String toStringRep(){  StringBuffer sb=new StringBuffer();  Iterator i=transforms.iterator();  while (i.hasNext()) {    AbstractSVGTransform t=(AbstractSVGTransform)i.next();    if (t == null) {      sb.append("null");    } else {      SVGMatrix m=t.getMatrix();switch (t.getType()) {case SVGTransform.SVG_TRANSFORM_TRANSLATE:        sb.append("translate(");      sb.append(m.getE());    sb.append(',');  sb.append(m.getF());sb.append(')');break;case SVGTransform.SVG_TRANSFORM_SCALE:sb.append("scale(");sb.append(m.getA());sb.append(',');sb.append(m.getD());sb.append(')');break;case SVGTransform.SVG_TRANSFORM_SKEWX:sb.append("skewX(");sb.append(t.getAngle());sb.append(')');break;case SVGTransform.SVG_TRANSFORM_SKEWY:sb.append("skewY(");sb.append(t.getAngle());sb.append(')');break;case SVGTransform.SVG_TRANSFORM_ROTATE:sb.append("rotate(");sb.append(t.getAngle());sb.append(',');sb.append(t.getX());sb.append(',');sb.append(t.getY());sb.append(')');break;}}if (i.hasNext()) {sb.append(' ');}}return sb.toString();}  }
class C{  public AuthorityKeyIdentifier(SubjectPublicKeyInfo spki,GeneralNames name,BigInteger serialNumber){  Digest digest=new SHA1Digest();  byte[] resBuf=new byte[digest.getDigestSize()];  byte[] bytes=spki.getPublicKeyData().getBytes();  digest.update(bytes,0,bytes.length);  digest.doFinal(resBuf,0);  this.keyidentifier=new DEROctetString(resBuf);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  void readStream(InputStream is,byte[] buffer,int offset,RowCursor cursor) throws IOException {  for (  Column column : columns()) {    column.readStream(is,buffer,offset,cursor);  }  for (  Column column : blobs()) {    column.readStreamBlob(is,buffer,offset,cursor);  }}  }
class C{  public final boolean isClosed(){  return m_wam.isClosed();}  }
class C{  public int convertPreviousRowIndexToModel(int index){  if (oldViewToModel != null && index >= 0 && index < oldViewToModel.length) {    return oldViewToModel[index];  }  return -1;}  }
