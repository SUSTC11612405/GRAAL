class C{  public DynamicTemplateParameterContext addParameter(String paramName,String paramValue,ContextInfo contextInfo){  return addParameter(paramName,paramValue,false,contextInfo);}  }
class C{  private void revert(ISVNLocalResource resource) throws SVNException {  ISVNClientAdapter svnClient=null;  try {    svnClient=resource.getRepository().getSVNClient();    OperationManager.getInstance().beginOperation(svnClient);    svnClient.revert(resource.getFile(),false);  } catch (  SVNClientException e) {    throw SVNException.wrapException(e);  } finally {    resource.getRepository().returnSVNClient(svnClient);    OperationManager.getInstance().endOperation();  }}  }
class C{  private static void collapseContext(List<String> lines){  int i=0;  while (i < lines.size()) {    int j=i;    while (j < lines.size() && lines.get(j).startsWith("=")) {      j++;    }    if (j - i > CONTEXT_SIZE) {      int count=j - i - CONTEXT_SIZE;      int start=i + CONTEXT_SIZE / 2;      for (int k=0; k < count && start < lines.size(); k++) {        lines.remove(start);        j--;      }      lines.add(start,String.format("= ... %d equal lines omitted ...",count));      j++;    }    i=j + 1;  }}  }
class C{  public WallPostQuery(VkApiClient client,UserActor actor){  super(client,"wall.post",PostResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void add(PokedexEntry entry){  PokemonId id=PokemonId.forNumber(entry.getPokemonId().getNumber());  pokedexMap.put(id,entry);}  }
class C{  public void incrementIterationCount() throws MathIllegalStateException {  iterations.increment();}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(50.0,0.2));  floor.setMass(MassType.INFINITE);  floor.translate(0,-3);  this.world.addBody(floor);  final int n=5;  for (int i=0; i < n; i++) {    SimulationBody sb=new SimulationBody();    double w=1.0;    double h=Math.random() * 0.3 + 0.1;    sb.addFixture(Geometry.createIsoscelesTriangle(w,h));    sb.translate((Math.random() > 0.5 ? -1 : 1) * Math.random() * 5.0,h * 0.5 - 2.9);    sb.setMass(MassType.INFINITE);    this.world.addBody(sb);  }  SimulationBody right=new SimulationBody();  right.addFixture(Geometry.createRectangle(0.2,20));  right.setMass(MassType.INFINITE);  right.translate(10,7);  this.world.addBody(right);  SimulationBody left=new SimulationBody();  left.addFixture(Geometry.createRectangle(0.2,20));  left.setMass(MassType.INFINITE);  left.translate(-10,7);  this.world.addBody(left);  wheel=new SimulationBody();  wheel.addFixture(Geometry.createCircle(0.5),1.0,20.0,0.1);  wheel.setMass(MassType.NORMAL);  this.world.addBody(wheel);}  }
class C{  public void beforeFirst(){  close();  currentBlkNum=0;}  }
class C{  public void close(){  logger.info("Closing monitor service.");  if (null != dlClient) {    dlClient.close();  }  if (null != zkServerSets) {    for (    DLZkServerSet zkServerSet : zkServerSets) {      zkServerSet.close();    }  }  if (null != dlNamespace) {    dlNamespace.close();  }  executorService.shutdown();  try {    if (!executorService.awaitTermination(1,TimeUnit.MINUTES)) {      executorService.shutdownNow();    }  } catch (  InterruptedException e) {    logger.error("Interrupted on waiting shutting down monitor executor service : ",e);  }  if (null != statsProvider) {    statsProvider.stop();  }  keepAliveLatch.countDown();  logger.info("Closed monitor service.");}  }
class C{  private void addDescriptors(List<FoldingDescriptor> descriptors,ASTNode node){  IElementType type=node.getElementType();  if (type == BuildElementTypes.FUNCTION_STATEMENT) {    ASTNode colon=node.findChildByType(BuildToken.fromKind(TokenKind.COLON));    if (colon == null) {      return;    }    ASTNode stmtList=node.findChildByType(BuildElementTypes.STATEMENT_LIST);    if (stmtList == null) {      return;    }    int start=colon.getStartOffset() + 1;    int end=endOfList(stmtList);    descriptors.add(new FoldingDescriptor(node,range(start,end)));  } else   if (type == BuildElementTypes.FUNCALL_EXPRESSION || type == BuildElementTypes.LOAD_STATEMENT) {    ASTNode listNode=type == BuildElementTypes.FUNCALL_EXPRESSION ? node.findChildByType(BuildElementTypes.ARGUMENT_LIST) : node;    if (listNode == null) {      return;    }    ASTNode lParen=listNode.findChildByType(BuildToken.fromKind(TokenKind.LPAREN));    ASTNode rParen=listNode.findChildByType(BuildToken.fromKind(TokenKind.RPAREN));    if (lParen == null || rParen == null) {      return;    }    int start=lParen.getStartOffset() + 1;    int end=rParen.getTextRange().getEndOffset() - 1;    descriptors.add(new FoldingDescriptor(node,range(start,end)));  }}  }
class C{  XMLSchemaLoader(XMLErrorReporter errorReporter,XSGrammarBucket grammarBucket,SubstitutionGroupHandler sHandler,CMBuilder builder){  this(null,errorReporter,null,grammarBucket,sHandler,builder);}  }
class C{  @Override protected void configurePipeline(){  super.configurePipeline();  if (getFeature(XMLSCHEMA_VALIDATION)) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      fProperties.put(SCHEMA_VALIDATOR,fSchemaValidator);      addComponent(fSchemaValidator);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent=fSchemaValidator;    fNamespaceBinder.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    fSchemaValidator.setDocumentSource(fNamespaceBinder);  }}  }
class C{  public void plot(String filename){  try {    BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(filename));    render(out,0);    out.close();  } catch (  IOException ioe) {  }}  }
class C{  public MetricInstance withDependencyMetricNames(List<String> dependencyMetricNames){  return new MetricInstance(metricName,maker,dependencyMetricNames.toArray(new String[dependencyMetricNames.size()]));}  }
class C{  public EqExpr newEqExpr(Value op1,Value op2){  return new JEqExpr(op1,op2);}  }
class C{  @Override public boolean isWorkspaceRoot(File file){  return FileAttributeProvider.getInstance().isFile(new File(file,"WORKSPACE"));}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public Activity alwaysRunAfter(String beforeKey,String afterKey){  Activity before=get(beforeKey);  Activity after=get(afterKey);  if (before != null && after != null)   ActivityManager.alwaysScheduleAfter(before,after);  return after;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201014,skilltarget,num0,skillcaster,skillname);}  }
class C{  public static final Edge locateDirectedEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  try {    vHead=locateVertexInGraph(gGraph,vHead);    if (vHead == null)     return null;    vTail=locateVertexInGraph(gGraph,vTail);    if (vTail == null)     return null;    List lEdges=gGraph.getEdges(vHead);    java.util.Iterator iIter=lEdges.iterator();    String sTailLbl=vTail.getLabel();    while (iIter.hasNext()) {      Edge eCurrent=(Edge)iIter.next();      if (vHead != vTail) {        if (eCurrent.getVertexB().getLabel().compareTo(sTailLbl) == 0)         return eCurrent;      } else {        if ((eCurrent.getVertexA().getLabel().equals(sTailLbl)) && (eCurrent.getVertexB().getLabel().equals(sTailLbl)))         return eCurrent;      }    }    return null;  } catch (  NullPointerException e) {    return null;  }}  }
class C{  private void retry(Context context,Account account,OCUpload upload){  if (upload != null) {    Intent i=new Intent(context,FileUploader.class);    i.putExtra(FileUploader.KEY_RETRY,true);    i.putExtra(FileUploader.KEY_ACCOUNT,account);    i.putExtra(FileUploader.KEY_RETRY_UPLOAD,upload);    context.startService(i);  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public OpenIntToFieldHashMap(final Field<T> field){  this(field,DEFAULT_EXPECTED_SIZE,field.getZero());}  }
class C{  public boolean onSwipedAway(boolean toRight){  return false;}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  public AdsGetSuggestionsQueryWithCities lang(AdsGetSuggestionsLang value){  return unsafeParam("lang",value);}  }
class C{  public void saveMovie(String descriptor,VideoFormat vf) throws MovieSaveException {  try {    this.videoFormat=vf;    itm.saveMovie(mip.getMediaLocator(),descriptor,videoFormat);  } catch (  Exception e) {    throw new MovieSaveException(e);  }}  }
class C{  protected AudioGetCountQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_TOO_FAR_FROM_SUBZONE(String value0){  return new SM_SYSTEM_MESSAGE(1300749,value0);}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  this.controller=new SimulationBody(Color.CYAN);  this.controller.addFixture(Geometry.createCircle(0.5));  this.controller.setMass(MassType.INFINITE);  this.controller.setAutoSleep(false);  this.world.addBody(this.controller);  SimulationBody player=new SimulationBody(Color.GREEN);  player.addFixture(Geometry.createCircle(0.5));  player.setMass(MassType.NORMAL);  player.setAutoSleep(false);  this.world.addBody(player);  MotorJoint control=new MotorJoint(player,this.controller);  control.setCollisionAllowed(false);  control.setMaximumForce(1000.0);  control.setMaximumTorque(1000.0);  this.world.addJoint(control);  SimulationBody wall=new SimulationBody();  wall.addFixture(Geometry.createRectangle(1,10));  wall.setMass(MassType.INFINITE);  wall.translate(2,0);  this.world.addBody(wall);}  }
class C{  public Plural(Quantity quantity,String value){  this.value=value;  this.quantity=quantity;}  }
class C{  public void add(Predicate p,int color){  super.add(p,new Integer(color));}  }
class C{  public GreenGradient(int maxCount){  this.maxCount=maxCount;  factor=maxCount / Math.log(maxCount);}  }
class C{  private void expectedByte(int position,int count) throws MalformedByteSequenceException {  throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,"ExpectedByte",new Object[]{Integer.toString(position),Integer.toString(count)});}  }
class C{  public BigReal(BigInteger unscaledVal,int scale){  d=new BigDecimal(unscaledVal,scale);}  }
class C{  public Vector3f divideLocal(float scalar){  scalar=1f / scalar;  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  public UCSReader(InputStream inputStream,byte[] buffer,short encoding){  fInputStream=inputStream;  fBuffer=buffer;  fEncoding=encoding;}  }
class C{  public ASCIIReader(InputStream inputStream,int size,MessageFormatter messageFormatter,Locale locale){  this(inputStream,new byte[size],messageFormatter,locale);}  }
class C{  public boolean removeKey(int key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.values[i]=null;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_TITLE(String value0){  return new SM_SYSTEM_MESSAGE(1300588,value0);}  }
class C{  protected TimeSeriesQuery buildTimeSeriesQuery(TemplateDruidQuery template,PhysicalTable table,Granularity granularity,DateTimeZone timeZone,Filter filter,Set<Interval> intervals){  LOG.trace("Building druid timeseries query with following parameters \n" + "TemplateDruidQuery: {} \n" + "TimeGrain: {} \n"+ "Time Zone: {} \n"+ "Table: {} \n"+ "Filter: {} \n"+ "Intervals: {} \n",template,granularity,timeZone,table,filter,intervals);  if (template.getTimeGrain() != null) {    granularity=template.getTimeGrain().buildZonedTimeGrain(timeZone);  }  LOG.trace("Building a single pass druid timeseries query");  DataSource dataSource=new TableDataSource(table);  return new TimeSeriesQuery(dataSource,granularity,filter,template.getAggregations(),template.getPostAggregations(),intervals);}  }
class C{  @Deprecated public static SourceDataTagQuality fromXML(Element domElement){  NodeList fields=domElement.getChildNodes();  int fieldsCount=fields.getLength();  String fieldName;  String fieldValueString;  Node fieldNode;  SourceDataTagQuality result=new SourceDataTagQuality();  for (int i=0; i != fieldsCount; i++) {    fieldNode=fields.item(i);    if (fieldNode.getNodeType() == Node.ELEMENT_NODE) {      fieldName=fieldNode.getNodeName();      Node fieldValueNode=fieldNode.getFirstChild();      if (fieldValueNode != null) {        fieldValueString=fieldValueNode.getNodeValue();      } else {        fieldValueString="";      }      if (fieldName.equals(XML_ELEMENT_QUALITY_CODE)) {        short code=Short.parseShort(fieldValueString);        result.qualityCode=SourceDataTagQualityCode.getEnum(code);      } else       if (fieldName.equals(XML_ELEMENT_QUALITY_DESC)) {        result.description=fieldValueString;      }    }  }  return result;}  }
class C{  public boolean isLoaded(){  return size() > 0;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  CollectionIndex(int index){  _index=index;}  }
class C{  public static int dpToPixel(Context c,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,c.getResources().getDisplayMetrics());}  }
class C{  public static ILogEntry[] createLogEntriesFrom(ISVNRemoteFolder remoteFolder,ISVNLogMessage[] logMessages,Tags[] tags){  ILogEntry[] result=new ILogEntry[logMessages.length];  for (int i=0; i < logMessages.length; i++) {    result[i]=new LogEntry(logMessages[i],remoteFolder,null,(tags[i] != null) ? tags[i].getTags() : null);  }  return result;}  }
class C{  public void attachTo(RecyclerView recycler){  attachTo(recycler,false);}  }
class C{  public void read(IInputReader reader,long startPos) throws IOException {  reader.seek(startPos);  setFormatDef(reader.readString());  FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());  for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {switch (pair.getFirst()) {case "Creator":      setCreator(reader.readString());    break;case "CreationDate":  setCreationDate(reader.readLong());break;case "AlignmentsFile":setAlignmentFile(reader.readString());break;case "AlignmentFileFormat":setAlignmentFileFormat(reader.readString());break;case "AlignmentFileSize":setAlignmentFileSize(reader.readLong());break;case "ReadsFile":setReadsFile(reader.readString());break;case "ReadsFileFormat":setReadsFileFormat(reader.readString());break;case "ReadsFileSize":setReadsFileSize(reader.readLong());break;case "BlastMode":setBlastMode(reader.readString());break;case "MatchesStart":setMatchesStart(reader.readLong());break;case "MatchesFooter":setMatchesFooter(reader.readLong());break;case "ClassificationsStart":setClassificationsStart(reader.readLong());break;case "ClassificationsFooter":setClassificationsFooter(reader.readLong());break;case "AuxStart":setAuxStart(reader.readLong());break;case "AuxFooter":setAuxFooter(reader.readLong());break;case "FileFooter":setFileFooter(reader.readLong());break;}}}  }
class C{  @Nullable private Message maybeUnpackAnyType(FieldDescriptor field,Object value){  if (field.getType() == FieldDescriptor.Type.MESSAGE && field.getMessageType().getFullName().equals(Any.getDescriptor().getFullName())) {    Any any=(Any)value;    Message defaultInstance=anyConverterRegistry.get(any.getTypeUrl());    if (defaultInstance != null) {      try {        return defaultInstance.toBuilder().mergeFrom(any.getValue()).build();      } catch (      InvalidProtocolBufferException e) {        throw new RuntimeException(e);      }    }  }  return null;}  }
class C{  public void start(){  if (isActive) {    return;  }  log.info("Starting up the default async job executor [{}].",getClass().getName());  if (timerJobRunnable == null) {    timerJobRunnable=new AcquireTimerJobsRunnable(this,processEngineConfiguration.getJobManager());  }  if (resetExpiredJobsRunnable == null) {    resetExpiredJobsRunnable=new ResetExpiredJobsRunnable(this);  }  if (!isMessageQueueMode && asyncJobsDueRunnable == null) {    asyncJobsDueRunnable=new AcquireAsyncJobsDueRunnable(this);  }  if (!isMessageQueueMode) {    initAsyncJobExecutionThreadPool();    startJobAcquisitionThread();  }  startTimerAcquisitionThread();  startResetExpiredJobsThread();  isActive=true;  executeTemporaryJobs();}  }
class C{  public static BigDecimal addFirstEntryAmount(BigDecimal initialValue,List<GenericValue> transactions,String fieldName,int decimals,int rounding) throws GenericEntityException {  if ((transactions != null) && (transactions.size() == 1)) {    GenericValue firstEntry=transactions.get(0);    if (firstEntry.get(fieldName) != null) {      BigDecimal valueToAdd=firstEntry.getBigDecimal(fieldName);      return initialValue.add(valueToAdd).setScale(decimals,rounding);    } else {      return initialValue;    }  } else {    return initialValue;  }}  }
class C{  @Override public int hashCode(){  if (null != xxHash32) {    return xxHash32.hash(data,0,data.length,0);  }  int result=Arrays.hashCode(data);  result=31 * result;  return result;}  }
class C{  public Hash(byte[] hash){  if (hash.length != 32) {    throw new IllegalArgumentException("Digest length must be 32 bytes for Hash");  }  this.bytes=new byte[32];  System.arraycopy(hash,0,this.bytes,0,32);}  }
class C{  @NotNull public ObjectProperty<Color> backgroundColor(){  return myBackgroundColor;}  }
class C{  private void performHighlightDrag(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h != null && !h.equalTo(mLastHighlighted)) {    mLastHighlighted=h;    mChart.highlightValue(h,true);  }}  }
class C{  public void java_lang_Class_getMethods0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  private void appointRank(Player activePlayer,String charName,int rankId){  final LegionMemberEx LM=getLegionMemberEx(charName);  if (LM == null) {    log.error("Char name does not exist in legion member table: " + charName);    return;  }  if (legionRestrictions.canAppointRank(activePlayer,LM.getObjectId())) {    Legion legion=activePlayer.getLegion();    LegionRank rank=LegionRank.values()[rankId];    int msgId=0;switch (rank) {case DEPUTY:      msgId=1400902;    break;case LEGIONARY:  msgId=1300268;break;case CENTURION:msgId=1300267;break;case VOLUNTEER:msgId=1400903;default :break;}LegionMember legionMember=getLegionMember(LM.getObjectId());legionMember.setRank(rank);DAOManager.getDAO(LegionMemberDAO.class).storeLegionMember(legionMember.getObjectId(),legionMember);LM.setRank(rank);PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_UPDATE_MEMBER(LM,msgId,LM.getName()));}}  }
class C{  public static void offsetImageBy(@NonNull ImageView imageView,int orientation,float percentage,@NonNull Matrix mat){  float offsetX, offsetY;  if (orientation == LinearLayout.VERTICAL) {    offsetX=0;    offsetY=percentage * imageView.getHeight();  } else {    offsetX=percentage * imageView.getWidth();    offsetY=0;  }  mat.setTranslate(offsetX,offsetY);  imageView.setImageMatrix(mat);}  }
class C{  public static void appendMDString(final String alignedQuery,final String alignedReference,final StringBuilder buffer){  buffer.append("MD:Z:");  int countMatches=0;  boolean inDeletion=false;  for (int i=0; i < alignedQuery.length(); i++) {    final char qChar=alignedQuery.charAt(i);    final char rChar=alignedReference.charAt(i);    if (qChar == '-') {      if (countMatches > 0) {        buffer.append(countMatches);        countMatches=0;      }      if (!inDeletion) {        buffer.append("^");        inDeletion=true;      }      buffer.append(rChar);    } else     if (rChar != '-') {      if (qChar == rChar) {        countMatches++;      } else {        if (inDeletion)         buffer.append("0");        if (countMatches > 0) {          buffer.append(countMatches);          countMatches=0;        }        buffer.append(rChar);      }      if (inDeletion)       inDeletion=false;    }  }  if (countMatches > 0)   buffer.append(countMatches); else   if (inDeletion)   buffer.append(0);}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  if (TextUtils.isEmpty(message)) {    message="Empty/NULL log message";  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  @Override public String toString(){  StringTable stringTable=StringTable.getCurrent();  if (stringTable != null) {    Node node=stringTable.get(myIdentifier);    if (node != null) {      return node.getString(myArguments);    }  }  return myIdentifier + " " + myArguments;}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public static Type toJimpleRefType(String desc){  return desc.charAt(0) == '[' ? toJimpleType(desc) : RefType.v(toQualifiedName(desc));}  }
class C{  private Map<TypeElement,ComponentInfo> calculateAllMappingFromComponentsToCoreInjectors(Set<TypeElement> components){  Map<TypeElement,ComponentInfo> componentScopeMap=new HashMap<>();  for (  TypeElement component : components) {    TypeElement scope=getScopeForComponent(component);    if (scope != null) {      componentScopeMap.put(component,new ComponentInfo(scope));    }  }  return componentScopeMap;}  }
class C{  private String generateAlarmIndex(long time){  return retrieveIndexFormat(indexPrefix + "-alarm_",time);}  }
class C{  @Nullable private static File findResDirectory(@NotNull SourceProvider sourceProvider){  Collection<File> resDirectories=sourceProvider.getResDirectories();  File resDir=null;  if (!resDirectories.isEmpty()) {    resDir=resDirectories.iterator().next();  }  return resDir;}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  long recordSize(){  return Math.max(LongMath.divide(_bytesAdded,Math.max(_adds,1),RoundingMode.CEILING),1);}  }
class C{  @RequestMapping(value="/apps",method=RequestMethod.POST) public JsonResponse saveApp(@RequestParam("appName") String appName,@RequestParam("appKey") String appKey,@RequestParam("appDesc") String appDesc,@RequestParam(value="inheritAppId",defaultValue="") Long inheritAppId){  App app=new App();  app.setAppName(appName);  app.setAppKey(appKey);  app.setAppDesc(appDesc);  Response<Long> saveResp=appService.save(app);  if (!saveResp.isSuccess()) {    Logs.error("failed to save app({}), cause: {}",app,saveResp.getErr());    return JsonResponse.notOk(saveResp.getErr());  }  appService.inheritConfigs(inheritAppId,saveResp.getData());  return JsonResponse.ok(saveResp.getData());}  }
class C{  public CreateSiteWindow selectNthTemplate(int i){  templatesList.get(i).click();  return this;}  }
class C{  @SuppressWarnings("unchecked") @EdmFunctionImport(name="CreateCustomerReview",entitySet="CustomerReviews",returnType=@ReturnType(type=Type.ENTITY,isCollection=false)) public CustomerReview createCustomerReview(@EdmFunctionImportParameter(name="ProductId") String productId,@EdmFunctionImportParameter(name="FirstName") String firstName,@EdmFunctionImportParameter(name="LastName") String lastName,@EdmFunctionImportParameter(name="Rating") String rating,@EdmFunctionImportParameter(name="CreationDate") String creationDate,@EdmFunctionImportParameter(name="Comment") String comment) throws ODataException, ParseException {  EntityManagerFactory emf=Utility.getEntityManagerFactory();  EntityManager em=emf.createEntityManager();  Product prod=null;  CustomerReview customerReview=null;  try {    em.getTransaction().begin();    prod=em.find(Product.class,productId);    try {      customerReview=new CustomerReview();      customerReview.setComment(comment);      Calendar cal=Calendar.getInstance();      cal.setTime(new Date(Long.parseLong(creationDate)));      customerReview.setCreationDate(cal);      customerReview.setFirstName(firstName);      customerReview.setLastName(lastName);      customerReview.setRating(Integer.parseInt(rating));      customerReview.setProductId(productId);      customerReview.setProduct(prod);      em.persist(customerReview);      prod.addReview(customerReview);      em.getTransaction().commit();      return customerReview;    } catch (    NoResultException e) {      throw new ODataApplicationException("Error creating customer review:",Locale.ENGLISH,HttpStatusCodes.BAD_REQUEST);    }  }  finally {    em.close();  }}  }
class C{  public boolean naive_side_effect(){  return soot.PhaseOptions.getBoolean(options,"naive-side-effect");}  }
class C{  private void next(SegmentedListIterator<T> iter){  iter._curElement=null;  if (iter._currSegmentScanCount < 0)   return;  if (iter._headToTail)   next_down(iter); else   next_up(iter);}  }
class C{  @Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){  visitor.setTestValue(fieldId,this.value);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < TEXT_SHIFT2_SET_CHARS.length) {char textChar=TEXT_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(textChar + 128));  upperShift=false;} else {  result.append(textChar);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public void addVendorOption(Class<?> symbolizerClass,List<ValueComboBoxData> symbolList,Map<Class<?>,List<SymbolTypeConfig>> fieldEnableMap,Class<?> panelId){  for (  VOMarkerSymbolInterface obj : list) {    obj.addVendorOption(symbolizerClass,symbolList,fieldEnableMap,panelId);  }}  }
class C{  public XPointerErrorHandler(){  this(new PrintWriter(System.err));}  }
class C{  public boolean contains(Node n){  if (bitVector != null && bitVector.contains(n))   return true;  if (overflow.contains(n))   return true;  return false;}  }
class C{  @Override public void dispatch(RemoteEventBusPacket packet){  try {    packet.execute(this);  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,ex.toString(),ex);  } finally {    _dataEventManager.notifyReturned(packet.getStatus(),(ITemplateHolder)packet.getEntryHolder());  }}  }
class C{  protected BoardUnfixTopicQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public Vector crossProduct(Vector o){  double newX=y * o.z - o.y * z;  double newY=z * o.x - o.z * x;  double newZ=x * o.y - o.x * y;  x=newX;  y=newY;  z=newZ;  return this;}  }
class C{  public void treeExpanded(TreeExpansionEvent event){  inspectorWindow.updateView(Director.ALL);}  }
class C{  public TemplateDruidQuery nest(){  LinkedHashSet<Aggregation> innerAggregations=new LinkedHashSet<>();  LinkedHashSet<Aggregation> outerAggregations=new LinkedHashSet<>();  for (  Aggregation agg : aggregations) {    Pair<Aggregation,Aggregation> split=agg.nest();    innerAggregations.add(split.getRight());    outerAggregations.add(split.getLeft());  }  TemplateDruidQuery innerQuery;  if (isNested()) {    innerQuery=new TemplateDruidQuery(innerAggregations,Collections.emptySet(),nestedQuery,null);  } else {    innerQuery=new TemplateDruidQuery(innerAggregations,Collections.emptySet(),null,null);  }  return new TemplateDruidQuery(outerAggregations,postAggregations,innerQuery,timeGrain);}  }
class C{  @Override public void removeListener(DataSourceUpdatedInterface listener){  listenerList.remove(listener);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public boolean containsValue(Object value){  return backedMap.containsValue(value);}  }
class C{  public boolean removeUser(int handle){  try {    return mService.removeUser(handle);  } catch (  RemoteException re) {    Log.w(TAG,"Could not remove user ",re);    return false;  }}  }
class C{  protected ResourceRef resolvePath(ConstraintViolation<?> violation){  Object resource=violation.getRootBean();  assertResource(resource);  Object nodeObject=resource;  ResourceRef ref=new ResourceRef(resource);  Iterator<Node> iterator=violation.getPropertyPath().iterator();  while (iterator.hasNext()) {    Node node=iterator.next();    nodeObject=ref.getNodeReference(nodeObject,node);    ref.visitNode(nodeObject);    nodeObject=ref.visitProperty(nodeObject,node);  }  return ref;}  }
class C{  public static double safeSqrt(double x){  return (x < 0 ? -Math.sqrt(-x) : Math.sqrt(x));}  }
class C{  public Builder className(String className){  this.className=className;  return this;}  }
class C{  public static cn.nukkit.plugin.Plugin toNukkit(Plugin plugin){  return CraftServer.toNukkit(Bukkit.getServer()).getPluginManager().getPlugin(plugin.getName());}  }
class C{  public Builder compressionCodec(CompressionCodec.Type codec){  this._codec=codec;  return this;}  }
class C{  public Vector subtract(Vector vec){  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200874,skillcaster,num0,skillname);}  }
class C{  public SQLQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType){  this(sqlExpression,type.getName(),null,queryResultType,null);}  }
class C{  @Override public InterpolatingMicrosphere2D copy(){  return new InterpolatingMicrosphere2D(this);}  }
class C{  @Override public void updateWindowTitle(boolean dataEditedFlag){  this.dataEditedFlag=dataEditedFlag;  String docName=NO_SLDEDITOR_FILE_SET;  File file=SLDEditorFile.getInstance().getSldEditorFile();  if (file != null) {    docName=file.getName();  } else {    docName=SLDEditorFile.getInstance().getSLDData().getLayerName();  }  char docDirtyChar=dataEditedFlag ? '*' : ' ';  frame.setTitle(String.format("%s - %s%c",generateApplicationTitleString(),docName,docDirtyChar));}  }
class C{  @Override public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  @Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){  final Class<?> type=field.getType();  FramePath path=frameMap.get(pageObject);  if (path == null) {    path=new FramePath();  }  Object currentFrame=null;  if (String.class.equals(type)) {    currentFrame=path.toString();  } else   if (FramePath.class.isAssignableFrom(type)) {    currentFrame=path;  }  return Optional.ofNullable(currentFrame);}  }
class C{  public static void putMap(Map<String,String> properties,String keyPrefix,Map<String,String> value){  if (properties == value) {    throw new IllegalArgumentException("properties and value must be different objects");  }  Set<String> keysToDelete=new HashSet<String>();  for (  String key : properties.keySet()) {    if (key.toString().startsWith(keyPrefix)) {      keysToDelete.add(key);    }  }  for (  String key : keysToDelete) {    properties.remove(key);  }  if (value != null) {    for (    Entry<String,String> pair : value.entrySet()) {      properties.put(keyPrefix + pair.getKey(),pair.getValue());    }  }}  }
class C{  public void onAccuracyChanged(Sensor sensor,int accuracy){  if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) {    return;  }  if (this.status == AccelListener.STOPPED) {    return;  }  this.accuracy=accuracy;}  }
class C{  public static double trainerLevelToMaxPokeLevel(int trainerLevel){  return Math.min(trainerLevel + 1.5,40);}  }
class C{  private int findAndUncollapseNext(String regularExpression,boolean reverse,boolean all){  System.err.println("Find and uncollapse");  final Pattern pattern=Pattern.compile(regularExpression);  MainViewer mainViewer=doc.getDir().getMainViewer();  PhyloTree tree=mainViewer.getTree();  ProjectManager.getPreviouslySelectedNodeLabels().clear();  final NodeSet matches=new NodeSet(tree);  for (  String name : TaxonomyData.getName2IdMap().getNames()) {    boolean ok=false;    if (name != null) {      final int taxId=TaxonomyData.getName2IdMap().get(name);      if (taxId != 0) {        Matcher matcher=pattern.matcher(name);        if (matcher.find())         ok=true; else {          matcher=pattern.matcher("" + taxId);          if (matcher.find())           ok=true;        }        if (ok) {          ProjectManager.getPreviouslySelectedNodeLabels().add(name);          Node v=mainViewer.getTaxId2Node(taxId);          if (v != null && (doc.getNumberOfReads() == 0 || ((NodeData)v.getData()).getCountSummarized() > 0))           matches.add(v);        }      }    }  }  int count_uncollapsed=0;  int count_collapsed=0;  final NodeSet ancestors=new NodeSet(tree);  for (Node v=(reverse ? tree.getLastNode() : tree.getFirstNode()); v != null; v=(reverse ? v.getPrev() : v.getNext())) {    if (matches.contains(v)) {      boolean found=false;      Node firstCollapsedAncestor=getFirstCollapsedAncestor(v);      Node w=v;      while (w != null) {        ancestors.add(w);        Integer wTaxId=(Integer)w.getInfo();        if (firstCollapsedAncestor != null) {          doc.getDir().getMainViewer().getCollapsedIds().remove(wTaxId);          count_uncollapsed++;          found=true;          for (Iterator it=w.getOutEdges(); it.hasNext(); ) {            Node u=((Edge)it.next()).getOpposite(w);            if (!ancestors.contains(u)) {              Integer uTaxId=(Integer)u.getInfo();              if (uTaxId != null && !doc.getDir().getMainViewer().getCollapsedIds().contains(uTaxId)) {                doc.getDir().getMainViewer().getCollapsedIds().add(uTaxId);                count_collapsed++;              }            }          }          if (w == firstCollapsedAncestor)           firstCollapsedAncestor=null;        }        if (w.getInDegree() != 0) {          w=w.getInEdges().next().getOpposite(w);        } else         w=null;      }      if (!all && found)       break;    }  }  return matches.size();}  }
class C{  private boolean isOff(long flag){  return (options & flag) == 0;}  }
class C{  public static Map<String,Object> createOrderNote(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String noteString=(String)context.get("note");  String noteName=(String)context.get("noteName");  String orderId=(String)context.get("orderId");  String internalNote=(String)context.get("internalNote");  Map<String,Object> noteCtx=UtilMisc.<String,Object>toMap("note",noteString,"userLogin",userLogin,"noteName",noteName);  Locale locale=(Locale)context.get("locale");  try {    Map<String,Object> noteRes=dispatcher.runSync("createNote",noteCtx);    if (ServiceUtil.isError(noteRes))     return noteRes;    String noteId=(String)noteRes.get("noteId");    if (UtilValidate.isEmpty(noteId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemCreatingTheNoteNoNoteIdReturned",locale));    }    Map<String,String> fields=UtilMisc.<String,String>toMap("orderId",orderId,"noteId",noteId,"internalNote",internalNote);    GenericValue v=delegator.makeValue("OrderHeaderNote",fields);    delegator.create(v);  } catch (  GenericEntityException ee) {    Debug.logError(ee,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",ee.getMessage()),locale));  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",se.getMessage()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public void store(Path path,Storable obj) throws IOException {  try (OutputStream os=hadoopFileSystem.create(path)){    serializer.write(os,obj);  } }  }
class C{  private static void unknownPacket(State state,int id){  log.warn(String.format("Unknown packet recived from Aion client: 0x%02X state=%s",id,state.toString()));}  }
class C{  @Override public void clear(){  Arrays.fill(this.d,0.0);  Arrays.fill(this.rhs,0.0);  Arrays.fill(this.r,0.0);  Arrays.fill(this.tol,0.0);  Arrays.fill(this.rss,0.0);  Arrays.fill(this.work_tolset,0.0);  Arrays.fill(this.work_sing,0.0);  Arrays.fill(this.x_sing,0.0);  Arrays.fill(this.lindep,false);  for (int i=0; i < nvars; i++) {    this.vorder[i]=i;  }  this.nobs=0;  this.sserr=0.0;  this.sumy=0.0;  this.sumsqy=0.0;  this.rss_set=false;  this.tol_set=false;}  }
class C{  private boolean displayBuiltInProcessFunction(String selectedValue){  String functionNameString;  functionNameString=SelectedProcessFunction.extractLocalFunctionName(selectedValue);  for (  FunctionName name : factory.getFunctionNames()) {    if (name.getName().compareToIgnoreCase(functionNameString) == 0) {      functionList.setSelectedValue(functionNameString,true);      functionParameterTableModel.populate(name,existingProcessFunction);      return true;    }  }  return false;}  }
class C{  public boolean fileToSpeech(String filePath){  boolean ok=false;  try {    InputStream is=new FileInputStream(filePath);    ok=streamToSpeech(is);  } catch (  IOException ioe) {    System.err.println("Can't read data from " + filePath);  }  return ok;}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  Process process;  try {    process=Runtime.getRuntime().exec(cmd);  } catch (  Exception e) {    throw new ProcessException("Cannot start mbrola program: " + cmd);  }  PrintWriter toMbrola=new PrintWriter(process.getOutputStream());  BufferedInputStream fromMbrola=new BufferedInputStream(process.getInputStream());  Relation segmentRelation=utterance.getRelation(Relation.SEGMENT);  Item segment=segmentRelation.getHead();  while (segment != null) {    String name=segment.getFeatures().getString("name");    int dur=segment.getFeatures().getInt("mbr_dur");    String targets=segment.getFeatures().getString("mbr_targets");    String output=(name + " " + dur+ " "+ targets);    toMbrola.println(output);    segment=segment.getNext();  }  toMbrola.flush();  if (closeDelay > 0l) {    try {      Thread.sleep(closeDelay);    } catch (    InterruptedException ie) {    }  }  toMbrola.close();  byte[] buffer=new byte[1024];  List audioData=new ArrayList();  int totalSize=0;  int nrRead=-1;  try {    while ((nrRead=fromMbrola.read(buffer)) != -1) {      if (nrRead < buffer.length) {        byte[] slice=new byte[nrRead];        System.arraycopy(buffer,0,slice,0,nrRead);        audioData.add(slice);      } else {        audioData.add(buffer);        buffer=new byte[buffer.length];      }      totalSize+=nrRead;    }    fromMbrola.close();  } catch (  IOException e) {    throw new ProcessException("Cannot read from mbrola");  }  if (totalSize == 0) {    throw new Error("No audio data read");  }  utterance.setObject("mbrolaAudio",audioData);  utterance.setInt("mbrolaAudioLength",totalSize);}  }
class C{  public TShortObjectHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static double correlation(double[] residuals,double targetAttribute[]){  double[] predictedValues=new double[residuals.length];  for (int i=0; i < predictedValues.length; i++) {    predictedValues[i]=targetAttribute[i] - residuals[i];  }  double ssErr=ssError(predictedValues,targetAttribute);  double total=ssTotal(residuals,targetAttribute);  return 1 - (ssErr / total);}  }
class C{  public static final int doubleToShortBits(final double d){  long l=Double.doubleToLongBits(d);  return (int)(l >> 48);}  }
class C{  public Map<String,Object> finalizeOrderEntryOptions(int shipGroupIndex,String shippingMethod,String shippingInstructions,String maySplit,String giftMessage,String isGift,String internalCode,String shipBeforeDate,String shipAfterDate,String orderAdditionalEmails){  List<String> errorMessages=new ArrayList<String>();  orderAdditionalEmails=cleanVerifyEmailListToString(orderAdditionalEmails,errorMessages);  if (errorMessages.size() > 0) {    return ServiceUtil.returnError(errorMessages);  }  this.cart.setOrderAdditionalEmails(orderAdditionalEmails);  return finalizeOrderEntryOptions(shipGroupIndex,shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate,null,null);}  }
class C{  public static SearchShareesFragment newInstance(OCFile fileToShare,Account account){  SearchShareesFragment fragment=new SearchShareesFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,fileToShare);  args.putParcelable(ARG_ACCOUNT,account);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (!(o instanceof Collection)) {    return false;  }  final Collection<?> other=(Collection<?>)o;  final Iterator<?> self_iter=iterator();  final Iterator<?> othr_iter=other.iterator();  while (self_iter.hasNext() && othr_iter.hasNext()) {    if (!Objects.equals(self_iter.next(),othr_iter.next()))     return false;  }  return !(self_iter.hasNext() || othr_iter.hasNext());}  }
class C{  public Distribution(){  hDistro=new TreeMap();}  }
class C{  public void build(RealmResults<T> results){  int xIndex=0;  for (  T object : results) {    mValues.add(buildEntryFromResultObject(object,xIndex++));  }}  }
class C{  public SuffixFileFilter(String suffix,IOCase caseSensitivity){  if (suffix == null) {    throw new IllegalArgumentException("The suffix must not be null");  }  this.suffixes=new String[]{suffix};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @Override public void onResponse(GankData response){  getContentText.setText(response.toString());}  }
class C{  public Host createHost(String hostname){  return createHost(new HostProperties(hostname,hostname,null),true,true);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  private void updateEncryptionState(){  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();  boolean isBackendInitialized=mProfileSyncService.isBackendInitialized();  mSyncEncryption.setEnabled(isSyncEnabled && isBackendInitialized);  mSyncEncryption.setSummary(null);  if (!isBackendInitialized) {    closeDialogIfOpen(FRAGMENT_CUSTOM_PASSPHRASE);    closeDialogIfOpen(FRAGMENT_ENTER_PASSPHRASE);    return;  }  if (!mProfileSyncService.isPassphraseRequiredForDecryption()) {    closeDialogIfOpen(FRAGMENT_ENTER_PASSPHRASE);  }  if (mProfileSyncService.isPassphraseRequiredForDecryption() && isAdded()) {    mSyncEncryption.setSummary(errorSummary(getString(R.string.sync_need_passphrase)));  }}  }
class C{  public ActivateAgentListBehaviour(ResultsAgent a,long lInterval,Queue lCalcArgs,PrintStream pOut,double dMigrationProbability,Object[] oaAgentArgs){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  CalcArgs=lCalcArgs;  OutputStream=pOut;  MigrationProbability=dMigrationProbability;  AgentArgs=oaAgentArgs;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  private void installSocksSelector(Properties settings,ProtocolDispatchSelector ps) throws NumberFormatException {  String proxyHost=settings.getProperty("/system/proxy/socks_host",null);  int proxyPort=Integer.parseInt(settings.getProperty("/system/proxy/socks_port","0").trim());  if (proxyHost != null && proxyHost.length() > 0 && proxyPort > 0) {    Logger.log(getClass(),LogLevel.TRACE,"Gnome socks proxy is {0}:{1}",proxyHost,proxyPort);    ps.setSelector("socks",new FixedProxySelector(proxyHost.trim(),proxyPort));  }}  }
class C{  public Histogram(Stream<RangeWithCount> items){  final List<RangeWithCount> iter=cleanup_(items.map(null).collect(Collectors.toList()));  if (iter.isEmpty()) {    buckets_=EMPTY_LIST;    return;  }  if (iter.stream().map(null).map(null).distinct().count() > 1) {    throw new IllegalArgumentException("mixed sign");  }  final List<Bucket> buckets=new ArrayList<>(iter.size());  double running_total=0;  for (  RangeWithCount rwc : iter) {    running_total+=rwc.getCount();    buckets.add(new Bucket(rwc.getRange(),rwc.getCount(),running_total));  }  buckets_=unmodifiableList(buckets);}  }
class C{  public static void main(String[] args){  TrackingContactIds simulation=new TrackingContactIds();  simulation.run();}  }
class C{  public static String maryBase(){  return getFilename("mary.base",".");}  }
class C{  public static IKInfo CalcIK_2D_TwoBoneAnalytic(boolean solvePosAngle2,double length1,double length2,double targetX,double targetY){  final double epsilon=0.0001;  IKInfo ikInfo=new IKInfo();  ikInfo.foundValidSolution=true;  double targetDistSqr=(targetX * targetX + targetY * targetY);  double sinAngle2;  double cosAngle2;  double cosAngle2_denom=2 * length1 * length2;  if (cosAngle2_denom > epsilon) {    cosAngle2=(targetDistSqr - length1 * length1 - length2 * length2) / (cosAngle2_denom);    if ((cosAngle2 < -1.0) || (cosAngle2 > 1.0))     ikInfo.foundValidSolution=false;    cosAngle2=Math.max(-1,Math.min(1,cosAngle2));    ikInfo.angle2=Math.acos(cosAngle2);    if (!solvePosAngle2)     ikInfo.angle2=-ikInfo.angle2;    sinAngle2=Math.sin(ikInfo.angle2);  } else {    double totalLenSqr=(length1 + length2) * (length1 + length2);    if (targetDistSqr < (totalLenSqr - epsilon) || targetDistSqr > (totalLenSqr + epsilon)) {      ikInfo.foundValidSolution=false;    }    ikInfo.angle2=0.0;    cosAngle2=1.0;    sinAngle2=0.0;  }  double triAdjacent=length1 + length2 * cosAngle2;  double triOpposite=length2 * sinAngle2;  double tanY=targetY * triAdjacent - targetX * triOpposite;  double tanX=targetX * triAdjacent + targetY * triOpposite;  ikInfo.angle1=Math.atan2(tanY,tanX);  return ikInfo;}  }
class C{  private static void removeUnusedWeakReferences(){  Iterator<Entry<String,WeakReference<TraceableLogger>>> iterator=traceableLoggers.entrySet().iterator();  while (iterator.hasNext()) {    if (iterator.next().getValue().get() == null)     iterator.remove();  }}  }
class C{  public Encoding(String name){  this.name=name;}  }
class C{  public static CommandTag buildCreateAllFieldsCommandTag(Long id,Properties properties){  if (properties == null) {    properties=new Properties();  }  CommandTag commandTag=CommandTag.create("CommandTag" + id,Integer.class,new SimpleHardwareAddressImpl("testAddress"),30000,6000,200,2,"RBAC class","RBAC device","RBAC property").id(id).equipmentId(10L).description("foo").mode(TagMode.OPERATIONAL).metadata(Metadata.builder().addMetadata("testMetadata",11).build()).maximum(100).minimum(0).build();  properties.setProperty("name","CommandTag" + id);  properties.setProperty("description","foo");  properties.setProperty("mode",String.valueOf(TagMode.OPERATIONAL.ordinal()));  properties.setProperty("dataType",Integer.class.getName());  properties.setProperty("metadata",Metadata.toJSON(Metadata.builder().addMetadata("testMetadata",11).build()));  properties.setProperty("hardwareAddress",new SimpleHardwareAddressImpl("testAddress").toConfigXML());  properties.setProperty("equipmentId",String.valueOf(10l));  properties.setProperty("clientTimeout",String.valueOf(30000));  properties.setProperty("execTimeout",String.valueOf(6000));  properties.setProperty("sourceTimeout",String.valueOf(200));  properties.setProperty("sourceRetries",String.valueOf(2));  properties.setProperty("rbacClass","RBAC class");  properties.setProperty("rbacDevice","RBAC device");  properties.setProperty("rbacProperty","RBAC property");  properties.setProperty("maxValue","100");  properties.setProperty("minValue","0");  return commandTag;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  toolbar=(Toolbar)findViewById(R.id.toolbar);  setSupportActionBar(toolbar);  getSupportActionBar().setDisplayShowHomeEnabled(true);  setupNavigationDrawer();  setFragmentContent(currentFragment);  showIntro();}  }
class C{  @VisibleForTesting public void enableExperiment(String experiment){  this.experiments=FluentIterable.from(experiments).append(experiment).toSet();}  }
class C{  public static boolean isStandardRGBImage(BufferedImage bImage){  return bImage.getColorModel().getColorSpace().isCS_sRGB();}  }
class C{  @SuppressWarnings("deprecation") public static void init(Context context){  if (context == null) {    mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();    mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();    Log.e("MPChartLib-Utils","Utils.init(...) PROVIDED CONTEXT OBJECT IS NULL");  } else {    ViewConfiguration viewConfiguration=ViewConfiguration.get(context);    mMinimumFlingVelocity=viewConfiguration.getScaledMinimumFlingVelocity();    mMaximumFlingVelocity=viewConfiguration.getScaledMaximumFlingVelocity();    Resources res=context.getResources();    mMetrics=res.getDisplayMetrics();  }}  }
class C{  public Calendar addToCalendar(Calendar cal){  cal.add(Calendar.MILLISECOND,this.milliseconds);  cal.add(Calendar.SECOND,this.seconds);  cal.add(Calendar.MINUTE,this.minutes);  cal.add(Calendar.HOUR,this.hours);  cal.add(Calendar.DAY_OF_MONTH,this.days);  cal.add(Calendar.MONTH,this.months);  cal.add(Calendar.YEAR,this.years);  return cal;}  }
class C{  private static boolean checkSimpleDerivation(XSSimpleType derived,XSSimpleType base,short block){  if (derived == base)   return true;  if ((block & XSConstants.DERIVATION_RESTRICTION) != 0 || (derived.getBaseType().getFinal() & XSConstants.DERIVATION_RESTRICTION) != 0) {    return false;  }  XSSimpleType directBase=(XSSimpleType)derived.getBaseType();  if (directBase == base)   return true;  if (directBase != SchemaGrammar.fAnySimpleType && checkSimpleDerivation(directBase,base,block)) {    return true;  }  if ((derived.getVariety() == XSSimpleTypeDefinition.VARIETY_LIST || derived.getVariety() == XSSimpleTypeDefinition.VARIETY_UNION) && base == SchemaGrammar.fAnySimpleType) {    return true;  }  if (base.getVariety() == XSSimpleTypeDefinition.VARIETY_UNION) {    XSObjectList subUnionMemberDV=base.getMemberTypes();    int subUnionSize=subUnionMemberDV.getLength();    for (int i=0; i < subUnionSize; i++) {      base=(XSSimpleType)subUnionMemberDV.item(i);      if (checkSimpleDerivation(derived,base,block))       return true;    }  }  return false;}  }
class C{  public long timeMillis(){  return ((_perf.highResCounter() * TO_MILLISECONDS) / TICKS_PER_SECOND);}  }
class C{  public void onClick(int id){switch (id) {case 1:    startLocationUpdates();  break;case 0:stopLocationUpdates();break;}}  }
class C{  public List<GenericValue> makeAllOrderItemContactMechs(){  List<GenericValue> allOrderContactMechs=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : cartLines) {    Map<String,String> itemContactMechIds=item.getOrderItemContactMechIds();    if (itemContactMechIds != null) {      for (      Map.Entry<String,String> entry : itemContactMechIds.entrySet()) {        GenericValue orderContactMech=getDelegator().makeValue("OrderItemContactMech");        orderContactMech.set("contactMechPurposeTypeId",entry.getKey());        orderContactMech.set("contactMechId",entry.getValue());        orderContactMech.set("orderItemSeqId",item.getOrderItemSeqId());        allOrderContactMechs.add(orderContactMech);      }    }  }  return allOrderContactMechs;}  }
class C{  private void tryToGetAudioFocus(){  if (mAudioFocus != AudioFocus.FOCUS && mAudioManager != null && (AudioManager.AUDIOFOCUS_REQUEST_GRANTED == mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN))) {    mAudioFocus=AudioFocus.FOCUS;  }}  }
class C{  public void releaseScan() throws SAException {}  }
class C{  @Override public boolean copyNodes(NodeInterface destinationTreeNode,Map<NodeInterface,List<SLDDataInterface>> droppedDataMap){  return false;}  }
class C{  public String toString(){  return "PostLexicalAnalyzer";}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Vector2f)) {    return false;  }  if (this == o) {    return true;  }  Vector2f comp=(Vector2f)o;  if (Float.compare(x,comp.x) != 0) {    return false;  }  if (Float.compare(y,comp.y) != 0) {    return false;  }  return true;}  }
class C{  void addFKNameToClearSelf(String foreignKeyName){  List<String> list=getListToClearSelfFK();  if (!list.contains(foreignKeyName)) {    list.add(foreignKeyName);  }}  }
class C{  public MapOptions build(){  MapOptions options=new MapOptions();  options.center=this.center;  options.zoom=this.zoom;  options.minZoom=this.minZoom;  options.layers=this.layers;  options.maxZoom=this.maxZoom;  options.maxBounds=this.maxBounds;  options.dragging=this.dragging;  options.touchZoom=this.touchZoom;  options.scrollWheelZoom=this.scrollWheelZoom;  options.doubleClickZoom=this.doubleClickZoom;  options.boxZoom=this.boxZoom;  options.tap=this.tap;  options.tapTolerance=this.tapTolerance;  options.trackResize=this.trackResize;  options.worldCopyJump=this.worldCopyJump;  options.closePopupOnClick=this.closePopupOnClick;  options.bounceAtZoomLimits=this.bounceAtZoomLimits;  options.keyboard=this.keyboard;  options.keyboardPanOffset=this.keyboardPanOffset;  options.keyboardZoomOffset=this.keyboardPanOffset;  options.inertia=this.inertia;  options.inertiaDeceleration=this.inertiaDeceleration;  options.inertiaMaxSpeed=this.inertiaMaxSpeed;  options.inertiaThreshold=this.inertiaThreshold;  options.zoomControl=this.zoomControl;  options.attributionControl=this.attributionControl;  options.fadeAnimation=this.fadeAnimation;  options.zoomAnimation=this.zoomAnimation;  options.zoomAnimationThreshold=this.zoomAnimationThreshold;  options.markerZoomAnimation=this.markerZoomAnimation;  return options;}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public boolean isFifoSearch(){  return _fifoTemplate && (_uidToOperateBy == null && (_multipleUids == null || _multipleUids.length == 0));}  }
class C{  private boolean hasTextOnlyChildren(Node node){  Node child=node;  if (child == null) {    return false;  }  child=child.getFirstChild();  while (child != null) {    int type=child.getNodeType();    if (type == Node.ENTITY_REFERENCE_NODE) {      return hasTextOnlyChildren(child);    } else     if (type != Node.TEXT_NODE && type != Node.CDATA_SECTION_NODE && type != Node.ENTITY_REFERENCE_NODE) {      return false;    }    child=child.getNextSibling();  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffMental_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201259,skillcaster,skillname);}  }
class C{  public String toString(){  return super.toString() + "[\"" + exportAnnotation+ "\"]";}  }
class C{  public boolean isItemSelected(Object userObject,Symbolizer parentSymbolizer){  boolean selectedItem=false;  if (userObject instanceof Fill) {    selectedItem=hasFill(parentSymbolizer);  } else   if (userObject instanceof Stroke) {    selectedItem=hasStroke(parentSymbolizer);  }  return selectedItem;}  }
class C{  public boolean isAskForPassword(){  return askForPassword;}  }
class C{  public void enqueue(SerialMessage serialMessage){  if (serialMessage == null) {    return;  }  ZWaveNode node=this.getNode(serialMessage.getMessageNode());  if (node != null) {    node.incrementSendCount();    if (node.doesMessageRequireSecurityEncapsulation(serialMessage)) {      ZWaveSecurityCommandClass securityCommandClass=(ZWaveSecurityCommandClass)node.getCommandClass(CommandClass.SECURITY);      securityCommandClass.queueMessageForEncapsulationAndTransmission(serialMessage);      return;    }    if (!node.isListening() && !node.isFrequentlyListening()) {      ZWaveWakeUpCommandClass wakeUpCommandClass=(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP);      if (wakeUpCommandClass != null && !wakeUpCommandClass.processOutgoingWakeupMessage(serialMessage)) {        return;      }    }  }  this.sendQueue.add(serialMessage);  logger.debug("Message queued. Queue length = {}. Queue={}",this.sendQueue.size());}  }
class C{  UnitType(ByteBuffer bb) throws IOException {  this.name=Utilities.getString(bb);  this.start=bb.getInt();  this.count=bb.getInt();}  }
class C{  public XPointerParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  @Override public int addAttribute(QName name,String type,String value){  int index;  if (fLength < SIZE_LIMIT) {    index=name.uri != null && name.uri.length() != 0 ? getIndexFast(name.uri,name.localpart) : getIndexFast(name.rawname);    if (index == -1) {      index=fLength;      if (fLength++ == fAttributes.length) {        Attribute[] attributes=new Attribute[fAttributes.length + 4];        System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);        for (int i=fAttributes.length; i < attributes.length; i++) {          attributes[i]=new Attribute();        }        fAttributes=attributes;      }    }  } else   if (name.uri == null || name.uri.length() == 0 || (index=getIndexFast(name.uri,name.localpart)) == -1) {    if (!fIsTableViewConsistent || fLength == SIZE_LIMIT) {      prepareAndPopulateTableView();      fIsTableViewConsistent=true;    }    int bucket=getTableViewBucket(name.rawname);    if (fAttributeTableViewChainState[bucket] != fLargeCount) {      index=fLength;      if (fLength++ == fAttributes.length) {        Attribute[] attributes=new Attribute[fAttributes.length << 1];        System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);        for (int i=fAttributes.length; i < attributes.length; i++) {          attributes[i]=new Attribute();        }        fAttributes=attributes;      }      fAttributeTableViewChainState[bucket]=fLargeCount;      fAttributes[index].next=null;      fAttributeTableView[bucket]=fAttributes[index];    } else {      Attribute found=fAttributeTableView[bucket];      while (found != null) {        if (found.name.rawname == name.rawname) {          break;        }        found=found.next;      }      if (found == null) {        index=fLength;        if (fLength++ == fAttributes.length) {          Attribute[] attributes=new Attribute[fAttributes.length << 1];          System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);          for (int i=fAttributes.length; i < attributes.length; i++) {            attributes[i]=new Attribute();          }          fAttributes=attributes;        }        fAttributes[index].next=fAttributeTableView[bucket];        fAttributeTableView[bucket]=fAttributes[index];      } else {        index=getIndexFast(name.rawname);      }    }  }  Attribute attribute=fAttributes[index];  attribute.name.setValues(name);  attribute.type=type;  attribute.value=value;  attribute.nonNormalizedValue=value;  attribute.specified=false;  attribute.augs.removeAllItems();  return index;}  }
class C{  private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {  file=new File(dis.readUTF());}  }
class C{  @Deprecated public void initialiseVerticalStepperForm(String[] stepsTitles,int colorPrimary,int colorPrimaryDark,VerticalStepperForm verticalStepperForm,Activity activity){  this.alphaOfDisabledElements=0.25f;  this.buttonTextColor=Color.rgb(255,255,255);  this.buttonPressedTextColor=Color.rgb(255,255,255);  this.stepNumberTextColor=Color.rgb(255,255,255);  this.stepTitleTextColor=Color.rgb(33,33,33);  this.stepSubtitleTextColor=Color.rgb(162,162,162);  this.stepNumberBackgroundColor=colorPrimary;  this.buttonBackgroundColor=colorPrimary;  this.buttonPressedBackgroundColor=colorPrimaryDark;  this.errorMessageTextColor=Color.rgb(175,18,18);  this.displayBottomNavigation=true;  this.materialDesignInDisabledSteps=false;  this.hideKeyboard=true;  this.showVerticalLineWhenStepsAreCollapsed=false;  this.verticalStepperFormImplementation=verticalStepperForm;  this.activity=activity;  initStepperForm(stepsTitles,null);}  }
class C{  @Override protected void onStartLoading(){  if (mData != null) {    deliverResult(mData);  }  if (takeContentChanged() || mData == null) {    forceLoad();  }}  }
class C{  void close(){  queryExecutor.submit(null);}  }
class C{  public void makeUniqueLocalNames(){  if (options.standard_local_names()) {    LocalNameStandardizer.v().transform(body);    return;  }  Set<String> localNames=new HashSet<String>();  Iterator<Local> localsIt=body.getLocals().iterator();  while (localsIt.hasNext()) {    Local local=localsIt.next();    String localName=local.getName();    if (localNames.contains(localName)) {      String uniqueName=makeUniqueLocalName(localName,localNames);      local.setName(uniqueName);      localNames.add(uniqueName);    } else     localNames.add(localName);  }}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public boolean isMatchCase(){  return matchCase;}  }
class C{  private final boolean peekReportEntity(){  return fPEReport[fPEDepth - 1];}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new LinkedHashMap<K,V>(this);}  }
class C{  public AuthCheckPhoneQuery checkPhone(String phone,String clientSecret){  return new AuthCheckPhoneQuery(getClient(),phone,clientSecret);}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  public void deny(PermissionFlag flag){  generalPermissions.put(flag,getDefaultMessage(flag));}  }
class C{  private Bitmap compress(String imagePath,int width,int height){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(imagePath,options);  int outH=options.outHeight;  int outW=options.outWidth;  int inSampleSize=1;  if (outH > height || outW > width) {    int halfH=outH / 2;    int halfW=outW / 2;    while ((halfH / inSampleSize) > height && (halfW / inSampleSize) > width) {      inSampleSize*=2;    }  }  options.inSampleSize=inSampleSize;  options.inJustDecodeBounds=false;  int heightRatio=(int)Math.ceil(options.outHeight / (float)height);  int widthRatio=(int)Math.ceil(options.outWidth / (float)width);  if (heightRatio > 1 || widthRatio > 1) {    if (heightRatio > widthRatio) {      options.inSampleSize=heightRatio;    } else {      options.inSampleSize=widthRatio;    }  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(imagePath,options);}  }
class C{  public char charOf(int offset){  return charAt(pos + offset);}  }
class C{  public static int calcTextWidth(Paint paint,String demoText){  return (int)paint.measureText(demoText);}  }
class C{  @Override public boolean layoutDependsOn(CoordinatorLayout parent,V child,View dependency){  if (dependency instanceof FreedomImageView) {    scrollTrigger=dependency.getMeasuredHeight() - DisplayUtils.getStatusBarHeight(parent.getContext().getResources());    return true;  }  return false;}  }
class C{  public IntIterator rows(){  return new RowIterator(false);}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.xmlDecl(version,encoding,standalone,augs);  }}  }
class C{  @PostConstruct public void init(){  LOG.info("Initializing Device class cache...");  commonInit();  LOG.info("Device class cache initialization complete.");}  }
class C{  public synchronized void insertText(String inputtype,String outputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext,String outputtext) throws SQLException {  if (inputtype == null || outputtype == null || locale == null || voice == null || inputtext == null || outputtext == null) {    throw new NullPointerException("Null argument");  }  if (lookupText(inputtype,outputtype,locale,voice,outputparams,style,effects,inputtext) != null) {    return;  }  String query="INSERT INTO MARYCACHE (inputtype, outputtype, locale, voice, outputparams, style, effects, inputtext, outputtext) VALUES ('" + inputtype + "','"+ outputtype+ "','"+ locale+ "','"+ voice+ "','"+ outputparams+ "','"+ style+ "','"+ effects+ "',?,?)";  PreparedStatement st=connection.prepareStatement(query);  st.setString(1,inputtext);  st.setString(2,outputtext);  st.executeUpdate();  st.close();}  }
class C{  public void printParameters(){  for (  Entry<String,String[]> entry : getParameterMap().entrySet()) {    System.out.println(entry.getKey() + " " + Arrays.toString(entry.getValue()));  }}  }
class C{  public void mergeConvertedItts(){  Iterator<DivEltype> divIt=mergedItt.getBody().getDiv().iterator();  DivEltype firstDiv=divIt.next();  while (divIt.hasNext()) {    DivEltype d=divIt.next();    firstDiv.getBlockClass().addAll(d.getBlockClass());    divIt.remove();  }  List<StyleEltype> stylesList=mergedItt.getHead().getStyling().getStyle();  convertedItts.stream().skip(1).forEachOrdered(null);  for (int i=1; i < convertedItts.size(); i++) {    TtEltype[] itt=new TtEltype[]{convertedItts.get(i)};    styleRefMap.get(itt[0]).entrySet().stream().forEach(null);    convertedItts.set(i,itt[0]);  }  TtmlTimeConverter mainConverter=new TtmlTimeConverter(mergedItt);  convertedItts.stream().skip(1).forEachOrdered(null);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private void increaseActionCount(Map<String,Integer> eventCounts,Predicate<String> predicate){  eventCounts.forEach(null);}  }
class C{  public static int currentPlatform(){  String os=System.getProperty("os.name");  if (os.startsWith("Mac OS")) {    return PLATFORM_DARWIN;  } else   if (os.startsWith("Windows")) {    return PLATFORM_WINDOWS;  } else   if (os.startsWith("Linux")) {    return PLATFORM_LINUX;  }  return PLATFORM_UNKNOWN;}  }
class C{  public int GetEnemyCount(){  return this.enemy_ToTal_Cnt;}  }
class C{  public void addSequenceNumber(GSEventRegistration registration){  if (_sequenceNumbers == null)   _sequenceNumbers=new HashMap<Uuid,Long>();  _sequenceNumbers.put(registration.getSpaceUID(),registration.getSequenceNumber());}  }
class C{  @Override public void onMessageReceived(MessageEvent messageEvent){  Bundle data=new Bundle();  data.putString(MessageHandler.KEY_PATH,messageEvent.getPath());  data.putString(MessageHandler.KEY_SOURCE_NODE_ID,messageEvent.getSourceNodeId());  data.putByteArray(MessageHandler.KEY_DATA,messageEvent.getData());  Message message=new Message();  message.setData(data);  notifyMessageHandlers(message);}  }
class C{  private MetricField convertToSketchEstimateIfNeeded(MetricField originalSourceMetric){  if (originalSourceMetric instanceof SketchAggregation) {    return FieldConverterSupplier.sketchConverter.asSketchEstimate((SketchAggregation)originalSourceMetric);  }  return originalSourceMetric;}  }
class C{  @Override public boolean hasFeature(String feature,String version){  boolean anyVersion=version == null || version.length() == 0;  if ((feature.equalsIgnoreCase("+XPath")) && (anyVersion || version.equals("3.0"))) {    try {      Class xpathClass=ObjectFactory.findProviderClass("org.apache.xpath.domapi.XPathEvaluatorImpl",ObjectFactory.findClassLoader(),true);      Class interfaces[]=xpathClass.getInterfaces();      for (int i=0; i < interfaces.length; i++) {        if (interfaces[i].getName().equals("org.w3c.dom.xpath.XPathEvaluator")) {          return true;        }      }    } catch (    Exception e) {      return false;    }    return true;  }  if (feature.startsWith("+")) {    feature=feature.substring(1);  }  return (feature.equalsIgnoreCase("Core") && (anyVersion || version.equals("1.0") || version.equals("2.0")|| version.equals("3.0"))) || (feature.equalsIgnoreCase("XML") && (anyVersion || version.equals("1.0") || version.equals("2.0")|| version.equals("3.0"))) || (feature.equalsIgnoreCase("XMLVersion") && (anyVersion || version.equals("1.0") || version.equals("1.1")))|| (feature.equalsIgnoreCase("LS") && (anyVersion || version.equals("3.0")))|| (feature.equalsIgnoreCase("ElementTraversal") && (anyVersion || version.equals("1.0")));}  }
class C{  private void parseParameters(String parameters){  Log.v("HttpHeader","HttpAuthHeader.parseParameters():" + " parameters: " + parameters);  if (parameters != null) {    int i;    do {      i=parameters.indexOf(',');      if (i < 0) {        parseParameter(parameters);      } else {        parseParameter(parameters.substring(0,i));        parameters=parameters.substring(i + 1);      }    } while (i >= 0);  }}  }
class C{  private void registerDataSources(){  logger.debug("Data sources supported:");  addDataSource(new EsriFileGDB());  addDataSource(new EsriOracleArcSDE());}  }
class C{  public LeadsGetStatsQuery dateStart(String value){  return unsafeParam("date_start",value);}  }
class C{  public void scrollOnce(){  if (null != mAdapter && mAdapter.getCount() > 1) {    int totalCount=mAdapter.getCount();    int currentItem=getCurrentItem();    int nextItem=currentItem % totalCount + 1;    setCurrentItem(nextItem,true);  } else {    stopAutoScroll();  }}  }
class C{  private Stack<CalculationToken> tokenize(String expression) throws ParsingException {  if (expression == null) {    throw new ParsingException("Expression is Null");  }  if (expression.isEmpty()) {    throw new ParsingException("Expression is Empty");  }  Stack<CalculationToken> calculationTokenStack=new Stack<>();  Character prevToken='\0';  int bracketSum=0;  for (expressionIterator=0; expressionIterator < expression.length(); ++expressionIterator) {    Character c=expression.charAt(expressionIterator);switch (c) {case ' ':case '\n':case '\t':      continue;case '.':    throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + " . ");default :  break;}if (!cIsArithmetic(c) && c != '(' && c != ')' && !Character.isDigit(c)) {throw new ParsingException("Unexpected symbol");}if (Character.isDigit(c) && (prevToken == 'n' || prevToken == ')')) {throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + " number in unexpected place ");}if (Character.isDigit(c)) {Double number=readDoubleNumberFromExpression(expression);calculationTokenStack.push(new DoubleToken(number));prevToken='n';continue;}if (prevToken == 'n' && c == '(') {throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + " number in unexpected place ");}if ((prevToken == '\0' || prevToken == '(') && (c != '-' && c != '(')) {throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + c);}if (cIsArithmetic(prevToken) && cIsArithmetic(c) && c != '-') {throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + prevToken + c);}calculationTokenStack.push(new OperationToken(c));if (c == '(') {++bracketSum;} else if (c == ')') {--bracketSum;}prevToken=c;}if (cIsArithmetic(prevToken)) {throw new ParsingException("Expression ends with an unfinished arithmetic expression");}if (bracketSum != 0) {throw new ParsingException("Expression contains a Faulty Bracket Sequence");}return calculationTokenStack;}  }
class C{  public void authorLogout(){  logout(authorUrl);}  }
class C{  public DragForce(){  this(DEFAULT_DRAG_COEFF);}  }
class C{  public void collapseToTop(){  getCollapsedIds().clear();  if (getTree().getRoot() != null) {    for (Edge e=getTree().getRoot().getFirstOutEdge(); e != null; e=getTree().getRoot().getNextOutEdge(e)) {      getCollapsedIds().add((Integer)e.getTarget().getInfo());    }    updateTree();  }}  }
class C{  public void testParentWithSameOtherTimestamp(){  FileDirectory para4=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("PARA4.0"));  assertEquals("projects",para4.getParentDirectoryWithSameOtherTimestamp().getName());  FileDirectory src=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("src"));  assertNull(src.getParentDirectoryWithSameOtherTimestamp());  FileDirectory temp=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("temp"));  assertNull(temp.getParentDirectoryWithSameOtherTimestamp());  FileDirectory system32=FileDirectoryFinder.findOne(FileDirectoryFinder.name().eq("system32"));  assertNull(system32.getParentDirectoryWithSameOtherTimestamp());}  }
class C{  public static void w(String tag,String msg){  if (LOG_ENABLE) {    Log.w(tag,buildMsg(msg));  }}  }
class C{  public int indexOf(Split split){  Integer index=(Integer)split2index.get(split);  if (index == null)   return -1; else   return index;}  }
class C{  public Buffer(int size,int level,RandomGenerator randomGenerator){  this.size=size;  data=new double[size];  this.level=level;  this.randomGenerator=randomGenerator;  computeBlockSize();}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private Object[] next() throws CarbonSortKeyAndGroupByException {  return getSortedRecordFromFile();}  }
class C{  public DistributedLogClientBuilder periodicDumpOwnershipCacheIntervalMs(long intervalMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicDumpOwnershipCacheIntervalMs(intervalMs);  return newBuilder;}  }
class C{  private boolean checkFingerPrintAvailability(@NonNull Context context){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    FingerprintManagerCompat fingerprintManager=FingerprintManagerCompat.from(context);    if (!fingerprintManager.isHardwareDetected()) {      mCallback.onNoFingerPrintHardwareFound();      return false;    } else     if (!fingerprintManager.hasEnrolledFingerprints()) {      mCallback.onNoFingerPrintRegistered();      return false;    }    return true;  } else {    mCallback.onBelowMarshmallow();    return false;  }}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public boolean isApplicable(){  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0; else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;}  }
class C{  BinarySearchTreeNode<E> removeMinimum(BinarySearchTreeNode<E> node){  node=this.getMinimum(node);  if (node == null)   return null;  if (node == this.root) {    this.root=node.right;  } else   if (node.parent.right == node) {    node.parent.right=node.right;  } else {    node.parent.left=node.right;  }  this.size--;  return node;}  }
class C{  public ContentletQuery addHost(String hostIdentifier){  query.append(" +conhost:" + hostIdentifier);  return this;}  }
class C{  @SuppressLint("InflateParams") @Override public Dialog onCreateDialog(Bundle savedInstanceState){  Mysplash.getInstance().setActivityInBackstage(true);  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_path,null,false);  initWidget(view);  return new AlertDialog.Builder(getActivity()).setView(view).create();}  }
class C{  public static ULong valueOf(long value){  return new ULong(value);}  }
class C{  public void calculateDimensions(Paint labelpaint,ViewPortHandler viewPortHandler){  mTextWidthMax=getMaximumEntryWidth(labelpaint);  mTextHeightMax=getMaximumEntryHeight(labelpaint);switch (mOrientation) {case VERTICAL:{      float maxWidth=0f, maxHeight=0f, width=0f;      float labelLineHeight=Utils.getLineHeight(labelpaint);      final int count=mLabels.length;      boolean wasStacked=false;      for (int i=0; i < count; i++) {        boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;        if (!wasStacked)         width=0.f;        if (drawingForm) {          if (wasStacked)           width+=mStackSpace;          width+=mFormSize;        }        if (mLabels[i] != null) {          if (drawingForm && !wasStacked)           width+=mFormToTextSpace; else           if (wasStacked) {            maxWidth=Math.max(maxWidth,width);            maxHeight+=labelLineHeight + mYEntrySpace;            width=0.f;            wasStacked=false;          }          width+=Utils.calcTextWidth(labelpaint,mLabels[i]);          if (i < count - 1)           maxHeight+=labelLineHeight + mYEntrySpace;        } else {          wasStacked=true;          width+=mFormSize;          if (i < count - 1)           width+=mStackSpace;        }        maxWidth=Math.max(maxWidth,width);      }      mNeededWidth=maxWidth;      mNeededHeight=maxHeight;      break;    }case HORIZONTAL:{    int labelCount=mLabels.length;    float labelLineHeight=Utils.getLineHeight(labelpaint);    float labelLineSpacing=Utils.getLineSpacing(labelpaint) + mYEntrySpace;    float contentWidth=viewPortHandler.contentWidth() * mMaxSizePercent;    float maxLineWidth=0.f;    float currentLineWidth=0.f;    float requiredWidth=0.f;    int stackedStartIndex=-1;    mCalculatedLabelBreakPoints.clear();    mCalculatedLabelSizes.clear();    mCalculatedLineSizes.clear();    for (int i=0; i < labelCount; i++) {      boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;      mCalculatedLabelBreakPoints.add(false);      if (stackedStartIndex == -1) {        requiredWidth=0.f;      } else {        requiredWidth+=mStackSpace;      }      if (mLabels[i] != null) {        mCalculatedLabelSizes.add(Utils.calcTextSize(labelpaint,mLabels[i]));        requiredWidth+=drawingForm ? mFormToTextSpace + mFormSize : 0.f;        requiredWidth+=mCalculatedLabelSizes.get(i).width;      } else {        mCalculatedLabelSizes.add(FSize.getInstance(0.f,0.f));        requiredWidth+=drawingForm ? mFormSize : 0.f;        if (stackedStartIndex == -1) {          stackedStartIndex=i;        }      }      if (mLabels[i] != null || i == labelCount - 1) {        float requiredSpacing=currentLineWidth == 0.f ? 0.f : mXEntrySpace;        if (!mWordWrapEnabled || currentLineWidth == 0.f || (contentWidth - currentLineWidth >= requiredSpacing + requiredWidth)) {          currentLineWidth+=requiredSpacing + requiredWidth;        } else {          mCalculatedLineSizes.add(FSize.getInstance(currentLineWidth,labelLineHeight));          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);          mCalculatedLabelBreakPoints.set(stackedStartIndex > -1 ? stackedStartIndex : i,true);          currentLineWidth=requiredWidth;        }        if (i == labelCount - 1) {          mCalculatedLineSizes.add(FSize.getInstance(currentLineWidth,labelLineHeight));          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);        }      }      stackedStartIndex=mLabels[i] != null ? -1 : stackedStartIndex;    }    mNeededWidth=maxLineWidth;    mNeededHeight=labelLineHeight * (float)(mCalculatedLineSizes.size()) + labelLineSpacing * (float)(mCalculatedLineSizes.size() == 0 ? 0 : (mCalculatedLineSizes.size() - 1));    break;  }}mNeededHeight+=mYOffset;mNeededWidth+=mXOffset;}  }
class C{  public Object createProxy(String implem) throws ClassNotFoundException, LuaException {synchronized (L) {    if (!isTable())     throw new LuaException("Invalid Object. Must be Table.");    StringTokenizer st=new StringTokenizer(implem,",");    Class[] interfaces=new Class[st.countTokens()];    ClassLoader loader=ModuleContext.getInstance().getBaseClassLoader();    for (int i=0; st.hasMoreTokens(); i++) {      if (loader != null) {        interfaces[i]=loader.loadClass(st.nextToken());      } else {        interfaces[i]=Class.forName(st.nextToken());      }    }    InvocationHandler handler=new LuaInvocationHandler(this);    return Proxy.newProxyInstance(this.getClass().getClassLoader(),interfaces,handler);  }}  }
class C{  public Zludpp(Zmat A) throws JampackException {  int i, j, k, nr, nc;  double absi, mx, t;  Zmat T;  Z Tk[];  A.getProperties();  nr=A.nr;  nrl=nr;  nc=A.nc;  ncl=Math.min(A.nr,A.nc);  nru=ncl;  ncu=nc;  L=new Zltmat(nrl,ncl);  U=new Zutmat(nru,ncu);  pvt=new int[ncl];  if (nrl >= ncu)   T=L; else   T=U;  for (i=0; i < nr; i++) {    for (j=0; j < nc; j++) {      T.re[i][j]=A.re[i][j];      T.im[i][j]=A.im[i][j];    }  }  Tk=new Z[nrl];  for (k=0; k < Math.min(nr,nc); k++) {    mx=0.;    pvt[k]=k;    for (i=k; i < nr; i++) {      Tk[i]=T.get0(i,k);      if ((absi=Z.abs(Tk[i])) > mx) {        pvt[k]=i;        mx=absi;      }    }    if (mx == 0.0)     continue;    Tk[k].Exch(Tk[pvt[k]]);    for (j=0; j < nc; j++) {      t=T.re[k][j];      T.re[k][j]=T.re[pvt[k]][j];      T.re[pvt[k]][j]=t;      t=T.im[k][j];      T.im[k][j]=T.im[pvt[k]][j];      T.im[pvt[k]][j]=t;    }    for (i=k + 1; i < nr; i++) {      T.put0(i,k,Tk[i].Div(Tk[i],Tk[k]));      for (j=k + 1; j < nc; j++) {        T.re[i][j]=T.re[i][j] - T.re[i][k] * T.re[k][j] + T.im[i][k] * T.im[k][j];        T.im[i][j]=T.im[i][j] - T.im[i][k] * T.re[k][j] - T.re[i][k] * T.im[k][j];      }    }  }  if (nr >= nc)   for (i=0; i < nc; i++) {    for (j=0; j < nc; j++)     if (i > j) {      U.re[i][j]=0.0;      U.im[i][j]=0.0;    } else {      U.re[i][j]=T.re[i][j];      U.im[i][j]=T.im[i][j];      L.re[i][j]=0.0;      L.im[i][j]=0.0;    }    L.re[i][i]=1.0;    L.im[i][i]=0.0;  } else   for (i=0; i < nr; i++) {    for (j=0; j < nr; j++)     if (i > j) {      L.re[i][j]=T.re[i][j];      L.im[i][j]=T.im[i][j];      U.re[i][j]=0.0;      U.im[i][j]=0.0;    } else {      L.re[i][j]=0.0;      L.im[i][j]=0.0;    }    L.re[i][i]=1.0;    L.im[i][i]=0.0;  }}  }
class C{  public UseItemReviveResponse.Result useRevive(ItemId itemId) throws LoginFailedException, RemoteServerException {  Item item=api.getInventories().getItemBag().getItem(itemId);  if (!item.isRevive() || item.getCount() < 1 || !isFainted())   return UseItemReviveResponse.Result.ERROR_CANNOT_USE;  UseItemReviveMessageOuterClass.UseItemReviveMessage reqMsg=UseItemReviveMessageOuterClass.UseItemReviveMessage.newBuilder().setItemId(itemId).setPokemonId(getId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.USE_ITEM_REVIVE,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  UseItemReviveResponse response;  try {    response=UseItemReviveResponse.parseFrom(serverRequest.getData());    if (response.getResult() == UseItemReviveResponse.Result.SUCCESS) {      setStamina(response.getStamina());    }    return response.getResult();  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }}  }
class C{  public boolean keyReleased(@NotNull KeyEvent event){  return false;}  }
class C{  public static void returnSelector(Selector s){synchronized (selectors) {    selectors.push(s);    if (selectors.size() == 1)     selectors.notify();  }}  }
class C{  protected void splitLU(FieldMatrix<Fraction> lu,Fraction[][] lowerData,Fraction[][] upperData){  if (!lu.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,lu.getRowDimension(),lu.getColumnDimension());  }  if (lowerData.length != lowerData[0].length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lowerData[0].length);  }  if (upperData.length != upperData[0].length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,upperData.length,upperData[0].length);  }  if (lowerData.length != upperData.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,upperData.length);  }  if (lowerData.length != lu.getRowDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lu.getRowDimension());  }  int n=lu.getRowDimension();  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (j < i) {        lowerData[i][j]=lu.getEntry(i,j);        upperData[i][j]=Fraction.ZERO;      } else       if (i == j) {        lowerData[i][j]=Fraction.ONE;        upperData[i][j]=lu.getEntry(i,j);      } else {        lowerData[i][j]=Fraction.ZERO;        upperData[i][j]=lu.getEntry(i,j);      }    }  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public void invalidate(final SourceDataTag sourceDataTag,final ValueUpdate update,final SourceDataTagQuality newSDQuality){  try {    FilterType filterType;    Object newValueCasted=TypeConverter.cast(update.getValue(),sourceDataTag.getDataType());    update.setValue(newValueCasted);    filterType=this.dataTagValueFilter.isCandidateForFiltering(sourceDataTag,update,newSDQuality);    this.equipmentLogger.debug("sendInvalidTag - Filter Type: " + filterType);    if (filterType == FilterType.NO_FILTERING) {      sendValueWithTimeDeadbandCheck(sourceDataTag,update,newSDQuality);    } else {      if (this.equipmentLogger.isDebugEnabled()) {        StringBuilder msgBuf=new StringBuilder();        msgBuf.append("\tthe tag [" + sourceDataTag.getId() + "] has already been invalidated with quality code : "+ newSDQuality.getQualityCode());        msgBuf.append(" at " + sourceDataTag.getCurrentValue().getTimestamp());        msgBuf.append(" The DAQ has not received any values with different quality since then, Hence, the");        msgBuf.append(" invalidation procedure will be canceled this time");        this.equipmentLogger.debug(msgBuf.toString());      }      if (newValueCasted != null) {        this.equipmentLogger.debug("sendInvalidTag - sending an invalid tag [" + sourceDataTag.getId() + "] to the statistics module");        this.equipmentSenderFilterModule.sendToFilterModule(sourceDataTag,update,newSDQuality,filterType.getNumber());      } else       if (this.equipmentLogger.isDebugEnabled()) {        this.equipmentLogger.debug("sendInvalidTag - value has still not been initialised: not sending the invalid tag [" + sourceDataTag.getId() + "] to the statistics module");      }    }  } catch (  Exception ex) {    this.equipmentLogger.error("sendInvalidTag - Unexpected exception caught for tag " + sourceDataTag.getId() + ", "+ ex.getStackTrace(),ex);  }  this.equipmentLogger.debug("sendInvalidTag - leaving sendInvalidTag()");}  }
class C{  public int append_file(String group_name,String appender_filename,long file_size,UploadCallback callback) throws IOException, MyException {  return this.do_append_file(group_name,appender_filename,file_size,callback);}  }
class C{  public IncognitoNewTabPage(Activity activity){  mActivity=activity;  mTitle=activity.getResources().getString(R.string.button_new_tab);  mBackgroundColor=ApiCompatibilityUtils.getColor(activity.getResources(),R.color.ntp_bg_incognito);  mThemeColor=ApiCompatibilityUtils.getColor(activity.getResources(),R.color.incognito_primary_color);  LayoutInflater inflater=LayoutInflater.from(activity);  mIncognitoNewTabPageView=(IncognitoNewTabPageView)inflater.inflate(R.layout.new_tab_page_incognito,null);  mIncognitoNewTabPageView.initialize(mIncognitoNewTabPageManager);  if (OfflinePageBridge.isEnabled()) {    TextView newTabIncognitoMessage=(TextView)mIncognitoNewTabPageView.findViewById(R.id.new_tab_incognito_message);    newTabIncognitoMessage.setText(activity.getResources().getString(R.string.offline_pages_new_tab_incognito_message));  }}  }
class C{  public ZWaveChimneyFanCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  private int initQRStep(int il,final int iu,final ShiftInfo shift,double[] hVec){  int im=iu - 2;  while (im >= il) {    final double z=matrixT[im][im];    final double r=shift.x - z;    double s=shift.y - z;    hVec[0]=(r * s - shift.w) / matrixT[im + 1][im] + matrixT[im][im + 1];    hVec[1]=matrixT[im + 1][im + 1] - z - r- s;    hVec[2]=matrixT[im + 2][im + 1];    if (im == il) {      break;    }    final double lhs=FastMath.abs(matrixT[im][im - 1]) * (FastMath.abs(hVec[1]) + FastMath.abs(hVec[2]));    final double rhs=FastMath.abs(hVec[0]) * (FastMath.abs(matrixT[im - 1][im - 1]) + FastMath.abs(z) + FastMath.abs(matrixT[im + 1][im + 1]));    if (lhs < epsilon * rhs) {      break;    }    im--;  }  return im;}  }
class C{  private static String expandPath(String path){  final String MARY_BASE="MARY_BASE";  StringBuilder buf=null;  if (path.startsWith(MARY_BASE)) {    buf=new StringBuilder(maryBase());    buf.append(path.substring(MARY_BASE.length()));  } else {    buf=new StringBuilder(path);  }  if (File.separator.equals("/")) {    int i=-1;    while ((i=buf.indexOf("\\")) != -1)     buf.replace(i,i + 1,"/");  } else   if (File.separator.equals("\\")) {    int i=-1;    while ((i=buf.indexOf("/")) != -1)     buf.replace(i,i + 1,"\\");  } else {    throw new Error("Unexpected File.separator: `" + File.separator + "'");  }  return buf.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_ATTACK(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1250000,value0,num2,value1);}  }
class C{  public final void removePropertyChangeListener(PropertyChangeListener listener){  getChangeSupport().removePropertyChangeListener(listener);}  }
class C{  boolean waitForState(Processor p,int state){synchronized (waitSync) {    try {      while (p.getState() < state && stateTransitionOK)       waitSync.wait();    } catch (    Exception e) {    }  }  return stateTransitionOK;}  }
class C{  public MarketGetCommentsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected void onMeasureChild(View child,int position,int widthMeasureSpec,int heightMeasureSpec){  child.measure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public void testDeployIntermediateVersionWithoutMessageStartEvent(){  String deploymentId1=deployStartMessageTestProcess();  assertEquals(1,getAllEventSubscriptions().size());  assertEquals(0,runtimeService.createProcessInstanceQuery().count());  runtimeService.startProcessInstanceByMessageAndTenantId("myStartMessage",TENANT_ID);  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(1);  String deploymentId2=deployProcessWithoutEvents();  assertEquals(0,getAllEventSubscriptions().size());  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  try {    runtimeService.startProcessInstanceByMessageAndTenantId("myStartMessage",TENANT_ID);    fail();  } catch (  Exception e) {  }  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(0);  String deploymentId3=deployStartMessageTestProcess();  assertEquals(1,getAllEventSubscriptions().size());  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  runtimeService.startProcessInstanceByMessageAndTenantId("myStartMessage",TENANT_ID);  assertEquals(2,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(1);  List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();  assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());  cleanup(deploymentId1,deploymentId2,deploymentId3);}  }
class C{  @Ignore("go/studio-builder/builders/ubuntu-studio-master-dev-uitests/builds/257") @Test public void testRenameTheme() throws IOException {  guiTest.importSimpleApplication();  IdeFrameFixture ideFrame=guiTest.ideFrame();  ThemeEditorFixture themeEditor=ThemeEditorGuiTestUtils.openThemeEditor(ideFrame);  final JComboBoxFixture themesComboBox=themeEditor.getThemesComboBox();  themesComboBox.selectItem("Rename AppTheme");  RenameRefactoringDialogFixture renameRefactoringDialog=RenameRefactoringDialogFixture.find(guiTest.robot());  renameRefactoringDialog.setNewName("NewAppTheme").clickRefactor();  themeEditor.waitForThemeSelection("NewAppTheme");  themesComboBox.requireSelection("NewAppTheme");  List<String> themeList=themeEditor.getThemesList();  assertThat(themeList).hasSize(9);  assertThat(themeList.get(0)).isEqualTo("NewAppTheme");  assertThat(themeList.get(8)).isEqualTo("Rename NewAppTheme");  guiTest.robot().waitForIdle();  themesComboBox.selectItem("Theme.AppCompat.NoActionBar");  themeList=themeEditor.getThemesList();  assertThat(themeList).hasSize(8);  assertThat(themeList.get(0)).isEqualTo("NewAppTheme");  assertThat(themeList.get(3)).isEqualTo("Theme.AppCompat.Light.NoActionBar");  assertThat(themeList.get(4)).isEqualTo("Theme.AppCompat.NoActionBar");  assertThat(themeList.get(5)).isEqualTo("Show all themes");  assertThat(themeList.get(7)).isEqualTo("Create New Theme");  ideFrame.invokeMenuPath("Window","Editor Tabs","Select Previous Tab");  EditorFixture editor=ideFrame.getEditor();  assertThat(editor.getCurrentFileContents()).doesNotContain("name=\"AppTheme");  editor.moveBetween("","name=\"NewAppTheme");  assertThat(editor.getCurrentLine().trim()).isEqualTo("<style name=\"NewAppTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">");  ideFrame.invokeMenuPath("Window","Editor Tabs","Select Next Tab");  themesComboBox.selectItem("NewAppTheme");  ideFrame.invokeMenuPath("Edit","Undo Renaming attribute value AppTh...");  ideFrame.findMessageDialog("Undo").clickOk();  themeEditor.waitForThemeSelection("AppTheme");  themeEditor.focus();  ideFrame.invokeMenuPath("Window","Editor Tabs","Select Previous Tab");  assertThat(editor.getCurrentFileContents()).doesNotContain("name=\"NewAppTheme");  editor.moveBetween("","name=\"AppTheme");  assertThat(editor.getCurrentLine().trim()).isEqualTo("<style name=\"AppTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">");}  }
class C{  public void reverse(){  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;  final int size=animators.size();  for (int i=0; i < size; i++) {    final Animator animator=animators.get(i);    if (canReverse(animator)) {      reverse(animator);    } else {      Log.w(LOGTAG,"AnimatedVectorDrawable can't reverse()");    }  }}  }
class C{  private void markReachableMethods(){  int ans=0;  CgEdge p;  for (int i=0; i < n_func; ++i)   vis_cg[i]=0;  queue_cg.clear();  queue_cg.add(Constants.SUPER_MAIN);  vis_cg[Constants.SUPER_MAIN]=1;  while (queue_cg.size() > 0) {    int s=queue_cg.removeFirst();    p=call_graph[s];    while (p != null) {      int t=p.t;      if (vis_cg[t] == 0) {        queue_cg.add(t);        vis_cg[t]=1;        ++ans;      }      p=p.next;    }  }  n_reach_methods=ans;  ans=0;  for (int i=1; i < n_func; ++i) {    SootMethod sm=int2func.get(i);    if (vis_cg[i] == 0) {      func2int.remove(sm);      int2func.remove(i);    } else {      if (!sm.isJavaLibraryMethod())       ++ans;    }  }  n_reach_user_methods=ans;}  }
class C{  public ImageFixture(){}  }
class C{  public static void zipDir(File zipDirectory,File output){  zipDir(zipDirectory.getAbsolutePath(),output.getAbsolutePath());}  }
class C{  private void exportToYSLD(){  SLDWriterInterface ysldWriter=SLDWriterFactory.createWriter(SLDOutputFormatEnum.YSLD);  for (  SLDDataInterface sldData : sldDataList) {    StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);    String layerName=sldData.getLayerNameWithOutSuffix();    if (sld != null) {      String sldString=ysldWriter.encodeSLD(sldData.getResourceLocator(),sld);      String ysldFilename=layerName + "." + YSLDTool.YSLD_FILE_EXTENSION;      String destinationFolder=sldData.getSLDFile().getParent();      File fileToSave=new File(destinationFolder,ysldFilename);      if (fileToSave.exists()) {        ConsoleManager.getInstance().error(this,Localisation.getField(YSLDTool.class,"YSLDTool.destinationAlreadyExists") + " " + ysldFilename);      } else {        ConsoleManager.getInstance().information(this,Localisation.getField(YSLDTool.class,"YSLDTool.exportToYSLDMsg") + " " + ysldFilename);        BufferedWriter out;        try {          out=new BufferedWriter(new FileWriter(fileToSave));          out.write(sldString);          out.close();        } catch (        IOException e) {          ConsoleManager.getInstance().exception(this,e);        }      }    }  }}  }
class C{  Augmentations handleEndElement(QName element,Augmentations augs){  if (DEBUG) {    System.out.println("==>handleEndElement:" + element);  }  if (fSkipValidationDepth >= 0) {    if (fSkipValidationDepth == fElementDepth && fSkipValidationDepth > 0) {      fNFullValidationDepth=fSkipValidationDepth - 1;      fSkipValidationDepth=-1;      fElementDepth--;      fSubElement=fSubElementStack[fElementDepth];      fCurrentElemDecl=fElemDeclStack[fElementDepth];      fNil=fNilStack[fElementDepth];      fNotation=fNotationStack[fElementDepth];      fCurrentType=fTypeStack[fElementDepth];      fCurrentCM=fCMStack[fElementDepth];      fStrictAssess=fStrictAssessStack[fElementDepth];      fCurrCMState=fCMStateStack[fElementDepth];      fSawText=fSawTextStack[fElementDepth];      fSawCharacters=fStringContent[fElementDepth];    } else {      fElementDepth--;    }    if (fElementDepth == -1 && fFullChecking && !fUseGrammarPoolOnly) {      XSConstraints.fullSchemaChecking(fGrammarBucket,fSubGroupHandler,fCMBuilder,fXSIErrorReporter.fErrorReporter);    }    if (fAugPSVI)     augs=getEmptyAugs(augs);    return augs;  }  processElementContent(element);  if (fIDCChecking) {    int oldCount=fMatcherStack.getMatcherCount();    for (int i=oldCount - 1; i >= 0; i--) {      XPathMatcher matcher=fMatcherStack.getMatcherAt(i);      if (fCurrentElemDecl == null) {        matcher.endElement(element,fCurrentType,false,fValidatedInfo.actualValue,fValidatedInfo.actualValueType,fValidatedInfo.itemValueTypes);      } else {        matcher.endElement(element,fCurrentType,fCurrentElemDecl.getNillable(),fDefaultValue == null ? fValidatedInfo.actualValue : fCurrentElemDecl.fDefault.actualValue,fDefaultValue == null ? fValidatedInfo.actualValueType : fCurrentElemDecl.fDefault.actualValueType,fDefaultValue == null ? fValidatedInfo.itemValueTypes : fCurrentElemDecl.fDefault.itemValueTypes);      }    }    if (fMatcherStack.size() > 0) {      fMatcherStack.popContext();    }    int newCount=fMatcherStack.getMatcherCount();    for (int i=oldCount - 1; i >= newCount; i--) {      XPathMatcher matcher=fMatcherStack.getMatcherAt(i);      if (matcher instanceof Selector.Matcher) {        Selector.Matcher selMatcher=(Selector.Matcher)matcher;        IdentityConstraint id;        if ((id=selMatcher.getIdentityConstraint()) != null && id.getCategory() != XSIDCDefinition.IC_KEYREF) {          fValueStoreCache.transplant(id,selMatcher.getInitialDepth());        }      }    }    for (int i=oldCount - 1; i >= newCount; i--) {      XPathMatcher matcher=fMatcherStack.getMatcherAt(i);      if (matcher instanceof Selector.Matcher) {        Selector.Matcher selMatcher=(Selector.Matcher)matcher;        IdentityConstraint id;        if ((id=selMatcher.getIdentityConstraint()) != null && id.getCategory() == XSIDCDefinition.IC_KEYREF) {          ValueStoreBase values=fValueStoreCache.getValueStoreFor(id,selMatcher.getInitialDepth());          if (values != null)           values.endDocumentFragment();        }      }    }    fValueStoreCache.endElement();  }  if (fElementDepth < fIgnoreXSITypeDepth) {    fIgnoreXSITypeDepth--;  }  SchemaGrammar[] grammars=null;  if (fElementDepth == 0) {    String invIdRef=fValidationState.checkIDRefID();    fValidationState.resetIDTables();    if (invIdRef != null) {      reportSchemaError("cvc-id.1",new Object[]{invIdRef});    }    if (fFullChecking && !fUseGrammarPoolOnly) {      XSConstraints.fullSchemaChecking(fGrammarBucket,fSubGroupHandler,fCMBuilder,fXSIErrorReporter.fErrorReporter);    }    grammars=fGrammarBucket.getGrammars();    if (fGrammarPool != null) {      for (int k=0; k < grammars.length; k++) {        grammars[k].setImmutable(true);      }      fGrammarPool.cacheGrammars(XMLGrammarDescription.XML_SCHEMA,grammars);    }    augs=endElementPSVI(true,grammars,augs);  } else {    augs=endElementPSVI(false,grammars,augs);    fElementDepth--;    fSubElement=fSubElementStack[fElementDepth];    fCurrentElemDecl=fElemDeclStack[fElementDepth];    fNil=fNilStack[fElementDepth];    fNotation=fNotationStack[fElementDepth];    fCurrentType=fTypeStack[fElementDepth];    fCurrentCM=fCMStack[fElementDepth];    fStrictAssess=fStrictAssessStack[fElementDepth];    fCurrCMState=fCMStateStack[fElementDepth];    fSawText=fSawTextStack[fElementDepth];    fSawCharacters=fStringContent[fElementDepth];    fWhiteSpace=-1;    fAppendBuffer=false;    fUnionType=false;  }  return augs;}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  public static final void shuffleList(List l,int repeat){  for (int iCnt=0; iCnt < repeat; iCnt++)   shuffleList(l);}  }
class C{  private void initTargetFolder(){  if (getStorageManager() == null) {    throw new IllegalStateException("Do not call this method before " + "initializing mStorageManager");  }  String lastPath=PreferenceManager.getLastUploadPath(this);  if (lastPath.equals("/")) {    mParents.add("");  } else {    String[] dir_names=lastPath.split("/");    mParents.clear();    for (    String dir : dir_names)     mParents.add(dir);  }  while (!getStorageManager().fileExists(generatePath(mParents)) && mParents.size() > 1) {    mParents.pop();  }}  }
class C{  public static double girardArea(S2Point a,S2Point b,S2Point c){  S2Point ab=S2Point.crossProd(a,b);  S2Point bc=S2Point.crossProd(b,c);  S2Point ac=S2Point.crossProd(a,c);  return Math.max(0.0,ab.angle(ac) - ab.angle(bc) + bc.angle(ac));}  }
class C{  public DOMParserImpl(XMLParserConfiguration config){  super(config);  final String[] domRecognizedFeatures={Constants.DOM_CANONICAL_FORM,Constants.DOM_CDATA_SECTIONS,Constants.DOM_CHARSET_OVERRIDES_XML_ENCODING,Constants.DOM_INFOSET,Constants.DOM_NAMESPACE_DECLARATIONS,Constants.DOM_SPLIT_CDATA,Constants.DOM_SUPPORTED_MEDIATYPES_ONLY,Constants.DOM_CERTIFIED,Constants.DOM_WELLFORMED,Constants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS};  fConfiguration.addRecognizedFeatures(domRecognizedFeatures);  fConfiguration.setFeature(DEFER_NODE_EXPANSION,false);  fConfiguration.setFeature(Constants.DOM_NAMESPACE_DECLARATIONS,true);  fConfiguration.setFeature(Constants.DOM_WELLFORMED,true);  fConfiguration.setFeature(INCLUDE_COMMENTS_FEATURE,true);  fConfiguration.setFeature(INCLUDE_IGNORABLE_WHITESPACE,true);  fConfiguration.setFeature(NAMESPACES,true);  fConfiguration.setFeature(DYNAMIC_VALIDATION,false);  fConfiguration.setFeature(CREATE_ENTITY_REF_NODES,false);  fConfiguration.setFeature(CREATE_CDATA_NODES_FEATURE,false);  fConfiguration.setFeature(Constants.DOM_CANONICAL_FORM,false);  fConfiguration.setFeature(Constants.DOM_CHARSET_OVERRIDES_XML_ENCODING,true);  fConfiguration.setFeature(Constants.DOM_SPLIT_CDATA,true);  fConfiguration.setFeature(Constants.DOM_SUPPORTED_MEDIATYPES_ONLY,false);  fConfiguration.setFeature(Constants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS,true);  fConfiguration.setFeature(Constants.DOM_CERTIFIED,true);  try {    fConfiguration.setFeature(NORMALIZE_DATA,false);  } catch (  XMLConfigurationException exc) {  }}  }
class C{  @Override public int available() throws IOException {  throw exception;}  }
class C{  @Override public void dataApplied(){  DefaultMutableTreeNode node;  if (selectedNode.isLeaf()) {    node=(DefaultMutableTreeNode)selectedNode.getParent();    if (node == null) {      node=selectedNode;    }  } else {    node=selectedNode;  }  TreeNode[] tmpNode=node.getPath();  model.reload();  tree.expandPath(new TreePath(tmpNode));  displayResult();}  }
class C{  @Override public void subscribe(final Set<Long> tagIds,final TagListener listener){  doSubscription(tagIds,listener);}  }
class C{  protected String nextLine(){  if (pushedBackLine != null) {    String result=pushedBackLine;    pushedBackLine=null;    return result;  } else   return iterator.next();}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),2);}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public T key(){  return k;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public CompilationUnit fullCopy(){  CompilationUnit tree=(CompilationUnit)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MENTOR_END_PARTYMSG(String value0){  return new SM_SYSTEM_MESSAGE(1400765,value0);}  }
class C{  private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("StretchToMinimumMaximum"));  options.put("minValue",ff.literal("1"));  options.put("maxValue",ff.literal("5"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  MatrixUtils.deserializeRealVector(this,"coefficients",ois);}  }
class C{  @CallSuper protected boolean runCheck(){  if (!isValid()) {    reset();    return false;  }  long currentTime=System.currentTimeMillis();  long duration=mLastCheckTime > 0 ? currentTime - mLastCheckTime : 0;  mLastCheckTime=currentTime;  if (isStarted() && mLastScrollY != Integer.MAX_VALUE) {    mVelocityY=(float)(mScrollingViewAccessor.computeVerticalScrollOffset() - mLastScrollY) * 1000 / duration;  }  if (isStarted() && mLastScrollX != Integer.MAX_VALUE) {    mVelocityX=(float)(mScrollingViewAccessor.computeHorizontalScrollOffset() - mLastScrollX) * 1000 / duration;  }  if (DesignConfig.DEBUG_COORDINATOR) {    Log.v(TAG,"runCheck, current " + mScrollingViewAccessor.computeVerticalScrollOffset() + ", last "+ mLastScrollY+ ", duration "+ duration+ ", velocity "+ mVelocityY+ ", view "+ mScrollingViewAccessor);  }  boolean scrollingFinished=scrollingFinished(SCROLL_AXES_ALL);  if (scrollingFinished && (mNoneScrollingTime-=duration) > 0) {    reset();    return false;  }  return true;}  }
class C{  private String stripQuotes(String s){  StringBuffer sb=new StringBuffer(s.length());  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c != '\'') {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public IOUtils(){  super();}  }
class C{  private Map<String,Function<HttpRequestContext,String>> createSubstitutionMap(String[] permissions,AbstractMethod am){  Map<String,Function<HttpRequestContext,String>> map=Maps.newLinkedHashMap();  for (  String permission : permissions) {    Matcher matcher=SUBSTITUTION_MATCHER.matcher(permission);    while (matcher.find()) {      String match=matcher.group();      if (map.containsKey(match)) {        continue;      }      String param=matcher.group("param");      Function<HttpRequestContext,String> substitution;      if (param.startsWith("?")) {        substitution=createQuerySubstitution(param.substring(1));      } else {        substitution=createPathSubstitution(param,am);      }      map.put(match,substitution);    }  }  return map;}  }
class C{  public void propertiesCancelled(){  unregisterListeners();  for (int i=0; i < groups.size(); i++) {    List<PropertiesProvider<X>> providers=groups.get(i);    List<PropertiesPanel> categoriesPanels=new ArrayList();    if (providers.size() == 1) {      categoriesPanels.add(panels.get(i));    } else {      MultiPropertiesPanel multiPanel=(MultiPropertiesPanel)panels.get(i);      categoriesPanels.addAll(multiPanel.getPanels());    }    for (int j=0; j < providers.size(); j++)     providers.get(j).propertiesCancelled(categoriesPanels.get(j),dataSource);  }}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static boolean isFileTypeSupported(int fileType){  List providers=getMidiFileWriters();  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType)) {      return true;    }  }  return false;}  }
class C{  @Override public void onCreate(){  super.onCreate();  instance=this;  activityList=new ArrayList<>();  SharedPreferences sharedPreferences=getSharedPreferences(SP_STARTUP_ITEM,MODE_PRIVATE);  ValueUtils.readPhotoCount(this,sharedPreferences);  lightTheme=sharedPreferences.getBoolean(getString(R.string.key_light_theme),true);  language=sharedPreferences.getString(getString(R.string.key_language),"follow_system");}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public boolean isTestSource(String relativePath){  return testSources.matches(relativePath);}  }
class C{  public void execute(final String command,final CommandManager commandManager){  if (ProgramProperties.isUseGUI()) {    Component parentComponent;    Object parent=commandManager.getParent();    if (parent instanceof IDirectableViewer)     parentComponent=((IDirectableViewer)parent).getFrame(); else     if (parent instanceof JDialog)     parentComponent=(JDialog)parent; else     parentComponent=getParent();    execute(command,commandManager,parentComponent);  } else   executeImmediately(command,commandManager);}  }
class C{  public ArrayFieldVector(int size,T preset){  this(preset.getField(),size);  Arrays.fill(data,preset);}  }
class C{  public static Collection<File> listFilesAndDirs(File directory,IOFileFilter fileFilter,IOFileFilter dirFilter){  validateListFilesParameters(directory,fileFilter);  IOFileFilter effFileFilter=setUpEffectiveFileFilter(fileFilter);  IOFileFilter effDirFilter=setUpEffectiveDirFilter(dirFilter);  Collection<File> files=new java.util.LinkedList<File>();  if (directory.isDirectory()) {    files.add(directory);  }  innerListFiles(files,directory,FileFilterUtils.or(effFileFilter,effDirFilter),true);  return files;}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public CMLeaf(QName element){  super(XMLContentSpec.CONTENTSPECNODE_LEAF);  fElement.setValues(element);}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  private static String keyForSet(String name){  return "service_set_" + name;}  }
class C{  private void mark(){  theLastColumn=theCurrentColumn;  theLastLine=theCurrentLine;}  }
class C{  public TimeSeriesMetricDeltaSet(Stream<Entry<Tags,MetricValue>> td){  values_=Any2.right(td.collect(Collectors.toMap(null,null,null,null)));}  }
class C{  public String createContainerName(String name){  boolean valid=false;  int counter=1;  while (!valid) {    String candidate=name + counter;    boolean exists=false;    for (    ConstraintWidget widget : mWidgets.values()) {      if (widget.getDebugName().equalsIgnoreCase(candidate)) {        exists=true;        break;      }    }    if (!exists) {      valid=true;      name=candidate;    } else {      counter++;    }  }  return name;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public MarketGetCommentsQuery startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public void saveSelectedFeatures(PrintWriter toSopFile){  for (int j=0; j < coeffs.length; j++)   toSopFile.print(coeffs[j] + " " + factors[j]+ " ");  toSopFile.println();}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public static void mergeServiceDocuments(ServiceDocument copyTo,ServiceDocument copyFrom){  mergeServiceDocuments(copyTo,copyFrom,SHALLOW_MERGE_STRATEGY);}  }
class C{  public BetaDistribution(double alpha,double beta){  this(alpha,beta,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public String toString(){  SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  return "source_ip_addr = " + this.source_ip_addr + ", "+ "file_size = "+ this.file_size+ ", "+ "create_timestamp = "+ df.format(this.create_timestamp)+ ", "+ "crc32 = "+ this.crc32;}  }
class C{  public boolean isCyclic(){  return getKind() == Type.TYPE_MESSAGE && getMessageType().isCyclic();}  }
class C{  public PollsEditQuery deleteAnswers(String value){  return unsafeParam("delete_answers",value);}  }
class C{  @Override public void drop_duplicates(){  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {    PtInsIntervalManager im=pt_objs.get(it.next());    im.removeUselessSegments();  }}  }
class C{  public void export(String fileName,int sampleRate,short[] samples) throws IOException {  nBytesPerSample=2;  buf=new byte[samples.length * 2];  for (int i=0; i < samples.length; i++) {    buf[2 * i]=(byte)((samples[i] & 0xff00) >>> 8);    buf[2 * i + 1]=(byte)((samples[i] & 0x00ff));  }  doWrite(fileName,sampleRate);}  }
class C{  public GSXASessionImpl(GSXAConnectionImpl conn) throws JMSException {  super(conn,true,-1);  TransactionManager tm=conn.getTransactionManager();  xaResource=new XAResourceJMSImpl(tm,this,(ISpaceProxy)m_space);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public AnchorUpdateControl(Layout layout,String action,boolean overItem){  this(new Layout[]{layout},action,overItem);}  }
class C{  public static ToolbarTapTarget forToolbarNavigationIcon(Toolbar toolbar,CharSequence title,@Nullable CharSequence description){  return new ToolbarTapTarget(toolbar,true,title,description);}  }
class C{  public Boolean versionCheck(final String version) throws IOException {  String version_current=new String();  BufferedReader reader=null;  System.setProperty("http.keepAlive","false");  try {    final URL url=new URL(SETTINGS.getString("versioncheck.url"));    reader=new BufferedReader(new InputStreamReader(url.openStream()));    version_current=reader.readLine().toLowerCase().trim();  }  finally {    reader.close();  }  return version.equalsIgnoreCase(version_current) ? true : false;}  }
class C{  @Override public void parse(String aLine) throws IOException {  String[] tokens=aLine.trim().split("\t");  parse(tokens,tokens.length);}  }
class C{  public static boolean isWifiEnabled(Context context){  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";  db.execSQL(sql);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public CM_SERVER_LIST(ByteBuffer buf,LoginConnection client){  super(buf,client,0x05);}  }
class C{  public LabelfileDoubleDataSource(File file) throws FileNotFoundException {  this(new FileReader(file));}  }
class C{  @Override public int read(){  return -1;}  }
class C{  @Override public long length(){  return data.size();}  }
class C{  public RequestParams(Object... keysAndValues){  init();  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  public ShoppingCart(Delegator delegator,String productStoreId,Locale locale,String currencyUom){  this(delegator,productStoreId,null,locale,currencyUom);}  }
class C{  public boolean isSpring(){  return this.frequency > 0.0;}  }
class C{  public boolean isSubsetOf(PointsToBitVector other){  BitVector andResult=BitVector.and(this,other);  return andResult.equals(this);}  }
class C{  public static int divideToCeil(int numerator,int denominator){  Double result=Math.ceil((double)numerator / denominator);  return result.intValue();}  }
class C{  protected NotesAddQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public Graph(Table nodes,boolean directed){  this(nodes,directed,DEFAULT_NODE_KEY,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY);}  }
class C{  @deprecated public String toString(){  return this.id;}  }
class C{  public FriendsGetMutualQuery targetUid(Integer value){  return unsafeParam("target_uid",value);}  }
class C{  public void resourceSyncInfoChanged(IResource[] changedResources){  for (int i=0; i < changedResources.length; i++) {    if (resource != null && changedResources[i].equals(resource.getIResource())) {      refresh();    }  }}  }
class C{  public Simulation(){  this.camera=new Camera(32,new Vector2());  this.rays=new ArrayList<SandboxRay>();  this.world=new World();  this.world.setUserData(DEFAULT_SIMULATION_NAME);  this.contactCounter=new ContactCounter();  this.world.addListener(this.contactCounter);}  }
class C{  public boolean isFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag[j] == 0)     return false;  }  return true;}  }
class C{  public static void print(boolean x){  out.print(x);  out.flush();}  }
class C{  private String printToScreenOneLine(List<IntervalFeature> listToPrint){  List<String> printable=new ArrayList<String>();  for (int i=0; i < this.getGc().getMapping().size(); i++) {    printable.add(" ");  }  for (  IntervalFeature intervalFeature : listToPrint) {    if (intervalFeature.getScreenFrom() == -1) {      continue;    }    intervalFeature.setGtfAttributeForName(this.getGtfAttributeForName());    String nameOnFeature=intervalFeature.getName().trim() + "_";    int relPos=0;    for (int j=intervalFeature.getScreenFrom(); j <= intervalFeature.getScreenTo(); j++) {      String text=intervalFeature.assignTextToFeature(this.isNoFormat());      if ((intervalFeature.getScreenTo() - intervalFeature.getScreenFrom() + 1) > 4 && j < intervalFeature.getScreenTo() && relPos < nameOnFeature.length() && !nameOnFeature.equals("._")) {        Character x=nameOnFeature.charAt(relPos);        if (this.isNoFormat()) {          text=Character.toString(x);        } else {          text=FormatGTF.format(x,intervalFeature.getStrand());        }        relPos+=1;      }      printable.set(j,text);    }  }  return StringUtils.join(printable,"");}  }
class C{  public SerialMessage stopLevelChangeMessage(final String type){  logger.debug("NODE {}: Creating new message for application command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE",this.getNode().getNodeId());  SerialMessage result=new SerialMessage(this.getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);  byte[] newPayload={(byte)this.getNode().getNodeId(),2,(byte)CommandClass.SWITCH_MULTILEVEL.getKey(),(byte)0x05};  result.setMessagePayload(newPayload);  return result;}  }
class C{  public Builder stroke(Boolean stroke){  this.stroke=stroke;  return this;}  }
class C{  public void handleStep(final ODEStateInterpolator interpolator,final boolean isLast) throws MathIllegalStateException {  if (last == null) {    first=interpolator.getPreviousState();    last=first;    forward=interpolator.isForward();    if (!forward) {      h=-h;    }  }  double nextTime=(mode == StepNormalizerMode.INCREMENT) ? last.getTime() + h : (FastMath.floor(last.getTime() / h) + 1) * h;  if (mode == StepNormalizerMode.MULTIPLES && Precision.equals(nextTime,last.getTime(),1)) {    nextTime+=h;  }  boolean nextInStep=isNextInStep(nextTime,interpolator);  while (nextInStep) {    doNormalizedStep(false);    last=interpolator.getInterpolatedState(nextTime);    nextTime+=h;    nextInStep=isNextInStep(nextTime,interpolator);  }  if (isLast) {    boolean addLast=bounds.lastIncluded() && last.getTime() != interpolator.getCurrentState().getTime();    doNormalizedStep(!addLast);    if (addLast) {      last=interpolator.getCurrentState();      doNormalizedStep(true);    }  }}  }
class C{  @Override public void populateExpression(Object objValue){}  }
class C{  public TypeVariable typeVariable(Type type){  return typeVariable(hierarchy.typeNode(type));}  }
class C{  public void close(){  closed=true;}  }
class C{  public void runAsync(String localName,ModelService service,Map<String,? extends Object> params,GenericRequester requester,boolean persist) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  if (Debug.timingOn()) {    UtilTimer.timerLog(localName + " / " + service.name,"ASync service started...",module);  }  if (Debug.verboseOn() || service.debug) {    Debug.logVerbose("[ServiceDispatcher.runAsync] : preparing service " + service.name + " ["+ service.location+ "/"+ service.invoke+ "] ("+ service.engineName+ ")",module);  }  Map<String,Object> context=new HashMap<String,Object>();  if (params != null) {    context.putAll(params);  }  Map<String,Object> result=new HashMap<String,Object>();  boolean isFailure=false;  boolean isError=false;  this.logService(localName,service,GenericEngine.ASYNC_MODE);  Locale locale=this.checkLocale(context);  DispatchContext ctx=localContext.get(localName);  GenericEngine engine=this.getGenericEngine(service.engineName);  Transaction parentTransaction=null;  boolean beganTrans=false;  try {    if (service.useTransaction) {      if (TransactionUtil.isTransactionInPlace()) {        if (service.requireNewTransaction) {          parentTransaction=TransactionUtil.suspend();          beganTrans=TransactionUtil.begin(service.transactionTimeout);        }      } else {        beganTrans=TransactionUtil.begin(service.transactionTimeout);      }      if (beganTrans && TransactionUtil.debugResources()) {        DebugXaResource dxa=new DebugXaResource(service.name);        try {          dxa.enlist();        } catch (        Exception e) {          Debug.logError(e,module);        }      }    }    try {      Map<String,List<ServiceEcaRule>> eventMap=ServiceEcaUtil.getServiceEventMap(service.name);      if (eventMap != null)       ServiceEcaUtil.evalRules(service.name,eventMap,"auth",ctx,context,result,isError,isFailure);      context=checkAuth(localName,context,service);      Object userLogin=context.get("userLogin");      if (service.auth && userLogin == null) {        throw new ServiceAuthException("User authorization is required for this service: " + service.name + service.debugInfo());      }      if (eventMap != null)       ServiceEcaUtil.evalRules(service.name,eventMap,"in-validate",ctx,context,result,isError,isFailure);      isFailure=ModelService.RESPOND_FAIL.equals(result.get(ModelService.RESPONSE_MESSAGE));      isError=ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));      if (service.validate && !isError && !isFailure) {        try {          service.validate(context,ModelService.IN_PARAM,locale);        } catch (        ServiceValidationException e) {          Debug.logError(e,"Incoming service context (in runAsync: " + service.name + ") does not match expected requirements",module);          throw e;        }      }      if (!isError && !isFailure) {        if (requester != null) {          engine.runAsync(localName,service,context,requester,persist);        } else {          engine.runAsync(localName,service,context,persist);        }        engine.sendCallbacks(service,context,GenericEngine.ASYNC_MODE);      }      if (Debug.timingOn()) {        UtilTimer.closeTimer(localName + " / " + service.name,"ASync service finished...",module);      }    } catch (    Throwable t) {      if (Debug.timingOn()) {        UtilTimer.closeTimer(localName + " / " + service.name,"ASync service failed...",module);      }      String errMsg="Service [" + service.name + "] threw an unexpected exception/error";      Debug.logError(t,errMsg,module);      engine.sendCallbacks(service,context,t,GenericEngine.ASYNC_MODE);      try {        TransactionUtil.rollback(beganTrans,errMsg,t);      } catch (      GenericTransactionException te) {        Debug.logError(te,"Cannot rollback transaction",module);      }      if (t instanceof ServiceAuthException) {        throw (ServiceAuthException)t;      } else       if (t instanceof ServiceValidationException) {        throw (ServiceValidationException)t;      } else       if (t instanceof GenericServiceException) {        throw (GenericServiceException)t;      } else {        throw new GenericServiceException("Service [" + service.name + "] Failed"+ service.debugInfo(),t);      }    } finally {      try {        TransactionUtil.commit(beganTrans);      } catch (      GenericTransactionException e) {        Debug.logError(e,"Could not commit transaction",module);        throw new GenericServiceException("Commit transaction failed");      }    }  } catch (  GenericTransactionException se) {    Debug.logError(se,"Problems with the transaction",module);    throw new GenericServiceException("Problems with the transaction: " + se.getMessage() + "; See logs for more detail");  } finally {    if (parentTransaction != null) {      try {        TransactionUtil.resume(parentTransaction);      } catch (      GenericTransactionException ise) {        Debug.logError(ise,"Trouble resuming parent transaction",module);        throw new GenericServiceException("Resume transaction exception: " + ise.getMessage() + "; See logs for more detail");      }    }  }}  }
class C{  public static void clearImageView(final ImageView _imageView){  Glide.clear(_imageView);}  }
class C{  public long convert(String value){  if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals("-1")) {    return MISSING_VALUE;  }  value=Strings.padStart(value,4,'0');  if (selectedFormatter == null) {    selectedFormatter=TypeUtils.getDateTimeFormatter(value);  }  LocalDateTime time;  try {    time=LocalDateTime.parse(value,selectedFormatter);  } catch (  DateTimeParseException e) {    selectedFormatter=TypeUtils.DATE_TIME_FORMATTER;    time=LocalDateTime.parse(value,selectedFormatter);  }  return PackedLocalDateTime.pack(time);}  }
class C{  public PlacesGetCheckinsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public ListenableFuture<MemberRemoveResponse> removeMember(long memberID){  MemberRemoveRequest memberRemoveRequest=MemberRemoveRequest.newBuilder().setID(memberID).build();  return clusterStub.memberRemove(memberRemoveRequest);}  }
class C{  public NewsfeedSaveListQuery sourceIds(Integer... value){  return unsafeParam("source_ids",value);}  }
class C{  private void maybeBuildBackoffPolicyFromXml(JobInfo.Builder jobBuilder,XmlPullParser parser){  String val=parser.getAttributeValue(null,"initial-backoff");  if (val != null) {    long initialBackoff=Long.valueOf(val);    val=parser.getAttributeValue(null,"backoff-policy");    int backoffPolicy=Integer.valueOf(val);    jobBuilder.setBackoffCriteria(initialBackoff,backoffPolicy);  }}  }
class C{  double addLimitedDelta(double prevVal,double currentVal,double delta){  if (delta == 0)   return currentVal;  double oldDelta=currentVal - prevVal;  if (oldDelta != 0 && Math.signum(oldDelta) != Math.signum(delta))   return currentVal;  if (delta > 0) {    return prevVal + Math.max(delta,oldDelta);  } else {    return prevVal + Math.min(delta,oldDelta);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_ENABLE_NO_SHOP(String value0){  return new SM_SYSTEM_MESSAGE(1300809,value0);}  }
class C{  protected JButton createJButtonForAction(Action action){  JButton button=new JButton(action);  String text=button.getText();  if (SystemInfo.isMac) {    button.putClientProperty("JButton.buttonType","text");  }  if (text != null) {    int mnemonic=0;    StringBuilder plainText=new StringBuilder();    for (int i=0; i < text.length(); i++) {      char ch=text.charAt(i);      if (ch == '_' || ch == '&') {        if (i >= text.length()) {          break;        }        ch=text.charAt(i);        if (ch != '_' && ch != '&') {          int vk=ch;          if (vk >= 'a' && vk <= 'z') {            vk-='a' - 'A';          }          mnemonic=vk;        }      }      plainText.append(ch);    }    button.setText(plainText.toString());    button.setMnemonic(mnemonic);    setMargin(button);  }  myActionToButtonMap.put(action,button);  return button;}  }
class C{  public void resetTreeDataUpdated(){  this.treeDataUpdated=false;}  }
class C{  public void testModelEvents() throws Exception {  Model model=null;  try {    model=repositoryService.newModel();    model.setName("My model");    model.setKey("key");    repositoryService.saveModel(model);    assertEquals(2,listener.getEventsReceived().size());    assertEquals(ActivitiEventType.ENTITY_CREATED,listener.getEventsReceived().get(0).getType());    assertEquals(model.getId(),((Model)((ActivitiEntityEvent)listener.getEventsReceived().get(0)).getEntity()).getId());    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,listener.getEventsReceived().get(1).getType());    assertEquals(model.getId(),((Model)((ActivitiEntityEvent)listener.getEventsReceived().get(1)).getEntity()).getId());    listener.clearEventsReceived();    model=repositoryService.getModel(model.getId());    model.setName("Updated");    repositoryService.saveModel(model);    assertEquals(1,listener.getEventsReceived().size());    assertEquals(ActivitiEventType.ENTITY_UPDATED,listener.getEventsReceived().get(0).getType());    assertEquals(model.getId(),((Model)((ActivitiEntityEvent)listener.getEventsReceived().get(0)).getEntity()).getId());    listener.clearEventsReceived();    repositoryService.addModelEditorSource(model.getId(),"test".getBytes());    repositoryService.addModelEditorSourceExtra(model.getId(),"test extra".getBytes());    assertEquals(2,listener.getEventsReceived().size());    assertEquals(ActivitiEventType.ENTITY_UPDATED,listener.getEventsReceived().get(0).getType());    assertEquals(ActivitiEventType.ENTITY_UPDATED,listener.getEventsReceived().get(1).getType());    listener.clearEventsReceived();    repositoryService.deleteModel(model.getId());    assertEquals(1,listener.getEventsReceived().size());    assertEquals(ActivitiEventType.ENTITY_DELETED,listener.getEventsReceived().get(0).getType());    assertEquals(model.getId(),((Model)((ActivitiEntityEvent)listener.getEventsReceived().get(0)).getEntity()).getId());    listener.clearEventsReceived();  }  finally {    if (model != null && repositoryService.getModel(model.getId()) != null) {      repositoryService.deleteModel(model.getId());    }  }}  }
class C{  public SimpleStringProperty scriptProperty(){  return this.script;}  }
class C{  public Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 7:{        return token(TokenType.STRING);      }case 9:    break;case 8:{    return token(TokenType.KEYWORD);  }case 10:break;case 5:{return token(TokenType.OPERATOR);}case 11:break;case 2:{}case 12:break;case 4:{return token(TokenType.NUMBER);}case 13:break;case 3:{return token(TokenType.IDENTIFIER);}case 14:break;case 6:{return token(TokenType.COMMENT);}case 15:break;case 1:{}case 16:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_user);}  }
class C{  static public void add(float[] array1,float[] array2){  int i, size=array1.length;  for (i=0; i < size; i++)   array1[i]+=array2[i];}  }
class C{  public WallEditCommentQuery editComment(UserActor actor,int commentId){  return new WallEditCommentQuery(getClient(),actor,commentId);}  }
class C{  public void apply() throws CanceledException, IOException, ParserConfigurationException, SAXException {  if (saxParserFactory == null)   saxParserFactory=SAXParserFactory.newInstance();  SAXParser saxParser=saxParserFactory.newSAXParser();  saxParser.parse(Basic.getInputStreamPossiblyZIPorGZIP(blastFile.getPath()),this);}  }
class C{  public String collectExecutorStatistics(){  String load_blocks_time="";  String scan_blocks_time="";  String scan_blocks_num="";  String load_dictionary_time="";  String result_size="";  String total_executor_time="";  String splitChar=" ";  String total_blocklet="";  String valid_scan_blocklet="";  try {    for (    QueryStatistic statistic : queryStatistics) {switch (statistic.getMessage()) {case QueryStatisticsConstants.LOAD_BLOCKS_EXECUTOR:        load_blocks_time+=statistic.getTimeTaken() + splitChar;      break;case QueryStatisticsConstants.SCAN_BLOCKS_TIME:    scan_blocks_time+=statistic.getTimeTaken() + splitChar;  break;case QueryStatisticsConstants.SCAN_BLOCKS_NUM:scan_blocks_num+=statistic.getCount() + splitChar;break;case QueryStatisticsConstants.LOAD_DICTIONARY:load_dictionary_time+=statistic.getTimeTaken() + splitChar;break;case QueryStatisticsConstants.RESULT_SIZE:result_size+=statistic.getCount() + splitChar;break;case QueryStatisticsConstants.EXECUTOR_PART:total_executor_time+=statistic.getTimeTaken() + splitChar;break;case QueryStatisticsConstants.TOTAL_BLOCKLET_NUM:total_blocklet=statistic.getCount() + splitChar;break;case QueryStatisticsConstants.VALID_SCAN_BLOCKLET_NUM:valid_scan_blocklet=statistic.getCount() + splitChar;break;default :break;}}String headers="task_id,load_blocks_time,load_dictionary_time,scan_blocks_time," + "total_executor_time,scan_blocks_num,total_blocklet" + "valid_scan_blocklet,result_size";List<String> values=new ArrayList<String>();values.add(queryIWthTask);values.add(load_blocks_time);values.add(load_dictionary_time);values.add(scan_blocks_time);values.add(total_executor_time);values.add(scan_blocks_num);values.add(total_blocklet);values.add(valid_scan_blocklet);values.add(result_size);StringBuilder tableInfo=new StringBuilder();String[] columns=headers.split(",");String line="";String hearLine="";String valueLine="";for (int i=0; i < columns.length; i++) {int len=Math.max(columns[i].length(),values.get(i).length());line+="+" + printLine("-",len);hearLine+="|" + printLine(" ",len - columns[i].length()) + columns[i];valueLine+="|" + printLine(" ",len - values.get(i).length()) + values.get(i);}tableInfo.append(line + "+").append("\n");tableInfo.append(hearLine + "|").append("\n");tableInfo.append(line + "+").append("\n");tableInfo.append(valueLine + "|").append("\n");tableInfo.append(line + "+").append("\n");return "Print query statistic for each task id:" + "\n" + tableInfo.toString();} catch (Exception ex) {return "Put statistics into table failed, catch exception: " + ex.getMessage();}}  }
class C{  private static boolean hasTies(double[] x,double[] y) throws Exception {  Method method=KolmogorovSmirnovTest.class.getDeclaredMethod("hasTies",double[].class,double[].class);  method.setAccessible(true);  return (boolean)method.invoke(KolmogorovSmirnovTest.class,x,y);}  }
class C{  public LeExpr newLeExpr(Value op1,Value op2){  return new GLeExpr(op1,op2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CASH_ITEM_TIME_LEFT(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400481,value1,value0);}  }
class C{  @Override public Node cloneNode(boolean deep){  HTMLTableRowElementImpl clonedNode=(HTMLTableRowElementImpl)super.cloneNode(deep);  clonedNode._cells=null;  return clonedNode;}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public boolean isBinary(){  return isBinary;}  }
class C{  public GSXAConnectionFactoryImpl(){}  }
class C{  public static Object makeParamValueFromComposite(HttpServletRequest request,String prefix,Locale locale){  String compositeType=request.getParameter(makeCompositeParam(prefix,"compositeType"));  if (UtilValidate.isEmpty(compositeType))   return null;  Map<String,String> data=new HashMap<String,String>();  for (Enumeration<String> names=UtilGenerics.cast(request.getParameterNames()); names.hasMoreElements(); ) {    String name=names.nextElement();    if (!name.startsWith(prefix + COMPOSITE_DELIMITER))     continue;    String suffix=name.substring(name.indexOf(COMPOSITE_DELIMITER) + COMPOSITE_DELIMITER_LENGTH);    String value=request.getParameter(name);    data.put(suffix,value);  }  if (Debug.verboseOn()) {    Debug.logVerbose("Creating composite type with parameter data: " + data.toString(),module);  }  if ("Timestamp".equals(compositeType)) {    String date=data.get("date");    String hour=data.get("hour");    String minutes=data.get("minutes");    String ampm=data.get("ampm");    if (date == null || date.length() < 10)     return null;    if (UtilValidate.isEmpty(hour))     return null;    if (UtilValidate.isEmpty(minutes))     return null;    boolean isTwelveHour=UtilValidate.isNotEmpty(ampm);    try {      int h=Integer.parseInt(hour);      Timestamp timestamp=Timestamp.valueOf(date.substring(0,10) + " 00:00:00.000");      Calendar cal=Calendar.getInstance(locale);      cal.setTime(timestamp);      if (isTwelveHour) {        boolean isAM=("AM".equals(ampm) ? true : false);        if (isAM && h == 12)         h=0;        if (!isAM && h < 12)         h+=12;      }      cal.set(Calendar.HOUR_OF_DAY,h);      cal.set(Calendar.MINUTE,Integer.parseInt(minutes));      return new Timestamp(cal.getTimeInMillis());    } catch (    IllegalArgumentException e) {      Debug.logWarning("User input for composite timestamp was invalid: " + e.getMessage(),module);      return null;    }  }  return null;}  }
class C{  public static <T>Set<T> toSet(T obj1){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  return theSet;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_CASTLE_TAKEN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400300,value0,value1);}  }
class C{  private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {  String result=null;  if (parser.next() == XmlPullParser.TEXT) {    result=parser.getText();    parser.nextTag();  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_Instant_A_TO_ME(int num0,String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1200670,num0,skillname,skillcaster);}  }
class C{  @NotNull public Emotion findEmotionFromSingleFace(@NotNull String imageUrl){  List<Emotion> emotions=emotionBuilder.emotionRecognition(imageUrl).withResult();  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),"a single face was not present");  return emotions.get(0);}  }
class C{  public static void writeFileRaw(String fileName,byte[][] contents) throws IOException {  try (OutputStream output=new BufferedOutputStream(new FileOutputStream(fileName))){    for (    byte[] content : contents) {      output.write(content);    }    output.flush();  } }  }
class C{  public String toString(){  StringBuilder classPathBuilder=new StringBuilder("");  for (  String cpEntry : _classpathList) {    classPathBuilder.append(cpEntry);    classPathBuilder.append(File.pathSeparatorChar);  }  return classPathBuilder.toString();}  }
class C{  public static void putBoolean(String key,boolean value){  prefs.edit().putBoolean(key,value).commit();}  }
class C{  public void addSubReport(final ConfigurationElementReport pReport){  this.subreports.add(pReport);  if (pReport.isFailure()) {    setFailure(pReport.getStatusMessage());  } else   if (pReport.requiresReboot()) {    status=Status.RESTART;  }}  }
class C{  private void removeTestData(){  dataTagLogMapper.deleteDataTagLog(ID);}  }
class C{  public static boolean deleteCompactionRequiredFile(String metaFolderPath,CompactionType compactionType){  String compactionRequiredFile;  if (compactionType.equals(CompactionType.MINOR_COMPACTION)) {    compactionRequiredFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.minorCompactionRequiredFile;  } else {    compactionRequiredFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.majorCompactionRequiredFile;  }  try {    if (FileFactory.isFileExist(compactionRequiredFile,FileFactory.getFileType(compactionRequiredFile))) {      if (FileFactory.getCarbonFile(compactionRequiredFile,FileFactory.getFileType(compactionRequiredFile)).delete()) {        LOGGER.info("Deleted the compaction request file " + compactionRequiredFile);        return true;      } else {        LOGGER.error("Unable to delete the compaction request file " + compactionRequiredFile);      }    } else {      LOGGER.info("Compaction request file is not present. file is : " + compactionRequiredFile);    }  } catch (  IOException e) {    LOGGER.error("Exception in deleting the compaction request file " + e.getMessage());  }  return false;}  }
class C{  public static Uri createDocumentDataString(int id,String initialUrl){  return new Uri.Builder().scheme(UrlConstants.DOCUMENT_SCHEME).authority(String.valueOf(id)).query(initialUrl).build();}  }
class C{  @Override public void write(char[] cbuf,int off,int len) throws IOException {  if (xmlPrologWriter != null) {    detectEncoding(cbuf,off,len);  } else {    writer.write(cbuf,off,len);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_HE_REJECTED_INVITATION(String value0){  return new SM_SYSTEM_MESSAGE(1300259,value0);}  }
class C{  @Override public int onPatchReceived(String path,boolean isUpgrade){  int returnCode=patchCheck(path,isUpgrade);  if (returnCode == ShareConstants.ERROR_PATCH_OK) {    TinkerPatchService.runPatchService(context,path,isUpgrade);  } else {    Tinker.with(context).getLoadReporter().onLoadPatchListenerReceiveFail(new File(path),returnCode,isUpgrade);  }  return returnCode;}  }
class C{  public static LazyElement parse(String str) throws LazyException {  if (str.startsWith("[")) {    return new LazyArray(str);  } else {    return new LazyObject(str);  }}  }
class C{  public static double cbrt(double x){  long inbits=Double.doubleToRawLongBits(x);  int exponent=(int)((inbits >> 52) & 0x7ff) - 1023;  boolean subnormal=false;  if (exponent == -1023) {    if (x == 0) {      return x;    }    subnormal=true;    x*=1.8014398509481984E16;    inbits=Double.doubleToRawLongBits(x);    exponent=(int)((inbits >> 52) & 0x7ff) - 1023;  }  if (exponent == 1024) {    return x;  }  int exp3=exponent / 3;  double p2=Double.longBitsToDouble((inbits & 0x8000000000000000L) | (long)(((exp3 + 1023) & 0x7ff)) << 52);  final double mant=Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);  double est=-0.010714690733195933;  est=est * mant + 0.0875862700108075;  est=est * mant + -0.3058015757857271;  est=est * mant + 0.7249995199969751;  est=est * mant + 0.5039018405998233;  est*=CBRTTWO[exponent % 3 + 2];  final double xs=x / (p2 * p2 * p2);  est+=(xs - est * est * est) / (3 * est * est);  est+=(xs - est * est * est) / (3 * est * est);  double temp=est * HEX_40000000;  double ya=est + temp - temp;  double yb=est - ya;  double za=ya * ya;  double zb=ya * yb * 2.0 + yb * yb;  temp=za * HEX_40000000;  double temp2=za + temp - temp;  zb+=za - temp2;  za=temp2;  zb=za * yb + ya * zb + zb * yb;  za*=ya;  double na=xs - za;  double nb=-(na - xs + za);  nb-=zb;  est+=(na + nb) / (3 * est * est);  est*=p2;  if (subnormal) {    est*=3.814697265625E-6;  }  return est;}  }
class C{  public SpaceConfigurationException(String str){  super(str);}  }
class C{  public static IProgressMonitor infiniteSubMonitorFor(IProgressMonitor monitor,int ticks){  if (monitor == null)   return new NullProgressMonitor();  if (monitor instanceof NullProgressMonitor)   return monitor;  return new InfiniteSubProgressMonitor(monitor,ticks,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);}  }
class C{  public TLongHash(int initialCapacity){  super(initialCapacity);  this._hashingStrategy=this;}  }
class C{  private long searchSPSandPPS(){  ByteBuffer[] inputBuffers=mEncoder.getInputBuffers();  ByteBuffer[] outputBuffers=mEncoder.getOutputBuffers();  BufferInfo info=new BufferInfo();  byte[] csd=new byte[128];  int len=0, p=4, q=4;  long elapsed=0, now=timestamp();  while (elapsed < 3000000 && (mSPS == null || mPPS == null)) {    int bufferIndex=mEncoder.dequeueInputBuffer(1000000 / FRAMERATE);    if (bufferIndex >= 0) {      check(inputBuffers[bufferIndex].capacity() >= mData.length,"The input buffer is not big enough.");      inputBuffers[bufferIndex].clear();      inputBuffers[bufferIndex].put(mData,0,mData.length);      mEncoder.queueInputBuffer(bufferIndex,0,mData.length,timestamp(),0);    } else {      if (VERBOSE)       Log.e(TAG,"No buffer available !");    }    int index=mEncoder.dequeueOutputBuffer(info,1000000 / FRAMERATE);    if (index == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {      MediaFormat format=mEncoder.getOutputFormat();      ByteBuffer spsb=format.getByteBuffer("csd-0");      ByteBuffer ppsb=format.getByteBuffer("csd-1");      mSPS=new byte[spsb.capacity() - 4];      spsb.position(4);      spsb.get(mSPS,0,mSPS.length);      mPPS=new byte[ppsb.capacity() - 4];      ppsb.position(4);      ppsb.get(mPPS,0,mPPS.length);      break;    } else     if (index == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {      outputBuffers=mEncoder.getOutputBuffers();    } else     if (index >= 0) {      len=info.size;      if (len < 128) {        outputBuffers[index].get(csd,0,len);        if (len > 0 && csd[0] == 0 && csd[1] == 0 && csd[2] == 0 && csd[3] == 1) {          while (p < len) {            while (!(csd[p + 0] == 0 && csd[p + 1] == 0 && csd[p + 2] == 0 && csd[p + 3] == 1) && p + 3 < len)             p++;            if (p + 3 >= len)             p=len;            if ((csd[q] & 0x1F) == 7) {              mSPS=new byte[p - q];              System.arraycopy(csd,q,mSPS,0,p - q);            } else {              mPPS=new byte[p - q];              System.arraycopy(csd,q,mPPS,0,p - q);            }            p+=4;            q=p;          }        }      }      mEncoder.releaseOutputBuffer(index,false);    }    elapsed=timestamp() - now;  }  check(mPPS != null & mSPS != null,"Could not determine the SPS & PPS.");  mB64PPS=Base64.encodeToString(mPPS,0,mPPS.length,Base64.NO_WRAP);  mB64SPS=Base64.encodeToString(mSPS,0,mSPS.length,Base64.NO_WRAP);  return elapsed;}  }
class C{  public static String normalize(String token){  if (isNumber(token))   return "1000";  if (isPunctuation(token))   return "PUNCT";  if (isEmail(token))   return "EMAIL";  if (isDate(token))   return "DATE";  if (isCode(token))   return "CODE";  if (isWebsite(token))   return "WEBSITE";  if (isTag(token))   return "XMLTAG";  return token;}  }
class C{  public void deletePage(String path) throws IOException {  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(CMD_PROPERTY,DELETE_PAGE_COMMAND).put(CHARSET_PROPERTY,UTF_8).put(PATH_PROPERTY,path.toLowerCase()).build()),WCM_COMMAND_URL,String.format(PAGE_DELETED_SUCCESS_MESSAGE_FORMAT,path.toLowerCase()));}  }
class C{  public final void sendPacket(LsServerPacket bp){synchronized (guard) {    if (isWriteDisabled()) {      return;    }    log.debug("sending packet: " + bp);    sendMsgQueue.addLast(bp);    enableWriteInterest();  }}  }
class C{  public static Paint newCornerPaint(@NonNull Resources resources){  final Paint paint=new Paint();  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(resources.getDimension(R.dimen.corner_thickness));  paint.setColor(resources.getColor(R.color.corner));  return paint;}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  private void init(Configuration config){  String localhostName="localhost";  try {    localhostName=InetAddress.getLocalHost().getHostAddress();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,ex.toString(),ex);  }  try {    _containerName=getConfigString(config,"containerName",localhostName);    _spaceName=getConfigString(config,"spaceName","JavaSpaces");    _clusterConfigURL=getConfigString(config,"clusterConfigURL",null);    _licenseKey=getConfigString(config,"licenseKey",null);    _homeDirectory=getConfigString(config,"homeDirectory",null);    _initialMemberGroups=getConfigString(config,"initialMemberGroups",null);    _initialLookupLocators=getConfigString(config,"initialLookupLocators",null);    _downloadHost=getConfigString(config,"downloadHost",localhostName + ":9010");    _schemaName=getConfigString(config,"schema",null);    _customPropertiesFileName=getConfigString(config,"properties",null);    _spaceUrl=getConfigString(config,"spaceURL",null);    _startEmbeddedLus=getConfigBoolean(config,"startEmbeddedLus",Boolean.FALSE);  } catch (  ConfigurationException e) {    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,"Error while loading JSpaceService. " + e.toString() + " Please check the Jini configuration files.");  }  if (_containerName != null)   System.setProperty(SystemProperties.DB_CONTAINER_NAME,_containerName);  if (_licenseKey != null)   System.setProperty(SystemProperties.LICENSE_KEY,_licenseKey);  if (_homeDirectory != null)   System.setProperty(SystemProperties.GS_HOME,_homeDirectory);  if (_initialMemberGroups != null) {    SystemInfo.singleton().lookup().setGroups(JSpaceUtilities.removeInvertedCommas(_initialMemberGroups));  }  if (_initialLookupLocators != null)   SystemInfo.singleton().lookup().setLocators(JSpaceUtilities.removeInvertedCommas(_initialLookupLocators));  if (_downloadHost != null)   System.setProperty("com.gs.downloadhost",_downloadHost);  if (_startEmbeddedLus != null)   System.setProperty(SystemProperties.START_EMBEDDED_LOOKUP,_startEmbeddedLus.toString());}  }
class C{  private void initWidget(){  SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_about_swipeBackLayout);  swipeBackLayout.setOnSwipeListener(this);  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_about_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)findViewById(R.id.activity_about_container);  this.recyclerView=(RecyclerView)findViewById(R.id.activity_about_recyclerView);  recyclerView.setAdapter(new AboutAdapter(this));  recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));}  }
class C{  protected void normalizeWhitespace(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    int c=value.ch[i];    if (c < 0x20) {      value.ch[i]=' ';    }  }}  }
class C{  private void releasePrecachingWakeLock(){  if (mPrecachingWakeLock != null && mPrecachingWakeLock.isHeld()) {    mPrecachingWakeLock.release();  }}  }
class C{  public boolean isDebugEnabled(){  return this.logger.isDebugEnabled();}  }
class C{  private ArmorUpdate(EntityPlayer player,ItemStack stack){  this.player=player;  this.stack=stack;}  }
class C{  public static boolean checkAndTryInstallGapidSdkComponent(Project project){  if (!GapiPaths.isValid()) {    Window window=WindowManager.getInstance().suggestParentWindow(project);    int result=JOptionPane.showConfirmDialog(window,"GPU Tools are not installed, install now?","GPU Tools Missing",JOptionPane.OK_CANCEL_OPTION);    if (result != JOptionPane.OK_OPTION) {      return false;    }    final Collection<String> missingComponents=GapiPaths.getMissingSdkComponents();    if (missingComponents.isEmpty()) {      Logger.getInstance(GfxTraceCaptureAction.class).warn("no valid package to install found");      return false;    }    ModelWizardDialog dialog=SdkQuickfixUtils.createDialogForPaths(project,missingComponents);    if (dialog == null) {      Logger.getInstance(GfxTraceCaptureAction.class).warn("this is strange, we got no dialog back from createDialogForPaths");      return false;    }    dialog.setTitle("Install Missing Components");    if (!dialog.showAndGet()) {      return false;    }  }  return true;}  }
class C{  public static boolean isValidCode(String code){  return code != null && CODE_PATTERN.matcher(code).matches();}  }
class C{  public T walkInOptimizedOrder(final FieldVectorPreservingVisitor<T> visitor){  return walkInDefaultOrder(visitor);}  }
class C{  private List<XtnEntry> initReadLockOwnersIfNeed(){  if (_readLocksOwners == null)   _readLocksOwners=new ArrayList<XtnEntry>();  return _readLocksOwners;}  }
class C{  public int peek(){  if (type == MUST_READ) {    int argAndType=in.readByte() & 0xff;    type=argAndType & 0x1f;    arg=(argAndType & 0xe0) >> 5;  }  return type;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void addActivity(AXmlNode node){  if (activities.isEmpty())   activities=new ArrayList<AXmlNode>();  activities.add(node);}  }
class C{  private boolean isTestMode(){  return ((System.getProperty("c2mon.server.testMode")) != null && (System.getProperty("c2mon.server.testMode").equals("true")));}  }
class C{  public static String encrypt16bits(String message) throws Exception {  SecretKeySpec skeySpec=new SecretKeySpec(Settings.sEncryptKey.getBytes(),"AES");  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.ENCRYPT_MODE,skeySpec);  byte[] encrypted=cipher.doFinal(message.getBytes());  return Hex.encodeHexString(encrypted);}  }
class C{  private static String toBrowserHexValue(int number){  StringBuilder builder=new StringBuilder(Integer.toHexString(number & 0xff));  while (builder.length() < 2) {    builder.insert(0,"0");  }  return builder.toString().toUpperCase();}  }
class C{  @Override public void occurrence(short occurrence,Augmentations augmentations) throws XNIException {}  }
class C{  public PageAllocator(String fName,boolean wipe){  this(fName,wipe,true);}  }
class C{  private String findShortcut(String urlMask){  String longest=StringUtils.EMPTY;  String[] parts=StringUtils.split(urlMask,MASK_ANY_SYMBOL + MASK_SEPARATOR + MASK_PIPE);  for (  String part : parts) {    if (part.length() > longest.length()) {      longest=part;    }  }  if (longest.length() > SHORTCUT_LENGTH) {    return longest.substring(longest.length() - SHORTCUT_LENGTH).toLowerCase();  } else {    return longest.toLowerCase();  }}  }
class C{  public Builder withRange(ByteString endKey){  this.endKey=Optional.ofNullable(endKey);  return this;}  }
class C{  private static float constrain(float amount,float low,float high){  return amount < low ? low : (amount > high ? high : amount);}  }
class C{  public void subtract(final double[] lhs,final int lhsOffset,final double[] rhs,final int rhsOffset,final double[] result,final int resultOffset){  for (int i=0; i < getSize(); ++i) {    result[resultOffset + i]=lhs[lhsOffset + i] - rhs[rhsOffset + i];  }}  }
class C{  protected void assertFailsWith(String command,String args,String... fragments) throws Exception {  try {    send(command,args);    fail("did not hit expected exception");  } catch (  IOException ioe) {    for (    String fragment : fragments) {      if (ioe.getMessage().contains(fragment) == false) {        fail("expected: " + fragment + "\nactual: \""+ ioe.getMessage());      }    }  }}  }
class C{  private Map<String,Integer> loadAssignmentFiles(String cName,String fileName){  final File file=new File(Basic.replaceFileSuffix(fileName,"." + cName.toLowerCase()));  if (file.exists() && file.canRead()) {    System.err.println("External assignment file for " + cName + " detected: "+ fileName);    final Map<String,Integer> map=new HashMap<>();    try (final FileInputIterator it=new FileInputIterator(file,true)){      while (it.hasNext()) {        final String[] tokens=Basic.split(it.next(),'\t');        if (tokens.length == 2 && Basic.isInteger(tokens[1])) {          map.put(tokens[0],Basic.parseInt(tokens[1]));        }      }    } catch (    IOException ex) {      System.err.println(ex.getMessage());    }    System.err.println("Count: " + map.size());    if (map.size() > 0)     return map;  }  return null;}  }
class C{  @Override public V remove(Object o){  throw new UnsupportedOperationException("Remove is not defined on DelegatingMap. Add is the only allowed modification operation.");}  }
class C{  private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {    throw new NumberFormatException(value);  }  int i=beginIndex;  int result=0;  int digit;  if (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result=-digit;  }  while (i < endIndex) {    digit=Character.digit(value.charAt(i++),10);    if (digit < 0) {      throw new NumberFormatException("Invalid number: " + value.substring(beginIndex,endIndex));    }    result*=10;    result-=digit;  }  return -result;}  }
class C{  public boolean duplicateAttribute(String attribute,String newName,boolean allowReplaceSample){  if (allowReplaceSample || !table.columnKeySet().contains(newName)) {    Map<String,Object> samples2values=table.column(attribute);    boolean result=addAttribute(newName,samples2values,true,false);    if (result)     attribute2type.put(newName,attribute2type.get(attribute));    return result;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE(String value0){  return new SM_SYSTEM_MESSAGE(1300620,value0);}  }
class C{  private static double polySine(final double x){  double x2=x * x;  double p=2.7553817452272217E-6;  p=p * x2 + -1.9841269659586505E-4;  p=p * x2 + 0.008333333333329196;  p=p * x2 + -0.16666666666666666;  p=p * x2 * x;  return p;}  }
class C{  public void renew(long extension) throws LeaseDeniedException, UnknownLeaseException {  _leaseRenewed=true;  _leaseRenewedExtension=extension;  str.setLease(extension);  ParticipantHandle[] phs=parthandles();  if (phs == null)   return;  for (  ParticipantHandle ph : phs) {    renewParticipantLease(ph,extension);  }}  }
class C{  private float recursiveConnectedDistanceToRoot(ScoutWidget[] list,Direction direction){  if (isDistanceToRootCache(direction)) {    return mDistToRootCache[direction.getDirection()];  }  ConstraintAnchor.Type anchorType=lookupType(direction);  ConstraintAnchor anchor=mConstraintWidget.getAnchor(anchorType);  if (anchor == null || !anchor.isConnected()) {    return Float.NaN;  }  float margin=anchor.getMargin();  ConstraintAnchor toAnchor=anchor.getTarget();  ConstraintWidget toWidget=toAnchor.getOwner();  if (list[0].mConstraintWidget == toWidget) {    return margin;  }  if (toAnchor.getType() == anchorType) {    for (    ScoutWidget scoutWidget : list) {      if (scoutWidget.mConstraintWidget == toWidget) {        float dist=scoutWidget.recursiveConnectedDistanceToRoot(list,direction);        scoutWidget.cacheRootDistance(direction,dist);        return margin + dist;      }    }  }  if (toAnchor.getType() == lookupType(direction.getOpposite())) {    for (    ScoutWidget scoutWidget : list) {      if (scoutWidget.mConstraintWidget == toWidget) {        margin+=scoutWidget.getLength(direction);        float dist=scoutWidget.recursiveConnectedDistanceToRoot(list,direction);        scoutWidget.cacheRootDistance(direction,dist);        return margin + dist;      }    }  }  return Float.NaN;}  }
class C{  static void changeViewVisibilityGone(View view){  if (view != null && view.getVisibility() == View.VISIBLE)   view.setVisibility(View.GONE);}  }
class C{  private CellRendererHelper(){}  }
class C{  public void validate(final TagQualityStatus statusToRemove){  Tag clone=null;  updateTagLock.writeLock().lock();  try {    if (LOG.isTraceEnabled()) {      LOG.trace("validate() - Removing " + statusToRemove + " quality status from tag "+ this.id);    }    if (tagQuality.isInvalidStatusSet(statusToRemove)) {      tagQuality.removeInvalidStatus(statusToRemove);      clone=this.clone();    }  }  finally {    updateTagLock.writeLock().unlock();  }  if (clone != null) {    notifyListeners(clone);  }}  }
class C{  public int length(){  return NGramHistogram.size();}  }
class C{  @SuppressWarnings("unchecked") public List<Object> splitByIndentBlocks(String text,int minSize,int maxSize){  final Pattern indentLinePat=Pattern.compile("^([ ]" + makeRegexRangeExpr(minSize,maxSize) + ")(\\S.*)(\\n|\\z)",Pattern.MULTILINE);  Map<String,Object> modelMap=FtlDocFileParser.makeObjectMap();  modelMap.put("type","indent");  List<Object> lineList=splitByPat(text,indentLinePat,modelMap,"origText","indentSpaces","value");  int lastBlockIndentSize=0;  msgHandler.logDebug("====================================\n" + "splitByIndentBlocks: entry count: " + lineList.size() + "\n"+ "====================================");  List<Object> res=new ArrayList<>();  for (  Object entry : lineList) {    if (entry instanceof String) {      String entryText=(String)entry;      msgHandler.logDebug("TEXT: " + entryText);      res.add(entryText);      lastBlockIndentSize=0;      msgHandler.logDebug("did reset");    } else {      Map<String,Object> lineInfo=(Map<String,Object>)entry;      String indentSpaces=(String)lineInfo.get("indentSpaces");      int indentSize=indentSpaces.length();      lineInfo.put("indentSize",indentSize);      msgHandler.logDebug("INDENT LINE: " + lineInfo.get("value").toString());      msgHandler.logDebug("indentSize " + indentSize + " lastBlockIndentSize "+ lastBlockIndentSize);      if (lastBlockIndentSize > 0 && indentSize >= lastBlockIndentSize) {        msgHandler.logDebug("append: indentSize " + indentSize + " lastBlockIndentSize "+ lastBlockIndentSize);        Map<String,Object> blockInfo=(Map<String,Object>)res.get(res.size() - 1);        String blockText=(String)blockInfo.get("value");        String lineText=(String)lineInfo.get("value");        blockText+="\n";        for (int i=0; i < (indentSize - lastBlockIndentSize); i++) {          blockText+=" ";        }        blockText+=lineText;        blockInfo.put("value",blockText);      } else {        msgHandler.logDebug("was new block");        res.add(lineInfo);        lastBlockIndentSize=indentSize;      }    }  }  return res;}  }
class C{  XSComplexTypeDecl traverseLocal(Element complexTypeNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){  Object[] attrValues=fAttrChecker.checkAttributes(complexTypeNode,false,schemaDoc);  String complexTypeName=genAnonTypeName(complexTypeNode);  contentBackup();  XSComplexTypeDecl type=traverseComplexTypeDecl(complexTypeNode,complexTypeName,attrValues,schemaDoc,grammar);  contentRestore();  grammar.addComplexTypeDecl(type,fSchemaHandler.element2Locator(complexTypeNode));  type.setIsAnonymous();  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return type;}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  @Override public RecordReader createReader(InputSplit split) throws IOException, InterruptedException {  RecordReader reader=new ListStringRecordReader();  reader.initialize(split);  return reader;}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public void transform(MatrixN mat){  final VectorN tmp=new VectorN(size());  for (int i=0; i < size(); i++) {    double f=0d;    for (int j=0; j < size(); j++)     f+=mat.get(i,j) * get(j);    tmp.set(i,f);  }  set(tmp);}  }
class C{  public S2LatLng add(final S2LatLng o){  return new S2LatLng(latRadians + o.latRadians,lngRadians + o.lngRadians);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsGreaterThanImpl filter=null;  if ((parameterList == null) || (parameterList.size() < 3)) {    filter=new IsGreaterThanExtended();  } else {    filter=new IsGreaterThanExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  protected Object cloneBody(){  return cloneObject(Body);}  }
class C{  public boolean swapBuffers(EGLSurface eglSurface){  return EGL14.eglSwapBuffers(eGLDisplay,eglSurface);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_HOSTILE_DEATH_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1360003,value0);}  }
class C{  public static boolean checkPointWithMultiPolygon(double longitude,double latitude,String multiPolygonJson,FeatureType featureType){  try {    boolean contains=false;    GeometryJSON gtjson=new GeometryJSON();    Point point=getGeoJsonPoint(longitude,latitude);    if (point != null && point.isValid()) {      if (featureType == FeatureType.POLYGON) {        Polygon polygon=gtjson.readPolygon(new StringReader("{\"type\":\"Polygon\", \"coordinates\":" + multiPolygonJson + "}"));        contains=polygon.contains(point);      } else       if (featureType == FeatureType.MULTI_POLYGON) {        MultiPolygon multiPolygon=gtjson.readMultiPolygon(new StringReader("{\"type\":\"MultiPolygon\", \"coordinates\":" + multiPolygonJson + "}"));        contains=multiPolygon.contains(point);      }    }    return contains;  } catch (  Exception ex) {    return false;  }}  }
class C{  @Override public final byte readByte(){  return (byte)bs.readByte();}  }
class C{  public static final Polygon scale(Polygon polygon,double scale){  if (polygon == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  Vector2[] oVertices=polygon.vertices;  int size=oVertices.length;  Vector2[] vertices=new Vector2[size];  Vector2 center=polygon.center;  for (int i=0; i < size; i++) {    vertices[i]=center.to(oVertices[i]).multiply(scale).add(center);  }  return new Polygon(vertices);}  }
class C{  private static <T>T hashMapToObject(LinkedHashMap map,Class<T> type){  try {    return stringToObject(mapper.writeValueAsString(map),type);  } catch (  IOException e) {    log.warn("Could not create a object of the class " + type.getName() + " out of the map "+ map.toString()+ " :"+ e.getMessage());    return null;  }}  }
class C{  static public String replaceInString(String content,String oldStr,String newStr,boolean replaceAll){  int startInx=0;  String lowCaseContent=content.toLowerCase();  StringBuilder originalCotext=new StringBuilder(content);  String lowSearchStr=oldStr.toLowerCase();  while ((startInx=lowCaseContent.indexOf(lowSearchStr,startInx)) != -1) {    int endInx=startInx + oldStr.length();    content=originalCotext.replace(startInx,endInx,newStr).toString();    lowCaseContent=originalCotext.toString().toLowerCase();    startInx=endInx;    if (!replaceAll)     return content;  }  return content;}  }
class C{  private void computeTaintPaths(final Set<AbstractionAtSink> res){  IAbstractionPathBuilder builder=this.pathBuilderFactory.createPathBuilder(maxThreadNum,iCfg);  builder.computeTaintPaths(res);  this.results=builder.getResults();  builder.shutdown();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public Covariance(double[][] data) throws MathIllegalArgumentException {  this(data,true);}  }
class C{  public void sendDelayedTimeDeadbandValues(){  this.equipmentLogger.debug("sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server");  this.equipmentSenderValid.sendDelayedTimeDeadbandValues();}  }
class C{  @Override public void write(DataOutput out) throws IOException {}  }
class C{  public boolean isGameEnd(){  return isGameEnd;}  }
class C{  public synchronized void write(LogRecord rec) throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(SimpleLogFile.class.getName(),"write",rec);  }  try {    if (!valid)     throw new InvalidatedLogException("Cannot write to to " + "invalidated log");    if (readonly)     throw new LogException("Unable to write to read only log");    if (out == null) {      boolean append=true;      File log=new File(name);      outfile=new FileOutputStream(name,append);      out=new HeaderlessObjectOutputStream(new BufferedOutputStream(outfile));      if (log.length() == 0) {        out.writeLong(cookie);      }      out.reset();    }    out.writeObject(rec);    out.flush();    outfile.getFD().sync();    if (persistenceLogger.isLoggable(Level.FINEST)) {      persistenceLogger.log(Level.FINEST,"Wrote: {0}",rec);    }  } catch (  InvalidClassException ice) {    if (persistenceLogger.isLoggable(Level.WARNING)) {      persistenceLogger.log(Level.WARNING,"Problem persisting LogRecord",ice);    }  }catch (  NotSerializableException nse) {    if (persistenceLogger.isLoggable(Level.WARNING)) {      persistenceLogger.log(Level.WARNING,"Problem persisting LogRecord",nse);    }  }catch (  IOException ioe) {    if (persistenceLogger.isLoggable(Level.WARNING)) {      persistenceLogger.log(Level.WARNING,"Problem persisting LogRecord",ioe);    }  }catch (  SecurityException se) {    if (persistenceLogger.isLoggable(Level.WARNING)) {      persistenceLogger.log(Level.WARNING,"Problem persisting LogRecord",se);    }  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(SimpleLogFile.class.getName(),"write",rec);  }}  }
class C{  public AdamsBashforthIntegrator(final int nSteps,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance) throws MathIllegalArgumentException {  super(METHOD_NAME,nSteps,nSteps,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public static boolean isSecond(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,0,59);}  }
class C{  private Target createTarget(Element domElement){  FeatureDefinition featDef=this.featureDefinition;  int numFeatures=featDef.getNumberOfFeatures();  int numByteFeatures=featDef.getNumberOfByteFeatures();  int numShortFeatures=featDef.getNumberOfShortFeatures();  int numContiniousFeatures=featDef.getNumberOfContinuousFeatures();  byte[] byteFeatures=new byte[numByteFeatures];  short[] shortFeatures=new short[numShortFeatures];  float[] floatFeatures=new float[numContiniousFeatures];  int byteCount=0;  int shortCount=0;  int floatCount=0;  for (int i=0; i < numFeatures; i++) {    String featName=featDef.getFeatureName(i);    String featValue="0";    if (featDef.isByteFeature(featName) || featDef.isShortFeature(featName)) {      if (domElement.hasAttribute(featName)) {        featValue=domElement.getAttribute(featName);      }      boolean hasFeature=featDef.hasFeatureValue(featName,featValue);      if (!hasFeature)       featValue="0";      if (featDef.isByteFeature(i)) {        byteFeatures[byteCount++]=featDef.getFeatureValueAsByte(i,featValue);      } else       if (featDef.isShortFeature(i)) {        shortFeatures[shortCount++]=featDef.getFeatureValueAsShort(i,featValue);      }    } else {      if (domElement.hasAttribute("meaning")) {        featValue=domElement.getAttribute("meaning");      }      floatFeatures[floatCount++]=getMeaningScaleValue(featName,featValue);    }  }  FeatureVector newFV=featDef.toFeatureVector(0,byteFeatures,shortFeatures,floatFeatures);  String name="0";  if (domElement.hasAttribute("name")) {    name=domElement.getAttribute("name");  }  Target newTarget=new Target(name,domElement);  newTarget.setFeatureVector(newFV);  return newTarget;}  }
class C{  public void unregisterPackageProvider(TracerPackageProvider povider){  TracerSupportImpl.getInstance().unregisterPackageProvider(povider);}  }
class C{  public static void clickButtonRewiModWebsite(){  RewiMod.getInstance().openUrl("https://rewinside.tv/Thread/57412-Offiziell-RewiMod/");}  }
class C{  public boolean isAintersects(BitSet H){  return A.intersects(H);}  }
class C{  @Override public void clear(){  Node<E> node;  while ((node=top.get()) != null) {    top.compareAndSet(node,node.next);  }}  }
class C{  private void initView(){  this.initContentView();  this.initLoadingView();}  }
class C{  public static void main(String[] args){  MouseInteraction simulation=new MouseInteraction();  simulation.run();}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.item_about_header_backButton:    Mysplash.getInstance().getTopActivity().finish();  Mysplash.getInstance().getTopActivity().overridePendingTransition(0,R.anim.activity_slide_out_bottom);break;case R.id.item_about_header_unsplashContainer:Uri uri=Uri.parse(Mysplash.UNSPLASH_URL);v.getContext().startActivity(new Intent(Intent.ACTION_VIEW,uri));break;}}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @Override public long skip(long n) throws IOException {  throw exception;}  }
class C{  public static DoubleBuffer createDoubleBuffer(DoubleBuffer buf,int size){  if (buf != null && buf.limit() == size) {    buf.rewind();    return buf;  }  buf=createDoubleBuffer(size);  return buf;}  }
class C{  public boolean isFinished(){  return !Executor.isProcessAlive(getProcess());}  }
class C{  private void readSudoUserinformationFromFile(){  BufferedReader br;  try {    br=new BufferedReader(new FileReader(Settings.sServerInfo));    sSudoID=EncryptionManager.decrypt64bits(br.readLine());    sSudoPassword=EncryptionManager.decrypt64bits(br.readLine());    sEmailAddress=EncryptionManager.decrypt64bits(br.readLine());    isMakeSudoId=Boolean.parseBoolean(EncryptionManager.decrypt64bits(br.readLine()));    br.close();  } catch (  FileNotFoundException e) {    System.out.println("serverinfo.jrc do not exist");  }catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }  System.out.println("file reading complete");}  }
class C{  public SigDefLine parse(String line){  String[] tokens=line.trim().split(",");  if (tokens.length != 8) {    return null;  }  SigDefLine ml=new SigDefLine();  ml.cname=tokens[0];  if (!ml.cname.startsWith("L") || !ml.cname.endsWith(";")) {    return null;  }  ml.mname=tokens[1];  if (ml.mname.isEmpty()) {    return null;  }  ml.shorty=tokens[2];  if (ml.shorty.isEmpty()) {    return null;  }  ml.prototype=tokens[3];  if (ml.prototype.isEmpty()) {    return null;  }  ml.opcount=Conversion.stringToInt(tokens[4]);  if (ml.opcount < 0) {    return null;  }  ml.mhash_tight=tokens[5];  ml.mhash_loose=tokens[6];  if (!tokens[7].equals("null")) {    ml.caller=tokens[7];  } else {    ml.caller="";  }  return ml;}  }
class C{  public void reset(){  localDeque.clear();  localDeque.push(new FramePath());}  }
class C{  protected final void assertionError(String message,Throwable cause){  StringBuilder b=new StringBuilder();  if (cdl.getCount() != 0) {    b.append("(active) ");  }  b.append(message);  List<Throwable> err=errors;  if (!err.isEmpty()) {    b.append(" (+ ").append(err.size()).append(" errors)");  }  AssertionError e=new AssertionError(b.toString(),cause);  for (  Throwable t : err) {    e.addSuppressed(t);  }  throw e;}  }
class C{  public boolean isSimpleType(final Field field){  Class<?> type=field.getType();  boolean simpleType=type.isAssignableFrom(Short.TYPE) || type.isAssignableFrom(Integer.TYPE) || type.isAssignableFrom(Float.TYPE)|| type.isAssignableFrom(Double.TYPE)|| type.isAssignableFrom(Long.TYPE)|| type.isAssignableFrom(Byte.TYPE)|| type.isAssignableFrom(Character.TYPE)|| type.isAssignableFrom(Boolean.TYPE);  return simpleType;}  }
class C{  @Override public void write(char[] chr,int st,int end) throws IOException {  out.write(chr,st,end);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public static Uri createFileUri(String path){  if (path.startsWith("file://")) {    return Uri.parse(path);  }  return Uri.fromFile(new File(path));}  }
class C{  public static boolean copyFile(String sourceFilePath,String destFilePath){  InputStream inputStream=null;  try {    inputStream=new FileInputStream(sourceFilePath);  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }  return writeFile(destFilePath,inputStream);}  }
class C{  public static void registerClass(Class<?> clazz){  registrations.add(clazz);}  }
class C{  public static void put(Context context,String fileName,String key,Object ser){  put(context,fileName,key,ser,null);}  }
class C{  public LoadImplementor(LoadModel model,LoadView view){  this.model=model;  this.view=view;}  }
class C{  private Director findOpenDirector(String daaFile){  final File file=new File(daaFile);  if (file.isFile()) {    for (    IDirector dir : ProjectManager.getProjects()) {      File aFile=new File(((Director)dir).getDocument().getMeganFile().getFileName());      if (aFile.isFile() && aFile.equals(file))       return (Director)dir;    }  }  return null;}  }
class C{  public RangePredicate(int operation,Expression middle,Expression left,Expression right){  this(operation,middle,left,right,DefaultLiteralComparator.getInstance());}  }
class C{  public VideoReportQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  private void validate(int parameter,String parameterName) throws BadPaginationException {  if (parameter < MINIMAL_VALUE) {    ErrorMessageFormat errorMessage=ErrorMessageFormat.PAGINATION_PARAMETER_INVALID;    LOG.debug(errorMessage.logFormat(parameterName,parameter));    throw new BadPaginationException(errorMessage.format(parameterName,parameter));  }}  }
class C{  public static void operateTraced(ResourceResolverFactory factory,OperateCallback callback){  operateTraced(factory,null,callback);}  }
class C{  public PlacesCheckinQuery services(PlacesCheckinService... value){  return unsafeParam("services",value);}  }
class C{  @Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){  Calendar cal=getCalendar();  dateTimeUnit.setDay(1);  dateTimeUnit=cal.minusMonths(dateTimeUnit,(dateTimeUnit.getMonth() % 2) + 10);  List<Period> periods=Lists.newArrayList();  for (int i=0; i < 6; i++) {    periods.add(createPeriod(dateTimeUnit,cal));    dateTimeUnit=cal.plusMonths(dateTimeUnit,2);  }  return periods;}  }
class C{  public DatabaseGetCitiesByIdQuery(VkApiClient client,UserActor actor){  super(client,"database.getCitiesById",Utils.buildParametrizedType(List.class,BaseObject.class));  accessToken(actor.getAccessToken());}  }
class C{  public boolean needsRewrite(){  ASTNode$State state=state();  try {    return false;  }  finally {  }}  }
class C{  protected void remove_impl(Segment<T> segment,ObjectInfo<T> oi){  if (oi.isDeleted())   throw new RuntimeException(" Stored list- called remove but element already deleted !");  if (segment.getSize() == 0)   throw new RuntimeException(" Stored list- called remove but list is empty !");  oi.setSubject(null);  if (oi.getForwardRef() != null)   oi.getForwardRef().setBackwardRef(oi.getBackwardRef());  if (oi.getBackwardRef() != null)   oi.getBackwardRef().setForwardRef(oi.getForwardRef());  if (segment.getTail() == oi)   segment.setTail(oi.getBackwardRef());  segment.decrementSize();  _size.decrementAndGet();  oi.setDeleted();}  }
class C{  public void afterMemberAdded(MemberAddedEvent memberAddedEvent){}  }
class C{  public void createSets(boolean bEvenly,double dPartOfTheCorpus){  createSets(bEvenly,dPartOfTheCorpus,false);}  }
class C{  String calculateRawEncoding(String bomEnc,String xmlGuessEnc,String xmlEnc) throws IOException {  if (bomEnc == null) {    if (xmlGuessEnc == null || xmlEnc == null) {      return defaultEncoding == null ? UTF_8 : defaultEncoding;    }    if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {      return xmlGuessEnc;    }    return xmlEnc;  }  if (bomEnc.equals(UTF_8)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  if (bomEnc.equals(UTF_32BE) || bomEnc.equals(UTF_32LE)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_32) && !xmlEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  String msg=MessageFormat.format(RAW_EX_2,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});  throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);}  }
class C{  public ZWaveHailCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Inject public FavoritesResource(final HttpHeader httpHeader,final Favorites favorites,final Authorization authorization){  this.httpHeader=httpHeader;  this.favorites=favorites;  this.authorization=authorization;}  }
class C{  public int value(){  return _map._values[_index];}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static boolean isUSPhoneMainNumber(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneMainNumber);}  }
class C{  public static Query prepareQuery(Map map){  Query query=null;  boolean useHdfs=(boolean)map.get(StormConstants.USE_HDFS);  String hdfsUri=(String)map.get(StormConstants.HDFS_URI_KEY);  String queryFile=(String)map.get(StormConstants.QUERY_FILE_KEY);  try {    query=StormUtils.getQuery(useHdfs,hdfsUri,queryFile);  } catch (  Exception e) {    logger.warn("Unable to initialize query info.",e);  }  return query;}  }
class C{  public DefaultHibernateSpaceDataSourceConfigurer performOrderById(boolean performOrderById){  this.performOrderById=performOrderById;  return this;}  }
class C{  public Matrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  public void takePicture() throws NullPointerException {  Intent takePictureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  if (takePictureIntent.resolveActivity(activity.getPackageManager()) != null) {    File photoFile=Utils.createImageFile(context,dirName,imageName,imageType);    if (photoFile != null) {      cameraBitmapPath=photoFile.getAbsolutePath();      takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(photoFile));      activity.startActivityForResult(takePictureIntent,REQUEST_TAKE_PHOTO);    } else {      throw new NullPointerException("Bitmap received from camera is null");    }  } else {    throw new NullPointerException("Unable to open camera");  }}  }
class C{  private void internal_populateEnumField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String value=options.get(key);    fieldConfigVisitor.populateComboBoxField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public AemContentFinder collapse(){  if (isExpanded()) {    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ContentFinderActions.collapse());    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(expandButton));  }  return this;}  }
class C{  synchronized public static void toFile(String context,String fileName,boolean append) throws IOException {  PrintStream ps=new PrintStream(new FileOutputStream(fileName,append));  ps.println(context);  ps.flush();  ps.close();}  }
class C{  public final boolean between(int iNum,int iMin,int iMax){  return (iNum >= iMin) && (iNum <= iMax);}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public ProcessChange doCreateControlTag(ConfigurationElement element) throws IllegalAccessException {  checkId(element.getEntityId());  tagCache.acquireWriteLockOnKey(element.getEntityId());  try {    LOGGER.trace("Creating ControlTag " + element.getEntityId());    ControlTag controlTag=commonTagFacade.createCacheObject(element.getEntityId(),element.getElementProperties());    if (controlTag.getEquipmentId() != null) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Equipment id cannot be set at creation time for ControlTags - unable to configure.");    }    try {      configurableDAO.insert(controlTag);    } catch (    Exception e) {      LOGGER.error("Exception caught while inserting a new Control Tag into the DB - rolling back changes",e);      throw new UnexpectedRollbackException("Unexpected exception while creating a Control Tag: rolling back the change",e);    }    try {      tagCache.putQuiet(controlTag);      ProcessChange processChange=new ProcessChange();      if (processFacade.getProcessIdFromControlTag(controlTag.getId()) != null) {        processChange=new ProcessChange(processFacade.getProcessIdFromControlTag(controlTag.getId()));      }      return processChange;    } catch (    Exception e) {      LOGGER.error("Exception caught while creating a ControlTag in cache - " + "rolling back DB transaction and removing from cache.",e);      tagCache.remove(controlTag.getId());      throw new UnexpectedRollbackException("Unexpected exception while creating a Control Tag: rolling back the change",e);    }  }  finally {    tagCache.releaseWriteLockOnKey(element.getEntityId());  }}  }
class C{  public void unlockUserInput(){  commandManager.setEnableCritical(true);  locked=false;}  }
class C{  private boolean compareChromaPanes(boolean crossed){  int d, f=0;  for (int j=0; j < NB_DECODED; j++) {    if (mDecodedVideo[j] != null) {      if (!crossed) {        for (int i=mSize; i < 3 * mSize / 2; i+=1) {          d=(mInitialImage[i] & 0xFF) - (mDecodedVideo[j][i] & 0xFF);          d=d < 0 ? -d : d;          if (d > 50) {            f++;            break;          }        }      } else {        for (int i=mSize; i < 3 * mSize / 2; i+=2) {          d=(mInitialImage[i] & 0xFF) - (mDecodedVideo[j][i + 1] & 0xFF);          d=d < 0 ? -d : d;          if (d > 50) {            f++;          }        }      }    }  }  return f <= NB_DECODED / 2;}  }
class C{  public static final void attackMode(final Summon summon){  summon.setMode(SummonMode.ATTACK);  Player master=summon.getMaster();  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_ATTACK_MODE(summon.getNameId()));  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));  summon.getLifeStats().cancelRestoreTask();}  }
class C{  public WallGetQueryWithExtended(VkApiClient client){  super(client,"wall.get",GetExtendedResponse.class);  extended(true);}  }
class C{  public void removeViewProvider(DataSourceViewProvider provider){  providers.remove(provider);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public PropertyFileLoader(){}  }
class C{  public static float atan(float fValue){  return (float)Math.atan(fValue);}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public NoDataException(){  this(LocalizedFormats.NO_DATA);}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    ValueComboBoxData windSpeedUnits=fieldConfigVisitor.getComboBox(FieldIdEnum.WINDBARB_WINDSPEED_UNITS);    Expression windSpeedExpression=fieldConfigVisitor.getExpression(FieldIdEnum.WINDBARB_WINDSPEED);    boolean inNorthernHemisphere=fieldConfigVisitor.getBoolean(FieldIdEnum.WINDBARB_NORTHERN_HEMISPHERE);    Object windSpeed=null;    if (windSpeedExpression == null) {      windSpeed=Integer.valueOf(0);    } else     if (windSpeedExpression instanceof LiteralExpressionImpl) {      LiteralExpressionImpl literalExpression=(LiteralExpressionImpl)windSpeedExpression;      windSpeed=literalExpression.getValue();    } else     if (windSpeedExpression instanceof ConstantExpression) {      ConstantExpression constantExpression=(ConstantExpression)windSpeedExpression;      windSpeed=constantExpression.getValue();    } else     if (windSpeedExpression instanceof AttributeExpressionImpl) {      AttributeExpressionImpl attributeExpression=(AttributeExpressionImpl)windSpeedExpression;      windSpeed=String.format("<ogc:PropertyName>%s</ogc:PropertyName>",attributeExpression.getPropertyName());      ;    } else {      ConsoleManager.getInstance().error(this,Localisation.getField(WindBarbDetails.class,"WindBarb.windspeedError1") + windSpeedExpression.getClass().getName());    }    String url=String.format("windbarbs://default(%s)[%s]",windSpeed,windSpeedUnits.getKey());    if (!inNorthernHemisphere) {      url=url + HEMISPHERE_S;    }    windBarbsExpression=getFilterFactory().literal(url);    if (parentObj != null) {      parentObj.windBarbValueUpdated();    }  }}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  public static Sound createSound(String chars){  String[] sounds=chars.split(",");  char[] soundSymbols=new char[sounds.length];  int i=0;  for (  String sound : sounds) {    soundSymbols[i]=sound.charAt(0);    i++;  }  return new Sound(soundSymbols);}  }
class C{  static public void createOutputFiles(Result[] result,String fileDst,boolean bAppend) throws IOException {  BufferedWriter output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileDst,bAppend)));  for (  Result res : result) {    output.write("Gen" + res.getGenNum() + ":  scale of "+ res.getScale()+ "  "+ res.getRemark()+ "\n");  }  output.close();  System.err.println();  System.err.println("Results saved to file: " + fileDst);}  }
class C{  private void drawDrawable(Canvas canvas,Bitmap bitmap){  Paint paint=new Paint();  paint.setColor(0xffffffff);  paint.setAntiAlias(true);  PorterDuffXfermode xfermode=new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);  int saveFlags=Canvas.MATRIX_SAVE_FLAG | Canvas.CLIP_SAVE_FLAG | Canvas.HAS_ALPHA_LAYER_SAVE_FLAG| Canvas.FULL_COLOR_LAYER_SAVE_FLAG| Canvas.CLIP_TO_LAYER_SAVE_FLAG;  canvas.saveLayer(0,0,width,height,null,saveFlags);  if (shapeType == 1) {    canvas.drawCircle(width / 2,height / 2,width / 2 - 1,paint);  } else   if (shapeType == 2) {    RectF rectf=new RectF(1,1,getWidth() - 1,getHeight() - 1);    canvas.drawRoundRect(rectf,radius + 1,radius + 1,paint);  }  paint.setXfermode(xfermode);  float scaleWidth=((float)getWidth()) / bitmap.getWidth();  float scaleHeight=((float)getHeight()) / bitmap.getHeight();  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);  canvas.drawBitmap(bitmap,0,0,paint);  canvas.restore();}  }
class C{  private Object readResolve(){  return val ? YES : NO;}  }
class C{  public MinecraftFont(){  this(true);}  }
class C{  @Override public void create(final SubEquipmentCacheObject subEquipment) throws SubEquipmentException {  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("create() - Create a subEquipment with the id: " + subEquipment.getId());  }  try {    subEquipmentMapper.insertSubEquipment(subEquipment);  } catch (  DataAccessException e) {    throw new SubEquipmentException(e.getMessage());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_INVALID_RANK(int value0){  return new SM_SYSTEM_MESSAGE(1300370,new DescriptionId(value0));}  }
class C{  public GroupsGetQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public static double[] computeAmplitudeSpectrum(final double[] signal){  if (signal == null)   throw new NullPointerException("Received null argument");  int N=signal.length;  if (!MathUtils.isPowerOfTwo(N)) {    N=MathUtils.closestPowerOfTwoAbove(N);  }  double[] real=new double[N];  System.arraycopy(signal,0,real,0,signal.length);  realTransform(real,false);  return computeAmplitudeSpectrum_FD(real);}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200528,skilltarget,skillname);}  }
class C{  Item delete(Item item,Player actor){  return delete(item,ItemDeleteType.QUEST_REWARD,actor);}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  int end=indexOf(str,0,len,'T');  int dateEnd=getDate(str,0,end,date);  getTime(str,end + 1,len,date);  if (dateEnd != end) {    throw new RuntimeException(str + " is an invalid dateTime dataype value. " + "Invalid character(s) seprating date and time values.");  }  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  return date;}  }
class C{  public static double polynomialDistance(double[] coeffs1,double[] coeffs2){  if (coeffs1 == null || coeffs2 == null)   throw new NullPointerException("Received null argument");  if (coeffs1.length != coeffs2.length)   throw new IllegalArgumentException("Can only compare polynomials with same order");  double dist=0;  int order=coeffs1.length - 1;  for (int i=0; i <= order; i++) {    dist+=(coeffs1[order - i] - coeffs2[order - i]) / (i + 1);  }  return Math.abs(dist);}  }
class C{  public float computeAlignmentExpected(int queryLength,int rawScore){  double bitScore=(float)((lambda * rawScore - lnK) / LN_2);  return (float)(((double)getDbLetters() * queryLength * Math.pow(2,-bitScore)));}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  private void removeObservedFile(OCFile file,Account account){  Log_OC.v(TAG,"Removing a file from being watched");  if (file == null) {    Log_OC.e(TAG,"Trying to remove a NULL file");    return;  }  if (account == null) {    Log_OC.e(TAG,"Trying to add a file with a NULL account to observer");    return;  }  String localPath=file.getStoragePath();  if (localPath == null || localPath.length() <= 0) {    localPath=FileStorageUtils.getDefaultSavePathFor(account.name,file);  }  removeObservedFile(localPath);}  }
class C{  public static String formatTime(long timeDiff){  StringBuilder buf=new StringBuilder();  long hours=timeDiff / (60 * 60 * 1000);  long rem=(timeDiff % (60 * 60 * 1000));  long minutes=rem / (60 * 1000);  rem=rem % (60 * 1000);  long seconds=rem / 1000;  if (hours != 0) {    buf.append(hours);    buf.append("hrs, ");  }  if (minutes != 0) {    buf.append(minutes);    buf.append("mins, ");  }  buf.append(seconds);  buf.append("sec");  return buf.toString();}  }
class C{  public IntegratedParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  @Override public void write(int idx) throws IOException {  out.write(idx);}  }
class C{  public VideoGetTagsQuery(VkApiClient client,UserActor actor,int videoId){  super(client,"video.getTags",Utils.buildParametrizedType(List.class,VideoTag.class));  accessToken(actor.getAccessToken());  videoId(videoId);}  }
class C{  private static Matcher<GroupGenerator> listener(String host,String port,Collection<ObjectName> filter,List<String> subPath,Tags tags) throws Exception {  final Collection<Matcher<? super ObjectName>> filterMatchers=filter.stream().map(null).collect(Collectors.toSet());  final Matcher<Object> jmxUrl=Matchers.hasProperty("connection",Matchers.hasProperty("jmxUrl",Matchers.equalTo(Optional.of(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + host + ":"+ port+ "/jmxrmi")))));  final Matcher<Object> filterProperty=Matchers.hasProperty("filter",Matchers.<ObjectName>arrayContainingInAnyOrder(filterMatchers));  final Matcher<Object> enabled=Matchers.hasProperty("enabled",Matchers.equalTo(true));  final Matcher<Object> resolvedMap=Matchers.hasProperty("resolvedMap",Matchers.hasProperty("groupName",Matchers.equalTo(GroupName.valueOf(SimpleGroupPath.valueOf(subPath),tags))));  return Matchers.allOf(jmxUrl,filterProperty,enabled,resolvedMap);}  }
class C{  @NonNull public static Observable<BigInteger> task6Observable(){  return Observable.just(BigInteger.ONE);}  }
class C{  private void newlineOutsideExpression(){  int oldPos=pos - 1;  if (pos > 1) {    addToken(TokenKind.NEWLINE,oldPos,pos);    oldPos=pos;  }  int indentLen=0;  while (pos < buffer.length) {    char c=buffer[pos];    if (c == ' ') {      indentLen++;      pos++;    } else     if (c == '\t') {      indentLen+=8 - indentLen % 8;      pos++;    } else     if (c == '\n') {      indentLen=0;      pos++;    } else     if (c == '#') {      if (oldPos != pos) {        addToken(TokenKind.WHITESPACE,oldPos,pos);        oldPos=pos;      }      while (pos < buffer.length && c != '\n') {        c=buffer[pos++];      }      addToken(TokenKind.COMMENT,oldPos,pos - 1,bufferSlice(oldPos,pos - 1));      oldPos=pos - 1;      indentLen=0;    } else {      break;    }  }  if (oldPos != pos) {    addToken(TokenKind.WHITESPACE,oldPos,pos);  }  if (pos == buffer.length) {    indentLen=0;  }  int peekedIndent=indentStack.peek();  if (peekedIndent < indentLen) {    indentStack.push(indentLen);    addToken(TokenKind.INDENT,pos,pos);  } else   if (peekedIndent > indentLen) {    while (peekedIndent > indentLen) {      indentStack.pop();      addToken(TokenKind.DEDENT,pos,pos);      peekedIndent=indentStack.peek();    }    if (peekedIndent < indentLen) {      error("indentation error");    }  }}  }
class C{  public void removeAll(String key){  if (key == null) {    throw new NullPointerException("key");  }synchronized (contexts) {    contexts.removeIf(null);  }}  }
class C{  public void addIVCombination(int attackIV,int defenseIV,int staminaIV){  int sumIV=attackIV + defenseIV + staminaIV;  int percentPerfect=Math.round(sumIV / 45f * 100);  if ((percentPerfect < lowPercent) || (percentPerfect == lowPercent) && (attackIV < lowAttack)) {    lowPercent=percentPerfect;    lowAttack=attackIV;    lowDefense=defenseIV;    lowStamina=staminaIV;  }  if ((percentPerfect > highPercent) || (percentPerfect == highPercent) && (attackIV > highAttack)) {    highPercent=percentPerfect;    highAttack=attackIV;    highDefense=defenseIV;    highStamina=staminaIV;  }  iVCombinations.add(new IVCombination(attackIV,defenseIV,staminaIV));}  }
class C{  public AccountSaveProfileInfoQuery countryId(Integer value){  return unsafeParam("country_id",value);}  }
class C{  public VideoSearchQuery hd(Integer value){  return unsafeParam("hd",value);}  }
class C{  public static boolean isTrue(String expression,Map<String,Object> vars){  Object result=evaluate(expression,vars);  return (result != null && result instanceof Boolean) ? (Boolean)result : false;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  @Override public final void writeUTF(String s) throws IOException {  dis.writeUTF(s);}  }
class C{  public static String collapseSpaces(String str){  return collapseCharacter(str,' ');}  }
class C{  public Zdiagmat(Zmat A,int k) throws JampackException {  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  if (k >= 0) {    if (k >= A.ncol) {      throw new JampackException("Diagonal out of range.");    }    order=Math.min(A.nrow,A.ncol - k);    re=new double[order];    im=new double[order];    for (int i=0; i < order; i++) {      re[i]=A.re[i][i + k];      im[i]=A.im[i][i + k];    }  } else {    k=-k;    if (k >= A.nrow) {      throw new JampackException("Diagonal out of range.");    }    order=Math.min(A.nrow - k,A.ncol);    re=new double[order];    im=new double[order];    for (int i=0; i < order; i++) {      re[i]=A.re[i + k][i];      im[i]=A.im[i + k][i];    }  }  getProperties();}  }
class C{  private static void writeLong(long value,OutputStream out) throws IOException {  out.write((int)(value >>> 56) & 0xFF);  out.write((int)(value >>> 48) & 0xFF);  out.write((int)(value >>> 40) & 0xFF);  out.write((int)(value >>> 32) & 0xFF);  out.write((int)(value >>> 24) & 0xFF);  out.write((int)(value >>> 16) & 0xFF);  out.write((int)(value >>> 8) & 0xFF);  out.write((int)(value >>> 0) & 0xFF);}  }
class C{  public static void storeEvent(){  if (event == null) {    return;  }  StaticsAgent.storeObject(event);}  }
class C{  @Override public void onGlobalLayout(){  mTargetWrapperView.getViewTreeObserver().removeOnGlobalLayoutListener(this);  continueAnimation();}  }
class C{  private Record newRecordFromCql(Key key,Iterable<Row> rows){  Iterator<Map.Entry<UUID,Change>> changeIter=decodeChangesFromCql(rows.iterator());  Iterator<Map.Entry<UUID,Compaction>> compactionIter=decodeCompactionsFromCql(rows.iterator());  Iterator<RecordEntryRawMetadata> rawMetadataIter=rawMetadataFromCql(rows.iterator());  return new RecordImpl(key,compactionIter,changeIter,rawMetadataIter);}  }
class C{  private static String computeDigest(InputStream in,String algorithm) throws IOException, NoSuchAlgorithmException {  try {    if (!(in instanceof BufferedInputStream)) {      in=new BufferedInputStream(in,2048);    }    MessageDigest md=MessageDigest.getInstance(algorithm);    byte[] buf=new byte[2048];    while (true) {      int n=in.read(buf);      if (n < 0) {        break;      }      md.update(buf,0,n);    }    return digestString(md.digest());  }  finally {    try {      in.close();    } catch (    IOException e) {    }  }}  }
class C{  public LeadsGetUsersQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public MapCursor addCursor(MapCursor cursor){  cursors.add(cursor);  return cursor;}  }
class C{  @Override public void onMissing(Detector.Detections<Barcode> detectionResults){  mOverlay.remove(mGraphic);}  }
class C{  private void executeClaimedTask(ClaimedTask claimedTask){  if (!claimedTask.setStartTime(new Date())) {    _log.info("Claimed task is overdue; range not scanned: {}",claimedTask.getTask());    return;  }  ScanRangeTask task=claimedTask.getTask();  boolean releaseTask=false;  try {    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);    releaseTask=asyncRangeScan(task);  }  finally {    unclaimTask(claimedTask,releaseTask);    _backgroundService.submit(_startScansIfAvailableRunnable);  }}  }
class C{  public static void registerTransportMBean(String containerName){  MBeanServer mBeanServer=getMBeanServer(containerName);  if (mBeanServer == null)   return;  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);  if (!mBeanServer.isRegistered(objName)) {    try {      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);    } catch (    InstanceAlreadyExistsException e) {      if (_logger.isLoggable(Level.CONFIG)) {        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + ">");      }    }catch (    NotCompliantMBeanException e) {      if (_logger.isLoggable(Level.WARNING)) {        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + ">",e);      }    }catch (    MBeanRegistrationException e) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + ">",e);      }    }    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + ">");    }  } else {    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config(alreadyRegistredTransportMBeanMessage);    }  }}  }
class C{  public VUserInfo createUser(String name,int flags){  try {    return mService.createUser(name,flags);  } catch (  RemoteException re) {    Log.w(TAG,"Could not create a user",re);    return null;  }}  }
class C{  public EventBuilder onUi(Activity activity){  this.event.setActivity(activity);  this.event.setOnUi(true);  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WhileStmt fullCopy(){  WhileStmt tree=(WhileStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean hasProgramEndDate(){  return programEndDate != null;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static DmnRestUrlBuilder fromCurrentRequest(){  return usingBaseUrl(ServletUriComponentsBuilder.fromCurrentServletMapping().build().toUriString());}  }
class C{  public static void assertContains(Complex[] values,Complex z,double epsilon){  assertContains(null,values,z,epsilon);}  }
class C{  public Vector3f negateLocal(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_NameAndType_info cu=(CONSTANT_NameAndType_info)cp;  i=((CONSTANT_Utf8_info)(constant_pool[name_index])).compareTo(cp_constant_pool[cu.name_index]);  if (i != 0)   return i;  return ((CONSTANT_Utf8_info)(constant_pool[descriptor_index])).compareTo(cp_constant_pool[cu.descriptor_index]);}  }
class C{  public BetweenSpacePredicate(Comparable<?> low,Comparable<?> high,Comparator<?> comparator,boolean lowInclusive,boolean highInclusive){  this._lowPredicate=lowInclusive ? new GreaterEqualsSpacePredicate(low,comparator) : new GreaterSpacePredicate(low,comparator);  this._highPredicate=highInclusive ? new LessEqualsSpacePredicate(high,comparator) : new LessSpacePredicate(high,comparator);}  }
class C{  public SegmentIntervalsHashIdGenerator(PhysicalTableDictionary physicalTableDictionary,DataSourceMetadataService dataSourceMetadataService,Map<Class,RequestedIntervalsFunction> signingFunctions){  this.physicalTableDictionary=physicalTableDictionary;  this.dataSourceMetadataService=dataSourceMetadataService;  this.signingFunctions=signingFunctions;}  }
class C{  private void identifyTokens(AnnotatedString input,LanguageResource langRes){  int tokenStart=0;  boolean tokenFound=false;  String rootClass=langRes.getClassesRoot().getTagName();  for (char c=input.first(); c != CharacterIterator.DONE; c=input.next()) {    if (Character.isWhitespace(c) || (c == '\u00a0')) {      if (tokenFound) {        this.annotate(input,CLASS_ANNO,rootClass,tokenStart,input.getIndex(),input.substring(tokenStart,input.getIndex()),langRes);        tokenFound=false;      }    } else     if (!tokenFound) {      tokenFound=true;      tokenStart=input.getIndex();    }  }  if (tokenFound) {    this.annotate(input,CLASS_ANNO,rootClass,tokenStart,input.getIndex(),input.substring(tokenStart,input.getIndex()),langRes);  }}  }
class C{  @Override public void endMerging(){}  }
class C{  public int createDeferredEntity(String entityName,String publicId,String systemId,String notationName,String baseURI){  int nodeIndex=createNode(Node.ENTITY_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  int extraDataIndex=createNode(Node.ENTITY_NODE);  int echunk=extraDataIndex >> CHUNK_SHIFT;  int eindex=extraDataIndex & CHUNK_MASK;  setChunkValue(fNodeName,entityName,chunk,index);  setChunkValue(fNodeValue,publicId,chunk,index);  setChunkValue(fNodeURI,systemId,chunk,index);  setChunkIndex(fNodeExtra,extraDataIndex,chunk,index);  setChunkValue(fNodeName,notationName,echunk,eindex);  setChunkValue(fNodeValue,null,echunk,eindex);  setChunkValue(fNodeURI,null,echunk,eindex);  int extraDataIndex2=createNode(Node.ENTITY_NODE);  int echunk2=extraDataIndex2 >> CHUNK_SHIFT;  int eindex2=extraDataIndex2 & CHUNK_MASK;  setChunkIndex(fNodeExtra,extraDataIndex2,echunk,eindex);  setChunkValue(fNodeName,baseURI,echunk2,eindex2);  return nodeIndex;}  }
class C{  public T walkInOptimizedOrder(final FieldVectorChangingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  return walkInDefaultOrder(visitor,start,end);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  Rect processImage(BufferedImage image,String name){  if (scale <= 0)   throw new IllegalArgumentException("scale cannot be <= 0: " + scale);  int width=image.getWidth(), height=image.getHeight();  if (image.getType() != BufferedImage.TYPE_4BYTE_ABGR) {    BufferedImage newImage=new BufferedImage(width,height,BufferedImage.TYPE_4BYTE_ABGR);    newImage.getGraphics().drawImage(image,0,0,null);    image=newImage;  }  boolean isPatch=name.endsWith(".9");  int[] splits=null, pads=null;  Rect rect=null;  if (isPatch) {    name=name.substring(0,name.length() - 2);    splits=getSplits(image,name);    pads=getPads(image,name,splits);    width-=2;    height-=2;    BufferedImage newImage=new BufferedImage(width,height,BufferedImage.TYPE_4BYTE_ABGR);    newImage.getGraphics().drawImage(image,0,0,width,height,1,1,width + 1,height + 1,null);    image=newImage;  }  if (scale != 1) {    int originalWidth=width, originalHeight=height;    width=Math.round(width * scale);    height=Math.round(height * scale);    BufferedImage newImage=new BufferedImage(width,height,BufferedImage.TYPE_4BYTE_ABGR);    if (scale < 1) {      newImage.getGraphics().drawImage(image.getScaledInstance(width,height,Image.SCALE_AREA_AVERAGING),0,0,null);    } else {      Graphics2D g=(Graphics2D)newImage.getGraphics();      g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);      g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);      g.drawImage(image,0,0,width,height,null);    }    image=newImage;  }  if (isPatch) {    rect=new Rect(image,0,0,width,height,true);    rect.splits=splits;    rect.pads=pads;    rect.canRotate=false;  } else {    rect=stripWhitespace(image);    if (rect == null)     return null;  }  int index=-1;  if (settings.useIndexes) {    Matcher matcher=indexPattern.matcher(name);    if (matcher.matches()) {      name=matcher.group(1);      index=Integer.parseInt(matcher.group(2));    }  }  rect.name=name;  rect.index=index;  return rect;}  }
class C{  public PhotosReorderPhotosQuery reorderPhotos(UserActor actor,int photoId){  return new PhotosReorderPhotosQuery(getClient(),actor,photoId);}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public List<ModelEntity> induceModelFromDb(Collection<String> messages){  DatabaseUtil dbUtil=new DatabaseUtil(this.helperInfo);  return dbUtil.induceModelFromDb(messages);}  }
class C{  public void writeThrift(TBase indexObject) throws IOException {  thriftWriter.write(indexObject);}  }
class C{  public Stream<Entry<MatchedName,MetricValue>> filter(Context t){  return group_names_.apply(new HashSet<>(t.getTSData().getCurrentCollection().getGroupPaths())).stream().map(null).flatMap(null).flatMap(null);}  }
class C{  public LexicalException(){}  }
class C{  public FiniteDifferencesDifferentiator(final int nbPoints,final double stepSize) throws MathIllegalArgumentException {  this(nbPoints,stepSize,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);}  }
class C{  public void populate(MultiOptionSelectedInterface symbolSelectedListener,List<ValueComboBoxDataGroup> dataSelectionList){  this.symbolSelectedListener=symbolSelectedListener;  if (comboBox != null) {    comboBox.initialiseMenu(dataSelectionList);  }}  }
class C{  protected void updateVisualsForTabModel(boolean isIncognito){}  }
class C{  public boolean isNormalized(){  return m_norm;}  }
class C{  public void onBrowserEvent(Widget widget,Event event){}  }
class C{  public boolean mayAlias(Value v1,Value v2,Unit u){  Set<Set<Value>> res=getFlowBefore(u);  for (  Set<Value> set : res) {    if (set.contains(v1) && set.contains(v2))     return true;  }  return false;}  }
class C{  public DataSourceField(String name,Class<?> fieldType){  super();  this.name=name;  this.fieldType=fieldType;}  }
class C{  public CmpgExpr newCmpgExpr(Value op1,Value op2){  return new GCmpgExpr(op1,op2);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  Vertex(final Vector2D location){  this.location=location;  this.incoming=null;  this.outgoing=null;  this.lines=new ArrayList<Line>();}  }
class C{  private static String addFormatIfAbsent(String sql,String format){  sql=sql.trim();  String woSemicolon=Patterns.SEMICOLON.matcher(sql).replaceAll("").trim();  if (isSelect(sql) && !woSemicolon.endsWith(" TabSeparatedWithNamesAndTypes") && !woSemicolon.endsWith(" TabSeparated")&& !woSemicolon.endsWith(" JSONCompact")) {    if (sql.endsWith(";")) {      sql=sql.substring(0,sql.length() - 1);    }    sql+=" FORMAT " + format + ';';  }  return sql;}  }
class C{  private void updateFixutreFilterCategory(int category){  Filter filter=bodyFixture.getFilter();  if (filter == Filter.DEFAULT_FILTER) {    CategoryFilter cf=new CategoryFilter(category,Integer.MAX_VALUE);    bodyFixture.setFilter(cf);  } else {    CategoryFilter cf=new CategoryFilter(category,((CategoryFilter)filter).getMask());    bodyFixture.setFilter(cf);  }}  }
class C{  public static String persistDataResource(HttpServletRequest request,HttpServletResponse response){  Map<String,Object> result=null;  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String dataResourceId=(String)paramMap.get("dataResourceId");  GenericValue dataResource=delegator.makeValue("DataResource");  dataResource.setPKFields(paramMap);  dataResource.setNonPKFields(paramMap);  Map<String,Object> serviceInMap=UtilMisc.makeMapWritable(dataResource);  serviceInMap.put("userLogin",userLogin);  String mode=(String)paramMap.get("mode");  Locale locale=UtilHttp.getLocale(request);  if (mode != null && mode.equals("UPDATE")) {    try {      result=dispatcher.runSync("updateDataResource",serviceInMap);    } catch (    GenericServiceException e) {      String errMsg=UtilProperties.getMessage(DataEvents.err_resource,"dataEvents.error_call_update_service",locale);      String errorMsg="Error calling the updateDataResource service." + e.toString();      Debug.logError(e,errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg + e.toString());      return "error";    }  } else {    mode="CREATE";    try {      result=dispatcher.runSync("createDataResource",serviceInMap);    } catch (    GenericServiceException e) {      String errMsg=UtilProperties.getMessage(DataEvents.err_resource,"dataEvents.error_call_create_service",locale);      String errorMsg="Error calling the createDataResource service." + e.toString();      Debug.logError(e,errorMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg + e.toString());      return "error";    }    dataResourceId=(String)result.get("dataResourceId");    dataResource.set("dataResourceId",dataResourceId);  }  String returnStr="success";  if (mode.equals("CREATE")) {    request.setAttribute("dataResourceId",result.get("dataResourceId"));    String dataResourceTypeId=(String)serviceInMap.get("dataResourceTypeId");    if (dataResourceTypeId != null) {      if (dataResourceTypeId.equals("ELECTRONIC_TEXT") || dataResourceTypeId.equals("IMAGE_OBJECT")) {        returnStr=dataResourceTypeId;      }    }  }  return returnStr;}  }
class C{  public boolean on_fly_cg(){  return soot.PhaseOptions.getBoolean(options,"on-fly-cg");}  }
class C{  @deprecated public Object parseObject(String source,ParsePosition parse_pos){  throw new UnsupportedOperationException("parsing is not supported");}  }
class C{  public static final void show(Window owner,String title,String message,Exception e){  ExceptionDialog dialog=new ExceptionDialog(owner,title,message,e);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);}  }
class C{  public void changeMember(String sourceMember,String targetMember,String targetMemberURL) throws ClusterException {  addMember(sourceMember,targetMember,targetMemberURL);  removeMember(sourceMember);}  }
class C{  public DOMEntityResolverWrapper(LSResourceResolver entityResolver){  setEntityResolver(entityResolver);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  public Table<R,C,V> copy(){  final Table<R,C,V> copy=new Table<>();  for (  R row : rowKeySet())   for (  C col : columnKeySet())   copy.put(row,col,get(row,col));  return copy;}  }
class C{  @SuppressWarnings("deprecation") public static boolean install(Context context,String destDir,String filename){  try {    File f=new File(context.getDir(destDir,Context.MODE_PRIVATE),filename);    if (f.exists()) {      Log.d(TAG,"binary has existed");      return false;    }    copyAssets(context,filename,f,"0755");    return true;  } catch (  Exception e) {    Log.e(TAG,"installBinary failed: " + e.getMessage());    return false;  }}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  @Override public EndpointStatus join(InetSocketAddress endpoint,Map<String,InetSocketAddress> additionalEndpoints,Status status) throws Group.JoinException, InterruptedException {  throw new UnsupportedOperationException("NameServerSet does not support join");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201008,skilltarget,num0,skillcaster,skillname);}  }
class C{  public DefaultFieldMatrixPreservingVisitor(final T zero){  this.zero=zero;}  }
class C{  private void notifyUploadStart(UploadFileOperation upload){  mLastPercent=0;  mNotificationBuilder=NotificationUtils.newNotificationBuilder(this);  mNotificationBuilder.setOngoing(true).setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.uploader_upload_in_progress_ticker)).setContentTitle(getString(R.string.uploader_upload_in_progress_ticker)).setProgress(100,0,false).setContentText(String.format(getString(R.string.uploader_upload_in_progress_content),0,upload.getFileName()));  Intent showUploadListIntent=new Intent(this,UploadListActivity.class);  showUploadListIntent.putExtra(FileActivity.EXTRA_FILE,upload.getFile());  showUploadListIntent.putExtra(FileActivity.EXTRA_ACCOUNT,upload.getAccount());  showUploadListIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showUploadListIntent,0));  if (!upload.isInstantPicture() && !upload.isInstantVideo()) {    mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotificationBuilder.build());  }}  }
class C{  private void parseFuncallSuffix(){  PsiBuilder.Marker mark=builder.mark();  expect(TokenKind.LPAREN,true);  if (matches(TokenKind.RPAREN)) {    mark.done(BuildElementTypes.ARGUMENT_LIST);    return;  }  parseFuncallArgument();  while (!atAnyOfTokens(FUNCALL_TERMINATOR_SET)) {    expect(TokenKind.COMMA);    if (atAnyOfTokens(FUNCALL_TERMINATOR_SET)) {      break;    }    parseFuncallArgument();  }  expect(TokenKind.RPAREN,true);  mark.done(BuildElementTypes.ARGUMENT_LIST);}  }
class C{  public static long addAndCheck(long a,long b){  return addAndCheck(a,b,"overflow: add");}  }
class C{  private static <T>void reverseArray(T[] array){  final int max=array.length >> 1;  for (int i=0, j=array.length - 1; i < max; i++, j--) {    T temp=array[i];    array[i]=array[j];    array[j]=temp;  }}  }
class C{  private void processRequest(Map<String,Object> request){  Map<String,Object> config=new HashMap<>();  request.put("Config",config);  config.put("Hostname",request.remove("Hostname"));  config.put("Cmd",request.remove("Cmd"));  config.put("Env",request.remove("Env"));  @SuppressWarnings("unchecked") Map<String,Object> hostConfig=(Map<String,Object>)request.get("HostConfig");  if (hostConfig == null) {    hostConfig=new HashMap<>();    request.put("HostConfig",hostConfig);  }  Map<String,String> portMapping=new HashMap<>();  portMapping.put("HostIp","0.0.0.0");  portMapping.put("HostPort","9999");  List<Map<String,String>> portMappings=Collections.singletonList(portMapping);  Map<String,List<Map<String,String>>> allPortMappings=new HashMap<>();  allPortMappings.put("8080/tcp",portMappings);  hostConfig.put("PortBindings",allPortMappings);  Map<String,Object> networkSettings=new HashMap<>();  request.put("NetworkSettings",networkSettings);  networkSettings.put("Ports",allPortMappings);}  }
class C{  public boolean contains(int x,int y){  return false;}  }
class C{  public void stop() throws JMSException {synchronized (this) {    ensureOpen();    setModified();    if (!stopped) {      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("GSConnectionImpl.stop()  stopping connection: " + toString());      }      for (int i=0; i < sessions.size(); i++) {        GSSessionImpl session=(GSSessionImpl)sessions.get(i);        session.stop();      }      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("GSConnectionImpl.stop()  connection was stopped: " + getCnxKey());      }      stopped=true;    }  }}  }
class C{  public static void deletePlayerFromDB(int playerId){  DAOManager.getDAO(InventoryDAO.class).deletePlayerItems(playerId);  DAOManager.getDAO(PlayerDAO.class).deletePlayer(playerId);  DAOManager.getDAO(PlayerGameStatsDAO.class).deletePlayerGameStat(playerId);}  }
class C{  public void add(String expr,double size){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,size);}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public Builder touchZoom(Boolean touchZoom){  this.touchZoom=touchZoom;  return this;}  }
class C{  public static String approximately(CharSequence in){  return eval(in).getApproximately();}  }
class C{  public static double[] convolveWithZeroPadding(final double[] signal1,final double[] signal2,double deltaT){  double[] result=convolveWithZeroPadding(signal1,signal2);  for (int i=0; i < result.length; i++) {    result[i]*=deltaT;  }  return result;}  }
class C{  private int removeRowsById(String msgId){  int position=-1;  if (StringUtil.isNotBlank(msgId)) {    boolean find=false;    Iterator<Row> iterator=rows.iterator();    while (iterator.hasNext()) {      Row row=iterator.next();      if (msgId.equals(row.getMessage().get_id())) {        find=true;        position=rows.indexOf(row);        iterator.remove();      }      if (find && !msgId.equals(row.getMessage().get_id())) {        break;      }    }  }  return position;}  }
class C{  public AddExpr newAddExpr(Value op1,Value op2){  return new JAddExpr(op1,op2);}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(this.getModifiers());}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  Uuid cookie(){  return cookie;}  }
class C{  public Point3D(){}  }
class C{  public void updateMemberInfo(Player player){  PacketSendUtility.broadcastPacketToLegion(player.getLegion(),new SM_LEGION_UPDATE_MEMBER(player,0,""));}  }
class C{  public void add(WeightedObservedPoint observed){  observations.add(observed);}  }
class C{  protected Property(final String name,final String getter,final String setter,final Type<?> type,final Type<?> elementType){  super();  this.name=name;  this.getter=getter;  this.setter=setter;  this.type=type;  this.elementType=defaultElementType(type,elementType);}  }
class C{  public static long countBytes(String s,boolean shortLength) throws UTFDataFormatException {  long result=0;  final int length=s.length();  for (int i=0; i < length; ++i) {    char ch=s.charAt(i);    if (ch != 0 && ch <= 127) {      ++result;    } else     if (ch <= 2047) {      result+=2;    } else {      result+=3;    }    if (shortLength && result > 65535) {      throw new UTFDataFormatException("String more than 65535 UTF bytes long");    }  }  return result;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public boolean unroll(){  return soot.PhaseOptions.getBoolean(options,"unroll");}  }
class C{  private JsonArray readFields(FeatureLayer layer){  JsonArray fieldArrayJson=new JsonArray();  if (layer != null) {    try {      for (int index=0; index < layer.getFieldCount(); index++) {        IField field=layer.getField(index);        IFieldInfo fieldInfo=layer.getFieldInfo(index);        if (fieldInfo != null) {          JsonObject fieldJson=new JsonObject();          fieldJson.addProperty(DatasourceKeys.FIELD_NAME,field.getName());          if (fieldTypeMap.isEmpty()) {            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeSmallInteger,"esriFieldTypeSmallInteger");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeInteger,"esriFieldTypeInteger");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeSingle,"esriFieldTypeSingle");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeDouble,"esriFieldTypeDouble");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeString,"esriFieldTypeString");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeDate,"esriFieldTypeDate");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeOID,"esriFieldTypeOID");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeGeometry,"esriFieldTypeGeometry");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeBlob,"esriFieldTypeBlob");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeRaster,"esriFieldTypeRaster");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeGUID,"esriFieldTypeGUID");            fieldTypeMap.put(com.esri.arcgis.geodatabase.esriFieldType.esriFieldTypeGlobalID,"esriFieldTypeGlobalID");          }          fieldJson.addProperty(DatasourceKeys.FIELD_TYPE,fieldTypeMap.get(field.getType()));          INumberFormat numberFormat=fieldInfo.getNumberFormat();          if (numberFormat != null) {            if (numberFormat instanceof NumericFormat) {              NumericFormat numeric=(NumericFormat)numberFormat;              if (numeric.getRoundingOption() == com.esri.arcgis.system.esriRoundingOptionEnum.esriRoundNumberOfDecimals) {                fieldJson.addProperty(DatasourceKeys.FIELD_DECIMAL_PLACES,numeric.getRoundingValue());              } else {                fieldJson.addProperty(DatasourceKeys.FIELD_SIG_FIGS,numeric.getRoundingValue());              }            }          }          fieldArrayJson.add(fieldJson);        }      }    } catch (    AutomationException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return fieldArrayJson;}  }
class C{  @Override public boolean hasMoreData(){  return currentlyInBuffer() > 0 || inputSource != null && inputSource.hasMoreData();}  }
class C{  private void checkRideEffects(int code){  int[] Battery={2440,2441,2442,2443,2444,2445,2446,2447,2448,2449};  int[] Bulwark={2579,2580,2581};  if (effector instanceof Player) {    Player player=(Player)effector;    if (code == 0) {      for (      int skillId : Bulwark) {        if (player.getEffectController().isNoshowPresentBySkillId(skillId)) {          player.getEffectController().removeNoshowEffect(skillId);        }      }    } else {      for (      int skillId : Battery) {        if (player.getEffectController().isNoshowPresentBySkillId(skillId)) {          player.getEffectController().removeNoshowEffect(skillId);        }      }    }  }}  }
class C{  final public void put(String name,Object o){  if (context == null) {    context=new HashMap<String,Object>();  }  if (name == null) {    return;  }  if (o == null) {    context.remove(name);  } else {    context.put(name,o);  }  return;}  }
class C{  public boolean hasArc(int u,int v){  if (u < 0 || u >= sentence.length() || v < 0 || v >= sentence.length()) {    throw new IllegalArgumentException("Invalid index!");  }  return (heads[v] == u);}  }
class C{  public synchronized void addListenerAndNotify(ISpaceModeListener listener) throws RemoteException {  SpaceMode currentSpaceMode=_spaceMode;  listener.beforeSpaceModeChange(currentSpaceMode);  listener.afterSpaceModeChange(currentSpaceMode);  _primarySpaceModeListeners.addListener(listener);}  }
class C{  public static void enableJM(boolean enable){  ServiceDispatcher.enableJM=enable;}  }
class C{  Delta newMoveStart(Storage src,String destUuid,String destPlacement,int destShardsLog2){  return Deltas.mapBuilder().update(STORAGE.key(),Deltas.mapBuilder().update(src.getUuidString(),Deltas.mapBuilder().put(Storage.MOVE_TO.key(),destUuid).build()).put(destUuid,storageAttributesBuilder(destPlacement,destShardsLog2,src.isFacade()).put(StorageState.MIRROR_CREATED.getMarkerAttribute().key(),now()).put(Storage.GROUP_ID.key(),src.getGroupId()).build()).build()).build();}  }
class C{  public SemiVariance(final Direction direction){  this(true,direction);}  }
class C{  public void startIndexGitRepoJobs(String uniquename){  try {    Scheduler scheduler=Singleton.getScheduler();    JobDetail job=newJob(IndexGitRepoJob.class).withIdentity("updateindex-git-" + uniquename).build();    SimpleTrigger trigger=newTrigger().withIdentity("updateindex-git-" + uniquename).withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();    job.getJobDataMap().put("REPOLOCATIONS",this.REPOLOCATION);    job.getJobDataMap().put("LOWMEMORY",this.LOWMEMORY);    scheduler.scheduleJob(job,trigger);    scheduler.start();  } catch (  SchedulerException ex) {    LOGGER.severe(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }}  }
class C{  public void click(long time,float x,float y,boolean fromMouse,int buttons){  if (mModelSelectorButton.click(x,y) && mTabModelSelector != null) {    getActiveStripLayoutHelper().finishAnimation();    if (!mModelSelectorButton.isVisible())     return;    mTabModelSelector.selectModel(!mTabModelSelector.isIncognitoSelected());    return;  }  getActiveStripLayoutHelper().click(time,x,y,fromMouse,buttons);}  }
class C{  public double computeInfoGain(Instances data,int att) throws Exception {  getCapabilities().testWithFail(data);  int classIndex=data.classIndex();  int numInstances=data.numInstances();  if (!m_Binarize) {    Discretize disTransform=new Discretize();    disTransform.setUseBetterEncoding(true);    disTransform.setInputFormat(data);    data=Filter.useFilter(data,disTransform);  } else {    NumericToBinary binTransform=new NumericToBinary();    binTransform.setInputFormat(data);    data=Filter.useFilter(data,binTransform);  }  int numClasses=data.attribute(classIndex).numValues();  double[][][] counts=new double[data.numAttributes()][][];  for (int k=0; k < data.numAttributes(); k++) {    if (k != classIndex) {      int numValues=data.attribute(k).numValues();      counts[k]=new double[numValues + 1][numClasses + 1];    }  }  double[] temp=new double[numClasses + 1];  for (int k=0; k < numInstances; k++) {    Instance inst=data.instance(k);    if (inst.classIsMissing()) {      temp[numClasses]+=inst.weight();    } else {      temp[(int)inst.classValue()]+=inst.weight();    }  }  for (int k=0; k < counts.length; k++) {    if (k != classIndex) {      for (int i=0; i < temp.length; i++) {        counts[k][0][i]=temp[i];      }    }  }  for (int k=0; k < numInstances; k++) {    Instance inst=data.instance(k);    for (int i=0; i < inst.numValues(); i++) {      if (inst.index(i) != classIndex) {        if (inst.isMissingSparse(i) || inst.classIsMissing()) {          if (!inst.isMissingSparse(i)) {            counts[inst.index(i)][(int)inst.valueSparse(i)][numClasses]+=inst.weight();            counts[inst.index(i)][0][numClasses]-=inst.weight();          } else           if (!inst.classIsMissing()) {            counts[inst.index(i)][data.attribute(inst.index(i)).numValues()][(int)inst.classValue()]+=inst.weight();            counts[inst.index(i)][0][(int)inst.classValue()]-=inst.weight();          } else {            counts[inst.index(i)][data.attribute(inst.index(i)).numValues()][numClasses]+=inst.weight();            counts[inst.index(i)][0][numClasses]-=inst.weight();          }        } else {          counts[inst.index(i)][(int)inst.valueSparse(i)][(int)inst.classValue()]+=inst.weight();          counts[inst.index(i)][0][(int)inst.classValue()]-=inst.weight();        }      }    }  }  if (m_missing_merge) {    for (int k=0; k < data.numAttributes(); k++) {      if (k != classIndex) {        int numValues=data.attribute(k).numValues();        double[] rowSums=new double[numValues];        double[] columnSums=new double[numClasses];        double sum=0;        for (int i=0; i < numValues; i++) {          for (int j=0; j < numClasses; j++) {            rowSums[i]+=counts[k][i][j];            columnSums[j]+=counts[k][i][j];          }          sum+=rowSums[i];        }        if (Utils.gr(sum,0)) {          double[][] additions=new double[numValues][numClasses];          for (int i=0; i < numValues; i++) {            for (int j=0; j < numClasses; j++) {              additions[i][j]=(rowSums[i] / sum) * counts[k][numValues][j];            }          }          for (int i=0; i < numClasses; i++) {            for (int j=0; j < numValues; j++) {              additions[j][i]+=(columnSums[i] / sum) * counts[k][j][numClasses];            }          }          for (int i=0; i < numClasses; i++) {            for (int j=0; j < numValues; j++) {              additions[j][i]+=(counts[k][j][i] / sum) * counts[k][numValues][numClasses];            }          }          double[][] newTable=new double[numValues][numClasses];          for (int i=0; i < numValues; i++) {            for (int j=0; j < numClasses; j++) {              newTable[i][j]=counts[k][i][j] + additions[i][j];            }          }          counts[k]=newTable;        }      }    }  }  m_InfoGains=new double[data.numAttributes()];  m_InfoGains[att]=(ContingencyTables.entropyOverColumns(counts[att]) - ContingencyTables.entropyConditionedOnRows(counts[att]));  return m_InfoGains[att];}  }
class C{  @Override public int hashCode(){  int code=0;  if (fPublicId != null) {    code+=fPublicId.hashCode();  }  if (fLiteralSystemId != null) {    code+=fLiteralSystemId.hashCode();  }  if (fBaseSystemId != null) {    code+=fBaseSystemId.hashCode();  }  if (fExpandedSystemId != null) {    code+=fExpandedSystemId.hashCode();  }  if (fNamespace != null) {    code+=fNamespace.hashCode();  }  return code;}  }
class C{  public static ChangelogDialog newInstance(boolean cancelable){  ChangelogDialog fragment=new ChangelogDialog();  Bundle args=new Bundle();  args.putBoolean(ARG_CANCELABLE,cancelable);  fragment.setArguments(args);  return fragment;}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  this.startTime=System.currentTimeMillis();  this.config=config;  Enumeration parameterNameEnum=this.config.getInitParameterNames();  boolean foundConfig=false;  while (parameterNameEnum.hasMoreElements()) {    String paramName=(String)parameterNameEnum.nextElement();    if (paramName.startsWith("serviceInterface")) {      String interfaceName=this.getInitParameter(paramName);      String definitionName=paramName.substring("serviceInterface".length(),paramName.length());      String classParamName="serviceClass" + definitionName;      String className=this.getInitParameter(classParamName);      Class interfaceClass=this.loadClass(interfaceName);      Class serviceClass=this.loadClass(className);      boolean serviceImplementsInterface=interfaceClass.isAssignableFrom(serviceClass);      if (!serviceImplementsInterface) {        LOGGER.warn("The class {} does not implement {}. This may be a serious error in your configuration. This class will not be available locally.",serviceClass.getName(),interfaceName);      }      Object service;      try {        service=serviceClass.newInstance();      } catch (      Exception e) {        LOGGER.error("Caught exception while instantiating service class: {}",serviceClass,e);        throw new ServletException(e);      }      MethodResolver methodResolver=new MethodResolver(serviceClass);      this.serviceMap.put(interfaceName,new ServiceDefinition(service,methodResolver));      foundConfig=true;    }  }  if (vmId == 0L) {    vmId=System.currentTimeMillis() >> 8 << 32;  }  if (!foundConfig) {    throw new ServletException("PspServlet must be configured using serviceInterface.x and serviceClass.x parameter names (x can be anything)");  }}  }
class C{  @Override public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {  return new AttrNSImpl(this,namespaceURI,qualifiedName);}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    put(result);    index+=2;  }  return result;}  }
class C{  public static void initialize(final Activity activity,final String gameId,final IUnityAdsListener listener){  initialize(activity,gameId,listener,false);}  }
class C{  public void draw(Canvas canvas){  if (mUseBitmap) {    final Bitmap bitmap=(mIsPressed) ? mImagePressed : mImageNormal;    if (mIsPressed) {      final float topPressed=mY - mHalfHeightPressed;      final float leftPressed=mX - mHalfWidthPressed;      canvas.drawBitmap(bitmap,leftPressed,topPressed,null);    } else {      final float topNormal=mY - mHalfHeightNormal;      final float leftNormal=mX - mHalfWidthNormal;      canvas.drawBitmap(bitmap,leftNormal,topNormal,null);    }  } else {    if (mIsPressed)     canvas.drawCircle(mX,mY,mThumbRadiusPx,mPaintPressed); else     canvas.drawCircle(mX,mY,mThumbRadiusPx,mPaintNormal);  }}  }
class C{  private void debugPrint(String msg){  if (debug) {    System.out.println(toString() + ": " + msg);  }}  }
class C{  @Override public void handleUseItemFinish(Player player,Npc npc){switch (npc.getNpcId()) {case 702009:case 702021:case 702022:case 702023:    despawnNpc(npc);  SkillEngine.getInstance().getSkill(npc,21511,60,player).useNoAnimationSkill();break;}}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("zoom axis=horizontal what=in;");}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.EUCLIDEAN + ";");}  }
class C{  @Override public boolean onUnbind(Intent intent){  ((FileUploaderBinder)mBinder).clearListeners();  return false;}  }
class C{  public static ExisitingJiniTransactionHolder unbindExistingTransaction(){  return ((ExisitingJiniTransactionHolder)TransactionSynchronizationManager.unbindResource(CONTEXT));}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  public static DataApprovalPermissionsEvaluator makePermissionsEvaluator(CurrentUserService currentUserService,OrganisationUnitService organisationUnitService,SystemSettingManager systemSettingManager,DataApprovalLevelService dataApprovalLevelService){  DataApprovalPermissionsEvaluator ev=new DataApprovalPermissionsEvaluator();  ev.organisationUnitService=organisationUnitService;  ev.dataApprovalLevelService=dataApprovalLevelService;  ev.user=currentUserService.getCurrentUser();  ev.acceptanceRequiredForApproval=(Boolean)systemSettingManager.getSystemSetting(SettingKey.ACCEPTANCE_REQUIRED_FOR_APPROVAL);  boolean hideUnapprovedData=(Boolean)systemSettingManager.getSystemSetting(SettingKey.HIDE_UNAPPROVED_DATA_IN_ANALYTICS);  ev.authorizedToApprove=ev.user.getUserCredentials().isAuthorized(DataApproval.AUTH_APPROVE);  ev.authorizedToApproveAtLowerLevels=ev.user.getUserCredentials().isAuthorized(DataApproval.AUTH_APPROVE_LOWER_LEVELS);  ev.authorizedToAcceptAtLowerLevels=ev.user.getUserCredentials().isAuthorized(DataApproval.AUTH_ACCEPT_LOWER_LEVELS);  Boolean authorizedToViewUnapprovedData=ev.user.getUserCredentials().isAuthorized(DataApproval.AUTH_VIEW_UNAPPROVED_DATA);  ev.mayViewLowerLevelUnapprovedData=!hideUnapprovedData || authorizedToViewUnapprovedData;  ev.maxApprovalLevel=dataApprovalLevelService.getAllDataApprovalLevels().size();  log.debug("makePermissionsEvaluator acceptanceRequiredForApproval " + ev.acceptanceRequiredForApproval + " hideUnapprovedData "+ hideUnapprovedData+ " authorizedToApprove "+ ev.authorizedToApprove+ " authorizedToAcceptAtLowerLevels "+ ev.authorizedToAcceptAtLowerLevels+ " authorizedToViewUnapprovedData "+ authorizedToViewUnapprovedData+ " maxApprovalLevel "+ ev.maxApprovalLevel);  return ev;}  }
class C{  public void draw(GL2 gl){  int fSize=this.fixtures.size();  for (int i=0; i < fSize; i++) {    BodyFixture bodyFixture=this.getFixture(i);    Convex convex=bodyFixture.getShape();    RenderUtilities.drawShape(gl,convex,false);  }}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void add(String key,Object obj){  context.put(key,obj);}  }
class C{  public void zoomCenter(float scaleX,float scaleY){  MPPointF center=getCenterOffsets();  Matrix save=mZoomMatrixBuffer;  mViewPortHandler.zoom(scaleX,scaleY,center.x,-center.y,save);  mViewPortHandler.refresh(save,this,false);}  }
class C{  private boolean isUnsignedNumber(String string){  String s=string.trim();  if (s.length() < 1)   return false;  if (s.charAt(0) != '+' && s.charAt(0) != '-') {    double value=0;    try {      value=Double.parseDouble(s);    } catch (    NumberFormatException e) {      return false;    }    return true;  }  return false;}  }
class C{  public boolean simulate_natives(){  return soot.PhaseOptions.getBoolean(options,"simulate-natives");}  }
class C{  @Override public void populateField(String value){  if (textField != null) {    textField.setText(value);    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;    valueUpdated();  }}  }
class C{  public LeadsGetStatsQuery dateEnd(String value){  return unsafeParam("date_end",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200750,skilltarget);}  }
class C{  private void addToCurrentGroup(int contentSpec){  int[] currentGroup=fGroupIndexStack[fDepth];  int length=fGroupIndexStackSizes[fDepth]++;  if (currentGroup == null) {    currentGroup=new int[8];    fGroupIndexStack[fDepth]=currentGroup;  } else   if (length == currentGroup.length) {    int[] newGroup=new int[currentGroup.length * 2];    System.arraycopy(currentGroup,0,newGroup,0,currentGroup.length);    currentGroup=newGroup;    fGroupIndexStack[fDepth]=currentGroup;  }  currentGroup[length]=contentSpec;}  }
class C{  @NotNull public ImageOverlayBuilder mergeImage(@NotNull BufferedImage mergeImage,@NotNull MergeImagesFilter.Position position){  MergeImagesFilter mergeImagesFilter=new MergeImagesFilter(mergeImage,SMALL_PADDING,position);  bufferedImage=mergeImagesFilter.applyFilter(bufferedImage);  return this;}  }
class C{  public ShapelessMaterialRecipe(ItemStack output,List<Predicate<ItemStack>> matchers){  this.output=output;  this.matchers=matchers;}  }
class C{  public static Zdiagmat o(Zdiagmat D) throws JampackException {  Zdiagmat Di=new Zdiagmat(D.n);  for (int i=0; i < D.order; i++) {    Z d=new Z(D.re[i],D.im[i]);    if (d.re == 0 && d.im == 0) {      throw new JampackException("Singuar matrix.");    }    d.Div(Z.ONE,d);    Di.re[i]=d.re;    Di.im[i]=d.im;  }  return Di;}  }
class C{  public int compare(IEntryHolder o1,IEntryHolder o2){  int res=compare_impl(o1,o2);  if (res != 0)   return res;  if (o1 != o2 && o1.getServerTypeDesc() == o2.getServerTypeDesc() && !o1.getUID().equals(o2.getUID()))   throw new RuntimeException("invalid fifo order 2 equal entries from same class uid1=" + o1.getUID() + " uid2="+ o2.getUID());  return o1.getUID().compareTo(o2.getUID());}  }
class C{  @Override public void redo(Transaction tx){  Buffer buff=tx.bufferMgr().pin(blk);  buff.setVal(offset,newVal,tx.getTransactionNumber(),null);  tx.bufferMgr().unpin(buff);}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public LaplaceDistribution(double mu,double beta) throws MathIllegalArgumentException {  if (beta <= 0.0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_SCALE,beta);  }  this.mu=mu;  this.beta=beta;}  }
class C{  public static synchronized CoreDumpsContainer sharedInstance(){  if (sharedInstance == null)   sharedInstance=new CoreDumpsContainer();  return sharedInstance;}  }
class C{  private Boolean isOptional(InputDescriptionType input){  int minOccurs=input.getMinOccurs().intValue();  int maxOccurs=input.getMaxOccurs().intValue();  if ((minOccurs == 0) && (maxOccurs == 1)) {    return true;  }  return false;}  }
class C{  public static final String readString(byte[] bytes,int offset,int length,String charset) throws IOException {  return readString(bytes,0,bytes.length,Charset.forName(charset));}  }
class C{  protected final void synchronizeChildren(ParentNode p,int nodeIndex){  boolean orig=getMutationEvents();  setMutationEvents(false);  p.needsSyncChildren(false);  ChildNode firstNode=null;  ChildNode lastNode=null;  for (int index=getLastChild(nodeIndex); index != -1; index=getPrevSibling(index)) {    ChildNode node=(ChildNode)getNodeObject(index);    if (lastNode == null) {      lastNode=node;    } else {      firstNode.previousSibling=node;    }    node.ownerNode=p;    node.isOwned(true);    node.nextSibling=firstNode;    firstNode=node;  }  if (lastNode != null) {    p.firstChild=firstNode;    firstNode.isFirstChild(true);    p.lastChild(lastNode);  }  setMutationEvents(orig);}  }
class C{  public void testCharField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public PhotosMoveQuery(VkApiClient client,UserActor actor,int targetAlbumId,int photoId){  super(client,"photos.move",OkResponse.class);  accessToken(actor.getAccessToken());  targetAlbumId(targetAlbumId);  photoId(photoId);}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public ShutdownHelper(EmbeddedRabbitMqConfig config,Future<ProcessResult> rabbitMqProcess){  this.config=config;  this.rabbitMqProcess=rabbitMqProcess;  this.timeoutDuration=config.getDefaultRabbitMqCtlTimeoutInMillis();  this.timeoutUnit=TimeUnit.MILLISECONDS;}  }
class C{  public Color add(Color color){  this.r+=color.r;  this.g+=color.g;  this.b+=color.b;  this.a+=color.a;  clamp();  return this;}  }
class C{  private List<Event> peekOrPoll(String subscription,@Nullable Duration claimTtl,int limit){  List<Item> items=Lists.newArrayList();  Map<Coordinate,Item> uniqueItems=Maps.newHashMap();  Map<Coordinate,Integer> eventOrder=Maps.newHashMap();  boolean repeatable=claimTtl != null && claimTtl.getMillis() > 0;  Stopwatch stopwatch=Stopwatch.createStarted(_ticker);  int padding=0;  do {    int remaining=limit - items.size();    if (remaining == 0) {      break;    }    ConsolidatingEventSink sink=new ConsolidatingEventSink(remaining + padding);    boolean more=(claimTtl == null) ? _eventStore.peek(subscription,sink) : _eventStore.poll(subscription,claimTtl,sink);    Map<Coordinate,EventList> rawEvents=sink.getEvents();    if (rawEvents.isEmpty()) {      break;    }    List<String> eventIdsToDiscard=Lists.newArrayList();    List<String> recentUnknownEventIds=Lists.newArrayList();    List<String> eventIdsToUnclaim=Lists.newArrayList();    DataProvider.AnnotatedGet annotatedGet=_dataProvider.prepareGetAnnotated(ReadConsistency.STRONG);    for (    Map.Entry<Coordinate,EventList> entry : rawEvents.entrySet()) {      Coordinate coord=entry.getKey();      try {        annotatedGet.add(coord.getTable(),coord.getId());      } catch (      UnknownTableException e) {        EventList list=entry.getValue();        for (        Pair<String,UUID> pair : list.getEventAndChangeIds()) {          eventIdsToDiscard.add(pair.first());        }        _discardedMeter.mark(list.size());      }      if (!eventOrder.containsKey(coord)) {        eventOrder.put(coord,eventOrder.size());      }    }    Iterator<DataProvider.AnnotatedContent> readResultIter=annotatedGet.execute();    while (readResultIter.hasNext()) {      DataProvider.AnnotatedContent readResult=readResultIter.next();      Map<String,Object> content=readResult.getContent();      Coordinate coord=Coordinate.fromJson(content);      EventList eventList=rawEvents.get(coord);      List<List<String>> tags=eventList.getTags();      for (      Pair<String,UUID> eventData : eventList.getEventAndChangeIds()) {        String eventId=eventData.first();        UUID changeId=eventData.second();        if (readResult.isChangeDeltaPending(changeId)) {          if (isRecent(changeId)) {            recentUnknownEventIds.add(eventId);            _recentUnknownMeter.mark();          } else {            _staleUnknownMeter.mark();          }          continue;        }        if (readResult.isChangeDeltaRedundant(changeId)) {          eventIdsToDiscard.add(eventId);          _redundantMeter.mark();          continue;        }        Item previousItem=uniqueItems.get(coord);        if (previousItem != null && previousItem.consolidateWith(eventId,content,tags)) {          _consolidatedMeter.mark();          continue;        }        if (items.size() == limit) {          eventIdsToUnclaim.add(eventId);          continue;        }        Item item=new Item(eventId,eventOrder.get(coord),content,tags);        items.add(item);        uniqueItems.put(coord,item);      }    }    if (!eventIdsToUnclaim.isEmpty()) {      _eventStore.renew(subscription,eventIdsToUnclaim,Duration.ZERO,false);    }    if (!recentUnknownEventIds.isEmpty()) {      _eventStore.renew(subscription,recentUnknownEventIds,RECENT_UNKNOWN_RETRY,false);    }    if (!eventIdsToDiscard.isEmpty()) {      _eventStore.delete(subscription,eventIdsToDiscard,true);    }    if (!more) {      break;    }    padding=10;  } while (repeatable && stopwatch.elapsed(TimeUnit.MILLISECONDS) < MAX_POLL_TIME.getMillis());  Collections.sort(items);  List<Event> events=Lists.newArrayListWithCapacity(items.size());  for (  Item item : items) {    events.add(item.toEvent());  }  return events;}  }
class C{  public static boolean featureIsEnabled(){  boolean allowedChannel=ChromeVersionInfo.isLocalBuild() || ChromeVersionInfo.isDevBuild();  boolean switchEnabled=CommandLine.getInstance().hasSwitch(ChromeSwitches.ENABLE_PHYSICAL_WEB);  return allowedChannel && switchEnabled;}  }
class C{  public void insert(RecordId rid){  if (tx.isReadOnly() && !isTempTable())   throw new UnsupportedOperationException();  try {    if (!isTempTable())     tx.concurrencyMgr().modifyFile(fileName);  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }  if (fhp == null)   fhp=openHeaderForModification();  tx.recoveryMgr().logLogicalStart();  moveToRecordId(rid);  if (!rp.insertIntoTheCurrentSlot())   throw new RuntimeException("the specified slot: " + rid + " is in used");  RecordId lastSlot=null;  RecordId currentSlot=fhp.getLastDeletedSlot();  while (!currentSlot.equals(rid) && currentSlot.block().number() != FileHeaderPage.NO_SLOT_BLOCKID) {    moveToRecordId(currentSlot);    lastSlot=currentSlot;    currentSlot=rp.getNextDeletedSlotId();  }  if (lastSlot == null) {    moveToRecordId(currentSlot);    fhp.setLastDeletedSlot(rp.getNextDeletedSlotId());  } else   if (currentSlot.block().number() != FileHeaderPage.NO_SLOT_BLOCKID) {    moveToRecordId(currentSlot);    RecordId nextSlot=rp.getNextDeletedSlotId();    moveToRecordId(lastSlot);    rp.setNextDeletedSlotId(nextSlot);  }  tx.recoveryMgr().logRecordFileInsertionEnd(ti.tableName(),rid.block().number(),rid.id());  closeHeader();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public void run(){  if (log.isDebugEnabled()) {    log.debug("[{}] [{}] [{}] Persisted message. cnx {}, sequenceId {}",producer.topic,producer.producerName,producer.producerId,producer.cnx,sequenceId);  }  rateIn.recordMultipleEvents(batchSize,msgSize);  producer.cnx.ctx().writeAndFlush(Commands.newSendReceipt(producer.producerId,sequenceId,ledgerId,entryId),producer.cnx.ctx().voidPromise());  producer.cnx.completedSendOperation();  producer.publishOperationCompleted();  recycle();}  }
class C{  private void drawRing(Canvas canvas,Rect bounds){  final RectF arcBounds=mTempBounds;  final Ring ring=mRing;  arcBounds.set(bounds);  arcBounds.inset(ring.strokeInset,ring.strokeInset);  canvas.drawArc(arcBounds,ring.start,ring.sweep,false,mPaint);}  }
class C{  private SpaceImpl loadSpace(String spaceName,JSpaceAttributes spaceAttr) throws ClassNotFoundException, IllegalAccessException, InstantiationException, CreateException, IOException, ConfigurationException, com.gigaspaces.config.ConfigurationException {  try {    ValidationUtils.checkServiceNameForValidation(spaceName,"Space name");  } catch (  InvalidServiceNameException exc) {    throw new CreateException("Invalid space name.",new InvalidServiceNameException(exc.getMessage()));  }  System.setProperty(SystemProperties.DB_CONTAINER_NAME,_containerName);  System.setProperty(SystemProperties.DB_SPACE_NAME,spaceName);  createSpaceXML(spaceName,spaceAttr);  if ((JSpaceUtilities.isEmpty(_spaceName)) && !Boolean.valueOf(spaceAttr.isLoadOnStartup()).booleanValue())   return null;  final String fullSpaceName=JSpaceUtilities.createFullSpaceName(_containerName,spaceName);  final SpaceConfigReader configReader=new SpaceConfigReader(fullSpaceName);  spaceAttr.setClustered(configReader.getBooleanSpaceProperty(IS_CLUSTER_SPACE_PROP,configReader.getSpaceProperty(IS_CLUSTER_SPACE_PROP,IS_CLUSTER_SPACE_DEFAULT)));  spaceAttr.setClusterConfigURL(configReader.getSpaceProperty(CLUSTER_CONFIG_URL_PROP,configReader.getSpaceProperty(Constants.Cluster.CLUSTER_CONFIG_URL_PROP,CLUSTER_CONFIG_URL_DEFAULT)));  if (Boolean.valueOf(spaceAttr.isClustered()).booleanValue() || (!isFirstSpaceCreated && !JSpaceUtilities.isEmpty(_clusterSchema))) {    spaceAttr.setClustered(true);    if (spaceAttr.getClusterConfigURL().trim().equals(""))     throw new CreateException("Cluster config URL not found in " + spaceName + ".xml file.");    ClusterPolicy clusterPolicy=createClusterPolicy(spaceName,spaceAttr.getClusterConfigURL());    spaceAttr.setClusterPolicy(clusterPolicy);  }  spaceAttr.setPrivate(configReader.getBooleanSpaceProperty(LOOKUP_IS_PRIVATE_PROP,LOOKUP_IS_PRIVATE_DEFAULT,false));  spaceAttr.setPersistent(configReader.getBooleanSpaceProperty(PERSISTENT_ENABLED_PROP,PERSISTENT_ENABLED_DEFAULT,false));  spaceAttr.setDataSourceClass(configReader.getSpaceProperty(DATA_SOURCE_CLASS_PROP,DATA_SOURCE_CLASS_DEFAULT,false));  spaceAttr.setDataClass(configReader.getSpaceProperty(DATA_CLASS_PROP,DATA_CLASS_DEFAULT,false));  spaceAttr.setQueryBuilderClass(configReader.getSpaceProperty(QUERY_BUILDER_PROP,QUERY_BUILDER_PROP_DEFAULT,false));  spaceAttr.setDataPropertiesFile(configReader.getSpaceProperty(DATA_PROPERTIES,DATA_PROPERTIES_DEFAULT,false));  spaceAttr.setUsage(configReader.getSpaceProperty(USAGE,USAGE_DEFAULT,false));  spaceAttr.setSupportsInheritanceEnabled(configReader.getBooleanSpaceProperty(SUPPORTS_INHERITANCE_PROP,SUPPORTS_INHERITANCE_DEFAULT,false));  spaceAttr.setSupportsVersionEnabled(configReader.getBooleanSpaceProperty(SUPPORTS_VERSION_PROP,SUPPORTS_VERSION_DEFAULT,false));  spaceAttr.setSupportsPartialUpdateEnabled(configReader.getBooleanSpaceProperty(SUPPORTS_PARTIAL_UPDATE_PROP,SUPPORTS_PARTIAL_UPDATE_DEFAULT,false));  spaceAttr.setSupportsRemoveByIdEnabled(configReader.getBooleanSpaceProperty(SUPPORTS_REMOVE_BY_ID_PROP,SUPPORTS_REMOVE_BY_ID_DEFAULT,false));  spaceAttr.setDataSourceSharedIteratorMode(configReader.getBooleanSpaceProperty(DATA_SOURCE_SHARE_ITERATOR_ENABLED_PROP,DATA_SOURCE_SHARE_ITERATOR_ENABLED_DEFAULT,false));  spaceAttr.setExpirationTimeInterval(configReader.getSpaceProperty(LM_EXPIRATION_TIME_INTERVAL_PROP,String.valueOf(LM_EXPIRATION_TIME_INTERVAL_DEFAULT)));  spaceAttr.setExpirationTimeRecentDeletes(configReader.getSpaceProperty(LM_EXPIRATION_TIME_RECENT_DELETES_PROP,String.valueOf(LM_EXPIRATION_TIME_RECENT_DELETES_DEFAULT)));  spaceAttr.setExpirationTimeRecentUpdate(configReader.getSpaceProperty(LM_EXPIRATION_TIME_RECENT_UPDATES_PROP,String.valueOf(LM_EXPIRATION_TIME_RECENT_UPDATES_DEFAULT)));  spaceAttr.setExpirationStaleReplicas(configReader.getSpaceProperty(LM_EXPIRATION_TIME_STALE_REPLICAS_PROP,String.valueOf(LM_EXPIRATION_TIME_STALE_REPLICAS_DEFAULT)));  String dataSourceShareIteratorTTLDefault=DataAdaptorIterator.getDataSourceShareIteratorTTLDefault(Long.parseLong(spaceAttr.getExpirationTimeRecentDeletes()),Long.parseLong(spaceAttr.getExpirationTimeRecentUpdates()));  spaceAttr.setDataSourceSharedIteratorTimeToLive(configReader.getLongSpaceProperty(DATA_SOURCE_SHARE_ITERATOR_TTL_PROP,dataSourceShareIteratorTTLDefault,false));  spaceAttr.setQPAutoCommit(configReader.getBooleanSpaceProperty(QueryProcessorInfo.QP_AUTO_COMMIT_PROP,QueryProcessorInfo.QP_AUTO_COMMIT_DEFAULT,false));  spaceAttr.setQPParserCaseSensetivity(configReader.getBooleanSpaceProperty(QueryProcessorInfo.QP_PARSER_CASE_SENSETIVITY_PROP,QueryProcessorInfo.QP_PARSER_CASE_SENSETIVITY_DEFAULT,false));  spaceAttr.setQPTraceExecTime(configReader.getBooleanSpaceProperty(QueryProcessorInfo.QP_TRACE_EXEC_TIME_PROP,QueryProcessorInfo.QP_TRACE_EXEC_TIME_DEFAULT,false));  spaceAttr.setQpTransactionTimeout(configReader.getIntSpaceProperty(QueryProcessorInfo.QP_TRANSACTION_TIMEOUT_PROP,QueryProcessorInfo.QP_TRANSACTION_TIMEOUT_DEFAULT,false));  spaceAttr.setQpSpaceReadLeaseTime(configReader.getIntSpaceProperty(QueryProcessorInfo.QP_SPACE_READ_LEASE_TIME_PROP,QueryProcessorInfo.QP_SPACE_READ_LEASE_TIME_DEFAULT,false));  spaceAttr.setQpSpaceWriteLeaseTime(configReader.getLongSpaceProperty(QueryProcessorInfo.QP_SPACE_WRITE_LEASE_PROP,QueryProcessorInfo.QP_SPACE_WRITE_LEASE_DEFAULT,false));  spaceAttr.setQpDateFormat(configReader.getSpaceProperty(QueryProcessorInfo.QP_DATE_FORMAT_PROP,QueryProcessorInfo.QP_DATE_FORMAT_DEFAULT,false));  spaceAttr.setQpDateTimeFormat(configReader.getSpaceProperty(QueryProcessorInfo.QP_DATETIME_FORMAT_PROP,QueryProcessorInfo.QP_DATETIME_FORMAT_DEFAULT,false));  spaceAttr.setQpTimeFormat(configReader.getSpaceProperty(QueryProcessorInfo.QP_TIME_FORMAT_PROP,QueryProcessorInfo.QP_TIME_FORMAT_DEFAULT,false));  spaceAttr.setMirrorServiceEnabled(configReader.getBooleanSpaceProperty(MIRROR_SERVICE_ENABLED_PROP,MIRROR_SERVICE_ENABLED_DEFAULT,false));  JSpaceAttributes attr=(JSpaceAttributes)spaceAttr.clone();  SpaceImpl spaceImpl=createSpaceImpl(spaceName,attr);  ContainerEntry containerEntry=new ContainerEntry(spaceImpl,spaceAttr);synchronized (_lock) {    _containerEntry=containerEntry;  }  if (isJMXEnabled())   com.j_spaces.jmx.JMXProvider.registerSpaceMBean(spaceName,spaceImpl);  if (!Boolean.valueOf(spaceAttr.isPrivate()).booleanValue())   m_LookupMng.register(containerEntry.getClusteredSpaceProxy(),_containerName);  spaceAttr.setProxyConnectionMode(configReader.getSpaceProperty(Constants.SpaceProxy.OldRouter.CONNECTION_MONITOR_FULL,Constants.SpaceProxy.OldRouter.CONNECTION_MONITOR_DEFAULT));  spaceAttr.setProxyMonitorFrequency(Long.parseLong(configReader.getSpaceProperty(Constants.SpaceProxy.OldRouter.MONITOR_FREQUENCY_FULL,Constants.SpaceProxy.OldRouter.MONITOR_FREQUENCY_DEFAULT)));  spaceAttr.setProxyDetectorFrequency(Long.parseLong(configReader.getSpaceProperty(Constants.SpaceProxy.OldRouter.DETECTOR_FREQUENCY_FULL,Constants.SpaceProxy.OldRouter.DETECTOR_FREQUENCY_DEFAULT)));  spaceAttr.setProxyConnectionRetries(Integer.parseInt(configReader.getSpaceProperty(Constants.SpaceProxy.OldRouter.CONNECTION_RETRIES_FULL,Constants.SpaceProxy.OldRouter.CONNECTION_RETRIES_DEFAULT)));  isFirstSpaceCreated=true;  return spaceImpl;}  }
class C{  public SimpleTimeSeriesCollection(@NonNull DateTime timestamp,@NonNull Collection<? extends TimeSeriesValue> tsv){  this(timestamp,tsv.stream());}  }
class C{  public static String hashPassword(String password){  byte[] randomBytes=new byte[6];  rand.setSeed(System.currentTimeMillis());  rand.nextBytes(randomBytes);  return myCrypt(password,genSalt(randomBytes));}  }
class C{  public void addResultsAvailableHandler(ResultsAvailableHandler handler){  this.onResultsAvailable.add(handler);}  }
class C{  public boolean simple_edges_bidirectional(){  return soot.PhaseOptions.getBoolean(options,"simple-edges-bidirectional");}  }
class C{  public EnvVarModel(EnvironmentManagerInterface envMgr){  this.envMgr=envMgr;  if (columns.isEmpty()) {    columns.add(Localisation.getString(EnvVarDlg.class,"EnvVarModel.name"));    columns.add(Localisation.getString(EnvVarDlg.class,"EnvVarModel.type"));    columns.add(Localisation.getString(EnvVarDlg.class,"EnvVarModel.value"));  }}  }
class C{  public Percentiles(Map<Constant,Double> pcts){  this.pcts=new HashMap<Constant,Double>(pcts);}  }
class C{  @Override protected void onPostExecute(Result result){  if (result != null) {    boolean completeCalled=false;    if (!isCancelled()) {      CropImageView cropImageView=mCropImageViewReference.get();      if (cropImageView != null) {        completeCalled=true;        cropImageView.onSetImageUriAsyncComplete(result);      }    }    if (!completeCalled && result.bitmap != null) {      result.bitmap.recycle();    }  }}  }
class C{  @NotNull public ImageDescription describeImage(@NotNull String imageUrl){  return computerVisionBuilder.describeImage(1,imageUrl).withResult();}  }
class C{  public SM_DELETE_CHARACTER(int playerObjId,int deletionTime){  this.playerObjId=playerObjId;  this.deletionTime=deletionTime;}  }
class C{  public boolean isEmpty(){  return backedMap.isEmpty();}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public void shutDown(){  if (_fifoBackgroundDispatcher != null)   _fifoBackgroundDispatcher.close();  if (_templateExpirationManager != null)   _templateExpirationManager.shutDown();  try {    _persistentGC.shutdown();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,ex.toString(),ex);  } finally {    _persistentGC=null;  }  try {    _cacheContextFactory.closeAllContexts();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,ex.toString(),ex);  }  try {    _storageAdapter.shutDown();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,ex.toString(),ex);  }  if (_evictionStrategy != null)   _evictionStrategy.close();  if (_replicationNode != null && _replicationNode.getDirectPesistencySyncHandler() != null)   _replicationNode.getDirectPesistencySyncHandler().close();}  }
class C{  public GlobalLexica(){}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void attributeSelection(String field){  if (this.spinner != null) {    this.spinner.setEnabled(field == null);  }}  }
class C{  public void clear(){  entries.clear();}  }
class C{  public PhotosRemoveTagQuery(VkApiClient client,UserActor actor,int photoId,int tagId){  super(client,"photos.removeTag",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);  tagId(tagId);}  }
class C{  public Iterator<RecordID> sortedScanFrom(DataType keyStart){  BPlusNode root=BPlusNode.getBPlusNode(this,rootPageNum);  LeafNode leaf=root.locateLeaf(keyStart,true);  return new BPlusIterator(leaf,keyStart,true);}  }
class C{  public Base64OutputStream(OutputStream outputStream){  this(outputStream,76);}  }
class C{  private void startPokeFragment(Bundle bundle){  FragmentManager fragmentManager=getFragmentManager();  mPokeFragment=(PokeFragment)fragmentManager.findFragmentByTag(TAG_POKE_FRAGMENT);  if (mPokeFragment == null) {    mPokeFragment=new PokeFragment();    mPokeFragment.setArguments(bundle);    getFragmentManager().beginTransaction().add(R.id.main_container,mPokeFragment,TAG_POKE_FRAGMENT).commit();  }}  }
class C{  public int find(String what,int start){  try {    ByteBuffer src=ByteBuffer.wrap(this.bytes,0,this.length);    ByteBuffer tgt=encode(what);    byte b=tgt.get();    src.position(start);    while (src.hasRemaining()) {      if (b == src.get()) {        src.mark();        tgt.mark();        boolean found=true;        int pos=src.position() - 1;        while (tgt.hasRemaining()) {          if (!src.hasRemaining()) {            tgt.reset();            src.reset();            found=false;            break;          }          if (!(tgt.get() == src.get())) {            tgt.reset();            src.reset();            found=false;            break;          }        }        if (found)         return pos;      }    }    return -1;  } catch (  CharacterCodingException e) {    e.printStackTrace();    return -1;  }}  }
class C{  public void addSwipeListener(SwipeListener listener){  if (mListeners == null) {    mListeners=new ArrayList<SwipeListener>();  }  mListeners.add(listener);}  }
class C{  public static int addEntryType(String name,int numArgs){  entryTypes.put(name,new Integer(nextEntry));  entryArgs.add(nextEntry,new Integer(numArgs));  nextEntry++;  return nextEntry - 1;}  }
class C{  public void prepare(Context context,ServerTransaction xtn,ArrayList<IEntryHolder> locked_entries,boolean singleParticipant,Map<String,Object> partialUpdatesAndInPlaceUpdatesInfo,boolean shouldReplicate) throws SAException {}  }
class C{  public void clear(){  context.getContentResolver().delete(getContentUri(context,KEY,TYPE),null,null);}  }
class C{  private boolean labelToKeepRec(Node v,Set<Integer> ids,NodeSet keep){  boolean hasBelow=false;  int id=(Integer)v.getInfo();  if (ids.size() == 0 || ids.contains(id))   hasBelow=true;  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    if (labelToKeepRec(w,ids,keep))     hasBelow=true;  }  if (hasBelow)   keep.add(v);  return hasBelow;}  }
class C{  protected void createContainer() throws Throwable {  sendCreateContainerRequest();  waitForPropertyValue(provisioningTaskLink,MockTaskState.class,"taskInfo.stage",TaskState.TaskStage.FINISHED);  verifyContainerStateExists(containerStateReference);  sendGetContainerStateRequest();  containerId=containerState.id;  assertNotNull("Container ID is null",containerId);  assertEquals("container id should be 64 characters long: " + containerId,64,containerId.length());}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public void fling(long time,float x,float y,float velocityX,float velocityY){  getActiveStripLayoutHelper().fling(time,x,y,velocityX,velocityY);}  }
class C{  public void add(Player player){  if (playersById.put(player.getObjectId(),player) != null) {    throw new DuplicateAionObjectException();  }  if (playersByName.put(player.getName(),player) != null) {    throw new DuplicateAionObjectException();  }}  }
class C{  public boolean isWordWrapEnabled(){  return mWordWrapEnabled;}  }
class C{  public void printResults(Writer wr) throws IOException {  for (  ResultSinkInfo sink : this.results.keySet()) {    wr.write("Found a flow to sink " + sink + ", from the following sources:\n");    for (    ResultSourceInfo source : this.results.get(sink)) {      wr.write("\t- " + source.getSource() + "\n");      if (source.getPath() != null && !source.getPath().isEmpty())       wr.write("\t\ton Path " + source.getPath() + "\n");    }  }}  }
class C{  @Override public HarEntry findSimilarEntry(List<HarEntry> harEntries){  HarEntry bestEntry=null;  int bestScore=0;  List<HarEntry> matchingUrl=findEntriesWithUrl(predicate,harEntries);  for (  HarEntry harEntry : matchingUrl) {    QueryStringParameters parametrizable=new QueryStringParameters(harEntry.getRequest());    int harEntryScore=predicate.calculateScore(parametrizable.retrieve());    if (harEntryScore > bestScore) {      bestScore=harEntryScore;      bestEntry=harEntry;    }  }  return bestEntry;}  }
class C{  public void addToPickingQueue(VisualItem item){  if (pitems.length == psize) {    int capacity=(3 * pitems.length) / 2 + 1;    VisualItem[] q=new VisualItem[capacity];    int[] s=new int[capacity];    System.arraycopy(pitems,0,q,0,psize);    System.arraycopy(pscores,0,s,0,psize);    pitems=q;    pscores=s;  }  pitems[psize]=item;  pscores[psize++]=(sort != null ? sort.score(item) : 0);  psorted=false;}  }
class C{  public boolean isUnindexSupported(){  return true;}  }
class C{  public void addGlobalSimpleTypeDecl(XSSimpleType decl){  fGlobalTypeDecls.put(decl.getName(),decl);  if (decl instanceof XSSimpleTypeDecl) {    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200727,skillcaster,value0,skillname);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void layoutAfter(){}  }
class C{  @Override public void merge(@NotNull File from,@NotNull File to) throws TemplateProcessingException {  try {    String targetText=null;    File sourceFile=myContext.getLoader().getSourceFile(from);    File targetFile=getTargetFile(to);    if (!(hasExtension(targetFile,DOT_XML) || hasExtension(targetFile,DOT_GRADLE))) {      throw new RuntimeException("Only XML or Gradle files can be merged at this point: " + targetFile);    }    if (targetFile.exists()) {      if (myContext.getProject().isInitialized()) {        VirtualFile toFile=findFileByIoFile(targetFile,true);        final ReadonlyStatusHandler.OperationStatus status=myReadonlyStatusHandler.ensureFilesWritable(toFile);        if (status.hasReadonlyFiles()) {          throw new TemplateUserVisibleException(String.format("Attempt to update file that is readonly: %1$s",targetFile.getAbsolutePath()));        }      }      targetText=readTextFile(targetFile);    }    if (targetText == null) {      boolean instantiate=hasExtension(from,DOT_FTL);      if (instantiate) {        instantiate(from,targetFile);      } else {        copyTemplateResource(from,targetFile);      }      return;    }    String sourceText;    if (hasExtension(from,DOT_FTL)) {      sourceText=processFreemarkerTemplate(myContext,from,null);    } else {      sourceText=readTextFromDisk(sourceFile);      if (sourceText == null) {        return;      }    }    String contents;    if (targetFile.getName().equals(GRADLE_PROJECT_SETTINGS_FILE)) {      contents=RecipeMergeUtils.mergeGradleSettingsFile(sourceText,targetText);      myNeedsGradleSync=true;    } else     if (targetFile.getName().equals(FN_BUILD_GRADLE)) {      String compileSdkVersion=(String)getParamMap().get(TemplateMetadata.ATTR_BUILD_API_STRING);      contents=myIO.mergeGradleFiles(sourceText,targetText,myContext.getProject(),compileSdkVersion);      myNeedsGradleSync=true;    } else     if (hasExtension(targetFile,DOT_XML)) {      contents=RecipeMergeUtils.mergeXml(myContext,sourceText,targetText,targetFile);    } else {      throw new RuntimeException("Only XML or Gradle settings files can be merged at this point: " + targetFile);    }    myIO.writeFile(this,contents,targetFile);    myReferences.addSourceFile(sourceFile);    myReferences.addTargetFile(targetFile);  } catch (  IOException e) {    throw new RuntimeException(e);  }catch (  TemplateException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set magnifier=" + !isSelected() + ";");}  }
class C{  public void writeShort(short value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeShort(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  @Override public void createFacade(String table,FacadeOptions facadeOptions,Audit audit){  checkLegalTableName(table);  checkNotNull(facadeOptions,"facadeDefinition");  checkNotNull(audit,"audit");  _tableDao.createFacade(table,facadeOptions,audit);}  }
class C{  @RequestMapping(value={"/error","/accessdenied"},method=RequestMethod.GET) public String returnErrorView(HttpSession session){  Exception ex=(Exception)session.getAttribute("SPRING_SECURITY_LAST_EXCEPTION");  ex.printStackTrace();  return "error";}  }
class C{  public okhttp3.Response raw(){  return rawResponse;}  }
class C{  @deprecated public static String canonicalize(String id){  initRegionData();  String result=(String)territoryAliasMap.get(id);  if ((result != null) && (regionIndexMap.containsKey(result))) {    return result;  }  if (regionIndexMap.containsKey(id)) {    return id;  }  return "ZZ";}  }
class C{  public static void writeTestLogs(){  Log.d(TAG,"Gen I: " + Arrays.toString(getGenOne()));  Log.d(TAG,"Gen II: " + Arrays.toString(getGenTwo()));  Log.d(TAG,"Gen III: " + Arrays.toString(getGenThree()));  Log.d(TAG,"Gen IV: " + Arrays.toString(getGenFour()));  Log.d(TAG,"Gen V: " + Arrays.toString(getGenFive()));  Log.d(TAG,"Gen VI: " + Arrays.toString(getGenSix()));}  }
class C{  public void java_lang_Class_getProtectionDomain0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable protdmn=helper.tempField("<java.lang.Class ProtDmn>");  helper.assign(returnVar,protdmn);}  }
class C{  public WallGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int postId){  super(client,"wall.getComments",GetCommentsExtendedResponse.class);  accessToken(actor.getAccessToken());  postId(postId);  extended(true);}  }
class C{  public static void loadContent(Activity context){  FragmentPlaces.loadPlacesList(context);  FragmentDisasters.loadDisastersList(context);  FragmentGoodActs.loadGoodActsList(context);}  }
class C{  protected SoftReference<List<Row>> softlyReferenced(List<Row> rows){  return new SoftReference<>(rows);}  }
class C{  public synchronized void reset(){  timer.start("speakableOut");}  }
class C{  public double[] computeDerivatives(final double t,final double[] y) throws MathIllegalArgumentException, MathIllegalStateException, NullPointerException {  evaluations.increment();  return equations.computeDerivatives(t,y);}  }
class C{  public void withRecorderController(String tag,Consumer<RecorderController> c){  c.take(getRecorderController());}  }
class C{  public static boolean isInvoke(Value val){  val=getEquivalentValueRoot(val);  if (val instanceof InvokeExpr)   return true;  return false;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  byte[] signatureBytes;  try {    signatureBytes=Base64.decode(signature,Base64.DEFAULT);  } catch (  IllegalArgumentException e) {    Log.e(TAG,"Base64 decoding failed.");    return false;  }  try {    Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(signatureBytes)) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }  return false;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  private final boolean isResolvable(Object base){  return base instanceof JsonNode;}  }
class C{  public synchronized boolean end(){  if (line != null) {    drain();synchronized (lineLock) {      line.close();      line=null;    }    notify();    debugPrint("ended stream...");  }  return true;}  }
class C{  public static MP4Parser parse(String path) throws IOException {  return new MP4Parser(path);}  }
class C{  public static FloatList createList(int size){  FloatList prev=null;  FloatList first=null;  for (int i=0; i < size; i++) {    FloatList cur=new FloatList();    cur.prev=prev;    if (prev == null) {      first=cur;    } else {      prev.next=cur;    }    prev=cur;  }  first.prev=prev;  prev.next=first;  return first;}  }
class C{  public ChangeSet addAllToCollection(String path,Serializable... newItems){  return addAllToCollection(path,Arrays.asList(newItems));}  }
class C{  public void writeObject(Object value) throws JMSException {  if (value == null) {    throw new NullPointerException();  }  initializeWriting();  if (value instanceof Boolean) {    writeBoolean(((Boolean)value).booleanValue());  } else   if (value instanceof Character) {    writeChar(((Character)value).charValue());  } else   if (value instanceof Byte) {    writeByte(((Byte)value).byteValue());  } else   if (value instanceof Short) {    writeShort(((Short)value).shortValue());  } else   if (value instanceof Integer) {    writeInt(((Integer)value).intValue());  } else   if (value instanceof Double) {    writeDouble(((Double)value).doubleValue());  } else   if (value instanceof Long) {    writeLong(((Long)value).longValue());  } else   if (value instanceof Float) {    writeFloat(((Float)value).floatValue());  } else   if (value instanceof Double) {    writeDouble(((Double)value).doubleValue());  } else   if (value instanceof String) {    writeUTF(value.toString());  } else   if (value instanceof byte[]) {    writeBytes((byte[])value);  } else {    throw new MessageFormatException("Cannot write non-primitive type:" + value.getClass());  }}  }
class C{  @Override public void onTxCommit(Transaction tx){  if (!tx.isReadOnly() && enableLogging) {    LogSeqNum lsn=new CommitRecord(txNum).writeToLog();    VanillaDb.logMgr().flush(lsn);  }}  }
class C{  protected final void addNamespaceDecl(String prefix,String uri,ElementImpl element){  if (DEBUG) {    System.out.println("[ns-fixup] addNamespaceDecl [" + prefix + "]");  }  if (prefix == XMLSymbols.EMPTY_STRING) {    if (DEBUG) {      System.out.println("=>add xmlns=\"" + uri + "\" declaration");    }    element.setAttributeNS(NamespaceContext.XMLNS_URI,XMLSymbols.PREFIX_XMLNS,uri);  } else {    if (DEBUG) {      System.out.println("=>add xmlns:" + prefix + "=\""+ uri+ "\" declaration");    }    element.setAttributeNS(NamespaceContext.XMLNS_URI,"xmlns:" + prefix,uri);  }}  }
class C{  @NotNull public CreatePersonGroupAction createGroup(@NotNull String personGroupId,@NotNull String name,@Nullable String userData){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(name,"^.{1,128}$",new ParameterValidationException("name","The maximum length is 128"));  Validation.validate(userData,16,new ParameterValidationException("userData","The size limit is 16KB"));  return new CreatePersonGroupAction(cognitiveContext,personGroupId,name,userData);}  }
class C{  protected void updateData(List<Object[]> listBasedResult){  if (tableBlockExecutionInfos.isFixedKeyUpdateRequired()) {    updateKeyWithLatestBlockKeygenerator(listBasedResult);  }}  }
class C{  private boolean isLegalIndex(int i){  return !isIllegalIndex(i);}  }
class C{  public StringListImpl(String[] array,int length){  fArray=array;  fLength=length;  fVector=null;}  }
class C{  private final void reapRecentDeletes(){  if (!_cacheManager.useRecentDeletes())   return;  int reapCount=0;  try {    long currentTime=SystemTime.timeMillis();    long expirationTime=currentTime - _expirationTimeRecentDeletes;    long checkTime=currentTime - -LM_EXPIRATION_TIME_RECENT_DELETES_CHECK_DEFAULT;    if (_force || _lastRepeadRecentDeletes < checkTime)     _lastRepeadRecentDeletes=checkTime; else     return;    for (Iterator<RecentDeletesRepository.RecentDeleteInfo> itr=_cacheManager.getRecentDeletesIterator(); itr.hasNext(); ) {      RecentDeletesRepository.RecentDeleteInfo rdinfo=itr.next();      long etime=rdinfo.getTimeBase();      if (etime < expirationTime || (etime == Long.MAX_VALUE && _cacheManager.requiresEvictionReplicationProtection())) {        ILockObject entryLock=null;        try {          entryLock=_cacheManager.getLockManager().getLockObject(rdinfo.getUid());synchronized (entryLock) {            RecentDeletesRepository.RecentDeleteInfo curInfo=_cacheManager.getRecentDeleteInfo(rdinfo.getUid());            if (curInfo != rdinfo)             continue;            IEntryHolder entry=_cacheManager.getEntryByUidFromPureCache(rdinfo.getUid());            if (entry == null)             throw new RuntimeException("RecentDeletes reaper: entry not in memory " + rdinfo.getUid());            if (!entry.isDeleted())             throw new RuntimeException("RecentDeletes reaper: entry not deleted " + rdinfo.getUid());            if (curInfo.getTimeBase() == Long.MAX_VALUE) {              XtnEntry xtnEntry=rdinfo.getXtn() != null ? _engine.getTransaction(rdinfo.getXtn()) : null;              if (xtnEntry != null && xtnEntry.getStatus() != XtnStatus.COMMITED && xtnEntry.getStatus() != XtnStatus.ROLLED)               continue;              if (_cacheManager.getEvictionReplicationsMarkersRepository().isEntryEvictable(rdinfo.getUid(),false)) {                _cacheManager.insertToRecentDeletes(entry,SystemTime.timeMillis(),rdinfo.getXtn());              }              continue;            }            itr.remove();            reapCount++;            _cacheManager.removeEntryFromCache(entry,false,true,null,RecentDeleteCodes.REMOVE_DUMMY);          }        }  finally {          if (entryLock != null)           _cacheManager.getLockManager().freeLockObject(entryLock);        }      }    }  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,this.getName() + " - caught exception while reaping recent deleted entries.",ex);    }  }  if (reapCount > 0)   if (_logger.isLoggable(Level.FINE)) {    _logger.fine(this.getName() + " - Reaped content of recently deleted entries. [Reaped: " + reapCount+ ", Remaining:"+ _cacheManager.getNumOfRecentDeletes()+ "]");  }}  }
class C{  public List<SootMethod> clinits(){  List<SootMethod> ret=new ArrayList<SootMethod>();  for (Iterator<SootClass> clIt=Scene.v().getClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=clIt.next();    addMethod(ret,cl,sigClinit);  }  return ret;}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public SM_ACCOUNT_LIST(Map<Integer,AionConnection> accounts){  super(0x04);  this.accounts=accounts;}  }
class C{  @Override public int readInt(String filePath,long offset){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE,offset);  return byteBffer.getInt();}  }
class C{  public NGramCategory(String sName){  super();  Dictionary=new Dictionary(sName,12);  Dictionary.AddSubStrings=true;  Dictionary.RemoveSubStrings=false;  DocumentCount=0;  Name=sName;}  }
class C{  public static Class[] toClass(ServiceTypeBase[] stypes){  Class[] classes=null;  if (stypes != null) {    classes=new Class[stypes.length];    for (int i=stypes.length; --i >= 0; ) {      try {        ServiceTypeBase stype=stypes[i];        classes[i]=stype.type.toClass(stype.codebase);      } catch (      Throwable e) {        RegistrarProxy.handleException(e);      }    }  }  return classes;}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public static JavaRDD<List<List<Writable>>> normalizeSequence(Schema schema,JavaRDD<List<List<Writable>>> data,double min,double max,List<String> excludeColumns){  if (excludeColumns == null)   excludeColumns=Arrays.asList(DataFrames.SEQUENCE_UUID_COLUMN,DataFrames.SEQUENCE_INDEX_COLUMN); else {    excludeColumns=new ArrayList<>(excludeColumns);    excludeColumns.add(DataFrames.SEQUENCE_UUID_COLUMN);    excludeColumns.add(DataFrames.SEQUENCE_INDEX_COLUMN);  }  DataFrame frame=DataFrames.toDataFrameSequence(schema,data);  return DataFrames.toRecordsSequence(normalize(frame,min,max,excludeColumns)).getSecond();}  }
class C{  public String toString(){  String sRes="[";  Iterator iIter=iterator();  while (iIter.hasNext()) {    Object oNext=iIter.next();    sRes+=oNext.toString();    if (iIter.hasNext())     sRes+=",";  }  sRes+="]";  return sRes;}  }
class C{  public static int loadCubeMap(Context context,int[] cubeResources){  final int[] textureObjectIds=new int[1];  glGenTextures(1,textureObjectIds,0);  if (textureObjectIds[0] == 0) {    if (LoggerConfig.ON) {      Log.w(TAG,"Could not generate a new OpenGL texture object.");    }    return 0;  }  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inScaled=false;  final Bitmap[] cubeBitmaps=new Bitmap[6];  for (int i=0; i < 6; i++) {    cubeBitmaps[i]=BitmapFactory.decodeResource(context.getResources(),cubeResources[i],options);    if (cubeBitmaps[i] == null) {      if (LoggerConfig.ON) {        Log.w(TAG,"Resource ID " + cubeResources[i] + " could not be decoded.");      }      glDeleteTextures(1,textureObjectIds,0);      return 0;    }  }  glBindTexture(GL_TEXTURE_CUBE_MAP,textureObjectIds[0]);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MIN_FILTER,GL_LINEAR);  glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MAG_FILTER,GL_LINEAR);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X,0,cubeBitmaps[0],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,cubeBitmaps[1],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,0,cubeBitmaps[2],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y,0,cubeBitmaps[3],0);  texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,0,cubeBitmaps[4],0);  texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z,0,cubeBitmaps[5],0);  glBindTexture(GL_TEXTURE_2D,0);  for (  Bitmap bitmap : cubeBitmaps) {    bitmap.recycle();  }  return textureObjectIds[0];}  }
class C{  @Override public synchronized void mark(int readlimit){  in.mark(readlimit);  mark=pos;}  }
class C{  public boolean hasProgramEnrollmentEndDate(){  return programEnrollmentEndDate != null;}  }
class C{  public void divide(final double[] lhs,final int lhsOffset,final double[] rhs,final int rhsOffset,final double[] result,final int resultOffset){  final double[] reciprocal=new double[getSize()];  pow(rhs,lhsOffset,-1,reciprocal,0);  multiply(lhs,lhsOffset,reciprocal,0,result,resultOffset);}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);  setChild(new List(),4);}  }
class C{  public ArrayFieldVector(FieldVector<T> v1,FieldVector<T> v2) throws NullArgumentException {  MathUtils.checkNotNull(v1);  MathUtils.checkNotNull(v2);  field=v1.getField();  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();  final T[] v2Data=(v2 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v2).data : v2.toArray();  data=MathArrays.buildArray(field,v1Data.length + v2Data.length);  System.arraycopy(v1Data,0,data,0,v1Data.length);  System.arraycopy(v2Data,0,data,v1Data.length,v2Data.length);}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  public static boolean isEmpty(String s){  return (s == null) || s.length() == 0;}  }
class C{  public static double angle(Vector3D v1,Vector3D v2) throws MathRuntimeException {  double normProduct=v1.getNorm() * v2.getNorm();  if (normProduct == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_NORM);  }  double dot=v1.dotProduct(v2);  double threshold=normProduct * 0.9999;  if ((dot < -threshold) || (dot > threshold)) {    Vector3D v3=crossProduct(v1,v2);    if (dot >= 0) {      return FastMath.asin(v3.getNorm() / normProduct);    }    return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);  }  return FastMath.acos(dot / normProduct);}  }
class C{  private void fixTheIy(Utterance utterance){  Voice voice=utterance.getVoice();  for (Item item=utterance.getRelation(Relation.SEGMENT).getHead(); item != null; item=item.getNext()) {    if ("ax".equals(item.toString())) {      String word=wordPath.findFeature(item).toString();      if ("the".equals(word) && ("+".equals(N_PH_VC.findFeature(item)))) {        item.getFeatures().setString("name","iy");      }    }  }}  }
class C{  private List<Character> convertDnaReadToTextReadBS() throws IOException {  if (this.gc.getRefSeq() == null) {    return this.getConsRead();  }  boolean isSecondOfPair=false;  if (rec.getReadPairedFlag() && rec.getSecondOfPairFlag()) {    isSecondOfPair=true;  }  boolean isForwardStrand=!this.rec.getReadNegativeStrandFlag();  List<Character> textReadBS=this.getConsRead();  for (int i=0; i < textReadBS.size(); i++) {    char ref=(char)this.gc.getRefSeq()[i + this.textStart - 1];    ref=Character.toUpperCase(ref);    char read=textReadBS.get(i);    if ((isForwardStrand && !isSecondOfPair) || (!isForwardStrand && isSecondOfPair)) {      if (isForwardStrand) {        if (ref == 'C' && read == '.') {          textReadBS.set(i,charM);        } else         if (ref == 'C' && read == 'T') {          textReadBS.set(i,charU);        } else {        }      } else {        if (ref == 'C' && read == ',') {          textReadBS.set(i,charm);        } else         if (ref == 'C' && read == 't') {          textReadBS.set(i,charu);        } else {        }      }    } else     if ((!isForwardStrand && !isSecondOfPair) || (isForwardStrand && isSecondOfPair)) {      if (!isForwardStrand) {        if (ref == 'G' && read == ',') {          textReadBS.set(i,'m');        } else         if (ref == 'G' && read == 'a') {          textReadBS.set(i,'u');        } else {        }      } else {        if (ref == 'G' && read == '.') {          textReadBS.set(i,'M');        } else         if (ref == 'G' && read == 'A') {          textReadBS.set(i,'U');        } else {        }      }    }  }  return textReadBS;}  }
class C{  public void addSymbolSelectedListener(SymbolizerSelectedInterface symbolizerSelectedPanel){  displayPanel=symbolizerSelectedPanel;}  }
class C{  @PostConstruct public final void init() throws ConfUnknownTypeException, ConfRejectedTypeException {  Runtime.getRuntime().addShutdownHook(this.ksh);  processMessageReceiver.setKernel(this);  processMessageReceiver.setRequestController(requestController);  configure();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private void applyWindowFunction(double[] data){  if (windowFunctionType != WND_NONE) {    for (int i=0; i < data.length; i++)     data[i]*=windowFunction[i];  }}  }
class C{  protected Dfp(final DfpField field,double x){  mant=new int[field.getRadixDigits()];  sign=1;  exp=0;  nans=FINITE;  this.field=field;  long bits=Double.doubleToLongBits(x);  long mantissa=bits & 0x000fffffffffffffL;  int exponent=(int)((bits & 0x7ff0000000000000L) >> 52) - 1023;  if (exponent == -1023) {    if (x == 0) {      if ((bits & 0x8000000000000000L) != 0) {        sign=-1;      }      return;    }    exponent++;    while ((mantissa & 0x0010000000000000L) == 0) {      exponent--;      mantissa<<=1;    }    mantissa&=0x000fffffffffffffL;  }  if (exponent == 1024) {    if (x != x) {      sign=(byte)1;      nans=QNAN;    } else     if (x < 0) {      sign=(byte)-1;      nans=INFINITE;    } else {      sign=(byte)1;      nans=INFINITE;    }    return;  }  Dfp xdfp=new Dfp(field,mantissa);  xdfp=xdfp.divide(new Dfp(field,4503599627370496l)).add(field.getOne());  xdfp=xdfp.multiply(DfpMath.pow(field.getTwo(),exponent));  if ((bits & 0x8000000000000000L) != 0) {    xdfp=xdfp.negate();  }  System.arraycopy(xdfp.mant,0,mant,0,mant.length);  sign=xdfp.sign;  exp=xdfp.exp;  nans=xdfp.nans;}  }
class C{  public static void main(String[] args) throws Throwable {  startup();  MaryNormalisedWriter writer=new MaryNormalisedWriter();  ReaderSplitter splitter=new ReaderSplitter(new InputStreamReader(System.in),"</maryxml>");  Reader oneXMLStructure=null;  while ((oneXMLStructure=splitter.nextReader()) != null) {    writer.output(new StreamSource(oneXMLStructure));  }}  }
class C{  protected double df(double v1,double v2,double n1,double n2){  return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) / ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) / (n2 * n2 * (n2 - 1d)));}  }
class C{  public ApiFilter(@NotNull String filterQuery,LogicalTable table,DimensionDictionary dimensionDictionary) throws BadFilterException {  LOG.trace("Filter query: {}\n\n DimensionDictionary: {}",filterQuery,dimensionDictionary);  Pattern pattern=Pattern.compile("([^\\|]+)\\|([^-]+)-([^\\[]+)\\[([^\\]]+)\\]?");  Matcher matcher=pattern.matcher(filterQuery);  if (!matcher.matches()) {    LOG.debug(FILTER_INVALID.logFormat(filterQuery));    throw new BadFilterException(FILTER_INVALID.format(filterQuery));  }  try {    String filterDimensionName=matcher.group(1);    this.dimension=dimensionDictionary.findByApiName(filterDimensionName);    if (dimension == null) {      LOG.debug(FILTER_DIMENSION_UNDEFINED.logFormat(filterDimensionName));      throw new BadFilterException(FILTER_DIMENSION_UNDEFINED.format(filterDimensionName));    }    if (table != null && !table.getDimensions().contains(dimension)) {      LOG.debug(FILTER_DIMENSION_NOT_IN_TABLE.logFormat(filterDimensionName,table));      throw new BadFilterException(FILTER_DIMENSION_NOT_IN_TABLE.format(filterDimensionName,table.getName()));    }    String dimensionFieldName=matcher.group(2);    try {      this.dimensionField=this.dimension.getFieldByName(dimensionFieldName);    } catch (    IllegalArgumentException ignored) {      LOG.debug(FILTER_FIELD_NOT_IN_DIMENSIONS.logFormat(dimensionFieldName,filterDimensionName));      throw new BadFilterException(FILTER_FIELD_NOT_IN_DIMENSIONS.format(dimensionFieldName,filterDimensionName));    }    String operationName=matcher.group(3);    try {      this.operation=FilterOperation.valueOf(operationName);    } catch (    IllegalArgumentException ignored) {      LOG.debug(FILTER_OPERATOR_INVALID.logFormat(operationName));      throw new BadFilterException(FILTER_OPERATOR_INVALID.format(operationName));    }    this.values=new LinkedHashSet<>(FilterTokenizer.split(matcher.group(4).replaceAll("\\[","").replaceAll("\\]","").trim()));  } catch (  IllegalArgumentException e) {    LOG.debug(FILTER_ERROR.logFormat(filterQuery,e.getMessage()),e);    throw new BadFilterException(FILTER_ERROR.format(filterQuery,e.getMessage()),e);  }}  }
class C{  public JobRequest(String ticket){  this.ticket=ticket;}  }
class C{  public TextEditor replaceAll(String regex,String replacement){  if (text.length() > 0) {    final String r=replacement;    Pattern p=Pattern.compile(regex,Pattern.MULTILINE);    Matcher m=p.matcher(text);    StringBuffer sb=new StringBuffer();    while (m.find()) {      m.appendReplacement(sb,r);    }    m.appendTail(sb);    text=new StringBuilder(sb.toString());  }  return this;}  }
class C{  public static StringBuilder readFile(String filePath,String charsetName){  File file=new File(filePath);  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(reader);  }}  }
class C{  public void onUpOrCancel(long time){  if (mLastPressedCloseButton != null)   mLastPressedCloseButton.onUpOrCancel();  mLastPressedCloseButton=null;  stopReorderMode();  mInteractingTab=null;  mReorderState=REORDER_SCROLL_NONE;  if (mNewTabButton.onUpOrCancel() && mModel != null) {    mTabCreator.launchNTP();  }}  }
class C{  public ShimpleBodyBuilder(ShimpleBody body){  this.body=body;  sf=G.v().shimpleFactory;  sf.setBody(body);  sf.clearCache();  phi=new PhiNodeManager(body);  pi=new PiNodeManager(body,false);  options=body.getOptions();  makeUniqueLocalNames();}  }
class C{  public void removeGroup(Group group) throws ObjectLacksException {  removeGroup(group.getName());}  }
class C{  public boolean fieldsExistsInHost(){  Structure hostStructure=StructureFactory.getStructureByVelocityVarName("Host");  List<Field> fieldsInStructure=FieldFactory.getFieldsByStructure(hostStructure.getInode());  for (  Field f : fieldsInStructure) {    if (Configuration.HOSTFIELDNAME_TWITTERCONSUMERKEY.equalsIgnoreCase(f.getFieldName())) {      fieldTwitterConsumerKeyExists=true;    } else     if (Configuration.HOSTFIELDNAME_TWITTERSECRETCONSUMERKEY.equalsIgnoreCase(f.getFieldName())) {      fieldTwitterSecretConsumerKeyExists=true;    } else     if (Configuration.HOSTFIELDNAME_TWITTERACCESSTOKEN.equalsIgnoreCase(f.getFieldName())) {      fieldTwitterAccessTokenExists=true;    } else     if (Configuration.HOSTFIELDNAME_TWITTERSECRETACCESSTOKEN.equalsIgnoreCase(f.getFieldName())) {      fieldTwitterSecretAccessTokenExists=true;    } else     if (Configuration.HOSTFIELDNAME_TWITTERLINEDIVIDER.equalsIgnoreCase(f.getFieldName())) {      fieldLinedividerTwitterConfigurationExists=true;    }  }  if (!fieldTwitterConsumerKeyExists || !fieldTwitterSecretConsumerKeyExists || !fieldTwitterAccessTokenExists|| !fieldTwitterSecretAccessTokenExists|| !fieldLinedividerTwitterConfigurationExists) {    return false;  }  return true;}  }
class C{  public static void decorate(View hostView,View decorView,int gravity){  decorate(hostView,decorView,gravity,0,0,0,0);}  }
class C{  public static int clearListInfo(Delegator delegator,String shoppingListId) throws GenericEntityException {  delegator.removeByAnd("ShoppingListItemSurvey",UtilMisc.toMap("shoppingListId",shoppingListId));  return delegator.removeByAnd("ShoppingListItem",UtilMisc.toMap("shoppingListId",shoppingListId));}  }
class C{  private void addOptionalSecurityLibs(StringBuilder classpath){  addLibs(classpath,Locator.getLibOptionalSecurity());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_ALREADY_DISTRIBUTING_ITEM(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1390219,descriptionId);}  }
class C{  private static Object value(String strValue,Field field){  checkNotNull(field);  if (field.getGenericType() instanceof ParameterizedType) {    Class<?> clazz=(Class<?>)((ParameterizedType)field.getGenericType()).getActualTypeArguments()[0];    if (field.getType().equals(List.class))     return stringToList(strValue,clazz); else     if (field.getType().equals(Set.class))     return stringToSet(strValue,clazz); else     throw new IllegalArgumentException(format("unsupported field-type %s for %s",field.getType(),field.getName()));  } else {    return convert(strValue,field.getType());  }}  }
class C{  public static long mulAndCheck(long a,long b) throws MathRuntimeException {  long ret;  if (a > b) {    ret=mulAndCheck(b,a);  } else {    if (a < 0) {      if (b < 0) {        if (a >= Long.MAX_VALUE / b) {          ret=a * b;        } else {          throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);        }      } else       if (b > 0) {        if (Long.MIN_VALUE / b <= a) {          ret=a * b;        } else {          throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);        }      } else {        ret=0;      }    } else     if (a > 0) {      if (a <= Long.MAX_VALUE / b) {        ret=a * b;      } else {        throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);      }    } else {      ret=0;    }  }  return ret;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CURRENT_EXCLUDES(int num0){  return new SM_SYSTEM_MESSAGE(1300634,num0);}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public boolean accept(File dir,String name){  return accept(new File(dir,name));}  }
class C{  private void updateDimProperties(){  Map<String,int[]> indices=new HashMap<String,int[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Map<String,String[]> columns=new HashMap<String,String[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Map<String,String[]> dbTypes=new HashMap<String,String[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  if (carbonProps != null && !"".equals(carbonProps)) {    String[] entries=carbonProps.split(CarbonCommonConstants.AMPERSAND_SPC_CHARACTER);    for (int i=0; i < entries.length; i++) {      String[] levelEntry=entries[i].split(CarbonCommonConstants.COLON_SPC_CHARACTER);      String dimColumnName=levelEntry[0];      int[] pIndices=new int[levelEntry.length - 1];      String[] cols=new String[levelEntry.length - 1];      String[] dbType=new String[levelEntry.length - 1];      for (int j=1; j < levelEntry.length; j++) {        String[] propEntry=levelEntry[j].split(CarbonCommonConstants.COMA_SPC_CHARACTER);        pIndices[j - 1]=Integer.parseInt(propEntry[1]);        cols[j - 1]=propEntry[0];        dbType[j - 1]=propEntry[2];      }      indices.put(dimColumnName,pIndices);      columns.put(dimColumnName,cols);      dbTypes.put(dimColumnName,dbType);    }  }  if (indices.isEmpty()) {    return;  }  propColumns=new List[dimColNames.length];  propTypes=new List[dimColNames.length];  propIndxs=new int[dimColNames.length][];  for (int i=0; i < dimColNames.length; i++) {    if (indices.containsKey(dimColNames[i])) {      propColumns[i]=Arrays.asList(columns.get(dimColNames[i]));      propTypes[i]=Arrays.asList(dbTypes.get(dimColNames[i]));      propIndxs[i]=indices.get(dimColNames[i]);    } else {      propColumns[i]=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);      propTypes[i]=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);      propIndxs[i]=new int[0];    }  }}  }
class C{  public void recordLatency(double latencySec){  if (!completedLatencySeconds.isPresent()) {    return;  }  addLabels(completedLatencySeconds.get()).observe(latencySec);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_READ_TODAY_WORDS(String value0){  return new SM_SYSTEM_MESSAGE(1390124,value0);}  }
class C{  @Override public boolean isEmpty(){  return backedSet.isEmpty();}  }
class C{  @Override public boolean shouldSkipField(FieldAttributes fieldAttributes){  return blacklist.contains(fieldAttributes.getName());}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public ModuleToImport(@NotNull String name,@Nullable VirtualFile location,@NotNull Supplier<? extends Iterable<String>> dependencyComputer){  this.name=name;  this.location=location;  myDependencyComputer=Suppliers.memoize(dependencyComputer);}  }
class C{  public static void main(String[] args){  PacProxyDebugging pt=new PacProxyDebugging();  pt.installLogger();  ProxySearch proxySearch=ProxySearch.getDefaultProxySearch();  ProxySelector myProxySelector=proxySearch.getProxySelector();  ProxySelector.setDefault(myProxySelector);  System.out.println("Using proxy selector: " + myProxySelector);  String webAddress=TEST_URL;  try {    URL url=new URL(webAddress);    System.out.println("Now open a connection to the url: " + webAddress);    System.out.println("==============================================");    URLConnection conn=url.openConnection();    conn.setConnectTimeout(10 * 1000);    InputStream in=conn.getInputStream();    LineNumberReader lr=new LineNumberReader(new InputStreamReader(in));    String line;    while ((line=lr.readLine()) != null) {      System.out.println("response line " + lr.getLineNumber() + ": "+ line);    }    System.out.println("---- END -------------------------------------");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean intersectWherePlanar(Triangle t,Vector3f loc){  return intersectWherePlanar(t.get(0),t.get(1),t.get(2),loc);}  }
class C{  public int hashCode(){  return (int)(ConnectionAbsoluteTime.class.hashCode() + time);}  }
class C{  private void resetLayout(){  mLayoutTabs=null;  mBaseTab=null;}  }
class C{  public Boolean doOutputScc(){  return doOutputScc;}  }
class C{  public boolean isInfinite(){  return nans == INFINITE;}  }
class C{  public void buildElectionGroups(String spaceName){  if ((_electionGroups=buildElectionGroups(m_WriteFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_TakeFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_ReadFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_NotifyFOPolicy)) == null && (_electionGroups=buildElectionGroups(m_DefaultFOPolicy)) == null) {    return;  }  for (  Map.Entry<String,List<String>> entry : _electionGroups.entrySet()) {    String primary=entry.getKey();    List<String> electionGroup=entry.getValue();    if (electionGroup.contains(spaceName))     _electionGroupName=primary;  }}  }
class C{  public final boolean canGetDouble(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetDouble());}  }
class C{  protected WallRepostQuery object(String value){  return unsafeParam("object",value);}  }
class C{  protected MarketDeleteQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  private boolean validValue(Object value){  return value != null && !value.toString().isEmpty();}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  void dumpBinary(DataOutputStream os) throws IOException {  os.writeInt(type);  os.writeInt(phone);  os.writeInt(start);  os.writeInt(end);  os.writeInt(prev);  os.writeInt(next);}  }
class C{  public static void main(final String[] args){  System.out.println("i: int   = " + convertString(1));  System.out.println("f: float = " + convertString(1f));}  }
class C{  public XmlStreamReader(InputStream is,boolean lenient,String defaultEncoding) throws IOException {  this.defaultEncoding=defaultEncoding;  BOMInputStream bom=new BOMInputStream(new BufferedInputStream(is,BUFFER_SIZE),false,BOMS);  BOMInputStream pis=new BOMInputStream(bom,true,XML_GUESS_BYTES);  this.encoding=doRawStream(bom,pis,lenient);  this.reader=new InputStreamReader(pis,encoding);}  }
class C{  protected AdsGetUploadURLQuery adFormat(AdsGetUploadURLAdFormat value){  return unsafeParam("ad_format",value);}  }
class C{  @NotNull GetPersonGroupTrainingStatusAction personGroupTrainingStatus(@NotNull String personGroupId){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new GetPersonGroupTrainingStatusAction(cognitiveContext,personGroupId);}  }
class C{  public void add(int position,T item){  items.add(position,item);  notifyItemInserted(position);}  }
class C{  private void addPeriodsToContext(Collection<Period> periods){  for (  Period period : periods) {    PeriodTypeExtended periodTypeX=getOrCreatePeriodTypeExtended(period.getPeriodType());    periodTypeX.getPeriods().add(period);  }}  }
class C{  public static URL urlFromString(String location){  return urlFromString(location,null,true);}  }
class C{  private static boolean isTwoDatesPresentInRequiredRange(Date segDate1,Date segDate2,long numberOfDaysAllowedToMerge){  if (segDate1 == null || segDate2 == null) {    return false;  }  Calendar cal1=Calendar.getInstance();  cal1.set(segDate1.getYear(),segDate1.getMonth(),segDate1.getDate());  Calendar cal2=Calendar.getInstance();  cal2.set(segDate2.getYear(),segDate2.getMonth(),segDate2.getDate());  long diff=cal2.getTimeInMillis() - cal1.getTimeInMillis();  if ((diff / (24 * 60 * 60* 1000)) < numberOfDaysAllowedToMerge) {    return true;  }  return false;}  }
class C{  @Override public boolean accept(File file,String name){  for (  String prefix : prefixes) {    if (caseSensitivity.checkStartsWith(name,prefix)) {      return true;    }  }  return false;}  }
class C{  static void pushRequestStack(String name,Object value,boolean setLast,HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {  if (request != null) {    updateStack(getRequestVarMapFromReqAttribs(request),name,value,setLast,"request attributes");  } else {    Map<String,Object> globalContext=getGlobalContext(context,env);    if (globalContext != null) {      updateStack(getRequestVarMapFromGlobalContext(globalContext),name,value,setLast,"globalContext");    } else     if (env != null) {      updateStack(getRequestVarMapFromFtlGlobals(env),name,value,setLast,"FTL globals");    } else {      throw new IllegalArgumentException("No request, context or ftl environment to push request scope stack (name: " + name + ")");    }  }}  }
class C{  public void press(){  this.isDown=true;  this.justPressed=true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_PLAY_TIME(int num0){  return new SM_SYSTEM_MESSAGE(1300592,num0);}  }
class C{  public boolean isValidPoint(double x){  if (x < knots[0] || x > knots[n]) {    return false;  } else {    return true;  }}  }
class C{  public void registerInitialContext(Appendable writer,Map<String,Object> context) throws IOException {  registerScreenRenderer(writer,context);  if (screenRenderer != null) {    if (screenRenderer.initialContext == null) {      if (context instanceof MapStack) {        screenRenderer.initialContext=(MapStack<String>)context;      } else {        throw new IllegalStateException("Scipio: Expected initial screen context to be a MapStack, " + "but was of type: " + context.getClass().getName());      }    }  } else {    Debug.logError("macro " + rendererLabel + " renderer template environment initial context register "+ "could not retrieve macro screen renderer instance",MacroScreenRenderer.module);  }}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public boolean match(String text,int start,int end){  if (null == text)   throw new IllegalArgumentException();  if (start > end)   return false;  if (fIgnoreWildCards)   return (end - start == fLength) && fPattern.regionMatches(fIgnoreCase,0,text,start,fLength);  int segCount=fSegments.length;  if (segCount == 0 && (fHasLeadingStar || fHasTrailingStar))   return true;  if (start == end)   return fLength == 0;  if (fLength == 0)   return start == end;  int tlen=text.length();  if (start < 0)   start=0;  if (end > tlen)   end=tlen;  int tCurPos=start;  int bound=end - fBound;  if (bound < 0)   return false;  int i=0;  String current=fSegments[i];  int segLength=current.length();  if (!fHasLeadingStar) {    if (!regExpRegionMatches(text,start,current,0,segLength)) {      return false;    } else {      ++i;      tCurPos=tCurPos + segLength;    }  }  if ((fSegments.length == 1) && (!fHasLeadingStar) && (!fHasTrailingStar)) {    return tCurPos == end;  }  while (i < segCount) {    current=fSegments[i];    int currentMatch;    int k=current.indexOf(fSingleWildCard);    if (k < 0) {      currentMatch=textPosIn(text,tCurPos,end,current);      if (currentMatch < 0)       return false;    } else {      currentMatch=regExpPosIn(text,tCurPos,end,current);      if (currentMatch < 0)       return false;    }    tCurPos=currentMatch + current.length();    i++;  }  if (!fHasTrailingStar && tCurPos != end) {    int clen=current.length();    return regExpRegionMatches(text,end - clen,current,0,clen);  }  return i == segCount;}  }
class C{  @Override public Filter createFilter(){  return new AfterExtended();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DUEL_START(String value0){  return new SM_SYSTEM_MESSAGE(1300777,value0);}  }
class C{  public DiagonalMatrix(final double[] d){  this(d,true);}  }
class C{  private static String toSp(int n){  return String.format("%d" + UNIT_SP,n);}  }
class C{  public DocsGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public UrlSpaceConfigurer attributeStore(AttributeStore attributeStore){  validate();  urlSpaceFactoryBean.attributeStore(attributeStore);  return this;}  }
class C{  public <T>T insertFirstComponentType(Class<T> componentClass){  By componentLocator=getComponentLocator(componentClass);  openInsertWindow().insertComponent(componentClass);  wait.withTimeout(Timeouts.SMALL).until(null);  return pageObjectInjector.inject(componentClass,getComponentScope(componentClass,0),currentFrame);}  }
class C{  @Override public boolean hasField(String fldName){  return fieldList.contains(fldName);}  }
class C{  @Override public long addRole(Role role){  return sessionTemplate.insert(NAMESPACE + ".addRole",role);}  }
class C{  public static Matrix4 matrixFromPointNormalUp(double[] point,double[] normal,Vector3 up){  Vector3 zAxis=new Vector3(normal);  zAxis.normalize();  Vector3 xAxis=new Vector3();  xAxis.crossAndSet(up,zAxis);  xAxis.normalize();  Vector3 yAxis=new Vector3();  yAxis.crossAndSet(xAxis,zAxis);  yAxis.normalize();  double[] rot=new double[16];  rot[Matrix4.M00]=xAxis.x;  rot[Matrix4.M10]=xAxis.y;  rot[Matrix4.M20]=xAxis.z;  rot[Matrix4.M01]=yAxis.x;  rot[Matrix4.M11]=yAxis.y;  rot[Matrix4.M21]=yAxis.z;  rot[Matrix4.M02]=zAxis.x;  rot[Matrix4.M12]=zAxis.y;  rot[Matrix4.M22]=zAxis.z;  rot[Matrix4.M33]=1;  Matrix4 m=new Matrix4(rot);  m.setTranslation(point[0],point[1],point[2]);  return m;}  }
class C{  boolean acceptNode(Node node){  if (fNodeFilter == null) {    return (fWhatToShow & (1 << node.getNodeType() - 1)) != 0;  } else {    return ((fWhatToShow & (1 << node.getNodeType() - 1)) != 0) && fNodeFilter.acceptNode(node) == NodeFilter.FILTER_ACCEPT;  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void toString(StringBuilder sb,Node root){  sb.append('(');  sb.append(root.name);  if (!isLeaf(root)) {    sb.append(' ');  }  for (  Node child : root.children) {    toString(sb,child);  }  sb.append(')');}  }
class C{  public void deactivate(){  if (!inSelection) {    inSelection=true;    try {      chartSelection.clearSelectionSeries();      this.repaint();    }  finally {      inSelection=false;    }  }}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  private void clustering(int tagetClusterSize,String linkageType){  assert clusterList != null;  int minClusterOne=0;  int minClusterTwo=0;  double minDistance;  for (int i=clusterList.size(); i > tagetClusterSize; i--) {    minDistance=this.MINDISTANCE;    for (int j=0; j < clusterList.size(); j++) {      Cluster clusterOne=clusterList.get(j);      for (int k=(j + 1); k < clusterList.size(); k++) {        Cluster clusterTwo=clusterList.get(k);        double distance=getClusterDistance(clusterOne,clusterTwo,linkageType);        if (hasSimilarityMeasure()) {          if (distance < minDistance) {            minDistance=distance;            minClusterOne=j;            minClusterTwo=k;          }        } else {          if (distance > minDistance) {            minDistance=distance;            minClusterOne=j;            minClusterTwo=k;          }        }      }    }    Cluster clusterOne=clusterList.get(minClusterOne);    Cluster clusterTwo=clusterList.get(minClusterTwo);    clusterOne.mergeCluster(clusterTwo);    clusterList.remove(clusterTwo);  }  printClusterData();}  }
class C{  public AccessDeniedException(String message){  super(message);}  }
class C{  private void initializeWebView(){  mWebViewClient=new FacebookWebViewClient();  setWebViewClient(mWebViewClient);  mWebChromeClient=new FacebookWebChromeClient(mContext);  setWebChromeClient(mWebChromeClient);  mWebSettings=getSettings();  mInitialized=true;  setDefaults();}  }
class C{  public void loadNode(){  try {    cache.setNodeBulkLoadEnabled(true);  } catch (  UnsupportedOperationException ex) {    LOGGER.warn("setNodeBulkLoadEnabled() method threw an exception when " + "loading the cache (UnsupportedOperationException) - this is " + "normal behaviour in a single-server mode and can be ignored");  }  loadCache(cache.getKeys());  try {    cache.setNodeBulkLoadEnabled(false);  } catch (  UnsupportedOperationException ex) {    LOGGER.warn("setNodeBulkLoadEnabled() method threw an exception when " + "loading the cache (UnsupportedOperationException) - this is " + "normal behaviour in a single-server mode and can be ignored");  }}  }
class C{  public boolean isSubclass(SootClass child,SootClass parent){  child.checkLevel(SootClass.HIERARCHY);  parent.checkLevel(SootClass.HIERARCHY);  Interval parentInterval=classToInterval.get(parent);  Interval childInterval=classToInterval.get(child);  return parentInterval.isSubrange(childInterval);}  }
class C{  protected Collection<MethodDecl> potentiallyApplicable(List<PlaceholderMethodDecl> candidates){  Collection<MethodDecl> potentiallyApplicable=new LinkedList<MethodDecl>();  for (  GenericMethodDecl candidate : candidates) {    if (potentiallyApplicable(candidate)) {      MethodDecl decl=candidate.lookupParMethodDecl(typeArguments(candidate));      potentiallyApplicable.add(decl);    }  }  return potentiallyApplicable;}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  public String reportError(XMLLocator location,String domain,String key,Object[] arguments,short severity,Exception exception) throws XNIException {  MessageFormatter messageFormatter=getMessageFormatter(domain);  String message;  if (messageFormatter != null) {    message=messageFormatter.formatMessage(fLocale,key,arguments);  } else {    StringBuffer str=new StringBuffer();    str.append(domain);    str.append('#');    str.append(key);    int argCount=arguments != null ? arguments.length : 0;    if (argCount > 0) {      str.append('?');      for (int i=0; i < argCount; i++) {        str.append(arguments[i]);        if (i < argCount - 1) {          str.append('&');        }      }    }    message=str.toString();  }  XMLParseException parseException=(exception != null) ? new XMLParseException(location,message,exception) : new XMLParseException(location,message);  XMLErrorHandler errorHandler=fErrorHandler;  if (errorHandler == null) {    if (fDefaultErrorHandler == null) {      fDefaultErrorHandler=new DefaultErrorHandler();    }    errorHandler=fDefaultErrorHandler;  }switch (severity) {case SEVERITY_WARNING:{      errorHandler.warning(domain,key,parseException);      break;    }case SEVERITY_ERROR:{    errorHandler.error(domain,key,parseException);    break;  }case SEVERITY_FATAL_ERROR:{  errorHandler.fatalError(domain,key,parseException);  if (!fContinueAfterFatalError) {    throw parseException;  }  break;}}return message;}  }
class C{  public Response doDelete(String url,Object jsonBody){  String formJSON=getJsonString(jsonBody);  LOGGER.info(curlCallString("DELETE",url,formJSON));  long startTime=System.currentTimeMillis();  Response response;  if (formJSON != null) {    response=given().spec(this.requestSpec).body(formJSON).delete(url);  } else {    response=given().spec(this.requestSpec).delete(url);  }  long endTime=System.currentTimeMillis();  long duration=(endTime - startTime);  LOGGER.info("Duration for DELETE " + url + ": "+ duration);  return response;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void writeContentLength(long length) throws IOException {  writeHeader(HttpWriter.CONTENT_LENGTH,length);}  }
class C{  public static @Lightness int isDark(Palette palette){  Palette.Swatch mostPopulous=getMostPopulousSwatch(palette);  if (mostPopulous == null)   return LIGHTNESS_UNKNOWN;  return isDark(mostPopulous.getHsl()) ? IS_DARK : IS_LIGHT;}  }
class C{  @Override public Document createDocument(String namespaceURI,String qualifiedName,DocumentType doctype) throws DOMException {  if (doctype != null && doctype.getOwnerDocument() != null) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);  }  CoreDocumentImpl doc=createDocument(doctype);  if (qualifiedName != null || namespaceURI != null) {    Element e=doc.createElementNS(namespaceURI,qualifiedName);    doc.appendChild(e);  }  return doc;}  }
class C{  final DoubleEdgeList createTriangulation(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.decompose.nullArray"));  int size=points.length;  if (size < 4)   throw new IllegalArgumentException(Messages.getString("geometry.decompose.invalidSize"));  double winding=Geometry.getWinding(points);  if (winding < 0.0) {    Geometry.reverseWinding(points);  }  DoubleEdgeList dcel=new DoubleEdgeList(points);  EarClippingVertex root=null;  EarClippingVertex curr=null;  EarClippingVertex prev=null;  for (int i=0; i < size; i++) {    Vector2 p=points[i];    curr=new EarClippingVertex(p);    Vector2 p0=points[i == 0 ? size - 1 : i - 1];    Vector2 p1=points[i + 1 == size ? 0 : i + 1];    Vector2 v1=p.to(p0);    Vector2 v2=p.to(p1);    if (v2.isZero()) {      throw new IllegalArgumentException(Messages.getString("geometry.decompose.coincident"));    }    if (v1.cross(v2) >= 0.0) {      curr.reflex=true;    } else {      curr.reflex=false;    }    curr.prev=prev;    if (prev != null) {      prev.next=curr;    }    curr.index=i;    prev=curr;    if (root == null) {      root=curr;    }  }  root.prev=prev;  prev.next=root;  EarClippingVertex node=root;  for (int i=0; i < size; i++) {    node.ear=this.isEar(node,size);    node=node.next;  }  node=root;  int n=size;  for (; n > 3; ) {    if (node.ear) {      dcel.addHalfEdges(node.next.index,node.prev.index);      EarClippingVertex pNode=node.prev;      EarClippingVertex nNode=node.next;      pNode.next=node.next;      nNode.prev=node.prev;      if (pNode.reflex) {        pNode.reflex=this.isReflex(pNode);      }      if (nNode.reflex) {        nNode.reflex=this.isReflex(nNode);      }      if (!pNode.reflex) {        pNode.ear=this.isEar(pNode,n);      }      if (!nNode.reflex) {        nNode.ear=this.isEar(nNode,n);      }      n--;    }    node=node.next;  }  return dcel;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public int numberOfObjects(){  return table.getGrid().getRowCount() * table.getGrid().getColumnCount();}  }
class C{  private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  protected void animatePanelToState(PanelState state,StateChangeReason reason,long duration){  mAnimatingState=state;  mAnimatingStateReason=reason;  final float height=getPanelHeightFromState(state);  animatePanelTo(height,duration);}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  return;}  }
class C{  public static NIOConfiguration create(){  String bindHost=SystemInfo.singleton().network().getHostId();  String bindPort=System.getProperty("com.gs.transport_protocol.lrmi.bind-port","0");  int minThreads=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.min-threads","1"));  int maxThreads=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.max-threads","128"));  int maxConnPool=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.max-conn-pool","1024"));  int readSelectorThreads=Integer.parseInt(System.getProperty(SystemProperties.LRMI_READ_SELECTOR_THREADS,String.valueOf(SystemProperties.LRMI_READ_SELECTOR_THREADS_DEFAULT)));  String watchdogRequestTimeout=System.getProperty(SystemProperties.WATCHDOG_REQUEST_TIMEOUT,SystemProperties.WATCHDOG_REQUEST_TIMEOUT_DEFAULT);  String watchdogListeningTimeout=System.getProperty(SystemProperties.WATCHDOG_LISTENING_TIMEOUT,SystemProperties.WATCHDOG_LISTENING_TIMEOUT_DEFAULT);  String watchdogIdleConnectionTimeout=System.getProperty(SystemProperties.WATCHDOG_IDLE_CONNECTION_TIMEOUT,SystemProperties.WATCHDOG_IDLE_CONNECTION_TIMEOUT_DEFAULT);  long threadPoolIdleTimeout=Long.parseLong(System.getProperty("com.gs.transport_protocol.lrmi.threadpool.idle_timeout","300000"));  int threadPoolQueueSize=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.threadpool.queue-size",Integer.toString(Integer.MAX_VALUE)));  String socketConnectTimeout=System.getProperty(SystemProperties.LRMI_CONNECT_TIMEOUT,SystemProperties.LRMI_CONNECT_TIMEOUT_DEFAULT);  String slowConsumerEnabledKey="com.gs.transport_protocol.lrmi.slow-consumer.enabled";  boolean slowConsumerEnabled=Boolean.parseBoolean(System.getProperty(slowConsumerEnabledKey,String.valueOf(DEFAULT_SLOW_CONSUMER_ENABLED)));  String slowConsumerThroughputKey="com.gs.transport_protocol.lrmi.slow-consumer.throughput";  int slowConsumerThroughput=Integer.parseInt(System.getProperty(slowConsumerThroughputKey,slowConsumerEnabled ? String.valueOf(DEFAULT_SLOW_CONSUMER_TP) : "0"));  if (slowConsumerEnabled && slowConsumerThroughput == 0)   throw new IllegalArgumentException("Contradicting slow consumer configuration: slow consumer is enabled (" + slowConsumerEnabledKey + ") but slow consumer throughput ("+ slowConsumerThroughputKey+ ") is explicitly set to 0");  if (!slowConsumerEnabled && slowConsumerThroughput > 0)   throw new IllegalArgumentException("Contradicting slow consumer configuration: slow consumer is disabled (" + slowConsumerEnabledKey + ") but slow consumer throughput ("+ slowConsumerThroughputKey+ ") is explicitly set to "+ slowConsumerThroughput+ ", this property should not be set when slow consumer is disabled");  int slowConsumerRetries=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.slow-consumer.retries",String.valueOf(DEFAULT_SLOW_CONSUMER_RETRIES)));  int slowConsumerLatency=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.slow-consumer.latency",String.valueOf(DEFAULT_SLOW_CONSUMER_LATENCY)));  int slowConsumerReadTimeout=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.slow-consumer.read-timeout",String.valueOf(DEFAULT_SLOW_CONSUMER_READ_TIMEOUT)));  int systemPriorityQueueCapacity=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.queue-size",String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_QUEUE_CAPACITY_DEFAULT)));  long systemPriorityThreadPoolIdleTimeout=Long.parseLong(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.idle_timeout",String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_THREAD_IDLE_TIMEOUT)));  int systemPriorityMinThreads=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.min-threads",String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_MIN_THREADS_DEFAULT)));  int systemPriorityMaxThreads=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.system-priority.threadpool.max-threads",String.valueOf(SystemProperties.LRMI_SYSTEM_PRIORITY_MAX_THREADS_DEFAULT)));  ;  int customQueueCapacity=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.custom.threadpool.queue-size",String.valueOf(SystemProperties.LRMI_CUSTOM_QUEUE_CAPACITY_DEFAULT)));  long customThreadPoolIdleTimeout=Long.parseLong(System.getProperty("com.gs.transport_protocol.lrmi.custom.threadpool.idle_timeout",String.valueOf(SystemProperties.LRMI_CUSTOM_THREAD_IDLE_TIMEOUT)));  int customMinThreads=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.custom.threadpool.min-threads",String.valueOf(SystemProperties.LRMI_CUSTOM_MIN_THREADS_DEFAULT)));  int customMaxThreads=Integer.parseInt(System.getProperty("com.gs.transport_protocol.lrmi.custom.threadpool.max-threads",String.valueOf(SystemProperties.LRMI_CUSTOM_MAX_THREADS_DEFAULT)));  boolean protocolValidationEnabled=!Boolean.getBoolean(SystemProperties.LRMI_PROTOCOL_VALIDATION_DISABLED);  NIOConfiguration nioConfiguration=new NIOConfiguration(minThreads,maxThreads,maxConnPool,bindHost,bindPort,threadPoolQueueSize,slowConsumerThroughput,slowConsumerLatency,slowConsumerRetries,slowConsumerReadTimeout,readSelectorThreads,watchdogRequestTimeout,watchdogListeningTimeout,watchdogIdleConnectionTimeout,threadPoolIdleTimeout,socketConnectTimeout,systemPriorityQueueCapacity,systemPriorityThreadPoolIdleTimeout,systemPriorityMinThreads,systemPriorityMaxThreads,customQueueCapacity,customThreadPoolIdleTimeout,customMinThreads,customMaxThreads,protocolValidationEnabled);  if (logger.isLoggable(Level.CONFIG)) {    logger.config(String.valueOf(nioConfiguration));  }  return nioConfiguration;}  }
class C{  public void addNamespace(AXmlNamespace ns){  if (ns.getUri() == null || ns.getUri().isEmpty())   return;  if (this.namespaces == null)   this.namespaces=new HashMap<String,AXmlNamespace>();  this.namespaces.put(ns.getPrefix(),ns);}  }
class C{  public static Map<String,Object> prodGetFeatures(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String productId=(String)context.get("productId");  String distinct=(String)context.get("distinct");  String type=(String)context.get("type");  Locale locale=(Locale)context.get("locale");  String errMsg=null;  List<GenericValue> features=null;  try {    Map<String,String> fields=UtilMisc.toMap("productId",productId);    if (distinct != null)     fields.put("productFeatureTypeId",distinct);    if (type != null)     fields.put("productFeatureApplTypeId",type);    features=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where(fields).orderBy("sequenceNum","productFeatureTypeId").cache(true).queryList();    result.put("productFeatures",features);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_feature_entity",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);  }  return result;}  }
class C{  public void closeAllFiles(){  for (  InputReader r : fileId2raf) {    try {      if (r != null)       r.close();    } catch (    Exception ex) {    }  }}  }
class C{  private boolean storeNewAnnouncement(int legionId,Timestamp currentTime,String message){  return DAOManager.getDAO(LegionDAO.class).saveNewAnnouncement(legionId,currentTime,message);}  }
class C{  public static DataStoreClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new DataStoreClientFactory(clusterName,client);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200440,skilltarget,skillname);}  }
class C{  public Circle(final Vector3D pole,final double tolerance){  reset(pole);  this.tolerance=tolerance;}  }
class C{  private static String validateInputFiles(ImmutableList<String> savedFilePaths) throws SwaggerConversionException {  JsonNode data=null;  String validSwaggerFilePath=null;  for (  String filePath : savedFilePaths) {    try {      File inputFile=new File(filePath);      String inputFileContent=FileUtils.readFileToString(inputFile,"UTF-8");      ObjectMapper objMapper=null;      String fileExtension=Files.getFileExtension(filePath);      if (fileExtension.equalsIgnoreCase("json")) {        objMapper=Json.mapper();      } else       if (fileExtension.equalsIgnoreCase("yaml")) {        objMapper=Yaml.mapper();      } else {        throw new IllegalArgumentException(String.format("Swagger spec files '%s' have invalid extension '%s'. Only files with 'json' and " + "'yaml' file extensions are allowed.",inputFile.getName(),fileExtension));      }      data=objMapper.readTree(inputFileContent);    } catch (    Exception e) {      throw new SwaggerConversionException("Unable to parse the content. " + e.getMessage(),e);    }    if (data.get("swagger") != null && data.get("swagger").toString().contains("2.0")) {      if (validSwaggerFilePath != null) {        throw new SwaggerConversionException("Multiple swagger files were passed as input. " + "Only one top-level swagger file is allowed which can reference schemas from other " + "files passed as input.");      }      validateSwaggerSpec(data);      validSwaggerFilePath=filePath;    }  }  if (Strings.isNullOrEmpty(validSwaggerFilePath)) {    throw new SwaggerConversionException("Cannot find a valid swagger 2.0 spec in the input files");  } else {    return validSwaggerFilePath;  }}  }
class C{  public static <E>RingBuffer<E> createSingleProducer(EventFactory<E> factory,int bufferSize,WaitStrategy waitStrategy){  SingleProducerSequencer sequencer=new SingleProducerSequencer(bufferSize,waitStrategy);  return new RingBuffer<E>(factory,sequencer);}  }
class C{  public String diff_text1(List<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  public Builder cacheExpirationInterval(long cacheExpirationInterval,TimeUnit timeUnit){  this.cacheExpirationIntervalMs=TimeUnit.MILLISECONDS.convert(cacheExpirationInterval,timeUnit);  return this;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  @Override public synchronized void mark(int readlimit){  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  mark=position;  this.readlimit=readlimit;}  }
class C{  public PollsAddVoteQuery isBoard(Boolean value){  return unsafeParam("is_board",value);}  }
class C{  public PSVIDocumentImpl(){  super();}  }
class C{  public BoardGetCommentsQueryWithExtended startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public boolean isManagedBy(UserGroup userGroup){  return userGroup != null && CollectionUtils.containsAny(groups,userGroup.getManagedGroups());}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  static String valueToString(Object value,int indentFactor,int indent) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  try {    if (value instanceof JSONString) {      Object o=((JSONString)value).toJSONString();      if (o instanceof String) {        return (String)o;      }    }  } catch (  Exception ignore) {  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean) {    return value.toString();  }  if (value instanceof JSONObject) {    return ((JSONObject)value).toString(indentFactor,indent);  }  if (value instanceof JSONArray) {    return ((JSONArray)value).toString(indentFactor,indent);  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString(indentFactor,indent);  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString(indentFactor,indent);  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString(indentFactor,indent);  }  return quote(value.toString());}  }
class C{  public Lexicon(){  root=new Node('_');}  }
class C{  protected GroupsBanUserQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void init$Children(){}  }
class C{  public static synchronized ExampleLineInterface createExampleLine(Object object){  if (exampleLineImpl == null) {    exampleLineImpl=new ExampleLineImpl();  }  return exampleLineImpl;}  }
class C{  public GradleDslMethodCall(@NotNull GradleDslElement parent,@NotNull String methodName,@NotNull String statementName){  super(parent,null,methodName,null);  myStatementName=statementName;}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  NotImpl filter=null;  if ((filterList == null) || filterList.isEmpty()) {    filter=new NotExtended();  } else {    filter=new NotExtended(filterList.get(0));  }  return filter;}  }
class C{  @Override public double value(double z){  return evaluateInternal(x,y,z);}  }
class C{  public static int count(Iterator tuples,String field){  int i=0;  for (; tuples.hasNext(); ++i, tuples.next())   ;  return i;}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  private void removeHelpersSpawn(){  for (  Integer object : spawnedNpc) {    VisibleObject npc=World.getInstance().findVisibleObject(object);    if (npc != null && npc.isSpawned()) {      npc.getController().onDelete();    }  }  spawnedNpc.clear();}  }
class C{  @Override public void wktValueUpdated(){  setCachedExpression(generateExpression());  checkSymbolIsValid();  FieldConfigBase parent=getParent();  if (parent != null) {    parent.valueUpdated();  }}  }
class C{  public View(String typeName,String sqlExpression,QueryResultType queryResultType){  super(typeName,sqlExpression,queryResultType);}  }
class C{  @NotNull public static Configuration copyCompatible(@NotNull Configuration source,@NotNull Configuration destination){  assert !Comparing.equal(source.myFile,destination.myFile);  FolderConfiguration editedConfig=destination.getEditedConfig();  if (editedConfig.getVersionQualifier() == null) {    destination.myTarget=source.myTarget;  }  if (editedConfig.getScreenSizeQualifier() == null) {    destination.mySpecificDevice=source.mySpecificDevice;  }  if (editedConfig.getScreenOrientationQualifier() == null && editedConfig.getSmallestScreenWidthQualifier() == null) {    destination.myStateName=source.myStateName;    destination.myState=source.myState;  }  if (editedConfig.getLocaleQualifier() == null) {    destination.myLocale=source.myLocale;  }  if (editedConfig.getUiModeQualifier() == null) {    destination.myUiMode=source.getUiMode();  }  if (editedConfig.getNightModeQualifier() == null) {    destination.myNightMode=source.getNightMode();  }  destination.myActivity=source.getActivity();  destination.myTheme=source.getTheme();  LocalResourceRepository resources=AppResourceRepository.getAppResources(source.myManager.getModule(),true);  ConfigurationMatcher matcher=new ConfigurationMatcher(destination,resources,destination.myFile);  matcher.adaptConfigSelection(true);  return destination;}  }
class C{  ReggieStat(int type,long t,ServiceRegistrar reggie,String[] groups) throws RemoteException {  if (type < DISCOVERED || type > DISCARDED)   throw new IllegalArgumentException("bad type");  if (reggie == null)   throw new NullPointerException("reggie is null");  this.type=type;  eventTime=t;  this.groups=groups;  LookupLocator locator=reggie.getLocator();  machine=locator.getHost();  port=locator.getPort();  serviceID=reggie.getServiceID();}  }
class C{  protected GenomicCoords genomicCoordsAllChromMatchInGenome(String query,GenomicCoords currentGc) throws IOException, InvalidGenomicCoordsException {  List<IntervalFeature> matchedFeatures=findAllChromMatchInGenome(query,currentGc);  if (matchedFeatures.size() == 0) {    return currentGc;  }  String chrom=matchedFeatures.get(0).getChrom();  int startFrom=matchedFeatures.get(0).getFrom();  int endTo=matchedFeatures.get(matchedFeatures.size() - 1).getTo();  GenomicCoords allMatchesGc=new GenomicCoords(chrom,startFrom,endTo,currentGc.getSamSeqDict(),currentGc.getUserWindowSize(),currentGc.getFastaFile());  return allMatchesGc;}  }
class C{  public void addHostAndIncludeSystemHost(String hostIdentifier){  query.append(" +(conhost:SYSTEM_HOST conhost:" + hostIdentifier + ")");}  }
class C{  protected Map<String,Object> generateSlice(String sliceName,PhysicalTableDictionary tableDictionary,UriInfo uriInfo) throws BadApiRequestException {  if (tableDictionary.isEmpty()) {    String msg=EMPTY_DICTIONARY.logFormat("Slices cannot be found. Physical Table");    LOG.error(msg);    throw new BadApiRequestException(msg);  }  PhysicalTable table=tableDictionary.get(sliceName);  if (table == null) {    String msg=SLICE_UNDEFINED.logFormat(sliceName);    LOG.error(msg);    throw new BadApiRequestException(msg);  }  Map<Column,Set<Interval>> columnCache=table.getAvailableIntervals();  Set<Map<String,Object>> dimensionsResult=new LinkedHashSet<>();  Set<Map<String,Object>> metricsResult=new LinkedHashSet<>();  columnCache.entrySet().stream().forEach(null);  Map<String,Object> generated=new LinkedHashMap<>();  generated.put("name",sliceName);  generated.put("timeGrain",table.getTimeGrain().getName());  generated.put("timeZone",table.getTimeGrain().getTimeZoneName());  generated.put("dimensions",dimensionsResult);  generated.put("metrics",metricsResult);  LOG.trace("Generated slice: {}",generated);  return generated;}  }
class C{  @PostConstruct public void initProcess(){  this.startUp=System.currentTimeMillis();  try {    log.trace("initProcess - Process Connection called.");    this.loadProcessConnection();    log.trace("initProcess - Process Configuration called.");    this.loadProcessConfiguration();  } catch (  Exception ex) {    throw new RuntimeException("Exception caught during DAQ startup",ex);  }}  }
class C{  public void start(int thread_priority){  start(false,thread_priority);}  }
class C{  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public static boolean loadTinkerJars(Application application,boolean tinkerLoadVerifyFlag,String directory,Intent intentResult){  if (dexList.isEmpty()) {    Log.w(TAG,"there is no dex to load");    return true;  }  PathClassLoader classLoader=(PathClassLoader)TinkerDexLoader.class.getClassLoader();  if (classLoader != null) {    Log.i(TAG,"classloader: " + classLoader.toString());  } else {    Log.e(TAG,"classloader is null");    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_CLASSLOADER_NULL);    return false;  }  String dexPath=directory + "/" + DEX_PATH+ "/";  File optimizeDir=new File(directory + "/" + DEX_OPTIMIZE_PATH);  ArrayList<File> legalFiles=new ArrayList<>();  final boolean isArtPlatForm=ShareTinkerInternals.isVmArt();  for (  ShareDexDiffPatchInfo info : dexList) {    if (isJustArtSupportDex(info)) {      continue;    }    String path=dexPath + info.realName;    File file=new File(path);    if (tinkerLoadVerifyFlag) {      long start=System.currentTimeMillis();      String checkMd5=isArtPlatForm ? info.destMd5InArt : info.destMd5InDvm;      if (!SharePatchFileUtil.verifyDexFileMd5(file,checkMd5)) {        ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);        intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,file.getAbsolutePath());        return false;      }      Log.i(TAG,"verify dex file:" + file.getPath() + " md5, use time: "+ (System.currentTimeMillis() - start));    }    legalFiles.add(file);  }  try {    SystemClassLoaderAdder.installDexes(application,classLoader,optimizeDir,legalFiles);  } catch (  Throwable e) {    Log.e(TAG,"install dexes failed");    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_LOAD_EXCEPTION);    return false;  }  Log.i(TAG,"after loaded classloader: " + application.getClassLoader().toString());  return true;}  }
class C{  public AirMapStatusAdvisory(JSONObject advisoryJson){  constructFromJson(advisoryJson);}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getSecondOfPairFlag()) {      return false;    }  } else {    if (!record.getSecondOfPairFlag()) {      return false;    }  }  return true;}  }
class C{  public TapTarget id(int id){  this.id=id;  return this;}  }
class C{  public DOMStringListImpl(Vector params){  fStrings=new ArrayList(params);}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  private void addTask(Runnable r){  Thread tEval=new Thread(r);  tCur=tEval;  tEval.start();}  }
class C{  public ASBTalisman(){  skillTrees=new SkillTree[2];  skillPoints=new int[2];}  }
class C{  public static void textLeft(double x,double y,String text){  if (text == null)   throw new NullPointerException();  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int hs=metrics.getDescent();  offscreen.drawString(text,(float)xs,(float)(ys + hs));  draw();}  }
class C{  Pattern buildBefore(Map<String,Pattern> regexesByInterpolationName,boolean repeatedGroups) throws EvalException {  StringBuilder fullPattern=new StringBuilder();  int groupCount=1;  for (  Token token : tokens) {switch (token.type) {case INTERPOLATION:      Pattern subPattern=regexesByInterpolationName.get(token.value);    if (subPattern == null) {      throw new EvalException(location,"Interpolation is used but not defined: " + token.value);    }  fullPattern.append(String.format("(%s)",subPattern.pattern()));if (groupIndexes.get(token.value).size() > 0 && !repeatedGroups) {  throw new EvalException(location,"Regex group is used in template multiple times: " + token.value);}groupIndexes.put(token.value,groupCount);groupCount+=subPattern.groupCount() + 1;break;case LITERAL:fullPattern.append(Pattern.quote(token.value));break;default :throw new IllegalStateException(token.type.toString());}}return Pattern.compile(fullPattern.toString(),Pattern.MULTILINE);}  }
class C{  private void indexSplitDoc(){  try {    _indexSplitDoc();  }  finally {    semaphore.release();    indexState.globalState.indexingJobsRunning.release();    ctx.inFlightChunks.arrive();  }}  }
class C{  public static String collectionToDelimitedString(Collection<String> coll,String delim){  return collectionToDelimitedString(coll,delim,"","");}  }
class C{  public static boolean isOrSubOf(Object obj,Class<?> parentClass){  Class<?> objectClass=obj.getClass();  return isOrSubOf(objectClass,parentClass);}  }
class C{  @Override public void populateField(Boolean value){  if ((value != null) && (this.checkBox != null)) {    checkBox.setSelected(value);    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;  }}  }
class C{  @SuppressWarnings("rawtypes") public Parameter newParameter(Object name,Class type){  return new ParameterNode(type);}  }
class C{  public String addProductPromoCode(String productPromoCodeId,LocalDispatcher dispatcher){  if (this.productPromoCodes.contains(productPromoCodeId)) {    return UtilProperties.getMessage(resource_error,"productpromoworker.promotion_code_already_been_entered",UtilMisc.toMap("productPromoCodeId",productPromoCodeId),locale);  }  if (!this.getDoPromotions()) {    this.productPromoCodes.add(productPromoCodeId);    return null;  }  String checkResult=ProductPromoWorker.checkCanUsePromoCode(productPromoCodeId,this.getPartyId(),this.getDelegator(),this,locale);  if (checkResult == null) {    this.productPromoCodes.add(productPromoCodeId);    ProductPromoWorker.doPromotions(this,dispatcher);    return null;  } else {    return checkResult;  }}  }
class C{  protected ExecutionEntity findFirstParentScopeExecution(ExecutionEntity executionEntity){  ExecutionEntityManager executionEntityManager=commandContext.getExecutionEntityManager();  ExecutionEntity parentScopeExecution=null;  ExecutionEntity currentlyExaminedExecution=executionEntityManager.findById(executionEntity.getParentId());  while (currentlyExaminedExecution != null && parentScopeExecution == null) {    if (currentlyExaminedExecution.isScope()) {      parentScopeExecution=currentlyExaminedExecution;    } else {      currentlyExaminedExecution=executionEntityManager.findById(currentlyExaminedExecution.getParentId());    }  }  return parentScopeExecution;}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  private boolean isInitialOrFinalSilence(double time,Labels labels,String silenceSymbol){  int i=labels.getLabelIndexAtTime(time);  if (i == -1) {    if (time < 0) {      i=0;    } else {      i=labels.items.length - 1;    }  }  assert i >= 0;  Label l=labels.items[i];  return (i == 0 || i == labels.items.length - 1) && l.phn.equals(silenceSymbol);}  }
class C{  private void buildSubMenu(SysMenu fatherMenu,List<Module> modules){  fatherMenu.setSubMenus(new ArrayList<SysMenu>());  for (  Module module : modules) {    if (module.getParent() != null && fatherMenu.getId() == module.getParent().longValue())     fatherMenu.getSubMenus().add(buildMenuFromModule(module));  }}  }
class C{  public boolean hasProperty(String name){  return config.hasPath(name);}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.enabled) {    VRSettings vr=Minecraft.getMinecraft().vrSettings;    IStereoProvider stereoProvider=Minecraft.getMinecraft().stereoProvider;    if (par1GuiButton.id < 200 && par1GuiButton instanceof GuiSmallButtonEx) {      VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);      if (num == VRSettings.VrOptions.PLAY_MODE_SEATED) {        this.reinit=true;        if (mc.vrSettings.seated == false) {          this.isConfirm=true;          return;        }      } else       if (num == VRSettings.VrOptions.RESET_ORIGIN) {        MCOpenVR.resetPosition();        Minecraft.getMinecraft().vrSettings.saveOptions();        this.mc.displayGuiScreen(null);        this.mc.setIngameFocus();      }      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));    } else     if (par1GuiButton.id == 201) {      Minecraft.getMinecraft().vrSettings.saveOptions();    } else     if (par1GuiButton.id == 202) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiHUDSettings(this,this.guivrSettings));    } else     if (par1GuiButton.id == 206) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiRenderOpticsSettings(this,this.guivrSettings,this.settings));    } else     if (par1GuiButton.id == 207) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiQuickCommandEditor(this,this.guivrSettings));    } else     if (par1GuiButton.id == ID_GENERIC_DONE) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == 209) {      this.guivrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiLocomotionSettings(this,this.guivrSettings));    } else     if (par1GuiButton.id == 210) {      this.guivrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiOtherHUDSettings(this,this.guivrSettings));    } else     if (par1GuiButton.id == 211) {      this.guivrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiSeatedOptions(this,this.guivrSettings));    } else     if (par1GuiButton.id == 220) {      this.guivrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiVRControls(this,this.guivrSettings));    } else     if (par1GuiButton.id == 222) {      mc.vrSettings.seated=false;      this.guivrSettings.saveOptions();      this.isConfirm=false;      this.reinit=true;    } else     if (par1GuiButton.id == 223) {      mc.vrSettings.seated=true;      this.guivrSettings.saveOptions();      this.isConfirm=false;      this.reinit=true;    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      mc.vrSettings.vrReverseHands=false;      mc.vrSettings.vrWorldRotation=0;      mc.vrSettings.vrWorldScale=1;      mc.vrSettings.vrWorldRotationIncrement=45f;      mc.vrSettings.seated=false;      MCOpenVR.clearOffset();      this.guivrSettings.saveOptions();      this.reinit=true;    } else     if (par1GuiButton.id == PROFILES_ID) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(new GuiSelectSettingsProfile(this,this.guivrSettings));    }  }}  }
class C{  public ResourcesPoet addId(String id){  Element bool=document.createElement("item");  bool.setAttribute("name",id);  bool.setAttribute("type","id");  resourceElement.appendChild(bool);  return this;}  }
class C{  public static String[][] invert(final String[][] array){  final String[][] newarray=new String[array.length][2];  for (int i=0; i < array.length; i++) {    newarray[i][0]=array[i][1];    newarray[i][1]=array[i][0];  }  return newarray;}  }
class C{  @Override public List<Integer> readSortIndex() throws IOException {  if (null == columnSortInfo) {    readColumnSortInfo();  }  return columnSortInfo.getSort_index();}  }
class C{  public void checkInput(OrthoCamera cam){  if (Gdx.input.isTouched()) {    int button=getButtonPressed();    Vector2 pos=cam.unprojectCoordinates(Gdx.input.getX(),Gdx.input.getY());    for (    InputListener l : listeners)     if (l.onMousePressed(cam,pos.x,pos.y,button))     break;  }}  }
class C{  private Map<Integer,Integer[]>[] sortBySample(int numberOfSamples,Map<Integer,Integer[]> taxonMap){  Map<Integer,Integer[]>[] sample2TaxonMap=new HashMap[numberOfSamples];  for (int i=0; i < numberOfSamples; i++) {    sample2TaxonMap[i]=new HashMap<>();  }  for (  Integer taxId : taxonMap.keySet()) {    Integer[] counts=taxonMap.get(taxId);    for (int i=0; i < numberOfSamples; i++) {      sample2TaxonMap[i].put(taxId,new Integer[]{counts[i]});    }  }  return sample2TaxonMap;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private boolean doUpdate(final SourceDataTag currentSourceDataTag,final ValueUpdate update){  if (!checkValidation(currentSourceDataTag,update)) {    return false;  }  if (isKnownClass(currentSourceDataTag.getDataType())) {    Object newValueCasted=cast(update.getValue(),currentSourceDataTag.getDataType());    if (newValueCasted != null) {      update.setValue(newValueCasted);    }  }  if (!checkFiltering(currentSourceDataTag,update)) {    return false;  }  if (!checkTimeDeadband(currentSourceDataTag,update)) {    return false;  }  SourceDataTagValue tagValue=currentSourceDataTag.update(update);  this.processMessageSender.addValue(tagValue);  this.dynamicTimeDeadbandFilterer.recordTag(currentSourceDataTag);  return true;}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {  fInCDATASection=true;  if (!fDeferNodeExpansion) {    if (fFilterReject) {      return;    }    if (fCreateCDATANodes) {      setCharacterData(false);    }  }}  }
class C{  public boolean hasFusionStones(){  return fusionStones != null && fusionStones.size() > 0;}  }
class C{  private static String[] appendEnabled(final String[] options){  for (  final String option : options) {    if (option.equals("enabled")) {      return options;    }  }  String[] result=new String[options.length + 1];  result[0]="enabled";  System.arraycopy(options,0,result,1,options.length);  return result;}  }
class C{  public static long nextId(){synchronized (lock) {    if (lastCount == Short.MAX_VALUE) {      boolean done=false;      while (!done) {        long now=System.nanoTime();        if (now < lastTime + ONE_SECOND) {          try {            Thread.sleep(ONE_SECOND);          } catch (          java.lang.InterruptedException e) {          }          continue;        } else {          lastTime=now;          lastCount=Short.MIN_VALUE;          done=true;        }      }    }    time=lastTime;    count=lastCount++;  }  return time + count;}  }
class C{  public int toggle(){  return toggle(ANIMATION_DURATION_MS);}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  @Override public void onConnectionClosed(){  super.onConnectionClosed();}  }
class C{  @NotNull public static BufferedImage pad(@NotNull BufferedImage image,int paddingPercent){  if (image.getWidth() <= 1 || image.getHeight() <= 1) {    return image;  }  if (paddingPercent > 100) {    paddingPercent=100;  }  int largerSide=Math.max(image.getWidth(),image.getHeight());  int smallerSide=Math.min(image.getWidth(),image.getHeight());  int padding=(largerSide * paddingPercent / 100);  padding=Math.max(-(smallerSide / 2 - 1),padding);  return AssetUtil.paddedImage(image,padding);}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {  try {    if (fDTDHandler != null) {      String publicId=identifier.getPublicId();      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();      fDTDHandler.unparsedEntityDecl(name,publicId,systemId,notation);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  PorterDuffColorFilter createTintFilter(ColorStateList tint,Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  return new PorterDuffColorFilter(color,tintMode);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  List<String> fullCommand=new ArrayList<>();  fullCommand.add(command);  fullCommand.addAll(switches);  fullCommand.addAll(arguments);  sb.append(String.join(" ",fullCommand));  return sb.toString();}  }
class C{  public static void reload(){  try {    Properties myProps=null;    try {      log.info("Loading: mygs.properties");      myProps=PropertiesUtils.load("./config/mygs.properties");    } catch (    Exception e) {      log.info("No override properties found");    }    String administration="./config/administration";    Properties[] adminProps=PropertiesUtils.loadAllFromDirectory(administration);    PropertiesUtils.overrideProperties(adminProps,myProps);    ConfigurableProcessor.process(AdminConfig.class,adminProps);    log.info("Reload: " + administration + "/admin.properties");    ConfigurableProcessor.process(DeveloperConfig.class,adminProps);    log.info("Reload: " + administration + "/developer.properties");    String main="./config/main";    Properties[] mainProps=PropertiesUtils.loadAllFromDirectory(main);    PropertiesUtils.overrideProperties(mainProps,myProps);    ConfigurableProcessor.process(AgentFightConfig.class,mainProps);    log.info("Reload: " + main + "/agentfight.properties");    ConfigurableProcessor.process(AIConfig.class,mainProps);    log.info("Reload: " + main + "/ai.properties");    ConfigurableProcessor.process(AutoGroupConfig.class,mainProps);    log.info("Reload: " + main + "/autogroup.properties");    ConfigurableProcessor.process(BaseConfig.class,mainProps);    log.info("Reload: " + main + "/base.properties");    ConfigurableProcessor.process(BeritraConfig.class,mainProps);    log.info("Reload: " + main + "/beritra.properties");    ConfigurableProcessor.process(CompositionConfig.class,mainProps);    log.info("Reload: " + main + "/composition.properties");    ConfigurableProcessor.process(ConquerorProtectorConfig.class,mainProps);    log.info("Reload: " + main + "/conqueror.properties");    ConfigurableProcessor.process(DualBoxConfig.class,mainProps);    log.info("Reload: " + main + "/DualBoxConfig.properties");    ConfigurableProcessor.process(CommonsConfig.class,mainProps);    log.info("Reload: " + main + "/commons.properties");    ConfigurableProcessor.process(CacheConfig.class,mainProps);    log.info("Reload: " + main + "/cache.properties");    ConfigurableProcessor.process(CompositionConfig.class,mainProps);    log.info("Reload: " + main + "/composition.properties");    ConfigurableProcessor.process(CraftConfig.class,mainProps);    log.info("Reload: " + main + "/craft.properties");    ConfigurableProcessor.process(CustomConfig.class,mainProps);    log.info("Reload: " + main + "/custom.properties");    ConfigurableProcessor.process(DropConfig.class,mainProps);    log.info("Reload: " + main + "/drop.properties");    ConfigurableProcessor.process(EnchantsConfig.class,mainProps);    log.info("Reload: " + main + "/enchants.properties");    ConfigurableProcessor.process(EventsConfig.class,mainProps);    log.info("Reload: " + main + "/events.properties");    ConfigurableProcessor.process(FallDamageConfig.class,mainProps);    log.info("Reload: " + main + "/falldamage.properties");    ConfigurableProcessor.process(FastTrackConfig.class,mainProps);    log.info("Reload: " + main + "/fasttrack.properties");    ConfigurableProcessor.process(GSConfig.class,mainProps);    log.info("Reload: " + main + "/gameserver.properties");    ConfigurableProcessor.process(GeoDataConfig.class,mainProps);    log.info("Reload: " + main + "/geodata.properties");    ConfigurableProcessor.process(GroupConfig.class,mainProps);    log.info("Reload: " + main + "/group.properties");    ConfigurableProcessor.process(HousingConfig.class,mainProps);    log.info("Reload: " + main + "/housing.properties");    ConfigurableProcessor.process(HTMLConfig.class,mainProps);    log.info("Reload: " + main + "/html.properties");    ConfigurableProcessor.process(InGameShopConfig.class,mainProps);    log.info("Reload: " + main + "/ingameshop.properties");    ConfigurableProcessor.process(LegionConfig.class,mainProps);    log.info("Reload: " + main + "/legion.properties");    ConfigurableProcessor.process(LoggingConfig.class,mainProps);    log.info("Reload: " + main + "/logging.properties");    ConfigurableProcessor.process(MembershipConfig.class,mainProps);    log.info("Reload: " + main + "/membership.properties");    ConfigurableProcessor.process(MoltenusConfig.class,mainProps);    log.info("Reload: " + main + "/moltenus.properties");    ConfigurableProcessor.process(NameConfig.class,mainProps);    log.info("Reload: " + main + "/name.properties");    ConfigurableProcessor.process(PeriodicSaveConfig.class,mainProps);    log.info("Reload: " + main + "/periodicsave.properties");    ConfigurableProcessor.process(PlayerTransferConfig.class,mainProps);    log.info("Reload: " + main + "/playertransfer.properties");    ConfigurableProcessor.process(PricesConfig.class,mainProps);    log.info("Reload: " + main + "/prices.properties");    ConfigurableProcessor.process(PunishmentConfig.class,mainProps);    log.info("Reload: " + main + "/punishment.properties");    ConfigurableProcessor.process(RankingConfig.class,mainProps);    log.info("Reload: " + main + "/ranking.properties");    ConfigurableProcessor.process(RateConfig.class,mainProps);    log.info("Reload: " + main + "/rates.properties");    ConfigurableProcessor.process(SecurityConfig.class,mainProps);    log.info("Reload: " + main + "/security.properties");    ConfigurableProcessor.process(ShutdownConfig.class,mainProps);    log.info("Reload: " + main + "/shutdown.properties");    ConfigurableProcessor.process(SiegeConfig.class,mainProps);    log.info("Reload: " + main + "/siege.properties");    ConfigurableProcessor.process(ThreadConfig.class,mainProps);    log.info("Reload: " + main + "/thread.properties");    ConfigurableProcessor.process(WeddingsConfig.class,mainProps);    log.info("Reload: " + main + "/weddings.properties");    ConfigurableProcessor.process(WorldConfig.class,mainProps);    log.info("Reload: " + main + "/world.properties");  } catch (  Exception e) {    log.error("Can't reload configuration: ",e);    throw new Error("Can't reload configuration: ",e);  }}  }
class C{  public DistributedLogClientBuilder streamFailfast(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setStreamFailfast(enabled);  return newBuilder;}  }
class C{  public static Patterns packages(String[] includes,String[] excludes){  return new Patterns(includes,excludes);}  }
class C{  public boolean showDialog(){  dataModel.populate();  setVisible(true);  return okButtonPressed;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoReduceSpellATK_Instant_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201277,num0,skillcaster,skillname);}  }
class C{  public void addLocation(PBLocation location){  l_locations.add(location);}  }
class C{  protected boolean resetOccurred(){  return resetOccurred;}  }
class C{  public char charAt(int pos){  if (pos < getLeadingGaps() || pos >= getLength() - getTrailingGaps())   return 0; else   if (alignment == null || !alignment.isTranslate())   return block.charAt(pos - getLeadingGaps()); else {    int which=pos - getLeadingGaps();    if ((which % 3) == 0) {      if (which + 2 < block.length()) {        return (char)SequenceUtils.getAminoAcid(block.charAt(which),block.charAt(which + 1),block.charAt(which + 2));      } else       return block.charAt(which);    } else     return ' ';  }}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  private static StringBuilder dump(StringBuilder _cbuffer,byte value){  for (int j=0; j < 2; j++) {    _cbuffer.append(_hexcodes[value >> _shifts[j + 6] & 15]);  }  return _cbuffer;}  }
class C{  public static double dpsForMove(final Pokemon p,final boolean primary){  final PokemonMove move=primary ? p.getMove1() : p.getMove2();  return dpsForMove(p.getPokemonId(),move,primary);}  }
class C{  public void recordOpenedBookmarks(){  setFirstAction(OPENED_BOOKMARKS);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200365,skillname);}  }
class C{  @SuppressWarnings("unchecked") public final E next(){  lastElement=(E)numberToObj[cur++];  return lastElement;}  }
class C{  static URL fixPureQueryTargets(URL base,String target) throws MalformedURLException {  if (!target.startsWith("?"))   return new URL(base,target);  String basePath=base.getPath();  String baseRightMost="";  int baseRightMostIdx=basePath.lastIndexOf("/");  if (baseRightMostIdx != -1) {    baseRightMost=basePath.substring(baseRightMostIdx + 1);  }  if (target.startsWith("?"))   target=baseRightMost + target;  return new URL(base,target);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_CHANGE_OPPOSITE_ITEM_SKIN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400282,value0,value1);}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  mItemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=mItemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * mItemsPadding;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * mItemsPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  @Override public boolean isApplicable(){  return true;}  }
class C{  public final TestSubscriber<T> assertFuseableSource(){  if (qs == null) {    throw new AssertionError("Upstream was not Fuseable");  }  return this;}  }
class C{  public JsonParser(JsonFeeder feeder){  stack=new byte[16];  top=-1;  state=GO;  push(MODE_DONE);  this.feeder=feeder;}  }
class C{  @Override public void startPrefixMapping(String prefix,String uri) throws SAXException {  return;}  }
class C{  public void addInterface(SootClass interfaceClass){  checkLevel(HIERARCHY);  if (implementsInterface(interfaceClass.getName()))   throw new RuntimeException("duplicate interface: " + interfaceClass.getName());  interfaces.add(interfaceClass);}  }
class C{  public CM_START_LOOT(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static int indexOf(Object[] array,Object objectToFind){  if (array == null || array.length == 0 || objectToFind == null) {    return -1;  }  for (int i=0; i < array.length; i++) {    Object obj=array[i];    if (obj.equals(objectToFind)) {      return i;    }  }  return -1;}  }
class C{  public void delete(RecordId rid){  moveToRecordId(rid);  delete();}  }
class C{  public void clear(){  getProps().clear();  getOverlay().clear();}  }
class C{  @Override public boolean accept(File file,String name){  for (  String suffix : this.suffixes) {    if (caseSensitivity.checkEndsWith(name,suffix)) {      return true;    }  }  return false;}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public boolean isFocusable(Element elem){  return focusableTypes.contains(elem.getTagName().toLowerCase(Locale.ROOT)) || elem.getTabIndex() >= 0;}  }
class C{  public static void mergeServiceDocuments(ServiceDocument copyTo,ServiceDocument copyFrom,BinaryOperator<Object> fieldMergeStrategy){  for (  Field field : copyFrom.getClass().getFields()) {    if (ServiceDocument.isBuiltInDocumentField(field.getName()) || Modifier.isStatic(field.getModifiers())) {      continue;    }    try {      Object value=field.get(copyFrom);      Object oldValue=field.get(copyTo);      field.set(copyTo,fieldMergeStrategy.apply(oldValue,value));    } catch (    IllegalArgumentException|IllegalAccessException e) {      throw new RuntimeException(e);    }  }  long exp=copyFrom.documentExpirationTimeMicros;  if (exp != 0) {    copyTo.documentExpirationTimeMicros=exp < 0 ? 0 : exp;  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T convertFromNoneable(Object obj,@Nullable T defaultValue){  if (EvalUtils.isNullOrNone(obj)) {    return defaultValue;  }  return (T)obj;}  }
class C{  public float calculateTableConfidence(Rectangle[] widgets){  int[][] bounds;  mValidTable=true;  bounds=new int[4][widgets.length];  for (int i=0; i < widgets.length; i++) {    Rectangle widget=widgets[i];    bounds[0][i]=widget.y;    bounds[1][i]=bounds[0][i] + widget.height;    bounds[2][i]=widget.x;    bounds[3][i]=bounds[2][i] + widget.width;  }  mRows=Utils.gaps(bounds[0],bounds[1]);  mCols=Utils.gaps(bounds[2],bounds[3]);  int[] r=Utils.cells(bounds[0],bounds[1]);  int[] c=Utils.cells(bounds[2],bounds[3]);  Rectangle[][] table=new Rectangle[mCols][mRows];  for (  Rectangle widget : widgets) {    int row=Utils.getPosition(r,widget.y,widget.y + widget.height);    int col=Utils.getPosition(c,widget.x,widget.x + widget.width);    if (row == -1 || col == -1) {      mValidTable=false;      return 0;    }    table[col][row]=widget;  }  float sumprob=0;  for (  Rectangle[] rec : table) {    float prob=alignmentProbability(rec);    sumprob=prob + sumprob - (sumprob * prob);  }  return sumprob;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200687,skillcaster,skillname);}  }
class C{  public ConversionXmlProvider(String conversionXml,IFormat format) throws XmlParsingException, FileNotFoundException {  this(new FileInputStream(new File(conversionXml)),new File(conversionXml).getAbsolutePath(),format);}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  private DefaultMutableTreeNode removeParentFromView(Dn dn,int index,DefaultMutableTreeNode node){  if ((!node.isRoot()) && node.isLeaf() && (!(((XNodeInfo)node.getUserObject()).getType().equals(Type.MBEAN)))) {    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();    removeChildNode(node);    String hashKey=dn.getHashKey(dn.getToken(index));    nodes.remove(hashKey);    removeParentFromView(dn,index + 1,parent);  }  return node;}  }
class C{  public int conf(){  String s=soot.PhaseOptions.getString(options,"conf");  if (s.equalsIgnoreCase("ofcg"))   return conf_ofcg;  if (s.equalsIgnoreCase("cha"))   return conf_cha;  if (s.equalsIgnoreCase("cha-aot"))   return conf_cha_aot;  if (s.equalsIgnoreCase("ofcg-aot"))   return conf_ofcg_aot;  if (s.equalsIgnoreCase("cha-context-aot"))   return conf_cha_context_aot;  if (s.equalsIgnoreCase("ofcg-context-aot"))   return conf_ofcg_context_aot;  if (s.equalsIgnoreCase("cha-context"))   return conf_cha_context;  if (s.equalsIgnoreCase("ofcg-context"))   return conf_ofcg_context;  throw new RuntimeException("Invalid value " + s + " of phase option conf");}  }
class C{  public boolean needsRewrite(){  ASTNode$State state=state();  try {    return true;  }  finally {  }}  }
class C{  public void init(){  this.sEnteredRoom=" ";  this.gameStartSet=false;  this.playToken=false;}  }
class C{  public static void main(String[] args){  Billiards simulation=new Billiards();  simulation.run();}  }
class C{  public static String encodeTemplateNames(String s){  int i=s.indexOf('{');  if (i != -1) {    s=s.replace("{","%7B");  }  i=s.indexOf('}');  if (i != -1) {    s=s.replace("}","%7D");  }  return s;}  }
class C{  public HTTPMethod(int m){  this.method=m;}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private void renewLegionRanking(){  Map<Integer,Integer> newLegionRankingCache=new HashMap<Integer,Integer>();  ArrayList<AbyssRankingResult> elyosRanking=getDAO().getAbyssRankingLegions(Race.ELYOS), asmoRanking=getDAO().getAbyssRankingLegions(Race.ASMODIANS);  legions.clear();  legions.put(Race.ASMODIANS,new SM_ABYSS_RANKING_LEGIONS(lastUpdate,asmoRanking,Race.ASMODIANS));  legions.put(Race.ELYOS,new SM_ABYSS_RANKING_LEGIONS(lastUpdate,elyosRanking,Race.ELYOS));  for (  AbyssRankingResult result : elyosRanking) {    newLegionRankingCache.put(result.getLegionId(),result.getRankPos());  }  for (  AbyssRankingResult result : asmoRanking) {    newLegionRankingCache.put(result.getLegionId(),result.getRankPos());  }  LegionService.getInstance().performRankingUpdate(newLegionRankingCache);}  }
class C{  public JsonObject merge(JsonObject object){  if (object == null) {    throw new NullPointerException("object is null");  }  for (  Member member : object) {    this.set(member.name,member.value);  }  return this;}  }
