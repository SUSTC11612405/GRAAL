class C{  public PcMaxLocalRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);  this.sourceGraph=graphWrapper.getGraph();}  }
class C{  public String addPlot(double[] x,double[] y,String lineSpec){  return addPlot(x,y,lineSpec,"");}  }
class C{  public List<TransactionOutput> calculateAllSpendCandidates(){  return calculateAllSpendCandidates(true,true);}  }
class C{  @Path("move") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse move(final MoveRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.move(request);}  }
class C{  @ExceptionHandler(value={org.hibernate.ObjectNotFoundException.class,ObjectNotFoundException.class}) @ResponseStatus(HttpStatus.NOT_FOUND) @ResponseBody public ErrorInformation handleNotFoundException(RuntimeException exception){  return getErrorInformation(HttpStatus.NOT_FOUND,exception);}  }
class C{  public void addDataSource(){  Integer index=dataset.getItemCount() + 1;  dataset.setValue(index,1);  this.fireDataSourceAdded(index);}  }
class C{  @HLEFunction(nid=0x6652B8CA,version=150) public int sceKernelSetAlarm(int delayUsec,TPointer handlerAddress,int handlerArgument){  return hleKernelSetAlarm(delayUsec,handlerAddress,handlerArgument);}  }
class C{  public GridConcurrentWeakHashSet(int initCap){  store=new GridConcurrentHashSet<>(initCap);}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public static final int[] make_sequence(int start,int end){  int array[]=new int[end - start];  for (int j=start, i=0; j < end; j++, i++) {    array[i]=j;  }  return array;}  }
class C{  private void unlock(){  if (inCollection)   gcLock.release(); else   mutatorLock.release();}  }
class C{  protected CardTerminals engineTerminals(){  return new PCSCTerminals();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void overrideIdentifierData(EmaApiIdentifierType identifier) throws EmaException {  identifier.setEmbedLevel(EmaApi.EMA_EMBED_LEVEL_EXTERNAL_STR);}  }
class C{  private boolean querySkipExistingMethods(final MethodDeclaration method) throws OperationCanceledException {  if (!fSkipAllExisting) {    return false;  }  return true;}  }
class C{  public static Boolean testClassF(Boolean b){  return !b;}  }
class C{  public ResourceBundleEnumeration(Set<String> set,Enumeration<String> enumeration){  this.set=set;  this.iterator=set.iterator();  this.enumeration=enumeration;}  }
class C{  public void doEditChartProperties(){  ChartEditor editor=ChartEditorManager.getChartEditor(this.chart);  int result=JOptionPane.showConfirmDialog(this,editor,localizationResources.getString("Chart_Properties"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    editor.updateChart(this.chart);  }}  }
class C{  public DynamicPercept(Object[] keys,Object[] values){  assert (keys.length == values.length);  for (int i=0; i < keys.length; i++) {    setAttribute(keys[i],values[i]);  }}  }
class C{  public AssistOptions(Map settings){  if (settings == null)   return;  set(settings);}  }
class C{  public CLEvent enqueueNDRange(CLQueue queue,long[] globalOffsets,long[] globalWorkSizes,long[] localWorkSizes,CLEvent... eventsToWaitFor){}  }
class C{  public void mobileCouponsExample(View view){  Intent intent=new Intent(this,SegmentScanActivity.class);  intent.putExtra(SegmentScanActivity.EXTRAS_LICENSE_KEY,LICENSE_KEY);  MobileCouponsParserSettings couponParserSett=new MobileCouponsParserSettings(MobileCouponsParserSettings.TopUpPrefix.TOP_UP_PREFIX_123);  couponParserSett.setAllowNoPrefix(true);  ScanConfiguration conf[]=new ScanConfiguration[]{new ScanConfiguration(R.string.mobile_coupon_title,R.string.mobile_coupon_msg,NAME_MOBILE_COUPON,couponParserSett)};  intent.putExtra(SegmentScanActivity.EXTRAS_SCAN_CONFIGURATION,conf);  Intent helpIntent=new Intent(this,HelpActivity.class);  intent.putExtra(SegmentScanActivity.EXTRAS_HELP_INTENT,helpIntent);  startActivityForResult(intent,BLINK_OCR_MOBILE_COUPON_REQUEST_CODE);}  }
class C{  public boolean isFunctionLike(){  return args != null;}  }
class C{  public HttpURL(final HttpURL base,final String relative) throws URIException {  this(base,new HttpURL(relative));}  }
class C{  public PutResourceParams withNoOverwriteDirNonDir(Boolean noOverwriteDirNonDir){  this.noOverwriteDirNonDir=noOverwriteDirNonDir;  return this;}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(int[] src,int srcIdx,int[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx >= dstIdx) && INT_BULK_COPY_SUPPORTED) {      if (NEEDS_INT_ASTORE_BARRIER || NEEDS_INT_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_INT);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_INT);        Barriers.intBulkCopy(src,srcOffset,dst,dstOffset,len << LOG_BYTES_IN_INT);      } else {        Memory.arraycopy32Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  private void flingOccurred(float x,float y,float tx,float ty,float vx,float vy){  if (mEdgeSwipeHandler != null && mEdgeSwipeStarted) {    mEdgeSwipeHandler.swipeFlingOccurred(x,y,tx,ty,vx,vy);  }}  }
class C{  public RichText withItalic(){  this.formats.add(Format.ITALIC);  return this;}  }
class C{  protected boolean isDisplayShowTitleEnabled(){  return true;}  }
class C{  protected void fillStaffInfo(InstructorEditForm frm,HttpServletRequest request) throws Exception {  Staff staff=new StaffDAO().get(new Long(frm.getSearchSelect()));  frm.setPuId(staff.getExternalUniqueId());  frm.setFname(staff.getFirstName() != null ? staff.getFirstName().trim() : "");  frm.setMname(staff.getMiddleName() != null ? staff.getMiddleName().trim() : "");  frm.setLname(staff.getLastName() != null ? staff.getLastName().trim() : "");  frm.setTitle(staff.getAcademicTitle() != null ? staff.getAcademicTitle().trim() : "");  frm.setEmail(staff.getEmail());  if (staff.getPositionType() != null && (frm.getPosType() == null || frm.getPosType().trim().length() == 0))   frm.setPosType(staff.getPositionType().getUniqueId().toString());}  }
class C{  public static void ensureEquivalent(final Message m1,final ActiveMQMessage m2) throws JMSException {  ProxyAssertSupport.assertTrue(m1 != m2);  ProxyAssertSupport.assertEquals(m1.getJMSTimestamp(),m2.getJMSTimestamp());  byte[] corrIDBytes=null;  String corrIDString=null;  try {    corrIDBytes=m1.getJMSCorrelationIDAsBytes();  } catch (  JMSException e) {    corrIDString=m1.getJMSCorrelationID();  }  if (corrIDBytes != null) {    ProxyAssertSupport.assertTrue(Arrays.equals(corrIDBytes,m2.getJMSCorrelationIDAsBytes()));  } else   if (corrIDString != null) {    ProxyAssertSupport.assertEquals(corrIDString,m2.getJMSCorrelationID());  } else {    try {      byte[] corrID2=m2.getJMSCorrelationIDAsBytes();      ProxyAssertSupport.assertNull(corrID2);    } catch (    JMSException e) {      String corrID2=m2.getJMSCorrelationID();      ProxyAssertSupport.assertNull(corrID2);    }  }  ProxyAssertSupport.assertEquals(m1.getJMSReplyTo(),m2.getJMSReplyTo());  ProxyAssertSupport.assertEquals(m1.getJMSDestination(),m2.getJMSDestination());  ProxyAssertSupport.assertEquals(m1.getJMSDeliveryMode(),m2.getJMSDeliveryMode());  ProxyAssertSupport.assertEquals(m1.getJMSType(),m2.getJMSType());  ProxyAssertSupport.assertEquals(m1.getJMSExpiration(),m2.getJMSExpiration());  ProxyAssertSupport.assertEquals(m1.getJMSPriority(),m2.getJMSPriority());  int m1PropertyCount=0, m2PropertyCount=0;  for (Enumeration<String> p=m1.getPropertyNames(); p.hasMoreElements(); ) {    String name=p.nextElement();    if (!name.startsWith("JMSX")) {      m1PropertyCount++;    }  }  for (Enumeration p=m2.getPropertyNames(); p.hasMoreElements(); ) {    String name=(String)p.nextElement();    if (!name.startsWith("JMSX")) {      m2PropertyCount++;    }  }  ProxyAssertSupport.assertEquals(m1PropertyCount,m2PropertyCount);  for (Enumeration props=m1.getPropertyNames(); props.hasMoreElements(); ) {    boolean found=false;    String name=(String)props.nextElement();    if (name.startsWith("JMSX")) {      continue;    }    boolean booleanProperty=false;    try {      booleanProperty=m1.getBooleanProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertEquals(booleanProperty,m2.getBooleanProperty(name));      continue;    }    byte byteProperty=0;    try {      byteProperty=m1.getByteProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertEquals(byteProperty,m2.getByteProperty(name));      continue;    }    short shortProperty=0;    try {      shortProperty=m1.getShortProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertEquals(shortProperty,m2.getShortProperty(name));      continue;    }    int intProperty=0;    try {      intProperty=m1.getIntProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertEquals(intProperty,m2.getIntProperty(name));      continue;    }    long longProperty=0;    try {      longProperty=m1.getLongProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertEquals(longProperty,m2.getLongProperty(name));      continue;    }    float floatProperty=0;    try {      floatProperty=m1.getFloatProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertTrue(floatProperty == m2.getFloatProperty(name));      continue;    }    double doubleProperty=0;    try {      doubleProperty=m1.getDoubleProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertTrue(doubleProperty == m2.getDoubleProperty(name));      continue;    }    String stringProperty=null;    try {      stringProperty=m1.getStringProperty(name);      found=true;    } catch (    JMSException e) {    }    if (found) {      ProxyAssertSupport.assertEquals(stringProperty,m2.getStringProperty(name));      continue;    }    ProxyAssertSupport.fail("Cannot identify property " + name);  }}  }
class C{  public static long parseLong(String string) throws NumberFormatException {  return parseLong(string,10);}  }
class C{  public void enter(){  cancel();  final int outerDuration=(int)(1000 * 1.0f / WAVE_OUTER_OPACITY_ENTER_VELOCITY);  final ObjectAnimator outer=ObjectAnimator.ofFloat(this,"outerOpacity",0,1);  outer.setAutoCancel(true);  outer.setDuration(outerDuration);  outer.setInterpolator(LINEAR_INTERPOLATOR);  mAnimOuterOpacity=outer;  outer.start();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public static LambdaExpression findEnclosingLambdaExpression(ASTNode node){  node=node.getParent();  while (node != null) {    if (node instanceof LambdaExpression) {      return (LambdaExpression)node;    }    if (node instanceof BodyDeclaration || node instanceof AnonymousClassDeclaration) {      return null;    }    node=node.getParent();  }  return null;}  }
class C{  public BufferedImage reconstruct(int resolution) throws IllegalArgumentException {  int numBands=this.xform.length;  int[][] imageData=new int[numBands][this.resolutionX * this.resolutionY];  byte[][] imageBytes=new byte[numBands][this.resolutionX * this.resolutionY];  int res2=(resolution / 2) * (resolution / 2);  int[][] A=new int[numBands][res2];  int[][] D=new int[numBands][res2];  int[][] V=new int[numBands][res2];  int[][] H=new int[numBands][res2];  for (int k=0; k < numBands; k++)   imageData[k][0]=0x000000ff & this.xform[k][0];  int scale=1;  int offset=1;  do {    int numVals=scale * scale;    if (numVals >= resolution * resolution)     break;    int next=0;    for (int j=0; j < scale; j++) {      for (int i=0; i < scale; i++, next++) {        for (int k=0; k < numBands; k++) {          A[k][next]=imageData[k][j * resolution + i];        }      }    }    for (int i=0; i < numVals; i++, offset++) {      for (int k=0; k < numBands; k++) {        H[k][i]=this.xform[k][offset];      }    }    for (int i=0; i < numVals; i++, offset++) {      for (int k=0; k < numBands; k++) {        V[k][i]=this.xform[k][offset];      }    }    for (int i=0; i < numVals; i++, offset++) {      for (int k=0; k < numBands; k++) {        D[k][i]=this.xform[k][offset];      }    }    next=0;    for (int j=0; j < scale; j++) {      for (int i=0; i < scale; i++, next++) {        for (int k=0; k < numBands; k++) {          int a=A[k][next] + H[k][next] + V[k][next]+ D[k][next];          int b=A[k][next] - H[k][next] + V[k][next] - D[k][next];          int c=A[k][next] + H[k][next] - V[k][next] - D[k][next];          int d=A[k][next] - H[k][next] - V[k][next] + D[k][next];          imageData[k][2 * j * resolution + (i * 2)]=a;          imageData[k][2 * j * resolution + (i * 2) + 1]=b;          imageData[k][2 * j * resolution + resolution + (i * 2)]=c;          imageData[k][2 * j * resolution + resolution + (i * 2) + 1]=d;        }      }    }    scale*=2;  } while (scale < resolution);  for (int j=0; j < resolution; j++) {    for (int i=0; i < resolution; i++) {      for (int k=0; k < numBands; k++) {        imageBytes[k][j * resolution + i]=(byte)Math.max(0,Math.min(255,imageData[k][j * resolution + i]));      }    }  }  BandedSampleModel sm=new BandedSampleModel(DataBuffer.TYPE_BYTE,resolution,resolution,numBands);  DataBufferByte dataBuff=new DataBufferByte(imageBytes,imageBytes[0].length);  WritableRaster rast=Raster.createWritableRaster(sm,dataBuff,new Point(0,0));  int imageType=getBufferedImageType(this);  BufferedImage image=new BufferedImage(resolution,resolution,imageType);  image.getRaster().setRect(rast);  return image;}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void add(EventType eventType,FilterHandleSetNode rootNode){  eventTypesRWLock.writeLock().lock();  try {    if (eventTypes.containsKey(eventType)) {      throw new IllegalStateException("Event type already in index, add not performed, type=" + eventType);    }    eventTypes.put(eventType,rootNode);  }  finally {    eventTypesRWLock.writeLock().unlock();  }}  }
class C{  private static Object createObjectFromFactories(Object obj,Name name,Context nameCtx,Hashtable<?,?> environment) throws Exception {  FactoryEnumeration factories=ResourceManager.getFactories(Context.OBJECT_FACTORIES,environment,nameCtx);  if (factories == null)   return null;  ObjectFactory factory;  Object answer=null;  while (answer == null && factories.hasMore()) {    factory=(ObjectFactory)factories.next();    answer=factory.getObjectInstance(obj,name,nameCtx,environment);  }  return answer;}  }
class C{  public static CreateFactoryParams create(){  return new CreateFactoryParams();}  }
class C{  public boolean containsValue(Object value){  return contains(value);}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  protected void fireFigureChanged(Rectangle2D.Double changedArea){  if (listenerList.getListenerCount() > 0) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,changedArea);        }        ((FigureListener)listeners[i + 1]).figureChanged(event);      }    }  }}  }
class C{  private void jbInit() throws Exception {  this.setLayout(gridBagLayout);  Insets bInsets=new Insets(0,5,0,5);  TitledBorder titledBorder=new TitledBorder("dummy");  lJavaHome.setToolTipText(res.getString("JavaHomeInfo"));  lJavaHome.setText(res.getString("JavaHome"));  fJavaHome.setText(".");  okJavaHome.setEnabled(false);  bJavaHome.setMargin(bInsets);  bJavaHome.setToolTipText(res.getString("JavaHomeInfo"));  lJavaType.setToolTipText(res.getString("JavaTypeInfo"));  lJavaType.setText(res.getString("JavaType"));  fJavaType.setPreferredSize(fJavaHome.getPreferredSize());  JLabel sectionLabel=new JLabel("Java");  sectionLabel.setForeground(titledBorder.getTitleColor());  JSeparator separator=new JSeparator();  this.add(sectionLabel,new GridBagConstraints(0,0,7,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,0,10),0,0));  this.add(separator,new GridBagConstraints(0,1,7,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,10),0,0));  this.add(lJavaHome,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fJavaHome,new GridBagConstraints(1,2,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(5,5,5,0),0,0));  this.add(okJavaHome,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,2,5),0,0));  this.add(bJavaHome,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  this.add(lJavaType,new GridBagConstraints(4,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fJavaType,new GridBagConstraints(5,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,2,0),0,0));  lAdempiereHome.setToolTipText(res.getString("AdempiereHomeInfo"));  lAdempiereHome.setText(res.getString("AdempiereHome"));  fAdempiereHome.setText(".");  okAdempiereHome.setEnabled(false);  bAdempiereHome.setMargin(bInsets);  bAdempiereHome.setToolTipText(res.getString("AdempiereHomeInfo"));  lKeyStore.setText(res.getString("KeyStorePassword"));  lKeyStore.setToolTipText(res.getString("KeyStorePasswordInfo"));  fKeyStore.setText("");  okKeyStore.setEnabled(false);  sectionLabel=new JLabel("Adempiere");  sectionLabel.setForeground(titledBorder.getTitleColor());  separator=new JSeparator();  this.add(sectionLabel,new GridBagConstraints(0,3,7,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,0,0),0,0));  this.add(separator,new GridBagConstraints(0,4,7,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,10),0,0));  this.add(lAdempiereHome,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fAdempiereHome,new GridBagConstraints(1,5,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(5,5,2,0),0,0));  this.add(okAdempiereHome,new GridBagConstraints(2,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,2,5),0,0));  this.add(bAdempiereHome,new GridBagConstraints(3,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  this.add(lKeyStore,new GridBagConstraints(4,5,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  this.add(fKeyStore,new GridBagConstraints(5,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,2,0),0,0));  this.add(okKeyStore,new GridBagConstraints(6,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  lAppsServer.setToolTipText(res.getString("AppsServerInfo"));  lAppsServer.setText(res.getString("AppsServer"));  lAppsServer.setFont(lAppsServer.getFont().deriveFont(Font.BOLD));  fAppsServer.setText(".");  okAppsServer.setEnabled(false);  lAppsType.setToolTipText(res.getString("AppsTypeInfo"));  lAppsType.setText(res.getString("AppsType"));  fAppsType.setPreferredSize(fAppsServer.getPreferredSize());  sectionLabel=new JLabel(res.getString("AppsServer"));  sectionLabel.setForeground(titledBorder.getTitleColor());  separator=new JSeparator();  this.add(sectionLabel,new GridBagConstraints(0,6,6,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,0,0),0,0));  this.add(separator,new GridBagConstraints(0,7,7,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,10),0,0));  this.add(lAppsServer,new GridBagConstraints(0,8,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fAppsServer,new GridBagConstraints(1,8,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(5,5,2,0),0,0));  this.add(okAppsServer,new GridBagConstraints(2,8,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,2,5),0,0));  this.add(lAppsType,new GridBagConstraints(4,8,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fAppsType,new GridBagConstraints(5,8,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,2,0),0,0));  lDeployDir.setToolTipText(res.getString("DeployDirInfo"));  lDeployDir.setText(res.getString("DeployDir"));  fDeployDir.setText(".");  okDeployDir.setEnabled(false);  bDeployDir.setMargin(bInsets);  bDeployDir.setToolTipText(res.getString("DeployDirInfo"));  lJNPPort.setToolTipText(res.getString("JNPPortInfo"));  lJNPPort.setText(res.getString("JNPPort"));  fJNPPort.setText(".");  okJNPPort.setEnabled(false);  this.add(lDeployDir,new GridBagConstraints(0,9,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fDeployDir,new GridBagConstraints(1,9,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(okDeployDir,new GridBagConstraints(2,9,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  this.add(bDeployDir,new GridBagConstraints(3,9,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  this.add(lJNPPort,new GridBagConstraints(4,9,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fJNPPort,new GridBagConstraints(5,9,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(okJNPPort,new GridBagConstraints(6,9,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  lWebPort.setToolTipText(res.getString("WebPortInfo"));  lWebPort.setText(res.getString("WebPort"));  fWebPort.setText(".");  okWebPort.setEnabled(false);  lSSLPort.setText("SSL");  fSSLPort.setText(".");  okSSLPort.setEnabled(false);  this.add(lWebPort,new GridBagConstraints(0,10,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fWebPort,new GridBagConstraints(1,10,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(okWebPort,new GridBagConstraints(2,10,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  this.add(lSSLPort,new GridBagConstraints(4,10,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fSSLPort,new GridBagConstraints(5,10,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(okSSLPort,new GridBagConstraints(6,10,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  lDatabaseServer.setToolTipText(res.getString("DatabaseServerInfo"));  lDatabaseServer.setText(res.getString("DatabaseServer"));  lDatabaseServer.setFont(lDatabaseServer.getFont().deriveFont(Font.BOLD));  okDatabaseServer.setEnabled(false);  lDatabaseType.setToolTipText(res.getString("DatabaseTypeInfo"));  lDatabaseType.setText(res.getString("DatabaseType"));  fDatabaseType.setPreferredSize(fDatabaseServer.getPreferredSize());  sectionLabel=new JLabel(res.getString("DatabaseServer"));  sectionLabel.setForeground(titledBorder.getTitleColor());  separator=new JSeparator();  this.add(sectionLabel,new GridBagConstraints(0,11,6,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,0,0),0,0));  this.add(separator,new GridBagConstraints(0,12,7,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,10),0,0));  this.add(lDatabaseServer,new GridBagConstraints(0,13,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fDatabaseServer,new GridBagConstraints(1,13,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(5,5,2,0),0,0));  this.add(okDatabaseServer,new GridBagConstraints(2,13,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,2,5),0,0));  this.add(lDatabaseType,new GridBagConstraints(4,13,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fDatabaseType,new GridBagConstraints(5,13,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,2,0),0,0));  lDatabaseName.setToolTipText(res.getString("DatabaseNameInfo"));  lDatabaseName.setText(res.getString("DatabaseName"));  fDatabaseName.setText(".");  lDatabaseDiscovered.setToolTipText(res.getString("TNSNameInfo"));  lDatabaseDiscovered.setText(res.getString("TNSName"));  fDatabaseDiscovered.setEditable(true);  fDatabaseDiscovered.setPreferredSize(fDatabaseName.getPreferredSize());  okDatabaseSQL.setEnabled(false);  this.add(lDatabaseName,new GridBagConstraints(0,14,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fDatabaseName,new GridBagConstraints(1,14,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(okDatabaseSQL,new GridBagConstraints(2,14,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  this.add(lDatabaseDiscovered,new GridBagConstraints(4,14,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  this.add(fDatabaseDiscovered,new GridBagConstraints(5,14,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  lDatabasePort.setToolTipText(res.getString("DatabasePortInfo"));  lDatabasePort.setText(res.getString("DatabasePort"));  fDatabasePort.setText(".");  lSystemPassword.setToolTipText(res.getString("SystemPasswordInfo"));  lSystemPassword.setText(res.getString("SystemPassword"));  fSystemPassword.setText(".");  okDatabaseSystem.setEnabled(false);  this.add(lDatabasePort,new GridBagConstraints(0,15,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fDatabasePort,new GridBagConstraints(1,15,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(lSystemPassword,new GridBagConstraints(4,15,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fSystemPassword,new GridBagConstraints(5,15,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,5,2,0),0,0));  this.add(okDatabaseSystem,new GridBagConstraints(6,15,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  lDatabaseUser.setToolTipText(res.getString("DatabaseUserInfo"));  lDatabaseUser.setText(res.getString("DatabaseUser"));  fDatabaseUser.setText(".");  lDatabasePassword.setToolTipText(res.getString("DatabasePasswordInfo"));  lDatabasePassword.setText(res.getString("DatabasePassword"));  fDatabasePassword.setText(".");  okDatabaseUser.setEnabled(false);  this.add(lDatabaseUser,new GridBagConstraints(0,16,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fDatabaseUser,new GridBagConstraints(1,16,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(lDatabasePassword,new GridBagConstraints(4,16,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fDatabasePassword,new GridBagConstraints(5,16,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,5,2,0),0,0));  this.add(okDatabaseUser,new GridBagConstraints(6,16,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  sectionLabel=new JLabel(res.getString("MailServer"));  sectionLabel.setForeground(titledBorder.getTitleColor());  separator=new JSeparator();  this.add(sectionLabel,new GridBagConstraints(0,17,6,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,0,0),0,0));  this.add(separator,new GridBagConstraints(0,18,7,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,10),0,0));  lMailServer.setToolTipText(res.getString("MailServerInfo"));  lMailServer.setText(res.getString("MailServer"));  lMailServer.setFont(lMailServer.getFont().deriveFont(Font.BOLD));  fMailServer.setText(".");  lAdminEMail.setToolTipText(res.getString("AdminEMailInfo"));  lAdminEMail.setText(res.getString("AdminEMail"));  fAdminEMail.setText(".");  okMailServer.setEnabled(false);  this.add(lMailServer,new GridBagConstraints(0,19,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fMailServer,new GridBagConstraints(1,19,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(5,5,2,0),0,0));  this.add(okMailServer,new GridBagConstraints(2,19,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,2,5),0,0));  this.add(lAdminEMail,new GridBagConstraints(4,19,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  this.add(fAdminEMail,new GridBagConstraints(5,19,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(5,5,2,0),0,0));  lMailUser.setToolTipText(res.getString("MailUserInfo"));  lMailUser.setText(res.getString("MailUser"));  fMailUser.setText(".");  lMailPassword.setToolTipText(res.getString("MailPasswordInfo"));  lMailPassword.setText(res.getString("MailPassword"));  fMailPassword.setText(".");  okMailUser.setEnabled(false);  this.add(lMailUser,new GridBagConstraints(0,20,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fMailUser,new GridBagConstraints(1,20,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,5,2,0),0,0));  this.add(lMailPassword,new GridBagConstraints(4,20,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  this.add(fMailPassword,new GridBagConstraints(5,20,1,1,0.5,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,5,2,0),0,0));  this.add(okMailUser,new GridBagConstraints(6,20,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,2,5),0,0));  CPanel filler=new CPanel();  filler.setOpaque(false);  filler.setBorder(null);  this.add(filler,new GridBagConstraints(0,21,1,1,0.0,1.0,GridBagConstraints.WEST,GridBagConstraints.VERTICAL,new Insets(0,0,0,0),0,0));  bTest.setToolTipText(res.getString("TestInfo"));  bTest.setText(res.getString("Test"));  bSave.setToolTipText(res.getString("SaveInfo"));  bSave.setText(res.getString("Save"));  bHelp.setToolTipText(res.getString("HelpInfo"));  this.add(bTest,new GridBagConstraints(0,22,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,10,5),0,0));  this.add(bHelp,new GridBagConstraints(3,22,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(15,5,10,5),0,0));  this.add(bSave,new GridBagConstraints(5,22,2,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(15,5,10,5),0,0));  bAdempiereHome.addActionListener(this);  bJavaHome.addActionListener(this);  bDeployDir.addActionListener(this);  fJavaType.addActionListener(this);  fAppsType.addActionListener(this);  fDatabaseType.addActionListener(this);  fDatabaseDiscovered.addActionListener(this);  bHelp.addActionListener(this);  bTest.addActionListener(this);  bSave.addActionListener(this);}  }
class C{  public AMM(){  this(DEFAULT_REGULARIZER);}  }
class C{  public static List<ServiceDetailDescriptor> findLayerAPI(LayerDetailDescriptor descriptor){  return new APIFinder().findLayerAPI(descriptor);}  }
class C{  @SuppressWarnings("unchecked") public static Class<? extends IndicatorLayout> createIndicatorLayoutClazz(String clazzName){  Class<? extends IndicatorLayout> clazz=null;  if (clazzName == null) {    clazz=DefaultIndicatorLayoutFactory.createIndicatorLayoutClazz(clazzName);    return clazz;  }  try {    clazz=(Class<? extends IndicatorLayout>)Class.forName(clazzName);  } catch (  ClassNotFoundException e) {    Log.e(LOG_TAG,"The indicator layout you have chosen class has not been found.",e);    clazz=DefaultIndicatorLayoutFactory.createIndicatorLayoutClazz(clazzName);  }  return clazz;}  }
class C{  private int clamp(final int c){  if (c < 0) {    return 0;  }  if (c > 255) {    return 255;  }  return c;}  }
class C{  @Override public void paintComponent(Graphics gx){  super.paintComponent(gx);  if (m_plotInstances != null && m_plotInstances.numInstances() > 0 && m_plotInstances.numAttributes() > 0) {    if (m_plotCompanion != null) {      m_plotCompanion.prePlot(gx);    }    m_JRand=new Random(m_JitterVal);    paintAxis(gx);    if (m_axisChanged || m_plotResize) {      int x_range=m_XaxisEnd - m_XaxisStart;      int y_range=m_YaxisEnd - m_YaxisStart;      if (x_range < 10) {        x_range=10;      }      if (y_range < 10) {        y_range=10;      }      m_drawnPoints=new int[x_range + 1][y_range + 1];      fillLookup();      m_plotResize=false;      m_axisChanged=false;    }    paintData(gx);  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:02.926 -0500",hash_original_method="06F5CBF51BDA69D9C47BB01131F079C4",hash_generated_method="2B96438F6D4AB5642FC14F03C275F180") public final XmlResourceParser openXmlResourceParser(int cookie,String fileName) throws IOException {  XmlBlock block=openXmlBlockAsset(cookie,fileName);  XmlResourceParser rp=block.newParser();  block.close();  return rp;}  }
class C{  public static Node toXML(Object value) throws PageException {  if (value instanceof Node)   return XMLCaster.toXMLStruct((Node)value,false);  if (value instanceof ObjectWrap) {    return toXML(((ObjectWrap)value).getEmbededObject());  }  try {    return XMLCaster.toXMLStruct(XMLUtil.parse(XMLUtil.toInputSource(null,value),null,false),false);  } catch (  Exception outer) {    throw Caster.toPageException(outer);  }}  }
class C{  protected RequestTask(KMLModelPlacemarkImpl placemark,String address){  if (placemark == null) {    String message=Logging.getMessage("nullValue.ObjectIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (address == null) {    String message=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.placemark=placemark;  this.address=address;}  }
class C{  public static Scs cs_compress(Scs T){  int m, n, nz, p, k, Cp[], Ci[], w[], Ti[], Tj[];  float Cx[], Tx[];  Scs C;  if (!Scs_util.CS_TRIPLET(T))   return (null);  m=T.m;  n=T.n;  Ti=T.i;  Tj=T.p;  Tx=T.x;  nz=T.nz;  C=Scs_util.cs_spalloc(m,n,nz,Tx != null,false);  w=new int[n];  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (k=0; k < nz; k++)   w[Tj[k]]++;  Scs_cumsum.cs_cumsum(Cp,w,n);  for (k=0; k < nz; k++) {    Ci[p=w[Tj[k]]++]=Ti[k];    if (Cx != null)     Cx[p]=Tx[k];  }  return C;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof TransitRouteStopImpl)) {    return false;  }  TransitRouteStopImpl other=(TransitRouteStopImpl)obj;  if (this.stop == null) {    if (other.getStopFacility() != null) {      return false;    }  } else {    if (!stop.equals(other.getStopFacility())) {      return false;    }  }  if (this.departureOffset != other.getDepartureOffset()) {    return false;  }  if (this.arrivalOffset != other.getArrivalOffset()) {    return false;  }  if (this.awaitDepartureTime != other.isAwaitDepartureTime()) {    return false;  }  return true;}  }
class C{  public CActionFreezeView(final ZyGraph graph){  m_graph=Preconditions.checkNotNull(graph,"IE02818: graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Freeze view");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/viewlock_up.jpg")));}  }
class C{  public boolean match(SuperMethodInvocation node,Object other){  if (!(other instanceof SuperMethodInvocation)) {    return false;  }  SuperMethodInvocation o=(SuperMethodInvocation)other;  if (node.getAST().apiLevel >= AST.JLS3) {    if (!safeSubtreeListMatch(node.typeArguments(),o.typeArguments())) {      return false;    }  }  return (safeSubtreeMatch(node.getQualifier(),o.getQualifier()) && safeSubtreeMatch(node.getName(),o.getName()) && safeSubtreeListMatch(node.arguments(),o.arguments()));}  }
class C{  public final void testDEFAULTmgfSpec(){  assertTrue(MGF1ParameterSpec.SHA1.equals(PSSParameterSpec.DEFAULT.getMGFParameters()));}  }
class C{  protected RowValue readSqlData() throws SQLException, IOException {  final RowDescriptor rowDescriptor=getFieldDescriptor();  final RowValue rowValue=rowDescriptor.createDefaultFieldValues();  final BlrCalculator blrCalculator=getDatabase().getBlrCalculator();  final XdrInputStream xdrIn=getXdrIn();  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);    final FieldValue fieldValue=rowValue.getFieldValue(idx);    final int len=blrCalculator.calculateIoLength(fieldDescriptor);    byte[] buffer=readColumnData(xdrIn,len);    if (xdrIn.readInt() == NULL_INDICATOR_NULL)     buffer=null;    fieldValue.setFieldData(buffer);  }  return rowValue;}  }
class C{  void appendArrayType(StringBuilder sb,Class[] objs){  if (objs.length > 0) {    appendArrayType(sb,objs[0]);    for (int i=1; i < objs.length; i++) {      sb.append(',');      appendArrayType(sb,objs[i]);    }  }}  }
class C{  public static <T>HashSet<T> linkedHashSet(){  return new LinkedHashSet<T>();}  }
class C{  public TerminalColors(){  reset();}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.equals(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public boolean isShowCustomTextGridY(){  return mShowCustomTextGridY;}  }
class C{  public VegetableGrower(final RPObject object,final String name,final int maxRipeness,final int growthRate){  super(object,"items/grower/" + name + "_grower","items/grower/" + name + " grower","Pick",maxRipeness,growthRate);  vegetableName=name;  setDescription("It looks like there's " + Grammar.a_noun(name) + " sprouting here.");  update();}  }
class C{  public Writer buildDeletionWriter(AbstractSession session,Writer writer) throws ValidationException {  try {    writer.write("DROP TABLE " + getFullName() + session.getPlatform().getDropCascadeString());  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  @Pure public String annotationClassToAnnotationInterface(){  if (VM.VerifyAssertions) {    boolean isClassAnnotation=val[0] == 'L' && val[val.length - 1] == ';';    VM._assert(val.length > 0);    if (!isClassAnnotation) {      String msg=toString();      VM._assert(isClassAnnotation,msg);    }  }  return StringUtilities.asciiBytesToString(val,1,val.length - 4).replace('/','.');}  }
class C{  public static void addStartStopNodesTo(BlockGraph graph){  ADDSTART: {    List heads=graph.getHeads();    if (heads.size() == 0)     break ADDSTART;    if ((heads.size() == 1) && (heads.get(0) instanceof DummyBlock))     break ADDSTART;    List blocks=graph.getBlocks();    DummyBlock head=new DummyBlock(graph.getBody(),0);    head.makeHeadBlock(heads);    graph.mHeads=new SingletonList(head);{      Iterator blocksIt=blocks.iterator();      while (blocksIt.hasNext()) {        Block block=(Block)blocksIt.next();        block.setIndexInMethod(block.getIndexInMethod() + 1);      }    }    List newBlocks=new ArrayList();    newBlocks.add(head);    newBlocks.addAll(blocks);    graph.mBlocks=newBlocks;  }  ADDSTOP: {    List tails=graph.getTails();    if (tails.size() == 0)     break ADDSTOP;    if ((tails.size() == 1) && (tails.get(0) instanceof DummyBlock))     break ADDSTOP;    List blocks=graph.getBlocks();    DummyBlock tail=new DummyBlock(graph.getBody(),blocks.size());    tail.makeTailBlock(tails);    graph.mTails=new SingletonList(tail);    blocks.add(tail);  }}  }
class C{  public static void invalidateDrawerMenuHeader(){  MainActivity instance=MainActivity.getInstance();  if (instance != null && instance.drawerFragment != null) {    instance.drawerFragment.invalidateHeader();  } else {    Timber.e(MSG_MAIN_ACTIVITY_INSTANCE_IS_NULL);  }}  }
class C{  private AspectItem(ItemStack stack,IItemStackMatcher matcher){  this.original=stack;  this.matcher=matcher;}  }
class C{  public <E extends Layout,AE extends Array1D<E>>Class<AE> genArray1DImpl(final Class<E> elementInterfaceClass,final Class<AE> userDefinedArrayClass){  try {    Class<AE> implCls=implClassloader.load1DClass(elementInterfaceClass,userDefinedArrayClass);    unsafe.ensureClassInitialized(implCls);    Field f=implCls.getDeclaredField("unsafe");    unsafe.putObject(unsafe.staticFieldBase(f),unsafe.staticFieldOffset(f),unsafe);    return implCls;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_DIRECTIVE___TRACE_ITEM_1:    getTraceItem_1().clear();  return;case UmplePackage.TRACE_DIRECTIVE___ANONYMOUS_TRACE_DIRECTIVE_11:getAnonymous_traceDirective_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void addMutualEdge(Object from,Object to){  if (!super.containsNode(from))   super.addNode(from);  if (!super.containsNode(to))   super.addNode(to);  super.addEdge(from,to);  super.addEdge(to,from);}  }
class C{  @Override public void stopMonitoring(StorageSystem storageDevice) throws StorageMonitorException {  s_logger.debug("Disconnecting storage from event monitoring.");  if (storageDevice == null) {    throw new StorageMonitorException("Passed storage device is null");  }  s_logger.info("Attempting to disconnect storage provider {} from event monitoring.",storageDevice.getSmisProviderIP());  if (_cimConnectionManager == null) {    throw new StorageMonitorException("CIM adapter connection manager reference is null.");  }  try {    _cimConnectionManager.removeConnection(storageDevice.getSmisProviderIP(),storageDevice.getSmisPortNumber());  } catch (  ConnectionManagerException cme) {    throw new StorageMonitorException(MessageFormatter.format("Failed attempting to remove the connection to storage provider {}",storageDevice.getSmisProviderIP()).getMessage(),cme);  }  s_logger.info("Connection to storage provider {} was removed.",storageDevice.getSmisProviderIP());}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public T caseReturnPrimitiveType(ReturnPrimitiveType object){  return null;}  }
class C{  public static void enableFullscreenFlags(Resources resources,Context context,int resControlContainerHeight){  ContentApplication.initCommandLine(context);  CommandLine commandLine=CommandLine.getInstance();  if (commandLine.hasSwitch(ChromeSwitches.DISABLE_FULLSCREEN))   return;  TypedValue threshold=new TypedValue();  resources.getValue(R.dimen.top_controls_show_threshold,threshold,true);  commandLine.appendSwitchWithValue(ContentSwitches.TOP_CONTROLS_SHOW_THRESHOLD,threshold.coerceToString().toString());  resources.getValue(R.dimen.top_controls_hide_threshold,threshold,true);  commandLine.appendSwitchWithValue(ContentSwitches.TOP_CONTROLS_HIDE_THRESHOLD,threshold.coerceToString().toString());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean remove(K key){  Integer value=refSet.get(key);  if (value == null) {    return true;  }  if (value == 1) {    refSet.remove(key);    numValues--;    return true;  }  value--;  refSet.put(key,value);  numValues--;  return false;}  }
class C{  @Override public void g(float sideMot,float forMot){  if (!CustomEntities.customEntities.contains(this)) {    super.g(sideMot,forMot);    return;  }  if (this.passenger != null && this.passenger instanceof EntityHuman && CustomEntities.customEntities.contains(this)) {    this.lastYaw=this.yaw=this.passenger.yaw;    this.pitch=this.passenger.pitch * 0.5F;    this.setYawPitch(this.yaw,this.pitch);    this.aI=this.aG=this.yaw;    sideMot=((EntityLiving)this.passenger).aZ * 0.5F;    forMot=((EntityLiving)this.passenger).ba;    Field jump=null;    try {      jump=EntityLiving.class.getDeclaredField("aY");    } catch (    NoSuchFieldException|SecurityException e1) {      e1.printStackTrace();    }    jump.setAccessible(true);    if (jump != null && BlockUtils.isOnGround(this.getBukkitEntity())) {      try {        if (jump.getBoolean(this.passenger)) {          double jumpHeight=0.3D;          this.motY=jumpHeight;        }      } catch (      IllegalAccessException e) {        e.printStackTrace();      }    }    this.S=1.0F;    this.aK=this.yaw;    if (!this.world.isClientSide) {      this.k(0.2f);      if (bM()) {        if (V()) {          double d0=locY;          float f3=0.8F;          float f4=0.02F;          float f2=EnchantmentManager.b(this);          if (f2 > 3.0F) {            f2=3.0F;          }          if (f2 > 0.0F) {            f3+=(0.5460001F - f3) * f2 / 3.0F;            f4+=(bI() * 1.0F - f4) * f2 / 3.0F;          }          a(sideMot,forMot,f4);          move(motX,motY,motZ);          motX*=f3;          motY*=0.800000011920929D;          motZ*=f3;          motY-=0.02D;          if ((positionChanged) && (c(motX,motY + 0.6000000238418579D - locY + d0,motZ)))           motY=0.300000011920929D;        } else         if (ab()) {          double d0=locY;          a(sideMot,forMot,0.02F);          move(motX,motY,motZ);          motX*=0.5D;          motY*=0.5D;          motZ*=0.5D;          motY-=0.02D;          if ((positionChanged) && (c(motX,motY + 0.6000000238418579D - locY + d0,motZ)))           motY=0.300000011920929D;        } else {          float f5=world.getType(new BlockPosition(MathHelper.floor(locX),MathHelper.floor(getBoundingBox().b) - 1,MathHelper.floor(locZ))).getBlock().frictionFactor * 0.91F;          float f6=0.1627714F / (f5 * f5 * f5);          float f3=bI() * f6;          a(sideMot,forMot,f3);          f5=world.getType(new BlockPosition(MathHelper.floor(locX),MathHelper.floor(getBoundingBox().b) - 1,MathHelper.floor(locZ))).getBlock().frictionFactor * 0.91F;          if (k_()) {            float f4=0.15F;            motX=MathHelper.a(motX,-f4,f4);            motZ=MathHelper.a(motZ,-f4,f4);            fallDistance=0.0F;            if (motY < -0.15D) {              motY=-0.15D;            }            if (motY < 0.0D) {              motY=0.0D;            }          }          move(motX,motY,motZ);          if ((positionChanged) && (k_())) {            motY=0.2D;          }          if ((world.isClientSide) && ((!world.isLoaded(new BlockPosition((int)locX,0,(int)locZ))) || (!world.getChunkAtWorldCoords(new BlockPosition((int)locX,0,(int)locZ)).o()))) {            if (locY > 0.0D)             motY=-0.1D; else             motY=0.0D;          } else {            motY+=0D;          }          motY*=0.9800000190734863D;          motX*=f5;          motZ*=f5;        }      }      ay=az;      double d0=locX - lastX;      double d1=locZ - lastZ;      float f2=MathHelper.sqrt(d0 * d0 + d1 * d1) * 4.0F;      if (f2 > 1.0F) {        f2=1.0F;      }      az+=(f2 - az) * 0.4F;      aA+=az;      super.g(sideMot,forMot);    }    this.ay=this.az;    double d0=this.locX - this.lastX;    double d1=this.locZ - this.lastZ;    float f4=MathHelper.sqrt(d0 * d0 + d1 * d1) * 4.0F;    if (f4 > 1.0F) {      f4=1.0F;    }    this.az+=(f4 - this.az) * 0.4F;    this.aA+=this.az;  } else {    this.S=0.5F;    this.aK=0.02F;    super.g(sideMot,forMot);  }}  }
class C{  private byte[] packRules(){  byte[] rules=new byte[6];  rules[0]=(byte)startDay;  rules[1]=(byte)startDayOfWeek;  rules[2]=(byte)endDay;  rules[3]=(byte)endDayOfWeek;  rules[4]=(byte)startTimeMode;  rules[5]=(byte)endTimeMode;  return rules;}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  @NotNull static GitNewChangesCollector collect(@NotNull Project project,@NotNull Git git,@NotNull ChangeListManager changeListManager,@NotNull ProjectLevelVcsManager vcsManager,@NotNull AbstractVcs vcs,@NotNull VcsDirtyScope dirtyScope,@NotNull VirtualFile vcsRoot) throws VcsException {  return new GitNewChangesCollector(project,git,changeListManager,vcsManager,vcs,dirtyScope,vcsRoot);}  }
class C{  public boolean addAll(Collection<? extends E> c){  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacity(size + numNew);  System.arraycopy(a,0,elementData,size,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public static IndexType createScan(){  IndexType type=new IndexType();  type.scan=true;  return type;}  }
class C{  public Iterator<String> iterateSerializers(){  return serializers.iterator();}  }
class C{  protected void generateProxyExposedMethodSignature(SourcePrinter w,NameFactory nameFactory,JMethod method){  JType returnType=method.getReturnType().getErasedType();  w.print("public ");  w.print(returnType.getQualifiedSourceName());  w.print(" ");  w.print(method.getName() + EXPOSED_METHOD_SUFFIX + "(");  generateMethodParameters(w,nameFactory,method);  w.print(")");  generateMethodTrhowsClause(w,method);  w.println();}  }
class C{  public static void register(){  GameRegistry.registerItem(PartTransmitter,"PartTransmitter");  GameRegistry.registerItem(ElectricBow,"ElectricBow");  GameRegistry.registerItem(Dust,"Dust");  GameRegistry.registerItem(Ingot,"Ingot");  GameRegistry.registerItem(EnergyTablet,"EnergyTablet");  GameRegistry.registerItem(SpeedUpgrade,"SpeedUpgrade");  GameRegistry.registerItem(EnergyUpgrade,"EnergyUpgrade");  GameRegistry.registerItem(FilterUpgrade,"FilterUpgrade");  GameRegistry.registerItem(GasUpgrade,"GasUpgrade");  GameRegistry.registerItem(Robit,"Robit");  GameRegistry.registerItem(AtomicDisassembler,"AtomicDisassembler");  GameRegistry.registerItem(EnrichedAlloy,"EnrichedAlloy");  GameRegistry.registerItem(ReinforcedAlloy,"ReinforcedAlloy");  GameRegistry.registerItem(AtomicAlloy,"AtomicAlloy");  GameRegistry.registerItem(ItemProxy,"ItemProxy");  GameRegistry.registerItem(ControlCircuit,"ControlCircuit");  GameRegistry.registerItem(EnrichedIron,"EnrichedIron");  GameRegistry.registerItem(CompressedCarbon,"CompressedCarbon");  GameRegistry.registerItem(CompressedRedstone,"CompressedRedstone");  GameRegistry.registerItem(CompressedDiamond,"CompressedDiamond");  GameRegistry.registerItem(CompressedObsidian,"CompressedObsidian");  GameRegistry.registerItem(PortableTeleporter,"PortableTeleporter");  GameRegistry.registerItem(TeleportationCore,"TeleportationCore");  GameRegistry.registerItem(Clump,"Clump");  GameRegistry.registerItem(DirtyDust,"DirtyDust");  GameRegistry.registerItem(Configurator,"Configurator");  GameRegistry.registerItem(NetworkReader,"NetworkReader");  GameRegistry.registerItem(WalkieTalkie,"WalkieTalkie");  GameRegistry.registerItem(Jetpack,"Jetpack");  GameRegistry.registerItem(Dictionary,"Dictionary");  GameRegistry.registerItem(GasMask,"GasMask");  GameRegistry.registerItem(ScubaTank,"ScubaTank");  GameRegistry.registerItem(Balloon,"Balloon");  GameRegistry.registerItem(Shard,"Shard");  GameRegistry.registerItem(ElectrolyticCore,"ElectrolyticCore");  GameRegistry.registerItem(Sawdust,"Sawdust");  GameRegistry.registerItem(Salt,"Salt");  GameRegistry.registerItem(BrineBucket,"BrineBucket");  GameRegistry.registerItem(LithiumBucket,"LithiumBucket");  GameRegistry.registerItem(Crystal,"Crystal");  GameRegistry.registerItem(FreeRunners,"FreeRunners");  GameRegistry.registerItem(ArmoredJetpack,"ArmoredJetpack");  GameRegistry.registerItem(FilterCard,"FilterCard");  GameRegistry.registerItem(SeismicReader,"SeismicReader");  GameRegistry.registerItem(Substrate,"Substrate");  GameRegistry.registerItem(Polyethene,"Polyethene");  GameRegistry.registerItem(BioFuel,"BioFuel");  GameRegistry.registerItem(GlowPanel,"GlowPanel");  GameRegistry.registerItem(Flamethrower,"Flamethrower");  GameRegistry.registerItem(GaugeDropper,"GaugeDropper");  GameRegistry.registerItem(FactoryInstaller,"FactoryInstaller");  GameRegistry.registerItem(OtherDust,"OtherDust");  FluidContainerRegistry.registerFluidContainer(FluidRegistry.getFluid("brine"),new ItemStack(BrineBucket),FluidContainerRegistry.EMPTY_BUCKET);  FluidContainerRegistry.registerFluidContainer(FluidRegistry.getFluid("lithium"),new ItemStack(LithiumBucket),FluidContainerRegistry.EMPTY_BUCKET);  MinecraftForge.EVENT_BUS.register(GasMask);  MinecraftForge.EVENT_BUS.register(FreeRunners);}  }
class C{  public static ArrayList<String> matches(String text){  return matches(text,ALL);}  }
class C{  public static void showPicture(final Activity activity,Uri uri){  Intent intent=new Intent();  intent.setAction(android.content.Intent.ACTION_VIEW);  intent.setDataAndType(uri,"image/*");  activity.startActivity(intent);}  }
class C{  public static double[][] directProduct(double[][] ma,double[][] mb){  int arow=ma.length;  int brow=mb.length;  int acol=ma[0].length;  int bcol=mb[0].length;  double[][] product=new double[arow * brow][acol * bcol];  for (int i1=0; i1 < arow; i1++) {    for (int j1=0; j1 < acol; j1++) {      for (int i2=0; i2 < brow; i2++) {        for (int j2=0; j2 < bcol; j2++) {          int i=i1 * brow + i2;          int j=j1 * bcol + j2;          product[i][j]=ma[i1][j1] * mb[i2][j2];        }      }    }  }  return product;}  }
class C{  public static boolean shouldRun(String entry){  return Cron.shouldRun(entry,new Date());}  }
class C{  public int deleteIds(DatabaseConnection databaseConnection,Collection<ID> ids,ObjectCache objectCache) throws SQLException {  return MappedDeleteCollection.deleteIds(databaseType,tableInfo,databaseConnection,ids,objectCache);}  }
class C{  public CheckedCollection(Collection<E> c,Class<E> type){  if (c == null || type == null) {    throw new NullPointerException();  }  this.c=c;  this.type=type;}  }
class C{  @Override public boolean draw(Canvas canvas,RectF bounds){  if (super.draw(canvas,bounds)) {    return true;  }  drawArc(canvas);  drawArcEdgeDetail(canvas);  return true;}  }
class C{  public void createTransitSchedule(String transitRouteMode,boolean isBlocking,boolean awaitDeparture,double scheduleTravelTime_sec,double stopTime_sec){  Map<Id<TransitRoute>,List<Id<Link>>> routeID2linkIDs=getIDs(this.network,transitRouteMode);  Map<Id<TransitRoute>,List<TransitStopFacility>> routeId2transitStopFacilities=getStopLinkIDs(this.network,routeID2linkIDs,isBlocking);  Map<Id<TransitRoute>,NetworkRoute> routeId2networkRoute=getRouteId2NetworkRoute(routeID2linkIDs);  Map<Id<TransitRoute>,List<TransitRouteStop>> routeId2TransitRouteStops=getRouteId2TransitRouteStops(stopTime_sec,scheduleTravelTime_sec,awaitDeparture,network,routeId2transitStopFacilities);  setRouteId2TransitRoute(transitRouteMode,routeId2networkRoute,routeId2TransitRouteStops);  setTransitLine(this.routeId2transitRoute);  int lastStop=this.routeId2transitRoute.get(routeId1).getStops().size() - 1;  this.routeTravelTime=this.routeId2transitRoute.get(routeId1).getStops().get(lastStop).getArrivalOffset();  log.info("RouteTravelTime: " + Time.writeTime(routeTravelTime,Time.TIMEFORMAT_HHMMSS));}  }
class C{  public static int endsWithOneIgnoreCase(String src,String[] dest){  for (int i=0; i < dest.length; i++) {    String m=dest[i];    if (m == null) {      continue;    }    if (endsWithIgnoreCase(src,m)) {      return i;    }  }  return -1;}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  public void beginAccept2(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c");}  }
class C{  static String cleanString(String s){  return s.replaceAll("[^a-zA-Z ]","").toLowerCase();}  }
class C{  public UploadExample(UploadObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getContent() != null) {    criteria.andContentEqualTo(sample.getContent());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public void requestThrottleSetup(LocoAddress address,boolean control){  DCCppThrottle throttle;  if (log.isDebugEnabled()) {    log.debug("Requesting Throttle: " + address);  }  if (throttles.containsKey(address)) {    notifyThrottleKnown(throttles.get(address),address);  } else {    if (tc.getCommandStation().requestNewRegister(address.getNumber()) == DCCppConstants.NO_REGISTER_FREE) {      log.error("No Register available for Throttle. Address = {}",address);      return;    }    throttle=new DCCppThrottle((DCCppSystemConnectionMemo)adapterMemo,address,tc);    throttles.put(address,throttle);    notifyThrottleKnown(throttle,address);  }}  }
class C{  static void recordStartedBy(String packageName,Intent intent){  if (intent == null) {    recordStartedBy(DocumentMetricIds.STARTED_BY_UNKNOWN);    return;  }  int intentSource=DocumentMetricIds.STARTED_BY_UNKNOWN;  IntentHandler.ExternalAppId appId=IntentHandler.determineExternalIntentSource(packageName,intent);  if (intent.hasExtra(IntentHandler.EXTRA_STARTED_BY)) {    intentSource=IntentUtils.safeGetIntExtra(intent,IntentHandler.EXTRA_STARTED_BY,DocumentMetricIds.STARTED_BY_UNKNOWN);  } else   if (IntentUtils.safeGetBooleanExtra(intent,ShortcutHelper.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB,false)) {    intentSource=DocumentMetricIds.STARTED_BY_LAUNCHER;  } else   if (IntentUtils.safeGetBooleanExtra(intent,IntentHandler.EXTRA_APPEND_TASK,false)) {    intentSource=DocumentMetricIds.STARTED_BY_SEARCH_RESULT_PAGE;  } else   if (IntentUtils.safeGetBooleanExtra(intent,IntentHandler.EXTRA_PRESERVE_TASK,false)) {    intentSource=DocumentMetricIds.STARTED_BY_SEARCH_SUGGESTION_EXTERNAL;  } else   if (appId == IntentHandler.ExternalAppId.GMAIL) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_GMAIL;  } else   if (appId == IntentHandler.ExternalAppId.FACEBOOK) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_FACEBOOK;  } else   if (appId == IntentHandler.ExternalAppId.PLUS) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_PLUS;  } else   if (appId == IntentHandler.ExternalAppId.TWITTER) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_TWITTER;  } else   if (appId == IntentHandler.ExternalAppId.CHROME) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_CHROME;  } else   if (appId == IntentHandler.ExternalAppId.HANGOUTS) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_HANGOUTS;  } else   if (appId == IntentHandler.ExternalAppId.MESSENGER) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_MESSENGER;  } else   if (appId == IntentHandler.ExternalAppId.NEWS) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_NEWS;  } else   if (appId == IntentHandler.ExternalAppId.LINE) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_LINE;  } else   if (appId == IntentHandler.ExternalAppId.WHATSAPP) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_WHATSAPP;  } else   if (appId == IntentHandler.ExternalAppId.GSA) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_GSA;  } else   if (appId == IntentHandler.ExternalAppId.OTHER) {    intentSource=DocumentMetricIds.STARTED_BY_EXTERNAL_APP_OTHER;  }  if (intentSource == DocumentMetricIds.STARTED_BY_UNKNOWN) {    android.util.Log.d("DocumentUma","Unknown source detected");  }  if (intentSource >= DocumentMetricIds.STARTED_BY_EXTERNAL_APP_GMAIL && intentSource < DocumentMetricIds.STARTED_BY_CONTEXTUAL_SEARCH) {    RecordHistogram.recordEnumeratedHistogram("MobileIntent.PageLoadDueToExternalApp",appId.ordinal(),IntentHandler.ExternalAppId.INDEX_BOUNDARY.ordinal());  }  recordStartedBy(intentSource);}  }
class C{  static List<GeoPoint> filterPoints(final List<? extends GeoPoint> input){  final List<GeoPoint> noIdenticalPoints=new ArrayList<>(input.size());  int startIndex=-1;  final GeoPoint comparePoint=input.get(0);  for (int i=0; i < input.size() - 1; i++) {    final GeoPoint thePoint=input.get(getLegalIndex(-i - 1,input.size()));    if (!thePoint.isNumericallyIdentical(comparePoint)) {      startIndex=getLegalIndex(-i,input.size());      break;    }  }  if (startIndex == -1) {    return null;  }  int currentIndex=startIndex;  while (true) {    final GeoPoint currentPoint=input.get(currentIndex);    noIdenticalPoints.add(currentPoint);    while (true) {      currentIndex=getLegalIndex(currentIndex + 1,input.size());      if (currentIndex == startIndex) {        break;      }      final GeoPoint nextNonIdenticalPoint=input.get(currentIndex);      if (!nextNonIdenticalPoint.isNumericallyIdentical(currentPoint)) {        break;      }    }    if (currentIndex == startIndex) {      break;    }  }  if (noIdenticalPoints.size() < 3) {    return null;  }  return noIdenticalPoints;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result;  Instance instOld;  Instance instNew;  int i;  int n;  double[] values;  int numAttNew;  int numAttOld;  if (!isFirstBatchDone()) {    computeThresholds(instances);  }  result=getOutputFormat();  numAttOld=instances.numAttributes();  numAttNew=result.numAttributes();  for (n=0; n < instances.numInstances(); n++) {    instOld=instances.instance(n);    values=new double[numAttNew];    System.arraycopy(instOld.toDoubleArray(),0,values,0,numAttOld);    instNew=new DenseInstance(1.0,values);    instNew.setDataset(result);    if (!getDetectionPerAttribute()) {      if (isOutlier(instOld)) {        instNew.setValue(m_OutlierAttributePosition[0],1);      }      if (isExtremeValue(instOld)) {        instNew.setValue(m_OutlierAttributePosition[0] + 1,1);        if (getExtremeValuesAsOutliers()) {          instNew.setValue(m_OutlierAttributePosition[0],1);        }      }    } else {      for (i=0; i < m_AttributeIndices.length; i++) {        if (m_AttributeIndices[i] == NON_NUMERIC) {          continue;        }        if (isOutlier(instOld,m_AttributeIndices[i])) {          instNew.setValue(m_OutlierAttributePosition[i],1);        }        if (isExtremeValue(instOld,m_AttributeIndices[i])) {          instNew.setValue(m_OutlierAttributePosition[i] + 1,1);          if (getExtremeValuesAsOutliers()) {            instNew.setValue(m_OutlierAttributePosition[i],1);          }        }        if (getOutputOffsetMultiplier()) {          instNew.setValue(m_OutlierAttributePosition[i] + 2,calculateMultiplier(instOld,m_AttributeIndices[i]));        }      }    }    copyValues(instNew,false,instOld.dataset(),getOutputFormat());    result.add(instNew);  }  return result;}  }
class C{  public static BinaryHeapInputStream create(byte[] data,int pos){  assert pos < data.length;  BinaryHeapInputStream stream=new BinaryHeapInputStream(data);  stream.pos=pos;  return stream;}  }
class C{  public SetSubtitle(int playerId,int subtitle,boolean enable){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("subtitle",subtitle);  addParameterToRequest("enable",enable);}  }
class C{  private void addSymbolsDeclaredLater(HashSet<String> prevDeclared,NodeRepresentation nodeRepArg,boolean includeGoal){  NodeRepresentation assumpRepNode=nodeRepArg;  while (assumpRepNode.parentNode != null) {    assumpRepNode=assumpRepNode.parentNode;  }  int idx=0;  while ((idx < this.assumeReps.size()) && (this.assumeReps.elementAt(idx) != assumpRepNode)) {    idx++;  }  if (idx == this.assumeReps.size()) {    return;  }  for (int i=idx + 1; i < assumeReps.size(); i++) {    NodeRepresentation anode=assumeReps.elementAt(i);    if (anode.nodeType == NodeRepresentation.NEW_NODE) {      prevDeclared.add(anode.newId);    }  }  if (includeGoal) {    FormalParamNode[] goalIdents=ResourceHelper.getBoundIdentifiers((ExprNode)this.goalRep.semanticNode);    for (int i=0; i < goalIdents.length; i++) {      prevDeclared.add(goalIdents[i].getName().toString());    }  }}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle a=(Rectangle)allocation;  painter.paint(g,a.x,a.y,a.width,a.height,this);  super.paint(g,a);}  }
class C{  private String validateInputs(){  String pomPath=pathEntry.getText();  if (Strings.isNullOrEmpty(pomPath)) {    return "GraphML file cannot be empty";  }  File pathFile=new File(pomPath);  if (!pathFile.exists()) {    return "GraphML file doesn't exist";  }  return null;}  }
class C{  public static Map<String,String> mergeProps(Map<String,String> defaultProps,Map<String,String> overrideProps){  Map<String,String> mergedProps=new HashMap<String,String>(defaultProps);  for (  Map.Entry<String,String> entry : overrideProps.entrySet()) {    mergedProps.put(entry.getKey(),entry.getValue());  }  return mergedProps;}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  Color color=getColor();  if (color == null) {    g.setColor(c.getSelectionColor());  } else {    g.setColor(color);  }  boolean firstIsDot=false;  boolean secondIsDot=false;  if (c.isEditable()) {    int dot=c.getCaretPosition();    firstIsDot=(offs0 == dot);    secondIsDot=(offs1 == dot);  }  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    Rectangle alloc;    if (bounds instanceof Rectangle) {      alloc=(Rectangle)bounds;    } else {      alloc=bounds.getBounds();    }    if (firstIsDot && alloc.width > 0) {      g.fillRect(alloc.x + 1,alloc.y,alloc.width - 1,alloc.height);    } else     if (secondIsDot && alloc.width > 0) {      g.fillRect(alloc.x,alloc.y,alloc.width - 1,alloc.height);    } else {      g.fillRect(alloc.x,alloc.y,alloc.width,alloc.height);    }    return alloc;  } else {    try {      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);      Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();      if (firstIsDot && r.width > 0) {        g.fillRect(r.x + 1,r.y,r.width - 1,r.height);      } else       if (secondIsDot && r.width > 0) {        g.fillRect(r.x,r.y,r.width - 1,r.height);      } else {        g.fillRect(r.x,r.y,r.width,r.height);      }      return r;    } catch (    BadLocationException e) {    }  }  return null;}  }
class C{  public void loadLayoutBlocks(Element layoutblocks){  LayoutBlockManager tm=InstanceManager.getDefault(LayoutBlockManager.class);  if (layoutblocks.getAttribute("blockrouting") != null) {    if (layoutblocks.getAttribute("blockrouting").getValue().equals("yes")) {      tm.enableAdvancedRouting(true);    }  }  if (layoutblocks.getAttribute("routingStablisedSensor") != null) {    try {      tm.setStabilisedSensor(layoutblocks.getAttribute("routingStablisedSensor").getValue());    } catch (    jmri.JmriException e) {    }  }  List<Element> layoutblockList=layoutblocks.getChildren("layoutblock");  if (log.isDebugEnabled()) {    log.debug("Found " + layoutblockList.size() + " layoutblocks");  }  for (int i=0; i < layoutblockList.size(); i++) {    String sysName=getSystemName(layoutblockList.get(i));    if (sysName == null) {      log.warn("unexpected null in systemName " + ((layoutblockList.get(i))) + " "+ ((layoutblockList.get(i))).getAttributes());      break;    }    String userName=getUserName(layoutblockList.get(i));    LayoutBlock b=tm.createNewLayoutBlock(sysName,userName);    loadCommon(b,layoutblockList.get(i));    if (b != null) {      Color color=ColorUtil.stringToColor(((layoutblockList.get(i))).getAttribute("trackcolor").getValue());      b.setBlockTrackColor(color);      color=ColorUtil.stringToColor(((layoutblockList.get(i))).getAttribute("occupiedcolor").getValue());      b.setBlockOccupiedColor(color);      Attribute a=((layoutblockList.get(i))).getAttribute("extracolor");      if (a != null) {        b.setBlockExtraColor(ColorUtil.stringToColor(a.getValue()));      }      a=((layoutblockList.get(i))).getAttribute("occupancysensor");      if (a != null) {        b.setOccupancySensorName(a.getValue());      }      a=((layoutblockList.get(i))).getAttribute("memory");      if (a != null) {        b.setMemoryName(a.getValue());      }      a=((layoutblockList.get(i))).getAttribute("occupancysensorsense");      int sense=Sensor.ACTIVE;      try {        sense=((layoutblockList.get(i))).getAttribute("occupiedsense").getIntValue();      } catch (      org.jdom2.DataConversionException e) {        log.error("failed to convert occupiedsense attribute");      }      b.setOccupiedSense(sense);      if (((layoutblockList.get(i))).getChild("metric") != null) {        String stMetric=((layoutblockList.get(i))).getChild("metric").getText();        try {          b.setBlockMetric(Integer.valueOf(stMetric));        } catch (        java.lang.NumberFormatException e) {          log.error("failed to convert metric attribute for block " + b.getDisplayName());        }      }    }  }}  }
class C{  public static String convertSourceCodeIntoUtf8(RecordingInputStream recis,String charset) throws IOException {  ByteArrayOutputStream baos=null;  try {    if (!charset.equalsIgnoreCase(DEFAULT_CHARSET)) {      Charset utf8charset=Charset.forName(DEFAULT_CHARSET);      Charset incomingCharset=Charset.forName(charset);      baos=new ByteArrayOutputStream();      recis.getReplayInputStream().readContentTo(baos);      ByteBuffer inputBuffer=ByteBuffer.wrap(baos.toByteArray());      CharBuffer data=incomingCharset.decode(inputBuffer);      ByteBuffer outputBuffer=utf8charset.encode(data);      byte[] outputData=outputBuffer.array();      String source=new String(outputData);      return source;    } else {      baos=new ByteArrayOutputStream();      recis.getReplayInputStream().readContentTo(baos);      String source=baos.toString(charset);      return source;    }  }  finally {    IOUtils.closeQuietly(recis);    if (baos != null) {      IOUtils.closeQuietly(baos);    }  }}  }
class C{  public void addCladeSiteModel(SiteModel siteModel,TaxonList taxonList,boolean includeStem) throws Tree.MissingTaxonException {  Logger.getLogger("dr.evomodel").info("SiteModel added for clade.");  cladeSiteModels.add(new Clade(siteModel,taxonList,includeStem));  addModel(siteModel);  commonAncestorsKnown=true;}  }
class C{  protected void rotateRight(BalancedBinaryNode<K,V> p){  BalancedBinaryNode<K,V> l=p.left;  p.left=l.right;  if (l.right != null)   l.right.parent=p;  l.parent=p.parent;  if (p.parent == null)   root=l; else   if (p.parent.right == p)   p.parent.right=l; else   p.parent.left=l;  l.right=p;  p.parent=l;}  }
class C{  public void parse(Node node) throws SAXException {  contentHandler.setDocumentLocator(this);  Node current=node;  Node next;  for (; ; ) {    current.visit(this);    if ((next=current.getFirstChild()) != null) {      current=next;      continue;    }    for (; ; ) {      current.revisit(this);      if (current == node) {        return;      }      if ((next=current.getNextSibling()) != null) {        current=next;        break;      }      current=current.getParentNode();    }  }}  }
class C{  private static Result showDialog(Stage owner,MessageType type,String msg,boolean applyToAll){  MessageBox dlg=new MessageBox(owner,type,msg,applyToAll);  dlg.showModal();  return dlg.res;}  }
class C{  public PacketMOUSE(int x,int y){  super(PT_MOUSE);  byte flags=0;  flags|=MS_ABSOLUTE;  appendPayload(flags);  appendPayload((short)x);  appendPayload((short)y);}  }
class C{  @Override public void onComplete(Void result){  assert activeStreams.size() == 0;  closeFuture.set(null);}  }
class C{  default String name(){  return getClass().getSimpleName();}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  return map;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  LambdaFormBuffer replaceParameterByCopy(int pos,int valuePos){  assert (pos != valuePos);  replaceName(pos,names[valuePos]);  noteDuplicate(pos,valuePos);  return this;}  }
class C{  public void startWatching(String fileName){synchronized (mObservedChildren) {    if (!mObservedChildren.containsKey(fileName)) {      mObservedChildren.put(fileName,Boolean.valueOf(false));    }  }  if (new File(mPath).exists()) {    startWatching();    Log_OC.d(TAG,"Started watching parent folder " + mPath + "/");  }}  }
class C{  String modifyToolTipText(String start,VariableValue variable){  log.trace("modifyToolTipText: {}",variable.label());  start=addCvDescription(start,variable.getCvDescription(),variable.getMask());  if (_cvModel.getProgrammer() != null && !_cvModel.getProgrammer().getCanRead()) {    start=addTextHTMLaware(start," (Hardware cannot read)");  }  if (_cvModel.getProgrammer() != null && !_cvModel.getProgrammer().getCanWrite()) {    start=addTextHTMLaware(start," (Hardware cannot write)");  }  if (variable.getReadOnly()) {    start=addTextHTMLaware(start," (Defined to be read only)");  }  if (variable.getWriteOnly()) {    start=addTextHTMLaware(start," (Defined to be write only)");  }  return start;}  }
class C{  public void toggleSelection(int position){  if (selectedItems.get(position,false)) {    selectedItems.delete(position);  } else {    selectedItems.put(position,true);  }  notifyItemChanged(position);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void validateStoragePolicyCreateRequest(StoragePolicyCreateRequest request){  Assert.notNull(request,"A storage policy create request must be specified.");  storagePolicyHelper.validateStoragePolicyKey(request.getStoragePolicyKey());  validateStoragePolicyRule(request.getStoragePolicyRule());  validateStoragePolicyFilter(request.getStoragePolicyFilter());  validateStoragePolicyTransition(request.getStoragePolicyTransition());  Assert.hasText(request.getStatus(),"A storage policy status must be specified.");  request.setStatus(request.getStatus().trim());}  }
class C{  private void validatePortals(){  for (  final IRPZone zone : this) {    for (    final Portal portal : ((StendhalRPZone)zone).getPortals()) {      validatePortal(portal);    }  }}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  if (node instanceof TextLayoutFormatNode) {    if (FXG_LINKACTIVEFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkActiveFormat == null) {        linkActiveFormat=(TextLayoutFormatNode)node;        linkActiveFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkActiveFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKHOVERFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkHoverFormat == null) {        linkHoverFormat=(TextLayoutFormatNode)node;        linkHoverFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkHoverFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKNORMALFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkNormalFormat == null) {        linkNormalFormat=(TextLayoutFormatNode)node;        linkNormalFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkNormalFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownLinkFormat",propertyName);    }  } else {    super.addTextProperty(propertyName,node);  }}  }
class C{  private void updateAction(){  int numSelected=networkPanel.getSelectedModelElements().size();  if (numSelected > 0) {    setEnabled(true);  } else {    setEnabled(false);  }}  }
class C{  public ErrorMessage(ErrorMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }  if (other.isSetType()) {    this.type=other.type;  }}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES);}  }
class C{  @Override public Lesson findById(Long lessonId){  Lesson lesson=this.lessonRepository.findById(lessonId).orElseThrow(null);  return lesson;}  }
class C{  private static Sync.Type type(Sync<? extends Synced> sync){  if (sync.object instanceof Review) {    return REVIEW;  } else   if (sync.object instanceof User) {    return USER;  } else   if (sync.object instanceof Restaurant) {    return RESTAURANT;  }  return null;}  }
class C{  public BrowserRows(BrowseTable table){  this.table=table;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier(DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT);  return;case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime(DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void testReplaceValuesRandomAccess(){  Multimap<String,Integer> multimap=create();  multimap.put("foo",1);  multimap.put("foo",3);  assertTrue(multimap.replaceValues("foo",Arrays.asList(2,4)) instanceof RandomAccess);  assertTrue(multimap.replaceValues("bar",Arrays.asList(2,4)) instanceof RandomAccess);}  }
class C{  public static boolean isDtoWith(Method method){  if (method.isAnnotationPresent(DelegateTo.class)) {    return false;  }  String methodName=method.getName();  return methodName.startsWith("with") && method.getParameterTypes().length == 1;}  }
class C{  private static FitnessAndQuality fitnessAndQualityParsed(String mimeType,Collection<ParseResults> parsedRanges){  int bestFitness=-1;  float bestFitQ=0;  ParseResults target=parseMediaRange(mimeType);  for (  ParseResults range : parsedRanges) {    if ((target.type.equals(range.type) || range.type.equals("*") || target.type.equals("*")) && (target.subType.equals(range.subType) || range.subType.equals("*") || target.subType.equals("*"))) {      for (      String k : target.params.keySet()) {        int paramMatches=0;        if (!k.equals("q") && range.params.containsKey(k) && target.params.get(k).equals(range.params.get(k))) {          paramMatches++;        }        int fitness=(range.type.equals(target.type)) ? 100 : 0;        fitness+=(range.subType.equals(target.subType)) ? 10 : 0;        fitness+=paramMatches;        if (fitness > bestFitness) {          bestFitness=fitness;          bestFitQ=toFloat(range.params.get("q"),0);        }      }    }  }  return new FitnessAndQuality(bestFitness,bestFitQ);}  }
class C{  public static char[] toPrimitive(final Character[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  final char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].charValue();  }  return result;}  }
class C{  @Override public ImmutableSetMultimap<K,V> build(){  if (keyComparator != null) {    Multimap<K,V> sortedCopy=MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K,V>build();    List<Map.Entry<K,Collection<V>>> entries=Ordering.from(keyComparator).<K>onKeys().immutableSortedCopy(builderMultimap.asMap().entrySet());    for (    Map.Entry<K,Collection<V>> entry : entries) {      sortedCopy.putAll(entry.getKey(),entry.getValue());    }    builderMultimap=sortedCopy;  }  return copyOf(builderMultimap,valueComparator);}  }
class C{  private String readLine() throws IOException {  String line=null;  int newLineMatchByteCount;  boolean isLastFilePart=no == 1;  int i=currentLastBytePos;  while (i > -1) {    if (!isLastFilePart && i < avoidNewlineSplitBufferSize) {      createLeftOver();      break;    }    if ((newLineMatchByteCount=getNewLineMatchByteCount(data,i)) > 0) {      final int lineStart=i + 1;      int lineLengthBytes=currentLastBytePos - lineStart + 1;      if (lineLengthBytes < 0) {        throw new IllegalStateException("Unexpected negative line length=" + lineLengthBytes);      }      byte[] lineData=new byte[lineLengthBytes];      System.arraycopy(data,lineStart,lineData,0,lineLengthBytes);      line=new String(lineData,encoding);      currentLastBytePos=i - newLineMatchByteCount;      break;    }    i-=byteDecrement;    if (i < 0) {      createLeftOver();      break;    }  }  if (isLastFilePart && leftOver != null) {    line=new String(leftOver,encoding);    leftOver=null;  }  return line;}  }
class C{  public void preSuggest(){  currentMetric.inc();}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public static void main(String[] args){  TestRunner.run(InvocableEndpointTest.class);}  }
class C{  @Override public void addBatch(String sql) throws SQLException {  try {    debugCodeCall("addBatch",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static void splitAdd(final double a[],final double b[],final double ans[]){  ans[0]=a[0] + b[0];  ans[1]=a[1] + b[1];  resplit(ans);}  }
class C{  protected static void printUsage(){  System.out.println("Generate the control flow graph of a Java method, represented as a DOT graph.");  System.out.println("Parameters: <inputfile> <outputdir> [-method <name>] [-class <name>] [-pdf]");  System.out.println("    -pdf:    Also generate the PDF by invoking 'dot'.");  System.out.println("    -method: The method to generate the CFG for (defaults to 'test').");  System.out.println("    -class:  The class in which to find the method (defaults to 'Test').");}  }
class C{  public void removeOnNavigationPositionListener(){  this.navigationPositionListener=null;}  }
class C{  public final void testMinLengthWithContextParameter(){  assertNotNull(Validators.minLength(getContext(),1));}  }
class C{  public T image(String url,boolean memCache,boolean fileCache){  return image(url,memCache,fileCache,0,0);}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet origExampleSet,Attribute predictedLabel) throws OperatorException {  if (predictedLabel.isNominal()) {    final String attributePrefix="BaggingModelPrediction";    final int numLabels=predictedLabel.getMapping().size();    final Attribute[] specialAttributes=new Attribute[numLabels];    for (int i=0; i < numLabels; i++) {      specialAttributes[i]=com.rapidminer.example.Tools.createSpecialAttribute(origExampleSet,attributePrefix + i,Ontology.NUMERICAL);    }    Iterator<Example> reader=origExampleSet.iterator();    while (reader.hasNext()) {      Example example=reader.next();      for (int i=0; i < specialAttributes.length; i++) {        example.setValue(specialAttributes[i],0);      }    }    reader=origExampleSet.iterator();    for (int modelNr=0; modelNr < this.getNumberOfModels(); modelNr++) {      Model model=this.getModel(modelNr);      ExampleSet exampleSet=(ExampleSet)origExampleSet.clone();      exampleSet=model.apply(exampleSet);      updateEstimates(exampleSet,modelNr,specialAttributes);      PredictionModel.removePredictedLabel(exampleSet);    }    this.evaluateSpecialAttributes(origExampleSet,specialAttributes);    for (int i=0; i < numLabels; i++) {      origExampleSet.getAttributes().remove(specialAttributes[i]);      origExampleSet.getExampleTable().removeAttribute(specialAttributes[i]);    }    return origExampleSet;  } else {    double[] predictionSums=new double[origExampleSet.size()];    for (    Model model : models) {      ExampleSet resultSet=model.apply((ExampleSet)origExampleSet.clone());      int index=0;      Attribute innerPredictedLabel=resultSet.getAttributes().getPredictedLabel();      for (      Example example : resultSet) {        predictionSums[index++]+=example.getValue(innerPredictedLabel);      }      PredictionModel.removePredictedLabel(resultSet);    }    int index=0;    for (    Example example : origExampleSet) {      example.setValue(predictedLabel,predictionSums[index++] / models.size());    }    return origExampleSet;  }}  }
class C{  public State(PlotRenderingInfo info){  super(info);  this.lowerCoordinates=new java.util.ArrayList();  this.upperCoordinates=new java.util.ArrayList();}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  private final void createUsageVariables() throws AdeException {  String dataObjectName=getAnalysisGroup() + "." + getName()+ ".m_prevIntervalTimelineMap";  Object tmp=Ade.getAde().getDataStore().models().getModelDataObject(dataObjectName);  instantiateTimelineAndAlreadySeen(dataObjectName,tmp);  dataObjectName=getAnalysisGroup() + "." + getName()+ ".m_alreadySeen";  tmp=Ade.getAde().getDataStore().models().getModelDataObject(dataObjectName);  instantiateTimelineAndAlreadySeen(dataObjectName,tmp);  if (m_dataTypeFactory == null) {    try {      m_dataTypeFactory=DatatypeFactory.newInstance();    } catch (    DatatypeConfigurationException e) {      throw new AdeInternalException("Failed to instantiate data factory for calendar",e);    }  }  if (m_gc == null) {    final TimeZone outputTimeZone=Ade.getAde().getConfigProperties().getOutputTimeZone();    m_gc=new GregorianCalendar(outputTimeZone);  }}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();switch (resType) {case CUresourcetype.CU_RESOURCE_TYPE_ARRAY:    sb.append("hArray=" + array_hArray + f);  break;case CUresourcetype.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:sb.append("hMipmappedArray=" + mipmap_hMipmappedArray + f);break;case CUresourcetype.CU_RESOURCE_TYPE_LINEAR:sb.append("devPtr=" + linear_devPtr + f);sb.append("format=" + CUarray_format.stringFor(linear_format) + f);sb.append("numChannels=" + linear_numChannels + f);sb.append("sizeInBytes=" + linear_sizeInBytes + f);break;case CUresourcetype.CU_RESOURCE_TYPE_PITCH2D:sb.append("devPtr=" + pitch2D_devPtr + f);sb.append("format=" + CUarray_format.stringFor(pitch2D_format) + f);sb.append("numChannels=" + pitch2D_numChannels + f);sb.append("width=" + pitch2D_width + f);sb.append("height=" + pitch2D_height + f);sb.append("pitchInBytes=" + pitch2D_pitchInBytes + f);break;default :sb.append("INVALID");}return sb.toString();}  }
class C{  public ShapeRenderer(){}  }
class C{  public CAMatrix drawBoxAt(int x,int y,int w,int state){  for (int i=y - w / 2; i < y + w / 2; i++) {    for (int j=x - w / 2; j < x + w / 2; j++) {      if (j >= 0 && j < width && i >= 0 && i < height) {        int idx=j + i * width;        swap[idx]=matrix[idx]=state;      }    }  }  return this;}  }
class C{  public boolean isWorkerThreadNameSupported(){  return workerThreadNameSupported;}  }
class C{  public boolean isValid(List<S2Point> vertices){  int n=vertices.size();  for (int i=0; i < n; ++i) {    if (!S2.isUnitLength(vertices.get(i))) {      log.info("Vertex " + i + " is not unit length");      return false;    }  }  for (int i=1; i < n; ++i) {    if (vertices.get(i - 1).equals(vertices.get(i)) || vertices.get(i - 1).equals(S2Point.neg(vertices.get(i)))) {      log.info("Vertices " + (i - 1) + " and "+ i+ " are identical or antipodal");      return false;    }  }  return true;}  }
class C{  public float readFloat(){  return scanner.nextFloat();}  }
class C{  public void mouseEntered(MouseEvent e){  ((MouseListener)a).mouseEntered(e);  ((MouseListener)b).mouseEntered(e);}  }
class C{  public final void applyForceToCenter(Vec2 force){  if (m_type != BodyType.DYNAMIC) {    return;  }  if (isAwake() == false) {    setAwake(true);  }  m_force.x+=force.x;  m_force.y+=force.y;}  }
class C{  public static <T>boolean equals(final Collection<T> c1,final Collection<T> c2){  if (c1 == null || c2 == null) {    return c1 == c2;  }  if (c1.size() != c2.size()) {    return false;  }  if (c1 == c2) {    return true;  }  if (!c1.containsAll(c2)) {    return false;  }  return c2.containsAll(c1);}  }
class C{  public static double intersectRayLine(Vector2dc origin,Vector2dc dir,Vector2dc point,Vector2dc normal,double epsilon){  return intersectRayLine(origin.x(),origin.y(),dir.x(),dir.y(),point.x(),point.y(),normal.x(),normal.y(),epsilon);}  }
class C{  @Interruptible public static void fullyBootedVM(){  Selected.Plan.get().fullyBooted();}  }
class C{  public DoubleMatrix1D like1D(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  private void readDefinition(InH3Amp inAmp){  int id=(int)readUnsigned();  String name=readString();  int type=(int)readUnsigned();  int fields=(int)readUnsigned();  FieldInfoH3[] fieldInfo=new FieldInfoH3[fields];  for (int i=0; i < fields; i++) {    fieldInfo[i]=readFieldInfo();  }  ClassInfoH3 info=new ClassInfoH3(name,fieldInfo);  inAmp.define(id,info);}  }
class C{  void scramble(){  initialSize=getSize();  int a[]=new int[initialSize.height / 2];  double f=initialSize.width / (double)a.length;  for (int i=a.length; --i >= 0; ) {    a[i]=(int)(i * f);  }  for (int i=a.length; --i >= 0; ) {    int j=(int)(i * Math.random());    int t=a[i];    a[i]=a[j];    a[j]=t;  }  arr=a;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<CDDRawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  Map<String,RawProtein<CDDRawMatch>> proteinIdToRawProteinMap=new HashMap<String,RawProtein<CDDRawMatch>>(rawMatches.size());  if (rawMatches.size() == 0) {    Long sequenceCout=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    Utilities.verboseLog(10,"Zero matches found: on " + sequenceCout + " proteins stepinstance:"+ stepInstance.toString());    int waitTimeFactor=2;    if (!Utilities.isRunningInSingleSeqMode()) {      waitTimeFactor=Utilities.getWaitTimeFactorLogE(10 * sequenceCout.intValue()).intValue();    }    Utilities.sleep(waitTimeFactor * 1000);    rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);    Utilities.verboseLog(10,"matches after : " + rawMatches.size());  }  int matchCount=0;  for (  final RawProtein rawProtein : rawMatches) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," CDD: Retrieved " + rawMatches.size() + " proteins to post-process."+ " A total of "+ matchCount+ " raw matches.");  for (  RawProtein<CDDRawMatch> rawMatch : rawMatches) {    proteinIdToRawProteinMap.put(rawMatch.getProteinIdentifier(),rawMatch);  }  Map<String,RawProtein<CDDRawMatch>> filteredMatches=postProcessor.process(proteinIdToRawProteinMap);  filteredMatchDAO.persist(filteredMatches.values());  matchCount=0;  for (  final RawProtein rawProtein : filteredMatches.values()) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," CDD: " + filteredMatches.size() + " proteins passed through post processing."+ " and a total of "+ matchCount+ " matches PASSED.");  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("CDD: " + filteredMatches.size() + " proteins passed through post processing.");    LOGGER.debug("CDD: A total of " + matchCount + " matches PASSED.");  }}  }
class C{  public Provider<WorkingSetManagerBrokerImpl> provideWorkingSetManagerBrokerImpl(){  return Access.contributedProvider(WorkingSetManagerBrokerImpl.class);}  }
class C{  private void populate(ParameterTable matrix,ParameterList signature,int index){  ParameterList column=table.get(index);  int width=signature.size();  int height=column.size();  for (int i=0; i < height; i++) {    for (int j=0; j < width; j++) {      ParameterList list=matrix.get(j);      Parameter parameter=signature.get(j);      list.add(parameter);    }    ParameterList list=matrix.get(index);    Parameter parameter=column.get(i);    list.add(parameter);  }}  }
class C{  @NotNull @ObjectiveCName("findUsersCommandWithQuery:") public Command<UserVM[]> findUsers(String query){  return null;}  }
class C{  public static int executeUpdate(String sql,boolean ignoreError,String trxName,int timeOut){  return executeUpdate(sql,null,ignoreError,trxName,timeOut);}  }
class C{  private static void waitUntilTreeItemHasItem(SWTBot bot,final SWTBotTreeItem tree,final String nodeText){  if (!waitUntilTreeHasItemImpl(bot,tree.widget,nodeText)) {    bot.sleep(1000);    tree.doubleClick();    bot.waitUntil(new TreeCollapsedCondition(tree.widget));    bot.sleep(1000);    tree.expand();    bot.waitUntil(new TreeExpandedCondition(tree.widget));    if (!waitUntilTreeHasItemImpl(bot,tree.widget,nodeText)) {      printTree(tree.widget);      throw new TimeoutException(String.format("Timed out waiting for %s, giving up...",nodeText));    }  }}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public String minNumTipText(){  return "The minimum total weight of the instances in a leaf.";}  }
class C{  public void copyFrom(ReturnPathType other){  this.type=other.type;}  }
class C{  public synchronized List<Vertex> findAllQuery(String jpql){  return findAllQuery(jpql,1000);}  }
class C{  public static HttpServletRequest buildMockHttpServletRequestObject(SignableSAMLObject samlObject,boolean doCompress,String relayStateParameter,String sigAlg,String signature,StringBuffer sbRequestUrl) throws MarshallingException, IOException {  logger.info("buildMockHttpServletRequestObject. ");  HttpServletRequest request=createMock(HttpServletRequest.class);  if (samlObject instanceof LogoutResponse || samlObject instanceof Response) {    expect(request.getParameter(SamlUtils.SAML_RESPONSE_PARAMETER)).andReturn(SamlUtils.encodeSAMLObject(samlObject,doCompress)).anyTimes();    expect(request.getParameter(SamlUtils.SAML_REQUEST_PARAMETER)).andReturn(null).anyTimes();  } else   if (samlObject instanceof LogoutRequest) {    expect(request.getParameter(SamlUtils.SAML_REQUEST_PARAMETER)).andReturn(SamlUtils.encodeSAMLObject(samlObject,doCompress)).anyTimes();    expect(request.getParameter(SamlUtils.SAML_RESPONSE_PARAMETER)).andReturn(null).anyTimes();  } else {    throw new IllegalArgumentException();  }  expect(request.getParameter(SamlUtils.RELAY_STATE_PARAMETER)).andReturn(relayStateParameter).anyTimes();  expect(request.getParameter(SamlUtils.SIGNATURE_ALGORITHM_PARAMETER)).andReturn(sigAlg).anyTimes();  expect(request.getParameter(SamlUtils.SIGNATURE_PARAMETER)).andReturn(signature).anyTimes();  expect(request.getRequestURL()).andReturn(sbRequestUrl).anyTimes();  String queryString=null;  if (samlObject instanceof LogoutResponse || samlObject instanceof Response) {    queryString=SamlUtils.SAML_RESPONSE_PARAMETER + "=" + SamlUtils.encodeSAMLObject(samlObject,doCompress);  } else   if (samlObject instanceof LogoutRequest) {    queryString=SamlUtils.SAML_REQUEST_PARAMETER + "=" + SamlUtils.encodeSAMLObject(samlObject,doCompress);  } else {    throw new IllegalArgumentException();  }  if (relayStateParameter != null) {    queryString=queryString + "&" + SamlUtils.RELAY_STATE_PARAMETER+ "="+ relayStateParameter;  }  if (sigAlg != null) {    queryString=queryString + "&" + SamlUtils.SIGNATURE_ALGORITHM_PARAMETER+ "="+ sigAlg;  }  if (signature != null) {    queryString=queryString + "&" + SamlUtils.SIGNATURE_PARAMETER+ "="+ signature;  }  expect(request.getQueryString()).andReturn(queryString).anyTimes();  replay(request);  return request;}  }
class C{  @Override public boolean verifyPublicKey(PGPPublicKey keyToVerify,PGPPublicKey keyToVerifyWith){  try {    return PGPEncryptionUtil.verifyPublicKey(keyToVerify,keyToVerifyWith);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void readData() throws IOException {  while (!isClosed) {    int code=is.read();switch (code) {case ' ':case '\t':case '\n':case '\r':      break;case 'C':{      int channel=(is.read() << 8) + is.read();      inputReady[channel]=true;      return;    }case 'E':{    int channel=(is.read() << 8) + is.read();    int status=(is.read() << 8) + is.read();    inputReady[channel]=true;    return;  }case -1:close();return;default :close();return;}}return;}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_LIMIT) {    lat=NORTH_LIMIT;  } else   if (lat < SOUTH_LIMIT) {    lat=SOUTH_LIMIT;  }  return lat;}  }
class C{  public Shape greatCircleLineShape(){  GeneralPath path=null;  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {    double y1=llpts[0];    double x1=llpts[1];    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);    boolean firstCoords=true;    for (int i=2; i < llpts.length; i+=2) {      double y2=llpts[i];      double x2=llpts[i + 1];      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);      if (nsegs == 0) {        nsegs=1;      }      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);      if (returnDegrees) {        ProjMath.arrayRadToDeg(coords);      }      for (int j=0; j <= coords.length - 1; j+=2) {        if (firstCoords) {          path.moveTo(coords[j + 1],coords[j]);          firstCoords=false;        } else {          path.lineTo(coords[j + 1],coords[j]);        }      }      x1=x2;      y1=y2;    }    if (returnDegrees) {      path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));    } else {      path.lineTo(x1,y1);    }  }  return path;}  }
class C{  final public boolean checkCacheClosing(DistributionManager dm){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  return (cache == null || cache.getCancelCriterion().isCancelInProgress());}  }
class C{  public AbstractGraph(List<V> vertices,List<Edge> edges){  for (int i=0; i < vertices.size(); i++) {    addVertex(vertices.get(i));  }  createAdjacencyLists(edges,vertices.size());}  }
class C{  public void onEvent(Event e){  log.info("Cmd=" + e.getTarget().getId());  if (cmbDocType.equals(e.getTarget())) {    form.postQueryEvent();    return;  }  validate();}  }
class C{  public static URL resolvePropertiesUrl(String resource,Locale locale){  if (UtilValidate.isEmpty(resource)) {    throw new IllegalArgumentException("resource cannot be null or empty");  }  String resourceName=createResourceName(resource,locale,false);  if (propertiesNotFound.contains(resourceName)) {    return null;  }  URL url=null;  try {    if (resource.endsWith(".xml") || resource.endsWith(".properties")) {      url=FlexibleLocation.resolveLocation(resource);      if (url != null) {        return url;      }    }    url=FlexibleLocation.resolveLocation(resourceName + ".properties");    if (url != null) {      return url;    }    url=FlexibleLocation.resolveLocation(resourceName + ".xml");    if (url != null) {      return url;    }    url=FlexibleLocation.resolveLocation(resource + ".xml");    if (url != null) {      return url;    }    url=FlexibleLocation.resolveLocation(resourceName);    if (url != null) {      return url;    }  } catch (  Exception e) {    Debug.logInfo("Properties resolver: invalid URL - " + e.getMessage(),module);  }  if (propertiesNotFound.size() <= 300) {    propertiesNotFound.add(resourceName);  }  return null;}  }
class C{  @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer(WebSocket conn,Draft draft,ClientHandshake request) throws InvalidDataException {  return new HandshakeImpl1Server();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean editCellAt(int row,int column,java.util.EventObject e){  if (!super.editCellAt(row,column,e))   return false;  Object ed=getCellEditor();  if (ed instanceof VEditor)   ((Component)ed).requestFocus(); else   if (ed instanceof VCellEditor) {    ed=((VCellEditor)ed).getEditor();    ((Component)ed).requestFocus();  }  return true;}  }
class C{  public static int lowerBound(final List<Date> dates,final Date value){  int len=dates.size();  int from=0;  int half;  int middle;  while (len > 0) {    half=len >> 1;    middle=from;    middle=middle + half;    if (value.compareTo(dates.get(middle)) == 1) {      from=middle;      from++;      len=len - half - 1;    } else {      len=half;    }  }  return from;}  }
class C{  public boolean isAmbient(){  return this.ambient;}  }
class C{  public void select(boolean flag){  isSelected=flag;  if (!isSelected) {    mark=0;  }}  }
class C{  protected void waitForDownloadOrTimeout(long id,long poll,long timeoutMillis) throws TimeoutException, InterruptedException {  doWaitForDownloadsOrTimeout(new Query().setFilterById(id),poll,timeoutMillis);  waitForReceiverNotifications(1);}  }
class C{  public JasperException(Throwable exception){  super(exception);}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public final IntGrid2D add(int withThisMuch){  if (withThisMuch == 0.0)   return this;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      fieldx[y]+=withThisMuch;    }  }  return this;}  }
class C{  private boolean less(int i,int j){  return keys[pq[i]].compareTo(keys[pq[j]]) < 0;}  }
class C{  @TransactionAttribute(TransactionAttributeType.MANDATORY) public void sendMail(Organization organization,EmailType type,Object[] params,Marketplace marketplace) throws MailOperationException {  String mail=organization.getEmail();  if (mail == null || mail.trim().length() == 0) {    logger.logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_NO_EMAIL_ADDRESS_SPECIFIED_ORGANIZATION,organization.getOrganizationId());    return;  }  final String locale=organization.getLocale();  String subject=getText(locale,type.toString() + RESOURCE_SUBJECT,params,marketplace);  String text=getText(locale,RESOURCE_TEXT_HEADER,params,marketplace);  text+=getText(locale,type.toString() + RESOURCE_TEXT,params,marketplace);  text+=getText(locale,RESOURCE_TEXT_FOOTER,null,marketplace);  List<String> to=new ArrayList<String>();  to.add(mail);  sendMail(to,subject,text,locale);}  }
class C{  public void enableDebugMode(boolean b){  renderer.enableDebugMode(b);  viewChanged(MapViewEvent.Type.NEW_RENDERER);}  }
class C{  public HttpEntityWrapper(HttpEntity wrapped){  super();  if (wrapped == null) {    throw new IllegalArgumentException("wrapped entity must not be null");  }  wrappedEntity=wrapped;}  }
class C{  public static void readAttributeSet(ObjectInputStream in,MutableAttributeSet a) throws ClassNotFoundException, IOException {  int n=in.readInt();  for (int i=0; i < n; i++) {    Object key=in.readObject();    Object value=in.readObject();    if (thawKeyMap != null) {      Object staticKey=thawKeyMap.get(key);      if (staticKey != null) {        key=staticKey;      }      Object staticValue=thawKeyMap.get(value);      if (staticValue != null) {        value=staticValue;      }    }    a.addAttribute(key,value);  }}  }
class C{  private static JFreeChart createChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createStackedAreaChart("Stacked Area Chart","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  public void rotate(float angle){  impl.rotate(nativeGraphics,angle);}  }
class C{  public OutputLimitClause afterTimePeriodExpression(TimePeriodExpression afterTimePeriodExpression){  this.afterTimePeriodExpression=afterTimePeriodExpression;  return this;}  }
class C{  @Override public boolean hasDurableHandlerStore(){  return true;}  }
class C{  public void reset(){  Metamodel.resetModuleManager();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public BoolStack(int size){  m_allocatedSize=size;  m_values=new boolean[size];  m_index=-1;}  }
class C{  public Fraction invert(){  if (numerator == 0) {    throw new ArithmeticException("Unable to invert zero.");  }  if (numerator == Integer.MIN_VALUE) {    throw new ArithmeticException("overflow: can't negate numerator");  }  if (numerator < 0) {    return new Fraction(-denominator,-numerator);  }  return new Fraction(denominator,numerator);}  }
class C{  public static void openURL(Component parent,String url,boolean showDialog){  String osName=System.getProperty("os.name");  try {    if (osName.startsWith("Mac OS")) {      Class<?> fileMgr=Class.forName("com.apple.eio.FileManager");      Method openURL=fileMgr.getDeclaredMethod("openURL",new Class[]{String.class});      openURL.invoke(null,new Object[]{url});    } else     if (osName.startsWith("Windows")) {      Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);    } else {      String browser=null;      for (int count=0; count < LINUX_BROWSERS.length && browser == null; count++) {        if (Runtime.getRuntime().exec(new String[]{"which",LINUX_BROWSERS[count]}).waitFor() == 0) {          browser=LINUX_BROWSERS[count];          break;        }      }      if (browser == null) {        throw new Exception("Could not find web browser");      } else {        Runtime.getRuntime().exec(new String[]{browser,url});      }    }  } catch (  Exception e) {    String errMsg="Error attempting to launch web browser:\n" + e.getMessage();    if (showDialog) {      JOptionPane.showMessageDialog(parent,errMsg);    } else {      System.err.println(errMsg);    }  }}  }
class C{  @Override public String generateToolTip(XYZDataset dataset,int series,int item){  return generateLabelString(dataset,series,item);}  }
class C{  public String encode(Token token){  if (iobBeginMap.containsKey(token.getBegin())) {    return "B-" + iobBeginMap.get(token.getBegin());  }  if (iobInsideMap.containsKey(token.getBegin())) {    return "I-" + iobInsideMap.get(token.getBegin());  }  return "O";}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS:    return getTypeArgs();case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TARGET:  return getTarget();case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__ARGUMENTS:return getArguments();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String toVerboseString(){  StringBuffer result=new StringBuffer();  result.append("Database [");  result.append(getName());  result.append("] tables:");  for (int idx=0; idx < getTableCount(); idx++) {    result.append(" ");    result.append(getTable(idx).toVerboseString());  }  return result.toString();}  }
class C{  synchronized void maybeThrowDeterministicException() throws IOException {  if (failures != null) {    for (int i=0; i < failures.size(); i++) {      try {        failures.get(i).eval(this);      } catch (      Throwable t) {        if (LuceneTestCase.VERBOSE) {          System.out.println("MockDirectoryWrapper: throw exc");          t.printStackTrace(System.out);        }        IOUtils.reThrow(t);      }    }  }}  }
class C{  public void updateSunToCurrentTime(Time time,int canvasWidth,int canvasHeight){  calculateSunlightRatio(time);  calculateSunRotation(0.0f,time,canvasWidth,canvasHeight);}  }
class C{  public Wildcard createWildcard(){  WildcardImpl wildcard=new WildcardImpl();  return wildcard;}  }
class C{  public Address zipCode(String zipCode){  this.zipCode=zipCode;  return this;}  }
class C{  public DERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public void writeTyped(int type,Xdrable item) throws IOException {  int size;  if (item == null) {    writeInt(1);    write(type);    size=1;  } else {    size=item.getLength() + 1;    writeInt(size);    write(type);    item.write(this);  }  writeAlignment(size);}  }
class C{  public int read(InputStream in) throws IOException {  ByteBuffer buffer=getByteBuffer();  int size=size();  int remaining=size - buffer.position();  if (remaining == 0)   remaining=size;  int alreadyRead=size - remaining;  if (buffer.hasArray()) {    int offset=buffer.arrayOffset() + getByteBufferPosition();    int bytesRead=in.read(buffer.array(),offset + alreadyRead,remaining);    buffer.position(getByteBufferPosition() + alreadyRead + bytesRead - offset);    return bytesRead;  } else {synchronized (buffer) {      if (_bytes == null) {        _bytes=new byte[size()];      }      int bytesRead=in.read(_bytes,0,remaining);      buffer.position(getByteBufferPosition() + alreadyRead);      buffer.put(_bytes,0,bytesRead);      return bytesRead;    }  }}  }
class C{  public Rotate3dAnimation(float fromDegrees,float toDegrees,float centerX,float centerY,float depthZ,boolean reverse){  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  public static <T>T loadSpringBean(URL springXmlUrl,String beanName) throws IgniteCheckedException {  A.notNull(springXmlUrl,"springXmlUrl");  A.notNull(beanName,"beanName");  IgniteSpringHelper spring=SPRING.create(false);  return spring.loadBean(springXmlUrl,beanName);}  }
class C{  public static boolean isApplicationInBackground(Context context){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> taskList=am.getRunningTasks(1);  if (taskList != null && !taskList.isEmpty()) {    ComponentName topActivity=taskList.get(0).topActivity;    if (topActivity != null && !topActivity.getPackageName().equals(context.getPackageName())) {      return true;    }  }  return false;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 9:case 8:case 7:case 6:case 5:case 4:case 3:case 11:case 2:case 10:case 1:    return true;default :  break;}return false;}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  @Override public void aggregateMeasure(AbstractScannedResult scannedResult,MeasureAggregator[] aggrgeator){  for (short i=0; i < measuresOrdinal.length; i++) {    if (isMeasureExistsInCurrentBlock[i]) {      aggrgeator[measureColumnStartIndex + i].agg(scannedResult.getMeasureChunk(measuresOrdinal[i]),scannedResult.getCurrenrRowId());    } else {      aggrgeator[measureColumnStartIndex + i].agg(measureDefaultValue[i]);    }  }}  }
class C{  public void nextBytes(byte[] bytes,int start,int len){  doNextBytes(bytes,start,len);}  }
class C{  public static boolean hasNestedExceptions(InvocationSequenceData data){  return (null != data.isNestedExceptions()) && data.isNestedExceptions().booleanValue();}  }
class C{  protected boolean compare(Instance inst1,Instance inst2){  boolean result;  int i;  result=(inst1.numAttributes() == inst2.numAttributes());  if (result) {    for (i=0; i < inst1.numAttributes(); i++) {      if (Double.isNaN(inst1.value(i)) && (Double.isNaN(inst2.value(i)))) {        continue;      }      if (inst1.value(i) != inst2.value(i)) {        result=false;        System.out.println("Values at position " + (i + 1) + " differ (Filter/Source code): "+ inst1.value(i)+ " != "+ inst2.value(i));        break;      }    }  }  return result;}  }
class C{  protected void sequence_AnnotatedExportableElement_InterfaceImplementsList_Members_TypeVariables(ISerializationContext context,N4InterfaceDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static final HashMap<String,Integer> countCombinations(Instances D,int L){  HashMap<String,Integer> map=new HashMap<String,Integer>();  for (int i=0; i < D.numInstances(); i++) {    String y=MLUtils.toBitString(D.instance(i),L);    Integer c=map.get(y);    map.put(y,c == null ? 1 : c + 1);  }  return map;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ORDINAL_OP___GREATER_OP_1:    return ((InternalEList<?>)getGreaterOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.ORDINAL_OP___LESS_OP_1:  return ((InternalEList<?>)getLessOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.ORDINAL_OP___MORE_OP_1:return ((InternalEList<?>)getMoreOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.ORDINAL_OP___SMALLER_OP_1:return ((InternalEList<?>)getSmallerOp_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();  } else {    key=(RSAKeyParameters)param;  }  this.forEncryption=forEncryption;}  }
class C{  public void writeRawBytes(final ByteString value,int offset,int length) throws IOException {  if (limit - position >= length) {    value.copyTo(buffer,offset,position,length);    position+=length;    totalBytesWritten+=length;  } else {    final int bytesWritten=limit - position;    value.copyTo(buffer,offset,position,bytesWritten);    offset+=bytesWritten;    length-=bytesWritten;    position=limit;    totalBytesWritten+=bytesWritten;    refreshBuffer();    if (length <= limit) {      value.copyTo(buffer,offset,0,length);      position=length;    } else {      value.writeTo(output,offset,length);    }    totalBytesWritten+=length;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void fireInvitationRejectionListeners(String invitee,String reason){  InvitationRejectionListener[] listeners;synchronized (invitationRejectionListeners) {    listeners=new InvitationRejectionListener[invitationRejectionListeners.size()];    invitationRejectionListeners.toArray(listeners);  }  for (  InvitationRejectionListener listener : listeners) {    listener.invitationDeclined(invitee,reason);  }}  }
class C{  public Set<String> classNames(){  return element.classNames();}  }
class C{  public void add(E newObject){  list.add(newObject);  int currentIndex=list.size() - 1;  while (currentIndex > 0) {    int parentIndex=(currentIndex - 1) / 2;    if (comparator.compare(list.get(currentIndex),list.get(parentIndex)) > 0) {      E temp=list.get(currentIndex);      list.set(currentIndex,list.get(parentIndex));      list.set(parentIndex,temp);    } else     break;    currentIndex=parentIndex;  }}  }
class C{  public static Statement union(boolean distinct,Statement... subQueries){  QueryStatement stmt=new QueryStatement();  String unionOperator=distinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueries.length; i++) {    if (i > 0)     stmt.statement.append(unionOperator);    stmt.statement.append(subQueries[i]);  }  return stmt;}  }
class C{  private GuacamoleProperties(){}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  public static String decode(byte[] utf8) throws CharacterCodingException {  return decode(ByteBuffer.wrap(utf8),true);}  }
class C{  public static ColorStateList valueOf(int color){synchronized (sCache) {    WeakReference<ColorStateList> ref=sCache.get(color);    ColorStateList csl=ref != null ? ref.get() : null;    if (csl != null) {      return csl;    }    csl=new ColorStateList(EMPTY,new int[]{color});    sCache.put(color,new WeakReference<ColorStateList>(csl));    return csl;  }}  }
class C{  public boolean contains(String user){  return getEntry(user) != null;}  }
class C{  @Override protected boolean isFrontierEmpty(){  return frontier.isEmpty();}  }
class C{  public static OrderByClause create(){  return new OrderByClause();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public synchronized void clear(){  listeners=EmptyArray;}  }
class C{  public Token(int length,byte id){  this.length=length;  this.id=id;}  }
class C{  @Override public void insertBack(int x){  if (size == items.length) {    resize((int)(size * 1.01));  }  items[size]=x;  size=size + 1;}  }
class C{  public void remove(BTDownload downloader){  super.remove(downloader);  downloader.remove();}  }
class C{  private CDatabaseManager(){}  }
class C{  public void handlePeriodicMaintenance(Operation post){  post.complete();}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  @Override public String toString(){  if (this.getObject() == null) {    return this.getStyle().getNullText();  }  Class<?> clazz=this.getObject().getClass();  this.appendFieldsIn(clazz);  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {    clazz=clazz.getSuperclass();    this.appendFieldsIn(clazz);  }  return super.toString();}  }
class C{  public Certificate[] engineGetCertificateChain(String alias){  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry != null && entry instanceof PrivateKeyEntry) {    if (((PrivateKeyEntry)entry).chain == null) {      return null;    } else {      if (debug != null) {        debug.println("Retrieved a " + ((PrivateKeyEntry)entry).chain.length + "-certificate chain at alias '"+ alias+ "'");      }      return ((PrivateKeyEntry)entry).chain.clone();    }  } else {    return null;  }}  }
class C{  public BuyClientBuilder httpTimeout(final long httpConnectionTimeoutMs,final long httpReadWriteTimeoutMs){  this.httpConnectionTimeoutMs=httpConnectionTimeoutMs;  this.httpReadWriteTimeoutMs=httpReadWriteTimeoutMs;  return this;}  }
class C{  public final boolean asXml(){  return markupMode == MarkupRenderMode.XML;}  }
class C{  private void addExportSnapshotSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,Map<URI,Integer> snapshots,List<URI> initiatorURIs) throws InternalException {  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID);  String exportStep=workflow.createStepId();  initTaskStatus(exportGroup,exportStep,Operation.Status.pending,"create export");  Map<URI,Map<URI,Integer>> storageToBlockObjects=getStorageToBlockObjects(snapshots);  for (  Map.Entry<URI,Map<URI,Integer>> entry : storageToBlockObjects.entrySet()) {    _log.info(String.format("Adding workflow step to export RP bookmark and associated target volumes.  ExportGroup: %s, Initiators: %s, Volume Map: %s",exportGroup.getId(),initiatorURIs,entry.getValue()));    _exportWfUtils.generateExportGroupCreateWorkflow(workflow,null,STEP_ENABLE_IMAGE_ACCESS,entry.getKey(),exportGroupID,entry.getValue(),initiatorURIs);  }  _log.info("Finished adding export group create steps in workflow: " + exportGroup.getId());}  }
class C{  public boolean isHeader(){  return isHeader(this.myHeader);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if (this.cordova.getActivity().isFinishing())   return true;  if (action.equals("beep")) {    this.beep(args.getLong(0));  } else   if (action.equals("alert")) {    this.alert(args.getString(0),args.getString(1),args.getString(2),callbackContext);    return true;  } else   if (action.equals("confirm")) {    this.confirm(args.getString(0),args.getString(1),args.getJSONArray(2),callbackContext);    return true;  } else   if (action.equals("prompt")) {    this.prompt(args.getString(0),args.getString(1),args.getJSONArray(2),args.getString(3),callbackContext);    return true;  } else   if (action.equals("activityStart")) {    this.activityStart(args.getString(0),args.getString(1));  } else   if (action.equals("activityStop")) {    this.activityStop();  } else   if (action.equals("progressStart")) {    this.progressStart(args.getString(0),args.getString(1));  } else   if (action.equals("progressValue")) {    this.progressValue(args.getInt(0));  } else   if (action.equals("progressStop")) {    this.progressStop();  } else {    return false;  }  callbackContext.success();  return true;}  }
class C{  public void deleteSortLocationIfExists() throws CarbonSortKeyAndGroupByException {  CarbonDataProcessorUtil.deleteSortLocationIfExists(this.tempFileLocation);}  }
class C{  public TokenScanner(IDocument document,IJavaProject project){  String sourceLevel=project.getOption(JavaCore.COMPILER_SOURCE,true);  String complianceLevel=project.getOption(JavaCore.COMPILER_COMPLIANCE,true);  fScanner=ToolFactory.createScanner(true,false,false,sourceLevel,complianceLevel);  fScanner.setSource(document.get().toCharArray());  fDocument=document;  fEndPosition=fScanner.getSource().length - 1;}  }
class C{  public void addDropItem(final String name,final double probability,final int amount){  dropsItems.add(new DropItem(name,probability,amount));}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity){  return new HashMap<K,V>(initialCapacity);}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public final boolean a1Castle(){  return (castleMask & (1 << A1_CASTLE)) != 0;}  }
class C{  public void initialize() throws NetworkDeviceControllerException {  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  SSHPrompt got=waitFor(prompts,defaultTimeout,buf,true);  String[] lines=buf.toString().split("[\n\r]+");  String lastLine=lines[lines.length - 1];  String[] groups=new String[2];  if (match(lastLine,new String[]{MDSDialogProperties.getString("MDSDialog.initalize.match") + got.getRegex()},groups) == 0) {    devname=groups[0];  }  sendWaitFor(MDSDialogProperties.getString("MDSDialog.initialize.termlength.cmd"),5000,prompts,buf);  _log.info(buf.toString());}  }
class C{  protected Object processXmlHttpResponse(CloseableHttpResponse response,String actionDescription,Class<?>... responseClass){  StatusLine responseStatusLine=response.getStatusLine();  Object responseObject=null;  String xmlResponse="";  HttpErrorResponseException errorException=null;  try {    if (responseStatusLine.getStatusCode() == 200) {      xmlResponse=IOUtils.toString(response.getEntity().getContent(),StandardCharsets.UTF_8.name());      InputStream inputStream=new ByteArrayInputStream(xmlResponse.getBytes(StandardCharsets.UTF_8));      JAXBContext responseContext=JAXBContext.newInstance(responseClass);      Unmarshaller responseUnmarshaller=responseContext.createUnmarshaller();      responseObject=responseUnmarshaller.unmarshal(inputStream);    } else {      xmlResponse=IOUtils.toString(response.getEntity().getContent(),StandardCharsets.UTF_8.name());      InputStream inputStream=new ByteArrayInputStream(xmlResponse.getBytes(StandardCharsets.UTF_8));      JAXBContext responseContext=JAXBContext.newInstance(ErrorInformation.class);      Unmarshaller responseUnmarshaller=responseContext.createUnmarshaller();      ErrorInformation errorInfo=(ErrorInformation)responseUnmarshaller.unmarshal(inputStream);      errorException=new HttpErrorResponseException("Failed to " + actionDescription,errorInfo.getStatusCode(),errorInfo.getStatusDescription(),errorInfo.getMessage());    }  } catch (  IOException|JAXBException e) {    LOGGER.warn("Failed to get or process HTTP response from the registration server.",e);    LOGGER.warn(String.format("    HTTP Response Status: %s",responseStatusLine));    LOGGER.warn(String.format("    HTTP Response: %s",xmlResponse));    errorException=new HttpErrorResponseException("Failed to " + actionDescription,responseStatusLine.getStatusCode(),responseStatusLine.getReasonPhrase(),xmlResponse);  } finally {    try {      response.close();    } catch (    Exception ex) {      LOGGER.warn("Unable to close HTTP response.",ex);    }  }  if (errorException != null) {    throw errorException;  }  return responseObject;}  }
class C{  private void ok(){  int keepalive;  int timeout;  Intent intent=new Intent();  if (resultData == null) {    resultData=new Bundle();    resultData.putString(ActivityConstants.message,ActivityConstants.empty);    resultData.putString(ActivityConstants.topic,ActivityConstants.empty);    resultData.putInt(ActivityConstants.qos,ActivityConstants.defaultQos);    resultData.putBoolean(ActivityConstants.retained,ActivityConstants.defaultRetained);  }  intent.putExtras(resultData);  String username=((EditText)findViewById(R.id.uname)).getText().toString();  String password=((EditText)findViewById(R.id.password)).getText().toString();  String sslkey=null;  boolean ssl=((CheckBox)findViewById(R.id.sslCheckBox)).isChecked();  if (ssl) {    sslkey=((EditText)findViewById(R.id.sslKeyLocaltion)).getText().toString();  }  try {    timeout=Integer.parseInt(((EditText)findViewById(R.id.timeout)).getText().toString());  } catch (  NumberFormatException nfe) {    timeout=ActivityConstants.defaultTimeOut;  }  try {    keepalive=Integer.parseInt(((EditText)findViewById(R.id.keepalive)).getText().toString());  } catch (  NumberFormatException nfe) {    keepalive=ActivityConstants.defaultKeepAlive;  }  intent.putExtra(ActivityConstants.username,username);  intent.putExtra(ActivityConstants.password,password);  intent.putExtra(ActivityConstants.timeout,timeout);  intent.putExtra(ActivityConstants.keepalive,keepalive);  intent.putExtra(ActivityConstants.ssl,ssl);  intent.putExtra(ActivityConstants.ssl_key,sslkey);  advanced.setResult(RESULT_OK,intent);  advanced.finish();}  }
class C{  public NonRepeatableRequestException(String message){  super(message);}  }
class C{  @Override public GitClient git(){  return new DefaultGitClient(url,authenticationManager);}  }
class C{  static boolean isRegistered(final Object value){  final Map<Object,Object> m=getRegistry();  return m != null && m.containsKey(value);}  }
class C{  public void clear(){  if (mSize != 0) {    freeArrays(mHashes,mArray,mSize);    mHashes=EMPTY_INTS;    mArray=EMPTY_OBJECTS;    mSize=0;  }}  }
class C{  public NotificationChain basicSetInitSequence(Sequence newInitSequence,NotificationChain msgs){  Sequence oldInitSequence=initSequence;  initSequence=newInitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE,oldInitSequence,newInitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected S_ReflexImpl(){  super();}  }
class C{  public StrBuilder deleteFirst(final String str){  final int len=(str == null ? 0 : str.length());  if (len > 0) {    final int index=indexOf(str,0);    if (index >= 0) {      deleteImpl(index,index + len,len);    }  }  return this;}  }
class C{  private form fillForm(WWindowStatus ws,String action,MLocation location,String targetBase,boolean addStart){  form myForm=null;  myForm=new form(action).setName("WLocation");  myForm.setID("Location");  myForm.setTitle("Location");  myForm.addAttribute("selected","true");  myForm.setClass("panel");  myForm.setMethod("post");  myForm.addElement(new input(input.TYPE_HIDDEN,P_TARGET,targetBase));  myForm.addElement(new input(input.TYPE_HIDDEN,P_C_LOCATION_ID,location.getC_Location_ID()));  fieldset fs=new fieldset();  fs.setID("WLocation");  div line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Address") + " 1"));  input myInput=null;  myInput=new input(input.TYPE_TEXT,P_ADDRESS1,location.getAddress1());  line.addElement(myInput);  fs.addElement(line);  line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Address") + " 2"));  myInput=new input(input.TYPE_TEXT,P_ADDRESS2,location.getAddress2());  line.addElement(myInput);  fs.addElement(line);  line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Address") + " 3"));  myInput=new input(input.TYPE_TEXT,P_ADDRESS3,location.getAddress3());  line.addElement(myInput);  fs.addElement(line);  line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Address") + " 4"));  myInput=new input(input.TYPE_TEXT,P_ADDRESS4,location.getAddress4());  line.addElement(myInput);  fs.addElement(line);  line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"City")));  myInput=new input(input.TYPE_TEXT,P_CITY,location.getCity());  line.addElement(myInput);  line=new div();  line.setClass("row");  if (location.getCountry().isHasRegion()) {    line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Region")));    line.addElement(getRegion(location,ws));  }  line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Postal")));  myInput=new input(input.TYPE_TEXT,P_POSTAL,location.getPostal());  myInput.setMaxlength(10).setSize(6);  line.addElement(myInput);  fs.addElement(line);  line=new div();  line.setClass("row");  line.addElement(new label().addElement(Msg.getMsg(ws.ctx,"Country")));  line.addElement(this.getCountry(location,ws));  fs.addElement(line);  line=new div();  line.setClass("row");  StringBuffer script=new StringBuffer();  script.append(targetBase).append("D.value='").append("temp").append("';").append(targetBase).append("F.value='").append("temp").append("';submit();closePopup();");  a button=new a("#","Submit");  button.addAttribute("type","submit");  button.setClass("whiteButton");  button.setOnClick(script.toString());  line.addElement(button);  fs.addElement(line);  myForm.addElement(fs);  return myForm;}  }
class C{  public SynchronizedHardReferenceQueue(final HardReferenceQueueEvictionListener<T> listener,final int capacity,final int nscan){  this.queue=new InnerHardReferenceQueue(listener,capacity,DEFAULT_NSCAN);}  }
class C{  public FacetResult search() throws IOException {  FacetsCollector fc=new FacetsCollector();  searcher.search(new MatchAllDocsQuery(),fc);  Facets facets=new DoubleRangeFacetCounts("field",getDistanceValueSource(),fc,getBoundingBoxQuery(ORIGIN_LATITUDE,ORIGIN_LONGITUDE,10.0),ONE_KM,TWO_KM,FIVE_KM,TEN_KM);  return facets.getTopChildren(10,"field");}  }
class C{  @Override protected void overrideIdentifierData(EmaApiIdentifierType identifier) throws EmaException {  identifier.setEmbedLevel(EmaApi.EMA_EMBED_LEVEL_EXTERNAL_STR);}  }
class C{  private static ThreadState convertThreadState(final int value){switch (value) {case 0:    return ThreadState.RUNNING;case 1:  return ThreadState.SUSPENDED;default :throw new IllegalArgumentException(String.format("Received invalid thread state %d",value));}}  }
class C{  public static QueryLanguage valueOf(String qlName){  for (  QueryLanguage ql : QUERY_LANGUAGES) {    if (ql.getName().equalsIgnoreCase(qlName)) {      return ql;    }  }  return null;}  }
class C{  static String primitiveTypeLabel(char typeChar){switch (typeChar) {case 'B':    return "byte";case 'C':  return "char";case 'D':return "double";case 'F':return "float";case 'I':return "int";case 'J':return "long";case 'S':return "short";case 'V':return "void";case 'Z':return "boolean";default :System.err.println("Unexpected class char " + typeChar);assert false;return "UNKNOWN";}}  }
class C{  public void removeMethod(SootMethod m){  checkLevel(SIGNATURES);  if (!m.isDeclared() || m.getDeclaringClass() != this)   throw new RuntimeException("incorrect declarer for remove: " + m.getName());  if (subSigToMethods.get(m.getNumberedSubSignature()) == null) {    throw new RuntimeException("Attempt to remove method " + m.getSubSignature() + " which is not in class "+ this);  }  subSigToMethods.put(m.getNumberedSubSignature(),null);  methodList.remove(m);  m.isDeclared=false;}  }
class C{  public static void reportPropertyDescriptor(PropertyDescriptor pd){  System.out.println("property name:  " + pd.getName());  System.out.println("         type:  " + pd.getPropertyType());  System.out.println("         read:  " + pd.getReadMethod());  System.out.println("         write: " + pd.getWriteMethod());  if (pd instanceof IndexedPropertyDescriptor) {    IndexedPropertyDescriptor ipd=(IndexedPropertyDescriptor)pd;    System.out.println(" indexed type: " + ipd.getIndexedPropertyType());    System.out.println(" indexed read: " + ipd.getIndexedReadMethod());    System.out.println(" indexed write: " + ipd.getIndexedWriteMethod());  }}  }
class C{  public void add(Value value){  Key subKey=makeSubKey(value);  client.put(this.policy,subKey,new Bin(ListElementBinName,value));  client.operate(this.policy,this.key,ListOperation.append(this.binNameString,Value.get(subKey.digest)));}  }
class C{  public int size(){  return counter.get();}  }
class C{  public void verifyIncludedAndExcludedSegments(SegmentedTimeline timeline,long n){  timeline.setExceptionSegments(new java.util.ArrayList());  SegmentedTimeline.Segment segment=timeline.getSegment(n);  for (int i=0; i < 1000; i++) {    int d=(i % timeline.getGroupSegmentCount());    if (d < timeline.getSegmentsIncluded()) {      assertTrue(segment.inIncludeSegments());      assertTrue(!segment.inExcludeSegments());      assertTrue(!segment.inExceptionSegments());    } else {      assertTrue(!segment.inIncludeSegments());      assertTrue(segment.inExcludeSegments());      assertTrue(!segment.inExceptionSegments());    }    segment.inc();  }}  }
class C{  private boolean acquireDestroyReadLock(long millis) throws InterruptedException {  boolean interrupted=Thread.interrupted();  try {    if (interrupted && this.dlock.isInterruptibleLockRequest()) {      throw new InterruptedException();    }    while (true) {      try {        this.dm.getCancelCriterion().checkCancelInProgress(null);        boolean acquired=this.destroyLock.readLock().tryLock(millis);        return acquired;      } catch (      InterruptedException e) {        interrupted=true;        throwIfInterruptible(e);      }    }  }  finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public Arg(QName qname,String expression,boolean isFromWithParam){  m_qname=qname;  m_val=null;  m_expression=expression;  m_isFromWithParam=isFromWithParam;  m_isVisible=!isFromWithParam;}  }
class C{  private void startProtectionSystem(ProtectionSystem system) throws InternalException {  ProtectionController controller=getProtectionController(system.getSystemType());  controller.connect(system.getId());}  }
class C{  public static void init(){  if (SecurityPolicy.get() != SecurityPolicy.NONE) {    INSTANCE=new ToastSecurityManager();    System.setSecurityManager(INSTANCE);    main=Thread.currentThread().getThreadGroup();    group=new ThreadGroup(Thread.currentThread().getThreadGroup(),"Toasted");  }}  }
class C{  public LogSimpleItemEventCommand(final RPObject item,final RPEntity player,final String event,final String param1,final String param2,final String param3,final String param4){  this.item=item;  this.player=player;  this.event=event;  this.param1=param1;  this.param2=param2;  this.param3=param3;  this.param4=param4;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(LABEL);  builder.addAttribute(REL);  builder.addAttribute(VALUE_STRING);  builder.addElement(EntryLink.KEY);}  }
class C{  @Override public Object clone(){  ByteArrayList clone=null;  try {    clone=(ByteArrayList)super.clone();    clone._data=(byte[])_data.clone();  } catch (  CloneNotSupportedException e) {  }  return clone;}  }
class C{  @Post public String handlePost(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  String newMask;  try {    newMask=jsonExtractSubnetMask(fmJson);  } catch (  IOException e) {    log.error("Error parsing new subnet mask: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse new subnet mask, see log for details.\"}";  }  firewall.setSubnetMask(newMask);  return ("{\"status\" : \"subnet mask set\"}");}  }
class C{  void invalidConversion(Converter converter,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    fail(msg + ", expected ConversionException, but result = '" + result+ "'");  } catch (  ConversionException ex) {  }}  }
class C{  private void checkRanges(){  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    if (Math.abs(minimum[i] - maximum[i]) < Settings.EPS) {      throw new IllegalArgumentException("objective with empty range");    }  }}  }
class C{  private static void checkCRL(DistributionPoint dp,ExtendedPKIXParameters paramsPKIX,X509Certificate cert,Date validDate,X509Certificate defaultCRLSignCert,PublicKey defaultCRLSignKey,CertStatus certStatus,ReasonsMask reasonMask,List certPathCerts) throws AnnotatedException {  Date currentDate=new Date(System.currentTimeMillis());  if (validDate.getTime() > currentDate.getTime()) {    throw new AnnotatedException("Validation time is in future.");  }  Set crls=CertPathValidatorUtilities.getCompleteCRLs(dp,cert,currentDate,paramsPKIX);  boolean validCrlFound=false;  AnnotatedException lastException=null;  Iterator crl_iter=crls.iterator();  while (crl_iter.hasNext() && certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonMask.isAllReasons()) {    try {      X509CRL crl=(X509CRL)crl_iter.next();      ReasonsMask interimReasonsMask=RFC3280CertPathUtilities.processCRLD(crl,dp);      if (!interimReasonsMask.hasNewReasons(reasonMask)) {        continue;      }      Set keys=RFC3280CertPathUtilities.processCRLF(crl,cert,defaultCRLSignCert,defaultCRLSignKey,paramsPKIX,certPathCerts);      PublicKey key=RFC3280CertPathUtilities.processCRLG(crl,keys);      X509CRL deltaCRL=null;      if (paramsPKIX.isUseDeltasEnabled()) {        Set deltaCRLs=CertPathValidatorUtilities.getDeltaCRLs(currentDate,paramsPKIX,crl);        deltaCRL=RFC3280CertPathUtilities.processCRLH(deltaCRLs,key);      }      if (paramsPKIX.getValidityModel() != ExtendedPKIXParameters.CHAIN_VALIDITY_MODEL) {        if (cert.getNotAfter().getTime() < crl.getThisUpdate().getTime()) {          throw new AnnotatedException("No valid CRL for current time found.");        }      }      RFC3280CertPathUtilities.processCRLB1(dp,cert,crl);      RFC3280CertPathUtilities.processCRLB2(dp,cert,crl);      RFC3280CertPathUtilities.processCRLC(deltaCRL,crl,paramsPKIX);      RFC3280CertPathUtilities.processCRLI(validDate,deltaCRL,cert,certStatus,paramsPKIX);      RFC3280CertPathUtilities.processCRLJ(validDate,crl,cert,certStatus);      if (certStatus.getCertStatus() == CRLReason.removeFromCRL) {        certStatus.setCertStatus(CertStatus.UNREVOKED);      }      reasonMask.addReasons(interimReasonsMask);      Set criticalExtensions=crl.getCriticalExtensionOIDs();      if (criticalExtensions != null) {        criticalExtensions=new HashSet(criticalExtensions);        criticalExtensions.remove(X509Extensions.IssuingDistributionPoint.getId());        criticalExtensions.remove(X509Extensions.DeltaCRLIndicator.getId());        if (!criticalExtensions.isEmpty()) {          throw new AnnotatedException("CRL contains unsupported critical extensions.");        }      }      if (deltaCRL != null) {        criticalExtensions=deltaCRL.getCriticalExtensionOIDs();        if (criticalExtensions != null) {          criticalExtensions=new HashSet(criticalExtensions);          criticalExtensions.remove(X509Extensions.IssuingDistributionPoint.getId());          criticalExtensions.remove(X509Extensions.DeltaCRLIndicator.getId());          if (!criticalExtensions.isEmpty()) {            throw new AnnotatedException("Delta CRL contains unsupported critical extension.");          }        }      }      validCrlFound=true;    } catch (    AnnotatedException e) {      lastException=e;    }  }  if (!validCrlFound) {    throw lastException;  }}  }
class C{  @Override public String remove(final Object key){  return null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyToGroupMap)) {    return false;  }  KeyToGroupMap that=(KeyToGroupMap)obj;  if (!ObjectUtilities.equal(this.defaultGroup,that.defaultGroup)) {    return false;  }  if (!this.keyToGroupMap.equals(that.keyToGroupMap)) {    return false;  }  return true;}  }
class C{  public static boolean isWildcardFileName(String name){  if (name.contains("*") || name.contains("?")) {    final String unescaped;    if (isWindows()) {      unescaped=name.replace("%%","%_").replace("%*","%_").replace("%?","%_");    } else {      unescaped=name.replace("\\\\","\\_").replace("\\*","\\_").replace("\\?","\\_");    }    return unescaped.contains("*") || unescaped.contains("?");  }  return false;}  }
class C{  public TeXParser(boolean isPartial,String parseString,TeXFormula formula,boolean firstpass){  this.formula=formula;  this.isPartial=isPartial;  if (parseString != null) {    this.parseString=new StringBuffer(parseString);    this.len=parseString.length();    this.pos=0;    if (firstpass) {      firstpass();    }  } else {    this.parseString=null;    this.pos=0;    this.len=0;  }}  }
class C{  private static void doSort(char[] a,int left,int right,char[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        char t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  char[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new char[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    char[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public void resumeWork(){  mExitTasksEarly=false;  setPause(false);  if (DEBUG) {    CLog.d(LOG_TAG,"work_status: resumeWork %s",this);  }}  }
class C{  protected void sequence_AnnotatedExportableElement_N4EnumDeclaration(ISerializationContext context,N4EnumDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <A>FutureWTSeq<A> of(final AnyMSeq<FutureW<A>> monads){  return new FutureWTSeq<>(monads);}  }
class C{  public static InputStream read(File f) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(f));  if (f.toString().endsWith(".bz2"))   is=new BZip2CompressorInputStream(is);  if (f.toString().endsWith(".gz"))   is=new GZIPInputStream(is);  return is;}  }
class C{  public static void writeXmlDocument(Node node,OutputStream os,String encoding,boolean omitXmlDeclaration,boolean indent,int indentAmount) throws TransformerException {  Transformer transformer=createOutputTransformer(encoding,omitXmlDeclaration,indent,indentAmount);  transformDomDocument(transformer,node,os);}  }
class C{  public static String unicodeEscape(String s){  if (allAscii(s)) {    return s;  }  StringBuilder sb=new StringBuilder(s.length());  int len=s.length();  for (int i=0; i < len; ++i) {    char ch=s.charAt(i);    if (ch <= 127) {      sb.append(ch);    } else {      sb.append("\\u");      String hexString=Integer.toHexString(ch);      int numZerosToPad=4 - hexString.length();      for (int j=0; j < numZerosToPad; ++j) {        sb.append('0');      }      sb.append(hexString);    }  }  return sb.toString();}  }
class C{  protected void processIdent(DetailAST aAST){  final int parentType=aAST.getParent().getType();  if (((parentType != TokenTypes.DOT) && (parentType != TokenTypes.METHOD_DEF)) || ((parentType == TokenTypes.DOT) && (aAST.getNextSibling() != null))) {    referenced.add(aAST.getText());  }}  }
class C{  UnixDirectoryStream(UnixPath dir,long dp,DirectoryStream.Filter<? super Path> filter){  this.dir=dir;  this.dp=dp;  this.filter=filter;}  }
class C{  @Listener @IsCancelled(Tristate.UNDEFINED) public void onPlayerJoin(ClientConnectionEvent.Login event){  if (!(Sponge.getServer().getOnlinePlayers().size() >= Sponge.getServer().getMaxPlayers())) {    return;  }  if (event.getTargetUser().hasPermission(joinFullServer)) {    if (cca.getNodeOrDefault().getReservedSlots() != -1 && Sponge.getServer().getOnlinePlayers().size() - Sponge.getServer().getMaxPlayers() >= cca.getNodeOrDefault().getReservedSlots()) {      return;    }    event.setCancelled(false);  }}  }
class C{  public void testIdempotency() throws Exception {  File lockFile=new File("testIdempotency.lock");  WriteLock wl=new WriteLock(lockFile);  for (int i=0; i < 100; i++) {    boolean locked=wl.acquire();    assertTrue("Acquire must succeed",locked);    assertTrue("File must be locked",wl.isLocked());  }  for (int i=0; i < 100; i++) {    wl.release();    assertFalse("File must not be locked",wl.isLocked());  }}  }
class C{  public SimpleDictionary(String... aWords){  words=new HashSet<String>();  for (  String word : aWords) {    words.add(word.toLowerCase());  }}  }
class C{  private static void usage(){  for (  String s : USAGE_MESSAGE) {    System.out.println(s);  }  for (  String s : WELCOME_MESSAGE) {    System.out.println(s);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String nullNS=null;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");{    boolean success=false;    try {      element.setAttributeNS(nullNS,"dom:root","test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("elementsetattributens05",success);  }}  }
class C{  private void assignTasksToContainers(int[] taskCountPerContainer,List<String> taskNamesToAssign,List<TaskGroup> containers){  for (  TaskGroup taskGroup : containers) {    for (int j=taskGroup.size(); j < taskCountPerContainer[taskGroup.getContainerId()]; j++) {      String taskName=taskNamesToAssign.remove(0);      taskGroup.addTaskName(taskName);      log.info("Assigned task {} to container {}",taskName,taskGroup.getContainerId());    }  }}  }
class C{  public Problem(String problem,String[] causes,Throwable error){  this.problem=problem;  this.causes=causes;  this.error=error;}  }
class C{  public static String convertToBitcoinURI(NetworkParameters params,String address,@Nullable Coin amount,@Nullable String label,@Nullable String message){  checkNotNull(params);  checkNotNull(address);  if (amount != null && amount.signum() < 0) {    throw new IllegalArgumentException("Coin must be positive");  }  StringBuilder builder=new StringBuilder();  String scheme=params.getUriScheme();  builder.append(scheme).append(":").append(address);  boolean questionMarkHasBeenOutput=false;  if (amount != null) {    builder.append(QUESTION_MARK_SEPARATOR).append(FIELD_AMOUNT).append("=");    builder.append(amount.toPlainString());    questionMarkHasBeenOutput=true;  }  if (label != null && !"".equals(label)) {    if (questionMarkHasBeenOutput) {      builder.append(AMPERSAND_SEPARATOR);    } else {      builder.append(QUESTION_MARK_SEPARATOR);      questionMarkHasBeenOutput=true;    }    builder.append(FIELD_LABEL).append("=").append(encodeURLString(label));  }  if (message != null && !"".equals(message)) {    if (questionMarkHasBeenOutput) {      builder.append(AMPERSAND_SEPARATOR);    } else {      builder.append(QUESTION_MARK_SEPARATOR);    }    builder.append(FIELD_MESSAGE).append("=").append(encodeURLString(message));  }  return builder.toString();}  }
class C{  private static OFActionSetNwSrc decode_set_src_ip(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))").matcher(actionToDecode);  if (n.matches()) {    IPv4Address ipaddr=IPv4Address.of(get_ip_addr(n,actionToDecode,log));    OFActionSetNwSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetNwSrc();    ab.setNwAddr(ipaddr);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  public TimingLogger(String tag,String label){  reset(tag,label);}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if ((func instanceof FuncCurrent) || (func instanceof FuncExtFunction))   m_isAbs=false;  return true;}  }
class C{  public SeekableByteChannel open(GcsPath path) throws IOException {  return new GoogleCloudStorageReadChannel(storageClient,path.getBucket(),path.getObject(),errorExtractor,new ClientRequestHelper<StorageObject>());}  }
class C{  protected void calculatePartialsPartialsPruning(double[] partials1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3,int[] matrixMap){  throw new RuntimeException("calculateStatesStatesPruning not implemented using matrixMap");}  }
class C{  @Override public String initialize(){  m_Current=0;  for (  File dataset : m_Datasets) {    if (!dataset.exists())     return "Dataset does not exist: " + dataset;    if (dataset.isDirectory())     return "Dataset points to a directory: " + dataset;  }  return null;}  }
class C{  public FacesException(String message){  super(message);}  }
class C{  public static String convertResourcePathToClassName(String resourcePath){  Assert.notNull(resourcePath,"Resource path must not be null");  return resourcePath.replace('/','.');}  }
class C{  private void gen_poly(){  int i, j;  gg[0]=2;  gg[1]=1;  for (i=2; i <= NN - KK; i++) {    gg[i]=1;    for (j=i - 1; j > 0; j--) {      if (gg[j] != 0) {        gg[j]=gg[j - 1] ^ alpha_to[(index_of[gg[j]] + i) % NN];      } else {        gg[j]=gg[j - 1];      }    }    gg[0]=alpha_to[(index_of[gg[0]] + i) % NN];  }  for (i=0; i <= NN - KK; i++) {    gg[i]=index_of[gg[i]];  }}  }
class C{  @DSSafe(DSCat.IPC_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.497 -0500",hash_original_method="4ADFD820FBAEE3B9207F7288ABB2B3FA",hash_generated_method="DBD9934380248D13C69A49A59A76507F") @Override public void handleMessage(Message msg){  AsyncResult ar;switch (msg.what) {case EVENT_ICC_FULL:    handleIccFull();  break;case EVENT_REPORT_MEMORY_STATUS_DONE:ar=(AsyncResult)msg.obj;if (ar.exception != null) {mReportMemoryStatusPending=true;Log.v(TAG,"Memory status report to modem pending : mStorageAvailable = " + mStorageAvailable);} else {mReportMemoryStatusPending=false;}break;case EVENT_RADIO_ON:if (mReportMemoryStatusPending) {Log.v(TAG,"Sending pending memory status report : mStorageAvailable = " + mStorageAvailable);mCm.reportSmsMemoryStatus(mStorageAvailable,obtainMessage(EVENT_REPORT_MEMORY_STATUS_DONE));}break;}}  }
class C{  public static QueryTask.QuerySpecification buildChildServiceTaskStatusQuerySpec(final String selfLink,final Class childClass,final TaskState.TaskStage... stages){  checkArgument(stages != null && stages.length >= 1,"stages.length must be >= 1");  QueryTask.Query parentLinkClause=new QueryTask.Query().setTermPropertyName(PARENT_LINK_FIELD_NAME).setTermMatchValue(selfLink);  QueryTask.QuerySpecification spec=buildTaskStatusQuerySpec(childClass,stages);  spec.query.addBooleanClause(parentLinkClause);  return spec;}  }
class C{  public IgfsLocalMetrics metrics(){  return metrics;}  }
class C{  Shape adjustPaintRegion(Shape a){  return adjustAllocation(a);}  }
class C{  public boolean isRemoved(){  return this.removed;}  }
class C{  public void run(){  while (true) {    try {      handleIncomingData();    } catch (    java.io.IOException e) {      log.warn("run: Exception: " + e.toString());    }  }}  }
class C{  private Object toDate(final Class type,final long value){  if (type.equals(Date.class)) {    return new Date(value);  }  if (type.equals(java.sql.Date.class)) {    return new java.sql.Date(value);  }  if (type.equals(java.sql.Time.class)) {    return new java.sql.Time(value);  }  if (type.equals(java.sql.Timestamp.class)) {    return new java.sql.Timestamp(value);  }  if (type.equals(Calendar.class)) {    Calendar calendar=null;    if (this.locale == null && this.timeZone == null) {      calendar=Calendar.getInstance();    } else     if (this.locale == null) {      calendar=Calendar.getInstance(this.timeZone);    } else     if (this.timeZone == null) {      calendar=Calendar.getInstance(this.locale);    } else {      calendar=Calendar.getInstance(this.timeZone,this.locale);    }    calendar.setTime(new Date(value));    calendar.setLenient(false);    return calendar;  }  String msg=this.toString(this.getClass()) + " cannot handle conversion to '" + this.toString(type)+ "'";  throw new ConversionException(msg);}  }
class C{  @Override public void displayCursor(Cursor cursor){  mAdapter.changeCursor(cursor);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case BONK:    return isSetBonk();}throw new IllegalStateException();}  }
class C{  public static String[] detectCleanMovienameAndYear(String filename){  String[] ret={"",""};  LOGGER.trace("Parse filename for movie title: \"" + filename + "\"");  if (filename == null || filename.isEmpty()) {    LOGGER.warn("Filename empty?!");    return ret;  }  String fname=filename.replaceFirst("\\.\\w{2,4}$","");  fname=fname.replaceFirst("(?i)\\W\\d{3,4}x\\d{3,4}"," ");  for (  String cw : cleanwords) {    fname=fname.replaceFirst("(?i)\\W" + cw," ");  }  LOGGER.trace("--------------------");  LOGGER.trace("IN:  " + fname);  List<String> opt=new ArrayList<String>();  Pattern p=Pattern.compile("\\[(.*?)\\]");  Matcher m=p.matcher(fname);  while (m.find()) {    LOGGER.trace("OPT: " + m.group(1));    String[] o=StringUtils.split(m.group(1),DELIMITER);    opt.addAll(Arrays.asList(o));    fname=fname.replace(m.group(),"");  }  LOGGER.trace("ARR: " + opt);  String[] s=StringUtils.split(fname,DELIMITER);  if (s.length == 0) {    s=opt.toArray(new String[opt.size()]);  }  int firstFoundStopwordPosition=s.length;  for (int i=0; i < s.length; i++) {    for (    String stop : stopwords) {      if (s[i].equalsIgnoreCase(stop)) {        s[i]="";        if (i < firstFoundStopwordPosition && i >= 2) {          firstFoundStopwordPosition=i;        }      }    }    if (Utils.isValidImdbId(s[i])) {      s[i]="";    }  }  int currentYear=Calendar.getInstance().get(Calendar.YEAR);  String year="";  for (int i=s.length - 1; i > 0; i--) {    if (s[i].matches("\\d{4}")) {      int parsedYear=Integer.parseInt(s[i]);      if (parsedYear > 1800 && parsedYear < currentYear + 5) {        LOGGER.trace("removed token '" + s[i] + "'- seems to be year");        year=s[i];        s[i]="";        break;      }    }  }  if (year.isEmpty()) {    for (    String o : opt) {      if (o.matches("\\d{4}")) {        int parsedYear=Integer.parseInt(o);        if (parsedYear > 1800 && parsedYear < currentYear + 5) {          year=String.valueOf(parsedYear);          LOGGER.trace("found possible year " + o);        }      }    }  }  String name="";  for (int i=0; i < firstFoundStopwordPosition; i++) {    if (!s[i].isEmpty()) {      if (!MovieModuleManager.MOVIE_SETTINGS.getBadWords().contains(s[i].toLowerCase())) {        String word=s[i];switch (word.toUpperCase()) {case "I":case "II":case "III":case "IV":case "V":case "VI":case "VII":case "VIII":case "IX":case "X":          name=name + word.toUpperCase() + " ";        break;default :      name=name + WordUtils.capitalizeFully(word) + " ";    break;}}}}if (name.isEmpty()) {ret[0]=fname;} else {ret[0]=name.trim();}ret[1]=year.trim();LOGGER.trace("Movie title should be: \"" + ret[0] + "\", from "+ ret[1]);return ret;}  }
class C{  public static boolean isWildcard(String format){  String routerUrl=cleanUrl(format);  String[] routerParts=routerUrl.split("/");  for (  String routerPart : routerParts) {    if (routerPart.length() > 2 && routerPart.charAt(0) == ':' && routerPart.charAt(routerPart.length() - 1) == ':') {      return true;    }  }  return false;}  }
class C{  public String transformFieldDescriptor(String owner,String name,String desc){  return DescriptorMapping.getInstance().getFieldDesc(owner,name,desc);}  }
class C{  @Transient public boolean isDirty(){  for (  IndicatorSeries item : this.getIndicatorSeries()) {    if (item.isDirty())     return true;  }  return super.isDirty();}  }
class C{  public AWTTerminalFrame(String title,TerminalSize terminalSize,TerminalEmulatorDeviceConfiguration deviceConfiguration,AWTTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalEmulatorAutoCloseTrigger... autoCloseTriggers){  this(title,new AWTTerminal(terminalSize,deviceConfiguration,fontConfiguration,colorConfiguration),autoCloseTriggers);}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,ConnectionSource connectionSource,int oldVersion,int newVersion){  try {    Log.i(DatabaseHelper.class.getName(),"onUpgrade");    TableUtils.dropTable(connectionSource,AddressBook.class,true);    TableUtils.dropTable(connectionSource,AddressItem.class,true);    TableUtils.dropTable(connectionSource,Contact.class,true);    TableUtils.dropTable(connectionSource,SimpleAddressItem.class,true);    onCreate(db,connectionSource);  } catch (  SQLException e) {    Log.e(DatabaseHelper.class.getName(),"Can't drop databases",e);    throw new RuntimeException(e);  }}  }
class C{  public CorrelationMatrix(ICovarianceMatrix matrix){  this(matrix.getVariables(),matrix.getMatrix().copy(),matrix.getSampleSize());}  }
class C{  private static boolean isNodeAfterSibling(Node parent,Node child1,Node child2){  boolean isNodeAfterSibling=false;  short child1type=child1.getNodeType();  short child2type=child2.getNodeType();  if ((Node.ATTRIBUTE_NODE != child1type) && (Node.ATTRIBUTE_NODE == child2type)) {    isNodeAfterSibling=false;  } else   if ((Node.ATTRIBUTE_NODE == child1type) && (Node.ATTRIBUTE_NODE != child2type)) {    isNodeAfterSibling=true;  } else   if (Node.ATTRIBUTE_NODE == child1type) {    NamedNodeMap children=parent.getAttributes();    int nNodes=children.getLength();    boolean found1=false, found2=false;    for (int i=0; i < nNodes; i++) {      Node child=children.item(i);      if (child1 == child || isNodeTheSame(child1,child)) {        if (found2) {          isNodeAfterSibling=false;          break;        }        found1=true;      } else       if (child2 == child || isNodeTheSame(child2,child)) {        if (found1) {          isNodeAfterSibling=true;          break;        }        found2=true;      }    }  } else {    Node child=parent.getFirstChild();    boolean found1=false, found2=false;    while (null != child) {      if (child1 == child || isNodeTheSame(child1,child)) {        if (found2) {          isNodeAfterSibling=false;          break;        }        found1=true;      } else       if (child2 == child || isNodeTheSame(child2,child)) {        if (found1) {          isNodeAfterSibling=true;          break;        }        found2=true;      }      child=child.getNextSibling();    }  }  return isNodeAfterSibling;}  }
class C{  public RegistryKey fetchSystemRegistry() throws WineException {  return parseRegistryFile(SYSTEM_REGISTRY_FILENAME,SYSTEM_REGISTRY_NODENAME);}  }
class C{  @Override public void onPause(){  if (Camera != null)   Camera.shutdown();  Camera=null;  if (SnapHandler != null)   SnapHandler.shutdown();  SnapHandler=null;  super.onPause();}  }
class C{  private static void shiftLocalSlots(InsnList instructions,int offset){  for (  AbstractInsnNode insn : selectAll(instructions)) {    if (insn instanceof VarInsnNode) {      VarInsnNode varInsn=(VarInsnNode)insn;      varInsn.var+=offset;    } else     if (insn instanceof IincInsnNode) {      IincInsnNode iincInsn=(IincInsnNode)insn;      iincInsn.var+=offset;    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MLandedCost[");  sb.append(get_ID()).append(",CostDistribution=").append(getLandedCostDistribution()).append(",M_CostElement_ID=").append(getM_CostElement_ID());  if (getM_InOut_ID() != 0)   sb.append(",M_InOut_ID=").append(getM_InOut_ID());  if (getM_InOutLine_ID() != 0)   sb.append(",M_InOutLine_ID=").append(getM_InOutLine_ID());  if (getM_Product_ID() != 0)   sb.append(",M_Product_ID=").append(getM_Product_ID());  sb.append("]");  return sb.toString();}  }
class C{  public boolean isPreDestroyCalled(){  return this.preDestroyCalled;}  }
class C{  public Map<String,Object> addToCart(String catalogId,String shoppingListId,String shoppingListItemSeqId,String productId,String productCategoryId,String itemType,String itemDescription,BigDecimal price,BigDecimal amount,BigDecimal quantity,java.sql.Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,java.sql.Timestamp shipBeforeDate,java.sql.Timestamp shipAfterDate,ProductConfigWrapper configWrapper,String itemGroupNumber,Map<String,? extends Object> context,String parentProductId){  return addToCart(catalogId,shoppingListId,shoppingListItemSeqId,productId,productCategoryId,itemType,itemDescription,price,amount,quantity,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,configWrapper,itemGroupNumber,context,parentProductId);}  }
class C{  private void hideFootView(){  if (loadmoreView != null) {    loadmoreView.setVisibility(View.GONE);  }}  }
class C{  public Variable decode(Variable variable,String string){  if (variable instanceof RealVariable) {    RealVariable rv=(RealVariable)variable;    rv.setValue(Double.parseDouble(string));    return rv;  } else   if (variable instanceof BinaryVariable) {    BinaryVariable bv=(BinaryVariable)variable;    if (bv.getNumberOfBits() != string.length()) {      throw new FrameworkException("invalid bit string");    }    for (int i=0; i < bv.getNumberOfBits(); i++) {      char c=string.charAt(i);      if (c == '0') {        bv.set(i,false);      } else       if (c == '1') {        bv.set(i,true);      } else {        throw new FrameworkException("invalid bit string");      }    }    return bv;  } else   if (variable instanceof Permutation) {    Permutation p=(Permutation)variable;    String[] tokens=string.split(",");    int[] array=new int[tokens.length];    for (int i=0; i < tokens.length; i++) {      array[i]=Integer.parseInt(tokens[i]);    }    try {      p.fromArray(array);    } catch (    IllegalArgumentException e) {      throw new FrameworkException("invalid permutation",e);    }    return p;  } else {    if (string.equals("-")) {      if (!printedWarning) {        System.err.println(ENCODING_WARNING);        printedWarning=true;      }      return variable;    } else {      try {        return deserialize(string);      } catch (      Exception e) {        throw new FrameworkException("deserialization failed",e);      }    }  }}  }
class C{  public boolean checkDuration(@Nonnull final Notification notification){  if (!rule.getMaxDuration().isPresent()) {    return true;  }  if (maxDuration > 0 && firstMillis > 0) {    final long delta=firstMillis - notification.getCreatedAt().getMillis();    if (delta >= 0 && delta <= maxDuration) {      return true;    }  }  return false;}  }
class C{  private int indexOfNextDelimiter(int start){  char c;  int next;  for (next=start; (c=text.charAt(next)) > maxDelimChar || ((nontokenDelims == null || nontokenDelims.indexOf(c) == -1) && (tokenDelims == null || tokenDelims.indexOf(c) == -1)); next++) {    if (next == strLength - 1) {      return (-1);    }  }  return next;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  private void saveTableVersion(int t_version){  Context ctx=mDb.getContext();  SharedPreferences tableVersions=ctx.getSharedPreferences(PREFS_TABLE_VERSION,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=tableVersions.edit();  editor.putInt(mTableName,t_version);  editor.commit();}  }
class C{  private String processIntegerToken(String token){  String result=token.replaceAll("" + groupSeparator,"");  boolean isNegative=false;  int preLen=negativePrefix.length();  if ((preLen > 0) && result.startsWith(negativePrefix)) {    isNegative=true;    result=result.substring(preLen);  }  int sufLen=negativeSuffix.length();  if ((sufLen > 0) && result.endsWith(negativeSuffix)) {    isNegative=true;    result=result.substring(result.length() - sufLen,result.length());  }  if (isNegative)   result="-" + result;  return result;}  }
class C{  @Override public void init(){  if (!_initialized) {    if (!jmri.util.ThreadingUtil.isGUIThread())     log.error("Not on GUI thread",new Exception("traceback"));    Thread.yield();    _update=false;    _supressDragging=false;    makeBottomPanel(null);    super.init();  }}  }
class C{  public boolean isPolarized(){  return polarity != null && polarity != Polarity.BOTH;}  }
class C{  public double eval(double params[]){  return (Math.min(Math.min(params[0],params[1]),Math.min(params[2],params[3])));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoUserRecUa[");  buffer.append("m_stat = ").append(m_stat);  buffer.append(", m_numBadCnts = ").append(m_numBadCnts);  buffer.append("]");  return buffer.toString();}  }
class C{  public String encode(String value){  return doubleMetaphone(value);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  object=fields.get("object",null);  baseTypeName=(String)fields.get("baseTypeName",null);  reference=(Ref)fields.get("reference",null);}  }
class C{  public boolean isUsePercentValuesEnabled(){  return mUsePercentValues;}  }
class C{  private final boolean handleBlockedWrite(ByteBuffer buffer,DistributionMessage msg) throws ConnectionException {  if (!addToQueue(buffer,msg,true)) {    return false;  } else {    startNioPusher();    return true;  }}  }
class C{  public static Test suite(){  return new TestSuite(InterquartileRangeTest.class);}  }
class C{  public static Map<String,String> convertListToMap(List<LabelValue> list){  Map<String,String> map=new LinkedHashMap<String,String>();  for (  LabelValue option : list) {    map.put(option.getLabel(),option.getValue());  }  return map;}  }
class C{  @Override public ManagedConnection createManagedConnection(final Subject subject,final ConnectionRequestInfo cxRequestInfo) throws ResourceException {  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("createManagedConnection(" + subject + ", "+ cxRequestInfo+ ")");  }  ActiveMQRAConnectionRequestInfo cri=getCRI((ActiveMQRAConnectionRequestInfo)cxRequestInfo);  ActiveMQRACredential credential=ActiveMQRACredential.getCredential(this,subject,cri);  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("jms credential: " + credential);  }  ActiveMQRAManagedConnection mc=new ActiveMQRAManagedConnection(this,cri,ra,credential.getUserName(),credential.getPassword());  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("created new managed connection: " + mc);  }  registerRecovery();  return mc;}  }
class C{  RandomAccessFile openInputFile(String fileName) throws IOException {  RandomAccessFile raf;  raf=openInputFileAsZip(fileName);  if (raf == null) {    File inputFile=new File(fileName);    raf=new RandomAccessFile(inputFile,"r");  }  return raf;}  }
class C{  public VmPipeAddress(int port){  this.port=port;}  }
class C{  public void addFilter(PacketFilter filter){  if (filter == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  filters.add(filter);}  }
class C{  public ByteQueue(int chunkSize){  this.chunkSize=chunkSize;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.402 -0500",hash_original_method="CD47D8147DAAE254C6F8BD59780442CD",hash_generated_method="94EC0761D9B928E7003FF2BDA1042097") @Override protected void onCleanUpAllConnections(String cause){  cleanUpAllConnections(true,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.858 -0500",hash_original_method="FF10597CCF521EBE62B89D95947AA842",hash_generated_method="C08A570AB37737F096BEEA638CE020CD") public void readOctetString() throws IOException {  if (tag == ASN1Constants.TAG_OCTETSTRING) {    readContent();  } else   if (tag == ASN1Constants.TAG_C_OCTETSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 octet string type is not supported");  } else {    throw expected("octetstring");  }}  }
class C{  public Vector4i div(Vector4i v,Vector4i dest){  dest.x=x / v.x;  dest.y=y / v.y;  dest.z=z / v.z;  dest.w=w / v.w;  return dest;}  }
class C{  public void testExportDelete() throws Exception {  String parentDirectory="/ifs/";  int dirCount=_client.listDir(parentDirectory,null).size();  System.out.println("Directories count in " + parentDirectory + " is: "+ dirCount);}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  @GET @Path("/postConversation") @Produces(MediaType.APPLICATION_JSON) public Response postConversation(@QueryParam("conversationId") String conversationId,@QueryParam("clientId") String clientId,@QueryParam("input") String input){  long lStartTime=System.nanoTime();  long lEndTime, difference;  String errorMessage=null, issue=null;  String wdsMessage=null;  JsonObject processedText=null;  if (input == null || input.trim().isEmpty()) {    errorMessage=Messages.getString("WDSBlueMixProxyResource.SPECIFY_INPUT");    issue=Messages.getString("WDSBlueMixProxyResource.EMPTY_QUESTION");    UtilityFunctions.logger.error(issue);    return Response.serverError().entity(new ServerErrorPayload(errorMessage,issue)).build();  }  try {    List<ClassifiedClass> classInfo=null;    if (nlcService != null) {      if (UtilityFunctions.logger.isTraceEnabled()) {        UtilityFunctions.logger.trace(Messages.getString("WDSBlueMixProxyResource.NLC_SERVICE"));      }      Classification classification=nlcService.classify(classifier_id,input);      classInfo=classification.getClasses();      Map<String,String> profile=new HashMap<>();      profile.put("Class1",classInfo.get(0).getName());      profile.put("Class1_Confidence",Double.toString(classInfo.get(0).getConfidence()));      profile.put("Class2",classInfo.get(1).getName());      profile.put("Class2_Confidence",Double.toString(classInfo.get(1).getConfidence()));      dialogService.updateProfile(dialog_id,new Integer(clientId),profile);    }    Map<String,Object> converseParams=new HashMap<String,Object>();    converseParams.put("dialog_id",dialog_id);    converseParams.put("client_id",Integer.parseInt(clientId));    converseParams.put("conversation_id",Integer.parseInt(conversationId));    converseParams.put("input",input);    Conversation conversation=dialogService.converse(converseParams);    wdsMessage=StringUtils.join(conversation.getResponse()," ");    processedText=matchSearchNowPattern(wdsMessage);    WDSConversationPayload conversationPayload=new WDSConversationPayload();    if (!processedText.has("Params")) {      conversationPayload.setClientId(clientId);      conversationPayload.setConversationId(clientId);      conversationPayload.setInput(input);      conversationPayload.setWdsResponse(processedText.get("WDSMessage").getAsString());      if (UtilityFunctions.logger.isTraceEnabled()) {        lEndTime=System.nanoTime();        difference=lEndTime - lStartTime;        UtilityFunctions.logger.trace("Throughput: " + difference / 1000000 + "ms.");      }      return Response.ok(conversationPayload,MediaType.APPLICATION_JSON_TYPE).build();    } else {      JsonObject paramsObj=processedText.getAsJsonObject("Params");      boolean newSearch=false, prevSearch=false, nextSearch=false, repeatSearch=false;      String page=paramsObj.get("Page").getAsString();switch (page) {case "new":        newSearch=true;      break;case "next":    nextSearch=true;  break;case "previous":prevSearch=true;break;case "repeat":repeatSearch=true;break;default :errorMessage=Messages.getString("WDSBlueMixProxyResource.DIALOG_UNDERSTAND_FAIL");issue=Messages.getString("WDSBlueMixProxyResource.PAGE_TYPE_NOT_UNDERSTOOD");UtilityFunctions.logger.error(issue);}if (UtilityFunctions.logger.isTraceEnabled()) {UtilityFunctions.logger.trace(Messages.getString("WDSBlueMixProxyResource.WDS_RESPONSE") + paramsObj);}String prompt;Integer currentIndex=Integer.parseInt(paramsObj.get("Index").getAsString());Integer numMovies=0;Integer totalPages=0;boolean tmdbCallNeeded=true;Map<String,String> profile;if (paramsObj.has("Total_Movies")) {numMovies=Integer.parseInt(paramsObj.get("Total_Movies").getAsString());totalPages=Integer.parseInt(paramsObj.get("Total_Pages").getAsString());tmdbCallNeeded=!((currentIndex <= 10 && prevSearch) || (currentIndex == numMovies && nextSearch));}if (tmdbCallNeeded) {int pageNum=(int)Math.ceil((float)currentIndex / 20);if ((nextSearch || newSearch) && (currentIndex % 20) == 0) {pageNum++;}if (prevSearch && (currentIndex % 20 <= 10 && (currentIndex % 20 != 0))) {pageNum--;}int currentDisplayCount=(currentIndex % 10 == 0) ? 10 : currentIndex % 10;SearchTheMovieDbProxyResource tmdb=new SearchTheMovieDbProxyResource();conversationPayload=tmdb.discoverMovies(UtilityFunctions.getPropValue(paramsObj,"Genre"),UtilityFunctions.getPropValue(paramsObj,"Rating"),UtilityFunctions.getPropValue(paramsObj,"Recency"),currentIndex,pageNum,nextSearch || newSearch);int size=conversationPayload.getMovies().size();if (prevSearch) {currentIndex-=currentDisplayCount;} else if (nextSearch || newSearch) {currentIndex+=size;}profile=new HashMap<>();profile.put("Current_Index",currentIndex.toString());profile.put("Total_Pages",conversationPayload.getTotalPages().toString());profile.put("Num_Movies",conversationPayload.getNumMovies().toString());dialogService.updateProfile(dialog_id,new Integer(clientId),profile);}if (!tmdbCallNeeded) {profile=new HashMap<>();profile.put("Index_Updated","No");dialogService.updateProfile(dialog_id,new Integer(clientId),profile);List<MoviePayload> movies=new ArrayList<MoviePayload>();conversationPayload.setMovies(movies);conversationPayload.setNumMovies(numMovies);conversationPayload.setTotalPages(totalPages);}prompt=personalized_prompt_current_index;if (newSearch || repeatSearch) {prompt=personalized_prompt_movies_returned;}converseParams=new HashMap<String,Object>();converseParams.put("dialog_id",dialog_id);converseParams.put("client_id",Integer.parseInt(clientId));converseParams.put("conversation_id",Integer.parseInt(conversationId));converseParams.put("input",prompt);conversation=dialogService.converse(converseParams);wdsMessage=StringUtils.join(conversation.getResponse()," ");conversationPayload.setWdsResponse(wdsMessage);conversationPayload.setClientId(clientId);conversationPayload.setConversationId(clientId);conversationPayload.setInput(input);if (UtilityFunctions.logger.isTraceEnabled()) {lEndTime=System.nanoTime();difference=lEndTime - lStartTime;UtilityFunctions.logger.trace("Throughput: " + difference / 1000000 + "ms.");}return Response.ok(conversationPayload,MediaType.APPLICATION_JSON_TYPE).build();}} catch (ClientProtocolException e) {errorMessage=Messages.getString("WDSBlueMixProxyResource.API_CALL_NOT_EXECUTED");issue=Messages.getString("WDSBlueMixProxyResource.CLIENT_EXCEPTION_IN_GET_RESPONSE");UtilityFunctions.logger.error(issue,e);}catch (IllegalStateException e) {errorMessage=Messages.getString("WDSBlueMixProxyResource.API_CALL_NOT_EXECUTED");issue=Messages.getString("WDSBlueMixProxyResource.ILLEGAL_STATE_GET_RESPONSE");UtilityFunctions.logger.error(issue,e);}catch (IOException e) {errorMessage=Messages.getString("WDSBlueMixProxyResource.API_CALL_NOT_EXECUTED");issue=Messages.getString("WDSBlueMixProxyResource.IO_EXCEPTION_GET_RESPONSE");UtilityFunctions.logger.error(issue,e);}catch (HttpException e) {errorMessage=Messages.getString("WDSBlueMixProxyResource.TMDB_API_CALL_NOT_EXECUTED");issue=Messages.getString("WDSBlueMixProxyResource.HTTP_EXCEPTION_GET_RESPONSE");UtilityFunctions.logger.error(issue,e);}catch (WatsonTheatersException e) {errorMessage=e.getErrorMessage();issue=e.getIssue();UtilityFunctions.logger.error(issue,e);}catch (URISyntaxException e) {errorMessage=Messages.getString("WDSBlueMixProxyResource.TMDB_URL_INCORRECT");issue=Messages.getString("WDSBlueMixProxyResource.URI_EXCEPTION_IN_DISOVERMOVIE");UtilityFunctions.logger.error(issue,e);}catch (ParseException e) {errorMessage=Messages.getString("WDSBlueMixProxyResource.TMDB_RESPONSE_PARSE_FAIL");issue=Messages.getString("WDSBlueMixProxyResource.PARSE_EXCEPTION_TMDB_GET");UtilityFunctions.logger.error(issue,e);}return Response.serverError().entity(new ServerErrorPayload(errorMessage,issue)).build();}  }
class C{  public void addSource(Fact predecessor){  sources.add(predecessor);  if (predecessor.isInference()) {    sourceNodes.addAll(predecessor.getDerivation().sourceNodes);  }}  }
class C{  private void handleIncrementalEvent(){  if (m_executorPool != null && (m_executorPool.getQueue().size() > 0 || m_executorPool.getActiveCount() > 0)) {    String messg="[Classifier] " + statusMessagePrefix() + " is currently batch training!";    if (m_log != null) {      m_log.logMessage(messg);      m_log.statusMessage(statusMessagePrefix() + "WARNING: " + "Can't accept instance - batch training in progress.");    } else {      System.err.println(messg);    }    return;  }  if (m_incrementalEvent.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    m_throughput=new StreamThroughput(statusMessagePrefix());    if (m_log != null) {      m_log.statusMessage(statusMessagePrefix() + "remove");    }    Instances dataset=m_incrementalEvent.getStructure();    if (dataset.classIndex() < 0) {      stop();      String errorMessage=statusMessagePrefix() + "ERROR: no class attribute set in incoming stream!";      if (m_log != null) {        m_log.statusMessage(errorMessage);        m_log.logMessage("[" + getCustomName() + "] "+ errorMessage);      } else {        System.err.println("[" + getCustomName() + "] "+ errorMessage);      }      return;    }    if (m_loadModelFileName != null && m_loadModelFileName.length() > 0 && m_state == IDLE && !m_listenees.containsKey("trainingSet")) {      String resolvedFileName=m_loadModelFileName;      if (m_env != null) {        try {          resolvedFileName=m_env.substitute(resolvedFileName);        } catch (        Exception ex) {        }      }      File loadFrom=new File(resolvedFileName);      try {        loadFromFile(loadFrom);      } catch (      Exception ex) {        m_log.statusMessage(statusMessagePrefix() + "WARNING: unable to load " + "model (see log).");        m_log.logMessage("[Classifier] " + statusMessagePrefix() + "Problem loading classifier - training from scratch... "+ ex.getMessage());      }    }    try {      if (m_trainingSet == null || !m_trainingSet.equalHeaders(dataset) || m_resetIncrementalClassifier) {        if (!(m_ClassifierTemplate instanceof weka.classifiers.UpdateableClassifier) && !(m_ClassifierTemplate instanceof weka.classifiers.misc.InputMappedClassifier)) {          stop();          if (m_log != null) {            String msg=(m_trainingSet == null) ? statusMessagePrefix() + "ERROR: classifier has not been batch " + "trained; can't process instance events." : statusMessagePrefix() + "ERROR: instance event's structure is different from " + "the data that "+ "was used to batch train this classifier; can't continue.";            m_log.logMessage("[Classifier] " + msg);            m_log.statusMessage(msg);          }          return;        }        if (m_ClassifierTemplate instanceof weka.classifiers.misc.InputMappedClassifier) {          m_trainingSet=((weka.classifiers.misc.InputMappedClassifier)m_Classifier).getModelHeader(m_trainingSet);        }        if (m_trainingSet != null && (!dataset.equalHeaders(m_trainingSet))) {          if (m_log != null) {            String msg=statusMessagePrefix() + " WARNING : structure of instance events differ " + "from data used in batch training this "+ "classifier. Resetting classifier...";            m_log.logMessage("[Classifier] " + msg);            m_log.statusMessage(msg);          }          m_trainingSet=null;        }        if (m_resetIncrementalClassifier) {          if (m_log != null) {            String msg=statusMessagePrefix() + " Reseting incremental classifier";            m_log.logMessage("[Classifier] " + msg);            m_log.statusMessage(msg);          }          m_trainingSet=null;        }        if (m_trainingSet == null) {          m_trainingSet=new Instances(dataset,0);          m_Classifier=weka.classifiers.AbstractClassifier.makeCopy(m_ClassifierTemplate);          if (m_Classifier instanceof EnvironmentHandler && m_env != null) {            ((EnvironmentHandler)m_Classifier).setEnvironment(m_env);          }          m_Classifier.buildClassifier(m_trainingSet);        }      }    } catch (    Exception ex) {      stop();      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");        m_log.logMessage("[Classifier] " + statusMessagePrefix() + " problem during incremental processing. "+ ex.getMessage());      }      ex.printStackTrace();      return;    }    if (!m_incrementalEvent.m_formatNotificationOnly) {      String msg=m_updateIncrementalClassifier ? statusMessagePrefix() + "Training incrementally..." : statusMessagePrefix() + "Predicting incrementally...";      if (m_log != null) {        m_log.statusMessage(msg);      }    }    System.err.println("NOTIFYING NEW BATCH");    m_ie.setStructure(dataset);    m_ie.setClassifier(m_Classifier);    notifyIncrementalClassifierListeners(m_ie);    return;  } else {    if (m_trainingSet == null) {      return;    }  }  try {    if (m_incrementalEvent.getInstance() != null) {      if (m_incrementalEvent.getInstance().dataset().classIndex() < 0) {        m_incrementalEvent.getInstance().dataset().setClassIndex(m_incrementalEvent.getInstance().dataset().numAttributes() - 1);      }    }    int status=IncrementalClassifierEvent.WITHIN_BATCH;    if (m_incrementalEvent.getStatus() == InstanceEvent.BATCH_FINISHED || m_incrementalEvent.getInstance() == null) {      status=IncrementalClassifierEvent.BATCH_FINISHED;    }    if (m_incrementalEvent.getInstance() != null) {      m_throughput.updateStart();    }    m_ie.setStatus(status);    m_ie.setClassifier(m_Classifier);    m_ie.setCurrentInstance(m_incrementalEvent.getInstance());    if (status == InstanceEvent.BATCH_FINISHED && m_Classifier instanceof UpdateableBatchProcessor) {      ((UpdateableBatchProcessor)m_Classifier).batchFinished();    }    notifyIncrementalClassifierListeners(m_ie);    if (m_ClassifierTemplate instanceof weka.classifiers.UpdateableClassifier && m_updateIncrementalClassifier == true && m_incrementalEvent.getInstance() != null && !(m_incrementalEvent.getInstance().isMissing(m_incrementalEvent.getInstance().dataset().classIndex()))) {      ((weka.classifiers.UpdateableClassifier)m_Classifier).updateClassifier(m_incrementalEvent.getInstance());    }    if (m_incrementalEvent.getInstance() != null) {      m_throughput.updateEnd(m_log);    }    if (m_incrementalEvent.getStatus() == InstanceEvent.BATCH_FINISHED || m_incrementalEvent.getInstance() == null) {      if (m_textListeners.size() > 0) {        String modelString=m_Classifier.toString();        String titleString=m_Classifier.getClass().getName();        titleString=titleString.substring(titleString.lastIndexOf('.') + 1,titleString.length());        modelString="=== Classifier model ===\n\n" + "Scheme:   " + titleString + "\n"+ "Relation: "+ m_trainingSet.relationName()+ "\n\n"+ modelString;        titleString="Model: " + titleString;        TextEvent nt=new TextEvent(this,modelString,titleString);        notifyTextListeners(nt);      }      m_throughput.finished(m_log);    }  } catch (  Exception ex) {    stop();    if (m_log != null) {      m_log.logMessage("[Classifier] " + statusMessagePrefix() + ex.getMessage());      m_log.statusMessage(statusMessagePrefix() + "ERROR (see log for details)");      ex.printStackTrace();    } else {      ex.printStackTrace();    }  }}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  try {    SVGOMEllipseElement ee=(SVGOMEllipseElement)e;    AbstractSVGAnimatedLength _cx=(AbstractSVGAnimatedLength)ee.getCx();    float cx=_cx.getCheckedValue();    AbstractSVGAnimatedLength _cy=(AbstractSVGAnimatedLength)ee.getCy();    float cy=_cy.getCheckedValue();    AbstractSVGAnimatedLength _rx=(AbstractSVGAnimatedLength)ee.getRx();    float rx=_rx.getCheckedValue();    AbstractSVGAnimatedLength _ry=(AbstractSVGAnimatedLength)ee.getRy();    float ry=_ry.getCheckedValue();    shapeNode.setShape(new Ellipse2D.Float(cx - rx,cy - ry,rx * 2,ry * 2));  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  protected boolean isLog4JAvailable(){  return isLogLibraryAvailable("Log4J",LOGGING_IMPL_LOG4J_LOGGER);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  Node secondPart;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(7);  secondPart=textNode.getNextSibling();  value=secondPart.getNodeValue();  assertEquals("textSplitTextOneAssert","Jones",value);}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications/{notificationId}/triggers/{triggerId}") @Description("Associates the trigger having the given ID to the given notification ID.  Both the trigger and notification must be owned by the alert.") public TriggerDto addTriggerToNotification(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("notificationId") BigInteger notificationId,@PathParam("triggerId") BigInteger triggerId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationId == null || notificationId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Notification Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (triggerId == null || triggerId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Trigger Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Notification notification=null;  Trigger alertTrigger=null;  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert == null) {    throw new WebApplicationException(Status.NOT_FOUND.getReasonPhrase(),Status.NOT_FOUND);  }  validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));  for (  Notification tempNotification : alert.getNotifications()) {    if (tempNotification.getId().equals(notificationId)) {      notification=tempNotification;      break;    }  }  if (notification == null) {    throw new WebApplicationException("Notification Id does not exist for this alert.",Status.BAD_REQUEST);  }  for (  Trigger tempTrigger : alert.getTriggers()) {    if (tempTrigger.getId().equals(triggerId)) {      alertTrigger=tempTrigger;      break;    }  }  if (alertTrigger == null) {    throw new WebApplicationException("Trigger Id does not exist for this alert. Create a trigger first then add it to the notification",Status.BAD_REQUEST);  }  for (  Trigger tempTrigger : notification.getTriggers()) {    if (tempTrigger.getId().equals(triggerId)) {      throw new WebApplicationException("This trigger already exists for the notification.",Status.BAD_REQUEST);    }  }  List<Trigger> list=new ArrayList<Trigger>(notification.getTriggers());  list.add(alertTrigger);  notification.setTriggers(list);  alert.setModifiedBy(getRemoteUser(req));  alert=alertService.updateAlert(alert);  for (  Notification tempNotification : alert.getNotifications()) {    if (tempNotification.getId().equals(notificationId)) {      for (      Trigger tempTrigger : notification.getTriggers()) {        if (tempTrigger.getId().equals(triggerId)) {          return TriggerDto.transformToDto(tempTrigger);        }      }    }  }  throw new WebApplicationException("Trigger update failed.",Status.INTERNAL_SERVER_ERROR);}  }
class C{  public float[][] calc(float[] xpoints,float[] ypoints){  float[][] res=new float[2][0];  if (xpoints.length > 2) {    Cubic[] X=calcNaturalCubic(xpoints.length - 1,xpoints);    Cubic[] Y=calcNaturalCubic(ypoints.length - 1,ypoints);    Polygon p=new Polygon();    p.addPoint((int)Math.round(X[0].eval(0)),(int)Math.round(Y[0].eval(0)));    for (int i=0; i < X.length; i++) {      for (int j=1; j <= steps; j++) {        float u=j / (float)steps;        p.addPoint(Math.round(X[i].eval(u)),Math.round(Y[i].eval(u)));      }    }    res[0]=new float[p.npoints];    res[1]=new float[p.npoints];    for (int i=0; i < p.npoints; i++) {      res[0][i]=p.xpoints[i];      res[1][i]=p.ypoints[i];    }    p=null;  } else {    res[0]=xpoints;    res[1]=ypoints;  }  return res;}  }
class C{  public static <T>Iterator<T> each(Iterator<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  while (self.hasNext()) {    Object arg=self.next();    closure.call(arg);  }  return self;}  }
class C{  @BeforeClass public static void createCelerraConnection(){  boolean wasException=false;  try {    ArrayList<CelerraMessageSpec> msgSpecs=new ArrayList<CelerraMessageSpec>();    _msgSpecList=new CelerraMessageSpecList(msgSpecs);    _connection=new CelerraConnection(createConnectionInfo(),createListener(),new CimFilterMap(),_msgSpecList);  } catch (  Exception e) {    wasException=true;  }  Assert.assertFalse(wasException);}  }
class C{  private String normalizeRequestURI(String uri,String mapping){  if (mapping == null || !Util.isPrefixMapped(mapping)) {    return uri;  } else {    int length=mapping.length() + 1;    StringBuilder builder=new StringBuilder(length);    builder.append(mapping).append('/');    String mappingMod=builder.toString();    boolean logged=false;    while (uri.startsWith(mappingMod)) {      if (!logged && LOGGER.isLoggable(Level.WARNING)) {        logged=true;        LOGGER.log(Level.WARNING,"jsf.viewhandler.requestpath.recursion",new Object[]{uri,mapping});      }      uri=uri.substring(length - 1);    }    return uri;  }}  }
class C{  @After public void cleanUp(){  if ((model != null) && (model.getId() != null)) {    try {      service.deleteCustomVoiceModel(model).execute();    } catch (    Exception e) {    }  }}  }
class C{  public TitlePaneCloseButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public void clear(){  lineTypes=null;  lines=null;  writeIndex=0;  readIndex=0;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XIntervalSeriesCollection clone=(XIntervalSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public static byte[] longToBytes(long data,int n){  byte buf[]=new byte[n];  for (int i=n - 1; i >= 0; i--) {    buf[i]=(byte)data;    data=data >> 8;  }  return buf;}  }
class C{  @AfterMethod(alwaysRun=true) public void afterTestMethod(final Object[] parameters,final Method method,final ITestContext testContex,final XmlTest xmlTest){  List<TearDownService> serviceList=SeleniumTestsContextManager.getThreadContext().getTearDownServices();  if (serviceList != null && !serviceList.isEmpty()) {    for (    TearDownService service : serviceList) {      service.tearDown();    }  }  WebUIDriver.cleanUp();  logger.info(Thread.currentThread() + " Finish method " + method.getName());}  }
class C{  public AttributeInUseException(){  super();}  }
class C{  public static final void copy(final Memory source,final long srcOffsetBytes,final Memory destination,final long dstOffsetBytes,final long lengthBytes){  assertBounds(srcOffsetBytes,lengthBytes,source.getCapacity());  assertBounds(dstOffsetBytes,lengthBytes,destination.getCapacity());  if (destination.isReadOnly()) {    throw new ReadOnlyMemoryException();  }  long srcAdd=source.getCumulativeOffset(srcOffsetBytes);  long dstAdd=destination.getCumulativeOffset(dstOffsetBytes);  Object srcParent=(source.isDirect()) ? null : source.getNativeMemory().memArray_;  Object dstParent=(destination.isDirect()) ? null : destination.getNativeMemory().memArray_;  long lenBytes=lengthBytes;  while (lenBytes > 0) {    long chunkBytes=(lenBytes > UNSAFE_COPY_THRESHOLD) ? UNSAFE_COPY_THRESHOLD : lenBytes;    unsafe.copyMemory(srcParent,srcAdd,dstParent,dstAdd,lenBytes);    lenBytes-=chunkBytes;    srcAdd+=chunkBytes;    dstAdd+=chunkBytes;  }}  }
class C{  public Tokenizer(Reader reader){  this(reader,4096);}  }
class C{  public int next(){  int current;  int node;  int type;  final int nodeType=_nodeType;  int currentNodeID=makeNodeIdentity(_currentNode);  if (nodeType >= DTM.NTYPES) {    do {      node=currentNodeID;      current=node;      do {        current++;        type=_type2(current);      } while (type != NULL && (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type));      currentNodeID=(type != NULL) ? current : NULL;    } while (node != DTM.NULL && _exptype2(node) != nodeType);  } else {    do {      node=currentNodeID;      current=node;      do {        current++;        type=_type2(current);      } while (type != NULL && (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type));      currentNodeID=(type != NULL) ? current : NULL;    } while (node != DTM.NULL && (_exptype2(node) != nodeType && _type2(node) != nodeType));  }  _currentNode=makeNodeHandle(currentNodeID);  return (node == DTM.NULL ? DTM.NULL : returnNode(makeNodeHandle(node)));}  }
class C{  public static Member email(String email){  return new Member("mailto:" + email);}  }
class C{  public int execute(DatabaseConnection databaseConnection,T data,ID newId,ObjectCache objectCache) throws SQLException {  try {    Object[] args=new Object[]{convertIdToFieldObject(newId),extractIdToFieldObject(data)};    int rowC=databaseConnection.update(statement,args,argFieldTypes);    if (rowC > 0) {      if (objectCache != null) {        Object oldId=idField.extractJavaFieldValue(data);        T obj=objectCache.updateId(clazz,oldId,newId);        if (obj != null && obj != data) {          idField.assignField(obj,newId,false,objectCache);        }      }      idField.assignField(data,newId,false,objectCache);    }    logger.debug("updating-id with statement '{}' and {} args, changed {} rows",statement,args.length,rowC);    if (args.length > 0) {      logger.trace("updating-id arguments: {}",(Object)args);    }    return rowC;  } catch (  SQLException e) {    throw SqlExceptionUtil.create("Unable to run update-id stmt on object " + data + ": "+ statement,e);  }}  }
class C{  public static Object instantiate(Class implementedOrExtendedClass,String className) throws ClassInstantiationException {  Class clazz;  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    clazz=Class.forName(className,true,cl);  } catch (  ClassNotFoundException ex) {    throw new ClassInstantiationException("Unable to load class '" + className + "', class not found",ex);  }  return instantiate(implementedOrExtendedClass,clazz);}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (outputFormatPeek() == null) {    Instances toFilter=getInputFormat();    Instances[] toFilterIgnoringAttributes;    if ((toFilter.classIndex() >= 0) && toFilter.classAttribute().isNominal()) {      toFilterIgnoringAttributes=new Instances[toFilter.numClasses()];      for (int i=0; i < toFilter.numClasses(); i++) {        toFilterIgnoringAttributes[i]=new Instances(toFilter,toFilter.numInstances());      }      for (int i=0; i < toFilter.numInstances(); i++) {        toFilterIgnoringAttributes[(int)toFilter.instance(i).classValue()].add(toFilter.instance(i));      }      m_priors=new double[toFilter.numClasses()];      for (int i=0; i < toFilter.numClasses(); i++) {        toFilterIgnoringAttributes[i].compactify();        m_priors[i]=toFilterIgnoringAttributes[i].sumOfWeights();      }      Utils.normalize(m_priors);    } else {      toFilterIgnoringAttributes=new Instances[1];      toFilterIgnoringAttributes[0]=toFilter;      m_priors=new double[1];      m_priors[0]=1;    }    for (int i=0; i < toFilterIgnoringAttributes.length; i++) {      toFilterIgnoringAttributes[i]=removeIgnored(toFilterIgnoringAttributes[i]);    }    if ((toFilter.classIndex() <= 0) || !toFilter.classAttribute().isNominal()) {      m_clusterers=AbstractDensityBasedClusterer.makeCopies(m_clusterer,1);      m_clusterers[0].buildClusterer(toFilterIgnoringAttributes[0]);    } else {      m_clusterers=AbstractDensityBasedClusterer.makeCopies(m_clusterer,toFilter.numClasses());      for (int i=0; i < m_clusterers.length; i++) {        if (toFilterIgnoringAttributes[i].numInstances() == 0) {          m_clusterers[i]=null;        } else {          m_clusterers[i].buildClusterer(toFilterIgnoringAttributes[i]);        }      }    }    ArrayList<Attribute> attInfo=new ArrayList<Attribute>();    for (int j=0; j < m_clusterers.length; j++) {      if (m_clusterers[j] != null) {        for (int i=0; i < m_clusterers[j].numberOfClusters(); i++) {          attInfo.add(new Attribute("pCluster_" + j + "_"+ i));        }      }    }    if (toFilter.classIndex() >= 0) {      attInfo.add((Attribute)toFilter.classAttribute().copy());    }    attInfo.trimToSize();    Instances filtered=new Instances(toFilter.relationName() + "_clusterMembership",attInfo,0);    if (toFilter.classIndex() >= 0) {      filtered.setClassIndex(filtered.numAttributes() - 1);    }    setOutputFormat(filtered);    for (int i=0; i < toFilter.numInstances(); i++) {      convertInstance(toFilter.instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  @JsonProperty("paging") void paging(String paging){  builder.paging(IndexPagingState.fromByteBuffer(ByteBufferUtils.byteBuffer(paging)));}  }
class C{  public boolean isMeteringEnabled(){  return meteringEnabled;}  }
class C{  @Override protected void doAction(){  showAbout();}  }
class C{  public static _Fields findBYNAME(String name){  return BY_NAME.get(name);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 0) {    if (args[0].toLowerCase().endsWith(".xml")) {      System.out.println(new XMLSerialization().read(args[0]).toString());    } else {      FileInputStream fi=new FileInputStream(args[0]);      ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(fi));      Object o=oi.readObject();      oi.close();      new XMLSerialization().write(new BufferedOutputStream(new FileOutputStream(args[0] + ".xml")),o);      FileOutputStream fo=new FileOutputStream(args[0] + ".exp");      ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(fo));      oo.writeObject(o);      oo.close();    }  }}  }
class C{  public CommandProcessingException(String message,int errorType,Object errorData){  super(message);  this.errorType=errorType;  this.errorData=errorData;}  }
class C{  public void testThreeOfFourNodeSubmitCommand() throws Throwable {  testSubmitCommand(3,4);}  }
class C{  public static PropertyExistsExpression existsProperty(String propertyName){  return new PropertyExistsExpression(propertyName);}  }
class C{  protected AbstractPooledConnAdapter(ClientConnectionManager manager,AbstractPoolEntry entry){  super(manager,entry.connection);  this.poolEntry=entry;}  }
class C{  private void registerDefaultValidatorIds(Application application,LinkedHashSet<String> defaultValidatorIds){  if (defaultValidatorIds == null) {    defaultValidatorIds=new LinkedHashSet<>();    if (isBeanValidatorAvailable()) {      WebConfiguration webConfig=WebConfiguration.getInstance();      if (!webConfig.isOptionEnabled(WebConfiguration.BooleanWebContextInitParameter.DisableDefaultBeanValidator)) {        defaultValidatorIds.add(BeanValidator.VALIDATOR_ID);      }    }  }  for (  String validatorId : defaultValidatorIds) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,MessageFormat.format("Calling Application.addDefaultValidatorId({0})",validatorId));    }    application.addDefaultValidatorId(validatorId);  }}  }
class C{  private void insertBigFrameStackOverflowCheck(Instruction plg){  if (!ir.method.isInterruptible()) {    plg.remove();    return;  }  if (ir.compiledMethod.isSaveVolatile()) {    return;  }  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  Register ESP=phys.getESP();  Register ECX=phys.getECX();  MemoryOperand M=MemoryOperand.BD(ir.regpool.makeTROp(),Entrypoints.stackLimitField.getOffset(),(byte)WORDSIZE,null,null);  plg.insertBefore(MIR_Move.create(IA32_MOV,new RegisterOperand((ECX),PRIMITIVE_TYPE_FOR_WORD),M));  int frameSize=getFrameFixedSize();  plg.insertBefore(MIR_BinaryAcc.create(IA32_ADD,new RegisterOperand(ECX,PRIMITIVE_TYPE_FOR_WORD),VM.BuildFor32Addr ? IC(frameSize) : LC(frameSize)));  MIR_TrapIf.mutate(plg,IA32_TRAPIF,null,new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD),new RegisterOperand(ECX,PRIMITIVE_TYPE_FOR_WORD),IA32ConditionOperand.LE(),TrapCodeOperand.StackOverflow());}  }
class C{  public boolean isEmpty(){  if (lastBatch != null) {    if (!lastBatch.isEmpty()) {      return false;    }  }  return currentBatch.isEmpty();}  }
class C{  public void removeListener(ILabelProviderListener listener){}  }
class C{  static int kindFromString(String kindStr){  if (kindStr.equalsIgnoreCase("prj"))   return IClasspathEntry.CPE_PROJECT;  if (kindStr.equalsIgnoreCase("var"))   return IClasspathEntry.CPE_VARIABLE;  if (kindStr.equalsIgnoreCase("con"))   return IClasspathEntry.CPE_CONTAINER;  if (kindStr.equalsIgnoreCase("src"))   return IClasspathEntry.CPE_SOURCE;  if (kindStr.equalsIgnoreCase("lib"))   return IClasspathEntry.CPE_LIBRARY;  if (kindStr.equalsIgnoreCase("output"))   return ClasspathEntry.K_OUTPUT;  return -1;}  }
class C{  public static void main(String[] args){  try {    if (args.length < 2) {      System.out.println("Arguments not valid : {model, folder}.");    } else {      URI modelURI=URI.createFileURI(args[0]);      File folder=new File(args[1]);      List<String> arguments=new ArrayList<String>();      GenerateJavaRoutes generator=new GenerateJavaRoutes(modelURI,folder,arguments);      for (int i=2; i < args.length; i++) {        generator.addPropertiesFile(args[i]);      }      generator.doGenerate(new BasicMonitor());    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void postCompileStep(Compiler compiler){  m_isTopLevel=compiler.getLocationPathDepth() == -1;}  }
class C{  public static FetchResponse createFetchResponse(FetchRequest req,Map userData) throws MessageException {  FetchResponse resp=new FetchResponse();  Map attributes=req.getAttributes();  for (Iterator i=attributes.keySet().iterator(); i.hasNext(); ) {    String alias=(String)i.next();    Object value=userData.get(alias);    if (value == null) {      continue;    }    if (value instanceof String) {      resp.addAttribute(alias,(String)attributes.get(alias),(String)value);    } else     if (value instanceof List) {      Iterator values=((List)value).iterator();      int max=req.getCount(alias);      if (max == 0)       max=((List)values).size();      int count;      for (count=0; count < max && values.hasNext(); count++) {        String val=(String)values.next();        if (val == null) {          count--;          continue;        }        resp.addAttribute(alias,(String)attributes.get(alias),val);      }    }  }  return resp;}  }
class C{  private Instances makeHeader(){  ArrayList<Attribute> fv=new ArrayList<Attribute>();  fv.add(new Attribute("Margin"));  fv.add(new Attribute("Current"));  fv.add(new Attribute("Cumulative"));  return new Instances("MarginCurve",fv,100);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ObjID) {    ObjID id=(ObjID)obj;    return objNum == id.objNum && space.equals(id.space);  } else {    return false;  }}  }
class C{  public ToolBarEastState(){  super("East");}  }
class C{  public static void illegalCodeContent(Exception e,String methodName,String className,String content){  throw new IllegalCodeException(MSG.INSTANCE.message(nullPointerContent,methodName,className,content,e.getClass().getSimpleName(),"" + e.getMessage()));}  }
class C{  public void testGetExtensions() throws Exception {  Extension ext=(Extension)parserFactory.getExtensions("text/html").get(0);  assertEquals("parse-tika",ext.getDescriptor().getPluginId());  ext=(Extension)parserFactory.getExtensions("text/html; charset=ISO-8859-1").get(0);  assertEquals("parse-tika",ext.getDescriptor().getPluginId());  ext=(Extension)parserFactory.getExtensions("foo/bar").get(0);  assertEquals("parse-tika",ext.getDescriptor().getPluginId());}  }
class C{  public boolean removeJobGroupToNeverDelete(String group){  return group != null && jobGroupsToNeverDelete.remove(group);}  }
class C{  public boolean contains(final Object key){  return this.parameters.containsKey(key);}  }
class C{  public float curveTangent(float a,float b,float c,float d,float t){  curveInitCheck();  float tt3=t * t * 3;  float t2=t * 2;  PMatrix3D cb=curveBasisMatrix;  return (a * (tt3 * cb.m00 + t2 * cb.m10 + cb.m20) + b * (tt3 * cb.m01 + t2 * cb.m11 + cb.m21) + c * (tt3 * cb.m02 + t2 * cb.m12 + cb.m22) + d * (tt3 * cb.m03 + t2 * cb.m13 + cb.m23));}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SusiTransfer(String mappingExpression){  this.selectionMapping=parse(mappingExpression);}  }
class C{  public Task<FileShareRestRep> removeExport(URI id,String protocol,String securityType,String permissions,String rootUserMapping){  return removeExport(id,protocol,securityType,permissions,rootUserMapping,null);}  }
class C{  public boolean testRightmostBit(){  return (mPol[mLength - 1] & mBitmask[mBit - 1]) != 0L;}  }
class C{  public static PubSubClient startClient(String serverHostName,int serverPort,int maxPendingMessages,boolean isDaemon) throws IOException {  PubSubClient client=new PubSubClient(serverHostName,serverPort,maxPendingMessages);  client.setDaemon(isDaemon);  client.start();  return client;}  }
class C{  public Address plus(int v){  return new Address(value.plus(v));}  }
class C{  public CDebuggerToolbar(final CDebugPerspectiveModel debugger){  m_debugger=debugger;  setFloatable(false);  final IGraphModel model=debugger.getGraphModel();  final CGraphWindow parent=model.getParent();  final ZyGraph graph=model.getGraph();  m_startAction=new CAttachAction(parent,debugger);  m_detachAction=new CDetachAction(parent,debugger);  m_terminateAction=new CTerminateAction(parent,debugger);  m_stepIntoAction=new CStepIntoAction(parent,debugger);  m_stepOverAction=new CStepOverAction(parent,debugger,graph);  m_stepBlockAction=new CStepBlockAction(parent,debugger,graph);  m_stepEndAction=new CStepEndAction(parent,debugger,graph);  m_resumeAction=new CResumeAction(parent,debugger);  m_haltAction=new CHaltAction(parent,debugger);  m_startTraceAction=new CStartTraceAction(parent,debugger,graph);  m_stopTraceAction=new CStopTraceAction(parent,debugger);  createAndAddIconToToolbar(m_startAction,"data/startdebugger_up.jpg","data/startdebugger_hover.jpg","data/startdebugger_down.jpg");  m_detachButton=createAndAddIconToToolbar(m_detachAction,"data/detachdebugger_up.jpg","data/detachdebugger_hover.jpg","data/detachdebugger_down.jpg");  m_terminateButton=createAndAddIconToToolbar(m_terminateAction,"data/terminatedebugger_up.jpg","data/terminatedebugger_hover.jpg","data/terminatedebugger_down.jpg");  final JButton stepButton=createAndAddIconToToolbar(m_stepIntoAction,"data/stepnext_up.jpg","data/stepnext_hover.jpg","data/stepnext_down.jpg");  addHotkey(stepButton,HotKeys.DEBUGGER_SINGLE_STEP_KEY.getKeyStroke(),m_stepIntoAction,HotKeys.DEBUGGER_SINGLE_STEP_KEY.getDescription());  final JButton stepOverButton=createAndAddIconToToolbar(m_stepOverAction,"data/stepover_up.jpg","data/stepover_hover.jpg","data/stepover_down.jpg");  addHotkey(stepOverButton,HotKeys.DEBUGGER_STEP_OVER_KEY.getKeyStroke(),m_stepOverAction,HotKeys.DEBUGGER_STEP_OVER_KEY.getDescription());  final JButton stepBlockButton=createAndAddIconToToolbar(m_stepBlockAction,"data/stepnextnode_up.jpg","data/stepnextnode_hover.jpg","data/stepnextnode_down.jpg");  addHotkey(stepBlockButton,HotKeys.DEBUGGER_STEP_BLOCK_KEY.getKeyStroke(),m_stepBlockAction,HotKeys.DEBUGGER_STEP_BLOCK_KEY.getDescription());  createAndAddIconToToolbar(m_stepEndAction,"data/step_to_end_up.png","data/step_to_end_hover.png","data/step_to_end_down.png");  final JButton resumeButton=createAndAddIconToToolbar(m_resumeAction,"data/resumedebugger_up.jpg","data/resumedebugger_hover.jpg","data/resumedebugger_down.jpg");  addHotkey(resumeButton,HotKeys.DEBUGGER_RESUME_KEY.getKeyStroke(),m_resumeAction,HotKeys.DEBUGGER_RESUME_KEY.getDescription());  m_haltButton=createAndAddIconToToolbar(m_haltAction,"data/suspenddebugger_up.jpg","data/suspenddebugger_hover.jpg","data/suspenddebugger_down.jpg");  createAndAddIconToToolbar(m_startTraceAction,"data/record_up.jpg","data/record_hover.jpg","data/record_down.jpg");  createAndAddIconToToolbar(m_stopTraceAction,"data/recordstop_up.jpg","data/recordstop_hover.jpg","data/recordstop_down.jpg");}  }
class C{  private final boolean checkMissSpace(){  if (this.readMissCache == null)   return false;  if (this.missLimit > 0 && this.readMissCache.size() >= this.missLimit)   return false;  long available=MemoryControl.available();  if (MemoryControl.shortStatus() || available - 2 * 1024 * 1024 < this.readMissCache.memoryNeededForGrow()) {    this.readMissCache.clear();  }  available=MemoryControl.available();  return (available - 2 * 1024 * 1024 > this.readMissCache.memoryNeededForGrow());}  }
class C{  public static void dump(HttpServletRequest request){  log.config("Request " + request.getProtocol() + " "+ request.getMethod());  if (!CLogMgt.isLevelFiner())   return;  log.finer("- Server=" + request.getServerName() + ", Port="+ request.getServerPort());  log.finer("- ContextPath=" + request.getContextPath() + ", ServletPath="+ request.getServletPath()+ ", Query="+ request.getQueryString());  log.finer("- From " + request.getRemoteHost() + "/"+ request.getRemoteAddr()+ " - User="+ request.getRemoteUser());  log.finer("- URI=" + request.getRequestURI() + ", URL="+ request.getRequestURL());  log.finer("- AuthType=" + request.getAuthType());  log.finer("- Secure=" + request.isSecure());  log.finer("- PathInfo=" + request.getPathInfo() + " - "+ request.getPathTranslated());  log.finer("- UserPrincipal=" + request.getUserPrincipal());  boolean first=true;  Enumeration e=request.getHeaderNames();  while (e.hasMoreElements()) {    if (first)     log.finer("- Header:");    first=false;    String key=(String)e.nextElement();    Object value=request.getHeader(key);    log.finer("  - " + key + " = "+ value);  }  first=true;  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(MobileEnv.ENCODING);  } catch (  Exception ee) {    log.log(Level.SEVERE,"Set CharacterEncoding=" + MobileEnv.ENCODING,ee);  }  e=request.getParameterNames();  while (e.hasMoreElements()) {    if (first)     log.finer("- Parameter:");    first=false;    String key=(String)e.nextElement();    String value=MobileUtil.getParameter(request,key);    log.finer("  - " + key + " = "+ value);  }  first=true;  e=request.getAttributeNames();  while (e.hasMoreElements()) {    if (first)     log.finer("- Attributes:");    first=false;    String key=(String)e.nextElement();    Object value=request.getAttribute(key);    log.finer("  - " + key + " = "+ value);  }  Cookie[] ccc=request.getCookies();  if (ccc != null) {    for (int i=0; i < ccc.length; i++) {      if (i == 0)       log.finer("- Cookies:");      log.finer("  - " + ccc[i].getName() + ", Domain="+ ccc[i].getDomain()+ ", Path="+ ccc[i].getPath()+ ", MaxAge="+ ccc[i].getMaxAge());    }  }  log.finer("- Encoding=" + request.getCharacterEncoding());  log.finer("- Locale=" + request.getLocale());  first=true;  e=request.getLocales();  while (e.hasMoreElements()) {    if (first)     log.finer("- Locales:");    first=false;    log.finer("  - " + e.nextElement());  }  log.finer("- Class=" + request.getClass().getName());}  }
class C{  public boolean isDescendentOf(Node node1,Node node2){  return node1 == node2 || GraphUtils.existsDirectedPathFromToBreathFirst(node2,node1,this);}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public final double magSquared(){  double sq=0.0;  for (int i=0; i < length; i++) {    sq+=values[i] * values[i];  }  return sq;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.listenerList=new EventListenerList();  stream.registerValidation(this,10);}  }
class C{  public void reset(){  close();  allocateNewBlock();  index=0;  current=blocks.get(index);}  }
class C{  public void testMessageRelayAbort(){  Message m1=new Message(h1,h2,msgId1,BUFFER_SIZE);  h1.createNewMessage(m1);  checkCreates(1);  h1.connect(h2);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertFalse(mc.next());  clock.advance(1);  updateAllNodes();  assertFalse(mc.next());  h2.setLocation(farAway);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_ABORT,mc.getLastType());  assertEquals(h1,mc.getLastFrom());  assertFalse(mc.next());}  }
class C{  @FlashException public static void removeNetworks(String virtualArrayId,@As(",") String[] ids){  if ((ids == null) || (ids.length == 0)) {    networks(virtualArrayId);  }  VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);  updateNetworks(uris(ids),removeVirtualArray(virtualArray));  networks(virtualArrayId);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public TermsLookupQueryBuilder lookupType(String lookupType){  this.lookupType=lookupType;  return this;}  }
class C{  static double svd_fsign(double a,double b){  if ((a >= 0.0 && b >= 0.0) || (a < 0.0 && b < 0.0))   return a; else   return -a;}  }
class C{  private void sortAddItem(ValueNamePair vn){  sortBy1.addItem(vn);  sortBy2.addItem(vn);  sortBy3.addItem(vn);  sortBy4.addItem(vn);}  }
class C{  public static void mergeSort(byte[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  byte aux[]=(byte[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex);}  }
class C{  public Pair(F first,S second){  this.first=first;  this.second=second;}  }
class C{  public static CStandardProgressDialog show(final Window parent,final String description,final CStandardHelperThread thread){  final CStandardProgressDialog dlg=new CStandardProgressDialog(parent,Constants.DEFAULT_WINDOW_TITLE,description,thread);  CIconInitializer.initializeWindowIcons(dlg);  thread.start();  dlg.setSize(400,150);  dlg.setVisible(true);  return dlg;}  }
class C{  public IteratingGSS(OperatorDescription description){  super(description);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.812 -0500",hash_original_method="5E2706ACF0BEEE9ADCFD58329E615807",hash_generated_method="28E9B033F43A6657D4E841C5908095A9") final void chompNewline() throws IOException {  if ((pos != end || fillBuf() != -1) && buf[pos] == '\n') {    pos++;  }}  }
class C{  public void addLast(Object obj){  if (this.last == null)   addBefore(root,obj); else   addAfter(this.last,obj);}  }
class C{  public WFPopupItem(String title,MWFNode node,int AD_WF_NodeTo_ID){  super(title);  m_node=node;  m_AD_WF_NodeTo_ID=AD_WF_NodeTo_ID;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:58.288 -0400",hash_original_method="41AED877D51F56AB121F4235E96580E7",hash_generated_method="FAE5E8273CFAE7048C4C302C5D04574C") public boolean isCompleted(){  return getInfo().getState() == PrintJobInfo.STATE_COMPLETED;}  }
class C{  public ProgressMonitor(Component parentComponent,Object message,String note,int min,int max){  this(parentComponent,message,note,min,max,null);}  }
class C{  public double orientedDistance(Coordinate p){  Vector3D pb=new Vector3D(p,basePt);  double pbdDotNormal=pb.dot(normal);  if (Double.isNaN(pbdDotNormal))   throw new IllegalArgumentException("3D Coordinate has NaN ordinate");  double d=pbdDotNormal / normal.length();  return d;}  }
class C{  protected void tagHandlerSetterMethods() throws Exception {  writer.writeLineComment("Setter Methods");  PropertyBean[] properties=component.getProperties();  for (int i=0, len=properties.length; i < len; i++) {    PropertyBean property=properties[i];    if (property == null) {      continue;    }    if (!property.isTagAttribute()) {      continue;    }    String propertyName=property.getPropertyName();    String propertyType=property.getPropertyClass();    if ("binding".equals(propertyName) || "id".equals(propertyName) || "rendered".equals(propertyName)) {      continue;    }    if (property.isValueExpressionEnabled() || property.isMethodExpressionEnabled()) {      writer.writeWriteOnlyProperty(propertyName,"java.lang.String");    } else {      writer.writeWriteOnlyProperty(propertyName,propertyType);    }  }  AttributeBean[] attributes=renderer.getAttributes();  for (int i=0, len=attributes.length; i < len; i++) {    AttributeBean attribute=attributes[i];    if (attribute == null) {      continue;    }    if (!attribute.isTagAttribute()) {      continue;    }    String attributeName=attribute.getAttributeName();    writer.writeWriteOnlyProperty(attributeName,"java.lang.String");  }  writer.write("\n");}  }
class C{  public GregorianCalendar toGregorianCalendar(){  DateTimeZone zone=getZone();  GregorianCalendar cal=new GregorianCalendar(zone.toTimeZone());  cal.setTime(toDate());  return cal;}  }
class C{  protected void listSetTopIndex(int index){}  }
class C{  protected NullTypeImpl(){  super();}  }
class C{  public void addInterface(CtClass anInterface){  checkModify();}  }
class C{  protected Set performAdjunctMessaging(EntryEventImpl event,Set cacheOpRecipients,Set adjunctRecipients,FilterRoutingInfo filterRoutingInfo,DirectReplyProcessor processor,boolean calculateDelta,boolean sendDeltaWithFullValue){  Set failures=Collections.EMPTY_SET;  PartitionMessage msg=event.getPartitionMessage();  if (calculateDelta) {    setDeltaIfNeeded(event);  }  if (msg != null) {    msg=msg.getMessageForRelayToListeners(event,adjunctRecipients);    msg.setSender(this.partitionedRegion.getDistributionManager().getDistributionManagerId());    msg.setSendDeltaWithFullValue(sendDeltaWithFullValue);    failures=msg.relayToListeners(cacheOpRecipients,adjunctRecipients,filterRoutingInfo,event,this.partitionedRegion,processor);  } else {    Operation op=event.getOperation();    if (op.isCreate() || op.isUpdate()) {      failures=PutMessage.notifyListeners(cacheOpRecipients,adjunctRecipients,filterRoutingInfo,this.partitionedRegion,event,op.isCreate(),!op.isCreate(),processor,sendDeltaWithFullValue);    } else     if (op.isDestroy()) {      failures=DestroyMessage.notifyListeners(cacheOpRecipients,adjunctRecipients,filterRoutingInfo,this.partitionedRegion,event,processor);    } else     if (op.isInvalidate()) {      failures=InvalidateMessage.notifyListeners(cacheOpRecipients,adjunctRecipients,filterRoutingInfo,this.partitionedRegion,event,processor);    } else {      failures=adjunctRecipients;    }  }  return failures;}  }
class C{  private void showResultNow(final ResultObject result,final String id){  ResultTab tab=(ResultTab)RapidMinerGUI.getMainFrame().getDockingDesktop().getContext().getDockableByKey(ResultTab.DOCKKEY_PREFIX + id);  if (tab == null) {    tab=new ResultTab(ResultTab.DOCKKEY_PREFIX + id);  }  showTab(tab);  tab.showResult(result);}  }
class C{  private String generateStorageHADomainKey(StorageSystem storageSystem,String directorName){  return String.format("%s-%s",storageSystem.getNativeGuid(),directorName);}  }
class C{  public boolean isBigEndian(){  return bigEndian;}  }
class C{  public void removeLogFile(LogFile logFile){  logFileMap.remove(logFile.getFile());}  }
class C{  public ViewAttributes clone(){  ViewAttributes result=new ViewAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.ContainsNoLoops=ContainsNoLoops;  result.EventNotifier=EventNotifier;  return result;}  }
class C{  public final AC growPrio(int p,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setGrowPriority(p);  }  return this;}  }
class C{  public SeaGlassTitlePane(JRootPane rootPane,SeaGlassRootPaneUI ui){  this.rootPane=rootPane;  this.rootPaneUI=ui;  rootParent=(RootPaneContainer)rootPane.getParent();  installTitlePane();}  }
class C{  public DiskStoreID(){}  }
class C{  public static void assertNotNull(Object object,String message){  checkAssertion(!(object == null),message);}  }
class C{  public PlacesDetailsResponse details(final String placeId) throws IOException {  Uri.Builder uriBuilder=Uri.parse(PLACES_API_BASE).buildUpon().appendPath(PATH_DETAILS).appendPath(PATH_JSON).appendQueryParameter(PARAMETER_KEY,googleApiKey).appendQueryParameter(PARAMETER_PLACE_ID,placeId);  if (languageCode != null) {    uriBuilder.appendQueryParameter(PARAMETER_LANGUAGE,languageCode);  }  return httpClient.executeDetailsRequest(uriBuilder.build());}  }
class C{  public <T extends Match>T addMatch(T match) throws IllegalArgumentException {  if (match == null) {    throw new IllegalArgumentException("'Match' must not be null");  }  if (match.getProtein() != null) {    match.getProtein().removeMatch(match);  }  match.setProtein(this);  matches.add(match);  return match;}  }
class C{  protected void appendShortLength(int value){  append(value);}  }
class C{  protected PropertyNameValuePairImpl(){  super();}  }
class C{  @Override public void close() throws JMSException {  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("close()");  }  sf.closeSession(this);  closeSession();}  }
class C{  private Cache createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  ds.disconnect();  ds=getSystem(props);  Cache cache=null;  cache=CacheFactory.create(ds);  if (cache == null) {    throw new Exception("CacheFactory.create() returned null ");  }  return cache;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList();}  }
class C{  private void initializeData(Locale locale){  SoftReference<DateFormatSymbols> ref=cachedInstances.get(locale);  DateFormatSymbols dfs;  if (ref == null || (dfs=ref.get()) == null) {    if (ref != null) {      cachedInstances.remove(locale,ref);    }    dfs=new DateFormatSymbols(false);    LocaleProviderAdapter adapter=LocaleProviderAdapter.getAdapter(DateFormatSymbolsProvider.class,locale);    if (!(adapter instanceof ResourceBundleBasedAdapter)) {      adapter=LocaleProviderAdapter.getResourceBundleBased();    }    ResourceBundle resource=((ResourceBundleBasedAdapter)adapter).getLocaleData().getDateFormatData(locale);    dfs.locale=locale;    if (resource.containsKey("Eras")) {      dfs.eras=resource.getStringArray("Eras");    } else     if (resource.containsKey("long.Eras")) {      dfs.eras=resource.getStringArray("long.Eras");    } else     if (resource.containsKey("short.Eras")) {      dfs.eras=resource.getStringArray("short.Eras");    }    dfs.months=resource.getStringArray("MonthNames");    dfs.shortMonths=resource.getStringArray("MonthAbbreviations");    dfs.ampms=resource.getStringArray("AmPmMarkers");    dfs.localPatternChars=resource.getString("DateTimePatternChars");    dfs.weekdays=toOneBasedArray(resource.getStringArray("DayNames"));    dfs.shortWeekdays=toOneBasedArray(resource.getStringArray("DayAbbreviations"));    ref=new SoftReference<>(dfs);    SoftReference<DateFormatSymbols> x=cachedInstances.putIfAbsent(locale,ref);    if (x != null) {      DateFormatSymbols y=x.get();      if (y == null) {        cachedInstances.replace(locale,x,ref);      } else {        ref=x;        dfs=y;      }    }    Locale bundleLocale=resource.getLocale();    if (!bundleLocale.equals(locale)) {      SoftReference<DateFormatSymbols> z=cachedInstances.putIfAbsent(bundleLocale,ref);      if (z != null && z.get() == null) {        cachedInstances.replace(bundleLocale,z,ref);      }    }  }  copyMembers(dfs,this);}  }
class C{  public void startNested(String boundary) throws IOException {  startPart(MimeUtils.mpMixedContentType(boundary));  parts.add(boundary);}  }
class C{  private void addAccount(){  (new AddAccountAlertDialog(this)).show();}  }
class C{  private void shutdown(){  if (execSvc != null)   execSvc.shutdown(5000);  if (msgExecSvc != null)   msgExecSvc.shutdownNow();  try {    job.dispose(true);  } catch (  IgniteCheckedException e) {    U.error(log,"Failed to dispose job.",e);  }}  }
class C{  public cudaFuncAttributes(){}  }
class C{  protected void dispatchBindingChangedEvent(Element bindableElement,Element shadowTree){  Object[] ls=bindingListenerList.getListenerList();  for (int i=ls.length - 2; i >= 0; i-=2) {    BindingListener l=(BindingListener)ls[i + 1];    l.bindingChanged(bindableElement,shadowTree);  }}  }
class C{  protected Element invokeWriteToXML(Element parent,Object o,String name) throws Exception {  Method method;  Class<?>[] methodClasses;  Object[] methodArgs;  boolean array;  Element node;  boolean useDefault;  node=null;  method=null;  useDefault=false;  m_CurrentNode=parent;  if (o == null) {    useDefault=true;  }  try {    if (!useDefault) {      array=o.getClass().isArray();      if (m_CustomMethods.write().contains(name)) {        method=m_CustomMethods.write().get(o.getClass());      } else       if ((!array) && (m_CustomMethods.write().contains(o.getClass()))) {        method=m_CustomMethods.write().get(o.getClass());      } else {        method=null;      }      useDefault=(method == null);    }    if (!useDefault) {      methodClasses=new Class[3];      methodClasses[0]=Element.class;      methodClasses[1]=Object.class;      methodClasses[2]=String.class;      methodArgs=new Object[3];      methodArgs[0]=parent;      methodArgs[1]=o;      methodArgs[2]=name;      node=(Element)method.invoke(this,methodArgs);    } else {      node=writeToXML(parent,o,name);    }  } catch (  Exception e) {    if (DEBUG) {      e.printStackTrace();    }    if (m_CurrentNode != null) {      System.out.println("Happened near: " + getPath(m_CurrentNode));      m_CurrentNode=null;    }    System.out.println("PROBLEM (write): " + name);    throw (Exception)e.fillInStackTrace();  }  return node;}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder id(String id){  this.id=id;  return this;}  }
class C{  protected AbstractSet(){}  }
class C{  public Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method(ROLLBACK_METHOD_NULL);}  }
class C{  public static boolean isRuntimeStubMethod(SootMethod method){  if (stubExceptionMethod == null) {    String signature="<java.lang.RuntimeException: void <init>(java.lang.String)>";    stubExceptionMethod=Scene.v().getMethod(signature);  }  if (!method.hasActiveBody())   return true;  for (  Tag t : method.getTags()) {    if (t instanceof GeneratedPhantomMethodTag)     return true;  }  for (  Unit unit : method.getActiveBody().getUnits()) {    Stmt stmt=(Stmt)unit;    if (stmt.containsInvokeExpr()) {      try {        InvokeExpr invokeExpr=stmt.getInvokeExpr();        SootMethod invokeMethod=resolve(invokeExpr.getMethodRef());        if (invokeMethod == stubExceptionMethod) {          Value arg=invokeExpr.getArg(0);          if (arg.toString().equalsIgnoreCase("stub")) {            return true;          }        }      } catch (      CannotFindMethodException e) {        continue;      }    }  }  return false;}  }
class C{  public static CreateStatement orReplace(CharSequence table){  return produce(table,"REPLACE");}  }
class C{  public void initialize(int lteSignalStrength,int rsrp,int rsrq,int rssnr,int cqi,int timingAdvance){  mSignalStrength=lteSignalStrength;  mRsrp=rsrp;  mRsrq=rsrq;  mRssnr=rssnr;  mCqi=cqi;  mTimingAdvance=timingAdvance;}  }
class C{  public ColumnSpec(Size size){  super(DEFAULT,size,NO_GROW);}  }
class C{  public static String toString(final Object obj){  return (obj == null ? null : obj.toString());}  }
class C{  protected void updateSelectedDriver(){  signalHeadPanel.setVisible(false);  turnoutMastScroll.setVisible(false);  disabledAspectsScroll.setVisible(false);  dccMastScroll.setVisible(false);  matrixMastBitnumPanel.setVisible(false);  matrixMastScroll.setVisible(false);  if (Bundle.getMessage("TurnCtlMast").equals(signalMastDriver.getSelectedItem())) {    updateTurnoutAspectPanel();    turnoutMastScroll.setVisible(true);  } else   if (Bundle.getMessage("HeadCtlMast").equals(signalMastDriver.getSelectedItem())) {    updateHeads();    updateDisabledOption();    signalHeadPanel.setVisible(true);    disabledAspectsScroll.setVisible(true);  } else   if (Bundle.getMessage("VirtualMast").equals(signalMastDriver.getSelectedItem())) {    updateDisabledOption();    disabledAspectsScroll.setVisible(true);  } else   if ((Bundle.getMessage("DCCMast").equals(signalMastDriver.getSelectedItem())) || (Bundle.getMessage("LNCPMast").equals(signalMastDriver.getSelectedItem()))) {    updateDCCMastPanel();    dccMastScroll.setVisible(true);  } else   if (Bundle.getMessage("MatrixCtlMast").equals(signalMastDriver.getSelectedItem())) {    updateMatrixMastPanel();    matrixMastBitnumPanel.setVisible(true);    matrixMastScroll.setVisible(true);  }  updateUnLit();  validate();  if (getTopLevelAncestor() != null) {    ((jmri.util.JmriJFrame)getTopLevelAncestor()).setSize(((jmri.util.JmriJFrame)getTopLevelAncestor()).getPreferredSize());    ((jmri.util.JmriJFrame)getTopLevelAncestor()).pack();  }  repaint();}  }
class C{  @Override public boolean isShifted(){  if (mShiftKeys[0] != null) {    return mShiftState != SHIFT_OFF;  } else {    return super.isShifted();  }}  }
class C{  private static String toJson(Entity entity) throws EntityException {  try {    TSerializer serializer=new TSerializer(new TJSONProtocol.Factory());switch (entity.getType()) {case DATABASE:      Database db=entity.getDatabase();    return serializer.toString(db);case TABLE:  Table tableWithLocation=new Table(entity.getTable().getTTable());URI dataLocation;try {dataLocation=entity.getLocation();} catch (Exception e) {throw new EntityException(e);}tableWithLocation.getSd().setLocation(dataLocation == null ? null : dataLocation.toString());return serializer.toString(entity.getTable().getTTable());case PARTITION:case DUMMYPARTITION:Partition partitionWithLocation=new Partition(entity.getPartition().getTPartition());partitionWithLocation.getSd().setLocation(entity.getPartition().getDataLocation().toString());return serializer.toString(entity.getPartition().getTPartition());case LOCAL_DIR:case DFS_DIR:try {return entity.getLocation().toString();} catch (Exception e) {throw new EntityException(e);}default :throw new EntityException("Unhandled type: " + entity.getType() + " entity: "+ entity);}} catch (TException e) {throw new EntityException(e);}}  }
class C{  public void deleteTrigger(BigInteger alertId,BigInteger triggerId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/triggers/"+ triggerId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public static boolean isCurrentUser(final String userId){  final String currentUserId=AppConstants.UserInfo.INSTANCE.getId();  return !TextUtils.isEmpty(currentUserId) && currentUserId.equals(userId);}  }
class C{  @Deprecated public static String openUrl(String url,String method,Bundle params) throws MalformedURLException, IOException {  String strBoundary="3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";  String endLine="\r\n";  OutputStream os;  if (method.equals("GET")) {    url=url + "?" + encodeUrl(params);  }  Utility.logd("Facebook-Util",method + " URL: " + url);  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();  conn.setRequestProperty("User-Agent",System.getProperties().getProperty("http.agent") + " FacebookAndroidSDK");  if (!method.equals("GET")) {    Bundle dataparams=new Bundle();    for (    String key : params.keySet()) {      Object parameter=params.get(key);      if (parameter instanceof byte[]) {        dataparams.putByteArray(key,(byte[])parameter);      }    }    if (!params.containsKey("method")) {      params.putString("method",method);    }    if (params.containsKey("access_token")) {      String decoded_token=URLDecoder.decode(params.getString("access_token"));      params.putString("access_token",decoded_token);    }    conn.setRequestMethod("POST");    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + strBoundary);    conn.setDoOutput(true);    conn.setDoInput(true);    conn.setRequestProperty("Connection","Keep-Alive");    conn.connect();    os=new BufferedOutputStream(conn.getOutputStream());    try {      os.write(("--" + strBoundary + endLine).getBytes());      os.write((encodePostBody(params,strBoundary)).getBytes());      os.write((endLine + "--" + strBoundary+ endLine).getBytes());      if (!dataparams.isEmpty()) {        for (        String key : dataparams.keySet()) {          os.write(("Content-Disposition: form-data; filename=\"" + key + "\""+ endLine).getBytes());          os.write(("Content-Type: content/unknown" + endLine + endLine).getBytes());          os.write(dataparams.getByteArray(key));          os.write((endLine + "--" + strBoundary+ endLine).getBytes());        }      }      os.flush();    }  finally {      os.close();    }  }  String response="";  try {    response=read(conn.getInputStream());  } catch (  FileNotFoundException e) {    response=read(conn.getErrorStream());  }  return response;}  }
class C{  public Road(int id,String name,Intersection from,Intersection to,RoadClass roadClass,RoadLayer roadLayer){  this.id=id;  this.name=name;  this.roadLayer=roadLayer;  points=new Waypoint[2];  setIntersections(from,to);  this.roadClass=roadClass;  createLines();  modified=false;}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int S_ResourceAssignment_ID=((Integer)value).intValue();  if (S_ResourceAssignment_ID == 0)   return "";  int M_Product_ID=0;  String Name=null;  String Description=null;  BigDecimal Qty=null;  String sql="SELECT p.M_Product_ID, ra.Name, ra.Description, ra.Qty " + "FROM S_ResourceAssignment ra" + " INNER JOIN M_Product p ON (p.S_Resource_ID=ra.S_Resource_ID) "+ "WHERE ra.S_ResourceAssignment_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,S_ResourceAssignment_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      M_Product_ID=rs.getInt(1);      Name=rs.getString(2);      Description=rs.getString(3);      Qty=rs.getBigDecimal(4);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"product",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("S_ResourceAssignment_ID=" + S_ResourceAssignment_ID + " - M_Product_ID="+ M_Product_ID);  if (M_Product_ID != 0) {    mTab.setValue("M_Product_ID",new Integer(M_Product_ID));    if (Description != null)     Name+=" (" + Description + ")";    if (!".".equals(Name))     mTab.setValue("Description",Name);    String variable="Qty";    if (mTab.getTableName().startsWith("C_Order"))     variable="QtyOrdered"; else     if (mTab.getTableName().startsWith("C_Invoice"))     variable="QtyInvoiced";    if (Qty != null)     mTab.setValue(variable,Qty);    mTab.setValue("QtyEntered",Qty);  }  return "";}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_LIST_1__PARAMETER_1:    return ((InternalEList<?>)getParameter_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public CommandButtonGroup(@JdkConstants.BoxLayoutAxis int axis){  myAxis=axis;  setLayout(new BoxLayout(this,axis));  if (axis == BoxLayout.X_AXIS) {    add(Box.createHorizontalGlue());  } else {  }}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  public boolean isBoundsInGrid(){  return boundsInGrid;}  }
class C{  public void testRangeFacetInfiniteLoopDetection(){  for (  String field : new String[]{"foo_f","foo_d","foo_i"}) {    assertQEx("no zero gap error: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","23","facet.range.gap","0","facet.range.end","100"),400);  }  String field="foo_dt";  assertQEx("no zero gap error for facet.range: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","NOW","facet.range.gap","+0DAYS","facet.range.end","NOW+10DAY"),400);  field="foo_f";  assertQEx("no float underflow error: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","100000000000","facet.range.end","100000086200","facet.range.gap","2160"),400);  field="foo_d";  assertQEx("no double underflow error: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","9900000000000","facet.range.end","9900000086200","facet.range.gap","0.0003"),400);}  }
class C{  void checkClosed(){  if (result == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  if (stat != null) {    stat.checkClosed();  }  if (conn != null) {    conn.checkClosed();  }}  }
class C{  private SavedState(Parcel in){  super(in);  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  private List<String> findMXRecordsRaw(String hostname) throws TemporaryResolutionException {  Record answers[]=lookup(hostname,Type.MX,"MX");  List<String> servers=new ArrayList<String>();  if (answers == null) {    return servers;  }  MXRecord[] mxAnswers=new MXRecord[answers.length];  for (int i=0; i < answers.length; i++) {    mxAnswers[i]=(MXRecord)answers[i];  }  Arrays.sort(mxAnswers,mxComparator);  int currentPrio=-1;  List<String> samePrio=new ArrayList<String>();  for (int i=0; i < mxAnswers.length; i++) {    boolean same=false;    boolean lastItem=i + 1 == mxAnswers.length;    MXRecord mx=mxAnswers[i];    if (i == 0) {      currentPrio=mx.getPriority();    } else {      same=currentPrio == mx.getPriority();    }    String mxRecord=mx.getTarget().toString();    if (same) {      samePrio.add(mxRecord);    } else {      Collections.shuffle(samePrio);      servers.addAll(samePrio);      samePrio.clear();      samePrio.add(mxRecord);    }    if (lastItem) {      Collections.shuffle(samePrio);      servers.addAll(samePrio);    }    logger.debug("Found MX record " + mxRecord);  }  return servers;}  }
class C{  public void translateEventInScreenToAppWindow(MotionEvent event){  event.scale(applicationInvertedScale);}  }
class C{  public LikeExpression(boolean isNot){  this.not=isNot;}  }
class C{  private void finish(){  updatePreviousNode();  for (  final IVisualCoverageListener listener : new ArrayList<IVisualCoverageListener>(listeners)) {    listener.finishedCoverage();  }}  }
class C{  @Deprecated public final IOContainer run(final IOContainer input,final int logVerbosity,final boolean cleanUp,final Map<String,String> macroMap) throws OperatorException {  return run(input,logVerbosity,macroMap);}  }
class C{  public DynamicTreeNode(Object o){  super(o);}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  if (isChecked) {    if (mCapabilities != null && mCapabilities.getFilesSharingPublicPasswordEnforced().isTrue()) {      ((FileActivity)getActivity()).getFileOperationsHelper().requestPasswordForShareViaLink(mFile,true);    } else {      ((FileActivity)getActivity()).getFileOperationsHelper().shareFileViaLink(mFile,null);    }  } else {    ((FileActivity)getActivity()).getFileOperationsHelper().unshareFileViaLink(mFile);  }  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnShareViaLinkSwitchCheckedChangeListener);}  }
class C{  boolean canBeWalkedInNaturalDocOrderStatic(){  if (null != m_firstWalker) {    AxesWalker walker=m_firstWalker;    int prevAxis=-1;    boolean prevIsSimpleDownAxis=true;    for (int i=0; null != walker; i++) {      int axis=walker.getAxis();      if (walker.isDocOrdered()) {        boolean isSimpleDownAxis=((axis == Axis.CHILD) || (axis == Axis.SELF) || (axis == Axis.ROOT));        if (isSimpleDownAxis || (axis == -1))         walker=walker.getNextWalker(); else {          boolean isLastWalker=(null == walker.getNextWalker());          if (isLastWalker) {            if (walker.isDocOrdered() && (axis == Axis.DESCENDANT || axis == Axis.DESCENDANTORSELF || axis == Axis.DESCENDANTSFROMROOT || axis == Axis.DESCENDANTSORSELFFROMROOT) || (axis == Axis.ATTRIBUTE))             return true;          }          return false;        }      } else       return false;    }    return true;  }  return false;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof FreeCellNode) {    return equivalent((FreeCellNode)o);  }  return false;}  }
class C{  public boolean isElement(){  return false;}  }
class C{  private static Map<String,String> resourceBundleMap(ResourceBundle bundle){  final HashMap<String,String> map=new HashMap<String,String>();  final Enumeration<String> e=bundle.getKeys();  while (e.hasMoreElements()) {    final String key=e.nextElement();    map.put(key,(String)bundle.getObject(key));  }  return Collections.unmodifiableMap(map);}  }
class C{  public void sendDeliveredNotification(String to,String packetID){  Message msg=new Message(to);  MessageEvent messageEvent=new MessageEvent();  messageEvent.setDelivered(true);  messageEvent.setPacketID(packetID);  msg.addExtension(messageEvent);  con.sendPacket(msg);}  }
class C{  public static NgnAVSession createOutgoingSession(NgnSipStack sipStack,NgnMediaType mediaType){synchronized (sSessions) {    final NgnAVSession avSession=new NgnAVSession(sipStack,null,mediaType,InviteState.INPROGRESS);    sSessions.put(avSession.getId(),avSession);    return avSession;  }}  }
class C{  public boolean isExternal(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.EXTERNAL);}  }
class C{  public static void dumpAllocatedMemories(){  dumpAllocatedMemories(System.out);}  }
class C{  public void detach(@NotNull Component childComponent) throws MismatchDetachException {  if (childComponent.parentComponent != this) {    String msg=String.format("The child component(%s) doesn't belong to component(%s)",childComponent.name == null ? "unnamed" : childComponent.getComponentId(),getComponentId());    throw new MismatchDetachException(msg);  }  childComponent.parentComponent=null;  if (childrenComponents != null) {    childrenComponents.remove(childComponent);  }  Component root=getRootComponent();  for (  String key : childComponent.providers.keySet()) {    childComponent.componentLocator.put(key,childComponent);    List<Component> chain=null;    if (root.overriddenChain != null) {      chain=root.overriddenChain.get(key);    }    if (chain != null) {      if (!chain.isEmpty()) {        Component removingItem=null;        int size=chain.size();        for (int i=size - 1; i >= 0; i--) {          Component c=chain.get(i);          if (c == childComponent) {            removingItem=c;            break;          }        }        chain.remove(removingItem);      }      if (chain.isEmpty()) {        if (root.providers.containsKey(key)) {          root.componentLocator.put(key,root);        } else {          root.componentLocator.remove(key);        }      } else {        root.componentLocator.put(key,chain.get(chain.size() - 1));      }    } else {      root.componentLocator.remove(key);    }  }}  }
class C{  public static void picture(double x,double y,String s,double w,double h,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public StaticNameCoder(final Map<String,String> java2Node,final Map<String,String> java2Attribute){  this.java2Node=new HashMap<>(java2Node);  if (java2Node == java2Attribute || java2Attribute == null) {    this.java2Attribute=this.java2Node;  } else {    this.java2Attribute=new HashMap<>(java2Attribute);  }  readResolve();}  }
class C{  public static boolean isNotEmpty(Object object){  return x.len(object) != 0;}  }
class C{  protected Size2D arrangeNR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint c1=constraint.toUnconstrainedHeight();  Size2D size1=arrange(container,g2,c1);  if (constraint.getHeightRange().contains(size1.getHeight())) {    return size1;  } else {    double h=constraint.getHeightRange().constrain(size1.getHeight());    RectangleConstraint c2=constraint.toFixedHeight(h);    return arrange(container,g2,c2);  }}  }
class C{  public com.lynden.gmapsfx.shapes.Polyline convert(){  return line;}  }
class C{  CSSBgPainter(Component parent){  this.parent=parent;}  }
class C{  public void onEndDrag(){}  }
class C{  public noscript addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public XmlAttribute(String type,String value){  type_=type;  value_=value;}  }
class C{  public final int hashCode(){  final int PRIME=37;  final int SEED=5;  int result=SEED;  result+=result * PRIME + Double.doubleToLongBits(getLatitude());  result+=result * PRIME + Double.doubleToLongBits(getLongitude());  result+=result * PRIME + Double.doubleToLongBits(getAltitude());  result+=result * PRIME + Double.doubleToLongBits(getAccuracy());  result+=result * PRIME + (int)(getOpenBmapTimestamp() ^ (getOpenBmapTimestamp() >>> 32));  result+=result * PRIME + getSession();  return result;}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    long[] tmp=new long[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  @CanIgnoreReturnValue public final double addAndGet(double delta){  while (true) {    long current=value;    double currentVal=longBitsToDouble(current);    double nextVal=currentVal + delta;    long next=doubleToRawLongBits(nextVal);    if (updater.compareAndSet(this,current,next)) {      return nextVal;    }  }}  }
class C{  @Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException, AdeFlowException {  if (analyzedInterval.getInterval().getSource().getSourceId().equals(m_source)) {    throw new AdeFlowException("Cannot process analyzed interval of source other than " + m_source.getSourceId() + ". Got analyzed interval from source "+ analyzedInterval.getInterval().getSource().getSourceId());  }  Date periodStart=PeriodUtils.getContainingPeriodStart(new Date(analyzedInterval.getIntervalEndTime() - 1));  if (!periodStart.equals(m_periodStartDate)) {    if (m_inPeriod) {      closePeriod();    }    startNewPeriod(analyzedInterval);  }  int index=getIntervalIndex(analyzedInterval);  m_lastKnownModelInternalID=analyzedInterval.getModelInternalId();  m_xmlMetaData.retrieveXMLMetaData(m_lastKnownModelInternalID,true,m_framingFlowType.getDuration());  m_aiVec[index].m_results_file=Ade.getAde().getConfigProperties().getOutputFilenameGenerator().getIntervalXmlFileRelativeToIndex(analyzedInterval,m_framingFlowType);  m_aiVec[index].m_num_unique_msg_ids=analyzedInterval.getNumUniqueMessageIds();  m_aiVec[index].m_anomaly_score=analyzedInterval.getScore();  m_aiVec[index].m_modelQualityIndicator=m_xmlMetaData.getLimitedModelIndicator();  NewAndNeverSeenBeforeMessages messages=NewAndNeverSeenBeforeMessagesUtils.processAnalyzedInterval(analyzedInterval);  m_aiVec[index].m_numNewMessages=messages.getNumNewMessages();  m_aiVec[index].m_numNeverSeenBeforeMessages=messages.getNumNeverSeenBeforeMessages();  if (m_refreash_periods) {    writePeriod();  }}  }
class C{  protected WMouseDragGestureRecognizer(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_NONE);}  }
class C{  public void addListener(final IMemoryListener listener){  m_listeners.add(listener);}  }
class C{  public static String readFileToString(Context ctx,String path) throws IOException {  StringBuilder sb=new StringBuilder();  char[] buffer=new char[INPUT_BUFFER_SIZE];  InputStream is=null;  try {    is=ctx.getAssets().open(path);    InputStreamReader reader=new InputStreamReader(is);    int numRead=reader.read(buffer);    while (numRead > 0) {      sb.append(buffer,0,numRead);      numRead=reader.read(buffer);    }    return sb.toString();  } catch (  IOException e) {    Log.e(TAG,"Failed to open asset file " + path);    throw e;  } finally {    if (is != null)     is.close();  }}  }
class C{  public static boolean isHovis(){  return sBuildModel.startsWith("hovis_box_");}  }
class C{  public static String hashSHA(String str){  byte[] b=str.getBytes();  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA1");    md.update(b);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return toHexString(md.digest());}  }
class C{  private void sincronizarBase(){  listaSetor=ControleDAO.getBanco().getSetorDAO().listar();}  }
class C{  public static <T>T[] toArray(Collection<? extends T> list,Class<T> componentType){  if (list == null) {    return null;  }  return list.toArray(create(componentType,list.size()));}  }
class C{  private static final ImmutableMap<String,LaunchPhase> initEnumMapping(){  ImmutableMap.Builder<String,LaunchPhase> builder=new ImmutableMap.Builder<>();  for (  Entry<String,LaunchPhase> entry : getTypesafeEnumMapping(LaunchPhase.class).entrySet()) {    builder.put(UPPER_UNDERSCORE.to(LOWER_CAMEL,entry.getKey()),entry.getValue());  }  return builder.build();}  }
class C{  public void translate(double dx,double dy){  for (  MapNode n : nodes) {    n.getLocation().translate(dx,dy);  }  minBound.translate(dx,dy);  maxBound.translate(dx,dy);  offset.translate(dx,dy);  needsRehash=true;}  }
class C{  public DataTableITCase(String name){  super(name);}  }
class C{  public PrinterStateReasons(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public void onDownloadProgress(DownloadProgressInfo progress){  mAverageSpeed.setText(getString(R.string.kilobytes_per_second,Helpers.getSpeedString(progress.mCurrentSpeed)));  mTimeRemaining.setText(getString(R.string.time_remaining,Helpers.getTimeRemaining(progress.mTimeRemaining)));  progress.mOverallTotal=progress.mOverallTotal;  mPB.setMax((int)(progress.mOverallTotal >> 8));  mPB.setProgress((int)(progress.mOverallProgress >> 8));  mProgressPercent.setText(Long.toString(progress.mOverallProgress * 100 / progress.mOverallTotal) + "%");  mProgressFraction.setText(Helpers.getDownloadProgressString(progress.mOverallProgress,progress.mOverallTotal));}  }
class C{  private static void startLogSystem(){  prepareLoggingSystemEnviroment();  logger.debug("XXXXXXX");  logger.info("-Setting base at :" + STENDHAL_FOLDER);  Log4J.init("data/conf/log4j.properties");  logger.debug("XXXXXXX");  logger.info("Setting base at :" + STENDHAL_FOLDER);  logger.info("Stendhal " + VERSION);  logger.info(Debug.PRE_RELEASE_VERSION);  logger.info("Logging to directory: " + getLogFolder());  String patchLevel=System.getProperty("sun.os.patch.level");  if ((patchLevel == null) || (patchLevel.equals("unknown"))) {    patchLevel="";  }  logger.info("OS: " + System.getProperty("os.name") + " "+ patchLevel+ " "+ System.getProperty("os.version")+ " "+ System.getProperty("os.arch"));  logger.info("Java-Runtime: " + System.getProperty("java.runtime.name") + " "+ System.getProperty("java.runtime.version")+ " from "+ System.getProperty("java.home"));  logger.info("Java-VM: " + System.getProperty("java.vm.vendor") + " "+ System.getProperty("java.vm.name")+ " "+ System.getProperty("java.vm.version"));  LogUncaughtExceptionHandler.setup();}  }
class C{  public Element store(Object o){  LayoutSlip p=(LayoutSlip)o;  Element element=new Element("layoutSlip");  element.setAttribute("ident",p.getName());  element.setAttribute("slipType","" + p.getSlipType());  if (p.getBlockName().length() > 0) {    element.setAttribute("blockname",p.getBlockName());  }  if (p.getConnectA() != null) {    element.setAttribute("connectaname",((TrackSegment)p.getConnectA()).getID());  }  if (p.getConnectB() != null) {    element.setAttribute("connectbname",((TrackSegment)p.getConnectB()).getID());  }  if (p.getConnectC() != null) {    element.setAttribute("connectcname",((TrackSegment)p.getConnectC()).getID());  }  if (p.getConnectD() != null) {    element.setAttribute("connectdname",((TrackSegment)p.getConnectD()).getID());  }  if (p.getSignalA1Name().length() > 0) {    element.addContent(new Element("signala1name").addContent(p.getSignalA1Name()));  }  if (p.getSignalB1Name().length() > 0) {    element.addContent(new Element("signalb1name").addContent(p.getSignalB1Name()));  }  if (p.getSignalC1Name().length() > 0) {    element.addContent(new Element("signalc1name").addContent(p.getSignalC1Name()));  }  if (p.getSignalD1Name().length() > 0) {    element.addContent(new Element("signald1name").addContent(p.getSignalD1Name()));  }  if (p.getSignalA2Name().length() > 0) {    element.addContent(new Element("signala2name").addContent(p.getSignalA2Name()));  }  if (p.getSignalB2Name().length() > 0) {    element.addContent(new Element("signalb2name").addContent(p.getSignalB2Name()));  }  if (p.getSignalC2Name().length() > 0) {    element.addContent(new Element("signalc2name").addContent(p.getSignalC2Name()));  }  if (p.getSignalD2Name().length() > 0) {    element.addContent(new Element("signald2name").addContent(p.getSignalD2Name()));  }  Point2D coords=p.getCoordsCenter();  element.setAttribute("xcen","" + coords.getX());  element.setAttribute("ycen","" + coords.getY());  coords=p.getCoordsA();  element.setAttribute("xa","" + coords.getX());  element.setAttribute("ya","" + coords.getY());  coords=p.getCoordsB();  element.setAttribute("xb","" + coords.getX());  element.setAttribute("yb","" + coords.getY());  if (p.getSignalAMastName().length() > 0) {    element.addContent(new Element("signalAMast").addContent(p.getSignalAMastName()));  }  if (p.getSignalBMastName().length() > 0) {    element.addContent(new Element("signalBMast").addContent(p.getSignalBMastName()));  }  if (p.getSignalCMastName().length() > 0) {    element.addContent(new Element("signalCMast").addContent(p.getSignalCMastName()));  }  if (p.getSignalDMastName().length() > 0) {    element.addContent(new Element("signalDMast").addContent(p.getSignalDMastName()));  }  if (p.getSensorAName().length() > 0) {    element.addContent(new Element("sensorA").addContent(p.getSensorAName()));  }  if (p.getSensorBName().length() > 0) {    element.addContent(new Element("sensorB").addContent(p.getSensorBName()));  }  if (p.getSensorCName().length() > 0) {    element.addContent(new Element("sensorC").addContent(p.getSensorCName()));  }  if (p.getSensorDName().length() > 0) {    element.addContent(new Element("sensorD").addContent(p.getSensorDName()));  }  if (p.getTurnoutName().length() > 0) {    element.addContent(new Element("turnout").addContent(p.getTurnoutName()));  }  if (p.getTurnoutBName().length() > 0) {    element.addContent(new Element("turnoutB").addContent(p.getTurnoutBName()));  }  Element states=new Element("states");  Element state=new Element("A-C");  state.addContent(new Element("turnout").addContent("" + p.getTurnoutState(LayoutSlip.STATE_AC)));  state.addContent(new Element("turnoutB").addContent("" + p.getTurnoutBState(LayoutSlip.STATE_AC)));  states.addContent(state);  state=new Element("A-D");  state.addContent(new Element("turnout").addContent("" + p.getTurnoutState(LayoutSlip.STATE_AD)));  state.addContent(new Element("turnoutB").addContent("" + p.getTurnoutBState(LayoutSlip.STATE_AD)));  states.addContent(state);  state=new Element("B-D");  state.addContent(new Element("turnout").addContent("" + p.getTurnoutState(LayoutSlip.STATE_BD)));  state.addContent(new Element("turnoutB").addContent("" + p.getTurnoutBState(LayoutSlip.STATE_BD)));  states.addContent(state);  if (p.getSlipType() == LayoutSlip.DOUBLE_SLIP) {    state=new Element("B-C");    state.addContent(new Element("turnout").addContent("" + p.getTurnoutState(LayoutSlip.STATE_BC)));    state.addContent(new Element("turnoutB").addContent("" + p.getTurnoutBState(LayoutSlip.STATE_BC)));    states.addContent(state);  }  element.addContent(states);  element.setAttribute("class",getClass().getName());  return element;}  }
class C{  private static Matrix buildMatrix(int dataShards,int totalShards){  Matrix vandermonde=vandermonde(totalShards,dataShards);  Matrix top=vandermonde.submatrix(0,0,dataShards,dataShards);  return vandermonde.times(top.invert());}  }
class C{  public CLQueue createDefaultOutOfOrderQueue(){  return new CLDevice(platform,deviceIds.getSizeT()).createOutOfOrderQueue(this);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private String readUTFBody(long utfLen) throws IOException {  StringBuilder sbuf=new StringBuilder();  end=pos=0;  while (utfLen > 0) {    int avail=end - pos;    if (avail >= 3 || (long)avail == utfLen)     utfLen-=readUTFSpan(sbuf,utfLen); else {      if (avail > 0)       GridUnsafe.copyMemory(utfBuf,BYTE_ARR_OFF + pos,utfBuf,BYTE_ARR_OFF,avail);      pos=0;      end=(int)Math.min(MAX_BLOCK_SIZE,utfLen);      readFully(utfBuf,avail,end - avail);    }  }  return sbuf.toString();}  }
class C{  public boolean empty(){  return vstack.empty();}  }
class C{  @Override public void flush(){}  }
class C{  public String encode(ByteBuffer aBuffer){  byte[] buf=getBytes(aBuffer);  return encode(buf);}  }
class C{  public void addVersionHistory(VersionHistory history){  Preconditions.checkNotNull(history);  boolean exists=false;  for (  VersionHistory vh : getVersionHistory()) {    if (vh.getVersion().equals(history.getVersion())) {      exists=true;    }  }  if (!exists) {    log.debug("Adding new version history: " + history.getVersion());    versionHistory.add(0,history);  }}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public CacheObject load(Object key){  if (key != null) {    String xAndY=key.toString();    int commaIndex=xAndY.indexOf(',');    int x=Integer.parseInt(xAndY.substring(0,commaIndex));    int y=Integer.parseInt(xAndY.substring(commaIndex + 1));    if (Debug.debugging("asrpdetail")) {      Debug.output("Getting tiled image " + x + ", "+ y+ " (from "+ xAndY+ ")");    }    try {      OMGraphic block=getBlock(x,y);      if (block != null) {        return new ASRPBlockCacheObject(xAndY.intern(),block);      }    } catch (    IOException ioe) {      Debug.error("ASRPDirectory caught exception creating tiled image for " + xAndY);    }  }  return null;}  }
class C{  public final void push(Node value){  int ff=m_firstFree;  if ((ff + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new Node[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,ff + 1);      m_map=newMap;    }  }  m_map[ff]=value;  ff++;  m_firstFree=ff;}  }
class C{  public boolean isColorMaskBlueEnabled(){  return mColorMaskB;}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public GroupCategorySet(GroupCategory category){  Assert.isNotNull(category);  fContent=new ArrayList(1);  fContent.add(category);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4));}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public SendableStickerMessage.SendableStickerMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  public FBNBackupManager(String gdsType){  super(gdsType);}  }
class C{  public CloseableIteratorIteration(Iterator<? extends E> iter){  setIterator(iter);}  }
class C{  static boolean isValid(String name){  return JMXSupport.isValid(name);}  }
class C{  public boolean reuseAddress(){  return reader.getBoolean(REUSE_ADDRESS,DEFAULT_REUSE_ADDRESS);}  }
class C{  protected DeterministicKeyChain(DeterministicKey watchKey,boolean isFollowing){  this(watchKey);  this.isFollowing=isFollowing;}  }
class C{  private void sortChildDrawingOrder(){  if (drawingOrderedChildren == null) {    drawingOrderedChildren=new ArrayList<>();  } else {    drawingOrderedChildren.clear();  }  final int childCount=getChildCount();  for (int i=0; i < childCount; i++) {    final View child=getChildAt(i);    drawingOrderedChildren.add(child);  }  Collections.sort(drawingOrderedChildren,VIEW_COMPARATOR);}  }
class C{  public boolean isModifiedNow(){  return isModified();}  }
class C{  @Override public int pushMessageSync(Message msg) throws org.apache.thrift.TException {  if (msg == null) {    log.error("Could not push empty message");    return 0;  }  List<String> sessionids=msg.getSessionIDs();  for (  String sid : sessionids) {    SessionQueue pQueue=null;    if (!msgQueues.containsKey(sid)) {      pQueue=new SessionQueue();      msgQueues.put(sid,pQueue);    } else {      pQueue=msgQueues.get(sid);    }    log.debug("pushMessageSync: SessionId: " + sid + " Receive a message, "+ msg.toString()+ "\n");    ByteBuffer bb=ByteBuffer.wrap(msg.getPacket().getData());    BlockingQueue<ByteBuffer> queue=pQueue.getQueue();    if (queue != null) {      if (!queue.offer(bb)) {        log.error("Failed to queue message for session: " + sid);      } else {        log.debug("insert a message to session: " + sid);      }    } else {      log.error("queue for session {} is null",sid);    }  }  return 1;}  }
class C{  private static void restoreSolr5Index(Properties properties) throws IOException, SolrServerException {  String solrHome=properties.getProperty("dhus.solr.home");  String coreName=properties.getProperty("dhus.solr.core.name");  final String name=properties.getProperty("dhus.solr.backup.name");  final String location=properties.getProperty("dhus.solr.backup.location");  if (solrHome == null || coreName == null || name == null || location == null) {    throw new UnsupportedOperationException();  }  System.setProperty("solr.solr.home",solrHome);  CoreContainer core=new CoreContainer(solrHome);  EmbeddedSolrServer server=new EmbeddedSolrServer(core,coreName);  server.getCoreContainer().load();  SolrQuery query=new SolrQuery();  query.setRequestHandler("/replication");  query.set("command","restore");  query.set("name",name);  query.set("location",location);  server.query(query);  server.shutdown();  logger.info("SolR indexes restored.");}  }
class C{  private boolean isGroupOnWhiteList(String groupId){  Pattern[] patterns=_groupWhiteList.getCompiledPatterns();  if (patterns != null && patterns.length > 0) {    for (    Pattern pattern : patterns) {      if (pattern.matcher(groupId).matches()) {        return true;      }    }  } else {    return true;  }  return false;}  }
class C{  public static boolean hasEntryLowerThan(List<Integer> list,Integer border){  for (  Integer pos : list)   if (pos < border)   return true;  return false;}  }
class C{  public static void removeAllBeansFromContainer(JComponent container,Integer... tab){  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);  }  if (container != null) {    if (components != null) {      for (int i=0; i < components.size(); i++) {        Object tempInstance=components.elementAt(i);        Object tempBean=((BeanInstance)tempInstance).getBean();        if (Beans.isInstanceOf(tempBean,JComponent.class)) {          container.remove((JComponent)tempBean);        }      }    }    container.revalidate();  }}  }
class C{  public StringIndexOutOfBoundsException(String s,int offset,int count){  this(s.length(),offset,count);}  }
class C{  public String describeReferenceTo(JavaThing target,Snapshot ss){  JavaThing[] flds=getFields();  for (int i=0; i < flds.length; i++) {    if (flds[i] == target) {      JavaField f=getClazz().getFieldForInstance(i);      return "field " + f.getName();    }  }  return super.describeReferenceTo(target,ss);}  }
class C{  private void drawDivider(Canvas canvas,View view,Divider divider,Position position){  EnumSet<Direction> directions=Direction.getSouthEastCorner();  if (position.getColumn() == 0) {    directions.add(Direction.SOUTH_WEST);    directions.add(Direction.WEST);  }  if (position.getRow() == 0) {    directions.add(Direction.NORTH);    directions.add(Direction.NORTH_EAST);  }  if (position.getColumn() == 0 && position.getRow() == 0) {    directions.add(Direction.NORTH_WEST);  }  divider.draw(canvas,view,directions);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="";  subjectAreaId=null;  courseOfferingId=null;  instrOfferingId=null;  courseName="";  title="";  scheduleBookNote="";  demandCourseOfferingId=null;  consent=null;  creditFormat=null;  creditType=null;  creditUnitType=null;  units=null;  maxUnits=null;  fractionalIncrementsAllowed=new Boolean(false);  creditText="";  courseNbr="";  ioNotOffered=null;  catalogLinkLabel=null;  catalogLinkLocation=null;  instructors=DynamicList.getInstance(new ArrayList(),factory);  byReservationOnly=false;  wkEnroll=null;  wkChange=null;  wkDrop=null;  wkEnrollDefault=null;  wkChangeDefault=null;  wkDropDefault=null;  weekStartDayOfWeek=null;  courseTypeId=null;  add=false;  externalId=null;}  }
class C{  @Override public StringBuilder format(final StringBuilder sb,final long w){  final int initPosition=sb.length();  sb.append(mLocalFormat.format(w));  final int currLength=sb.length() - initPosition;  final int pad=mLength - currLength;  if (pad > 0) {    sb.append(mPadding,0,pad);  }  return sb;}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  public static void assertRegex(String regex,String string){  Pattern p=Pattern.compile(regex);  assertTrue(string,p.matcher(string).matches());}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  private void allocateIndex(){  if (index != null)   throw new IllegalStateException();  if (!open.get()) {    throw new IllegalStateException();  }  store=new MemStore(new MemoryManager(DirectBufferPool.INSTANCE));  if (isBTree) {    index=BTree.create(store,metadata);  } else {    index=HTree.create(store,(HTreeIndexMetadata)metadata);  }}  }
class C{  FormatSpecifierParser(String format){  this.format=format;  this.length=format.length();}  }
class C{  public static PrivateKey mutate(final PrivateKey key){  return new PrivateKey(key.getRaw().add(BigInteger.ONE));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.748 -0500",hash_original_method="8F28A3C0281B6F16DECF00092A03388F",hash_generated_method="E6B3AE3BEB63D05981CAAF6DB37BEC46") private boolean isFreshnessLifetimeHeuristic(){  return maxAgeSeconds == -1 && expires == null;}  }
class C{  public void dispose(IoSession session) throws Exception {}  }
class C{  public static boolean nameEquals(char[][] typeName,String string){  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  char[] elem : typeName) {    if (first)     first=false; else     sb.append('.');    sb.append(elem);  }  return string.contentEquals(sb);}  }
class C{  public void cloneSprite() throws IOException {  print("cloneSprite",null);}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){  Debug.message("dndlistener","dropActionChanged(source)");  int action=dsde.getDropAction();  Debug.message("dndlistener","action=" + action);  if (action == default_action) {    dsde.getDragSourceContext().setCursor(getCursor(DragSource.DefaultMoveDrop));  } else {    dsde.getDragSourceContext().setCursor(getCursor(DragSource.DefaultMoveNoDrop));  }}  }
class C{  public boolean validate(Node nodeSignature) throws DigitalSignatureValidationException {  DOMValidateContext validationContext=new DOMValidateContext(factory.newKeySelector(nodeSignature),nodeSignature);  return validate(validationContext);}  }
class C{  public void opc_ifnull(Label l){  short instrBCI=getLength();  emitByte(opc_ifnull);  l.add(this,instrBCI,getLength(),getStack() - 1);  emitShort((short)-1);  decStack();}  }
class C{  protected final void FP_MOV_OP_MOV(Instruction s,Operator op,Operand result,Operand val1,Operand val2){  if (VM.BuildForSSE2) {    UNREACHABLE();  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,D(getFPR(0)),val1)));    EMIT(MIR_BinaryAcc.mutate(s,op,D(getFPR(0)),val2));    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,result,D(getFPR(0)))));  }}  }
class C{  public static int flip(int type,int data,FlipDirection direction){  int flipX=0;  int flipY=0;  int flipZ=0;switch (direction) {case NORTH_SOUTH:    flipZ=1;  break;case WEST_EAST:flipX=1;break;case UP_DOWN:flipY=1;break;}switch (type) {case BlockID.TORCH:case BlockID.REDSTONE_TORCH_OFF:case BlockID.REDSTONE_TORCH_ON:if (data < 1 || data > 4) break;switch (data) {case 1:return data + flipX;case 2:return data - flipX;case 3:return data + flipZ;case 4:return data - flipZ;}break;case BlockID.STONE_BUTTON:case BlockID.WOODEN_BUTTON:{switch (data & ~0x8) {case 1:return data + flipX;case 2:return data - flipX;case 3:return data + flipZ;case 4:return data - flipZ;case 0:case 5:return data ^ (flipY * 5);}break;}case BlockID.LEVER:switch (data & ~0x8) {case 1:return data + flipX;case 2:return data - flipX;case 3:return data + flipZ;case 4:return data - flipZ;case 5:case 7:return data ^ flipY << 1;case 6:case 0:return data ^ flipY * 6;}break;case BlockID.MINECART_TRACKS:switch (data) {case 6:return data + flipX + flipZ * 3;case 7:return data - flipX + flipZ;case 8:return data + flipX - flipZ;case 9:return data - flipX - flipZ * 3;}case BlockID.POWERED_RAIL:case BlockID.DETECTOR_RAIL:case BlockID.ACTIVATOR_RAIL:switch (data & 0x7) {case 0:case 1:return data;case 2:case 3:return data ^ flipX;case 4:case 5:return data ^ flipZ;}break;case BlockID.STEP:case BlockID.WOODEN_STEP:return data ^ (flipY << 3);case 203:case BlockID.RED_SANDSTONE_STAIRS:case BlockID.OAK_WOOD_STAIRS:case BlockID.COBBLESTONE_STAIRS:case BlockID.BRICK_STAIRS:case BlockID.STONE_BRICK_STAIRS:case BlockID.NETHER_BRICK_STAIRS:case BlockID.SANDSTONE_STAIRS:case BlockID.SPRUCE_WOOD_STAIRS:case BlockID.BIRCH_WOOD_STAIRS:case BlockID.JUNGLE_WOOD_STAIRS:case BlockID.QUARTZ_STAIRS:case BlockID.ACACIA_STAIRS:case BlockID.DARK_OAK_STAIRS:data^=flipY << 2;switch (data) {case 0:case 1:case 4:case 5:return data ^ flipX;case 2:case 3:case 6:case 7:return data ^ flipZ;}break;case BlockID.WOODEN_DOOR:case BlockID.IRON_DOOR:if ((data & 0x8) != 0) {break;}switch (data & 0x3) {case 0:return data + flipX + flipZ * 3;case 1:return data - flipX + flipZ;case 2:return data + flipX - flipZ;case 3:return data - flipX - flipZ * 3;}break;case BlockID.SIGN_POST:switch (direction) {case NORTH_SOUTH:return (16 - data) & 0xf;case WEST_EAST:return (8 - data) & 0xf;default :}break;case BlockID.LADDER:case BlockID.WALL_SIGN:case BlockID.CHEST:case BlockID.FURNACE:case BlockID.BURNING_FURNACE:case BlockID.ENDER_CHEST:case BlockID.TRAPPED_CHEST:case BlockID.HOPPER:int extra=data & 0x8;int withoutFlags=data & ~0x8;switch (withoutFlags) {case 2:case 3:return (data ^ flipZ) | extra;case 4:case 5:return (data ^ flipX) | extra;}break;case 198:case BlockID.DROPPER:case BlockID.DISPENSER:int dispPower=data & 0x8;switch (data & ~0x8) {case 2:case 3:return (data ^ flipZ) | dispPower;case 4:case 5:return (data ^ flipX) | dispPower;case 0:case 1:return (data ^ flipY) | dispPower;}break;case BlockID.PUMPKIN:case BlockID.JACKOLANTERN:if (data > 3) break;case BlockID.REDSTONE_REPEATER_OFF:case BlockID.REDSTONE_REPEATER_ON:case BlockID.COMPARATOR_OFF:case BlockID.COMPARATOR_ON:case BlockID.COCOA_PLANT:case BlockID.TRIPWIRE_HOOK:switch (data & 0x3) {case 0:case 2:return data ^ (flipZ << 1);case 1:case 3:return data ^ (flipX << 1);}break;case BlockID.TRAP_DOOR:case BlockID.IRON_TRAP_DOOR:switch (data & 0x3) {case 0:case 1:return data ^ flipZ;case 2:case 3:return data ^ flipX;}break;case BlockID.PISTON_BASE:case BlockID.PISTON_STICKY_BASE:case BlockID.PISTON_EXTENSION:switch (data & ~0x8) {case 0:case 1:return data ^ flipY;case 2:case 3:return data ^ flipZ;case 4:case 5:return data ^ flipX;}break;case BlockID.RED_MUSHROOM_CAP:case BlockID.BROWN_MUSHROOM_CAP:switch (data) {case 1:case 4:case 7:data+=flipX * 2;break;case 3:case 6:case 9:data-=flipX * 2;break;}switch (data) {case 1:case 2:case 3:return data + flipZ * 6;case 7:case 8:case 9:return data - flipZ * 6;}break;case BlockID.VINE:final int bit1, bit2;switch (direction) {case NORTH_SOUTH:bit1=0x2;bit2=0x8;break;case WEST_EAST:bit1=0x1;bit2=0x4;break;default :return data;}int newData=data & ~(bit1 | bit2);if ((data & bit1) != 0) newData|=bit2;if ((data & bit2) != 0) newData|=bit1;return newData;case BlockID.FENCE_GATE:switch (data & 0x3) {case 0:case 2:return data ^ flipZ << 1;case 1:case 3:return data ^ flipX << 1;}break;case BlockID.BED:switch (data & 0x3) {case 0:case 2:return data ^ flipZ << 1;case 1:case 3:return data ^ flipX << 1;}break;case BlockID.HEAD:switch (data) {case 2:case 3:return data ^ flipZ;case 4:case 5:return data ^ flipX;}break;case BlockID.ANVIL:switch (data & 0x3) {case 0:case 2:return data ^ flipZ << 1;case 1:case 3:return data ^ flipX << 1;}break;}return data;}  }
class C{  public static double angle(double[] v1,double[] v2){  final int mindim=(v1.length >= v2.length) ? v1.length : v2.length;  double s=0, e1=0, e2=0;  for (int k=0; k < mindim; k++) {    final double r1=v1[k];    final double r2=v2[k];    s+=r1 * r2;    e1+=r1 * r1;    e2+=r2 * r2;  }  for (int k=mindim; k < v1.length; k++) {    final double r1=v1[k];    e1+=r1 * r1;  }  for (int k=mindim; k < v2.length; k++) {    final double r2=v2[k];    e2+=r2 * r2;  }  double a=Math.sqrt((s / e1) * (s / e2));  return (a < 1.) ? a : 1.;}  }
class C{  public void add(EventBean[] events){  if (events == null) {    return;  }  for (int i=0; i < events.length; i++) {    add(events[i]);  }}  }
class C{  public StatMonitorHandler(){}  }
class C{  @Description(summary="Build the h2console.war file.") public void warConsole(){  jar();  copy("temp/WEB-INF",files("src/tools/WEB-INF/web.xml"),"src/tools/WEB-INF");  copy("temp",files("src/tools/WEB-INF/console.html"),"src/tools/WEB-INF");  copy("temp/WEB-INF/lib",files("bin/h2" + getJarSuffix()),"bin");  FileList files=files("temp").exclude("temp/org*").exclude("temp/META-INF*");  files.exclude("*.DS_Store");  jar("bin/h2console.war",files,"temp");}  }
class C{  public MemoryExampleTable(List<Attribute> attributes,DataRowFactory factory,int size){  this(attributes);  dataList=new ArrayList<DataRow>(size);  for (int i=0; i < size; i++) {    DataRow dataRow=factory.create(attributes.size());    for (    Attribute attribute : attributes) {      dataRow.set(attribute,Double.NaN);    }    dataList.add(dataRow);  }}  }
class C{  public void destroyDialog(final Class<?> dialogController){  dialogControllers.get(dialogController).destroyDialog();}  }
class C{  public Object[] toArray(Object[] a){  if (a.length < size) {    a=(Object[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  }  int i=0;  for (Entry e=header.next; e != header; e=e.next) {    a[i++]=e.element;  }  if (a.length > size) {    a[size]=null;  }  return a;}  }
class C{  public static byte[] join(byte[]... bufs){  int size=0;  for (  byte[] buf : bufs) {    size+=buf.length;  }  byte[] res=new byte[size];  int position=0;  for (  byte[] buf : bufs) {    arrayCopy(buf,0,res,position,buf.length);    position+=buf.length;  }  return res;}  }
class C{  public boolean zip(File[] src,File dest){  return false;}  }
class C{  public Vector2 mul(Vector2 v){  float x=vals[POS_X] + vals[COS] * v.x + -vals[SIN] * v.y;  float y=vals[POS_Y] + vals[SIN] * v.x + vals[COS] * v.y;  v.x=x;  v.y=y;  return v;}  }
class C{  private void recreateDirectoryIfVersionChanges(){  boolean recreateBase=false;  if (!mRootDirectory.exists()) {    recreateBase=true;  } else   if (!mVersionDirectory.exists()) {    recreateBase=true;    FileTree.deleteRecursively(mRootDirectory);  }  if (recreateBase) {    try {      FileUtils.mkdirs(mVersionDirectory);    } catch (    FileUtils.CreateDirectoryException e) {      mCacheErrorLogger.logError(CacheErrorLogger.CacheErrorCategory.WRITE_CREATE_DIR,TAG,"version directory could not be created: " + mVersionDirectory,null);    }  }}  }
class C{  public static void parametersToAttributes(HttpServletRequest request){  java.util.Enumeration<String> e=UtilGenerics.cast(request.getParameterNames());  while (e.hasMoreElements()) {    String name=e.nextElement();    request.setAttribute(name,request.getParameter(name));  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.171 -0500",hash_original_method="35E0733B1286860BF21842013F8FFA5F",hash_generated_method="74ED8BFECD329202BD9A7991EB86B847") private String readName() throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    checkRelaxed("name expected");    return "";  }  int start=position;  StringBuilder result=null;  char c=buffer[position];  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= '\u00c0' || relaxed) {    position++;  } else {    checkRelaxed("name expected");    return "";  }  while (true) {    if (position >= limit) {      if (result == null) {        result=new StringBuilder();      }      result.append(buffer,start,position - start);      if (!fillBuffer(1)) {        return result.toString();      }      start=position;    }    c=buffer[position];    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_' || c == '-' || c == ':' || c == '.' || c >= '\u00b7') {      position++;      continue;    }    if (result == null) {      return stringPool.get(buffer,start,position - start);    } else {      result.append(buffer,start,position - start);      return result.toString();    }  }}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearMetadata(){  metadata=null;  fieldSetFlags()[22]=false;  return this;}  }
class C{  public static void clearFlow(){  sFlowMap.clear();}  }
class C{  public HGPersistentHandle store(byte[] data){  HGPersistentHandle handle=config.getHandleFactory().makeHandle();  store(handle,data);  return handle;}  }
class C{  public FightBattleDetails waitForBattleSelection(){  return m_battlePanel.waitForBattleSelection();}  }
class C{  @Override public void g(float sideMot,float forMot){  if (!CustomEntities.customEntities.contains(this)) {    super.g(sideMot,forMot);    return;  }  if (getSize() != 3)   setSize(3);  if (this.passenger != null && this.passenger instanceof EntityHuman && CustomEntities.customEntities.contains(this)) {    this.lastYaw=this.yaw=this.passenger.yaw;    this.pitch=this.passenger.pitch * 0.5F;    this.setYawPitch(this.yaw,this.pitch);    this.aI=this.aG=this.yaw;    sideMot=((EntityLiving)this.passenger).aZ * 0.5F;    forMot=((EntityLiving)this.passenger).ba;    Field jump=null;    try {      jump=EntityLiving.class.getDeclaredField("aY");    } catch (    NoSuchFieldException|SecurityException e1) {      e1.printStackTrace();    }    jump.setAccessible(true);    if (jump != null && BlockUtils.isOnGround(this.getBukkitEntity())) {      try {        if (jump.getBoolean(this.passenger)) {          double jumpHeight=0.3D;          this.motY=jumpHeight;        }      } catch (      IllegalAccessException e) {        e.printStackTrace();      }    }    this.S=1.0F;    this.aK=this.yaw;    if (!this.world.isClientSide) {      this.k(0.2f);      if (bM()) {        if (V()) {          double d0=locY;          float f3=0.8F;          float f4=0.02F;          float f2=EnchantmentManager.b(this);          if (f2 > 3.0F) {            f2=3.0F;          }          if (f2 > 0.0F) {            f3+=(0.5460001F - f3) * f2 / 3.0F;            f4+=(bI() * 1.0F - f4) * f2 / 3.0F;          }          a(sideMot,forMot,f4);          move(motX,motY,motZ);          motX*=f3;          motY*=0.800000011920929D;          motZ*=f3;          motY-=0.02D;          if ((positionChanged) && (c(motX,motY + 0.6000000238418579D - locY + d0,motZ)))           motY=0.300000011920929D;        } else         if (ab()) {          double d0=locY;          a(sideMot,forMot,0.02F);          move(motX,motY,motZ);          motX*=0.5D;          motY*=0.5D;          motZ*=0.5D;          motY-=0.02D;          if ((positionChanged) && (c(motX,motY + 0.6000000238418579D - locY + d0,motZ)))           motY=0.300000011920929D;        } else {          float f5=world.getType(new BlockPosition(MathHelper.floor(locX),MathHelper.floor(getBoundingBox().b) - 1,MathHelper.floor(locZ))).getBlock().frictionFactor * 0.91F;          float f6=0.1627714F / (f5 * f5 * f5);          float f3=bI() * f6;          a(sideMot,forMot,f3);          f5=world.getType(new BlockPosition(MathHelper.floor(locX),MathHelper.floor(getBoundingBox().b) - 1,MathHelper.floor(locZ))).getBlock().frictionFactor * 0.91F;          if (k_()) {            float f4=0.15F;            motX=MathHelper.a(motX,-f4,f4);            motZ=MathHelper.a(motZ,-f4,f4);            fallDistance=0.0F;            if (motY < -0.15D) {              motY=-0.15D;            }            if (motY < 0.0D) {              motY=0.0D;            }          }          move(motX,motY,motZ);          if ((positionChanged) && (k_())) {            motY=0.2D;          }          if ((world.isClientSide) && ((!world.isLoaded(new BlockPosition((int)locX,0,(int)locZ))) || (!world.getChunkAtWorldCoords(new BlockPosition((int)locX,0,(int)locZ)).o()))) {            if (locY > 0.0D)             motY=-0.1D; else             motY=0.0D;          } else {            motY+=0D;          }          motY*=0.9800000190734863D;          motX*=f5;          motZ*=f5;        }      }      ay=az;      double d0=locX - lastX;      double d1=locZ - lastZ;      float f2=MathHelper.sqrt(d0 * d0 + d1 * d1) * 4.0F;      if (f2 > 1.0F) {        f2=1.0F;      }      az+=(f2 - az) * 0.4F;      aA+=az;      super.g(sideMot,forMot);    }    this.ay=this.az;    double d0=this.locX - this.lastX;    double d1=this.locZ - this.lastZ;    float f4=MathHelper.sqrt(d0 * d0 + d1 * d1) * 4.0F;    if (f4 > 1.0F) {      f4=1.0F;    }    this.az+=(f4 - this.az) * 0.4F;    this.aA+=this.az;  } else {    this.S=0.5F;    this.aK=0.02F;    super.g(sideMot,forMot);  }}  }
class C{  private long startWait(){  return System.nanoTime();}  }
class C{  public ColladaVisualScene(String ns){  super(ns);}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("AdressOperator ( ").append("address = ").append(this.address).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public SimpleCompositeService(Iterable<CompositeServiceEntry<? super I,? extends O>> services){  super(services);}  }
class C{  static void testIsSameFile(Path tmpdir) throws IOException {  Path thisFile=tmpdir.resolve("thisFile");  Path thatFile=tmpdir.resolve("thatFile");  assertTrue(isSameFile(thisFile,thisFile));  try {    isSameFile(thisFile,thatFile);    throw new RuntimeException("IOException not thrown");  } catch (  IOException x) {  }  try {    isSameFile(thatFile,thisFile);    throw new RuntimeException("IOException not thrown");  } catch (  IOException x) {  }  createFile(thisFile);  try {    try {      isSameFile(thisFile,thatFile);      throw new RuntimeException("IOException not thrown");    } catch (    IOException x) {    }    try {      isSameFile(thatFile,thisFile);      throw new RuntimeException("IOException not thrown");    } catch (    IOException x) {    }    createFile(thatFile);    try {      assertTrue(!isSameFile(thisFile,thatFile));      assertTrue(!isSameFile(thatFile,thisFile));    }  finally {      delete(thatFile);    }    if (TestUtil.supportsLinks(tmpdir)) {      createSymbolicLink(thatFile,thisFile);      try {        assertTrue(isSameFile(thisFile,thatFile));        assertTrue(isSameFile(thatFile,thisFile));      }  finally {        TestUtil.deleteUnchecked(thatFile);      }    }  }  finally {    delete(thisFile);  }  try {    isSameFile(thisFile,null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException ignore) {  }  try {    isSameFile(null,thatFile);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException ignore) {  }}  }
class C{  public boolean isShunned(DistributedMember m){  if (!shunnedMembers.containsKey(m)) {    return false;  }  latestViewWriteLock.lock();  try {    long shunTime=shunnedMembers.get(m).longValue();    long now=System.currentTimeMillis();    if (shunTime + SHUNNED_SUNSET * 1000 > now) {      return true;    }    endShun(m);    return false;  }  finally {    latestViewWriteLock.unlock();  }}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String redirectToAdvancedSearch(){  return "redirect:/search/advanced_search";}  }
class C{  public GPathResult parse(final String uri) throws IOException, SAXException {  return parse(new InputSource(uri));}  }
class C{  public SelectItemsIterator(FacesContext ctx,UIComponent parent){  kids=parent.getChildren().listIterator();  this.ctx=ctx;}  }
class C{  public int read() throws IOException {  if (_input == null)   throw new IOException("Reader closed");  return (_index < _input.length()) ? _input.charAt(_index++) : -1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  TickUnit tu=getTickUnit();  double size=tu.getSize();  int count=calculateVisibleTickCount();  double lowestTickValue=calculateLowestVisibleTickValue();  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {    int minorTickSpaces=getMinorTickCount();    if (minorTickSpaces <= 0) {      minorTickSpaces=tu.getMinorTickCount();    }    for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {      double minorTickValue=lowestTickValue - size * minorTick / minorTickSpaces;      if (getRange().contains(minorTickValue)) {        result.add(new NumberTick(TickType.MINOR,minorTickValue,"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));      }    }    for (int i=0; i < count; i++) {      double currentTickValue=lowestTickValue + (i * size);      String tickLabel;      NumberFormat formatter=getNumberFormatOverride();      if (formatter != null) {        tickLabel=formatter.format(currentTickValue);      } else {        tickLabel=getTickUnit().valueToString(currentTickValue);      }      TextAnchor anchor, rotationAnchor;      double angle=0.0;      if (isVerticalTickLabels()) {        anchor=TextAnchor.CENTER_RIGHT;        rotationAnchor=TextAnchor.CENTER_RIGHT;        if (edge == RectangleEdge.TOP) {          angle=Math.PI / 2.0;        } else {          angle=-Math.PI / 2.0;        }      } else {        if (edge == RectangleEdge.TOP) {          anchor=TextAnchor.BOTTOM_CENTER;          rotationAnchor=TextAnchor.BOTTOM_CENTER;        } else {          anchor=TextAnchor.TOP_CENTER;          rotationAnchor=TextAnchor.TOP_CENTER;        }      }      Tick tick=new NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);      result.add(tick);      double nextTickValue=lowestTickValue + ((i + 1) * size);      for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {        double minorTickValue=currentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces;        if (getRange().contains(minorTickValue)) {          result.add(new NumberTick(TickType.MINOR,minorTickValue,"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));        }      }    }  }  return result;}  }
class C{  public void testClearBitNegativeOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=150;  byte rBytes[]={-65,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static boolean deleteFilesInFolder(Context context,@NonNull final File folder){  boolean totalSuccess=true;  String[] children=folder.list();  if (children != null) {    for (    String child : children) {      File file=new File(folder,child);      if (!file.isDirectory()) {        boolean success=deleteFile(context,file);        if (!success) {          Log.w(TAG,"Failed to delete file" + child);          totalSuccess=false;        }      }    }  }  return totalSuccess;}  }
class C{  public void removeListener(final IGraphBuilderManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static void validateCertificate(boolean production,X509Certificate certificate) throws CertificateException {  if (certificate == null)   throw new CertificateException("Null certificate");  certificate.checkValidity();  final Map<String,String> stringStringMap=CertificateUtils.splitCertificateSubject(certificate.getSubjectDN().getName());  final String cn=stringStringMap.get("CN");  if (!cn.toLowerCase().contains("push")) {    throw new CertificateException("Not a push certificate - " + cn);  }  if (production && cn.toLowerCase().contains("apple development ios push services")) {    throw new CertificateEnvironmentMismatchException("Invalid environment for this certificate");  } else   if (!production && cn.toLowerCase().contains("apple production ios push services")) {    throw new CertificateEnvironmentMismatchException("Invalid environment for this certificate");  }}  }
class C{  public static String checkNull(String string1,String string2){  if (string1 != null)   return string1; else   if (string2 != null)   return string2; else   return "";}  }
class C{  public static boolean supportsAdd(int type){switch (type) {case Value.BYTE:case Value.DECIMAL:case Value.DOUBLE:case Value.FLOAT:case Value.INT:case Value.LONG:case Value.SHORT:    return true;default :  return false;}}  }
class C{  private static String processStringWithRegex(String text,Pattern pattern,int startIndex,boolean recurseEmojify){  Matcher matcher=pattern.matcher(text);  StringBuffer sb=new StringBuffer();  int resetIndex=0;  if (startIndex > 0) {    matcher.region(startIndex,text.length());  }  while (matcher.find()) {    String emojiCode=matcher.group();    Emoji emoji=getEmoji(emojiCode);    if (emoji != null) {      matcher.appendReplacement(sb,emoji.getEmoji());    } else {      if (htmlSurrogateEntityPattern2.matcher(emojiCode).matches()) {        String highSurrogate1=matcher.group("H1");        String highSurrogate2=matcher.group("H2");        String lowSurrogate1=matcher.group("L1");        String lowSurrogate2=matcher.group("L2");        matcher.appendReplacement(sb,processStringWithRegex(highSurrogate1 + highSurrogate2,shortCodeOrHtmlEntityPattern,0,false));        if (sb.toString().endsWith(highSurrogate2)) {          resetIndex=sb.length() - highSurrogate2.length();        } else {          resetIndex=sb.length();        }        sb.append(lowSurrogate1);        sb.append(lowSurrogate2);        break;      } else       if (htmlSurrogateEntityPattern.matcher(emojiCode).matches()) {        String highSurrogate=matcher.group("H");        String lowSurrogate=matcher.group("L");        matcher.appendReplacement(sb,processStringWithRegex(highSurrogate,htmlEntityPattern,0,true));        resetIndex=sb.length();        sb.append(lowSurrogate);        break;      } else {        matcher.appendReplacement(sb,emojiCode);      }    }  }  matcher.appendTail(sb);  if (recurseEmojify && resetIndex > 0) {    return emojify(sb.toString(),resetIndex);  }  return sb.toString();}  }
class C{  public Property millisOfSecond(){  return new Property(this,getChronology().millisOfSecond());}  }
class C{  public static boolean isValidSubnet(int hash){  int bits=0;  while ((hash & 0b1) == 0 && bits < 31) {    hash>>=1;    bits++;  }  while ((hash & 0b1) == 1 && bits < 32) {    hash>>=1;    bits++;  }  return bits == 32;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintTabbedPaneTabBackground(context,g,x,y,w,h,tabIndex);}  }
class C{  private void deleteImpl(final int startIndex,final int endIndex,final int len){  System.arraycopy(buffer,endIndex,buffer,startIndex,size - endIndex);  size-=len;}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  protected AssociationRequest(ParameterList params){  super(params);}  }
class C{  public AbLetterFilterListView(Context context){  super(context);  init(context);}  }
class C{  protected MoreCode_Impl(){  super();}  }
class C{  public Poloni(){  super(2,2);}  }
class C{  public RangeCondition includeLower(Boolean includeLower){  this.includeLower=includeLower;  return this;}  }
class C{  private PathDataEvaluator(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.282 -0500",hash_original_method="217DDC96D1B25C0D1457937D523A3AA4",hash_generated_method="8D3841501153DC8DC4D44C4E93EC71D1") public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public UserActiveException(){  super();}  }
class C{  public void updateAccessTime(){  attributes.setLastAccessedTime(System.currentTimeMillis());}  }
class C{  protected List<double[]> categorize(){  int[] n=new int[numberOfGroups];  for (  Observation observation : data) {    n[observation.getGroup()]++;  }  List<double[]> groupedData=new ArrayList<double[]>();  for (int i=0; i < numberOfGroups; i++) {    groupedData.add(new double[n[i]]);  }  for (  Observation observation : data) {    int group=observation.getGroup();    n[group]--;    groupedData.get(group)[n[group]]=observation.getValue();  }  return groupedData;}  }
class C{  @Override public void close(){  if (root == null) {    throw new IllegalStateException(ERROR_CLOSED);  }  fileStore.lock.lock();  try {    super.close();    fileStore.close();    if (openCloseEvent != null) {      openCloseEvent.end();      openCloseEvent=null;    }  }  finally {    fileStore.lock.unlock();  }}  }
class C{  public <T>DataStream<T> foldNeighbors(T initialValue,final EdgesFold<K,EV,T> foldFunction){  return windowedStream.fold(initialValue,new EdgesFoldFunction<K,EV,T>(foldFunction));}  }
class C{  void add(Iterable<S3TimeData> newData){  assert newData != null;synchronized (mux) {    for (    S3TimeData data : newData)     map.put(data.getKey(),data);    mux.notifyAll();  }}  }
class C{  @Override public boolean isMultiple(){  return getReferenceGeometry().isMultiple();}  }
class C{  public void paintMenuBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public String toString(){  return name;}  }
class C{  public static void markInActiveUnManagedVolumes(StorageSystem storageSystem,Set<URI> discoveredUnManagedVolumes,DbClient dbClient,PartitionManager partitionManager){  _log.info(" -- Processing {} discovered UnManaged Volumes Objects from -- {}",discoveredUnManagedVolumes.size(),storageSystem.getLabel());  if (discoveredUnManagedVolumes.isEmpty()) {    return;  }  URIQueryResultList allAvailableUnManagedVolumesInDB=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceUnManagedVolumeConstraint(storageSystem.getId()),allAvailableUnManagedVolumesInDB);  Set<URI> unManagedVolumesInDBSet=new HashSet<URI>();  Iterator<URI> allAvailableUnManagedVolumesItr=allAvailableUnManagedVolumesInDB.iterator();  while (allAvailableUnManagedVolumesItr.hasNext()) {    unManagedVolumesInDBSet.add(allAvailableUnManagedVolumesItr.next());  }  SetView<URI> onlyAvailableinDB=Sets.difference(unManagedVolumesInDBSet,discoveredUnManagedVolumes);  _log.info("Diff :" + Joiner.on("\t").join(onlyAvailableinDB));  if (!onlyAvailableinDB.isEmpty()) {    List<UnManagedVolume> unManagedVolumeTobeDeleted=new ArrayList<UnManagedVolume>();    Iterator<UnManagedVolume> unManagedVolumes=dbClient.queryIterativeObjects(UnManagedVolume.class,new ArrayList<URI>(onlyAvailableinDB));    while (unManagedVolumes.hasNext()) {      UnManagedVolume volume=unManagedVolumes.next();      if (null == volume || volume.getInactive()) {        continue;      }      _log.info("Setting unManagedVolume {} inactive",volume.getId());      volume.setStoragePoolUri(NullColumnValueGetter.getNullURI());      volume.setStorageSystemUri(NullColumnValueGetter.getNullURI());      volume.setInactive(true);      unManagedVolumeTobeDeleted.add(volume);    }    if (!unManagedVolumeTobeDeleted.isEmpty()) {      partitionManager.updateAndReIndexInBatches(unManagedVolumeTobeDeleted,1000,dbClient,UNMANAGED_VOLUME);    }  }}  }
class C{  public void endPreserveAspectRatio() throws ParseException {  hasPreserveAspectRatio=true;}  }
class C{  @Override public int compareTo(Object o){  int result=-1;  if (o != null && o instanceof RyaType) {    result=0;    RyaType other=(RyaType)o;    if (this.data != other.data) {      if (this.data == null)       return 1;      if (other.data == null)       return -1;      result=this.data.compareTo(other.data);    }    if (result == 0 && this.dataType != other.dataType) {      if (this.dataType == null)       return 1;      if (other.dataType == null)       return -1;      result=this.dataType.toString().compareTo(other.dataType.toString());    }  }  return result;}  }
class C{  private File createMultiBitRuntime() throws IOException {  File multiBitDirectory=FileHandler.createTempDirectory("CreateAndDeleteWalletsTest");  String multiBitDirectoryPath=multiBitDirectory.getAbsolutePath();  System.out.println("Building MultiBit runtime in : " + multiBitDirectory.getAbsolutePath());  File multibitProperties=new File(multiBitDirectoryPath + File.separator + "multibit.properties");  multibitProperties.createNewFile();  multibitProperties.deleteOnExit();  File multibitCheckpoints=new File(multiBitDirectoryPath + File.separator + "multibit.checkpoints");  FileHandler.copyFile(new File("./src/main/resources/multibit.checkpoints"),multibitCheckpoints);  multibitCheckpoints.deleteOnExit();  return multiBitDirectory;}  }
class C{  public void tasks(){  log.info("Started PeerManager tasks.");  garbageCollectPeers();  log.info("Finished with PeerManager tasks.");}  }
class C{  public CToggleSelectedGroupsAction(final ZyGraph graph){  super("Open/Close Selected Groups");  m_graph=Preconditions.checkNotNull(graph,"IE02841: graph argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_TOGGLE_SELECTED_GROUPS_HK.getKeyStroke());}  }
class C{  public static boolean canReplacePart(World world,BlockPos pos,String oldType,IMultipart newPart){  IMultipartContainer container=getPartContainer(world,pos);  if (container == null)   return false;  IMultipart oldPart=null;  for (  IMultipart part : container.getParts()) {    if (part.getType().equals(oldType)) {      oldPart=part;      break;    }  }  return container.canReplacePart(oldPart,newPart);}  }
class C{  public void filter(String query){  mSearchViewExpanded=false;  mFilter=query;  mFavoriteManager.attach(getActivity(),getLoaderManager(),this,mFilter);}  }
class C{  public DeviceScale(Component parent,AppProperties props){  StringParser sd=new StringParser(AppConfig.getInstance().getProperty("machine.scale"));  String sScaleType=sd.nextToken(':');  String sScaleParam1=sd.nextToken(',');switch (sScaleType) {case "Adam Equipment":    m_scale=new ScaleAdam(sScaleParam1,parent);  break;case "casiopd1":m_scale=new ScaleCasioPD1(sScaleParam1);break;case "dialog1":m_scale=new ScaleComm(sScaleParam1);break;case "samsungesp":m_scale=new ScaleSamsungEsp(sScaleParam1);break;case "caspdii":m_scale=new ScaleCASPDII(sScaleParam1);break;case "fake":m_scale=new ScaleFake();break;case "screen":m_scale=new ScaleDialog(parent);break;default :m_scale=null;break;}}  }
class C{  public RevealOutputGraph bool2(int k){  int[][] parents=new int[ngenes][];  int[][] lags=new int[ngenes][];  int[] f=new int[ngenes];  int numberTotalInputs=1;  for (int i=0; i < ngenes; i++) {    numberTotalInputs*=2;  }  int numberInputCombinations=1;  for (int i=0; i < k; i++) {    numberInputCombinations*=2;  }  double theta0=1.0 / (2.0 * numberInputCombinations * numberInputCombinations);  double theta=theta0;  System.out.println("Theta = " + theta);  int numberBooleanFunctions=1;  for (int i=0; i < numberInputCombinations; i++) {    numberBooleanFunctions*=2;  }  System.out.println("nrows = " + numberInputCombinations + " number functions = "+ numberBooleanFunctions);  for (int gchild=0; gchild < ngenes; gchild++) {    System.out.println("Child gene " + gchild);    TH:     for (int m=1; m <= 60; m++) {      theta=theta0 * m;      System.out.println("Theta = " + theta);      int count=0;      int[] pars=new int[k];      pars[0]=-1;      pars[1]=-1;      pars[2]=-1;      for (int input=0; input < numberTotalInputs; input++) {        byte[] inputs=booleanRepresentation(input,ngenes);        if (sumBits(inputs) == k) {          int j=0;          for (int i=0; i < ngenes; i++) {            if (inputs[i] == 1) {              pars[j]=i;              j++;            }          }        } else {          continue;        }        for (int function=0; function < numberBooleanFunctions; function++) {          byte[] fi=booleanRepresentation(function,numberInputCombinations);          int mismatch=0;          for (int j=0; j < ntimes - 1; j++) {            boolean match=true;            int argument=0;            int power=1;            for (int i=0; i < k; i++) {              argument+=power * cases[j][pars[k - i - 1]];              power*=2;            }            int finput=fi[argument];            if (finput != cases[j + 1][gchild]) {              mismatch++;            }          }          if (mismatch < theta * ntimes) {            System.out.println("update parents");            parents[gchild]=new int[k];            lags[gchild]=new int[k];            f[gchild]=function;            for (int i=0; i < k; i++) {              parents[gchild][i]=pars[i];              lags[gchild][i]=1;            }            count=1;            break TH;          }        }      }      if (count != 1) {        System.out.println("Regulators not identified count = " + count);        parents[gchild]=new int[0];        lags[gchild]=new int[0];      } else {        System.out.println("Regulators are:  ");        for (int i=0; i < parents[gchild].length; i++) {          System.out.println("  i = " + i + " par = "+ parents[gchild][i]);        }      }    }    System.out.println("regulators are:  ");    for (int i=0; i < parents[gchild].length; i++) {      System.out.println("  i = " + i + " par = "+ parents[gchild][i]);    }  }  System.out.println("Returning");  return null;}  }
class C{  SelectionEventHandler(final VisionWorld visionWorld){  super();  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  this.selectionModel=visionWorld.getSensorSelectionModel();}  }
class C{  public byte[] readBitsArray(final int items,final JBBPBitNumber bitNumber) throws IOException {  return _readArray(items,bitNumber);}  }
class C{  public HistogramTableModel(){}  }
class C{  public synchronized boolean hasAnyRelationshipToTarget(Vertex target){  Iterator<Relationship> relationships=allRelationships();  while (relationships.hasNext()) {    Relationship relationship=relationships.next();    if (!relationship.isInverse() && relationship.getTarget().equals(target)) {      return true;    }  }  return false;}  }
class C{  public static final XResourceBundle loadResourceBundle(String className,Locale locale) throws MissingResourceException {  String suffix=getResourceSuffix(locale);  try {    String resourceName=className + suffix;    return (XResourceBundle)ResourceBundle.getBundle(resourceName,locale);  } catch (  MissingResourceException e) {    try {      return (XResourceBundle)ResourceBundle.getBundle(XSLT_RESOURCE,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  public synchronized void writeExternal(ObjectOutput os) throws IOException {  if (mimeType != null) {    mimeType.setParameter("humanPresentableName",humanPresentableName);    os.writeObject(mimeType);    mimeType.removeParameter("humanPresentableName");  } else {    os.writeObject(null);  }  os.writeObject(representationClass);}  }
class C{  public void miny(int parseInt){  miny=parseInt;  tileBoundsSet=true;}  }
class C{  public <T>List<T> testOneThreadTwoItems(T a,T b){  Trace.trace(Item.SCHEDULER,"testOneThreadTwoItems: in");  List<T> results=new ArrayList<T>(2);  Scheduler.scheduleMutator(new TestMutator<T>(results,a,b));  Scheduler.schedule();  Trace.trace(Item.SCHEDULER,"testOneThreadTwoItems: out");  return results;}  }
class C{  boolean checkTransitivityOutgoing(Fact fact){  return fact.span() >= minTransitiveRight;}  }
class C{  public void clearUserConstraint(){  setUserConstraint(USER_ANY);}  }
class C{  public void addUseCount(){  if (_indirectSource != null) {    _indirectSource.addUseCount();  } else   if (_useCount != null) {    _useCount.incrementAndGet();  }}  }
class C{  public Instance replaceMovieClip(Symbol symbol,int depth,Transform matrix2,AlphaTransform cxform,String name,Actions[] clipActions){  Transform matrix=matrix2;  Instance inst=new Instance(symbol,depth);  if (matrix == null) {    matrix=new Transform();  }  Placement placement=new Placement(inst,matrix,cxform,name,-1,-1,frameNumber,false,true,clipActions);  placements.add(placement);  return inst;}  }
class C{  @Override public void onProjectClosed(ProjectActionEvent event){  ProjectDescriptor project=event.getProject();  final String projectTypeId=project.getType();  boolean isJSProject=projectTypeId.endsWith("JS");  if (isJSProject) {    workspaceAgent.removePart(yeomanPartPresenter);  }}  }
class C{  @Override public int previewTexturesLength(){  return this.getPreviewTilesNumber();}  }
class C{  public T caseBootstrapModule(BootstrapModule object){  return null;}  }
class C{  private static void fillBasin(DTSweepContext tcx,AdvancingFrontNode node){  if (orient2d(node.point,node.next.point,node.next.next.point) == Orientation.CCW) {    tcx.basin.leftNode=node;  } else {    tcx.basin.leftNode=node.next;  }  tcx.basin.bottomNode=tcx.basin.leftNode;  while (tcx.basin.bottomNode.hasNext() && tcx.basin.bottomNode.point.getY() >= tcx.basin.bottomNode.next.point.getY()) {    tcx.basin.bottomNode=tcx.basin.bottomNode.next;  }  if (tcx.basin.bottomNode == tcx.basin.leftNode) {    return;  }  tcx.basin.rightNode=tcx.basin.bottomNode;  while (tcx.basin.rightNode.hasNext() && tcx.basin.rightNode.point.getY() < tcx.basin.rightNode.next.point.getY()) {    tcx.basin.rightNode=tcx.basin.rightNode.next;  }  if (tcx.basin.rightNode == tcx.basin.bottomNode) {    return;  }  tcx.basin.width=tcx.basin.rightNode.getPoint().getX() - tcx.basin.leftNode.getPoint().getX();  tcx.basin.leftHighest=tcx.basin.leftNode.getPoint().getY() > tcx.basin.rightNode.getPoint().getY();  fillBasinReq(tcx,tcx.basin.bottomNode);}  }
class C{  public OnePointCrossover(double probability){  this.probability=probability;}  }
class C{  public static Map ordinalMap(Iterator tuples,String field,Comparator cmp){  Object[] o=ordinalArray(tuples,field,cmp);  HashMap map=new HashMap();  for (int i=0; i < o.length; ++i)   map.put(o[i],new Integer(i));  return map;}  }
class C{  protected void emit_InterfaceImplementsList_ExtendsKeyword_0_0_or_ImplementsKeyword_0_1(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.428 -0500",hash_original_method="F893922E2C2E4CF6AF95C190516DB394",hash_generated_method="FDE8D96477E28E3BDD367BAF0ED08001") public LongSparseArray(){  this(10);}  }
class C{  public nobr(Element element){  addElement(element);}  }
class C{  protected void checkOpenAngle(){  int bufferEnd=getBufferEnd();  int tokenStart=getTokenEnd();  int run=tokenStart;  CharSequence buffer=getBuffer();  while (run < bufferEnd && buffer.charAt(run) == '<') {    run++;  }  if (run > tokenStart) {    if (run == bufferEnd || run == tokenStart + 1 || Character.isWhitespace(buffer.charAt(run))) {      pushPreparsedToken(tokenStart,run,POD_ANGLE_LEFT);      myOpenedAngles.add(run - tokenStart);    } else {      pushPreparsedToken(tokenStart,tokenStart + 1,POD_ANGLE_LEFT);      myOpenedAngles.add(1);    }  }}  }
class C{  public List<A> prependList(List<A> xs){  if (this.isEmpty())   return xs; else   if (xs.isEmpty())   return this; else   return this.prependList(xs.tail).prepend(xs.head);}  }
class C{  public void addGap(int length){  super.addGap(length);}  }
class C{  public static boolean writeMessage(MessageWrapper mw){  if (mw.t == null)   return false;  try {synchronized (DAO.class) {      boolean exists=false;      if (mw.t.getCreatedAt().after(DateParser.oneHourAgo())) {        exists=messages_hour.writeEntry(new IndexEntry<MessageEntry>(mw.t.getIdStr(),mw.t.getSourceType(),mw.t));        if (exists)         return false;      }      if (mw.t.getCreatedAt().after(DateParser.oneDayAgo())) {        exists=messages_day.writeEntry(new IndexEntry<MessageEntry>(mw.t.getIdStr(),mw.t.getSourceType(),mw.t));        if (exists)         return false;      }      if (mw.t.getCreatedAt().after(DateParser.oneWeekAgo())) {        exists=messages_week.writeEntry(new IndexEntry<MessageEntry>(mw.t.getIdStr(),mw.t.getSourceType(),mw.t));        if (exists)         return false;      }      exists=messages.writeEntry(new IndexEntry<MessageEntry>(mw.t.getIdStr(),mw.t.getSourceType(),mw.t));      if (exists)       return false;      users.writeEntry(new IndexEntry<UserEntry>(mw.u.getScreenName(),mw.t.getSourceType(),mw.u));      if (mw.dump)       message_dump.write(mw.t.toJSON(mw.u,false,Integer.MAX_VALUE,""));    }    Classifier.learnPhrase(mw.t.getText(Integer.MAX_VALUE,""));  } catch (  IOException e) {    Log.getLog().warn(e);  }  return true;}  }
class C{  protected void addPeriod(ReadablePeriod period){  if (period != null) {    setValues(addPeriodInto(getValues(),period));  }}  }
class C{  public static int[] toArray(String s){  return toArray(s,IPv4);}  }
class C{  public DefineTag build(){  int count=glyphEntryMap.size();  if (Trace.font)   Trace.trace("Building font '" + tag.fontName + "' with "+ count+ " characters.");  if (flashType && tag instanceof DefineFont3) {    DefineFont3 df3=(DefineFont3)tag;    df3.zones=new DefineFontAlignZones();    df3.zones.font=df3;    df3.zones.zoneTable=new ZoneRecord[count];    df3.zones.csmTableHint=1;  }  tag.glyphShapeTable=new Shape[count];  if (tag.code != Tag.stagDefineFont) {    tag.codeTable=new char[count];    if (tag.hasLayout) {      tag.advanceTable=new short[count];      tag.boundsTable=new Rect[count];    }  }  Iterator it=glyphEntryMap.iterator();  int i=0;  while (it.hasNext() && i < count) {    GlyphEntry ge=(GlyphEntry)((Map.Entry)it.next()).getValue();    if (flashType && tag instanceof DefineFont3) {      ((DefineFont3)tag).zones.zoneTable[i]=ge.zoneRecord;    }    tag.glyphShapeTable[i]=ge.shape;    ge.setIndex(i);    if (tag.code != Tag.stagDefineFont) {      tag.codeTable[i]=ge.character;      if (tag.hasLayout) {        tag.advanceTable[i]=(short)ge.advance;        tag.boundsTable[i]=IDENTITY_RECT;      } else {        if (Trace.font)         Trace.trace("Warning: font tag created without layout information.");      }    }    i++;  }  if (tag.hasLayout) {    tag.kerningTable=new KerningRecord[0];  }  if (useLicenseTag && ((getFSType() != null && !getFSType().installable) || getCopyright() != null || getName() != null)) {    tag.license=new DefineFontName();    tag.license.font=tag;    tag.license.fontName=getName();    tag.license.copyright=getCopyright();  }  return tag;}  }
class C{  public void addResponse(RecordResponse response){  if (response.getResponseSize() + getResponseSize() > 248) {    throw new IllegalArgumentException();  }  if (records == null) {    records=new RecordResponse[1];  } else {    RecordResponse old[]=records;    records=new RecordResponse[old.length + 1];    System.arraycopy(old,0,records,0,old.length);  }  records[records.length - 1]=response;  setDataLength(getResponseSize());}  }
class C{  public static void placePlayerIntoWorldOnLogin(final RPObject object,final Player player){  StendhalRPZone zone=null;  String zoneName=System.getProperty("stendhal.forcezone");  if (zoneName != null) {    zone=SingletonRepository.getRPWorld().getZone(zoneName);    zone.placeObjectAtEntryPoint(player);    return;  }  try {    if (object.has("zoneid") && object.has("x") && object.has("y")) {      if (Version.checkCompatibility(object.get("release"),Debug.VERSION)) {        zone=SingletonRepository.getRPWorld().getZone(object.get("zoneid"));      } else {        if (player.getLevel() >= 2) {          TutorialNotifier.newrelease(player);        }      }      player.put("release",Debug.VERSION);    }  } catch (  final RuntimeException e) {    logger.warn("Cannot place player at its last position. Using default",e);  }  if (zone != null) {    if (!StendhalRPAction.placeat(zone,player,player.getX(),player.getY())) {      logger.warn("Cannot place player at their last position: " + player.getName());      zone=null;    }  }  if (zone == null) {    final String defaultZoneName=getDefaultZoneForPlayer(player);    zone=SingletonRepository.getRPWorld().getZone(defaultZoneName);    if (zone == null) {      logger.error("Unable to locate default zone [" + defaultZoneName + "]");      return;    }    zone.placeObjectAtEntryPoint(player);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.797 -0500",hash_original_method="1E545822701FEAEF52AB68BFB73351A8",hash_generated_method="67B0DB4F7332E1551B3772D6F1B4F707") private boolean isClosed(){  return buf.getTaintBoolean();}  }
class C{  protected void firePropertyChange(PropertyChangeEvent evt){  propertyChangeSupport.firePropertyChange(evt);}  }
class C{  public static final double log(double a){  return ieee754_log(a);}  }
class C{  private SynthStyle mergeStyles(List styles){  int size=styles.size();  if (size == 0) {    return null;  } else   if (size == 1) {    return (SynthStyle)((DefaultSynthStyle)styles.get(0)).clone();  }  DefaultSynthStyle style=(DefaultSynthStyle)styles.get(size - 1);  style=(DefaultSynthStyle)style.clone();  for (int counter=size - 2; counter >= 0; counter--) {    style=((DefaultSynthStyle)styles.get(counter)).addTo(style);  }  return style;}  }
class C{  private OcrResultIterator findString(String str,OcrResult result){  OcrResultIterator iter=new OcrResultIterator(result);  while (iter.hasNext()) {    if (stringMatch(str,iter))     return iter;    iter.moveToNext();  }  return null;}  }
class C{  public void removeDispatcherListener(DispatcherListener listener){  removeListener(BeforeDispatch,listener);  removeListener(AfterDispatch,listener);}  }
class C{  @SuppressWarnings("deprecation") public void configureManagers(){  powerManager=new jmri.jmrix.mrc.MrcPowerManager(this);  InstanceManager.store(powerManager,jmri.PowerManager.class);  turnoutManager=new jmri.jmrix.mrc.MrcTurnoutManager(getMrcTrafficController(),getSystemPrefix());  InstanceManager.setTurnoutManager(turnoutManager);  throttleManager=new jmri.jmrix.mrc.MrcThrottleManager(this);  InstanceManager.setThrottleManager(throttleManager);  InstanceManager.setProgrammerManager(getProgrammerManager());  clockManager=new jmri.jmrix.mrc.MrcClockControl(getMrcTrafficController(),getSystemPrefix());  InstanceManager.addClockControl(clockManager);}  }
class C{  public void aggregateAsync(final KVO<BigdataValue>[] chunk,final BlobsWriteProc.Result result,final Split split){  for (int i=0; i < chunk.length; i++) {    final int counter=result.counters[i];    if (counter == BlobsIndexHelper.NOT_FOUND) {      if (!readOnly)       throw new AssertionError();    } else {      final BigdataValue value=chunk[i].obj;      @SuppressWarnings("rawtypes") final BlobIV<?> iv=new BlobIV(VTE.valueOf(value),value.hashCode(),(short)counter);      value.setIV(iv);      if (chunk[i] instanceof KVOList) {        final KVOList<BigdataValue> tmp=(KVOList<BigdataValue>)chunk[i];        if (!tmp.isDuplicateListEmpty()) {          tmp.map(new AssignTermId(iv));        }      }      if (log.isDebugEnabled()) {        log.debug("termId=" + iv + ", term="+ chunk[i].obj);      }    }  }}  }
class C{  public SpannableString render(Context context){  Settings settings=new Settings(context);  if (canvas == null) {    String prefix=hasIcon() && settings.showIcons() ? "  " : "";    String nick=hasSender() ? " " + sender + " - " : "";    String timestamp=settings.showTimestamp() ? renderTimeStamp(settings.use24hFormat(),settings.includeSeconds()) : "";    canvas=new SpannableString(prefix + timestamp + nick);    SpannableString renderedText;    if (settings.showMircColors()) {      renderedText=MircColors.toSpannable(text);    } else {      renderedText=new SpannableString(MircColors.removeStyleAndColors(text));    }    if (settings.showGraphicalSmilies()) {      renderedText=Smilies.toSpannable(renderedText,context);    }    canvas=new SpannableString(TextUtils.concat(canvas,renderedText));    if (hasSender()) {      int start=(prefix + timestamp).length() + 1;      int end=start + sender.length();      if (settings.showColorsNick()) {        canvas.setSpan(new ForegroundColorSpan(getSenderColor()),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }    if (hasIcon() && settings.showIcons()) {      Drawable drawable=context.getResources().getDrawable(icon);      drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());      canvas.setSpan(new ImageSpan(drawable,ImageSpan.ALIGN_BOTTOM),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }    if (hasColor() && settings.showColors()) {      ForegroundColorSpan[] spans=canvas.getSpans(0,canvas.length(),ForegroundColorSpan.class);      int start=0;      for (int i=0; i < spans.length; i++) {        canvas.setSpan(new ForegroundColorSpan(color),start,canvas.getSpanStart(spans[i]),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        start=canvas.getSpanEnd(spans[i]);      }      canvas.setSpan(new ForegroundColorSpan(color),start,canvas.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  }  return canvas;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  private void createSignalControlFor4LightCrossing(Id<SignalSystem> signalSystemId,SignalControlData control){  SignalSystemControllerData controller=control.getFactory().createSignalSystemControllerData(signalSystemId);  control.addSignalSystemControllerData(controller);  controller.setControllerIdentifier(DefaultPlanbasedSignalSystemController.IDENTIFIER);  SignalPlanData plan=control.getFactory().createSignalPlanData(Id.create(signalSystemId.toString() + "P",SignalPlan.class));  controller.addSignalPlanData(plan);  plan.setCycleTime(this.cycle);  plan.setOffset(0);  SignalGroupSettingsData settings1=control.getFactory().createSignalGroupSettingsData(Id.create(signalSystemId.toString() + "S1",SignalGroup.class));  plan.addSignalGroupSettings(settings1);  settings1.setOnset(this.onset1);  settings1.setDropping(this.dropping1);  SignalGroupSettingsData settings2=control.getFactory().createSignalGroupSettingsData(Id.create(signalSystemId.toString() + "S3",SignalGroup.class));  plan.addSignalGroupSettings(settings2);  settings2.setOnset(this.onset1);  settings2.setDropping(this.dropping1);  SignalGroupSettingsData settings3=control.getFactory().createSignalGroupSettingsData(Id.create(signalSystemId.toString() + "S2",SignalGroup.class));  plan.addSignalGroupSettings(settings3);  settings3.setOnset(this.onset2);  settings3.setDropping(this.dropping2);  SignalGroupSettingsData settings4=control.getFactory().createSignalGroupSettingsData(Id.create(signalSystemId.toString() + "S4",SignalGroup.class));  plan.addSignalGroupSettings(settings4);  settings4.setOnset(this.onset2);  settings4.setDropping(this.dropping2);}  }
class C{  public SubtreeDragControl(){}  }
class C{  protected String paramString(){  String horizontalAlignmentString;  if (horizontalAlignment == LEFT) {    horizontalAlignmentString="LEFT";  } else   if (horizontalAlignment == CENTER) {    horizontalAlignmentString="CENTER";  } else   if (horizontalAlignment == RIGHT) {    horizontalAlignmentString="RIGHT";  } else   if (horizontalAlignment == LEADING) {    horizontalAlignmentString="LEADING";  } else   if (horizontalAlignment == TRAILING) {    horizontalAlignmentString="TRAILING";  } else   horizontalAlignmentString="";  String commandString=(command != null ? command : "");  return super.paramString() + ",columns=" + columns+ ",columnWidth="+ columnWidth+ ",command="+ commandString+ ",horizontalAlignment="+ horizontalAlignmentString;}  }
class C{  public static void appendToCore(String str){  CORE_SCRIPT.append(str);}  }
class C{  public static char[] toCharArray(byte[] input){  char[] result=new char[input.length];  for (int i=0; i < input.length; i++) {    result[i]=(char)input[i];  }  return result;}  }
class C{  @Override public void updateInt(int columnIndex,int x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateInt(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueInt.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void addStrategyPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Aggregator_strategy_feature"),getString("_UI_PropertyDescriptor_description","_UI_Aggregator_strategy_feature","_UI_Aggregator_type"),EipPackage.Literals.AGGREGATOR__STRATEGY,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public MetricSchemaRecord(String scope,String metric){  this(null,scope,metric,null,null);}  }
class C{  public RectF toCameraSpace(RectF source){  RectF result=new RectF();  mPreviewToCameraTransform.mapRect(result,source);  return result;}  }
class C{  public final RegExp rev(Macros macros){  RegExp1 unary;  RegExp2 binary;  RegExp content;switch (type) {case sym.BAR:    binary=(RegExp2)this;  return new RegExp2(sym.BAR,binary.r1.rev(macros),binary.r2.rev(macros));case sym.CONCAT:binary=(RegExp2)this;return new RegExp2(sym.CONCAT,binary.r2.rev(macros),binary.r1.rev(macros));case sym.STAR:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.STAR,content.rev(macros));case sym.PLUS:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.PLUS,content.rev(macros));case sym.QUESTION:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.QUESTION,content.rev(macros));case sym.BANG:unary=(RegExp1)this;content=(RegExp)unary.content;return new RegExp1(sym.BANG,content.rev(macros));case sym.TILDE:content=resolveTilde(macros);return content.rev(macros);case sym.STRING:case sym.STRING_I:unary=(RegExp1)this;return new RegExp1(unary.type,revString((String)unary.content));case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:unary=(RegExp1)this;return new RegExp1(unary.type,unary.content);case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).rev(macros);}throw new Error("unknown regexp type " + type);}  }
class C{  protected boolean initialUseOptimalColumnWidths(){  return false;}  }
class C{  public static ARRAY toARRAY(double[] doubles,String dataType,OracleConnection connection) throws SQLException {  ArrayDescriptor descriptor=ArrayDescriptor.createDescriptor(dataType,connection);  return new ARRAY(descriptor,connection,doubles);}  }
class C{  public void run(){  QueueElement qe;  try {    while ((qe=dequeue()) != null) {      EventObject e=qe.event;      Vector<NamingListener> v=qe.vector;      for (int i=0; i < v.size(); i++) {        if (e instanceof NamingEvent) {          ((NamingEvent)e).dispatch(v.elementAt(i));        } else         if (e instanceof NamingExceptionEvent) {          ((NamingExceptionEvent)e).dispatch(v.elementAt(i));        } else         if (e instanceof UnsolicitedNotificationEvent) {          ((UnsolicitedNotificationEvent)e).dispatch((UnsolicitedNotificationListener)v.elementAt(i));        }      }      qe=null;      e=null;      v=null;    }  } catch (  InterruptedException e) {  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof Name))   return false;  Name o=(Name)other;  return kind == o.kind && name.equals(o.name) && nsset.equals(o.nsset);}  }
class C{  private ValueGraphVertex findOrCreateVertex(Object var){  if (var instanceof Register) {    return findOrCreateVertex((Register)var);  } else   if (var instanceof RegisterOperand) {    return findOrCreateVertex(((RegisterOperand)var).getRegister());  } else   if (var instanceof ConstantOperand) {    return findOrCreateVertex((ConstantOperand)var);  } else   if (var instanceof TypeOperand) {    return findOrCreateVertex((TypeOperand)var);  } else   if (var instanceof MethodOperand) {    return findOrCreateVertex((MethodOperand)var);  } else   if (var instanceof ConditionOperand) {    return findOrCreateVertex((ConditionOperand)var);  } else {    throw new OptimizingCompilerException("ValueGraph.findOrCreateVertex: unexpected type " + var.getClass());  }}  }
class C{  private void linearScan(Relation<? extends O> relation,DBIDIter iter,O obj,double range,ModifiableDoubleDBIDList result){  final double upper=range * 1.0000001;  final double sqrange=upper * upper;  while (iter.valid()) {    final double sqdistance=SQUARED.distance(obj,relation.get(iter));    if (sqdistance <= sqrange) {      final double dist=Math.sqrt(sqdistance);      if (dist <= range) {        result.add(dist,iter);      }    }    iter.advance();  }}  }
class C{  public String toString(){  return "XMLStreamReader - State: " + NAMES_OF_EVENTS[_eventType] + ", Location: "+ _location.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasBreakpoint(final Module module,final Address address){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  return breakpointManager.hasBreakpoint(BreakpointType.REGULAR,new BreakpointAddress(module == null ? null : module.getNative(),new UnrelocatedAddress(new CAddress(address.toLong()))));}  }
class C{  public static Object moveObject(Object fromObj,Object toObj,int numBytes,RVMClass type){  return JavaHeader.moveObject(fromObj,toObj,numBytes,type);}  }
class C{  public void addActionListener(ActionListener al){  if (backButton != null && forwardButton != null) {    backButton.addActionListener(al);    forwardButton.addActionListener(al);  } else {    if (listeners == null) {      listeners=new Vector();    }    listeners.add(al);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.959 -0500",hash_original_method="574B1997394313A9CBB50913816A2452",hash_generated_method="F7A59FE591A255BCF961218A4165471C") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  encodedData=new byte[encodedDataLength];  encodedData.addTaint(isChunked);  encodedData.addTaint(binaryData.getTaint());  return encodedData;}  }
class C{  public static Remote exportObject(Remote obj,ActivationID id,int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf) throws RemoteException {  return exportObject(obj,new ActivatableServerRef(id,port,csf,ssf));}  }
class C{  @RequestMapping(value="/emrHiveSteps",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_HIVE_STEPS_POST) public EmrHiveStep addHiveStepToEmrCluster(@RequestBody EmrHiveStepAddRequest request) throws Exception {  return (EmrHiveStep)emrService.addStepToCluster(request);}  }
class C{  public BatchUpdateException(String reason,int[] updateCounts,Throwable cause){  super(reason,cause);  this.updateCounts=updateCounts;}  }
class C{  public DrawerBuilder withSliderBackgroundColor(@ColorInt int sliderBackgroundColor){  this.mSliderBackgroundColor=sliderBackgroundColor;  return this;}  }
class C{  @Override public void toggleSelection(Photo photo){  if (selectedPhotos.contains(photo)) {    selectedPhotos.remove(photo);  } else {    selectedPhotos.add(photo);  }}  }
class C{  public LoadUnit(String tu,String physicalPosition,Product product){  this(tu,physicalPosition);  this.product=product;}  }
class C{  private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){  double[] cprods=(agg != null) ? agg : new double[n];  if (agg == null)   Arrays.fill(cprods,1);  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {    productAgg(a,cprods,aix,0,n);    System.arraycopy(cprods,0,c,aix,n);  }}  }
class C{  public boolean isElement(){  return true;}  }
class C{  public Xml(Element element){  this((element == null) ? null : detachElement(element));}  }
class C{  public static String[] partitionOptions(String[] options){  for (int i=0; i < options.length; i++) {    if (options[i].equals("--")) {      options[i++]="";      String[] result=new String[options.length - i];      for (int j=i; j < options.length; j++) {        result[j - i]=options[j];        options[j]="";      }      return result;    }  }  return new String[0];}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  @Deprecated public Task<VolumeRestRep> activateFullCopy(URI id,URI copyId){  return postTask(getFullCopyUrl() + "/{copyId}/activate",id,copyId);}  }
class C{  public void addModifyListener(final ModifyListener listener){  checkWidget();  this.composite.addModifyListener(listener);}  }
class C{  public MucEntry(String id,String text){  this.id=id;  this.text=text;}  }
class C{  @Override public void validate(final StatementDescription cd){  final String microSpeciesName=cd.getLitteral(TARGET);  if (microSpeciesName != null) {    final SpeciesDescription macroSpecies=cd.getSpeciesContext();    final TypeDescription microSpecies=macroSpecies.getMicroSpecies(microSpeciesName);    if (microSpecies == null) {      cd.error(macroSpecies.getName() + " species doesn't contain " + microSpeciesName+ " as micro-species",IGamlIssue.UNKNOWN_SUBSPECIES,TARGET,microSpeciesName);    }  }}  }
class C{  public void seek(){  seekN(1);}  }
class C{  public PluginProperties(Class<? extends Plugin> pluginClass){  String propsPath=pluginClass.getName().replace('.','/').concat(".properties");  props=new Properties();  try {    InputStream instream=pluginClass.getClassLoader().getResourceAsStream(propsPath);    if (instream != null) {      props.load(instream);    } else {      System.err.println("Unable to read properties from file " + propsPath + ". The "+ pluginClass.getName()+ " plugin may not run correctly.");    }  } catch (  IOException iox) {    System.err.println("Unable to read properties from file " + propsPath + ". The "+ pluginClass.getName()+ " plugin may not run correctly.");    iox.printStackTrace();  }}  }
class C{  public StressFactor(){  super(Options.set,"Stress Factor","Force a collection after this much allocation",Integer.MAX_VALUE >>> LOG_BYTES_IN_PAGE);}  }
class C{  public boolean isSpurious(int minClSize){  return children.isEmpty() && members.size() < minClSize;}  }
class C{  public StopWatch(final String id){  this.id=id;}  }
class C{  protected void rolloverColumnUpdated(int oldColumn,int newColumn){}  }
class C{  public void insertRegTrueOutEdge(DepGraphNode node,RegisterOperand op){  DepGraphEdge e=new DepGraphEdge(op,this,node,REG_TRUE);  this.appendOutEdge(e);  node.appendInEdge(e);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void addReachable(Node startNode,Subgraph subgraph){  Stack nodeStack=new Stack();  nodeStack.add(startNode);  while (!nodeStack.empty()) {    Node node=(Node)nodeStack.pop();    addEdges(node,nodeStack,subgraph);  }}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public boolean isSpinning(){  return isSpinning;}  }
class C{  public static ANRequest.PatchRequestBuilder patch(String url){  return new ANRequest.PatchRequestBuilder(url);}  }
class C{  @Override public void accept(ICompilationUnit sourceUnit,AccessRestriction accessRestriction){  CompilationResult unitResult=new CompilationResult(sourceUnit,this.totalUnits,this.totalUnits,this.options.maxProblemsPerUnit);  unitResult.checkSecondaryTypes=true;  try {    CompilationUnitDeclaration parsedUnit;    if (this.totalUnits < this.parseThreshold) {      parsedUnit=this.parser.parse(sourceUnit,unitResult);    } else {      parsedUnit=this.parser.dietParse(sourceUnit,unitResult);    }    parsedUnit.bits|=ASTNode.IsImplicitUnit;    this.lookupEnvironment.buildTypeBindings(parsedUnit,accessRestriction);    addCompilationUnit(sourceUnit,parsedUnit);    this.lookupEnvironment.completeTypeBindings(parsedUnit);  } catch (  AbortCompilationUnit e) {    if (unitResult.compilationUnit == sourceUnit) {      this.requestor.acceptResult(unitResult.tagAsAccepted());    } else {      throw e;    }  }}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  @BeforeClass protected void init(){  this.gitlabUrl=this.gitlabUrlParser.parse("https://gitlab.com/eclipse/che");  assertNotNull(this.gitlabUrl);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  if (DTM.NULL == m_lastFetched) {    resetProximityPositions();  }  int next;  org.apache.xpath.VariableStack vars;  int savedStart;  if (-1 != m_stackFrame) {    vars=m_execContext.getVarStack();    savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);  } else {    vars=null;    savedStart=0;  }  try {    do {      if (0 == m_extendedTypeID) {        next=m_lastFetched=(DTM.NULL == m_lastFetched) ? m_traverser.first(m_context) : m_traverser.next(m_context,m_lastFetched);      } else {        next=m_lastFetched=(DTM.NULL == m_lastFetched) ? m_traverser.first(m_context,m_extendedTypeID) : m_traverser.next(m_context,m_lastFetched,m_extendedTypeID);      }      if (DTM.NULL != next) {        if (DTMIterator.FILTER_ACCEPT == acceptNode(next))         break; else         continue;      } else       break;    } while (next != DTM.NULL);    if (DTM.NULL != next) {      m_pos++;      return next;    } else {      m_foundLast=true;      return DTM.NULL;    }  }  finally {    if (-1 != m_stackFrame) {      vars.setStackFrame(savedStart);    }  }}  }
class C{  public Object clone(){  try {    OutputProperties cloned=(OutputProperties)super.clone();    cloned.m_properties=(Properties)cloned.m_properties.clone();    return cloned;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  private JsonWriter open(JsonScope empty,String openBracket) throws IOException {  beforeValue(true);  stack.add(empty);  out.write(openBracket);  return this;}  }
class C{  @SuppressWarnings("unchecked") public Map<String,Object> decodeDetails(final byte[] data){  final VersionedDecoder decoder=new VersionedDecoder(data,typeInfos);  return (Map<String,Object>)decoder.instance(gameDetailsTypeid);}  }
class C{  public static void main(String[] args){  try {    Stemming.useStemmer(new LovinsStemmer(),args);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void initCache(){  lruCacheMap=new LinkedHashMap<String,Cacheable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE,1.0f,true);}  }
class C{  public Query copy(){  Query query=new Query(queryString);  query.parameters.putAll(parameters);  query.firstResult=firstResult;  query.maxResults=maxResults;  query.cacheable=cacheable;  return query;}  }
class C{  protected Boolean visitUnionSubtype(AnnotatedUnionType subtype,AnnotatedTypeMirror supertype,VisitHistory visited){  return areAllSubtypes(subtype.getAlternatives(),supertype,visited);}  }
class C{  public NAPTRRecord(Name name,int dclass,long ttl,int order,int preference,String flags,String service,String regexp,Name replacement){  super(name,Type.NAPTR,dclass,ttl);  this.order=checkU16("order",order);  this.preference=checkU16("preference",preference);  try {    this.flags=byteArrayFromString(flags);    this.service=byteArrayFromString(service);    this.regexp=byteArrayFromString(regexp);  } catch (  TextParseException e) {    throw new IllegalArgumentException(e.getMessage());  }  this.replacement=checkName("replacement",replacement);}  }
class C{  protected static boolean convertToType(TInstance type){  TClass tclass=TInstance.tClass(type);  return ((tclass.getClass() == MNumeric.class) || (tclass == AkBool.INSTANCE));}  }
class C{  @DSComment("Method returns IO Object") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:57.589 -0500",hash_original_method="10F29762DE0104F8A39064501FA4AE67",hash_generated_method="AA1E1902CBC1C56C3259D6D39450828D") public static ReadableByteChannel newChannel(InputStream inputStream){  return new InputStreamChannel(inputStream);}  }
class C{  public byte[] toByteArray(){  BaggageMessage message=buildMessage();  return message == null ? ArrayUtils.EMPTY_BYTE_ARRAY : message.toByteArray();}  }
class C{  @Override public boolean isRowAvailable(){  return list != null && index >= 0 && index < list.size();}  }
class C{  public PutIndexTemplateRequestBuilder addMapping(String type,Map<String,Object> source){  request.mapping(type,source);  return this;}  }
class C{  public TagDispatcherBuilder enableBroadcomWorkaround(boolean enableBroadcomWorkaround){  this.enableBroadcomWorkaround=enableBroadcomWorkaround;  return this;}  }
class C{  public void drawRect(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing rect: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawRect(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawRect(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawRect(x,y,width,height);}  }
class C{  public static void main(String[] args) throws IOException {  FileInputStream in=new FileInputStream(args[0]);  FileOutputStream out=new FileOutputStream(args[1]);  SWFWriter writer=new SWFWriter(out);  TagWriter tagwtr=new TagWriter(writer);  TagParser parser=new TagParser(tagwtr);  SWFReader reader=new SWFReader(parser,in);  reader.readFile();  out.flush();  out.close();  in.close();}  }
class C{  public void addItem(final String itemName,final int amount){  final Integer curAmount=get(itemName);  if (curAmount != null) {    put(itemName,curAmount + amount);  } else {    put(itemName,amount);  }}  }
class C{  private static float fuzzAspectRatio(float aspectRatio){  for (  float desiredAspectRatio : sDesiredAspectRatios) {    if ((Math.abs(aspectRatio - desiredAspectRatio)) < ASPECT_RATIO_TOLERANCE) {      return desiredAspectRatio;    }  }  return aspectRatio;}  }
class C{  protected XMLReader createXMLReader() throws SAXException {  return SAXHelper.createXMLReader(isValidating());}  }
class C{  public StyledString createStyledLabel(CompletionProposal proposal){switch (proposal.getKind()) {case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.POTENTIAL_METHOD_DECLARATION:    if (fContext != null && fContext.isInJavadoc())     return createJavadocMethodProposalLabel(proposal);  return createMethodProposalLabel(proposal);case CompletionProposal.METHOD_DECLARATION:return createOverrideMethodProposalLabel(proposal);case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return createAnonymousTypeLabel(proposal);case CompletionProposal.TYPE_REF:return createTypeProposalLabel(proposal);case CompletionProposal.JAVADOC_TYPE_REF:return createJavadocTypeProposalLabel(proposal);case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_INLINE_TAG:case CompletionProposal.JAVADOC_PARAM_REF:return createJavadocSimpleProposalLabel(proposal);case CompletionProposal.JAVADOC_METHOD_REF:return createJavadocMethodProposalLabel(proposal);case CompletionProposal.PACKAGE_REF:return createPackageProposalLabel(proposal);case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:case CompletionProposal.FIELD_REF:case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:return createLabelWithTypeAndDeclaration(proposal);case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return createSimpleLabelWithType(proposal);case CompletionProposal.KEYWORD:case CompletionProposal.LABEL_REF:return createSimpleLabel(proposal);default :Assert.isTrue(false);return null;}}  }
class C{  @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  private static void drawLeftTab(int x,int y,int w,int h,Graphics2D g2,ColorUIResource color){  double rTop=RapidLookAndFeel.CORNER_TAB_RADIUS * 0.67;  g2.setColor(color);  g2.fill(createLeftTabShape(x + 1,y + 1,w - 1,h,rTop,true));  g2.setColor(Colors.TAB_BORDER);  g2.draw(createLeftTabShape(x,y,w - 1,h,rTop,false));}  }
class C{  public boolean forEachEntry(TLongLongProcedure procedure){  byte[] states=_states;  long[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public ReplControlEvent(int eventType,long seqno,ReplDBMSHeader header){  this.eventType=eventType;  this.seqno=seqno;  this.header=header;}  }
class C{  public static void updateAfterLoad(final DigestURL url,final long time){  final String host=url.getHost();  if (host == null)   return;  String hosthash=url.hosthash();  Host h=map.get(hosthash);  if (h == null) {    h=new Host(host,time,0);    if (map.size() > mapMaxSize || MemoryControl.shortStatus())     map.clear();    map.put(hosthash,h);  } else {    h.update(time);  }}  }
class C{  public CompanyApplicationExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ClusterUpdateSettingsRequest transientSettings(String source){  this.transientSettings=Settings.settingsBuilder().loadFromSource(source).build();  return this;}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints a disassembled view of the given class.");    System.err.println("Usage: Textifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(new PrintWriter(System.out)),flags);}  }
class C{  public static <V extends FeatureVector<?>>VectorFieldTypeInformation<V> assumeVectorField(Relation<V> relation){  try {    return ((VectorFieldTypeInformation<V>)relation.getDataTypeInformation());  } catch (  Exception e) {    throw new UnsupportedOperationException("Expected a vector field, got type information: " + relation.getDataTypeInformation().toString(),e);  }}  }
class C{  @Override protected void process(DistributionManager dm){  Assert.assertTrue(this.id != null);  ReplyMessage reply=new ReplyMessage();  reply.setProcessorId(processorId);  reply.setRecipient(getSender());  dm.putOutgoing(reply);}  }
class C{  @Override public RegularTimePeriod previous(){  Minute result;  if (this.minute != FIRST_MINUTE_IN_HOUR) {    result=new Minute(this.minute - 1,getHour());  } else {    Hour h=(Hour)getHour().previous();    if (h != null) {      result=new Minute(LAST_MINUTE_IN_HOUR,h);    } else {      result=null;    }  }  return result;}  }
class C{  public final double KBMeanInformation() throws Exception {  if (!m_ClassIsNominal) {    throw new Exception("Can't compute K&B Info score: class numeric!");  }  if (m_NoPriors) {    return Double.NaN;  }  return m_SumKBInfo / (m_WithClass - m_Unclassified);}  }
class C{  protected boolean isInState(int state){  return this.state == state;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static double[][] computeNorms(double[][] mvTimeSeries,int t){  int timeSteps=mvTimeSeries.length;  int variables=mvTimeSeries[0].length;  double[][] norms=new double[timeSteps][variables];  for (int t2=0; t2 < timeSteps; t2++) {    if (t2 == t) {      for (int v=0; v < variables; v++) {        norms[t2][v]=Double.POSITIVE_INFINITY;      }      continue;    }    for (int v=0; v < variables; v++) {      norms[t2][v]=Math.abs(mvTimeSeries[t][v] - mvTimeSeries[t2][v]);    }  }  return norms;}  }
class C{  public boolean isLedBlinking(){  return null == ledBlinking ? _ledBlinking : ledBlinking.get();}  }
class C{  default DequeX<T> toDequeX(){  return DequeX.fromIterable(toList());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Object clone(){  JimpleLocal l=new JimpleLocal(name,type);  l.index=this.index;  return l;}  }
class C{  public boolean isValidSerializationB(String preorder){  String[] nodes=preorder.split(",");  int diff=1;  for (  String node : nodes) {    diff--;    if (diff < 0) {      return false;    }    if (!"#".equals(node)) {      diff+=2;    }  }  return diff == 0;}  }
class C{  private final int fetchTag() throws BerException {  int result=0;  final int backup=next;  try {    final byte b0=bytes[next++];    result=(b0 >= 0) ? b0 : b0 + 256;    if ((result & 31) == 31) {      while ((bytes[next] & 128) != 0) {        result=result << 7;        result=result | (bytes[next++] & 127);      }    }  } catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  public static Border createDottedBorder(int thickness,int color){  return createCSSBorder(TYPE_DOTTED,thickness,color);}  }
class C{  public XMPPException(String message,XMPPError error,Throwable wrappedThrowable){  super(message);  this.error=error;  this.wrappedThrowable=wrappedThrowable;}  }
class C{  @Override public void runPlugin(String pluginName,String[] args){  host.runPlugin(pluginName,args);  if (automaticallyClose) {    this.dispose();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.296 -0500",hash_original_method="456400F7FD34BEA9F412D24A9889C2FB",hash_generated_method="F28E65C77F981D5409FFCCEB8ED4757B") public static String concatenateWhere(String a,String b){  if (TextUtils.isEmpty(a)) {    return b;  }  if (TextUtils.isEmpty(b)) {    return a;  }  return "(" + a + ") AND ("+ b+ ")";}  }
class C{  public SampleVcpcRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  private VPlexMigrationInfo migrateLocalVirtualVolumeDevice(String migrationName,VPlexVirtualVolumeInfo virtualVolumeInfo,Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap,boolean startNow,String transferSize) throws VPlexApiException {  String localDeviceName=virtualVolumeInfo.getSupportingDevice();  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexDeviceInfo srcDeviceInfo=discoveryMgr.findLocalDevice(localDeviceName);  VPlexApiVirtualVolumeManager virtualVolumeMgr=_vplexApiClient.getVirtualVolumeManager();  virtualVolumeMgr.claimStorageVolumes(storageVolumeInfoMap,false);  s_logger.info("Claimed storage volume");  try {    List<VPlexStorageVolumeInfo> storageVolumeInfoList=new ArrayList<VPlexStorageVolumeInfo>(storageVolumeInfoMap.values());    virtualVolumeMgr.createExtents(storageVolumeInfoList);    s_logger.info("Created extent on storage volume");    List<VPlexExtentInfo> extentInfoList=discoveryMgr.findExtents(storageVolumeInfoList);    virtualVolumeMgr.createLocalDevices(extentInfoList);    s_logger.info("Created local device on extent");    VPlexDeviceInfo tgtDeviceInfo=discoveryMgr.findLocalDevices(extentInfoList).get(0);    VPlexMigrationInfo migrationInfo=migrateResource(migrationName,srcDeviceInfo,tgtDeviceInfo,true,startNow,transferSize);    migrationInfo.setVirtualVolumeInfo(virtualVolumeInfo);    return migrationInfo;  } catch (  Exception e) {    s_logger.info("Exception occurred migrating local volume device, attempting to cleanup VPLEX artifacts");    try {      List<VolumeInfo> nativeVolumeInfoList=new ArrayList<VolumeInfo>();      nativeVolumeInfoList.addAll(storageVolumeInfoMap.keySet());      virtualVolumeMgr.deleteVirtualVolume(nativeVolumeInfoList);    } catch (    Exception ex) {      s_logger.error("Failed attempting to cleanup VPLEX after failed attempt " + "to migrate local virtual volume {}",virtualVolumeInfo.getPath(),ex);    }    throw e;  }}  }
class C{  public void testAskSubquery01(){  final String anonFilterVar1="--exists-1";  final String[] filterVars1=new String[]{"x1"};  final String anonFilterVar2="--not-exists-1";  final String[] filterVars2=new String[]{"y1","y2","y3"};  new Helper(){{      given=select(varNode(x),where(filterExistsWithVars(anonFilterVar1,filterVars1),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar1,filterVars1),filterExistsWithVars(anonFilterVar2,filterVars2),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar2,filterVars2),stmtPatternWithVar("x1"),stmtPatternWithVar("y1"),stmtPatternWithVar("y2"),stmtPatternWithVar("y3")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar1,filterVars1),filterExistsWithVars(anonFilterVar1,filterVars1),stmtPatternWithVar("y1"),stmtPatternWithVar("y2"),stmtPatternWithVar("y3"),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar2,filterVars2),filterExistsWithVars(anonFilterVar2,filterVars2)));    }  }.test();}  }
class C{  public static Query cswcq(Term wild){  WildcardQuery query=new WildcardQuery(wild);  query.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  return query;}  }
class C{  protected void asyncCommandProcess(Command cmd,ActionEvent sourceEvent){}  }
class C{  public TextAttributeSet(){  attributes=new HashMap<TextAttribute,Object>();}  }
class C{  protected StorageTier checkStorageTierExistsInDB(String tierNativeGuid,DbClient _dbClient) throws IOException {  StorageTier tier=null;  @SuppressWarnings("deprecation") List<URI> storageTierUris=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageTierByIdConstraint(tierNativeGuid));  if (!storageTierUris.isEmpty()) {    tier=_dbClient.queryObject(StorageTier.class,storageTierUris.get(0));  }  return tier;}  }
class C{  public Blade any(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.ALL);  return this;}  }
class C{  public CollectionTypeImpl(Class clazz,ObjectType elementType){  super(clazz);  this.elementType=elementType;}  }
class C{  public void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new int[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);      m_map=newMap;    }  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public UseableEntity(){  setRPClass("useable_entity");  put("type","useable_entity");  put("cursor","ACTIVITY");  super.setSize(1,1);}  }
class C{  public boolean isCurrentBetween(char left,char right){  if (!isValidIndex())   return false;  return lcText[pos] >= left && lcText[pos] <= right;}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  StringHolder.applyTo(name,viewHolder.name);  StringHolder.applyToOrHide(description,viewHolder.description);  viewHolder.swipeResultContent.setVisibility(swipedDirection != 0 ? View.VISIBLE : View.GONE);  viewHolder.itemContent.setVisibility(swipedDirection != 0 ? View.GONE : View.VISIBLE);  CharSequence swipedAction=null;  CharSequence swipedText=null;  if (swipedDirection != 0) {    swipedAction=viewHolder.itemView.getContext().getString(R.string.action_undo);    swipedText=swipedDirection == ItemTouchHelper.LEFT ? "Removed" : "Archived";    viewHolder.swipeResultContent.setBackgroundColor(ContextCompat.getColor(viewHolder.itemView.getContext(),swipedDirection == ItemTouchHelper.LEFT ? R.color.md_red_900 : R.color.md_blue_900));  }  viewHolder.swipedAction.setText(swipedAction == null ? "" : swipedAction);  viewHolder.swipedText.setText(swipedText == null ? "" : swipedText);  viewHolder.swipedActionRunnable=this.swipedAction;}  }
class C{  public void addMatchedComputeElements(final StringSet matchedComputeElements){  if (null != _matchedComputeElements) {    _matchedComputeElements.replace(matchedComputeElements);  } else {    if (null != matchedComputeElements && !matchedComputeElements.isEmpty()) {      setMatchedComputeElements(new StringSet());      _matchedComputeElements.addAll(matchedComputeElements);    }  }}  }
class C{  public Element store(Object o){  PanelEditor p=(PanelEditor)o;  Element panel=new Element("paneleditor");  JFrame frame=p.getTargetFrame();  Dimension size=frame.getSize();  Point posn=frame.getLocation();  panel.setAttribute("class","jmri.jmrit.display.panelEditor.configurexml.PanelEditorXml");  panel.setAttribute("name","" + frame.getTitle());  panel.setAttribute("x","" + posn.x);  panel.setAttribute("y","" + posn.y);  panel.setAttribute("height","" + size.height);  panel.setAttribute("width","" + size.width);  panel.setAttribute("editable","" + (p.isEditable() ? "yes" : "no"));  panel.setAttribute("positionable","" + (p.allPositionable() ? "yes" : "no"));  panel.setAttribute("showtooltips","" + (p.showTooltip() ? "yes" : "no"));  panel.setAttribute("controlling","" + (p.allControlling() ? "yes" : "no"));  panel.setAttribute("hide",p.isVisible() ? "no" : "yes");  panel.setAttribute("panelmenu",p.isPanelMenuVisible() ? "yes" : "no");  panel.setAttribute("scrollable",p.getScrollable());  if (p.getBackgroundColor() != null) {    panel.setAttribute("redBackground","" + p.getBackgroundColor().getRed());    panel.setAttribute("greenBackground","" + p.getBackgroundColor().getGreen());    panel.setAttribute("blueBackground","" + p.getBackgroundColor().getBlue());  }  List<Positionable> contents=p.getContents();  if (log.isDebugEnabled()) {    log.debug("N elements: " + contents.size());  }  for (int i=0; i < contents.size(); i++) {    Positionable sub=contents.get(i);    if (sub != null && sub.storeItem()) {      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          panel.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing panel element: " + e);        e.printStackTrace();      }    }  }  return panel;}  }
class C{  public HashTokenSessionMap(Environment environment){  int sessionTimeoutValue;  try {    sessionTimeoutValue=environment.getProperty(API_SESSION_TIMEOUT,60);  } catch (  GuacamoleException e) {    logger.error("Unable to read guacamole.properties: {}",e.getMessage());    logger.debug("Error while reading session timeout value.",e);    sessionTimeoutValue=60;  }  logger.info("Sessions will expire after {} minutes of inactivity.",sessionTimeoutValue);  executor.scheduleAtFixedRate(new SessionEvictionTask(sessionTimeoutValue * 60000l),1,1,TimeUnit.MINUTES);}  }
class C{  public ArrayDeque(){  this(DEFAULT_SIZE);}  }
class C{  private void addWlstArguments(JvmLauncher java){  File serverDir=new File(this.getHome(),"server");  java.addClasspathEntries(new File(serverDir,"lib/weblogic.jar"));  java.setMainClass("weblogic.WLST");}  }
class C{  private boolean trackedThreadUncaughtException(Thread t,Throwable e){  getLogger().error("Uncaught exception in thread " + t.getName(),e);  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.MODULE_FILTER;}  }
class C{  public static void PackBucketEntry(KBucketEntry e,byte[] buffer,int off,DHTtype type){  if (off + type.NODES_ENTRY_LENGTH > buffer.length) {    throw new IllegalArgumentException("Not enough room in buffer");  }  ByteBuffer bb=ByteBuffer.wrap(buffer,off,type.NODES_ENTRY_LENGTH);  InetSocketAddress addr=e.getAddress();  if (type == DHTtype.IPV6_DHT && addr.getAddress() instanceof Inet4Address)   throw new IllegalArgumentException("Attempting to serialize an IPv4 bucket entry into nodes6 buffer");  bb.put(e.getID().getHash());  bb.put(addr.getAddress().getAddress());  bb.putShort((short)addr.getPort());}  }
class C{  public void startDocument() throws SAXException {  if (documentHandler != null)   documentHandler.startDocument();}  }
class C{  public double manhattanDistance(final MutableDouble2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  public static Socket createSocket(InetAddress address,int port) throws IOException {  Socket socket=null;  setKeystore();  SSLSocketFactory f=(SSLSocketFactory)SSLSocketFactory.getDefault();  SSLSocket secureSocket=(SSLSocket)f.createSocket();  secureSocket.connect(new InetSocketAddress(address,port),SysProperties.SOCKET_CONNECT_TIMEOUT);  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));  if (SysProperties.ENABLE_ANONYMOUS_TLS) {    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());    secureSocket.setEnabledCipherSuites(list);  }  socket=secureSocket;  return socket;}  }
class C{  public static void showBlogDetail(Context context,Map<String,String> blogInfo){  Bundle args=new Bundle();  if (blogInfo != null) {    for (    Map.Entry<String,String> entry : blogInfo.entrySet()) {      args.putString(entry.getKey(),entry.getValue());    }  }  showSimpleBack(context,SimpleBackPage.DETAILS,args);}  }
class C{  public static int hexDigitMsb0ToInt(final char hexDigit){switch (hexDigit) {case '0':    return 0x0;case '1':  return 0x8;case '2':return 0x4;case '3':return 0xC;case '4':return 0x2;case '5':return 0xA;case '6':return 0x6;case '7':return 0xE;case '8':return 0x1;case '9':return 0x9;case 'a':case 'A':return 0x5;case 'b':case 'B':return 0xD;case 'c':case 'C':return 0x3;case 'd':case 'D':return 0xB;case 'e':case 'E':return 0x7;case 'f':case 'F':return 0xF;default :throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");}}  }
class C{  public void handleNotification(Notification notification,Object hb){  AdminDistributedSystemJmxImpl systemJmx=(AdminDistributedSystemJmxImpl)this.system;  if (!systemJmx.isRmiClientCountZero()) {    Helper.handleNotification(this,notification,hb);  }}  }
class C{  private boolean query() throws SQLException {  String query="SELECT PrimaryKey, Revision, RevisionCounter," + " RevisionID, ArticleID, Timestamp, FullRevisionID, ContributorName, ContributorId, Comment, Minor, ContributorIsRegistered " + "FROM revisions";  if (primaryKey > 0) {    query+=" WHERE PrimaryKey > " + primaryKey;  }  if (MAX_NUMBER_RESULTS > 0) {    query+=" LIMIT ";    if (primaryKey + MAX_NUMBER_RESULTS > endPK) {      query+=(endPK - primaryKey + 1);    } else {      query+=MAX_NUMBER_RESULTS;    }  } else   if (endPK != Integer.MAX_VALUE) {    query+=" LIMIT " + (endPK - primaryKey + 1);  }  try {    statement=this.connection.prepareStatement(query);    result=statement.executeQuery(query);  } catch (  Exception e) {    logger.error("Conncection Closed: " + connection.isClosed());    logger.error("Connection Valid: " + connection.isValid(5));    connect();    statement=this.connection.prepareStatement(query);    result=statement.executeQuery(query);  }  if (result.next()) {    binaryData=result.getMetaData().getColumnType(2) == Types.LONGVARBINARY;    return true;  }  return false;}  }
class C{  public static String encodeX(byte[] a){  if (a == null || a.length == 0) {    return "X''";  }  int outLen=a.length * 2 + 3;  StringBuffer out=new StringBuffer(outLen);  out.append('X');  out.append('\'');  for (int i=0; i < a.length; i++) {    out.append(xdigits[(a[i] >> 4) & 0x0F]);    out.append(xdigits[a[i] & 0x0F]);  }  out.append('\'');  return out.toString();}  }
class C{  private String makeTimeText(long time,long fixedTime){  Date date=new Date(time);  if (time == fixedTime) {    return "|" + sdf.format(date) + "|";  }  return sdf.format(date);}  }
class C{  private void loadAdminUsersId(String entidad) throws Exception {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  UsersTable usrTbl=new UsersTable();  int counter;  BasicUserImpl user;  String qual;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tableInfo.setTableObject(usrTbl);    tableInfo.setClassName(UsersTable.class.getName());    qual=usrTbl.getLoadAminUsersQual(UserDefs.PRODUCT_USER);    tableInfo.setTablesMethod("getUserAdminTableNames");    tableInfo.setColumnsMethod("getAdminUserColumnNames");    rowInfo=new DynamicRow();    rowsInfo=new DynamicRows();    rowInfo.setClassName(BasicUserImpl.class.getName());    rowInfo.setValuesMethod("loadValues");    rowsInfo.add(rowInfo);    DynamicFns.selectMultiple(dbConn,qual,true,tableInfo,rowsInfo);    for (counter=0; counter < rowInfo.getRowCount(); counter++) {      user=(BasicUserImpl)rowInfo.getRow(counter);      _adminUsers.add(user);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean isStatic(){  return this.isDeclaredStatic();}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public DDistinguishedNameChooser(JFrame parent,String title,X500Name distinguishedName,boolean editable){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.distinguishedName=distinguishedName;  this.editable=editable;  initComponents();}  }
class C{  public static int max(int[] list){  int max=list[list.length - 1];  int index=list.length - 1;  return max(list,index,max);}  }
class C{  public short[] elements(){  return elements;}  }
class C{  public boolean isCanceled(){  if (pane == null)   return false;  Object v=pane.getValue();  return ((v != null) && (cancelOption.length == 1) && (v.equals(cancelOption[0])));}  }
class C{  @Override public void keyTyped(KeyEvent e){synchronized (keyLock) {    keysTyped.addFirst(e.getKeyChar());  }  for (  DrawListener listener : listeners)   listener.keyTyped(e.getKeyChar());}  }
class C{  public static Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);  return nl.nextNode();}  }
class C{  private void interruptIdleWorkers(){  interruptIdleWorkers(false);}  }
class C{  private void notifyDownloadCompleted(State state,int finalStatus,String errorMsg,int numFailed){  notifyThroughDatabase(state,finalStatus,errorMsg,numFailed);  if (DownloadStatus.isCompleted(finalStatus)) {    broadcastIntentDownloadComplete(finalStatus);  } else   if (DownloadStatus.isInsufficientSpace(finalStatus)) {    broadcastIntentDownloadFailedInsufficientSpace();  }}  }
class C{  void mergesort(Vector a,Vector b,int l,int r,XPathContext support) throws TransformerException {  if ((r - l) > 0) {    int m=(r + l) / 2;    mergesort(a,b,l,m,support);    mergesort(a,b,m + 1,r,support);    int i, j, k;    for (i=m; i >= l; i--) {      if (i >= b.size())       b.insertElementAt(a.elementAt(i),i); else       b.setElementAt(a.elementAt(i),i);    }    i=l;    for (j=(m + 1); j <= r; j++) {      if (r + m + 1 - j >= b.size())       b.insertElementAt(a.elementAt(j),r + m + 1 - j); else       b.setElementAt(a.elementAt(j),r + m + 1 - j);    }    j=r;    int compVal;    for (k=l; k <= r; k++) {      if (i == j)       compVal=-1; else       compVal=compare((NodeCompareElem)b.elementAt(i),(NodeCompareElem)b.elementAt(j),0,support);      if (compVal < 0) {        a.setElementAt(b.elementAt(i),k);        i++;      } else       if (compVal > 0) {        a.setElementAt(b.elementAt(j),k);        j--;      }    }  }}  }
class C{  public void addMenu(String category,ImageIcon icon){  int dot=category.lastIndexOf('.');  JMenu categoryMenu;  if (dot == -1) {    categoryMenu=makeMenuItem(category,JMenu.class);    if (icon != null) {      categoryMenu.setIcon(icon);    }    add(categoryMenu);    categories.put(getCaption(category),categoryMenu);  } else {    String subCategory=category.substring(dot + 1);    String supCategory=category.substring(0,dot);    JMenu supMenu=categories.get(getCaption(supCategory));    if (supMenu == null) {      throw new IllegalArgumentException("menu for category " + supCategory + " must"+ " exist before a subcategory "+ subCategory+ " can be added");    }    categoryMenu=makeMenuItem(subCategory,JMenu.class);    supMenu.add(categoryMenu);    categories.put(getCaption(category),categoryMenu);  }  if (icon != null) {    categoryMenu.setIcon(icon);  }}  }
class C{  @Override public void updateClob(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ColorList addAll(Collection<TColor> collection){  colors.addAll(collection);  return this;}  }
class C{  public RegExp anyChar(){  List<Interval> list=new ArrayList<Interval>();  list.add(new Interval(0,CharClasses.maxChar));  return new RegExp1(sym.CCLASS,list);}  }
class C{  public void fireSessionEvent(SessionEvent event){  fireSessionEvent(event,true);}  }
class C{  public DERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public Facet glitterFacet(Universe universe,Domain domain,DashboardSelection sel,Axis axis,String filter,int offset,int size,Integer timeoutMs) throws ComputingException, InterruptedException, TimeoutException {  try {    DomainFacetCompute compute=new DomainFacetCompute(universe);    return compute.computeDimensionFacets(domain,sel,axis,filter,offset,size,timeoutMs);  } catch (  ExecutionException e) {    if (e.getCause() != null) {      throw new ComputingException(e.getCause().getLocalizedMessage(),e.getCause());    } else {      throw new ComputingException(e.getLocalizedMessage(),e);    }  }}  }
class C{  public static double min(double x,double y){  return (x < y) ? x : y;}  }
class C{  public void addObjectDetail(KMLObjectDetail objectDetail){  elements.add(objectDetail);}  }
class C{  public synchronized void fatal(String s,Parameter p1,Parameter p2){  println(a("FATAL ERROR:\n" + s),ALL_MESSAGE_LOGS,true);  if (p1 != null)   println(a("PARAMETER: " + p1),ALL_MESSAGE_LOGS,true);  if (p2 != null && p1 != null)   println(a("     ALSO: " + p2),ALL_MESSAGE_LOGS,true); else   println(a("PARAMETER: " + p2),ALL_MESSAGE_LOGS,true);  exitWithError(this,error.toString(),throwsErrors);}  }
class C{  protected void add(Iterator shapeIterator){  while (shapeIterator.hasNext()) {    try {      Shape3D shape=(Shape3D)shapeIterator.next();      if (shape != null) {        add(shape);      }    } catch (    ClassCastException cce) {      continue;    }  }}  }
class C{  public Image toImage(){  if (Image.isAlphaMutableImageSupported()) {    Image img=Image.createImage(width,height,0);    Graphics g=img.getGraphics();    g.drawImage(this,0,0);    return img;  }  return null;}  }
class C{  public static void delete(File file){  if (file != null && file.exists()) {    if (file.isDirectory()) {      File[] children=file.listFiles();      if (children != null) {        for (        File child : children) {          delete(child);        }      }      file.delete();    } else {      file.delete();    }  }}  }
class C{  public void append(DetectorFactory factory){  if (!memberSet.contains(factory)) {    throw new IllegalArgumentException("Detector " + factory.getFullName() + " appended to pass it doesn't belong to");  }  this.orderedFactoryList.addLast(factory);}  }
class C{  public VehicleRoutingTable(int size){  super();  this.size=size;  demands=new HashMap<Integer,Integer>();  depots=new HashSet<Integer>();}  }
class C{  public StyleMap(int size){  values=new Value[size];  masks=new short[size];}  }
class C{  public boolean booleanValue(){  if (value instanceof Boolean)   return (Boolean)value;  if (isNumber())   return longValue() != 0;  if (isEmpty())   throw new ClassCastException("Variant null cannot be cast to boolean");  if (getCompositeClass().equals(String.class)) {    String s=((String)getValue()).toLowerCase();    if (s.equals("true") || s.equals("1"))     return true;    if (s.equals("false") || s.equals("0"))     return false;    throw new ClassCastException("Variant String cannot be cast to boolean: " + s);  }  return asClass(Boolean.class,false);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public static DataRowReader createDataRowReader(DataRowFactory factory,Attribute[] attributes,String[][] values){  List<DataRow> dataRows=new LinkedList<DataRow>();  for (int i=0; i < values.length; i++) {    dataRows.add(factory.create(values[i],attributes));  }  return new ListDataRowReader(dataRows.iterator());}  }
class C{  public StrBuilder appendNull(){  if (nullText == null) {    return this;  }  return append(nullText);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @SuppressWarnings("unchecked") public void writeBigDecimal(java.math.BigDecimal x) throws SQLException {  attribs.add(x);}  }
class C{  @POST @Path("/organize-imports") @Produces({MediaType.APPLICATION_JSON}) public List<ConflictImportDTO> organizeImports(@QueryParam("projectpath") String projectPath,@QueryParam("fqn") String fqn) throws NotFoundException, CoreException, BadLocationException {  IJavaProject project=model.getJavaProject(projectPath);  return codeAssist.organizeImports(project,fqn);}  }
class C{  protected String expandCollectionId(String collectionId){  assert !collectionValuesExactMatch;  for (  String value : collectionValuesSet) {    if (collectionId.toLowerCase().contains(value.toLowerCase())) {      getLogger().debug(String.format("Changing collection ID from '%s' to '%s'.",collectionId,value));      return value;    }  }  return collectionId;}  }
class C{  @Override protected boolean forcedRewind(int marker){  input.rewind(marker);  addASIMessage();  return true;}  }
class C{  public double calculateWeight(int trooper){  double weight=0;  weight+=getWeightStructure();  weight+=getWeightArmor();  weight+=getWeightMiscEquip(trooper);  weight+=getWeightWeapon(trooper);  weight+=getWeightAmmo(trooper);  return Math.round(weight * 1000) / 1000.0;}  }
class C{  public final void verify(EvolutionState state){  if (!(state.initializer instanceof GPInitializer)) {    state.output.error("Initializer is not a GPInitializer");    return;  }  GPInitializer initializer=(GPInitializer)(state.initializer);  if (child == null) {    state.output.error("Null root child of GPTree.");    return;  }  if (owner == null) {    state.output.error("Null owner of GPTree.");    return;  }  if (owner.trees == null) {    state.output.error("Owner has null trees.");    return;  }  if (treeNumber() == NO_TREENUM) {    state.output.error("No Tree Number! I appear to be an orphan GPTree.");    return;  }  if (constraints < 0 || constraints >= initializer.numTreeConstraints) {    state.output.error("Preposterous tree constraints (" + constraints + ")");    return;  }  child.verify(state,constraints(initializer).functionset,0);  state.output.exitIfErrors();}  }
class C{  public void drawBackground(java.awt.Graphics2D g,java.awt.Paint paint){  g.setPaint(paint);  drawBackground(g);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.026 -0500",hash_original_method="1729B4B42F76884BCE9F1EB6E36424D7",hash_generated_method="1141C52690BF47076EA68141B6C22013") public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public List<String> bootstrapArtifacts(){  return this.bootstrapArtifacts;}  }
class C{  private String createVolume(String volumeName,long capacity,String volumeTypeId,String sourceVolId,String sourceSnapId) throws Exception {  _log.info("CinderApi - start createVolume");  Gson gson=new Gson();  VolumeCreateRequest volumeCreate=new VolumeCreateRequest();  volumeCreate.volume.name=volumeName;  volumeCreate.volume.size=capacity;  if (!volumeTypeId.toUpperCase().startsWith(CinderConstants.DEFAULT)) {    volumeCreate.volume.volume_type=volumeTypeId;  }  if (null != sourceVolId) {    volumeCreate.volume.source_volid=sourceVolId;  }  if (null != sourceSnapId) {    volumeCreate.volume.snapshot_id=sourceSnapId;  }  String volumeCreateUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_CREATE_VOLUME,endPoint.getCinderTenantId());  _log.debug("creting volume with uri {}",volumeCreateUri);  String json=gson.toJson(volumeCreate);  _log.debug("creating volume with body {}",json);  ClientResponse js_response=getClient().postWithHeader(URI.create(volumeCreateUri),json);  String s=js_response.getEntity(String.class);  _log.debug("Got the response {}",s);  String newVolumeId="";  if (js_response.getStatus() == ClientResponse.Status.ACCEPTED.getStatusCode()) {    VolumeCreateResponse response=gson.fromJson(SecurityUtils.sanitizeJsonString(s),VolumeCreateResponse.class);    newVolumeId=response.volume.id;  } else {    if (null != sourceVolId) {      throw CinderException.exceptions.volumeCloneFailed(s);    }    if (null != sourceSnapId) {      throw CinderException.exceptions.createVolumeFromSnapshotFailed(s);    }    throw CinderException.exceptions.volumeCreationFailed(s);  }  _log.info("CinderApi - end createVolume");  return newVolumeId;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void loadNodes(){  m_nodes=new Query(getCtx(),MWFNode.Table_Name,"AD_WorkFlow_ID=?",get_TrxName()).setParameters(new Object[]{get_ID()}).setOnlyActiveRecords(true).list();  log.fine("#" + m_nodes.size());}  }
class C{  public static byte[] toUTF(String s){  HeapDataOutputStream hdos=new HeapDataOutputStream(s);  return hdos.toByteArray();}  }
class C{  public static void scaleM(float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[mi]*=x;    m[4 + mi]*=y;    m[8 + mi]*=z;  }}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  @Override public void deleteSingleVolumeSnapshot(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("Delete Single Volume Snapshot Started");  try {    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);    log.info("deleteSingleVolumeSnapshot operation START");    HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storage),storage.getSmisUserName(),storage.getSmisPassword());    HDSHost pairMgmtServer=hdsApiClient.getSnapshotGroupPairManagementServer(storage.getSerialNumber());    if (null == pairMgmtServer) {      log.error("Unable to find snapshot group information/pair management server for Thin Image");      throw HDSException.exceptions.snapshotGroupNotAvailable(storage.getNativeGuid());    }    SnapshotGroup snapshotGroup=getViPRSnapshotGroup(pairMgmtServer,storage.getSerialNumber());    String snapShotGrpId=snapshotGroup.getObjectID();    Volume volume=dbClient.queryObject(Volume.class,snapshotObj.getParent());    ReplicationInfo replicationInfo=getReplicationInfo(snapshotGroup,volume.getNativeId(),snapshotObj.getNativeId());    if (replicationInfo != null) {      String replicationInfoObjId=replicationInfo.getObjectID();      hdsApiClient.deleteThinImagePair(pairMgmtServer.getObjectID(),snapShotGrpId,replicationInfoObjId,storage.getModel());    } else {      log.info("Pair has been deleted already on storage system");    }    hdsProtectionOperations.removeDummyLunPath(storage,snapshot);    hdsProtectionOperations.deleteSecondaryVolumeSnapshot(storage,snapshotObj,taskCompleter);    log.info("Delete Single Volume Snapshot Completed");  } catch (  Exception e) {    String errorMsg=String.format(DELETE_ERROR_MSG_FORMAT,snapshot);    log.error(errorMsg,e);    ServiceError serviceError=DeviceControllerErrors.hds.methodFailed("deleteSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(dbClient,serviceError);  }}  }
class C{  public void clear(){  if (this.filterPanelList != null) {    this.filterPanelList.clear();  }  if (this.tabList != null) {    this.tabList.clear();  }  if (this.treeViewPanelList != null) {    this.treeViewPanelList.clear();  }  this.textFieldNameId.setText("");  this.textFieldDescriptionId.setText("");  this.textFieldAuthorId.setText("");  this.textFieldTagsId.setText("");  this.payloadTabsId.getTabs().clear();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public WebApplicationResource(ServletContext context,String mimetype,String path){  super(mimetype);  this.context=context;  this.path=path;}  }
class C{  public byte[] encode() throws StunException {  return encode(false);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STATE_ENTITY___ENTRY_OR_EXIT_ACTION_1:    return ((InternalEList<?>)getEntryOrExitAction_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_ENTITY___AUTO_TRANSITION_1:  return ((InternalEList<?>)getAutoTransition_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_ENTITY___TRANSITION_1:return ((InternalEList<?>)getTransition_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_ENTITY___ACTIVITY_1:return ((InternalEList<?>)getActivity_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_ENTITY___STATE_1:return ((InternalEList<?>)getState_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_ENTITY___TRACE_1:return ((InternalEList<?>)getTrace_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static void sort(int[] a,int left,int right,int[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    while (k < right && a[k] == a[k + 1])     k++;    if (k == right)     break;    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        int t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    }    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {      count--;    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (count == 0) {    return;  } else   if (count == 1 && run[count] > right) {    return;  }  right++;  if (run[count] < right) {    run[++count]=right;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  int[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new int[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    int[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public byte[] createImageFromLayers(Projection proj,int scaledWidth,int scaledHeight,List<Layer> layers,Paint background){  logger.fine("using the new ProjectionPainter interface!  createImage with layer list.");  if (formatter == null) {    logger.warning("no formatter set! Can't create image.");    return new byte[0];  }  ImageFormatter imageFormatter=formatter.makeClone();  java.awt.Graphics graphics=createGraphics(imageFormatter,proj.getWidth(),proj.getHeight());  if (graphics == null) {    return new byte[0];  }  ((Proj)proj).drawBackground((Graphics2D)graphics,background);  if (layers != null && !layers.isEmpty()) {    for (int i=layers.size() - 1; i >= 0; i--) {      Layer layer=layers.get(i);      if (layer != null) {        layer.renderDataForProjection(proj,graphics);        if (logger.isLoggable(Level.FINE)) {          logger.fine("image request adding layer graphics from : " + layer.getName());        }      }    }  } else   if (logger.isLoggable(Level.FINE)) {    logger.fine("no layers available for image");  }  byte[] formattedImage=getFormattedImage(imageFormatter,scaledWidth,scaledHeight);  graphics.dispose();  return formattedImage;}  }
class C{  public void writeBoolean(boolean b) throws IOException {  if (b)   this.write(1); else   this.write(0);}  }
class C{  private void adjustColumnSize(){  int width=0;  for (int row=0; row < table.getRowCount(); row++) {    TableCellRenderer renderer=table.getCellRenderer(row,1);    Component comp=table.prepareRenderer(renderer,row,1);    width=Math.max(comp.getPreferredSize().width,width);  }  setColumnWidth(1,width,width,width);}  }
class C{  public boolean isManufactured(){  Object oo=get_Value(COLUMNNAME_IsManufactured);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public long skip(long n) throws IOException {  return in.skip(n);}  }
class C{  public void connectionClosed(ConnectionEvent event){  if (isActive) {    ManagedConnection conn=(ManagedConnection)event.getSource();    XAResource xar=null;    if (xaResourcesMap.get(conn) != null)     xar=(XAResource)xaResourcesMap.get(conn);    xaResourcesMap.remove(conn);    try {      Transaction txn=transManager.getTransaction();      if (txn != null && xar != null) {        txn.delistResource(xar,XAResource.TMSUCCESS);      }    } catch (    Exception se) {      String exception="JCAConnectionManagerImpl::connectionClosed: Exception occured due to " + se;      if (logger.isDebugEnabled()) {        logger.debug(exception,se);      }    }    mannPoolCache.returnPooledConnectionToPool(conn);  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider,SecureRandom random) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  try {    return generate(key,provider,random);  } catch (  NoSuchProviderException e) {    throw e;  }catch (  SignatureException e) {    throw e;  }catch (  InvalidKeyException e) {    throw e;  }catch (  GeneralSecurityException e) {    throw new SecurityException("exception: " + e);  }}  }
class C{  protected void computeGradient(AffinityMatrix pij,double[][] qij,double qij_sum,double[][] sol,double[] meta){  final int dim3=dim * 3;  int size=pij.size();  for (int i=0, off=0; i < size; i++, off+=dim3) {    final double[] sol_i=sol[i], qij_i=qij[i];    Arrays.fill(meta,off,off + dim,0.);    for (int j=0; j < size; j++) {      if (i == j) {        continue;      }      final double[] sol_j=sol[j];      final double qij_ij=qij_i[j];      final double q=MathUtil.max(qij_ij / qij_sum,MIN_QIJ);      double a=(pij.get(i,j) - q) * qij_ij;      for (int k=0; k < dim; k++) {        meta[off + k]+=a * (sol_i[k] - sol_j[k]);      }    }  }}  }
class C{  public void testNonConformingCompositeIds() throws Exception {  DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);  DocCollection coll=createCollection(4,router);  String[] ids={"A!B!C!D","!!!!!!","A!!!!B","A!!B!!C","A/59!B","A/8/!B/19/","A!B/-5","!/130!","!!A/1000","A//8!B///10!C////"};  for (int i=0; i < ids.length; ++i) {    try {      Slice targetSlice=coll.getRouter().getTargetSlice(ids[i],null,null,coll);      assertNotNull(targetSlice);    } catch (    Exception e) {      throw new Exception("Exception routing id '" + ids[i] + "'",e);    }  }}  }
class C{  private long hash(final double[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + Double.doubleToRawLongBits(a[i]) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(DN_NAME)) {    dnName=null;    dnPrincipal=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:CertificateSubjectName.");  }}  }
class C{  public void invalidate(){  bufferHandle=Gdx.gl20.glGenBuffer();  isDirty=true;}  }
class C{  @NotNull public OptionalLong findOptionalLong(@NotNull SqlQuery query){  Optional<Long> value=findOptional(Long.class,query);  return value.isPresent() ? OptionalLong.of(value.get()) : OptionalLong.empty();}  }
class C{  private CharacterIterator(final CharRange r){  range=r;  hasNext=true;  if (range.negated) {    if (range.start == 0) {      if (range.end == Character.MAX_VALUE) {        hasNext=false;      } else {        current=(char)(range.end + 1);      }    } else {      current=0;    }  } else {    current=range.start;  }}  }
class C{  @Override public void close() throws IOException {  if (ResponseCache.getDefault() == this) {    ResponseCache.setDefault(null);  }  delegate.getCache().close();}  }
class C{  public void execute() throws CheckedAnalysisException {  method=Global.getAnalysisCache().getMethodAnalysis(Method.class,methodDescriptor);  ClassContext classContext=Global.getAnalysisCache().getClassAnalysis(ClassContext.class,methodDescriptor.getClassDescriptor());  BitSet bytecodeSet=classContext.getBytecodeSet(method);  if (bytecodeSet == null) {    return;  }  if (bytecodeSet.get(Constants.MONITORENTER) || bytecodeSet.get(Constants.MONITOREXIT)) {    this.lockDataflow=classContext.getLockDataflow(method);  } else   if (method.isSynchronized()) {    this.vnaDataflow=classContext.getValueNumberDataflow(method);  }}  }
class C{  private void writeLine(char[] chars,int start,int len) throws IOException {  if (beginningOfLine && len > 0) {    writeIndent();    beginningOfLine=false;  }  writer.write(chars,start,len);}  }
class C{  public Shape createRoundRectangle(final int x,final int y,final int w,final int h,final CornerSize size){  return createRoundRectangle(x,y,w,h,size,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.ROUNDED);}  }
class C{  URL createResumableUploadSession(URL createMediaUrl,IEntry entry,MediaFileSource file) throws IOException, ServiceException {  GDataRequest request=createInsertRequest(createMediaUrl);  initResumableMediaRequest(request,file,file.getName());  try {    startVersionScope();    writeRequestData(request,entry);    request.execute();    return new URL(request.getResponseHeader("Location"));  }  finally {    endVersionScope();    request.end();  }}  }
class C{  public static double maximum(double[] vals){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < vals.length; i++)   if (max < vals[i])   max=vals[i];  return max;}  }
class C{  public static boolean parseArrowSmart(PsiBuilder b,int l){  IElementType tokenType=b.getTokenType();  if (b.getTokenType() == OPERATOR_DEREFERENCE) {    return consumeToken(b,OPERATOR_DEREFERENCE);  } else {    assert b instanceof PerlBuilder;    PerlTokenData prevToken=((PerlBuilder)b).lookupToken(-1);    IElementType prevTokenType=prevToken == null ? null : prevToken.getTokenType();    if ((prevTokenType == RIGHT_BRACE || prevTokenType == RIGHT_BRACKET) && (tokenType == LEFT_BRACE || tokenType == LEFT_BRACKET || tokenType == LEFT_PAREN)) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.115 -0500",hash_original_method="DF7492B0F439F0DD586A6D33E917DC2B",hash_generated_method="B734B4B662C13F070FD40044895D7CED") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("EventParser.parse");  try {    headerName(TokenTypes.EVENT);    this.lexer.SPorHT();    Event event=new Event();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    String value=token.getTokenValue();    event.setEventType(value);    super.parse(event);    this.lexer.SPorHT();    this.lexer.match('\n');    return event;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("EventParser.parse");  }}  }
class C{  void attemptLogin(){  etUsername.setError(null);  etPassword.setError(null);  String email=etUsername.getText().toString();  String password=etPassword.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    etPassword.setError(getString(R.string.error_invalid_password));    focusView=etPassword;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    etUsername.setError(getString(R.string.error_field_required));    focusView=etUsername;    cancel=true;  } else   if (!isUsernameValid(email)) {    etUsername.setError(getString(R.string.error_invalid_email));    focusView=etUsername;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    performLogin();  }}  }
class C{  public boolean match(Element e,String pseudoE){  return ((ExtendedSelector)getSimpleSelector()).match(e,pseudoE) && ((ExtendedCondition)getCondition()).match(e,pseudoE);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_UNKNOWN;  int lineType=OMGraphic.LINETYPE_GREATCIRCLE;  if (ga != null) {    renderType=ga.getRenderType();    lineType=ga.getLineType();  }  if (Debug.debugging("eomg")) {    Debug.output("EditableOMRect.createGraphic(): rendertype = " + renderType);    Debug.output("EditableOMRect.createGraphic(): linetype = " + lineType);  }switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    if (lineType == OMGraphic.LINETYPE_UNKNOWN) {      lineType=OMGraphic.LINETYPE_GREATCIRCLE;      if (ga != null) {        ga.setLineType(OMGraphic.LINETYPE_GREATCIRCLE);      }    }  rect=new OMRect(90f,-180f,90f,-180f,lineType);break;case (OMGraphic.RENDERTYPE_OFFSET):rect=new OMRect(90d,-180d,-1,-1,1,1);break;default :rect=new OMRect(-1,-1,-1,-1);}if (ga != null) {ga.setTo(rect,true);}assertGrabPoints();}  }
class C{  public void testRandom(){  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Plan plan1=PersonUtils.createAndAddPlan(person,false);  Plan plan2=PersonUtils.createAndAddPlan(person,false);  plan2.setScore(10.0);  Plan plan3=PersonUtils.createAndAddPlan(person,false);  plan3.setScore(-50.0);  Plan plan4=PersonUtils.createAndAddPlan(person,false);  plan4.setScore(0.0);  RandomPlanSelector<Plan,Person> selector=new RandomPlanSelector<Plan,Person>();  int cnt1=0;  int cnt2=0;  int cnt3=0;  int cnt4=0;  for (int i=0; i < 4000; i++) {    Plan plan=selector.selectPlan(person);    if (plan == plan1)     cnt1++;    if (plan == plan2)     cnt2++;    if (plan == plan3)     cnt3++;    if (plan == plan4)     cnt4++;  }  log.info("Plan 1 was returned " + cnt1 + " times.");  log.info("Plan 2 was returned " + cnt2 + " times.");  log.info("Plan 3 was returned " + cnt3 + " times.");  log.info("Plan 4 was returned " + cnt4 + " times.");  assertEquals(966,cnt1);  assertEquals(1014,cnt2);  assertEquals(1039,cnt3);  assertEquals(981,cnt4);}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  mTransition=null;  mJSON=null;  mKeepParameters=null;  mHotspotTextures.clear();  mHotspotTextures=null;  super.finalize();}  }
class C{  public synchronized static void registerSelf(Class<?> class1){  if (Log.logger.isLoggable(Level.FINEST)) {    Log.logger.finest("Config is registering " + class1.getName());  }switch (configState) {case LOADED:    Log.logger.severe("Module " + class1.getName() + " tried to register too late.");  break;case INITIAL:Log.logger.severe("Command line has not been successfully read and we are trying to register " + class1.getName());break;}if (!isRegistered(class1)) {try {final ResourceBundle bundle=ResourceBundle.getBundle(class1.getName());regModules.put(class1.getName(),bundle);registerProperties(class1,bundle);} catch (MissingResourceException e) {Log.logger.log(Level.FINEST,"Config found no resource bundle for {0}",class1.getName());}catch (Exception e) {logger.log(Level.SEVERE,"Error processing resource bundle for " + class1.getName(),e);}}}  }
class C{  static public String randomNegativeFloat(int whole,int decimal){  return "-" + NumericFunctions.randomPositiveFloat(whole,decimal);}  }
class C{  public static String removePrefix(final String text,final String prefix){  if (text != null) {    return text.replaceFirst(prefix,"");  }  return null;}  }
class C{  public CloudSqlDao(final String url) throws SQLException {  dataSource.setUrl(url);  final String createTableSql="CREATE TABLE IF NOT EXISTS books5 ( id INT NOT NULL " + "AUTO_INCREMENT, author VARCHAR(255), createdBy VARCHAR(255), createdById VARCHAR(255), " + "description VARCHAR(255), publishedDate VARCHAR(255), title VARCHAR(255), imageUrl "+ "VARCHAR(255), PRIMARY KEY (id))";  try (Connection conn=dataSource.getConnection()){    conn.createStatement().executeUpdate(createTableSql);  } }  }
class C{  public AccountHeaderBuilder withProfileImagesClickable(boolean profileImagesClickable){  this.mProfileImagesClickable=profileImagesClickable;  return this;}  }
class C{  public boolean hasHeader(){  return hasExtension(Header.class);}  }
class C{  public void processScrollEvent(ActionEvent event){  int currentRow=1;  FacesContext context=FacesContext.getCurrentInstance();  UIComponent component=event.getComponent();  Integer curRow=(Integer)component.getAttributes().get("currentRow");  if (curRow != null) {    currentRow=curRow.intValue();  }  scroll(currentRow);}  }
class C{  @Override protected void shutdown(){  Arrays.fill(mac_write_secret,(byte)0);  Arrays.fill(mac_read_secret,(byte)0);  super.shutdown();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public long[] select(long rank,long[] dest){  return select(rank,dest,0,dest.length);}  }
class C{  public static String contentTypeWithCharsetAndBoundary(String mimeType,String charset,String boundary){  return mimeType + "; charset=" + charset+ "; boundary="+ boundary;}  }
class C{  @Deprecated public Timestamp(int year,int month,int date,int hour,int minute,int second,int nano){  super(year,month,date,hour,minute,second);  if (nano > 999999999 || nano < 0) {    throw new IllegalArgumentException("nanos > 999999999 or < 0");  }  nanos=nano;}  }
class C{  private static void checkOutputParameters(CommandLine cmdLine) throws KeywordOptimizerException {  for (  String mode : cmdLine.getOptionValues("o")) {    try {      OutputMode outputMode=OutputMode.valueOf(mode);      if (outputMode.isOutputFileRequired() && !cmdLine.hasOption("of")) {        throw new KeywordOptimizerException("An output file must be specified if output mode is " + outputMode);      }    } catch (    IllegalArgumentException e) {      throw new KeywordOptimizerException("Output mode '" + mode + "' is not supported",e);    }  }}  }
class C{  public InstantiationException(java.lang.String s){}  }
class C{  public CompositeVariableValue(){  _value=new JComboBox<String>();}  }
class C{  private void tearDownAllConnections(){  for (  NetworkInterface i : net) {    List<Connection> conns=i.getConnections();    if (conns.size() == 0)     continue;    List<NetworkInterface> removeList=new ArrayList<NetworkInterface>(conns.size());    for (    Connection con : conns) {      removeList.add(con.getOtherInterface(i));    }    for (    NetworkInterface inf : removeList) {      i.destroyConnection(inf);    }  }}  }
class C{  protected Object execute() throws IOException {  init();  if (!getSelectedRemote()) {    return null;  }  Codenvy codenvy=getMultiRemoteCodenvy().getCodenvy(remoteName);  if (codenvy == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a(format("Please login into the remote %s",remoteName));    buffer.reset();    System.out.println(buffer.toString());    return null;  }  if (isProgressEnabled()) {    new ConsoleReader().resetPromptLine("Retrieving factories...","",0);  }  User user=codenvy.user().current().execute();  List<String> factoriesID=codenvy.factory().list(user).execute();  if (isProgressEnabled()) {    new ConsoleReader().resetPromptLine("","",0);  }  List<String> factoriesName=new ArrayList<>();  List<String> factoriesVersion=new ArrayList<>();  List<String> factoriesCreated=new ArrayList<>();  int count=0;  for (  String factoryId : factoriesID) {    try {      if (isProgressEnabled()) {        count++;        String percent=(count * 100) / factoriesID.size() + "/100";        new ConsoleReader().resetPromptLine("Collecting factory data...",percent,percent.length());      }      Factory factory=codenvy.factory().get(factoryId).execute();      FactoryProject factoryProject=factory.project();      if (factoryProject != null) {        factoriesName.add(factoryProject.name());      } else {        factoriesName.add("---");      }      factoriesVersion.add(factory.getV());      FactoryCreator creator=factory.creator();      if (creator != null) {        Date date=new Date(creator.created());        factoriesCreated.add(date.toString());      } else {        factoriesCreated.add("...");      }    } catch (    CodenvyException e) {      e.printStackTrace();      factoriesName.add("---");      factoriesVersion.add("---");      factoriesName.add("---");    }  }  if (isProgressEnabled()) {    new ConsoleReader().resetPromptLine("","",0);  }  AsciiArray asciiArray=buildAsciiArray().withColumns(factoriesID,factoriesName,factoriesVersion,factoriesCreated).withTitle("ID","Name","Version","Created");  System.out.println(asciiArray.toAscii());  return null;}  }
class C{  public Population initialPopulation(final EvolutionState state,int thread){  Population p=setupPopulation(state,thread);  p.populate(state,thread);  return p;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a hex number: ");  String hex=input.nextLine();  try {    System.out.println("The decimal value for hex number " + hex + " is "+ hexToDecimal(hex.toUpperCase()));  } catch (  NumberFormatException ex) {    System.out.println(ex.getMessage());  }}  }
class C{  private LDAPConnection bindAs(Credentials credentials) throws GuacamoleException {  String username=credentials.getUsername();  String password=credentials.getPassword();  if (username == null || username.isEmpty()) {    logger.debug("Anonymous bind is not currently allowed by the LDAP authentication provider.");    return null;  }  if (password == null || password.isEmpty()) {    logger.debug("Anonymous bind is not currently allowed by the LDAP authentication provider.");    return null;  }  String userDN=getUserBindDN(username);  if (userDN == null) {    logger.debug("Unable to determine DN for user \"{}\".",username);    return null;  }  return ldapService.bindAs(userDN,password);}  }
class C{  public static int YToTileY(int y,int tileGridYOffset,int tileHeight){  y-=tileGridYOffset;  if (y < 0) {    y+=1 - tileHeight;  }  return y / tileHeight;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,Parcelable value){  if (extras == null) {    extras=new Bundle();  }  extras.putParcelable(name,value);  return this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  public Server start() throws SQLException {  try {    started=true;    service.start();    String name=service.getName() + " (" + service.getURL()+ ")";    Thread t=new Thread(this,name);    t.setDaemon(service.isDaemon());    t.start();    for (int i=1; i < 64; i+=i) {      wait(i);      if (isRunning(false)) {        return this;      }    }    if (isRunning(true)) {      return this;    }    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,"timeout; " + "please check your network configuration, specially the file /etc/hosts");  } catch (  DbException e) {    throw DbException.toSQLException(e);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.VARIABLE_DEFINITION__INITIAL_VALUE:    return getInitialValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  boolean triviallyTrue(Statement triple,Schema schema){  Resource s=triple.getSubject();  URI p=triple.getPredicate();  Value o=triple.getObject();  if (p.equals(RDF.TYPE)) {    if (o.equals(OWL.ONTOLOGY)) {      return true;    } else     if (o.equals(OWL.CLASS)) {      return schema.hasClass(s);    } else     if ((o.equals(OWL.OBJECTPROPERTY) || o.equals(OWL.DATATYPEPROPERTY)) && s instanceof URI) {      return schema.hasProperty((URI)s);    }  }  return false;}  }
class C{  public void closeCqs(){  try {    getCqService().closeAllCqs(true);  } catch (  CqException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to closeAll Cqs. Error :{}",cqe.getMessage(),cqe);    }  }}  }
class C{  public DefaultDatagramSessionConfig(){}  }
class C{  public PWTab addTab(final Image image,final String text){  final PWTab tab=new PWTab(image,text);  this.tabs.add(tab);  return tab;}  }
class C{  public static Composite createComposite(Composite parent,Font font,int columns,int hspan,int fill,int marginwidth,int marginheight){  Composite g=new Composite(parent,SWT.NONE);  GridLayout layout=new GridLayout(columns,false);  layout.marginWidth=marginwidth;  layout.marginHeight=marginheight;  g.setLayout(layout);  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  public PooledByteBufferInputStream(PooledByteBuffer pooledByteBuffer){  super();  Preconditions.checkArgument(!pooledByteBuffer.isClosed());  mPooledByteBuffer=Preconditions.checkNotNull(pooledByteBuffer);  mOffset=0;  mMark=0;}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  void update(){  double alpha=System.currentTimeMillis() / 1000.0 * 0.5;  float x=(float)Math.sin(alpha);  float z=(float)Math.cos(alpha);  lightPosition.set(lightDistance * x,3 + (float)Math.sin(alpha),lightDistance * z);  light.setPerspective((float)Math.toRadians(45.0f),1.0f,0.1f,60.0f).lookAt(lightPosition,lightLookAt,UP);  camera.setPerspective((float)Math.toRadians(45.0f),(float)width / height,0.1f,30.0f).lookAt(cameraPosition,cameraLookAt,UP);}  }
class C{  @Override protected void updateFromInput(){  interfaceButton.setSelection(false);  superclassButton.setSelection(false);  AbstractClassSensorAssignment<?> assignment=getInput();  if (null != assignment) {    updateTitle(assignment.getSensorConfigClass());    interfaceButton.setSelection(assignment.isInterf());    superclassButton.setSelection(assignment.isSuperclass());    classText.setText(StringUtils.defaultString(assignment.getClassName()));    annotationText.setText(StringUtils.defaultString(assignment.getAnnotation()));  } else {    classText.setText("");    annotationText.setText("");  }}  }
class C{  protected CMapFormat0(short language){  super((short)0,language);  byte[] initialIndex=new byte[256];  for (int i=0; i < initialIndex.length; i++) {    initialIndex[i]=(byte)i;  }  setMap(initialIndex);}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return new String(decrypt(civ,secretKeys),encoding);}  }
class C{  public void pasteSubsession(List sessionElements,Point upperLeft){  getWorkbench().pasteSubgraph(sessionElements,upperLeft);  getWorkbench().deselectAll();  for (int i=0; i < sessionElements.size(); i++) {    Object o=sessionElements.get(i);    if (o instanceof GraphNode) {      Node modelNode=(Node)o;      getWorkbench().selectNode(modelNode);    }  }  getWorkbench().selectConnectingEdges();}  }
class C{  public static ArrayList<String> toList(Set<String> set){  int n=set.size();  ArrayList<String> list=new ArrayList<String>(n);  for (  String string : set) {    list.add(string);  }  return list;}  }
class C{  public void attribClass(DiagnosticPosition pos,ClassSymbol c){  try {    annotate.flush();    attribClass(c);  } catch (  CompletionFailure ex) {    chk.completionError(pos,ex);  }}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  private void stepInput(){  if (serialInterface.map(null).orElse(false)) {    for (    final Port port : Port.VALUES) {      final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);      if (!receivingPipe.isReading()) {        receivingPipe.beginRead();      }      if (receivingPipe.canTransfer()) {        serialInterface.ifPresent(null);        if (serialInterface.map(null).orElse(false)) {          receivingPipe.beginRead();        }      }    }  } else {    cancelRead();  }}  }
class C{  public boolean isBatchTime(){  Object oo=get_Value(COLUMNNAME_IsBatchTime);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Transform match(Class type) throws Exception {  if (type == int.class) {    return new IntegerTransform();  }  if (type == boolean.class) {    return new BooleanTransform();  }  if (type == long.class) {    return new LongTransform();  }  if (type == double.class) {    return new DoubleTransform();  }  if (type == float.class) {    return new FloatTransform();  }  if (type == short.class) {    return new ShortTransform();  }  if (type == byte.class) {    return new ByteTransform();  }  if (type == char.class) {    return new CharacterTransform();  }  return null;}  }
class C{  public Task<FileShareRestRep> expand(URI id,FileSystemExpandParam input){  return postTask(input,getIdUrl() + "/expand",id);}  }
class C{  private Cache createCache() throws CacheException {  Properties props=new Properties();  DistributedSystem ds=getSystem(props);  ds.disconnect();  ds=getSystem(props);  Cache cache=null;  cache=CacheFactory.create(ds);  if (cache == null) {    throw new CacheException("CacheFactory.create() returned null "){    };  }  return cache;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.912 -0500",hash_original_method="EA27CD9461C85470B182D05F37CF9E99",hash_generated_method="32B1F400463B2CFDF4B1DE0CA45358C7") protected boolean pageDown(TextView widget,Spannable buffer){  return false;}  }
class C{  void onEachDirectory(Consumer<File> consumer){  consumer.accept(getSnapshotDirectory());  consumer.accept(getLogDirectory());}  }
class C{  public FeatureClassInfo(CoverageTable cthis,String colname,String tablepath,String ftname,String tileDirFile,String tileDirFileColName) throws FormatException {  super(tablepath + ftname,false);  fullInit=true;  ctable=cthis;  columnname=colname.toLowerCase().intern();  tileFileName=tileDirFile;  tileFileColName=tileDirFileColName;  if ("fac".equals(tileFileName)) {    featureType=CoverageTable.AREA_FEATURETYPE;  } else   if ("end".equals(tileFileName)) {    featureType=CoverageTable.EPOINT_FEATURETYPE;  } else   if ("cnd".equals(tileFileName)) {    featureType=CoverageTable.CPOINT_FEATURETYPE;  } else   if ("txt".equals(tileFileName)) {    featureType=CoverageTable.TEXT_FEATURETYPE;  } else   if ("edg".equals(tileFileName)) {    featureType=CoverageTable.EDGE_FEATURETYPE;  } else {    featureType=CoverageTable.SKIP_FEATURETYPE;  }  if (Debug.debugging("vpf.fci")) {    Debug.output("FCI: set to peruse (" + filename + ")\n\tcreated with column name ("+ colname+ ")\n\ttile directory file ("+ tileDirFile+ ")\n\ttile id column ("+ tileDirFileColName+ ")");  }}  }
class C{  static public CIDR valueOf(String s){  return new CIDR(s);}  }
class C{  public HashCode append(final long value){  iTotal=iTotal * iConstant + ((int)(value ^ (value >> 32)));  return this;}  }
