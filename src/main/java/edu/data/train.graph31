class C{  public ThreadClosedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public void reset(){  tbsGen=new V1TBSCertificateGenerator();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void log(final String message){  m_textArea.append(message);  m_textArea.setCaretPosition(m_textArea.getText().length());}  }
class C{  public static void ensureExistence(){  JPLAG_DIRECTORY=System.getProperty("jplag_home");  if (JPLAG_DIRECTORY == null) {    System.out.println("jplag_home property not set!!");    return;  }  System.out.println("jplag_home = " + JPLAG_DIRECTORY);  JPLAG_ENTRIES_DIRECTORY=JPLAG_DIRECTORY + File.separator + "entries";  JPLAG_RESULTS_DIRECTORY=JPLAG_DIRECTORY + File.separator + "results";  File f=new File(JPLAG_ENTRIES_DIRECTORY);  f.mkdir();  f=new File(JPLAG_RESULTS_DIRECTORY);  f.mkdir();}  }
class C{  public void readFromParcel(Parcel in){  x=in.readInt();  y=in.readInt();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void executeRevisions(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length == 2) {    RevisionFeed feed=documentList.getRevisionsFeed(args[1]);    if (feed != null) {      out.println("List of revisions...");      for (      RevisionEntry entry : feed.getEntries()) {        printRevisionEntry(entry);      }    } else {      printMessage(COMMAND_HELP_REVISIONS);    }  } else {    printMessage(COMMAND_HELP_REVISIONS);  }}  }
class C{  public Part(String name,String type,String seq){  setPartTypeColors();  _name=name;  _type=type;  _direction="+";  if (PART_TYPE_COLORS.containsKey(type)) {    _ape_color=PART_TYPE_COLORS.get(type);  }  _color="888888";  _seq=seq;  _start=0;  _end=0;  _gate_index=0;}  }
class C{  private void handleMouseDown(final Event e){  if (upperHover) {    dragInProgress=true;    lastSelected=SELECTED_KNOB.UPPER;    previousUpperValue=upperValue;    return;  }  if (lowerHover) {    dragInProgress=true;    lastSelected=SELECTED_KNOB.LOWER;    previousLowerValue=lowerValue;    return;  }  dragInProgress=false;  lastSelected=SELECTED_KNOB.NONE;}  }
class C{  public FrameBlock readTransformMetaDataFromPath(String spec,String metapath) throws IOException {  return readTransformMetaDataFromPath(spec,metapath,TfUtils.TXMTD_SEP);}  }
class C{  public RequestHandle options(String url,ResponseHandlerInterface responseHandler){  return options(null,url,null,responseHandler);}  }
class C{  public void removeConnection(Connection connection){  if (connection == null)   throw new IllegalArgumentException("connection cannot be null.");  connection.removeListener(invokeListener);synchronized (connectionsLock) {    ArrayList<Connection> temp=new ArrayList(Arrays.asList(connections));    temp.remove(connection);    connections=temp.toArray(new Connection[temp.size()]);  }  if (TRACE)   trace("kryonet","Removed connection from ObjectSpace: " + connection);}  }
class C{  public static String format(Date date,boolean millis,TimeZone tz){  Calendar calendar=new GregorianCalendar(tz,Locale.US);  calendar.setTime(date);  int capacity="yyyy-MM-ddThh:mm:ss".length();  capacity+=millis ? ".sss".length() : 0;  capacity+=tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length();  StringBuilder formatted=new StringBuilder(capacity);  padInt(formatted,calendar.get(Calendar.YEAR),"yyyy".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.MONTH) + 1,"MM".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.DAY_OF_MONTH),"dd".length());  formatted.append('T');  padInt(formatted,calendar.get(Calendar.HOUR_OF_DAY),"hh".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.MINUTE),"mm".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.SECOND),"ss".length());  if (millis) {    formatted.append('.');    padInt(formatted,calendar.get(Calendar.MILLISECOND),"sss".length());  }  int offset=tz.getOffset(calendar.getTimeInMillis());  if (offset != 0) {    int hours=Math.abs((offset / (60 * 1000)) / 60);    int minutes=Math.abs((offset / (60 * 1000)) % 60);    formatted.append(offset < 0 ? '-' : '+');    padInt(formatted,hours,"hh".length());    formatted.append(':');    padInt(formatted,minutes,"mm".length());  } else {    formatted.append('Z');  }  return formatted.toString();}  }
class C{  public static Bitmap viewToImage(Context context,WebView viewToBeConverted){  int extraSpace=2000;  int height=viewToBeConverted.getContentHeight() + extraSpace;  Bitmap viewBitmap=Bitmap.createBitmap(viewToBeConverted.getWidth(),height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(viewBitmap);  viewToBeConverted.draw(canvas);  try {    int scrollY=viewToBeConverted.getScrollY();    if (scrollY > 0) {      viewBitmap=Bitmap.createBitmap(viewBitmap,0,scrollY,viewToBeConverted.getWidth(),height - scrollY);    }  } catch (  Exception ex) {    Log.e("PercolateAndroidUtils","Could not remove top part of the webview image.  ex=" + ex);  }  return viewBitmap;}  }
class C{  public static final void writeValueXml(Object v,String name,XmlSerializer out) throws XmlPullParserException, IOException {  String typeStr;  if (v == null) {    out.startTag(null,"null");    if (name != null) {      out.attribute(null,"name",name);    }    out.endTag(null,"null");    return;  } else   if (v instanceof String) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else   if (v instanceof Integer) {    typeStr="int";  } else   if (v instanceof Long) {    typeStr="long";  } else   if (v instanceof Float) {    typeStr="float";  } else   if (v instanceof Double) {    typeStr="double";  } else   if (v instanceof Boolean) {    typeStr="boolean";  } else   if (v instanceof byte[]) {    writeByteArrayXml((byte[])v,name,out);    return;  } else   if (v instanceof int[]) {    writeIntArrayXml((int[])v,name,out);    return;  } else   if (v instanceof Map) {    writeMapXml((Map)v,name,out);    return;  } else   if (v instanceof List) {    writeListXml((List)v,name,out);    return;  } else   if (v instanceof Set) {    writeSetXml((Set)v,name,out);    return;  } else   if (v instanceof CharSequence) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else {    throw new RuntimeException("writeValueXml: unable to write value " + v);  }  out.startTag(null,typeStr);  if (name != null) {    out.attribute(null,"name",name);  }  out.attribute(null,"value",v.toString());  out.endTag(null,typeStr);}  }
class C{  public synchronized void bestState(long state,Model bestModel){  currentState=state;}  }
class C{  public void handleContentSelectionChangedEvent(ContentSelectionChangedEvent csce){}  }
class C{  public ShiftExpression createShiftExpression(){  ShiftExpressionImpl shiftExpression=new ShiftExpressionImpl();  return shiftExpression;}  }
class C{  public static boolean areNetworkSystemDiscovered(DbClient dbClient){  List<URI> uriNetworkDevices=dbClient.queryByType(NetworkSystem.class,true);  if (uriNetworkDevices != null && uriNetworkDevices.iterator().hasNext()) {    return true;  }  _log.info("SAN Zoning is disabled because there are no NetworkSystems");  return false;}  }
class C{  public String sqlAD_getTableColumnEntityType(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  String searchTableName="AD_Column";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("t0.TableName");  columnNames.add("t.ColumnName");  columnNames.add("t.EntityType");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("TABLE_NAME");  aliasNames.add("COLUMN_NAME");  aliasNames.add("ENTITY_TYPE");  ArrayList<String> joinTypes=new ArrayList<String>();  joinTypes.add("INNER JOIN");  ArrayList<String> joinTables=new ArrayList<String>();  joinTables.add("AD_Table");  ArrayList<String> joinConditions=new ArrayList<String>();  joinConditions.add("t.AD_Table_ID = t0.AD_Table_ID");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer("UPPER(t.ColumnName) = '").append(columnName.toUpperCase()).append("'").toString());  conditions.add(new StringBuffer("UPPER(t0.TableName) = '").append(tableName.toUpperCase()).append("'").toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  sortColumns.add("2");  sortColumns.add("3");  return sql_select(vendorName,catalogName,schemaName,searchTableName,null,columnNames,aliasNames,joinTypes,joinTables,null,joinConditions,conditions,sortColumns,false);}  }
class C{  public E points(Collection<? extends Coordinate> coordinates){  this.points.addAll(coordinates);  return thisRef();}  }
class C{  @BeforeClass public static void buildWorld() throws Exception {  new DatabaseFactory().initializeDatabase();  setupZone(ZONE_NAME);}  }
class C{  protected final Iterator<T> empty(){  return Iterators.empty();}  }
class C{  private boolean isCollapsed(){  return mTabSpinner != null && mTabSpinner.getParent() == this;}  }
class C{  public SqlQuery(Class<?> type,String sql){  setType(type);  setSql(sql);}  }
class C{  public static void main(String[] args){  main_thread=Thread.currentThread();  watch_init_thread=new Thread(null);  watch_init_thread.start();  Thread.currentThread().setPriority(Thread.NORM_PRIORITY + 2);  startTimeNS=System.nanoTime();  startTimeMS=System.currentTimeMillis();  ProfilerSection profiler=Profiler.INSTANCE.section("Setup");  JavaScript.startLoading();  profiler.start("ParseArgs");  OptionParser parser=new OptionParser(true);  parser.on("-sim","-simulation","Start a Simulation with the following class. Use --search to search for Module Classes, or '.' to just start a Simulation without a class",1,null);  parser.on("-vf","-verify","Start a Headless Verification",0,null);  parser.on("-core","Load a Core Module class",1,null);  parser.on("--color","Enable Color Output",0,null);  parser.on("-ide","Set the IDE you are currently using. This will be either ECLIPSE or IDEA, usually.",1,null);  parser.on("-j","--join","Join a currently running Toast Logging session",0,null);  parser.on("-nogui","--headless","Run the Simulation Headless (without a GUI)",0,null);  parser.on("--stub","Exit the program immediately. This is mostly used to profile memory usage over time.",0,null);  parser.on("-d","--debug","Launch in Debug Mode. More logging output and exception printing to aid in debugging issues.",0,null);  parser.on("--MOAR","Launch in Debug Mode. More logging output and exception printing to aid in debugging issues.",0,null);  parser.on("-e","--exceptions","Debug Mode for Runtime Exceptions. More exception printing to aid in debugging issues",0,null);  parser.parse(args);  profiler.stop("ParseArgs");  if (compareStub) {    System.out.println("Immediately exiting -- we've been told to exit before initialization for memory and utilization measurement purposes. Type something to end the program.");    try {      System.in.read();    } catch (    IOException e) {      return;    }    return;  }  if (isSimulation) {    toastHome=new File("toast/").getAbsoluteFile();    robotHome=new File("./").getAbsoluteFile();  }  toastHome.mkdirs();  LoadPhase.BOOTSTRAP.transition();  profiler.start("Logger");  SysLogProxy.init();  profiler.stop("Logger");  profiler.start("Crash");  CrashHandler.init();  profiler.stop("Crash");  profiler.start("Misc");  System.out.println(Assets.getAscii("splash"));  toastLogger=new Logger("Toast",Logger.ATTR_DEFAULT);  new GlobalBlackboard();  GlobalBlackboard.INSTANCE.put("runtime_args",args);  profiler.stop("Misc");  try {    Thread.sleep(20);  } catch (  InterruptedException e) {  }  profiler.start("Version");  Version.init();  profiler.stop("Version");  LoadPhase.CORE_PREINIT.transition();  RobotLoader.preinit(Profiler.INSTANCE.section("RobotLoader"));  LoadPhase.CORE_INIT.transition();  RobotLoader.initCore(Profiler.INSTANCE.section("RobotLoader"));  if (args.length > 0)   toastLogger.info("Toast Started with Run Arguments: " + Arrays.toString(args));  ModuleConfig.init();  LoadPhase.PRE_INIT.transition();  toastLogger.info("Slicing Loaf...");  USBMassStorage.init();  profiler.start("Configuration");  ToastConfiguration.init();  profiler.stop("Configuration");  profiler.start("ThreadPool");  Async.init();  profiler.stop("ThreadPool");  ClassPatcher classLoader=new ClassPatcher();  classLoader.identifyPatches(isSimulation);  if (isSimulation && !isVerification && !isHeadless) {    SimulationGUI.main(args);    DriverStationCommunications.init();  }  LoadPhase.INIT.transition();  toastLogger.info("Nuking Toast...");  RobotLoader.postCore(Profiler.INSTANCE.section("RobotLoader"));  profiler.start("Security");  ToastSecurityManager.init();  profiler.stop("Security");  profiler.start("WPILib");  fakeRobotBase();}  }
class C{  private void runBehindSmokescreen(Runnable action){  Image image=null;  Label label=null;  try {    ISourceViewer viewer=getViewer();    if (viewer instanceof SourceViewer) {      SourceViewer sourceViewer=(SourceViewer)viewer;      Control viewerControl=sourceViewer.getControl();      if (viewerControl instanceof Composite) {        Composite composite=(Composite)viewerControl;        Display display=composite.getDisplay();        while (!display.isDisposed() && display.readAndDispatch()) {        }        GC gc=new GC(composite);        Point size;        try {          size=composite.getSize();          image=new Image(gc.getDevice(),size.x,size.y);          gc.copyArea(image,0,0);        }  finally {          gc.dispose();          gc=null;        }        label=new Label(composite,SWT.NONE);        label.setImage(image);        label.setBounds(0,0,size.x,size.y);        label.moveAbove(null);      }    }    action.run();  }  finally {    if (label != null) {      label.dispose();    }    if (image != null) {      image.dispose();    }  }}  }
class C{  public T caseTaggedTemplateString(TaggedTemplateString object){  return null;}  }
class C{  public boolean isShowNormalFunctions(){  return m_normalFunctionCheckbox.isSelected();}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private void depthCalc(){  int sum=0;  for (  int d : depths)   sum+=d;  depthSum=sum;}  }
class C{  public URL toURL() throws MalformedURLException {  if (!absolute) {    throw new IllegalArgumentException("URI is not absolute: " + toString());  }  return new URL(toString());}  }
class C{  @Override public final GraphNode from(){  return _fromNode;}  }
class C{  public CStringReplacement(final String string){  m_string=string;}  }
class C{  public boolean isEOF(){  return eof;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void addReturn(CtClass type){  if (type == null)   addOpcode(RETURN); else   if (type.isPrimitive()) {    CtPrimitiveType ptype=(CtPrimitiveType)type;    addOpcode(ptype.getReturnOp());  } else   addOpcode(ARETURN);}  }
class C{  public void changeMode(){  currentMode=(currentMode + 1) % 4;}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.METHOD_DECLARATION__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public VibrationProfile(String id,int[] onOffSequence,short repeat){  this.id=id;  this.repeat=repeat;  this.onOffSequence=onOffSequence;}  }
class C{  public T compareAndSetAndGet(T newVal,T expVal){  checkRemoved();  try {    return CU.outTx(internalCompareAndSetAndGet(expVal,newVal),ctx);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  private static void ReleaseStringChars(JNIEnvironment env,int objJREF,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseStringChars  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    sysCall.sysFree(bufAddress);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public Animation onCreateAnimation(int transit,boolean enter,int nextAnim){  return null;}  }
class C{  private void checkMessageDensity(MessageMetrics metrics) throws AdeUsageException, TrainingPredconditionException {  final int numIntervalsWithMsg=metrics.getNumIntervalsWithMessages();  final int numUniqueMsgIds=metrics.getNumUniqueMessageIds();  final int numIntervals=metrics.getNumIntervals();  final int ANALYSIS_INTERVAL_LEN_MINUTES=60;  if (m_traceOn) {    final File out=AdeInternal.getAdeImpl().getDirectoryManager().getTracePath();    m_traceOutputPath=new File(out,m_analysisGroupId);    FileUtils.createDir(m_traceOutputPath);    final PrintWriter fout=FileUtils.openPrintWriterToFile(new File(m_traceOutputPath,"verifyLinuxTraining.summary"),true);    fout.printf("Linux Training Check \n");    fout.printf("For analysis group: %s \n",this.m_analysisGroupId);    if (m_startDate != null) {      fout.printf("Start date: %s\n",DateFormat.getDateInstance().format(m_startDate));    } else {      fout.printf("Start date: (not specified)\n");    }    if (m_endDate != null) {      fout.printf("End Date: %s\n",DateFormat.getDateInstance().format(m_endDate));    } else {      fout.printf("End Date: (not specified)\n");    }    fout.println();    fout.printf("Number of intervals with message ids: %d \n",(int)numIntervalsWithMsg);    fout.printf("Number of messages in sufficient intervals: %d\n",numUniqueMsgIds);    fout.printf("Bad model algorithm: (%d < 180 && %d < 1000) || (%d < 20 && %d >= 1000)\n",numUniqueMsgIds,numIntervalsWithMsg,numUniqueMsgIds,numIntervalsWithMsg);    fout.println();    fout.close();  }  boolean isSufficientData=true;  if (numIntervalsWithMsg < LONG_TIME_THRESHOLD_IN_INTERVALS) {    if (numUniqueMsgIds < MANY_MESSAGES_THRESHOLD) {      isSufficientData=false;    }  } else {    if (numUniqueMsgIds < NONTRIVIAL_NUM_MESSAGES_THRESHOLD) {      isSufficientData=false;    }  }  if (!isSufficientData) {    throw new TrainingPredconditionException(m_analysisGroupId,m_requestType,new DateTime(m_startDate.getTime()),new DateTime(m_endDate.getTime()),numUniqueMsgIds,numIntervals,numIntervalsWithMsg,ANALYSIS_INTERVAL_LEN_MINUTES);  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  static <T0,T1,T2,T3>Tuple4<T0,T1,T2,T3> of(T0 e0,T1 e1,T2 e2,T3 e3){  return new Tuple4Impl<>(e0,e1,e2,e3);}  }
class C{  public Map<String,Object> finalizeOrderEntryPayment(String checkOutPaymentId,BigDecimal amount,boolean singleUse,boolean append){  Map<String,Object> result=ServiceUtil.returnSuccess();  if (UtilValidate.isNotEmpty(checkOutPaymentId)) {    if (!append) {      cart.clearPayments();    }    cart.addPaymentAmount(checkOutPaymentId,amount,singleUse);  }  return result;}  }
class C{  public static String escapeJavaScript(final String str){  return StringEscapeUtils.escapeJavaScript(str);}  }
class C{  public static void signedSub(final long offset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final String firstOperand,final String secondOperand,final String resultOperand,final String trueResult){  final String tmpResult=environment.getNextVariableString();  final String twoComplementfirstOperand=environment.getNextVariableString();  final OperandSize dw=OperandSize.DWORD;  final OperandSize qw=OperandSize.QWORD;  final OperandSize bt=OperandSize.BYTE;  long baseOffset=offset;  instructions.add(ReilHelpers.createXor(baseOffset++,dw,firstOperand,dw,String.valueOf(0xFFFFFFFFL),dw,twoComplementfirstOperand));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,twoComplementfirstOperand,dw,secondOperand,qw,tmpResult));  instructions.add(ReilHelpers.createAdd(baseOffset++,qw,tmpResult,bt,String.valueOf(1L),qw,trueResult));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,trueResult,dw,String.valueOf(0xFFFFFFFFL),dw,resultOperand));}  }
class C{  public static Match.Builder createForgetfulBuilder(Match m){  return OFFactories.getFactory(m.getVersion()).buildMatch();}  }
class C{  public void delete(String key){  if (key == null)   throw new NullPointerException("called delete(null)");  if (key.length() == 0)   throw new IllegalArgumentException("invalid key");  Node g;  Node p=head;  Node x=head;  do {    g=p;    p=x;    if (safeBitTest(key,x.b))     x=x.right; else     x=x.left;  } while (p.b < x.b);  if (x.key.equals(key)) {    Node z;    Node y=head;    do {      z=y;      if (safeBitTest(key,y.b))       y=y.right; else       y=y.left;    } while (y != x);    if (x == p) {      Node c;      if (safeBitTest(key,x.b))       c=x.left; else       c=x.right;      if (safeBitTest(key,z.b))       z.right=c; else       z.left=c;    } else {      Node c;      if (safeBitTest(key,p.b))       c=p.left; else       c=p.right;      if (safeBitTest(key,g.b))       g.right=c; else       g.left=c;      if (safeBitTest(key,z.b))       z.right=p; else       z.left=p;      p.left=x.left;      p.right=x.right;      p.b=x.b;    }    count--;  }}  }
class C{  public void testFictionalProgressSpokenTextMomentParsing(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createSpokenTextMomentWithFictionalProgressXML("start",null,"Text to speak","Fictional progress.");  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals(1,mMissionData.getMomentFromId("start").getFictionalProgress().size());  Assert.assertEquals("Fictional progress.",mMissionData.getMomentFromId("start").getFictionalProgress().get(0));}  }
class C{  public void disconnectContainerFromNetwork(String netId,String containerId) throws IOException {  disconnectContainerFromNetwork(DisconnectContainerFromNetworkParams.create(netId,new DisconnectContainer().withContainer(containerId)));}  }
class C{  public AngularObject add(String name,Object o,String noteId,String paragraphId){  return add(name,o,noteId,paragraphId,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void printDate(String value){  printDate(value,OUT);}  }
class C{  public Builder bufferSize(final int buffer_size){  this.bufferSize=buffer_size;  return this;}  }
class C{  public static double[][] clone(double[][] mat){  int m=mat.length;  int n=mat[0].length;  double[][] res=new double[m][];  for (int i=0; i < m; ++i) {    res[i]=new double[n];    for (int j=0; j < n; ++j) {      res[i][j]=mat[i][j];    }  }  return (res);}  }
class C{  public static int indexOf(@NotNull CharSequence buffer,@NotNull CharSequence pattern,int fromIndex,final int toIndex){  final int patternLength=pattern.length();  int limit=toIndex - patternLength + 1;  if (fromIndex < 0) {    fromIndex=0;  }  SearchLoop:   for (int i=fromIndex; i < limit; i++) {    for (int j=0; j < patternLength; j++) {      if (pattern.charAt(j) != buffer.charAt(i + j))       continue SearchLoop;    }    return i;  }  return -1;}  }
class C{  protected void assertQueryEquals(final String defType,final String... inputs) throws Exception {  SolrQueryRequest req=req();  try {    assertQueryEquals(defType,req,inputs);  }  finally {    req.close();  }}  }
class C{  public DefaultRequest userTimingTime(Integer value){  setInteger(USER_TIMING_TIME,value);  return this;}  }
class C{  public boolean isWordWrapEnabled(){  return wordWrapEnabled;}  }
class C{  @SuppressWarnings("rawtypes") public static Map<String,String> parseKeyAndValueToMap(JSONObject sourceObj){  if (sourceObj == null) {    return null;  }  Map<String,String> keyAndValueMap=new HashMap<String,String>();  for (Iterator iter=sourceObj.keys(); iter.hasNext(); ) {    String key=(String)iter.next();    MapUtils.putMapNotEmptyKey(keyAndValueMap,key,getString(sourceObj,key,""));  }  return keyAndValueMap;}  }
class C{  private void updateFileTrackingInfo() throws IOException {  try (FSDataOutputStream outputStream=fs.create(new Path(tempFilePath,file.getName() + ".txt"))){    outputStream.writeUTF(fileName);  } }  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    for (Index<K,V> q=head; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  public void stateChanged(ChangeEvent e){  if (e.getSource() instanceof CTabbedPane) {    CTabbedPane tab=(CTabbedPane)e.getSource();    if (tab.getSelectedIndex() == 5) {      checkShowDetail.setEnabled(true);    } else {      checkShowDetail.setEnabled(false);    }    log.fine("Calling refresh(): " + e.toString());    refresh();  }}  }
class C{  protected synchronized void profileTimeout(){  if (state == ProfileState.WAIT_FOR_THROTTLE) {    tidyUp();    log.error("Timeout waiting for throttle");    statusLabel.setText("Timeout waiting for throttle");  } else   if (state == ProfileState.RUNNING) {    if (profileDir == ProfileDirection.FORWARD) {      spFwd.setPoint(profileStep,avSpeed);      statusLabel.setText((rb.getString("Fwd") + " step: " + profileStep));    } else {      spRev.setPoint(profileStep,avSpeed);      statusLabel.setText((rb.getString("Rev") + " step: " + profileStep));    }    profileGraphPane.repaint();    if (profileStep == 29) {      if ((profileDir == ProfileDirection.FORWARD) && dirRevButton.isSelected()) {        profileDir=ProfileDirection.REVERSE;        throttle.setIsForward(false);        profileStep=0;        avClr();        statusLabel.setText(rb.getString("StatCreateRev"));      } else {        tidyUp();        statusLabel.setText(rb.getString("StatDone"));      }    } else {      if (profileStep == 28) {        profileSpeed=0.0F;      } else {        profileSpeed+=profileIncrement;      }      throttle.setSpeedSetting(profileSpeed);      profileStep+=1;      profileTimer.setDelay(7000 - range * 1000);    }  } else {    log.error("Unexpected profile timeout");    profileTimer.stop();  }}  }
class C{  private static Platform findPlatform(){  try {    try {      Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");    } catch (    ClassNotFoundException e) {      Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");    }    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class);    OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class);    Method trafficStatsTagSocket=null;    Method trafficStatsUntagSocket=null;    OptionalMethod<Socket> getAlpnSelectedProtocol=null;    OptionalMethod<Socket> setAlpnProtocols=null;    try {      Class<?> trafficStats=Class.forName("android.net.TrafficStats");      trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class);      trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class);      try {        Class.forName("android.net.Network");        getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol");        setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class);      } catch (      ClassNotFoundException ignored) {      }    } catch (    ClassNotFoundException|NoSuchMethodException ignored) {    }    return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols);  } catch (  ClassNotFoundException ignored) {  }  try {    String negoClassName="org.eclipse.jetty.alpn.ALPN";    Class<?> negoClass=Class.forName(negoClassName);    Class<?> providerClass=Class.forName(negoClassName + "$Provider");    Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider");    Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider");    Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass);    Method getMethod=negoClass.getMethod("get",SSLSocket.class);    Method removeMethod=negoClass.getMethod("remove",SSLSocket.class);    return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass);  } catch (  ClassNotFoundException|NoSuchMethodException ignored) {  }  return new Platform();}  }
class C{  public void error(SourceLocator srcLctr,String msg,Object args[],Exception e) throws TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr)); else   throw new TransformerException(formattedMsg,srcLctr);}  }
class C{  public OFByteArrayVendorData(){}  }
class C{  public void reset(){  line=myInitialState.myLine;  start=myInitialState.myStart;  length=myInitialState.myLength;}  }
class C{  public static String normalizePath(String path){  return (path.isEmpty() || path.equals("/*")) ? "" : ensureNotEndingSlash(ensureStartingSlash(path));}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  public void registerCallEvent(P25CallEvent event){  if (mChannelCallMap.containsKey(event.getChannel())) {    P25CallEvent previousEvent=mChannelCallMap.remove(event.getChannel());    previousEvent.end();    broadcast(previousEvent);  }  mChannelCallMap.put(event.getChannel(),event);}  }
class C{  synchronized void close(boolean fromShutdownHook){  if (closing) {    return;  }  throwLastBackgroundException();  if (fileLockMethod == FileLock.LOCK_SERIALIZED && !reconnectChangePending) {    try {      closeOpenFilesAndUnlock(false);    } catch (    DbException e) {    }    traceSystem.close();    Engine.getInstance().close(databaseName);    return;  }  closing=true;  stopServer();  if (userSessions.size() > 0) {    if (!fromShutdownHook) {      return;    }    trace.info("closing {0} from shutdown hook",databaseName);    closeAllSessionsException(null);  }  trace.info("closing {0}",databaseName);  if (eventListener != null) {    closing=false;    DatabaseEventListener e=eventListener;    eventListener=null;    e.closingDatabase();    if (userSessions.size() > 0) {      return;    }    closing=true;  }  removeOrphanedLobs();  try {    if (systemSession != null) {      if (powerOffCount != -1) {        for (        Table table : getAllTablesAndViews(false)) {          if (table.isGlobalTemporary()) {            table.removeChildrenAndResources(systemSession);          } else {            table.close(systemSession);          }        }        for (        SchemaObject obj : getAllSchemaObjects(DbObject.SEQUENCE)) {          Sequence sequence=(Sequence)obj;          sequence.close();        }      }      for (      SchemaObject obj : getAllSchemaObjects(DbObject.TRIGGER)) {        TriggerObject trigger=(TriggerObject)obj;        try {          trigger.close();        } catch (        SQLException e) {          trace.error(e,"close");        }      }      if (powerOffCount != -1) {        meta.close(systemSession);        systemSession.commit(true);      }    }  } catch (  DbException e) {    trace.error(e,"close");  }  tempFileDeleter.deleteAll();  try {    closeOpenFilesAndUnlock(true);  } catch (  DbException e) {    trace.error(e,"close");  }  trace.info("closed");  traceSystem.close();  if (closeOnExit != null) {    closeOnExit.reset();    try {      Runtime.getRuntime().removeShutdownHook(closeOnExit);    } catch (    IllegalStateException e) {    }catch (    SecurityException e) {    }    closeOnExit=null;  }  Engine.getInstance().close(databaseName);  if (deleteFilesOnDisconnect && persistent) {    deleteFilesOnDisconnect=false;    try {      String directory=FileUtils.getParent(databaseName);      String name=FileUtils.getName(databaseName);      DeleteDbFiles.execute(directory,name,true);    } catch (    Exception e) {    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Iterator<T> concat(Iterator<T>... iters){  if (iters.length == 1)   return iters[0];  return concat(asList(iters).iterator());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.638 -0500",hash_original_method="86DD9C9F82F9BD6AD5A8C39BDF584DAA",hash_generated_method="49F9C5CC68814F1F5518AD50E7ED92A0") static public InputMethodManager peekInstance(){  return mInstance;}  }
class C{  public void testSharedStrings() throws Exception {  final String VALUE="abcde12345";  byte[] data=writeRepeatedString(false,VALUE);  int BASE_LEN=28;  assertEquals(BASE_LEN,data.length);  data=writeRepeatedString(true,VALUE);  if (data.length >= BASE_LEN) {    fail("Expected shared String length to be < " + BASE_LEN + ", was "+ data.length);  }}  }
class C{  public AbstractTestContext(String name){  try {    if (System.getProperty("mode") != null) {      setMode(System.getProperty("mode"));    } else {      setMode("local");    }  } catch (  Exception ex) {    setMode("local");  }}  }
class C{  public static void loadRegistrations(DataInput in) throws IOException {  int instId;  while ((instId=in.readInt()) != 0) {    Class instClass=null;    Class instantiatedClass=null;    boolean skip=false;    try {      instClass=DataSerializer.readClass(in);    } catch (    ClassNotFoundException ex) {      skip=true;    }    try {      instantiatedClass=DataSerializer.readClass(in);    } catch (    ClassNotFoundException ex) {      skip=true;    }    if (skip) {      continue;    }    register(newInstance(instClass,instantiatedClass,instId),true);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public long addWithoutBreaking(long bytes){  long u=used.addAndGet(bytes);  if (logger.isTraceEnabled()) {    logger.trace("Adjusted breaker by [{}] bytes, now [{}]",bytes,u);  }  assert u >= 0 : "Used bytes: [" + u + "] must be >= 0";  return u;}  }
class C{  public static void stop(String[] args){  System.exit(0);}  }
class C{  public static void modifyJPedalParameters(final Map values) throws PdfException {  if (values != null) {    DecoderOptions.modifyJPedalParameters(values);  }}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  public PbrpcConnectionException(Throwable arg0){  super(arg0);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS01.class,args);}  }
class C{  protected void assertResponseCode(Request request,Response response,int expectedStatusCode){  int statusCode=response.code();  String customMessage=config.getErrorMessages().get(statusCode);  if (statusCode == expectedStatusCode) {    return;  } else   if (customMessage != null) {    throw requestFailure(request,createStatus(statusCode,customMessage));  } else {    throw requestFailure(request,createStatus(response));  }}  }
class C{  public static Validator<CharSequence> emailAddress(@NonNull final Context context){  return new EmailAddressValidator(context,R.string.default_error_message);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CLEvent write(CLQueue queue,Pointer<T> in,boolean blocking,CLEvent... eventsToWaitFor){  return write(queue,0,-1,in,blocking,eventsToWaitFor);}  }
class C{  public LinearComponentExtracter(Collection lines,boolean isForcedToLineString){  this.lines=lines;  this.isForcedToLineString=isForcedToLineString;}  }
class C{  public Maybe<V> apply(K key){  return root.get(ord,key);}  }
class C{  public static <T extends IViewPart>T showView(String viewId,String secondaryId,int mode){  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();  try {    @SuppressWarnings("unchecked") T view=(T)activeWorkbenchWindow.getActivePage().showView(viewId,secondaryId,mode);    return view;  } catch (  PartInitException e) {    throw new RuntimeException(String.format("Cannot show view with id %s and secondary id %s.",viewId,secondaryId),e);  }}  }
class C{  public static void padFileName(File file){  StringBuilder newName=new StringBuilder(file.getName());  newName.insert(8,'0');  file.renameTo(new File(newName.toString()));}  }
class C{  void reinitialize(){  table=null;  entrySet=null;  keySet=null;  values=null;  modCount=0;  threshold=0;  size=0;}  }
class C{  public void calcXBounds(BarLineScatterCandleBubbleDataProvider dataProvider,int xAxisModulus){  int low=dataProvider.getLowestVisibleXIndex();  int high=dataProvider.getHighestVisibleXIndex();  int subLow=(low % xAxisModulus == 0) ? xAxisModulus : 0;  mMinX=Math.max((low / xAxisModulus) * (xAxisModulus) - subLow,0);  mMaxX=Math.min((high / xAxisModulus) * (xAxisModulus) + xAxisModulus,(int)dataProvider.getXChartMax());}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public void unload(String name,boolean deleteIndexDir,boolean deleteDataDir,boolean deleteInstanceDir){  if (name != null) {    CoreLoadFailure loadFailure=coreInitFailures.remove(name);    if (loadFailure != null) {      SolrCore.deleteUnloadedCore(loadFailure.cd,deleteDataDir,deleteInstanceDir);      return;    }  }  CoreDescriptor cd=solrCores.getCoreDescriptor(name);  if (cd == null) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Cannot unload non-existent core [" + name + "]");  }  boolean close=solrCores.isLoadedNotPendingClose(name);  SolrCore core=solrCores.remove(name);  coresLocator.delete(this,cd);  if (core == null) {    SolrCore.deleteUnloadedCore(cd,deleteDataDir,deleteInstanceDir);    return;  }  if (zkSys.getZkController() != null) {    core.getSolrCoreState().cancelRecovery();  }  core.unloadOnClose(deleteIndexDir,deleteDataDir,deleteInstanceDir);  if (close)   core.closeAndWait();  if (zkSys.getZkController() != null) {    try {      zkSys.getZkController().unregister(name,cd);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new SolrException(ErrorCode.SERVER_ERROR,"Interrupted while unregistering core [" + name + "] from cloud state");    }catch (    KeeperException e) {      throw new SolrException(ErrorCode.SERVER_ERROR,"Error unregistering core [" + name + "] from cloud state",e);    }  }}  }
class C{  private void sortShellsAndHoles(List edgeRings,List shellList,List freeHoleList){  for (Iterator it=edgeRings.iterator(); it.hasNext(); ) {    EdgeRing er=(EdgeRing)it.next();    if (er.isHole()) {      freeHoleList.add(er);    } else {      shellList.add(er);    }  }}  }
class C{  public EdgeString(GeometryFactory factory){  this.factory=factory;}  }
class C{  public static Schematic load(File file) throws IOException {  return ClipboardFormat.SCHEMATIC.load(file);}  }
class C{  private void deleteDataPage(CacheDataPage cacheDataPage) throws IOException {  getPageChannel().deallocatePage(cacheDataPage._main._pageNumber);  _dataPages.remove(cacheDataPage._main._pageNumber);  cacheDataPage._extra._modified=false;}  }
class C{  private void testHasChildren() throws Exception {  LOG.info("hasChildren");  String oldName;  for (  MailboxPath path : pathsList) {    final HBaseMailbox mailbox=new HBaseMailbox(path,12455);    oldName=mailbox.getName();    if (path.getUser().equals("user3")) {      mailbox.setName("test");    }    boolean result=mapper.hasChildren(mailbox,SEPARATOR);    mailbox.setName(oldName);    if (path.getUser().equals("user3")) {      assertTrue(result);    } else {      assertFalse(result);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void initDiagnostics(){  Class clazz=this.getClass();  ClassLoader classLoader=getClassLoader(clazz);  String classLoaderName;  try {    if (classLoader == null) {      classLoaderName="BOOTLOADER";    } else {      classLoaderName=objectId(classLoader);    }  } catch (  SecurityException e) {    classLoaderName="UNKNOWN";  }  diagnosticPrefix="[LogFactoryImpl@" + System.identityHashCode(this) + " from "+ classLoaderName+ "] ";}  }
class C{  @OnOpen public void onOpen(Session session) throws IOException {  if (Boolean.parseBoolean(InitParametersInjector.get(InitParametersInjector.INIT_PARAM_ENABLE_ROLES))) {    Principal principal=session.getUserPrincipal();    if (principal == null) {      session.getBasicRemote().sendText("Login first to be able to use the Log websocket channel.");      session.close();    }  }  openSessions.put(session.getId(),session);  callInternal("onOpen",session,null);}  }
class C{  private void completeMovement(){  if (m_movement != null) {    getProcessInfo().setRecord_ID(m_movement.get_ID());    if (!m_movement.processIt(p_docAction))     log.warning("Failed: " + m_movement);    m_movement.saveEx();    addLog(m_movement.getM_Movement_ID(),m_movement.getMovementDate(),null,m_movement.getDocumentNo());    m_created++;    m_map=new HashMap<SParameter,MStorage[]>();    if (m_lastPP != null && m_lastStorages != null)     m_map.put(m_lastPP,m_lastStorages);  }  m_movement=null;  m_line=0;}  }
class C{  public boolean isAddGroupClasses(){  return addGroupClasses;}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> subSet(E start,E end){  return subSet(start,true,end,false);}  }
class C{  public static String removeStyleAndColors(String text){  return cleanupPattern.matcher(text).replaceAll("");}  }
class C{  public boolean handleError(DOMError error){  boolean fail=true;  String severity=null;  if (error.getSeverity() == DOMError.SEVERITY_WARNING) {    fail=false;    severity="[Warning]";  } else   if (error.getSeverity() == DOMError.SEVERITY_ERROR) {    severity="[Error]";  } else   if (error.getSeverity() == DOMError.SEVERITY_FATAL_ERROR) {    severity="[Fatal Error]";  }  System.err.println(severity + ": " + error.getMessage()+ "\t");  System.err.println("Type : " + error.getType() + "\t"+ "Related Data: "+ error.getRelatedData()+ "\t"+ "Related Exception: "+ error.getRelatedException());  return fail;}  }
class C{  @Deprecated public String toString(){  return name;}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  public final boolean removeElement(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=java.lang.Integer.MIN_VALUE;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(type);  oos.writeObject(Integer.valueOf(goalUse.useId));  if (goalDefinition != null)   oos.writeObject(Integer.valueOf(goalDefinition.defId)); else   oos.writeObject(0);}  }
class C{  public Matrix(int initRows,int initColumns){  rows=initRows;  columns=initColumns;  data=new byte[rows][];  for (int r=0; r < rows; r++) {    data[r]=new byte[columns];  }}  }
class C{  public CompanyObject(int id){  this.id=id;}  }
class C{  public boolean nonEmpty(){  return tail != null;}  }
class C{  @Override public List<ReilInstruction> translate(final ITranslationEnvironment environment,final InstructionType instruction,final List<ITranslationExtension<InstructionType>> extensions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  final String mnemonic=instruction.getMnemonic();  if (translators.containsKey(mnemonic)) {    final IInstructionTranslator translator=translators.get(mnemonic);    final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();    translator.translate(environment,instruction,instructions);    for (    final ITranslationExtension<InstructionType> extension : extensions) {      extension.postProcess(environment,instruction,instructions);    }    return instructions;  } else   if (mnemonic == null) {    return new ArrayList<ReilInstruction>();  } else {    System.out.println("Unknown mnemonic: " + mnemonic);    return Lists.newArrayList(ReilHelpers.createUnknown(ReilHelpers.toReilAddress(instruction.getAddress()).toLong()));  }}  }
class C{  public String generateZipEntry(String file){  return file.substring(sourceDir.length() + 1,file.length());}  }
class C{  void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  displayPanel.setLayout(displayLayout);  keyPanel.setLayout(keyLayout);  mainLayout.setHgap(2);  mainLayout.setVgap(2);  mainPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));  mainPanel.addKeyListener(this);  display.setBackground(Color.white);  display.setFont(new java.awt.Font("SansSerif",0,14));  display.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(2,0,2,1),BorderFactory.createLineBorder(AdempierePLAF.getPrimary1())));  display.setText("0");  display.setHorizontalAlignment(SwingConstants.RIGHT);  b7.setText("7");  b8.setText("8");  b9.setText("9");  b4.setText("4");  b5.setText("5");  b6.setText("6");  b1.setText("1");  b2.setText("2");  b3.setText("3");  keyLayout.setColumns(5);  keyLayout.setHgap(3);  keyLayout.setRows(4);  keyLayout.setVgap(3);  bCur.setForeground(Color.yellow);  bCur.setToolTipText(Msg.getMsg(Env.getCtx(),"CurrencyConversion"));  bCur.setText("$");  bC.setForeground(Color.red);  bC.setText("C");  bDiv.setForeground(Color.blue);  bDiv.setText("/");  bM.setForeground(Color.blue);  bM.setText("*");  bMin.setForeground(Color.blue);  bMin.setText("-");  bProc.setForeground(Color.blue);  bProc.setText("%");  bAC.setForeground(Color.red);  bAC.setText("AC");  bResult.setForeground(Color.green);  bResult.setText("=");  bDec.setText(".");  b0.setText("0");  bPlus.setForeground(Color.blue);  bPlus.setText("+");  bordPanel.setLayout(bordLayout);  curLabel.setHorizontalAlignment(SwingConstants.CENTER);  curLabel.setHorizontalTextPosition(SwingConstants.CENTER);  curLabel.setText(" >> ");  currencyPanel.setLayout(currencyLayout);  bordLayout.setHgap(2);  bordLayout.setVgap(2);  displayLayout.setHgap(2);  displayLayout.setVgap(2);  currencyLayout.setHgap(3);  currencyLayout.setVgap(2);  displayPanel.setBackground(Color.white);  getContentPane().add(mainPanel);  mainPanel.add(displayPanel,BorderLayout.NORTH);  displayPanel.add(display,BorderLayout.CENTER);  mainPanel.add(bordPanel,BorderLayout.CENTER);  bordPanel.add(currencyPanel,BorderLayout.NORTH);  currencyPanel.add(curFrom,null);  currencyPanel.add(curLabel,null);  currencyPanel.add(curTo,null);  bordPanel.add(keyPanel,BorderLayout.CENTER);  keyPanel.add(bAC,null);  keyPanel.add(b7,null);  keyPanel.add(b8,null);  keyPanel.add(b9,null);  keyPanel.add(bM,null);  keyPanel.add(bC,null);  keyPanel.add(b4,null);  keyPanel.add(b5,null);  keyPanel.add(b6,null);  keyPanel.add(bDiv,null);  keyPanel.add(bProc,null);  keyPanel.add(b1,null);  keyPanel.add(b2,null);  keyPanel.add(b3,null);  keyPanel.add(bMin,null);  keyPanel.add(bCur,null);  keyPanel.add(b0,null);  keyPanel.add(bDec,null);  keyPanel.add(bResult,null);  keyPanel.add(bPlus,null);}  }
class C{  private void saveName(){  try {    m_module.getConfiguration().setName(m_stdEditPanel.getNameString());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String message="E00160: " + "Could not change the module name";    final String description=CUtilityFunctions.createDescription("The new module name could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the module name was saved"},new String[]{"The module name was not saved. Please try to find out what went wrong with the database connection and try to save the module name again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,e);  }}  }
class C{  public void updateButtons(boolean verifyTargetName){  if (selectedTarget == null) {    return;  }  if (selectedTarget.isConnected()) {    sshView.setConnectButtonText("Disconnect");  } else {    sshView.setConnectButtonText("Connect");  }  if (!selectedTarget.isDirty()) {    sshView.enableConnectButton(true);    sshView.enableCancelButton(false);    sshView.enableSaveButton(false);    sshView.unmarkTargetName();    sshView.unmarkHost();    sshView.unmarkPort();    return;  }  sshView.enableConnectButton(false);  sshView.enableCancelButton(true);  if (sshView.getTargetName().isEmpty()) {    sshView.markTargetNameInvalid();    sshView.enableSaveButton(false);    return;  }  boolean enableSave=true;  if (sshView.getTargetName().isEmpty()) {    enableSave=false;    sshView.markTargetNameInvalid();  } else {    if (verifyTargetName) {      if (isTargetNameExist(sshView.getTargetName())) {        enableSave=false;        sshView.markTargetNameInvalid();      } else {        sshView.unmarkTargetName();      }    }  }  if (sshView.getHost().isEmpty()) {    enableSave=false;    sshView.markHostInvalid();  } else {    sshView.unmarkHost();  }  if (sshView.getPort().isEmpty()) {    enableSave=false;    sshView.markPortInvalid();  } else {    sshView.unmarkPort();  }  sshView.enableSaveButton(enableSave);}  }
class C{  public void adjust(final JBPopup popup){  adjust(popup,Position.RIGHT,Position.LEFT,Position.TOP,Position.BOTTOM);}  }
class C{  public String labelToClassName(String label,String prefix){  if (configuration.getBoolean(CONFIG_LABEL_AS_CLASSNAME,false)) {    return label;  }  return label.equals(prefix) ? prefix : prefix + "_" + label;}  }
class C{  public static void jenkins(final long[] triple,final long seed,final long[] h){  long a, b, c;  a=b=seed;  c=ARBITRARY_BITS;  a+=triple[0];  b+=triple[1];  c+=triple[2];  a-=b;  a-=c;  a^=(c >>> 43);  b-=c;  b-=a;  b^=(a << 9);  c-=a;  c-=b;  c^=(b >>> 8);  a-=b;  a-=c;  a^=(c >>> 38);  b-=c;  b-=a;  b^=(a << 23);  c-=a;  c-=b;  c^=(b >>> 5);  a-=b;  a-=c;  a^=(c >>> 35);  b-=c;  b-=a;  b^=(a << 49);  c-=a;  c-=b;  c^=(b >>> 11);  a-=b;  a-=c;  a^=(c >>> 12);  b-=c;  b-=a;  b^=(a << 18);  c-=a;  c-=b;  c^=(b >>> 22);  h[0]=a;  h[1]=b;  h[2]=c;}  }
class C{  @Override public void send(HandshakeIODataStream out){  int total_length=0;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  total_length=3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    total_length+=encoded_certs[i].length;  }  out.writeUint24(total_length);  for (int i=0; i < encoded_certs.length; i++) {    out.writeUint24(encoded_certs[i].length);    out.write(encoded_certs[i]);  }}  }
class C{  public HaltonSequence(int base){  this.base=base;}  }
class C{  private static <T>void legacyMergeSort(T[] a,Comparator<? super T> c){  T[] aux=a.clone();  if (c == null)   mergeSort(aux,a,0,a.length,0); else   mergeSort(aux,a,0,a.length,0,c);}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public static final String normalizePath(String path){  String normalized=path;  if (normalized.indexOf('\\') >= 0) {    normalized=normalized.replace('\\','/');  }  if (!normalized.startsWith("/")) {    normalized="/" + normalized;  }  while (true) {    int index=normalized.indexOf("//");    if (index < 0)     break;    normalized=normalized.substring(0,index) + normalized.substring(index + 1);  }  while (true) {    int index=normalized.indexOf("%20");    if (index < 0)     break;    normalized=normalized.substring(0,index) + " " + normalized.substring(index + 3);  }  while (true) {    int index=normalized.indexOf("/./");    if (index < 0)     break;    normalized=normalized.substring(0,index) + normalized.substring(index + 2);  }  while (true) {    int index=normalized.indexOf("/../");    if (index < 0)     break;    if (index == 0)     return (null);    int index2=normalized.lastIndexOf('/',index - 1);    normalized=normalized.substring(0,index2) + normalized.substring(index + 3);  }  return (normalized);}  }
class C{  private void verifyCreateRight(Entity entity){  LOG.debug("VERIFYING CREATE RIGHT FOR " + entity);}  }
class C{  public void populate(ResultSet data,int start) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static DestinationAddressAttribute createDestinationAddressAttribute(TransportAddress address){  DestinationAddressAttribute attribute=new DestinationAddressAttribute();  attribute.setAddress(address);  return attribute;}  }
class C{  public static boolean isCSSStringCharacter(char c){  return c >= 128 || ((STRING[c >> 5] & (1 << (c & 0x1F))) != 0);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private IntervalXYDataset createDataset1(){  TimeSeries series1=new TimeSeries("Series 1",Day.class);  series1.add(new Day(1,MonthConstants.MARCH,2002),12353.3);  series1.add(new Day(2,MonthConstants.MARCH,2002),13734.4);  series1.add(new Day(3,MonthConstants.MARCH,2002),14525.3);  series1.add(new Day(4,MonthConstants.MARCH,2002),13984.3);  series1.add(new Day(5,MonthConstants.MARCH,2002),12999.4);  series1.add(new Day(6,MonthConstants.MARCH,2002),14274.3);  series1.add(new Day(7,MonthConstants.MARCH,2002),15943.5);  series1.add(new Day(8,MonthConstants.MARCH,2002),14845.3);  series1.add(new Day(9,MonthConstants.MARCH,2002),14645.4);  series1.add(new Day(10,MonthConstants.MARCH,2002),16234.6);  series1.add(new Day(11,MonthConstants.MARCH,2002),17232.3);  series1.add(new Day(12,MonthConstants.MARCH,2002),14232.2);  series1.add(new Day(13,MonthConstants.MARCH,2002),13102.2);  series1.add(new Day(14,MonthConstants.MARCH,2002),14230.2);  series1.add(new Day(15,MonthConstants.MARCH,2002),11235.2);  TimeSeriesCollection collection=new TimeSeriesCollection(series1);  return collection;}  }
class C{  public void addWarning(int importance,String text,CSTNode context,SourceUnit source){  if (WarningMessage.isRelevant(importance,configuration.getWarningLevel())) {    addWarning(new WarningMessage(importance,text,context,source));  }}  }
class C{  public static Quantity fromValue(final long value){  return new Quantity(value);}  }
class C{  private void installObject(DBObject obj,HashMap<String,DBObject> map,boolean logUntranslatableCustomization){  ArrayList<String> allDependencies=obj.getDependencies();  Collections.reverse(allDependencies);  ArrayList<String> installableDependencies=new ArrayList<String>();  for (Iterator<String> it=allDependencies.iterator(); it.hasNext(); ) {    String dependency=it.next();    if (map.containsKey(dependency))     if (!m_trackingList.contains(dependency))     installableDependencies.add(dependency);  }  if (installableDependencies.size() == 1) {    if (!m_trackingList.contains(obj.getName().toUpperCase())) {      m_trackingList.add(obj.getName().toUpperCase());      if (obj.create(m_target)) {        m_counterAdd=new Integer(m_counterAdd.intValue() + 1);        if (logUntranslatableCustomization) {          if (!m_target.getVendor().equalsIgnoreCase(obj.getParent().getVendor())) {            if (obj.getCustomizationLevel() > s_parameters.CUSTOMNONE)             s_logger.log(Level.WARNING,"mustRewriteObject",new Object[]{m_objectType,obj.getName()});          }        }      }      m_totalAdd=new Integer(m_totalAdd.intValue() + 1);    }  } else {    for (Iterator<String> it=installableDependencies.iterator(); it.hasNext(); ) {      String dependency=it.next();      DBObject dependentObject=map.get(dependency);      if (dependentObject != null)       installObject(dependentObject,map,logUntranslatableCustomization);    }  }}  }
class C{  private void saveMetadata(){  Path f=backupPath.resolve(META_FILE);  try (BufferedWriter writer=Files.newBufferedWriter(f,CHARSET)){    writer.write(String.valueOf(number) + " " + String.valueOf(lastBackup));  } catch (  IOException|NumberFormatException ex) {    LOGGER.warning("Error writing backup meta file: " + ex);  }}  }
class C{  public void ask(BaseQuestion question){  if (!question.getPartOfConversation()) {    String result=get(initchat).asString();    System.out.println("*************************RESPONSE FROM INITCHAT: \n" + result + "\n");    JsonPath initChat=new JsonPath(result);    question.setClientId(initChat.get(SetupMethod.CLIENTID).toString());    question.setConversationId(initChat.get(SetupMethod.CONVERSATIONID).toString());  }  Response respQuest=RestAssured.given().header("X-SyncTimeout","2000").param(SetupMethod.CLIENTID,question.getClientId()).param(SetupMethod.CONVERSATIONID,question.getConversationId()).param("input",question.getText()).param("firstTime","false").get(getResponse).then().statusCode(200).extract().response();  JsonPath jp=new JsonPath(respQuest.asString());  BaseResponse response=new BaseResponse.Builder().responseText(jp.get(SetupMethod.WDSRESPONSE).toString()).restAssuredResp(respQuest).build();  question.setResponse(response);}  }
class C{  @Override public String toString(){  StringBuffer temp=new StringBuffer();  temp.append("\nFarthestFirst\n==============\n");  temp.append("\nCluster centroids:\n");  for (int i=0; i < m_NumClusters; i++) {    temp.append("\nCluster " + i + "\n\t");    for (int j=0; j < m_ClusterCentroids.numAttributes(); j++) {      if (m_ClusterCentroids.attribute(j).isNominal()) {        temp.append(" " + m_ClusterCentroids.attribute(j).value((int)m_ClusterCentroids.instance(i).value(j)));      } else {        temp.append(" " + m_ClusterCentroids.instance(i).value(j));      }    }  }  temp.append("\n\n");  return temp.toString();}  }
class C{  public StringConvert(){  this(true);}  }
class C{  private int keyColumnEnd(){  int offset=0;  for (int i=0; i < _columns.length; i++) {    if (offset == _keyStart + _keyLength) {      return i;    }    offset+=_columns[i].length();  }  if (offset == _keyStart + _keyLength) {    return _columns.length;  }  throw new IllegalStateException();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public void saveSession(){  board.saveSession();}  }
class C{  public CreateId(){  super(KEY);}  }
class C{  public GeolocSharing shareGeoloc(ContactId contact,Geoloc geoloc) throws RcsServiceNotRegisteredException, RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IGeolocSharing sharingIntf=mApi.shareGeoloc(contact,geoloc);    if (sharingIntf != null) {      return new GeolocSharing(sharingIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  static private String[] alphaMixed(){  return StringFunctions.combineStringArrays(StringFunctions.alphaLower,StringFunctions.alphaUpper);}  }
class C{  public static Event addEvent(String eventIdentifier,EventType eventType,TechnicalProduct tProd,DataService mgr) throws NonUniqueBusinessKeyException {  Event evt=new Event();  evt.setEventIdentifier(eventIdentifier);  evt.setEventType(eventType);  evt.setTechnicalProduct(tProd);  tProd.getEvents().add(evt);  mgr.persist(evt);  mgr.flush();  return evt;}  }
class C{  public Quaternion slerp(Quaternion q1,Quaternion q2,float t){  if (q1.x == q2.x && q1.y == q2.y && q1.z == q2.z && q1.w == q2.w) {    this.set(q1);    return this;  }  float result=(q1.x * q2.x) + (q1.y * q2.y) + (q1.z * q2.z)+ (q1.w * q2.w);  if (result < 0.0f) {    q2.x=-q2.x;    q2.y=-q2.y;    q2.z=-q2.z;    q2.w=-q2.w;    result=-result;  }  float scale0=1 - t;  float scale1=t;  if ((1 - result) > 0.1f) {    float theta=FastMath.acos(result);    float invSinTheta=1f / FastMath.sin(theta);    scale0=FastMath.sin((1 - t) * theta) * invSinTheta;    scale1=FastMath.sin((t * theta)) * invSinTheta;  }  this.x=(scale0 * q1.x) + (scale1 * q2.x);  this.y=(scale0 * q1.y) + (scale1 * q2.y);  this.z=(scale0 * q1.z) + (scale1 * q2.z);  this.w=(scale0 * q1.w) + (scale1 * q2.w);  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.FEATURE_TYPE__DEPRECATED:    return deprecated != DEPRECATED_EDEFAULT;case SGenPackage.FEATURE_TYPE__COMMENT:  return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);case SGenPackage.FEATURE_TYPE__PARAMETERS:return parameters != null && !parameters.isEmpty();case SGenPackage.FEATURE_TYPE__LIBRARY:return basicGetLibrary() != null;case SGenPackage.FEATURE_TYPE__OPTIONAL:return optional != OPTIONAL_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void fireSelection(OMGraphic omg,DrawingToolRequestor dtr,boolean isSelected){  Vector<SelectionListener> targets;synchronized (this) {    if (listeners == null) {      return;    }    targets=(java.util.Vector<SelectionListener>)listeners.clone();  }  SelectionEvent evt=new SelectionEvent(source,omg,dtr,isSelected);  for (int i=0; i < targets.size(); i++) {    SelectionListener target=targets.elementAt(i);    target.selectionNotification(evt);  }}  }
class C{  public void testPreparedStatementGetString(Connection connection) throws SQLException {  try (PreparedStatement preparedStatement=connection.prepareStatement(sql)){    try (ResultSet resultSet=preparedStatement.executeQuery()){      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00.000000",resultSet.getString(2));      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00.123000",resultSet.getString(2));      Assert.assertTrue(resultSet.next());      Assert.assertNull(resultSet.getString(2));      Assert.assertFalse(resultSet.next());    }   } }  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(this.titulo))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_TITULO,request.getLocale())));  if (StringUtils.isBlank(this.tipoValorAdministrativo)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_VALOR_ADMINISTRTIVO,request.getLocale())));  } else   if (this.tipoValorAdministrativo.equals("" + ValoracionSerieVO.VALOR_ADMINISTRATIVO_TEMPORAL)) {    if (StringUtils.isBlank(this.anosVigenciaAdministrativa))     errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_ADM,request.getLocale()))); else     if (!GenericValidator.isInt(this.anosVigenciaAdministrativa))     errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_ANIO,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_ADM,request.getLocale()))); else     if (GenericValidator.isInt(this.anosVigenciaAdministrativa) && Integer.parseInt(this.anosVigenciaAdministrativa) < 0) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_NEGATIVE_NUMBER,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_ADM,request.getLocale())));    }  } else   this.anosVigenciaAdministrativa=null;  if (StringUtils.isBlank(this.tipoValorLegal)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_VALOR_LEGAL,request.getLocale())));  } else   if (this.tipoValorLegal.equals("" + ValoracionSerieVO.VALOR_LEGAL_TEMPORAL)) {    if (StringUtils.isBlank(this.anosVigenciaLegal))     errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_LEGAL,request.getLocale()))); else     if (!GenericValidator.isInt(this.anosVigenciaLegal))     errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_ANIO,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_LEGAL,request.getLocale()))); else     if (GenericValidator.isInt(this.anosVigenciaLegal) && Integer.parseInt(this.anosVigenciaLegal) < 0) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_NEGATIVE_NUMBER,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_LEGAL,request.getLocale())));    } else     if (this.tipoValorAdministrativo.equals("" + ValoracionSerieVO.VALOR_ADMINISTRATIVO_TEMPORAL)) {      if (!StringUtils.isBlank(this.anosVigenciaAdministrativa) && GenericValidator.isInt(this.anosVigenciaAdministrativa)) {        int anosVigenciaLegal=Integer.parseInt(this.anosVigenciaLegal);        int anosVigenciaAdministrativa=Integer.parseInt(this.anosVigenciaAdministrativa);        if (anosVigenciaLegal < anosVigenciaAdministrativa) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_VALOR_DEBE_SER_MAYOR_QUE_VALOR,Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_LEGAL,request.getLocale()),Messages.getString(Constants.VALORACION_PERIODOVIGENCIA_ADM,request.getLocale())));        }      }    }  } else   this.anosVigenciaLegal=null;  if (this.tipoValorInformativo.equals("" + ValoracionSerieVO.VALOR_INFORMATIVO_EXISTE)) {    this.valorInformativo=null;    if (tipoValorCientifico.equals("" + ValoracionSerieVO.VALOR_CIENTIFICO_NO_EXISTE) && tipoValorTecnologico.equals("" + ValoracionSerieVO.VALOR_TECNOLOGICO_NO_EXISTE) && tipoValorCultural.equals("" + ValoracionSerieVO.VALOR_CULTURAL_NO_EXISTE)) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(ValoracionConstants.ERROR_VALORACION_VALORINFORMATIVO_SI));    } else {      if ((tipoValorCientifico != null) && tipoValorCientifico.equals("" + ValoracionSerieVO.VALOR_CIENTIFICO_EXISTE) && StringUtils.isBlank(valorCientifico))       errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.VALORACION_VALORCIENTIFICO,request.getLocale())));      if ((tipoValorTecnologico != null) && tipoValorTecnologico.equals("" + ValoracionSerieVO.VALOR_TECNOLOGICO_EXISTE) && StringUtils.isBlank(valorTecnologico))       errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.VALORACION_VALORTECNOLOGICO,request.getLocale())));      if ((tipoValorCultural != null) && tipoValorCultural.equals("" + ValoracionSerieVO.VALOR_CULTURAL_EXISTE) && StringUtils.isBlank(valorCultural))       errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.VALORACION_VALORCULTURAL,request.getLocale())));    }  } else {    this.tipoValorCientifico="" + ValoracionSerieVO.VALOR_CIENTIFICO_NO_EXISTE;    this.valorCientifico=null;    this.tipoValorTecnologico="" + ValoracionSerieVO.VALOR_TECNOLOGICO_NO_EXISTE;    this.valorTecnologico=null;    this.tipoValorCultural="" + ValoracionSerieVO.VALOR_CULTURAL_NO_EXISTE;    this.valorCultural=null;  }  if (StringUtils.isBlank(this.tipoRegimenAcceso)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.VALORACION_REGIMENACCESO,request.getLocale())));  } else   if (this.tipoRegimenAcceso.equals("" + ValoracionSerieVO.REGIMEN_ACCESO_RESTRINGIDO_TEMPORAL)) {    if (StringUtils.isBlank(this.anosRegimenAcceso))     errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_PERIODO_REGIMEN_ACCESO,request.getLocale()))); else     if (!GenericValidator.isInt(this.anosRegimenAcceso))     errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_ANIO,Messages.getString(ValoracionConstants.LABEL_VALORACION_PERIODO_REGIMEN_ACCESO,request.getLocale())));  } else   this.anosRegimenAcceso=null;  if (StringUtils.isBlank(this.valorDictamen)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ValoracionConstants.LABEL_VALORACION_VALORES_DICTAMEN,request.getLocale())));  } else   if ((this.tipoValorAdministrativo.equals("" + ValoracionSerieVO.VALOR_ADMINISTRATIVO_PERMANENTE) || this.tipoValorLegal.equals("" + ValoracionSerieVO.VALOR_LEGAL_PERMANENTE)) && !valorDictamen.equalsIgnoreCase("" + ValoracionSerieVO.VALOR_DICTAMEN_CONSERVACION_TOTAL))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(ValoracionConstants.ERROR_VALORACION_VALORDICTAMEN_NO_VALIDO));  if (errors.size() == 0)   validateLengthTextArea(request,errors);  validatePlazosValoracion(request,errors);  return errors;}  }
class C{  @Override public Object toBean(ResultSet rs,Class type) throws SQLException {  return this.convert.toBean(rs,type);}  }
class C{  public final int readInt() throws IOException {  mPosition+=4;  d.readFully(w,0,4);  return (w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff);}  }
class C{  public boolean isSubmitEventBean(){  return submitEventBean;}  }
class C{  public RunAutomaton(Automaton a,int maxInterval,boolean tableize){  this(a,maxInterval,tableize,Operations.DEFAULT_MAX_DETERMINIZED_STATES);}  }
class C{  public AppSize(int width,int height){  mWidth=width;  mHeight=height;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  listeners.add(listener);}  }
class C{  public final static char[] encodeToChar(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new char[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  char[] dArr=new char[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=CA[(i >>> 18) & 0x3f];    dArr[d++]=CA[(i >>> 12) & 0x3f];    dArr[d++]=CA[(i >>> 6) & 0x3f];    dArr[d++]=CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=CA[i >> 12];    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  private Result(final StructuredContent obj) throws IllegalArgumentException {  if (obj == null) {    throw new IllegalArgumentException("dom object cannot be null");  }  this.root=obj;  if (root.getParent() != null) {    root=root.getParent();  }}  }
class C{  @SuppressLint("NewApi") @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_webview);  mPullRefreshWebView=(PullToRefreshWebView)findViewById(R.id.pull_refresh_webview);  mWebView=mPullRefreshWebView.getRefreshableView();  mWebView.getSettings().setJavaScriptEnabled(true);  mWebView.setWebViewClient(new SampleWebViewClient());  mWebView.loadUrl("http://www.google.com");  ActionBarManager.initBackTitle(this,getActionBar(),this.getClass().getSimpleName());}  }
class C{  public static ComputeSystem queryRegisteredSystem(URI id,DbClient _dbClient,boolean isIdEmbeddedInURL){  ArgValidator.checkUri(id);  ComputeSystem system=_dbClient.queryObject(ComputeSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL);  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(system.getRegistrationStatus())) {    throw APIException.badRequests.resourceNotRegistered(ComputeSystem.class.getSimpleName(),id);  }  return system;}  }
class C{  public Object clone() throws CloneNotSupportedException {  return new ObjectVector(this);}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer("StunFailureEvent:\n\tMessage=");  buff.append(getMessage());  buff.append(" localAddr=").append(getLocalAddress());  return buff.toString();}  }
class C{  public ToStringBuilder append(final String fieldName,final double value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public PictureSizes computePictureSizes(){  List<Size> backCameraSizes=computeSizesForCamera(SettingsUtil.CAMERA_FACING_BACK);  List<Size> frontCameraSizes=computeSizesForCamera(SettingsUtil.CAMERA_FACING_FRONT);  Optional<SelectedVideoQualities> videoQualitiesBack=computeQualitiesForCamera(SettingsUtil.CAMERA_FACING_BACK);  Optional<SelectedVideoQualities> videoQualitiesFront=computeQualitiesForCamera(SettingsUtil.CAMERA_FACING_FRONT);  return new PictureSizes(backCameraSizes,frontCameraSizes,videoQualitiesBack,videoQualitiesFront);}  }
class C{  public void stateChanged(ChangeEvent e){  setButtons();}  }
class C{  public static String vmVersion(MonitoredVm vm) throws MonitorException {  StringMonitor ver=(StringMonitor)vm.findByName("java.property.java.vm.version");  return (ver == null) ? "Unknown" : ver.stringValue();}  }
class C{  void jimplify(cp_info constant_pool[],int this_class){  Code_attribute codeAttribute=method.locate_code_attribute();  Set<Instruction> handlerInstructions=new ArraySet();  Map<Instruction,SootClass> handlerInstructionToException=new HashMap<Instruction,SootClass>();  Map<Instruction,TypeStack> instructionToTypeStack;  Map<Instruction,TypeStack> instructionToPostTypeStack;{    buildInsnCFGfromBBCFG();{      for (int i=0; i < codeAttribute.exception_table_length; i++) {        Instruction startIns=codeAttribute.exception_table[i].start_inst;        Instruction endIns=codeAttribute.exception_table[i].end_inst;        Instruction handlerIns=codeAttribute.exception_table[i].handler_inst;        handlerInstructions.add(handlerIns);{          int catchType=codeAttribute.exception_table[i].catch_type;          SootClass exception;          if (catchType != 0) {            CONSTANT_Class_info classinfo=(CONSTANT_Class_info)constant_pool[catchType];            String name=((CONSTANT_Utf8_info)(constant_pool[classinfo.name_index])).convert();            name=name.replace('/','.');            exception=cm.getSootClass(name);          } else           exception=cm.getSootClass("java.lang.Throwable");          handlerInstructionToException.put(handlerIns,exception);        }        if (startIns == endIns)         throw new RuntimeException("Empty catch range for exception handler");        Instruction ins=startIns;        for (; ; ) {          Instruction[] succs=ins.succs;          Instruction[] newsuccs=new Instruction[succs.length + 1];          System.arraycopy(succs,0,newsuccs,0,succs.length);          newsuccs[succs.length]=handlerIns;          ins.succs=newsuccs;          ins=ins.next;          if (ins == endIns || ins == null)           break;        }      }    }  }  Set<Instruction> reachableInstructions=new HashSet<Instruction>();{    LinkedList<Instruction> instructionsToVisit=new LinkedList<Instruction>();    reachableInstructions.add(firstInstruction);    instructionsToVisit.addLast(firstInstruction);    while (!instructionsToVisit.isEmpty()) {      Instruction ins=instructionsToVisit.removeFirst();      Instruction[] succs=ins.succs;      for (      Instruction succ : succs) {        if (!reachableInstructions.contains(succ)) {          reachableInstructions.add(succ);          instructionsToVisit.addLast(succ);        }      }    }  }{    instructionToTypeStack=new HashMap<Instruction,TypeStack>();    instructionToPostTypeStack=new HashMap<Instruction,TypeStack>();    Set<Instruction> visitedInstructions=new HashSet<Instruction>();    List<Instruction> changedInstructions=new ArrayList<Instruction>();    TypeStack initialTypeStack;{      initialTypeStack=TypeStack.v();    }{      instructionToTypeStack.put(firstInstruction,initialTypeStack);      visitedInstructions.add(firstInstruction);      changedInstructions.add(firstInstruction);    }{      while (!changedInstructions.isEmpty()) {        Instruction ins=changedInstructions.get(0);        changedInstructions.remove(0);        OutFlow ret=processFlow(ins,instructionToTypeStack.get(ins),constant_pool);        instructionToPostTypeStack.put(ins,ret.typeStack);        Instruction[] successors=ins.succs;        for (        Instruction s : successors) {          if (!visitedInstructions.contains(s)) {            if (handlerInstructions.contains(s)) {              TypeStack exceptionTypeStack=(TypeStack.v()).push(RefType.v(handlerInstructionToException.get(s).getName()));              instructionToTypeStack.put(s,exceptionTypeStack);            } else {              instructionToTypeStack.put(s,ret.typeStack);            }            visitedInstructions.add(s);            changedInstructions.add(s);          } else {            TypeStack newTypeStack, oldTypeStack=instructionToTypeStack.get(s);            if (handlerInstructions.contains(s)) {              TypeStack exceptionTypeStack=(TypeStack.v()).push(RefType.v(handlerInstructionToException.get(s).getName()));              newTypeStack=exceptionTypeStack;            } else {              try {                newTypeStack=ret.typeStack.merge(oldTypeStack);              } catch (              RuntimeException re) {                G.v().out.println("Considering " + s);                throw re;              }            }            if (!newTypeStack.equals(oldTypeStack)) {              changedInstructions.add(s);            }            instructionToTypeStack.put(s,newTypeStack);          }        }      }    }  }{    Instruction ins=firstInstruction;    while (ins != null) {      TypeStack typeStack=instructionToTypeStack.get(ins);      ins=ins.next;    }  }{    BasicBlock b=cfg;    while (b != null) {      Instruction ins=b.head;      b.statements=new ArrayList<Stmt>();      List<Stmt> blockStatements=b.statements;      for (; ; ) {        List<Stmt> statementsForIns=new ArrayList<Stmt>();        if (reachableInstructions.contains(ins))         generateJimple(ins,instructionToTypeStack.get(ins),instructionToPostTypeStack.get(ins),constant_pool,statementsForIns,b); else         statementsForIns.add(Jimple.v().newNopStmt());        if (!statementsForIns.isEmpty()) {          for (int i=0; i < statementsForIns.size(); i++) {            units.add(statementsForIns.get(i));            blockStatements.add(statementsForIns.get(i));          }          instructionToFirstStmt.put(ins,statementsForIns.get(0));          instructionToLastStmt.put(ins,statementsForIns.get(statementsForIns.size() - 1));        }        if (ins == b.tail)         break;        ins=ins.next;      }      b=b.next;    }  }  jimpleTargetFixup();{    Map<Stmt,Stmt> targetToHandler=new HashMap<Stmt,Stmt>();    for (int i=0; i < codeAttribute.exception_table_length; i++) {      Instruction startIns=codeAttribute.exception_table[i].start_inst;      Instruction endIns=codeAttribute.exception_table[i].end_inst;      Instruction targetIns=codeAttribute.exception_table[i].handler_inst;      if (!instructionToFirstStmt.containsKey(startIns) || (endIns != null && (!instructionToLastStmt.containsKey(endIns)))) {        throw new RuntimeException("Exception range does not coincide with jimple instructions");      }      if (!instructionToFirstStmt.containsKey(targetIns)) {        throw new RuntimeException("Exception handler does not coincide with jimple instruction");      }      SootClass exception;{        int catchType=codeAttribute.exception_table[i].catch_type;        if (catchType != 0) {          CONSTANT_Class_info classinfo=(CONSTANT_Class_info)constant_pool[catchType];          String name=((CONSTANT_Utf8_info)(constant_pool[classinfo.name_index])).convert();          name=name.replace('/','.');          exception=cm.getSootClass(name);        } else         exception=cm.getSootClass("java.lang.Throwable");      }      Stmt newTarget;{        Stmt firstTargetStmt=instructionToFirstStmt.get(targetIns);        if (targetToHandler.containsKey(firstTargetStmt))         newTarget=targetToHandler.get(firstTargetStmt); else {          Local local=Util.v().getLocalCreatingIfNecessary(listBody,"$stack0",UnknownType.v());          newTarget=Jimple.v().newIdentityStmt(local,Jimple.v().newCaughtExceptionRef());          ((PatchingChain)units).insertBeforeNoRedirect(newTarget,firstTargetStmt);          targetToHandler.put(firstTargetStmt,newTarget);          if (units.getFirst() != newTarget) {            Unit prev=(Unit)units.getPredOf(newTarget);            if (prev != null && prev.fallsThrough())             units.insertAfter(Jimple.v().newGotoStmt(firstTargetStmt),prev);          }        }      }{        Stmt firstStmt=instructionToFirstStmt.get(startIns);        Stmt afterEndStmt;        if (endIns == null) {          afterEndStmt=(Stmt)units.getLast();        } else {          afterEndStmt=instructionToLastStmt.get(endIns);          IdentityStmt catchStart=(IdentityStmt)targetToHandler.get(afterEndStmt);          if (catchStart != null) {            if (catchStart != units.getPredOf(afterEndStmt)) {              throw new IllegalStateException("Assertion failure: catchStart != pred of afterEndStmt");            }            afterEndStmt=catchStart;          }        }        Trap trap=Jimple.v().newTrap(exception,firstStmt,afterEndStmt,newTarget);        listBody.getTraps().add(trap);      }    }  }  if (Options.v().keep_line_number()) {    HashMap<Stmt,Tag> stmtstags=new HashMap<Stmt,Tag>();    LinkedList<Stmt> startstmts=new LinkedList<Stmt>();    attribute_info[] attrs=codeAttribute.attributes;    for (    attribute_info element : attrs) {      if (element instanceof LineNumberTable_attribute) {        LineNumberTable_attribute lntattr=(LineNumberTable_attribute)element;        for (        line_number_table_entry element0 : lntattr.line_number_table) {          Stmt start_stmt=instructionToFirstStmt.get(element0.start_inst);          if (start_stmt != null) {            LineNumberTag lntag=new LineNumberTag(element0.line_number);            stmtstags.put(start_stmt,lntag);            startstmts.add(start_stmt);          }        }      }    }    for (Iterator<Stmt> stmtIt=new ArrayList<Stmt>(stmtstags.keySet()).iterator(); stmtIt.hasNext(); ) {      final Stmt stmt=stmtIt.next();      Stmt pred=stmt;      Tag tag=stmtstags.get(stmt);      while (true) {        pred=(Stmt)units.getPredOf(pred);        if (pred == null)         break;        if (!(pred instanceof IdentityStmt))         break;        stmtstags.put(pred,tag);        pred.addTag(tag);      }    }    for (int i=0; i < startstmts.size(); i++) {      Stmt stmt=startstmts.get(i);      Tag tag=stmtstags.get(stmt);      stmt.addTag(tag);      stmt=(Stmt)units.getSuccOf(stmt);      while (stmt != null && !stmtstags.containsKey(stmt)) {        stmt.addTag(tag);        stmt=(Stmt)units.getSuccOf(stmt);      }    }  }  Code_attribute ca=method.locate_code_attribute();  LocalVariableTable_attribute la=ca.findLocalVariableTable();  if (la != null) {    for (    local_variable_table_entry entry : la.local_variable_table) {      if (!(constant_pool[entry.name_index] instanceof CONSTANT_Utf8_info)) {        throw new RuntimeException("What? A local variable table name_index isn't a UTF8 entry?");      }      String name=((CONSTANT_Utf8_info)(constant_pool[entry.name_index])).convert();      Stmt startStmt=null;      Stmt endStmt=null;      if (entry.start_inst == firstInstruction && entry.end_inst == null) {        startStmt=(Stmt)units.getFirst();      } else {        startStmt=instructionToFirstStmt.get(entry.start_inst);        if (entry.end_inst != null) {          endStmt=instructionToFirstStmt.get(entry.end_inst);        }      }      soot.LocalVariable lv=new LocalVariable(name,entry.index,startStmt,endStmt,((CONSTANT_Utf8_info)constant_pool[entry.descriptor_index]).convert());      listBody.getLocalVariables().add(lv);    }  }}  }
class C{  public CMiscPanel(final ZyGraphViewSettings settings,final boolean isCallgraph){  super(new GridLayout(3 + (isCallgraph ? 1 : 0),1));  Preconditions.checkNotNull(settings,"IE01590: Settings argument can not be null");  setBorder(new TitledBorder("Miscellaneous"));  CSettingsPanelBuilder.addComboBox(this,gradientBackgroundBox,"Gradient Background" + ":","Toggles between gradient backgrounds and solid white backgrounds in graph windows.",settings.getDisplaySettings().getGradientBackground());  CSettingsPanelBuilder.addComboBox(this,layoutAnimationBox,"Layout Animation" + ":","If enabled, a small layout animation is shown when graphs are layouted.",settings.getLayoutSettings().getAnimateLayout());  CSettingsPanelBuilder.addDoubleSlider(this,m_tfAnimationSpeed,"Animation Speed" + ":","Specifies the animation speed if layout operations are animated.",(25 - settings.getDisplaySettings().getAnimationSpeed()) / 5);  if (isCallgraph) {    CSettingsPanelBuilder.addComboBox(this,functionInformationBox,"Function Information" + ":","If enabled, statistical information about functions is shown in function nodes.",settings.getDisplaySettings().getFunctionNodeInformation());  }}  }
class C{  @Override public void doInit() throws ResourceException {  super.doInit();  if (isExisting()) {    String flParam=getSolrRequest().getParams().get(CommonParams.FL);    if (null != flParam) {      String[] fields=flParam.trim().split("[,\\s]+");      if (fields.length > 0) {        requestedFields=new LinkedHashSet<>();        for (        String field : fields) {          if (!field.trim().isEmpty()) {            requestedFields.add(field.trim());          }        }      }    }    showDefaults=getSolrRequest().getParams().getBool(SHOW_DEFAULTS,false);  }}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public static Optional<Notification> tryFind(@Nonnull final Iterable<Notification> notifications,final long id){  final com.google.common.base.Optional<Notification> result=Iterables.tryFind(notifications,null);  if (result.isPresent()) {    return Optional.of(result.get());  }  return Optional.empty();}  }
class C{  @Override public void followAgent(final IAgent a){}  }
class C{  private boolean allowAutomaticLogPopup(){  Boolean allowed=TetradLogger.getInstance().isAutomaticLogDisplayEnabled();  if (allowed == null) {    String message="<html>Whenever Tetrad's logging features are active any generated log <br>" + "output will be automatically display in Tetrad's log display. Would you like Tetrad<br>" + "to continue to automatically open the log display window whenever there is logging output?</html>";    int option=JOptionPane.showConfirmDialog(this,message,"Automatic Logging",JOptionPane.YES_NO_OPTION);    if (option == JOptionPane.NO_OPTION) {      JOptionPane.showMessageDialog(this,"This feature can be enabled later by going to Logging>Setup Logging.");    }    TetradLogger.getInstance().setAutomaticLogDisplayEnabled(option == JOptionPane.YES_OPTION);    return true;  }  return allowed;}  }
class C{  public MergeManyValuesTest(String name){  super(name);}  }
class C{  public synchronized static void terminateCore() throws PayloadException, NetworkException, ContactManagerException {  if (sInstance == null) {    return;  }  sInstance.stopCore();  sInstance=null;}  }
class C{  public boolean isInterface(){  return (accessFlags & AccessFlag.INTERFACE) != 0;}  }
class C{  public void score(int s){  score=s;}  }
class C{  public static double[] fill(int m,double c){  double[] o=new double[m];  for (int i=0; i < o.length; i++)   o[i]=c;  return o;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof ApkPermissionGroup && this.getName().equals(((ApkPermissionGroup)o).getName()) && this.descriptions.size() == ((ApkPermissionGroup)o).descriptions.size();}  }
class C{  private void sendSetConfigMessage(String key,String value){  log.info("sent SetConfig message with key = " + key + " and value = "+ value);  coordinatorStreamSystemProducer.send(new SetConfig(CoordinatorStreamWriter.SOURCE,key,value));}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(SELECTAXISVISIBILITY)) {    CSSClass cls=new CSSClass(this,SELECTAXISVISIBILITY);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,0.1);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_BLUE_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(SAV_BORDER)) {    CSSClass cls=new CSSClass(this,SAV_BORDER);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_GREY_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) * .5);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(SAV_BUTTON)) {    CSSClass cls=new CSSClass(this,SAV_BUTTON);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,0.01);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_GREY_VALUE);    cls.setStatement(SVGConstants.CSS_CURSOR_PROPERTY,SVGConstants.CSS_POINTER_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(SAV_CROSS)) {    CSSClass cls=new CSSClass(this,SAV_CROSS);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_BLACK_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) * .75);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public DisplayComposer with(){  return new DisplayComposer();}  }
class C{  public MrcTurnout(int number,MrcTrafficController tc,String p){  super(p + "T" + number);  _number=number;  if (_number < NmraPacket.accIdLowLimit || _number > NmraPacket.accIdHighLimit) {    throw new IllegalArgumentException("Turnout value: " + _number + " not in the range "+ NmraPacket.accIdLowLimit+ " to "+ NmraPacket.accIdHighLimit);  }  this.tc=tc;  this.prefix=p + "T";  tc.addTrafficListener(MrcInterface.TURNOUTS,this);}  }
class C{  public String productSummary(MProduct product,boolean isLeaf){  MUOM uom=MUOM.get(getCtx(),product.getC_UOM_ID());  String value=product.getValue();  String name=product.get_Translation(MProduct.COLUMNNAME_Name);  StringBuffer sb=new StringBuffer(value);  if (name != null && !value.equals(name))   sb.append("_").append(product.getName());  sb.append(" [").append(uom.get_Translation(MUOM.COLUMNNAME_UOMSymbol)).append("]");  return sb.toString();}  }
class C{  private void fillPicks(){  String sql="SELECT M_PriceList_Version.M_PriceList_Version_ID," + " M_PriceList_Version.Name || ' (' || c.Iso_Code || ')' AS ValueName " + "FROM M_PriceList_Version, M_PriceList pl, C_Currency c "+ "WHERE M_PriceList_Version.M_PriceList_ID=pl.M_PriceList_ID"+ " AND pl.C_Currency_ID=c.C_Currency_ID"+ " AND M_PriceList_Version.IsActive='Y' AND pl.IsActive='Y'";  sql=MRole.getDefault().addAccessSQL(sql,"M_PriceList_Version",true,false) + " ORDER BY M_PriceList_Version.Name";  try {    pickPriceList.appendItem("",0);    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair kn=new KeyNamePair(rs.getInt(1),rs.getString(2));      pickPriceList.appendItem(kn.getName(),kn.getKey());    }    rs.close();    pstmt.close();    sql="SELECT M_Warehouse_ID, Value || ' - ' || Name AS ValueName " + "FROM M_Warehouse " + "WHERE IsActive='Y'";    sql=MRole.getDefault().addAccessSQL(sql,"M_Warehouse",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO) + " ORDER BY Value";    pickWarehouse.appendItem("",0);    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair kn=new KeyNamePair(rs.getInt("M_Warehouse_ID"),rs.getString("ValueName"));      pickWarehouse.appendItem(kn.getName(),kn.getKey());    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public ThreadSafeClientConnManager(HttpParams params,SchemeRegistry schreg){  if (params == null) {    throw new IllegalArgumentException("HTTP parameters may not be null");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.connectionPool=createConnectionPool(params);}  }
class C{  public static PointerIcon createCustomIcon(Bitmap bitmap,float hotSpotX,float hotSpotY){  if (bitmap == null) {    throw new IllegalArgumentException("bitmap must not be null");  }  validateHotSpot(bitmap,hotSpotX,hotSpotY);  PointerIcon icon=new PointerIcon(STYLE_CUSTOM);  icon.mBitmap=bitmap;  icon.mHotSpotX=hotSpotX;  icon.mHotSpotY=hotSpotY;  return icon;}  }
class C{  private int updateSeq(int seq){  long udelta=seq - maxSeq;  if (probation > 0) {    if (seq == maxSeq + 1) {      probation--;      maxSeq=seq;      if (probation == 0) {        initSeq(seq);        received++;        return 1;      }    } else {      probation=MIN_SEQUENCIAL - 1;      maxSeq=seq;      return 1;    }    return 0;  } else   if (udelta < MAX_DROPOUT) {    if (seq < maxSeq && (udelta >= (MAX_MISORDER * -1))) {      received++;      return 1;    }    if (seq < maxSeq) {      cycles++;    }    maxSeq=seq;  } else   if (udelta <= RTP_SEQ_MOD - MAX_MISORDER) {    if (seq == badSeq) {      initSeq(seq);    } else {      badSeq=(seq + 1) & (RTP_SEQ_MOD - 1);      return 0;    }  } else {  }  received++;  return 1;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public PacketOutputStream(OutputStream outputStream,boolean logQuery,int maxQuerySizeToLog){  this.outputStream=outputStream;  buffer=firstBuffer=ByteBuffer.allocate(BUFFER_DEFAULT_SIZE).order(ByteOrder.LITTLE_ENDIAN);  useCompression=false;  buffer.position(4);  this.logQuery=logQuery;  this.maxQuerySizeToLog=maxQuerySizeToLog;}  }
class C{  public String toString(){  String prefix=Functions.getAttributeName(type) + " = ";  if (type == CKA_CLASS) {    return prefix + Functions.getObjectClassName(getLong());  } else   if (type == CKA_KEY_TYPE) {    return prefix + Functions.getKeyName(getLong());  } else {    String s;    if (pValue instanceof char[]) {      s=new String((char[])pValue);    } else     if (pValue instanceof byte[]) {      s=Functions.toHexString((byte[])pValue);    } else {      s=String.valueOf(pValue);    }    return prefix + s;  }}  }
class C{  private void addAliasID(AliasID id,Alias alias){  if (id.isValid()) {    try {switch (id.getType()) {case ESN:        String esn=((Esn)id).getEsn();      if (esn != null) {        if (esn.contains(WILDCARD)) {          mESNWildcards.add(new WildcardID(esn));          Collections.sort(mESNWildcards);        }        mESN.put(esn,alias);      }    break;case Fleetsync:  String fleetsync=((FleetsyncID)id).getIdent();if (fleetsync != null) {  if (fleetsync.contains(WILDCARD)) {    mFleetsyncWildcards.add(new WildcardID(fleetsync));    Collections.sort(mFleetsyncWildcards);  }  mFleetsync.put(fleetsync,alias);}break;case LoJack:mLoJack.put((LoJackFunctionAndID)id,alias);break;case MDC1200:String mdc=((MDC1200ID)id).getIdent();if (mdc != null) {if (mdc.contains(WILDCARD)) {mMDC1200Wildcards.add(new WildcardID(mdc));Collections.sort(mMDC1200Wildcards);}mMDC1200.put(mdc,alias);}break;case MPT1327:String mpt=((MPT1327ID)id).getIdent();if (mpt != null) {if (mpt.contains(WILDCARD)) {mMPT1327Wildcards.add(new WildcardID(mpt));Collections.sort(mMPT1327Wildcards);}mMPT1327.put(mpt,alias);}break;case MIN:String min=((Min)id).getMin();if (min != null) {if (min.contains(WILDCARD)) {mMobileIDWildcards.add(new WildcardID(min));Collections.sort(mMobileIDWildcards);}mMobileID.put(min,alias);}break;case LTRNetUID:mUniqueID.put(((UniqueID)id).getUid(),alias);break;case Site:String siteID=((SiteID)id).getSite();if (siteID != null) {if (siteID.contains(WILDCARD)) {mSiteWildcards.add(new WildcardID(siteID));Collections.sort(mSiteWildcards);}mSiteID.put(siteID,alias);}break;case Status:mStatus.put(((StatusID)id).getStatus(),alias);break;case Talkgroup:String tgid=((TalkgroupID)id).getTalkgroup();if (tgid != null) {if (tgid.contains(WILDCARD)) {mTalkgroupWildcards.add(new WildcardID(tgid));Collections.sort(mTalkgroupWildcards);}mTalkgroup.put(tgid,alias);}break;case NonRecordable:case Priority:break;default :mLog.warn("Unrecognized Alias ID Type:" + id.getType().name());break;}} catch (Exception e) {mLog.error("Couldn't add alias ID " + id + " for alias "+ alias);}}}  }
class C{  public void addWorldObject(Node node){  world_object_group.addChild(node);}  }
class C{  public Node removeUncompletedCorrelationId(String id){  NodePlaceholder placeholder=uncompletedCorrelationIdsNodeMap.remove(id);  if (placeholder != null) {    return placeholder.getNode();  }  return null;}  }
class C{  public static void stopServer(){  try {    Iterator iter=cache.getCacheServers().iterator();    if (iter.hasNext()) {      CacheServer server=(CacheServer)iter.next();      server.stop();    }  } catch (  Exception e) {    fail("failed while stopServer()" + e);  }}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public AggregateApplicationBuilder headless(boolean headless){  this.headless=headless;  return this;}  }
class C{  public static boolean isTemplate(PageContext pc,PageSource ps,boolean defaultValue){  try {    return !(ps.loadPage(pc,false) instanceof CIPage);  } catch (  PageException e) {    e.printStackTrace();    return defaultValue;  }}  }
class C{  @Override public void annotationChanged(AnnotationChangeEvent event){  this.lastEvent=event;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node childNode;  NodeList childNodes;  int nodeType;  String childName;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childNodes=employeeNode.getChildNodes();  for (int indexN1006C=0; indexN1006C < childNodes.getLength(); indexN1006C++) {    childNode=(Node)childNodes.item(indexN1006C);    nodeType=(int)childNode.getNodeType();    childName=childNode.getNodeName();    if (equals(1,nodeType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);    }  }  assertEqualsAutoCase("element","elementNames",expected,actual);}  }
class C{  private void parseParam(Node parent) throws JasperException {  if (!reader.matches("<jsp:param")) {    err.jspError(reader.mark(),"jsp.error.paramexpected");  }  Attributes attrs=parseAttributes();  reader.skipSpaces();  Node paramActionNode=new Node.ParamAction(attrs,start,parent);  parseEmptyBody(paramActionNode,"jsp:param");  reader.skipSpaces();}  }
class C{  private List<DiffEntry> calculateCommitDiffs(Git git,RevCommit first,RevCommit last) throws IOException, GitAPIException {  AbstractTreeIterator oldTreeParser=prepareTreeParser(first);  AbstractTreeIterator newTreeParser=prepareTreeParser(last);  return git.diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();}  }
class C{  public void addCertStore(CertStore store){  if (store == null) {    return;  }  if (certStores == null) {    certStores=new ArrayList<CertStore>();  }  certStores.add(store);}  }
class C{  public boolean isCutOff(List<Action> result){  return 1 == result.size() && CutOffIndicatorAction.CUT_OFF.equals(result.get(0));}  }
class C{  public void moveExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idClasificador=request.getParameter("idClasificador");  moveCodeLogic(mappings,form,request,response,idClasificador);}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public boolean rename(String name){  if (name == null || name.length() <= 0)   throw new NullPointerException("The passed name is invalid, have you checked its validity?"); else   if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return false;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return false;  } else   if (hasRenamingStarted) {    Log.i("Device " + this.name + ": Device is in the middle of another renaming request.");    return false;  }  renamingRetries=MAX_RENAMING_RETRIES_NUMBER;  hasRenamingStarted=true;  return sendRenamingRequest(name);}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entrySet(){  return super.entrySet();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (factors == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new IllegalStateException();  }}  }
class C{  public JavaCompletionProposal(String replacementString,int replacementOffset,int replacementLength,Image image,StyledString displayString,int relevance,boolean inJavadoc,JavaContentAssistInvocationContext invocationContext){  super(invocationContext);  Assert.isNotNull(replacementString);  Assert.isTrue(replacementOffset >= 0);  Assert.isTrue(replacementLength >= 0);  setReplacementString(replacementString);  setReplacementOffset(replacementOffset);  setReplacementLength(replacementLength);  setImage(image);  setStyledDisplayString(displayString == null ? new StyledString(replacementString) : displayString);  setRelevance(relevance);  setCursorPosition(replacementString.length());  setInJavadoc(inJavadoc);  setSortString(displayString == null ? replacementString : displayString.getString());}  }
class C{  private static boolean isJUnitTestClass(final Class<?> c){  if (c.getSuperclass() != null && junit.framework.TestCase.class.equals(c.getSuperclass())) {    return true;  } else {    for (    final Method method : c.getDeclaredMethods()) {      if (method.getAnnotation(org.junit.Test.class) != null) {        return true;      }    }    return false;  }}  }
class C{  public static Font create(String lookup){  if (lookup.startsWith("native:")) {    return createTrueTypeFont(lookup,lookup);  }  Object n=Display.impl.loadNativeFont(lookup);  if (n == null) {    return null;  }  return new Font(n);}  }
class C{  public OtherName(DerValue derValue) throws IOException {  DerInputStream in=derValue.toDerInputStream();  oid=in.getOID();  DerValue val=in.getDerValue();  nameValue=val.toByteArray();  gni=getGNI(oid,nameValue);  if (gni != null) {    name=gni.toString();  } else {    name="Unrecognized ObjectIdentifier: " + oid.toString();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:14.395 -0500",hash_original_method="4B57BC9609218FF4FD5DA8FDF96C43D9",hash_generated_method="3C0469096FC52EF9F5C968AFC3A90C3D") public float estimateY(float time){  return estimate(time,yCoeff);}  }
class C{  static public String toHex(char c){  byte hi=(byte)(c >>> 8);  byte lo=(byte)(c & 0xff);  return toHex(hi) + toHex(lo);}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public Date next(){  if (isValid(month,day + 1,year))   return new Date(month,day + 1,year); else   if (isValid(month + 1,1,year))   return new Date(month + 1,1,year); else   return new Date(1,1,year + 1);}  }
class C{  public static <T>TStream<T> rateMeter(TStream<T> stream){  return stream.pipe(new RateMeter<T>());}  }
class C{  private void classFileEpilogue(){  mv.visitMaxs(0,0);  mv.visitEnd();}  }
class C{  public static void ensureTempDirectoryExists() throws IOException {  String tmpDirectoryPath=System.getProperty("java.io.tmpdir");  ensureDirectoryExists(tmpDirectoryPath);}  }
class C{  public Builder updateExtension(Extension extension){  extensions.add(extension);  return this;}  }
class C{  public static void deleteSharedPreferenceByPartialKey(Context context,String keyStartWith){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    Map<String,?> keys=settings.getAll();    SharedPreferences.Editor editor=settings.edit();    for (    Map.Entry<String,?> entry : keys.entrySet()) {      if (entry.getKey().startsWith(keyStartWith)) {        editor.remove(entry.getKey());      }    }    editor.apply();  } catch (  Exception e) {  }}  }
class C{  public Analyzer add(String name,NondominatedPopulation result){  List<NondominatedPopulation> list=data.get(name);  if (list == null) {    list=new ArrayList<NondominatedPopulation>();    data.put(name,list);  }  list.add(result);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isEditable(){  return m_textArea.isEditable();}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(Doc.NO_CURRENCY);  MMatchPO matchPO=(MMatchPO)getPO();  setDateDoc(matchPO.getDateTrx());  m_M_AttributeSetInstance_ID=matchPO.getM_AttributeSetInstance_ID();  setQty(matchPO.getQty());  m_C_OrderLine_ID=matchPO.getC_OrderLine_ID();  m_oLine=new MOrderLine(getCtx(),m_C_OrderLine_ID,getTrxName());  m_M_InOutLine_ID=matchPO.getM_InOutLine_ID();  m_ioLine=new MInOutLine(getCtx(),m_M_InOutLine_ID,getTrxName());  m_C_InvoiceLine_ID=matchPO.getC_InvoiceLine_ID();  m_pc=new ProductCost(Env.getCtx(),getM_Product_ID(),m_M_AttributeSetInstance_ID,getTrxName());  m_pc.setQty(getQty());  return null;}  }
class C{  @RequestMapping(value="/topics/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Void> deleteTopic(@PathVariable Long id){  log.debug("REST request to delete Topic : {}",id);  topicRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("topic",id.toString())).build();}  }
class C{  public static FileChannel newFileChannel(Object stream,FileDescriptor fd,int mode){  return new FileChannelImpl(stream,fd,mode);}  }
class C{  public BasePermissionCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  @ReactMethod public void show(ReadableMap gameRequestContentMap,Promise promise){  if (getCurrentActivity() != null) {    GameRequestDialog gameRequestDialog=new GameRequestDialog(getCurrentActivity());    GameRequestContent gameRequestContent=Utility.buildGameRequestContent(gameRequestContentMap);    gameRequestDialog.registerCallback(getCallbackManager(),new GameRequestDialogCallback(promise));    gameRequestDialog.show(gameRequestContent);  } else {    promise.reject("No current activity.");  }}  }
class C{  Data(int version,Data old){  this.version=version;  if (old != null) {    this.x=old.x;    this.y=old.y;  }}  }
class C{  public void addHobby(Hobby hobby){  getHobbies().add(hobby);}  }
class C{  public CertificateExtensions(DerInputStream in) throws IOException {  init(in);}  }
class C{  private void applyPattern(String pattern,boolean localized){  char zeroDigit=PATTERN_ZERO_DIGIT;  char groupingSeparator=PATTERN_GROUPING_SEPARATOR;  char decimalSeparator=PATTERN_DECIMAL_SEPARATOR;  char percent=PATTERN_PERCENT;  char perMill=PATTERN_PER_MILLE;  char digit=PATTERN_DIGIT;  char separator=PATTERN_SEPARATOR;  String exponent=PATTERN_EXPONENT;  char minus=PATTERN_MINUS;  if (localized) {    zeroDigit=symbols.getZeroDigit();    groupingSeparator=symbols.getGroupingSeparator();    decimalSeparator=symbols.getDecimalSeparator();    percent=symbols.getPercent();    perMill=symbols.getPerMill();    digit=symbols.getDigit();    separator=symbols.getPatternSeparator();    exponent=symbols.getExponentSeparator();    minus=symbols.getMinusSign();  }  boolean gotNegative=false;  decimalSeparatorAlwaysShown=false;  isCurrencyFormat=false;  useExponentialNotation=false;  int phaseOneStart=0;  int phaseOneLength=0;  int start=0;  for (int j=1; j >= 0 && start < pattern.length(); --j) {    boolean inQuote=false;    StringBuffer prefix=new StringBuffer();    StringBuffer suffix=new StringBuffer();    int decimalPos=-1;    int multiplier=1;    int digitLeftCount=0, zeroDigitCount=0, digitRightCount=0;    byte groupingCount=-1;    int phase=0;    StringBuffer affix=prefix;    for (int pos=start; pos < pattern.length(); ++pos) {      char ch=pattern.charAt(pos);switch (phase) {case 0:case 2:        if (inQuote) {          if (ch == QUOTE) {            if ((pos + 1) < pattern.length() && pattern.charAt(pos + 1) == QUOTE) {              ++pos;              affix.append("''");            } else {              inQuote=false;            }            continue;          }        } else {          if (ch == digit || ch == zeroDigit || ch == groupingSeparator || ch == decimalSeparator) {            phase=1;            if (j == 1) {              phaseOneStart=pos;            }            --pos;            continue;          } else           if (ch == CURRENCY_SIGN) {            boolean doubled=(pos + 1) < pattern.length() && pattern.charAt(pos + 1) == CURRENCY_SIGN;            if (doubled) {              ++pos;            }            isCurrencyFormat=true;            affix.append(doubled ? "'\u00A4\u00A4" : "'\u00A4");            continue;          } else           if (ch == QUOTE) {            if (ch == QUOTE) {              if ((pos + 1) < pattern.length() && pattern.charAt(pos + 1) == QUOTE) {                ++pos;                affix.append("''");              } else {                inQuote=true;              }              continue;            }          } else           if (ch == separator) {            if (phase == 0 || j == 0) {              throw new IllegalArgumentException("Unquoted special character '" + ch + "' in pattern \""+ pattern+ '"');            }            start=pos + 1;            pos=pattern.length();            continue;          } else           if (ch == percent) {            if (multiplier != 1) {              throw new IllegalArgumentException("Too many percent/per mille characters in pattern \"" + pattern + '"');            }            multiplier=100;            affix.append("'%");            continue;          } else           if (ch == perMill) {            if (multiplier != 1) {              throw new IllegalArgumentException("Too many percent/per mille characters in pattern \"" + pattern + '"');            }            multiplier=1000;            affix.append("'\u2030");            continue;          } else           if (ch == minus) {            affix.append("'-");            continue;          }        }      affix.append(ch);    break;case 1:  if (j == 1) {    ++phaseOneLength;  } else {    if (--phaseOneLength == 0) {      phase=2;      affix=suffix;    }    continue;  }if (ch == digit) {  if (zeroDigitCount > 0) {    ++digitRightCount;  } else {    ++digitLeftCount;  }  if (groupingCount >= 0 && decimalPos < 0) {    ++groupingCount;  }} else if (ch == zeroDigit) {  if (digitRightCount > 0) {    throw new IllegalArgumentException("Unexpected '0' in pattern \"" + pattern + '"');  }  ++zeroDigitCount;  if (groupingCount >= 0 && decimalPos < 0) {    ++groupingCount;  }} else if (ch == groupingSeparator) {  groupingCount=0;} else if (ch == decimalSeparator) {  if (decimalPos >= 0) {    throw new IllegalArgumentException("Multiple decimal separators in pattern \"" + pattern + '"');  }  decimalPos=digitLeftCount + zeroDigitCount + digitRightCount;} else if (pattern.regionMatches(pos,exponent,0,exponent.length())) {  if (useExponentialNotation) {    throw new IllegalArgumentException("Multiple exponential " + "symbols in pattern \"" + pattern + '"');  }  useExponentialNotation=true;  minExponentDigits=0;  pos=pos + exponent.length();  while (pos < pattern.length() && pattern.charAt(pos) == zeroDigit) {    ++minExponentDigits;    ++phaseOneLength;    ++pos;  }  if ((digitLeftCount + zeroDigitCount) < 1 || minExponentDigits < 1) {    throw new IllegalArgumentException("Malformed exponential " + "pattern \"" + pattern + '"');  }  phase=2;  affix=suffix;  --pos;  continue;} else {  phase=2;  affix=suffix;  --pos;  --phaseOneLength;  continue;}break;}}if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) {int n=decimalPos;if (n == 0) {++n;}digitRightCount=digitLeftCount - n;digitLeftCount=n - 1;zeroDigitCount=1;}if ((decimalPos < 0 && digitRightCount > 0) || (decimalPos >= 0 && (decimalPos < digitLeftCount || decimalPos > (digitLeftCount + zeroDigitCount))) || groupingCount == 0 || inQuote) {throw new IllegalArgumentException("Malformed pattern \"" + pattern + '"');}if (j == 1) {posPrefixPattern=prefix.toString();posSuffixPattern=suffix.toString();negPrefixPattern=posPrefixPattern;negSuffixPattern=posSuffixPattern;int digitTotalCount=digitLeftCount + zeroDigitCount + digitRightCount;int effectiveDecimalPos=decimalPos >= 0 ? decimalPos : digitTotalCount;setMinimumIntegerDigits(effectiveDecimalPos - digitLeftCount);setMaximumIntegerDigits(useExponentialNotation ? digitLeftCount + getMinimumIntegerDigits() : MAXIMUM_INTEGER_DIGITS);setMaximumFractionDigits(decimalPos >= 0 ? (digitTotalCount - decimalPos) : 0);setMinimumFractionDigits(decimalPos >= 0 ? (digitLeftCount + zeroDigitCount - decimalPos) : 0);setGroupingUsed(groupingCount > 0);this.groupingSize=(groupingCount > 0) ? groupingCount : 0;this.multiplier=multiplier;setDecimalSeparatorAlwaysShown(decimalPos == 0 || decimalPos == digitTotalCount);} else {negPrefixPattern=prefix.toString();negSuffixPattern=suffix.toString();gotNegative=true;}}if (pattern.length() == 0) {posPrefixPattern=posSuffixPattern="";setMinimumIntegerDigits(0);setMaximumIntegerDigits(MAXIMUM_INTEGER_DIGITS);setMinimumFractionDigits(0);setMaximumFractionDigits(MAXIMUM_FRACTION_DIGITS);}if (!gotNegative || (negPrefixPattern.equals(posPrefixPattern) && negSuffixPattern.equals(posSuffixPattern))) {negSuffixPattern=posSuffixPattern;negPrefixPattern="'-" + posPrefixPattern;}expandAffixes();}  }
class C{  public void nextFocusElement(){  int selectedColumn=getActiveColumn();  int selectedRow=getActiveRow();  int nextColumn=selectedColumn + 1;  int nextRow=selectedRow;  if (selectedColumn == -1) {    selectedColumn=0;  }  if (selectedRow == -1) {    if (impl.getModel().getRowCount() > 0) {      moveToStart(0,0);    } else     moveFocusToNextControl();    return;  }  if (selectedColumn == impl.getColumnCount() - 1) {    nextColumn=0;    nextRow=selectedRow + 1;  }  JComponent activeComponent=getActiveComponent();  boolean wasMoved=false;  if (activeComponent != null) {    wasMoved=moveFocusNextIntoComponent(activeComponent);  }  if (!wasMoved) {    if (nextRow > impl.getRowCount() - 1)     impl.transferFocus(); else     moveToStart(nextRow,nextColumn);  }}  }
class C{  private void putNamespaces(XMLStreamReader reader){  for (int i=0; i < reader.getNamespaceCount(); i++) {    final String prefix=reader.getNamespacePrefix(i);    if (prefix != null) {      putNamespace(prefix,reader.getNamespaceURI(i));    }  }}  }
class C{  public CategoryDecoratorImpl(final ImageService imageService,final AttributableImageService categoryImageService,final CategoryService categoryService,final Category categoryEntity,final String httpServletContextPath,final I18NWebSupport i18NWebSupport){  this.categoryService=categoryService;  this.categoryImageService=categoryImageService;  this.httpServletContextPath=httpServletContextPath;  this.imageService=imageService;  this.i18NWebSupport=i18NWebSupport;  if (categoryEntity != null) {    BeanUtils.copyProperties(categoryEntity,this);  }}  }
class C{  protected void copyValues(Instance instance,boolean instSrcCompat,Instances srcDataset,Instances destDataset){  RelationalLocator.copyRelationalValues(instance,instSrcCompat,srcDataset,m_InputRelAtts,destDataset,m_OutputRelAtts);  StringLocator.copyStringValues(instance,instSrcCompat,srcDataset,m_InputStringAtts,getOutputFormat(),m_OutputStringAtts);}  }
class C{  public void testSingleEvictOffHeap() throws Exception {  CacheConfiguration<Integer,Object> ccfg=cacheConfiguration(grid(0).name());  ccfg.setName("testSingleEvictOffHeap");  ccfg.setMemoryMode(CacheMemoryMode.OFFHEAP_VALUES);  ccfg.setSwapEnabled(false);  LruEvictionPolicy plc=new LruEvictionPolicy();  plc.setMaxMemorySize(200);  ccfg.setEvictionPolicy(plc);  final IgniteCache<Integer,Object> cache=grid(0).getOrCreateCache(ccfg);  cache.put(1,new byte[150]);  cache.put(2,new byte[150]);  cache.put(3,new byte[150]);  assert cache.size() == 1;}  }
class C{  public JPEG2000PictureSubDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,JPEG2000PictureSubDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public ExecutionWindowRestRep update(URI id,ExecutionWindowUpdateParam input){  return client.put(ExecutionWindowRestRep.class,input,getIdUrl(),id);}  }
class C{  @Override public void close(){  currentRow=null;  rows=null;  columns=null;  rowId=-1;  if (source != null) {    source.close();    source=null;  }}  }
class C{  public static void logResultsSeen(boolean wasPanelSeen,boolean wasTap){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchResultsSeen",wasPanelSeen ? RESULTS_SEEN : RESULTS_NOT_SEEN,RESULTS_SEEN_BOUNDARY);  logHistogramByGesture(wasPanelSeen,wasTap,"Search.ContextualSearchResultsSeenByGesture");}  }
class C{  public String globalInfo(){  return "A simple instance filter that renames the relation, all attribute names " + "and all nominal (and string) attribute values. For exchanging sensitive " + "datasets. Currently doesn't like string or relational attributes.";}  }
class C{  @Override public byte[] write(InternalLog log) throws IOException {  final byte[] rowkey=RowkeyBuilder.buildRowkey(log);  final Put p=new Put(rowkey);  populateColumnValues(p,log);  tbl.put(p);  final List<byte[]> indexRowkeys=log.getIndexRowkeys();  if (indexRowkeys != null) {    writeIndexes(rowkey,indexRowkeys);  }  return rowkey;}  }
class C{  @Override public void clear(){  initialize();}  }
class C{  public static void logResult(ResultObject resultObject,PrintWriter localOut){  logResult(resultObject.toResultString(),localOut);}  }
class C{  public Builder reconnectInterval(final int interval){  this.reconnectInterval=interval;  return this;}  }
class C{  public void removeClient(SocketAddress address,ProxyClient sc){  if (address2Services.remove(address,sc)) {    logger.info("Remove client {} to host {}.",sc,address);    sc.close();  }}  }
class C{  public void unregisterOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){  preferences.unregisterOnSharedPreferenceChangeListener(listener);}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public List<String> unused(){  List<String> unUsed=new ArrayList<String>();  for (  String name : used.keySet()) {    Boolean isUsed=used.get(name);    if (!isUsed)     unUsed.add(name);  }  return unUsed;}  }
class C{  public void fireAddingEdge(){  SessionEvent event=new SessionEvent(this.source,SessionEvent.ADDING_EDGE);  fireSessionEvent(event);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gdpa");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public ByteStream(AbstractDriver driver,String name,byte minValue,byte maxValue,byte zeroValue,byte defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  super(driver,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);  if (VM.BuildWithGCSpy) {    Address tmpName=GCspy.util.getBytes(name);    Address tmpPre=GCspy.util.getBytes(stringPre);    Address tmpPost=GCspy.util.getBytes(stringPost);    sysCall.gcspyStreamInit(stream,streamId,BYTE_TYPE,tmpName,minValue,maxValue,zeroValue,defaultValue,tmpPre,tmpPost,presentation,paintStyle,indexMaxStream,colour.getRed(),colour.getGreen(),colour.getBlue());  }}  }
class C{  public ServiceSchemeException(String message){  super(message);}  }
class C{  public static void writePacketOutForPacketIn(IOFSwitch sw,OFPacketIn packetInMessage,OFPort egressPort){  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  pob.setBufferId(packetInMessage.getBufferId());  pob.setInPort(packetInMessage.getVersion().compareTo(OFVersion.OF_12) < 0 ? packetInMessage.getInPort() : packetInMessage.getMatch().get(MatchField.IN_PORT));  List<OFAction> actions=new ArrayList<OFAction>(1);  actions.add(sw.getOFFactory().actions().buildOutput().setPort(egressPort).setMaxLen(0xffFFffFF).build());  pob.setActions(actions);  if (packetInMessage.getBufferId() == OFBufferId.NO_BUFFER) {    byte[] packetData=packetInMessage.getData();    pob.setData(packetData);  }  sw.write(pob.build());}  }
class C{  public boolean isGroupAddress() throws UnknownHostException {  checkData();  return groupName;}  }
class C{  static public void stepQueued(String stepId) throws WorkflowException {  WorkflowService.completerStepQueued(stepId);}  }
class C{  public static Calendar deserialize(final String strVal) throws ParseException {  final boolean hasZ=strVal.indexOf('Z') != -1;  String modifiedStrVal;  final String zSuffix;  if (hasZ) {    zSuffix="Z";    modifiedStrVal=strVal.replace("Z","+0000");  } else {    zSuffix="";    modifiedStrVal=strVal;  }  final String datePattern;  if (modifiedStrVal.contains(".")) {    String milliseconds=modifiedStrVal.substring(modifiedStrVal.indexOf(".") + 1,modifiedStrVal.indexOf("+"));    final int millisSegmentLength=3;    if (milliseconds.length() > millisSegmentLength) {      milliseconds=milliseconds.substring(0,millisSegmentLength);      modifiedStrVal=modifiedStrVal.substring(0,modifiedStrVal.indexOf(".") + 1) + milliseconds + modifiedStrVal.substring(modifiedStrVal.indexOf("+"));    }    datePattern="yyyy-MM-dd'T'HH:mm:ss.SSS" + zSuffix;  } else {    datePattern="yyyy-MM-dd'T'HH:mm:ss" + zSuffix;  }  @SuppressLint("SimpleDateFormat") final SimpleDateFormat dateFormat=new SimpleDateFormat(datePattern);  dateFormat.setTimeZone(TimeZone.getDefault());  final Date date=dateFormat.parse(modifiedStrVal);  final Calendar calendar=java.util.Calendar.getInstance();  calendar.setTime(date);  return calendar;}  }
class C{  public ResAllocsBuilder withNetworkMbps(double networkMbps){  this.networkMbps=networkMbps;  return this;}  }
class C{  @CanIgnoreReturnValue public static <T>T readBytes(InputStream input,ByteProcessor<T> processor) throws IOException {  checkNotNull(input);  checkNotNull(processor);  byte[] buf=createBuffer();  int read;  do {    read=input.read(buf);  } while (read != -1 && processor.processBytes(buf,0,read));  return processor.getResult();}  }
class C{  private long createDiscount(long customerKey,BigDecimal value,Long startTime,Long endTime,long supplierKey) throws Exception {  Discount discount=new Discount();  Organization organization=dm.getReference(Organization.class,customerKey);  List<OrganizationReference> sources=organization.getSources();  OrganizationReference suppToCust=null;  for (  OrganizationReference ref : sources) {    if (ref.getSourceKey() == supplierKey) {      suppToCust=ref;    }  }  Assert.assertNotNull("OrganizationReference to supplier not found",suppToCust);  discount.setOrganizationReference(suppToCust);  discount.setValue(value);  discount.setStartTime(startTime);  discount.setEndTime(endTime);  dm.persist(discount);  final long key=discount.getKey();  return key;}  }
class C{  public static boolean equalsAny(CharSequence cs,CharSequence[] strs){  boolean eq=false;  if (cs == null) {    eq=strs == null;  }  if (strs != null) {    for (int i=0; i < strs.length; i++) {      eq=eq || strs[i].equals(cs);    }  }  return eq;}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  public static void startFactoryServices(ServiceHost host,Map<Class<? extends Service>,Supplier<FactoryService>> factoryServicesMap){  checkNotNull(host,"host cannot be null");  checkNotNull(factoryServicesMap,"factoryServicesMap cannot be null");  Iterator<Map.Entry<Class<? extends Service>,Supplier<FactoryService>>> it=factoryServicesMap.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<Class<? extends Service>,Supplier<FactoryService>> entry=it.next();    host.startFactory(entry.getKey(),entry.getValue());  }}  }
class C{  protected void waitForDownloadOrTimeout(long id) throws TimeoutException, InterruptedException {  waitForDownloadOrTimeout_skipNotification(id);  waitForReceiverNotifications(1);}  }
class C{  public boolean equals(Object rhs){  try {    return equals((ShapeGraphicAttribute)rhs);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public Checkpoints(Algorithm algorithm,File stateFile,int checkpointFrequency){  super(algorithm,checkpointFrequency,FrequencyType.EVALUATIONS);  this.stateFile=stateFile;  if (stateFile.exists() && (stateFile.length() != 0L)) {    try {      algorithm.setState(loadState());    } catch (    Exception e) {      e.printStackTrace();      System.err.println("an error occurred while reading the state file");    }  }}  }
class C{  public SQLSyntaxErrorException(String reason){  super(reason,null,0);}  }
class C{  protected List<JobDefinition> addDependenciesForSeeding(List<JobDefinition> jobs){  List<JobDefinition> list=new ArrayList<JobDefinition>(jobs.size());  for (int i=0; i < jobs.size(); i++) {    JobDefinition job=jobs.get(i);    Set<String> inputs=calculateInputClasses(job);    Set<String> parents=calculateAncestors(job);    list.add(job.getByAddingDependencies(inputs,parents));  }  return list;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static NestedListContainer eliminateEmptyStructures(NestedListContainer nlc){  for (int i=nlc.size() - 1; i >= 0; i--) {    NestedList nl=nlc.getNestedList(i);    if (nl.getClass() == NestedListContainer.class)     eliminateEmptyStructures((NestedListContainer)nl);    if (nl.empty())     nlc.remove(nl);  }  return nlc;}  }
class C{  private void passCompletion(Team offense,Team defense,PlayerWR selWR,int[] selWRStats,int yardsGain){  offense.getQB(0).statsPassComp++;  offense.getQB(0).statsPassYards+=yardsGain;  selWR.statsReceptions++;  selWR.statsRecYards+=yardsGain;  offense.teamPassYards+=yardsGain;  if (gamePoss) {    HomeQBStats[0]++;    selWRStats[0]++;  } else {    AwayQBStats[0]++;    selWRStats[0]++;  }}  }
class C{  @Nullable public GrCall enclosingCall(String name,GdslMembersHolderConsumer consumer){  final PsiElement place=consumer.getPlace();  if (place == null)   return null;  GrCall call=PsiTreeUtil.getParentOfType(place,GrCall.class,true);  if (call == null)   return null;  while (call != null && !name.equals(getInvokedMethodName(call))) {    call=PsiTreeUtil.getParentOfType(call,GrCall.class,true);  }  if (call == null)   return null;  final GrArgumentList argumentList=call.getArgumentList();  if (argumentList != null) {    for (    GrExpression arg : argumentList.getExpressionArguments()) {      if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) {        return call;      }    }  }  if (call instanceof GrMethodCallExpression) {    for (    GrExpression arg : call.getClosureArguments()) {      if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) {        return call;      }    }  }  return null;}  }
class C{  public void loadHamNSpam(Connection conn) throws java.sql.SQLException {  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectHamTokens",true));    rs=pstmt.executeQuery();    Map<String,Integer> ham=getHamTokenCounts();    while (rs.next()) {      String token=rs.getString(1);      int count=rs.getInt(2);      if (count > 1) {        ham.put(token,count);      }    }    log("Ham tokens count: " + ham.size());    rs.close();    pstmt.close();    pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectSpamTokens",true));    rs=pstmt.executeQuery();    Map<String,Integer> spam=getSpamTokenCounts();    while (rs.next()) {      String token=rs.getString(1);      int count=rs.getInt(2);      if (count > 1) {        spam.put(token,count);      }    }    log("Spam tokens count: " + spam.size());    rs.close();    pstmt.close();    pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectMessageCounts",true));    rs=pstmt.executeQuery();    if (rs.next()) {      setHamMessageCount(rs.getInt(1));      setSpamMessageCount(rs.getInt(2));    }    rs.close();    pstmt.close();  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      java.sql.SQLException se) {        log("Failed to close statement after selecting spam tokens.",se);      }      rs=null;    }    if (pstmt != null) {      try {        pstmt.close();      } catch (      java.sql.SQLException se) {        log("Failed to close statement selecting message counts.",se);      }      pstmt=null;    }  }}  }
class C{  public List<List<double[]>> buildContourLines(double value){  this.assembleContourCells(value);  this.traverseContourCells();  List<List<double[]>> result=new ArrayList<List<double[]>>(this.contourList);  this.clearContourCells();  return result;}  }
class C{  private void updateStorageSystemsInProvider(StorageProvider provider,Map<URI,List<String>> providersToUpdate,StorageSystem storageSystemInDB){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  List<String> storageSystems=null;  if (providersToUpdate.containsKey(provider.getId())) {    storageSystems=providersToUpdate.get(provider.getId());  } else {    storageSystems=new ArrayList<String>();  }  storageSystems.add(storageSystemInDB.getId().toString());  providersToUpdate.put(provider.getId(),storageSystems);  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public void findBest(ArrayModifiableDBIDs candidates,DBIDArrayMIter it,DBIDVar out){  assert (candidates.size() > 0);  int best=0;  double min=reachability.doubleValue(it.seek(0));  for (it.advance(); it.valid(); it.advance()) {    final double reach=reachability.doubleValue(it);    if (reach < min) {      min=reach;      best=it.getOffset();    }  }  out.set(it.seek(best));  it.remove();}  }
class C{  public void putMetadata(final URIMetadataNode entry) throws IOException {  byte[] idb=entry.hash();  String id=ASCII.String(idb);  try {    long date=this.getLoadTime(id);    if (date == -1) {      putDocument(getDefaultConfiguration().metadata2solr(entry));    } else {      if (date < entry.loaddate().getTime()) {        SolrDocument doc=this.getDefaultConnector().getDocumentById(id,CollectionSchema.collection_sxt.getSolrFieldName());        if (doc == null || !doc.containsKey(CollectionSchema.collection_sxt.getSolrFieldName())) {          putDocument(getDefaultConfiguration().metadata2solr(entry));        } else {          Collection<Object> collections=doc.getFieldValues(CollectionSchema.collection_sxt.getSolrFieldName());          if (!collections.contains("dht"))           return;          putDocument(getDefaultConfiguration().metadata2solr(entry));        }      }    }  } catch (  final SolrException e) {    throw new IOException(e.getMessage(),e);  }  if (MemoryControl.shortStatus())   clearCaches();}  }
class C{  private static Class<?> loadVMClass(Resource toolsJar,Log log,JavaVendor vendor){  try {    ClassLoader loader=ClassLoader.getSystemClassLoader();    String cls=vendor.getVirtualMachineClassName();    loader=new URLClassLoader(new URL[]{((FileResource)toolsJar).toURI().toURL()},loader);    return loader.loadClass(cls);  } catch (  Exception e) {    log.log(Log.LEVEL_INFO,"Instrumentation",e);  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.ENTRY__KIND:    setKind(KIND_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void updatePurchasedItem(String productId,int quantity){  if (quantity == 0) {    mDb.delete(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_PRODUCT_ID_COL + "=?",new String[]{productId});    return;  }  ContentValues values=new ContentValues();  values.put(PURCHASED_PRODUCT_ID_COL,productId);  values.put(PURCHASED_QUANTITY_COL,quantity);  mDb.replace(PURCHASED_ITEMS_TABLE_NAME,null,values);}  }
class C{  @SuppressWarnings("unused") private void dumpDebug(byte[] data,String destFile){}  }
class C{  public double quantile(double y){  if (y == 0) {    return 0;  } else   if (y == 1) {    return 1;  } else {    try {      return super.inverseCumulativeProbability(y);    } catch (    MathException e) {      return Double.NaN;    }  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static ANRequest.PutRequestBuilder put(String url){  return new ANRequest.PutRequestBuilder(url);}  }
class C{  void addTransaction(Transaction t,boolean runSanityChecks){  unCacheTransactions();  if (transactions == null) {    transactions=new ArrayList<Transaction>();  }  t.setParent(this);  if (runSanityChecks && transactions.size() == 0 && !t.isCoinBase())   throw new RuntimeException("Attempted to add a non-coinbase transaction as the first transaction: " + t); else   if (runSanityChecks && transactions.size() > 0 && t.isCoinBase())   throw new RuntimeException("Attempted to add a coinbase transaction when there already is one: " + t);  transactions.add(t);  adjustLength(transactions.size(),t.length);  merkleRoot=null;  hash=null;}  }
class C{  private static String pickRandomStatsFields(String[] fieldNames){  String fieldName;  do {    fieldName=fieldNames[TestUtil.nextInt(random(),0,fieldNames.length - 1)];  } while (fieldName.endsWith("_b") || fieldName.endsWith("_b1"));  return fieldName;}  }
class C{  static String composeNameForTrash(IgfsPath path,IgniteUuid id){  return id.toString() + TRASH_NAME_SEPARATOR + path.toString();}  }
class C{  @LogMessageDoc(level="ERROR",message="Error {error type} {error code} from {switch} " + "in state {state}",explanation="The switch responded with an unexpected error" + "to an OpenFlow message from the controller",recommendation="This could indicate improper network operation. " + "If the problem persists restarting the switch and " + "controller may help.") protected void logError(OFErrorMsg error){  log.error("{} from switch {} in state {}",new Object[]{error.toString(),getConnectionInfoString(),this.toString()});}  }
class C{  public LegacyFieldType(){}  }
class C{  public int[][] writeGeometry(EsriGraphicList list) throws IOException {  if (list instanceof EsriPolygonList || list instanceof EsriPolylineList) {    return writePolyGeometry(list);  } else   if (list instanceof EsriPointList) {    return writePointGeometry(list);  }  return null;}  }
class C{  public BlockOption(byte[] value){  if (value == null)   throw new NullPointerException();  if (value.length > 3)   throw new IllegalArgumentException("Block option's length must at most 3 bytes inclusive");  if (value.length == 0) {    this.szx=0;    this.m=false;    this.num=0;  } else {    byte end=value[value.length - 1];    this.szx=end & 0x7;    this.m=(end >> 3 & 0x1) == 1;    this.num=(end & 0xFF) >> 4;    for (int i=1; i < value.length; i++)     num+=((value[value.length - i - 1] & 0xff) << (i * 8 - 4));  }}  }
class C{  public boolean isIgnoreRecipientHeader(){  return fieldIgnoreRecipientHeader;}  }
class C{  public void resetCharges(){  pendingCharges.removeAllElements();}  }
class C{  public int keys(int[] list){  int[] tab=table;  byte[] stat=state;  if (list.length < distinct)   return -1;  int j=0;  for (int i=tab.length; i-- > 0; ) {    if (stat[i] == FULL)     list[j++]=tab[i];  }  return distinct;}  }
class C{  public static StringBuffer printList(Collection<String> list){  StringBuffer sb=new StringBuffer();  if (list != null && list.size() > 0) {    Iterator<String> iter=list.iterator();    while (true) {      sb.append(escape(iter.next()));      if (iter.hasNext()) {        sb.append(", ");      } else {        break;      }    }  }  return sb;}  }
class C{  private void establecerElementosVista(HttpServletRequest request){  GestionEliminacionBI eliminacionService=getGestionEliminacionBI(request);  GestionFondosBI fondosService=getGestionFondosBI(request);  int[] estados={IElementoCuadroClasificacion.VIGENTE};  removeInTemporalSession(request,ValoracionConstants.LISTA_FONDOS_KEY);  setInTemporalSession(request,ValoracionConstants.LISTA_FONDOS_KEY,fondosService.getFondosXEstados(estados));  request.setAttribute("estados",eliminacionService.getEstadosEliminacion());}  }
class C{  public void testAddMathContextEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="1.2312E+61";  int cScale=-57;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(5,RoundingMode.FLOOR);  BigDecimal result=aNumber.add(bNumber,mc);  assertEquals("incorrect value ",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  protected Iterator createValuesIterator(){  return new ReferenceValuesIterator(this);}  }
class C{  private void encodeSegment(final Url url,final String idName,final String idValueToEncode){  final String rez;  if (seoEnabled) {    if (WebParametersKeys.CATEGORY_ID.equals(idName)) {      final String categoryId=bookmarkService.saveBookmarkForCategory(idValueToEncode);      rez=categoryId != null ? categoryId : idValueToEncode;    } else     if (WebParametersKeys.PRODUCT_ID.equals(idName)) {      final String productId=bookmarkService.saveBookmarkForProduct(idValueToEncode);      rez=productId != null ? productId : idValueToEncode;    } else     if (WebParametersKeys.SKU_ID.equals(idName)) {      final String skuId=bookmarkService.saveBookmarkForSku(idValueToEncode);      rez=skuId != null ? skuId : idValueToEncode;    } else     if (WebParametersKeys.CONTENT_ID.equals(idName)) {      final String contentId=bookmarkService.saveBookmarkForContent(idValueToEncode);      rez=contentId != null ? contentId : idValueToEncode;    } else     if (WebParametersKeys.PAGE_TYPE.equals(idName)) {      rez=null;    } else {      rez=idValueToEncode;    }  } else {    rez=idValueToEncode;  }  if (rez != null) {    url.getSegments().add(idName);    url.getSegments().add(rez);  }}  }
class C{  public Rational add(Rational secondRational){  BigInteger n=(r[0].multiply(secondRational.getDenominator())).add(r[1].multiply(secondRational.getNumerator()));  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  @Override public void revalidate(){}  }
class C{  public boolean isAdd(){  return is(ADD);}  }
class C{  @Override @Transactional(isolation=Isolation.READ_UNCOMMITTED) @Modifying public Rollout updateRollout(final Rollout rollout){  Assert.notNull(rollout.getId());  return rolloutRepository.save((JpaRollout)rollout);}  }
class C{  @Nullable public IgniteInternalFuture<?> awaitAckAsync(){synchronized (this) {    if (cnt == 0)     return null;    if (nodeLeft)     return new GridFinishedFuture<>(new IgniteCheckedException("Failed to wait for finish synchronizer " + "state (node left grid): " + nodeId));    if (pendingFut == null) {      if (log.isTraceEnabled())       log.trace("Creating transaction synchronizer future [nodeId=" + nodeId + ", threadId="+ threadId+ ']');      pendingFut=new GridFutureAdapter<>();    }    return pendingFut;  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getDepend_();}  }
class C{  @Deprecated public void rebootNode(String nodeId){  UriBuilder builder=client.uriBuilder(CONTROL_REBOOT_NODE_URL);  addQueryParam(builder,NODE_ID_PARAM,nodeId);  client.postURI(String.class,builder.build());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    ZComp rv=uiComp.getLastFocusedChild();    if (rv instanceof ZPseudoComp)     return rv;  }  return null;}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  if (off < 0 || len < 0 || off + len < 0 || off + len > buf.length)   throw new IndexOutOfBoundsException();  if (len == 0)   return 0;  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  if (endReached)   return -1;  try {    int size=0;    while (len > 0) {      int copySizeMax=len;      if (remainingSize >= 0 && remainingSize < len)       copySizeMax=(int)remainingSize;      lz.setLimit(copySizeMax);      try {        lzma.decode();      } catch (      CorruptedInputException e) {        if (remainingSize != -1 || !lzma.endMarkerDetected())         throw e;        endReached=true;        rc.normalize();      }      int copiedSize=lz.flush(buf,off);      off+=copiedSize;      len-=copiedSize;      size+=copiedSize;      if (remainingSize >= 0) {        remainingSize-=copiedSize;        assert remainingSize >= 0;        if (remainingSize == 0)         endReached=true;      }      if (endReached) {        if (!rc.isFinished() || lz.hasPending())         throw new CorruptedInputException();        return size == 0 ? -1 : size;      }    }    return size;  } catch (  IOException e) {    exception=e;    throw e;  }}  }
class C{  public boolean hasFields(){  return hasRepeatingExtension(Field.class);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append(getContinuousScale().toString());  sb.append(",");  sb.append(hueLower);  sb.append(",");  sb.append(hueUpper);  sb.append(",");  sb.append(saturationLower);  sb.append(",");  sb.append(saturationUpper);  sb.append(",");  sb.append(brightnessLower);  sb.append(",");  sb.append(brightnessUpper);  sb.append(",");  sb.append(reverseHue);  sb.append("}");  return sb.toString();}  }
class C{  protected boolean isUseFieldNames(){  return useFieldNames;}  }
class C{  private void initializeAttributes(){  timeSeriesConsumerType=new AttributeType(this,"Series","setValue",double.class,true);  addConsumerType(timeSeriesConsumerType);}  }
class C{  private synchronized void sendUnlistens(final Set<NotificationChannel> channelNames){  for (  final NotificationChannel channel : channelNames) {    try {      m_connection.executeUpdate("UNLISTEN " + channel.name(),true);    } catch (    final SQLException exception) {      NaviLogger.severe("Error: Could not send UNLISTEN command to database server: %s",exception);    }  }  for (  final PostgreSQLNotificationListener listener : m_listeners) {    try {      listener.listenedChannelsRemoved(m_provider,channelNames);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static List<IJavaCompletionProposal> createProposalsForProblemsOnSyncMethod(ASTNode node){  RpcPair rpcPair=resolveRpcPair(node,PeerTypeResolver.ASYNC_RESOLVER);  return createProposal(rpcPair,BUILDER);}  }
class C{  public boolean isPerFileThinProvisioningSupported(){  return perFileThinProvisioningSupported;}  }
class C{  public Boolean isCanBeDisabled(){  return canBeDisabled;}  }
class C{  public static double rand(){  return rand.nextDouble();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean isShortCutKeysRequired(){  return true;}  }
class C{  private void discoverUnmanagedStorageViews(AccessProfile accessProfile,VPlexApiClient client,Map<String,VPlexVirtualVolumeInfo> vvolMap,Map<String,Set<UnManagedExportMask>> volumeToExportMasksMap,Map<String,Set<VPlexStorageViewInfo>> volumeToStorageViewMap,Set<String> recoverPointExportMasks) throws BaseCollectionException {  String statusMessage="Starting discovery of Unmanaged VPLEX Storage Views.";  s_logger.info(statusMessage + " Access Profile Details :  IpAddress : " + "PortNumber : {}, namespace : {}",accessProfile.getIpAddress() + accessProfile.getPortNumber(),accessProfile.getnamespace());  URI vplexUri=accessProfile.getSystemId();  StorageSystem vplex=_dbClient.queryObject(StorageSystem.class,vplexUri);  if (null == vplex) {    s_logger.error("No VPLEX Device was found in ViPR for URI: " + vplexUri);    s_logger.error("Unmanaged VPLEX StorageView discovery cannot continue.");    return;  }  try {    Map<String,String> clusterIdToNameMap=client.getClusterIdToNameMap();    Map<String,Map<String,String>> clusterPortMap=new HashMap<String,Map<String,String>>();    for (    String clusterName : clusterIdToNameMap.values()) {      Map<String,String> targetPortToPwwnMap=VPlexControllerUtils.getTargetPortToPwwnMap(client,clusterName);      clusterPortMap.put(clusterName,targetPortToPwwnMap);    }    Set<URI> allCurrentUnManagedExportMaskUris=new HashSet<URI>();    List<UnManagedExportMask> unManagedExportMasksToCreate=new ArrayList<UnManagedExportMask>();    List<UnManagedExportMask> unManagedExportMasksToUpdate=new ArrayList<UnManagedExportMask>();    Set<URI> rpPortInitiators=RPHelper.getBackendPortInitiators(_dbClient);    for (    String clusterName : clusterIdToNameMap.values()) {      List<VPlexStorageViewInfo> storageViews=client.getStorageViewsForCluster(clusterName);      for (      VPlexStorageViewInfo storageView : storageViews) {        s_logger.info("discovering storage view: " + storageView.toString());        List<Initiator> knownInitiators=new ArrayList<Initiator>();        List<StoragePort> knownPorts=new ArrayList<StoragePort>();        UnManagedExportMask uem=getUnManagedExportMaskFromDb(storageView);        if (uem != null) {          s_logger.info("found an existing unmanaged export mask for storage view " + storageView.getName());          unManagedExportMasksToUpdate.add(uem);          uem.getKnownInitiatorUris().clear();          uem.getKnownInitiatorNetworkIds().clear();          uem.getKnownStoragePortUris().clear();          uem.getKnownVolumeUris().clear();          uem.getUnmanagedInitiatorNetworkIds().clear();          uem.getUnmanagedStoragePortNetworkIds().clear();          uem.getUnmanagedVolumeUris().clear();        } else {          s_logger.info("creating a new unmanaged export mask for storage view " + storageView.getName());          uem=new UnManagedExportMask();          unManagedExportMasksToCreate.add(uem);        }        uem.setNativeId(storageView.getPath());        uem.setMaskingViewPath(storageView.getPath());        uem.setMaskName(storageView.getName());        uem.setStorageSystemUri(accessProfile.getSystemId());        s_logger.info("now discovering host initiators in storage view " + storageView.getName());        for (        String initiatorNetworkId : storageView.getInitiatorPwwns()) {          s_logger.info("looking at initiator network id " + initiatorNetworkId);          if (initiatorNetworkId.matches(ISCSI_PATTERN) && (iSCSIUtility.isValidIQNPortName(initiatorNetworkId) || iSCSIUtility.isValidEUIPortName(initiatorNetworkId))) {            s_logger.info("\tiSCSI network id normalized to " + initiatorNetworkId);          } else           if (initiatorNetworkId.matches(REGISTERED_PATTERN)) {            initiatorNetworkId=initiatorNetworkId.substring(REGISTERED_PORT_PREFIX.length());            initiatorNetworkId=WWNUtility.getWWNWithColons(initiatorNetworkId);            s_logger.info("\tRegistered network id normalized to " + initiatorNetworkId);          } else           if (WWNUtility.isValidWWNAlias(initiatorNetworkId)) {            initiatorNetworkId=WWNUtility.getWWNWithColons(initiatorNetworkId);            s_logger.info("\twwn normalized to " + initiatorNetworkId);          } else {            s_logger.warn("\tthis is not a valid network id format, skipping");            continue;          }          Initiator knownInitiator=NetworkUtil.getInitiator(initiatorNetworkId,_dbClient);          if (knownInitiator != null) {            s_logger.info("   found an initiator in ViPR on host " + knownInitiator.getHostName());            uem.getKnownInitiatorUris().add(knownInitiator.getId().toString());            uem.getKnownInitiatorNetworkIds().add(knownInitiator.getInitiatorPort());            knownInitiators.add(knownInitiator);          } else {            s_logger.info("   no hosts in ViPR found configured for initiator " + initiatorNetworkId);            uem.getUnmanagedInitiatorNetworkIds().add(initiatorNetworkId);          }        }        s_logger.info("now discovering storage ports in storage view " + storageView.getName());        List<String> targetPortNames=storageView.getPorts();        if (targetPortNames.isEmpty()) {          s_logger.info("no storage ports found in storage view " + storageView.getName());        }        List<String> portWwns=new ArrayList<String>();        for (        String targetPortName : targetPortNames) {          Map<String,String> portToWwpnMap=clusterPortMap.get(clusterName);          if (portToWwpnMap.keySet().contains(targetPortName)) {            portWwns.add(WwnUtils.convertWWN(portToWwpnMap.get(targetPortName),WwnUtils.FORMAT.COLON));          }        }        for (        String portNetworkId : portWwns) {          s_logger.info("looking at storage port network id " + portNetworkId);          StoragePort knownStoragePort=NetworkUtil.getStoragePort(portNetworkId,_dbClient);          if (knownStoragePort != null) {            s_logger.info("   found a matching storage port in ViPR " + knownStoragePort.getLabel());            uem.getKnownStoragePortUris().add(knownStoragePort.getId().toString());            knownPorts.add(knownStoragePort);          } else {            s_logger.info("   no storage port in ViPR found matching portNetworkId " + portNetworkId);            uem.getUnmanagedStoragePortNetworkIds().add(portNetworkId);          }        }        s_logger.info("now discovering storage volumes in storage view " + storageView.getName());        for (        String volumeNameStr : storageView.getVirtualVolumes()) {          s_logger.info("found volume " + volumeNameStr);          String[] tokens=volumeNameStr.split(",");          String volumeName=tokens[1];          VPlexVirtualVolumeInfo vvol=vvolMap.get(volumeName);          Volume volume=findVirtualVolumeManagedByVipr(vvol);          if (volume != null) {            s_logger.info("this is a volume already managed by ViPR: " + volume.getLabel());            uem.getKnownVolumeUris().add(volume.getId().toString());          }          if (vvol != null) {            String nativeGuid=vvol.getPath();            s_logger.info("nativeGuid UnManagedVolume key for locating UnManagedExportMasks is " + nativeGuid);            Set<UnManagedExportMask> maskSet=volumeToExportMasksMap.get(nativeGuid);            if (maskSet == null) {              maskSet=new HashSet<UnManagedExportMask>();              s_logger.info("   creating new maskSet for nativeGuid " + nativeGuid);              volumeToExportMasksMap.put(nativeGuid,maskSet);            }            maskSet.add(uem);          }          Set<VPlexStorageViewInfo> storageViewSet=volumeToStorageViewMap.get(volumeName);          if (storageViewSet == null) {            storageViewSet=new HashSet<VPlexStorageViewInfo>();          }          storageViewSet.add(storageView);          volumeToStorageViewMap.put(volumeName,storageViewSet);        }        if (uem.getId() == null) {          uem.setId(URIUtil.createId(UnManagedExportMask.class));        }        if (checkRecoverPointExportMask(uem,knownInitiators,rpPortInitiators)) {          recoverPointExportMasks.add(uem.getId().toString());        }        updateZoningMap(uem,knownInitiators,knownPorts);        persistUnManagedExportMasks(unManagedExportMasksToCreate,unManagedExportMasksToUpdate,false);        allCurrentUnManagedExportMaskUris.add(uem.getId());      }    }    persistUnManagedExportMasks(unManagedExportMasksToCreate,unManagedExportMasksToUpdate,true);    cleanUpOrphanedExportMasks(vplexUri,allCurrentUnManagedExportMaskUris);  } catch (  Exception ex) {    s_logger.error(ex.getLocalizedMessage(),ex);    String vplexLabel=vplexUri.toString();    if (null != vplex) {      vplexLabel=vplex.getLabel();    }    throw VPlexCollectionException.exceptions.vplexUnmanagedExportMaskDiscoveryFailed(vplexLabel,ex.getLocalizedMessage());  } finally {    if (null != vplex) {      try {        vplex.setLastDiscoveryStatusMessage(statusMessage);        _dbClient.persistObject(vplex);      } catch (      Exception ex) {        s_logger.error("Error while saving VPLEX discovery status message: {} - Exception: {}",statusMessage,ex.getLocalizedMessage());      }    }  }}  }
class C{  public void trainOnline(FloatVector trainingInstance){  model.trainOnline(trainingInstance);}  }
class C{  public static org.oscm.internal.vo.ListCriteria convertToUp(org.oscm.vo.ListCriteria oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.ListCriteria newVO=new org.oscm.internal.vo.ListCriteria();  newVO.setOffset(oldVO.getOffset());  newVO.setLimit(oldVO.getLimit());  newVO.setFilter(oldVO.getFilter());  newVO.setSorting(EnumConverter.convert(oldVO.getSorting(),org.oscm.internal.types.enumtypes.Sorting.class));  newVO.setCategoryId(oldVO.getCategoryId());  return newVO;}  }
class C{  void listFields(){  field_info fi;  ConstantValue_attribute cva;  CONSTANT_Utf8_info cm;  int i, j;  for (i=0; i < fields_count; i++) {    fi=fields[i];    G.v().out.print(fi.prototype(constant_pool));    for (j=0; j < fi.attributes_count; j++) {      cm=(CONSTANT_Utf8_info)(constant_pool[fi.attributes[j].attribute_name]);      if (cm.convert().compareTo(attribute_info.ConstantValue) == 0) {        cva=(ConstantValue_attribute)(fi.attributes[j]);        G.v().out.print(" = " + constant_pool[cva.constantvalue_index].toString(constant_pool));        break;      }    }    G.v().out.println(";");  }}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.401 -0500",hash_original_method="D55FF6AB44947F083C797EDEE83A6188",hash_generated_method="4412D78FAA6F07FFF0816FEBECD5E3BD") public boolean hasBearing(){  return mHasBearing;}  }
class C{  private ByteBuffer encodeMemcache(GridMemcachedMessage msg) throws IgniteCheckedException {  GridByteArrayList res=new GridByteArrayList(HDR_LEN);  int keyLen=0;  int keyFlags=0;  if (msg.key() != null) {    ByteArrayOutputStream rawKey=new ByteArrayOutputStream();    keyFlags=encodeObj(msg.key(),rawKey);    msg.key(rawKey.toByteArray());    keyLen=rawKey.size();  }  int dataLen=0;  int valFlags=0;  if (msg.value() != null) {    ByteArrayOutputStream rawVal=new ByteArrayOutputStream();    valFlags=encodeObj(msg.value(),rawVal);    msg.value(rawVal.toByteArray());    dataLen=rawVal.size();  }  int flagsLen=0;  if (msg.addFlags())   flagsLen=FLAGS_LENGTH;  res.add(MEMCACHE_RES_FLAG);  res.add(msg.operationCode());  res.add((short)keyLen);  res.add((byte)flagsLen);  res.add((byte)0x00);  res.add((short)msg.status());  res.add(keyLen + flagsLen + dataLen);  res.add(msg.opaque(),0,msg.opaque().length);  res.add(0L);  assert res.size() == HDR_LEN;  if (flagsLen > 0) {    res.add((short)keyFlags);    res.add((short)valFlags);  }  assert msg.key() == null || msg.key() instanceof byte[];  assert msg.value() == null || msg.value() instanceof byte[];  if (keyLen > 0)   res.add((byte[])msg.key(),0,((byte[])msg.key()).length);  if (dataLen > 0)   res.add((byte[])msg.value(),0,((byte[])msg.value()).length);  return ByteBuffer.wrap(res.entireArray());}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(TypeToken<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public static void main5(String[] args) throws Exception {  DistributedSystem system=DistributedSystem.connect(new java.util.Properties());  Cache cache=CacheFactory.create(system);  AttributesFactory factory=new AttributesFactory();  factory.setEvictionAttributes(EvictionAttributes.createLRUMemoryAttributes(2,(ObjectSizer)null,EvictionAction.OVERFLOW_TO_DISK));  LocalRegion region=(LocalRegion)cache.createRegion("TestDiskRegion",factory.create());  LRUStatistics lruStats=getLRUStats(region);  for (int i=0; i < 10000; i++) {    int[] array=new int[1000];    array[0]=i;    try {      region.put(array,new Integer(i));    } catch (    IllegalStateException ex) {      System.out.println("Ran out of space: " + ex);      return;    }  }  String s="Limit is " + lruStats.getLimit() + " evictions are "+ lruStats.getEvictions();  throw new RuntimeException(s);}  }
class C{  public void fillFieldValues(Randomizer rand){  ProbDistPanel rp=cardMap.get(rand.getPdf());  cbDistribution.setSelectedItem(rand.getPdf());  rp.fillFieldValues(rand);  cardPanel.removeAll();  cardPanel.add(rp.getPanel());  cardPanel.repaint();  if (parent != null) {    parent.pack();    parent.setLocationRelativeTo(null);  }}  }
class C{  protected WMouseDragGestureRecognizer(DragSource ds,Component c,int act){  this(ds,c,act,null);}  }
class C{  public Boolean isAccessible(){  return accessible;}  }
class C{  public static String dumpAsHex(byte[] byteBuffer,int length){  StringBuilder outputBuilder=new StringBuilder(length * 4);  int p=0;  int rows=length / 8;  for (int i=0; (i < rows) && (p < length); i++) {    int ptemp=p;    for (int j=0; j < 8; j++) {      String hexVal=Integer.toHexString(byteBuffer[ptemp] & 0xff);      if (hexVal.length() == 1) {        hexVal="0" + hexVal;      }      outputBuilder.append(hexVal + " ");      ptemp++;    }    outputBuilder.append("    ");    for (int j=0; j < 8; j++) {      int b=0xff & byteBuffer[p];      if (b > 32 && b < 127) {        outputBuilder.append((char)b + " ");      } else {        outputBuilder.append(". ");      }      p++;    }    outputBuilder.append("\n");  }  int n=0;  for (int i=p; i < length; i++) {    String hexVal=Integer.toHexString(byteBuffer[i] & 0xff);    if (hexVal.length() == 1) {      hexVal="0" + hexVal;    }    outputBuilder.append(hexVal + " ");    n++;  }  for (int i=n; i < 8; i++) {    outputBuilder.append("   ");  }  outputBuilder.append("    ");  for (int i=p; i < length; i++) {    int b=0xff & byteBuffer[i];    if (b > 32 && b < 127) {      outputBuilder.append((char)b + " ");    } else {      outputBuilder.append(". ");    }  }  outputBuilder.append("\n");  return outputBuilder.toString();}  }
class C{  public void displaySession(int position){  try {    Intent intent=new Intent(this,MessagingSessionView.class);    String sessionId=sessions.get(position).getSessionId();    intent.putExtra(MessagingSessionView.EXTRA_MODE,MessagingSessionView.MODE_OPEN);    intent.putExtra(MessagingSessionView.EXTRA_SESSION_ID,sessionId);    startActivity(intent);  } catch (  RcsServiceException e) {    showExceptionThenExit(e);  }}  }
class C{  public void schedule(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,false);}  }
class C{  public XmlJmapper toXStream(){  return xmlJmapper;}  }
class C{  public static synchronized PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public DtoCarrierSlaServiceImpl(final DtoFactory dtoFactory,final GenericService<CarrierSla> carrierSlaGenericService,final AdaptersRepository AdaptersRepository){  super(dtoFactory,carrierSlaGenericService,AdaptersRepository);}  }
class C{  public static String convertToRGB(int color){  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + red + green+ blue;}  }
class C{  private void reportProgress(State state,InnerState innerState){  long now=System.currentTimeMillis();  if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) {    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownloadCurrentBytes(mInfo);    innerState.mBytesNotified=innerState.mBytesSoFar;    innerState.mTimeLastNotification=now;    long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar;    if (Constants.LOGVV) {      Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes);      Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength);    }    mService.notifyUpdateBytes(totalBytesSoFar);  }}  }
class C{  public CommitTask(final Note bug,final String comment,final boolean close){  Log.d(DEBUG_TAG,bug.getDescription() + " >" + comment+ "< "+ close);  this.bug=bug;  this.comment=comment;  this.close=close;}  }
class C{  public void begin(float fbufWidth,float fbufHeight,boolean flip){  if (begun)   throw new IllegalStateException(getClass().getSimpleName() + " mismatched begin()");  begun=true;}  }
class C{  @Override public int hashCode(){  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("hashCode()");  }  return message.hashCode();}  }
class C{  protected int index(int slice,int row,int column){  return sliceZero + slice * sliceStride + rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  private StorageSystem createStorageSystem(boolean isVplex){  StorageSystem ss=new StorageSystem();  URI storageSystemId=URIUtil.createId(StorageSystem.class);  ss.setId(storageSystemId);  if (isVplex) {    ss.setLabel("VPLEX+FNM00114300288:FNM00114600001");    ss.setNativeGuid("VPLEX+FNM00114300288:FNM00114600001");    ss.setSystemType("vplex");  } else {    ss.setLabel("SYMMETRIX+000195701573");    ss.setNativeGuid("SYMMETRIX+000195701573");    ss.setSystemType("vmax");  }  _dbClient.createObject(ss);  return ss;}  }
class C{  public static void start(Context context,URL url,UpdatePolicy updatePolicy){  RemoteNotifications remoteNotifications=new RemoteNotifications(context,url);  remoteNotifications.updateNotificationsFromServer(updatePolicy);  remoteNotifications.showPendingNotificationsToUser();}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent te){  Vector<TextListener> l;synchronized (this) {    l=(Vector<TextListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptText(te);    }  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="List";  uniqueId=null;  key="";  defaultValue="";  allowedValues="";  description="";}  }
class C{  public void marshal(Object obj,HierarchicalStreamWriter writer,MarshallingContext context){  writer.setValue(((ElementoConTexto)obj).get());}  }
class C{  public static <T>void writeCollection(BinaryRawWriterEx writer,Collection<T> col,@Nullable PlatformWriterClosure<T> writeClo){  writeCollection(writer,col,writeClo,null);}  }
class C{  public static OrganizationDataException convertToApi(org.oscm.internal.types.exception.OrganizationDataException oldEx){  return convertExceptionToApi(oldEx,OrganizationDataException.class);}  }
class C{  public void changeProgram(IFilter newFilter){  mFilter.releaseProgram();  mFilter=newFilter;}  }
class C{  @Inject public SelectGruntTaskPagePresenter(SelectGruntTaskPageView view,RunnerManagerPresenter runnerManagerPresenter,ProjectServiceClient projectServiceClient,DtoFactory dtoFactory,NotificationManager notificationManager,AppContext appContext){  this.view=view;  this.runnerManagerPresenter=runnerManagerPresenter;  this.dtoFactory=dtoFactory;  this.projectServiceClient=projectServiceClient;  this.appContext=appContext;  this.notificationManager=notificationManager;  view.setDelegate(this);}  }
class C{  public static boolean isDataCompressed(){  return compressData;}  }
class C{  public void testTwoChars() throws Exception {  CharacterRunAutomaton single=new CharacterRunAutomaton(new RegExp("..").toAutomaton());  Analyzer a=new MockAnalyzer(random(),single,false);  assertAnalyzesTo(a,"foobar",new String[]{"fo","ob","ar"},new int[]{0,2,4},new int[]{2,4,6});  assertTokenStreamContents(a.tokenStream("bogus","fooba"),new String[]{"fo","ob"},new int[]{0,2},new int[]{2,4},new int[]{1,1},new Integer(5));  checkRandomData(random(),a,100);}  }
class C{  public final void mulTransposeLeft(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20;    this.m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21;    this.m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20;    this.m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21;    this.m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20;    this.m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21;    this.m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20;    m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21;    m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20;    m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21;    m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20;    m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21;    m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  public void insertAtPin(Pin pin){  Pin otherPin=pin.getConnectedPin();  Pin.interconnect(pin,pin1);  Pin.interconnect(pin2,otherPin);  if (logPinMessages) {    System.out.println("Connecting " + pin + " to "+ pin1);    System.out.println("Connecting " + pin2 + " to "+ otherPin);  }}  }
class C{  public final void println(float f) throws IOException {  println(String.valueOf(f));}  }
class C{  public void threadUnexpectedException(){  threadFailed=true;  fail("Unexpected exception");}  }
class C{  private String[] spliterator(String phrase){  String[] split=phrase.split(" ");  String[] out=new String[split.length];  for (int ix=1; ix < split.length; ix++) {    String temp=split[ix - 1];    temp+=" " + split[ix];    out[ix - 1]=temp;  }  return out;}  }
class C{  public String globalInfo(){  return "Class that splits a BallNode of a ball tree based on the " + "median value of the widest dimension of the points in the ball. " + "It essentially implements Omohundro's  KD construction algorithm.";}  }
class C{  public boolean isFirebirdOnly(){  if (firebirdOnly == null) {    return false;  } else {    return firebirdOnly;  }}  }
class C{  public IdentityArrayList(final Iterator<? extends K> i){  this();  while (i.hasNext())   this.add(i.next());}  }
class C{  public void printTimeMemory(String s,long time){  println(getMemoryUsed() + " MB: " + s+ " ms: "+ time);}  }
class C{  public void testDetectLanguageAf(){  LOGGER.debug("detectLanguage Af");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "af.wikipedia.org-wiki-Suider-Afrika_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("af",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("af",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("af",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public Object[] toArray(){  return Arrays.copyOf(queue,size);}  }
class C{  public Zoom(AbstractChart chart,boolean in,float rate){  super(chart);  mZoomIn=in;  setZoomRate(rate);}  }
class C{  public QueryFirstResponse QueryFirst(RequestHeader RequestHeader,ViewDescription View,NodeTypeDescription[] NodeTypes,ContentFilter Filter,UnsignedInteger MaxDataSetsToReturn,UnsignedInteger MaxReferencesToReturn) throws ServiceFaultException, ServiceResultException {  QueryFirstRequest req=new QueryFirstRequest(RequestHeader,View,NodeTypes,Filter,MaxDataSetsToReturn,MaxReferencesToReturn);  return (QueryFirstResponse)channel.serviceRequest(req);}  }
class C{  private static void copyQueryHints(BOp node,final Properties queryHints){  if (queryHints == null)   return;  if (!(node instanceof QueryNodeBase))   return;  final QueryNodeBase nodeAsQN=(QueryNodeBase)node;  final Enumeration<?> pnames=queryHints.propertyNames();  while (pnames.hasMoreElements()) {    final String name=(String)pnames.nextElement();    final String value=queryHints.getProperty(name);    final String curHint=nodeAsQN.getQueryHint(name);    if (curHint == null) {      nodeAsQN.setQueryHint(name,value);    }  }}  }
class C{  public static String[] listServices() throws RemoteException {  try {    return getIServiceManager().listServices();  } catch (  RemoteException e) {    Log.e(TAG,"error in listServices",e);    return null;  }}  }
class C{  public boolean isServer(){  if (this.firstTransactionSeen == false)   return this.serverTransactionFlag; else   return this.firstTransactionIsServerTransaction;}  }
class C{  public G load(Reader reader,G g) throws IOException {  BufferedReader br=new BufferedReader(reader);  String curLine=skip(br,v_pred);  if (curLine == null)   return g;  StringTokenizer st=new StringTokenizer(curLine);  st.nextToken();  int num_vertices=Integer.parseInt(st.nextToken());  List<V> id=null;  if (vertex_factory != null) {    for (int i=1; i <= num_vertices; i++)     g.addVertex(vertex_factory.get());    id=new ArrayList<V>(g.getVertices());  }  curLine=null;  while (br.ready()) {    curLine=br.readLine();    if (curLine == null || t_pred.apply(curLine))     break;    if (curLine == "")     continue;    try {      readVertex(curLine,id,num_vertices);    } catch (    IllegalArgumentException iae) {      br.close();      reader.close();      throw iae;    }  }  curLine=readArcsOrEdges(curLine,br,g,id,edge_factory);  readArcsOrEdges(curLine,br,g,id,edge_factory);  br.close();  reader.close();  return g;}  }
class C{  public AttributeMetaData(AttributeRole role,ExampleSet exampleSet,boolean shortened){  this(role.getAttribute().getName(),role.getAttribute().getValueType(),role.getSpecialName());  Attribute att=role.getAttribute();  if (att.isNominal()) {    int maxValues=shortened ? getMaximumNumberOfNominalValues() : Integer.MAX_VALUE;    valueSet.clear();    for (    String value : att.getMapping().getValues()) {      if (shortened && value.length() > 100) {        value=value.substring(0,100);      }      valueSet.add(value);      maxValues--;      if (maxValues == 0) {        break;      }    }    valueSetRelation=SetRelation.EQUAL;  }  if (exampleSet != null) {    numberOfMissingValues=new MDInteger((int)exampleSet.getStatistics(att,Statistics.UNKNOWN));    if (att.isNumerical() || Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(),Ontology.DATE_TIME)) {      valueSetRelation=SetRelation.EQUAL;      valueRange=new Range(exampleSet.getStatistics(att,Statistics.MINIMUM),exampleSet.getStatistics(att,Statistics.MAXIMUM));      setMean(new MDReal(exampleSet.getStatistics(att,Statistics.AVERAGE)));    }    if (att.isNominal()) {      double modeIndex=exampleSet.getStatistics(att,Statistics.MODE);      if (!Double.isNaN(modeIndex) && modeIndex >= 0 && modeIndex < att.getMapping().size()) {        setMode(att.getMapping().mapIndex((int)modeIndex));      }    }  } else {    numberOfMissingValues=new MDInteger();    if (att.isNumerical()) {      setMean(new MDReal());    }    if (att.isNominal()) {      setMode(null);    }  }  this.annotations.putAll(att.getAnnotations());}  }
class C{  @Override public String toString(){  String str="";  for (  String q : queryVars) {    str+=q + ",";  }  if (!queryVars.isEmpty()) {    str=str.substring(0,str.length() - 1);  }  if (!evidence.isEmpty()) {    str+="|";    if (!evidence.isEmpty()) {      str+=evidence;    }  }  str+="";  if (this instanceof ProbQuery) {    return "P(" + str + ")";  } else   if (this instanceof UtilQuery) {    return "U(" + str + ")";  } else {    return "Reduce(" + str + ")";  }}  }
class C{  public RrdDefTemplate(String xmlString) throws IOException {  super(xmlString);}  }
class C{  public static String makeRgbString(int value){  return "rgb(" + Color.red(value) + ", "+ Color.green(value)+ ", "+ Color.blue(value)+ ")";}  }
class C{  public boolean chunkExists(int i,int i1){  return provider.chunkExists(i,i1);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String nodeName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("title");  nodeName=domesticAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","title",nodeName);}  }
class C{  public static void main(String... args) throws Exception {  int port=9099;  String connect="192.168.0.3";  boolean file=false;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-port")) {      port=Integer.parseInt(args[++i]);    } else     if (args[i].equals("-connect")) {      connect=args[++i];    } else     if (args[i].equals("-file")) {      file=true;    }  }  test(connect,port,file);}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void picture(double x,double y,String s,double w,double h){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y); else {    offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  }  draw();}  }
class C{  public int[] cleanOffsetOfDestFromSources(int[] sourcesOffsets){  int[] cleaned=new int[numSources];  int countOfSources=0;  for (int index=0; index < sourcesOffsets.length; index++) {    if (sourcesOffsets[index] != 0) {      if (countOfSources == numSources) {        countOfSources++;        break;      }      cleaned[countOfSources]=sourcesOffsets[index];      countOfSources++;    }  }  if (countOfSources < numSources) {    throw new RuntimeException("Too few sources in offsets");  } else   if (countOfSources > numSources) {    throw new RuntimeException("Too many sources in offsets");  }  return cleaned;}  }
class C{  public SubscriptionDiagnosticsDataType clone(){  SubscriptionDiagnosticsDataType result=new SubscriptionDiagnosticsDataType();  result.SessionId=SessionId;  result.SubscriptionId=SubscriptionId;  result.Priority=Priority;  result.PublishingInterval=PublishingInterval;  result.MaxKeepAliveCount=MaxKeepAliveCount;  result.MaxLifetimeCount=MaxLifetimeCount;  result.MaxNotificationsPerPublish=MaxNotificationsPerPublish;  result.PublishingEnabled=PublishingEnabled;  result.ModifyCount=ModifyCount;  result.EnableCount=EnableCount;  result.DisableCount=DisableCount;  result.RepublishRequestCount=RepublishRequestCount;  result.RepublishMessageRequestCount=RepublishMessageRequestCount;  result.RepublishMessageCount=RepublishMessageCount;  result.TransferRequestCount=TransferRequestCount;  result.TransferredToAltClientCount=TransferredToAltClientCount;  result.TransferredToSameClientCount=TransferredToSameClientCount;  result.PublishRequestCount=PublishRequestCount;  result.DataChangeNotificationsCount=DataChangeNotificationsCount;  result.EventNotificationsCount=EventNotificationsCount;  result.NotificationsCount=NotificationsCount;  result.LatePublishRequestCount=LatePublishRequestCount;  result.CurrentKeepAliveCount=CurrentKeepAliveCount;  result.CurrentLifetimeCount=CurrentLifetimeCount;  result.UnacknowledgedMessageCount=UnacknowledgedMessageCount;  result.DiscardedMessageCount=DiscardedMessageCount;  result.MonitoredItemCount=MonitoredItemCount;  result.DisabledMonitoredItemCount=DisabledMonitoredItemCount;  result.MonitoringQueueOverflowCount=MonitoringQueueOverflowCount;  result.NextSequenceNumber=NextSequenceNumber;  result.EventQueueOverFlowCount=EventQueueOverFlowCount;  return result;}  }
class C{  public static String escapeUnicode(String s){  int len=s.length();  int i=0;  while (i < len) {    char ch=s.charAt(i);    if (ch > 255) {      StringBuilder buf=new StringBuilder();      buf.append(s.substring(0,i));      while (i < len) {        ch=s.charAt(i);        if (ch > 255) {          buf.append("\\u");          buf.append(Character.forDigit((ch >> 12) % 16,16));          buf.append(Character.forDigit((ch >> 8) % 16,16));          buf.append(Character.forDigit((ch >> 4) % 16,16));          buf.append(Character.forDigit((ch) % 16,16));        } else {          buf.append(ch);        }        i++;      }      s=buf.toString();    } else {      i++;    }  }  return s;}  }
class C{  @SuppressWarnings("unchecked") public <T>T loadAs(InputStream input,Class<T> type){  return (T)loadFromReader(new StreamReader(new UnicodeReader(input)),type);}  }
class C{  public synchronized void warning(String s){  println("WARNING:\n" + s,ALL_MESSAGE_LOGS,true);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4),entryOf(k5,v5));}  }
class C{  public static int readUnsignedVarint(ByteBuffer buffer) throws IOException {  int val=0;  int bits=0;  while (true) {    final int data=buffer.get();    val|=(data & 0x7F) << bits;    if ((data & 0x80) == 0) {      return val;    }    bits+=7;    if (bits > 35) {      throw new IOException("Variable length quantity is too long for expected integer.");    }  }}  }
class C{  public static Request createConnectionBindRequest(int connectionIdValue) throws IllegalArgumentException {  Request connectionBindRequest=new Request();  connectionBindRequest.setMessageType(Message.CONNECTION_BIND_REQUEST);  ConnectionIdAttribute connectionIdAttribute=AttributeFactory.createConnectionIdAttribute(connectionIdValue);  connectionBindRequest.putAttribute(connectionIdAttribute);  return connectionBindRequest;}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public Vertex allowCorrection(Vertex source,Vertex user){  if (shouldCorrect(null,user)) {    return source.getNetwork().createVertex(Primitive.TRUE);  }  return source.getNetwork().createVertex(Primitive.FALSE);}  }
class C{  private SemanticHighlightings(){}  }
class C{  public DExamineSsl(JFrame parent,KseFrame kseFrame){  super(parent,res.getString("DExamineSsl.Title"),Dialog.ModalityType.DOCUMENT_MODAL);  this.kseFrame=kseFrame;  initComponents();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static boolean cs_pvec(int[] p,double[] b,double[] x,int n){  int k;  if (x == null || b == null)   return (false);  for (k=0; k < n; k++)   x[k]=b[p != null ? p[k] : k];  return (true);}  }
class C{  public void buildDecList(Instances data,boolean leaf) throws Exception {  Instances[] localInstances;  int ind;  int i, j;  double sumOfWeights;  NoSplit noSplit;  m_train=null;  m_test=null;  m_isLeaf=false;  m_isEmpty=false;  m_sons=null;  indeX=0;  sumOfWeights=data.sumOfWeights();  noSplit=new NoSplit(new Distribution(data));  if (leaf) {    m_localModel=noSplit;  } else {    m_localModel=m_toSelectModel.selectModel(data);  }  if (m_localModel.numSubsets() > 1) {    localInstances=m_localModel.split(data);    data=null;    m_sons=new ClassifierDecList[m_localModel.numSubsets()];    i=0;    do {      i++;      ind=chooseIndex();      if (ind == -1) {        for (j=0; j < m_sons.length; j++) {          if (m_sons[j] == null) {            m_sons[j]=getNewDecList(localInstances[j],true);          }        }        if (i < 2) {          m_localModel=noSplit;          m_isLeaf=true;          m_sons=null;          if (Utils.eq(sumOfWeights,0)) {            m_isEmpty=true;          }          return;        }        ind=0;        break;      } else {        m_sons[ind]=getNewDecList(localInstances[ind],false);      }    } while ((i < m_sons.length) && (m_sons[ind].m_isLeaf));    indeX=chooseLastIndex();  } else {    m_isLeaf=true;    if (Utils.eq(sumOfWeights,0)) {      m_isEmpty=true;    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getGraph() == null) {    throw new NullPointerException();  }}  }
class C{  public void bind(Name name,Object obj) throws NamingException {  if (name.isEmpty()) {    throw (new InvalidNameException("RegistryContext: Cannot bind empty name"));  }  try {    registry.bind(name.get(0),encodeObject(obj,name.getPrefix(1)));  } catch (  AlreadyBoundException e) {    NamingException ne=new NameAlreadyBoundException(name.get(0));    ne.setRootCause(e);    throw ne;  }catch (  RemoteException e) {    throw (NamingException)wrapRemoteException(e).fillInStackTrace();  }}  }
class C{  public StateInvariantError(String s){  super(s);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.CATCH_VARIABLE;}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  public final void sample(){  long count=_count.get();  long lastCount=_lastAvgCount.getAndSet(count);  long time=_time.get();  long lastTime=_lastAvgTime.getAndSet(time);  if (count == lastCount)   _value=0; else   _value=_scale * (time - lastTime) / (double)(count - lastCount);}  }
class C{  @Override public boolean supportsOuterJoins(){  debugCodeCall("supportsOuterJoins");  return true;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public static synchronized KDTree generate(IPoint[] points){  if (points.length == 0) {    return null;  }  IMultiPoint others[]=new IMultiPoint[points.length];  for (int i=0; i < points.length; i++) {    if (points[i] instanceof IMultiPoint) {      others[i]=(IMultiPoint)points[i];    } else {      others[i]=new TwoDPoint(points[i].getX(),points[i].getY());    }  }  return generate(others);}  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  private void startClient(String host,int port) throws IOException {  if (null != client) {    client.start();    client.connect(5000,host,port);  }}  }
class C{  public InvisibleMemberDescription(IEObjectDescription delegate,String accessorSuggestion){  super(delegate);  this.accessModifierSuggestion=accessorSuggestion;}  }
class C{  private DataFilterCriterion(){}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  public ClusterNode localNode(){  if (locNode == null)   locNode=ctx.discovery().localNode();  return locNode;}  }
class C{  @Override public MultivariateTable queryProb(Query.ProbQuery query){  BNetwork network=query.getNetwork();  Set<String> queryVars=new HashSet<String>(query.getQueryVars());  Assignment evidence=query.getEvidence();  Map<Assignment,Double> fullJoint=getFullJoint(network,false);  SortedMap<String,Set<Value>> queryValues=new TreeMap<String,Set<Value>>();  for (  ChanceNode n : network.getChanceNodes()) {    if (queryVars.contains(n.getId())) {      queryValues.put(n.getId(),n.getValues());    }  }  Set<Assignment> queryAssigns=InferenceUtils.getAllCombinations(queryValues);  MultivariateTable.Builder queryResult=new MultivariateTable.Builder();  for (  Assignment queryA : queryAssigns) {    double sum=0.0f;    for (    Assignment a : fullJoint.keySet()) {      if (a.contains(queryA) && a.contains(evidence)) {        sum+=fullJoint.get(a);      }    }    queryResult.addRow(queryA,sum);  }  queryResult.normalise();  return queryResult.build();}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ARRAY_LITERAL__ELEMENTS:    getElements().clear();  return;case N4JSPackage.ARRAY_LITERAL__TRAILING_COMMA:setTrailingComma(TRAILING_COMMA_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  protected Map<String,Double> loadGeneralInquirer() throws FileNotFoundException {  Map<String,Double> inquirernMap=new HashMap<String,Double>();  File file=new File("resources/lexi/inquirerbasicttabsclean");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    if (line.length == 186) {      if (line[3].equals("Negativ")) {        inquirernMap.put(line[0].toLowerCase(),-1.0);      } else {        if (line[2].equals("Positiv")) {          inquirernMap.put(line[0].toLowerCase(),1.0);        }      }    }  }  scanner.close();  return inquirernMap;}  }
class C{  public void startTracking(){  if (tracking) {    return;  }  tracker.reset();synchronized (gyroBiasEstimatorMutex) {    if (gyroBiasEstimator != null) {      gyroBiasEstimator.reset();    }  }  firstGyroValue=true;  sensorEventProvider.registerListener(this);  sensorEventProvider.start();  tracking=true;}  }
class C{  public static long[] hashToLongs(String datum,long seed){  if ((datum == null) || datum.isEmpty()) {    return null;  }  byte[] data=datum.getBytes(UTF_8);  return hash(data,seed);}  }
class C{  public NamedAttachable(final String name,final GameData data){  super(name,data);}  }
class C{  public boolean migrate(final MigrationResources resources){  LOGGER.debug("Start migration");  for (  final Migration migration : resources.getMigrations()) {    final MigrationType type=migration.getType();    final int migrationVersion=migration.getVersion();    final int version=versioner.getCurrentVersion(type);    LOGGER.info("Db is version {} for type {}.",version,type.name());    LOGGER.info("Compare {} migration version {} with description {}",type.name(),migrationVersion,migration.getDescription());    if (migrationVersion <= version) {      LOGGER.warn("Skipping migration [{}] with version {} since db is on higher version {}.",migration.getDescription(),migrationVersion,version);      continue;    }    migration.setSession(session);    final long start=System.currentTimeMillis();    LOGGER.info("Start executing migration to version {}.",migrationVersion);    try {      migration.execute();    } catch (    final MigrationException e) {      LOGGER.error("Failed to execute migration version {}, exception {}!",migrationVersion,e.getMessage());      LOGGER.debug("Exception stack trace: {}",e);      return false;    }    final long end=System.currentTimeMillis();    final long seconds=(end - start) / 1000;    LOGGER.info("Migration [{}] to version {} finished in {} seconds.",migration.getDescription(),migrationVersion,seconds);    if (!versioner.updateVersion(migration)) {      LOGGER.error("Db schema update failed for migration version {}!",migrationVersion);      return false;    }  }  return true;}  }
class C{  private double calculateSingleTraitLikelihood(ContrastedTraitNode contrastNode){  SimpleTree contrastTree=new SimpleTree(contrastNode);  double s2=0.0;  double sssContrast=0.0;  double slogCV=0.0;  for (int i=0; i < contrastTree.getInternalNodeCount(); i++) {    ContrastedTraitNode ctNode=(ContrastedTraitNode)contrastTree.getInternalNode(i);    double contrast=ctNode.getTraitContrasts()[0];    double cv=ctNode.getContrastVariance();    sssContrast+=(contrast * contrast) / cv;    slogCV+=Math.log(cv);    if (ctNode.isRoot()) {      slogCV+=Math.log(ctNode.getNodeVariance());    }  }  double tl=0.0;  for (int i=0; i < contrastTree.getNodeCount(); i++) {    NodeRef node=contrastTree.getNode(i);    if (!contrastTree.isRoot(node)) {      tl+=contrastTree.getBranchLength(node);    }  }  s2=sssContrast / contrastTree.getInternalNodeCount();  int n=contrastTree.getInternalNodeCount() + 1;  double logL=n * Math.log(2.0 * Math.PI * s2);  logL+=slogCV;  logL+=sssContrast / s2;  logL=-logL / 2.0;  return logL;}  }
class C{  private Style parseStyleForASS(String[] line,String[] styleFormat,int index,boolean isASS,String warnings){  Style newStyle=new Style(Style.defaultID());  if (line.length != styleFormat.length) {    warnings+="incorrectly formated line at " + index + "\n\n";  } else {    for (int i=0; i < styleFormat.length; i++) {      if (styleFormat[i].trim().equalsIgnoreCase("Name")) {        newStyle.iD=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("Fontname")) {        newStyle.font=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("Fontsize")) {        newStyle.fontSize=line[i].trim();      } else       if (styleFormat[i].trim().equalsIgnoreCase("PrimaryColour")) {        String color=line[i].trim();        if (isASS) {          if (color.startsWith("&H"))           newStyle.color=Style.getRGBValue("&HAABBGGRR",color); else           newStyle.color=Style.getRGBValue("decimalCodedAABBGGRR",color);        } else {          if (color.startsWith("&H"))           newStyle.color=Style.getRGBValue("&HBBGGRR",color); else           newStyle.color=Style.getRGBValue("decimalCodedBBGGRR",color);        }      } else       if (styleFormat[i].trim().equalsIgnoreCase("BackColour")) {        String color=line[i].trim();        if (isASS) {          if (color.startsWith("&H"))           newStyle.backgroundColor=Style.getRGBValue("&HAABBGGRR",color); else           newStyle.backgroundColor=Style.getRGBValue("decimalCodedAABBGGRR",color);        } else {          if (color.startsWith("&H"))           newStyle.backgroundColor=Style.getRGBValue("&HBBGGRR",color); else           newStyle.backgroundColor=Style.getRGBValue("decimalCodedBBGGRR",color);        }      } else       if (styleFormat[i].trim().equalsIgnoreCase("Bold")) {        newStyle.bold=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Italic")) {        newStyle.italic=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Underline")) {        newStyle.underline=Boolean.parseBoolean(line[i].trim());      } else       if (styleFormat[i].trim().equalsIgnoreCase("Alignment")) {        int placement=Integer.parseInt(line[i].trim());        if (isASS) {switch (placement) {case 1:            newStyle.textAlign="bottom-left";          break;case 2:        newStyle.textAlign="bottom-center";      break;case 3:    newStyle.textAlign="bottom-right";  break;case 4:newStyle.textAlign="mid-left";break;case 5:newStyle.textAlign="mid-center";break;case 6:newStyle.textAlign="mid-right";break;case 7:newStyle.textAlign="top-left";break;case 8:newStyle.textAlign="top-center";break;case 9:newStyle.textAlign="top-right";break;default :warnings+="undefined alignment for style at line " + index + "\n\n";}} else {switch (placement) {case 9:newStyle.textAlign="bottom-left";break;case 10:newStyle.textAlign="bottom-center";break;case 11:newStyle.textAlign="bottom-right";break;case 1:newStyle.textAlign="mid-left";break;case 2:newStyle.textAlign="mid-center";break;case 3:newStyle.textAlign="mid-right";break;case 5:newStyle.textAlign="top-left";break;case 6:newStyle.textAlign="top-center";break;case 7:newStyle.textAlign="top-right";break;default :warnings+="undefined alignment for style at line " + index + "\n\n";}}}}}return newStyle;}  }
class C{  protected void updateAgendaUnary(final Model model,final AgendaItem newItem,final Agenda agenda){  final SyntaxTreeNode parse=newItem.getParse();  final List<UnaryRule> ruleProductions=unaryRules.get(parse.getCategory());  if (ruleProductions.isEmpty()) {    return;  }  final boolean isNotPunctuationNode=parse.getRuleType() != RuleType.LP && parse.getRuleType() != RuleType.RP;  for (  final UnaryRule unaryRule : ruleProductions) {    if (isNotPunctuationNode || unaryRule.isTypeRaising()) {      SyntaxTreeNodeUnary newNode;      if (usingDependencies) {        final List<UnlabelledDependency> resolvedDependencies=new ArrayList<>();        newNode=new SyntaxTreeNodeUnary(unaryRule.getResult(),parse,unaryRule.getDependencyStructureTransformation().apply(parse.getDependencyStructure(),resolvedDependencies),unaryRule,resolvedDependencies);      } else {        newNode=new SyntaxTreeNodeUnary(unaryRule.getResult(),parse,null,unaryRule,null);      }      if (isValidStep(newNode)) {        agenda.add(model.unary(newItem,newNode,unaryRule));      }    }  }}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  @Override public Value sample(Assignment condition){  if (condition.size() != conditionalVars.size()) {    condition=condition.getTrimmed(conditionalVars);  }  IndependentDistribution subdistrib=table.get(condition);  if (subdistrib != null) {    return subdistrib.sample();  }  return ValueFactory.none();}  }
class C{  public void collectiveUpdated(ContributionBox peer){  Iterator<ContributionBox> contributions=collective.getContributions().iterator();  while (contributions.hasNext()) {    ContributionBox cb=contributions.next();    System.out.println("Contribution from " + cb.contributor.getHost().toString() + "\n"+ cb.contribution+ "\n");  }}  }
class C{  public RecoveryStats recoveryStats(){  return recoveryStats;}  }
class C{  private void dropDbTable(SQLiteDatabase db,String tableName){  if (LOCAL_LOGV)   Log.d(TAG,"Dropping table and index for: " + tableName);  String dropTableSql=String.format(DROP_TABLE_SQL_FORMAT,tableName);  db.execSQL(dropTableSql);  String dropIndexSql=String.format(DROP_INDEX_SQL_FORMAT,tableName,1);  db.execSQL(dropIndexSql);}  }
class C{  public CookieManager(CookieStore store,CookiePolicy cookiePolicy){  policyCallback=(cookiePolicy == null) ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy;  if (store == null) {    cookieJar=new InMemoryCookieStore();  } else {    cookieJar=store;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  String nodeName;  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  htmlExpected.add("class");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("class");  expected.add("dir");  java.util.Collection actual=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  for (int indexN10070=0; indexN10070 < attributes.getLength(); indexN10070++) {    child=(Node)attributes.item(indexN10070);    nodeName=child.getNodeName();    actual.add(nodeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("attrName_html",htmlExpected,actual);  } else {    assertEquals("attrName",expected,actual);  }}  }
class C{  public boolean discharge(ItemStack stack,int limit){  if (stack == null || !Info.isIc2Available())   return false;  double amount=capacity - energyStored;  if (amount <= 0)   return false;  if (limit > 0 && limit < amount)   amount=limit;  amount=ElectricItem.manager.discharge(stack,amount,tier,limit > 0,true,false);  energyStored+=amount;  return amount > 0;}  }
class C{  public ClassPool(){  this(null);}  }
class C{  public static int minInt(int a,float b){  return min(a,floor(b));}  }
class C{  public static boolean addLiquidTransposerFillRecipe(ItemStack aEmptyContainer,FluidStack aLiquid,ItemStack aFullContainer,int aMJ){  aFullContainer=GT_OreDictUnificator.get(true,aFullContainer);  if (aEmptyContainer == null || aFullContainer == null || aLiquid == null)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.liquidtransposerfilling,aFullContainer,true))   return false;  try {    ThermalExpansion.addTransposerFill(aMJ * 10,aEmptyContainer,aFullContainer,aLiquid,false);  } catch (  Throwable e) {  }  return true;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.284 -0500",hash_original_method="07424AD55498F7F8FBBB544D5FCCF9DD",hash_generated_method="1530ABD48035BF9C774F5A5B50B67F62") public static boolean isLetterOrDigit(char c){  return isLetterOrDigit((int)c);}  }
class C{  public static Bitmap loadBitmap(String url){  Bitmap bitmap;  try {    InputStream is=(InputStream)new URL(url).getContent();    if (is == null)     return null;    bitmap=BitmapFactory.decodeStream(new FlushedInputStream(is));  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return bitmap;}  }
class C{  private boolean writeRequestHeadersEagerly(){  return callerWritesRequestBody && permitsRequestBody(networkRequest) && requestBodyOut == null;}  }
class C{  public boolean removeChild(int node){  while (getChildCount(node) > 0) {    removeChild(getLastChildRow(node));  }  return removeNode(node);}  }
class C{  public void addItem(Item item){synchronized (items) {    items.add(item);  }}  }
class C{  @Override public JsonNode deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {switch (jp.getCurrentToken()) {case START_OBJECT:    return deserializeObject(jp,ctxt,ctxt.getNodeFactory());case START_ARRAY:  return deserializeArray(jp,ctxt,ctxt.getNodeFactory());default :return deserializeAny(jp,ctxt,ctxt.getNodeFactory());}}  }
class C{  public void addCoveredClass(Class<?> c){  executionResults.addCoveredClass(c);}  }
class C{  public String nextVariableName(String base){  if (base.contains(":")) {    throw new IllegalArgumentException("Base names may not contain colons: " + base);  }  int i=0;  loop:   while (true) {    String name=base + (++i);    for (    Node node1 : getGraph().getNodes()) {      if (node1.getName().equals(name)) {        continue loop;      }    }    break;  }  return base + i;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public JBoss7xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_JRMP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_JMX_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_OSGI_HTTP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_REMOTING_TRANSPORT_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_DEPLOYMENT_DIR,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_MODULES_DIR,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CLI_ONLINE_SCRIPT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);}  }
class C{  public Vector ls(String dirName) throws IOException {  byte[] handle=openDirectory(dirName);  Vector result=scanDirectory(handle);  closeHandle(handle);  return result;}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  private static void addWrapperRequests(Requests requests,Map<SimpleStringPattern,KeywordSubstitution> wrapperMap){  requests.addArgumentRequest("-I !");  for (  final SimpleStringPattern pattern : wrapperMap.keySet()) {    final KeywordSubstitution keywordSubstitutionOptions=wrapperMap.get(pattern);    @NonNls final StringBuilder buffer=new StringBuilder();    buffer.append(pattern.toString());    buffer.append(" -k '");    buffer.append(keywordSubstitutionOptions.toString());    buffer.append("'");    requests.addArgumentRequest("-W");    requests.addArgumentRequest(buffer.toString());  }}  }
class C{  public void add(@NotNull VirtualFile file){synchronized (myDefinitelyUntrackedFiles) {    myDefinitelyUntrackedFiles.add(file);  }}  }
class C{  public boolean isUseMipMaps(){  return useMipMaps;}  }
class C{  public void fillRect(int x,int y,int width,int height){  addDrawingRect(new Rectangle2D.Float(x,y,width,height));  mPrintMetrics.fill(this);}  }
class C{  public Atanh(){  super(Number.class,Number.class);}  }
class C{  public void startDocument() throws SAXException {  int doc=addNode(DTM.DOCUMENT_NODE,DTM.DOCUMENT_NODE,DTM.NULL,DTM.NULL,0,true);  m_parents.push(doc);  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public Password constructUserPassword(String username){  Password password=new Password(username,null,null);  PasswordHistory ph=getPasswordHistory(username);  password.setPasswordHistory(ph);  return password;}  }
class C{  protected void createFieldEditors(){  addField(new BooleanFieldEditor(ITLCPreferenceConstants.I_TLC_POPUP_ERRORS,"&Always pop up TLC errors view",getFieldEditorParent()));  addField(new BooleanFieldEditor(ITLCPreferenceConstants.I_TLC_REVALIDATE_ON_MODIFY,"&Re-validate model on save",getFieldEditorParent()));  addField(new IntegerFieldEditor(ITLCPreferenceConstants.I_TLC_MAXIMUM_HEAP_SIZE_DEFAULT,"Maximum JVM Heap Size default in % of physical system memory",getFieldEditorParent()));  addField(new IntegerFieldEditor(ITLCPreferenceConstants.I_TLC_AUTO_LOCK_MODEL_TIME,"TLC run auto-lock time (in minutes)",getFieldEditorParent()));  IntegerFieldEditor integerFieldEditor=new IntegerFieldEditor(ITLCPreferenceConstants.I_TLC_TRACE_MAX_SHOW_ERRORS,"Maximum tail length of Trace explorer states",getFieldEditorParent());  integerFieldEditor.setValidRange(1,Integer.MAX_VALUE);  addField(integerFieldEditor);}  }
class C{  public static double loss(double pred,double y){  final double x=-y * pred;  if (x >= 30)   return x; else   if (x <= -30)   return 0;  return log(1 + exp(x));}  }
class C{  public void addKeyword(final String s,final V value){  root.add(s,value);}  }
class C{  public static DeltaSextadTest serializableInstance(){  return new DeltaSextadTest(ColtDataSet.serializableInstance());}  }
class C{  public boolean isNumeric(){  if (m_displayType == 0)   return m_value instanceof BigDecimal;  return DisplayType.isNumeric(m_displayType);}  }
class C{  public ByteCodePattern addWild(int numWild){  Wild wild=isLastWild();  if (wild != null) {    wild.setMinAndMax(0,numWild);  } else {    addElement(new Wild(numWild));  }  return this;}  }
class C{  public static int compareFullPrimary(String s1,String s2){  return COLLATOR.compare(s1,s2);}  }
class C{  public TextEditGroup(String name){  super();  fDescription=name;  fEdits=new ArrayList(3);}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  private MyFormatter(){}  }
class C{  public Boolean isForLegacyFt(){  return forLegacyFt;}  }
class C{  public static String[] toStringArray(String line){  List<String> row=new ArrayList<>();  boolean inQuotedField=false;  int fieldStart=0;  final int len=line.length();  for (int i=0; i < len; i++) {    char c=line.charAt(i);    if (c == FIELD_SEPARATOR) {      if (!inQuotedField) {        addField(row,line,fieldStart,i,inQuotedField);        fieldStart=i + 1;      }    } else     if (c == FIELD_QUOTE) {      if (inQuotedField) {        if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) {          addField(row,line,fieldStart,i,inQuotedField);          fieldStart=i + 2;          i++;          inQuotedField=false;        }      } else       if (fieldStart == i) {        inQuotedField=true;        fieldStart++;      }    }  }  if (len > 0 && fieldStart <= len) {    addField(row,line,fieldStart,len,inQuotedField);  }  return row.toArray(new String[row.size()]);}  }
class C{  public int add(DefineTag tag){  assert (tag != null);  Integer obj=tags.get(tag);  if (obj != null) {    return obj.intValue();  } else {    Integer key=new Integer(nextId++);    tags.put(tag,key);    ids.put(key,tag);    return key.intValue();  }}  }
class C{  public final boolean isActive(){  return _lifecycle.isActive();}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  public boolean isInterchangeableWith(TypeVariableBinding otherVariable,Substitution substitute){  if (this == otherVariable)   return true;  int length=this.superInterfaces.length;  if (length != otherVariable.superInterfaces.length)   return false;  if (this.superclass != Scope.substitute(substitute,otherVariable.superclass))   return false;  next:   for (int i=0; i < length; i++) {    TypeBinding superType=Scope.substitute(substitute,otherVariable.superInterfaces[i]);    for (int j=0; j < length; j++)     if (superType == this.superInterfaces[j])     continue next;    return false;  }  return true;}  }
class C{  @Override public void run(final Context context) throws IOException, InterruptedException {  setup(context);  this.context=context;  try {    RyaStatement parentRyaStatement=nextParentRyaStatement();    RyaStatement childRyaStatement=nextChildRyaStatement();    CompareKeysResult compareKeysResult=null;    while (compareKeysResult != CompareKeysResult.FINISHED) {      compareKeysResult=compareKeys(parentRyaStatement,childRyaStatement);switch (compareKeysResult) {case ADVANCE_CHILD:        childRyaStatement=nextChildRyaStatement();      break;case ADVANCE_PARENT:    parentRyaStatement=nextParentRyaStatement();  break;case ADVANCE_CHILD_AND_ADD:final RyaStatement tempChildRyaStatement=childRyaStatement;childRyaStatement=nextChildRyaStatement();addKey(tempChildRyaStatement,context);break;case ADVANCE_PARENT_AND_DELETE:final RyaStatement tempParentRyaStatement=parentRyaStatement;parentRyaStatement=nextParentRyaStatement();deleteKey(tempParentRyaStatement,context);break;case ADVANCE_BOTH:final ColumnVisibility cv1=new ColumnVisibility(parentRyaStatement.getColumnVisibility());final ColumnVisibility cv2=new ColumnVisibility(childRyaStatement.getColumnVisibility());if (!cv1.equals(cv2) && !cv2.equals(AccumuloRdfConstants.EMPTY_CV)) {final ColumnVisibility newCv=combineColumnVisibilities(cv1,cv2);final RyaStatement newCvRyaStatement=updateRyaStatementColumnVisibility(parentRyaStatement,newCv);deleteKey(parentRyaStatement,context);addKey(newCvRyaStatement,context);}parentRyaStatement=nextParentRyaStatement();childRyaStatement=nextChildRyaStatement();break;case FINISHED:log.info("Finished scanning parent and child tables");break;default :log.error("Unknown result: " + compareKeysResult);break;}}} catch (MutationsRejectedException|TripleRowResolverException e) {log.error("Error encountered while merging",e);} finally {cleanup(context);}}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  public String addSymbol(char[] buffer,int offset,int len,int hash){  final int bucket=hash & indexMask;  String sym=symbols[bucket];  boolean match=true;  if (sym != null) {    if (sym.length() == len) {      char[] characters=symbols_char[bucket];      for (int i=0; i < len; i++) {        if (buffer[offset + i] != characters[i]) {          match=false;          break;        }      }      if (match) {        return sym;      }    } else {      match=false;    }  }{    int entryIndex=0;    for (Entry entry=buckets[bucket]; entry != null; entry=entry.next) {      char[] characters=entry.characters;      if (len == characters.length && hash == entry.hashCode) {        boolean eq=true;        for (int i=0; i < len; i++) {          if (buffer[offset + i] != characters[i]) {            eq=false;            break;          }        }        if (!eq) {          entryIndex++;          continue;        }        return entry.symbol;      }    }    if (entryIndex >= MAX_BUCKET_LENTH) {      return new String(buffer,offset,len);    }  }  Entry entry=new Entry(buffer,offset,len,hash,buckets[bucket]);  buckets[bucket]=entry;  if (match) {    symbols[bucket]=entry.symbol;    symbols_char[bucket]=entry.characters;  }  return entry.symbol;}  }
class C{  public synchronized void enqueueWriteRequest(final NextFilter nextFilter,final WriteRequest writeRequest){  if (writeRequestQueue == null) {    writeRequestQueue=new LinkedList<Event>();  }  writeRequestQueue.offer(new Event(nextFilter,writeRequest));}  }
class C{  public static boolean updateManifest(JSONObject data,boolean force){  if (data == null)   return false;  Manifest manifest=parseManifest(data);  if (manifest == null)   return false;  String manifestJson;  try {    manifestJson=data.toString(2);  } catch (  JSONException e) {    e.printStackTrace();    return false;  }  if (force) {    File manifestFile=getPatchManifestFile();    try {      PrintWriter pw=new PrintWriter(new FileOutputStream(manifestFile));      pw.print(manifestJson);      pw.flush();      pw.close();    } catch (    Exception e) {      e.printStackTrace();      return false;    }    for (    Bundle bundle : manifest.bundles) {      Bundle preloadBundle=findBundle(bundle.getPackageName(),sPreloadBundles);      if (preloadBundle != null) {        preloadBundle.uriString=bundle.uriString;        preloadBundle.uri=bundle.uri;        preloadBundle.rules=bundle.rules;      }    }  } else {    for (    Bundle bundle : manifest.bundles) {      Bundle preloadBundle=findBundle(bundle.getPackageName(),sPreloadBundles);      if (preloadBundle == null) {        if (sUpdatingBundles == null) {          sUpdatingBundles=new ArrayList<Bundle>();        }        sUpdatingBundles.add(bundle);      }    }    setCacheManifest(manifestJson);  }  return true;}  }
class C{  protected Object doCreateFromCapabilities(WCS100Capabilities caps,AVList params){  return null;}  }
class C{  public final String id(){  return id;}  }
class C{  public FetchedData handle(ContentHandlerArgs args,MessageQueue mq){  FetchedData result=doHandle(args,mq);  if (result == null) {    ByteArrayOutputStream intermediateResponse=new ByteArrayOutputStream();    Pair<ContentType,String> contentParams=getReturnedContentParams(args);    OutputStreamWriter writer=new OutputStreamWriter(intermediateResponse,Charsets.UTF_8);    try {      renderAsJSON((String)null,(String)null,contentParams.b,mq,writer,false);    } catch (    IOException e) {      throw new SomethingWidgyHappenedError(e);    }    result=FetchedData.fromBytes(intermediateResponse.toByteArray(),contentParams.a.mimeType,"UTF-8",InputSource.UNKNOWN);  }  return result;}  }
class C{  public static void time(ErrorMessages message,Timer time){  if (Options.time) {    String msg=ErrorMessages.get(message,time.toString());    out.println(msg);  }}  }
class C{  public ChartPanel(JFreeChart chart){  this(chart,DEFAULT_WIDTH,DEFAULT_HEIGHT,DEFAULT_MINIMUM_DRAW_WIDTH,DEFAULT_MINIMUM_DRAW_HEIGHT,DEFAULT_MAXIMUM_DRAW_WIDTH,DEFAULT_MAXIMUM_DRAW_HEIGHT,DEFAULT_BUFFER_USED,true,true,true,true,true);}  }
class C{  public JavaTransformFactory(String name){  super(name);  install(Class.class,ClassView.class);  install(Interface.class,InterfaceView.class);  install(Method.class,MethodView.class);  install(Field.class,FieldView.class);  install(Type.class,TypeView.class);  install(Modifier.class,ModifierView.class);  install(Javadoc.class,JavadocView.class);  install(JavadocTag.class,JavadocTagView.class);  install(Import.class,ImportView.class);  install(Generic.class,GenericView.class);  install(Enum.class,EnumView.class);  install(EnumConstant.class,EnumConstantView.class);  install(Annotation.class,AnnotationView.class);  install(AnnotationUsage.class,AnnotationUsageView.class);  install(ArrayValue.class,ArrayValueView.class);  install(BooleanValue.class,BooleanValueView.class);  install(EnumValue.class,EnumValueView.class);  install(NumberValue.class,NumberValueView.class);  install(ReferenceValue.class,ReferenceValueView.class);  install(TextValue.class,TextValueView.class);  install(InterfaceMethod.class,InterfaceMethodView.class);  install(InterfaceField.class,InterfaceFieldView.class);  install(Constructor.class,ConstructorView.class);  install(File.class,FileView.class);  install(Initializer.class,InitalizerView.class);}  }
class C{  @Deprecated public void addAssociatedStorageSystem(final String storageSystemId){  if (_associatedStorageSystems == null) {    setAssociatedStorageSystems(new StringSet());  }  _associatedStorageSystems.add(storageSystemId);}  }
class C{  public void testSkeletons() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.java.py","com.just.like.java","testSkeleton.py",null));}  }
class C{  public static FrequencyDivider fromFrequency(long frequency){  for (  FrequencyDivider divider : FrequencyDivider.values()) {    if (divider.contains(frequency)) {      return divider;    }  }  return FrequencyDivider.DIVIDER_5;}  }
class C{  public static String readTextfile(final String filename) throws IOException {  return readTextfile(new File(filename));}  }
class C{  public static int makeMask(final int value){  if (value == 0) {    return 0;  }  if ((value & 0x80000000) != 0) {    return 0xFFFFFFFF;  }  int msk=1;  do {    msk<<=1;  } while (msk <= value);  return msk - 1;}  }
class C{  public void adjust(double dx,double dy){  this.originLon-=dx / (dotsPerDeg * lonCorr);  this.originLat+=dy / dotsPerDeg;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.872 -0400",hash_original_method="088DF8F7AE1AF0A6FC6325953692637E",hash_generated_method="6C3FECB1746D0A1C9DB670D415174D67") @DSSafe(DSCat.SAFE_LIST) public static IOFileFilter fileFileFilter(){  return FileFileFilter.FILE;}  }
class C{  public ODGStylesReader(){  reset();}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public String numThreadsTipText(){  return "The number of threads to use ; -1 = number of CPUs/cores; 0 or 1 = sequential execution.";}  }
class C{  private boolean checkStorageFileSystemExistsInDB(String nativeGuid,DbClient dbClient) throws IOException {  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(nativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  public XMLBuilder addBinary(java.io.InputStream stream,int length) throws java.io.IOException {switch (state) {case STATE_ELEM_OPENED:    writer.write('>');case STATE_TEXT_ADDED:case STATE_NOTHING:  break;default :break;}Base64.encode(stream,length,writer);state=STATE_TEXT_ADDED;return this;}  }
class C{  @Override public DSSDocument signDocument(final byte[] signatureValue) throws DSSException {  if (!built) {    build();  }  final EncryptionAlgorithm encryptionAlgorithm=params.getEncryptionAlgorithm();  final byte[] signatureValueBytes=DSSSignatureUtils.convertToXmlDSig(encryptionAlgorithm,signatureValue);  final String signatureValueBase64Encoded=Base64.encodeBase64String(signatureValueBytes);  final Text signatureValueNode=documentDom.createTextNode(signatureValueBase64Encoded);  signatureValueDom.appendChild(signatureValueNode);  final List<DSSReference> references=params.getReferences();  for (  final DSSReference reference : references) {    final String base64EncodedOriginalDocument=Base64.encodeBase64String(DSSUtils.toByteArray(reference.getContents()));    final Element objectDom=DSSXMLUtils.addTextElement(documentDom,signatureDom,XMLSignature.XMLNS,DS_OBJECT,base64EncodedOriginalDocument);    final String id=reference.getUri().substring(1);    objectDom.setAttribute(ID,id);  }  byte[] documentBytes=DSSXMLUtils.transformDomToByteArray(documentDom);  final InMemoryDocument inMemoryDocument=new InMemoryDocument(documentBytes);  inMemoryDocument.setMimeType(MimeType.XML);  return inMemoryDocument;}  }
class C{  public TaskInfo reconfigureVirtualMachine(VMPropertyHandler paramHandler) throws Exception {  LOG.debug("instanceName: " + instanceName);  VimPortType service=vmw.getConnection().getService();  VirtualMachineConfigSpec vmConfigSpec=new VirtualMachineConfigSpec();  vmConfigSpec.setMemoryMB(Long.valueOf(paramHandler.getConfigMemoryMB()));  vmConfigSpec.setNumCPUs(Integer.valueOf(paramHandler.getConfigCPUs()));  String reqUser=paramHandler.getServiceSetting(VMPropertyHandler.REQUESTING_USER);  String comment=Messages.get(paramHandler.getLocale(),"vm_comment",new Object[]{paramHandler.getSettings().getOrganizationName(),paramHandler.getSettings().getSubscriptionId(),reqUser});  vmConfigSpec.setAnnotation(comment);  DiskManager diskManager=new DiskManager(vmw,paramHandler);  diskManager.reconfigureDisks(vmConfigSpec,vmInstance);  NetworkManager.configureNetworkAdapter(vmw,vmConfigSpec,paramHandler,vmInstance);  LOG.debug("Call vSphere API: reconfigVMTask()");  ManagedObjectReference reconfigureTask=service.reconfigVMTask(vmInstance,vmConfigSpec);  return (TaskInfo)vmw.getServiceUtil().getDynamicProperty(reconfigureTask,"info");}  }
class C{  public ThreadGroup(ThreadGroup parent,String name){  super();  if (Thread.currentThread() != null) {    parent.checkAccess();  }  this.name=name;  this.setParent(parent);  if (parent != null) {    this.setMaxPriority(parent.getMaxPriority());    if (parent.isDaemon()) {      this.setDaemon(true);    }  }}  }
class C{  public void checkPermission(String namespace,NamespacePermissionEnum[] permissions){  if (!isAuthenticated() || StringUtils.isBlank(namespace)) {    return;  }  String namespaceTrimmed=namespace.trim();  ApplicationUser applicationUser=getApplicationUser();  if (!isAuthorized(applicationUser,namespaceTrimmed,permissions)) {    LOGGER.warn(String.format("User does not have permission(s) to the namespace. %s namespace=\"%s\" permissions=\"%s\"",applicationUser,namespaceTrimmed,Arrays.asList(permissions)));    if (applicationUser != null) {      throw new AccessDeniedException(String.format("User \"%s\" does not have \"%s\" permission(s) to the namespace \"%s\"",applicationUser.getUserId(),Arrays.asList(permissions),namespaceTrimmed));    } else {      throw new AccessDeniedException(String.format("Current user does not have \"%s\" permission(s) to the namespace \"%s\"",Arrays.asList(permissions),namespaceTrimmed));    }  }}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit,CancellationSignal cancellationSignal){  if (mTables == null) {    return null;  }  if (mStrict && selection != null && selection.length() > 0) {    String sqlForValidation=buildQuery(projectionIn,"(" + selection + ")",groupBy,having,sortOrder,limit);    validateQuerySql(db,sqlForValidation,cancellationSignal);  }  String sql=buildQuery(projectionIn,selection,groupBy,having,sortOrder,limit);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"Performing query: " + sql);  }  return db.rawQueryWithFactory(mFactory,sql,selectionArgs,SQLiteDatabase.findEditTable(mTables),cancellationSignal);}  }
class C{  public List<ScannerToken<? extends Object>> lookAhead(int iLookAheadAmount) throws IOException {  int iTokensToRead=iLookAheadAmount - fNumberOfBufferedTokens;  for (; iTokensToRead > 0; iTokensToRead--, fNumberOfBufferedTokens++) {    ScannerToken<? extends Object> currToken=fScanner.readNextTerminal();    fTokenQueue.add(currToken);  }  LinkedList<ScannerToken<? extends Object>> retList=new LinkedList<ScannerToken<? extends Object>>();  for (int i=0; i < iLookAheadAmount; i++) {    retList.add(fTokenQueue.get(i));  }  return retList;}  }
class C{  static public void stepSuspendedError(String stepId,ServiceCoded coded) throws WorkflowException {  WorkflowService.completerStepSuspendedError(stepId,coded);}  }
class C{  public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Interval1D that=(Interval1D)other;  return this.min == that.min && this.max == that.max;}  }
class C{  public long findIndexOf(final long commitTime){  if (commitTime < 0L)   throw new IllegalArgumentException();  long pos=indexOf(getKey(commitTime));  if (pos < 0) {    pos=-(pos + 1);    if (pos == 0) {      return -1;    }    pos--;    return pos;  } else {    return pos;  }}  }
class C{  @Override public void perform(IR ir){  final boolean DEBUG=false;  if (!ir.HIRInfo.dominatorsAreComputed) {    return;  }  if (ir.HIRInfo.dominatorTree == null) {    return;  }  DominatorTree tree=ir.HIRInfo.dominatorTree;  for (Enumeration<TreeNode> x=tree.getBottomUpEnumerator(); x.hasMoreElements(); ) {    DominatorTreeNode v=(DominatorTreeNode)x.nextElement();    BasicBlock X=v.getBlock();    if (DEBUG) {      System.out.println("Computing frontier for node " + X);    }    BitVector DF=new BitVector(ir.getMaxBasicBlockNumber() + 1);    v.setDominanceFrontier(DF);    for (Enumeration<BasicBlock> y=X.getOut(); y.hasMoreElements(); ) {      BasicBlock Y=y.nextElement();      if (Y.isExit()) {        continue;      }      if (LTDominatorInfo.getIdom(Y,ir) != X) {        DF.set(Y.getNumber());      }    }    if (DEBUG) {      System.out.println("After local " + DF);    }    for (Enumeration<TreeNode> z=tree.getChildren(X); z.hasMoreElements(); ) {      DominatorTreeNode zVertex=(DominatorTreeNode)z.nextElement();      BasicBlock Z=zVertex.getBlock();      if (DEBUG) {        System.out.println("Processing Z = " + Z);      }      for (Enumeration<BasicBlock> y=zVertex.domFrontierEnumerator(ir); y.hasMoreElements(); ) {        BasicBlock Y=y.nextElement();        if (LTDominatorInfo.getIdom(Y,ir) != X) {          DF.set(Y.getNumber());        }      }    }    if (DEBUG) {      System.out.println("After up " + DF);    }  }  if (DEBUG) {    for (Enumeration<BasicBlock> bbEnum=ir.cfg.basicBlocks(); bbEnum.hasMoreElements(); ) {      BasicBlock block=bbEnum.nextElement();      if (block.isExit()) {        continue;      }      System.out.println(block + " DF: " + tree.getDominanceFrontier(block));    }  }}  }
class C{  public final void printUsage(String applicationName,String errorMsg,Options options,OutputStream out){  final PrintWriter writer=new PrintWriter(out);  final HelpFormatter usageFormatter=new HelpFormatter();  writer.println(errorMsg);  usageFormatter.printUsage(writer,PRINT_USAGE_WIDTH,applicationName,options);  usageFormatter.printOptions(writer,PRINT_OPTION_WIDTH,options,LEFTPAD,DESCPAD);  writer.close();}  }
class C{  public void updateTimestamp(String columnName,java.sql.Timestamp x) throws SQLException {  updateTimestamp(findColumn(columnName),x);}  }
class C{  public static boolean isWindows(){  return _isWindows;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getContactDao() : null;}  }
class C{  @Override public String toString(){  double maxval=0;  boolean fractional=false;  for (int i=0; i < getRowDimension(); i++) {    for (int j=0; j < getColumnDimension(); j++) {      double current=get(i,j);      if (current < 0) {        current*=-11;      }      if (current > maxval) {        maxval=current;      }      double fract=Math.abs(current - Math.rint(current));      if (!fractional && ((Math.log(fract) / Math.log(10)) >= -2)) {        fractional=true;      }    }  }  int width=(int)(Math.log(maxval) / Math.log(10) + (fractional ? 4 : 1));  StringBuffer text=new StringBuffer();  for (int i=0; i < getRowDimension(); i++) {    for (int j=0; j < getColumnDimension(); j++) {      text.append(" ").append(Utils.doubleToString(get(i,j),width,(fractional ? 2 : 0)));    }    text.append("\n");  }  return text.toString();}  }
class C{  public void reloadSessions(Activity fromActivity){  ArrayList<MXSession> sessions=getMXSessions(fromActivity);  for (  MXSession session : sessions) {    CommonActivityUtils.logout(fromActivity,session,false);  }  clearSessions(fromActivity,false);synchronized (LOG_TAG) {    ArrayList<HomeserverConnectionConfig> configs=mLoginStorage.getCredentialsList();    for (    HomeserverConnectionConfig config : configs) {      MXSession session=createSession(config);      mMXSessions.add(session);    }  }  Intent intent=new Intent(fromActivity,SplashActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  fromActivity.startActivity(intent);  fromActivity.finish();}  }
class C{  public void elementEnded(String name,String systemId,int lineNr) throws Exception {  this.delegate.elementEnded(name,systemId,lineNr);}  }
class C{  public CSVInputAdapter(CSVInputAdapterSpec adapterSpec){  this(null,adapterSpec);}  }
class C{  public static String trimOrPad(String str,int length,char padChar){  String result;  if (str == null) {    result="";  } else {    result=str;  }  if (result.length() > length) {    return result.substring(0,length);  }  while (result.length() < length) {    result+=padChar;  }  return result;}  }
class C{  public static float svgLengthToUserSpace(String s,String attr,short d,Context ctx){  float v=svgToUserSpace(s,attr,d,ctx);  if (v < 0) {    throw new BridgeException(getBridgeContext(ctx),ctx.getElement(),ErrorConstants.ERR_LENGTH_NEGATIVE,new Object[]{attr,s});  } else {    return v;  }}  }
class C{  private Group runCreateGroupTest() throws Exception {  when(membersInsert.execute()).thenReturn(expectedOwner);  connection.createGroup("spamlovers@hormel.com");  Group expected=createExpectedGroup("spamlovers@hormel.com");  verify(directoryGroups).insert(eq(expected));  verify(groupsInsert).execute();  verify(members).insert("spamlovers@hormel.com",expectedOwner);  verify(membersInsert).execute();  verify(settingsGroups).patch("spamlovers@hormel.com",getDefaultGroupPermissions());  verify(groupsSettingsPatch).execute();  return expected;}  }
class C{  public boolean isAutoplay(){  return autoplay;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public List<ValidationMessage> validateModel(Universe universe){  List<ValidationMessage> messages=new LinkedList<ValidationMessage>();  List<Space> spaces;  try {    spaces=universe.S();  } catch (  ScopeException e) {    messages.add(new ValidationMessage(e.getLocalizedMessage(),universe.getProject().getId()));    return messages;  }  for (  Space s : spaces) {    System.out.println("Domain " + s.getDomain().getName());    if (getTable(s) == null) {      messages.add(new ValidationMessage("domain '" + s.getDomain().getName() + "' is not bound to table",s.getDomain().getId()));    }    try {      List<Space> subspaces=s.S();      for (      Space ss : subspaces) {        System.out.println("==> Relation " + ss.getRelationName() + " to Domain "+ ss.getDomain().getName());        if (parseRelation(ss) == null) {          messages.add(new ValidationMessage("Relation '" + ss.getRelationName() + "' is not well defined",ss.getRelation().getId()));        }      }      for (      Axis a : s.A()) {        System.out.println("==> Dimension " + a.getDimension().getName());        if (parseDimension(a) == null) {          messages.add(new ValidationMessage("Dimension '" + a.getDimension().getName() + "' is not well defined",a.getDimension().getId()));        }        for (        Attribute attr : a.getAttributes()) {          System.out.println("====> Attribute " + attr.getName());          if (parseAttribute(a,attr) == null) {            messages.add(new ValidationMessage(a.toString() + ": Attribute '" + attr.getName()+ "' is not well defined",attr.getId()));          }        }      }      for (      Measure m : s.M()) {        System.out.println("====> Measure " + m.getName());        if (parseMeasure(m) == null) {          messages.add(new ValidationMessage(s.toString() + ": Measure '" + m.getName()+ "' is not well defined: "+ m.getMetric().getExpression().getValue(),m.getMetric().getId()));        }      }    } catch (    Exception e) {      messages.add(new ValidationMessage(e.getLocalizedMessage(),s.getDomain().getId()));    }  }  return messages;}  }
class C{  private int insertDetailsDistribution(){  String sql="UPDATE M_DistributionRunLine SET MinQty = 0 WHERE MinQty IS NULL";  int no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE M_DistributionListLine SET MinQty = 0 WHERE MinQty IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="DELETE FROM T_DistributionRunDetail WHERE M_DistributionRun_ID=" + p_M_DistributionRun_ID;  no=DB.executeUpdate(sql,get_TrxName());  log.fine("insertDetails - deleted #" + no);  sql="INSERT INTO T_DistributionRunDetail " + "(M_DistributionRun_ID, M_DistributionRunLine_ID, M_DistributionList_ID, M_DistributionListLine_ID," + "AD_Client_ID,AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,"+ "C_BPartner_ID, C_BPartner_Location_ID, M_Product_ID,"+ "Ratio, MinQty, Qty) "+ "SELECT rl.M_DistributionRun_ID, rl.M_DistributionRunLine_ID,ll.M_DistributionList_ID, ll.M_DistributionListLine_ID, "+ "rl.AD_Client_ID,rl.AD_Org_ID, rl.IsActive, rl.Created,rl.CreatedBy, rl.Updated,rl.UpdatedBy, "+ "ll.C_BPartner_ID, ll.C_BPartner_Location_ID, rl.M_Product_ID, 0 , "+ "ol.TargetQty AS MinQty , 0 FROM M_DistributionRunLine rl "+ "INNER JOIN M_DistributionList l ON (rl.M_DistributionList_ID=l.M_DistributionList_ID) "+ "INNER JOIN M_DistributionListLine ll ON (rl.M_DistributionList_ID=ll.M_DistributionList_ID) "+ "INNER JOIN DD_Order o ON (o.C_BPartner_ID=ll.C_BPartner_ID) "+ "INNER JOIN DD_OrderLine ol ON (ol.DD_Order_ID=o.DD_Order_ID AND ol.M_Product_ID=rl.M_Product_ID) AND ol.DatePromised"+ "<=" + DB.TO_DATE(p_DatePromised) + " INNER JOIN M_Locator loc ON (loc.M_Locator_ID=ol.M_Locator_ID AND loc.M_Warehouse_ID="+ p_M_Warehouse_ID+ ") "+ " WHERE rl.M_DistributionRun_ID="+ p_M_DistributionRun_ID+ " AND l.RatioTotal<>0 AND rl.IsActive='Y' AND ll.IsActive='Y'";  no=DB.executeUpdate(sql,get_TrxName());  Query query=MTable.get(getCtx(),I_T_DistributionRunDetail.Table_ID).createQuery(MDistributionRunDetail.COLUMNNAME_M_DistributionRun_ID + "=?",get_TrxName());  query.setParameters(p_M_DistributionRun_ID);  List<MDistributionRunDetail> records=query.list();  for (  MDistributionRunDetail record : records) {    BigDecimal total_ration=DB.getSQLValueBD(get_TrxName(),"SELECT SUM(Ratio) FROM T_DistributionRunDetail WHERE M_DistributionRun_ID=? AND M_Product_ID=? GROUP BY  M_Product_ID",p_M_DistributionRun_ID,record.getM_Product_ID());    MDistributionRunLine drl=(MDistributionRunLine)MTable.get(getCtx(),MDistributionRunLine.Table_ID).getPO(record.getM_DistributionRunLine_ID(),get_TrxName());    BigDecimal ration=record.getRatio();    BigDecimal factor=ration.divide(total_ration,BigDecimal.ROUND_HALF_UP);    record.setQty(factor.multiply(drl.getTotalQty()));    record.saveEx();  }  log.fine("inserted #" + no);  return no;}  }
class C{  public final void makeSEEMove(Move move,UndoInfo ui){  ui.capturedPiece=squares[move.to];  int p=squares[move.from];  if (move.to == epSquare) {    if (p == Piece.WPAWN) {      setSEEPiece(move.to - 8,Piece.EMPTY);    } else     if (p == Piece.BPAWN) {      setSEEPiece(move.to + 8,Piece.EMPTY);    }  }  setSEEPiece(move.from,Piece.EMPTY);  setSEEPiece(move.to,p);  whiteMove=!whiteMove;}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3));}  }
class C{  private CNodeUpdaterFactory(){}  }
class C{  public VcfSampleStripper(Set<String> sampleList,boolean keep){  mRemoveAll=false;  mKeepMode=keep;  mSamples=sampleList;}  }
class C{  public AdaDelta(double rho){  setRho(rho);}  }
class C{  public boolean equalSignature(Assignment obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (label == null) {    if (obj.label != null)     return false;  } else   if (!label.equals(obj.label))   return false;  return (params.length == obj.params.length);}  }
class C{  public MessageCreateEvent(int from,int to,String id,int size,int responseSize,double time){  super(from,to,id,time);  this.size=size;  this.responseSize=responseSize;}  }
class C{  public static long microsec2ticks(long us,double tempoMPQ,int resolution){  return (long)((((double)us) * resolution) / tempoMPQ);}  }
class C{  @Override public void fireLayoutCompleteEvent(LayoutCompleteEvent e){  if (layoutCompleteListeners != null && layoutCompleteListeners.size() != 0) {    LayoutCompleteEventListener l;    for (int i=0; i < layoutCompleteListeners.size(); i++) {      l=layoutCompleteListeners.get(i);      l.layoutCompleted(e);    }  }}  }
class C{  private void readMessages() throws SyntaxError, SemanticError {  while (provider.advance()) {    Lifeline caller=null;    if (fragmentManager.readFragments()) {      continue;    }    if (!noteManager.step()) {      MessageData data=provider.nextMessage();      noteManager.closeNote(data.getCaller());      String[] callees=data.getCallees();      if (callees.length == 1) {        throw new SyntaxError(provider,"A broadcast message must have at least two receivers");      }      if (callees.length >= 2) {        if (data.isSpawnMessage()) {          throw new SyntaxError(provider,"Broadcast messages are spawning by default");        }        Set<String> calleeSet=new HashSet<String>();        Lifeline[] allButLast=new Lifeline[callees.length - 1];        for (int i=0; i < callees.length; i++) {          String callee=callees[i];          if (callee.length() == 0) {            throw new SyntaxError(provider,"Malformed broadcast message");          }          if (!calleeSet.add(callee)) {            throw new SyntaxError(provider,"Duplicate receiver: " + callee);          }          if (callee.equals(data.getCaller())) {            throw new SyntaxError(provider,"The sender " + callee + " cannot be a "+ "receiver of the broadcast message");          }          noteManager.closeNote(callee);          MessageData part=new MessageData();          part.setCaller(data.getCaller());          part.setCallee(callee);          part.setLevel(data.getLevel());          part.setThread(data.getThread());          if (getLifeline(data.getCaller()) != null) {            if (!getLifeline(data.getCaller()).isAlwaysActive()) {              part.setSpawnMessage(true);            }          }          part.setReturnsInstantly(data.returnsInstantly());          if (i == 0) {            part.setNoteNumber(data.getNoteNumber());            part.setMessage(data.getMessage());            part.setBroadcastType(BroadcastMessage.FIRST);          } else           if (i == callees.length - 1) {            part.setBroadcastType(BroadcastMessage.LAST);          } else {            part.setBroadcastType(BroadcastMessage.OTHER);          }          BroadcastMessage msg=(BroadcastMessage)processor.processMessage(part,null);          if (i < callees.length - 1) {            allButLast[i]=msg.getCallee();          } else {            msg.setOtherCallees(allButLast);          }          processor.execute(msg);        }      } else {        noteManager.closeNote(data.getCallee());        if (data.isReturning() && requireReturn) {          caller=processor.processReturn(data);        } else {          ForwardMessage msg=processor.processMessage(data,caller);          messages.add(msg);          processor.execute(msg);          caller=null;        }      }      fragmentManager.clearLabels();    }    fragmentManager.clearSectionLabel();  }  finish();  for (  Lifeline line : getLifelines()) {    if (!line.isAlwaysActive() && line.isAlive()) {      line.terminate();    }  }}  }
class C{  public void cache(String identifier,Object resource){  verifyState();  if (!cacheLocked.get()) {    resourceCache.get().put(identifier,resource);  }}  }
class C{  public void start(Handler handler,ClusterProperties props) throws Exception {  if (server == null) {    server=new Server();    ServerConnector connector=new ServerConnector(server);    connector.setHost(props.httpServerHost());    connector.setPort(props.httpServerPort());    connector.setIdleTimeout(props.idleTimeout());    server.addConnector(connector);    server.setHandler(handler);    server.start();  } else   throw new IllegalStateException("Jetty server has already been started.");}  }
class C{  public static String urlToolTip(final URL url){  if (url == null || !LEnv.LAUNCHER_SETTINGS.get(LSettings.DISPLAY_LINK_TOOL_TIPS))   return null;  return "<html>" + ("mailto".equals(url.getProtocol()) ? "Write e-mail to <a href=\"#\">" + url.getPath() : "Open <a href=\"#\">" + url) + "</a></html>";}  }
class C{  public static String[] delimitedListToStringArray(String str,String delimiter,String charsToDelete){  if (str == null) {    return new String[0];  }  if (delimiter == null) {    return new String[]{str};  }  List<String> result=new ArrayList<>();  if ("".equals(delimiter)) {    for (int i=0; i < str.length(); i++) {      result.add(deleteAny(str.substring(i,i + 1),charsToDelete));    }  } else {    int pos=0;    int delPos;    while ((delPos=str.indexOf(delimiter,pos)) != -1) {      result.add(deleteAny(str.substring(pos,delPos),charsToDelete));      pos=delPos + delimiter.length();    }    if (str.length() > 0 && pos <= str.length()) {      result.add(deleteAny(str.substring(pos),charsToDelete));    }  }  return toStringArray(result);}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  Map<Long,List<Long>> determineBillingPeriods(List<BillingSubscriptionData> subscriptionList){  Map<Long,List<Long>> billingPeriodMap=new HashMap<>();  for (  BillingSubscriptionData billingSubData : subscriptionList) {    long startOfBillingPeriod;    if (billingSubData.getEndOfLastBilledPeriod() != null) {      startOfBillingPeriod=billingSubData.getEndOfLastBilledPeriod().longValue();    } else {      startOfBillingPeriod=calculateStartOfFirstBillingPeriod(billingSubData.getCutOffDay(),billingSubData.getActivationDate());    }    long endOfBillingPeriod=addMonths(startOfBillingPeriod,1);    while (endOfBillingPeriod <= effectiveBillingEndDate) {      addToBillingPeriodMap(billingPeriodMap,Long.valueOf(endOfBillingPeriod),Long.valueOf(billingSubData.getSubscriptionKey()));      endOfBillingPeriod=addMonths(endOfBillingPeriod,1);    }  }  return billingPeriodMap;}  }
class C{  public void add(short element){  if (size == elements.length) {    ensureCapacity(size + 1);  }  elements[size++]=element;}  }
class C{  public void engineSetProperty(String key,String value){  if (properties == null) {    properties=new HashMap<String,String>();  }  properties.put(key,value);}  }
class C{  public void log(Level level,String sourceclass,String message){  log(level,sourceclass,"",message);}  }
class C{  public boolean nodeExists(String nodeId){  return nodes.containsKey(nodeId);}  }
class C{  private void dispatchErrorNotification(String message,ReplDBMSEvent event,Throwable t){  logInfo("Dispatching error event: " + message,null);  try {    if (event == null) {      eventDispatcher.put(new ErrorNotification(message,t));    } else {      eventDispatcher.put(new ErrorNotification(message,event.getSeqno(),event.getEventId(),t));    }  } catch (  InterruptedException e) {    logWarn("Task cancelled while posting error notification",null);  }}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    getTarget().visit(v);    getProperty().visit(v);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  private void teleportAway(final Player player){  if (player != null) {    final IRPZone playerZone=player.getZone();    if (playerZone.equals(zone)) {      player.teleport(zone,15,16,Direction.DOWN,player);      if (player.hasQuest(QUEST_SLOT)) {        player.setQuest(QUEST_SLOT,"done");      }    }  }}  }
class C{  public static String executeFunction(String[] values){  try {    if (values[2].equalsIgnoreCase("randompositive"))     return MonetaryFunctions.randomPositiveMonetary(Integer.valueOf(values[3])); else     if (values[2].equalsIgnoreCase("randomnegative"))     return MonetaryFunctions.randomNegativeMonetary(Integer.valueOf(values[3]));    return "";  } catch (  Exception ex) {    return "";  }}  }
class C{  public void waitForInvocation(long msecWait,int numberOfNewEvents){  long startTime=System.currentTimeMillis();  while (true) {    if ((System.currentTimeMillis() - startTime) > msecWait) {      throw new RuntimeException("No events or less then the number of expected events received, expected " + numberOfNewEvents + " received "+ getNewDataListFlattened().length);    }    EventBean[] events=getNewDataListFlattened();    if (events.length >= numberOfNewEvents) {      return;    }    try {      Thread.sleep(50);    } catch (    InterruptedException e) {      return;    }  }}  }
class C{  public BuildingTarget(Coords coords,IBoard board,boolean ignite){  init(coords,board,ignite ? Targetable.TYPE_BLDG_IGNITE : Targetable.TYPE_BUILDING);}  }
class C{  static public String[] _getAttNames(){  return dcValidAttributeNames;}  }
class C{  void put(int key,CacheEntry entry){  cache.put(key,entry);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.242 -0500",hash_original_method="47F27C3C5B072C1921CEA8CD2618865D",hash_generated_method="9D8CFACFF8E35C4B4371E245059063AE") public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,provider);}  }
class C{  public void normalize() throws URIException {  if (isAbsPath()) {    _path=normalize(_path);    setURI();  }}  }
class C{  private static boolean shouldRenderAttribute(Object attributeVal){  if (attributeVal instanceof String) {    return true;  } else   if (attributeVal instanceof Boolean && Boolean.FALSE.equals(attributeVal)) {    return false;  } else   if (attributeVal instanceof Integer && (Integer)attributeVal == Integer.MIN_VALUE) {    return false;  } else   if (attributeVal instanceof Double && (Double)attributeVal == Double.MIN_VALUE) {    return false;  } else   if (attributeVal instanceof Character && (Character)attributeVal == Character.MIN_VALUE) {    return false;  } else   if (attributeVal instanceof Float && (Float)attributeVal == Float.MIN_VALUE) {    return false;  } else   if (attributeVal instanceof Short && (Short)attributeVal == Short.MIN_VALUE) {    return false;  } else   if (attributeVal instanceof Byte && (Byte)attributeVal == Byte.MIN_VALUE) {    return false;  } else   if (attributeVal instanceof Long && (Long)attributeVal == Long.MIN_VALUE) {    return false;  }  return true;}  }
class C{  public IdentityArrayList(final K a[],final int offset,final int length){  this(length);  System.arraycopy(a,offset,this.a,0,length);  size=length;}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public void commissionReport(CommissionReport commsReport){  try {    TWSBrokerModel.logCommissionReport(commsReport);    TradeOrderfill transientInstance=m_tradePersistentModel.findTradeOrderfillByExecId(commsReport.m_execId);    if (null != transientInstance) {      TradeOrder tradeOrder=m_tradePersistentModel.findTradeOrderByKey(transientInstance.getTradeOrder().getOrderKey());      for (      TradeOrderfill tradeOrderfill : tradeOrder.getTradeOrderfills()) {        if (tradeOrderfill.getExecId().equals(commsReport.m_execId)) {          tradeOrderfill.setCommission(new BigDecimal(commsReport.m_commission));          m_tradePersistentModel.persistTradeOrderfill(tradeOrderfill.getTradeOrder());          return;        }      }    } else {      commissionDetails.put(commsReport.m_execId,commsReport);    }  } catch (  Exception ex) {    error(1,3280,"Errors saving execution: " + ex.getMessage());  }}  }
class C{  private static void compressTable(String tableName,boolean compressInPlace) throws AdeInternalException {  logger.trace(String.format("compressTable( %s, %b ) -->entry",tableName,compressInPlace));  logger.warn(String.format("compressTable( %s ) suppressed (currently unsafe!)",tableName));  logger.trace(String.format("compressTable( %s ) <-- exit",tableName));}  }
class C{  public static boolean isUserDefinedNode(String name){  return !(name.equalsIgnoreCase(NODE_ENCOUNTER_ENCOUNTER_DATETIME) || name.equalsIgnoreCase(NODE_ENCOUNTER_LOCATION_ID) || name.equalsIgnoreCase(NODE_ENCOUNTER_PROVIDER_ID)|| name.equalsIgnoreCase(NODE_PATIENT_MIDDLE_NAME)|| name.equalsIgnoreCase(NODE_PATIENT_GIVEN_NAME)|| name.equalsIgnoreCase(NODE_PATIENT_PATIENT_ID)|| name.equalsIgnoreCase(NODE_PATIENT_FAMILY_NAME));}  }
class C{  Source popImportSource(){  return (Source)m_importSourceStack.pop();}  }
class C{  @Override public void updateDouble(String columnLabel,double x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDouble(" + quote(columnLabel) + ", "+ x+ "d);");    }    update(columnLabel,ValueDouble.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void onInstructionExit(){  clearTemporaryRegisters(m_taintedRegs);  clearTemporaryRegisters(m_newlyTaintedRegs);  clearTemporaryRegisters(m_untaintedRegs);  clearTemporaryRegisters(m_readRegs);  clearTemporaryRegisters(m_updatedRegs);  m_nativeNewlyTaintedRegs=ImmutableSet.copyOf(m_newlyTaintedRegs);  m_nativeUntaintedRegs=ImmutableSet.copyOf(m_untaintedRegs);  m_nativeReadRegs=ImmutableSet.copyOf(m_readRegs);  m_nativeUpdatedRegs=ImmutableSet.copyOf(m_updatedRegs);  m_newlyTaintedRegs.clear();  m_untaintedRegs.clear();  m_readRegs.clear();  m_updatedRegs.clear();}  }
class C{  public void add(WXDomObject child,int index){  if (child == null || index < -1 || sDestroy.get()) {    return;  }  if (children == null) {    children=new ArrayList<>();  }  int count=children.size();  index=index >= count ? -1 : index;  if (index == -1) {    children.add(child);    super.addChildAt(child,super.getChildCount());  } else {    children.add(index,child);    super.addChildAt(child,index);  }  child.parent=this;}  }
class C{  @Override public void doInit() throws ResourceException {  super.doInit();  if (isExisting()) {    fieldNamePattern=(String)getRequestAttributes().get(IndexSchema.NAME);    try {      fieldNamePattern=null == fieldNamePattern ? "" : urlDecode(fieldNamePattern.trim()).trim();    } catch (    UnsupportedEncodingException e) {      throw new ResourceException(e);    }  }}  }
class C{  public static XMethod createXMethod(PreorderVisitor visitor){  JavaClass javaClass=visitor.getThisClass();  Method method=visitor.getMethod();  XMethod m=createXMethod(javaClass,method);  return m;}  }
class C{  public void testPipelineWithNoEvents() throws Exception {  TungstenProperties config=helper.createSimpleRuntimeWithXacts(0);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  assertEquals("default latency",0.0,pipeline.getApplyLatency());  assertNull("default applied event",pipeline.getLastAppliedEvent());  assertEquals("default applied seqno",-1,pipeline.getLastAppliedSeqno());  assertEquals("default extracted seqno",-1,pipeline.getLastExtractedSeqno());  List<ShardProgress> shards=pipeline.getShardProgress();  assertEquals("empty shard list",0,shards.size());  List<TaskProgress> tasks=pipeline.getTaskProgress();  assertEquals("single task in list",1,tasks.size());  TaskProgress task=tasks.get(0);  assertNull("default processed event",task.getLastProcessedEvent());  assertNull("default committed event",task.getLastCommittedEvent());  assertEquals("no events processed on task",0,task.getEventCount());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  boolean expansionFilesDelivered(){  for (  XAPKFile xf : xAPKS) {    String fileName=Helpers.getExpansionAPKFileName(this,xf.mIsMain,xf.mFileVersion);    if (!Helpers.doesFileExist(this,fileName,xf.mFileSize,false))     return false;  }  return true;}  }
class C{  public Jerry empty(){  for (  Node node : nodes) {    node.removeAllChilds();  }  return this;}  }
class C{  public List<? extends ShardRouting> startedShards(){  return startedShards;}  }
class C{  public void updateActiveProviderDetailsInDbSystem(Map<String,StorageSystemViewObject> scannedSystemsNativeGuidsMap,List<StorageSystem> systemsToPersist,Set<URI> initialScanList,Map<URI,List<String>> providersToUpdate){  Iterator<URI> storageSystemUrisInDb;  StorageSystem storageSystemInDb=null;  try {    storageSystemUrisInDb=_dbClient.queryByType(StorageSystem.class,true).iterator();  } catch (  DatabaseException e) {    _logger.error("Exception occurred while querying db to get StorageSystems due to ",e);    return;  }  while (storageSystemUrisInDb.hasNext()) {    URI dbSystemUri=storageSystemUrisInDb.next();    try {      storageSystemInDb=_dbClient.queryObject(StorageSystem.class,dbSystemUri);      if (null == storageSystemInDb || !storageSystemInDb.isStorageSystemManagedByProvider()) {        _logger.info("Either storageSystem object is null or system not managed by provider : {}",dbSystemUri);        continue;      }      String dbSystemNativeGuid=storageSystemInDb.getNativeGuid();      if (scannedSystemsNativeGuidsMap.containsKey(dbSystemNativeGuid)) {        _logger.info("Detected a existing storage system {} via scan process again.",dbSystemNativeGuid);        StorageSystemViewObject systemDetails=scannedSystemsNativeGuidsMap.get(dbSystemNativeGuid);        updateActiveProviders(systemDetails,storageSystemInDb,providersToUpdate);      } else {        _logger.info("Existing discovered storage system {} is not part of available new scan list.",dbSystemNativeGuid);        if (initialScanList.contains(storageSystemInDb.getActiveProviderURI())) {          if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(storageSystemInDb.getRegistrationStatus())) {            injectReachableStatusInSystem(storageSystemInDb,null,NullColumnValueGetter.getNullURI(),false);          }        }      }    } catch (    Exception e) {      _logger.error("Exception while updating visible status for id: {} due to",storageSystemInDb.getId(),e);    }    systemsToPersist.add(storageSystemInDb);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="BC_UNCONFIRMED_CAST",justification="") @Override public void paint(final Graphics g){  final Graphics2D g2d=(Graphics2D)g;  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);  g2d.setStroke(_stroke);  Color bColor;  if (_selected && _hasFocus) {    bColor=getBackgroundSelectionColor();  } else {    bColor=getBackgroundNonSelectionColor();    if (bColor == null) {      bColor=getBackground();    }  }  int imageOffset=-1;  if (bColor != null) {    imageOffset=getIconLabelStart();    g2d.setColor(bColor);    final Dimension size=getSize();    g2d.fillRect(imageOffset,0,size.width - 1 - imageOffset,size.height);  }  if (_selected && _hasFocus) {    if (_drawsFocusBorderAroundIcon) {      imageOffset=0;    } else     if (imageOffset == -1) {      imageOffset=getIconLabelStart();    }    g2d.setColor(getBorderSelectionColor());    g2d.drawRect(imageOffset,0,getWidth() - 1 - imageOffset,getHeight() - 1);  } else   if (_selected) {    g2d.setColor(getBorderSelectionColor());    g2d.drawRect(imageOffset,0,getWidth() - 1 - imageOffset,getHeight() - 1);  }  paintChildren(g);}  }
class C{  private static void usage(){  System.out.println("Usage: BloggerClient --username <username>" + " --password <password>");  System.out.println("\nA simple application that creates, queries,\n" + "updates and deletes posts and comments on the\n" + "specified blog using the provided username and\n"+ "password for authentication.");}  }
class C{  public String skipStdDevTipText(){  return "If enabled, the standard deviation is skipped, ie not output.";}  }
class C{  public void addNode(final Object node){  if (indexOutInHash.get(node) != null)   return;  allNodes.add(node);  IndexOutIn ioih=new IndexOutIn(allNodes.numObjs - 1,null,null);  indexOutInHash.put(node,ioih);}  }
class C{  private TransferResult<CFValue,CFStore> handleMatcherGroupCount(Node possibleMatcher,Node possibleConstant,boolean isAlsoEqual,TransferInput<CFValue,CFStore> in,TransferResult<CFValue,CFStore> resultIn){  if (!(possibleMatcher instanceof MethodInvocationNode)) {    return resultIn;  }  if (!(possibleConstant instanceof IntegerLiteralNode)) {    return resultIn;  }  MethodAccessNode methodAccessNode=((MethodInvocationNode)possibleMatcher).getTarget();  ExecutableElement method=methodAccessNode.getMethod();  Node receiver=methodAccessNode.getReceiver();  if (!isMatcherGroupCountMethod(method,receiver)) {    return resultIn;  }  Receiver matcherReceiver=FlowExpressions.internalReprOf(analysis.getTypeFactory(),receiver);  IntegerLiteralNode iln=(IntegerLiteralNode)possibleConstant;  int groupCount;  if (isAlsoEqual) {    groupCount=iln.getValue();  } else {    groupCount=iln.getValue() + 1;  }  CFStore thenStore=resultIn.getRegularStore();  CFStore elseStore=thenStore.copy();  ConditionalTransferResult<CFValue,CFStore> newResult=new ConditionalTransferResult<>(resultIn.getResultValue(),thenStore,elseStore);  RegexAnnotatedTypeFactory factory=(RegexAnnotatedTypeFactory)analysis.getTypeFactory();  AnnotationMirror regexAnnotation=factory.createRegexAnnotation(groupCount);  thenStore.insertValue(matcherReceiver,regexAnnotation);  return newResult;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public LocalVariableAttribute(ConstPool cp){  super(cp,tag,new byte[2]);  ByteArray.write16bit(0,info,0);}  }
class C{  public long readVarLong() throws IOException {  long x=readByte();  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; ; s+=7) {    long b=readByte();    x|=(b & 0x7f) << s;    if (b >= 0) {      return x;    }  }}  }
class C{  public TransformerHandler newTransformerHandler(Source src) throws TransformerConfigurationException {  Templates templates=newTemplates(src);  if (templates == null)   return null;  return newTransformerHandler(templates);}  }
class C{  public boolean contains(Mention mention){  return mentions.contains(mention);}  }
class C{  protected void onListItemClick(ListView l,View v,int position,long id){}  }
class C{  public static XmlFormatter createXmlFormatter(){  return new DefaultXmlFormatter();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected static long remoteGetConId(){  return InternalDistributedSystem.getAnyInstance().getId();}  }
class C{  protected ExpressionAST createRangeExpression(DimensionIndex root,IntervalleObject innerRange) throws ScopeException {  ExpressionAST def=root.getAxis().getDefinition();  ExpressionAST lower=ExpressionMaker.LESSOREQUAL(def,innerRange.getLowerBoundExpression());  ExpressionAST upper=ExpressionMaker.LESSOREQUAL(innerRange.getUpperBoundExpression(),def);  return ExpressionMaker.OR(lower,upper);}  }
class C{  public PrincipalUser(String userName,String email){  this(null,userName,email);}  }
class C{  void merge(Method m,Edge edge,Map<Integer,Block> blocks,Map<Block,FrameState> states,int pos,Expr[] frame,int sp,int scopep){  addTraceAttr("Edge",edge);  if (!blocks.containsKey(pos)) {    Block b=createBlock(m,edge,states,frame,sp,scopep);    blocks.put(pos,b);  } else   if (edge != null) {    edge.to=blocks.get(pos);    mergeFrameStates(m,edge,states,frame,sp,scopep);  }}  }
class C{  public void testCase12(){  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int bSign=-1;  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (lagGraph == null) {    throw new NullPointerException();  }}  }
class C{  public void destroy(){  log.fine("");}  }
class C{  void handleSubscriberException(Throwable e,SubscriberExceptionContext context){  checkNotNull(e);  checkNotNull(context);  try {    exceptionHandler.handleException(e,context);  } catch (  Throwable e2) {    logger.log(Level.SEVERE,String.format(Locale.ROOT,"Exception %s thrown while handling exception: %s",e2,e),e2);  }}  }
class C{  @SideOnly(Side.CLIENT) public static void drawQuad(final float x,final float y,final float w,final float h,final float u0,final float v0,final float u1,final float v1){  final Tessellator tessellator=Tessellator.getInstance();  final WorldRenderer worldRenderer=tessellator.getWorldRenderer();  worldRenderer.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX);  worldRenderer.pos(x,y + h,0).tex(u0,v1).endVertex();  worldRenderer.pos(x + w,y + h,0).tex(u1,v1).endVertex();  worldRenderer.pos(x + w,y,0).tex(u1,v0).endVertex();  worldRenderer.pos(x,y,0).tex(u0,v0).endVertex();  tessellator.draw();}  }
class C{  protected void handleGenericBridges(BridgeContext ctx,Element e){  for (Node n=e.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n instanceof Element) {      Element e2=(Element)n;      Bridge b=ctx.getBridge(e2);      if (b instanceof GenericBridge) {        ((GenericBridge)b).handleElement(ctx,e2);      }      handleGenericBridges(ctx,e2);    }  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrRs.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="rs";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public final ASTNode createMoveTarget(ASTNode first,ASTNode last,ASTNode replacingNode,TextEditGroup editGroup){  if (first == last) {    replace(first,replacingNode,editGroup);    return this.rewriter.createMoveTarget(first);  } else {    return createTargetNode(first,last,true,replacingNode,editGroup);  }}  }
class C{  protected void flowThrough(Object inValue,Unit unit,List outFallValues,List outBranchValues){  final LocalTypeSet in=(LocalTypeSet)inValue;  final LocalTypeSet out=(LocalTypeSet)in.clone();  LocalTypeSet outBranch=out;  final Stmt stmt=(Stmt)unit;  for (Iterator bIt=stmt.getDefBoxes().iterator(); bIt.hasNext(); ) {    final ValueBox b=(ValueBox)bIt.next();    Value v=b.getValue();    if (v instanceof Local && v.getType() instanceof RefType) {      out.killLocal((Local)v);    }  }  if (stmt instanceof AssignStmt) {    AssignStmt astmt=(AssignStmt)stmt;    Value rhs=astmt.getRightOp();    Value lhs=astmt.getLeftOp();    if (lhs instanceof Local && rhs.getType() instanceof RefType) {      Local l=(Local)lhs;      if (rhs instanceof NewExpr) {        out.localMustBeSubtypeOf(l,(RefType)rhs.getType());      } else       if (rhs instanceof CastExpr) {        CastExpr cast=(CastExpr)rhs;        Type castType=cast.getCastType();        if (castType instanceof RefType && cast.getOp() instanceof Local) {          RefType refType=(RefType)castType;          Local opLocal=(Local)cast.getOp();          out.localCopy(l,opLocal);          out.localMustBeSubtypeOf(l,refType);          out.localMustBeSubtypeOf(opLocal,refType);        }      } else       if (rhs instanceof Local) {        out.localCopy(l,(Local)rhs);      }    }  } else   if (stmt instanceof IfStmt) {    IfStmt ifstmt=(IfStmt)stmt;    do {      if (graph.getPredsOf(stmt).size() != 1)       break;      Object predecessor=graph.getPredsOf(stmt).get(0);      if (!(predecessor instanceof AssignStmt))       break;      AssignStmt pred=(AssignStmt)predecessor;      if (!(pred.getRightOp() instanceof InstanceOfExpr))       break;      InstanceOfExpr iofexpr=(InstanceOfExpr)pred.getRightOp();      if (!(iofexpr.getCheckType() instanceof RefType))       break;      if (!(iofexpr.getOp() instanceof Local))       break;      ConditionExpr c=(ConditionExpr)ifstmt.getCondition();      if (!c.getOp1().equals(pred.getLeftOp()))       break;      if (!(c.getOp2() instanceof IntConstant))       break;      if (((IntConstant)c.getOp2()).value != 0)       break;      if (c instanceof NeExpr) {        outBranch=(LocalTypeSet)out.clone();        outBranch.localMustBeSubtypeOf((Local)iofexpr.getOp(),(RefType)iofexpr.getCheckType());      } else       if (c instanceof EqExpr) {        outBranch=(LocalTypeSet)out.clone();        out.localMustBeSubtypeOf((Local)iofexpr.getOp(),(RefType)iofexpr.getCheckType());      }    } while (false);  }  for (Iterator it=outFallValues.iterator(); it.hasNext(); ) {    copy(out,it.next());  }  for (Iterator it=outBranchValues.iterator(); it.hasNext(); ) {    copy(outBranch,it.next());  }}  }
class C{  public static int cleanSuspendedTransactions() throws GenericTransactionException {  Transaction trans=null;  int num=0;  while ((trans=popSuspendedTransaction()) != null) {    resume(trans);    rollback();    num++;  }  clearTransactionStartStampStack();  return num;}  }
class C{  public boolean isVisibleInCatalogChecked(){  return isVisibleInCatalog();}  }
class C{  public boolean removeAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  protected void handleResize(double newratio){  if (currentSubplot == null) {    ResultWindow.this.overview.setRatio(newratio);  }}  }
class C{  private Map<String,String> readInPantherFamilyNames(Resource modelFile) throws IOException {  Map<String,String> result=null;  File globalsDir=new File(modelFile.getFile().getPath() + "/globals");  if (globalsDir.exists()) {    File namesTabFile=new File(globalsDir.getPath() + "/" + namesTabFileStr);    result=parseTabFile(namesTabFile);  }  return result;}  }
class C{  @Override public boolean equals(Object o){  return (compareTo((String)o) == 0);}  }
class C{  protected static final Map<String,String> newKeyValues(String key,String value){  Map<String,String> keyValues=new HashMap<String,String>(1);  keyValues.put(nonNull(key),nonNull(value));  return keyValues;}  }
class C{  public SolrQuery addFacetPivotField(String... fields){  add(FacetParams.FACET_PIVOT,fields);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  private void memoryForGEUpdated(){  if (useTextureCache) {    TextureCache.getInstance().resetTextureAlreadyHashed();  }  if (useVertexCache) {    VertexCache.getInstance().resetVertexAlreadyChecked();  }  VertexBufferManager.getInstance().resetAddressAlreadyChecked();}  }
class C{  private void testLobStaysOpenUntilCommitted() throws Exception {  Connection conn=getConnection();  stat=conn.createStatement();  stat.execute("create table test(id identity, c clob, b blob)");  PreparedStatement prep=conn.prepareStatement("insert into test values(null, ?, ?)");  prep.setString(1,"");  prep.setBytes(2,new byte[0]);  prep.execute();  Random r=new Random(1);  char[] chars=new char[100000];  for (int i=0; i < chars.length; i++) {    chars[i]=(char)r.nextInt(10000);  }  String d=new String(chars);  prep.setCharacterStream(1,new StringReader(d),-1);  byte[] bytes=new byte[100000];  r.nextBytes(bytes);  prep.setBinaryStream(2,new ByteArrayInputStream(bytes),-1);  prep.execute();  conn.setAutoCommit(false);  ResultSet rs=stat.executeQuery("select * from test order by id");  rs.next();  Clob c1=rs.getClob(2);  Blob b1=rs.getBlob(3);  rs.next();  Clob c2=rs.getClob(2);  Blob b2=rs.getBlob(3);  Assert.assertFalse(rs.next());  rs.close();  Assert.assertEquals(0,c1.length());  Assert.assertEquals(0,b1.length());  Assert.assertEquals(chars.length,c2.length());  Assert.assertEquals(bytes.length,b2.length());  Assert.assertEquals("",c1.getSubString(1,0));  Assert.assertEquals(new byte[0],b1.getBytes(1,0));  Assert.assertEquals(d,c2.getSubString(1,(int)c2.length()));  Assert.assertEquals(bytes,b2.getBytes(1,(int)b2.length()));  stat.execute("drop table test");  conn.close();}  }
class C{  public static boolean isCounterClockwise(List<ReadOnlyVector3> points){  double area=computePolygonArea2D(points);  if (area < 0) {    return (false);  }  return (true);}  }
class C{  public static List<org.oscm.vo.VOPricedParameter> convertToApiVOPricedParameter(List<org.oscm.internal.vo.VOPricedParameter> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOPricedParameter> newVO=new ArrayList<org.oscm.vo.VOPricedParameter>();  for (  org.oscm.internal.vo.VOPricedParameter tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public static Vec4 fromArray4(double[] array,int offset){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  return fromDoubleArray(array,offset,4);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.STATUS_SOURCE__PROPERTY:    if (resolve)     return getProperty();  return basicGetProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public MaxCountExceededException(Number max){  this(LocalizedFormats.MAX_COUNT_EXCEEDED,max);}  }
class C{  public static List<Integer> inorderTraversal(TreeNode root){  List<Integer> result=new ArrayList<Integer>();  Stack<TreeNode> s=new Stack<TreeNode>();  while (!s.isEmpty() || root != null) {    if (root != null) {      s.push(root);      root=root.left;    } else {      root=s.pop();      result.add(root.val);      root=root.right;    }  }  return result;}  }
class C{  @Override protected void onProgressUpdate(Integer... values){}  }
class C{  private void mergeReleasedEntries(Segment segment,Segment compactSegment){  for (long i=segment.firstIndex(); i <= segment.lastIndex(); i++) {    if (!segment.isLive(i)) {      compactSegment.release(i);    }  }}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  public HostAddresses(DerValue encoding) throws Asn1Exception, IOException {  Vector<HostAddress> tempAddresses=new Vector<>();  DerValue der=null;  while (encoding.getData().available() > 0) {    der=encoding.getData().getDerValue();    tempAddresses.addElement(new HostAddress(der));  }  if (tempAddresses.size() > 0) {    addresses=new HostAddress[tempAddresses.size()];    tempAddresses.copyInto(addresses);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private Set<RoleAssignment> createRoleAssignment(PlatformUser user,UserRoleType roleType){  Set<RoleAssignment> roles=new HashSet<RoleAssignment>();  RoleAssignment ra=new RoleAssignment();  ra.setKey(1L);  ra.setUser(user);  ra.setRole(new UserRole(roleType));  roles.add(ra);  return roles;}  }
class C{  public static void main(String[] args) throws Exception {  ICluster alice=Cluster.joinAwait();  alice.listenGossips().subscribe(null);  ICluster bob=Cluster.joinAwait(alice.address());  bob.listenGossips().subscribe(null);  ICluster carol=Cluster.joinAwait(alice.address());  carol.listenGossips().subscribe(null);  ICluster dan=Cluster.joinAwait(alice.address());  dan.listenGossips().subscribe(null);  ICluster eve=Cluster.joinAwait(alice.address());  eve.spreadGossip(Message.fromData("Gossip from Eve"));  Thread.sleep(1000);}  }
class C{  public void subQuat(Quaternion input,Quaternion output){  output.setX(getX() - input.getX());  output.setY(getY() - input.getY());  output.setZ(getZ() - input.getZ());  output.setW(getW() - input.getW());}  }
class C{  public static void main(String[] options){  try {    Attribute length=new Attribute("length");    Attribute weight=new Attribute("weight");    ArrayList<String> my_nominal_values=new ArrayList<String>(3);    my_nominal_values.add("first");    my_nominal_values.add("second");    my_nominal_values.add("third");    Attribute position=new Attribute("position",my_nominal_values);    ArrayList<Attribute> attributes=new ArrayList<Attribute>(3);    attributes.add(length);    attributes.add(weight);    attributes.add(position);    Instances race=new Instances("race",attributes,0);    race.setClassIndex(position.index());    SparseInstance inst=new SparseInstance(3);    inst.setValue(length,5.3);    inst.setValue(weight,300);    inst.setValue(position,"first");    inst.setDataset(race);    System.out.println("The instance: " + inst);    System.out.println("First attribute: " + inst.attribute(0));    System.out.println("Class attribute: " + inst.classAttribute());    System.out.println("Class index: " + inst.classIndex());    System.out.println("Class is missing: " + inst.classIsMissing());    System.out.println("Class value (internal format): " + inst.classValue());    SparseInstance copy=(SparseInstance)inst.copy();    System.out.println("Shallow copy: " + copy);    copy.setDataset(inst.dataset());    System.out.println("Shallow copy with dataset set: " + copy);    System.out.print("All stored values in internal format: ");    for (int i=0; i < inst.numValues(); i++) {      if (i > 0) {        System.out.print(",");      }      System.out.print(inst.valueSparse(i));    }    System.out.println();    System.out.print("All values set to zero: ");    while (inst.numValues() > 0) {      inst.setValueSparse(0,0);    }    for (int i=0; i < inst.numValues(); i++) {      if (i > 0) {        System.out.print(",");      }      System.out.print(inst.valueSparse(i));    }    System.out.println();    System.out.print("All values set to one: ");    for (int i=0; i < inst.numAttributes(); i++) {      inst.setValue(i,1);    }    for (int i=0; i < inst.numValues(); i++) {      if (i > 0) {        System.out.print(",");      }      System.out.print(inst.valueSparse(i));    }    System.out.println();    copy.setDataset(null);    copy.deleteAttributeAt(0);    copy.insertAttributeAt(0);    copy.setDataset(inst.dataset());    System.out.println("Copy with first attribute deleted and inserted: " + copy);    copy.setDataset(null);    copy.deleteAttributeAt(1);    copy.insertAttributeAt(1);    copy.setDataset(inst.dataset());    System.out.println("Copy with second attribute deleted and inserted: " + copy);    copy.setDataset(null);    copy.deleteAttributeAt(2);    copy.insertAttributeAt(2);    copy.setDataset(inst.dataset());    System.out.println("Copy with third attribute deleted and inserted: " + copy);    System.out.println("Enumerating attributes (leaving out class):");    Enumeration<Attribute> enu=inst.enumerateAttributes();    while (enu.hasMoreElements()) {      Attribute att=enu.nextElement();      System.out.println(att);    }    System.out.println("Header of original and copy equivalent: " + inst.equalHeaders(copy));    System.out.println("Length of copy missing: " + copy.isMissing(length));    System.out.println("Weight of copy missing: " + copy.isMissing(weight.index()));    System.out.println("Length of copy missing: " + Utils.isMissingValue(copy.value(length)));    System.out.println("Number of attributes: " + copy.numAttributes());    System.out.println("Number of classes: " + copy.numClasses());    double[] meansAndModes={2,3,0};    copy.replaceMissingValues(meansAndModes);    System.out.println("Copy with missing value replaced: " + copy);    copy.setClassMissing();    System.out.println("Copy with missing class: " + copy);    copy.setClassValue(0);    System.out.println("Copy with class value set to first value: " + copy);    copy.setClassValue("third");    System.out.println("Copy with class value set to \"third\": " + copy);    copy.setMissing(1);    System.out.println("Copy with second attribute set to be missing: " + copy);    copy.setMissing(length);    System.out.println("Copy with length set to be missing: " + copy);    copy.setValue(0,0);    System.out.println("Copy with first attribute set to 0: " + copy);    copy.setValue(weight,1);    System.out.println("Copy with weight attribute set to 1: " + copy);    copy.setValue(position,"second");    System.out.println("Copy with position set to \"second\": " + copy);    copy.setValue(2,"first");    System.out.println("Copy with last attribute set to \"first\": " + copy);    System.out.println("Current weight of instance copy: " + copy.weight());    copy.setWeight(2);    System.out.println("Current weight of instance copy (set to 2): " + copy.weight());    System.out.println("Last value of copy: " + copy.toString(2));    System.out.println("Value of position for copy: " + copy.toString(position));    System.out.println("Last value of copy (internal format): " + copy.value(2));    System.out.println("Value of position for copy (internal format): " + copy.value(position));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public ProcessorBasedRefactoring(RefactoringProcessor processor){  setProcessor(processor);}  }
class C{  @Override public void testRunFinished(Result result){  LoggingUtils.getEvoLogger().info("* Number of test cases executed: " + result.getRunCount());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.get("mmc/country",Sage.rez("default_country"));}  }
class C{  public synchronized void createVersion(File file) throws IOException {  try (KeyTabOutputStream kos=new KeyTabOutputStream(new FileOutputStream(file))){    kos.write16(KRB5_KT_VNO);  } }  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:11.443 -0500",hash_original_method="50B637C031C7A89AA164A5082D6A3A93",hash_generated_method="B2AEC5AD9697F2A0503EB686601715D6") @Deprecated public NinePatchDrawable(NinePatch patch){  this(new NinePatchState(patch,new Rect()),null);}  }
class C{  @Override public void execute(){  m_result=new TaskStatusInfo();  m_result.setStatusMessage("Running...");  String goodResult="(sub)experiment completed successfully";  String subTaskType;  if (m_experiment.getRunLower() != m_experiment.getRunUpper()) {    subTaskType="(dataset " + ((File)m_experiment.getDatasets().elementAt(0)).getName();  } else {    subTaskType="(exp run # " + m_experiment.getRunLower();  }  try {    System.err.println("Initializing " + subTaskType + ")...");    m_experiment.initialize();    System.err.println("Iterating " + subTaskType + ")...");    while (m_experiment.hasMoreIterations()) {      m_experiment.nextIteration();    }    System.err.println("Postprocessing " + subTaskType + ")...");    m_experiment.postProcess();  } catch (  Exception ex) {    ex.printStackTrace();    String badResult="(sub)experiment " + subTaskType + ") failed : "+ ex.toString();    m_result.setExecutionStatus(TaskStatusInfo.FAILED);    m_result.setStatusMessage(badResult);    m_result.setTaskResult("Failed");    return;  }  m_result.setExecutionStatus(TaskStatusInfo.FINISHED);  m_result.setStatusMessage(goodResult + " " + subTaskType+ ").");  m_result.setTaskResult("No errors");}  }
class C{  public static ServiceErrorRestRep toServiceError(final Throwable e,final Locale locale){  if (e instanceof ServiceCoded) {    return toServiceErrorRestRep((ServiceCoded)e,locale);  } else   if (e instanceof WebApplicationException) {    return toServiceErrorRestRep((WebApplicationException)e,locale);  } else   if (e instanceof IllegalArgumentException) {    return toServiceErrorRestRep(API_PARAMETER_INVALID,e.getMessage(),locale);  } else   if (e instanceof JsonMappingException || e instanceof JsonParseException) {    return toServiceErrorRestRep(API_BAD_REQUEST,e.getMessage(),locale);  }  return toServiceErrorRestRep(UNFORSEEN_ERROR,e.getMessage(),locale);}  }
class C{  private void unregisterFsm(final String sessionId){  if (debugEnabled) {    LOGGER.debug("Unregistering FSM with '" + sessionId + "' session ID...");  }  cache.invalidate(sessionId);  checkState(!exists(sessionId),"Error while unregistering session with '" + sessionId + "' session ID.");  if (debugEnabled) {    LOGGER.debug("FSM has been successfully unregistered with '" + sessionId + "' session ID.");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ReferenceBinding convertToParameterizedType(ReferenceBinding originalType){  if (originalType != null) {    boolean isGeneric=originalType.isGenericType();    ReferenceBinding originalEnclosingType=originalType.enclosingType();    ReferenceBinding convertedEnclosingType=originalEnclosingType;    boolean needToConvert=isGeneric;    if (originalEnclosingType != null) {      convertedEnclosingType=originalType.isStatic() ? (ReferenceBinding)convertToRawType(originalEnclosingType,false) : convertToParameterizedType(originalEnclosingType);      needToConvert|=originalEnclosingType != convertedEnclosingType;    }    if (needToConvert) {      return createParameterizedType(originalType,isGeneric ? originalType.typeVariables() : null,convertedEnclosingType);    }  }  return originalType;}  }
class C{  public ReadInputRegistersResponse(){  super();  setFunctionCode(Modbus.READ_INPUT_REGISTERS);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,Axis axis,double angle){  this(focalPoint,periapsis,Vector3.getAxisVector(axis),eccentricity,angle);}  }
class C{  private IgfsStringDelimiterRecordResolver resolver(String... delims){  return new IgfsStringDelimiterRecordResolver(UTF8,delims);}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearBinary(){  binary=null;  fieldSetFlags()[8]=false;  return this;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public List<CharsRef> uniqueStems(char word[],int length){  List<CharsRef> stems=stem(word,length);  if (stems.size() < 2) {    return stems;  }  CharArraySet terms=new CharArraySet(8,dictionary.ignoreCase);  List<CharsRef> deduped=new ArrayList<>();  for (  CharsRef s : stems) {    if (!terms.contains(s)) {      deduped.add(s);      terms.add(s);    }  }  return deduped;}  }
class C{  @Deprecated public AccountHeaderBuilder withSelectionFistLineShown(boolean selectionFirstLineShown){  this.mSelectionFirstLineShown=selectionFirstLineShown;  return this;}  }
class C{  void dispatchOnLauncherTransitionStep(View v,float t){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionStep(mLauncher,t);  }}  }
class C{  protected void cleanup() throws CqException {  try {    if (this.cqBaseRegion != null && !this.cqBaseRegion.isDestroyed()) {      this.cqBaseRegion.getFilterProfile().closeCq(this);      CacheClientProxy clientProxy=ccn.getClientProxy(clientProxyId);      clientProxy.decCqCount();      if (clientProxy.hasNoCq()) {        cqService.stats.decClientsWithCqs();      }    }  } catch (  Exception ex) {    if (logger.isDebugEnabled()) {      logger.debug("Failed to remove CQ from the base region. CqName :{}",cqName);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.add(new Option("\tFull name and options of the evaluator analyzed.\n" + "\teg: weka.attributeSelection.CfsSubsetEval","eval",1,"-eval name [options]"));  result.add(new Option("\tFull name and options of the search method analyzed.\n" + "\teg: weka.attributeSelection.Ranker","search",1,"-search name [options]"));  result.add(new Option("\tThe scheme to test, either the evaluator or the search method.\n" + "\t(Default: eval)","test",1,"-test <eval|search>"));  result.addAll(Collections.list(super.listOptions()));  if ((m_Evaluator != null) && (m_Evaluator instanceof OptionHandler)) {    result.add(new Option("","",0,"\nOptions specific to evaluator " + m_Evaluator.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Evaluator).listOptions()));  }  if ((m_Search != null) && (m_Search instanceof OptionHandler)) {    result.add(new Option("","",0,"\nOptions specific to search method " + m_Search.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Search).listOptions()));  }  return result.elements();}  }
class C{  @Override public void output(Vertex output){}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider03() throws Exception {  for (  String validValue : getValidValues()) {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue,getDefaultProvider());    assertTrue("Not TrustManagerFactory object",trustMF instanceof TrustManagerFactory);    assertEquals("Invalid algorithm",trustMF.getAlgorithm(),validValue);    assertEquals("Invalid provider",trustMF.getProvider(),getDefaultProvider());  }}  }
class C{  public void tick(){  final long count=uncounted.getAndSet(0);  final double instantRate=count / interval;  if (initialized) {    rate+=(alpha * (instantRate - rate));  } else {    rate=instantRate;    initialized=true;  }}  }
class C{  public boolean isIn(MessageUid value){  return lowValue.compareTo(value) <= 0 && highValue.compareTo(value) >= 0;}  }
class C{  public Type basicGetType(){  return type;}  }
class C{  public static float colorToFloat(final Color clr){  return Color.RGBtoHSB(clr.getRed(),clr.getGreen(),clr.getBlue(),null)[0];}  }
class C{  public void init(TempCharBuffer head){  _top=head;  _head=head;  if (head != null) {    _buffer=head.buffer();    _length=head.getLength();  } else   _length=0;  _offset=0;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  public final void remove(DiskRegion dr,DiskEntry entry){  try {    basicRemove(dr,entry);  } catch (  IOException ex) {    throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0.toLocalizedString(this.diskFile.getPath()),ex,dr.getName());  }catch (  InterruptedException ie) {    Thread.currentThread().interrupt();    dr.getCancelCriterion().checkCancelInProgress(ie);    throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING.toLocalizedString(this.diskFile.getPath()),ie,dr.getName());  }}  }
class C{  public boolean isNetworkConnected(){  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnectedOrConnecting();}  }
class C{  public NamedMediaType(MediaType mt){  if (mt == null)   throw new NullPointerException("Null media type.");  this._mediaType=mt;  this._name=constructName(_mediaType);  this._icon=getIcon(_mediaType);}  }
class C{  public synchronized void add(double value){  add(mCategories.size() + "",value);}  }
class C{  public Boolean isRepeat(){  return repeat;}  }
class C{  private boolean shouldIconBeShown(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String key=getString(R.string.show_bottom_sheet_icon_preference_key);  boolean defaultValue=getResources().getBoolean(R.bool.show_bottom_sheet_icon_preference_default_value);  return sharedPreferences.getBoolean(key,defaultValue);}  }
class C{  public void incrByFloat(String key,double doubleValue){  if (isInTransaction()) {    transaction.incrByFloat(key,doubleValue);    if (keyExpiryTime != -1) {      transaction.expire(key,keyExpiryTime);    }  } else {    jedis.incrByFloat(key,doubleValue);    if (keyExpiryTime != -1) {      jedis.expire(key,keyExpiryTime);    }  }}  }
class C{  public void open(){  MigrateLogger_Formatter traceFormatter=new MigrateLogger_Formatter(true);  MigrateLogger_Formatter warningFormatter=new MigrateLogger_Formatter(false);  MigrateLogger_Formatter errorFormatter=new MigrateLogger_Formatter(false);  FileHandler traceLog=null;  FileHandler warningLog=null;  FileHandler errorLog=null;  String time=null;  time=getDateTime();  StringBuffer filename=new StringBuffer(getLogDirectory()).append("migration_").append(time);  try {    traceLog=new FileHandler(new StringBuffer(filename).append(".trace.log").toString());    warningLog=new FileHandler(new StringBuffer(filename).append(".warning.log").toString());    errorLog=new FileHandler(new StringBuffer(filename).append(".error.log").toString());  } catch (  Exception e) {    e.printStackTrace();  }  MigrateLogger_Filter levelFilter=new MigrateLogger_Filter(Level.WARNING);  traceLog.setLevel(getMaxLogLevel());  warningLog.setLevel(Level.WARNING);  warningLog.setFilter(levelFilter);  errorLog.setLevel(Level.SEVERE);  traceLog.setFormatter(traceFormatter);  warningLog.setFormatter(warningFormatter);  errorLog.setFormatter(errorFormatter);  m_logger.addHandler(traceLog);  m_logger.addHandler(warningLog);  m_logger.addHandler(errorLog);}  }
class C{  public static void removeIncompleteUploads_test() throws Exception {  println("Test: removeIncompleteUpload(String bucketName, String objectName)");  String fileName=createFile(6 * MB);  InputStream is=Files.newInputStream(Paths.get(fileName));  try {    client.putObject(bucketName,fileName,is,9 * 1024 * 1024,null);  } catch (  InsufficientDataException e) {    println("Exception occurred as excepted");  }  is.close();  int i=0;  for (  Result<Upload> r : client.listIncompleteUploads(bucketName)) {    println(i++,r.get());    if (i == 10) {      break;    }  }  Files.delete(Paths.get(fileName));  client.removeIncompleteUpload(bucketName,fileName);}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  public static int hash(int seed,byte[] byteArray){  if (byteArray == null) {    return 0;  }  for (  byte aByte : byteArray) {    seed=hash(seed,aByte);  }  return seed;}  }
class C{  protected OrdinalOp_Impl(){  super();}  }
class C{  public void error(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());  if (null != errHandler)   errHandler.error(spe); else   System.out.println(formattedMsg);}  }
class C{  private String generatePortName(){  StringBuffer portName=new StringBuffer("Cinder Storage Port:");  int portCount=allStoragePortsList.size();  portName=portName.append(String.valueOf(portCount - 1));  return portName.toString();}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  private void checkResource(ResourceImpl resource){  checkArgument(ID.equals(resource.getType()),"Resource should have '" + ID + "' type");  checkArgument(SUPPORTED_UNITS.contains(resource.getUnit()),"Resource has unsupported unit '" + resource.getUnit() + "'");}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd) {    return true;  }  return false;}  }
class C{  public static boolean contains(Iterable self,Object item){  for (  Object e : self) {    if (item == null ? e == null : item.equals(e)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean batchFinished() throws Exception {  int i;  Instances inst;  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  inst=new Instances(getInputFormat());  if (!hasImmediateOutputFormat() && !isFirstBatchDone()) {    if (allowAccessToFullInputFormat()) {      setOutputFormat(determineOutputFormat(inst));    } else {      setOutputFormat(determineOutputFormat(new Instances(inst,0)));    }  }  if (inst.numInstances() > 0) {    inst=process(inst);    flushInput();    for (i=0; i < inst.numInstances(); i++) {      push(inst.instance(i));    }  }  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public LatvianStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public String remoteToString(){  return Util.getUnqualifiedName(getClass()) + " [remoteRef: " + ref+ "]";}  }
class C{  public boolean exists(){  return scanner != null;}  }
class C{  private void createCompilationThread(){  CompilationThread ct=new CompilationThread();  Controller.compilationThread=ct;  ct.start();}  }
class C{  public static Font createTrueTypeFont(String fontName,String fileName){  String alreadyLoaded=fileName + "_" + fontReturnedHeight+ "_"+ Font.STYLE_PLAIN;  Font f=derivedFontCache.get(alreadyLoaded);  if (f != null) {    return f;  }  if (fontName.startsWith("native:")) {    if (!Display.impl.isNativeFontSchemeSupported()) {      return null;    }  } else {    if (fileName != null && (fileName.indexOf('/') > -1 || fileName.indexOf('\\') > -1 || !fileName.endsWith(".ttf"))) {      throw new IllegalArgumentException("The font file name must be relative to the root and end with ttf: " + fileName);    }  }  Object font=Display.impl.loadTrueTypeFont(fontName,fileName);  if (font == null) {    return null;  }  f=new Font(font);  f.ttf=true;  f.fontUniqueId=fontName;  float h=f.getHeight();  fontReturnedHeight=h;  derivedFontCache.put(fileName + "_" + h+ "_"+ Font.STYLE_PLAIN,f);  return f;}  }
class C{  @Override public void writeXML(String fileName) throws IOException {  OutputStream out=new FileOutputStream(fileName);  if (fileName.endsWith(".gz")) {    out=new GZIPOutputStream(out);  }  writeXML(out);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.152 -0400",hash_original_method="25C5B7A23CB49F643BCDC481452D2C99",hash_generated_method="2B8C00376BFC582E1797467A1C8ED4E6") public static Collection<File> listFiles(File directory,String[] extensions,boolean recursive){  IOFileFilter filter;  if (extensions == null) {    filter=TrueFileFilter.INSTANCE;  } else {    String[] suffixes=toSuffixes(extensions);    filter=new SuffixFileFilter(suffixes);  }  return listFiles(directory,filter,recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE);}  }
class C{  private void purgeMissingInstExtModConfigs(){  final InstExtModConfsBean instExtModConfsBean=Env.LAUNCHER_SETTINGS.get(LSettings.INST_EXT_MOD_CONFS);  InstExtModConfsBean instExtModConfsBeanClone=null;  for (  final InstExtModConfBean conf : instExtModConfsBean.getInstExtModConfBeanList()) {    boolean found=false;    for (    final ExtModManifestBean mf : extModManifestList)     if (mf.getFolder().equals(conf.getFolder())) {      found=true;      break;    }    if (!found) {      if (instExtModConfsBeanClone == null)       instExtModConfsBeanClone=instExtModConfsBean.cloneBean();      instExtModConfsBeanClone.getInstExtModConfBeanList().remove(instExtModConfsBeanClone.getModuleConfForFolder(conf.getFolder()));    }  }  if (instExtModConfsBeanClone != null)   Env.LAUNCHER_SETTINGS.set(LSettings.INST_EXT_MOD_CONFS,instExtModConfsBeanClone);}  }
class C{  public static float exp(float fValue){  return (float)Math.exp(fValue);}  }
class C{  public void addNotificationListener(ObjectName name,ObjectName listener,NotificationFilter filter,Object handback) throws InstanceNotFoundException {  mbsInterceptor.addNotificationListener(cloneObjectName(name),listener,filter,handback);}  }
class C{  public void testDoConfigureSetsConfigurationVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.CONFIGURATION_VERSION,CONFIGURATION_VERSION);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(CONFIGURATION_VERSION,"//weblogic:configuration-version",config);}  }
class C{  public JavaResult waitForCompletion(String messageID) throws Exception {  log.info("Verifying the Async task status for message {}",messageID);  InputStream responseStream=null;  EchoCommand command=null;  JavaResult result=null;  String statusQueryWithParams=String.format(STATUS_QUERY,messageID);  int retries=0;  do {    try {      log.info("retrying {}th time",retries);      ClientResponse response=client.post(getBaseURI(),statusQueryWithParams);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);        command=result.getBean(EchoCommand.class);        if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {          log.info("Async task is still in processing state. Hence sleeping...");          Thread.sleep(HDSConstants.TASK_PENDING_WAIT_TIME);        }      } else {        throw HDSException.exceptions.asyncTaskInvalidResponse(response.getStatus());      }    }  finally {      try {        if (null != responseStream) {          responseStream.close();        }      } catch (      IOException ioEx) {        log.warn("Ignoring io exception that occurred during stream closing for async status check for messageID {}",messageID);      }    }  } while (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus()) && retries++ < HDSConstants.MAX_RETRIES);  if (retries >= HDSConstants.MAX_RETRIES) {    log.error("Async task exceeded the maximum number of retries");    throw HDSException.exceptions.asyncTaskMaximumRetriesExceed(messageID);  }  if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=result.getBean(Error.class);    String errorMessage=String.format("Async task failed for messageID %s due to %s with error code: %d",messageID,error.getDescription(),error.getCode());    log.error(errorMessage);    HDSException.exceptions.asyncTaskFailedWithErrorResponse(messageID,error.getDescription(),error.getCode());    throw new Exception(errorMessage);  }  log.info("Async task completed for messageID {}",messageID);  return result;}  }
class C{  public void writeExifData() throws IOException {  if (this.outFile == null) {    return;  }  if (this.aperture != null) {    this.outFile.setAttribute(ExifInterface.TAG_APERTURE,this.aperture);  }  if (this.datetime != null) {    this.outFile.setAttribute(ExifInterface.TAG_DATETIME,this.datetime);  }  if (this.exposureTime != null) {    this.outFile.setAttribute(ExifInterface.TAG_EXPOSURE_TIME,this.exposureTime);  }  if (this.flash != null) {    this.outFile.setAttribute(ExifInterface.TAG_FLASH,this.flash);  }  if (this.focalLength != null) {    this.outFile.setAttribute(ExifInterface.TAG_FOCAL_LENGTH,this.focalLength);  }  if (this.gpsAltitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_ALTITUDE,this.gpsAltitude);  }  if (this.gpsAltitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_ALTITUDE_REF,this.gpsAltitudeRef);  }  if (this.gpsDateStamp != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_DATESTAMP,this.gpsDateStamp);  }  if (this.gpsLatitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LATITUDE,this.gpsLatitude);  }  if (this.gpsLatitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,this.gpsLatitudeRef);  }  if (this.gpsLongitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LONGITUDE,this.gpsLongitude);  }  if (this.gpsLongitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,this.gpsLongitudeRef);  }  if (this.gpsProcessingMethod != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD,this.gpsProcessingMethod);  }  if (this.gpsTimestamp != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_TIMESTAMP,this.gpsTimestamp);  }  if (this.iso != null) {    this.outFile.setAttribute(ExifInterface.TAG_ISO,this.iso);  }  if (this.make != null) {    this.outFile.setAttribute(ExifInterface.TAG_MAKE,this.make);  }  if (this.model != null) {    this.outFile.setAttribute(ExifInterface.TAG_MODEL,this.model);  }  if (this.orientation != null) {    this.outFile.setAttribute(ExifInterface.TAG_ORIENTATION,this.orientation);  }  if (this.whiteBalance != null) {    this.outFile.setAttribute(ExifInterface.TAG_WHITE_BALANCE,this.whiteBalance);  }  this.outFile.saveAttributes();}  }
class C{  @Override public void tags(Map<String,Object> metricTags){  this.metricTags.putAll(metricTags);}  }
class C{  public RangeQueryBuilder format(String format){  this.format=format;  return this;}  }
class C{  public void removeField(CtField f) throws NotFoundException {  checkModify();}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void dequeueOutputBuffer(MediaCodec codec,ByteBuffer[] outputBuffers,int index,MediaCodec.BufferInfo info){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    ByteBuffer buffer=outputBuffers[index];    Log.i("size/remaining: " + info.size + "/"+ buffer.remaining());    if (info.size <= buffer.remaining()) {      final byte[] bufferCopied=new byte[info.size];      buffer.get(bufferCopied);      codec.releaseOutputBuffer(index,false);      addEncoded(bufferCopied);      if (Log.DEBUG) {        AudioUtils.showSomeBytes("out",bufferCopied);      }    } else {      Log.e("size > remaining");      codec.releaseOutputBuffer(index,false);    }  }}  }
class C{  @Override public void processResponse(StunResponseEvent event){  TransactionID transactionID=event.getTransactionID();  logger.finest("Received a message: tranid= " + transactionID);  logger.finest("localCand= " + hostCandidate);synchronized (requests) {    requests.remove(transactionID);  }  Response response=event.getResponse();  Request request=event.getRequest();  boolean completedResolvingCandidate=true;  try {    if (response.isSuccessResponse()) {      if (request.containsAttribute(Attribute.MESSAGE_INTEGRITY)) {        MessageIntegrityAttribute messageIntegrityAttribute=(MessageIntegrityAttribute)response.getAttribute(Attribute.MESSAGE_INTEGRITY);        if (messageIntegrityAttribute == null)         return;        UsernameAttribute usernameAttribute=(UsernameAttribute)request.getAttribute(Attribute.USERNAME);        if (usernameAttribute == null)         return;        if (!harvester.getStunStack().validateMessageIntegrity(messageIntegrityAttribute,LongTermCredential.toString(usernameAttribute.getUsername()),!request.containsAttribute(Attribute.REALM) && !request.containsAttribute(Attribute.NONCE),event.getRawMessage()))         return;      }      processSuccess(response,request,transactionID);    } else {      ErrorCodeAttribute errorCodeAttr=(ErrorCodeAttribute)response.getAttribute(Attribute.ERROR_CODE);      if ((errorCodeAttr != null) && (errorCodeAttr.getErrorClass() == 4)) {        try {switch (errorCodeAttr.getErrorNumber()) {case 1:            if (processUnauthorized(response,request,transactionID))             completedResolvingCandidate=false;          break;case 38:        if (processStaleNonce(response,request,transactionID))         completedResolvingCandidate=false;      break;  }} catch (StunException sex) {  completedResolvingCandidate=true;}}if (completedResolvingCandidate && processErrorOrFailure(response,request,transactionID)) completedResolvingCandidate=false;}}  finally {if (completedResolvingCandidate) completedResolvingCandidate(request,response);}}  }
class C{  private boolean isConvertedSubq(RexNode rex){  if ((rex instanceof RexLiteral) || (rex instanceof RexDynamicParam)) {    return true;  }  if (rex instanceof RexCall) {    RexCall call=(RexCall)rex;    if (call.getOperator() == SqlStdOperatorTable.CAST) {      RexNode operand=call.getOperands().get(0);      if (operand instanceof RexLiteral) {        return true;      }    }  }  return false;}  }
class C{  public static void updateExpandedVolume(Volume volume,StorageVolume deviceVolume,DbClient dbClient){  volume.setCapacity(deviceVolume.getRequestedCapacity());  volume.setProvisionedCapacity(deviceVolume.getProvisionedCapacity());  volume.setAllocatedCapacity(deviceVolume.getAllocatedCapacity());  dbClient.updateObject(volume);}  }
class C{  private java.awt.Color fxToAWTColor(Color color){  int r=((int)color.getRed() * 255);  int g=((int)color.getGreen() * 255);  int b=((int)color.getBlue() * 255);  int rgb=(r << 16) + (g << 8) + b;  return new java.awt.Color(rgb);}  }
class C{  void updateTabState(int newState){  long now=System.currentTimeMillis();  recordTabStateTransition(mLastTabState,newState,now - mLastTabStateChangeMillis);  mLastTabStateChangeMillis=now;  mLastTabState=newState;}  }
class C{  public static void centerOnWindow(Component componentToMove){  center(componentToMove,SwingUtilities.windowForComponent(componentToMove));}  }
class C{  public ExampleFileFilter(String[] filters,String description){  this.filters=new Hashtable<String,ExampleFileFilter>(filters.length);  for (  String filter : filters) {    addExtension(filter);  }  setDescription(description);}  }
class C{  public LatLng toLatLng(){  return new LatLng(latitude,longitude);}  }
class C{  public void proceed(){}  }
class C{  public int updateTriggerGroupStateFromOtherState(Connection conn,GroupMatcher<TriggerKey> matcher,String newState,String oldState) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_GROUP_STATE_FROM_STATE));    ps.setString(1,newState);    ps.setString(2,toSqlLikeClause(matcher));    ps.setString(3,oldState);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public void performSearch(){  new SearchDialog(textPane,new SearchableJTextComponent(textPane)).setVisible(true);}  }
class C{  public static char[] toCharArray(final InputStream is) throws IOException {  return IOUtils.toCharArray(is,Charset.defaultCharset());}  }
class C{  public Bounds addXValue(final double x){  final double small=x - FUDGE_FACTOR;  if (minX == null || minX > small) {    minX=new Double(small);  }  final double large=x + FUDGE_FACTOR;  if (maxX == null || maxX < large) {    maxX=new Double(large);  }  return this;}  }
class C{  public synchronized void addPanListener(PanListener listener){  mPanListeners.add(listener);}  }
class C{  @Deprecated public static <N,E>ImmutableNetwork<N,E> copyOf(ImmutableNetwork<N,E> graph){  return checkNotNull(graph);}  }
class C{  public static boolean createFile(@NonNull File file) throws IOException {  return FileUtil.makeFile(file);}  }
class C{  public void bind(String name,Remote obj) throws RemoteException, AlreadyBoundException, AccessException {  checkAccess("Registry.bind");synchronized (bindings) {    Remote curr=bindings.get(name);    if (curr != null)     throw new AlreadyBoundException(name);    bindings.put(name,obj);  }}  }
class C{  public static Logger createConsoleLogger(){  LoggerContext ctx=(LoggerContext)LogManager.getContext(true);  Configuration cfg=ctx.getConfiguration();  PatternLayout layout=PatternLayout.createLayout("[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n",null,null,Charset.defaultCharset(),false,false,null,null);  final Appender consoleApp=ConsoleAppender.createAppender(layout,null,null,CONSOLE_APPENDER,null,null);  consoleApp.start();  AppenderRef ref=AppenderRef.createAppenderRef(CONSOLE_APPENDER,Level.TRACE,null);  AppenderRef[] refs={ref};  LoggerConfig logCfg=LoggerConfig.createLogger("false",Level.INFO,LogManager.ROOT_LOGGER_NAME,"",refs,null,null,null);  logCfg.addAppender(consoleApp,null,null);  cfg.addAppender(consoleApp);  cfg.addLogger(LogManager.ROOT_LOGGER_NAME,logCfg);  ctx.updateLoggers(cfg);  return (Logger)LogManager.getContext().getLogger(LogManager.ROOT_LOGGER_NAME);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public int compareTo(final Score o){  if (elapsedNanos < o.elapsedNanos)   return -1;  if (elapsedNanos > o.elapsedNanos)   return 1;  return 0;}  }
class C{  protected boolean mustApplyTexture(Geometry geometry){  String semantic=this.getTexCoordSemantic(geometry);  return geometry.colladaGeometry.getTexCoordAccessor(semantic) != null && this.getTexture(geometry) != null;}  }
class C{  private String[] tokenize(String value,boolean keepComments) throws Exception {  char[] arrays=value.toCharArray();  boolean hasQuotation=false;  boolean hasSingleLineComments=false;  boolean hasMultiLineComments=false;  int start=0;  ArrayList<String> tokenList=new ArrayList<String>();  int len=arrays.length;  for (int i=0; i < len; i++) {    if (i == (len - 1)) {      if (spliter.contains(arrays[i])) {        char[] token=Arrays.copyOfRange(arrays,start,len - 1);        tokenList.add(new String(token));        if (arrays[i] != ' ') {          tokenList.add(String.valueOf(arrays[i]));        }      } else {        char[] token=Arrays.copyOfRange(arrays,start,len);        tokenList.add(new String(token));      }      break;    }    if (arrays[i] == '\'') {      if (hasQuotation == false) {        hasQuotation=true;      } else {        hasQuotation=false;      }      continue;    }    if (arrays[i] == '-') {      if (!hasQuotation) {        if (i < len - 1 && arrays[i + 1] == '-') {          hasSingleLineComments=true;        }      }      continue;    }    if (arrays[i] == '#') {      if (!hasQuotation) {        hasSingleLineComments=true;      }      continue;    }    if (arrays[i] == '\n') {      if (hasSingleLineComments) {        hasSingleLineComments=false;      }    }    if (arrays[i] == '/') {      if (i < len - 1 && arrays[i + 1] == '*') {        hasMultiLineComments=true;      }      if (i > 0 && arrays[i - 1] == '*' && hasMultiLineComments) {        hasMultiLineComments=false;        if (!keepComments) {          start=i + 1;        }      }      continue;    }    if (i > 0 && spliter.contains(arrays[i])) {      if (hasQuotation || hasSingleLineComments || hasMultiLineComments) {        continue;      }      if (i >= start) {        char[] token=Arrays.copyOfRange(arrays,start,i);        if (token.length > 0) {          tokenList.add(new String(token));        }        if (arrays[i] == ' ') {          start=i + 1;          continue;        }        if (arrays[i] == '\r') {          if (arrays[i + 1] == '\n') {            start=i + 2;            i++;            continue;          } else {            start=i + 1;          }          continue;        }        if (arrays[i] == '\n') {          start=i + 1;          continue;        }        if (spliter.contains(arrays[i + 1])) {          String temp="" + arrays[i] + arrays[i + 1];          if (temp.equals("<>") || temp.equals("!=") || temp.equals("<=")|| temp.equals(">=")) {            tokenList.add(temp);            start=i + 1;            i++;          } else {            tokenList.add(String.valueOf(arrays[i]));          }        } else {          tokenList.add(String.valueOf(arrays[i]));        }      }      start=i + 1;      continue;    }  }  return tokenList.toArray(new String[tokenList.size()]);}  }
class C{  @Override public boolean replace(K key,V oldValue,V newValue){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @Override public int size(){  return m_Root.size();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private XMLSupport(){}  }
class C{  public boolean isReadyToRun(){  return (getSize() > 0 && getCurrentAutomationItem() == getItemsBySequenceList().get(0));}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type,SerialTrafficController tc){  if (!validSystemNameFormat(systemName,type)) {    return false;  }  SerialNode node=(SerialNode)getNodeFromSystemName(systemName,tc);  if (node == null) {    return false;  }  int bit=getBitFromSystemName(systemName);  if ((type == 'T') || (type == 'L')) {    if ((bit <= 0) || (bit > (node.numOutputCards() * node.getNumBitsPerCard()))) {      return false;    }  } else   if (type == 'S') {    if ((bit <= 0) || (bit > (node.numInputCards() * node.getNumBitsPerCard()))) {      return false;    }  } else {    log.error("Invalid type specification in validSystemNameConfig call");    return false;  }  return true;}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && equalsTo(getClass().cast(other));}  }
class C{  public void add(Vector3 point){  controlPoints.add(point);}  }
class C{  public boolean allValuesAreSame(){  if (m_values.isEmpty()) {    return false;  }  final int first=m_values.values().iterator().next();  for (  final int value : m_values.values()) {    if (first != value) {      return false;    }  }  return true;}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  Hashtable h=hashtableClone(ht100);  Integer key=new Integer(100);  h.put("Value 100",key);  assertTrue("Key/Value not inserted",h.size() == 1 && (h.contains(key)));  h=hashtableClone(htfull);  h.put("Value 100",key);  assertTrue("Key/Value not inserted into full table",h.size() == 8 && (h.contains(key)));  try {    h.put(null,key);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }  try {    h.put("Value 100",null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  String nullString=null;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("Core",nullString);  assertTrue("Core",state);}  }
class C{  public void removeExceptionsAttribute(){  AttributeInfo.remove(attribute,ExceptionsAttribute.tag);}  }
class C{  public boolean isUseEncryption(){  return this.useEncryption;}  }
class C{  @Override public void visitTypeInsn(int opcode,String type){switch (opcode) {case CHECKCAST:case INSTANCEOF:    mv.visitInsn(DUP);  mv.visitLdcInsn(type);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],LG_V);break;case NEW:mv.visitLdcInsn(type);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],G_V);break;case ANEWARRAY:mv.visitInsn(DUP);mv.visitLdcInsn(type);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],IG_V);break;default :check(false);}super.visitTypeInsn(opcode,type);}  }
class C{  protected FunctionBlockImpl(){  super();}  }
class C{  @Deprecated public MediaFile(File f){  this(f.toPath(),null);}  }
class C{  public int hashCode(){  return Float.floatToIntBits(value);}  }
class C{  public mat4 add(mat4 matA,mat4 matB){  float[] a=matA.m;  float[] b=matB.m;  for (int i=0; i < 16; ++i) {    this.m[i]=a[i] + b[i];  }  return this;}  }
class C{  @DSComment("Sip phone call") @DSSpec(DSCat.PHONE_CALL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.827 -0500",hash_original_method="5739155C46DD20825CE1C589327CD281",hash_generated_method="FD6A0C45A3EF0F6AAB79922CBDEFCDCE") public boolean isInCall(){synchronized (this) {    return mInCall;  }}  }
class C{  public String lowerCaseTokensTipText(){  return "If set then all the word tokens are converted to lower case " + "before being added to the dictionary.";}  }
class C{  public boolean confirm(String message){  return false;}  }
class C{  public void execute(){  if (this.knowledge == null) {    knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  }  Parameters searchParams=getParams();  Parameters params=searchParams;  Graph graph;  if (params.getBoolean("rfciUsed",false)) {    System.out.println("WARNING: there is no RFCI option for tsFCI! Just using tsFCI.");    TsFci fci=new TsFci(getIndependenceTest());    fci.setKnowledge(knowledge);    fci.setCompleteRuleSetUsed(true);    fci.setMaxPathLength(params.getInt("maxReachablePathLength",-1));    fci.setDepth(params.getInt("depth",-1));    graph=fci.search();  } else {    TsFci fci=new TsFci(getIndependenceTest());    fci.setKnowledge(knowledge);    fci.setCompleteRuleSetUsed(true);    fci.setPossibleDsepSearchDone(params.getBoolean("possibleDsepDone",true));    fci.setMaxPathLength(params.getInt("maxReachablePathLength",-1));    fci.setDepth(params.getInt("depth",-1));    graph=fci.search();  }  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,knowledge);  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  public PackedQuadCell nextCell(boolean descend){  final int level=getLevel();  final int shift=getShiftForLevel(level);  if ((!descend && isEnd(level,shift)) || isEnd(maxLevels,getShiftForLevel(maxLevels))) {    return null;  }  long newTerm;  final boolean isLeaf=(term & 0x1L) == 0x1L;  if ((descend && !isLeaf && (level != maxLevels)) || level == 0) {    newTerm=((term >>> 1) + 0x1L) << 1;  } else {    newTerm=term + (0x1L << shift);    if (((term >>> shift) & 0x3L) == 0x3L) {      newTerm=((newTerm >>> 1) - (Long.numberOfTrailingZeros(newTerm >>> shift) >>> 1)) << 1;    }  }  return new PackedQuadCell(newTerm);}  }
class C{  public static MethodType methodType(Class<?> rtype,Class<?>[] ptypes){  return makeImpl(rtype,ptypes,false);}  }
class C{  public static void main(String[] args){  Concentration conc=new Concentration(1.0,1.0,1.0,500);  System.out.println(conc.sampleAlpha(50));}  }
class C{  private void addSequence(ObjectSequence sequence){  if (!pool.containsKey(sequence.getGeneratedClass()))   pool.put(sequence.getGeneratedClass(),new HashSet<TestCase>());  pool.get(sequence.getGeneratedClass()).add(sequence.getSequence());  logger.info("Added new sequence for " + sequence.getGeneratedClass());  logger.info(sequence.getSequence().toCode());}  }
class C{  private Path convertPath(Path path,URI newUri){  assert newUri != null;  if (path != null) {    URI pathUri=path.toUri();    try {      return new Path(new URI(pathUri.getScheme() != null ? newUri.getScheme() : null,pathUri.getAuthority() != null ? newUri.getAuthority() : null,pathUri.getPath(),null,null));    } catch (    URISyntaxException e) {      throw new IgniteException("Failed to construct secondary file system path from the primary file " + "system path: " + path,e);    }  } else   return null;}  }
class C{  public <T extends Event>void waitFor(Class<T> eventClass) throws InterruptedException {  waitFor(null);}  }
class C{  public R result(){  return null;}  }
class C{  public CompactHashSet(Collection<E> c){  this(c.size());  addAll(c);}  }
class C{  protected static boolean isDiagnosticsEnabled(){  return LogFactory.isDiagnosticsEnabled();}  }
class C{  public Evaluator(){  super();}  }
class C{  protected static String applyLimitClause(final String query,int limit,final int queryResultSetLimit){  Matcher matcher=SELECT_EXPR_PATTERN.matcher(query);  if (matcher.matches()) {    Matcher limit_matcher=SELECT_WITH_LIMIT_EXPR_PATTERN.matcher(query);    boolean queryAlreadyHasLimitClause=limit_matcher.matches();    if (!queryAlreadyHasLimitClause) {      if (limit == 0) {        limit=queryResultSetLimit;      }      String result=query;      result+=" LIMIT " + limit;      return result;    }  }  return query;}  }
class C{  public int compareMajorMinorTo(Version other){  int retVal;  if (major == other.major)   retVal=minor - other.minor; else   retVal=major - other.major;  return retVal;}  }
class C{  public ImmutableMap<Service,Long> startupTimes(){  return state.startupTimes();}  }
class C{  private static void showMenuItem(int depth){  if (hasActionBar) {    instrumentation.waitForIdleSync();    View moreButton=getMoreOptionView();    if (moreButton != null) {      try {        SOLO.clickOnView(moreButton);      } catch (      Throwable e) {        if (depth < 5 && e.getMessage().indexOf("Click can not be completed") > -1) {          showMenuItem(depth++);        }      }      return;    } else {      SOLO.sendKey(KeyEvent.KEYCODE_MENU);    }  } else {    SOLO.sendKey(KeyEvent.KEYCODE_MENU);  }}  }
class C{  public Key createRandomKeyFromPrefix(){  Key key=Key.createRandomKey();  copyBits(this,key,depth);  return key;}  }
class C{  public ClassLoader createJar(File jar) throws IOException, ObjectStoreConfigException {  File target=createTempDir(getClass().getSimpleName());  compile(target);  JarPacker packer=new JarPacker(target);  packer.packageJar(jar);  FileUtil.deleteDir(target);  return new URLClassLoader(new URL[]{jar.toURI().toURL()},cl);}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  @SuppressWarnings("unused") @Test public void testParentEntryDeep(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createEntryAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            _createEntryAssignment(v1,s3,2);            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createEntryAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  _createTransition(findState(sc,"s6"),findState(sc,"s4"));  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  assertNotNull(_s1.getEntryAction());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  assertNotNull(_s3.getEntryAction());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  assertNotNull(_s4.getEntryAction());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("sc.r.s2.r.s6",_s6.getName());  assertNull(_s6.getEntryAction());  Reaction _t=_s6.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(4,_effect.getSteps().size());  assertCall(_effect,3,_s4.getEnterSequences().get(0));  assertCall(_effect,2,_s3.getEntryAction());  assertCall(_effect,1,_s1.getEntryAction());}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  @Override public void onEditUser(User user){  Intent intent=new Intent(Intent.ACTION_EDIT,Uri.EMPTY,getApplicationContext(),CreateUserActivity.class);  intent.putExtra(CreateUserActivity.KEY_USER_ID,user.getId());  startActivityForResult(intent,0);}  }
class C{  public synchronized void writeTo(OutputStream out,CompressionLevel compressionLevel) throws IOException {  if (compressPos == -1) {    super.writeTo(out);    bytesWritten=buf.length;  } else {    count=pos;    out.write(buf,0,compressPos);    bytesWritten=deflate(out,compressionLevel);  }}  }
class C{  public static boolean isVoidType(Type type){  return type instanceof VoidType;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  doc=(Document)load("hc_staff",false);  nameList=doc.getElementsByTagName("strong");  assertSize("documentGetElementsByTagNameLengthAssert",5,nameList);}  }
class C{  protected AnimatablePercentageValue(AnimationTarget target){  super(target);}  }
class C{  public WorkflowAnnotations(){  this.annotationsDrawOrder=new LinkedList<>();  this.annotationsEventOrder=new LinkedList<>();  this.lock=new Object();}  }
class C{  public int search(Vector<TreeNode> vct,String target){  if (vct == null) {    return -1;  }  for (int i=0; i < vct.size(); i++) {    if (target.equals(vct.elementAt(i).value)) {      return i;    }  }  return -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.791 -0500",hash_original_method="039A6CD61F0359B07E2C6E71E77BA3EE",hash_generated_method="B0E5F09CC052C2167859B5F72C3B00F9") public boolean isUnused(){  return (numEntries < 1) && waitingThreads.isEmpty();}  }
class C{  public void removeStatus(final TargetUpdateStatus status){  this.status.remove(status);}  }
class C{  public void reportNewThrownException(Integer position,Throwable t){  exceptions.put(position,t);}  }
class C{  @NonNull final <Output>ChronosOperationResult<Output> runSync(@NonNull final ChronosOperation<Output> operation,final boolean broadcastResult){  final ChronosOperationResult<Output> result=createEmptyResult(operation,broadcastResult);  silentRun(operation,result);  mEventBus.post(result);  return result;}  }
class C{  public void clearTestProviderEnabled(String provider){  try {    mService.clearTestProviderEnabled(provider);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  public static String[] xorBursts(String[] beginBursts,String[] endBursts,String fn,String fnEnc){  String[] xoredBursts=new String[10];  xoredBursts[8]=fn;  xoredBursts[9]=fnEnc;  StringBuilder oneXoredBurst;  int cant=0;  for (int j=0; j < 4; j++) {    if (isABurst(beginBursts[j]) && isABurst(endBursts[j])) {      oneXoredBurst=new StringBuilder();      for (int i=0; i < 114; i++) {        oneXoredBurst.append(beginBursts[j].charAt(i) ^ endBursts[j].charAt(i));      }      xoredBursts[j]=oneXoredBurst.toString();    } else {      cant++;      xoredBursts[j]="Incorrect bursts from capture, can't xor them.";    }  }  if (cant >= 3)   return new String[0];  for (int i=4; i < 8; i++) {    if (isInteger(endBursts[i])) {      xoredBursts[i]="a5/1 burst fn = " + endBursts[i];    }  }  String temp2=xoredBursts[1];  String temp3=xoredBursts[2];  String temp4=xoredBursts[3];  xoredBursts[1]=xoredBursts[4];  xoredBursts[2]=temp2;  xoredBursts[3]=xoredBursts[5];  xoredBursts[4]=temp3;  xoredBursts[5]=xoredBursts[6];  xoredBursts[6]=temp4;  return xoredBursts;}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1){  return of(Ordering.natural(),k1,v1);}  }
class C{  public int loadActivities(){  long start=System.currentTimeMillis();  int MAX_ACTIVITIES_IN_LIST=MSysConfig.getIntValue("MAX_ACTIVITIES_IN_LIST",200,Env.getAD_Client_ID(Env.getCtx()));  model=new ListModelTable();  ArrayList<MWFActivity> list=new ArrayList<MWFActivity>();  String sql="SELECT * FROM AD_WF_Activity a " + "WHERE a.Processed='N' AND a.WFState='OS' AND (" + " a.AD_User_ID=?"+ " OR EXISTS (SELECT * FROM AD_WF_Responsible r WHERE a.AD_WF_Responsible_ID=r.AD_WF_Responsible_ID"+ " AND COALESCE(r.AD_User_ID,0)=0 AND COALESCE(r.AD_Role_ID,0)=0 AND (a.AD_User_ID=? OR a.AD_User_ID IS NULL))"+ " OR EXISTS (SELECT * FROM AD_WF_Responsible r WHERE a.AD_WF_Responsible_ID=r.AD_WF_Responsible_ID"+ " AND r.AD_User_ID=?)"+ " OR EXISTS (SELECT * FROM AD_WF_Responsible r INNER JOIN AD_User_Roles ur ON (r.AD_Role_ID=ur.AD_Role_ID)"+ " WHERE a.AD_WF_Responsible_ID=r.AD_WF_Responsible_ID AND ur.AD_User_ID=?)"+ ") ORDER BY a.Priority DESC, Created";  int AD_User_ID=Env.getAD_User_ID(Env.getCtx());  MRole role=MRole.get(Env.getCtx(),Env.getAD_Role_ID(Env.getCtx()));  sql=role.addAccessSQL(sql,"a",true,false);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_User_ID);    pstmt.setInt(2,AD_User_ID);    pstmt.setInt(3,AD_User_ID);    pstmt.setInt(4,AD_User_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      MWFActivity activity=new MWFActivity(Env.getCtx(),rs,null);      list.add(activity);      List<Object> rowData=new ArrayList<Object>();      rowData.add(activity.getPriority());      rowData.add(activity.getNodeName());      rowData.add(activity.getSummary());      model.add(rowData);      if (list.size() > MAX_ACTIVITIES_IN_LIST && MAX_ACTIVITIES_IN_LIST > 0) {        log.warning("More then 200 Activities - ignored");        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_activities=new MWFActivity[list.size()];  list.toArray(m_activities);  log.fine("#" + m_activities.length + "("+ (System.currentTimeMillis() - start)+ "ms)");  m_index=0;  String[] columns=new String[]{Msg.translate(Env.getCtx(),"Priority"),Msg.translate(Env.getCtx(),"AD_WF_Node_ID"),Msg.translate(Env.getCtx(),"Summary")};  WListItemRenderer renderer=new WListItemRenderer(Arrays.asList(columns));  ListHeader header=new ListHeader();  header.setWidth("30px");  renderer.setListHeader(0,header);  renderer.addTableValueChangeListener(listbox);  model.setNoColumns(columns.length);  listbox.setModel(model);  listbox.setItemRenderer(renderer);  listbox.repaint();  listbox.setFixedLayout(true);  return m_activities.length;}  }
class C{  public void savePomFile(final String sortedXml){  try (FileOutputStream saveFile=new FileOutputStream(pomFile)){    IOUtils.write(sortedXml,saveFile,encoding);  } catch (  IOException e) {    throw new FailureException("Could not save sorted pom file: " + pomFile.getAbsolutePath(),e);  }}  }
class C{  public short readShort(){  return (short)Bytes.beS2(code,curBCI + 1);}  }
class C{  @Override protected void onDraw(Canvas canvas){  if (canvas != null) {    super.onDraw(canvas);  }  mTotalWidth=0;  if (mSuggestions == null)   return;  if (mBgPadding == null) {    mBgPadding=new Rect(0,0,0,0);    if (getBackground() != null) {      getBackground().getPadding(mBgPadding);    }  }  int x=0;  final int count=mSuggestions.size();  final int height=getHeight();  final Rect bgPadding=mBgPadding;  final Paint paint=mPaint;  final int touchX=mTouchX;  final int scrollX=getScrollX();  final boolean scrolled=mScrolled;  final boolean typedWordValid=mTypedWordValid;  final int y=(int)(((height - mPaint.getTextSize()) / 2) - mPaint.ascent());  for (int i=0; i < count; i++) {    String suggestion=mSuggestions.get(i);    float textWidth=paint.measureText(suggestion);    final int wordWidth=(int)textWidth + X_GAP * 2;    mWordX[i]=x;    mWordWidth[i]=wordWidth;    paint.setColor(mColorNormal);    if (touchX + scrollX >= x && touchX + scrollX < x + wordWidth && !scrolled) {      if (canvas != null) {        canvas.translate(x,0);        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);        mSelectionHighlight.draw(canvas);        canvas.translate(-x,0);      }      mSelectedIndex=i;    }    if (canvas != null) {      if ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid)) {        paint.setFakeBoldText(true);        paint.setColor(mColorRecommended);      } else       if (i != 0) {        paint.setColor(mColorOther);      }      canvas.drawText(suggestion,x + X_GAP,y,paint);      paint.setColor(mColorOther);      canvas.drawLine(x + wordWidth + 0.5f,bgPadding.top,x + wordWidth + 0.5f,height + 1,paint);      paint.setFakeBoldText(false);    }    x+=wordWidth;  }  mTotalWidth=x;  if (mTargetScrollX != getScrollX()) {    scrollToTarget();  }}  }
class C{  protected boolean arePathsContiguous(TreePath[] paths){  if (rowMapper == null || paths.length < 2)   return true; else {    BitSet bitSet=new BitSet(32);    int anIndex, counter, min;    int pathCount=paths.length;    int validCount=0;    TreePath[] tempPath=new TreePath[1];    tempPath[0]=paths[0];    min=rowMapper.getRowsForPaths(tempPath)[0];    for (counter=0; counter < pathCount; counter++) {      if (paths[counter] != null) {        tempPath[0]=paths[counter];        int[] rows=rowMapper.getRowsForPaths(tempPath);        if (rows == null) {          return false;        }        anIndex=rows[0];        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;        if (anIndex < min)         min=anIndex;        if (!bitSet.get(anIndex)) {          bitSet.set(anIndex);          validCount++;        }      }    }    int maxCounter=validCount + min;    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;  }  return true;}  }
class C{  public int write(final Protein protein) throws IOException {  return write(protein,true);}  }
class C{  void onShutdown(){}  }
class C{  public boolean isUnderlineTriple(Node x,Node y,Node z){  removeTriplesNotInGraph();  return underLineTriples.contains(new Triple(x,y,z));}  }
class C{  protected void validate_return(StorageProcessor[] param){}  }
class C{  protected void assertDirectory(File file){  assertExists(file);  assertTrue("File '" + file.getAbsolutePath() + "' is not a directory",file.isDirectory());}  }
class C{  private static void addParkings(MutableScenario scenario){  for (  Person person : scenario.getPopulation().getPersons().values()) {    List<PlanElement> planElements=person.getSelectedPlan().getPlanElements();    List<PlanElement> newPlanElements=new LinkedList<PlanElement>();    for (int i=0; i < planElements.size(); i++) {      if (planElements.get(i) instanceof Leg && ((Leg)planElements.get(i)).getMode().equals(TransportMode.car)) {        Activity previousActivity=(Activity)planElements.get(i - 1);        Activity nextActivity=(Activity)planElements.get(i + 1);        newPlanElements.add(getParkingWalkLeg(scenario.getNetwork().getLinks().get(previousActivity.getLinkId())));        newPlanElements.add(getParkingFacility(previousActivity,"parkingDeparture"));        newPlanElements.add(planElements.get(i));        newPlanElements.add(getParkingFacility(nextActivity,"parkingArrival"));        newPlanElements.add(getParkingWalkLeg(scenario.getNetwork().getLinks().get(nextActivity.getLinkId())));        previousActivity.setFacilityId(Id.create("facility_" + previousActivity.getLinkId().toString(),ActivityFacility.class));        nextActivity.setFacilityId(Id.create("facility_" + previousActivity.getLinkId().toString(),ActivityFacility.class));      } else {        newPlanElements.add(planElements.get(i));      }    }    planElements.clear();    planElements.addAll(newPlanElements);  }}  }
class C{  public boolean isLessThan(Minutes other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  protected final int find(char[] target,int from,int end){  while (from < end) {    if (match(target,from)) {      break;    }    from++;  }  return (from == end) ? -1 : from;}  }
class C{  public boolean checkForSuBinary(){  return checkForBinary("su");}  }
class C{  public static boolean isXSerializable(Class<?> clazz){  if (XSerializable.class.isAssignableFrom(clazz))   return true;  for (  Class<?> explicitx : s_xserializable)   if (explicitx.isAssignableFrom(clazz))   return true;  return false;}  }
class C{  public boolean isV3AllFlashArray(){  return (checkIfVmax3() && getModel() != null && getModel().contains("F"));}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    HeikinAshiItem dataItem=(HeikinAshiItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Open: "+ dataItem.getOpen()+ " Close: "+ dataItem.getClose()+ " High: "+ dataItem.getHigh()+ " Low: "+ dataItem.getLow());  }}  }
class C{  public void add(Rule rule){  rules.add(rule);}  }
class C{  public void updateFromPrefs(){  RaptorPreferenceStore preferences=Raptor.getInstance().getPreferences();  updateBoardFromPrefs();  Color background=preferences.getColor(BOARD_BACKGROUND_COLOR);  whiteNameRatingLabel.setFont(preferences.getFont(BOARD_PLAYER_NAME_FONT));  whiteNameRatingLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  whiteNameRatingLabel.setBackground(background);  blackNameRatingLabel.setFont(preferences.getFont(BOARD_PLAYER_NAME_FONT));  blackNameRatingLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  blackNameRatingLabel.setBackground(background);  whiteLagLabel.setFont(preferences.getFont(BOARD_LAG_FONT));  whiteLagLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  whiteLagLabel.setBackground(background);  blackLagLabel.setFont(preferences.getFont(BOARD_LAG_FONT));  blackLagLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  blackLagLabel.setBackground(background);  whiteClockLabel.setFont(preferences.getFont(BOARD_CLOCK_FONT));  whiteClockLabel.setForeground(preferences.getColor(BOARD_INACTIVE_CLOCK_COLOR));  whiteClockLabel.setBackground(background);  blackClockLabel.setFont(preferences.getFont(BOARD_CLOCK_FONT));  blackClockLabel.setForeground(preferences.getColor(BOARD_INACTIVE_CLOCK_COLOR));  blackClockLabel.setBackground(background);  openingDescriptionLabel.setFont(preferences.getFont(BOARD_OPENING_DESC_FONT));  openingDescriptionLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  openingDescriptionLabel.setBackground(background);  statusLabel.setFont(preferences.getFont(BOARD_STATUS_FONT));  statusLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  statusLabel.setBackground(background);  gameDescriptionLabel.setFont(preferences.getFont(BOARD_GAME_DESCRIPTION_FONT));  gameDescriptionLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  gameDescriptionLabel.setBackground(background);  currentPremovesLabel.setFont(preferences.getFont(BOARD_PREMOVES_FONT));  currentPremovesLabel.setForeground(preferences.getColor(BOARD_CONTROL_COLOR));  currentPremovesLabel.setBackground(background);  adjustMoveList();  adjustChessBoardLayout();  boardComposite.setBackground(preferences.getColor(BOARD_BACKGROUND_COLOR));  controller.refresh();  boardMoveListSash.layout(true,true);  boardMoveListSash.redraw();  engineAnalysisWidget.updateFromPrefs();}  }
class C{  public Object execute(ExecutionEvent event) throws ExecutionException {  Shell parent=UIHelper.getShellProvider().getShell();  ShowDeclarationsPopupDialog popup=new ShowDeclarationsPopupDialog(parent);  popup.open();  return null;}  }
class C{  public ViPRCoreClient withProxyToken(String token){  setProxyToken(token);  return this;}  }
class C{  public int refresh(){  if (m_lookup == null)   return -1;  if (!isReadWrite()) {    m_lookup.removeAllElements();    return 0;  }  return m_lookup.refresh();}  }
class C{  public boolean isDuplicated(){  if (isDefault()) {    return false;  }  List<String> list=new ArrayList<String>();  list.add(network_gateway);  list.add(network_netmask);  list.add(network_vip);  for (  String network_addr : network_addrs) {    list.add(network_addr);  }  Set<String> set=new HashSet<String>(list);  if (set.size() < list.size()) {    return true;  }  return false;}  }
class C{  public boolean addOperation(final IResource resource,final T operation){  Check.notNull(resource,"resource");  Check.notNull(operation,"operation");  final T oldOperation=operationMap.get(resource);  if (oldOperation != null && oldOperation.equals(operation)) {    return false;  }  operationMap.put(resource,operation);  addToParent(resource);  return true;}  }
class C{  public static Transformer createTransformer(){  try {    return getTransformerFactory().newTransformer();  } catch (  TransformerConfigurationException e) {    throw new XmlException(e);  }}  }
class C{  public Builder withIndex(long index){  request.index=Assert.argNot(index,index < 0,"index must be positive");  return this;}  }
class C{  private void connectParkAndRide(int centerVertex,Coordinate coord,EdgeStore.Edge edge){  Split split=Split.findOnEdge(coord.y,coord.x,edge);  int targetVertex=splitEdge(split);  EdgeStore.Edge created=edgeStore.addStreetPair(centerVertex,targetVertex,1,-1);  created.allowAllModes();  created.setFlag(EdgeStore.EdgeFlag.LINK);  created.advance();  created.allowAllModes();  created.setFlag(EdgeStore.EdgeFlag.LINK);}  }
class C{  private void processPutStatic(Instruction s){  Operand value=PutStatic.getValue(s);  if (value.isConstant()) {    findOrCreateVertex((ConstantOperand)value);  }}  }
class C{  public void configurePowerPerdition(int powerLoss,int powerLossRegularity){  if (powerLoss == 0 || powerLossRegularity == 0) {    perdition=new PerditionCalculator(0);    return;  }  perdition=new PerditionCalculator((float)powerLoss / (float)powerLossRegularity);}  }
class C{  private boolean isGreenTimeLeft(double currentTime,Id<SignalGroup> groupId,int maxGreenTime){  if (!this.greenGroupId2OnsetMap.containsKey(groupId)) {    return false;  }  int greenTime=(int)(currentTime - this.greenGroupId2OnsetMap.get(groupId));  return greenTime < maxGreenTime;}  }
class C{  public Set<HttpMethod> allowedRequestMethods(){  ensureEnabled();  return allowedRequestMethods;}  }
class C{  public void addRemove(Edge removalEdge){  removes.add(removalEdge);}  }
class C{  public void testBug11798() throws Exception {  try {    this.pstmt=this.conn.prepareStatement("SELECT ?");    this.pstmt.setObject(1,Boolean.TRUE,Types.BOOLEAN);    this.pstmt.setObject(1,new BigDecimal("1"),Types.BOOLEAN);    this.pstmt.setObject(1,"true",Types.BOOLEAN);  }  finally {    if (this.pstmt != null) {      this.pstmt.close();      this.pstmt=null;    }  }}  }
class C{  public String columnName(){  return columnName;}  }
class C{  private StringMap populateDbMetrics(final VNXeNasServer nasServer,VNXeApiClient client){  StringMap dbMetrics=new StringMap();  long totalProvCap=0L;  long totalFsCount=0L;  int nfsSharesCount=0;  int cifsSharesCount=0;  List<VNXeFileSystem> fileSystemList=client.getFileSystemsForNasServer(nasServer.getId());  if (fileSystemList != null && !fileSystemList.isEmpty()) {    for (    VNXeFileSystem fs : fileSystemList) {      totalProvCap=totalProvCap + fs.getSizeTotal();      totalFsCount++;      List<VNXeNfsShare> nfsShares=client.getNfsSharesForFileSystem(fs.getId());      if (nfsShares != null && !nfsShares.isEmpty()) {        nfsSharesCount=nfsSharesCount + nfsShares.size();      }      List<VNXeCifsShare> cifsShares=client.getCifsSharesForFileSystem(fs.getId());      if (cifsShares != null && !cifsShares.isEmpty()) {        cifsSharesCount=cifsSharesCount + cifsShares.size();      }      List<VNXeFileSystemSnap> snapshotsList=client.getFileSystemSnaps(fs.getId());      if (snapshotsList != null && !snapshotsList.isEmpty()) {        for (        VNXeFileSystemSnap snap : snapshotsList) {          totalProvCap=totalProvCap + snap.getSize();          totalFsCount++;          List<VNXeNfsShare> snapNfsShares=client.getNfsSharesForSnap(snap.getId());          if (snapNfsShares != null && !snapNfsShares.isEmpty()) {            nfsSharesCount=nfsSharesCount + snapNfsShares.size();          }          List<VNXeCifsShare> snapCifsShares=client.getCifsSharesForSnap(snap.getId());          if (snapCifsShares != null && !snapCifsShares.isEmpty()) {            cifsSharesCount=cifsSharesCount + snapCifsShares.size();          }        }      }    }  }  if (totalProvCap > 0) {    totalProvCap=(totalProvCap / KB_IN_BYTES);  }  _logger.info("Total fs Count {} for nas server : {}",String.valueOf(totalFsCount),nasServer.getName());  _logger.info("Total fs Capacity {} for nas server : {}",String.valueOf(totalProvCap),nasServer.getName());  StringMap maxDbMetrics=getMaxDbMetrics(client);  dbMetrics.putAll(maxDbMetrics);  dbMetrics.put(MetricsKeys.totalNfsExports.name(),String.valueOf(nfsSharesCount));  dbMetrics.put(MetricsKeys.totalCifsShares.name(),String.valueOf(cifsSharesCount));  dbMetrics.put(MetricsKeys.storageObjects.name(),String.valueOf(totalFsCount));  dbMetrics.put(MetricsKeys.usedStorageCapacity.name(),String.valueOf(totalProvCap));  Long maxExports=MetricsKeys.getLong(MetricsKeys.maxExports,dbMetrics);  Long maxStorObjs=MetricsKeys.getLong(MetricsKeys.maxStorageObjects,dbMetrics);  Long maxCapacity=MetricsKeys.getLong(MetricsKeys.maxStorageCapacity,dbMetrics);  Long totalExports=Long.valueOf(nfsSharesCount + cifsSharesCount);  String overLoaded=FALSE;  if (totalExports >= maxExports || totalProvCap >= maxCapacity || totalFsCount >= maxStorObjs) {    overLoaded=TRUE;  }  double percentageLoadExports=0.0;  if (totalExports > 0.0) {    percentageLoadExports=((double)(totalExports) / maxExports) * 100;  }  double percentageLoadStorObj=((double)(totalProvCap) / maxCapacity) * 100;  double percentageLoad=(percentageLoadExports + percentageLoadStorObj) / 2;  dbMetrics.put(MetricsKeys.percentLoad.name(),String.valueOf(percentageLoad));  dbMetrics.put(MetricsKeys.overLoaded.name(),overLoaded);  return dbMetrics;}  }
class C{  public Taxonomy subset(Collection<Integer> ids){  final Taxonomy subset=new Taxonomy();  subset.addPaths(this,ids);  return subset;}  }
class C{  void updateText(Element target){  if (target.text == null) {    target.text=new LinkedList<>();    target.text.add(new Segment(target.start.right + 1,target.start.right));  }  final Iterator<Segment> segIt=target.text.iterator();  final Segment first=segIt.next();  while (segIt.hasNext()) {    final Segment removal=segIt.next();    segIt.remove();    removeSegment(removal);  }  updateSegmentContent(first,target.getText());}  }
class C{  public void rank(String r){  optionalRank="rankdir = " + r + ";";}  }
class C{  public IdsQueryBuilder ids(String... ids){  return addIds(ids);}  }
class C{  private Connection createConnection() throws RemoteException {  Connection conn;  TCPTransport.tcpLog.log(Log.BRIEF,"create connection");  if (!usingMultiplexer) {    Socket sock=ep.newSocket();    conn=new TCPConnection(this,sock);    try {      DataOutputStream out=new DataOutputStream(conn.getOutputStream());      writeTransportHeader(out);      if (!conn.isReusable()) {        out.writeByte(TransportConstants.SingleOpProtocol);      } else {        out.writeByte(TransportConstants.StreamProtocol);        out.flush();        int originalSoTimeout=0;        try {          originalSoTimeout=sock.getSoTimeout();          sock.setSoTimeout(handshakeTimeout);        } catch (        Exception e) {        }        DataInputStream in=new DataInputStream(conn.getInputStream());        byte ack=in.readByte();        if (ack != TransportConstants.ProtocolAck) {          throw new ConnectIOException(ack == TransportConstants.ProtocolNack ? "JRMP StreamProtocol not supported by server" : "non-JRMP server at remote endpoint");        }        String suggestedHost=in.readUTF();        int suggestedPort=in.readInt();        if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {          TCPTransport.tcpLog.log(Log.VERBOSE,"server suggested " + suggestedHost + ":"+ suggestedPort);        }        TCPEndpoint.setLocalHost(suggestedHost);        TCPEndpoint localEp=TCPEndpoint.getLocalEndpoint(0,null,null);        out.writeUTF(localEp.getHost());        out.writeInt(localEp.getPort());        if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {          TCPTransport.tcpLog.log(Log.VERBOSE,"using " + localEp.getHost() + ":"+ localEp.getPort());        }        try {          sock.setSoTimeout((originalSoTimeout != 0 ? originalSoTimeout : responseTimeout));        } catch (        Exception e) {        }        out.flush();      }    } catch (    IOException e) {      if (e instanceof RemoteException)       throw (RemoteException)e; else       throw new ConnectIOException("error during JRMP connection establishment",e);    }  } else {    try {      conn=multiplexer.openConnection();    } catch (    IOException e) {synchronized (this) {        usingMultiplexer=false;        multiplexer=null;      }      throw new ConnectIOException("error opening virtual connection " + "over multiplexed connection",e);    }  }  return conn;}  }
class C{  protected void addNewIcon(){  if (log.isDebugEnabled()) {    log.debug("addNewIcon Action: iconMap.size()= " + _iconMap.size());  }  String name=JOptionPane.showInputDialog(this,Bundle.getMessage("NoIconName"),null);  if (name == null || name.trim().length() == 0) {    return;  }  if (_iconMap.get(name) != null) {    JOptionPane.showMessageDialog(this,Bundle.getMessage("DuplicateIconName",name),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);    name=setIconName(name);    if (name == null || _iconMap.get(name) != null) {      return;    }  }  String fileName="resources/icons/misc/X-red.gif";  NamedIcon icon=new jmri.jmrit.catalog.NamedIcon(fileName,fileName);  putIcon(name,icon);}  }
class C{  public SubscriptionStateException(String message){  super(message);}  }
class C{  public VNXeCommandResult deleteSnap(String snapId) throws VNXeException {  _url=URL_INSTANCE + snapId;  setQueryParameters(null);  deleteRequest(null);  VNXeCommandResult result=new VNXeCommandResult();  result.setSuccess(true);  return result;}  }
class C{  public ProviderException(String s){  super(s);}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  private File makeFile(){  return storagePath == null ? new File(contextTempDir,swapFileName) : new File(storagePath,swapFileName);}  }
class C{  @Override public boolean blockInteract(GlowPlayer player,GlowBlock block,BlockFace face,Vector clickedLoc){  if (block.getType() == Material.IRON_DOOR_BLOCK) {    return false;  }  GlowBlockState state=block.getState();  MaterialData data=state.getData();  if (data instanceof Door) {    Door door=(Door)data;    if (door.isTopHalf()) {      door=null;      block=block.getWorld().getBlockAt(block.getX(),block.getY() - 1,block.getZ());      state=block.getState();      data=state.getData();      if (data instanceof Door) {        door=(Door)data;      }    }    if (door != null) {      door.setOpen(!door.isOpen());    }    state.update(true);  }  return true;}  }
class C{  public static Signature generateRandomSignature(){  final byte[] bytes=Utils.generateRandomBytes(64);  return new Signature(bytes);}  }
class C{  public static double cauchy(){  return Math.tan(Math.PI * (uniform() - 0.5));}  }
class C{  protected SpatialSparseVertex(Point point){  this.point=point;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.518 -0500",hash_original_method="6C3F9593FC3095346100149D0CBBAD3F",hash_generated_method="74BFDE300F5DD4E078EA04A4A8181904") public void sendMessage(int what,int arg1){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  sendMessage(msg);}  }
class C{  public static boolean uploadFile(File file,String uploadurl){  HttpURLConnection conn=null;  DataOutputStream dos=null;  String lineEnd="\r\n";  String twoHyphens="--";  String boundary="*****";  int bytesRead, bytesAvailable, bufferSize;  byte[] buffer;  int maxBufferSize=64 * 1024;  boolean isSuccess=true;  try {    FileInputStream fileInputStream=null;    try {      fileInputStream=new FileInputStream(file);    } catch (    FileNotFoundException e) {      e.printStackTrace();      Log.e(LogUtil.TAG,"file not found");    }    URL url=new URL(uploadurl);    conn=(HttpURLConnection)url.openConnection();    conn.setDoInput(true);    conn.setDoOutput(true);    conn.setUseCaches(false);    conn.setConnectTimeout(60000);    conn.setReadTimeout(60000);    conn.setRequestMethod("POST");    conn.setRequestProperty("Connection","Keep-Alive");    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);    dos=new DataOutputStream(conn.getOutputStream());    dos.writeBytes(twoHyphens + boundary + lineEnd);    dos.writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\"" + file.getName() + "\""+ lineEnd);    dos.writeBytes(lineEnd);    bytesAvailable=fileInputStream.available();    bufferSize=Math.min(bytesAvailable,maxBufferSize);    buffer=new byte[bufferSize];    bytesRead=fileInputStream.read(buffer,0,bufferSize);    while (bytesRead > 0) {      dos.write(buffer,0,bufferSize);      bytesAvailable=fileInputStream.available();      bufferSize=Math.min(bytesAvailable,maxBufferSize);      bytesRead=fileInputStream.read(buffer,0,bufferSize);    }    dos.writeBytes(lineEnd);    dos.writeBytes(twoHyphens + boundary + twoHyphens+ lineEnd);    fileInputStream.close();    dos.flush();    dos.close();  } catch (  Exception e) {    Log.e("FNF","UploadService Runnable:Client Request error",e);    isSuccess=false;  }  try {    if (conn.getResponseCode() != 200) {      isSuccess=false;    }  } catch (  IOException e) {    Log.e("FNF","Connection error",e);    isSuccess=false;  }  return isSuccess;}  }
class C{  protected static void fatal(String msg,Throwable t){  System.out.println(msg);  if (t != null)   t.printStackTrace();  fail();}  }
class C{  public void saveAll(){  for (  String key : items.keySet()) {    items.get(key).save();  }}  }
class C{  public static Reader createReader(File file,boolean async) throws IOException {  final InputStream is=createInputStream(file,async);  return new InputStreamReader(is);}  }
class C{  public static Snackbar make(Activity activity,View view,int resourceId,int duration){  return make(activity,view,activity.getResources().getString(resourceId),duration);}  }
class C{  public Optional<Path> outputFilePath(){  return maybePath(outputFilePathArg);}  }
class C{  public static byte[] serializeInt(int val){  byte[] buffer=new byte[Type.INTEGER.getByteSize()];  buffer[0]=(byte)((val >> 24) & 0xFF);  buffer[1]=(byte)((val >> 16) & 0xFF);  buffer[2]=(byte)((val >> 8) & 0xFF);  buffer[3]=(byte)(val & 0xFF);  return buffer;}  }
class C{  public T caseVarDefinition(VarDefinition object){  return null;}  }
class C{  private static String replace_non_letters_non_numbers_with_whitespace(String a_string){  return regex.sub(" ",a_string);}  }
class C{  private void disableUnsupportedButtons(){  if (mPlayer == null) {    return;  }  try {    if (mPauseButton != null) {      if (!mPlayer.canPause()) {        mPauseButton.setEnabled(false);      } else {        mPauseButton.setEnabled(true);      }    }    if (mRewButton != null) {      if (!mPlayer.canSeekBackward()) {        mRewButton.setEnabled(false);      } else {        mRewButton.setEnabled(true);      }    }    if (mFfwdButton != null) {      if (!mPlayer.canSeekForward()) {        mFfwdButton.setEnabled(false);      } else {        mFfwdButton.setEnabled(true);      }    }  } catch (  IncompatibleClassChangeError ex) {  }}  }
class C{  public static Observable<Integer> intermittentBursts(){  return Observable.create(null).subscribeOn(Schedulers.newThread());}  }
class C{  private void markSubroutineWalkDFS(final BitSet sub,int index,final BitSet anyvisited){  while (true) {    AbstractInsnNode node=instructions.get(index);    if (sub.get(index)) {      return;    }    sub.set(index);    if (anyvisited.get(index)) {      dualCitizens.set(index);      if (LOGGING) {        log("Instruction #" + index + " is dual citizen.");      }    }    anyvisited.set(index);    if (node.getType() == AbstractInsnNode.JUMP_INSN && node.getOpcode() != JSR) {      JumpInsnNode jnode=(JumpInsnNode)node;      int destidx=instructions.indexOf(jnode.label);      markSubroutineWalkDFS(sub,destidx,anyvisited);    }    if (node.getType() == AbstractInsnNode.TABLESWITCH_INSN) {      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;      int destidx=instructions.indexOf(tsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=tsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }    if (node.getType() == AbstractInsnNode.LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;      int destidx=instructions.indexOf(lsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=lsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }switch (instructions.get(index).getOpcode()) {case GOTO:case RET:case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:      return;  }  index++;  if (index >= instructions.size()) {    return;  }}}  }
class C{  public static void main(String[] args) throws Exception {  AbstractMultiLabelClassifier.evaluation(new PLST(),args);}  }
class C{  private BarData generateData(int cnt){  ArrayList<BarEntry> entries=new ArrayList<BarEntry>();  for (int i=0; i < 12; i++) {    entries.add(new BarEntry((int)(Math.random() * 70) + 30,i));  }  BarDataSet d=new BarDataSet(entries,"New DataSet " + cnt);  d.setBarSpacePercent(20f);  d.setColors(ColorTemplate.VORDIPLOM_COLORS);  d.setBarShadowColor(Color.rgb(203,203,203));  ArrayList<BarDataSet> sets=new ArrayList<BarDataSet>();  sets.add(d);  BarData cd=new BarData(getMonths(),sets);  return cd;}  }
class C{  public XmlDocument(String namespace,String namespacePrefix,String schemaLocation,String rootNodeName){  set(namespace,namespacePrefix,schemaLocation,rootNodeName);  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder;  try {    builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new SaaSSystemException(e);  }  xmldoc=builder.getDOMImplementation().createDocument(getNameSpace(),getRootNodeName(),null);  root=(Element)xmldoc.getFirstChild();  root.setPrefix(getPrefix());  root.setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");  root.setAttribute("xsi:schemaLocation",getSchemaLocation());}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public void testAttachFragmentUi_doesNotShowSpinnerDuringSyncWhenLocationsPresent(){  mFakeSyncManager.setSyncing(true);  mController.init();  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mController.attachFragmentUi(mMockFragmentUi);  verify(mMockFragmentUi).setBusyLoading(false);}  }
class C{  private SignatureLibraryRelease loadCoilsRelease(){  final SignatureLibraryRelease release;  final Query releaseQuery=entityManager.createQuery("select r from SignatureLibraryRelease r where r.version = :coilsVersion and r.library = :coilsSignatureLibrary");  releaseQuery.setParameter("coilsVersion",coilsReleaseVersion);  releaseQuery.setParameter("coilsSignatureLibrary",SignatureLibrary.COILS);  @SuppressWarnings("unchecked") List<SignatureLibraryRelease> releaseList=releaseQuery.getResultList();  if (releaseList.size() == 1 && releaseList.get(0) != null) {    release=releaseList.get(0);  } else   if (releaseList.size() > 1) {    throw new IllegalStateException("There is more than one SignatureLibraryRelease record for version " + coilsReleaseVersion + " of Coils in the databases.");  } else {    release=new SignatureLibraryRelease(SignatureLibrary.COILS,coilsReleaseVersion);    entityManager.persist(release);  }  return release;}  }
class C{  public void goBackExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  Boolean showInformeBusqueda=(Boolean)getFromTemporalSession(request,Constants.SHOW_INFORME_BUSQUEDA_BUTTON);  InvocationStack invocationStack=getInvocationStack(request);  ClientInvocation lastClientReturnPoint=invocationStack.goBackClientInvocation(request);  if (Boolean.TRUE.equals(showInformeBusqueda)) {    setInTemporalSession(request,Constants.SHOW_INFORME_BUSQUEDA_BUTTON,Boolean.TRUE);  }  if ((lastClientReturnPoint != null) && (lastClientReturnPoint == invocationStack.getHome())) {    String uri="/action/homepage?method=loadBandeja";    setReturnActionFordward(request,new ActionForward(uri,true));  } else {    ActionRedirect redirect=new ActionRedirect(new ActionForward(lastClientReturnPoint.getInvocationURI(),true),true);    if (lastClientReturnPoint.getTreeView() != null) {      redirect.addParameter(Constants.TREE_VIEW_RELOAD,Boolean.TRUE);    }    setReturnActionFordward(request,redirect);  }}  }
class C{  public boolean isMirrored(){  return this.isMirrored;}  }
class C{  private void addNode(BasicBlock b){  DominatorTreeNode node=new DominatorTreeNode(b);  dominatorInfoMap[b.getNumber()]=node;}  }
class C{  public void passthroughAll() throws Exception {  packetValues.addAll(readableObjects);  readableObjects.clear();  if (inputBuffer.readableBytes() > 0) {    passthrough(Type.REMAINING_BYTES);  }}  }
class C{  protected void populatePointsAndSegments(Route bestRoute,List newPoints,List segments){  Projection proj=getProjection();  Intersection origin=bestRoute.getOriginIntersection();  if (logger.isLoggable(Level.INFO))   logger.info("adding " + bestRoute.roads.length + " new roads.");  Road road=null;  Intersection from=origin, to=null;  Set loopSet=new HashSet();  if (doLoopCheck)   loopSet.add(origin);  Set ptSet=new HashSet();  for (int i=0; i < bestRoute.roads.length; i++) {    road=bestRoute.roads[i];    if (!from.equals(road.getFirstIntersection()) && !from.equals(road.getSecondIntersection())) {      logger.severe("huh? " + from + " is not an intersection on road "+ road);    }    Point pt=createPoint((Point)proj.forward(from.getLocation(),new Point()));    if (doLoopCheck) {      if (ptSet.contains(pt)) {        logger.warning("pt set has duplicate at " + pt);      }      ptSet.add(pt);    }    newPoints.add(pt);    to=road.getOtherIntersection(from);    if (doLoopCheck) {      if (loopSet.contains(to)) {        logger.warning("road has a cycle at " + to);      }      loopSet.add(to);    }    boolean reverse=from.equals(road.getSecondIntersection());    Segment path=getPathSegment(proj,road,reverse);    if (logger.isLoggable(Level.INFO))     logger.info("created path " + path);    segments.add(path);    from=to;  }  if (to != null) {    Point pt=createPoint((Point)proj.forward(to.getLocation(),new Point()));    if (ptSet.contains(pt)) {      logger.warning("pt set has duplicate at " + pt);    }    newPoints.add(pt);    if (logger.isLoggable(Level.INFO))     logger.info(" now " + newPoints.size() + " points and "+ segments.size()+ " segments.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.473 -0500",hash_original_method="5F8F6FBE2B483385DE74A4590AA58F82",hash_generated_method="07562B0E23EB401F9C7EE26FB1759915") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int help() throws IOException {  return sendCommand(SMTPCommand.HELP);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void add(Object o1,Object o2){  table.put(o1,o2,value);}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  super.loadByteArray(buffer);}  }
class C{  public RoutedRequest(final RequestWrapper req,final HttpRoute route){  super();  this.request=req;  this.route=route;}  }
class C{  static int mysqlToJavaType(int mysqlType){  int jdbcType;switch (mysqlType) {case MysqlDefs.FIELD_TYPE_NEW_DECIMAL:case MysqlDefs.FIELD_TYPE_DECIMAL:    jdbcType=Types.DECIMAL;  break;case MysqlDefs.FIELD_TYPE_TINY:jdbcType=Types.TINYINT;break;case MysqlDefs.FIELD_TYPE_SHORT:jdbcType=Types.SMALLINT;break;case MysqlDefs.FIELD_TYPE_LONG:jdbcType=Types.INTEGER;break;case MysqlDefs.FIELD_TYPE_FLOAT:jdbcType=Types.REAL;break;case MysqlDefs.FIELD_TYPE_DOUBLE:jdbcType=Types.DOUBLE;break;case MysqlDefs.FIELD_TYPE_NULL:jdbcType=Types.NULL;break;case MysqlDefs.FIELD_TYPE_TIMESTAMP:jdbcType=Types.TIMESTAMP;break;case MysqlDefs.FIELD_TYPE_LONGLONG:jdbcType=Types.BIGINT;break;case MysqlDefs.FIELD_TYPE_INT24:jdbcType=Types.INTEGER;break;case MysqlDefs.FIELD_TYPE_DATE:jdbcType=Types.DATE;break;case MysqlDefs.FIELD_TYPE_TIME:jdbcType=Types.TIME;break;case MysqlDefs.FIELD_TYPE_DATETIME:jdbcType=Types.TIMESTAMP;break;case MysqlDefs.FIELD_TYPE_YEAR:jdbcType=Types.DATE;break;case MysqlDefs.FIELD_TYPE_NEWDATE:jdbcType=Types.DATE;break;case MysqlDefs.FIELD_TYPE_ENUM:jdbcType=Types.CHAR;break;case MysqlDefs.FIELD_TYPE_SET:jdbcType=Types.CHAR;break;case MysqlDefs.FIELD_TYPE_TINY_BLOB:jdbcType=Types.VARBINARY;break;case MysqlDefs.FIELD_TYPE_MEDIUM_BLOB:jdbcType=Types.LONGVARBINARY;break;case MysqlDefs.FIELD_TYPE_LONG_BLOB:jdbcType=Types.LONGVARBINARY;break;case MysqlDefs.FIELD_TYPE_BLOB:jdbcType=Types.LONGVARBINARY;break;case MysqlDefs.FIELD_TYPE_VAR_STRING:case MysqlDefs.FIELD_TYPE_VARCHAR:jdbcType=Types.VARCHAR;break;case MysqlDefs.FIELD_TYPE_JSON:case MysqlDefs.FIELD_TYPE_STRING:jdbcType=Types.CHAR;break;case MysqlDefs.FIELD_TYPE_GEOMETRY:jdbcType=Types.BINARY;break;case MysqlDefs.FIELD_TYPE_BIT:jdbcType=Types.BIT;break;default :jdbcType=Types.VARCHAR;}return jdbcType;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static Geometry combine(Geometry g0,Geometry g1,Geometry g2){  GeometryCombiner combiner=new GeometryCombiner(createList(g0,g1,g2));  return combiner.combine();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void applyLocale(ConfigurationItem item){  String tooltip=controllerAccess.getMessage(locale,MSG_TOOLTIP_PREFIX + item.getKey(),new Object[0]);  if (tooltip != null && !tooltip.startsWith("!")) {    item.setTooltip(tooltip);  } else {    item.setTooltip(null);  }  String displayName=controllerAccess.getMessage(locale,MSG_DISPLAYNAME_PREFIX + item.getKey(),new Object[0]);  if (displayName != null && !displayName.startsWith("!")) {    item.setDisplayName(displayName);  } else {    item.setDisplayName(null);  }}  }
class C{  public void addRecord(Object[] values) throws DBFException {  if (this.fieldArray == null) {    throw new DBFException("Fields should be set before adding records");  }  if (values == null) {    throw new DBFException("Null cannot be added as row");  }  if (values.length != this.fieldArray.length) {    throw new DBFException("Invalid record. Invalid number of fields in row");  }  for (int i=0; i < this.fieldArray.length; i++) {    if (values[i] == null) {      continue;    }    Class equivalentClass=this.fieldArray[i].getDataType().getEquivalentClass();    if (!(equivalentClass.isAssignableFrom(values[i].getClass()))) {      throw new DBFException("Invalid value for field " + i);    }  }  recordData.add(values);  isDirty=true;}  }
class C{  @SuppressLint("Wakelock") public static WakeLock acquireWakeLock(Context context,WakeLock wakeLock){  Log.i(TAG,"Acquiring wake lock.");  try {    PowerManager powerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);    if (powerManager == null) {      Log.e(TAG,"Power manager null.");      return wakeLock;    }    if (wakeLock == null) {      wakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);      if (wakeLock == null) {        Log.e(TAG,"Cannot create a new wake lock.");        return null;      }    }    if (!wakeLock.isHeld()) {      wakeLock.acquire();      if (!wakeLock.isHeld()) {        Log.e(TAG,"Cannot acquire wake lock.");      }    }  } catch (  RuntimeException e) {    Log.e(TAG,e.getMessage(),e);  }  return wakeLock;}  }
class C{  public void updateFrom(GitVcsSettings settings){switch (settings.getUpdateType()) {case REBASE:    myForceRebaseRadioButton.setSelected(true);  break;case MERGE:myForceMergeRadioButton.setSelected(true);break;case BRANCH_DEFAULT:myBranchDefaultRadioButton.setSelected(true);break;default :assert false : "Unknown value of update type: " + settings.getUpdateType();}UpdatePolicyUtils.updatePolicyItem(settings.updateChangesPolicy(),myStashRadioButton,myShelveRadioButton);}  }
class C{  private void manageInsertRequest(Mail mail) throws MessagingException {  MailAddress senderMailAddress=mail.getSender();  String senderUser=senderMailAddress.getLocalPart().toLowerCase(Locale.US);  String senderHost=senderMailAddress.getDomain().toLowerCase(Locale.US);  senderUser=getPrimaryName(senderUser);  Connection conn=null;  PreparedStatement selectStmt=null;  PreparedStatement insertStmt=null;  boolean dbUpdated=false;  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  try {    out.println("Answering on behalf of: " + whitelistManagerAddress);    out.println("Inserting in the white list of " + (new MailAddress(senderUser,senderHost)) + " ...");    out.println();    MimeMessage message=mail.getMessage();    Object content=message.getContent();    if (message.getContentType().startsWith("text/plain") && content instanceof String) {      StringTokenizer st=new StringTokenizer((String)content," \t\n\r\f,;:<>");      while (st.hasMoreTokens()) {        ResultSet selectRS=null;        try {          MailAddress recipientMailAddress;          try {            recipientMailAddress=new MailAddress(st.nextToken());          } catch (          javax.mail.internet.ParseException pe) {            continue;          }          String recipientUser=recipientMailAddress.getLocalPart().toLowerCase(Locale.US);          String recipientHost=recipientMailAddress.getDomain().toLowerCase(Locale.US);          if (getMailetContext().isLocalServer(recipientHost)) {            continue;          }          if (conn == null) {            conn=datasource.getConnection();          }          if (selectStmt == null) {            selectStmt=conn.prepareStatement(selectByPK);          }          selectStmt.setString(1,senderUser);          selectStmt.setString(2,senderHost);          selectStmt.setString(3,recipientUser);          selectStmt.setString(4,recipientHost);          selectRS=selectStmt.executeQuery();          if (selectRS.next()) {            out.println("Skipped:  " + recipientMailAddress);            continue;          }          if (insertStmt == null) {            insertStmt=conn.prepareStatement(insert);          }          insertStmt.setString(1,senderUser);          insertStmt.setString(2,senderHost);          insertStmt.setString(3,recipientUser);          insertStmt.setString(4,recipientHost);          insertStmt.executeUpdate();          dbUpdated=true;          out.println("Inserted: " + recipientMailAddress);        }  finally {          theJDBCUtil.closeJDBCResultSet(selectRS);        }      }      if (dbUpdated) {        log("Insertion request issued by " + senderMailAddress);      }      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.commit();        dbUpdated=false;      }    } else {      out.println("The message must be plain - no action");    }    out.println();    out.println("Finished");    sendReplyFromPostmaster(mail,sout.toString());  } catch (  SQLException sqle) {    out.println("Error accessing the database");    sendReplyFromPostmaster(mail,sout.toString());    throw new MessagingException("Error accessing the database",sqle);  }catch (  IOException ioe) {    out.println("Error getting message content");    sendReplyFromPostmaster(mail,sout.toString());    throw new MessagingException("Error getting message content",ioe);  } finally {    theJDBCUtil.closeJDBCStatement(selectStmt);    theJDBCUtil.closeJDBCStatement(insertStmt);    try {      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.rollback();        dbUpdated=false;      }    } catch (    Exception e) {    }    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  private void computeImpliedCovar(){  TetradMatrix implCovarC=MatrixUtils.impliedCovar(edgeCoef().transpose(),errCovar());  int size=getMeasuredNodes().size();  this.implCovarMeasC=new TetradMatrix(size,size);  for (int i=0; i < size; i++) {    for (int j=0; j < size; j++) {      this.implCovarMeasC.set(i,j,implCovarC.get(i,j));    }  }}  }
class C{  private void checkpointVar(double newDist){  checkpointedDistance=newDist;  checkpointedConcreteValue=intVar.getConcreteValue();}  }
class C{  public static void testConnection(final Window parent,final CDatabaseConfiguration configuration){  try {    connect(configuration).closeConnection();    CMessageBox.showInformation(parent,"Successfully connected to the database.");  } catch (  final CouldntLoadDriverException exception) {    final String message="E00021: " + "Database driver could not be loaded";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not create a database connection because the database " + "driver '%s' could not be loaded",configuration.getDriver()),new String[]{"The database driver string is wrong.","The database driver file could not be found."},new String[]{"BinNavi can not load data from the given database until the " + "problem is resolved."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final CouldntConnectException exception) {    if (exception.getSqlState().equalsIgnoreCase(PostgreSQLErrorCodes.INVALID_PASSWORD)) {      CMessageBox.showInformation(parent,String.format("The password for user '%s' on database '%s' is invalid",configuration.getUser(),configuration.getUrl()));      return;    } else     if (exception.getSqlState().equalsIgnoreCase(PostgreSQLErrorCodes.POSTGRES_INVALID_CATALOG_NAME)) {      if (JOptionPane.YES_OPTION == CMessageBox.showYesNoCancelQuestion(parent,String.format("The database '%s' does not exist. Do you want to create it now?",configuration.getUrl()))) {        CDatabaseCreator.createDatabase(parent,configuration);      }    } else {      final String message="E00022: " + "Database connection could not be established";      final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not connect to the database '%s'",configuration.getUrl()),new String[]{exception.getMessage()},new String[]{"BinNavi can not load data from the given database until the " + "problem is resolved."});      NaviErrorDialog.show(parent,message,description,exception);    }  }}  }
class C{  @Override public int calculateHash(RowCursor cursor){  return table().getPodHash(cursor);}  }
class C{  public PathImpl fsWalk(String userPath,Map<String,Object> attributes,String path){  ArrayList<PathImpl> pathList=getMergePaths();  if (!userPath.startsWith("/") || pathList.size() == 0)   return new MergePath((MergePath)_root,userPath,attributes,path);  String bestPrefix=null;  for (int i=0; i < pathList.size(); i++) {    PathImpl subPath=pathList.get(i);    String prefix=subPath.getPath();    if (path.startsWith(prefix) && (bestPrefix == null || bestPrefix.length() < prefix.length())) {      bestPrefix=prefix;    }  }  if (bestPrefix != null) {    path=path.substring(bestPrefix.length());    if (!path.startsWith("/"))     path="/" + path;    return new MergePath((MergePath)_root,userPath,attributes,path);  }  return pathList.get(0).lookup(userPath,attributes);}  }
class C{  @Override public boolean equals(Object otherRules){  if (this == otherRules) {    return true;  }  if (otherRules instanceof ZoneRules) {    ZoneRules other=(ZoneRules)otherRules;    return Arrays.equals(standardTransitions,other.standardTransitions) && Arrays.equals(standardOffsets,other.standardOffsets) && Arrays.equals(savingsInstantTransitions,other.savingsInstantTransitions)&& Arrays.equals(wallOffsets,other.wallOffsets)&& Arrays.equals(lastRules,other.lastRules);  }  return false;}  }
class C{  public void endAnimation(){  if (mAnimation != null) {    mAnimation.end();    mAnimation=null;  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  private String wrapFormattedStringToWidth(String string,int maxWidth){  int j=this.sizeStringToWidth(string,maxWidth);  if (string.length() <= j) {    return string;  } else {    String s1=string.substring(0,j);    char c0=string.charAt(j);    boolean flag=c0 == 32 || c0 == 10;    String s2=string.substring(j + (flag ? 1 : 0));    return s1 + "\n" + this.wrapFormattedStringToWidth(s2,maxWidth);  }}  }
class C{  private static long speed(long bytes,long time){  if (time > 0) {    double bytesScaled=bytes * 100000d;    double timeScaled=time / 10000d;    return (long)(bytesScaled / timeScaled);  } else   return -1L;}  }
class C{  public void elementChanged(CnATreeElement element){  try {    element=replaceEntityInCache(element);    updateParentInCache(element);  } catch (  RuntimeException re) {    LOG.error("RuntimeException in elementChanged",re);    throw re;  }catch (  Exception e) {    LOG.error("Exception in elementChanged",e);    throw new RuntimeException(e);  }}  }
class C{  public void testAddEjbReferenceDescription() throws Exception {  String xml="<weblogic-web-app>" + "  <reference-descriptor>" + "  </reference-descriptor>"+ "</weblogic-web-app>";  WeblogicXml descr=WeblogicXmlIo.parseWeblogicXml(new ByteArrayInputStream(xml.getBytes("UTF-8")));  EjbRef ref=new EjbRef();  ref.setName("foo");  ref.setJndiName("fee");  descr.addEjbReference(ref);  List<Element> nl=descr.getDocument().getRootElement().getChildren(WeblogicXmlTag.REFERENCE_DESCRIPTOR);  Element n=nl.get(0);  assertEquals("reference-descriptor",n.getName());  n=(Element)n.getChildren(WeblogicXmlTag.EJB_REFERENCE_DESCRIPTION).get(0);  assertEquals("ejb-reference-description",n.getName());  Element m=(Element)n.getChildren(WeblogicXmlTag.EJB_REF_NAME).get(0);  assertEquals("ejb-ref-name",m.getName());  assertEquals("foo",m.getText());  m=(Element)n.getChildren(WeblogicXmlTag.JNDI_NAME).get(0);  assertEquals("jndi-name",m.getName());  assertEquals("fee",m.getText());}  }
class C{  public static WebElement findElementVisibleAfter(SearchContext parent,By by,int timeoutInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  try {    WebElementWait wait=new WebElementWait(parent,timeoutInSeconds);    return wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s is not visible after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementById01.class,args);}  }
class C{  public void deleteDashboard(BigInteger dashboardId) throws IOException {  String requestUrl=RESOURCE + "/" + dashboardId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  protected static Agent createAgent(int rtpPort) throws Throwable {  return createAgent(rtpPort,false);}  }
class C{  public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){  byte[] combined=new byte[iv.length + cipherText.length];  System.arraycopy(iv,0,combined,0,iv.length);  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);  return combined;}  }
class C{  private void verifyNfsACLsAddList(List<NfsACE> addList,Set<String> userSet){  validateNfsAceSyntax(addList);  for (  NfsACE ace : addList) {    if (userSet.contains(ace.getUser())) {      throw APIException.badRequests.nfsACLAlreadyExists("add",ace.getUser());    }  }}  }
class C{  private static By byFromLocator(String locator){  if (locator.startsWith("//")) {    return By.xpath(locator);  }  if (locator.startsWith("id=")) {    return By.id(locator.replaceFirst("id=",""));  }  if (locator.startsWith("css=")) {    return By.cssSelector(locator.replaceFirst("css=",""));  }  if (locator.startsWith("xpath=")) {    return By.xpath(locator.replaceFirst("xpath=",""));  }  if (locator.startsWith("name=")) {    return By.name(locator.replaceFirst("name=",""));  }  if (locator.startsWith("link=")) {    return By.linkText(locator.replaceFirst("link=",""));  }  if (locator.startsWith("linkpartial=")) {    return By.partialLinkText(locator.replaceFirst("linkpartial=",""));  }  throw new IllegalArgumentException("Locator not supported: " + locator);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Map<String,String> parseHeaders(Map<Integer,String> headers,Object[] args){  Map<String,String> newHeaders=new HashMap<>();  for (  Map.Entry<Integer,String> header : headers.entrySet()) {    newHeaders.putIfAbsent((String)args[header.getKey()],header.getValue());    LOGGER.debug("Header key: " + header.getKey() + " value: "+ header.getValue());  }  return newHeaders;}  }
class C{  public Task<VcenterRestRep> create(VcenterCreateParam input,Boolean validateConnection,Boolean discoverVcenter){  UriBuilder uriBuilder=client.uriBuilder(baseUrl);  if (validateConnection) {    uriBuilder.queryParam(VALIDATE_CONNECTION_PARAM,Boolean.TRUE);  }  if (!discoverVcenter) {    uriBuilder.queryParam(DISCOVER_VCENTER,Boolean.FALSE);  }  return postTaskURI(input,uriBuilder.build());}  }
class C{  public boolean isDynamic(){  return getSource().isDynamic();}  }
class C{  public static void loadFontsFromJar(Object refObj,String[] fileNames){  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  Font[] fontsListing=ge.getAllFonts();  InputStream inStream;  Font checkFont;  try {    toNextFileName:     for (    String fileName : fileNames) {      checkFont=Font.createFont(Font.TRUETYPE_FONT,refObj.getClass().getResourceAsStream(fileName));      for (      Font fontInListing : fontsListing) {        if (fontInListing.getFontName().equals(checkFont.getFontName())) {          continue toNextFileName;        }      }      ge.registerFont(checkFont);    }  } catch (  FontFormatException|IOException e) {    e.printStackTrace();  }}  }
class C{  public void testConnection(BillingAdapter billingAdapter) throws BillingApplicationException {  newBillingPluginProxy(billingAdapter).testConnection();}  }
class C{  private void pruneNonMatchedStreams(){  boolean prune=false;  for (  IceMediaStream stream : getStreams()) {    for (    Component component : stream.getComponents()) {      if (component.getRemoteCandidateCount() > 0)       prune=true;      if (prune)       break;    }  }  if (prune) {    for (    IceMediaStream stream : getStreams()) {      for (      Component component : stream.getComponents()) {        if (component.getRemoteCandidateCount() == 0)         stream.removeComponent(component);      }      if (stream.getComponentCount() == 0)       removeStream(stream);    }  }}  }
class C{  protected void processReturnInsert(){  if (hasReturnInsert()) {    getLogger().logWarningMessage(MetadataLogger.IGNORE_RETURN_INSERT_ANNOTATION,getAnnotatedElement());  }}  }
class C{  @Override public void onStartElement(String namespace,String localName,String prefix,Attributes attributes,DeserializationContext context) throws SAXException {  if (value == null && constructorToUse == null) {    try {      value=javaType.newInstance();    } catch (    Exception e) {      throw new SAXException(Messages.getMessage("cantCreateBean00",javaType.getName(),e.toString()));    }  }  if (typeDesc == null)   return;  for (int i=0; i < attributes.getLength(); i++) {    QName attrQName=new QName(attributes.getURI(i),attributes.getLocalName(i));    String fieldName=typeDesc.getFieldNameForAttribute(attrQName);    if (fieldName == null)     continue;    FieldDesc fieldDesc=typeDesc.getFieldByName(fieldName);    BeanPropertyDescriptor bpd=(BeanPropertyDescriptor)propertyMap.get(fieldName);    if (bpd != null) {      if (constructorToUse == null) {        if (!bpd.isWriteable() || bpd.isIndexed())         continue;      }      Deserializer dSer=getDeserializer(fieldDesc.getXmlType(),bpd.getType(),null,context);      if (dSer == null) {        dSer=context.getDeserializerForClass(bpd.getType());        if (dSer instanceof ArrayDeserializer) {          SimpleListDeserializerFactory factory=new SimpleListDeserializerFactory(bpd.getType(),fieldDesc.getXmlType());          dSer=(Deserializer)factory.getDeserializerAs(dSer.getMechanismType());        }      }      if (dSer == null)       throw new SAXException(Messages.getMessage("unregistered00",bpd.getType().toString()));      if (!(dSer instanceof SimpleDeserializer))       throw new SAXException(Messages.getMessage("AttrNotSimpleType00",bpd.getName(),bpd.getType().toString()));      try {        dSer.onStartElement(namespace,localName,prefix,attributes,context);        Object val=((SimpleDeserializer)dSer).makeValue(attributes.getValue(i));        if (constructorToUse == null) {          bpd.set(value,val);        } else {          if (constructorTarget == null) {            constructorTarget=new ConstructorTarget(constructorToUse,this);          }          constructorTarget.set(val);        }      } catch (      Exception e) {        throw new SAXException(e);      }    }  }}  }
class C{  public ObjectIdentifier(int[] oid,String name,Object oidGroup){  this(oid);  if (oidGroup == null) {    throw new NullPointerException("oidGroup == null");  }  this.group=oidGroup;  this.name=name;  toOIDString();}  }
class C{  public static int[] distributeKeys(final int m,final int m2,final long nleaves,final long nentries){  if (m < Options.MIN_BRANCHING_FACTOR)   throw new IllegalArgumentException();  if (m > Options.MAX_INDEX_SEGMENT_BRANCHING_FACTOR)   throw new IllegalArgumentException();  if (m2 < (m + 1) / 2)   throw new IllegalArgumentException();  if (m2 > m)   throw new IllegalArgumentException();  if (nleaves <= 0)   throw new IllegalArgumentException();  if (nleaves > Integer.MAX_VALUE) {    throw new IllegalArgumentException();  }  if (nentries <= 0)   throw new IllegalArgumentException();  if (nleaves == 1) {    if (nentries > m)     throw new RuntimeException();    return new int[]{(int)nentries};  }  final int[] n=new int[(int)nleaves];  for (int i=0; i < nleaves; i++) {    n[i]=m;  }  final long remaining=nentries - ((nleaves - 1) * m);  int shortage=(int)(remaining < m2 ? m2 - remaining : 0);  if (remaining < m2) {    n[(int)(nleaves - 1)]=m2;  } else {    n[(int)(nleaves - 1)]=(int)remaining;  }  if (shortage > 0) {    while (shortage > 0) {      for (int i=(int)(nleaves - 2); i >= 0 && shortage > 0; i--) {        n[i]--;        shortage--;      }    }  }  return n;}  }
class C{  public static Builder builder(InstallRequest request){  return new Builder(request);}  }
class C{  YearMonthDay(YearMonthDay partial,Chronology chrono){  super(partial,chrono);}  }
class C{  public void createPictScenario10() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-20 10:00:00"));  String supplierAdminId="Pict10Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict10SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict10DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict10DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-06-30 00:00:00"),DateTimeHandling.calculateMillis("2013-08-30 00:00:00"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("10.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("30.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("50.00"),customer)));  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-22 10:00:00"));  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT10_FREE",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplierMarketplace);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-23 10:00:00"));  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT10_UNIT_MONTH_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT10_UNIT_MONTH,example2TechService,supplierMarketplace);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-24 10:00:00"));  VOServiceDetails unitServTemplate2=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT10_2_UNIT_MONTH_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT10_2_UNIT_MONTH,example2TechService,supplierMarketplace);  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,unitServTemplate2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-25 10:00:00"));  VOServiceDetails serviceFreeDetails=serviceSetup.activateMarketableService(freeTemplate);  VOServiceDetails serviceUnitDetails=serviceSetup.activateMarketableService(unitServTemplate);  VOServiceDetails serviceUnitDetails2=serviceSetup.activateMarketableService(unitServTemplate2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-30 10:00:00"));  VORoleDefinition role=VOServiceFactory.getRole(serviceFreeDetails,"ADMIN");  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_10",serviceFreeDetails,customerAdmin,role);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-05 12:00:00"));  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-10 12:00:00"));  role=VOServiceFactory.getRole(serviceFreeDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-14 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-07-14 10:00:00"),"BOOLEAN_PARAMETER","true");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceUnitDetails2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-20 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_10",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_10",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_10",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_10",customer);}  }
class C{  protected void initBPOrderDetails(int C_BPartner_ID,boolean forInvoice){  log.config("C_BPartner_ID=" + C_BPartner_ID);  KeyNamePair pp=new KeyNamePair(0,"");  orderField.removeActionListener(this);  orderField.removeAllItems();  orderField.addItem(pp);  ArrayList<KeyNamePair> list=loadOrderData(C_BPartner_ID,forInvoice,sameWarehouseCb.isSelected());  for (  KeyNamePair knp : list)   orderField.addItem(knp);  orderField.setSelectedIndex(0);  orderField.addActionListener(this);  dialog.pack();  initBPDetails(C_BPartner_ID);}  }
class C{  public static void addDependency(Dependency depend){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  addDependency(depend,loader);}  }
class C{  protected StringBuffer inlineValueSB(Environment env,Context ctx,StringBuffer buffer){  return right.inlineValueSB(env,ctx,buffer);}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));}  }
class C{  public String requestWikidata(String message,String botid,String server,String apikey,int limit,String hint,Network network) throws Exception {  try {    log("WIKIDATA",Level.INFO,message);    Vertex result=getBot().awareness().getSense(Wikidata.class).processSearch(message,-1,false,hint,network,new HashMap<String,Vertex>());    if (result != null) {      if (hint != null && !hint.isEmpty()) {        Vertex value=result.getRelationship(network.createPrimitive(hint));        if (value != null) {          Vertex word=value.getRelationship(Primitive.WORD);          return word.printString();        }      } else {        Vertex description=result.getRelationship(Primitive.SENTENCE);        if (description != null) {          return description.printString();        }      }    }  } catch (  Exception exception) {    log(exception);  }  return null;}  }
class C{  public Vector2 solve(Vector2 b){  double det=this.determinant();  if (Math.abs(det) > Epsilon.E) {    det=1.0 / det;  }  Vector2 r=new Vector2();  r.x=det * (this.m11 * b.x - this.m01 * b.y);  r.y=det * (this.m00 * b.y - this.m10 * b.x);  return r;}  }
class C{  public boolean hasWildcard(){  for (  Type type : list) {    if (type.isParameterized() && ((ParameterizedType)type).hasWildcard()) {      return true;    }  }  return false;}  }
class C{  public boolean validate(InputNode node) throws Exception {  InputNode from=node.getParent();  String name=node.getName();  while (node != null) {    if (!key.validate(node)) {      return false;    }    if (!value.validate(node)) {      return false;    }    node=from.getNext(name);  }  return true;}  }
class C{  protected void updateNotificationSummary(){  final StatusBarNotification[] activeNotifications=mNotificationManager.getActiveNotifications();  int numberOfNotifications=activeNotifications.length;  for (  StatusBarNotification notification : activeNotifications) {    if (notification.getId() == NOTIFICATION_GROUP_SUMMARY_ID) {      numberOfNotifications--;      break;    }  }  if (numberOfNotifications > 1) {    String notificationContent=getString(R.string.sample_notification_summary_content,"" + numberOfNotifications);    final NotificationCompat.Builder builder=new NotificationCompat.Builder(getActivity()).setSmallIcon(R.mipmap.ic_notification).setStyle(new NotificationCompat.BigTextStyle().setSummaryText(notificationContent)).setGroup(NOTIFICATION_GROUP).setGroupSummary(true);    final Notification notification=builder.build();    mNotificationManager.notify(NOTIFICATION_GROUP_SUMMARY_ID,notification);  } else {    mNotificationManager.cancel(NOTIFICATION_GROUP_SUMMARY_ID);  }}  }
class C{  public static String formatPath(List<ChildNumber> path){  return PATH_JOINER.join(Iterables.concat(Collections.singleton("M"),path));}  }
class C{  public void moveViewBox(double dx,double dy){  if (Math.abs(dx) > getWidth() || Math.abs(dy) > getHeight())   return;  MutableCoord origin=inverseTransform(new MutableCoord((double)0,(double)0));  MutableCoord moves=inverseTransform(new MutableCoord(dx,dy));  curX+=(moves.getX() - origin.getX());  curY+=(moves.getY() - origin.getY());}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  protected static String xsdQuote(final String value,final String type){  return quote(value,"\"","\"^^xsd:" + type);}  }
class C{  public ArrowTip(double angle,double outerRadius,double innerRadius){  this(angle,outerRadius,innerRadius,true,false,true);}  }
class C{  public MicroHessianInput(InputStream is){  init(is);}  }
class C{  public ExtentTest fatal(Throwable t){  log(Status.FATAL,t);  return this;}  }
class C{  String renameType(Type type){  if (type == null) {    return null;  }  if (type.getSort() == Type.OBJECT) {    String in=type.getInternalName();    return "L" + renameInternalType(in) + ";";  } else   if (type.getSort() == Type.ARRAY) {    StringBuilder sb=new StringBuilder();    for (int n=type.getDimensions(); n > 0; n--) {      sb.append('[');    }    sb.append(renameType(type.getElementType()));    return sb.toString();  }  return type.getDescriptor();}  }
class C{  public Result send(Message message,String to,int retries) throws IOException {  int attempt=0;  Result result;  int backoff=BACKOFF_INITIAL_DELAY;  boolean tryAgain;  do {    attempt++;    if (logger.isLoggable(Level.FINE)) {      logger.fine("Attempt #" + attempt + " to send message "+ message+ " to regIds "+ to);    }    result=sendNoRetry(message,to);    tryAgain=result == null && attempt <= retries;    if (tryAgain) {      int sleepTime=backoff / 2 + random.nextInt(backoff);      sleep(sleepTime);      if (2 * backoff < MAX_BACKOFF_DELAY) {        backoff*=2;      }    }  } while (tryAgain);  if (result == null) {    throw new IOException("Could not send message after " + attempt + " attempts");  }  return result;}  }
class C{  public OperandTree(final int operandId){  m_id=operandId;}  }
class C{  public static ByteBuffer convertToSigned16BitSamples(RealBuffer buffer){  return convertToSigned16BitSamples(buffer.getSamples());}  }
class C{  private void doPermissionWorkBeforeAndroidM(@NonNull Activity activity,@NonNull String[] permissions,@Nullable PermissionsResultAction action){  for (  String perm : permissions) {    if (action != null) {      if (!mPermissions.contains(perm)) {        action.onResult(perm,Permissions.NOT_FOUND);      } else       if (ActivityCompat.checkSelfPermission(activity,perm) != PackageManager.PERMISSION_GRANTED) {        action.onResult(perm,Permissions.DENIED);      } else {        action.onResult(perm,Permissions.GRANTED);      }    }  }}  }
class C{  public int size(){  return info[0] & 0xff;}  }
class C{  static public String removeAndHump(String data,String replaceThis){  String temp=null;  StringBuffer out=new StringBuffer();  temp=data;  StringTokenizer st=new StringTokenizer(temp,replaceThis);  while (st.hasMoreTokens()) {    String element=(String)st.nextElement();    out.append(capitalizeFirstLetter(element));  }  return out.toString();}  }
class C{  public Object remove(Object key){  processQueue();  return hash.remove(key);}  }
class C{  public boolean isCritical(){  return critical;}  }
class C{  protected void updateView(){}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  @Override public void SyncComplete(String result){  Log.i(t,"disk sync task complete");  TextView tv=(TextView)findViewById(R.id.status_text);  tv.setText(result);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public HttpException(int status_code){  this(status_code,null);}  }
class C{  private long computeInterfaceHash(){  long hash=0;  ByteArrayOutputStream sink=new ByteArrayOutputStream(512);  try {    MessageDigest md=MessageDigest.getInstance("SHA");    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));    out.writeInt(INTERFACE_HASH_STUB_VERSION);    for (    Method method : remoteMethods) {      MethodDoc methodDoc=method.methodDoc();      out.writeUTF(methodDoc.name());      out.writeUTF(Util.methodDescriptorOf(methodDoc));      ClassDoc exceptions[]=methodDoc.thrownExceptions();      Arrays.sort(exceptions,new ClassDocComparator());      for (      ClassDoc ex : exceptions) {        out.writeUTF(Util.binaryNameOf(ex));      }    }    out.flush();    byte hashArray[]=md.digest();    for (int i=0; i < Math.min(8,hashArray.length); i++) {      hash+=((long)(hashArray[i] & 0xFF)) << (i * 8);    }  } catch (  IOException e) {    throw new AssertionError(e);  }catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }  return hash;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  void appendEndDocument(){  done=true;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public synchronized void empty(){  while (size > 0)   pop();}  }
class C{  protected void processKeyEvent(KeyEvent e){  char keyChar=e.getKeyChar();  int keyCode=e.getKeyCode();  if (keyCode == KeyEvent.VK_ENTER) {    finished=true;  }  boolean needProcess=false;  for (int i=0; i < processable.length; i++) {    if (processable[i] == keyCode) {      needProcess=true;    }  }  if (!needProcess) {    int caretPosition=getCaretPosition();    for (Iterator iter=formRanges.iterator(); iter.hasNext(); ) {      FormRange range=(FormRange)iter.next();      int checkPosition=caretPosition;      if (keyCode == KeyEvent.VK_BACK_SPACE) {        checkPosition=caretPosition - 1;      }      if (range.isInRange(checkPosition)) {        if (e.getID() == KeyEvent.KEY_PRESSED) {          setLocalColor(range.color);          if (Character.isLetterOrDigit(keyChar)) {            write("" + keyChar);          } else           if (keyCode == KeyEvent.VK_SPACE) {            write(" ");          } else           if (keyCode == KeyEvent.VK_DELETE) {            write(" ");          } else           if (keyCode == KeyEvent.VK_BACK_SPACE) {            setCaretPosition(getCaretPosition() - 1);            write(" ");            setCaretPosition(getCaretPosition() - 1);          }        }      }    }    if ((keyCode == KeyEvent.VK_TAB) && (e.getID() == KeyEvent.KEY_PRESSED)) {      boolean found=false;      if (e.isShiftDown()) {        Collections.reverse(formRanges);      }      for (Iterator iter=formRanges.iterator(); iter.hasNext() && (!found); ) {        FormRange hotRange=(FormRange)iter.next();        int start=hotRange.start;        if (e.isShiftDown()) {          if (start < caretPosition) {            setCaretPosition(start);            found=true;          }        } else {          if (start > caretPosition) {            setCaretPosition(start);            found=true;          }        }      }      if (e.isShiftDown()) {        Collections.sort(formRanges);      }      if (!found && (formRanges.size() > 0)) {        setCaretPosition(((FormRange)formRanges.get(0)).start);      }    }  }  if (needProcess) {    super.processKeyEvent(e);  }}  }
class C{  public void testMergeFromDynamic() throws Exception {  TestAllTypes result=TestAllTypes.newBuilder(MERGE_DEST).mergeFrom(DynamicMessage.newBuilder(MERGE_SOURCE).build()).build();  assertEquals(MERGE_RESULT_TEXT,result.toString());}  }
class C{  final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void testEquals(){  ChangeRequestAttribute target=null;  boolean expectedReturn=false;  boolean actualReturn=changeRequestAttribute.equals(target);  assertEquals("Null value test failed",expectedReturn,actualReturn);  target=new ChangeRequestAttribute();  changeRequestAttribute.setChangeIpFlag(true);  changeRequestAttribute.setChangePortFlag(false);  target.setChangeIpFlag(false);  target.setChangePortFlag(true);  actualReturn=changeRequestAttribute.equals(target);  assertEquals("Test against a different value failed",expectedReturn,actualReturn);  target=new ChangeRequestAttribute();  changeRequestAttribute.setChangeIpFlag(true);  changeRequestAttribute.setChangePortFlag(false);  target.setChangeIpFlag(true);  target.setChangePortFlag(false);  expectedReturn=true;  actualReturn=changeRequestAttribute.equals(target);  assertEquals("Test against an equals value failed",expectedReturn,actualReturn);}  }
class C{  private void testRangeOfValues(){  logger.info("Test range of values...");  boolean rangeOfInterpValuesUseful=true;  double min=Double.MAX_VALUE;  double max=Double.MIN_VALUE;  for (double x=this.sg.getXmin(); x <= this.sg.getXmax(); x+=this.sg.getResolution() / 2) {    for (double y=this.sg.getYmin(); y <= this.sg.getYmax(); y+=this.sg.getResolution() / 2) {      double interpValue=this.interpolatedSG.getValue(x,y);switch (this.interpolation.getInterpolationMethod()) {case 0:case 2:        if (interpValue < 0 || interpValue > 100)         rangeOfInterpValuesUseful=false;      break;case 1:    if (interpValue < -35 || interpValue > 135)     rangeOfInterpValuesUseful=false;}if (interpValue < min) min=interpValue;if (interpValue > max) max=interpValue;}}logger.info("The minimum of the tested interpolation values is " + min + "; the maximum is "+ max+ ".");if (!rangeOfInterpValuesUseful) {logger.warn("The range of interpolated values is not useful!");this.interpolationUseful=false;}}  }
class C{  @PUT @Path("/wardensuspensionlevelsanddurations") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Description("Updates warden infraction level counts and suspension durations.") public Response updateWardenSuspensionLevelsAndDurations(@Context HttpServletRequest req,Map<Integer,Long> infractionCounts){  if (infractionCounts == null || infractionCounts.isEmpty()) {    throw new IllegalArgumentException("Infraction counts cannot be null or empty.");  }  validatePrivilegedUser(req);  managementService.updateWardenSuspensionLevelsAndDurations(infractionCounts);  return Response.status(Status.OK).build();}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public static StoragePort assignPortToInitiator(StoragePortsAssigner assigner,List<StoragePort> ports,NetworkLite net,Initiator initiator,Map<StoragePort,Integer> portUsage,String groupId){  StoragePort foundPort=null;  for (  StoragePort port : ports) {    if (groupId == null || port.getPortGroup().equals(groupId)) {      if (portUsage.get(port) == null) {        portUsage.put(port,0);      }      if (assigner.isPortAssignableToInitiator(net,initiator,port)) {        if (foundPort == null) {          foundPort=port;        } else {          if (portUsage.get(port) < portUsage.get(foundPort)) {            foundPort=port;          }        }      }    }  }  if (foundPort != null) {    portUsage.put(foundPort,portUsage.get(foundPort) + 1);  }  return foundPort;}  }
class C{  public void endVisit(SingleVariableDeclaration node){}  }
class C{  public CellTableProbs(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException("Data set not provided.");  }  this.dataSet=dataSet;  dims=new int[dataSet.getNumColumns()];  for (int i=0; i < dims.length; i++) {    DiscreteVariable variable=(DiscreteVariable)dataSet.getVariable(i);    dims[i]=variable.getNumCategories();  }  int size=1;  for (  int dim : dims) {    size*=dim;  }  this.cells=new int[size];  int numRows=dataSet.getNumRows();  int[] point=new int[dims.length];  this.missingValueCaseFound=false;  point:   for (int i=0; i < numRows; i++) {    for (int j=0; j < dims.length; j++) {      point[j]=dataSet.getInt(i,j);      if (point[j] == DiscreteVariable.MISSING_VALUE) {        this.missingValueCaseFound=true;        continue point;      }    }    int cellIndex=getCellIndex(point);    cells[cellIndex]++;    numPoints++;  }}  }
class C{  private void writeEscUTF16(String s,int start,int length,boolean isAttVal) throws SAXException {  String subString=s.substring(start,start + length);  write(StringEscapeUtils.escapeHtml4(subString));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int step(){  return step;}  }
class C{  public void updateQuantityCount(ItemBean original,ItemBean itemToAdd,boolean add){  BigDecimal originalQuantity=original.getQtyCount();  BigDecimal quantityToAdd=itemToAdd.getQtyCount();  BigDecimal finalQuantity=null;  if (!add)   finalQuantity=originalQuantity.subtract(quantityToAdd); else   finalQuantity=originalQuantity.add(quantityToAdd);  original.setQtyCount(finalQuantity);}  }
class C{  public final boolean unify(final JIPTerm term,final Hashtable varsTbl){  Hashtable varTable1=new Hashtable(10);  if (m_obj.unify(term.m_obj,varTable1)) {    Variable var;    Enumeration en=varTable1.elements();    while (en.hasMoreElements()) {      var=((Variable)en.nextElement());      varsTbl.put(var,new JIPVariable(var));    }    return true;  } else {    return false;  }}  }
class C{  public Builder withLeader(Address leader){  response.leader=leader;  return this;}  }
class C{  public CustomElement(String value){  this.value=value;}  }
class C{  public MCashLine createReversal(){  MCash parent=getParent();  if (parent.isProcessed()) {    parent=MCash.get(getCtx(),parent.getAD_Org_ID(),parent.getStatementDate(),parent.getC_Currency_ID(),get_TrxName());  } else {    this.setIsActive(false);    return this;  }  MCashLine reversal=new MCashLine(parent);  reversal.setClientOrg(this);  reversal.setC_BankAccount_ID(getC_BankAccount_ID());  reversal.setC_Charge_ID(getC_Charge_ID());  reversal.setC_Currency_ID(getC_Currency_ID());  reversal.setC_Invoice_ID(getC_Invoice_ID());  reversal.setCashType(getCashType());  reversal.setDescription(getDescription());  reversal.setIsGenerated(true);  reversal.setAmount(getAmount().negate());  if (getDiscountAmt() == null)   setDiscountAmt(Env.ZERO); else   reversal.setDiscountAmt(getDiscountAmt().negate());  if (getWriteOffAmt() == null)   setWriteOffAmt(Env.ZERO); else   reversal.setWriteOffAmt(getWriteOffAmt().negate());  reversal.addDescription("(" + getLine() + ")");  return reversal;}  }
class C{  public final void parseNw(final String nwShpFileName) throws IOException, RuntimeException {  log.info("creating data structure from Tele Atlas MultiNet network shape file '" + nwShpFileName + "'...");  if (this.data.junctionElements == null) {    throw new IllegalArgumentException("No junction map given.");  }  Map<Long,NwElement> map=this.data.networkElements;  for (  SimpleFeature f : ShapeFileReader.getAllFeatures(nwShpFileName)) {    NwElement e=new NwElement();    e.id=extractNwFeatureIdentification(f);    e.featType=extractNwFeatureType(f);    e.ferryType=extractNwFerryType(f);    e.fromJunction=extractNwFromJunction(f);    e.toJunction=extractNwToJunction(f);    e.length=extractNwFeatureLength(f);    e.frc=extractNwFRC(f);    e.net2Class=extractNwNet2Class(f);    e.oneway=extractOneWay(f);    e.speedCat=extractSpeedCategory(f);    e.freeway=extractFreeway(f);    e.nOfLanes=extractNumberOfLanes(f);    e.fow=extractFormOfWay(f);    e.privat=extractPrivateRoad(f);    e.ramp=extractRamp(f);    e.slipRoad=extractSlipRoad(f);    if (map.containsKey(e.id)) {      throw new RuntimeException("id=" + e.id + " already exists.");    }    map.put(e.id,e);  }  log.info("=> " + map.size() + " elements parsed.");  log.info("done.");}  }
class C{  @Override public net.floodlightcontroller.core.IListener.Command reconcileFlows(ArrayList<OFMatchReconcile> ofmRcList){  if (lds != null) {    links=new HashMap<Link,LinkInfo>();    if (lds.getLinks() != null)     links.putAll(lds.getLinks());    for (    OFMatchReconcile ofmr : ofmRcList) {      if (ofmr.rcAction.equals(OFMatchReconcile.ReconcileAction.UPDATE_PATH)) {        IOFSwitch sw=switchService.getSwitch(ofmr.ofmWithSwDpid.getDpid());        Map<OFPort,List<Match>> invalidBaseIngressAndMatches=new HashMap<OFPort,List<Match>>();        List<OFFlowStatsReply> flows=getFlows(sw,ofmr.outPort);        for (        OFFlowStatsReply flow : flows) {          for (          OFFlowStatsEntry entry : flow.getEntries()) {            Match match=entry.getMatch();            if (invalidBaseIngressAndMatches.containsKey(match.get(MatchField.IN_PORT)))             invalidBaseIngressAndMatches.get(match.get(MatchField.IN_PORT)).add(match); else {              List<Match> matches=new ArrayList<Match>();              matches.add(match);              invalidBaseIngressAndMatches.put(match.get(MatchField.IN_PORT),matches);            }          }        }        if (!flows.isEmpty()) {          log.debug("Removing flows on switch : " + sw.getId() + " with outport: "+ ofmr.outPort);          clearFlowMods(sw,ofmr.outPort);        }        Map<IOFSwitch,Map<OFPort,List<Match>>> neighborSwitches=new HashMap<IOFSwitch,Map<OFPort,List<Match>>>();        for (        Link link : links.keySet()) {          if (link.getDst() == sw.getId()) {            for (            Entry<OFPort,List<Match>> invalidBaseIngressAndMatch : invalidBaseIngressAndMatches.entrySet()) {              if (link.getDstPort() == invalidBaseIngressAndMatch.getKey()) {                Map<OFPort,List<Match>> invalidNeighborOutportAndMatch=new HashMap<OFPort,List<Match>>();                invalidNeighborOutportAndMatch.put(link.getSrcPort(),invalidBaseIngressAndMatch.getValue());                neighborSwitches.put(switchService.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);              }            }          }        }        log.debug("We have " + neighborSwitches.size() + " neighboring switches to deal with!");        for (        IOFSwitch neighborSwitch : neighborSwitches.keySet()) {          log.debug("NeighborSwitch ID : " + neighborSwitch.getId());          if (neighborSwitches.get(neighborSwitch) != null)           deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));        }      }      return Command.CONTINUE;    }  } else {    log.error("Link Discovery Service Is Null");  }  return Command.CONTINUE;}  }
class C{  public static Writable writeRead(Writable before,Configuration conf) throws Exception {  DataOutputBuffer dob=new DataOutputBuffer();  before.write(dob);  DataInputBuffer dib=new DataInputBuffer();  dib.reset(dob.getData(),dob.getLength());  Writable after=(Writable)before.getClass().newInstance();  if (conf != null) {    ((Configurable)after).setConf(conf);  }  after.readFields(dib);  return after;}  }
class C{  public Info(String tabKey,String userAgentTag,String url,String remoteHost,String initialSessionKey,byte[] browserIconBytes){  this.tabKey=returnEmptyStrIfNull(tabKey);  this.userAgentTag=generateUniqueNameIfNullOrEmpty(userAgentTag,"Browser");  this.remoteHost=returnEmptyStrIfNull(remoteHost);  this.url=generateUniqueNameIfNullOrEmpty(url,"URL");  this.initialSessionKey=returnEmptyStrIfNull(initialSessionKey);  this.browserIconBytes=browserIconBytes;}  }
class C{  protected static boolean isHostReachable(String hostName){  try {    InetAddress.getByName(hostName);  } catch (  UnknownHostException e) {    String message=Logging.getMessage("NetworkStatus.UnreachableTestHost",hostName);    Logging.logger().fine(message);    return false;  }catch (  Exception e) {    String message=Logging.getMessage("NetworkStatus.ExceptionTestingHost",hostName);    Logging.logger().info(message);    return false;  }  URLConnection connection=null;  try {    URL url=new URL("http://" + hostName);    Proxy proxy=WWIO.configureProxy();    if (proxy != null)     connection=url.openConnection(proxy); else     connection=url.openConnection();    connection.setConnectTimeout(2000);    connection.setReadTimeout(2000);    String ct=connection.getContentType();    if (ct != null)     return true;  } catch (  IOException e) {    String message=Logging.getMessage("NetworkStatus.ExceptionTestingHost",hostName);    Logging.logger().info(message);  } finally {    if (connection != null && connection instanceof HttpURLConnection)     ((HttpURLConnection)connection).disconnect();  }  return false;}  }
class C{  private static Map<Integer,List<DimensionAggregatorInfo>> arrangeDimensionAggregationInfo(List<DimensionAggregatorInfo> queryDimensionAggregationInfos,Map<Integer,Integer> dimensionOrdinaltoBlockIndexMapping){  Map<Integer,List<DimensionAggregatorInfo>> groupedDimensionAggregationInfo=new LinkedHashMap<Integer,List<DimensionAggregatorInfo>>();  for (  DimensionAggregatorInfo queryDimensionAggregatorInfo : queryDimensionAggregationInfos) {    List<DimensionAggregatorInfo> list=groupedDimensionAggregationInfo.get(dimensionOrdinaltoBlockIndexMapping.get(queryDimensionAggregatorInfo.getDim().getOrdinal()));    if (null == list) {      list=new ArrayList<DimensionAggregatorInfo>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      groupedDimensionAggregationInfo.put(dimensionOrdinaltoBlockIndexMapping.get(queryDimensionAggregatorInfo.getDim().getOrdinal()),list);    }    list.add(queryDimensionAggregatorInfo);  }  return groupedDimensionAggregationInfo;}  }
class C{  public static <T>boolean containsEquivalent(Collection<T> c,Object o,Hasher h){  for (  T t : c) {    if (h.equals(t,o))     return true;  }  return false;}  }
class C{  public void receivePulse(GlowBlock block){  block.getWorld().cancelPulse(block);}  }
class C{  public static void updateIcon(){  Main.triggerMenuInvalidationStatic();}  }
class C{  protected void validateSystemMonitorResponse(String systemMonitorResponseMessage){  assertTrue("Correlation Id \"" + TEST_SQS_MESSAGE_CORRELATION_ID + "\" expected, but not found.",systemMonitorResponseMessage.contains("<correlation-id>" + TEST_SQS_MESSAGE_CORRELATION_ID + "</correlation-id>"));  assertTrue("Context Message Type \"" + TEST_SQS_CONTEXT_MESSAGE_TYPE_TO_PUBLISH + "\" expected, but not found.",systemMonitorResponseMessage.contains("<context-message-type>" + TEST_SQS_CONTEXT_MESSAGE_TYPE_TO_PUBLISH + "</context-message-type>"));  assertTrue("Environment \"Development\" expected, but not found.",systemMonitorResponseMessage.contains("<environment>Development</environment>"));}  }
class C{  public VOOrganization updateCustomerDiscount(VOOrganization organization,BigDecimal value,long startTime,long endTime) throws Exception {  VODiscount discount=organization.getDiscount();  if (discount == null) {    discount=new VODiscount();    organization.setDiscount(discount);  }  discount.setValue(value);  discount.setStartTime(Long.valueOf(startTime));  discount.setEndTime(Long.valueOf(endTime));  return accountService.updateCustomerDiscount(organization);}  }
class C{  public static void rotateM(float[] rm,int rmOffset,float[] m,int mOffset,float a,float x,float y,float z){synchronized (TEMP_MATRIX_ARRAY) {    setRotateM(TEMP_MATRIX_ARRAY,0,a,x,y,z);    multiplyMM(rm,rmOffset,m,mOffset,TEMP_MATRIX_ARRAY,0);  }}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,Vector3 normal,double eccentricity,double angle,OrbitDirection direction){  super();  mFocalPoint=focalPoint;  mPeriapsis=periapsis;  mNormal=normal.clone();  mEccentricity=eccentricity;  mDirection=direction;  mAngle=angle;}  }
class C{  public int toInt(Element el,String attributeName){  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);}  }
class C{  private boolean trackMatchesString(Track track,String string){  boolean matchesName=track.getName().toLowerCase().contains(string.toLowerCase());  boolean matchesArtist=track.getArtist().toLowerCase().contains(string.toLowerCase());  boolean matchesLabel=track.getLabel().toLowerCase().contains(string.toLowerCase());  boolean matchesGenre=track.getGenre().toLowerCase().contains(string.toLowerCase());  boolean matchesAlbum=track.getAlbum().toLowerCase().contains(string.toLowerCase());  return matchesName || matchesArtist || matchesLabel|| matchesGenre|| matchesAlbum;}  }
class C{  public void copyTo(PositionTextureVertex[] verts,TexturedQuad[] quad){  TexturedPolygon[] poly=new TexturedPolygon[quad.length];  for (int idx=0; idx < quad.length; idx++) {    poly[idx]=new TexturedPolygon((PositionTextureVertex[])quad[idx].vertexPositions);  }  copyTo(verts,poly);}  }
class C{  public boolean hasColumns(){  return this.columns != null;}  }
class C{  public FloatMatrix put(int[] indices,int c,FloatMatrix x){  if (x.isScalar()) {    return put(indices,c,x.scalar());  }  for (int i=0; i < indices.length; i++) {    put(indices[i],c,x.get(i));  }  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_multipleIsA_1_();}  }
class C{  public static <T>T orderWrites(T ref){  theVolatile=0;  return ref;}  }
class C{  public static Object invokeCompiledCommand(Class commandClass,Object[] args,Interpreter interpreter,CallStack callstack) throws UtilEvalError {  Object[] invokeArgs=new Object[args.length + 2];  invokeArgs[0]=interpreter;  invokeArgs[1]=callstack;  System.arraycopy(args,0,invokeArgs,2,args.length);  BshClassManager bcm=interpreter.getClassManager();  try {    return Reflect.invokeStaticMethod(bcm,commandClass,"invoke",invokeArgs);  } catch (  InvocationTargetException e) {    throw new UtilEvalError("Error in compiled command: " + e.getTargetException());  }catch (  ReflectError e) {    throw new UtilEvalError("Error invoking compiled command: " + e);  }}  }
class C{  public PCALCodeScanner(){  TLAColorProvider provider=TLAEditorActivator.getDefault().getTLAColorProvider();  IToken keyword=new Token(new TextAttribute(provider.getColor(TLAColorProvider.TLA_KEYWORD),null,SWT.BOLD));  IToken value=new Token(new TextAttribute(provider.getColor(TLAColorProvider.TLA_VALUE)));  IToken other=new Token(new TextAttribute(provider.getColor(TLAColorProvider.TLA_DEFAULT)));  IToken pcal=new Token(new TextAttribute(provider.getColor(TLAColorProvider.PCAL_KEYWORD)));  List rules=new ArrayList();  WordRule wordRule=new WordRule(DocumentHelper.getDefaultWordDetector(),other);  for (int i=0; i < ITLAReserveredWords.ALL_VALUES_ARRAY.length; i++) {    wordRule.addWord(ITLAReserveredWords.ALL_VALUES_ARRAY[i],value);  }  for (int i=0; i < ITLAReserveredWords.ALL_WORDS_ARRAY.length; i++) {    wordRule.addWord(ITLAReserveredWords.ALL_WORDS_ARRAY[i],keyword);  }  for (int i=0; i < ITLAReserveredWords.PCAL_WORDS_ARRAY.length; i++) {    wordRule.addWord(ITLAReserveredWords.PCAL_WORDS_ARRAY[i],pcal);  }  rules.add(wordRule);  IRule[] result=new IRule[rules.size()];  rules.toArray(result);  setRules(result);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(MainTable.TABLE_NAME);switch (mUriMatcher.match(uri)) {case MAIN:    qb.setProjectionMap(mNotesProjectionMap);  break;case MAIN_ID:qb.setProjectionMap(mNotesProjectionMap);qb.appendWhere(MainTable._ID + "=?");selectionArgs=DatabaseUtils.appendSelectionArgs(selectionArgs,new String[]{uri.getLastPathSegment()});break;default :throw new IllegalArgumentException("Unknown URI " + uri);}if (TextUtils.isEmpty(sortOrder)) {sortOrder=MainTable.DEFAULT_SORT_ORDER;}SQLiteDatabase db=mOpenHelper.getReadableDatabase();Cursor c=qb.query(db,projection,selection,selectionArgs,null,null,sortOrder);c.setNotificationUri(getContext().getContentResolver(),uri);return c;}  }
class C{  public void loadIPsAndNames(){  PropertyInfo props=coordinator.getPropertyInfo();  if (props == null) {    throw SecurityException.retryables.keystoreUnavailable();  }  addresses=new HashSet<InetAddress>();  String ipAddress=props.getProperty(NETWORK_STANDALONE_IP_ADDRESS_PROPERTY_NAME);  InetAddress inet;  if (StringUtils.isNotBlank(ipAddress) && !ipAddress.equals(UNDEFINED_IPV4_ADDRESS)) {    ipAddress=ipAddress.trim();    inet=getInetAddress(ipAddress);    addresses.add(inet);    log.debug("Standalone ip address is:" + ipAddress + ". Canonical host name is "+ inet.getCanonicalHostName());  }  for (int index=1; index <= MAX_NUMBER_OF_NODES; index++) {    ipAddress=props.getProperty(String.format(NETWORK_NODE_IP_ADDRESS_PROPERTY_NAME_FORMAT,index));    if (StringUtils.isNotBlank(ipAddress) && !ipAddress.equals(UNDEFINED_IPV4_ADDRESS)) {      ipAddress=ipAddress.trim();      inet=getInetAddress(ipAddress);      addresses.add(inet);      log.debug("Node #" + index + " IPv4 address is:"+ ipAddress+ ". Canonical host name is "+ inet.getCanonicalHostName());    }    ipAddress=props.getProperty(String.format(NETWORK_NODE_IP_ADDRESS6_PROPERTY_NAME_FORMAT,index));    if (StringUtils.isNotBlank(ipAddress) && !ipAddress.equals(UNDEFINED_IPV6_ADDRESS)) {      ipAddress=ipAddress.trim();      inet=getInetAddress(ipAddress);      addresses.add(inet);      log.debug("Node #" + index + " IPv6 address is:"+ ipAddress+ ". Canonical host name is "+ inet.getCanonicalHostName());    }  }  InetAddress ipv6VipAddress=null;  InetAddress ipv4VipAddress=null;  ipAddress=props.getProperty(NETWORK_VIP6_PROPERTY_NAME);  if (StringUtils.isNotBlank(ipAddress) && !ipAddress.trim().equals(UNDEFINED_IPV6_ADDRESS)) {    ipAddress=ipAddress.trim();    ipv6VipAddress=getInetAddress(ipAddress);    log.debug("VIP IPv6 address is:" + ipAddress + ". Canonical host name is "+ ipv6VipAddress.getCanonicalHostName());    addresses.add(ipv6VipAddress);  }  ipAddress=props.getProperty(NETWORK_VIP_PROPERTY_NAME);  if (StringUtils.isNotBlank(ipAddress) && !ipAddress.trim().equals(UNDEFINED_IPV4_ADDRESS)) {    ipAddress=ipAddress.trim();    ipv4VipAddress=getInetAddress(ipAddress);    log.debug("VIP IPv4 address is:" + ipAddress + ". Canonical host name is "+ ipv4VipAddress.getCanonicalHostName());    addresses.add(ipv4VipAddress);  } else   if (ipv6VipAddress == null) {    ipv4VipAddress=addresses.iterator().next();  }  certificateCommonName=decideCommonName(ipv4VipAddress,ipv6VipAddress);}  }
class C{  public void configure(){  SerialTrafficController tc=null;  String opt1=getOptionState(option1Name);  if (opt1.equals("CM11")) {    this.setSystemConnectionMemo(new jmri.jmrix.powerline.cm11.SpecificSystemConnectionMemo());    tc=new jmri.jmrix.powerline.cm11.SpecificTrafficController(this.getSystemConnectionMemo());  } else   if (opt1.equals("CP290")) {    this.setSystemConnectionMemo(new jmri.jmrix.powerline.cp290.SpecificSystemConnectionMemo());    tc=new jmri.jmrix.powerline.cp290.SpecificTrafficController(this.getSystemConnectionMemo());  } else   if (opt1.equals("Insteon 2412S")) {    this.setSystemConnectionMemo(new jmri.jmrix.powerline.insteon2412s.SpecificSystemConnectionMemo());    tc=new jmri.jmrix.powerline.insteon2412s.SpecificTrafficController(this.getSystemConnectionMemo());  } else {    log.warn("protocol option " + opt1 + " defaults to CM11");    this.setSystemConnectionMemo(new jmri.jmrix.powerline.cm11.SpecificSystemConnectionMemo());    tc=new jmri.jmrix.powerline.cm11.SpecificTrafficController(this.getSystemConnectionMemo());  }  this.getSystemConnectionMemo().setTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.connectPort(this);  this.getSystemConnectionMemo().setSerialAddress(new jmri.jmrix.powerline.SerialAddress(this.getSystemConnectionMemo()));}  }
class C{  public EaseOutIn(){}  }
class C{  public XPathAPI newXPathAPI(){  return new XalanXPathAPI();}  }
class C{  public boolean isSetTriggerType(){  return this.triggerType != null;}  }
class C{  public final synchronized void stop(){  boolean joined=false;  if (!running)   return;  halt(false);  while (!joined) {    try {      thread.join();      joined=true;    } catch (    InterruptedException e) {    }  }  state.removeFromAsynchronousRegistry(this);  running=false;}  }
class C{  public boolean canUndo(){  return undoManager.canUndo();}  }
class C{  public static boolean isLocalURL(URL url){  return "file".equalsIgnoreCase(url.getProtocol()) || "jar".equalsIgnoreCase(url.getProtocol());}  }
class C{  private void processTest(DeploymentMode depMode) throws Exception {  this.depMode=depMode;  try {    Ignite ignite=startGrid(1);    ignite.compute().execute(Task.class,null);  }  finally {    stopGrid(1);  }}  }
class C{  public PipelineCpeBuilder(String pipelineName,File yamlFile) throws BaleenException {  super(pipelineName,yamlFile);}  }
class C{  @Override public Object writeReplace(Object obj){  Calendar cal=(Calendar)obj;  return new CalendarHandle(cal.getClass(),cal.getTimeInMillis());}  }
class C{  public void testEmptyOffer(){  SubmissionPublisher<Integer> p=basicPublisher();  assertEquals(0,p.offer(1,null));}  }
class C{  public CategoryInfo browse(){  return client.getURI(CategoryInfo.class,catalogPath(null));}  }
class C{  protected void addInstance(Instance newInstance) throws Exception {  if (m_clusterInstances == null) {    m_clusterInstances=new Instances(newInstance.dataset(),1);    m_clusterInstances.add(newInstance);    updateStats(newInstance,false);    return;  } else   if (m_children == null) {    m_children=new ArrayList<CNode>();    CNode tempSubCluster=new CNode(m_numAttributes,m_clusterInstances.instance(0));    for (int i=1; i < m_clusterInstances.numInstances(); i++) {      tempSubCluster.m_clusterInstances.add(m_clusterInstances.instance(i));      tempSubCluster.updateStats(m_clusterInstances.instance(i),false);    }    m_children=new ArrayList<CNode>();    m_children.add(tempSubCluster);    m_children.add(new CNode(m_numAttributes,newInstance));    m_clusterInstances.add(newInstance);    updateStats(newInstance,false);    if (categoryUtility() < m_cutoff) {      m_children=null;    }    return;  }  CNode bestHost=findHost(newInstance,false);  if (bestHost != null) {    bestHost.addInstance(newInstance);  }}  }
class C{  private boolean isStartingNewContextualSearch(PanelState toState,StateChangeReason reason){  return toState == PanelState.PEEKED && (reason == StateChangeReason.TEXT_SELECT_TAP || reason == StateChangeReason.TEXT_SELECT_LONG_PRESS);}  }
class C{  public PilotingRollData checkGetUp(MoveStep step,EntityMovementType moveType){  PilotingRollData roll=super.checkGetUp(step,moveType);  roll.addModifier(4,"armless Mech");  return roll;}  }
class C{  GridUriDeploymentUnitDescriptor(String uri,File file,long tstamp,ClassLoader clsLdr,String md5){  assert uri != null;  assert file != null;  assert tstamp > 0;  this.uri=uri;  this.file=file;  this.tstamp=tstamp;  this.clsLdr=clsLdr;  this.md5=md5;  type=FILE;}  }
class C{  public static Decoder createDecoder(String configFile){  JoshuaConfiguration joshuaConfiguration=new JoshuaConfiguration();  return new Decoder(joshuaConfiguration,configFile);}  }
class C{  public static void logError(String message,Exception e){  System.out.println(message);  e.printStackTrace();}  }
class C{  protected Expression minus(int opPos) throws TransformerException {  return compileOperation(new Minus(),opPos);}  }
class C{  public void process(HttpServletResponse response) throws IOException {  if (proxyTargeted) {    response.setStatus(HttpServletResponse.SC_OK);    response.setHeader("content-type","message/http");    response.setHeader("Connection","close");    String path=method.getPath();    String protocol=method.getParams().getVersion().toString();    PrintWriter writer=response.getWriter();    writer.println("TRACE " + path + " "+ protocol);    Header[] headers=method.getRequestHeaders();    for (int i=0; i < headers.length; i++) {      writer.print(headers[i]);    }    writer.flush();    writer.close();  } else {    setHeaders(response);    response.setStatus(getStatusCode());    sendStreamToClient(response);  }}  }
class C{  public Configurator recordNoData(){  dataWriterFactory=null;  return this;}  }
class C{  public HopfieldNode(NetworkPanel networkPanel,Hopfield group){  super(networkPanel,group);  setContextMenu();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static ModuleVersion parseVersion(String version){  if (version == null)   return DEFAULT_VERSION;  version=version.trim();  if (version.length() == 0)   return DEFAULT_VERSION;  return new ModuleVersion(version);}  }
class C{  @Override @SideEffectFree public String formatAnnotationString(Collection<? extends AnnotationMirror> annos,boolean printInvisible){  StringBuilder sb=new StringBuilder();  for (  AnnotationMirror obj : annos) {    if (obj == null) {      ErrorReporter.errorAbort("AnnotatedTypeMirror.formatAnnotationString: found null AnnotationMirror!");    }    if (isInvisibleQualified(obj) && !printInvisible) {      continue;    }    formatAnnotationMirror(obj,sb);    sb.append(" ");  }  return sb.toString();}  }
