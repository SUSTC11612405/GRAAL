class C{  public LayoutQueue(){  tasks=new Vector<Runnable>();}  }
class C{  private void fillParameter(MPInstance pInstance){  MSchedulerPara[] sParams=m_model.getParameters(false);  MPInstancePara[] iParams=pInstance.getParameters();  for (int pi=0; pi < iParams.length; pi++) {    MPInstancePara iPara=iParams[pi];    for (int np=0; np < sParams.length; np++) {      MSchedulerPara sPara=sParams[np];      if (iPara.getParameterName().equals(sPara.getColumnName())) {        String paraDesc=sPara.getDescription();        if (paraDesc != null && paraDesc.trim().length() > 0)         iPara.setInfo(sPara.getDescription());        String variable=sPara.getParameterDefault();        log.fine(sPara.getColumnName() + " = " + variable);        Object value=variable;        if (variable == null || (variable != null && variable.length() == 0))         value=null; else         if (variable.indexOf('@') != -1 && variable.indexOf('@') != variable.lastIndexOf('@')) {          int index=variable.indexOf('@');          String columnName=variable.substring(index + 1);          index=columnName.indexOf('@');          if (index == -1) {            log.warning(sPara.getColumnName() + " - cannot evaluate=" + variable);            break;          }          columnName=columnName.substring(0,index);          String env=Env.getContext(m_schedulerctx,columnName);          if (env == null || env.length() == 0)           env=Env.getContext(getCtx(),columnName);          if (env.length() == 0) {            log.warning(sPara.getColumnName() + " - not in environment =" + columnName+ "("+ variable+ ")");            break;          } else           value=env;        }        if (value == null) {          log.fine(sPara.getColumnName() + " - empty");          break;        }        try {          if (DisplayType.isNumeric(sPara.getDisplayType()) || DisplayType.isID(sPara.getDisplayType())) {            BigDecimal bd=null;            if (value instanceof BigDecimal)             bd=(BigDecimal)value; else             if (value instanceof Integer)             bd=new BigDecimal(((Integer)value).intValue()); else             bd=new BigDecimal(value.toString());            iPara.setP_Number(bd);            log.fine(sPara.getColumnName() + " = " + variable+ " (="+ bd+ "=)");          } else           if (DisplayType.isDate(sPara.getDisplayType())) {            Timestamp ts=null;            if (value instanceof Timestamp)             ts=(Timestamp)value; else             ts=Timestamp.valueOf(value.toString());            iPara.setP_Date(ts);            log.fine(sPara.getColumnName() + " = " + variable+ " (="+ ts+ "=)");          } else {            iPara.setP_String(value.toString());            log.fine(sPara.getColumnName() + " = " + variable+ " (="+ value+ "=) "+ value.getClass().getName());          }          if (!iPara.save())           log.warning("Not Saved - " + sPara.getColumnName());        } catch (        Exception e) {          log.warning(sPara.getColumnName() + " = " + variable+ " ("+ value+ ") "+ value.getClass().getName()+ " - "+ e.getLocalizedMessage());        }        break;      }    }  }}  }
class C{  public void requestAfterExplanation(@NonNull String[] permissions){  ArrayList<String> permissionsToRequest=new ArrayList<>();  for (  String permissionName : permissions) {    if (isPermissionDeclined(permissionName)) {      permissionsToRequest.add(permissionName);    } else {      permissionCallback.onPermissionPreGranted(permissionName);    }  }  if (permissionsToRequest.isEmpty())   return;  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);  context.requestPermissions(permissions,REQUEST_PERMISSIONS);}  }
class C{  public void handleDOMNodeInsertedEvent(MutationEvent evt){  if (evt.getTarget() instanceof Element) {    Element childElt=(Element)evt.getTarget();    GVTBuilder builder=ctx.getGVTBuilder();    GraphicsNode childNode=builder.build(ctx,childElt);    if (childNode == null) {      return;    }    node.add(childNode);  }}  }
class C{  @Override public boolean isEmpty(){  final Segment<K,V>[] segments=this.segments;  int[] mc=new int[segments.length];  int mcsum=0;  for (int i=0; i < segments.length; ++i) {    if (segments[i].count != 0)     return false;    mcsum+=mc[i]=segments[i].modCount;  }  if (mcsum != 0) {    for (int i=0; i < segments.length; ++i) {      if (segments[i].count != 0 || mc[i] != segments[i].modCount)       return false;    }  }  return true;}  }
class C{  public boolean isSubtype(ReferenceType type,ReferenceType possibleSupertype) throws ClassNotFoundException {  if (type.equals(possibleSupertype)) {    return true;  }  if (possibleSupertype.equals(Type.OBJECT)) {    return true;  }  if (type.equals(Type.OBJECT)) {    return false;  }  boolean typeIsObjectType=(type instanceof ObjectType);  boolean possibleSupertypeIsObjectType=(possibleSupertype instanceof ObjectType);  if (typeIsObjectType && possibleSupertypeIsObjectType) {    return isSubtype((ObjectType)type,(ObjectType)possibleSupertype);  }  boolean typeIsArrayType=(type instanceof ArrayType);  boolean possibleSupertypeIsArrayType=(possibleSupertype instanceof ArrayType);  if (typeIsArrayType) {    if (possibleSupertype.equals(SERIALIZABLE) || possibleSupertype.equals(CLONEABLE)) {      return true;    }    if (!possibleSupertypeIsArrayType) {      return false;    }    ArrayType typeAsArrayType=(ArrayType)type;    ArrayType possibleSupertypeAsArrayType=(ArrayType)possibleSupertype;    if (typeAsArrayType.getDimensions() < possibleSupertypeAsArrayType.getDimensions()) {      return false;    }    Type possibleSupertypeBasicType=possibleSupertypeAsArrayType.getBasicType();    if (!(possibleSupertypeBasicType instanceof ObjectType)) {      return false;    }    Type typeBasicType=typeAsArrayType.getBasicType();    if (typeAsArrayType.getDimensions() > possibleSupertypeAsArrayType.getDimensions()) {      return isSubtype(new ArrayType(typeBasicType,typeAsArrayType.getDimensions() - possibleSupertypeAsArrayType.getDimensions()),(ObjectType)possibleSupertypeBasicType);    }    if (!(typeBasicType instanceof ObjectType)) {      return false;    }    return isSubtype((ObjectType)typeBasicType,(ObjectType)possibleSupertypeBasicType);  }  return false;}  }
class C{  public final ClassifierSplitModel selectModel(Instances train){  return null;}  }
class C{  protected void closeStartTag() throws SAXException {  m_elemContext.m_startTagOpen=false;  final String localName=getLocalName(m_elemContext.m_elementName);  final String uri=getNamespaceURI(m_elemContext.m_elementName,true);  if (m_needToCallStartDocument) {    startDocumentInternal();  }  m_saxHandler.startElement(uri,localName,m_elemContext.m_elementName,m_attributes);  m_attributes.clear();  if (m_state != null)   m_state.setCurrentNode(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode08.class,args);}  }
class C{  public boolean parseKMLUrl(String url){  Log.d(BonusPackHelper.LOG_TAG,"KmlProvider.parseKMLUrl:" + url);  HttpConnection connection=new HttpConnection();  connection.doGet(url);  InputStream stream=connection.getStream();  boolean ok;  if (stream == null) {    ok=false;  } else {    ok=parseKMLStream(stream,null);  }  connection.close();  return ok;}  }
class C{  public boolean signRequired(){  return true;}  }
class C{  private HitonRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  protected static void processCRLC(X509CRL deltaCRL,X509CRL completeCRL,ExtendedPKIXParameters pkixParams) throws AnnotatedException {  if (deltaCRL == null) {    return;  }  IssuingDistributionPoint completeidp=null;  try {    completeidp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(completeCRL,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));  } catch (  Exception e) {    throw new AnnotatedException("Issuing distribution point extension could not be decoded.",e);  }  if (pkixParams.isUseDeltasEnabled()) {    if (!deltaCRL.getIssuerX500Principal().equals(completeCRL.getIssuerX500Principal())) {      throw new AnnotatedException("Complete CRL issuer does not match delta CRL issuer.");    }    IssuingDistributionPoint deltaidp=null;    try {      deltaidp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(deltaCRL,ISSUING_DISTRIBUTION_POINT));    } catch (    Exception e) {      throw new AnnotatedException("Issuing distribution point extension from delta CRL could not be decoded.",e);    }    boolean match=false;    if (completeidp == null) {      if (deltaidp == null) {        match=true;      }    } else {      if (completeidp.equals(deltaidp)) {        match=true;      }    }    if (!match) {      throw new AnnotatedException("Issuing distribution point extension from delta CRL and complete CRL does not match.");    }    ASN1Primitive completeKeyIdentifier=null;    try {      completeKeyIdentifier=CertPathValidatorUtilities.getExtensionValue(completeCRL,AUTHORITY_KEY_IDENTIFIER);    } catch (    AnnotatedException e) {      throw new AnnotatedException("Authority key identifier extension could not be extracted from complete CRL.",e);    }    ASN1Primitive deltaKeyIdentifier=null;    try {      deltaKeyIdentifier=CertPathValidatorUtilities.getExtensionValue(deltaCRL,AUTHORITY_KEY_IDENTIFIER);    } catch (    AnnotatedException e) {      throw new AnnotatedException("Authority key identifier extension could not be extracted from delta CRL.",e);    }    if (completeKeyIdentifier == null) {      throw new AnnotatedException("CRL authority key identifier is null.");    }    if (deltaKeyIdentifier == null) {      throw new AnnotatedException("Delta CRL authority key identifier is null.");    }    if (!completeKeyIdentifier.equals(deltaKeyIdentifier)) {      throw new AnnotatedException("Delta CRL authority key identifier does not match complete CRL authority key identifier.");    }  }}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  public static Validator<CharSequence> letter(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  return new LetterValidator(context,resourceId,caseSensitivity,allowSpaces,allowedCharacters);}  }
class C{  public static double[][] margDepMatrix(Instances D,String op){  int L=D.classIndex();  int N=D.numInstances();  if (op.equals("C")) {    int C[][]=getApproxC(D);    double P[][]=getP(C,N);    return P;  }  if (op.equals("I")) {    return I(D,L);  }  if (op.equals("Ib")) {    int C[][]=getC(D);    double P[][]=getP(C,N);    return I(P);  }  if (op.equals("Ibf")) {    int C[][]=getApproxC(D);    double P[][]=getP(C,N);    return I(P);  }  if (op.equals("H")) {    int C[][]=getC(D);    return H(C,N);  }  if (op.equals("H")) {    int C[][]=getApproxC(D);    return H(C,N);  }  if (op.equals("X")) {    return chi2(D);  }  if (op.equals("F")) {    double F[][]=F(D);    return F;  }  System.err.println("No operation found; Using empty!");  return new double[L][L];}  }
class C{  protected int _offset(int absRank){  return offsets[absRank];}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.BASE_TYPE_REF__DYNAMIC:    setDynamic((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized long size() throws IOException {  initialize();  return size;}  }
class C{  @Override public void onGuiClosed(){  state=ServerFinderState.CANCELLED;  WurstClient.INSTANCE.analytics.trackEvent("server finder","cancel","gui closed",working);  if (MiscUtils.isInteger(maxThreadsBox.getText())) {    WurstClient.INSTANCE.options.serverFinderThreads=Integer.valueOf(maxThreadsBox.getText());    WurstClient.INSTANCE.files.saveOptions();  }  Keyboard.enableRepeatEvents(false);}  }
class C{  public Gau(){  super("gau",1);}  }
class C{  public PiecewiseLinearPopulation(Type units){  super(units);}  }
class C{  public MonitorTrainSpeed(TransitSectionAction tsa){  _tsa=tsa;}  }
class C{  public float distance(Vector3f v){  return FastMath.sqrt(distanceSquared(v));}  }
class C{  public static Intent fragmentArgumentsToIntent(Bundle arguments){  Intent intent=new Intent();  if (arguments == null) {    return intent;  }  final Uri data=arguments.getParcelable("_uri");  if (data != null) {    intent.setData(data);  }  intent.putExtras(arguments);  intent.removeExtra("_uri");  return intent;}  }
class C{  public static DataType fromClass(Class<?> clazz){  return CLASS_MAP.get(clazz);}  }
class C{  public void init(){}  }
class C{  protected void sequence_ScientificIntLiteral(ISerializationContext context,ScientificIntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getScientificIntLiteralAccess().getValueSCIENTIFIC_INTTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  private void insertBadgeAsync(int badgeCount,String packageName,String activityName){  final ContentValues contentValues=new ContentValues();  contentValues.put(PROVIDER_COLUMNS_BADGE_COUNT,badgeCount);  contentValues.put(PROVIDER_COLUMNS_PACKAGE_NAME,packageName);  contentValues.put(PROVIDER_COLUMNS_ACTIVITY_NAME,activityName);  mQueryHandler.startInsert(0,null,BADGE_CONTENT_URI,contentValues);}  }
class C{  public boolean add(String subtype){  if (subtype == null || this.contains(subtype)) {    return false;  }  _entrySet.add(new SubTypeEntry(subtype));  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.709 -0500",hash_original_method="8BE7213CC6A7767AC7788E8FF7C56936",hash_generated_method="FD56D70A7777268231EA506342543753") public static int hashIntArray(int[] array){  int intHash=0;  for (int i=0; i < array.length && i < 4; i++) {    intHash+=array[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  private static void saveNonNativeGraph(final Window parent,final CGraphModel model){  final CSaveProgress progress=CGraphSaver.save(parent,model.getGraph());  while (!progress.isDone()) {    try {      Thread.sleep(100);    } catch (    final InterruptedException e) {      java.lang.Thread.currentThread().interrupt();    }  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  final short findFirstTerminal(int state){  int offset=actn_offsets[state];  for (short term_id=offset < 0 ? (short)-offset : 0; term_id < n_term; term_id++) {    int index=offset + term_id;    if (index >= lookaheads.length)     break;    if (lookaheads[index] == term_id)     return term_id;  }  return -1;}  }
class C{  public boolean isZone2ZoneImpedance(){  return zone2ZoneImpedance;}  }
class C{  public final CharSequence coerceToString(){  int t=type;  if (t == TYPE_STRING) {    return string;  }  return coerceToString(t,data);}  }
class C{  public static void lockOrientationPortrait(Activity activity){  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);}  }
class C{  public ComplexPrimitivePropertyType createComplexPrimitivePropertyType(){  ComplexPrimitivePropertyTypeImpl complexPrimitivePropertyType=new ComplexPrimitivePropertyTypeImpl();  return complexPrimitivePropertyType;}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  XYPlot subplot=findSubplot(info,source);  if (subplot != null) {    subplot.zoomDomainAxes(factor,info,source,useAnchor);  } else {    Iterator iterator=getSubplots().iterator();    while (iterator.hasNext()) {      subplot=(XYPlot)iterator.next();      subplot.zoomDomainAxes(factor,info,source,useAnchor);    }  }}  }
class C{  public boolean hasOption(char opt){  return hasOption(String.valueOf(opt));}  }
class C{  public ShapeNode(){}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public boolean isAutoIncrement(){  return autoIncr;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementinvalidcharacterexception.class,args);}  }
class C{  protected void onTitleLeftIconClick(View leftIcon){  onBackPressed();}  }
class C{  long add(Term term,DeleteSlice slice){  final TermNode termNode=new TermNode(term);  long seqNo=add(termNode);  slice.sliceTail=termNode;  assert slice.sliceHead != slice.sliceTail : "slice head and tail must differ after add";  tryApplyGlobalSlice();  return seqNo;}  }
class C{  public static void hideKeyboard(Activity activity){  InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(activity.getWindow().getDecorView().getWindowToken(),0);}  }
class C{  public boolean isRecoverable(){  AkCollator collator=column.getCollator();  if (collator == null)   return true; else   return collator.isRecoverable();}  }
class C{  @Override public boolean execute(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String toPropertyString(DataSource data){  Properties properties=toProperties(data);  return PropertyUtils.joinOnPipe(PropertyUtils.toMap(properties));}  }
class C{  public String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  Exception e) {    line=null;  }  return line;}  }
class C{  public boolean supportsSAX(){  return true;}  }
class C{  public static void write(XmlJmapper jmapper,String xmlPath) throws IOException {  XStream xstream=new XStream();  xstream.processAnnotations(XmlJmapper.class);  writeFile(new File(xmlPath),list(xstream.toXML(jmapper)));}  }
class C{  @Override public String toString(){  return holder.toString();}  }
class C{  public ClusterRestRep create(URI tenantId,ClusterCreateParam input){  return client.post(ClusterRestRep.class,input,PathConstants.CLUSTER_BY_TENANT_URL,tenantId);}  }
class C{  @Override public Object clone(){  Object clone=null;  try {    clone=super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return clone;}  }
class C{  public void testDataSource() throws Exception {  NameParser nameParser=this.ctx.getNameParser("");  Name datasourceName=nameParser.parse("_test");  Object obj=this.ctx.lookup(datasourceName);  DataSource boundDs=null;  if (obj instanceof DataSource) {    boundDs=(DataSource)obj;  } else   if (obj instanceof Reference) {    Reference objAsRef=(Reference)obj;    ObjectFactory factory=(ObjectFactory)Class.forName(objAsRef.getFactoryClassName()).newInstance();    boundDs=(DataSource)factory.getObjectInstance(objAsRef,datasourceName,this.ctx,new Hashtable<Object,Object>());  }  assertTrue("Datasource not bound",boundDs != null);  Connection con=boundDs.getConnection();  con.close();  assertTrue("Connection can not be obtained from data source",con != null);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  static int computeBaseBufferItems(int k,long n){  return (int)(n % (2L * k));}  }
class C{  public RejectMessage(NetworkParameters params,RejectCode code,Sha256Hash hash,String message,String reason) throws ProtocolException {  super(params);  this.code=code;  this.messageHash=hash;  this.message=message;  this.reason=reason;}  }
class C{  public boolean canBeShortAddress(int address){  return ((address >= 1) && (address <= 127));}  }
class C{  @Override public void close() throws IOException {  Throwable thrown=null;  try {    flush();  } catch (  Throwable e) {    thrown=e;  }  try {    out.close();  } catch (  Throwable e) {    if (thrown == null) {      thrown=e;    }  }  if (thrown != null) {    SneakyThrow.sneakyThrow(thrown);  }}  }
class C{  public void shutdownNow(){}  }
class C{  public void updateSourceText(Dim.SourceInfo sourceInfo){  RunProxy proxy=new RunProxy(this,RunProxy.UPDATE_SOURCE_TEXT);  proxy.sourceInfo=sourceInfo;  SwingUtilities.invokeLater(proxy);}  }
class C{  public void alignTop(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignTopAction(nodes));  }  int nMinY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY < nMinY || iNode == 0) {      nMinY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,nMinY);  }}  }
class C{  public int icon(){  return mIcon;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new FinnishAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public static boolean isNull(URI id){  return (id == null) || NULL_URI.equals(id);}  }
class C{  private void deactivateLearningNode(ActiveLearningNode toDeactivate,SplitNode parent,int parentBranch){  Node newLeaf=new InactiveLearningNode(toDeactivate.getObservedClassDistribution());  if (parent == null) {    this.treeRoot=newLeaf;  } else {    parent.setChild(parentBranch,newLeaf);  }  this.activeLeafNodeCount--;  this.inactiveLeafNodeCount++;}  }
class C{  public void polynomialMutate(EvolutionState state,MersenneTwisterFast random,float eta_m,boolean alternativePolynomialVersion,boolean mutationIsBounded){  FloatVectorSpecies s=(FloatVectorSpecies)species;  float[] ind=genome;  double rnd, delta1, delta2, mut_pow, deltaq;  double y, yl, yu, val, xy;  double y1;  for (int j=0; j < ind.length; j++) {    if (random.nextBoolean(s.mutationProbability[j])) {      y1=y=ind[j];      yl=s.minGene(j);      yu=s.maxGene(j);      delta1=(y - yl) / (yu - yl);      delta2=(yu - y) / (yu - yl);      int totalTries=s.outOfBoundsRetries;      int tries=0;      for (tries=0; tries < totalTries || totalTries == 0; tries++) {        rnd=(random.nextFloat());        mut_pow=1.0 / (eta_m + 1.0);        if (rnd <= 0.5) {          xy=1.0 - delta1;          val=2.0 * rnd + (alternativePolynomialVersion ? (1.0 - 2.0 * rnd) * (Math.pow(xy,(eta_m + 1.0))) : 0.0);          deltaq=Math.pow(val,mut_pow) - 1.0;        } else {          xy=1.0 - delta2;          val=2.0 * (1.0 - rnd) + (alternativePolynomialVersion ? 2.0 * (rnd - 0.5) * (Math.pow(xy,(eta_m + 1.0))) : 0.0);          deltaq=1.0 - (Math.pow(val,mut_pow));        }        y1=y + deltaq * (yu - yl);        if (!mutationIsBounded || (y1 >= yl && y1 <= yu))         break;      }      if (totalTries != 0 && tries == totalTries) {        y1=(float)(s.minGene(j) + random.nextFloat(true,true) * (s.maxGene(j) - s.minGene(j)));        s.outOfRangeRetryLimitReached(state);      }      ind[j]=(float)y1;    }  }}  }
class C{  public static void error(File file,ErrorMessages message,int line,int column){  String msg=NL + "Error";  if (file != null)   msg+=" in file \"" + file + "\"";  if (line >= 0)   msg=msg + " (line " + (line + 1)+ ")";  try {    err(msg + ": " + NL+ ErrorMessages.get(message));  } catch (  ArrayIndexOutOfBoundsException e) {    err(msg);  }  errors++;  if (line >= 0) {    if (column >= 0)     showPosition(file,line,column); else     showPosition(file,line);  }}  }
class C{  public static void runOnUIThread(final Shell shell,final boolean asynch,final Runnable runnable){  if (!shell.isDisposed()) {    runOnUIThread(shell.getDisplay(),asynch,runnable);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.479 -0400",hash_original_method="B6499AFB25874554EAD148116227F41C",hash_generated_method="70CFCC7000B115D8A6B14D0538991BA0") public void testConnectA2dp(){  int iterations=BluetoothTestRunner.sConnectA2dpIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.A2DP,null);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectA2dp iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectProfile(adapter,device,BluetoothProfile.A2DP,String.format("connectA2dp(device=%s)",device));    mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.A2DP,String.format("disconnectA2dp(device=%s)",device));  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  public boolean offer(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.offer(e);    if (q.peek() == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public int nextBCI(){  return nextBCI;}  }
class C{  public void initialize(Errors errors){  injector.lookups=injector;  new LookupProcessor(errors).process(injector,lookups);}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0) {    uri="http://" + uri;  } else   if (isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  public void replaceFavicon(Bitmap favicon,int fundamentalColor){  init(favicon,fundamentalColor);  requestLayout();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.139 -0500",hash_original_method="182DC7E21BB3FA85F9FDDA653B5E53EC",hash_generated_method="3147F376099BBEB2B4A0E4028F1A2E2F") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public boolean containsValue(Object value){  return super.containsValue(value);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distQuery,minpts);  RangeQuery<O> rangeQuery=database.getRangeQuery(distQuery);  DBIDs ids=relation.getDBIDs();  WritableDataStore<KNNList> nMinPts=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,KNNList.class);  WritableDoubleDataStore coreDistance=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  WritableIntegerDataStore minPtsNeighborhoodSize=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,-1);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    KNNList minptsNeighbours=knnQuery.getKNNForDBID(iditer,minpts);    double d=minptsNeighbours.getKNNDistance();    nMinPts.put(iditer,minptsNeighbours);    coreDistance.putDouble(iditer,d);    minPtsNeighborhoodSize.put(iditer,rangeQuery.getRangeForDBID(iditer,d).size());  }  WritableDataStore<List<Double>> reachDistance=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,List.class);  WritableDoubleDataStore lrds=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    List<Double> core=new ArrayList<>();    double lrd=0;    for (DoubleDBIDListIter neighbor=nMinPts.get(iditer).iter(); neighbor.valid(); neighbor.advance()) {      double coreDist=coreDistance.doubleValue(neighbor);      double dist=distQuery.distance(iditer,neighbor);      double rd=MathUtil.max(coreDist,dist);      lrd=rd + lrd;      core.add(rd);    }    lrd=minPtsNeighborhoodSize.intValue(iditer) / lrd;    reachDistance.put(iditer,core);    lrds.putDouble(iditer,lrd);  }  DoubleMinMax ofminmax=new DoubleMinMax();  WritableDoubleDataStore ofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double of=0;    for (DBIDIter neighbor=nMinPts.get(iditer).iter(); neighbor.valid(); neighbor.advance()) {      double lrd=lrds.doubleValue(iditer);      double lrdN=lrds.doubleValue(neighbor);      of=of + lrdN / lrd;    }    of=of / minPtsNeighborhoodSize.intValue(iditer);    ofs.putDouble(iditer,of);    ofminmax.put(of);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("OPTICS Outlier Scores","optics-outlier",ofs,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(ofminmax.getMin(),ofminmax.getMax(),0.0,Double.POSITIVE_INFINITY,1.0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public final void update(byte[] input) throws IllegalStateException {  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  if (input != null) {    spi.engineUpdate(input,0,input.length);  }}  }
class C{  protected DateLongType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public static void main(String[] args){  int[] array=new int[10];  System.out.print("Enter ten integers: ");  fill(array);  for (int i=array.length - 1; i >= 0; i--)   System.out.print(array[i] + " ");  System.out.println();}  }
class C{  private ParsedTestInfo parseTestIdentifier(String identifier){  ParsedTestInfo returnInfo=new ParsedTestInfo("UNKNOWN_CLASS","UNKNOWN_TEST",null);  Pattern timePattern=Pattern.compile(".*(\\((\\d+) ms\\))");  Matcher time=timePattern.matcher(identifier);  if (time.find()) {    String timeString=time.group(2);    String discardPortion=time.group(1);    identifier=identifier.substring(0,identifier.lastIndexOf(discardPortion)).trim();    returnInfo.mTestRunTime=timeString;  }  String[] testId=identifier.split("\\.");  if (testId.length < 2) {    Log.e(LOG_TAG,"Could not detect the test class and test name, received: " + identifier);  } else {    returnInfo.mTestClassName=testId[0];    returnInfo.mTestName=testId[1];  }  return returnInfo;}  }
class C{  public WritePrefReadWriteLockManager(boolean trackLocks){  super(trackLocks);}  }
class C{  public static void unTar(final InputStream in,final String untarDir) throws Exception {  ConcurrentLog.info("UNTAR","starting");  if (new File(untarDir).exists()) {    final TarArchiveInputStream tin=new TarArchiveInputStream(in);    TarArchiveEntry tarEntry=tin.getNextTarEntry();    while (tarEntry != null) {      final File destPath=new File(untarDir + File.separator + tarEntry.getName());      if (!tarEntry.isDirectory()) {        new File(destPath.getParent()).mkdirs();        final FileOutputStream fout=new FileOutputStream(destPath);        IOUtils.copyLarge(tin,fout,0,tarEntry.getSize());        fout.close();      } else {        destPath.mkdir();      }      tarEntry=tin.getNextTarEntry();    }    tin.close();  } else {    ConcurrentLog.warn("UNTAR","destination " + untarDir + " doesn't exist.");  }  ConcurrentLog.info("UNTAR","finished");}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  protected String doIt() throws Exception {  AD_PInstance_ID=getAD_PInstance_ID();  final MProduct product=MProduct.get(getCtx(),p_M_Product_ID);  if (!product.isVerified())   throw new AdempiereException("Product BOM Configuration not verified. Please verify the product first - " + product.getValue());  try {    loadBOM();    print();  } catch (  Exception e) {    log.log(Level.SEVERE,"PrintBOM",e.toString());    throw new Exception(e.getLocalizedMessage());  } finally {    String sql="DELETE FROM T_BomLine WHERE AD_PInstance_ID = " + AD_PInstance_ID;    DB.executeUpdateEx(sql,get_TrxName());  }  return "@OK@";}  }
class C{  public FastIntBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public static boolean isAnnotationPresent(final Field field,final Class<? extends Annotation> annotationType){  return field != null && field.isAnnotationPresent(annotationType);}  }
class C{  public static String deviceResolution(Context c){  DisplayMetrics metrics=c.getResources().getDisplayMetrics();  return String.valueOf(metrics.widthPixels) + "x" + metrics.heightPixels;}  }
class C{  public Status start(){  LOGGER.info("Starting driver");  Status status=driver.start();  LOGGER.info("Driver started with status: {}",status);  return status;}  }
class C{  @Override public void onWebsocketMessageFragment(WebSocket conn,Framedata frame){}  }
class C{  public boolean isRandom(){  return (m_clustertype == SubspaceCluster.UNIFORM_RANDOM);}  }
class C{  public static void addListener(IgnitionListener lsnr){  A.notNull(lsnr,"lsnr");  lsnrs.add(lsnr);}  }
class C{  public boolean isErrorEnabled(){  return isLoggable(Log.ERROR);}  }
class C{  public static String clrscr(){  return ESC + "[2J";}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof ExtensionProperty)) {    return false;  }  ExtensionProperty o=(ExtensionProperty)other;  return equal(extension,o.extension) && equal(qualname,o.qualname);}  }
class C{  public boolean isPdt(DateTime now){  return TldState.PDT.equals(tldStateTransitions.getValueAtTime(now));}  }
class C{  public synchronized void addToState(Assignment assign){  for (  String var : assign.getVariables()) {    addToState(new SingleValueDistribution(var,assign.getValue(var)));  }}  }
class C{  public void addAll(BitSet B){  if (VM.VerifyAssertions) {    VM._assert(map == B.map);  }  vector.or(B.vector);}  }
class C{  private static void download(String appName,String homeVariable,String downloadPath,String destName) throws Exception {  String homeVal=IgniteSystemProperties.getString(homeVariable);  if (!F.isEmpty(homeVal) && new File(homeVal).isDirectory()) {    X.println(homeVariable + " is set to: " + homeVal);    return;  }  List<String> urls=F.asList("http://archive.apache.org/dist/","http://apache-mirror.rbc.ru/pub/apache/","http://www.eu.apache.org/dist/","http://www.us.apache.org/dist/");  String tmpPath=System.getProperty("java.io.tmpdir");  X.println("tmp: " + tmpPath);  final File install=new File(tmpPath + File.separatorChar + "__hadoop");  final File home=new File(install,destName);  X.println("Setting " + homeVariable + " to "+ home.getAbsolutePath());  System.setProperty(homeVariable,home.getAbsolutePath());  final File successFile=new File(home,"__success");  if (home.exists()) {    if (successFile.exists()) {      X.println(appName + " distribution already exists.");      return;    }    X.println(appName + " distribution is invalid and it will be deleted.");    if (!U.delete(home))     throw new IOException("Failed to delete directory: " + home.getAbsolutePath());  }  for (  String url : urls) {    if (!(install.exists() || install.mkdirs()))     throw new IOException("Failed to create directory: " + install.getAbsolutePath());    URL u=new URL(url + downloadPath);    X.println("Attempting to download from: " + u);    try {      URLConnection c=u.openConnection();      c.connect();      try (TarArchiveInputStream in=new TarArchiveInputStream(new GzipCompressorInputStream(new BufferedInputStream(c.getInputStream(),32 * 1024)))){        TarArchiveEntry entry;        while ((entry=in.getNextTarEntry()) != null) {          File dest=new File(install,entry.getName());          if (entry.isDirectory()) {            if (!dest.mkdirs())             throw new IllegalStateException();          } else           if (entry.isSymbolicLink()) {            Path theLinkItself=Paths.get(install.getAbsolutePath(),entry.getName());            Path linkTarget=Paths.get(entry.getLinkName());            Files.createSymbolicLink(theLinkItself,linkTarget);          } else {            File parent=dest.getParentFile();            if (!(parent.exists() || parent.mkdirs()))             throw new IllegalStateException();            X.print(" [" + dest);            try (BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(dest,false),128 * 1024)){              U.copy(in,out);              out.flush();            }             Files.setPosixFilePermissions(dest.toPath(),modeToPermissionSet(entry.getMode()));            X.println("]");          }        }      }       if (successFile.createNewFile())       return;    } catch (    Exception e) {      e.printStackTrace();      U.delete(home);    }  }  throw new IllegalStateException("Failed to install " + appName + ".");}  }
class C{  @Override public int sumAdjacent(Quadrant quad1,Quadrant quad2,int size){  return size;}  }
class C{  public ReplicationInfo modifyShadowImagePair(String replicationGroupId,String replicationInfoId,ShadowImageOperationType operationType,String model) throws Exception {  InputStream responseStream=null;  ReplicationInfo replicationInfo=null;  try {    if (replicationGroupId != null && replicationInfoId != null) {      Map<String,Object> attributeMap=new HashMap<String,Object>();      Modify modifyOp=new Modify();      modifyOp.setTarget(HDSConstants.REPLICATION);      modifyOp.setOption(operationType.name());      ReplicationGroup replicationGroup=new ReplicationGroup();      replicationGroup.setObjectID(replicationGroupId);      replicationInfo=new ReplicationInfo();      replicationInfo.setObjectID(replicationInfoId);      attributeMap.put(HDSConstants.MODIFY,modifyOp);      attributeMap.put(HDSConstants.MODEL,model);      attributeMap.put(HDSConstants.REPLICATION_GROUP,replicationGroup);      attributeMap.put(HDSConstants.REPLICATION_INFO,replicationInfo);      String modifyPairQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.MODIFY_SHADOW_IMAGE_PAIR_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);      log.info("Query to {} shadow image pair  Query: {}",operationType.name(),modifyPairQuery);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,modifyPairQuery);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HITACHI_SMOOKS_REPLICATION_CONFIG_FILE);        verifyErrorPayload(javaResult);        log.info("Successfully {}ed pair",operationType.name());        replicationInfo=javaResult.getBean(ReplicationInfo.class);        log.info("replicationInfo :{}",replicationInfo);      } else {        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to modify replication info due to invalid response %1$s from server",response.getStatus()));      }    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return replicationInfo;}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public static boolean greater(double x,double y){  return value(x - y) > 0;}  }
class C{  public JsonMapper(){  this(createDefaultGson(true,false),createDefaultGson(false,false),createDefaultGson(true,true),createDefaultGson(false,true));}  }
class C{  private void repositionCursor(int startLiteralCount,int end,int direction){  int endLiteralCount=getLiteralCountTo(end);  if (endLiteralCount != end) {    end-=startLiteralCount;    for (int counter=0; counter < end; counter++) {      if (isLiteral(counter)) {        end++;      }    }  }  repositionCursor(end,1);}  }
class C{  public void mouseUp(){  TestLogging.log("MouseUp " + this.toString());  findElement();  Mouse mouse=((HasInputDevices)driver).getMouse();  mouse.mouseUp(null);}  }
class C{  public static void square(double x,double y,double halfLength){  if (!(halfLength >= 0))   throw new IllegalArgumentException("half length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfLength);  double hs=factorY(2 * halfLength);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static double cosQuick(final double angle){  if (USE_JDK_MATH) {    return Math.cos(angle);  }  return MyTSinCos.cosTab[(int)(Math.abs(angle) * SIN_COS_INDEXER + 0.5) & SIN_COS_TABS_SIZE - 2];}  }
class C{  public static void send(InternalDistributedMember recipient,PartitionedRegion r,Object callbackArg){  DM dm=r.getDistributionManager();  ReplyProcessor21 rp=new ReplyProcessor21(dm,recipient);  int procId=rp.getProcessorId();  DestroyRegionOnDataStoreMessage m=new DestroyRegionOnDataStoreMessage(recipient,r.getPRId(),rp,callbackArg);  r.getDistributionManager().putOutgoing(m);  rp.waitForRepliesUninterruptibly();}  }
class C{  public String format(){  if (getNumDataElements() == 8) {    String result="(2-part) ";    result+=staticFormat(getElement(0) & 0xff,getElement(1) & 0xff,getElement(2) & 0xff,getElement(3) & 0xff);    result+="; ";    result+=staticFormat(getElement(4) & 0xff,getElement(5) & 0xff,getElement(6) & 0xff,getElement(7) & 0xff);    return result;  } else {    return staticFormat(getElement(0) & 0xff,getElement(1) & 0xff,getElement(2) & 0xff,getElement(3) & 0xff);  }}  }
class C{  private String generateSystemInfoMessage(){  final StringBuilder systemInfo=new StringBuilder("## System Info:\n\nProperty Name | Property\n ----- | -----\nGRIP Version | ");  systemInfo.append(edu.wpi.grip.core.Main.class.getPackage().getImplementationVersion()).append('\n');  for (  String option : systemProperties) {    systemInfo.append(option).append(" | ").append(System.getProperty(option)).append('\n');  }  return systemInfo.append("\n").toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:12.367 -0500",hash_original_method="2F37015D01FE06195FB00430A764BE1B",hash_generated_method="859BCCE0A1E0BEBBC583BBAFD3E0D0CC") public ColorDrawable(int color){  this(null);  setColor(color);}  }
class C{  public static Boolean canStringBeInlineEncoded(String skey){  if (skey.length() > getMaxInlineStringKey(MAX_LONGS_USED_FOR_STRING_KEY,true)) {    return null;  }  if (isByteEncodingOk(skey)) {    return Boolean.TRUE;  } else {    if (skey.length() > getMaxInlineStringKey(MAX_LONGS_USED_FOR_STRING_KEY,false)) {      return null;    } else {      return Boolean.FALSE;    }  }}  }
class C{  public double theoryDL(int index){  double k=m_Ruleset.get(index).size();  if (k == 0) {    return 0.0;  }  double tdl=Utils.log2(k);  if (k > 1) {    tdl+=2.0 * Utils.log2(tdl);  }  tdl+=subsetDL(m_Total,k,k / m_Total);  return MDL_THEORY_WEIGHT * REDUNDANCY_FACTOR * tdl;}  }
class C{  public void snapshot() throws IOException {  fileCount=0;  failedCount=0;  final boolean wasLogging=enableLogging(false);  try {    Iterator iter=listInputFiles(sourceDir);    while (iter.hasNext()) {      File file=(File)iter.next();      saveBoxModel(file,outputDir,width);      saveImage(file,outputDir,width);    }  }  finally {    enableLogging(wasLogging);  }}  }
class C{  LogEntry(char lvl,String tag,String threadName,String msg,Throwable tr){  this.now=System.currentTimeMillis();  this.level=lvl;  this.tag=tag;  this.threadName=threadName;  this.msg=msg;  this.cause=tr;}  }
class C{  public DragForce(){  this(DEFAULT_DRAG_COEFF);}  }
class C{  public void insertLocalVar(int where,int size) throws BadBytecode {  CodeIterator ci=iterator();  while (ci.hasNext())   shiftIndex(ci,where,size);  setMaxLocals(getMaxLocals() + size);}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  public static char nextChar(){synchronized (random) {    return random.nextChar();  }}  }
class C{  private static void putOutTheGarbage(){  collectGarbage();  collectGarbage();}  }
class C{  public PivotItem(RegularTimePeriod period,BigDecimal pivotPrice,String pivotSide){  super(period,new Pivot(pivotPrice,pivotSide));}  }
class C{  @Override @SuppressWarnings("fallthrough") public void run(){  int chr;  try {    while ((chr=rdr.read()) >= 0) {switch (chr) {case 13:case 32:        break;case '>':      message+=(char)chr;case 10:    if (messageHandler != null)     messageHandler.handleTelegram(message.toCharArray());  message="";break;default :message+=(char)chr;}}} catch (Exception ex) {ex.printStackTrace();}}  }
class C{  public void resetLengthForReceive(){  this.length=userSuppliedLength;}  }
class C{  private boolean isAllRead(){  return _len >= 0 && _pos >= _len;}  }
class C{  public static void adjustColumnWidth(TableModel model,int columnIndex,int maxWidth,int rightPadding,JTable table){  if (columnIndex > model.getColumnCount() - 1) {    return;  }  if (!model.getColumnClass(columnIndex).equals(String.class)) {    return;  }  String longestValue="";  for (int row=0; row < model.getRowCount(); row++) {    String strValue=(String)model.getValueAt(row,columnIndex);    if (strValue != null && strValue.length() > longestValue.length()) {      longestValue=strValue;    }  }  Graphics g=table.getGraphics();  try {    int suggestedWidth=(int)g.getFontMetrics(table.getFont()).getStringBounds(longestValue,g).getWidth();    table.getColumnModel().getColumn(columnIndex).setPreferredWidth(((suggestedWidth > maxWidth) ? maxWidth : suggestedWidth) + rightPadding);  } catch (  Exception e) {    table.getColumnModel().getColumn(columnIndex).setPreferredWidth(maxWidth);    e.printStackTrace();  }}  }
class C{  public CActionGraphPrint(final JFrame parent,final ZyGraph graph){  super("Print View");  m_parent=Preconditions.checkNotNull(parent,"IE02819: parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02820: graph argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_PRINT_HK.getKeyStroke());}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(this.getModifiers());}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void resetPalette(){  panel=null;  super.resetPalette();}  }
class C{  public static boolean isValid(String[] values){  try {    if (values[2].equalsIgnoreCase("randompositive") || values[2].equalsIgnoreCase("randomnegative") && NumberUtils.isDigits(values[3])) {      return true;    }    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  protected void finalize() throws Throwable {  this.reader=null;  super.finalize();}  }
class C{  void resize(int newCapacity){  IntEntry[] oldTable=table;  int oldCapacity=oldTable.length;  if (size < threshold || oldCapacity > newCapacity)   return;  IntEntry<VALUE>[] newTable=new IntEntry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
class C{  private void closeDialog(){  m_table.removeMouseListener(m_listener);  setVisible(false);  dispose();}  }
class C{  @Override public void activate(){  super.activate();  getViewer().getEditDomain().getCommandStack().addCommandStackListener(stackListener);}  }
class C{  private void mutate(int[] individual){  double prob=1.0d / individual.length;  for (int i=0; i < individual.length; i++) {    if (random.nextDouble() < prob) {      individual[i]=random.nextIntInRange(0,2);    }  }}  }
class C{  private File prepareTestDir(String name) throws Exception {  File testDir=new File(name);  if (testDir.exists()) {    for (    File child : testDir.listFiles()) {      child.delete();    }    testDir.delete();  }  if (testDir.exists())   throw new Exception("Unable to clear test dir: " + testDir.getAbsolutePath());  testDir.mkdirs();  return testDir;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isUsingDomainGrouping(){  return useDomainGrouping;}  }
class C{  public String toString(){  return getClass().getName() + "[id=\"" + getID()+ "\""+ ",offset="+ getLastRawOffset()+ ",dstSavings="+ dstSavings+ ",useDaylight="+ useDaylightTime()+ ",transitions="+ ((transitions != null) ? transitions.length : 0)+ ",lastRule="+ (lastRule == null ? getLastRuleInstance() : lastRule)+ "]";}  }
class C{  public boolean isInvalid(){  return invalid;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setDscalerPlugin(getString(stack));  return null;}  }
class C{  public Analyzer(ThreadDumpInfo tdi){  this.tdi=tdi;}  }
class C{  public long extract(long val){  return (val >> position) & mask();}  }
class C{  public String toString(){  if (keyCode == KeyEvent.VK_UNDEFINED) {    return getModifiersText(modifiers) + "typed " + keyChar;  } else {    return getModifiersText(modifiers) + (onKeyRelease ? "released" : "pressed") + " "+ getVKText(keyCode);  }}  }
class C{  public static String generateTimecodeStartAddress(){  String delimiter=":";  String timeCodeStartAddress="00:00:00:00";  if (timeCodeStartAddress.matches("[0-2][0-9](:|/|;|,|\\.|\\+|\\-)[0-5][0-9](:|/|;|,|\\.|\\+|\\-)[0-5][0-9](:|/|;|,|\\.|\\+|\\-)[0-5][0-9]")) {    return timeCodeStartAddress;  } else {    throw new IMFException(String.format("Could not generate a valid TimecodeStartAddress based on input " + "received"));  }}  }
class C{  public void begin(Attributes attributes) throws Exception {  UIComponent uic=(UIComponent)digester.peek();  AttributesImpl attrs=new AttributesImpl(attributes);  for (int i=0; i < attrs.getLength(); i++) {    String qName=attributes.getQName(i);    attrs.setLocalName(i,qName);    attrs.setValue(i,attributes.getValue(qName));  }  bc.handleNestedComponentTag(uic,"SelectOne_Option",attrs);}  }
class C{  public static boolean isUrlUsable(String url){  if (CommonUtils.isEmpty(url)) {    return false;  }  URL urlTemp=null;  HttpURLConnection connt=null;  try {    urlTemp=new URL(url);    connt=(HttpURLConnection)urlTemp.openConnection();    connt.setRequestMethod("HEAD");    int returnCode=connt.getResponseCode();    if (returnCode == HttpURLConnection.HTTP_OK) {      return true;    }  } catch (  Exception e) {    return false;  } finally {    connt.disconnect();  }  return false;}  }
class C{  public static void waitForJavaDebugger(){  waitForJavaDebugger(null);}  }
class C{  private static <T>void siftDownComparable(int k,T x,Object[] array,int n){  if (n > 0) {    Comparable<? super T> key=(Comparable<? super T>)x;    int half=n >>> 1;    while (k < half) {      int child=(k << 1) + 1;      Object c=array[child];      int right=child + 1;      if (right < n && ((Comparable<? super T>)c).compareTo((T)array[right]) > 0)       c=array[child=right];      if (key.compareTo((T)c) <= 0)       break;      array[k]=c;      k=child;    }    array[k]=key;  }}  }
class C{  public boolean contains(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException(); else   return nodes[i] != null;}  }
class C{  public void addAttribute(String attr,String value){  findAttributeValues(attr).add(value);}  }
class C{  public void add(DurationFieldType type,int amount){  if (type == null) {    throw new IllegalArgumentException("Field must not be null");  }  setMillis(type.getField(getChronology()).add(getMillis(),amount));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  int idx=getInt(stack);  Show s=getShow(stack);  if (s == null)   return null;  String imgUrl=s.getImageUrlForIndex(idx,thumb);  return (imgUrl == null) ? null : imgUrl;}  }
class C{  protected static boolean shouldRunNetworkTask(final String tag,final Context context){  boolean notificationsEnabled=PreferenceManager.getDefaultSharedPreferences(context).getBoolean(DEFAULT_PREF_NOTIFICATIONS_ENABLED,true);  if (!notificationsEnabled) {    Log.v(tag,"Notifications disabled");    return false;  }  SteamGiftsUserData userData=SteamGiftsUserData.getCurrent(context);  if (!userData.isLoggedIn()) {    Log.v(tag,"Not checking for remote data, no session info available");    return false;  }  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=cm.getActiveNetworkInfo();  if (activeNetworkInfo == null || !activeNetworkInfo.isConnected() || activeNetworkInfo.getType() != ConnectivityManager.TYPE_WIFI) {    Log.v(tag,"Not checking for messages due to network info: " + activeNetworkInfo);    return false;  }  return true;}  }
class C{  public GenericDraweeHierarchyBuilder reset(){  init();  return this;}  }
class C{  public IntervalsPanel(){  setOpaque(false);  setMinimumSize(new Dimension(300,150));  setLayout(new BorderLayout());  add(chartPanel,BorderLayout.CENTER);}  }
class C{  private InferenceResult inferFromAssignment(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final InferenceResult inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){  ConstraintMap assignmentConstraints=createAssignmentConstraints(assignedTo,boxedReturnType,methodType,afArgumentConstraints,inferredArgs.toAtmMap(),targets,typeFactory);  InferenceResult equalitiesResult=equalitiesSolver.solveEqualities(targets,assignmentConstraints,typeFactory);  Set<TypeVariable> remainingTargets=equalitiesResult.getRemainingTargets(targets,true);  InferenceResult subtypesResult=subtypesSolver.solveFromSubtypes(remainingTargets,assignmentConstraints,typeFactory);  equalitiesResult.mergeSubordinate(subtypesResult);  return equalitiesResult;}  }
class C{  public boolean validate() throws CoreException {  return this.gradleProjectValidator.validate();}  }
class C{  static boolean debug(Configuration conf){  return conf.getBoolean(DEBUG_FLAG,false);}  }
class C{  private File sessionStore(String ctxPath){  String storeDir=System.getProperty("catalina.base");  if (storeDir == null || storeDir.isEmpty()) {    storeDir=System.getProperty("java.io.tmpdir");  } else {    storeDir+=System.getProperty("file.separator") + "temp";  }  File file=new File(storeDir,ctxPath.replaceAll("/","_") + ".sessions.ser");  return (file);}  }
class C{  public static String formatPath(String absWebappsPath,String contextDirName){  StringBuilder path=new StringBuilder(absWebappsPath.length() + contextDirName.length());  path.append(absWebappsPath);  if (log.isTraceEnabled()) {    log.trace("Path start: {}",path.toString());  }  int idx=-1;  if (File.separatorChar != '/') {    while ((idx=path.indexOf(File.separator)) != -1) {      path.deleteCharAt(idx);      path.insert(idx,'/');    }  }  if (log.isTraceEnabled()) {    log.trace("Path step 1: {}",path.toString());  }  if ((idx=path.indexOf("./")) != -1) {    path.delete(idx,idx + 2);  }  if (log.isTraceEnabled()) {    log.trace("Path step 2: {}",path.toString());  }  if (path.charAt(path.length() - 1) != '/') {    path.append('/');  }  if (log.isTraceEnabled()) {    log.trace("Path step 3: {}",path.toString());  }  if (contextDirName.charAt(0) == '/' && path.charAt(path.length() - 1) == '/') {    path.append(contextDirName.substring(1));  } else {    path.append(contextDirName);  }  if (log.isTraceEnabled()) {    log.trace("Path step 4: {}",path.toString());  }  return path.toString();}  }
class C{  private void createCheck(BasicBlock checkBB,BasicBlock noInstBB,BasicBlock instBB,boolean fallthroughToInstBB,IR ir){  appendLoad(checkBB,ir);  ConditionOperand cond=null;  BranchOperand target=null;  BranchProfileOperand profileOperand=null;  if (fallthroughToInstBB) {    cond=ConditionOperand.GREATER();    target=noInstBB.makeJumpTarget();    profileOperand=new BranchProfileOperand(1.0f);  } else {    cond=ConditionOperand.LESS_EQUAL();    target=instBB.makeJumpTarget();    profileOperand=new BranchProfileOperand(0.0f);  }  RegisterOperand guard=ir.regpool.makeTempValidation();  checkBB.appendInstruction(IfCmp.create(INT_IFCMP,guard,cbsReg.copyRO(),new IntConstantOperand(0),cond,target,profileOperand));  checkBB.recomputeNormalOut(ir);  prependStore(noInstBB,ir);  prependDecrement(noInstBB,ir);  prependCounterReset(instBB,ir);}  }
class C{  public double intercept(){  return alpha;}  }
class C{  public MaterialFilterParser(Element element) throws FilterException {  String blockProperty=element.getText();  if (blockProperty == null) {    throw new MissingFilterPropertyException("block",element);  }  try {    pattern=MaterialPattern.getSingleMaterialPattern(blockProperty);  } catch (  IllegalArgumentException e) {    throw new InvalidFilterPropertyException("block",element);  }}  }
class C{  Identifier resolveName(Environment env,Identifier name){  if (name.isQualified()) {    Identifier rhead=resolveName(env,name.getHead());    if (rhead.hasAmbigPrefix()) {      return rhead;    }    if (!env.classExists(rhead)) {      return env.resolvePackageQualifiedName(name);    }    try {      return env.getClassDefinition(rhead).resolveInnerClass(env,name.getTail());    } catch (    ClassNotFound ee) {      return Identifier.lookupInner(rhead,name.getTail());    }  }  try {    MemberDefinition f=getClassCommon(env,name,false);    if (f != null) {      return f.getInnerClass().getName();    }  } catch (  ClassNotFound ee) {  }  return env.resolveName(name);}  }
class C{  public boolean equals(Object other){  if (other == null || getClass() != other.getClass()) {    return false;  }  if (other == this) {    return true;  }  DefaultProperty dp=(DefaultProperty)other;  return compare(name,dp.name) && compare(displayName,dp.displayName) && compare(shortDescription,dp.shortDescription)&& compare(category,dp.category)&& compare(type,dp.type)&& editable == dp.editable;}  }
class C{  public static boolean isPrime(int number){  for (int divisor=2; divisor <= number / 2; divisor++) {    if (number % divisor == 0) {      return false;    }  }  return true;}  }
class C{  public boolean isLocalIpsecConfigSynced(){  final String prefix="isLocalIpsecConfigSynced(): ";  _log.debug(prefix);  final String[] cmd={_IPSECTOOL_CMD,IPSEC_CHECK_LOCAL};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  _log.debug(prefix + result);  return result.getExitValue() == 0;}  }
class C{  public boolean engineIsThreadSafe(){  return false;}  }
class C{  public int size(){  return _size;}  }
class C{  public ASN1InputStream(InputStream input,boolean lazyEvaluate){  this(input,StreamUtil.findLimit(input),lazyEvaluate);}  }
class C{  public byte[] toWire(int maxLength){  DNSOutput out=new DNSOutput();  toWire(out,maxLength);  size=out.current();  return out.toByteArray();}  }
class C{  public Parameter(String s) throws BadParameterException {  if (s == null)   throw new BadParameterException("Parameter created with null string");  param=s;}  }
class C{  public final void testCertPath(){  try {    CertPath cp1=new MyCertPath(testEncoding);    assertEquals("MyEncoding",cp1.getType());    assertTrue(Arrays.equals(testEncoding,cp1.getEncoded()));  } catch (  CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException " + e.getMessage());  }  try {    CertPath cp1=new MyCertPath(null);  } catch (  Exception e) {    fail("Unexpected exception " + e.getMessage());  }}  }
class C{  public void resolveAll(){  for (  Pair<MethodInfo,Integer> p : a) {    final int insn_idx=p.second.intValue();    final Instruction i=p.first.insns[insn_idx];    final Object[] params=(Object[])i.extra;    final MethodInfo mproto=(MethodInfo)params[0];    params[0]=mproto.myClass.findMethod(mproto);    if (params[0] == null) {      Log.debug("Cannot resolve method invocation, replace with HALT:" + mproto);      i.opcode=Instruction.OP_HALT;    }  }  resolved=true;}  }
class C{  protected boolean runAndReset(){  if (state != NEW || !UNSAFE.compareAndSwapObject(this,runnerOffset,null,Thread.currentThread()))   return false;  boolean ran=false;  int s=state;  try {    Callable<V> c=callable;    if (c != null && s == NEW) {      try {        c.call();        ran=true;      } catch (      Throwable ex) {        setException(ex);      }    }  }  finally {    runner=null;    s=state;    if (s >= INTERRUPTING)     handlePossibleCancellationInterrupt(s);  }  return ran && s == NEW;}  }
class C{  public final boolean canSetBoolean(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetBoolean());}  }
class C{  public static void uiImpl(){  UIManager.put("Table.scrollPaneBorder",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch5_table.TableScrollBorder()));  UIManager.put("Table.focusCellHighlightBorder",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch5_table.FocusCellHighlightBorder()));  UIManager.put("Table.focusCellHighlightBorderColor",new ColorUIResource(Color.white));  UIManager.put("Table.focusCellHighlightBorderHighlightColor",new ColorUIResource(new Color(255,255,255,70)));  UIManager.put("Table.background",new ColorUIResource(Color.white));  UIManager.put("Table.descendingSortIcon",__IconFactory__.getInstance().getTableDescendingSortIcon());  UIManager.put("Table.ascendingSortIcon",__IconFactory__.getInstance().getTableAscendingSortIcon());  UIManager.put("Table.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("Table.gridColor",new ColorUIResource(new Color(220,220,220)));  UIManager.put("Table.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("Table.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("TableUI",org.jb2011.lnf.beautyeye.ch5_table.BETableUI.class.getName());  UIManager.put("TableHeader.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("TableHeader.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  if (JVM.current().isOrLater(JVM.JDK1_6)) {    UIManager.put("TableHeaderUI","org.jb2011.lnf.beautyeye.ch5_table.BETableHeaderUI");    UIManager.put("TableHeader.cellMargin",new InsetsUIResource(7,0,7,0));  } else {    UIManager.put("TableHeader.cellBorder",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch5_table.__UI__.TableHeaderBorder()));    UIManager.put("TableHeaderUI",javax.swing.plaf.basic.BasicTableHeaderUI.class.getName());  }}  }
class C{  public void registerTopic(JetstreamTopic topic){  if (!m_registeredTopics.contains(topic))   m_registeredTopics.add(topic);  LOGGER.info("Register Topic :: " + topic.getTopicName());  Request registerReq=new WatchTopicRequest(this,m_zkhandle,topic);  if (!m_requestQueue.offer(registerReq))   LOGGER.warn("Request Queue is Full..");}  }
class C{  protected void positionCaret(MouseEvent e){  Point pt=new Point(e.getX(),e.getY());  Position.Bias[] biasRet=new Position.Bias[1];  int pos=component.getUI().viewToModel(component,pt,biasRet);  if (biasRet[0] == null)   biasRet[0]=Position.Bias.Forward;  if (pos >= 0) {    setDot(pos,biasRet[0]);  }}  }
class C{  public IndexRequest source(byte[] source,int offset,int length){  this.source=new BytesArray(source,offset,length);  return this;}  }
class C{  private <T>T doInvokeAny(Collection<? extends Callable<T>> tasks,boolean timed,long nanos) throws InterruptedException, ExecutionException, TimeoutException {  if (tasks == null)   throw new NullPointerException();  int ntasks=tasks.size();  if (ntasks == 0)   throw new IllegalArgumentException();  ArrayList<Future<T>> futures=new ArrayList<Future<T>>(ntasks);  ExecutorCompletionService<T> ecs=new ExecutorCompletionService<T>(this);  try {    ExecutionException ee=null;    final long deadline=timed ? System.nanoTime() + nanos : 0L;    Iterator<? extends Callable<T>> it=tasks.iterator();    futures.add(ecs.submit(it.next()));    --ntasks;    int active=1;    for (; ; ) {      Future<T> f=ecs.poll();      if (f == null) {        if (ntasks > 0) {          --ntasks;          futures.add(ecs.submit(it.next()));          ++active;        } else         if (active == 0)         break; else         if (timed) {          f=ecs.poll(nanos,TimeUnit.NANOSECONDS);          if (f == null)           throw new TimeoutException();          nanos=deadline - System.nanoTime();        } else         f=ecs.take();      }      if (f != null) {        --active;        try {          return f.get();        } catch (        ExecutionException eex) {          ee=eex;        }catch (        RuntimeException rex) {          ee=new ExecutionException(rex);        }      }    }    if (ee == null)     ee=new ExecutionException();    throw ee;  }  finally {    for (int i=0, size=futures.size(); i < size; i++)     futures.get(i).cancel(true);  }}  }
class C{  public void dispose(IoSession session) throws Exception {}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String formatTextBox(String text,int width,Pattern splitter,Set<String> singleRowers){  requireNonNulls(text,splitter);  requireNonNullElements(singleRowers);  final StringBuilder sb=new StringBuilder();  final AtomicInteger col=new AtomicInteger();  final List<String> words=splitter.splitAsStream(text).collect(toList());  for (  final String w : words) {    final int wordLen=w.length();    if (singleRowers.contains(w)) {      sb.append(NL);      sb.append(w);      sb.append(NL);      col.set(0);    } else {      if (col.get() + wordLen >= width) {        sb.append(NL);        col.set(0);      } else       if (col.get() > 0) {        sb.append(" ");        col.incrementAndGet();      }      sb.append(w);      col.getAndAdd(wordLen);    }  }  return sb.toString();}  }
class C{  public PartialHull(IPoint first,IPoint second){  points.add(first);  points.add(second);}  }
class C{  public void trace(Object message,Throwable t){}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFileExtractor.class.toString(),args);  String processedFolder=args[0];  int numberOfThreads=Integer.parseInt(args[1]);  String vehicleStatusFile=args[2];  List<File> inputFiles=GrainUtils.getVehicleFolders(processedFolder);  for (  File month : inputFiles) {    LOG.info("====> Processing month " + month.getAbsolutePath());    String outputFolder=month.getParentFile() + (month.getParentFile().getAbsolutePath().endsWith("/") ? "" : "/") + "xml/";    boolean created=new File(outputFolder).mkdirs();    if (!created) {      LOG.error("Could not create the output folder " + outputFolder);      LOG.error("====> Skipping the month.");    } else {      String[] sa={month.getAbsolutePath(),vehicleStatusFile,outputFolder,String.valueOf(numberOfThreads),String.valueOf(60 * 60 * 5),String.valueOf(60),"WGS84_SA_Albers"};      MyMultiThreadChainExtractor.main(sa);      LOG.info("====> Done processing month.");    }  }  Header.printFooter();}  }
class C{  public static StringBuilder append(final StringBuilder sb,final Calendar cal,int field){  return append(sb,cal,field,0);}  }
class C{  public int next(){  final int node=_currentNode;  _currentNode=NULL;  return returnNode(node);}  }
class C{  public Object run(final Reader in,final String fileName,List list) throws CompilationFailedException {  return run(in,fileName,(String[])list.toArray(new String[list.size()]));}  }
class C{  public void testSchemasAccepted() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDo("foo,ba?, foobar*");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,null,"create database foo");  verifyStmtAccept(filterHelper,1,null,"drop database bar");  verifyStmtAccept(filterHelper,2,null,"insert into foobar1.x1 values(1,2,3)");  verifyStmtAccept(filterHelper,3,null,"update test_tab set age=32 where id=1");  verifyStmtIgnore(filterHelper,4,null,"insert into test.tab values(52,1)");  filterHelper.done();}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.319 -0500",hash_original_method="44FE7083E78F583BB16CDAFA3EBE6F36",hash_generated_method="B3F0B9BDC6AF20544881CD9CD426063E") public boolean pingSupplicant(){  if (mService == null)   return false;  try {    return mService.pingSupplicant();  } catch (  RemoteException e) {    return false;  }}  }
class C{  public final int whichSubset(Instance instance){  return 0;}  }
class C{  private void startUp(boolean register) throws Exception {  this.register=register;  node1=startGrid(0);  cache1=node1.cache(CACHE_NAME);  cacheBinary1=cache1.withKeepBinary();  node2=startGrid(1);  cache2=node2.cache(CACHE_NAME);  cacheBinary2=cache2.withKeepBinary();}  }
class C{  @Override public String toString(){  StringBuilder toStringBuf=new StringBuilder();  toStringBuf.append(super.toString());  toStringBuf.append(" - Field level information: ");  for (int i=0; i < this.fields.length; i++) {    toStringBuf.append("\n\t");    toStringBuf.append(this.fields[i].toString());  }  return toStringBuf.toString();}  }
class C{  public static void evolve(RealVariable variable){  variable.setValue(PRNG.nextDouble(variable.getLowerBound(),variable.getUpperBound()));}  }
class C{  protected void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {    } else {      String id;      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_CashLine_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Cash_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fCash_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Invoice_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fInvoice_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Payment_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fPayment_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,"C_CashBook_ID");      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fCashBook_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BankAccount_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fBankAccount_ID.setValue(new Integer(id).intValue());      }      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Charge_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fCharge_ID.setValue(new Integer(id).intValue());      }    }  }  return;}  }
class C{  public static Class<?> loadClass(String name) throws ClassNotFoundException {switch (name) {case "int":    return int.class;case "short":  return short.class;case "char":return char.class;case "byte":return byte.class;case "long":return long.class;case "float":return float.class;case "double":return double.class;case "boolean":return boolean.class;}return Thread.currentThread().getContextClassLoader().loadClass(name);}  }
class C{  public void call(final String methodName,final Object[] params){  call(methodName,params,null);}  }
class C{  public void restoreNameSpace(){  this.namespace=this.oldNamespaces.pop();}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarDragWindowBorder(context,g,x,y,w,h);}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("GetSetLocalTarg");  println("startToMain(GetSetLocalTarg)");  List localVars=printAllVariables("GetSetLocalTarg","staticMeth");  targetClass=bpe.location().declaringType();  println("targetClass");  mainThread=bpe.thread();  println("mainThread");  EventRequestManager erm=vm().eventRequestManager();  println("EventRequestManager");  StackFrame frame=null;  for (int line=38; line < 118; line+=4) {    println("\n resumeTo(GetSetLocalTarg, " + line + ")");    bpe=resumeTo("GetSetLocalTarg",line);    frame=bpe.thread().frame(0);    printFrameVariables(frame);    checkSetFrameVariables(frame);  }  checkGetSetAllVariables(localVars,frame);  listenUntilVMDisconnect();  if (!testFailed) {    println("GetSetLocalTest: passed");  } else {    throw new Exception("GetSetLocalTest: failed");  }}  }
class C{  public BackButtonBuilder<T> backButton(){  if (!(parent instanceof SubInlineMenuBuilder)) {    throw new UnsupportedOperationException("Back buttons are only allowed for sub menus!");  }  return new BackButtonBuilder<>(this,buttons().size());}  }
class C{  protected void updateRemoteDomain() throws MessagingException {  setRemoteDomain(computeRemoteDomain());}  }
class C{  public boolean signRequired(){  return true;}  }
class C{  public SoundInfo(Sound sound){  this(sound,1F,1F);}  }
class C{  public static int compileShader(@ShaderType final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compilationStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compilationStatus,0);    if (compilationStatus[0] == 0) {      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  public FileWatcher(Path file){  this.file=file;  rootFileObserver=new FileObserver(file);}  }
class C{  public JMenu(Action a){  this();  setAction(a);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Scenario run(Scenario sc,String shapefile,boolean strictlyInside){  LOG.info("Checking scenario for persons in " + shapefile);  ShapeFileReader sfr=new ShapeFileReader();  sfr.readFileAndInitialize(shapefile);  Collection<SimpleFeature> features=sfr.getFeatureSet();  if (features.size() > 1) {    LOG.warn("Multiple features in " + shapefile);    LOG.warn("Only using the first feature.");  }  Geometry geomtery=null;  Object o=features.iterator().next().getDefaultGeometry();  if (o instanceof Geometry) {    geomtery=(Geometry)o;    LOG.info("Shapefile's geomtery type: " + geomtery.getClass().toString());  }  Geometry envelope=geomtery.getEnvelope();  List<Id> listToRemove=new ArrayList<Id>();  int numberRemoved=0;  Counter counter=new Counter("  checked # ");  LOG.info("Checking " + sc.getPopulation().getPersons().size() + " persons in population...");  for (  Id id : sc.getPopulation().getPersons().keySet()) {    Person person=sc.getPopulation().getPersons().get(id);    boolean inArea=false;    Iterator<? extends Plan> planIterator=person.getPlans().iterator();    while (!inArea && planIterator.hasNext()) {      Plan plan=planIterator.next();      Iterator<PlanElement> peIterator=plan.getPlanElements().iterator();      while (!inArea && peIterator.hasNext()) {        PlanElement pe=peIterator.next();        if (pe instanceof Activity) {          Activity act=(Activity)pe;          Point p=geomtery.getFactory().createPoint(new Coordinate(act.getCoord().getX(),act.getCoord().getY()));          if (envelope.covers(p)) {            if (strictlyInside) {              if (geomtery.covers(p)) {                inArea=true;              }            } else {              inArea=true;            }          }        }      }    }    if (!inArea) {      listToRemove.add(id);    }    counter.incCounter();  }  counter.printCounter();  for (  Id id : listToRemove) {    sc.getPopulation().getPersons().remove(id);    sc.getPopulation().getPersonAttributes().removeAllAttributes(id.toString());    numberRemoved++;  }  LOG.info("Number of persons removed: " + numberRemoved);  LOG.info("Number of persons remaining: " + sc.getPopulation().getPersons().size());  return sc;}  }
class C{  @DebugLog private static boolean verifyPermissions(Activity activity){  int write_permission=ActivityCompat.checkSelfPermission(activity,Manifest.permission.WRITE_EXTERNAL_STORAGE);  int read_persmission=ActivityCompat.checkSelfPermission(activity,Manifest.permission.WRITE_EXTERNAL_STORAGE);  int camera_permission=ActivityCompat.checkSelfPermission(activity,Manifest.permission.CAMERA);  if (write_permission != PackageManager.PERMISSION_GRANTED || read_persmission != PackageManager.PERMISSION_GRANTED || camera_permission != PackageManager.PERMISSION_GRANTED) {    ActivityCompat.requestPermissions(activity,PERMISSIONS_REQ,REQUEST_CODE_PERMISSION);    return false;  } else {    return true;  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Point) {    Point pt=(Point)obj;    return (x == pt.x) && (y == pt.y);  }  return super.equals(obj);}  }
class C{  public static byte[] hashTwice(byte[] input){  return hashTwice(input,0,input.length);}  }
class C{  public JRadioButtonMenuItem createJRadioButtonMenuItem(String name,String specialization) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JRadioButtonMenuItem result;  result=new JRadioButtonMenuItem(getSpecializedString(name + TEXT_SUFFIX,specialization));  initializeJMenuItem(result,name,specialization);  try {    result.setSelected(getSpecializedBoolean(name + SELECTED_SUFFIX,specialization));  } catch (  MissingResourceException e) {  }  return result;}  }
class C{  public static CreateParticipant[] loadCreateParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,CreateArguments arguments,String affectedNatures[],SharableParticipants shared){  return loadCreateParticipants(status,processor,element,arguments,null,affectedNatures,shared);}  }
class C{  public TModule basicGetModule(){  return module;}  }
class C{  @Override public void finalize(){  dispose();}  }
class C{  public void indentWithTabs(int tabToSpaces){  customLazy("indentWithTabs",null);}  }
class C{  public DialogueSystem(){  settings=new Settings();  curState=new DialogueState();  modules=new ArrayList<Module>();  modules.add(new GUIFrame(this));  modules.add(new DialogueRecorder(this));  modules.add(new RemoteConnector(this));  modules.add(new ForwardPlanner(this));  domain=new Domain();}  }
class C{  boolean isSynthetic(){  return field.isSynthetic();}  }
class C{  public synchronized void addTLCOutputSource(ITLCOutputSource source){  Assert.isNotNull(source);  ITLCOutputSource existingSource=this.sources.get(source.getModel());  if (existingSource != null && source.getSourcePrio() >= existingSource.getSourcePrio()) {    ITLCOutputListener[] registered=existingSource.getListeners();    for (int i=0; i < registered.length; i++) {      existingSource.removeTLCOutputListener(registered[i]);      source.addTLCOutputListener(registered[i]);      registered[i].onNewSource();    }  } else {    if (existingSource == null) {      TLCModelLaunchDataProvider provider=providers.get(source.getModel());      if (provider != null) {        source.addTLCOutputListener(provider);      }    }  }  this.sources.put(source.getModel(),source);  printStats();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.291 -0500",hash_original_method="3045F383C8CE75FC18DF1FE38D9A0FBC",hash_generated_method="CCAADDDE493FD233E0D76984D43DE6D1") public PortUnreachableException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static Register findOrCreateRegister(Object heapType,int valueNumber,HashMap<UseRecord,Register> registers,GenericRegisterPool pool,TypeReference type){  UseRecord key=new UseRecord(heapType,valueNumber);  Register result=registers.get(key);  if (result == null) {    result=pool.makeTemp(type).getRegister();    registers.put(key,result);  }  return result;}  }
class C{  public static int putLong(byte[] bytes,int offset,long val){  if (littleEndian) {    val=Long.reverseBytes(val);  }  theUnsafe.putLong(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);  return offset + Bytes.SIZEOF_LONG;}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget",threshold=2,splitSize=2) @Override public Long[] findPrimesInArray(Long[] input){  return findPrimesInArray0(input);}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public PlatformCallbackGateway(long envPtr){  this.envPtr=envPtr;}  }
class C{  public void pO(Object o) throws IOException {  pO();  p(o.toString());}  }
class C{  public SyntaxStyle(Color color,boolean italic,boolean bold){  this.color=color;  this.italic=italic;  this.bold=bold;}  }
class C{  RestaurantHolder name(String name){  this.name.setText(name);  return this;}  }
class C{  protected void rollup() throws IOException {  for (  Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {    String dim=ent.getKey();    DimConfig ft=ent.getValue();    if (ft.hierarchical && ft.multiValued == false) {      int dimRootOrd=taxoReader.getOrdinal(new FacetLabel(dim));      if (dimRootOrd > 0) {        values[dimRootOrd]+=rollup(children[dimRootOrd]);      }    }  }}  }
class C{  public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node childNode;  Node clonedNode;  Node lastChildNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  childNode=childList.item(3);  clonedNode=childNode.cloneNode(false);  lastChildNode=clonedNode.getLastChild();  assertNull("nodeCloneFalseNoCopyTextAssert1",lastChildNode);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  private void insertIntoDynamicTable(int index,Header entry){  headerList.add(entry);  int delta=entry.hpackSize;  if (index != -1) {    delta-=dynamicTable[dynamicTableIndex(index)].hpackSize;  }  if (delta > maxDynamicTableByteCount) {    clearDynamicTable();    return;  }  int bytesToRecover=(dynamicTableByteCount + delta) - maxDynamicTableByteCount;  int entriesEvicted=evictToRecoverBytes(bytesToRecover);  if (index == -1) {    if (headerCount + 1 > dynamicTable.length) {      Header[] doubled=new Header[dynamicTable.length * 2];      System.arraycopy(dynamicTable,0,doubled,dynamicTable.length,dynamicTable.length);      nextHeaderIndex=dynamicTable.length - 1;      dynamicTable=doubled;    }    index=nextHeaderIndex--;    dynamicTable[index]=entry;    headerCount++;  } else {    index+=dynamicTableIndex(index) + entriesEvicted;    dynamicTable[index]=entry;  }  dynamicTableByteCount+=delta;}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public final Instances resampleWithWeights(Random random,double[] weights){  if (weights.length != numInstances()) {    throw new IllegalArgumentException("weights.length != numInstances.");  }  Instances newData=new Instances(this,numInstances());  double[] probabilities=new double[numInstances()];  double sumProbs=0, sumOfWeights=Utils.sum(weights);  for (int i=0; i < numInstances(); i++) {    sumProbs+=random.nextDouble();    probabilities[i]=sumProbs;  }  Utils.normalize(probabilities,sumProbs / sumOfWeights);  probabilities[numInstances() - 1]=sumOfWeights;  int k=0;  int l=0;  sumProbs=0;  while ((k < numInstances() && (l < numInstances()))) {    if (weights[l] < 0) {      throw new IllegalArgumentException("Weights have to be positive.");    }    sumProbs+=weights[l];    while ((k < numInstances()) && (probabilities[k] <= sumProbs)) {      newData.add(instance(l));      newData.instance(k).setWeight(1);      k++;    }    l++;  }  return newData;}  }
class C{  public static Map<String,String> options(Long projectId){  LinkedHashMap<String,String> options=new LinkedHashMap<>();  for (  Milestone milestone : findMilestones(projectId,State.ALL,"title",Direction.ASC)) {    options.put(milestone.id.toString(),milestone.title);  }  return options;}  }
class C{  private void findWorstPlanAndRemoveOneVehicle(){  PPlan worstPlan=null;  for (  PPlan plan : this.plans) {    if (plan.getNVehicles() > 0) {      if (worstPlan == null) {        worstPlan=plan;      } else {        if (plan.getScorePerVehicle() < worstPlan.getScorePerVehicle()) {          worstPlan=plan;        }      }    }  }  worstPlan.setNVehicles(worstPlan.getNVehicles() - 1);  if (worstPlan.getNVehicles() == 0) {    this.plans.remove(worstPlan);  }}  }
class C{  public GameEntityEvent(Object source,Entity entity){  super(source);  this.entity=entity;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","usc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public BrowserPaneItem(){  super(TITLE,LABEL);  BROWSER=new SizedTextField(25,SizePolicy.RESTRICT_HEIGHT);  LabeledComponent comp=new LabeledComponent(OPTION_LABEL,BROWSER);  add(comp.getComponent());}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Millisecond)) {    return false;  }  Millisecond that=(Millisecond)obj;  if (this.millisecond != that.millisecond) {    return false;  }  if (this.second != that.second) {    return false;  }  if (this.minute != that.minute) {    return false;  }  if (this.hour != that.hour) {    return false;  }  if (!this.day.equals(that.day)) {    return false;  }  return true;}  }
class C{  protected void paintClock(){  double clockRadius=Math.min(w,h) * 0.8 * 0.5;  double centerX=w / 2;  double centerY=h / 2;  Circle circle=new Circle(centerX,centerY,clockRadius);  circle.setFill(Color.WHITE);  circle.setStroke(Color.BLACK);  Text t1=new Text(centerX - 5,centerY - clockRadius + 12,"12");  Text t2=new Text(centerX - clockRadius + 3,centerY + 5,"9");  Text t3=new Text(centerX + clockRadius - 10,centerY + 3,"3");  Text t4=new Text(centerX - 3,centerY + clockRadius - 3,"6");  double sLength=clockRadius * 0.8;  double secondX=centerX + sLength * Math.sin(second * (2 * Math.PI / 60));  double secondY=centerY - sLength * Math.cos(second * (2 * Math.PI / 60));  Line sLine=new Line(centerX,centerY,secondX,secondY);  sLine.setStroke(Color.RED);  double mLength=clockRadius * 0.65;  double xMinute=centerX + mLength * Math.sin(minute * (2 * Math.PI / 60));  double minuteY=centerY - mLength * Math.cos(minute * (2 * Math.PI / 60));  Line mLine=new Line(centerX,centerY,xMinute,minuteY);  mLine.setStroke(Color.BLUE);  double hLength=clockRadius * 0.5;  double hourX=centerX + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  double hourY=centerY - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12));  Line hLine=new Line(centerX,centerY,hourX,hourY);  hLine.setStroke(Color.GREEN);  getChildren().clear();  getChildren().addAll(circle,t1,t2,t3,t4,sLine,mLine,hLine);}  }
class C{  private void displayEmptyPlaylistMessage(){  switchToPanel(R.id.info_panel);  infoTitle.setText(R.string.playlist_empty);  infoMessage.setText(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.742 -0500",hash_original_method="AAECBEFB54B4ACCFD5CA83A095E16729",hash_generated_method="919F1080491EF19B5BE76556767A792F") public RadialGradient(float x,float y,float radius,int colors[],float positions[],TileMode tile){  if (radius <= 0) {    throw new IllegalArgumentException("radius must be > 0");  }  if (colors.length < 2) {    throw new IllegalArgumentException("needs >= 2 number of colors");  }  if (positions != null && colors.length != positions.length) {    throw new IllegalArgumentException("color and position arrays must be of equal length");  }  native_instance=nativeCreate1(x,y,radius,colors,positions,tile.nativeInt);  native_shader=nativePostCreate1(native_instance,x,y,radius,colors,positions,tile.nativeInt);}  }
class C{  protected void Shutdown() throws InterruptedException, TimeoutException, BrokenBarrierException {  graphServer.stop();  graphServerThread.join(500);}  }
class C{  public String evalString(String xpath){  return (String)eval(xpath,XPathConstants.STRING);}  }
class C{  public final int length(){  return _length;}  }
class C{  public Boolean isMacChanges(){  return macChanges;}  }
class C{  public void flush(){  clearBuffer();  try {    out.flush();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private PIRSFHmmer2RawMatch doOverlapFiltering(RawProtein<PIRSFHmmer2RawMatch> protein,Map<String,PirsfDatRecord> pirsfDatRecordMap,int proteinLength,Map<String,String> subFamToSuperFamMap){  Double minEvalue=null;  PIRSFHmmer2RawMatch matchWithMinEvalue=null;  for (  PIRSFHmmer2RawMatch match : protein.getMatches()) {    String modelId=match.getModelId();    PirsfDatRecord pirsfDatRecord=pirsfDatRecordMap.get(modelId);    if (pirsfDatRecord == null) {      LOGGER.warn("Model Id " + modelId + " not found in the pirsf.dat file, raw match rejected: "+ match);      continue;    }    match.addSubFamilies(pirsfDatRecord.getSubFamilies());    for (    String subFam : match.getSubFamilies()) {      subFamToSuperFamMap.put(subFam,match.getModelId());    }    if (!checkOverlapCriterion(proteinLength,match,pirsfDatRecord)) {      if (LOGGER.isInfoEnabled()) {        LOGGER.info("Removing PIRSF match with model Id " + modelId + "...");      }      continue;    }    double eValue=match.getLocationEvalue();    if (minEvalue == null || eValue < minEvalue) {      minEvalue=eValue;      matchWithMinEvalue=match;    }  }  return matchWithMinEvalue;}  }
class C{  public Matrix4 lerp(Matrix4 matrix,float alpha){  for (int i=0; i < 16; i++)   this.val[i]=this.val[i] * (1 - alpha) + matrix.val[i] * alpha;  return this;}  }
class C{  @Override public void publish(final Topic destination,final Message message) throws JMSException {  session.lock();  try {    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " destination="+ destination+ " message="+ message);    }    checkState();    ((TopicPublisher)producer).publish(destination,message);    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  public Interpolation(SpatialGrid sg,final int method){  this(sg,method,1);}  }
class C{  public NaccacheSternKeyGenerationParameters(SecureRandom random,int strength,int certainty,int cntSmallPrimes){  this(random,strength,certainty,cntSmallPrimes,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.607 -0500",hash_original_method="F46B9A73766B8D71CEE8B005CFE82615",hash_generated_method="7933A4C77A4CFD3C8964936A38D20F91") @Override public void addHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    listeners=new ArrayList<HandshakeCompletedListener>();  }  listeners.add(listener);}  }
class C{  @SuppressWarnings("cast") @Override public void clear(){  if (status != DequeStatus.Empty) {    int cursor=front;    do {      elements[cursor]=null;      cursor=circularBiggerPos(cursor);    } while (cursor != rear);    status=DequeStatus.Empty;  }  front=rear=0;  modCount=0;}  }
class C{  public CActionCloseOthers(final JGraphTab tab,final CGraphPanel graphPanel){  super("Close Others");  m_tab=tab;  m_graphPanel=graphPanel;}  }
class C{  public Pageable createPageable(){  return new DrawingPageable(view.getDrawing());}  }
class C{  public void replaceAll(String regex,String replacement,String columnName){  replaceAll(regex,replacement,getColumnIndex(columnName));}  }
class C{  private SystemSymbols(){}  }
class C{  static long jitterInterval(long intervalMillis){  if (USE_JITTER) {    return adjustIntervalIfJitterIsEnabled(intervalMillis);  } else {    return intervalMillis;  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  void enableEnvelope(boolean enable){  this.envelopeEnabled=enable;}  }
class C{  public final void mul(Quaternion q1,Quaternion q2){  if (this != q1 && this != q2) {    this.w=q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;    this.x=q1.w * q2.x + q2.w * q1.x + q1.y * q2.z - q1.z * q2.y;    this.y=q1.w * q2.y + q2.w * q1.y - q1.x * q2.z + q1.z * q2.x;    this.z=q1.w * q2.z + q2.w * q1.z + q1.x * q2.y - q1.y * q2.x;  } else {    float x, y, w;    w=q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;    x=q1.w * q2.x + q2.w * q1.x + q1.y * q2.z - q1.z * q2.y;    y=q1.w * q2.y + q2.w * q1.y - q1.x * q2.z + q1.z * q2.x;    this.z=q1.w * q2.z + q2.w * q1.z + q1.x * q2.y - q1.y * q2.x;    this.w=w;    this.x=x;    this.y=y;  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  boolean play=Boolean.parseBoolean(WtWindowManager.getInstance().getProperty("sound.play","true"));  play=!play;  WtWindowManager.getInstance().setProperty("sound.play",Boolean.toString(play));  ClientSingletonRepository.getSound().mute(!play,true,new Time(2,Time.Unit.SEC));  if (play) {    ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Sounds are now on."));  } else {    ClientSingletonRepository.getUserInterface().addEventLine(new StandardEventLine("Sounds are now off."));  }  return true;}  }
class C{  public NewDocViewerAction(Workspace workspace){  super("New Doc Viewer",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Copy.png"));  putValue(SHORT_DESCRIPTION,"New doc viewer");}  }
class C{  public void add(String entry,byte[] bytes,boolean overwrite) throws IOException {  JarEntry newEntry=new JarEntry(entry);  if (jarEntries.containsKey(entry) && !overwrite) {    throw new IOException("Archive already contains entry: " + entry);  } else {    jarEntries.remove(entry);    jarEntriesToAdd.remove(entry);    jarEntries.put(entry,newEntry);    jarEntriesToAdd.put(entry,bytes);  }}  }
class C{  public final void testPSSParameterSpec0206(){  new PSSParameterSpec("SHA-1","MGF1",null,20,1);}  }
class C{  public void addColorsForDataSets(ArrayList<Integer> colors){  for (int i=0; i < colors.size(); i++) {    ArrayList<Integer> clrs=new ArrayList<Integer>();    clrs.add(colors.get(i));    addDataSetColors(clrs);  }}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  private HelpUtils(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void showBubbleTriangle(){  triangleView.setVisibility(VISIBLE);}  }
class C{  public void deliverEvent(){  logger.debug("Delivering event {}",this);  deliverEvent(this.nextFilter,this.session,this.type,this.status);}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  public Builder withLeader(int leader){  request.leader=leader;  return this;}  }
class C{  private void resequenceIds(){  List<RouteLocation> routeList=getLocationsBySequenceList();  for (int i=0; i < routeList.size(); i++) {    _sequenceNum=i + 1;    routeList.get(i).setSequenceId(_sequenceNum);  }}  }
class C{  private int[][] houghTransformation(boolean[][] mat){  final int xres=mat.length, yres=mat[0].length;  final double tscale=STEPS * .5 / (xres + yres);  final int[][] ret=new int[STEPS][STEPS];  for (int x=0; x < mat.length; x++) {    for (int y=0; y < mat[0].length; y++) {      if (mat[x][y]) {        for (int i=0; i < STEPS; i++) {          final int d=(STEPS >> 1) + (int)(tscale * (x * table.cos(i) + y * table.sin(i)));          if (d > 0 && d < STEPS) {            ret[d][i]++;          }        }      }    }  }  return ret;}  }
class C{  Entry(int h,Object k,int v,Entry n){  value=v;  next=n;  key=k;  hash=h;}  }
class C{  @Deprecated public static void dragViewToBottom(ActivityInstrumentationTestCase test,View v){  dragViewToBottom(test,test.getActivity(),v,4);}  }
class C{  protected void rotateOrthogonal(){  Iterator<Entry<Integer,NamedIcon>> it=_iconStateMap.entrySet().iterator();  while (it.hasNext()) {    Entry<Integer,NamedIcon> entry=it.next();    entry.getValue().setRotation(entry.getValue().getRotation() + 1,this);  }  displayState(turnoutState());  repaint();}  }
class C{  public ASN1Explicit(int tagClass,int tagNumber,ASN1Type type){  super(tagClass,tagNumber);  this.type=type;}  }
class C{  public Object decode(Object object) throws DecoderException {  try {    char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  ClassCastException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public String generateUUID(){  return UUID.randomUUID().toString();}  }
class C{  private void writeSourceCode(final String name,File outfile){  try (FileWriter fw=new FileWriter(outfile)){    Template t=getClassTemplateByName(name);    if (t != null) {      t.renderToFile(fw);      this.sourcecodeMap.put(name,outfile);    } else {      throw new MissingTemplateError(String.format("Template4 \"%s\" does not exist.",name));    }  } catch (  Exception ex) {    Logger.getLogger(getClass().getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  protected void loadFile(final String file,final RDFFormat format) throws Exception {  final AddOp add=new AddOp(new File(file),format);  m_repo.add(add);}  }
class C{  protected void uninstallListeners(JPanel p){  p.removePropertyChangeListener(this);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sinh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Builder<K,V> put(K key,V value){  super.put(key,value);  return this;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static void prepareMatrix(MatrixInterface adjMatrix){  if (adjMatrix instanceof SparseMatrix) {    prepareSparseMatrix((SparseMatrix)adjMatrix);  } else {    for (int i=0; i != adjMatrix.getRowsCount(); i++) {      double sum=0.0;      for (int j=0; j != adjMatrix.getColsCount(); j++) {        sum+=adjMatrix.get(i,j);      }      if (sum != 0.0) {        for (int j=0; j != adjMatrix.getColsCount(); j++)         adjMatrix.set(i,j,adjMatrix.get(i,j) / sum);      } else {        double tmp=1.0 / adjMatrix.getColsCount();        for (int j=0; j != adjMatrix.getColsCount(); j++) {          adjMatrix.set(i,j,tmp);        }      }    }    adjMatrix.inv();  }}  }
class C{  public void transform(float[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y + M02;dstPts[dstOff++]=M10 * x + M11 * y + M12;}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y;dstPts[dstOff++]=M10 * x + M11 * y;}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M10 * x + M12;}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++];dstPts[dstOff++]=M10 * x;}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M11 * srcPts[srcOff++] + M12;}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++];dstPts[dstOff++]=M11 * srcPts[srcOff++];}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] + M02;dstPts[dstOff++]=srcPts[srcOff++] + M12;}return;case (APPLY_IDENTITY):while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++];dstPts[dstOff++]=srcPts[srcOff++];}return;}}  }
class C{  public java.util.Date isoDate(){  return new ISODate();}  }
class C{  public void addAll(Collection<? extends T> items){  mItems.addAll(items);  notifyDataSetChanged();}  }
class C{  public ArrayIntBig(){  pages=new ArrayList<int[]>();  length=0;}  }
class C{  boolean isPresent(){  return present;}  }
class C{  public void populateZoneRoles(StorageOSUser user,VirtualDataCenter vdc){  if (_disabler != null) {    return;  }  Set<String> userRoles=vdc.getRoleSet(new PermissionsKey(PermissionsKey.Type.SID,user.getName()).toString());  TenantOrg root=getRootTenant();  if (CollectionUtils.isEmpty(userRoles)) {    userRoles=root.getRoleSet(new PermissionsKey(PermissionsKey.Type.SID,user.getName()).toString());  }  if (userRoles != null) {    for (    String role : userRoles) {      if (isRoleZoneLevel(role)) {        user.addRole(role);      }    }  }  Set<String> groups=user.getGroups();  if (!CollectionUtils.isEmpty(groups)) {    for (    String group : groups) {      Set<String> roleSet=vdc.getRoleSet(new PermissionsKey(PermissionsKey.Type.GROUP,group).toString());      if (CollectionUtils.isEmpty(roleSet)) {        roleSet=root.getRoleSet(new PermissionsKey(PermissionsKey.Type.GROUP,group).toString());      }      if (null != roleSet) {        for (        String role : roleSet) {          if (isRoleZoneLevel(role)) {            user.addRole(role);          }        }      }    }  }  updateUserVdcRolesBasedOnUserGroup(user,vdc);}  }
class C{  public static Time convertTime(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueTime t=(ValueTime)value.convertTo(Value.TIME);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long nanos=t.getNanos();  long millis=nanos / 1000000;  nanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  setCalendarFields(cal,1970,1,1,(int)h,(int)m,(int)s,(int)millis);  long ms=cal.getTimeInMillis();  return new Time(ms);}  }
class C{  public static Button createPushButton(Composite parent,String label,Image image){  Button button=new Button(parent,SWT.PUSH);  button.setFont(parent.getFont());  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  public synchronized void notifySessionBorrowed(){  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(this + ": notifySessionBorrowed");  currentContext=new TransactionContext(resource,xaResource);  allContexts.add(currentContext);  closed=false;}  }
class C{  public static Type wildUpperBound(ProcessingEnvironment env,TypeMirror tm){  Type t=(Type)tm;  if (t.hasTag(TypeTag.WILDCARD)) {    Context context=((JavacProcessingEnvironment)env).getContext();    Type.WildcardType w=(Type.WildcardType)TypeAnnotationUtils.unannotatedType(t);    if (w.isSuperBound()) {      Symtab syms=Symtab.instance(context);      return w.bound == null ? syms.objectType : w.bound.bound;    } else {      return wildUpperBound(env,w.type);    }  } else {    return TypeAnnotationUtils.unannotatedType(t);  }}  }
class C{  protected void cleanup(){  System.gc();}  }
class C{  public void add(CommodityChannelIndexItem dataItem,boolean notify){  if (!this.isEmpty()) {    CommodityChannelIndexItem item0=(CommodityChannelIndexItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  public CreateSnapshotRequest indices(List<String> indices){  this.indices=indices.toArray(new String[indices.size()]);  return this;}  }
class C{  public For(String variableName){  super(Object.class,Number.class,Number.class,Number.class,Object.class);  this.variableName=variableName;}  }
class C{  public SymbolTableEntryInternal steFor_N4DataField(){  return getSymbolTableEntryInternal("N4DataField",true);}  }
class C{  public boolean isThrowOnError(){  return throwOnError;}  }
class C{  public static String formatTextBox(String text,int width){  requireNonNull(text);  return formatTextBox(text,width,WORDS,Collections.emptySet());}  }
class C{  public FormatterClosedException(){}  }
class C{  public final void mulInverse(Quaternion q1,Quaternion q2){  Quaternion tempQuat=new Quaternion(q2);  tempQuat.inverse();  this.mul(q1,tempQuat);}  }
class C{  private void queryImageToImageDatastoreMappings(final State current){  Operation.CompletionHandler handler=null;  Operation queryPost=Operation.createPost(UriUtils.buildUri(getHost(),com.vmware.photon.controller.common.xenon.ServiceUriPaths.CORE_QUERY_TASKS)).setBody(buildImageToImageDatastoreQuery(current)).setCompletion(handler);  this.sendRequest(queryPost);}  }
class C{  protected void executeFindBugsTest(final RunnableWithExceptions runnable) throws Exception {  TestRunnerThread thread=new TestRunnerThread(runnable);  thread.start();  try {    thread.join();  } catch (  InterruptedException e) {    throw new IllegalStateException();  }  if (thread.getDetectorAdapter() == null) {    throw new IllegalStateException("Test code did not complete");  }  thread.getDetectorAdapter().finishTest();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  int analysis=getAnalysisBits();  if (WalkerFactory.isNaturalDocOrder(analysis)) {    m_inNaturalOrderStatic=true;  } else {    m_inNaturalOrderStatic=false;  }}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("BackgroundPaint")) {    attemptModifyBackgroundPaint();  }}  }
class C{  public void testAvailable() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  assertEquals("The returned by available() method value " + "should be 0.",cis.available(),0);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  @Override public void schema(Class<?> type){  Objects.requireNonNull(type);  _context.schema(type);}  }
class C{  public IconicsDrawableOld(Context context,String icon){  this.context=context;  ITypeface font=Iconics.findFont(icon.substring(0,3));  icon=icon.replace("-","_");  this.icon=font.getIcon(icon);  paint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  paint.setTypeface(font.getTypeface(context));  paint.setStyle(Paint.Style.STROKE);  paint.setTextAlign(Paint.Align.CENTER);  paint.setUnderlineText(false);  paint.setColor(Color.BLACK);  paint.setAntiAlias(true);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public static TypeInstanceDialog instantiateCreateTypeInstanceDialog(final JFrame owner,final TypeManager typeManager,final Section section,final Long offset){  return new TypeInstanceDialog(owner,"Create type instance",new TypeListModel(typeManager.getTypes(),new TypeListModel.PrototypesFilter()),null,section,offset);}  }
class C{  public static ArrayList<byte[]> byteStringsToArrays(List<ByteString> byteStrings){  if (byteStrings == null) {    return null;  }  ArrayList<byte[]> byteArrays=new ArrayList<byte[]>();  for (  ByteString string : byteStrings) {    byteArrays.add(string.toByteArray());  }  return byteArrays;}  }
class C{  public Node createNodes(RootedTree tree,Node parent,Node child) throws NoEdgeException {  Node newNode=null;  double length;  if (tree.isExternal(child)) {    newNode=createExternalNode(child,tree.getTaxon(child));    length=tree.getEdgeLength(parent,child);  } else {    List<Node> adjacencies=tree.getAdjacencies(child);    if (adjacencies.size() == 2) {      if (adjacencies.get(0) == parent) {        newNode=createNodes(tree,child,adjacencies.get(1));      } else {        newNode=createNodes(tree,child,adjacencies.get(0));      }      length=tree.getEdgeLength(adjacencies.get(0),child) + tree.getEdgeLength(adjacencies.get(1),child);    } else {      List<Node> children=new ArrayList<Node>();      for (      Node child2 : adjacencies) {        if (child2 != parent) {          children.add(createNodes(tree,child,child2));        }      }      if (tree.getParent(parent) == child) {        newNode=createInternalNode(parent,children);      } else {        newNode=createInternalNode(child,children);      }      length=tree.getEdgeLength(parent,child);    }  }  setLength(newNode,length);  return newNode;}  }
class C{  private void siftDown(int k,RunnableScheduledFuture<?> key){  int half=size >>> 1;  while (k < half) {    int child=(k << 1) + 1;    RunnableScheduledFuture<?> c=queue[child];    int right=child + 1;    if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];    if (key.compareTo(c) <= 0)     break;    queue[k]=c;    setIndex(c,k);    k=child;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  private CoverageChecker(Set<String> classnames){  this.classnames=classnames;  this.excludedMethods=new HashSet<>();  this.dontCareMethods=new HashSet<>();}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  void shutdown(){synchronized (this) {    for (    ExecutorService executor : threadPools.values()) {      executor.shutdown();    }    threadPools.clear();  }}  }
class C{  public MutableInt(final String value) throws NumberFormatException {  super();  this.value=Integer.parseInt(value);}  }
class C{  private Scope(String name){  this.name=name;}  }
class C{  public static CCProgressTo action(float duration,float percent){  return new CCProgressTo(duration,percent);}  }
class C{  public void topologyHistory(@Nullable Map<Long,Collection<ClusterNode>> topHist){  this.topHist=topHist;}  }
class C{  public static <ObjectType>boolean dominates(final ITreeNode<ObjectType> node,final ITreeNode<ObjectType> target,final ITreeNode<ObjectType> source){  if (node.getObject() == source) {    return false;  } else   if (node.getObject() == target) {    return true;  } else {    for (    final ITreeNode<ObjectType> child : node.getChildren()) {      if (!dominates(child,target,source)) {        return false;      }    }    return true;  }}  }
class C{  public List<Completion> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public void sendPacket(JdpPacket packet) throws IOException {  byte[] data=packet.getPacketData();  ByteBuffer b=ByteBuffer.wrap(data);  channel.send(b,new InetSocketAddress(addr,port));}  }
class C{  private int calculateBarOpacity(@IntRange(from=0,to=255) int minOpacity,@IntRange(from=0,to=255) int maxOpacity,float barX,int containerWidth){  float height;  if (barX <= containerWidth / 2) {    height=easeOut(barX,minOpacity,maxOpacity - minOpacity,containerWidth / 2f);  } else {    height=easeIn(barX - containerWidth / 2f,maxOpacity,minOpacity - maxOpacity,containerWidth / 2f);  }  return (int)Math.floor(height);}  }
class C{  public long manhattanDistance(final MutableInt2D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y);}  }
class C{  public Statement in(Object... values){  statement.append(" IN (");  for (int i=0; i < values.length; i++) {    if (i > 0)     statement.append(", ");    append(values[i]);  }  statement.append(')');  return this;}  }
class C{  protected Vector<ExtensionFileFilter> filterSaverFileFilters(Vector<ExtensionFileFilter> list){  Vector<ExtensionFileFilter> result;  int i;  ExtensionFileFilter filter;  AbstractSaver saver;  if (m_CapabilitiesFilter == null) {    result=list;  } else {    result=new Vector<ExtensionFileFilter>();    for (i=0; i < list.size(); i++) {      filter=list.get(i);      saver=ConverterUtils.getSaverForExtension(filter.getExtensions()[0]);      if (saver.getCapabilities().supports(m_CapabilitiesFilter)) {        result.add(filter);      }    }  }  return result;}  }
class C{  void reset(){  position=-1;  length=0;  numOverlap=0;  offset=0;  maxTermFrequency=0;  uniqueTermCount=0;  boost=1.0f;  lastStartOffset=0;  lastPosition=0;}  }
class C{  public int horizontalSubframes(){  double value=Math.abs((se_lon - nw_lon) / subframeLonInterval);  int lower=(int)value;  int upper=lower + 1;  if (upper - value < .000001) {    return upper;  } else   return lower;}  }
class C{  public void parse(SAXListener listener) throws java.io.IOException, XMLException {  Parser parser=acquireParser();  try {    org.xml.sax.XMLReader saxReader=parser.getSAXParser().getXMLReader();    saxReader.setErrorHandler(new ParseErrorHandler());    saxReader.setContentHandler(this);    curListener=listener;    elementLayers.add(listener);    saxReader.parse(inputSource);  } catch (  org.xml.sax.SAXParseException toCatch) {    throw new XMLException("Document parse error (line " + toCatch.getLineNumber() + ", pos "+ toCatch.getColumnNumber(),toCatch);  }catch (  org.xml.sax.SAXException toCatch) {    throw new XMLException("Document reading SAX exception",XMLUtils.adaptSAXException(toCatch));  } finally {    parser.close();  }}  }
class C{  public int querySurface(EGLSurface eglSurface,int what){  int[] value=new int[1];  EGL14.eglQuerySurface(mEGLDisplay,eglSurface,what,value,0);  return value[0];}  }
class C{  public void normalize(){  if (isNormalized) {    return;  }  if (iHours == 24 || hoursTimezone != null && (iHoursTimezone != 0 || iMinutesTimezone != 0)) {    Calendar cal=new GregorianCalendar(iYear,iMonths - 1,iDays,iHours,iMinutes,iSeconds);    if (isNegativeYear) {      cal.set(Calendar.ERA,GregorianCalendar.BC);    }    if (isNegativeTimezone) {      cal.add(Calendar.HOUR_OF_DAY,iHoursTimezone);      cal.add(Calendar.MINUTE,iMinutesTimezone);    } else {      cal.add(Calendar.HOUR_OF_DAY,-iHoursTimezone);      cal.add(Calendar.MINUTE,-iMinutesTimezone);    }    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {      isNegativeYear=true;    }    iYear=cal.get(Calendar.YEAR);    iMonths=cal.get(Calendar.MONTH) + 1;    iDays=cal.get(Calendar.DAY_OF_MONTH);    iHours=cal.get(Calendar.HOUR_OF_DAY);    iMinutes=cal.get(Calendar.MINUTE);    iSeconds=cal.get(Calendar.SECOND);    year=int2string(iYear,4);    months=int2string(iMonths,2);    days=int2string(iDays,2);    hours=int2string(iHours,2);    minutes=int2string(iMinutes,2);    seconds=int2string(iSeconds,2);    if (hoursTimezone != null) {      iHoursTimezone=iMinutesTimezone=0;      hoursTimezone=minutesTimezone="00";      isNegativeTimezone=false;    }  }  if (fractionalSeconds != null) {    int zeroCount=0;    for (int i=fractionalSeconds.length() - 1; i >= 0; i--) {      if (fractionalSeconds.charAt(i) == '0') {        zeroCount++;      } else {        break;      }    }    if (zeroCount == fractionalSeconds.length()) {      fractionalSeconds=null;    } else     if (zeroCount > 0) {      fractionalSeconds=fractionalSeconds.substring(0,fractionalSeconds.length() - zeroCount);    }  }  isNormalized=true;}  }
class C{  private DateUtils(){}  }
class C{  public TMember findMember(ContainerType<?> type,String name,boolean writable,boolean staticAccess,boolean includeImplicitSuperTypes,boolean includePolyfills){  return new FindMemberHelper(type,name,writable,staticAccess,includeImplicitSuperTypes,includePolyfills).getResult();}  }
class C{  public synchronized void init(){  if (_statsOn) {    return;  }  _statsOn=true;  executor=Executors.newSingleThreadScheduledExecutor(new CustomizableThreadFactory(STAT_THREAD_NAME));  executor.scheduleAtFixedRate(new StatLogger(),_displayRateInMins,_displayRateInMins,TimeUnit.MINUTES);  executor.scheduleAtFixedRate(new PerMinuteProcessing(),61,60,TimeUnit.SECONDS);  executor.scheduleAtFixedRate(new PerHourProcessing(),3601,3600,TimeUnit.SECONDS);  executor.scheduleAtFixedRate(new PerDayProcessing(),86401,86400,TimeUnit.SECONDS);}  }
class C{  @Override public boolean addRule(ACLRule rule){  if (checkRuleMatch(rule)) {    return false;  }  rule.setId(lastRuleId++);  this.ruleSet.add(rule);  logger.info("No.{} ACL rule added.",rule.getId());  enforceAddedRule(rule);  return true;}  }
class C{  public Optional<PackingPlan.InstancePlan> removeAnyInstanceOfComponent(String component){  Optional<PackingPlan.InstancePlan> instancePlan=getAnyInstanceOfComponent(component);  if (instancePlan.isPresent()) {    PackingPlan.InstancePlan plan=instancePlan.get();    this.instances.remove(plan);    return instancePlan;  }  return Optional.absent();}  }
class C{  public static void annotate(Data data) throws Exception {  if (ParametersForLbjCode.currentParameters.normalizeTitleText) {    TitleTextNormalizer.normalizeCase(data);  }  if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("BrownClusterPaths")) {    BrownClusters.get().printOovData(data);  }  if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("WordEmbeddings")) {    WordEmbeddings.printOovData(data);  }  if (ParametersForLbjCode.currentParameters.featuresToUse != null) {    if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("GazetteersFeatures")) {      for (int docid=0; docid < data.documents.size(); docid++) {        ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;        for (        LinkedVector sentence : sentences) {          for (int j=0; j < sentence.size(); j++) {            NEWord ww=(NEWord)sentence.get(j);            if (ww.gazetteers == null)             ww.gazetteers=new ArrayList<>();          }        }      }      Gazetteers gaz=GazetteersFactory.get();      for (int docid=0; docid < data.documents.size(); docid++) {        ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;        for (        LinkedVector vector : sentences) {          for (int j=0; j < vector.size(); j++)           gaz.annotate((NEWord)vector.get(j));        }      }      for (int docid=0; docid < data.documents.size(); docid++) {        ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;        for (        LinkedVector vector : sentences) {          for (int j=0; j < vector.size(); j++)           Collections.sort(((NEWord)vector.get(j)).gazetteers);        }      }    }  }  for (int docid=0; docid < data.documents.size(); docid++) {    ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;    for (    LinkedVector vector : sentences) {      for (int j=0; j < vector.size(); j++)       ContextAggregation.annotate((NEWord)vector.get(j));    }  }  for (int i=0; i < ParametersForLbjCode.currentParameters.auxiliaryModels.size(); i++) {    ParametersForLbjCode currentModel=ParametersForLbjCode.currentParameters;    ParametersForLbjCode.currentParameters=ParametersForLbjCode.currentParameters.auxiliaryModels.elementAt(i);    Decoder.annotateDataBIO(data,(NETaggerLevel1)ParametersForLbjCode.currentParameters.taggerLevel1,(NETaggerLevel2)ParametersForLbjCode.currentParameters.taggerLevel2);    Vector<Data> v=new Vector<>();    v.addElement(data);    NETesterMultiDataset.printAllTestResultsAsOneDataset(v,false);    TextChunkRepresentationManager.changeChunkRepresentation(TextChunkRepresentationManager.EncodingScheme.BIO,TextChunkRepresentationManager.EncodingScheme.BILOU,data,NEWord.LabelToLookAt.PredictionLevel1Tagger);    TextChunkRepresentationManager.changeChunkRepresentation(TextChunkRepresentationManager.EncodingScheme.BIO,TextChunkRepresentationManager.EncodingScheme.BILOU,data,NEWord.LabelToLookAt.PredictionLevel2Tagger);    ParametersForLbjCode.currentParameters=currentModel;  }}  }
class C{  public com.linkedin.camus.example.records.DummyLog2.Builder clearMuchoStuff(){  muchoStuff=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  @Override protected boolean handleAdded(final RPEntity entity){  if (!super.handleAdded(entity)) {    return false;  }  entity.rememberAttacker(this);  return doDamage(entity);}  }
class C{  @DSComment("no action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.847 -0500",hash_original_method="8636C7CEC5FFD33F6CBF2C75F9E6A135",hash_generated_method="49D139305406AB770BC7CB5D3895D434") public void close() throws IOException {  isClosed=true;  impl.close();}  }
class C{  protected void compareToDEQSimEvents(final String deqsimEventsFile){  LinkedList<Event> copyEventList=new LinkedList<Event>();  for (int i=0; i < allEvents.size(); i++) {    if (!(allEvents.get(i) instanceof ActivityStartEvent || allEvents.get(i) instanceof ActivityEndEvent)) {      copyEventList.add(allEvents.get(i));    }  }  ArrayList<EventLog> deqSimLog=CppEventFileParser.parseFile(deqsimEventsFile);  for (int i=0; i < copyEventList.size(); i++) {    assertTrue("events not equal.",CppEventFileParser.equals(copyEventList.get(i),deqSimLog.get(i)));  }}  }
class C{  @Override public final boolean incrementToken() throws IOException {  if (lemmaListIndex < lemmaList.size()) {    restoreState(current);    posIncrAtt.setPositionIncrement(0);    popNextLemma();    return true;  } else   if (this.input.incrementToken()) {    if (!keywordAttr.isKeyword() && (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt)))) {      current=captureState();      popNextLemma();    } else {      tagsAtt.clear();    }    return true;  } else {    return false;  }}  }
class C{  public static void unregisterBluetoothReceiver(BroadcastReceiver receiver,Activity activity){  if (null == receiver || null == activity) {    return;  }  activity.unregisterReceiver(receiver);}  }
class C{  public MinioException(String message){  super(message);}  }
class C{  public static void writeCentroidsToFile(Clusters clusters,FlagConfig flagConfig){  VectorStoreRAM centroidsOutput=new VectorStoreRAM(flagConfig);  for (int i=0; i < clusters.centroids.length; ++i) {    centroidsOutput.putVector(Integer.toString(i),clusters.centroids[i]);  }  try {    VectorStoreWriter.writeVectors("cluster_centroids.bin",flagConfig,centroidsOutput);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static DD valueOf(String str) throws NumberFormatException {  return parse(str);}  }
class C{  public boolean isTrivial(Integer complexity){  int len=payload.length;  if ((null == complexity) || (len < 2)) {    return true;  } else   if ((complexity.intValue() > 0) && (len > 2)) {    Set<Character> seen=new TreeSet<Character>();    for (int i=0; i < len; i++) {      Character c=Character.valueOf(this.payload[i]);      if (seen.contains(c)) {        continue;      } else {        seen.add(c);      }    }    if (complexity.intValue() <= seen.size()) {      return false;    }  }  return true;}  }
class C{  public static void verifyException(String sourceClass,Throwable t) throws AssertionError {  if (t instanceof AssumptionViolatedException) {    throw (AssumptionViolatedException)t;  }  if (t instanceof TooManyResourcesException) {    throw (TooManyResourcesException)t;  }  assertThrownBy(sourceClass,t);}  }
class C{  public static void assertSearcherHasChanged(SolrIndexSearcher previous){  SolrQueryRequest req=req("*:*");  try {    SolrIndexSearcher newSearcher=getMainSearcher(req);    assertNotSame(previous,newSearcher);  }  finally {    req.close();  }}  }
class C{  public AccountHeaderBuilder withTextColor(@ColorInt int textColor){  this.mTextColor=ColorHolder.fromColor(textColor);  return this;}  }
class C{  protected Object clone() throws CloneNotSupportedException {  throw new UnsupportedOperationException();}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public String message(){  return message;}  }
class C{  public Node text(final String text) throws IOException {  closeHead();  m_writer.write(cdata(text));  m_text++;  return this;}  }
class C{  private boolean isBooleanValue(String value){  value=value.toLowerCase();  return "false".equals(value) || "true".equals(value) || "yes".equals(value)|| "no".equals(value);}  }
class C{  @Override public void handleEvent(Event evt){  Element e=(Element)evt.getTarget();  SVGUtil.addCSSClass(e,cssclass);}  }
class C{  public void clearOptions(){  if (getPlugin() == null) {    log().debug("No plugin set?");  } else {    log().info("Clearing Options..");    PluginOptionContainer container=getPlugin().getPluginOptions();    while (container.size() > 0) {      container.remove(container.getByIndex(0));    }  }}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public final void resume(){  resume(false);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public SSLKeyException(String reason){  super(reason);}  }
class C{  private void handleDoc(String expression){  String functionName=StringUtils.substring(expression,1);  StreamSupport.stream(executor.getFunctionResolver().getFunctionInfo().spliterator(),false).filter(null).map(null).forEach(null);}  }
class C{  public void sphericalToWorldCoordinate(Vector3 coord){  srs.getProjection().sphericalToWorld(coord);}  }
class C{  private void startVoiceBasedInteractions(boolean needWakeLock){  Intent voiceIntent=null;  PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);  boolean isLocked=mKeyguardManager != null && mKeyguardManager.isKeyguardLocked();  if (!isLocked && pm.isScreenOn()) {    voiceIntent=new Intent(android.speech.RecognizerIntent.ACTION_WEB_SEARCH);    Log.i(TAG,"voice-based interactions: about to use ACTION_WEB_SEARCH");  } else {    voiceIntent=new Intent(RecognizerIntent.ACTION_VOICE_SEARCH_HANDS_FREE);    voiceIntent.putExtra(RecognizerIntent.EXTRA_SECURE,isLocked && mKeyguardManager.isKeyguardSecure());    Log.i(TAG,"voice-based interactions: about to use ACTION_VOICE_SEARCH_HANDS_FREE");  }  if (needWakeLock) {    mMediaEventWakeLock.acquire();  }  try {    if (voiceIntent != null) {      voiceIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);      mContext.startActivity(voiceIntent);    }  } catch (  ActivityNotFoundException e) {    Log.w(TAG,"No activity for search: " + e);  } finally {    if (needWakeLock) {      mMediaEventWakeLock.release();    }  }}  }
class C{  private ScaleTransition animateNewlyAddedTile(Tile tile){  final ScaleTransition scaleTransition=new ScaleTransition(Duration.millis(125),tile);  scaleTransition.setToX(1.0);  scaleTransition.setToY(1.0);  scaleTransition.setInterpolator(Interpolator.EASE_OUT);  scaleTransition.setOnFinished(null);  return scaleTransition;}  }
class C{  protected void drawGridBandsVertical(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,boolean firstGridBandIsDark,List ticks){  boolean currentGridBandIsDark=firstGridBandIsDark;  double xx=dataArea.getX();  double yy1, yy2;  double outlineStrokeWidth=1.0;  Stroke outlineStroke=getPlot().getOutlineStroke();  if (outlineStroke != null && outlineStroke instanceof BasicStroke) {    outlineStrokeWidth=((BasicStroke)outlineStroke).getLineWidth();  }  Iterator iterator=ticks.iterator();  ValueTick tick;  Rectangle2D band;  while (iterator.hasNext()) {    tick=(ValueTick)iterator.next();    yy1=valueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.LEFT);    yy2=valueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.LEFT);    if (currentGridBandIsDark) {      g2.setPaint(this.gridBandPaint);    } else {      g2.setPaint(this.gridBandAlternatePaint);    }    band=new Rectangle2D.Double(xx + outlineStrokeWidth,Math.min(yy1,yy2),dataArea.getMaxX() - xx - outlineStrokeWidth,Math.abs(yy2 - yy1));    g2.fill(band);    currentGridBandIsDark=!currentGridBandIsDark;  }}  }
class C{  public boolean isInLoop(BasicBlock block){  return CFGTransformations.inLoop(block,loop);}  }
class C{  public FloodlightModuleContext(){  this(null);}  }
class C{  public ObjectFactory(){}  }
class C{  public AdempiereSystemError(String message){  super(message);}  }
class C{  @Override public void dismissOffer(Offer offer){  offers.remove(offer);}  }
class C{  public Matrix3f(float[] dataArray){  mMat=new float[9];  System.arraycopy(dataArray,0,mMat,0,mMat.length);}  }
class C{  public ClientBuilder withTimeout(long timeoutDelay){  this.timeoutTime=timeoutDelay;  return this;}  }
class C{  private ListNode mergeTwoLists(ListNode l1,ListNode l2){  if (l1 == null) {    return l2;  }  if (l2 == null) {    return l1;  }  if (l1.val < l2.val) {    l1.next=mergeTwoLists(l1.next,l2);    return l1;  } else {    l2.next=mergeTwoLists(l1,l2.next);    return l2;  }}  }
class C{  private ExpectedPartitionValuesInformation createExpectedPartitionValuesInformationFromEntities(PartitionKeyGroupEntity partitionKeyGroupEntity,Collection<ExpectedPartitionValueEntity> expectedPartitionValueEntities){  ExpectedPartitionValuesInformation expectedPartitionValuesInformation=new ExpectedPartitionValuesInformation();  PartitionKeyGroupKey partitionKeyGroupKey=new PartitionKeyGroupKey();  expectedPartitionValuesInformation.setPartitionKeyGroupKey(partitionKeyGroupKey);  partitionKeyGroupKey.setPartitionKeyGroupName(partitionKeyGroupEntity.getPartitionKeyGroupName());  List<String> expectedPartitionValues=new ArrayList<>();  expectedPartitionValuesInformation.setExpectedPartitionValues(expectedPartitionValues);  for (  ExpectedPartitionValueEntity expectedPartitionValueEntity : expectedPartitionValueEntities) {    expectedPartitionValues.add(expectedPartitionValueEntity.getPartitionValue());  }  return expectedPartitionValuesInformation;}  }
class C{  public GridFutureChainListener(GridFutureAdapter<R> fut,IgniteClosure<? super IgniteInternalFuture<T>,R> doneCb){  this.fut=fut;  this.doneCb=doneCb;}  }
class C{  public DefaultResultAdapterContext(){  this(true);}  }
class C{  public Object cacheLookup(String cacheName,Object key){  SolrCache cache=cacheMap.get(cacheName);  return cache == null ? null : cache.get(key);}  }
class C{  public boolean hasErrors(Errors errors){  if (errors == null)   return false;  List<?> entries=getAllEntries();  for (  Object entryUncasted : entries) {    Entry entry=(Entry)entryUncasted;    final String id=entry.getId();    if (id == null || id.isEmpty()) {      errors.add(errorMessages.errorDbTheEntryHadNoId());      continue;    }    final String userId=entry.getUserId();    if (userId == null || userId.isEmpty()) {      errors.add(errorMessages.errorDbTheEntryIsRelatedTheWrongNumberOfUsers(id,0));      continue;    }    User user=getUserById(userId);    if (user == null) {      errors.add(errorMessages.errorDbTheEntryIsRelatedTheWrongNumberOfUsers(id,0));      continue;    }    Entry parent=getEntryById(entry.getParentId());    if (entry.hasParentId() && parent == null) {      errors.add(errorMessages.errorDbTheEntryAParentIdButNoParentRelationship(entry.getParentId(""),id));    }    if (entry.hasLastChildId() && !entry.hasFirstChildId()) {      errors.add(errorMessages.errorDbTheEntryHasALastChildIdButNoFirstChildId(entry.getLastChildId(""),id));    }    if (entry.hasFirstChildId() && !entry.hasLastChildId()) {      errors.add(errorMessages.errorDbTheEntryHasAFirstChildIdButNoLastChildId(entry.getFirstChildId(""),id));    }    if (parent != null && parent.getLastChildId("").equals(id) && entry.hasNextSiblingId()) {      errors.add(errorMessages.errorDbTheEntryIsTheParentsLastChildButHasANextSibling(id));    }    if (parent != null && parent.getFirstChildId("").equals(id) && entry.hasPreviousSiblingId()) {      errors.add(errorMessages.errorDbTheEntryIsTheParentsFirstChildButHasAPreviousSibling(id));    }    final Hashtable<String,Entry> children=new Hashtable<String,Entry>();    Entry firstChild=null;    for (    Object objectChild : getEntriesByParentId(entry.getId())) {      Entry child=(Entry)objectChild;      children.put(child.getId(),child);      if (!child.hasPreviousSiblingId()) {        if (firstChild != null) {          errors.add(errorMessages.errorDbTheEntryHasMoreThanOneChildWithoutAPreviousSiblingId(id));        }        firstChild=child;      }    }    if (entry.hasFirstChildId() && children.isEmpty()) {      errors.add(errorMessages.errorDbTheEntryHasAFirstChildIdButNoChildren(id));    }    if (!entry.hasFirstChildId() && !children.isEmpty()) {      errors.add(errorMessages.errorDbTheEntryHasAFirstChildIdButNoChildren(id));    }    if (!children.isEmpty()) {      if (firstChild == null) {        errors.add(errorMessages.errorDbTheEntryHasNoChildWithoutAPreviousSiblingId(id));      } else {        if (!firstChild.getId("").equals(entry.getFirstChildId(""))) {          errors.add(errorMessages.errorDbTheEntryHasAChildWithoutAPreviousSiblingId(id));        }      }      Entry child=firstChild;      Entry lastChild=null;      int i=0;      for (; i < children.size(); ++i) {        if (child == null) {          break;        }        if (!child.hasNextSiblingId()) {          lastChild=child;          break;        }        final String previousId=child.getId("");        final String nextId=child.getNextSiblingId();        child=children.get(nextId);        if (child == null) {          errors.add(errorMessages.errorDbTheEntryHasAChildWithASiblingThatIsNotRelated(id,nextId));        } else         if (!child.getPreviousSiblingId("").equals(previousId)) {          errors.add(errorMessages.errorDbTheEntryHasAChildWhosePreviousDoesNotMatch(id,child.getPreviousSiblingId(""),previousId));        }      }      if (i != children.size() - 1) {        errors.add(errorMessages.errorDbTheEntryHasExtraChildren(id,children.size() - i));      }      if (lastChild == null) {        errors.add(errorMessages.errorDbTheEntryHasNoChildrenWithoutANextSiblingId(id));      } else {        if (!lastChild.getId("").equals(entry.getLastChildId(""))) {          errors.add(errorMessages.errorDbTheEntryHasAChildWithoutANextSiblingIdThatIsNotItsLastChild(id,lastChild.getId("")));        }      }    }  }  return errors.hasErrors();}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public JActivityView(){  this(null);}  }
class C{  private static int blend_sub_pin(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | high(((a & RED_MASK) - ((b & RED_MASK) >> 8) * f),GREEN_MASK) & RED_MASK | high(((a & GREEN_MASK) - ((b & GREEN_MASK) >> 8) * f),BLUE_MASK) & GREEN_MASK | high((a & BLUE_MASK) - (((b & BLUE_MASK) * f) >> 8),0));}  }
class C{  private void trace(){  glUseProgram(computeProgram);  if (mouseDown) {    currRotationAboutY=rotationAboutY + (mouseX - mouseDownX) * 0.01f;  } else {    currRotationAboutY=rotationAboutY;  }  cameraPosition.set((float)sin(-currRotationAboutY) * 3.0f,2.0f,(float)cos(-currRotationAboutY) * 3.0f);  viewMatrix.setLookAt(cameraPosition,cameraLookAt,cameraUp);  if (resetFramebuffer) {    projMatrix.setPerspective((float)Math.toRadians(60.0f),(float)width / height,1f,2f);    resizeFramebufferTexture();    resetFramebuffer=false;  }  projMatrix.invertPerspectiveView(viewMatrix,invViewProjMatrix);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glUniform3f(eyeUniform,cameraPosition.x,cameraPosition.y,cameraPosition.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,-1,0)).sub(cameraPosition);  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,1,0)).sub(cameraPosition);  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,-1,0)).sub(cameraPosition);  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,1,0)).sub(cameraPosition);  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glBindImageTexture(framebufferImageBinding,tex,0,false,0,GL_READ_WRITE,GL_RGBA32F);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glUseProgram(0);  frameNumber++;}  }
class C{  protected void addOperatorPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_AssignmentExpression_operator_feature"),getString("_UI_PropertyDescriptor_description","_UI_AssignmentExpression_operator_feature","_UI_AssignmentExpression_type"),ExpressionsPackage.Literals.ASSIGNMENT_EXPRESSION__OPERATOR,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void compareTables() throws SQLException {  final Vector<String> tableNamesDB1=new Vector<String>();  final Vector<String> tableNamesDB2=new Vector<String>();  String sql="select table_name from user_tables where table_name not like 'BIN$%'";  ResultSet rs=stmtdb1.executeQuery(sql);  while (rs.next()) {    tableNamesDB1.add(rs.getString("TABLE_NAME"));  }  rs.close();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    tableNamesDB2.add(rs.getString("TABLE_NAME"));  }  rs.close();  System.out.println("searching new tables ...");  final Vector<String> newTables=getNewElements(tableNamesDB1,tableNamesDB2);  for (int i=0; i < newTables.size(); i++) {    final String tableName=newTables.get(i);    final Table table=new Table(tableName);    sql="select * from user_tab_columns where table_name='" + tableName + "'";    rs=stmtdb2.executeQuery(sql);    while (rs.next()) {      Column column=new Column(rs);      table.addColumn(column);    }    rs.close();    m_newTables.add(table);  }  System.out.println("searching missing tables ...");  final Vector<String> missingTables=getMissingElements(tableNamesDB1,tableNamesDB2);  for (int i=0; i < missingTables.size(); i++) {    final Table table=new Table(missingTables.get(i));    m_tablesToDrop.add(table);  }  System.out.println("searching changed tables ...");  addChangedTablesToGlobalVector(tableNamesDB1,tableNamesDB2);}  }
class C{  public void pause(boolean pause){  mAnimator.pause(pause);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VALUE;case 2:  return VERSION;default :return null;}}  }
class C{  @ObjectiveCName("requestStateWithFileId:withCallback:") public void requestState(long fileId,final FileCallback callback){  modules.getFilesModule().requestState(fileId,callback);}  }
class C{  public static IAccessRule[] createAccessRules(OmniClasspathEntry entry){  List<OmniAccessRule> rules=entry.getAccessRules().isPresent() ? entry.getAccessRules().get() : Collections.<OmniAccessRule>emptyList();  IAccessRule[] accessRules=new IAccessRule[rules.size()];  for (int i=0; i < rules.size(); i++) {    OmniAccessRule rule=rules.get(i);    accessRules[i]=JavaCore.newAccessRule(new Path(rule.getPattern()),rule.getKind());  }  return accessRules;}  }
class C{  public static Float toFloat(String str) throws PageException {  return new Float(toFloatValue(str));}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public static ExternalSortable[] readSizeArrayOfExternalSortable(InputStream in,ExternalSortable ex) throws IOException {  int len;  try {    len=ByteUtils.readInt(in);  } catch (  IOException e) {    throw new IOException("Can't read an array of ExternalSortables from the input stream; it's empty.");  }  ExternalSortable[] A=new ExternalSortable[len];  try {    for (int i=0; i < len; i++) {      A[i]=ex.read(in);    }  } catch (  IOException e) {    throw new IOException("Can't read an array of ExternalSortables from the input stream; not enough bytes, but not empty.");  }  return A;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public T caseType(Type object){  return null;}  }
class C{  public boolean process(@NotNull Editor editor,@NotNull PsiFile psiFile){  final CaretModel caretModel=editor.getCaretModel();  final Pair<JavadocHelper.JavadocParameterInfo,List<JavadocHelper.JavadocParameterInfo>> pair=myHelper.parse(psiFile,editor,caretModel.getOffset());  if (pair.first == null) {    return false;  }  final JavadocHelper.JavadocParameterInfo next=findNext(pair.second,pair.first);  if (next == null) {    final int line=pair.first.lastLine + 1;    final Document document=editor.getDocument();    if (line < document.getLineCount()) {      StringBuilder indent=new StringBuilder();      boolean insertIndent=true;      final CharSequence text=document.getCharsSequence();      for (int i=document.getLineStartOffset(line), max=document.getLineEndOffset(line); i < max; i++) {        final char c=text.charAt(i);        if (c == ' ' || c == '\t') {          indent.append(c);          continue;        } else         if (c == '*') {          indent.append("* ");          if (i < max - 1 && text.charAt(i + 1) != '/') {            insertIndent=false;          }        }        indent.append("\n");        break;      }      if (insertIndent) {        document.insertString(document.getLineStartOffset(line),indent);      }    }    moveCaretToTheLineEndIfPossible(editor,line);    return true;  }  if (next.parameterDescriptionStartPosition != null) {    myHelper.navigate(next.parameterDescriptionStartPosition,editor,psiFile.getProject());  } else {    final LogicalPosition position=myHelper.calculateDescriptionStartPosition(psiFile,pair.second,next);    myHelper.navigate(position,editor,psiFile.getProject());  }  return true;}  }
class C{  public final void testEqualsObject02(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Certificate c2=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(c1.equals(c2) && c2.equals(c1));}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  private boolean waitForBackupToBecomeActive(TestableServer backupServer,long waitTimeout) throws Exception {  long startTime=System.currentTimeMillis();  boolean isBackupStarted;  while (!(isBackupStarted=backupServer.isActive()) && System.currentTimeMillis() - startTime < waitTimeout) {    Thread.sleep(300);  }  return isBackupStarted;}  }
class C{  public void cancelCancellable(){  if (timeoutMessageCancellable != null) {    timeoutMessageCancellable.cancel();  }}  }
class C{  public DotSpan(float radius,int color){  this.radius=radius;  this.color=color;}  }
class C{  public void updateStatus(){  logger.debug("Updating status (game: {}, idle: {})",api.getGame() == null ? "none" : api.getGame(),api.isIdle());  JSONObject game=new JSONObject();  game.put("name",api.getGame() == null ? JSONObject.NULL : api.getGame());  if (api.getStreamingUrl() != null) {    game.put("url",api.getStreamingUrl()).put("type",1);  }  JSONObject updateStatus=new JSONObject().put("op",3).put("d",new JSONObject().put("game",game).put("idle_since",api.isIdle() ? 1 : JSONObject.NULL));  socket.sendText(updateStatus.toString());}  }
class C{  public static boolean isLongSizeLiteral(int slot){  if (isReference(slot) || slot < getLowestInUseSlot() || ((slot & 1) != 0)) {    return false;  } else {    return !numericFieldVector.get(slot) && !numericFieldVector.get(slot + 1);  }}  }
class C{  public static JSONObject HttpNonResponsePost(String url,String bssid,JSONObject postJSON,HeaderPair... headers){  int port=EspProxyServerImpl.getInstance().getEspProxyServerPort();  return executeHttpRequest(url,port,METHOD_POST,bssid,postJSON,true,headers);}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  MUCUser mucUser=new MUCUser();  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("invite")) {        mucUser.setInvite(parseInvite(parser));      }      if (parser.getName().equals("item")) {        mucUser.setItem(parseItem(parser));      }      if (parser.getName().equals("password")) {        mucUser.setPassword(parser.nextText());      }      if (parser.getName().equals("status")) {        mucUser.setStatus(new MUCUser.Status(parser.getAttributeValue("","code")));      }      if (parser.getName().equals("decline")) {        mucUser.setDecline(parseDecline(parser));      }      if (parser.getName().equals("destroy")) {        mucUser.setDestroy(parseDestroy(parser));      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("x")) {        done=true;      }    }  }  return mucUser;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  CloseableIterator<CIMObjectPath> associatorIterator=null;  CloseableIterator<CIMInstance> instanceIterator=null;  JobStatus jobStatus=getJobStatus();  try {    if (jobStatus == JobStatus.IN_PROGRESS) {      return;    }    DbClient dbClient=jobContext.getDbClient();    CIMConnectionFactory cimConnectionFactory=jobContext.getCimConnectionFactory();    WBEMClient client=getWBEMClient(dbClient,cimConnectionFactory);    if (jobStatus == JobStatus.SUCCESS || jobStatus == JobStatus.FAILED || jobStatus == JobStatus.FATAL_ERROR) {      SmisUtils.updateStoragePoolCapacity(dbClient,client,_storagePoolURI);      StoragePool pool=dbClient.queryObject(StoragePool.class,_storagePoolURI);      StringMap reservationMap=pool.getReservedCapacityMap();      URI volumeId=getTaskCompleter().getId();      reservationMap.remove(volumeId.toString());      dbClient.persistObject(pool);    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s, task: %s",this.getJobName(),jobStatus.name(),opId));    if (jobStatus == JobStatus.SUCCESS) {      VolumeExpandCompleter taskCompleter=(VolumeExpandCompleter)getTaskCompleter();      Volume volume=dbClient.queryObject(Volume.class,taskCompleter.getId());      volume.setCapacity(taskCompleter.getSize());      volume.setTotalMetaMemberCapacity(taskCompleter.getTotalMetaMembersSize());      volume.setMetaMemberCount(taskCompleter.getMetaMemberCount());      volume.setMetaMemberSize(taskCompleter.getMetaMemberSize());      volume.setIsComposite(taskCompleter.isComposite());      volume.setCompositionType(taskCompleter.getMetaVolumeType());      associatorIterator=client.associatorNames(getCimJob(),null,SmisConstants.CIM_STORAGE_VOLUME,null,null);      if (associatorIterator.hasNext()) {        CIMObjectPath volumePath=associatorIterator.next();        CIMInstance volumeInstance=client.getInstance(volumePath,true,false,null);        if (volumeInstance != null) {          CIMProperty consumableBlocks=volumeInstance.getProperty(SmisConstants.CP_CONSUMABLE_BLOCKS);          CIMProperty blockSize=volumeInstance.getProperty(SmisConstants.CP_BLOCK_SIZE);          Long provisionedCapacity=Long.valueOf(consumableBlocks.getValue().toString()) * Long.valueOf(blockSize.getValue().toString());          volume.setProvisionedCapacity(provisionedCapacity);        }        instanceIterator=client.referenceInstances(volumePath,SmisConstants.CIM_ALLOCATED_FROM_STORAGEPOOL,null,false,SmisConstants.PS_SPACE_CONSUMED);        if (instanceIterator.hasNext()) {          CIMInstance allocatedFromStoragePoolPath=instanceIterator.next();          CIMProperty spaceConsumed=allocatedFromStoragePoolPath.getProperty(SmisConstants.CP_SPACE_CONSUMED);          if (null != spaceConsumed) {            volume.setAllocatedCapacity(Long.valueOf(spaceConsumed.getValue().toString()));          }        }      }      logMsgBuilder.append(String.format("%n   Capacity: %s, Provisioned capacity: %s, Allocated Capacity: %s",volume.getCapacity(),volume.getProvisionedCapacity(),volume.getAllocatedCapacity()));      if (volume.getIsComposite()) {        logMsgBuilder.append(String.format("%n   Is Meta: %s, Total meta member capacity: %s, Meta member count %s, Meta member size: %s",volume.getIsComposite(),volume.getTotalMetaMemberCapacity(),volume.getMetaMemberCount(),volume.getMetaMemberSize()));      }      _log.info(logMsgBuilder.toString());      if (volume.getMetaVolumeMembers() != null) {        volume.getMetaVolumeMembers().clear();      }      StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,volume.getStorageController());      if (volume.checkForRp()) {        SmisCommandHelper helper=jobContext.getSmisCommandHelper();        boolean tagSet=helper.doApplyRecoverPointTag(storageSystem,volume,true);        if (!tagSet) {          _log.error("Encountered an error while trying to enable the RecoverPoint tag.");          jobStatus=JobStatus.FAILED;        }      }      dbClient.persistObject(volume);      WorkflowService.getInstance().storeStepData(opId,new ArrayList<String>());    }  } catch (  Exception e) {    _log.error("Caught an exception while trying to updateStatus for SmisVolumeExpandJob",e);    setPostProcessingErrorStatus("Encountered an internal error during volume expand job status processing : " + e.getMessage());  } finally {    _metaVolumeTaskCompleter.setLastStepStatus(jobStatus);    if (associatorIterator != null) {      associatorIterator.close();    }    if (instanceIterator != null) {      instanceIterator.close();    }    super.updateStatus(jobContext);  }}  }
class C{  public static int executeCommand(String command){  StringBuffer output=new StringBuffer();  Process p=null;  try {    System.out.println(command);    p=Runtime.getRuntime().exec(command);    p.waitFor();    BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));    String line="";    while ((line=reader.readLine()) != null) {      System.out.println(line);      output.append(line + "\n");    }    reader.close();  } catch (  Exception e) {    e.printStackTrace();  }  return (p == null ? -1 : p.exitValue());}  }
class C{  private void drawX(Canvas canvas,Paint paint,float x,float y){  canvas.drawLine(x - size,y - size,x + size,y + size,paint);  canvas.drawLine(x + size,y - size,x - size,y + size,paint);}  }
class C{  @Override public synchronized void write(int b) throws IOException {  ensureOpen();  mParent.ensureNotDone();  mArray.write(b);  if (mArray.size() == mMaxPacketSize) {    mParent.continueOperation(true,false);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected String _becomeMaster(){  _logger.info("Attempting to become " + lockType + " master.");  Date now=new Date();  Date expiration=new Date(System.currentTimeMillis() + GLOBAL_LOCK_EXPIRATION_PERIOD_MS);  String lockNote=MessageFormat.format(GLOBAL_LOCK_NOTE_TEMPLATE,lockType,now,expiration);synchronized (_globalInterlockService) {    String key=_globalInterlockService.obtainLock(GLOBAL_LOCK_EXPIRATION_PERIOD_MS,lockType,lockNote);    _logger.info("Attempt to become {} master {}.",lockType,(key == null ? "did not succeed" : "succeeded"));    return key;  }}  }
class C{  public static DataOutputStream newDataOutputStream(File file) throws IOException {  return new DataOutputStream(new FileOutputStream(file));}  }
class C{  public X509CertificateHolder(Certificate x509Certificate){  this.x509Certificate=x509Certificate;  this.extensions=x509Certificate.getTBSCertificate().getExtensions();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.723 -0400",hash_original_method="8CB077407585A81E631AD914041484F1",hash_generated_method="E68592A1BBA4C27603E7B7070DD53088") public final boolean isFatalEnabled(){  return false;}  }
class C{  public Set<String> addIncrementalUserInput(Map<String,Double> userInput,boolean followPrevious){  CategoricalTable.Builder builder=new CategoricalTable.Builder(settings.userInput);  for (  String input : userInput.keySet()) {    builder.addRow(input,userInput.get(input));  }  return addIncrementalContent(builder.build(),followPrevious);}  }
class C{  @Override public synchronized void updateBinaryStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setBinaryStream(columnIndex,x,length);  } else {    this.inserter.setBinaryStream(columnIndex,x,length);    if (x == null) {      this.thisRow.setColumnValue(columnIndex - 1,null);    } else {      this.thisRow.setColumnValue(columnIndex - 1,STREAM_DATA_MARKER);    }  }}  }
class C{  public boolean remove(Envelope itemEnv,Object item){  return super.remove(itemEnv,item);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.644 -0500",hash_original_method="41D839E013CFE4CFF0DE63311CBF1487",hash_generated_method="F308EC2A20BF7839426DC70AA3A867C3") public Request createRequest(URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the request",0);  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setHeader((ContentType)contentType);  sipRequest.setMessageContent(content);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  public void test() throws Exception {  assertEquals(LMDirichletSimilarity.class,getSimilarity("text").getClass());}  }
class C{  public void connect() throws IOException {  delegate.connect();}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  protected void openProposalPopup(){  openProposalPopup(false);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.193 -0500",hash_original_method="1A307AD1BD02E7BD6299AF40D811E5D5",hash_generated_method="08918995EB82EDD3A70D4A64ED663891") public ExpiresHeader createExpiresHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  Expires e=new Expires();  e.setExpires(expires);  return e;}  }
class C{  public CompanyExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  void notifyHeaderRowBehindStartRow(){  keepBubble=false;  createErrorBubbleWindow(headerRowSpinner,"io.dataimport.step.csv.format_specification.invalid_header_row",configuration.getHeaderRow() + 1,configuration.getStartingRow() + 1);}  }
class C{  public void append(char[] value,int off,int len){  text.append(value,off,len);}  }
class C{  private void parse(KXmlParser parser,DocumentImpl document,Node node,int endToken) throws XmlPullParserException, IOException {  int token=parser.getEventType();  while (token != endToken && token != XmlPullParser.END_DOCUMENT) {    if (token == XmlPullParser.PROCESSING_INSTRUCTION) {      String text=parser.getText();      int dot=text.indexOf(' ');      String target=(dot != -1 ? text.substring(0,dot) : text);      String data=(dot != -1 ? text.substring(dot + 1) : "");      node.appendChild(document.createProcessingInstruction(target,data));    } else     if (token == XmlPullParser.DOCDECL) {      String name=parser.getRootElementName();      String publicId=parser.getPublicId();      String systemId=parser.getSystemId();      document.appendChild(new DocumentTypeImpl(document,name,publicId,systemId));    } else     if (token == XmlPullParser.COMMENT) {      if (!ignoreComments) {        node.appendChild(document.createComment(parser.getText()));      }    } else     if (token == XmlPullParser.IGNORABLE_WHITESPACE) {      if (!ignoreElementContentWhitespace && document != node) {        appendText(document,node,token,parser.getText());      }    } else     if (token == XmlPullParser.TEXT || token == XmlPullParser.CDSECT) {      appendText(document,node,token,parser.getText());    } else     if (token == XmlPullParser.ENTITY_REF) {      String entity=parser.getName();      if (entityResolver != null) {      }      String resolved=resolvePredefinedOrCharacterEntity(entity);      if (resolved != null) {        appendText(document,node,token,resolved);      } else {        node.appendChild(document.createEntityReference(entity));      }    } else     if (token == XmlPullParser.START_TAG) {      if (namespaceAware) {        String namespace=parser.getNamespace();        String name=parser.getName();        String prefix=parser.getPrefix();        if ("".equals(namespace)) {          namespace=null;        }        Element element=document.createElementNS(namespace,name);        element.setPrefix(prefix);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrNamespace=parser.getAttributeNamespace(i);          String attrPrefix=parser.getAttributePrefix(i);          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          if ("".equals(attrNamespace)) {            attrNamespace=null;          }          Attr attr=document.createAttributeNS(attrNamespace,attrName);          attr.setPrefix(attrPrefix);          attr.setValue(attrValue);          element.setAttributeNodeNS(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,namespace,name);      } else {        String name=parser.getName();        Element element=document.createElement(name);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          Attr attr=document.createAttribute(attrName);          attr.setValue(attrValue);          element.setAttributeNode(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,"",name);      }    }    token=parser.nextToken();  }}  }
class C{  private void copyConnection(Connection sourceConnection,Connection destConnection){  if (sourceConnection.getType() != destConnection.getType() || (sourceConnection.getType() != Connection.CONNECTION_TYPE_NEXT && sourceConnection.getType() != Connection.CONNECTION_TYPE_INPUT)) {    throw new IllegalArgumentException("Connection types must match and must be a superior connection.");  }  Block copy=null;  if (sourceConnection.getShadowBlock() != null) {    copy=sourceConnection.getShadowBlock().deepCopy();    if (destConnection.getType() == Connection.CONNECTION_TYPE_NEXT) {      destConnection.setShadowConnection(copy.getPreviousConnection());    } else     if (destConnection.getType() == Connection.CONNECTION_TYPE_INPUT) {      destConnection.setShadowConnection(copy.getOutputConnection());    }  }  if (sourceConnection.getTargetBlock() != null) {    if (sourceConnection.getTargetBlock() != sourceConnection.getShadowBlock()) {      copy=sourceConnection.getTargetBlock().deepCopy();    }    if (destConnection.getType() == Connection.CONNECTION_TYPE_NEXT) {      destConnection.connect(copy.getPreviousConnection());    } else     if (destConnection.getType() == Connection.CONNECTION_TYPE_INPUT) {      destConnection.connect(copy.getOutputConnection());    }  }}  }
class C{  public void updateWeightMatrices(FloatMatrix[] matrices){  for (int i=0; i < matrices.length; ++i) {    FloatMatrix matrix=this.weightMatrixList.get(i);    this.weightMatrixList.set(i,matrix.add(matrices[i]));  }}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue((V)val));}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  public void updateUI(){  super.updateUI();  setForeground(null);  setBackground(null);}  }
class C{  public void testPreferredUnitsRecording_map(){  testPreferredUnitsRecording(R.string.track_detail_map_tab);}  }
class C{  public final int z(){  return (int)FastMath.floor(position().getZ());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.206 -0500",hash_original_method="0D5BB93036D150E4F21C8BED2C6D4A06",hash_generated_method="8A1642953FD4FEE1D5C42FB3D8A67A5A") public static boolean isMirrored(int codePoint){  return isMirroredImpl(codePoint);}  }
class C{  public OMPoint(int x,int y,int radius){  setRenderType(RENDERTYPE_XY);  set(x,y);  this.radius=radius;}  }
class C{  public void copyToWorkDir(String resourceName) throws IOException {  Path target=getWorkDir().resolve(resourceName);  Files.deleteIfExists(target);  try (InputStream resource=getClass().getResourceAsStream(resourceName)){    Files.copy(resource,target);  } }  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (baseFeatureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:    return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static ArrayOfDoublesUnion wrapUnion(final Memory mem){  return wrapUnion(mem,DEFAULT_UPDATE_SEED);}  }
class C{  public boolean isSetByte_thing(){  return EncodingUtils.testBit(__isset_bitfield,__BYTE_THING_ISSET_ID);}  }
class C{  private void findFixpoint(){  boolean changed;  List<BasicBlock> reversedBlocks=new ArrayList<>(basicBlocks);  Collections.reverse(reversedBlocks);  do {    changed=false;    for (    BasicBlock block : reversedBlocks) {      LLVMInstructionIterator it=new LLVMInstructionIterator(block);      while (it.hasNext()) {        Instruction instr=it.next();        if (instr instanceof TerminatorInstruction) {          List<BasicBlock> nextInstructions=successorBlocks.get(instr);          for (          BasicBlock nextBlock : nextInstructions) {            Instruction nextInstr=new LLVMInstructionIterator(nextBlock).next();            Set<FrameSlot> nextIn=in.get(nextInstr);            Set<FrameSlot> addTo=out.get(instr);            changed|=addFrameSlots(addTo,nextIn);          }        } else {          Instruction nextInstr=it.peek();          Set<FrameSlot> nextIn=in.get(nextInstr);          Set<FrameSlot> addTo=out.get(instr);          changed|=addFrameSlots(addTo,nextIn);        }        Set<FrameSlot> outWithoutDefs=new HashSet<>(out.get(instr));        List<FrameSlot> realDefs=new ArrayList<>(defs.get(instr));        outWithoutDefs.removeAll(realDefs);        changed|=addFrameSlots(in.get(instr),outWithoutDefs);      }    }  } while (changed);}  }
class C{  public EaseOut(){}  }
class C{  public static void testBidiWithNumbers(){  String bidiWithNumbers="abc\u05D0\u05D1\u05D2123abc";  int[] carets={0,1,2,3,7,8,6,5,4,9,10,11,12};  TextLayout layout=new TextLayout(bidiWithNumbers,map,frc);  for (int i=0; i < carets.length - 1; i++) {    TextHitInfo hit=layout.getNextRightHit(carets[i]);    if (hit.getInsertionIndex() != carets[i + 1]) {      throw new Error("right hit failed within layout");    }  }  if (layout.getNextRightHit(carets[carets.length - 1]) != null) {    throw new Error("right hit failed at end of layout");  }  for (int i=carets.length - 1; i > 0; i--) {    TextHitInfo hit=layout.getNextLeftHit(carets[i]);    if (hit.getInsertionIndex() != carets[i - 1]) {      throw new Error("left hit failed within layout");    }  }  if (layout.getNextLeftHit(carets[0]) != null) {    throw new Error("left hit failed at end of layout");  }}  }
class C{  public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  public NgnContact(int id,String displayName){  super();  mId=id;  mDisplayName=displayName;  mPhoneNumbers=new ArrayList<NgnPhoneNumber>();}  }
class C{  public void deleteSubscription(Subscription subscription){  Log.d(TAG,"Deleting Subscription: " + subscription.toString());  SQLiteDatabase db=getWritableDatabase();  db.delete(TABLE_SUBSCRIPTIONS,_ID + "=?",new String[]{String.valueOf(subscription.getPersistenceId())});  db.close();}  }
class C{  public void seek(long pos) throws IOException {  if (pos < 0) {    throw new IOException(PropertyUtil.getString("FileCacheSeekableStream0"));  }  pointer=pos;}  }
class C{  static String[] buildKeySelectionArgs(ReadableArray keys,int start,int count){  String[] selectionArgs=new String[count];  for (int keyIndex=0; keyIndex < count; keyIndex++) {    selectionArgs[keyIndex]=keys.getString(start + keyIndex);  }  return selectionArgs;}  }
class C{  public StartItemsCollectionWithLimitAction(final String quest,final int index,final List<String> items,int limit){  this.questSlot=checkNotNull(quest);  this.items=new LinkedList<String>(items);  this.limit=limit;  this.itemIndex=index;}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE;}  }
class C{  public StringBuffer append(long l){  IntegralToString.appendLong(this,l);  return this;}  }
class C{  public void addTradestrategy(Tradestrategy tradestrategy){  this.tradestrategies.add(tradestrategy);}  }
class C{  public static QueryAssociatedCapabilityForLunResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedCapabilityForLunResponse object=new QueryAssociatedCapabilityForLunResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedCapabilityForLunResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedCapabilityForLunResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(VasaAssociationObject.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(VasaAssociationObject.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((VasaAssociationObject[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VasaAssociationObject.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(boolean[] src,int srcIdx,boolean[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx >= (dstIdx + BYTES_IN_ADDRESS / BYTES_IN_BOOLEAN)) && BOOLEAN_BULK_COPY_SUPPORTED) {      if (NEEDS_BOOLEAN_ASTORE_BARRIER || NEEDS_BOOLEAN_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_BOOLEAN);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_BOOLEAN);        Barriers.booleanBulkCopy(src,srcOffset,dst,dstOffset,len);      } else {        Memory.arraycopy8Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  private boolean listenerReplace0(Object topic,GridMessageListener expected,GridMessageListener newVal){  if (topic instanceof GridTopic) {synchronized (sysLsnrsMux) {      return systemListenerChange(topic,expected,newVal);    }  } else   return lsnrMap.replace(topic,expected,newVal);}  }
class C{  public CacheWriterException(Throwable cause){  super(cause);}  }
class C{  void restore(){  if (this.counterSave != null) {    this.counter=this.counterSave;  }}  }
class C{  public MultiMap(final Map<K,Collection<V>> map,final MultiMapFactory<V> type){  mMap=map;  mFactory=type;}  }
class C{  @Override @Deprecated public void presentFragment(INavigationFragment navFragment,int animationIn,int animationOut){  getNavigationManager().pushFragment(navFragment,animationIn,animationOut);}  }
class C{  protected void sequence_CharacterClassElement(ISerializationContext context,CharacterClassRange semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.CHARACTER_CLASS_RANGE__LEFT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.CHARACTER_CLASS_RANGE__LEFT));    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.CHARACTER_CLASS_RANGE__RIGHT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.CHARACTER_CLASS_RANGE__RIGHT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getCharacterClassElementAccess().getCharacterClassRangeLeftAction_1_0_0(),semanticObject.getLeft());  feeder.accept(grammarAccess.getCharacterClassElementAccess().getRightCharacterClassAtomParserRuleCall_1_0_2_0(),semanticObject.getRight());  feeder.finish();}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void changePassword(String encodedPassword,String rawPassword,PasswordEncoder encoder) throws InvalidPasswordException {  if (persistedPassword != null && encoder.matches(rawPassword,persistedPassword)) {    LOGGER.debug("Trying to set the new password equals to the current password");    return;  }  validateAgainstPasswordHistory(rawPassword,encoder);  storeOldPassword(this.password);  persistedPassword=encodedPassword;  this.password=encodedPassword;  lastPasswordChange=new Date();}  }
class C{  public MultipartReader(InputStream input,byte[] boundary){  this(input,boundary,DEFAULT_BUFSIZE);}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_GL_DEVICE_LIST_ALL:    return "CU_GL_DEVICE_LIST_ALL";case CU_GL_DEVICE_LIST_CURRENT_FRAME:  return "CU_GL_DEVICE_LIST_CURRENT_FRAME";case CU_GL_DEVICE_LIST_NEXT_FRAME:return "CU_GL_DEVICE_LIST_NEXT_FRAME";}return "INVALID CUfunction_attribute: " + n;}  }
class C{  private static final boolean isIplRf24SlaveIdentityReportMessage(LocoNetMessage m){  if ((extractIplIdentitySlaveManufacturer(m) == LnConstants.RE_IPL_MFR_DIGITRAX) && (extractIplIdentitySlaveDevice(m) == LnConstants.RE_IPL_DIGITRAX_SLAVE_RF24)) {    return true;  } else {    return false;  }}  }
class C{  public static byte[] copyToByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);  copy(in,out);  return out.toByteArray();}  }
class C{  final public static String cambiarCabeceraXml(String s){  java.io.ByteArrayOutputStream baos=new java.io.ByteArrayOutputStream();  s=s.replaceFirst("(<[^!].*) xmlns=\"http[s]?://afirmaws/ws/[a-z]*\" ","$1  ");  return s;}  }
class C{  public int hashCode(){  return add[0].hashCode();}  }
class C{  private void drawFontSize(final int fontSize){  int realSize=fontSize;  if (realSize < 0) {    realSize=-realSize;  }  if (realSize != lastFS) {    pageObjects.addElement(null);    objectType.addElement(DynamicVectorRenderer.FONTSIZE);    areas.addElement(null);    if (fs == null) {      fs=new Vector_Int(defaultSize);      fs.setCheckpoint();    }    fs.addElement(fontSize);    x_coord=RenderUtils.checkSize(x_coord,currentItem);    y_coord=RenderUtils.checkSize(y_coord,currentItem);    x_coord[currentItem]=0;    y_coord[currentItem]=0;    currentItem++;    lastFS=realSize;  }}  }
class C{  public void stopRecording(){  if (inputSpeech != null) {    inputSpeech.setAsFinal();    if (SAVE_SPEECH.length() > 0 && inputSpeech.length() > MIN_DURATION) {      AudioUtils.generateFile(inputSpeech.toByteArray(),new File(SAVE_SPEECH));    }    inputSpeech=null;    system.addContent(system.getSettings().floor,"free");  }}  }
class C{  public static void updateNewlyCreatedClone(Volume volume,VolumeClone deviceClone,DbClient dbClient) throws IOException {  volume.setNativeId(deviceClone.getNativeId());  volume.setWWN(deviceClone.getWwn());  volume.setDeviceLabel(deviceClone.getDeviceLabel());  volume.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,volume));  volume.setReplicaState(deviceClone.getReplicationState().name());  volume.setProvisionedCapacity(deviceClone.getProvisionedCapacity());  volume.setAllocatedCapacity(deviceClone.getAllocatedCapacity());  volume.setInactive(false);  dbClient.updateObject(volume);}  }
class C{  public void addTimestampManifest(String timestampManifestXml) throws Exception {  Element object=getFirstElementByTagName(document,dsElement(Constants._TAG_OBJECT));  Document timestampManifestDoc=parseDocument(timestampManifestXml,false);  Element timestampManifestElement=timestampManifestDoc.getDocumentElement();  object.appendChild(document.importNode(timestampManifestElement,true));}  }
class C{  private ViewGenerator(){}  }
class C{  public void detect(Integer iteration){  detected=iteration;}  }
class C{  public static void previous(final IdocFrame ui){  FileVO ele=(FileVO)ui.getFileVO();  if (ele.getImageSelectIndex() - 1 < 0) {    ele.setImageSelectIndex(ele.getListImage().size() - 1);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() - 1);  }}  }
class C{  public static NodeList newInstances(Document doc,String[][] params){  HelperNodeList nl=new HelperNodeList();  XMLUtils.addReturnToElement(doc,nl);  for (int i=0; i < params.length; i++) {    String type=params[i][0];    String xpath=params[i][1];    if (!(type.equals(XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT) || type.equals(XPath2FilterContainer._ATT_FILTER_VALUE_SUBTRACT) || type.equals(XPath2FilterContainer._ATT_FILTER_VALUE_UNION))) {      throw new IllegalArgumentException("The type(" + i + ")=\""+ type+ "\" is illegal");    }    XPath2FilterContainer c=new XPath2FilterContainer(doc,xpath,type);    nl.appendChild(c.getElement());    XMLUtils.addReturnToElement(doc,nl);  }  return nl;}  }
class C{  @Override public List<Conflict> parseOutput(final String stdout,final String stderr){  throwIfError(stderr);  final List<Conflict> resolved=new ArrayList<Conflict>();  final String[] lines=getLines(stdout);  for (  String line : lines) {    if (StringUtils.startsWith(line,RESOLVED_PREFIX)) {      line=StringUtils.removeStart(line,RESOLVED_PREFIX);      final int index=line.indexOf(RESOLVED_POST_MSG);      if (index != -1) {        resolved.add(new Conflict(line.substring(0,index),Conflict.ConflictType.RESOLVED));      }    }  }  return resolved;}  }
class C{  public void testGetLinkTravelTime_NoAnalyzedModes(){  Network network=NetworkUtils.createNetwork();  TravelTimeCalculatorConfigGroup config=new TravelTimeCalculatorConfigGroup();  config.setTraveltimeBinSize(900);  config.setAnalyzedModes("");  config.setFilterModes(true);  TravelTimeCalculator ttc=new TravelTimeCalculator(network,config);  Node n1=network.getFactory().createNode(Id.create(1,Node.class),new Coord(0,0));  Node n2=network.getFactory().createNode(Id.create(2,Node.class),new Coord(1000,0));  Node n3=network.getFactory().createNode(Id.create(3,Node.class),new Coord(2000,0));  network.addNode(n1);  network.addNode(n2);  network.addNode(n3);  Link link1=network.getFactory().createLink(Id.create(1,Link.class),n1,n2);  Link link2=network.getFactory().createLink(Id.create(2,Link.class),n2,n3);  network.addLink(link1);  network.addLink(link2);  Id<Person> agId1=Id.create(1510,Person.class);  Id<Vehicle> vehId=Id.create(1980,Vehicle.class);  ttc.handleEvent(new VehicleEntersTrafficEvent(100,agId1,link1.getId(),vehId,TransportMode.car,1.0));  ttc.handleEvent(new LinkLeaveEvent(200,vehId,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(200,vehId,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(300,vehId,link2.getId()));  Assert.assertEquals("No transport mode has been registered to be analyzed, therefore no vehicle/agent should be counted",1000.0,ttc.getLinkTravelTimes().getLinkTravelTime(link2,300,null,null),1e-8);}  }
class C{  private static boolean typeEquals(ParameterizedType from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from.getRawType().equals(to.getRawType())) {    Type[] fromArgs=from.getActualTypeArguments();    Type[] toArgs=to.getActualTypeArguments();    for (int i=0; i < fromArgs.length; i++) {      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public GenericObjectEditorDialog(Frame owner){  super(owner);}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> builder(){  return new Builder<K,V>();}  }
class C{  public List<Long> deleteEmptyFolders(){  ArrayList<Long> folderIds=new ArrayList<Long>();  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  db.beginTransaction();  try {    String selection=LauncherSettings.Favorites.ITEM_TYPE + " = " + LauncherSettings.Favorites.ITEM_TYPE_FOLDER+ " AND "+ LauncherSettings.Favorites._ID+ " NOT IN (SELECT "+ LauncherSettings.Favorites.CONTAINER+ " FROM "+ TABLE_FAVORITES+ ")";    Cursor c=db.query(TABLE_FAVORITES,new String[]{LauncherSettings.Favorites._ID},selection,null,null,null,null);    while (c.moveToNext()) {      folderIds.add(c.getLong(0));    }    c.close();    if (folderIds.size() > 0) {      db.delete(TABLE_FAVORITES,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,folderIds),null);    }    db.setTransactionSuccessful();  } catch (  SQLException ex) {    Log.e(TAG,ex.getMessage(),ex);    folderIds.clear();  } finally {    db.endTransaction();  }  return folderIds;}  }
class C{  public Map<Variable,Term> unify(FOLNode x,FOLNode y){  return unify(x,y,new LinkedHashMap<Variable,Term>());}  }
class C{  private final void renameUser(String oldNick,String newNick){synchronized (_channels) {    Enumeration<String> enumeration=_channels.keys();    while (enumeration.hasMoreElements()) {      String channel=enumeration.nextElement();      User user=this.removeUser(channel,oldNick);      if (user != null) {        user=new User(user.getPrefix(),newNick);        this.addUser(channel,user);      }    }  }}  }
class C{  private void coldHit(){  boolean inStack=inStack();  moveToStackTop();  if (inStack) {    hot();    removeFromQueue();    stackBottom().migrateToQueue();    pruneStack();  } else {    moveToQueueEnd();  }}  }
class C{  public WbXmlBody addPrePi(WbXmlAttribute pi){  this.prePi.add(pi);  return this;}  }
class C{  public synchronized void addConsumer(ImageConsumer ic){  if (theConsumers.contains(ic)) {    return;  }  theConsumers.addElement(ic);  try {    initConsumer(ic);    sendPixels(ic,0,0,width,height);    if (isConsumer(ic)) {      ic.imageComplete(animating ? ImageConsumer.SINGLEFRAMEDONE : ImageConsumer.STATICIMAGEDONE);      if (!animating && isConsumer(ic)) {        ic.imageComplete(ImageConsumer.IMAGEERROR);        removeConsumer(ic);      }    }  } catch (  Exception e) {    if (isConsumer(ic)) {      ic.imageComplete(ImageConsumer.IMAGEERROR);    }  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public Result pageResult(int startCount,int endCount,String step){  List<String> fields=new ArrayList<String>();  List values=new ArrayList<String>();  fields.add(RESULT_FLAG);  values.add(operationCompletedSuccessfully);  fields.add(QUERY_PAGE_START);  values.add(startCount);  fields.add(QUERY_PAGE_END);  values.add(endCount);  if (errorString != null) {    fields.add("Message");    values.add(errorString);    return createBannerResult(fields,values,step);  } else {    if (infoString != null) {      fields.add("Message");      values.add(infoString);    }    if (selectResult != null) {      try {        TabularResultData table=ResultBuilder.createTabularResultData();        String[] headers=null;        Object[][] rows=null;        int rowCount=buildTable(table,startCount,endCount);        GfJsonArray array=table.getHeaders();        headers=new String[array.size()];        rows=new Object[rowCount][array.size()];        for (int i=0; i < array.size(); i++) {          headers[i]=(String)array.get(i);          List<String> list=table.retrieveAllValues(headers[i]);          for (int j=0; j < list.size(); j++) {            rows[j][i]=list.get(j);          }        }        fields.add(NUM_ROWS);        values.add((selectResult == null) ? 0 : selectResult.size());        if (queryTraceString != null) {          fields.add(QUERY_TRACE);          values.add(queryTraceString);        }        return createPageResult(fields,values,step,headers,rows);      } catch (      GfJsonException e) {        String[] headers=new String[]{"Error"};        Object[][] rows={{e.getMessage()}};        String fieldsArray[]={QUERY_PAGE_START,QUERY_PAGE_END};        Object valuesArray[]={startCount,endCount};        return createPageResult(fieldsArray,valuesArray,step,headers,rows);      }    } else     return createBannerResult(fields,values,step);  }}  }
class C{  @Override public void update(final int delta){  super.update(delta);  if (!stopped()) {    final double step=(delta / 300.0);    final double oldX=x;    final double oldY=y;    x+=(dx * step);    y+=(dy * step);    if (GameObjects.getInstance().collides(this)) {      x=oldX;      y=oldY;    } else {      onPosition(x,y);    }  }}  }
class C{  public static int determineBooleanTypeCode() throws UnsupportedOperationException {  try {    return Types.class.getField(TypeMap.BOOLEAN).getInt(null);  } catch (  Exception ex) {    throw new UnsupportedOperationException("The jdbc type BOOLEAN is not supported");  }}  }
class C{  @Override public void buildAssociations(Instances data) throws Exception {  buildAssociations((Object)data);  return;}  }
class C{  private static String addKeyIdCheckToWhereStatement(String whereStatement,long id){  String newWhereStatement;  if (TextUtils.isEmpty(whereStatement))   newWhereStatement=""; else   newWhereStatement=whereStatement + " AND ";  return newWhereStatement + CharacterContract.CharacterEntry._ID + " = '"+ id+ "'";}  }
class C{  public static String random40(){  return randomString(40);}  }
class C{  public boolean isCharacterBinding(){  return getCharacter() != null;}  }
class C{  private static void createNetwork(Network net){  NetworkFactory fac=net.getFactory();  net.addNode(fac.createNode(Id.createNodeId(1),new Coord(-2000,0)));  net.addNode(fac.createNode(Id.createNodeId(2),new Coord(-1000,0)));  net.addNode(fac.createNode(Id.createNodeId(3),new Coord(0,0)));  net.addNode(fac.createNode(Id.createNodeId(4),new Coord(1000,0)));  net.addNode(fac.createNode(Id.createNodeId(5),new Coord(2000,0)));  net.addNode(fac.createNode(Id.createNodeId(6),new Coord(0,2000)));  net.addNode(fac.createNode(Id.createNodeId(7),new Coord(0,1000)));  net.addNode(fac.createNode(Id.createNodeId(8),new Coord(0,-1000)));  net.addNode(fac.createNode(Id.createNodeId(9),new Coord(0,-2000)));  String[] links={"1_2","2_1","2_3","3_2","3_4","4_3","4_5","5_4","6_7","7_6","7_3","3_7","3_8","8_3","8_9","9_8"};  for (  String linkId : links) {    String fromNodeId=linkId.split("_")[0];    String toNodeId=linkId.split("_")[1];    Link link=fac.createLink(Id.createLinkId(linkId),net.getNodes().get(Id.createNodeId(fromNodeId)),net.getNodes().get(Id.createNodeId(toNodeId)));    link.setCapacity(7200);    link.setLength(1000);    link.setFreespeed(10);    net.addLink(link);  }}  }
class C{  public void checkCosting(){  log.info(toString());  if (getM_CostType_ID() == 0) {    MCostType ct=new MCostType(getCtx(),0,get_TrxName());    ct.setClientOrg(getAD_Client_ID(),0);    ct.setName(getName());    ct.saveEx();    setM_CostType_ID(ct.getM_CostType_ID());  }  MCostElement.getMaterialCostElement(this);  if (getCostingLevel() == null)   setCostingLevel(COSTINGLEVEL_Client);  if (getCostingMethod() == null)   setCostingMethod(COSTINGMETHOD_StandardCosting);  if (getGAAP() == null)   setGAAP(GAAP_InternationalGAAP);}  }
class C{  public boolean isNewline(){  return newline != null;}  }
class C{  public PdfRendererBuilder useUnicodeToLowerTransformer(FSTextTransformer tr){  this._unicodeToLowerTransformer=tr;  return this;}  }
class C{  public static boolean adjustIntermediateProducts(double[] products,double[] liftFactors){  L:   for (int i=0; i < liftFactors.length; i++) {    if (Double.isNaN(liftFactors[i])) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.operator.leaner.meta.BayBoostModel.ignoring_non_applicable_model");      continue L;    } else     if (Double.isInfinite(liftFactors[i])) {      if (products[i] != 0) {        for (int j=0; j < products.length; j++) {          products[j]=0;        }        products[i]=liftFactors[i];        return true;      } else {        continue L;      }    } else {      products[i]*=liftFactors[i];      if (Double.isNaN(products[i])) {        LogService.getRoot().log(Level.WARNING,"com.rapidminer.operator.leaner.meta.BayBoostModel.found_nan_value");      }    }  }  return false;}  }
class C{  public static XMLReader createXMLReader(String className) throws SAXException {  return loadClass(NewInstance.getClassLoader(),className);}  }
class C{  static String composeSortedKey(String prefix,int value){  return String.format("%s%010d",prefix,value);}  }
class C{  public static IPackageFragmentRoot createJarPackageFragmentRootFrom(IFile file,IJavaProject project){  if (file == null) {    return null;  }  if (project == null) {    project=JavaCore.create(file.getProject());  }  IPath resourcePath=file.getFullPath();  try {    IClasspathEntry entry=((JavaProject)project).getClasspathEntryFor(resourcePath);    if (entry != null) {      return project.getPackageFragmentRoot(file);    }  } catch (  JavaModelException e) {  }  return null;}  }
class C{  public void removeIdentity(Identity identity) throws KeyManagementException {}  }
class C{  public static void testPeriodOpen(Properties ctx,Timestamp dateAcct,int C_DocType_ID) throws PeriodClosedException {  MDocType dt=MDocType.get(ctx,C_DocType_ID);  testPeriodOpen(ctx,dateAcct,dt.getDocBaseType());}  }
class C{  protected Command processPacketIn(IOFSwitch sw,OFPacketIn msg,FloodlightContext cntx){  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  Command ret=Command.STOP;  String srcNetwork=macToGuid.get(eth.getSourceMAC());  if (eth.isBroadcast() || eth.isMulticast() || isDefaultGateway(eth)|| isDhcpPacket(eth)) {    ret=Command.CONTINUE;  } else   if (srcNetwork == null) {    log.trace("Blocking traffic from host {} because it is not attached to any network.",HexString.toHexString(eth.getSourceMACAddress()));    ret=Command.STOP;  } else   if (oneSameNetwork(eth.getSourceMAC(),eth.getDestinationMAC())) {    ret=Command.CONTINUE;  }  if (log.isTraceEnabled())   log.trace("Results for flow between {} and {} is {}",new Object[]{eth.getSourceMAC(),eth.getDestinationMAC(),ret});  return ret;}  }
class C{  public final ArrayList<Move> variations(){  if (currentNode.verifyChildren(currentPos))   updateListener();  ArrayList<Move> ret=new ArrayList<Move>();  for (  Node child : currentNode.children)   ret.add(child.move);  return ret;}  }
class C{  public static void lockOrientationLandscape(Activity activity){  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);}  }
class C{  public static void validateConfAndURI(DistributedLogConfiguration conf,URI uri) throws IllegalArgumentException {  if (null == conf) {    throw new IllegalArgumentException("Incorrect Configuration");  }  if ((null == uri) || (null == uri.getAuthority()) || (null == uri.getPath())) {    throw new IllegalArgumentException("Incorrect ZK URI");  }}  }
class C{  private void updatePostFailover(Volume volume) throws InternalException {  _log.info("Setting respective flags after failover");  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());  List<URI> volumeIDs=new ArrayList<URI>();  for (  String volumeString : protectionSet.getVolumes()) {    URI volumeURI;    try {      volumeURI=new URI(volumeString);      volumeIDs.add(volumeURI);    } catch (    URISyntaxException e) {      _log.error("URI syntax incorrect: ",e);    }  }  for (  URI protectionVolumeID : volumeIDs) {    Volume protectionVolume=_dbClient.queryObject(Volume.class,protectionVolumeID);    if ((protectionVolume.checkPersonality(Volume.PersonalityTypes.TARGET.toString())) && (protectionVolume.getRpCopyName().equals(volume.getRpCopyName()))) {      _log.info("Change flags of failover target " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));      protectionVolume.setAccessState(Volume.VolumeAccessState.READWRITE.name());      protectionVolume.setLinkStatus(Volume.LinkStatus.FAILED_OVER.name());      _dbClient.updateObject(protectionVolume);    } else     if (protectionVolume.checkPersonality(Volume.PersonalityTypes.SOURCE.toString())) {      _log.info("Change flags of failover source " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));      protectionVolume.setLinkStatus(Volume.LinkStatus.FAILED_OVER.name());      _dbClient.updateObject(protectionVolume);    }  }}  }
class C{  private void saveWorkFolderShortcuts(long workFolderId,int startingRank){  for (  ItemInfo info : mWorkFolderApps) {    info.rank=startingRank++;    LauncherModel.addItemToDatabase(mContext,info,workFolderId,0,0,0);  }}  }
class C{  public boolean isMotorEnabled(){  return m_enableMotor;}  }
class C{  @Override public double filterFitness(double fitness){  return Math.exp(fitness / temperature);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putOID(oid);}  }
class C{  @Override public synchronized void putShardRoutingState(final String index,final ShardRoutingState shardRoutingState) throws JsonGenerationException, JsonMappingException, IOException {  if (Gossiper.instance.isEnabled()) {    Map<String,ShardRoutingState> shardsStateMap=null;    EndpointState state=Gossiper.instance.getEndpointStateForEndpoint(FBUtilities.getBroadcastAddress());    if (state != null) {      VersionedValue value=state.getApplicationState(ELASTIC_SHARDS_STATES);      if (value != null) {        shardsStateMap=(Map<String,ShardRoutingState>)jsonMapper.readValue(value.value,indexShardStateTypeReference);      }    }    if (shardsStateMap == null) {      shardsStateMap=new HashMap<String,ShardRoutingState>();    }    if (shardRoutingState != null) {      shardsStateMap.put(index,shardRoutingState);    } else {      if (shardsStateMap.containsKey(index)) {        shardsStateMap.remove(index);      }    }    String newValue=jsonMapper.writerWithType(indexShardStateTypeReference).writeValueAsString(shardsStateMap);    Gossiper.instance.addLocalApplicationState(ELASTIC_SHARDS_STATES,StorageService.instance.valueFactory.datacenter(newValue));  }}  }
class C{  public static ChainingTextWriter write(Collection<ICalendar> icals){  return new ChainingTextWriter(icals);}  }
class C{  public void flush(){synchronized (sLock) {    if (mVideoStream != null) {      mVideoStream.stop();      mVideoStream=null;    }    if (mAudioStream != null) {      mAudioStream.stop();      mAudioStream=null;    }  }}  }
class C{  public static Block fromResource(final NemesisBlockInfo nemesisBlockInfo,final DeserializationContext context){  try (final InputStream fin=NemesisBlock.class.getClassLoader().getResourceAsStream(nemesisBlockInfo.getDataFileName())){    final byte[] buffer=IOUtils.toByteArray(fin);    return fromBlobObject(nemesisBlockInfo,buffer,context);  } catch (  final IOException e) {    throw new IllegalStateException("unable to parse nemesis block stream");  }}  }
class C{  protected Object writeReplace() throws java.io.ObjectStreamException {  return new File(getPath());}  }
class C{  public LingRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params,null);}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public static void main(String[] args) throws InterruptedException, TimeoutException, IOException, ParserConfigurationException, SAXException, KeeperException {  CommandLineParser parser=new PosixParser();  Options options=new Options();  options.addOption(OptionBuilder.hasArg(true).withDescription("cmd to run: " + BOOTSTRAP + ", "+ UPCONFIG+ ", "+ DOWNCONFIG+ ", "+ LINKCONFIG+ ", "+ MAKEPATH+ ", "+ PUT+ ", "+ PUT_FILE+ ","+ GET+ ","+ GET_FILE+ ", "+ LIST+ ", "+ CLEAR+ ", "+ UPDATEACLS).create(CMD));  Option zkHostOption=new Option("z",ZKHOST,true,"ZooKeeper host address");  options.addOption(zkHostOption);  Option solrHomeOption=new Option("s",SOLRHOME,true,"for " + BOOTSTRAP + ", "+ RUNZK+ ": solrhome location");  options.addOption(zkHostOption);  options.addOption(solrHomeOption);  options.addOption("d",CONFDIR,true,"for " + UPCONFIG + ": a directory of configuration files");  options.addOption("n",CONFNAME,true,"for " + UPCONFIG + ", "+ LINKCONFIG+ ": name of the config set");  options.addOption("c",COLLECTION,true,"for " + LINKCONFIG + ": name of the collection");  options.addOption(EXCLUDE_REGEX_SHORT,EXCLUDE_REGEX,true,"for " + UPCONFIG + ": files matching this regular expression won't be uploaded");  options.addOption("r",RUNZK,true,"run zk internally by passing the solr run port - only for clusters on one machine (tests, dev)");  options.addOption("h",HELP,false,"bring up this help page");  options.addOption(NAME,true,"name of the cluster property to set");  options.addOption(VALUE_LONG,true,"value of the cluster to set");  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption(HELP) || !line.hasOption(ZKHOST) || !line.hasOption(CMD)) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp(ZK_CLI_NAME,options);      System.out.println("Examples:");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + BOOTSTRAP + " -"+ SOLRHOME+ " /opt/solr");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + UPCONFIG + " -"+ CONFDIR+ " /opt/solr/collection1/conf"+ " -"+ CONFNAME+ " myconf");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + DOWNCONFIG + " -"+ CONFDIR+ " /opt/solr/collection1/conf"+ " -"+ CONFNAME+ " myconf");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + LINKCONFIG + " -"+ COLLECTION+ " collection1"+ " -"+ CONFNAME+ " myconf");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + MAKEPATH + " /apache/solr");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + PUT + " /solr.conf 'conf data'");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + PUT_FILE + " /solr.xml /User/myuser/solr/solr.xml");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + GET + " /solr.xml");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + GET_FILE + " /solr.xml solr.xml.file");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + CLEAR + " /solr");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + LIST);      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + CLUSTERPROP + " -"+ NAME+ " urlScheme -"+ VALUE_LONG+ " https");      System.out.println("zkcli.sh -zkhost localhost:9983 -cmd " + UPDATEACLS + " /solr");      return;    }    String zkServerAddress=line.getOptionValue(ZKHOST);    String solrHome=line.getOptionValue(SOLRHOME);    String solrPort=null;    if (line.hasOption(RUNZK)) {      if (!line.hasOption(SOLRHOME)) {        System.out.println("-" + SOLRHOME + " is required for "+ RUNZK);        System.exit(1);      }      solrPort=line.getOptionValue(RUNZK);    }    SolrZkServer zkServer=null;    if (solrPort != null) {      zkServer=new SolrZkServer("true",null,solrHome + "/zoo_data",solrHome,Integer.parseInt(solrPort));      zkServer.parseConfig();      zkServer.start();    }    SolrZkClient zkClient=null;    try {      zkClient=new SolrZkClient(zkServerAddress,30000,30000,null);      if (line.getOptionValue(CMD).equalsIgnoreCase(BOOTSTRAP)) {        if (!line.hasOption(SOLRHOME)) {          System.out.println("-" + SOLRHOME + " is required for "+ BOOTSTRAP);          System.exit(1);        }        CoreContainer cc=new CoreContainer(solrHome);        if (!ZkController.checkChrootPath(zkServerAddress,true)) {          System.out.println("A chroot was specified in zkHost but the znode doesn't exist. ");          System.exit(1);        }        ZkController.bootstrapConf(zkClient,cc,solrHome);      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(UPCONFIG)) {        if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {          System.out.println("-" + CONFDIR + " and -"+ CONFNAME+ " are required for "+ UPCONFIG);          System.exit(1);        }        String confDir=line.getOptionValue(CONFDIR);        String confName=line.getOptionValue(CONFNAME);        final String excludeExpr=line.getOptionValue(EXCLUDE_REGEX,EXCLUDE_REGEX_DEFAULT);        if (!ZkController.checkChrootPath(zkServerAddress,true)) {          System.out.println("A chroot was specified in zkHost but the znode doesn't exist. ");          System.exit(1);        }        ZkConfigManager configManager=new ZkConfigManager(zkClient);        final Pattern excludePattern=Pattern.compile(excludeExpr);        configManager.uploadConfigDir(Paths.get(confDir),confName,excludePattern);      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(DOWNCONFIG)) {        if (!line.hasOption(CONFDIR) || !line.hasOption(CONFNAME)) {          System.out.println("-" + CONFDIR + " and -"+ CONFNAME+ " are required for "+ DOWNCONFIG);          System.exit(1);        }        String confDir=line.getOptionValue(CONFDIR);        String confName=line.getOptionValue(CONFNAME);        ZkConfigManager configManager=new ZkConfigManager(zkClient);        configManager.downloadConfigDir(confName,Paths.get(confDir));      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(LINKCONFIG)) {        if (!line.hasOption(COLLECTION) || !line.hasOption(CONFNAME)) {          System.out.println("-" + COLLECTION + " and -"+ CONFNAME+ " are required for "+ LINKCONFIG);          System.exit(1);        }        String collection=line.getOptionValue(COLLECTION);        String confName=line.getOptionValue(CONFNAME);        ZkController.linkConfSet(zkClient,collection,confName);      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(LIST)) {        zkClient.printLayoutToStdOut();      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(CLEAR)) {        List arglist=line.getArgList();        if (arglist.size() != 1) {          System.out.println("-" + CLEAR + " requires one arg - the path to clear");          System.exit(1);        }        zkClient.clean(arglist.get(0).toString());      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(MAKEPATH)) {        List arglist=line.getArgList();        if (arglist.size() != 1) {          System.out.println("-" + MAKEPATH + " requires one arg - the path to make");          System.exit(1);        }        zkClient.makePath(arglist.get(0).toString(),true);      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(PUT)) {        List arglist=line.getArgList();        if (arglist.size() != 2) {          System.out.println("-" + PUT + " requires two args - the path to create and the data string");          System.exit(1);        }        String path=arglist.get(0).toString();        if (zkClient.exists(path,true)) {          zkClient.setData(path,arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),true);        } else {          zkClient.create(path,arglist.get(1).toString().getBytes(StandardCharsets.UTF_8),CreateMode.PERSISTENT,true);        }      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(PUT_FILE)) {        List arglist=line.getArgList();        if (arglist.size() != 2) {          System.out.println("-" + PUT_FILE + " requires two args - the path to create in ZK and the path to the local file");          System.exit(1);        }        String path=arglist.get(0).toString();        InputStream is=new FileInputStream(arglist.get(1).toString());        try {          if (zkClient.exists(path,true)) {            zkClient.setData(path,IOUtils.toByteArray(is),true);          } else {            zkClient.create(path,IOUtils.toByteArray(is),CreateMode.PERSISTENT,true);          }        }  finally {          IOUtils.closeQuietly(is);        }      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(GET)) {        List arglist=line.getArgList();        if (arglist.size() != 1) {          System.out.println("-" + GET + " requires one arg - the path to get");          System.exit(1);        }        byte[] data=zkClient.getData(arglist.get(0).toString(),null,null,true);        System.out.println(new String(data,StandardCharsets.UTF_8));      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(GET_FILE)) {        List arglist=line.getArgList();        if (arglist.size() != 2) {          System.out.println("-" + GET_FILE + "requires two args - the path to get and the file to save it to");          System.exit(1);        }        byte[] data=zkClient.getData(arglist.get(0).toString(),null,null,true);        FileUtils.writeByteArrayToFile(new File(arglist.get(1).toString()),data);      } else       if (line.getOptionValue(CMD).equals(UPDATEACLS)) {        List arglist=line.getArgList();        if (arglist.size() != 1) {          System.out.println("-" + UPDATEACLS + " requires one arg - the path to update");          System.exit(1);        }        zkClient.updateACLs(arglist.get(0).toString());      } else       if (line.getOptionValue(CMD).equalsIgnoreCase(CLUSTERPROP)) {        if (!line.hasOption(NAME)) {          System.out.println("-" + NAME + " is required for "+ CLUSTERPROP);        }        String propertyName=line.getOptionValue(NAME);        String propertyValue=line.getOptionValue(VALUE_LONG);        ClusterProperties props=new ClusterProperties(zkClient);        try {          props.setClusterProperty(propertyName,propertyValue);        } catch (        IOException ex) {          System.out.println("Unable to set the cluster property due to following error : " + ex.getLocalizedMessage());          System.exit(1);        }      } else {        System.out.println("Unknown command " + line.getOptionValue(CMD) + ". Use -h to get help.");        System.exit(1);      }    }  finally {      if (solrPort != null) {        zkServer.stop();      }      if (zkClient != null) {        zkClient.close();      }    }  } catch (  ParseException exp) {    System.out.println("Unexpected exception:" + exp.getMessage());  }}  }
class C{  public DataRow create(int size){  DataRow row=null;switch (type) {case TYPE_DOUBLE_ARRAY:    row=new DoubleArrayDataRow(new double[size]);  break;case TYPE_FLOAT_ARRAY:row=new FloatArrayDataRow(new float[size]);break;case TYPE_LONG_ARRAY:row=new LongArrayDataRow(new long[size]);break;case TYPE_INT_ARRAY:row=new IntArrayDataRow(new int[size]);break;case TYPE_SHORT_ARRAY:row=new ShortArrayDataRow(new short[size]);break;case TYPE_BYTE_ARRAY:row=new ByteArrayDataRow(new byte[size]);break;case TYPE_BOOLEAN_ARRAY:row=new BooleanArrayDataRow(new boolean[size]);break;case TYPE_DOUBLE_SPARSE_ARRAY:row=new DoubleSparseArrayDataRow(16);break;case TYPE_FLOAT_SPARSE_ARRAY:row=new FloatSparseArrayDataRow(size >> 2);break;case TYPE_LONG_SPARSE_ARRAY:row=new LongSparseArrayDataRow(size >> 2);break;case TYPE_INT_SPARSE_ARRAY:row=new IntSparseArrayDataRow(size >> 2);break;case TYPE_SHORT_SPARSE_ARRAY:row=new ShortSparseArrayDataRow(size >> 2);break;case TYPE_BYTE_SPARSE_ARRAY:row=new ByteSparseArrayDataRow(size >> 2);break;case TYPE_BOOLEAN_SPARSE_ARRAY:row=new BooleanSparseArrayDataRow(size >> 2);break;case TYPE_SPARSE_MAP:row=new SparseMapDataRow();break;default :}return row;}  }
class C{  public boolean fewKeys(){  return fewKeys;}  }
class C{  boolean isEverything(ExpressionVisitor visitor){  if (visitor.getType() == ExpressionVisitor.GET_DEPENDENCIES) {    if (sequence != null) {      visitor.getDependencies().add(sequence);    }  }  if (defaultExpression != null && !defaultExpression.isEverything(visitor)) {    return false;  }  if (checkConstraint != null && !checkConstraint.isEverything(visitor)) {    return false;  }  return true;}  }
class C{  private boolean createSetup(){  fClientName.setText(fClientName.getText().replace('\'','"'));  fClientName.setText(fClientName.getText().replace('\\','/'));  fOrgName.setText(fOrgName.getText().replace('\'','"'));  fOrgName.setText(fOrgName.getText().replace('\\','/'));  fUserClient.setText(fUserClient.getText().replace('\'','"'));  fUserClient.setText(fUserClient.getText().replace('\\','/'));  fUserOrg.setText(fUserOrg.getText().replace('\'','"'));  fUserOrg.setText(fUserOrg.getText().replace('\\','/'));  String SQL="UPDATE AD_CLient SET CreatedBy=0 WHERE Name='" + fClientName.getText() + "'";  if (DB.executeUpdate(SQL,null) != 0) {    fClientName.setBackground(AdempierePLAF.getFieldBackground_Error());    ADialog.error(m_WindowNo,this,"NotUnique",lClientName.getText());    fClientName.requestFocus();    return false;  }  fClientName.setBackground(AdempierePLAF.getFieldBackground_Normal());  SQL="UPDATE AD_User SET CreatedBy=0 WHERE Name='" + fUserClient.getText() + "'";  if (DB.executeUpdate(SQL,null) != 0) {    fUserClient.setBackground(AdempierePLAF.getFieldBackground_Error());    ADialog.error(m_WindowNo,this,"NotUnique",lUserClient.getText());    fUserClient.requestFocus();    return false;  }  fUserClient.setBackground(AdempierePLAF.getFieldBackground_Normal());  SQL="UPDATE AD_User SET CreatedBy=0 WHERE Name='" + fUserOrg.getText() + "'";  if (DB.executeUpdate(SQL,null) != 0 || fUserClient.getText().equals(fUserOrg.getText())) {    fUserOrg.setBackground(AdempierePLAF.getFieldBackground_Error());    ADialog.error(m_WindowNo,this,"NotUnique",lUserOrg.getText());    fUserOrg.requestFocus();    return false;  }  fUserOrg.setBackground(AdempierePLAF.getFieldBackground_Normal());  return true;}  }
class C{  public void testPosZero(){  String numA="27384627835298756289327365";  String numB="0";  String res="27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  public void testUntypedMap3() throws Exception {  String JSON="{\"a\":[{\"a\":\"b\"},\"value\"]}";  ObjectMapper m=new ObjectMapper();  Map<?,?> result=m.readValue(JSON,Map.class);  assertTrue(result instanceof Map<?,?>);  assertEquals(1,result.size());  Object ob=result.get("a");  assertNotNull(ob);  Collection<?> list=(Collection<?>)ob;  assertEquals(2,list.size());  JSON="{ \"var1\":\"val1\", \"var2\":\"val2\", " + "\"subvars\": [" + " {  \"subvar1\" : \"subvar2\", \"x\" : \"y\" }, "+ " { \"a\":1 } ]"+ " }";  result=m.readValue(JSON,Map.class);  assertTrue(result instanceof Map<?,?>);  assertEquals(3,result.size());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_MEMBER_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  return;case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:setOwner((N4ClassifierDefinition)null);return;}super.eUnset(featureID);}  }
class C{  void clearUberCookies(){  CookieManager cookieManager=CookieManager.getInstance();  cookieManager.setCookie(UBER_COOKIE_URL,EXPIRED_EMPTY_LOGGED_IN_COOKIE);  cookieManager.setCookie(LOGIN_COOKIE_URL,EXPIRED_EMPTY_SESSION_COOKIE);  cookieManager.removeExpiredCookie();}  }
class C{  protected boolean checkEntryNotValid(RegionEntry mapEntry){  return (mapEntry == null || (mapEntry.isRemoved() && !mapEntry.isTombstone()));}  }
class C{  public boolean supportsSessionVariables(){  return false;}  }
class C{  public void centerZoom(double dx,double dy,double scale,AffineTransform af){  af.preConcatenate(AffineTransform.getTranslateInstance(-dx,-dy));  af.preConcatenate(AffineTransform.getScaleInstance(scale,scale));  af.preConcatenate(AffineTransform.getTranslateInstance(dx,dy));  transform=af;  syncScrollBars();}  }
class C{  public synchronized void stop(){  stop(false);}  }
class C{  private void addExportRemoveVolumeSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,List<URI> boIDs) throws InternalException {  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID);  String exportStep=workflow.createStepId();  initTaskStatus(exportGroup,exportStep,Operation.Status.pending,"export remove volumes (that contain RP snapshots)");  Map<URI,List<URI>> deviceToBlockObjects=new HashMap<URI,List<URI>>();  for (  URI snapshotID : boIDs) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);    List<BlockObject> objectsToRemove=getExportObjectsForBookmark(snapshot);    for (    BlockObject blockObject : objectsToRemove) {      List<URI> blockObjects=deviceToBlockObjects.get(blockObject.getStorageController());      if (blockObjects == null) {        blockObjects=new ArrayList<URI>();        deviceToBlockObjects.put(blockObject.getStorageController(),blockObjects);      }      blockObjects.add(blockObject.getId());    }  }  for (  Map.Entry<URI,List<URI>> deviceEntry : deviceToBlockObjects.entrySet()) {    _log.info(String.format("Adding workflow step to remove RP bookmarks and associated target volumes from export.  ExportGroup: %s, Storage System: %s, BlockObjects: %s",exportGroup.getId(),deviceEntry.getKey(),deviceEntry.getValue()));    _exportWfUtils.generateExportGroupRemoveVolumes(workflow,STEP_EXPORT_REMOVE_SNAPSHOT,STEP_EXPORT_GROUP_DISABLE,deviceEntry.getKey(),exportGroupID,deviceEntry.getValue());  }  _log.info(String.format("Created export group remove snapshot steps in workflow: %s",exportGroup.getId()));}  }
class C{  private RPCServer(Config config,ServletContext context) throws AxisFault {  this.context=context;  ConfigImpl ci=(ConfigImpl)config;  this.log=ci.getLogger("application",true);  this.exceptionLog=ci.getLogger("exception",true);  initQueryStringHandlers();  ServiceAdmin.setEngine(this.getEngine(),context.getServerInfo());  webInfPath=context.getRealPath("/WEB-INF");  homeDir=ReqRspUtil.getRootPath(context);}  }
class C{  public Command handleFlowRemoved(IOFSwitch sw,OFFlowRemoved msg,FloodlightContext cntx){  U64 cookie=msg.getCookie();  if (AppCookie.extractApp(cookie) == STATIC_FLOW_APP_ID) {    OFFlowRemovedReason reason=null;switch (msg.getVersion()) {case OF_10:      reason=OFFlowRemovedReasonSerializerVer10.ofWireValue((byte)msg.getReason());    break;case OF_11:  reason=OFFlowRemovedReasonSerializerVer11.ofWireValue((byte)msg.getReason());break;case OF_12:reason=OFFlowRemovedReasonSerializerVer12.ofWireValue((byte)msg.getReason());break;case OF_13:reason=OFFlowRemovedReasonSerializerVer13.ofWireValue((byte)msg.getReason());break;case OF_14:reason=OFFlowRemovedReasonSerializerVer14.ofWireValue((byte)msg.getReason());break;default :log.debug("OpenFlow version {} unsupported for OFFlowRemovedReasonSerializerVerXX",msg.getVersion());break;}if (reason != null) {if (OFFlowRemovedReason.DELETE == reason) {log.error("Got a FlowRemove message for a infinite " + "timeout flow: {} from switch {}",msg,sw);} else if (OFFlowRemovedReason.HARD_TIMEOUT == reason || OFFlowRemovedReason.IDLE_TIMEOUT == reason) {log.debug("Received an IDLE or HARD timeout for an SFP flow. Removing it from the SFP DB.");String flowToRemove=null;Map<String,OFFlowMod> flowsByName=getFlows(sw.getId());for (Map.Entry<String,OFFlowMod> entry : flowsByName.entrySet()) {if (msg.getCookie().equals(entry.getValue().getCookie()) && (msg.getVersion().compareTo(OFVersion.OF_12) < 0 ? true : msg.getHardTimeout() == entry.getValue().getHardTimeout()) && msg.getIdleTimeout() == entry.getValue().getIdleTimeout() && msg.getMatch().equals(entry.getValue().getMatch()) && msg.getPriority() == entry.getValue().getPriority() && (msg.getVersion().compareTo(OFVersion.OF_10) == 0 ? true : msg.getTableId().equals(entry.getValue().getTableId()))) {flowToRemove=entry.getKey();break;}}log.debug("Flow to Remove: {}",flowToRemove);if (flowToRemove != null) {deleteFlow(flowToRemove);}}return Command.STOP;}}return Command.CONTINUE;}  }
class C{  public void or(int size,Register dst,Register src1,Register src2){  super.orr(size,dst,src1,src2,ShiftType.LSL,0);}  }
class C{  private static String wordShapeChris2(String s,boolean omitIfInBoundary,Collection<String> knownLCWords){  int len=s.length();  if (len <= BOUNDARY_SIZE * 2) {    return wordShapeChris2Short(s,len,knownLCWords);  } else {    return wordShapeChris2Long(s,omitIfInBoundary,len,knownLCWords);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReportSource[").append(get_ID()).append(" - ").append(getDescription()).append(" - ").append(getElementType());  sb.append("]");  return sb.toString();}  }
class C{  public List<URI> refreshConnections(final List<StorageProvider> smisProviderList){  _log.debug("In refreshConnections()");  List<URI> activeProviderURIList=new ArrayList<URI>();  for (  StorageProvider smisProvider : smisProviderList) {    try {      CimConnection connection=getConnection(smisProvider.getIPAddress(),smisProvider.getPortNumber().toString());      if (null == connection) {        _log.error("No CIMOM connection found for ip/port {}",ConnectionManager.generateConnectionCacheKey(smisProvider.getIPAddress(),smisProvider.getPortNumber()));        continue;      }      validateProviderConnection(smisProvider,connection,activeProviderURIList);    } catch (    final DatabaseException ex) {      _log.error("DatabaseException occurred while fetching the storageDevice for {} due to ",smisProvider.getId(),ex);    }catch (    final ConnectionManagerException ex) {      _log.error("No CIMOM Connection found for ipaddress due to ",ex);    }catch (    final Exception ex) {      _log.error("Exception while refreshing connections due to ",ex);    }  }  return activeProviderURIList;}  }
class C{  public static int gray(int v){  return rgba(v,v,v,255);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4mfPackage.SIMPLE_PROJECT_DEPENDENCY___GET_SCOPE:    return getScope();}return super.eInvoke(operationID,arguments);}  }
class C{  public void remove(){  phlux.remove(key);}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(StatusBarSettings.BANDWIDTH_DISPLAY_ENABLED.getValue());}  }
class C{  public boolean isReceiveEmailNotification(){  return receiveEmailNotification;}  }
class C{  public static double[] normalizeL2(double[] histogram){  double[] result=new double[histogram.length];  double len=0d;  for (int i=0; i < histogram.length; i++) {    len+=histogram[i] * histogram[i];  }  len=Math.sqrt(len);  for (int i=0; i < histogram.length; i++) {    if (histogram[i] != 0)     result[i]=((double)histogram[i]) / len; else     result[i]=0;  }  return result;}  }
class C{  public List<ReviewCommentResult> listCommentsForReview(String hash){  List<ReviewCommentResult> comments=new ArrayList<>();  try {    Map<String,ReviewComment> commentsData=gitClient.listCommentsForReview(hash);    for (    Map.Entry<String,ReviewComment> commentData : commentsData.entrySet()) {      comments.add(new ReviewCommentResult(commentData.getKey(),commentData.getValue()));    }  } catch (  GitClientException e) {    AppraiseConnectorPlugin.logError("Error loading domments for " + hash,e);    return null;  }  return comments;}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public static String convertClassNameToResourcePath(String className){  Assert.notNull(className,"Class name must not be null");  return className.replace('.','/');}  }
class C{  @Override public void onBackPressed(){  AppLog.v(this,"onBackPressed()");  if (navDrawer.isDrawerOpen(navView)) {    navDrawer.closeDrawer(navView);    return;  }  CustomFragment top=getTopFragment();  if (top != null) {    AppLog.v(this,"Top Fragment is not null");    if (!top.onBackPressed()) {      AppLog.v(this,"Top Fragment.onBackPressed was false");      AppLog.v(this,"BackStackEntryCount: " + fm.getBackStackEntryCount());      if (fm.getBackStackEntryCount() > 0) {        fm.popBackStack();      } else {        snackbarExitApp.show();      }      return;    } else {      AppLog.v(this,"Top Fragment.onBackPressed was true");      return;    }  }  if (!snackbarExitApp.isShown()) {    snackbarExitApp.show();  }}  }
class C{  public void addLastSegment(){  segList.addPt(offset1.p1);}  }
class C{  public static String checkEmpty(String string1,String string2,String string3){  if (UtilValidate.isNotEmpty(string1))   return string1; else   if (UtilValidate.isNotEmpty(string2))   return string2; else   if (UtilValidate.isNotEmpty(string3))   return string3; else   return "";}  }
class C{  public void rollbackTransaction(){  log.trace("rollbackTransaction({})",sessionFactoryName);  Transaction tx=getSession().getTransaction();  if (tx.isActive() && !tx.wasRolledBack()) {    tx.rollback();  }}  }
class C{  public BorderUIResource(Border delegate){  if (delegate == null) {    throw new IllegalArgumentException("null border delegate argument");  }  this.delegate=delegate;}  }
class C{  public static <T extends Comparable<?>>Range<T> atLeast(T lowerEndpoint){  return Range.range(lowerEndpoint,BoundType.CLOSED,null,BoundType.OPEN);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  double currentVal;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double flowDir=0;  double flowLength=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            flowLength=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              flowLength+=gridLengths[i];              x+=dX[i];              y+=dY[i];              currentVal=output.getValue(y,x);              if (flowLength > currentVal) {                output.setValue(y,x,flowLength);              }              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.841 -0500",hash_original_method="FF1AB110B94FCC8AEFA697D75FFC57DD",hash_generated_method="B371B1A5EBF86980C6290FA035BAE684") public void connected(){}  }
class C{  public final void selectNone(){  select(getCaretPosition(),getCaretPosition());}  }
class C{  public static boolean stacksMatch(ItemStack stack1,ItemStack stack2,boolean checkNBT){  return stack1 != null && stack2 != null && stack1.isItemEqual(stack2) && (!checkNBT || ItemStack.areItemStackTagsEqual(stack1,stack2));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public byte[] decryptData(final byte[] cyphered) throws CryptoException {  return decryptData(cyphered,cyphered.length,0);}  }
class C{  private void runAsync(AsyncContext ctx,Runnable work){  executorService.submit(null);}  }
class C{  public static String transform(InputSource xml,InputSource xsl) throws TransformerException, SAXException, IOException {  return transform(parse(xml,null,false),xsl,null);}  }
class C{  void loadComment(NamedBean t,Element elem){  String c=elem.getChildText("comment");  if (c != null) {    t.setComment(c);  }}  }
class C{  public boolean sendClientReady(){  return sentClientReady.compareAndSet(false,true);}  }
class C{  public boolean addNetworkConnection(NetworkConnection networkConnection){  return networkConnections.add(networkConnection);}  }
class C{  @Override public boolean accept(String category){  return "openurl".equals(category);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private void performProvisioningProcessing(String controllerId,String instanceId,PropertyHandler paramHandler) throws Exception {  vSysProcessor.setDelegate(vServerProcessor);  try {    if (paramHandler.isVirtualServerProvisioning()) {      vServerProcessor.process(controllerId,instanceId,paramHandler);    } else {      vSysProcessor.process(controllerId,instanceId,paramHandler);    }  } catch (  CommunicationException e) {    throw e.getSuspendException();  }catch (  IaasException e) {    if (e.isBusyMessage()) {      logger.info("Ignoring exception since it is marked as BusyMessage: " + e.getMessage());    } else {      throw e;    }  }catch (  APPlatformException e) {    throw e;  }}  }
class C{  public ServerInfo(){  super(DEFAULT_NAME);}  }
class C{  public static void p(String txt,int level,boolean timestamp){  String time="";  int simTime=SimClock.getIntTime();  if (level < debugLevel) {    return;  }  if (timestamp) {    time="[@" + simTime + "]";  }  out.println("D" + time + ": "+ txt);}  }
class C{  public static void dataChanged(Context context){  dataChanged(context,0);}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException {  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup,parentProduct);  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;  unitPrice=unitPrice == null ? BigDecimal.ZERO : unitPrice;  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;  boolean triggerPriceRules=triggerPriceRulesBool == null ? true : triggerPriceRulesBool.booleanValue();  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();  if ("Y".equals(product.getString("isVirtual"))) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));    String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_virtual",messageMap,cart.getLocale());    Debug.logWarning(excMsg,module);    throw new CartItemModifyException(excMsg);  }  java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  if (!skipProductChecks.booleanValue()) {    isValidCartProduct(configWrapper,product,nowTimestamp,cart.getLocale());  }  if ("ASSET_USAGE".equals(product.getString("productTypeId")) || "ASSET_USAGE_OUT_IN".equals(product.getString("productTypeId"))) {    if (reservStart == null) {      String excMsg=UtilProperties.getMessage(resource_error,"item.missing_reservation_starting_date",cart.getLocale());      throw new CartItemModifyException(excMsg);    }    if (reservStart.before(UtilDateTime.nowTimestamp())) {      String excMsg=UtilProperties.getMessage(resource_error,"item.reservation_from_tomorrow",cart.getLocale());      throw new CartItemModifyException(excMsg);    }    newItem.setReservStart(reservStart);    if (reservLength.compareTo(BigDecimal.ONE) < 0) {      String excMsg=UtilProperties.getMessage(resource_error,"item.number_of_days",cart.getLocale());      throw new CartItemModifyException(excMsg);    }    newItem.setReservLength(reservLength);    if (product.get("reservMaxPersons") != null) {      BigDecimal reservMaxPersons=product.getBigDecimal("reservMaxPersons");      if (reservMaxPersons.compareTo(reservPersons) < 0) {        Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("reservMaxPersons",product.getString("reservMaxPersons"),"reservPersons",reservPersons);        String excMsg=UtilProperties.getMessage(resource_error,"item.maximum_number_of_person_renting",messageMap,cart.getLocale());        Debug.logInfo(excMsg,module);        throw new CartItemModifyException(excMsg);      }    }    newItem.setReservPersons(reservPersons);    if (product.get("reserv2ndPPPerc") != null)     newItem.setReserv2ndPPPerc(product.getBigDecimal("reserv2ndPPPerc"));    if (product.get("reservNthPPPerc") != null)     newItem.setReservNthPPPerc(product.getBigDecimal("reservNthPPPerc"));    if ((accommodationMapId != null) && (accommodationSpotId != null)) {      newItem.setAccommodationId(accommodationMapId,accommodationSpotId);    }    String isAvailable=checkAvailability(product.getString("productId"),quantity,reservStart,reservLength,cart);    if (isAvailable.compareTo("OK") != 0) {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"availableMessage",isAvailable);      String excMsg=UtilProperties.getMessage(resource_error,"item.product_not_available",messageMap,cart.getLocale());      Debug.logInfo(excMsg,module);      throw new CartItemModifyException(isAvailable);    }  }  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());  newItem.setBasePrice(unitPrice);  if (cartLocation == null) {    cart.addItemToEnd(newItem);  } else {    cart.addItem(cartLocation.intValue(),newItem);  }  if (selectedAmount.compareTo(BigDecimal.ZERO) > 0) {    newItem.setSelectedAmount(selectedAmount);  }  try {    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps,true,triggerPriceRules,skipInventoryChecks.booleanValue());  } catch (  CartItemModifyException e) {    Debug.logWarning(e.getMessage(),module);    cart.removeCartItem(cart.getItemIndex(newItem),dispatcher);    cart.clearItemShipInfo(newItem);    cart.removeEmptyCartItems();    throw e;  }  return newItem;}  }
class C{  @SuppressWarnings("unchecked") public static <V,E,G extends Hypergraph<V,E>>G createInducedSubgraph(Collection<V> vertices,G graph){  G subgraph=null;  try {    subgraph=(G)graph.getClass().newInstance();    for (    V v : vertices) {      if (!graph.containsVertex(v))       throw new IllegalArgumentException("Vertex " + v + " is not an element of "+ graph);      subgraph.addVertex(v);    }    for (    E e : graph.getEdges()) {      Collection<V> incident=graph.getIncidentVertices(e);      if (vertices.containsAll(incident))       subgraph.addEdge(e,incident,graph.getEdgeType(e));    }  } catch (  InstantiationException e) {    throw new RuntimeException("Unable to create copy of existing graph: ",e);  }catch (  IllegalAccessException e) {    throw new RuntimeException("Unable to create copy of existing graph: ",e);  }  return subgraph;}  }
class C{  public boolean isPositiveReview(int index){  return index % 2 == 0;}  }
class C{  public TripSchedule applyToTripSchedule(TripSchedule tripSchedule){  if (activeServices.get(tripSchedule.serviceCode) && tripSchedule.overlapsTimeRange(fromTime,toTime)) {    return tripSchedule;  } else {    return null;  }}  }
class C{  @Override public View generateView(Context ctx,ViewGroup parent){  VH viewHolder=getViewHolder(LayoutInflater.from(ctx).inflate(getLayoutRes(),parent,false));  bindView(viewHolder,Collections.EMPTY_LIST);  return viewHolder.itemView;}  }
class C{  public static String decode(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '+':      sb.append(' ');    break;case '%':  try {    sb.append((char)Integer.parseInt(s.substring(i + 1,i + 3),16));  } catch (  NumberFormatException e) {    throw new IllegalArgumentException(s);  }i+=2;break;default :sb.append(c);break;}}String result=sb.toString();try {byte[] inputBytes=result.getBytes("8859_1");result=new String(inputBytes);} catch (UnsupportedEncodingException e) {}return result;}  }
class C{  public ConfigurationDBAdapter configure(String resource) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from resource: " + resource);  }  InputStream stream=getConfigurationInputStream(resource);  ConfigurationDBAdapterParser.doConfigure(this,stream,resource);  return this;}  }
class C{  public static void convertTsvToDat(String tsvFileName,String datFileName){  convertTsvToDat(tsvFileName,datFileName,DEFAULT_RADIUS);}  }
class C{  private static void validateLength(String name,Object value,Integer minSize,Integer maxSize){  if (minSize != null) {    Validation.minSize(name,value,minSize);  }  if (maxSize != null) {    Validation.maxSize(name,value,maxSize);  }}  }
class C{  public DOMAccessException(String msg){  this(null,msg);}  }
class C{  public void addElapsedTimeFrom(long startTime){  add(System.nanoTime() - startTime);}  }
class C{  protected PragmaImpl(){  super();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void showContacts(View v){  Log.i(TAG,"Show contacts button pressed. Checking permissions.");  if (ActivityCompat.checkSelfPermission(this,Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this,Manifest.permission.WRITE_CONTACTS) != PackageManager.PERMISSION_GRANTED) {    Log.i(TAG,"Contact permissions has NOT been granted. Requesting permissions.");    requestContactsPermissions();  } else {    Log.i(TAG,"Contact permissions have already been granted. Displaying contact details.");    showContactDetails();  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3){  return construct(e1,e2,e3);}  }
class C{  public boolean isRelative(){  return isRel;}  }
class C{  public DKeyIdentifierChooser(JDialog parent,String title,PublicKey publicKey,byte[] keyIdentifier) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.publicKey=publicKey;  initComponents(keyIdentifier);}  }
class C{  public boolean isCalculationTypePercent(){  return CALCULATIONTYPE_PercentageOp1OfOp2.equals(getCalculationType());}  }
class C{  public ZoneOffsetTransition previousTransition(Instant instant){  if (savingsInstantTransitions.length == 0) {    return null;  }  long epochSec=instant.getEpochSecond();  if (instant.getNano() > 0 && epochSec < Long.MAX_VALUE) {    epochSec+=1;  }  long lastHistoric=savingsInstantTransitions[savingsInstantTransitions.length - 1];  if (lastRules.length > 0 && epochSec > lastHistoric) {    ZoneOffset lastHistoricOffset=wallOffsets[wallOffsets.length - 1];    int year=findYear(epochSec,lastHistoricOffset);    ZoneOffsetTransition[] transArray=findTransitionArray(year);    for (int i=transArray.length - 1; i >= 0; i--) {      if (epochSec > transArray[i].toEpochSecond()) {        return transArray[i];      }    }    int lastHistoricYear=findYear(lastHistoric,lastHistoricOffset);    if (--year > lastHistoricYear) {      transArray=findTransitionArray(year);      return transArray[transArray.length - 1];    }  }  int index=Arrays.binarySearch(savingsInstantTransitions,epochSec);  if (index < 0) {    index=-index - 1;  }  if (index <= 0) {    return null;  }  return new ZoneOffsetTransition(savingsInstantTransitions[index - 1],wallOffsets[index - 1],wallOffsets[index]);}  }
class C{  public static void performTask(EntityPlayer player,ItemStack stack,float amount){  levelTool(stack);  if (player.capabilities.isCreativeMode || !HFTools.HF_CONSUME_HUNGER)   return;  consumeHunger(player,amount);  stack.getSubCompound("Data",true).setInteger("Damage",stack.getSubCompound("Data",true).getInteger("Damage") + 1);}  }
class C{  @LargeTest public void testEffectSetgetDuration() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "MPEG4_SP_640x480_30fps_512Kbps_0_27.mp4";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect1",1000,2000,EffectColor.TYPE_COLOR,EffectColor.PINK);  mediaVideoItem1.addEffect(effectColor1);  effectColor1.setDuration(5000);  assertEquals("Updated Effect Duration",5000,effectColor1.getDuration());  try {    effectColor1.setDuration(mediaVideoItem1.getDuration() + 1000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect Color duration > mediaVideoItemDuration",flagForException);  assertEquals("Effect Duration",5000,effectColor1.getDuration());  flagForException=false;  try {    effectColor1.setDuration(-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect Color duration = -1",flagForException);}  }
class C{  @Override public Eval<Optional<T>> reduce(final BinaryOperator<T> accumulator){  return Eval.later(null);}  }
class C{  private void addNodeToList(List vmList,int startIndexForNode,int endIndexForNode){  vmList.clear();  for (int i=startIndexForNode; i < endIndexForNode; i++) {    vmList.add(vm[i]);  }}  }
class C{  public void select(OMGraphicList list){  if (list != null && !list.isEmpty()) {    OMGraphic omg=list.getOMGraphicAt(0);    DrawingTool dt=getDrawingTool();    if (dt != null && dt.canEdit(omg.getClass())) {      dt.setBehaviorMask(OMDrawingTool.QUICK_CHANGE_BEHAVIOR_MASK);      if (dt.edit(omg,this) == null) {        fireRequestInfoLine("Can't figure out how to modify this object.");      }    }  }}  }
class C{  public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public static ChromeTab createTabForLazyLoad(ChromeActivity activity,boolean incognito,WindowAndroid nativeWindow,TabLaunchType type,int parentId,LoadUrlParams loadUrlParams){  ChromeTab tab=new ChromeTab(INVALID_TAB_ID,activity,incognito,nativeWindow,type,parentId,TabCreationState.FROZEN_FOR_LAZY_LOAD,null);  tab.setPendingLoadParams(loadUrlParams);  return tab;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "StripChart.gif",BeanVisual.ICON_PATH + "StripChart_animated.gif");}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  public static int rand(int seed){  seed^=(seed << 6);  seed^=(seed >>> 21);  seed^=(seed << 7);  return seed;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  if (abort()) {    return;  }  if (signMessagePanel == null) {    return;  }  String addressText=null;  if (signMessagePanel.getAddressTextArea() != null) {    addressText=signMessagePanel.getAddressTextArea().getText();    if (addressText != null) {      addressText=WhitespaceTrimmer.trim(addressText);    }  }  String messageText=null;  if (signMessagePanel.getMessageTextArea() != null) {    messageText=signMessagePanel.getMessageTextArea().getText();  }  CharSequence walletPassword=null;  if (signMessagePanel.getWalletPasswordField() != null) {    walletPassword=CharBuffer.wrap(signMessagePanel.getWalletPasswordField().getPassword());    if (bitcoinController.getModel().getActiveWallet().isEncrypted()) {      if (walletPassword.length() == 0) {        signMessagePanel.setMessageText1(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustEnterTheWalletPassword"));        signMessagePanel.setMessageText2(" ");        return;      }      if (!bitcoinController.getModel().getActiveWallet().checkPassword(walletPassword)) {        signMessagePanel.setMessageText1(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));        signMessagePanel.setMessageText2(" ");        return;      }    }  }  log.debug("addressText = '" + addressText + "'");  log.debug("messageText = '" + messageText + "'");  if (addressText == null || "".equals(addressText)) {    signMessagePanel.setMessageText1(controller.getLocaliser().getString("signMessageAction.noAddress"));    signMessagePanel.setMessageText2(" ");    return;  }  if (messageText == null || "".equals(messageText.trim())) {    signMessagePanel.setMessageText1(controller.getLocaliser().getString("signMessageAction.noMessage"));    signMessagePanel.setMessageText2(" ");    return;  }  try {    Address signingAddress=new Address(bitcoinController.getModel().getNetworkParameters(),addressText);    Wallet activeWallet=bitcoinController.getModel().getActiveWallet();    Iterable<ECKey> keychain=activeWallet.getKeys();    Iterator<ECKey> iterator=keychain.iterator();    ECKey signingKey=null;    while (iterator.hasNext()) {      ECKey ecKey=iterator.next();      if (ecKey.toAddress(bitcoinController.getModel().getNetworkParameters()).equals(signingAddress)) {        signingKey=ecKey;        break;      }    }    if (signingKey == null) {      signMessagePanel.setMessageText1(controller.getLocaliser().getString("signMessageAction.noSigningKey",new String[]{addressText}));      signMessagePanel.setMessageText2(" ");    } else {      KeyParameter aesKey=null;      if (signingKey.isEncrypted()) {        aesKey=signingKey.getKeyCrypter().deriveKey(walletPassword);        signingKey=signingKey.decrypt(signingKey.getKeyCrypter(),aesKey);      }      log.debug("Trying to replace key");      String filename=Utils.bytesToHexString(signingKey.getPubKeyHash());      FileInputStream fis=new FileInputStream(filename + ".key");      ObjectInputStream in=new ObjectInputStream(fis);      RemoteECKey rECKey=(RemoteECKey)in.readObject();      in.close();      fis.close();      RemoteECKey signingKeyR=null;      if (rECKey != null && Arrays.equals(signingKey.getPubKey(),rECKey.getPubKey())) {        log.debug("Found key to replace");        signingKeyR=rECKey;      }      String signatureBase64=signingKeyR.signMessage(messageText,aesKey);      System.out.println("Signature returned");      if (signatureBase64 == null) {        System.out.println("Signature returned null");        throw new KeyCrypterException("Transaction rejected by phone");      }      if (signMessagePanel.getSignatureTextArea() != null) {        signMessagePanel.getSignatureTextArea().setText(signatureBase64);        signMessagePanel.setMessageText1(controller.getLocaliser().getString("signMessageAction.success"));        signMessagePanel.setMessageText2(" ");      }    }  } catch (  KeyCrypterException e) {    logError(e);  }catch (  WrongNetworkException e) {    logError(e);  }catch (  AddressFormatException e) {    logError(e);  }catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  ClassNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public AudioWife addOnCompletionListener(OnCompletionListener listener){  mCompletionListeners.add(0,listener);  return this;}  }
class C{  @Override public String toString(){  return "DenseFeatureStore{" + "instanceList=" + instanceList + '}';}  }
class C{  Command createSubmitCommand(String name,String value){  hasSubmitButton=true;  if ((value == null) || (value.equals(""))) {    value=htmlC.getUIManager().localize("html.submit",DEFAULT_SUBMIT_TEXT);  }  return new NamedCommand(name,value,this,true);}  }
class C{  public Builder classifierIds(String classifierId){  if (classifierIds == null) {    classifierIds=new ArrayList<String>();  }  classifierIds.add(classifierId);  return this;}  }
class C{  public void registerAggregatorParser(Class<? extends Aggregator.Parser> parser){  aggParsers.add(parser);}  }
class C{  public static BasicLagGraph serializableInstance(){  BasicLagGraph lagGraph=new BasicLagGraph();  lagGraph.addFactor("X");  lagGraph.setMaxLagAllowable(2);  return lagGraph;}  }
class C{  public void addUrlFeatures(NutchDocument doc,String urlString){  try {    URL url=new URL(urlString);    StringTokenizer names=new StringTokenizer(url.getPath(),"/-");    if (names.hasMoreTokens())     names.nextToken();    while (names.hasMoreTokens()) {      String feature=names.nextToken();      addFeature(doc,feature);    }  } catch (  MalformedURLException e) {    if (LOG.isWarnEnabled()) {      LOG.warn("CC: failed to parse url: " + urlString + " : "+ e);    }  }}  }
class C{  public static long add(long globalId){  ContentValues vals=new ContentValues(4);  vals.put(GLOBAL_ID,globalId);  vals.put(NAME,"");  vals.put(NORMALISED_NAME,"");  vals.put(COLOR,defaultColor());  vals.put(DIRTY,0);  return ContentUris.parseId(cr().insert(CONTENT_URI,vals));}  }
class C{  public static File createTempDir(File parent){  File temp=new File(parent,Integer.toString(Math.abs(UNSEEDED_RANDOM.nextInt()) % 1000000));  temp.delete();  temp.mkdir();  temp.deleteOnExit();  return temp;}  }
class C{  public static Type[] toTypes(Class<?>[] classes){  if (classes == null || classes.length == 0)   return new Type[0];  Type[] types=new Type[classes.length];  for (int i=0; i < classes.length; i++) {    types[i]=Type.getType(classes[i]);  }  return types;}  }
class C{  public double accruedAmount(){  return accruedAmount(new Date());}  }
class C{  public void unbind(){  unbind(false);}  }
class C{  public Wine createPrefix(String version,String distribution,String architecture) throws CancelException {  if (prefix == null) {    throw new ScriptFailureException("Prefix must be selected!");  }  if (prefix.exists() && userWantsToOverWritePrefix()) {    return this;  }  wineVersion=new WineVersion(new Version(version),new WineDistribution(OperatingSystem.fetchCurrentOperationSystem(),Architecture.valueOf(architecture),distribution),setupWizard);  if (!wineVersion.isInstalled()) {    wineVersion.install();  }  final ProgressControl progressControl=this.setupWizard.progressBar(format(translate("Please wait while the virtual drive is being created..."),prefixName));  try (DirectoryWatcherSize observableDirectorySize=new DirectoryWatcherSize(executorService,prefix.getWinePrefixDirectory().toPath())){    observableDirectorySize.setOnChange(null);    Process process=wineVersion.getInstallation().createPrefix(this.prefix);    waitWineProcess(process);  } catch (  WineException e) {    throw new ScriptFailureException(e);  }  return this;}  }
class C{  public static Ed25519GroupElement doubleGroupElement(final Ed25519GroupElement g){  return addGroupElements(g,g);}  }
class C{  public boolean isSearchable(final int column) throws SQLException {  return true;}  }
class C{  private void saveStorage(){  this.storage.put(0,pendingStorage.toByteArray());}  }
class C{  public static long copy(InputStream in,OutputStream out,long length) throws IOException {  try {    long copied=0;    int len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    byte[] buffer=new byte[len];    while (length > 0) {      len=in.read(buffer,0,len);      if (len < 0) {        break;      }      if (out != null) {        out.write(buffer,0,len);      }      copied+=len;      length-=len;      len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    }    return copied;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  private double logLikelihood(double[][] trainYs,double[][] probs){  double logLikelihood=0;  for (int i=0; i < trainYs.length; i++) {    for (int j=0; j < m_NumClasses; j++) {      if (trainYs[i][j] == 1.0 - m_Offset) {        logLikelihood-=Math.log(probs[i][j]);      }    }  }  return logLikelihood / (double)trainYs.length;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null)   return pluggy.getWebpages();  return null;}  }
class C{  public final int length(){  return longs.length();}  }
class C{  public TermsByQueryRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  public void onEvent(Event e){  log.fine("WPayment.actionPerformed - " + e.getTarget().getId());  if (e.getTarget().getId().equals(ConfirmPanel.A_OK)) {    if (checkMandatory()) {      saveChanges();      dispose();    }  } else   if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL))   dispose(); else   if (e.getTarget() == paymentCombo) {    onPaymentComboSelection();  } else   if (e.getTarget() == sCurrencyCombo) {    KeyNamePair pp=sCurrencyCombo.getSelectedItem().toKeyNamePair();    BigDecimal amt=MConversionRate.convert(Env.getCtx(),m_Amount,m_C_Currency_ID,pp.getKey(),m_AD_Client_ID,m_AD_Org_ID);    sAmountField.setValue(amt);  } else   if (e.getTarget() == bCurrencyCombo) {    KeyNamePair pp=bCurrencyCombo.getSelectedItem().toKeyNamePair();    BigDecimal amt=MConversionRate.convert(Env.getCtx(),m_Amount,m_C_Currency_ID,pp.getKey(),m_AD_Client_ID,m_AD_Org_ID);    bAmountField.setValue(amt);  } else   if (e.getTarget() == kOnline || e.getTarget() == sOnline) {    this.lockUI();    Clients.response(new AuEcho(this,"runProcessOnline",null));  }}  }
class C{  public Bounds addYValue(final double y){  final double small=y - FUDGE_FACTOR;  if (minY == null || minY > small) {    minY=new Double(small);  }  final double large=y + FUDGE_FACTOR;  if (maxY == null || maxY < large) {    maxY=new Double(large);  }  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.PROJECT_DESCRIPTION__VENDOR_NAME:    return getVendorName();case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_VERSION:  return getProjectVersion();case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_TYPE:return getProjectType();case N4mfPackage.PROJECT_DESCRIPTION__MAIN_MODULE:return getMainModule();case N4mfPackage.PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT:return getExtendedRuntimeEnvironment();case N4mfPackage.PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES:return getProvidedRuntimeLibraries();case N4mfPackage.PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES:return getRequiredRuntimeLibraries();case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES:return getProjectDependencies();case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTATION_ID:return getImplementationId();case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS:return getImplementedProjects();case N4mfPackage.PROJECT_DESCRIPTION__INIT_MODULES:return getInitModules();case N4mfPackage.PROJECT_DESCRIPTION__EXEC_MODULE:return getExecModule();case N4mfPackage.PROJECT_DESCRIPTION__OUTPUT_PATH:return getOutputPath();case N4mfPackage.PROJECT_DESCRIPTION__LIBRARY_PATHS:return getLibraryPaths();case N4mfPackage.PROJECT_DESCRIPTION__RESOURCE_PATHS:return getResourcePaths();case N4mfPackage.PROJECT_DESCRIPTION__SOURCE_FRAGMENT:return getSourceFragment();case N4mfPackage.PROJECT_DESCRIPTION__MODULE_FILTERS:return getModuleFilters();case N4mfPackage.PROJECT_DESCRIPTION__TESTED_PROJECTS:return getTestedProjects();case N4mfPackage.PROJECT_DESCRIPTION__MODULE_LOADER:return getModuleLoader();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean dumpService(FileDescriptor fd,PrintWriter pw,String name,String[] args,int opti,boolean dumpAll){  ArrayList<ServiceRecord> services=new ArrayList<ServiceRecord>();synchronized (this) {    int[] users=mAm.getUsersLocked();    if ("all".equals(name)) {      for (      int user : users) {        for (        ServiceRecord r1 : mServiceMap.getAllServices(user)) {          services.add(r1);        }      }    } else {      ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;      int objectId=0;      if (componentName == null) {        try {          objectId=Integer.parseInt(name,16);          name=null;          componentName=null;        } catch (        RuntimeException e) {        }      }      for (      int user : users) {        for (        ServiceRecord r1 : mServiceMap.getAllServices(user)) {          if (componentName != null) {            if (r1.name.equals(componentName)) {              services.add(r1);            }          } else           if (name != null) {            if (r1.name.flattenToString().contains(name)) {              services.add(r1);            }          } else           if (System.identityHashCode(r1) == objectId) {            services.add(r1);          }        }      }    }  }  if (services.size() <= 0) {    return false;  }  boolean needSep=false;  for (int i=0; i < services.size(); i++) {    if (needSep) {      pw.println();    }    needSep=true;    dumpService("",fd,pw,services.get(i),args,dumpAll);  }  return true;}  }
class C{  public void addInterface(String name){  cachedInterfaces=null;  int info=constPool.addClassInfo(name);  if (interfaces == null) {    interfaces=new int[1];    interfaces[0]=info;  } else {    int n=interfaces.length;    int[] newarray=new int[n + 1];    System.arraycopy(interfaces,0,newarray,0,n);    newarray[n]=info;    interfaces=newarray;  }}  }
class C{  public static boolean isBigInteger(CharSequence self){  try {    new BigInteger(self.toString().trim());    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  private List<SubTable> splitOn(String... columnNames){  int columnCount=columnNames.length;  List<Column> columns=original.columns(columnNames);  List<SubTable> tables=new ArrayList<>();  int[] columnIndices=new int[columnCount];  for (int i=0; i < columnCount; i++) {    columnIndices[i]=original.columnIndex(columnNames[i]);  }  Table empty=original.emptyCopy();  SubTable newView=new SubTable(empty);  String lastKey="";  newView.setName(lastKey);  for (int row=0; row < original.rowCount(); row++) {    String newKey="";    List<String> values=new ArrayList<>();    for (int col=0; col < columnCount; col++) {      if (col > 0)       newKey=newKey + SPLIT_STRING;      String groupKey=original.get(columnIndices[col],row);      newKey=newKey + groupKey;      values.add(groupKey);    }    if (!newKey.equals(lastKey)) {      if (!newView.isEmpty()) {        tables.add(newView);      }      newView=new SubTable(empty);      newView.setName(newKey);      newView.setValues(values);      lastKey=newKey;    }    newView.addRow(row,original);  }  if (!tables.contains(newView) && !newView.isEmpty()) {    if (columnCount == 1) {      tables.add(newView);    } else {      tables.add(newView);    }  }  return tables;}  }
class C{  public void actionPerformed(ActionEvent e){  ValueNamePair AD_Language=(ValueNamePair)cbLanguage.getSelectedItem();  if (AD_Language == null) {    statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"LanguageSetupError"),true);    return;  }  ValueNamePair AD_Table=(ValueNamePair)cbTable.getSelectedItem();  if (AD_Table == null)   return;  boolean imp=(e.getSource() == bImport);  KeyNamePair AD_Client=(KeyNamePair)cbClient.getSelectedItem();  int AD_Client_ID=-1;  if (AD_Client != null)   AD_Client_ID=AD_Client.getKey();  String startDir=Ini.getAdempiereHome() + File.separator + "data";  JFileChooser chooser=new JFileChooser(startDir);  chooser.setMultiSelectionEnabled(false);  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  int returnVal=imp ? chooser.showOpenDialog(panel) : chooser.showSaveDialog(panel);  if (returnVal != JFileChooser.APPROVE_OPTION)   return;  String directory=chooser.getSelectedFile().getAbsolutePath();  statusBar.setStatusLine(directory);  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  Translation t=new Translation(Env.getCtx());  String msg=t.validateLanguage(AD_Language.getValue());  if (msg.length() > 0) {    ADialog.error(m_WindowNo,panel,"LanguageSetupError",msg);    return;  }  if (AD_Table.getValue().equals("")) {    msg=null;    for (int i=1; i < cbTable.getItemCount(); i++) {      AD_Table=(ValueNamePair)cbTable.getItemAt(i);      msg=imp ? t.importTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue()) : t.exportTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue());    }    if (msg == null || msg.length() == 0)     msg=(imp ? "Import" : "Export") + " Successful. [" + directory+ "]";    statusBar.setStatusLine(directory);  } else {    msg=null;    msg=imp ? t.importTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue()) : t.exportTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue());    if (msg == null || msg.length() == 0)     msg=(imp ? "Import" : "Export") + " Successful. [" + directory+ "]";    statusBar.setStatusLine(msg);  }  panel.setCursor(Cursor.getDefaultCursor());}  }
class C{  @Override public void json(String json){  if (Helper.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    json=json.trim();    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);      return;    }    e("Invalid Json");  } catch (  JSONException e) {    e("Invalid Json");  }}  }
class C{  public void makeDirectory(String dir) throws IOException {  send("MKD " + dir);  readCode(226,257);}  }
class C{  public Dimension maximumLayoutSize(Container target){  checkContainer(target);  checkRequests();  Dimension size=new Dimension(xTotal.maximum,yTotal.maximum);  Insets insets=target.getInsets();  size.width+=insets.left + insets.right;  size.height+=insets.top + insets.bottom;  return size;}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  public boolean hasIncomingStreamInstances(){  if (m_listenees.size() == 0) {    return false;  }  if (m_listenees.containsKey("instance")) {    return true;  }  return false;}  }
class C{  private int adjustPriority(int priority){  try {    Subtypes2 subtypes2=AnalysisContext.currentAnalysisContext().getSubtypes2();    if (!subtypes2.hasSubtypes(getClassDescriptor())) {      priority++;    } else {      Set<ClassDescriptor> mySubtypes=subtypes2.getSubtypes(getClassDescriptor());      String myPackagename=getThisClass().getPackageName();      for (      ClassDescriptor c : mySubtypes) {        if (c.equals(getClassDescriptor())) {          continue;        }        if (!c.getPackageName().equals(myPackagename)) {          priority--;          break;        }      }    }  } catch (  ClassNotFoundException e) {    bugReporter.reportMissingClass(e);  }  return priority;}  }
class C{  public void calcMinorTick(){  minorTick=majorTick;  double u=minorTick;  double r=majorTick;  minorTickCount=(int)(r / u);  while (minorTickCount < prefMinorTickCount) {    if (fraction != QUARTERS) {      u=minorTick / 2;      if (!isDiscrete || u == Math.floor(u)) {        minorTickCount=(int)(r / u);        if (minorTickCount >= prefMinorTickCount)         break;      }      u=minorTick / 4;      if (!isDiscrete || u == Math.floor(u)) {        minorTickCount=(int)(r / u);        if (minorTickCount >= prefMinorTickCount)         break;      }    }    u=minorTick / 5;    if (!isDiscrete || u == Math.floor(u)) {      minorTickCount=(int)(r / u);      if (minorTickCount >= prefMinorTickCount)       break;    }    if (isDiscrete && (minorTick / 10) != Math.floor(minorTick / 10)) {      u=minorTick;      minorTickCount=(int)(r / u);      break;    }    minorTick/=10;    u=minorTick;    minorTickCount=(int)(r / u);  }  minorTick=u;  minorTickCount--;}  }
class C{  public GSSCredential cred(){  return cred;}  }
class C{  @SuppressWarnings("unchecked") public void addField(String name,Object value){  Object existing=_fields.get(name);  if (existing == null) {    if (value instanceof Collection) {      Collection<Object> c=new ArrayList<>(3);      for (      Object o : (Collection<Object>)value) {        c.add(o);      }      this.setField(name,c);    } else {      this.setField(name,value);    }    return;  }  Collection<Object> vals=null;  if (existing instanceof Collection) {    vals=(Collection<Object>)existing;  } else {    vals=new ArrayList<>(3);    vals.add(existing);  }  if (value instanceof Iterable) {    for (    Object o : (Iterable<Object>)value) {      vals.add(o);    }  } else   if (value instanceof Object[]) {    for (    Object o : (Object[])value) {      vals.add(o);    }  } else {    vals.add(value);  }  _fields.put(name,vals);}  }
class C{  public UISelectOneTestCase(String name){  super(name);}  }
class C{  public static String toBinaryString(byte b){  byte[] ba=new byte[1];  ba[0]=b;  return byteArrayToBinaryString(ba);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns08.class,args);}  }
class C{  @Override public void release(){  this.binding=null;  this.rendered=null;  super.release();}  }
class C{  public void tearDownInstance() throws Exception {  if (miniAccumuloCluster != null) {    log.info("Stopping " + driverName + " cluster");    try {      miniAccumuloCluster.stop();    } catch (    IOException|InterruptedException e) {      log.error("Error stopping " + driverName + " cluster",e);    }    miniAccumuloCluster=null;  }}  }
class C{  public boolean isNullOriginAllowed(){  ensureEnabled();  return nullOriginAllowed;}  }
class C{  private void calcStackSize(List<BarEntry> yVals){  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;  }}  }
class C{  protected boolean copyTo(LinkedList files,String todteddir){  if (files == null) {    Debug.error("No files configured for copying!");    return false;  }  Iterator it=files.iterator();  while (it.hasNext()) {    File file=(File)it.next();    DTEDNameTranslator dnt=locator.getTranslator();    try {      dnt.set(file.getAbsolutePath());      String dsd=dnt.getSubDirs();      if (dsd != null && dsd.length() > 0) {        dsd="/" + dsd;      }      File toDir=new File(todteddir + dsd);      if (!toDir.exists()) {        toDir.mkdirs();      }      File outputFile=new File(toDir,dnt.getFileName());      if (Debug.debugging("dted")) {        Debug.output("DTEDAdmin copying " + file.getAbsolutePath() + " to "+ outputFile.getAbsolutePath());      }      BinaryBufferedFile input=new BinaryBufferedFile(file);      RandomAccessFile output=new RandomAccessFile(outputFile,"rw");      byte[] bytes=new byte[4096];      int numBytes=input.read(bytes);      while (numBytes > 0) {        output.write(bytes,0,numBytes);        numBytes=input.read(bytes);      }      input.close();      output.close();    } catch (    FormatException fe) {      continue;    }catch (    IOException ioe) {      continue;    }  }  return true;}  }
class C{  public static int compare(Element e1,Element e2){  ElementTransformers t1=getTransformers(e1);  ElementTransformers t2=getTransformers(e2);  if ((null != t1) && (null != t2)) {    if (t1 == t2) {      return t1.sorter.compare(e1,e2);    } else {      return t1.plugin.getId().compareTo(t2.plugin.getId());    }  }  return t1 == null ? -1 : 1;}  }
class C{  public Builder workweekStarts(DayOfWeek day){  workweekStarts=day;  return this;}  }
class C{  @DoNotStrip public void runOnQueue(Runnable runnable){  if (mIsFinished) {    FLog.w(ReactConstants.TAG,"Tried to enqueue runnable on already finished thread: '" + getName() + "... dropping Runnable.");  }  mHandler.post(runnable);}  }
class C{  public Matrix minus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public static float[] toPrimitive(final Float[] array,final float valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_FLOAT_ARRAY;  }  final float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    Float b=array[i];    result[i]=b == null ? valueForNull : b.floatValue();  }  return result;}  }
class C{  @Override public void generateRss(XmlWriter w,String elementName,RssFormat rssFormat) throws IOException {switch (rssFormat) {case FULL_HTML:    w.simpleElement(Namespaces.rssNs,elementName,null,html);  break;case PLAIN_TEXT:w.simpleElement(Namespaces.rssNs,elementName,null,getPlainText());break;default :assert false;}}  }
class C{  public static final LocoNetMessage createUr92GroupIdentityQueryPacket(){  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);  Integer i;  i=0;  m.setElement(i++,LnConstants.OPC_PEER_XFER);  m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.RE_DPLX_GP_NAME_TYPE);  m.setElement(i++,LnConstants.RE_DPLX_OP_TYPE_QUERY);  for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {    m.setElement(i,0);  }  return m;}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public final void invert(Matrix4f m1){  invertGeneral(m1);}  }
class C{  public boolean remove(Object o){  if (o == null) {    for (int index=0; index < size; index++)     if (elementData[index] == null) {      fastRemove(index);      return true;    }  } else {    for (int index=0; index < size; index++)     if (o.equals(elementData[index])) {      fastRemove(index);      return true;    }  }  return false;}  }
class C{  public static Struct toStruct(Object o) throws PageException {  return toStruct(o,true);}  }
class C{  public boolean isThinEnabled(){  return VPlexApiConstants.TRUE.equalsIgnoreCase(getThinCapable()) && (VPlexApiConstants.TRUE.equalsIgnoreCase(getThinEnabled()) || VPlexApiConstants.ENABLED.equalsIgnoreCase(getThinEnabled()));}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  String idEntidad=(String)session.getAttribute(Misc.ENTIDAD_ID);  try {    String rebuscar=request.getParameter("rebuscar");    if ("false".equals(rebuscar)) {      String cnif=(String)session.getAttribute(Misc.CNIF);      String numExpediente=(String)session.getAttribute(Misc.EXPEDIENTE);      String procedimiento=(String)session.getAttribute(Misc.PROCEDIMIENTO);      String numeroRegistroInicial=(String)session.getAttribute(Misc.NUMERO_REGISTRO_INICIAL);      String fechaDesde=(String)session.getAttribute(Misc.FECHA_DESDE);      String operadorConsulta=(String)session.getAttribute(Misc.OPERADOR_CONSULTA);      String fechaHasta=(String)session.getAttribute(Misc.FECHA_HASTA);      String fechaRegistroInicialDesde=(String)session.getAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE);      String operadorConsultaFechaInicial=(String)session.getAttribute(Misc.OPERADOR_CONSULTA_FECHA_INICIAL);      String fechaRegistroInicialHasta=(String)session.getAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA);      String estado=(String)session.getAttribute(Misc.ESTADO);      Entidad entidad=Misc.obtenerEntidad(idEntidad);      ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();      CriterioBusquedaExpedientes oCriterio=new CriterioBusquedaExpedientes();      oCriterio.setNIF(cnif);      oCriterio.setEstado(estado);      oCriterio.setFechaDesde(fechaDesde);      oCriterio.setFechaHasta(fechaHasta);      oCriterio.setOperadorConsulta(operadorConsulta);      oCriterio.setExpediente(numExpediente);      oCriterio.setProcedimiento(procedimiento);      oCriterio.setNumeroRegistroInicial(numeroRegistroInicial);      oCriterio.setFechaRegistroInicialDesde(fechaRegistroInicialDesde);      oCriterio.setFechaRegistroInicialHasta(fechaRegistroInicialHasta);      oCriterio.setOperadorConsultaFechaInicial(operadorConsultaFechaInicial);      Expedientes expedientes=oServicio.busquedaExpedientes(oCriterio,entidad);      for (int i=0; i < expedientes.count(); i++) {        Expediente expediente=(Expediente)expedientes.get(i);        if (expediente.getEstado().equals(Expediente.COD_ESTADO_EXPEDIENTE_FINALIZADO)) {          expediente.setEstado("cerrado");        } else {          expediente.setEstado("abierto");        }        String proc=expediente.getProcedimiento();        if (proc.length() > 60) {          proc=proc.substring(0,57) + "...";          expediente.setProcedimiento(proc);        }        boolean existeNotificacion=oServicio.existenNotificaciones(expediente.getNumero(),entidad);        if (existeNotificacion) {          expediente.setNotificacion("S");        } else {          expediente.setNotificacion("N");        }        boolean existeSubsanacion=oServicio.existenSubsanaciones(expediente.getNumero(),entidad);        if (existeSubsanacion) {          expediente.setAportacion("S");        } else {          expediente.setAportacion("N");        }        boolean existePago=oServicio.existenPagos(expediente.getNumero(),entidad);        if (existePago) {          expediente.setPagos("S");        } else {          expediente.setPagos("N");        }      }      request.setAttribute("expedientes",expedientes.getExpedientes());      request.setAttribute("buscado","true");    } else     if (!"true".equals(rebuscar)) {      session.removeAttribute(Misc.CNIF);      session.removeAttribute(Misc.EXPEDIENTE);      session.removeAttribute(Misc.PROCEDIMIENTO);      session.removeAttribute(Misc.NUMERO_REGISTRO_INICIAL);      session.removeAttribute(Misc.FECHA_DESDE);      session.removeAttribute(Misc.FECHA_DESDE_BUSQUEDA);      session.removeAttribute(Misc.OPERADOR_CONSULTA);      session.removeAttribute(Misc.FECHA_HASTA);      session.removeAttribute(Misc.FECHA_HASTA_BUSQUEDA);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_DESDE_BUSQUEDA);      session.removeAttribute(Misc.OPERADOR_CONSULTA_FECHA_INICIAL);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA);      session.removeAttribute(Misc.FECHA_REGISTRO_INICIAL_HASTA_BUSQUEDA);      session.removeAttribute(Misc.ESTADO);      request.setAttribute("buscado","false");    } else {      request.setAttribute("buscado","true");    }  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());    return mapping.findForward("Failure");  }  return mapping.findForward("Success");}  }
class C{  public boolean isSelector(){  return this.maxThreads > 0;}  }
class C{  public void testSetAttributeNode1() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  Element newElement;  Attr newAttr;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newElement=doc.createElement("newElement");  testAddr.appendChild(newElement);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  newElement.setAttributeNodeNS(newAttr);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public StatisticalLineAndShapeRenderer(boolean linesVisible,boolean shapesVisible){  super(linesVisible,shapesVisible);  this.errorIndicatorPaint=null;  this.errorIndicatorStroke=null;}  }
class C{  private ClassDefinition toResolvedType(Environment env,Context ctx,boolean pkgOK){  Identifier rid=ctx.resolveName(env,id);  Type t=Type.tClass(rid);  if (pkgOK && !env.classExists(t)) {    return null;  }  if (env.resolve(where,ctx.field.getClassDefinition(),t)) {    try {      ClassDefinition c=env.getClassDefinition(t);      if (c.isMember()) {        ClassDefinition sc=ctx.findScope(env,c.getOuterClass());        if (sc != c.getOuterClass()) {          Identifier rid2=ctx.getApparentClassName(env,id);          if (!rid2.equals(idNull) && !rid2.equals(rid)) {            env.error(where,"inherited.hides.type",id,sc.getClassDeclaration());          }        }      }      if (!c.getLocalName().equals(id.getFlatName().getName())) {        env.error(where,"illegal.mangled.name",id,c);      }      return c;    } catch (    ClassNotFound ee) {    }  }  return null;}  }
class C{  public static void register(){  CommandSpec loginCmd=CommandSpec.builder().permission("spongediscord.login").description(Text.of("(ADMIN) Login to your Discord account and bind to current Minecraft account")).executor(new LoginCommand()).build();  CommandSpec loginConfirmCmd=CommandSpec.builder().permission("spongediscord.login").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of("email"))),GenericArguments.onlyOne(GenericArguments.string(Text.of("password")))).executor(new LoginConfirmCommand()).build();  CommandSpec logoutCmd=CommandSpec.builder().permission("spongediscord.login").description(Text.of("Logout of your Discord account and unbind from current Minecraft account")).executor(new LogoutCommand()).build();  CommandSpec reloadCmd=CommandSpec.builder().permission("spongediscord.reload").description(Text.of("Reload Discord Bridge configuration")).executor(new ReloadCommand()).build();  CommandSpec broadcastCmd=CommandSpec.builder().permission("spongediscord.broadcast").description(Text.of("Broadcast message to Discord and online Minecraft accounts")).arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of("message")))).executor(new BroadcastCommand()).build();  CommandSpec statusCmd=CommandSpec.builder().permission("spongediscord.status").description(Text.of("Get status of current connections to Discord")).executor(new StatusCommand()).build();  CommandSpec mainCommandSpec=CommandSpec.builder().description(Text.of("Discord in Minecraft")).child(loginCmd,"login","l").child(loginConfirmCmd,"loginconfirm","lc").child(logoutCmd,"logout","lo").child(reloadCmd,"reload").child(broadcastCmd,"broadcast","b","bc").child(statusCmd,"status","s").build();  SpongeDiscord mod=SpongeDiscord.getInstance();  mod.getGame().getCommandManager().register(mod,mainCommandSpec,"discord","d");  mod.getLogger().info("/discord command registered.");}  }
class C{  public EdgeBetweennessClusterer(int numEdgesToRemove){  mNumEdgesToRemove=numEdgesToRemove;  edges_removed=new LinkedHashMap<E,Pair<V>>();}  }
class C{  private void removeEdges(final INaviViewNode node){  if (node instanceof INaviGroupNode) {    return;  }  final Set<INaviEdge> toDelete=new HashSet<INaviEdge>();  for (  final INaviEdge incomingEdge : node.getIncomingEdges()) {    incomingEdge.getSource().removeChild(node);    incomingEdge.getSource().removeOutgoingEdge(incomingEdge);    toDelete.add(incomingEdge);  }  for (  final INaviEdge outgoingEdge : node.getOutgoingEdges()) {    outgoingEdge.getTarget().removeParent(node);    outgoingEdge.getTarget().removeIncomingEdge(outgoingEdge);    toDelete.add(outgoingEdge);  }  for (  final INaviEdge edge : toDelete) {    deleteEdge(edge);  }}  }
class C{  public void testWithFail(Instances data,int fromIndex,int toIndex) throws Exception {  if (!test(data,fromIndex,toIndex)) {    throw m_FailReason;  }}  }
class C{  public ClassMemberValue(ConstPool cp){  super('c',cp);  setValue("java.lang.Class");}  }
class C{  protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);  FindBugsJob fbJob=new StartedFromBuilderJob("Finding bugs in " + resource.getName() + "...",resource,resources);  if (runAsJob) {    if (DEBUG) {      FindbugsPlugin.log("cancelSimilarJobs");    }    FindBugsJob.cancelSimilarJobs(fbJob);    if (DEBUG) {      FindbugsPlugin.log("scheduleAsSystem");    }    fbJob.scheduleAsSystem();    if (DEBUG) {      FindbugsPlugin.log("done scheduleAsSystem");    }  } else {    if (DEBUG) {      FindbugsPlugin.log("running fbJob");    }    fbJob.run(monitor);    if (DEBUG) {      FindbugsPlugin.log("done fbJob");    }  }}  }
class C{  @Override public void validateUpdate(IDataType newType) throws TypeUpdateException {  super.validateUpdate(newType);  StructType newStructType=(StructType)newType;  try {    TypeUtils.validateUpdate(fieldMapping,newStructType.fieldMapping);  } catch (  TypeUpdateException e) {    throw new TypeUpdateException(newType,e);  }}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public CheckboxAction(final ITypeDescription type,final String string){  super(string);  m_type=type;}  }
class C{  public void addSigners(SignerInformationStore signerStore){  Iterator it=signerStore.getSigners().iterator();  while (it.hasNext()) {    _signers.add(it.next());  }}  }
class C{  public MaterialFilePicker withRootPath(String rootPath){  mRootPath=rootPath;  return this;}  }
class C{  public static void main(String[] args) throws Exception {  runScript(new GroovyScript(),args);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blue_white_red.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    image.close();    Random generator=new Random();    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=generator.nextInt(101) / 100.0;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized void clear(){  tableLeft.clear();  tableRight.clear();}  }
class C{  public void end(String namespace,String name) throws Exception {  ComponentBean top=null;  try {    top=(ComponentBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  ComponentBean old=fcb.getComponent(top.getComponentType());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ComponentRule]{" + digester.getMatch() + "} New("+ top.getComponentType()+ ")");    }    fcb.addComponent(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ComponentRule]{" + digester.getMatch() + "} Merge("+ top.getComponentType()+ ")");    }    mergeComponent(top,old);  }}  }
class C{  private void showEntry(Entry e){  try {    setTitle(e.file.getName());    checkField.setText(e.check);    enclPanel.setInfo(e.encl);    selfPanel.setInfo(e.self);    body.setText(e.file.getCharContent(true).toString());    Highlighter highlighter=body.getHighlighter();    highlighter.removeAllHighlights();    addHighlight(highlighter,e.encl,enclColor);    addHighlight(highlighter,e.self,selfColor);    scroll(body,getMinPos(enclPanel.info,selfPanel.info));  } catch (  IOException ex) {    body.setText("Cannot read " + e.file.getName() + ": "+ e);  }}  }
class C{  @Override protected void validate(){}  }
class C{  public void scale(double sx,double sy,double sz){  Transform3D other=new Transform3D();  other.setScale(new Vector3d(sx,sy,sz));  transform(other);}  }
class C{  static <K,V>RegularImmutableMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){  checkPositionIndex(n,entryArray.length);  Entry<K,V>[] entries;  if (n == entryArray.length) {    entries=entryArray;  } else {    entries=createEntryArray(n);  }  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);  ImmutableMapEntry<K,V>[] table=createEntryArray(tableSize);  int mask=tableSize - 1;  for (int entryIndex=0; entryIndex < n; entryIndex++) {    Entry<K,V> entry=entryArray[entryIndex];    K key=entry.getKey();    V value=entry.getValue();    checkEntryNotNull(key,value);    int tableIndex=Hashing.smear(key.hashCode()) & mask;    @Nullable ImmutableMapEntry<K,V> existing=table[tableIndex];    ImmutableMapEntry<K,V> newEntry;    if (existing == null) {      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);    } else {      newEntry=new NonTerminalImmutableMapEntry<K,V>(key,value,existing);    }    table[tableIndex]=newEntry;    entries[entryIndex]=newEntry;    checkNoConflictInKeyBucket(key,newEntry,existing);  }  return new RegularImmutableMap<K,V>(entries,table,mask);}  }
class C{  @Override public boolean isRotatingEdgeLabels(){  return true;}  }
class C{  public static boolean isValidWWN(String wwn){  return wwn != null && wwn.matches(WWN_PATTERN);}  }
class C{  public ElementCreatorImpl orderAndWhitelistElements(ElementKey<?,?>... elementKeys){  for (  ElementKey<?,?> elementKey : elementKeys) {    addElement(elementKey);  }  return whitelistElements(elementKeys);}  }
class C{  public static IMarker createMarker(String markerID,IResource resource,String message,int severity) throws CoreException {  IMarker marker=resource.createMarker(markerID);  marker.setAttribute(IMarker.SEVERITY,severity);  marker.setAttribute(IMarker.MESSAGE,message);  return marker;}  }
class C{  public void stopRefresh(String time){  if (mPullRefreshing == true) {    mPullRefreshing=false;    mHeaderTimeView.setText(time);    resetHeaderHeight();  }}  }
class C{  public boolean isSuccessful(){  return success;}  }
class C{  private boolean isArrowpointAllowed(Node x,Node y){  if (graph.getEndpoint(x,y) == Endpoint.ARROW) {    return true;  }  if (graph.getEndpoint(x,y) == Endpoint.TAIL) {    return false;  }  if (graph.getEndpoint(y,x) == Endpoint.ARROW) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  if (graph.getEndpoint(y,x) == Endpoint.TAIL) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  return graph.getEndpoint(y,x) == Endpoint.CIRCLE;}  }
class C{  private void recreateViews(){  if (mAdapter == null) {    mViewGroup.removeAllViews();    return;  }  for (int i=0; i < mAdapter.getItemCount() || i < mViewGroup.getChildCount(); i++) {    if (i < mAdapter.getItemCount()) {      int viewType=mAdapter.getItemViewType(i);      if (i < mViewGroup.getChildCount()) {        View child=mViewGroup.getChildAt(i);        Integer savedViewType=(Integer)child.getTag(R.id.adapter_layout_list_view_type);        RecyclerView.ViewHolder savedViewHolder=(RecyclerView.ViewHolder)child.getTag(R.id.adapter_layout_list_holder);        if (savedViewType != null && savedViewType == viewType && savedViewHolder != null) {          mAdapter.onBindViewHolder(savedViewHolder,i);        } else {          addViewAt(viewType,i);          mViewGroup.removeView(child);        }      } else {        addViewAt(viewType,i);      }    } else {      if (i < mViewGroup.getChildCount()) {        View child=mViewGroup.getChildAt(i);        mViewGroup.removeView(child);      }    }  }}  }
class C{  @Override public BKAsyncLogWriter startAsyncLogSegmentNonPartitioned() throws IOException {  return (BKAsyncLogWriter)FutureUtils.result(openAsyncLogWriter());}  }
class C{  protected void removeContextFromChild(BridgeContext ctx,Element e){  if (SVG_NAMESPACE_URI.equals(e.getNamespaceURI())) {    String ln=e.getLocalName();    if (ln.equals(SVG12Constants.SVG_FLOW_DIV_TAG) || ln.equals(SVG12Constants.SVG_FLOW_LINE_TAG) || ln.equals(SVG12Constants.SVG_FLOW_PARA_TAG)|| ln.equals(SVG12Constants.SVG_FLOW_SPAN_TAG)) {      ((AbstractTextChildBridgeUpdateHandler)((SVGOMElement)e).getSVGContext()).dispose();    }  }  Node child=getFirstChild(e);  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE) {      removeContextFromChild(ctx,(Element)child);    }    child=getNextSibling(child);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterName);}  }
class C{  private static void checkTypeSafe(Collection<?> c){  try {    RoleUnresolved r;    for (    Object o : c)     r=(RoleUnresolved)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  protected UpdateSuffixListAction(GeneratedListModel listModel){  this.listModel=listModel;}  }
class C{  private void swapParameterObjects(Node n1,Node n2){  double height1=n1.getHeight();  double height2=n2.getHeight();  double rate1=1.0, rate2=1.0;  if (hasRates) {    rate1=n1.getRate();    rate2=n2.getRate();  }  if (hasTraits) {    Map<String,Parameter> traits1=new HashMap<String,Parameter>();    Map<String,Parameter> traits2=new HashMap<String,Parameter>();    traits1.putAll(n1.traitParameters);    traits2.putAll(n2.traitParameters);    Map<String,Parameter> temp=n1.traitParameters;    n1.traitParameters=n2.traitParameters;    n2.traitParameters=temp;    for (    Map.Entry<String,Parameter> entry : traits1.entrySet()) {      n1.traitParameters.get(entry.getKey()).setParameterValueQuietly(0,entry.getValue().getParameterValue(0));    }    for (    Map.Entry<String,Parameter> entry : traits2.entrySet()) {      n2.traitParameters.get(entry.getKey()).setParameterValueQuietly(0,entry.getValue().getParameterValue(0));    }  }  Parameter temp=n1.heightParameter;  n1.heightParameter=n2.heightParameter;  n2.heightParameter=temp;  if (hasRates) {    temp=n1.rateParameter;    n1.rateParameter=n2.rateParameter;    n2.rateParameter=temp;  }  n1.heightParameter.setParameterValueQuietly(0,height1);  n2.heightParameter.setParameterValueQuietly(0,height2);  if (hasRates) {    n1.rateParameter.setParameterValueQuietly(0,rate1);    n2.rateParameter.setParameterValueQuietly(0,rate2);  }}  }
class C{  boolean sendSquelch(boolean on,int isolateId){  boolean responded;  DMessage dm=DMessageCache.alloc(4);  dm.setType(DMessage.OutSetSquelch);  dm.setTargetIsolate(isolateId);  dm.putDWord(on ? 1 : 0);  responded=simpleRequestResponseMessage(dm,DMessage.InSquelch);  return responded;}  }
class C{  public Triangle verticalRayTest(Vector3 testPoint,Vector3 out,int meshPartIndex){  tmpBitsVerticalRayTest.clear();  tmpBitsVerticalRayTest.set(meshPartIndex);  return verticalRayTest(testPoint,out,tmpBitsVerticalRayTest);}  }
class C{  private void addRayAction(){  SandboxRay ray=AddRayDialog.show(ControlUtilities.getParentWindow(this));  if (ray != null) {synchronized (Simulation.LOCK) {      this.simulation.getRays().add(ray);    }    DefaultMutableTreeNode rayNode=new DefaultMutableTreeNode(ray);    this.model.insertNodeInto(rayNode,this.rayFolder,this.rayFolder.getChildCount());    this.tree.expandPath(new TreePath(rayNode.getPath()).getParentPath());  }}  }
class C{  public boolean isEmpty(){  return ((flattens == null) || (loaders.isEmpty() && ((indexColumns == null) || indexColumns.isEmpty())));}  }
class C{  protected int size(){  return ranges.size();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.SIMPLE_QUANTIFIER__QUANTIFIER:    return QUANTIFIER_EDEFAULT == null ? quantifier != null : !QUANTIFIER_EDEFAULT.equals(quantifier);}return super.eIsSet(featureID);}  }
class C{  protected void parseGetURL2(int flags) throws IOException {  int sendVars=flags & 0x03;  int mode=0;switch (flags & 0xF0) {case 0x40:    mode=SWFActions.GET_URL_MODE_LOAD_MOVIE_INTO_SPRITE;  break;case 0x80:mode=SWFActions.GET_URL_MODE_LOAD_VARS_INTO_LEVEL;break;case 0xC0:mode=SWFActions.GET_URL_MODE_LOAD_VARS_INTO_SPRITE;break;default :mode=SWFActions.GET_URL_MODE_LOAD_MOVIE_INTO_LEVEL;break;}actions.getURL(sendVars,mode);}  }
class C{  public void commit(final NetworkPanel panel,final String type){  int[] topology=new int[layerList.size()];  int i=layerList.size() - 1;  for (  LayerCreationPanel layer : layerList) {    topology[i]=layer.getNumNeurons();    i--;  }  FeedForward net;switch (type) {case "Backprop":    net=new BackpropNetwork(panel.getNetwork(),topology,panel.getWhereToAdd());  break;case "FeedForward":net=new FeedForward(panel.getNetwork(),topology,panel.getWhereToAdd());break;default :net=new FeedForward(panel.getNetwork(),topology,panel.getWhereToAdd());break;}i=layerList.size() - 1;for (LayerCreationPanel layer : layerList) {net.getNeuronGroup(i).setNeuronType(layer.getNeuronType());i--;}panel.getNetwork().addGroup(net);panel.repaint();}  }
class C{  public double[] asDoubleArray(){  return new double[]{this.min,this.max};}  }
class C{  public boolean closeConnection() throws SQLException {  if (connection == null) {    return false;  }  connection.close();  connection=null;  return true;}  }
class C{  public synchronized void release(IndexCommit commit) throws IOException {  long gen=commit.getGeneration();  releaseGen(gen);}  }
class C{  public static void destroy(){  unset();  CONTEXT_MAP.clear();}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) / 2;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  protected BatchPutIfAbsent(IRabaCoder keysCoder,IRabaCoder valsCoder,int fromIndex,int toIndex,byte[][] keys,byte[][] vals,boolean returnOldValues){  super(keysCoder,valsCoder,fromIndex,toIndex,keys,vals);  if (vals == null)   throw new IllegalArgumentException(Errors.ERR_VALS_NULL);  this.returnOldValues=returnOldValues;}  }
class C{  public static String isCompatibleWrapper(EventType existingType,EventType underlyingType,Map<String,Object> propertyTypes){  if (!(existingType instanceof WrapperEventType)) {    return "Type '" + existingType.getName() + "' is not compatible";  }  WrapperEventType existingWrapper=(WrapperEventType)existingType;  String message=MapEventType.isDeepEqualsProperties(existingType.getName(),existingWrapper.getUnderlyingMapType().getTypes(),propertyTypes);  if (message != null) {    return message;  }  EventType existingUnderlyingType=existingWrapper.getUnderlyingEventType();  if (underlyingType.getSuperTypes() == null) {    return "Type '" + existingType.getName() + "' is not compatible";  }  for (Iterator<EventType> it=underlyingType.getDeepSuperTypes(); it.hasNext(); ) {    EventType superUnderlying=it.next();    if (superUnderlying == existingUnderlyingType) {      return null;    }  }  return "Type '" + existingType.getName() + "' is not compatible";}  }
class C{  public Pair SW(){  int r2=row + 1;  if (r2 < 0)   return null;  return new Pair(diagonal,r2);}  }
class C{  public String toFormattedString(){  return "2D memory copy setup:\n    " + createString("\n    ");}  }
class C{  public JsonArray add(double value){  values.add(Json.value(value));  return this;}  }
class C{  public int pop(){  return _list.remove(_list.size() - 1);}  }
class C{  public void removeVideoFileType(String type){  videoFileTypes.remove(type);  firePropertyChange(VIDEO_FILE_TYPE,null,videoFileTypes);}  }
class C{  public static int calcPoolUsageScore(int max,int value){  return max > 0 ? Math.max(0,value) * 100 / max : 0;}  }
class C{  public RowCount(int count){  this.count=count;}  }
class C{  public Object resolveReference(String link){  if (link == null) {    String message=Logging.getMessage("nullValue.DocumentSourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (absentResourceList.isResourceAbsent(link))   return null;  Object o=this.resolveReference(link,true);  if (o == null)   absentResourceList.markResourceAbsent(link); else   absentResourceList.unmarkResourceAbsent(link);  return o;}  }
class C{  public ColumnList addColumn(byte[] family,byte[] qualifier,long ts,byte[] value){  columns().add(new Column(family,qualifier,ts,value));  return this;}  }
class C{  public static StatsEstimate calculateMean(StatsEstimate min,StatsEstimate max){  Money meanAverageCpc=calculateMean(min.getAverageCpc(),max.getAverageCpc());  Double meanAveragePosition=calculateMean(min.getAveragePosition(),max.getAveragePosition());  Double meanClicks=calculateMean(min.getClicksPerDay(),max.getClicksPerDay());  Double meanImpressions=calculateMean(min.getImpressionsPerDay(),max.getImpressionsPerDay());  Double meanCtr=calculateMean(min.getClickThroughRate(),max.getClickThroughRate());  Money meanTotalCost=calculateMean(min.getTotalCost(),max.getTotalCost());  StatsEstimate mean=new StatsEstimate();  if (meanAverageCpc != null) {    mean.setAverageCpc(meanAverageCpc);  }  if (meanAveragePosition != null) {    mean.setAveragePosition(meanAveragePosition);  }  if (meanClicks != null) {    mean.setClicksPerDay(meanClicks.floatValue());  }  if (meanImpressions != null) {    mean.setImpressionsPerDay(meanImpressions.floatValue());  }  if (meanCtr != null) {    mean.setClickThroughRate(meanCtr);  }  if (meanTotalCost != null) {    mean.setTotalCost(meanTotalCost);  }  return mean;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:56.539 -0500",hash_original_method="48DE05A423E3644ACD346758FE8F6FE2",hash_generated_method="B82215A310D13713A871365BB526A891") public GridLayoutAnimationController(Animation animation,float columnDelay,float rowDelay){  super(animation);  mColumnDelay=columnDelay;  mRowDelay=rowDelay;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void print(){  if (this.mBundleInfoList != null && this.mBundleInfoList.isEmpty()) {    for (int index=0; index < this.mBundleInfoList.size(); ++index) {      BundleInfo bundleInfo=this.mBundleInfoList.get(index);      Log.i(TAG,"BundleName: " + bundleInfo.bundleName);      for (      String str : bundleInfo.Components) {        Log.i(TAG,"****components: " + str);      }      for (      String str2 : bundleInfo.DependentBundles) {        Log.i(TAG,"****dependancy: " + str2);      }    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StrokeMap)) {    return false;  }  StrokeMap that=(StrokeMap)obj;  if (this.store.size() != that.store.size()) {    return false;  }  Set keys=this.store.keySet();  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Comparable key=(Comparable)iterator.next();    Stroke s1=getStroke(key);    Stroke s2=that.getStroke(key);    if (!ObjectUtilities.equal(s1,s2)) {      return false;    }  }  return true;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void emitUnpack(){  println("\";");  nl();  println("  private static int [] zzUnpack" + name + "() {");  println("    int [] result = new int[" + numEntries + "];");  println("    int offset = 0;");  for (int i=0; i < chunks; i++) {    println("    offset = zzUnpack" + name + "("+ constName()+ "_PACKED_"+ i+ ", offset, result);");  }  println("    return result;");  println("  }");  nl();  println("  private static int zzUnpack" + name + "(String packed, int offset, int [] result) {");  println("    int i = 0;  /* index in packed string  */");  println("    int j = offset;  /* index in unpacked array */");  println("    int l = packed.length();");  println("    while (i < l) {");  println("      int high = packed.charAt(i++) << 16;");  println("      result[j++] = high | packed.charAt(i++);");  println("    }");  println("    return j;");  println("  }");}  }
class C{  byte rho(long x,int n){  return (byte)(Long.numberOfLeadingZeros((x << (64 - n)) | (long)(1 << ((64 - n) - 1))) + 1);}  }
class C{  public static void fail(){  if (verbose) {    log("fail()");  }  assertBool(false);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.391 -0500",hash_original_method="C7FDCF3FD928AB15F38956E64BA9E194",hash_generated_method="B8BEF93FFA5A3F5F62EC0487663A16A3") private int nativeConstructDrmContent(InputStream data,int len,int mimeType){  addTaint(data.getTaint());  addTaint(len);  addTaint(mimeType);  return getTaintInt();}  }
class C{  public Doclet createDoclet(){  DocletImpl doclet=new DocletImpl();  return doclet;}  }
class C{  public void tabSelected(long time,int id,int prevId){  if (findTabById(id) == null) {    tabCreated(time,id,prevId,true);  } else {    updateVisualTabOrdering();    mUpdateHost.requestUpdate();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : s.getExternalID();}  }
class C{  public JCTypeParameter TypeParam(Name name,TypeVar tvar){  return (JCTypeParameter)TypeParameter(name,Types(types.getBounds(tvar))).setPos(pos).setType(tvar);}  }
class C{  @Override protected void applyCustomBackgroundColorAttribute(int color){  setIndicatorBackgroundColor(color);}  }
class C{  public FunctionblockModel basicGetType(){  return type;}  }
class C{  public double[][] computeLocal(int states[][],int j){  initialise();  addObservations(states,j);  return computeLocalFromPreviousObservations(states,j);}  }
class C{  public static byte[] hexStringToByteArray2(final String config){  final int offset=4;  final int len=config.length() / 2;  final byte[] ret=new byte[len + 4];  for (int i=offset; i < ret.length; i++) {    final char first=config.charAt((i - offset) * 2);    final char second=config.charAt((i - offset) * 2 + 1);    int value=Integer.parseInt(new String(new byte[]{(byte)first}),16) << 4;    value+=second;    ret[i]=(byte)Integer.parseInt(new String(new byte[]{(byte)second}),16);  }  final DataBuffer databuffer=new DataBuffer(ret,0,4);  databuffer.writeInt(len);  return ret;}  }
class C{  private ActionErrors validateFormAlEliminar(HttpServletRequest request,NivelArchivoVO nivelArchivoVO,ActionErrors errors){  validateNivelEnNingunArchivo(request,nivelArchivoVO,errors);  return errors;}  }
class C{  public EvidenceBuilder(final int evidence){  final Packet p=init(evidence);  p.setCommand(LOG_CREATE);  send(p);}  }
class C{  private void checkRanges(){  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    if (Math.abs(minimum[i] - maximum[i]) < Settings.EPS) {      throw new IllegalArgumentException("objective with empty range");    }  }}  }
class C{  public int postReplace(Document document){  try {    document.removePosition(CATEGORY,fPosition);    document.removePositionUpdater(fPositionUpdater);    document.removePositionCategory(CATEGORY);  } catch (  BadPositionCategoryException e) {  }  return fPosition.getOffset();}  }
class C{  @Override public Value convertTo(int t){  if (t == type) {    return this;  } else   if (t == Value.CLOB) {    if (small != null) {      return ValueLobDb.createSmallLob(t,small);    } else {      return ValueLobDb.createTempClob(getReader(),-1);    }  } else   if (t == Value.BLOB) {    if (small != null) {      return ValueLobDb.createSmallLob(t,small);    } else {      return ValueLobDb.createTempBlob(getInputStream(),-1);    }  }  return super.convertTo(t);}  }
class C{  public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  public static Text createText(Composite parent,int style,int hspan,int fill){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPPOrderWorkflow[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void warning(SAXParseException spe){  if (LOG.isWarnEnabled()) {    LOG.warn("Warning: " + spe.toString() + ": "+ spe.getMessage());  }}  }
class C{  public static IsNullValue nonNullValue(){  return instanceByFlagsList[0][NN];}  }
class C{  private void assertTagIsPlacemark(Element tag,String name,String description,Location location){  assertEquals(name,getChildTextValue(tag,"name"));  if (description != null && !description.equals("")) {    assertEquals(description,getChildTextValue(tag,"description"));  }  Element pointTag=getChildElement(tag,"Point");  String expected=location.getLongitude() + "," + location.getLatitude()+ ","+ location.getAltitude();  String actual=getChildTextValue(pointTag,"coordinates");  assertEquals(expected,actual);}  }
class C{  public DataException(String message,Throwable cause){  super(message,cause);}  }
class C{  private boolean checkIvyXmlFile(File ivyXmlFile) throws ParserConfigurationException, SAXException, IOException {  log("Scanning: " + ivyXmlFile.getPath(),verboseLevel);  XMLReader xmlReader=XMLReaderFactory.createXMLReader();  DependencyRevChecker revChecker=new DependencyRevChecker(ivyXmlFile);  xmlReader.setContentHandler(revChecker);  xmlReader.setErrorHandler(revChecker);  xmlReader.parse(new InputSource(ivyXmlFile.getAbsolutePath()));  return !revChecker.fail;}  }
class C{  public XBLShadowTreeElementBridge(){}  }
class C{  long adjustBillingPeriodStart(PriceModelHistory pmHistory){  if (pmHistory.getType() == org.oscm.internal.types.enumtypes.PriceModelType.PER_UNIT) {    return PricingPeriodDateConverter.getStartTime(billingInput.getBillingPeriodStart(),pmHistory.getPeriod()).getTimeInMillis();  } else {    return billingInput.getBillingPeriodStart();  }}  }
class C{  public Identity(String name){  this.name=name;}  }
class C{  public IntHashTable(){  objs=new Object[DEFAULT_INITIAL_SIZE];  ints=new int[DEFAULT_INITIAL_SIZE];  mask=DEFAULT_INITIAL_SIZE - 1;}  }
class C{  public StrTokenizer reset(final char[] input){  reset();  this.chars=ArrayUtils.clone(input);  return this;}  }
class C{  public SelectClause streamSelector(StreamSelector streamSelector){  this.streamSelector=streamSelector;  return this;}  }
class C{  private void codegenRootClass(List<Source> sources,List units,ResourceContainer resources,CompilerSwcContext swcContext,Configuration configuration,List<DefineTag> fonts,String uniqueRootClassName){  String rootClassName="_" + uniqueRootClassName + "_";  String sourceText=null;  if (fonts.size() == 0) {    rootClassName+="flash_display_Sprite";    sourceText=codegenRSLRootClass("flash.display.Sprite",rootClassName);  } else {    rootClassName+="mx_core_FlexModuleFactory";    sourceText=PreLink.codegenModuleFactory("flash.display.Sprite",rootClassName,null,null,null,null,null,null,null,fonts,null,null,null,null,configuration,null,swcContext,true);  }  String generatedLoaderFile=rootClassName + ".as";  Source s=new Source(new TextFile(sourceText,generatedLoaderFile,null,MimeMappings.getMimeType(generatedLoaderFile)),"",rootClassName,null,false,false,false);  s.setPathResolver(null);  sources.add(resources.addResource(s));  configuration.setRootClassName(rootClassName);  if (configuration.getCompilerConfiguration().keepGeneratedActionScript()) {    PreLink.saveGenerated(generatedLoaderFile,sourceText,configuration.getCompilerConfiguration().getGeneratedDirectory());  }}  }
class C{  @Deprecated public DisqueClient(String uri){  this(uri != null && uri.startsWith("disque") ? DisqueURI.create(uri) : new DisqueURI.Builder().disque(uri).build());}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:16.069 -0500",hash_original_method="175D748D3B44D56B75F881FF6379A368",hash_generated_method="0662F4A3A7CAF843B9C43E85E8EEC9A3") public SocketAddress obtainLocalAddress(InetAddress dst,int dstPort,InetAddress localAddress,int localPort) throws IOException {  String key=makeKey(dst,dstPort);  Socket clientSock=getSocket(key);  if (clientSock == null) {    clientSock=sipStack.getNetworkLayer().createSocket(dst,dstPort,localAddress,localPort);    putSocket(key,clientSock);  }  return clientSock.getLocalSocketAddress();}  }
class C{  protected static String quoteTime(java.sql.Time x){  if (x == null) {    return "null";  }  return "Time.valueOf(\"" + x.toString() + "\")";}  }
class C{  public static S2CellId fromPoint(S2Point p){  int face=S2Projections.xyzToFace(p);  R2Vector uv=S2Projections.validFaceXyzToUv(face,p);  int i=stToIJ(S2Projections.uvToST(uv.x()));  int j=stToIJ(S2Projections.uvToST(uv.y()));  return fromFaceIJ(face,i,j);}  }
class C{  public boolean isMostlyCaps(){  return mCapsCount > 1;}  }
class C{  public AccountHeaderBuilder withAccountHeader(@NonNull View accountHeader){  this.mAccountHeaderContainer=accountHeader;  return this;}  }
class C{  public boolean deleteEntry(User user,Entry entry,String childrenAction,boolean isAdmin,List<String> deletedEntryIds,Errors errors){  String originalChildrenAction=childrenAction;  if (entry == null) {    Errors.add(errors,errorMessages.errorEntryIsNull());    return false;  }  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return false;  }  if (childrenAction != null && !childrenAction.equals("delete") && !childrenAction.equals("orphan") && !childrenAction.equals("parent")) {    Errors.add(errors,errorMessages.errorChildrenActionInvalid());    return false;  }  if (!canUserModifyEntry(user,entry,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToDelete());    return false;  }  final Entry parent=getEntryById(entry.getParentId());  if (parent == null && childrenAction != null && childrenAction.equals("parent")) {    if (entry.isSource() || entry.isQuotation()) {      childrenAction="delete";    } else {      Errors.add(errors,errorMessages.errorChildrenActionMayNotBeParentIfTheDeletedEntryHasNoParent());      return false;    }  }  boolean doNotUpdateSiblings=false;  if (childrenAction != null && childrenAction.equals("parent")) {    reparentChildren(entry,parent);    doNotUpdateSiblings=true;  }  if (parent != null) {    removeEntryFromParent(entry,parent,doNotUpdateSiblings);  }  for (  Object objectChild : getEntriesByParentId(entry.getId())) {    Entry child=(Entry)objectChild;    if (childrenAction == null || childrenAction.equals("delete")) {      if (!deleteEntry(user,child,childrenAction,isAdmin,deletedEntryIds,errors)) {        return false;      }    } else     if (childrenAction.equals("orphan")) {      child.setParentId(null);      child.setNextSiblingId(null);      child.setPreviousSiblingId(null);    } else     if (childrenAction.equals("parent")) {      child.setParentId(parent.getId());    }  }  if (deletedEntryIds != null) {    deletedEntryIds.add(entry.getId());  }  db.removeEntry(entry);  if (entry.isNotebook()) {    Entry rootEntry=getEntryById(entry.getRootId());    return deleteEntry(user,rootEntry,"delete",isAdmin,deletedEntryIds,errors);  } else   if (entry.isSource()) {    for (    Object objectQuotation : getEntriesBySourceId(entry.getId(),0,Integer.MAX_VALUE)) {      Entry quotation=(Entry)objectQuotation;      if (wasEntryDeletedInThisTransaction(quotation)) {        continue;      }      if (!deleteEntry(user,quotation,originalChildrenAction,isAdmin,deletedEntryIds,errors)) {        return false;      }    }  }  return true;}  }
class C{  public void selectTable1Column(Index column){  table1Columns.add(column);}  }
class C{  public void testDefaultArticles() throws Exception {  Reader reader=new StringReader("l'avion");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("Elision").create(stream);  assertTokenStreamContents(stream,new String[]{"avion"});}  }
class C{  public T caseParameterizedTypeRef(ParameterizedTypeRef object){  return null;}  }
class C{  protected void onVolumeChanged(int streamType,int flags){  if (LOGD)   Log.d(TAG,"onVolumeChanged(streamType: " + streamType + ", flags: "+ flags+ ")");  if ((flags & AudioManager.FLAG_SHOW_UI) != 0) {synchronized (this) {      if (streamType != mActiveStreamType) {        if (mCurrentOverlayStyle == VOLUME_OVERLAY_EXPANDABLE) {          hideSlider(mActiveStreamType);        }        reorderSliders(streamType);      }      onShowVolumeChanged(streamType,flags);    }  }  if ((flags & AudioManager.FLAG_PLAY_SOUND) != 0 && !mRingIsSilent) {    removeMessages(MSG_PLAY_SOUND);    sendMessageDelayed(obtainMessage(MSG_PLAY_SOUND,streamType,flags),PLAY_SOUND_DELAY);  }  if ((flags & AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE) != 0) {    removeMessages(MSG_PLAY_SOUND);    removeMessages(MSG_VIBRATE);    onStopSounds();  }  removeMessages(MSG_FREE_RESOURCES);  sendMessageDelayed(obtainMessage(MSG_FREE_RESOURCES),FREE_DELAY);  resetTimeout();}  }
class C{  @Override public boolean isTableLoaded(){  return _tableManager.getTable(_tableName) != null;}  }
class C{  public void printElements(java.io.Writer w,Element... elements){  for (  Element element : elements)   (new PrintingProcessor.PrintingElementVisitor(w,this)).visit(element).flush();}  }
class C{  private static int count(String pattern,String[] possibleValues){  int count=0;  for (  String r : possibleValues) {    if (pattern.contains(r)) {      count++;    }  }  return count;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override protected void updateView(){  putValue(ActionUtil.SELECTED_KEY,getActiveView() != null && !getActiveView().isPropertiesPanelVisible());}  }
class C{  private boolean matchAtIndex(byte[] targetBytes,int index){  if (index < 0 || index + targetBytes.length > templateBytes.length) {    return false;  }  for (int i=0; i < targetBytes.length; ++i) {    if (targetBytes[i] != templateBytes[index + i]) {      return false;    }  }  return true;}  }
class C{  private boolean isChangeEditorColorsPossible(){  ClassLoader loader=Lookup.getDefault().lookup(ClassLoader.class);  if (loader == null) {    loader=Installer.class.getClassLoader();  }  try {    Class claszz=loader.loadClass(COLOR_MODEL_CLASS_NAME);    Object colorModel=claszz.newInstance();    Method method=claszz.getDeclaredMethod("getCurrentProfile",new Class[0]);    Object invokeResult=method.invoke(colorModel,new Object[0]);    return invokeResult != null && !DarculaLaf.NAME.equals(invokeResult);  } catch (  Exception ex) {    Logger.getLogger(Installer.class.getName()).log(Level.INFO,"Cannot get the current editor colors profile.",ex);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private boolean isWikibaseDateURI(URI lit){  if (lit == null) {    return false;  }  if (SUPPORTED_DATA_TYPES.contains(lit)) {    return true;  }  return false;}  }
class C{  public TextFieldEditor(String name,String labelText,Composite parent){  this(name,labelText,UNLIMITED,parent);}  }
class C{  protected EnumControl(Type type,Object[] values,Object value){  super(type);  this.values=values;  this.value=value;}  }
class C{  public void addLink(String src,String dest) throws PlanGenException {  PlanGenUtils.planGenAssert(src != null,"src operator is null");  PlanGenUtils.planGenAssert(dest != null,"dest operator is null");  PlanGenUtils.planGenAssert(!src.trim().isEmpty(),"src operator is empty");  PlanGenUtils.planGenAssert(!dest.trim().isEmpty(),"dest operator is empty");  PlanGenUtils.planGenAssert(hasOperator(src),String.format("operator %s doesn't exist",src));  PlanGenUtils.planGenAssert(hasOperator(dest),String.format("operator %s doesn't exist",dest));  adjacencyList.get(src).add(dest);}  }
class C{  public VariableDefinition createVariableDefinition(){  VariableDefinitionImpl variableDefinition=new VariableDefinitionImpl();  return variableDefinition;}  }
class C{  @Override public void addListener(Listener<ComplexBuffer> listener){  super.addListener(listener);  mComplexMixer.start();}  }
class C{  public boolean isRead(){  return state == READ;}  }
class C{  public static GPTreeConstraints constraintsFor(final String constraintsName,final EvolutionState state){  GPTreeConstraints myConstraints=(GPTreeConstraints)(((GPInitializer)state.initializer).treeConstraintRepository.get(constraintsName));  if (myConstraints == null)   state.output.error("The GP tree constraint \"" + constraintsName + "\" could not be found.");  return myConstraints;}  }
class C{  public static void registerSemanticNode(SemanticNode node,int toolId){  if (!semanticNodes.contains(node)) {    semanticNodes.add(node);  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override public void resize(int width,int height){  Gdx.app.log(TAG,"Resized to width = " + width + " height = "+ height);}  }
class C{  public InstantiationException(){}  }
class C{  @SuppressWarnings("unchecked") public static <Z>Class<Z> loadUserClass(String className){  if (allowedClassNames == null) {    String s=SysProperties.ALLOWED_CLASSES;    ArrayList<String> prefixes=New.arrayList();    boolean allowAll=false;    HashSet<String> classNames=New.hashSet();    for (    String p : StringUtils.arraySplit(s,',',true)) {      if (p.equals("*")) {        allowAll=true;      } else       if (p.endsWith("*")) {        prefixes.add(p.substring(0,p.length() - 1));      } else {        classNames.add(p);      }    }    allowedClassNamePrefixes=new String[prefixes.size()];    prefixes.toArray(allowedClassNamePrefixes);    allowAllClasses=allowAll;    allowedClassNames=classNames;  }  if (!allowAllClasses && !allowedClassNames.contains(className)) {    boolean allowed=false;    for (    String s : allowedClassNamePrefixes) {      if (className.startsWith(s)) {        allowed=true;      }    }    if (!allowed) {      throw DbException.get(ErrorCode.ACCESS_DENIED_TO_CLASS_1,className);    }  }  for (  ClassFactory classFactory : getUserClassFactories()) {    if (classFactory.match(className)) {      try {        Class<?> userClass=classFactory.loadClass(className);        if (!(userClass == null)) {          return (Class<Z>)userClass;        }      } catch (      Exception e) {        throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);      }    }  }  try {    return (Class<Z>)Class.forName(className);  } catch (  ClassNotFoundException e) {    try {      return (Class<Z>)Class.forName(className,true,Thread.currentThread().getContextClassLoader());    } catch (    Exception e2) {      throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);    }  }catch (  NoClassDefFoundError e) {    throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);  }catch (  Error e) {    throw DbException.get(ErrorCode.GENERAL_ERROR_1,e,className);  }}  }
class C{  public static synchronized String lastProgress(){  return sLastProgress;}  }
class C{  public void convertTransformAttrToMatrix(){  try {    MatrixNode matrixNode=MatrixNode.class.newInstance();    FXGMatrix matrix=FXGMatrix.convertToMatrix(scaleX,scaleY,rotation,x,y);    matrix.setMatrixNodeValue(matrixNode);    resetTransformAttr();    this.addChild(matrixNode);  } catch (  Throwable t) {    throw new FXGException(mask.getStartLine(),mask.getStartColumn(),"InvalidChildMatrixNode",t);  }}  }
class C{  public T caseBooleanLiteral(BooleanLiteral object){  return null;}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public void deleteTenant(String name) throws Exception {  getService().deleteTenant(name,this.getServiceContext());}  }
class C{  @Override public Object createMapComponentFromRow(AbstractRecord dbRow,ObjectBuildingQuery query,CacheKey parentCacheKey,AbstractSession session,boolean isTargetProtected){  Object key=buildAggregateFromRow(dbRow,null,parentCacheKey,null,query,false,session,isTargetProtected);  return key;}  }
class C{  protected void parseRuleInternal() throws CSSException, IOException {  nextIgnoreSpaces();  parseRule();  scanner=null;}  }
class C{  public static Test suite(){  return (new TestSuite(AttributeTagTestCase.class));}  }
class C{  public AlbumMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,Album inAlbum,java.util.Vector inFiles){  super(inSource,inParent,inAlbum.getTitle(),DATATYPE_ALBUM,inAlbum,inFiles);  myAlbum=inAlbum;}  }
class C{  public static LinearScale[] calcScales(Relation<? extends SpatialComparable> db){  if (db == null) {    throw new AbortException("No database was given to Scales.calcScales.");  }  int dim=RelationUtil.dimensionality(db);  DoubleMinMax[] minmax=DoubleMinMax.newArray(dim);  LinearScale[] scales=new LinearScale[dim];  for (DBIDIter iditer=db.iterDBIDs(); iditer.valid(); iditer.advance()) {    SpatialComparable v=db.get(iditer);    if (v instanceof NumberVector) {      for (int d=0; d < dim; d++) {        final double mi=v.getMin(d);        if (mi != mi) {          continue;        }        minmax[d].put(mi);      }    } else {      for (int d=0; d < dim; d++) {        final double mi=v.getMin(d);        if (mi == mi) {          minmax[d].put(mi);        }        final double ma=v.getMax(d);        if (ma == ma) {          minmax[d].put(ma);        }      }    }  }  for (int d=0; d < dim; d++) {    scales[d]=new LinearScale(minmax[d].getMin(),minmax[d].getMax());  }  return scales;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void endInternalAtomicEdit(){  if (internalAtomicEditDepth > 0 && --internalAtomicEditDepth == 0) {    addEdit(compoundEdit);    compoundEdit.end();    compoundEdit=null;    updateActions();  }}  }
class C{  public boolean matchEntry(AspectEntry aspectEntry){  return aspectEntry.tier == this.tier && aspectEntry.group == this.group;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean isWithin(final GeoPoint point,final Set<Edge> edgeSet){  for (  final Edge edge : edgeSet) {    if (!edge.plane.isWithin(point)) {      return false;    }  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.195 -0400",hash_original_method="FEE2CCE71110550EEC666328AF98244C",hash_generated_method="25DF40C18132C33F38EC42BB976CAD7A") public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public boolean isPinchZoomEnabled(){  return mPinchZoomEnabled;}  }
class C{  public synchronized void addVetoableChangeListener(VetoableChangeListener listener){  if (vetoableChangeSupport == null) {    vetoableChangeSupport=new java.beans.VetoableChangeSupport(this);  }  vetoableChangeSupport.addVetoableChangeListener(listener);}  }
class C{  public static Map<String,Object> updateUserTone(Map<String,Object> context,ToneAnalysis toneAnalyzerPayload,Boolean maintainHistory){  List<ToneScore> emotionTone=new ArrayList<ToneScore>();  List<ToneScore> languageTone=new ArrayList<ToneScore>();  List<ToneScore> socialTone=new ArrayList<ToneScore>();  if (!context.containsKey("user")) {    context.put("user",initUser());  }  @SuppressWarnings("unchecked") Map<String,Object> user=(Map<String,Object>)context.get("user");  if (toneAnalyzerPayload != null && toneAnalyzerPayload.getDocumentTone() != null) {    List<ToneCategory> tones=toneAnalyzerPayload.getDocumentTone().getTones();    for (    ToneCategory tone : tones) {      if (tone.getId().equals(EMOTION_TONE_LABEL)) {        emotionTone=tone.getTones();      }      if (tone.getId().equals(LANGUAGE_TONE_LABEL)) {        languageTone=tone.getTones();      }      if (tone.getId().equals(SOCIAL_TONE_LABEL)) {        socialTone=tone.getTones();      }    }    updateEmotionTone(user,emotionTone,maintainHistory);    updateLanguageTone(user,languageTone,maintainHistory);    updateSocialTone(user,socialTone,maintainHistory);  }  context.put("user",user);  return user;}  }
class C{  public RBFKernel(double sigma){  setSigma(sigma);}  }
class C{  public double interpolate(double x,double y){switch (this.interpolationMethod) {case 0:    return this.biLinearInterpolator.biLinearInterpolation(x,y);case 1:  return this.biCubicInterpolator.biCubicInterpolation(x,y);case 2:return this.inverseDistanceWeighting.inverseDistanceWeighting(x,y,this.exp);}return Double.NaN;}  }
class C{  public void removeDisplayComponentsFromScreen(){  if (compData != null) {    compData.removeAllComponentsFromScreen();  }}  }
class C{  public ImageSource tiling(boolean tile){  this.tile=tile;  return this;}  }
class C{  public Task<HostRestRep> detachStorage(URI id){  return postTask(PathConstants.HOST_DETACH_STORAGE_URL,id);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (m_listenees.containsKey(eventName)) {    return false;  }  if (m_listenees.containsKey("dataSet") && (eventName.compareTo("trainingSet") == 0 || eventName.compareTo("testSet") == 0 || eventName.compareTo("instance") == 0)) {    return false;  }  if ((m_listenees.containsKey("trainingSet") || m_listenees.containsKey("testSet")) && (eventName.compareTo("dataSet") == 0 || eventName.compareTo("instance") == 0)) {    return false;  }  if (m_listenees.containsKey("instance") && (eventName.compareTo("trainingSet") == 0 || eventName.compareTo("testSet") == 0 || eventName.compareTo("dataSet") == 0)) {    return false;  }  if (eventName.compareTo("instance") == 0 && !(m_Filter instanceof StreamableFilter)) {    return false;  }  return true;}  }
class C{  public static void logContract(Contract contract){  _log.debug("Symbol: " + contract.getSymbol() + " Sec Type: "+ contract.getSecType()+ " Exchange: "+ contract.getExchange()+ " Con Id: "+ contract.getIdContractIB()+ " Currency: "+ contract.getCurrency()+ " SecIdType: "+ contract.getSecIdType()+ " Primary Exch: "+ contract.getPrimaryExchange()+ " Local Symbol: "+ contract.getLocalSymbol()+ " Multiplier: "+ contract.getPriceMultiplier()+ " Expiry: "+ contract.getExpiry()+ " Category: "+ contract.getCategory()+ " Industry: "+ contract.getIndustry()+ " LongName: "+ contract.getLongName());}  }
class C{  private String buildMeshDeviceUpgradeRequest1(String url,String version){  String method=GET;  EspHttpRequestBaseEntity requestEntity=new EspHttpRequestBaseEntity(method,url);  requestEntity.putQueryParams(ACTION,SYS_UPGRADE);  requestEntity.putQueryParams(VERSION,version);  requestEntity.putQueryParams(DELIVER_TO_DEVICE,TRUE);  return requestEntity.toString();}  }
class C{  public String toString(){  return getClass().getName() + "[selectedCheckbox=" + selectedCheckbox+ "]";}  }
class C{  protected void doStateUnloadQueue(){  double colonyNectarNeed=getSimulation().colonyNectarNeed;  double costs=foragingCosts * 5.8;  double gain=((nectarLoad - foragingCosts) * sourceConcentration / 1000) * 5.8;  double individuality=.8 + ((r.nextDouble() * 20) / 100);  sourceQuality=gain / (costs + 1);  dancingThreshold=(individuality * sourceQuality) + (20 - colonyNectarNeed);  dancingThreshold=Math.max(0,dancingThreshold);  double honey=nectarToHoney(nectarLoad);  honey/=1000;  honey*=sourceConcentration;  hive.storeHoney(honey);  nectarLoad=0;  headTo(hive);  receptive=true;  if (getFoodSource() != null) {    setColor(getFoodSource().getVisualizationObject().getColor());    setState(State.inHiveWithInfo);  }  if (getFoodSource() == null) {    setState(State.inHiveWithoutInfo);  }}  }
class C{  public boolean endsWith(String suffix){  return m_str.endsWith(suffix);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryItemEntity)) {    return false;  }  CategoryItemEntity that=(CategoryItemEntity)obj;  if (!this.rowKey.equals(that.rowKey)) {    return false;  }  if (!this.columnKey.equals(that.columnKey)) {    return false;  }  if (!ObjectUtilities.equal(this.dataset,that.dataset)) {    return false;  }  if (this.categoryIndex != that.categoryIndex) {    return false;  }  if (this.series != that.series) {    return false;  }  if (!ObjectUtilities.equal(this.category,that.category)) {    return false;  }  return super.equals(obj);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.086 -0500",hash_original_method="82E8721F348356C043C685C43214068C",hash_generated_method="B6C626E1E216DBD7577593D98F91C1ED") public void copyFrom(int[] d){  mRS.validate();  copy1DRangeFrom(0,mCurrentCount,d);}  }
class C{  private void initComponents(){  labelValue=new Label();  labelValue.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(),"Value")));  labelName=new Label();  labelName.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(),"Name")));  labelContact=new Label();  labelContact.setValue(Msg.translate(Env.getCtx(),"Contact"));  labelEMail=new Label();  labelEMail.setValue(Msg.getMsg(Env.getCtx(),"EMail"));  labelPostal=new Label();  labelPostal.setValue(Msg.getMsg(Env.getCtx(),"Postal"));  labelPhone=new Label();  labelPhone.setValue(Msg.translate(Env.getCtx(),"Phone"));  fieldID=0;  fieldValue=new Textbox();  fieldValue.setMaxlength(40);  fieldValue.setAttribute("zk_component_ID","Lookup_Criteria_fieldValue");  fieldValue.addEventListener(Events.ON_CHANGE,this);  fieldName=new Textbox();  fieldName.setMaxlength(40);  fieldName.setAttribute("zk_component_ID","Lookup_Criteria_fieldName");  fieldName.addEventListener(Events.ON_CHANGE,this);  fieldContact=new Textbox();  fieldContact.setMaxlength(40);  fieldContact.setAttribute("zk_component_ID","Lookup_Criteria_fieldContact");  fieldContact.addEventListener(Events.ON_CHANGE,this);  fieldEMail=new Textbox();  fieldEMail.setMaxlength(40);  fieldEMail.setAttribute("zk_component_ID","Lookup_Criteria_fieldEMail");  fieldEMail.addEventListener(Events.ON_CHANGE,this);  fieldPostal=new Textbox();  fieldPostal.setMaxlength(40);  fieldPostal.setAttribute("zk_component_ID","Lookup_Criteria_fieldPostal");  fieldPostal.addEventListener(Events.ON_CHANGE,this);  fieldPhone=new Textbox();  fieldPhone.setMaxlength(40);  fieldPhone.setAttribute("zk_component_ID","Lookup_Criteria_fieldPhone");  fieldPhone.addEventListener(Events.ON_CHANGE,this);  checkAND=new Checkbox();  checkAND.setText(Msg.getMsg(Env.getCtx(),"SearchAND"));  checkAND.setName("SearchAND");  checkAND.setTooltiptext(Msg.getMsg(Env.getCtx(),"SearchANDInfo"));  checkAND.setSelected(true);  checkAND.addActionListener(this);  checkAND.setAttribute("zk_component_ID","Lookup_Criteria_checkAND");  checkCustomer=new Checkbox();  checkCustomer.addActionListener(this);  checkCustomer.setAttribute("zk_component_ID","Lookup_Criteria_checkCustomer");  checkCustomer.setName("checkCustomer");  if (m_isSOTrx)   checkCustomer.setLabel(Msg.getMsg(Env.getCtx(),"OnlyCustomers")); else   checkCustomer.setLabel(Msg.getMsg(Env.getCtx(),"OnlyVendors"));  checkCustomer.setSelected(m_isSOMatch);}  }
class C{  private static byte[] loadDigest(File file) throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(getDigestFile(file)));    String line=reader.readLine();    if (line == null) {      throw new ValidationException(file,"invalid digest file");    }    int split=line.indexOf(' ');    String digestHex=line.substring(0,split);    String fileName=line.substring(split + 2);    if (!file.getPath().equals(fileName)) {      throw new ValidationException(file,"invalid digest file");    }    return Hex.decodeHex(digestHex.toCharArray());  } catch (  Exception e) {    throw new ValidationException(file,"invalid digest file");  } finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return eventName.equals("thresholdData") || eventName.equals("visualizableError");}  }
class C{  public static NinePatch createNinePatch(BufferedImage image,boolean is9Patch,boolean convert){  return NinePatch.load(image,is9Patch,convert);}  }
class C{  public String classifierTipText(){  return "The classifier to use for classification.";}  }
class C{  public TradelogReport findByTradelogSummary(Portfolio portfolio,ZonedDateTime start,ZonedDateTime end,String symbol,BigDecimal winLossAmount){  EntityManager entityManagerLocal=EntityManagerHelper.getLocalEntityManager();  try {    entityManagerLocal.getTransaction().begin();    Query querySummary=entityManagerLocal.createNativeQuery(TradelogSummary.getSQLString(),TradelogSummary.class);    querySummary.setParameter("idPortfolio",portfolio.getIdPortfolio());    querySummary.setParameter("start",TradingCalendar.getFormattedDate(start,DATE_FORMAT));    querySummary.setParameter("end",TradingCalendar.getFormattedDate(end,DATE_FORMAT));    querySummary.setParameter("symbol",symbol);    querySummary.setParameter("winLossAmount",winLossAmount);    TradelogReport tradelogReport=new TradelogReport();    for (    Object item : querySummary.getResultList()) {      tradelogReport.add((TradelogSummary)item);    }    entityManagerLocal.getTransaction().commit();    return tradelogReport;  } catch (  Exception re) {    if ((entityManagerLocal.getTransaction() != null) && entityManagerLocal.getTransaction().isActive()) {      entityManagerLocal.getTransaction().rollback();    }    throw re;  } finally {    entityManagerLocal.close();  }}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if ((null == object) || (getClass() != object.getClass())) {    return false;  }  final Player other=(Player)object;  return other.id == id;}  }
class C{  public boolean visit(CopyingRangeMarker edit){  return visitNode(edit);}  }
class C{  public void addBindingListener(){  AbstractDocument doc=(AbstractDocument)document;  DefaultXBLManager xm=(DefaultXBLManager)doc.getXBLManager();  if (xm != null) {    bindingListener=new XBLBindingListener();    xm.addBindingListener(bindingListener);    contentListener=new XBLContentListener();    xm.addContentSelectionChangedListener(contentListener);  }}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.307 -0500",hash_original_method="0C97805A247814CF6CABD75572FD40C1",hash_generated_method="757A39203D2893FD9ADFD6F0F1221CB5") public boolean isSelected(){  return getBooleanProperty(PROPERTY_SELECTED);}  }
class C{  @Override public String toString(){  if (bits != null && bits.length > 0) {    char[] digits=new char[bits.length * wordlen];    for (int i=0; i < bits.length * wordlen; i++) {      digits[i]=isMember(i) ? '1' : '0';    }    return new String(digits);  } else {    return "[]";  }}  }
class C{  public String printSpecModel(){  StringBuffer sb=new StringBuffer("Droidsafe Spec Model");  sb.append("\nWhitelist\n");  for (  MethodModel m : this.whitelist) {    sb.append(m.printMethod()).append("\n");  }  for (  MethodModel im : inputEventBlocks.keySet()) {    sb.append("InputMethod ").append(im.toString()).append("\n");    for (    MethodModel om : inputEventBlocks.get(im)) {      sb.append("    OutputMethod ").append(om.printMethod()).append("\n");    }  }  return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double cutoffsInSD=3;  int numOutputBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  cutoffsInSD=Double.parseDouble(args[2]);  numOutputBins=Integer.parseInt(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    double[] referenceCDF=new double[numOutputBins];    double rootOf2Pi=Math.sqrt(2 * Math.PI);    double exponent;    double x;    for (i=0; i < numOutputBins; i++) {      x=(double)i / (numOutputBins - 1) * 2 * cutoffsInSD - cutoffsInSD;      exponent=-x * x / 2;      referenceCDF[i]=Math.pow(Math.E,exponent) / rootOf2Pi;    }    for (i=1; i < numOutputBins; i++) {      referenceCDF[i]+=referenceCDF[i - 1];    }    double totalFrequency=referenceCDF[numOutputBins - 1];    for (i=0; i < numOutputBins; i++) {      referenceCDF[i]=referenceCDF[i] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numOutputBins; i++) {      pVal=referenceCDF[i];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numOutputBins; i++) {            if (referenceCDF[i] > pVal) {              if (i > 0) {                xVal=i - 1;              } else {                xVal=i;              }              break;            } else             if (referenceCDF[i] == pVal) {              xVal=i;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String debugTipText(){  return "If set to true, clusterer may output additional info to " + "the console.";}  }
class C{  public static DefUse makeInstance(BytecodeInstruction instruction){  if (!instruction.isDefUse())   throw new IllegalArgumentException("expect wrap of a defuse to create one");  if (instruction.isDefinition())   return makeDefinition(instruction);  if (instruction.isUse())   return makeUse(instruction);  throw new IllegalStateException("either isUse() or isDefinition() must return true on a defuse");}  }
class C{  public final BeanEventType createBeanType(String name,Class clazz,boolean isPreconfiguredStatic,boolean isPreconfigured,boolean isConfigured){  if (clazz == null) {    throw new IllegalArgumentException("Null value passed as class");  }  BeanEventType eventType=null;  typesPerJavaBeanLock.lock();  try {    eventType=typesPerJavaBean.get(clazz);    if (eventType != null) {      eventTypeIdGenerator.assignedType(name,eventType);      return eventType;    }    ConfigurationEventTypeLegacy legacyDef=classToLegacyConfigs.get(clazz.getName());    if ((legacyDef == null) && (defaultAccessorStyle != ConfigurationEventTypeLegacy.AccessorStyle.JAVABEAN)) {      legacyDef=new ConfigurationEventTypeLegacy();      legacyDef.setAccessorStyle(defaultAccessorStyle);    }    int typeId=eventTypeIdGenerator.getTypeId(name);    EventTypeMetadata metadata=EventTypeMetadata.createBeanType(name,clazz,isPreconfiguredStatic,isPreconfigured,isConfigured,EventTypeMetadata.TypeClass.APPLICATION);    eventType=new BeanEventType(metadata,typeId,clazz,eventAdapterService,legacyDef);    typesPerJavaBean.put(clazz,eventType);  } catch (  RuntimeException ex) {    throw ex;  } finally {    typesPerJavaBeanLock.unlock();  }  return eventType;}  }
class C{  public final boolean is3dMode(){  return is3dMode;}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public SolrCluster(final String solrClusterId,final String solrClusterName,final String solrClusterSize,final Status solrClusterStatus){  this.solrClusterId=solrClusterId;  this.solrClusterName=solrClusterName;  this.solrClusterSize=solrClusterSize;  this.solrClusterStatus=solrClusterStatus;}  }
class C{  public static boolean delete(String key){  return hawkFacade.delete(key);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  void clear(){  records.clear();  storedEntries=0;  storedEntriesPos.clear();  memoryUndo=0;  if (file != null) {    file.closeAndDeleteSilently();    file=null;    rowBuff=null;  }}  }
class C{  public RichDocumentUndoEvent(IDocument doc,int offset,String text,String preservedText,int eventType,Object source){  Assert.isNotNull(doc);  Assert.isTrue(offset >= 0);  fDocument=doc;  fOffset=offset;  fText=text;  fPreservedText=preservedText;  fEventType=eventType;  fSource=source;}  }
class C{  public void untrigger(){  if (puzzleBuildingBlock != null) {    puzzleBuildingBlock.put("active",false);  }}  }
class C{  public void showSummaries(){  for (  MemberRc m : members.values()) {    m.showSummary();  }}  }
class C{  private void initData(){  this.nameList=new ArrayList<>();  List<Location> locationList=DatabaseHelper.getInstance(this).readLocation();  for (  Location l : locationList) {    nameList.add(l.location);  }  this.location=new Location(nameList.get(0),null);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <T extends BipartiteGraph & DynamicBipartiteGraph>void testRandomConcurrentReadWriteThreads(T graph,int numReadersPerNode,int leftSize,int rightSize,double edgeProbability,Random random){  int maxWaitingTimeForThreads=20;  int numLeftReaders=leftSize * numReadersPerNode;  int numRightReaders=rightSize * numReadersPerNode;  int totalNumReaders=numLeftReaders + numRightReaders;  CountDownLatch readersDoneLatch=new CountDownLatch(totalNumReaders);  Set<Pair<Long,Long>> edges=Sets.newHashSetWithExpectedSize((int)(leftSize * rightSize * edgeProbability));  List<BipartiteGraphReader> leftReaders=Lists.newArrayListWithCapacity(numLeftReaders);  List<BipartiteGraphReader> rightReaders=Lists.newArrayListWithCapacity(numRightReaders);  Long2ObjectMap<LongSet> leftSideGraph=new Long2ObjectOpenHashMap<LongSet>(leftSize);  Long2ObjectMap<LongSet> rightSideGraph=new Long2ObjectOpenHashMap<LongSet>(leftSize);  int averageLeftDegree=(int)(rightSize * edgeProbability);  for (int i=0; i < leftSize; i++) {    LongSet nodeEdges=new LongOpenHashSet(averageLeftDegree);    for (int j=0; j < rightSize; j++) {      if (random.nextDouble() < edgeProbability) {        nodeEdges.add(j);        if (!rightSideGraph.containsKey(j)) {          rightSideGraph.put(j,new LongOpenHashSet(new long[]{i}));        } else {          rightSideGraph.get(j).add(i);        }        edges.add(Pair.of((long)i,(long)j));      }    }    leftSideGraph.put(i,nodeEdges);  }  for (int i=0; i < leftSize; i++) {    for (int j=0; j < numReadersPerNode; j++) {      leftReaders.add(new BipartiteGraphReader(graph,new CountDownLatch(0),readersDoneLatch,i,true,random.nextInt(maxWaitingTimeForThreads)));    }  }  for (int i=0; i < rightSize; i++) {    for (int j=0; j < numReadersPerNode; j++) {      rightReaders.add(new BipartiteGraphReader(graph,new CountDownLatch(0),readersDoneLatch,i,false,random.nextInt(maxWaitingTimeForThreads)));    }  }  List<WriterInfo> writerInfo=Lists.newArrayListWithCapacity(edges.size());  List<Pair<Long,Long>> edgesList=Lists.newArrayList(edges);  Collections.shuffle(edgesList);  CountDownLatch writerDoneLatch=new CountDownLatch(edgesList.size());  for (  Pair<Long,Long> edge : edgesList) {    writerInfo.add(new WriterInfo(edge.getLeft(),edge.getRight(),new CountDownLatch(0),writerDoneLatch));  }  ExecutorService executor=Executors.newFixedThreadPool(totalNumReaders + 1);  List<Callable<Integer>> allThreads=Lists.newArrayListWithCapacity(totalNumReaders + 1);  allThreads.add(Executors.callable(new BipartiteGraphWriter(graph,writerInfo),1));  for (int i=0; i < numLeftReaders; i++) {    allThreads.add(Executors.callable(leftReaders.get(i),1));  }  for (int i=0; i < numRightReaders; i++) {    allThreads.add(Executors.callable(rightReaders.get(i),1));  }  Collections.shuffle(allThreads,random);  try {    List<Future<Integer>> results=executor.invokeAll(allThreads,10,TimeUnit.SECONDS);    for (    Future<Integer> result : results) {      assertTrue(result.isDone());      assertEquals(1,result.get().intValue());    }  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for a thread was interrupted: ",e);  }catch (  ExecutionException e) {    throw new RuntimeException("Execution issue in an executor thread: ",e);  }  try {    readersDoneLatch.await();    writerDoneLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for a latch was interrupted: ",e);  }  for (int i=0; i < numLeftReaders; i++) {    LongSet expectedLeftEdges=leftSideGraph.get(leftReaders.get(i).queryNode);    assertTrue(leftReaders.get(i).getQueryNodeDegree() <= expectedLeftEdges.size());    if (leftReaders.get(i).getQueryNodeDegree() == 0) {      assertNull(leftReaders.get(i).getQueryNodeEdges());    } else {      for (      long edge : leftReaders.get(i).getQueryNodeEdges()) {        assertTrue(expectedLeftEdges.contains(edge));      }    }  }  for (int i=0; i < numRightReaders; i++) {    LongSet expectedRightEdges=rightSideGraph.get(rightReaders.get(i).queryNode);    assertTrue(rightReaders.get(i).getQueryNodeDegree() <= expectedRightEdges.size());    if (rightReaders.get(i).getQueryNodeDegree() == 0) {      assertNull(rightReaders.get(i).getQueryNodeEdges());    } else {      for (      long edge : rightReaders.get(i).getQueryNodeEdges()) {        assertTrue(expectedRightEdges.contains(edge));      }    }  }}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  @Override public void process(Boolean tuple){  doemit=true;  result=tuple && result;}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public Integer findViewID(String l){  if (resolved) {    return resource_info.inverse().get(l);  } else   return null;}  }
class C{  static byte[] generateContentAad(final byte[] messageId,final String idString,final int seqNum,final long len){  final byte[] idBytes=idString.getBytes(StandardCharsets.UTF_8);  final int aadLen=messageId.length + idBytes.length + Integer.SIZE / Byte.SIZE + Long.SIZE / Byte.SIZE;  final ByteBuffer aad=ByteBuffer.allocate(aadLen);  aad.put(messageId);  aad.put(idBytes);  aad.putInt(seqNum);  aad.putLong(len);  return aad.array();}  }
class C{  public Collection addAccept(Accept accept){  super.addElement(Accept.KEY,accept);  return this;}  }
class C{  @Override public final int hashCode(){  int hc=this.targetHost.hashCode();  if (this.localAddress != null)   hc^=localAddress.hashCode();  if (this.proxyChain != null) {    hc^=proxyChain.length;    for (    HttpHost aProxyChain : proxyChain)     hc^=aProxyChain.hashCode();  }  if (this.secure)   hc^=0x11111111;  hc^=this.tunnelled.hashCode();  hc^=this.layered.hashCode();  return hc;}  }
class C{  @Override public int index(int position){  return position;}  }
class C{  public DeltaSession(Manager manager){  super(manager);  setOwner(manager);}  }
class C{  public double[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public NullPointerException(java.lang.String s){}  }
class C{  public long convertPolarStereographicToGeodetic(double Easting,double Northing){  double dy=0, dx=0;  double rho=0;  double t;  double PHI, sin_PHI;  double tempPHI=0.0;  double essin;  double pow_es;  double delta_radius;  long Error_Code=POLAR_NO_ERROR;  double min_easting=Polar_False_Easting - Polar_Delta_Easting;  double max_easting=Polar_False_Easting + Polar_Delta_Easting;  double min_northing=Polar_False_Northing - Polar_Delta_Northing;  double max_northing=Polar_False_Northing + Polar_Delta_Northing;  if (Easting > max_easting || Easting < min_easting) {    Error_Code|=POLAR_EASTING_ERROR;  }  if (Northing > max_northing || Northing < min_northing) {    Error_Code|=POLAR_NORTHING_ERROR;  }  if (Error_Code == POLAR_NO_ERROR) {    dy=Northing - Polar_False_Northing;    dx=Easting - Polar_False_Easting;    rho=Math.sqrt(dx * dx + dy * dy);    delta_radius=Math.sqrt(Polar_Delta_Easting * Polar_Delta_Easting + Polar_Delta_Northing * Polar_Delta_Northing);    if (rho > delta_radius) {      Error_Code|=POLAR_RADIUS_ERROR;    }  }  if (Error_Code == POLAR_NO_ERROR) {    if ((dy == 0.0) && (dx == 0.0)) {      Latitude=PI_OVER_2;      Longitude=Polar_Origin_Long;    } else {      if (Southern_Hemisphere != 0) {        dy*=-1.0;        dx*=-1.0;      }      if (Math.abs(Math.abs(Polar_Origin_Lat) - PI_OVER_2) > 1.0e-10)       t=rho * tc / (Polar_a_mc); else       t=rho * e4 / (two_Polar_a);      PHI=PI_OVER_2 - 2.0 * Math.atan(t);      while (Math.abs(PHI - tempPHI) > 1.0e-10) {        tempPHI=PHI;        sin_PHI=Math.sin(PHI);        essin=es * sin_PHI;        pow_es=Math.pow((1.0 - essin) / (1.0 + essin),es_OVER_2);        PHI=PI_OVER_2 - 2.0 * Math.atan(t * pow_es);      }      Latitude=PHI;      Longitude=Polar_Origin_Long + Math.atan2(dx,-dy);      if (Longitude > PI)       Longitude-=TWO_PI; else       if (Longitude < -PI)       Longitude+=TWO_PI;      if (Latitude > PI_OVER_2)       Latitude=PI_OVER_2; else       if (Latitude < -PI_OVER_2)       Latitude=-PI_OVER_2;      if (Longitude > PI)       Longitude=PI; else       if (Longitude < -PI)       Longitude=-PI;    }    if (Southern_Hemisphere != 0) {      Latitude*=-1.0;      Longitude*=-1.0;    }  }  return (Error_Code);}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  int size;  int width=getMeasuredWidth();  int height=getMeasuredHeight();  int widthWithoutPadding=width - getPaddingLeft() - getPaddingRight();  int heightWithoutPadding=height - getPaddingTop() - getPaddingBottom();  if (widthWithoutPadding > heightWithoutPadding) {    size=heightWithoutPadding;  } else {    size=widthWithoutPadding;  }  setMeasuredDimension(size + getPaddingLeft() + getPaddingRight(),size + getPaddingTop() + getPaddingBottom());}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  return !Space.isInSpace(CopyMS.NURSERY,object);}  }
class C{  @Override public boolean ownDeletesAreVisible(int type){  debugCodeCall("ownDeletesAreVisible",type);  return false;}  }
class C{  public SgmException(String message){  this(message,null);}  }
class C{  public FileConverter(){  super();}  }
class C{  public static void deletePage(final IdocApplet ui){  FileVO ele=(FileVO)ui.getFileVO();  ImageVO imageVO=(ImageVO)ele.getListImage().get(ele.getImageSelectIndex());  ele.getListImage().remove(ele.getImageSelectIndex());  ele.setImageSelectIndex(0);  delete(imageVO.getImage());}  }
class C{  public TweetRecommendationInfo(long recommendation,double weight,Map<Byte,LongList> socialProof){  this.recommendation=recommendation;  this.recommendationType=RecommendationType.TWEET;  this.weight=weight;  this.socialProof=socialProof;}  }
class C{  int parseAmPmMarker(String source,int ofs) throws ParseException {  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (int i=0; i < markers.length; i++) {    if (markers[i].equalsIgnoreCase(source)) {      return i;    }  }  char ch=source.charAt(0);  if (ch == markers[0].charAt(0)) {    return Calendar.AM;  }  if (ch == markers[1].charAt(0)) {    return Calendar.PM;  }  return throwInvalid("am/pm marker",ofs);}  }
class C{  @Override public long length() throws SQLException {  try {    debugCodeCall("length");    checkClosed();    if (value.getType() == Value.CLOB) {      long precision=value.getPrecision();      if (precision > 0) {        return precision;      }    }    return IOUtils.copyAndCloseInput(value.getReader(),null,Long.MAX_VALUE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public String buildUri(String representationId,int segmentNumber,int bandwidth,long time){  StringBuilder builder=new StringBuilder();  for (int i=0; i < identifierCount; i++) {    builder.append(urlPieces[i]);    if (identifiers[i] == REPRESENTATION_ID) {      builder.append(representationId);    } else     if (identifiers[i] == NUMBER_ID) {      builder.append(String.format(identifierFormatTags[i],segmentNumber));    } else     if (identifiers[i] == BANDWIDTH_ID) {      builder.append(String.format(identifierFormatTags[i],bandwidth));    } else     if (identifiers[i] == TIME_ID) {      builder.append(String.format(identifierFormatTags[i],time));    }  }  builder.append(urlPieces[identifierCount]);  return builder.toString();}  }
class C{  @Override public void selectionIn(final Envelope3D env){  final Envelope3D envInWorld=Envelope3D.withYNegated(env);  final Collection<IAgent> agents=scope.getTopology().getSpatialIndex().allInEnvelope(scope,envInWorld.centre(),envInWorld,new Different(),false);  final Map<String,Runnable> actions=new LinkedHashMap<>();  final Map<String,Image> images=new HashMap<>();  images.put(renderer.camera.isROISticky() ? "Hide region" : "Keep region visible",GamaIcons.create(IGamaIcons.MENU_FOLLOW).image());  images.put("Focus on region",GamaIcons.create(IGamaIcons.DISPLAY_TOOLBAR_ZOOMFIT).image());  actions.put(renderer.camera.isROISticky() ? "Hide region" : "Keep region visible",null);  actions.put("Focus on region",null);  WorkbenchHelper.run(null);}  }
class C{  private static String property(String name){  return System.getProperty(name);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (pass == 0 && dataset instanceof IntervalXYDataset && getItemVisible(series,item)) {    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;    PlotOrientation orientation=plot.getOrientation();    if (this.drawXError) {      double x0=ixyd.getStartXValue(series,item);      double x1=ixyd.getEndXValue(series,item);      double y=ixyd.getYValue(series,item);      RectangleEdge edge=plot.getDomainAxisEdge();      double xx0=domainAxis.valueToJava2D(x0,dataArea,edge);      double xx1=domainAxis.valueToJava2D(x1,dataArea,edge);      double yy=rangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());      Line2D line;      Line2D cap1;      Line2D cap2;      double adj=this.capLength / 2.0;      if (orientation == PlotOrientation.VERTICAL) {        line=new Line2D.Double(xx0,yy,xx1,yy);        cap1=new Line2D.Double(xx0,yy - adj,xx0,yy + adj);        cap2=new Line2D.Double(xx1,yy - adj,xx1,yy + adj);      } else {        line=new Line2D.Double(yy,xx0,yy,xx1);        cap1=new Line2D.Double(yy - adj,xx0,yy + adj,xx0);        cap2=new Line2D.Double(yy - adj,xx1,yy + adj,xx1);      }      if (this.errorPaint != null) {        g2.setPaint(this.errorPaint);      } else {        g2.setPaint(getItemPaint(series,item));      }      if (this.errorStroke != null) {        g2.setStroke(this.errorStroke);      } else {        g2.setStroke(getItemStroke(series,item));      }      g2.draw(line);      g2.draw(cap1);      g2.draw(cap2);    }    if (this.drawYError) {      double y0=ixyd.getStartYValue(series,item);      double y1=ixyd.getEndYValue(series,item);      double x=ixyd.getXValue(series,item);      RectangleEdge edge=plot.getRangeAxisEdge();      double yy0=rangeAxis.valueToJava2D(y0,dataArea,edge);      double yy1=rangeAxis.valueToJava2D(y1,dataArea,edge);      double xx=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());      Line2D line;      Line2D cap1;      Line2D cap2;      double adj=this.capLength / 2.0;      if (orientation == PlotOrientation.VERTICAL) {        line=new Line2D.Double(xx,yy0,xx,yy1);        cap1=new Line2D.Double(xx - adj,yy0,xx + adj,yy0);        cap2=new Line2D.Double(xx - adj,yy1,xx + adj,yy1);      } else {        line=new Line2D.Double(yy0,xx,yy1,xx);        cap1=new Line2D.Double(yy0,xx - adj,yy0,xx + adj);        cap2=new Line2D.Double(yy1,xx - adj,yy1,xx + adj);      }      if (this.errorPaint != null) {        g2.setPaint(this.errorPaint);      } else {        g2.setPaint(getItemPaint(series,item));      }      if (this.errorStroke != null) {        g2.setStroke(this.errorStroke);      } else {        g2.setStroke(getItemStroke(series,item));      }      g2.draw(line);      g2.draw(cap1);      g2.draw(cap2);    }  }  super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  private DaemonThreadFactory(){}  }
class C{  public int readOneTag() throws IOException {  int header=in.readUI16();  int type=header >> 6;  int length=header & 0x3F;  boolean longTag=(length == 0x3F);  if (longTag) {    length=(int)in.readUI32();  }  byte[] contents=in.read(length);  consumer.tag(type,longTag,contents);  return type;}  }
class C{  public IntArrayList(int initialCapacity){  this(new int[initialCapacity]);  setSizeRaw(0);}  }
class C{  @Nullable private IgfsPath convert(Path path){  if (path == null)   return null;  return path.isAbsolute() ? new IgfsPath(path.toUri().getPath()) : new IgfsPath(workingDir,path.toUri().getPath());}  }
class C{  public void paintMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private boolean moveWhereCondition(Set<ColumnSource> tableSources,ConditionExpression condition,Joinable joinable){  if (condition instanceof AnyCondition || condition instanceof ExistsCondition) {    return false;  }  if (joinable instanceof TableGroupJoinTree) {    for (    TableGroupJoinNode table : (TableGroupJoinTree)joinable) {      tableSources.remove(table.getTable());    }  } else   if (joinable instanceof JoinNode) {    JoinNode join=(JoinNode)joinable;    if (join.isInnerJoin()) {      Set<ColumnSource> forLeft=new HashSet<>(tableSources);      Set<ColumnSource> forRight=new HashSet<>(tableSources);      if (moveWhereCondition(forLeft,condition,join.getLeft())) {        return true;      }      if (forLeft.isEmpty()) {        tableSources.clear();      } else {        if (moveWhereCondition(forRight,condition,join.getRight())) {          return true;        }        tableSources.retainAll(forLeft);        tableSources.retainAll(forRight);      }      if (tableSources.isEmpty()) {        if (join.getJoinConditions() == null) {          join.setJoinConditions(new ConditionList());        }        join.getJoinConditions().add(condition);        return true;      }    }    return false;  } else   if (joinable instanceof TableSource) {    tableSources.remove(joinable);    return false;  }  return false;}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  public Viewport(){}  }
class C{  public boolean containsValue(int value){  return indexOfValue(value) >= 0;}  }
class C{  public static boolean containsAny(Collection source,Collection candidates){  if (isEmpty(source) || isEmpty(candidates)) {    return false;  }  for (Iterator it=candidates.iterator(); it.hasNext(); ) {    if (source.contains(it.next())) {      return true;    }  }  return false;}  }
class C{  public static boolean isProcessRunning(final String processName){  return getInternals().isProcessRunning(processName);}  }
class C{  public void forwardOption(Flag flag){  if (flag.isDefined() && flag.getValue().booleanValue()) {    addFlag(flag.getOptionID());  }}  }
class C{  @Override public void closeOutbound(){  if (logger != null) {    logger.println("closeOutbound() " + isOutboundDone);  }  if (isOutboundDone) {    return;  }  isOutboundDone=true;  if (handshake_started) {    alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);    close_notify_was_sent=true;  } else {    shutdown();  }  engine_was_closed=true;}  }
class C{  public int lastIndexOf(java.lang.CharSequence csq,int fromIndex){  final int csqLength=csq.length();  final int min=0;  final int max=Math.min(fromIndex,_count - csqLength);  if (csqLength == 0) {    return (min > max) ? -1 : max;  }  final char c=csq.charAt(0);  for (int i=lastIndexOf(c,max); (i >= 0); i=lastIndexOf(c,--i)) {    boolean match=true;    for (int j=1; j < csqLength; j++) {      if (this.charAt(i + j) != csq.charAt(j)) {        match=false;        break;      }    }    if (match) {      return i;    }  }  return -1;}  }
class C{  private List<MemberState> assignMembers(int index,List<MemberState> sortedMembers){  List<MemberState> members=new ArrayList<>(sortedMembers.size());  for (int i=0; i < sortedMembers.size(); i++) {    if ((i + 1) % index == 0) {      members.add(sortedMembers.get(i));    }  }  return members;}  }
class C{  void trackMotionScroll(int deltaX){  if (getChildCount() == 0) {    return;  }  boolean toLeft=deltaX < 0;  int limitedDeltaX=getLimitedMotionScrollAmount(toLeft,deltaX);  if (limitedDeltaX != deltaX) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenLeftAndRight(limitedDeltaX);  detachOffScreenChildren(toLeft);  if (toLeft) {    fillToGalleryRight();  } else {    fillToGalleryLeft();  }  setSelectionToCenterChild();  invalidate();}  }
class C{  public boolean isValidating(){  return getFeature(XmlPullParser.FEATURE_VALIDATION);}  }
class C{  @Override public String createVServer(PropertyHandler paramHandler) throws Exception {  LPlatformClient vsysClient=getLPlatformClient(paramHandler);  String vserverId="";  List<LServerConfiguration> lServers=vsysClient.getConfiguration().getVServers();  Iterator<LServerConfiguration> lServerIter=lServers.iterator();  while (lServerIter.hasNext()) {    LServerConfiguration tempLServer=lServerIter.next();    String serverName=tempLServer.getServerName();    if (serverName.equals(paramHandler.getInstanceName())) {      throw new InstanceExistsException(Messages.getAll("error_instance_exists",new Object[]{serverName}));    }  }  vserverId=vsysClient.createLServer(paramHandler.getInstanceName(),paramHandler.getVserverType(),paramHandler.getDiskImageId(),resolveValidNetworkId(paramHandler),paramHandler.getVMPool(),paramHandler.getStoragePool(),paramHandler.getCountCPU());  paramHandler.setVserverId(vserverId);  paramHandler.getIaasContext().clear();  return vserverId;}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  public SparseWeakArray(){  this(10);}  }
class C{  protected void removeBuffer(IBuffer buffer){  if (VERBOSE) {    String owner=((Openable)buffer.getOwner()).toStringWithAncestors();    System.out.println("Removing buffer for " + owner);  }synchronized (this.openBuffers) {    this.openBuffers.remove(buffer.getOwner());  }  this.openBuffers.closeBuffers();  if (VERBOSE) {    System.out.println("-> Buffer cache filling ratio = " + NumberFormat.getInstance().format(this.openBuffers.fillingRatio()) + "%");  }}  }
class C{  public static int combineHashCodes(int... nums){  final int prime=31;  int result=1;  for (  int num : nums) {    result=prime * result + num;  }  return result;}  }
class C{  public boolean undo(){  return table.undo();}  }
class C{  public void printTrees(final EvolutionState state,final int log){  for (int x=0; x < trees.length; x++) {    state.output.println("Tree " + x + ":",log);    trees[x].printTreeForHumans(state,log);  }}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Integer && val instanceof Long) {          int k=unwrapKey(key);          long v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean isShowErrorMessageForFocusedComponent(){  return showErrorMessageForFocusedComponent;}  }
class C{  public String search() throws Exception {  executeQuery();  return SUCCESS;}  }
class C{  private CoderResult escapeSequenceOther(short newByte){  if (newByte >= 0x20 && newByte <= 0x2F) {    state=ESCAPE_SEQUENCE_OTHER;    versionSequenceAllowed=false;    queue.write(newByte);  } else   if (newByte >= 0x30 && newByte <= 0x7E) {    state=NORMAL_BYTES;    versionSequenceAllowed=false;    queue.reset();  } else {    return malformedInput(ERR_ESCBYTE);  }  return CoderResult.UNDERFLOW;}  }
class C{  @Inline @Override public final void objectReferenceNonHeapWrite(Address slot,ObjectReference target,Word unusedA,Word unusedB){  slot.store(target);}  }
class C{  @Override public boolean isFinishedCloudlets(){  return getCloudletFinishedList().size() > 0;}  }
class C{  protected void replaceLayoutBlockManager(){  if (InstanceManager.getDefault(LayoutBlockManager.class).getClass().getName().equals(LayoutBlockManager.class.getName())) {    return;  }  if (InstanceManager.getNullableDefault(LayoutBlockManager.class) != null) {    InstanceManager.getDefault(jmri.ConfigureManager.class).deregister(InstanceManager.getDefault(LayoutBlockManager.class));  }  LayoutBlockManager pManager=LayoutBlockManager.instance();  InstanceManager.store(pManager,jmri.jmrit.display.layoutEditor.LayoutBlockManager.class);  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerConfig(pManager,jmri.Manager.LAYOUTBLOCKS);  }}  }
class C{  private Map<UUID,Integer> assignReducers0(HadoopMapReducePlanTopology top,Collection<HadoopInputSplit> splits,Mappers mappers,int reducerCnt){  Map<UUID,Integer> res=new HashMap<>();  Map<HadoopInputSplit,Integer> splitToReducerCnt=assignReducersToSplits(splits,reducerCnt);  int remaining=0;  for (  Map.Entry<HadoopInputSplit,Integer> entry : splitToReducerCnt.entrySet()) {    HadoopInputSplit split=entry.getKey();    int cnt=entry.getValue();    if (cnt > 0) {      int assigned=assignLocalReducers(split,cnt,top,mappers,res);      assert assigned <= cnt;      remaining+=cnt - assigned;    }  }  if (remaining > 0)   assignRemoteReducers(remaining,top,mappers,res);  return res;}  }
class C{  @Override public INaviProject addProject(final String name) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00661: Project name can not be null");  Preconditions.checkArgument(m_database.isConnected(),"IE00662: Database must be connected before a project can be added");  Preconditions.checkArgument(m_database.isLoaded(),"IE00663: Database must be loaded before a project can be added");  final CProject newProject=m_provider.createProject(name);  m_projects.add(newProject);  for (  final IDatabaseListener listener : m_listeners) {    try {      listener.addedProject(m_database,newProject);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return newProject;}  }
class C{  private void computeIntersectionSnaps(Collection snapPts){  for (Iterator it=snapPts.iterator(); it.hasNext(); ) {    Coordinate snapPt=(Coordinate)it.next();    HotPixel hotPixel=new HotPixel(snapPt,scaleFactor,li);    pointSnapper.snap(hotPixel);  }}  }
class C{  public static IClientConfig createWithAuthenticators(final MSAAuthenticator msaAuthenticator,final ADALAuthenticator adalAuthenticator){  DefaultClientConfig config=new DefaultClientConfig(){  };  config.mAuthenticator=new DisambiguationAuthenticator(msaAuthenticator,adalAuthenticator);  config.getLogger().logDebug("Created DisambiguationAuthenticator");  return config;}  }
class C{  public Quaterniond add(double x,double y,double z,double w){  return add(x,y,z,w,this);}  }
class C{  public static void checkTranslationArguments(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final String mnemonic) throws InternalTranslationException {  Preconditions.checkNotNull(environment,ErrorStrings.ENVIRONMENT_ARGUMENT_ERROR);  Preconditions.checkNotNull(instruction,ErrorStrings.INSTRUCTION_ARGUMENT_ERROR);  Preconditions.checkNotNull(instructions,ErrorStrings.INSTRUCTIONS_ARGUMENT_ERROR);}  }
class C{  public static boolean isActive(){  return UIManager.getLookAndFeel() instanceof AdempiereLookAndFeel;}  }
class C{  public static void shuffle(int[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  ServerSessionManager registerAddress(UUID client,Address address){  ServerSessionContext session=clients.get(client);  if (session != null) {    session.setAddress(address);    if (!address.equals(context.getCluster().member().serverAddress())) {      Connection connection=connections.remove(client);      if (connection != null) {        connection.close();        session.setConnection(null);      }    }  }  addresses.put(client,address);  return this;}  }
class C{  public void markDeleted(boolean deleted){  markedAsDeleted=deleted;}  }
class C{  public static DeviceService deviceService(){  return deviceService;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CLASS_CONTENT___COMMENT_1:    return ((InternalEList<?>)getComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___CLASS_DEFINITION_1:  return ((InternalEList<?>)getClassDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___TRACE_1:return ((InternalEList<?>)getTrace_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___POSITION_1:return ((InternalEList<?>)getPosition_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___DISPLAY_COLOR_1:return ((InternalEList<?>)getDisplayColor_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___ABSTRACT_1:return ((InternalEList<?>)getAbstract_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___INVARIANT_1:return ((InternalEList<?>)getInvariant_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___SOFTWARE_PATTERN_1:return ((InternalEList<?>)getSoftwarePattern_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___DEPEND_1:return ((InternalEList<?>)getDepend_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___SYMMETRIC_REFLEXIVE_ASSOCIATION_1:return ((InternalEList<?>)getSymmetricReflexiveAssociation_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___ATTRIBUTE_1:return ((InternalEList<?>)getAttribute_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___STATE_MACHINE_1:return ((InternalEList<?>)getStateMachine_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___INLINE_ASSOCIATION_1:return ((InternalEList<?>)getInlineAssociation_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___CONCRETE_METHOD_DECLARATION_1:return ((InternalEList<?>)getConcreteMethodDeclaration_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___CONSTANT_DECLARATION_1:return ((InternalEList<?>)getConstantDeclaration_1()).basicRemove(otherEnd,msgs);case UmplePackage.CLASS_CONTENT___EXTRA_CODE_1:return ((InternalEList<?>)getExtraCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.215 -0500",hash_original_method="8EE941BB2D8E39A517F98D1ED3613B4D",hash_generated_method="0C3FA5BA462F527FE7CBB3A7D0B35421") public ExtensionHeader createMinSEHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  MinSE e=new MinSE();  e.setExpires(expires);  return e;}  }
class C{  @Override public String toString(){  return FormatUtil.format(b,FormatUtil.NF4);}  }
class C{  @Override public WebResource crawlSite(Audit audit,String siteUrl){  Crawler crawler=getCrawlerInstance((Set<Parameter>)audit.getParameterSet(),true);  crawler.setSiteURL(siteUrl);  return crawl(crawler,audit,true);}  }
class C{  public final void testNoWhitespaceWithContextParameter(){  assertNotNull(Validators.noWhitespace(getContext()));}  }
class C{  public void onEngineDataReceived(){  if (mEngineStartTime == -1) {    mEngineStartTime=SystemClock.elapsedRealtime();  }}  }
class C{  private void createMenu(){  JMenu mFile=AEnv.getMenu("File");  menuBar.add(mFile);  AEnv.addMenuItem("PrintScreen",null,KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN,0),mFile,this);  AEnv.addMenuItem("ScreenShot",null,KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN,Event.SHIFT_MASK),mFile,this);  AEnv.addMenuItem("Report",null,KeyStroke.getKeyStroke(KeyEvent.VK_P,Event.ALT_MASK),mFile,this);  mFile.addSeparator();  AEnv.addMenuItem("PrintCustomize","Preference",null,mFile,this);  AEnv.addMenuItem("Translate",null,null,mFile,this);  AEnv.addMenuItem("Find",null,KeyStroke.getKeyStroke(KeyEvent.VK_F,Event.CTRL_MASK),mFile,this);  mFile.addSeparator();  AEnv.addMenuItem("PageSetup",null,null,mFile,this);  AEnv.addMenuItem("Print",null,KeyStroke.getKeyStroke(KeyEvent.VK_P,Event.CTRL_MASK),mFile,this);  if (m_isCanExport)   AEnv.addMenuItem("Export",null,null,mFile,this);  mFile.addSeparator();  AEnv.addMenuItem("End",null,KeyStroke.getKeyStroke(KeyEvent.VK_X,Event.ALT_MASK),mFile,this);  AEnv.addMenuItem("Logout",null,KeyStroke.getKeyStroke(KeyEvent.VK_L,Event.SHIFT_MASK + Event.ALT_MASK),mFile,this);  AEnv.addMenuItem("Exit",null,KeyStroke.getKeyStroke(KeyEvent.VK_X,Event.SHIFT_MASK + Event.ALT_MASK),mFile,this);  JMenu mView=AEnv.getMenu("View");  menuBar.add(mView);  if (MRole.getDefault().isAllow_Info_Product()) {    AEnv.addMenuItem("InfoProduct",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK),mView,this);  }  if (MRole.getDefault().isAllow_Info_BPartner()) {    AEnv.addMenuItem("InfoBPartner",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK + Event.CTRL_MASK),mView,this);  }  if (MRole.getDefault().isShowAcct() && MRole.getDefault().isAllow_Info_Account()) {    AEnv.addMenuItem("InfoAccount",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK + Event.CTRL_MASK),mView,this);  }  if (MRole.getDefault().isAllow_Info_Schedule()) {    AEnv.addMenuItem("InfoSchedule",null,null,mView,this);  }  if (MRole.getDefault().isAllow_Info_MRP()) {    AEnv.addMenuItem("InfoMRP","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_CRP()) {    AEnv.addMenuItem("InfoCRP","Info",null,mView,this);  }  mView.addSeparator();  if (MRole.getDefault().isAllow_Info_Order()) {    AEnv.addMenuItem("InfoOrder","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Invoice()) {    AEnv.addMenuItem("InfoInvoice","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_InOut()) {    AEnv.addMenuItem("InfoInOut","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Payment()) {    AEnv.addMenuItem("InfoPayment","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_CashJournal()) {    AEnv.addMenuItem("InfoCashLine","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Resource()) {    AEnv.addMenuItem("InfoAssignment","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Asset()) {    AEnv.addMenuItem("InfoAsset","Info",null,mView,this);  }  JMenu mGo=AEnv.getMenu("Go");  menuBar.add(mGo);  AEnv.addMenuItem("First","First",KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,Event.ALT_MASK),mGo,this);  AEnv.addMenuItem("PreviousPage","Previous",KeyStroke.getKeyStroke(KeyEvent.VK_UP,Event.ALT_MASK),mGo,this);  AEnv.addMenuItem("NextPage","Next",KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,Event.ALT_MASK),mGo,this);  AEnv.addMenuItem("Last","Last",KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,Event.ALT_MASK),mGo,this);  JMenu mTools=AEnv.getMenu("Tools");  menuBar.add(mTools);  AEnv.addMenuItem("Calculator",null,null,mTools,this);  AEnv.addMenuItem("Calendar",null,null,mTools,this);  MUser user=MUser.get(Env.getCtx());  if (user.isAdministrator())   AEnv.addMenuItem("Editor",null,null,mTools,this);  AEnv.addMenuItem("Script",null,null,mTools,this);  mTools.addSeparator();  AEnv.addMenuItem("Preference",null,null,mTools,this);  AMenu aMenu=(AMenu)Env.getWindow(0);  JMenu mWindow=new WindowMenu(aMenu.getWindowManager(),this);  menuBar.add(mWindow);  JMenu mHelp=AEnv.getMenu("Help");  menuBar.add(mHelp);  AEnv.addMenuItem("Online",null,null,mHelp,this);  AEnv.addMenuItem("SendMail",null,null,mHelp,this);  AEnv.addMenuItem("About",null,null,mHelp,this);  setButton(bPrint,"Print","Print");  setButton(bSendMail,"SendMail","SendMail");  setButton(bPageSetup,"PageSetup","PageSetup");  setButton(bArchive,"Archive","Archive");  if (m_isCanExport)   setButton(bExport,"Export","Export");  setButton(bNext,"NextPage","Next");  setButton(bPrevious,"PreviousPage","Previous");  setButton(bFind,"Find","Find");  setButton(bCustomize,"PrintCustomize","Preference");  setButton(bEnd,"End","End");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public String toString(){  return cern.colt.Arrays.toString(partFromTo(0,size() - 1).elements());}  }
class C{  public void removeMarker(String property,String marker){  String propertyString=getProperties().getProperty(property,"");  int idx=propertyString.indexOf(marker);  if (idx != -1) {    StringBuffer sb=new StringBuffer(propertyString);    sb.delete(idx,idx + marker.length());    getProperties().setProperty(property,sb.toString());  }}  }
class C{  public static String utf2string(byte[] src,int sindex,int len){  char dst[]=new char[len];  int len1=utf2chars(src,sindex,dst,0,len);  return new String(dst,0,len1);}  }
class C{  public Matrix4x3d shadow(Vector4dc light,double a,double b,double c,double d){  return shadow(light.x(),light.y(),light.z(),light.w(),a,b,c,d,this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  DictionaryNames(String name,String suffix){  markers[UNIT]="U-" + name + suffix;  markers[BEGIN]="B-" + name + suffix;  markers[INSIDE]="I-" + name + suffix;  markers[END]="L-" + name + suffix;}  }
class C{  public void saveLockPattern(List<LockPatternView.Cell> pattern){  final byte[] hash=LockPatternUtils.patternToHash(pattern);  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"rwd");    if (pattern == null) {      raf.setLength(0);    } else {      raf.write(hash,0,hash.length);    }    raf.close();  } catch (  FileNotFoundException fnfe) {    Log.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }catch (  IOException ioe) {    Log.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }}  }
class C{  private SSLEngineResult unwrap0() throws SSLException {  SSLEngineResult res;  do {    res=sslEngine.unwrap(inNetBuf,appBuf);    if (log.isDebugEnabled())     log.debug("Unwrapped raw data [status=" + res.getStatus() + ", handshakeStatus="+ res.getHandshakeStatus()+ ", ses="+ ses+ ']');    if (res.getStatus() == Status.BUFFER_OVERFLOW)     appBuf=expandBuffer(appBuf,appBuf.capacity() * 2);  } while ((res.getStatus() == Status.OK || res.getStatus() == Status.BUFFER_OVERFLOW) && (handshakeFinished && res.getHandshakeStatus() == NOT_HANDSHAKING || res.getHandshakeStatus() == NEED_UNWRAP));  return res;}  }
class C{  @Override public Void visitImport(ImportTree importTree,Void usedSymbols){  return null;}  }
class C{  public String write(Geometry geometry){  Writer sw=new StringWriter();  try {    writeFormatted(geometry,isFormatted,sw);  } catch (  IOException ex) {    Assert.shouldNeverReachHere();  }  return sw.toString();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  Timestamp dateAcct=getDateAcct();  if (!MPeriod.isOpen(getCtx(),dateAcct,isReceipt() ? X_C_DocType.DOCBASETYPE_ARReceipt : X_C_DocType.DOCBASETYPE_APPayment,getAD_Org_ID()))   dateAcct=new Timestamp(System.currentTimeMillis());  boolean reconciled=getC_BankStatementLine_ID() == 0;  MPayment reversal=new MPayment(getCtx(),0,get_TrxName());  copyValues(this,reversal);  reversal.setClientOrg(this);  reversal.setC_Order_ID(0);  reversal.setC_Invoice_ID(0);  reversal.setDateAcct(dateAcct);  reversal.setDocumentNo(getDocumentNo() + REVERSE_INDICATOR);  reversal.setDocStatus(DOCSTATUS_Drafted);  reversal.setDocAction(DOCACTION_Complete);  reversal.setPayAmt(getPayAmt().negate());  reversal.setDiscountAmt(getDiscountAmt().negate());  reversal.setWriteOffAmt(getWriteOffAmt().negate());  reversal.setOverUnderAmt(getOverUnderAmt().negate());  reversal.setIsAllocated(true);  reversal.setIsReconciled(reconciled);  reversal.setIsOnline(false);  reversal.setIsApproved(true);  reversal.setR_PnRef(null);  reversal.setR_Result(null);  reversal.setR_RespMsg(null);  reversal.setR_AuthCode(null);  reversal.setR_Info(null);  reversal.setProcessing(false);  reversal.setOProcessing("N");  reversal.setProcessed(false);  reversal.setPosted(false);  reversal.setDescription(getDescription());  reversal.addDescription("{->" + getDocumentNo() + ")");  reversal.setReversal_ID(getC_Payment_ID());  reversal.saveEx(get_TrxName());  if (!reversal.processIt(DocAction.ACTION_Complete)) {    m_processMsg="Reversal ERROR: " + reversal.getProcessMsg();    return false;  }  reversal.closeIt();  reversal.setDocStatus(DOCSTATUS_Reversed);  reversal.setDocAction(DOCACTION_None);  reversal.save(get_TrxName());  deAllocate();  setIsReconciled(reconciled);  setIsAllocated(true);  addDescription("(" + reversal.getDocumentNo() + "<-)");  setDocStatus(DOCSTATUS_Reversed);  setDocAction(DOCACTION_None);  setProcessed(true);  setReversal_ID(reversal.getC_Payment_ID());  MAllocationHdr alloc=new MAllocationHdr(getCtx(),false,getDateTrx(),getC_Currency_ID(),Msg.translate(getCtx(),"C_Payment_ID") + ": " + reversal.getDocumentNo(),get_TrxName());  alloc.setAD_Org_ID(getAD_Org_ID());  if (!alloc.save())   log.warning("Automatic allocation - hdr not saved"); else {    MAllocationLine aLine=new MAllocationLine(alloc,getPayAmt(true),Env.ZERO,Env.ZERO,Env.ZERO);    aLine.setDocInfo(getC_BPartner_ID(),0,0);    aLine.setPaymentInfo(getC_Payment_ID(),0);    if (!aLine.save(get_TrxName()))     log.warning("Automatic allocation - line not saved");    aLine=new MAllocationLine(alloc,reversal.getPayAmt(true),Env.ZERO,Env.ZERO,Env.ZERO);    aLine.setDocInfo(reversal.getC_BPartner_ID(),0,0);    aLine.setPaymentInfo(reversal.getC_Payment_ID(),0);    if (!aLine.save(get_TrxName()))     log.warning("Automatic allocation - reversal line not saved");  }  alloc.processIt(DocAction.ACTION_Complete);  alloc.save(get_TrxName());  StringBuffer info=new StringBuffer(reversal.getDocumentNo());  info.append(" - @C_AllocationHdr_ID@: ").append(alloc.getDocumentNo());  if (getC_BPartner_ID() != 0) {    MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());    bp.setTotalOpenBalance();    bp.save(get_TrxName());  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=info.toString();  return true;}  }
class C{  public LauncherEdgeEffect(){  mPaint.setAntiAlias(true);  mPaint.setStyle(Paint.Style.FILL);  mInterpolator=new DecelerateInterpolator();}  }
class C{  public Properties(Properties defaults){  this.defaults=defaults;}  }
class C{  public boolean isSetWaitingOnJobs(){  return this.waitingOnJobs != null;}  }
class C{  public static String paddedHashCode(Object o){  String s="0000000000";  if (o != null) {    s=PADDED_HASH_FORMAT.format(o.hashCode());  }  return s;}  }
class C{  public MLNumericArray(String name,int type,T[] vals,int m){  this(name,new int[]{m,vals.length / m},type,0);  for (int i=0; i < vals.length; i++) {    set(vals[i],i);  }}  }
class C{  public void clear(){  this.map.clear();  this.count=0;}  }
class C{  public static void main(String args[]){  if (args.length < 5 || args.length > 6) {    throw new RuntimeException("Usage: java PropertyImport <driverClass> <driverURL> <userName> <userPwd> <propertyFile> [<overwriteFlag>] [<contextId>]");  }  PropertyImport propertyImport=new PropertyImport(args[0],args[1],args[2],args[3],args[4],args.length >= 6 ? Boolean.parseBoolean(args[5]) : false,args.length >= 7 ? args[6] : null);  propertyImport.execute();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.TRANSITION_ROOT__DEF:    return basicSetDef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void reset(){  if (isReset == false) {    md5.reset();    sha.reset();    isReset=true;  }}  }
class C{  public Sensor createNewSensor(String systemName,String userName){  Sensor s;  String sName=SerialAddress.normalizeSystemName(systemName);  if (sName.equals("")) {    log.error("Invalid C/MRI Sensor system name - " + systemName);    return null;  }  s=getBySystemName(sName);  if (s != null) {    log.error("Sensor with this name already exists - " + systemName);    return null;  }  String altName=SerialAddress.convertSystemNameToAlternate(sName);  s=getBySystemName(altName);  if (s != null) {    log.error("Sensor with name '" + systemName + "' already exists as '"+ altName+ "'");    return null;  }  int bit=SerialAddress.getBitFromSystemName(sName);  if ((bit <= 0) || (bit >= SENSORSPERUA)) {    log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-"+ Integer.toString(SENSORSPERUA - 1));    return null;  }  if (userName == null) {    s=new SerialSensor(sName);  } else {    s=new SerialSensor(sName,userName);  }  SerialNode node=(SerialNode)SerialAddress.getNodeFromSystemName(sName,_memo.getTrafficController());  if (node == null) {    log.warn("Sensor " + sName + " refers to an undefined Serial Node.");    return s;  }  node.registerSensor(s,bit - 1);  return s;}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public E pop(){  E item=peek();  top=top.next;  return item;}  }
class C{  protected void sequence_TAnonymousFormalParameter(ISerializationContext context,TAnonymousFormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void test() throws Exception {  BigInteger val=new BigInteger("ffffffffffffffff",16);  TestCase.assertEquals(-1,U64.t(val));  TestCase.assertEquals(val,U64.f(-1));}  }
class C{  public void finer(Supplier<String> msgSupplier){  log(Level.FINER,msgSupplier);}  }
class C{  private Encoding(){}  }
class C{  @Field(1) public cl_image_format image_channel_data_type(int image_channel_data_type){  this.io.setIntField(this,1,image_channel_data_type);  return this;}  }
class C{  public ProcessClosedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public XmlWriter namespace(String prefix,String uri) throws IOException {  if (prefix != null && prefix.length() > 0) {    return attribute("xmlns:" + prefix,uri);  } else {    return attribute("xmlns",uri);  }}  }
class C{  public void center0(int q){  for (int i=0; i < coeffs.length; i++) {    while (coeffs[i] < -q / 2) {      coeffs[i]+=q;    }    while (coeffs[i] > q / 2) {      coeffs[i]-=q;    }  }}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.177 -0400",hash_original_method="D32EEB375779F97BCF12B169B556A960",hash_generated_method="9FC0E0DF3457CB8C5EB053B18DF07AD7") public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  protected void updateVelocities(){  for (int i=0; i < swarmSize; i++) {    updateVelocity(i);  }}  }
