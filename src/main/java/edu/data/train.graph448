class C{  @Override protected void register(DeployableFactory deployableFactory){  deployableFactory.registerDeployable("geronimo1x",DeployableType.WAR,GeronimoWAR.class);  deployableFactory.registerDeployable("geronimo1x",DeployableType.EAR,GeronimoEAR.class);  deployableFactory.registerDeployable("geronimo1x",DeployableType.EJB,GeronimoEJB.class);  deployableFactory.registerDeployable("geronimo2x",DeployableType.WAR,GeronimoWAR.class);  deployableFactory.registerDeployable("geronimo2x",DeployableType.EAR,GeronimoEAR.class);  deployableFactory.registerDeployable("geronimo2x",DeployableType.EJB,GeronimoEJB.class);  deployableFactory.registerDeployable("geronimo3x",DeployableType.WAR,GeronimoWAR.class);  deployableFactory.registerDeployable("geronimo3x",DeployableType.EAR,GeronimoEAR.class);  deployableFactory.registerDeployable("geronimo3x",DeployableType.EJB,GeronimoEJB.class);}  }
class C{  public void open() throws Exception {  try {    player.open();  } catch (  Exception e) {    throw e;  }}  }
class C{  public ArffViewerMainPanel(Container parentFrame){  parent=parentFrame;  frameTitle="ARFF-Viewer";  createPanel();}  }
class C{  @Nullable public static Properties loadProperties(@NotNull File file,@NotNull String entryName){  if (file.canRead()) {    try {      ZipFile zipFile=new ZipFile(file);      try {        ZipEntry entry=zipFile.getEntry(entryName);        if (entry != null) {          Properties properties=new Properties();          properties.load(zipFile.getInputStream(entry));          return properties;        }      }  finally {        zipFile.close();      }    } catch (    IOException e) {      LOG.debug(e);    }  }  return null;}  }
class C{  @Nonnull public Label addLabel(@Nonnull String name){  Label label=labels.get(name);  if (label != null) {    if (label.isPlaced()) {      throw new IllegalArgumentException("There is already a label with that name.");    } else {      currentLocation.getLabels().add(label);    }  } else {    label=currentLocation.addNewLabel();    labels.put(name,label);  }  return label;}  }
class C{  public RunQueue(ThreadGroup tg){  super((tg != null) ? tg : Thread.currentThread().getThreadGroup(),nextThreadName());}  }
class C{  public boolean contains(double x,double z){  double xx=((x - mPosition.x) * mOneOverXScale + mDivisions * 0.5);  double zz=((z - mPosition.z) * mOneOverZScale + mDivisions * 0.5);  if (xx >= 0 && zz >= 0) {    if (xx < mDivisions && zz < mDivisions) {      return true;    }  }  return false;}  }
class C{  public void addFirst(Object obj){  addBefore(root,obj);}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public void save(File file) throws IOException {  PrintWriter writer=null;  try {    writer=new PrintWriter(new FileWriter(file));    writer.print(n);    writer.print(" ");    writer.print(k);    writer.print(" ");    writer.println(overlap);    int numberOfFunctions=(n - k) / (k - overlap) + 1;    for (int i=0; i < numberOfFunctions; i++) {      for (int j=0; j < (1 << k); j++) {        if ((i > 0) || (j > 0)) {          writer.print(" ");        }        writer.print(function[i][j]);      }    }    writer.println();    writer.print(computeOptimum());    for (int i=0; i < n; i++) {      if (i > 0) {        writer.print(" ");      }      writer.print(permutation[i]);    }  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  public static SizeResponse send(Set recipients,LocalRegion r,int queryType){  Assert.assertTrue(recipients != null,"RemoteSizeMessage NULL recipients set");  SizeResponse p=new SizeResponse(r.getSystem(),recipients);  RemoteSizeMessage m=new RemoteSizeMessage(recipients,r.getFullPath(),p,queryType);  r.getDistributionManager().putOutgoing(m);  return p;}  }
class C{  public int numDiffer(OutputTrace<?> other){  int num=0;  for (  Integer statement : trace.keySet()) {    if (other.trace.containsKey(statement)) {      for (      Integer var : trace.get(statement).keySet()) {        if (trace.get(statement).get(var).differs(other.trace.get(statement).get(var)))         num++;      }    }  }  return num;}  }
class C{  public ConsoleAppender(){}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public KeyDestroyingDoor(final String key,final String clazz,final int requiredAmount){  super(key,clazz,requiredAmount);}  }
class C{  public static String colorToString(int col){  final char[] buf=new char[]{'#','X','X','X','X','X','X'};  for (int i=6; i > 0; i--) {    final int v=(col & 0xF);    buf[i]=(char)((v < 10) ? ('0' + v) : ('a' + v - 10));    col>>>=4;  }  return new String(buf);}  }
class C{  @Override public boolean showProgressBar(){  if (mProgressBar != null && mProgressBar.getVisibility() == View.GONE) {    mProgressBar.setVisibility(View.VISIBLE);    return true;  }  return false;}  }
class C{  public void removeTableBlocks(List<TableBlockInfo> removeTableBlocksInfos,AbsoluteTableIdentifier absoluteTableIdentifier){  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  if (null == lockObject) {    return;  }  Map<TableBlockInfo,AbstractIndex> map=tableBlocksMap.get(absoluteTableIdentifier);  if (null == map) {    return;  }  for (  TableBlockInfo blockInfos : removeTableBlocksInfos) {    map.remove(blockInfos);  }}  }
class C{  private void testGraph(DirectedGraph<Integer,DefaultEdge> graph){  for (int i=1; i < 16; i++) {    if (!graph.containsVertex(i)) {      fail("Graph does not contain vertex " + i);    }  }  if (!graph.containsVertex(30)) {    fail("Graph does not contain vertex " + 200);  }  if (!graph.containsVertex(200)) {    fail("Graph does not contain vertex " + 200);  }  assertEquals(17,graph.vertexSet().size());  if (!graph.containsEdge(1,200)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(1,2)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(1,4)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(1,3)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(1,5)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(3,6)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(4,9)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(5,8)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(6,9)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(6,8)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(6,7)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(7,11)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(7,10)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(8,15)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(8,13)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(8,14)) {    fail("Graph does not contain edge");  }  if (!graph.containsEdge(8,12)) {    fail("Graph does not contain edge");  }  assertEquals(17,graph.edgeSet().size());}  }
class C{  public NotificationChain basicSetStateVector(StateVector newStateVector,NotificationChain msgs){  StateVector oldStateVector=stateVector;  stateVector=newStateVector;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_STATE__STATE_VECTOR,oldStateVector,newStateVector);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  void shutdown(){  try {    sslEngine.closeInbound();  } catch (  SSLException e) {    if (log.isDebugEnabled())     log.debug("Unable to correctly close inbound data stream (will ignore) [msg=" + e.getMessage() + ", ses="+ ses+ ']');  }}  }
class C{  public void mkdir() throws SmbException {  String path=getUncPath0();  if (path.length() == 1) {    throw new SmbException("Invalid operation for workgroups, servers, or shares");  }  if (log.level >= 3)   log.println("mkdir: " + path);  send(new SmbComCreateDirectory(path),blank_resp());  attrExpiration=sizeExpiration=0;}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException("Padding " + padding + " unknown.");  }}  }
class C{  public void readByteLEnum(byte[] b) throws IOException {  inputStream.readFully(b);}  }
class C{  public boolean decodeXWapContentURI(int startIndex){  return decodeTextString(startIndex);}  }
class C{  public CommentDTO(String taskId,String comment,Date posted){  super();  this.taskId=taskId;  this.comment=comment;  this.posted=posted;}  }
class C{  private void pop(){  String removed=encodedPathSegments.remove(encodedPathSegments.size() - 1);  if (removed.isEmpty() && !encodedPathSegments.isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,"");  } else {    encodedPathSegments.add("");  }}  }
class C{  public static void write(DataSet<?> data,Path path,char delimiter) throws IOException {  BufferedWriter bw=Files.newBufferedWriter(path,Charset.defaultCharset());  write(data,bw,delimiter);  bw.close();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"lea");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a lea instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final String destination=Helpers.getLeafValue(targetOperand.getRootNode());  final OperandSize size=Helpers.getOperandSize(targetOperand);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,false);  String sourceRegister=sourceResult.getRegister() != null ? sourceResult.getRegister() : sourceResult.getAddress();  sourceResult.getType();  final List<ReilInstruction> sourceInstructions=sourceResult.getInstructions();  instructions.addAll(sourceInstructions);  offset=baseOffset + instructions.size();  if (size == OperandSize.WORD) {    final OperandType operandType=OperandType.getOperandType(sourceRegister);    if (operandType == OperandType.INTEGER_LITERAL) {      sourceRegister=String.valueOf(Long.valueOf(sourceRegister) & 0xFFFF);    } else     if (operandType == OperandType.REGISTER) {      final String truncatedValue=environment.getNextVariableString();      final OperandSize registerSize=sourceInstructions.size() == 0 ? Helpers.getRegisterSize(sourceRegister) : environment.getArchitectureSize();      instructions.add(ReilHelpers.createAnd(offset,registerSize,sourceRegister,OperandSize.WORD,"65535",OperandSize.WORD,truncatedValue));      offset++;      sourceRegister=truncatedValue;    } else {      assert false;    }    Helpers.writeBack(environment,offset,targetOperand,sourceRegister,size,null,TranslationResultType.REGISTER,instructions);  } else   if (size == OperandSize.DWORD) {    instructions.add(ReilHelpers.createStr(offset,size,sourceRegister,size,destination));  } else {    assert false;  }}  }
class C{  @Override public boolean equals(Object o){  return (o instanceof MathExpression) && ((MathExpression)o).expressionStr.equals(expressionStr);}  }
class C{  public void testImportNode2() throws Throwable {  Document doc;  Document docImported;  Element element;  Attr attr;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  NodeList addresses;  Node attrsParent;  doc=(Document)load("staffNS",builder);  docImported=(Document)load("staff",builder);  addresses=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)addresses.item(1);  attr=element.getAttributeNodeNS("http://www.nist.gov","zone");  importedAttr=docImported.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeType=(int)importedAttr.getNodeType();  nodeValue=importedAttr.getNodeValue();  attrsParent=importedAttr.getParentNode();  assertNull("documentimportnode02_parentNull",attrsParent);  assertEquals("documentimportnode02_nodeName","emp:zone",nodeName);  assertEquals("documentimportnode02_nodeType",2,nodeType);  assertEquals("documentimportnode02_nodeValue","CANADA",nodeValue);}  }
class C{  public ArrayList<BuildingTemplate> generateCity(boolean genericRoad){  int width=mapSettings.getBoardWidth();  int height=mapSettings.getBoardHeight();  int roads=mapSettings.getCityBlocks();  roads=(roads * Math.min(width,height)) / 16;  String cityType=mapSettings.getCityType();  cityPlan=new HashSet<Coords>();  if (genericRoad) {    addGenericRoad();  }  if (cityType.equalsIgnoreCase("HUB"))   buildHubCity(width,height,roads); else   if (cityType.equalsIgnoreCase("METRO"))   buildMetroCity(width,height); else   if (cityType.equalsIgnoreCase("GRID"))   buildGridCity(width,height,(roads + 5) / 6); else   if (cityType.equalsIgnoreCase("TOWN"))   return buildTown(width,height,roads,mapSettings.getTownSize()); else   return new ArrayList<BuildingTemplate>();  return placeBuildings(0);}  }
class C{  public static String collapseWhitespace(String str){  return collapse(str,WHITE_SPACES," ");}  }
class C{  public static byte[] toByteArray(final Reader input,final Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  IOUtils.copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public void addStaticField(EncodedField field,Constant value){  classData.addStaticField(field,value);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  } else   if (object == null || getClass() != object.getClass()) {    return false;  }  Coords other=(Coords)object;  return other.getX() == this.getX() && other.getY() == this.getY();}  }
class C{  public ExpectedRecords<T> repeatAll(int times){  List<T> toAppend=new ArrayList<>();  for (int i=0; i < times; i++) {    toAppend.addAll(expectedRecords);  }  expectedRecords.addAll(toAppend);  return this;}  }
class C{  public void addMultiple(final LinkedIntegerMap<T> map,final int multiple){  for (  final T key : map.keySet()) {    add(key,map.getInt(key) * multiple);  }}  }
class C{  public static <T>LoadResult<T> loadPlugins(final String pluginPath,final Set<File> pluginFiles,final IStandardDescriptionUpdater descriptionUpdater){  Preconditions.checkNotNull(pluginFiles,"IE00832: Plugin files can't be null");  descriptionUpdater.reset();  descriptionUpdater.setMaximum(pluginFiles.size());  final LoadResult<T> loadResult=loadPluginFiles(pluginPath,pluginFiles,descriptionUpdater);  return validateLoadedPlugins(loadResult);}  }
class C{  public void writeAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  if (value == null) {    return;  }  Class valueClass=value.getClass();  if (valueClass == Boolean.class) {    if (Boolean.TRUE.equals(value)) {      writer.write(" ");      writer.write(name);    } else {    }  } else {    writer.write(" ");    writer.write(name);    writer.write("=\"");    Util.writeAttribute(writer,buffer,value.toString());    writer.write("\"");  }}  }
class C{  public void addAll(PairedStats values){  if (values.count() == 0) {    return;  }  xStats.addAll(values.xStats());  if (yStats.count() == 0) {    sumOfProductsOfDeltas=values.sumOfProductsOfDeltas();  } else {    sumOfProductsOfDeltas+=values.sumOfProductsOfDeltas() + (values.xStats().mean() - xStats.mean()) * (values.yStats().mean() - yStats.mean()) * values.count();  }  yStats.addAll(values.yStats());}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages){  return makeValid(source,mode,includeInternal,errorMessages,null);}  }
class C{  private SystemPropertiesProxy(){}  }
class C{  public CallSiteTreeNode addLocation(InlineSequence seq){  if (seq.caller == null) {    CallSiteTreeNode x=(CallSiteTreeNode)getRoot();    if (x == null) {      x=new CallSiteTreeNode(seq);      setRoot(x);    }    return x;  } else {    CallSiteTreeNode node=addLocation(seq.caller);    CallSiteTreeNode x=(CallSiteTreeNode)node.getLeftChild();    while (x != null) {      if (x.callSite == seq) {        return x;      }      x=(CallSiteTreeNode)x.getRightSibling();    }    CallSiteTreeNode xx=new CallSiteTreeNode(seq);    node.addChild(xx);    return xx;  }}  }
class C{  protected ArrayList<Intersection> filterIntersectionsOnViewFrustum(DrawContext dc,ArrayList<Intersection> list){  Frustum vf=dc.getView().getFrustumInModelCoordinates();  int i=0;  while (i < list.size()) {    if (vf.contains(list.get(i).getIntersectionPoint()) || vf.contains(list.get(i + 1).getIntersectionPoint()))     i+=2; else {      list.remove(i);      list.remove(i);    }  }  return list;}  }
class C{  public static void prepareDeviceAdminExtras(Intent launchIntent,PersistableBundle newBundle){  if (isSynchronousAuthLaunch(launchIntent)) {    boolean isSetupWizard=launchIntent.getBooleanExtra(EXTRA_IS_SETUP_WIZARD,false);    newBundle.putString(EXTRA_IS_SETUP_WIZARD,Boolean.toString(isSetupWizard));    Account addedAccount=getAddedAccount(launchIntent);    if (addedAccount != null) {      newBundle.putString(EXTRA_ACCOUNT_NAME,addedAccount.name);    }  }}  }
class C{  public void logSkip(long streamId,long skipCnt){  addEntry(new Entry(TYPE_SKIP,null,null,streamId,null,null,null,null,null,null,null,null,skipCnt,null,null,null,null,null,null,null));}  }
class C{  public byte[] toArray(){  int pos=0;  byte[] array=new byte[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public CDebuggerProviderUpdater(final CDebuggerUpdater debuggerUpdater){  m_debuggerUpdater=debuggerUpdater;}  }
class C{  public static void appendValue(final StringBuffer logMessage,final String value){  logMessage.append(value);}  }
class C{  public void nextLine(){  while (!isEol()) {    myPosition++;  }  if (hasMoreData()) {    final char ch=myText.charAt(myPosition++);    if (hasMoreData()) {      final char ch2=myText.charAt(myPosition);      if (ch == '\n' && ch2 == '\r' || ch == '\r' && ch2 == '\n') {        myPosition++;      }    }  }}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback){  sendUpdate(obj,keepCallback,PluginResult.Status.OK);}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public static Decomposable asDecomposable(final Object toCoerce){  return new CoercedDecomposable(toCoerce);}  }
class C{  public Log(File _filename,boolean _postAnnouncements,boolean _appendOnRestart) throws IOException {  this(_filename,_postAnnouncements,_appendOnRestart,false);}  }
class C{  public void rename(Name name1,Name name2) throws NamingException {  throw new NamingException(LocalizedStrings.ContextImpl_RENAMENAME_NAME1_NAME_NAME2_IS_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  private byte[] decodeBlockOrRandom(byte[] in,int inOff,int inLen) throws InvalidCipherTextException {  if (!forPrivateKey) {    throw new InvalidCipherTextException("sorry, this method is only for decryption, not for signing");  }  byte[] block=engine.processBlock(in,inOff,inLen);  byte[] random=null;  if (this.fallback == null) {    random=new byte[this.pLen];    this.random.nextBytes(random);  } else {    random=fallback;  }  if (block.length < getOutputBlockSize()) {    throw new InvalidCipherTextException("block truncated");  }  if (useStrictLength && block.length != engine.getOutputBlockSize()) {    throw new InvalidCipherTextException("block incorrect size");  }  int correct=PKCS1Encoding.checkPkcs1Encoding(block,this.pLen);  byte[] result=new byte[this.pLen];  for (int i=0; i < this.pLen; i++) {    result[i]=(byte)((block[i + (block.length - pLen)] & (~correct)) | (random[i] & correct));  }  return result;}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public String toString(){  return String.valueOf(getFirstCondition()) + getSecondCondition();}  }
class C{  public int cospan(final char[] c){  return cospan(c,0);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"lodsw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a lodsw instruction (invalid number of operand)");  }  new LodsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.WORD,instructions);}  }
class C{  public void deleteMessages() throws XMPPException {  OfflineMessageRequest request=new OfflineMessageRequest();  request.setPurge(true);  PacketFilter responseFilter=new PacketIDFilter(request.getPacketID());  PacketCollector response=connection.createPacketCollector(responseFilter);  connection.sendPacket(request);  IQ answer=(IQ)response.nextResult(SmackConfiguration.getPacketReplyTimeout());  response.cancel();  if (answer == null) {    throw new XMPPException("No response from server.");  } else   if (answer.getError() != null) {    throw new XMPPException(answer.getError());  }}  }
class C{  protected void SSE2_COP(Operator operator,Instruction s,Operand result,Operand val1,Operand val2){  if (VM.VerifyAssertions)   opt_assert(result.isRegister());  if (val2.similar(result)) {    Operand temp=val1;    val1=val2;    val2=temp;  }  if (!result.similar(val1)) {    EMIT(CPOS(s,MIR_Move.create(SSE2_MOVE(result),result.copy(),val1)));  }  EMIT(MIR_BinaryAcc.mutate(s,operator,result,val2));}  }
class C{  @VisibleForTesting boolean isDifferenceSignificant(double oldAverageMovingSpeed,double newAverageMovingSpeed){  if (oldAverageMovingSpeed == 0) {    return newAverageMovingSpeed != 0;  }  double maxValue=Math.max(oldAverageMovingSpeed,newAverageMovingSpeed);  double differencePercentage=Math.abs(oldAverageMovingSpeed - newAverageMovingSpeed) / maxValue * 100.0;  return differencePercentage >= CRITICAL_DIFFERENCE_PERCENTAGE;}  }
class C{  public PipeFetcher(final LinkedBlockingQueue<DebuggerReply> eventQueue){  this.eventQueue=Preconditions.checkNotNull(eventQueue,"IE00742: Event queue can't be null");}  }
class C{  public void annotate(int length,@Nonnull String msg,Object... formatArgs){  if (startLimit != -1 && endLimit != -1 && (cursor < startLimit || cursor >= endLimit)) {    throw new ExceptionWithContext("Annotating outside the parent bounds");  }  String formattedMsg;  if (formatArgs != null && formatArgs.length > 0) {    formattedMsg=String.format(msg,formatArgs);  } else {    formattedMsg=msg;  }  int exclusiveEndOffset=cursor + length;  AnnotationEndpoint endPoint=null;  AnnotationEndpoint startPoint=annotatations.get(cursor);  if (startPoint == null) {    Map.Entry<Integer,AnnotationEndpoint> previousEntry=annotatations.lowerEntry(cursor);    if (previousEntry != null) {      AnnotationEndpoint previousAnnotations=previousEntry.getValue();      AnnotationItem previousRangeAnnotation=previousAnnotations.rangeAnnotation;      if (previousRangeAnnotation != null) {        throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(previousEntry.getKey(),previousRangeAnnotation.annotation));      }    }  } else   if (length > 0) {    AnnotationItem existingRangeAnnotation=startPoint.rangeAnnotation;    if (existingRangeAnnotation != null) {      throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(cursor,existingRangeAnnotation.annotation));    }  }  if (length > 0) {    Map.Entry<Integer,AnnotationEndpoint> nextEntry=annotatations.higherEntry(cursor);    if (nextEntry != null) {      int nextKey=nextEntry.getKey();      if (nextKey < exclusiveEndOffset) {        AnnotationEndpoint nextEndpoint=nextEntry.getValue();        AnnotationItem nextRangeAnnotation=nextEndpoint.rangeAnnotation;        if (nextRangeAnnotation != null) {          throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(nextKey,nextRangeAnnotation.annotation));        }        if (nextEndpoint.pointAnnotations.size() > 0) {          throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation %s",formatAnnotation(cursor,cursor + length,formattedMsg),formatAnnotation(nextKey,nextKey,nextEndpoint.pointAnnotations.get(0).annotation));        }        throw new ExceptionWithContext("Cannot add annotation %s, due to existing annotation endpoint at %d",formatAnnotation(cursor,cursor + length,formattedMsg),nextKey);      }      if (nextKey == exclusiveEndOffset) {        endPoint=nextEntry.getValue();      }    }  }  if (startPoint == null) {    startPoint=new AnnotationEndpoint();    annotatations.put(cursor,startPoint);  }  if (length == 0) {    startPoint.pointAnnotations.add(new AnnotationItem(indentLevel,formattedMsg));  } else {    startPoint.rangeAnnotation=new AnnotationItem(indentLevel,formattedMsg);    if (endPoint == null) {      endPoint=new AnnotationEndpoint();      annotatations.put(exclusiveEndOffset,endPoint);    }  }  cursor+=length;}  }
class C{  public Iterator iterator(){synchronized (children) {    return new BCSIterator(children.keySet().iterator());  }}  }
class C{  public FileCacheSeekableStream(InputStream stream) throws IOException {  this.stream=stream;  this.cacheFile=File.createTempFile("jai-FCSS-",".tmp");  cacheFile.deleteOnExit();  this.cache=new RandomAccessFile(cacheFile,"rw");}  }
class C{  protected final void storeState(){  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;}  }
class C{  private static void initialize() throws Exception {  try (IDiagnosticsContextScope diagCtxt=DiagnosticsContextFactory.createContext("IDM Startup","")){    logger.info("Starting IDM Server...");    logger.debug("Creating RMI registry on port {}",Tenant.RMI_PORT);    boolean allowRemoteConnections=Boolean.parseBoolean(System.getProperty(ALLOW_REMOTE_PROPERTY,"false"));    if (allowRemoteConnections) {      logger.warn("RMI registry is allowing remote connections!");      registry=LocateRegistry.createRegistry(Tenant.RMI_PORT);    } else {      logger.debug("RMI registry is restricted to the localhost");      RMIClientSocketFactory csf=RMISocketFactory.getDefaultSocketFactory();      RMIServerSocketFactory ssf=new LocalRMIServerSocketFactory();      registry=LocateRegistry.createRegistry(Tenant.RMI_PORT,csf,ssf);    }    if (System.getSecurityManager() == null) {      logger.debug("Creating RMI Security Manager...");      System.setSecurityManager(new RMISecurityManager());    }    logger.debug("Creating Config Store factory...");    IConfigStoreFactory cfgStoreFactory=new ConfigStoreFactory();    logger.debug("Creating Identity Provider factory...");    IProviderFactory providerFactory=new ProviderFactory();    logger.debug("Checking VMware Directory Service...");    ServerUtils.check_directory_service();    logger.debug("Setting system properties...");    System.setProperties(new ThreadLocalProperties(System.getProperties()));    logger.debug("Creating Identity Manager instance...");    manager=new IdentityManager(cfgStoreFactory,providerFactory);    String rmiAddress=String.format("rmi://localhost:%d/%s",Tenant.RMI_PORT,IDENTITY_MANAGER_BIND_NAME);    logger.debug("Binding to RMI address '{}'",rmiAddress);    loginManager=new IdmLoginManager(manager);    ILoginManager stub=(ILoginManager)UnicastRemoteObject.exportObject(loginManager,0);    Naming.rebind(rmiAddress,stub);    startHeartbeat();    logger.info(VmEvent.SERVER_STARTED,"IDM Server has started");  } catch (  Throwable t) {    logger.error(VmEvent.SERVER_FAILED_TOSTART,"IDM Server has failed to start",t);    throw t;  }}  }
class C{  public frame removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void releaseLockBatch(Object batchId,InternalDistributedMember owner) throws InterruptedException {  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantor.releaseLockBatch]");  }synchronized (this.batchLocks) {    waitWhileInitializing();    if (!acquireDestroyReadLock(0)) {      waitUntilDestroyed();      checkDestroyed();    }    try {      checkDestroyed();      DLockBatch batch=(DLockBatch)this.batchLocks.remove(batchId);      if (batch != null) {        this.resMgr.releaseReservation((IdentityArrayList)batch.getReqs());      }    }  finally {      releaseDestroyReadLock();    }  }}  }
class C{  public byte elementAt(char index){  return (values[(indices[index >> BLOCKSHIFT] & 0xFFFF) + (index & BLOCKMASK)]);}  }
class C{  public static byte[] decodeBase64(final String base64String){  return new Base64().decode(base64String);}  }
class C{  public terminal_set first_set(){  return _first_set;}  }
class C{  public boolean isHeld(){synchronized (mToken) {    return mHeld;  }}  }
class C{  private boolean isRollback(){  try {    if (FileUtils.exists(IpReconfigConstants.NODESTATUS_PATH)) {      IpReconfigConstants.NodeStatus localnode_status=IpReconfigConstants.NodeStatus.valueOf(IpReconfigUtil.readNodeStatusFile());      if (localnode_status == IpReconfigConstants.NodeStatus.LOCAL_ROLLBACK) {        log.info("User is trying to rollback last ip reconfiguration.");        setFailed(IpReconfigConstants.ERRSTR_ROLLBACK);        FileUtils.deleteFile(IpReconfigConstants.NODESTATUS_PATH);        return true;      }    }  } catch (  Exception e) {    log.error("Failed to check if user is trying to rollback.",e);  }  return false;}  }
class C{  @Override public void chartMouseMoved(ChartMouseEvent event){}  }
class C{  public void putAll(IntKeyMap<VALUE> t){  int n=t.size();  if (n == 0)   return;  if (n >= threshold) {    n=(int)(n / loadFactor + 1);    if (n > MAXIMUM_CAPACITY)     n=MAXIMUM_CAPACITY;    int capacity=table.length;    while (capacity < n)     capacity<<=1;    resize(capacity);  }  for (Iterator i=t.entrySet().iterator(); i.hasNext(); ) {    IntEntry<VALUE> e=(IntEntry<VALUE>)i.next();    put(e.key,e.value);  }}  }
class C{  @Override public Cursor findNext(Session session,SearchRow higherThan,SearchRow last){  throw DbException.throwInternalError();}  }
class C{  public LSSVM(KernelTrick kernel,CacheMode cacheMode){  super(kernel,cacheMode);}  }
class C{  private void deleteBreakpoints(final Set<String> paths){  for (  String path : paths) {    List<Breakpoint> breakpointsToDelete=breakpoints.get(path);    if (breakpointsToDelete != null) {      for (      Breakpoint breakpoint : new ArrayList<>(breakpointsToDelete)) {        deleteBreakpoint(breakpoint.getFile(),breakpoint);      }    }  }}  }
class C{  public void addKey(){  if (UltraCosmeticsData.get().usingFileStorage()) {    SettingsManager.getData(getPlayer()).set("Keys",getKeys() + 1);  } else {    ultraCosmetics.getMySqlConnectionManager().getSqlUtils().addKey(getMySqlIndex());  }}  }
class C{  private Pair<Key,char[]> recoverKey(String alias,char[] storePass,char[] keyPass) throws Exception {  Key key=null;  if (keyStore.containsAlias(alias) == false) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));    Object[] source={alias};    throw new Exception(form.format(source));  }  if (!keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class) && !keyStore.entryInstanceOf(alias,KeyStore.SecretKeyEntry.class)) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.has.no.key"));    Object[] source={alias};    throw new Exception(form.format(source));  }  if (keyPass == null) {    try {      key=keyStore.getKey(alias,storePass);      keyPass=storePass;      passwords.add(keyPass);    } catch (    UnrecoverableKeyException e) {      if (!token) {        keyPass=getKeyPasswd(alias,null,null);        key=keyStore.getKey(alias,keyPass);      } else {        throw e;      }    }  } else {    key=keyStore.getKey(alias,keyPass);  }  return Pair.of(key,keyPass);}  }
class C{  public void testOneNodeSubmitQueryWithSequentialConsistency() throws Throwable {  testSubmitQuery(1,Query.ConsistencyLevel.SEQUENTIAL);}  }
class C{  public PacketTooBigException(long packetSize,long maximumPacketSize){  super(Messages.getString("PacketTooBigException.0") + packetSize + Messages.getString("PacketTooBigException.1")+ maximumPacketSize+ Messages.getString("PacketTooBigException.2")+ Messages.getString("PacketTooBigException.3")+ Messages.getString("PacketTooBigException.4"),SQLError.SQL_STATE_GENERAL_ERROR);}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void reset(){  m_offscreen=null;  m_clip=null;  m_queue.clean();  for (  Object c : m_controls) {    removeControlListener((Control)c);  }  m_predicate.removeAllExpressionListeners();}  }
class C{  protected boolean canAfford(final IntegerMap<Resource> costs,final PlayerID player){  return player.getResources().has(costs);}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:"))         attrNS="http://www.w3.org/2000/xmlns/";        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  private static String parseFirebaseUrl(String firebaseSnippet){  int idx=firebaseSnippet.indexOf("databaseURL");  if (-1 == idx) {    throw new RuntimeException("Please copy your Firebase web snippet into " + FIREBASE_SNIPPET_PATH);  }  idx=firebaseSnippet.indexOf(':',idx);  int openQuote=firebaseSnippet.indexOf('"',idx);  int closeQuote=firebaseSnippet.indexOf('"',openQuote + 1);  return firebaseSnippet.substring(openQuote + 1,closeQuote);}  }
class C{  public void changeConfigFileRepositoryPath(String repo) throws IOException {  InputStream input=new FileInputStream(_path);  BufferedReader reader=new BufferedReader(new InputStreamReader(input));  StringBuilder out=new StringBuilder();  String line, row=null;  while ((line=reader.readLine()) != null) {    row=line.toString();    if (line.toString().contains("git.repositoryLocation")) {      row="git.repositoryLocation=" + repo;    }    out.append(row + "\n");  }  reader.close();  OutputStream output=new FileOutputStream(_path);  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output));  writer.write(out.toString());  writer.close();}  }
class C{  public static void replaceHttpHeaderMapNodeSpecific(Map<String,String> httpHeaderMap,Map<String,String> requestParameters){  boolean needToReplaceVarInHttpHeader=false;  for (  String parameter : requestParameters.keySet()) {    if (parameter.contains(PcConstants.NODE_REQUEST_PREFIX_REPLACE_VAR)) {      needToReplaceVarInHttpHeader=true;      break;    }  }  if (!needToReplaceVarInHttpHeader) {    logger.debug("No need to replace. Since there are no HTTP header variables. ");    return;  }  for (  Entry<String,String> entry : httpHeaderMap.entrySet()) {    String key=entry.getKey();    String valueOriginal=entry.getValue();    String valueUpdated=NodeReqResponse.replaceStrByMap(requestParameters,valueOriginal);    httpHeaderMap.put(key,valueUpdated);  }}  }
class C{  public void unlistenModLog(String username){synchronized (modLogListen) {    if (modLogListen.containsKey(username)) {      if (modLogListen.get(username) != -1) {        sendListenModLog(modLogListen.get(username),false);      }      modLogListen.remove(username);    }  }}  }
class C{  @Override public void buildDecList(Instances data,boolean leaf) throws Exception {  Instances[] localInstances;  int ind;  int i, j;  double sumOfWeights;  NoSplit noSplit;  m_train=null;  m_test=null;  m_isLeaf=false;  m_isEmpty=false;  m_sons=null;  indeX=0;  sumOfWeights=data.sumOfWeights();  noSplit=new NoSplit(new Distribution(data));  if (leaf) {    m_localModel=noSplit;  } else {    m_localModel=m_toSelectModel.selectModel(data);  }  if (m_localModel.numSubsets() > 1) {    localInstances=m_localModel.split(data);    data=null;    m_sons=new ClassifierDecList[m_localModel.numSubsets()];    i=0;    do {      i++;      ind=chooseIndex();      if (ind == -1) {        for (j=0; j < m_sons.length; j++) {          if (m_sons[j] == null) {            m_sons[j]=getNewDecList(localInstances[j],true);          }        }        if (i < 2) {          m_localModel=noSplit;          m_isLeaf=true;          m_sons=null;          if (Utils.eq(sumOfWeights,0)) {            m_isEmpty=true;          }          return;        }        ind=0;        break;      } else {        m_sons[ind]=getNewDecList(localInstances[ind],false);      }    } while ((i < m_sons.length) && (m_sons[ind].m_isLeaf));    for (j=0; j < m_sons.length; j++) {      if ((m_sons[j] == null) || (!m_sons[j].m_isLeaf)) {        break;      }    }    if (j == m_sons.length) {      pruneEnd();      if (!m_isLeaf) {        indeX=chooseLastIndex();      }    } else {      indeX=chooseLastIndex();    }  } else {    m_isLeaf=true;    if (Utils.eq(sumOfWeights,0)) {      m_isEmpty=true;    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"TEQ");  translateAll(environment,instruction,"TEQ",instructions);}  }
class C{  public void assertInvokeInterfaceEquals(Object value,Class target,Extends iface,AbstractMethod method,String... args){  Compiler compiler=compilerLocal.get();  compiler.setFlags(compilerFlags());  Class ii=invokeInterfaceHarness(target,iface,method,args);  ClassLoader loader=compiler.compile(ii,target);  assertStaticCallEquals(loader,ii,method.getName(),value);  compiler.cleanup();}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  private static void removeUnusedSchemaIfExists(DbSchemas schemas,List<String> ignoreSchemaNames){  Iterator<DbSchema> it=schemas.getSchemas().iterator();  while (it.hasNext()) {    DbSchema schema=it.next();    if (ignoreSchemaNames.contains(schema.getName())) {      log.info("skip schema:{} since it's removed",schema.getName());      it.remove();    }  }}  }
class C{  private Tag clone(final ITreeNode<CTag> currentNode,final Tag parentExpression){  final Tag childExpression=new Tag(currentNode);  m_allTags.put(currentNode,childExpression);  if (parentExpression != null) {    Tag.link(parentExpression,childExpression);  }  for (  final ITreeNode<CTag> child : currentNode.getChildren()) {    clone(child,childExpression);  }  return childExpression;}  }
class C{  public void unregisterBinarySchemas(){  schemas=null;}  }
class C{  RoutingFilter(Gondola gondola,RoutingHelper routingHelper,ProxyClientProvider proxyClientProvider,Map<String,RoutingService> services,ChangeLogProcessor changeLogProcessor) throws ServletException {  this.gondola=gondola;  lockManager=new LockManager(gondola);  bucketManager=new BucketManager(gondola.getConfig());  loadRoutingTable();  loadConfig();  watchGondolaEvent();  proxyClient=proxyClientProvider.getProxyClient(gondola.getConfig());  instances.add(this);  this.services=services;  this.routingHelper=routingHelper;  this.changeLogProcessor=changeLogProcessor;  forwardTimer=GondolaApplication.MyMetricsServletContextListener.METRIC_REGISTRY.timer("RoutingFilter.forward");  processTimer=GondolaApplication.MyMetricsServletContextListener.METRIC_REGISTRY.timer("RoutingFilter.process");  errorTimer=GondolaApplication.MyMetricsServletContextListener.METRIC_REGISTRY.timer("RoutingFilter.error");}  }
class C{  public void init(){  Box mainPanel=Box.createHorizontalBox();  mainPanel.add(new JLabel("Train network"));  mainPanel.add(Box.createHorizontalStrut(5));  JButton applyButton=new JButton(applyAction);  applyButton.setHideActionText(true);  mainPanel.add(applyButton);  add(mainPanel);}  }
class C{  @Transactional(propagation=Propagation.REQUIRES_NEW) public void cleanUpHerdDatabaseAfterExecuteJdbcWithReceiveTaskTest(String jobDefinitionNamespace,String jobDefinitionName){  JobDefinitionEntity jobDefinitionEntity=jobDefinitionDao.getJobDefinitionByAltKey(jobDefinitionNamespace,jobDefinitionName);  if (jobDefinitionEntity != null) {    jobDefinitionDao.delete(jobDefinitionEntity);  }  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(jobDefinitionNamespace);  if (namespaceEntity != null) {    namespaceDao.delete(namespaceEntity);  }}  }
class C{  public UnsupportedDigestAlgorithmException(String message,Throwable cause){  super(message,cause);}  }
class C{  IonListLite(ContainerlessContext context,boolean makeNull){  super(context,makeNull);}  }
class C{  public void commitResize(){  resizeWidgetIfNeeded(true);  requestLayout();}  }
class C{  public Integer onLoadData32(byte[] ioPage,int addr,int value,DebuggableMemory.AccessSource accessSource){  if (addr >= REGISTER_IMC00 && addr < (REGISTER_IMC19 + 4)) {    TxInterruptController intc=(TxInterruptController)platform.getInterruptController();    return ((intc.getImc(addr - REGISTER_IMC00) << 24) | (intc.getImc(addr - REGISTER_IMC00 + 1) << 16) | (intc.getImc(addr - REGISTER_IMC00 + 2) << 8)| intc.getImc(addr - REGISTER_IMC00 + 3));  } else   if (addr >= REGISTER_PORT0 && addr < REGISTER_PORT0 + (NUM_PORT << PORT_OFFSET_SHIFT)) {    int portNr=(addr - REGISTER_PORT0) >> PORT_OFFSET_SHIFT;    TxIoPort txIoPort=(TxIoPort)platform.getIoPorts()[portNr];switch (addr - (portNr << PORT_OFFSET_SHIFT)) {case REGISTER_PORT0:      return (int)txIoPort.getValue();case REGISTER_PORT0CR:    return (int)txIoPort.getControlRegister();case REGISTER_PORT0FC1:  return (int)txIoPort.getFunctionRegister1();case REGISTER_PORT0FC2:return (int)txIoPort.getFunctionRegister2();case REGISTER_PORT0FC3:return (int)txIoPort.getFunctionRegister3();case REGISTER_PORT0ODE:return (int)txIoPort.getOpenDrainControlRegister();case REGISTER_PORT0PUP:return (int)txIoPort.getPullUp();case REGISTER_PORT0PIE:return (int)txIoPort.getInputEnableControlRegister();}} else if (addr >= REGISTER_TB0EN && addr < REGISTER_TB0EN + (NUM_16B_TIMER << TIMER_OFFSET_SHIFT)) {int timerNr=(addr - REGISTER_TB0EN) >> TIMER_OFFSET_SHIFT;TxTimer txTimer=(TxTimer)platform.getProgrammableTimers()[timerNr];switch (addr - (timerNr << TIMER_OFFSET_SHIFT)) {case REGISTER_TB0EN:return txTimer.getTben();case REGISTER_TB0RUN:return txTimer.getTbrun();case REGISTER_TB0CR:return txTimer.getTbcr();case REGISTER_TB0MOD:return txTimer.getTbmod();case REGISTER_TB0FFCR:return txTimer.getTbffcr();case REGISTER_TB0ST:return txTimer.getTbst();case REGISTER_TB0IM:return txTimer.getTbim();case REGISTER_TB0UC:return txTimer.getTbuc();case REGISTER_TB0RG0:return txTimer.getTbrg0();case REGISTER_TB0RG1:return txTimer.getTbrg1();case REGISTER_TB0CP0:return txTimer.getTbcp0();case REGISTER_TB0CP1:return txTimer.getTbcp1();}} else if (addr >= REGISTER_TCEN && addr < REGISTER_CAPCR0 + (NUM_CAPTURE_CHANNEL << INPUT_CAPTURE_OFFSET_SHIFT)) {TxInputCaptureTimer txInputCaptureTimer=(TxInputCaptureTimer)platform.getProgrammableTimers()[NUM_16B_TIMER];if (addr < REGISTER_CMPCTL0) {switch (addr) {case REGISTER_TCEN:return txInputCaptureTimer.getTcen();case REGISTER_TBTRUN:return txInputCaptureTimer.getTbtrun();case REGISTER_TBTCR:return txInputCaptureTimer.getTbtcr();case REGISTER_TBTCAP:return txInputCaptureTimer.getTbtcap();case REGISTER_TBTRDCAP:return txInputCaptureTimer.getCurrentValue();}} else if (addr < REGISTER_CAPCR0) {int compareChannel=(addr - REGISTER_CMPCTL0) >> INPUT_COMPARE_OFFSET_SHIFT;switch (addr - (compareChannel << INPUT_COMPARE_OFFSET_SHIFT)) {case REGISTER_CMPCTL0:return txInputCaptureTimer.getCmpctl(compareChannel);case REGISTER_TCCMP0:return txInputCaptureTimer.getTccmp(compareChannel);}} else {int captureChannel=(addr - REGISTER_CAPCR0) >> INPUT_CAPTURE_OFFSET_SHIFT;switch (addr - (captureChannel << INPUT_CAPTURE_OFFSET_SHIFT)) {case REGISTER_CAPCR0:return txInputCaptureTimer.getCapcr(captureChannel);case REGISTER_TCCAP0:return txInputCaptureTimer.getTccap(captureChannel);}}} else if (addr >= REGISTER_SC0EN && addr < REGISTER_SC0EN + (NUM_SERIAL_IF << SERIAL_OFFSET_SHIFT)) {int serialInterfaceNr=(addr - REGISTER_SC0EN) >> SERIAL_OFFSET_SHIFT;TxSerialInterface txSerialInterface=(TxSerialInterface)platform.getSerialInterfaces()[serialInterfaceNr];switch (addr - (serialInterfaceNr << SERIAL_OFFSET_SHIFT)) {case REGISTER_SC0EN:return txSerialInterface.getEn();case REGISTER_SC0BUF:return txSerialInterface.getBuf();case REGISTER_SC0CR:return txSerialInterface.getCr();case REGISTER_SC0MOD0:return txSerialInterface.getMod0();case REGISTER_SC0MOD1:return txSerialInterface.getMod1();case REGISTER_SC0MOD2:return txSerialInterface.getMod2();case REGISTER_BR0CR:return txSerialInterface.getBrcr();case REGISTER_BR0ADD:return txSerialInterface.getBradd();case REGISTER_SC0RFC:return txSerialInterface.getRfc();case REGISTER_SC0TFC:return txSerialInterface.getTfc();case REGISTER_SC0RST:return txSerialInterface.getRst();case REGISTER_SC0TST:return txSerialInterface.getTst();case REGISTER_SC0FCNF:return txSerialInterface.getFcnf();}} else if (addr >= REGISTER_HSC0BUF && addr < REGISTER_HSC0BUF + (NUM_HSERIAL_IF << HSERIAL_OFFSET_SHIFT)) {stop("Serial register 0x" + Format.asHex(addr,8) + " can only be read by 8 bits");} else if (addr >= REGISTER_CCR0 && addr < REGISTER_CCR0 + (NUM_DMA_CHANNEL << DMA_CHANNEL_OFFSET_SHIFT)) {int dmaChannelNr=(addr - REGISTER_CCR0) >> DMA_CHANNEL_OFFSET_SHIFT;TxDmaChannel channel=((TxDmaController)platform.getDmaController()).getChannel(dmaChannelNr);switch (addr - (dmaChannelNr << DMA_CHANNEL_OFFSET_SHIFT)) {case REGISTER_CCR0:return channel.getCcr();case REGISTER_CSR0:return channel.getCsr();case REGISTER_SAR0:return channel.getSar();case REGISTER_DAR0:return channel.getDar();case REGISTER_BCR0:return channel.getBcr();case REGISTER_DTCR0:return channel.getDtcr();default :stop("Address 0x" + Format.asHex(addr,8) + " is not a DMA register");}} else if (addr >= REGISTER_HOURR && addr < REGISTER_RESTR + 4) {TxRealtimeClock realtimeClock=((TxRealtimeClock)platform.getRealtimeClock());switch (addr) {case REGISTER_HOURR:return realtimeClock.getTimeReg32();case REGISTER_YEARR:return realtimeClock.getDateReg32();case REGISTER_PAGER:return realtimeClock.getPager();case REGISTER_RESTR:return realtimeClock.getRestr();default :stop("Address 0x" + Format.asHex(addr,8) + " is not a RTC register");}} else if (addr >= REGISTER_KWUPST00 && addr < REGISTER_KWUPINT + 4) {TxKeyCircuit keyCircuit=((TxKeyCircuit)platform.getKeyCircuit());int keyNumber=(addr - REGISTER_KWUPST00) >> KEY_OFFSET_SHIFT;switch (addr) {case REGISTER_PKEY:return keyCircuit.getPKEY();case REGISTER_KWUPCNT:return keyCircuit.getKWUPCNT();case REGISTER_KWUPCLR:return keyCircuit.getKWUPCLR();case REGISTER_KWUPINT:return keyCircuit.getKWUPINT();default :if ((addr - REGISTER_KWUPST00) == (keyNumber << KEY_OFFSET_SHIFT)) return keyCircuit.keys[keyNumber].getKWUPST();stop("Address 0x" + Format.asHex(addr,8) + " is not a KEY register");}} else if (addr >= REGISTER_ADACLK && addr < REGISTER_ADACLK + (NUM_AD_UNIT << AD_UNIT_OFFSET_SHIFT)) {int adUnitNumber=(addr - REGISTER_ADACLK) >> AD_UNIT_OFFSET_SHIFT;TxAdUnit unit=((TxAdConverter)platform.getAdConverter()).units[adUnitNumber];int shiftedAddress=addr - (adUnitNumber << AD_UNIT_OFFSET_SHIFT);if (shiftedAddress >= REGISTER_ADAREG0 && shiftedAddress < REGISTER_ADAREG0 + 32) {int channelNumber=(shiftedAddress - REGISTER_ADAREG0) / 4;if (channelNumber < unit.getNumChannels()) {return unit.getReg(channelNumber);} else {stop("Address 0x" + Format.asHex(addr,8) + " is not a A/D converter channel register");}} else {switch (shiftedAddress) {case REGISTER_ADACLK:return unit.getClk();case REGISTER_ADAMOD0:return unit.getMod0();case REGISTER_ADAMOD1:return unit.getMod1();case REGISTER_ADAMOD2:return unit.getMod2();case REGISTER_ADAMOD3:return unit.getMod3();case REGISTER_ADAMOD4:return unit.getMod4();case REGISTER_ADAMOD5:return unit.getMod5();case REGISTER_ADAREGSP:return (unit.getRegSp());case REGISTER_ADACOMREG0:return (unit.getComReg0());case REGISTER_ADACOMREG1:return (unit.getComReg1());default :stop("Address 0x" + Format.asHex(addr,8) + " is not a A/D converter register");}}} else if (addr >= REGISTER_IMCGA && addr < (REGISTER_IMCG11 + 4)) {TxInterruptController intc=(TxInterruptController)platform.getInterruptController();return ((intc.getImcg(addr - REGISTER_IMCGA) << 24) | (intc.getImcg(addr - REGISTER_IMCGA + 1) << 16) | (intc.getImcg(addr - REGISTER_IMCGA + 2) << 8)| intc.getImcg(addr - REGISTER_IMCGA + 3));}switch (addr) {case REGISTER_SYSCR:return ((TxClockGenerator)platform.getClockGenerator()).getSyscr();case REGISTER_OSCCR:return ((TxClockGenerator)platform.getClockGenerator()).getOsccr();case REGISTER_PLLSEL:return ((TxClockGenerator)platform.getClockGenerator()).getPllsel();case REGISTER_ILEV:return ((TxInterruptController)platform.getInterruptController()).getIlev();case REGISTER_IVR:return ((TxInterruptController)platform.getInterruptController()).getIvr();case REGISTER_NMIFLG:return ((TxInterruptController)platform.getInterruptController()).readAndClearNmiFlag();case REGISTER_RSTFLG:return ((TxClockGenerator)platform.getClockGenerator()).getRstflg();case REGISTER_DREQFLG:return ((TxInterruptController)platform.getInterruptController()).getDreqflg();case REGISTER_DCR:return ((TxDmaController)platform.getDmaController()).getDcr();case REGISTER_RSR:return ((TxDmaController)platform.getDmaController()).getRsr();case REGISTER_DHR:return ((TxDmaController)platform.getDmaController()).getDhr();}if (logRegisterMessages) warn("Register 0x" + Format.asHex(addr,8) + ": Load32 is not supported yet");return null;}  }
class C{  public void wire(){  populateToolBar();  populateMenu();  registerContextMenu();  registerListeners();}  }
class C{  public static double pchisq(double x,double ncp){  double mean=Math.sqrt(ncp);  double xh=Math.sqrt(x);  return pnorm(xh - mean) - pnorm(-xh - mean);}  }
class C{  protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);  }}  }
class C{  void sendRoleRequest(OFControllerRole role){  try {    roleChanger.sendRoleRequest(role);  } catch (  IOException e) {    log.error("Disconnecting switch {} due to IO Error: {}",getSwitchInfoString(),e.getMessage());    mainConnection.disconnect();  }}  }
class C{  public ColorHSV(int h,int s,int v){  super(new Scalar(h,s,v));}  }
class C{  public final void add(int element){  int index=(length++) & 0x3FF;  if (index == 0) {    pages.add(page=new int[0x400]);  }  page[index]=element;}  }
class C{  private View createScrollView(){  LayoutParams lp=new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.BOTTOM);  Button button=new Button(getContext());  button.setText("this is a test");  button.setLayoutParams(lp);  return button;}  }
class C{  public String sendNokiaBookmark(String title,String url,String dest) throws SmsException, IOException {  NokiaOtaBrowserSettings browserSettings=new NokiaOtaBrowserSettings();  browserSettings.addBookmark(title,url);  SmsWapPushMessage wapPushMessage=new SmsWapPushMessage(browserSettings,"application/x-wap-prov.browser-bookmarks");  wapPushMessage.setPorts(new SmsPort(49154),SmsPort.OTA_SETTINGS_BROWSER);  return sendSms(wapPushMessage,dest,null);}  }
class C{  @SideOnly(Side.CLIENT) public static void registerIcons(IIconRegister register){  for (  IStatement statement : statements.values()) {    statement.registerIcons(register);  }  for (  Class<? extends IStatementParameter> parameter : parameters.values()) {    createParameter(parameter).registerIcons(register);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:56.597 -0500",hash_original_method="92F18F58E02D664C24F95F43BB13284A",hash_generated_method="34EA0CB7FE2D52EF5B3AFE41A5C11766") public ExtensionValue(byte[] encoding){  this.encoding=encoding;}  }
class C{  public synchronized int openQuery(final JIPTerm jipquery){  PrologObject query=jipquery.getTerm();  if (query instanceof Functor) {    if (((Functor)query).getName().equals("?-/1"))     query=((Functor)query).getParams();  }  final WAM wam=m_bTrace ? new WAMTrace(this) : new WAM(this);  final AsyncWAMManager container=new AsyncWAMManager(wam,query,this);  m_prologTable.put(new Integer(container.getHandle()),container);  notifyOpen(container.getHandle());  container.start();  return container.getHandle();}  }
class C{  @Override public DisMaxQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  protected void doCommit() throws SysException, java.lang.IllegalStateException, RollbackException {  localGetTransactionStateHandler().commit();  if (LOGGER.isDebugEnabled()) {    LOGGER.logDebug("commit() done (by application) of transaction " + getTid());  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public static RPClass createRPClass(){  final RPClass rpclass=new RPClass("tiled_entity");  rpclass.isA("area");  rpclass.addAttribute(ATTR_TILESET_NAMES,Type.LONG_STRING);  rpclass.addAttribute(ATTR_TILESET_INDEX,Type.LONG_STRING);  rpclass.addAttribute(ATTR_TILE_DATA,Type.LONG_STRING);  return rpclass;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Vector2 floor(){  return new Vector2(Math.floor(x),Math.floor(z));}  }
class C{  private void fireObjectAdded(Binding newBd,long changeID){  if (namingListeners == null || namingListeners.size() == 0)   return;  NamingEvent e=new NamingEvent(eventSrc,NamingEvent.OBJECT_ADDED,newBd,null,new Long(changeID));  support.queueEvent(e,namingListeners);}  }
class C{  public VSDecoderPreferencesPane(VSDecoderPreferences tp){  initComponents();  setComponents(tp);  checkConsistency();  tp.addPropertyChangeListener(this);}  }
class C{  public MannWhitneyUTest(){  super(2);}  }
class C{  @IsAllowed(Operation.READ) public static Result labelStyles(String ownerName,String projectName){  Project project=Project.findByOwnerAndProjectName(ownerName,projectName);  List<IssueLabel> labels=IssueLabel.findByProject(project);  String eTag="\"" + labels.hashCode() + "\"";  String ifNoneMatchValue=request().getHeader("If-None-Match");  if (ifNoneMatchValue != null && ifNoneMatchValue.equals(eTag)) {    response().setHeader("ETag",eTag);    return status(NOT_MODIFIED);  }  response().setHeader("ETag",eTag);  return ok(views.html.common.issueLabelColor.render(labels)).as("text/css");}  }
class C{  public String join(String separator) throws JSONException {  int len=length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(get(i)));  }  return sb.toString();}  }
class C{  private MyCandidate(Component component,String ufrag){  super(localAddress,component);  this.ufrag=ufrag;}  }
class C{  public final int hashCode(){  if (address() == null)   return type().hashCode();  return type().hashCode() + address().hashCode();}  }
class C{  @Override final void printValue(long value){  printMillis(value);}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().volumeDown();  return null;}  }
class C{  public byte[] serialize(){  int length;  if (dataOffset == 0)   dataOffset=5;  length=dataOffset << 2;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort((short)this.sourcePort.getPort());  bb.putShort((short)this.destinationPort.getPort());  bb.putInt(this.sequence);  bb.putInt(this.acknowledge);  bb.putShort((short)(this.flags | (dataOffset << 12)));  bb.putShort(this.windowSize);  bb.putShort(this.checksum);  bb.putShort(this.urgentPointer);  if (dataOffset > 5) {    int padding;    bb.put(options);    padding=(dataOffset << 2) - 20 - options.length;    for (int i=0; i < padding; i++)     bb.put((byte)0);  }  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.TCP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress().getInt() >> 16) & 0xffff) + (ipv4.getSourceAddress().getInt() & 0xffff);      accumulation+=((ipv4.getDestinationAddress().getInt() >> 16) & 0xffff) + (ipv4.getDestinationAddress().getInt() & 0xffff);      accumulation+=ipv4.getProtocol().getIpProtocolNumber() & 0xff;      accumulation+=length & 0xffff;    }    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(16,this.checksum);  }  return data;}  }
class C{  String Convert(final String converted){  return converted.replace('_','-');}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return Boolean.valueOf(node != null && node.isFolder());}  }
class C{  protected Texture addTexture(PImage img){  Texture.Parameters params=new Texture.Parameters(ARGB,textureSampling,getHint(ENABLE_TEXTURE_MIPMAPS),textureWrap);  return addTexture(img,params);}  }
class C{  protected static double sparsity(final int setsize,final int dbsize,final int k,final double phi){  final double f=1. / phi;  final double fK=MathUtil.powi(f,k);  final double sC=(setsize - (dbsize * fK)) / Math.sqrt(dbsize * fK * (1 - fK));  return sC;}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x) throws SQLException {  updateBinaryStream(columnLabel,x,-1);}  }
class C{  public void addInvalidMatchedPools(final Set<String> invalidPools){  if (null != _invalidMatchedPools) {    _invalidMatchedPools.replace(invalidPools);  } else {    if (null != invalidPools && !invalidPools.isEmpty()) {      setInvalidMatchedPools(new StringSet());      _invalidMatchedPools.addAll(invalidPools);    }  }}  }
class C{  public static ByteBuffer decodeStream(PDFObject dict,ByteBuffer streamBuf) throws IOException {  PDFObject filter=dict.getDictRef("Filter");  if (filter == null) {    return dict.getDecrypter().decryptBuffer(null,dict,streamBuf);  } else {    PDFObject ary[];    PDFObject params[];    if (filter.getType() == PDFObject.NAME) {      ary=new PDFObject[1];      ary[0]=filter;      params=new PDFObject[1];      params[0]=dict.getDictRef("DecodeParms");    } else {      ary=filter.getArray();      PDFObject parmsobj=dict.getDictRef("DecodeParms");      if (parmsobj != null) {        params=parmsobj.getArray();      } else {        params=new PDFObject[ary.length];      }    }    boolean specificCryptFilter=ary.length != 0 && ary[0].getStringValue().equals("Crypt");    if (!specificCryptFilter) {      streamBuf=dict.getDecrypter().decryptBuffer(null,dict,streamBuf);    }    for (int i=0; i < ary.length; i++) {      String enctype=ary[i].getStringValue();      if (enctype == null) {      } else       if (enctype.equals("FlateDecode") || enctype.equals("Fl")) {        streamBuf=FlateDecode.decode(dict,streamBuf,params[i]);      } else       if (enctype.equals("LZWDecode") || enctype.equals("LZW")) {        streamBuf=LZWDecode.decode(streamBuf,params[i]);      } else       if (enctype.equals("ASCII85Decode") || enctype.equals("A85")) {        streamBuf=ASCII85Decode.decode(streamBuf,params[i]);      } else       if (enctype.equals("ASCIIHexDecode") || enctype.equals("AHx")) {        streamBuf=ASCIIHexDecode.decode(streamBuf,params[i]);      } else       if (enctype.equals("RunLengthDecode") || enctype.equals("RL")) {        streamBuf=RunLengthDecode.decode(streamBuf,params[i]);      } else       if (enctype.equals("DCTDecode") || enctype.equals("DCT")) {        streamBuf=DCTDecode.decode(dict,streamBuf,params[i]);      } else       if (enctype.equals("CCITTFaxDecode") || enctype.equals("CCF")) {        streamBuf=CCITTFaxDecode.decode(dict,streamBuf,params[i]);      } else       if (enctype.equals("Crypt")) {        String cfName=PDFDecrypterFactory.CF_IDENTITY;        if (params[i] != null) {          final PDFObject nameObj=params[i].getDictRef("Name");          if (nameObj != null && nameObj.getType() == PDFObject.NAME) {            cfName=nameObj.getStringValue();          }        }        streamBuf=dict.getDecrypter().decryptBuffer(cfName,null,streamBuf);      } else {        throw new PDFParseException("Unknown coding method:" + ary[i].getStringValue());      }    }  }  return streamBuf;}  }
class C{  public Map<String,String> parse(final char[] charArray,char separator){  if (charArray == null) {    return new HashMap<String,String>();  }  return parse(charArray,0,charArray.length,separator);}  }
class C{  @SuppressWarnings("unchecked") protected <T1,T2>void send(final HttpMethod method,final ICallback<T1> callback,final T2 serializedObject){  mMethod=method;  mClient.getHttpProvider().send(this,callback,mResponseClass,serializedObject);}  }
class C{  public int threads(){  int threads=reader.getInteger(THREADS,DEFAULT_THREADS);  if (threads == -1) {    return Runtime.getRuntime().availableProcessors();  }  return threads;}  }
class C{  public Intent putParcelableArrayListExtra(String name,ArrayList<? extends Parcelable> value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putParcelableArrayList(name,value);  return this;}  }
class C{  @Override public void firePropertyChange(String propertyName,double oldValue,double newValue){}  }
class C{  protected void sequence_S_Display(ISerializationContext context,S_Display semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void checkSlot(int slot){  if (slot == OUTSIDE)   return;  int size=countSlots();  if (isDefault(this))   size+=5;  if (slot < 0 || slot >= size) {    throw new IllegalArgumentException("Slot out of range [0," + size + "): "+ slot);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void sleep(int msec) throws InterruptedException {  Thread.sleep(msec);}  }
class C{  @Override public boolean equals(Object other){  if (other == this) {    return true;  }  if (other instanceof ZoneOffsetTransition) {    ZoneOffsetTransition d=(ZoneOffsetTransition)other;    return transition.equals(d.transition) && offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter);  }  return false;}  }
class C{  protected void addLine(OMGraphic graphic,List<Object> record){  addGraphic(getLineList(),graphic,record);}  }
class C{  public void sendNewMessage(Message message,long threadId){  this.saveMessage=message.getSave();  if (checkMMS(message)) {    try {      Looper.prepare();    } catch (    Exception e) {    }    RateController.init(context);    DownloadManager.init(context);    sendMmsMessage(message.getText(),message.getAddresses(),message.getImages(),message.getImageNames(),message.getMedia(),message.getMediaMimeType(),message.getSubject());  } else {    if (message.getType() == Message.TYPE_VOICE) {      sendVoiceMessage(message.getText(),message.getAddresses(),threadId);    } else     if (message.getType() == Message.TYPE_SMSMMS) {      if (LOCAL_LOGV)       Log.v(TAG,"sending sms");      sendSmsMessage(message.getText(),message.getAddresses(),threadId,message.getDelay());    } else {      if (LOCAL_LOGV)       Log.v(TAG,"error with message type, aborting...");    }  }}  }
class C{  public static int lastIndexOfIgnoreCase(String src,String sub,int startIndex,int endIndex){  int sublen=sub.length();  int srclen=src.length();  if (sublen == 0) {    return startIndex > srclen ? srclen : (startIndex < -1 ? -1 : startIndex);  }  sub=sub.toLowerCase();  int total=srclen - sublen;  if (total < 0) {    return -1;  }  if (startIndex >= total) {    startIndex=total;  }  if (endIndex < 0) {    endIndex=0;  }  char c=sub.charAt(0);  mainloop:   for (int i=startIndex; i >= endIndex; i--) {    if (Character.toLowerCase(src.charAt(i)) != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      char source=Character.toLowerCase(src.charAt(k));      if (sub.charAt(j) != source) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  public void process(JCas jcas) throws AnalysisEngineProcessException {  if (find_intervals) {    findIntervals(jcas);    findSentenceIntervals(jcas);  }}  }
class C{  protected IssueCommentsEntry makePlainComment(){  Person author=new Person();  author.setName(username);  IssueCommentsEntry entry=new IssueCommentsEntry();  entry.getAuthors().add(author);  entry.setContent(new HtmlTextConstruct("Some comment"));  entry.setSendEmail(new SendEmail("False"));  return entry;}  }
class C{  public static void main(String... args) throws Exception {  String password=CipherFactory.KEYSTORE_PASSWORD;  KeyStore store=CipherFactory.getKeyStore(password);  printKeystore(store,password);}  }
class C{  public void addRole(String guildID,IRole role){  if (!roles.containsKey(guildID)) {    roles.put(guildID,new ArrayList<>());  }  roles.get(guildID).add(role);}  }
class C{  public void save() throws IOException {  if (!props.isEmpty()) {    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);  }  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + ".default"),true);}  }
class C{  public static Date parseDate(String dateValue,String[] dateFormats,Date startDate) throws IllegalArgumentException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  for (  String dateFormat : dateFormats) {    SimpleDateFormat dateParser=DateFormatHolder.formatFor(dateFormat);    dateParser.set2DigitYearStart(startDate);    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new IllegalArgumentException("Unable to parse the date " + dateValue);}  }
class C{  private boolean processS3Notification(String payload){  boolean messageProcessed=false;  try {    S3EventNotification s3EventNotification=S3EventNotification.parseJson(payload);    String objectKey=URLDecoder.decode(s3EventNotification.getRecords().get(0).getS3().getObject().getKey(),CharEncoding.UTF_8);    CompleteUploadSingleMessageResult completeUploadSingleMessageResult=uploadDownloadService.performCompleteUploadSingleMessage(objectKey);    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("completeUploadSingleMessageResult={}",jsonHelper.objectToJson(completeUploadSingleMessageResult));    }    messageProcessed=true;  } catch (  RuntimeException|UnsupportedEncodingException e) {    LOGGER.debug("Failed to process message from the JMS queue for an S3 notification. jmsQueueName=\"{}\" jmsMessagePayload={}",HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING,payload,e);  }  return messageProcessed;}  }
class C{  private int calculateCorner(Window w,int x,int y){  Insets insets=w.getInsets();  int xPosition=calculatePosition(x - insets.left,w.getWidth() - insets.left - insets.right);  int yPosition=calculatePosition(y - insets.top,w.getHeight() - insets.top - insets.bottom);  if (xPosition == -1 || yPosition == -1) {    return -1;  }  return yPosition * 5 + xPosition;}  }
class C{  void cellToPoint(int cellX,int cellY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap);  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap);}  }
class C{  private static boolean remoteCloseCache() throws CacheException {  Assert.assertTrue(cache != null,"No cache on this VM?");  Assert.assertTrue(!cache.isClosed(),"Who closed my cache?");  InternalDistributedSystem system=(InternalDistributedSystem)((GemFireCacheImpl)cache).getDistributedSystem();  DistributionManager dm=(DistributionManager)system.getDistributionManager();  boolean exceptionInThreads=dm.exceptionInThreads();  DistributionManagerDUnitTest.clearExceptionInThreads(dm);  cache.close();  cache=null;  return exceptionInThreads;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.910 -0500",hash_original_method="D85A39136D4004ABB79E6EE2109136C5",hash_generated_method="D7805EB8A2CDCEA2528384E89880D303") public boolean isAbsolute(){  return absolute;}  }
class C{  public void xMinYMid() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMID;}  }
class C{  public void remove(String name){  metadata.remove(name);}  }
class C{  public Map<String,PluginDescriptor> parsePluginFolder(String[] pluginFolders){  Map<String,PluginDescriptor> map=new HashMap<String,PluginDescriptor>();  if (pluginFolders == null) {    throw new IllegalArgumentException("plugin.folders is not defined");  }  for (  String name : pluginFolders) {    File directory=getPluginFolder(name);    if (directory == null) {      continue;    }    LOG.info("Plugins: looking in: " + directory.getAbsolutePath());    for (    File oneSubFolder : directory.listFiles()) {      if (oneSubFolder.isDirectory()) {        String manifestPath=oneSubFolder.getAbsolutePath() + File.separator + "plugin.xml";        try {          LOG.debug("parsing: " + manifestPath);          PluginDescriptor p=parseManifestFile(manifestPath);          map.put(p.getPluginId(),p);        } catch (        Exception e) {          LOG.warn("Error while loading plugin `" + manifestPath + "` "+ e.toString());        }      }    }  }  return map;}  }
class C{  byte[] doFinal(){  if (first == true) {    md.update(secret);    md.update(pad1);  } else {    first=true;  }  try {    byte[] tmp=md.digest();    md.update(secret);    md.update(pad2);    md.update(tmp);    md.digest(tmp,0,tmp.length);    return tmp;  } catch (  DigestException e) {    throw new ProviderException(e);  }}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  len=in.read(buf,off,len);  if (len != -1) {    cksum.update(buf,off,len);  }  return len;}  }
class C{  public double pdf(double x){  if (x < 0)   throw new IllegalArgumentException();  if (x == 0) {    if (alpha == 1.0)     return 1.0 / lambda; else     return 0.0;  }  if (alpha == 1.0)   return Math.exp(-x / lambda) / lambda;  return Math.exp((alpha - 1.0) * Math.log(x / lambda) - x / lambda - Fun.logGamma(alpha)) / lambda;}  }
class C{  public void writeGraphic(final String filename){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(),1024,768);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public DefaultResultConverter(boolean registerDefaults){  converters=new LinkedList<>();  if (registerDefaults) {    converters.add(new FutureToIterableConverter());    converters.add(new IteratorToIterableConverter());    converters.add(new SingleValueToIterableConverter());  }}  }
class C{  public Relation<KNNList> run(Relation<V> relation){  DBIDs ids=relation.getDBIDs();  WritableDataStore<KNNList> knnLists=run(relation,ids);  return new MaterializedRelation<>("k nearest neighbors","kNNs",TypeUtil.KNNLIST,knnLists,ids);}  }
class C{  private Object writeReplace() throws java.io.ObjectStreamException {  return new KeyRep(KeyRep.Type.SECRET,getAlgorithm(),getFormat(),getEncoded());}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  void assignParamToLocal(int right,Local left){  PurityNode node=cacheNode(new PurityParamNode(right));  localsRemove(left);  localsPut(left,node);  nodes.add(node);  paramNodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public FormatsValidate(Formats fmt,FormatsConstrain[] constrains){  m_fmt=fmt;  m_aConstrains=constrains;}  }
class C{  @Override public void run(int connId,String[] args){  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,restrictedUse);    return;  }  if (!server.isPassworded() || (args.length > 1 && server.isPassword(args[1]))) {    reset(connId);  } else {    server.sendServerChat(connId,badPassword);  }}  }
class C{  public RegistrationException(String message,Reason reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static SortClause desc(String item){  return new SortClause(item,ORDER.desc);}  }
class C{  protected void doPut(Object key,Object value,String regionName,boolean expectException){  Region region=getCache().getRegion(regionName);  assertNotNull(region);  try {    region.put(key,value);  } catch (  OutOfOffHeapMemoryException e) {    if (!expectException)     throw e;  }}  }
class C{  private void fill(int index){  this.local[index]++;  for (int i=index + 1; i < getNumObjects(); i++) {    local[i]=0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:44.805 -0500",hash_original_method="01DD3741CD8E2948231CA6DA5A86A75B",hash_generated_method="0CEDB44E2ECF4C1E1C864C156289461C") public char[] toChars(){  return toChars(null,null);}  }
class C{  public void add(Permission permission){  if (isReadOnly())   throw new SecurityException("Attempt to add a Permission " + "to a readonly CryptoPermissions " + "object");  if (!(permission instanceof CryptoPermission))   return;  CryptoPermission cryptoPerm=(CryptoPermission)permission;  PermissionCollection pc=getPermissionCollection(cryptoPerm);  pc.add(cryptoPerm);  String alg=cryptoPerm.getAlgorithm();  perms.putIfAbsent(alg,pc);}  }
class C{  protected static PadMode convertEdgeMode(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_EDGE_MODE_ATTRIBUTE);  if (s.length() == 0) {    return PadMode.REPLICATE;  }  if (SVG_DUPLICATE_VALUE.equals(s)) {    return PadMode.REPLICATE;  }  if (SVG_WRAP_VALUE.equals(s)) {    return PadMode.WRAP;  }  if (SVG_NONE_VALUE.equals(s)) {    return PadMode.ZERO_PAD;  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_EDGE_MODE_ATTRIBUTE,s});}  }
class C{  public void remove(Object object){  if (!idToObject.containsValue(object,true))   return;  int objectID=idToObject.findKey(object,true,-1);  idToObject.remove(objectID);  if (TRACE)   trace("kryonet","Object " + objectID + " removed from ObjectSpace: "+ object);}  }
class C{  public static void convertWordVectorsToBinary(Map<String,float[]> vectors,boolean aCaseless,Locale aLocale,File binaryTarget) throws IOException {  if (vectors.isEmpty()) {    throw new IllegalArgumentException("Word embeddings map must not be empty.");  }  int vectorLength=vectors.values().iterator().next().length;  assert vectors.values().stream().allMatch(null);  Header header=prepareHeader(aCaseless,aLocale,vectors.size(),vectorLength);  DataOutputStream output=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(binaryTarget)));  header.write(output);  LOG.info("Sorting data...");  String[] words=vectors.keySet().stream().sorted().toArray(null);  LOG.info("Writing strings...");  for (  String word : words) {    output.writeUTF(word);  }  LOG.info("Writing UNK vector...");{    float[] vector=VectorizerUtils.randomVector(header.getVectorLength());    writeVector(output,vector);  }  LOG.info("Writing vectors...");  for (  String word : words) {    float[] vector=vectors.get(word);    writeVector(output,vector);  }  output.close();}  }
class C{  public boolean terminate(){switch (model.type) {case '+':    if ((value == 0) && !(model).empty()) {      return false;    }case '*':case '?':  return (next == null) || next.terminate();case '|':for (ContentModel m=(ContentModel)model.content; m != null; m=m.next) {  if (m.empty()) {    return (next == null) || next.terminate();  }}return false;case '&':{ContentModel m=(ContentModel)model.content;for (int i=0; m != null; i++, m=m.next) {if ((value & (1L << i)) == 0) {  if (!m.empty()) {    return false;  }}}return (next == null) || next.terminate();}case ',':{ContentModel m=(ContentModel)model.content;for (int i=0; i < value; i++, m=m.next) ;for (; (m != null) && m.empty(); m=m.next) ;if (m != null) {return false;}return (next == null) || next.terminate();}default :return false;}}  }
class C{  public boolean isCreditCritical(){  String status=m_bp.getSOCreditStatus();  return MBPartner.SOCREDITSTATUS_CreditStop.equals(status) || MBPartner.SOCREDITSTATUS_CreditHold.equals(status) || MBPartner.SOCREDITSTATUS_CreditWatch.equals(status);}  }
class C{  public static void rectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width must be nonnegative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public WebXmlElement createContextParamElement(DescriptorType docType,String theParamName,String theParamValue){  ContextParam contextParamElement=(ContextParam)docType.getTagByName(WebXmlType.CONTEXT_PARAM).create();  contextParamElement.setParamName(theParamName);  contextParamElement.setParamValue(theParamValue);  return contextParamElement;}  }
class C{  private static boolean isPropertyEnabled(Dictionary<?,?> properties,String propertyName){  boolean enabled=false;  try {    String flag=(String)properties.get(propertyName);    if (flag != null) {      enabled=flag.trim().equals("true");    }  } catch (  ClassCastException e) {    enabled=false;  }  return enabled;}  }
class C{  public static VaryNode makeVaryNode(int iNode,ArrayList<Integer> nRecords,Instances instances){  VaryNode _VaryNode=new VaryNode(iNode);  int nValues=instances.attribute(iNode).numValues();  @SuppressWarnings("unchecked") ArrayList<Integer>[] nChildRecords=new ArrayList[nValues];  for (int iChild=0; iChild < nValues; iChild++) {    nChildRecords[iChild]=new ArrayList<Integer>();  }  for (int iRecord=0; iRecord < nRecords.size(); iRecord++) {    int iInstance=nRecords.get(iRecord).intValue();    nChildRecords[(int)instances.instance(iInstance).value(iNode)].add(new Integer(iInstance));  }  int nCount=nChildRecords[0].size();  int nMCV=0;  for (int iChild=1; iChild < nValues; iChild++) {    if (nChildRecords[iChild].size() > nCount) {      nCount=nChildRecords[iChild].size();      nMCV=iChild;    }  }  _VaryNode.m_nMCV=nMCV;  _VaryNode.m_ADNodes=new ADNode[nValues];  for (int iChild=0; iChild < nValues; iChild++) {    if (iChild == nMCV || nChildRecords[iChild].size() == 0) {      _VaryNode.m_ADNodes[iChild]=null;    } else {      _VaryNode.m_ADNodes[iChild]=makeADTree(iNode + 1,nChildRecords[iChild],instances);    }  }  return _VaryNode;}  }
class C{  public void addJob(JobDetail jobDetail,boolean replace) throws SchedulerException {  try {    getRemoteScheduler().addJob(jobDetail,replace);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void activateAllLogixs(){  Logix x=getBySystemName(LRouteTableAction.LOGIX_INITIALIZER);  if (x != null) {    x.activateLogix();  }  java.util.Iterator<String> iter=getSystemNameList().iterator();  while (iter.hasNext()) {    String sysName=iter.next();    if (sysName == null) {      log.error("System name null when activating Logixs");      break;    }    if (sysName.equals(LRouteTableAction.LOGIX_INITIALIZER)) {      continue;    }    x=getBySystemName(sysName);    if (x == null) {      log.error("Error getting Logix *" + sysName + "* when activating Logixs");      break;    }    if (loadDisabled) {      log.warn("load disabled set - will not activate logic for: " + x.getDisplayName());      x.setEnabled(false);    }    if (x.getEnabled()) {      x.activateLogix();    }  }  loadDisabled=false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void endChunkSend(ByteBuffer chunk){  chunkIncubator.hatch(chunk);synchronized (this) {    while (chunkIncubator.nextIsHatched()) {      ByteBuffer c=chunkIncubator.removeNextHatchedIfAvailable();      c.rewind();      s.getOutputStream().offer(c);    }  }}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=1;  if (expr != null) {    cost+=expr.costInline(thresh,env,ctx);    if (cost >= thresh)     return cost;  }  if (body != null) {    cost+=body.costInline(thresh,env,ctx);  }  return cost;}  }
class C{  protected void generateIntermediatePositions(DrawContext dc,Iterable<? extends Position> positions){  Globe globe=dc.getGlobe();  List<Position> wavePositions=new ArrayList<Position>();  double waveLength=this.getWaveLength();  if (waveLength == 0) {    waveLength=this.computeDefaultWavelength(dc.getGlobe());  }  double amplitude=waveLength / 2.0;  TriangleWavePositionIterator iterator=new TriangleWavePositionIterator(positions,waveLength,amplitude,globe);  while (iterator.hasNext()) {    wavePositions.add(iterator.next());  }  this.computedPositions=wavePositions;}  }
class C{  @Override public void emitDirect(int taskId,String streamId,List<Object> tuple,Object messageId){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.STREAM_ID,streamId).with(EmitContext.Type.PARTITION,getPartition(messageId)).with(EmitContext.Type.TASK_ID,new Integer(taskId)));  _delegate.emitDirect(taskId,streamId,t,messageId);}  }
class C{  private boolean isCompatibleCurrency(PriceModel referencePriceModel,PriceModel compatiblePriceModel){  if (referencePriceModel != null && compatiblePriceModel != null && referencePriceModel.isChargeable() && compatiblePriceModel.isChargeable()) {    if (!referencePriceModel.getCurrency().equals(compatiblePriceModel.getCurrency())) {      return false;    }  }  return true;}  }
class C{  public void fillRectRadialGradient(int startColor,int endColor,int x,int y,int width,int height,float relativeX,float relativeY,float relativeSize){  if (startColor == endColor) {    setColor(startColor);    fillRect(x,y,width,height,(byte)0xff);    return;  }  impl.fillRectRadialGradient(nativeGraphics,startColor,endColor,x + xTranslate,y + yTranslate,width,height,relativeX,relativeY,relativeSize);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int value;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          value=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) != z) {              z=data.get(a);              value++;            }          }          outputFile.setValue(row,col,value);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RoundBorder opacity(int opacity){  this.opacity=opacity;  return this;}  }
class C{  @Override public void relocate(){  int w=250, h=185;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  pathLabel.setLocation(x,y);  pathField.setLocation(x,y + 30);  searchButton.setLocation(x + 170,y);  typeLabel.setLocation(x,y + 70);  typeChooser.setLocation(x + 140,y + 70);  startLabel.setLocation(x,y + 110);  startPosition.setLocation(x + 140,y + 110);  addButton.setLocation(x,y + 160);  cancelButton.setLocation(x + 130,y + 160);}  }
class C{  public static synchronized void afterEach(UnsafeBlock block){  isValidContext("afterEach");  contexts.get().current().addAfterEach(block);}  }
class C{  public static boolean occlusionTest(IMultipart part,Predicate<IMultipart> ignored,Iterable<? extends IMultipart> others){  for (  IMultipart other : others)   if ((ignored == null || !ignored.apply(other)) && !occlusionTest(part,other))   return false;  return true;}  }
class C{  public void addVisualizationListener(VisualizationListener listener){  vistree.addVisualizationListener(listener);}  }
class C{  private void addLineNumber(){  if (!showLineNumbers)   return;  final String lineNumString=Integer.toString(lines.size() + 1);  for (int i=4 - lineNumString.length(); i > 0; i--)   sb.append(' ');  sb.append(lineNumString).append(' ');}  }
class C{  public AsyncBoxView(Element elem,int axis){  super(elem);  stats=new ArrayList<ChildState>();  this.axis=axis;  locator=new ChildLocator();  flushTask=new FlushTask();  minorSpan=Short.MAX_VALUE;  estimatedMajorSpan=false;}  }
class C{  public void endDocument() throws ODataRenderException {  try {    xmlWriter.writeEndDocument();    xmlWriter.flush();  } catch (  XMLStreamException e) {    LOG.error("Not possible to end stream XML");    throw new ODataRenderException("Not possible to end stream XML: ",e);  }}  }
class C{  private void addField(JPanel panel,ReferenceEditorWithBrowseButton field){  panel.add(field,BorderLayout.CENTER);  final Component[] components=panel.getParent().getComponents();  final int index=Arrays.asList(components).indexOf(panel);  if (index > 0) {    final Component component=components[index - 1];    if (component instanceof JLabel) {      ((JLabel)component).setLabelFor(field);    }  }}  }
class C{  protected void printTrack(Track track){  DefaultEntityViewInfo vInfo=(DefaultEntityViewInfo)track.getViewInfo();  tmpNodeBuffer.clear();  tmpNodeBuffer.addAll(track.getNodes());  if (!tmpNodeBuffer.isEmpty()) {    printLine(imageBdr,tmpNodeBuffer,vInfo,false,false,null);    printPoint(imageBdr,tmpNodeBuffer.get(tmpNodeBuffer.size() - 1),vInfo,null);  }}  }
class C{  public static CstBoolean make(boolean value){  return value ? VALUE_TRUE : VALUE_FALSE;}  }
class C{  private void clearMessages(){  messages.clear();}  }
class C{  public WrappedByteBuffer putInt(int v){  _autoExpand(4);  _buf.putInt(v);  return this;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  @Override public int hashCode(){  int result=version + rounds + wordSize;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element & 0xFF;  }  return result;}  }
class C{  public void testDecodeAttributeBody() throws StunException {  byte[] attributeValue=msgFixture.errCodeTestValue;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - Attribute.HEADER_LENGTH);  errorCodeAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("Error Class was not correctly decoded",MsgFixture.ERROR_CLASS,errorCodeAttribute.getErrorClass());  assertEquals("Error Number was not correctly decoded",MsgFixture.ERROR_NUMBER,errorCodeAttribute.getErrorNumber());  assertEquals("Reason phrase was not correctly decoded",MsgFixture.REASON_PHRASE.trim(),errorCodeAttribute.getReasonPhrase().trim());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void registerCacheUpdatePeriodChangeListener(final PropertyChangeListener listener){  cacheUpdatePeriodListeners.add(listener);}  }
class C{  public StdXMLReader(InputStream stream) throws IOException {  PushbackInputStream pbstream=new PushbackInputStream(stream);  StringBuffer charsRead=new StringBuffer();  Reader reader=this.stream2reader(stream,charsRead);  this.currentReader=new StackedReader();  this.readers=new Stack();  this.currentReader.lineReader=new LineNumberReader(reader);  this.currentReader.pbReader=new PushbackReader(this.currentReader.lineReader,2);  this.currentReader.publicId="";  try {    this.currentReader.systemId=new URL("file:.");  } catch (  MalformedURLException e) {  }  this.startNewStream(new StringReader(charsRead.toString()));}  }
class C{  protected void sequence_ClassExtendsClause_ClassImplementsList_Members_N4ClassDeclaration_TypeVariables(ISerializationContext context,N4ClassDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  if (source == m_listenee) {    m_listenee=null;  }}  }
class C{  public String render(ValueExpr theExpr) throws Exception {  theExpr.visit(this);  return mBuffer.toString();}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public CellView(Element elem){  super(elem,Y_AXIS);}  }
class C{  public void addLinkListener(LinkListener listener){  treeDisplay.addLinkListener(listener);  stackedDisplay.addLinkListener(listener);}  }
class C{  public ProtoIdItem(Prototype prototype){  if (prototype == null) {    throw new NullPointerException("prototype == null");  }  this.prototype=prototype;  this.shortForm=makeShortForm(prototype);  StdTypeList parameters=prototype.getParameterTypes();  this.parameterTypes=(parameters.size() == 0) ? null : new TypeListItem(parameters);}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,int[] pix,int off,int scan){  initialize(w,h,cm,(Object)pix,off,scan,null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("Process Menu Request");  if (MobileUtil.getParameter(request,"Exit") != null) {    MobileUtil.createLoginPage(request,response,this,null,"Exit");    return;  }  MobileSessionCtx wsc=MobileSessionCtx.get(request);  if (wsc.ctx == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Window_ID=MobileUtil.getParameterAsInt(request,"AD_Window_ID");  if (AD_Window_ID != 0) {    log.fine("AD_Window_ID=" + AD_Window_ID);    String url=MobileEnv.getBaseDirectory("WWindow?AD_Window_ID=" + AD_Window_ID);    log.fine("Forward to=" + url);    RequestDispatcher rd=getServletContext().getRequestDispatcher(url);    rd.forward(request,response);    return;  }  int AD_User_ID=Env.getAD_User_ID(wsc.ctx);  int AD_Role_ID=Env.getAD_Role_ID(wsc.ctx);  int AD_Client_ID=Env.getAD_Client_ID(wsc.ctx);  int AD_Org_ID=Env.getAD_Client_ID(wsc.ctx);  String AD_Language=Env.getAD_Language(wsc.ctx);  if (wsc.loginInfo != null && wsc.loginInfo.length() > 0) {    MobileDoc doc=createPage(request,wsc,AD_Role_ID,AD_User_ID,AD_Client_ID,AD_Org_ID);    MobileUtil.createResponse(request,response,this,null,doc,false);  }  MobileUtil.createErrorPage(request,response,this,"NotImplemented");}  }
class C{  public void doGet(String requestUrl,Map<String,Object> params,OnDaVinciRequestListener requestListener){  doRequest(Request.Method.GET,requestUrl,params,null,requestListener);}  }
class C{  void inlineResources(final Mail mail,final String htmlTemplate,final List<String> mailTemplateChain,final String shopCode,final String locale,final String templateName) throws MessagingException, IOException {  if (StringUtils.isNotBlank(htmlTemplate)) {    final List<String> resourcesIds=getResourcesId(htmlTemplate);    if (!resourcesIds.isEmpty()) {      for (      String resourceId : resourcesIds) {        final String resourceFilename=transformResourceIdToFileName(resourceId);        final byte[] content=mailTemplateResourcesProvider.getResource(mailTemplateChain,shopCode,locale,templateName,resourceFilename);        final MailPart part=mail.addPart();        part.setResourceId(resourceId);        part.setFilename(resourceFilename);        part.setData(content);      }    }  }}  }
class C{  public static Map<String,Object> copyUserPreferenceGroup(DispatchContext ctx,Map<String,?> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  String userLoginId=PreferenceWorker.getUserLoginId(context,false);  String fromUserLoginId=(String)context.get("fromUserLoginId");  String userPrefGroupTypeId=(String)context.get("userPrefGroupTypeId");  if (UtilValidate.isEmpty(userLoginId) || UtilValidate.isEmpty(userPrefGroupTypeId) || UtilValidate.isEmpty(fromUserLoginId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"copyPreference.invalidArgument",locale));  }  try {    List<GenericValue> resultList=EntityQuery.use(delegator).from("UserPreference").where("userLoginId",fromUserLoginId,"userPrefGroupTypeId",userPrefGroupTypeId).queryList();    if (resultList != null) {      for (      GenericValue preference : resultList) {        preference.set("userLoginId",userLoginId);      }      delegator.storeAll(resultList);    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"copyPreference.writeFailure",new Object[]{e.getMessage()},locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  @Override public void onTabClicked(int position){}  }
class C{  public PerfDataBufferPrologue(ByteBuffer byteBuffer) throws MonitorException {  super(byteBuffer);  assert ((getMajorVersion() == 2) && (getMinorVersion() == 0));}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrhaschildnodes.class,args);}  }
class C{  public Where<T,ID> not(){  Not not=new Not();  addClause(not);  addNeedsFuture(not);  return this;}  }
class C{  public void insertComponent(Component c){  MutableAttributeSet inputAttributes=getInputAttributes();  inputAttributes.removeAttributes(inputAttributes);  StyleConstants.setComponent(inputAttributes,c);  replaceSelection(" ",false);  inputAttributes.removeAttributes(inputAttributes);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:16.134 -0500",hash_original_method="F33E95B361A636BB80AA643BEE16494D",hash_generated_method="CA446959492622B0791DCB3A2158101A") public ProtocolException(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.802 -0400",hash_original_method="86BB9934E6C8CCDEBF0E4FA9EF01F2A6",hash_generated_method="86ED2021B5FB276F0D5F19302A979606") private void onDisplayPasskey(String objectPath,int passkey,int nativeData){  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);  if (address == null)   return;  mWakeLock.acquire();  Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_KEY,passkey);  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY);  mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);  mWakeLock.release();}  }
class C{  public static double weightedCoefficient(NumberVector x,NumberVector y,double[] weights){  final int xdim=x.getDimensionality();  final int ydim=y.getDimensionality();  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: number vectors differ in dimensionality.");  }  if (xdim != weights.length) {    throw new IllegalArgumentException("Dimensionality doesn't agree to weights.");  }  double sumXX=0., sumYY=0., sumXY=0., sumWe=weights[0];  double meanX=x.doubleValue(0), meanY=y.doubleValue(0);  for (int i=1; i < xdim; ++i) {    final double xv=x.doubleValue(i), yv=y.doubleValue(i), w=weights[i];    final double deltaX=xv - meanX;    final double deltaY=yv - meanY;    sumWe+=w;    meanX+=deltaX * w / sumWe;    meanY+=deltaY * w / sumWe;    final double neltaX=xv - meanX;    final double neltaY=yv - meanY;    sumXX+=w * deltaX * neltaX;    sumYY+=w * deltaY * neltaY;    sumXY+=w * deltaX * neltaY;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  public boolean areBlocksIncluded(ArrayList<Block> blks){  Enumeration<SignalMast> en=destList.keys();  while (en.hasMoreElements()) {    SignalMast dm=en.nextElement();    boolean included=false;    for (int i=0; i < blks.size(); i++) {      included=destList.get(dm).isBlockIncluded(blks.get(i));      if (included) {        return true;      }      included=destList.get(dm).isAutoBlockIncluded(blks.get(i));      if (included) {        return true;      }    }  }  return false;}  }
class C{  public boolean dumpVMNamespace(String namespace){  return vmManager.dumpNamespace(namespace);}  }
class C{  public CDebugBottomPanel(final CGraphModel model,final CDebugPerspectiveModel debugPerspectiveModel){  super(getPanels(model,debugPerspectiveModel));  m_debuggerBox=new CDebuggerControlPanel(model.getParent(),debugPerspectiveModel);  add(m_debuggerBox,BorderLayout.NORTH);  m_statusLabel=new CStatusPanel(model.getDebuggerProvider());  add(m_statusLabel,BorderLayout.SOUTH);}  }
class C{  public CompanyExample(CompanyObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getName() != null) {    criteria.andNameEqualTo(sample.getName());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getPrivileged() != null) {    criteria.andPrivilegedEqualTo(sample.getPrivileged());  }  if (sample.getMoney() != null) {    criteria.andMoneyEqualTo(sample.getMoney());  }  if (sample.getLastPayTime() != null) {    criteria.andLastPayTimeEqualTo(sample.getLastPayTime());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:27.769 -0500",hash_original_method="48F4ACED9715A443A4F67526A289B023",hash_generated_method="9204FD780FAA06D7A6E45B04FF62978B") public static int read(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return 0;  }  try {    int readCount=Libcore.os.read(fd,bytes,byteOffset,byteCount);    if (readCount == 0) {      return -1;    }    return readCount;  } catch (  ErrnoException errnoException) {    if (errnoException.errno == EAGAIN) {      return 0;    }    throw errnoException.rethrowAsIOException();  }}  }
class C{  public ParameterDefinitionHistory(ParameterDefinition c){  super(c);  if (c.getTechnicalProduct() != null) {    this.technicalProductObjKey=Long.valueOf(c.getTechnicalProduct().getKey());  }}  }
class C{  synchronized void deliverRoleReply(long xid,OFControllerRole role){  log.debug("DELIVERING ROLE REPLY {}",role.toString());  if (!requestPending) {    String msg=String.format("Switch: [%s], State: [%s], " + "received unexpected RoleReply[%s]. " + "No roles are pending",OFSwitchHandshakeHandler.this.getSwitchInfoString(),OFSwitchHandshakeHandler.this.state.toString(),role);    throw new SwitchStateException(msg);  }  if (pendingXid == xid && pendingRole == role) {    log.debug("[{}] Received role reply message setting role to {}",getDpid(),role);    switchManagerCounters.roleReplyReceived.increment();    setSwitchRole(role,RoleRecvStatus.RECEIVED_REPLY);  } else {    log.debug("[{}] Received stale or unexpected role reply " + "{}, xid={}. Ignoring. " + "Waiting for {}, xid={}",new Object[]{getDpid(),role,xid,pendingRole,pendingXid});  }}  }
class C{  public final void add(final T item){  if (null == item) {    throw new IllegalArgumentException("cannot add null item");  }  this.list.add(item);}  }
class C{  public static double[] toDoubleArray(Character[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=((double)array[i].charValue());  }  return result;}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(stateErrors.errorInIdleState);  assertTrue(stateErrors.errorInIdleStateAfterReset);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInStoppedState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(!stateErrors.errorInStartedState);}  }
class C{  public final static void main(String[] args){  final ExportAllDBTables exportTables=new ExportAllDBTables();  try {    final boolean hasRunSuccessfully=exportTables.run(args);    if (hasRunSuccessfully) {      final long flength=exportTables.getFileLength();      logger.info("DB tables exported successfully.  The size of the compressed archive is " + flength + " bytes.");    } else {      logger.info("DB tables could not be exported.");    }  } catch (  AdeException e) {    logger.error("Exporting DB tables to flat files failed.",e);  }}  }
class C{  public boolean isCostingLevelClient(){  String s=getCostingLevel();  if (s == null || COSTINGLEVEL_Client.equals(s))   return true;  return false;}  }
class C{  private void updateAlbumLocation(String uname) throws IOException, ServiceException {  OUT.println("Enter album id to update:");  String albumId=IN.readLine();  String albumEntryUrl=API_PREFIX + uname + "/"+ albumId;  String fields="@gd:etag,gphoto:location";  Query patchQuery=new Query(new URL(albumEntryUrl));  patchQuery.setFields(fields);  AlbumEntry entry=service.getEntry(patchQuery.getUrl(),AlbumEntry.class);  OUT.println("Current location: " + entry.getLocation());  OUT.println("Specify new location: ");  String newLocation=IN.readLine();  entry.setLocation(newLocation);  entry.setSelectedFields("gphoto:location");  AlbumEntry updated=service.patch(new URL(albumEntryUrl),fields,entry);  OUT.println("Location set to: " + updated.getLocation());}  }
class C{  public Process(final File file,final ProgressListener progressListener) throws IOException, XMLException {  this.processLocation=new FileProcessLocation(file);  initContext();  Reader in=null;  try {    in=new InputStreamReader(new FileInputStream(file),"UTF-8");    readProcess(in,progressListener);  } catch (  IOException e) {    throw e;  } finally {    if (in != null) {      in.close();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Deprecated public void addImport(LibraryLoad ll){  imports.add(ll);}  }
class C{  public RemoteOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void addItemUnique(Artist a){synchronized (mArtists) {    if (!mArtists.contains(a)) {      mArtists.add(a);      sortList();    }  }}  }
class C{  public boolean isDeclaredFinal(){  return declaredFinal;}  }
class C{  private void addBinding(final String key,final Object value){  m_bindings.put(key,value);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.312 -0500",hash_original_method="D16C95477ED680F14972EC7ADA3B262B",hash_generated_method="04E41A1E9D1B521397ED7A85F49E31E1") private synchronized void initResourceBundle(String resourceBundleName){  String current=this.resourceBundleName;  if (current != null) {    if (current.equals(resourceBundleName)) {      return;    } else {      throw new IllegalArgumentException("Resource bundle name '" + resourceBundleName + "' is inconsistent with the existing '"+ current+ "'");    }  }  if (resourceBundleName != null) {    this.resourceBundle=loadResourceBundle(resourceBundleName);    this.resourceBundleName=resourceBundleName;  }}  }
class C{  public static VectorClock increment(VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,System.currentTimeMillis());  return clock;}  }
class C{  public synchronized AggregateTable addAggregates(String group){  return addAggregates(group,VisualItem.SCHEMA);}  }
class C{  final void matchAll(Vector decls){  for (int i=0; i < decls.size(); i++) {    UniqueString opName=((OpDeclNode)decls.elementAt(i)).getName();    int j;    for (j=0; j < this.substs.length; j++) {      if (this.substs[j].getOp().getName() == opName)       break;    }    if (j >= this.substs.length) {      errors.addError(stn.getLocation(),"Substitution missing for symbol " + opName + " declared at "+ ((OpDeclNode)(decls.elementAt(i))).getTreeNode().getLocation()+ " \nand instantiated in module "+ instantiatingModule.getName()+ ".");    }  }}  }
class C{  public KmlPlacemark(Polygon polygon,KmlDocument kmlDoc){  this();  mName=polygon.getTitle();  mDescription=polygon.getSnippet();  mGeometry=new KmlPolygon();  mGeometry.mCoordinates=(ArrayList<GeoPoint>)polygon.getPoints();  ((KmlPolygon)mGeometry).mHoles=(ArrayList<ArrayList<GeoPoint>>)polygon.getHoles();  mVisibility=polygon.isEnabled();  Style style=new Style();  style.mPolyStyle=new ColorStyle(polygon.getFillColor());  style.mLineStyle=new LineStyle(polygon.getStrokeColor(),polygon.getStrokeWidth());  mStyle=kmlDoc.addStyle(style);}  }
class C{  public ProgressLogger(final Logger logger,final long logInterval){  this(logger,logInterval,"items");}  }
class C{  public void writeAnnotationsTo(Writer out) throws IOException {  int width2=getAnnotationWidth();  int width1=annotationWidth - width2 - 1;  TwoColumnOutput twoc=new TwoColumnOutput(out,width1,width2,"|");  Writer left=twoc.getLeft();  Writer right=twoc.getRight();  int leftAt=0;  int rightAt=0;  int rightSz=annotations.size();  while ((leftAt < cursor) && (rightAt < rightSz)) {    Annotation a=annotations.get(rightAt);    int start=a.getStart();    int end;    String text;    if (leftAt < start) {      end=start;      start=leftAt;      text="";    } else {      end=a.getEnd();      text=a.getText();      rightAt++;    }    left.write(Hex.dump(data,start,end - start,start,hexCols,6));    right.write(text);    twoc.flush();    leftAt=end;  }  if (leftAt < cursor) {    left.write(Hex.dump(data,leftAt,cursor - leftAt,leftAt,hexCols,6));  }  while (rightAt < rightSz) {    right.write(annotations.get(rightAt).getText());    rightAt++;  }  twoc.flush();}  }
class C{  private void handleSelectionView(IProfile profile,boolean on){  if (on) {    if (Build.VERSION.SDK_INT >= 21) {      ((FrameLayout)mAccountHeaderContainer).setForeground(ContextCompat.getDrawable(mAccountHeaderContainer.getContext(),mAccountHeaderTextSectionBackgroundResource));      mAccountHeaderContainer.setOnClickListener(onSelectionClickListener);      mAccountHeaderContainer.setTag(R.id.material_drawer_profile_header,profile);    } else {      mAccountHeaderTextSection.setBackgroundResource(mAccountHeaderTextSectionBackgroundResource);      mAccountHeaderTextSection.setOnClickListener(onSelectionClickListener);      mAccountHeaderTextSection.setTag(R.id.material_drawer_profile_header,profile);    }  } else {    if (Build.VERSION.SDK_INT >= 21) {      ((FrameLayout)mAccountHeaderContainer).setForeground(null);      mAccountHeaderContainer.setOnClickListener(null);    } else {      UIUtils.setBackground(mAccountHeaderTextSection,null);      mAccountHeaderTextSection.setOnClickListener(null);    }  }}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  public byte[] sessionToken(){  return sesTok;}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.isEmpty()) {    functionValueMap.add(this,Double.NaN);    return;  }  SimpsonIntegrator simpsonIntegrator=new SimpsonIntegrator();  double integral=simpsonIntegrator.integrate(Integer.MAX_VALUE,null,0,timeSeries.size() - 1);  functionValueMap.add(this,integral);}  }
class C{  public String createListMirrorStep(Workflow workflow,String waitFor,StorageSystem storageSystem,List<URI> mirrorList) throws ControllerException {  URI storage=storageSystem.getId();  waitFor=workflow.createStep(CREATE_MIRRORS_STEP_GROUP,"Creating list mirror",waitFor,storage,storageSystem.getSystemType(),this.getClass(),createListMirrorMethod(storage,mirrorList,false),rollbackListMirrorMethod(storage,mirrorList),null);  return waitFor;}  }
class C{  public Months plus(int months){  if (months == 0) {    return this;  }  return Months.months(FieldUtils.safeAdd(getValue(),months));}  }
class C{  public JDBCPieDataset(Connection con,String query) throws SQLException {  this(con);  executeQuery(query);}  }
class C{  public static void addClassFactory(ClassFactory classFactory){  getUserClassFactories().add(classFactory);}  }
class C{  public void testRecognizeSymmetricNat() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddressPort2,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  responseServer.addMessage(testIResponse3);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.SYMMETRIC_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a " + "no-udp environment.",expectedReturn,actualReturn);}  }
class C{  private void createLookupTableData(TransformContext context){  for (  String key : mappingValues.keySet()) {    ValueMapping mapping=mappingValues.get(key);    String lookupTableName=mapping.getLookupTableName();    if (!lookupTableCache.containsKey(lookupTableName)) {      LookupTableConfig tableConfig=new LookupTableConfig(LookupTableConfig.TableType.DATASET);      Lookup<String> lookupTable=context.provide(lookupTableName,tableConfig.getDatasetProperties());      lookupTableCache.put(lookupTableName,lookupTable);    }  }}  }
class C{  private void register(String key,Object value) throws SAXException {  if (key != null) {    if (_mapping.get(key) != null || (_handler != null && _handler.hasVariable(key))) {      throw new SAXException("ID " + key + " is already defined");    }    if (_handler != null) {      _handler.setVariable(key,value);    } else {      _mapping.put(key,value);    }  }}  }
class C{  public void init(){  Debug.message("eomg","EditableOMLine.init()");  setStateMachine(new LineStateMachine(this));  gPoints=new GrabPoint[3];}  }
class C{  public char[][] findParameterNames(){  if (!this.parameterNamesComputed) {    this.parameterNamesComputed=true;switch (this.completionKind) {case ANONYMOUS_CLASS_DECLARATION:      try {        this.parameterNames=findMethodParameterNames(this.declarationPackageName,this.declarationTypeName,CharOperation.lastSegment(this.declarationTypeName,'.'),Signature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));      } catch (      IllegalArgumentException e) {        if (this.parameterTypeNames != null) {          this.parameterNames=CompletionEngine.createDefaultParameterNames(this.parameterTypeNames.length);        } else {          this.parameterNames=null;        }      }    break;case ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:  try {    this.parameterNames=findConstructorParameterNames(this.declarationPackageName,this.declarationTypeName,CharOperation.lastSegment(this.declarationTypeName,'.'),Signature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));  } catch (  IllegalArgumentException e) {    if (this.parameterTypeNames != null) {      this.parameterNames=CompletionEngine.createDefaultParameterNames(this.parameterTypeNames.length);    } else {      this.parameterNames=null;    }  }break;case METHOD_REF:case METHOD_REF_WITH_CASTED_RECEIVER:try {this.parameterNames=findMethodParameterNames(this.declarationPackageName,this.declarationTypeName,this.name,Signature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));} catch (IllegalArgumentException e) {if (this.parameterTypeNames != null) {  this.parameterNames=CompletionEngine.createDefaultParameterNames(this.parameterTypeNames.length);} else {  this.parameterNames=null;}}break;case CONSTRUCTOR_INVOCATION:try {this.parameterNames=findConstructorParameterNames(this.declarationPackageName,this.declarationTypeName,this.name,Signature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));} catch (IllegalArgumentException e) {if (this.parameterTypeNames != null) {this.parameterNames=CompletionEngine.createDefaultParameterNames(this.parameterTypeNames.length);} else {this.parameterNames=null;}}break;case METHOD_DECLARATION:try {this.parameterNames=findMethodParameterNames(this.declarationPackageName,this.declarationTypeName,this.name,Signature.getParameterTypes(this.originalSignature == null ? this.signature : this.originalSignature));} catch (IllegalArgumentException e) {if (this.parameterTypeNames != null) {this.parameterNames=CompletionEngine.createDefaultParameterNames(this.parameterTypeNames.length);} else {this.parameterNames=null;}}if (this.parameterNames != null) {this.updateCompletion=true;}break;}}return this.parameterNames;}  }
class C{  static MediaType createApplicationType(String subtype){  return create(APPLICATION_TYPE,subtype);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void forwardEvent(EventType eventType){  dispatch(eventType);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TIntHashSetDecorator(TIntHashSet set){  super();  this._set=set;}  }
class C{  public TitlePaneMenuButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  public EliasFanoPrefixSumLongBigList(final LongIterable elements){  super(new CumulativeLongIterable(elements));  this.upperBits=selectUpper.bitVector();}  }
class C{  @Override public void addToSelection(Figure figure){  if (DEBUG) {    System.out.println("DefaultDrawingView" + ".addToSelection(" + figure + ")");  }  Set<Figure> oldSelection=new HashSet<Figure>(selectedFigures);  if (selectedFigures.add(figure)) {    figure.addFigureListener(handleInvalidator);    Set<Figure> newSelection=new HashSet<Figure>(selectedFigures);    Rectangle invalidatedArea=null;    if (handlesAreValid && getEditor() != null) {      for (      Handle h : figure.createHandles(detailLevel)) {        h.setView(this);        selectionHandles.add(h);        h.addHandleListener(eventHandler);        if (invalidatedArea == null) {          invalidatedArea=h.getDrawingArea();        } else {          invalidatedArea.add(h.getDrawingArea());        }      }    }    fireSelectionChanged(oldSelection,newSelection);    if (invalidatedArea != null) {      repaint(invalidatedArea);    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void readColumns(DatabaseMetaData meta) throws SQLException {  ResultSet rs=meta.getColumns(null,schema.name,name,null);  ArrayList<DbColumn> list=New.arrayList();  while (rs.next()) {    DbColumn column=DbColumn.getColumn(schema.getContents(),rs);    list.add(column);  }  rs.close();  columns=new DbColumn[list.size()];  list.toArray(columns);}  }
class C{  private static Context context(){  return AppActivity.context();}  }
class C{  public static LatLon limitCenterLocation(Angle latitude,Angle longitude,OrbitViewLimits viewLimits){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Sector limits=viewLimits.getCenterLocationLimits();  Angle newLatitude=latitude;  Angle newLongitude=longitude;  if (latitude.compareTo(limits.getMinLatitude()) < 0) {    newLatitude=limits.getMinLatitude();  } else   if (latitude.compareTo(limits.getMaxLatitude()) > 0) {    newLatitude=limits.getMaxLatitude();  }  if (longitude.compareTo(limits.getMinLongitude()) < 0) {    newLongitude=limits.getMinLongitude();  } else   if (longitude.compareTo(limits.getMaxLongitude()) > 0) {    newLongitude=limits.getMaxLongitude();  }  return new LatLon(newLatitude,newLongitude);}  }
class C{  public RomanianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  void parseArgs(String[] args){  int idx;  for (idx=0; idx < args.length; idx++) {    String arg=args[idx];    if (arg.equals("--") || !arg.startsWith("--")) {      break;    } else     if (arg.startsWith("--format=")) {      mOutputFormat=arg.substring(arg.indexOf('=') + 1);      if (!mOutputFormat.equals("brief") && !mOutputFormat.equals("xml")) {        System.err.println("Unknown format '" + mOutputFormat + "'");        throw new UsageException();      }    } else     if (arg.equals("--just-classes")) {      mJustClasses=true;    } else {      System.err.println("Unknown option '" + arg + "'");      throw new UsageException();    }  }  int fileCount=args.length - idx;  if (fileCount == 0) {    throw new UsageException();  }  mInputFileNames=new String[fileCount];  System.arraycopy(args,idx,mInputFileNames,0,fileCount);}  }
class C{  public boolean isEscaping(){  return escape != null;}  }
class C{  @Override public void updateTextCycle(Cycle cycle){  planAdapter.setTextCycle(cycle);}  }
class C{  public long position(){  return _position + _writeLength;}  }
class C{  public User discoverUserByScreenName(String screenName){  User user;  user=Optional.of(twitter.userOperations().getUserProfile(screenName)).map(null).get();  user.setPagerank(0f);  user.setImported(true);  user=getUser(user);  return user;}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private void addColumnsOutTo(int col){  for (int i=dataSet.getNumColumns() + getNumLeadingCols(); i <= col; i++) {    ContinuousVariable var=new ContinuousVariable("");    dataSet.addVariable(var);    System.out.println("Adding " + var + " col "+ dataSet.getColumn(var));  }  pcs.firePropertyChange("modelChanged",null,null);}  }
class C{  public Position(Position position){  if (position == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Position","constructor","missingPosition"));  }  this.latitude=position.latitude;  this.longitude=position.longitude;  this.altitude=position.altitude;}  }
class C{  public void release(){  dispose();}  }
class C{  public static int skipAs(String stmt,int offset){  offset=ParseUtil.move(stmt,offset,0);  if (stmt.length() > offset + "AS".length() && (stmt.charAt(offset) == 'A' || stmt.charAt(offset) == 'a') && (stmt.charAt(offset + 1) == 'S' || stmt.charAt(offset + 1) == 's') && (stmt.charAt(offset + 2) == ' ' || stmt.charAt(offset + 2) == '\r' || stmt.charAt(offset + 2) == '\n' || stmt.charAt(offset + 2) == '\t' || stmt.charAt(offset + 2) == '/' || stmt.charAt(offset + 2) == '#')) {    offset=ParseUtil.move(stmt,offset + 2,0);  }  return offset;}  }
class C{  public Boolean isDisableAcceleration(){  return disableAcceleration;}  }
class C{  public void writeLong(long v) throws IOException {  dataOutput.writeLong(v);  offset+=8;}  }
class C{  protected void sequence_AnnotatedScriptElement_ExportClause_ExportDeclarationImpl_ExportFromClause(ISerializationContext context,ExportDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Enclosed(Class<?> klass,RunnerBuilder builder) throws Throwable {  super(builder,klass,filterAbstractClasses(klass.getClasses()));}  }
class C{  public void validateSubPartitionValues(List<String> subPartitionValues) throws IllegalArgumentException {  int subPartitionValuesCount=CollectionUtils.size(subPartitionValues);  Assert.isTrue(subPartitionValuesCount <= BusinessObjectDataEntity.MAX_SUBPARTITIONS,String.format("Exceeded maximum number of allowed subpartitions: %d.",BusinessObjectDataEntity.MAX_SUBPARTITIONS));  for (int i=0; i < subPartitionValuesCount; i++) {    subPartitionValues.set(i,alternateKeyHelper.validateStringParameter("subpartition value",subPartitionValues.get(i)));  }}  }
class C{  public Body html(String html){  this.html=html;  return this;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=stream.readFields();  this.symbols=(DecimalFormatSymbols)fields.get("symbols",null);  initNative("");  ndf.setPositivePrefix((String)fields.get("positivePrefix",""));  ndf.setPositiveSuffix((String)fields.get("positiveSuffix",""));  ndf.setNegativePrefix((String)fields.get("negativePrefix","-"));  ndf.setNegativeSuffix((String)fields.get("negativeSuffix",""));  ndf.setMultiplier(fields.get("multiplier",1));  ndf.setGroupingSize(fields.get("groupingSize",(byte)3));  ndf.setGroupingUsed(fields.get("groupingUsed",true));  ndf.setDecimalSeparatorAlwaysShown(fields.get("decimalSeparatorAlwaysShown",false));  setRoundingMode((RoundingMode)fields.get("roundingMode",RoundingMode.HALF_EVEN));  final int maximumIntegerDigits=fields.get("maximumIntegerDigits",309);  final int minimumIntegerDigits=fields.get("minimumIntegerDigits",309);  final int maximumFractionDigits=fields.get("maximumFractionDigits",340);  final int minimumFractionDigits=fields.get("minimumFractionDigits",340);  ndf.setMaximumIntegerDigits(maximumIntegerDigits);  super.setMaximumIntegerDigits(ndf.getMaximumIntegerDigits());  setMinimumIntegerDigits(minimumIntegerDigits);  setMinimumFractionDigits(minimumFractionDigits);  setMaximumFractionDigits(maximumFractionDigits);  setParseBigDecimal(fields.get("parseBigDecimal",false));  if (fields.get("serialVersionOnStream",0) < 3) {    setMaximumIntegerDigits(super.getMaximumIntegerDigits());    setMinimumIntegerDigits(super.getMinimumIntegerDigits());    setMaximumFractionDigits(super.getMaximumFractionDigits());    setMinimumFractionDigits(super.getMinimumFractionDigits());  }}  }
class C{  public static byte[] fetchClass(String host,int port,String directory,String classname) throws IOException {  byte[] b;  URLConnection con=fetchClass0(host,port,directory + classname.replace('.','/') + ".class");  int size=con.getContentLength();  InputStream s=con.getInputStream();  try {    if (size <= 0)     b=ClassPoolTail.readStream(s); else {      b=new byte[size];      int len=0;      do {        int n=s.read(b,len,size - len);        if (n < 0)         throw new IOException("the stream was closed: " + classname);        len+=n;      } while (len < size);    }  }  finally {    s.close();  }  return b;}  }
class C{  public static boolean instanceOf(Object obj,String typeName){  return instanceOf(obj,typeName,null);}  }
class C{  public static boolean isSingleBlock(Hop hop,boolean cols){  if (DMLScript.rtplatform == RUNTIME_PLATFORM.SINGLE_NODE) {    return true;  }  return cols ? (hop.getDim2() > 0 && hop.getDim2() <= hop.getColsInBlock()) : (hop.getDim1() > 0 && hop.getDim1() <= hop.getRowsInBlock());}  }
class C{  @Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){  if (ofmRcIn == null)   return;  OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn);  flowQueue.offer(myOfmRc,priority);  ctrFlowReconcileRequest.increment();  Date currTime=new Date();  long delay=0;  if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) {    delay=0;  } else {    delay=FLOW_RECONCILE_DELAY_MILLISEC;  }  flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS);  if (logger.isTraceEnabled()) {    logger.trace("Reconciling flow: {}, total: {}",myOfmRc.toString(),flowQueue.size());  }}  }
class C{  public static void sortFields(FieldBinding[] sortedFields,int left,int right){  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);}  }
class C{  public boolean isSection(String key){  Object value=this.get(key);  return value instanceof ConfigSection;}  }
class C{  public static List<Class<?>> convertClassNamesToClasses(final List<String> classNames){  if (classNames == null) {    return null;  }  List<Class<?>> classes=new ArrayList<Class<?>>(classNames.size());  for (Iterator<String> it=classNames.iterator(); it.hasNext(); ) {    String className=(String)it.next();    try {      classes.add(Class.forName(className));    } catch (    Exception ex) {      classes.add(null);    }  }  return classes;}  }
class C{  public void init(Layer[] layers){  init(Arrays.asList(layers));}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public boolean match(FieldDeclaration node,Object other){  if (!(other instanceof FieldDeclaration)) {    return false;  }  FieldDeclaration o=(FieldDeclaration)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (node.getModifiers() != o.getModifiers()) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.modifiers(),o.modifiers())) {      return false;    }  }  return safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeListMatch(node.fragments(),o.fragments());}  }
class C{  void onPermissionRequestDenied(Collection<String> permissions){  updatePermissionsAsDenied(permissions);}  }
class C{  public LinearKernel(){  this(1);}  }
class C{  private void filterForWord(List<Offer> offers,String word){  Iterator<Offer> it=offers.iterator();  while (it.hasNext()) {    Offer o=it.next();    if (o.hasItem()) {      Item item=o.getItem();      if (!(item.getName().indexOf(word) != -1 || word.equals(item.getItemClass()))) {        it.remove();      }    }  }}  }
class C{  public static Collection<File> findPaths(final DigestURL url,final String ext,State state){  Collection<File> result=new ArrayList<>();  if (state == State.INVENTORY || state == State.ANY)   result.addAll(inventory.findPaths(url,ext));  if (state == State.ARCHIVE || state == State.ANY)   result.addAll(archive.findPaths(url,ext));  return result;}  }
class C{  public void forEachAdd(Allocation ain,Allocation aout){  blend(34,ain,aout);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.779 -0500",hash_original_method="DED91A2285B6A66DFD74CDE391880914",hash_generated_method="15DF850964FF7508BC7301DC4A4331A2") public void trace(Object message){  log(Level.FINEST,String.valueOf(message),null);}  }
class C{  private void initialize(){  this.setText(Constant.messages.getString("copy.copy.popup"));}  }
class C{  private EmrClusterDefinitionCreateRequest createEmrClusterDefinitionCreateRequest(String namespace,String emrClusterDefinitionName,EmrClusterDefinition emrClusterDefinitionConfiguration){  EmrClusterDefinitionCreateRequest request=new EmrClusterDefinitionCreateRequest();  request.setEmrClusterDefinitionKey(new EmrClusterDefinitionKey(namespace,emrClusterDefinitionName));  request.setEmrClusterDefinition(emrClusterDefinitionConfiguration);  return request;}  }
class C{  private Properties loadPropertiesFromInternalResource(String filePath,Properties fallback){  Properties properties=new Properties(fallback);  try {    InputStream propertyFileStream=LivingDoc.class.getResourceAsStream(filePath);    properties.load(propertyFileStream);    return properties;  } catch (  NullPointerException e) {    return fallback;  }catch (  FileNotFoundException e) {    return fallback;  }catch (  IOException e) {    return fallback;  }}  }
class C{  @Override protected void determineFormat(){  int numClusters;  ArrayList<Attribute> hv;  Attribute predictedCluster;  ArrayList<String> clustVals;  int i;  numClusters=m_Evaluation.getNumClusters();  hv=new ArrayList<Attribute>();  clustVals=new ArrayList<String>();  for (i=0; i < numClusters; i++) {    clustVals.add("cluster" + i);  }  predictedCluster=new Attribute("Cluster",clustVals);  for (i=0; i < m_Instances.numAttributes(); i++) {    hv.add((Attribute)m_Instances.attribute(i).copy());  }  hv.add(predictedCluster);  m_PlotInstances=new Instances(m_Instances.relationName() + "_clustered",hv,m_Instances.numInstances());}  }
class C{  public void remove(MetricExec metricExec){  for (  Map.Entry<Long,List<MetricExec>> entry : timeHandleMap.entrySet()) {    entry.getValue().remove(metricExec);  }}  }
class C{  public boolean isIncludeNullsElementValue(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsElementValue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onPackageAdded(String packageName,int uid){}  }
class C{  public void clear(){  if (encryptedPrivateBytes != null) {    Arrays.fill(encryptedPrivateBytes,(byte)0);  }  if (initialisationVector != null) {    Arrays.fill(initialisationVector,(byte)0);  }}  }
class C{  private static void correctParameterData(boolean[] parameterData,boolean compact) throws NotFoundException {  int numCodewords;  int numDataCodewords;  if (compact) {    numCodewords=7;    numDataCodewords=2;  } else {    numCodewords=10;    numDataCodewords=4;  }  int numECCodewords=numCodewords - numDataCodewords;  int[] parameterWords=new int[numCodewords];  int codewordSize=4;  for (int i=0; i < numCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      if (parameterData[codewordSize * i + codewordSize - j]) {        parameterWords[i]+=flag;      }      flag<<=1;    }  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(GenericGF.AZTEC_PARAM);    rsDecoder.decode(parameterWords,numECCodewords);  } catch (  ReedSolomonException rse) {    throw NotFoundException.getNotFoundInstance();  }  for (int i=0; i < numDataCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      parameterData[i * codewordSize + codewordSize - j]=(parameterWords[i] & flag) == flag;      flag<<=1;    }  }}  }
class C{  public boolean containsKey(Object key){  int h=hash(key.hashCode());  return segFor(h).containsKey(key,h);}  }
class C{  public void interpretLine(){  String text=getText();  String inputString=text.substring(text.lastIndexOf(GlobalValues.groovyLabPromptString) + 2,text.length());  inputString=inputString.trim();  if (inputString.equals("quit") || inputString.equals("exit")) {    GlobalValues.gLabMainFrame.closeGUI();  }  if (!inputString.equals("")) {    if (inputString.trim().length() > 0)     previousCommands.addElement(inputString);    GlobalValues.gLabMainFrame.interpretLine(inputString);    commandNo=previousCommands.size();  }}  }
class C{  public boolean isProductBound(final String productName){  return productsBound.get(productName);}  }
class C{  public static String retrieveErrorString(String defaultMsg){  ValueNamePair vp=retrieveError();  if (vp == null)   return defaultMsg;  return vp.getName();}  }
class C{  public static boolean deleteDir(File dir){  if (dir.isDirectory()) {    String[] children=dir.list();    for (int i=0; i < children.length; i++) {      boolean success=deleteDir(new File(dir,children[i]));      if (!success) {        LOG.error("Error trying to delete file: " + dir.getAbsolutePath());      }    }  }  return dir.delete();}  }
class C{  public boolean isDisliked(String ref){  return getLikingImpl(ref,PREF_DISLIKED_ENTRIES);}  }
class C{  private void _set_icon(final InstalledApp app,Context ctx){  new IconSetter(ctx,app,_app_icon).execute();}  }
class C{  @Bean public UserDetailsService userDetailsService(){  return combinedService_;}  }
class C{  public static PatternOrExpr or(PatternExpr first,PatternExpr second,PatternExpr... more){  return new PatternOrExpr(first,second,more);}  }
class C{  public void initialize(CordovaInterface cordova,CordovaWebView webView){  super.initialize(cordova,webView);  Device.uuid=getUuid();}  }
class C{  @Override public boolean nullPlusNonNullIsNull(){  debugCodeCall("nullPlusNonNullIsNull");  return true;}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("cubic iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=(float)cubic.getX1();    coords[1]=(float)cubic.getY1();    type=SEG_MOVETO;  } else {    coords[0]=(float)cubic.getCtrlX1();    coords[1]=(float)cubic.getCtrlY1();    coords[2]=(float)cubic.getCtrlX2();    coords[3]=(float)cubic.getCtrlY2();    coords[4]=(float)cubic.getX2();    coords[5]=(float)cubic.getY2();    type=SEG_CUBICTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 3);  }  return type;}  }
class C{  private void transformMethod(MethodNode mn){  logger.info("Transforming method " + mn.name + mn.desc);  if ((mn.access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT)   return;  String origDesc=getOriginalDesc(className,mn.name,mn.desc);  logger.info("Analyzing " + mn.name + " for TT, signature "+ origDesc+ "/"+ mn.desc);  try {    Analyzer a=new Analyzer(new BooleanValueInterpreter(origDesc,(mn.access & Opcodes.ACC_STATIC) == Opcodes.ACC_STATIC));    a.analyze(className,mn);    currentFrames=a.getFrames();  } catch (  Exception e) {    logger.info("1. Error during analysis: " + e);  }  generateCDG(mn);  currentMethodNode=mn;  new ImplicitElseTransformer(this).transform(mn);  try {    Analyzer a=new Analyzer(new BooleanValueInterpreter(origDesc,(mn.access & Opcodes.ACC_STATIC) == Opcodes.ACC_STATIC));    a.analyze(className,mn);    currentFrames=a.getFrames();  } catch (  Exception e) {    logger.info("2. Error during analysis: " + e);  }  logger.info("Transforming Boolean bitwise operators");  new BitwiseOperatorTransformer(this).transform(mn);  logger.info("Transforming Boolean IFs");  new BooleanIfTransformer(this).transform(mn);  logger.info("Transforming Boolean definitions");  new BooleanDefinitionTransformer(this).transform(mn);  logger.info("Transforming instanceof");  new InstanceOfTransformer().transform(mn);  new BooleanCallsTransformer(this).transform(mn);  logger.info("Transforming Boolean distances");  new BooleanDistanceTransformer(this).transform(mn);  mn.maxStack+=3;  new BooleanArrayTransformer().transform(mn);  new BooleanArrayIndexTransformer(getArrayFrames(mn)).transform(mn);  logger.info("Transforming Boolean return values");  new BooleanReturnTransformer(this).transform(mn);  mn.maxStack+=1;}  }
class C{  protected Border createNonRolloverBorder(){  Object border=UIManager.get("ToolBar.nonrolloverBorder");  if (border != null) {    return (Border)border;  }  return new EmptyBorder(0,0,0,0);}  }
class C{  public boolean execute(INode n){  if (!isValid(n)) {    return false;  }  FreeCellNode state=(FreeCellNode)n;  state.removeFree(card);  state.insertFoundation(card);  return true;}  }
class C{  public boolean isAbsPath(){  return _is_abs_path;}  }
class C{  public ReadRawModifiedDetails clone(){  ReadRawModifiedDetails result=new ReadRawModifiedDetails();  result.IsReadModified=IsReadModified;  result.StartTime=StartTime;  result.EndTime=EndTime;  result.NumValuesPerNode=NumValuesPerNode;  result.ReturnBounds=ReturnBounds;  return result;}  }
class C{  @Override public <R>Stream<R> map(Function<? super Map.Entry<K,V>,? extends R> mapper){  return inner.map(mapper);}  }
class C{  protected TypedPosition findClosestPosition(int offset){  try {    int index=fDocument.computeIndexInCategory(fPositionCategory,offset);    Position[] category=getPositions();    if (category.length == 0)     return null;    if (index < category.length) {      if (offset == category[index].offset)       return (TypedPosition)category[index];    }    if (index > 0)     index--;    return (TypedPosition)category[index];  } catch (  BadPositionCategoryException x) {  }catch (  BadLocationException x) {  }  return null;}  }
class C{  public static boolean reflectionEquals(Object lhs,Object rhs,Collection excludeFields){  return reflectionEquals(lhs,rhs,ReflectionToStringBuilder.toNoNullStringArray(excludeFields));}  }
class C{  public void zoomIn(){  this.scale*=0.5;}  }
class C{  public TransformerImpl(StylesheetRoot stylesheet){  m_optimizer=stylesheet.getOptimizer();  m_incremental=stylesheet.getIncremental();  m_source_location=stylesheet.getSource_location();  setStylesheet(stylesheet);  XPathContext xPath=new XPathContext(this);  xPath.setIncremental(m_incremental);  xPath.getDTMManager().setIncremental(m_incremental);  xPath.setSource_location(m_source_location);  xPath.getDTMManager().setSource_location(m_source_location);  if (stylesheet.isSecureProcessing())   xPath.setSecureProcessing(true);  setXPathContext(xPath);  getXPathContext().setNamespaceContext(stylesheet);}  }
class C{  private void reportAddAttributeError(int errorCode,CSSElement selector,String attributeName,String value,HTMLComponent htmlC){  if (errorCode != -1) {    if (errorCode == CSSParserCallback.ERROR_CSS_ATTRIBUTE_NOT_SUPPORTED) {      notifyError(errorCode,selector.getTagName(),attributeName,value,"CSS Attribute '" + attributeName + "' (Appeared in selector '"+ selector.getTagName()+ "') is not supported in WCSS.");    } else     if (errorCode == CSSParserCallback.ERROR_CSS_ATTIBUTE_VALUE_INVALID) {      notifyError(errorCode,selector.getTagName(),attributeName,value,"CSS Attribute '" + attributeName + "' (Appeared in selector '"+ selector.getTagName()+ "') has an invalid value ("+ value+ ")");    }  }}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.<K,V>create());}  }
class C{  public synchronized static void initialize(Connection conn) throws SQLException {  if (logHadoopIdPatterns != null && logLineagePatterns != null) {    return;  }  loadLineagePatterns(conn);  loadHadoopIdPatterns(conn);}  }
class C{  public static double mean(double[] a){  if (a.length == 0)   return Double.NaN;  double sum=sum(a);  return sum / a.length;}  }
class C{  public void test_DELETE_accessPath_delete_NothingMatched() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,new URIImpl("http://xmlns.com/foaf/0.1/XXX"));  assertEquals(0,mutationResult);}  }
class C{  public boolean scanIsEmpty(){  final int count=numWords;  for (int i=0; i < count; i++) {    if (bits[i] != 0)     return false;  }  return true;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static Object findValueOfType(Collection<?> collection,Class<?>[] types){  if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {    return null;  }  for (  Class<?> type : types) {    Object value=findValueOfType(collection,type);    if (value != null) {      return value;    }  }  return null;}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  LongEntry<VALUE> tab[]=table;  for (int i=0; i < tab.length; i++)   for (LongEntry<VALUE> e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public static CommonTransitions createTimeline(Image animation){  CommonTransitions t=new CommonTransitions(TYPE_TIMELINE);  t.timeline=animation;  t.transitionType=TYPE_TIMELINE;  return t;}  }
class C{  @Override public String toString(){  if (this.getData() == null)   return "";  return new String(this.getData());}  }
class C{  public PaymentInfoMagcard(String sHolderName,String sCardNumber,String sExpirationDate,String track1,String track2,String track3,String sTransactionID,double dTotal){  m_sHolderName=sHolderName;  m_sCardNumber=sCardNumber;  m_sExpirationDate=sExpirationDate;  this.track1=track1;  this.track2=track2;  this.track3=track3;  m_sTransactionID=sTransactionID;  m_dTotal=dTotal;  m_sAuthorization=null;  m_sErrorMessage=null;  m_sReturnMessage=null;}  }
class C{  public int capacity(){  return storage.length;}  }
class C{  private byte skipEntityForward(){  while (charIndex < length && (lastChar=text.charAt(charIndex++)) != ';') {  }  return Character.DIRECTIONALITY_WHITESPACE;}  }
class C{  private void Legends(List<String> legends_list,List<Integer> color_code_list){  textPaint.setColor(Color.BLACK);  textPaint.setTextSize(20f);  int left=(int)(graphwidth * 0.1);  for (int i=0; i < legends_list.size(); i++) {    String label=legends_list.get(i);    float text_width=textPaint.measureText(label,0,label.length());    int color=color_code_list.get(i);    if (!((graphwidth - legendLeft) > (text_width + 60))) {      legendTop-=60;      legendLeft=left;    }    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);    legendLeft+=((int)text_width + 60);  }}  }
class C{  protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);  CategoryDataset dataset=plot.getDataset(rendererIndex);  if (dataset != null) {    int columns=dataset.getColumnCount();    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();    double space=0.0;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumBarWidth();    double categoryMargin=0.0;    double currentItemMargin=0.0;    if (columns > 1) {      categoryMargin=domainAxis.getCategoryMargin();    }    if (rows > 1) {      currentItemMargin=getItemMargin();    }    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);    if ((rows * columns) > 0) {      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }}  }
class C{  public void inject(DeserializationContext context,Object beanInstance) throws IOException {  set(beanInstance,findInjectableValue(context,beanInstance));}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof DistributionPoint == false) {    return false;  }  DistributionPoint other=(DistributionPoint)obj;  boolean equal=Objects.equals(this.fullName,other.fullName) && Objects.equals(this.relativeName,other.relativeName) && Objects.equals(this.crlIssuer,other.crlIssuer)&& Arrays.equals(this.reasonFlags,other.reasonFlags);  return equal;}  }
class C{  public boolean isLookAtValid(){  return mLookAtValid;}  }
class C{  public void test_GET_accessPath_delete_o_URI() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,null,new URIImpl("http://xmlns.com/foaf/0.1/Person")));  assertEquals(3,result);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.888 -0500",hash_original_method="B329D182B18083287B5598787B9BCF42",hash_generated_method="A7F986AAFF1A023FCBE2AE3AEBD1EFF0") public ObjectStreamField(String name,Class<?> cl,boolean unshared){  if (name == null || cl == null) {    throw new NullPointerException();  }  this.name=name;  this.type=(cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);  this.unshared=unshared;}  }
class C{  @Override public NormalCard title(@NotNull String title){  mTitle=title;  return this;}  }
class C{  public static Notification error(Throwable exception){  return error("Exception",exception.getMessage(),exception,false);}  }
class C{  public boolean tick(){  if (candidateQueue.isEmpty())   return false;  int remainingSwaps=BLOCK_SWAP_RATE;  while (remainingSwaps > 0 && !candidateQueue.isEmpty()) {    SwapCandidate cand=candidateQueue.poll();    if (completedCoords.contains(cand.coordinates))     continue;    if (cand.range <= 0)     continue;    ToolCommons.removeBlockWithDrops(player,truncator,world,cand.coordinates,origin,null,ToolCommons.materialsAxe,EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH,truncator) > 0,EnchantmentHelper.getEnchantmentLevel(Enchantments.FORTUNE,truncator),0F,false,treatLeavesSpecial);    remainingSwaps--;    completedCoords.add(cand.coordinates);    for (    BlockPos adj : adjacent(cand.coordinates)) {      Block block=world.getBlockState(adj).getBlock();      boolean isWood=block.isWood(world,adj);      boolean isLeaf=block.isLeaves(world.getBlockState(adj),world,adj);      if (!isWood && !isLeaf)       continue;      int newRange=treatLeavesSpecial && isLeaf ? Math.min(LEAF_BLOCK_RANGE,cand.range - 1) : cand.range - 1;      candidateQueue.offer(new SwapCandidate(adj,newRange));    }  }  return true;}  }
class C{  private static <T>void batchFastListCollectIf(T[] array,int start,int end,FastListCollectIfProcedure<T,?> castProcedure){  for (int i=start; i < end; i++) {    castProcedure.value(array[i]);  }}  }
class C{  public void resetFlags(){  flappingStarted=false;  aboveThresholdFlappingStopped=false;  belowThresholdFlappingStopped=false;  aboveThresholdNotFlapping=false;  belowThresholdNotFlapping=false;}  }
class C{  protected SolrHttpRequestRetryHandler(final int retryCount,final Collection<Class<? extends IOException>> clazzes){  super();  this.retryCount=retryCount;  this.nonRetriableClasses=new HashSet<Class<? extends IOException>>();  for (  final Class<? extends IOException> clazz : clazzes) {    this.nonRetriableClasses.add(clazz);  }}  }
class C{  public OIDCException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @Override public boolean inSameL2Domain(DatapathId switch1,DatapathId switch2){  return inSameL2Domain(switch1,switch2,true);}  }
class C{  private void processExpressions(){  boolean notificationRequired=false;  for (  Map.Entry<String,Script> entry : definitions.entrySet()) {    String variable=entry.getKey();    Script script=entry.getValue();    Object value=script.run();    if (putInternal(variable,value)) {      notificationRequired=true;    }  }  if (notificationRequired) {    PuzzleEventDispatcher.get().notify(this);  }}  }
class C{  public JPasswordQualityField(int columns){  initComponents(columns);}  }
class C{  private void dynInit(){  String[] names=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();  Arrays.sort(names);  for (int i=0; i < names.length; i++)   fontName.addItem(names[i]);  fontName.addActionListener(this);  for (int i=6; i < 32; i++)   fontSize.addItem(String.valueOf(i));  fontSize.addActionListener(this);  for (int i=0; i < s_list.length; i++)   fontStyle.addItem(s_list[i]);  fontStyle.addActionListener(this);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.147 -0500",hash_original_method="452B2923DC2D49E8C5C850D6FAC160F0",hash_generated_method="F059B6B18159C31869399583D28BD4E6") public ServerHelloDone(){}  }
class C{  static WindowsFileAttributes fromFindData(long address){  int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES);  long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME);  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME);  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME);  long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0;  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);}  }
class C{  public void addActor(TvShowActor obj){  if (StringUtils.isBlank(obj.getEntityRoot())) {    obj.setEntityRoot(getPathNIO().toString());  }  actors.add(obj);  firePropertyChange(ACTORS,null,this.getActors());}  }
class C{  private static int resolvePackageToCompare(List<String> superClassList){  for (int i=0; i < ACTIVITY_PACKAGE_NAMES.size(); i++) {    if (superClassList.contains(ACTIVITY_PACKAGE_NAMES.get(i)))     return ACTIVITY;  }  for (int i=0; i < FRAGMENT_PACKAGE_NAMES.size(); i++) {    if (superClassList.contains(FRAGMENT_PACKAGE_NAMES.get(i)))     return FRAGMENT;  }  return -1;}  }
class C{  public void cancel(){}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.MODEL__PRAGMAS:    return ((InternalEList<?>)getPragmas()).basicRemove(otherEnd,msgs);case GamlPackage.MODEL__IMPORTS:  return ((InternalEList<?>)getImports()).basicRemove(otherEnd,msgs);case GamlPackage.MODEL__BLOCK:return basicSetBlock(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deleteUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  public StringIdItem(CstString value){  if (value == null) {    throw new NullPointerException("value == null");  }  this.value=value;  this.data=null;}  }
class C{  public void println(Object o,boolean line){  if (o == null) {    ps("null");    return;  }  if (o instanceof Object[]) {    print_array((Object[])o);    return;  }  if (o instanceof int[]) {    print_array((int[])o);  }  if (o instanceof String) {    ps((String)o,line);    return;  }  if (o instanceof Exception) {    ps(stack_to_string((Exception)o));    return;  }  if (o instanceof Vector) {    print_vector((Vector)o);    return;  }  if (o instanceof Hashtable) {    print_hashtable((Hashtable)o);    return;  }  if (o instanceof Date) {    print_date((Date)o);    return;  }  if (o instanceof Calendar) {    print_calendar((Calendar)o);    return;  }  ps(o.toString(),line);}  }
class C{  public void sendMessage(View view){  String message=mMessageET.getText().toString();  if (message.equals(""))   return;  mMessageET.setText("");  ChatMessage chatMsg=new ChatMessage(username,message,System.currentTimeMillis());  try {    JSONObject json=new JSONObject();    json.put(Constants.JSON_USER,chatMsg.getUsername());    json.put(Constants.JSON_MSG,chatMsg.getMessage());    json.put(Constants.JSON_TIME,chatMsg.getTimeStamp());    publish(Constants.JSON_GROUP,json);  } catch (  JSONException e) {    e.printStackTrace();  }  mChatAdapter.addMessage(chatMsg);}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public boolean configureSpliceTo(DefaultTrackOutput nextQueue){  if (spliceOutTimeUs != Long.MIN_VALUE) {    return true;  }  long firstPossibleSpliceTime;  if (rollingBuffer.peekSample(sampleInfoHolder)) {    firstPossibleSpliceTime=sampleInfoHolder.timeUs;  } else {    firstPossibleSpliceTime=lastReadTimeUs + 1;  }  RollingSampleBuffer nextRollingBuffer=nextQueue.rollingBuffer;  while (nextRollingBuffer.peekSample(sampleInfoHolder) && (sampleInfoHolder.timeUs < firstPossibleSpliceTime || !sampleInfoHolder.isSyncFrame())) {    nextRollingBuffer.skipSample();  }  if (nextRollingBuffer.peekSample(sampleInfoHolder)) {    spliceOutTimeUs=sampleInfoHolder.timeUs;    return true;  }  return false;}  }
class C{  private void applyToEnum(ClassVisitor visitor,Class<?> c){  Map<String,Set<Method>> overrideMethods=new HashMap<>();  for (  Object obj : c.getEnumConstants()) {    Enum<?> e=(Enum<?>)obj;    applyTo(visitor,e);    if (!e.getClass().equals(c)) {      for (      Method m : e.getClass().getDeclaredMethods()) {        Set<Method> methodSet=overrideMethods.get(m.getName());        if (methodSet == null) {          methodSet=new HashSet<>();        }        methodSet.add(m);        overrideMethods.put(m.getName(),methodSet);      }    }  }  List<Method> declaredMethodList=toSortedList(c.getDeclaredMethods(),new MethodComparator());  for (  Method m : declaredMethodList) {    if (predicate.isVisible(m)) {      if (!m.getName().equals("values") && !m.getName().equals("valueOf")) {        applyTo(visitor,m);      }    }  }  List<Method> methodList=toSortedList(c.getMethods(),new MethodComparator());  for (  Method m : methodList) {    if (predicate.isVisible(m)) {      Set<Method> methodSet=overrideMethods.get(m.getName());      if (methodSet != null) {        for (        Method method : methodSet) {          applyTo(visitor,method);        }      }    }  }}  }
class C{  public static synchronized BufferedImage loadBufferedJPEGImage(URL url){  BufferedImage image=null;  if (url != null) {    try {      image=ImageIO.read(url);    } catch (    Exception e) {      log.severe("URL: " + url + " - "+ e.getMessage());      image=null;    } finally {    }    if (image != null) {      log.config("Image type : " + image.getType());      if (image.getWidth() <= 0 || image.getHeight() <= 0) {        log.severe("URL: " + url + " =0");        image=null;      }    }  }  return image;}  }
class C{  public void addLineSet(MapElementState.Type type){}  }
class C{  public void addListener(String eventName,mxIEventListener listener){  eventSource.addListener(eventName,listener);}  }
class C{  public static FirewallRule jsonToFirewallRule(String fmJson) throws IOException {  FirewallRule rule=new FirewallRule();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals(""))     continue;    String tmp;    if (n == "ruleid") {      rule.ruleid=Integer.parseInt(jp.getText());    } else     if (n == "switchid") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("-1") == false) {        rule.dpid=HexString.toLong(tmp);        rule.wildcard_dpid=false;      }    } else     if (n == "src-inport") {      rule.in_port=Short.parseShort(jp.getText());      rule.wildcard_in_port=false;    } else     if (n == "src-mac") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("ANY") == false) {        rule.wildcard_dl_src=false;        rule.dl_src=Ethernet.toLong(Ethernet.toMACAddress(tmp));      }    } else     if (n == "dst-mac") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("ANY") == false) {        rule.wildcard_dl_dst=false;        rule.dl_dst=Ethernet.toLong(Ethernet.toMACAddress(tmp));      }    } else     if (n == "dl-type") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("ARP")) {        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_ARP;      }      if (tmp.equalsIgnoreCase("IPv4")) {        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_IPv4;      }    } else     if (n == "src-ip") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("ANY") == false) {        rule.wildcard_nw_src=false;        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_IPv4;        int[] cidr=IPCIDRToPrefixBits(tmp);        rule.nw_src_prefix=cidr[0];        rule.nw_src_maskbits=cidr[1];      }    } else     if (n == "dst-ip") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("ANY") == false) {        rule.wildcard_nw_dst=false;        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_IPv4;        int[] cidr=IPCIDRToPrefixBits(tmp);        rule.nw_dst_prefix=cidr[0];        rule.nw_dst_maskbits=cidr[1];      }    } else     if (n == "nw-proto") {      tmp=jp.getText();      if (tmp.equalsIgnoreCase("TCP")) {        rule.wildcard_nw_proto=false;        rule.nw_proto=IPv4.PROTOCOL_TCP;        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_IPv4;      } else       if (tmp.equalsIgnoreCase("UDP")) {        rule.wildcard_nw_proto=false;        rule.nw_proto=IPv4.PROTOCOL_UDP;        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_IPv4;      } else       if (tmp.equalsIgnoreCase("ICMP")) {        rule.wildcard_nw_proto=false;        rule.nw_proto=IPv4.PROTOCOL_ICMP;        rule.wildcard_dl_type=false;        rule.dl_type=Ethernet.TYPE_IPv4;      }    } else     if (n == "tp-src") {      rule.wildcard_tp_src=false;      rule.tp_src=Short.parseShort(jp.getText());    } else     if (n == "tp-dst") {      rule.wildcard_tp_dst=false;      rule.tp_dst=Short.parseShort(jp.getText());    } else     if (n == "priority") {      rule.priority=Integer.parseInt(jp.getText());    } else     if (n == "action") {      if (jp.getText().equalsIgnoreCase("allow") == true) {        rule.action=FirewallRule.FirewallAction.ALLOW;      } else       if (jp.getText().equalsIgnoreCase("deny") == true) {        rule.action=FirewallRule.FirewallAction.DENY;      }    }  }  return rule;}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuffer sb=new StringBuffer();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  @Override public FittingFunctionResult eval(double x,double[] params){  int len=params.length;  assert (len % 3) == 0;  double y=0.0;  double[] gradients=new double[len];  for (int i=0; i < params.length; i+=3) {    double stdpar=(x - params[i]) / params[i + 1];    double e=Math.exp(-.5 * stdpar * stdpar);    double localy=params[i + 2] / (params[i + 1] * MathUtil.SQRTTWOPI) * e;    y+=localy;    gradients[i]=localy * stdpar;    gradients[i + 1]=(stdpar * stdpar - 1.0) * localy;    gradients[i + 2]=e / (params[i + 1] * MathUtil.SQRTTWOPI);  }  return new FittingFunctionResult(y,gradients);}  }
class C{  public TermVectorsRequest positions(boolean positions){  setFlag(Flag.Positions,positions);  return this;}  }
class C{  public BottomSheetMenuItem(Context context,int group,int id,int categoryOrder,int ordering,CharSequence title){  mContext=context;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;}  }
class C{  @LargeTest public void testMediaImageItem() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,5000,imageItemRenderingMode);  assertTrue("Media Image ID",mediaImageItem1.getId().equals("mediaImageItem1"));  assertTrue("Media IMage Filename",mediaImageItem1.getFilename().equals(imageItemFileName));  assertEquals("Media Image Rendering Mode",imageItemRenderingMode,mediaImageItem1.getRenderingMode());  assertEquals("Media Image Item Duration",mediaImageItem1.getDuration(),mediaImageItem1.getTimelineDuration());  assertEquals("Media Image Overlay",0,mediaImageItem1.getAllOverlays().size());  assertEquals("Media Image Effect",0,mediaImageItem1.getAllEffects().size());  assertNull("Media Image Begin transition",mediaImageItem1.getBeginTransition());  assertNull("Media Image End transition",mediaImageItem1.getEndTransition());  assertEquals("Media Image Scaled Height",MediaProperties.HEIGHT_720,mediaImageItem1.getScaledHeight());  assertEquals("Media Image Scaled Width",960,mediaImageItem1.getScaledWidth());  assertEquals("Media Image Aspect Ratio",MediaProperties.ASPECT_RATIO_4_3,mediaImageItem1.getAspectRatio());  assertNotNull("Media Image Thumbnail",mediaImageItem1.getThumbnail(960,MediaProperties.HEIGHT_720,2000));}  }
class C{  @Override public void upgrade(Path tempFolder,String initVersion){  if (stringVersionToInt(initVersion) < stringVersionToInt(currentInitVersion)) {    super.upgrade(tempFolder,initVersion);  }}  }
class C{  public final void testHashCode02(){  ECFieldF2m f=new ECFieldF2m(2000,new int[]{981,2,1});  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  private ElementTransform(ElementKey<?,?> key,Iterable<ElementTransform> parts){  super(parts);  Cardinality compositeCardinality=null;  Boolean compositeContentRequired=null;  ElementValidator compositeValidator=null;  Object compositeProperties=null;  VirtualElementHolder compositeVirtualElementHolder=null;  boolean compositeFlattened=false;  Map<QName,AttributeInfo> compositeAttributes=Maps.newLinkedHashMap();  Map<QName,ElementInfo> compositeElements=Maps.newLinkedHashMap();  Map<String,ElementKey<?,?>> compositeAdaptors=Maps.newLinkedHashMap();  for (  ElementTransform part : parts) {    if (part.cardinality != null) {      compositeCardinality=part.cardinality;    }    if (part.contentRequired != null) {      compositeContentRequired=part.contentRequired;    }    if (part.validator != null) {      compositeValidator=part.validator;    }    if (part.properties != null) {      compositeProperties=part.properties;    }    if (part.virtualElementHolder != null) {      compositeVirtualElementHolder=part.virtualElementHolder;    }    if (part.flattened) {      compositeFlattened=true;    }    for (    Map.Entry<QName,AttributeInfo> entry : part.attributes.entrySet()) {      QName attId=entry.getKey();      AttributeInfo attInfo=entry.getValue();      if (attInfo.action == Action.ADD) {        compositeAttributes.remove(attId);      }      compositeAttributes.put(attId,attInfo);    }    for (    Map.Entry<QName,ElementInfo> entry : part.elements.entrySet()) {      QName childId=entry.getKey();      ElementInfo childInfo=entry.getValue();      if (childInfo.action == Action.ADD) {        compositeElements.remove(childId);      }      compositeElements.put(childId,childInfo);    }    for (    Map.Entry<String,ElementKey<?,?>> entry : part.adaptations.entrySet()) {      ElementKey<?,?> adaptor=entry.getValue();      if (isValidAdaptation(key,adaptor)) {        compositeAdaptors.put(entry.getKey(),adaptor);      }    }  }  this.cardinality=compositeCardinality;  this.contentRequired=compositeContentRequired;  this.validator=compositeValidator;  this.properties=compositeProperties;  this.virtualElementHolder=compositeVirtualElementHolder;  this.flattened=compositeFlattened;  this.attributes=ImmutableMap.copyOf(compositeAttributes);  this.elements=ImmutableMap.copyOf(compositeElements);  this.adaptations=ImmutableMap.copyOf(compositeAdaptors);}  }
class C{  public static <T,R extends Collection<T>>R removeAllFrom(Iterable<? extends T> iterable,R targetCollection){  Iterate.removeAllIterable(iterable,targetCollection);  return targetCollection;}  }
class C{  public boolean isRtl(String str){  return mDefaultTextDirectionHeuristicCompat.isRtl(str,0,str.length());}  }
class C{  public String transformAllValuesTipText(){  return "Whether all nominal values are turned into new attributes, not only if there are more than 2.";}  }
class C{  public CommonStatsFlags all(){  flags=EnumSet.allOf(Flag.class);  types=null;  groups=null;  fieldDataFields=null;  completionDataFields=null;  return this;}  }
class C{  @Override public Document newDocument(){  return implementation.createDocument(null,null,null);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Timber.i("Starting CastingServer");  sServer=new BeamServer(NetworkUtils.getWifiIPAddress(),Constants.SERVER_PORT);  return START_STICKY;}  }
class C{  public UserSynchronizer(long sync_id) throws ODataException {  this(SYNC_SERVICE.getSynchronizerConfById(sync_id));}  }
class C{  public int falseNegatives(int classindex){  int fn=0;  for (int i=0; i < confusion.length; i++) {    if (i != classindex) {      fn+=confusion[i][classindex];    }  }  return fn;}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public static boolean validatePrincipals(PrincipalsToValidate principalsToValidate,StringBuilder error){  String endpoint=null;  principalsToValidate.setUsers(deDuplicate(principalsToValidate.getUsers()));  principalsToValidate.setGroups(deDuplicate(principalsToValidate.getGroups()));  principalsToValidate.setAltTenantUsers(deDuplicate(principalsToValidate.getAltTenantUsers()));  int attempts=0;  while (attempts < _MAX_VALIDATION_RETRIES) {    _log.debug("Validation attempt {}",++attempts);    AuthSvcInternalApiClientIterator authSvcClientItr=new AuthSvcInternalApiClientIterator(_authSvcEndPointLocator,_coordinator);    try {      if (authSvcClientItr.hasNext()) {        endpoint=authSvcClientItr.peek().toString();        _log.info("validatePrincipals(): {}",endpoint);        final ClientResponse response=authSvcClientItr.post(_URI_VALIDATE_PRINCIPALS,principalsToValidate);        final int status=response.getStatus();        _log.debug("Status: {}",status);        if (status == ClientResponse.Status.OK.getStatusCode()) {          return true;        } else         if (status == ClientResponse.Status.BAD_REQUEST.getStatusCode() || status == ClientResponse.Status.INTERNAL_SERVER_ERROR.getStatusCode()) {          ServiceErrorRestRep errorXml=response.getEntity(ServiceErrorRestRep.class);          error.append(errorXml.getDetailedMessage());          return false;        } else {          _log.info("Unexpected response code {}.",status);        }      }    } catch (    Exception e) {      _log.info("Exception connecting to {}. ",endpoint,e);      if (e.getMessage().contains("Read timed out")) {        throw InternalServerErrorException.internalServerErrors.authTimeout();      }    }  }  return false;}  }
class C{  public static void center(JFrame frame){  Dimension screen_size=Toolkit.getDefaultToolkit().getScreenSize();  frame.setLocation((int)((screen_size.getWidth() - frame.getWidth()) / 2),(int)((screen_size.getHeight() - frame.getHeight()) / 2));}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public ScopedClassPool create(ClassPool src,ScopedClassPoolRepository repository){  return new ScopedClassPool(null,src,repository,true);}  }
class C{  public void loadVersion1(File f) throws ConfigPersisterException {  try {    Props props=new Props(f);    _config=new Config();    String header=props.getProperty(Config.HEADER);    _config.setHeaderType(header == null || header.toLowerCase().equals("guihead.bin") ? Config.GUI_HEADER : Config.CONSOLE_HEADER);    _config.setJar(props.getFile(Config.JAR));    _config.setOutfile(props.getFile(Config.OUTFILE));    _config.setJre(new Jre());    _config.getJre().setPath(props.getProperty(Jre.PATH));    _config.getJre().setMinVersion(props.getProperty(Jre.MIN_VERSION));    _config.getJre().setMaxVersion(props.getProperty(Jre.MAX_VERSION));    String args=props.getProperty(Jre.ARGS);    if (args != null) {      List jreOptions=new ArrayList();      jreOptions.add(args);      _config.getJre().setOptions(jreOptions);    }    _config.setCmdLine(props.getProperty(Config.JAR_ARGS));    _config.setChdir("true".equals(props.getProperty(Config.CHDIR)) ? "." : null);    _config.setCustomProcName("true".equals(props.getProperty("setProcName")));    _config.setStayAlive("true".equals(props.getProperty(Config.STAY_ALIVE)));    _config.setErrTitle(props.getProperty(Config.ERR_TITLE));    _config.setIcon(props.getFile(Config.ICON));    File splashFile=props.getFile(Splash.SPLASH_FILE);    if (splashFile != null) {      _config.setSplash(new Splash());      _config.getSplash().setFile(splashFile);      String waitfor=props.getProperty("waitfor");      _config.getSplash().setWaitForWindow(waitfor != null && !waitfor.equals(""));      String splashTimeout=props.getProperty(Splash.TIMEOUT);      if (splashTimeout != null) {        _config.getSplash().setTimeout(Integer.parseInt(splashTimeout));      }      _config.getSplash().setTimeoutErr("true".equals(props.getProperty(Splash.TIMEOUT_ERR)));    } else {      _config.setSplash(null);    }    setConfigPath(f);  } catch (  IOException e) {    throw new ConfigPersisterException(e);  }}  }
class C{  public NotificationChain basicSetTargetTypeRef(TypeRef newTargetTypeRef,NotificationChain msgs){  TypeRef oldTargetTypeRef=targetTypeRef;  targetTypeRef=newTargetTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CAST_EXPRESSION__TARGET_TYPE_REF,oldTargetTypeRef,newTargetTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private String createString(String f){  return "srcArray=" + srcArray + f+ "srcPos="+ srcPos+ f+ "srcPtr="+ srcPtr+ f+ "srcDevice="+ srcDevice+ f+ "dstArray="+ dstArray+ f+ "dstPos="+ dstPos+ f+ "dstPtr="+ dstPtr+ f+ "dstDevice="+ dstDevice+ f+ "extent="+ extent;}  }
class C{  public StatesData(Collection<StateData<S,E>> stateData){  this.stateData=stateData;}  }
class C{  private void renegotiateNewSession(){  if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getPeerHostName(),socketOwner.getPeerPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);    startSession();  } else {    status=NOT_HANDSHAKING;    sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);  }}  }
class C{  public W3CPoint(Double lat,Double lon){  setGeoLocation(lat,lon);}  }
class C{  public BytesReference suggest(){  return suggestSource;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void subtract(final int operand){  this.value-=operand;}  }
class C{  public Geo crossNormalize(Geo b){  return crossNormalize(b,new Geo());}  }
class C{  private JList<String> createNewInfoLabelJList(String source){  final JList<String> createdInfoLabelList=new JList<>();  createdInfoLabelList.setModel(source == null ? localInfoLabelListModel : remoteInfoLabelListModels.get(source));  createdInfoLabelList.setCellRenderer(new ConfigurableInfoLabelRenderer());  createdInfoLabelList.setFixedCellHeight(20);  createdInfoLabelList.setBackground(LIGHTER_GRAY);  return createdInfoLabelList;}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_foldThread != null && m_foldThread.isAlive()) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  private static void traceTableInfo(Path path,FileSystem tranceFs) throws IOException, SQLException {  logger.info("trace table : " + path.toUri().getPath());  String tbl_name=path.getName();  if (tbl_name.matches("(_|\\.|tmp|temp|stg|test|\\*).*")) {    return;  }  FileStatus[] fstat_lst;  FileStatus fstat=tranceFs.getFileStatus(path);  String fullPath=path.toUri().getPath();  String xName="";  long data_size=-1;  long sample_data_size=-1;  int i, x;  try {    while (fstat.isDirectory()) {      fstat_lst=tranceFs.listStatus(fstat.getPath());      if (fstat_lst.length == 0) {        logger.info(fstat.getPath().toUri().getPath() + " is empty.");        return;      }      int is_fstat_visible=0;      for (i=fstat_lst.length - 1; i >= 0; i--) {        fstat=fstat_lst[i];        xName=fstat.getPath().getName();        if (xName.matches("\\.pig_schema|.*\\.avsc|\\.dataset")) {          is_fstat_visible=1;          break;        } else         if (xName.equals("hourly") && i > 0 && fstat_lst[i - 1].getPath().getName().equals("daily")) {          continue;        } else         if (xName.matches("(_|\\.|tmp|temp).*")) {          continue;        }        try {          sample_data_size=fstat.isDirectory() ? tranceFs.getContentSummary(fstat.getPath()).getLength() : fstat.getLen();        } catch (        AccessControlException e) {          if (tranceFs.listStatus(fstat.getPath()).length > 0) {            is_fstat_visible=1;            break;          } else {            continue;          }        }        if (fstat.isDirectory() == false && xName.matches("(_|\\.).*|.*\\.(jar|json|txt|csv|tsv|zip|gz|lzo)") == false) {          is_fstat_visible=1;          break;        }        if (fstat.isDirectory() == true && xName.matches("(_|\\.).*") == false) {          is_fstat_visible=1;          break;        }      }      if (is_fstat_visible == 0) {        return;      }    }  } catch (  AccessControlException e) {    logger.error("* TblInfo() Cannot access " + fstat.getPath().toUri().getPath());    return;  }  DatasetJsonRecord datasetSchemaRecord=fileAnalyzerFactory.getSchema(fstat.getPath(),path.toUri().getPath());  if (datasetSchemaRecord != null) {    schemaFileWriter.append(datasetSchemaRecord);  } else {    logger.error("* Cannot resolve the schema of " + fullPath);  }  SampleDataRecord sampleDataRecord=fileAnalyzerFactory.getSampleData(fstat.getPath(),path.toUri().getPath());  if (sampleDataRecord != null) {    sampleFileWriter.append(sampleDataRecord);  } else {    System.err.println("* Cannot fetch sample data of " + fullPath);  }}  }
class C{  public void logResult(String taskInfo){  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.log(Level.FINE," [TIMING] - [" + getTimingResult() + "ms] : "+ taskInfo);  }}  }
class C{  private static void edgeSplitMoveExceptionsAndResults(SsaMethod ssaMeth){  ArrayList<SsaBasicBlock> blocks=ssaMeth.getBlocks();  for (int i=blocks.size() - 1; i >= 0; i--) {    SsaBasicBlock block=blocks.get(i);    if (!block.isExitBlock() && block.getPredecessors().cardinality() > 1 && block.getInsns().get(0).isMoveException()) {      BitSet preds=(BitSet)block.getPredecessors().clone();      for (int j=preds.nextSetBit(0); j >= 0; j=preds.nextSetBit(j + 1)) {        SsaBasicBlock predecessor=blocks.get(j);        SsaBasicBlock zNode=predecessor.insertNewSuccessor(block);        zNode.getInsns().add(0,block.getInsns().get(0).clone());      }      block.getInsns().remove(0);    }  }}  }
class C{  public <ResultT>List<ResultT> toList(Converter<ResultT> converter){  try {    if (isEmpty(cursor)) {      return Collections.emptyList();    }    return populate(converter,new ArrayList<ResultT>(cursor.getCount()));  }  finally {    close();  }}  }
class C{  public void add(String item){  addItem(item);}  }
class C{  public boolean isHasMilliseconds(){  return hasMilliseconds;}  }
class C{  private BufferedImage createBufferedImage(JFreeChart chart,int w,int h,int minDrawW,int minDrawH,int maxDrawW,int maxDrawH){  BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=image.createGraphics();  boolean scale=false;  double drawWidth=w;  double drawHeight=h;  double scaleX=1.0;  double scaleY=1.0;  if (drawWidth < minDrawW) {    scaleX=drawWidth / minDrawW;    drawWidth=minDrawW;    scale=true;  } else   if (drawWidth > maxDrawW) {    scaleX=drawWidth / maxDrawW;    drawWidth=maxDrawW;    scale=true;  }  if (drawHeight < minDrawH) {    scaleY=drawHeight / minDrawH;    drawHeight=minDrawH;    scale=true;  } else   if (drawHeight > maxDrawH) {    scaleY=drawHeight / maxDrawH;    drawHeight=maxDrawH;    scale=true;  }  Rectangle2D chartArea=new Rectangle2D.Double(0.0,0.0,drawWidth,drawHeight);  if (scale) {    AffineTransform st=AffineTransform.getScaleInstance(scaleX,scaleY);    g2.transform(st);  }  chart.draw(g2,chartArea,null,null);  g2.dispose();  return image;}  }
class C{  protected void configureReader(XMLReader reader,DefaultHandler handler) throws DocumentException {  SAXHelper.setParserProperty(reader,SAX_LEXICALHANDLER,handler);  SAXHelper.setParserProperty(reader,SAX_LEXICAL_HANDLER,handler);  if (includeInternalDTDDeclarations || includeExternalDTDDeclarations) {    SAXHelper.setParserProperty(reader,SAX_DECL_HANDLER,handler);  }  SAXHelper.setParserFeature(reader,SAX_NAMESPACES,true);  SAXHelper.setParserFeature(reader,SAX_NAMESPACE_PREFIXES,false);  SAXHelper.setParserFeature(reader,SAX_STRING_INTERNING,isStringInternEnabled());  SAXHelper.setParserFeature(reader,"http://xml.org/sax/features/use-locator2",true);  try {    reader.setFeature("http://xml.org/sax/features/validation",isValidating());    if (errorHandler != null) {      reader.setErrorHandler(errorHandler);    } else {      reader.setErrorHandler(handler);    }  } catch (  Exception e) {    if (isValidating()) {      throw new DocumentException("Validation not supported for" + " XMLReader: " + reader,e);    }  }}  }
class C{  public Vec4 intersect(Line line){  if (line == null) {    String message=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double t=this.intersectDistance(line);  if (Double.isNaN(t))   return null;  if (Double.isInfinite(t))   return line.getOrigin();  return line.getPointAt(t);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.VARIABLE_DECLARATION___IS_CONST:    return isConst();case N4JSPackage.VARIABLE_DECLARATION___GET_CONTAINING_MODULE:  return getContainingModule();}return super.eInvoke(operationID,arguments);}  }
class C{  public void flush(){  queue.flushPendingRecords();}  }
class C{  private InstalledLocalContainer createContainer(ContainerCapability capability,String home){  String homeString;  if (home == null) {    homeString="";  } else {    homeString=home;  }  Mock mockConfiguration=mock(LocalConfiguration.class);  Mock mockContainer=mock(InstalledLocalContainer.class);  mockConfiguration.stubs().method("getHome").will(returnValue("ram:///" + homeString));  mockContainer.stubs().method("getConfiguration").will(returnValue(mockConfiguration.proxy()));  mockContainer.stubs().method("getCapability").will(returnValue(capability));  mockContainer.stubs().method("getFileHandler").will(returnValue(this.fileHandler));  mockContainer.stubs().method("getLogger").will(returnValue(new NullLogger()));  mockContainer.stubs().method("getId").will(returnValue("mycontainer"));  return (InstalledLocalContainer)mockContainer.proxy();}  }
class C{  public static SecretKey createKey(String password,int pbkdfIterations,SaltGenerator saltGenerator){  PbkdfKeyGenerator keyGenerator=new PbkdfKeyGenerator(pbkdfIterations,EncryptionConstants.AES_256_KEY_LENGTH_BITS,saltGenerator,SALT_SIZE_BYTES);  return keyGenerator.generateKey(password);}  }
class C{  void addChild(Object... child){  children=Arrays2.add(children,child);}  }
class C{  public static WifiP2pServiceRequest newInstance(int protocolType,String queryData){  return new WifiP2pServiceRequest(protocolType,queryData);}  }
class C{  public void testBug9778() throws Exception {  String tableName="testBug9778";  try {    createTable(tableName,"(field1 int)");    this.rs=this.conn.getMetaData().getTables(null,null,tableName,new String[]{"VIEW"});    assertEquals(false,this.rs.next());    this.rs=this.conn.getMetaData().getTables(null,null,tableName,new String[]{"TABLE"});    assertEquals(true,this.rs.next());  }  finally {    if (this.rs != null) {      this.rs.close();      this.rs=null;    }  }}  }
class C{  public AbstractButton addAction(Action action,int space,boolean isDefault){  return addAction(action,null,space,isDefault,JButton.class);}  }
class C{  public static String intToString(int i){  return convertInt(null,i);}  }
class C{  private Connection createSQLiteConnection() throws SQLException {  File dbfile=new File(plugin.getDataFolder(),"achievements.db");  try {    if (dbfile.createNewFile())     plugin.getLogger().info("Successfully created database file.");  } catch (  IOException e) {    plugin.getLogger().log(Level.SEVERE,"Error while creating database file: ",e);    plugin.setSuccessfulLoad(false);  }  return DriverManager.getConnection("jdbc:sqlite:" + dbfile);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.770 -0400",hash_original_method="F2ACC4611C0738057C364BC3F2D0ADCF",hash_generated_method="AA4E251D5D22BF2E993C6021EB795949") public int skipBytes(int count) throws IOException, EOFException {  return (int)in.skip(count);}  }
class C{  public static Icon manipulate(Icon icon,boolean brighten,int percent){  Image img=getImage(icon);  if (img == null)   return icon;  img=manipulate(img,brighten,percent);  return new IconUIResource(new ImageIcon(img));}  }
class C{  protected boolean disconnectInput(NeuralConnection i,int n){  int loc=-1;  boolean removed=false;  do {    loc=-1;    for (int noa=0; noa < m_numInputs; noa++) {      if (i == m_inputList[noa] && (n == -1 || n == m_inputNums[noa])) {        loc=noa;        break;      }    }    if (loc >= 0) {      for (int noa=loc + 1; noa < m_numInputs; noa++) {        m_inputList[noa - 1]=m_inputList[noa];        m_inputNums[noa - 1]=m_inputNums[noa];        m_weights[noa]=m_weights[noa + 1];        m_changeInWeights[noa]=m_changeInWeights[noa + 1];        m_inputList[noa - 1].changeOutputNum(m_inputNums[noa - 1],noa - 1);      }      m_numInputs--;      removed=true;    }  } while (n == -1 && loc != -1);  return removed;}  }
class C{  MacData(DerInputStream derin) throws IOException, ParsingException {  DerValue[] macData=derin.getSequence(2);  DerInputStream digestIn=new DerInputStream(macData[0].toByteArray());  DerValue[] digestInfo=digestIn.getSequence(2);  AlgorithmId digestAlgorithmId=AlgorithmId.parse(digestInfo[0]);  this.digestAlgorithmName=digestAlgorithmId.getName();  this.digestAlgorithmParams=digestAlgorithmId.getParameters();  this.digest=digestInfo[1].getOctetString();  this.macSalt=macData[1].getOctetString();  if (macData.length > 2) {    this.iterations=macData[2].getInteger();  } else {    this.iterations=1;  }}  }
class C{  public int[] productExceptSelf(int[] nums){  int n=nums.length;  int left=1;  int right=1;  int[] res=new int[n];  Arrays.fill(res,1);  for (int i=0; i < nums.length; i++) {    res[i]*=left;    left*=nums[i];    res[n - 1 - i]*=right;    right*=nums[n - 1 - i];  }  return res;}  }
class C{  private void cleanUp(Reference<?> reference) throws ShutDown {  Method finalizeReferentMethod=getFinalizeReferentMethod();  do {    reference.clear();    if (reference == frqReference) {      throw new ShutDown();    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static ByteString copyFrom(short s){  return ByteString.copyFrom(Shorts.toByteArray(s));}  }
class C{  public int matrixRowToImageRow(int mrow){  return mrow * step + offset;}  }
class C{  public void teleopInit(){  System.out.println("NerdyIterativeRobot IterativeRobot.teleopInit() method... Overload me!");}  }
class C{  public static Typeface windSong(Context context){  return FontSourceProcessor.process(R.raw.windsong,context);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean haveDrawOffer(){  if (currentMove > 0) {    return drawOfferList.get(currentMove - 1);  } else {    return false;  }}  }
class C{  public void start(){  statusThread.start();  System.out.println("Started Status Viewer");  pullerThread.start();  System.out.println("Started Url Puller");  banditThread.start();  System.out.println("Started Bandit");  pusherThread.start();  System.out.println("Started Url Pusher");}  }
class C{  public char charAtLower(int pos){  return lcText[pos];}  }
class C{  @Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {  if (isFilteredURI(servletRequest)) {    LOG.debug("Is a filtered URI: {}. Passing request downstream.",((HttpServletRequest)servletRequest).getRequestURI());    filterChain.doFilter(servletRequest,servletResponse);  } else   if (isInstanceActive()) {    LOG.debug("Active. Passing request downstream");    filterChain.doFilter(servletRequest,servletResponse);  } else   if (serviceState.isInstanceInTransition()) {    HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;    LOG.error("Instance in transition. Service may not be ready to return a result");    httpServletResponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);  } else {    HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;    String activeServerAddress=activeInstanceState.getActiveServerAddress();    if (activeServerAddress == null) {      LOG.error("Could not retrieve active server address as it is null. Cannot redirect request {}",((HttpServletRequest)servletRequest).getRequestURI());      httpServletResponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);    } else {      handleRedirect((HttpServletRequest)servletRequest,httpServletResponse,activeServerAddress);    }  }}  }
class C{  public boolean start(Gridlock state){  findNewAStarPath(state);  if (pathFromHomeToWork.isEmpty()) {    System.out.println("Initialization of agent failed: it is located in a part " + "of the network that cannot access the given goal node");    return false;  } else {    return true;  }}  }
class C{  public TsFci(IndependenceTest independenceTest){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  buildIndexing(independenceTest.getVariables());}  }
class C{  public XMLWriter(Writer output) throws IOException {  super(output);  tab=0;  writeln(XML_VERSION);}  }
class C{  protected void validateSupportedFileSystem(java.lang.String[] param){}  }
class C{  public static void loadImage(Context context,String url,int placeHolder,int error,ImageView imageView){  try {    if (context != null) {      if (imageView != null) {        if (url != null && !url.isEmpty()) {          if (placeHolder != 0) {            Glide.with(context).load(url).diskCacheStrategy(DiskCacheStrategy.ALL).placeholder(placeHolder).into(imageView);          } else {            Glide.with(context).load(url).diskCacheStrategy(DiskCacheStrategy.ALL).into(imageView);          }        } else {          Glide.with(context).load(placeHolder).into(imageView);        }      } else {        Glide.with(context).load(url).diskCacheStrategy(DiskCacheStrategy.ALL);      }    }  } catch (  Exception e) {    logThis(TAG,"loadImage Exception",e);  }}  }
class C{  public void test_CREATE_TX_READ_ONLY_01() throws Exception {  assertNotNull(m_mgr);  assertNotNull(m_mgr.getTransactionManager());  final IRemoteTx tx=m_mgr.getTransactionManager().createTx(RemoteTransactionManager.READ_COMMITTED);  try {    assertTrue(tx.isActive());    assertTrue(tx.isReadOnly());  }  finally {    tx.abort();  }  assertFalse(tx.isActive());  assertTrue(tx.isReadOnly());}  }
class C{  @Override public void startDownload(final String hostname,final int port,final String uri){  mTask.startDownloadRequest(hostname,port,uri);}  }
class C{  public JettisonMappedXmlDriver(){  this(new Configuration());}  }
class C{  public KMLDocumentBuilder(Writer writer) throws XMLStreamException {  this.writer=XMLOutputFactory.newInstance().createXMLStreamWriter(writer);  this.startDocument();}  }
class C{  public ThrowableSet add(ThrowableSet s) throws ThrowableSet.AlreadyHasExclusionsException {  if (INSTRUMENTING) {    Manager.v().addsOfSet++;  }  if (exceptionsExcluded.size() > 0 || s.exceptionsExcluded.size() > 0) {    throw new AlreadyHasExclusionsException("ThrowableSet.Add(ThrowableSet): attempt to add to [" + this.toString() + "] after removals recorded.");  }  ThrowableSet result=getMemoizedAdds(s);  if (result == null) {    if (INSTRUMENTING) {      Manager.v().addsInclusionFromSearch++;      Manager.v().addsExclusionWithoutSearch++;    }    result=this.add(s.exceptionsIncluded);    memoizedAdds.put(s,result);  } else   if (INSTRUMENTING) {    Manager.v().addsInclusionFromMemo++;    Manager.v().addsExclusionWithoutSearch++;  }  return result;}  }
class C{  public static boolean unsignedLongGreaterThan(long x1,long x2){  return (x1 + Long.MIN_VALUE) > (x2 + Long.MIN_VALUE);}  }
class C{  public void testNGramFilter() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("NGram").create(stream);  assertTokenStreamContents(stream,new String[]{"t","te","e","es","s","st","t"});}  }
class C{  @Override public void onPostExecute(Integer totalContactsModified){  Utils.showToast(mOps.getActivityContext(),totalContactsModified + " contact(s) modified");}  }
class C{  public NotificationChain basicSetTarget(Expression newTarget,NotificationChain msgs){  Expression oldTarget=target;  target=newTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET,oldTarget,newTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static int findObjectLiteral(Object literal){synchronized (objectLiterals) {    Integer result=objectLiterals.get(literal);    return result == null ? 0 : result.intValue();  }}  }
class C{  public void add(Formatter formatter){  _logHandlerConfig.setFormatter(formatter);}  }
class C{  private void initializeLayout(){  JPanel sparseContainer=new JPanel();  this.add(sparseContainer);  JScrollPane pScroller=new JScrollPane(sparseContainer);  this.add(pScroller,BorderLayout.CENTER);  sparseContainer.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridx=0;  gbc.gridy=0;  gbc.gridwidth=3;  gbc.gridheight=4;  gbc.anchor=GridBagConstraints.NORTHWEST;  sparseContainer.add(initializeSparseSubPanel(),gbc);}  }
class C{  public static void assertException(RuntimeException exception,Runnable expression,String errorMessage){  if (verbose) {    log("assertException(" + exception + ", "+ expression+ ", "+ errorMessage+ ")");  }  try {    expression.run();  } catch (  RuntimeException failure) {    if (exception.getClass() != failure.getClass()) {      TestUtils.fail(errorMessage);    }    return;  }  TestUtils.fail(errorMessage);}  }
class C{  public String docvectorsfile(){  return docvectorsfile;}  }
class C{  public void remove(T item){  for (  WeightedRandomEntry<T> e : elements) {    if (e.item.equals(item)) {      elements.remove(e);      totalWeight-=e.weight;      return;    }  }}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public void _setPreviousLocation(NavLocation location){  this.previousLocation=location;}  }
class C{  public Hotel(){}  }
class C{  public int size(){  return table.size();}  }
class C{  public static CreateIndexRequest createIndexRequest(String index){  return new CreateIndexRequest(index);}  }
class C{  public EppsteinPowerLawGenerator(Supplier<Graph<V,E>> graphFactory,Supplier<V> vertexFactory,Supplier<E> edgeFactory,int numVertices,int numEdges,int r){  this.graphFactory=graphFactory;  this.vertexFactory=vertexFactory;  this.edgeFactory=edgeFactory;  mNumVertices=numVertices;  mNumEdges=numEdges;  mNumIterations=r;  mRandom=new Random();}  }
class C{  @Override public UpdateResponse deleteById(String id,int commitWithinMs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.deleteById(id,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.deleteById(id,commitWithinMs);  return ur;}  }
class C{  public static boolean isWellKnownImmutableInstance(Object o){  if (o instanceof String) {    return true;  }  if (o instanceof Number) {    if (o instanceof Integer)     return true;    if (o instanceof Long)     return true;    if (o instanceof Byte)     return true;    if (o instanceof Short)     return true;    if (o instanceof Float)     return true;    if (o instanceof Double)     return true;    if (o.getClass().equals(BigInteger.class))     return true;    if (o.getClass().equals(BigDecimal.class))     return true;  }  if (o instanceof PdxInstance && !(o instanceof WritablePdxInstance)) {    return true;  }  if (o instanceof Character)   return true;  if (o instanceof UUID)   return true;  return false;}  }
class C{  @Override public final void preTearDown() throws Exception {  client1.invoke(null);  client2.invoke(null);  server1.invoke(null);  server2.invoke(null);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  int numRows;  int numCols;  int row;  int col;  double z;  int i;  int c;  int x, y;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 3) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      caThresholdType=args[i].toLowerCase();    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;switch (caThresholdType) {case "specific catchment area (sca)":      caThreshold=caThreshold / gridRes;    break;case "total catchment area":  caThreshold=caThreshold / (gridRes * gridRes);break;default :break;}updateProgress("Loop 1 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {z=dem.getValue(row,col);if (z != noData) {i=0;for (c=0; c < 8; c++) {  x=col + xd[c];  y=row + yd[c];  if (z < dem.getValue(y,x)) {    i++;  }}tmpArea.setValue(row,col,1);tmpCount.setValue(row,col,i);output.setValue(row,col,-1);} else {tmpArea.setValue(row,col,noData);output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 1 of 2:",(int)progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (dem.getValue(row,col) != noData) {if (tmpCount.getValue(row,col) == 0) {  MDInfAccum(row,col,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();tmpArea.close();tmpCount.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void assertBestPriceCriteriaRemoved(EmrClusterDefinition emrClusterDefinition){  assertNull("master instance max search price was not removed",emrClusterDefinition.getInstanceDefinitions().getMasterInstances().getInstanceMaxSearchPrice());  assertNull("master instance on-demand threshold was not removed",emrClusterDefinition.getInstanceDefinitions().getMasterInstances().getInstanceOnDemandThreshold());  assertNull("core instance max search price was not removed",emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceMaxSearchPrice());  assertNull("core instance on-demand threshold was not removed",emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceOnDemandThreshold());  if (emrClusterDefinition.getInstanceDefinitions().getTaskInstances() != null) {    assertNull("task instance max search price was not removed",emrClusterDefinition.getInstanceDefinitions().getTaskInstances().getInstanceMaxSearchPrice());    assertNull("task instance on-demand threshold was not removed",emrClusterDefinition.getInstanceDefinitions().getTaskInstances().getInstanceOnDemandThreshold());  }}  }
class C{  public void onStop(){  block();  PlatformCallbackUtils.onStop(envPtr);}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileMerger().start(args);}  }
class C{  public NotificationChain basicSetFault(Fault newFault,NotificationChain msgs){  Fault oldFault=fault;  fault=newFault;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.FUNCTION_BLOCK__FAULT,oldFault,newFault);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public float max(){  if (isEmpty()) {    return Float.NEGATIVE_INFINITY;  }  float v=Float.NEGATIVE_INFINITY;  for (int i=0; i < length; i++) {    if (!Float.isNaN(get(i)) && get(i) > v) {      v=get(i);    }  }  return v;}  }
class C{  public boolean hasUpdateDistributionPermission(){  return hasReadDistributionPermission() && permissionService.hasPermission(SpPermission.UPDATE_REPOSITORY);}  }
class C{  public PLRequestInvalidatedException(String url){  super(String.format("Request to %s was invalidated",url));}  }
class C{  protected void init(){  m_ThreadMonitor=null;  m_ThreadMonitor=getThreadMonitor();  m_CanMeasureCpuTime=m_ThreadMonitor.isThreadCpuTimeSupported();}  }
class C{  public Filter(Filter filter){  this.name=filter.name;  this.type=filter.type;  this.pred=new FilterPred(filter.pred);  this.enabled=filter.enabled;}  }
class C{  public void statusButtonActionPerformed(java.awt.event.ActionEvent e){  try {    if (light != null) {      light.removePropertyChangeListener(this);    }    try {      light=InstanceManager.lightManagerInstance().provideLight(adrTextField.getText());    } catch (    IllegalArgumentException ex) {      nowStateTextField.setText(rb.getString("LightErrorButtonNameBad") + adrTextField.getText());    }    updateLightStatusFields(true);  } catch (  Exception ex) {    log.error(rb.getString("LightErrorStatusButtonException") + ex.toString());    nowStateTextField.setText("ERROR");  }}  }
class C{  @Override public void createDatabaseSchemaOnDatabase(AbstractSession session,Set<String> createdDatabaseSchemas) throws EclipseLinkException {  session.priviledgedExecuteNonSelectingCall(new SQLCall(buildDatabaseSchemaCreationWriter(session,new StringWriter(),createdDatabaseSchemas).toString()));}  }
class C{  private static SpatialGrid initSpatialGrid(String filename) throws IOException {  BufferedReader reader=IOUtils.getBufferedReader(filename);  String line;  double xmin=0.;  double ymin=0.;  double xmax=0.;  double ymax=0.;  double ytmp=0.;  double res=0.;  line=reader.readLine();  String[] header=line.split(SpatialGridTableWriter.separator);  if (header.length > 1) {    xmin=Double.parseDouble(header[1]);    xmax=Double.parseDouble(header[header.length - 1]);    res=(xmax - xmin) / (header.length - 2);    boolean firstLine=true;    while ((line=reader.readLine()) != null) {      ytmp=Double.parseDouble(line.split(SpatialGridTableWriter.separator)[0]);      if (firstLine) {        ymin=ytmp;        firstLine=false;      }    }    ymax=ytmp;    System.out.println(xmin + "," + ymin+ ","+ xmax+ ","+ ymax+ ","+ res);    SpatialGrid sg=new SpatialGrid(xmin,ymin,xmax,ymax,res,Double.NaN);    return sg;  }  return null;}  }
class C{  public boolean decoderDirty(){  int len=rowVector.size();  for (int i=0; i < len; i++) {    if (((rowVector.elementAt(i))).getState() == CvValue.EDITED) {      return true;    }  }  return false;}  }
class C{  public ImmutableByteBufferInputStream(ByteBufferInputStream existing,int length){  setBuffer(existing.slice(length));}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    args=new String[2];    Scanner sc=new Scanner(System.in);    System.out.print("NCOL from file:");    args[0]=sc.nextLine();    System.out.print("LGL to file:");    args[1]=sc.nextLine();    sc.close();  }  Scanner sc=new Scanner(new File(args[0]));  PrintWriter pw=new PrintWriter(new File(args[1]));  Hashtable<Integer,ArrayList<Integer>> map=new Hashtable<Integer,ArrayList<Integer>>();  int maxId=-1;  while (sc.hasNextLine()) {    int n1=sc.nextInt();    int n2=sc.nextInt();    sc.nextLine();    ArrayList<Integer> exist=map.get(n1);    if (exist == null) {      exist=new ArrayList<Integer>();      map.put(n1,exist);    }    exist.add(n2);    if (n2 > maxId) {      maxId=n2;    }    if (n1 > maxId) {      maxId=n1;    }  }  sc.close();  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    pw.println("#" + i);    for (int j=0; j < exist.size(); j++) {      pw.println(exist.get(j));    }  }  pw.flush();  pw.close();}  }
class C{  public static boolean isPrimaryExternalStorageMounted(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public boolean readNonBlock() throws IOException {  if (_readOffset < _readLength)   return true;  if (_readBuffer == null) {    _readOffset=0;    _readLength=0;    return false;  }  int readLength=_source.readNonBlock(_readBuffer,0,_readBuffer.length);  _readOffset=0;  if (readLength > 0) {    _readLength=readLength;    _position+=readLength;    if (_isEnableReadTime)     _readTime=CurrentTime.currentTime();    return true;  } else {    _readLength=0;    return false;  }}  }
class C{  public boolean isAllowPublish(){  Object oo=get_Value(COLUMNNAME_IsAllowPublish);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isWhitespaceNonline(char c){  return !RegExpUtils.resetAndTest(regexpNotWhitespaceExcludingNewlineAndCarriageReturn,String.valueOf(c));}  }
class C{  public Object invoke(Object o,Object value) throws Exception {  this.field.set(o,value);  return null;}  }
class C{  public void await() throws InterruptedException {  latch.await();}  }
class C{  public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  checkUpdatable();  getField(columnIndex).setBigDecimal(x);}  }
class C{  public RoundedTransformationBuilder cornerRadiusDp(float radiusDp){  return cornerRadius(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radiusDp,mDisplayMetrics));}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public boolean isAssigned(){  return this.isAssigned;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.310 -0500",hash_original_method="A939F96E349A2DAAC3BA975E2507007D",hash_generated_method="0D3AFC876C6EE253E6960329A24DBDC9") public void stopLoading(){  if (mIsMainFrame) {    resetLoadingStates();  }  nativeStopLoading();}  }
class C{  public void deactivateScheduledEvent(URI eventId){  client.post(String.class,PathConstants.SCHEDULED_EVENTS_DEACTIVATE_URL,eventId);}  }
class C{  public static void main(String[] args){  TestLinkToSerialForm tester=new TestLinkToSerialForm();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void addSample(long byteCount){  totalBytesTransfered+=byteCount;  long reportSize=currentFileSize - currentFileReal;  if (reportSize > 0) {    reportSize=Math.min(reportSize,byteCount);    subMonitor.worked((int)reportSize);  }  currentFileReal+=byteCount;}  }
class C{  @Override public boolean equals(Object o){  return (o instanceof NoneVal);}  }
class C{  static void drawDark3DBorder(Graphics g,int x,int y,int w,int h){  g.translate(x,y);  drawFlush3DBorder(g,0,0,w,h);  g.setColor(MetalLookAndFeel.getControl());  g.drawLine(1,1,1,h - 2);  g.drawLine(1,1,w - 2,1);  g.setColor(MetalLookAndFeel.getControlShadow());  g.drawLine(1,h - 2,1,h - 2);  g.drawLine(w - 2,1,w - 2,1);  g.translate(-x,-y);}  }
class C{  public SBS(int minFeatures,int maxFeatures,Classifier evaluater,double maxDecrease){  this(minFeatures,maxFeatures,evaluater,3,maxDecrease);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.711 -0500",hash_original_method="EBA268158DBADCF4BD34E1D13045F6D1",hash_generated_method="4101D2F68B664258179ACA5C3C440E40") private View makeAndAddView(int position,int offset,int x,boolean fromLeft){  View child;  if (!mDataChanged) {    child=mRecycler.get(position);    if (child != null) {      int childLeft=child.getLeft();      mRightMost=Math.max(mRightMost,childLeft + child.getMeasuredWidth());      mLeftMost=Math.min(mLeftMost,childLeft);      setUpChild(child,offset,x,fromLeft);      return child;    }  }  child=mAdapter.getView(position,null,this);  setUpChild(child,offset,x,fromLeft);  return child;}  }
class C{  private boolean startCacheStatListener(){  final GemFireStatSampler sampler=this.cache.getDistributedSystem().getStatSampler();  if (sampler == null) {    return false;  }  try {    sampler.waitForInitialization();    String tenuredPoolName=getTenuredMemoryPoolMXBean().getName();    List list=this.cache.getDistributedSystem().getStatsList();    for (    Object o : list) {      if (o instanceof StatisticsImpl) {        StatisticsImpl si=(StatisticsImpl)o;        if (si.getTextId().contains(tenuredPoolName) && si.getType().getName().contains("PoolStats")) {          sampler.addLocalStatListener(this.statListener,si,"currentUsedMemory");          if (this.cache.getLoggerI18n().fineEnabled()) {            this.cache.getLoggerI18n().fine("Registered stat listener for " + si.getTextId());          }          return true;        }      }    }  } catch (  InterruptedException iex) {    Thread.currentThread().interrupt();    this.cache.getCancelCriterion().checkCancelInProgress(iex);  }  return false;}  }
class C{  public void editCurrentRow(){  if (currentRow != null && currentRow.getParent() != null && currentRow.isVisible() && grid != null && grid.isVisible() && grid.getParent() != null && grid.getParent().isVisible()) {    int columnCount=gridTab.getTableModel().getColumnCount();    GridField[] gridField=gridTab.getFields();    org.zkoss.zul.Columns columns=grid.getColumns();    int colIndex=-1;    for (int i=0; i < columnCount; i++) {      if (!(gridField[i].isDisplayed() && gridField[i].isDisplayedGrid())) {        continue;      }      colIndex++;      if (editors.get(gridField[i]) == null) {        WEditor editor=WebEditorFactory.getEditor(gridField[i],true);        if (!gridField[i].isUpdateable() && gridTab.getRecord_ID() <= 0) {          editor.setReadWrite(true);          editor.dynamicDisplay();        }        editors.put(gridField[i],editor);      }      org.zkoss.zul.Column column=(org.zkoss.zul.Column)columns.getChildren().get(colIndex);      if (column.isVisible()) {        Div div=(Div)currentRow.getChildren().get(colIndex);        WEditor editor=getEditorCell(gridField[i],currentValues[i],i);        div.appendChild(editor.getComponent());        WEditorPopupMenu popupMenu=editor.getPopupMenu();        if (popupMenu != null) {          popupMenu.addMenuListener((ContextMenuListener)editor);          div.appendChild(popupMenu);        }        div.getFirstChild().setVisible(false);        if (!gridField[i].isDisplayed(true)) {          editor.setVisible(false);        }        editor.setReadWrite(gridField[i].isEditable(true));      }    }    editing=true;    GridTableListModel model=(GridTableListModel)grid.getModel();    model.setEditing(true);  }}  }
class C{  public final boolean member(Object value){  ConsCell cell=this.first;  boolean isMember=false;  while (cell != null) {    if (cell.value == value) {      isMember=true;      break;    }    cell=cell.next;  }  return isMember;}  }
class C{  private void doNtLogin(NtAuthInfo authInfo){  logger.info("NT authentication for: " + authInfo.getLoginTarget());  HttpHost targetHost=new HttpHost(authInfo.getHost(),authInfo.getPort(),authInfo.getProtocol());  CredentialsProvider credsProvider=new BasicCredentialsProvider();  try {    credsProvider.setCredentials(new AuthScope(targetHost.getHostName(),targetHost.getPort()),new NTCredentials(authInfo.getUsername(),authInfo.getPassword(),InetAddress.getLocalHost().getHostName(),authInfo.getDomain()));  } catch (  UnknownHostException e) {    logger.error("Error creating NT credentials",e);  }  httpClient=HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();}  }
class C{  public static Status confirmed(){  return create(CONFIRMED);}  }
class C{  public IfElse(){  this(Object.class);}  }
class C{  public VideoEditor createVideoEditor(String projectPath){  VideoEditor mVideoEditor=null;  try {    mVideoEditor=VideoEditorFactory.create(projectPath);    assertNotNull("VideoEditor",mVideoEditor);  } catch (  Exception e) {    fail("Unable to create Video Editor");  }  return mVideoEditor;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private Object checkValueEL(Object value){  if (dimension > 1) {    if (value instanceof Array) {      if (((Array)value).getDimension() != dimension - 1)       return null;    } else     return null;  }  return value;}  }
class C{  public URI(){}  }
class C{  public void initializeDefinition(String tableName,boolean isDeferrable,boolean isDeferred){  m_table=tableName;  m_isDeferrable=isDeferrable;  m_isDeferred=isDeferred;  s_logger.log(Level.FINEST,toString());}  }
class C{  public LangModel(String lmFileName) throws IOException {  int ngram_len=0;  InputStream fstream=LangModel.class.getClassLoader().getResourceAsStream(lmFileName);  DataInputStream in=new DataInputStream(fstream);  BufferedReader br=new BufferedReader(new InputStreamReader(in));  String strLine;  double highest_unigram_prob=0;  while ((strLine=br.readLine()) != null) {    Pattern ngram_len_p=Pattern.compile("(\\d+)-grams:");    Matcher match_ngram_len=ngram_len_p.matcher(strLine);    if (match_ngram_len.find()) {      ngram_len=Integer.parseInt(match_ngram_len.group(1));    } else     if (ngram_len == 1) {      Pattern unigram_p=Pattern.compile("([-0-9\\.]+)\\s*(\\S+)\\s*([-0-9\\.]+)");      Matcher match_unigram=unigram_p.matcher(strLine);      if (match_unigram.find()) {        double unigram_prob=Double.parseDouble(match_unigram.group(1));        String unigram=match_unigram.group(2);        double unigram_backoff_prob=Double.parseDouble(match_unigram.group(3));        unigram_probs.put(unigram,unigram_prob);        unigram_backoff_probs.put(unigram,unigram_backoff_prob);        if (unigram_prob < unknown_char_prob) {          unknown_char_prob=unigram_prob;        }        if (unigram_prob > highest_unigram_prob) {          highest_unigram_prob=unigram_prob;        }      }    } else     if (ngram_len == 2) {      Pattern bigram_p=Pattern.compile("([-0-9\\.]+)\\s*(\\S+) (\\S+)");      Matcher match_bigram=bigram_p.matcher(strLine);      if (match_bigram.find()) {        double bigram_prob=Double.parseDouble(match_bigram.group(1));        String bigram_start=match_bigram.group(2);        String bigram_end=match_bigram.group(3);        String bigram=bigram_start + " " + bigram_end;        bigram_probs.put(bigram,bigram_prob);      }    }  }  in.close();  ValueComparator bvc=new ValueComparator(bigram_probs);  TreeMap<String,Double> sorted_bigram_probs=new TreeMap<String,Double>(bvc);  sorted_bigram_probs.putAll(bigram_probs);  Pattern context_p=Pattern.compile("(\\S+) (\\S+)");  for (  Map.Entry<String,Double> entry : sorted_bigram_probs.entrySet()) {    Matcher match_context=context_p.matcher(entry.getKey());    if (match_context.find()) {      String pre=match_context.group(1);      String middle=match_context.group(2);      for (int c=0; c < predicted_chars; c++) {        String key=pre + c;        if (!context_char.containsKey(key)) {          context_char.put(key,middle);          context_prob.put(key,entry.getValue());          break;        }      }    }  }}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void toSingletonString(StringBuilder sb){  toSingletonString(sb,false);}  }
class C{  public static void logTapsSinceOpenForUndecided(int tapsSinceOpen){  RecordHistogram.recordCountHistogram("Search.ContextualSearchTapsSinceOpenUndecided",tapsSinceOpen);}  }
class C{  private List<ItemDTO> mockBaseItemHas3Key(){  ItemDTO item1=new ItemDTO("a","b","",1);  ItemDTO item2=new ItemDTO("b","c","",2);  ItemDTO item3=new ItemDTO("c","d","",3);  return Arrays.asList(item1,item2,item3);}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),"=======" + str);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  MediaFile mf=getMediaFile(stack);  if (mf != null) {    String rv=mf.getMetadataProperty(name);    return (rv == null) ? "" : rv;  }  return "";}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  protected void closeCurrentEntry() throws IOException {  if (currentEntry != null) {    if (currentEntry.getSize() > currentFileSize) {      long bs=0;      while (bs < currentEntry.getSize() - currentFileSize) {        long res=skip(currentEntry.getSize() - currentFileSize - bs);        if (res == 0 && currentEntry.getSize() - currentFileSize > 0) {          throw new IOException("Possible tar file corruption");        }        bs+=res;      }    }    currentEntry=null;    currentFileSize=0L;    skipPad();  }}  }
class C{  protected void buildPseudoMonitors(Map<String,Monitor> map){  Monitor monitor=null;  String name=null;  IntBuffer ib=null;  name=PerfDataBufferPrologue.PERFDATA_MAJOR_NAME;  ib=prologue.majorVersionBuffer();  monitor=new PerfIntegerMonitor(name,Units.NONE,Variability.CONSTANT,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_MINOR_NAME;  ib=prologue.minorVersionBuffer();  monitor=new PerfIntegerMonitor(name,Units.NONE,Variability.CONSTANT,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_BUFFER_SIZE_NAME;  ib=prologue.sizeBuffer();  monitor=new PerfIntegerMonitor(name,Units.BYTES,Variability.MONOTONIC,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_BUFFER_USED_NAME;  ib=prologue.usedBuffer();  monitor=new PerfIntegerMonitor(name,Units.BYTES,Variability.MONOTONIC,false,ib);  map.put(name,monitor);  name=PerfDataBufferPrologue.PERFDATA_OVERFLOW_NAME;  ib=prologue.overflowBuffer();  monitor=new PerfIntegerMonitor(name,Units.BYTES,Variability.MONOTONIC,false,ib);  map.put(name,monitor);  this.overflow=(IntegerMonitor)monitor;  name=PerfDataBufferPrologue.PERFDATA_MODTIMESTAMP_NAME;  LongBuffer lb=prologue.modificationTimeStampBuffer();  monitor=new PerfLongMonitor(name,Units.TICKS,Variability.MONOTONIC,false,lb);  map.put(name,monitor);}  }
class C{  public static TestResult execClass(String theClass,String path,List<String> cmdline,List<String> files,String jflexTestVersion,String outputFileEncoding) throws UnsupportedEncodingException {  String[] cmd=toArray(cmdline,files);  Class c;  Method main;  Class[] sig={String[].class};  CustomClassLoader l=new CustomClassLoader(path);  l.addPath(System.getProperty("user.home") + "/.m2/repository/de/jflex/jflex/" + jflexTestVersion+ "/jflex-"+ jflexTestVersion+ ".jar");  try {    c=l.loadClass(theClass,true);  } catch (  ClassNotFoundException e) {    System.out.println("no such class: " + e);    return null;  }  try {    main=c.getMethod("main",sig);  } catch (  NoSuchMethodException e) {    System.out.println("no main: " + e);    return null;  }  ByteArrayOutputStream out=new ByteArrayOutputStream();  boolean success=true;  PrintStream stdOut=System.out;  System.setOut(new PrintStream(out,true));  try {    Object[] params={cmd};    main.invoke(null,params);    System.setOut(stdOut);  } catch (  IllegalAccessException e) {    System.setOut(stdOut);    System.out.println("main not public :" + e + main);    return null;  }catch (  InvocationTargetException e) {    System.setOut(stdOut);    System.out.println("test subject threw exception :" + e);    success=false;  }  return new TestResult(out.toString(outputFileEncoding),success);}  }
class C{  private void connectToWifi(WifiConfiguration config){  assertTrue("failed to connect to " + config.SSID,mAct.connectToWifiWithConfiguration(config));  assertTrue(mAct.waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,ConnectivityManagerTestActivity.WIFI_CONNECTION_TIMEOUT));  assertNotNull("Wifi connection returns null",mAct.mWifiManager.getConnectionInfo());  if (DEBUG) {    log("config.SSID = " + config.SSID);    log("mAct.mWifiManager.getConnectionInfo.getSSID()" + mAct.mWifiManager.getConnectionInfo().getSSID());  }  assertTrue(config.SSID.contains(mAct.mWifiManager.getConnectionInfo().getSSID()));}  }
class C{  public DOMAttrModifiedListenerWrapper(CSSNavigableDocumentListener l){  listener=l;}  }
class C{  @Override public final void openPdfFile(final String filename) throws PdfException {  if (fileAccess.isOpen && fileAccess.linearParser.linearizedBackgroundReaderer == null) {    closePdfFile();  }  preOpen();  fileAccess.openPdfFile(filename);  postOpen();}  }
class C{  public String tag(int tokenId,TextAnnotation ta){  String form=ta.getToken(tokenId);  if (form.length() >= 5) {    boolean allLetters=true;    for (int i=form.length() - 3; i < form.length() && allLetters; ++i)     allLetters=Character.isLetter(form.charAt(i));    if (allLetters) {      if (WordHelpers.isCapitalized(ta,tokenId)) {        int headOfSentence=ta.getSentence(ta.getSentenceId(tokenId)).getStartSpan();        if (tokenId == headOfSentence)         return tagHelper(form,firstCapitalized); else         return tagHelper(form,notFirstCapitalized);      } else {        return super.tag(tokenId,ta);      }    }  } else {  }  return "UNKNOWN";}  }
class C{  private static boolean paddingByteIs(byte[] data,int len,byte b){  for (int i=48; i < len; i++) {    if (data[i] != b)     return false;  }  return true;}  }
class C{  public T width(int width,boolean dip){  size(true,width,dip);  return self();}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public EObject basicGetSourceElement(){  return sourceElement;}  }
class C{  @Override protected String doExport(List<EvaluationStatistics> stats){  String result;  int i;  result=null;  for (i=0; i < m_Exporters.length; i++) {    log("Exporter #" + (i + 1) + ": "+ m_Exporters[i].getClass().getName());    result=m_Exporters[i].export(stats);    if (result != null) {      result="Exporter #" + (i + 1) + ": "+ result;      log(result);      break;    }  }  return result;}  }
class C{  private void collectProperties(final RadComponent component,final ArrayList<Property> result){  if (component instanceof RadRootContainer) {    addProperty(result,myClassToBindProperty);  } else {    if (!(component instanceof RadVSpacer || component instanceof RadHSpacer)) {      addProperty(result,myBindingProperty);      addProperty(result,CustomCreateProperty.getInstance(myProject));    }    if (component instanceof RadContainer) {      RadContainer container=(RadContainer)component;      if (container.getLayoutManager().getName() != null) {        addProperty(result,myLayoutManagerProperty);      }      addProperty(result,myBorderProperty);      final Property[] containerProperties=container.getLayoutManager().getContainerProperties(myProject);      addApplicableProperties(containerProperties,container,result);    }    final RadContainer parent=component.getParent();    if (parent != null) {      final Property[] properties=parent.getLayoutManager().getComponentProperties(myProject,component);      addApplicableProperties(properties,component,result);    }    if (component.getDelegee() instanceof AbstractButton && !(component.getDelegee() instanceof JButton)) {      addProperty(result,myButtonGroupProperty);    }    if (!(component instanceof RadVSpacer || component instanceof RadHSpacer)) {      addProperty(result,ClientPropertiesProperty.getInstance(myProject));    }    if (component.hasIntrospectedProperties()) {      final Class componentClass=component.getComponentClass();      final IntrospectedProperty[] introspectedProperties=Palette.getInstance(myEditor.getProject()).getIntrospectedProperties(component);      final Properties properties=Properties.getInstance();      for (      final IntrospectedProperty property : introspectedProperties) {        if (!property.appliesTo(component))         continue;        if (!myShowExpertProperties && properties.isExpertProperty(component.getModule(),componentClass,property.getName()) && !isModifiedForSelection(property)) {          continue;        }        addProperty(result,property);      }    }  }}  }
class C{  private AvailablePortFinder(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void applyAction(@NotNull Bytes bytes){  if (this.bytes.readRemaining() > 0) {synchronized (lock()) {      if (YamlLogging.showServerWrites())       logBuffer();      bytes.write(this.bytes);      this.bytes.clear();    }  }}  }
class C{  private void unlinkServices(Marketplace mp,Organization supplier,DataService dm){  String mId=mp.getMarketplaceId();  Query query=dm.createNamedQuery("Product.getProductsForVendorOnMarketplace");  query.setParameter("marketplaceId",mId);  query.setParameter("vendorKey",Long.valueOf(supplier.getKey()));  List<Product> productList=ParameterizedTypes.list(query.getResultList(),Product.class);  if (productList != null) {    for (    Product product : productList) {      if (product.getStatus() == ServiceStatus.ACTIVE) {        product.setStatus(ServiceStatus.INACTIVE);      }      deactivateCustomerServices(product);      for (      CatalogEntry ce : product.getCatalogEntries()) {        Marketplace ceMp=ce.getMarketplace();        if (ceMp != null && mId.equals(ceMp.getMarketplaceId())) {          ce.setMarketplace(null);        }      }    }  }}  }
class C{  public CModuleFilterFieldMenu(final JTextField filterField){  add(new CFilterViewsAction(filterField));}  }
class C{  public static boolean batch(WebSocketImpl ws,ByteChannel sockchannel) throws IOException {  ByteBuffer buffer=ws.outQueue.peek();  WrappedByteChannel c=null;  if (buffer == null) {    if (sockchannel instanceof WrappedByteChannel) {      c=(WrappedByteChannel)sockchannel;      if (c.isNeedWrite()) {        c.writeMore();      }    }  } else {    do {      sockchannel.write(buffer);      if (buffer.remaining() > 0) {        return false;      } else {        ws.outQueue.poll();        buffer=ws.outQueue.peek();      }    } while (buffer != null);  }  if (ws != null && ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER) {synchronized (ws) {      ws.closeConnection();    }  }  return c != null ? !((WrappedByteChannel)sockchannel).isNeedWrite() : true;}  }
class C{  public static <S extends HasRestoreClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RestoreClickEvent event=new RestoreClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private void initPopupMenus(){  m_PopupHeader=new JPopupMenu();  m_PopupHeader.addMouseListener(this);  m_PopupHeader.add(menuItemMean);  if (!isReadOnly()) {    m_PopupHeader.addSeparator();    m_PopupHeader.add(menuItemSetAllValues);    m_PopupHeader.add(menuItemSetMissingValues);    m_PopupHeader.add(menuItemReplaceValues);    m_PopupHeader.addSeparator();    m_PopupHeader.add(menuItemRenameAttribute);    m_PopupHeader.add(menuItemAttributeAsClass);    m_PopupHeader.add(menuItemDeleteAttribute);    m_PopupHeader.add(menuItemDeleteAttributes);    m_PopupHeader.add(menuItemSortInstances);  }  m_PopupHeader.addSeparator();  m_PopupHeader.add(menuItemOptimalColWidth);  m_PopupHeader.add(menuItemOptimalColWidths);  m_PopupRows=new JPopupMenu();  m_PopupRows.addMouseListener(this);  if (!isReadOnly()) {    m_PopupRows.add(menuItemUndo);    m_PopupRows.addSeparator();  }  m_PopupRows.add(menuItemCopy);  m_PopupRows.addSeparator();  m_PopupRows.add(menuItemSearch);  m_PopupRows.add(menuItemClearSearch);  if (!isReadOnly()) {    m_PopupRows.addSeparator();    m_PopupRows.add(menuItemDeleteSelectedInstance);    m_PopupRows.add(menuItemDeleteAllSelectedInstances);  }}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(Pageable.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  public ReferenceMap(int keyType,int valueType,int capacity,float loadFactor,boolean purgeValues){  super(keyType,valueType,capacity,loadFactor,purgeValues);}  }
class C{  protected final <T extends Node>T[] insert(final T[] newChildren){  CompilerDirectives.transferToInterpreterAndInvalidate();  assert newChildren != null;  for (  Node newChild : newChildren) {    adoptHelper(newChild);  }  return newChildren;}  }
class C{  public void addEntry(String data){  if (!contains(data))   map.add(data,data);}  }
class C{  public int writeLongDelta(long x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < MAX_PRECOMPUTED)   return writeInt(DELTA[(int)x],DELTA[(int)x] >>> 26);  final int msb=Fast.mostSignificantBit(++x);  final int l=writeGamma(msb);  return l + (msb != 0 ? writeLong(x,msb) : 0);}  }
class C{  public PlanStrategyReRoutePtFixedSubMode(Scenario sc,Provider<TripRouter> tripRouterProvider){  this.sc=sc;  this.tripRouterProvider=tripRouterProvider;  this.selector=new RandomPlanSelector();  this.storeOriginalLegModes();}  }
class C{  protected void initialize(){  super.initialize();  m_LayoutType=null;  m_SearchListeners=new HashSet<SearchListener>();  m_MinimumChars=1;  m_LastSearch="";}  }
class C{  public final int offsetY(){  return this.rand.nextInt(16) - 8;}  }
class C{  public static EquivalentValue equiVal(Value val){  if (val == null)   return null;  return new EquivalentValue(val);}  }
class C{  void resetCaches(){  this.cachedNextLinkId=null;  this.cachedRouteLinkIds=null;  this.cachedDestinationLinkId=null;  PlanElement currentPlanElement=this.getPlanElements().get(this.currentPlanElementIndex);  if (currentPlanElement instanceof Leg) {    this.currentLeg=((Leg)currentPlanElement);    this.cachedRouteLinkIds=null;    Route route=currentLeg.getRoute();    if (route == null) {      log.error("The agent " + this.getId() + " has no route in its leg. Removing the agent from the simulation.");      this.state=MobsimAgent.State.ABORT;      return;    }    this.cachedDestinationLinkId=route.getEndLinkId();  } else {    this.calculateAndSetDepartureTime((Activity)this.getCurrentPlanElement());  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Maybe<V> oneValue(final K key){  final ValueSubscriber<V> sub=ValueSubscriber.subscriber();  return get(key).peek(null).flatMap(null);}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.functions.Logistic";}  }
class C{  private void addNewEntries(DBTransaction transaction,Set<SearchIndexEntry> toAdd) throws SQLException {  PreparedStatement stmt=transaction.prepareStatement("INSERT INTO searchindex" + " (searchterm, entitytype, entityname, searchscore)" + " VALUES (?, ?, ?, ?)",null);  for (  SearchIndexEntry entry : toAdd) {    writeEntry(stmt,entry);  }  stmt.executeBatch();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.COMPLEX_ATTRIBUTE___UNIQUE_1:    return unique_1 != UNIQUE_1_EDEFAULT;case UmplePackage.COMPLEX_ATTRIBUTE___LAZY_1:  return lazy_1 != LAZY_1_EDEFAULT;case UmplePackage.COMPLEX_ATTRIBUTE___MODIFIER_1:return MODIFIER_1_EDEFAULT == null ? modifier_1 != null : !MODIFIER_1_EDEFAULT.equals(modifier_1);case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_11:return anonymous_complexAttribute_1_1 != null && !anonymous_complexAttribute_1_1.isEmpty();case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_21:return anonymous_complexAttribute_2_1 != null && !anonymous_complexAttribute_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public boolean okToSend(){  if (!opened) {    return true;  }synchronized (this) {    log.debug("XnTcpAdapter.okToSend = " + (pendingPackets < MAX_PENDING_PACKETS) + " (pending packets ="+ pendingPackets+ ")");    return pendingPackets < MAX_PENDING_PACKETS;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.970 -0500",hash_original_method="2270BC971D9C4F82FBD51366B809A76A",hash_generated_method="8BE728A10D6EDBA1FAE08A07F263A007") public Builder(ThreadPolicy policy){  mMask=policy.mask;}  }
class C{  private void order(Detail detail) throws Exception {  Class type=detail.getType();  builder.assemble(type);}  }
class C{  public void testGeneratorDelegate() throws IOException {  StringWriter sw=new StringWriter();  JsonGenerator jg=new JsonFactory().createJsonGenerator(sw);  jg.writeStartArray();  jg.writeNumber(13);  jg.writeNull();  jg.writeBoolean(false);  jg.writeEndArray();  jg.close();  assertTrue(jg.isClosed());  assertEquals("[13,null,false]",sw.toString());}  }
class C{  public static boolean addShapelessCraftingRecipe(ItemStack aResult,long aBitMask,Object[] aRecipe){  return addShapelessCraftingRecipe(aResult,new Enchantment[0],new int[0],(aBitMask & RecipeBits.BUFFERED) != 0,(aBitMask & RecipeBits.KEEPNBT) != 0,(aBitMask & RecipeBits.DISMANTLEABLE) != 0,(aBitMask & RecipeBits.NOT_REMOVABLE) == 0,aRecipe);}  }
class C{  public void addLabelToStorage(StorageData storageData,AbstractStorageLabel<?> storageLabel,boolean doOverwrite) throws IOException, SerializationException, BusinessException {  StorageData local=getLocalStorageDataObject(storageData);  if (null != local) {    local.addLabel(storageLabel,doOverwrite);    writeStorageDataToDisk(local);  }}  }
class C{  @Override public boolean isDebugEnabled(){  return true;}  }
class C{  public static void run(AdSenseHost service,String adClientId,String urlChannelId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Deleting URL channel %s\n",urlChannelId);  System.out.println("=================================================================");  UrlChannel urlChannel=service.urlchannels().delete(adClientId,urlChannelId).execute();  System.out.printf("URL channel with ID \"%s\" was deleted.\n",urlChannel.getId());  System.out.println();}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  private static void padInt(StringBuilder buffer,int value,int length){  String strValue=Integer.toString(value);  for (int i=length - strValue.length(); i > 0; i--) {    buffer.append('0');  }  buffer.append(strValue);}  }
class C{  public X509Certificate convertX509PemToCert(String x509InPem){  try {    PEMParser pemParser=new PEMParser(new StringReader(x509InPem));    JcaX509CertificateConverter x509CertificateConverter=new JcaX509CertificateConverter();    Object o=pemParser.readObject();    return x509CertificateConverter.getCertificate((X509CertificateHolder)o);  } catch (  Exception e) {    throw new RuntimeException("Failed to convert PEM to certificate",e);  }}  }
class C{  public void readExamples(DataRowReader i,boolean permute,Random random){  dataList.clear();  while (i.hasNext()) {    if (permute) {      if (random == null) {        random=new Random();      }      int index=random.nextInt(dataList.size() + 1);      dataList.add(index,i.next());    } else {      dataList.add(i.next());    }  }}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  int updateHistoryInTransaction(ContentValues values,String selection,String[] selectionArgs){  int count=0;  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  filterSearchClient(selectionArgs);  Cursor cursor=query(History.CONTENT_URI,new String[]{History._ID,History.URL},selection,selectionArgs,null);  try {    String[] args=new String[1];    boolean updatingUrl=values.containsKey(History.URL);    String url=null;    if (updatingUrl) {      url=filterSearchClient(values.getAsString(History.URL));      values.put(History.URL,url);    }    ContentValues imageValues=extractImageValues(values,url);    while (cursor.moveToNext()) {      args[0]=cursor.getString(0);      count+=db.update(TABLE_HISTORY,values,"_id=?",args);      if (imageValues != null) {        if (!updatingUrl) {          url=cursor.getString(1);          imageValues.put(Images.URL,url);        }        args[0]=url;        if (db.update(TABLE_IMAGES,imageValues,Images.URL + "=?",args) == 0) {          db.insert(TABLE_IMAGES,Images.FAVICON,imageValues);        }      }    }  }  finally {    if (cursor != null)     cursor.close();  }  return count;}  }
class C{  @Override protected boolean afterDelete(boolean success){  MAccount.updateValueDescription(getCtx(),"AD_Client_ID=" + getAD_Client_ID(),get_TrxName());  s_cache.clear();  return success;}  }
class C{  public static Bitmap rotateAndMirror(Bitmap b,int degrees,boolean mirror){  if ((degrees != 0 || mirror) && b != null) {    Matrix m=new Matrix();    if (mirror) {      m.postScale(-1,1);      degrees=(degrees + 360) % 360;      if (degrees == 0 || degrees == 180) {        m.postTranslate(b.getWidth(),0);      } else       if (degrees == 90 || degrees == 270) {        m.postTranslate(b.getHeight(),0);      } else {        throw new IllegalArgumentException("Invalid degrees=" + degrees);      }    }    if (degrees != 0) {      m.postRotate(degrees,(float)b.getWidth() / 2,(float)b.getHeight() / 2);    }    try {      Bitmap b2=Bitmap.createBitmap(b,0,0,b.getWidth(),b.getHeight(),m,true);      if (b != b2) {        b.recycle();        b=b2;      }    } catch (    OutOfMemoryError ex) {    }  }  return b;}  }
class C{  public EvalStateNodeNumber(){  stateNumber=new int[0];  computeHashCode();}  }
class C{  @RpcMethod public PowerVmOpResponse powerVmOp(String vmId,PowerVmOp op) throws InterruptedException, RpcException {  SyncHandler<PowerVmOpResponse,Host.AsyncClient.power_vm_op_call> syncHandler=new SyncHandler<>();  powerVmOp(vmId,op,syncHandler);  syncHandler.await();  logger.info("finished power_vm_op vm {}, target {}",vmId,getHostIp());  return ResponseValidator.checkPowerVmOpResponse(syncHandler.getResponse());}  }
class C{  public <T extends Item>ItemTypeDefinition<T> newTypedDefinition(T item){  final ItemTypeDefinition<T> def=new ItemTypeDefinition<T>(item);  all.add(def);  return def;}  }
class C{  private AllocatableValue moveSp(AllocatableValue val){  if (val instanceof RegisterValue && ((RegisterValue)val).getRegister().equals(sp)) {    assert val.getPlatformKind() == AArch64Kind.QWORD : "Stackpointer must be long";    return getLIRGen().emitMove(val);  }  return val;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:19.215 -0400",hash_original_method="E7CEA79E484E23FE3B17B1606FADFE49",hash_generated_method="BDB27921B6BF6868DA9405E0261F8CA9") public boolean isLeftToRight(){  return direction == UBiDiDirection_UBIDI_LTR;}  }
class C{  public static void upDateCountersTreatZeroAsMissing(ArrayList<Object> itemSets,Instances instances){  for (int i=0; i < instances.numInstances(); i++) {    Enumeration<Object> enu=new WekaEnumeration<Object>(itemSets);    while (enu.hasMoreElements()) {      ((ItemSet)enu.nextElement()).updateCounterTreatZeroAsMissing(instances.instance(i));    }  }}  }
class C{  public Set<ApiResourceMetadata> checkResource(String baseUrl,RamlResource resource,ApiResourceMetadata controller,RamlRoot document){  Set<ApiResourceMetadata> controllers=new LinkedHashSet<>();  String url=baseUrl + resource.getRelativeUri();  if (controller == null && shouldCreateController(resource)) {    controller=new ApiResourceMetadata(url,resource,basePackage,document);    controllers.add(controller);  }  if (resource.getActions() != null && !resource.getActions().isEmpty()) {    for (    Entry<RamlActionType,RamlAction> childResource : resource.getActions().entrySet()) {      RamlResponse response=null;      if (childResource.getValue().getResponses() != null) {        response=RamlHelper.getSuccessfulResponse(childResource.getValue());      }      if (seperateMethodsByContentType && response != null && response.hasBody() && response.getBody().size() > 1) {        for (        String responseType : response.getBody().keySet()) {          controller.addApiCall(resource,childResource.getKey(),childResource.getValue(),responseType,injectHttpHeadersParameter);        }      } else {        controller.addApiCall(resource,childResource.getKey(),childResource.getValue(),null,injectHttpHeadersParameter);      }    }  }  if (resource.getResources() != null && !resource.getResources().isEmpty()) {    for (    Entry<String,RamlResource> childResource : resource.getResources().entrySet()) {      controllers.addAll(checkResource(url,childResource.getValue(),controller,document));    }  }  return controllers;}  }
class C{  public static String fullWidthToHalfWidth(String s){  if (isEmpty(s)) {    return s;  }  char[] source=s.toCharArray();  for (int i=0; i < source.length; i++) {    if (source[i] == 12288) {      source[i]=' ';    } else     if (source[i] >= 65281 && source[i] <= 65374) {      source[i]=(char)(source[i] - 65248);    } else {      source[i]=source[i];    }  }  return new String(source);}  }
class C{  public Enumeration<String> engineAliases(){  return entries.keys();}  }
class C{  private SiteConfigParam prepareSiteConfigParam(List<Site> standbySites,String ipsecKey,String targetStandbyUUID,long targetStandbyDataRevision,long vdcConfigVersion,SecretKey secretKey){  log.info("Preparing to sync sites info among to be added/resumed standby site...");  Site active=drUtil.getActiveSite();  SiteConfigParam configParam=new SiteConfigParam();  SiteParam activeSite=new SiteParam();  siteMapper.map(active,activeSite);  activeSite.setIpsecKey(ipsecKey);  log.info("    active site info:{}",activeSite.toString());  configParam.setActiveSite(activeSite);  List<SiteParam> standbySitesParam=new ArrayList<>();  for (  Site standby : standbySites) {    SiteParam standbyParam=new SiteParam();    siteMapper.map(standby,standbyParam);    standbyParam.setSecretKey(new String(Base64.encodeBase64(secretKey.getEncoded()),Charset.forName("UTF-8")));    if (standby.getUuid().equals(targetStandbyUUID)) {      log.info("Set data revision for site {} to {}",standby.getUuid(),targetStandbyDataRevision);      standbyParam.setDataRevision(targetStandbyDataRevision);    }    standbySitesParam.add(standbyParam);    log.info("    standby site info:{}",standbyParam.toString());  }  configParam.setStandbySites(standbySitesParam);  configParam.setVdcConfigVersion(vdcConfigVersion);  PropertyInfoExt targetPropInfo=coordinator.getTargetInfo(PropertyInfoExt.class);  String ntpServers=targetPropInfo.getProperty(NTPSERVERS);  log.info("    active site ntp servers: {}",ntpServers);  configParam.setNtpServers(ntpServers);  return configParam;}  }
class C{  public String id(){  return id;}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  Body triangle=new SimulationBody();  triangle.addFixture(Geometry.createTriangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)));  triangle.translate(new Vector2(2.5,3));  triangle.setMass(MassType.INFINITE);  this.world.addBody(triangle);  Body circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.translate(new Vector2(3.2,3.5));  circle.setMass(MassType.INFINITE);  this.world.addBody(circle);  Body segment=new SimulationBody();  segment.addFixture(Geometry.createSegment(new Vector2(0.5,0.5),new Vector2(-0.5,0)));  segment.translate(new Vector2(4.2,4));  segment.setMass(MassType.INFINITE);  this.world.addBody(segment);  Body square=new SimulationBody();  square.addFixture(Geometry.createSquare(1.0));  square.translate(new Vector2(1.5,2.0));  square.setMass(MassType.INFINITE);  this.world.addBody(square);  Body polygon=new SimulationBody();  polygon.addFixture(Geometry.createUnitCirclePolygon(5,0.5));  polygon.translate(new Vector2(0.5,0));  polygon.setMass(MassType.INFINITE);  this.world.addBody(polygon);  Body capsule=new SimulationBody();  capsule.addFixture(Geometry.createCapsule(2,1));  capsule.translate(new Vector2(4.5,5.0));  capsule.setMass(MassType.INFINITE);  this.world.addBody(capsule);}  }
class C{  @Override protected int computeVerticalScrollRange(){  if (mHorizontal) {    return super.computeVerticalScrollRange();  }  final int count=getChildCount();  final int contentHeight=getHeight() - getPaddingBottom() - getPaddingTop();  if (count == 0) {    return contentHeight;  }  int scrollRange=getChildAt(0).getBottom();  final int scrollY=getScrollY();  final int overscrollBottom=Math.max(0,scrollRange - contentHeight);  if (scrollY < 0) {    scrollRange-=scrollY;  } else   if (scrollY > overscrollBottom) {    scrollRange+=scrollY - overscrollBottom;  }  return scrollRange;}  }
class C{  public LocalLoadGameCommand(Server server){  super(server,"localload","loads a game from the savegame directory of the client. ATTENTION: This will overwrite a savegame on the server of the same filename. Usage: /localload [filename]");}  }
class C{  private final boolean shouldRemoveNotice(ParserNotice notice,ParseResult res){  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: ... ... shouldRemoveNotice " + notice + ": "+ (notice.getParser() == res.getParser()));  }  return notice.getParser() == res.getParser();}  }
class C{  public final void testGetEncryptedData04(){  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      byte[] ecd1=epki.getEncryptedData();      byte[] ecd2=epki.getEncryptedData();      assertNotSame(EncryptedPrivateKeyInfoData.encryptedData,ecd1);      assertNotSame(EncryptedPrivateKeyInfoData.encryptedData,ecd2);      assertNotSame(ecd1,ecd2);      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @Override public SimpleEdgeStream<K,EV> filterEdges(FilterFunction<Edge<K,EV>> filter){  DataStream<Edge<K,EV>> remainingEdges=this.edges.filter(filter);  return new SimpleEdgeStream<>(remainingEdges,this.context);}  }
class C{  public PropertyPath(){}  }
class C{  public XYPlotArea2D(XYPlot plot){  this.plot=plot;  majorGridX=true;  majorGridY=true;  majorGridColor=new Color(0.0f,0.0f,0.0f,0.1f);  minorGridX=false;  minorGridY=false;  minorGridColor=new Color(0.0f,0.0f,0.0f,0.05f);}  }
class C{  public ChunkedHashStore(final TransformationStrategy<? super T> transform,final ProgressLogger pl) throws IOException {  this(transform,null,pl);}  }
class C{  public static boolean isBranchForYieldpoint(int inst){  int opcode;  int link;  opcode=bits(inst,0,5);  link=bits(inst,31,31);switch (opcode) {case 16:    return link == 1;}return false;}  }
class C{  public List<Exception> validateAnnotatedMethod(FrameworkMethod method){  return NO_VALIDATION_ERRORS;}  }
class C{  public AbstractDrawable(){  bounds=new Rectangle2D.Double();}  }
class C{  public void removeTreasureChest(){  if (currentTreasureChest == null)   return;  this.currentTreasureChest.clear();  this.currentTreasureChest=null;}  }
class C{  protected VCardParameter(String value,boolean preserveCase){  this.value=(value == null || preserveCase) ? value : value.toLowerCase();}  }
class C{  public static Wallet loadFromFileStream(InputStream stream) throws UnreadableWalletException {  Wallet wallet;  wallet=new MultiBitWalletProtobufSerializer().readWallet(stream);  if (!wallet.isConsistent()) {    log.error("Loaded an inconsistent wallet");  }  return wallet;}  }
class C{  public int loadInstruction8(int addr){  if (logMemoryMessages)   System.err.println("LoadI8 address: 0x" + Integer.toHexString(addr) + " val: "+ executableMemory[getPTE(addr)][getOffset(addr)]);  return executableMemory[getPTE(addr)][getOffset(addr)] & 0xFF;}  }
class C{  void createAFile(File aFile,List<String> contents) throws IOException {  IOException cause=null;  for (int attempts=0; attempts < 10; attempts++) {    try {      Files.write(aFile.getAbsoluteFile().toPath(),contents,Charset.defaultCharset(),CREATE,TRUNCATE_EXISTING,WRITE);      if (cause != null) {        System.err.println("Created batch file " + aFile + " in "+ (attempts + 1)+ " attempts");        System.err.println("Errors encountered: " + cause);        cause.printStackTrace();      }      return;    } catch (    IOException ioe) {      if (cause != null) {        cause.addSuppressed(ioe);      } else {        cause=ioe;      }    }    try {      Thread.sleep(500);    } catch (    InterruptedException ie) {      if (cause != null) {        ie.addSuppressed(cause);      }      throw new RuntimeException("Interrupted while creating batch file",ie);    }  }  throw new RuntimeException("Unable to create batch file",cause);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.476 -0400",hash_original_method="FFAC7C303832D87EA3757F73ECC9CF0F",hash_generated_method="97D4206E523BA3252F44669193A79E5B") @Override public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:11.108 -0500",hash_original_method="AF6407614B20F66E7E774377847CB658",hash_generated_method="FBE12C8DC4EE2A8564D85027E19564BE") public void addState(int[] stateSet,Drawable drawable){  if (drawable != null) {    mStateListState.addStateSet(stateSet,drawable);    onStateChange(getState());  }}  }
class C{  public static String generateXPath(Node node,String parentXPath,boolean ignoreWhitespace,boolean includeValues,boolean noIndex){  boolean noValues=!includeValues;  if (node == null)   return "";  Node parent=node.getParentNode();  int index=noIndex ? 0 : getXPathNodeIndex(node,ignoreWhitespace);  String indexStr="";  if (index > 0)   indexStr="[" + Integer.toString(index) + "]";  if (node.getNodeType() == Node.DOCUMENT_NODE) {    return parentXPath + "";  } else   if (node.getNodeType() == Node.TEXT_NODE) {    return parentXPath + (noValues ? "/" + node.getNodeValue() + indexStr : "/TEXT(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.ELEMENT_NODE) {    return parentXPath + "/" + node.getNodeName()+ indexStr;  } else   if (node.getNodeType() == Node.COMMENT_NODE) {    return parentXPath + (noValues ? "/" + node.getNodeValue() + indexStr : "/COMMENT(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.ENTITY_REFERENCE_NODE) {    return parentXPath + (noValues ? "/" + node.getNodeValue() + indexStr : "/EntityReference(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {    return parentXPath + (noValues ? "/" + node.getNodeValue() + indexStr : "/PI(" + node.getNodeValue() + ")"+ indexStr);  } else   if (node.getNodeType() == Node.ATTRIBUTE_NODE) {    return parentXPath + "/[@" + node.getNodeName()+ (noValues ? "" : "=" + node.getNodeValue())+ "]";  } else   if (node.getNodeType() == Node.DOCUMENT_TYPE_NODE) {    return parentXPath + (noValues ? "/" + node.getNodeValue() : "/DOCTYPE(" + node.getNodeName() + ")");  } else   if (node.getNodeType() == Node.CDATA_SECTION_NODE) {    return parentXPath + (noValues ? "/" + node.getNodeValue() : "/CDATA(" + node.getNodeName() + ")");  }  return "";}  }
class C{  public static Bitmap scaleFit(Bitmap src,int maxW,int maxH){  float ratio=Math.min(maxW / (float)src.getWidth(),maxH / (float)src.getHeight());  int newW=(int)(src.getWidth() * ratio);  int newH=(int)(src.getHeight() * ratio);  return scale(src,newW,newH);}  }
class C{  @Override protected void onUpdateBgPadding(Rect padding,Rect bgPadding){  mAppsRecyclerView.updateBackgroundPadding(bgPadding);  mAdapter.updateBackgroundPadding(bgPadding);  mElevationController.updateBackgroundPadding(bgPadding);  int maxScrollBarWidth=mAppsRecyclerView.getMaxScrollbarWidth();  int startInset=Math.max(mSectionNamesMargin,maxScrollBarWidth);  int topBottomPadding=mRecyclerViewTopBottomPadding;  if (Utilities.isRtl(getResources())) {    mAppsRecyclerView.setPadding(padding.left + maxScrollBarWidth,topBottomPadding,padding.right + startInset,topBottomPadding);  } else {    mAppsRecyclerView.setPadding(padding.left + startInset,topBottomPadding,padding.right + maxScrollBarWidth,topBottomPadding);  }  MarginLayoutParams lp=(MarginLayoutParams)mSearchContainer.getLayoutParams();  lp.leftMargin=padding.left;  lp.rightMargin=padding.right;  mSearchContainer.setLayoutParams(lp);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void notifyDataAdded(DataChangeEvent... events){  List<DataListener> listeners=new LinkedList<DataListener>(dataListeners);  for (  DataListener dataListener : listeners) {    dataListener.dataAdded(this,events);  }}  }
class C{  public final void addAll(int[] elements){  int free=(length & 0x3FF);  int bite=free == 0 ? 0 : Math.min(elements.length,0x400 - free);  if (bite > 0) {    System.arraycopy(elements,0,pages.get(length >> 10),length & 0x3FF,bite);    length+=bite;  }  int copied=bite;  while (copied < elements.length) {    pages.add(page=new int[0x400]);    bite=Math.min(elements.length - copied,0x400);    System.arraycopy(elements,copied,page,0,bite);    copied+=bite;    length+=bite;  }}  }
class C{  public JavaClassConverter(final ClassLoaderReference classLoaderReference){  this(new DefaultMapper(classLoaderReference));}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_predicateIndex=-1;  AxesWalker walker=m_firstWalker;  while (null != walker) {    walker.fixupVariables(vars,globalsSize);    walker=walker.getNextWalker();  }}  }
class C{  public static int len(Object value){  return XUtils.len(value);}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  protected void performTest(boolean nomClass){  TestInstances test;  Instances data;  double[] originalResults;  double[] testResults;  int i;  try {    test=new TestInstances();    if (nomClass) {      test.setClassType(Attribute.NOMINAL);      test.setNumNominal(5);      test.setNumNominalValues(4);      test.setNumNumeric(0);    } else {      test.setClassType(Attribute.NUMERIC);      test.setNumNominal(0);      test.setNumNumeric(5);    }    test.setNumDate(0);    test.setNumString(0);    test.setNumRelational(0);    test.setNumInstances(100);    data=test.generate();  } catch (  Exception e) {    fail("Generating test data failed: " + e);    return;  }  try {    originalResults=trainAndSerializeClassifier(data);  } catch (  Exception e) {    fail("Training base classifier failed: " + e);    return;  }  try {    m_Classifier=new SerializedClassifier();    m_Classifier.setModelFile(new File(MODEL_FILENAME));    m_Classifier.buildClassifier(data);  } catch (  Exception e) {    fail("Loading/testing of classifier failed: " + e);  }  try {    testResults=new double[data.numInstances()];    for (i=0; i < testResults.length; i++) {      testResults[i]=m_Classifier.classifyInstance(data.instance(i));    }    for (i=0; i < originalResults.length; i++) {      if (originalResults[i] != testResults[i]) {        throw new Exception("Result #" + (i + 1) + " differs!");      }    }  } catch (  Exception e) {    fail("Comparing results failed: " + e);  }}  }
class C{  public LinearInterpolator(Calendar[] dates,double[] values){  this.values=values;  timestamps=new long[dates.length];  for (int i=0; i < dates.length; i++) {    timestamps[i]=Util.getTimestamp(dates[i]);  }  validate();}  }
class C{  public OpenIndexRequest(String... indices){  this.indices=indices;}  }
class C{  public void clean(int size){  if (fifo.size() > size) {    while (size > 0) {      fifo.removeElementAt(0);      nbObjects--;      size--;    }  }}  }
class C{  @Override public String toString(){  return this.type;}  }
class C{  public void manageAttributes(ZoneAttributes attr){  zones.add(attr);  attr.put("color_method","multiply");  setZoneColor(attr,currentColor);}  }
class C{  public static RenderedImage process1CImage(RenderedImageAdapter input,int bands,int horizontal_padding,int vertical_padding){  DrbCollectionImage source=(DrbCollectionImage)input.getWrappedImage();  return process1CImage(source,bands,horizontal_padding,vertical_padding);}  }
class C{  public void testCloneImmutables(){  final String s="test1";  final String clone1=cloner.deepClone(s);  assertSame(s,clone1);}  }
class C{  public void parse(final String osmFilename){  parse(osmFilename,null);}  }
class C{  public static long opaque(long value){  return value;}  }
class C{  protected int defaultNumIrrelevant(){  return 0;}  }
class C{  public DSAPrivateKeySpec(BigInteger x,BigInteger p,BigInteger q,BigInteger g){  this.x=x;  this.p=p;  this.q=q;  this.g=g;}  }
class C{  public void addView(final INaviView view){  Preconditions.checkNotNull(view,"IE00232: View argument can't be null");  Preconditions.checkArgument(view.getType() == ViewType.NonNative,"IE00233: Only non-native views can be added to projects");  Preconditions.checkArgument(!m_views.contains(view),"IE00235: View can not be added to the project more than once");  Preconditions.checkArgument(view.inSameDatabase(m_provider),"IE00236: View and project are not in the same database");  m_views.add(view);  for (  final IProjectListener listener : m_listeners) {    try {      listener.addedView(m_project,view);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public IgnoreResourceException(Throwable cause){  super();  this.initCause(cause);}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Factory useFactory=null;  if (isQueryMethod(method)) {    useFactory=Factory.query;  } else   if (isCreatorMethod(method)) {    useFactory=Factory.creator;  } else {    useFactory=defaultFactory;  }  return delegate(method,args,factories.get(useFactory));}  }
class C{  public static Decimal negativeZero(int scale){  return new NegativeZero(scale);}  }
class C{  public static float calculateHeight(float left,float right,float targetAspectRatio){  final float width=right - left;  final float height=width / targetAspectRatio;  return height;}  }
class C{  private Object readResolve(){  return this;}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (list.get(maxIndex).compareTo(list.get(rightChildIndex)) < 0) {        maxIndex=rightChildIndex;      }    }    if (list.get(currentIndex).compareTo(list.get(maxIndex)) < 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  public static IMouseStateChange changeEdge(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final Edge oldEdge){  final Edge edge=hitInfo.getHitEdge();  if (edge == oldEdge) {    return new CStateChange(m_factory.createEdgeHoverState(edge,event),true);  } else {    m_factory.createEdgeExitState(oldEdge,event);    return new CStateChange(m_factory.createEdgeEnterState(edge,event),true);  }}  }
class C{  public void hideWindow(){  doHide();}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  MLocator locator=MLocator.get(getCtx(),p_M_Locator_ID);  MWMInOutBound outbound=new MWMInOutBound(getCtx(),0,get_TrxName());  outbound.setShipDate(p_ShipDate);  outbound.setPickDate(p_PickDate);  if (p_POReference != null) {    outbound.setPOReference(p_POReference);  }  if (p_DeliveryRule != null) {    outbound.setDeliveryRule(p_DeliveryRule);  }  if (p_C_DocType_ID > 0) {    outbound.setC_DocType_ID(p_C_DocType_ID);  } else {    int C_DocType_ID=MDocType.getDocType(MDocType.DOCBASETYPE_WarehouseManagementOrder);    if (C_DocType_ID <= 0) {      throw new DocTypeNotFoundException(MDocType.DOCBASETYPE_WarehouseManagementOrder,"");    } else {      outbound.setC_DocType_ID(C_DocType_ID);    }  }  if (p_DocAction != null)   outbound.setDocAction(p_DocAction); else   outbound.setDocAction(MWMInOutBound.ACTION_Prepare);  outbound.setDocStatus(MWMInOutBound.DOCSTATUS_Drafted);  outbound.setM_Warehouse_ID(locator.getM_Warehouse_ID());  outbound.setIsSOTrx(true);  outbound.saveEx();  int seq=10;  String whereClause="EXISTS (SELECT T_Selection_ID FROM T_Selection WHERE  T_Selection.AD_PInstance_ID=? AND T_Selection.T_Selection_ID=C_OrderLine.C_OrderLine_ID)";  Collection<MOrderLine> olines=new Query(getCtx(),I_C_OrderLine.Table_Name,whereClause,get_TrxName()).setClient_ID().setParameters(new Object[]{getAD_PInstance_ID()}).list();  for (  MOrderLine oline : olines) {    MWMInOutBoundLine boundline=new MWMInOutBoundLine(outbound);    boundline.setLine(seq);    boundline.setM_Product_ID(oline.getM_Product_ID());    boundline.setM_AttributeSetInstance_ID(oline.getM_AttributeSetInstance_ID());    boundline.setMovementQty(oline.getQtyOrdered().subtract(oline.getQtyDelivered()));    boundline.setC_UOM_ID(oline.getC_UOM_ID());    boundline.setDescription(oline.getDescription());    boundline.setC_OrderLine_ID(oline.getC_OrderLine_ID());    boundline.setPickDate(outbound.getPickDate());    boundline.setShipDate(outbound.getShipDate());    boundline.saveEx();    seq++;  }  return "@DocumentNo@ " + outbound.getDocumentNo();}  }
class C{  public int next(){  return NativeCollation.next(address);}  }
class C{  @Override protected LocalDataList doInBackground(ContentResolver... resolver){  LocalDataList l=new LocalDataList();  Cursor c=resolver[0].query(LocalMediaData.PhotoData.CONTENT_URI,LocalMediaData.PhotoData.QUERY_PROJECTION,MediaStore.Images.Media.DATA + " like ? or " + MediaStore.Images.Media.DATA+ " like ? ",CAMERA_PATH,LocalMediaData.PhotoData.QUERY_ORDER);  if (c != null && c.moveToFirst()) {    while (true) {      LocalData data=LocalMediaData.PhotoData.buildFromCursor(c);      if (data != null) {        if (data.getMimeType().equals(PlaceholderManager.PLACEHOLDER_MIME_TYPE)) {          l.add(new InProgressDataWrapper(data,true));        } else {          l.add(data);        }      } else {        Log.e(TAG,"Error loading data:" + c.getString(LocalMediaData.PhotoData.COL_DATA));      }      if (c.isLast()) {        break;      }      c.moveToNext();    }  }  if (c != null) {    c.close();  }  c=resolver[0].query(LocalMediaData.VideoData.CONTENT_URI,LocalMediaData.VideoData.QUERY_PROJECTION,MediaStore.Video.Media.DATA + " like ? or " + MediaStore.Video.Media.DATA+ " like ? ",CAMERA_PATH,LocalMediaData.VideoData.QUERY_ORDER);  if (c != null && c.moveToFirst()) {    c.moveToFirst();    while (true) {      LocalData data=LocalMediaData.VideoData.buildFromCursor(c);      if (data != null) {        l.add(data);      } else {        Log.e(TAG,"Error loading data:" + c.getString(LocalMediaData.VideoData.COL_DATA));      }      if (!c.isLast()) {        c.moveToNext();      } else {        break;      }    }  }  if (c != null) {    c.close();  }  if (l.size() != 0) {    l.sort(new LocalData.NewestFirstComparator());  }  return l;}  }
class C{  public HelloMessage(HelloMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.nodeId=other.nodeId;  if (other.isSetAuthScheme()) {    this.authScheme=other.authScheme;  }  if (other.isSetAuthChallengeResponse()) {    this.authChallengeResponse=new AuthChallengeResponse(other.authChallengeResponse);  }}  }
class C{  public static void saveToDiskCache(Context context,String key,Object object){  if (objectCache == null || objectCache.isClosed()) {    try {      setupDiskLruCache(new File(context.getFilesDir().getAbsolutePath() + File.separator + OBJECT_CACHE_DIR),OBJECT_CACHE_DISK_MB);    } catch (    IOException e) {      Log.w(CacheUtil.class.getSimpleName(),"Error setting up object disk LRU cache",e);      return;    }  }  try {    DiskLruCache.Editor editor=objectCache.edit(key);    if (editor == null) {      return;    }    long timeCurrent=System.currentTimeMillis();    editor.set(INDEX_TIME_MODIFIED,String.valueOf(timeCurrent));    OutputStream outputStream=editor.newOutputStream(INDEX_OBJECT_DATA);    ObjectOutput objectOutput=new ObjectOutputStream(outputStream);    objectOutput.writeObject(object);    editor.commit();  } catch (  Exception e) {    Log.w(CacheUtil.class.getSimpleName(),"Error writing object to cache",e);  }}  }
class C{  public double manhattanDistance(final MutableInt3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  public DoubleMatrix2D solve(DoubleMatrix2D B){  cern.jet.math.Functions F=cern.jet.math.Functions.functions;  if (B.rows() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.hasFullRank()) {    throw new IllegalArgumentException("Matrix is rank deficient.");  }  int nx=B.columns();  DoubleMatrix2D X=B.copy();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      double s=0.0;      for (int i=k; i < m; i++) {        s+=QR.getQuick(i,k) * X.getQuick(i,j);      }      s=-s / QR.getQuick(k,k);      for (int i=k; i < m; i++) {        X.setQuick(i,j,X.getQuick(i,j) + s * QR.getQuick(i,k));      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X.setQuick(k,j,X.getQuick(k,j) / Rdiag.getQuick(k));    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X.setQuick(i,j,X.getQuick(i,j) - X.getQuick(k,j) * QR.getQuick(i,k));      }    }  }  return X.viewPart(0,0,n,nx);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ENUM___ANONYMOUS_ENUM_11:    return ((InternalEList<?>)getAnonymous_enum_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Transactional public <VO>VO createByPO(Class<VO> voType,T inputPO,User currentUser) throws Exception {  return transformer.po2VO(voType,createByPO(inputPO,currentUser));}  }
class C{  public synchronized void insertHotMethods(int filterOptLevel,double threshold){  if (DEBUG)   validityCheck();  insertHotMethodsInternal(1,filterOptLevel,hotnessToCounts(threshold));}  }
class C{  public static String substituteNamedParameters(ParsedSql parsedSql){  String originalSql=parsedSql.getOriginalSql();  StringBuilder actualSql=new StringBuilder();  List paramNames=parsedSql.getParameterNames();  int lastIndex=0;  for (int i=0; i < paramNames.size(); i++) {    String paramName=(String)paramNames.get(i);    int[] indexes=parsedSql.getParameterIndexes(i);    int startIndex=indexes[0];    int endIndex=indexes[1];    actualSql.append(originalSql.substring(lastIndex,startIndex));    actualSql.append("?");    lastIndex=endIndex;  }  actualSql.append(originalSql.substring(lastIndex,originalSql.length()));  return actualSql.toString();}  }
class C{  @Override protected void map(LongWritable key,Text val,Context ctx) throws IOException, InterruptedException {  final String line=val.toString();  final String[] words=line.split("[^a-zA-Z0-9]");  for (  final String w : words) {    if (w.length() <= 3)     continue;    word.set(w);    ctx.write(word,ONE);  }}  }
class C{  public Node nextNode(Node node,Node root){  if (node == null) {    return null;  }  Node nextNode=node.getNextSibling();  Node parent=node.getParentNode();  while ((nextNode == null) && (parent != null)) {    if (parent == root) {      return null;    }    nextNode=parent.getNextSibling();    parent=parent.getParentNode();  }  return nextNode;}  }
class C{  ClassLoaderBox(JobClassLoader cl,int users){  this.cl=cl;  this.users=users;  unusedFrom=System.currentTimeMillis();}  }
class C{  public void registerProxy(Proxy proxy){  proxyMap.put(proxy.getProxyName(),proxy);  proxy.onRegister();}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  @Override public TextureData newTextureData(final GLProfile glp,final File file,final int internalFormat,final int pixelFormat,final boolean mipmap,final String fileSuffix) throws IOException {  final IScope scope=GAMA.getRuntimeScope();  final GamaImageFile f=new GamaImageFile(scope,file.getAbsolutePath());  if (f.getExtension(scope).equals("pgm")) {    final BufferedImage image=f.getImage(scope);    return AWTTextureIO.newTextureData(glp,image,internalFormat,pixelFormat,mipmap);  } else {    return null;  }}  }
class C{  public ArrayModel(Object array,BeansWrapper wrapper){  super(array,wrapper);  Class clazz=array.getClass();  if (!clazz.isArray())   throw new IllegalArgumentException("Object is not an array, it's " + array.getClass().getName());  length=Array.getLength(array);}  }
class C{  protected boolean matchSelf(MetadataReader metadataReader){  return false;}  }
class C{  protected NBTTagCompound createPatternTag(TileEntityBanner.EnumBannerPattern pattern,EnumDyeColor color){  final NBTTagCompound tag=new NBTTagCompound();  tag.setString("Pattern",pattern.getPatternID());  tag.setInteger("Color",color.getDyeDamage());  return tag;}  }
class C{  static Map<String,Object> parseParameters(String args[]) throws Exception {  debug(DEBUG_STANDARD,"TestRoot::parseParameters: Start");  HashMap<String,Object> map=new HashMap<>();  for (int i=0; i < args.length; i++) {    if (args[i].trim().startsWith("-")) {      if ((i + 1) < args.length && !args[i + 1].startsWith("-")) {        debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with value "+ args[i + 1]);        map.put(args[i].trim(),args[i + 1].trim());      } else       if ((i + 1) < args.length && args[i + 1].startsWith("-") || (i + 1) == args.length) {        debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with null value");        map.put(args[i].trim(),null);      } else {        System.out.println("TestRoot::parseParameters: (WARNING) not added in map = " + args[i]);      }    }  }  debug(DEBUG_STANDARD,"TestRoot::parseParameters: Done");  return map;}  }
class C{  public static String replaceMap(String input,Map map,boolean ignoreCase) throws PageException {  return replaceMap(input,map,ignoreCase,true);}  }
class C{  final public int remaining(){  return limit - pos;}  }
class C{  public static final void sendString(Context c,String stringToSend,String chooserDialogTitle){  Intent send=new Intent(Intent.ACTION_SEND);  send.setType("text/plain");  send.putExtra(Intent.EXTRA_TEXT,stringToSend);  try {    Intent i=Intent.createChooser(send,chooserDialogTitle);    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    c.startActivity(i);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public final static String xmlEncodeTextAsPCDATA(String text){  if (text == null)   return null;  char c;  StringBuffer n=new StringBuffer(text.length() * 2);  for (int i=0; i < text.length(); i++) {    c=text.charAt(i);switch (c) {case '&':      n.append("&amp;");    break;case '<':  n.append("&lt;");break;case '>':n.append("&gt;");break;case '"':n.append("&quot;");break;case '\'':n.append("&apos;");break;default :{n.append(c);break;}}}return n.toString();}  }
class C{  @Override public void showToastMessage(String s){  Toast.makeText(getContext(),s,Toast.LENGTH_SHORT).show();}  }
class C{  public void reply(List<String> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(SpdyStream.this));  boolean outFinished=false;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (isLocallyInitiated()) {      throw new IllegalStateException("cannot reply to a locally initiated stream");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.out.finished=true;      outFinished=true;    }  }  connection.writeSynReply(id,outFinished,responseHeaders);}  }
class C{  @Deprecated public static <T>UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  public RangeCountProcedure(){  super();}  }
class C{  @Deprecated public CloudSolrClient(Collection<String> zkHosts,String chroot,HttpClient httpClient,LBHttpSolrClient lbSolrClient,boolean updatesToLeaders){  this(zkHosts,chroot,httpClient,lbSolrClient,null,updatesToLeaders,false);}  }
class C{  public void finalize() throws Throwable {  if (getModel() != null)   ((ResultSetTableModel)getModel()).finalize();  super.finalize();  System.gc();}  }
class C{  public Environment(Environment parent){  super();  this.parent=parent;  memory=new HashMap<String,Object>();}  }
class C{  public GroovyFieldDoc[] enumConstants(){  Collections.sort(enumConstants);  return enumConstants.toArray(new GroovyFieldDoc[enumConstants.size()]);}  }
class C{  private StoragePolicy createStoragePolicyFromEntity(StoragePolicyEntity storagePolicyEntity){  StoragePolicy storagePolicy=new StoragePolicy();  storagePolicy.setId(storagePolicyEntity.getId());  StoragePolicyKey storagePolicyKey=new StoragePolicyKey();  storagePolicy.setStoragePolicyKey(storagePolicyKey);  storagePolicyKey.setNamespace(storagePolicyEntity.getNamespace().getCode());  storagePolicyKey.setStoragePolicyName(storagePolicyEntity.getName());  StoragePolicyRule storagePolicyRule=new StoragePolicyRule();  storagePolicy.setStoragePolicyRule(storagePolicyRule);  storagePolicyRule.setRuleType(storagePolicyEntity.getStoragePolicyRuleType().getCode());  storagePolicyRule.setRuleValue(storagePolicyEntity.getStoragePolicyRuleValue());  StoragePolicyFilter storagePolicyFilter=new StoragePolicyFilter();  storagePolicy.setStoragePolicyFilter(storagePolicyFilter);  storagePolicyFilter.setNamespace(storagePolicyEntity.getBusinessObjectDefinition() != null ? storagePolicyEntity.getBusinessObjectDefinition().getNamespace().getCode() : null);  storagePolicyFilter.setBusinessObjectDefinitionName(storagePolicyEntity.getBusinessObjectDefinition() != null ? storagePolicyEntity.getBusinessObjectDefinition().getName() : null);  storagePolicyFilter.setBusinessObjectFormatUsage(storagePolicyEntity.getUsage());  storagePolicyFilter.setBusinessObjectFormatFileType(storagePolicyEntity.getFileType() != null ? storagePolicyEntity.getFileType().getCode() : null);  storagePolicyFilter.setStorageName(storagePolicyEntity.getStorage().getName());  StoragePolicyTransition storagePolicyTransition=new StoragePolicyTransition();  storagePolicy.setStoragePolicyTransition(storagePolicyTransition);  storagePolicyTransition.setDestinationStorageName(storagePolicyEntity.getDestinationStorage().getName());  storagePolicy.setStatus(storagePolicyEntity.getStatus().getCode());  return storagePolicy;}  }
class C{  private int addCount(double[] observation,int[] neighbourBinIndices,int currentIndex,int currentIndexValue,boolean possibleCentralBin,boolean dynCorrExclusion,int timeStep,boolean[] isCorrelatedWithArgument){  int count=0;  if (currentIndexValue < 0) {    return 0;  }  if (currentIndexValue >= bins[currentIndex]) {    return 0;  }  neighbourBinIndices[currentIndex]=currentIndexValue;  if (currentIndex == dimensions - 1) {    if (possibleCentralBin) {      return 0;    }    if (usingIntegerIndexBins) {      int multiDimIndex=getMultiDimBinIndexFromSingles(neighbourBinIndices);      for (int i=0; i < observations[multiDimIndex].size(); i++) {        TimeStampedObservation tso=(TimeStampedObservation)observations[multiDimIndex].elementAt(i);        if (!dynCorrExclusion || (Math.abs(tso.timeStep - timeStep) >= timeProximityForDynamicCorrelationExclusion)) {          int thisStepKernelValue=stepKernel(observation,tso.observation);          count+=thisStepKernelValue;          if (isCorrelatedWithArgument != null) {            isCorrelatedWithArgument[tso.timeStep]=(thisStepKernelValue > 0);          }          if (makeCorrelatedPointAddedCallback && (thisStepKernelValue > 0)) {            correlatedPointAddedCallback(tso.timeStep);          }        }      }    } else {      IntArray intArrayBinNeighbourIndices=new IntArray(neighbourBinIndices);      Vector<TimeStampedObservation> observationsInThisBin=(Vector<TimeStampedObservation>)observationsByHash.get(intArrayBinNeighbourIndices);      if (observationsInThisBin != null) {        for (int i=0; i < observationsInThisBin.size(); i++) {          TimeStampedObservation tso=(TimeStampedObservation)observationsInThisBin.elementAt(i);          if (!dynCorrExclusion || (Math.abs(tso.timeStep - timeStep) >= timeProximityForDynamicCorrelationExclusion)) {            int thisStepKernelValue=stepKernel(observation,tso.observation);            count+=thisStepKernelValue;            if (isCorrelatedWithArgument != null) {              isCorrelatedWithArgument[tso.timeStep]=(thisStepKernelValue > 0);            }            if (makeCorrelatedPointAddedCallback && (thisStepKernelValue > 0)) {              correlatedPointAddedCallback(tso.timeStep);            }          }        }      }    }  } else {    count+=addCount(observation,neighbourBinIndices,currentIndex + 1,getBinIndex(observation[currentIndex + 1],currentIndex + 1) - 1,false,dynCorrExclusion,timeStep,isCorrelatedWithArgument);    count+=addCount(observation,neighbourBinIndices,currentIndex + 1,getBinIndex(observation[currentIndex + 1],currentIndex + 1),possibleCentralBin,dynCorrExclusion,timeStep,isCorrelatedWithArgument);    count+=addCount(observation,neighbourBinIndices,currentIndex + 1,getBinIndex(observation[currentIndex + 1],currentIndex + 1) + 1,false,dynCorrExclusion,timeStep,isCorrelatedWithArgument);  }  return count;}  }
class C{  public SRTSubtitleHandler(sage.media.format.ContainerFormat inFormat){  super(inFormat);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.viewPager=(ViewPager)this.findViewById(R.id.view_pager_vp);  this.tabLayout=(TabLayout)this.findViewById(R.id.tab_layout_tl);}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void updateHighlightSetUsername(String username){  highlighter.setUsername(username);  highlighter.setHighlightUsername(client.settings.getBoolean("highlightUsername"));}  }
class C{  void clearCaches(){  this.cache.clear();  this.foundAnyCache.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:50.573 -0500",hash_original_method="168A662ECD22EEAD4E32FE6198805EA1",hash_generated_method="6C8AABDB23FCD56F16C601B818F2CCC3") public UsbInterface(int id,int Class,int subClass,int protocol,Parcelable[] endpoints){  mId=id;  mClass=Class;  mSubclass=subClass;  mProtocol=protocol;  mEndpoints=endpoints;}  }
class C{  @Override public void generateCode(BlockScope currentScope){}  }
class C{  public void cmd_text(){  String text=getComponent().getText();  log.info("Text=" + text);  if (text == null || text.length() == 0 || text.equals("%")) {    cmd_button();    return;  }  if (!text.endsWith("%"))   text+="%";  String sql="SELECT C_ValidCombination_ID FROM C_ValidCombination " + "WHERE C_AcctSchema_ID=?" + " AND (UPPER(Alias) LIKE ? OR UPPER(Combination) LIKE ?)";  sql=MRole.getDefault().addAccessSQL(sql,"C_ValidCombination",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  int C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),gridField.getWindowNo(),"C_AcctSchema_ID");  int C_ValidCombination_ID=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_AcctSchema_ID);    pstmt.setString(2,text.toUpperCase());    pstmt.setString(3,text.toUpperCase());    rs=pstmt.executeQuery();    if (rs.next()) {      C_ValidCombination_ID=rs.getInt(1);      if (rs.next())       C_ValidCombination_ID=0;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (C_ValidCombination_ID > 0) {    Integer newValue=new Integer(C_ValidCombination_ID);    Object oldValue=m_value;    m_value=newValue;    ValueChangeEvent changeEvent=new ValueChangeEvent(this,this.getColumnName(),oldValue,newValue);    fireValueChange(changeEvent);  } else   cmd_button();}  }
class C{  public static void addColTimes(DenseDoubleMatrix2D matrix,long diag,long fromRow,long col,double factor){  long rows=matrix.getRowCount();  for (long row=fromRow; row < rows; row++) {    matrix.setDouble(matrix.getDouble(row,col) - factor * matrix.getDouble(row,diag),row,col);  }}  }
class C{  public int startsWith(String aWord){  for (  String m : getAll()) {    if (aWord.startsWith(m)) {      return m.length();    }  }  return -1;}  }
class C{  public static void writeTestFrame(String file,double[][] data,ValueType[] schema,OutputInfo oi,boolean isR) throws DMLRuntimeException, IOException {  FrameWriter writer=FrameWriterFactory.createFrameWriter(oi);  FrameBlock frame=new FrameBlock(schema);  initFrameData(frame,data,schema,data.length);  writer.writeFrameToHDFS(frame,file,data.length,schema.length);}  }
class C{  public HibernatePersistentSortedSetConverter(final Mapper mapper){  super(mapper);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  return null;}  }
class C{  public NoSuchBucketPolicyException(String bucketName,String objectPrefix,BucketPolicy bucketPolicy){  super();  this.bucketName=bucketName;  this.objectPrefix=objectPrefix;  this.bucketPolicy=bucketPolicy;}  }
class C{  public void paint(Graphics g){  if (thumbnail == null) {    loadImage();  }  if (thumbnail != null) {    int x=(getWidth() / 2) - (thumbnail.getIconWidth() / 2);    int y=(getHeight() / 2) - (thumbnail.getIconHeight() / 2);    if (y < 0) {      y=0;    }    if (x < 5) {      x=5;    }    thumbnail.paintIcon(this,g,x,y);  }}  }
class C{  public void resetCv(int cv,int val){  mValues.put(cv,val);}  }
class C{  protected final int normalizeUpdateCount(int value){  if (value == Statement.SUCCESS_NO_INFO) {    value=1;  }  return value;}  }
class C{  @Override protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"M_MovementLine"));    return false;  }  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM M_MovementLine WHERE M_Movement_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getM_Movement_ID());    setLine(ii);  }  if (getM_Locator_ID() == getM_LocatorTo_ID() && getM_AttributeSetInstance_ID() == getM_AttributeSetInstanceTo_ID()) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@M_Locator_ID@ == @M_LocatorTo_ID@ and @M_AttributeSetInstance_ID@ == @M_AttributeSetInstanceTo_ID@"));    return false;  }  if (getMovementQty().signum() == 0) {    if (MMovement.DOCACTION_Void.equals(getParent().getDocAction()) && (MMovement.DOCSTATUS_Drafted.equals(getParent().getDocStatus()) || MMovement.DOCSTATUS_Invalid.equals(getParent().getDocStatus()) || MMovement.DOCSTATUS_InProgress.equals(getParent().getDocStatus())|| MMovement.DOCSTATUS_Approved.equals(getParent().getDocStatus())|| MMovement.DOCSTATUS_NotApproved.equals(getParent().getDocStatus()))) {    } else {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"MovementQty"));      return false;    }  }  if (newRecord || is_ValueChanged(COLUMNNAME_MovementQty))   setMovementQty(getMovementQty());  MProduct product=getProduct();  if (getM_AttributeSetInstance_ID() == 0) {    if (product != null && product.isASIMandatory(false,getAD_Org_ID())) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),COLUMNNAME_M_AttributeSetInstance_ID));      return false;    }  }  if (getM_AttributeSetInstanceTo_ID() == 0) {    if (getM_Locator_ID() != getM_LocatorTo_ID()) {      if (getM_AttributeSetInstance_ID() != 0)       setM_AttributeSetInstanceTo_ID(getM_AttributeSetInstance_ID());    }    if (product != null && product.isASIMandatory(true,getAD_Org_ID()) && getM_AttributeSetInstanceTo_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),COLUMNNAME_M_AttributeSetInstanceTo_ID));      return false;    }  }  return true;}  }
class C{  public static NodesInfoRequest nodesInfoRequest(){  return new NodesInfoRequest();}  }
class C{  @Override @CallSuper public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  restartLoader();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public XNumber(Number num){  super();  m_val=num.doubleValue();  setObject(num);}  }
class C{  private byte[] updateNoDictionaryStartAndEndKey(byte[] key){  if (key.length == 0) {    return key;  }  ByteBuffer buffer=ByteBuffer.wrap(key,2,key.length - 2);  ByteBuffer output=ByteBuffer.allocate(key.length - 2);  short numberOfByteToStorLength=2;  for (int i=0; i < numberOfNoDictionaryColumn; i++) {    output.putShort((short)(buffer.getShort() - numberOfByteToStorLength));  }  while (buffer.hasRemaining()) {    output.put(buffer.get());  }  output.rewind();  return output.array();}  }
class C{  public static Map<String,String> toMap(JSONObject j) throws JSONException {  return toMap(j,new HashMap<>(),StringUtils.EMPTY);}  }
class C{  boolean has(PropertyName property){  return propertyMap.containsKey(property);}  }
class C{  public boolean isToolDoneAfterCreation(){  return isToolDoneAfterCreation;}  }
class C{  public void init() throws ServletException {}  }
class C{  @RequestMapping(value="/upload/single/credential/extension/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}" + "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}"+ "/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.GET) @Secured(SecurityFunctions.FN_UPLOAD_EXTEND_CREDENTIALS_GET) public UploadSingleCredentialExtensionResponse extendUploadSingleCredentials(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion){  return uploadDownloadService.extendUploadSingleCredentials(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,businessObjectDataVersion);}  }
class C{  public boolean canTab(){  return canTab;}  }
class C{  private void findJaxrsApplicationBeans(ConfigurableListableBeanFactory beanFactory){  logger.info("Searching for JAX-RS Application Spring beans");  Map<String,Application> applicationBeans=beanFactory.getBeansOfType(Application.class,true,false);  if (applicationBeans == null || applicationBeans.size() == 0) {    logger.info("No JAX-RS Application Spring beans found");    return;  }  for (  Application application : applicationBeans.values()) {    applications.add(application.getClass());  }}  }
class C{  @Override @SuppressWarnings("rawtypes") public void restoreFromSingleClone(StorageSystem storage,URI clone,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("START restore Single clone operation");  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(clone));    Volume cloneVol=_dbClient.queryObject(Volume.class,clone);    Volume originalVol=_dbClient.queryObject(Volume.class,cloneVol.getAssociatedSourceVolume());    CIMObjectPath syncObjectPath=_cimPath.getStorageSynchronized(storage,originalVol,storage,cloneVol);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      CIMArgument[] outArgs=new CIMArgument[5];      CIMArgument[] inArgs=_helper.getRestoreFromReplicaInputArgumentsWithForce(syncObjectPath);      _helper.callModifyReplica(storage,inArgs,outArgs);      CIMObjectPath job=_cimPath.getCimObjectPathFromOutputArgs(outArgs,SmisConstants.JOB);      if (job != null) {        ControllerServiceImpl.enqueueJob(new QueueJob(new SmisCloneRestoreJob(job,storage.getId(),taskCompleter)));      }    } else {      ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(storage.getLabel());      taskCompleter.error(_dbClient,error);    }  } catch (  WBEMException e) {    String message=String.format("Error encountered when trying to restore from clone %s on array %s",clone.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to restore from clone %s on array %s",clone.toString(),storage.getSerialNumber());    _log.error(message,e);    taskCompleter.error(_dbClient,DeviceControllerException.exceptions.restoreVolumeFromFullCopyFailed(e));  }}  }
class C{  public static float[] toFloatArray(long[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(float)array[i];  }  return result;}  }
class C{  public UnsupportedQueryResultFormatException(Throwable cause){  super(cause);}  }
class C{  protected boolean isEventDisabled(XEvent e){  if (enableLog.isLoggable(PlatformLogger.Level.FINEST)) {    enableLog.finest("Component is {1}, checking for disabled event {0}",e,(isEnabled() ? "enabled" : "disable"));  }  if (!isEnabled()) {switch (e.get_type()) {case XConstants.ButtonPress:case XConstants.ButtonRelease:case XConstants.KeyPress:case XConstants.KeyRelease:case XConstants.EnterNotify:case XConstants.LeaveNotify:case XConstants.MotionNotify:      if (enableLog.isLoggable(PlatformLogger.Level.FINER)) {        enableLog.finer("Event {0} is disable",e);      }    return true;}}switch (e.get_type()) {case XConstants.MapNotify:case XConstants.UnmapNotify:return true;}return super.isEventDisabled(e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.671 -0500",hash_original_method="DE9D34178B7493C9CBB9357375B774A4",hash_generated_method="5CDCFD1DE90C9FD3F8E244657445913A") public boolean hasTag(){  if (parameters == null)   return false;  return hasParameter(ParameterNames.TAG);}  }
class C{  public Point2D(double x,double y){  if (Double.isInfinite(x) || Double.isInfinite(y))   throw new IllegalArgumentException("Coordinates must be finite");  if (Double.isNaN(x) || Double.isNaN(y))   throw new IllegalArgumentException("Coordinates cannot be NaN");  if (x == 0.0)   this.x=0.0; else   this.x=x;  if (y == 0.0)   this.y=0.0; else   this.y=y;}  }
class C{  @NonNull public String toJsonString(){  return toJson().toString();}  }
class C{  public final <T2,V>Flux<V> zipWith(Publisher<? extends T2> source2,final BiFunction<? super T,? super T2,? extends V> combinator){  if (this instanceof FluxZip) {    @SuppressWarnings("unchecked") FluxZip<T,V> o=(FluxZip<T,V>)this;    Flux<V> result=o.zipAdditionalSource(source2,combinator);    if (result != null) {      return result;    }  }  return zip(this,source2,combinator);}  }
class C{  protected BatchRemove(final IRabaCoder keySer,final IRabaCoder valSer,final int fromIndex,final int toIndex,final byte[][] keys,final boolean assertFound,final ReturnWhatEnum returnWhat){  super(keySer,valSer,fromIndex,toIndex,keys,null);  this.assertFound=assertFound;  this.returnWhat=returnWhat;  if (returnWhat == null)   throw new IllegalArgumentException();}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  private TextEditor escapeSpecialCharsWithinTagAttributes(TextEditor text){  Collection<HTMLToken> tokens=text.tokenizeHTML();  TextEditor newText=new TextEditor("");  for (  HTMLToken token : tokens) {    String value=token.getText();    if (token.isTag()) {      value=value.replaceAll("\\\\",CHAR_PROTECTOR.encode("\\"));      value=value.replaceAll("`",CHAR_PROTECTOR.encode("`"));      value=value.replaceAll("\\*",CHAR_PROTECTOR.encode("*"));      value=value.replaceAll("_",CHAR_PROTECTOR.encode("_"));    }    newText.append(value);  }  return newText;}  }
class C{  private void readReference(){  String sql;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Ref_List"))   sql="SELECT Value, Name, Description FROM AD_Ref_List " + "WHERE AD_Reference_ID=135 ORDER BY Name"; else   sql="SELECT l.Value, t.Name, t.Description " + "FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND l.AD_Reference_ID=135 ORDER BY t.Name";  ArrayList<String> v_value=new ArrayList<String>();  ArrayList<String> v_name=new ArrayList<String>();  ArrayList<String> v_description=new ArrayList<String>();  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      String name=rs.getString(2);      String description=rs.getString(3);      if (description == null)       description="";      v_value.add(value);      v_name.add(name);      v_description.add(description);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  int size=v_value.size();  s_value=new String[size];  s_name=new String[size];  s_description=new String[size];  for (int i=0; i < size; i++) {    s_value[i]=(String)v_value.get(i);    s_name[i]=(String)v_name.get(i);    s_description[i]=(String)v_description.get(i);  }}  }
class C{  public static KeyPair privateKeyToKeyPair(PrivateKey pKey) throws NoSuchAlgorithmException, InvalidKeySpecException {  KeyFactory keyFactory=KeyFactory.getInstance(KeyConstants.KEY_FACTORY,new BouncyCastleProvider());  RSAPrivateCrtKey rsaPKey=(RSAPrivateCrtKey)pKey;  RSAPublicKeySpec publicKeySpec=new java.security.spec.RSAPublicKeySpec(rsaPKey.getModulus(),rsaPKey.getPublicExponent());  return new KeyPair(keyFactory.generatePublic(publicKeySpec),pKey);}  }
class C{  public static org.oscm.vo.VOReport convertToApi(org.oscm.internal.vo.VOReport oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOReport newVO=new org.oscm.vo.VOReport();  newVO.setReportName(oldVO.getReportName());  newVO.setLocalizedReportName(oldVO.getLocalizedReportName());  newVO.setReportURLTemplate(oldVO.getReportUrlTemplate());  return newVO;}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  protected int index(int rank){  return offset + offsets[zero + rank * stride];}  }
class C{  private void purgeOldMetrics(final String hostName){  final ConcurrentHashMap<String,TimestampMetricValue> hostCounters=knownHosts.get(hostName);  if (hostCounters == null) {    return;  }  final Iterator<TimestampMetricValue> itr=hostCounters.values().iterator();  while (itr.hasNext()) {    final TimestampMetricValue tmv=itr.next();    final int dmax=tmv.getMetadata().getDMax();    if (dmax == 0) {      continue;    }    final int age=tmv.getAge();    if (age > dmax) {      hostCounters.remove(tmv.getMetadata().getMetricName(),tmv);      if (log.isInfoEnabled())       log.info("Purged metric=" + tmv.getMetadata().getMetricName() + " for host="+ hostName+ ", last update was "+ age+ " seconds ago");    }  }}  }
class C{  public void add(int row,TableCellEditor editor){  cellEditors.get(row).add(editor);}  }
class C{  public XmlDom tag(String tag,String attr,String value){  List<XmlDom> tags=tags(tag,attr,value);  if (tags.size() == 0) {    return null;  } else {    return tags.get(0);  }}  }
class C{  public boolean isImmediate(){  Boolean result=(Boolean)eval(IMMEDIATE,immediate);  return ((result != null) ? result : false);}  }
class C{  private void updateDoc(String noteId,String noteName,Paragraph p) throws IOException {  String id=formatId(noteId,p);  Document doc=newDocument(id,noteName,p);  try {    writer.updateDocument(new Term(ID_FIELD,id),doc);    writer.commit();  } catch (  IOException e) {    LOG.error("Failed to updaet index of notebook {}",noteId,e);  }}  }
class C{  public static Protos.TaskID toTaskId(ByteBuffer bb){  try {    return Protos.TaskID.parseFrom(getBytes(bb,bb.getInt()));  } catch (  Exception e) {    throw new RuntimeException("Failed to parse Task ID",e);  }}  }
class C{  public boolean isPaused(){  return paused;}  }
class C{  public void clearData(){  projectionModel.getProjector().reset();}  }
class C{  @Ignore @Test public void testOrganizedOperandsSingleRangeJunctionCreationWithNoIterOperandForOR(){  LogWriter logger=CacheUtils.getLogger();  try {    CompiledComparison cv[]=null;    ExecutionContext context=new QueryExecutionContext(null,CacheUtils.getCache());    this.bindIteratorsAndCreateIndex(context);    cv=new CompiledComparison[12];    cv[0]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(2)),OQLLexerTokenTypes.TOK_EQ);    cv[1]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(5)),OQLLexerTokenTypes.TOK_LE);    cv[2]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_LT);    cv[3]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_GT);    cv[4]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_GE);    cv[5]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_NE);    cv[6]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(2)),OQLLexerTokenTypes.TOK_EQ);    cv[7]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(5)),OQLLexerTokenTypes.TOK_LE);    cv[8]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_LT);    cv[9]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_GT);    cv[10]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_GE);    cv[11]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_NE);    OrganizedOperands oo=this.oganizedOperandsSingleRangeJunctionCreation(OQLLexerTokenTypes.LITERAL_or,cv,context);    assertNotNull("OrganizedOperand object is null",oo);    assertTrue("Filter Openad of OrganizedOperand is not of type CompiledJunction",oo.filterOperand instanceof RangeJunction);    RangeJunction rj=(RangeJunction)oo.filterOperand;    assertEquals(cv.length,rj.getOperands().size());  } catch (  Exception e) {    logger.error(e);    fail(e.toString());  }}  }
class C{  private void updateTabsVisibility(StackTab[] sortedPriorityArray){  mVisibilityArray.clear();  for (int i=0; i < sortedPriorityArray.length; i++) {    mVisibilityArray.add(sortedPriorityArray[i].getId());  }  updateCacheVisibleIds(mVisibilityArray);}  }
class C{  public boolean initialise(ServletContext servletContext){  return true;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){  Rectangle2D dataArea=info.getDataArea();  if (dataArea.contains(x,y)) {    for (int i=0; i < this.subplots.size(); i++) {      CategoryPlot subplot=(CategoryPlot)this.subplots.get(i);      PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);      subplot.handleClick(x,y,subplotInfo);    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public SnmpAdaptorServer(InetAddressAcl acl,int port,InetAddress addr){  this(false,acl,port,addr);}  }
class C{  public MXSession createSession(HomeserverConnectionConfig hsConfig){  return createSession(mAppContext,hsConfig);}  }
class C{  public StaticSentence(Session s,String sentence){  this(s,new NormalBuilder(sentence),null,null);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void loadSubjectAreas(Long sessionId){  List subjAreas=getSubjectAreaList(sessionId);  for (int i=0; i < subjAreas.size(); i++) {    SubjectArea subjArea=(SubjectArea)subjAreas.get(i);    String subjAreaAbbreviation=subjArea.getSubjectAreaAbbreviation();    subjectAreas.put(subjAreaAbbreviation,subjArea);  }}  }
class C{  public Map<Integer,Double> computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    Map<Integer,Double> nanMap=new HashMap<Integer,Double>();    for (    int index : indexes) {      nanMap.put(index,NaN);    }    return unmodifiableMap(nanMap);  }  int[] quotients=new int[indexes.length];  int[] remainders=new int[indexes.length];  int[] requiredSelections=new int[indexes.length * 2];  int requiredSelectionsCount=0;  for (int i=0; i < indexes.length; i++) {    long numerator=(long)indexes[i] * (dataset.length - 1);    int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);    int remainder=(int)(numerator - (long)quotient * scale);    quotients[i]=quotient;    remainders[i]=remainder;    requiredSelections[requiredSelectionsCount]=quotient;    requiredSelectionsCount++;    if (remainder != 0) {      requiredSelections[requiredSelectionsCount]=quotient + 1;      requiredSelectionsCount++;    }  }  sort(requiredSelections,0,requiredSelectionsCount);  selectAllInPlace(requiredSelections,0,requiredSelectionsCount - 1,dataset,0,dataset.length - 1);  Map<Integer,Double> ret=new HashMap<Integer,Double>();  for (int i=0; i < indexes.length; i++) {    int quotient=quotients[i];    int remainder=remainders[i];    if (remainder == 0) {      ret.put(indexes[i],dataset[quotient]);    } else {      ret.put(indexes[i],interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale));    }  }  return unmodifiableMap(ret);}  }
class C{  protected Node newNode(){  return new SVGOMStyleElement();}  }
class C{  public boolean isNumeric(){  if (getInputFormat() == null) {    return false;  } else {    return getInputFormat().attribute(m_AttIndex.getIndex()).isNumeric();  }}  }
class C{  public Map map(){  return map;}  }
class C{  protected int index(int row,int column){  return this.offset + rowOffsets[rowZero + row * rowStride] + columnOffsets[columnZero + column * columnStride];}  }
class C{  public double[][] solve(double[][] B){  if (B.length != n) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!isspd) {    throw new RuntimeException("Matrix is not symmetric positive definite.");  }  double[][] X=VMath.copy(B);  int nx=B[0].length;  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * L[i][k];      }    }    for (int j=0; j < nx; j++) {      X[k][j]/=L[k][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=L[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * L[k][i];      }    }  }  return X;}  }
class C{  public static final VariableContext[] parse(String variable){  char[] text=variable.toCharArray();  List<VariableContext> contexts=new ArrayList<>();  int i=addMember(text,0,contexts);  while (i < text.length) {    if (text[i] == '[') {      if (text[++i] == '\'') {        i=addStringIndex(text,i,contexts);      } else {        i=addIntIndex(text,i,contexts);      }      ++i;    } else {      i=addMember(text,i + 1,contexts);    }  }  return contexts.toArray(new VariableContext[contexts.size()]);}  }
class C{  public Outline(@NonNull Outline src){  set(src);}  }
class C{  static public String crypt(final String password){  final StringBuffer salt=new StringBuffer();  final java.util.Random rnd=new java.util.Random();  while (salt.length() < 8) {    final int index=(int)(rnd.nextFloat() * SALTCHARS.length());    salt.append(SALTCHARS.substring(index,index + 1));  }  return crypt(password,salt.toString(),MAGIC);}  }
class C{  public void disconnect(){  this.keepAlive=false;  if (this.keepAliveThread != null) {    this.keepAliveThread.interrupt();  }  if (this.socket != null) {    this.socket.disconnect();  }}  }
class C{  public StateMonitorTab(GUIFrame mainFrame){  setLayout(new BorderLayout());  this.mainFrame=mainFrame;  states=new HashMap<String,DialogueState>();  JPanel leftPanel=createLeftSide();  visualisation=new StateViewer(this);  logArea=createLogArea();  JScrollPane logScroll=new JScrollPane(logArea);  logScroll.setBorder(BorderFactory.createEmptyBorder());  JSplitPane topPanel=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,leftPanel,visualisation.wrapWithScrollPane());  topPanel.setDividerLocation(200);  JSplitPane fullPanel=new JSplitPane(JSplitPane.VERTICAL_SPLIT,topPanel,logScroll);  fullPanel.setDividerLocation(600);  add(fullPanel);  configureKeyInputs();  recordState(new DialogueState(),CURRENT);  listModel.add(1,"separator-current");}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  static int calculateOpacityTransform(final double opacity,final int overlayColor,final int primaryColor){  final int redPrimary=Color.red(primaryColor);  final int redOverlay=Color.red(overlayColor);  final int greenPrimary=Color.green(primaryColor);  final int greenOverlay=Color.green(overlayColor);  final int bluePrimary=Color.blue(primaryColor);  final int blueOverlay=Color.blue(overlayColor);  final int redCalculated=(int)((1 - opacity) * redPrimary + opacity * redOverlay);  final int greenCalculated=(int)((1 - opacity) * greenPrimary + opacity * greenOverlay);  final int blueCalculated=(int)((1 - opacity) * bluePrimary + opacity * blueOverlay);  return Color.rgb(redCalculated,greenCalculated,blueCalculated);}  }
class C{  public Environment(){  this(null);}  }
class C{  @DSComment("Power management") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.660 -0500",hash_original_method="60F8C5E408EB104B9A6B83E1C96AB086",hash_generated_method="6CBB7F30A9B24D66F901470838801880") public void acquire(){synchronized (mToken) {    acquireLocked();  }}  }
class C{  public cudaChannelFormatDesc(int x,int y,int z,int w,int f){  this.x=x;  this.y=y;  this.z=z;  this.w=w;  this.f=f;}  }
class C{  public int[] decompressSubframe(int x,int y,RpfColortable colortable){  x%=6;  y%=6;  int readptr=0;  byte[] compressedSubframe=this.compressedSubframe[y][x];  if (colortable == null) {    colortable=this.colortable;  }  if ((compressedSubframe == null) || masked[y][x]) {    return null;  } else {    int[] pixels=new int[256 * 256];    for (int i=0; i < 256; i+=4) {      for (int j=0; j < 256; j+=8) {        int firstByte=compressedSubframe[readptr++] & 0xff;        int secondByte=compressedSubframe[readptr++] & 0xff;        int thirdByte=compressedSubframe[readptr++] & 0xff;        int val1=(firstByte << 4) | (secondByte >> 4);        int val2=((secondByte & 0x000F) << 8) | thirdByte;        for (int t=0; t < 4; t++) {          for (int e=0; e < 4; e++) {            int tableVal1=table[t][val1][e] & 0xff;            int tableVal2=table[t][val2][e] & 0xff;            if (tableVal1 >= RpfColortable.CADRG_COLORS) {              tableVal1=RpfColortable.CADRG_COLORS - 1;            }            if (tableVal2 >= RpfColortable.CADRG_COLORS) {              tableVal2=RpfColortable.CADRG_COLORS - 1;            }            int pixindex=(i + t) * 256 + j + e;            pixels[pixindex]=colortable.colors[tableVal1].getRGB();            pixels[pixindex + 4]=colortable.colors[tableVal2].getRGB();          }        }      }    }    return pixels;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean push(Object obj){  if (numObjs >= objs.length)   doubleCapacityPlusOne();  objs[numObjs++]=obj;  return true;}  }
class C{  public int depth(){  long currInd=currentIndex.get() + 1;  return currInd >= maxSize ? maxSize : (int)currInd;}  }
class C{  private void addJammers(){  if (staticJamming) {    if (staticJammingOptimal) {      try {        String csvFile=CABSPOTTING_OPTIMAL_JAMMER_LOCATIONS + "cabspotting_" + ((int)JAMMING_RADIUS)+ ".csv";        placeOptimalJammers(csvFile);      } catch (      Exception e) {        placeJammersRandomly();      }    } else {      placeJammersRandomly();    }  }  if (mobileJamming) {    placeMobileJammers();  }}  }
class C{  public void initLemmatizer(){  try {    Dictionary dict=new Dictionary(new File("wordnet-dict"));    dict.open();    stemmer=new WordnetStemmer(dict);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public final String[] keys(){  String[] keysArr=new String[m_firstFree];  for (int i=0; i < m_firstFree; i++) {    keysArr[i]=m_map[i];  }  return keysArr;}  }
class C{  public static void render(Node node,RenderContext rc){  render(node,rc,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.588 -0500",hash_original_method="E10B42C26E723F278A5695B0C5DAB2DB",hash_generated_method="C222E6120997C49079E02738413A7ED3") public boolean fullScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  mTempRect.top=0;  mTempRect.bottom=height;  if (down) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      mTempRect.bottom=view.getBottom() + mPaddingBottom;      mTempRect.top=mTempRect.bottom - height;    }  }  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  public ClientHandshaker(DTLSSession session,RecordLayer recordLayer,SessionListener sessionListener,DtlsConnectorConfig config,int maxTransmissionUnit){  super(true,session,recordLayer,sessionListener,config.getTrustStore(),maxTransmissionUnit);  this.privateKey=config.getPrivateKey();  this.certificateChain=config.getCertificateChain();  this.publicKey=config.getPublicKey();  this.pskStore=config.getPskStore();  this.preferredCipherSuites=config.getSupportedCipherSuites();  this.maxFragmentLengthCode=config.getMaxFragmentLengthCode();  this.supportedServerCertificateTypes=new ArrayList<>();  if (rootCertificates != null && rootCertificates.length > 0) {    this.supportedServerCertificateTypes.add(CertificateType.X_509);  }  this.supportedServerCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);  this.supportedClientCertificateTypes=new ArrayList<>();  if (privateKey != null && publicKey != null) {    if (certificateChain == null || certificateChain.length == 0) {      this.supportedClientCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);    } else     if (config.isSendRawKey()) {      this.supportedClientCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);      this.supportedClientCertificateTypes.add(CertificateType.X_509);    } else {      this.supportedClientCertificateTypes.add(CertificateType.X_509);      this.supportedClientCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.PARAMETERS__PARAMS:    return basicSetParams(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final void createStandardCosts(){  MAcctSchema as=MClient.get(getCtx(),getAD_Client_ID()).getAcctSchema();  log.info("Cost_Group_ID" + as.getM_CostType_ID());  final TreeSet<Integer> productsAdded=new TreeSet<Integer>();{    final MProduct product=getM_Product();    productsAdded.add(product.getM_Product_ID());    final CostDimension d=new CostDimension(product,as,as.getM_CostType_ID(),getAD_Org_ID(),getM_Warehouse_ID(),getM_AttributeSetInstance_ID(),CostDimension.ANY);    Collection<MCost> costs=d.toQuery(MCost.class,get_TrxName()).list();    for (    MCost cost : costs) {      MPPOrderCost.createOrderCostDimension(get_ID(),cost);    }  }  for (  MPPOrderBOMLine line : getLines()) {    final MProduct product=line.getM_Product();    if (productsAdded.contains(product.getM_Product_ID())) {      continue;    }    productsAdded.add(product.getM_Product_ID());    CostDimension d=new CostDimension(line.getM_Product(),as,as.getM_CostType_ID(),line.getAD_Org_ID(),getM_Warehouse_ID(),line.getM_AttributeSetInstance_ID(),CostDimension.ANY);    Collection<MCost> costs=d.toQuery(MCost.class,get_TrxName()).list();    for (    MCost cost : costs) {      MPPOrderCost.createOrderCostDimension(get_ID(),cost);    }  }  for (  MPPOrderNode node : getMPPOrderWorkflow().getNodes(true)) {    final int S_Resource_ID=node.getS_Resource_ID();    if (S_Resource_ID <= 0)     continue;    final MProduct resourceProduct=MProduct.forS_Resource_ID(getCtx(),S_Resource_ID,null);    if (productsAdded.contains(resourceProduct.getM_Product_ID())) {      continue;    }    productsAdded.add(resourceProduct.getM_Product_ID());    CostDimension d=new CostDimension(resourceProduct,as,as.getM_CostType_ID(),node.getAD_Org_ID(),getM_Warehouse_ID(),0,CostDimension.ANY);    Collection<MCost> costs=d.toQuery(MCost.class,get_TrxName()).list();    for (    MCost cost : costs) {      MPPOrderCost.createOrderCostDimension(get_ID(),cost);    }  }}  }
class C{  protected String[] expectedProblemLines(){  return null;}  }
class C{  public SetOrderMessageCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  private void enumerate(EnumerationContext ctx){  logInfo("Enumerating VMs from Azure");  String uriStr=ctx.enumNextPageLink;  URI uri;  if (uriStr == null) {    uriStr=AdapterUriUtil.expandUriPathTemplate(LIST_VM_URI,ctx.parentAuth.userLink);    uri=UriUtils.extendUriWithQuery(UriUtils.buildUri(uriStr),QUERY_PARAM_API_VERSION,VM_REST_API_VERSION);  } else {    uri=UriUtils.buildUri(uriStr);  }  Operation operation=Operation.createGet(uri);  operation.addRequestHeader(Operation.ACCEPT_HEADER,Operation.MEDIA_TYPE_APPLICATION_JSON);  operation.addRequestHeader(Operation.CONTENT_TYPE_HEADER,Operation.MEDIA_TYPE_APPLICATION_JSON);  try {    operation.addRequestHeader(Operation.AUTHORIZATION_HEADER,AUTH_HEADER_BEARER_PREFIX + ctx.credentials.getToken());  } catch (  Exception ex) {    this.handleError(ctx,ex);    return;  }  operation.setCompletion(null);  sendRequest(operation);}  }
class C{  public static void resetCounters(){  errors=0;  warnings=0;}  }
class C{  protected static Map<String,String> loadFile(File file) throws IOException {  return loadStream(new FileInputStream(file));}  }
class C{  public static CompoundBorder createCompoundBorder(){  return new CompoundBorder();}  }
class C{  private Token modelToToken(int offs){  if (offs >= 0) {    try {      int line=getLineOfOffset(offs);      Token t=getTokenListForLine(line);      while (t != null && t.isPaintable()) {        if (t.containsPosition(offs)) {          return t;        }        t=t.getNextToken();      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }  return null;}  }
class C{  public String readFixedLengthString(int length) throws EOFException, FormatException {  String retstring;  if (length < buffer.length) {    assertSize(length);    retstring=new String(buffer,curptr,length);    curptr+=length;    bytesinbuffer-=length;  } else {    byte foo[]=readBytes(length,false);    retstring=new String(foo,0,length);  }  return retstring;}  }
class C{  private void parsePcscfAddress(Node node){  String addr=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (addr == null) {        if ((addr=getValueByParamName("Address",childnode,TYPE_TXT)) != null) {          String[] address=addr.split(":");          String proxyAddr=address[0];          mRcsSettings.setImsProxyAddrForMobile("".equals(proxyAddr) ? null : proxyAddr);          mRcsSettings.setImsProxyAddrForWifi("".equals(proxyAddr) ? null : proxyAddr);          if (address.length > 1) {            int port=Integer.valueOf(address[1]);            mRcsSettings.setImsProxyPortForMobile(port);            mRcsSettings.setImsProxyPortForWifi(port);          }        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public ConcurrencyManager(final Properties properties,final ILocalTransactionManager transactionManager,final IResourceManager resourceManager){  if (properties == null)   throw new IllegalArgumentException();  if (transactionManager == null)   throw new IllegalArgumentException();  if (resourceManager == null)   throw new IllegalArgumentException();  this.properties=properties;  this.transactionManager=transactionManager;  this.resourceManager=resourceManager;  String val;  final int txServicePoolSize;  final int readServicePoolSize;{    val=properties.getProperty(ConcurrencyManager.Options.TX_SERVICE_CORE_POOL_SIZE,ConcurrencyManager.Options.DEFAULT_TX_SERVICE_CORE_POOL_SIZE);    txServicePoolSize=Integer.parseInt(val);    if (txServicePoolSize < 0) {      throw new RuntimeException("The '" + ConcurrencyManager.Options.TX_SERVICE_CORE_POOL_SIZE + "' must be non-negative.");    }    if (log.isInfoEnabled())     log.info(ConcurrencyManager.Options.TX_SERVICE_CORE_POOL_SIZE + "=" + txServicePoolSize);  }{    val=properties.getProperty(ConcurrencyManager.Options.READ_SERVICE_CORE_POOL_SIZE,ConcurrencyManager.Options.DEFAULT_READ_SERVICE_CORE_POOL_SIZE);    readServicePoolSize=Integer.parseInt(val);    if (readServicePoolSize < 0) {      throw new RuntimeException("The '" + ConcurrencyManager.Options.READ_SERVICE_CORE_POOL_SIZE + "' must be non-negative.");    }    if (log.isInfoEnabled())     log.info(ConcurrencyManager.Options.READ_SERVICE_CORE_POOL_SIZE + "=" + readServicePoolSize);  }{    val=properties.getProperty(ConcurrencyManager.Options.SHUTDOWN_TIMEOUT,ConcurrencyManager.Options.DEFAULT_SHUTDOWN_TIMEOUT);    shutdownTimeout=Long.parseLong(val);    if (shutdownTimeout < 0) {      throw new RuntimeException("The '" + ConcurrencyManager.Options.SHUTDOWN_TIMEOUT + "' must be non-negative.");    }    if (log.isInfoEnabled())     log.info(ConcurrencyManager.Options.SHUTDOWN_TIMEOUT + "=" + shutdownTimeout);  }  if (txServicePoolSize == 0) {    txWriteService=(ThreadPoolExecutor)Executors.newCachedThreadPool(new DaemonThreadFactory(getClass().getName() + ".txWriteService"));  } else {    txWriteService=(ThreadPoolExecutor)Executors.newFixedThreadPool(txServicePoolSize,new DaemonThreadFactory(getClass().getName() + ".txWriteService"));  }  if (readServicePoolSize == 0) {    readService=(ThreadPoolExecutor)Executors.newCachedThreadPool(new DaemonThreadFactory(getClass().getName() + ".readService"));  } else {    readService=(ThreadPoolExecutor)Executors.newFixedThreadPool(readServicePoolSize,new DaemonThreadFactory(getClass().getName() + ".readService"));  }{    final int writeServiceCorePoolSize;    final int writeServiceMaximumPoolSize;    final int writeServiceQueueCapacity;    final boolean writeServicePrestart;{      writeServiceCorePoolSize=Integer.parseInt(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_CORE_POOL_SIZE,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_CORE_POOL_SIZE));      if (writeServiceCorePoolSize < 0) {        throw new RuntimeException("The '" + ConcurrencyManager.Options.WRITE_SERVICE_CORE_POOL_SIZE + "' must be non-negative.");      }      if (log.isInfoEnabled())       log.info(ConcurrencyManager.Options.WRITE_SERVICE_CORE_POOL_SIZE + "=" + writeServiceCorePoolSize);    }{      writeServiceMaximumPoolSize=Integer.parseInt(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_MAXIMUM_POOL_SIZE,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_MAXIMUM_POOL_SIZE));      if (writeServiceMaximumPoolSize < writeServiceCorePoolSize) {        throw new RuntimeException("The '" + ConcurrencyManager.Options.WRITE_SERVICE_MAXIMUM_POOL_SIZE + "' must be greater than the core pool size.");      }      if (log.isInfoEnabled())       log.info(ConcurrencyManager.Options.WRITE_SERVICE_MAXIMUM_POOL_SIZE + "=" + writeServiceMaximumPoolSize);    }{      writeServiceQueueCapacity=Integer.parseInt(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_QUEUE_CAPACITY,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_QUEUE_CAPACITY));      if (writeServiceQueueCapacity < 0) {        throw new RuntimeException("The '" + ConcurrencyManager.Options.WRITE_SERVICE_QUEUE_CAPACITY + "' must be non-negative.");      }      if (log.isInfoEnabled())       log.info(ConcurrencyManager.Options.WRITE_SERVICE_QUEUE_CAPACITY + "=" + writeServiceQueueCapacity);    }{      writeServicePrestart=Boolean.parseBoolean(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_PRESTART_ALL_CORE_THREADS,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_PRESTART_ALL_CORE_THREADS));      if (log.isInfoEnabled())       log.info(ConcurrencyManager.Options.WRITE_SERVICE_PRESTART_ALL_CORE_THREADS + "=" + writeServicePrestart);    }    final long groupCommitTimeout=Long.parseLong(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_GROUP_COMMIT_TIMEOUT,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_GROUP_COMMIT_TIMEOUT));    if (log.isInfoEnabled())     log.info(ConcurrencyManager.Options.WRITE_SERVICE_GROUP_COMMIT_TIMEOUT + "=" + groupCommitTimeout);    final long overflowLockRequestTimeout=Long.parseLong(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_OVERFLOW_LOCK_REQUEST_TIMEOUT,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_OVERFLOW_LOCK_REQUEST_TIMEOUT));    if (log.isInfoEnabled())     log.info(ConcurrencyManager.Options.WRITE_SERVICE_OVERFLOW_LOCK_REQUEST_TIMEOUT + "=" + overflowLockRequestTimeout);    final long keepAliveTime=Long.parseLong(properties.getProperty(ConcurrencyManager.Options.WRITE_SERVICE_KEEP_ALIVE_TIME,ConcurrencyManager.Options.DEFAULT_WRITE_SERVICE_KEEP_ALIVE_TIME));    if (log.isInfoEnabled())     log.info(ConcurrencyManager.Options.WRITE_SERVICE_KEEP_ALIVE_TIME + "=" + keepAliveTime);    final boolean synchronousQueue=writeServiceQueueCapacity == 0;    final BlockingQueue<Runnable> queue;    if (synchronousQueue) {      queue=new SynchronousQueue<Runnable>();    } else     if (writeServiceQueueCapacity == Integer.MAX_VALUE) {      queue=new LinkedBlockingQueue<Runnable>(writeServiceQueueCapacity);    } else {      queue=new ArrayBlockingQueue<Runnable>(writeServiceQueueCapacity);    }    writeService=new WriteExecutorService(resourceManager,writeServiceCorePoolSize,synchronousQueue ? Integer.MAX_VALUE : writeServiceMaximumPoolSize,keepAliveTime,TimeUnit.MILLISECONDS,queue,new DaemonThreadFactory(getClass().getName() + ".writeService"),groupCommitTimeout,overflowLockRequestTimeout);    if (writeServicePrestart) {      getWriteService().prestartAllCoreThreads();    }  }{    collectQueueStatistics=Boolean.parseBoolean(properties.getProperty(IBigdataClient.Options.COLLECT_QUEUE_STATISTICS,IBigdataClient.Options.DEFAULT_COLLECT_QUEUE_STATISTICS));    if (log.isInfoEnabled())     log.info(IBigdataClient.Options.COLLECT_QUEUE_STATISTICS + "=" + collectQueueStatistics);  }  if (collectQueueStatistics) {    final double w=ThreadPoolExecutorStatisticsTask.DEFAULT_WEIGHT;    final long initialDelay=0;    final long delay=1000;    final TimeUnit unit=TimeUnit.MILLISECONDS;    writeServiceQueueStatisticsTask=new ThreadPoolExecutorStatisticsTask("writeService",getWriteService(),countersUN,w);    txWriteServiceQueueStatisticsTask=new ThreadPoolExecutorStatisticsTask("txWriteService",txWriteService,countersTX,w);    readServiceQueueStatisticsTask=new ThreadPoolExecutorStatisticsTask("readService",readService,countersHR,w);    sampleService=Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory(getClass().getName() + ".sampleService"));    sampleService.scheduleWithFixedDelay(writeServiceQueueStatisticsTask,initialDelay,delay,unit);    sampleService.scheduleWithFixedDelay(getWriteService().getLockManager().statisticsTask,initialDelay,delay,unit);    sampleService.scheduleWithFixedDelay(txWriteServiceQueueStatisticsTask,initialDelay,delay,unit);    sampleService.scheduleWithFixedDelay(readServiceQueueStatisticsTask,initialDelay,delay,unit);  } else {    writeServiceQueueStatisticsTask=null;    txWriteServiceQueueStatisticsTask=null;    readServiceQueueStatisticsTask=null;    sampleService=null;  }}  }
class C{  final public MutableString insert(final int index,final char c){  return insert(index,String.valueOf(c));}  }
class C{  public Address(final BigInteger value){  m_value=value;}  }
class C{  public void updateRectangles(){  VerticalNode vn=getRoot();  vn.region=new TwoDRectangle(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);  vn.specialUpdateRectangle();}  }
class C{  public void close(){  try {    if (chunkseq != null)     chunkseq.close();  } catch (  Exception e) {    PngHelperInternal.LOGGER.warning("error closing chunk sequence:" + e.getMessage());  }  if (streamFeeder != null)   streamFeeder.close();}  }
class C{  public CDeleteTagSubtreeAction(final JFrame parent,final ITagManager tagManager,final TreeNode<CTag> tag){  super("Delete Subtree");  m_parent=Preconditions.checkNotNull(parent,"IE01893: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01894: Tag manager argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01895: Tag argument can not be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_TAG_SUBTREE".charAt(0));}  }
class C{  public synchronized void release(){  if (mRecorder != null) {    if (mRecorder.getRecordingState() == SpeechRecord.RECORDSTATE_RECORDING) {      stop();    }    mRecorder.release();    mRecorder=null;  }}  }
class C{  public void disallowOut(){  teleRules.disallowOut();}  }
class C{  @Override public void combine(double[] coords,Object[] vertexData,float[] weight,Object[] outData){  this.cc.tessCombine(coords,vertexData,weight,outData);}  }
class C{  public ScriptingCommands(final WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void add(List<Node> nodes){  if (nodes.size() == 1) {    insert(roots,roots.getChildren().size(),nodes.get(0));  } else {    insert(roots,roots.getChildren().size(),nodes);  }}  }
class C{  private boolean multiSelectionHandleClick(GalleryCursorAdapter.GridCellViewHolder holder){  if (!mSelectedItems.isEmpty()) {    long imageID=holder.imageID;    holder.icon.setVisibility((mSelectedItems.toggle(imageID)) ? View.VISIBLE : View.GONE);    multiSelectionUpdateActionbar("changed mutli sel");    return true;  }  multiSelectionUpdateActionbar("lost multi sel");  return false;}  }
class C{  private void shiftWorldAction(){  Vector2 shift=ShiftWorldDialog.show(ControlUtilities.getParentWindow(this));  if (shift != null) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().shift(shift);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String imageURL=getEditorial(stack).getImageURL();  if (imageURL == null || imageURL.length() == 0)   return MetaImage.getMetaImage((String)null); else   return MetaImage.getMetaImage(imageURL,stack.getUIComponent());}  }
class C{  private void checkIsDestroyed() throws NamingException {  if (isDestroyed) {    throw new NoPermissionException(LocalizedStrings.ContextImpl_CAN_NOT_INVOKE_OPERATIONS_ON_DESTROYED_CONTEXT.toLocalizedString());  }}  }
class C{  public Draft(Value value){  this();  setValue(value);}  }
class C{  public style addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  String attrValue;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attribute=element.getAttributeNodeNS(nullNS,"defaultAttr");  attrValue=attribute.getNodeValue();  assertEquals("elementgetattributenodens03","defaultVal",attrValue);}  }
class C{  public InputStream openMainExpansion() throws IOException {  if (appDeliveryData.getAdditionalFileCount() < 1) {    return null;  }  String url=appDeliveryData.getAdditionalFile(0).getDownloadUrl();  return api.executeDownload(url,downloadAuthCookie.getName() + "=" + downloadAuthCookie.getValue());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (!name.equals(THIS$0)) {    String signInvoke=GGG_V;    Type fieldType=Type.getType(desc);    if (opcode == GETFIELD) {      mv.visitInsn(DUP);      signInvoke=LGGG_V;    }    if (opcode == PUTFIELD) {      signInvoke=LGGG_V;      if (fieldType.getSize() == 1)       stack.b1a1__b1a1b1(); else       if (fieldType.getSize() == 2)       stack.b1a2__b1a2b1(); else       check(false);    }    stack.pushStrings(owner,name,desc);    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],signInvoke);  }  super.visitFieldInsn(opcode,owner,name,desc);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public T1(V val){  super(val);}  }
class C{  public static double[] makeDistribution(double predictedClass,int numClasses){  double[] dist=new double[numClasses];  if (predictedClass == MISSING_VALUE) {    return dist;  }  dist[(int)predictedClass]=1.0;  return dist;}  }
class C{  public Builder clearExtensions(){  localeBuilder.clearExtensions();  return this;}  }
class C{  public void testCreateWithProjectSpace() throws Exception {  String folder="/foo/bar";  File fileFolder=new File(folder);  expectDirCopy(fileFolder,new File("/tmp/copy"));  control.replay();  Codebase codebase=creator.create(ImmutableMap.<String,String>of("path",folder,"projectspace","internal"));  control.verify();  assertNotNull(codebase);  assertEquals("internal",codebase.projectSpace());}  }
class C{  public static void time(String message){  if (Options.time) {    out.println(message);  }}  }
class C{  public void readSequence(ASN1Sequence sequence) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCE) {    throw expected("sequence");  }  int begOffset=offset;  int endOffset=begOffset + length;  ASN1Type[] type=sequence.type;  int i=0;  if (isVerify) {    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        i++;      }      type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }    }  } else {    int seqTagOffset=tagOffset;    Object[] values=new Object[type.length];    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        if (sequence.DEFAULT[i] != null) {          values[i]=sequence.DEFAULT[i];        }        i++;      }      values[i]=type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }      if (sequence.DEFAULT[i] != null) {        values[i]=sequence.DEFAULT[i];      }    }    content=values;    tagOffset=seqTagOffset;  }  if (offset != endOffset) {    throw new ASN1Exception("Wrong encoding at [" + begOffset + "]. Content's length and encoded length are not the same");  }}  }
class C{  private int processMessage(Message msg) throws Exception {  dumpEnvelope(msg);  dumpBody(msg);  printOut(":::::::::::::::");  printOut(getSubject(msg));  printOut(":::::::::::::::");  printOut(getMessage(msg));  printOut(":::::::::::::::");  String delivery=getDeliveryReport(msg);  printOut(delivery);  printOut(":::::::::::::::");  Address[] from;  if ((from=msg.getFrom()) != null) {    if (from[0].toString().equalsIgnoreCase("postmaster@CONSULTDESK"))     return ERROR;  } else {    return ERROR;  }  return REQUEST;}  }
class C{  private void handleRecoverableDLException(StreamOp op,final Throwable cause){  AsyncLogWriter oldWriter=null;  boolean statusChanged=false;synchronized (this) {    if (StreamStatus.INITIALIZED == status) {      oldWriter=setStreamStatus(StreamStatus.FAILED,StreamStatus.INITIALIZED,null,null,cause);      statusChanged=true;    }  }  if (statusChanged) {    Abortables.asyncAbort(oldWriter,false);    logger.error("Failed to write data into stream {} : ",name,cause);    scheduleTryAcquireOnce(0L);  }  op.fail(cause);}  }
class C{  public void notifyListenersEraLoaded(){  if (initialized) {    for (    ActionListener l : listeners) {      l.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"ratGenEraLoaded"));    }  }}  }
class C{  public static List<Person> loadPersonData(Properties props) throws Exception {  String pathname=props.getProperty("persondata.path");  List<Person> persons=new ArrayList<>();  Path path=new File(pathname).toPath();  try (BufferedReader br=Files.newBufferedReader(path)){    int lineno=0;    String line;    while ((line=br.readLine()) != null) {      lineno++;      Object[] fields=parseLine(line,lineno,pathname);      if (fields == null)       continue;      persons.add(new Person((Integer)fields[0],(String)fields[1],(String)fields[2]));    }  }   return persons;}  }
class C{  public Date parseDate(String str){  try {    return dateFormat.parse(str);  } catch (  java.text.ParseException e) {    throw new RuntimeException(e);  }}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>Supplier<R> partial6(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final T6 t6,final HexFunction<T1,T2,T3,T4,T5,T6,R> hexFunc){  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.BOOL_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public final void add(long timestamp,EventBean bean){  if (window.isEmpty()) {    TimeWindowPair pair=new TimeWindowPair(timestamp,bean);    window.add(pair);    if (reverseIndex != null) {      reverseIndex.put(bean,pair);    }    size=1;    return;  }  TimeWindowPair lastPair=window.getLast();  if (lastPair.getTimestamp() == timestamp) {    if (lastPair.getEventHolder() instanceof List) {      List<EventBean> list=(List<EventBean>)lastPair.getEventHolder();      list.add(bean);    } else     if (lastPair.getEventHolder() == null) {      lastPair.setEventHolder(bean);    } else {      EventBean existing=(EventBean)lastPair.getEventHolder();      List<EventBean> list=new ArrayList<EventBean>(4);      list.add(existing);      list.add(bean);      lastPair.setEventHolder(list);    }    if (reverseIndex != null) {      reverseIndex.put(bean,lastPair);    }    size++;    return;  }  TimeWindowPair pair=new TimeWindowPair(timestamp,bean);  if (reverseIndex != null) {    reverseIndex.put(bean,pair);  }  window.add(pair);  size++;}  }
class C{  public static Number tan(Number a){  return Math.tan(a.doubleValue());}  }
class C{  @Override public void bindView(View view,Context context,Cursor cursor){  ImageView iview=(ImageView)view.findViewById(R.id.imgview);  if (iview != null) {    long dbid=cursor.getLong(cursor.getColumnIndex(DatabaseManager.COLUMN_PRIMARY));    if (!Bitmaps.containsKey(dbid)) {      File file=findFirstFile(context,cursor);      if (file != null) {        Bitmap bm=readAndDecompressThumbnail(file);        if (bm != null) {          iview.setImageBitmap(bm);          Bitmaps.put(dbid,bm);        }      }    } else {      iview.setImageBitmap(Bitmaps.get(dbid));    }  }}  }
class C{  protected static int randomInt(int max){  return ThreadLocalRandom.current().nextInt(max);}  }
class C{  public C classify(MapEntity entity){  C result=null;  for (  RuleGroup<C> rg : rules) {    String attValue=entity.getAttributeValue(rg.attName);    if (attValue != null) {      int min=0;      int max=rg.attValueRules.size() - 1;      int curr;      int cr;      Rule<C> currRule;      while (min <= max) {        curr=(min + max) / 2;        currRule=rg.attValueRules.get(curr);        cr=attValue.compareTo(currRule.attValue);        if (cr < 0)         max=curr - 1; else         if (cr > 0)         min=curr + 1; else {          result=currRule.subClassifier.classify(entity);          break;        }      }      if (result == null && rg.defaultSubClassifier != null) {        result=rg.defaultSubClassifier.classify(entity);      }      if (result != null)       return result;    }  }  return defaultEntityClass;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public double secondsSinceStart(){  return (timeSinceStart()) / 1000.0;}  }
class C{  public void testDriveDeserialization() throws Exception {  final DefaultSerializer serializer=new DefaultSerializer(new DefaultLogger());  String source="{\"@odata.context\":\"https://api.onedrive.com/v1.0/$metadata#drives/$entity\",\"id\":\"8bf6ae90006c4a4c\",\"driveType\":\"personal\",\"owner\":{\"user\":{\"displayName\":\"Peter\",\"id\":\"8bf6ae90006c4a4c\"}},\"quota\":{\"deleted\":1485718314,\"remaining\":983887466461,\"state\":\"normal\",\"total\":1142461300736,\"used\":158573834275}}";  Drive result=serializer.deserializeObject(source,Drive.class);  assertNotNull(result);  assertEquals("personal",result.driveType);  assertEquals(Long.valueOf(983887466461L),result.quota.remaining);  assertEquals("8bf6ae90006c4a4c",result.id);}  }
class C{  static PollMessage createGainingTransferPollMessage(String targetId,TransferData transferData,HistoryEntry historyEntry){  return new PollMessage.OneTime.Builder().setClientId(transferData.getGainingClientId()).setEventTime(transferData.getPendingTransferExpirationTime()).setMsg(transferData.getTransferStatus().getMessage()).setResponseData(ImmutableList.of(createTransferResponse(targetId,transferData),ContactPendingActionNotificationResponse.create(targetId,transferData.getTransferStatus().isApproved(),transferData.getTransferRequestTrid(),historyEntry.getModificationTime()))).setParent(historyEntry).build();}  }
class C{  private final void freeNode(DynamicTreeNode node){  assert (node != null);  assert (0 < m_nodeCount);  node.parent=m_freeList != NULL_NODE ? m_nodes[m_freeList] : null;  node.height=-1;  m_freeList=node.id;  m_nodeCount--;}  }
class C{  public RectListManager(Collection rects){  this.rects=new Rectangle[rects.size()];  Iterator i=rects.iterator();  int j=0;  while (i.hasNext())   this.rects[j++]=(Rectangle)i.next();  this.size=this.rects.length;  Arrays.sort(this.rects,comparator);}  }
class C{  DOMStringListImpl(String[] params){  fStrings=new Vector();  if (params != null) {    for (int i=0; i < params.length; i++) {      fStrings.add(params[i]);    }  }}  }
class C{  public static Minutes minutesIn(ReadableInterval interval){  if (interval == null) {    return Minutes.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.minutes());  return Minutes.minutes(amount);}  }
class C{  public int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  @Override public boolean equals(Object that){  if (!(that instanceof S2CellUnion)) {    return false;  }  S2CellUnion union=(S2CellUnion)that;  return this.cellIds.equals(union.cellIds);}  }
class C{  public void processCommandLineArgs(String[] args){  if (args.length > 0)   open(new File(args[0]));}  }
class C{  public void storeValues(){  try {    mSemaphore.acquire();    SharedPreferences.Editor editor=mPreferences.edit();    editor.clear();    editor.putInt(PACKAGEORDER + "size",mPackageOrder.size());    for (Integer i=0; i < mPackageOrder.size(); i++) {      String actKey=PACKAGEORDER + i.toString();      editor.remove(actKey);      editor.putString(actKey,mPackageOrder.get(i));    }    editor.putBoolean("prefHideLeftBarInAppOverview",mHideLeftBarInAppOverview);    editor.putBoolean("prefShowBackgroundForAppNames",mShowBackgroundForAppNames);    editor.putBoolean("prefHaveUpdateSeen",mHaveUpdateSeen);    editor.putBoolean("prefAutoSelectFirstIcon",mAutoSelectFirstIcon);    editor.putStringSet("prefHiddenApps",mHiddenAppsList);    editor.putBoolean("prefShowSysApps",mShowSystemApps);    editor.putString("prefKodiUpdatePolicy",mKodiUpdatePolicy);    editor.putString("prefLanguage",mLanguage);    editor.putString("prefAppIconSize",mAppIconSize.toString());    editor.commit();  } catch (  Exception e) {    StringWriter errors=new StringWriter();    e.printStackTrace(new PrintWriter(errors));    String errorReason=errors.toString();    Log.d(SettingsProvider.class.getName(),"Exception while reading settings: \n" + errorReason);  }  mSemaphore.release();}  }
class C{  private boolean isNull(byte[] rawBytes,MariaDbType dataType){  return (rawBytes == null || (isBinaryEncoded && ((dataType == MariaDbType.DATE || dataType == MariaDbType.TIMESTAMP || dataType == MariaDbType.DATETIME) && rawBytes.length == 0)) || (!isBinaryEncoded && ((dataType == MariaDbType.TIMESTAMP || dataType == MariaDbType.DATETIME) && zeroTimestamp.equals(new String(rawBytes,StandardCharsets.UTF_8)))) || (!isBinaryEncoded && (dataType == MariaDbType.DATE && zeroDate.equals(new String(rawBytes,StandardCharsets.UTF_8)))));}  }
class C{  private void validateStreamLocality(LogicalPlan dag,String name,DAG.Locality locality){  LogicalPlan.StreamMeta meta=dag.getStream(name);  Assert.assertTrue("Metadata for stream is available ",meta != null);  Assert.assertEquals("Locality is " + locality,meta.getLocality(),locality);}  }
class C{  protected void startTrade(Player partner){  this.partnerName=partner.getName();  this.tradeState=TradeState.MAKING_OFFERS;}  }
class C{  public VectorClock(VectorClock other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetVersions()) {    List<ClockEntry> __this__versions=new ArrayList<ClockEntry>();    for (    ClockEntry other_element : other.versions) {      __this__versions.add(new ClockEntry(other_element));    }    this.versions=__this__versions;  }  this.timestamp=other.timestamp;}  }
class C{  public UserDAOImpl(SqlMapClient sqlMapClient){  super();  this.sqlMapClient=sqlMapClient;}  }
class C{  public FastBuffer(){  this.minChunkLen=1024;}  }
class C{  public static DateTimeFormatter hour(){  return Constants.hde;}  }
class C{  public RowSet createShared() throws SQLException {  RowSet clone;  try {    clone=(RowSet)clone();  } catch (  CloneNotSupportedException ex) {    throw new SQLException(ex.getMessage());  }  return clone;}  }
class C{  @Override public int updateCalendar(Connection conn,String calendarName,Calendar calendar) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeObject(calendar);  byte buf[]=baos.toByteArray();  ByteArrayInputStream bais=new ByteArrayInputStream(buf);  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_CALENDAR));    ps.setBinaryStream(1,bais,buf.length);    ps.setString(2,calendarName);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public Result run(Computer computer,Class<?>... classes){  return run(Request.classes(computer,classes));}  }
class C{  public void testSubMapEntrySetSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  map.put("D","d");  NavigableMap<String,String> subMap=map.subMap("A",true,"C",true);  Iterator<Entry<String,String>> iterator=subMap.entrySet().iterator();  Entry<String,String> entryA=iterator.next();  assertEquals("a",entryA.setValue("x"));  assertEquals("x",entryA.getValue());  assertEquals("x",subMap.get("A"));  assertEquals("x",map.get("A"));  Entry<String,String> entryB=iterator.next();  assertEquals("b",entryB.setValue("y"));  Entry<String,String> entryC=iterator.next();  assertEquals("c",entryC.setValue("z"));  assertEquals("y",entryB.getValue());  assertEquals("y",subMap.get("B"));  assertEquals("y",map.get("B"));  assertEquals("z",entryC.getValue());  assertEquals("z",subMap.get("C"));  assertEquals("z",map.get("C"));}  }
class C{  private void parseNoWildCards(){  fSegments=new String[1];  fSegments[0]=fPattern;  fBound=fLength;}  }
class C{  public static List<Integer> createColors(int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(i);  }  return result;}  }
class C{  public void attachView(V view){  this.mView=view;}  }
class C{  public int writeUTF8(final CharSequence chars){  return writeUTF8(chars,0,chars.length());}  }
class C{  public VCardReader(File file) throws FileNotFoundException {  this(file,VCardVersion.V2_1);}  }
class C{  public TreeList(TreeModel treeModel){  super.setModel(myListModel);  myTreeModel=treeModel;  myTreeModel.addTreeModelListener(this);  Object root=myTreeModel.getRoot();  if (root instanceof TreeNode) {    TreeNode node=(TreeNode)root;    myListModel.addElement(node);    if (myTreeModel instanceof DefaultTreeModel && ((DefaultTreeModel)myTreeModel).asksAllowsChildren() && node.getAllowsChildren()) {      Enumeration enumeration=node.children();      while (enumeration.hasMoreElements()) {        Object object=enumeration.nextElement();        myListModel.addElement(object);      }    }  }}  }
class C{  private void writeDocument(Document doc,File f,String characterSet,String lineSeparator) throws IOException {  LFWriter out=new LFWriter(new OutputStreamWriter(new FileOutputStream(f),characterSet));  out.setLineSeparator(lineSeparator);  try {    String sequence;    for (int i=0; i < doc.getLength(); i+=256) {      out.write(doc.getText(i,Math.min(256,doc.getLength() - i)));    }  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  } finally {    out.close();    undoManager.discardAllEdits();  }}  }
class C{  @Override public int hashCode(){  int hash=HashUtilities.hashCode(17,this.shadowSize);  hash=HashUtilities.hashCode(hash,this.shadowColor);  hash=HashUtilities.hashCode(hash,this.shadowOpacity);  hash=HashUtilities.hashCode(hash,this.distance);  hash=HashUtilities.hashCode(hash,this.angle);  return hash;}  }
class C{  public JsonArray add(String value){  values.add(Json.value(value));  return this;}  }
class C{  public static void main(String[] args){  try {    httpTransport=GoogleNetHttpTransport.newTrustedTransport();    dataStoreFactory=new FileDataStoreFactory(DATA_STORE_DIR);    Analytics analytics=initializeAnalytics();    String profileId=getFirstProfileId(analytics);    if (profileId == null) {      System.err.println("No profiles found.");    } else {      GaData gaData=executeDataQuery(analytics,profileId);      printGaData(gaData);    }  } catch (  GoogleJsonResponseException e) {    System.err.println("There was a service error: " + e.getDetails().getCode() + " : "+ e.getDetails().getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  protected void update(){  int i;  Dimension preferred;  setLayout(new GridLayout(m_Rows.size(),1,m_GapHorizontal,m_GapVertical));  for (i=0; i < m_Rows.size(); i++)   add(m_Rows.get(i));  for (i=0; i < m_Rows.size(); i++) {    if (m_Parameters.get(i) instanceof JSpinner)     ((JSpinner)m_Parameters.get(i)).setPreferredSize((Dimension)m_PreferredDimensionJSpinner.clone());  }  preferred=new Dimension(0,0);  for (i=0; i < m_Rows.size(); i++) {    if (m_Labels.get(i).getPreferredSize().getWidth() > preferred.getWidth())     preferred=m_Labels.get(i).getPreferredSize();  }  for (i=0; i < m_Rows.size(); i++)   m_Labels.get(i).setPreferredSize(preferred);}  }
class C{  public Analyzer includeMaximumParetoFrontError(){  includeMaximumParetoFrontError=true;  return this;}  }
class C{  private State(Function.F1<S,Tuple<A,S>> runState){  this.runState=runState;}  }
class C{  protected void initialize(Variable variable){  if (variable instanceof RealVariable) {    RealVariable real=(RealVariable)variable;    real.setValue(PRNG.nextDouble(real.getLowerBound(),real.getUpperBound()));  } else   if (variable instanceof BinaryVariable) {    BinaryVariable binary=(BinaryVariable)variable;    for (int i=0; i < binary.getNumberOfBits(); i++) {      binary.set(i,PRNG.nextBoolean());    }  } else   if (variable instanceof Permutation) {    Permutation permutation=(Permutation)variable;    int[] array=permutation.toArray();    PRNG.shuffle(array);    permutation.fromArray(array);  } else   if (variable instanceof Grammar) {    Grammar grammar=(Grammar)variable;    int[] array=grammar.toArray();    for (int i=0; i < array.length; i++) {      array[i]=PRNG.nextInt(grammar.getMaximumValue());    }    grammar.fromArray(array);  } else   if (variable instanceof Program) {    Program program=(Program)variable;    Rules rules=program.getRules();    int depth=PRNG.nextInt(2,rules.getMaxInitializationDepth());    boolean isFull=PRNG.nextBoolean();    Node root=null;    if (isFull) {      if (rules.getScaffolding() == null) {        root=rules.buildTreeFull(rules.getReturnType(),depth);      } else {        root=rules.buildTreeFull(rules.getScaffolding(),depth);      }    } else {      if (rules.getScaffolding() == null) {        root=rules.buildTreeGrow(rules.getReturnType(),depth);      } else {        root=rules.buildTreeGrow(rules.getScaffolding(),depth);      }    }    program.setArgument(0,root);  } else {    System.err.println("can not initialize unknown type");  }}  }
class C{  public void update(final T dataItem){  if (dataItem == null)   return;  if (maxValue_ == null || comparator_.compare(dataItem,maxValue_) > 0) {    maxValue_=dataItem;  }  if (minValue_ == null || comparator_.compare(dataItem,minValue_) < 0) {    minValue_=dataItem;  }  if (baseBufferCount_ + 1 > combinedBufferItemCapacity_) {    ItemsUtil.growBaseBuffer(this);  }  combinedBuffer_[baseBufferCount_++]=dataItem;  n_++;  if (baseBufferCount_ == 2 * k_) {    ItemsUtil.processFullBaseBuffer(this);  }}  }
class C{  public boolean hasStatementsRecovery(){  return (this.bits & ENABLE_STATEMENTS_RECOVERY) != 0;}  }
class C{  protected Map<String,Set<URI>> findExistingMasksForComputeResources(BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,ListMultimap<String,String> computeToPorts){  Map<String,Set<URI>> matchingExportMaskURIs=new HashMap<String,Set<URI>>();  for (  Map.Entry<String,Collection<String>> entry : computeToPorts.asMap().entrySet()) {    String computeResourceId=entry.getKey();    List<String> portNames=new ArrayList<String>(entry.getValue());    _log.info("findExistingMasksForComputeResource - Trying to find " + "existing export for compute resource {} with these ports: {}",computeResourceId,Joiner.on(',').join(portNames));    Map<String,Set<URI>> exportMaskURIs=device.findExportMasks(storage,portNames,false);    for (    String portName : exportMaskURIs.keySet()) {      if (exportMaskURIs.get(portName) != null) {        for (        URI maskURI : exportMaskURIs.get(portName)) {          ExportMask mask=_dbClient.queryObject(ExportMask.class,maskURI);          boolean addMask=true;          if (exportGroup.forHost() && maskAppliesToMultipleHosts(mask)) {            addMask=false;            _log.info("findExistingMasksForComputeResource - disqualifying mask {} because it contains multiple hosts",mask.getMaskName());          } else           if (exportGroup.forCluster() && !maskAppliesToMultipleHosts(mask)) {            addMask=false;            _log.info("findExistingMasksForComputeResource - (temporarily) disqualifying mask {} because it does not " + "contain multiple hosts.  Additional check will be made in next phase.",mask.getMaskName());          }          if (addMask) {            if (matchingExportMaskURIs.get(computeResourceId) == null) {              matchingExportMaskURIs.put(computeResourceId,new HashSet<URI>());            }            matchingExportMaskURIs.get(computeResourceId).add(maskURI);          }        }      }    }    if (exportGroup.getType() != null && exportGroup.forCluster() && matchingExportMaskURIs.isEmpty()) {      _log.info("findExistingMasksForComputeResource - Trying to find " + "existing multiple export for compute resource {} with these exact ports: {}",computeResourceId,Joiner.on(',').join(portNames));      exportMaskURIs=device.findExportMasks(storage,portNames,false);      if (exportMaskURIs.size() == portNames.size()) {        _log.info("findExistingMasksForComputeResource - Found that returned masks do contain " + "all of the port necessary to consistute the compute resource: " + computeResourceId);        for (        String portName : exportMaskURIs.keySet()) {          if (matchingExportMaskURIs.get(computeResourceId) == null) {            matchingExportMaskURIs.put(computeResourceId,new HashSet<URI>());          }          matchingExportMaskURIs.get(computeResourceId).addAll(exportMaskURIs.get(portName));        }      }    }  }  _log.info("findExistingMasksForComputeResource - {} compute resources were found",matchingExportMaskURIs.size());  return matchingExportMaskURIs;}  }
class C{  private void launchActivity(Intent intent,boolean isAppLaunched){  File sharedFolder=new File(getCacheDir(),SHARED_FOLDER);  if (sharedFolder.exists()) {    ContentUtils.deleteDirectory(sharedFolder);  }  sharedFolder.mkdir();  ArrayList<SharedDataItem> cachedFiles=new ArrayList<>(SharedDataItem.listSharedDataItems(intent));  if (null != cachedFiles) {    for (    SharedDataItem sharedDataItem : cachedFiles) {      sharedDataItem.saveMedia(this,sharedFolder);    }  }  Log.d(LOG_TAG,"onCreate : launch home activity with the files list " + cachedFiles.size() + " files");  Intent activityIntent;  if (isAppLaunched) {    activityIntent=new Intent(this,VectorHomeActivity.class);  } else {    activityIntent=new Intent(this,SplashActivity.class);  }  activityIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);  if (0 != cachedFiles.size()) {    Intent shareIntent=new Intent();    shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);    shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,cachedFiles);    shareIntent.setExtrasClassLoader(SharedDataItem.class.getClassLoader());    shareIntent.setType("*/*");    activityIntent.putExtra(VectorHomeActivity.EXTRA_SHARED_INTENT_PARAMS,shareIntent);  }  startActivity(activityIntent);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer(hex6(codePoint));  if (getUpperMap() != MAP_UNDEFINED) {    result.append(", upper=").append(hex6(upperMap));  }  if (getLowerMap() != MAP_UNDEFINED) {    result.append(", lower=").append(hex6(lowerMap));  }  if (getTitleMap() != MAP_UNDEFINED) {    result.append(", title=").append(hex6(titleMap));  }  return result.toString();}  }
class C{  public BeaJDKParser(BufferedReader bis,Map threadStore,int lineCounter,DateMatcher dm){  super(bis,dm);  this.threadStore=threadStore;  this.lineCounter=lineCounter;}  }
class C{  public String guessEncoding(WebPage page,String defaultValue){  CharSequence baseUrlUtf8=page.getBaseUrl();  String baseUrl=TableUtil.toString(baseUrlUtf8);  return guessEncoding(baseUrl,defaultValue);}  }
class C{  public static final double log10(double a){  return ieee754_log(a) / log10;}  }
class C{  public void displayAchievement(Player player,String configAchievement){  YamlManager config=plugin.getPluginConfig();  String achievementName=config.getString(configAchievement + ".Name");  String displayName=config.getString(configAchievement + ".DisplayName","");  String message=config.getString(configAchievement + ".Message","");  String nameToShowUser;  if (Strings.isNullOrEmpty(displayName)) {    nameToShowUser=ChatColor.translateAlternateColorCodes('&',achievementName);    plugin.getLogger().info("Player " + player.getName() + " received the achievement: "+ achievementName);  } else {    nameToShowUser=ChatColor.translateAlternateColorCodes('&',displayName);    plugin.getLogger().info("Player " + player.getName() + " received the achievement: "+ achievementName+ " ("+ displayName+ ")");  }  String msg=ChatColor.translateAlternateColorCodes('&',message);  player.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("achievement-new","New Achievement:") + " "+ ChatColor.WHITE+ nameToShowUser);  if (chatNotify) {    for (    Player p : plugin.getServer().getOnlinePlayers()) {      if (!p.getName().equals(player.getName())) {        p.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("achievement-received","PLAYER received the achievement:").replace("PLAYER",player.getName()) + " "+ ChatColor.WHITE+ nameToShowUser);      }    }  }  player.sendMessage(plugin.getChatHeader() + ChatColor.WHITE + msg);  if (firework)   displayFirework(player);  if (titleScreen)   displayTitle(player,nameToShowUser,msg);}  }
class C{  public void endDTD() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endDTD");  if (null != m_lexicalHandler) {    m_lexicalHandler.endDTD();  }}  }
class C{  public final static double distance_to_line(double x1,double y1,double x2,double y2,double x3,double y3){  double x12=x2 - x1;  double y12=y2 - y1;  double x13=x3 - x1;  double y13=y3 - y1;  double D12=Math.sqrt(x12 * x12 + y12 * y12);  double pp=(x12 * x13 + y12 * y13) / D12;  if (pp < 0.0) {    return (float)Math.sqrt(x13 * x13 + y13 * y13);  }  if (pp > D12) {    double x23=x3 - x2;    double y23=y3 - y2;    return Math.sqrt(x23 * x23 + y23 * y23);  }  return Math.abs(((x12 * y13 - y12 * x13) / D12));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Region createOffHeapRegion(String name,DataPolicy dataPolicy){  return getCache().createRegionFactory().setOffHeap(true).setDataPolicy(dataPolicy).create(name);}  }
class C{  public byte[] encrypt(byte[] data,TorPublicKey publicKey){  if (data.length < PK_DATA_LEN)   return encryptSimple(data,publicKey);  TorStreamCipher randomKeyCipher=TorStreamCipher.createWithRandomKey();  final byte[] kAndM1=new byte[PK_DATA_LEN];  System.arraycopy(randomKeyCipher.getKeyBytes(),0,kAndM1,0,TorStreamCipher.KEY_LEN);  System.arraycopy(data,0,kAndM1,TorStreamCipher.KEY_LEN,PK_DATA_LEN_WITH_KEY);  final byte[] c1=encryptSimple(kAndM1,publicKey);  final byte[] c2=new byte[data.length - PK_DATA_LEN_WITH_KEY];  System.arraycopy(data,PK_DATA_LEN_WITH_KEY,c2,0,c2.length);  randomKeyCipher.encrypt(c2);  final byte[] output=new byte[c1.length + c2.length];  System.arraycopy(c1,0,output,0,c1.length);  System.arraycopy(c2,0,output,c1.length,c2.length);  return output;}  }
class C{  @Deprecated public void templateParams(Map<String,Object> params){  updateOrCreateScript(null,null,null,params);}  }
class C{  synchronized public void updateBest(FinalSolution candidate){  if (this.best == null) {    this.best=candidate;    return;  }  int index=0;  for (  double value : this.best.getFitness()) {    if (value > candidate.getFitness()[index]) {      this.best=candidate;      return;    }    if (value < candidate.getFitness()[index]) {      return;    }    index++;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, val;  double[] N=new double[8];  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val != noData) {              n+=1 * filterShape[a];              sum+=val * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,z - (sum / n));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void handleStart(Operation start){  try {    if (!start.hasBody()) {      throw new IllegalArgumentException("body is required");    }    start.complete();  } catch (  Throwable e) {    start.fail(e);  }}  }
class C{  public static int[] prepareRowIndicesMin(int iCols,double vmb[],BinaryOperator bOp) throws DMLRuntimeException {  int[] vixCumSum=null;  int[] vix=new int[iCols];  if (!(bOp.fn instanceof NotEquals || bOp.fn instanceof Equals)) {    for (int i=0; i < iCols; i++)     vix[i]=i;    SortUtils.sortByValueStable(0,iCols,vmb,vix);  }  if (bOp.fn instanceof LessThan || bOp.fn instanceof LessThanEquals || bOp.fn instanceof GreaterThan|| bOp.fn instanceof GreaterThanEquals) {    boolean bPrimeCumSum=false;    if (bOp.fn instanceof GreaterThan || bOp.fn instanceof GreaterThanEquals)     bPrimeCumSum=true;    double dvix[]=new double[vix.length];    if (bPrimeCumSum)     for (int i=0; i < vix.length; i++)     dvix[vix.length - 1 - i]=vix[i]; else     for (int i=0; i < vix.length; i++)     dvix[i]=vix[i];    MatrixBlock mbix=DataConverter.convertToMatrixBlock(dvix,true);    UnaryOperator u_op=new UnaryOperator(Builtin.getBuiltinFnObject(Builtin.BuiltinCode.CUMMIN));    MatrixBlock mbResult=(MatrixBlock)mbix.unaryOperations(u_op,new MatrixBlock());    vixCumSum=DataConverter.convertToIntVector(mbResult);    if (bPrimeCumSum)     for (int i=0; i < (vixCumSum.length + 1) / 2; i++) {      int iTemp=vixCumSum[vixCumSum.length - 1 - i];      vixCumSum[vixCumSum.length - 1 - i]=vixCumSum[i];      vixCumSum[i]=iTemp;    }    adjustRowIndicesMin(vixCumSum,vmb,bOp);  } else   if (bOp.fn instanceof Equals || bOp.fn instanceof NotEquals) {    adjustRowIndicesMin(vix,vmb,bOp);    vixCumSum=vix;  }  return vixCumSum;}  }
class C{  private static String removeRepeatedBlankSpaces(String inputString){  StringBuffer buffer=new StringBuffer();  int i=0;  while (i < inputString.length()) {    char ch=inputString.charAt(i);    if (ch == ' ') {      buffer.append(' ');      while ((i < inputString.length()) && (inputString.charAt(i) == ch)) {        i++;      }    } else {      buffer.append(ch);      i++;    }  }  return buffer.toString();}  }
class C{  public static void deletePackage(IPackageFragment pack) throws CoreException {  for (int i=0; i < MAX_RETRY; i++) {    try {      pack.delete(true,null);      i=MAX_RETRY;    } catch (    CoreException e) {      if (i == MAX_RETRY - 1) {        JavaPlugin.log(e);        throw e;      }      try {        JavaPlugin.log(new IllegalStateException("sleep before retrying JavaProjectHelper.delete() for package " + pack.getHandleIdentifier()));        Thread.sleep(RETRY_DELAY);      } catch (      InterruptedException e1) {      }    }  }}  }
class C{  public SecurityObjectVO(){}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String json=getAlertsList(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(json);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public static boolean readBoolean(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getBoolean(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  boolean value=false;  if (!jsonArray.isNull(index)) {    value=jsonArray.getBoolean(index);  }  return value;}  }
class C{  @Override public boolean isBusy(){  return (m_ioThread != null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return Boolean.FALSE;  return Boolean.valueOf(a.isDontLike());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.COMPOSED_CONTENT__OWNER:    setOwner((Composite)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean migrate(final Session session,final MigrationResources resources){  return MigrationEngine.withSession(session).migrate(resources);}  }
class C{  public void show(){  show(false,null);}  }
class C{  private DeferredResult<List<WordCountsResponse>> processDocuments(List<String> documentLinks){  if (documentLinks == null || documentLinks.isEmpty()) {    return DeferredResult.completed(Collections.emptyList());  }  List<DeferredResult<WordCountsResponse>> deferredResults=documentLinks.stream().map(null).collect(Collectors.toList());  return DeferredResult.allOf(deferredResults);}  }
class C{  @HLEFunction(nid=0x787D04D5,version=150,checkInsideInterrupt=true) public int __sceSasSetPause(int sasCore,int voice_bit,boolean setPause){  checkSasHandleGood(sasCore);  for (int i=0; voice_bit != 0; i++, voice_bit>>>=1) {    if ((voice_bit & 1) != 0) {      voices[i].setPaused(setPause);    }  }  return 0;}  }
class C{  public boolean removeHost(MacAddress host){  for (  Entry<String,MacAddress> entry : this.portToMac.entrySet()) {    if (entry.getValue().equals(host)) {      this.portToMac.remove(entry.getKey());      return true;    }  }  return false;}  }
class C{  public BooleanProperty showProperty(){  return show;}  }
class C{  private static byte[] readCheckedBytes(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  CheckedMessage wrapper=new CheckedMessage();  MessageNano.mergeFrom(wrapper,buffer,0,dataSize);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  if (wrapper.checksum != checksum.getValue()) {    throw new InvalidProtocolBufferNanoException("checksum does not match");  }  return wrapper.payload;}  }
class C{  public void ensureCapacity(int capacity){  byte[] data=_data;  if (capacity > data.length) {    int newCap=Math.max(data.length < 100000 ? data.length << 1 : data.length * 4 / 3,capacity);    byte[] tmp=new byte[newCap];    System.arraycopy(data,0,tmp,0,data.length);    _data=tmp;  }}  }
class C{  public NoStatistics(){  super(null);}  }
class C{  public int commonPrefixLength(RandomAccessData o1,RandomAccessData o2){  int minBytesLen=Math.min(o1.size,o2.size);  for (int i=0; i < minBytesLen; i++) {    int b1=o1.buffer[i] & 0xFF;    int b2=o2.buffer[i] & 0xFF;    if (b1 != b2) {      return i;    }  }  return minBytesLen;}  }
class C{  final int slotsOnPage(){  return htree.bucketSlots;}  }
class C{  public void moveNodes(final List<Node> allNodes,final int deltaLatE7,final int deltaLonE7){  if (allNodes == null) {    Log.d("StorageDelegator","moveNodes  no nodes!");    return;  }  dirty=true;  try {    HashSet<Node> nodes=new HashSet<Node>(allNodes);    for (    Node nd : nodes) {      undo.save(nd);      apiStorage.insertElementSafe(nd);      nd.setLat(nd.getLat() + deltaLatE7);      nd.setLon(nd.getLon() + deltaLonE7);      nd.updateState(OsmElement.STATE_MODIFIED);    }    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public static boolean validatePassword(char[] password,String correctHash) throws NoSuchAlgorithmException, InvalidKeySpecException {  String[] params=correctHash.split(":");  int iterations=Integer.parseInt(params[ITERATION_INDEX]);  byte[] salt=fromHex(params[SALT_INDEX]);  byte[] hash=fromHex(params[PBKDF2_INDEX]);  byte[] testHash=pbkdf2(password,salt,iterations,hash.length);  return slowEquals(hash,testHash);}  }
class C{  public String cpuInfo(){  return m_cpuInfo;}  }
class C{  public static Pair<Integer,Double> max(double[] array){  double max=Double.NEGATIVE_INFINITY;  int argMin=-1;  int id=0;  for (  double d : array) {    if (d > max) {      max=d;      argMin=id;    }    id++;  }  return new Pair<>(argMin,max);}  }
class C{  public T image(Bitmap bm,float ratio){  BitmapAjaxCallback cb=new BitmapAjaxCallback();  cb.ratio(ratio).bitmap(bm);  return image(cb);}  }
class C{  public static SpreadMap toSpreadMap(Iterable self){  if (self == null)   throw new GroovyRuntimeException("Fail to convert Iterable to SpreadMap, because it is null."); else   return toSpreadMap(asList(self));}  }
class C{  public Object evaluate(final Reader reader,final String sourceName) throws IOException {  notNull(reader);  try {    return evaluate(IOUtils.toString(reader),sourceName);  }  finally {    reader.close();  }}  }
class C{  private CViewPruner(){}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    Loger.debug(String.format("%s",e.toString()));    return false;  }}  }
class C{  private void buildAndRunCollectorChain(QueryResult qr,Query query,Filter luceneFilter,Collector collector,QueryCommand cmd,DelegatingCollector postFilter) throws IOException {  final boolean terminateEarly=(cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;  if (terminateEarly) {    collector=new EarlyTerminatingCollector(collector,cmd.len);  }  final long timeAllowed=cmd.getTimeAllowed();  if (timeAllowed > 0) {    collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),timeAllowed);  }  if (postFilter != null) {    postFilter.setLastDelegate(collector);    collector=postFilter;  }  try {    super.search(query,luceneFilter,collector);    if (collector instanceof DelegatingCollector) {      ((DelegatingCollector)collector).finish();    }  } catch (  TimeLimitingCollector.TimeExceededException x) {    log.warn("Query: " + query + "; "+ x.getMessage());    qr.setPartialResults(true);  }}  }
class C{  @Dev public KilledForQuestCondition(String quest,@Dev(defaultValue="1") int index){  this.questSlot=checkNotNull(quest);  this.questIndex=index;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  int numPerms=m_perms.count();  buffer.append("AcsTokenArchive[");  buffer.append("m_acsId = ").append(m_acsId);  buffer.append(", m_mgrId = ").append(m_mgrId);  buffer.append(", m_perms = [");  for (int i=0; i < numPerms; i++) {    buffer.append(" perm").append(i + 1);    buffer.append(" = ").append((m_perms.get(i)));    if (i < (numPerms - 1))     buffer.append(",");  }  buffer.append("]");  buffer.append(", m_crtrId = ").append(m_crtrId);  buffer.append(", m_crtrType = ").append(m_crtrType);  buffer.append("]");  return buffer.toString();}  }
class C{  public void addStrategyWorker(String key,final StrategyRule strategy){  m_strategyWorkers.put(key,strategy);}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  typeRefEClass=createEClass(TYPE_REF);  createEAttribute(typeRefEClass,TYPE_REF__NULL_MODIFIER);  createEAttribute(typeRefEClass,TYPE_REF__UNDEF_MODIFIER);  createEOperation(typeRefEClass,TYPE_REF___GET_MODIFIERS_AS_STRING);  createEOperation(typeRefEClass,TYPE_REF___IS_FINAL_BY_TYPE);  createEOperation(typeRefEClass,TYPE_REF___IS_DYNAMIC);  createEOperation(typeRefEClass,TYPE_REF___IS_EXISTENTIAL);  createEOperation(typeRefEClass,TYPE_REF___IS_GENERIC);  createEOperation(typeRefEClass,TYPE_REF___IS_PARAMETERIZED);  createEOperation(typeRefEClass,TYPE_REF___IS_RAW);  createEOperation(typeRefEClass,TYPE_REF___GET_DECLARED_UPPER_BOUND);  createEOperation(typeRefEClass,TYPE_REF___GET_DECLARED_LOWER_BOUND);  createEOperation(typeRefEClass,TYPE_REF___GET_TYPE_ARGS);  createEOperation(typeRefEClass,TYPE_REF___UNDEFINED_OR_NULL);  createEOperation(typeRefEClass,TYPE_REF___GET_TYPE_REF_AS_STRING);  createEOperation(typeRefEClass,TYPE_REF___TO_STRING);  createEOperation(typeRefEClass,TYPE_REF___GET_DECLARED_TYPE);  createEOperation(typeRefEClass,TYPE_REF___IS_TOP_TYPE);  createEOperation(typeRefEClass,TYPE_REF___IS_BOTTOM_TYPE);  createEOperation(typeRefEClass,TYPE_REF___GET_TYPING_STRATEGY);  createEOperation(typeRefEClass,TYPE_REF___GET_STRUCTURAL_MEMBERS);  createEOperation(typeRefEClass,TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING);  createEOperation(typeRefEClass,TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING);  staticBaseTypeRefEClass=createEClass(STATIC_BASE_TYPE_REF);  baseTypeRefEClass=createEClass(BASE_TYPE_REF);  createEAttribute(baseTypeRefEClass,BASE_TYPE_REF__DYNAMIC);  createEOperation(baseTypeRefEClass,BASE_TYPE_REF___GET_MODIFIERS_AS_STRING);  composedTypeRefEClass=createEClass(COMPOSED_TYPE_REF);  createEReference(composedTypeRefEClass,COMPOSED_TYPE_REF__CACHED_COMPOSED_MEMBERS);  createEReference(composedTypeRefEClass,COMPOSED_TYPE_REF__ORIGINAL_COMPOSED_TYPE_REF);  createEReference(composedTypeRefEClass,COMPOSED_TYPE_REF__TYPE_REFS);  createEOperation(composedTypeRefEClass,COMPOSED_TYPE_REF___IS_DYNAMIC);  createEOperation(composedTypeRefEClass,COMPOSED_TYPE_REF___GET_TYPE_REF_AS_STRING);  unionTypeExpressionEClass=createEClass(UNION_TYPE_EXPRESSION);  createEOperation(unionTypeExpressionEClass,UNION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING);  intersectionTypeExpressionEClass=createEClass(INTERSECTION_TYPE_EXPRESSION);  createEOperation(intersectionTypeExpressionEClass,INTERSECTION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING);  thisTypeRefEClass=createEClass(THIS_TYPE_REF);  createEOperation(thisTypeRefEClass,THIS_TYPE_REF___GET_TYPE_REF_AS_STRING);  createEOperation(thisTypeRefEClass,THIS_TYPE_REF___GET_TYPING_STRATEGY);  createEOperation(thisTypeRefEClass,THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS);  createEOperation(thisTypeRefEClass,THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING);  thisTypeRefNominalEClass=createEClass(THIS_TYPE_REF_NOMINAL);  thisTypeRefStructuralEClass=createEClass(THIS_TYPE_REF_STRUCTURAL);  createEAttribute(thisTypeRefStructuralEClass,THIS_TYPE_REF_STRUCTURAL__DEFINED_TYPING_STRATEGY);  createEOperation(thisTypeRefStructuralEClass,THIS_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY);  createEOperation(thisTypeRefStructuralEClass,THIS_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY);  createEOperation(thisTypeRefStructuralEClass,THIS_TYPE_REF_STRUCTURAL___IS_USE_SITE_STRUCTURAL_TYPING);  createEOperation(thisTypeRefStructuralEClass,THIS_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS);  createEOperation(thisTypeRefStructuralEClass,THIS_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING);  boundThisTypeRefEClass=createEClass(BOUND_THIS_TYPE_REF);  createEReference(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF);  createEAttribute(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF__DEFINED_TYPING_STRATEGY);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___GET_TYPING_STRATEGY);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___GET_TYPE_REF_AS_STRING);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___GET_DECLARED_UPPER_BOUND);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING);  createEOperation(boundThisTypeRefEClass,BOUND_THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS);  parameterizedTypeRefEClass=createEClass(PARAMETERIZED_TYPE_REF);  createEReference(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF__DECLARED_TYPE);  createEReference(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF__TYPE_ARGS);  createEAttribute(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF__ARRAY_TYPE_LITERAL);  createEAttribute(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF__DEFINED_TYPING_STRATEGY);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___GET_TYPING_STRATEGY);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___CONTAINS_WILDCARDS);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___IS_PARAMETERIZED);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___IS_GENERIC);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___IS_RAW);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___CONTAINS_UNBOUND_TYPE_VARIABLES);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING);  createEOperation(parameterizedTypeRefEClass,PARAMETERIZED_TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING);  structuralTypeRefEClass=createEClass(STRUCTURAL_TYPE_REF);  createEReference(structuralTypeRefEClass,STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS);  createEReference(structuralTypeRefEClass,STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE);  createEReference(structuralTypeRefEClass,STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS);  createEReference(structuralTypeRefEClass,STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS);  createEOperation(structuralTypeRefEClass,STRUCTURAL_TYPE_REF___GET_TYPING_STRATEGY);  createEOperation(structuralTypeRefEClass,STRUCTURAL_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY);  createEOperation(structuralTypeRefEClass,STRUCTURAL_TYPE_REF___GET_STRUCTURAL_MEMBERS);  createEOperation(structuralTypeRefEClass,STRUCTURAL_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE);  parameterizedTypeRefStructuralEClass=createEClass(PARAMETERIZED_TYPE_REF_STRUCTURAL);  createEOperation(parameterizedTypeRefStructuralEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY);  createEOperation(parameterizedTypeRefStructuralEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY);  createEOperation(parameterizedTypeRefStructuralEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS);  createEOperation(parameterizedTypeRefStructuralEClass,PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING);  existentialTypeRefEClass=createEClass(EXISTENTIAL_TYPE_REF);  createEReference(existentialTypeRefEClass,EXISTENTIAL_TYPE_REF__WILDCARD);  createEReference(existentialTypeRefEClass,EXISTENTIAL_TYPE_REF__BOUND_TYPE_VARIABLE);  createEOperation(existentialTypeRefEClass,EXISTENTIAL_TYPE_REF___IS_EXISTENTIAL);  createEOperation(existentialTypeRefEClass,EXISTENTIAL_TYPE_REF___IS_GENERIC);  createEOperation(existentialTypeRefEClass,EXISTENTIAL_TYPE_REF___IS_PARAMETERIZED);  createEOperation(existentialTypeRefEClass,EXISTENTIAL_TYPE_REF___GET_TYPE_REF_AS_STRING);  unknownTypeRefEClass=createEClass(UNKNOWN_TYPE_REF);  createEOperation(unknownTypeRefEClass,UNKNOWN_TYPE_REF___GET_TYPE_REF_AS_STRING);  typeTypeRefEClass=createEClass(TYPE_TYPE_REF);  createEReference(typeTypeRefEClass,TYPE_TYPE_REF__TYPE_ARG);  createEAttribute(typeTypeRefEClass,TYPE_TYPE_REF__CONSTRUCTOR_REF);  createEOperation(typeTypeRefEClass,TYPE_TYPE_REF___GET_TYPE_REF_AS_STRING);  typeArgumentEClass=createEClass(TYPE_ARGUMENT);  createEOperation(typeArgumentEClass,TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING);  createEOperation(typeArgumentEClass,TYPE_ARGUMENT___CONTAINS_WILDCARDS);  createEOperation(typeArgumentEClass,TYPE_ARGUMENT___CONTAINS_UNBOUND_TYPE_VARIABLES);  wildcardEClass=createEClass(WILDCARD);  createEReference(wildcardEClass,WILDCARD__DECLARED_UPPER_BOUND);  createEReference(wildcardEClass,WILDCARD__DECLARED_LOWER_BOUND);  createEAttribute(wildcardEClass,WILDCARD__USING_IN_OUT_NOTATION);  createEOperation(wildcardEClass,WILDCARD___GET_DECLARED_OR_IMPLICIT_UPPER_BOUND);  createEOperation(wildcardEClass,WILDCARD___IS_IMPLICIT_UPPER_BOUND_IN_EFFECT);  createEOperation(wildcardEClass,WILDCARD___GET_TYPE_REF_AS_STRING);  functionTypeExprOrRefEClass=createEClass(FUNCTION_TYPE_EXPR_OR_REF);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_DECLARED_THIS_TYPE);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_FUNCTION_TYPE);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_VARS);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_FPARS);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_RETURN_TYPE_REF);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___IS_GENERIC);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___IS_RAW);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_FPAR_FOR_ARG_IDX__INT);  createEOperation(functionTypeExprOrRefEClass,FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_REF_AS_STRING);  functionTypeRefEClass=createEClass(FUNCTION_TYPE_REF);  createEOperation(functionTypeRefEClass,FUNCTION_TYPE_REF___GET_DECLARED_THIS_TYPE);  createEOperation(functionTypeRefEClass,FUNCTION_TYPE_REF___GET_TYPE_VARS);  createEOperation(functionTypeRefEClass,FUNCTION_TYPE_REF___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE);  createEOperation(functionTypeRefEClass,FUNCTION_TYPE_REF___GET_FPARS);  createEOperation(functionTypeRefEClass,FUNCTION_TYPE_REF___GET_RETURN_TYPE_REF);  functionTypeExpressionEClass=createEClass(FUNCTION_TYPE_EXPRESSION);  createEAttribute(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__BINDING);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__DECLARED_TYPE);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__OWNED_TYPE_VARS);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS_UPPER_BOUNDS);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__FPARS);  createEReference(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF);  createEOperation(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION___GET_TYPE_VARS);  createEOperation(functionTypeExpressionEClass,FUNCTION_TYPE_EXPRESSION___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE);  deferredTypeRefEClass=createEClass(DEFERRED_TYPE_REF);  createEOperation(deferredTypeRefEClass,DEFERRED_TYPE_REF___GET_TYPE_REF_AS_STRING);  typeVariableMappingEClass=createEClass(TYPE_VARIABLE_MAPPING);  createEReference(typeVariableMappingEClass,TYPE_VARIABLE_MAPPING__TYPE_VAR);  createEReference(typeVariableMappingEClass,TYPE_VARIABLE_MAPPING__TYPE_ARG);  parameterizedTypeRefIterableEDataType=createEDataType(PARAMETERIZED_TYPE_REF_ITERABLE);}  }
class C{  public boolean isOpenDistribucion(HttpServletRequest request){  boolean result=false;  Integer archiveId=getArchiveId(request);  result=(archiveId.intValue() != 0);  return result;}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  V v=getValidValue();  if (v == null)   return null;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,v);}  }
class C{  public Call(String functionName,Class<?> returnType){  this(functionName,returnType,new String[0],new Class<?>[0]);}  }
class C{  public static String flagString(final int flags){  final StringBuilder sb=new StringBuilder();  int onCount=0;  sb.append("[");  if ((flags & IRangeQuery.KEYS) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("KEYS");  }  if ((flags & IRangeQuery.VALS) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("VALS");  }  if ((flags & IRangeQuery.DELETED) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("DELETED");  }  if ((flags & IRangeQuery.READONLY) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("READONLY");  }  if ((flags & IRangeQuery.REMOVEALL) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("REMOVEALL");  }  if ((flags & IRangeQuery.CURSOR) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("CURSOR");  }  if ((flags & IRangeQuery.REVERSE) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("REVERSE");  }  if ((flags & IRangeQuery.FIXED_LENGTH_SUCCESSOR) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("FIXED_LENGTH_SUCCESSOR");  }  if ((flags & IRangeQuery.PARALLEL) != 0) {    if (onCount++ > 0)     sb.append(",");    sb.append("PARALLEL");  }  sb.append("]");  return sb.toString();}  }
class C{  protected static boolean readYes() throws IOException {  return (System.in.read() == 'y');}  }
class C{  public ParameterDatabase(java.io.InputStream stream) throws FileNotFoundException, IOException {  this();  label="Stream: " + System.identityHashCode(stream);  load(stream);  for (int x=0; ; x++) {    String s=getProperty("parent." + x);    if (s == null)     return;    if (new File(s).isAbsolute())     parents.addElement(new ParameterDatabase(new File(s))); else     if (s.startsWith(C_CLASS)) {      int i=indexOfFirstWhitespace(s);      if (i == -1)       throw new FileNotFoundException("Could not parse file into filename and classname:\n\tparent." + x + " = "+ s);      String classname=s.substring(C_CLASS.length(),i);      String filename=s.substring(i).trim();      try {        parents.addElement(new ParameterDatabase(filename,Class.forName(classname,true,Thread.currentThread().getContextClassLoader())));      } catch (      ClassNotFoundException ex) {        throw new FileNotFoundException("Could not parse file into filename and classname:\n\tparent." + x + " = "+ s);      }    } else     throw new FileNotFoundException("Attempt to load a relative file, but there's no parent file: " + s);  }}  }
class C{  public OpenMrsXformIndexEntry(String uuid,String name,long dateChanged){  this.uuid=Preconditions.checkNotNull(uuid);  this.name=Preconditions.checkNotNull(name);  this.dateChanged=dateChanged;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public PlainTextDictionary(Reader reader){  in=new BufferedReader(reader);}  }
class C{  public void testContains(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertTrue(q.contains(new Integer(i)));    q.poll();    assertFalse(q.contains(new Integer(i)));  }}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  public Class loadScriptByName(String scriptName) throws ResourceException, ScriptException {  URLConnection conn=rc.getResourceConnection(scriptName);  String path=conn.getURL().toExternalForm();  ScriptCacheEntry entry=scriptCache.get(path);  Class clazz=null;  if (entry != null)   clazz=entry.scriptClass;  try {    if (isSourceNewer(entry)) {      try {        String encoding=conn.getContentEncoding() != null ? conn.getContentEncoding() : config.getSourceEncoding();        String content=IOGroovyMethods.getText(conn.getInputStream(),encoding);        clazz=groovyLoader.parseClass(content,path);      } catch (      IOException e) {        throw new ResourceException(e);      }    }  }  finally {    forceClose(conn);  }  return clazz;}  }
class C{  public static double P(double Y[][],int j,int v,int k,int w){  int N=Y.length;  double p=0.0001;  for (int i=0; i < N; i++) {    if (((int)Math.round(Y[i][j]) == v) && ((int)Math.round(Y[i][k]) == w))     p+=1.0;  }  return p / N;}  }
class C{  private ArrayList<FoodModel> prepareListToReturn(List<FoodModel> passedFoods){  ArrayList<FoodModel> toReturn=new ArrayList<>(passedFoods.size());  toReturn.addAll(passedFoods);  return toReturn;}  }
class C{  private boolean initFirstTime() throws IOException {  checkedRpts=true;  placeFirstPositions();  LinkedHashMap<Term,Integer> rptTerms=repeatingTerms();  hasRpts=!rptTerms.isEmpty();  if (hasRpts) {    rptStack=new PhrasePositions[numPostings];    ArrayList<ArrayList<PhrasePositions>> rgs=gatherRptGroups(rptTerms);    sortRptGroups(rgs);    if (!advanceRepeatGroups()) {      return false;    }  }  fillQueue();  return true;}  }
class C{  public void handle(StateContext state,RootCollectionLoadEntitiesContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MultiStateUndoChange(String name,IFile file,UndoEdit[] undos,ContentStamp stamp,int saveMode){  Assert.isNotNull(name);  Assert.isNotNull(file);  Assert.isNotNull(undos);  fName=name;  fFile=file;  fUndos=undos;  fContentStampToRestore=stamp;  fSaveMode=saveMode;}  }
class C{  public void removed(Container cont){  MapTileFactory tileFactory=getTileFactory();  if (tileFactory != null) {    tileFactory.reset();  }}  }
class C{  private void clearCurrentTestResult(){  mCurrentTestResult=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.617 -0400",hash_original_method="212895DE1CCC36D7FFE1E65C62845FF5",hash_generated_method="0A836339B509C44EB6708BA33F85384C") public void discoverable(BluetoothAdapter adapter){  int mask=BluetoothReceiver.SCAN_MODE_CONNECTABLE_DISCOVERABLE_FLAG;  if (!adapter.isEnabled()) {    fail("discoverable() bluetooth not enabled");  }  int scanMode=adapter.getScanMode();  if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  assertEquals(BluetoothAdapter.SCAN_MODE_CONNECTABLE,scanMode);  long start=System.currentTimeMillis();  assertTrue(adapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE));  while (System.currentTimeMillis() - start < DISCOVERABLE_UNDISCOVERABLE_TIMEOUT) {    scanMode=adapter.getScanMode();    if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE && (receiver.getFiredFlags() & mask) == mask) {      writeOutput(String.format("discoverable() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("discoverable() timeout: scanMode=%d (expected %d), flags=0x%x " + "(expected 0x%x)",scanMode,BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE,firedFlags,mask));}  }
class C{  private boolean validateElement(InputNode node,String key) throws Exception {  String name=style.getAttribute(key);  InputNode child=node.getNext(name);  if (child == null) {    return true;  }  return root.validate(node);}  }
class C{  public _BuildAgentUpdate(){  super();}  }
class C{  public static List<HadoopInputSplit> sortInputSplits(Collection<HadoopInputSplit> splits){  int id=0;  TreeSet<SplitSortWrapper> sortedSplits=new TreeSet<>();  for (  HadoopInputSplit split : splits) {    long len=split instanceof HadoopFileBlock ? ((HadoopFileBlock)split).length() : 0;    sortedSplits.add(new SplitSortWrapper(id++,split,len));  }  ArrayList<HadoopInputSplit> res=new ArrayList<>(sortedSplits.size());  for (  SplitSortWrapper sortedSplit : sortedSplits)   res.add(sortedSplit.split);  return res;}  }
class C{  public boolean isSetEndTime(){  return EncodingUtils.testBit(issetBitfield,ENDTIME_ISSET_ID);}  }
class C{  public DateMapper pattern(String pattern){  this.pattern=pattern;  return this;}  }
class C{  public Entry(int hash,Object key1,Object key2,Object value,Entry next){  super(value,referenceQueue);  this.hash=hash;  this.key1=key1;  this.key2=key2;  this.next=next;}  }
class C{  public Histogram2D(DataSource data,Orientation orientation,Number[]... breaks){  this(data,orientation);  int count=getData().getColumnCount();  if (orientation == Orientation.HORIZONTAL) {    count=getData().getRowCount();  }  if (breaks.length != count) {    throw new IllegalArgumentException(MessageFormat.format("Invalid number of breaks: got {0,number,integer}, expected {1,number,integer}.",breaks.length,count));  }  Collections.addAll(this.breaks,breaks);  dataUpdated(getData());}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String[] serverClasses=this.context.getServerClasses();  try {    this.context.setServerClasses(null);    String contextPath=request.getParameter("path");    String warURL=request.getParameter("war");    String command=request.getServletPath();    if (command.equals("/deploy")) {      deploy(response,contextPath,warURL);    } else     if (command.equals("/undeploy")) {      undeploy(response,contextPath);    } else {      response.sendError(400,"Command " + command + " is unknown");    }  }  finally {    this.context.setServerClasses(serverClasses);  }}  }
class C{  public boolean mouseReleased(MouseEvent e){  if (coolMM) {    return getCurrentLayerMapMouseListener().mouseReleased(e);  } else {    return false;  }}  }
class C{  public void close(){  if (closed.compareAndSet(false,true)) {    doClose();  }}  }
class C{  public void recordBlockVolumeOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String evDesc=opType.getDescription();    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    recordBourneVolumeEvent(dbClient,getId(),evType,status,evDesc);    String id=(String)extParam[0];switch (opType) {case CREATE_BLOCK_VOLUME:case DELETE_BLOCK_VOLUME:      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id);    break;case EXPAND_BLOCK_VOLUME:  String size=(String)extParam[1];AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id,size);break;case CREATE_VOLUME_FULL_COPY:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id);break;case DETACH_VOLUME_FULL_COPY:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id);break;case RESTORE_VOLUME_FULL_COPY:case RESYNCHRONIZE_VOLUME_FULL_COPY:case ACTIVATE_VOLUME_FULL_COPY:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id);break;default :_logger.error("unrecognized block volume operation type");}} catch (Exception e) {_logger.error("Failed to record block volume operation {}, err: {}",opType.toString(),e);}}  }
class C{  @Override public int appEarlyNotResponding(String processName,int pid,String annotation) throws RemoteException {  Log.i(TAG,String.format("Early warning about application %s (pid %d) not responding: %s",processName,pid,annotation));  return 0;}  }
class C{  static <T>TreeMap<String,T> applyResultMapping(SortedMap<String,T> src,SortedMap<String,String> mapping){  if (src == null) {    return null;  }  final TreeMap<String,T> result=new TreeMap<String,T>();  for (  SortedMap.Entry<String,T> entry : src.entrySet()) {    final String newName=mapping.get(entry.getKey());    if (newName != null) {      result.put(newName,entry.getValue());    }  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.217 -0500",hash_original_method="DE6218951D49C9DECACECFC904F7F4CB",hash_generated_method="254D6A055CF39186CE308B0510685D6F") static boolean hasGatheredViolations(){  return gatheredViolations.get() != null;}  }
class C{  @Override public void close(){  panel.dispose();}  }
class C{  public void deleteAllCloudFilesBefore(long timestamp,String developerAccount,String developerPassword){  if (CloudPersona.getCurrentPersona().getToken() == null) {    return;  }  ConnectionRequest req=new ConnectionRequest();  req.setPost(false);  req.setFailSilently(true);  req.setUrl(SERVER_URL + "/purgeCloudFiles");  req.addArgument("d","" + timestamp);  req.addArgument("u",developerAccount);  req.addArgument("p",developerPassword);  NetworkManager.getInstance().addToQueue(req);}  }
class C{  @SuppressWarnings({"static-access"}) public static void disableSleepMode(Context mContext){  System.out.println("disable");  ((Activity)mContext).getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  KeyguardManager keyguardManager=(KeyguardManager)mContext.getSystemService(Activity.KEYGUARD_SERVICE);  lock=keyguardManager.newKeyguardLock(mContext.KEYGUARD_SERVICE);  lock.disableKeyguard();}  }
class C{  public void addPublicMethod(String className,String methodName){  publicMethods.add(new CallContext(ResourceList.getClassNameFromResourcePath(className),methodName));}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.fillPaint,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);}  }
class C{  private static boolean isNavigationKey(KeyEvent keyEvent){switch (keyEvent.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:case KeyEvent.KEYCODE_DPAD_RIGHT:case KeyEvent.KEYCODE_DPAD_UP:case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_MOVE_HOME:case KeyEvent.KEYCODE_MOVE_END:case KeyEvent.KEYCODE_TAB:case KeyEvent.KEYCODE_SPACE:case KeyEvent.KEYCODE_ENTER:    return true;}return false;}  }
class C{  private void validateDestinationStorage(StorageEntity storageEntity){  Assert.isTrue(StoragePlatformEntity.GLACIER.equals(storageEntity.getStoragePlatform().getName()),String.format("Storage platform for destination storage with name \"%s\" is not \"%s\".",storageEntity.getName(),StoragePlatformEntity.GLACIER));  storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storageEntity,true);}  }
class C{  public boolean isGrouped(){  return mDataSets.size() > 1 ? true : false;}  }
class C{  private static void sendCallback(PluginResult.Status status,String message){  final PluginResult result=new PluginResult(status,message);  result.setKeepCallback(true);  _callbackContext.sendPluginResult(result);}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  if (source == m_firstInput) {    m_firstInput=null;    m_firstInputConnectionType="";  } else   if (source == m_secondInput) {    m_secondInput=null;    m_secondInputConnectionType="";  }  if (m_firstInput != null && m_secondInput != null) {    if (m_firstInputConnectionType.length() > 0 || m_secondInputConnectionType.length() > 0) {      if (!m_firstInputConnectionType.equals("instance") && !m_secondInputConnectionType.equals("instance")) {        m_incomingBatchConnections=true;      } else {        m_incomingBatchConnections=false;      }    } else {      m_incomingBatchConnections=false;    }  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (!newRecord && is_ValueChanged("C_Tax_ID")) {    if (!getParent().isProcessed())     if (!updateOrderTax(true))     return false;  }  return updateHeaderTax();}  }
class C{  public void refreshTimestamp(){  date=new Date().getTime();}  }
class C{  public void record(long time){  buffer[position++]=time;  if (position >= buffer.length) {    position=0;  }}  }
class C{  public boolean isLocalInstallDone(){  return localInstallDone;}  }
class C{  public String formatSource(String input,Collection<Range<Integer>> characterRanges) throws FormatterException {  return JavaOutput.applyReplacements(input,getFormatReplacements(input,characterRanges));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static UPSCoord fromLatLon(Angle latitude,Angle longitude,Globe globe){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final UPSCoordConverter converter=new UPSCoordConverter(globe);  long err=converter.convertGeodeticToUPS(latitude.radians,longitude.radians);  if (err != UPSCoordConverter.UPS_NO_ERROR) {    String message=Logging.getMessage("Coord.UPSConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new UPSCoord(latitude,longitude,converter.getHemisphere(),converter.getEasting(),converter.getNorthing());}  }
