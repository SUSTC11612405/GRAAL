class C{  public int saturation(){  return (int)scalar.val[1];}  }
class C{  public void testOpsModeRequest(){  InstanceManager.setProgrammerManager(new DebugProgrammerManager());  Programmer p=InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(true,777);  Assert.assertTrue("got ops mode",p != null);  Assert.assertTrue("correct type",(p instanceof ProgDebugger));}  }
class C{  public XMLWriter(XMLReader xmlreader,Writer writer){  super(xmlreader);  init(writer);}  }
class C{  private boolean attributesMatch(List<UserMappingAttribute> attributes){  return !hasAttributes() || (attributes != null && containsAllAttributes(attributes,getAttributes()));}  }
class C{  private boolean ensureBleExists(){  if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {    Toast.makeText(this,R.string.no_ble,Toast.LENGTH_LONG).show();    return false;  }  return true;}  }
class C{  protected boolean allowAddingImports(){  if (isInJavadoc()) {    if (fProposal.getKind() == CompletionProposal.TYPE_REF && fInvocationContext.getCoreContext().isInJavadocText())     return false;    if (!isJavadocProcessingEnabled())     return false;  }  return true;}  }
class C{  public String nextKeyString(){  return new String(nextKey());}  }
class C{  public VcfHeader addLine(String line){  if (isMetaLine(line)) {    return addMetaInformationLine(line);  } else   if (line.startsWith("#")) {    return addColumnHeaderLine(line);  } else {    throw new VcfFormatException("Not a header line: " + line);  }}  }
class C{  public void testCreate(){  System.out.println("create");  String scenario="";  WebResource mockWebResource=createMock(WebResource.class);  ScenarioLoaderFactoryImpl instance=new ScenarioLoaderFactoryImpl();  ScenarioLoader scenarioLoader=instance.create(mockWebResource,scenario);  assertTrue(scenarioLoader instanceof ScenarioLoaderImpl);}  }
class C{  public boolean isUnset(){  return this == ZERO_PIXEL || (pref == null && min == null && max == null && gapPush == false);}  }
class C{  public LensMagnificationGraphMousePlugin(int modifiers,float floor,float ceiling,float delta){  super(modifiers);  this.floor=floor;  this.ceiling=ceiling;  this.delta=delta;}  }
class C{  public boolean saveChanges(){  Set<Map.Entry<Integer,Object[]>> entries=changedRows.entrySet();  for (Iterator<Map.Entry<Integer,Object[]>> iter=entries.iterator(); iter.hasNext(); ) {    Map.Entry<Integer,Object[]> entry=iter.next();    try {      table.updateRecord(entry.getKey(),entry.getValue());      iter.remove();    } catch (    DBFException e) {      System.out.println(e.getMessage());    }  }  if (!changedRows.isEmpty()) {    return false;  }  unhideColumns();  return true;}  }
class C{  protected void generateOre(float tries,int padding,WorldGenerator oreGen,int minY,int maxY){  tries=tries >= 1.0F ? tries : (this.rand.nextFloat() <= tries ? 1 : 0);  for (int i=0; i < tries; i++) {    int xx=this.x + this.offsetXZ(padding);    int yy=minY + this.rand.nextInt(maxY - minY);    int zz=this.z + this.offsetXZ(padding);    oreGen.generate(this.world,this.rand,new BlockPos(xx,yy,zz));  }}  }
class C{  public void write(byte[] out,long sleepTime){  ConnectedThread r;synchronized (this) {    if (mState != STATE_CONNECTED)     return;    r=mConnectedThread;  }  r.write(out,sleepTime);}  }
class C{  protected void appendFieldsIn(Class<?> clazz){  if (clazz.isArray()) {    this.reflectionAppendArray(this.getObject());    return;  }  Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (int i=0; i < fields.length; i++) {    Field field=fields[i];    String fieldName=field.getName();    if (this.accept(field)) {      try {        Object fieldValue=this.getValue(field);        this.append(fieldName,fieldValue);      } catch (      IllegalAccessException ex) {        throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());      }    }  }}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public boolean exportMusicTrack(MusicTrack musicTrack,Uri uri,String path){  if (musicTrack == null)   return false;  String srcFile=musicTrack.getSourceFile();  if (srcFile == null)   return false;  String fileTmp=getTempPath() + "/tmp.mp3";  if (!SuperUserTools.fileCopy(srcFile,fileTmp))   return false;  if (musicTrack.isEncoded()) {    String fileTmpCrypt=getTempPath() + "/crypt.mp3";    if (trackEncrypt(musicTrack,fileTmp,fileTmpCrypt)) {      FileTools.fileDelete(fileTmp);      fileTmp=fileTmpCrypt;    } else {      Logger.getInstance().logWarning("ExportMusicTrack","Encrypting failed! Continue with decrypted file.");    }  }  String dest;  Uri copyUri=null;  if (uri.toString().startsWith("file://")) {    dest=uri.buildUpon().appendPath(path).build().getPath();    String parentDirectory=new File(dest).getParent();    FileTools.directoryCreate(parentDirectory);  } else {    dest=getTempPath() + "/final.mp3";    DocumentFile document=DocumentFile.fromTreeUri(mContext,uri);    String[] directories=path.split("\\/");    for (int i=0; i < directories.length - 1; i++) {      String directoryName=directories[i];      boolean found=false;      for (      DocumentFile subDocument : document.listFiles()) {        if (subDocument.isDirectory() && subDocument.getName().equals(directoryName)) {          document=subDocument;          found=true;          break;        }      }      if (!found) {        document=document.createDirectory(directoryName);      }    }    String filename=directories[directories.length - 1];    for (    DocumentFile subDocument : document.listFiles()) {      if (subDocument.isFile() && subDocument.getName().equals(filename)) {        subDocument.delete();        break;      }    }    document=document.createFile("music/mp3",filename);    copyUri=document.getUri();  }  if (mID3Enable) {    if (!trackWriteID3(musicTrack,fileTmp,dest)) {      Logger.getInstance().logWarning("ExportMusicTrack","ID3 writer failed! Continue without ID3 tags.");      if (!FileTools.fileMove(fileTmp,dest)) {        Logger.getInstance().logError("ExportMusicTrack","Moving the raw file failed!");        return false;      }    }  } else {    if (!FileTools.fileMove(fileTmp,dest)) {      Logger.getInstance().logError("ExportMusicTrack","Moving the raw file failed!");      return false;    }  }  if (copyUri != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      try {        ParcelFileDescriptor parcelFileDescriptor=mContext.getContentResolver().openFileDescriptor(copyUri,"w");        FileOutputStream fileOutputStream=new FileOutputStream(parcelFileDescriptor.getFileDescriptor());        FileInputStream fileInputStream=new FileInputStream(dest);        FileTools.fileCopy(fileInputStream,fileOutputStream);        fileOutputStream.close();        fileInputStream.close();        parcelFileDescriptor.close();      } catch (      FileNotFoundException e) {        Logger.getInstance().logError("ExportMusicTrack","File not found!");        return false;      }catch (      IOException e) {        Logger.getInstance().logError("ExportMusicTrack","Failed to write the document: " + e.toString());        return false;      }    }  }  cleanUp();  return true;}  }
class C{  @Override public boolean performOperation(int generation){  return ((generation % plotGenerations) == 0);}  }
class C{  public final MutableDouble3D resize(double val){  if (val < 0)   throw new IllegalArgumentException("The argument to MutableDouble3D.setLength(...) must be zero or positive");  final double len=Math.sqrt(x * x + y * y + z * z);  if (val == 0)   x=y=z=0; else {    if (len != len || len == infinity || len == -infinity || len == 0)     throw new ArithmeticException("" + this + " length is "+ len+ " cannot change its length");    final double invertedlen=val / len;    x=x * invertedlen;    y=y * invertedlen;    z=z * invertedlen;  }  return this;}  }
class C{  public Executor withCheckpointFile(File checkpointFile){  this.checkpointFile=checkpointFile;  return this;}  }
class C{  UnknownDynamicVariableException(String i18n,Object... arguments){  super(i18n,arguments);}  }
class C{  private void reset(){  setAdempiereHome(null);  setIsTextMode(s_defaultGuiIsText);  setIsSilentMode(s_defaultGuiIsSilent);  setIsUpgrade(s_defaultMigrationIsUpgrade);  setLogLevel(null);  setAttemptTranslation(s_defaultAttemptTranslation);  setPreserveTableID(s_defaultPreserveTableID);  setDropSource(s_defaultDropSource);  setOptimizeDatabase(s_defaultOptimizeDatabase);  setTargetVendor(null);  setTargetHost(null);  setTargetPort(null);  setTargetName(null);  setTargetCatalog(null);  setTargetSchema(null);  setTargetUser(null);  setTargetPasswd(null);  setTargetSystemUser(null);  setTargetSystemPasswd(null);  setSourceVendor(null);  setSourceHost(null);  setSourcePort(null);  setSourceName(null);  setSourceCatalog(null);  setSourceSchema(null);  setSourceUser(null);  setSourcePasswd(null);  setSourceSystemUser(null);  setSourceSystemPasswd(null);}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String canonicalSubscriptionName,final boolean returnImmediately,final int maxMessages){  final String path=canonicalSubscriptionName + ":pull";  final PullRequest req=PullRequest.builder().returnImmediately(returnImmediately).maxMessages(maxMessages).build();  return pull(path,req);}  }
class C{  private static FPSet loadImplementation(final String clazz,final FPSetConfiguration fpSetConfig){  Exception exp=null;  try {    final ClassLoader classLoader=FPSet.class.getClassLoader();    final Class<?> factoryClass=classLoader.loadClass(clazz);    final Constructor<?> constructor=factoryClass.getDeclaredConstructor(new Class[]{FPSetConfiguration.class});    final Object instance=constructor.newInstance(fpSetConfig);    if (instance instanceof FPSet) {      return (FPSet)instance;    }  } catch (  ClassNotFoundException e) {    exp=e;  }catch (  InstantiationException e) {    exp=e;  }catch (  IllegalAccessException e) {    exp=e;  }catch (  SecurityException e) {    exp=e;  }catch (  NoSuchMethodException e) {    exp=e;  }catch (  IllegalArgumentException e) {    exp=e;  }catch (  InvocationTargetException e) {    exp=e;  }  MP.printWarning(EC.GENERAL,"unsuccessfully trying to load custom FPSet class: " + clazz,exp);  return null;}  }
class C{  public WFG3(int k,int l,int M){  super(k,l,M);}  }
class C{  public boolean compare(String text){  return errors != null && errors.size() == 1 && errors.get(0).equals(text);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("EventDef event[");  buffer.append(event);  buffer.append("] actionType [");  buffer.append(actionType);  buffer.append("] macroId [");  buffer.append(macroId);  buffer.append("]");  return buffer.toString();}  }
class C{  public final void testRemoveHelperTextColorIdsFromArray(){  int[] helperTextColors=new int[2];  helperTextColors[0]=android.R.color.black;  helperTextColors[1]=android.R.color.darker_gray;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColorIds(helperTextColors);  passwordEditText.addHelperTextColorId(android.R.color.white);  passwordEditText.removeAllHelperTextColorIds(helperTextColors);  passwordEditText.removeAllHelperTextColorIds(helperTextColors);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(getContext().getResources().getColor(android.R.color.white),(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  ITypeBinding resolveType(AnnotationTypeDeclaration type){  return null;}  }
class C{  protected void otherConfigurations(HttpSecurity http) throws Exception {}  }
class C{  @Override public Pair<RoutingContext,ServerMessage> redistribute(final ServerMessage message,final Queue originatingQueue,final Transaction tx) throws Exception {  ServerMessage copyRedistribute=message.copy(storageManager.generateID());  Bindings bindings=addressManager.getBindingsForRoutingAddress(message.getAddress());  if (bindings != null) {    RoutingContext context=new RoutingContextImpl(tx);    boolean routed=bindings.redistribute(copyRedistribute,originatingQueue,context);    if (routed) {      return new Pair<>(context,copyRedistribute);    }  }  return null;}  }
class C{  void paintSkinRaw(Graphics g,int dx,int dy,int dw,int dh,State state){  if (XPStyle.getXP() == null) {    return;  }  skinPainter.paint(null,g,dx,dy,dw,dh,this,state);}  }
class C{  public boolean voteForPhoto(final long photoId,final int vote,final String userId) throws DatastoreException {  Query.Builder query=Query.newBuilder();  Filter userIdFilter=makeFilter("userId",PropertyFilter.Operator.EQUAL,makeValue(userId)).build();  Filter photoIdFilter=makeFilter("photoId",PropertyFilter.Operator.EQUAL,makeValue(photoId)).build();  query.setFilter(makeFilter(photoIdFilter,userIdFilter));  query.addKindBuilder().setName(VOTE_ENTITY);  RunQueryRequest request=RunQueryRequest.newBuilder().setQuery(query).build();  RunQueryResponse response=datastore.runQuery(request);  if (response.getBatch().getEntityResultCount() == 1) {    Entity voteEntity=response.getBatch().getEntityResultList().get(0).getEntity();    Key voteKey=voteEntity.getKey();    if (vote == 0) {      if (!DbUtils.deleteEntity(datastore,voteKey)) {        return false;      }    } else {      List<Property> properties=ImmutableList.of(makeProperty("vote",makeValue(vote)).build(),makeProperty("date",makeValue(new Date())).build());      if (!DbUtils.updateEntity(datastore,voteKey,properties)) {        return false;      }    }    Map<String,Value> propsVote=getPropertyMap(voteEntity);    return updateVotesAndBounds(makeKey(PHOTO_ENTITY,photoId).build(),propsVote.get("vote").getIntegerValue(),vote);  } else   if (vote != 0) {    List<Property> properties=ImmutableList.of(makeProperty("vote",makeValue(vote)).build(),makeProperty("userId",makeValue(userId)).build(),makeProperty("photoId",makeValue(photoId)).build(),makeProperty("date",makeValue(new Date())).build());    Entity voteEntity=DbUtils.insertEntity(datastore,VOTE_ENTITY,null,properties);    if (!voteEntity.hasKey()) {      return false;    }    return updateVotesAndBounds(makeKey(PHOTO_ENTITY,photoId).build(),0,vote);  } else {    return true;  }}  }
class C{  public void saveNbt(CompoundTag tag){  if (saveId != null) {    tag.putString("id",saveId);  }  tag.putInt("x",block.getX());  tag.putInt("y",block.getY());  tag.putInt("z",block.getZ());}  }
class C{  public void displayAt(float centerX,float centerY){  mCenter.x=centerX;  mCenter.y=centerY;  mDisplayWedges=true;  mSubMenu=null;  mFocusedItem=null;  invalidate();}  }
class C{  public int LoadPlugIn(final String dir){  PlugInDirectory=new String(dir);  return LoadPlugIn();}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  MJournal[] journals=getJournals(true);  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive() && !journal.isProcessed()) {      journal.setProcessed(true);      journal.setDocStatus(DOCSTATUS_Voided);      journal.setDocAction(DOCACTION_None);      journal.saveEx();      continue;    }    if (DOCSTATUS_Drafted.equals(journal.getDocStatus()) || DOCSTATUS_InProgress.equals(journal.getDocStatus()) || DOCSTATUS_Invalid.equals(journal.getDocStatus())) {      m_processMsg="Journal not Completed: " + journal.getSummary();      return false;    }    if (DOCSTATUS_Closed.equals(journal.getDocStatus()) || DOCSTATUS_Voided.equals(journal.getDocStatus()) || DOCSTATUS_Reversed.equals(journal.getDocStatus()))     ; else {      if (!journal.closeIt()) {        m_processMsg="Cannot close: " + journal.getSummary();        return false;      }      journal.saveEx();    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  private static void addInitiator(Map<String,Initiator> initiatorMap,Map<String,Set<String>> directorToInitiators,Map<String,URI> initiatorIdToNetwork,String director,String wwn,String net){  Initiator initiator=new Initiator();  initiator.setId(URI.create(director + "-" + wwn));  initiator.setLabel(director + "-" + wwn);  initiator.setInitiatorPort(wwn);  initiatorMap.put(initiator.getId().toString(),initiator);  if (directorToInitiators.get(director) == null) {    directorToInitiators.put(director,new HashSet<String>());  }  URI netURI=URI.create(net);  directorToInitiators.get(director).add(initiator.getId().toString());  initiatorIdToNetwork.put(initiator.getId().toString(),netURI);}  }
class C{  public String prompt(String message){  if (userAgent != null) {    return userAgent.showPrompt(message);  }  return null;}  }
class C{  protected CCAnimation(String name,ArrayList<CCSpriteFrame> frames){  this(name,0,frames);}  }
class C{  public void testReserveJoin() throws Throwable {  testServerJoin(Member.Type.RESERVE);}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),handler);}  }
class C{  private void deleteOperator(){  outputOperator.teardown();}  }
class C{  public boolean isRemoteVerificationEnabled(){  return __remoteVerificationEnabled;}  }
class C{  public String useLeastValuesTipText(){  return "Retains values with least instance instead of most.";}  }
class C{  public void onGoToSleepFinished(){  if (DEBUG) {    Slog.d(TAG,"onGoToSleepFinished");  }synchronized (mLock) {    if (mActualPowerState != POWER_STATE_ASLEEP) {      mActualPowerState=POWER_STATE_ASLEEP;      mPendingGoToSleepBroadcast=true;      if (mUserActivityPending) {        mUserActivityPending=false;        mHandler.removeMessages(MSG_USER_ACTIVITY);      }      updatePendingBroadcastLocked();    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public CharSet(int lo,int hi){  chars=new int[2];  if (lo <= hi) {    chars[0]=lo;    chars[1]=hi;  } else {    chars[0]=hi;    chars[1]=lo;  }}  }
class C{  @Override public SelectResults filterEvaluate(ExecutionContext context,SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  RuntimeIterator indpndntItr=null;  List currentScopeIndpndntItrs=context.getAllIndependentIteratorsOfCurrentScope();  Set rntmItrs=QueryUtils.getCurrentScopeUltimateRuntimeIteratorsIfAny(this,context);  if (rntmItrs.size() == 1 && currentScopeIndpndntItrs.size() == 1) {    indpndntItr=(RuntimeIterator)rntmItrs.iterator().next();  }  return filterEvaluate(context,intermediateResults,true,null,indpndntItr != null ? new RuntimeIterator[]{indpndntItr} : null,true,this.isConditioningNeededForIndex(indpndntItr,context,true),true);}  }
class C{  @Override public void channelIdle(ChannelHandlerContext ctx,IdleStateEvent e){  logger.debug("In IDLE event handler for UDP..timeout.");  if (e.getState() == IdleState.ALL_IDLE) {    int statusCodeInt=1;    String statusCode=statusCodeInt + " FAILURE";    String errMsg="UDP idle (read) timeout";    udpWorker.onComplete(udpWorker.responseSb.toString(),true,errMsg,errMsg,statusCode,statusCodeInt);  }}  }
class C{  public FBObject(Hashtable props){  init(props);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  public DragDividerDecoration(Context context,@IdRes int... excludedLayoutIDs){  super(context,excludedLayoutIDs);}  }
class C{  @Override public Point2D.Double constrainPoint(Point2D.Double p){  p.x=Math.round(p.x / width) * width;  p.y=Math.round(p.y / height) * height;  return p;}  }
class C{  MonitorNotification(String type,Object source,long sequenceNumber,long timeStamp,String msg,ObjectName obsObj,String obsAtt,Object derGauge,Object trigger){  super(type,source,sequenceNumber,timeStamp,msg);  this.observedObject=obsObj;  this.observedAttribute=obsAtt;  this.derivedGauge=derGauge;  this.trigger=trigger;}  }
class C{  private void previous(){  try (RandomAccessFile inout=new RandomAccessFile("AddressBook.dat","rw")){    if (count > 1)     count--; else     count=1;    inout.seek((count * 91) - 91);    read(inout);    System.out.println("Reading address #" + count);  } catch (  IOException ex) {  }}  }
class C{  public void shutDown(){  stunStack=null;  requestSender=null;}  }
class C{  public FastMap(FastmapDistanceMatrix matrixFastmap,int dimensions){  this.matrixFastmap=matrixFastmap;  this.dimensions=dimensions;  init();}  }
class C{  public T caseRealLiteral(RealLiteral object){  return null;}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  return new Boolean(evaluate(context));}  }
class C{  private static Segment removeEndingWhitespace(Segment segment){  int toTrim=0;  char currentChar=segment.setIndex(segment.getEndIndex() - 1);  while ((currentChar == ' ' || currentChar == '\t') && currentChar != Segment.DONE) {    toTrim++;    currentChar=segment.previous();  }  String stringVal=segment.toString();  String newStringVal=stringVal.substring(0,stringVal.length() - toTrim);  return new Segment(newStringVal.toCharArray(),0,newStringVal.length());}  }
class C{  public static String reflectionToString(Object object){  return ReflectionToStringBuilder.toString(object);}  }
class C{  public static synchronized void addObservedEvent(Class<? extends MvcEvent> eventType){  if (observedEvents == null) {    observedEvents=new HashSet<>();  }  observedEvents.add(eventType);}  }
class C{  protected void closeCDATA() throws org.xml.sax.SAXException {  try {    m_writer.write(CDATA_DELIMITER_CLOSE);    m_cdataTagOpen=false;  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public static XtremIOConsistencyGroup isCGAvailableInArray(XtremIOClient client,String label,String clusterName){  XtremIOConsistencyGroup cg=null;  try {    cg=client.getConsistencyGroupDetails(label,clusterName);  } catch (  Exception e) {    _log.info("Consistency group {} not available in Array.",label);  }  return cg;}  }
class C{  public static final String removeQueryString(final String path){  return path.replaceFirst("\\?.*",StringUtils.EMPTY);}  }
class C{  public static JobStatus status(HadoopJobStatus status,Configuration conf){  JobID jobId=new JobID(status.jobId().globalId().toString(),status.jobId().localId());  float setupProgress=0;  float mapProgress=0;  float reduceProgress=0;  float cleanupProgress=0;  JobStatus.State state=JobStatus.State.RUNNING;switch (status.jobPhase()) {case PHASE_SETUP:    setupProgress=0.42f;  break;case PHASE_MAP:setupProgress=1;mapProgress=1f - status.pendingMapperCnt() / (float)status.totalMapperCnt();break;case PHASE_REDUCE:setupProgress=1;mapProgress=1;if (status.totalReducerCnt() > 0) reduceProgress=1f - status.pendingReducerCnt() / (float)status.totalReducerCnt(); else reduceProgress=1f;break;case PHASE_CANCELLING:case PHASE_COMPLETE:if (!status.isFailed()) {setupProgress=1;mapProgress=1;reduceProgress=1;cleanupProgress=1;state=JobStatus.State.SUCCEEDED;} else state=JobStatus.State.FAILED;break;default :assert false;}return new JobStatus(jobId,setupProgress,mapProgress,reduceProgress,cleanupProgress,state,JobPriority.NORMAL,status.user(),status.jobName(),jobFile(conf,status.user(),jobId).toString(),"N/A");}  }
class C{  public static String supportsMime(String mimeType){  if (mimeType == null)   return null;  mimeType=normalizeMimeType(mimeType);  if (denyMime.containsKey(mimeType))   return "mime type '" + mimeType + "' is denied (2)";  if (mime2parser.get(mimeType) == null)   return "no parser for mime '" + mimeType + "' available";  return null;}  }
class C{  public static void writeBoxplot(TDoubleObjectHashMap<double[]> table,String file) throws IOException {  int maxSize=0;  TDoubleObjectIterator<double[]> it=table.iterator();  for (int i=0; i < table.size(); i++) {    it.advance();    maxSize=Math.max(maxSize,it.value().length);  }  double keys[]=table.keys();  Arrays.sort(keys);  BufferedWriter writer=new BufferedWriter(new FileWriter(file));  for (int k=0; k < keys.length; k++) {    writer.write(String.valueOf(keys[k]));    if (k + 1 < keys.length)     writer.write(TAB);  }  writer.newLine();  for (int i=0; i < maxSize; i++) {    for (int k=0; k < keys.length; k++) {      double[] list=table.get(keys[k]);      if (i < list.length) {        writer.write(String.valueOf(list[i]));      } else {        writer.write(NA);      }      if (k + 1 < keys.length)       writer.write(TAB);    }    writer.newLine();  }  writer.close();}  }
class C{  public RangeQueryBuilder includeUpper(boolean includeUpper){  this.includeUpper=includeUpper;  return this;}  }
class C{  private LoggingEvent buildEvent(ParsingContext ctx){  HashMap<String,Object> logEventParsingProperitesMap=(HashMap<String,Object>)ctx.getCustomConextProperties().get(PROPERTY_LOG_EVENT_PROPERTIES);  if (logEventParsingProperitesMap.size() == 0) {    String[] additionalLines=ctx.getUnmatchedLog().toString().split("\n");    for (    String line : additionalLines) {      LOG.finest(String.format("found non-matching (file %s) line: \"%s\"",ctx.getLogSource(),line));    }    ctx.getUnmatchedLog().setLength(0);    return null;  }  int exceptionLine=getExceptionLine(ctx);  String[] exception=buildException(exceptionLine,ctx);  String[] additionalLines=ctx.getUnmatchedLog().toString().split("\n");  if (additionalLines.length > 0 && exception.length > 0) {    logEventParsingProperitesMap.put(MESSAGE,buildMessage((String)logEventParsingProperitesMap.get(MESSAGE),exceptionLine,ctx));  }  DateFormat dateFormat=ctx.getDateFormat();  LoggingEvent event=convertToEvent(logEventParsingProperitesMap,exception,dateFormat);  logEventParsingProperitesMap.clear();  ctx.getUnmatchedLog().setLength(0);  return event;}  }
class C{  protected void removeContextFromChild(BridgeContext ctx,Element e){  if (SVG_NAMESPACE_URI.equals(e.getNamespaceURI())) {    if (e.getLocalName().equals(SVG_TSPAN_TAG)) {      ((AbstractTextChildBridgeUpdateHandler)((SVGOMElement)e).getSVGContext()).dispose();    } else     if (e.getLocalName().equals(SVG_TEXT_PATH_TAG)) {      ((AbstractTextChildBridgeUpdateHandler)((SVGOMElement)e).getSVGContext()).dispose();    } else     if (e.getLocalName().equals(SVG_TREF_TAG)) {      ((AbstractTextChildBridgeUpdateHandler)((SVGOMElement)e).getSVGContext()).dispose();    }  }  Node child=getFirstChild(e);  while (child != null) {    if (child.getNodeType() == Node.ELEMENT_NODE) {      removeContextFromChild(ctx,(Element)child);    }    child=getNextSibling(child);  }}  }
class C{  @Override public void contextualize(Context context) throws ContextException {  container=(PlexusContainer)context.get(PlexusConstants.PLEXUS_KEY);}  }
class C{  @Deprecated public static JSONObject parseJson(String response) throws JSONException, FacebookError {  if (response.equals("false")) {    throw new FacebookError("request failed");  }  if (response.equals("true")) {    response="{value : true}";  }  JSONObject json=new JSONObject(response);  if (json.has("error")) {    JSONObject error=json.getJSONObject("error");    throw new FacebookError(error.getString("message"),error.getString("type"),0);  }  if (json.has("error_code") && json.has("error_msg")) {    throw new FacebookError(json.getString("error_msg"),"",Integer.parseInt(json.getString("error_code")));  }  if (json.has("error_code")) {    throw new FacebookError("request failed","",Integer.parseInt(json.getString("error_code")));  }  if (json.has("error_msg")) {    throw new FacebookError(json.getString("error_msg"));  }  if (json.has("error_reason")) {    throw new FacebookError(json.getString("error_reason"));  }  return json;}  }
class C{  public boolean isIgnoreFocusComponentWhenUnfocused(){  return ignoreFocusComponentWhenUnfocused;}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField pfields=in.readFields();  primitiveI=pfields.get("primitiveI",99);  System.out.println("The primitiveI : " + primitiveI);  objectI=(Integer)pfields.get("objectI",DEFAULT_OBJECT_I);  System.out.println("The ObjectI : " + objectI);  foo=(Foo)pfields.get("foo",DEFAULT_OBJECT_F);  System.out.println("The foo : " + foo);  try {    boolean b=pfields.defaulted("primitiveI");    System.out.println("Defaulted prim : " + b);    if (b == false) {      throw new Error("Bad return value for defaulted() with " + "primitive type fields");    }    b=pfields.defaulted("objectI");    System.out.println("Defaulted ObjectI : " + b);    if (b == true) {      throw new Error("Bad return value for defaulted() with " + "object type fields");    }    b=pfields.defaulted("foo");    System.out.println("Defaulted Foo : " + b);    if (b == false) {      throw new Error("Bad return value for defaulted() with " + "object type fields");    }  } catch (  IllegalArgumentException e) {    System.out.println("Exception " + e.getMessage() + ": handled calling "+ "GetField.defaulted(\"fieldName referring to an object\")");    throw e;  }}  }
class C{  static <K,V>RegularImmutableMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){  checkPositionIndex(n,entryArray.length);  Entry<K,V>[] entries;  if (n == entryArray.length) {    entries=entryArray;  } else {    entries=createEntryArray(n);  }  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);  ImmutableMapEntry<K,V>[] table=createEntryArray(tableSize);  int mask=tableSize - 1;  for (int entryIndex=0; entryIndex < n; entryIndex++) {    Entry<K,V> entry=entryArray[entryIndex];    K key=entry.getKey();    V value=entry.getValue();    checkEntryNotNull(key,value);    int tableIndex=Hashing.smear(key.hashCode()) & mask;    @Nullable ImmutableMapEntry<K,V> existing=table[tableIndex];    ImmutableMapEntry<K,V> newEntry;    if (existing == null) {      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);    } else {      newEntry=new NonTerminalImmutableMapEntry<K,V>(key,value,existing);    }    table[tableIndex]=newEntry;    entries[entryIndex]=newEntry;    checkNoConflictInKeyBucket(key,newEntry,existing);  }  return new RegularImmutableMap<K,V>(entries,table,mask);}  }
class C{  public synchronized void removeSession(Session session){  if (session != null) {    userSessions.remove(session);  }}  }
class C{  public void process(Exchange exchange) throws Exception {  Mail mail=exchange.getIn().getBody(Mail.class);  long start=System.currentTimeMillis();  MessagingException ex=null;  try {    MailetPipelineLogging.logBeginOfMailetProcess(mailet,mail);    mailet.service(mail);  } catch (  MessagingException me) {    ex=me;    String onMailetException=null;    MailetConfig mailetConfig=mailet.getMailetConfig();    if (mailetConfig instanceof MailetConfigImpl) {      onMailetException=((MailetConfigImpl)mailetConfig).getInitAttribute("onMailetException");    }    if (onMailetException == null) {      onMailetException=Mail.ERROR;    } else {      onMailetException=onMailetException.trim().toLowerCase(Locale.US);    }    if (onMailetException.compareTo("ignore") == 0) {      ProcessorUtil.verifyMailAddresses(mail.getRecipients());    } else {      ProcessorUtil.handleException(me,mail,mailet.getMailetConfig().getMailetName(),onMailetException,logger);    }  } finally {    MailetPipelineLogging.logEndOfMailetProcess(mailet,mail);    List<MailetProcessorListener> listeners=processor.getListeners();    long complete=System.currentTimeMillis() - start;    for (    MailetProcessorListener listener : listeners) {      listener.afterMailet(mailet,mail.getName(),mail.getState(),complete,ex);    }  }}  }
class C{  protected void requestStreamInfo(String stream){  String url="https://api.twitch.tv/kraken/streams/" + stream;  if (attemptRequest(url,stream)) {    TwitchApiRequest request=new TwitchApiRequest(this,RequestType.STREAM,url);    executor.execute(request);  }}  }
class C{  public boolean finalizeEdit(){  if (this.nodeEditors.isEmpty()) {    return false;  }  Map<Node,DiscretizationSpec> map=new HashMap<>();  for (  Node node : this.nodeEditors.keySet()) {    DiscretizationEditor editor=this.nodeEditors.get(node);    map.put(node,editor.getDiscretizationSpec());  }  this.parameters.set("discretizationSpecs",map);  return true;}  }
class C{  public static DoubleMatrix1D mult(DoubleMatrix1D A,double s){  return A.assign(F.mult(s));}  }
class C{  public DistributedLogClientBuilder requestTimeoutMs(int timeoutMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setRequestTimeoutMs(timeoutMs);  return newBuilder;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.385 -0500",hash_original_method="6321C559FCE18D31DAAE4496BAD49A23",hash_generated_method="26025A6DDCA536D8F17C08E177E19F12") public ParcelFileDescriptor simpleQueryForBlobFileDescriptor(){  if (mState == 0)   throw new SQLiteDoneException("expected 1 row from this query but query returned no data. check the query: " + mSql);  mDatabase.addTaint(this.getTaint());  ParcelFileDescriptor ret=new ParcelFileDescriptor();  ret.addTaint(this.getTaint());  ret.addTaint(mDatabase.getTaint());  return ret;}  }
class C{  public static String replaceRegex(String original,String regex,String replace,boolean CASE_INSENSITIVE){  return replaceRegex(new StringBuffer(original),regex,replace,CASE_INSENSITIVE).toString();}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,boolean b){  return buf.append(b ? "true" : "false");}  }
class C{  @RequestMapping(value="/users/{login}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){  log.debug("REST request to delete User: {}",login);  userService.deleteUserInformation(login);  return ResponseEntity.ok().headers(HeaderUtil.createAlert("user-management.deleted",login)).build();}  }
class C{  private Path convert(IgfsPath path){  return new Path(IGFS_SCHEME,uriAuthority,path.toString());}  }
class C{  private void stopPlaying(){  mVideoView.stopPlayback();  mHandlerForProgressBar.removeCallbacks(mRunnForProgressBar);  mPbForPlaying.setProgress(0);  mIsPlaying=VIDEO_IS_STOPPED;}  }
class C{  public void flushQuietly(){  try {    flush();  } catch (  IOException e) {    LOGGER.debug("Error while flushing");  }}  }
class C{  private boolean isInternalValid(){  return tempErrorText == null && isCharactersCountValid();}  }
class C{  public void removeValue(int index){  this.data.remove(index);}  }
class C{  public static boolean isShowTooltips(){  return showTooltips;}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public static UserAgent valueOf(int id){  OperatingSystem operatingSystem=OperatingSystem.valueOf((short)(id >> 16));  Browser browser=Browser.valueOf((short)(id & 0x0FFFF));  return new UserAgent(operatingSystem,browser);}  }
class C{  public boolean calculateInside(){  BlockPos insidePos=getPos().offset(getTileFacing());  for (  EnumFacing dr : EnumFacing.VALUES) {    for (int i=0; i < maxSize; i++) {      BlockPos offsetPos=insidePos.offset(dr,i);      if (!getWorld().isAirBlock(offsetPos)) {        length[dr.ordinal()]=i - 1;        break;      }    }  }  for (int i=0; i < 6; i+=2) {    if (length[i] + length[i + 1] > maxSize)     return false;  }  return length[0] != -1;}  }
class C{  public HitonVariant(IndependenceTest test,int depth){  if (test == null) {    throw new NullPointerException();  }  this.independenceTest=test;  this.variables=test.getVariables();  this.depth=depth;}  }
class C{  private void logReachingOfAnAchievement(Player player,Achievement achievement){  String identifier=achievement.getIdentifier();  String title=achievement.getTitle();  Category category=achievement.getCategory();  String playerName=player.getName();  DBCommandQueue.get().enqueue(new WriteReachedAchievementCommand(identifiersToIds.get(identifier),title,category,playerName));  player.addReachedAchievement(achievement.getIdentifier());  new GameEvent(playerName,"reach-achievement",category.toString(),title,identifier).raise();}  }
class C{  public void reset() throws IOException {synchronized (lock) {    ensureOpen();    pos=markedPos;  }}  }
class C{  private void initCoordinatorClient(Map<String,String> args) throws IOException {  String coordinatorArg=args.get(COORDINATORS);  if (coordinatorArg == null || coordinatorArg.trim().isEmpty()) {    throw new IllegalArgumentException(COORDINATORS);  }  String[] coordinators=coordinatorArg.split(",",-1);  List<URI> uri=new ArrayList<URI>(coordinators.length);  for (  String coord : coordinators) {    if (!coord.trim().isEmpty()) {      uri.add(URI.create(coord.trim()));    }  }  ZkConnection connection=new ZkConnection();  connection.setServer(uri);  String siteIdFile=args.get(Constants.SITE_ID_FILE);  connection.setSiteIdFile(siteIdFile);  connection.build();  CoordinatorClientImpl client=new CoordinatorClientImpl();  client.setZkConnection(connection);  ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("/nodeaddrmap-var.xml");  CoordinatorClientInetAddressMap inetAddressMap=(CoordinatorClientInetAddressMap)ctx.getBean("inetAddessLookupMap");  if (inetAddressMap == null) {    log.error("CoordinatorClientInetAddressMap is not initialized. Node address lookup will fail.");  }  client.setInetAddessLookupMap(inetAddressMap);  client.start();  coordinator=client;}  }
class C{  public void adds(int size,Register dst,Register src1,Register src2){  super.adds(size,dst,src1,src2,getNopExtendType(size),0);}  }
class C{  public SVGOMFEMergeNodeElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  protected void changeParentDocId(int parentDocId){  m_parentDocId=parentDocId;}  }
class C{  public int numInstances(){  return (m_End - m_Start + 1);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void initMediaDescription(MediaDescription mediaDescription,IceMediaStream iceMediaStream){  try {    mediaDescription.setAttribute(MID,iceMediaStream.getName());    Component firstComponent=null;    for (    Component component : iceMediaStream.getComponents()) {      if (firstComponent == null)       firstComponent=component;      Vector attributes=mediaDescription.getAttributes(true);      for (      Candidate<?> candidate : component.getLocalCandidates()) {        attributes.add(new CandidateAttribute(candidate));      }    }    TransportAddress defaultAddress=firstComponent.getDefaultCandidate().getTransportAddress();    mediaDescription.getMedia().setMediaPort(defaultAddress.getPort());    String addressFamily=defaultAddress.isIPv6() ? Connection.IP6 : Connection.IP4;    mediaDescription.setConnection(sdpFactory.createConnection("IN",defaultAddress.getHostAddress(),addressFamily));    Component rtcpComponent=iceMediaStream.getComponent(Component.RTCP);    if (rtcpComponent != null) {      TransportAddress defaultRtcpCandidate=rtcpComponent.getDefaultCandidate().getTransportAddress();      if (defaultRtcpCandidate.getPort() != defaultAddress.getPort() + 1) {        mediaDescription.setAttribute(RTCP,Integer.toString(defaultRtcpCandidate.getPort()));      }    }  } catch (  SdpException exc) {    throw new IllegalArgumentException("Something went wrong when setting default candidates",exc);  }}  }
class C{  protected void buildChooser(){  triangle=new ColorTriangle();  triangle.setName("GTKColorChooserPanel.triangle");  label=new OpaqueLabel();  label.setName("GTKColorChooserPanel.colorWell");  label.setOpaque(true);  label.setMinimumSize(new Dimension(67,32));  label.setPreferredSize(new Dimension(67,32));  label.setMaximumSize(new Dimension(67,32));  lastLabel=new OpaqueLabel();  lastLabel.setName("GTKColorChooserPanel.lastColorWell");  lastLabel.setOpaque(true);  lastLabel.setMinimumSize(new Dimension(67,32));  lastLabel.setPreferredSize(new Dimension(67,32));  lastLabel.setMaximumSize(new Dimension(67,32));  hueSpinner=new JSpinner(new SpinnerNumberModel(0,0,360,1));  configureSpinner(hueSpinner,"GTKColorChooserPanel.hueSpinner");  saturationSpinner=new JSpinner(new SpinnerNumberModel(0,0,255,1));  configureSpinner(saturationSpinner,"GTKColorChooserPanel.saturationSpinner");  valueSpinner=new JSpinner(new SpinnerNumberModel(0,0,255,1));  configureSpinner(valueSpinner,"GTKColorChooserPanel.valueSpinner");  redSpinner=new JSpinner(new SpinnerNumberModel(0,0,255,1));  configureSpinner(redSpinner,"GTKColorChooserPanel.redSpinner");  greenSpinner=new JSpinner(new SpinnerNumberModel(0,0,255,1));  configureSpinner(greenSpinner,"GTKColorChooserPanel.greenSpinner");  blueSpinner=new JSpinner(new SpinnerNumberModel(0,0,255,1));  configureSpinner(blueSpinner,"GTKColorChooserPanel.blueSpinner");  colorNameTF=new JTextField(8);  setLayout(new GridBagLayout());  add(this,"GTKColorChooserPanel.hue",hueSpinner,-1,-1);  add(this,"GTKColorChooserPanel.red",redSpinner,-1,-1);  add(this,"GTKColorChooserPanel.saturation",saturationSpinner,-1,-1);  add(this,"GTKColorChooserPanel.green",greenSpinner,-1,-1);  add(this,"GTKColorChooserPanel.value",valueSpinner,-1,-1);  add(this,"GTKColorChooserPanel.blue",blueSpinner,-1,-1);  add(new JSeparator(SwingConstants.HORIZONTAL),new GridBagConstraints(1,3,4,1,1,0,GridBagConstraints.LINE_START,GridBagConstraints.HORIZONTAL,new Insets(14,0,0,0),0,0));  add(this,"GTKColorChooserPanel.colorName",colorNameTF,0,4);  add(triangle,new GridBagConstraints(0,0,1,5,0,0,GridBagConstraints.LINE_START,GridBagConstraints.NONE,new Insets(14,20,2,9),0,0));  Box hBox=Box.createHorizontalBox();  hBox.add(lastLabel);  hBox.add(label);  add(hBox,new GridBagConstraints(0,5,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  add(new JSeparator(SwingConstants.HORIZONTAL),new GridBagConstraints(0,6,5,1,1,0,GridBagConstraints.LINE_START,GridBagConstraints.HORIZONTAL,new Insets(12,0,0,0),0,0));}  }
class C{  public CToggleButton(String text,Icon icon){  this(text,icon,false);}  }
class C{  public void test_ticket_bg1899_e() throws Exception {  new TestHelper("ticket_bg1899e","ticket_bg1899e.rq","ticket_bg1899e.nt","ticket_bg1899e.srx").runTest();}  }
class C{  public boolean distribute(){  if (m_lines.size() == 0)   return true;  ArrayList<FactLine> newLines=new ArrayList<FactLine>();  for (int i=0; i < m_lines.size(); i++) {    FactLine dLine=(FactLine)m_lines.get(i);    MDistribution[] distributions=MDistribution.get(dLine.getAccount(),m_postingType,m_doc.getC_DocType_ID());    if (distributions == null || distributions.length == 0) {      distributions=MDistribution.get(dLine.getCtx(),dLine.getC_AcctSchema_ID(),m_postingType,m_doc.getC_DocType_ID(),dLine.getAD_Org_ID(),dLine.getAccount_ID(),dLine.getM_Product_ID(),dLine.getC_BPartner_ID(),dLine.getC_Project_ID(),dLine.getC_Campaign_ID(),dLine.getC_Activity_ID(),dLine.getAD_OrgTrx_ID(),dLine.getC_SalesRegion_ID(),dLine.getC_LocTo_ID(),dLine.getC_LocFrom_ID(),dLine.getUser1_ID(),dLine.getUser2_ID());      if (distributions == null || distributions.length == 0)       continue;    }    if (distributions.length > 1)     log.warning("More then one Distributiion for " + dLine.getAccount());    MDistribution distribution=distributions[0];    if (distribution.isCreateReversal()) {      FactLine reversal=dLine.reverse(distribution.getName());      log.info("Reversal=" + reversal);      newLines.add(reversal);    } else {      m_lines.remove(i);      i--;    }    distribution.distribute(dLine.getAccount(),dLine.getSourceBalance(),dLine.getQty(),dLine.getC_Currency_ID());    MDistributionLine[] lines=distribution.getLines(false);    for (int j=0; j < lines.length; j++) {      MDistributionLine dl=lines[j];      if (!dl.isActive() || dl.getAmt().signum() == 0)       continue;      FactLine factLine=new FactLine(m_doc.getCtx(),m_doc.get_Table_ID(),m_doc.get_ID(),0,m_trxName);      factLine.setDocumentInfo(m_doc,dLine.getDocLine());      factLine.setAccount(m_acctSchema,dl.getAccount());      factLine.setPostingType(m_postingType);      if (dl.isOverwriteOrg())       factLine.setAD_Org_ID(dl.getOrg_ID());      if (dl.isOverwriteAcct())       factLine.setAccount_ID(dl.getAccount_ID());      if (dl.isOverwriteActivity())       factLine.setC_Activity_ID(dl.getC_Activity_ID());      if (dl.isOverwriteBPartner())       factLine.setC_BPartner_ID(dl.getC_BPartner_ID());      if (dl.isOverwriteCampaign())       factLine.setC_Campaign_ID(dl.getC_Campaign_ID());      if (dl.isOverwriteLocFrom())       factLine.setC_LocFrom_ID(dl.getC_LocFrom_ID());      if (dl.isOverwriteLocTo())       factLine.setC_LocTo_ID(dl.getC_LocTo_ID());      if (dl.isOverwriteOrgTrx())       factLine.setAD_OrgTrx_ID(dl.getAD_OrgTrx_ID());      if (dl.isOverwriteProduct())       factLine.setM_Product_ID(dl.getM_Product_ID());      if (dl.isOverwriteProject())       factLine.setC_Project_ID(dl.getC_Project_ID());      if (dl.isOverwriteSalesRegion())       factLine.setC_SalesRegion_ID(dl.getC_SalesRegion_ID());      if (dl.isOverwriteUser1())       factLine.setUser1_ID(dl.getUser1_ID());      if (dl.isOverwriteUser2())       factLine.setUser2_ID(dl.getUser2_ID());      if (dl.getAmt().signum() < 0)       factLine.setAmtSource(dLine.getC_Currency_ID(),null,dl.getAmt().abs()); else       factLine.setAmtSource(dLine.getC_Currency_ID(),dl.getAmt(),null);      factLine.setQty(dl.getQty());      factLine.convert();      String description=distribution.getName() + " #" + dl.getLine();      if (dl.getDescription() != null)       description+=" - " + dl.getDescription();      factLine.addDescription(description);      log.info(factLine.toString());      newLines.add(factLine);    }  }  for (int i=0; i < newLines.size(); i++)   m_lines.add(newLines.get(i));  return true;}  }
class C{  public void preloadIcon(ComponentName componentName,Bitmap icon,int dpi,String label,long userSerial,InvariantDeviceProfile idp){  try {    PackageManager packageManager=mContext.getPackageManager();    packageManager.getActivityIcon(componentName);    return;  } catch (  PackageManager.NameNotFoundException e) {  }  ContentValues values=newContentValues(Bitmap.createScaledBitmap(icon,idp.iconBitmapSize,idp.iconBitmapSize,true),label,Color.TRANSPARENT);  values.put(IconDB.COLUMN_COMPONENT,componentName.flattenToString());  values.put(IconDB.COLUMN_USER,userSerial);  mIconDb.insertOrReplace(values);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public final void printInfo(final String prefix){  System.out.println(prefix + "configuration of " + this.getClass().getName()+ ":");  System.out.println(prefix + "  options:");  System.out.println(prefix + "    removeUTurns:    " + removeUTurns);  System.out.println(prefix + "    expansionRadius: " + expansionRadius);  System.out.println(prefix + "    linkSeparation:  " + linkSeparation);  System.out.println(prefix + "  maneuver shape:");  System.out.println(prefix + "    mnShpFileName:   " + mnShpFileName);  System.out.println(prefix + "    MN_ID_NAME:      " + MN_ID_NAME);  System.out.println(prefix + "    MN_FEATTYP_NAME: " + MN_FEATTYP_NAME);  System.out.println(prefix + "    MN_JNCTID_NAME:  " + MN_JNCTID_NAME);  System.out.println(prefix + "  maneuver path dbf:");  System.out.println(prefix + "    mpDbfFileName:   " + mpDbfFileName);  System.out.println(prefix + "    MP_ID_NAME:      " + MP_ID_NAME);  System.out.println(prefix + "    MP_SEQNR_NAME:   " + MP_SEQNR_NAME);  System.out.println(prefix + "    MP_TRPELID_NAME: " + MP_TRPELID_NAME);  System.out.println(prefix + "done.");}  }
class C{  @NotNull private String formMergeMessage(@NotNull MergeResult mergeResult){  if (mergeResult.getMergeStatus().equals(ALREADY_UP_TO_DATE)) {    return mergeResult.getMergeStatus().getValue();  }  StringBuilder conflictMessage=new StringBuilder();  List<String> conflicts=mergeResult.getConflicts();  if (conflicts != null && conflicts.size() > 0) {    for (    String conflict : conflicts) {      conflictMessage.append("- ").append(conflict);    }  }  StringBuilder commitsMessage=new StringBuilder();  List<String> commits=mergeResult.getMergedCommits();  if (commits != null && commits.size() > 0) {    for (    String commit : commits) {      commitsMessage.append("- ").append(commit);    }  }  String message=mergeResult.getMergeStatus().getValue();  String conflictText=conflictMessage.toString();  message+=(!conflictText.isEmpty()) ? constant.mergedConflicts() : "";  String commitText=commitsMessage.toString();  message+=(!commitText.isEmpty()) ? " " + constant.mergedCommits(commitText) : "";  message+=(mergeResult.getNewHead() != null) ? " " + constant.mergedNewHead(mergeResult.getNewHead()) : "";  return message;}  }
class C{  @Override public Long hincrBy(final String key,final String field,final long value){  checkIsInMultiOrPipeline();  client.hincrBy(key,field,value);  return client.getIntegerReply();}  }
class C{  public void logInfo(String tag,String message){  log(LogEntryType.Info,tag,message);}  }
class C{  public void clear(){  modCount++;  HashEntry[] data=this.data;  for (int i=data.length - 1; i >= 0; i--) {    data[i]=null;  }  size=0;}  }
class C{  private void handleHtmlSearchAccounts(PageWrapper pageWrapper,RequestAndResponse requestAndResponse,String query,String paneId) throws IOException, ServletException {  pageWrapper.addPageIntroText(servletText.introTextSearchUsers(),null);  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    try {      final StringBuilder result=new StringBuilder();      final User user=dbLogic.getUserByUserName(query.toLowerCase());      if (user == null) {        result.append(servletText.sentenceThereWereNoMatches());      } else {        startItemList(result,paneId);        addUserHtml(user,result,1,paneId);        finishItemList(result);      }      dbLogic.commit();      requestAndResponse.print(result.toString());    } catch (    final PersistenceException e) {      requestAndResponse.print(servletText.errorInternalDatabase());    }  }}  }
class C{  public boolean isSourceModified(Resource resource){  return false;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public GifImageView(Context context,AttributeSet attrs,int defStyle,int defStyleRes){  super(context,attrs,defStyle,defStyleRes);  postInit(GifViewUtils.initImageView(this,attrs,defStyle,defStyleRes));}  }
class C{  private static String makeFieldValue(Object value){  if (value == null)   return "(null)";  Class<?> valueClass=value.getClass();  try {    valueClass.getConstructor(String.class);  } catch (  NoSuchMethodException e) {    final String msg="Class " + valueClass + " does not have a public "+ "constructor with a single string arg";    final RuntimeException iae=new IllegalArgumentException(msg);    throw new RuntimeOperationsException(iae,"Cannot make XML descriptor");  }catch (  SecurityException e) {  }  final String quotedValueString=quote(value.toString());  return "(" + valueClass.getName() + "/"+ quotedValueString+ ")";}  }
class C{  @BeforeMethod public void initTestClass(){  preparedStatementParameterHook=new PreparedStatementParameterHook(statementStorage);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.220 -0400",hash_original_method="8098E0901B1513A38FF0251B40A20DA9",hash_generated_method="24338BAE20FEB9E05BE3A946C2F5EAB7") public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  private Builder(org.apache.nutch.storage.Host other){  super(org.apache.nutch.storage.Host.SCHEMA$);  if (isValidValue(fields()[0],other.metadata)) {    this.metadata=(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)data().deepCopy(fields()[0].schema(),other.metadata);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.outlinks)) {    this.outlinks=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[1].schema(),other.outlinks);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.inlinks)) {    this.inlinks=(java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)data().deepCopy(fields()[2].schema(),other.inlinks);    fieldSetFlags()[2]=true;  }}  }
class C{  public Rail(){  super();}  }
class C{  public Mention(Entity annotation){  this(annotation,MentionType.ENTITY);}  }
class C{  public SamFilterParamsBuilder restriction(final SamRegionRestriction restriction){  mRestriction=restriction;  return this;}  }
class C{  public void paintTableBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void updateMnemonicProperties(){  int newMnemonic=model.getMnemonic();  if (mnemonic != newMnemonic) {    int oldValue=mnemonic;    mnemonic=newMnemonic;    firePropertyChange(MNEMONIC_CHANGED_PROPERTY,oldValue,mnemonic);    updateDisplayedMnemonicIndex(getText(),mnemonic);    revalidate();    repaint();  }}  }
class C{  public String toString(){  return String.format("(count=%d, prob=%f, score=%f | outOfClusterCount=%d, OutOfClusterProb=%f, " + "outOfContextScore=%f)",m_count,m_prob,m_score,m_outOfClusterCount,m_outOfClusterProb,m_outOfContextScore);}  }
class C{  public CEdgeDrawingSynchronizer(final ZyGraph graph){  m_graph=Preconditions.checkNotNull(graph,"IE00980: Graph argument can not be null");  m_areEdgesVisible=CEdgeDrawingFunctions.calcDrawSloppyEdges(m_graph);  m_graph.getSettings().getEdgeSettings().addListener(m_settingsListener);  m_graph.getSettings().getProximitySettings().addListener(m_proximityListener);}  }
class C{  public static void toWriter(Node node,Writer writer) throws TransformerException {  toWriter(node,writer,new HashMap<String,String>());}  }
class C{  public DOMUnsupportedException(Exception e,String msg){  this.ex=e;  this.msg=msg;}  }
class C{  private static double hotness(SSTableReader sstr){  return sstr.getReadMeter() == null ? 0.0 : sstr.getReadMeter().twoHourRate() / sstr.estimatedKeys();}  }
class C{  public ConditionalTransferEntropyCalculatorViaCondMutualInfo(ConditionalMutualInfoCalculatorMultiVariate condMiCalc) throws Exception {  if (condMiCalc == null) {    throw new Exception("Conditional MI calculator used to construct ConditionalTransferEntropyCalculatorViaCondMutualInfo " + " must have already been instantiated.");  }  construct(condMiCalc);}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public HttpRequest headers(Map<String,String> headersMap){  mHeadersMap=headersMap;  return this;}  }
class C{  public Builder removeX509Certificates(){  this.x509Certificates.clear();  return this;}  }
class C{  private SettingUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static Double createDouble(String str){  if (str == null) {    return null;  }  return Double.valueOf(str);}  }
class C{  private Set<Long> findIntersections(OSM osm){  Set<Long> intersectionNodes=new HashSet<>();  Map<Long,Integer> nodeToWay=new HashMap<>();  for (  Entry<Long,Way> wayEntry : osm.ways.entrySet()) {    Way way=wayEntry.getValue();    if (!StreetSegment.isTrafficEdge(way))     continue;    for (    Long node : way.nodes) {      Integer count=nodeToWay.get(node);      if (count == null) {        nodeToWay.put(node,1);      } else {        intersectionNodes.add(node);      }    }  }  return intersectionNodes;}  }
class C{  protected void drawValue(Canvas c,String value,float xPos,float yPos){  c.drawText(value,xPos,yPos,mValuePaint);}  }
class C{  private void runIntervalTagger(JCas jcas){  logger.log(Level.FINEST,"Running Interval Tagger...");  Integer beforeAnnotations=jcas.getAnnotationIndex().size();  Properties settings=new Properties();  settings.put(IntervalTagger.PARAM_LANGUAGE,language.getResourceFolder());  settings.put(IntervalTagger.PARAM_INTERVALS,true);  settings.put(IntervalTagger.PARAM_INTERVAL_CANDIDATES,false);  IntervalTaggerWrapper iTagger=new IntervalTaggerWrapper();  iTagger.initialize(settings);  iTagger.process(jcas);  Integer afterAnnotations=jcas.getAnnotationIndex().size();  logger.log(Level.FINEST,"Annotation delta: " + (afterAnnotations - beforeAnnotations));}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isEmpty(){  return results.isEmpty();}  }
class C{  void add(UndoLogRecord entry){  records.add(entry);  if (largeTransactions) {    memoryUndo++;    if (memoryUndo > database.getMaxMemoryUndo() && database.isPersistent() && !database.isMultiVersion()) {      if (file == null) {        String fileName=database.createTempFile();        file=database.openFile(fileName,"rw",false);        file.setCheckedWriting(false);        file.setLength(FileStore.HEADER_LENGTH);      }      Data buff=Data.create(database,Constants.DEFAULT_PAGE_SIZE);      for (int i=0; i < records.size(); i++) {        UndoLogRecord r=records.get(i);        buff.checkCapacity(Constants.DEFAULT_PAGE_SIZE);        r.append(buff,this);        if (i == records.size() - 1 || buff.length() > Constants.UNDO_BLOCK_SIZE) {          storedEntriesPos.add(file.getFilePointer());          file.write(buff.getBytes(),0,buff.length());          buff.reset();        }      }      storedEntries+=records.size();      memoryUndo=0;      records.clear();      file.autoDelete();      return;    }  } else {    if (!entry.isStored()) {      memoryUndo++;    }    if (memoryUndo > database.getMaxMemoryUndo() && database.isPersistent() && !database.isMultiVersion()) {      if (file == null) {        String fileName=database.createTempFile();        file=database.openFile(fileName,"rw",false);        file.setCheckedWriting(false);        file.seek(FileStore.HEADER_LENGTH);        rowBuff=Data.create(database,Constants.DEFAULT_PAGE_SIZE);        Data buff=rowBuff;        for (int i=0; i < records.size(); i++) {          UndoLogRecord r=records.get(i);          saveIfPossible(r,buff);        }      } else {        saveIfPossible(entry,rowBuff);      }      file.autoDelete();    }  }}  }
class C{  public void ignoredMessage(String channel){  if (!countPerChannel.containsKey(channel)) {    countPerChannel.put(channel,1);  } else {    countPerChannel.put(channel,countPerChannel.get(channel) + 1);  }}  }
class C{  private void copyMembers(DateFormatSymbols src,DateFormatSymbols dst){  dst.locale=src.locale;  dst.eras=Arrays.copyOf(src.eras,src.eras.length);  dst.months=Arrays.copyOf(src.months,src.months.length);  dst.shortMonths=Arrays.copyOf(src.shortMonths,src.shortMonths.length);  dst.weekdays=Arrays.copyOf(src.weekdays,src.weekdays.length);  dst.shortWeekdays=Arrays.copyOf(src.shortWeekdays,src.shortWeekdays.length);  dst.ampms=Arrays.copyOf(src.ampms,src.ampms.length);  if (src.zoneStrings != null) {    dst.zoneStrings=src.getZoneStringsImpl(true);  } else {    dst.zoneStrings=null;  }  dst.localPatternChars=src.localPatternChars;  dst.cachedHashCode=0;}  }
class C{  public List<Map<Integer,BitmapGlyph.Builder<? extends BitmapGlyph>>> glyphBuilders(){  return this.getGlyphBuilders();}  }
class C{  public ListBonks(ListBonks other){  if (other.isSetBonk()) {    List<Bonk> __this__bonk=new ArrayList<Bonk>(other.bonk.size());    for (    Bonk other_element : other.bonk) {      __this__bonk.add(new Bonk(other_element));    }    this.bonk=__this__bonk;  }}  }
class C{  public GraphicsNodeEvent(GraphicsNode source,int id){  super(source);  this.id=id;}  }
class C{  public FriendlySwitchCompat(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchStyle);}  }
class C{  protected void sequence_ArrowFunctionTypeExpression_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public PTQuery_GroupBy Aggregate(String varName,Agg how) throws PTQueryException {  PTQuery_GroupBy copy=new PTQuery_GroupBy(this);  copy.aggregate.add(new AggVar(copy.requireInput(varName),how));  return copy;}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  @org.junit.Test public void testTacticalGraphicRetrieval(){  IconRetriever symGen=new MilStd2525PointGraphicRetriever(ICON_RETRIEVER_PATH);  for (  String s : MilStd2525PointGraphic.getTacGrpGraphics()) {    StringBuilder sidc=new StringBuilder(s);    for (    char status : ALL_STATUS) {      sidc.setCharAt(1,'F');      sidc.setCharAt(3,status);      BufferedImage img=symGen.createIcon(sidc.toString(),null);      Assert.assertNotNull("Icon " + s.toLowerCase() + "-----.png not found.",img);    }  }}  }
class C{  public CCFadeTransition(float d,CCScene s,ccColor3B rgb){  super(d,s);  color=new ccColor4B(rgb.r,rgb.g,rgb.b,0);}  }
class C{  void validate() throws IOException {  for (  DataPageMain dpMain : new ArrayList<DataPageMain>(_dataPages.values())) {    DataPageExtra dpExtra=dpMain.getExtra();    validateEntries(dpExtra);    validateChildren(dpMain,dpExtra);    validatePeers(dpMain);  }}  }
class C{  @Override public void updateDate(int columnIndex,Date x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDate(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueDate.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:49.346 -0500",hash_original_method="45BC6016FF6AF1FC93CB29968E3D6094",hash_generated_method="8C6450F27ABCD1768B785745608D6B12") public UsbDevice(String name,int vendorId,int productId,int Class,int subClass,int protocol,Parcelable[] interfaces){  mName=name;  mVendorId=vendorId;  mProductId=productId;  mClass=Class;  mSubclass=subClass;  mProtocol=protocol;  mInterfaces=interfaces;}  }
class C{  public void deleteDropRS(){  int old=_dropRS;  _dropRS--;  setDirtyAndFirePropertyChange("locationDeleteDropRS",Integer.toString(old),Integer.toString(_dropRS));}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public void init(Context context){  if (EaseUI.getInstance().init(context)) {    appContext=context;    KefuChatManager.getInstance().setMipushConfig("2882303761517507836","5631750729836");    KefuChatManager.getInstance().setHuaweiPushAppId("10663060");    KefuChat.getInstance().setDebugMode(true);    easeUI=EaseUI.getInstance();    setEaseUIProviders();    demoModel=new DemoModel(context);    PreferenceManager.init(context);    setGlobalListeners();  }}  }
class C{  public boolean existsEdge(String factor,LaggedFactor laggedFactor){  if (laggedFactor.getLag() < 1) {    throw new IllegalArgumentException("Illegal lag specified: " + laggedFactor);  }  TreeSet list=(TreeSet)connectivity.get(factor);  if (list != null) {    return list.contains(laggedFactor);  } else {    return false;  }}  }
class C{  private boolean upField(MathContainer component){  if (component instanceof MathSequence) {    if (component.getParent() instanceof MathFunction) {      MathFunction function=(MathFunction)component.getParent();      int upIndex=function.getUpIndex(component.getParentIndex());      if (upIndex >= 0) {        currentField=function.getArgument(upIndex);        currentOffset=0;        return true;      }    }  }  if (component.getParent() != null) {    return upField(component.getParent());  }  return false;}  }
class C{  public void processEndElement() throws ParseException {  if (value != null && !value.trim().equals("") && !mixedContent) {    throw new ParseException(CoreErrorDomain.ERR.textNotAllowed);  }}  }
class C{  private boolean useMiscHeading(SettingsItem parent){  if (parent.getType().equals(Type.SUB_GROUP)) {    return false;  } else   if (subGroupMiscUsed) {    return false;  } else   if (!useSubGroups) {    return false;  } else {    return true;  }}  }
class C{  public boolean isOdd(){  return (count % 2) == 1;}  }
class C{  public static void overScrollBy(final com.handmark.pulltorefresh.library.PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void locate() throws ElementNotFoundException, URISyntaxException, IOException, ParserConfigurationException, IllegalStateException, BadAddressException {  final WebClient webClient=new WebClient();  HtmlPage page=webClient.getPage(getUrlRequest());  HtmlOrderedList alternatives=page.getHtmlElementById("dir_altroutes_body");  for (  HtmlElement element : alternatives.getElementsByTagName("li")) {    HtmlListItem alternative=(HtmlListItem)element;    Iterator<DomElement> i=alternative.getChildElements().iterator();    while (i.hasNext())     System.out.println(i.next());  }}  }
class C{  @Transactional public void addArchive(final JSONObject archive) throws ServiceException {  try {    archiveRepository.add(archive);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Adds archive failed",e);    throw new ServiceException(e);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void addExceptionContext(ExceptionContext exceptionContext){  if (null != m_message) {    StringTokenizer tokenizer=new StringTokenizer(m_message,"#");    StringBuffer buf=new StringBuffer();    for (int i=0; tokenizer.hasMoreTokens(); i++) {      String token=tokenizer.nextToken();      if ((i % 2) == 0) {        buf.append(token);      } else {        if (exceptionContext.getParameterName().equals(token)) {          buf.append(exceptionContext.getValue());        } else {          buf.append('#');          buf.append(token);          buf.append('#');        }      }    }    m_message=buf.toString();  }}  }
class C{  protected ContainerListener createContainerListener(){  return null;}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeDecimalFormats(this);}  }
class C{  public Vector4i min(Vector4i v){  this.x=Math.min(x,v.x);  this.y=Math.min(y,v.y);  this.z=Math.min(z,v.z);  this.w=Math.min(w,v.w);  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  MergeSortNumber<Integer> oper=new MergeSortNumber<Integer>();  CollectorTestSink sink=new CollectorTestSink();  oper.sort.setSink(sink);  oper.setup(null);  oper.beginWindow(1);  Random rand=new Random();  ArrayList<Integer> tuple=new ArrayList<Integer>();  tuple.add(rand.nextInt(50));  tuple.add(50 + rand.nextInt(50));  oper.process(tuple);  tuple=new ArrayList<Integer>();  tuple.add(rand.nextInt(50));  tuple.add(50 + rand.nextInt(50));  oper.process(tuple);  oper.endWindow();  oper.teardown();  assertTrue("Tuples in sink",sink.collectedTuples.size() == 1);  Iterator iter=sink.collectedTuples.iterator();  if (!iter.hasNext()) {    return;  }  tuple=(ArrayList<Integer>)iter.next();  assertTrue("Tuple size 4",tuple.size() == 4);  Integer val=tuple.get(0);  for (int i=1; i < 4; i++) {    assertTrue("Values must be sorted " + tuple,val <= tuple.get(i));    val=tuple.get(i);  }}  }
class C{  public boolean isStructural(){  return myStructural;}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  return new Pair<OperandSize,String>(OperandSize.BYTE,Helpers.SIGN_FLAG);}  }
class C{  private void fillPicks() throws Exception {  Properties ctx=Env.getCtx();  Language language=Language.getLoginLanguage();  MLookup orderL=MLookupFactory.get(ctx,m_WindowNo,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_PP_Order_ID),DisplayType.Search,language,"PP_Order_ID",0,false,"PP_Order.DocStatus = '" + MPPOrder.DOCACTION_Complete + "'");  orderField=new VLookup("PP_Order_ID",false,false,true,orderL);  orderField.setBackground(AdempierePLAF.getInfoBackground());  orderField.addVetoableChangeListener(this);  MLookup resourceL=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_S_Resource_ID),DisplayType.TableDir);  resourceField=new VLookup("S_Resource_ID",false,false,false,resourceL);  MLookup warehouseL=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_M_Warehouse_ID),DisplayType.TableDir);  warehouseField=new VLookup("M_Warehouse_ID",false,false,false,warehouseL);  MLookup productL=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_M_Product_ID),DisplayType.TableDir);  productField=new VLookup("M_Product_ID",false,false,false,productL);  MLookup uomL=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_C_UOM_ID),DisplayType.TableDir);  uomField=new VLookup("C_UOM_ID",false,false,false,uomL);  MLookup uomorderL=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_C_UOM_ID),DisplayType.TableDir);  uomorderField=new VLookup("C_UOM_ID",false,false,false,uomorderL);  MLocatorLookup locatorL=new MLocatorLookup(ctx,m_WindowNo);  locatorField=new VLocator("M_Locator_ID",true,false,true,locatorL,m_WindowNo);  MPAttributeLookup attributeL=new MPAttributeLookup(ctx,m_WindowNo);  attribute=new VPAttribute(false,false,true,m_WindowNo,attributeL,false);  attribute.setValue(0);  int m_Window=MWindow.getWindow_ID("Manufacturing Order");  GridFieldVO vo=GridFieldVO.createStdField(ctx,m_WindowNo,0,m_Window,MTab.getTab_ID(m_Window,"Order"),false,false,false);  vo.AD_Column_ID=MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_M_AttributeSetInstance_ID);  GridField field=new GridField(vo);  attribute.setField(field);  scrapQtyField.setValue(Env.ZERO);  rejectQty.setValue(Env.ZERO);  pickcombo.addItem(new KeyNamePair(1,Msg.translate(Env.getCtx(),"IsBackflush")));  pickcombo.addItem(new KeyNamePair(2,Msg.translate(Env.getCtx(),"OnlyIssue")));  pickcombo.addItem(new KeyNamePair(3,Msg.translate(Env.getCtx(),"OnlyReceipt")));  pickcombo.addActionListener(this);  Process.addActionListener(this);  toDeliverQty.addActionListener(this);  scrapQtyField.addActionListener(this);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PageRanges);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CPanel [");  sb.append(super.toString());  CompiereColor bg=getBackgroundColor();  if (bg != null)   sb.append(bg.toString());  sb.append("]");  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") public T findOne(ID id){  return (T)PMF.get().getPersistenceManager().getObjectById(type_,id);}  }
class C{  public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  boolean urbanizeTile(Tile t){  if (t.excluded || t.slope > 21) {    System.out.println("Error: can't urbanize a Tile with slope > 21");    return false;  }  t.urbanized=true;  t.landuse=1;  numUrban++;  ArrayList<Tile> urbanizedNeighbors=getUrbanNeighbors(t);  if (urbanizedNeighbors.size() > 2) {    spreadingCenters.add(t);  }  for (  Tile n : urbanizedNeighbors) {    if (spreadingCenters.contains(n)) {      continue;    }    ArrayList<Tile> neighborsUrbanizedNeighbors=getUrbanNeighbors(n);    if (neighborsUrbanizedNeighbors.size() > 1 && neighborsUrbanizedNeighbors.size() < 6) {      spreadingCenters.add(n);    }  }  return true;}  }
class C{  public Integer toInteger(){  return new Integer((int)value);}  }
class C{  @Inline public void free(ObjectReference object){  clearLiveBit(object);}  }
class C{  @Override public void success(Object o,Response response){  try {    context.deleteFile(storedExceptionFileName);  } catch (  Exception ex) {    utils.logIssue("Could not delete file [" + storedExceptionFileName + "]",ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.465 -0500",hash_original_method="94226D71E0146D875204CC2A0C5CDB43",hash_generated_method="0E57D1215E56B565A5A9140D3D9229F7") public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  firePropertyChange(propertyName,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));}  }
class C{  private double[][] weightedCovariance(double[][] matrix,double[] weights,double[] means){  double sw=1.0;  for (  double weight : weights) {    sw-=weight * weight;  }  return weightedScatter(matrix,weights,means,sw,0);}  }
class C{  @LargeTest public void testCameraPairwiseScenario01() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.NONE,WhiteBalance.DAYLIGHT,SceneMode.SUNSET,PictureSize.MEDIUM,Geotagging.OFF);}  }
class C{  @Override public boolean supportsCapability(OperatorCapability capability){switch (capability) {case NUMERICAL_LABEL:case NO_LABEL:case UPDATABLE:case FORMULA_PROVIDER:    return false;default :  return true;}}  }
class C{  protected void loadValue(String sValue){  value=Boolean.valueOf(sValue.trim()).booleanValue();}  }
class C{  public Instance transform(Instance x,double ypred[]) throws Exception {  x=(Instance)x.copy();  int L=x.classIndex();  int L_c=(paY.length + 1);  x.setDataset(null);  for (int j=0; j < (L - L_c); j++) {    x.deleteAttributeAt(0);  }  for (  int pa : paY) {    x.setValue(map[pa],ypred[pa]);  }  x.setDataset(T);  x.setClassMissing();  return x;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  @Override public final void clear(){  mCount.clear();  mSum=0;}  }
class C{  public void dumpRow(PrintStream out){  for (int i=0; i < columnNames.length; i++) {    out.print("Column ");    out.print(i);    out.print(" ");    out.print(columnNames[i]);    out.print(" : ");    try {      out.println(line[i]);    } catch (    ArrayIndexOutOfBoundsException aioobe) {      out.println("Unable to get cell " + i + " of this line");    }  }}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("jboss3x",ContainerType.INSTALLED,JBoss3xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss4x",ContainerType.INSTALLED,JBoss4xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss4x",ContainerType.REMOTE,JBoss4xRemoteContainer.class);  containerFactory.registerContainer("jboss42x",ContainerType.INSTALLED,JBoss42xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss42x",ContainerType.REMOTE,JBoss42xRemoteContainer.class);  containerFactory.registerContainer("jboss5x",ContainerType.INSTALLED,JBoss5xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss5x",ContainerType.REMOTE,JBoss5xRemoteContainer.class);  containerFactory.registerContainer("jboss51x",ContainerType.INSTALLED,JBoss51xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss51x",ContainerType.REMOTE,JBoss51xRemoteContainer.class);  containerFactory.registerContainer("jboss6x",ContainerType.INSTALLED,JBoss6xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss6x",ContainerType.REMOTE,JBoss6xRemoteContainer.class);  containerFactory.registerContainer("jboss61x",ContainerType.INSTALLED,JBoss61xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss61x",ContainerType.REMOTE,JBoss61xRemoteContainer.class);  containerFactory.registerContainer("jboss7x",ContainerType.INSTALLED,JBoss7xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss7x",ContainerType.REMOTE,JBoss7xRemoteContainer.class);  containerFactory.registerContainer("jboss71x",ContainerType.INSTALLED,JBoss71xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss71x",ContainerType.REMOTE,JBoss71xRemoteContainer.class);  containerFactory.registerContainer("jboss72x",ContainerType.INSTALLED,JBoss72xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss72x",ContainerType.REMOTE,JBoss72xRemoteContainer.class);  containerFactory.registerContainer("jboss73x",ContainerType.INSTALLED,JBoss73xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss73x",ContainerType.REMOTE,JBoss73xRemoteContainer.class);  containerFactory.registerContainer("jboss74x",ContainerType.INSTALLED,JBoss74xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss74x",ContainerType.REMOTE,JBoss74xRemoteContainer.class);  containerFactory.registerContainer("jboss75x",ContainerType.INSTALLED,JBoss75xInstalledLocalContainer.class);  containerFactory.registerContainer("jboss75x",ContainerType.REMOTE,JBoss75xRemoteContainer.class);}  }
class C{  public void addBranchCondition(String className,String methName,int branchIndex,IntegerConstraint c){  Constraint<?> normalizedConstraint=normalizeConstraint(c);  LinkedList<Constraint<?>> branch_supporting_constraints=new LinkedList<Constraint<?>>(currentSupportingConstraints);  BranchCondition new_branch=new BranchCondition(className,methName,branchIndex,normalizedConstraint,branch_supporting_constraints);  branchConditions.add(new_branch);  currentSupportingConstraints.clear();}  }
class C{  public void newLine(){  setM_Product_ID(0);  setQty(Env.ONE);  setPrice(Env.ZERO);  orderLineId=0;  f_name.requestFocusInWindow();}  }
class C{  @Benchmark public void noCoding(){  run();}  }
class C{  public IdentityLinkedList(){  header.next=header.previous=header;}  }
class C{  public <T>Builder row(T firstCell,T secondCell){  return tag("tr").cell(firstCell,false).cell(secondCell).end();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(map.capacity());  s.writeFloat(map.loadFactor());  s.writeInt(map.size());  for (  E e : map.keySet())   s.writeObject(e);}  }
class C{  @NonNull public IntroductionBuilder withSlides(Slide... slides){  return withSlides(Arrays.asList(slides));}  }
class C{  void zApplyMinimumSpinnerButtonWidthInPixels(){  if (parent == null) {    return;  }  Dimension decreaseButtonPreferredSize=parent.getComponentDecreaseSpinnerButton().getPreferredSize();  Dimension increaseButtonPreferredSize=parent.getComponentIncreaseSpinnerButton().getPreferredSize();  int width=Math.max(decreaseButtonPreferredSize.width,increaseButtonPreferredSize.width);  int height=Math.max(decreaseButtonPreferredSize.height,increaseButtonPreferredSize.height);  int minimumWidth=minimumSpinnerButtonWidthInPixels;  width=(width < minimumWidth) ? minimumWidth : width;  Dimension newSize=new Dimension(width,height);  parent.getComponentDecreaseSpinnerButton().setPreferredSize(newSize);  parent.getComponentIncreaseSpinnerButton().setPreferredSize(newSize);}  }
class C{  QLinkLanesImpl(final Link link2,final QNode toNode,List<ModelLane> lanes,NetsimEngineContext context,NetsimInternalInterface netsimEngine){  super(link2,toNode,context,netsimEngine);  this.context=context;  this.toQueueNode=toNode;  this.laneQueues=new LinkedHashMap<>();  this.toNodeLaneQueues=new ArrayList<>();  this.lanes=lanes;  this.nextQueueToLinkCache=new LinkedHashMap<>();  this.initLaneQueues();  this.visdata=this.new VisDataImpl();  this.setTransitQLink(new TransitQLink(this.firstLaneQueue));}  }
class C{  public UpgradeSettingsRequest(Map<String,Tuple<Version,String>> versions){  this.versions=versions;}  }
class C{  DirectArrayOfDoublesIntersection(final int numValues,final long seed,final Memory dstMem){  super(numValues,seed);  mem_=dstMem;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnametotallength.class,args);}  }
class C{  public static void main(String argv[]){  String rootAppender=System.getProperty("log4j.rootAppender");  if (rootAppender == null)   System.setProperty("log4j.rootAppender","file");  ManifestParser.logReleaseWithBuildNumber(logger);  logger.info("Starting replication service manager");  boolean forceOffline=false;  for (int i=0; i < argv.length; i++) {    String curArg=argv[i++];    if ("-clear".equals(curArg)) {      System.setProperty(ReplicatorRuntimeConf.CLEAR_DYNAMIC_PROPERTIES,"true");    } else     if ("-help".equals(curArg)) {      printHelp();      System.exit(0);    } else     if ("-offline".equalsIgnoreCase(curArg) || "offline".equalsIgnoreCase(curArg)) {      forceOffline=true;    } else {      System.err.println("Unrecognized option: " + curArg);      System.exit(1);    }  }  try {    ReplicationServiceManager rmgr=new ReplicationServiceManager();    rmgr.go(forceOffline);    try {      Thread.sleep(Long.MAX_VALUE);    } catch (    InterruptedException ie) {      System.err.println("Interrupted");    }    logger.info("Stopping replication service manager");  } catch (  Throwable e) {    logger.fatal("Unable to start replicator",e);  }}  }
class C{  @Deprecated public SimpleTriggerImpl(String name){  this(name,(String)null);}  }
class C{  private String addStepsForRemovingVolumesFromCG(Workflow workflow,String waitFor,URI cgURI,URI storage,String groupName,List<URI> volumeList,String taskId) throws InternalException {  log.info("addStepsForRemovingVolumesFromCG {}",cgURI);  List<Volume> volumes=new ArrayList<Volume>();  Iterator<Volume> volumeIterator=_dbClient.queryIterativeObjects(Volume.class,volumeList);  while (volumeIterator.hasNext()) {    Volume volume=volumeIterator.next();    if (volume != null && !volume.getInactive()) {      volumes.add(volume);    }  }  StorageSystem system=_dbClient.queryObject(StorageSystem.class,storage);  if (!volumes.isEmpty()) {    Volume firstVolume=volumes.get(0);    if (!(firstVolume.isInCG() && ControllerUtils.isVmaxVolumeUsing803SMIS(firstVolume,_dbClient)) && !ControllerUtils.isNotInRealVNXRG(firstVolume,_dbClient)) {      log.info(String.format("Remove from replication group not supported for volume %s",firstVolume.getLabel()));      return waitFor;    }    boolean isRemoveAllFromCG=ControllerUtils.replicationGroupHasNoOtherVolume(_dbClient,groupName,volumeList,firstVolume.getStorageController());    log.info("isRemoveAllFromCG {}",isRemoveAllFromCG);    if (checkIfCGHasCloneReplica(volumes)) {      log.info("Adding steps to process clones for removing volumes");      Map<String,List<URI>> cloneGroupCloneURIMap=new HashMap<String,List<URI>>();      for (      Volume volume : volumes) {        if (volume.getFullCopies() != null && !volume.getFullCopies().isEmpty()) {          for (          String cloneUri : volume.getFullCopies()) {            Volume clone=_dbClient.queryObject(Volume.class,URI.create(cloneUri));            if (clone != null && !clone.getInactive() && NullColumnValueGetter.isNotNullValue(clone.getReplicationGroupInstance())) {              if (cloneGroupCloneURIMap.get(clone.getReplicationGroupInstance()) == null) {                cloneGroupCloneURIMap.put(clone.getReplicationGroupInstance(),new ArrayList<URI>());              }              cloneGroupCloneURIMap.get(clone.getReplicationGroupInstance()).add(clone.getId());            }          }        }      }      for (      Entry<String,List<URI>> entry : cloneGroupCloneURIMap.entrySet()) {        waitFor=removeClonesFromReplicationGroupStep(workflow,waitFor,system,cgURI,entry.getValue(),entry.getKey());      }    }    if (checkIfCGHasMirrorReplica(volumes)) {      log.info("Adding steps to process mirrors for removing volumes");      Map<String,List<URI>> mirrorGroupCloneURIMap=new HashMap<String,List<URI>>();      for (      Volume volume : volumes) {        StringSet mirrors=volume.getMirrors();        if (mirrors != null && !mirrors.isEmpty()) {          for (          String mirrorUri : mirrors) {            BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,URI.create(mirrorUri));            if (mirror != null && !mirror.getInactive() && NullColumnValueGetter.isNotNullValue(mirror.getReplicationGroupInstance())) {              if (mirrorGroupCloneURIMap.get(mirror.getReplicationGroupInstance()) == null) {                mirrorGroupCloneURIMap.put(mirror.getReplicationGroupInstance(),new ArrayList<URI>());              }              mirrorGroupCloneURIMap.get(mirror.getReplicationGroupInstance()).add(mirror.getId());            }          }        }      }      for (      Entry<String,List<URI>> entry : mirrorGroupCloneURIMap.entrySet()) {        waitFor=removeMirrorsFromReplicationGroupStep(workflow,waitFor,system,cgURI,entry.getValue(),entry.getKey());      }    }    if (checkIfCGHasSnapshotReplica(volumes)) {      log.info("Adding steps to process snapshots for removing volumes");      Map<String,List<URI>> snapGroupCloneURIMap=new HashMap<String,List<URI>>();      for (      Volume volume : volumes) {        URIQueryResultList list=new URIQueryResultList();        _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(volume.getId()),list);        Iterator<URI> it=list.iterator();        while (it.hasNext()) {          BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,it.next());          String snapGroupName=null;          if (NullColumnValueGetter.isNotNullValue(snapshot.getReplicationGroupInstance())) {            snapGroupName=snapshot.getReplicationGroupInstance();          } else           if (NullColumnValueGetter.isNotNullValue(snapshot.getSnapsetLabel())) {            snapGroupName=snapshot.getSnapsetLabel();          }          if (snapGroupName != null) {            if (snapGroupCloneURIMap.get(snapGroupName) == null) {              snapGroupCloneURIMap.put(snapGroupName,new ArrayList<URI>());            }            snapGroupCloneURIMap.get(snapGroupName).add(snapshot.getId());          }        }      }      for (      Entry<String,List<URI>> entry : snapGroupCloneURIMap.entrySet()) {        waitFor=removeSnapshotsFromReplicationGroupStep(workflow,waitFor,system,cgURI,entry.getValue(),entry.getKey());      }    }  }  return waitFor;}  }
class C{  public boolean divideAndDraw(GL2 gl,Point2D center1,Point2D center2,QuadCurve2D curve,GLEntity shape1,GLEntity shape2,QuadCurve2D last){  QuadCurve2D left=new QuadCurve2D.Float();  QuadCurve2D right=new QuadCurve2D.Float();  curve.subdivide(left,right);  boolean resL=drawCurve(gl,center1,center2,left,shape1,shape2,last);  boolean resR=drawCurve(gl,center1,center2,right,shape1,shape2,last);  return resL || resR;}  }
class C{  public Identifier resolveName(Identifier name){  if (name.isQualified()) {    Identifier rhead=resolveName(name.getHead());    if (rhead.hasAmbigPrefix()) {      return rhead;    }    if (!this.classExists(rhead)) {      return this.resolvePackageQualifiedName(name);    }    try {      return this.getClassDefinition(rhead).resolveInnerClass(this,name.getTail());    } catch (    ClassNotFound ee) {      return Identifier.lookupInner(rhead,name.getTail());    }  }  try {    return resolve(name);  } catch (  AmbiguousClass ee) {    if (name.hasAmbigPrefix()) {      return name;    } else {      return name.addAmbigPrefix();    }  }catch (  ClassNotFound ee) {    Imports imports=getImports();    if (imports != null)     return imports.forceResolve(this,name);  }  return name;}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  private void initConnection() throws XMPPException {  boolean isFirstInitialization=packetReader == null || packetWriter == null;  compressionHandler=null;  serverAckdCompression=false;  initReaderAndWriter();  try {    if (isFirstInitialization) {      packetWriter=new PacketWriter(this);      packetReader=new PacketReader(this);      if (config.isDebuggerEnabled()) {        addPacketListener(debugger.getReaderListener(),null);        if (debugger.getWriterListener() != null) {          addPacketSendingListener(debugger.getWriterListener(),null);        }      }    } else {      packetWriter.init();      packetReader.init();    }    packetWriter.startup();    packetReader.startup();    connected=true;    if (isFirstInitialization) {      for (      ConnectionCreationListener listener : getConnectionCreationListeners()) {        listener.connectionCreated(this);      }    }  } catch (  XMPPException ex) {    if (packetWriter != null) {      try {        packetWriter.shutdown();      } catch (      Throwable ignore) {      }      packetWriter=null;    }    if (packetReader != null) {      try {        packetReader.shutdown();      } catch (      Throwable ignore) {      }      packetReader=null;    }    if (reader != null) {      try {        reader.close();      } catch (      Throwable ignore) {      }      reader=null;    }    if (writer != null) {      try {        writer.close();      } catch (      Throwable ignore) {      }      writer=null;    }    if (socket != null) {      try {        socket.close();      } catch (      Exception e) {      }      socket=null;    }    this.setWasAuthenticated(authenticated);    chatManager=null;    authenticated=false;    connected=false;    throw ex;  }}  }
class C{  public Builder bySetPos(Collection<Integer> positions){  bySetPos.addAll(positions);  return this;}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(float[] src,int srcIdx,float[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx > dstIdx) && FLOAT_BULK_COPY_SUPPORTED) {      if (NEEDS_FLOAT_ASTORE_BARRIER || NEEDS_FLOAT_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_FLOAT);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_FLOAT);        Barriers.floatBulkCopy(src,srcOffset,dst,dstOffset,len << LOG_BYTES_IN_FLOAT);      } else {        Memory.arraycopy32Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  private void startMapActivity(){  Intent intent=new Intent(this,MapActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);  finish();}  }
class C{  public void removeCustomTickLabel(final String TICK_LABEL){  if (null == TICK_LABEL)   return;  if (customTickLabels.contains(TICK_LABEL))   customTickLabels.remove(TICK_LABEL);  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  return _file.read(buffer,offset,length);}  }
class C{  public static MoreFragment newInstance(String param1,String param2){  MoreFragment fragment=new MoreFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean isGreaterThan(Minutes other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  private Object[] invWmSubBand(Image img,double[] wm,int n,double threshold){  int m=0;  double z=0.0;  double v=0.0;  for (int i=0; i < img.getWidth() * img.getHeight(); i++) {    if (img.getData()[i] > threshold) {      z+=(img.getData()[i] * wm[i % n]);      v+=Math.abs(img.getData()[i]);      m++;    }  }  return new Object[]{m,z,v};}  }
class C{  public static int compute3(int x){  int t=(x % 127773) * 16807 - (x / 127773) * 2836;  return (t > 0) ? t : t + 0x7fffffff;}  }
class C{  public void updateTimestamp(long timestamp){  mTimestamps[mBufferIn]=timestamp;  setLong(mBuffers[mBufferIn],(timestamp / 100L) * (mClock / 1000L) / 10000L,4,8);}  }
class C{  private void tryReadingCustomLog4jFile(){  if (existsCustomLog4jConfigurationFile()) {    configureWithCustomLog4jFile();  }}  }
class C{  private Schema initializeOutputSchema(){  List<Schema.Field> fields=new ArrayList<>();  fields.add(Schema.Field.of(conf.getKeyField(),Schema.of(Schema.Type.STRING)));  for (  String outputField : conf.getOutputSchemaFields()) {    fields.add(Schema.Field.of(outputField,Schema.nullableOf(Schema.of(Schema.Type.STRING))));  }  return Schema.recordOf("output.schema",fields);}  }
class C{  @Override public FileLock lock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public LLVMAddress allocate(final long stackSize){  CompilerDirectives.transferToInterpreterAndInvalidate();  if (!isFreed) {    throw new AssertionError("previously not deallocated");  }  final long stackAllocation=UNSAFE.allocateMemory(stackSize);  lowerBounds=stackAllocation;  upperBounds=stackAllocation + stackSize;  isFreed=false;  return LLVMAddress.fromLong(upperBounds);}  }
class C{  private void handleMobileCellScroll(){  mIsMobileScrolling=handleMobileCellScroll(mHoverCellCurrentBounds);}  }
class C{  public void addBeanContextMembershipListener(BeanContextMembershipListener bcml){  if (bcml == null)   throw new NullPointerException("listener");synchronized (bcmListeners) {    if (bcmListeners.contains(bcml))     return; else     bcmListeners.add(bcml);  }}  }
class C{  public boolean isMultipleSnapshotsSupported(){  return multipleSnapshotsSupported;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  registry.build(PUBLISHED);  registry.build(SUMMARY);  ElementCreator builder=registry.build(KEY).setCardinality(Cardinality.MULTIPLE);  builder.addAttribute(GdAttributes.ETAG);  builder.addAttribute(GdAttributes.KIND);  builder.addAttribute(GdAttributes.FIELDS);  builder.addElement(ID);  builder.addElement(PUBLISHED);  builder.addElement(UPDATED);  builder.addElement(Edited.KEY);  builder.addElement(Control.KEY);  builder.addElement(Category.KEY);  builder.addElement(TITLE);  builder.addElement(SUMMARY);  builder.addElement(RIGHTS);  builder.addElement(Content.KEY).adapt(TextContent.KIND,TextContent.KEY).adapt(OtherContent.KIND,OtherContent.KEY).adapt(OutOfLineContent.KIND,OutOfLineContent.KEY);  builder.addElement(Link.KEY);  builder.addElement(Author.KEY);  builder.addElement(Contributor.KEY);  builder.addElement(Source.KEY);  builder.addElement(BatchId.KEY);  builder.addElement(BatchInterrupted.KEY);  builder.addElement(BatchOperation.KEY);  builder.addElement(BatchStatus.KEY);  TextContent.registerMetadata(registry);  OtherContent.registerMetadata(registry);  OutOfLineContent.registerMetadata(registry);}  }
class C{  public static SignatureParser make(){  return new SignatureParser();}  }
class C{  protected void commit(final long commitTime){  if (true)   throw new UnsupportedOperationException();  final ManagedJournal journal=resourceManager.getLiveJournal();  journal.commitNow(commitTime);}  }
class C{  public void craft(){  ItemStack[] matrix=getMatrix();  CraftingManager cm=((GlowServer)Bukkit.getServer()).getCraftingManager();  Recipe recipe=cm.getCraftingRecipe(matrix);  if (recipe != null) {    cm.removeItems(matrix,this);  }}  }
class C{  private void checkFinishedCount(final State current){  Operation.CompletionHandler handler=null;  QueryTask.QuerySpecification spec=QueryTaskUtils.buildChildServiceTaskStatusQuerySpec(this.getSelfLink(),ImageDatastoreSweeperService.State.class,TaskState.TaskStage.FINISHED);  this.sendQuery(spec,handler);}  }
class C{  @Override protected Profile instantiateProfile(InternalDistributedMember memberId,int version){  return new CacheServerProfile(memberId,version);}  }
class C{  public static boolean isRunningInTestHarness(){  return SystemProperties.getBoolean("ro.test_harness",false);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tan(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isStarted(){  return !isInLimbo() && !isFinished();}  }
class C{  public boolean sizeMatches(Image img){  return sizeMatches(img.getWidth(null),img.getHeight(null));}  }
class C{  public String encodeBody(){  if (callId == null)   return null; else {    String retVal=callId;    if (!parameters.isEmpty()) {      retVal+=SEMICOLON + parameters.encode();    }    return retVal;  }}  }
class C{  public static Object unescapeValue(String val){  char[] chars=val.toCharArray();  int beg=0;  int end=chars.length;  while ((beg < end) && isWhitespace(chars[beg])) {    ++beg;  }  while ((beg < end) && isWhitespace(chars[end - 1])) {    --end;  }  if (end != chars.length && (beg < end) && chars[end - 1] == '\\') {    end++;  }  if (beg >= end) {    return "";  }  if (chars[beg] == '#') {    return decodeHexPairs(chars,++beg,end);  }  if ((chars[beg] == '\"') && (chars[end - 1] == '\"')) {    ++beg;    --end;  }  StringBuilder builder=new StringBuilder(end - beg);  int esc=-1;  for (int i=beg; i < end; i++) {    if ((chars[i] == '\\') && (i + 1 < end)) {      if (!Character.isLetterOrDigit(chars[i + 1])) {        ++i;        builder.append(chars[i]);        esc=i;      } else {        byte[] utf8=getUtf8Octets(chars,i,end);        if (utf8.length > 0) {          try {            builder.append(new String(utf8,"UTF8"));          } catch (          java.io.UnsupportedEncodingException e) {          }          i+=utf8.length * 3 - 1;        } else {          throw new IllegalArgumentException("Not a valid attribute string value:" + val + ",improper usage of backslash");        }      }    } else {      builder.append(chars[i]);    }  }  int len=builder.length();  if (isWhitespace(builder.charAt(len - 1)) && esc != (end - 1)) {    builder.setLength(len - 1);  }  return builder.toString();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:      return N4JSPackage.N4_FIELD_ACCESSOR___GET_DECLARED_TYPE_REF;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:  return N4JSPackage.N4_FIELD_ACCESSOR___GET_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == N4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_NAME:return N4JSPackage.N4_FIELD_ACCESSOR___GET_NAME;case N4JSPackage.N4_MEMBER_DECLARATION___GET_DECLARED_TYPE_REF:return N4JSPackage.N4_FIELD_ACCESSOR___GET_DECLARED_TYPE_REF;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return N4JSPackage.N4_FIELD_ACCESSOR___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:return N4JSPackage.N4_FIELD_ACCESSOR___GET_NAME;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE:return N4JSPackage.N4_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC:return N4JSPackage.N4_FIELD_ACCESSOR___IS_ASYNC;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR:return N4JSPackage.N4_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.N4_FIELD_ACCESSOR___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.N4_FIELD_ACCESSOR___IS_VALID_NAME;default :return -1;}}if (baseClass == eu.numberfour.n4js.n4JS.FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FIELD_ACCESSOR___GET_DECLARED_TYPE_REF:return N4JSPackage.N4_FIELD_ACCESSOR___GET_DECLARED_TYPE_REF;case N4JSPackage.FIELD_ACCESSOR___GET_DEFINED_ACCESSOR:return N4JSPackage.N4_FIELD_ACCESSOR___GET_DEFINED_ACCESSOR;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private void assertNoVatRates(VatRateDetails result){  assertNotNull(result);  assertNull("DefaultVatRate",result.getDefaultVatRate());  assertNull("CountryVatRate",result.getCountryVatRate());  assertNull("CustomerVatRate",result.getCustomerVatRate());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.870 -0500",hash_original_method="15E2F72950F37D4FA5596F6CA90D9CCE",hash_generated_method="40216FE3F4C9B2893429DFE030BBF9D9") private String computeCnonce(){  Random rand=new Random();  int nextInt=rand.nextInt();  nextInt=(nextInt == Integer.MIN_VALUE) ? Integer.MAX_VALUE : Math.abs(nextInt);  return Integer.toString(nextInt,16);}  }
class C{  public int appendData(DataSource dataSource,int length,boolean allowEndOfInput) throws IOException {  length=prepareForAppend(length);  int bytesAppended=dataSource.read(lastAllocation.data,lastAllocation.translateOffset(lastAllocationOffset),length);  if (bytesAppended == C.RESULT_END_OF_INPUT) {    if (allowEndOfInput) {      return C.RESULT_END_OF_INPUT;    }    throw new EOFException();  }  lastAllocationOffset+=bytesAppended;  totalBytesWritten+=bytesAppended;  return bytesAppended;}  }
class C{  public Model lookup(Expression path){  String name=path.getFirst();  int index=path.getIndex();  Model model=lookup(name,index);  if (path.isPath()) {    path=path.getPath(1,0);    if (model != null) {      return model.lookup(path);    }  }  return model;}  }
class C{  public static CharSeq of(String str){  return new CharSeq(str);}  }
class C{  public Coin(Transaction transaction,int outputIndex){  this(new Outpoint(transaction.getID(),outputIndex),transaction.getOutput(outputIndex));}  }
class C{  public void fatalError(CSSParseException e){  throw e;}  }
class C{  public boolean hit(Rectangle rect,Shape s,boolean onStroke){  if (onStroke) {    s=stroke.createStrokedShape(s);  }  s=transformShape(s);  if ((constrainX | constrainY) != 0) {    rect=new Rectangle(rect);    rect.translate(constrainX,constrainY);  }  return s.intersects(rect);}  }
class C{  public LikelihoodFittingFunction(GeneralizedSemPm pm,List<String> parameters,List<Node> tierOrdering,DataSet data,MyContext context){  this.pm=pm;  this.parameters=parameters;  this.tierOrdering=tierOrdering;  this.context=context;  dataValues=getDataValues(data,tierOrdering);}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public GapStatistic(KClusterer base,boolean PCSampling,int B,DistanceMetric dm){  this.base=base;  setSamples(B);  setDistanceMetric(dm);  setPCSampling(PCSampling);}  }
class C{  public void parseDTD(String publicID,IXMLReader reader,IXMLEntityResolver entityResolver,boolean external) throws Exception {  this.delegate.parseDTD(publicID,reader,entityResolver,external);}  }
class C{  public void deleteShadowImagePair(StorageSystem storageSystem,Volume source,Volume target) throws Exception {  log.info("Delete pair operation started");  HDSApiClient apiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);  HDSApiProtectionManager apiProtectionManager=apiClient.getHdsApiProtectionManager();  Map<String,String> repliMap=apiProtectionManager.getReplicationRelatedObjectIds(source.getNativeId(),target.getNativeId());  log.info("Replication Obj Ids :{}",repliMap);  String replicationGroupObjId=repliMap.get(HDSConstants.REPLICATION_GROUP_OBJ_ID);  String replicationInfoObjId=repliMap.get(HDSConstants.REPLICATION_INFO_OBJ_ID);  apiProtectionManager.deleteShadowImagePair(replicationGroupObjId,replicationInfoObjId,storageSystem.getModel());  log.info("Delete pair operation completed");}  }
class C{  public static int compare(IndexFingerprint f1,IndexFingerprint f2){  int cmp;  if (f1.maxVersionSpecified == Long.MAX_VALUE) {    cmp=Long.compare(f1.maxVersionEncountered,f2.maxVersionEncountered);    if (cmp != 0)     return cmp;  }  cmp=Long.compare(f1.maxInHash,f2.maxInHash);  if (cmp != 0)   return cmp;  cmp=Long.compare(f1.numVersions,f2.numVersions);  if (cmp != 0)   return cmp;  cmp=Long.compare(f1.versionsHash,f2.versionsHash);  return cmp;}  }
class C{  @Override public void close(){}  }
class C{  public void tradeOrderStatusChanged(TradeOrder tradeOrder){}  }
class C{  public DisMaxQueryBuilder add(QueryBuilder queryBuilder){  queries.add(queryBuilder);  return this;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_OUT_KEY_VALUE_PAIR:    return "CU_OUT_KEY_VALUE_PAIR";case CU_OUT_CSV:  return "CU_OUT_CSV";}return "INVALID CUoutput_mode: " + n;}  }
class C{  public final void add(Generator generator,int emptyLinesCount){  myGenerators.add(Pair.create(generator,new Integer(emptyLinesCount)));}  }
class C{  public boolean isStateActive(State state){switch (state) {case constOnlyInternalScope_main_region_A:    return stateVector[0] == State.constOnlyInternalScope_main_region_A;case constOnlyInternalScope_main_region_B:  return stateVector[0] == State.constOnlyInternalScope_main_region_B;case constOnlyInternalScope_main_region_C:return stateVector[0] == State.constOnlyInternalScope_main_region_C;default :return false;}}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TimeSeriesCollection)) {    return false;  }  TimeSeriesCollection that=(TimeSeriesCollection)obj;  if (this.xPosition != that.xPosition) {    return false;  }  if (this.domainIsPointsInTime != that.domainIsPointsInTime) {    return false;  }  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return true;}  }
class C{  public ElementCreatorImpl replaceElement(ElementKey<?,?> elementKey){  return addElement(elementKey,Action.REPLACE);}  }
class C{  @Override public void incomingObject(IInterval interval) throws AdeException, AdeFlowException {  final IMainScorer ms=getModel();  if (ms != null) {    final IAnalyzedInterval analyzedInterval=ms.analyze(interval);    sendObject(analyzedInterval);  }}  }
class C{  private List<ColumnDictionaryChunk> readDictionaryFile(long dictionaryStartOffset,int dictionaryChunkCountToBeRead) throws IOException {  List<ColumnDictionaryChunk> dictionaryChunks=new ArrayList<ColumnDictionaryChunk>(dictionaryChunkCountToBeRead);  dictionaryFileReader.setReadOffset(dictionaryStartOffset);  while (dictionaryFileReader.hasNext() && dictionaryChunks.size() != dictionaryChunkCountToBeRead) {    dictionaryChunks.add((ColumnDictionaryChunk)dictionaryFileReader.read());  }  return dictionaryChunks;}  }
class C{  private boolean isAdminOfAuthor(ProductReview reviewToBeRemoved){  Organization org=reviewToBeRemoved.getPlatformUser().getOrganization();  if (getLoggedInUser().isOrganizationAdmin() && getLoggedInUser().getOrganization().equals(org)) {    return true;  }  return false;}  }
class C{  public void internalFrameDeiconified(InternalFrameEvent e){}  }
class C{  private String _serializeStruct(String name,Struct struct,StringBuilder sb,Set<Object> done) throws ConverterException {  if (useShortcuts)   sb.append("{};"); else   sb.append("new Object();");  Iterator<Entry<Key,Object>> it=struct.entryIterator();  Entry<Key,Object> e;  while (it.hasNext()) {    e=it.next();    String key=StringUtil.escapeJS(Caster.toString(e.getKey().getLowerString(),""),'"');    sb.append(name + "[" + key+ "]=");    _serialize(name + "[" + key+ "]",e.getValue(),sb,done);  }  return sb.toString();}  }
class C{  public static void unZipDirectory(File file,File destination) throws IOException {  ZipInputStream in=null;  OutputStream out=null;  try {    in=new ZipInputStream(new FileInputStream(file));    ZipEntry entry=null;    while ((entry=in.getNextEntry()) != null) {      String outFilename=entry.getName();      if (entry.isDirectory()) {        new File(destination,outFilename).mkdirs();      } else {        File outputFile=new File(destination,outFilename);        File outputFileFolder=outputFile.getParentFile();        if (!outputFileFolder.exists()) {          outputFileFolder.mkdirs();        }        if (outputFile.exists()) {          outputFile.delete();        }        out=new FileOutputStream(outputFile);        byte[] buf=new byte[1024];        int len;        while ((len=in.read(buf)) > 0) {          out.write(buf,0,len);        }        out.close();      }    }  }  finally {    if (in != null) {      in.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  public void testMetricsStatisticsDisabled() throws Exception {  createCaches(false);  populateCacheData(cache1,ENTRY_CNT_CACHE1);  populateCacheData(cache2,ENTRY_CNT_CACHE2);  readCacheData(cache1,ENTRY_CNT_CACHE1);  readCacheData(cache2,ENTRY_CNT_CACHE2);  awaitMetricsUpdate();  Collection<ClusterNode> nodes=grid(0).cluster().forRemotes().nodes();  for (  ClusterNode node : nodes) {    Map<Integer,CacheMetrics> metrics=((TcpDiscoveryNode)node).cacheMetrics();    assertNotNull(metrics);    assertTrue(metrics.isEmpty());  }  assertMetrics(cache1);  assertMetrics(cache2);  destroyCaches();}  }
class C{  public boolean canInstantSwitch(int newMode){  String newModeName=type.getMode(newMode).getName();  String curModeName=curMode().getName();  return getType().hasInstantModeSwitch() && !type.isNextTurnModeSwitch(newModeName) && !type.isNextTurnModeSwitch(curModeName);}  }
class C{  public IDETsconfigJson findTsconfig(IResource resource) throws CoreException {  IFile tsconfigFile=findTsconfigFile(resource);  if (tsconfigFile != null) {    return getTsconfig(tsconfigFile);  }  return null;}  }
class C{  public boolean stopPruning(boolean stop){  return true;}  }
class C{  protected boolean popNamespace(String prefix){  try {    if (m_prefixMap.popNamespace(prefix)) {      m_saxHandler.endPrefixMapping(prefix);      return true;    }  } catch (  SAXException e) {  }  return false;}  }
class C{  private void parseAttributeStatement(List<StatementAbstractType> statementList) throws MalformedTokenException {  if (statementList != null) {    for (    StatementAbstractType stmt : statementList) {      if (stmt instanceof AttributeStatementType) {        AttributeStatementType attrStatement=(AttributeStatementType)stmt;        List<AttributeType> attributeList=attrStatement.getAttribute();        List<PrincipalId> groupList=new ArrayList<PrincipalId>();        for (        AttributeType attribute : attributeList) {          String attributeName=attribute.getName();          if (attributeName.equals(AttributeNames.HTTP_RSA_COM_SCHEMAS_ATTR_NAMES_2009_01_GROUP_IDENTITY.value())) {            try {              groupList.addAll(parseGroup(attribute.getAttributeValue()));            } catch (            ParserException e) {              _log.debug(PARSE_GROUPS_ERR_MSG,e);              throw new MalformedTokenException(PARSE_GROUPS_ERR_MSG,e);            }            _log.debug("Groups successfully extracted from token");          } else           if (attributeName.equals(AttributeNames.HTTP_VMWARE_COM_SCHEMAS_ATTR_NAMES_2011_07_IS_SOLUTION.value())) {            List<String> attributeValue=attribute.getAttributeValue();            if (null != attributeValue && 1 == attributeValue.size()) {              _isSolution=Boolean.parseBoolean(attributeValue.get(0));              _log.debug("isSolution attribute parsed successfully from " + attributeValue + " to: "+ _isSolution);            } else {              throw new MalformedTokenException(PARSE_ISSOLUTION_ERR_MSG);            }          }        }        _groups=Collections.unmodifiableList(groupList);        _log.debug("Attribute statements successfully parsed");      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.727 -0400",hash_original_method="60DEF30A1190938008A7A3D1CF53CB89",hash_generated_method="4F1F393B0267F1A2ED77CFC3C824AC0F") public RestoringInputStream(InputStream inStream){  this.inStream=inStream;}  }
class C{  public boolean isBackupRunData(){  return backupRunData;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  private static AxSfQueryResults navigateOrNavigateToRowRegisterQuery(String sessionID,Integer bookID,Locale locale,String entidad,boolean isToRow,int row,String queryNavigationType,String orderByTable) throws BookException, SessionException, ValidationException {  Transaction tran=null;  try {    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    if (!cacheBag.containsKey(bookID)) {      throw new BookException(BookException.ERROR_BOOK_NOT_OPEN);    }    THashMap bookInformation=(THashMap)cacheBag.get(bookID);    AxSfQueryResults queryResults=(AxSfQueryResults)bookInformation.get(AXSF_QUERY_RESULTS);    if (queryResults == null) {      throw new BookException(BookException.ERROR_QUERY_NOT_OPEN);    }    if (isToRow) {      if (row < 0 || row > queryResults.getTotalQuerySize()) {        throw new BookException(BookException.ERROR_ROW_OUTSIDE);      }    }    AxSf axsf=(AxSf)bookInformation.get(AXSF);    AxSfQuery axsfQuery=(AxSfQuery)bookInformation.get(AXSF_QUERY);    if ((orderByTable != null) && (!orderByTable.equals(""))) {      axsfQuery.setOrderBy(orderByTable);    }    String filter=(String)bookInformation.get(QUERY_FILTER);    Idocarchdet idoc=(Idocarchdet)bookInformation.get(IDocKeys.IDOCARCHDET_FLD_DEF_ASOBJECT);    Map result=new TreeMap();    AxSfEntity axSfEntity=new AxSfEntity();    Collection col=null;    if (isToRow) {      col=axSfEntity.findByRowAxSfQuery(axsfQuery,axsf,queryResults,row,filter,entidad);    } else {      col=axSfEntity.findByAxSfQuery(axsfQuery,axsf,queryResults,queryNavigationType,filter,entidad);    }    extractRegistersFromQuery(col,result,session,idoc,axSfEntity,locale.getLanguage(),entidad);    HibernateUtil.commitTransaction(tran);    return queryResults.clone(result.values());  } catch (  BookException bE) {    HibernateUtil.rollbackTransaction(tran);    throw bE;  }catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    throw new BookException(BookException.ERROR_CANNOT_FIND_REGISTERS);  } finally {    HibernateUtil.closeSession(entidad);  }}  }
class C{  public static void main(String[] args){  System.out.println(dateTimeFormat("2012-3-2 12:2:20"));}  }
class C{  public boolean hasFocus(){  return focused;}  }
class C{  public void discount(final double discount){  multiplyAllValuesBy(discount,3);}  }
class C{  public static int defaultColor(){  return Colors.dark();}  }
class C{  private SqlStatementParser(){  matchers.put(Database.MYSQL,mysqlMatcher);  matchers.put(Database.ORACLE,mysqlMatcher);  matchers.put(Database.POSTGRESQL,mysqlMatcher);  matchers.put(Database.UNKNOWN,mysqlMatcher);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UW_UNCOND_WAIT",justification="unguarded wait() used intentionally here as part of utility class") public WaitHandler(Object self){  while (true) {    try {synchronized (self) {        self.wait();        if (!wasSpurious()) {          break;        }      }    } catch (    InterruptedException e) {      if (handleInterruptedException(e)) {        break;      }    }  }}  }
class C{  public boolean canTransparent(){  return canTransparent;}  }
class C{  private boolean waitForOnOff(boolean on,boolean off){  int i=0;  while (i < 10) {synchronized (mConnection) {      try {        if (mBluetooth == null)         break;        if (on) {          if (mBluetooth.getState() == BluetoothAdapter.STATE_ON)           return true;        } else         if (off) {          if (mBluetooth.getState() == BluetoothAdapter.STATE_OFF)           return true;        } else {          if (mBluetooth.getState() != BluetoothAdapter.STATE_ON)           return true;        }      } catch (      RemoteException e) {        Log.e(TAG,"getState()",e);        break;      }    }    if (on || off) {      SystemClock.sleep(300);    } else {      SystemClock.sleep(50);    }    i++;  }  Log.e(TAG,"waitForOnOff time out");  return false;}  }
class C{  public TColor invert(){  rgb[0]=1 - rgb[0];  rgb[1]=1 - rgb[1];  rgb[2]=1 - rgb[2];  return setRGB(rgb);}  }
class C{  private void populateUnityAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType(DiscoveredDataObject.Type.unity.name());  accessProfile.setPortNumber(providerInfo.getPortNumber());  accessProfile.setSslEnable(String.valueOf(providerInfo.getUseSSL()));}  }
class C{  private void updateUiAfterResponse(String feature,String state,String featureMetadata,String ruleMetadata,boolean cached){  featureButton.setText(state == Toggle.ENABLED ? Toggle.ENABLED : Toggle.DISABLED);  featureButton.setEnabled(state == Toggle.ENABLED);  featureMetadataTextView.setText("Feature Metadata: " + featureMetadata);  ruleMetadataTextView.setText("Rule Metadata: " + ruleMetadata);  cachedTextView.setText("Cached: " + cached);}  }
class C{  public NormalCard text(@NotNull String text){  mText=text;  isImage=false;  isText=true;  return this;}  }
class C{  private static char unicodeToLowerCase(final char c){  if (c < 128)   return c >= 'A' && c <= 'Z' ? (char)(c + 32) : c;  return Character.toLowerCase(Character.toUpperCase(c));}  }
class C{  public Iterator<Edge> iterator(){  return new EdgeBufferIterator(this);}  }
class C{  private void formatApply(Formatter formatter) throws IOException {  for (  File file : target) {    getLogger().debug("Applying format to " + file);    if (paddedCell) {      PaddedCellTaskMisc.apply(this,formatter,file);    } else {      formatter.applyFormat(file);    }  }}  }
class C{  public HttpRequest(Method method,HttpURI uri){  this(method,uri,true);}  }
class C{  public Node deepCopy(){  return NodeUtil.deepCopyImpl(this);}  }
class C{  @Override public String toString(){  StringBuilder out=new StringBuilder("Pair(");  out.append(lhSide).append(", ").append(rhSide).append(")");  return out.toString();}  }
class C{  public static IVariableBinding findFieldInType(ITypeBinding type,String fieldName){  if (type.isPrimitive())   return null;  IVariableBinding[] fields=type.getDeclaredFields();  for (int i=0; i < fields.length; i++) {    IVariableBinding field=fields[i];    if (field.getName().equals(fieldName))     return field;  }  return null;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (!skipCharacters) {    try {      writer.write(new String(ch,start,length));    } catch (    IOException ioe) {      throw new SAXException(ioe);    }  }}  }
class C{  private AbstractClassSensorAssignment<?> addRequested(){  SensorAssignmentSelectionDialog dialog=new SensorAssignmentSelectionDialog(managedForm.getForm().getShell());  if (dialog.open() == Window.OK) {    return dialog.getSensorAssignment();  }  return null;}  }
class C{  public boolean isNumOrdenEnUso(int numOrden){  StringBuffer qual=new StringBuffer(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_NUMORDEN,numOrden));  if (getVOCount(qual.toString(),TABLE_NAME) > 0)   return true;  return false;}  }
class C{  protected static double estimateInitialBeta(double[] dist_i,double perplexity){  double sum=0.;  for (  double d : dist_i) {    sum+=d < Double.POSITIVE_INFINITY ? d : 0.;  }  assert (sum > 0. && sum < Double.POSITIVE_INFINITY);  return .5 / sum * perplexity * (dist_i.length - 1.);}  }
class C{  public void testBoundedDoubles(){  AtomicInteger fails=new AtomicInteger(0);  SplittableRandom r=new SplittableRandom();  long size=456;  for (double least=0.00011; least < 1.0e20; least*=9) {    for (double bound=least * 1.0011; bound < 1.0e20; bound*=17) {      final double lo=least, hi=bound;      r.doubles(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(0,fails.get());}  }
class C{  protected void updateFunctionGroup4(int fns){  this.f13=((fns & CbusConstants.CBUS_F13) == CbusConstants.CBUS_F13);  this.f14=((fns & CbusConstants.CBUS_F14) == CbusConstants.CBUS_F14);  this.f15=((fns & CbusConstants.CBUS_F15) == CbusConstants.CBUS_F15);  this.f16=((fns & CbusConstants.CBUS_F16) == CbusConstants.CBUS_F16);  this.f17=((fns & CbusConstants.CBUS_F17) == CbusConstants.CBUS_F17);  this.f18=((fns & CbusConstants.CBUS_F18) == CbusConstants.CBUS_F18);  this.f19=((fns & CbusConstants.CBUS_F19) == CbusConstants.CBUS_F19);  this.f20=((fns & CbusConstants.CBUS_F20) == CbusConstants.CBUS_F20);}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static final double metersPerSecondToFeetPerSecond(double metersPerSecond){  return metersPerSecond * FOOT_TO_METER;}  }
class C{  public synchronized void remove(int index){  super.remove(index);  double removedValue=mValue.remove(index);  if (removedValue == mMinValue || removedValue == mMaxValue) {    initRange();  }}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public void tradeOrderCancelled(TradeOrder tradeOrder){}  }
class C{  public long appendPacketIfNeeded(Buffer buffer,ReadPacketFetcher packetFetcher) throws IOException {  long encLength=buffer.getLengthEncodedBinary();  while (encLength > buffer.remaining()) {    buffer.appendPacket(packetFetcher.getPacket());  }  return encLength;}  }
class C{  @Override public int hashCode(){  return (int)(getStudentId() ^ (getStudentId() >>> 32));}  }
class C{  public static <T>LazyPSetX<T> fromIterable(Reducer<PSet<T>> collector,Iterable<T> it){  if (it instanceof LazyPSetX)   return (LazyPSetX<T>)it;  if (it instanceof PSet)   return new LazyPSetX<T>((PSet<T>)it,collector);  return new LazyPSetX<T>(Flux.fromIterable(it),collector);}  }
class C{  void signedSubtract(MutableBigInteger addend){  if (sign == 1)   sign=sign * subtract(addend); else   add(addend);  if (intLen == 0)   sign=1;}  }
class C{  public void sendMessage(String text) throws XMPPException {  Message message=new Message(room,Message.Type.groupchat);  message.setBody(text);  connection.sendPacket(message);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  double bufferSize=0;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry geometriesToBuffer=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  bufferSize=Double.parseDouble(args[2]);  if (bufferSize < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON);    output.setProjectionStringFromOtherShapefile(input);    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    if (shapeType.getBaseType() == ShapeType.POLYGON) {      progress=0;      ArrayList<com.vividsolutions.jts.geom.Polygon> polygons=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            polygons.add((com.vividsolutions.jts.geom.Polygon)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Polygon[] polygonArray=new com.vividsolutions.jts.geom.Polygon[polygons.size()];      for (i=0; i < polygons.size(); i++) {        polygonArray[i]=polygons.get(i);      }      polygons.clear();      geometriesToBuffer=factory.createMultiPolygon(polygonArray);    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      ArrayList<LineString> lineStringList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            lineStringList.add((com.vividsolutions.jts.geom.LineString)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.LineString[] lineStringArray=new com.vividsolutions.jts.geom.LineString[lineStringList.size()];      for (i=0; i < lineStringList.size(); i++) {        lineStringArray[i]=lineStringList.get(i);      }      lineStringList.clear();      geometriesToBuffer=factory.createMultiLineString(lineStringArray);    } else     if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      ArrayList<com.vividsolutions.jts.geom.Point> pointList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      progress=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            pointList.add((com.vividsolutions.jts.geom.Point)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Point[] pointArray=new com.vividsolutions.jts.geom.Point[pointList.size()];      for (i=0; i < pointList.size(); i++) {        pointArray[i]=pointList.get(i);      }      pointList.clear();      geometriesToBuffer=factory.createMultiPoint(pointArray);    }    updateProgress("Buffering data (progress will not be updated):",-1);    com.vividsolutions.jts.geom.Geometry buffer=geometriesToBuffer.buffer(bufferSize);    progress=0;    updateProgress("Creating new shapefile:",-1);    if (buffer instanceof com.vividsolutions.jts.geom.MultiPolygon) {      MultiPolygon mpBuffer=(MultiPolygon)buffer;      FID=0;      n=0;      for (int a=0; a < mpBuffer.getNumGeometries(); a++) {        com.vividsolutions.jts.geom.Geometry g=mpBuffer.getGeometryN(a);        if (g instanceof com.vividsolutions.jts.geom.Polygon) {          com.vividsolutions.jts.geom.Polygon bufferPoly=(com.vividsolutions.jts.geom.Polygon)g;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[bufferPoly.getNumInteriorRing() + 1];          Coordinate[] buffCoords=bufferPoly.getExteriorRing().getCoordinates();          if (!Topology.isLineClosed(buffCoords)) {            System.out.println("Exterior ring not closed.");          }          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }          for (int b=0; b < bufferPoly.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            buffCoords=bufferPoly.getInteriorRingN(b).getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Interior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbPoly);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);          if (cancelOp) {            cancelOperation();            return;          }          n++;          progress=(int)(n * 100.0 / mpBuffer.getNumGeometries());          updateProgress("Creating new shapefile:",progress);        } else {        }      }    } else     if (buffer instanceof com.vividsolutions.jts.geom.Polygon) {      com.vividsolutions.jts.geom.Polygon pBuffer=(com.vividsolutions.jts.geom.Polygon)buffer;      com.vividsolutions.jts.geom.Geometry g=pBuffer.getGeometryN(0);      if (g instanceof com.vividsolutions.jts.geom.Polygon) {        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[pBuffer.getNumInteriorRing() + 1];        Coordinate[] buffCoords=pBuffer.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(buffCoords)) {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < pBuffer.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=pBuffer.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        output.addRecord(wbPoly);        Object[] rowData=new Object[1];        rowData[0]=new Double(1);        writer.addRecord(rowData);      } else {      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Channel retrieveChannelByName(String name,EList<Channel> channels){  for (  Channel channel : channels) {    if (channel.getName().equals(name)) {      return channel;    }  }  return null;}  }
class C{  public long commitIndex(){  return commitIndex;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public Employee(String name,String address,String phone,String email,int office,double salary){  super(name,address,phone,email);  this.office=office;  this.salary=salary;  this.dateHired=new MyDate();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.425 -0500",hash_original_method="C8D888449545672CEC46DD26E7BDDD9A",hash_generated_method="FAA67BE8147DD6AD9A8F1C202BD53E1E") private StructuredPostal(){}  }
class C{  public boolean isDragging(){  return this.dragging;}  }
class C{  public RegisterResponseMessage(RegisterResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public static List<UnManagedExportMask> findUnManagedExportMasksForCluster(URI clusterUri,DbClient dbClient){  _logger.info("finding unmanaged export masks for cluster " + clusterUri);  Set<URI> consistentUemUris=new HashSet<URI>();  List<URI> hostUris=ComputeSystemHelper.getChildrenUris(dbClient,clusterUri,Host.class,"cluster");  for (  URI hostUri : hostUris) {    _logger.info("   looking at host " + hostUri);    List<Initiator> initiators=ComputeSystemHelper.queryInitiators(dbClient,hostUri);    URIQueryResultList results=new URIQueryResultList();    for (    Initiator initiator : initiators) {      _logger.info("      looking at initiator " + initiator.getInitiatorPort());      dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedExportMaskKnownInitiatorConstraint(initiator.getInitiatorPort()),results);      if (results.iterator() != null) {        for (        URI uri : results) {          _logger.info("      found UnManagedExportMask " + uri);          consistentUemUris.add(uri);        }      }    }  }  _logger.info("   found {} UnManagedExportMasks for this cluster",consistentUemUris.size());  List<UnManagedExportMask> uems=new ArrayList<UnManagedExportMask>();  for (  URI uemUri : consistentUemUris) {    UnManagedExportMask uem=dbClient.queryObject(UnManagedExportMask.class,uemUri);    if (uem == null || uem.getInactive() == true) {      continue;    }    uems.add(uem);    _logger.info("      maskName: " + uem.getMaskName() + " nativeGuid: "+ uem.getNativeGuid());  }  return uems;}  }
class C{  private Iterator<BindingSet> joinBindingSetEntry(Map.Entry<String,BindingSet> entry){  List<Collection<BindingSet>> matches=new ArrayList<>();  if (type == HashJoinType.CONSTANT_JOIN_VAR) {    if (bindingJoinVarHash.containsKey(entry.getKey())) {      matches.add(bindingJoinVarHash.get(entry.getKey()));    }  } else {    List<String> valOrders=getValueOrders(entry.getKey());    for (    String s : valOrders) {      if (bindingJoinVarHash.containsKey(s)) {        matches.add(bindingJoinVarHash.get(s));      }    }  }  if (matches.size() == 0) {    return Collections.emptyIterator();  } else {    return new BindingSetCollectionsJoinIterator(entry.getValue(),matches);  }}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  @POST @Path("/{id}/deactivate") @CheckPermission(roles={Role.SECURITY_ADMIN}) public Response deactivateTenant(@PathParam("id") URI id){  TenantOrg tenant=getTenantById(id,true);  if (TenantOrg.isRootTenant(tenant)) {    throw APIException.badRequests.resourceCannotBeDeleted("Root tenant");  }  ArgValidator.checkReference(TenantOrg.class,id,checkForDelete(tenant));  _dbClient.markForDeletion(tenant);  recordOperation(OperationTypeEnum.DELETE_TENANT,tenant.getParentTenant().getURI(),tenant);  clearTenantACLs(VirtualPool.class,tenant.getId(),VirtualPool.Type.block.toString());  clearTenantACLs(VirtualPool.class,tenant.getId(),VirtualPool.Type.file.toString());  clearTenantACLs(VirtualArray.class,tenant.getId(),null);  return Response.ok().build();}  }
class C{  public void testOnSyncRetry_showsSpinner(){  mController.init();  mController.onSyncRetry();  verify(mMockFragmentUi,times(2)).showSpinner(true);}  }
class C{  public void remove(Account account){  Iterator<String> it=mMap.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    Log_OC.d("IndexedForest","Number of pending downloads= " + mMap.size());    if (key.startsWith(account.name)) {      mMap.remove(key);    }  }}  }
class C{  public void enable() throws IOException {  if (isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("false");    configuration.save();  }  FMLCommonHandler.instance().bus().register(this);}  }
class C{  public void logUnhandledFault(FaultException fault){  logInfo("Thrown unhandled fault: " + fault.faultName());}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  public static String TO_STRING(String txt){  return TO_STRING(txt,0);}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mPingReceiver != null)   unregisterReceiver(mPingReceiver);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {}  }
class C{  public void testPrivateMode() throws Exception {  processTest(DeploymentMode.PRIVATE);}  }
class C{  public RSASSAPSSparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  saltLength=DEFAULT_SALT_LENGTH;  trailerField=DEFAULT_TRAILER_FIELD;}  }
class C{  public CSelectionHistoryNodeWrapper(final CSelectionSnapshot snapshot,final int stateIndex){  m_operation=snapshot;  m_stateIndex=stateIndex;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putIA5String(uri.toASCIIString());}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  handler.removeMessages(SCROLL_WHAT);}  }
class C{  public void removeRepeatingExtension(Extension ext){  List<Extension> extList=repeatingExtensionMap.get(ext.getClass());  if (extList == null) {    return;  }  extList.remove(ext);}  }
class C{  public RegistrationException(String message,RegistrationExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  private static void generateWrongElem(int X,int minRun,List<Integer> runs){  for (int newTotal; X >= 2 * minRun + 1; X=newTotal) {    newTotal=X / 2 + 1;    if (3 * minRun + 3 <= X && X <= 4 * minRun + 1) {      newTotal=2 * minRun + 1;    } else     if (5 * minRun + 5 <= X && X <= 6 * minRun + 5) {      newTotal=3 * minRun + 3;    } else     if (8 * minRun + 9 <= X && X <= 10 * minRun + 9) {      newTotal=5 * minRun + 5;    } else     if (13 * minRun + 15 <= X && X <= 16 * minRun + 17) {      newTotal=8 * minRun + 9;    }    runs.add(0,X - newTotal);  }  runs.add(0,X);}  }
class C{  void processPhi(Instruction s){  Operand result=Phi.getResult(s);  if (!(result instanceof HeapOperand)) {    return;  }  HeapVariable<?> lhs=((HeapOperand<?>)result).value;  DF_LatticeCell A1=findOrCreateCell(lhs);  DF_LatticeCell[] rhs=new DF_LatticeCell[Phi.getNumberOfValues(s)];  for (int i=0; i < rhs.length; i++) {    HeapOperand<?> op=(HeapOperand<?>)Phi.getValue(s,i);    rhs[i]=findOrCreateCell(op.value);  }  newEquation(A1,MEET,rhs);}  }
class C{  protected byte readByteProtected(DataInputStream istream) throws java.io.IOException {  byte[] rcvBuffer=new byte[1];  while (true) {    int nchars;    nchars=istream.read(rcvBuffer,0,1);    if (nchars > 0) {      return rcvBuffer[0];    }  }}  }
class C{  public Set<AclEntryPermission> permissions(){  return new HashSet<AclEntryPermission>(perms);}  }
class C{  public static TaskState createTaskState(TaskStage stage){  TaskState tState=new TaskState();  tState.stage=stage;  return tState;}  }
class C{  public IOTask<Void> saveProfileTask(UserProfile profile){  log.debug(null);  return FS.writeDataTask(profile,profileDir() + PROFILE_FILE_NAME).then(null);}  }
class C{  public ColorAnimation(TimedElement timedElement,AnimatableElement animatableElement,int calcMode,float[] keyTimes,float[] keySplines,boolean additive,boolean cumulative,AnimatableValue[] values,AnimatableValue from,AnimatableValue to,AnimatableValue by){  super(timedElement,animatableElement,calcMode,keyTimes,keySplines,additive,cumulative,values,from,to,by);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  this(reader,line,new CSVParser(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace));}  }
class C{  public static <T>void writeArray(ObjectOutput out,T[] arr) throws IOException {  int len=arr == null ? 0 : arr.length;  out.writeInt(len);  if (arr != null && arr.length > 0)   for (  T t : arr)   out.writeObject(t);}  }
class C{  public static String[] addStringToArray(String[] array,String str){  if (ObjectUtils.isEmpty(array)) {    return new String[]{str};  }  String[] newArr=new String[array.length + 1];  System.arraycopy(array,0,newArr,0,array.length);  newArr[array.length]=str;  return newArr;}  }
class C{  public final void requestDelegPolicy(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   delegPolicyState=value;}  }
class C{  public static void delete(final String filePath){  if (filePath != null) {    File file=new File(filePath);    try {      delete(file);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  public Population(Iterable<? extends Solution> iterable){  this();  addAll(iterable);}  }
class C{  private void displayAppLicense(){  new AlertDialog.Builder(getActivity()).setMessage(R.string.app_license).setNeutralButton(R.string.i_agree,null).setCancelable(false).show();}  }
class C{  protected void clearOutEvents(){}  }
class C{  private void addInlineDefinitionTitle(String title,String anchor,MarkupDocBuilder docBuilder){  docBuilder.anchor(anchor);  docBuilder.newLine();  docBuilder.boldTextLine(title);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  for (int i=0; i < getNumNodes(); i++) {    buf.append("\n\nNode: ").append(getNode(i));    if (getNumParents(i) == 0) {      buf.append("\n");    } else {      buf.append("\n\n");      for (int k=0; k < getNumParents(i); k++) {        buf.append(getNode(getParent(i,k))).append("\t");      }    }    for (int j=0; j < getNumRows(i); j++) {      buf.append("\n");      for (int k=0; k < getNumParents(i); k++) {        buf.append(getParentValue(i,j,k));        if (k < getNumParents(i) - 1) {          buf.append("\t");        }      }      if (getNumParents(i) > 0) {        buf.append("\t");      }      for (int k=0; k < getNumColumns(i); k++) {        buf.append(nf.format(getProbability(i,j,k))).append("\t");      }    }  }  buf.append("\n");  return buf.toString();}  }
class C{  public void fill(GL2 gl){  int fSize=this.fixtures.size();  for (int i=0; i < fSize; i++) {    BodyFixture bodyFixture=this.getFixture(i);    Convex convex=bodyFixture.getShape();    RenderUtilities.fillShape(gl,convex);  }}  }
class C{  public JsonHttpResponseHandler(String encoding){  super(encoding);}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  static public String findInPath(String jarFile){  String path=System.getProperty("java.class.path");  String[] pathEntries=path.split(System.getProperty("path.separator"));  for (int i=0; i < pathEntries.length; i++) {    if (pathEntries[i].indexOf(jarFile) != -1)     return pathEntries[i];  }  path=System.getProperty("sun.boot.class.path");  pathEntries=path.split(System.getProperty("path.separator"));  for (int i=0; i < pathEntries.length; i++) {    if (pathEntries[i].indexOf(jarFile) != -1)     return pathEntries[i];  }  return null;}  }
class C{  public <T>T fromXML(final HierarchicalStreamDriver driver,final Reader xml) throws IOException, ClassNotFoundException {  return fromXML(driver,xml,PERMISSIONS);}  }
class C{  @Override public void acquire(){  while (isHeld) {    Trace.trace(Item.SCHEDULER,"Yielded onto lock queue ");    model.yield(waitList);  }  isHeld=true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_TITLE_SET,stack.getUIMgrSafe().getVideoFrame().getDVDTitle() + 1,1);  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static void hslToHsv(float[] inHsl,float[] outHsv){  outHsv[0]=inHsl[0];  float s=inHsl[1];  float l=inHsl[2] * 2;  if (l <= 1) {    s*=l;  } else {    s*=2 - l;  }  outHsv[1]=(2 * s) / (l + s);  outHsv[2]=(l + s) / 2;}  }
class C{  protected void printComponent(Component comp){  m_printJob.printComponent(getFrame(),comp,null);}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  if (w != oldw)   this.fitText(this.getText().toString(),w);}  }
class C{  public List<Triple> findCollidersUsingSepsets(SepsetProducer sepsetProducer,Graph graph,boolean verbose){  TetradLogger.getInstance().log("details","Starting Collider Orientation:");  List<Triple> colliders=new ArrayList<>();  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(b);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node a=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      List<Node> sepset=sepsetProducer.getSepset(a,c);      if (sepset == null)       continue;      if (!sepset.contains(b)) {        if (verbose) {          System.out.println("Collider orientation <" + a + ", "+ b+ ", "+ c+ "> sepset = "+ sepset);        }        colliders.add(new Triple(a,b,c));        TetradLogger.getInstance().log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(a,b,c,sepset));      }    }  }  TetradLogger.getInstance().log("details","Finishing Collider Orientation.");  return colliders;}  }
class C{  public void voice(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't set voice on null user");  setMode("+v " + user.getNick());}  }
class C{  public boolean addChild(E edge,V parent,V child){  Collection<V> vertices=delegate.getVertices();  if (vertices.contains(parent) == false) {    throw new IllegalArgumentException("Tree must already contain parent " + parent);  }  if (vertices.contains(child)) {    throw new IllegalArgumentException("Tree must not already contain child " + child);  }  vertex_depths.put(child,vertex_depths.get(parent) + 1);  return delegate.addEdge(edge,parent,child);}  }
class C{  public void drawEmphasizedText(Graphics g,Color foreground,Color emphasis,String s,int x,int y){  drawEmphasizedText(g,foreground,emphasis,s,-1,x,y);}  }
class C{  public ArrayOfDoublesUnion buildUnion(){  if (dstMem_ == null) {    return new HeapArrayOfDoublesUnion(nomEntries_,numValues_,seed_);  }  return new DirectArrayOfDoublesUnion(nomEntries_,numValues_,seed_,dstMem_);}  }
class C{  public void testCreateFile() throws Exception {  IgfsPath path=new IgfsPath("/asdf");  long max=100L * CFG_BLOCK_SIZE / WRITING_THREADS_CNT;  for (long size=0; size <= max; size=size * 15 / 10 + 1) {    assertTrue(F.isEmpty(fs.listPaths(IgfsPath.ROOT)));    testCreateFile(path,size,new Random().nextInt());  }}  }
class C{  protected void output(char[] chars,int start,int length) throws IOException {  if (!replaceEntities) {    super.output(chars,start,length);    return;  }  int last=start;  length+=start;  for (int counter=start; counter < length; counter++) {switch (chars[counter]) {case '<':      if (counter > last) {        super.output(chars,last,counter - last);      }    last=counter + 1;  output("&lt;");break;case '>':if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&gt;");break;case '&':if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&amp;");break;case '"':if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&quot;");break;case '\n':case '\t':case '\r':break;default :if (chars[counter] < ' ' || chars[counter] > 127) {if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&#");output(String.valueOf((int)chars[counter]));output(";");}break;}}if (last < length) {super.output(chars,last,length - last);}}  }
class C{  public StackedLayout(Orientation orientation,double gapX,double gapY){  super(orientation,gapX,gapY);  defaultConstraints=new Constraints(true,0.5,0.5);}  }
class C{  FilePreferencesImpl(boolean userNode){  super(null,"");  this.userNode=userNode;  path=userNode ? USER_HOME : SYSTEM_HOME;  initPrefs();}  }
class C{  public static <I,A>Parser<I,IList<A>> many1(Parser<I,A> p){  return bind(p,null);}  }
class C{  public Object createOutboundImplementation(final Object implementor,final Class<?>[] interfaces){  assertGameNotOver();  final InvocationHandler ih=null;  return Proxy.newProxyInstance(implementor.getClass().getClassLoader(),interfaces,ih);}  }
class C{  public In(String s){  try {    File file=new File(s);    if (file.exists()) {      scanner=new Scanner(file,CHARSET_NAME);      scanner.useLocale(LOCALE);      return;    }    URL url=getClass().getResource(s);    if (url == null) {      url=new URL(s);    }    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + s);  }}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getWifiP2pDevice() == null) {    return this.getWifiP2pDevice() == null;  }  return ((PeerNetwork)other).getWifiP2pDevice().equals(this.getWifiP2pDevice());}  }
class C{  public static void cursorIntToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getInt(index));  }}  }
class C{  @Pure @CausesError({MissingImmutableParameterCheckException.class,PureMethodParameterNotImmutableException.class}) public static String testParam4Bad(Object in1,Object in2){  Pure4J.immutable(in1);  return in1.toString() + in2.toString();}  }
class C{  public void reconnect(){  logger.info(String.format("Attempt to refresh connection to RecoverPoint at %s",this.getEndpoint()));  try {    this.setFunctionalAPI(null);    FunctionalAPIImpl impl=new RecoverPointConnection().connect(this.getEndpoint(),this.getUsername(),this.getPassword());    this.setFunctionalAPI(impl);    this.ping();    logger.info("Connection refreshed.");  } catch (  Exception e) {    logger.error("Received " + e.toString() + ". Failed to refresh RP connection: "+ this.getEndpoint().toString()+ ", Cause: "+ RecoverPointClient.getCause(e));    throw RecoverPointException.exceptions.failedToPingMgmtIP(this.getEndpoint().toString(),RecoverPointClient.getCause(e));  }}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public boolean hasSessionTicket(){  return ticket != null;}  }
class C{  private static int findMnemonicInt(String s){  for (int i=0; i < s.length() - 1; i++) {    if (s.charAt(i) == '&') {      if (s.charAt(i + 1) != '&') {        return lookupMnemonicInt(s.substring(i + 1,i + 2));      } else {        i++;      }    }  }  return 0;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__COMMENT_1:    return ((InternalEList<?>)getComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__STATE_1:  return ((InternalEList<?>)getState_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean check(Rule enclosingRule,ATNState s,Set<ATNState> visitedStates){  if (s instanceof RuleStopState)   return true;  if (visitedStates.contains(s))   return false;  visitedStates.add(s);  int n=s.getNumberOfTransitions();  boolean stateReachesStopState=false;  for (int i=0; i < n; i++) {    Transition t=s.transition(i);    if (t instanceof RuleTransition) {      RuleTransition rt=(RuleTransition)t;      Rule r=g.getRule(rt.ruleIndex);      if (rulesVisitedPerRuleCheck.contains((RuleStartState)t.target)) {        addRulesToCycle(enclosingRule,r);      } else {        rulesVisitedPerRuleCheck.add((RuleStartState)t.target);        boolean nullable=check(r,t.target,new HashSet<ATNState>());        rulesVisitedPerRuleCheck.remove((RuleStartState)t.target);        if (nullable) {          stateReachesStopState|=check(enclosingRule,rt.followState,visitedStates);        }      }    } else     if (t.isEpsilon()) {      stateReachesStopState|=check(enclosingRule,t.target,visitedStates);    }  }  return stateReachesStopState;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public int index(Node element){  int index=0;  for (  Node node : nodes) {    if (node == element) {      return index;    }    index++;  }  return -1;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_CASE_DEF___TRACECASE_NAME_1:    setTracecase_name_1((String)newValue);  return;case UmplePackage.TRACE_CASE_DEF___TRACE_DIRECTIVE_1:getTraceDirective_1().clear();getTraceDirective_1().addAll((Collection<? extends TraceDirective_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void launchExplorer(File file) throws IOException, SecurityException {  if (OSUtils.isWindows()) {    String explorePath=file.getPath();    try {      explorePath=file.getCanonicalPath();    } catch (    IOException ignored) {    }    if (file.isDirectory()) {      LimeProcess.exec(new String[]{"explorer",explorePath});    } else {      LimeProcess.exec(new String[]{"explorer","/select,",explorePath});    }  } else   if (OSUtils.isMacOSX()) {    LimeProcess.exec(selectFileCommand(file));  } else   if (OSUtils.isLinux()) {    if (file.isDirectory()) {      Desktop.getDesktop().open(file);    } else     if (file.isFile()) {      Desktop.getDesktop().open(file.getParentFile());    }  }}  }
class C{  public static boolean hasPermission(CordovaPlugin plugin,String permission){  try {    Method hasPermission=CordovaInterface.class.getDeclaredMethod("hasPermission",String.class);    return (Boolean)hasPermission.invoke(plugin.cordova,permission);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to check for permission " + permission);    return true;  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when checking permission " + permission,illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when checking permission " + permission,invocationTargetException);  }  return false;}  }
class C{  public static short toShort(NibbleArray nibbles,int start){  return toShort(nibbles.get(start),nibbles.get(start + 1),nibbles.get(start + 2),nibbles.get(start + 3));}  }
class C{  public long lengthSquared(){  return x * x + y * y + z * z;}  }
class C{  public Object visit(ASTSubtractNode node,Object data){  return showNode(node,data);}  }
class C{  @Override public String toString(){  return content;}  }
class C{  private boolean isValidParentId(int parentId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tblName=table.getDirTableName();    qual=table.getLoadDirQual(parentId);    if (parentId == 0)     valid=true; else {      count=DbSelectFns.selectCount(dbConn,tblName,qual);      if (count > 0)       valid=true;    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  public synchronized boolean isStopped(){  return this.stopped;}  }
class C{  public static int perform(BodyDeclaration declaration){  Assert.isTrue(declaration != null);switch (declaration.getNodeType()) {case ASTNode.METHOD_DECLARATION:case ASTNode.FIELD_DECLARATION:case ASTNode.INITIALIZER:    return internalPerform(declaration);default :  throw new IllegalArgumentException(declaration.toString());}}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x6FE062D1,version=150) public int sceIdStorageLookup(int key,int offset,TPointer buffer,int length){  buffer.clear(length);  return 0;}  }
class C{  public T caseMappingModel(MappingModel object){  return null;}  }
class C{  private void subscribeAction(Bundle data){  IMqttToken token=removeMqttToken(data);  simpleAction(token,data);}  }
class C{  public XMLParser(final Class classToBeBound) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(classToBeBound.getPackage().getName());    marshaller=jc.createMarshaller();    unmarshaller=jc.createUnmarshaller();  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + classToBeBound,e);  }}  }
class C{  public NotificationChain basicSetNestedPattern(BindingPattern newNestedPattern,NotificationChain msgs){  BindingPattern oldNestedPattern=nestedPattern;  nestedPattern=newNestedPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINDING_ELEMENT__NESTED_PATTERN,oldNestedPattern,newNestedPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static void toggleRegularExpressionSearch(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01757: Graph argument can not be null");  graph.getSettings().getSearchSettings().setSearchRegEx(!graph.getSettings().getSearchSettings().getSearchRegEx());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof String)   return sage.plugin.CorePluginManager.getInstance().getAllRepoVersions(o.toString()); else   if (o instanceof sage.plugin.PluginWrapper)   return sage.plugin.CorePluginManager.getInstance().getAllRepoVersions(((sage.plugin.PluginWrapper)o).getId()); else   return null;}  }
class C{  private void init(){  last=srcId;  tag=CloudSimTags.INFOPKT_SUBMIT;  bandwidth=-1;  hopsNumber=0;  pingSize=size;  if (name != null) {    entities=new Vector<Integer>();    entryTimes=new Vector<Double>();    exitTimes=new Vector<Double>();    baudRates=new Vector<Double>();    num=new DecimalFormat("#0.000#");  }}  }
class C{  @SuppressWarnings("unchecked") static <T>void mergeInto(final ItemsSketch<T> source,final ItemsSketch<T> target){  final int srcK=source.getK();  final int tgtK=target.getK();  final long srcN=source.getN();  final long tgtN=target.getN();  if (srcK != tgtK) {    ItemsUtil.downSamplingMergeInto(source,target);    return;  }  final Object[] srcLevels=source.getCombinedBuffer();  final Object[] srcBaseBuffer=srcLevels;  final long nFinal=tgtN + srcN;  for (int i=0; i < source.getBaseBufferCount(); i++) {    target.update((T)srcBaseBuffer[i]);  }  ItemsUtil.maybeGrowLevels(nFinal,target);  final Object[] scratchBuf=new Object[2 * tgtK];  long srcBitPattern=source.getBitPattern();  assert srcBitPattern == (srcN / (2L * srcK));  for (int srcLvl=0; srcBitPattern != 0L; srcLvl++, srcBitPattern>>>=1) {    if ((srcBitPattern & 1L) > 0L) {      ItemsUtil.inPlacePropagateCarry(srcLvl,(T[])srcLevels,(2 + srcLvl) * tgtK,(T[])scratchBuf,0,false,target);    }  }  target.n_=nFinal;  assert target.getN() / (2 * tgtK) == target.getBitPattern();  final T srcMax=source.getMaxValue();  final T srcMin=source.getMinValue();  final T tgtMax=target.getMaxValue();  final T tgtMin=target.getMinValue();  if (source.getComparator().compare(srcMax,tgtMax) > 0) {    target.maxValue_=srcMax;  }  if (source.getComparator().compare(srcMin,tgtMin) < 0) {    target.minValue_=srcMin;  }}  }
class C{  public static LoggingEvent decodeFromMap(Map<String,Object> loggingEventMap){  throw new UnsupportedOperationException("Unable to decode LoggingEvents.");}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzLexicalState=YYINITIAL;}  }
class C{  void hide(){  selectItem(null,false);  xSetVisible(false);}  }
class C{  public TwoRegisterDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal,int a,int b){  super(format,opcode,index,indexType,target,literal);  this.a=a;  this.b=b;}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else {    throw new IllegalArgumentException(request + " not supported (CrossValidation)");  }}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public void removeVetoableChangeListener(String name,java.beans.VetoableChangeListener vcl){}  }
class C{  public void writeByte(byte b,boolean append){  writeByteArray(new byte[]{b},append);}  }
class C{  public boolean makeVNXFileSubscription(String storageSystemURI){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  boolean isSuccess=false;  if (isCompatibleDevice(storageSystemURI) && isSMISProviderConnected(storageSystemURI)) {    _logger.debug("Storage System(vnx file) delete stale subscription status: {}",_connectionFactory.deleteVnxFileStaleSubscriptions(storageSystemURI));    isSuccess=_connectionFactory.subscribeVnxFileForIndication(storageSystemURI);    _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  }  return isSuccess;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clear(){  this.referent=null;}  }
class C{  public final ConnectionProtocol connProtocol(){  return _protocol;}  }
class C{  @Override public boolean handleActivity(MobsimAgent agent){  if (agent.getActivityEndTime() == Double.POSITIVE_INFINITY) {    internalInterface.getMobsim().getAgentCounter().decLiving();  } else   if (agent.getActivityEndTime() <= internalInterface.getMobsim().getSimTimer().getTimeOfDay() && !beforeFirstSimStep) {    agent.endActivityAndComputeNextState(internalInterface.getMobsim().getSimTimer().getTimeOfDay());    internalInterface.arrangeNextAgentState(agent);  } else {    activityEndsList.add(new AgentEntry(agent,agent.getActivityEndTime()));    internalInterface.registerAdditionalAgentOnLink(agent);  }  return true;}  }
class C{  public static Element newElement(String elementName,Element parentElement){  return parentElement.getOwnerDocument().createElement(elementName);}  }
class C{  public MessageRecord(String qid,String msg,String sig,boolean response,ClientId clientId){  this.queryId=qid;  this.message=msg;  this.signature=sig;  this.response=response;  this.memberClass=clientId.getMemberClass();  this.memberCode=clientId.getMemberCode();  this.subsystemCode=clientId.getSubsystemCode();}  }
class C{  public static boolean intersects(double tx,double ty,double tw,double th,double x,double y,double width,double height){  double rw=width;  double rh=height;  if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {    return false;  }  double rx=x;  double ry=y;  rw+=rx;  rh+=ry;  tw+=tx;  th+=ty;  return ((rw < rx || rw > tx) && (rh < ry || rh > ty) && (tw < tx || tw > rx)&& (th < ty || th > ry));}  }
class C{  public boolean hasFeaturedDateExt(){  return hasExtension(GphotoFeaturedDate.class);}  }
class C{  public static void launchRcsCoreService(Context context,RcsSettings rcsSettings){  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.debug("Launch core service");  }  if (!rcsSettings.isServiceActivated()) {    if (logActivated) {      sLogger.debug("RCS service is disabled");    }    return;  }  if (!rcsSettings.isUserProfileConfigured()) {    if (logActivated) {      sLogger.debug("RCS service not configured");    }    return;  }  TermsAndConditionsResponse tcResponse=rcsSettings.getTermsAndConditionsResponse();  if (TermsAndConditionsResponse.ACCEPTED != tcResponse) {    if (logActivated) {      sLogger.debug("Terms and conditions response: ".concat(tcResponse.name()));    }    return;  }  context.startService(new Intent(context,RcsCoreService.class));}  }
class C{  public ClasspathEntry(int contentKind,int entryKind,IPath path,IPath[] inclusionPatterns,IPath[] exclusionPatterns,IPath sourceAttachmentPath,IPath sourceAttachmentRootPath,IPath specificOutputLocation,IClasspathEntry referencingEntry,boolean isExported,IAccessRule[] accessRules,boolean combineAccessRules,IClasspathAttribute[] extraAttributes){  this.contentKind=contentKind;  this.entryKind=entryKind;  this.path=path;  this.inclusionPatterns=inclusionPatterns;  this.exclusionPatterns=exclusionPatterns;  this.referencingEntry=referencingEntry;  int length;  if (accessRules != null && (length=accessRules.length) > 0) {    AccessRule[] rules=new AccessRule[length];    System.arraycopy(accessRules,0,rules,0,length);    byte classpathEntryType;    String classpathEntryName;    JavaModelManager manager=JavaModelManager.getJavaModelManager();    if (this.entryKind == CPE_PROJECT || this.entryKind == CPE_SOURCE) {      classpathEntryType=AccessRestriction.PROJECT;      classpathEntryName=manager.intern(getPath().segment(0));    } else {      classpathEntryType=AccessRestriction.LIBRARY;      classpathEntryName=manager.intern(path.toOSString());    }    this.accessRuleSet=new AccessRuleSet(rules,classpathEntryType,classpathEntryName);  }  this.combineAccessRules=combineAccessRules;  this.extraAttributes=extraAttributes;  if (inclusionPatterns != INCLUDE_ALL && inclusionPatterns.length > 0) {    this.fullInclusionPatternChars=UNINIT_PATTERNS;  }  if (exclusionPatterns.length > 0) {    this.fullExclusionPatternChars=UNINIT_PATTERNS;  }  this.sourceAttachmentPath=sourceAttachmentPath;  this.sourceAttachmentRootPath=sourceAttachmentRootPath;  this.specificOutputLocation=specificOutputLocation;  this.isExported=isExported;}  }
class C{  public static double SSrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  int confusionMatrix[]=getConfusionMatrixValues(useTrainingData,ind,chromosomeNum);  int truePositives=confusionMatrix[0];  int falseNegatives=confusionMatrix[1];  int falsePositives=confusionMatrix[2];  int trueNegatives=confusionMatrix[3];  int TPplusFN=truePositives + falseNegatives;  int TNplusFP=trueNegatives + falsePositives;  if (TPplusFN == 0 || TNplusFP == 0)   return 0.0;  double SE=(double)truePositives / (double)TPplusFN;  double SP=(double)trueNegatives / (double)TNplusFP;  return (SE * SP);}  }
class C{  public static int installSilent(Context context,String filePath){  return installSilent(context,filePath," -r " + getInstallLocationParams());}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  protected BlockImpl(){  super();}  }
class C{  public PaymentDataException(String message){  super(message);}  }
class C{  public double remove(float key){  double prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public void addItem(String item,int index){  add(item,index);}  }
class C{  protected StringPropertyMatcher(String propertyName,Mode mode,Boolean ignoreCase,String expectedPattern,Function<Issue,String> getActualValue){  super(propertyName);  this.mode=mode;  this.ignoreCase=Objects.requireNonNull(ignoreCase);  this.expectedPattern=safeGetValue(expectedPattern);  this.getActualValue=Objects.requireNonNull(getActualValue);}  }
class C{  public void readGenotype(final EvolutionState state,final DataInput dataInput) throws IOException {  int len=dataInput.readInt();  if (rulesets == null || rulesets.length != len)   state.output.fatal("Number of RuleSets differ in RuleIndividual when reading from readGenotype(EvolutionState, DataInput).");  for (int x=0; x < rulesets.length; x++)   rulesets[x].readRuleSet(state,dataInput);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  private String extractCollisionProbability(String outputMessage){  String result="";  int valIndex;  int endValIndex;  int startIndex=0;  String[] labels={"calculated: ",",  observed: "};  for (int i=0; i < 2; i++) {    result=result + labels[i];    valIndex=outputMessage.indexOf(" val = ",startIndex);    if (valIndex > 0) {      startIndex=valIndex + 7;      endValIndex=startIndex;      while (endValIndex < outputMessage.length() && (!Character.isWhitespace(outputMessage.charAt(endValIndex)))) {        endValIndex++;      }      result=result + outputMessage.substring(startIndex,endValIndex);      startIndex=endValIndex;    }  }  return result;}  }
class C{  public FBMaintenanceManager(GDSType gdsType){  super(gdsType);}  }
class C{  public CCache(String name,int initialCapacity,int expireMinutes){  super(initialCapacity);  m_name=name;  setExpireMinutes(expireMinutes);  CacheMgt.get().register(this);}  }
class C{  public ParameterList_ createParameterList_(){  ParameterList_Impl parameterList_=new ParameterList_Impl();  return parameterList_;}  }
class C{  protected void shutdown(){  alert[0]=0;  alert[1]=0;  recordProtocol=null;}  }
class C{  public static Set<String> loadStopWords(Locale locale) throws IOException {  String streamName="/stoplists/" + locale.getLanguage() + ".txt";  InputStream stream=Utils.class.getResourceAsStream(streamName);  if (stream == null) {    throw new IOException("Stream " + streamName + " not found");  }  List<String> stopList=IOUtils.readLines(stream);  return new HashSet<>(stopList);}  }
class C{  public JCAnnotation Annotation(Attribute a){  return annotationBuilder.translate((Attribute.Compound)a);}  }
class C{  @Override public void publishEvent(final ChatEvent event){  if (chatService != null) {    GameBotParseResults gameBotResults=gameBotParser.parse(event);    if (gameBotResults != null) {      if (!gameBotResults.isIncomplete()) {        if (gameBotResults.isPlayerInDb()) {          gameBotService.fireGameBotPageArrived(gameBotResults.getRows(),gameBotResults.hasNextPage);        } else {          gameBotService.fireGameBotPlayerNotInDb(gameBotResults.playerName);        }      }      return;    }    if (event.getType() == ChatType.PARTNERSHIP_CREATED) {      if (getPreferences().getBoolean(PreferenceKeys.FICS_SHOW_BUGBUTTONS_ON_PARTNERSHIP)) {        SWTUtils.openBugButtonsWindowItem(this);      }      if (getPreferences().getBoolean(PreferenceKeys.BUGHOUSE_SHOW_BUGWHO_ON_PARTNERSHIP)) {        SWTUtils.openBugWhoWindowItem(this);      }    } else     if (event.getType() == ChatType.PARTNERSHIP_DESTROYED) {      isSimulBugConnector=false;      simulBugPartnerName=null;      if (LOG.isDebugEnabled()) {        LOG.debug("Partnership destroyed. Resetting partnership information.");      }      RaptorWindowItem[] windowItems=Raptor.getInstance().getWindow().getWindowItems(BugButtonsWindowItem.class);      for (      RaptorWindowItem item : windowItems) {        BugButtonsWindowItem bugButtonsItem=(BugButtonsWindowItem)item;        if (bugButtonsItem.getConnector() == this) {          Raptor.getInstance().getWindow().disposeRaptorWindowItem(bugButtonsItem);        }      }    }    super.publishEvent(event);  }}  }
class C{  public boolean hasCircularReference(){  return recursiveCircularReferenceCheck(parent);}  }
class C{  public static boolean removeLockFile(FileSystem fs,Path lockFile) throws IOException {  if (!fs.exists(lockFile))   return false;  if (fs.getFileStatus(lockFile).isDir())   throw new IOException("lock file " + lockFile + " exists but is a directory!");  return fs.delete(lockFile,false);}  }
class C{  public DefaultHttpHeaders(boolean validate,int initialCapacity){  this(validate,initialCapacity,false);}  }
class C{  public void testMultipleDirectedRelationFinderToString(){  String callString="(called,caller,F)";  String classString="(class,package,R)";  String extendsString="(extends,super,F,R)";  String interfaceString="";  assertMultipleDirectedRelationFinderToStringIsCorrect(MockRelation.CALL,true,false,callString);  assertMultipleDirectedRelationFinderToStringIsCorrect(MockRelation.CLASS,false,true,classString);  assertMultipleDirectedRelationFinderToStringIsCorrect(MockRelation.EXTENDS,true,true,extendsString);  assertMultipleDirectedRelationFinderToStringIsCorrect(MockRelation.INTERFACE_EXTENDS,false,false,interfaceString);}  }
class C{  public Kursawe(int numberOfVariables){  this(numberOfVariables,-5.0,5.0);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object data=stack.pop();  Object icon=stack.pop();  Object thumb=stack.pop();  String secondary=getString(stack);  String primary=getString(stack);  return new StaticMediaNode(primary,secondary,thumb,icon,data);}  }
class C{  @Override public void readFromNBT(NBTTagCompound par1NBTTagCompound){  super.readFromNBT(par1NBTTagCompound);  this.tier=par1NBTTagCompound.getInteger("tier");}  }
class C{  public static Object[] parseDataObject(String in) throws DMLRuntimeException {  Object[] ret=new Object[2];  StringTokenizer st=new StringTokenizer(in,DATA_FIELD_DELIM);  String name=st.nextToken();  DataType datatype=DataType.valueOf(st.nextToken());  ValueType valuetype=ValueType.valueOf(st.nextToken());  String valString=st.hasMoreTokens() ? st.nextToken() : "";  Data dat=null;switch (datatype) {case SCALAR:{switch (valuetype) {case INT:        long value1=Long.parseLong(valString);      dat=new IntObject(name,value1);    break;case DOUBLE:  double value2=Double.parseDouble(valString);dat=new DoubleObject(name,value2);break;case BOOLEAN:boolean value3=Boolean.parseBoolean(valString);dat=new BooleanObject(name,value3);break;case STRING:dat=new StringObject(name,valString);break;default :throw new DMLRuntimeException("Unable to parse valuetype " + valuetype);}break;}case MATRIX:{MatrixObject mo=new MatrixObject(valuetype,valString);long rows=Long.parseLong(st.nextToken());long cols=Long.parseLong(st.nextToken());int brows=Integer.parseInt(st.nextToken());int bcols=Integer.parseInt(st.nextToken());long nnz=Long.parseLong(st.nextToken());InputInfo iin=InputInfo.stringToInputInfo(st.nextToken());OutputInfo oin=OutputInfo.stringToOutputInfo(st.nextToken());PDataPartitionFormat partFormat=PDataPartitionFormat.valueOf(st.nextToken());UpdateType inplace=UpdateType.valueOf(st.nextToken());MatrixCharacteristics mc=new MatrixCharacteristics(rows,cols,brows,bcols,nnz);MatrixFormatMetaData md=new MatrixFormatMetaData(mc,oin,iin);mo.setMetaData(md);mo.setVarName(name);if (partFormat != PDataPartitionFormat.NONE) mo.setPartitioned(partFormat,-1);mo.setUpdateType(inplace);dat=mo;break;}default :throw new DMLRuntimeException("Unable to parse datatype " + datatype);}ret[0]=name;ret[1]=dat;return ret;}  }
class C{  @Override protected boolean isTokenChar(int c){  return !UnicodeProps.WHITESPACE.get(c);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY:    return getBody();case N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK:  return get_lok();case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_TYPE:if (resolve) return getDefinedType();return basicGetDefinedType();case N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS:return getFpars();case N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF:return getReturnTypeRef();case N4JSPackage.PROPERTY_METHOD_DECLARATION__GENERATOR:return isGenerator();case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_ASYNC:return isDeclaredAsync();case N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS:return getTypeVars();case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF:return getDeclaredTypeRef();case N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF:return getBogusTypeRef();case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_METHOD:if (resolve) return getDefinedMethod();return basicGetDefinedMethod();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void loadPlaceNames(){  TextAttributes placeAttrs=new TextAttributes().setTypeface(Typeface.DEFAULT_BOLD).setTextSize(28f).setTextOffset(Offset.bottomRight());  TextAttributes lakeAttrs=new TextAttributes().setTypeface(Typeface.create("serif",Typeface.BOLD_ITALIC)).setTextSize(32f).setTextColor(new Color(0f,1f,1f,0.70f)).setTextOffset(Offset.center());  BufferedReader reader=null;  try {    InputStream in=getResources().openRawResource(R.raw.world_placenames);    reader=new BufferedReader(new InputStreamReader(in));    String line=reader.readLine();    List<String> headers=Arrays.asList(line.split(","));    final int LAT=headers.indexOf("LAT");    final int LON=headers.indexOf("LON");    final int NAM=headers.indexOf("PLACE_NAME");    while ((line=reader.readLine()) != null) {      String[] fields=line.split(",");      Label label=new Label(Position.fromDegrees(Double.parseDouble(fields[LAT]),Double.parseDouble(fields[LON]),0),fields[NAM],fields[NAM].contains("Lake") ? lakeAttrs : placeAttrs);      label.setDisplayName(label.getText());      publishProgress(label);      this.numPlacesCreated++;    }  } catch (  IOException e) {    Logger.log(Logger.ERROR,"Exception attempting to read/parse world_placenames file.");  } finally {    WWUtil.closeSilently(reader);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void close(Closeable closeable){  if (closeable != null) {    if (closeable instanceof Flushable) {      try {        ((Flushable)closeable).flush();      } catch (      IOException ignored) {      }    }    try {      closeable.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public Cursor query(int limit){  return query(null,limit);}  }
class C{  public void testWrite() throws Exception {  File f=this.initFile("testWrite");  BufferedFileDataOutput bfdo=new BufferedFileDataOutput(f);  bfdo.writeByte((byte)1);  bfdo.writeByte(Byte.MAX_VALUE);  bfdo.writeByte(Byte.MIN_VALUE);  assertEquals("Size after bytes",3,bfdo.getOffset());  bfdo.writeShort((short)2);  bfdo.writeShort(Short.MAX_VALUE);  bfdo.writeShort(Short.MIN_VALUE);  assertEquals("Size after shorts",9,bfdo.getOffset());  bfdo.writeInt(3);  bfdo.writeInt(Integer.MAX_VALUE);  bfdo.writeInt(Integer.MIN_VALUE);  assertEquals("Size after ints",21,bfdo.getOffset());  bfdo.writeLong(4);  bfdo.writeLong(Long.MAX_VALUE);  bfdo.writeLong(Long.MIN_VALUE);  assertEquals("Size after longs",45,bfdo.getOffset());  byte[] byteArray=new byte[10];  for (int i=0; i < byteArray.length; i++)   byteArray[i]=(byte)i;  bfdo.write(byteArray);  assertEquals("Size after byte array",55,bfdo.getOffset());  bfdo.fsync();  bfdo.close();  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  assertEquals("byte 1",1,bfdi.readByte());  assertEquals("byte 2",Byte.MAX_VALUE,bfdi.readByte());  assertEquals("byte 3",Byte.MIN_VALUE,bfdi.readByte());  assertEquals("Should be at offset 3",3,bfdi.getOffset());  assertEquals("short 1",2,bfdi.readShort());  assertEquals("short 2",Short.MAX_VALUE,bfdi.readShort());  assertEquals("short 3",Short.MIN_VALUE,bfdi.readShort());  assertEquals("Should be at offset 9",9,bfdi.getOffset());  assertEquals("int 1",3,bfdi.readInt());  assertEquals("int 2",Integer.MAX_VALUE,bfdi.readInt());  assertEquals("int 3",Integer.MIN_VALUE,bfdi.readInt());  assertEquals("Should be at offset 21",21,bfdi.getOffset());  assertEquals("long 1",4,bfdi.readLong());  assertEquals("long 2",Long.MAX_VALUE,bfdi.readLong());  assertEquals("long 3",Long.MIN_VALUE,bfdi.readLong());  assertEquals("Should be at offset 45",45,bfdi.getOffset());  byte[] myBytes=new byte[10];  bfdi.readFully(myBytes);  for (int i=0; i < byteArray.length; i++) {    assertEquals("byte: " + i,byteArray[i],myBytes[i]);  }  assertEquals("Should be at offset 55",55,bfdi.getOffset());  bfdi.close();}  }
class C{  private void manipulateLicenseResponse(Map<String,String> result){  String responseStatus;  CommonDialogUtils.stopProgressDialog(progressDialog);  if (result != null) {    responseStatus=result.get(Constants.STATUS);    if (Constants.Status.SUCCESSFUL.equals(responseStatus)) {      String licenseAgreement=result.get(Constants.RESPONSE);      if (licenseAgreement != null) {        Preference.putString(context,getResources().getString(R.string.shared_pref_eula),licenseAgreement);        showAgreement(licenseAgreement,Constants.EULA_TITLE);      } else {        CommonUtils.clearClientCredentials(context);        showErrorMessage(getResources().getString(R.string.error_enrollment_failed_detail),getResources().getString(R.string.error_enrollment_failed));      }    } else     if (Constants.Status.INTERNAL_SERVER_ERROR.equals(responseStatus)) {      CommonUtils.clearClientCredentials(context);      showInternalServerErrorMessage();    } else     if (Constants.Status.UNAUTHORIZED.equals(responseStatus)) {      String response=result.get(Constants.RESPONSE);      Log.e(TAG,"Unauthorized :" + response);      showEnrollementFailedErrorMessage();    } else {      CommonUtils.clearClientCredentials(context);      showEnrollementFailedErrorMessage();    }  } else {    CommonUtils.clearClientCredentials(context);    showEnrollementFailedErrorMessage();  }}  }
class C{  public static String fromTag(IntTag tag){  return String.valueOf(tag.getValue());}  }
class C{  public Schema(){  this(10);}  }
class C{  private void addBugCodes(Set<String> bugCodeSet){  Element root=document.getRootElement();  for (  String bugCode : bugCodeSet) {    Element element=root.addElement("BugCode");    element.addAttribute("abbrev",bugCode);    Element description=element.addElement("Description");    description.setText(I18N.instance().getBugTypeDescription(bugCode));  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void validateArrayUniqueId(java.lang.String[] param){}  }
class C{  public static boolean startsWithChar(String s,char c){  if (s.length() == 0) {    return false;  }  return s.charAt(0) == c;}  }
class C{  @RequestMapping(value="/fe/taxreceipts/process/donate") public ResponseEntity<String> processDonate(@RequestParam(value="cnpj") String cnpj,@RequestParam(value="date") Date date,@RequestParam(value="coo") String coo,@RequestParam(value="total") double total,@RequestParam(value="transactionId") String transactionId){  HttpHeaders responseHeaders=super.createBasicHttpHeaderResponse(APPLICATION_JSON);  Gson gson=new Gson();  ResultResponse resultResponse;  try {    Assert.isTrue(StringUtils.validateCNPJ(cnpj));    Assert.notNull(coo);    Assert.isTrue(StringUtils.isNumeric(coo));    Assert.isTrue(total != 0);    Assert.notNull(transactionId);    Assert.isTrue(!transactionId.equals(""));    OCRTransaction ocrTransaction=ocrTransactionDAO.findById(new OCRTransaction(transactionId));    Assert.notNull(ocrTransaction);    TaxReceipt taxReceipt=new TaxReceipt();    taxReceipt.setCnpj(cnpj.replaceAll("[^\\d]",""));    taxReceipt.setDate(date);    taxReceipt.setCoo(coo);    taxReceipt.setTotal(total);    taxReceipt.setS3Object(ocrTransaction.getS3Object());    taxReceipt.setDateInsertion(new Date());    taxReceiptDAO.save(taxReceipt);    ocrTransactionDAO.remove(ocrTransaction);    resultResponse=new ResultResponse(true);  } catch (  Exception ex) {    ex.printStackTrace();    resultResponse=new ResultResponse(false);  }  return new ResponseEntity<>(gson.toJson(resultResponse),responseHeaders,HttpStatus.OK);}  }
class C{  public HostAddress searchByStartName(Protocol secondaryProtocol,List<HostAddress> loopAddress){  if (!isSecondaryHostFail()) {    int checkWriterAttempts=3;    HostAddress currentWriter=null;    do {      try {        currentWriter=searchForMasterHostAddress(secondaryProtocol,loopAddress);      } catch (      QueryException qe) {        if (proxy.hasToHandleFailover(qe) && setSecondaryHostFail()) {          addToBlacklist(secondaryProtocol.getHostAddress());          return null;        }      }      checkWriterAttempts--;    } while (currentWriter == null && checkWriterAttempts > 0);    if (currentWriter == null && getClusterHostAddress() != null) {      AuroraProtocol possibleMasterProtocol=AuroraProtocol.getNewProtocol(getProxy(),getUrlParser());      possibleMasterProtocol.setHostAddress(getClusterHostAddress());      try {        possibleMasterProtocol.connect();        possibleMasterProtocol.setMustBeMasterConnection(true);        foundActiveMaster(possibleMasterProtocol);      } catch (      QueryException qe) {        if (proxy.hasToHandleFailover(qe)) {          addToBlacklist(possibleMasterProtocol.getHostAddress());        }      }    }    return currentWriter;  }  return null;}  }
class C{  public boolean isProposal(){  return DOCSUBTYPESO_Proposal.equals(getDocSubTypeSO()) && DOCBASETYPE_SalesOrder.equals(getDocBaseType());}  }
class C{  public int countStreamHosts(){  return streamHosts.size();}  }
class C{  private void assertNodesAreEquivalent(File expected,Node actual) throws ParserConfigurationException, IOException, SAXException, XmlPullParserException {  Node expectedNode=fileToResultNode(expected);  String expectedString=nodeToNormalizedString(expectedNode);  String actualString=nodeToNormalizedString(actual);  Assert.assertEquals("Expected XML to match file " + expected,expectedString,actualString);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }}  }
class C{  private static PlatformCacheExtension[] prepareCacheExtensions(Collection<PlatformCacheExtension> cacheExts){  if (!F.isEmpty(cacheExts)) {    int maxExtId=0;    Map<Integer,PlatformCacheExtension> idToExt=new HashMap<>();    for (    PlatformCacheExtension cacheExt : cacheExts) {      if (cacheExt == null)       throw new IgniteException("Platform cache extension cannot be null.");      if (cacheExt.id() < 0)       throw new IgniteException("Platform cache extension ID cannot be negative: " + cacheExt);      PlatformCacheExtension oldCacheExt=idToExt.put(cacheExt.id(),cacheExt);      if (oldCacheExt != null)       throw new IgniteException("Platform cache extensions cannot have the same ID [" + "id=" + cacheExt.id() + ", first="+ oldCacheExt+ ", second="+ cacheExt+ ']');      if (cacheExt.id() > maxExtId)       maxExtId=cacheExt.id();    }    PlatformCacheExtension[] res=new PlatformCacheExtension[maxExtId + 1];    for (    PlatformCacheExtension cacheExt : cacheExts)     res[cacheExt.id()]=cacheExt;    return res;  } else   return new PlatformCacheExtension[0];}  }
class C{  @Override protected void draw(Canvas canvas){  if (hasAxis)   canvas.drawLine(chartView.getInnerChartLeft(),getAxisVerticalPosition(),getInnerChartRight(),getAxisVerticalPosition(),chartView.style.chartPaint);  if (labelsPositioning != LabelPosition.NONE) {    chartView.style.labelPaint.setTextAlign(Align.CENTER);    for (int i=0; i < nLabels; i++) {      canvas.drawText(labels.get(i),labelsPos.get(i),mLabelVerCoord,chartView.style.labelPaint);    }  }}  }
class C{  private Value colorLirOperand(LIRInstruction op,Variable operand,OperandMode mode){  int opId=op.id();  TraceInterval interval=allocator.intervalFor(operand);  assert interval != null : "interval must exist";  if (opId != -1) {    interval=allocator.splitChildAtOpId(interval,opId,mode);  }  if (isIllegal(interval.location()) && interval.canMaterialize()) {    if (op instanceof LabelOp) {      return Value.ILLEGAL;    }    assert mode != OperandMode.DEF;    return new ConstantValue(interval.kind(),interval.getMaterializedValue());  }  return interval.location();}  }
class C{  public void attachTo(RecyclerView recycler,boolean headerAlreadyAligned){  validateRecycler(recycler,headerAlreadyAligned);  mRecycler=recycler;  mAlreadyAligned=headerAlreadyAligned;  mReversed=isLayoutManagerReversed(recycler);  setupAlignment(recycler);  setupHeader(recycler);}  }
class C{  public UnsupportedContextException(Context context){  super(String.format("Context type \"%s\" is not supported",null == context ? "null" : context.getClass().getName()));  this.context=context;}  }
class C{  public BitcoinSerializer(NetworkParameters params,boolean parseLazy,boolean parseRetain){  this.params=params;  this.parseLazy=parseLazy;  this.parseRetain=parseRetain;}  }
class C{  @Override public void after(DerivationState state,int level,int tailNodeIndex){}  }
class C{  public JavaSource addSource(URL url) throws IOException {  return classLibraryBuilder.addSource(url);}  }
class C{  public static String serializeBytesToHexString(byte[] bytes){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("0x");  for (int i=0; i < bytes.length; i++) {    stringBuilder.append(String.format("%02x",bytes[i]));  }  return stringBuilder.toString();}  }
class C{  public boolean isLayoutValid(){  return (minorValid && majorValid && childSizeValid);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ENTITY_PROPERTY_SOURCE__PROPERTY:    setProperty((Property)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public String execute(){  return list();}  }
class C{  public Interval toIntervalFrom(ReadableInstant startInstant){  return new Interval(startInstant,this);}  }
class C{  public void volumeChange(ChangeEvent e){  JSlider v=(JSlider)e.getSource();  log.debug("Volume slider moved. value = " + v.getValue());  firePropertyChange(PropertyChangeID.VOLUME_CHANGE,v.getValue(),v.getValue());}  }
class C{  public static double pdf(double val,double rate){  return .5 * rate * Math.exp(-rate * Math.abs(val));}  }
class C{  public boolean contains(WordToken other){  return head != null && head.equals(other) || tail != null && tail.contains(other);}  }
class C{  static void attemptTtsShutdown(TextToSpeech tts){  try {    tts.shutdown();  } catch (  Exception e) {  }}  }
class C{  public Cinema(){  super();}  }
class C{  private Region createRegion(String name,Compressor compressor){  return getCache().createRegionFactory().setDataPolicy(DataPolicy.REPLICATE).setCloningEnabled(true).setCompressor(compressor).create(name);}  }
class C{  private void putDestroyPut(){  putAndDestroy();  region.put(new Integer(1),new Integer(2));}  }
class C{  public static <A extends Annotation>A createAnnotation(Class<? extends Annotation> annotationType,AnnotationMember[] elements){  AnnotationFactory factory=new AnnotationFactory(annotationType,elements);  return (A)Proxy.newProxyInstance(annotationType.getClassLoader(),new Class[]{annotationType},factory);}  }
class C{  @Override public boolean equals(Object o){  if (super.equals(o)) {    return true;  } else   if (type == INDIRECT && o instanceof PDFObject) {    PDFObject obj=(PDFObject)o;    if (obj.type == INDIRECT) {      PDFXref lXref=(PDFXref)value;      PDFXref rXref=(PDFXref)obj.value;      return ((lXref.getID() == rXref.getID()) && (lXref.getGeneration() == rXref.getGeneration()) && (lXref.getCompressed() == rXref.getCompressed()));    }  }  return false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.upPaint=SerialUtilities.readPaint(stream);  this.downPaint=SerialUtilities.readPaint(stream);  this.volumePaint=SerialUtilities.readPaint(stream);}  }
class C{  public boolean isShowDetail(){  return (Boolean)getStateHelper().eval(PropertyKeys.showDetail,true);}  }
class C{  public IntegerPolynomial invertFq(int q){  int N=coeffs.length;  int k=0;  IntegerPolynomial b=new IntegerPolynomial(N + 1);  b.coeffs[0]=1;  IntegerPolynomial c=new IntegerPolynomial(N + 1);  IntegerPolynomial f=new IntegerPolynomial(N + 1);  f.coeffs=Arrays.copyOf(coeffs,N + 1);  f.modPositive(2);  IntegerPolynomial g=new IntegerPolynomial(N + 1);  g.coeffs[0]=1;  g.coeffs[N]=1;  while (true) {    while (f.coeffs[0] == 0) {      for (int i=1; i <= N; i++) {        f.coeffs[i - 1]=f.coeffs[i];        c.coeffs[N + 1 - i]=c.coeffs[N - i];      }      f.coeffs[N]=0;      c.coeffs[0]=0;      k++;      if (f.equalsZero()) {        return null;      }    }    if (f.equalsOne()) {      break;    }    if (f.degree() < g.degree()) {      IntegerPolynomial temp=f;      f=g;      g=temp;      temp=b;      b=c;      c=temp;    }    f.add(g,2);    b.add(c,2);  }  if (b.coeffs[N] != 0) {    return null;  }  IntegerPolynomial Fq=new IntegerPolynomial(N);  int j=0;  k%=N;  for (int i=N - 1; i >= 0; i--) {    j=i - k;    if (j < 0) {      j+=N;    }    Fq.coeffs[j]=b.coeffs[i];  }  return mod2ToModq(Fq,q);}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void moveToCurrentRow() throws SQLException {  throw new NotUpdatable();}  }
class C{  public BpmnModel constructBpmnModelFromXmlAndValidate(String xmlString) throws UnsupportedEncodingException, XMLStreamException {  InputStreamSource source=new InputStreamSource(new ByteArrayInputStream(xmlString.trim().getBytes(Charsets.UTF_8)));  return new BpmnXMLConverter().convertToBpmnModel(source,true,true);}  }
class C{  @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof HttpRoute))   return false;  HttpRoute that=(HttpRoute)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.secure == that.secure) && (this.tunnelled == that.tunnelled) && (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  Zone(String name){  this.name=name;  list=new ArrayList<ZoneRec>();}  }
class C{  public RevokedCertsTableModel(){  columnNames=new String[2];  columnNames[0]=res.getString("RevokedCertsTableModel.SerialNumberColumn");  columnNames[1]=res.getString("RevokedCertsTableModel.RevocationDateColumn");  data=new Object[0][0];}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  public FlowLayout(){}  }
class C{  public User(String login,String password,boolean privileged){  this.login=login;  this.password=password;  this.privileged=privileged;}  }
class C{  public static StorageViewAttribute valueOfAttribute(String name){  StorageViewAttribute[] storageViewAtts=values();  for (int i=0; i < storageViewAtts.length; i++) {    if (storageViewAtts[i].getAttributeName().equals(name)) {      return storageViewAtts[i];    }  }  return null;}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisc=options.cacheOnDisc;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  saveImageOptions=options.saveImageOptions;  return this;}  }
class C{  public SQLNonTransientException(){}  }
class C{  public static void reverse(final double[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  double tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public void resetAxisMinValue(){  mCustomAxisMin=Float.NaN;}  }
class C{  public TreeNode lowestCommonAncestor(TreeNode root,TreeNode p,TreeNode q){  if (root == null || root == p || root == q) {    return root;  }  TreeNode left=lowestCommonAncestor(root.left,p,q);  TreeNode right=lowestCommonAncestor(root.right,p,q);  return left == null ? right : right == null ? left : root;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.717 -0400",hash_original_method="8F4229A52B3304209FE322C58E01ADF5",hash_generated_method="C41F82F19584AAF5372B760FE21B1169") private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException {  int ch;  for (int i=1; i < PEM_BEGIN.length; ++i) {    if (PEM_BEGIN[i] != (ch=inStream.read())) {      throw new IOException("Incorrect PEM encoding: '-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "' is expected as opening delimiter boundary.");    }  }  if (boundary_suffix == null) {    while ((ch=inStream.read()) != '\n') {      if (ch == -1) {        throw new IOException("Incorrect PEM encoding: EOF before content");      }    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw new IOException("Incorrect PEM encoding: '-----BEGIN" + new String(boundary_suffix) + "' is expected as opening delimiter boundary.");      }    }    if ((ch=inStream.read()) == '\r') {      ch=inStream.read();    }    if (ch != '\n') {      throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary");    }  }  int size=1024;  byte[] buff=new byte[size];  int index=0;  while ((ch=inStream.read()) != '-') {    if (ch == -1) {      throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter");    }    buff[index++]=(byte)ch;    if (index == size) {      byte[] newbuff=new byte[size + 1024];      System.arraycopy(buff,0,newbuff,0,size);      buff=newbuff;      size+=1024;    }  }  if (buff[index - 1] != '\n') {    throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter");  }  for (int i=1; i < PEM_END.length; ++i) {    if (PEM_END[i] != inStream.read()) {      throw badEnd(boundary_suffix);    }  }  if (boundary_suffix == null) {    while (((ch=inStream.read()) != -1) && (ch != '\n') && (ch != '\r')) {    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw badEnd(boundary_suffix);      }    }  }  inStream.mark(1);  while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {    inStream.mark(1);  }  inStream.reset();  buff=Base64.decode(buff,index);  if (buff == null) {    throw new IOException("Incorrect Base64 encoding");  }  return buff;}  }
class C{  protected void scaleMap(){  final double calcXScaleFactor=(double)getWidth() / mapWidth;  final double calcYScaleFactor=(double)getHeight() / mapHeight;  if ((Double.isInfinite(calcXScaleFactor) && Double.isInfinite(calcYScaleFactor)) || (Double.isNaN(calcXScaleFactor) && Double.isNaN(calcYScaleFactor))) {    minScaleFactor=1.0d;  } else   if (calcXScaleFactor >= calcYScaleFactor || Double.isNaN(calcXScaleFactor)) {    minScaleFactor=calcYScaleFactor - 0.0010d;  } else {    minScaleFactor=calcXScaleFactor - 0.0005d;  }  realScaleFactor=jSliderZoom.getValue() == 1 ? minScaleFactor : jSliderZoom.getValue() / 10 + 1;  double realMapWidth=mapWidth * realScaleFactor;  double realMapHeight=mapHeight * realScaleFactor;  scrollListener.setNotify(false);  if (realMapWidth <= getWidth()) {    horizontalScroll.setEnabled(false);    horizontalScroll.setValues(0,0,0,0);  } else {    realMapWidth*=1.2d;    horizontalScroll.setValues((int)(horizontalScrollValue + getWidth() > realMapWidth ? realMapWidth - getWidth() : horizontalScrollValue),getWidth(),0,(int)realMapWidth);    if (!horizontalScroll.isEnabled())     horizontalScroll.setEnabled(true);  }  if (realMapHeight <= getHeight()) {    verticalScroll.setEnabled(false);    verticalScroll.setValues(0,0,0,0);  } else {    realMapHeight*=1.2d;    verticalScroll.setValues((int)(verticalScrollValue + getHeight() > realMapHeight ? realMapHeight - getHeight() : verticalScrollValue),getHeight(),0,(int)realMapHeight);    if (!verticalScroll.isEnabled())     verticalScroll.setEnabled(true);  }  scrollListener.setNotify(true);  repaint();}  }
class C{  private String[] cleanTextForSRT(Caption current){  String[] lines;  String text=current.content;  lines=text.split("<br />");  for (int i=0; i < lines.length; i++) {    lines[i]=lines[i].replaceAll("<.*?>","");  }  return lines;}  }
class C{  protected void expandFor(int index,double d){  if (index < size)   return;  int oldSize=size, capacity=vector.length;  size=index + 1;  if (capacity >= size)   return;  while (capacity < size)   capacity*=2;  double[] t=new double[capacity];  System.arraycopy(vector,0,t,0,oldSize);  if (d != 0)   Arrays.fill(t,oldSize,size,d);  vector=t;}  }
class C{  private List<String> queryClusterInitiators(URI hostId){  List<String> initiatorNames=new ArrayList<String>();  Host host=_dbClient.queryObject(Host.class,hostId);  if (host == null) {    return initiatorNames;  }  if (host.getCluster() == null) {    return initiatorNames;  }  List<URI> hostUris=ComputeSystemHelper.getChildrenUris(_dbClient,host.getCluster(),Host.class,"cluster");  for (  URI hosturi : hostUris) {    initiatorNames.addAll(queryHostInitiators(hosturi));  }  return initiatorNames;}  }
class C{  public boolean isCancelable(){  return cancelable;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public CToolbarPanelSynchronizer(final CDebuggerToolbar toolBar,final CThreadPanel threadPanel,final CDebugPerspectiveModel debugPerspectiveModel){  m_toolBar=Preconditions.checkNotNull(toolBar,"IE01524: Toolbar argument can not be null");  m_threadPanel=Preconditions.checkNotNull(threadPanel,"IE01525: Thread panel argument can not be null");  m_debugPerspectiveModel=Preconditions.checkNotNull(debugPerspectiveModel,"IE01526: Debug perspective model argument can not be null");  final IDebugger activeDebugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  final TargetProcessThread activeThread=activeDebugger == null ? null : activeDebugger.getProcessManager().getActiveThread();  synchronizeDebugger(null,m_debugPerspectiveModel.getCurrentSelectedDebugger());  synchronizeThread(null,activeThread);  m_debugPerspectiveModel.addListener(m_debugListener);}  }
class C{  public void addActionListener(ActionListener l){  mv.addActionListener(l);}  }
class C{  private boolean keepSaved(FacesContext context){  return (contextHasErrorMessages(context) || isNestedWithinIterator());}  }
class C{  private int findSplit(ArrayDBIDs order,DBIDArrayIter it,DoubleDataStore lambda){  int split;  if (minclusters > 0) {    split=order.size() > minclusters ? order.size() - minclusters : 0;    it.seek(split);    final double stopdist=lambda.doubleValue(it);    for (it.retract(); it.valid() && stopdist <= lambda.doubleValue(it); it.retract()) {      split--;    }  } else   if (!Double.isNaN(threshold)) {    split=order.size();    it.seek(split - 1);    while (it.valid() && threshold <= lambda.doubleValue(it)) {      split--;      it.retract();    }  } else {    split=0;  }  return split;}  }
class C{  @PostConstruct public void init(){  createComponents();  buildLayout();}  }
class C{  public Point2D either(){  return best1;}  }
class C{  @Override public void stop(){  if (m_listenees != null && m_listenees.size() > 0) {    for (    Object l : m_listenees.values()) {      if (l instanceof BeanCommon) {        ((BeanCommon)l).stop();      }    }  }  m_busy=false;}  }
class C{  protected void updatePicture(int frameNum){  if (frameNum < 0 || frameNum >= images.size()) {    if (images.isEmpty())     text1.setText("NO IMAGES TO SHOW"); else     text2.setText("No more images");    return;  }  currentImg=frameNum;  try {    PngReaderBI pngr=new PngReaderBI(images.get(currentImg));    BufferedImage im1=pngr.readAll();    ImageIcon icon1=new ImageIcon(im1);    picture1.setIcon(icon1);    BufferedImage im2=ImageIO.read(images.get(currentImg));    ImageIcon icon2=new ImageIcon(im2);    picture2.setIcon(icon2);    text1.setText(String.format("Image %d/%d (%s)",currentImg + 1,images.size(),images.get(currentImg).toString()));    text2.setText(pngr.imgInfo.toStringDetail());  } catch (  Exception e) {    picture1.setText("error loading image: " + images.get(currentImg) + " ;"+ e.getMessage());  }}  }
class C{  public static void print(Complex n){  if (n.getImaginaryPart() == 0)   System.out.println(n.getRealPart()); else   System.out.println(n.getRealPart() + " + " + n.getImaginaryPart()+ "i");}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.771 -0400",hash_original_method="579B5F1267C3E5A23AE0501F4C0FD567",hash_generated_method="4B3C8F41C253C09EE53C6F475AC7F7C1") @Override public void write(char[] chr) throws IOException {  try {    int len=0;    if (chr != null) {      len=chr.length;    }    beforeWrite(len);    out.write(chr);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public int hashCode(){  return fs.hashCode(this);}  }
class C{  public void writeParameterPriors(XMLWriter writer,boolean useStarBEAST){  boolean first=true;  Map<Taxa,Boolean> taxonSetsMono=useStarBEAST ? options.speciesSetsMono : options.taxonSetsMono;  for (  Map.Entry<Taxa,Boolean> taxaBooleanEntry : taxonSetsMono.entrySet()) {    if (taxaBooleanEntry.getValue()) {      if (first) {        writer.writeOpenTag(BooleanLikelihoodParser.BOOLEAN_LIKELIHOOD);        first=false;      }      final String taxaRef="monophyly(" + taxaBooleanEntry.getKey().getId() + ")";      writer.writeIDref(MonophylyStatisticParser.MONOPHYLY_STATISTIC,taxaRef);    }  }  if (!first) {    writer.writeCloseTag(BooleanLikelihoodParser.BOOLEAN_LIKELIHOOD);  }  ArrayList<Parameter> parameters=options.selectParameters();  if (useStarBEAST) {    for (    Parameter parameter : parameters) {      if (!(parameter.priorType == PriorType.NONE_TREE_PRIOR || parameter.priorType == PriorType.NONE_STATISTIC)) {        if (parameter.isCached) {          writeCachedParameterPrior(parameter,writer);        } else         if (!(options.treeModelOptions.isNodeCalibrated(parameter) && parameter.isCalibratedYule)) {          writeParameterPrior(parameter,writer);        }      }    }  } else {    for (    Parameter parameter : parameters) {      if (!(parameter.priorType == PriorType.NONE_TREE_PRIOR || parameter.priorType == PriorType.NONE_FIXED || parameter.priorType == PriorType.NONE_STATISTIC)) {        if (parameter.isCached) {          writeCachedParameterPrior(parameter,writer);        } else         if (!(options.treeModelOptions.isNodeCalibrated(parameter) && parameter.isCalibratedYule)) {          writeParameterPrior(parameter,writer);        }      }    }  }}  }
class C{  public boolean isForceConsistentCasingInFileNames(){  return forceConsistentCasingInFileNames;}  }
class C{  private static MediaFormat parseMp4vFromParent(ParsableByteArray parent,int position,int size){  parent.setPosition(position + Mp4Util.ATOM_HEADER_SIZE);  parent.skip(24);  int width=parent.readUnsignedShort();  int height=parent.readUnsignedShort();  parent.skip(50);  List<byte[]> initializationData=new ArrayList<byte[]>(1);  int childPosition=parent.getPosition();  while (childPosition - position < size) {    parent.setPosition(childPosition);    int childStartPosition=parent.getPosition();    int childAtomSize=parent.readInt();    Assertions.checkArgument(childAtomSize > 0,"childAtomSize should be positive");    int childAtomType=parent.readInt();    if (childAtomType == Atom.TYPE_esds) {      initializationData.add(parseEsdsFromParent(parent,childStartPosition));    }    childPosition+=childAtomSize;  }  return MediaFormat.createVideoFormat(MimeTypes.VIDEO_MP4V,MediaFormat.NO_VALUE,width,height,initializationData);}  }
class C{  public void init(Map<String,Object> params){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;case 2:  return PROPERTY;default :return null;}}  }
class C{  public XPathExtractor removeNamespace(){  this.removeNamespace=true;  return this;}  }
class C{  public void shutdown(){  workerGroup.shutdownGracefully();  bossGroup.shutdownGracefully();}  }
class C{  public CUmipmappedArray(){}  }
class C{  public static List<String[]> createListContent(List<Formula> formulaList,String labelingScheme){  Vector<String[]> resultContent=new Vector<String[]>(formulaList.size());  String[] content;  String label;  for (int i=0; i < formulaList.size(); i++) {    label=getValidIdentifier(labelingScheme);    content=new String[]{label,label + DEFINES_CR + formulaList.get(i).getFormula()};    resultContent.add(content);  }  return resultContent;}  }
class C{  public boolean isApplicable(Material material){  return material != Material.AIR;}  }
class C{  public WindowBuilder content(final Component content){  this.content=content;  return this;}  }
class C{  public int size(){  return values.size();}  }
class C{  public boolean hasMessage(){  return !Strings.isNullOrEmpty(message);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String toString(){  String s=((getValueIsAdjusting()) ? "~" : "=") + value.toString();  return getClass().getName() + " " + Integer.toString(hashCode())+ " "+ s;}  }
class C{  private Map<String,String> splitVendorString(String vendorString){  Map<String,String> vendorMap=new HashMap<String,String>();  String[] vendorStringArray=vendorString.split(";");  for (int x=0; x < vendorStringArray.length; x++) {    String[] vendorEntry=vendorStringArray[x].split("=");    vendorMap.put(vendorEntry[0],vendorEntry[1]);  }  return vendorMap;}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();  } else {    key=(RSAKeyParameters)param;  }  this.forEncryption=forEncryption;}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException ignored) {    throw FormatException.getFormatInstance();  }}  }
class C{  public static void writeGraphic(LegHistogram legHistogram,final String filename,final String legMode){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(legHistogram.getDataForMode(legMode),legMode,legHistogram.getIteration()),1024,768);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public void replaceShort(int i,int s){  _buffer[i]=(byte)(s >> 8);  _buffer[i + 1]=(byte)(s);}  }
class C{  private static int[] merge(int[] set,int[] tmp){  List<Integer> newSet=new ArrayList<Integer>();  int setLength=(set == null ? 0 : set.length);  int seti=0;  int tmpi=0;  while (seti < setLength || tmpi < tmp.length) {    if (seti >= setLength) {      int tmpVal=tmp[tmpi];      newSet.add(tmpVal);      tmpi++;      tmpi=consumeDuplicates(tmp,getSparseIndex(tmpVal),tmpi);    } else     if (tmpi >= tmp.length) {      newSet.add(set[seti++]);    } else {      int setVal=set[seti];      int tmpVal=tmp[tmpi];      if (getSparseIndex(setVal) == getSparseIndex(tmpVal)) {        newSet.add(Math.min(setVal,tmpVal));        tmpi++;        tmpi=consumeDuplicates(tmp,getSparseIndex(tmpVal),tmpi);        seti++;      } else       if (getSparseIndex(setVal) < getSparseIndex(tmpVal)) {        newSet.add(setVal);        seti++;      } else {        newSet.add(tmpVal);        tmpi++;        tmpi=consumeDuplicates(tmp,getSparseIndex(tmpVal),tmpi);      }    }  }  return toIntArray(newSet);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractAttrNS aa=(AbstractAttrNS)n;  aa.namespaceURI=namespaceURI;  return n;}  }
class C{  public static <T>Patch<T> diff(List<T> original,List<T> revised,DiffAlgorithm<T> algorithm){  if (original == null) {    throw new IllegalArgumentException("original must not be null");  }  if (revised == null) {    throw new IllegalArgumentException("revised must not be null");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm must not be null");  }  return algorithm.diff(original,revised);}  }
class C{  final public boolean isReadOnly(){  return false;}  }
class C{  private void hsmooth64(LongArrayPointer a,int nxtop,int nytop){  int i, j;  int ny2, s10, s00;  long hm, h0, hp, hmm, hpm, hmp, hpp, hx2, hy2, diff, dmax, dmin, s, smax, m1, m2;  smax=this.scale >> 1;  if (smax <= 0) {    return;  }  ny2=this.ny << 1;  for (i=2; i < nxtop - 2; i+=2) {    s00=this.ny * i;    s10=s00 + this.ny;    for (j=0; j < nytop; j+=2) {      hm=a.get(s00 - ny2);      h0=a.get(s00);      hp=a.get(s00 + ny2);      diff=hp - hm;      dmax=Math.max(Math.min(hp - h0,h0 - hm),0) << 2;      dmin=Math.min(Math.max(hp - h0,h0 - hm),0) << 2;      if (dmin < dmax) {        diff=Math.max(Math.min(diff,dmax),dmin);        s=diff - (a.get(s10) << N03);        s=s >= 0 ? s >> N03 : s + N07 >> N03;        s=Math.max(Math.min(s,smax),-smax);        a.set(s10,a.get(s10) + s);      }      s00+=2;      s10+=2;    }  }  for (i=0; i < nxtop; i+=2) {    s00=this.ny * i + 2;    s10=s00 + this.ny;    for (j=2; j < nytop - 2; j+=2) {      hm=a.get(s00 - 2);      h0=a.get(s00);      hp=a.get(s00 + 2);      diff=hp - hm;      dmax=Math.max(Math.min(hp - h0,h0 - hm),0) << 2;      dmin=Math.min(Math.max(hp - h0,h0 - hm),0) << 2;      if (dmin < dmax) {        diff=Math.max(Math.min(diff,dmax),dmin);        s=diff - (a.get(s00 + 1) << N03);        s=s >= 0 ? s >> N03 : s + N07 >> N03;        s=Math.max(Math.min(s,smax),-smax);        a.set(s00 + 1,a.get(s00 + 1) + s);      }      s00+=2;      s10+=2;    }  }  for (i=2; i < nxtop - 2; i+=2) {    s00=this.ny * i + 2;    s10=s00 + this.ny;    for (j=2; j < nytop - 2; j+=2) {      hmm=a.get(s00 - ny2 - 2);      hpm=a.get(s00 + ny2 - 2);      hmp=a.get(s00 - ny2 + 2);      hpp=a.get(s00 + ny2 + 2);      h0=a.get(s00);      diff=hpp + hmm - hmp - hpm;      hx2=a.get(s10) << 1;      hy2=a.get(s00 + 1) << 1;      m1=Math.min(Math.max(hpp - h0,0) - hx2 - hy2,Math.max(h0 - hpm,0) + hx2 - hy2);      m2=Math.min(Math.max(h0 - hmp,0) - hx2 + hy2,Math.max(hmm - h0,0) + hx2 + hy2);      dmax=Math.min(m1,m2) << BITS_OF_1_NYBBLE;      m1=Math.max(Math.min(hpp - h0,0) - hx2 - hy2,Math.min(h0 - hpm,0) + hx2 - hy2);      m2=Math.max(Math.min(h0 - hmp,0) - hx2 + hy2,Math.min(hmm - h0,0) + hx2 + hy2);      dmin=Math.max(m1,m2) << BITS_OF_1_NYBBLE;      if (dmin < dmax) {        diff=Math.max(Math.min(diff,dmax),dmin);        s=diff - (a.get(s10 + 1) << N06);        s=s >= 0 ? s >> N06 : s + N63 >> N06;        s=Math.max(Math.min(s,smax),-smax);        a.set(s10 + 1,a.get(s10 + 1) + s);      }      s00+=2;      s10+=2;    }  }}  }
class C{  public static QueryExp gt(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(GT,v1,v2);}  }
class C{  public boolean containsKey(Object key){  Object nulledKey=fromKey(key);  CacheLine<V> line=memoryTable.get(nulledKey);  if (line == null) {    if (fileTable != null) {      try {synchronized (this) {          FastIterator<Object> iter=fileTable.keys();          Object checkKey=null;          while ((checkKey=iter.next()) != null) {            if (nulledKey.equals(checkKey)) {              return true;            }          }        }      } catch (      IOException e) {        Debug.logError(e,module);      }    }    return false;  } else {    return true;  }}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent e){  if (this.autoWidth) {    this.autoIntervalWidth=recalculateInterval();  }}  }
class C{  @Override synchronized public boolean isRunning(){  return isProcessing;}  }
class C{  public void inflate(Resources r,XmlPullParser parser,AttributeSet attrs,Resources.Theme theme) throws XmlPullParserException, IOException {}  }
class C{  public ComputeExecutionRejectedException(String msg){  super(msg);}  }
class C{  public void boostRTOvalue(){  meanOverallRTO*=2;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:    return ((InternalEList<?>)getScopes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.135 -0500",hash_original_method="511C5822AAD77FC3309E37C883E816C8",hash_generated_method="943148D2FBAAAB0DE8F1927558795D9F") public static void enableDeathOnNetwork(){}  }
class C{  public static void main(String[] args){  Adempiere.startupEnvironment(true);  CLogMgt.setLevel(Level.INFO);  Properties ctx=Env.getCtx();  int AD_Process_ID=53156;  MPInstance pinstance=new MPInstance(ctx,AD_Process_ID,-1);  pinstance.saveEx();  ProcessInfo pi=new ProcessInfo("",AD_Process_ID,0,0);  pi.setAD_Client_ID(Env.getAD_Client_ID(ctx));  pi.setAD_User_ID(Env.getAD_User_ID(ctx));  pi.setAD_PInstance_ID(pinstance.getAD_PInstance_ID());  EnableNativeSequence proc=new EnableNativeSequence();  proc.startProcess(ctx,pi,null);  if (pi.isError()) {    throw new AdempiereException(pi.getSummary());  }}  }
class C{  public CreateMonitoredItemsRequest clone(){  CreateMonitoredItemsRequest result=new CreateMonitoredItemsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.TimestampsToReturn=TimestampsToReturn;  if (ItemsToCreate != null) {    result.ItemsToCreate=new MonitoredItemCreateRequest[ItemsToCreate.length];    for (int i=0; i < ItemsToCreate.length; i++)     result.ItemsToCreate[i]=ItemsToCreate[i].clone();  }  return result;}  }
class C{  public double optDouble(int index){  return optDouble(index,Double.NaN);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ChangeRequestAttribute))   return false;  if (obj == this)   return true;  ChangeRequestAttribute att=(ChangeRequestAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.getChangeIpFlag() != getChangeIpFlag() || att.getChangePortFlag() != getChangePortFlag())   return false;  return true;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  @Deprecated public static boolean booleanValue(String value,boolean deflt){  if (value == null) {    return deflt;  }  if (value.equals("true")) {    return true;  } else   if (value.equals("yes")) {    return true;  } else   if (value.equals("y")) {    return true;  } else   if (value.equals("on")) {    return true;  } else   if (value.equals("false")) {    return false;  } else   if (value.equals("no")) {    return false;  } else   if (value.equals("n")) {    return false;  } else   if (value.equals("off")) {    return false;  }  return deflt;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.787 -0500",hash_original_method="80004BAEB2388ADEF62653D4EDD03DA4",hash_generated_method="9277F78D069B6EE853C29B83B4097FBF") public String namespace(){  return theType.namespace();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.704 -0400",hash_original_method="C9D180903A7CC0CD8F17729AA0E80F49",hash_generated_method="5306CC2905386E87E60064522DE0CAF1") public void put(E e){  offer(e);}  }
class C{  public void testDestroyFailedException03(){  String msg=null;  DestroyFailedException dfE=new DestroyFailedException(msg);  assertNull("getMessage() must return null.",dfE.getMessage());  assertNull("getCause() must return null",dfE.getCause());}  }
class C{  public boolean mkdir(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkWrite(path);  }  if (isInvalid()) {    return false;  }  return fs.createDirectory(this);}  }
class C{  public FactoryDisabled(MonitorFactoryInterface factoryEnabled){  this.factoryEnabled=factoryEnabled;}  }
class C{  protected static DataCiteMetadata.Dates convertEmlDates(Date created,List<TemporalCoverage> coverages){  DataCiteMetadata.Dates dates=FACTORY.createDataCiteMetadataDates();  if (created != null) {    DataCiteMetadata.Dates.Date createdDate=FACTORY.createDataCiteMetadataDatesDate();    createdDate.setValue(DATE_FORMAT.format(created));    createdDate.setDateType(DateType.CREATED);    dates.getDate().add(createdDate);  }  DataCiteMetadata.Dates.Date updatedDate=FACTORY.createDataCiteMetadataDatesDate();  updatedDate.setValue(DATE_FORMAT.format(new Date()));  updatedDate.setDateType(DateType.UPDATED);  dates.getDate().add(updatedDate);  for (  TemporalCoverage coverage : coverages) {    if (coverage.getType().equals(TemporalCoverageType.SINGLE_DATE)) {      DataCiteMetadata.Dates.Date singleDate=FACTORY.createDataCiteMetadataDatesDate();      singleDate.setValue(DATE_FORMAT.format(coverage.getStartDate()));      singleDate.setDateType(DateType.VALID);      dates.getDate().add(singleDate);    } else     if (coverage.getType().equals(TemporalCoverageType.DATE_RANGE)) {      DataCiteMetadata.Dates.Date range=FACTORY.createDataCiteMetadataDatesDate();      String start=DATE_FORMAT.format(coverage.getStartDate());      String end=DATE_FORMAT.format(coverage.getEndDate());      range.setValue(start + "/" + end);      range.setDateType(DateType.VALID);      dates.getDate().add(range);    }  }  return dates;}  }
class C{  @Override public void tearDown() throws Exception {  IIndexManager backend=null;  Repository delegate=dataRep == null ? null : dataRep;  if (delegate != null && delegate instanceof BigdataSailRepository) {    backend=((BigdataSailRepository)delegate).getSail().getIndexManager();  }  super.tearDown();  if (backend != null)   tearDownBackend(backend);  dataRep=null;  queryString=null;}  }
class C{  public static ChunksList readAllChunks(File file,boolean includeIdat){  PngReader pngr=new PngReader(file);  pngr.setChunksToSkip();  pngr.getChunkseq().setIncludeNonBufferedChunks(includeIdat);  pngr.readSkippingAllRows();  pngr.end();  return pngr.getChunksList();}  }
class C{  public TransactionalTests(@NotNull Database db,@NotNull RollbackPolicy rollbackPolicy){  this(null,rollbackPolicy);}  }
class C{  protected void clearRect(BufferedImage backingImage,int x,int y,int width,int height){  Graphics2D g=backingImage.createGraphics();  try {    g.setComposite(AlphaComposite.Src);    g.setColor(this.clearColor);    g.fillRect(x,y,width,height);  }  finally {    g.dispose();  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  void commit(){  long index=this.index;  for (  ServerSessionContext session : sessions.sessions.values()) {    session.commit(index);  }}  }
class C{  @Override public String friendlyString(){  return new File(getPath()).getName();}  }
class C{  private void readElementDeclaration() throws IOException, XmlPullParserException {  read(START_ELEMENT);  skip();  readName();  readContentSpec();  skip();  read('>');}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_buildThread.isAlive() && m_state != IDLE) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  private static void takeBndAction(Project project,Throwing.Consumer<aQute.bnd.osgi.Jar> onBuilder){  ProjectPlugin.getPlugin(project,JavaPlugin.class);  Jar jarTask=(Jar)project.getTasks().getByName(JavaPlugin.JAR_TASK_NAME);  Errors.rethrow().run(null);}  }
class C{  protected String attributeValuesString(Instance instance){  StringBuffer text=new StringBuffer();  if (m_Attributes != null) {    boolean firstOutput=true;    m_Attributes.setUpper(instance.numAttributes() - 1);    for (int i=0; i < instance.numAttributes(); i++)     if (m_Attributes.isInRange(i) && i != instance.classIndex()) {      if (!firstOutput)       text.append("</td>");      if (m_Header.attribute(i).isNumeric())       text.append("<td align=\"right\">"); else       text.append("<td>");      text.append(sanitize(instance.toString(i)));      firstOutput=false;    }    if (!firstOutput)     text.append("</td>");  }  return text.toString();}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public void close(){  int count=refCount.decrementAndGet();  if (count > 0)   return;  if (count < 0) {    log.error("Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org",count,this);    assert false : "Too many closes on SolrCore";    return;  }  log.info(logid + " CLOSING SolrCore " + this);  if (closeHooks != null) {    for (    CloseHook hook : closeHooks) {      try {        hook.preClose(this);      } catch (      Throwable e) {        SolrException.log(log,e);        if (e instanceof Error) {          throw (Error)e;        }      }    }  }  try {    if (null != updateHandler) {      updateHandler.close();    }  } catch (  Throwable e) {    SolrException.log(log,e);    if (e instanceof Error) {      throw (Error)e;    }  }  boolean coreStateClosed=false;  try {    if (solrCoreState != null) {      if (updateHandler instanceof IndexWriterCloser) {        coreStateClosed=solrCoreState.decrefSolrCoreState((IndexWriterCloser)updateHandler);      } else {        coreStateClosed=solrCoreState.decrefSolrCoreState(null);      }    }  } catch (  Throwable e) {    SolrException.log(log,e);    if (e instanceof Error) {      throw (Error)e;    }  }  try {    ExecutorUtil.shutdownAndAwaitTermination(searcherExecutor);  } catch (  Throwable e) {    SolrException.log(log,e);    if (e instanceof Error) {      throw (Error)e;    }  }  try {    closeSearcher();  } catch (  Throwable e) {    SolrException.log(log,e);    if (e instanceof Error) {      throw (Error)e;    }  }  try {    infoRegistry.clear();  } catch (  Throwable e) {    SolrException.log(log,e);    if (e instanceof Error) {      throw (Error)e;    }  }  if (coreStateClosed) {    try {      directoryFactory.close();    } catch (    Throwable e) {      SolrException.log(log,e);      if (e instanceof Error) {        throw (Error)e;      }    }  }  if (closeHooks != null) {    for (    CloseHook hook : closeHooks) {      try {        hook.postClose(this);      } catch (      Throwable e) {        SolrException.log(log,e);        if (e instanceof Error) {          throw (Error)e;        }      }    }  }}  }
class C{  public JsonNode remove(int index){  if (index >= 0 && (_children != null) && index < _children.size()) {    return _children.remove(index);  }  return null;}  }
class C{  public int hashCode(){  return (AD_Client_ID * 7) + AD_Org_ID;}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final FilterMode filter){  insertBitmap(bitmap,x,y,-1,filter);}  }
class C{  static public void stepFailed(String stepId,ServiceCoded coded) throws WorkflowException {  WorkflowService.completerStepError(stepId,coded);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BeiderMorseFilter(TokenStream input,PhoneticEngine engine,LanguageSet languages){  super(input);  this.engine=engine;  this.languages=languages;}  }
class C{  protected void cleanUp(){}  }
class C{  @Override public Object clone(){  return super.clone();}  }
class C{  public int findIndexById(int id) throws Exception {  int i;  FolderTokenDocTreeNode node=null;  int idx=-1;  for (i=0; i < count(); i++) {    node=(FolderTokenDocTreeNode)m_nodes.get(i);    if (node.getId() == id) {      idx=i;      break;    }  }  return idx;}  }
class C{  public Property dayOfYear(){  return new Property(this,getChronology().dayOfYear());}  }
class C{  @Override public void onStop(){  super.onStop();  getContext().unregisterReceiver(mConfChangeListener);  mLaunchComponent=null;  mAppSearchData=null;  mSearchable=null;  mUserQuery=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateFocusMonth(int month){  mFocusMonth=month;  notifyDataSetChanged();}  }
class C{  public void paintRadioButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected void onProgressChanged(int milli){}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (!super.equals(obj))   return false;  DecimalFormat other=(DecimalFormat)obj;  return ((posPrefixPattern == other.posPrefixPattern && positivePrefix.equals(other.positivePrefix)) || (posPrefixPattern != null && posPrefixPattern.equals(other.posPrefixPattern))) && ((posSuffixPattern == other.posSuffixPattern && positiveSuffix.equals(other.positiveSuffix)) || (posSuffixPattern != null && posSuffixPattern.equals(other.posSuffixPattern))) && ((negPrefixPattern == other.negPrefixPattern && negativePrefix.equals(other.negativePrefix)) || (negPrefixPattern != null && negPrefixPattern.equals(other.negPrefixPattern)))&& ((negSuffixPattern == other.negSuffixPattern && negativeSuffix.equals(other.negativeSuffix)) || (negSuffixPattern != null && negSuffixPattern.equals(other.negSuffixPattern)))&& multiplier == other.multiplier && groupingSize == other.groupingSize && decimalSeparatorAlwaysShown == other.decimalSeparatorAlwaysShown && parseBigDecimal == other.parseBigDecimal && useExponentialNotation == other.useExponentialNotation && (!useExponentialNotation || minExponentDigits == other.minExponentDigits) && maximumIntegerDigits == other.maximumIntegerDigits && minimumIntegerDigits == other.minimumIntegerDigits && maximumFractionDigits == other.maximumFractionDigits && minimumFractionDigits == other.minimumFractionDigits && roundingMode == other.roundingMode && symbols.equals(other.symbols);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.getDoctype();  assertTrue("docTypeNotNullOrDocIsHTML",((newNode != null) | ("text/html".equals(getContentType()))));  if ((newNode != null)) {    assertNotNull("docTypeNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  private int mergeFields() throws IOException {  try (StoredFieldsWriter fieldsWriter=codec.storedFieldsFormat().fieldsWriter(directory,mergeState.segmentInfo,context)){    return fieldsWriter.merge(mergeState);  } }  }
class C{  public static void verify(byte[] smdXml) throws GeneralSecurityException, IOException, MarshalException, ParserConfigurationException, SAXException, XMLSignatureException {  checkArgument(smdXml.length > 0);  Document doc=parseSmdDocument(new ByteArrayInputStream(smdXml));  NodeList signatureNodes=doc.getElementsByTagNameNS(XMLSignature.XMLNS,"Signature");  if (signatureNodes.getLength() != 1) {    throw new XMLSignatureException("Expected exactly one <ds:Signature> element.");  }  XMLSignatureFactory factory=XMLSignatureFactory.getInstance("DOM");  KeyValueKeySelector selector=new KeyValueKeySelector();  DOMValidateContext context=new DOMValidateContext(selector,signatureNodes.item(0));  XMLSignature signature=factory.unmarshalXMLSignature(context);  boolean isValid;  try {    isValid=signature.validate(context);  } catch (  XMLSignatureException e) {    Throwable cause=getRootCause(e);    propagateIfInstanceOf(cause,GeneralSecurityException.class);    throw e;  }  if (!isValid) {    throw new XMLSignatureException(explainValidationProblem(context,signature));  }}  }
class C{  private int min(int a,int b){  if (a < b)   return a;  return b;}  }
class C{  public static int convertDayOfWeekFromTimeToCalendar(int timeDayOfWeek){switch (timeDayOfWeek) {case Time.MONDAY:    return Calendar.MONDAY;case Time.TUESDAY:  return Calendar.TUESDAY;case Time.WEDNESDAY:return Calendar.WEDNESDAY;case Time.THURSDAY:return Calendar.THURSDAY;case Time.FRIDAY:return Calendar.FRIDAY;case Time.SATURDAY:return Calendar.SATURDAY;case Time.SUNDAY:return Calendar.SUNDAY;default :throw new IllegalArgumentException("Argument must be between Time.SUNDAY and " + "Time.SATURDAY");}}  }
class C{  private synchronized void returnPressed(){  Document doc=getDocument();  int len=doc.getLength();  Segment segment=new Segment();  try {    doc.getText(outputMark,len - outputMark,segment);  } catch (  javax.swing.text.BadLocationException ignored) {    ignored.printStackTrace();  }  String text=segment.toString();  if (debugGui.dim.stringIsCompilableUnit(text)) {    if (text.trim().length() > 0) {      history.add(text);      historyIndex=history.size();    }    append("\n");    String result=debugGui.dim.eval(text);    if (result.length() > 0) {      append(result);      append("\n");    }    append("% ");    outputMark=doc.getLength();  } else {    append("\n");  }}  }
class C{  public void close() throws IOException {  try {    file.close();    tmp=null;  } catch (  SmbException se) {    throw seToIoe(se);  }}  }
class C{  public static String mediumFormat(Date dt){  ensureInited();  return dateFormatter.mediumFormat(dt);}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.hasSlot("content")) {    content=object.getSlot("content");  } else {    content=null;  }}  }
class C{  public ProfileDrawerItem withNameShown(boolean nameShown){  this.nameShown=nameShown;  return this;}  }
class C{  public boolean destroyClient(){  try {    Thread.sleep(100);  } catch (  InterruptedException ie) {  }  try {    wmqttClient.disconnect();    wmqttClient=null;  } catch (  MqttException e) {  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.061 -0500",hash_original_method="E91CEA6395085A2C805805AEC660F914",hash_generated_method="7E86911A557B95B7B6AC85986E42C999") public StringBuffer append(float f){  addTaint(f);  return this;}  }
class C{  @Override public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof TypeToken<?>)) {    return false;  }  TypeToken<?> t=(TypeToken<?>)o;  return type.equals(t.type);}  }
class C{  public void interceptStream(int index,OutputStream stream) throws GuacamoleException {  logger.debug("Intercepting output stream #{} of tunnel \"{}\".",index,getUUID());  try {    outputStreamFilter.interceptStream(index,new BufferedOutputStream(stream));  }  finally {    logger.debug("Intercepted output stream #{} of tunnel \"{}\" ended.",index,getUUID());  }}  }
class C{  private TimeWindow newTimeWindowInstance(Long from,Long to){  return new TimeWindowImpl(from,to,this.safeWindowMs);}  }
class C{  private void add(MessageUid uid){  if (!uidToMsn.containsKey(uid)) {    highestMsn++;    add(highestMsn,uid);  }}  }
class C{  public BackgroundMusicSource(String sound,int radius,int volume){  super(sound,radius,volume,SoundLayer.BACKGROUND_MUSIC);}  }
class C{  public CharArraySet(int startSize,boolean ignoreCase){  this(new CharArrayMap<>(startSize,ignoreCase));}  }
class C{  static void exportXmlFile(ByteArrayPayload payload,String path) throws IOException {  File file=new File(path);  if (file.exists() && !file.delete()) {    throw new IOException("Cannot overwrite " + path + ". Perhaps the file is locked?");  }  InputStream is=payload.getPayloadStream();  int len=(int)payload.getLength();  byte[] data=new byte[len];  int read=is.read(data,0,len);  if (read > 0) {    RandomAccessFile randomAccessFile=null;    try {      randomAccessFile=new RandomAccessFile(file,"rws");      randomAccessFile.write(data);    }  finally {      if (randomAccessFile != null) {        try {          randomAccessFile.close();        } catch (        IOException e) {          Log.e(t,"Error closing RandomAccessFile: " + path,e);        }      }    }  }}  }
class C{  protected ReactActivityDelegate createReactActivityDelegate(){  return new ReactActivityDelegate(this,getMainComponentName());}  }
class C{  public void testDivideRoundHalfUpPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processTemplateId,Principal principal){  RestWrapper restWrapper=null;  try {    processTemplateDAO.delete(processTemplateId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplateId + " deleted from ProcessTemplate by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  public HelloRequest(){}  }
class C{  public boolean applyViewState(){  MvpViewStateDelegateCallback<V,P> delegate=(MvpViewStateDelegateCallback<V,P>)delegateCallback;  if (applyViewState) {    boolean retainingInstance=delegateCallback.isRetainInstance();    delegate.setRestoringViewState(true);    delegate.getViewState().apply(delegate.getMvpView(),retainingInstance);    delegate.setRestoringViewState(false);    delegate.onViewStateInstanceRestored(retainingInstance);    return true;  }  delegate.onNewViewStateInstance();  return false;}  }
class C{  public JavaDocContext(TemplateContextType type,IDocument document,Position completionPosition,ISourceFile compilationUnit){  super(type,document,completionPosition,compilationUnit);}  }
class C{  private ServiceRegistry(){  serviceDescriptors=new HashMap<KEY,ServiceDescriptor<KEY>>();}  }
class C{  protected void finalize() throws Throwable {  this.prototype=null;  this.root=null;  this.stack.clear();  this.stack=null;  super.finalize();}  }
class C{  private void packAllColumns(){  imgColumn.pack();  numberColumn.pack();  nameColumn.pack();  choiceColumn.pack();}  }
class C{  public CharSeq prepend(String another){  return new CharSeq(another + str);}  }
class C{  public void addDataSource(){  data.add(new double[]{0});  dataNames.add("Hist " + data.size());  this.fireDataSourceAdded(data.size());  redraw();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void cleanupDestination(State state,int finalStatus){  closeDestination(state);  if (state.mFilename != null && DownloaderService.isStatusError(finalStatus)) {    new File(state.mFilename).delete();    state.mFilename=null;  }}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.SwitchPreference,defStyle,0);  setSummaryOn(a.getString(com.android.internal.R.styleable.SwitchPreference_summaryOn));  setSummaryOff(a.getString(com.android.internal.R.styleable.SwitchPreference_summaryOff));  setSwitchTextOn(a.getString(com.android.internal.R.styleable.SwitchPreference_switchTextOn));  setSwitchTextOff(a.getString(com.android.internal.R.styleable.SwitchPreference_switchTextOff));  setDisableDependentsState(a.getBoolean(com.android.internal.R.styleable.SwitchPreference_disableDependentsState,false));  a.recycle();}  }
class C{  @Override public LocalResult executeQuery(int maxRows){  return executeQuery(maxRows,null);}  }
class C{  public CreateSnapshotRequest source(byte[] source){  return source(source,0,source.length);}  }
class C{  public void testCreateConfigDirWhenDirectoryNotEmpty() throws Exception {  String configDir="ram:///cargo/testCreateConfigDirWhenDirectoryNotEmpty";  FileObject configDirObject=VFS.getManager().resolveFile(configDir);  configDirObject.resolveFile("somefile").createFile();  TestableAbstractStandaloneConfiguration configuration=new TestableAbstractStandaloneConfiguration(configDir);  configuration.setFileHandler(new VFSFileHandler());  try {    configuration.setupConfigurationDir();    fail("Should have thrown a ContainerException as the directory is not empty");  } catch (  ContainerException expected) {    assertEquals("Invalid configuration dir " + "[ram:///cargo/testCreateConfigDirWhenDirectoryNotEmpty]. When using standalone " + "configurations, the configuration dir must point to an empty directory. Note "+ "that everything in that dir will get deleted by Cargo.",expected.getMessage());  }}  }
class C{  void enforceSealed(){  if (!isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on a not sealed instance.");  }}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public static boolean hasDefaultImplementation(final MethodNode method){  return !method.getAnnotations(IMPLEMENTED_CLASSNODE).isEmpty();}  }
class C{  public AbstractSiteMap parseSiteMap(String contentType,byte[] content,final AbstractSiteMap sitemap) throws UnknownFormatException, IOException {  AbstractSiteMap asmCopy=parseSiteMap(contentType,content,sitemap.getUrl());  asmCopy.setLastModified(sitemap.getLastModified());  return asmCopy;}  }
class C{  public static String filterAllowedCharacters(String input){  StringBuilder var1=new StringBuilder();  char[] var2=input.toCharArray();  int var3=var2.length;  for (int var4=0; var4 < var3; ++var4) {    char var5=var2[var4];    if (isAllowedCharacter(var5))     var1.append(var5);  }  return var1.toString();}  }
class C{  public void deselect(){  if (isSelected()) {    super.deselect();    setNeedToRegenerate(true);  }}  }
class C{  public Period divAssign(final int scalar){  if (scalar == 0)   throw new ArithmeticException(DIVISION_BY_ZERO_ERROR);  if (this.length % scalar == 0)   this.length/=scalar; else switch (this.units) {case Years:    this.units=TimeUnit.Months;  this.length*=12;break;case Weeks:this.units=TimeUnit.Days;this.length*=7;break;}if (this.length % scalar == 0) this.length=this.length / scalar; else throw new LibraryException("cannot be divided by " + scalar);return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.966 -0500",hash_original_method="38AB17DDC792736F5CB32D23FA6E92BF",hash_generated_method="AAE1F1A6D49B0552BBB0959168052AB8") private int nativeGetConstraintInfo(int permission,DrmConstraintInfo constraint){  addTaint(permission);  addTaint(constraint.getTaint());  return getTaintInt();}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public Maybe(T value){  myValue=value;  myIsDefined=true;}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void failoverSession(HttpSession session){  LOG.debug("Failing over session {} to {}",getId(),session.getId());  setNativeSession(session);  for (  String name : attributes.getAttributeNames()) {    LOG.debug("Copying '{}' => {}",name,attributes.getAttribute(name));    session.setAttribute(name,attributes.getAttribute(name));  }  session.setMaxInactiveInterval(attributes.getMaxIntactiveInterval());  manager.putSession(this);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Product_ID")) {      p_M_Product_ID=((BigDecimal)para[i].getParameter()).intValue();    } else     if (name.equals("Implosion")) {      p_implosion=((String)para[i].getParameter()).equals("N") ? false : true;    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void updateDouble(String columnName,double x) throws SQLException {  checkUpdatable();  getField(columnName).setDouble(x);}  }
class C{  private static int removeEntries(final String blacklistToUse,final BlacklistType[] supportedBlacklistTypes,final String[] entries){  for (  final String entry : entries) {    String s=entry;    if (s.contains("\\\\")) {      s=s.replaceAll(Pattern.quote("\\\\"),Matcher.quoteReplacement("\\"));    }    for (    final BlacklistType supportedBlacklistType : supportedBlacklistTypes) {      if (ListManager.listSetContains(supportedBlacklistType + ".BlackLists",blacklistToUse)) {        final String host=(s.indexOf('/',0) == -1) ? s : s.substring(0,s.indexOf('/',0));        final String path=(s.indexOf('/',0) == -1) ? ".*" : s.substring(s.indexOf('/',0) + 1);        try {          Switchboard.urlBlacklist.remove(supportedBlacklistType,blacklistToUse,host,path);        } catch (        final RuntimeException e) {          ConcurrentLog.severe(APP_NAME,e.getMessage() + ": " + host+ "/"+ path);        }      }    }    SearchEventCache.cleanupEvents(true);  }  return entries.length;}  }
class C{  protected StreamAdapter(IgniteDataStreamer<K,V> stmr,StreamMultipleTupleExtractor<T,K,V> extractor){  this.stmr=stmr;  this.multipleTupleExtractor=extractor;}  }
class C{  public String build(){  return strBuilder.toString();}  }
class C{  public static void removeResolvedFunction(final Window parent,final INaviFunction function){  try {    function.removeForwardedFunction();  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00132: " + "Could not remove function forwarding";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The forwarding of function '%s' could not be removed.",function.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The function forwarding of the selected function remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public double nextDoubleFromTo(double from,double to){  return from + (to - from) * randomGenerator.nextDouble();}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean isCompressed(){  return compressed;}  }
class C{  public InclusivePositionUpdater(String category){  fCategory=category;}  }
class C{  private void shutdownConnection(){  log("Shutting down connection");  if (mApiClient != null) {    if (mApplicationStarted) {      if (mApiClient.isConnected() || mApiClient.isConnecting()) {        try {          if (mHelloWorldChannel != null) {            Cast.CastApi.removeMessageReceivedCallbacks(mApiClient,mHelloWorldChannel.getNamespace());            mHelloWorldChannel=null;          }        } catch (        IOException e) {          log("Exception while removing channel");          e.printStackTrace();        }        mApiClient.disconnect();      }      mApplicationStarted=false;    }    mApiClient=null;  }  mSelectedDevice=null;  mWaitingForReconnect=false;  mSessionId=null;}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Santa");  SingletonRepository.getTurnNotifier().dontNotify(teleporterBehaviour);  return true;}  }
class C{  public String toString(){  return key.toString() + ":" + value.toString();}  }
class C{  protected void pushReturnType(InvokeInstruction ins){  ConstantPoolGen cpg=getCPG();  Type type=ins.getType(cpg);  if (type.getType() != T_VOID) {    pushValue(type);  }}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  public char state(){  return fields[2].charAt(0);}  }
class C{  static public Locator south(){  return south(false);}  }
class C{  public void layout(){}  }
class C{  @Override public int serverCount(){  return _owners.length;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SQLDataException(String reason){  super(reason,null,0);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == loadButton) {    String title="Load OSM Data";    if ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0)     title+=" (Bounding Box Mode)";    if ((e.getModifiers() & KeyEvent.SHIFT_MASK) != 0)     title+=" (Overview Mode)";    fileChooser.setDialogTitle(title);    int returnVal=fileChooser.showDialog(this,"Load");    if (returnVal == JFileChooser.APPROVE_OPTION) {      if ((e.getModifiers() & KeyEvent.CTRL_MASK) != 0) {        BoundingBox bb=askForBoundingBox();        if (bb != null)         mapReader.setFilter(bb); else         return;      }      if ((e.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {        EntityClassifier<Boolean> filter=createOverviewFilter();        mapReader.setFilter(filter);      }      readMap(fileChooser.getSelectedFile());    }  } else   if (e.getSource() == saveButton) {    JFileChooser fc=new JFileChooser();    String[] exts=mapWriter.fileFormatDescriptions();    for (int i=0; i < exts.length; i++) {      FileFilter filter=new FileNameExtensionFilter(exts[i],mapWriter.fileFormatExtensions()[i]);      fc.addChoosableFileFilter(filter);    }    fc.setFileFilter(fc.getChoosableFileFilters()[0]);    fc.setCurrentDirectory(fileChooser.getCurrentDirectory());    int returnVal=fc.showSaveDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION && (!fc.getSelectedFile().exists() || JOptionPane.showConfirmDialog(this,"File exists, overwrite?","Confirm",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {      mapWriter.writeMap(fc.getSelectedFile(),getMap(),view.getBoundingBox());    }  } else   if (e.getSource() == statisticsButton) {    Object[][] data=getMap().getStatistics();    JTable table=new JTable(data,new String[]{"Attribute","Value"});    JScrollPane scroller=new JScrollPane(table);    scroller.setPreferredSize(new Dimension(250,300));    JOptionPane.showConfirmDialog(this,scroller,"Map Statistics",JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);  } else   if (e.getSource() == sidebarCheckBox) {    showSidebar(sidebarCheckBox.isSelected());  }}  }
class C{  public TObjectFloatHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static void perform(IR ir){  for (Instruction s=ir.firstInstructionInCodeOrder(); s != null; s=s.nextInstructionInCodeOrder()) {    int numUses=s.getNumberOfUses();    if (numUses > 0) {      int numDefs=s.getNumberOfDefs();      for (int idx=numDefs; idx < numUses + numDefs; idx++) {        Operand use=s.getOperand(idx);        if (use != null) {          if (use instanceof ObjectConstantOperand) {            ObjectConstantOperand oc=(ObjectConstantOperand)use;            if (oc.isMovableObjectConstant()) {              RegisterOperand rop=ir.regpool.makeTemp(use.getType());              Operand jtoc=ir.regpool.makeJTOCOp();              Offset offset=oc.offset;              if (offset.isZero()) {                if (use instanceof StringConstantOperand) {                  throw new OptimizingCompilerException("String constant w/o valid JTOC offset");                } else                 if (use instanceof ClassConstantOperand) {                  throw new OptimizingCompilerException("Class constant w/o valid JTOC offset");                }                offset=Offset.fromIntSignExtend(Statics.findOrCreateObjectLiteral(oc.value));              }              LocationOperand loc=new LocationOperand(offset);              s.insertBefore(Load.create(IA32_REF_LOAD,rop,jtoc,wordOperandForReference(offset.toWord()),loc));              s.putOperand(idx,rop.copyD2U());            } else {              Statics.findOrCreateObjectLiteral(oc.value);              s.putOperand(idx,wordOperandForReference(Magic.objectAsAddress(oc.value).toWord()));            }          } else           if (use instanceof DoubleConstantOperand) {            RegisterOperand rop=ir.regpool.makeTemp(TypeReference.Double);            Operand jtoc=ir.regpool.makeJTOCOp();            DoubleConstantOperand dc=(DoubleConstantOperand)use.copy();            if (dc.offset.isZero()) {              dc.offset=Offset.fromIntSignExtend(Statics.findOrCreateLongSizeLiteral(Double.doubleToLongBits(dc.value)));            }            s.insertBefore(Binary.create(MATERIALIZE_FP_CONSTANT,rop,jtoc,dc));            s.putOperand(idx,rop.copyD2U());          } else           if (use instanceof FloatConstantOperand) {            RegisterOperand rop=ir.regpool.makeTemp(TypeReference.Float);            Operand jtoc=ir.regpool.makeJTOCOp();            FloatConstantOperand fc=(FloatConstantOperand)use.copy();            if (fc.offset.isZero()) {              fc.offset=Offset.fromIntSignExtend(Statics.findOrCreateIntSizeLiteral(Float.floatToIntBits(fc.value)));            }            s.insertBefore(Binary.create(MATERIALIZE_FP_CONSTANT,rop,jtoc,fc));            s.putOperand(idx,rop.copyD2U());          } else           if (use instanceof NullConstantOperand) {            s.putOperand(idx,wordOperandForReference(Word.zero()));          } else           if (use instanceof AddressConstantOperand) {            s.putOperand(idx,wordOperandForReference(((AddressConstantOperand)use).value.toWord()));          } else           if (use instanceof TIBConstantOperand) {            RegisterOperand rop=ir.regpool.makeTemp(TypeReference.TIB);            Operand jtoc=ir.regpool.makeJTOCOp();            Offset offset=((TIBConstantOperand)use).value.getTibOffset();            LocationOperand loc=new LocationOperand(offset);            s.insertBefore(Load.create(IA32_REF_LOAD,rop,jtoc,wordOperandForReference(offset.toWord()),loc));            s.putOperand(idx,rop.copyD2U());          } else           if (use instanceof CodeConstantOperand) {            RegisterOperand rop=ir.regpool.makeTemp(TypeReference.CodeArray);            Operand jtoc=ir.regpool.makeJTOCOp();            Offset offset=((CodeConstantOperand)use).value.findOrCreateJtocOffset();            LocationOperand loc=new LocationOperand(offset);            s.insertBefore(Load.create(IA32_REF_LOAD,rop,jtoc,wordOperandForReference(offset.toWord()),loc));            s.putOperand(idx,rop.copyD2U());          }        }      }    }  }}  }
class C{  public static String streamAttachment(HttpServletResponse response,MAttachment attachment,int attachmentIndex){  if (attachment == null)   return "No Attachment";  int realIndex=-1;  MAttachmentEntry[] entries=attachment.getEntries();  for (int i=0; i < entries.length; i++) {    MAttachmentEntry entry=entries[i];    if (entry.getIndex() == attachmentIndex) {      realIndex=i;      break;    }  }  if (realIndex < 0) {    log.fine("No Attachment Entry for Index=" + attachmentIndex + " - "+ attachment);    return "Attachment Entry not found";  }  MAttachmentEntry entry=entries[realIndex];  if (entry.getData() == null) {    log.fine("Empty Attachment Entry for Index=" + attachmentIndex + " - "+ attachment);    return "Attachment Entry empty";  }  try {    int bufferSize=2048;    int fileLength=entry.getData().length;    response.setContentType(entry.getContentType());    response.setBufferSize(bufferSize);    response.setContentLength(fileLength);    log.fine(entry.toString());    long time=System.currentTimeMillis();    ServletOutputStream out=response.getOutputStream();    out.write(entry.getData());    out.flush();    out.close();    time=System.currentTimeMillis() - time;    double speed=(fileLength / 1024) / ((double)time / 1000);    log.info("Length=" + fileLength + " - "+ time+ " ms - "+ speed+ " kB/sec - "+ entry.getContentType());  } catch (  IOException ex) {    log.log(Level.SEVERE,ex.toString());    return "Streaming error - " + ex;  }  return null;}  }
class C{  public Builder addLengthDelimited(final ByteString value){  if (result.lengthDelimited == null) {    result.lengthDelimited=new ArrayList<ByteString>();  }  result.lengthDelimited.add(value);  return this;}  }
class C{  public void addOfflineMovie(String title,String datasource,MediaSource mediaSource){  if (!movieSettings.getMovieDataSource().contains(datasource)) {    return;  }  int i=1;  Path stubFolder=Paths.get(datasource,title);  while (Files.exists(stubFolder)) {    stubFolder=Paths.get(datasource,title + "(" + i+++ ")");  }  Path stubFile=stubFolder.resolve(title + ".disc");  try {    Files.createDirectory(stubFolder);    Files.createFile(stubFile);  } catch (  IOException e) {    LOGGER.error("could not create stub file: " + e.getMessage());    return;  }  MediaFile mf=new MediaFile(stubFile);  mf.gatherMediaInformation();  Movie movie=new Movie();  movie.setTitle(title);  movie.setPath(stubFolder.toAbsolutePath().toString());  movie.setDataSource(datasource);  movie.setMediaSource(mediaSource);  movie.setDateAdded(new Date());  movie.addToMediaFiles(mf);  movie.setOffline(true);  movie.setNewlyAdded(true);  addMovie(movie);  movie.saveToDb();}  }
class C{  protected int readReference() throws IOException, XMLException {  nextChar();  if (current == '#') {    nextChar();    int i=0;switch (current) {case 'x':      do {        i++;        nextChar();      } while ((current >= '0' && current <= '9') || (current >= 'a' && current <= 'f') || (current >= 'A' && current <= 'F'));    break;default :  do {    i++;    nextChar();  } while (current >= '0' && current <= '9');break;case -1:throw createXMLException("unexpected.eof");}if (i == 1 || current != ';') {throw createXMLException("character.reference");}nextChar();return LexicalUnits.CHARACTER_REFERENCE;} else {int t=readName(LexicalUnits.ENTITY_REFERENCE);if (current != ';') {throw createXMLException("character.reference");}nextChar();return t;}}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static double staticNextDouble(double alpha,double beta){synchronized (shared) {    return shared.nextDouble(alpha,beta);  }}  }
class C{  public void copyBufferToStorage(StorageData storageData,List<Long> platformIdents,Collection<AbstractDataProcessor> dataProcessors,boolean autoFinalize) throws BusinessException, IOException, SerializationException {  if (!isStorageExisting(storageData)) {    this.createStorage(storageData);  }  StorageData local=getLocalStorageDataObject(storageData);  if (!isStorageOpen(local)) {    this.openStorage(local);  }  DefaultData oldestBufferElement=buffer.getOldestElement();  if (null != oldestBufferElement) {    Date fromDate=new Date(oldestBufferElement.getTimeStamp().getTime());    Date toDate=null;    for (    AbstractDataProcessor dataProcessor : dataProcessors) {      if (dataProcessor instanceof TimeFrameDataProcessor) {        TimeFrameDataProcessor timeFrameDataProcessor=(TimeFrameDataProcessor)dataProcessor;        if (timeFrameDataProcessor.getFromDate().after(fromDate)) {          fromDate=timeFrameDataProcessor.getFromDate();        }        toDate=timeFrameDataProcessor.getToDate();        break;      }    }    for (    Long platformId : platformIdents) {      List<DefaultData> toWriteList=storageDataDao.getAllDefaultDataForAgent(platformId.longValue(),fromDate,toDate);      this.writeToStorage(local,toWriteList,dataProcessors,true);    }  }  if (autoFinalize) {    this.closeStorage(local);  }  updateExistingStorageSize(local);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INTERFACE_BODY___INTERFACE_MEMBER_DECLARATION_1:    getInterfaceMemberDeclaration_1().clear();  return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("unchecked") public void readFile(String fileName) throws JDOMException, IOException {  if (checkFile(fileName)) {    Element root=rootFromName(fileName);    Element roster;    if (root == null) {      log.warn("consist file could not be read");      return;    }    roster=root.getChild("roster");    if (roster == null) {      log.debug("consist file does not contain a roster entry");      return;    }    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter("consist"));    try {      Element consist;      do {        consist=consistIterator.next();        consistFromXml(consist);      } while (consistIterator.hasNext());    } catch (    NoSuchElementException nde) {      log.debug("end of consist list");    }  } else {    log.info("Consist file does not exist.  One will be created if necessary.");  }}  }
class C{  public void addPlugin(Plugin plugin) throws OrderingConstraintException {  if (DEBUG) {    System.out.println("Adding plugin " + plugin.getPluginId() + " to execution plan");  }  pluginList.add(plugin);  copyTo(plugin.interPassConstraintIterator(),interPassConstraintList);  copyTo(plugin.intraPassConstraintIterator(),intraPassConstraintList);  for (  DetectorFactory factory : plugin.getDetectorFactories()) {    if (DEBUG) {      System.out.println("  Detector factory " + factory.getShortName());    }    if (factoryMap.put(factory.getFullName(),factory) != null) {      throw new OrderingConstraintException("Detector " + factory.getFullName() + " is defined by more than one plugin");    }  }}  }
class C{  public static String decryptString(String cipherText,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return decryptString(new AesCbcWithIntegrity.CipherTextIvMac(cipherText),secretKeys);}  }
class C{  public static NbtOutputStream writeInflated(NbtTag tag,OutputStream outputStream) throws IOException {  NbtOutputStream out=new NbtOutputStream(new InflaterOutputStream(outputStream));  out.write(tag);  return out;}  }
class C{  @Override public Instance output(){  return m_attributeFilter.output();}  }
class C{  public static final double clampAngleDegree(double angle){  if (angle >= 360.0)   angle%=360.0d;  if (angle < 0.0) {    angle%=360.0d;    angle+=360;  }  return angle;}  }
class C{  @Override public void postCommit(){  IndexCommit currentCommitPoint=core.getDeletionPolicy().getLatestCommit();  if (getCommit) {    indexCommitPoint=currentCommitPoint;  }  if (snapshoot) {    try {      int numberToKeep=numberBackupsToKeep;      if (numberToKeep < 1) {        numberToKeep=Integer.MAX_VALUE;      }      SnapShooter snapShooter=new SnapShooter(core,null,null);      snapShooter.createSnapAsync(currentCommitPoint,numberToKeep,ReplicationHandler.this);    } catch (    Exception e) {      LOG.error("Exception while snapshooting",e);    }  }}  }
class C{  protected BackupSnapshotTask(final Protos.TaskInfo info){  super(info);}  }
class C{  PBKDF2KeyImpl(PBEKeySpec keySpec,String prfAlgo) throws InvalidKeySpecException {  char[] passwd=keySpec.getPassword();  if (passwd == null) {    this.passwd=new char[0];  } else {    this.passwd=passwd.clone();  }  byte[] passwdBytes=getPasswordBytes(this.passwd);  this.salt=keySpec.getSalt();  if (salt == null) {    throw new InvalidKeySpecException("Salt not found");  }  this.iterCount=keySpec.getIterationCount();  if (iterCount == 0) {    throw new InvalidKeySpecException("Iteration count not found");  } else   if (iterCount < 0) {    throw new InvalidKeySpecException("Iteration count is negative");  }  int keyLength=keySpec.getKeyLength();  if (keyLength == 0) {    throw new InvalidKeySpecException("Key length not found");  } else   if (keyLength < 0) {    throw new InvalidKeySpecException("Key length is negative");  }  try {    this.prf=Mac.getInstance(prfAlgo,SunJCE.getInstance());  } catch (  NoSuchAlgorithmException nsae) {    InvalidKeySpecException ike=new InvalidKeySpecException();    ike.initCause(nsae);    throw ike;  }  this.key=deriveKey(prf,passwdBytes,salt,iterCount,keyLength);}  }
class C{  public <T>OverlayUI<T> overlayUI(String name){  try {    checkGuiThread();    URL location=GuiUtils.getResource(name);    FXMLLoader loader=new FXMLLoader(location);    Pane ui=loader.load();    T controller=loader.getController();    OverlayUI<T> pair=new OverlayUI<T>(ui,controller);    try {      if (controller != null) {        controller.getClass().getField("overlayUI").set(controller,pair);      }    } catch (    IllegalAccessException|NoSuchFieldException ignored) {      ignored.printStackTrace();    }    pair.show();    return pair;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean contains(String field){  return mIndex.containsKey(field);}  }
class C{  public static String notEmptyIfNotNull(String value,String name,String info){  if (value == null) {    return value;  }  if (value.trim().length() == 0) {    throw new IllegalArgumentException(name + " cannot be empty" + (info == null ? "" : ", " + info));  }  return value.trim();}  }
class C{  public static Typeface load(final AssetManager assetManager,final String filePath){synchronized (sCachedFonts) {    try {      if (!sCachedFonts.containsKey(filePath) || sCachedFonts.get(filePath).get() == null) {        final Typeface typeface=Typeface.createFromAsset(assetManager,filePath);        sCachedFonts.put(filePath,new WeakReference<Typeface>(typeface));        return typeface;      }    } catch (    Exception e) {      Log.w("Calligraphy","Can't create asset from " + filePath + ". Make sure you have passed in the correct path and file name.",e);      sCachedFonts.put(filePath,null);      return null;    }    return sCachedFonts.get(filePath).get();  }}  }
class C{  private boolean hasGrandchildren(Node n){  return n.hasChildren() && n.getFirstChild().hasChildren();}  }
class C{  private void lock(final Thread t,final R resource,final long timeout) throws InterruptedException {  final ResourceQueue<R,Thread> resourceQueue=declareResource(resource);  resourceQueue.lock(t,timeout);  final Collection<ResourceQueue<R,Thread>> tmp=lockedResources.get(t);  if (tmp == null) {    throw new AssertionError();  }  tmp.add(resourceQueue);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ACTION___ANONYMOUS_ACTION_11:    return anonymous_action_1_1 != null && !anonymous_action_1_1.isEmpty();case UmplePackage.ACTION___CODE_1:  return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.ACTION___ANONYMOUS_ACTION_21:return anonymous_action_2_1 != null && !anonymous_action_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean hasTestException(){  if (test == null)   return false;  for (  Throwable t : exceptions.values()) {    if (t instanceof CodeUnderTestException)     return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.773 -0500",hash_original_method="D2A59B8CE3FF522E41AA18E3F41E01E5",hash_generated_method="6B5ED31DF18619E66F79A277BC7678C1") public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuGroup);  groupId=a.getResourceId(com.android.internal.R.styleable.MenuGroup_id,defaultGroupId);  groupCategory=a.getInt(com.android.internal.R.styleable.MenuGroup_menuCategory,defaultItemCategory);  groupOrder=a.getInt(com.android.internal.R.styleable.MenuGroup_orderInCategory,defaultItemOrder);  groupCheckable=a.getInt(com.android.internal.R.styleable.MenuGroup_checkableBehavior,defaultItemCheckable);  groupVisible=a.getBoolean(com.android.internal.R.styleable.MenuGroup_visible,defaultItemVisible);  groupEnabled=a.getBoolean(com.android.internal.R.styleable.MenuGroup_enabled,defaultItemEnabled);  a.recycle();}  }
class C{  public static void importSql(Connection conn,InputStream in) throws SQLException {  Scanner scanner=new Scanner(in);  scanner.useDelimiter("(;(\r)?\n)|(--\n)");  Statement st=null;  try {    st=conn.createStatement();    while (scanner.hasNext()) {      String line=scanner.next();      if (line.startsWith("/*!") && line.endsWith("*/")) {        int spaceIndex=line.indexOf(' ');        line=line.substring(spaceIndex + 1,line.length() - " */".length());      }      if (line.trim().length() > 0) {        st.execute(line);      }    }  }  finally {    if (st != null) {      st.close();    }  }}  }
class C{  public static Definition makeDefinition(BytecodeInstruction instruction){  if (!instruction.isDefinition())   throw new IllegalArgumentException("expect wrap of a definition to create one");  if (!DefUsePool.isKnown(instruction))   throw new IllegalArgumentException("expect DefUsePool to know the given BytecodeInstruction");  return new Definition(instruction);}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public boolean isMandatory(){  return m_button.isMandatory();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SourceUnit(String name,ReaderSource source,CompilerConfiguration flags,GroovyClassLoader loader,ErrorCollector er){  super(flags,loader,er);  this.name=name;  this.source=source;}  }
class C{  public void testConstructorStringException3(){  String value="92348$*#78987";  int radix=34;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MULTIPLE_IS_A__EXTENDS_NAME_1:    setExtendsName_1((String)newValue);  return;case UmplePackage.MULTIPLE_IS_A__ANONYMOUS_MULTIPLE_IS_A11:getAnonymous_multipleIsA_1_1().clear();getAnonymous_multipleIsA_1_1().addAll((Collection<? extends Anonymous_multipleIsA_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void init() throws SSLException {  if (sslEngine != null) {    return;  }  LOGGER.debug("{} Initializing the SSL Handler",sslFilter.getSessionInfo(session));  InetSocketAddress peer=(InetSocketAddress)session.getAttribute(SslFilter.PEER_ADDRESS);  if (peer == null) {    sslEngine=sslFilter.sslContext.createSSLEngine();  } else {    sslEngine=sslFilter.sslContext.createSSLEngine(peer.getHostName(),peer.getPort());  }  sslEngine.setUseClientMode(sslFilter.isUseClientMode());  if (!sslEngine.getUseClientMode()) {    if (sslFilter.isWantClientAuth()) {      sslEngine.setWantClientAuth(true);    }    if (sslFilter.isNeedClientAuth()) {      sslEngine.setNeedClientAuth(true);    }  }  if (sslFilter.getEnabledCipherSuites() != null) {    sslEngine.setEnabledCipherSuites(sslFilter.getEnabledCipherSuites());  }  if (sslFilter.getEnabledProtocols() != null) {    sslEngine.setEnabledProtocols(sslFilter.getEnabledProtocols());  }  sslEngine.beginHandshake();  handshakeStatus=sslEngine.getHandshakeStatus();  writingEncryptedData=false;  firstSSLNegociation=true;  handshakeComplete=false;  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("{} SSL Handler Initialization done.",sslFilter.getSessionInfo(session));  }}  }
class C{  public BasicAttribute(String id,Object value){  this(id,value,false);}  }
class C{  public static int[] toArray(String s,int family){  byte[] byteArray=toByteArray(s,family);  if (byteArray == null)   return null;  int[] intArray=new int[byteArray.length];  for (int i=0; i < byteArray.length; i++)   intArray[i]=byteArray[i] & 0xFF;  return intArray;}  }
class C{  public static String convertText(final ConversionMethod method,final String text){switch (method) {case PLAIN:{      return text;    }case HEX_ENCODE:{    return ConversionUtils.stringToHex(text);  }case HEX_DECODE:{  return ConversionUtils.hexToStringNoException(text);}case BASE_64_ENCODE:{return ConversionUtils.stringToBase64(text);}case BASE_64_DECODE:{return ConversionUtils.base64ToString(text);}default :return text;}}  }
class C{  public void testTypical(){  m_Filter=getFilter();  performTest();}  }
class C{  private TreeMap<Long,String> orderedChildren(Watcher watcher) throws KeeperException, InterruptedException {  TreeMap<Long,String> orderedChildren=new TreeMap<>();  List<String> childNames=zookeeper.getChildren(dir,watcher,true);  for (  String childName : childNames) {    try {      if (!childName.regionMatches(0,prefix,0,prefix.length())) {        LOG.debug("Found child node with improper name: " + childName);        continue;      }      String suffix=childName.substring(prefix.length());      Long childId=new Long(suffix);      orderedChildren.put(childId,childName);    } catch (    NumberFormatException e) {      LOG.warn("Found child node with improper format : " + childName + " "+ e,e);    }  }  return orderedChildren;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (updateFunction == null) {    throw new NullPointerException();  }  if (initStDev <= 0.0) {    throw new IllegalStateException();  }}  }
class C{  BasicBlock splitEachBlock(BasicBlock bb,IR ir){  if (ir.options.L2M_MAX_BLOCK_SIZE <= 0) {    throw new OptimizingCompilerException("Maximum block size must be a" + " positive number but was " + ir.options.L2M_MAX_BLOCK_SIZE + "!",true);  }  int remainingInstCount=ir.options.L2M_MAX_BLOCK_SIZE;  Enumeration<Instruction> instructions=bb.forwardRealInstrEnumerator();  while (instructions.hasMoreElements()) {    Instruction inst=instructions.nextElement();    remainingInstCount--;    if (remainingInstCount <= 0) {      if (inst.isBranch()) {        return null;      }      if (!instructions.hasMoreElements()) {        return null;      }      return bb.splitNodeWithLinksAt(inst,ir);    }  }  return null;}  }
class C{  public void reset(EvolutionState state,int thread){  VectorSpeciesCGP s=(VectorSpeciesCGP)species;  for (int x=0; x < genome.length; x++)   genome[x]=(float)(state.random[thread].nextFloat());}  }
class C{  public boolean hasOption(String label){  int n=findOption(label);  if (n == -1) {    return false;  }  return options[n].isAvailable;}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public static void customizeCache(Context context,int memoryCacheSizeInKB,int defaultDiskCacheSizeInKB,int stableDiskCacheSizeInKB){  customizeCache(context,memoryCacheSizeInKB,null,defaultDiskCacheSizeInKB,null,stableDiskCacheSizeInKB);}  }
class C{  public boolean debug(){  return soot.PhaseOptions.getBoolean(options,"debug");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.724 -0400",hash_original_method="930B33BA178409D40E0CB2B262DB0E77",hash_generated_method="BD735D0399A1C938B31B1EFA6E0E42BD") public final boolean isInfoEnabled(){  return false;}  }
class C{  public boolean remove(Object o){synchronized (lock) {    if (o == null) {      for (int index=0; index < size; index++)       if (elementData[index] == null) {        fastRemove(index);        return true;      }    } else {      for (int index=0; index < size; index++)       if (o.equals(elementData[index])) {        fastRemove(index);        return true;      }    }  }  return false;}  }
class C{  private void initialize(){  this.setName(NAME);  this.setOrder(EXTENSION_ORDER);}  }
class C{  public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {  int stateForNextChunk=SUPPRESS_LEADING_WS;  int stop=start + length;  int startChunk=start >>> m_chunkBits;  int startColumn=start & m_chunkMask;  int stopChunk=stop >>> m_chunkBits;  int stopColumn=stop & m_chunkMask;  for (int i=startChunk; i < stopChunk; ++i) {    if (i == 0 && m_innerFSB != null)     stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,m_chunkSize - startColumn); else     stateForNextChunk=sendNormalizedSAXcharacters(m_array[i],startColumn,m_chunkSize - startColumn,ch,stateForNextChunk);    startColumn=0;  }  if (stopChunk == 0 && m_innerFSB != null)   stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,stopColumn - startColumn); else   if (stopColumn > startColumn) {    stateForNextChunk=sendNormalizedSAXcharacters(m_array[stopChunk],startColumn,stopColumn - startColumn,ch,stateForNextChunk | SUPPRESS_TRAILING_WS);  }  return stateForNextChunk;}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mApps != null) {    onReleaseResources(mApps);    mApps=null;  }  if (mPackageObserver != null) {    getContext().unregisterReceiver(mPackageObserver);    mPackageObserver=null;  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent propertyChangeEvent){  if (propertyChangeEvent == null) {    String msg=Logging.getMessage("nullValue.PropertyChangeEventIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  super.firePropertyChange(propertyChangeEvent);}  }
class C{  public static boolean sparseEnabled(final byte cutoffByte){  return ((cutoffByte >>> EXPLICIT_CUTOFF_BITS) & 1) == 1;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static double logquantile(double val,double loc,double scale){  return loc + scale * (val - MathUtil.log1mexp(-val));}  }
class C{  protected int index(int val){  int hash, index, length;  final byte[] states=_states;  final int[] set=_set;  length=states.length;  hash=HashFunctions.hash(val) & 0x7fffffff;  index=hash % length;  byte state=states[index];  if (state == FREE)   return -1;  if (state == FULL && set[index] == val)   return index;  return indexRehashed(val,index,hash,state);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'HideVideo' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BEYOND_GROUP_ID' INTEGER,"+ "'TITLE' TEXT,"+ "'ALBUM' TEXT,"+ "'ARTIST' TEXT,"+ "'OLD_PATH_URL' TEXT,"+ "'DISPLAY_NAME' TEXT,"+ "'MIME_TYPE' TEXT,"+ "'DURATION' INTEGER,"+ "'NEW_PATH_URL' TEXT,"+ "'SIZE' INTEGER,"+ "'MOVE_DATE' INTEGER);");}  }
class C{  @Override public boolean onUsed(final RPEntity user){  if (logger.isDebugEnabled()) {    logger.debug("Using this portal has been disabled.");  }  return false;}  }
class C{  protected double generateWaitTime(){  if (state == STATE_WALKING_ELSEWHERE) {    if (location.equals(latestBusStop)) {      state=STATE_WAITING_FOR_BUS;    }  }  if (state == STATE_TRAVELLING_ON_BUS) {    state=STATE_WAITING_FOR_BUS;  }  return 0;}  }
class C{  private void initialize(ReadableFontData data){  this.clearLoca(false);  if (this.loca == null) {    this.loca=new ArrayList<Integer>();  }  if (data != null) {    if (this.numGlyphs < 0) {      throw new IllegalStateException("numglyphs not set on LocaTable Builder.");    }    LocaTable table=new LocaTable(this.header(),data,this.formatVersion,this.numGlyphs);    Iterator<Integer> locaIter=table.iterator();    while (locaIter.hasNext()) {      this.loca.add(locaIter.next());    }  }}  }
class C{  private static void addQueryFieldAliases(Document doc,Node parent,Collection<PojoField> fields){  Collection<PojoField> aliases=new ArrayList<>();  for (  PojoField field : fields) {    if (!field.javaName().equalsIgnoreCase(field.dbName()))     aliases.add(field);  }  if (!aliases.isEmpty()) {    Element prop=addProperty(doc,parent,"aliases",null);    Element map=addElement(doc,prop,"map");    for (    PojoField alias : aliases)     addElement(doc,map,"entry","key",alias.javaName(),"value",alias.dbName());  }}  }
class C{  public void processTuple(String line) throws ParseException {  Matcher accessLogEntryMatcher=accessLogPattern.matcher(line);  if (accessLogEntryMatcher.matches()) {    Map<String,Object> outputMap=new HashMap<String,Object>();    for (int i=0; i < regexGroups.length; i++) {      if (regexGroups[i] != null) {        String value=accessLogEntryMatcher.group(i).trim();        outputMap.put(regexGroups[i],value);        InformationExtractor extractor=infoExtractors.get(regexGroups[i]);        if (extractor != null) {          Map<String,Object> m=extractor.extractInformation(value);          if (m != null) {            outputMap.putAll(m);          }        }      }    }    output.emit(outputMap);  }}  }
class C{  public void resetJam(){  jammed=false;  jammedThisPhase=false;}  }
class C{  @Override public final boolean treatPathsAsOneToken(){  return true;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPInstance[").append(get_ID()).append(",OK=").append(isOK());  String msg=getErrorMsg();  if (msg != null && msg.length() > 0)   sb.append(msg);  sb.append("]");  return sb.toString();}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public void valueChanged(ListSelectionEvent e){  fireColumnSelectionChanged(e);}  }
class C{  protected void commitFailed(Transaction tx){  try {    tx.commit();  } catch (  IgniteException ex) {    assert ex.getCause() instanceof IgniteCheckedException && ex.getCause().getMessage().contains("cache topology is not valid");  }}  }
class C{  public static void main(String[] args){  SpringApplication.run(CommonStarter.class,args);}  }
class C{  protected Node newNode(){  return new GenericDocumentFragment();}  }
class C{  public Builder(){}  }
class C{  private void nextChunk() throws IOException {  chunkSize=getChunkSize();  if (chunkSize < 0) {    throw new MalformedChunkCodingException("Negative chunk size");  }  bof=false;  pos=0;  if (chunkSize == 0) {    eof=true;    parseTrailerHeaders();  }}  }
class C{  public static String calculateFileHash(String filePath) throws Exception {  return calculateFileHash(new File(filePath));}  }
class C{  public LifeInfoView(Context context){  super(context);  this.initialize();}  }
class C{  public void testSessionReceiveEvent() throws Throwable {  ClientSessionListener listener=createListener();  AtomicBoolean received=new AtomicBoolean();  listener.onEvent("foo",null);  PublishResponse response;  response=handler.handle(PublishRequest.builder().withSession(1).withEventIndex(10).withPreviousIndex(1).withEvents(new Event<String>("foo","Hello world!")).build()).get();  assertEquals(response.status(),Response.Status.OK);  assertEquals(response.index(),10);  assertEquals(state.getEventIndex(),10);  assertTrue(received.get());}  }
class C{  private void submit(Throwable e){  String[] report=getDebugReport(e);  if (!hasReportBeenSent(report[1])) {    saveDebugReport(report);    mAct.runOnUiThread(this);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.GENERATOR_CONFIGURATION__CONFIGURATIONS:    return configurations != null && !configurations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public LuaValue pause(U audio,Varargs varargs){  return audio.pause();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void registerDef(BasicBlock b){  definedIn.set(b.getNumber());}  }
class C{  public static final SnapshotException rethrow(Throwable e){  if (e instanceof RuntimeException) {    if (((RuntimeException)e).getCause() instanceof SnapshotException) {      return (SnapshotException)((RuntimeException)e).getCause();    }    throw (RuntimeException)e;  } else   if (e instanceof SnapshotException) {    return (SnapshotException)e;  } else {    return new SnapshotException(e);  }}  }
class C{  private int findLabelFactor(YLabel thisYLabel){  int pixel=this.getPixelsPerGridline(thisYLabel);  int fontHeight=(int)Math.ceil(worker.getFontHeight(gdef.getFont(FONTTAG_AXIS)));  for (int j=0; j < 4; j++) {    if (pixel * thisYLabel.labelFacts[j] >= 2 * fontHeight) {      return thisYLabel.labelFacts[j];    }  }  return -1;}  }
class C{  public boolean inCloudConsoleUrl(Point point,int activeIndex){  double playYStart=VGAP + ACTIVE_USER_IMAGE_HEIGHT - cloudLabelDimension.getHeight() - 3 + (mainPanelDimension.getHeight() * activeIndex) + (USER_LABEL_VERTICAL_STRUT * 2);  double playYEnd=playYStart + cloudLabelDimension.getHeight();  double playXStart=ACTIVE_USER_IMAGE_WIDTH + HGAP + VGAP;  double playXEnd=playXStart + cloudLabelDimension.getWidth();  return (point.getX() > playXStart) && (point.getX() < playXEnd) && (point.getY() > playYStart)&& (point.getY() < playYEnd);}  }
class C{  public static int findClassLabelColumn(MultipleObjectsBundle bundle){  for (int i=0, l=bundle.metaLength(); i < l; ++i) {    if (TypeUtil.CLASSLABEL.isAssignableFromType(bundle.meta(i))) {      return i;    }  }  return -1;}  }
class C{  private String secondsToText(int seconds){  if (seconds > 1) {    return seconds + " " + getActivity().getString(R.string.settings_seconds);  } else {    return seconds + " " + getActivity().getString(R.string.settings_second);  }}  }
class C{  public boolean hasChangeTracking(){  return m_hasChangeTracking;}  }
class C{  public void addField(String fieldName,TokenStream stream){  addField(fieldName,stream,1.0f);}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public static String addPropertiesToURIFromBean(String uri,Object bean) throws Exception {  Map<String,String> properties=PropertyUtil.getProperties(bean);  return PropertyUtil.addPropertiesToURI(uri,properties);}  }
class C{  public Query query(){  return query;}  }
class C{  public T caseEventSource(EventSource object){  return null;}  }
class C{  public static void main(String args[]) throws IOException {  jPlot chart=new jPlot();  double x1[]=new double[]{1.1,1.2,1.5,1.6,2.0};  double y1[]=new double[]{0.1,0.5,0.5,0.6,0};  double x2[]=new double[]{0.2,0.4,1.5,1.6,2};  double y2[]=new double[]{1.1,0.4,2.5,2.6,2.1};  chart.jplot(x1,y1,"k","first line");  chart.setHold(true);  chart.jplot(x2,y2,"r-.","second line");  double x3[]={0.2,0.23,0.39,0.9,0.98};  double y3[]={1.8,2,3,3.2,3.8};  chart.addPlot(x3,y3,"m.","third line");  chart.showInNewFrame();  chart.setBackground(Color.lightGray);  chart.setGridColor(Color.red);  chart.setLineVisibility(jPlot.LAST_IDX,true,true);  chart.addAnnotation(0,2,"note A");  chart.addAnnotation(1.3,0.3,"note B");  chart.setTitle("Distribution");  chart.setLegendPosition(RectangleEdge.RIGHT);  chart.setLabel(AxisEnum.Y,"Y");  chart.setLabel(AxisEnum.X,"seconds");  test1();  test2();  test3();  test4();  test5();}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  public Uid(String uid){  super(uid);}  }
class C{  public VarResolver(){  this("java.lang.Object");}  }
class C{  void checkLayout(Container parent){  if (parent.getLayout() != this) {    throw new IllegalArgumentException("wrong parent for CardLayout");  }}  }
class C{  public boolean onBackPressed(){  return false;}  }
class C{  private void generatePath(Path path,BufferedWriter vectorBW,boolean isLast) throws IOException {  vectorBW.write(path_start);  vectorBW.newLine();  if (path.getName() != null) {    vectorBW.write(name.replace("#name",path.getName()));    vectorBW.newLine();  }  if (path.getMorphingName() != null) {    vectorBW.write(morphingName.replace("#morphingName",path.getMorphingName()));    vectorBW.newLine();  }  if (path.getPathData() != null) {    if (!isLast) {      if (null != path.getMorphingName()) {        CustomLogger.logError("path.getName()=" + path.getName() + "path.getMorphingName()="+ path.getMorphingName()+ " InitPath"+ path.getNormalizedInitialPathData()+ "\r\n final "+ path.getNormalizedFinalPathData());        if (path.getName() == null) {          tempKey=path.getMorphingName();        } else {          tempKey=path.getName();        }        if (path.getNormalizedInitialPathData() != null) {          stringFileWriter.write(stringline.replace("#stringkey",stringPathPrefixInitial + tempKey + currentVectorFileName).replace("#stringvalue",path.getNormalizedInitialPathData()));          stringFileWriter.newLine();          stringFileWriter.write(stringline.replace("#stringkey",stringPathPrefixFinal + tempKey + currentVectorFileName).replace("#stringvalue",path.getNormalizedFinalPathData()));          stringFileWriter.newLine();          vectorBW.write(pathData.replace("#stringPathData",stringPathPrefixInitial + tempKey + currentVectorFileName));          vectorBW.newLine();        } else {          stringFileWriter.write(stringline.replace("#stringkey",stringPathPrefixInitial + tempKey + currentVectorFileName).replace("#stringvalue",path.getPathData()));          stringFileWriter.newLine();          vectorBW.write(pathData.replace("#stringPathData",stringPathPrefixInitial + tempKey + currentVectorFileName));          vectorBW.newLine();        }      } else {        if (path.getName() == null) {          tempKey=currentVectorFileName + (int)Math.ceil(Math.random() * 100000);        } else {          tempKey=path.getName();        }        stringFileWriter.write(stringline.replace("#stringkey",stringPathPrefixInitial + tempKey + currentVectorFileName).replace("#stringvalue",path.getPathData()));        stringFileWriter.newLine();        vectorBW.write(pathData.replace("#stringPathData",stringPathPrefixInitial + tempKey + currentVectorFileName));        vectorBW.newLine();      }    } else {      if (path.getName() == null) {        tempKey=currentVectorFileName + (int)Math.ceil(Math.random() * 100000);      } else {        tempKey=path.getName();      }      stringFileWriter.write(stringline.replace("#stringkey",stringPathPrefixInitial + tempKey + currentVectorFileName).replace("#stringvalue",path.getPathData()));      stringFileWriter.newLine();      vectorBW.write(pathData.replace("#stringPathData",stringPathPrefixInitial + tempKey + currentVectorFileName));      vectorBW.newLine();    }  }  if (path.getFillColor() != null) {    vectorBW.write(fillColor.replace("#fillColor",path.getFillColor()));    vectorBW.newLine();  }  if (path.getStrokeColor() != null) {    vectorBW.write(strokeColor.replace("#strokeColor",path.getStrokeColor()));    vectorBW.newLine();  }  if (path.getStrokeWidth() != null) {    vectorBW.write(strokeWidth.replace("#strokeWidth",path.getStrokeWidth()));    vectorBW.newLine();  }  if (path.getStrokeAlpha() != null) {    vectorBW.write(strokeAlpha.replace("#strokeAlpha",path.getStrokeAlpha()));    vectorBW.newLine();  }  if (path.getFillAlpha() != null) {    vectorBW.write(fillAlpha.replace("#fillAlpha",path.getFillAlpha()));    vectorBW.newLine();  }  if (path.getTrimPathStart() != null) {    vectorBW.write(trimPathStart.replace("#trimPathStart",path.getTrimPathStart()));    vectorBW.newLine();  }  if (path.getTrimPathEnd() != null) {    vectorBW.write(trimPathEnd.replace("#trimPathEnd",path.getTrimPathEnd()));    vectorBW.newLine();  }  if (path.getTrimPathOffset() != null) {    vectorBW.write(trimPathOffset.replace("#trimPathOffset",path.getTrimPathOffset()));    vectorBW.newLine();  }  if (path.getStrokeLineCap() != null) {    vectorBW.write(strokeLineCap.replace("#strokeLineCap",path.getStrokeLineCap()));    vectorBW.newLine();  }  if (path.getStrokeLineJion() != null) {    vectorBW.write(strokeLineJoin.replace("#strokeLineJoin",path.getStrokeLineJion()));    vectorBW.newLine();  }  if (path.getStrokeMiterLimit() != null) {    vectorBW.write(strokeMiterLimit.replace("#strokeMiterLimit",path.getStrokeMiterLimit()));    vectorBW.newLine();  }  vectorBW.write(endtagbloc);  vectorBW.newLine();}  }
class C{  public InputStream post(Object[] parameters) throws IOException {  postCookies();  setParameters(parameters);  return doPost();}  }
class C{  public BasicStroke(){  this(1.0f,CAP_SQUARE,JOIN_MITER,10.0f,null,0.0f);}  }
class C{  public void printStackTrace(PrintWriter err){  err.println(toString());  StackTraceElement[] stack=getInternalStackTrace();  for (  java.lang.StackTraceElement element : stack) {    err.println("\tat " + element);  }  StackTraceElement[] parentStack=stack;  Throwable throwable=getCause();  while (throwable != null) {    err.print("Caused by: ");    err.println(throwable);    StackTraceElement[] currentStack=throwable.getInternalStackTrace();    int duplicates=countDuplicates(currentStack,parentStack);    for (int i=0; i < currentStack.length - duplicates; i++) {      err.println("\tat " + currentStack[i]);    }    if (duplicates > 0) {      err.println("\t... " + duplicates + " more");    }    parentStack=currentStack;    throwable=throwable.getCause();  }}  }
class C{  @Override public void run(){  if (first) {    getMapPane().getMapContent().addMapBoundsListener(this);    first=false;  }  final Rectangle visibleRect=getMapPane().getVisibleRect();  final ReferencedEnvelope displayArea=getMapPane().getDisplayArea();  drawShapes(visibleRect,displayArea,false);}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  return map;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof UnixNumericGroupPrincipal))   return false;  UnixNumericGroupPrincipal that=(UnixNumericGroupPrincipal)o;  if (this.getName().equals(that.getName()) && this.isPrimaryGroup() == that.isPrimaryGroup())   return true;  return false;}  }
class C{  private static void testSPS(){  PrintRequestAttributeSet pras=new HashPrintRequestAttributeSet();  PrintService[] pss=PrintServiceLookup.lookupPrintServices(DocFlavor.SERVICE_FORMATTED.PAGEABLE,pras);  for (int i=0; i < pss.length; i++) {    PrintService ps=pss[i];    String name=ps.getName();    if (name.indexOf("PDF") != -1 || name.indexOf("Acrobat") != -1) {      System.out.println("----");      System.out.println(ps);      Class[] cat=ps.getSupportedAttributeCategories();      for (int j=0; j < cat.length; j++) {        System.out.println("- " + cat[j]);      }    }  }}  }
class C{  public Boolean deletePhysicalPlan(String topologyName){  return awaitResult(delegate.deletePhysicalPlan(topologyName));}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  public void testDescriptorValidatorException() throws Exception {  FileDescriptorProto fileDescriptorProto=FileDescriptorProto.newBuilder().setName("foo.proto").addMessageType(DescriptorProto.newBuilder().setName("Foo").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_OPTIONAL).setType(FieldDescriptorProto.Type.TYPE_INT32).setName("foo").setNumber(1).setDefaultValue("invalid").build()).build()).build();  try {    Descriptors.FileDescriptor.buildFrom(fileDescriptorProto,new FileDescriptor[0]);    fail("DescriptorValidationException expected");  } catch (  DescriptorValidationException e) {    assertTrue(e.getMessage().indexOf("foo") != -1);    assertTrue(e.getMessage().indexOf("Foo") != -1);    assertTrue(e.getMessage().indexOf("invalid") != -1);    assertTrue(e.getCause() instanceof NumberFormatException);    assertTrue(e.getCause().getMessage().indexOf("invalid") != -1);  }}  }
class C{  static Annotation of(String name){  return new AnnotationImpl(name);}  }
class C{  public String toString(){  return "(" + x + ", "+ y+ ", "+ z+ ")";}  }
class C{  public static String OSX_DOCK_ICON(MinecraftDirectory minecraftDir,Set<Asset> assetIndex){  Objects.requireNonNull(minecraftDir);  Objects.requireNonNull(assetIndex);  for (  Asset asset : assetIndex) {    if ("icons/minecraft.icns".equals(asset.getVirtualPath())) {      return "-Xdock:icon=" + minecraftDir.getAsset(asset).getAbsolutePath();    }  }  return null;}  }
class C{  public static void initiateGroupChat(Context ctx,String subject,ArrayList<String> participants){  Intent intent=new Intent(ctx,GroupTalkView.class);  intent.setAction(INTITIATE_GROUPCHAT);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putStringArrayListExtra(GroupTalkView.EXTRA_PARTICIPANTS,participants);  intent.putExtra(GroupTalkView.EXTRA_MODE,GroupChatMode.OUTGOING);  intent.putExtra(GroupTalkView.EXTRA_SUBJECT,subject);  ctx.startActivity(intent);}  }
class C{  public Geometry scenarioEdgesBoundingGeometry(int radiusMeters){  List<Polygon> geoms=new ArrayList<>();  Edge edge=edgeStore.getCursor();  edgeStore.forEachTemporarilyAddedOrDeletedEdge(null);  Geometry result=new UnaryUnionOp(geoms,GeometryUtils.geometryFactory).union();  return result;}  }
class C{  public static float fastLength(Vector3 a){  return (float)Math.sqrt(lengthSquared(a));}  }
class C{  public boolean isGroupChatAbandoned(String chatId){  return getOrCreateGroupChat(chatId).isGroupChatAbandoned();}  }
class C{  public static org.oscm.internal.vo.VOOrganizationVatRate convertToUp(org.oscm.vo.VOOrganizationVatRate oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOOrganizationVatRate newVO=new org.oscm.internal.vo.VOOrganizationVatRate();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRate(oldVO.getRate());  newVO.setOrganization(convertToUp(oldVO.getOrganization()));  return newVO;}  }
class C{  public DExportPrivateKeyOpenSsl(JFrame parent,String entryAlias,PasswordQualityConfig passwordQualityConfig){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.entryAlias=entryAlias;  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  public RapidXYBarPainter(){  this(0.0,0.3,0.7);}  }
class C{  static GeoLocation createGeoLocation(final JSONObject json) throws TwitterException {  try {    if (!json.isNull("geo")) {      String coordinates=json.getJSONObject("geo").getString("coordinates");      coordinates=coordinates.substring(1,coordinates.length() - 1);      final String[] point=InternalStringUtil.split(coordinates,",");      return new GeoLocation(Double.parseDouble(point[0]),Double.parseDouble(point[1]));    }  } catch (  final JSONException jsone) {    throw new TwitterException(jsone);  }  return null;}  }
class C{  public static AlertExecutor[] createAlertExecutors(AlertDefinitionDAO alertDefDAO,List<String> sourceStreams,String alertExecutorID,int numPartitions,String partitionerCls) throws Exception {  LOG.info("Creating alert executors with alertExecutorID: " + alertExecutorID + ", numPartitions: "+ numPartitions+ ", Partition class is: "+ partitionerCls);  PolicyPartitioner partitioner=(PolicyPartitioner)Class.forName(partitionerCls).newInstance();  AlertExecutor[] alertExecutors=new AlertExecutor[numPartitions];  String[] _sourceStreams=sourceStreams.toArray(new String[0]);  for (int i=0; i < numPartitions; i++) {    alertExecutors[i]=new AlertExecutor(alertExecutorID,partitioner,numPartitions,i,alertDefDAO,_sourceStreams);  }  return alertExecutors;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public String subscribe(final String subscriptionName,final Object[] params){  return subscribe(subscriptionName,params,null);}  }
class C{  public S_Return createS_Return(){  S_ReturnImpl s_Return=new S_ReturnImpl();  return s_Return;}  }
class C{  protected ColladaAbstractObject(String namespaceURI){  super(namespaceURI);}  }
class C{  @Override public void onSuccess(DescribeRouteTablesRequest request,DescribeRouteTablesResult result){  OperationContext.restoreOperationContext(this.opContext);  for (  RouteTable routeTable : result.getRouteTables()) {    if (this.aws.vpcs.containsKey(routeTable.getVpcId())) {      NetworkState networkStateToUpdate=this.aws.vpcs.get(routeTable.getVpcId());      networkStateToUpdate.customProperties.put(AWS_VPC_ROUTE_TABLE_ID,routeTable.getRouteTableId());      this.aws.vpcs.put(routeTable.getVpcId(),networkStateToUpdate);    }  }  this.aws.networkCreationStage=this.next;  this.service.handleNetworkStateChanges(this.aws);}  }
class C{  public DataLengthException(String message){  super(message);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStateMachineDefinition_();}  }
class C{  public static boolean isStructure(Class<?> aClass){  return collectionIsAssignableFrom(aClass) || mapIsAssignableFrom(aClass) || isArray(aClass);}  }
class C{  public RemotePaymentModulesManagementServiceImpl(final PaymentModulesManager paymentModulesManager,final CustomerOrderPaymentService customerOrderPaymentService,final FederationFacade federationFacade){  this.paymentModulesManager=paymentModulesManager;  this.customerOrderPaymentService=customerOrderPaymentService;  this.federationFacade=federationFacade;}  }
class C{  public Server(LaunchConfiguration launchConfiguration,String name,byte[] serverIconData){  id=launchConfiguration.getModel().getModelNodeNextId();  this.launchConfiguration=launchConfiguration;  this.name=name;  this.serverIconData=serverIconData;}  }
class C{  public static boolean isTagEnabled(String tag){  if (enableAllTags) {    return true;  }  String[] tags=enabledTags;  if (tags == null || tags.length == 0) {    return false;  }  for (int i=0; i < tags.length; i++) {    if (tags[i].equals(tag)) {      return true;    }  }  return false;}  }
class C{  private String checkCodigoRecepcion(String codCorrecto,RespuestaWS respuesta){  if (respuesta != null) {    if (!codCorrecto.equals(respuesta.getCodigo())) {      return codCorrecto;    }  }  return null;}  }
class C{  private void testQueryAgainstDownReplica() throws Exception {  log.info("Creating collection 'football' with 1 shard and 2 replicas");  new CollectionAdminRequest.Create().setCollectionName("football").setNumShards(1).setReplicationFactor(2).setCreateNodeSet(nodeNames.get(0) + ',' + nodeNames.get(1)).process(cloudClient);  waitForRecoveriesToFinish("football",true);  cloudClient.getZkStateReader().forceUpdateCollection("football");  Replica leader=null;  Replica notLeader=null;  Collection<Replica> replicas=cloudClient.getZkStateReader().getClusterState().getSlice("football","shard1").getReplicas();  for (  Replica replica : replicas) {    if (replica.getStr(ZkStateReader.LEADER_PROP) != null) {      leader=replica;    } else {      notLeader=replica;    }  }  ZkNodeProps m=new ZkNodeProps(Overseer.QUEUE_OPERATION,OverseerAction.STATE.toLower(),ZkStateReader.BASE_URL_PROP,notLeader.getStr(ZkStateReader.BASE_URL_PROP),ZkStateReader.NODE_NAME_PROP,notLeader.getStr(ZkStateReader.NODE_NAME_PROP),ZkStateReader.COLLECTION_PROP,"football",ZkStateReader.SHARD_ID_PROP,"shard1",ZkStateReader.CORE_NAME_PROP,notLeader.getStr(ZkStateReader.CORE_NAME_PROP),ZkStateReader.ROLES_PROP,"",ZkStateReader.STATE_PROP,Replica.State.DOWN.toString());  log.info("Forcing {} to go into 'down' state",notLeader.getStr(ZkStateReader.CORE_NAME_PROP));  DistributedQueue q=Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());  q.offer(Utils.toJSON(m));  verifyReplicaStatus(cloudClient.getZkStateReader(),"football","shard1",notLeader.getName(),Replica.State.DOWN);  String baseUrl=notLeader.getStr(ZkStateReader.BASE_URL_PROP);  if (!baseUrl.endsWith("/"))   baseUrl+="/";  String path=baseUrl + "football";  log.info("Firing queries against path=" + path);  try (HttpSolrClient client=getHttpSolrClient(path)){    client.setSoTimeout(5000);    client.setConnectionTimeout(2000);    SolrCore leaderCore=null;    for (    JettySolrRunner jetty : jettys) {      CoreContainer container=jetty.getCoreContainer();      for (      SolrCore core : container.getCores()) {        if (core.getName().equals(leader.getStr(ZkStateReader.CORE_NAME_PROP))) {          leaderCore=core;          break;        }      }    }    assertNotNull(leaderCore);    long count=0;    while (true) {      count++;      client.query(new SolrQuery("*:*"));      SolrRequestHandler select=leaderCore.getRequestHandler("");      long c=(long)select.getStatistics().get("requests");      if (c == 1) {        break;      } else {        Thread.sleep(100);      }      if (count > 10000) {        fail("After 10k queries we still see all requests being processed by the down replica");      }    }    int moreQueries=TestUtil.nextInt(random(),4,10);    count=1;    for (int i=0; i < moreQueries; i++) {      client.query(new SolrQuery("*:*"));      count++;      SolrRequestHandler select=leaderCore.getRequestHandler("");      long c=(long)select.getStatistics().get("requests");      assertEquals("Query wasn't served by leader",count,c);    }  } }  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(EMAIL);  builder.addAttribute(REL);  builder.addAttribute(VALUE_STRING);  builder.addElement(AttendeeStatus.KEY);  builder.addElement(AttendeeType.KEY);  builder.addElement(EntryLink.KEY);}  }
class C{  public void testForkTimedGetNullTimeUnit(){  testForkTimedGetNullTimeUnit(mainPool());}  }
class C{  public final int findFullRangeIndex(int loc){  if (loc == Integer.MAX_VALUE) {    return mRanges.size() - 1;  }  int min=0;  int max=mRanges.size();  int res=(max + min) / 2;  boolean found=false;  while (!found) {    final RangeData<T> range=mRanges.get(res);    if (range.isInRange(loc)) {      found=true;    } else {      if (loc < range.getStart()) {        max=res;      } else {        min=res;      }      res=(max + min) / 2;    }  }  return res;}  }
class C{  public boolean isWordStart(char aChar){  return Character.isLetter(aChar);}  }
class C{  public final void testValidateUppercaseAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.UPPERCASE,true,allowedCharacters);  assertTrue(characterValidator.validate("AB C-"));}  }
class C{  public Collection<DynamicCacheDescriptor> startReceivedCaches(AffinityTopologyVersion topVer) throws IgniteCheckedException {  List<DynamicCacheDescriptor> started=null;  for (  DynamicCacheDescriptor desc : registeredCaches.values()) {    if (!desc.started() && desc.staticallyConfigured() && !desc.locallyConfigured()) {      if (desc.receivedFrom() != null) {        AffinityTopologyVersion startVer=desc.receivedFromStartVersion();        if (startVer == null || startVer.compareTo(topVer) > 0)         continue;      }      if (desc.onStart()) {        if (started == null)         started=new ArrayList<>();        started.add(desc);        prepareCacheStart(desc.cacheConfiguration(),null,desc.cacheType(),false,null,desc.deploymentId(),topVer);      }    }  }  return started;}  }
class C{  public Aggregator resolveAggregator(Aggregator root){  Aggregator aggregator=root;  for (int i=0; i < pathElements.size(); i++) {    AggregationPath.PathElement token=pathElements.get(i);    aggregator=aggregator.subAggregator(token.name);    assert (aggregator instanceof SingleBucketAggregator && i <= pathElements.size() - 1) || (aggregator instanceof NumericMetricsAggregator && i == pathElements.size() - 1) : "this should be picked up before aggregation execution - on validate";  }  return aggregator;}  }
class C{  public static ImmutableList<Statement> siteLink(String entityId,String link,String language){  return siteLink(entityId,link,language,false);}  }
class C{  public void removeGadget(){  if (currentGadget == null) {    return;  }  currentGadget.clear();  currentGadget=null;}  }
class C{  private static boolean isHex(final byte c){  return ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');}  }
class C{  protected boolean useNIO(){  return this.useNIO;}  }
class C{  public static <T>int binarySearchFloor(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  @SuppressWarnings("unchecked") public static <ValueT>ValueT toObject(ByteBuffer bf) throws IOException, ClassNotFoundException {  Object obj=null;  InputStream is=null;  ObjectInputStream ois=null;  try {    is=new ByteBufferBackedInputStream(bf);    ois=new ObjectInputStream(is);    obj=ois.readObject();  }  finally {    if (is != null) {      is.close();    }    if (ois != null) {      ois.close();    }  }  return (ValueT)obj;}  }
class C{  public BOpBase clearProperty(final String name){  if (name == null)   throw new IllegalArgumentException();  final BOpBase tmp=(BOpBase)this.clone();  tmp._clearProperty(name);  return tmp;}  }
class C{  protected double[][] extractContinuousData(ContinuousVariableAnalysis variableAnalysis) throws IOException {  int maxNumOfCols=countNumberOfColumns();  int numOfCols=variableAnalysis.getVariables().size();  int numOfRows=countNumberOfLines() - 1;  double[][] data=new double[numOfRows][numOfCols];  try (FileChannel fc=new RandomAccessFile(dataFile.toFile(),"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    skipToNextLine(buffer);    int[] excludedIndices=variableAnalysis.getExcludedIndices();    int excludedIndex=0;    int excludedColumn=excludedIndices[excludedIndex];    int row=0;    int col=0;    int colCount=0;    byte currentChar=-1;    byte prevChar=NEW_LINE;    StringBuilder dataBuilder=new StringBuilder();    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delimiter || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        String value=dataBuilder.toString();        dataBuilder.delete(0,dataBuilder.length());        if (colCount == excludedColumn) {          excludedIndex++;          if (excludedIndex < excludedIndices.length) {            excludedColumn=excludedIndices[excludedIndex];          }        } else {          if (colCount < maxNumOfCols) {            if (value.length() > 0) {              try {                data[row][col++]=Double.parseDouble(value);              } catch (              NumberFormatException exception) {                throw new IOException(String.format("Unable to parse data at line %d column %d.",row + 2,colCount + 1),exception);              }            } else {              String errMsg=String.format("Missing data at line %d column %d.",row + 2,colCount + 1);              LOGGER.error(errMsg);              throw new IOException(errMsg);            }          } else {            String errMsg=String.format("Number of columns exceeded at line %d.  Expect %d column(s) but found %d.",row + 2,maxNumOfCols,colCount + 1);            LOGGER.error(errMsg);            throw new IOException(errMsg);          }        }        colCount++;        if (currentChar == NEW_LINE) {          if (col < numOfCols) {            String errMsg=String.format("Insufficient number of columns at line %d.  Expect %d column(s) but found %d.",row + 2,maxNumOfCols,colCount);            LOGGER.error(errMsg);            throw new IOException(errMsg);          }          colCount=0;          col=0;          row++;          excludedIndex=0;          excludedColumn=excludedIndices[excludedIndex];        }      } else       if (currentChar > SPACE && (currentChar != SINGLE_QUOTE && currentChar != DOUBLE_QUOTE)) {        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    if (currentChar > -1 && currentChar != NEW_LINE) {      if (currentChar == delimiter) {        String errMsg=String.format("Missing data at line %d column %d.",row + 2,col + 1);        LOGGER.error(errMsg);        throw new IOException(errMsg);      } else {        String value=dataBuilder.toString();        dataBuilder.delete(0,dataBuilder.length());        if (colCount != excludedColumn) {          if (colCount < maxNumOfCols) {            if (value.length() > 0) {              try {                data[row][col++]=Double.parseDouble(value);              } catch (              NumberFormatException exception) {                throw new IOException(String.format("Unable to parse data at line %d column %d.",row + 2,colCount + 1),exception);              }            } else {              String errMsg=String.format("Missing data at line %d column %d.",row + 2,colCount + 1);              LOGGER.error(errMsg);              throw new IOException(errMsg);            }          } else {            String errMsg=String.format("Number of columns exceeded at line %d.  Expect %d column(s) but found %d.",row + 2,maxNumOfCols,colCount + 1);            LOGGER.error(errMsg);            throw new IOException(errMsg);          }        }      }    }  }   return data;}  }
class C{  public boolean isSettingScreenResolutionSupported(){  return settingScreenResolutionSupported;}  }
class C{  public List<StorageUnitEntity> createDatabaseEntitiesForBusinessObjectDataAvailabilityTesting(String partitionKeyGroupName,List<SchemaColumn> columns,List<SchemaColumn> partitionColumns,int partitionColumnPosition,List<String> subPartitionValues,boolean allowDuplicateBusinessObjectData,List<String> expectedRequestStorageNames){  List<StorageUnitEntity> availableStorageUnits=new ArrayList<>();  String partitionKey=partitionColumns.isEmpty() ? AbstractDaoTest.PARTITION_KEY : partitionColumns.get(0).getName();  if (businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(AbstractDaoTest.NAMESPACE,AbstractDaoTest.BDEF_NAME,AbstractDaoTest.FORMAT_USAGE_CODE,AbstractDaoTest.FORMAT_FILE_TYPE_CODE,AbstractDaoTest.FORMAT_VERSION)) == null) {    businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractDaoTest.NAMESPACE,AbstractDaoTest.BDEF_NAME,AbstractDaoTest.FORMAT_USAGE_CODE,AbstractDaoTest.FORMAT_FILE_TYPE_CODE,AbstractDaoTest.FORMAT_VERSION,AbstractDaoTest.FORMAT_DESCRIPTION,AbstractDaoTest.LATEST_VERSION_FLAG_SET,partitionKey,partitionKeyGroupName,AbstractDaoTest.NO_ATTRIBUTES,AbstractDaoTest.SCHEMA_DELIMITER_PIPE,AbstractDaoTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractDaoTest.SCHEMA_NULL_VALUE_BACKSLASH_N,columns,partitionColumns);  }  StorageEntity storageEntity1=storageDao.getStorageByName(AbstractDaoTest.STORAGE_NAME);  if (storageEntity1 == null) {    storageEntity1=storageDaoTestHelper.createStorageEntity(AbstractDaoTest.STORAGE_NAME);  }  StorageEntity storageEntity2=storageDao.getStorageByName(AbstractDaoTest.STORAGE_NAME_2);  if (storageEntity2 == null) {    storageEntity2=storageDaoTestHelper.createStorageEntity(AbstractDaoTest.STORAGE_NAME_2);  }  StorageUnitStatusEntity storageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(StorageUnitStatusEntity.ENABLED);  for (  String partitionValue : AbstractDaoTest.SORTED_PARTITION_VALUES) {    BusinessObjectDataEntity businessObjectDataEntity;    if (partitionColumnPosition == BusinessObjectDataEntity.FIRST_PARTITION_COLUMN_POSITION) {      businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractDaoTest.NAMESPACE,AbstractDaoTest.BDEF_NAME,AbstractDaoTest.FORMAT_USAGE_CODE,AbstractDaoTest.FORMAT_FILE_TYPE_CODE,AbstractDaoTest.FORMAT_VERSION,partitionValue,subPartitionValues,AbstractDaoTest.DATA_VERSION,AbstractDaoTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);    } else {      List<String> testSubPartitionValues=new ArrayList<>(subPartitionValues);      testSubPartitionValues.set(partitionColumnPosition - 2,partitionValue);      businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractDaoTest.NAMESPACE,AbstractDaoTest.BDEF_NAME,AbstractDaoTest.FORMAT_USAGE_CODE,AbstractDaoTest.FORMAT_FILE_TYPE_CODE,AbstractDaoTest.FORMAT_VERSION,AbstractDaoTest.PARTITION_VALUE,testSubPartitionValues,AbstractDaoTest.DATA_VERSION,AbstractDaoTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);    }    if (AbstractDaoTest.STORAGE_1_AVAILABLE_PARTITION_VALUES.contains(partitionValue)) {      StorageUnitEntity storageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity1,businessObjectDataEntity,storageUnitStatusEntity,AbstractDaoTest.NO_STORAGE_DIRECTORY_PATH);      if (expectedRequestStorageNames.contains(AbstractDaoTest.STORAGE_NAME)) {        availableStorageUnits.add(storageUnitEntity);      }    }    if (AbstractDaoTest.STORAGE_2_AVAILABLE_PARTITION_VALUES.contains(partitionValue) && (allowDuplicateBusinessObjectData || !AbstractDaoTest.STORAGE_1_AVAILABLE_PARTITION_VALUES.contains(partitionValue))) {      StorageUnitEntity storageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity2,businessObjectDataEntity,storageUnitStatusEntity,AbstractDaoTest.NO_STORAGE_DIRECTORY_PATH);      if (expectedRequestStorageNames.contains(AbstractDaoTest.STORAGE_NAME_2)) {        availableStorageUnits.add(storageUnitEntity);      }    }  }  return availableStorageUnits;}  }
class C{  public boolean isUpdateDisplayNameSupported(){  return updateDisplayNameSupported;}  }
class C{  @Override public boolean hasWatcherTriggered(String watcherName){  return device.hasWatcherTriggered(watcherName);}  }
class C{  @Override protected void initListeners(){  ClickAgeraObservable clickObservable=new ClickAgeraObservable();  clickObservable.addUpdatable(new ClickUpdate());  this.clickButton.setOnClickListener(clickObservable);}  }
class C{  private void dynInit(){  findChargeElementID();  DefaultTableModel model=new DefaultTableModel(getData(),getColumnNames());  dataTable.setModel(model);  setColumnClass(dataTable);  findTaxCategoryID();}  }
class C{  public Bounds addVerticalPlane(final PlanetModel planetModel,final double longitude,final Plane verticalPlane,final Membership... bounds){  return addPlane(planetModel,verticalPlane,bounds);}  }
class C{  public static Object sum(Iterator<Object> self,Object initialValue){  return sum(toList(self),initialValue,false);}  }
class C{  public static Byte valueOf(byte i){  return new Byte(i);}  }
class C{  private void applyFilter(String newFilter){  if (doNotFilter)   return;  doNotChangeDocument=true;  final ActionListener[] listeners=unregisterAllActionListeners(comboBox);  isFiltering=true;  try {    if (filterEnabled) {      filterMatcherEditor.setFilterText(new String[]{newFilter});    }  }  finally {    isFiltering=false;    registerAllActionListeners(comboBox,listeners);    doNotChangeDocument=false;  }}  }
class C{  public synchronized void addVertex(Vertex vertex){  throwReadOnly();}  }
class C{  public void writePdfs(){  double mi=0.0;  double miCont=0.0;  System.out.println("nextVal p(next) prevVal p(prev) p(joint) logTerm localVal");  for (int nextVal=0; nextVal < base; nextVal++) {    double p_next=(double)nextCount[nextVal] / (double)observations;    for (int prevVal=0; prevVal < base_power_k; prevVal++) {      double p_prev=(double)pastCount[prevVal] / (double)observations;      double p_joint=(double)nextPastCount[nextVal][prevVal] / (double)observations;      if (p_joint * p_next * p_prev > 0.0) {        double logTerm=p_joint / (p_next * p_prev);        double localValue=Math.log(logTerm) / log_base;        miCont=p_joint * localValue;        System.out.println(String.format("%7d    %.2f %7d    %.2f     %.2f    %.2f     %.2f",nextVal,p_next,prevVal,p_prev,p_joint,logTerm,localValue));      } else {        miCont=0.0;        System.out.println(String.format("%7d    %.2f %7d    %.2f     %.2f    %.2f     %.2f",nextVal,p_next,prevVal,p_prev,p_joint,0.0,0.0));      }      mi+=miCont;    }  }  System.out.println("Average is " + mi);  return;}  }
class C{  private RawContacts(){}  }
class C{  protected double computeQij(double[][] qij,double[][] solution){  double qij_sum=0;  for (int i=1; i < qij.length; i++) {    final double[] qij_i=qij[i], vi=solution[i];    for (int j=0; j < i; j++) {      qij_sum+=qij_i[j]=qij[j][i]=1. / (1. + sqDist(vi,solution[j]));    }  }  return qij_sum * 2;}  }
class C{  private BandwidthMeasurementExchange createExchange(boolean asInitiator,InputStream inputStream,OutputStream outputStream,FriendStore friendStore,MessageStore messageStore){  BandwidthMeasurementExchange exchange=new BandwidthMeasurementExchange(inputStream,outputStream,asInitiator,friendStore,messageStore,callback);  return exchange;}  }
class C{  public void memberCrashed(MembershipEvent event){}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public void defineIO(){}  }
class C{  public boolean isPad(){  return pad;}  }
class C{  private String updateValueInCommaSeparatedList(String list,String key,String newValue){  StringBuilder newPrefList=new StringBuilder();  if (TextUtils.isEmpty(list)) {    newPrefList.append(key).append(':').append(newValue);  } else {    String[] prefValues=list.split(",");    boolean first=true;    boolean found=false;    for (    String value : prefValues) {      final int delimiter=value.indexOf(':');      if (delimiter > 0) {        if (key.equals(value.substring(0,delimiter))) {          if (first) {            first=false;          } else {            newPrefList.append(',');          }          found=true;          newPrefList.append(key).append(':').append(newValue);        } else {          if (first) {            first=false;          } else {            newPrefList.append(',');          }          newPrefList.append(value);        }      }    }    if (!found) {      newPrefList.append(',');      newPrefList.append(key).append(':').append(newValue);    }  }  return newPrefList.toString();}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  public int size(){  return size;}  }
class C{  public static IStatus makeCommittable(IResource resource,Object context){  return makeCommittable(new IResource[]{resource},context);}  }
class C{  private static int stringToHash(String s){  int len=s.length();  int hash=len;  hash<<=5;  hash+=s.charAt(0) - 0x60;  int j=len;  for (int i=0; i < 4 && j > 0; i++) {    j--;    hash<<=5;    hash+=s.charAt(j) - 0x60;  }  return hash;}  }
class C{  public void addElement(int value){  int indexRelativeToCache=m_firstFree - m_buildCacheStartIndex;  if (indexRelativeToCache >= 0 && indexRelativeToCache < m_blocksize) {    m_buildCache[indexRelativeToCache]=value;    ++m_firstFree;  } else {    int index=m_firstFree >>> m_SHIFT;    int offset=m_firstFree & m_MASK;    if (index >= m_map.length) {      int newsize=index + m_numblocks;      int[][] newMap=new int[newsize][];      System.arraycopy(m_map,0,newMap,0,m_map.length);      m_map=newMap;    }    int[] block=m_map[index];    if (null == block)     block=m_map[index]=new int[m_blocksize];    block[offset]=value;    m_buildCache=block;    m_buildCacheStartIndex=m_firstFree - offset;    ++m_firstFree;  }}  }
class C{  public boolean hasRating(){  return hasExtension(Rating.class);}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  mFriendAdapter.cleanup();  mActiveListRef.removeEventListener(mActiveListRefListener);  mSharedWithRef.removeEventListener(mSharedWithListener);}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  private long reencode(){  try {    PngReader reader=new PngReader(orig);    if (!shouldRun(reader.imgInfo)) {      reader.close();      return -1;    }    imgInfo=reader.imgInfo;    OutputStream os=writeToFile ? new FileOutputStream(tempFile) : new NullOs();    PngWriter writer=writerFactory.createPngWriter(os,reader.imgInfo);    writer.copyChunksFrom(reader.getChunksList());    long t0=System.currentTimeMillis();    for (int i=0; i < reader.imgInfo.rows; i++) {      writer.writeRow(reader.readRow());    }    long t1=System.currentTimeMillis();    reader.end();    writer.end();    os.close();    idatbytesOri=reader.getChunkseq().getIdatBytes();    extrainfo=writer.getDebuginfo() + " " + writer.getPixelsWriter().getFiltersUsed();    compression=writer.getPixelsWriter().getCompression();    if (writeToFile)     PngHelperInternal.debug("Result in " + tempFile);    return t1 - t0;  } catch (  Exception e) {    throw new RuntimeException("error with " + orig,e);  }}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    expression.visit(v);    for (    SwitchCase sc : getCases()) {      sc.visit(v);    }  }}  }
class C{  public static ThreadPoolExecutor newThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory){  return newThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory,defaultHandler);}  }
class C{  public Object remove(int index){  Object old=get(index);  content.remove(index);  modCount++;  return old;}  }
class C{  public UndoStackSupport(){}  }
class C{  public SuperMethodInvocation newSuperMethodInvocation(){  SuperMethodInvocation result=new SuperMethodInvocation(this);  return result;}  }
class C{  public static NewSplitEmittedTerm createNewTerm(String term,int splitno,int flushno){  return new NewSplitEmittedTerm(term,splitno,flushno);}  }
class C{  public String toString(){  ByteArrayOutputStream out=new ByteArrayOutputStream();  for (int i=0; i < repn.length - 1; i++) {    out.write(NYBBLE[(repn[i] >> 4) & 0x0F],0,4);    out.write(NYBBLE[repn[i] & 0x0F],0,4);    if (i % BYTES_PER_LINE == BYTES_PER_LINE - 1) {      out.write('\n');    } else {      out.write(' ');    }  }  for (int i=BITS_PER_UNIT * (repn.length - 1); i < length; i++) {    out.write(get(i) ? '1' : '0');  }  return new String(out.toByteArray());}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void invalidateRangeInfo(){  this.maxValue=null;  this.valueRange=null;}  }
class C{  @Override public void updateBoolean(int columnIndex,boolean x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBoolean(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueBoolean.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public AsmGenerator(Log log,String osDestJar,ICreateInfo createInfo){  mLog=log;  mOsDestJar=osDestJar;  mInjectClasses=createInfo.getInjectedClasses();  mStubMethods=new HashSet<String>(Arrays.asList(createInfo.getOverriddenMethods()));  mDelegateMethods=new HashMap<String,Set<String>>();  for (  String signature : createInfo.getDelegateMethods()) {    int pos=signature.indexOf('#');    if (pos <= 0 || pos >= signature.length() - 1) {      continue;    }    String className=binaryToInternalClassName(signature.substring(0,pos));    String methodName=signature.substring(pos + 1);    Set<String> methods=mDelegateMethods.get(className);    if (methods == null) {      methods=new HashSet<String>();      mDelegateMethods.put(className,methods);    }    methods.add(methodName);  }  for (  String className : createInfo.getDelegateClassNatives()) {    className=binaryToInternalClassName(className);    Set<String> methods=mDelegateMethods.get(className);    if (methods == null) {      methods=new HashSet<String>();      mDelegateMethods.put(className,methods);    }    methods.add(DelegateClassAdapter.ALL_NATIVES);  }  mRenameClasses=new HashMap<String,String>();  mClassesNotRenamed=new HashSet<String>();  String[] renameClasses=createInfo.getRenamedClasses();  int n=renameClasses.length;  for (int i=0; i < n; i+=2) {    assert i + 1 < n;    String oldFqcn=binaryToInternalClassName(renameClasses[i]);    String newFqcn=binaryToInternalClassName(renameClasses[i + 1]);    mRenameClasses.put(oldFqcn,newFqcn);    mClassesNotRenamed.add(oldFqcn);  }  mDeleteReturns=new HashMap<String,Set<String>>();  String[] deleteReturns=createInfo.getDeleteReturns();  Set<String> returnTypes=null;  String renamedClass=null;  for (  String className : deleteReturns) {    if (className == null) {      if (returnTypes != null) {        mDeleteReturns.put(renamedClass,returnTypes);      }      renamedClass=null;      continue;    }    if (renamedClass == null) {      renamedClass=binaryToInternalClassName(className);      continue;    }    if (returnTypes == null) {      returnTypes=new HashSet<String>();    }    returnTypes.add(binaryToInternalClassName(className));  }}  }
class C{  private MGRSComponents breakMGRSString(String MGRSString){  int num_digits;  int num_letters;  int i=0;  int j=0;  long error_code=MGRS_NO_ERROR;  int zone=0;  int[] letters=new int[3];  long easting=0;  long northing=0;  int precision=0;  while (i < MGRSString.length() && MGRSString.charAt(i) == ' ') {    i++;  }  j=i;  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {    i++;  }  num_digits=i - j;  if (num_digits <= 2)   if (num_digits > 0) {    zone=Integer.parseInt(MGRSString.substring(j,i));    if ((zone < 1) || (zone > 60))     error_code|=MGRS_STRING_ERROR;  } else   error_code|=MGRS_STRING_ERROR;  j=i;  while (i < MGRSString.length() && Character.isLetter(MGRSString.charAt(i))) {    i++;  }  num_letters=i - j;  if (num_letters == 3) {    letters[0]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j)));    if ((letters[0] == LETTER_I) || (letters[0] == LETTER_O))     error_code|=MGRS_STRING_ERROR;    letters[1]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j + 1)));    if ((letters[1] == LETTER_I) || (letters[1] == LETTER_O))     error_code|=MGRS_STRING_ERROR;    letters[2]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j + 2)));    if ((letters[2] == LETTER_I) || (letters[2] == LETTER_O))     error_code|=MGRS_STRING_ERROR;  } else   error_code|=MGRS_STRING_ERROR;  j=i;  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {    i++;  }  num_digits=i - j;  if ((num_digits <= 10) && (num_digits % 2 == 0)) {    int n;    double multiplier;    n=num_digits / 2;    precision=n;    if (n > 0) {      easting=Integer.parseInt(MGRSString.substring(j,j + n));      northing=Integer.parseInt(MGRSString.substring(j + n,j + n + n));      multiplier=Math.pow(10.0,5 - n);      easting*=multiplier;      northing*=multiplier;    } else {      easting=0;      northing=0;    }  } else   error_code|=MGRS_STRING_ERROR;  last_error=error_code;  if (error_code == MGRS_NO_ERROR)   return new MGRSComponents(zone,letters[0],letters[1],letters[2],easting,northing,precision);  return null;}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public static long decryptCTR(final byte[] concatenatedHashValue,final String base64EncryptedTurnOverValue,final SecretKey symmetricKey) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final byte[] encryptedTurnOverValue=CashBoxUtils.base64Decode(base64EncryptedTurnOverValue,false);  final IvParameterSpec ivSpec=new IvParameterSpec(IV);  final Cipher cipher=Cipher.getInstance("AES/CTR/NoPadding","BC");  cipher.init(Cipher.DECRYPT_MODE,symmetricKey,ivSpec);  final byte[] testPlainTurnOverValueComplete=cipher.doFinal(encryptedTurnOverValue);  return getLong(testPlainTurnOverValueComplete);}  }
class C{  @Override void onException(final Exception e){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.308 -0500",hash_original_method="5BEDF6211D5BCB4D36F053D483B3651C",hash_generated_method="D7B0492C586B0D3F3B98C6AA5C3E336D") public void sendFile(String filename,int mode,InputStream input,String hostname) throws UnknownHostException, IOException {  sendFile(filename,mode,input,InetAddress.getByName(hostname),DEFAULT_PORT);}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"CreatePrivateActivatable$PrivateActivatable")).start();}  }
class C{  public PaintListenerSupport(Object source){  super(source);}  }
class C{  public QueryStringDecoderUtil(String uri,boolean hasPath){  this(uri,Charset.defaultCharset(),hasPath);}  }
class C{  @SuppressWarnings("unchecked") protected Object convertToDate(Class type,Object value){  DateFormat df=new SimpleDateFormat(TS_FORMAT);  if (value instanceof String) {    try {      if (StringUtils.isEmpty(value.toString())) {        return null;      }      return df.parse((String)value);    } catch (    Exception pe) {      throw new ConversionException("Error converting String to Timestamp");    }  }  throw new ConversionException("Could not convert " + value.getClass().getName() + " to "+ type.getName());}  }
class C{  private String createStartChoiceMomentWithFictionalProgressXML(String momentId,double timeoutLengthMinutes,String choiceDescription,String defaultChoiceId,String progressDescription){  String xml="";  xml+=createStartChoiceMomentXml(momentId,timeoutLengthMinutes,choiceDescription,defaultChoiceId);  xml+=createFictionalProgressXml(progressDescription);  return xml;}  }
class C{  public AcelaMessage(byte[] a){  super(String.valueOf(a));}  }
class C{  public static String aspectRatioDescription(Size size){  Size aspectRatio=reduce(size);  return aspectRatio.width() + "x" + aspectRatio.height();}  }
class C{  public void fullFrame(int offsetDelta,int[] localTags,int[] localData,int[] stackTags,int[] stackData){  numOfEntries++;  output.write(255);  write16(offsetDelta);  int n=localTags.length;  write16(n);  for (int i=0; i < n; i++)   writeTypeInfo(localTags[i],localData[i]);  n=stackTags.length;  write16(n);  for (int i=0; i < n; i++)   writeTypeInfo(stackTags[i],stackData[i]);}  }
class C{  @Override protected void onDestroy(){  Log.v("Ringdroid","EditActivity OnDestroy");  mLoadingKeepGoing=false;  mRecordingKeepGoing=false;  closeThread(mLoadSoundFileThread);  closeThread(mRecordAudioThread);  closeThread(mSaveSoundFileThread);  mLoadSoundFileThread=null;  mRecordAudioThread=null;  mSaveSoundFileThread=null;  if (mProgressDialog != null) {    mProgressDialog.dismiss();    mProgressDialog=null;  }  if (mAlertDialog != null) {    mAlertDialog.dismiss();    mAlertDialog=null;  }  if (mPlayer != null) {    if (mPlayer.isPlaying() || mPlayer.isPaused()) {      mPlayer.stop();    }    mPlayer.release();    mPlayer=null;  }  super.onDestroy();}  }
class C{  public CustomTabsIntent createIntent(){  if (connection.isDisconnected()) {    throw new DeveloperError("An active connection to custom tabs service is required for intent creation");  }  Session session=connection.getSession();  CustomTabsIntent.Builder builder=new CustomTabsIntent.Builder(session.getCustomTabsSession());  for (  Composer composer : composers) {    builder=composer.compose(builder);  }  return builder.build();}  }
class C{  @Override public boolean canProduceRules(){  if (m_Associator instanceof AssociationRulesProducer) {    return ((AssociationRulesProducer)m_Associator).canProduceRules();  }  return false;}  }
class C{  public Polygon createPolygon(Coordinate[] shell){  return createPolygon(createLinearRing(shell));}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x2=BytesTo32Bits(src,srcIndex) ^ gSubKeys[OUTPUT_WHITEN];  int x3=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[OUTPUT_WHITEN + 1];  int x0=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[OUTPUT_WHITEN + 2];  int x1=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[OUTPUT_WHITEN + 3];  int k=ROUND_SUBKEYS + 2 * ROUNDS - 1;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x1^=t0 + 2 * t1 + gSubKeys[k--];    x0=(x0 << 1 | x0 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x1=x1 >>> 1 | x1 << 31;    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x3^=t0 + 2 * t1 + gSubKeys[k--];    x2=(x2 << 1 | x2 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x3=x3 >>> 1 | x3 << 31;  }  Bits32ToBytes(x0 ^ gSubKeys[INPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x1 ^ gSubKeys[INPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x2 ^ gSubKeys[INPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x3 ^ gSubKeys[INPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  public Intent buildRingtonePickerIntent(){  int type=getRingtoneType();  Intent i=new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);  i.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI,onRestoreRingtone());  i.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,RingtoneManager.getDefaultUri(type));  i.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT,getShowDefault());  i.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT,getShowSilent());  i.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,type);  i.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,getNonEmptyDialogTitle());  return i;}  }
class C{  public FileTreeModel(boolean showFiles){  this.showFiles=showFiles;}  }
class C{  public Vertex applySRAIX(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network) throws Exception {  Vertex sentence=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex apikey=getRelationship(Primitive.APIKEY);  String apikeyValue=null;  if (apikey != null) {    apikey=apikey.applyQuotient(variables,network);    apikeyValue=apikey.printString();  }  Vertex limit=getRelationship(Primitive.LIMIT);  int limitValue=-1;  if (limit != null) {    limit=limit.applyQuotient(variables,network);    limitValue=Integer.parseInt(limit.getDataValue());  }  Vertex bot=getRelationship(Primitive.BOT);  String botValue=null;  if (bot != null) {    bot=bot.applyQuotient(variables,network);    botValue=bot.printString();  }  Vertex botid=getRelationship(Primitive.BOTID);  String botidValue=null;  if (botid != null) {    botid=botid.applyQuotient(variables,network);    botidValue=botid.printString();  }  Vertex server=getRelationship(Primitive.SERVER);  String serverValue=null;  if (server != null) {    server=server.applyQuotient(variables,network);    serverValue=server.printString();  }  Vertex service=getRelationship(Primitive.SERVICE);  Primitive serviceValue=null;  if (service != null) {    service=service.applyQuotient(variables,network);    if (service.isPrimitive()) {      serviceValue=(Primitive)service.getData();    }  }  Vertex hint=getRelationship(Primitive.HINT);  String hintValue=null;  if (hint != null) {    hint=hint.applyQuotient(variables,network);    hintValue=hint.printString();  }  Vertex defaultResponse=getRelationship(Primitive.DEFAULT);  String defaultValue=null;  if (defaultResponse != null) {    defaultResponse=defaultResponse.applyQuotient(variables,network);    defaultValue=defaultResponse.printString();  }  try {    String message=sentence.printString();    String response=network.getBot().awareness().getSense(RemoteService.class).request(message,botValue,botidValue,serverValue,serviceValue,apikeyValue,limitValue,hintValue,network);    if (response == null) {      if (defaultValue != null && !defaultValue.isEmpty()) {        return network.createSentence(defaultValue);      }      return network.createVertex(Primitive.NULL);    }    return network.createSentence(response);  } catch (  Exception exception) {    network.getBot().log(this,exception);    if (defaultValue != null && !defaultValue.isEmpty()) {      return network.createSentence(defaultValue);    }    return network.createVertex(Primitive.NULL);  }}  }
class C{  public Ice(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild3.class,args);}  }
class C{  public void drawPivotArrow(Graphics2D g2,XYPlot plot,Rectangle2D dataArea,ValueAxis domainAxis,ValueAxis rangeAxis,int rendererIndex,PlotRenderingInfo info,double angle,double x,double y,String ledgend){  double tipRadius=DEFAULT_TIP_RADIUS;  double baseRadius=DEFAULT_BASE_RADIUS;  double arrowLength=DEFAULT_ARROW_LENGTH;  double arrowWidth=DEFAULT_ARROW_WIDTH;  double labelOffset=DEFAULT_LABEL_OFFSET;  Font font=DEFAULT_FONT;  Paint paint=DEFAULT_PAINT;  boolean outlineVisible=false;  Paint outlinePaint=Color.black;  Stroke outlineStroke=new BasicStroke(0.5f);  TextAnchor textAnchor=DEFAULT_TEXT_ANCHOR;  TextAnchor rotationAnchor=DEFAULT_ROTATION_ANCHOR;  double rotationAngle=DEFAULT_ROTATION_ANGLE;  Stroke arrowStroke=new BasicStroke(1.0f);  Paint arrowPaint=Color.black;  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  double j2DX=domainAxis.valueToJava2D(x,dataArea,domainEdge);  double j2DY=rangeAxis.valueToJava2D(y,dataArea,rangeEdge);  if (orientation == PlotOrientation.HORIZONTAL) {    double temp=j2DX;    j2DX=j2DY;    j2DY=temp;  }  double startX=j2DX + (Math.cos(angle) * baseRadius);  double startY=j2DY + (Math.sin(angle) * baseRadius);  double endX=j2DX + (Math.cos(angle) * tipRadius);  double endY=j2DY + (Math.sin(angle) * tipRadius);  double arrowBaseX=endX + (Math.cos(angle) * arrowLength);  double arrowBaseY=endY + (Math.sin(angle) * arrowLength);  double arrowLeftX=arrowBaseX + (Math.cos(angle + (Math.PI / 2.0)) * arrowWidth);  double arrowLeftY=arrowBaseY + (Math.sin(angle + (Math.PI / 2.0)) * arrowWidth);  double arrowRightX=arrowBaseX - (Math.cos(angle + (Math.PI / 2.0)) * arrowWidth);  double arrowRightY=arrowBaseY - (Math.sin(angle + (Math.PI / 2.0)) * arrowWidth);  GeneralPath arrow=new GeneralPath();  arrow.moveTo((float)endX,(float)endY);  arrow.lineTo((float)arrowLeftX,(float)arrowLeftY);  arrow.lineTo((float)arrowRightX,(float)arrowRightY);  arrow.closePath();  g2.setStroke(arrowStroke);  g2.setPaint(arrowPaint);  Line2D line=new Line2D.Double(startX,startY,endX,endY);  g2.draw(line);  g2.fill(arrow);  double labelX=j2DX + (Math.cos(angle) * (baseRadius + labelOffset));  double labelY=j2DY + (Math.sin(angle) * (baseRadius + labelOffset));  g2.setFont(font);  Shape hotspot=TextUtilities.calculateRotatedStringBounds(ledgend,g2,(float)labelX,(float)labelY,textAnchor,rotationAngle,rotationAnchor);  g2.setPaint(paint);  TextUtilities.drawRotatedString(ledgend,g2,(float)labelX,(float)labelY,textAnchor,rotationAngle,rotationAnchor);  if (outlineVisible) {    g2.setStroke(outlineStroke);    g2.setPaint(outlinePaint);    g2.draw(hotspot);  }}  }
class C{  @Override public int serverCount(){  NodePodAmp delegate=delegate();  if (delegate != null) {    return delegate.serverCount();  } else {    return 0;  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;default :return null;}}  }
class C{  public boolean isDone(){  return done;}  }
class C{  public JCTypeCast TypeCast(Type type,JCExpression expr){  return (JCTypeCast)TypeCast(Type(type),expr).setType(type);}  }
class C{  public CreationTool(String prototypeClassName){  this(prototypeClassName,null,null);}  }
class C{  public void onCellLocationChanged(CellLocation location){}  }
class C{  private static boolean isServerProblem(Object error){  return (error instanceof ServerError) || (error instanceof AuthFailureError);}  }
class C{  public void tick(int value){  this.symbols[value].weight+=1;  this.upToDate=false;}  }
class C{  public double applyToVector(double[] vector){  int j;  double prediction;  if (bias) {    j=1;    prediction=weights[0];  } else {    j=0;    prediction=0;  }  for (; j < weights.length; j++) {    prediction+=weights[j] * kernels[j].eval(vector);  }  return prediction;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  private End end(){  return new End();}  }
class C{  public static Sentence moveNotsInward(Sentence sentence){  Sentence result=null;  MoveNotInwards moveNotsIn=new MoveNotInwards();  result=sentence.accept(moveNotsIn,null);  return result;}  }
class C{  public boolean isTerminalServer(){  return false;}  }
class C{  public ExercisedClassVisitor(Set<Class<?>> classes){  this.classes=classes;}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Contract) {    Contract contract=(Contract)objectToCompare;    if (this.getSymbol().equals(contract.getSymbol())) {      if (this.getSecType().equals(contract.getSecType())) {        if (this.getExchange().equals(contract.getExchange())) {          if (this.getCurrency().equals(contract.getCurrency())) {            return true;          }        }      }    }  }  return false;}  }
class C{  protected InputStream createFileStream(File file) throws Exception {  return new FileInputStream(file);}  }
class C{  public InstanceExistsException(List<LocalizedText> messages,Throwable cause){  super(messages,cause);}  }
class C{  List<SubscriptionHistory> filterSuspendedSubscriptionHistories(List<SubscriptionHistory> subHistories){  List<SubscriptionHistory> relevantHistories=new ArrayList<SubscriptionHistory>();  int numberOfHistories=subHistories.size();  SubscriptionHistory currentHistory=null;  SubscriptionHistory nextHistory=null;  SubscriptionHistory previousHistory;  for (int i=0; i < numberOfHistories; i++) {    nextHistory=currentHistory;    currentHistory=subHistories.get(i);    if (i < numberOfHistories - 1) {      previousHistory=subHistories.get(i + 1);    } else {      previousHistory=null;    }    if (nextHistory != null && (previousHistory == null || (previousHistory.getProductObjKey() == currentHistory.getProductObjKey()))) {      PriceModelHistory priceModel=bdr.loadLatestPriceModelHistory(currentHistory);      if (priceModel.getType() != org.oscm.internal.types.enumtypes.PriceModelType.FREE_OF_CHARGE && CostCalculator.get(priceModel).isSuspendedAndResumedInSameTimeUnit(currentHistory,nextHistory,priceModel)) {        continue;      }    }    relevantHistories.add(currentHistory);  }  return relevantHistories;}  }
class C{  private void updatePreferenceAccessFromPowerLevel(){  boolean canUpdateAvatar=false;  boolean canUpdateName=false;  boolean canUpdateTopic=false;  boolean isAdmin=false;  boolean isConnected=Matrix.getInstance(getActivity()).isConnected();  if ((null != mRoom) && (null != mSession)) {    PowerLevels powerLevels=mRoom.getLiveState().getPowerLevels();    if (null != powerLevels) {      int powerLevel=powerLevels.getUserPowerLevel(mSession.getMyUserId());      canUpdateAvatar=powerLevel >= powerLevels.minimumPowerLevelForSendingEventAsStateEvent(Event.EVENT_TYPE_STATE_ROOM_AVATAR);      canUpdateName=powerLevel >= powerLevels.minimumPowerLevelForSendingEventAsStateEvent(Event.EVENT_TYPE_STATE_ROOM_NAME);      canUpdateTopic=powerLevel >= powerLevels.minimumPowerLevelForSendingEventAsStateEvent(Event.EVENT_TYPE_STATE_ROOM_TOPIC);      isAdmin=(powerLevel >= CommonActivityUtils.UTILS_POWER_LEVEL_ADMIN);    }  } else {    Log.w(LOG_TAG,"## updatePreferenceAccessFromPowerLevel(): session or room may be missing");  }  if (null != mRoomPhotoAvatar)   mRoomPhotoAvatar.setEnabled(canUpdateAvatar && isConnected);  if (null != mRoomNameEditTxt)   mRoomNameEditTxt.setEnabled(canUpdateName && isConnected);  if (null != mRoomTopicEditTxt)   mRoomTopicEditTxt.setEnabled(canUpdateTopic && isConnected);  if (null != mRoomDirectoryVisibilitySwitch)   mRoomDirectoryVisibilitySwitch.setEnabled(isAdmin && isConnected);  if (null != mRoomMuteNotificationsSwitch)   mRoomMuteNotificationsSwitch.setEnabled(isConnected);  if (null != mRoomTagListPreference)   mRoomTagListPreference.setEnabled(isConnected);  if (null != mRoomAccessRulesListPreference) {    mRoomAccessRulesListPreference.setEnabled(isAdmin && isConnected);    mRoomAccessRulesListPreference.setWarningIconVisible((0 == mRoom.getAliases().size()) && !TextUtils.equals(RoomState.JOIN_RULE_INVITE,mRoom.getLiveState().join_rule));  }  if (null != mRoomHistoryReadabilityRulesListPreference)   mRoomHistoryReadabilityRulesListPreference.setEnabled(isAdmin && isConnected);}  }
class C{  public boolean isCvvRequired(){  return cvvRequired;}  }
class C{  public void println(String text){  int indent=currentIndent;  if (indent < 0) {    indent=0;  }  writer.println(Indent.indent(indent) + text);}  }
class C{  public CostEstimate nest(CostEstimate inner){  return new CostEstimate(rowCount * inner.rowCount,cost + rowCount * inner.cost);}  }
class C{  public HashCodeBuilder append(final byte value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  @MethodLog public void openStorage(StorageData storageData) throws BusinessException {  if (!storageManager.isStorageExisting(storageData)) {    throw new BusinessException("Open the storage " + storageData + ".",StorageErrorCodeEnum.STORAGE_DOES_NOT_EXIST);  }  try {    storageManager.openStorage(storageData);  } catch (  SerializationException e) {    throw new TechnicalException("Open the storage " + storageData + ".",StorageErrorCodeEnum.SERIALIZATION_FAILED,e);  }catch (  IOException e) {    throw new TechnicalException("Open the storage " + storageData + ".",StorageErrorCodeEnum.INPUT_OUTPUT_OPERATION_FAILED,e);  }}  }
class C{  public void paste(){  if (isEditable() && isEnabled()) {    invokeAction("paste",TransferHandler.getPasteAction());  }}  }
class C{  public Map<String,Object> serialize(){  Map<String,Object> serverInfo=new HashMap<String,Object>();  serverInfo.put("totalCount",totalCount);  serverInfo.put("cursor",cursor);  serverInfo.put("serviceName",serviceName);  serverInfo.put("columnNames",columns);  serverInfo.put("version",version);  serverInfo.put("id",id);  serverInfo.put("initialData",data);  return serverInfo;}  }
class C{  public double approx(){  checkRep();  if (isNaN()) {    checkRep();    return Double.NaN;  } else {    checkRep();    return ((double)numer) / ((double)denom);  }}  }
class C{  @Override public OsmAgentView createEnvironmentView(){  OsmAgentView result=super.createEnvironmentView();  result.getMapViewPane().setRenderer(new SDMapEntityRenderer());  return result;}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  @Override public void close() throws IOException {  if (closeHooks != null) {    for (    Closeable hook : closeHooks.keySet()) {      try {        hook.close();      } catch (      Exception e) {        SolrException.log(log,"Exception during close hook",e);      }    }  }  closeHooks=null;}  }
class C{  public boolean hasSensor(int sensorType){  return sensorManager.getDefaultSensor(sensorType) != null;}  }
class C{  public static void pause(){  if (isPlaying()) {    mediaPlayer.pause();    timer.cancel();    timer=new Timer();    mainController.updatePlayPauseIcon(false);  }}  }
class C{  @Nullable private static VCard loadFromDisk(@Nullable String path,@Nullable Context context){  try {    if (TextUtils.isEmpty(path) || context == null) {      Log.d(TAG,"Empty file or error with the context");      return null;    }    File vcardPath=new File(path);    if (!vcardPath.exists()) {      Log.d(TAG,"vcardPath not exist " + vcardPath);      return null;    }    VCard vcard=Ezvcard.parse(vcardPath).first();    Log.d(TAG,"vcard in loadFromDisk " + Ezvcard.write(vcard).go());    return vcard;  } catch (  IOException e) {    Log.e(TAG,"Error while loading VCard from disk",e);    return null;  }}  }
class C{  @LargeTest public void testStressThumbnailImageItem() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[1];  int i=0;  final MediaImageItem mediaImageItem=new MediaImageItem(mVideoEditor,"m1",imageItemFileName,5000,renderingMode);  writeTestCaseHeader("testStressThumbnailImageItem");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      final Bitmap[] thumbNails=mediaImageItem.getThumbnailList(mediaImageItem.getWidth() / 2,mediaImageItem.getHeight() / 2,i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 4 == 1) {      final Bitmap[] thumbNails=mediaImageItem.getThumbnailList(mediaImageItem.getWidth() / 2,mediaImageItem.getHeight() * 3,i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 4 == 2) {      final Bitmap[] thumbNails=mediaImageItem.getThumbnailList(mediaImageItem.getWidth() * 2,mediaImageItem.getHeight() / 3,i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 4 == 3) {      final Bitmap[] thumbNails=mediaImageItem.getThumbnailList(mediaImageItem.getWidth(),mediaImageItem.getHeight(),i,5000,2);      for (int i1=0; i1 < thumbNails.length; i1++) {        thumbNails[i1].recycle();      }    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);}  }
class C{  public static int[] join(int[] arrayA,int... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  int[] array=new int[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public void info(String s,Object... params){  if (isEnabled(TraceSystem.INFO)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.INFO,module,s,null);  }}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public static List<? extends Element> childElementList(Element element,Set<String> childElementNames){  if (element == null)   return null;  List<Element> elements=new LinkedList<Element>();  if (childElementNames == null)   return elements;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  public CertReqMsg(CertRequest certReq,ProofOfPossession pop,AttributeTypeAndValue[] regInfo){  if (certReq == null) {    throw new IllegalArgumentException("'certReq' cannot be null");  }  this.certReq=certReq;  this.pop=pop;  if (regInfo != null) {    this.regInfo=new DERSequence(regInfo);  }}  }
class C{  public void filter(int kind){  loadPixels();switch (kind) {case BLUR:    filter(BLUR,1);  break;case GRAY:if (format == ALPHA) {  for (int i=0; i < pixels.length; i++) {    int col=255 - pixels[i];    pixels[i]=0xff000000 | (col << 16) | (col << 8)| col;  }  format=RGB;} else {  for (int i=0; i < pixels.length; i++) {    int col=pixels[i];    int lum=(77 * (col >> 16 & 0xff) + 151 * (col >> 8 & 0xff) + 28 * (col & 0xff)) >> 8;    pixels[i]=(col & ALPHA_MASK) | lum << 16 | lum << 8 | lum;  }}break;case INVERT:for (int i=0; i < pixels.length; i++) {pixels[i]^=0xffffff;}break;case POSTERIZE:throw new RuntimeException("Use filter(POSTERIZE, int levels) " + "instead of filter(POSTERIZE)");case RGB:for (int i=0; i < pixels.length; i++) {pixels[i]|=0xff000000;}format=RGB;break;case THRESHOLD:filter(THRESHOLD,0.5f);break;case ERODE:dilate(true);break;case DILATE:dilate(false);break;}updatePixels();}  }
class C{  public static CourseUnitMobileNotSupportedFragment newInstance(CourseComponent unit){  CourseUnitMobileNotSupportedFragment f=new CourseUnitMobileNotSupportedFragment();  Bundle args=new Bundle();  args.putSerializable(Router.EXTRA_COURSE_UNIT,unit);  f.setArguments(args);  return f;}  }
class C{  public static String resolveSVMHmmLearnCommand(){  try {    return new RuntimeProvider(BINARIES_BASE_LOCATION).getFile("svm_hmm_learn").getAbsolutePath();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public UserModificationConstraintException(Reason reason){  super();  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static int minus(Calendar self,Calendar then){  Calendar a=self;  Calendar b=then;  boolean swap=a.before(b);  if (swap) {    Calendar t=a;    a=b;    b=t;  }  int days=0;  b=(Calendar)b.clone();  while (a.get(Calendar.YEAR) > b.get(Calendar.YEAR)) {    days+=1 + (b.getActualMaximum(Calendar.DAY_OF_YEAR) - b.get(Calendar.DAY_OF_YEAR));    b.set(Calendar.DAY_OF_YEAR,1);    b.add(Calendar.YEAR,1);  }  days+=a.get(Calendar.DAY_OF_YEAR) - b.get(Calendar.DAY_OF_YEAR);  if (swap)   days=-days;  return days;}  }
class C{  public SshProvider(SshMeta sshMeta,String targetHost){  super();  this.sshMeta=sshMeta;  this.targetHost=targetHost;}  }
class C{  public DeleteRequestMessage(DeleteRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void fillContext(final IoSession session,final Map<String,String> context){  if (mdcKeys.contains(MdcKey.handlerClass)) {    context.put(MdcKey.handlerClass.name(),session.getHandler().getClass().getName());  }  if (mdcKeys.contains(MdcKey.remoteAddress)) {    context.put(MdcKey.remoteAddress.name(),session.getRemoteAddress().toString());  }  if (mdcKeys.contains(MdcKey.localAddress)) {    context.put(MdcKey.localAddress.name(),session.getLocalAddress().toString());  }  if (session.getTransportMetadata().getAddressType() == InetSocketAddress.class) {    InetSocketAddress remoteAddress=(InetSocketAddress)session.getRemoteAddress();    InetSocketAddress localAddress=(InetSocketAddress)session.getLocalAddress();    if (mdcKeys.contains(MdcKey.remoteIp)) {      context.put(MdcKey.remoteIp.name(),remoteAddress.getAddress().getHostAddress());    }    if (mdcKeys.contains(MdcKey.remotePort)) {      context.put(MdcKey.remotePort.name(),String.valueOf(remoteAddress.getPort()));    }    if (mdcKeys.contains(MdcKey.localIp)) {      context.put(MdcKey.localIp.name(),localAddress.getAddress().getHostAddress());    }    if (mdcKeys.contains(MdcKey.localPort)) {      context.put(MdcKey.localPort.name(),String.valueOf(localAddress.getPort()));    }  }}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (!this.isThereOpenPosition()) {      _log.info("No open position so Cancel Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod);      this.cancel();      return;    }    if (this.isThereOpenPosition() && !this.isPositionCovered()) {      Integer quantity=this.getOpenPositionOrder().getFilledQuantity();      Integer tgt1Qty=quantity / 2;      Integer tgt2Qty=quantity - tgt1Qty;      createStopAndTargetOrder(getOpenPositionOrder(),2,new Money(0.01),2,new Money(0.01),tgt1Qty,true);      createStopAndTargetOrder(getOpenPositionOrder(),2,new Money(0.01),2,new Money(0.01),tgt2Qty,true);      _log.info("Open position submit Stop/Tgt orders created Symbol: " + getSymbol() + " Time:"+ startPeriod);    }    if (startPeriod.isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(30)) && startPeriod.isAfter(this.getTradestrategy().getTradingday().getOpen().plusMinutes(5))) {      CandleItem firstCandle=this.getCandle(TradingCalendar.getDateAtTime(startPeriod,this.getTradestrategy().getTradingday().getOpen()));      if (Side.BOT.equals(getOpenTradePosition().getSide())) {        if (currentCandleItem.getVwap() < firstCandle.getVwap()) {          Money stopPrice=addPennyAndRoundStop(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),Action.SELL,0.01);          moveStopOCAPrice(stopPrice,true);          _log.info("Move Stop to b.e. Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod+ " Price: "+ stopPrice+ " first bar Vwap: "+ firstCandle.getVwap()+ " Curr Vwap: "+ currentCandleItem.getVwap());        }      } else {        if (currentCandleItem.getVwap() > firstCandle.getVwap()) {          Money stopPrice=addPennyAndRoundStop(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),Action.BUY,0.01);          moveStopOCAPrice(stopPrice,true);          _log.info("Move Stop to b.e. Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod+ " Price: "+ stopPrice+ " first bar Vwap: "+ firstCandle.getVwap()+ " Curr Vwap: "+ currentCandleItem.getVwap());        }      }    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getClose().minusMinutes(30)) && newBar) {      _log.info("Rule move stop to b.e.. Symbol: " + getSymbol() + " Time: "+ startPeriod);      String action=Action.SELL;      double avgPrice=this.getOpenTradePosition().getTotalBuyValue().doubleValue() / this.getOpenTradePosition().getTotalBuyQuantity().doubleValue();      CandleItem prevCandleItem=null;      if (getCurrentCandleCount() > 0) {        prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);      }      if (avgPrice < prevCandleItem.getLow())       avgPrice=prevCandleItem.getLow();      if (Side.SLD.equals(getOpenTradePosition().getSide())) {        action=Action.BUY;        avgPrice=this.getOpenTradePosition().getTotalSellValue().doubleValue() / this.getOpenTradePosition().getTotalSellQuantity().doubleValue();        if (avgPrice > prevCandleItem.getHigh())         avgPrice=prevCandleItem.getHigh();      }      Money stopPrice=addPennyAndRoundStop(avgPrice,getOpenTradePosition().getSide(),action,0.01);      moveStopOCAPrice(stopPrice,true);    }    if (null != getTargetOneOrder()) {      if (this.getTargetOneOrder().getIsFilled() && newBar) {        _log.info("Rule move stop to b.e. after target one hit Symbol: " + getSymbol() + " Time: "+ startPeriod);        String action=Action.SELL;        if (Side.SLD.equals(getOpenTradePosition().getSide()))         action=Action.BUY;        Money newStop=addPennyAndRoundStop(this.getTargetOneOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),action,0.01);        if (!newStop.equals(this.getStopPriceMinUnfilled())) {        }      }    }    if (null != getTargetOneOrder()) {      if (this.getTargetOneOrder().getIsFilled()) {        Money newStop=getOneMinuteTrailStop(candleSeries,this.getStopPriceMinUnfilled(),currentCandleItem);        if (!newStop.equals(new Money(this.getStopPriceMinUnfilled()))) {          _log.info("PositionManagerStrategy OneMinuteTrail: " + getSymbol() + " Trail Price: "+ newStop+ " Time: "+ startPeriod+ " Side: "+ this.getOpenTradePosition().getSide());        }      }    }    if (!currentCandleItem.getLastUpdateDate().isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(2))) {      cancelOrdersClosePosition(true);      _log.info("PositionManagerStrategy 15:58:00 done: " + getSymbol() + " Time: "+ startPeriod);      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error Position Manager exception: " + ex.getMessage(),ex);    error(1,40,"Error Position Manager exception: " + ex.getLocalizedMessage());  }}  }
class C{  private static void sqlQuery(IgniteCache<BinaryObject,BinaryObject> cache){  SqlQuery<BinaryObject,BinaryObject> query=new SqlQuery<>(Employee.class,"zip = ?");  int zip=94109;  QueryCursor<Cache.Entry<BinaryObject,BinaryObject>> employees=cache.query(query.setArgs(zip));  System.out.println();  System.out.println(">>> Employees with zip " + zip + ':');  for (  Cache.Entry<BinaryObject,BinaryObject> e : employees.getAll())   System.out.println(">>>     " + e.getValue().deserialize());}  }
class C{  public CopyKnowledgeAction(KnowledgeEditable knowledgeEditable){  super("Copy Knowledge");  if (knowledgeEditable == null) {    throw new NullPointerException();  }  this.knowledgeEditable=knowledgeEditable;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getCategory();  Album al=getAlbumObj(obj);  if (al != null)   return al.getGenre();  SeriesInfo si=getSeriesInfoObj(obj);  return (si == null) ? "" : si.getCategory();}  }
class C{  public String name(){  return name;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.879 -0400",hash_original_method="51A78070894F00FFC1985168C56115B2",hash_generated_method="F0E6CAAB5A99A7246EB3AD55400150E5") public static IOFileFilter ageFileFilter(Date cutoffDate){  return new AgeFileFilter(cutoffDate);}  }
class C{  @Deprecated public static Map<String,Object> filterServiceContext(DispatchContext dctx,String serviceName,Map<String,? extends Object> context) throws GenericServiceException {  return dctx.makeValidContext(serviceName,"IN",context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:48.530 -0400",hash_original_method="CD01E8977B386E95EB43DA8A15EDF875",hash_generated_method="38CE1FE25476BBCB139B3C9A4E2BE658") public boolean onKeyUp(int keyCode,KeyEvent event){  if (isShowing() && mDropDownList.getSelectedItemPosition() >= 0) {    boolean consumed=mDropDownList.onKeyUp(keyCode,event);    if (consumed) {switch (keyCode) {case KeyEvent.KEYCODE_ENTER:case KeyEvent.KEYCODE_DPAD_CENTER:        dismiss();      break;  }}return consumed;}return false;}  }
class C{  public Dimension findDimension(AppContext ctx,DimensionPK dimensionPK) throws ScopeException {  for (  Dimension dim : getContent().getDimensions()) {    if (dim.getId().equals(dimensionPK)) {      checkRole(ctx,dim);      return cloneWithRole(ctx,dim);    }  }  return null;}  }
class C{  public void paintTabbedPaneContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);  super.dispatchDraw(canvas);}  }
class C{  protected void drawEntity(final Graphics2D g2d,final int x,final int y,final int width,final int height){  getSprite().draw(g2d,x,y);}  }
class C{  public static TimeLagGraph serializableInstance(){  return new TimeLagGraph();}  }
class C{  public static NbtTag readTagDeflater(InputStream in,NbtLimiter limiter) throws IOException {  try (NbtInputStream nbtIS=fromDeflater(in,limiter)){    return nbtIS.readTag(limiter);  } }  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:58.387 -0500",hash_original_method="5C4141091F743804B15461232C997D85",hash_generated_method="0C5AED9817D2E54DE57533E1B3D2B8A4") public void seek(int time){  Message message=obtainMessage(SEEK);  message.obj=new Integer(time);  sendMessage(message);}  }
class C{  public boolean canChangeModel(){  return modelChangeable;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (timer_1: ");  result.append(timer_1);  result.append(')');  return result.toString();}  }
class C{  public boolean isInterno(){  return interno;}  }
class C{  public static void executeTransaction(int c,Account[] a,int id,Scanner input){switch (c) {case 1:    System.out.println("The balance is " + a[id].getBalance());  break;case 2:System.out.print("Enter an amount to withdraw: ");a[id].withdraw(input.nextDouble());break;case 3:System.out.print("Enter an amount to deposit: ");a[id].deposit(input.nextDouble());}}  }
class C{  public boolean isPersistentObject(){  return persistentSO;}  }
class C{  static InetAddress randomIPv6Adress(){  StringBuffer sb=new StringBuffer();  for (int i=0; i < 8; i++) {    if (i > 0)     sb.append(":");    for (int j=0; j < 4; j++) {      int v=r.nextInt(16);      if (v < 10) {        sb.append(Integer.toString(v));      } else {        char c=(char)('A' + v - 10);        sb.append(c);      }    }  }  try {    return InetAddress.getByName(sb.toString());  } catch (  UnknownHostException x) {    throw new Error("Internal error in test");  }}  }
class C{  public boolean isValidating(){  return validating;}  }
class C{  public static Command show(String title,Component body,Command[] cmds,int type,Image icon,long timeout,Transition transition){  return show(title,body,null,cmds,type,icon,timeout,transition);}  }
class C{  public boolean isDefaultImport(){  return false;}  }
class C{  private void addPossibleHeadCandidate(TagInfo tagInfo,TagNode tagNode,CleanTimeValues cleanTimeValues){  if (tagInfo != null && tagNode != null) {    if (tagInfo.isHeadTag() || (tagInfo.isHeadAndBodyTag() && cleanTimeValues._headOpened && !cleanTimeValues._bodyOpened)) {      cleanTimeValues._headTags.add(tagNode);    }  }}  }
class C{  private void cancelJoinTimer(){  if (joinTimeout != null) {    LOGGER.debug("{} - Cancelling join timeout",member().address());    joinTimeout.cancel();    joinTimeout=null;  }}  }
class C{  public void pause(){  fan.pause();}  }
class C{  public void destroyModel(){  if (model != null) {    this.oldModel=model;    this.model=null;  }  this.modelParamTypes=null;  getSessionSupport().fireModelDestroyed(this);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static void superposeWithCoord(ComplexVector vec1,ComplexVector vec2){  int arrayDim=vec1.getDimension() * 2;  IncompatibleVectorsException.checkVectorsCompatible(vec1,vec2);  assert (vec1.getOpMode() == ComplexVector.Mode.CARTESIAN || vec1.getOpMode() == ComplexVector.Mode.HERMITIAN);  assert (vec2.getOpMode() == ComplexVector.Mode.CARTESIAN || vec2.getOpMode() == ComplexVector.Mode.HERMITIAN);  float[] coordinates1=vec1.getCoordinates();  float[] coordinates2=vec2.getCoordinates();  for (int i=0; i < arrayDim; i++)   coordinates1[i]+=coordinates2[i];}  }
class C{  private void removeLockToJobsNeedingLock(String lock,Job job,boolean shouldBeAtHead){  ArrayList<Job> jobs=lockToJobsNeedingLock.get(lock);  if (shouldBeAtHead && jobs.get(0) != job) {    throw new RuntimeException("Tried to remove " + job + " but it "+ "wasn't at the head of the list for lock "+ lock+ "! List is: "+ jobs);  }  boolean removed=jobs.remove(job);  if (!removed) {    throw new RuntimeException("Didn't remove job " + job + " from list "+ jobs);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.OPERATION__PARAMETERS:    return getParameters();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void hidePalette(){  Layer layer=getLayer();  if (layer != null) {    layer.hidePalette();  }}  }
class C{  @Override public void log(LogRecord record){  if (isDebug() && record.getLevel().intValue() < 800) {    record.setMessage("[D|" + record.getLevel() + "] "+ record.getMessage());    record.setLevel(Level.INFO);  }  if (!isLoggable(record.getLevel())) {    return;  }  Filter theFilter=getFilter();  if (theFilter != null && !theFilter.isLoggable(record)) {    return;  }  Logger logger=this;  while (logger != null) {    for (    Handler handler : logger.getHandlers()) {      handler.publish(record);    }    if (!logger.getUseParentHandlers()) {      break;    }    logger=logger.getParent();  }}  }
class C{  public static void main(String[] args){  runCheck(new CheckAttributeSelection(),args);}  }
class C{  private static void normalizeCoordinates(Matrix points,Matrix mean){  for (int i=0; i < points.getColumnDimension(); i++) {    points.set(0,i,(points.get(0,i) - mean.get(0,0)));    points.set(1,i,(points.get(1,i) - mean.get(0,1)));    points.set(2,i,(points.get(2,i) - mean.get(0,2)));  }}  }
