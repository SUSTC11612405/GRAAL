class C{  public ByteList ClassInfo(ByteList bytes,int cinit_index,ObjectList<ByteList> ctraits,int class_info){  if (show_bytecode) {    defns_out.write("\n      ClassInfo  cinit_index=" + cinit_index + " ctraits_count="+ ctraits.size()+ " -> "+ class_info);  }  bytes=Int(bytes,cinit_index);  bytes=Int(bytes,ctraits.size());  bytes=Traits(bytes,ctraits);  return bytes;}  }
class C{  protected void applyPatch(State current,State patch){  if (patch.executionState != null) {    current.executionState=patch.executionState;  }  current.triggersSuccess=updateLongWithMax(current.triggersSuccess,patch.triggersSuccess);  current.triggersError=updateLongWithMax(current.triggersError,patch.triggersError);}  }
class C{  public boolean isReadonly(){  return false;}  }
class C{  public SVGPath moveTo(double x,double y){  if (x > Double.NEGATIVE_INFINITY && x < Double.POSITIVE_INFINITY && y > Double.NEGATIVE_INFINITY && y < Double.POSITIVE_INFINITY) {    append(SVGConstants.PATH_MOVE,x,y);  }  return this;}  }
class C{  public static void writeConfig(BufferedWriter writer,DatabaseFieldConfig config,String tableName) throws IOException {  writer.append(CONFIG_FILE_START_MARKER);  writer.newLine();  if (config.getFieldName() != null) {    writer.append(FIELD_NAME_FIELD_NAME).append('=').append(config.getFieldName());    writer.newLine();  }  if (config.getColumnName() != null) {    writer.append(FIELD_NAME_COLUMN_NAME).append('=').append(config.getColumnName());    writer.newLine();  }  if (config.getDataPersister() != DEFAULT_DATA_PERSISTER) {    boolean found=false;    for (    DataType dataType : DataType.values()) {      if (dataType.getDataPersister() == config.getDataPersister()) {        writer.append(FIELD_NAME_DATA_PERSISTER).append('=').append(dataType.name());        writer.newLine();        found=true;        break;      }    }    if (!found) {      throw new IllegalArgumentException("Unknown data persister field: " + config.getDataPersister());    }  }  if (config.getDefaultValue() != null) {    writer.append(FIELD_NAME_DEFAULT_VALUE).append('=').append(config.getDefaultValue());    writer.newLine();  }  if (config.getWidth() != 0) {    writer.append(FIELD_NAME_WIDTH).append('=').append(Integer.toString(config.getWidth()));    writer.newLine();  }  if (config.isCanBeNull() != DatabaseFieldConfig.DEFAULT_CAN_BE_NULL) {    writer.append(FIELD_NAME_CAN_BE_NULL).append('=').append(Boolean.toString(config.isCanBeNull()));    writer.newLine();  }  if (config.isId()) {    writer.append(FIELD_NAME_ID).append('=').append("true");    writer.newLine();  }  if (config.isGeneratedId()) {    writer.append(FIELD_NAME_GENERATED_ID).append('=').append("true");    writer.newLine();  }  if (config.getGeneratedIdSequence() != null) {    writer.append(FIELD_NAME_GENERATED_ID_SEQUENCE).append('=').append(config.getGeneratedIdSequence());    writer.newLine();  }  if (config.isForeign()) {    writer.append(FIELD_NAME_FOREIGN).append('=').append("true");    writer.newLine();  }  if (config.isUseGetSet()) {    writer.append(FIELD_NAME_USE_GET_SET).append('=').append("true");    writer.newLine();  }  if (config.getUnknownEnumValue() != null) {    writer.append(FIELD_NAME_UNKNOWN_ENUM_VALUE).append('=').append(config.getUnknownEnumValue().getClass().getName()).append("#").append(config.getUnknownEnumValue().name());    writer.newLine();  }  if (config.isThrowIfNull()) {    writer.append(FIELD_NAME_THROW_IF_NULL).append('=').append("true");    writer.newLine();  }  if (config.getFormat() != null) {    writer.append(FIELD_NAME_FORMAT).append('=').append(config.getFormat());    writer.newLine();  }  if (config.isUnique()) {    writer.append(FIELD_NAME_UNIQUE).append('=').append("true");    writer.newLine();  }  if (config.isUniqueCombo()) {    writer.append(FIELD_NAME_UNIQUE_COMBO).append('=').append("true");    writer.newLine();  }  String indexName=config.getIndexName(tableName);  if (indexName != null) {    writer.append(FIELD_NAME_INDEX_NAME).append('=').append(indexName);    writer.newLine();  }  String uniqueIndexName=config.getUniqueIndexName(tableName);  if (uniqueIndexName != null) {    writer.append(FIELD_NAME_UNIQUE_INDEX_NAME).append('=').append(uniqueIndexName);    writer.newLine();  }  if (config.isForeignAutoRefresh()) {    writer.append(FIELD_NAME_FOREIGN_AUTO_REFRESH).append('=').append("true");    writer.newLine();  }  if (config.getMaxForeignAutoRefreshLevel() != DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {    writer.append(FIELD_NAME_MAX_FOREIGN_AUTO_REFRESH_LEVEL).append('=').append(Integer.toString(config.getMaxForeignAutoRefreshLevel()));    writer.newLine();  }  if (config.getPersisterClass() != DatabaseFieldConfig.DEFAULT_PERSISTER_CLASS) {    writer.append(FIELD_NAME_PERSISTER_CLASS).append('=').append(config.getPersisterClass().getName());    writer.newLine();  }  if (config.isAllowGeneratedIdInsert()) {    writer.append(FIELD_NAME_ALLOW_GENERATED_ID_INSERT).append('=').append("true");    writer.newLine();  }  if (config.getColumnDefinition() != null) {    writer.append(FIELD_NAME_COLUMN_DEFINITION).append('=').append(config.getColumnDefinition());    writer.newLine();  }  if (config.isForeignAutoCreate()) {    writer.append(FIELD_NAME_FOREIGN_AUTO_CREATE).append('=').append("true");    writer.newLine();  }  if (config.isVersion()) {    writer.append(FIELD_NAME_VERSION).append('=').append("true");    writer.newLine();  }  String foreignColumnName=config.getForeignColumnName();  if (foreignColumnName != null) {    writer.append(FIELD_NAME_FOREIGN_COLUMN_NAME).append('=').append(foreignColumnName);    writer.newLine();  }  if (config.isReadOnly()) {    writer.append(FIELD_NAME_READ_ONLY).append('=').append("true");    writer.newLine();  }  if (config.isForeignCollection()) {    writer.append(FIELD_NAME_FOREIGN_COLLECTION).append('=').append("true");    writer.newLine();  }  if (config.isForeignCollectionEager()) {    writer.append(FIELD_NAME_FOREIGN_COLLECTION_EAGER).append('=').append("true");    writer.newLine();  }  if (config.getForeignCollectionMaxEagerLevel() != DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL) {    writer.append(FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL).append('=').append(Integer.toString(config.getForeignCollectionMaxEagerLevel()));    writer.newLine();  }  if (config.getForeignCollectionColumnName() != null) {    writer.append(FIELD_NAME_FOREIGN_COLLECTION_COLUMN_NAME).append('=').append(config.getForeignCollectionColumnName());    writer.newLine();  }  if (config.getForeignCollectionOrderColumnName() != null) {    writer.append(FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME).append('=').append(config.getForeignCollectionOrderColumnName());    writer.newLine();  }  if (config.isForeignCollectionOrderAscending() != DatabaseFieldConfig.DEFAULT_FOREIGN_COLLECTION_ORDER_ASCENDING) {    writer.append(FIELD_NAME_FOREIGN_COLLECTION_ORDER_ASCENDING).append('=').append(Boolean.toString(config.isForeignCollectionOrderAscending()));    writer.newLine();  }  if (config.getForeignCollectionForeignFieldName() != null) {    writer.append(FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME).append('=').append(config.getForeignCollectionForeignFieldName());    writer.newLine();  }  writer.append(CONFIG_FILE_END_MARKER);  writer.newLine();}  }
class C{  @Override public String decode(String input){  if (Encoding.isURLEncoded(input)) {    return super.getCallbacks().getHelpers().urlDecode(input);  }  return input;}  }
class C{  public SuccessorsMap(){  this.successorMap=Maps.newHashMap();}  }
class C{  @Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){  int viewType=getItemViewType(position);switch (viewType) {case MENU_ITEM_VIEW_TYPE:    MenuItemViewHolder menuItemHolder=(MenuItemViewHolder)holder;  MenuItem menuItem=(MenuItem)mRecyclerViewItems.get(position);String imageName=menuItem.getImageName();int imageResID=mContext.getResources().getIdentifier(imageName,"mipmap",mContext.getPackageName());menuItemHolder.menuItemImage.setImageResource(imageResID);menuItemHolder.menuItemName.setText(menuItem.getName());menuItemHolder.menuItemPrice.setText(menuItem.getPrice());menuItemHolder.menuItemCategory.setText(menuItem.getCategory());menuItemHolder.menuItemDescription.setText(menuItem.getDescription());break;case NATIVE_EXPRESS_AD_VIEW_TYPE:default :NativeExpressAdViewHolder nativeExpressHolder=(NativeExpressAdViewHolder)holder;NativeExpressAdView adView=(NativeExpressAdView)mRecyclerViewItems.get(position);ViewGroup adCardView=(ViewGroup)nativeExpressHolder.itemView;if (adCardView.getChildCount() > 0) {adCardView.removeAllViews();}adCardView.addView(adView);}}  }
class C{  static public ArrayList<String> generateArrayList(String[] array){  ArgumentChecking.notNull(array,"array");  ArrayList<String> list=new ArrayList<String>(array.length);  for (int i=0; i < array.length; ++i) {    list.add(i,array[i]);  }  return list;}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  protected GraphicsNode createSVGImageNode(BridgeContext ctx,Element e,SVGDocument imgDocument){  CSSEngine eng=((SVGOMDocument)imgDocument).getCSSEngine();  subCtx=ctx.createSubBridgeContext((SVGOMDocument)imgDocument);  CompositeGraphicsNode result=new CompositeGraphicsNode();  Rectangle2D bounds=getImageBounds(ctx,e);  if ((bounds.getWidth() == 0) || (bounds.getHeight() == 0)) {    ShapeNode sn=new ShapeNode();    sn.setShape(bounds);    result.getChildren().add(sn);    return result;  }  Rectangle2D r=CSSUtilities.convertEnableBackground(e);  if (r != null) {    result.setBackgroundEnable(r);  }  SVGSVGElement svgElement=imgDocument.getRootElement();  CanvasGraphicsNode node;  node=(CanvasGraphicsNode)subCtx.getGVTBuilder().build(subCtx,svgElement);  if ((eng == null) && ctx.isInteractive()) {    subCtx.addUIEventListeners(imgDocument);  }  node.setClip(null);  node.setViewingTransform(new AffineTransform());  result.getChildren().add(node);  String viewBox=svgElement.getAttributeNS(null,SVG_VIEW_BOX_ATTRIBUTE);  float[] vb=ViewBox.parseViewBoxAttribute(e,viewBox,ctx);  initializeViewport(ctx,e,result,vb,bounds);  if (ctx.isInteractive()) {    listener=new ForwardEventListener(svgElement,e);    NodeEventTarget tgt=(NodeEventTarget)svgElement;    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_KEYDOWN,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_KEYDOWN,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_KEYPRESS,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_KEYPRESS,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_KEYUP,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_KEYUP,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEDOWN,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEDOWN,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEMOVE,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEMOVE,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOUT,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOUT,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,listener,false);    tgt.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEUP,listener,false,null);    subCtx.storeEventListenerNS(tgt,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEUP,listener,false);  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PackerImpl(){}  }
class C{  public MultipartUploadListing listMultipartUploads(ListMultipartUploadsRequest listMultipartUploadsRequest) throws OSSException, ClientException {  assertParameterNotNull(listMultipartUploadsRequest,"listMultipartUploadsRequest");  String bucketName=listMultipartUploadsRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new LinkedHashMap<String,String>();  populateListMultipartUploadsRequestParameters(listMultipartUploadsRequest,params);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.GET).setBucket(bucketName).setParameters(params).setOriginalRequest(listMultipartUploadsRequest).build();  return doOperation(request,listMultipartUploadsResponseParser,bucketName,null,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean killedAny=false;  EPGDataSource[] allDS=EPG.getInstance().getDataSources();  for (int i=0; i < allDS.length; i++) {    if (!MMC.getInstance().isProviderUsed(allDS[i].getProviderID())) {      EPG.getInstance().removeDataSource(allDS[i]);      killedAny=true;    }  }  EPG.getInstance().kick();  Scheduler.getInstance().kick(false);  if (Sage.client) {    return makeNetworkedCall(stack);  }  return Boolean.valueOf(killedAny);}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public static boolean isUrl(String s){  if (isEmpty(s))   return defaultEmptyOK;  if (s.indexOf("://") != -1)   return true;  return false;}  }
class C{  public boolean isUsbMassStorageEnabled(){  try {    return mMountService.isUsbMassStorageEnabled();  } catch (  RemoteException rex) {    Log.e(TAG,"Failed to get UMS enable state",rex);  }  return false;}  }
class C{  public final static double[] arrayRadToDeg(double[] rads){  for (int i=0; i < rads.length; i++) {    rads[i]=radToDeg(rads[i]);  }  return rads;}  }
class C{  @Override public void javaToNative(Object object,TransferData transferData){  setObject((OBJECT_TYPE)object);  startTime=System.currentTimeMillis();  if (transferData != null)   super.javaToNative(String.valueOf(startTime).getBytes(Charset.defaultCharset()),transferData);}  }
class C{  @Override public void actionPerformed(ActionEvent evt){  try {    undo();  } catch (  CannotUndoException e) {    System.err.println("Cannot undo: " + e);    e.printStackTrace();  }}  }
class C{  public boolean hasOpenChangeset(){  return changesetId != -1;}  }
class C{  public boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public void testSetF12Momentary(){  boolean f12Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF12Momentary(f12Momentary);}  }
class C{  private void createAndInvalidate(){  try {    region.create(new Integer(1),new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError("failed in trying to create",e);  }  try {    region.invalidate(new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError("failed to invalidate Integer",e);  }}  }
class C{  protected Object execute() throws IOException {  init();  if (!checkifEnabledRemotes()) {    return null;  }  Ansi buffer=Ansi.ansi();  if (isProgressEnabled()) {    new ConsoleReader().resetPromptLine("Retrieving projects...","",0);  }  List<UserProjectReference> projects;  if (remoteName != null) {    projects=getMultiRemoteCodenvy().getProjects(remoteName,publicWorkSpaces);  } else {    projects=getMultiRemoteCodenvy().getProjects(publicWorkSpaces);  }  if (isProgressEnabled()) {    new ConsoleReader().resetPromptLine("","",0);  }  if (projects.isEmpty()) {    buffer.a("No projects");    System.out.println(buffer.toString());    return null;  }  List<String> ids=new ArrayList<>();  List<String> remotes=new ArrayList<>();  List<String> workspaces=new ArrayList<>();  List<String> projectNames=new ArrayList<>();  List<String> types=new ArrayList<>();  List<String> privacies=new ArrayList<>();  List<String> runnerIDs=new ArrayList<>();  List<String> builderIDs=new ArrayList<>();  List<String> permissions=new ArrayList<>();  int count=0;  for (  UserProjectReference project : projects) {    if (isProgressEnabled()) {      count++;      String percent=(count * 100) / projects.size() + "/100";      new ConsoleReader().resetPromptLine("Collecting projects data...",percent,percent.length());    }    List<UserRunnerStatus> runners;    List<UserBuilderStatus> builders;    List<String> userPermissions;    if (verbose) {      runners=getMultiRemoteCodenvy().getRunners(project);      builders=getMultiRemoteCodenvy().getBuilders(project);      userPermissions=getMultiRemoteCodenvy().getProjectPermissions(project);    } else {      runners=Collections.emptyList();      builders=Collections.emptyList();      userPermissions=Collections.emptyList();    }    int lines=1;    if (runners.size() > lines) {      lines=runners.size();    }    if (builders.size() > lines) {      lines=builders.size();    }    for (int i=1; i <= lines; i++) {      if (i == 1) {        ids.add(project.shortId());        remotes.add(project.getWorkspace().getRemote());        workspaces.add(project.getWorkspace().name());        projectNames.add(project.name());        types.add(project.getInnerReference().type());        privacies.add(project.getInnerReference().visibility());        permissions.add(prettyPrint(userPermissions));      } else {        ids.add("");        remotes.add("");        workspaces.add("");        projectNames.add("");        types.add("");        privacies.add("");        permissions.add("");      }      if (runners.isEmpty() && i == 1) {        runnerIDs.add("none");      } else       if (i <= runners.size()) {        runnerIDs.add(prettyPrintState(runners.get(i - 1)));      } else {        runnerIDs.add("");      }      if (builders.isEmpty() && i == 1) {        builderIDs.add("none");      } else       if (i <= builders.size()) {        builderIDs.add(prettyPrintState(builders.get(i - 1)));      } else {        builderIDs.add("");      }    }  }  if (isProgressEnabled()) {    new ConsoleReader().resetPromptLine("","",0);  }  AsciiArray asciiArray;  if (verbose) {    asciiArray=buildAsciiArray().withColumns(ids,remotes,workspaces,projectNames,types,privacies,permissions,builderIDs,runnerIDs).withTitle("ID","Remote","Workspace","Project","Type","Privacy","Perm","Builders","Runners");  } else {    asciiArray=buildAsciiArray().withColumns(ids,remotes,workspaces,projectNames,types,privacies).withTitle("ID","Remote","Workspace","Project","Type","Privacy");  }  System.out.println(asciiArray.toAscii());  return null;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends TAnnotation>)newValue);return;case TypesPackage.TFORMAL_PARAMETER__AST_ELEMENT:setAstElement((EObject)newValue);return;case TypesPackage.TFORMAL_PARAMETER__VARIADIC:setVariadic((Boolean)newValue);return;case TypesPackage.TFORMAL_PARAMETER__TYPE_REF:setTypeRef((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.350 -0500",hash_original_method="2951DD657350D2DCE6E576199EA1BCE5",hash_generated_method="7968FA611011C95228850E21792E4778") @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public MultiSearchRequestBuilder add(SearchRequestBuilder request){  if (request.request().indicesOptions() == IndicesOptions.strictExpandOpenAndForbidClosed() && request().indicesOptions() != IndicesOptions.strictExpandOpenAndForbidClosed()) {    request.request().indicesOptions(request().indicesOptions());  }  super.request.add(request);  return this;}  }
class C{  public void add_return(VasaAssociationObject param){  if (local_return == null) {    local_return=new VasaAssociationObject[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(VasaAssociationObject[])list.toArray(new VasaAssociationObject[list.size()]);}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public static double coefficient(NumberVector x,NumberVector y){  final int xdim=x.getDimensionality();  final int ydim=y.getDimensionality();  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: number vectors differ in dimensionality.");  }  double sumXX=0., sumYY=0., sumXY=0.;  double meanX=x.doubleValue(0), meanY=y.doubleValue(0);  int i=1;  while (i < xdim) {    final double xv=x.doubleValue(i), yv=y.doubleValue(i);    final double deltaX=xv - meanX;    final double deltaY=yv - meanY;    ++i;    meanX+=deltaX / i;    meanY+=deltaY / i;    final double neltaX=xv - meanX;    final double neltaY=yv - meanY;    sumXX+=deltaX * neltaX;    sumYY+=deltaY * neltaY;    sumXY+=deltaX * neltaY;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  static String formatDebugTime(long unixTime,long now){  Time time=new Time();  time.set(unixTime);  long delta=unixTime - now;  if (delta > DateUtils.MINUTE_IN_MILLIS) {    delta/=DateUtils.MINUTE_IN_MILLIS;    return String.format("[%d] %s (%+d mins)",unixTime,time.format("%H:%M:%S"),delta);  } else {    delta/=DateUtils.SECOND_IN_MILLIS;    return String.format("[%d] %s (%+d secs)",unixTime,time.format("%H:%M:%S"),delta);  }}  }
class C{  public void testFieldSortCustomSearcher() throws Exception {  Sort custSort=new Sort(new SortField("publicationDate_",SortField.Type.STRING),SortField.FIELD_SCORE);  IndexSearcher searcher=new CustomSearcher(reader,2);  matchHits(searcher,custSort);}  }
class C{  protected void purge(final Reference<?> ref){  final int hash=ref.hashCode();  final int index=hashIndex(hash,data.length);  HashEntry<K,V> previous=null;  HashEntry<K,V> entry=data[index];  while (entry != null) {    if (((ReferenceEntry<K,V>)entry).purge(ref)) {      if (previous == null) {        data[index]=entry.next;      } else {        previous.next=entry.next;      }      this.size--;      return;    }    previous=entry;    entry=entry.next;  }}  }
class C{  public final void testDSAParameterSpec(){  AlgorithmParameterSpec aps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertTrue(aps instanceof DSAParameterSpec);}  }
class C{  public static void returnValue(Object value,String className,String methodName){  if (isThreadNeqCurrentThread())   return;  if (!ExecutionTracer.isEnabled())   return;  if (value == null) {    returnValue(0,className,methodName);    return;  }  StringBuilder tmp=null;  try {    ExecutionTracer.disable();    tmp=new StringBuilder(value.toString());  } catch (  Throwable t) {    return;  } finally {    ExecutionTracer.enable();  }  int index=0;  int position=0;  boolean found=false;  boolean deleteAddresses=true;  char c=' ';  while ((position=tmp.indexOf("@",index)) > 0) {    for (index=position + 1; index < position + 17 && index < tmp.length(); index++) {      c=tmp.charAt(index);      if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {        found=true;      } else {        break;      }    }    if (deleteAddresses && found) {      tmp.delete(position + 1,index);    }  }  returnValue(tmp.toString().hashCode(),className,methodName);}  }
class C{  @Override public List toBeanList(ResultSet rs,Class type) throws SQLException {  return this.convert.toBeanList(rs,type);}  }
class C{  @Override public void add(final double value){  add(value,1.0);}  }
class C{  public JoinAppGroupDialog(final Fragment fragment){  super(fragment,DEFAULT_REQUEST_CODE);}  }
class C{  public void test(int numberOfObjectives){  C1_DTLZ3 problem=new C1_DTLZ3(numberOfObjectives);  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution solution=problem.generate();    problem.evaluate(solution);    Assert.assertFalse(solution.violatesConstraints());  }}  }
class C{  boolean usesHeapVariable(Instruction s){  if (Phi.conforms(s)) {    Operand result=Phi.getResult(s);    return (result instanceof HeapOperand);  }  HeapOperand<Object>[] o=uses.get(s);  return (o != null);}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  return new Boolean(evaluate(context));}  }
class C{  private void processAthrow(ExceptionHandlerMap exceptions,int athrowIndex){  if (exceptions != null) {    int[] tryStartPC=exceptions.getStartPC();    int[] tryEndPC=exceptions.getEndPC();    int tryLength=tryStartPC.length;    for (int i=0; i < tryLength; i++) {      if (tryStartPC[i] <= athrowIndex && athrowIndex < tryEndPC[i]) {        return;      }    }  }  BasicBlock athrowBB=basicBlocks[byteToBlockMap[athrowIndex]];  basicBlocks[BasicBlock.EXITBLOCK].addPredecessor(athrowBB);}  }
class C{  public RandomSamplerAction(DataEditor editor){  super("Random Sample (Without Replacement)");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public void receiveResendFileTransferInvitation(FileSharingSession session,ContactId contact,String displayName){  if (sLogger.isActivated()) {    sLogger.debug("Handle event file transfer resend invitation");  }  mFileTransferService.receiveResendFileTransferInvitation(session,contact,displayName);}  }
class C{  public void annotation(int typeIndex,int numMemberValuePairs) throws IOException {  write16bit(typeIndex);  write16bit(numMemberValuePairs);}  }
class C{  public static float max(float... numbers){  if (numbers.length < 1) {    throw new IllegalArgumentException();  }  float max=numbers[0];  for (int i=1; i < numbers.length; i++) {    if (numbers[i] > max) {      max=numbers[i];    }  }  return max;}  }
class C{  public void onPostExecute(List<AcronymExpansion> acronymExpansionsList,String acronym){  mResults=acronymExpansionsList;  mActivity.get().displayResults(acronymExpansionsList,"no expansions for " + acronym + " found");  mAsyncTask=null;}  }
class C{  public static long findNextDelayedAllocationIn(long unassignedShardsAllocatedTimestamp,Settings settings,ClusterState state){  long nextDelay=Long.MAX_VALUE;  for (  ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {    if (shard.primary() == false) {      IndexMetaData indexMetaData=state.metaData().index(shard.getIndex());      long nextShardDelay=shard.unassignedInfo().getDelayAllocationExpirationIn(unassignedShardsAllocatedTimestamp,settings,indexMetaData.getSettings());      if (nextShardDelay > 0 && nextShardDelay < nextDelay) {        nextDelay=nextShardDelay;      }    }  }  return nextDelay == Long.MAX_VALUE ? 0l : nextDelay;}  }
class C{  public BrowseResponse Browse(RequestHeader RequestHeader,ViewDescription View,UnsignedInteger RequestedMaxReferencesPerNode,BrowseDescription... NodesToBrowse) throws ServiceFaultException, ServiceResultException {  BrowseRequest req=new BrowseRequest(RequestHeader,View,RequestedMaxReferencesPerNode,NodesToBrowse);  return (BrowseResponse)channel.serviceRequest(req);}  }
class C{  public void addAll(Collection<Artist> ps){synchronized (mArtists) {    mArtists.addAll(ps);    sortList();  }}  }
class C{  private void launchAnimBackup(){  if (backupRoundTripFirstLaunched) {    reverse=(AnimatedVectorDrawable)getResources().getDrawable(R.drawable.animated_ic_check_box_black_24dp_reverse,getTheme());    initial=(AnimatedVectorDrawable)getResources().getDrawable(R.drawable.animated_ic_check_box_black_24dp,getTheme());    backupRoundTripFirstLaunched=false;  }  if (reverseState) {    imageView2.setImageDrawable(reverse);  } else {    imageView2.setImageDrawable(initial);  }  reverseState=!reverseState;  ((AnimatedVectorDrawable)imageView2.getDrawable()).start();}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public Object invoke(Object obj,Object[] args) throws Throwable {  try {    init();    FastClassInfo fci=fastClassInfo;    return fci.f1.invoke(fci.i1,obj,args);  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }catch (  IllegalArgumentException e) {    if (fastClassInfo.i1 < 0)     throw new IllegalArgumentException("Protected method: " + sig1);    throw e;  }}  }
class C{  public Ambush(String sidc){  super(sidc);}  }
class C{  public final void prepare(){  if (DISABLE_WAITING) {    prepareNonBlocking();  } else {    prepare(VM.activePlan.collector().parallelWorkerCount());  }}  }
class C{  public PngChunkPLTE createPLTEChunk(){  PngChunkPLTE plte=new PngChunkPLTE(chunkList.imageInfo);  queueChunk(plte);  return plte;}  }
class C{  private StateConnection processPoll() throws IOException {  PortTcp port=_port;  if (port.isClosed()) {    return StateConnection.DESTROY;  }  if (readStream().available() > 0) {    return StateConnection.ACTIVE;  }  long timeout=_idleTimeout;  _idleStartTime=CurrentTime.currentTime();  _idleExpireTime=_idleStartTime + timeout;  PollTcpManagerBase pollManager=port.pollManager();  if (pollManager == null) {    port().stats().addLifetimeKeepaliveCount();    return threadPoll(timeout);  }  if (!_pollHandle.isKeepaliveStarted()) {    ServiceRef.flushOutbox();    if (_port.keepaliveThreadRead(readStream(),_idleTimeout) > 0) {      return StateConnection.ACTIVE;    } else     if (_idleExpireTime <= CurrentTime.currentTime()) {      return StateConnection.TIMEOUT;    }  }switch (pollManager.startPoll(_pollHandle)) {case START:{      if (log.isLoggable(Level.FINEST)) {        log.finest(dbgId() + "keepalive (poll)");      }      port().stats().addLifetimeKeepaliveCount();      port().stats().addLifetimeKeepalivePollCount();      return StateConnection.POLL;    }case DATA:{    if (log.isLoggable(Level.FINEST)) {      log.finest("keepalive data available (poll) [" + dbgId() + "]");    }    return StateConnection.ACTIVE;  }case CLOSED:{  if (log.isLoggable(Level.FINEST)) {    log.finest(dbgId() + " keepalive close (poll)");  }  return StateConnection.CLOSE_READ_A;}default :throw new IllegalStateException();}}  }
class C{  public PrecisionModel(Type modelType){  this.modelType=modelType;  if (modelType == FIXED) {    setScale(1.0);  }}  }
class C{  public double jointEntropy(int[] x,int[] y){  double h;  int[][] ns=new int[2][2];  int n=x.length;  double ln2=Math.log(2.0);  ns[0][0]=0;  ns[0][1]=0;  ns[1][0]=0;  ns[1][1]=0;  for (int i=0; i < n; i++) {    ns[x[i]][y[i]]++;  }  double[][] p=new double[2][2];  double lp00, lp01, lp10, lp11;  p[0][0]=(double)ns[0][0] / (double)n;  p[0][1]=(double)ns[0][1] / (double)n;  p[1][0]=(double)ns[1][0] / (double)n;  p[1][1]=(double)ns[1][1] / (double)n;  if (p[0][0] == 0.0) {    lp00=0.0;  } else {    lp00=-p[0][0] * Math.log(p[0][0]);  }  if (p[0][1] == 0.0) {    lp01=0.0;  } else {    lp01=-p[0][1] * Math.log(p[0][1]);  }  if (p[1][0] == 0.0) {    lp10=0.0;  } else {    lp10=-p[1][0] * Math.log(p[1][0]);  }  if (p[1][1] == 0.0) {    lp11=0.0;  } else {    lp11=-p[1][1] * Math.log(p[1][1]);  }  h=lp00 + lp01 + lp10+ lp11;  h/=ln2;  return h;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  final boolean oldState=isChecked();  final boolean newState;  if (commitChange) {    mVelocityTracker.computeCurrentVelocity(1000);    final float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0);    } else {      newState=getTargetCheckedState();    }  } else {    newState=oldState;  }  if (newState != oldState) {    playSoundEffect(SoundEffectConstants.CLICK);  }  setChecked(newState);  cancelSuperTouch(ev);}  }
class C{  public static void filterCutOff(Image inputImg,int inStart,int inLen,int inStep,Image outputImg,int outStart,int outLen,int outStep,Filter filter){  int fStart=0;  int fEnd=0;  for (int i=0; i < outLen; i++) {    fStart=CommonUtil.max((2 * i) - (inLen - 1),filter.getStart());    fEnd=CommonUtil.min((2 * i),filter.getEnd());    for (int j=fStart; j <= fEnd; j++) {      outputImg.getData()[outStart + i * outStep]+=filter.getData()[j - filter.getStart()] * inputImg.getData()[inStart + ((2 * i) - j) * inStep];    }  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList_TypeRef(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void fling(int velocityX){  if (getChildCount() > 0) {    int width=getWidth() - mPaddingRight - mPaddingLeft;    int right=getChildAt(0).getWidth();    mScroller.fling(mScrollX,mScrollY,velocityX,0,0,Math.max(0,right - width),0,0,width / 2,0);    final boolean movingRight=velocityX > 0;    View currentFocused=findFocus();    View newFocused=findFocusableViewInMyBounds(movingRight,mScroller.getFinalX(),currentFocused);    if (newFocused == null) {      newFocused=this;    }    if (newFocused != currentFocused) {      newFocused.requestFocus(movingRight ? View.FOCUS_RIGHT : View.FOCUS_LEFT);    }    postInvalidateOnAnimation();  }}  }
class C{  private void fireTableValueChange(TableValueChangeEvent event){  for (  TableValueChangeListener listener : m_listeners) {    listener.tableValueChange(event);  }}  }
class C{  public void add(IJavaElement element) throws JavaModelException {  IPath containerPath=null;  String containerPathToString=null;  PackageFragmentRoot root=null;  int includeMask=SOURCES | APPLICATION_LIBRARIES | SYSTEM_LIBRARIES;switch (element.getElementType()) {case IJavaElement.JAVA_MODEL:    break;case IJavaElement.JAVA_PROJECT:  add((JavaProject)element,null,includeMask,new HashSet(2),new HashSet(2),null);break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:root=(PackageFragmentRoot)element;IPath rootPath=root.internalPath();containerPath=root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : rootPath;containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();IResource rootResource=root.resource();String projectPath=root.getJavaProject().getPath().toString();if (rootResource != null && rootResource.isAccessible()) {String relativePath=Util.relativePath(rootResource.getFullPath(),containerPath.segmentCount());add(projectPath,relativePath,containerPathToString,false,null);} else {add(projectPath,"",containerPathToString,false,null);}break;case IJavaElement.PACKAGE_FRAGMENT:root=(PackageFragmentRoot)element.getParent();projectPath=root.getJavaProject().getPath().toString();if (root.isArchive()) {String relativePath=Util.concatWith(((PackageFragment)element).names,'/');containerPath=root.getPath();containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();add(projectPath,relativePath,containerPathToString,true,null);} else {IResource resource=((JavaElement)element).resource();if (resource != null) {if (resource.isAccessible()) {containerPath=root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.internalPath();} else {containerPath=resource.getParent().getFullPath();}containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();String relativePath=Util.relativePath(resource.getFullPath(),containerPath.segmentCount());add(projectPath,relativePath,containerPathToString,true,null);}}break;default :if (element instanceof IMember) {if (this.elements == null) {this.elements=new ArrayList();}this.elements.add(element);}root=(PackageFragmentRoot)element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);projectPath=root.getJavaProject().getPath().toString();String relativePath;if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {containerPath=root.getParent().getPath();relativePath=Util.relativePath(getPath(element,false),root.getJavaProject().getPath().segmentCount());} else {containerPath=root.internalPath();relativePath=getPath(element,true).toString();}containerPathToString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();add(projectPath,relativePath,containerPathToString,false,null);}if (root != null) addEnclosingProjectOrJar(root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath());}  }
class C{  private void create(){  DocumentBuilderFactory docBFac;  DocumentBuilder docBuild;  try {    docBFac=DocumentBuilderFactory.newInstance();    docBuild=docBFac.newDocumentBuilder();    doc=docBuild.newDocument();  } catch (  Exception ex) {    ex.printStackTrace();    return;  }  rootElement=doc.createElement("mailTemplates");  doc.appendChild(rootElement);  Element newelem=doc.createElement("accepted");  newelem.setAttribute("name","Standard");  newelem.setAttribute("subject","[JPlag] Account request accepted");  newelem.setAttribute("data","Dear {realname},\n\nYour JPlag account " + "request has been accepted.\nPlease visit the following " + "URL to get access to the client application:\n\n"+ "Website: {server}\nUsername: {username}\n\n"+ "Best regards\nThe JPlag administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("accepted");  newelem.setAttribute("name","No email");  rootElement.appendChild(newelem);  newelem=doc.createElement("declined");  newelem.setAttribute("name","Standard");  newelem.setAttribute("subject","[JPlag] Account request rejected");  newelem.setAttribute("data","Dear {realname},\n\nWe are sorry to tell" + " you, that we decided not to give you a JPlag account" + " because\n\n<ENTER REASON HERE>\n\nBest regards\nThe JPlag"+ " administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("declined");  newelem.setAttribute("name","No comparison to the Internet");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\nIt is our impression" + " that you want to compare your students work to the" + " internet, but JPlag does not do that. For more information"+ " about what JPlag is able to do, please refer to our"+ " website.\nIf this assumption is wrong, please apply again"+ " so that we can give you an account.\n\n"+ "Best regards\nThe JPlag administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("declined");  newelem.setAttribute("name","No teacher");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\n" + "You need to be a teacher or lecturer to qualify for an account. " + "If you are neither, you may still get an account for research "+ "reasons, but you have to give more details about the kind of "+ "research you are doing.\n\n"+ "Best regards\nThe JPlag administration");  newelem=doc.createElement("declined");  newelem.setAttribute("name","Illegal Email address");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\n" + "We are sorry to tell you that we can not give you a JPlag " + "account, since you registered with an anonymous email address. "+ "You may re-apply with your official school/university email "+ "address.\n\n"+ "Best regards\nThe JPlag administration");  newelem=doc.createElement("declined");  newelem.setAttribute("name","No individual account");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\n" + "We are sorry to tell you that we can not give you a JPlag " + "account, since you did not apply as an individual. (We do not "+ "give accounts to groups.)\nPlease re-apply with your personal "+ "data.\n\n"+ "Best regards\nThe JPlag administration");  newelem=doc.createElement("declined");  newelem.setAttribute("name","Duplication");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\n" + "We denied your account, since you plan to use JPlag to find " + "code duplication; something which JPlag can not do.\n"+ "It is made to compare different programs to each other. While "+ "this seems to be similar to find duplicates, it is something "+ "different from the technical point of view.\n\n"+ "Best regards\nThe JPlag administration");  newelem=doc.createElement("declined");  newelem.setAttribute("name","English");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\n" + "Although we have localized versions of the JPlag program itself," + " you still have to apply in English or German, since these are"+ " the only languages we understand.\n\n"+ "Best regards\nThe JPlag administration");  newelem=doc.createElement("declined");  newelem.setAttribute("name","Full name");  newelem.setAttribute("subject","[JPlag] Account request denied");  newelem.setAttribute("data","Dear {realname},\n\n" + "Your account was denied, since you did not fill in the form on " + "the Website properly.\nPlease apply with your full name and "+ "correct email address of your school/university.\n\n"+ "Best regards\nThe JPlag administration");  newelem=doc.createElement("declined");  newelem.setAttribute("name","No email");  rootElement.appendChild(newelem);  newelem=doc.createElement("serverMail");  newelem.setAttribute("name","verification");  newelem.setAttribute("subject","[JPlag] Email address verification");  newelem.setAttribute("data","Dear {realname},\n\nThis mail is sent " + "to you in order to verificate your email address. Please " + "visit the following URL to activate your request:\n\n"+ "{server}/indexActivate.jsp?code={code}"+ "\n\nAfter the activation the request will be sent to the "+ "administrator who will then decide on your application.\n\n"+ "Best regards\nThe JPlag administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("serverMail");  newelem.setAttribute("name","warnExpire");  newelem.setAttribute("subject","[JPlag] Your account expires within two weeks!");  newelem.setAttribute("data","Dear {realname},\n\n" + "Your JPlag account will expire on {expires} (DD.MM.YYYY).\n" + "Please contact us, if you want to extend your "+ "account time.\n\nBest regards\nThe JPlag administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("serverMail");  newelem.setAttribute("name","askExtend");  newelem.setAttribute("subject","[JPlag] Your account expires within two weeks!");  newelem.setAttribute("data","Dear {realname},\n\n" + "Your JPlag account will expire on {expires} (DD.MM.YYYY).\n" + "If you want to extend your account time for a year, just "+ "visit the following URL:\n\n"+ "{server}/indexExtend.jsp?code={code}"+ "\n\nIf you do not need this account anymore, you can just "+ "ignore this mail."+ "\n\nBest regards\nThe JPlag administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("serverMail");  newelem.setAttribute("name","expired");  newelem.setAttribute("subject","[JPlag] Your account has expired!");  newelem.setAttribute("data","Dear {realname},\n\n" + "We are sorry to tell you that your JPlag account expired " + "today.\nPlease contact us, if you want to reactivate your "+ "account.\n\nBest regards\nThe JPlag administration");  rootElement.appendChild(newelem);  newelem=doc.createElement("serverMail");  newelem.setAttribute("name","requestNotify");  newelem.setAttribute("subject","[JPlag] New request notification");  newelem.setAttribute("data","Please decide on the following request " + "in the AdminTool:\n\nUsername: {username}" + "\nReal name: {realname}"+ "\nEmail: {email}\nAlternative email: {emailSecond}"+ "\nHomepage: {homepage}\nReason: {reason}"+ "\nAdditional notes: {notes}");  rootElement.appendChild(newelem);  writeXMLFile();}  }
class C{  public void unsetMatchColumn(String columnName) throws SQLException {  columnName=columnName.trim();  if (!((strMatchColumns.get(0)).equals(columnName))) {    throw new SQLException(resBundle.handleGetObject("jdbcrowsetimpl.unsetmatch").toString());  } else   if (iMatchColumns.get(0) > 0) {    throw new SQLException(resBundle.handleGetObject("jdbcrowsetimpl.usecolid").toString());  } else {    strMatchColumns.set(0,null);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if (z1 + z2 == 1) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isEmpty(ContentValues values){  if (values == null || values.size() == 0) {    return true;  } else {    return false;  }}  }
class C{  public final void add(final String blacklistSourcefile,final String host,final String path) throws PunycodeException {  if (host == null) {    throw new IllegalArgumentException("host may not be null");  }  if (path == null) {    throw new IllegalArgumentException("path may not be null");  }  String p=(!path.isEmpty() && path.charAt(0) == '/') ? path.substring(1) : path;  String h=((!isMatchable(host) && !host.isEmpty() && host.charAt(0) == '*') ? "." + host : host).toLowerCase();  h=Punycode.isBasic(h) ? h : MultiProtocolURL.toPunycode(h);  if (!p.isEmpty() && p.charAt(0) == '*') {    p="." + p;  }  Pattern pattern=Pattern.compile(p,Pattern.CASE_INSENSITIVE);  for (  final BlacklistType supportedBlacklistType : BlacklistType.values()) {    if (ListManager.listSetContains(supportedBlacklistType + ".BlackLists",blacklistSourcefile)) {      final Map<String,Set<Pattern>> blacklistMap=getBlacklistMap(supportedBlacklistType,isMatchable(host));      Set<Pattern> hostList;      if (!(blacklistMap.containsKey(h) && ((hostList=blacklistMap.get(h)) != null))) {        blacklistMap.put(h,(hostList=new HashSet<Pattern>()));      }      hostList.add(pattern);    }  }  PrintWriter pw=null;  try {    final String newEntry=h + "/" + pattern;    if (!blacklistFileContains(blacklistRootPath,blacklistSourcefile,newEntry)) {      pw=new PrintWriter(new FileWriter(new File(blacklistRootPath,blacklistSourcefile),true));      pw.println(newEntry);      pw.close();    }  } catch (  final IOException e) {    ConcurrentLog.logException(e);  } finally {    if (pw != null) {      try {        pw.close();      } catch (      final Exception e) {        log.warn("could not close stream to " + blacklistSourcefile + "! "+ e.getMessage());      }    }  }}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  public double[] distributionForInstance(Instance inst) throws Exception {  if (m_Classifiers.length == 1) {    return m_Classifiers[0].distributionForInstance(inst);  }  double[] probs=new double[inst.numClasses()];  if (m_Method == METHOD_1_AGAINST_1) {    double[][] r=new double[inst.numClasses()][inst.numClasses()];    double[][] n=new double[inst.numClasses()][inst.numClasses()];    for (int i=0; i < m_ClassFilters.length; i++) {      if (m_Classifiers[i] != null) {        Instance tempInst=(Instance)inst.copy();        tempInst.setDataset(m_TwoClassDataset);        double[] current=m_Classifiers[i].distributionForInstance(tempInst);        Range range=new Range(((RemoveWithValues)m_ClassFilters[i]).getNominalIndices());        range.setUpper(m_ClassAttribute.numValues());        int[] pair=range.getSelection();        if (m_pairwiseCoupling && inst.numClasses() > 2) {          r[pair[0]][pair[1]]=current[0];          n[pair[0]][pair[1]]=m_SumOfWeights[i];        } else {          if (current[0] > current[1]) {            probs[pair[0]]+=1.0;          } else {            probs[pair[1]]+=1.0;          }        }      }    }    if (m_pairwiseCoupling && inst.numClasses() > 2) {      return pairwiseCoupling(n,r);    }  } else {    for (int i=0; i < m_ClassFilters.length; i++) {      m_ClassFilters[i].input(inst);      m_ClassFilters[i].batchFinished();      double[] current=m_Classifiers[i].distributionForInstance(m_ClassFilters[i].output());      for (int j=0; j < m_ClassAttribute.numValues(); j++) {        if (((MakeIndicator)m_ClassFilters[i]).getValueRange().isInRange(j)) {          probs[j]+=current[1];        } else {          probs[j]+=current[0];        }      }    }  }  if (Utils.gr(Utils.sum(probs),0)) {    Utils.normalize(probs);    return probs;  } else {    return m_ZeroR.distributionForInstance(inst);  }}  }
class C{  public DTMNodeProxy(DTM dtm,int node){  this.dtm=dtm;  this.node=node;}  }
class C{  public final AABB updateBounds(){  if (extent != null) {    this.min=this.sub(extent);    this.max=this.add(extent);  }  return this;}  }
class C{  public void testCompareGreaterScale1(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=28;  String b="4573563567890295784902768787678287";  int bScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  private void putUser(DefaultUser user,boolean isAdd) throws UsersRepositoryException {  String username=user.getUserName();  if (isAdd) {    username=user.getUserName().toLowerCase();    if (contains(username)) {      throw new UsersRepositoryException(username + " already exists.");    }  }  HTableInterface table=null;  try {    table=TablePool.getInstance().getUsersRepositoryTable();    Put put=new Put(Bytes.toBytes(username));    put.add(HUsersRepository.COLUMN_FAMILY_NAME,HUsersRepository.COLUMN.PWD,Bytes.toBytes(user.getHashedPassword()));    table.put(put);    table.flushCommits();  } catch (  IOException e) {    log.error("Error while adding user in HBase",e);    throw new UsersRepositoryException("Error while adding user in HBase",e);  } finally {    if (table != null) {      try {        table.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (getBitFromSystemName(systemName) != 0);}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  boolean atLeastOneBlackPointFoundOnRight=false;  boolean atLeastOneBlackPointFoundOnBottom=false;  boolean atLeastOneBlackPointFoundOnLeft=false;  boolean atLeastOneBlackPointFoundOnTop=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnRight=true;      } else       if (!atLeastOneBlackPointFoundOnRight) {        right++;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnBottom=true;      } else       if (!atLeastOneBlackPointFoundOnBottom) {        down++;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnLeft=true;      } else       if (!atLeastOneBlackPointFoundOnLeft) {        left--;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnTop=true;      } else       if (!atLeastOneBlackPointFoundOnTop) {        up--;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static List<String> diagnosticsToString(List<TestDiagnostic> diagnostics){  final List<String> strings=new ArrayList<String>(diagnostics.size());  for (  TestDiagnostic diagnostic : diagnostics) {    strings.add(diagnostic.toString());  }  return strings;}  }
class C{  public void removeMigratingInContainerVm(ContainerVm vm){  containerVmDeallocate(vm);  getVmsMigratingIn().remove(vm);  getVmList().remove(vm);  getContainerVmScheduler().getVmsMigratingIn().remove(vm.getUid());  vm.setInMigration(false);}  }
class C{  public static final double min(double[] a){  double min=Double.POSITIVE_INFINITY;  for (int i=0; i < a.length; ++i) {    if (a[i] < min)     min=a[i];  }  return min;}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  public void sort(Comparator<? super T> comparator){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.sort(mOriginalValues,comparator);    } else {      Collections.sort(mObjects,comparator);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public MiscConfigurationScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public void fireFilterChangedEvent(){  fireEvent(EventType.FILTER_CHANGED);}  }
class C{  public static Object readObject(java.sql.ResultSet resultSet,int index) throws Exception {  ObjectInputStream objIn=new ObjectInputStream(resultSet.getBinaryStream(index));  Object obj=objIn.readObject();  objIn.close();  return obj;}  }
class C{  private Map.Entry<K,V> doRemoveFirstEntry(){  for (Node<K,V> b, n; ; ) {    if ((n=(b=head.node).next) == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    @SuppressWarnings("unchecked") V vv=(V)v;    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,vv);  }}  }
class C{  public DatastoreV1.Entity mockPhotoEntity(String userId){  List<DatastoreV1.Property> properties=ImmutableList.of(makeProperty("description",makeValue("Great description")).build(),makeProperty("userId",makeValue(userId)).build(),makeProperty("date",makeValue(new Date())).build(),makeProperty("flagged",makeValue(false)).build(),makeProperty("available",makeValue(false)).build(),makeProperty("numberVotes",makeValue(0)).build(),makeProperty("numberPositiveVotes",makeValue(0)).build(),makeProperty("lowerTruePopularity",makeValue(0)).build(),makeProperty("upperTruePopularity",makeValue(0)).build());  return DatastoreV1.Entity.newBuilder().setKey(makeKey("Photo",12345)).addAllProperty(properties).build();}  }
class C{  private static int[] createDelays(final int delay,final int count){  final int[] delays=new int[count];  Arrays.fill(delays,delay);  return delays;}  }
class C{  private static boolean findPurchaseMix(final IntegerMap<ProductionRule> bestAttack,final IntegerMap<ProductionRule> bestDefense,final IntegerMap<ProductionRule> bestTransport,final IntegerMap<ProductionRule> bestMaxUnits,final IntegerMap<ProductionRule> bestMobileAttack,final List<ProductionRule> rules,final int totPU,final int maxUnits,final GameData data,final PlayerID player,final int fighters){  final IntegerMap<String> parameters=new IntegerMap<>();  parameters.put("attack",0);  parameters.put("defense",0);  parameters.put("maxAttack",0);  parameters.put("maxDefense",0);  parameters.put("maxUnitAttack",0);  parameters.put("maxTransAttack",0);  parameters.put("maxMobileAttack",0);  parameters.put("maxTransCost",100000);  parameters.put("maxAttackCost",100000);  parameters.put("maxUnitCount",0);  parameters.put("maxDefenseCost",100000);  parameters.put("maxUnitCost",100000);  parameters.put("totcost",0);  parameters.put("totUnit",0);  parameters.put("totMovement",0);  parameters.put("maxMovement",0);  parameters.put("maxUnits",maxUnits);  parameters.put("maxCost",totPU);  parameters.put("infantry",0);  parameters.put("nonInfantry",0);  final HashMap<ProductionRule,Boolean> infMap=new HashMap<>();  final HashMap<ProductionRule,Boolean> nonInfMap=new HashMap<>();  final HashMap<ProductionRule,Boolean> supportableInfMap=new HashMap<>();  final Iterator<ProductionRule> prodIter=rules.iterator();  final HashMap<ProductionRule,Boolean> transportMap=new HashMap<>();  while (prodIter.hasNext()) {    final ProductionRule rule=prodIter.next();    bestAttack.put(rule,0);    bestDefense.put(rule,0);    bestMaxUnits.put(rule,0);    bestTransport.put(rule,0);    final NamedAttachable resourceOrUnit=rule.getResults().keySet().iterator().next();    if (!(resourceOrUnit instanceof UnitType)) {      continue;    }    final UnitType x=(UnitType)resourceOrUnit;    supportableInfMap.put(rule,UnitAttachment.get(x).getArtillerySupportable());    transportMap.put(rule,Matches.UnitTypeCanBeTransported.match(x));    infMap.put(rule,Matches.UnitTypeIsInfantry.match(x));    nonInfMap.put(rule,Matches.UnitTypeCanBeTransported.match(x) && Matches.UnitTypeIsInfantry.invert().match(x) && Matches.UnitTypeIsAAforAnything.invert().match(x));  }  final int countNum=1;  final int goodLoop=purchaseLoop(parameters,countNum,bestAttack,bestDefense,bestTransport,bestMaxUnits,bestMobileAttack,transportMap,infMap,nonInfMap,supportableInfMap,data,player,fighters);  if (goodLoop > 0 && bestAttack.size() > 0 && bestDefense.size() > 0) {    return true;  } else {    return false;  }}  }
class C{  private boolean verifyXInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    Double.parseDouble(inputString);  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  public void evaluateTestSet(RegressionDataSet testSet){  sqrdErrorStats=new OnLineStatistics();  totalTrainingTime=totalClassificationTime=0;  evaluationWork(dataSet,testSet,0);}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  public CsvWriter createCsvWriter(BufferedWriter writer){  CsvWriter csvWriter=new CsvWriter(writer);  csvWriter.setEscapeChar(escape);  csvWriter.setEscapedChars(escapedChars);  csvWriter.setNullAutofill(nullAutofill);  csvWriter.setNullPolicy(nullPolicy);  csvWriter.setNullValue(nullValue);  csvWriter.setQuoteChar(quote);  csvWriter.setQuoted(useQuotes);  csvWriter.setFieldSeparator(fieldSeparator);  csvWriter.setRecordSeparator(recordSeparator);  csvWriter.setSuppressedChars(suppressedChars);  csvWriter.setWriteHeaders(useHeaders);  return csvWriter;}  }
class C{  public void removeAutoScaleRule(String ruleName){  autoScaler.removeRule(ruleName);}  }
class C{  public T caseAnonymous_beforeCode_1_(Anonymous_beforeCode_1_ object){  return null;}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  public MapBasedMovement(Settings settings,SimMap newMap,int nrofMaps){  super(settings);  map=newMap;  this.nrofMapFilesRead=nrofMaps;  readOkMapNodeTypes(settings);  maxPathLength=100;  minPathLength=10;  backAllowed=false;}  }
class C{  public Builder withIndex(long index){  response.index=Assert.argNot(index,index < 0,"index cannot be less than 0");  return this;}  }
class C{  @SuppressWarnings({"TryFinallyCanBeTryWithResources","EmptyTryBlock"}) public void testAppend() throws Exception {  if (appendSupported()) {    create(igfs,paths(DIR,SUBDIR),null);    assert igfs.exists(SUBDIR);    createFile(igfs,FILE,true,BLOCK_SIZE,chunk);    checkFile(igfs,igfsSecondary,FILE,chunk);    appendFile(igfs,FILE,chunk);    checkFile(igfs,igfsSecondary,FILE,chunk,chunk);    IgfsPath path2=FILE2;    IgfsOutputStream os=null;    try {      os=igfs.append(path2,true);      writeFileChunks(os,chunk);    }  finally {      U.closeQuiet(os);      awaitFileClose(igfs,path2);    }    try {      os=igfs.append(path2,false);      writeFileChunks(os,chunk);    }  finally {      U.closeQuiet(os);      awaitFileClose(igfs,path2);    }    checkFile(igfs,igfsSecondary,path2,chunk,chunk);    try {      try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/should-not-be-created"),false)){      }       fail("Exception expected");    } catch (    IgniteException e) {    }    checkNotExist(igfs,igfsSecondary,new IgfsPath("/d1"));    try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/k/l"),true)){      checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));      assert igfs.info(new IgfsPath("/k/l")).isFile();    }     try {      try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/k/l/m"),true)){      }       fail("Exception expected");    } catch (    IgniteException e) {    }    checkNotExist(igfs,igfsSecondary,new IgfsPath("/k/l/m"));    checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));    assert igfs.info(new IgfsPath("/k/l")).isFile();    try {      try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/k/l/m/n/o/p"),true)){      }       fail("Exception expected");    } catch (    IgniteException e) {    }    checkNotExist(igfs,igfsSecondary,new IgfsPath("/k/l/m"));    checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));    assert igfs.info(new IgfsPath("/k/l")).isFile();    igfs.mkdirs(new IgfsPath("/x/y"),null);    checkExist(igfs,igfsSecondary,new IgfsPath("/x/y"));    assert igfs.info(new IgfsPath("/x/y")).isDirectory();    try {      try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/x/y"),true)){      }       fail("Exception expected");    } catch (    IgniteException e) {    }    try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/x/y/f"),true)){      assert igfs.info(new IgfsPath("/x/y/f")).isFile();    }     try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/x/y/z/f"),true)){      assert igfs.info(new IgfsPath("/x/y/z/f")).isFile();    }     try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/x/y/z/t/f"),true)){      assert igfs.info(new IgfsPath("/x/y/z/t/f")).isFile();    }     try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/x/y/z/t/t2/t3/t4/t5/f"),true)){      assert igfs.info(new IgfsPath("/x/y/z/t/t2/t3/t4/t5/f")).isFile();    }     try {      try (IgfsOutputStream ignored=igfs.append(new IgfsPath("/d1/d2/d3/f"),false)){      }       fail("Exception expected");    } catch (    IgniteException e) {    }    checkNotExist(igfs,igfsSecondary,new IgfsPath("/d1"));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static String searchErrorMessage(List<String> output){  int i=0;  int length=output.size();  while (i < length && !output.get(i).contains("fatal:")) {    i++;  }  StringBuilder builder=new StringBuilder();  if (i == output.size()) {    for (    String line : output) {      if (!(line.startsWith("hint:") || line.startsWith("Warning:"))) {        builder.append(line).append('\n');      }    }  }  for (; i < output.size(); i++) {    if (!(output.get(i).startsWith("hint:") || output.get(i).startsWith("Warning:"))) {      builder.append(output.get(i)).append('\n');    }  }  if (builder.toString().toLowerCase().contains("fatal: the remote end hung up unexpectedly")) {    builder.append("SSH key doesn't exist or it is not valid");  }  return builder.toString();}  }
class C{  private List<AbstractTask> chooseMoves(final ILoadBalancerService loadBalancerService){  if (resourceManager.maximumMovesPerTarget == 0) {    return EMPTY_LIST;  }  final int minActiveIndexPartitions=resourceManager.minimumActiveIndexPartitions;  final int nactive=overflowMetadata.getActiveCount();  if (nactive <= minActiveIndexPartitions) {    if (log.isInfoEnabled())     log.info("Preconditions for move not satisified: nactive=" + nactive + ", minActive="+ minActiveIndexPartitions);    return EMPTY_LIST;  }  final int maxMovesPerTarget=resourceManager.maximumMovesPerTarget;  final UUID sourceServiceUUID=resourceManager.getDataServiceUUID();  final UUID[] underUtilizedDataServiceUUIDs;  try {    underUtilizedDataServiceUUIDs=loadBalancerService.getUnderUtilizedDataServices(0,0,sourceServiceUUID);  } catch (  TimeoutException t) {    log.warn(t.getMessage());    return EMPTY_LIST;  }catch (  InterruptedException t) {    log.warn(t.getMessage());    return EMPTY_LIST;  }catch (  Throwable t) {    log.error("Could not obtain target service UUIDs: ",t);    return EMPTY_LIST;  }  if (underUtilizedDataServiceUUIDs == null || underUtilizedDataServiceUUIDs.length == 0) {    if (log.isInfoEnabled())     log.info("Load balancer does not report any underutilized services.");    return EMPTY_LIST;  }  final int maxMoves;{    final int nactiveSurplus=nactive - minActiveIndexPartitions;    assert nactiveSurplus > 0;    assert underUtilizedDataServiceUUIDs != null;    maxMoves=Math.min(resourceManager.maximumMoves,Math.min(nactiveSurplus,maxMovesPerTarget * underUtilizedDataServiceUUIDs.length));  }  if (log.isInfoEnabled())   log.info("Considering index partition moves: #targetServices=" + underUtilizedDataServiceUUIDs.length + ", maxMovesPerTarget="+ maxMovesPerTarget+ ", nactive="+ nactive+ ", maxMoves="+ maxMoves+ ", sourceService="+ sourceServiceUUID+ ", targetServices="+ Arrays.toString(underUtilizedDataServiceUUIDs));  long maxRangeCount=0L;  final List<Score> scores=new LinkedList<Score>();  for (  Score score : overflowMetadata.getScores()) {    final String name=score.name;    if (isUsed(name))     continue;    if (overflowMetadata.isCopied(name)) {      putUsed(name,"wasCopied(name=" + name + ")");      continue;    }    final StaleLocatorReason reason=resourceManager.getIndexPartitionGone(score.name);    if (reason != null) {      if (log.isInfoEnabled())       log.info("Skipping index: name=" + score.name + ", reason="+ reason);      continue;    }    final ViewMetadata vmd=overflowMetadata.getViewMetadata(name);    if (vmd == null) {      if (log.isInfoEnabled())       log.info("Skipping index: name=" + name + ", reason=dropped");      continue;    }    if (vmd.pmd.getSourcePartitionId() != -1) {      if (log.isInfoEnabled())       log.info("Skipping index: name=" + name + ", reason=moveInProgress");      continue;    }    final long rangeCount=vmd.getRangeCount();    if (vmd.getPercentOfSplit() > resourceManager.maximumMovePercentOfSplit) {      if (log.isInfoEnabled())       log.info("Skipping index: name=" + name + ", reason=shouldSplit");      continue;    }    scores.add(score);    maxRangeCount=Math.max(maxRangeCount,rangeCount);  }  final PriorityQueue<Priority<ViewMetadata>> moveQueue=new PriorityQueue<Priority<ViewMetadata>>();  for (  Score score : scores) {    final ViewMetadata vmd=overflowMetadata.getViewMetadata(score.name);    final double moveMinScore=.1;    final boolean moveCandidate=score.drank >= moveMinScore;    final double movePriority=vmd.isTailSplit() ? score.drank / .1 : score.drank / vmd.getPercentOfSplit();    if (log.isInfoEnabled())     log.info(vmd.name + " : tailSplit=" + vmd.isTailSplit()+ ", moveCandidate="+ moveCandidate+ ", movePriority="+ movePriority+ ", drank="+ score.drank+ ", percentOfSplit="+ vmd.getPercentOfSplit()+ " : "+ vmd+ " : "+ score);    if (!moveCandidate) {      continue;    }    moveQueue.add(new Priority<ViewMetadata>(movePriority,vmd));  }  int nmove=0;  final List<AbstractTask> tasks=new ArrayList<AbstractTask>(maxMoves);  while (nmove < maxMoves && !moveQueue.isEmpty()) {    final ViewMetadata vmd=moveQueue.poll().v;    if (log.isInfoEnabled())     log.info("Considering move candidate: " + vmd);    final UUID targetDataServiceUUID=underUtilizedDataServiceUUIDs[nmove % underUtilizedDataServiceUUIDs.length];    if (sourceServiceUUID.equals(targetDataServiceUUID)) {      log.error("LBS included the source data service in the set of possible targets: source=" + sourceServiceUUID + ", targets="+ Arrays.toString(underUtilizedDataServiceUUIDs));      continue;    }    String targetDataServiceName;    try {      targetDataServiceName=resourceManager.getFederation().getDataService(targetDataServiceUUID).getServiceName();    } catch (    Throwable t) {      targetDataServiceName=targetDataServiceUUID.toString();    }    if (vmd.isTailSplit()) {      if (log.isInfoEnabled())       log.info("Will tailSplit " + vmd.name + " and move the rightSibling to dataService="+ targetDataServiceName);      final AbstractTask task=new SplitTailTask(vmd,targetDataServiceUUID);      tasks.add(task);      putUsed(vmd.name,"willTailSplit + moveRightSibling(" + vmd.name + " -> "+ targetDataServiceName+ ") : "+ vmd+ " : "+ overflowMetadata.getScore(vmd.name));      nmove++;    } else     if (vmd.getPercentOfSplit() > .5) {      if (log.isInfoEnabled())       log.info("Will split " + vmd.name + " and move the smallest post-split index partition to dataService="+ targetDataServiceName);      final AbstractTask task=new SplitIndexPartitionTask(vmd,targetDataServiceUUID);      tasks.add(task);      putUsed(vmd.name,"willSplit+Move(" + vmd.name + " -> "+ targetDataServiceName+ ") : "+ vmd+ " : "+ overflowMetadata.getScore(vmd.name));      nmove++;    } else {      if (log.isInfoEnabled())       log.info("Will move " + vmd.name + " to dataService="+ targetDataServiceName);      final AbstractTask task=new MoveTask(vmd,targetDataServiceUUID);      tasks.add(task);      putUsed(vmd.name,"willMove(" + vmd.name + " -> "+ targetDataServiceName+ ") : "+ vmd+ " : "+ overflowMetadata.getScore(vmd.name));      nmove++;    }  }  if (log.isInfoEnabled())   log.info("Will move " + nmove + " index partitions based on utilization.");  return tasks;}  }
class C{  public dt addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void doRestoreState(Bundle b,SaveFieldInfo info,Object holder){  try {    if (b.get(info.saveField.value()) == null) {      return;    }switch (info.type) {case BundleSupportType.BYTE:      info.field.set(holder,b.getByte(info.saveField.value()));    break;case BundleSupportType.BYTE_ARRAY:  info.field.set(holder,b.getByteArray(info.saveField.value()));break;case BundleSupportType.SHORT:info.field.set(holder,b.getShort(info.saveField.value()));break;case BundleSupportType.SHORT_ARRAY:info.field.set(holder,b.getShortArray(info.saveField.value()));break;case BundleSupportType.INT:info.field.set(holder,b.getInt(info.saveField.value()));break;case BundleSupportType.INT_ARRAY:info.field.set(holder,b.getIntArray(info.saveField.value()));break;case BundleSupportType.BOOLEAN:info.field.set(holder,b.getBoolean(info.saveField.value()));break;case BundleSupportType.BOOLEAN_ARRAY:info.field.set(holder,b.getBooleanArray(info.saveField.value()));break;case BundleSupportType.DOUBLE:info.field.set(holder,b.getDouble(info.saveField.value()));break;case BundleSupportType.DOUBLE_ARRAY:info.field.set(holder,b.getDoubleArray(info.saveField.value()));break;case BundleSupportType.CHAR:info.field.set(holder,b.getChar(info.saveField.value()));break;case BundleSupportType.CHAR_ARRAY:info.field.set(holder,b.getCharArray(info.saveField.value()));break;case BundleSupportType.FLOAT:info.field.set(holder,b.getFloat(info.saveField.value()));break;case BundleSupportType.FLOAT_ARRAY:info.field.set(holder,b.getFloatArray(info.saveField.value()));break;case BundleSupportType.LONG:info.field.set(holder,b.getLong(info.saveField.value()));break;case BundleSupportType.LONG_ARRAY:info.field.set(holder,b.getLongArray(info.saveField.value()));break;case BundleSupportType.STRING:info.field.set(holder,b.getString(info.saveField.value()));break;case BundleSupportType.STRING_ARRAY:info.field.set(holder,b.getStringArray(info.saveField.value()));break;case BundleSupportType.CHAR_SEQUENCE:info.field.set(holder,b.getCharSequence(info.saveField.value()));break;case BundleSupportType.CHAR_SEQUENCE_ARRAY:info.field.set(holder,b.getCharSequenceArray(info.saveField.value()));break;case BundleSupportType.PARCELABLE:info.field.set(holder,b.getParcelable(info.saveField.value()));break;case BundleSupportType.PARCELABLE_ARRAY:info.field.set(holder,b.getParcelableArray(info.saveField.value()));break;case BundleSupportType.IBINDER:if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) info.field.set(holder,b.getBinder(info.saveField.value()));break;case BundleSupportType.BUNDLE:info.field.set(holder,b.getBundle(info.saveField.value()));break;case BundleSupportType.SERIALIZABLE:info.field.set(holder,b.getSerializable(info.saveField.value()));break;case BundleSupportType.SPARSE_PARCELABLE_ARRAY:info.field.set(holder,b.getSparseParcelableArray(info.saveField.value()));break;case BundleSupportType.INTEGER_ARRAY_lIST:info.field.set(holder,b.getIntegerArrayList(info.saveField.value()));break;case BundleSupportType.STRING_ARRAY_LIST:info.field.set(holder,b.getStringArrayList(info.saveField.value()));break;case BundleSupportType.PARCELABLE_ARRAY_LIST:info.field.set(holder,b.getParcelableArrayList(info.saveField.value()));break;case BundleSupportType.PARCELABLE_LIST:info.field.set(holder,b.getParcelableArrayList(info.saveField.value()));break;case BundleSupportType.CHAR_SEQUENCE_ARRAY_LIST:info.field.set(holder,b.getCharSequenceArrayList(info.saveField.value()));break;}} catch (Exception e) {throw new RuntimeException("Error to restore instance state ---> key = " + info.saveField.value(),e);}}  }
class C{  private void checkHost(HostResource host){  assertThat(host.getFullyQualifiedHostName()).isEqualTo("ns1.example1.test");  assertThat(host.getRepoId()).isEqualTo("Hns1_example1_test-TEST");}  }
class C{  public void close() throws java.io.IOException {  return;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  protected Canvas createCanvas(){  return new C();}  }
class C{  @Deprecated private static DiscordRecord findBestDiscordWithHash(double[] series,int windowSize,HashMap<String,ArrayList<Integer>> hash,VisitRegistry globalRegistry,double nThreshold) throws Exception {  ArrayList<FrequencyTableEntry> frequencies=hashToFreqEntries(hash);  Collections.sort(frequencies);  int bestSoFarPosition=-1;  double bestSoFarDistance=0.0D;  String bestSoFarWord="";  int iterationCounter=0;  int distanceCalls=0;  while (!frequencies.isEmpty()) {    iterationCounter++;    FrequencyTableEntry currentEntry=frequencies.remove(0);    String currentWord=String.valueOf(currentEntry.getStr());    int currentPos=currentEntry.getPosition();    if (globalRegistry.isVisited(currentPos)) {      continue;    }    VisitRegistry randomRegistry=new VisitRegistry(series.length);    randomRegistry.markVisited(series.length - windowSize,series.length);    int markStart=currentPos - windowSize;    if (markStart < 0) {      markStart=0;    }    int markEnd=currentPos + windowSize;    if (markEnd > series.length) {      markEnd=series.length;    }    randomRegistry.markVisited(markStart,markEnd);    LOGGER.trace("conducting search for {} at {}, iteration {}, to go: {}",currentWord,currentPos,iterationCounter,frequencies.size());    double[] currentCandidateSeq=tp.znorm(tp.subseriesByCopy(series,currentPos,currentPos + windowSize),nThreshold);    double nearestNeighborDist=Double.MAX_VALUE;    boolean doRandomSearch=true;    List<Integer> currentWordOccurrences=hash.get(currentWord);    for (    Integer nextOccurrence : currentWordOccurrences) {      if (randomRegistry.isVisited(nextOccurrence.intValue())) {        continue;      } else {        randomRegistry.markVisited(nextOccurrence.intValue());      }      double[] occurrenceSubsequence=tp.znorm(tp.subseriesByCopy(series,nextOccurrence,nextOccurrence + windowSize),nThreshold);      double dist=ed.distance(currentCandidateSeq,occurrenceSubsequence);      distanceCalls++;      if (dist < nearestNeighborDist) {        nearestNeighborDist=dist;        LOGGER.trace(" ** current NN at {}, distance: {}, pos {}" + nextOccurrence,nearestNeighborDist,currentPos);      }      if (dist < bestSoFarDistance) {        LOGGER.trace(" ** abandoning random visits loop, seen distance {} at iteration {}",dist,bestSoFarDistance);        doRandomSearch=false;        break;      }    }    if (doRandomSearch) {      LOGGER.trace("starting random search");      int visitCounter=0;      int randomPos=-1;      while (-1 != (randomPos=randomRegistry.getNextRandomUnvisitedPosition())) {        randomRegistry.markVisited(randomPos);        double[] randomSubsequence=tp.znorm(tp.subseriesByCopy(series,randomPos,randomPos + windowSize),nThreshold);        double dist=ed.distance(currentCandidateSeq,randomSubsequence);        distanceCalls++;        if (dist < bestSoFarDistance) {          nearestNeighborDist=dist;          LOGGER.trace(" ** abandoning random visits loop, seen distance {} at iteration {}",nearestNeighborDist,visitCounter);          break;        }        if (dist < nearestNeighborDist) {          LOGGER.trace(" ** current NN at {}, distance: {}, pos {}" + randomPos,dist,currentPos);          nearestNeighborDist=dist;        }        visitCounter=visitCounter + 1;      }    }    if (nearestNeighborDist > bestSoFarDistance) {      LOGGER.debug("discord updated: pos {}, dist {}",currentPos,bestSoFarDistance);      bestSoFarDistance=nearestNeighborDist;      bestSoFarPosition=currentPos;      bestSoFarWord=currentWord;    }    LOGGER.trace(" . . iterated {} times, best distance: {} for a string {} at {}",iterationCounter,bestSoFarDistance,bestSoFarWord,bestSoFarPosition);  }  LOGGER.trace("Distance calls: {}",distanceCalls);  DiscordRecord res=new DiscordRecord(bestSoFarPosition,bestSoFarDistance,bestSoFarWord);  res.setLength(windowSize);  res.setInfo("distance calls: " + distanceCalls);  return res;}  }
class C{  public ConcurrentModificationException(String message){  super(message);}  }
class C{  public static Object updateKey1(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.put("key1","value2");    return eventId;  } catch (  Exception e) {    fail("put failed due to ",e);  }  return null;}  }
class C{  protected CategoryGraph(Wikipedia pWiki,Set<Integer> pPageIDs) throws WikiApiException {  constructCategoryGraph(pWiki,pPageIDs,null);}  }
class C{  public CommitRecordIndexTupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);  this.ser=new Entry.EntrySerializer();}  }
class C{  public boolean isFileHidingEnabled(){  return useFileHiding;}  }
class C{  @VisibleForTesting protected void resolveConflict(final String localPath,final String updatedPath,final ResolveConflictsCommand.AutoResolveType type,final ServerContext context,final ResolveConflictsModel model,final boolean updateFiles) throws VcsException {  IdeaHelper.setProgress(ProgressManager.getInstance().getProgressIndicator(),0.1,TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_RESOLVING_STATUS,localPath));  try {    CommandUtils.resolveConflictsByPath(context,Arrays.asList(localPath),type);    if (updateFiles) {      updatedFiles.getGroupById(FileGroup.MERGED_ID).add(updatedPath,TFSVcs.getKey(),null);    }    IdeaHelper.setProgress(ProgressManager.getInstance().getProgressIndicator(),0.5,TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_RESOLVING_REFRESH));    findConflicts(model);  } catch (  VcsException e) {    throw e;  }catch (  Exception e) {    logger.error("Error while resolving conflict: " + e.getMessage());    throw new VcsException(TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_MERGE_ERROR,localPath,e.getMessage()));  }}  }
class C{  public BusinessObjectFormat createBusinessObjectFormatFromEntity(BusinessObjectFormatEntity businessObjectFormatEntity){  BusinessObjectFormat businessObjectFormat=new BusinessObjectFormat();  businessObjectFormat.setId(businessObjectFormatEntity.getId());  businessObjectFormat.setNamespace(businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode());  businessObjectFormat.setBusinessObjectDefinitionName(businessObjectFormatEntity.getBusinessObjectDefinition().getName());  businessObjectFormat.setBusinessObjectFormatUsage(businessObjectFormatEntity.getUsage());  businessObjectFormat.setBusinessObjectFormatFileType(businessObjectFormatEntity.getFileType().getCode());  businessObjectFormat.setBusinessObjectFormatVersion(businessObjectFormatEntity.getBusinessObjectFormatVersion());  businessObjectFormat.setLatestVersion(businessObjectFormatEntity.getLatestVersion());  businessObjectFormat.setPartitionKey(businessObjectFormatEntity.getPartitionKey());  businessObjectFormat.setDescription(businessObjectFormatEntity.getDescription());  List<Attribute> attributes=new ArrayList<>();  businessObjectFormat.setAttributes(attributes);  for (  BusinessObjectFormatAttributeEntity attributeEntity : businessObjectFormatEntity.getAttributes()) {    Attribute attribute=new Attribute();    attributes.add(attribute);    attribute.setName(attributeEntity.getName());    attribute.setValue(attributeEntity.getValue());  }  List<AttributeDefinition> attributeDefinitions=new ArrayList<>();  businessObjectFormat.setAttributeDefinitions(attributeDefinitions);  for (  BusinessObjectDataAttributeDefinitionEntity attributeDefinitionEntity : businessObjectFormatEntity.getAttributeDefinitions()) {    AttributeDefinition attributeDefinition=new AttributeDefinition();    attributeDefinitions.add(attributeDefinition);    attributeDefinition.setName(attributeDefinitionEntity.getName());    attributeDefinition.setPublish(attributeDefinitionEntity.getPublish());  }  if (!businessObjectFormatEntity.getSchemaColumns().isEmpty()) {    Schema schema=new Schema();    businessObjectFormat.setSchema(schema);    schema.setNullValue(businessObjectFormatEntity.getNullValue());    schema.setDelimiter(businessObjectFormatEntity.getDelimiter());    schema.setEscapeCharacter(businessObjectFormatEntity.getEscapeCharacter());    schema.setPartitionKeyGroup(businessObjectFormatEntity.getPartitionKeyGroup() != null ? businessObjectFormatEntity.getPartitionKeyGroup().getPartitionKeyGroupName() : null);    List<SchemaColumnEntity> dataSchemaColumns=new ArrayList<>();    List<SchemaColumnEntity> partitionSchemaColumns=new ArrayList<>();    for (    SchemaColumnEntity schemaColumnEntity : businessObjectFormatEntity.getSchemaColumns()) {      if (schemaColumnEntity.getPosition() != null) {        dataSchemaColumns.add(schemaColumnEntity);      }      if (schemaColumnEntity.getPartitionLevel() != null) {        partitionSchemaColumns.add(schemaColumnEntity);      }    }    Collections.sort(dataSchemaColumns,new SchemaColumnPositionComparator());    Collections.sort(partitionSchemaColumns,new SchemaColumnPartitionLevelComparator());    List<SchemaColumn> schemaColumns=new ArrayList<>();    schema.setColumns(schemaColumns);    for (    SchemaColumnEntity schemaColumnEntity : dataSchemaColumns) {      schemaColumns.add(createSchemaColumn(schemaColumnEntity));    }    if (partitionSchemaColumns.size() > 0) {      schemaColumns=new ArrayList<>();      schema.setPartitions(schemaColumns);      for (      SchemaColumnEntity schemaColumnEntity : partitionSchemaColumns) {        schemaColumns.add(createSchemaColumn(schemaColumnEntity));      }    }  }  return businessObjectFormat;}  }
class C{  protected Drawing createDrawing(){  DefaultDrawing drawing=new DefaultDrawing();  DOMStorableInputOutputFormat ioFormat=new DOMStorableInputOutputFormat(new PertFactory());  LinkedList<InputFormat> inputFormats=new LinkedList<InputFormat>();  inputFormats.add(ioFormat);  drawing.setInputFormats(inputFormats);  LinkedList<OutputFormat> outputFormats=new LinkedList<OutputFormat>();  outputFormats.add(ioFormat);  outputFormats.add(new ImageOutputFormat());  drawing.setOutputFormats(outputFormats);  return drawing;}  }
class C{  static void svd_opb(SMat A,double[] x,double[] y,double[] temp){  int[] pointr=A.pointr;  int[] rowind=A.rowind;  double[] value=A.value;  int n=A.cols;  for (int i=0; i < n; i++)   y[i]=0;  for (int i=0; i < A.rows; i++)   temp[i]=0.0;  for (int i=0; i < A.cols; i++) {    int end=pointr[i + 1];    for (int j=pointr[i]; j < end; j++)     temp[rowind[j]]+=value[j] * (x[i]);  }  for (int i=0; i < A.cols; i++) {    int end=pointr[i + 1];    for (int j=pointr[i]; j < end; j++)     y[i]+=value[j] * temp[rowind[j]];  }  return;}  }
class C{  private void enhancedLike(boolean useBindPrms) throws Exception {  Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  RegionAttributes regionAttributes=attributesFactory.create();  Region region=cache.createRegion("pos",regionAttributes);  String[] values=new String[]{"active"};  String[] likePredicates=new String[]{"active","act%%ve","a%e","%ctiv%","%c%iv%","%ctive","%%ti%","activ_","_ctive","ac_ive","_c_iv_","_ctiv%","__tive","act__e","a%iv_","a_tiv%","%","ac%"};  for (int i=0; i < values.length; i++) {    region.put(new Integer(i),values[i]);  }  QueryService qs=cache.getQueryService();  Query q;  SelectResults results;  for (int i=0; i < likePredicates.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos.values p where p like '" + likePredicates[i] + "'");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos.values p where p like $1");      results=(SelectResults)q.execute(new Object[]{likePredicates[i]});    }    List r=results.asList();    if (r.size() != 1 || !r.get(0).equals(values[0])) {      fail("Unexpected result. expected :" + values[0] + " for the like predicate: "+ likePredicates[i]+ " found : "+ (r.size() == 1 ? r.get(0) : "Result size not equal to 1"));    }  }  qs.createIndex("p",IndexType.FUNCTIONAL,"p","/pos.values p");  for (int i=0; i < likePredicates.length; i++) {    if (!useBindPrms) {      q=qs.newQuery("select p from /pos.values p where p like '" + likePredicates[i] + "'");      results=(SelectResults)q.execute();    } else {      q=qs.newQuery("select p from /pos.values p where p like $1");      results=(SelectResults)q.execute(new Object[]{likePredicates[i]});    }    List r=results.asList();    if (r.size() != 1 || !r.get(0).equals(values[0])) {      fail("Unexpected result. expected :" + values[0] + " for the like predicate: "+ likePredicates[i]+ " found : "+ (r.size() == 1 ? r.get(0) : "Result size not equal to 1"));    }  }}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatainsertdatamiddle.class,args);}  }
class C{  public EmptyStackException(){}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  public static void openLink(String link){  if (link == null)   return;  try {    java.awt.Desktop.getDesktop().browse(new URI(link));  } catch (  Throwable e) {    if (OS.os() == OS.OSX)     try {      Runtime.getRuntime().exec(new String[]{"/usr/bin/open",link});    } catch (    IOException ex) {      HMCLog.warn("Failed to open link: " + link,ex);    }    HMCLog.warn("Failed to open link: " + link,e);  }}  }
class C{  public boolean isMarkerChange(){  return fMarkerChange;}  }
class C{  public void hidePalette(){  if (palette == null) {    return;  }  if (Environment.getBoolean(Environment.UseInternalFrames)) {    try {      ((JInternalFrame)palette).setClosed(true);    } catch (    java.beans.PropertyVetoException evt) {      com.bbn.openmap.util.Assert.assertExp(false,"GLPoint.hidePalette(): internal error!");    }  } else {    palette.setVisible(false);  }}  }
class C{  public void ctcpCommand(String command){  bot.sendIRC().ctcpCommand(serverUser.getNick(),command);}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  public static final String readString(byte[] bytes,int offset,int length,String charset) throws IOException {  return readString(bytes,0,bytes.length,Charset.forName(charset));}  }
class C{  private int scale(SynthContext context,int size){  if (context == null || context.getComponent() == null) {    return size;  }  String scaleKey=(String)context.getComponent().getClientProperty("JComponent.sizeVariant");  if (scaleKey != null) {    if (NimbusStyle.LARGE_KEY.equals(scaleKey)) {      size*=NimbusStyle.LARGE_SCALE;    } else     if (NimbusStyle.SMALL_KEY.equals(scaleKey)) {      size*=NimbusStyle.SMALL_SCALE;    } else     if (NimbusStyle.MINI_KEY.equals(scaleKey)) {      size*=NimbusStyle.MINI_SCALE + 0.07;    }  }  return size;}  }
class C{  public AWS4SignerBase(URL endpointUrl,String httpMethod,String serviceName,String regionName){  this.endpointUrl=endpointUrl;  this.httpMethod=httpMethod;  this.serviceName=serviceName;  this.regionName=regionName;  dateTimeFormat=new SimpleDateFormat(ISO8601BasicFormat);  dateTimeFormat.setTimeZone(new SimpleTimeZone(0,"UTC"));  dateStampFormat=new SimpleDateFormat(DateStringFormat);  dateStampFormat.setTimeZone(new SimpleTimeZone(0,"UTC"));}  }
class C{  public static void forceCancelAll(){  ANRequestQueue.getInstance().cancelAll(true);}  }
class C{  public static void println(ErrorMessages message,int data){  if (Options.verbose) {    out.println(ErrorMessages.get(message,data));  }}  }
class C{  @Override protected void process(DistributionManager dm){switch (this.op) {case DRAIN_POOL:    Assert.assertTrue(this.id != null);  long endTime=System.currentTimeMillis() + 10000;ThreadPoolExecutor pool=(ThreadPoolExecutor)dm.getHighPriorityThreadPool();while (pool.getActiveCount() > 1 && System.currentTimeMillis() < endTime) {boolean interrupted=Thread.interrupted();try {  Thread.sleep(500);} catch (InterruptedException ie) {  interrupted=true;  dm.getCancelCriterion().checkCancelInProgress(ie);  return;} finally {  if (interrupted)   Thread.currentThread().interrupt();}}if (pool.getActiveCount() > 1) {logger.warn(LocalizedMessage.create(LocalizedStrings.HighPriorityAckedMessage_0_THERE_ARE_STILL_1_OTHER_THREADS_ACTIVE_IN_THE_HIGH_PRIORITY_THREAD_POOL,new Object[]{this,Integer.valueOf(pool.getActiveCount() - 1)}));}ReplyMessage.send(getSender(),processorId,null,dm);break;case DUMP_STACK:if (this.processorId > 0) {try {byte[] zippedStacks=OSProcess.zipStacks();ReplyMessage.send(getSender(),processorId,zippedStacks,dm);} catch (IOException e) {ReplyMessage.send(getSender(),processorId,new ReplyException(e),dm);}} else {OSProcess.printStacks(0,this.useNative);}}}  }
class C{  public void onHttpTransferPausedByUser(){}  }
class C{  public static void boot(){  if (VM.BuildForPower64ELF_ABI) {    for (int i=0; i < JNIFunctions.length(); i++) {      AddressArray triplet=linkageTriplets.get(i);      triplet.set(1,Magic.getTocPointer());      triplet.set(0,Magic.objectAsAddress(JNIFunctions.get(i)));    }  }}  }
class C{  public boolean isCurrent(String str){  if (pos + str.length() > text.length)   return false;  for (int i=str.length() - 1; i >= 0; i--) {    if (str.charAt(i) != lcText[pos + i])     return false;  }  return true;}  }
class C{  public void reconfig() throws LocalRepositoryException {  final String prefix="reconfig(): ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_RECONFIG};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public static double log(long x){  int tmp=floorLog(BigInteger.valueOf(x));  long tmp2=1 << tmp;  double rem=(double)x / (double)tmp2;  rem=logBKM(rem);  return tmp + rem;}  }
class C{  public String catalog(){  return catalogName;}  }
class C{  @Override protected void onProgressUpdate(String... progress){  progressBar.setProgress(Integer.parseInt(progress[0]));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.113 -0500",hash_original_method="67196F5597F9CC48251D355499CA1423",hash_generated_method="03B1D8FA42088D9DFFDBC0D65350C21D") public long freeMemory(){  return getTaintLong();}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  @Override public String toString(){  return toDenseString(NumericalAttribute.UNLIMITED_NUMBER_OF_DIGITS,true);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static long reverseBits(final byte value,final JBBPBitNumber bits){  return JBBPUtils.reverseBitsInByte(value) >>> (8 - bits.getBitNumber()) & bits.getMask();}  }
class C{  public XML deleteGlobal(Class<?> aClass){  checksGlobalExistence(aClass);  XmlClass xmlClass=findXmlClass(aClass);  if (isEmpty(xmlClass.attributes))   deleteClass(aClass); else   xmlClass.global=null;  return this;}  }
class C{  public boolean visit(StringLiteral node){  return true;}  }
class C{  public int index(){  return indexInContent;}  }
class C{  public String constantName(){  return constantName;}  }
class C{  private void printMemory(Class<? extends Test> testClass){  Runtime runtime=Runtime.getRuntime();  long total=runtime.totalMemory();  long free=runtime.freeMemory();  long used=total - free;  Log.d(TAG,"Total memory  : " + total);  Log.d(TAG,"Used memory   : " + used);  Log.d(TAG,"Free memory   : " + free);  Log.d(TAG,"Now executing : " + testClass.getName());}  }
class C{  public WeightedRandomSampler(){  this(1,null);}  }
class C{  public void logWarning(String message){  LogUtils.log(log,IStatus.WARNING,IStatus.OK,message,null);}  }
class C{  public boolean match(CRL crl){  if (!(crl instanceof X509CRL)) {    return false;  }  X509CRL crlist=(X509CRL)crl;  if ((issuerNames != null) && !(issuerNames.contains(crlist.getIssuerX500Principal().getName(X500Principal.CANONICAL)))) {    return false;  }  if ((minCRL != null) || (maxCRL != null)) {    try {      byte[] bytes=crlist.getExtensionValue("2.5.29.20");      bytes=(byte[])ASN1OctetString.getInstance().decode(bytes);      BigInteger crlNumber=new BigInteger((byte[])ASN1Integer.getInstance().decode(bytes));      if ((minCRL != null) && (crlNumber.compareTo(minCRL) < 0)) {        return false;      }      if ((maxCRL != null) && (crlNumber.compareTo(maxCRL) > 0)) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (dateAndTime != -1) {    Date thisUp=crlist.getThisUpdate();    Date nextUp=crlist.getNextUpdate();    if ((thisUp == null) || (nextUp == null)) {      return false;    }    if ((dateAndTime < thisUp.getTime()) || (dateAndTime > nextUp.getTime())) {      return false;    }  }  return true;}  }
class C{  public void mouseExited(MouseEvent e){  mouseSupport.fireMapMouseExited(e);  if (e.getSource() instanceof MapBean) {    rPoint2=null;  }}  }
class C{  public void update(){  if (addNoise) {    returnVector=SimbrainMath.getNoisyVector(stimulusVector,noiseLevel);  } else {    returnVector=stimulusVector;  }}  }
class C{  @Override public Message deserialize(ByteBuffer in) throws ProtocolException, IOException {  seekPastMagicBytes(in);  BitcoinPacketHeader header=new BitcoinPacketHeader(in);  return deserializePayload(header,in);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String outputFileName;  boolean flag;  int row, col;  double xCoord, yCoord;  int progress;  int i;  double value, z, zN;  double contourInterval;  double baseContour;  double zConvFactor=1.0;  int FID=0;  double topNeighbour, leftNeighbour;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] elevClassData=new double[4];  long numPoints;  double contourValue=0;  boolean val1, val2;  boolean[] edges=new boolean[4];  boolean[] untraversed=new boolean[4];  int[] visitedData=new int[4];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  outputFileName=args[1];  contourInterval=Double.parseDouble(args[2]);  if (contourInterval <= 0) {    showFeedback("The contour interval must be greater than zero.");    return;  }  baseContour=Double.parseDouble(args[3]);  zConvFactor=Double.parseDouble(args[4]);  if ((demHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double east=DEM.getEast() - gridResX / 2.0;    double west=DEM.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=DEM.getNorth() - gridResY / 2.0;    double south=DEM.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=demHeader.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("ELEV");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    for (row=0; row < rows; row++) {      col=0;      z=DEM.getValue(row,col);      if (z != noData) {        z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;        zN=DEM.getValue(row - 1,col);        topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;        if (topNeighbour != z && zN != noData) {          contourValue=Math.max(z,topNeighbour);          currentHalfRow=row - 0.5;          currentHalfCol=-0.5;          traceDirection=-1;          numPoints=0;          FID++;          PointsList points=new PointsList();          flag=true;          do {            rowVals[0]=(int)Math.floor(currentHalfRow);            rowVals[1]=(int)Math.ceil(currentHalfRow);            colVals[0]=(int)Math.floor(currentHalfCol);            colVals[1]=(int)Math.ceil(currentHalfCol);            if (DEM.getValue(rowVals[0],colVals[0]) != noData) {              elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[0]=noData;            }            if (DEM.getValue(rowVals[0],colVals[1]) != noData) {              elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[1]=noData;            }            if (DEM.getValue(rowVals[1],colVals[0]) != noData) {              elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[2]=noData;            }            if (DEM.getValue(rowVals[1],colVals[1]) != noData) {              elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[3]=noData;            }            edges=new boolean[4];            if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {              edges[0]=true;            }            if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {              edges[1]=true;            }            if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {              edges[2]=true;            }            if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {              edges[3]=true;            }            visitedData=new int[4];            visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);            visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);            visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);            visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);            untraversed=new boolean[4];            if (visitedData[1] == 0 && visitedData[3] == 0) {              untraversed[0]=true;            } else {              val1=BitOps.checkBit(visitedData[1],2);              val2=BitOps.checkBit(visitedData[3],0);              untraversed[0]=!(val1 | val2);            }            if (visitedData[2] == 0 && visitedData[3] == 0) {              untraversed[1]=true;            } else {              val1=BitOps.checkBit(visitedData[2],1);              val2=BitOps.checkBit(visitedData[3],3);              untraversed[1]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[2] == 0) {              untraversed[2]=true;            } else {              val1=BitOps.checkBit(visitedData[0],2);              val2=BitOps.checkBit(visitedData[2],0);              untraversed[2]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[1] == 0) {              untraversed[3]=true;            } else {              val1=BitOps.checkBit(visitedData[0],1);              val2=BitOps.checkBit(visitedData[1],3);              untraversed[3]=!(val1 | val2);            }            previousTraceDirection=traceDirection;            if (edges[0] && untraversed[0]) {              traceDirection=0;            } else             if (edges[1] && untraversed[1]) {              traceDirection=1;            } else             if (edges[2] && untraversed[2]) {              traceDirection=2;            } else             if (edges[3] && untraversed[3]) {              traceDirection=3;            } else {              traceDirection=-1;              flag=false;            }            if (previousTraceDirection != traceDirection) {              xCoord=west + (currentHalfCol / cols) * EWRange;              yCoord=north - (currentHalfRow / rows) * NSRange;              points.addPoint(xCoord,yCoord);            }switch (traceDirection) {case 0:              currentHalfCol+=1.0;            temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));          temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));        break;case 1:      currentHalfRow+=1.0;    temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));  temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 5:",progress);}for (col=0; col < cols; col++) {row=0;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=-0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 2 of 5:",progress);}for (row=0; row < rows; row++) {col=cols - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (topNeighbour != z && zN != noData) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col + 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 3 of 5:",progress);}for (col=0; col < cols; col++) {row=rows - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=row + 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 4 of 5:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;value=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((value * zConvFactor) - baseContour) / contourInterval) * contourInterval;if ((topNeighbour != z && zN != noData) || (leftNeighbour != z && value != noData)) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 5 of 5:",progress);}DEM.close();temp1.close();output.write();writer.write();returnData(outputFileName);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.vcv_img_play) {    if (isPlaying()) {      pause();    } else {      start();    }  } else {    setFullscreen(!isFullscreen());  }}  }
class C{  public static void removeLeafNode(Node node){  if (!node.hasChildNodes())   node.getParentNode().removeChild(node);}  }
class C{  @Override public int hashCode(){  final char buf[]=buffer;  int hash=0;  for (int i=size - 1; i >= 0; i--) {    hash=31 * hash + buf[i];  }  return hash;}  }
class C{  public ForeignKey findForeignKey(ForeignKey key){  for (int idx=0; idx < getForeignKeyCount(); idx++) {    ForeignKey fk=getForeignKey(idx);    if (fk.equals(key)) {      return fk;    }  }  return null;}  }
class C{  public void resetData(){  for (int i=0; i < data.length; i++)   data[i]=defaultValue;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_OPTIONS___TRACE_OPTION_1:    getTraceOption_1().clear();  getTraceOption_1().addAll((Collection<? extends TraceOption_>)newValue);return;case UmplePackage.TRACE_OPTIONS___ANONYMOUS_TRACE_OPTIONS_11:getAnonymous_traceOptions_1_1().clear();getAnonymous_traceOptions_1_1().addAll((Collection<? extends Anonymous_traceOptions_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Lock(){  mutex=new SpinLock();  entering=new ThreadQueue();  waiting=new ThreadQueue();}  }
class C{  public static void savePhotoToSDCard(Bitmap photoBitmap,String path,String photoName){  if (checkSDCardAvailable()) {    File dir=new File(path);    if (!dir.exists()) {      dir.mkdirs();    }    File photoFile=new File(path,photoName + ".png");    FileOutputStream fileOutputStream=null;    try {      fileOutputStream=new FileOutputStream(photoFile);      if (photoBitmap != null) {        if (photoBitmap.compress(Bitmap.CompressFormat.PNG,100,fileOutputStream)) {          fileOutputStream.flush();        }      }    } catch (    FileNotFoundException e) {      photoFile.delete();      e.printStackTrace();    }catch (    IOException e) {      photoFile.delete();      e.printStackTrace();    } finally {      try {        fileOutputStream.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public int binOfElement(float element){  int index=java.util.Arrays.binarySearch(binBoundaries,element);  if (index >= 0) {    if (index == binBoundaries.length - 1)     index--;  } else {    index-=-1;    if (index == 0 || index == binBoundaries.length) {      throw new IllegalArgumentException("Element=" + element + " not contained in any bin.");    }    index--;  }  return index;}  }
class C{  protected IMiniTable cmd_searchTo(IMiniTable xMatchedTable,IMiniTable xMatchedToTable,String displayString,int matchToType,boolean sameBPartner,boolean sameProduct,boolean sameQty,boolean matched){  int row=xMatchedTable.getSelectedRow();  log.config("Row=" + row);  int display=MATCH_INVOICE;  if (displayString.equals(m_matchOptions[MATCH_SHIPMENT]))   display=MATCH_SHIPMENT; else   if (displayString.equals(m_matchOptions[MATCH_ORDER]))   display=MATCH_ORDER;  tableInit(display,matchToType,matched);  KeyNamePair BPartner=(KeyNamePair)xMatchedTable.getValueAt(row,I_BPartner);  KeyNamePair Product=(KeyNamePair)xMatchedTable.getValueAt(row,I_Product);  log.fine("BPartner=" + BPartner + " - Product="+ Product);  if (sameBPartner)   m_sql.append(" AND hdr.C_BPartner_ID=").append(BPartner.getKey());  if (sameProduct)   m_sql.append(" AND lin.M_Product_ID=").append(Product.getKey());  double docQty=((Double)xMatchedTable.getValueAt(row,I_QTY)).doubleValue();  if (sameQty)   m_sql.append(" AND ").append(m_qtyColumn).append("=").append(docQty);  tableLoad(xMatchedToTable);  return xMatchedToTable;}  }
class C{  public void add(Video video){  videoList.add(video);  notifyDataSetChanged();}  }
class C{  public PagedResultsControl(int pageSize,byte[] cookie,boolean criticality) throws IOException {  super(OID,criticality,null);  if (cookie == null) {    cookie=EMPTY_COOKIE;  }  value=setEncodedValue(pageSize,cookie);}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  public GF2Matrix extendLeftCompactForm(){  int newNumColumns=numColumns + numRows;  GF2Matrix result=new GF2Matrix(numRows,newNumColumns);  int ind=numRows - 1 + numColumns;  for (int i=numRows - 1; i >= 0; i--, ind--) {    System.arraycopy(matrix[i],0,result.matrix[i],0,length);    result.matrix[i][ind >> 5]|=1 << (ind & 0x1f);  }  return result;}  }
class C{  private long addDigest(long digest,Class<?> cl) throws Exception {  if (_cl == null)   return digest;  digest=addDigest(digest,cl.getName());  digest=addDigest(digest,cl.getModifiers());  Class<?> superClass=cl.getSuperclass();  if (superClass != null && superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.")) {    digest=addDigest(digest,superClass);  }  Class<?>[] interfaces=cl.getInterfaces();  Arrays.sort(interfaces,ClassComparator.CMP);  for (int i=0; i < interfaces.length; i++)   digest=addDigest(digest,interfaces[i].getName());  if (_checkFields) {    Field[] fields=cl.getDeclaredFields();    Arrays.sort(fields,FieldComparator.CMP);    for (int i=0; i < fields.length; i++) {      int modifiers=fields[i].getModifiers();      if (Modifier.isPrivate(modifiers) && !_checkPrivate)       continue;      if (Modifier.isProtected(modifiers) && !_checkProtected)       continue;      digest=addDigest(digest,fields[i].getName());      digest=addDigest(digest,fields[i].getModifiers());      digest=addDigest(digest,fields[i].getType().getName());      Annotation[] annotations=fields[i].getAnnotations();      for (      Annotation annotation : annotations) {        digest=addDigest(digest,annotation.annotationType().getName());      }    }  }  Method[] methods=cl.getDeclaredMethods();  Arrays.sort(methods,MethodComparator.CMP);  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    int modifiers=method.getModifiers();    if (Modifier.isPrivate(modifiers) && !_checkPrivate)     continue;    if (Modifier.isProtected(modifiers) && !_checkProtected)     continue;    if (Modifier.isStatic(modifiers) && !_checkStatic)     continue;    digest=addDigest(digest,method.getName());    digest=addDigest(digest,method.getModifiers());    digest=addDigest(digest,method.getName());    Class<?>[] param=method.getParameterTypes();    for (int j=0; j < param.length; j++)     digest=addDigest(digest,param[j].getName());    digest=addDigest(digest,method.getReturnType().getName());    Class<?>[] exn=method.getExceptionTypes();    Arrays.sort(exn,ClassComparator.CMP);    for (int j=0; j < exn.length; j++)     digest=addDigest(digest,exn[j].getName());  }  return digest;}  }
class C{  @After public void tearDown() throws Exception {  cache.close();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodeattributes.class,args);}  }
class C{  public final boolean cancel(final int id,final boolean mayInterrupt){  if (mUntaggedRequests.contains(id) || mTaggedRequests.containsValue(id)) {    return RunningOperationStorage.getInstance().cancel(id,mayInterrupt);  } else {    return false;  }}  }
class C{  public static int[] normalize(int[] a,int length){  if (a.length >= length) {    return a;  }  while (a.length < length) {    a=expand(a);  }  return a;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.574 -0500",hash_original_method="3B69F31C6833A6156BA93E6BE7789317",hash_generated_method="D190D5E44E8FFDDBB130D33475DEE964") private void requestInputMethod(Dialog dialog){  Window window=dialog.getWindow();  window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);}  }
class C{  public static FloatFunction createFloatFunction(String functionName){  if (functionName.equalsIgnoreCase(Sigmoid.class.getSimpleName())) {    return new Sigmoid();  } else   if (functionName.equalsIgnoreCase(Tanh.class.getSimpleName())) {    return new Tanh();  } else   if (functionName.equalsIgnoreCase(ReLU.class.getSimpleName())) {    return new ReLU();  } else   if (functionName.equalsIgnoreCase(SoftMax.class.getSimpleName())) {    return new SoftMax();  } else   if (functionName.equalsIgnoreCase(IdentityFunction.class.getSimpleName())) {    return new IdentityFunction();  }  throw new IllegalArgumentException(String.format("No double function with name '%s' exists.",functionName));}  }
class C{  @Override public boolean isAlternative(){  return false;}  }
class C{  @Override public int countInteriorNodes(){  int result=0;  for (  SuccessorEdges fanout : index.values()) {    if (fanout.hasSuccessors()) {      ++result;    }  }  return result;}  }
class C{  public boolean zoneExportAddVolumes(URI exportGroupURI,List<URI> exportMaskURIs,Collection<URI> volumeURIs,String token){  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);  _log.info(String.format("Entering zoneExportAddVolumes for ExportGroup: %s (%s) Volumes: %s",exportGroup.getLabel(),exportGroup.getId(),volumeURIs.toString()));  String addZoneWhileAddingVolume=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.ZONE_ADD_VOLUME,CustomConfigConstants.GLOBAL_KEY,null);  Boolean addZoneOnDeviceOperation=true;  _log.info("zoneExportAddVolumes checking for custom config value {} to skip zoning checks : (Default) : {}",addZoneWhileAddingVolume,addZoneOnDeviceOperation);  if (addZoneWhileAddingVolume != null) {    addZoneOnDeviceOperation=Boolean.valueOf(addZoneWhileAddingVolume);    _log.info("Boolean convereted of : {} : returned by Config handler as : {} ",addZoneWhileAddingVolume,addZoneOnDeviceOperation);  } else {    _log.info("Config handler returned null for value so going by default value {}",addZoneOnDeviceOperation);  }  _log.info("zoneExportAddVolumes checking for custom config value {} to skip zoning checks : (Custom Config) : {}",addZoneWhileAddingVolume,addZoneOnDeviceOperation);  return doZoneExportMasksCreate(exportGroup,exportMaskURIs,volumeURIs,token,addZoneOnDeviceOperation);}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  Throwable t) {    if (responseHandler != null)     responseHandler.sendFailureMessage(0,null,null,t); else     t.printStackTrace();  }  return entity;}  }
class C{  public static void saveMapping(BidiMap mapping,File outputFile) throws IOException {  ObjectOutputStream objectOutputStream=new ObjectOutputStream(new FileOutputStream(outputFile));  objectOutputStream.writeObject(mapping);  IOUtils.closeQuietly(objectOutputStream);}  }
class C{  protected Document createDefaultModel(){  return new PlainDocument();}  }
class C{  private void generateRandom(){  neighbors=new int[M][N][K + 1];  function=new double[M][N][1 << (K + 1)];  for (int i=0; i < M; i++) {    for (int j=0; j < N; j++) {      boolean[] generated=new boolean[N];      generated[j]=true;      for (int k=0; k < K; k++) {        int neighbor;        do {          neighbor=PRNG.nextInt(N);        } while (generated[neighbor]);        generated[neighbor]=true;        neighbors[i][j][k]=neighbor;      }      neighbors[i][j][K]=j;      Arrays.sort(neighbors[i][j]);      for (int k=0; k < (1 << (K + 1)); k++) {        function[i][j][k]=PRNG.nextDouble();      }    }  }}  }
class C{  public static <T>QueuedValues<T> fromQueue(Iterable<Iterable<T>> queuedValues){  return new QueuedValues<>(queuedValues);}  }
class C{  public Move interpretMove(IGameState gameState,int col,int row,Player player){  TicTacToeState state=(TicTacToeState)gameState;  NeighborState neighbor=(NeighborState)state.storedData();  TicTacToeBoard board=state.board();  if (!board.isClear(col,row)) {    return null;  }  if (availableNeighbor(board,neighbor.getLastMove(player))) {    return new NeighborPlaceMark(col,row,player);  }  if (neighbor.validNeighbor(board,player,col,row)) {    NeighborMove move=new NeighborMove(col,row,player);    if (move.isValid(board)) {      return move;    }  }  return null;}  }
class C{  private static void raiseOnFailure(boolean condition,String message){  if (!condition) {    throw new RuntimeAdminException(message);  }}  }
class C{  public int lastIndexOf(java.lang.CharSequence csq){  return lastIndexOf(csq,_count);}  }
class C{  public StoredItemStack addFromPlayerInventory(StoredItemStack stack,long extractSize,INetworkCache network,EntityPlayer player,ActionType type){  return null;}  }
class C{  protected int addHeaderToOutput(byte[] msg,AbstractMRMessage m){  return 0;}  }
class C{  @Override public void init(final IExtModManifestBean manifest,final IServices services,final IModEnv modEnv){  this.manifest=manifest;  this.services=services;  this.modEnv=modEnv;  logger=services.getLogger();  utils=services.getUtils();  guiUtils=services.getGuiUtils();  settingsUtils=services.getSettingsUtils();  settingsGui=services.getSettingsGui();  factory=services.getFactory();  guiFactory=services.getGuiFactory();  repParserEngine=services.getRepParserEngine();}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public static void sendPatch(StatefulService service,Object body){  Operation patch=Operation.createPatch(service.getUri()).setBody(body);  service.sendRequest(patch);}  }
class C{  protected void writeNetscapeExt() throws IOException {  out.write(0x21);  out.write(0xff);  out.write(11);  writeString("NETSCAPE" + "2.0");  out.write(3);  out.write(1);  writeShort(repeat);  out.write(0);}  }
class C{  public MappedElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public Builder withIndex(long index){  request.index=Assert.argNot(index,index < 0,"index must be positive");  return this;}  }
class C{  public static IntStream times(int number){  return IntStream.range(0,number);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(localTempPath.toFile());  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(testS3KeyPrefix);  s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);}  }
class C{  @SuppressWarnings("unchecked") private void downloadSelectedFiles(){  int totalCount=0;  ArrayList<FormDetails> filesToDownload=new ArrayList<FormDetails>();  SparseBooleanArray sba=getListView().getCheckedItemPositions();  for (int i=0; i < getListView().getCount(); i++) {    if (sba.get(i,false)) {      HashMap<String,String> item=(HashMap<String,String>)getListAdapter().getItem(i);      filesToDownload.add(mFormNamesAndURLs.get(item.get(FORMDETAIL_KEY)));    }  }  totalCount=filesToDownload.size();  Collect.getInstance().getActivityLogger().logAction(this,"downloadSelectedFiles",Integer.toString(totalCount));  if (totalCount > 0) {    showDialog(PROGRESS_DIALOG);    mDownloadFormsTask=new DownloadFormsTask();    mDownloadFormsTask.setDownloaderListener(this);    mDownloadFormsTask.execute(filesToDownload);  } else {    Toast.makeText(getApplicationContext(),R.string.noselect_error,Toast.LENGTH_SHORT).show();  }}  }
class C{  private void sendStageProgressPatch(TaskState state){  ServiceUtils.logInfo(this,"Sending self-patch to stage %s",state.stage,state.subStage);  TaskUtils.sendSelfPatch(this,buildPatch(state.stage,state.subStage,null));}  }
class C{  public void runTest() throws Throwable {  String publicId="STAFF";  String systemId="staff.xml";  String malformedName="prefix::local";  Document doc;  DOMImplementation domImpl;  DocumentType newType;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newType=domImpl.createDocumentType(malformedName,publicId,systemId);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testGetLong(){  byte[] bytes={32,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-128,-1,-1,-1,-1,-1,-1,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(-1,array.getLong());  assertEquals(0,array.getLong());  assertEquals(-0x8000000000000000L,array.getLong());  assertEquals(0x7FFFFFFFFFFFFFFFL,array.getLong());}  }
class C{  public OSTenant findOpenstackTenantInCoprhd(String tenantId){  List<URI> osTenantURI=_dbClient.queryByType(OSTenant.class,true);  Iterator<OSTenant> osTenantIter=_dbClient.queryIterativeObjects(OSTenant.class,osTenantURI);  while (osTenantIter.hasNext()) {    OSTenant osTenant=osTenantIter.next();    if (osTenant.getOsId().equals(tenantId)) {      return osTenant;    }  }  return null;}  }
class C{  protected void readNetscapeExt(){  do {    readBlock();    if (block[0] == 1) {      final int b1=(block[1]) & 0xff;      final int b2=(block[2]) & 0xff;      loopCount=(b2 << 8) | b1;    }  } while ((blockSize > 0) && !err());}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public boolean isInputShutdown(){  return shutIn;}  }
class C{  public String parameterToString(Object param){  if (param == null) {    return "";  } else   if (param instanceof Date) {    return formatDate((Date)param);  } else   if (param instanceof Collection) {    StringBuilder b=new StringBuilder();    for (    Object o : (Collection)param) {      if (b.length() > 0) {        b.append(",");      }      b.append(String.valueOf(o));    }    return b.toString();  } else {    return String.valueOf(param);  }}  }
class C{  private boolean cancelSubmission(String submissionID){  try {    stub.cancelSubmission(submissionID);  } catch (  Exception e) {    checkException(e);    return false;  }  return true;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:    getOwnedMembersRaw().clear();  getOwnedMembersRaw().addAll((Collection<? extends N4MemberDeclaration>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ActivityMonitorSample(){  initComponents();  ownerARadio.setActionCommand("A");  ownerBRadio.setActionCommand("B");  ownerCRadio.setActionCommand("C");  indicatorA.setActivityOwner("A");  indicatorB.setActivityOwner("B");  indicatorC.setActivityOwner("C");  JActivityWindow.getInstance();}  }
class C{  public boolean nullable_known(){  return _nullable_known;}  }
class C{  protected static void checkIndexColumnTypes(IndexColumn[] columns){  for (  IndexColumn c : columns) {    int type=c.column.getType();    if (type == Value.CLOB || type == Value.BLOB) {      throw DbException.getUnsupportedException("Index on BLOB or CLOB column: " + c.column.getCreateSQL());    }  }}  }
class C{  private void ensureMutableMessageList(){  if (!isMessagesListMutable) {    messages=new ArrayList<MType>(messages);    isMessagesListMutable=true;  }}  }
class C{  @Around("serviceMethods()") public Object publishJmsMessages(ProceedingJoinPoint joinPoint) throws Throwable {  MethodSignature methodSignature=(MethodSignature)joinPoint.getSignature();  Method method=methodSignature.getMethod();  boolean publishJmsMessages=method.isAnnotationPresent(PublishJmsMessages.class);  try {    Object returnValue=joinPoint.proceed();    if (publishJmsMessages) {      if (LOGGER.isDebugEnabled()) {        Class<?> targetClass=joinPoint.getTarget().getClass();        LOGGER.debug("Method is initiating JMS message publishing. javaMethod=\"{}.{}\" jmsMessageInMemoryQueueSize={}",targetClass.getName(),methodSignature.getName(),jmsMessageInMemoryQueue.size());      }      while (!jmsMessageInMemoryQueue.isEmpty()) {        JmsMessage jmsMessage=jmsMessageInMemoryQueue.remove();        try {          sqsDao.sendSqsTextMessage(awsHelper.getAwsParamsDto(),jmsMessage.getJmsQueueName(),jmsMessage.getMessageText());          LOGGER.info("Published JMS message. jmsQueueName=\"{}\" jmsMessagePayload={}",jmsMessage.getJmsQueueName(),jmsMessage.getMessageText());        } catch (        Exception sqsException) {          LOGGER.warn("Failed to publish message to the JMS queue. jmsQueueName=\"{}\" jmsMessagePayload={}",jmsMessage.getJmsQueueName(),jmsMessage.getMessageText(),sqsException);          try {            jmsPublishingService.addJmsMessageToDatabaseQueue(jmsMessage.getJmsQueueName(),jmsMessage.getMessageText());          } catch (          Exception dbException) {            LOGGER.error("Failed to add JMS message to the database queue. jmsQueueName=\"{}\" jmsMessagePayload={}",jmsMessage.getJmsQueueName(),jmsMessage.getMessageText(),dbException);          }        }      }    }    return returnValue;  }  finally {    if (publishJmsMessages) {      jmsMessageInMemoryQueue.clear();    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public static boolean operate(PageContext pc,double scope,Collection.Key[] varNames){  return _operate(pc,scope,varNames,0);}  }
class C{  public WhoamiResponse whoami(){  String username=SecurityContextHolder.getContext().getAuthentication().getName();  return new WhoamiResponse(username);}  }
class C{  public boolean intersect(RectF r){  return intersect(r.left,r.top,r.right,r.bottom);}  }
class C{  private void createDiskResources(ResourceAllocationTaskState currentState,String parentLink,String computeResourceId,String name,List<String> networkLinks){  List<String> diskLinks=new ArrayList<>();  CompletionHandler diskCreateCompletion=null;  for (  String diskLink : currentState.diskDescriptionLinks) {    sendRequest(Operation.createGet(this,diskLink).setCompletion(null));  }}  }
class C{  @Override public void emitErrorMessage(String pMessage){  if (mMessageCollectionEnabled) {    mMessages.add(pMessage);  } else {    super.emitErrorMessage(pMessage);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ASSOCIATION___ASSOCIATION_END_1:    return ((InternalEList<?>)getAssociationEnd_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION___ASSOCIATION_END_2:  return ((InternalEList<?>)getAssociationEnd_2()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final String pop(){  if (m_firstFree <= 0)   return null;  m_firstFree--;  String s=m_map[m_firstFree];  m_map[m_firstFree]=null;  return s;}  }
class C{  public ElementType pop(){  return isEmpty() ? null : stack.remove(stack.size() - 1);}  }
class C{  private ArrayList<Coords> allBoardHexes(){  IBoard board=game.getBoard();  if (board == null)   return null;  ArrayList<Coords> CoordList=new ArrayList<Coords>();  for (int i=0; i < board.getWidth(); i++) {    for (int j=0; j < board.getHeight(); j++) {      IHex hex=board.getHex(i,j);      if (hex != null) {        CoordList.add(new Coords(i,j));      }    }  }  return CoordList;}  }
class C{  private static boolean isInteger(String val){  for (int i=0; i < val.length(); i++) {    if (!Character.isDigit(val.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public boolean isCacheValid(int row){  return m_valid.get(row);}  }
class C{  public void clearAccessibleSelection(){  int childCount=getAccessibleChildrenCount();  for (int i=0; i < childCount; i++) {    removeAccessibleSelection(i);  }}  }
class C{  public Anniversary(String text){  super(text);}  }
class C{  protected void loadCache(ResultProducer rp,Object[] key) throws Exception {  System.err.print(" (updating cache)");  System.err.flush();  m_Cache.clear();  m_CacheKey=null;  String query="SELECT Key_" + m_CacheKeyName + " FROM "+ m_ResultsTableName;  String[] keyNames=rp.getKeyNames();  if (keyNames.length != key.length) {    throw new Exception("Key names and key values of different lengths");  }  m_CacheKeyIndex=-1;  for (int i=0; i < keyNames.length; i++) {    if (keyNames[i].equalsIgnoreCase(m_CacheKeyName)) {      m_CacheKeyIndex=i;      break;    }  }  if (m_CacheKeyIndex == -1) {    throw new Exception("No key field named " + m_CacheKeyName + " (as specified for caching)");  }  boolean first=true;  for (int i=0; i < key.length; i++) {    if ((key[i] != null) && (i != m_CacheKeyIndex)) {      if (first) {        query+=" WHERE ";        first=false;      } else {        query+=" AND ";      }      query+="Key_" + keyNames[i] + '=';      if (key[i] instanceof String) {        query+="'" + DatabaseUtils.processKeyString(key[i].toString()) + "'";      } else {        query+=key[i].toString();      }    }  }  ResultSet rs=select(query);  while (rs.next()) {    String keyVal=rs.getString(1);    if (!rs.wasNull()) {      m_Cache.add(keyVal);    }  }  close(rs);  m_CacheKey=key.clone();}  }
class C{  public void clearAllCategories(){  this.activeBugCategorySet.addAll(hiddenBugCategorySet);  this.hiddenBugCategorySet.clear();}  }
class C{  public void addCondition(FallbackCondition condition){  this.fallbackConditions.add(condition);  Collections.sort(this.fallbackConditions);}  }
class C{  public final void clearModified(){  if (_lifecycle.isDestroyed())   return;  DependencyContainer dependencies=_dependencies;  if (dependencies == null)   return;  dependencies.clearModified();}  }
class C{  public ReplicationRequest(ActionRequest request){  super(request);}  }
class C{  public AnimationException(TimedElement e,String code,Object[] params){  this.e=e;  this.code=code;  this.params=params;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  addToBuffer(result,true,false,null);  return result.toString();}  }
class C{  public void addDescriptor(final SetupDescriptor desc){  descriptors.add(desc);}  }
class C{  public static ByteArrayInputStream bitmapToPngInputStream(final Bitmap image){  return new ByteArrayInputStream(bitmapToPng(image));}  }
class C{  public final CC shrinkPrioX(int p){  hor.setShrinkPriority(p);  return this;}  }
class C{  public OutlierResult run(Relation<V> relation){  ArrayDBIDs objids=DBIDUtil.ensureArray(relation.getDBIDs());  long[] bits=BitsUtil.zero(objids.size());  DBIDs normalObjs=new MaskedDBIDs(objids,bits,true);  DBIDs anomalousObjs=new MaskedDBIDs(objids,bits,false);  WritableDoubleDataStore oscores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT);  double logLike=relation.size() * logml + loglikelihoodNormal(normalObjs,relation);  DoubleMinMax minmax=new DoubleMinMax();  DBIDIter iter=objids.iter();  for (int i=0; i < objids.size(); i++, iter.advance()) {    BitsUtil.setI(bits,i);    double currentLogLike=normalObjs.size() * logml + loglikelihoodNormal(normalObjs,relation) + anomalousObjs.size() * logl + loglikelihoodAnomalous(anomalousObjs);    final double loglikeGain=currentLogLike - logLike;    oscores.putDouble(iter,loglikeGain);    minmax.put(loglikeGain);    if (loglikeGain > c) {      logLike=currentLogLike;    } else {      BitsUtil.clearI(bits,i);    }  }  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,0.0);  DoubleRelation res=new MaterializedDoubleRelation("Gaussian Mixture Outlier Score","gaussian-mixture-outlier",oscores,relation.getDBIDs());  return new OutlierResult(meta,res);}  }
class C{  private static double round2(double val){  return Math.floor(100 * val + 0.5) / 100;}  }
class C{  public boolean initialImagePut(Object key,long lastModified,Object newValue,boolean wasRecovered,boolean deferLRUCallback,VersionTag version,InternalDistributedMember sender,boolean forceValue){  throw new UnsupportedOperationException();}  }
class C{  public void testSupportConfigHandlerRethrow(){  Configuration config=SupportConfigFactory.getConfiguration();  config.addEventType("SupportBean",SupportBean.class);  config.addPlugInAggregationFunctionFactory("myinvalidagg",InvalidAggTestFactory.class.getName());  epService=EPServiceProviderManager.getDefaultProvider(config);  epService.initialize();  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  String epl="@Name('ABCName') select myinvalidagg() from SupportBean";  epService.getEPAdministrator().createEPL(epl);  try {    epService.getEPRuntime().sendEvent(new SupportBean());    fail();  } catch (  EPException ex) {  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  void evaluate(){  double T1r, T1i, T3r, T3i;  double Rr, Ri, Sr, Si;  double Wr, Wi;  dft1.evaluate();  dft2.evaluate();  dft3.evaluate();  int kp=Xoffset;  int kpN4=kp + N4;  int kpN2=kpN4 + N4;  int kp3N4=kpN2 + N4;  Rr=Xr[kpN2] + Xr[kp3N4];  Ri=Xi[kpN2] + Xi[kp3N4];  Sr=Xi[kp3N4] - Xi[kpN2];  Si=Xr[kpN2] - Xr[kp3N4];  Xr[kpN2]=Xr[kp] - Rr;  Xi[kpN2]=Xi[kp] - Ri;  Xr[kp3N4]=Xr[kpN4] + Sr;  Xi[kp3N4]=Xi[kpN4] + Si;  Xr[kp]+=Rr;  Xi[kp]+=Ri;  Xr[kpN4]-=Sr;  Xi[kpN4]-=Si;  int fk;  for (int k=1; k < N8; k++) {    fk=f * k;    kp=k + Xoffset;    kpN4=kp + N4;    kpN2=kpN4 + N4;    kp3N4=kpN2 + N4;    Wr=c[fk];    Wi=s[fk];    T1r=Wr * Xr[kpN2] - Wi * Xi[kpN2];    T1i=Wr * Xi[kpN2] + Wi * Xr[kpN2];    Wr=c3[fk];    Wi=s3[fk];    T3r=Wr * Xr[kp3N4] - Wi * Xi[kp3N4];    T3i=Wr * Xi[kp3N4] + Wi * Xr[kp3N4];    Rr=T1r + T3r;    Ri=T1i + T3i;    Sr=T3i - T1i;    Si=T1r - T3r;    Xr[kpN2]=Xr[kp] - Rr;    Xi[kpN2]=Xi[kp] - Ri;    Xr[kp3N4]=Xr[kpN4] + Sr;    Xi[kp3N4]=Xi[kpN4] + Si;    Xr[kp]+=Rr;    Xi[kp]+=Ri;    Xr[kpN4]-=Sr;    Xi[kpN4]-=Si;  }  kp=N8 + Xoffset;  kpN4=kp + N4;  kpN2=kpN4 + N4;  kp3N4=kpN2 + N4;  T1r=SQRT2BY2 * (Xr[kpN2] + Xi[kpN2]);  T1i=SQRT2BY2 * (Xi[kpN2] - Xr[kpN2]);  T3r=SQRT2BY2 * (Xi[kp3N4] - Xr[kp3N4]);  T3i=-SQRT2BY2 * (Xi[kp3N4] + Xr[kp3N4]);  Rr=T1r + T3r;  Ri=T1i + T3i;  Sr=T3i - T1i;  Si=T1r - T3r;  Xr[kpN2]=Xr[kp] - Rr;  Xi[kpN2]=Xi[kp] - Ri;  Xr[kp3N4]=Xr[kpN4] + Sr;  Xi[kp3N4]=Xi[kpN4] + Si;  Xr[kp]+=Rr;  Xi[kp]+=Ri;  Xr[kpN4]-=Sr;  Xi[kpN4]-=Si;  for (int k=N8 + 1; k < N4; k++) {    fk=reflect - f * k;    kp=k + Xoffset;    kpN4=kp + N4;    kpN2=kpN4 + N4;    kp3N4=kpN2 + N4;    Wr=-s[fk];    Wi=-c[fk];    T1r=Wr * Xr[kpN2] - Wi * Xi[kpN2];    T1i=Wr * Xi[kpN2] + Wi * Xr[kpN2];    Wr=s3[fk];    Wi=c3[fk];    T3r=Wr * Xr[kp3N4] - Wi * Xi[kp3N4];    T3i=Wr * Xi[kp3N4] + Wi * Xr[kp3N4];    Rr=T1r + T3r;    Ri=T1i + T3i;    Sr=T3i - T1i;    Si=T1r - T3r;    Xr[kpN2]=Xr[kp] - Rr;    Xi[kpN2]=Xi[kp] - Ri;    Xr[kp3N4]=Xr[kpN4] + Sr;    Xi[kp3N4]=Xi[kpN4] + Si;    Xr[kp]+=Rr;    Xi[kp]+=Ri;    Xr[kpN4]-=Sr;    Xi[kpN4]-=Si;  }}  }
class C{  @LargeTest public void testEffectKenBurn() throws Exception {  testEffectKenBurn(INPUT_FILE_PATH + "IMG_640x480.jpg","mediaImageItem1");  testEffectKenBurn(INPUT_FILE_PATH + "IMG_640x480.png","mediaImageItem2");}  }
class C{  private boolean addWorker(Runnable firstTask,boolean core){  retry:   for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;    for (; ; ) {      int wc=workerCountOf(c);      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;      if (compareAndIncrementWorkerCount(c))       break retry;      c=ctl.get();      if (runStateOf(c) != rs)       continue retry;    }  }  boolean workerStarted=false;  boolean workerAdded=false;  Worker w=null;  try {    w=new Worker(firstTask);    final Thread t=w.thread;    if (t != null) {      final ReentrantLock mainLock=this.mainLock;      mainLock.lock();      try {        int rs=runStateOf(ctl.get());        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {          if (t.isAlive())           throw new IllegalThreadStateException();          workers.add(w);          int s=workers.size();          if (s > largestPoolSize)           largestPoolSize=s;          workerAdded=true;        }      }  finally {        mainLock.unlock();      }      if (workerAdded) {        t.start();        workerStarted=true;      }    }  }  finally {    if (!workerStarted)     addWorkerFailed(w);  }  return workerStarted;}  }
class C{  protected void genSes(HttpSession genSes){  this.genSes=genSes;}  }
class C{  public static void main(String[] argv){  runClassifier(new IterativeClassifierOptimizer(),argv);}  }
class C{  public static int indexOf(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    if (array[i].equals(value)) {      return i;    }  }  return -1;}  }
class C{  public JsonArray add(JsonValue value){  if (value == null) {    throw new NullPointerException("value is null");  }  values.add(value);  return this;}  }
class C{  private ClientTestRestServer runServer(int idx,boolean failOnConnect) throws IgniteCheckedException {  ClientTestRestServer srv=new ClientTestRestServer(ClientTestRestServer.FIRST_SERVER_PORT + idx,failOnConnect,log());  srv.start();  srvs[idx]=srv;  return srv;}  }
class C{  public static long dateValueFromDate(long ms){  Calendar cal=CACHED_CALENDAR.get();  cal.clear();  cal.setTimeInMillis(ms);  return dateValueFromCalendar(cal);}  }
class C{  private Widget createDelimiter(){  FlowPanel delimiter=new FlowPanel();  delimiter.setStyleName(toolbarResources.toolbar().toolbarDelimiter());  return delimiter;}  }
class C{  public boolean isInstantiableBean(String className) throws JSONException {  JSONObject classDesc=describeClass(className);  if (classDesc.has("typeArgs")) {    return false;  }  JSONArray classProps=classDesc.optJSONArray("properties");  if (classProps == null || classProps.length() == 0) {    return false;  }  for (int p=0; p < classProps.length(); p++) {    JSONObject propDesc=classProps.getJSONObject(p);    if (propDesc.optBoolean("canGet",false)) {      return true;    }  }  return false;}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  int[] parents=new int[z.size()];  for (int j=0; j < parents.length; j++) {    parents[j]=covMatrix.getVariables().indexOf(z.get(j));  }  int i=covMatrix.getVariables().indexOf(x);  double variance=covMatrix.getValue(i,i);  if (parents.length > 0) {    TetradMatrix Czz=covMatrix.getSelection(parents,parents);    TetradMatrix inverse;    try {      inverse=Czz.inverse();    } catch (    Exception e) {      return true;    }    TetradVector Cyz=covMatrix.getSelection(parents,new int[]{i}).getColumn(0);    TetradVector b=inverse.times(Cyz);    variance-=Cyz.dotProduct(b);  }  return variance < 1e-20;}  }
class C{  public void closeTag(){  String tag=openTags.pop();  indent.setLength(indent.length() - INDENT_STR.length());  writer.println(indent + "</" + tag+ ">");}  }
class C{  public boolean isAttribute(){  return attribute;}  }
class C{  public void testOverwite() throws Exception {  File configHome=new File(configuration.getHome());  assertTrue("Could not find a proper configuration home.",configHome.exists() && configHome.isDirectory());  File existingFile=createFile(configHome,"existingfile","helloworld");  assertEquals("helloworld",readFile(existingFile));  String fileName="simpleCopyWithOverwrite";  String fileContents="goodbye";  File file1=createFile(configFileDirectory,fileName,fileContents);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(file1));  configFile.setToFile("existingfile");  configFile.setOverwrite("true");  testCopy(configFile,"existingfile","goodbye");  assertEquals("goodbye",readFile(existingFile));}  }
class C{  public static CacheSpan createCacheEntry(File file){  Matcher matcher=cacheFilePattern.matcher(file.getName());  if (!matcher.matches()) {    return null;  }  return CacheSpan.createCacheEntry(matcher.group(1),Long.parseLong(matcher.group(2)),Long.parseLong(matcher.group(3)),file);}  }
class C{  @SideEffectFree public void fine(@Nullable String msg){  throw new RuntimeException();}  }
class C{  public MinimumBoundingCircle(Geometry geom){  this.input=geom;}  }
class C{  public static <T extends SabresObject>void fetchAllIfNeeded(List<T> objects) throws SabresException {  final Sabres sabres=Sabres.self();  sabres.open();  try {    for (    T o : objects) {      if (!o.isDataAvailable()) {        o.fetch(sabres);      }    }  }  finally {    sabres.close();  }}  }
class C{  public AppSettings(Context context){  this(context,DEFAULT_SETTINGS_FILENAME);}  }
class C{  public static boolean isWindows2008(){  return win2008;}  }
class C{  public boolean isCaretEncodingEnabled(){  return writer.isCaretEncodingEnabled();}  }
class C{  private static File uploadFile(boolean useDirectUpload) throws IOException {  File fileMetadata=new File();  fileMetadata.setTitle(UPLOAD_FILE.getName());  FileContent mediaContent=new FileContent("image/jpeg",UPLOAD_FILE);  Drive.Files.Insert insert=drive.files().insert(fileMetadata,mediaContent);  MediaHttpUploader uploader=insert.getMediaHttpUploader();  uploader.setDirectUploadEnabled(useDirectUpload);  uploader.setProgressListener(new FileUploadProgressListener());  return insert.execute();}  }
class C{  @Override public boolean nullsAreSortedHigh(){  debugCodeCall("nullsAreSortedHigh");  return SysProperties.SORT_NULLS_HIGH;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == ALLOW_CAMERA_PERMISSION && grantResults.length > 0) {    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      takePicture();    } else {      permissionNotEnabled();    }  } else {    permissionNotEnabled();  }}  }
class C{  protected void disposeCache(Iterator<BindingSet> iter){}  }
class C{  protected View onCreateDialogView(){  if (mDialogLayoutResId == 0) {    return null;  }  LayoutInflater inflater=LayoutInflater.from(mBuilder.getContext());  return inflater.inflate(mDialogLayoutResId,null);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public ResAllocsBuilder withCores(double cores){  this.cores=cores;  return this;}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  public FunctionSource functionSource(int i){  return functionSources[i];}  }
class C{  public static SnmpOid toOid(long[] index,int start) throws SnmpStatusException {  if (start + 4 <= index.length) {    try {      return new SnmpOid(index[start],index[start + 1],index[start + 2],index[start + 3]);    } catch (    IllegalArgumentException e) {      throw new SnmpStatusException(SnmpStatusException.noSuchName);    }  } else {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  @Nullable private Column postProcessColumn(int columnX,int columnZ,Column column,Requirement req){  if (column != null) {    id2ChunkMap.put(ChunkPos.asLong(columnX,columnZ),column);    column.setLastSaveTime(this.worldServer.getTotalWorldTime());    column.onChunkLoad();    return column;  } else   if (req == Requirement.LOAD) {    return null;  }  column=new Column(this,worldServer,columnX,columnZ);  cubeGen.generateColumn(column);  id2ChunkMap.put(ChunkPos.asLong(columnX,columnZ),column);  column.setLastSaveTime(this.worldServer.getTotalWorldTime());  column.onChunkLoad();  return column;}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  public LIR(AbstractControlFlowGraph<?> cfg,AbstractBlockBase<?>[] linearScanOrder,AbstractBlockBase<?>[] codeEmittingOrder){  this.cfg=cfg;  this.codeEmittingOrder=codeEmittingOrder;  this.linearScanOrder=linearScanOrder;  this.lirInstructions=new BlockMap<>(cfg);}  }
class C{  @Override public void onGetUserIdResponse(final GetUserIdResponse getUserIdResponse){  Log.v(TAG,"onGetUserIdResponse recieved: Response -" + getUserIdResponse);  Log.v(TAG,"RequestId:" + getUserIdResponse.getRequestId());  Log.v(TAG,"IdRequestStatus:" + getUserIdResponse.getUserIdRequestStatus());  new GetUserIdAsyncTask().execute(getUserIdResponse);}  }
class C{  private static void SetShortField(JNIEnvironment env,int objJREF,int fieldID,short value){  if (traceJNI)   VM.sysWrite("JNI called: SetShortField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setShortValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static TextEdit reformat(int kind,String source,IRegion[] regions,int indentationLevel,String lineSeparator,Map<String,String> options){  return ToolFactory.createCodeFormatter(options,ToolFactory.M_FORMAT_EXISTING).format(kind,source,regions,indentationLevel,lineSeparator);}  }
class C{  public MediaVideoItem createMediaItem(VideoEditor videoEditor,String MediaId,String filename,int renderingMode){  MediaVideoItem mvi=null;  try {    mvi=new MediaVideoItem(videoEditor,MediaId,filename,renderingMode);    assertNotNull("Can not create an object of MediaVideoItem",mvi);  } catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("Can not create an object of Media Video Item with file name = " + filename + " Issue = "+ e.toString());  }catch (  IOException e) {    assertTrue("Can not create an object of Media Video Item with file name = " + filename + " Issue = "+ e.toString(),false);  }  return mvi;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.427 -0500",hash_original_method="25276A1ACE97D138BB17C9052B223D37",hash_generated_method="4E4B67595C9AA38B501A2B2B2088EE51") private boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  public static String toString(Collection<?> collection,String separator){  boolean first=true;  StringBuilder b=new StringBuilder();  for (  Object o : collection) {    if (first) {      first=false;    } else {      b.append(separator);    }    b.append(o);  }  return b.toString();}  }
class C{  public boolean isTrusted(){  return trusted;}  }
class C{  static final LinkedVertexHull mergePointSegment(LinkedVertexHull left,LinkedVertexHull right){  LinkedVertexHull hull=new LinkedVertexHull();  hull.size=3;  LinkedVertexHull point=left;  LinkedVertexHull segment=right;  if (left.size == 1) {    hull.leftMost=left.root;    hull.rightMost=right.rightMost;  } else {    hull.leftMost=left.leftMost;    hull.rightMost=right.root;    point=right;    segment=left;  }  hull.root=point.root;  Vector2 p1=segment.root.point;  Vector2 p2=segment.root.next.point;  Vector2 p=point.root.point;  Vector2 v1=p.to(p1);  Vector2 v2=p1.to(p2);  double area=v1.cross(v2);  if (area < 0.0) {    point.root.next=segment.root.next;    segment.root.next.prev=point.root;    point.root.prev=segment.root;    segment.root.next=point.root;  } else {    point.root.next=segment.root;    segment.root.prev=point.root;    point.root.prev=segment.root.next;    segment.root.next.next=point.root;  }  return hull;}  }
class C{  public Divide(){  super("basic.division",2,Ontology.NUMERICAL);}  }
class C{  public static Animation pushUpOut(){  AnimationSet animationSet=new AnimationSet(true);  animationSet.setFillAfter(true);  animationSet.addAnimation(new TranslateAnimation(0,0,0,-100));  animationSet.addAnimation(new AlphaAnimation(1.0f,0.0f));  return animationSet;}  }
class C{  public JPopupMenu(String label){  this.label=label;  lightWeightPopup=getDefaultLightWeightPopupEnabled();  setSelectionModel(new DefaultSingleSelectionModel());  enableEvents(AWTEvent.MOUSE_EVENT_MASK);  setFocusTraversalKeysEnabled(false);  updateUI();}  }
class C{  @Override public int locations(){  if (m_bHasNoDualTurret) {    return m_bHasNoTurret ? 7 : 8;  }  return 9;}  }
class C{  protected void readImage(){  ix=readShort();  iy=readShort();  iw=readShort();  ih=readShort();  int packed=read();  lctFlag=(packed & 0x80) != 0;  interlace=(packed & 0x40) != 0;  lctSize=2 << (packed & 7);  if (lctFlag) {    lct=readColorTable(lctSize);    act=lct;  } else {    act=gct;    if (bgIndex == transIndex)     bgColor=0;  }  int save=0;  if (transparency) {    save=act[transIndex];    act[transIndex]=0;  }  if (act == null) {    status=STATUS_FORMAT_ERROR;  }  if (err())   return;  decodeImageData();  skip();  if (err())   return;  frameCount++;  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);  setPixels();  frames.add(new GifFrame(image,delay));  if (transparency) {    act[transIndex]=save;  }  resetFrame();}  }
class C{  @Override public boolean shouldFilter(){  return RequestContext.getCurrentContext().getRequest().getRequestURI().endsWith(Swagger2Controller.DEFAULT_URL);}  }
class C{  void finishPacket(ByteBuffer buffer){  addTlv(buffer,DHCP_MESSAGE_TYPE,DHCP_MESSAGE_TYPE_NAK);  addTlv(buffer,DHCP_SERVER_IDENTIFIER,mServerIdentifier);  addTlv(buffer,DHCP_MESSAGE,mMessage);  addTlvEnd(buffer);}  }
class C{  public void paint(Graphics g){}  }
class C{  public ConvertMemberTypeDescriptor(){  super(IJavaRefactorings.CONVERT_MEMBER_TYPE);}  }
class C{  public void addListener(WorldListener listener){  listenerList.add(listener);}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  @Override public void close() throws IOException {  Socket s=_s;  _s=null;  if (s != null) {    try {      s.close();    } catch (    Exception e) {    }  }}  }
class C{  public void testisAutoIncrement(){  try {    assertFalse(rsmd.isAutoIncrement(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage());    e1.printStackTrace();  }  try {    conn.close();    rsmd.getSchemaName(2);    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public T4(V1 val1,V2 val2,V3 val3,V4 val4){  super(val1,val2,val3,val4);}  }
class C{  public PartitionAttributesFactory(){}  }
class C{  public synchronized Buffer next(){  int indexNew=(indexBlocked + 1) % buffers.length;  while (!stopped && indexNew == indexMine) {    Log.d(LOG,"next() waiting....");    try {      wait();    } catch (    InterruptedException e) {    }    Log.d(LOG,"next() awaken");  }  if (indexNew == indexMine)   return null;  indexBlocked=indexNew;  notify();  return buffers[indexBlocked];}  }
class C{  public boolean isMinimized(){  return this.minimized;}  }
class C{  public void takeSnapshot(String snapshotName,String columnFamily,String... keyspaces) throws IOException {  if (columnFamily != null) {    if (keyspaces.length != 1) {      throw new IOException("When specifying the table for a snapshot, you must specify one and only one keyspace");    }    ssProxy.takeColumnFamilySnapshot(keyspaces[0],columnFamily,snapshotName);  } else   ssProxy.takeSnapshot(snapshotName,keyspaces);}  }
class C{  public double distance(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.170 -0500",hash_original_method="3CBD306431C0846BE7A7FBEF3B9920DA",hash_generated_method="8BE9290E5A78003CD3400FC7458B6660") public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public Exchange(String peerAddress,InputStream in,OutputStream out,boolean asInitiator,FriendStore friendStore,MessageStore messageStore,ExchangeCallback callback) throws IllegalArgumentException {  this.peerAddress=peerAddress;  this.in=in;  this.out=out;  this.friendStore=friendStore;  this.messageStore=messageStore;  this.asInitiator=asInitiator;  this.callback=callback;  if (in == null) {    throw new IllegalArgumentException("Input stream for exchange is null.");  }  if (out == null) {    throw new IllegalArgumentException("Output stream for exchange is null.");  }  if (friendStore == null) {    throw new IllegalArgumentException("Friend store for exchange is null.");  }  if (messageStore == null) {    throw new IllegalArgumentException("Message store for exchange is null.");  }  if (callback == null) {    log.warn("No callback provided for exchange - nothing would happen locally!");    throw new IllegalArgumentException("No callback provided for exchange.");  }}  }
class C{  @Override public void onNewItem(int id,Face face){  mEyesGraphic=new GooglyEyesGraphic(mOverlay);}  }
class C{  private void splitChunk(final MemoryChunk chunk,final long address){  final byte[] oldData=chunk.getBytes();  final byte[] newData1=new byte[(int)(address - chunk.getAddress())];  final byte[] newData2=new byte[(chunk.getLength() - newData1.length)];  System.arraycopy(oldData,0,newData1,0,newData1.length);  System.arraycopy(oldData,oldData.length - newData2.length,newData2,0,newData2.length);  final MemoryChunk newChunk1=new MemoryChunk(chunk.getAddress(),newData1);  final MemoryChunk newChunk2=new MemoryChunk((chunk.getAddress() + chunk.getLength()) - newData2.length,newData2);  removeChunk(chunk);  insertChunk(newChunk1);  insertChunk(newChunk2);}  }
class C{  public void send(RosterEntry rosterEntry,String targetUserID){  Message msg=new Message(targetUserID);  RosterExchange rosterExchange=new RosterExchange();  rosterExchange.addRosterEntry(rosterEntry);  msg.addExtension(rosterExchange);  con.sendPacket(msg);}  }
class C{  private void recomputeSeperation(double[][] means,double[] sep){  final int k=means.length;  assert (sep.length == k);  boolean issquared=(distanceFunction instanceof SquaredEuclideanDistanceFunction);  Arrays.fill(sep,Double.POSITIVE_INFINITY);  for (int i=1; i < k; i++) {    DoubleVector m1=DoubleVector.wrap(means[i]);    for (int j=0; j < i; j++) {      double d=distanceFunction.distance(m1,DoubleVector.wrap(means[j]));      sep[i]=(d < sep[i]) ? d : sep[i];      sep[j]=(d < sep[j]) ? d : sep[j];    }  }  for (int i=0; i < k; i++) {    sep[i]=issquared ? Math.sqrt(sep[i]) : sep[i];    sep[i]*=.5;  }}  }
class C{  private void validateConfig(final Map<String,Object> conf){  Preconditions.checkNotNull(conf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT),"%s cannot be null",Config.STORM_ZOOKEEPER_SESSION_TIMEOUT);  Preconditions.checkNotNull(conf.get(Config.STORM_ZOOKEEPER_CONNECTION_TIMEOUT),"%s cannot be null",Config.STORM_ZOOKEEPER_CONNECTION_TIMEOUT);  Preconditions.checkNotNull(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES),"%s cannot be null",Config.STORM_ZOOKEEPER_RETRY_TIMES);  Preconditions.checkNotNull(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL),"%s cannot be null",Config.STORM_ZOOKEEPER_RETRY_INTERVAL);}  }
class C{  public void evaluateTupleQuery(final TupleResultBuilder builder,final TupleQuery query) throws QueryEvaluationException, QueryResultHandlerException {  final TupleQueryResult result=query.evaluate();  try {    final String[] names=result.getBindingNames().toArray(new String[0]);    builder.variables(names);    builder.link(Arrays.asList(INFO));    final List<Object> values=new ArrayList<Object>();    while (result.hasNext()) {      final BindingSet set=result.next();      addResult(builder,names,values,set);    }  }  finally {    result.close();  }}  }
class C{  public static void clean(){  log.clear();}  }
class C{  int findGroupPosition(long groupIdToMatch,int seedGroupPosition){  int count=mExpandableListAdapter.getGroupCount();  if (count == 0) {    return AdapterView.INVALID_POSITION;  }  if (groupIdToMatch == AdapterView.INVALID_ROW_ID) {    return AdapterView.INVALID_POSITION;  }  seedGroupPosition=Math.max(0,seedGroupPosition);  seedGroupPosition=Math.min(count - 1,seedGroupPosition);  long endTime=SystemClock.uptimeMillis() + AdapterView.SYNC_MAX_DURATION_MILLIS;  long rowId;  int first=seedGroupPosition;  int last=seedGroupPosition;  boolean next=false;  boolean hitFirst;  boolean hitLast;  ExpandableListAdapter adapter=getAdapter();  if (adapter == null) {    return AdapterView.INVALID_POSITION;  }  while (SystemClock.uptimeMillis() <= endTime) {    rowId=adapter.getGroupId(seedGroupPosition);    if (rowId == groupIdToMatch) {      return seedGroupPosition;    }    hitLast=last == count - 1;    hitFirst=first == 0;    if (hitLast && hitFirst) {      break;    }    if (hitFirst || (next && !hitLast)) {      last++;      seedGroupPosition=last;      next=false;    } else     if (hitLast || (!next && !hitFirst)) {      first--;      seedGroupPosition=first;      next=true;    }  }  return AdapterView.INVALID_POSITION;}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends java.lang.Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  private void verifyStringsAreProperlyEscaped(Locale loc){  StringId.setLocale(loc);  final Set<StringId> misquoted=new HashSet<StringId>();  final Object[] identityArgs=new Object[100];  for (int index=0; index < identityArgs.length; index++) {    identityArgs[index]=index;  }  final AbstractStringIdResourceBundle rb=getActiveResourceBundle();  for (  StringId instance : getAllStringIds()) {    String raw=rb.getString(instance);    String altered=raw.replaceAll("''","'");    altered=altered.replaceAll("\\{([0-9]+)[^\\}]*\\}","$1");    if (!rb.usingRawMode()) {      altered="msgID " + ((StringId)instance).id + ": "+ altered;    }    String formatted=null;    try {      formatted=instance.toLocalizedString(identityArgs);    } catch (    IllegalArgumentException iae) {      String testName=this.getClass().getName().replaceAll("\\.","/") + ".class";      String exMsg="Improper message id=" + ((StringId)instance).id + "\n"+ "Usually this is caused by an unmatched or nested \"{\"\n"+ "Examples:\t\"{0]\" or \"{ {0} }\"\n"+ "This is just the first failure, it is in your interest"+ " to rebuild and run just this one test.\n"+ "build.sh run-java-tests -Djunit.testcase="+ testName;      throw new AssertionError(exMsg,iae);    }    if (!altered.equals(formatted)) {      System.err.println("altered:   " + altered);      System.err.println("formatted: " + formatted);      misquoted.add(instance);    }  }  if (!misquoted.isEmpty()) {    StringBuffer err=new StringBuffer();    err.append("These errors are usually resolved by replacing ");    err.append("\"'\" with \"''\".\n");    err.append("If the error is in the non-english version then ");    err.append("alter the text in StringIdResouceBundle_{lang}.txt.\n");    err.append("The following misquoted StringIds were found:");    for (    StringId i : misquoted) {      err.append("\n").append("StringId id=").append(((StringId)i).id).append(" : text=\"").append(i.getRawText()).append("\"");    }    fail(err.toString());  }}  }
class C{  public long writeProgressGrain(long sector) throws IOException {  assert sector % SparseUtil.DEFAULT_GRAIN_SIZE == 0;  assert sector >= nextSector;  if (unflushedDataGrains) {    output.flush();    unflushedDataGrains=false;  }  writeProgressGrainIfNeeded(sector);  return currentOffset;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof HighLowRenderer)) {    return false;  }  HighLowRenderer that=(HighLowRenderer)obj;  if (this.drawOpenTicks != that.drawOpenTicks) {    return false;  }  if (this.drawCloseTicks != that.drawCloseTicks) {    return false;  }  if (!PaintUtilities.equal(this.openTickPaint,that.openTickPaint)) {    return false;  }  if (!PaintUtilities.equal(this.closeTickPaint,that.closeTickPaint)) {    return false;  }  if (this.tickLength != that.tickLength) {    return false;  }  if (!super.equals(obj)) {    return false;  }  return true;}  }
class C{  private void tryParseStyleElement(IDOMElement element){  if (!UiBinderXmlModelUtilities.isStyleElement(element)) {    return;  }  CssExtractor extractor=UiBinderXmlModelUtilities.createCssExtractorForStyleElement(element,javaProject);  if (extractor != null) {    String errorMessage=CssSelectorNameCollector.getDuplicateSelectorNamesErrorMessage(extractor.getCssDocument());    if (errorMessage != null) {      List<IRegion> elementTagRegions=XmlUtilities.getElementTagRegions(element,true);      problemMarkerManager.setDuplicateCssSelectorError(elementTagRegions.get(0),errorMessage);    }  }  tryParseStyleElementSrcAttribute(element);  tryParseTypeAttribute(element);}  }
class C{  public StringIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  @Override public String toString(){  return String.format("View Graph [%d nodes, %d edges]",nodeCount(),edgeCount());}  }
class C{  @Override public void endWindow(){  if (ltuple != null) {    last.emit(ltuple);  }  ltuple=null;}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  private boolean isStaticOrFinal(VariableDeclaration variableDeclaration){  boolean isStaticOrFinal=false;  for (  KeywordModifier keywordModifier : variableDeclaration.astDefinition().astModifiers().astKeywords()) {    if (keywordModifier.astName().equals("static") || keywordModifier.astName().equals("final")) {      isStaticOrFinal=true;    }  }  return isStaticOrFinal;}  }
class C{  @Override public void startElement(final String namespaceURI,final String lName,final String qName,final Attributes attrs){  if (qName.equals("group")) {    final String uriValue=attrs.getValue("uri");    if (uriValue == null) {      logger.warn("group without 'uri'");    } else {      try {        groups.add(uri.resolve(uriValue));      } catch (      final IllegalArgumentException ex) {        logger.error("Invalid group reference: " + uriValue + " ["+ ex.getMessage()+ "]");      }    }  } else   if (!qName.equals("groups")) {    logger.warn("Unknown XML element: " + qName);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TANNOTATION__NAME:    setName(NAME_EDEFAULT);  return;case TypesPackage.TANNOTATION__ARGS:getArgs().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public void buildInformEntries(Hashtable<InetAddress,Vector<String>> dest){}  }
class C{  private static char[] encodeHex(final byte[] data,final char[] toDigits){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=toDigits[(0xF0 & data[i]) >>> 4];    out[j++]=toDigits[0x0F & data[i]];  }  return out;}  }
class C{  public static String resolveSVMHmmClassifyCommand(){  try {    return new RuntimeProvider(BINARIES_BASE_LOCATION).getFile("svm_hmm_classify").getAbsolutePath();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY:    setHasNoBody(HAS_NO_BODY_EDEFAULT);  return;case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER:setDeclaredMemberAccessModifier(DECLARED_MEMBER_ACCESS_MODIFIER_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public StyleDeclaration(CSSEngine eng){  super(eng);  declaration=cssEngine.parseStyleDeclaration(SVGStylableElement.this,getAttributeNS(null,SVG_STYLE_ATTRIBUTE));}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  private static void writeSkinComponent(String component,Writer out) throws IOException {  out.write("\t<" + UI_ELEMENT + ">\n");  out.write("\t\t<" + NAME + ">");  out.write(component);  out.write("</" + NAME + ">\n");  SkinSpecification skinSpec=getSkin(component);  out.write("\t\t<" + NO_BORDER + ">");  out.write(((Boolean)skinSpec.noBorder).toString());  out.write("</" + NO_BORDER + ">\n");  writeBorder(skinSpec,out);  for (  String bgImg : skinSpec.backgrounds) {    out.write("\t\t<" + BACKGROUND_IMAGE + ">");    out.write(bgImg);    out.write("</" + BACKGROUND_IMAGE + ">\n");  }  out.write("\t\t<" + TILE_BACKGROUND + ">");  out.write(((Boolean)skinSpec.tileBackground).toString());  out.write("</" + TILE_BACKGROUND + ">\n");  for (  Color fontColor : skinSpec.fontColors) {    out.write("\t\t<" + FONT_COLOR + ">");    out.write("#" + Integer.toHexString(fontColor.getRGB()).substring(2));    out.write("</" + FONT_COLOR + ">\n");  }  out.write("\t\t<" + SHOW_SCROLL_BARS + ">");  out.write(((Boolean)skinSpec.showScrollBars).toString());  out.write("</" + SHOW_SCROLL_BARS + ">\n");  out.write("\t</" + UI_ELEMENT + ">\n\n");}  }
class C{  public void addActionListener(ActionListener listener){  m_text.addActionListener(listener);}  }
class C{  public void readToToken(int tok,int offset) throws CoreException {  setOffset(offset);  readToToken(tok);}  }
class C{  public static void installPalettePrefsHandler(final Preferences prefs,final String name,Window window){  installPalettePrefsHandler(prefs,name,window,0);}  }
class C{  public SnippetStub(Class<? extends Snippets> snippetDeclaringClass,String snippetMethodName,HotSpotProviders providers,HotSpotForeignCallLinkage linkage){  super(providers,linkage);  Method javaMethod=SnippetTemplate.AbstractTemplates.findMethod(snippetDeclaringClass == null ? getClass() : snippetDeclaringClass,snippetMethodName,null);  this.method=providers.getMetaAccess().lookupJavaMethod(javaMethod);}  }
class C{  public RuleStats call() throws Exception {  final IJoinNexus joinNexus=joinNexusFactory.newInstance(indexManager);  final List<Callable<RuleStats>> tasks=newQueryTasks(step,joinNexus,buffer);  try {    final RuleStats totals=runTasks(joinNexus,tasks);    if (log.isDebugEnabled()) {      log.debug("done - closing the blocking buffer");    }    buffer.close();    RuleLog.log(totals);    return totals;  } catch (  Throwable t) {    try {      log.error("Problem running query: " + t,t);    } catch (    Throwable ignored) {    }    buffer.abort(t);    throw new RuntimeException(t);  }}  }
class C{  public ScanManagerConfig(String name){  this(name,false);}  }
class C{  public static void main(String[] args){  if (args.length != 3) {    System.out.println("format : java Translation directory AD_Language import|export");    System.out.println("example: java Translation /Adempiere/data/de_DE de_DE import");    System.out.println("example: java Translation /Adempiere/data/fr_FR fr_FR export");    System.exit(1);  }  Login.initTest(false);  String directory=args[0];  String AD_Language=args[1];  String mode=args[2];  Translation trl=new Translation(Env.getCtx());  String msg=trl.validateLanguage(AD_Language);  if (msg.length() > 0)   System.err.println(msg); else   trl.process(directory,AD_Language,mode);  System.exit(0);}  }
class C{  private boolean isCompatibleCast(String key,Class<?> classToCast){  Object obj=mValues.get(key);  try {    if (mValues.get(key) instanceof Number && obj == null) {      Log.e(TAG,"Cannot cast null value to a " + classToCast.getSimpleName() + " number format.");      return false;    }    classToCast.cast(obj);    return true;  } catch (  ClassCastException e) {    Log.e(TAG,"Cannot cast object value from " + obj + " to "+ classToCast.getSimpleName()+ " for key '"+ key+ "'",e);    return false;  }}  }
class C{  private void start(){  if (mDestinations == null || !mMapFragment.isInitialised()) {    return;  }  if (!mIsLive) {    startTracking();  }}  }
class C{  @Override public void onEnable(){  long startTime=System.currentTimeMillis();  configurationLoad(true);  if (overrideDisable) {    overrideDisable=false;    return;  }  try {    MetricsLite metrics=new MetricsLite(this);    metrics.start();  } catch (  IOException e) {    this.getLogger().severe("Error while sending Metrics statistics.");    successfulLoad=false;  }  if (databaseBackup && (!"mysql".equalsIgnoreCase(config.getString("DatabaseType","sqlite")) || !"postgresql".equalsIgnoreCase(config.getString("DatabaseType","sqlite")))) {    File backup=new File(this.getDataFolder(),"achievements.db.bak");    if (System.currentTimeMillis() - backup.lastModified() > 86400000 || backup.length() == 0) {      this.getLogger().info("Backing up database file...");      try {        fileManager.backupFile("achievements.db");      } catch (      IOException e) {        this.getLogger().log(Level.SEVERE,"Error while backing up database file: ",e);        successfulLoad=false;      }    }  }  if (config.getBoolean("CheckForUpdate",true))   updateChecker=new UpdateChecker(this);  this.getLogger().info("Registering listeners...");  PluginManager pm=getServer().getPluginManager();  if (!disabledCategorySet.contains("Places")) {    blockPlaceListener=new AchieveBlockPlaceListener(this);    pm.registerEvents(blockPlaceListener,this);  }  if (!disabledCategorySet.contains("Breaks")) {    blockBreakListener=new AchieveBlockBreakListener(this);    pm.registerEvents(blockBreakListener,this);  }  if (!disabledCategorySet.contains("Kills")) {    killListener=new AchieveKillListener(this);    pm.registerEvents(killListener,this);  }  if (!disabledCategorySet.contains("Crafts")) {    craftListener=new AchieveCraftListener(this);    pm.registerEvents(craftListener,this);  }  if (!disabledCategorySet.contains("Deaths")) {    deathListener=new AchieveDeathListener(this);    pm.registerEvents(deathListener,this);  }  if (!disabledCategorySet.contains("Arrows")) {    arrowListener=new AchieveArrowListener(this);    pm.registerEvents(arrowListener,this);  }  if (!disabledCategorySet.contains("Snowballs") || !disabledCategorySet.contains("Eggs")) {    snowballEggListener=new AchieveSnowballEggListener(this);    pm.registerEvents(snowballEggListener,this);  }  if (!disabledCategorySet.contains("Fish")) {    fishListener=new AchieveFishListener(this);    pm.registerEvents(fishListener,this);  }  if (!disabledCategorySet.contains("ItemBreaks")) {    itemBreakListener=new AchieveItemBreakListener(this);    pm.registerEvents(itemBreakListener,this);  }  if (!disabledCategorySet.contains("ConsumedPotions") || !disabledCategorySet.contains("EatenItems")) {    consumeListener=new AchieveConsumeListener(this);    pm.registerEvents(consumeListener,this);  }  if (!disabledCategorySet.contains("Shear")) {    shearListener=new AchieveShearListener(this);    pm.registerEvents(shearListener,this);  }  if (!disabledCategorySet.contains("Milk")) {    milkListener=new AchieveMilkListener(this);    pm.registerEvents(milkListener,this);  }  if (config.getBoolean("CheckForUpdate",true) || !disabledCategorySet.contains("Connections") || !disabledCategorySet.contains("PlayedTime")) {    connectionListener=new AchieveConnectionListener(this);    pm.registerEvents(connectionListener,this);  }  if (!disabledCategorySet.contains("Trades") || !disabledCategorySet.contains("AnvilsUsed") || !disabledCategorySet.contains("Brewing")) {    inventoryClickListener=new AchieveTradeAnvilBrewListener(this);    pm.registerEvents(inventoryClickListener,this);  }  if (!disabledCategorySet.contains("Enchantments")) {    enchantmentListener=new AchieveEnchantListener(this);    pm.registerEvents(enchantmentListener,this);  }  if (!disabledCategorySet.contains("MaxLevel")) {    xpListener=new AchieveXPListener(this);    pm.registerEvents(xpListener,this);  }  if (!disabledCategorySet.contains("Beds")) {    bedListener=new AchieveBedListener(this);    pm.registerEvents(bedListener,this);  }  if (!disabledCategorySet.contains("ItemDrops")) {    dropListener=new AchieveDropListener(this);    pm.registerEvents(dropListener,this);  }  if (!disabledCategorySet.contains("Taming")) {    tameListener=new AchieveTameListener(this);    pm.registerEvents(tameListener,this);  }  if (!disabledCategorySet.contains("HoePlowings") || !disabledCategorySet.contains("Fertilising") || !disabledCategorySet.contains("Fireworks")|| !disabledCategorySet.contains("MusicDiscs")) {    hoeFertiliseFireworkMusicListener=new AchieveHoeFertiliseFireworkMusicListener(this);    pm.registerEvents(hoeFertiliseFireworkMusicListener,this);  }  if (!disabledCategorySet.contains("MaxLevel") || !disabledCategorySet.contains("PlayedTime") || !disabledCategorySet.contains("DistanceFoot")|| !disabledCategorySet.contains("DistancePig")|| !disabledCategorySet.contains("DistanceHorse")|| !disabledCategorySet.contains("DistanceMinecart")|| !disabledCategorySet.contains("DistanceBoat")|| !disabledCategorySet.contains("DistanceGliding")) {    quitListener=new AchieveQuitListener(this);    pm.registerEvents(quitListener,this);  }  if (!disabledCategorySet.contains("DistanceFoot") || !disabledCategorySet.contains("DistancePig") || !disabledCategorySet.contains("DistanceHorse")|| !disabledCategorySet.contains("DistanceMinecart")|| !disabledCategorySet.contains("DistanceBoat")|| !disabledCategorySet.contains("DistanceGliding")|| !disabledCategorySet.contains("EnderPearls")) {    teleportRespawnListener=new AchieveTeleportRespawnListener(this);    pm.registerEvents(teleportRespawnListener,this);  }  listGUIListener=new ListGUIListener(this);  pm.registerEvents(listGUIListener,this);  this.getLogger().info("Initialising database and launching scheduled tasks...");  db.initialise();  if (overrideDisable) {    overrideDisable=false;    return;  }  if (asyncPooledRequestsSender)   pooledRequestsSenderTask=Bukkit.getServer().getScheduler().runTaskTimerAsynchronously(Bukkit.getPluginManager().getPlugin("AdvancedAchievements"),new PooledRequestsSenderAsync(this,true),pooledRequestsTaskInterval * 40L,pooledRequestsTaskInterval * 20L); else   pooledRequestsSenderTask=Bukkit.getServer().getScheduler().runTaskTimer(Bukkit.getPluginManager().getPlugin("AdvancedAchievements"),new PooledRequestsSenderSync(this,true),pooledRequestsTaskInterval * 40L,pooledRequestsTaskInterval * 20L);  if (!disabledCategorySet.contains("PlayedTime")) {    achievePlayTimeRunnable=new AchievePlayTimeRunnable(this);    playedTimeTask=Bukkit.getServer().getScheduler().runTaskTimer(Bukkit.getPluginManager().getPlugin("AdvancedAchievements"),achievePlayTimeRunnable,playtimeTaskInterval * 10L,playtimeTaskInterval * 20L);  }  if (!disabledCategorySet.contains("DistanceFoot") || !disabledCategorySet.contains("DistancePig") || !disabledCategorySet.contains("DistanceHorse")|| !disabledCategorySet.contains("DistanceMinecart")|| !disabledCategorySet.contains("DistanceBoat")|| !disabledCategorySet.contains("DistanceGliding")) {    achieveDistanceRunnable=new AchieveDistanceRunnable(this);    distanceTask=Bukkit.getServer().getScheduler().runTaskTimer(Bukkit.getPluginManager().getPlugin("AdvancedAchievements"),achieveDistanceRunnable,distanceTaskInterval * 40L,distanceTaskInterval * 20L);  }  if (successfulLoad)   this.getLogger().info("Plugin successfully enabled and ready to run! Took " + (System.currentTimeMillis() - startTime) + "ms."); else   this.getLogger().severe("Error(s) while loading plugin. Please view previous logs for more information.");}  }
class C{  public E element(){  return getFirst();}  }
class C{  public TCacheJSR107<K,V> jsr107cache(){  return tCacheJSR107;}  }
class C{  public boolean equalsT(Vector4 v){  return (x - 1E-5 > v.x && v.x < x + 1E-5) && (y - 1E-5 > v.y && v.y < y + 1E-5) && (z - 1E-5 > v.z && v.z < z + 1E-5)&& (w - 1E-5 > v.w && v.w < w + 1E-5);}  }
class C{  public static void main(String args[]){  try {    boolean assertionenabled=false;    assert (assertionenabled=true) == true;    if (assertionenabled)     System.out.println("Asserts are enabled");    System.gc();    final long startupMemFree=MemoryControl.free();    final long startupMemTotal=MemoryControl.total();    boolean headless=true;    if (OS.isWindows)     headless=false;    if (args.length >= 1 && args[0].toLowerCase().equals("-gui"))     headless=false;    System.setProperty("java.awt.headless",headless ? "true" : "false");    String s="";    for (    final String a : args)     s+=a + " ";    yacyRelease.startParameter=s.trim();    File applicationRoot=new File(System.getProperty("user.dir").replace('\\','/'));    File dataRoot=applicationRoot;    if ((args.length >= 1) && (args[0].toLowerCase().equals("-startup") || args[0].equals("-start"))) {      if (args.length > 1) {        dataRoot=new File(System.getProperty("user.home").replace('\\','/'),args[1]);      }      preReadSavedConfigandInit(dataRoot);      startup(dataRoot,applicationRoot,startupMemFree,startupMemTotal,false);    } else     if (args.length >= 1 && args[0].toLowerCase().equals("-gui")) {      if (args.length > 1) {        dataRoot=new File(System.getProperty("user.home").replace('\\','/'),args[1]);      }      preReadSavedConfigandInit(dataRoot);      startup(dataRoot,applicationRoot,startupMemFree,startupMemTotal,true);    } else     if ((args.length >= 1) && ((args[0].toLowerCase().equals("-shutdown")) || (args[0].equals("-stop")))) {      if (args.length == 2)       applicationRoot=new File(args[1]);      shutdown(applicationRoot);    } else     if ((args.length >= 1) && (args[0].toLowerCase().equals("-update"))) {      if (args.length == 2)       applicationRoot=new File(args[1]);      update(applicationRoot);    } else     if ((args.length >= 1) && (args[0].toLowerCase().equals("-version"))) {      System.out.println(copyright);    } else     if ((args.length > 1) && (args[0].toLowerCase().equals("-config"))) {      File f=new File(dataRoot,"DATA/SETTINGS/");      if (!f.exists()) {        mkdirsIfNeseccary(f);      } else {        if (new File(dataRoot,"DATA/yacy.running").exists()) {          System.out.println("please restart YaCy");        }      }      serverSwitch ss=new serverSwitch(dataRoot,applicationRoot,"defaults/yacy.init","DATA/SETTINGS/yacy.conf");      for (int icnt=1; icnt < args.length; icnt++) {        String cfg=args[icnt];        int pos=cfg.indexOf('=');        if (pos > 0) {          String cmd=cfg.substring(0,pos);          String val=cfg.substring(pos + 1);          if (!val.isEmpty()) {            if (cmd.equalsIgnoreCase(SwitchboardConstants.ADMIN_ACCOUNT)) {              int cpos=val.indexOf(':');              if (cpos >= 0) {                String username=val.substring(0,cpos);                String pwdtxt=val.substring(cpos + 1);                if (!username.isEmpty()) {                  ss.setConfig(SwitchboardConstants.ADMIN_ACCOUNT_USER_NAME,username);                  System.out.println("Set property " + SwitchboardConstants.ADMIN_ACCOUNT_USER_NAME + " = "+ username);                } else {                  username=ss.getConfig(SwitchboardConstants.ADMIN_ACCOUNT_USER_NAME,"admin");                }                ss.setConfig(SwitchboardConstants.ADMIN_ACCOUNT_B64MD5,"MD5:" + Digest.encodeMD5Hex(username + ":" + ss.getConfig(SwitchboardConstants.ADMIN_REALM,"YaCy")+ ":"+ pwdtxt));                System.out.println("Set property " + SwitchboardConstants.ADMIN_ACCOUNT_B64MD5 + " = "+ ss.getConfig(SwitchboardConstants.ADMIN_ACCOUNT_B64MD5,""));              }            } else {              ss.setConfig(cmd,val);              System.out.println("Set property " + cmd + " = "+ val);            }          }        } else {          System.out.println("skip parameter " + cfg + " (equal sign missing, put parameter in doublequotes)");        }        System.out.println();      }    } else {      if (args.length == 1) {        applicationRoot=new File(args[0]);      }      preReadSavedConfigandInit(dataRoot);      startup(dataRoot,applicationRoot,startupMemFree,startupMemTotal,false);    }  }  finally {    ConcurrentLog.shutdown();  }}  }
class C{  public int length(){  return n;}  }
class C{  public static CharacterTranslator create(String mappingPath) throws SQLException {  Properties props=new Properties();  try {    ResourceBundle res=ResourceBundle.getBundle(mappingPath,Locale.getDefault(),CharacterTranslator.class.getClassLoader());    Enumeration<String> en=res.getKeys();    while (en.hasMoreElements()) {      String key=en.nextElement();      String value=res.getString(key);      props.put(key,value);    }    final char[] mapping=DEFAULT_MAPPING.clone();    for (    Map.Entry<Object,Object> entry : props.entrySet()) {      String key=(String)entry.getKey();      String value=(String)entry.getValue();      if (!key.startsWith("db."))       throw new SQLNonTransientException("Incorrect mapping format. " + "All properties should start with \"db.\", but " + key + " found.");      if (key.length() != 4)       throw new SQLNonTransientException("Incorrect mapping format. " + "Key should consist only of 4 characters, but " + key + " found.");      if (value.length() != 1)       throw new SQLNonTransientException("Incorrect mapping format. " + "Mapped value should consist only of single character, but " + value + " found.");      char dbChar=key.charAt(3);      char javaChar=value.charAt(0);      mapping[dbChar]=javaChar;      mapping[javaChar]=dbChar;    }    return new CharacterTranslator(mapping);  } catch (  MissingResourceException ex) {    throw new SQLNonTransientException("Character translation " + mappingPath + " could not be found.");  }}  }
class C{  public static <T>ObjectName registerMBean(MBeanServer mbeanSrv,ObjectName name,T impl,Class<T> itf) throws JMException {  assert mbeanSrv != null;  assert name != null;  assert itf != null;  DynamicMBean mbean=new IgniteStandardMXBean(impl,itf);  mbean.getMBeanInfo();  return mbeanSrv.registerMBean(mbean,name).getObjectName();}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return isSetId();case TYPE:  return isSetType();case NAME:return isSetName();case FILE_SIZE:return isSetFileSize();case URL:return isSetUrl();default :;}throw new IllegalStateException();}  }
class C{  synchronized public boolean store(MyPerfContext ctx){  File cfgFile=new File(this.myperfConfigPath);  PrintWriter pw=null;  try {    pw=new PrintWriter(new FileWriter(cfgFile));    pw.println("metricsScannerUser=" + this.metricsScannerUser);    pw.println("adminEmail=" + this.adminEmail);    pw.println("alertNotificationEmails=" + this.alertNotificationEmails);    pw.println("scannerIntervalSeconds=" + this.scannerIntervalSeconds);    pw.println("alertScanIntervalSeconds=" + this.alertScanIntervalSeconds);    pw.println("recordRententionDays=" + this.recordRententionDays);    pw.println("scannerThreadCount=" + this.scannerThreadCount);    pw.println("reuseMonUserConnction=" + (reuseMonUserConnction ? "y" : "n"));    pw.println("metricsDbType=" + this.metricsDbType);    if (this.metricsDbHost != null && !this.metricsDbHost.isEmpty())     pw.println("metricsDbHost=" + this.metricsDbHost);    if (this.metricsDbPort > 0)     pw.println("metricsDbPort=" + this.metricsDbPort);    if (this.metricsDbName != null && !this.metricsDbName.isEmpty())     pw.println("metricsDbName=" + this.metricsDbName);    if (this.metricsDbUserName != null && !this.metricsDbUserName.isEmpty())     pw.println("metricsDbUserName=" + this.metricsDbUserName);    if (this.metricsDbPassword != null && !this.metricsDbPassword.isEmpty())     pw.println("metricsDbPassword=" + ctx.getMetaDb().enc(this.metricsDbPassword));    if (this.hipchatUrl != null && !this.hipchatUrl.isEmpty())     pw.println("hipchatUrl=" + this.hipchatUrl);    if (this.hipchatAuthToken != null && !this.hipchatAuthToken.isEmpty())     pw.println("hipchatAuthToken=" + ctx.getMetaDb().enc(this.hipchatAuthToken));    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Failed to store configurations to file " + this.myperfConfigPath,ex);  } finally {    if (pw != null) {      try {        pw.flush();        pw.close();      } catch (      Exception fex) {      }    }  }  return false;}  }
class C{  public static byte[] ledgerId2Bytes(long ledgerId){  return Long.toString(ledgerId).getBytes(UTF_8);}  }
class C{  public boolean overlaps(MyRectangle2D r){  return !contains(r) && ((x + width / 2 > r.getX() - r.getWidth()) || (y + height / 2 > r.getY() - r.getHeight())) && (getDistance(y,r.getY()) < height / 2 + r.getHeight() / 2)&& (getDistance(x,r.getX()) < width / 2 + r.getWidth() / 2);}  }
class C{  public Future<ReplDBMSHeader> watchForCommittedSequenceNumber(long seqno,boolean terminate) throws InterruptedException {  Watch<ReplDBMSHeader> watch=(Watch<ReplDBMSHeader>)stages.getLast().watchForCommittedSequenceNumber(seqno,false);  if (!watch.isDone()) {    for (    Store store : stores.values()) {      if (store instanceof ParallelStore) {        ((ParallelStore)store).insertWatchSyncEvent(watch.getPredicate());      }    }  }  return watch;}  }
class C{  @Override public ValueInstantiator findValueInstantiator(DeserializationConfig config,BasicBeanDescription beanDesc) throws JsonMappingException {  ValueInstantiator instantiator;  AnnotatedClass ac=beanDesc.getClassInfo();  Object instDef=config.getAnnotationIntrospector().findValueInstantiator(ac);  if (instDef != null) {    if (instDef instanceof ValueInstantiator) {      instantiator=(ValueInstantiator)instDef;    } else {      if (!(instDef instanceof Class<?>)) {        throw new IllegalStateException("Invalid value instantiator returned for type " + beanDesc + ": neither a Class nor ValueInstantiator");      }      Class<?> cls=(Class<?>)instDef;      if (!ValueInstantiator.class.isAssignableFrom(cls)) {        throw new IllegalStateException("Invalid instantiator Class<?> returned for type " + beanDesc + ": "+ cls.getName()+ " not a ValueInstantiator");      }      @SuppressWarnings("unchecked") Class<? extends ValueInstantiator> instClass=(Class<? extends ValueInstantiator>)cls;      instantiator=config.valueInstantiatorInstance(ac,(Class<? extends ValueInstantiator>)instClass);    }  } else {    instantiator=constructDefaultValueInstantiator(config,beanDesc);  }  if (_factoryConfig.hasValueInstantiators()) {    for (    ValueInstantiators insts : _factoryConfig.valueInstantiators()) {      instantiator=insts.findValueInstantiator(config,beanDesc,instantiator);      if (instantiator == null) {        throw new JsonMappingException("Broken registered ValueInstantiators (of type " + insts.getClass().getName() + "): returned null ValueInstantiator");      }    }  }  return instantiator;}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD) public static void apply(Editor editor){  if (isAtLeastGB) {    editor.apply();  } else {    editor.commit();  }}  }
class C{  public Builder addFixed32(final int value){  if (result.fixed32 == null) {    result.fixed32=new ArrayList<Integer>();  }  result.fixed32.add(value);  return this;}  }
class C{  public void testGetPathContextWhenTomcatContextXmlWithNoPathContext() throws Exception {  TomcatWAR war=new TomcatWAR(getResourcePath(PACKAGE_PATH + "tomcat-nocontext.war"));  assertEquals("tomcat-nocontext",war.getContext());}  }
class C{  public boolean shouldWriteToDatabase(){  return ((this.createSchemaWriter == null) && (this.dropSchemaWriter == null));}  }
class C{  private void loadOptionalLayer(StendhalRPZone zone,StendhalMapStructure zonedata,String layerName) throws IOException {  LayerDefinition layer=zonedata.getLayer(layerName);  if (layer != null) {    zone.addLayer(zone.getName() + "." + layerName,layer);  }}  }
class C{  public static QueryAssociatedCapabilityForFileSystem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedCapabilityForFileSystem object=new QueryAssociatedCapabilityForFileSystem();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedCapabilityForFileSystem".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedCapabilityForFileSystem)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","fsUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","fsUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setFsUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void processSchemaComment(){  burnCharacters(syntax.getDocumentTypeOpening().length());  int tagsOpened=1;  while (templateReader.hasNextCharacter()) {    final char character=templateReader.nextCharacter();    if (character == syntax.getTagOpening()) {      tagsOpened++;    } else     if (character == syntax.getTagClosing()) {      if (--tagsOpened == 0) {        break;      }    }  }}  }
class C{  public Future<ReplDBMSHeader> flush() throws InterruptedException, ReplicatorException {  Extractor extractor=stages.getFirst().getExtractor0();  String currentEventId=extractor.getCurrentResourceEventId();  return flush(currentEventId);}  }
class C{  public boolean isRaw(){  return (this.isGeneric() && (this.getTypeArgs().size() < this.getTypeVars().size()));}  }
class C{  private int negmax(int ply,IPlayer player,IPlayer opponent){  Iterator<IGameMove> it=player.validMoves(state).iterator();  if (ply == 0 || !it.hasNext()) {    return player.eval(state);  }  NegMaxNode negmax=null;  if (debug != null) {    negmax=new NegMaxNode();    debug.visitNode(negmax);    debug.visitEdge(state.copy(),negmax);    debugHome.push(negmax);  }  int best=Integer.MIN_VALUE;  while (it.hasNext()) {    IGameMove move=it.next();    move.execute(state);    state.incrementCounter();    int moveScore;    IGameState nextCopy=null;    if (debug != null) {      nextCopy=state.copy();      debug.visitNode(nextCopy);      debug.visitEdge(debugHome.peek(),nextCopy);    }    moveScore=-negmax(ply - 1,opponent,player);    move.undo(state);    if (debug != null && ply == 1) {      ScoreNode scoreNode=new ScoreNode(-moveScore);      debug.visitNode(scoreNode);      debug.visitEdge(nextCopy,scoreNode);    }    if (moveScore > best) {      best=moveScore;    }  }  if (debug != null) {    NegMaxNode mmn=debugHome.pop();    mmn.value(best);  }  return best;}  }
class C{  public final AC fill(int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setFill(true);  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   return Boolean.FALSE;  UIManager uiMgr=stack.getUIMgr();  if (uiMgr.getModuleGroup().defaultModule != null) {    String fname=uiMgr.getModuleGroup().defaultModule.description();    java.io.File f=new java.io.File(fname);    if (!f.isFile() || uiMgr.getModuleGroup().lastModified() > f.lastModified()) {      return Boolean.TRUE;    }  }  return Boolean.FALSE;}  }
class C{  @Override public void update(Collection<? extends DataObject> objs) throws DatabaseException {  getDbClient().persistObject(objs);}  }
class C{  private void updateAction(){  if (Clipboard.isEmpty()) {    setEnabled(false);  } else {    setEnabled(true);  }}  }
class C{  public static Set<String> listHosts(final State state){switch (state) {case INVENTORY:    return inventory.listHosts();case ARCHIVE:  return archive.listHosts();default :Set<String> a=inventory.listHosts();a.addAll(archive.listHosts());return a;}}  }
class C{  private IProcessManager instanceEjecucionAccion(String nombreClaseEjecutora) throws Exception {  Class claseEjecutora=Class.forName(nombreClaseEjecutora);  return (IProcessManager)claseEjecutora.newInstance();}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public static void main(String[] argv){  if (argv.length == 0) {    printUsage();    System.exit(1);  }  String broker=DEFAULT_BROKER_NAME;  String username=null;  String password=DEFAULT_PASSWORD;  for (int i=0; i < argv.length; i++) {    String arg=argv[i];    System.out.println("args::" + arg);    if (arg.equals("-b")) {      if (i == argv.length - 1 || argv[i + 1].startsWith("-")) {        System.err.println("error: missing broker name:port");        System.exit(1);      }      broker=argv[++i];      continue;    }    if (arg.equals("-u")) {      if (i == argv.length - 1 || argv[i + 1].startsWith("-")) {        System.err.println("error: missing user name");        System.exit(1);      }      username=argv[++i];      continue;    }    if (arg.equals("-p")) {      if (i == argv.length - 1 || argv[i + 1].startsWith("-")) {        System.err.println("error: missing password");        System.exit(1);      }      password=argv[++i];      continue;    }    if (arg.equals("-h")) {      printUsage();      System.exit(1);    }    System.err.println("error: unexpected argument: " + arg);    printUsage();    System.exit(1);  }  if (username == null) {    System.err.println("error: user name must be supplied");    printUsage();    System.exit(1);  }  Chat chat=new Chat();  chat.chatter(broker,username,password);}  }
class C{  public boolean isPointBehindCamera(Matrix pt,Matrix t,Matrix r){  return r.times(pt).get(2,0) + t.get(2,0) <= 0;}  }
class C{  private ContentValues makeWeatherConditionsContentValues(Weather wo,long expirationTime,String locationKey){  ContentValues cvs=new ContentValues();  cvs.put(WeatherContract.WeatherConditionsEntry.COLUMN_WEATHER_CONDITIONS_OBJECT_ID,wo.getId());  cvs.put(WeatherContract.WeatherConditionsEntry.COLUMN_MAIN,wo.getMain());  cvs.put(WeatherContract.WeatherConditionsEntry.COLUMN_DESCRIPTION,wo.getDescription());  cvs.put(WeatherContract.WeatherConditionsEntry.COLUMN_ICON,wo.getIcon());  cvs.put(WeatherContract.WeatherConditionsEntry.COLUMN_LOCATION_KEY,locationKey);  cvs.put(WeatherContract.WeatherConditionsEntry.COLUMN_EXPIRATION_TIME,expirationTime);  return cvs;}  }
class C{  private String checkpointKey(){  return getClass().getName() + '-' + phrase;}  }
class C{  private Region find(Region x){  Region current=this.root;  while (current != NULL_NODE) {    long res=x.orderRelativeTo(current);    if (res < 0) {      current=current.left;    } else     if (res > 0) {      current=current.right;    } else {      return current;    }  }  return null;}  }
class C{  protected boolean query(LinkedList files){  if (files == null) {    Debug.error("No files configured for query!");    return false;  }  Iterator it=files.iterator();  while (it.hasNext()) {    File file=(File)it.next();    Debug.output("  " + file.getAbsolutePath());  }  return true;}  }
class C{  @PatchMethod(override=true) public static void alert(String msg){}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  private void sleep(long millis){  StopWatch timer=new StopWatch(true);  while (true) {    boolean interrupted=Thread.interrupted();    try {      long timeLeft=millis - timer.elapsedTimeMillis();      if (timeLeft <= 0) {        break;      }      Thread.sleep(timeLeft);      break;    } catch (    InterruptedException e) {      interrupted=true;    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.x=last.getX();    this.y=last.getY();    this.z=last.getZ();  }  if (this.x > 9.E99) {    this.x=0;  }  if (this.y > 9.E99) {    this.y=0;  }  if (this.z > 9.E99) {    this.z=0;  }  return convert(r);}  }
class C{  public static boolean isGzipFile(InputStream in) throws IOException {  if (!in.markSupported()) {    throw new IllegalArgumentException("Require a resetable stream");  }  in.mark(2);  try {    final byte[] b=new byte[2];    IOUtils.readFully(in,b,0,2);    final int magic=(((int)b[1] & 0xff) << 8) | ((int)b[0] & 0xff);    return magic == GZIPInputStream.GZIP_MAGIC;  }  finally {    in.reset();  }}  }
class C{  public MutableDateTime copy(){  return (MutableDateTime)clone();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodehaschildnodesfalse.class,args);}  }
class C{  @Override public int compare(final Object obj1,final Object obj2){  return ((Comparable)obj1).compareTo(obj2);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  public boolean isInterface(){  return false;}  }
class C{  public SpellCheckerSession newSpellCheckerSession(Bundle bundle,Locale locale,SpellCheckerSessionListener listener,boolean referToSpellCheckerLanguageSettings){  if (listener == null) {    throw new NullPointerException();  }  if (!referToSpellCheckerLanguageSettings && locale == null) {    throw new IllegalArgumentException("Locale should not be null if you don't refer" + " settings.");  }  if (referToSpellCheckerLanguageSettings && !isSpellCheckerEnabled()) {    return null;  }  final SpellCheckerInfo sci;  try {    sci=sService.getCurrentSpellChecker(null);  } catch (  RemoteException e) {    return null;  }  if (sci == null) {    return null;  }  SpellCheckerSubtype subtypeInUse=null;  if (referToSpellCheckerLanguageSettings) {    subtypeInUse=getCurrentSpellCheckerSubtype(true);    if (subtypeInUse == null) {      return null;    }    if (locale != null) {      final String subtypeLocale=subtypeInUse.getLocale();      final String inputLocale=locale.toString();      if (subtypeLocale.length() < 2 || inputLocale.length() < 2 || !subtypeLocale.substring(0,2).equals(inputLocale.substring(0,2))) {        return null;      }    }  } else {    final String localeStr=locale.toString();    for (int i=0; i < sci.getSubtypeCount(); ++i) {      final SpellCheckerSubtype subtype=sci.getSubtypeAt(i);      final String tempSubtypeLocale=subtype.getLocale();      if (tempSubtypeLocale.equals(localeStr)) {        subtypeInUse=subtype;        break;      } else       if (localeStr.length() >= 2 && tempSubtypeLocale.length() >= 2 && localeStr.startsWith(tempSubtypeLocale)) {        subtypeInUse=subtype;      }    }  }  if (subtypeInUse == null) {    return null;  }  final SpellCheckerSession session=new SpellCheckerSession(sci,sService,listener,subtypeInUse);  try {    sService.getSpellCheckerService(sci.getId(),subtypeInUse.getLocale(),session.getTextServicesSessionListener(),session.getSpellCheckerSessionListener(),bundle);  } catch (  RemoteException e) {    return null;  }  return session;}  }
class C{  private static boolean processFtypAtom(ParsableByteArray atomData){  atomData.setPosition(Atom.HEADER_SIZE);  int majorBrand=atomData.readInt();  if (majorBrand == BRAND_QUICKTIME) {    return true;  }  atomData.skipBytes(4);  while (atomData.bytesLeft() > 0) {    if (atomData.readInt() == BRAND_QUICKTIME) {      return true;    }  }  return false;}  }
class C{  public KrbApRep(KrbApReq incomingReq,boolean useSeqNumber,EncryptionKey subKey) throws KrbException, IOException {  SeqNumber seqNum=new LocalSeqNumber();  init(incomingReq,subKey,seqNum);}  }
class C{  public static void disableBlending(){  glShadeModel(GL_FLAT);  glDisable(GL_LINE_SMOOTH);  glDisable(GL_POLYGON_SMOOTH);  glDisable(GL_BLEND);}  }
class C{  private int draw(double[] cumulativeFrequencies){  double r=Random.nextDouble();  int state=-1;  for (int j=0; j < cumulativeFrequencies.length; j++) {    if (r < cumulativeFrequencies[j]) {      state=j;      break;    }  }  assert (state != -1);  return state;}  }
class C{  public Boolean isDirectProvisionedSwitch(){  return directProvisionedSwitch;}  }
class C{  public String toString(){  String s="\nnetwork protocol: " + (_myProtocols[_myNetworkProtocol]) + "\n";  s+="host: " + ((_myRemoteAddress.address() != null) ? _myRemoteAddress.address() : "host address not set.") + "\n";  s+="sendToPort: " + _myRemoteAddress.port() + "\n";  s+="receiveAtPort: " + listeningPort() + "\n";  s+="datagramSize: " + _myDatagramSize + "\n";  s+="event Method: " + _myDefaultEventMethodName + "\n";  s+="(S)end(R)eceive(S)ame(P)ort: " + this._mySRSP + "\n\n";  return s;}  }
class C{  @Override public synchronized boolean hasPeriodPassed(double period){  if (get() > period) {    m_startTime+=period * 1000;    return true;  }  return false;}  }
class C{  @Override public void addScannedResult(Result scannedResult) throws QueryExecutionException {synchronized (this.lockObject) {    scannedResultList.add(scannedResult);    if ((scannedResultList.size() > maxNumberOfScannedResultList)) {      List<Result> localResult=scannedResultList;      scannedResultList=new ArrayList<Result>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      execService.submit(new MergerThread(localResult));    }  }}  }
class C{  private void handlePrefixedCounting(String item,int count,String prefix,Map<String,Integer> redundantMap){  StringBuilder key=new StringBuilder(prefix);  key.append(item);  if (!player.has(LOOTED_ITEMS,key.toString())) {    player.put(LOOTED_ITEMS,key.toString(),0);  }  if (!redundantMap.containsKey(item)) {    redundantMap.put(item,0);  }  int current=player.getInt(LOOTED_ITEMS,key.toString());  int increased=current + count;  redundantMap.put(item,increased);  player.put(LOOTED_ITEMS,key.toString(),increased);}  }
class C{  public SparseSwitchPayloadDecodedInstruction(InstructionCodec format,int opcode,int[] keys,int[] targets){  super(format,opcode,0,null,0,0L);  if (keys.length != targets.length) {    throw new IllegalArgumentException("keys/targets length mismatch");  }  this.keys=keys;  this.targets=targets;}  }
class C{  private int checkForDeadlocks(DefaultMutableTreeNode threadDump) throws IOException {  boolean finished=false;  boolean found=false;  int deadlocks=0;  int lineCounter=0;  StringBuffer dContent=new StringBuffer();  TreeCategory deadlockCat=new TreeCategory("Deadlocks",IconFactory.DEADLOCKS);  DefaultMutableTreeNode catDeadlocks=new DefaultMutableTreeNode(deadlockCat);  boolean first=true;  while (getBis().ready() && !finished) {    String line=getNextLine();    if (!found && !line.equals("")) {      if (line.trim().startsWith("Found one Java-level deadlock")) {        found=true;        dContent.append("<body bgcolor=\"ffffff\"><font size=").append(TDA.getFontSizeModifier(-1)).append("><b>");        dContent.append("Found one Java-level deadlock");        dContent.append("</b><hr></font><pre>\n");      } else       if (lineCounter >= getMaxCheckLines()) {        finished=true;      } else {        lineCounter++;      }    } else     if (found) {      if (line.startsWith("Found one Java-level deadlock")) {        if (dContent.length() > 0) {          deadlocks++;          addToCategory(catDeadlocks,"Deadlock No. " + (deadlocks),null,dContent.toString(),0,false);        }        dContent=new StringBuffer();        dContent.append("</pre><b><font size=").append(TDA.getFontSizeModifier(-1)).append(">");        dContent.append("Found one Java-level deadlock");        dContent.append("</b><hr></font><pre>\n");        first=true;      } else       if ((line.indexOf("Found") >= 0) && (line.endsWith("deadlocks.") || line.endsWith("deadlock."))) {        finished=true;      } else       if (line.startsWith("=======")) {      } else       if (line.indexOf(" monitor 0x") >= 0) {        dContent.append(linkifyDeadlockInfo(line));        dContent.append("\n");      } else       if (line.indexOf("Java stack information for the threads listed above") >= 0) {        dContent.append("</pre><br><font size=").append(TDA.getFontSizeModifier(-1)).append("><b>");        dContent.append("Java stack information for the threads listed above");        dContent.append("</b><hr></font><pre>");        first=true;      } else       if ((line.indexOf("- waiting on") >= 0) || (line.indexOf("- waiting to") >= 0) || (line.indexOf("- locked") >= 0)|| (line.indexOf("- parking to wait") >= 0)) {        dContent.append(linkifyMonitor(line));        dContent.append("\n");      } else       if (line.trim().startsWith("\"")) {        dContent.append("</pre>");        if (first) {          first=false;        } else {          dContent.append("<br>");        }        dContent.append("<b><font size=").append(TDA.getFontSizeModifier(-1)).append("><code>");        dContent.append(line);        dContent.append("</font></code></b><pre>");      } else {        dContent.append(line);        dContent.append("\n");      }    }  }  if (dContent.length() > 0) {    deadlocks++;    addToCategory(catDeadlocks,"Deadlock No. " + (deadlocks),null,dContent.toString(),0,false);  }  if (deadlocks > 0) {    threadDump.add(catDeadlocks);    ((ThreadDumpInfo)threadDump.getUserObject()).setDeadlocks((TreeCategory)catDeadlocks.getUserObject());    deadlockCat.setName("Deadlocks (" + deadlocks + (deadlocks == 1 ? " deadlock)" : " deadlocks)"));  }  return (deadlocks);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.366 -0500",hash_original_method="E3D4984E609CD7A8F1E539254F42C7CB",hash_generated_method="06B1AB071FC513CEC895DCCCC9494E78") public LayoutAnimationController(Context context,AttributeSet attrs){  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.LayoutAnimation);  Animation.Description d=Animation.Description.parseValue(a.peekValue(com.android.internal.R.styleable.LayoutAnimation_delay));  mDelay=d.value;  mOrder=a.getInt(com.android.internal.R.styleable.LayoutAnimation_animationOrder,ORDER_NORMAL);  int resource=a.getResourceId(com.android.internal.R.styleable.LayoutAnimation_animation,0);  if (resource > 0) {    setAnimation(context,resource);  }  resource=a.getResourceId(com.android.internal.R.styleable.LayoutAnimation_interpolator,0);  if (resource > 0) {    setInterpolator(context,resource);  }  a.recycle();}  }
class C{  private void updateSharedAvatarView(Bitmap bitmap){  Bitmap scaledBitmap=Bitmap.createScaledBitmap(bitmap,sharedAvatarSize,sharedAvatarSize,true);  CircleTransform circleTransform=new CircleTransform();  mSharedAvatarView.setBackground(new BitmapDrawable(getResources(),circleTransform.transform(scaledBitmap)));}  }
class C{  public boolean isValid(@NotNull String url){  return GITLAB_PATTERN.matcher(url).matches();}  }
class C{  public Text replaceWholeText(String content) throws DOMException {  return null;}  }
class C{  private static String removeTerminationCharacters(final String message){  if (message == null) {    throw new IllegalArgumentException("Message must not be null");  }  String errMsg=message.trim();  while (errMsg.endsWith(".") || errMsg.endsWith("!")) {    errMsg=errMsg.substring(0,errMsg.length() - 1);  }  return errMsg;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public dfn removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  protected BigdataGraphEdit toGraphEdit(final IChangeRecord record){  final Action action;  if (record.getChangeAction() == ChangeAction.INSERTED) {    action=Action.Add;  } else   if (record.getChangeAction() == ChangeAction.REMOVED) {    action=Action.Remove;  } else {    return null;  }  final BigdataGraphAtom atom=super.toGraphAtom(record.getStatement());  return new BigdataGraphEdit(action,atom);}  }
class C{  public Boolean isResourcePoolSchedulerAllowed(){  return resourcePoolSchedulerAllowed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.188 -0500",hash_original_method="153B7EAD25B0FBAAC892ABA7B6CC50EA",hash_generated_method="07305E55971D5721CD811119E18E7393") public static String longToString(long l){  String str=new String();  str.addTaint(l);  return str;}  }
class C{  private Instance updateDecisionList(Random random,Instance example) throws Exception {  ArrayList<Test> TestList;  Instances format=getDatasetFormat();  if (format == null) {    throw new Exception("Dataset format not defined.");  }  TestList=generateTestList(random,example);  int maxSize=getMaxRuleSize() < TestList.size() ? getMaxRuleSize() : TestList.size();  int ruleSize=((int)(random.nextDouble() * (maxSize - getMinRuleSize()))) + getMinRuleSize();  RuleList newRule=new RuleList();  for (int i=0; i < ruleSize; i++) {    int testIndex=(int)(random.nextDouble() * TestList.size());    Test test=TestList.get(testIndex);    newRule.addTest(test);    TestList.remove(testIndex);  }  double newClassValue=0.0;  if (m_DecisionList.size() > 0) {    RuleList r=(m_DecisionList.get(m_DecisionList.size() - 1));    double oldClassValue=(r.getClassValue());    newClassValue=(double)((int)oldClassValue + 1) % getNumClasses();  }  newRule.setClassValue(newClassValue);  m_DecisionList.add(newRule);  example=(Instance)example.copy();  example.setDataset(format);  example.setClassValue(newClassValue);  return example;}  }
class C{  public void updateDbScore(Text url,CrawlDatum old,CrawlDatum datum,List<CrawlDatum> inlinked) throws ScoringFilterException {  for (int i=0; i < this.filters.length; i++) {    this.filters[i].updateDbScore(url,old,datum,inlinked);  }}  }
class C{  public static void tagView(final JFrame parent,final INaviView view,final CTag tag){  try {    view.getConfiguration().tagView(tag);  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00149: " + "Could not tag view";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be tagged.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view remains untagged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  @Override public boolean containsKey(final Object key){  purgeBeforeRead();  final Entry<K,V> entry=getEntry(key);  if (entry == null) {    return false;  }  return entry.getValue() != null;}  }
class C{  @Override public void dispose(){  if (!grid.isDisposed()) {    grid.removeListener(SWT.Resize,resizeListener);    if (grid.getVerticalScrollBarProxy() != null)     grid.getVerticalScrollBarProxy().removeSelectionListener(scrollListener);    if (grid.getHorizontalScrollBarProxy() != null)     grid.getHorizontalScrollBarProxy().removeSelectionListener(scrollListener);  }  columnListener=null;  resizeListener=null;  grid=null;  row=-1;  column=-1;  super.dispose();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void textColors(int textColor,int hintColor){  this.editText.setTextColor(context.getResources().getColor(textColor));  this.editText.setHintTextColor(context.getResources().getColor(hintColor));}  }
class C{  public static Seconds standardSecondsIn(ReadablePeriod period){  int amount=BaseSingleFieldPeriod.standardPeriodIn(period,DateTimeConstants.MILLIS_PER_SECOND);  return Seconds.seconds(amount);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public StdXMLBuilder(){  this(new XMLElement());}  }
class C{  public void resetChoosableFileFilters(){  FileFilter[] oldValue=getChoosableFileFilters();  setFileFilter(null);  filters.removeAllElements();  if (isAcceptAllFileFilterUsed()) {    addChoosableFileFilter(getAcceptAllFileFilter());  }  firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY,oldValue,getChoosableFileFilters());}  }
class C{  private void showHideNavigationPaneTextBinding(){  ReadOnlyBooleanProperty showingNavigationPaneProperty=rootController.showNavigationPaneProperty();  showHideNavigationPaneMenuItem.textProperty().bind(Bindings.createStringBinding(null,showingNavigationPaneProperty));}  }
class C{  private Map<URI,StorageSystem> buildArrayMap(StorageSystem vplexSystem,List<VolumeDescriptor> descriptors,VolumeDescriptor.Type[] types){  Map<URI,StorageSystem> arrayMap=new HashMap<URI,StorageSystem>();  if (types != null) {    descriptors=VolumeDescriptor.filterByType(descriptors,types,new VolumeDescriptor.Type[]{});  }  for (  VolumeDescriptor desc : descriptors) {    if (arrayMap.containsKey(desc.getDeviceURI()) == false) {      if (vplexSystem == null) {        StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient);        arrayMap.put(desc.getDeviceURI(),array);      } else {        Set<URI> connectedSystems=ConnectivityUtil.getStorageSystemAssociationsByNetwork(_dbClient,vplexSystem.getId(),StoragePort.PortType.backend);        if (connectedSystems.contains(desc.getDeviceURI())) {          StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient);          arrayMap.put(desc.getDeviceURI(),array);        }      }    }  }  return arrayMap;}  }
class C{  private static Reader internalGetContentReader(IMember member) throws JavaModelException {  IBuffer buf=member.getOpenable().getBuffer();  if (buf == null) {    return null;  }  ISourceRange javadocRange=member.getJavadocRange();  if (javadocRange != null) {    JavaDocCommentReader reader=new JavaDocCommentReader(buf,javadocRange.getOffset(),javadocRange.getOffset() + javadocRange.getLength() - 1);    if (!containsOnlyInheritDoc(reader,javadocRange.getLength())) {      reader.reset();      return reader;    }  }  return null;}  }
class C{  @RequestProcessing(value="/users/names",method=HTTPRequestMethod.GET) public void listNames(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  if (null == Sessions.currentUser(request)) {    response.setStatus(HttpServletResponse.SC_FORBIDDEN);    return;  }  context.renderJSON().renderTrueResult();  final String namePrefix=request.getParameter("name");  if (StringUtils.isBlank(namePrefix)) {    final List<JSONObject> admins=userQueryService.getAdmins();    final List<JSONObject> userNames=new ArrayList<JSONObject>();    for (    final JSONObject admin : admins) {      final JSONObject userName=new JSONObject();      userName.put(User.USER_NAME,admin.optString(User.USER_NAME));      userName.put(UserExt.USER_REAL_NAME,admin.optString(UserExt.USER_REAL_NAME));      String avatar=admin.optString(UserExt.USER_AVATAR_URL);      if (StringUtils.isBlank(avatar)) {        avatar=AvatarQueryService.DEFAULT_AVATAR_URL;      }      userName.put(UserExt.USER_AVATAR_URL,avatar);      userNames.add(userName);    }    context.renderJSONValue(Common.USER_NAMES,userNames);    return;  }  final List<JSONObject> userNames=userQueryService.getUserNamesByPrefix(namePrefix);  context.renderJSONValue(Common.USER_NAMES,userNames);}  }
class C{  public ClientConfig withPort(int port){  setPort(port);  return this;}  }
class C{  public static double RRSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  private boolean remove(Object o,Object[] snapshot,int index){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] current=getArray();    int len=current.length;    if (snapshot != current)     findIndex: {      int prefix=Math.min(index,len);      for (int i=0; i < prefix; i++) {        if (current[i] != snapshot[i] && eq(o,current[i])) {          index=i;          break findIndex;        }      }      if (index >= len)       return false;      if (current[index] == o)       break findIndex;      index=indexOf(o,current,index,len);      if (index < 0)       return false;    }    Object[] newElements=new Object[len - 1];    System.arraycopy(current,0,newElements,0,index);    System.arraycopy(current,index + 1,newElements,index,len - index - 1);    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public void onProviderDisabled(String provider){  if (doDebugLogging()) {    mTrackerData.writeEntry(provider,"provider disabled");  }}  }
class C{  public AbstractXNetSerialConnectionConfig(){  super();}  }
class C{  @Deprecated public void createSharedNotebook(SharedNotebook sharedNotebook,OnClientCallback<SharedNotebook> callback){  AsyncReflector.execute(mClient,callback,"createSharedNotebook",mAuthenticationToken,sharedNotebook);}  }
class C{  public CUsurfref(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.965 -0500",hash_original_method="CB574EAE8A001C113E60067C9D40C52E",hash_generated_method="B6378334FA72666F89F67E54A013164D") private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public void addPhoneNumber(PhoneType type,String number,String description){  final NgnPhoneNumber phoneNumber=new NgnPhoneNumber(type,number,description);  if (type == PhoneType.MOBILE) {    mPhoneNumbers.add(0,phoneNumber);  } else {    mPhoneNumbers.add(phoneNumber);  }}  }
class C{  public boolean fullScroll(int direction){  boolean right=direction == View.FOCUS_RIGHT;  int width=getWidth();  mTempRect.left=0;  mTempRect.right=width;  if (right) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(0);      mTempRect.right=view.getRight();      mTempRect.left=mTempRect.right - width;    }  }  return scrollAndFocus(direction,mTempRect.left,mTempRect.right);}  }
class C{  public BufferedWriter(Writer out,int sz){  super(out);  if (sz <= 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.out=out;  cb=new char[sz];  nChars=sz;  nextChar=0;  lineSeparator=java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator"));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (variadic: ");  result.append(variadic);  result.append(')');  return result.toString();}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static Collection<String> parseMechanisms(XmlPullParser parser) throws Exception {  List<String> mechanisms=new ArrayList<String>();  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      String elementName=parser.getName();      if (elementName.equals("mechanism")) {        mechanisms.add(parser.nextText());      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("mechanisms")) {        done=true;      }    }  }  return mechanisms;}  }
class C{  public static void writeByteArray(DataOutput out,@Nullable byte[] arr,int maxLen) throws IOException {  if (arr == null)   out.writeInt(-1); else {    int len=Math.min(arr.length,maxLen);    out.writeInt(len);    out.write(arr,0,len);  }}  }
class C{  public void sendMessage(ProcessInQueueModel message) throws UnsupportedOperationException, AmazonClientException {  Gson gson=new GsonBuilder().setDateFormat(Constants.DATE_FORMAT).create();  super.sendMessage(queueName,gson.toJson(message));}  }
class C{  @Ignore public static CharArray instance(char[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public WebSocket removeListener(WebSocketListener listener){  mListenerManager.removeListener(listener);  return this;}  }
class C{  @Override public boolean hasFocus(){  return mHijackFocus || super.hasFocus();}  }
class C{  public static byte[] read(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  int read=0;  byte[] buff=new byte[1024];  while ((read=in.read(buff)) > 0) {    out.write(buff,0,read);  }  in.close();  out.flush();  out.close();  return out.toByteArray();}  }
class C{  public void testSubscribe6(){  SubmissionPublisher<Integer> p=basicPublisher();  try {    p.subscribe(null);    shouldThrow();  } catch (  NullPointerException success) {  }  checkInitialState(p);}  }
class C{  public static String format(final long millis,final String pattern,final Locale locale){  return format(new Date(millis),pattern,null,locale);}  }
class C{  private int assignToNearestCluster(Relation<V> relation,double[][] means,double[][] sums,List<ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[] sep,double[][] cdist,WritableDoubleDataStore upper,WritableDataStore<double[]> lower){  assert (k == means.length);  final NumberVectorDistanceFunction<? super V> df=getDistanceFunction();  final boolean issquared=(df instanceof SquaredEuclideanDistanceFunction);  int changed=0;  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    final int orig=assignment.intValue(it);    double u=upper.doubleValue(it);    if (u <= sep[orig]) {      continue;    }    boolean recompute_u=true;    V fv=relation.get(it);    double[] l=lower.get(it);    int cur=orig;    for (int j=0; j < k; j++) {      if (orig == j || u <= l[j] || u <= cdist[cur][j]) {        continue;      }      if (recompute_u) {        u=df.distance(fv,DoubleVector.wrap(means[cur]));        u=issquared ? Math.sqrt(u) : u;        upper.putDouble(it,u);        recompute_u=false;        if (u <= l[j] || u <= cdist[cur][j]) {          continue;        }      }      double dist=df.distance(fv,DoubleVector.wrap(means[j]));      dist=issquared ? Math.sqrt(dist) : dist;      l[j]=dist;      if (dist < u) {        cur=j;        u=dist;      }    }    if (cur != orig) {      upper.putDouble(it,u);      ModifiableDBIDs newc=clusters.get(cur);      newc.add(it);      assignment.putInt(it,cur);      double[] newmean=sums[cur];      ModifiableDBIDs oldc=clusters.get(orig);      oldc.remove(it);      double[] oldmean=sums[orig];      for (int d=0; d < fv.getDimensionality(); d++) {        final double v=fv.doubleValue(d);        newmean[d]+=v;        oldmean[d]-=v;      }      ++changed;    }  }  return changed;}  }
class C{  private void preTransform(float[] matrix){  float[] tmp=new float[9];  multiply(tmp,matrix,mValues);  mValues=tmp;}  }
class C{  private void countLocalStoresLoadsAndIncrements(int[] localStoreCount,int[] localLoadCount,int[] localIncrementCount,CFG cfg){  for (Iterator<Location> i=cfg.locationIterator(); i.hasNext(); ) {    Location location=i.next();    if (location.getBasicBlock().isExceptionHandler()) {      continue;    }    boolean isStore=isStore(location);    boolean isLoad=isLoad(location);    if (!isStore && !isLoad) {      continue;    }    IndexedInstruction ins=(IndexedInstruction)location.getHandle().getInstruction();    int local=ins.getIndex();    if (ins instanceof IINC) {      localStoreCount[local]++;      localLoadCount[local]++;      localIncrementCount[local]++;    } else     if (isStore) {      localStoreCount[local]++;    } else {      localLoadCount[local]++;    }  }}  }
class C{  public static String createString(TreeFeatureVector features) throws CleartkProcessingException {  StringBuffer output=new StringBuffer();  for (  TreeFeature tree : features.getTrees().values()) {    String featString=TreeKernelSvmModel.treeFeatureToString(tree);    output.append(String.format(Locale.US," |BT| %s",featString));  }  if (!features.getTrees().isEmpty()) {    output.append(" |ET|");  }  for (  FeatureVector.Entry entry : features.getFeatures()) {    if (Double.isInfinite(entry.value) || Double.isNaN(entry.value))     throw CleartkEncoderException.invalidFeatureVectorValue(entry.index,entry.value);    output.append(String.format(Locale.US," %d:%.7f",entry.index,entry.value));  }  return output.toString();}  }
class C{  public boolean equals(String nick){  return nick.toLowerCase().equals(_lowerNick);}  }
class C{  private void writeStructure() throws Exception {  StringBuffer query=new StringBuffer();  Instances structure=getInstances();  query.append("CREATE TABLE ");  m_resolvedTableName=m_env.substitute(m_tableName);  if (m_tabName || m_resolvedTableName.equals("")) {    m_resolvedTableName=m_DataBaseConnection.maskKeyword(structure.relationName());  }  if (m_DataBaseConnection.getUpperCase()) {    m_resolvedTableName=m_resolvedTableName.toUpperCase();    m_createInt=m_createInt.toUpperCase();    m_createDouble=m_createDouble.toUpperCase();    m_createText=m_createText.toUpperCase();    m_createDate=m_createDate.toUpperCase();  }  m_resolvedTableName=m_resolvedTableName.replaceAll("[^\\w]","_");  m_resolvedTableName=m_DataBaseConnection.maskKeyword(m_resolvedTableName);  query.append(m_resolvedTableName);  if (structure.numAttributes() == 0) {    throw new Exception("Instances have no attribute.");  }  query.append(" ( ");  if (m_DataBaseConnection.tableExists(m_resolvedTableName)) {    if (!m_truncate) {      System.err.println("[DatabaseSaver] Table '" + m_resolvedTableName + "' already exists - will append data...");      if (getRetrieval() == INCREMENTAL && m_id) {        String countS="SELECT COUNT(*) FROM " + m_resolvedTableName;        m_DataBaseConnection.execute(countS);        ResultSet countRS=m_DataBaseConnection.getResultSet();        countRS.next();        m_count=countRS.getInt(1);        countRS.close();        m_count++;      }      return;    }    String trunc="DROP TABLE " + m_resolvedTableName;    m_DataBaseConnection.execute(trunc);  }  if (m_id) {    if (m_DataBaseConnection.getUpperCase()) {      m_idColumn=m_idColumn.toUpperCase();    }    query.append(m_DataBaseConnection.maskKeyword(m_idColumn));    query.append(" ");    query.append(m_createInt);    query.append(" PRIMARY KEY,");  }  for (int i=0; i < structure.numAttributes(); i++) {    Attribute att=structure.attribute(i);    String attName=att.name();    attName=attName.replaceAll("[^\\w]","_");    attName=m_DataBaseConnection.maskKeyword(attName);    if (m_DataBaseConnection.getUpperCase()) {      query.append(attName.toUpperCase());    } else {      query.append(attName);    }    if (att.isDate()) {      query.append(" " + m_createDate);    } else {      if (att.isNumeric()) {        query.append(" " + m_createDouble);      } else {        query.append(" " + m_createText);      }    }    if (i != structure.numAttributes() - 1) {      query.append(", ");    }  }  query.append(" )");  m_DataBaseConnection.update(query.toString());  m_DataBaseConnection.close();  if (!m_DataBaseConnection.tableExists(m_resolvedTableName)) {    throw new IOException("Table cannot be built.");  }}  }
class C{  public String path(){  if (path == null) {    if (!hasPath) {      return path="";    }    int pathEndPos=uri.indexOf('?');    if (pathEndPos < 0) {      path=uri;    } else {      return path=uri.substring(0,pathEndPos);    }  }  return path;}  }
class C{  public double distanceNM(Geo v2){  return nm(distance(v2));}  }
class C{  private void initiliazePaint(){  paint=new Paint();  paint.setColor(Color.WHITE);  paint.setStyle(Paint.Style.FILL_AND_STROKE);  paint.setAntiAlias(true);}  }
class C{  public static Throwable extractRootCause(Throwable t){  Throwable result=t;  while (result.getCause() != null) {    result=result.getCause();  }  return result;}  }
class C{  public IgniteTcpCommunicationRecoveryAckClosureSelfTest(){  super(false);}  }
class C{  public double[] sample_x(double z_[]){  double p_x[]=prob_x(z_);  return MatrixUtils.sample(p_x,m_R);}  }
class C{  private Supplier<Pair<Integer,JsonNode>> processActions(PatchRequestScope requestScope){  try {    List<Supplier<Pair<Integer,JsonNode>>> results=handleActions(requestScope);    postProcessRelationships(requestScope);    results.forEach(null);    return null;  } catch (  HttpStatusException e) {    throwErrorResponse(e,requestScope.getPermissionExecutor().isVerbose());    return null;  }}  }
class C{  public void printProject(){  Chart chart=getUIFacade().getActiveChart();  if (chart == null) {    getUIFacade().showErrorDialog("Failed to find active chart.\nPlease report this problem to GanttProject development team");    return;  }  try {    PrintManager.printChart(chart,options.getExportSettings());  } catch (  OutOfMemoryError e) {    getUIFacade().showErrorDialog(GanttLanguage.getInstance().getText("printing.out_of_memory"));  }}  }
class C{  private synchronized void block() throws IOException {  int n=selector.select();  selector.selectedKeys().clear();  available();}  }
class C{  public void testBizarreCaseError(){  LineSweep dba=new LineSweep();  ILineSegment[] segments=new ILineSegment[]{new TwoDLineSegment(659.0,3364.0,659.0,3364.0),new TwoDLineSegment(659.0,2202.0,660.0,2202.0),new TwoDLineSegment(1225.0,1020.0,1226.0,1019.0)};  Hashtable<IPoint,List<ILineSegment>> res=dba.intersections(segments);  dba.output(res);  assertEquals(2,res.size());}  }
class C{  public void waitResponse(SipTransactionContext ctx){  ctx.waitResponse(SipManager.sTimeout);}  }
class C{  public Style(int fgColor,int bgColor,Font f,byte transparency){  this(fgColor,bgColor,f,transparency,null,BACKGROUND_IMAGE_SCALED);}  }
class C{  public void restoreDefaults(Font baseFont){  Color comment=new Color(0,128,0);  Color docComment=new Color(164,0,0);  Color keyword=Color.BLUE;  Color function=new Color(173,128,0);  Color literalNumber=new Color(100,0,200);  Color literalString=new Color(220,0,156);  Color error=new Color(148,148,0);  if (baseFont == null) {    baseFont=RSyntaxTextArea.getDefaultFont();  }  StyleContext sc=StyleContext.getDefaultStyleContext();  Font boldFont=sc.getFont(baseFont.getFamily(),Font.BOLD,baseFont.getSize());  Font italicFont=sc.getFont(baseFont.getFamily(),Font.ITALIC,baseFont.getSize());  Font commentFont=italicFont;  Font keywordFont=boldFont;  styles[Token.COMMENT_EOL]=new Style(comment,null,commentFont);  styles[Token.COMMENT_MULTILINE]=new Style(comment,null,commentFont);  styles[Token.COMMENT_DOCUMENTATION]=new Style(docComment,null,commentFont);  styles[Token.RESERVED_WORD]=new Style(keyword,null,keywordFont);  styles[Token.FUNCTION]=new Style(function,null);  styles[Token.LITERAL_BOOLEAN]=new Style(literalNumber,null);  styles[Token.LITERAL_NUMBER_DECIMAL_INT]=new Style(literalNumber,null);  styles[Token.LITERAL_NUMBER_FLOAT]=new Style(literalNumber,null);  styles[Token.LITERAL_NUMBER_HEXADECIMAL]=new Style(literalNumber,null);  styles[Token.LITERAL_STRING_DOUBLE_QUOTE]=new Style(literalString,null);  styles[Token.LITERAL_CHAR]=new Style(literalString,null);  styles[Token.LITERAL_BACKQUOTE]=new Style(literalString,null);  styles[Token.DATA_TYPE]=new Style(new Color(0,128,128),null);  styles[Token.VARIABLE]=new Style(new Color(255,153,0),null);  styles[Token.IDENTIFIER]=new Style(null,null);  styles[Token.WHITESPACE]=new Style(Color.gray,null);  styles[Token.SEPARATOR]=new Style(Color.RED,null);  styles[Token.OPERATOR]=new Style(new Color(128,64,64),null);  styles[Token.PREPROCESSOR]=new Style(new Color(128,128,128),null);  styles[Token.MARKUP_TAG_DELIMITER]=new Style(Color.RED,null);  styles[Token.MARKUP_TAG_NAME]=new Style(Color.BLUE,null);  styles[Token.MARKUP_TAG_ATTRIBUTE]=new Style(new Color(63,127,127),null);  styles[Token.ERROR_IDENTIFIER]=new Style(error,null);  styles[Token.ERROR_NUMBER_FORMAT]=new Style(error,null);  styles[Token.ERROR_STRING_DOUBLE]=new Style(error,null);  styles[Token.ERROR_CHAR]=new Style(error,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final synchronized boolean isConnected(){  return _inputThread != null && _inputThread.isConnected();}  }
class C{  public void testAlgorithmParameterGenerator03() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  String provider=null;  for (int i=0; i < algs.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      AlgorithmParameterGenerator.getInstance(algs[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public DefaultStateContext(Stage stage,Message<E> message,MessageHeaders messageHeaders,ExtendedState extendedState,Transition<S,E> transition,StateMachine<S,E> stateMachine,State<S,E> source,State<S,E> target,Collection<State<S,E>> sources,Collection<State<S,E>> targets,Exception exception){  this.stage=stage;  this.message=message;  this.messageHeaders=messageHeaders;  this.extendedState=extendedState;  this.transition=transition;  this.stateMachine=stateMachine;  this.source=source;  this.target=target;  this.sources=sources;  this.targets=targets;  this.exception=exception;}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1) private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    if (Utils.hasGingerbreadMR1()) {      decodeOptions.inPreferQualityOverSpeed=PREFER_QUALITY_OVER_SPEED;    }    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    left.visit(v);    right.visit(v);  }}  }
class C{  public static void addSearchAlgorithm(String name,SearchForActions algo){  SEARCH_NAMES.add(name);  SEARCH_ALGOS.add(algo);}  }
class C{  public static World createInstance(String name,Landmarks landmarks,Tools tools,LineSets lineSets,Lighting lighting,long timeUTC){  INSTANCE=new World(name,landmarks,tools,lineSets,lighting,timeUTC);  return (INSTANCE);}  }
class C{  public void die(){synchronized (mSleepSync) {    mDie=true;    mSleepSync.notifyAll();  }}  }
class C{  public String treatMissingValuesAsZeroTipText(){  return "Treat missing values in the same way as zeros.";}  }
class C{  @RequestMapping(value="/interests",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional public ResponseEntity<Void> update(@Valid @RequestBody Interest interest) throws URISyntaxException {  log.debug("REST request to update Interest : {}",interest);  if (interest.getId() == null) {    return ResponseEntity.badRequest().header("Failure","An updated interest must already have an ID").build();  }  ownerService.checkOldOwner(interestRepository,interest.getId());  ownerService.checkNewOwner(interest);  interest=interestRepository.save(interest);  return ResponseEntity.ok().build();}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public void finest(CharSequence message,Throwable e){  log(Level.FINEST,message,e);}  }
class C{  private void ensureCapacityHelper(int minCapacity){  int oldCapacity=elementData.length;  if (minCapacity > oldCapacity) {    Object[] oldData=elementData;    int newCapacity=(capacityIncrement > 0) ? (oldCapacity + capacityIncrement) : (oldCapacity * 2);    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    elementData=new Object[newCapacity];    System.arraycopy(oldData,0,elementData,0,elementCount);  }}  }
class C{  public boolean isValid(){  if (longs == null) {    throw new IllegalStateException("longs is null");  }  if (length < 0) {    throw new IllegalStateException("length is negative: " + length);  }  if (length > longs.length) {    throw new IllegalStateException("length is out of bounds: " + length + ",longs.length="+ longs.length);  }  if (offset < 0) {    throw new IllegalStateException("offset is negative: " + offset);  }  if (offset > longs.length) {    throw new IllegalStateException("offset out of bounds: " + offset + ",longs.length="+ longs.length);  }  if (offset + length < 0) {    throw new IllegalStateException("offset+length is negative: offset=" + offset + ",length="+ length);  }  if (offset + length > longs.length) {    throw new IllegalStateException("offset+length out of bounds: offset=" + offset + ",length="+ length+ ",longs.length="+ longs.length);  }  return true;}  }
class C{  public static RecordEventForInstance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForInstance object=new RecordEventForInstance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"recordEventForInstance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (RecordEventForInstance)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","technicalServiceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setTechnicalServiceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","event").equals(reader.getName())) {      object.setEvent(VoGatheredEvent.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public GSquareTest.Result calcGSquare(int[] testIndices){  getCellTable().addToTable(getDataSet(),testIndices);  int[] firstVar=new int[]{0};  int[] secondVar=new int[]{1};  int[] bothVars=new int[]{0,1};  double g2=0.0;  int df=0;  int[] condDims=new int[testIndices.length - 2];  System.arraycopy(selectFromArray(getDims(),testIndices),2,condDims,0,condDims.length);  int[] coords=new int[testIndices.length];  int numRows=this.getCellTable().getNumValues(0);  int numCols=this.getCellTable().getNumValues(1);  boolean[] attestedRows=new boolean[numRows];  boolean[] attestedCols=new boolean[numCols];  CombinationIterator combinationIterator=new CombinationIterator(condDims);  while (combinationIterator.hasNext()) {    int[] combination=(int[])combinationIterator.next();    System.arraycopy(combination,0,coords,2,combination.length);    Arrays.fill(attestedRows,true);    Arrays.fill(attestedCols,true);    long total=this.getCellTable().calcMargin(coords,bothVars);    if (total == 0) {      continue;    }    for (int i=0; i < numRows; i++) {      for (int j=0; j < numCols; j++) {        coords[0]=i;        coords[1]=j;        long sumRow=this.getCellTable().calcMargin(coords,secondVar);        long sumCol=this.getCellTable().calcMargin(coords,firstVar);        long observed=(int)this.getCellTable().getValue(coords);        boolean skip=false;        if (sumRow == 0) {          attestedRows[i]=false;          skip=true;        }        if (sumCol == 0) {          attestedCols[j]=false;          skip=true;        }        if (skip) {          continue;        }        double expected=(double)(sumCol * sumRow) / (double)total;        if (observed != 0) {          g2+=2.0 * observed * Math.log(observed / expected);        }      }    }    int numAttestedRows=0;    int numAttestedCols=0;    for (    boolean attestedRow : attestedRows) {      if (attestedRow) {        numAttestedRows++;      }    }    for (    boolean attestedCol : attestedCols) {      if (attestedCol) {        numAttestedCols++;      }    }    df+=(numAttestedRows - 1) * (numAttestedCols - 1);  }  if (df == 0) {    df=1;  }  double pValue=1.0 - ProbUtils.chisqCdf(g2,df);  boolean indep=(pValue > getAlpha());  return new GSquareTest.Result(g2,pValue,df,indep);}  }
class C{  public static boolean elementIsInEncryptionSpace(Element element,String localName){  if (element == null) {    return false;  }  return EncryptionConstants.EncryptionSpecNS.equals(element.getNamespaceURI()) && element.getLocalName().equals(localName);}  }
class C{  protected void parse(){  if (parsed)   return;  VirtualFile swcFile=swc.getArchive().getFile(path);  if (swcFile == null) {    throw new SwcException.CatalogNotFound();  }  Movie movie=new Movie();  MovieDecoder movieDecoder=new MovieDecoder(movie);  InputStream inputStream=null;  try {    inputStream=swcFile.getInputStream();    TagDecoder tagDecoder=new TagDecoder(inputStream);    tagDecoder.parse(movieDecoder);  } catch (  IOException e) {  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException ioException) {      }    }    swcFile.close();  }  int c1=0;  def2symbol=new HashMap<String,DefineTag>();  for (Iterator frames=movie.frames.iterator(); frames.hasNext(); ) {    Frame frame=(Frame)frames.next();    for (Iterator abcit=frame.doABCs.iterator(); abcit.hasNext(); ) {      DoABC doABC=(DoABC)abcit.next();      SwcScript script=getScript(doABC);      script.setABC(doABC.abc);    }    for (Iterator it=frame.symbolClass.class2tag.entrySet().iterator(); it.hasNext(); ) {      Map.Entry e=(Map.Entry)it.next();      String className=(String)e.getKey();      DefineTag tag=(DefineTag)e.getValue();      def2symbol.put(className,tag);    }    if (Swc.FNORD) {      if (frame.label != null) {        try {          c1=Integer.parseInt(frame.label.label);        } catch (        Exception e) {        }        ;      }      int c2=SimpleMovie.getCodeHash(frame);      if (c1 != c2) {        location=" " + swc.getLocation();      }    }  }  parsed=true;}  }
class C{  private static String postprocessForHTML(String contents,Map<String,Attachment> relatedAttachments){  return new HtmlCompressor().compress(replaceCidWithAttachments(contents,relatedAttachments));}  }
class C{  static public boolean isInnerCause(Throwable t,Class cls){  return getInnerCause(t,cls) != null;}  }
class C{  @Override protected LR0State createStartState(){  return new LR0State(ArrayTools.toHashSet(new LR0Item(grammar.getStartProduction(),0)));}  }
class C{  public DefaultEntityViewInfo createTrackInfo(UColor color){  return new DefaultEntityViewInfo(1e-9f,0,0,color,createCircle(12,color,GRAY_TRANS),true,color,2f,true,null,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix01.class,args);}  }
class C{  public static String collapseSpaces(String argStr){  char last=argStr.charAt(0);  StringBuffer argBuf=new StringBuffer();  for (int cIdx=0; cIdx < argStr.length(); cIdx++) {    char ch=argStr.charAt(cIdx);    if (ch != ' ' || last != ' ') {      argBuf.append(ch);      last=ch;    }  }  return argBuf.toString();}  }
class C{  private void updateTraceInfo(GCTrace gcTrace){  String str;  if (gcTrace != null) {    str=gcTrace.getInfoString();  } else {    str="";  }  traceInfoTextArea.setText(str);}  }
class C{  private void writeData(CachedRowSet row) throws SQLException {  crw.updateResolvedConflictToDB(row,crw.getReader().connect((RowSetInternal)crsSync));}  }
class C{  private void checkIfProductIsUptodate(Product prod,VOService voProd) throws ServiceChangedException {  if (prod.getStatus() != ServiceStatus.ACTIVE) {    throw new ServiceChangedException(ServiceChangedException.Reason.SERVICE_INACCESSIBLE);  }  if (prod.getVersion() != voProd.getVersion()) {    throw new ServiceChangedException(ServiceChangedException.Reason.SERVICE_MODIFIED);  }  ParameterSet parameterSet=prod.getParameterSet();  if (parameterSet != null) {    List<Parameter> parameters=parameterSet.getParameters();    for (    Parameter doParameter : parameters) {      for (      VOParameter param : voProd.getParameters()) {        if (param.getKey() == doParameter.getKey() && param.getVersion() != doParameter.getVersion()) {          throw new ServiceChangedException(ServiceChangedException.Reason.SERVICE_MODIFIED);        }      }    }  }}  }
class C{  @Override public void close() throws SQLException {  try {    debugCodeCall("close");synchronized (session) {      closeOldResultSet();      if (conn != null) {        conn=null;      }    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean containsSessionParticipantUrl(String sessionParticipantUrl){  Validate.notNull(sessionParticipantUrl);  return this.participantsByUrl.containsKey(sessionParticipantUrl);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void printAllCusters(FlagConfig flagConfig,ObjectVector[] resultsVectors,ClusterResults.Clusters clusters){  for (int i=0; i < flagConfig.numclusters(); ++i) {    System.out.println("Cluster " + i);    for (int j=0; j < clusters.clusterMappings.length; ++j) {      if (clusters.clusterMappings[j] == i) {        System.out.print(resultsVectors[j].getObject() + "\t");      }    }    System.out.println("\n*********\n");  }}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public static boolean isSuperscript(AttributeSet a){  Boolean superscript=(Boolean)a.getAttribute(Superscript);  if (superscript != null) {    return superscript.booleanValue();  }  return false;}  }
class C{  public static PeriodRange create(Date dateInFirstPeriod,Date dateInLastPeriod) throws AdeException {  final Date firstPeriodStart=PeriodUtils.getContainingPeriodStart(dateInFirstPeriod);  final Date lastPeriodStart=PeriodUtils.getContainingPeriodStart(dateInLastPeriod);  return new PeriodRange(firstPeriodStart,lastPeriodStart);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasMaxRows(){  return (m_MaxRows > 0);}  }
class C{  @SuppressWarnings("MissingPermission") private String showAccountPickerDialog(String accountType,boolean canAddAccount) throws ChooseOwnerCanceledException {  if (Looper.myLooper() == Looper.getMainLooper()) {    throw new RuntimeException("Method was called from the wrong thread!");  }  Account[] accounts=AccountManager.get(contextManager.getContext()).getAccountsByType(accountType);  if (accounts.length == 0)   return null;  String[] accountList=new String[canAddAccount ? accounts.length + 1 : accounts.length];  for (int i=0; i < accounts.length; i++) {    accountList[i]=accounts[i].name;  }  if (canAddAccount) {    accountList[accounts.length]=contextManager.getContext().getString(R.string.add_account_button_label);  }  ReentrantLock lock=new ReentrantLock();  Condition condition=lock.newCondition();  Activity activity=contextManager.getActivity();  ShowAccountChooser showDialog=new ShowAccountChooser(contextManager,accountList,lock,condition);  if (activity != null) {    activity.runOnUiThread(showDialog);    lock.lock();    try {      condition.await();    } catch (    InterruptedException e) {    } finally {      lock.unlock();    }  }  if (showDialog.canceled) {    throw new ChooseOwnerCanceledException("User canceled authentication!");  }  return showDialog.selectedOption;}  }
class C{  public Alarm(AlarmListener listener,long delta){  this(listener);  runAfter(delta);}  }
class C{  public void paintComboBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void map(MethodRef method,String sql,Object[] args){  QueryBuilderKraken builder=QueryParserKraken.parse(this,sql);  if (builder.isTableLoaded()) {    QueryKraken query=builder.build();    query.map(method,args);  } else {    String tableName=builder.getTableName();    _tableService.loadTable(tableName,Result.of(null));  }}  }
class C{  private boolean equal(int[] array1,int[] array2){  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public synchronized boolean clear(){  if (isLoading()) {    return false;  }  loader=new Thread(null);  loader.start();  return true;}  }
class C{  protected ForeignKey findCorrespondingForeignKey(Table table,ForeignKey fk){  boolean caseMatters=delimitedIdentifierModeOn;  boolean checkFkName=(fk.getName() != null) && (fk.getName().length() > 0);  Reference[] refs=fk.getReferences();  ArrayList<Reference> curRefs=new ArrayList<Reference>();  for (int fkIdx=0; fkIdx < table.getForeignKeyCount(); fkIdx++) {    ForeignKey curFk=table.getForeignKey(fkIdx);    boolean checkCurFkName=checkFkName && (curFk.getName() != null) && (curFk.getName().length() > 0);    if ((!checkCurFkName || areEqual(fk.getName(),curFk.getName(),caseMatters)) && areEqual(fk.getForeignTableName(),curFk.getForeignTableName(),caseMatters)) {      curRefs.clear();      CollectionUtils.addAll(curRefs,curFk.getReferences());      if (curRefs.size() == refs.length) {        for (int refIdx=0; refIdx < refs.length; refIdx++) {          boolean found=false;          for (int curRefIdx=0; !found && (curRefIdx < curRefs.size()); curRefIdx++) {            Reference curRef=curRefs.get(curRefIdx);            if ((caseMatters && refs[refIdx].equals(curRef)) || (!caseMatters && refs[refIdx].equalsIgnoreCase(curRef))) {              curRefs.remove(curRefIdx);              found=true;            }          }        }        if (curRefs.isEmpty()) {          return curFk;        }      }    }  }  return null;}  }
class C{  public static void write(float latPoint,float lonPoint,int w,int h,float s,float e,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkArc.write(latPoint,lonPoint,0,0,w,h,s,e,properties,dos);}  }
class C{  @Override public synchronized void addInstanceListener(InstanceListener dsl){  m_listeners.add(dsl);}  }
class C{  public static void removeDatabase(final JFrame parent,final IDatabase database,final ITreeUpdater updater){  if (CMessageBox.showYesNoQuestion(parent,String.format("Do you really want to remove the database configuration '%s' from BinNavi?",database.getConfiguration().getDescription())) == JOptionPane.YES_OPTION) {    CDatabaseManager.instance().removeDatabase(database);    updater.update();    ConfigManager.instance().saveSettings(parent);  }}  }
class C{  @Override public boolean handleDoubleClick(){  final IEditorInput editorInput=new FileEditorInput(file);  final IEditorDescriptor desc=PlatformUI.getWorkbench().getEditorRegistry().getDefaultEditor(file.getName());  if (desc == null) {    return false;  }  final IWorkbenchPage page=WorkbenchHelper.getPage();  try {    page.openEditor(editorInput,desc.getId());  } catch (  final PartInitException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public boolean hasRespondedToLibraryVersionQuery(){  return isLibraryVersionQueried;}  }
class C{  public boolean isInTransit(){  Object oo=get_Value(COLUMNNAME_IsInTransit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AbstractDelegatingRepositoryImplConfig(String type){  super(type);}  }
class C{  public void scanForPeripherals(){  Timber.d("scanForPeripherals");  clearPeripherals();  mIsScanning=true;  mBLEAdapter.startLeScan(mBLEScanCallback);}  }
class C{  protected synchronized void shutdown(){  if (this._clientMonitor != null) {    this._clientMonitor.stopMonitoring();  }}  }
class C{  public static FilePathZip2 register(){  FilePathZip2 instance=new FilePathZip2();  FilePath.register(instance);  return instance;}  }
class C{  public boolean isDisplayed(){  try {    findElement();    return element.isDisplayed();  } catch (  Exception e) {    return false;  }}  }
class C{  public String addToClassPath(final String path){  this.classPath+=(System.getProperty("path.separator") + path);  return this.classPath;}  }
class C{  public void testParams() throws Exception {  Connection connection=getConnectionViaDriverManager();  connection.setAutoCommit(false);  try {    PreparedStatement ps=connection.prepareStatement("SELECT ClassMap.oid,classname,mapping,codebase FROM ClassMap WHERE classname=?;");    ps.setObject(1,PreparedStatement.class.getName());    ResultSet rs=ps.executeQuery();    rs.next();  } catch (  Exception e) {    assertTrue("There should be no exceptions.",false);  } finally {    connection.close();  }}  }
class C{  private Void translateBinary(String op,String rop,RexCall call){  final RexNode left=call.operands.get(0);  final RexNode right=call.operands.get(1);  boolean b=translateBinary2(op,left,right);  if (b) {    return null;  }  b=translateBinary2(rop,right,left);  if (b) {    return null;  }  throw new AssertionError("cannot translate op " + op + " call "+ call);}  }
class C{  public T caseVariableEnvironmentElement(VariableEnvironmentElement object){  return null;}  }
class C{  public boolean isChartDrawn(){  return mDrawn;}  }
class C{  public void linkClicked(BasicPanel panel,String uri){  panel.setDocumentRelative(uri);}  }
class C{  public boolean isWheelEvent(){  return isWheelEvent;}  }
class C{  private void parseAttributes(TypedArray a){  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwBarWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwRimWidth,rimWidth);  spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_pwSpinSpeed,spinSpeed);  barLength=(int)a.getDimension(R.styleable.ProgressWheel_pwBarLength,barLength);  delayMillis=a.getInteger(R.styleable.ProgressWheel_pwDelayMillis,delayMillis);  if (delayMillis < 0) {    delayMillis=10;  }  if (a.hasValue(R.styleable.ProgressWheel_pwText)) {    setText(a.getString(R.styleable.ProgressWheel_pwText));  }  barColor=a.getColor(R.styleable.ProgressWheel_pwBarColor,barColor);  textColor=a.getColor(R.styleable.ProgressWheel_pwTextColor,textColor);  rimColor=a.getColor(R.styleable.ProgressWheel_pwRimColor,rimColor);  circleColor=a.getColor(R.styleable.ProgressWheel_pwCircleColor,circleColor);  contourColor=a.getColor(R.styleable.ProgressWheel_pwContourColor,contourColor);  textSize=(int)a.getDimension(R.styleable.ProgressWheel_pwTextSize,textSize);  contourSize=a.getDimension(R.styleable.ProgressWheel_pwContourSize,contourSize);  a.recycle();}  }
class C{  public void testCase9(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=-1;  int bSign=1;  byte rBytes[]={-24,-116,-12,-79,-36,11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void disconnect(){  if (!mConnected) {    mBleManager.close();    onDeviceDisconnected(mBluetoothDevice);    return;  }  mBleManager.disconnect();}  }
class C{  public static void loadGemFireProperties(Properties p) throws GemFireIOException {  loadGemFireProperties(p,false);}  }
class C{  private void maybeMovePool(Transaction tx,String context){  checkState(lock.isHeldByCurrentThread());  if (tx.isEveryOwnedOutputSpent(this)) {    if (unspent.remove(tx.getHash()) != null) {      if (log.isInfoEnabled()) {        log.info("  {} {} <-unspent ->spent",tx.getHashAsString(),context);      }      spent.put(tx.getHash(),tx);    }  } else {    if (spent.remove(tx.getHash()) != null) {      if (log.isInfoEnabled()) {        log.info("  {} {} <-spent ->unspent",tx.getHashAsString(),context);      }      unspent.put(tx.getHash(),tx);    }  }}  }
class C{  public boolean isOnMonday(){  Object oo=get_Value(COLUMNNAME_OnMonday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);}  }
class C{  public static final <E extends Collection<? super String>>E addNeighbors(String geohash,int length,E neighbors){  String south=neighbor(geohash,length,0,-1);  String north=neighbor(geohash,length,0,+1);  if (north != null) {    neighbors.add(neighbor(north,length,-1,0));    neighbors.add(north);    neighbors.add(neighbor(north,length,+1,0));  }  neighbors.add(neighbor(geohash,length,-1,0));  neighbors.add(neighbor(geohash,length,+1,0));  if (south != null) {    neighbors.add(neighbor(south,length,-1,0));    neighbors.add(south);    neighbors.add(neighbor(south,length,+1,0));  }  return neighbors;}  }
class C{  @Override public void PUsLost(final Territory t,final int amt){  m_PUsLost.add(t,amt);}  }
class C{  @SuppressLint("NewApi") private boolean deleteDatabaseNow(String dbname){  File dbfile=this.getContext().getDatabasePath(dbname);  if (android.os.Build.VERSION.SDK_INT >= 11) {    try {      return SQLiteDatabase.deleteDatabase(dbfile);    } catch (    Exception e) {      Log.e(SQLitePlugin.class.getSimpleName(),"couldn't delete because old SDK_INT",e);      return deleteDatabasePreHoneycomb(dbfile);    }  } else {    return deleteDatabasePreHoneycomb(dbfile);  }}  }
class C{  @Override public boolean add(Object o){  if (offset + size + 1 > arr.length)   enlargeCapacity(size + 1);  arr[offset + size]=o;  size++;  return true;}  }
class C{  public static boolean equals(Object[] a,Object[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    Object o1=a[i];    Object o2=a2[i];    if (!(o1 == null ? o2 == null : o1.equals(o2)))     return false;  }  return true;}  }
class C{  public static void disableShufflingOfEndpoints(){  System.setProperty(DistributionConfig.GEMFIRE_PREFIX + "PoolImpl.DISABLE_RANDOM","true");  System.setProperty(DistributionConfig.GEMFIRE_PREFIX + "bridge.disableShufflingOfEndpoints","true");}  }
class C{  public String toString(){  String ps="";  for (  Point2D p : points)   ps+=p + ";";  return ps;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  char c=x.nextClean();  char q;  if (c == '[') {    q=']';  } else   if (c == '(') {    q=')';  } else {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() == ']') {    return;  }  x.back();  for (; ; ) {    if (x.nextClean() == ',') {      x.back();      this.myArrayList.add(null);    } else {      x.back();      this.myArrayList.add(x.nextValue());    }    c=x.nextClean();switch (c) {case ';':case ',':      if (x.nextClean() == ']') {        return;      }    x.back();  break;case ']':case ')':if (q != c) {  throw x.syntaxError("Expected a '" + new Character(q) + "'");}return;default :throw x.syntaxError("Expected a ',' or ']'");}}}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public Select(){  super();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  public Utf8Writer(OutputStream out){  super(out,Charset.forName("UTF-8"));}  }
class C{  public static Message fromHtml(String text){  final Message parsed=create();  parsed.with(RichText.fromHtml(text));  return parsed;}  }
class C{  private Target<P> disconnectTarget(){  assert state.connectTarget != null;  state.activeConnector.vertex.disconnect(state.activeConnector.oport);  Target<P> target=state.connectTarget;  state.connectTarget=null;  assert state.connectTarget == null;  return target;}  }
class C{  boolean isPluggedIn(){  return plugged == BatteryManager.BATTERY_PLUGGED_AC || plugged == BatteryManager.BATTERY_PLUGGED_USB || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;}  }
class C{  public static Number multiply(BigDecimal left,BigInteger right){  return NumberMath.multiply(left,right);}  }
class C{  public synchronized boolean isContainedIn(final BaseType superType,final BaseType baseType){  Preconditions.checkNotNull(superType,"Error: Super type can not be null.");  Preconditions.checkNotNull(baseType,"Error: Base type can not be null.");  return typesContainer.isTypeContainedIn(superType,baseType);}  }
class C{  public boolean isDrawImage(){  return drawImage;}  }
class C{  @SuppressWarnings("unchecked") public synchronized boolean register(CacheInterface instance){  if (instance == null)   return false;  if (instance instanceof CCache) {    String tableName=((CCache)instance).getName();    m_tableNames.add(tableName);  }  return m_instances.add(instance);}  }
class C{  public void testDynLongMissingFacet() throws Exception {  checkSortMissingFacet("dyn_longdv","-1","4");}  }
class C{  public static OdorWorldComponent open(InputStream input,String name,String format){  OdorWorld newWorld=(OdorWorld)OdorWorld.getXStream().fromXML(input);  return new OdorWorldComponent(name,newWorld);}  }
class C{  public static final double hypot(final double a,final double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1.0 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1.0 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.369 -0500",hash_original_method="F692A804EFA22D479A24DA08ED26F838",hash_generated_method="14C560568D73D889123A33232020A01A") @Override protected String toExternalForm(URL url){  StringBuilder sb=new StringBuilder();  sb.append("jar:");  sb.append(url.getFile());  String ref=url.getRef();  if (ref != null) {    sb.append(ref);  }  return sb.toString();}  }
class C{  public Config(Config other){  if (other.isSetModuleCode()) {    this.moduleCode=other.moduleCode;  }  if (other.isSetConfigItemCode()) {    this.configItemCode=other.configItemCode;  }  if (other.isSetParamCode()) {    this.paramCode=other.paramCode;  }  if (other.isSetParamValue()) {    this.paramValue=other.paramValue;  }}  }
class C{  public HibernatePersistentSortedMapConverter(final Mapper mapper){  super(mapper);}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  return instance;}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public EnumAttributeSource createEnumAttributeSource(){  EnumAttributeSourceImpl enumAttributeSource=new EnumAttributeSourceImpl();  return enumAttributeSource;}  }
class C{  public static Volume rollbackVolume(URI volumeURI,DbClient dbClient){  Volume volume=dbClient.queryObject(Volume.class,volumeURI);  if (volume != null && !volume.getInactive()) {    _log.info(String.format("Rollback volume [%s]...",volume.getLabel()));    if (volume.getProvisionedCapacity() == null || volume.getProvisionedCapacity() == 0) {      dbClient.markForDeletion(volume);    } else {      String rollbackLabel="-ROLLBACK-" + Math.random();      volume.setLabel(volume.getLabel() + rollbackLabel);      dbClient.updateObject(volume);    }    if (RPHelper.isVPlexVolume(volume,dbClient) && (null != volume.getAssociatedVolumes())) {      for (      String associatedVolId : volume.getAssociatedVolumes()) {        Volume associatedVolume=dbClient.queryObject(Volume.class,URI.create(associatedVolId));        if (associatedVolume != null && !associatedVolume.getInactive()) {          _log.info(String.format("Rollback volume [%s]...",associatedVolume.getLabel()));          if (associatedVolume.getProvisionedCapacity() == null || associatedVolume.getProvisionedCapacity() == 0) {            dbClient.markForDeletion(associatedVolume);          } else {            associatedVolume.setLabel(volume.getLabel() + "-ROLLBACK-" + Math.random());            dbClient.updateObject(associatedVolume);          }        }      }    }  }  return volume;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_2__VALUE_1:    return getValue_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final void writeBoolean(boolean v){  write(v ? 1 : 0);}  }
class C{  public Writer buildConstraintDeletionWriter(AbstractSession session,ForeignKeyConstraint foreignKey,Writer writer) throws ValidationException {  try {    writer.write("ALTER TABLE " + getFullName());    writer.write(session.getPlatform().getConstraintDeletionString() + foreignKey.getName());  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCY__VERSION_CONSTRAINT:    setVersionConstraint((VersionConstraint)newValue);  return;case N4mfPackage.PROJECT_DEPENDENCY__DECLARED_SCOPE:setDeclaredScope((ProjectDependencyScope)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testTerm() throws Exception {  Query expected=new TermQuery(new Term("field","foobar"));  assertEquals(expected,parse("foobar"));}  }
class C{  public void reloadSessions(Activity fromActivity){  ArrayList<MXSession> sessions=getMXSessions(fromActivity);  for (  MXSession session : sessions) {    CommonActivityUtils.logout(fromActivity,session,false);  }  clearSessions(fromActivity,false);synchronized (instance) {    ArrayList<HomeserverConnectionConfig> configs=mLoginStorage.getCredentialsList();    for (    HomeserverConnectionConfig config : configs) {      MXSession session=createSession(config);      mMXSessions.add(session);    }  }  Intent intent=new Intent(fromActivity,SplashActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  fromActivity.startActivity(intent);  fromActivity.finish();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.526 -0400",hash_original_method="3E67047CBB938EA0EAADDA0B6F2EC0F8",hash_generated_method="7F920EBD553873C5DD32A7B0C56D47C9") private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  private List<String> missingcloaks2(final Player player,final boolean hash){  String doneText2=player.getQuest(QUEST_SLOT);  final List<String> neededCopy2=new LinkedList<String>(NEEDEDCLOAKS2);  if (doneText2 == null) {    doneText2="";  }  final List<String> done2=Arrays.asList(doneText2.split(";"));  neededCopy2.removeAll(done2);  if (hash) {    final List<String> result2=new LinkedList<String>();    for (    final String cloak : neededCopy2) {      result2.add("#" + cloak);    }    return result2;  }  return neededCopy2;}  }
class C{  public void testLegacyFloatMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",-1.3f,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",4.2f,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_FLOAT));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public AdvancingFrontNode locateNode(TriangulationPoint point){  return locateNode(point.getX());}  }
class C{  public Map<Integer,String> graph() throws Exception {  Map<Integer,String> result;  result=new HashMap<Integer,String>();  if (getClassifier() != null) {    if (getClassifier() instanceof Drawable) {      result.put(0,((Drawable)getClassifier()).graph());    }  }  return result;}  }
class C{  @Override public Map<String,Object> nextRow(){  if (reader == null) {    reader=new BufferedReader((Reader)context.getDataSource().getData(url));  }  String line;  while (true) {    try {      line=reader.readLine();    } catch (    IOException exp) {      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Problem reading from input",exp);    }    if (line == null) {      closeResources();      return null;    }    if (acceptLineRegex != null && !acceptLineRegex.matcher(line).find())     continue;    if (skipLineRegex != null && skipLineRegex.matcher(line).find())     continue;    Map<String,Object> row=new HashMap<>();    row.put("rawLine",line);    return row;  }}  }
class C{  public static <T>T withWriter(File file,@ClosureParams(value=SimpleType.class,options="java.io.BufferedWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newWriter(file),closure);}  }
class C{  public TitledPaddedPanel(String title,int outerPad,int innerPad){  JPanel titlePanel=new JPanel();  _mainPanel=new BoxPanel();  BoxLayout layout=new BoxLayout(this,BoxLayout.Y_AXIS);  BoxLayout titleLayout=new BoxLayout(titlePanel,BoxLayout.Y_AXIS);  Border outerBorder=BorderFactory.createEmptyBorder((outerPad > 6) ? outerPad - 6 : 0,outerPad,outerPad,outerPad);  _titledBorder=ThemeMediator.createTitledBorder(title);  Border innerBorder=BorderFactory.createEmptyBorder((innerPad > 6) ? innerPad - 6 : 0,innerPad,innerPad,innerPad);  setLayout(layout);  titlePanel.setLayout(titleLayout);  setBorder(outerBorder);  titlePanel.setBorder(_titledBorder);  _mainPanel.setBorder(innerBorder);  titlePanel.putClientProperty(ThemeMediator.SKIN_PROPERTY_DARK_BOX_BACKGROUND,Boolean.TRUE);  titlePanel.add(_mainPanel);  super.add(titlePanel);}  }
class C{  public void fire(Connection conn,Object[] oldRow,Object[] newRow) throws SQLException {  String sql=null;  try {    Statement stmt=conn.createStatement();    sql=fillVirtualTableSql(templates.get(KEY_CONDITION_SQL),oldRow,newRow);    ResultSet rs=stmt.executeQuery(sql);    if (rs.next() && rs.getInt(1) > 0) {      rs.close();      sql=fillVirtualTableSql(templates.get(KEY_INSERT_DATA_SQL),oldRow,newRow);      stmt.executeUpdate(sql);    }    stmt.close();  } catch (  SQLException ex) {    System.err.println("This sql failed: " + sql);    Throwable rootException=ex;    while (rootException.getCause() != null && !rootException.getCause().equals(ex)) {      rootException=ex.getCause();    }    rootException.printStackTrace();    throw ex;  }}  }
class C{  protected boolean isMod2TxrunSet(){  return (mod2 & MOD2_TXRUN_MASK) != 0;}  }
class C{  public static void writeMonitor(boolean incoming,String s){}  }
class C{  public final void readFully(byte b[],int off,int len) throws IOException {  if (len < 0)   throw new IndexOutOfBoundsException();  int n=0;  while (n < len) {    int count=in.read(b,off + n,len - n);    if (count < 0)     throw new EOFException();    n+=count;  }}  }
class C{  public static ReadableFontData renumberGlyph(ReadableFontData glyph,Map<Integer,Integer> mapping){  return isCompositeGlyph(glyph) ? renumberCompositeGlyph(glyph,mapping) : glyph;}  }
class C{  CompositionAreaHandler(InputMethodContext context){  inputMethodContext=context;}  }
class C{  public static void require(final boolean condition,final Class<? extends RuntimeException> klass,final String message) throws RuntimeException {  if (!condition) {    try {      final Constructor<? extends RuntimeException> c=klass.getConstructor(String.class);      throw c.newInstance(message);    } catch (    final SecurityException e) {      e.printStackTrace();    }catch (    final NoSuchMethodException e) {      e.printStackTrace();    }catch (    final IllegalArgumentException e) {      e.printStackTrace();    }catch (    final InstantiationException e) {      e.printStackTrace();    }catch (    final IllegalAccessException e) {      e.printStackTrace();    }catch (    final InvocationTargetException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean check(){  if (!complete) {    try {      refreshTasks();      complete=isTasksComplete();      if (complete) {        values=tasks.get();      }      context.updateTaskLog(log,elapsedTime());    } catch (    TimeoutException e) {    }catch (    Exception e) {      error=new ExecutionException(e);      complete=true;      context.updateTaskLog(log,elapsedTime(),e);    }  }  return complete;}  }
class C{  public ActionLocation endOfSourceLine(ActionLocation l){  ActionLocation current=new ActionLocation(l);  int size=l.actions.size();  for (int i=l.at + 1; i < size; i++) {    Action a=l.actions.getAction(i);    if (a.code == ActionList.sactionLineRecord)     break;    if ((a.code == ActionConstants.sactionDefineFunction) || (a.code == ActionConstants.sactionDefineFunction2))     break;    current.at=i;  }  return current;}  }
class C{  public ProjectionPolarEquidistant(){  super(Sector.FULL_SPHERE);}  }
class C{  public SysexMessage(){  this(new byte[2]);  data[0]=(byte)(SYSTEM_EXCLUSIVE & 0xFF);  data[1]=(byte)(ShortMessage.END_OF_EXCLUSIVE & 0xFF);}  }
class C{  public void waitFor(int state) throws IOException, InterruptedException {  while (!file.exists() || (get() != state)) {    Thread.sleep(pollRate);  }}  }
class C{  public static IStatus validateJavaTypeName(String name){  return validateJavaTypeName(name,org.eclipse.jdt.core.JavaCore.VERSION_1_3,org.eclipse.jdt.core.JavaCore.VERSION_1_3);}  }
class C{  public Vector2 rotate(float angle){  float rad=angle * MathUtils.degreesToRadians;  float cos=(float)Math.cos(rad);  float sin=(float)Math.sin(rad);  float newX=this.x * cos - this.y * sin;  float newY=this.x * sin + this.y * cos;  this.x=newX;  this.y=newY;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.251 -0500",hash_original_method="CABE0CDEFEE66B5261D13BB72FC54CFF",hash_generated_method="175B4AFDAB0348B0677E41D1C24635BB") public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  if (cookie.getDomain() == null) {    throw new MalformedCookieException("Invalid cookie state: " + "domain not specified");  }  String cookieDomain=cookie.getDomain().toLowerCase(Locale.ENGLISH);  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {    if (!cookieDomain.startsWith(".")) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2109: domain must start with a dot");    }    int dotIndex=cookieDomain.indexOf('.',1);    if (((dotIndex < 0) || (dotIndex == cookieDomain.length() - 1)) && (!cookieDomain.equals(".local"))) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: the value contains no embedded dots "+ "and the value is not .local");    }    if (!domainMatch(host,cookieDomain)) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: effective host name does not "+ "domain-match domain attribute.");    }    String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());    if (effectiveHostWithoutDomain.indexOf('.') != -1) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: "+ "effective host minus domain may not contain any dots");    }  } else {    if (!cookie.getDomain().equals(host)) {      throw new MalformedCookieException("Illegal domain attribute: \"" + cookie.getDomain() + "\"."+ "Domain of origin: \""+ host+ "\"");    }  }}  }
class C{  public static double timeStringToExactSeconds(String input){  if (input.equals("oo")) {    return Double.POSITIVE_INFINITY;  }  if (input.equals("-oo")) {    return Double.NEGATIVE_INFINITY;  }  double time=0;  String currentUnit="";  String current="";  for (int i=0; i < input.length(); i++) {    char c=input.charAt(i);    if (Character.isDigit(c) && !currentUnit.equals("")) {      time+=parseTime(Numbers.parseDouble(current),currentUnit);      current="";      currentUnit="";    }    if (Character.isDigit(c) || c == '.') {      current+=c + "";    } else     if (c != '-') {      currentUnit+=c + "";    }  }  time+=parseTime(Numbers.parseDouble(current),currentUnit);  if (input.startsWith("-")) {    time*=-1;  }  return time;}  }
class C{  public static List toList(Object o,List defaultValue){  return toList(o,false,defaultValue);}  }
class C{  @Override public int owner(int hash){  NodePodAmp delegate=delegate();  if (delegate != null) {    return delegate().owner(hash);  } else {    return 0;  }}  }
class C{  public void testNoParentDependenciesOk() throws Exception {  mySut.setSuperClass(getClassByName("EmptyParent"));  checkMembers("CLASS_FIELD_DEPENDS_ON_PARENT_FIELD","method_depends_on_parent_method(self)","method_depends_on_parent_field(self)");  Assert.assertThat("Dependence check false positive: parent has all required members",getErrorMemberNames(),Matchers.contains("extends SomeParent"));}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  static void svd_datx(int n,double da,double[] dx,int incx,double[] dy,int incy){  assert incx == 1 || incx == -1 || incx == 0;  assert incy == 1 || incy == -1 || incy == 0;  if (n <= 0 || incx == 0 || incy == 0)   return;  int ix=(incx == 1) ? 0 : n - 1;  int iy=(incy == 1) ? 0 : n - 1;  for (int i=0; i < n; i++) {    dy[iy]=da * dx[ix];    iy+=incy;    ix+=incx;  }}  }
class C{  public static List<String> protocolList2indexedList(final List<String> protocol){  List<String> a=new ArrayList<String>();  String p;  for (int i=0; i < protocol.size(); i++) {    p=protocol.get(i);    if (!p.equals("http")) {      String c=Integer.toString(i);      while (c.length() < 3)       c="0" + c;      a.add(c + "-" + p);    }  }  return a;}  }
class C{  @Override public boolean eventGeneratable(String eventName){  for (int i=0; i < m_subFlow.size(); i++) {    BeanInstance output=(BeanInstance)m_subFlow.elementAt(i);    if (output.getBean() instanceof EventConstraints) {      if (((EventConstraints)output.getBean()).eventGeneratable(eventName)) {        return true;      }    }  }  return false;}  }
class C{  Context context(){  return context;}  }
class C{  public String importExternalIDPConfig(String tenantName,Document doc) throws ExternalIDPCertChainInvalidTrustedPathException, ExternalIDPExtraneousCertsInCertChainException, Exception, IDMException {  List<Element> entityDescriptors=getEntityDescriptors(doc);  int entityDescLen=entityDescriptors.size();  if (0 == entityDescLen) {    throw new IDMException(String.format("No %s are found",SAMLNames.ENTDESCRIPTOR));  }  if (entityDescLen > 1) {    throw new IDMException(String.format("Only can import one IDP at a time, but multiple %s elements are found",SAMLNames.ENTDESCRIPTOR));  }  Element entityDescriptor=entityDescriptors.get(0);  String entityID=entityDescriptor.getAttribute(SAMLNames.ENTID);  if (isExpired(entityDescriptor)) {    throw new IDMException("Document has expired!");  }  try {    NodeList idpSSODescriptors=entityDescriptor.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.IDPSSODESCRIPTOR);    int idpSSODescLen=idpSSODescriptors.getLength();    if (0 == idpSSODescLen) {      throw new IDMException(String.format("No %s are found",SAMLNames.IDPSSODESCRIPTOR));    }    if (idpSSODescLen > 1) {      throw new IDMException(String.format("Only can import one IDP at a time, but multiple %s element are found",SAMLNames.IDPSSODESCRIPTOR));    }    Element idpSSODescriptor=(Element)idpSSODescriptors.item(0);    validateRequiredProtocol(idpSSODescriptor);    List<Certificate> certs=getCertificates(idpSSODescriptor);    Collection<ServiceEndpoint> sloServices=getSingleLogoutServices(idpSSODescriptor);    Collection<ServiceEndpoint> ssoServices=getSingleSignOnServices(idpSSODescriptor);    Collection<URI> nameIDFormats=getNameIDFormats(idpSSODescriptor);    IDPConfig object=new IDPConfig(entityID);    String entityAlias=entityDescriptor.getAttribute(SAMLNames.ORGANIZATIONNAME);    if (entityAlias != null && !entityAlias.isEmpty()) {      object.setAlias(entityAlias);    }    List<String> nameIDFormatStrs=new ArrayList<String>();    for (    URI uri : nameIDFormats) {      nameIDFormatStrs.add(uri.toString());    }    List<X509Certificate> x509Certs=new ArrayList<X509Certificate>();    for (    Certificate cert : certs) {      x509Certs.add((X509Certificate)cert);    }    ValidateUtil.validateNotEmpty(nameIDFormatStrs,"[idpConfig.nameIDFormatStrs]");    ValidateUtil.validateNotEmpty(x509Certs,"[idpConfig.signingCertificates]");    ValidateUtil.validateNotEmpty(ssoServices,"[idpConfig.ssoServices]");    object.setNameIDFormats(nameIDFormatStrs);    object.setSigningCertificateChain(x509Certs);    object.setSloServices(sloServices);    object.setSsoServices(ssoServices);    AttributeConfig[] subjectFormatMappings=new AttributeConfig[1];    subjectFormatMappings[0]=new AttributeConfig(SAMLNames.IDFORMAT_VAL_EMAILADD.toString(),"mail");    if (subjectFormatMappings != null) {      object.setSubjectFormatMappings(subjectFormatMappings);    }    idmClient.setExternalIdpConfig(tenantName,object);  } catch (  Exception e) {    if (e instanceof ExternalIDPCertChainInvalidTrustedPathException || e instanceof ExternalIDPExtraneousCertsInCertChainException) {      throw e;    } else {      try {        idmClient.removeExternalIdpConfig(tenantName,entityDescriptor.getAttribute(SAMLNames.ENTID));      } catch (      NoSuchExternalIdpConfigException nseice) {      }      throw new IDMException(String.format("Couldn't import external IDP Config for tenant: %s ",tenantName),e);    }  }  return entityID;}  }
class C{  void thrash(){  ThrashAttackAction act=new ThrashAttackAction(cen,target.getTargetType(),target.getTargetId());  ToHitData toHit=act.toHit(clientgui.getClient().getGame());  String title=Messages.getString("PhysicalDisplay.TrashDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.TrashDialog.message",new Object[]{toHit.getValueAsString(),new Double(Compute.oddsAbove(toHit.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),toHit.getDesc(),ThrashAttackAction.getDamageFor(ce()) + toHit.getTableDesc()});  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    attacks.addElement(act);    ready();  }}  }
class C{  public synchronized boolean isNotificationEnabled(Notification notification){  String type=notification.getType();  if ((type == null) || (type.equals(AttributeChangeNotification.ATTRIBUTE_CHANGE) == false) || (!(notification instanceof AttributeChangeNotification))) {    return false;  }  String attributeName=((AttributeChangeNotification)notification).getAttributeName();  return enabledAttributes.contains(attributeName);}  }
class C{  @Override public void transform(AffineTransform tx){  super.transform(tx);  if (getPresentationFigure() != null) {    getPresentationFigure().transform(tx);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.420 -0500",hash_original_method="7776E04A4027209B01392EB6C3502FA8",hash_generated_method="E6D266A43FA0FAD230541ED94B8906A6") @Override public void put(String name,boolean value){  emulatedFields.put(name,value);}  }
class C{  static public AnalysisContext currentAnalysisContext(){  return currentAnalysisContext.get();}  }
class C{  public void testReceive_NonBlockNoServerBufNotEmpty() throws Exception {  this.channel1.configureBlocking(false);  connectWithoutServer();  ByteBuffer dst=allocateNonEmptyBuf();  assertNull(this.channel1.receive(dst));}  }
class C{  private void paintUpperThumb(Graphics g){  Rectangle knobBounds=upperThumbRect;  int w=knobBounds.width;  int h=knobBounds.height;  Graphics2D g2d=(Graphics2D)g.create();  Shape thumbShape=createThumbShape(w - 1,h - 1,true);  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.translate(knobBounds.x,knobBounds.y);  g2d.setColor(Color.LIGHT_GRAY);  g2d.fill(thumbShape);  g2d.setColor(Color.GRAY);  g2d.draw(thumbShape);  g2d.dispose();}  }
class C{  @Override protected void onNfcPushStateDisabled(){  toast(getString(R.string.nfcBeamAvailableDisabled));}  }
class C{  public BasicRace(String appName){  RaceGUI basicGUI=new RaceGUI(appName);  controlPanel=basicGUI.getControlPanel();  controlPanel.addListener(this);  track=basicGUI.getTrack();  animator=new Animator(RACE_TIME,this);}  }
class C{  public boolean mapgraphRuntimeAvailable() throws Exception {  final String repositoryUrl=getSparqlEndpointUrlForNamespaceOrDefault(null);  final ConnectOptions opts=newConnectOptions(repositoryUrl,UUID.randomUUID(),null);  JettyResponseListener response=null;{    opts.addRequestParam(MAPGRAPH,MAPGRAPH_CHECK_RUNTIME_AVAILABLE);    opts.method="POST";  }  try {    response=doConnect(opts);    return response.getStatus() == 200;  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public static void createLoginPage(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties ctx,String AD_Message) throws ServletException, IOException {  request.getSession().invalidate();  String url=MobileEnv.getBaseDirectory("WLogin");  MobileDoc doc=null;  if (ctx != null && AD_Message != null && !AD_Message.equals(""))   doc=MobileDoc.create(Msg.getMsg(ctx,AD_Message)); else   if (AD_Message != null)   doc=MobileDoc.create(AD_Message); else   doc=MobileDoc.create(false);  script script=new script("window.top.location.replace('" + url + "');");  doc.getBody().addElement(script);  createResponse(request,response,servlet,null,doc,false);}  }
class C{  @Override public synchronized void flush() throws IOException {  checkNotClosed();  flushInternal();  out.flush();}  }
class C{  private void connectionLostAction(Bundle data){  if (callback != null) {    Exception reason=(Exception)data.getSerializable(MqttServiceConstants.CALLBACK_EXCEPTION);    callback.connectionLost(reason);  }}  }
class C{  @Override public void removeIndexes(final IScope scope,final IContainer<?,?> index){  for (  final Object pair : index.iterable(scope)) {    removeIndex(scope,pair);  }}  }
class C{  public boolean ttCheckAll(KnowledgeBase kb,Sentence alpha,List<PropositionSymbol> symbols,Model model){  if (symbols.isEmpty()) {    if (model.isTrue(kb.asSentence())) {      return model.isTrue(alpha);    } else {      return true;    }  }  PropositionSymbol p=Util.first(symbols);  List<PropositionSymbol> rest=Util.rest(symbols);  return ttCheckAll(kb,alpha,rest,model.union(p,true)) && ttCheckAll(kb,alpha,rest,model.union(p,false));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public int truePositives(int classindex){  return confusion[classindex][classindex];}  }
class C{  public JToggleButton(String text,Icon icon){  this(text,icon,false);}  }
class C{  public GenericSignatureParser(String signature){  int s=signature.indexOf('(');  String sig=signature;  if (s > 0) {    sig=sig.substring(s);  } else   if (s < 0 || sig.indexOf(':') >= 0 || sig.startsWith("(V)")) {    throw new IllegalArgumentException("Bad method signature: " + signature);  }  this.signature=sig;}  }
class C{  private void clearSensorPanel(){  if (currentSensorPanel != null) {    mainPanel.remove(currentSensorPanel);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.325 -0500",hash_original_method="A3EEEE607FBEBD432F4111F47BB23345",hash_generated_method="F0670CE27A83C450C2A4000B5E8C2390") public AtomicInteger(int initialValue){  value=initialValue;}  }
class C{  public PreferenceLevel combine(PreferenceLevel another){  if (getPrefProlog().equals(another.getPrefProlog()))   return this;  if (getPrefProlog().equals(sProhibited) || another.getPrefProlog().equals(sProhibited))   return getPreferenceLevel(sProhibited);  if (getPrefProlog().equals(sRequired))   return another;  if (another.getPrefProlog().equals(sRequired))   return this;  return getPreferenceLevel(String.valueOf(Math.max(Integer.parseInt(getPrefProlog()),Integer.parseInt(another.getPrefProlog()))));}  }
class C{  protected void initialize(){  isDone=false;  isTLCStarted=false;  errors=new Vector<TLCError>();  lastDetectedError=null;  model.removeMarkers(ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);  coverageInfo=new Vector<CoverageInformationItem>();  progressInformation=new Vector<StateSpaceInformationItem>();  startTime=0;  startTimestamp=Long.MIN_VALUE;  finishTimestamp=Long.MIN_VALUE;  lastCheckpointTimeStamp=Long.MIN_VALUE;  coverageTimestamp="";  setCurrentStatus(NOT_RUNNING);  setFingerprintCollisionProbability("");  progressOutput=new Document(NO_OUTPUT_AVAILABLE);  userOutput=new Document(NO_OUTPUT_AVAILABLE);  constantExprEvalOutput="";  final IDialogSettings dialogSettings=Activator.getDefault().getDialogSettings();  stateSortDirection=dialogSettings.getBoolean(STATESORTORDER);}  }
class C{  private static Pattern anchored(String regex){  return Pattern.compile("^" + regex + "$");}  }
class C{  public boolean extractNounSingular(){  boolean changed=false;  for (  String prefix : PrefixManager.s_instance.getSingularPrefixes()) {    changed|=removePrefix(prefix);  }  return changed;}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public static void calculateTiledPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans,boolean forward){  long min=0;  long pref=0;  long max=0;  for (int i=0; i < children.length; i++) {    min+=children[i].minimum;    pref+=children[i].preferred;    max+=children[i].maximum;  }  if (allocated >= pref) {    expandedTile(allocated,min,pref,max,children,offsets,spans,forward);  } else {    compressedTile(allocated,min,pref,max,children,offsets,spans,forward);  }}  }
class C{  private void addExtraceExceptionReplacements(){  List<Class<? extends Throwable>> classes=Arrays.asList(IOException.class,Throwable.class,ArithmeticException.class,ArrayIndexOutOfBoundsException.class,ArrayStoreException.class,ClassCastException.class,ClassNotFoundException.class,CloneNotSupportedException.class,EnumConstantNotPresentException.class,Exception.class,IllegalAccessException.class,IllegalArgumentException.class,IllegalMonitorStateException.class,IllegalStateException.class,IllegalThreadStateException.class,IndexOutOfBoundsException.class,InstantiationException.class,InterruptedException.class,NegativeArraySizeException.class,NoSuchFieldException.class,NoSuchMethodException.class,NullPointerException.class,NumberFormatException.class,ReflectiveOperationException.class,RuntimeException.class,SecurityException.class,StringIndexOutOfBoundsException.class,TypeNotPresentException.class,UnsupportedOperationException.class,AbstractMethodError.class,AssertionError.class,BootstrapMethodError.class,ClassCircularityError.class,ClassFormatError.class,Error.class,ExceptionInInitializerError.class,IllegalAccessError.class,IncompatibleClassChangeError.class,InstantiationError.class,InternalError.class,LinkageError.class,NoClassDefFoundError.class,NoSuchFieldError.class,NoSuchMethodError.class,OutOfMemoryError.class,StackOverflowError.class,ThreadDeath.class,UnknownError.class,UnsatisfiedLinkError.class,UnsupportedClassVersionError.class,VerifyError.class,VirtualMachineError.class);  for (  Class<?> k : classes) {    String jvmOriginal=k.getName().replace('.','/');    String jvmMock=MockThrowable.class.getName().replace('.','/');    addReplacementCall(new MethodCallReplacement(jvmOriginal,"getStackTrace","()[Ljava/lang/StackTraceElement;",Opcodes.INVOKEVIRTUAL,jvmMock,"replacement_getStackTrace","(Ljava/lang/Throwable;)[Ljava/lang/StackTraceElement;",false,false));    addReplacementCall(new MethodCallReplacement(jvmOriginal,"printStackTrace","(Ljava/io/PrintStream;)V",Opcodes.INVOKEVIRTUAL,jvmMock,"replacement_printStackTrace","(Ljava/lang/Throwable;Ljava/io/PrintStream;)V",false,false));    addReplacementCall(new MethodCallReplacement(jvmOriginal,"printStackTrace","(Ljava/io/PrintWriter;)V",Opcodes.INVOKEVIRTUAL,jvmMock,"replacement_printStackTrace","(Ljava/lang/Throwable;Ljava/io/PrintWriter;)V",false,false));  }}  }
class C{  @Pure @Override public int hashCode(){  return countMap.hashCode();}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 600) {    text=text.trim();    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," \r\n",true);    if (tok.hasMoreTokens()) {      String source=tok.nextToken();      if (StringUtils.containsAny(source,"1234567890")) {        return null;      }      if (source.endsWith("%")) {        source=tok.nextToken();      }      if (tok.hasMoreTokens()) {        String s2=tok.nextToken();        if (s2.equals("(your")) {          return new ChatEvent(IcsUtils.stripTitles(source).trim(),ChatType.PARTNER_TELL,text.trim());        }      }    }    return null;  }  return null;}  }
class C{  public static Transformer newTransformer() throws TransformerConfigurationException {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer();  transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");  transformer.setOutputProperty(OutputKeys.VERSION,"1.0");  transformer.setOutputProperty(OutputKeys.METHOD,"xml");  return transformer;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(toString(getClass()));  buffer.append("[UseDefault=");  buffer.append(isUseDefault());  buffer.append(", ");  buffer.append(elementConverter.toString());  buffer.append(']');  return buffer.toString();}  }
class C{  @Override public GaussianDensityFunction copy(){  return new GaussianDensityFunction(mean,variance);}  }
class C{  AttachedSprite(Sprite sprite,int x,int y){  this.sprite=sprite;  this.xOffset=x;  this.yOffset=y;}  }
class C{  public MoneyFlowIndexSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  @SuppressWarnings("rawtypes") public Collection toCollection(int column) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public boolean isWrapText(){  return this.wrapText;}  }
class C{  public void testFiveNodeSubmitQueryWithLinearizableConsistency() throws Throwable {  testSubmitQuery(5,Query.ConsistencyLevel.LINEARIZABLE);}  }
class C{  public void test_query_join_2shards_nothingBoundOnAccessPath_withConstraint() throws Exception {  final Var<?> x=Var.var("x");  final Var<?> y=Var.var("y");  final int startId=1;  final int joinId=2;  final int predId=3;  final int sliceId=4;  final StartOp startOp=new StartOp(new BOp[]{},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,startId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)}));  final Predicate<E> predOp=new Predicate<E>(new IVariableOrConstant[]{x,y},NV.asMap(new NV[]{new NV(Predicate.Annotations.RELATION_NAME,new String[]{namespace}),new NV(Predicate.Annotations.BOP_ID,predId),new NV(Annotations.TIMESTAMP,ITx.READ_COMMITTED),new NV(Predicate.Annotations.REMOTE_ACCESS_PATH,false)}));  final PipelineJoin<E> joinOp=new PipelineJoin<E>(new BOp[]{startOp},new NV(Predicate.Annotations.BOP_ID,joinId),new NV(PipelineJoin.Annotations.PREDICATE,predOp),new NV(Predicate.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.SHARDED),new NV(PipelineJoin.Annotations.CONSTRAINTS,new IConstraint[]{Constraint.wrap(new EQConstant(y,new Constant<String>("Paul")))}));  final PipelineOp query=new SliceOp(new BOp[]{joinOp},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,sliceId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(PipelineOp.Annotations.REORDER_SOLUTIONS,false),new NV(QueryEngine.Annotations.CHUNK_HANDLER,FederationChunkHandler.TEST_INSTANCE)}));  final IBindingSet[] expected=new IBindingSet[]{new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("Leon"),new Constant<String>("Paul")}),new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("Mary"),new Constant<String>("Paul")})};  final IRunningQuery runningQuery;{    final IBindingSet initialBindingSet=new ListBindingSet();    final UUID queryId=UUID.randomUUID();    runningQuery=queryEngine.eval(queryId,query,initialBindingSet);  }  AbstractQueryEngineTestCase.assertSameSolutionsAnyOrder(expected,runningQuery);  runningQuery.get();  final Map<Integer,BOpStats> statsMap=runningQuery.getStats();{    assertNotNull(statsMap);    assertEquals(3,statsMap.size());    if (log.isInfoEnabled())     log.info(statsMap.toString());  }{    final BOpStats stats=statsMap.get(startId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("start: " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(1L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(joinId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("join : " + stats.toString());    assertEquals(2L,stats.chunksIn.get());    assertEquals(2L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(2L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(sliceId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("slice: " + stats.toString());    assertEquals(2L,stats.chunksIn.get());    assertEquals(2L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(2L,stats.chunksOut.get());  }}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  void precomputeChildLists(){  for (  TypedVar var : compiler.getTopScope().getAllSymbols()) {    String namespace=getNamespace(var.getName());    if (!namespace.equals("")) {      if (!childListMap.containsKey(namespace))       childListMap.put(namespace,new ArrayList<TypedVar>());      childListMap.get(namespace).add(var);    }  }}  }
class C{  public void triangulate(List<Triangulatable> list){  _triangulations.clear();  _triangulations.addAll(list);  start();}  }
class C{  private void loadPlugins(){  commandMap.clearCommands();  commandMap.register("glowstone",new ColorCommand());  commandMap.register("glowstone",new TellrawCommand());  commandMap.register("glowstone",new TitleCommand());  commandMap.register("glowstone",new TeleportCommand());  commandMap.register("glowstone",new SummonCommand());  File folder=new File(config.getString(Key.PLUGIN_FOLDER));  if (!folder.isDirectory() && !folder.mkdirs()) {    logger.log(Level.SEVERE,"Could not create plugins directory: " + folder);  }  pluginTypeDetector=new GlowPluginTypeDetector(folder);  pluginTypeDetector.scan();  pluginManager.clearPlugins();  pluginManager.registerInterface(JavaPluginLoader.class);  Plugin[] plugins=pluginManager.loadPlugins(pluginTypeDetector.bukkitPlugins.toArray(new File[pluginTypeDetector.bukkitPlugins.size()]),folder.getPath());  for (  Plugin plugin : plugins) {    try {      plugin.onLoad();    } catch (    Exception ex) {      logger.log(Level.SEVERE,"Error loading " + plugin.getDescription().getFullName(),ex);    }  }  if (!pluginTypeDetector.spongePlugins.isEmpty()) {    boolean hasSponge=false;    for (    Plugin plugin : plugins) {      if (plugin.getName().equals("Bukkit2Sponge")) {        hasSponge=true;        break;      }    }    if (!hasSponge) {      logger.log(Level.WARNING,"SpongeAPI plugins found, but no Sponge bridge present! They will be ignored.");      for (      File file : pluginTypeDetector.spongePlugins) {        logger.log(Level.WARNING,"Ignored SpongeAPI plugin: " + file.getPath());      }      logger.log(Level.WARNING,"Suggestion: install https://github.com/deathcap/Bukkit2Sponge to load these plugins");    }  }  if (!pluginTypeDetector.canaryPlugins.isEmpty() || !pluginTypeDetector.forgefPlugins.isEmpty() || !pluginTypeDetector.forgenPlugins.isEmpty()|| !pluginTypeDetector.unrecognizedPlugins.isEmpty()) {    logger.log(Level.WARNING,"Unsupported plugin types found, will be ignored:");    for (    File file : pluginTypeDetector.canaryPlugins)     logger.log(Level.WARNING,"Canary plugin not supported: " + file.getPath());    for (    File file : pluginTypeDetector.forgefPlugins)     logger.log(Level.WARNING,"Forge plugin not supported: " + file.getPath());    for (    File file : pluginTypeDetector.forgenPlugins)     logger.log(Level.WARNING,"Forge plugin not supported: " + file.getPath());    for (    File file : pluginTypeDetector.unrecognizedPlugins)     logger.log(Level.WARNING,"Unrecognized plugin not supported: " + file.getPath());  }}  }
class C{  public GF2nPolynomialElement(GF2nPolynomialField f,int[] is){  mField=f;  mDegree=mField.getDegree();  polynomial=new GF2Polynomial(mDegree,is);  polynomial.expandN(f.mDegree);}  }
class C{  public void testSurrogates2() throws IOException {  int numIterations=atLeast(10000);  for (int i=0; i < numIterations; i++) {    if (VERBOSE) {      System.out.println("\nTEST: iter=" + i);    }    String s=TestUtil.randomUnicodeString(random(),100);    try (TokenStream ts=analyzer.tokenStream("foo",s)){      CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);      ts.reset();      while (ts.incrementToken()) {        assertTrue(UnicodeUtil.validUTF16String(termAtt));      }      ts.end();    }   }}  }
class C{  public NonNumericFeaturesException(Throwable cause){  super(cause);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getDirective_();}  }
class C{  public static boolean isAbsoluteUnit(short type){switch (type) {case CSSPrimitiveValue.CSS_PERCENTAGE:    return false;case CSSPrimitiveValue.CSS_EMS:case CSSPrimitiveValue.CSS_EXS:case CSSPrimitiveValue.CSS_IN:case CSSPrimitiveValue.CSS_CM:case CSSPrimitiveValue.CSS_MM:case CSSPrimitiveValue.CSS_PT:case CSSPrimitiveValue.CSS_PC:case CSSPrimitiveValue.CSS_PX:case CSSPrimitiveValue.CSS_RGBCOLOR:case CSSPrimitiveValue.CSS_ATTR:case CSSPrimitiveValue.CSS_DIMENSION:case CSSPrimitiveValue.CSS_NUMBER:case CSSPrimitiveValue.CSS_RECT:case CSSPrimitiveValue.CSS_COUNTER:case CSSPrimitiveValue.CSS_DEG:case CSSPrimitiveValue.CSS_GRAD:case CSSPrimitiveValue.CSS_RAD:case CSSPrimitiveValue.CSS_HZ:case CSSPrimitiveValue.CSS_KHZ:case CSSPrimitiveValue.CSS_S:case CSSPrimitiveValue.CSS_MS:case CSSPrimitiveValue.CSS_URI:case CSSPrimitiveValue.CSS_IDENT:case CSSPrimitiveValue.CSS_STRING:  return true;case CSSPrimitiveValue.CSS_UNKNOWN:XRLog.cascade(Level.WARNING,"Asked whether type was absolute, given CSS_UNKNOWN as the type. " + "Might be one of those funny values like background-position.");GeneralUtil.dumpShortException(new Exception());default :return false;}}  }
class C{  private void recalculateUnitsInUse(){  int i;  for (i=unitsInUse - 1; i >= 0; i--) {    if (bits[i] != 0)     break;  }  unitsInUse=i + 1;}  }
class C{  protected void validate(final RobotSuiteFile fileModel,final FileValidationContext validationContext) throws CoreException {  new UnknownTablesValidator(fileModel,reporter).validate(null);  new TestCaseTableValidator(validationContext,fileModel.findSection(RobotCasesSection.class),reporter).validate(null);  new GeneralSettingsTableValidator(validationContext,fileModel.findSection(RobotSettingsSection.class),reporter).validate(null);  new KeywordTableValidator(validationContext,fileModel.findSection(RobotKeywordsSection.class),reporter).validate(null);  new VariablesTableValidator(validationContext,fileModel.findSection(RobotVariablesSection.class),reporter).validate(null);  checkRobotFileOutputStatus(fileModel);}  }
class C{  public ReplEvent peek(int taskId) throws InterruptedException, ReplicatorException {  assertTaskIdWithinRange(taskId);  return readTasks.get(taskId).peek();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TimingHit userTimingLabel(String value){  setString(USER_TIMING_LABEL,value);  return this;}  }
class C{  public void addExcludedAttributes(final String elementName,final List attrNames){  if ((elementName == null) || (elementName.trim().equals(""))) {    return;  }  List attrNamesList=null;  if ((attrNamesList=(List)_excludedElementAttrsMap.get(elementName)) == null) {    attrNamesList=new ArrayList();  }  attrNamesList.addAll(attrNames);  _excludedElementAttrsMap.put(elementName,attrNamesList);}  }
class C{  public Long renamenx(final String oldkey,final String newkey){  checkIsInMulti();  client.renamenx(oldkey,newkey);  return client.getIntegerReply();}  }
class C{  public static Point maxSize(final Control[] controls){  return maxSize(controls,SWT.DEFAULT,SWT.DEFAULT);}  }
class C{  public boolean validate(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    Object result=value.setInstance(null);    Class expect=value.getType();    return validate(node,expect);  }  return true;}  }
class C{  public static void makePrivate(){  for (int i=0; i < line.length; i++) {    line[i]=replace(" public "," private ",line[i]);  }}  }
class C{  public StrBuilder insert(final int index,final long value){  return insert(index,String.valueOf(value));}  }
class C{  public void endProcessTokens(){}  }
class C{  public AtomicInteger read(String value){  Integer number=Integer.valueOf(value);  return new AtomicInteger(number);}  }
class C{  public boolean isAutoDispose(){  return autoDispose;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static String runBashCommand(Vector<String> commands) throws IOException, InterruptedException {  Vector<String> bashcommand=new Vector<String>();  bashcommand.add("/bin/bash");  bashcommand.add("-c");  bashcommand.addAll(commands);  ProcessBuilder pb=new ProcessBuilder(bashcommand);  Process pr=pb.start();  pr.waitFor();  if (pr.exitValue() == 0) {    BufferedReader outReader=null;    String output="";    try {      outReader=new BufferedReader(new InputStreamReader(pr.getInputStream()));      String line;      while ((line=outReader.readLine()) != null) {        output+=line + "\n";      }    }  finally {      if (outReader != null) {        outReader.close();      }    }    return output;  } else {    System.out.println("Error in running " + commands.toString());  }  return null;}  }
class C{  protected byte[] read(DataInput dataInput) throws IOException {  if (dataInput.readBoolean()) {    int len=dataInput.readInt();    byte[] bytes=new byte[len];    dataInput.readFully(bytes);    return bytes;  } else {    return null;  }}  }
class C{  private int calculateInputSizePerNode(int gridSize,int inputSize,int threshold,boolean limitedSplit){  if (threshold > 0) {    assert inputSize > threshold;    int inputPerNode=(int)Math.ceil((double)inputSize / (double)gridSize);    while (inputSize % inputPerNode <= threshold)     inputPerNode++;    return inputPerNode;  }  if (limitedSplit && inputSize <= gridSize)   return inputSize;  int inputPerNode=(int)Math.ceil((double)inputSize / (double)gridSize);  while (inputSize % inputPerNode == 1)   inputPerNode++;  return inputPerNode;}  }
class C{  public LinkListener(LinkManager linkManager,LinkLayer layer,OMGridGenerator generator){  this.linkManager=linkManager;  this.layer=layer;  this.currentGenerator=generator;}  }
class C{  private String displayNametoBackCompatName(String queryName){  final int lastBackSlash=queryName.lastIndexOf('\\');  if (lastBackSlash > 0 && lastBackSlash < queryName.length() - 1) {    queryName=(char)0x00ab + queryName;    queryName=queryName.substring(0,lastBackSlash + 1) + (char)0x00bb + ' '+ queryName.substring(lastBackSlash + 2);    queryName=queryName.replace('\\',(char)0x2044);  }  return queryName;}  }
class C{  public boolean deposePrimary(){  if (isPrimary()) {    this.activePrimaryMoveLock.lock();    boolean needToSendProfileUpdate=false;    try {      removePrimary(getDistributionManager().getId());synchronized (this) {        if (!isPrimary()) {          needToSendProfileUpdate=true;          return true;        } else {          return false;        }      }    }  finally {      this.activePrimaryMoveLock.unlock();      if (needToSendProfileUpdate) {        if (this.getBucket() instanceof BucketRegionQueue) {          BucketRegionQueue brq=(BucketRegionQueue)this.getBucket();          brq.decQueueSize(brq.size());        }        sendProfileUpdate();      }    }  } else {    sendProfileUpdate();    return true;  }}  }
class C{  public CsvWriter(BufferedWriter writer){  this.writer=writer;}  }
class C{  public NATURAL_CROSS_JOIN NATURAL_CROSS_JOIN(String tableToJoin){  return new NATURAL_CROSS_JOIN(this,tableToJoin);}  }
class C{  protected void startClientConnections(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    doNodeConnect(n);  }}  }
class C{  public PixelMatrixEditorException(){  super();}  }
class C{  @Override public void readFromNBT(NBTTagCompound par1NBTTagCompound){  super.readFromNBT(par1NBTTagCompound);  this.empRadius=par1NBTTagCompound.getInteger("banJing");  this.empMode=par1NBTTagCompound.getByte("muoShi");  updateCapacity();}  }
class C{  public long readTimeoutValue(Column<?> column){  if (columnFamily.getDefaultValueSerializer() == ByteBufferSerializer.get() || columnFamily.getDefaultValueSerializer() == LongSerializer.get()) {    return column.getLongValue();  } else {    return Long.parseLong(column.getStringValue());  }}  }
class C{  public static boolean isHigherVisibility(int newVisibility,int oldVisibility){  assertVisibility(oldVisibility);  assertVisibility(newVisibility);switch (oldVisibility) {case Modifier.PRIVATE:    return newVisibility == Modifier.NONE || newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.NONE:  return newVisibility == Modifier.PUBLIC || newVisibility == Modifier.PROTECTED;case Modifier.PROTECTED:return newVisibility == Modifier.PUBLIC;case Modifier.PUBLIC:return false;default :Assert.isTrue(false);return false;}}  }
class C{  public void characters(String s,boolean useCData) throws IOException {  if (s == null) {    return;  }  endOpenTag();  currentElement().unformattedChildren=true;  String escaped;  if (useCData) {    escaped="<![CDATA[" + StringUtil.xmlCDataEscape(s) + "]]>";  } else {    escaped=StringUtil.xmlContentEscape(s);  }  writer.write(escaped);}  }
class C{  public Poisson(double mean,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setMean(mean);}  }
class C{  public void test_startEmptyWriteStop() throws InterruptedException, ExecutionException {  final H masterStats=new H();  final BlockingBuffer<KVO<O>[]> masterBuffer=new BlockingBuffer<KVO<O>[]>(masterQueueCapacity);  final M master=new M(masterStats,masterBuffer,executorService);  final FutureTask<H> ft=new FutureTask<H>(master);  masterBuffer.setFuture(ft);  executorService.submit(ft);  final KVO<O>[] a=new KVO[0];  masterBuffer.add(a);  masterBuffer.close();  masterBuffer.getFuture().get();  assertEquals("elementsIn",0,masterStats.elementsIn.get());  assertEquals("chunksIn",0,masterStats.chunksIn.get());  assertEquals("elementsOut",0,masterStats.elementsOut.get());  assertEquals("chunksOut",0,masterStats.chunksOut.get());  assertEquals("partitionCount",0,masterStats.getMaximumPartitionCount());}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public final CC x2(String x2){  return corrPos(x2,2);}  }
class C{  public static void I2OSP(long input,byte[] output,int outOff){  output[outOff++]=(byte)(input >>> 56);  output[outOff++]=(byte)(input >>> 48);  output[outOff++]=(byte)(input >>> 40);  output[outOff++]=(byte)(input >>> 32);  output[outOff++]=(byte)(input >>> 24);  output[outOff++]=(byte)(input >>> 16);  output[outOff++]=(byte)(input >>> 8);  output[outOff]=(byte)input;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  private void add(LineString line){  geomFactory=line.getFactory();  if (graph == null)   graph=new PolygonizeGraph(geomFactory);  graph.addEdge(line);}  }
class C{  public CsvImportColumnImpl(final int columnIndex,final String fieldType,final String name,final String valueRegEx,final String lookupQuery){  super();  this.columnIndex=columnIndex;  this.fieldType=fieldType;  this.name=name;  this.valueRegEx=valueRegEx;  this.lookupQuery=lookupQuery;}  }
class C{  T childValue(T parentValue){  throw new UnsupportedOperationException();}  }
class C{  public OverpassQuery format(OutputFormat outputFormat){  builder.clause("out",outputFormat.toString().toLowerCase());  return this;}  }
class C{  @SafeVarargs public static <Type>Validator<Type> disjunctive(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type>... validators){  return DisjunctiveValidator.create(context,resourceId,validators);}  }
class C{  private static byte[] ntlmv2Hash(String target,String user,String password) throws Exception {  byte[] ntlmHash=ntlmHash(password);  String identity=user.toUpperCase() + target;  return hmacMD5(identity.getBytes("UnicodeLittleUnmarked"),ntlmHash);}  }
class C{  private void postInitViewPager(){  try {    Class<?> viewpager=ViewPager.class;    Field scroller=viewpager.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=viewpager.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new ScrollerCustomDuration(getContext(),(Interpolator)interpolator.get(null));    scroller.set(this,mScroller);  } catch (  Exception e) {  }}  }
class C{  private ModuleClass1(){}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof GeneralName))   return false;  GeneralNameInterface otherGNI=((GeneralName)other).name;  try {    return name.constrains(otherGNI) == GeneralNameInterface.NAME_MATCH;  } catch (  UnsupportedOperationException ioe) {    return false;  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private boolean needToPreserve(char[] input,int inputLength){  if (inputLength != outputPos) {    return true;  }  for (int i=0; i < inputLength; i++) {    if (input[i] != output[i]) {      return true;    }  }  return false;}  }
class C{  public IndexData.EntryCursor cursor() throws IOException {  return cursor(null,true,null,true);}  }
class C{  public static Vector<Object> outputs(Vector<Object> subset,Integer... tab){  Vector<Object> result=new Vector<Object>();  for (int i=0; i < subset.size(); i++) {    BeanInstance temp=(BeanInstance)subset.elementAt(i);    if (checkForTarget(temp,subset,tab)) {      if (checkSourceConstraint(temp,subset,tab)) {        try {          BeanInfo bi=Introspector.getBeanInfo(temp.getBean().getClass());          EventSetDescriptor[] esd=bi.getEventSetDescriptors();          if (esd != null && esd.length > 0) {            result.add(temp);          }        } catch (        IntrospectionException ex) {        }      }    }  }  return result;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof BasicQueryFactory))   return false;  BasicQueryFactory other=(BasicQueryFactory)obj;  return atMax() == other.atMax();}  }
class C{  public boolean isConditionFulfilled(final Player player,final Sentence sentence,final SpeakerNPC npc){  if (condition != null) {    return condition.fire(player,sentence,npc);  } else {    return true;  }}  }
class C{  public static Object decode(Object value,Type type){  if (value instanceof Integer) {    int i=(Integer)value;switch (type.getTag()) {case BOOLEAN:      return i != 0;case CHAR:    return (char)i;case BYTE:  return (byte)i;case SHORT:return (short)i;}}return value;}  }
class C{  public URL find(String classname){  try {    URLConnection con=openClassfile0(classname);    InputStream is=con.getInputStream();    if (is != null) {      is.close();      return con.getURL();    }  } catch (  IOException e) {  }  return null;}  }
class C{  protected SVGOMGElement(){}  }
class C{  @Override public void close(){  txTelegramQueue.clear();  if (commTimer != null) {    commTimer.stop();  }  super.close();  setProtStat(ProtStatus.OFFLINE);}  }
class C{  protected AbstractMatrix3D(){}  }
class C{  private List<TokenType> extractStringLiteralDelimitingTokens(String[] tokens){  List<TokenType> delimitingTokens=new ArrayList<TokenType>();  for (  String token : tokens) {    String cleanToken=cleanToken(token);    boolean handled=false;    if (alternateQuote == null) {      String alternateQuoteFromToken=extractAlternateOpenQuote(cleanToken);      if (alternateQuoteFromToken != null) {        String closeQuote=computeAlternateCloseQuote(alternateQuoteFromToken);        if (cleanToken.length() >= (alternateQuoteFromToken.length() + closeQuote.length()) && cleanToken.startsWith(alternateQuoteFromToken) && cleanToken.endsWith(closeQuote)) {          continue;        }        alternateQuote=closeQuote;        delimitingTokens.add(TokenType.ALTERNATE_QUOTE);        continue;      }    }    if ((alternateQuote != null) && cleanToken.endsWith(alternateQuote)) {      alternateQuote=null;      delimitingTokens.add(TokenType.ALTERNATE_QUOTE);      continue;    }    if ((cleanToken.length() >= 2) && cleanToken.startsWith("'") && cleanToken.endsWith("'")) {      continue;    }    if ((cleanToken.length() >= 4) && cleanToken.startsWith("/*") && cleanToken.endsWith("*/")) {      continue;    }    if (isSingleLineComment(cleanToken)) {      delimitingTokens.add(TokenType.SINGLE_LINE_COMMENT);      handled=true;    }    if (cleanToken.startsWith("/*")) {      delimitingTokens.add(TokenType.MULTI_LINE_COMMENT);      handled=true;    } else     if (cleanToken.startsWith("'")) {      delimitingTokens.add(TokenType.QUOTE);      handled=true;    }    if (!cleanToken.startsWith("/*") && cleanToken.endsWith("*/")) {      delimitingTokens.add(TokenType.MULTI_LINE_COMMENT);      handled=true;    } else     if (!cleanToken.startsWith("'") && cleanToken.endsWith("'")) {      delimitingTokens.add(TokenType.QUOTE);      handled=true;    }    if (!handled) {      delimitingTokens.add(TokenType.OTHER);    }  }  return delimitingTokens;}  }
class C{  public List<SootMethod> clinits(){  List<SootMethod> ret=new ArrayList<SootMethod>();  for (Iterator clIt=Scene.v().getClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=(SootClass)clIt.next();    addMethod(ret,cl,sigClinit);  }  return ret;}  }
class C{  public void removeHistoryChangedListener(HistoryChangedListener l){  m_ConnectionPanel.removeHistoryChangedListener(l);  m_QueryPanel.removeHistoryChangedListener(l);}  }
class C{  private void addHighlight(Highlighter h,Info info,Color c){  int start=info.start;  int end=info.end;  if (start == -1 && end == -1)   return;  if (start == -1)   start=end;  if (end == -1)   end=start;  try {    h.addHighlight(info.start,info.end,new DefaultHighlighter.DefaultHighlightPainter(c));    if (info.pos != -1) {      Color c2=new Color(c.getRed(),c.getGreen(),c.getBlue(),(int)(.4f * 255));      h.addHighlight(info.pos,info.pos + 1,new DefaultHighlighter.DefaultHighlightPainter(c2));    }  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  private void moveIndex(){  int i=rightmostDip();  if (i < 0) {    hasNext=false;    return;  }  int leastToRightIndex=i + 1;  for (int j=i + 2; j < n; j++) {    if (index[j] < index[leastToRightIndex] && index[j] > index[i]) {      leastToRightIndex=j;    }  }  int t=index[i];  index[i]=index[leastToRightIndex];  index[leastToRightIndex]=t;  if (m - 1 > i) {    reverseAfter(i);    reverseAfter(m - 1);  }}  }
class C{  public FIXMessageOverflowException(String message){  super(message);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return Boolean.FALSE;  return si.hasImage() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void write(byte[] buffer){  if (isFinal) {    log.warning("attempting to write to a final SpeechData object");    return;  }  byte[] newData=new byte[data.length + buffer.length];  System.arraycopy(data,0,newData,0,data.length);  System.arraycopy(buffer,0,newData,data.length,buffer.length);  data=newData;}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public ServiceChangedException(String message){  super(message);}  }
class C{  public static void convertTo20(LaneDefinitions11 in,Lanes out,Network network){  convertTo20(in,out,network,UTurnCreation.ON_LEFT_LANE);}  }
class C{  private Object read(InputNode node,Collection list) throws Exception {  InputNode from=node.getParent();  String name=node.getName();  while (node != null) {    Class type=entry.getType();    Object item=read(node,type);    if (item != null) {      list.add(item);    }    node=from.getNext(name);  }  return list;}  }
class C{  private static void prologueExpand(IR ir){  boolean useDU=ir.options.getOptLevel() >= 1;  if (useDU) {    DefUse.computeDU(ir);  }  Instruction prologueInstr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();  if (VM.VerifyAssertions)   VM._assert(prologueInstr.operator() == IR_PROLOGUE);  Instruction start=prologueInstr.nextInstructionInCodeOrder();  int int_index=0;  int double_index=0;  int spilledArgumentCounter=(-256 - STACKFRAME_HEADER_SIZE) >> LOG_BYTES_IN_ADDRESS;  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  Register FP=phys.getFP();  for (Enumeration<Operand> symParams=prologueInstr.getDefs(); symParams.hasMoreElements(); ) {    RegisterOperand symParamOp=(RegisterOperand)symParams.nextElement();    Register symParam=symParamOp.getRegister();    TypeReference t=symParamOp.getType();    if (t.isFloatType()) {      if (true || !useDU || symParam.useList != null) {        if (double_index < NUMBER_DOUBLE_PARAM) {          Register param=phys.get(FIRST_DOUBLE_PARAM + (double_index));          start.insertBefore(MIR_Move.create(PPC_FMR,F(symParam),F(param)));        } else {          start.insertBefore(MIR_Load.create(PPC_LFS,F(symParam),A(FP),IC((spilledArgumentCounter << LOG_BYTES_IN_ADDRESS) - BYTES_IN_ADDRESS + BYTES_IN_FLOAT)));          spilledArgumentCounter--;        }      }      double_index++;    } else     if (t.isDoubleType()) {      if (true || !useDU || symParam.useList != null) {        if (double_index < NUMBER_DOUBLE_PARAM) {          Register param=phys.get(FIRST_DOUBLE_PARAM + (double_index));          start.insertBefore(MIR_Move.create(PPC_FMR,D(symParam),D(param)));        } else {          start.insertBefore(MIR_Load.create(PPC_LFD,D(symParam),A(FP),IC(spilledArgumentCounter << LOG_BYTES_IN_ADDRESS)));          spilledArgumentCounter-=BYTES_IN_DOUBLE / BYTES_IN_ADDRESS;        }      }      double_index++;    } else {      if (true || !useDU || symParam.useList != null) {        if (int_index < NUMBER_INT_PARAM) {          Register param=phys.get(FIRST_INT_PARAM + (int_index));          start.insertBefore(MIR_Move.create(PPC_MOVE,new RegisterOperand(symParam,t),A(param)));        } else {          if (VM.BuildFor64Addr && (t.isIntType() || t.isShortType() || t.isByteType()|| t.isCharType()|| t.isBooleanType())) {            start.insertBefore(MIR_Load.create(PPC_LInt,new RegisterOperand(symParam,t),A(FP),IC((spilledArgumentCounter << LOG_BYTES_IN_ADDRESS) - BYTES_IN_ADDRESS + BYTES_IN_INT)));          } else {            start.insertBefore(MIR_Load.create(PPC_LAddr,new RegisterOperand(symParam,t),A(FP),IC(spilledArgumentCounter << LOG_BYTES_IN_ADDRESS)));          }          spilledArgumentCounter--;        }      }      int_index++;    }  }  prologueInstr.replace(Prologue.create(IR_PROLOGUE,0));}  }
class C{  public boolean update(){  int listCount;synchronized (drawListQueue) {    listCount=drawListQueue.size();    currentList=drawListQueue.poll();  }  if (currentList == null) {    return false;  }  startUpdate();  if (State.captureGeNextFrame) {    CaptureManager.startCapture("capture.bin",currentList);  }  if (State.replayGeNextFrame) {    CaptureManager.startReplay("capture.bin");    PspGeList replayList=drawListQueue.poll();    replayList.id=currentList.id;    replayList.blockedThreadIds.clear();    replayList.blockedThreadIds.addAll(currentList.blockedThreadIds);    currentList=replayList;  }  do {    executeList();    listCount--;    if (listCount <= 0) {      break;    }synchronized (drawListQueue) {      currentList=drawListQueue.poll();    }  } while (currentList != null);  if (State.captureGeNextFrame) {    CaptureManager.markListExecuted();  }  if (State.replayGeNextFrame) {    State.replayGeNextFrame=false;    CaptureManager.endReplay();  }  endUpdate();synchronized (drawListQueue) {    currentList=null;  }  return somethingDisplayed;}  }
class C{  public Period withSeconds(int seconds){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.SECOND_INDEX,values,seconds);  return new Period(values,getPeriodType());}  }
class C{  protected static void hide(Context context){  fpsFrameCallback.setEnabled(false);  Foreground.get(context).removeListener(foregroundListener);  tinyCoach.destroy();  tinyCoach=null;  fpsFrameCallback=null;  fpsConfig=null;}  }
class C{  public static void copyOverwrite(Dictionary<Object,Object> source,Dictionary<Object,Object> destination){  if ((destination == null) || (source == null)) {    throw new IllegalArgumentException("Invalid arguments specified : source = " + source + " destination = "+ destination);  }  Object key;  Enumeration<Object> enumKey=source.keys();  while (enumKey.hasMoreElements()) {    key=enumKey.nextElement();    destination.put(key,source.get(key));  }}  }
class C{  public void dispose(APanel aPanel){  Component[] comp=getComponents();  for (int i=0; i < comp.length; i++) {    if (comp[i] instanceof VTabbedPane) {      VTabbedPane tp=(VTabbedPane)comp[i];      tp.removeChangeListener(aPanel);      tp.dispose(aPanel);    } else     if (comp[i] instanceof GridController) {      GridController gc=(GridController)comp[i];      gc.removeDataStatusListener(aPanel);      gc.dispose();    }  }  removeAll();}  }
class C{  @GET @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/upgrade") public CatalogUpgrade upgradeAvailable(@DefaultValue("") @QueryParam(SearchConstants.TENANT_ID_PARAM) String tenantId){  StorageOSUser user=getUserFromContext();  if (StringUtils.isBlank(tenantId)) {    tenantId=user.getTenantId();  }  verifyAuthorizedInTenantOrg(uri(tenantId),user);  CatalogUpgrade catalogUpgrade=new CatalogUpgrade();  catalogUpgrade.setUpgradeAvailable(catalogCategoryManager.isCatalogUpdateAvailable(uri(tenantId)));  return catalogUpgrade;}  }
class C{  public static <T extends BaseResourceType>T safeCast(BaseResourceType baseResourceType,Class<T> cls) throws IMFException {  if (baseResourceType == null) {    return null;  }  if (!cls.isAssignableFrom(baseResourceType.getClass())) {    throw new IMFException(String.format("Unable to cast from Box type %s to %s",baseResourceType.getClass().getName(),cls.getName()));  }  return cls.cast(baseResourceType);}  }
class C{  private void buildTip(){  if (this.style == TipStyle.TWO_COLUMNS) {    final Group group=new Group(this.shell,SWT.NONE);    final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,true);    gd.widthHint=300;    gd.heightHint=120;    group.setLayoutData(gd);    group.setText(ResourceManager.getLabel(ResourceManager.DID_YOU_KNOW));    final FillLayout fillLayout=new FillLayout();    fillLayout.marginWidth=15;    group.setLayout(fillLayout);    this.tipArea=new Browser(group,SWT.BORDER);  } else   if (this.style == TipStyle.TWO_COLUMNS_LARGE) {    final Label title=new Label(this.shell,SWT.NONE);    final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,false);    gd.verticalIndent=15;    title.setLayoutData(gd);    final Font tempFont=SWTGraphicUtil.buildFontFrom(title,SWT.BOLD,16);    title.setText(ResourceManager.getLabel(ResourceManager.TIP_OF_THE_DAY));    title.setFont(tempFont);    SWTGraphicUtil.addDisposer(this.shell,tempFont);    final Label separator=new Label(this.shell,SWT.SEPARATOR | SWT.HORIZONTAL);    separator.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false));    this.tipArea=new Browser(this.shell,SWT.BORDER);    final GridData gdTipArea=new GridData(GridData.FILL,GridData.FILL,true,true);    gdTipArea.heightHint=120;    this.tipArea.setLayoutData(gdTipArea);  } else {    this.tipArea=new Browser(this.shell,SWT.BORDER);    final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,true);    gd.heightHint=120;    this.tipArea.setLayoutData(gd);  }  fillTipArea();}  }
class C{  public void tagEnableDebug(byte[] password) throws IOException {  tags.tag(TAG_ENABLEDEBUG,false,password);}  }
class C{  private int[] findNearestArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,boolean ignoreOccupied,int[] result,int[] resultSpan){  lazyInitTempRectStack();  pixelX-=(mCellWidth + mWidthGap) * (spanX - 1) / 2f;  pixelY-=(mCellHeight + mHeightGap) * (spanY - 1) / 2f;  final int[] bestXY=result != null ? result : new int[2];  double bestDistance=Double.MAX_VALUE;  final Rect bestRect=new Rect(-1,-1,-1,-1);  final Stack<Rect> validRegions=new Stack<Rect>();  final int countX=mCountX;  final int countY=mCountY;  if (minSpanX <= 0 || minSpanY <= 0 || spanX <= 0 || spanY <= 0 || spanX < minSpanX || spanY < minSpanY) {    return bestXY;  }  for (int y=0; y < countY - (minSpanY - 1); y++) {    inner:     for (int x=0; x < countX - (minSpanX - 1); x++) {      int ySize=-1;      int xSize=-1;      if (ignoreOccupied) {        for (int i=0; i < minSpanX; i++) {          for (int j=0; j < minSpanY; j++) {            if (mOccupied[x + i][y + j]) {              continue inner;            }          }        }        xSize=minSpanX;        ySize=minSpanY;        boolean incX=true;        boolean hitMaxX=xSize >= spanX;        boolean hitMaxY=ySize >= spanY;        while (!(hitMaxX && hitMaxY)) {          if (incX && !hitMaxX) {            for (int j=0; j < ySize; j++) {              if (x + xSize > countX - 1 || mOccupied[x + xSize][y + j]) {                hitMaxX=true;              }            }            if (!hitMaxX) {              xSize++;            }          } else           if (!hitMaxY) {            for (int i=0; i < xSize; i++) {              if (y + ySize > countY - 1 || mOccupied[x + i][y + ySize]) {                hitMaxY=true;              }            }            if (!hitMaxY) {              ySize++;            }          }          hitMaxX|=xSize >= spanX;          hitMaxY|=ySize >= spanY;          incX=!incX;        }        incX=true;        hitMaxX=xSize >= spanX;        hitMaxY=ySize >= spanY;      }      final int[] cellXY=mTmpPoint;      cellToCenterPoint(x,y,cellXY);      Rect currentRect=mTempRectStack.pop();      currentRect.set(x,y,x + xSize,y + ySize);      boolean contained=false;      for (      Rect r : validRegions) {        if (r.contains(currentRect)) {          contained=true;          break;        }      }      validRegions.push(currentRect);      double distance=Math.hypot(cellXY[0] - pixelX,cellXY[1] - pixelY);      if ((distance <= bestDistance && !contained) || currentRect.contains(bestRect)) {        bestDistance=distance;        bestXY[0]=x;        bestXY[1]=y;        if (resultSpan != null) {          resultSpan[0]=xSize;          resultSpan[1]=ySize;        }        bestRect.set(currentRect);      }    }  }  if (bestDistance == Double.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  recycleTempRects(validRegions);  return bestXY;}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public static Object paintCachedTeXFormula(Object o,Graphics2D g) throws ParseException {  if (o == null || !(o instanceof CachedTeXFormula)) {    return null;  }  CachedTeXFormula cached=(CachedTeXFormula)o;  SoftReference<CachedImage> img=cache.get(cached);  if (img == null || img.get() == null) {    img=makeImage(cached);  }  g.drawImage(img.get().image,identity,null);  return cached;}  }
class C{  public CloneFailedException(final Throwable cause){  super(cause);}  }
class C{  protected boolean hasDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  private int binarySearch(T targetKey){  int targetHash=hash(targetKey);  int l=0, u=num;  while (l < u) {    int m=(l + u) >> 1;    int keyHash=hash(keys[m]);    if (targetHash < keyHash || (targetHash == keyHash && ((Comparable)targetKey).compareTo(keys[m]) <= 0))     u=m; else     l=m + 1;  }  return l;}  }
class C{  public TransformerFactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  public static boolean hasViolation(ContractViolation violation){  for (  ContractViolation oldViolation : violations) {    if (oldViolation.same(violation))     return true;  }  return false;}  }
class C{  public void removeNotify(){  super.removeNotify();  if (textArea != null) {    l.uninstall(textArea);  }}  }
class C{  public boolean isFull(){  return isFull;}  }
class C{  public int candidate(){  return candidate;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof RenderKitBean : "Assertion Error: Expected RenderKitBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[RendererRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  RendererBean cb=(RendererBean)clazz.newInstance();  digester.push(cb);}  }
class C{  private void obtainStyledAttributes(AttributeSet attrs){  final TypedArray attributes=getContext().obtainStyledAttributes(attrs,R.styleable.HorizontalProgressBarWithNumber);  mTextColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_text_color,DEFAULT_TEXT_COLOR);  mTextSize=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_text_size,mTextSize);  mReachedBarColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_reached_color,mTextColor);  mUnReachedBarColor=attributes.getColor(R.styleable.HorizontalProgressBarWithNumber_progress_unreached_color,DEFAULT_COLOR_UNREACHED_COLOR);  mReachedProgressBarHeight=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_reached_bar_height,mReachedProgressBarHeight);  mUnReachedProgressBarHeight=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_unreached_bar_height,mUnReachedProgressBarHeight);  mTextOffset=(int)attributes.getDimension(R.styleable.HorizontalProgressBarWithNumber_progress_text_offset,mTextOffset);  int textVisible=attributes.getInt(R.styleable.HorizontalProgressBarWithNumber_progress_text_visibility,VISIBLE);  if (textVisible != VISIBLE) {    mIfDrawText=false;  }  attributes.recycle();}  }
class C{  public Border mirrorBorder(){  if (type == TYPE_IMAGE_HORIZONTAL) {    return createHorizonalImageBorder(images[1].mirror(),images[0].mirror(),images[2].mirror());  }  return this;}  }
class C{  final void doubleAccumulate(double x,DoubleBinaryOperator fn,boolean wasUncontended){  Integer uncontended=new Integer(0);  int h=getInitializedProbe(uncontended);  if (uncontended.intValue() == 1) {    wasUncontended=true;  }  boolean collide=false;  done:   for (; ; ) {    Cell[] as;    Cell a;    int n;    long v;    if ((as=cells) != null && (n=as.length) > 0) {      if ((a=as[(n - 1) & h]) == null) {        if (cellsBusy == 0) {          Cell r=new Cell(Double.doubleToRawLongBits(x));          if (cellsBusy == 0 && casCellsBusy()) {            try {              Cell[] rs;              int m, j;              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                rs[j]=r;                break done;              }            }  finally {              cellsBusy=0;            }            continue;          }        }        collide=false;      } else       if (!wasUncontended)       wasUncontended=true; else       if (a.cas(v=a.value,apply(fn,v,x)))       break; else       if (n >= NCPU || cells != as)       collide=false; else       if (!collide)       collide=true; else       if (cellsBusy == 0 && casCellsBusy()) {        try {          if (cells == as) {            cells=Arrays.copyOf(as,n << 1);          }        }  finally {          cellsBusy=0;        }        collide=false;        continue;      }      h=advanceProbe(h);    } else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {      try {        if (cells == as) {          Cell[] rs=new Cell[2];          rs[h & 1]=new Cell(Double.doubleToRawLongBits(x));          cells=rs;          break done;        }      }  finally {        cellsBusy=0;      }    } else     if (casBase(v=base,apply(fn,v,x))) {      break done;    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.PATTERN__QUANTIFIER:    return quantifier != null;}return super.eIsSet(featureID);}  }
class C{  @Override public boolean onSearchRequested(){  log.trace("onSearchRequested();");  showSearch(true);  return false;}  }
class C{  private void loadProgram(){  try {    final ClassLoader classLoader=createClassloader(true,false);    final Class<?> clazz=classLoader.loadClass(className);    final Method method=clazz.getMethod("main",args.getClass());    method.invoke(null,(Object)args);  } catch (  final Throwable e) {    unexpectedErrorHandling("State: in game\r\n",e);  }}  }
class C{  public DataTypeNotSupportedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public AbRotate3dAnimation(float fromDegrees,float toDegrees,float centerX,float centerY,float depthZ,boolean reverse){  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  public static CounterNode newTree(){  return new CounterNode(ImmutableList.<String>of(),null);}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean dataMatrix=field.equals(GenericGF.DATA_MATRIX_FIELD_256);  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(dataMatrix ? i + 1 : i));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations,dataMatrix);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  public ExtendedRuntimeEnvironment createExtendedRuntimeEnvironment(){  ExtendedRuntimeEnvironmentImpl extendedRuntimeEnvironment=new ExtendedRuntimeEnvironmentImpl();  return extendedRuntimeEnvironment;}  }
class C{  private int find4DayBlockWithMostFVals(String FPLAN,String BITFELD){  Map<Integer,Integer> departuresPerBitfeld=new HashMap<>();  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLAN),"latin1"));    String newLine=readsLines.readLine();    int numberOfDepartures=0;    while (newLine != null) {      if (newLine.charAt(0) == '*') {        if (newLine.charAt(1) == 'Z') {          try {            numberOfDepartures=Integer.parseInt(newLine.substring(22,25)) + 1;          } catch (          Exception e) {            numberOfDepartures=1;          }        }        if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V') {          if (newLine.substring(22,28).trim().length() > 0) {            int bitfeldNumber=Integer.parseInt(newLine.substring(22,28));            int bitfeldValue=numberOfDepartures;            if (departuresPerBitfeld.containsKey(bitfeldNumber)) {              bitfeldValue+=departuresPerBitfeld.get(bitfeldNumber);            }            departuresPerBitfeld.put(bitfeldNumber,bitfeldValue);          }        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int[] bitfeldStats=new int[96];  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(BITFELD),"latin1"));    String newLine=readsLines.readLine();    while (newLine != null) {      int bitFeldValue=1;      if (departuresPerBitfeld.containsKey(Integer.parseInt(newLine.substring(0,6)))) {        bitFeldValue=departuresPerBitfeld.get(Integer.parseInt(newLine.substring(0,6)));      }      String bitfeld=newLine.substring(7,103);      for (int i=0; i < bitfeld.length(); i++) {        if (bitfeld.charAt(i) == 'F') {          bitfeldStats[i]+=bitFeldValue;        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int maxFNumber=0;  int posMaxFNumber=-1;  for (int i=0; i < bitfeldStats.length; i++) {    if (bitfeldStats[i] > maxFNumber) {      maxFNumber=bitfeldStats[i];      posMaxFNumber=i;    }  }  log.info("Selected HAFAS-4day-block: " + posMaxFNumber);  return posMaxFNumber;}  }
class C{  protected void parseKeyBits() throws IOException, InvalidKeyException {  encode();}  }
class C{  @Override public Map<String,Runnable> handleMenu(final String data,final int x,final int y){  return null;}  }
class C{  public Jonas4xInstalledLocalDeployer(LocalContainer container,Jonas4xAdmin admin){  super(container);  this.admin=admin;}  }
class C{  public SampleData(Font newFont,Color newColor,String newString){  font=newFont;  color=newColor;  string=newString;}  }
class C{  protected double[][] makeJointVectorForNextPast(double[] destination){  return MatrixUtils.makeDelayEmbeddingVector(destination,k + 1);}  }
class C{  public static Object invoke(Class c,String method,Object... params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Class[] paramClass=getClasses(params);  return invoke(c,null,method,paramClass,params);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:13.221 -0500",hash_original_method="4664D1B75E47F4959701A1C01649EB42",hash_generated_method="742B75D7CF6C93094988DF6E137F66E2") static private byte[] toBytes(Vector octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.size(); i++) {    try {      DEROctetString o=(DEROctetString)octs.elementAt(i);      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs.elementAt(i).getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public DefaultHttpHeaders(boolean validate){  this(validate,16);}  }
class C{  public void checkConstraints(final EvolutionState state,final int tree,final GPIndividual typicalIndividual,final Parameter individualBase){  super.checkConstraints(state,tree,typicalIndividual,individualBase);  if (associatedTree < 0 || associatedTree >= typicalIndividual.trees.length)   state.output.error("The node " + toStringForError() + " of individual "+ individualBase+ " must have an associated tree that is >= 0 and < "+ typicalIndividual.trees.length+ ".  Value provided was: "+ associatedTree); else {    GPInitializer initializer=((GPInitializer)state.initializer);    if (!constraints(initializer).returntype.compatibleWith(initializer,typicalIndividual.trees[associatedTree].constraints(initializer).treetype))     state.output.error("The return type of the node " + toStringForError() + " of individual "+ individualBase+ "is not type-compatible with the tree type of its associated tree.");    GPNode[][] funcs=typicalIndividual.trees[associatedTree].constraints(initializer).functionset.nodes;    ADFArgument validArgument[]=new ADFArgument[children.length];    for (int w=0; w < funcs.length; w++) {      GPNode[] gpfi=funcs[w];      for (int x=0; x < gpfi.length; x++)       if (gpfi[x] instanceof ADFArgument) {        ADFArgument argument=(ADFArgument)(gpfi[x]);        int arg=argument.argument;        if (arg >= children.length)         state.output.error("The node " + toStringForError() + " in individual "+ individualBase+ " would call its associated tree, which has an argument terminal with an argument number ("+ arg+ ") >= the ADF/ADM's arity ("+ children.length+ ").  The argument terminal in question is "+ gpfi[x].toStringForError()); else {          if (validArgument[arg] != null && validArgument[arg] != argument)           state.output.warning("There exists more than one Argument terminal for argument #" + arg + " for the node "+ toStringForError()+ " in individual "+ individualBase); else           validArgument[arg]=argument;          if (!gpfi[x].constraints(initializer).returntype.compatibleWith(initializer,constraints(initializer).childtypes[arg]))           state.output.error("The node " + toStringForError() + " in individual "+ individualBase+ " would call its associated tree, which has an argument terminal which is not type-compatible with the related argument position of the ADF/ADM.  The argument terminal in question is "+ gpfi[x].toStringForError());        }      }    }    for (int x=0; x < children.length; x++)     if (validArgument[x] == null)     state.output.warning("There is no argument terminal for argument #" + x + " for the node "+ toStringForError()+ " in individual "+ individualBase);  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  void disconnect(long quiesceTimeout,String invocationContext,String activityToken){  service.traceDebug(TAG,"disconnect()");  disconnected=true;  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.DISCONNECT_ACTION);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.disconnect(quiesceTimeout,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.DISCONNECT_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  if (connectOptions.isCleanSession()) {    service.messageStore.clearArrivedMessages(clientHandle);  }  releaseWakeLock();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void moveToCurrentRow() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public CommonGramsFilter(TokenStream input,CharArraySet commonWords){  super(input);  this.commonWords=commonWords;}  }
class C{  public static void requiredChildElements(SimpleMethod method,Element element,String... elementNames) throws ValidationException {  Set<String> childElementNames=new HashSet<String>();  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      childElementNames.add(childElement.getTagName());    }    node=node.getNextSibling();  }  for (  String name : elementNames) {    if (!childElementNames.contains(name)) {      handleError("Required child element <" + name + "> is missing.",method,element);    }  }}  }
class C{  protected void addCommentPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DeprecatableElement_comment_feature"),getString("_UI_PropertyDescriptor_description","_UI_DeprecatableElement_comment_feature","_UI_DeprecatableElement_type"),SGenPackage.Literals.DEPRECATABLE_ELEMENT__COMMENT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public CatchClause newCatchClause(){  return new CatchClause(this);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if (action.equals("vibrate")) {    this.vibrate(args.getLong(0));  } else   if (action.equals("vibrateWithPattern")) {    JSONArray pattern=args.getJSONArray(0);    int repeat=args.getInt(1);    long[] patternArray=new long[pattern.length() + 1];    patternArray[0]=0;    for (int i=0; i < pattern.length(); i++) {      patternArray[i + 1]=pattern.getLong(i);    }    this.vibrateWithPattern(patternArray,repeat);  } else   if (action.equals("cancelVibration")) {    this.cancelVibration();  } else {    return false;  }  callbackContext.success();  return true;}  }
class C{  protected FeedLink(ElementKey<?,? extends FeedLink> key){  super(key);}  }
class C{  public void addColumn(final String content){  if (!firstColumn) {    out.print(columnSeparator);  }  out.print(StringUtil.escapeString(content));  firstColumn=false;}  }
class C{  public GitRefAlreadyExistsException(String message){  super(message);}  }
class C{  public void writeNFO(){  TvShowToXbmcNfoConnector.setData(this);  firePropertyChange(HAS_NFO_FILE,false,true);}  }
class C{  public Hashtable(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load: " + loadFactor);  if (initialCapacity == 0)   initialCapacity=1;  this.loadFactor=loadFactor;  table=new Entry<?,?>[initialCapacity];  threshold=(int)Math.min(initialCapacity * loadFactor,MAX_ARRAY_SIZE + 1);}  }
class C{  protected void informeExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  List listaAReemplazar=(List)getFromTemporalSession(request,DescripcionConstants.LISTA_DESCRIPTORES_A_REEMPLAZAR);  UnificarDescriptoresForm frm=(UnificarDescriptoresForm)form;  List listaPrincipal=new ArrayList();  List listaDescriptores=new ArrayList();  ActionErrors errors=getErrors(request,true);  ActionErrors messages=new ActionErrors();  boolean isConErrores=false;  boolean isConMensajes=false;  List listaDescriptoresConDocumentos=new ArrayList();  List listaDescriptoresConFicha=new ArrayList();  if (!ListUtils.isEmpty(listaAReemplazar)) {    ListIterator it=listaAReemplazar.listIterator();    while (it.hasNext()) {      DescriptorPO descriptor=(DescriptorPO)it.next();      if (descriptor.getId().equals(frm.getIdPrincipal())) {        listaPrincipal.add(descriptor);      } else {        listaDescriptores.add(descriptor);        if (descriptor.isConDocumentos()) {          messages.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(DescripcionConstants.MSG_DESCRIPTOR_CON_DOCUMENTOS,descriptor.getNombre()));          isConMensajes=true;          listaDescriptoresConDocumentos.add(descriptor);        }        if (descriptor.isConDescripcion()) {          messages.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(DescripcionConstants.MSG_DESCRIPTOR_CON_FICHA,descriptor.getNombre()));          isConMensajes=true;          listaDescriptoresConFicha.add(descriptor);        }      }    }    if (!ListUtils.isEmpty(listaPrincipal)) {      if (ListUtils.isEmpty(listaDescriptores)) {        errors.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(common.Constants.ERROR_GENERAL_MESSAGE,Messages.getString(DescripcionConstants.ERROR_NO_DESCRIPTORES_PARA_REEMPLAZAR,request.getLocale())));        isConErrores=true;      }    } else {      errors.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(common.Constants.ERROR_GENERAL_MESSAGE,Messages.getString(DescripcionConstants.ERROR_NO_DESCRIPTOR_PRINCIPAL,request.getLocale())));      isConErrores=true;    }  } else {    errors.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(common.Constants.ERROR_GENERAL_MESSAGE,Messages.getString(DescripcionConstants.ERROR_NO_DESCRIPTORES_PARA_REEMPLAZAR,request.getLocale())));    isConErrores=true;  }  if (!isConErrores) {    if (isConMensajes) {      setInTemporalSession(request,DescripcionConstants.LISTA_DESCRIPTORES_CON_DOCUMENTOS,listaDescriptoresConDocumentos);      setInTemporalSession(request,DescripcionConstants.LISTA_DESCRIPTORES_CON_FICHA,listaDescriptoresConFicha);      ErrorsTag.saveErrors(request,messages);    }    saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_UNIFICAR_CONFIRMAR,request);    setInTemporalSession(request,DescripcionConstants.LISTA_DESCRIPTOR_PRINCIPAL,listaPrincipal);    setInTemporalSession(request,DescripcionConstants.LISTA_DESCRIPTORES_A_UNIFICAR,listaDescriptores);    setReturnActionFordward(request,mapping.findForward("ver_confirmacion_unificar"));  } else {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("ver_busqueda_unificar"));  }}  }
class C{  public static void sanitizeExportMaskContainers(DbClient dbClient,ExportMask exportMask){  if (exportMask != null) {    List<URI> initiatorURIs=StringSetUtil.stringSetToUriList(exportMask.getInitiators());    List<URI> initiatorsToRemove=new ArrayList<>();    for (    URI initiatorURI : initiatorURIs) {      DataObject initiator=dbClient.queryObject(initiatorURI);      if (initiator == null || initiator.getInactive()) {        initiatorsToRemove.add(initiatorURI);      }    }    if (!initiatorsToRemove.isEmpty()) {      _log.info(String.format("sanitizeExportMaskContainers - Removing non-existent/inactive Initiators from ExportMask %s (%s): %s",exportMask.getMaskName(),exportMask.getId(),CommonTransformerFunctions.collectionToString(initiatorsToRemove)));      exportMask.removeInitiatorURIs(initiatorsToRemove);      exportMask.removeFromUserAddedInitiatorsByURI(initiatorsToRemove);    }    Map<URI,Integer> volumeMap=StringMapUtil.stringMapToVolumeMap(exportMask.getVolumes());    List<URI> volumesToRemove=new ArrayList<>();    for (    URI volumeURI : volumeMap.keySet()) {      DataObject volume=dbClient.queryObject(volumeURI);      if (volume == null || volume.getInactive()) {        volumesToRemove.add(volumeURI);      }    }    if (!volumesToRemove.isEmpty()) {      _log.info(String.format("sanitizeExportMaskContainers - Removing non-existent/inactive BlockObjects from ExportMask %s (%s): %s",exportMask.getMaskName(),exportMask.getId(),CommonTransformerFunctions.collectionToString(volumesToRemove)));      exportMask.removeVolumes(volumesToRemove);      exportMask.removeFromUserAddedVolumesByURI(volumesToRemove);    }    List<URI> storagePorts=StringSetUtil.stringSetToUriList(exportMask.getStoragePorts());    List<URI> storagePortsToRemove=new ArrayList<>();    for (    URI storagePortURI : storagePorts) {      DataObject storagePort=dbClient.queryObject(storagePortURI);      if (storagePort == null || storagePort.getInactive()) {        storagePortsToRemove.add(storagePortURI);      }    }    if (!storagePortsToRemove.isEmpty()) {      _log.info(String.format("sanitizeExportMaskContainers - Removing non-existent/inactive StoragePorts from ExportMask %s (%s): %s",exportMask.getMaskName(),exportMask.getId(),CommonTransformerFunctions.collectionToString(storagePortsToRemove)));      exportMask.removeTargets(storagePortsToRemove);    }  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private static DebuggerException parseExceptionOption(Node node){  return new DebuggerException(parseStringOption(node,"exceptionName"),parseLongOption(node,"exceptionCode"),DebuggerExceptionHandlingAction.convertToHandlingAction(parseIntOption(node,"handlingAction")));}  }
class C{  private void executeStates(Long stateMachineInstanceId,Set<State> executableStates){  executableStates.forEach((null));}  }
class C{  public void testMethodPrecedence() throws Exception {  FieldAndMethodBean bean=new FieldAndMethodBean();  bean.z=9;  assertEquals(10,bean.getZ());  assertEquals("{\"z\":10}",serializeAsString(bean));}  }
class C{  public static RealFeature create(String name,float value){  return new RealFeature(name,value);}  }
class C{  public int compareTo(final NV o){  return name.compareTo(o.name);}  }
class C{  private void combineNullStatusChangeInAssertInfo(UnconditionalFlowInfo otherInits){  if (this.nullStatusChangedInAssert != null || otherInits.nullStatusChangedInAssert != null) {    int mergedLength, length;    if (this.nullStatusChangedInAssert != null) {      if (otherInits.nullStatusChangedInAssert != null) {        if (otherInits.nullStatusChangedInAssert.length > this.nullStatusChangedInAssert.length) {          mergedLength=otherInits.nullStatusChangedInAssert.length;          length=this.nullStatusChangedInAssert.length;          System.arraycopy(this.nullStatusChangedInAssert,0,(this.nullStatusChangedInAssert=new int[mergedLength]),0,length);          for (int i=0; i < length; i++) {            this.nullStatusChangedInAssert[i]|=otherInits.nullStatusChangedInAssert[i];          }          System.arraycopy(otherInits.nullStatusChangedInAssert,length,this.nullStatusChangedInAssert,length,mergedLength - length);        } else {          for (int i=0; i < otherInits.nullStatusChangedInAssert.length; i++) {            this.nullStatusChangedInAssert[i]|=otherInits.nullStatusChangedInAssert[i];          }        }      }    } else     if (otherInits.nullStatusChangedInAssert != null) {      this.nullStatusChangedInAssert=otherInits.nullStatusChangedInAssert;    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hncu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public Builder copyBuilder(){  return GetJobArgs.builder().noHang(noHang).timeout(timeout).withCounters(withCounters);}  }
class C{  private void process(double[] data,double min,double max,KernelDensityFunction kernel,int window,double epsilon){  dens=new double[data.length];  var=new double[data.length];  double halfwidth=((max - min) / window) * .5;  for (int current=0; current < data.length; current++) {    double value=0.0;    for (int i=current; i >= 0; i--) {      double delta=Math.abs(data[i] - data[current]) / halfwidth;      final double contrib=kernel.density(delta);      value+=contrib;      if (contrib < epsilon) {        break;      }    }    for (int i=current + 1; i < data.length; i++) {      double delta=Math.abs(data[i] - data[current]) / halfwidth;      final double contrib=kernel.density(delta);      value+=contrib;      if (contrib < epsilon) {        break;      }    }    double realwidth=(Math.min(data[current] + halfwidth,max) - Math.max(min,data[current] - halfwidth));    double weight=realwidth / (2 * halfwidth);    dens[current]=value / (data.length * realwidth * .5);    var[current]=1 / weight;  }}  }
class C{  protected HashEntry nextEntry(){  if (parent.modCount != expectedModCount) {    throw new ConcurrentModificationException();  }  HashEntry newCurrent=next;  if (newCurrent == null) {    throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);  }  HashEntry[] data=parent.data;  int i=hashIndex;  HashEntry n=newCurrent.next;  while (n == null && i > 0) {    n=data[--i];  }  next=n;  hashIndex=i;  last=newCurrent;  return newCurrent;}  }
class C{  private static long readLong(final BooleanIterator iterator,final int length){  long x=0;  for (int i=length; i-- != 0; )   if (iterator.nextBoolean())   x|=1L << i;  return x;}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  public boolean canEditSecret(){  return modifyGroupSecretsAccess().contains(this);}  }
class C{  void overrideSettings(){  settings.setBoolean("ignoreJoinsParts",false);  if (updatedFromBefore("0.7.2")) {    String value=settings.getString("timeoutButtons");    if (value.equals("5,2m,10m,30m")) {      settings.setString("timeoutButtons",null);      LOGGER.warning("Updated timeoutButtons setting to new default");    } else     if (!value.toLowerCase(Locale.ENGLISH).contains("/ban") && !value.toLowerCase(Locale.ENGLISH).contains("/unban")) {      String newValue="/Ban[B], /Unban[U], " + value;      settings.setString("timeoutButtons",newValue);      LOGGER.warning("Added /Ban,/Unban to timeoutButtons setting, now: " + newValue);    }  }  if (updatedFromBefore("0.8.1")) {    if (settings.getString("portDefault").equals("6667,80")) {      settings.setString("portDefault","6667,443");    }  }  if (updatedFromBefore("0.8.2")) {    if (settings.getString("serverDefault").equals("irc.twitch.tv")) {      settings.setString("serverDefault","irc.chat.twitch.tv");    }    if (settings.getString("portDefault").equals("6667,443")) {      settings.setString("portDefault","6697,6667,443,80");    }    settings.setAdd("securedPorts",(long)443);  }  if (updatedFromBefore("0.8.4")) {    settings.setBoolean("ircv3CapitalizedNames",true);  }}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  public static Map<String,Object> dayEndCapacityAvailable(GenericValue techDataCalendarWeek,int dayEnd){  Map<String,Object> result=FastMap.newInstance();  int moveDay=0;  Double capacity=null;  Time startTime=null;  while (capacity == null || capacity.doubleValue() == 0) {switch (dayEnd) {case Calendar.MONDAY:      capacity=techDataCalendarWeek.getDouble("mondayCapacity");    startTime=techDataCalendarWeek.getTime("mondayStartTime");  break;case Calendar.TUESDAY:capacity=techDataCalendarWeek.getDouble("tuesdayCapacity");startTime=techDataCalendarWeek.getTime("tuesdayStartTime");break;case Calendar.WEDNESDAY:capacity=techDataCalendarWeek.getDouble("wednesdayCapacity");startTime=techDataCalendarWeek.getTime("wednesdayStartTime");break;case Calendar.THURSDAY:capacity=techDataCalendarWeek.getDouble("thursdayCapacity");startTime=techDataCalendarWeek.getTime("thursdayStartTime");break;case Calendar.FRIDAY:capacity=techDataCalendarWeek.getDouble("fridayCapacity");startTime=techDataCalendarWeek.getTime("fridayStartTime");break;case Calendar.SATURDAY:capacity=techDataCalendarWeek.getDouble("saturdayCapacity");startTime=techDataCalendarWeek.getTime("saturdayStartTime");break;case Calendar.SUNDAY:capacity=techDataCalendarWeek.getDouble("sundayCapacity");startTime=techDataCalendarWeek.getTime("sundayStartTime");break;}if (capacity == null || capacity.doubleValue() == 0) {moveDay-=1;dayEnd=(dayEnd == 1) ? 7 : dayEnd - 1;}}result.put("capacity",capacity);result.put("startTime",startTime);result.put("moveDay",Integer.valueOf(moveDay));return result;}  }
class C{  void stop(){  for (  DownloadDispatcher dispatcher : dispatchers) {    if (dispatcher != null) {      dispatcher.quit();    }  }}  }
class C{  protected FunctionblockPropertyImpl(){  super();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  initFactory();  in.defaultReadObject();}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  public void deleteInstanceAt(int rowIndex){  deleteInstanceAt(rowIndex,true);}  }
class C{  private byte[] exportReport(final ReportRequest reportInput,final JasperPrint jasperPrint) throws JRException, IOException {  try {    final ByteArrayOutputStream reportOutputStream=new ByteArrayOutputStream();    final JRExporter exporter=getExporter(reportInput,jasperPrint,reportOutputStream);    exporter.exportReport();    final byte[] data=reportOutputStream.toByteArray();    reportOutputStream.close();    return data;  } catch (  final Exception e) {    final String errMsg="Exception in export report!";    LOGGER.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  }}  }
class C{  @Override public AggregateResults calculate() throws IllegalStateException {synchronized (m_mutexCalcIsRunning) {    awaitLatch();    final long start=System.currentTimeMillis();    int totalRunCount=0;    final List<Future<AggregateResults>> list=new ArrayList<>();    for (    final OddsCalculator worker : m_workers) {      if (!getIsReady()) {        return new AggregateResults(0);      }      if (!worker.getIsReady()) {        throw new IllegalStateException("Called calculate before setting calculate data!");      }      if (worker.getRunCount() > 0) {        totalRunCount+=worker.getRunCount();        final Future<AggregateResults> workerResult=m_executor.submit(worker);        list.add(workerResult);      }    }    final AggregateResults results=new AggregateResults(totalRunCount);    final Set<InterruptedException> interruptExceptions=new HashSet<>();    final Map<String,Set<ExecutionException>> executionExceptions=new HashMap<>();    for (    final Future<AggregateResults> future : list) {      try {        final AggregateResults result=future.get();        results.addResults(result.getResults());      } catch (      final InterruptedException e) {        interruptExceptions.add(e);      }catch (      final ExecutionException e) {        final String cause=e.getCause().getLocalizedMessage();        Set<ExecutionException> exceptions=executionExceptions.get(cause);        if (exceptions == null) {          exceptions=new HashSet<>();        }        exceptions.add(e);        executionExceptions.put(cause,exceptions);      }    }    if (!interruptExceptions.isEmpty()) {      s_logger.log(Level.SEVERE,interruptExceptions.size() + " Battle results workers interrupted",interruptExceptions.iterator().next());    }    if (!executionExceptions.isEmpty()) {      Exception e=null;      for (      final Set<ExecutionException> entry : executionExceptions.values()) {        if (!entry.isEmpty()) {          e=entry.iterator().next();          s_logger.log(Level.SEVERE,entry.size() + " Battle results workers aborted by exception",e.getCause());        }      }      if (e != null) {        throw new IllegalStateException(e.getCause());      }    }    results.setTime(System.currentTimeMillis() - start);    return results;  }}  }
class C{  public void testLength() throws IOException {  checkOneTerm(a,"usa","usa");  checkOneTerm(a,"60ms","60ms");}  }
class C{  public boolean dryRun(){  return this.dryRun;}  }
class C{  public char next(){  if (offset >= (end - 1)) {    offset=end;    return DONE;  }  return string.charAt(++offset);}  }
class C{  private <T>T read(Class<? extends T> type,InputNode node,Session session) throws Exception {  return read(type,node,new Source(strategy,support,session));}  }
class C{  public static void reboot(final Context context,String reason,boolean confirm){  mReboot=true;  mRebootSafeMode=false;  mRebootReason=reason;  shutdownInner(context,confirm);}  }
class C{  public synchronized void moveTo(float x,float y){  makeRoom(2);  types[numSeg++]=PathIterator.SEG_MOVETO;  cx=mx=values[numVals++]=x;  cy=my=values[numVals++]=y;}  }
class C{  private static int findAnyZero(double[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      low=middle + 1;    } else     if (middleValue > 0.0d) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  private void giveUpAudioFocus(){  LogHelper.d(TAG,"giveUpAudioFocus");  if (mAudioFocus == AUDIO_FOCUSED) {    if (mAudioManager.abandonAudioFocus(this) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      mAudioFocus=AUDIO_NO_FOCUS_NO_DUCK;    }  }}  }
class C{  private void handleError(@NotNull final Throwable e){  String errorMessage=(e.getMessage() != null && !e.getMessage().isEmpty()) ? e.getMessage() : constant.addFailed();  console.printError(errorMessage);  notificationManager.showError(errorMessage);}  }
class C{  public String post(String url) throws HttpException {  return post(null,url,null);}  }
class C{  static boolean isNonStandardICC(ColorSpace cs){  boolean retval=false;  if ((cs instanceof ICC_ColorSpace) && (!cs.isCS_sRGB()) && (!cs.equals(ColorSpace.getInstance(ColorSpace.CS_CIEXYZ)))&& (!cs.equals(ColorSpace.getInstance(ColorSpace.CS_GRAY)))&& (!cs.equals(ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB)))&& (!cs.equals(ColorSpace.getInstance(ColorSpace.CS_PYCC)))) {    retval=true;  }  return retval;}  }
class C{  public Period plusSeconds(int seconds){  if (seconds == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.SECOND_INDEX,values,seconds);  return new Period(values,getPeriodType());}  }
class C{  public int showDialog(){  setVisible(true);  return returnCode;}  }
class C{  public static long min(long a,long b,long c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  AdminResponse sendAndWait(AdminRequest msg){  try {    if (((Boolean)sending.get()).booleanValue()) {      throw new OperationCancelledException(LocalizedStrings.RemoteGfManagerAgent_RECURSION_DETECTED_WHILE_SENDING_0.toLocalizedString(msg));    } else {      sending.set(Boolean.TRUE);    }    DistributionManager dm=(DistributionManager)this.system.getDistributionManager();    if (isConnected()) {      return msg.sendAndWait(dm);    } else {      dm.getCancelCriterion().checkCancelInProgress(null);      throw new RuntimeAdminException(LocalizedStrings.RemoteGfManagerAgent_0_IS_NOT_CURRENTLY_CONNECTED.toLocalizedString(this));    }  }  finally {    sending.set(Boolean.FALSE);  }}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public final void returnMoveList(ArrayList<Move> moveList){  if (movesInCache + moveList.size() <= moveCache.length) {    int mlSize=moveList.size();    for (int mi=0; mi < mlSize; mi++) {      moveCache[movesInCache++]=moveList.get(mi);    }  }  moveList.clear();  if (moveListsInCache < moveListCache.length) {    moveListCache[moveListsInCache++]=moveList;  }}  }
class C{  public int hashCode(){  return this.getClass().hashCode();}  }
class C{  public double truePositiveRate(){  return ((double)truePositives()) / (double)totalInstances();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_TYPE:      return TypesPackage.TGETTER___GET_MEMBER_TYPE;case TypesPackage.TMEMBER___GET_MEMBER_AS_STRING:    return TypesPackage.TGETTER___GET_MEMBER_AS_STRING;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static List<StackTraceElement> captureStackBelow(Class<?>... clazzes){  List<Class<?>> toIgnore=new ArrayList<>(clazzes.length + 1);  toIgnore.addAll(Arrays.asList(clazzes));  toIgnore.add(StackDumper.class);  Predicate<StackTraceElement> isSkipped=null;  List<StackTraceElement> rawStack=Arrays.asList(Thread.currentThread().getStackTrace());  ListIterator<StackTraceElement> iterator=rawStack.listIterator();  while (iterator.hasNext() && !isSkipped.test(iterator.next())) {  }  boolean foundSomethingToSkip=iterator.hasNext();  if (foundSomethingToSkip) {    while (iterator.hasNext() && isSkipped.test(iterator.next())) {    }    return rawStack.subList(iterator.previousIndex(),rawStack.size());  } else {    return rawStack;  }}  }
class C{  public LoggingMenu(TetradLoggerConfig config,Component parent){  this(config);  this.parent=parent;}  }
class C{  public void updateAchievement(Integer id,Achievement achievement) throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  updateAchievement(transaction,id,achievement);  TransactionPool.get().commit(transaction);}  }
class C{  public void onDirectoryCreated(Path file){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.WINDOWS_OS)   DShowTVPlayer.autoOptimize(false);  return null;}  }
class C{  public void println(char x){  out.println(x);}  }
class C{  public static boolean isVolumeExternalDeviceClone(Volume volume,VolumeClone deviceClone,DbClient dbClient){  URI assocSourceVolumeURI=volume.getAssociatedSourceVolume();  Volume assocSourceVolume=dbClient.queryObject(Volume.class,assocSourceVolumeURI);  String assocSourceVolumeNativeId=assocSourceVolume.getNativeId();  return deviceClone.getParentId().equals(assocSourceVolumeNativeId);}  }
class C{  protected static int unit(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_UNIT;}  }
class C{  public void show(){  if (!mIsShown) {    mIsShown=true;    if (mIsAttachedToWindow) {      removeCallbacks(mDelayedHide);      if (mStartTime == -1L) {        postDelayed(mDelayedShow,MIN_DELAY);      }    }  }}  }
class C{  public void swing(AdvancedModelRenderer box,float speed,float degree,boolean invert,float offset,float weight,float swing,float swingAmount){  box.swing(speed,degree,invert,offset,weight,swing,swingAmount);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  MessageResources rsc=(MessageResources)super.getServlet().getServletContext().getAttribute(Globals.MESSAGES_KEY);  if (distType == null || distType.equals(Preference.BLANK_PREF_VALUE)) {    errors.add("distType",new ActionMessage("errors.generic",MSG.errorSelectDistributionType()));  }  if (prefLevel == null || prefLevel.equals(Preference.BLANK_PREF_VALUE)) {    errors.add("prefLevel",new ActionMessage("errors.generic",MSG.errorSelectDistributionPreferenceLevel()));  }  if (!checkClasses()) {    errors.add("classes",new ActionMessage("errors.generic",MSG.errorInvalidClassSelectionDP()));  }  if (op.equals(MSG.accessSaveNewDistributionPreference()) || op.equals(MSG.accessUpdateDistributionPreference())) {    if (subjectArea.size() == 0)     errors.add("classes",new ActionMessage("errors.generic",MSG.errorInvalidClassSelectionDPSubpart()));    if (subjectArea.size() == 1 && !classNumber.get(0).toString().equals(ALL_CLASSES_SELECT))     errors.add("classes",new ActionMessage("errors.generic",MSG.errorInvalidClassSelectionDPMinTwoClasses()));    if (subjectArea.size() > 1) {      HashMap mapSubparts=new HashMap();      HashMap mapClasses=new HashMap();      for (int i=0; i < subjectArea.size(); i++) {        String subpart=itype.get(i).toString();        String classNum=classNumber.get(i).toString();        if (classNum.equals(ALL_CLASSES_SELECT)) {          if (mapClasses.get(subpart) != null) {            errors.add("classes",new ActionMessage("errors.generic",MSG.errorInvalidClassSelectionDPIndividualClass()));            break;          } else           mapSubparts.put(subpart,classNum);        } else {          if (mapSubparts.get(subpart) != null) {            errors.add("classes",new ActionMessage("errors.generic",MSG.errorInvalidClassSelectionDPIndividualClass()));            break;          } else           mapClasses.put(subpart,classNum);        }      }    }  }  return errors;}  }
class C{  default void classMatchEvent(ClassLoader loader,Path root,String className){}  }
class C{  public SkypeBuilder withChat(String id){  if (!id.startsWith("19:"))   throw new IllegalArgumentException("Invalid chat id");  if (password != null)   throw new IllegalArgumentException("Not guest account");  this.chatId=id;  return this;}  }
class C{  public void addError(Message message) throws CompilationFailedException {  addErrorAndContinue(message);  if (errors != null && this.errors.size() >= configuration.getTolerance()) {    failIfErrors();  }}  }
class C{  public void fillFieldValues(){  if (!updateDrag.isSelected()) {    initiateMovement.setSelected(false);    initiateMovement.setEnabled(false);  } else {  }  theColor=new Color(worldPanel.getBackgroundColor());}  }
class C{  @RequestMapping(value="/preferences/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> delete(@PathVariable Long id){  log.debug("REST request to delete Preferences : {}",id);  if (SecurityUtils.getCurrentLogin() != null) {    User user=userRepository.findOneByLogin(SecurityUtils.getCurrentLogin()).get();    user.setPreferences(null);    userRepository.save(user);  }  preferencesRepository.delete(id);  preferencesSearchRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("preferences",id.toString())).build();}  }
class C{  private KafkaIO(){}  }
class C{  public static boolean generateMagic(BC2IR bc2ir,GenerationContext gc,MethodReference meth) throws MagicNotImplementedException {  Atom methodName=meth.getName();  if (methodName == MagicNames.getFramePointer) {    bc2ir.push(gc.getTemps().makeFPOp());    gc.forceFrameAllocation();  } else   if (methodName == MagicNames.getTocPointer) {    bc2ir.push(gc.getTemps().makeJTOCOp());  } else   if (methodName == MagicNames.getJTOC) {    bc2ir.push(gc.getTemps().makeTocOp());  } else   if (methodName == MagicNames.getCallerFramePointer) {    Operand fp=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,fp,AC(STACKFRAME_FRAME_POINTER_OFFSET),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setCallerFramePointer) {    Operand val=bc2ir.popAddress();    Operand fp=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(REF_STORE,val,fp,AC(STACKFRAME_FRAME_POINTER_OFFSET),null));  } else   if (methodName == MagicNames.getCompiledMethodID) {    Operand fp=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Load.create(INT_LOAD,val,fp,AC(STACKFRAME_METHOD_ID_OFFSET),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setCompiledMethodID) {    Operand val=bc2ir.popInt();    Operand fp=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(INT_STORE,val,fp,AC(STACKFRAME_METHOD_ID_OFFSET),null));  } else   if (methodName == MagicNames.getNextInstructionAddress) {    Operand fp=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,fp,AC(STACKFRAME_RETURN_ADDRESS_OFFSET),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getReturnAddressLocation) {    Operand fp=bc2ir.popAddress();    RegisterOperand callerFP=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,callerFP,fp,AC(STACKFRAME_FRAME_POINTER_OFFSET),null));    Instruction s=bc2ir._binaryHelper(REF_ADD,callerFP.copyRO(),offsetOperand(STACKFRAME_RETURN_ADDRESS_OFFSET),TypeReference.Address);    bc2ir.appendInstruction(s);  } else   if (methodName == MagicNames.isync) {    bc2ir.appendInstruction(Empty.create(READ_CEILING));  } else   if (methodName == MagicNames.sync) {    bc2ir.appendInstruction(Empty.create(WRITE_FLOOR));  } else   if (methodName == MagicNames.pause) {  } else   if (methodName == MagicNames.dcbst) {    bc2ir.appendInstruction(CacheOp.create(DCBST,bc2ir.popAddress()));  } else   if (methodName == MagicNames.dcbt || methodName == MagicNames.prefetch) {    bc2ir.appendInstruction(CacheOp.create(DCBT,bc2ir.popAddress()));  } else   if (methodName == MagicNames.dcbtst) {    bc2ir.appendInstruction(CacheOp.create(DCBTST,bc2ir.popAddress()));  } else   if (methodName == MagicNames.dcbz) {    bc2ir.appendInstruction(CacheOp.create(DCBZ,bc2ir.popAddress()));  } else   if (methodName == MagicNames.dcbzl) {    bc2ir.appendInstruction(CacheOp.create(DCBZL,bc2ir.popAddress()));  } else   if (methodName == MagicNames.icbi) {    bc2ir.appendInstruction(CacheOp.create(ICBI,bc2ir.popAddress()));  } else {    String msg="Magic method not implemented: " + meth;    if (methodName == MagicNames.returnToNewStack) {      throw MagicNotImplementedException.EXPECTED(msg);    } else {      return false;    }  }  return true;}  }
class C{  public MqttConnector(Supplier<MqttConfig> config){  this.configFn=config;  String cid=configFn.get().getClientId();  if (cid == null)   cid=MqttClient.generateClientId();  clientId=cid;}  }
class C{  LineLayout(@NotNull EditorView view,int startOffset,int endOffset,@NotNull FontRenderContext fontRenderContext){  this(createFragments(view,startOffset,endOffset,fontRenderContext),false);}  }
class C{  public boolean isSortTab(){  Object oo=get_Value(COLUMNNAME_IsSortTab);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void clear(){  super.clear();  double[] keys=_set;  double[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public void test_KBCreateAndDestroy() throws Exception {  final String namespace=getName();  final Properties properties=getProperties();  Journal jnl=null;  try {    jnl=new Journal(properties);    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties)).get();    assertKBExists(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new DestroyKBTask(namespace)).get();    assertKBNotFound(jnl,namespace);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  private byte[] pageToByteArray(P page){  try {    if (page == null) {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      ObjectOutputStream oos=new ObjectOutputStream(baos);      oos.writeInt(EMPTY_PAGE);      oos.close();      baos.close();      byte[] array=baos.toByteArray();      byte[] result=new byte[pageSize];      System.arraycopy(array,0,result,0,array.length);      return result;    } else {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      ObjectOutputStream oos=new ObjectOutputStream(baos);      oos.writeInt(FILLED_PAGE);      page.writeExternal(oos);      oos.close();      baos.close();      byte[] array=baos.toByteArray();      if (array.length > this.pageSize) {        throw new IllegalArgumentException("Size of page " + page + " is greater than specified"+ " pagesize: "+ array.length+ " > "+ pageSize);      } else       if (array.length == this.pageSize) {        return array;      } else {        byte[] result=new byte[pageSize];        System.arraycopy(array,0,result,0,array.length);        return result;      }    }  } catch (  IOException e) {    throw new RuntimeException("IOException occurred! ",e);  }}  }
class C{  public IgfsEntryInfo length(long len){  throw new UnsupportedOperationException("length");}  }
class C{  public <T extends Solution>Population(T[] solutions){  this(Arrays.asList(solutions));}  }
class C{  protected String handleError(Object source,String msg){  if (msg == null)   return null;  msg=source.getClass().getName() + ": " + msg;  log(msg);  return msg;}  }
class C{  public String toString(){  return this.name().toLowerCase().replaceAll("_","-");}  }
class C{  public ByteString toAsciiUppercase(){  for (int i=0; i < data.length; i++) {    byte c=data[i];    if (c < 'a' || c > 'z')     continue;    byte[] lowercase=data.clone();    lowercase[i++]=(byte)(c - ('a' - 'A'));    for (; i < lowercase.length; i++) {      c=lowercase[i];      if (c < 'a' || c > 'z')       continue;      lowercase[i]=(byte)(c - ('a' - 'A'));    }    return new ByteString(lowercase);  }  return this;}  }
class C{  static void installLazyActionMap(JComponent c,Class loaderClass,String defaultsKey){  ActionMap map=(ActionMap)UIManager.get(defaultsKey);  if (map == null) {    map=new PaletteLazyActionMap(loaderClass);    UIManager.getLookAndFeelDefaults().put(defaultsKey,map);  }  SwingUtilities.replaceUIActionMap(c,map);}  }
class C{  public static boolean canDelete(TestCase tc,int pos) throws IllegalArgumentException {  return dependentPositions(tc,pos).isEmpty();}  }
class C{  public void beginCapturing(boolean movie){  Rectangle2D r=getImageSize();synchronized (this) {    x=(int)r.getX();    y=(int)r.getY();    width=(int)r.getWidth();    height=(int)r.getHeight();    writeBuffer_=true;    keepOnWriting_|=movie;  }  fillBuffer(true);}  }
class C{  public boolean isSafeMethod(SootMethod method){  String cname=method.getDeclaringClass().getName();  if (safeClasses.contains(cname))   return true;  if (!safeClassesAndMethods.containsKey(cname))   return false;  Map<String,Set<List<Type>>> methods=safeClassesAndMethods.get(cname);  if (methods == null || methods.isEmpty())   return true;  String mname=method.getName();  if (!methods.containsKey(mname))   return false;  Set<List<Type>> msigs=methods.get(mname);  if (msigs == null || msigs.isEmpty())   return true;  return msigs.contains(method.getParameterTypes());}  }
class C{  private void presentPermissionExplanationToastForFeature(String feature){  if (!TextUtils.isEmpty(feature)) {    if (feature.equals(FEATURE_KEY_PREF_CONTACTS)) {      this.presentReadContactPermissionExplanationToast();    } else     if (feature.equals(FEATURE_KEY_PREF_DIALER)) {      this.presentWriteCallLogPermissionExplanationToast();    }  }}  }
class C{  private void updateImage(){  Image fxImage=getImage(getDetails().image.getDefault());  this.imageView.setImage(fxImage);}  }
class C{  public int nrOfParagraphs(){  return superSection.nrOfParagraphs();}  }
class C{  public void addGap(int length){  super.addGap(length);}  }
class C{  PluginInfo(String name,String description,boolean site,String version,boolean jvm,String classname,boolean isolated){  this.name=name;  this.description=description;  this.site=site;  this.jvm=jvm;  this.version=version;  this.classname=classname;  this.isolated=isolated;}  }
class C{  BigDecimal niceBigDecimal(final BigDecimal toNicefy){  Integer intValue=toNicefy.intValue();  String intAsString=intValue.toString();  int tailZeroCount=intAsString.length() / 2;  if (tailZeroCount == 0) {    tailZeroCount=intAsString.length();  }  return new BigDecimal(intValue).setScale(-1 * tailZeroCount,BigDecimal.ROUND_HALF_UP);}  }
class C{  public void sendInputEvent(InputEvent event,int policyFlags){  if (event == null) {    throw new IllegalArgumentException("event must not be null");  }  if (mHost == null) {    throw new IllegalStateException("Cannot send input event because the input filter " + "is not installed.");  }  if (mOutboundInputEventConsistencyVerifier != null) {    mOutboundInputEventConsistencyVerifier.onInputEvent(event,0);  }  try {    mHost.sendInputEvent(event,policyFlags);  } catch (  RemoteException re) {  }}  }
class C{  private boolean closeInternal(ErrorCode errorCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.errorCode != null) {      return false;    }    if (in.finished && out.finished) {      return false;    }    this.errorCode=errorCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  public void restore(){  MDC.setContextMap(context);}  }
class C{  private VOParameter findParameter(final List<VOParameter> list,final ParameterType parameterType,final String parameterId){  if (list != null) {    for (    VOParameter e : list) {      VOParameterDefinition paramDef=e.getParameterDefinition();      if (paramDef.getParameterType() == parameterType && paramDef.getParameterId().equals(parameterId)) {        return e;      }    }  }  return null;}  }
class C{  protected String formatJavaOpts(String javaOpts){  String javaOptsBase64=DatatypeConverter.printBase64Binary(javaOpts.getBytes(Charset.forName("UTF-8")));  return String.format("\"%s\"",javaOptsBase64.replace("=","&equals;"));}  }
class C{  public static <V>GridTuple<V> t(@Nullable V v){  return new GridTuple<>(v);}  }
class C{  public int nextInt() throws WorkloadException {  throw new WorkloadException("DiscreteGenerator does not support nextInt()");}  }
class C{  public void assertSquare(){  if (!isSquare()) {    throw new SizeException("Matrix must be square!");  }}  }
class C{  public List<Style> listImageStyle(String bucketName,GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  ;  params.put(SUBRESOURCE_STYLE,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.GET).setBucket(bucketName).setParameters(params).setOriginalRequest(genericRequest).build();  return doOperation(request,listImageStyleResponseParser,bucketName,null,true);}  }
class C{  public static String asTextString(String basicString){  if (basicString == null) {    return null;  }  if (basicString.length() >= 2) {    if ((basicString.charAt(0) == (char)0xFE && basicString.charAt(1) == (char)0xFF)) {      return asUTF16BEEncoded(basicString);    }  }  return asPDFDocEncoded(basicString);}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  private static int[] toIntArray(String str,boolean shouldThrow){  if (str == null) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("str == null");  }  int length=str.length();  if (length == 0) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int count=1;  boolean wasDot=true;  char c;  for (int i=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      if (wasDot) {        if (!shouldThrow) {          return null;        }        throw new IllegalArgumentException("Incorrect syntax");      }      wasDot=true;      count++;    } else     if (c >= '0' && c <= '9') {      wasDot=false;    } else {      if (!shouldThrow) {        return null;      }      throw new IllegalArgumentException("Incorrect syntax");    }  }  if (wasDot) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  if (count < 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int[] oid=new int[count];  for (int i=0, j=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      j++;    } else {      oid[j]=oid[j] * 10 + c - 48;    }  }  if (oid[0] > 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  } else   if (oid[0] != 2 && oid[1] > 39) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  return oid;}  }
class C{  private FieldInfos initFieldInfos() throws IOException {  if (!si.hasFieldUpdates()) {    return core.coreFieldInfos;  } else {    FieldInfosFormat fisFormat=si.info.getCodec().fieldInfosFormat();    final String segmentSuffix=Long.toString(si.getFieldInfosGen(),Character.MAX_RADIX);    return fisFormat.read(si.info.dir,si.info,segmentSuffix,IOContext.READONCE);  }}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public void addGetDataEventListener(Executor executor,GetDataEventListener listener){  getDataEventListeners.add(new ListenerRegistration<GetDataEventListener>(listener,executor));}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);}  }
class C{  @SuppressWarnings("ResourceType") public void register(int interestSet,Selectable selectable){  if (interestSet == 0) {    return;  }  try {    SelectionKey key=selectable.getChannel().register(selector,interestSet);    key.attach(selectable);    selectable.setSelectionKey(key);  } catch (  ClosedChannelException e) {    selectable.onClose(e);  }}  }
class C{  public ParcelFileDescriptor openDownloadedFile(long id) throws FileNotFoundException {  return contentResolver.openFileDescriptor(getDownloadUri(id),"r");}  }
class C{  public boolean shouldCollide(Body other){  if (m_type != BodyType.DYNAMIC && other.m_type != BodyType.DYNAMIC) {    return false;  }  for (JointEdge jn=m_jointList; jn != null; jn=jn.next) {    if (jn.other == other) {      if (jn.joint.getCollideConnected() == false) {        return false;      }    }  }  return true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void generateRandomNetwork() throws Exception {  if (m_otherBayesNet == null) {    Init(m_nNrOfNodes,m_nCardinality);    generateRandomNetworkStructure(m_nNrOfNodes,m_nNrOfArcs);    generateRandomDistributions(m_nNrOfNodes,m_nCardinality);  } else {    m_nNrOfNodes=m_otherBayesNet.getNrOfNodes();    m_ParentSets=m_otherBayesNet.getParentSets();    m_Distributions=m_otherBayesNet.getDistributions();    random=new Random(m_nSeed);    ArrayList<Attribute> attInfo=new ArrayList<Attribute>(m_nNrOfNodes);    for (int iNode=0; iNode < m_nNrOfNodes; iNode++) {      int nValues=m_otherBayesNet.getCardinality(iNode);      ArrayList<String> nomStrings=new ArrayList<String>(nValues + 1);      for (int iValue=0; iValue < nValues; iValue++) {        nomStrings.add(m_otherBayesNet.getNodeValue(iNode,iValue));      }      Attribute att=new Attribute(m_otherBayesNet.getNodeName(iNode),nomStrings);      attInfo.add(att);    }    m_Instances=new Instances(m_otherBayesNet.getName(),attInfo,100);    m_Instances.setClassIndex(m_nNrOfNodes - 1);  }}  }
class C{  public void addStaticFieldRead(String owner,String methodName,String targetClass,String targetField){  StaticFieldReadEntry read=new StaticFieldReadEntry(owner,methodName,targetClass,targetField);  logger.info("Adding new static field read: " + read.toString());  staticFieldReads.add(read);}  }
class C{  @Override public int numAttributes(){  return m_NumAttributes;}  }
class C{  public RuntimeException(java.lang.String s){}  }
class C{  public void aggregateContactWithRcsRawContact(ContactInfo contactInfo) throws ContactManagerException, FileAccessException {synchronized (mContactInfoCache) {    setContactInfoInternal(contactInfo,contactInfo);  }}  }
class C{  public StringLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean isSameDistribution(){  Object oo=get_Value(COLUMNNAME_IsSameDistribution);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private String processXml(String sourceXml,int decimalPlacesSetting) throws Exception {  String resultXml=sourceXml;  if (resultXml != null && resultXml.length() > 0 && decimalPlacesSetting > 0) {    Document doc=XMLConverter.convertToDocument(sourceXml,false);    if (doc == null) {      return resultXml;    }    updatePrices(doc,decimalPlacesSetting);    resultXml=XMLConverter.convertToString(doc,false);  }  return resultXml;}  }
class C{  public boolean isCulled(Spatial spat){  final CullHint cm=spat.getSceneHints().getCullHint();  if (cm == CullHint.Always) {    return (true);  } else   if (cm == CullHint.Never) {    return (false);  } else   if (cm == CullHint.Dynamic) {    final int state=getPlaneState();    boolean culled=contains(spat.getWorldBound()) == Camera.FrustumIntersect.Outside;    setPlaneState(state);    return (culled);  } else {    return (false);  }}  }
class C{  public Integer loadIdNameParentValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  _parentId=statement.getLongInteger(index++);  _type=statement.getLongInteger(index++);  return new Integer(index);}  }
class C{  protected void makeGeometry(ShapeData shapeData){  Object cacheKey=new Geometry.CacheKey(this.getClass(),"Pyramid0",this.subdivisions);  Geometry geom=(Geometry)this.getGeometryCache().getObject(cacheKey);  if (geom == null) {    makeUnitPyramid(this.subdivisions,shapeData.getMeshes());    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Pyramid" + piece,this.subdivisions);      this.getGeometryCache().add(cacheKey,shapeData.getMesh(piece));    }  } else {    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Pyramid" + piece,this.subdivisions);      geom=(Geometry)this.getGeometryCache().getObject(cacheKey);      shapeData.addMesh(piece,geom);    }  }}  }
class C{  public static void loadOtherDomains(String dirName,String fileName,ConfigData configData){  try {    String filePath=dirName + fileName;    File file=new File(filePath);    if (!file.exists()) {      return;    }    ArrayList<String> otherDomains=new ArrayList<String>();    FileInputStream fis=new FileInputStream(filePath);    Scanner scan=new Scanner(fis);    while (scan.hasNextLine()) {      String line=scan.nextLine();      if (otherDomains == null)       otherDomains=new ArrayList<String>();      otherDomains.add(line);    }    scan.close();    fis.close();    if (otherDomains != null) {      configData.otherDomains=otherDomains.toArray(new String[otherDomains.size()]);    }  } catch (  Exception e) {  }}  }
class C{  public Memory(){  this(false);}  }
class C{  @Override public final int addLeafEntry(E entry){  if (!entry.isLeafEntry()) {    throw new UnsupportedOperationException("Entry is not a leaf entry!");  }  if (!isLeaf()) {    throw new UnsupportedOperationException("Node is not a leaf node!");  }  return addEntry(entry);}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int width,int height,int margin) throws WriterException {  int errorCorrectionLevel=2;  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int lineThickness=2;  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(lineThickness,aspectRatio * lineThickness);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale * lineThickness,scale * aspectRatio * lineThickness);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix,margin);  }  return bitMatrixFrombitArray(originalScale,margin);}  }
class C{  public int loadGLShader(int type,int resId){  String code=readRawTextFile(resId);  int shader=GLES20.glCreateShader(type);  GLES20.glShaderSource(shader,code);  GLES20.glCompileShader(shader);  final int[] compileStatus=new int[1];  GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compileStatus,0);  if (compileStatus[0] == 0) {    Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shader));    GLES20.glDeleteShader(shader);    shader=0;  }  if (shader == 0) {    throw new RuntimeException("Error creating shader.");  }  return shader;}  }
class C{  public void updateColumn(int index,String header){  WTableColumn tableColumn;  tableColumn=getColumn(index);  tableColumn.setHeaderValue(Util.cleanAmp(header));  return;}  }
class C{  public Builder initializeAsFromCloseToOpen(IndexMetaData indexMetaData){  return initializeEmpty(indexMetaData,new UnassignedInfo(UnassignedInfo.Reason.INDEX_REOPENED,null));}  }
class C{  public static List<String> tokenize(String source,char separator){  ArrayList<String> tokenized=new ArrayList<String>();  if (impl == null) {    int len=source.length();    boolean lastSeparator=false;    StringBuilder buf=new StringBuilder();    for (int iter=0; iter < len; iter++) {      char current=source.charAt(iter);      if (current == separator) {        if (lastSeparator) {          buf.append(separator);          lastSeparator=false;          continue;        }        lastSeparator=true;        if (buf.length() > 0) {          tokenized.add(buf.toString());          buf=new StringBuilder();        }      } else {        lastSeparator=false;        buf.append(current);      }    }    if (buf.length() > 0) {      tokenized.add(buf.toString());    }  } else {    impl.splitString(source,separator,tokenized);  }  return tokenized;}  }
class C{  @Override public final void postSetUp() throws Exception {  disconnectAllFromDS();  Wait.pause(5000);  final Host host=Host.getHost(0);  vm0=host.getVM(0);  vm1=host.getVM(1);  Object[] objArr=new Object[4];  objArr[0]=new Boolean(true);  objArr[1]=new Boolean(true);  objArr[2]=new Boolean(true);  objArr[3]=new Boolean(true);  vm0.invoke(NewRegionAttributesDUnitTest.class,"createServerCache",objArr);  vm1.invoke(NewRegionAttributesDUnitTest.class,"createServerCache",objArr);}  }
class C{  private static ParsedValue parseStringValue(String card){  int indexOfQuote=card.indexOf('\'');  if (indexOfQuote >= 0) {    Matcher matcher=FitsHeaderCardParser.STRING_PATTERN.matcher(card);    if (matcher.find(indexOfQuote)) {      if (card.lastIndexOf('/',matcher.start()) < 0) {        return new ParsedValue(deleteQuotes(matcher.group(1)),extractComment(card,matcher.end()));      }    }  }  return null;}  }
class C{  public AdministracionException(String message){  this(message,null);}  }
class C{  private ThumbnailatorUtils(){}  }
class C{  public int size(){  return delegate.size();}  }
class C{  public CTutorial(final String name,final String description,final List<CTutorialStep> steps){  m_name=Preconditions.checkNotNull(name,"IE00998: Name argument can not be null");  m_description=Preconditions.checkNotNull(description,"IE00999: Description argument can not be null");  m_steps=new ArrayList<CTutorialStep>(Preconditions.checkNotNull(steps,"IE01000: Steps argument can not be null"));  Preconditions.checkArgument(!steps.isEmpty(),"IE01001: Tutorials with no steps are not allowed");}  }
class C{  public static ReflectionProvider newReflectionProvider(){  return DependencyInjectionFactory.newInstance(reflectionProviderType);}  }
class C{  public static boolean safeSaveFile(String fileToWrite,String backupFile,String m){  try {    PrintWriter out=new PrintWriter(backupFile);    out.println(m);    out.close();    File a=new File(fileToWrite);    File b=new File(backupFile);    Files.copy(b.toPath(),a.toPath(),StandardCopyOption.REPLACE_EXISTING);    Files.delete(b.toPath());    return true;  } catch (  IOException ioex) {    return false;  }}  }
class C{  public static ExcludedRefs.Builder createAppDefaults(){  ExcludedRefs.Builder excluded=createAndroidDefaults();  if (SDK_INT >= KITKAT && SDK_INT <= LOLLIPOP) {    excluded.instanceField("android.app.ActivityThread$ActivityClientRecord","nextIdle");  }  if (SDK_INT <= KITKAT) {    excluded.instanceField("android.widget.Editor$EasyEditSpanController","this$0");    excluded.instanceField("android.widget.Editor$SpanController","this$0");  }  if (SDK_INT == LOLLIPOP) {    excluded.staticField("android.media.session.MediaSessionLegacyHelper","sInstance");  }  if (SDK_INT < LOLLIPOP_MR1) {    excluded.staticField("android.text.TextLine","sCached");  }  if (SDK_INT < LOLLIPOP) {    excluded.instanceField("android.os.Message","obj");    excluded.instanceField("android.os.Message","next");    excluded.instanceField("android.os.Message","target");  }  if (SDK_INT >= KITKAT && SDK_INT <= LOLLIPOP_MR1) {    excluded.instanceField("android.view.inputmethod.InputMethodManager","mNextServedView");    excluded.instanceField("android.view.inputmethod.InputMethodManager","mServedView");    excluded.instanceField("android.view.inputmethod.InputMethodManager","mServedInputConnection");  }  if (SDK_INT >= ICE_CREAM_SANDWICH_MR1 && SDK_INT <= LOLLIPOP_MR1) {    excluded.instanceField("android.view.inputmethod.InputMethodManager","mCurRootView");  }  if (SDK_INT >= ICE_CREAM_SANDWICH && SDK_INT <= LOLLIPOP_MR1) {    excluded.instanceField("android.animation.LayoutTransition$1","val$parent");  }  if (SDK_INT >= JELLY_BEAN || SDK_INT <= LOLLIPOP_MR1) {    excluded.instanceField("android.view.textservice.SpellCheckerSession$1","this$0");  }  if (MOTOROLA.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.instanceField("android.app.admin.DevicePolicyManager$SettingsObserver","this$0");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.staticField("com.samsung.android.smartclip.SpenGestureManager","mContext");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT >= KITKAT && SDK_INT <= LOLLIPOP) {    excluded.staticField("android.sec.clipboard.ClipboardUIManager","sInstance");  }  if (LG.equals(MANUFACTURER) && SDK_INT >= KITKAT && SDK_INT <= LOLLIPOP) {    excluded.staticField("android.widget.BubblePopupHelper","sHelper");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.staticField("com.android.org.chromium.android_webview.AwResource","sResources");  }  if (NVIDIA.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.instanceField("com.nvidia.ControllerMapper.MapperClient$ServiceClient","this$0");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.staticField("android.widget.TextView","mLastHoveredView");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.instanceField("android.os.PersonaManager","mContext");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.instanceField("android.content.res.Resources","mContext");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.instanceField("android.view.ViewConfiguration","mContext");  }  if (SAMSUNG.equals(MANUFACTURER) && SDK_INT == KITKAT) {    excluded.staticField("android.media.AudioManager","mContext_static");  }  return excluded;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("R_InterestArea_ID"))     m_R_InterestArea_ID=para[i].getParameterAsInt(); else     if (name.equals("R_MailText_ID"))     m_R_MailText_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     m_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_User_ID"))     m_AD_User_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public GeneratorEntryItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  Index(Node<V> node,Index<V> down,Index<V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  public Sensor(final int row,final int col,final Filter filter,final ReceptiveField receptiveField){  if (filter == null) {    throw new IllegalArgumentException("filter must not be null");  }  if (receptiveField == null) {    throw new IllegalArgumentException("receptiveField must not be null");  }  this.row=row;  this.col=col;  this.filter=filter;  this.receptiveField=receptiveField;  updateProducerDescription();  propertyChangeSupport=new PropertyChangeSupport(this);}  }
class C{  public void putR4(float r4){  int bits=Float.floatToIntBits(r4);  putINT32(bits);}  }
class C{  protected Scope computeEnclosingScope(){  Class<?> receiver=getRecvr();  Method m=receiver.getEnclosingMethod();  if (m != null)   return MethodScope.make(m);  Constructor<?> cnstr=receiver.getEnclosingConstructor();  if (cnstr != null)   return ConstructorScope.make(cnstr);  Class<?> c=receiver.getEnclosingClass();  if (c != null)   return ClassScope.make(c);  return DummyScope.make();}  }
class C{  public synchronized static <T>T unmarshal(String content,Class<T> tClass){  StringReader stringReader=new StringReader(content);  try {    JAXBContext context=JAXBContext.newInstance(tClass);    Unmarshaller unMarshaller=context.createUnmarshaller();    return tClass.cast(unMarshaller.unmarshal(stringReader));  } catch (  JAXBException je) {    _log.error("Unable to parse XML content.",je);  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected IFigure createFigure(){  final NoteFigure noteFigure=new NoteFigure(getNote());  Rectangle bounds=((DiagramPart)getParent()).getDiagram().getInitBounds(getNote());  if (bounds != null) {    noteFigure.setBounds(bounds);    noteFigure.setPreferredSize(bounds.getSize());  } else   if (noteFigure.getSize().isEmpty()) {    noteFigure.setPreferredSize(new Dimension(100,50));  }  return noteFigure;}  }
class C{  public OptimizationPlanCompositeElement(String n,OptimizationPlanElement[] e){  myName=n;  myElements=e;}  }
class C{  protected String doIt() throws java.lang.Exception {  if (m_DeleteOldImported) {    int no=0;    for (    X_I_Product_ASI ip_asi : getRecords(true,false)) {      ip_asi.deleteEx(true);      no++;    }    log.fine("Delete Old Impored =" + no);  }  fillIDValues();  importRecords();  return "Imported: " + imported + ", Not imported: "+ notimported;}  }
class C{  public static void serialize(Writable writable,OutputStream os){  serialize(asString(writable),os);}  }
class C{  public static MessageCatalog parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  MessageCatalog object=new MessageCatalog();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"MessageCatalog".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (MessageCatalog)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","catalogName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setCatalogName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","catalogUri").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setCatalogUri(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","catalogVersion").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setCatalogVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","lastModified").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setLastModified(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","locale").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setLocale(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","moduleName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setModuleName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  public DefaultEncodingDefinition(String firebirdEncodingName,Charset charset,int maxBytesPerChar,int firebirdCharacterSetId,boolean firebirdOnly){  this.firebirdEncodingName=firebirdEncodingName;  this.charset=charset;  this.maxBytesPerChar=maxBytesPerChar;  this.firebirdOnly=firebirdOnly;  this.firebirdCharacterSetId=firebirdCharacterSetId;}  }
class C{  public static Document createXMLFrmPersistFld(Idocarchdet idocarchdet,Integer bookID,AxSf axsf,boolean includeDate,Locale locale){  FieldFormat fieldFormat=new FieldFormat(idocarchdet.getDetval());  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_CONFREG_TEXT);  FFldDef fldDef=null;  int fldid=0;  String text=null;  for (Iterator it=fieldFormat.getFlddefs().values().iterator(); it.hasNext(); ) {    text="";    fldDef=(FFldDef)it.next();    fldid=Integer.parseInt(fldDef.getColname().substring(XML_FLD_TEXT.length(),fldDef.getColname().length()));switch (fldid) {case 2:{        if (includeDate) {          try {            text=axsf.getLocaleAttributeName(bookID,Integer.toString(fldid),locale,fldDef.getName());          } catch (          Exception e) {          }          addFld(Integer.toString(fldid),text,root);        }        break;      }case 7:case 8:case 9:case 10:case 11:case 12:case 13:{      try {        text=axsf.getLocaleAttributeName(bookID,Integer.toString(fldid),locale,fldDef.getName());      } catch (      Exception e) {      }      addFld(Integer.toString(fldid),text,root);      break;    }default :{    if (axsf instanceof AxSfIn) {      if (fldid == 14 || fldid == 15 || fldid == 16 || fldid == 17 || (fldid > com.ieci.tecdoc.common.isicres.Keys.EREG_FDR_MATTER + 1 && fldDef.getType() != 2)) {        try {          text=axsf.getLocaleAttributeName(bookID,Integer.toString(fldid),locale,fldDef.getName());        } catch (        Exception e) {        }        addFld(Integer.toString(fldid),text,root);      }    } else {      if (fldid > com.ieci.tecdoc.common.isicres.Keys.SREG_FDR_MATTER + 1 && fldDef.getType() != 2) {        try {          text=axsf.getLocaleAttributeName(bookID,Integer.toString(fldid),locale,fldDef.getName());        } catch (        Exception e) {        }        addFld(Integer.toString(fldid),text,root);      }    }  }}}return document;}  }
class C{  static void computeHash(int[] arrW){  int a=arrW[HASH_OFFSET];  int b=arrW[HASH_OFFSET + 1];  int c=arrW[HASH_OFFSET + 2];  int d=arrW[HASH_OFFSET + 3];  int e=arrW[HASH_OFFSET + 4];  int temp;  for (int t=16; t < 80; t++) {    temp=arrW[t - 3] ^ arrW[t - 8] ^ arrW[t - 14]^ arrW[t - 16];    arrW[t]=(temp << 1) | (temp >>> 31);  }  for (int t=0; t < 20; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | ((~b) & d)) + (e + arrW[t] + 0x5A827999);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=20; t < 40; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0x6ED9EBA1);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=40; t < 60; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | (b & d) | (c & d)) + (e + arrW[t] + 0x8F1BBCDC);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=60; t < 80; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0xCA62C1D6);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  arrW[HASH_OFFSET]+=a;  arrW[HASH_OFFSET + 1]+=b;  arrW[HASH_OFFSET + 2]+=c;  arrW[HASH_OFFSET + 3]+=d;  arrW[HASH_OFFSET + 4]+=e;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.AUTOUNIQUE_ATTRIBUTE___AUTOUNIQUE_1:    setAutounique_1(AUTOUNIQUE_1_EDEFAULT);  return;case UmplePackage.AUTOUNIQUE_ATTRIBUTE___NAME_1:setName_1(NAME_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static void sort(double[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  SampleModel sampleModel=new MultiPixelPackedSampleModel(dataType,w,h,pixelBitStride);  return sampleModel;}  }
class C{  private void deleteConsistencyGroup(VPlexConsistencyGroupInfo cgInfo) throws VPlexApiException {  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DELETE_CG);    s_logger.info("Delete consistency group URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_G,cgInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Delete consistency group POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Delete consistency group response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Consistency group deletion completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.deleteCGFailureStatus(cgInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully deleted consistency group");  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDeleteCG(cgInfo.getName(),e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  private SaveAction(){  super("Save");}  }
class C{  public static List<List<File>> findJavaFilesPerDirectory(File parent,String... dirNames){  List<List<File>> filesPerDirectory=new ArrayList<>();  for (  String dirName : dirNames) {    File dir=new File(parent,dirName);    if (dir.isDirectory()) {      filesPerDirectory.addAll(findJavaTestFilesInDirectory(dir));    }  }  return filesPerDirectory;}  }
class C{  public void testMac07() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    Mac.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      Mac.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithmException must be thrown when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  @Override public IList<IAgent> migrateMicroAgents(final IScope scope,final ISpecies oldMicroSpecies,final ISpecies newMicroSpecies){  final IPopulation<? extends IAgent> oldMicroPop=this.getPopulationFor(oldMicroSpecies);  final IPopulation<? extends IAgent> newMicroPop=this.getPopulationFor(newMicroSpecies);  final IList<IAgent> immigrants=GamaListFactory.create(Types.AGENT);  while (!oldMicroPop.isEmpty()) {    final IAgent m=oldMicroPop.get(0);    final SavedAgent savedMicro=new SavedAgent(scope,m);    m.dispose();    immigrants.add(savedMicro.restoreTo(scope,newMicroPop));  }  return immigrants;}  }
class C{  public javax2.sip.address.Address createAddress(String address) throws java.text.ParseException {  if (address == null)   throw new NullPointerException("null address");  if (address.equals("*")) {    AddressImpl addressImpl=new AddressImpl();    addressImpl.setAddressType(AddressImpl.WILD_CARD);    SipURI uri=new SipUri();    uri.setUser("*");    addressImpl.setURI(uri);    return addressImpl;  } else {    StringMsgParser smp=new StringMsgParser();    return smp.parseAddress(address);  }}  }
class C{  protected Depend_Impl(){  super();}  }
class C{  public final BooleanProperty customMaximizeProperty(){  return this.customMaximize;}  }
class C{  @SmallTest public void testGmailReplyButtonsScenario(){  assertBetterCandidate(View.FOCUS_LEFT,new Rect(223,380,312,417),new Rect(102,380,210,417),new Rect(111,443,206,480));  assertBeamBeats(View.FOCUS_LEFT,new Rect(223,380,312,417),new Rect(102,380,210,417),new Rect(111,443,206,480));  assertBeamsOverlap(View.FOCUS_LEFT,new Rect(223,380,312,417),new Rect(102,380,210,417));  assertBeamsDontOverlap(View.FOCUS_LEFT,new Rect(223,380,312,417),new Rect(111,443,206,480));  assertTrue("major axis distance less than major axis distance to " + "far edge",FocusFinderHelper.majorAxisDistance(View.FOCUS_LEFT,new Rect(223,380,312,417),new Rect(102,380,210,417)) < FocusFinderHelper.majorAxisDistanceToFarEdge(View.FOCUS_LEFT,new Rect(223,380,312,417),new Rect(111,443,206,480)));}  }
class C{  public IntroduceIndirectionDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INTRODUCE_INDIRECTION,project,description,comment,arguments,flags);}  }
class C{  @HLEFunction(nid=0xE7833020,version=150) public int sceSdSetIndex(@BufferInfo(lengthInfo=LengthInfo.fixedLength,length=40,usage=Usage.out) TPointer ctx2Addr,int mode){  SAVEDATA.SD_Ctx1 ctx=new SAVEDATA.SD_Ctx1();  int result=crypto.getSAVEDATAEngine().hleSdSetIndex(ctx,mode);  ctx.write(ctx2Addr);  return result;}  }
class C{  public Configuration(String file,String defaultFile) throws IOException {  this.file=file;  basePath=new File(file).getAbsolutePath();  basePath=basePath.substring(0,basePath.lastIndexOf(fileSeparator) + 1);  this.load(new FileInputStream(file));  if (defaultFile != null) {    defaults=new Configuration(defaultFile);  }}  }
class C{  public NoCrowdingScoringFunctionFactory(ScoringFunctionFactory delegate){  this.delegate=delegate;}  }
class C{  public jMatrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  public static void report(){  if (License.isDeveloper()) {    for (    final Object obj : SPIES) {      Diagnostic.developerLog(obj.toString());    }  }}  }
class C{  public OperationStateException(){  super();}  }
class C{  @Uninterruptible private static void checkReference(Address refaddr,int slot){  ObjectReference ref=refaddr.loadObjectReference();  if (!MemoryManager.validRef(ref)) {    Log.writeln();    Log.writeln("Invalid ref reported while scanning statics");    Log.write("Static slot: ");    Log.writeln(slot);    Log.writeln();    Log.write(refaddr);    Log.write(":");    Log.flush();    MemoryManager.dumpRef(ref);    Log.writeln();    Log.writeln("Dumping stack:");    RVMThread.dumpStack();    VM.sysFail("\n\nScanStack: Detected bad GC map; exiting RVM with fatal error");  }}  }
class C{  public int support(){  return m_counter;}  }
class C{  public void testExpiredCertificate() throws Exception {  doTest(EXPIRED_CERT_CN,true);}  }
class C{  public TextBuilder(String str){  this();  append(str);}  }
class C{  public void onGoToSanFran(View view){  if (!checkReady()) {    return;  }  mStreetViewPanorama.setPosition(SAN_FRAN,30);}  }
class C{  static public void doneWithArguments(Context ctx,LocalMember res[]){  for (int i=0; i < res.length; i++) {    if (res[i].originalOfCopy.accessPeer == res[i]) {      res[i].originalOfCopy.accessPeer=null;    }  }}  }
class C{  public static boolean isSOTrx(Properties ctx,int WindowNo){  String s=getContext(ctx,WindowNo,"IsSOTrx",true);  if (s != null && s.equals("N"))   return false;  return true;}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public void dumpCompressedValues(DataOutputStream dos,long values) throws IOException {  final long whichLong=((values - 1) >>> WHICH_LONG) * mBits;  int whichArr=0;  long nextSwitch=mMaxLongsPerArray;  int accessLong=0;  for (long i=0; i < whichLong + mBits; i++) {    if (i == nextSwitch) {      accessLong=0;      whichArr++;      nextSwitch+=mMaxLongsPerArray;    }    dos.writeLong(mData[whichArr][accessLong++]);  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public void mergeType(final ExpressionType otherType){  if (type != null) {    if (otherType != null) {      type=type.merge(otherType);      if (otherType.isNegated()) {        negateStrings();      }    }  } else {    type=otherType;  }}  }
class C{  public boolean hasNext(){  return (index < endIndex);}  }
class C{  public CompositeResourceMapping(String providerId,Object modelObject,ResourceMapping[] mappings){  this.modelObject=modelObject;  this.mappings=mappings;  this.providerId=providerId;}  }
class C{  public void reqRealTimeBars(int reqId,Contract contract,int barSize,String whatToShow,boolean useRTH){}  }
class C{  protected void addReadonlyPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Property_readonly_feature"),getString("_UI_PropertyDescriptor_description","_UI_Property_readonly_feature","_UI_Property_type"),TypesPackage.Literals.PROPERTY__READONLY,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  @Override public void respond(@Nullable String newNick){  getBot().sendIRC().changeNick(newNick);}  }
class C{  public Coordinates convertCoordinatesFrom(CoordinateSystem otherCoordinateSystem,Coordinates otherCoordinates,double ratio,double xAxisShift,double yAxisShift){  double[] resultX=convertCoordinatesBetweenAxises(getXAxis(),otherCoordinateSystem.getXAxis(),otherCoordinates.getXCoordinatesAsDoubles(),ratio,xAxisShift);  double[] resultY=convertCoordinatesBetweenAxises(getYAxis(),otherCoordinateSystem.getYAxis(),otherCoordinates.getYCoordinatesAsDoubles(),ratio,yAxisShift);  return new DoubleCoordinates(resultX,resultY);}  }
class C{  public static PreviousExpression previous(int index,String property){  return new PreviousExpression(index,property);}  }
class C{  public MInvoice(MOrder order,int C_DocTypeTarget_ID,Timestamp invoiceDate){  this(order.getCtx(),0,order.get_TrxName());  setClientOrg(order);  setOrder(order);  if (C_DocTypeTarget_ID <= 0) {    MDocType odt=MDocType.get(order.getCtx(),order.getC_DocType_ID());    if (odt != null) {      C_DocTypeTarget_ID=odt.getC_DocTypeInvoice_ID();      if (C_DocTypeTarget_ID <= 0)       throw new AdempiereException("@NotFound@ @C_DocTypeInvoice_ID@ - @C_DocType_ID@:" + odt.get_Translation(MDocType.COLUMNNAME_Name));    }  }  setC_DocTypeTarget_ID(C_DocTypeTarget_ID);  if (invoiceDate != null)   setDateInvoiced(invoiceDate);  setDateAcct(getDateInvoiced());  setSalesRep_ID(order.getSalesRep_ID());  setC_BPartner_ID(order.getBill_BPartner_ID());  setC_BPartner_Location_ID(order.getBill_Location_ID());  setAD_User_ID(order.getBill_User_ID());}  }
class C{  private void removeObservedFile(OCFile file,Account account){  Log_OC.v(TAG,"Removing a file from being watched");  if (file == null) {    Log_OC.e(TAG,"Trying to remove a NULL file");    return;  }  if (account == null) {    Log_OC.e(TAG,"Trying to add a file with a NULL account to observer");    return;  }  String localPath=file.getStoragePath();  if (localPath == null || localPath.length() <= 0) {    localPath=FileStorageUtils.getDefaultSavePathFor(account.name,file);  }  removeObservedFile(localPath);}  }
class C{  private void validateFile(File jsonFile) throws AdeUsageException {  if (!jsonFile.isFile()) {    throw new AdeUsageException("Input is not a file: " + jsonFile.getPath());  } else   if (!jsonFile.canRead()) {    throw new AdeUsageException("Input file is not readable: " + jsonFile.getPath());  }}  }
class C{  public Element resolve(ElementMetadata<?,?> metadata,ValidationContext vc){  if (metadata == null) {    return this;  }  Element narrowed=narrow(metadata,vc);  narrowed.validate(metadata,vc);  Iterator<Element> childIterator=narrowed.getElementIterator();  if (childIterator.hasNext()) {    List<Pair<Element,Element>> replacements=Lists.newArrayList();    while (childIterator.hasNext()) {      Element child=childIterator.next();      ElementMetadata<?,?> childMeta=metadata.bindElement(child.getElementKey());      Element resolved=child.resolve(childMeta,vc);      if (resolved != child) {        replacements.add(Pair.of(child,resolved));      }    }    for (    Pair<Element,Element> pair : replacements) {      narrowed.replaceElement(pair.getFirst(),pair.getSecond());    }  }  return narrowed;}  }
class C{  @Override public CompletableFuture<Long> count(){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public boolean hasAnyLicense(){  return isAnyLicensed(CoordinatorClient.LicenseType.values());}  }
class C{  public T caseAnonymous_complexAttribute_2_(Anonymous_complexAttribute_2_ object){  return null;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.039 -0500",hash_original_method="43E5A3A3017D389C996FCD504E7A9103",hash_generated_method="E3F599972D04B8E5D7F86AB1411559E9") public byte[] buildAdnString(int recordSize){  byte[] bcdNumber;  byte[] byteTag;  byte[] adnString;  int footerOffset=recordSize - FOOTER_SIZE_BYTES;  adnString=new byte[recordSize];  for (int i=0; i < recordSize; i++) {    adnString[i]=(byte)0xFF;  }  if (TextUtils.isEmpty(number)) {    Log.w(LOG_TAG,"[buildAdnString] Empty dialing number");    return adnString;  } else   if (number.length() > (ADN_DIALING_NUMBER_END - ADN_DIALING_NUMBER_START + 1) * 2) {    Log.w(LOG_TAG,"[buildAdnString] Max length of dialing number is 20");    return null;  } else   if (alphaTag != null && alphaTag.length() > footerOffset) {    Log.w(LOG_TAG,"[buildAdnString] Max length of tag is " + footerOffset);    return null;  } else {    bcdNumber=PhoneNumberUtils.numberToCalledPartyBCD(number);    System.arraycopy(bcdNumber,0,adnString,footerOffset + ADN_TON_AND_NPI,bcdNumber.length);    adnString[footerOffset + ADN_BCD_NUMBER_LENGTH]=(byte)(bcdNumber.length);    adnString[footerOffset + ADN_CAPABILITY_ID]=(byte)0xFF;    adnString[footerOffset + ADN_EXTENSION_ID]=(byte)0xFF;    if (!TextUtils.isEmpty(alphaTag)) {      byteTag=GsmAlphabet.stringToGsm8BitPacked(alphaTag);      System.arraycopy(byteTag,0,adnString,0,byteTag.length);    }    return adnString;  }}  }
class C{  public void markAsSpent(TransactionInput input){  availableForSpending=false;  spentBy=input;}  }
class C{  public void register(QueryObject<?>... qos){  userQueryRegistry.register(qos);}  }
class C{  protected AtomicArrayPart(AtomicArray<E> base,int offset){  this(base,offset,base.length() - offset);}  }
class C{  private void searchText(){  search(m_inputField.getText().getBytes());}  }
class C{  public Iterator iterOfFilters(){  return (filters.values().iterator());}  }
class C{  public void testCustomStopwords() throws Exception {  CharArraySet set=new CharArraySet(asSet("the","and","a"),false);  ArabicAnalyzer a=new ArabicAnalyzer(set);  assertAnalyzesTo(a,"The quick brown fox.",new String[]{"quick","brown","fox"});  a.close();}  }
class C{  public boolean isWildcard(){  return isWildcard;}  }
