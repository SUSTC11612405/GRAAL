class C{  @Override public int size(){  return size;}  }
class C{  private void readObject(){}  }
class C{  Stroker init(PathConsumer2D pc2d,float lineWidth,int capStyle,int joinStyle,float miterLimit){  this.out=pc2d;  this.lineWidth2=lineWidth / 2f;  this.invHalfLineWidth2Sq=1f / (2f * lineWidth2 * lineWidth2);  this.capStyle=capStyle;  this.joinStyle=joinStyle;  float limit=miterLimit * lineWidth2;  this.miterLimitSq=limit * limit;  this.prev=CLOSE;  rdrCtx.stroking=1;  return this;}  }
class C{  private boolean isMemAvail(long lRows,long lCols,double sparsity,double min,double max){  double size=(min == 0 && max == 0) ? OptimizerUtils.estimateSizeEmptyBlock(rows,cols) : OptimizerUtils.estimateSizeExactSparsity(rows,cols,sparsity);  return (OptimizerUtils.isValidCPDimensions(rows,cols) && OptimizerUtils.isValidCPMatrixSize(rows,cols,sparsity) && size < OptimizerUtils.getLocalMemBudget());}  }
class C{  public int appendData(ExtractorInput input,int length,boolean allowEndOfInput) throws IOException, InterruptedException {  length=prepareForAppend(length);  int bytesAppended=input.read(lastAllocation.data,lastAllocation.translateOffset(lastAllocationOffset),length);  if (bytesAppended == C.RESULT_END_OF_INPUT) {    if (allowEndOfInput) {      return C.RESULT_END_OF_INPUT;    }    throw new EOFException();  }  lastAllocationOffset+=bytesAppended;  totalBytesWritten+=bytesAppended;  return bytesAppended;}  }
class C{  @SuppressWarnings("SignalWithoutCorrespondingAwait") private void addEntry(Entry entry){  assert entry != null;  rwLock.readLock().lock();  try {    entries.add(entry);  }  finally {    rwLock.readLock().unlock();  }  if (cnt.incrementAndGet() >= batchSize) {    if (flushLock.tryLock()) {      try {        flushCond.signalAll();      }  finally {        flushLock.unlock();      }    }  }}  }
class C{  private static CIMArgument modifyAnyCIMObjectPaths(Map<String,Object> keyMap,Object object){  if (keyMap == null || object == null) {    return null;  }  CIMArgument modifiedArgument=null;  CIMArgument argument=(CIMArgument)object;  Object cimPathReferenceObject=argument.getValue();  if (cimPathReferenceObject == null || !(cimPathReferenceObject instanceof CIMObjectPath)) {    return null;  }  String string=cimPathReferenceObject.toString();  if (string.contains(Constants.SMIS80_DELIMITER)) {    return null;  }  if (!string.contains("SE_ReplicationGroup") && string.contains(Constants.PLUS)) {    Object modifiedPath=modifyForSMIS80(keyMap,(CIMObjectPath)cimPathReferenceObject);    modifiedArgument=new CIMArgument<>(argument.getName(),argument.getDataType(),(CIMObjectPath)modifiedPath);  }  return modifiedArgument;}  }
class C{  public boolean save(){  StringBuffer sql=new StringBuffer("INSERT INTO AD_PInstance_Log " + "(AD_PInstance_ID, Log_ID, P_Date, P_ID, P_Number, P_Msg)" + " VALUES (");  sql.append(m_AD_PInstance_ID).append(",").append(m_Log_ID).append(",");  if (m_P_Date == null) {    sql.append("NULL,");  } else {    sql.append(DB.TO_DATE(m_P_Date,false)).append(",");  }  if (m_P_ID == 0) {    sql.append("NULL,");  } else {    sql.append(m_P_ID).append(",");  }  if (m_P_Number == null) {    sql.append("NULL,");  } else {    sql.append(m_P_Number).append(",");  }  if (m_P_Msg == null) {    sql.append("NULL)");  } else {    sql.append(DB.TO_STRING(m_P_Msg,2000)).append(")");  }  int no=DB.executeUpdate(sql.toString(),null);  return no == 1;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.REGULAR_EXPRESSION_LITERAL__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  private void resetCategoriesLists(){  this.categoriesRows=null;}  }
class C{  static void loadDevEnvironment(ProfilerSection section){  section.start("DevEnv");  for (  URL url : sysLoader.getURLs()) {    try {      File f=new File(url.toURI());      if (f.isDirectory()) {        ModuleCandidate candidate=new ModuleCandidate();        loadDirectory(f,candidate);        getCandidates().add(candidate);      } else       if (EnvJars.isLoadable(f)) {        loadJar(f,false);      }    } catch (    Exception e) {    }  }  section.stop("DevEnv");}  }
class C{  public boolean removeGlobally(HGHandle handle,boolean keepIncidentLinks){  unindex(handle);  return graph.remove(handle,keepIncidentLinks);}  }
class C{  public InvalidValueException(String message,Throwable ex){  super(message,ex);}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    return;  }  if ((this.left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {    generateBooleanEqual(currentScope,valueRequired);  } else {    generateNonBooleanEqual(currentScope,valueRequired);  }}  }
class C{  protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  result.clear();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  TickUnit tu=getTickUnit();  double size=tu.getSize();  int count=calculateVisibleTickCount();  double lowestTickValue=calculateLowestVisibleTickValue();  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {    int minorTickSpaces=getMinorTickCount();    if (minorTickSpaces <= 0) {      minorTickSpaces=tu.getMinorTickCount();    }    for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {      double minorTickValue=lowestTickValue - size * minorTick / minorTickSpaces;      if (getRange().contains(minorTickValue)) {        result.add(new NumberTick(TickType.MINOR,minorTickValue,"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));      }    }    for (int i=0; i < count; i++) {      double currentTickValue=lowestTickValue + (i * size);      String tickLabel;      NumberFormat formatter=getNumberFormatOverride();      if (formatter != null) {        tickLabel=formatter.format(currentTickValue);      } else {        tickLabel=getTickUnit().valueToString(currentTickValue);      }      TextAnchor anchor;      TextAnchor rotationAnchor;      double angle=0.0;      if (isVerticalTickLabels()) {        if (edge == RectangleEdge.LEFT) {          anchor=TextAnchor.BOTTOM_CENTER;          rotationAnchor=TextAnchor.BOTTOM_CENTER;          angle=-Math.PI / 2.0;        } else {          anchor=TextAnchor.BOTTOM_CENTER;          rotationAnchor=TextAnchor.BOTTOM_CENTER;          angle=Math.PI / 2.0;        }      } else {        if (edge == RectangleEdge.LEFT) {          anchor=TextAnchor.CENTER_RIGHT;          rotationAnchor=TextAnchor.CENTER_RIGHT;        } else {          anchor=TextAnchor.CENTER_LEFT;          rotationAnchor=TextAnchor.CENTER_LEFT;        }      }      Tick tick=new NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);      result.add(tick);      double nextTickValue=lowestTickValue + ((i + 1) * size);      for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {        double minorTickValue=currentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces;        if (getRange().contains(minorTickValue)) {          result.add(new NumberTick(TickType.MINOR,minorTickValue,"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));        }      }    }  }  return result;}  }
class C{  public static String executeCommandThread(String command){  new Thread(new CommandThread(command)).start();  return "";}  }
class C{  public void init() throws TomcatException {  tomcatpath=configurationManager.getTomcatConfiguration().getPath();  final String extractDirectory=tomcatpath;  File extractDirectoryFile=new File(extractDirectory);  logger.info("Starting tomcat in " + extractDirectoryFile.getPath());  try {    extract(extractDirectoryFile,extractDirectory);    new File(extractDirectory,"conf").mkdirs();    File cfg=new File(ClassLoader.getSystemResource("server.xml").toURI());    Files.copy(cfg,new File(extractDirectory,"conf/server.xml"));    new File(extractDirectory,"logs").mkdirs();    new File(extractDirectory,"webapps").mkdirs();    new File(extractDirectory,"work").mkdirs();    File tmpDir=new File(extractDirectory,"temp");    tmpDir.mkdirs();    System.setProperty("java.io.tmpdir",tmpDir.getAbsolutePath());    System.setProperty("catalina.base",extractDirectoryFile.getAbsolutePath());    System.setProperty("catalina.home",extractDirectoryFile.getAbsolutePath());    cat=new Catalina();  } catch (  Exception e) {    throw new TomcatException("Cannot initalize Tomcat environment.",e);  }  Runtime.getRuntime().addShutdownHook(new TomcatShutdownHook());}  }
class C{  public ISchedulingRule charsetRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return null;  return factoryFor(resource).charsetRule(resource);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public TDoubleHashSet(double[] array){  this(array.length);  addAll(array);}  }
class C{  @Override public void prepare(){  image=ImageUtil.createAcceleratedImage(bounds.width,bounds.height);  Graphics graph=image.getGraphics();  graph.drawImage(bv.tileManager.imageFor(entity),0,0,this);  image=bv.getScaledImage(image,false);  graph.dispose();}  }
class C{  public static String strip(String str){  return strip(str,null);}  }
class C{  private boolean precedes(final String symbol1,final String symbol2){  String sym1=symbol1.toLowerCase(Locale.ENGLISH);  String sym2=symbol2.toLowerCase(Locale.ENGLISH);  if (!precedenceMap.keySet().contains(sym1)) {    return false;  }  if (!precedenceMap.keySet().contains(sym2)) {    return false;  }  int index1=precedenceMap.get(sym1).intValue();  int index2=precedenceMap.get(sym2).intValue();  boolean precedesResult=(index1 < index2);  return precedesResult;}  }
class C{  private void cancelFutures(){  sharedCtx.mvcc().onStop();  Exception err=new IgniteCheckedException("Operation has been cancelled (node is stopping).");  for (  IgniteInternalFuture fut : pendingFuts.values())   ((GridFutureAdapter)fut).onDone(err);  for (  IgniteInternalFuture fut : pendingTemplateFuts.values())   ((GridFutureAdapter)fut).onDone(err);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.371 -0500",hash_original_method="DC56F1E18CD1755F16D6493522100254",hash_generated_method="D3598CFE5F5174ED8EE1FF7B6118D260") public static String formatFileSize(Context context,long number){  return formatFileSize(context,number,false);}  }
class C{  private NewEditorHelper(){}  }
class C{  protected boolean hasConnection(){  return wrappedConnection != null;}  }
class C{  protected Map<K,CacheEntry<V>> createCache(int initialSize){  return new HashMap<K,CacheEntry<V>>(initialSize);}  }
class C{  private Region remove(Region x,Region t){  if (t != NULL_NODE) {    this.lastNode=t;    if (x.orderRelativeTo(t) < 0) {      t.left(remove(x,t.left));    } else {      this.deletedNode=t;      t.right(remove(x,t.right));    }    if (t == this.lastNode) {      if (this.deletedNode != NULL_NODE && x.orderRelativeTo(this.deletedNode) == 0) {        this.deletedNode.swap(t);        this.deletedElement=t;        t=t.right;      }    } else     if (t.left.level < t.level - 1 || t.right.level < t.level - 1) {      if (t.right.level > --t.level) {        t.right.level=t.level;      }      t=skew(t);      t.right(skew(t.right));      t.right.right(skew(t.right.right));      t=split(t);      t.right(split(t.right));    }  }  return t;}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  private void checkResponseCode(Context context,long requestId,int responseCodeIndex){  Intent intent=new Intent(Consts.ACTION_RESPONSE_CODE);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_REQUEST_ID,requestId);  intent.putExtra(Consts.INAPP_RESPONSE_CODE,responseCodeIndex);  context.startService(intent);}  }
class C{  public JSONObject(){  this.map=new HashMap();}  }
class C{  public EntityRelationConverter(UimaMonitor monitor,boolean outputHistory,DocumentHistory documentHistory,Set<String> stopFeatures,IEntityConverterFields fields){  this.monitor=monitor;  this.outputHistory=outputHistory;  this.documentHistory=documentHistory;  this.stopFeatures=stopFeatures;  this.fields=fields;}  }
class C{  @SuppressLint("NewApi") public static Bitmap apply(Context context,Bitmap sentBitmap,int radius,boolean useRenderScript){  Bitmap bitmap=Bitmap.createScaledBitmap(sentBitmap,sentBitmap.getWidth() / 2,sentBitmap.getHeight() / 2,false);  if (useRenderScript) {    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN) {      final RenderScript rs=RenderScript.create(context);      final Allocation input=Allocation.createFromBitmap(rs,bitmap);      final Allocation output=Allocation.createTyped(rs,input.getType());      final ScriptIntrinsicBlur script=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));      script.setRadius(radius);      script.setInput(input);      script.forEach(output);      output.copyTo(bitmap);      return bitmap;    } else {      try {        final android.support.v8.renderscript.RenderScript rs=android.support.v8.renderscript.RenderScript.create(context);        final android.support.v8.renderscript.Allocation input=android.support.v8.renderscript.Allocation.createFromBitmap(rs,bitmap);        final android.support.v8.renderscript.Allocation output=android.support.v8.renderscript.Allocation.createTyped(rs,input.getType());        final android.support.v8.renderscript.ScriptIntrinsicBlur script=android.support.v8.renderscript.ScriptIntrinsicBlur.create(rs,android.support.v8.renderscript.Element.U8_4(rs));        script.setRadius(radius);        script.setInput(input);        script.forEach(output);        output.copyTo(bitmap);      } catch (      Exception e) {        bitmap=fastblur(sentBitmap,radius);      }      return bitmap;    }  } else {    return fastblur(sentBitmap,radius);  }}  }
class C{  public static WebappInfo create(Intent intent){  String id=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_ID);  String icon=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_ICON);  String url=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_URL);  int orientation=IntentUtils.safeGetIntExtra(intent,ShortcutHelper.EXTRA_ORIENTATION,ScreenOrientationValues.DEFAULT);  int source=IntentUtils.safeGetIntExtra(intent,ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);  long themeColor=IntentUtils.safeGetLongExtra(intent,ShortcutHelper.EXTRA_THEME_COLOR,ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING);  long backgroundColor=IntentUtils.safeGetLongExtra(intent,ShortcutHelper.EXTRA_BACKGROUND_COLOR,ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING);  String name=nameFromIntent(intent);  String shortName=shortNameFromIntent(intent);  return create(id,url,icon,name,shortName,orientation,source,themeColor,backgroundColor);}  }
class C{  public cudaResourceDesc(){}  }
class C{  public static List<Class<?>> findAllImplementations(Class<?> restrictionClass){  if (restrictionClass == null) {    return Collections.emptyList();  }  if (!contains(restrictionClass)) {    ELKIServiceLoader.load(restrictionClass);    ELKIServiceScanner.load(restrictionClass);  }  Entry e=data.get(restrictionClass);  if (e == null) {    return Collections.emptyList();  }  ArrayList<Class<?>> ret=new ArrayList<>(e.len);  for (int pos=0; pos < e.len; pos++) {    Class<?> c=e.clazzes[pos];    if (c == null) {      c=tryLoadClass(e.names[pos]);      if (c == null) {        LOG.warning("Failed to load class " + e.names[pos] + " for interface "+ restrictionClass.getName());        c=FAILED_LOAD;      }      e.clazzes[pos]=c;    }    if (c == FAILED_LOAD) {      continue;    }    if (!ret.contains(c)) {      ret.add(c);    }  }  return ret;}  }
class C{  public T caseContentNode(ContentNode object){  return null;}  }
class C{  public EGLSurface createWindowSurface(Object surface){  if (!(surface instanceof Surface) && !(surface instanceof SurfaceTexture)) {    throw new RuntimeException("invalid surface: " + surface);  }  int[] surfaceAttribs={EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreateWindowSurface(mEGLDisplay,mEGLConfig,surface,surfaceAttribs,0);  checkEglError("eglCreateWindowSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  public static SoftwareModule addNewBaseSoftware(final EntityFactory entityFactory,final String bsname,final String bsversion,final String bsvendor,final SoftwareModuleType bstype,final String description){  final SoftwareManagement swMgmtService=SpringContextHelper.getBean(SoftwareManagement.class);  SoftwareModule newSWModule=entityFactory.generateSoftwareModule();  newSWModule.setType(bstype);  newSWModule.setName(bsname);  newSWModule.setVersion(bsversion);  newSWModule.setVendor(bsvendor);  newSWModule.setDescription(description);  newSWModule=swMgmtService.createSoftwareModule(newSWModule);  return newSWModule;}  }
class C{  public void onIndoorToggled(View view){  updateIndoor();}  }
class C{  public void deleteMin(){  if (isEmpty())   throw new NoSuchElementException("Symbol table underflow");  root=deleteMin(root);  assert check();}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public boolean containsKey(String key){  return values.containsKey(key);}  }
class C{  public void paintTreeCellFocus(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void add(Simulation simulation){  simulations.add(simulation);}  }
class C{  @Override public synchronized long length(final byte[] key) throws IOException {  long l;  for (  final blobItem bi : this.blobs) {    l=bi.blob.length(key);    if (l >= 0)     return l;  }  return -1;}  }
class C{  private static boolean isPaymentTypeRecurse(GenericValue paymentType,String inputTypeId) throws GenericEntityException {  String parentTypeId=paymentType.getString("parentTypeId");  if (parentTypeId == null) {    return false;  }  if (parentTypeId.equals(inputTypeId)) {    return true;  }  return isPaymentTypeRecurse(paymentType.getRelatedOne("ParentPaymentType",false),inputTypeId);}  }
class C{  public void beforePersist(Entity entity){  if (!isAuthorizationRequired()) {    return;  }  MetaClass metaClass=metadata.getClassNN(entity.getClass());  for (  MetaProperty metaProperty : metaClass.getProperties()) {    if (!metadataTools.isSystem(metaProperty) && !metaProperty.isReadOnly() && !security.isEntityAttrUpdatePermitted(metaClass,metaProperty.getName())) {      entity.setValue(metaProperty.getName(),null);    }  }}  }
class C{  private void drawPoints(Canvas canvas,LineSet set){  Bitmap dotsBitmap=null;  float dotsBitmapWidthCenter=0;  float dotsBitmapHeightCenter=0;  if (set.getDotsDrawable() != null) {    dotsBitmap=Tools.drawableToBitmap(set.getDotsDrawable());    dotsBitmapWidthCenter=dotsBitmap.getWidth() / 2;    dotsBitmapHeightCenter=dotsBitmap.getHeight() / 2;  }  mStyle.mDotsPaint.setColor(set.getDotsColor());  applyAlpha(mStyle.mDotsPaint,set.getAlpha());  mStyle.mDotsStrokePaint.setStrokeWidth(set.getDotsStrokeThickness());  mStyle.mDotsStrokePaint.setColor(set.getDotsStrokeColor());  applyAlpha(mStyle.mDotsStrokePaint,set.getAlpha());  Path path=new Path();  int begin=set.getBegin();  int end=set.getEnd();  for (int i=begin; i < end; i++) {    path.addCircle(set.getEntry(i).getX(),set.getEntry(i).getY(),set.getDotsRadius(),Path.Direction.CW);    if (dotsBitmap != null)     canvas.drawBitmap(dotsBitmap,set.getEntry(i).getX() - dotsBitmapWidthCenter,set.getEntry(i).getY() - dotsBitmapHeightCenter,mStyle.mDotsPaint);  }  canvas.drawPath(path,mStyle.mDotsPaint);  if (set.hasDotsStroke())   canvas.drawPath(path,mStyle.mDotsStrokePaint);}  }
class C{  protected boolean isLabelAndNonlabel(JComponent c1,JComponent c2,int position){  if (position == SwingConstants.EAST || position == SwingConstants.WEST) {    boolean c1Label=(c1 instanceof JLabel);    boolean c2Label=(c2 instanceof JLabel);    return ((c1Label || c2Label) && (c1Label != c2Label));  }  return false;}  }
class C{  int appendSlot(int w0,int w1,int w2,int w3){{    final int slotsize=4;    int newoffset=(lastUsed + 1) * slotsize;    int chunkpos=newoffset >> lowbits;    int slotpos=(newoffset & lowmask);    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);    int[] chunk=chunks.elementAt(chunkpos);    chunk[slotpos]=w0;    chunk[slotpos + 1]=w1;    chunk[slotpos + 2]=w2;    chunk[slotpos + 3]=w3;    return ++lastUsed;  }}  }
class C{  public static int px2dp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public static void killedPlayer(final Player player){  process(player,TutorialEventType.FIRST_PLAYER_KILL);}  }
class C{  SimpleLogReader(DiskLog log,long startSeqno,int howMany){  this.log=log;  this.startSeqno=startSeqno;  this.howMany=howMany;  this.lastSeqno=new AtomicCounter(-1);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GetItem(int playerId,String... properties){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("properties",properties);}  }
class C{  protected void assertStuttering(int stateNum){  assertTrue(recorder.recorded(EC.TLC_STATE_PRINT3));  List<Object> stutter=recorder.getRecords(EC.TLC_STATE_PRINT3);  assertTrue(stutter.size() > 0);  Object[] object=(Object[])stutter.get(0);  assertEquals(stateNum,object[1]);}  }
class C{  public static void main(String[] args){  runFilter(new MultiFilter(),args);}  }
class C{  SessionId(boolean isRejoinable,SecureRandom generator){  if (isRejoinable)   sessionId=new RandomCookie(generator).random_bytes; else   sessionId=new byte[0];}  }
class C{  public synchronized int read(char cbuf[],int off,int len) throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int c=read();  if (c < 0) {    return -1;  }  cbuf[off]=(char)c;  int rlen=1;  while ((in >= 0) && (--len > 0)) {    cbuf[off + rlen]=buffer[out++];    rlen++;    if (out >= buffer.length) {      out=0;    }    if (in == out) {      in=-1;    }  }  return rlen;}  }
class C{  public MonologueBehaviour(final SpeakerNPC speakerNPC,final String[] repeatedText,final int minutes){  this.speakerNPC=speakerNPC;  this.repeatedText=repeatedText;  this.minutes=minutes;  SingletonRepository.getTurnNotifier().notifyInTurns(1,this);}  }
class C{  public static String enclose(String s){  if (s.startsWith("(")) {    return s;  }  return "(" + s + ")";}  }
class C{  public Element store(Object o){  MemorySpinnerIcon p=(MemorySpinnerIcon)o;  Element element=new Element("memoryicon");  element.setAttribute("memory",p.getNamedMemory().getName());  storeCommonAttributes(p,element);  storeTextInfo(p,element);  element.setAttribute("class","jmri.jmrit.display.configurexml.MemorySpinnerIconXml");  return element;}  }
class C{  protected void openKnownLoco(){  if (locoBox.getSelectedRosterEntries().length != 0) {    RosterEntry re=locoBox.getSelectedRosterEntries()[0];    if (log.isDebugEnabled()) {      log.debug("loco file: " + re.getFileName());    }    startProgrammer(null,re,(String)programmerBox.getSelectedItem());  } else {    log.error("No roster entry was selected to open.");  }}  }
class C{  public Stats snapshot(){  return new Stats(count,mean,sumOfSquaresOfDeltas,min,max);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public void prepareSession(String remoteAddress,int remotePort,MediaOutput renderer,Format format,RtpStreamListener rtpStreamListener) throws NetworkException {  try {    mInputStream=new RtpInputStream(remoteAddress,remotePort,mLocalPort,format);    mInputStream.addRtpStreamListener(rtpStreamListener);    mInputStream.open();    if (sLogger.isActivated()) {      sLogger.debug("Input stream: " + mInputStream.getClass().getName());    }    MediaRendererStream outputStream=new MediaRendererStream(renderer);    outputStream.open();    if (sLogger.isActivated()) {      sLogger.debug("Output stream: " + outputStream.getClass().getName());    }    Codec[] codecChain=MediaRegistry.generateDecodingCodecChain(format.getCodec());    mProcessor=new Processor(mInputStream,outputStream,codecChain);    if (sLogger.isActivated()) {      sLogger.debug("Session has been prepared with success");    }  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Can't prepare resources correctly for remoteAddress : ").append(remoteAddress).append(" with remotePort : ").append(remotePort).append("!").toString(),e);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public HardReferenceQueue(final HardReferenceQueueEvictionListener<T> listener,final int capacity,final int nscan){  super(capacity);  if (nscan < 0 || nscan > capacity)   throw new IllegalArgumentException();  this.listener=listener;  this.nscan=nscan;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TLongDoubleHashMap)) {    return false;  }  TLongDoubleHashMap that=(TLongDoubleHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  @Override public void end(){  super.end();  final int unspent=m_bid - m_spent;  if (unspent == 0) {    return;  }  m_bridge.getHistoryWriter().startEvent(m_bridge.getPlayerID().getName() + " retains " + unspent+ " PUS not spent in bid phase");  final Change unspentChange=ChangeFactory.changeResourcesChange(m_bridge.getPlayerID(),super.getData().getResourceList().getResource(Constants.PUS),unspent);  m_bridge.addChange(unspentChange);  m_hasBid=false;}  }
class C{  public StubClassesPermitted(ActivationID id,MarshalledObject mo) throws RemoteException {  super(id,0);  registry=java.rmi.registry.LocateRegistry.getRegistry(registryPort);}  }
class C{  public TimeOfDay withMaximumValue(){  return setCopy(getMaximumValue());}  }
class C{  public String docValidate(PO po,int timing){  log.info(po.get_TableName() + " Timing: " + timing);  if (timing == TIMING_AFTER_COMPLETE)   return null;  if (timing == TIMING_BEFORE_PREPARE) {    if (po.get_TableName().equals(MOrder.Table_Name)) {      log.info(po.toString());    }  }  return null;}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException();  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  public static void disableStatMonitoring(){  _disabled=true;}  }
class C{  public void onUriResolved(long id,TaskImage input,TaskImage result,final Uri imageUri,TaskInfo.Destination destination){  final TaskInfo job=new TaskInfo(id,input,result,destination);  final ImageProcessorListener listener=mImageTaskManager.getProxyListener();  listener.onResultUri(job,imageUri);}  }
class C{  public BERSet(){}  }
class C{  public double calcAngleWithRatios(Entry p1,Entry p2){  float dx=p2.getXIndex() * mDeltaRatio - p1.getXIndex() * mDeltaRatio;  float dy=p2.getVal() * mScaleRatio - p1.getVal() * mScaleRatio;  double angle=Math.atan2(dy,dx) * 180.0 / Math.PI;  return angle;}  }
class C{  private static Project createProject(Consumer<SpotlessExtension> test) throws Exception {  Project project=ProjectBuilder.builder().withProjectDir(new File("").getAbsoluteFile()).build();  SpotlessPlugin plugin=project.getPlugins().apply(SpotlessPlugin.class);  test.accept(plugin.getExtension());  plugin.createTasks();  return project;}  }
class C{  public static void main(String[] args) throws AdeException {  final Upload upload=new Upload();  try {    upload.run(args);  } catch (  AdeUsageException e) {    upload.getMessageHandler().handleUserException(e);  }catch (  AdeInternalException e) {    upload.getMessageHandler().handleAdeInternalException(e);  }catch (  AdeException e) {    upload.getMessageHandler().handleAdeException(e);  }catch (  Throwable e) {    upload.getMessageHandler().handleUnexpectedException(e);  } finally {    upload.quietCleanup();  }}  }
class C{  public ObjectState(S id){  super(id);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void removeForward(int localPort,String remoteSocketName,DeviceUnixSocketNamespace namespace) throws TimeoutException, AdbCommandRejectedException, IOException {  AdbHelper.removeForward(AndroidDebugBridge.getSocketAddress(),this,String.format("tcp:%d",localPort),String.format("%s:%s",namespace.getType(),remoteSocketName));}  }
class C{  public static int stencil27(DoubleMatrix3D A,cern.colt.function.Double27Function function,int maxIterations,DoubleMatrix3DProcedure hasConverged,int convergenceIterations){  DoubleMatrix3D B=A.copy();  if (convergenceIterations <= 1)   convergenceIterations=2;  if (convergenceIterations % 2 != 0)   convergenceIterations++;  int i=0;  while (i < maxIterations) {    A.zAssign27Neighbors(B,function);    B.zAssign27Neighbors(A,function);    i=i + 2;    if (i % convergenceIterations == 0 && hasConverged != null) {      if (hasConverged.apply(A))       return i;    }  }  return i;}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public void log(String message){  myLogWriter.println(message);}  }
class C{  private Problem instantiateProblem(ProblemProvider provider,String name){  try {    return provider.getProblem(name);  } catch (  ServiceConfigurationError e) {    System.err.println(e.getMessage());  }  return null;}  }
class C{  @Ignore("recursion not supported") @Test public void testReplaceToIdentical(){  values.put("animal","$${${thing}}");  values.put("thing","animal");  doTestReplace("The ${animal} jumps.","The ${animal} jumps.",true);}  }
class C{  @Override public boolean hasPassiveShield(int location){  if (isShutDown() || (getCrew().isKoThisRound() || getCrew().isUnconscious())) {    return false;  }  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    if (cs.isDamaged()) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isShield() && m.curMode().equals(MiscType.S_PASSIVE_SHIELD)) {      return m.getCurrentDamageCapacity(this,m.getLocation()) > 0;    }  }  return false;}  }
class C{  private static void updateOpenView(final INaviView view,final INaviInstruction instruction,final ArrayList<IComment> comments) throws CouldntSaveDataException {  final List<INaviInstruction> naviinstrlist=new ArrayList<INaviInstruction>();  for (  final INaviViewNode viewnode : view.getGraph().getNodes()) {    if (viewnode instanceof INaviCodeNode) {      naviinstrlist.addAll(collectInstructions((INaviCodeNode)viewnode,instruction));    }  }  for (  final INaviInstruction instr : naviinstrlist) {    instr.initializeGlobalComment(comments);  }}  }
class C{  public static void main(String[] args) throws Exception {  Upnp client=new Upnp();  List<UpnpDevice> upnpDevices=client.getUpnpDevices();  for (  UpnpDevice d : upnpDevices) {    System.out.println(d);  }}  }
class C{  protected void bind(LuaValue env,Class factory,String[] names){  bind(env,factory,names,0);}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 6:case 5:case 4:case 3:case 2:case 1:case 7:    return true;default :  break;}return false;}  }
class C{  public double distance(Vector3i v){  return Math.sqrt(distanceSquared(v));}  }
class C{  public static void addFingerprint(String fingerprint){  PubKeyManager.addFingerprint(fingerprint);}  }
class C{  public UnableToInterruptJobException(Throwable cause){  super(cause);}  }
class C{  private void buildPartitionConfigurations(OMElement documentElement){  this.partitionConfigurations=new PartitionInfo();  OMElement defaultPartition=documentElement.getFirstChildWithName(new QName("DefaultPartition"));  Map<String,String> propertyMap=getChildPropertyElements(defaultPartition);  this.partitionConfigurations.setPartitionId(propertyMap.get("id"));  this.partitionConfigurations.setRealm(propertyMap.get("realm"));  this.partitionConfigurations.setPartitionKdcPassword(propertyMap.get("kdcPassword"));  this.partitionConfigurations.setLdapServerPrinciplePassword(propertyMap.get("ldapServerPrinciplePassword"));  this.partitionConfigurations.setRootDN(getDomainNameForRealm(propertyMap.get("realm")));  OMElement partitionAdmin=documentElement.getFirstChildWithName(new QName("PartitionAdmin"));  propertyMap=getChildPropertyElements(partitionAdmin);  AdminInfo defaultPartitionAdmin=buildPartitionAdminConfigurations(propertyMap);  OMElement partitionAdminRole=documentElement.getFirstChildWithName(new QName("PartitionAdminGroup"));  propertyMap=getChildPropertyElements(partitionAdminRole);  AdminGroupInfo adminGroupInfo=buildPartitionAdminGroupConfigurations(propertyMap);  defaultPartitionAdmin.setGroupInformation(adminGroupInfo);  this.partitionConfigurations.setPartitionAdministrator(defaultPartitionAdmin);}  }
class C{  private String formatMessage(Level level,String sourceClass,String sourceMethod,String msg,Object[] params){  StringBuffer result=new StringBuffer();  if (sourceClass != null || sourceMethod != null) {    result.append(level.getLocalizedName());    if (sourceClass != null)     result.append(" ").append(sourceClass);    if (sourceMethod != null)     result.append(".").append(sourceMethod);    result.append(": ");  }  String localized=localizeMessage(msg);  String substituted=localized;  try {    Object parameters[]=params;    if (parameters != null && parameters.length != 0) {      if (localized.indexOf("{0") >= 0 || localized.indexOf("{1") >= 0 || localized.indexOf("{2") >= 0 || localized.indexOf("{3") >= 0) {        substituted=java.text.MessageFormat.format(localized,parameters);      }    }  } catch (  Exception ex) {    substituted=localized;  }  result.append(substituted);  result.append(System.getProperty("line.separator"));  return result.toString();}  }
class C{  public SecurityException(String message){  super(message,"security");}  }
class C{  private void flattenLists(){  FastList<E> list=(FastList<E>)this.toList();  this.lists.clear();  this.lists.add(list);}  }
class C{  @Override public void write(BinaryRawWriterEx writer,Object obj,Throwable err){  assert obj instanceof Map;  PlatformUtils.writeNullableMap(writer,(Map)obj);}  }
class C{  public boolean hasNumRaters(){  return super.hasAttribute(NUM_RATERS);}  }
class C{  public boolean hasIntersection(){  return interiorIntersection != null;}  }
class C{  public IStatus validateCreateLink(IFile file,int updateFlags,IPath location){  return Status.OK_STATUS;}  }
class C{  private void disableEntryExpiryTasks(){  int oldTimeToLive=this.region.getEntryTimeToLive().getTimeout();  if (oldTimeToLive > 0) {    ExpirationAttributes ea=new ExpirationAttributes(0,ExpirationAction.LOCAL_INVALIDATE);    this.region.setEntryTimeToLive(ea);    this.region.setCustomEntryTimeToLive(new ThreadIdentifierCustomExpiry());    logger.info(LocalizedMessage.create(LocalizedStrings.HARegionQueue_ENYTRY_EXPIRY_TASKS_DISABLED_BECAUSE_QUEUE_BECAME_PRIMARY_OLD_MSG_TTL_0,new Object[]{Integer.valueOf(oldTimeToLive)}));  }}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public boolean undo(INode state){  undoAutoMoves(state);  move.undo(state);  return true;}  }
class C{  private static HadoopMapReducePlan plan(int reducers,HadoopInputSplit... splits) throws IgniteCheckedException {  assert reducers > 0;  assert splits != null && splits.length > 0;  Collection<HadoopInputSplit> splitList=new ArrayList<>(splits.length);  Collections.addAll(splitList,splits);  Collection<ClusterNode> top=new ArrayList<>();  GridTestNode node1=new GridTestNode(ID_1);  GridTestNode node2=new GridTestNode(ID_2);  GridTestNode node3=new GridTestNode(ID_3);  node1.setHostName(HOST_1);  node2.setHostName(HOST_2);  node3.setHostName(HOST_3);  top.add(node1);  top.add(node2);  top.add(node3);  HadoopMapReducePlan plan=PLANNER.preparePlan(new HadoopPlannerMockJob(splitList,reducers),top,null);  PLAN.set(plan);  return plan;}  }
class C{  public IgniteUuid msgId(){  return msgId;}  }
class C{  public void replace(RRset rrset){  delete(rrset.getName(),rrset.getType());  for (Iterator it=rrset.rrs(); it.hasNext(); )   add((Record)it.next());}  }
class C{  protected String diff(String reference,String current){  if (reference.equals(current)) {    return "";  } else {    StringBuffer diff=new StringBuffer();    diff.append("+++ Reference: ").append(m_RefFile).append(" +++\n").append(reference).append("+++ Current +++\n").append(current).append("+++\n");    return diff.toString();  }}  }
class C{  public TestException(TestException other){  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  public Element first(){switch (type) {case '&':case '|':case '*':case '?':    return null;case '+':case ',':  return ((ContentModel)content).first();default :return (Element)content;}}  }
class C{  public void syncRabbitNameCache(){  Map<String,Rabbit> rabbits=new HashMap<>();  List<Rabbit> rabbitList=rabbitRepository.findAll();  for (  Rabbit rabbit : rabbitList) {    rabbits.put(rabbit.getId(),rabbit);  }  nameRepository.updateRabbitIdList(rabbits);  nameRepository.syncDailyStatistics();}  }
class C{  public final boolean isEmpty(){  return getOldestTimestamp() == null;}  }
class C{  @Override final public boolean isReadOnly(){  return true;}  }
class C{  public LocalLogWriter(int level,PrintWriter logWriter){  this(level,logWriter,null);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.TRANSITION__TRIGGER:    return basicSetTrigger(null,msgs);case SGraphPackage.TRANSITION__EFFECT:  return basicSetEffect(null,msgs);case SGraphPackage.TRANSITION__PROPERTIES:return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);case SGraphPackage.TRANSITION__TARGET:return basicSetTarget(null,msgs);case SGraphPackage.TRANSITION__SOURCE:return basicSetSource(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isAllowUoMFractions(){  Object oo=get_Value(COLUMNNAME_AllowUoMFractions);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static org.topbraid.spin.model.update.Update parseUpdate(String str,Model model){  String prefixes=ARQFactory.get().createPrefixDeclarations(model);  UpdateRequest request=UpdateFactoryFilter.get().create(prefixes + str);  ARQ2SPIN a2s=new ARQ2SPIN(model);  return a2s.createUpdate(request.getOperations().get(0),null);}  }
class C{  public Bundle saveInstanceState(Bundle savedInstanceState){  return saveInstanceState(savedInstanceState,"");}  }
class C{  public void add(L listener){  ArgumentChecking.notNull(listener,"listener");  assert !listeners.contains(listener) : "listener " + listener + " should not already exist in the listener set.";  listeners.add(listener);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  int idx=getInt(stack);  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return null;  String imageURL=si.getImageURL(idx,thumb);  if (imageURL == null || imageURL.length() == 0)   return null; else   return MetaImage.getMetaImage(imageURL,stack.getUIComponent());}  }
class C{  public void visit(State s){  if (!this.fAppendedNormalStates.contains(s)) {    appendStateToBuilder(s,this.fsbNormalStates);    this.fAppendedNormalStates.add(s);  }}  }
class C{  public ListenKey startListening() throws IOException {  return startListening(null,0);}  }
class C{  public WavefrontObjectModelProvider(String domain,String name){  super(domain,name);}  }
class C{  public void dock(JComponent outter,JComponent inner){  dock(outter,inner,-1);}  }
class C{  public Builder dryRun(Boolean dryRun){  this.dryRun=dryRun;  return this;}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  private void updateVersion(){  prop.put("version." + oldVersion,"UPDATE_NEEDED");  prop.put("version." + newVersion,"CURRENT");  prop.put("version.destination." + oldVersion,newVersion);}  }
class C{  public int connectTimeout(){  return reader.getInteger(CONNECT_TIMEOUT,DEFAULT_CONNECT_TIMEOUT);}  }
class C{  public void removeSignalMastAssignment(SignalMast signalMast){  if (signalMast == null) {    return;  }  for (  PositionablePoint po : layoutEditor.pointList) {    if ((po.getEastBoundSignalMast() != null) && po.getEastBoundSignalMast() == signalMast) {      po.setEastBoundSignalMast(null);    }    if ((po.getWestBoundSignalMast() != null) && po.getWestBoundSignalMast() == signalMast) {      po.setWestBoundSignalMast(null);    }  }  for (  LayoutTurnout to : layoutEditor.turnoutList) {    if ((to.getSignalAMast() != null) && to.getSignalAMast() == signalMast) {      to.setSignalAMast(null);    }    if ((to.getSignalBMast() != null) && to.getSignalBMast() == signalMast) {      to.setSignalBMast(null);    }    if ((to.getSignalCMast() != null) && to.getSignalCMast() == signalMast) {      to.setSignalCMast(null);    }    if ((to.getSignalDMast() != null) && to.getSignalDMast() == signalMast) {      to.setSignalDMast(null);    }  }  for (  LayoutSlip to : layoutEditor.slipList) {    if ((to.getSignalAMast() != null) && to.getSignalAMast() == signalMast) {      to.setSignalAMast(null);    }    if ((to.getSignalBMast() != null) && to.getSignalBMast() == signalMast) {      to.setSignalBMast(null);    }    if ((to.getSignalCMast() != null) && to.getSignalCMast() == signalMast) {      to.setSignalCMast(null);    }    if ((to.getSignalDMast() != null) && to.getSignalDMast() == signalMast) {      to.setSignalDMast(null);    }  }  for (  LevelXing x : layoutEditor.xingList) {    if ((x.getSignalAMast() != null) && x.getSignalAMast() == signalMast) {      x.setSignalAMast(null);    }    if ((x.getSignalBMast() != null) && x.getSignalBMast() == signalMast) {      x.setSignalBMast(null);    }    if ((x.getSignalCMast() != null) && x.getSignalCMast() == signalMast) {      x.setSignalCMast(null);    }    if ((x.getSignalDMast() != null) && x.getSignalDMast() == signalMast) {      x.setSignalDMast(null);    }  }}  }
class C{  private void resumeSession(final int id){  final Session resume=mDataHelper.loadSession(id);  if (resume == null) {    Log.e(TAG,"Error loading session " + id);    return;  }  resume.isActive(true);  mDataHelper.storeSession(resume,true);}  }
class C{  public DSAParameters generateParameters(){  return (use186_3) ? generateParameters_FIPS186_3() : generateParameters_FIPS186_2();}  }
class C{  public static char first(String s){  return s.charAt(0);}  }
class C{  public HTTPTokener(String string){  super(string);}  }
class C{  public void startHttpServer(boolean shouldRetry) throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  httpHandler=new MyHandler(shouldRetry);  HttpContext ctx=httpServer.createContext("/test/",httpHandler);  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  public LocoIOMode(int isOutput,int opcode,int sv0,int sv2,String mode){  this.isOutput=isOutput;  this.opcode=opcode;  this.sv0=sv0;  this.sv2=sv2;  this.mode=mode;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  @Override public boolean supportsExpressionsInOrderBy(){  debugCodeCall("supportsExpressionsInOrderBy");  return true;}  }
class C{  boolean isCompositionAreaVisible(){  if (compositionAreaHandler != null) {    return compositionAreaHandler.isCompositionAreaVisible();  }  return false;}  }
class C{  public void pseudoPropertyChange(String propName,Object old,Object n){  if (log.isDebugEnabled()) {    log.debug("pseudoPropertyChange: Block \"" + getSystemName() + " property \""+ propName+ "\" new value= "+ n.toString());  }  firePropertyChange(propName,old,n);}  }
class C{  public boolean isDeclaredFinal(){  return declaredFinal;}  }
class C{  static int newInsertPos(int oldPos,Insertion ins){  if (oldPos <= ins.pos) {    return oldPos;  }  if (oldPos < ins.pos + ins.oldLen) {    if (oldPos < ins.pos + ins.newLen) {      return oldPos;    } else {      return ins.pos + ins.newLen - ins.oldLen;    }  } else {    return oldPos + ins.newLen - ins.oldLen;  }}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList();}  }
class C{  public FileInclude findFileInclude(String parentPath,String filespec){  return null;}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("VSetup.init");  m_WindowNo=WindowNo;  m_frame=frame;  try {    jbInit();    dynInit();    frame.getContentPane().add(centerPane,BorderLayout.CENTER);    frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"VSetup.init",e);  }}  }
class C{  public Sort(String[] fields,boolean[] ascend){  m_fields=fields;  m_ascend=ascend;}  }
class C{  public T caseLiteral(Literal object){  return null;}  }
class C{  public Map<String,String> parse(final char[] charArray,int offset,int length,char separator){  if (charArray == null) {    return new HashMap<String,String>();  }  HashMap<String,String> params=new HashMap<String,String>();  this.chars=charArray;  this.pos=offset;  this.len=length;  String paramName=null;  String paramValue=null;  while (hasChar()) {    paramName=parseToken(new char[]{'=',separator});    paramValue=null;    if (hasChar() && (charArray[pos] == '=')) {      pos++;      paramValue=parseQuotedToken(new char[]{separator});      if (paramValue != null) {        try {          paramValue=MimeUtility.decodeText(paramValue);        } catch (        UnsupportedEncodingException e) {        }      }    }    if (hasChar() && (charArray[pos] == separator)) {      pos++;    }    if ((paramName != null) && (paramName.length() > 0)) {      if (this.lowerCaseNames) {        paramName=paramName.toLowerCase(Locale.ENGLISH);      }      params.put(paramName,paramValue);    }  }  return params;}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  public void addIntersection(Coordinate intPt,int segmentIndex){  addIntersectionNode(intPt,segmentIndex);}  }
class C{  public static int parseFullAtomFlags(int fullAtomInt){  return 0x00FFFFFF & fullAtomInt;}  }
class C{  void addAccessKey(int accessKey,Component cmp,boolean override){  if ((override) && (accessKeys.contains(cmp))) {    Hashtable newAccessKeys=new Hashtable();    for (Enumeration e=accessKeys.keys(); e.hasMoreElements(); ) {      Object key=e.nextElement();      Component c=(Component)accessKeys.get(key);      if (c != cmp) {        newAccessKeys.put(key,c);      }    }    accessKeys=newAccessKeys;  }  accessKeys.put(new Integer(accessKey),cmp);  Form form=getComponentForm();  if (form != null) {    form.addKeyListener(accessKey,this);  }}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> createFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to save Foo : {}",foo);  if (foo.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("foo","idexists","A new foo cannot already have an ID")).body(null);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.created(new URI("/api/foos/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("foo",result.getId().toString())).body(result);}  }
class C{  void free(int pageId){  full=false;  store.logUndo(this,data);  used.clear(pageId - getPos());  store.update(this);}  }
class C{  public BandedSampleModel(int dataType,int w,int h,int numBands){  super(dataType,w,h,1,w,BandedSampleModel.createIndicesArray(numBands),BandedSampleModel.createOffsetArray(numBands));}  }
class C{  public LocalServerSocket(String name) throws IOException {  impl=new LocalSocketImpl();  impl.create(true);  localAddress=new LocalSocketAddress(name);  impl.bind(localAddress);  impl.listen(LISTEN_BACKLOG);}  }
class C{  public String toString(){  String ret=null;  if ((states != null) && (states.size() > 0)) {    ret=((AccessibleState)(states.elementAt(0))).toDisplayString();    for (int i=1; i < states.size(); i++) {      ret=ret + "," + ((AccessibleState)(states.elementAt(i))).toDisplayString();    }  }  return ret;}  }
class C{  public PajekNetReader(Supplier<E> edge_factory){  this(null,edge_factory);}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof StrBuilder) {    return equals((StrBuilder)obj);  }  return false;}  }
class C{  private void slinkstep4(DBIDRef id,DBIDArrayIter it,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda){  DBIDVar p_i=DBIDUtil.newVar();  for (it.seek(0); it.getOffset() < n; it.advance()) {    double l_i=lambda.doubleValue(it);    p_i.from(pi,it);    double lp_i=lambda.doubleValue(p_i);    if (l_i >= lp_i) {      pi.put(it,id);    }  }}  }
class C{  public static RoundedColorDrawable fromColorDrawable(ColorDrawable colorDrawable){  return new RoundedColorDrawable(colorDrawable.getColor());}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep){  char ch=line.charAt(pos - 1);  if (noWordSep == null)   noWordSep="";  boolean selectNoLetter=(!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1);  int wordStart=0;  for (int i=pos - 1; i >= 0; i--) {    ch=line.charAt(i);    if (selectNoLetter ^ (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1)) {      wordStart=i + 1;      break;    }  }  return wordStart;}  }
class C{  public void print(float x){  out.print(x);  out.flush();}  }
class C{  public void store(byte value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @Override public boolean dispatchKeyEventPreIme(KeyEvent event){  if (container != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {    KeyEvent.DispatcherState state=getKeyDispatcherState();    if (state != null) {      if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {        state.startTracking(event,this);        return true;      } else       if (event.getAction() == KeyEvent.ACTION_UP && !event.isCanceled() && state.isTracking(event)) {        container.onBackPressed();        return true;      }    }  }  return super.dispatchKeyEventPreIme(event);}  }
class C{  public CTextArea(Document doc){  this(new JTextArea(doc));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static DoubleMatrix2D mult(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.mult);}  }
class C{  public void testValueOfLongNegative2(){  long longVal=-58930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-4,124,-52,-98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  @DSComment("not data related") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.951 -0500",hash_original_method="2E3022EA9F0D00958A95EEBC25ADD120",hash_generated_method="6FBFE97612C133168C998DD2B51C9462") public PBEKeySpec(char[] password){  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  salt=null;  iterationCount=0;  keyLength=0;}  }
class C{  static void copyToForeignTarget(Path source,Path target,CopyOption... options) throws IOException {  CopyOptions opts=CopyOptions.parse(options);  LinkOption[] linkOptions=(opts.followLinks) ? new LinkOption[0] : new LinkOption[]{LinkOption.NOFOLLOW_LINKS};  BasicFileAttributes attrs=Files.readAttributes(source,BasicFileAttributes.class,linkOptions);  if (attrs.isSymbolicLink())   throw new IOException("Copying of symbolic links not supported");  if (opts.replaceExisting) {    Files.deleteIfExists(target);  } else   if (Files.exists(target))   throw new FileAlreadyExistsException(target.toString());  if (attrs.isDirectory()) {    Files.createDirectory(target);  } else {    try (InputStream in=Files.newInputStream(source)){      Files.copy(in,target);    }   }  if (opts.copyAttributes) {    BasicFileAttributeView view=Files.getFileAttributeView(target,BasicFileAttributeView.class);    try {      view.setTimes(attrs.lastModifiedTime(),attrs.lastAccessTime(),attrs.creationTime());    } catch (    Throwable x) {      try {        Files.delete(target);      } catch (      Throwable suppressed) {        x.addSuppressed(suppressed);      }      throw x;    }  }}  }
class C{  public ModbusSerialMaster(SerialParameters param,int timeout){  try {    connection=new SerialConnection(param);    connection.setTimeout(timeout);    this.timeout=timeout;  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }}  }
class C{  public static Object invokeMethod(Object object,String methodName,Object arguments){  if (object == null) {    object=NullObject.getNullObject();  }  if (object instanceof Class) {    Class theClass=(Class)object;    MetaClass metaClass=metaRegistry.getMetaClass(theClass);    return metaClass.invokeStaticMethod(object,methodName,asArray(arguments));  }  if (!(object instanceof GroovyObject)) {    return invokePojoMethod(object,methodName,arguments);  }  return invokePogoMethod(object,methodName,arguments);}  }
class C{  public void incrementCurrentCount(boolean store) throws GenericEntityException {  if (store) {    info.set("recurrenceCount",getCurrentCount() + 1);    info.store();  }}  }
class C{  JvmMemManagerTableCache(long validity){  this.validity=validity;}  }
class C{  public static double[] resize(double buffer[],int newSize){  double temp[]=new double[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  public float computeParticleCollisionEnergy(){  return m_particleSystem.computeParticleCollisionEnergy();}  }
class C{  @Override public String toString(){  return super.toString() + " StreamId: " + this.getStreamid()+ " isScreenClient: "+ this.getIsScreenClient()+ " flvRecordingId: "+ this.getFlvRecordingId()+ " screenPublishStarted: "+ this.isScreenPublishStarted()+ " flvRecordingMetaDataId: "+ this.getFlvRecordingMetaDataId()+ " isRecording: "+ this.getIsRecording()+ " isAVClient: "+ this.getIsAVClient()+ " broadCastID: "+ this.getBroadCastID()+ " avsettings: "+ this.getAvsettings();}  }
class C{  public void removeDebugger(final DebuggerTemplate debugger) throws CouldntSaveDataException {  Preconditions.checkNotNull(debugger,"IE00254: Debugger argument can't be null");  Preconditions.checkArgument(m_assignedDebuggers.contains(debugger),"IE00255: Debugger template was not assigned to the project");  m_provider.removeDebugger(m_project,debugger);  m_assignedDebuggers.remove(debugger);  for (  final IProjectListener listener : m_listeners) {    try {      listener.removedDebugger(m_project,debugger);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  updateModificationDate();}  }
class C{  @Override public boolean handleMessage(Message msg){  if (msg.what == 1) {    txtRefundStatus.setText(BCRefundStatus.RefundStatus.getTranslatedRefundStatus(refundStatus));  }  return true;}  }
class C{  protected void processWindowEvent(WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_CLOSING) {    jMenuFileExit_actionPerformed(null);  }}  }
class C{  public String globalInfo(){  return "Takes the results from a ResultProducer " + "and submits the average to the result listener. Normally used with " + "a CrossValidationResultProducer to perform n x m fold cross "+ "validation. For non-numeric result fields, the first value is used.";}  }
class C{  public static void test_B_and_K_Calculation(String[] args){  boolean known_N;  if (args == null)   known_N=false; else   known_N=new Boolean(args[0]).booleanValue();  int[] quantiles={1,1000};  long[] sizes={100000,1000000,10000000,1000000000};  double[] deltas={0.0,0.001,0.0001,0.00001};  double[] epsilons={0.0,0.1,0.05,0.01,0.005,0.001,0.0000001};  if (!known_N)   sizes=new long[]{0};  System.out.println("\n\n");  if (known_N)   System.out.println("Computing b's and k's for KNOWN N"); else   System.out.println("Computing b's and k's for UNKNOWN N");  System.out.println("mem [elements/1024]");  System.out.println("***********************************");  for (int q=0; q < quantiles.length; q++) {    int p=quantiles[q];    System.out.println("------------------------------");    System.out.println("computing for p = " + p);    for (int s=0; s < sizes.length; s++) {      long N=sizes[s];      System.out.println("   ------------------------------");      System.out.println("   computing for N = " + N);      for (int d=0; d < deltas.length; d++) {        double delta=deltas[d];        System.out.println("      ------------------------------");        System.out.println("      computing for delta = " + delta);        for (int e=0; e < epsilons.length; e++) {          double epsilon=epsilons[e];          double[] returnSamplingRate=new double[1];          long[] result;          if (known_N) {            result=known_N_compute_B_and_K(N,epsilon,delta,p,returnSamplingRate);          } else {            result=unknown_N_compute_B_and_K(epsilon,delta,p);          }          long b=result[0];          long k=result[1];          System.out.print("         (e,d,N,p)=(" + epsilon + ","+ delta+ ","+ N+ ","+ p+ ") --> ");          System.out.print("(b,k,mem");          if (known_N)           System.out.print(",sampling");          System.out.print(")=(" + b + ","+ k+ ","+ (b * k / 1024));          if (known_N)           System.out.print("," + returnSamplingRate[0]);          System.out.println(")");        }      }    }  }}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("tt1","id int , name varchar(20)");  createTable("tt2","id int , name varchar(20)");  createTable("Drivert2","id int not null primary key auto_increment, test varchar(10)");  createTable("utente","id int not null primary key auto_increment, test varchar(10)");  createTable("Drivert3","id int not null primary key auto_increment, test varchar(10)");  createTable("Drivert30","id int not null primary key auto_increment, test varchar(20)","engine=innodb");  createTable("Drivert4","id int not null primary key auto_increment, test varchar(20)","engine=innodb");  createTable("test_batch","id int not null primary key auto_increment, test varchar(10)");  createTable("test_batch2","id int not null primary key auto_increment, test varchar(10)");  createTable("test_float","id int not null primary key auto_increment, a float");  createTable("test_big_autoinc2","id int not null primary key auto_increment, test varchar(10)");  createTable("test_big_update","id int primary key not null, updateme int");  createTable("sharedConnection","id int");  createTable("extest","id int not null primary key");  createTable("rewritetest","id int not null primary key, a varchar(10), b int","engine=innodb");  createTable("rewritetest2","id int not null primary key, a varchar(10), b int","engine=innodb");  createTable("commentPreparedStatements","id int not null primary key auto_increment, a varchar(10)");  createTable("quotesPreparedStatements","id int not null primary key auto_increment, a varchar(10) , " + "b varchar(10)");  createTable("ressetpos","i int not null primary key","engine=innodb");  createTable("bug501452","id int not null primary key, value varchar(20)");  createTable("streamingtest","val varchar(20)");  createTable("testBlob2","a blob");  createTable("testString2","a varchar(10)");  createTable("testBlob2","a blob");  createTable("unsignedtest","a int unsigned");  createTable("conj25","a VARCHAR(1024)");  createTable("batchUpdateException","i int,PRIMARY KEY (i)");  createTable("batchPrepareUpdateException","i int,PRIMARY KEY (i)");  createTable("DriverTestt1","id int not null primary key auto_increment, test varchar(20)");  createTable("DriverTestt2","id int not null primary key auto_increment, test varchar(20)");  createTable("DriverTestt3","id int not null primary key auto_increment, test varchar(20)");  createTable("DriverTestt4","id int not null primary key auto_increment, test varchar(20)");  createTable("DriverTestt5","id int not null primary key auto_increment, test varchar(20)");  createProcedure("foo","() BEGIN SELECT 1; END");  createTable("conj275","a VARCHAR(10)");}  }
class C{  public static ReferenceRegions fullReferenceRegions(SequencesReader sequencesReader) throws IOException {  final ReferenceRegions regions=new ReferenceRegions();  for (int k=0; k < sequencesReader.numberSequences(); k++) {    regions.add(sequencesReader.names().name(k),0,sequencesReader.length(k));  }  return regions;}  }
class C{  @Override protected final String assembleOutputString(StringBuilder result){  try {    for (int i=0; i < segments.length - 1; i++) {      result.append(segments[i]);      if (getInputs()[i] != null) {        result.append(getInputs()[i].get());      }    }  } catch (  final IOException ignored) {  }  result.append(segments[segments.length - 1]);  return result.toString();}  }
class C{  public void closeAll(){  for (  InterceptedStream<T> stream : streams.values())   close(stream.getStream());  streams.clear();}  }
class C{  private Token scanTag(){  Mark startMark=reader.getMark();  char ch=reader.peek(1);  String handle=null;  String suffix=null;  if (ch == '<') {    reader.forward(2);    suffix=scanTagUri("tag",startMark);    if (reader.peek() != '>') {      throw new ScannerException("while scanning a tag",startMark,"expected '>', but found '" + reader.peek() + "' ("+ ((int)reader.peek())+ ")",reader.getMark());    }    reader.forward();  } else   if (Constant.NULL_BL_T_LINEBR.has(ch)) {    suffix="!";    reader.forward();  } else {    int length=1;    boolean useHandle=false;    while (Constant.NULL_BL_LINEBR.hasNo(ch)) {      if (ch == '!') {        useHandle=true;        break;      }      length++;      ch=reader.peek(length);    }    handle="!";    if (useHandle) {      handle=scanTagHandle("tag",startMark);    } else {      handle="!";      reader.forward();    }    suffix=scanTagUri("tag",startMark);  }  ch=reader.peek();  if (Constant.NULL_BL_LINEBR.hasNo(ch)) {    throw new ScannerException("while scanning a tag",startMark,"expected ' ', but found '" + ch + "' ("+ ((int)ch)+ ")",reader.getMark());  }  TagTuple value=new TagTuple(handle,suffix);  Mark endMark=reader.getMark();  return new TagToken(value,startMark,endMark);}  }
class C{  @Deprecated public void addReportMenuItem(JMenuItem menuItem){  getReportMenus().add(menuItem);}  }
class C{  public static void registerDefaultResolvers(){  List<KeyResolver> keyResolverList=new ArrayList<KeyResolver>();  keyResolverList.add(new KeyResolver(new RSAKeyValueResolver()));  keyResolverList.add(new KeyResolver(new DSAKeyValueResolver()));  keyResolverList.add(new KeyResolver(new X509CertificateResolver()));  keyResolverList.add(new KeyResolver(new X509SKIResolver()));  keyResolverList.add(new KeyResolver(new RetrievalMethodResolver()));  keyResolverList.add(new KeyResolver(new X509SubjectNameResolver()));  keyResolverList.add(new KeyResolver(new X509IssuerSerialResolver()));  keyResolverList.add(new KeyResolver(new DEREncodedKeyValueResolver()));  keyResolverList.add(new KeyResolver(new KeyInfoReferenceResolver()));  keyResolverList.add(new KeyResolver(new X509DigestResolver()));  resolverVector.addAll(keyResolverList);}  }
class C{  void transpondingReport(LocoNetMessage l){  int addr=((l.getElement(1) & 0x1F) * 128) + l.getElement(2) + 1;  if (addr != getNumber()) {    return;  }  boolean enter=((l.getElement(1) & 0x20) != 0);  int loco;  if (l.getElement(3) == 0x7D) {    loco=l.getElement(4);  } else {    loco=l.getElement(3) * 128 + l.getElement(4);  }  lastLoco=(enter ? loco : -1);  setReport("" + loco + (enter ? " enter" : " exits"));}  }
class C{  @Override public void writeURIAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (null != name && containsPassThroughAttribute(name)) {    return;  }  writeURIAttributeIgnoringPassThroughAttributes(name,value,componentPropertyName,false);}  }
class C{  public static void deleteGlobalInstructionComment(final SQLProvider provider,final INaviInstruction instruction,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE02428: provider argument can not be null");  Preconditions.checkNotNull(instruction,"IE02429: instruction argument can not be null");  Preconditions.checkNotNull(commentId,"IE02430: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02431: userId argument can not be null");  final String function=" { ? = call delete_global_instruction_comment(?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,instruction.getModule().getConfiguration().getId());      deleteCommentStatement.setObject(3,instruction.getAddress().toBigInteger(),Types.BIGINT);      deleteCommentStatement.setInt(4,commentId);      deleteCommentStatement.setInt(5,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: The comment id returned from the database was null.");      }    }  finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public void close(){  if (_handler != null)   _handler.close();  _handler=null;}  }
class C{  public LabeledIntent(Intent origIntent,String sourcePackage,CharSequence nonLocalizedLabel,int icon){  super(origIntent);  mSourcePackage=sourcePackage;  mLabelRes=0;  mNonLocalizedLabel=nonLocalizedLabel;  mIcon=icon;}  }
class C{  public boolean processString(String str){  if (handleCommand(str)) {    return true;  }  if (getGameState() != GameState.ALIVE) {    return false;  }  Move m=TextIO.stringToMove(pos,str);  if (m == null) {    return false;  }  UndoInfo ui=new UndoInfo();  pos.makeMove(m,ui);  TextIO.fixupEPSquare(pos);  while (currentMove < moveList.size()) {    moveList.remove(currentMove);    uiInfoList.remove(currentMove);    drawOfferList.remove(currentMove);  }  moveList.add(m);  uiInfoList.add(ui);  drawOfferList.add(pendingDrawOffer);  pendingDrawOffer=false;  currentMove++;  return true;}  }
class C{  public void stop(){  if (getSpeechRecordState() == SpeechRecord.STATE_INITIALIZED && mRecorder.getRecordingState() == SpeechRecord.RECORDSTATE_RECORDING) {    try {      mRecorder.stop();      setState(State.STOPPED);    } catch (    IllegalStateException e) {      handleError("native stop() called in illegal state: " + e.getMessage());    }  } else {    handleError("stop() called in illegal state");  }}  }
class C{  public RBM(){}  }
class C{  public static String stripLeadingPeriod(String s){  if (null != s && s.startsWith("."))   return s.substring(Math.min(1,s.length()),s.length());  return s;}  }
class C{  public static void printTimings(PrintStream printStream){  printStream.println("Minecraft");  for (  CustomTimingsHandler timings : HANDLERS) {    long time=timings.totalTime;    long count=timings.count;    if (count == 0) {      continue;    }    long avg=time / count;    printStream.println("    " + timings.name + " Time: "+ time+ " Count: "+ count+ " Avg: "+ avg+ " Violations: "+ timings.violations);  }  printStream.println("# Version " + Bukkit.getVersion());  int entities=0;  int livingEntities=0;  for (  World world : Bukkit.getWorlds()) {    entities+=world.getEntities().size();    livingEntities+=world.getLivingEntities().size();  }  printStream.println("# Entities " + entities);  printStream.println("# LivingEntities " + livingEntities);}  }
class C{  public static int monthLength(int year,int month){switch (month) {case 1:case 3:case 5:case 7:case 8:case 10:case 12:    return 31;case 4:case 6:case 9:case 11:  return 30;case 2:return isLeapYear(year) ? 29 : 28;default :throw new AssertionError(month);}}  }
class C{  protected void launchTasks(List<LaunchableTask> tasks){  Map<Protos.Offer,List<LaunchableTask>> tasksGroupByOffer=new HashMap<>();  for (  LaunchableTask task : tasks) {    List<LaunchableTask> subTasks=tasksGroupByOffer.get(task.offer);    if (subTasks == null) {      subTasks=new LinkedList<>();    }    subTasks.add(task);    tasksGroupByOffer.put(task.offer,subTasks);  }  for (  Map.Entry<Protos.Offer,List<LaunchableTask>> kv : tasksGroupByOffer.entrySet()) {    Protos.Offer offer=kv.getKey();    List<LaunchableTask> subTasks=kv.getValue();    List<Protos.TaskInfo> mesosTasks=new LinkedList<>();    for (    LaunchableTask task : subTasks) {      Protos.TaskInfo pTask=task.constructMesosTaskInfo(heronConfig,heronRuntime);      mesosTasks.add(pTask);    }    LOG.info("Launching tasks from offer: " + offer + " with tasks: "+ mesosTasks);    Protos.Status status=driver.launchTasks(Arrays.asList(new Protos.OfferID[]{offer.getId()}),mesosTasks);    if (status == Protos.Status.DRIVER_RUNNING) {      LOG.info(String.format("Tasks launched, status: '%s'",status));    } else {      LOG.severe("Other status returned: " + status);      for (      LaunchableTask task : tasks) {        handleMesosFailure(task.taskId);      }    }  }}  }
class C{  @Deprecated public static <N>ImmutableGraph<N> copyOf(ImmutableGraph<N> graph){  return checkNotNull(graph);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  if (s == null)   s=System.err;  try {    super.printStackTrace(s);  } catch (  Exception e) {  }  Throwable exception=m_exception;  for (int i=0; (i < 10) && (null != exception); i++) {    s.println("---------");    exception.printStackTrace(s);    if (exception instanceof TransformerException) {      TransformerException se=(TransformerException)exception;      Throwable prev=exception;      exception=se.getException();      if (prev == exception)       break;    } else {      exception=null;    }  }}  }
class C{  public RenameClassAdapter(ClassWriter cv,String oldName,String newName){  super(Opcodes.ASM4,cv);  mOldBase=mOldName=oldName;  mNewBase=mNewName=newName;  int pos=mOldName.indexOf('$');  if (pos > 0) {    mOldBase=mOldName.substring(0,pos);  }  pos=mNewName.indexOf('$');  if (pos > 0) {    mNewBase=mNewName.substring(0,pos);  }  assert (mOldBase == null && mNewBase == null) || (mOldBase != null && mNewBase != null);}  }
class C{  private void binaryInsertionSort(int from,int to){  for (int i=from + 1; i <= to; i++) {    T x=data[i];    int ins=binarySearch(x,from,i - 1);    for (int j=i - 1; j >= ins; j--) {      data[j + 1]=data[j];    }    data[ins]=x;  }}  }
class C{  @SuppressWarnings("unchecked") public void importMemory(String database){  try {    Map<String,String> properties=new HashMap<String,String>();    properties.put(PersistenceUnitProperties.JDBC_URL,DATABASE_URL_PREFIX + database);    Level debugLevel=this.bot.getDebugLevel();    String logLevel="INFO";    if (debugLevel == Level.FINEST) {      logLevel="FINE";    } else     if (debugLevel == Level.FINE) {      logLevel="INFO";    } else     if (debugLevel == Level.SEVERE) {      logLevel="SEVER";    } else     if (debugLevel == Level.WARNING) {      logLevel="WARNING";    } else     if (debugLevel == Level.OFF) {      logLevel="OFF";    }    properties.put(PersistenceUnitProperties.LOGGING_LEVEL,logLevel);    EntityManagerFactory importFactory=Persistence.createEntityManagerFactory("import",properties);    EntityManager importEntityManager=importFactory.createEntityManager();    Query query=importEntityManager.createQuery("Select v from Vertex v order by v.id");    int start=0;    query.setFirstResult(start);    query.setMaxResults(100);    List<Vertex> vertices=query.getResultList();    Map<Vertex,Vertex> identitySet=new IdentityHashMap<Vertex,Vertex>(vertices.size());    while (!vertices.isEmpty()) {      for (      Vertex vertex : vertices) {        getShortTermMemory().importMerge(vertex,identitySet);      }      save();      start=start + 100;      query.setFirstResult(start);      query.setMaxResults(100);      vertices=query.getResultList();    }    importFactory.close();  } catch (  RuntimeException failed) {    this.bot.log(this,failed);    throw failed;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public JMetalAlgorithmAdapter(jmetal.core.Algorithm algorithm,JMetalProblemAdapter problem){  super();  this.algorithm=algorithm;  this.problem=problem;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (documentHandler != null)   documentHandler.processingInstruction(target,data);}  }
class C{  @ToString public String toString(){  return "PT" + String.valueOf(getValue()) + "H";}  }
class C{  public static void deleteAppWidgetIdForSystem(int appWidgetId,int userId){  checkCallerIsSystem();  try {    if (sService == null) {      bindService();    }    sService.deleteAppWidgetId(appWidgetId,userId);  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  int requestDFCs(){  return (writeTelegram(tgmEmpty,CMD_READ_DFCs,null));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void addText(String text){  String old=current.getContent();  if (old == null) {    current.setContent(text);  } else {    current.setContent(old + text);  }}  }
class C{  @Override public Element store(Object o){  TrainIcon p=(TrainIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element(Xml.TRAINICON);  element.setAttribute(Xml.TRAIN,p.getTrain().getId());  element.setAttribute(Xml.TRAIN_NAME,p.getTrain().getName());  storeCommonAttributes(p,element);  if (p.getUnRotatedText() != null) {    element.setAttribute(Xml.TEXT,p.getUnRotatedText());  }  storeTextInfo(p,element);  element.setAttribute(Xml.ICON,Xml.YES);  element.setAttribute(Xml.DOCK_X,"" + p.getDockX());  element.setAttribute(Xml.DOCK_Y,"" + p.getDockY());  element.addContent(storeIcon(Xml.ICON,(NamedIcon)p.getIcon()));  RosterEntry entry=p.getRosterEntry();  if (entry != null) {    element.setAttribute(Xml.ROSTERENTRY,entry.getId());  }  element.setAttribute(Xml.CLASS,this.getClass().getName());  return element;}  }
class C{  private boolean isActive(Calendar activeStart,Calendar inactiveStart){  if (inactiveStart != null && activeStart != null && inactiveStart.before(activeStart))   return !isActive(inactiveStart,activeStart);  Calendar current=Calendar.getInstance();  return !(activeStart != null && current.before(activeStart)) && !(inactiveStart != null && current.after(inactiveStart));}  }
class C{  public RatTermVec(){  underlying_terms=new Vector();  terms=(RatTerm[])underlying_terms.toArray(new RatTerm[]{});}  }
class C{  protected BallNode mergeNodes(Vector<TempNode> list,int startIdx,int endIdx) throws Exception {  for (int i=0; i < list.size(); i++) {    TempNode n=list.get(i);    n.anchor=calcPivot(n.points,new MyIdxList(),m_Instances);    n.radius=calcRadius(n.points,new MyIdxList(),n.anchor,m_Instances);  }  double minRadius, tmpRadius;  Instance pivot, minPivot=null;  TempNode parent;  int min1=-1, min2=-1;  while (list.size() > 1) {    minRadius=Double.POSITIVE_INFINITY;    for (int i=0; i < list.size(); i++) {      TempNode first=list.get(i);      for (int j=i + 1; j < list.size(); j++) {        TempNode second=list.get(j);        pivot=calcPivot(first,second,m_Instances);        tmpRadius=calcRadius(first,second);        if (tmpRadius < minRadius) {          minRadius=tmpRadius;          minPivot=pivot;          min1=i;          min2=j;        }      }    }    parent=new TempNode();    parent.left=list.get(min1);    parent.right=list.get(min2);    parent.anchor=minPivot;    parent.radius=calcRadius(parent.left.points,parent.right.points,minPivot,m_Instances);    parent.points=parent.left.points.append(parent.left.points,parent.right.points);    list.remove(min1);    list.remove(min2 - 1);    list.add(parent);  }  TempNode tmpRoot=list.get(list.size() - 1);  if ((endIdx - startIdx + 1) != tmpRoot.points.length()) {    throw new Exception("Root nodes instance list is of irregular length. " + "Please check code. Length should " + "be: " + (endIdx - startIdx + 1) + " whereas it is found to be: "+ tmpRoot.points.length());  }  for (int i=0; i < tmpRoot.points.length(); i++) {    m_InstList[startIdx + i]=tmpRoot.points.get(i).idx;  }  BallNode node=makeBallTreeNodes(tmpRoot,startIdx,endIdx,0);  return node;}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testInvalidIndexFiles() throws Exception {  try {    BinlogIndex bi=new BinlogIndex("/garbage/directory","mysql-binlog",false);    throw new Exception("Able to create binlog index with bad directory: " + bi);  } catch (  MySQLExtractException e) {  }  try {    BinlogIndex bi=new BinlogIndex(".","mysql-binx",true);    throw new Exception("Able to create binlog index with binlog name pattern: " + bi);  } catch (  MySQLExtractException e) {  }}  }
class C{  @Override public void handleMouseDragged(ChartCanvas canvas,MouseEvent e){}  }
class C{  public TAnonymousFormalParameter createTAnonymousFormalParameter(){  TAnonymousFormalParameterImpl tAnonymousFormalParameter=new TAnonymousFormalParameterImpl();  return tAnonymousFormalParameter;}  }
class C{  DateTimeParseContext copy(){  DateTimeParseContext newContext=new DateTimeParseContext(formatter);  newContext.caseSensitive=caseSensitive;  newContext.strict=strict;  return newContext;}  }
class C{  private void createColumns(){  TableViewerColumn activeColumn=new TableViewerColumn(tableViewer,SWT.NONE);  activeColumn.getColumn().setResizable(false);  activeColumn.getColumn().setWidth(60);  activeColumn.getColumn().setText("Active");  activeColumn.getColumn().setToolTipText("If mapping is currently active. Deactivated mappings will not be considered when assigning Environment to the agent.");  TableViewerColumn agentNameColumn=new TableViewerColumn(tableViewer,SWT.NONE);  agentNameColumn.getColumn().setResizable(true);  agentNameColumn.getColumn().setWidth(150);  agentNameColumn.getColumn().setText("Agent Name");  agentNameColumn.getColumn().setToolTipText("Name of the agent. Use wild-card '*' for matching several agent names with one mapping.");  agentNameColumn.getColumn().setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));  TableViewerColumn ipColumn=new TableViewerColumn(tableViewer,SWT.NONE);  ipColumn.getColumn().setResizable(true);  ipColumn.getColumn().setWidth(150);  ipColumn.getColumn().setText("IP Address");  ipColumn.getColumn().setToolTipText("IP address of the agent. Use wild-card '*' for matching several IPs with one mapping. For example, 192.168.* will match all IP addresses in starting with 192.168.");  ipColumn.getColumn().setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));  TableViewerColumn environmentColumn=new TableViewerColumn(tableViewer,SWT.NONE);  environmentColumn.getColumn().setResizable(true);  environmentColumn.getColumn().setWidth(150);  environmentColumn.getColumn().setText("Environment");  environmentColumn.getColumn().setToolTipText("Environment that should be assigned to the agent fulfilling the name and IP parameters.");  environmentColumn.getColumn().setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_BLOCK));  TableViewerColumn descriptionColumn=new TableViewerColumn(tableViewer,SWT.NONE);  descriptionColumn.getColumn().setResizable(true);  descriptionColumn.getColumn().setWidth(200);  descriptionColumn.getColumn().setText("Description");  descriptionColumn.getColumn().setToolTipText("Optional description of the mapping.");}  }
class C{  public OracleExtractor(){  int baselineLanguageModelFeatureID=0;  this.extractor=new OracleExtractionHG(baselineLanguageModelFeatureID);}  }
class C{  @NotNull public RunnerRequestCallBackBuilder<T> success(@NotNull SuccessCallback<T> successCallback){  this.successCallback=successCallback;  return this;}  }
class C{  void remove(RelayObserver<T> o){  do {    State oldState=get();    State newState=oldState.remove(o);    if (newState == oldState || compareAndSet(oldState,newState)) {      return;    }  } while (true);}  }
class C{  @Override public void queueHeadRemove(String queueName,Address value){  if (Trace.isEnabled(Item.QUEUE)) {    Clock.stop();    Trace.trace(Item.QUEUE,"head remove %s from %s",value,queueName);    Clock.start();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BogusColorSpace(int numComponents){  super(getType(numComponents),numComponents);}  }
class C{  public void clearXTextLabels(){  mXTextLabels.clear();}  }
class C{  public static void loadScenario(final Scenario scenario){  ScenarioLoaderImpl.loadScenario(scenario);}  }
class C{  public IncompatibleRolesException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void loadNodeLocation(DBConnection dbConnection){  setTreeID(null);  setParentID(null);  setSeqNo(null);  setPreviousNodeID(null);  setNextNodeID(null);  if (dbConnection == null || getTreeNodeTable().length() == 0 || getNodeID() == 0)   return;  String vendorName=dbConnection.getVendor();  String catalogName=dbConnection.getCatalog();  String schemaName=dbConnection.getSchema();  String whereClause=new StringBuffer("Node_ID=").append(getNodeID()).toString();  String sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  Statement stmt=dbConnection.setStatement();  ResultSet rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    setTreeID(dbConnection.getResultSetInt(rs,"AD_Tree_ID"));    setParentID(dbConnection.getResultSetInt(rs,"Parent_ID"));    setSeqNo(dbConnection.getResultSetInt(rs,"seqNo"));  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND SeqNo=").append("(SELECT MAX(seqNo) FROM ").append(getTreeNodeTable()).append(" WHERE AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND seqNo<").append(getSeqNo()).append(")").toString();  sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  stmt=dbConnection.setStatement();  rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    setPreviousNodeID(dbConnection.getResultSetInt(rs,"Node_ID"));  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);  whereClause=new StringBuffer("AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND SeqNo=").append("(SELECT MIN(seqNo) FROM ").append(getTreeNodeTable()).append(" WHERE AD_Tree_ID=").append(getTreeID()).append(" AND Parent_ID=").append(getParentID()).append(" AND seqNo>").append(getSeqNo()).append(")").toString();  sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,getTreeNodeTable(),whereClause);  stmt=dbConnection.setStatement();  rs=dbConnection.executeQuery(stmt,sqlCommand);  if (dbConnection.getResultSetNext(rs)) {    setNextNodeID(dbConnection.getResultSetInt(rs,"Node_ID"));  }  dbConnection.releaseResultSet(rs);  dbConnection.releaseStatement(stmt);}  }
class C{  @SuppressWarnings({"IfMayBeConditional","TypeMayBeWeakened"}) private NavigableMap<GridSearchRowPointer,GridH2Row> subTree(NavigableMap<GridSearchRowPointer,GridH2Row> map,@Nullable GridSearchRowPointer first,@Nullable GridSearchRowPointer last){  if (first == null) {    if (last == null)     return map; else     return map.headMap(last,false);  } else {    if (last == null)     return map.tailMap(first,false); else {      if (compare(first,last) > 0)       return null;      return map.subMap(first,false,last,false);    }  }}  }
class C{  public boolean isSearcherCurrent() throws IOException {  final IndexSearcher searcher=acquire();  try {    final IndexReader r=searcher.getIndexReader();    assert r instanceof DirectoryReader : "searcher's IndexReader should be a DirectoryReader, but got " + r;    return ((DirectoryReader)r).isCurrent();  }  finally {    release(searcher);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector;  String desc;  SelectedTag tag;  int i;  newVector=new Vector<Option>();  desc="";  for (i=0; i < TAGS_TYPE.length; i++) {    tag=new SelectedTag(TAGS_TYPE[i].getID(),TAGS_TYPE);    desc+="\t" + tag.getSelectedTag().getIDStr() + " = "+ tag.getSelectedTag().getReadable()+ "\n";  }  newVector.addElement(new Option("\tThe type of attribute to create:\n" + desc + "\t(default: "+ new SelectedTag(Attribute.NUMERIC,TAGS_TYPE)+ ")","T",1,"-T " + Tag.toOptionList(TAGS_TYPE)));  newVector.addElement(new Option("\tSpecify where to insert the column. First and last\n" + "\tare valid indexes.(default: last)","C",1,"-C <index>"));  newVector.addElement(new Option("\tName of the new attribute.\n" + "\t(default: 'Unnamed')","N",1,"-N <name>"));  newVector.addElement(new Option("\tCreate nominal attribute with given labels\n" + "\t(default: numeric attribute)","L",1,"-L <label1,label2,...>"));  newVector.addElement(new Option("\tThe format of the date values (see ISO-8601)\n" + "\t(default: yyyy-MM-dd'T'HH:mm:ss)","F",1,"-F <format>"));  return newVector.elements();}  }
class C{  public void addTargetRequest(Request request){synchronized (targetRequests) {    targetRequests.add(request);  }}  }
class C{  public int height(){  return height(root);}  }
class C{  public BaseDownloadTask create(final String url){  return new FileDownloadTask(url);}  }
class C{  @Override public String toParsableString(){  return this.getOperation().toParsableString(declaringType,getInputTypes(),getOutputType());}  }
class C{  @Override public boolean supportsCatalogsInTableDefinitions(){  debugCodeCall("supportsCatalogsInTableDefinitions");  return true;}  }
class C{  @Override protected synchronized boolean removeEldestEntry(Map.Entry<K,V> eldest){  return this.size() > this.maxSize;}  }
class C{  public NonUniqueBusinessKeyException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected TFieldImpl(){  super();}  }
class C{  @Override public RecordReader<Text,RyaStatementWritable> createRecordReader(InputSplit split,TaskAttemptContext context){  return new RyaStatementRecordReader();}  }
class C{  private int parseByte() throws IOException {  while (_chunkLength <= 0) {    if (_isLastChunk) {      return -1;    }    int code=read();switch (code) {case 'b':      _isLastChunk=false;    _chunkLength=(read() << 8) + read();  break;case 'B':_isLastChunk=true;_chunkLength=(read() << 8) + read();break;default :throw expect("byte[]",code);}}_chunkLength--;return read();}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("jboss3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss4xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss42x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss42xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss42x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss42x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss4xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss5x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss5xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss5x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss5x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss51x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss51xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss51x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss51x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss6x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss6xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss6x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss6x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss61x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss6xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss61x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss61x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss7xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss7xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss71x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss71xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss71x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss71x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss72x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss72xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss72x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss72x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss73x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss73xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss73x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss73x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss74x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss73xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss74x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss74x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jboss75x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss75xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss75x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jboss75x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfiguration.class);}  }
class C{  public boolean isEmpty(){  return hmap.isEmpty();}  }
class C{  @Override protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);  CategoryDataset data=plot.getDataset(rendererIndex);  if (data != null) {    PlotOrientation orientation=plot.getOrientation();    double space=0.0;    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumBarWidth();    int columns=data.getColumnCount();    double categoryMargin=0.0;    if (columns > 1) {      categoryMargin=domainAxis.getCategoryMargin();    }    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin);    if (columns > 0) {      state.setBarWidth(Math.min(used / columns,maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }}  }
class C{  public Map<String,Collection<VolumeURIHLU>> groupVolumesByStorageGroup(StorageSystem storage,String parentGroupName,DataSource sgDataSource,String sgCustomTemplateName,ListMultimap<StorageGroupPolicyLimitsParam,VolumeURIHLU> policyLimitsParamToVolumeGroup,CustomConfigHandler customConfigHandler) throws Exception {  Map<String,Collection<VolumeURIHLU>> volumeGroup=new HashMap<String,Collection<VolumeURIHLU>>();  CloseableIterator<CIMInstance> cimInstanceItr=null;  try {    boolean isVmax3=storage.checkIfVmax3();    CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,parentGroupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);    if (!isCascadedSG(storage,maskingGroupPath)) {      String policyName=getAutoTieringPolicyNameAssociatedWithVolumeGroup(storage,maskingGroupPath);      volumeGroup.put(parentGroupName,new ArrayList<VolumeURIHLU>());      for (      Entry<StorageGroupPolicyLimitsParam,Collection<VolumeURIHLU>> policyToVolumeEntry : policyLimitsParamToVolumeGroup.asMap().entrySet()) {        if (policyName != null && policyName.equalsIgnoreCase(Constants.NONE.toString())) {          policyName=null;        }        String volumePolicy=policyToVolumeEntry.getKey().getAutoTierPolicyName();        if (volumePolicy != null && volumePolicy.equalsIgnoreCase(Constants.NONE.toString())) {          volumePolicy=null;        }        if ((policyName == null && volumePolicy == null) || (policyName != null && policyName.equalsIgnoreCase(volumePolicy))) {          volumeGroup.get(parentGroupName).addAll(policyToVolumeEntry.getValue());        }        if (volumePolicy != null && policyName == null) {          volumeGroup.get(parentGroupName).addAll(policyToVolumeEntry.getValue());        }      }      if (!volumeGroup.get(parentGroupName).isEmpty()) {        _log.info("Storage Group  {} is not a cascading group, hence grouping all volumes under parent group.",parentGroupName);        return volumeGroup;      }    }    _log.info("Trying to find child Storage Groups for given Parent Group {}",parentGroupName);    if (isVmax3) {      cimInstanceItr=getAssociatorInstances(storage,maskingGroupPath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,PS_V3_STORAGE_GROUP_PROPERTIES);    } else {      cimInstanceItr=getAssociatorInstances(storage,maskingGroupPath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,new String[]{CP_ELEMENT_NAME,EMC_MAX_BANDWIDTH,EMC_MAX_IO});    }    Set<StorageGroupPolicyLimitsParam> storageGroupPolicyLimitsParamSet=new HashSet<StorageGroupPolicyLimitsParam>();    Map<String,Integer> preferedChildGroupMap=new HashMap<String,Integer>();    Map<StorageGroupPolicyLimitsParam,String> preferedPolicyLimitsParamToChildGroup=new HashMap<StorageGroupPolicyLimitsParam,String>();    while (cimInstanceItr.hasNext()) {      CIMInstance childGroupInstance=cimInstanceItr.next();      String groupName=CIMPropertyFactory.getPropertyValue(childGroupInstance,CP_ELEMENT_NAME);      StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam=createStorageGroupPolicyLimitsParam(storage,childGroupInstance);      _log.info("Group Name {} is associated with Fast Policy : {}",groupName,storageGroupPolicyLimitsParam.getAutoTierPolicyName());      Integer numVolumes=getVMAXStorageGroupVolumeCount(storage,groupName);      String policyLimitAttribute=storageGroupPolicyLimitsParam.toString();      if ((preferedChildGroupMap.get(policyLimitAttribute) == null) || ((preferedChildGroupMap.get(policyLimitAttribute) != null) && (numVolumes < preferedChildGroupMap.get(policyLimitAttribute)))) {        preferedChildGroupMap.put(policyLimitAttribute,numVolumes);        preferedPolicyLimitsParamToChildGroup.put(storageGroupPolicyLimitsParam,groupName);      }    }    for (    StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam : preferedPolicyLimitsParamToChildGroup.keySet()) {      if (policyLimitsParamToVolumeGroup.containsKey(storageGroupPolicyLimitsParam) && !storageGroupPolicyLimitsParamSet.contains(storageGroupPolicyLimitsParam)) {        volumeGroup.put(preferedPolicyLimitsParamToChildGroup.get(storageGroupPolicyLimitsParam),policyLimitsParamToVolumeGroup.get(storageGroupPolicyLimitsParam));        storageGroupPolicyLimitsParamSet.add(storageGroupPolicyLimitsParam);      }    }    _log.info("Storage Group exists already for given volume's fast Policies -->{}",Joiner.on("\t").join(storageGroupPolicyLimitsParamSet));    Set<String> existingGroupNames=getExistingStorageGroupsFromArray(storage);    for (    Entry<StorageGroupPolicyLimitsParam,Collection<VolumeURIHLU>> policyToVolumeEntry : policyLimitsParamToVolumeGroup.asMap().entrySet()) {      StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam=policyToVolumeEntry.getKey();      if (!storageGroupPolicyLimitsParamSet.contains(storageGroupPolicyLimitsParam)) {        _log.debug("Policy {} to which new Storage Group needs to be created",storageGroupPolicyLimitsParam);        ListMultimap<String,VolumeURIHLU> expectedVolumeHluMap=ControllerUtils.getVolumeNativeGuids(policyToVolumeEntry.getValue(),_dbClient);        if (!StringUtils.equalsIgnoreCase(storageGroupPolicyLimitsParam.getAutoTierPolicyName(),Constants.NONE)) {          _log.info("Running Storage Group Selection Process to find out if any groups can be reused");          Map<String,Set<String>> existingReusableGroups=findAnyStorageGroupsCanBeReUsed(storage,expectedVolumeHluMap,storageGroupPolicyLimitsParam);          _log.info("Existing Reusable Storage Groups Found {}",Joiner.on("\t").join(existingReusableGroups.keySet()));          for (          String group : existingReusableGroups.keySet()) {            volumeGroup.put(group,null);          }          Set<String> volumesInReusableStorageGroups=constructVolumeNativeGuids(existingReusableGroups.values());          Set<String> volumesNotPartOfAnyGroup=Sets.difference(expectedVolumeHluMap.asMap().keySet(),volumesInReusableStorageGroups);          _log.debug("Volumes not part of any Existing Storage Groups {}",Joiner.on("\t").join(volumesNotPartOfAnyGroup));          if (!volumesNotPartOfAnyGroup.isEmpty()) {            _log.info("Creating an new Volume Group for these Volumes");            VolumeURIHLU[] volumeURIHLU=ControllerUtils.constructVolumeUriHLUs(volumesNotPartOfAnyGroup,expectedVolumeHluMap);            sgDataSource.addProperty(CustomConfigConstants.AUTO_TIERING_POLICY_NAME,storageGroupPolicyLimitsParam.toString());            String storageGroupName=customConfigHandler.getComputedCustomConfigValue(sgCustomTemplateName,storage.getSystemType(),sgDataSource);            String generatedGroupName=generateGroupName(existingGroupNames,storageGroupName);            volumeGroup.put(generatedGroupName,Arrays.asList(volumeURIHLU));          }        } else {          _log.info("Creating a new Storage Group always, as non fast");          sgDataSource.addProperty(CustomConfigConstants.AUTO_TIERING_POLICY_NAME,StorageGroupPolicyLimitsParam.NON_FAST_POLICY);          String storageGroupName=customConfigHandler.getComputedCustomConfigValue(sgCustomTemplateName,storage.getSystemType(),sgDataSource);          String generatedGroupName=generateGroupName(existingGroupNames,storageGroupName);          volumeGroup.put(generatedGroupName,policyToVolumeEntry.getValue());        }      }    }  }  finally {    closeCIMIterator(cimInstanceItr);  }  return volumeGroup;}  }
class C{  public static Operation createPostOperation(StatelessService service,ResourceState state,String factoryLink){  return Operation.createPost(service,factoryLink).setBody(state).setReferer(service.getUri());}  }
class C{  private boolean reachablePathFindOrient(Graph graph,Node a,Node b,Node c,LinkedList<Node> reachable){  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node l : pathExtensions) {      if (!graph.isAdjacentTo(l,c)) {        doDdpOrientationFinal(graph,l,a,b,c);        return true;      } else       if (cParents.contains(l)) {        if (graph.getEndpoint(x,l) == Endpoint.ARROW) {          reachable.add(l);        }      }    }  }  return false;}  }
class C{  public Object match(Uri uri){  final List<String> pathSegments=uri.getPathSegments();  final int li=pathSegments.size();  UriMatcher node=this;  if (li == 0 && uri.getAuthority() == null) {    return this.mCode;  }  for (int i=-2; i < li; i++) {    String u;    if (i == -2)     u=uri.getScheme(); else     if (i == -1)     u=uri.getAuthority(); else     u=pathSegments.get(i);    ArrayList<UriMatcher> list=node.mChildren;    if (list == null) {      break;    }    node=null;    int lj=list.size();    for (int j=0; j < lj; j++) {      UriMatcher n=list.get(j);      which_switch: switch (n.mWhich) {case EXACT:        if (n.mText.equals(u)) {          node=n;        }      break;case TEXT:    node=n;  break;case REST:return n.mCode;}if (node != null) {break;}}if (node == null) {return null;}}return node.mCode;}  }
class C{  public void testSyncFailedDialog_SettingsButtonLoadsSettings(){  setWifiEnabled(false);  waitForSyncFailure();  expectVisibleSoon(viewWithText(R.string.sync_failed_settings));  click(viewWithText(R.string.sync_failed_settings));  expectVisible(viewWithText("Advanced"));  click(viewWithText("Advanced"));  expectVisible(viewWithText("OpenMRS base URL"));  pressBack();  cleanupWifi();}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public static void readManipulatorNBT(IEnergyManipulator manipulator,NBTTagCompound compound){  if (compound.hasKey("ActiveDeity") && !compound.getString("ActiveDeity").equals(""))   manipulator.setActiveDeity(DeityType.valueOf(compound.getString("ActiveDeity")));  if (compound.hasKey("ActiveAmplifier") && !compound.getString("ActiveAmplifier").equals(""))   manipulator.setActiveAmplifier(AmplifierType.valueOf(compound.getString("ActiveAmplifier")));}  }
class C{  private void uninstallLayout(JRootPane root){  if (savedOldLayout != null) {    root.setLayout(savedOldLayout);    savedOldLayout=null;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  double average;  double sumOfTheSquares;  double stdDev;  double devMean;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          average=sum / n;          z=centreValue - average;          if (n > 2) {            stdDev=Math.sqrt((sumOfTheSquares / n) - (average * average));            devMean=z / stdDev;            output.setValue(row,col,devMean);          } else {            output.setValue(row,col,noData);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public U decorate(U currentUser){  unverified=hasRole(Role.UNVERIFIED);  blocked=hasRole(Role.BLOCKED);  admin=hasRole(Role.ADMIN);  goodUser=!(unverified || blocked);  goodAdmin=goodUser && admin;  editable=false;  rolesEditable=false;  if (currentUser != null) {    editable=currentUser.isGoodAdmin() || equals(currentUser);    rolesEditable=currentUser.isGoodAdmin() && !equals(currentUser);  }  computeAuthorities();  log.debug("Decorated user: " + this);  return (U)this;}  }
class C{  public static int listFindNoCase(String list,String value,String delimiter){  return listFindNoCase(list,value,delimiter,true);}  }
class C{  public void add(T object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  @Override protected void performAdditionalChecks(){  super.performAdditionalChecks();  for (  ExecutionUnit subprocess : subprocesses) {    for (    Operator o : subprocess.getOperators()) {      if (o.isEnabled()) {        o.performAdditionalChecks();      }    }  }}  }
class C{  private Collection<OrderedNodePair> makePairs(List<Triple> input){  HashSet<OrderedNodePair> outputPairs=new HashSet<>();  for (  Triple trip : input) {    Node y=trip.getY();    outputPairs.add(new OrderedNodePair(trip.getX(),y));    outputPairs.add(new OrderedNodePair(trip.getZ(),y));  }  return outputPairs;}  }
class C{  @SuppressWarnings("unchecked") private void prepareBlockDropDownData(final boolean wardExists,final boolean blockExists){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Entered into prepareBlockDropDownData method");    LOGGER.debug("Ward Exists ? : " + wardExists + ", "+ "Block Exists ? : "+ blockExists);  }  if (wardExists && blockExists) {    List<Boundary> blockList=new ArrayList<Boundary>();    blockList=boundaryService.getActiveChildBoundariesByBoundaryId(getWardId());    addDropdownData("blockList",blockList);  } else   addDropdownData("blockList",Collections.EMPTY_LIST);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from prepareWardDropDownData method");}  }
class C{  private static Coordinate[] coordinates(Edge component,Coordinate[] coordinates){  for (int i=0; i < coordinates.length; i++) {    coordinates[i]=(component=component.next).coordinate;  }  return coordinates;}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableColorValue o=(AnimatableColorValue)other;  float dr=red - o.red;  float dg=green - o.green;  float db=blue - o.blue;  return (float)Math.sqrt(dr * dr + dg * dg + db * db);}  }
class C{  public final boolean isCancelled(){  return state == CANCELLED;}  }
class C{  public boolean isWhitespace(int nodeHandle){  int identity=makeNodeIdentity(nodeHandle);  int type;  if (identity == DTM.NULL)   type=DTM.NULL; else   type=_type(identity);  if (isTextType(type)) {    int dataIndex=_dataOrQName(identity);    int offset=m_data.elementAt(dataIndex);    int length=m_data.elementAt(dataIndex + 1);    return m_chars.isWhitespace(offset,length);  }  return false;}  }
class C{  public void flushBuffer() throws IOException {  printWriter.flush();}  }
class C{  static void decrementKey(byte[] key){  for (int i=key.length - 1; i >= 0; i--) {    int v=key[i] & 0xff;    if (v > 0) {      key[i]=(byte)(v - 1);      return;    }    key[i]=(byte)0xff;  }}  }
class C{  public static void throwIfNotAdmin(final User user) throws UnauthorizedException {  if (!UserAccount.isAdmin(user)) {    throw new UnauthorizedException("You are not authorized to perform this operation");  }}  }
class C{  public void parseForField(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  public static boolean isAbstract(Resource module){  return module.hasProperty(SPIN.abstract_,module.getModel().createTypedLiteral(true));}  }
class C{  public SerialSignalHead(String systemName){  super(systemName);  tSystemName=systemName;  int num=SerialAddress.getBitFromSystemName(systemName);  output=(num % 100) - 1;  bank=(num / 100) - 1;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_predicates) {    for (int i=0; i < m_predicates.length; i++) {      m_predicates[i].fixupVariables(vars,globalsSize);    }  }  if (null != m_relativePathPattern) {    m_relativePathPattern.fixupVariables(vars,globalsSize);  }}  }
class C{  public EventNotificationList clone(){  EventNotificationList result=new EventNotificationList();  if (Events != null) {    result.Events=new EventFieldList[Events.length];    for (int i=0; i < Events.length; i++)     result.Events[i]=Events[i].clone();  }  return result;}  }
class C{  public TreeSet(){  this(new TreeMap());}  }
class C{  private void showDrawableInEditText(String productId){  AssetManager logoManager=AssetManager.getInstance(this);  isIinImageShowing=true;  BitmapDrawable drawable=(BitmapDrawable)logoManager.getLogo(productId);  if (drawable != null) {    int scaledHeight=(int)iinEditText.getTextSize();    int scaledWidth=(int)(drawable.getIntrinsicWidth() * ((double)scaledHeight / (double)drawable.getIntrinsicHeight()));    Bitmap resizedBitmap=Bitmap.createScaledBitmap(drawable.getBitmap(),scaledWidth,scaledHeight,true);    Drawable resizedDrawable=new BitmapDrawable(getResources(),resizedBitmap);    iinEditText.setCompoundDrawablesWithIntrinsicBounds(null,null,resizedDrawable,null);  }}  }
class C{  public DelaunayVertex isOn(DelaunayVertex[] simplex){  int[] result=this.relation(simplex);  DelaunayVertex witness=null;  for (int i=0; i < result.length; i++) {    if (result[i] == 0) {      witness=simplex[i];    } else     if (result[i] > 0) {      return null;    }  }  return witness;}  }
class C{  public void addColumn(String name,int length){  int idx=names.length;  ensureCapacity(idx + 1);  names[idx]=name;  cols[idx + 1]=cols[idx] + length;}  }
class C{  protected void sequence_BootstrapModule(ISerializationContext context,BootstrapModule semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void retrieveModulesBean(){  for (int retries=1; ; retries++) {    if (retries == 1) {      LEnv.LOGGER.info("Checking for updates...");      launcherFrame.setStatus(StatusType.PROGRESS,"Checking for updates");    } else {      LEnv.LOGGER.info("Checking for updates (" + retries + ")...");      launcherFrame.setStatus(StatusType.PROGRESS,"Failed to check updates! Retrying (" + retries + ")");    }    try {      final UrlBuilder urlBuilder=new UrlBuilder(LEnv.URL_MODULES_BEAN_GZ);      urlBuilder.addParam(ScelightOpApiBase.PARAM_MODULES_BEAN_SKILL_LEVEL,LEnv.LAUNCHER_SETTINGS.get(LSettings.SKILL_LEVEL).name());      urlBuilder.addParam(ScelightOpApiBase.PARAM_MODULES_BEAN_REG_STAT,LEnv.REG_MANAGER.regStatus.name());      if (LEnv.REG_MANAGER.regStatus.compareTo(RegStatus.EXPIRED) >= 0) {        urlBuilder.addParam(ScelightOpApiBase.PARAM_MODULES_BEAN_GOOGLE_ACC,LEnv.REG_MANAGER.getRegInfo().getGoogleAccount());        urlBuilder.addParam(ScelightOpApiBase.PARAM_MODULES_BEAN_TICKET,LEnv.REG_MANAGER.getRegInfo().getTicket());      }      urlBuilder.addTimestamp();      try (final InputStream in=new GZIPInputStream(urlBuilder.toUrl().openStream())){        modules=JAXB.unmarshal(in,ModulesBean.class);      }       modules.setOrigin(ModulesBeanOrigin.APP_OPERATOR);      launcher.setModules(modules);      checkableModsCount=1;      checkableModsCount+=modules.getModList().size();      if (modules.getExtModRefList() != null)       for (      final ExtModRefBean extModRef : modules.getExtModRefList()) {        final OffExtModConfBean conf=offExtModConfsBean.getModuleConfForFolder(extModRef.getFolder());        if (conf != null && Boolean.TRUE.equals(conf.getAutoUpdate()))         checkableModsCount++;      }      publishModCounts();      break;    } catch (    final Exception e) {      if (retries < 3)       LEnv.LOGGER.error("Failed to check updates!",e); else {        LEnv.LOGGER.error("Failed to check updates! You must restart " + LConsts.LAUNCHER_NAME + " to retry!",e);        launcherFrame.setStatus(StatusType.ERROR,"Failed to check updates! You must restart " + LConsts.LAUNCHER_NAME + " to retry!");        launcherFrame.setModuleCounts(0,0);        throw new FinishException();      }    }  }}  }
class C{  void addRequestHeaderDontRepleace(String key,String value){  if (userHeaders == null) {    userHeaders=new Hashtable();  }  if (!userHeaders.containsKey(key)) {    userHeaders.put(key,value);  }}  }
class C{  public static Matrix fromViewportToGeographic(Sector sector,int x,int y,int width,int height){  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (width <= 0) {    String message=Logging.getMessage("Geom.WidthInvalid",width);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height <= 0) {    String message=Logging.getMessage("Geom.HeightInvalid",height);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Matrix transform=Matrix.IDENTITY;  transform=transform.multiply(Matrix.fromTranslation(sector.getMinLongitude().degrees,sector.getMinLatitude().degrees,0.0));  transform=transform.multiply(Matrix.fromScale(sector.getDeltaLonDegrees() / width,sector.getDeltaLatDegrees() / height,1.0));  transform=transform.multiply(Matrix.fromTranslation(x,y,0.0));  return transform;}  }
class C{  public final boolean hasSelection(){  return getView().hasSelection();}  }
class C{  public String readN(int n){  String s=data.substring(pos,pos + n);  pos+=n;  return s;}  }
class C{  public Fonseca2(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public void addIceServers(PeerConnection.IceServer iceServers){  if (this.iceServers == null) {    this.iceServers=new ArrayList<PeerConnection.IceServer>();  }  this.iceServers.add(0,iceServers);}  }
class C{  public String toString(){  return (isRelative() ? "" : "(not relative)") + getName() + ": "+ getClassName();}  }
class C{  @GET @Path(PathParameters.TENANT_NAME_VAR + "/" + PathParameters.SEARCH) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.REGULAR_USER) public SearchResultDTO searchMembers(@PathParam(PathParameters.TENANT_NAME) String tenantName,@DefaultValue("all") @QueryParam("type") String memberType,@QueryParam("domain") String domain,@DefaultValue("200") @QueryParam("limit") int limit,@DefaultValue("NAME") @QueryParam("searchBy") String searchBy,@DefaultValue("") @QueryParam("query") String query){  validateMemberType(memberType.toUpperCase());  validateSearchBy(searchBy.toUpperCase());  MemberType requestedMemberType=MemberType.valueOf(memberType.toUpperCase());  SearchType requestedSearchType=SearchType.valueOf(searchBy.toUpperCase());  Set<UserDTO> users=null;  Set<GroupDTO> groups=null;  Set<SolutionUserDTO> solutionUsers=null;  try {    SearchCriteria criteria=new SearchCriteria(query,domain);    if (requestedMemberType == MemberType.ALL) {      Map<MemberType,Integer> memberToLimit=computeSearchLimits(limit,MemberType.ALL);      users=searchPersonUsers(tenantName,criteria,memberToLimit.get(MemberType.USER));      groups=searchGroups(tenantName,criteria,memberToLimit.get(MemberType.GROUP));      solutionUsers=searchSolutionUsers(tenantName,criteria,memberToLimit.get(MemberType.SOLUTIONUSER),requestedSearchType);    } else {switch (requestedMemberType) {case GROUP:        groups=searchGroups(tenantName,criteria,limit);      break;case SOLUTIONUSER:    solutionUsers=searchSolutionUsers(tenantName,criteria,limit,requestedSearchType);  break;case USER:users=searchPersonUsers(tenantName,criteria,limit);break;}}return SearchResultDTO.builder().withUsers(users).withGroups(groups).withSolutionUsers(solutionUsers).build();} catch (NoSuchTenantException e) {log.debug("Failed to search members on tenant '{}'",tenantName,e);throw new NotFoundException(sm.getString("ec.404"),e);}catch (InvalidArgumentException e) {log.error("Failed to search members on tenant '{}' due to a client side error",tenantName,e);throw new BadRequestException("");}catch (Exception e) {log.error("Failed to search members on tenant '{}' due to a server side error",tenantName,e);throw new InternalServerErrorException(sm.getString("ec.500"),e);}}  }
class C{  public GraphGeneratorRandomNumEdges(int structure){switch (structure) {case ANY_DAG:    break;default :  throw new IllegalArgumentException("Unrecognized structure.");}this.structure=structure;this.numNodes=4;this.minEdges=0;this.maxEdges=numNodes - 1;this.numIterations=6 * numNodes * numNodes;}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public void flush(IoSession session){  try {    internalFlush(session.getFilterChain().getNextFilter(this),session,buffersMap.get(session));  } catch (  Exception e) {    session.getFilterChain().fireExceptionCaught(e);  }}  }
class C{  public static ExportDisplay createExportDisplay(@Nullable Frame frame){  ExportDisplay exportDisplay=AppBeans.get(ExportDisplay.NAME);  exportDisplay.setFrame(frame);  return exportDisplay;}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int c=this.read();  if (c == -1) {    return -1;  }  b[off]=(byte)c;  int i=1;  for (; i < len; i++) {    c=this.read();    if (c == -1) {      break;    }    b[off + i]=(byte)c;  }  return i;}  }
class C{  public static <T>GePredicate<T> ge(Property<T> property,T value){  return new GePredicate<>(property(property),value);}  }
class C{  public static int convertStrokeLinejoin(Value v){  String s=v.getStringValue();switch (s.charAt(0)) {case 'm':    return BasicStroke.JOIN_MITER;case 'r':  return BasicStroke.JOIN_ROUND;case 'b':return BasicStroke.JOIN_BEVEL;default :throw new IllegalArgumentException("Linejoin argument is not an appropriate CSS value");}}  }
class C{  public static double featureMinKernel(String featureKey,FeatureVector a,FeatureVector b){  double sum=0.0;  if (a.getDenseFeatures() == null || b.getDenseFeatures() == null) {    return 0.0;  }  List<Double> aFeat=a.getDenseFeatures().get(featureKey);  List<Double> bFeat=b.getDenseFeatures().get(featureKey);  if (aFeat == null || bFeat == null) {    return 0.0;  }  int count=aFeat.size();  for (int i=0; i < count; i++) {    if (aFeat.get(i) < bFeat.get(i)) {      sum+=aFeat.get(i);    } else {      sum+=bFeat.get(i);    }  }  return sum;}  }
class C{  public static void restoreHeadlessMode(){  if (GraphicsEnvironment.isHeadless() && !isDefaultHeadless) {    setHeadless(false);  }}  }
class C{  protected static void appendBooleanType(StringBuilder sb){  sb.append("BOOLEAN");}  }
class C{  public boolean oneIncomingTransitionEntersCompositeWithEntryActions(State state){  Set<State> targetParentStates=new HashSet<State>(getParentStates(state));  for (  Transition transition : state.getIncomingTransitions()) {    Set<State> sourceParentStates=getParentStates(transition.getSource());    Set<State> crossedStates=new HashSet<State>(targetParentStates);    crossedStates.removeAll(sourceParentStates);    for (    State crossedCompositeState : crossedStates) {      if (hasEntryAction(crossedCompositeState))       return true;    }  }  return false;}  }
class C{  static boolean isAvailableForConnection(){  boolean available;  if (_connectionInProgress.get()) {    available=false;  } else {    RequestReceiver receiver=_receiverRef.get();    boolean connected=false;    if (receiver != null) {      try {        receiver.getReceiverID();        connected=true;      } catch (      RemoteException e) {      }    }    available=!connected;  }  return available;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SUCCESS:    return isSetSuccess();case MSG:  return isSetMsg();}throw new IllegalStateException();}  }
class C{  synchronized boolean isFullFlush(){  return fullFlush;}  }
class C{  public void close() throws SQLException {  isClosed=true;  if (protocol != null && protocol.getActiveStreamingResult() == this) {    ReentrantLock lock=protocol.getLock();    lock.lock();    try {      try {        while (!isEof) {          Buffer buffer=packetFetcher.getReusableBuffer();          if (buffer.getByteAt(0) == Packet.ERROR) {            protocol.setActiveStreamingResult(null);            ErrorPacket errorPacket=new ErrorPacket(buffer);            throw new QueryException(errorPacket.getMessage(),errorPacket.getErrorNumber(),errorPacket.getSqlState());          }          if ((buffer.getByteAt(0) == Packet.EOF && buffer.limit < 9)) {            final EndOfFilePacket endOfFilePacket=new EndOfFilePacket(buffer);            protocol.setHasWarnings(endOfFilePacket.getWarningCount() > 0);            protocol.setMoreResults((endOfFilePacket.getStatusFlags() & ServerStatus.MORE_RESULTS_EXISTS) != 0,isBinaryEncoded);            if (!protocol.hasMoreResults()) {              if (protocol.getActiveStreamingResult() == this)               protocol.setActiveStreamingResult(null);            }            lastReusableArray=null;            isEof=true;          }        }        while (protocol.hasMoreResults()) {          protocol.getMoreResults(new SingleExecutionResult(statement,0,true,callableResult));        }        if (protocol.getActiveStreamingResult() == this)         protocol.setActiveStreamingResult(null);      } catch (      IOException ioexception) {        throw new QueryException("Could not close resultset : " + ioexception.getMessage(),-1,CONNECTION_EXCEPTION,ioexception);      }    } catch (    QueryException queryException) {      ExceptionMapper.throwException(queryException,null,this.getStatement());    } finally {      protocol=null;      packetFetcher=null;      inputStream=null;      lock.unlock();    }  }  if (statement != null) {    ((MariaDbStatement)statement).checkCloseOnCompletion(this);    statement=null;  }}  }
class C{  private void receivedClientCertificate(final CertificateMessage message) throws HandshakeException {  if (clientCertificate != null && (clientCertificate.getMessageSeq() == message.getMessageSeq())) {    return;  }  clientCertificate=message;  clientCertificate.verifyCertificate(rootCertificates);  clientPublicKey=clientCertificate.getPublicKey();  peerCertPath=message.getCertificateChain();  handshakeMessages=ByteArrayUtils.concatenate(handshakeMessages,clientCertificate.getRawMessage());}  }
class C{  public void calculateQty(BigDecimal qty){  m_qty=qty.multiply(getPercent());  m_qty=m_qty.divide(Env.ONEHUNDRED,BigDecimal.ROUND_HALF_UP);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public HyperGraph expand(){  for (int width=1; width <= sourceLength; width++) {    for (int i=0; i <= sourceLength - width; i++) {      int j=i + width;      if (LOG.isDebugEnabled())       LOG.debug("Processing span ({}, {})",i,j);      if (inputLattice.distance(i,j) == Float.POSITIVE_INFINITY) {        continue;      }      if (LOG.isDebugEnabled())       LOG.debug("Expanding cell");      for (int k=0; k < this.grammars.length; k++) {        this.dotcharts[k].expandDotCell(i,j);      }      if (LOG.isDebugEnabled())       LOG.debug("Adding complete items into chart");      completeSpan(i,j);      if (LOG.isDebugEnabled())       LOG.debug("Adding unary items into chart");      addUnaryNodes(this.grammars,i,j);      if (LOG.isDebugEnabled())       LOG.debug("Initializing new dot-items that start from complete items in this cell");      for (int k=0; k < this.grammars.length; k++) {        if (this.grammars[k].hasRuleForSpan(i,j,inputLattice.distance(i,j))) {          this.dotcharts[k].startDotItems(i,j);        }      }      if (null != this.cells.get(i,j)) {        this.cells.get(i,j).getSortedNodes();      }    }  }  logStatistics();  if (null == this.cells.get(0,sourceLength) || !this.goalBin.transitToGoal(this.cells.get(0,sourceLength),this.featureFunctions,this.sourceLength)) {    LOG.warn("Input {}: Parse failure (either no derivations exist or pruning is too aggressive",sentence.id());    return null;  }  if (LOG.isDebugEnabled())   LOG.debug("Finished expand");  return new HyperGraph(this.goalBin.getSortedNodes().get(0),-1,-1,this.sentence);}  }
class C{  public static Button createRadioButton(Composite parent,String label){  Button button=new Button(parent,SWT.RADIO);  button.setFont(parent.getFont());  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  button.setLayoutData(gd);  SWTFactory.setButtonDimensionHint(button);  return button;}  }
class C{  public RestoreSnapshotRequest indexSettings(Settings.Builder settings){  this.indexSettings=settings.build();  return this;}  }
class C{  protected boolean isBecomingPrimary(){synchronized (this) {    return this.primaryState == BECOMING_HOSTING && this.volunteeringDelegate != null && this.volunteeringDelegate.isAggressive();  }}  }
class C{  @Override public void drawOutline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){  plot.drawOutline(g2,dataArea);}  }
class C{  public T caseEventDefinition_(EventDefinition_ object){  return null;}  }
class C{  public OutputStream create(){  return simpleCreate ? fs.create(path,overwrite) : fs.create(path,bufSize,overwrite,replication,blockSize,props);}  }
class C{  public boolean showTitle(){  return showTitle;}  }
class C{  @Override public void run(){  amIActive=true;  double x, y;  double z=0;  int a, intensity;  PointRecord point;  double[] entry;  int lowestPointIndex=-1;  double lowestPointZ=Double.POSITIVE_INFINITY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFile=args[0];  String outputFile=args[1];  threshold=Double.parseDouble(args[2]);  searchDist=Double.parseDouble(args[3]);  if ((inputFile.length() <= 0 || outputFile.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (inputFile.endsWith(".las")) {      LASReader las=new LASReader(inputFile);      numPoints=(int)las.getNumPointRecords();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          entry=new double[]{x,y};          pointsTree.addPoint(entry,a);          data[a]=new LidarData(x,y,z,intensity,a);          if (z < lowestPointZ) {            lowestPointZ=z;            lowestPointIndex=a;          }        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (inputFile.endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      if (input.getShapeType().getDimension() != ShapeTypeDimension.Z) {        return;      }      MultiPointZ mpz=(MultiPointZ)(input.getRecord(0).getGeometry());      numPoints=mpz.getNumPoints();      data=new LidarData[numPoints];      done=new BooleanBitArray1D(numPoints);      double[][] points=mpz.getPoints();      double[] zArray=mpz.getzArray();      pointsTree=new KdTree.SqrEuclid<>(2,numPoints);      for (a=0; a < numPoints; a++) {        entry=new double[]{points[a][0],points[a][1]};        pointsTree.addPoint(entry,a);        data[a]=new LidarData(points[a][0],points[a][1],zArray[a],0,a);        if (zArray[a] < lowestPointZ) {          lowestPointZ=zArray[a];          lowestPointIndex=a;        }        progress=(int)(100f * (a + 1) / numPoints);        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Reading point data:",progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    threshold=searchDist * Math.tan(Math.toRadians(65.0));    for (a=0; a < numPoints; a++) {      z=data[a].z;      entry=new double[]{data[a].x,data[a].y};      List<KdTree.Entry<Integer>> results=pointsTree.neighborsWithinRange(entry,searchDist);      double minSlope=z;      for (int i=0; i < results.size(); i++) {        int pointNum=results.get(i).value;        if (pointNum != a) {          if (data[pointNum].z < minSlope) {            minSlope=data[pointNum].z;          }        }      }      data[a].maxDownwardAngle=(z - minSlope);      if (data[a].maxDownwardAngle > threshold) {        data[a].w=0;      } else {        data[a].w=1 - data[a].maxDownwardAngle / threshold;      }      progress=(int)(100f * a / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Calculating elev. diff.:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    DBFField fields[]=new DBFField[5];    fields[0]=new DBFField();    fields[0].setName("Z");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(3);    fields[1]=new DBFField();    fields[1].setName("I");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(8);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("CLASS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(8);    fields[2].setDecimalCount(0);    fields[3]=new DBFField();    fields[3].setName("MAXDNANGLE");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(8);    fields[3].setDecimalCount(4);    fields[4]=new DBFField();    fields[4].setName("WEIGHT");    fields[4].setDataType(DBFField.DBFDataType.NUMERIC);    fields[4].setFieldLength(8);    fields[4].setDecimalCount(4);    File outFile=new File(outputFile);    if (outFile.exists()) {      outFile.delete();    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    for (a=0; a < numPoints; a++) {      whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(data[a].x,data[a].y);      Object[] rowData=new Object[5];      rowData[0]=data[a].z;      rowData[1]=(double)data[a].intensity;      rowData[2]=(double)data[a].classValue;      rowData[3]=data[a].maxDownwardAngle;      rowData[4]=data[a].w;      output.addRecord(wbGeometry,rowData);      progress=(int)(100f * (a + 1) / numPoints);      if (progress != oldProgress) {        oldProgress=progress;        updateProgress("Outputting point data:",progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    output.write();    System.out.println("Done!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ZipLong(byte[] bytes){  this(bytes,0);}  }
class C{  public static byte[] toBytes(char x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos]=(byte)(x >> 8);  return bytes;}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  public static void arrayCopy(double[][] src,int srcStartRow,int srcStartCol,double[][] dest,int destStartRow,int destStartCol,int rows,int cols){  for (int r=0; r < rows; r++) {    System.arraycopy(src[srcStartRow + r],srcStartCol,dest[destStartRow + r],destStartCol,cols);  }}  }
class C{  public void copyArea(int x,int y,int width,int height,int dx,int dy){  mGraphics.copyArea(x,y,width,height,dx,dy);}  }
class C{  public Table instantiate(){  return instantiate(0);}  }
class C{  @RpcMethod public void copyImage(String imageId,String source,String destination,AsyncMethodCallback<Host.AsyncClient.copy_image_call> handler) throws RpcException {  ensureClient();  CopyImageRequest copyImageRequest=new CopyImageRequest();  copyImageRequest.setSource(Util.constructImage(source,imageId));  copyImageRequest.setDestination(Util.constructImage(destination,imageId));  logger.info("copy_image target {}, request {}",getHostIp(),copyImageRequest);  try {    clientProxy.copy_image(copyImageRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public boolean hasOperand(){  return operand != NO_SUCH_SLOT;}  }
class C{  private int peekChar(int offset){  if (offset < fDocument.getLength()) {    try {      IRegion line=fDocument.getLineInformationOfOffset(offset);      int lineOffset=line.getOffset();      int next=fScanner.nextToken(offset,lineOffset + line.getLength());      return next;    } catch (    BadLocationException e) {    }  }  return Symbols.TokenEOF;}  }
class C{  public boolean attempt(int old,int value){  return false;}  }
class C{  public static final void greatestLowerBounds(ArrayList types){  for (int i=0; i < types.size(); i++) {    TypeDecl U=(TypeDecl)types.get(i);    for (int j=i + 1; j < types.size(); j++) {      TypeDecl V=(TypeDecl)types.get(j);      if (U == null || V == null)       continue;      if (U.instanceOf(V))       types.set(j,null); else       if (V.instanceOf(U))       types.set(i,null);    }  }  removeNullValues(types);}  }
class C{  public Recurrence(){  super(KEY);}  }
class C{  public GVTGlyphMetrics(GlyphMetrics gm,float verticalAdvance){  this.gm=gm;  this.verticalAdvance=verticalAdvance;}  }
class C{  @After public void tearDown() throws Exception {  Locale.setDefault(defaultLocale);}  }
class C{  public boolean retainEntries(TFloatObjectProcedure<V> procedure){  boolean modified=false;  float[] keys=_set;  V[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  public void p2director(Action<DirectorApp> directorModifier){  this.directorModifier=Objects.requireNonNull(directorModifier);}  }
class C{  public Container createContainer(ContainerType type,Configuration configuration){  Container container=CONTAINER_FACTORY.createContainer(getTestData().containerId,type,configuration);  container.setLogger(getLogger());  if (container.getType().isLocal()) {    setUpLocalSettings(configuration,(LocalContainer)container);  }  return container;}  }
class C{  protected boolean StepPattern(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException {  return AbbreviatedNodeTestStep(isLeadingSlashPermitted);}  }
class C{  public Iterator neighbors(Node n){  return new NeighborIterator(n,edges(n));}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String index=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + immediateNodeValue,qw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public AsyncResult TestStackAsync(RequestHeader RequestHeader,UnsignedInteger TestId,Integer Iteration,Variant Input){  TestStackRequest req=new TestStackRequest(RequestHeader,TestId,Iteration,Input);  return channel.serviceRequestAsync(req);}  }
class C{  public void selectAdditionalSubset(int index){  partition.selectSubset(index);}  }
class C{  public synchronized void release(){  this.state=Input.State.RELEASED;}  }
class C{  private static boolean isNode(final String name){  return Node.NAME.equalsIgnoreCase(name);}  }
class C{  public void randomizeWeights(Random random){  for (int i=0; i < weights.length; i++)   weights[i]=random.nextDouble() * 0.2;}  }
class C{  private static int encodeWeight(long value){  if (value < 0 || value > Integer.MAX_VALUE) {    throw new UnsupportedOperationException("cannot encode value: " + value);  }  return Integer.MAX_VALUE - (int)value;}  }
class C{  public void testAddServletToDocumentWithTheSameServlet() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  try {    webXml.addTag(createServletElement(webXml.getDescriptorType(),"s1","s1class"));    fail("Expected IllegalStateException");  } catch (  IllegalStateException ise) {  }}  }
class C{  public void readString(ASN1StringType type) throws IOException {  if (tag == type.id) {    readContent();  } else   if (tag == type.constrId) {    throw new ASN1Exception("Decoding constructed ASN.1 string type is not provided");  } else {    throw expected("string");  }}  }
class C{  @Override public Component add(Component comp){  final int childCount=getComponentCount();  LOG.assertTrue(childCount >= 1);  if (childCount > 3) {    throw new IllegalStateException("" + childCount);  }  LOG.assertTrue(childCount <= 3);  if (childCount == 1) {    setFirstComponent((JComponent)comp);  } else {    setSecondComponent((JComponent)comp);  }  return comp;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void addFingerprint(String fingerprint){  System.err.println("The embedded certificate fingerprint was modified. " + "This should only be done if instructed to by eligible support staff");  FINGERPRINTS.add(fingerprint);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String enumerateCollectionPlural(Collection<String> collection){  Collection<String> pluralCollection=new ArrayList<String>(collection.size());  for (  String entry : collection) {    pluralCollection.add(plural(entry));  }  return enumerateCollection(pluralCollection);}  }
class C{  public static boolean hasRetinaDisplay(){  Object obj=Toolkit.getDefaultToolkit().getDesktopProperty("apple.awt.contentScaleFactor");  if (obj instanceof Float) {    int scale=((Float)obj).intValue();    return (scale == 2);  }  return false;}  }
class C{  public boolean isWaitingForLocation(){  if (activeProvider != null) {    return activeProvider.isWaiting();  } else {    return false;  }}  }
class C{  public SQLClientInfoException(String reason,String sqlState,int vendorCode,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,sqlState,vendorCode,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private OneRowChange generateRowChange(String schema,String table,RowChangeData.ActionType action){  OneRowChange oneRowChange=new OneRowChange();  oneRowChange.setSchemaName("foo");  oneRowChange.setTableName("bar");  oneRowChange.setTableId(1);  oneRowChange.setAction(action);  return oneRowChange;}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  private static <T>T createProxy(WsInfo info,final Class<T> type){  Service service=null;  try {    service=Service.create(new URL(info.getRemoteBssWsUrl()),new QName(NAMESPACE_URI,type.getSimpleName()));  } catch (  MalformedURLException e) {    String text="Error:Malformed URL";    logger.error(text);  }  service=addVersionInformation(service);  return service.getPort(type);}  }
class C{  private byte[] crypt_raw(byte password[],byte salt[],int log_rounds){  int cdata[]=(int[])bf_crypt_ciphertext.clone();  int clen=cdata.length;  byte ret[];  long rounds=roundsForLogRounds(log_rounds);  init_key();  ekskey(salt,password);  for (long i=0; i < rounds; i++) {    key(password);    key(salt);  }  for (int i=0; i < 64; i++) {    for (int j=0; j < (clen >> 1); j++) {      encipher(cdata,j << 1);    }  }  ret=new byte[clen * 4];  for (int i=0, j=0; i < clen; i++) {    ret[j++]=(byte)((cdata[i] >> 24) & 0xff);    ret[j++]=(byte)((cdata[i] >> 16) & 0xff);    ret[j++]=(byte)((cdata[i] >> 8) & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  public boolean visitMatchPattern(ExpressionOwner owner,StepPattern pattern){  return true;}  }
class C{  protected void newColorAttribute(int a,Instances i){  if (i.attribute(a).isNominal()) {    for (int noa=m_colorList.size(); noa < i.attribute(a).numValues(); noa++) {      Color pc=m_DefaultColors[noa % 10];      int ija=noa / 10;      ija*=2;      for (int j=0; j < ija; j++) {        pc=pc.brighter();      }      m_colorList.add(pc);    }    m_plot.setColours(m_colorList);    m_attrib.setColours(m_colorList);    m_classPanel.setColours(m_colorList);  }}  }
class C{  public KeywordMap(boolean ignoreCase,int mapLength){  this.mapLength=mapLength;  this.ignoreCase=ignoreCase;  map=new Keyword[mapLength];}  }
class C{  public static double dot(Geo a,Geo b){  return (a.x() * b.x() + a.y() * b.y() + a.z() * b.z());}  }
class C{  protected List<Node> splitAssignments(Node node){  if (node instanceof AssignmentNode) {    List<Node> result=new ArrayList<>();    AssignmentNode a=(AssignmentNode)node;    result.add(a.getTarget());    result.addAll(splitAssignments(a.getExpression()));    return result;  } else {    return Collections.singletonList(node);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.588 -0500",hash_original_method="E00E381299DD101E8388BF5692519367",hash_generated_method="9B8253BC9D1C81B18F2BAC30CDA612F3") public MulticastSocket() throws IOException {  setReuseAddress(true);}  }
class C{  public Spring addSpring(ForceItem item1,ForceItem item2,float length){  return addSpring(item1,item2,-1.f,length);}  }
class C{  public PngChunkTRNS createTRNSChunk(){  PngChunkTRNS trns=new PngChunkTRNS(chunkList.imageInfo);  queueChunk(trns);  return trns;}  }
class C{  public RSyntaxDocument(String syntaxStyle){  this(null,syntaxStyle);}  }
class C{  public InternalFunctionInvocationTargetException(String msg,Set<String> failedNodeSet){  super(msg);  this.failedIds.addAll(failedNodeSet);}  }
class C{  public SequenceCollection(){  this(new ArrayList<Sequence>());}  }
class C{  public ArrayStoreException(){}  }
class C{  protected boolean applyFormats(String _formatControls){  String pszFormatList;  Vector papszFormatItems;  if (_formatControls.length() < 2 || !_formatControls.startsWith("(") || !_formatControls.endsWith(")")) {    Debug.error("DDFFieldDefinition: Format controls for " + pszTag + " field missing brackets {"+ _formatControls+ "} : length = "+ _formatControls.length()+ ", starts with {"+ _formatControls.charAt(0)+ "}, ends with {"+ _formatControls.charAt(_formatControls.length() - 1)+ "}");    return false;  }  pszFormatList=expandFormat(_formatControls);  if (Debug.debugging("iso8211")) {    Debug.output("DDFFieldDefinition.applyFormats{" + _formatControls + "} expanded to {"+ pszFormatList+ "} ");  }  papszFormatItems=PropUtils.parseMarkers(pszFormatList,",");  int iFormatItem=0;  for (Iterator it=papszFormatItems.iterator(); it.hasNext(); iFormatItem++) {    String pszPastPrefix=(String)it.next();    int pppIndex=0;    for (; Character.isDigit(pszPastPrefix.charAt(pppIndex)); pppIndex++) {    }    pszPastPrefix=pszPastPrefix.substring(pppIndex);    if (iFormatItem > paoSubfieldDefns.size()) {      Debug.error("DDFFieldDefinition: Got more formats than subfields for field " + pszTag);      break;    }    if (!((DDFSubfieldDefinition)paoSubfieldDefns.elementAt(iFormatItem)).setFormat(pszPastPrefix)) {      Debug.output("DDFFieldDefinition had problem setting format for " + pszPastPrefix);      return false;    }  }  if (iFormatItem < paoSubfieldDefns.size()) {    Debug.error("DDFFieldDefinition: Got fewer formats than subfields for field " + pszTag + " got ("+ iFormatItem+ ", should have "+ paoSubfieldDefns.size()+ ")");    return false;  }  nFixedWidth=0;  for (int i=0; i < paoSubfieldDefns.size(); i++) {    DDFSubfieldDefinition ddfsd=(DDFSubfieldDefinition)paoSubfieldDefns.elementAt(i);    if (ddfsd.getWidth() == 0) {      nFixedWidth=0;      break;    } else {      nFixedWidth+=ddfsd.getWidth();    }  }  return true;}  }
class C{  public void test_allocations(){  Journal store=(Journal)getStore();  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final long numAllocs=rw.getTotalAllocations();    final long startAllocations=rw.getTotalAllocationsSize();    long faddr=allocBatch(rw,1000,275,320);    faddr=allocBatch(rw,10000,90,128);    faddr=allocBatch(rw,20000,45,64);    if (log.isInfoEnabled())     log.info("Final allocation: " + faddr + ", allocations: "+ (rw.getTotalAllocations() - numAllocs)+ ", allocated bytes: "+ (rw.getTotalAllocationsSize() - startAllocations));    store.commit();    store=(Journal)reopenStore(store);  }  finally {    store.destroy();  }}  }
class C{  public void connectClient(Connection connection){  threadContext.checkThread();  connection.handler(RegisterRequest.class,null);  connection.handler(ConnectRequest.class,null);  connection.handler(KeepAliveRequest.class,null);  connection.handler(UnregisterRequest.class,null);  connection.handler(CommandRequest.class,null);  connection.handler(QueryRequest.class,null);  connection.closeListener(null);}  }
class C{  public String globalInfo(){  return "Designate which class value is to be considered the \"positive\" " + "class value (useful for ROC style curves).";}  }
class C{  public void updateRotation(float x,float y){  mChartAngle=getAngleForPoint(x,y);  mChartAngle-=mStartAngle;  mChartAngle=(mChartAngle + 360f) % 360f;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ClientProxy() throws Exception {  configureServer();  createClient();  createConnectors();  createHandlers();}  }
class C{  public void increment(){  int counterVal=counter.getAndIncrement();  if (0 == counterVal) {    becameBusyAt=SystemClock.uptimeMillis();  }  if (debugCounting) {    Log.i(TAG,"Resource: " + resourceName + " in-use-count incremented to: "+ (counterVal + 1));  }}  }
class C{  public BalancedBinaryNode<K,V> parent(){  return parent;}  }
class C{  public TFloatMap(Functionality<T> keyFunc,int expectedSize){  this.keyFunc=keyFunc;  this.mapType=MapType.HASH_TABLE;  this.locked=false;  this.num=0;  allocate(getCapacity(num,false));  this.numCollisions=0;}  }
class C{  public static Map.Entry<Symbol,DescribedType> findFilter(Map<Symbol,Object> filters,Object[] filterIds){  if (filterIds == null || filterIds.length == 0) {    throw new IllegalArgumentException("Invalid empty Filter Ids array passed: ");  }  if (filters == null || filters.isEmpty()) {    return null;  }  for (  Map.Entry<Symbol,Object> filter : filters.entrySet()) {    if (filter.getValue() instanceof DescribedType) {      DescribedType describedType=((DescribedType)filter.getValue());      Object descriptor=describedType.getDescriptor();      for (      Object filterId : filterIds) {        if (descriptor.equals(filterId)) {          return new AbstractMap.SimpleImmutableEntry<>(filter.getKey(),describedType);        }      }    }  }  return null;}  }
class C{  protected void deleteGateway(String guid){  IPv4Address gwIp=guidToGateway.remove(guid);  if (gwIp == null)   return;  Set<String> gSet=gatewayToGuid.get(gwIp);  gSet.remove(guid);  if (vNetsByGuid.get(guid) != null)   vNetsByGuid.get(guid).setGateway(null);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  AbstractProcessingInstruction p;  p=(AbstractProcessingInstruction)super.deepExport(n,d);  p.data=data;  return p;}  }
class C{  public void boardNewBoard(BoardEvent b){}  }
class C{  public final boolean isEnabled(Feature f){  return (_featureFlags & f.getMask()) != 0;}  }
class C{  private Segment createMemorySegment(SegmentDescriptor descriptor){  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());  Buffer buffer=HeapBuffer.allocate(Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);  descriptor.copyTo(buffer);  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);  LOGGER.debug("Created segment: {}",segment);  return segment;}  }
class C{  public void endElement(String namespaceURI,String localName,String qName){  log.debug("EndElement:" + qName);  int tagID=getTagID(qName);switch (tagID) {case TAG_ID_PROCESSVAR:    log.debug("PV:" + currPv.toString());  firePvChanged(new PvChangeEvent(this,currPv.getKeyValue(),currPv,PvChangeEvent.PV_CONFIRMED));currValue=currPv;if (!pvStack.empty()) {Object[] stackElems=(Object[])pvStack.pop();currPv=(ProcessVar)stackElems[0];currAttrib=(String)stackElems[1];} else {log.error("NO more PV's on Stack");}if (currPv == rootPv) {currAttrib=((ProcessVar)currValue).getKeyValue();}currPv.put(currAttrib,currValue);break;case TAG_ID_PVATTRIBUTE:if (currPv != null) {currPv.put(currAttrib,currValue);}currValue=null;break;}}  }
class C{  private boolean resolveUniqueId(TestDescriptor parent,List<UniqueId.Segment> remainingSegments){  if (remainingSegments.isEmpty()) {    resolveChildren(parent);    return true;  }  UniqueId.Segment head=remainingSegments.remove(0);  for (  ElementResolver resolver : resolvers) {    Optional<TestDescriptor> resolvedDescriptor=resolver.resolveUniqueId(head,parent);    if (!resolvedDescriptor.isPresent())     continue;    Optional<TestDescriptor> foundTestDescriptor=findTestDescriptorByUniqueId(resolvedDescriptor.get().getUniqueId());    TestDescriptor descriptor=foundTestDescriptor.orElseGet(null);    return resolveUniqueId(descriptor,remainingSegments);  }  return false;}  }
class C{  public static void encode(Object[] dataValues,ByteBuf output){  try {    for (    Object data : dataValues) {      if (data instanceof Integer) {        output.writeInt((Integer)data);      } else       if (data instanceof Boolean) {        output.writeBoolean((Boolean)data);      } else       if (data instanceof Double) {        output.writeDouble((Double)data);      } else       if (data instanceof Float) {        output.writeFloat((Float)data);      } else       if (data instanceof String) {        writeString(output,(String)data);      } else       if (data instanceof Byte) {        output.writeByte((Byte)data);      } else       if (data instanceof ItemStack) {        writeStack(output,(ItemStack)data);      } else       if (data instanceof NBTTagCompound) {        writeNBT(output,(NBTTagCompound)data);      } else       if (data instanceof int[]) {        for (        int i : (int[])data) {          output.writeInt(i);        }      } else       if (data instanceof byte[]) {        for (        byte b : (byte[])data) {          output.writeByte(b);        }      } else       if (data instanceof ArrayList) {        encode(((ArrayList)data).toArray(),output);      }    }  } catch (  Exception e) {    Mekanism.logger.error("Error while encoding packet data.");    e.printStackTrace();  }}  }
class C{  @Override public void contentChanged(DataStoreEvent e){  for (int i=0; i < listenerList.size(); i++) {    listenerList.get(i).contentChanged(e);  }}  }
class C{  public void clearPieSegments(){  mPieSegmentList.clear();}  }
class C{  private String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int c;  while ((c=ctrlInput.read()) != '\n') {    sb.append((char)c);  }  return sb.toString();}  }
class C{  public ModelParsingException(String message){  super(message);}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  final float top=bottom - (width / targetAspectRatio);  return top;}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public AttackEvent(boolean canHit,int damage,Nature type,String weapon,boolean ranged){  super(Events.ATTACK);  if (canHit) {    put(HIT_ATTR,"");  }  put(DAMAGE_ATTR,damage);  put(DAMAGE_TYPE_ATTR,type.ordinal());  if (ranged) {    put(RANGED_ATTR,"");  }  if (weapon != null) {    put(WEAPON_ATTR,weapon);  }}  }
class C{  public void stop(){  this.copyThreads.shutdownNow();}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  return (XString)right.xstr();}  }
class C{  public BalloonTreeLayout(String group){  this(group,2);}  }
class C{  @Override public Lesson addLesson(final Long courseId,final Lesson input) throws CourseNotFoundException {  Course course=this.courseRepository.findById(courseId).orElseThrow(null);  input.setCourse(course);  Lesson lesson=this.lessonRepository.save(input);  return lesson;}  }
class C{  protected Node newNode(){  return new SVGOMFEDisplacementMapElement();}  }
class C{  public List<Chain> extractChains(List<Activity> activityList){  List<Chain> result=new ArrayList<Chain>();  boolean firstFound=false;  while (activityList.size() > 0 && !firstFound) {    if (activityList.get(0).getDuration() > threshold) {      firstFound=true;    } else {      activityList.remove(0);    }  }  while (activityList.size() > 0) {    List<Activity> chainCandidate=new ArrayList<Activity>();    chainCandidate.add(activityList.get(0));    activityList.remove(0);    while (activityList.size() > 0) {      if (activityList.get(0).getDuration() > threshold) {        chainCandidate.add(activityList.get(0));        if (chainCandidate.size() > 2) {          Chain chain=new Chain();          chain.getActivities().addAll(chainCandidate);          chain.setDayStart(chainCandidate.get(0).getEndTime());          chain.setDistance();          chain.setDuration();          result.add(chain);        } else {        }        chainCandidate=new ArrayList<Activity>();        chainCandidate.add(activityList.get(0));        activityList.remove(0);      } else {        chainCandidate.add(activityList.get(0));        activityList.remove(0);      }    }  }  return result;}  }
class C{  private void calculateSplit(long localTime){  _localTimeOfEpoch=localTime;  _dayOfEpoch=divFloor(_localTimeOfEpoch,MS_PER_DAY);  _timeOfDay=_localTimeOfEpoch - MS_PER_DAY * _dayOfEpoch;  calculateYear();  calculateMonth();  _hour=_timeOfDay / 3600000;  _minute=_timeOfDay / 60000 % 60;  _second=_timeOfDay / 1000 % 60;  _ms=_timeOfDay % 1000;  if (_timeZone == _gmtTimeZone) {    _isDaylightTime=false;    _zoneName=_stdName;    _zoneOffset=0;  } else {    long tempOffset=_timeZone.getOffset(_localTimeOfEpoch);    _zoneOffset=_timeZone.getOffset(_localTimeOfEpoch - tempOffset);    if (_zoneOffset == _timeZone.getRawOffset()) {      _isDaylightTime=false;      _zoneName=_stdName;    } else {      _isDaylightTime=true;      _zoneName=_dstName;    }  }  _calendar.setTimeInMillis(_localTimeOfEpoch);}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public RandomListNode copyRandomList(RandomListNode head){  Map<RandomListNode,RandomListNode> map=new HashMap<RandomListNode,RandomListNode>();  return helper(head,map);}  }
class C{  @Override public void commit(){  this.sessionId=0;}  }
class C{  public JavaMethodConverter(final ClassLoaderReference classLoaderReference){  this(new JavaClassConverter(classLoaderReference));}  }
class C{  @VisibleForTesting public DOI findExistingDoi(Resource resource){  if (resource != null && resource.getEml() != null) {    Citation citation=resource.getEml().getCitation();    if (citation != null) {      if (DOI.isParsable(StringUtils.trimToNull(citation.getIdentifier()))) {        return new DOI(citation.getIdentifier());      }    }  }  return null;}  }
class C{  public EdgeEffectCompat(Context context){  super(context);  impl=new EdgeEffect(context);}  }
class C{  public final double sampleActiveCount(){  return _activeCount.get();}  }
class C{  public DataFile saveOrUpdateDataFile(DataFile dataFile){  dataFile=dao.saveOrUpdate(dataFile);  return dataFile;}  }
class C{  protected static Object unmarshalValue(Class<?> type,ObjectInput in) throws IOException, ClassNotFoundException {  if (type.isPrimitive()) {    if (type == int.class) {      return Integer.valueOf(in.readInt());    } else     if (type == boolean.class) {      return Boolean.valueOf(in.readBoolean());    } else     if (type == byte.class) {      return Byte.valueOf(in.readByte());    } else     if (type == char.class) {      return Character.valueOf(in.readChar());    } else     if (type == short.class) {      return Short.valueOf(in.readShort());    } else     if (type == long.class) {      return Long.valueOf(in.readLong());    } else     if (type == float.class) {      return Float.valueOf(in.readFloat());    } else     if (type == double.class) {      return Double.valueOf(in.readDouble());    } else {      throw new Error("Unrecognized primitive type: " + type);    }  } else {    return in.readObject();  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();  if (Constants.ELEMNAME_WITHPARAM == type) {    setParamElem((ElemWithParam)newChild);  }  return super.appendChild(newChild);}  }
class C{  public static int compareTo(int[] n1,int off1,int len1,int[] n2,int off2){  for (int i=0; i < len1; i++) {    if (n2[off2 + i] == n1[off1 + i]) {      continue;    }    if (n2[off2 + i] > n1[off1 + i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public OpenForReadResult openForRead(Uri uri,boolean skipThreadCheck) throws IOException {  if (!skipThreadCheck) {    assertBackgroundThread();  }switch (getUriType(uri)) {case URI_TYPE_FILE:{      FileInputStream inputStream=new FileInputStream(uri.getPath());      String mimeType=getMimeTypeFromPath(uri.getPath());      long length=inputStream.getChannel().size();      return new OpenForReadResult(uri,inputStream,mimeType,length,null);    }case URI_TYPE_ASSET:{    String assetPath=uri.getPath().substring(15);    AssetFileDescriptor assetFd=null;    InputStream inputStream;    long length=-1;    try {      assetFd=assetManager.openFd(assetPath);      inputStream=assetFd.createInputStream();      length=assetFd.getLength();    } catch (    FileNotFoundException e) {      inputStream=assetManager.open(assetPath);    }    String mimeType=getMimeTypeFromPath(assetPath);    return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);  }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{  String mimeType=contentResolver.getType(uri);  AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,"r");  InputStream inputStream=assetFd.createInputStream();  long length=assetFd.getLength();  return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);}case URI_TYPE_DATA:{OpenForReadResult ret=readDataUri(uri);if (ret == null) {  break;}return ret;}case URI_TYPE_HTTP:case URI_TYPE_HTTPS:{HttpURLConnection conn=(HttpURLConnection)new URL(uri.toString()).openConnection();conn.setDoInput(true);String mimeType=conn.getHeaderField("Content-Type");int length=conn.getContentLength();InputStream inputStream=conn.getInputStream();return new OpenForReadResult(uri,inputStream,mimeType,length,null);}case URI_TYPE_PLUGIN:{String pluginId=uri.getHost();CordovaPlugin plugin=pluginManager.getPlugin(pluginId);if (plugin == null) {throw new FileNotFoundException("Invalid plugin ID in URI: " + uri);}return plugin.handleOpenForRead(uri);}}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  @Override public void onPressLocation(LatLong latLong){  if (onStartPoint) {    Destination.getDestination().setStartPoint(latLong);    addFromMarker(latLong);    fromLocalET.setText(Destination.getDestination().getStartPointToString());  } else {    Destination.getDestination().setEndPoint(latLong);    addToMarker(latLong);    toLocalET.setText(Destination.getDestination().getEndPointToString());  }  navSettingsVP.setVisibility(View.VISIBLE);  activeNavigator();}  }
class C{  private void shapeNonContextually(char[] text,int start,int count){  int base;  char minDigit='0';  if (shapingRange != null) {    base=shapingRange.getDigitBase();    minDigit+=shapingRange.getNumericBase();  } else {    base=bases[key];    if (key == ETHIOPIC_KEY) {      minDigit++;    }  }  for (int i=start, e=start + count; i < e; ++i) {    char c=text[i];    if (c >= minDigit && c <= '\u0039') {      text[i]=(char)(c + base);    }  }}  }
class C{  public String normalizeSystemName(String systemName){  return (SerialAddress.normalizeSystemName(systemName));}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  @SuppressWarnings("serial") private void createDataRegions(){  Host host=Host.getHost(0);  int numberOfVms=host.getVMCount();  for (int i=0; i < numberOfVms; ++i) {    openCache(host.getVM(i));  }}  }
class C{  private void sendBroadcastNewDownload(DownloadFileOperation download,String linkedToRemotePath){  Intent added=new Intent(getDownloadAddedMessage());  added.putExtra(ACCOUNT_NAME,download.getAccount().name);  added.putExtra(EXTRA_REMOTE_PATH,download.getRemotePath());  added.putExtra(EXTRA_FILE_PATH,download.getSavePath());  added.putExtra(EXTRA_LINKED_TO_PATH,linkedToRemotePath);  sendStickyBroadcast(added);}  }
class C{  public void doScheduledMeetingReminder() throws Exception {  Integer minutesReminderSend=cfgManagement.getConfValue("number.minutes.reminder.send",Integer.class,"" + DEFAULT_MINUTES_REMINDER_SEND);  if (minutesReminderSend == null) {    throw new Exception("minutesReminderSend is null!");  }  if (minutesReminderSend == 0) {    log.warn("minutesReminderSend is 0, disabling reminder scheduler");    return;  }  long millisecondsToCheck=(minutesReminderSend * 60 * 1000);  List<Appointment> points=appointmentDao.getAppointmentsForAllUsersByTimeRangeStartingNow(millisecondsToCheck,false);  if (points == null || points.size() < 1) {    log.debug("doScheduledMeetingReminder : no Appointments in range");    return;  }  Long language_id=Long.valueOf(cfgManagement.getConfKey(3,"default_lang_id").getConf_value()).longValue();  String labelid1158=fieldmanagment.getString(1158L,language_id);  Fieldlanguagesvalues labelid1153=fieldmanagment.getFieldByIdAndLanguage(new Long(1153),language_id);  Fieldlanguagesvalues labelid1154=fieldmanagment.getFieldByIdAndLanguage(new Long(1154),language_id);  for (int i=0; i < points.size(); i++) {    Appointment ment=points.get(i);    if (ment.getIsReminderEmailSend() != null && ment.getIsReminderEmailSend()) {      continue;    }    if (ment.getRemind().getTypId() == 2 || ment.getRemind().getTypId() == 3) {      ment.setIsReminderEmailSend(true);      appointmentDao.updateAppointment(ment);      List<MeetingMember> members=meetingMemberDao.getMeetingMemberByAppointmentId(ment.getAppointmentId());      if (members == null) {        log.debug("doScheduledMeetingReminder : no members in meeting!");        continue;      }      for (      MeetingMember mm : members) {        log.debug("doScheduledMeetingReminder : Member " + mm.getEmail());        Invitations inv=mm.getInvitation();        if (inv == null) {          log.error("Error retrieving Invitation for member " + mm.getEmail() + " in Appointment "+ ment.getAppointmentName());          continue;        }        if (inv.getBaseUrl() == null || inv.getBaseUrl().length() < 1) {          log.error("Error retrieving baseUrl from Invitation ID : " + inv.getInvitations_id());          continue;        }        TimeZone tZone=null;        if (mm.getOmTimeZone() != null) {          tZone=timezoneUtil.getTimezoneByOmTimeZoneId(mm.getOmTimeZone().getOmtimezoneId());        } else {          tZone=TimeZone.getDefault();        }        String subject=generateSubject(labelid1158,ment,tZone);        String message=generateMessage(labelid1158,ment,language_id,labelid1153,labelid1154,tZone);        invitationManagement.sendInvitationReminderLink(message,inv.getBaseUrl(),mm.getEmail(),subject,inv.getHash());        inv.setUpdatetime(new Date());        invitationManagement.updateInvitation(inv);      }    }  }}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public ScatterPlotEditorPanel(ScatterPlotOld scatterPlot,DataSet dataSet){  regressionBox=new JCheckBox();  this.setLayout(new BorderLayout());  this.scatterPlot=scatterPlot;  Node selected=scatterPlot.getYVariable();  this.dataSet=dataSet;  this.yVariableBox=new JComboBox();  this.xVariableBox=new JComboBox();  ListCellRenderer renderer=new VariableBoxRenderer();  this.yVariableBox.setRenderer(renderer);  for (  Node node : dataSet.getVariables()) {    if (node instanceof ContinuousVariable) {      this.yVariableBox.addItem(node);      if (node == selected) {        this.yVariableBox.setSelectedItem(node);      }    }  }  this.xVariableBox.setRenderer(renderer);  for (  Node node : dataSet.getVariables()) {    if (node instanceof ContinuousVariable) {      this.xVariableBox.addItem(node);      if (node == selected) {        this.xVariableBox.setSelectedItem(node);      }    }  }  this.newCondBox=new JComboBox();  this.newCondBox.setRenderer(renderer);  for (  Node node : dataSet.getVariables()) {    if (node instanceof ContinuousVariable) {      this.newCondBox.addItem(node);      if (node == selected) {        this.newCondBox.setSelectedItem(node);      }    }  }  this.add(buildEditArea(dataSet));}  }
class C{  protected ResultSet retrieveCallableResult() throws SQLException {  if (executionResult != null && executionResult.getResultSet() != null && executionResult.getResultSet().isCallableResult()) {    MariaSelectResultSet resultSet=executionResult.getResultSet();    getMoreResults();    return resultSet;  }  for (  ExecutionResult batchExecutionResult : executionResult.getCachedExecutionResults()) {    if (batchExecutionResult.getResultSet() != null && batchExecutionResult.getResultSet() != null && batchExecutionResult.getResultSet().isCallableResult()) {      MariaSelectResultSet resultSet=batchExecutionResult.getResultSet();      executionResult.getCachedExecutionResults().remove(batchExecutionResult);      return resultSet;    }  }  return null;}  }
class C{  public HadoopDaemon(ThreadGroup grp,Runnable runnable){  super(grp,runnable);  this.runnable=runnable;  this.setName(runnable.toString());  enqueueIfNeeded();}  }
class C{  public GF2Vector(int length,SecureRandom sr){  this.length=length;  int size=(length + 31) >> 5;  v=new int[size];  for (int i=size - 1; i >= 0; i--) {    v[i]=sr.nextInt();  }  int r=length & 0x1f;  if (r != 0) {    v[size - 1]&=(1 << r) - 1;  }}  }
class C{  public String databaseURLTipText(){  return "Set the URL to the database.";}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  public URL find(String classname){  ClassPathList list=pathList;  URL url=null;  while (list != null) {    url=list.path.find(classname);    if (url == null)     list=list.next; else     return url;  }  return null;}  }
class C{  private void initializeColors() throws IOException {  BACKGROUND=Color.black;  m_terrainColors[0]=new Color(218,215,170);  SINKHOLE=new Color(218,215,170);  m_terrainColors[Terrains.WOODS]=new Color(180,230,130);  HEAVY_WOODS=new Color(160,200,100);  ULTRA_HEAVY_WOODS=new Color(0,100,0);  m_terrainColors[Terrains.ROUGH]=new Color(215,181,0);  m_terrainColors[Terrains.RUBBLE]=new Color(200,200,200);  m_terrainColors[Terrains.WATER]=new Color(200,247,253);  m_terrainColors[Terrains.PAVEMENT]=new Color(204,204,204);  m_terrainColors[Terrains.ROAD]=new Color(71,79,107);  m_terrainColors[Terrains.FIRE]=Color.red;  m_terrainColors[Terrains.SMOKE]=new Color(204,204,204);  SMOKE_AND_FIRE=new Color(153,0,0);  m_terrainColors[Terrains.SWAMP]=new Color(49,136,74);  m_terrainColors[Terrains.BUILDING]=new Color(204,204,204);  m_terrainColors[Terrains.FUEL_TANK]=new Color(255,204,204);  m_terrainColors[Terrains.BRIDGE]=new Color(109,55,25);  m_terrainColors[Terrains.ICE]=new Color(204,204,255);  m_terrainColors[Terrains.MAGMA]=new Color(200,0,0);  m_terrainColors[Terrains.JUNGLE]=new Color(180,230,130);  m_terrainColors[Terrains.FIELDS]=new Color(250,255,205);  m_terrainColors[Terrains.INDUSTRIAL]=new Color(112,138,144);  m_terrainColors[Terrains.SPACE]=Color.gray;  int red;  int green;  int blue;  File coloursFile=new File(Configuration.hexesDir(),GUIPreferences.getInstance().getMinimapColours());  if (!coloursFile.exists()) {    return;  }  Reader cr=new FileReader(coloursFile);  StreamTokenizer st=new StreamTokenizer(cr);  st.lowerCaseMode(true);  st.quoteChar('"');  st.commentChar('#');  scan:   while (true) {    red=0;    green=0;    blue=0;switch (st.nextToken()) {case StreamTokenizer.TT_EOF:      break scan;case StreamTokenizer.TT_EOL:    break scan;case StreamTokenizer.TT_WORD:  String key=st.sval;if (key.equals("unitsize")) {  st.nextToken();  unitSize=(int)st.nval;} else if (key.equals("background")) {  st.nextToken();  red=(int)st.nval;  st.nextToken();  green=(int)st.nval;  st.nextToken();  blue=(int)st.nval;  BACKGROUND=new Color(red,green,blue);} else if (key.equals("heavywoods")) {  st.nextToken();  red=(int)st.nval;  st.nextToken();  green=(int)st.nval;  st.nextToken();  blue=(int)st.nval;  HEAVY_WOODS=new Color(red,green,blue);} else if (key.equals("ultraheavywoods")) {  st.nextToken();  red=(int)st.nval;  st.nextToken();  green=(int)st.nval;  st.nextToken();  blue=(int)st.nval;  ULTRA_HEAVY_WOODS=new Color(red,green,blue);} else if (key.equals("sinkhole")) {  st.nextToken();  red=(int)st.nval;  st.nextToken();  green=(int)st.nval;  st.nextToken();  blue=(int)st.nval;  SINKHOLE=new Color(red,green,blue);} else if (key.equals("smokeandfire")) {  st.nextToken();  red=(int)st.nval;  st.nextToken();  green=(int)st.nval;  st.nextToken();  blue=(int)st.nval;  SMOKE_AND_FIRE=new Color(red,green,blue);} else {  st.nextToken();  red=(int)st.nval;  st.nextToken();  green=(int)st.nval;  st.nextToken();  blue=(int)st.nval;  m_terrainColors[Terrains.getType(key)]=new Color(red,green,blue);}}}cr.close();}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final boolean value) throws XMLStreamException {  writer.writeStartElement(elementName);  writer.writeCharacters(XMLConvert.toString(value));  writer.writeEndElement();}  }
class C{  private String encodeTitleWikistyle(String pTitle){  String encodedTitle=pTitle.replace(' ','_');  return encodedTitle;}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  if (x > left && x < right && y > top && y < bottom) {    return true;  }  return false;}  }
class C{  public static Map<String,Set<String>> groupInitiatorsByProtocol(Set<String> iniStrList,DbClient dbClient){  Map<String,Set<String>> iniByProtocol=new HashMap<String,Set<String>>();  List<URI> iniList=new ArrayList<URI>(Collections2.transform(iniStrList,CommonTransformerFunctions.FCTN_STRING_TO_URI));  List<Initiator> initiators=dbClient.queryObject(Initiator.class,iniList);  for (  Initiator ini : initiators) {    if (null == ini.getProtocol()) {      _logger.warn("Initiator {} with protocol set to Null",ini.getId());      continue;    }    if (!iniByProtocol.containsKey(ini.getProtocol())) {      iniByProtocol.put(ini.getProtocol(),new HashSet<String>());    }    iniByProtocol.get(ini.getProtocol()).add(ini.getId().toString());  }  return iniByProtocol;}  }
class C{  public Remote exportObject(Remote impl,Object data,boolean permanent) throws RemoteException {  Class<?> implClass=impl.getClass();  Remote stub;  try {    stub=Util.createProxy(implClass,getClientRef(),forceStubUse);  } catch (  IllegalArgumentException e) {    throw new ExportException("remote object implements illegal remote interface",e);  }  if (stub instanceof RemoteStub) {    setSkeleton(impl);  }  Target target=new Target(impl,this,stub,ref.getObjID(),permanent);  ref.exportObject(target);  hashToMethod_Map=hashToMethod_Maps.get(implClass);  return stub;}  }
class C{  public void testLoadWithMultipleSubtitutions() throws Exception {  Properties props=new Properties();  props.setProperty("a","${b}");  props.setProperty("b","${c}");  props.setProperty("c","x12");  props.setProperty("d","x");  int count=TungstenProperties.substituteSystemValues(props,3);  Assert.assertEquals("substitution count",3,count);  Assert.assertEquals("x12",props.getProperty("a"));  Assert.assertEquals("x12",props.getProperty("b"));  Assert.assertEquals("x12",props.getProperty("c"));  Assert.assertEquals("x",props.getProperty("d"));}  }
class C{  public static int max(final int... array){  validateArray(array);  int max=array[0];  for (int j=1; j < array.length; j++) {    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  public IncompatibleClassChangeError(String s){  super(s);}  }
class C{  public synchronized void map(L leftValue,R rightValue){  R oldRight=tableLeft.remove(leftValue);  if (oldRight != null) {    tableRight.remove(oldRight);  } else {    L oldLeft=tableRight.remove(rightValue);    if (oldLeft != null) {      tableLeft.remove(oldLeft);    }  }  tableLeft.put(leftValue,rightValue);  tableRight.put(rightValue,leftValue);}  }
class C{  public byte[] toWireCanonical(){  int labels=labels();  if (labels == 0)   return (new byte[0]);  byte[] b=new byte[name.length - offset(0)];  for (int i=0, spos=offset(0), dpos=0; i < labels; i++) {    int len=name[spos];    if (len > MAXLABEL)     throw new IllegalStateException("invalid label");    b[dpos++]=name[spos++];    for (int j=0; j < len; j++)     b[dpos++]=lowercase[(name[spos++] & 0xFF)];  }  return b;}  }
class C{  @Override public void execute(String taskId,Map<String,Object> parameter){  if (parameter != null) {    String justification=(String)parameter.get(IIndividualProcess.VAR_EXTENSION_JUSTIFICATION);    if (justification != null) {      getTaskParameter().put(IIndividualProcess.VAR_EXTENSION_JUSTIFICATION,justification);    }  }}  }
class C{  public static final void writeListXml(List val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"list");  if (name != null) {    out.attribute(null,"name",name);  }  int N=val.size();  int i=0;  while (i < N) {    writeValueXml(val.get(i),null,out);    i++;  }  out.endTag(null,"list");}  }
class C{  public boolean executeDistribution() throws Exception {  int M_DocType_ID=0;  MDocType[] doc=MDocType.getOfDocBaseType(getCtx(),MDocType.DOCBASETYPE_DistributionOrder);  if (doc == null || doc.length == 0) {    log.severe("Not found default document type for docbasetype " + MDocType.DOCBASETYPE_DistributionOrder);    throw new Exception(Msg.getMsg(getCtx(),"SequenceDocNotFound"),CLogger.retrieveException());  } else   M_DocType_ID=doc[0].getC_DocType_ID();  String trxName=Trx.createTrxName("Run Distribution to DRP");  Trx trx=Trx.get(trxName,true);  int AD_Process_ID=271;  AD_Process_ID=MProcess.getProcess_ID("M_DistributionRun Create",get_TrxName());  MPInstance instance=new MPInstance(Env.getCtx(),AD_Process_ID,0);  if (!instance.save()) {    throw new Exception(Msg.getMsg(getCtx(),"ProcessNoInstance"),CLogger.retrieveException());  }  ProcessInfo pi=new ProcessInfo("M_DistributionRun Orders",AD_Process_ID);  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  pi.setRecord_ID(m_run.getM_DistributionRun_ID());  MPInstancePara ip=new MPInstancePara(instance,10);  ip.setParameter("C_DocType_ID",M_DocType_ID);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  ip=new MPInstancePara(instance,20);  ip.setParameter("DatePromised","");  ip.setP_Date(p_DatePromised);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  ip=new MPInstancePara(instance,30);  ip.setParameter("M_Warehouse_ID",p_M_Warehouse_ID);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  ip=new MPInstancePara(instance,40);  ip.setParameter("ConsolidateDocument",p_ConsolidateDocument);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  ip=new MPInstancePara(instance,50);  ip.setParameter("IsTest",p_IsTest);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  ip=new MPInstancePara(instance,60);  ip.setParameter("M_DistributionList_ID",p_M_DistributionList_ID);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  ip=new MPInstancePara(instance,70);  ip.setParameter("IsRequiredDRP",p_BasedInDamnd);  if (!ip.save()) {    String msg="No Parameter added";    throw new Exception(msg,CLogger.retrieveException());  }  MProcess worker=new MProcess(getCtx(),AD_Process_ID,get_TrxName());  worker.processIt(pi,Trx.get(get_TrxName(),true));  m_run.delete(true);  return true;}  }
class C{  private void updateHorizontalLayoutState(int fixedCellWidth,int fixedCellHeight){  int visRows=list.getVisibleRowCount();  int dataModelSize=list.getModel().getSize();  Insets insets=list.getInsets();  listHeight=list.getHeight();  listWidth=list.getWidth();  if (dataModelSize == 0) {    rowsPerColumn=columnCount=0;    preferredHeight=insets.top + insets.bottom;    return;  }  int height;  if (fixedCellHeight != -1) {    height=fixedCellHeight;  } else {    int maxHeight=0;    if (cellHeights.length > 0) {      maxHeight=cellHeights[cellHeights.length - 1];      for (int counter=cellHeights.length - 2; counter >= 0; counter--) {        maxHeight=Math.max(maxHeight,cellHeights[counter]);      }    }    height=cellHeight=maxHeight;    cellHeights=null;  }  rowsPerColumn=dataModelSize;  if (visRows > 0) {    rowsPerColumn=visRows;    columnCount=Math.max(1,dataModelSize / rowsPerColumn);    if (dataModelSize > 0 && dataModelSize > rowsPerColumn && dataModelSize % rowsPerColumn != 0) {      columnCount++;    }    if (layoutOrientation == JList.HORIZONTAL_WRAP) {      rowsPerColumn=(dataModelSize / columnCount);      if (dataModelSize % columnCount > 0) {        rowsPerColumn++;      }    }  } else   if (layoutOrientation == JList.VERTICAL_WRAP && height != 0) {    rowsPerColumn=Math.max(1,(listHeight - insets.top - insets.bottom) / height);    columnCount=Math.max(1,dataModelSize / rowsPerColumn);    if (dataModelSize > 0 && dataModelSize > rowsPerColumn && dataModelSize % rowsPerColumn != 0) {      columnCount++;    }  } else   if (layoutOrientation == JList.HORIZONTAL_WRAP && cellWidth > 0 && listWidth > 0) {    columnCount=Math.max(1,(listWidth - insets.left - insets.right) / cellWidth);    rowsPerColumn=dataModelSize / columnCount;    if (dataModelSize % columnCount > 0) {      rowsPerColumn++;    }  }  preferredHeight=rowsPerColumn * cellHeight + insets.top + insets.bottom;}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  public TextMeshData loadText(GUIText text){  return loader.createTextMesh(text);}  }
class C{  Node(){  this.name=null;  this.parent=null;  this.kind=null;}  }
class C{  static boolean shouldTranslateViaDiff(@NotNull DocumentEventImpl e,@NotNull RangeMarker rangeMarker){  if (e.isWholeTextReplaced()) {    return true;  }  if (!rangeMarker.isValid()) {    return false;  }  if (e.getOffset() >= rangeMarker.getEndOffset() || e.getOffset() + e.getOldLength() <= rangeMarker.getStartOffset()) {    return false;  }  return (Math.max(e.getNewLength(),e.getOldLength()) * 1.0) / e.getDocument().getTextLength() >= 0.8;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.191 -0500",hash_original_method="582360498D222FA3AC7FD1DD315CF583",hash_generated_method="4075642C1E9904B5D7C576D7607FAE56") public void append(int key,int value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    int[] nvalues=new int[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public static ModbusUDPListener createUDPSlave() throws Exception {  ModbusUDPListener listener=null;  try {    getSimpleProcessImage();    listener=new ModbusUDPListener();    listener.setListening(true);    listener.setPort(PORT);    listener.setTimeout(5000);    new Thread(listener).start();    Thread.sleep(100);    if (!listener.isListening()) {      throw new Exception(listener.getError());    }  } catch (  Exception x) {    if (listener != null) {      listener.stop();    }    throw new Exception(x.getMessage());  }  return listener;}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  protected int sp2px(int spVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,spVal,getResources().getDisplayMetrics());}  }
class C{  @Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  if (mRequiresTranslationBoundsCheck) {    mRequiresTranslationBoundsCheck=false;    mMatrixHelper.checkTranslationBounds(getMeasuredWidth(),getMeasuredHeight());  }  if (mMatrixHelper.isActualSizeZoomLevel()) {    captureDrawableState();    mMatrixHelper.performInitialScaleAndTranslate(getMeasuredWidth(),getMeasuredHeight());  }}  }
class C{  protected TaggedTemplateStringImpl(){  super();}  }
class C{  @Override public String toJSONString(){  return toJSONString(this);}  }
class C{  public static String readURL(String url){  try {    String text="";    BufferedReader reader=new BufferedReader(new InputStreamReader(new URL(url).openStream()));    String currentLine;    while ((currentLine=reader.readLine()) != null) {      text+=currentLine + "\r\n";    }    reader.close();    return text;  } catch (  IOException e) {    LLibrary.LOGGER.error(CrashReport.makeCrashReport(e,"Failed to receive data from URL: " + url).getCompleteReport());    return null;  }}  }
class C{  private int findSuffixIndex(StringBuilder buf,int index){  int inNestedProperty=0;  while (index < buf.length()) {    if (buf.substring(index,index + this.propertySuffix.length()).equalsIgnoreCase(this.propertySuffix)) {      if (inNestedProperty > 0) {        inNestedProperty--;        index=index + this.propertySuffix.length();      } else {        return index;      }    } else     if (buf.substring(index,index + this.prefixForSuffix.length()).equalsIgnoreCase(this.prefixForSuffix)) {      inNestedProperty++;      index=index + this.prefixForSuffix.length();    } else {      index++;    }  }  return -1;}  }
class C{  public <T>PushableFlux<T> flux(){  Queue<T> q=createQueue();  return new PushableFlux<T>(q,Flux.from(q.stream()));}  }
class C{  public ChessSquare(Composite parent,ChessBoard chessBoard,int id,boolean isLight){  super(parent,SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND);  board=chessBoard;  this.id=id;  this.isLight=isLight;  addPaintListener(paintListener);  addControlListener(controlListener);  addMouseListener(mouseListener);  addListener(SWT.MouseWheel,mouseWheelListener);  addListener(SWT.MouseDown,dndListener);  addListener(SWT.MouseUp,dndListener);}  }
class C{  static DirectCompactOrderedSketch wrapInstance(Memory srcMem,long pre0,long seed){  int preLongs=extractPreLongs(pre0);  int flags=extractFlags(pre0);  boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  short memSeedHash=(short)extractSeedHash(pre0);  short computedSeedHash=computeSeedHash(seed);  checkSeedHashes(memSeedHash,computedSeedHash);  int curCount=(preLongs > 1) ? srcMem.getInt(RETAINED_ENTRIES_INT) : 0;  long thetaLong=(preLongs > 2) ? srcMem.getLong(THETA_LONG) : Long.MAX_VALUE;  DirectCompactOrderedSketch dcos=new DirectCompactOrderedSketch(empty,memSeedHash,curCount,thetaLong);  dcos.preLongs_=preLongs;  dcos.mem_=srcMem;  return dcos;}  }
class C{  @Override protected void destroy(){  super.destroy();  clearJars();}  }
class C{  public void destroy(String reason,String alternateJID) throws XMPPException {  MUCOwner iq=new MUCOwner();  iq.setTo(room);  iq.setType(IQ.Type.SET);  MUCOwner.Destroy destroy=new MUCOwner.Destroy();  destroy.setReason(reason);  destroy.setJid(alternateJID);  iq.setDestroy(destroy);  PacketFilter responseFilter=new PacketIDFilter(iq.getPacketID());  PacketCollector response=connection.createPacketCollector(responseFilter);  connection.sendPacket(iq);  IQ answer=(IQ)response.nextResult(SmackConfiguration.getPacketReplyTimeout());  response.cancel();  if (answer == null) {    throw new XMPPException("No response from server.");  } else   if (answer.getError() != null) {    throw new XMPPException(answer.getError());  }  occupantsMap.clear();  nickname=null;  joined=false;  userHasLeft();}  }
class C{  public SVGPolylineElementBridge(){}  }
class C{  @Autowired public BatchApiResource(final PlatformSecurityContext context,final ToApiJsonSerializer<BatchResponse> toApiJsonSerializer,final BatchApiService service,final BatchRequestJsonHelper batchRequestJsonHelper){  this.context=context;  this.toApiJsonSerializer=toApiJsonSerializer;  this.service=service;  this.batchRequestJsonHelper=batchRequestJsonHelper;}  }
class C{  protected void createInfoLabel(Composite parent,String text){  Label label=new Label(parent,SWT.NONE);  label.setToolTipText(text);  label.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));}  }
class C{  public static EllipseLocationResult locateEllipses(Mat grayImage){  Mat gray=grayImage.clone();  Filter.downsample(gray,2);  Filter.upsample(gray,2);  Imgproc.Canny(gray,gray,5,75,3,true);  Filter.dilate(gray,2);  Mat cacheHierarchy=new Mat();  List<MatOfPoint> contoursTemp=new ArrayList<>();  Imgproc.findContours(gray,contoursTemp,cacheHierarchy,Imgproc.CV_RETR_TREE,Imgproc.CHAIN_APPROX_TC89_KCOS);  List<Contour> contours=new ArrayList<>();  for (  MatOfPoint co : contoursTemp) {    contours.add(new Contour(co));  }  List<Ellipse> ellipses=new ArrayList<>();  for (  MatOfPoint co : contoursTemp) {    contours.add(new Contour(co));    if (co.toArray().length < 6)     continue;    MatOfPoint2f matOfPoint2f=new MatOfPoint2f(co.toArray());    Ellipse ellipse=new Ellipse(Imgproc.fitEllipse(matOfPoint2f));    ellipses.add(ellipse);  }  return new EllipseLocationResult(contours,ellipses);}  }
class C{  private void parseAttributes(TypedArray a){  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwBarWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwRimWidth,rimWidth);  spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_pwSpinSpeed,spinSpeed);  barLength=(int)a.getDimension(R.styleable.ProgressWheel_pwBarLength,barLength);  delayMillis=a.getInteger(R.styleable.ProgressWheel_pwDelayMillis,delayMillis);  if (delayMillis < 0) {    delayMillis=10;  }  if (a.hasValue(R.styleable.ProgressWheel_pwText)) {    setText(a.getString(R.styleable.ProgressWheel_pwText));  }  barColor=a.getColor(R.styleable.ProgressWheel_pwBarColor,barColor);  textColor=a.getColor(R.styleable.ProgressWheel_pwTextColor,textColor);  rimColor=a.getColor(R.styleable.ProgressWheel_pwRimColor,rimColor);  circleColor=a.getColor(R.styleable.ProgressWheel_pwCircleColor,circleColor);  contourColor=a.getColor(R.styleable.ProgressWheel_pwContourColor,contourColor);  textSize=(int)a.getDimension(R.styleable.ProgressWheel_pwTextSize,textSize);  contourSize=a.getDimension(R.styleable.ProgressWheel_pwContourSize,contourSize);  a.recycle();}  }
class C{  public static long intArrayToLong(int[] buffer,int nStartIndex){  return (((long)buffer[nStartIndex]) << 32) | ((buffer[nStartIndex + 1]) & 0x0ffffffffL);}  }
class C{  public QName(String namespaceURI,String localName){  this(namespaceURI,localName,false);}  }
class C{  public static void sample(long n,long N,int count,long low,long[] values,int fromIndex,RandomEngine randomGenerator){  if (n <= 0 || count <= 0)   return;  if (count > n)   throw new IllegalArgumentException("count must not be greater than n");  if (randomGenerator == null)   randomGenerator=cern.jet.random.AbstractDistribution.makeDefaultGenerator();  if (count == N) {    long val=low;    int limit=fromIndex + count;    for (int i=fromIndex; i < limit; )     values[i++]=val++;    return;  }  if (n < N * 0.95) {    sampleMethodD(n,N,count,low,values,fromIndex,randomGenerator);  } else {    rejectMethodD(n,N,count,low,values,fromIndex,randomGenerator);  }}  }
class C{  private void generateCode(VelocityEngine ve,String templateDir,File file,VelocityContext context){  Template tm=ve.getTemplate(templateDir + File.separator + PIPELINE_TEMPLATE);  StringWriter sw=new StringWriter();  tm.merge(context,sw);  try (PrintWriter writer=new PrintWriter(file.getAbsolutePath(),"UTF-8")){    writer.println(sw);  } catch (  UnsupportedEncodingException|FileNotFoundException e) {    logger.log(Level.SEVERE,"Unable to write to file",e);  }}  }
class C{  public IntervalMarker(double start,double end){  this(start,end,Color.gray,new BasicStroke(0.5f),Color.gray,new BasicStroke(0.5f),0.8f);}  }
class C{  public Set<EventBean> lookup(Object[] keys){  MultiKeyUntyped key=new MultiKeyUntyped(keys);  return propertyIndex.get(key);}  }
class C{  public boolean isSetI64_thing(){  return EncodingUtils.testBit(__isset_bitfield,__I64_THING_ISSET_ID);}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  RecommendEntityDao.dropTable(db,ifExists);}  }
class C{  protected Collection<ScoreTerm> suggestSimilar(Term term,int numSug,IndexReader ir,int docfreq,int editDistance,float accuracy,final CharsRefBuilder spare) throws IOException {  AttributeSource atts=new AttributeSource();  MaxNonCompetitiveBoostAttribute maxBoostAtt=atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);  Terms terms=MultiFields.getTerms(ir,term.field());  if (terms == null) {    return Collections.emptyList();  }  FuzzyTermsEnum e=new FuzzyTermsEnum(terms,atts,term,editDistance,Math.max(minPrefix,editDistance - 1),true);  final PriorityQueue<ScoreTerm> stQueue=new PriorityQueue<>();  BytesRef queryTerm=new BytesRef(term.text());  BytesRef candidateTerm;  ScoreTerm st=new ScoreTerm();  BoostAttribute boostAtt=e.attributes().addAttribute(BoostAttribute.class);  while ((candidateTerm=e.next()) != null) {    float score=boostAtt.getBoost();    if (stQueue.size() >= numSug && score <= stQueue.peek().boost) {      continue;    }    if (queryTerm.bytesEquals(candidateTerm)) {      continue;    }    int df=e.docFreq();    if (df <= docfreq) {      continue;    }    final String termAsString;    if (distance == INTERNAL_LEVENSHTEIN) {      termAsString=null;    } else {      spare.copyUTF8Bytes(candidateTerm);      termAsString=spare.toString();      score=distance.getDistance(term.text(),termAsString);    }    if (score < accuracy) {      continue;    }    st.term=BytesRef.deepCopyOf(candidateTerm);    st.boost=score;    st.docfreq=df;    st.termAsString=termAsString;    st.score=score;    stQueue.offer(st);    st=(stQueue.size() > numSug) ? stQueue.poll() : new ScoreTerm();    maxBoostAtt.setMaxNonCompetitiveBoost((stQueue.size() >= numSug) ? stQueue.peek().boost : Float.NEGATIVE_INFINITY);  }  return stQueue;}  }
class C{  public Object withBuilder(FactoryBuilderSupport builder,String name,Closure closure){  if (name == null) {    return null;  }  Object result=getProxyBuilder().withBuilder(builder,closure);  return getProxyBuilder().invokeMethod(name,new Object[]{result});}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public String toString(){  return label.toString();}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public boolean isInDispute(){  Object oo=get_Value(COLUMNNAME_IsInDispute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean canExtractItem(int slot,ItemStack stack,int side){  return slot > 2;}  }
class C{  public final double SFMeanEntropyGain(){  if (m_NoPriors || !m_ComplexityStatisticsAvailable) {    return Double.NaN;  }  return (m_SumPriorEntropy - m_SumSchemeEntropy) / (m_WithClass - m_Unclassified);}  }
class C{  public final int currVariation(){  if (tree.currentNode == tree.rootNode)   return 0;  tree.goBack();  int defChild=tree.currentNode.defaultChild;  tree.goForward(-1);  return defChild;}  }
class C{  public TextDrawable(TextView tv){  this(tv,false,false);}  }
class C{  public Job createJobForCreateClusterForActivitiXml(String activitiXml,List<Parameter> parameters) throws Exception {  jobDefinitionServiceTestHelper.createJobDefinitionForActivitiXml(activitiXml);  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD);  EmrClusterDefinitionEntity emrClusterDefinitionEntity=emrClusterDefinitionDaoTestHelper.createEmrClusterDefinitionEntity(namespaceEntity,AbstractServiceTest.EMR_CLUSTER_DEFINITION_NAME,IOUtils.toString(resourceLoader.getResource(AbstractServiceTest.EMR_CLUSTER_DEFINITION_XML_FILE_WITH_CLASSPATH).getInputStream()));  Parameter parameter=new Parameter("namespace",namespaceEntity.getCode());  parameters.add(parameter);  parameter=new Parameter("emrClusterDefinitionName",emrClusterDefinitionEntity.getName());  parameters.add(parameter);  parameter=new Parameter("dryRun",null);  parameters.add(parameter);  parameter=new Parameter("contentType",null);  parameters.add(parameter);  parameter=new Parameter("emrClusterDefinitionOverride",null);  parameters.add(parameter);  return jobService.createAndStartJob(createJobCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME,parameters));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public Vector leftMultiply(Vector vec){  if (!(vec instanceof GF2Vector)) {    throw new ArithmeticException("vector is not defined over GF(2)");  }  if (vec.length != numRows) {    throw new ArithmeticException("length mismatch");  }  int[] v=((GF2Vector)vec).getVecArray();  int[] res=new int[length];  int q=numRows >> 5;  int r=1 << (numRows & 0x1f);  int row=0;  for (int i=0; i < q; i++) {    int bitMask=1;    do {      int b=v[i] & bitMask;      if (b != 0) {        for (int j=0; j < length; j++) {          res[j]^=matrix[row][j];        }      }      row++;      bitMask<<=1;    } while (bitMask != 0);  }  int bitMask=1;  while (bitMask != r) {    int b=v[q] & bitMask;    if (b != 0) {      for (int j=0; j < length; j++) {        res[j]^=matrix[row][j];      }    }    row++;    bitMask<<=1;  }  return new GF2Vector(res,numColumns);}  }
class C{  private static void checkGraph(HighTierContext context,StructuredGraph graph){  if (shouldVerifyEquals(graph.method())) {    new VerifyUsageWithEquals(Value.class).apply(graph,context);    new VerifyUsageWithEquals(Register.class).apply(graph,context);    new VerifyUsageWithEquals(RegisterCategory.class).apply(graph,context);    new VerifyUsageWithEquals(JavaType.class).apply(graph,context);    new VerifyUsageWithEquals(JavaMethod.class).apply(graph,context);    new VerifyUsageWithEquals(JavaField.class).apply(graph,context);    new VerifyUsageWithEquals(LocationIdentity.class).apply(graph,context);    new VerifyUsageWithEquals(LIRKind.class).apply(graph,context);    new VerifyUsageWithEquals(ArithmeticOpTable.class).apply(graph,context);    new VerifyUsageWithEquals(ArithmeticOpTable.Op.class).apply(graph,context);  }  new VerifyDebugUsage().apply(graph,context);  new VerifyCallerSensitiveMethods().apply(graph,context);  new VerifyVirtualizableUsage().apply(graph,context);}  }
class C{  private void padKey(byte[] keyMaster,int keyOff,byte[] tmp,int tmpOff){  tmp[tmpOff + 0]=(byte)(keyMaster[keyOff + 0] & 0xfe);  tmp[tmpOff + 1]=(byte)((keyMaster[keyOff + 0] << 7) | ((keyMaster[keyOff + 1] & 0xfc) >>> 1));  tmp[tmpOff + 2]=(byte)((keyMaster[keyOff + 1] << 6) | ((keyMaster[keyOff + 2] & 0xf8) >>> 2));  tmp[tmpOff + 3]=(byte)((keyMaster[keyOff + 2] << 5) | ((keyMaster[keyOff + 3] & 0xf0) >>> 3));  tmp[tmpOff + 4]=(byte)((keyMaster[keyOff + 3] << 4) | ((keyMaster[keyOff + 4] & 0xe0) >>> 4));  tmp[tmpOff + 5]=(byte)((keyMaster[keyOff + 4] << 3) | ((keyMaster[keyOff + 5] & 0xc0) >>> 5));  tmp[tmpOff + 6]=(byte)((keyMaster[keyOff + 5] << 2) | ((keyMaster[keyOff + 6] & 0x80) >>> 6));  tmp[tmpOff + 7]=(byte)(keyMaster[keyOff + 6] << 1);  for (int i=tmpOff; i <= tmpOff + 7; i++) {    int b=tmp[i];    tmp[i]=(byte)((b & 0xfe) | ((((b >> 1) ^ (b >> 2) ^ (b >> 3)^ (b >> 4)^ (b >> 5)^ (b >> 6)^ (b >> 7)) ^ 0x01) & 0x01));  }}  }
class C{  public ImmutableStack(){  this(null,null);}  }
class C{  public Logger logger(){  return logger;}  }
class C{  static DateValue nextWeekStart(DateValue date,DayOfWeek weekday){  DTBuilder builder=new DTBuilder(date);  builder.day+=(7 - ((7 + (TimeUtils.dayOfWeek(date).getCalendarConstant() - weekday.getCalendarConstant())) % 7)) % 7;  return builder.toDate();}  }
class C{  private void buildTree(int left,int right,int axis,DoubleDBIDListMIter iter){  assert (left < right);  for (iter.seek(left); iter.getOffset() < right; iter.advance()) {    iter.setDouble(relation.get(iter).doubleValue(axis));    countObjectAccess();  }  if (right - left <= leafsize) {    return;  }  int middle=(left + right) >>> 1;  QuickSelectDBIDs.quickSelect(sorted,left,right,middle);  final int next=(axis + 1) % dims;  if (left < middle) {    buildTree(left,middle,next,iter);  }  ++middle;  if (middle < right) {    buildTree(middle,right,next,iter);  }}  }
class C{  public final boolean skip(char c,CharSequence csq){  if (this.at(c,csq)) {    index++;    return true;  } else {    return false;  }}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public int compareTo(UUID uuid){  if (uuid == this) {    return 0;  }  if (this.mostSigBits != uuid.mostSigBits) {    return this.mostSigBits < uuid.mostSigBits ? -1 : 1;  }  if (this.leastSigBits != uuid.leastSigBits) {    return this.leastSigBits < uuid.leastSigBits ? -1 : 1;  }  return 0;}  }
class C{  @Catch({UnexpectedException.class,ViPRException.class}) public static void handleJsonError(Exception e){  if (request.isAjax() || StringUtils.endsWithIgnoreCase(request.action,"json")) {    Throwable cause=Common.unwrap(e);    String message=Common.getUserMessage(cause);    Logger.error(e,"AJAX request failed: %s.%s [%s]",request.controller,request.action,message);    error(message);  }}  }
class C{  public static MockClock clock(){  return new MockClock();}  }
class C{  void markBackup(){  flags|=BACKUP_ENTRY;}  }
class C{  public void next(){  setBCI(nextBCI);}  }
class C{  private boolean isSpecial(char ch){switch (ch) {case '!':case '%':case '&':case '*':case '?':case '+':case '-':case ':':case '<':case '=':case '>':case '^':case '|':case '~':case '@':    return true;default :  return false;}}  }
class C{  private StemmerUtil(){}  }
class C{  public boolean isAllowedToUpdateOwnReview(PlatformUser user){  if (getProductFeedback() == null) {    return false;  }  return getProductFeedback().hasReview(user);}  }
class C{  @SuppressWarnings("serial") @Test public final void testEqualsObject(){  final Area ar=new Area(new StendhalRPZone("test"),new Rectangle(){  });  final Area ar2=new Area(new StendhalRPZone("test2"),new Rectangle(){  });  assertTrue((new PlayerInAreaCondition(ar)).equals(new PlayerInAreaCondition(ar)));  assertFalse((new PlayerInAreaCondition(ar)).equals(new PlayerInAreaCondition(ar2)));  assertTrue(new PlayerInAreaCondition(ar).equals(new PlayerInAreaCondition(ar){  }));}  }
class C{  public void shutdown(){  WorldWind.getDataFileStore().removePropertyChangeListener(this);  if (this.inputHandler != null) {    this.inputHandler.dispose();    this.inputHandler=new NoOpInputHandler();  }  if (this.getGpuResourceCache() != null)   this.getGpuResourceCache().clear();  if (this.getModel() != null && this.getModel().getLayers() != null) {    for (    Layer layer : this.getModel().getLayers()) {      try {        layer.dispose();      } catch (      Exception e) {        Logging.logger().log(java.util.logging.Level.SEVERE,Logging.getMessage("WorldWindowGLCanvas.ExceptionWhileShuttingDownWorldWindow"),e);      }    }  }  SceneController sc=this.getSceneController();  if (sc != null)   sc.dispose();}  }
class C{  @Override public synchronized boolean isClosed(){  return mBitmapReference == null;}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Group createGroup(@Auth AutomationClient automationClient,@Valid CreateGroupRequest groupRequest){  Optional<Group> group=groupDAO.getGroup(groupRequest.name);  if (group.isPresent()) {    logger.info("Automation ({}) - Group {} already exists",automationClient.getName(),groupRequest.name);    throw new ConflictException("Group name already exists.");  }  long id=groupDAO.createGroup(groupRequest.name,automationClient.getName(),nullToEmpty(groupRequest.description),groupRequest.metadata);  Map<String,String> extraInfo=new HashMap<>();  extraInfo.put("deprecated","true");  if (groupRequest.description != null) {    extraInfo.put("description",groupRequest.description);  }  if (groupRequest.metadata != null) {    extraInfo.put("metadata",groupRequest.metadata.toString());  }  auditLog.recordEvent(new Event(Instant.now(),EventTag.GROUP_CREATE,automationClient.getName(),groupRequest.name,extraInfo));  return groupDAO.getGroupById(id).get();}  }
class C{  public CertificateSubjectName(InputStream in) throws IOException {  DerValue derVal=new DerValue(in);  dnName=new X500Name(derVal);}  }
class C{  public static double[][] sortColumns(double[][] m){  double[][] s=new double[m.length][m[0].length];  copyMatrix(m,s);  for (int col=0; col < s.length; col++) {    for (int row=0; row < s.length - 1; row++) {      double min=s[row][col];      int index=row;      for (int j=row + 1; j < s.length; j++) {        if (min > s[j][col]) {          min=s[j][col];          index=j;        }      }      if (index != row) {        s[index][col]=s[row][col];        s[row][col]=min;      }    }  }  return s;}  }
class C{  public boolean isLong(){  return (val instanceof Long || val instanceof Integer);}  }
class C{  public static int[] findBitErrors(BitSet msg){  int[] retVal=null;  int checksum=getTransmittedChecksum(msg);  checksum^=1;  for (int i=msg.nextSetBit(0); i >= 0 && i < 47; i=msg.nextSetBit(i + 1)) {    checksum^=sCHECKSUMS[i];  }  if (checksum == 0) {    msg.flip(62);  } else {    for (int x=0; x < 47; x++) {      if (checksum == sCHECKSUMS[x]) {        retVal=new int[1];        retVal[0]=x;      }    }  }  return retVal;}  }
class C{  private static String[] copyStrings(final String[] src){  String[] dst=new String[src.length];  for (int i=0; i < src.length; ++i) {    dst[i]=src[i].toLowerCase();  }  return dst;}  }
class C{  private void initializeLiveAttributes(){  transform=createLiveAnimatedTransformList(null,SVG_TRANSFORM_ATTRIBUTE,"");}  }
class C{  @Override protected void doReadWrite(){}  }
class C{  public void queryAABB(ParticleQueryCallback particleCallback,AABB aabb){  m_particleSystem.queryAABB(particleCallback,aabb);}  }
class C{  public void actionPerformed(ActionEvent e){  CompiereColor cc=ColorEditor.showDialog((JFrame)Env.getParent(this),m_cc);  if (cc == null) {    log.info("VColor.actionPerformed - no color");    return;  }  setBackgroundColor(cc);  repaint();  m_mTab.setValue("ColorType",cc.getType());  if (cc.isFlat()) {    setColor(cc.getFlatColor(),true);  } else   if (cc.isGradient()) {    setColor(cc.getGradientUpperColor(),true);    setColor(cc.getGradientLowerColor(),false);    m_mTab.setValue("RepeatDistance",new BigDecimal(cc.getGradientRepeatDistance()));    m_mTab.setValue("StartPoint",String.valueOf(cc.getGradientStartPoint()));  } else   if (cc.isLine()) {    setColor(cc.getLineBackColor(),true);    setColor(cc.getLineColor(),false);    m_mTab.getValue("LineWidth");    m_mTab.getValue("LineDistance");  } else   if (cc.isTexture()) {    setColor(cc.getTextureTaintColor(),true);    m_mTab.setValue("ImageAlpha",new BigDecimal(cc.getTextureCompositeAlpha()));  }  m_cc=cc;}  }
class C{  public double computeAverageLocal(int states[][],int j){  initialise();  addObservations(states,j);  return computeAverageLocalOfObservations();}  }
class C{  private String toLocalNumber(double n){  return mDecimalFormat.format(n);}  }
class C{  public final int[] toArray(){  int[][][] field=this.field;  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  int[] vals=new int[width * height * length];  int i=0;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        vals[i++]=fieldxy[z];      }    }  }  return vals;}  }
class C{  ClassDoc[] remoteInterfaces(){  return remoteInterfaces.clone();}  }
class C{  public EOMGListenerSupport(){  this(null);}  }
class C{  public static void openInformation(String message,String title){  InformationDialog dialog=new InformationDialog(UIHelper.getShellProvider(),message);  dialog.setTitle(title);  dialog.setImage(UIHelper.getSWTImage(SWT.ICON_INFORMATION));  dialog.open();}  }
class C{  protected static InternalDistributedMember remoteGetJavaGroupsIdForVM(){  InternalDistributedSystem sys=InternalDistributedSystem.getAnyInstance();  return sys.getDistributionManager().getDistributionManagerId();}  }
class C{  public static boolean isDefaultJournalLogWriteRate(){  return DEFAULT_JOURNAL_LOG_WRITE_RATE;}  }
class C{  protected void showSnackbar(String msg,View view){  android.support.design.widget.Snackbar.make(view,msg,android.support.design.widget.Snackbar.LENGTH_SHORT).show();}  }
class C{  @Override protected void check(){  super.check();  if (m_Clusterer == null) {    throw new IllegalStateException("No clusterer set!");  }  if (m_Evaluation == null) {    throw new IllegalStateException("No cluster evaluation set!");  }}  }
class C{  public boolean isPolicyMappingInhibited(){  return policyMappingInhibited;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void add(Integer line,String propertyName,int code,Object... args){  Warning warning=Warning.parse(code,args);  add(line,propertyName,warning);}  }
class C{  public synchronized void reset() throws IOException {  if (in == null)   in=owner.readNotify();  in.reset();}  }
class C{  private void putParametersFromS3(String s3BucketName,String s3ObjectKey,Map<String,Object> parameters){  if (s3BucketName != null && s3ObjectKey != null) {    S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();    Properties properties=s3Dao.getProperties(s3BucketName,s3ObjectKey,s3FileTransferRequestParamsDto);    parameters.putAll(javaPropertiesHelper.toMap(properties));  }}  }
class C{  public static Version serializableInstance(){  return new Version("1.2.3");}  }
class C{  public static void indexADocument(String indexName,Document document) throws InterruptedException {  IndexSpec indexSpec=IndexSpec.newBuilder().setName(indexName).build();  Index index=SearchServiceFactory.getSearchService().getIndex(indexSpec);  final int maxRetry=3;  int attempts=0;  int delay=2;  while (true) {    try {      index.put(document);    } catch (    PutException e) {      if (StatusCode.TRANSIENT_ERROR.equals(e.getOperationResult().getCode()) && ++attempts < maxRetry) {        Thread.sleep(delay * 1000);        delay*=2;        continue;      } else {        throw e;      }    }    break;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:30.637 -0500",hash_original_method="E9BB75E73BA30AD97FC5CFD7AF8A9F87",hash_generated_method="C05B94153B1A5E317ECE0E6053D562B3") public RuntimeCryptoException(String message){  super(message);}  }
class C{  public double bps(final Leg cashflows,final Handle<YieldTermStructure> discountCurve,final Date settlementDate,final Date npvDate,final int exDividendDays){  Date date=settlementDate;  if (date.isNull()) {    date=discountCurve.currentLink().referenceDate();  }  final BPSCalculator calc=new BPSCalculator(discountCurve,npvDate);  for (int i=0; i < cashflows.size(); ++i) {    if (!cashflows.get(i).hasOccurred(date.add(exDividendDays))) {      cashflows.get(i).accept(calc);    }  }  return basisPoint_ * calc.result();}  }
class C{  public AsicContainerTest(String containerFile,String errorCode){  this.containerFile=containerFile;  this.errorCode=errorCode;}  }
class C{  public static synchronized double partialCorrelation(TetradMatrix submatrix){  try {    TetradMatrix inverse=submatrix.inverse();    double a=-1.0 * inverse.get(0,1);    double v0=inverse.get(0,0);    double v1=inverse.get(1,1);    double b=Math.sqrt(v0 * v1);    return a / b;  } catch (  Exception e) {    e.printStackTrace();    return Double.NaN;  }}  }
class C{  @Override public String toString(){  return SerialDate.monthCodeToString(this.month) + " " + this.year;}  }
class C{  public Lucene50StoredFieldsFormat(){  this(Mode.BEST_SPEED);}  }
class C{  public int read() throws IOException {  int b0=fInputStream.read() & 0xff;  if (b0 == 0xff)   return -1;  int b1=fInputStream.read() & 0xff;  if (b1 == 0xff)   return -1;  if (fEncoding >= 4) {    int b2=fInputStream.read() & 0xff;    if (b2 == 0xff)     return -1;    int b3=fInputStream.read() & 0xff;    if (b3 == 0xff)     return -1;    if (log.isLoggable(Level.FINE))     log.fine("b0 is " + (b0 & 0xff) + " b1 "+ (b1 & 0xff)+ " b2 "+ (b2 & 0xff)+ " b3 "+ (b3 & 0xff));    if (fEncoding == UCS4BE)     return (b0 << 24) + (b1 << 16) + (b2 << 8)+ b3; else     return (b3 << 24) + (b2 << 16) + (b1 << 8)+ b0;  } else {    if (fEncoding == UCS2BE)     return (b0 << 8) + b1; else     return (b1 << 8) + b0;  }}  }
class C{  public void finalizeBenchmark() throws Exception {  try {    observer.finalizeObserver();    suite.finalizeSuite();  } catch (  Exception e) {    throw new Exception("Benchmark finalization failed.\n" + e.toString());  }}  }
class C{  private void doUpdateExisting() throws ServiceException, IOException {  try {    originalEntry.getCustomElements().replaceWithLocal(newContents);    originalEntry=originalEntry.update();    newContents=null;  } catch (  VersionConflictException e) {    originalEntry=originalEntry.getSelf();    TextContent content=(TextContent)originalEntry.getContent();    JOptionPane.showMessageDialog(null,"Someone has edited the row in the meantime to:\n" + originalEntry.getTitle().getPlainText() + " ("+ content.getContent().getPlainText()+ ")\n"+ "Commit again to confirm.","Version Conflict",JOptionPane.WARNING_MESSAGE);  }}  }
class C{  InformationPanel(){  setLayout(new OverlayLayout(this));  JComponent container=SBoxLayout.createContainer(SBoxLayout.VERTICAL);  glassPane=new JComponent(){  };  add(glassPane);  add(container);  nameField=new JTextPane();  StyleConstants.setAlignment(center,StyleConstants.ALIGN_CENTER);  nameField.setAlignmentX(CENTER_ALIGNMENT);  nameField.setOpaque(true);  nameField.setBackground(getBackground());  nameField.setForeground(Color.WHITE);  nameField.setFocusable(false);  nameField.setEditable(false);  container.add(nameField,SLayout.EXPAND_X);  dangerIndicator=new DangerIndicator(MAX_SKULLS);  dangerIndicator.setAlignmentX(CENTER_ALIGNMENT);  container.add(dangerIndicator);  describeDanger(0);}  }
class C{  public static KDC create(String realm) throws IOException {  return create(realm,"kdc." + realm.toLowerCase(),0,true);}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_CutPoints == null) {    calculateCutPoints();    setOutputFormat();    for (int i=0; i < getInputFormat().numInstances(); i++) {      convertInstance(getInputFormat().instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public float toMeters(double pixels){  return (float)(pixels * METERS_PER_PIXELS);}  }
class C{  public VarNode edgeVar(){  return (VarNode)super.getProperty(Annotations.EDGE_VAR);}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  Component toRemove;  if (constraints != null && !(constraints instanceof String)) {    throw new IllegalArgumentException("cannot add to layout: " + "constraint must be a string " + "(or null)");  }  if (constraints == null) {    if (getLeftComponent() == null) {      constraints=JSplitPane.LEFT;    } else     if (getRightComponent() == null) {      constraints=JSplitPane.RIGHT;    }  }  if (constraints != null && (constraints.equals(JSplitPane.LEFT) || constraints.equals(JSplitPane.TOP))) {    toRemove=getLeftComponent();    if (toRemove != null) {      remove(toRemove);    }    leftComponent=comp;    index=-1;  } else   if (constraints != null && (constraints.equals(JSplitPane.RIGHT) || constraints.equals(JSplitPane.BOTTOM))) {    toRemove=getRightComponent();    if (toRemove != null) {      remove(toRemove);    }    rightComponent=comp;    index=-1;  } else   if (constraints != null && constraints.equals(JSplitPane.DIVIDER)) {    index=-1;  }  super.addImpl(comp,constraints,index);  revalidate();  repaint();}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableListMultimap<K,V> of(){  return (ImmutableListMultimap<K,V>)EmptyImmutableListMultimap.INSTANCE;}  }
class C{  public ProfileVisit visitedAt(SafeCalendar visitedAt){  this.visitedAt=visitedAt;  return this;}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public boolean sendEMail(MUser from,MUser to,String subject,String message,File attachment){  return sendEMail(from,to,subject,message,attachment,false);}  }
class C{  public SketchesArgumentException(String message){  super(message);}  }
class C{  protected UnaryImpl(){  super();}  }
class C{  public Name addAll(int posn,Name n) throws InvalidNameException {  if (n instanceof CompositeName) {    impl.addAll(posn,n.getAll());    return this;  } else {    throw new InvalidNameException("Not a composite name: " + n.toString());  }}  }
class C{  public LayoutParams(int width,int height,int x,int y){  super(width,height);  this.x=x;  this.y=y;}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_CutPoints == null) {    calculateCutPoints();    setOutputFormat();    for (int i=0; i < getInputFormat().numInstances(); i++) {      convertInstance(getInputFormat().instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public static EncryptionAlgorithm forName(final String name,final EncryptionAlgorithm defaultValue){  if ("EC".equals(name) || "ECC".equals(name)) {    return ECDSA;  }  try {    final EncryptionAlgorithm encryptionAlgorithm=valueOf(name);    return encryptionAlgorithm;  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public boolean save(IMiniTable miniTable,String trxName){  int C_Invoice_ID=((Integer)getGridTab().getValue("C_Invoice_ID")).intValue();  MInvoice invoice=new MInvoice(Env.getCtx(),C_Invoice_ID,trxName);  log.config(invoice.toString());  if (p_order != null) {    invoice.setOrder(p_order);    invoice.saveEx();  }  if (m_rma != null) {    invoice.setM_RMA_ID(m_rma.getM_RMA_ID());    invoice.saveEx();  }  for (int i=0; i < miniTable.getRowCount(); i++) {    if (((Boolean)miniTable.getValueAt(i,0)).booleanValue()) {      MProduct product=null;      BigDecimal QtyEntered=(BigDecimal)miniTable.getValueAt(i,1);      KeyNamePair pp=(KeyNamePair)miniTable.getValueAt(i,2);      int C_UOM_ID=pp.getKey();      pp=(KeyNamePair)miniTable.getValueAt(i,3);      int M_Product_ID=0;      if (pp != null)       M_Product_ID=pp.getKey();      int C_OrderLine_ID=0;      pp=(KeyNamePair)miniTable.getValueAt(i,5);      if (pp != null)       C_OrderLine_ID=pp.getKey();      int M_InOutLine_ID=0;      pp=(KeyNamePair)miniTable.getValueAt(i,6);      if (pp != null)       M_InOutLine_ID=pp.getKey();      int M_RMALine_ID=0;      pp=(KeyNamePair)miniTable.getValueAt(i,7);      if (pp != null)       M_RMALine_ID=pp.getKey();      int precision=2;      if (M_Product_ID != 0) {        product=MProduct.get(Env.getCtx(),M_Product_ID);        precision=product.getUOMPrecision();      }      QtyEntered=QtyEntered.setScale(precision,BigDecimal.ROUND_HALF_DOWN);      log.fine("Line QtyEntered=" + QtyEntered + ", Product_ID="+ M_Product_ID+ ", OrderLine_ID="+ C_OrderLine_ID+ ", InOutLine_ID="+ M_InOutLine_ID);      MInvoiceLine invoiceLine=new MInvoiceLine(invoice);      invoiceLine.setM_Product_ID(M_Product_ID,C_UOM_ID);      invoiceLine.setQty(QtyEntered);      BigDecimal QtyInvoiced=null;      if (M_Product_ID > 0 && product.getC_UOM_ID() != C_UOM_ID) {        QtyInvoiced=MUOMConversion.convertProductFrom(Env.getCtx(),M_Product_ID,C_UOM_ID,QtyEntered);      }      if (QtyInvoiced == null)       QtyInvoiced=QtyEntered;      invoiceLine.setQtyInvoiced(QtyInvoiced);      MOrderLine orderLine=null;      if (C_OrderLine_ID != 0)       orderLine=new MOrderLine(Env.getCtx(),C_OrderLine_ID,trxName);      MRMALine rmaLine=null;      if (M_RMALine_ID > 0)       rmaLine=new MRMALine(Env.getCtx(),M_RMALine_ID,null);      MInOutLine inoutLine=null;      if (M_InOutLine_ID != 0) {        inoutLine=new MInOutLine(Env.getCtx(),M_InOutLine_ID,trxName);        if (orderLine == null && inoutLine.getC_OrderLine_ID() != 0) {          C_OrderLine_ID=inoutLine.getC_OrderLine_ID();          orderLine=new MOrderLine(Env.getCtx(),C_OrderLine_ID,trxName);        }      } else       if (C_OrderLine_ID > 0) {        String whereClause="EXISTS (SELECT 1 FROM M_InOut io WHERE io.M_InOut_ID=M_InOutLine.M_InOut_ID AND io.DocStatus IN ('CO','CL'))";        MInOutLine[] lines=MInOutLine.getOfOrderLine(Env.getCtx(),C_OrderLine_ID,whereClause,trxName);        log.fine("Receipt Lines with OrderLine = #" + lines.length);        if (lines.length > 0) {          for (int j=0; j < lines.length; j++) {            MInOutLine line=lines[j];            if (line.getQtyEntered().compareTo(QtyEntered) == 0) {              inoutLine=line;              M_InOutLine_ID=inoutLine.getM_InOutLine_ID();              break;            }          }          if (inoutLine == null) {            inoutLine=lines[0];            M_InOutLine_ID=inoutLine.getM_InOutLine_ID();          }        }      } else       if (M_RMALine_ID != 0) {        String whereClause="EXISTS (SELECT 1 FROM M_InOut io WHERE io.M_InOut_ID=M_InOutLine.M_InOut_ID AND io.DocStatus IN ('CO','CL'))";        MInOutLine[] lines=MInOutLine.getOfRMALine(Env.getCtx(),M_RMALine_ID,whereClause,null);        log.fine("Receipt Lines with RMALine = #" + lines.length);        if (lines.length > 0) {          for (int j=0; j < lines.length; j++) {            MInOutLine line=lines[j];            if (rmaLine.getQty().compareTo(QtyEntered) == 0) {              inoutLine=line;              M_InOutLine_ID=inoutLine.getM_InOutLine_ID();              break;            }          }          if (rmaLine == null) {            inoutLine=lines[0];            M_InOutLine_ID=inoutLine.getM_InOutLine_ID();          }        }      }      if (inoutLine != null) {        invoiceLine.setShipLine(inoutLine);      } else {        log.fine("No Receipt Line");        if (orderLine != null) {          invoiceLine.setOrderLine(orderLine);        } else {          log.fine("No Order Line");          invoiceLine.setPrice();          invoiceLine.setTax();        }        if (rmaLine != null) {          invoiceLine.setRMALine(rmaLine);        } else         log.fine("No RMA Line");      }      invoiceLine.saveEx();    }  }  return true;}  }
class C{  private boolean testFENParseError(String fen){  boolean wasError;  wasError=false;  try {    TextIO.readFEN(fen);  } catch (  ChessParseError err) {    wasError=true;  }  return wasError;}  }
class C{  @Override public void writePage(int pageID,P page){  if (page.isDirty()) {    try {      countWrite();      byte[] array=pageToByteArray(page);      file.getRecordBuffer(pageID).put(array);      page.setDirty(false);    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  private void compareIndexedGraphs(Graph<Number,Number> g1,Graph<Number,Number> g2){  int n1=g1.getVertexCount();  int n2=g2.getVertexCount();  assertEquals(n1,n2);  assertEquals(g1.getEdgeCount(),g2.getEdgeCount());  List<Number> id1=new ArrayList<Number>(g1.getVertices());  List<Number> id2=new ArrayList<Number>(g2.getVertices());  for (int i=0; i < n1; i++) {    Number v1=id1.get(i);    Number v2=id2.get(i);    assertNotNull(v1);    assertNotNull(v2);    checkSets(g1.getPredecessors(v1),g2.getPredecessors(v2),id1,id2);    checkSets(g1.getSuccessors(v1),g2.getSuccessors(v2),id1,id2);  }}  }
class C{  public long transferTo(RandomAccessFile out) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile) throws Exception {  addDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,null);}  }
class C{  private void breakupLabel(){  int prev=0, noa;  for (noa=0; noa < m_label.length(); noa++) {    if (m_label.charAt(noa) == '\n') {      m_lines.addElement(m_label.substring(prev,noa));      prev=noa + 1;    }  }  m_lines.addElement(m_label.substring(prev,noa));}  }
class C{  public void addPart(String key,Object value){  jsonParams.put(key,value);}  }
class C{  public boolean isDenied(String permission){  return (mPerms.get(permission) == PackageManager.PERMISSION_DENIED);}  }
class C{  public static boolean isEmpty(String str){  return isNull(str) || str.length() <= 0;}  }
class C{  public static void customizeCache(Context context,int memoryCacheSizeInKB,String defaultDiskCachePath,int defaultDiskCacheSizeInKB,String stableDiskCachePath,int stableDiskCacheSizeInKB){  if (memoryCacheSizeInKB > 0) {    int maxCacheSizeInKB=Math.round(0.5f * Runtime.getRuntime().maxMemory() / 1024);    memoryCacheSizeInKB=Math.min(memoryCacheSizeInKB,maxCacheSizeInKB);    sDefaultImageMemoryCache=new DefaultMemoryCache(memoryCacheSizeInKB);  }  if (defaultDiskCacheSizeInKB > 0 && !TextUtils.isEmpty(defaultDiskCachePath)) {    ImageDiskCacheProvider imageFileProvider=getImageFileProvider(context,defaultDiskCachePath,defaultDiskCacheSizeInKB,DEFAULT_FILE_CACHE_DIR);    if (imageFileProvider != null) {      sDefaultImageProvider=new ImageProvider(context,getDefaultImageMemoryCache(),imageFileProvider);    }  }  if (stableDiskCacheSizeInKB > 0 && !TextUtils.isEmpty(stableDiskCachePath)) {    ImageDiskCacheProvider imageFileProvider=getImageFileProvider(context,stableDiskCachePath,stableDiskCacheSizeInKB,STABLE_FILE_CACHE_DIR);    if (imageFileProvider != null) {      sStableImageProvider=new ImageProvider(context,getDefaultImageMemoryCache(),imageFileProvider);    }  }}  }
class C{  public void activeObject(ActivationID id,Remote impl) throws ActivationException, UnknownObjectException, RemoteException {  try {    acquireLock(id);synchronized (this) {      if (groupInactive == true)       throw new ActivationException("group is inactive");    }    if (!active.contains(id)) {      ActiveEntry entry=new ActiveEntry(impl);      active.put(id,entry);      try {        super.activeObject(id,entry.mobj);      } catch (      RemoteException e) {      }    }  }  finally {    releaseLock(id);    checkInactiveGroup();  }}  }
class C{  protected void notifyRowChanged() throws SQLException {  checkforRowSetInterface();  if (listeners.isEmpty() == false) {    RowSetEvent event=new RowSetEvent((RowSet)this);    for (    RowSetListener rsl : listeners) {      rsl.rowChanged(event);    }  }}  }
class C{  ICC_ProfileGray(Profile p){  super(p);}  }
class C{  @Override public void sessionDestroyed(HttpSessionEvent se){  GlobalNGSessionContextsMapHolder.destroySession(String.valueOf(se.getSession().getAttribute(NG_SESSION_ATTRIBUTE_NAME)));  SessionMapper.getSessionsMap().remove(se.getSession().getId());}  }
class C{  public void signOut(){  this.mPubNub.unsubscribeAll();  SharedPreferences.Editor edit=this.mSharedPreferences.edit();  edit.remove(Constants.USER_NAME);  edit.apply();  Intent intent=new Intent(this,LoginActivity.class);  intent.putExtra("oldUsername",this.username);  startActivity(intent);}  }
class C{  protected int insertionIndex(long val){  byte[] states=_states;  long[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] == FULL && set[index] != val);    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  protected GemFireHealth createGemFireHealth(GfManagerAgent agent) throws AdminException {  if (agent == null) {    throw new IllegalStateException(LocalizedStrings.AdminDistributedSystemImpl_GFMANAGERAGENT_MUST_NOT_BE_NULL.toLocalizedString());  }  return new GemFireHealthImpl(agent,this);}  }
class C{  @Override public void smoothScrollToPosition(int position){  super.smoothScrollToPosition(position);}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  public void validate(){  super.validate();  validateIdentityStatements();}  }
class C{  @Override public void createModulesTable() throws SQLException {  executeUpdate("CREATE TABLE modules (" + " id serial, " + " name text NOT NULL, "+ " architecture varchar( 32 ) NOT NULL, "+ " base_address bigint NOT NULL, "+ " exporter varchar( 256 ) NOT NULL, "+ " version int NOT NULL, "+ " md5 char( 32 ) NOT NULL, "+ " sha1 char( 40 ) NOT NULL, "+ " comment TEXT, "+ " import_time timestamp NOT NULL DEFAULT current_timestamp, "+ " PRIMARY KEY (id));");}  }
class C{  public static boolean isNotEmpty(Object o){  return !ObjectType.isEmpty(o);}  }
class C{  @Override public void init(){}  }
class C{  public boolean isDrawTileBorders(){  return drawTileBorders;}  }
class C{  private void computeZerosAbove() throws RuntimeException {  short tmp=0;  for (int k=A.length - 1; k > 0; k--) {    for (int i=k - 1; i >= 0; i--) {      short factor1=A[i][k];      short factor2=GF2Field.invElem(A[k][k]);      if (factor2 == 0) {        throw new RuntimeException("The matrix is not invertible");      }      for (int j=k; j < 2 * A.length; j++) {        tmp=GF2Field.multElem(A[k][j],factor2);        tmp=GF2Field.multElem(factor1,tmp);        A[i][j]=GF2Field.addElem(A[i][j],tmp);      }    }  }}  }
class C{  public void updateBlob(int columnIndex,InputStream inputStream,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void makeAgeSegregatedSpace(){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(usingStickyMarkBits);  allocState&=~HeaderByte.UNLOGGED_BIT;  isAgeSegregated=true;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public void drawFloor(){  GLES20.glUseProgram(floorProgram);  GLES20.glUniform3fv(floorLightPosParam,1,lightPosInEyeSpace,0);  GLES20.glUniformMatrix4fv(floorModelParam,1,false,modelFloor,0);  GLES20.glUniformMatrix4fv(floorModelViewParam,1,false,modelView,0);  GLES20.glUniformMatrix4fv(floorModelViewProjectionParam,1,false,modelViewProjection,0);  GLES20.glVertexAttribPointer(floorPositionParam,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,0,floorVertices);  GLES20.glVertexAttribPointer(floorNormalParam,3,GLES20.GL_FLOAT,false,0,floorNormals);  GLES20.glVertexAttribPointer(floorColorParam,4,GLES20.GL_FLOAT,false,0,floorColors);  GLES20.glDrawArrays(GLES20.GL_TRIANGLES,0,6);  checkGLError("drawing floor");}  }
class C{  public void testAddPageAuditWithConcurrentAccessAndMaxSizeReached(){  System.out.println("addPageAuditWithConcurrentAccessAndMaxSizeReached");  int numberOfSimultaneousRequestedCommand=1000;  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  Collection<AuditCommand> auditCommands=new ArrayList<AuditCommand>();  for (int i=0; i < numberOfSimultaneousRequestedCommand; i++) {    AuditCommand auditCommand=EasyMock.createMock(AuditCommand.class);    auditCommands.add(auditCommand);  }  AuditServiceThread auditServiceThread=createMockAuditServiceThreadWithFireCompleted(instance,auditCommands.size());  AuditServiceThreadFactory auditServiceThreadFactory=createMockAuditServiceThreadFactoryWithMultipleCommand(auditCommands,auditServiceThread);  instance.setAuditServiceThreadFactory(auditServiceThreadFactory);  for (  AuditCommand auditCommand : auditCommands) {    instance.addPageAudit(auditCommand);  }  try {    Thread.sleep(5);  } catch (  InterruptedException ex) {    Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);  }  for (int i=0; i < numberOfSimultaneousRequestedCommand; i++) {    instance.auditCompleted(auditServiceThread);    try {      Thread.sleep(5);    } catch (    InterruptedException ex) {      Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);    }  }  try {    Thread.sleep(10);  } catch (  InterruptedException ex) {    Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);  }  EasyMock.verify(auditServiceThreadFactory);  EasyMock.verify(auditServiceThread);}  }
class C{  public void endNativeGraphicsAccess(){  translate(((Integer)nativeGraphicsState[0]).intValue(),((Integer)nativeGraphicsState[1]).intValue());  setColor(((Integer)nativeGraphicsState[2]).intValue());  setAlpha(((Integer)nativeGraphicsState[3]).intValue());  setClip(((Integer)nativeGraphicsState[4]).intValue(),((Integer)nativeGraphicsState[5]).intValue(),((Integer)nativeGraphicsState[6]).intValue(),((Integer)nativeGraphicsState[7]).intValue());  setAntiAliased(((Boolean)nativeGraphicsState[8]).booleanValue());  setAntiAliasedText(((Boolean)nativeGraphicsState[9]).booleanValue());  nativeGraphicsState=null;}  }
class C{  public void removePreviewAreaSizeChangedListener(PreviewStatusListener.PreviewAreaChangedListener listener){  if (listener != null && mPreviewSizeChangedListeners.contains(listener)) {    mPreviewSizeChangedListeners.remove(listener);  }}  }
class C{  public Set<TriggerKey> selectTriggersInGroup(Connection conn,GroupMatcher<TriggerKey> matcher) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    if (isMatcherEquals(matcher)) {      ps=conn.prepareStatement(rtp(SELECT_TRIGGERS_IN_GROUP));      ps.setString(1,toSqlEqualsClause(matcher));    } else {      ps=conn.prepareStatement(rtp(SELECT_TRIGGERS_IN_GROUP_LIKE));      ps.setString(1,toSqlLikeClause(matcher));    }    rs=ps.executeQuery();    Set<TriggerKey> keys=new HashSet<TriggerKey>();    while (rs.next()) {      keys.add(triggerKey(rs.getString(1),rs.getString(2)));    }    return keys;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public void appendCloseCodeTag(){  text.append("</code>");}  }
class C{  public static void main(String arg[]){  if (arg.length != 2) {    System.err.println("usage: Crypt password salt");    System.exit(1);  }  Crypt c=new Crypt();  try {    byte result[]=c.crypt(arg[0].getBytes("ISO-8859-1"),arg[1].getBytes("ISO-8859-1"));    for (int i=0; i < result.length; i++) {      System.out.println(" " + i + " "+ (char)result[i]);    }  } catch (  java.io.UnsupportedEncodingException uee) {  }}  }
class C{  public double eigenvalue(){  return eigenvalue;}  }
class C{  public TruststoreSettings updateTruststoreSettings(TruststoreSettingsChanges truststoreSettingsChanges){  return client.put(TruststoreSettings.class,truststoreSettingsChanges,TRUSTSTORE_SETTINGS_URL);}  }
class C{  public void annotationChanged(Annotation annotation){  changedAnnotations.add(annotation);}  }
class C{  public static ErLevel fromLevel(Level level){  if (level == null) {    return null;  }  ErLevel erLevel=new ErLevel();  erLevel.setLevel(level.toInt());  erLevel.setLevelStr(level.toString());  return erLevel;}  }
class C{  protected Vcenter createNewSystemVcenter(VcenterParam param,Boolean validateConnection){  validateSystemVcenter(param,null,validateConnection);  Vcenter vcenter=new Vcenter();  vcenter.setId(URIUtil.createId(Vcenter.class));  vcenter.setTenant(NullColumnValueGetter.getNullURI());  populateVcenterData(vcenter,param);  return vcenter;}  }
class C{  private void displayIncomingCallNotification(MXSession session,Room room,Event event,String callId,BingRule bingRule){  Log.d(LOG_TAG,"displayIncomingCallNotification : " + callId + " in "+ room.getRoomId());  if (!TextUtils.isEmpty(mIncomingCallId)) {    Log.d(LOG_TAG,"displayIncomingCallNotification : the incoming call in progress is already displayed");  } else   if (!TextUtils.isEmpty(mCallIdInProgress)) {    Log.d(LOG_TAG,"displayIncomingCallNotification : a 'call in progress' notification is displayed");  } else   if (null == VectorCallViewActivity.getActiveCall()) {    Log.d(LOG_TAG,"displayIncomingCallNotification : display the dedicated notification");    if ((null != bingRule) && bingRule.isCallRingNotificationSound(bingRule.notificationSound())) {      VectorCallSoundManager.startRinging();    }    Notification notification=NotificationUtils.buildIncomingCallNotification(EventStreamService.this,getRoomName(session,room,event),session.getMyUserId(),callId);    if ((null != bingRule) && bingRule.isDefaultNotificationSound(bingRule.notificationSound())) {      notification.defaults|=Notification.DEFAULT_SOUND;    }    startForeground(NOTIF_ID_FOREGROUND_SERVICE,notification);    mForegroundServiceIdentifier=FOREGROUND_ID_INCOMING_CALL;    mIncomingCallId=callId;    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);    PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,"MXEventListener");    wl.acquire(3000);    wl.release();  } else {    Log.d(LOG_TAG,"displayIncomingCallNotification : do not display the incoming call notification because there is a pending call");  }}  }
class C{  protected void checkChildren(){  if (children == null) {    NodeList kids=node.getChildNodes();    int childCount=kids.getLength();    children=new XML[childCount];    for (int i=0; i < childCount; i++) {      children[i]=new XML(this,kids.item(i));    }  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Object parseXMLObject(XMLObject xo) throws XMLParseException {  SiteList siteList=(SiteList)xo.getChild(SiteList.class);  boolean negativeMask=xo.getBooleanAttribute(NEGATIVE);  String maskString=(String)xo.getElementFirstChild(MASK);  boolean[] mask=new boolean[siteList.getSiteCount()];  int k=0;  for (  char c : maskString.toCharArray()) {    if (Character.isDigit(c)) {      if (k >= mask.length) {        break;      }      mask[k]=(c == '0' ? negativeMask : !negativeMask);      k++;    }  }  if (k != mask.length) {    throw new XMLParseException("The mask needs to be the same length as the alignment (spaces are ignored)");  }  SitePatterns patterns=new SitePatterns(siteList,mask,false,false);  if (patterns == null) {    throw new XMLParseException("The mask needs include at least one pattern");  }  if (xo.hasAttribute(XMLParser.ID)) {    final Logger logger=Logger.getLogger("dr.evoxml");    logger.info("Site patterns '" + xo.getId() + "' created by masking alignment with id '"+ siteList.getId()+ "'");    logger.info("  pattern count = " + patterns.getPatternCount());  }  return patterns;}  }
class C{  public DecoMon(MonInternals monData){  super(monData);}  }
class C{  @Override public void close() throws IOException {  if (!finished) {    finish();  }  destroy();}  }
class C{  public static List<String> parseList(String listValue){  Matcher matcher=SET_PATTERN.matcher(listValue);  if (matcher.find()) {    String content=matcher.group(1);    List<String> result=new ArrayList<String>();    StringBuilder str=null;    STATE state=null;    char last=0;    for (    char c : content.toCharArray()) {      if (str == null)       str=new StringBuilder();      if (c == DOUBLE_QUOTE && last != SLASH) {        if (state == STATE.STRING)         state=null; else         state=STATE.STRING;      } else       if (c == COMMA && state != STATE.STRING) {        result.add(unescape(str.toString()));        str=null;        last=c;        continue;      }      last=c;      str.append(c);    }    if (str != null)     result.add(unescape(str.toString()));    return result;  } else {    LOG.error("Invalid list value: " + listValue);    throw new IllegalArgumentException("Invalid format of list value: " + listValue + ", must be in format: (item1,item2,...)");  }}  }
class C{  private void checkAxisIndices(List indices){  if (indices == null) {    return;  }  int count=indices.size();  if (count == 0) {    throw new IllegalArgumentException("Empty list not permitted.");  }  HashSet set=new HashSet();  for (int i=0; i < count; i++) {    Object item=indices.get(i);    if (!(item instanceof Integer)) {      throw new IllegalArgumentException("Indices must be Integer instances.");    }    if (set.contains(item)) {      throw new IllegalArgumentException("Indices must be unique.");    }    set.add(item);  }}  }
class C{  public static boolean isEventDispatchThread(){  return EventQueue.isDispatchThread();}  }
class C{  private void adjustNameAndPosition(Node node,int deltaX,int deltaY){  String originalName=node.getName();  String uniqueName=nextUniqueName(originalName);  if (!uniqueName.equals(originalName)) {    node.setName(uniqueName);    node.setCenterX(node.getCenterX() + deltaX);    node.setCenterY(node.getCenterY() + deltaY);  }}  }
class C{  public Spline2D add(ReadonlyVec2D p){  pointList.add(p.copy());  return this;}  }
class C{  private void handleAlarm(){  AlarmListener listener=getListener();  if (listener == null) {    return;  }  Thread thread=Thread.currentThread();  ClassLoader loader=getContextLoader();  if (loader != null) {    thread.setContextClassLoader(loader);  } else {    thread.setContextClassLoader(_systemLoader);  }  try {    listener.handleAlarm(this);  }  finally {    thread.setContextClassLoader(_systemLoader);  }}  }
class C{  @Override public void updateNString(int columnIndex,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNString(" + columnIndex + ", "+ quote(x)+ ");");    }    update(columnIndex,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected FilePreferences dumpFile(){synchronized (preferencesFile) {    try {      mapper.writeValue(preferencesFile,rootNode);      return this;    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  void reportError(String msg,Element e){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public void onLoaded(){  if (!addedToEnet && !FMLCommonHandler.instance().getEffectiveSide().isClient() && Info.isIc2Available()) {    worldObj=parent.getWorldObj();    xCoord=parent.xCoord;    yCoord=parent.yCoord;    zCoord=parent.zCoord;    MinecraftForge.EVENT_BUS.post(new EnergyTileLoadEvent(this));    addedToEnet=true;  }}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return conn == null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void doParse() throws ParseException, IOException {  ((LengthListHandler)lengthHandler).startLengthList();  current=reader.read();  skipSpaces();  try {    for (; ; ) {      lengthHandler.startLength();      parseLength();      lengthHandler.endLength();      skipCommaSpaces();      if (current == -1) {        break;      }    }  } catch (  NumberFormatException e) {    reportUnexpectedCharacterError(current);  }  ((LengthListHandler)lengthHandler).endLengthList();}  }
class C{  public static int countWhitespacesAtTheBeginningOfLine(String text){  MatchResult result=RegExpUtils.findMatchAfterIndex(UnicodeUtils.regexpNotWhitespaceExcludingNewlineAndCarriageReturn,text,-1);  return result == null ? text.length() : result.getIndex();}  }
class C{  public void addRestartListener(RestartListener listener){  listeners.addListener(listener);}  }
class C{  public Generator(long start,long end,long step,String namePattern,int type,int dclass,long ttl,String rdataPattern,Name origin){  if (start < 0 || end < 0 || start > end || step <= 0)   throw new IllegalArgumentException("invalid range specification");  if (!supportedType(type))   throw new IllegalArgumentException("unsupported type");  DClass.check(dclass);  this.start=start;  this.end=end;  this.step=step;  this.namePattern=namePattern;  this.type=type;  this.dclass=dclass;  this.ttl=ttl;  this.rdataPattern=rdataPattern;  this.origin=origin;  this.current=start;}  }
class C{  public void create(){  holdingBuffer=new ArrayBlockingQueue<Pair<String,Record>>(bufferSize);  boolean defaultSelect=(shardIds == null) || (shardIds.size() == 0);  final List<Shard> pms=KinesisUtil.getInstance().getShardList(streamName);  for (  final Shard shId : pms) {    if ((shardIds.contains(shId.getShardId()) || defaultSelect) && !closedShards.contains(shId)) {      simpleConsumerThreads.add(shId);    }  }}  }
class C{  private Object init(Object[] arguments) throws PageException {  object=Reflector.callConstructor(clazz,arguments);  isInit=true;  return object;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void delete(String bucketName,List<KeyVersion> objects){  ReactiveSeq.fromList(objects).grouped(1000).forEach(null);}  }
class C{  private void assertIntervalQuery(String field,String... intervals){  assertIntervalQuery(field,"*:*",-1,intervals);}  }
class C{  public void putEntryInMonitoringRegionMap(DistributedMember member,Region<String,Object> region){  monitoringRegionMap.put(member,region);}  }
class C{  public int updateTriggerStateFromOtherStates(Connection conn,TriggerKey triggerKey,String newState,String oldState1,String oldState2,String oldState3) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_STATE_FROM_STATES));    ps.setString(1,newState);    ps.setString(2,triggerKey.getName());    ps.setString(3,triggerKey.getGroup());    ps.setString(4,oldState1);    ps.setString(5,oldState2);    ps.setString(6,oldState3);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  void foo1(){}  }
class C{  public void paint(Graphics g){  if (markedState != null && currentColor != null) {    ((Graphics2D)g).setStroke(DEFAULT_STROKE);    g.setColor(currentColor);    if (markedState.getAbsolutePointCount() > 0) {      Point last=markedState.getAbsolutePoint(0).getPoint();      for (int i=1; i < markedState.getAbsolutePointCount(); i++) {        Point current=markedState.getAbsolutePoint(i).getPoint();        g.drawLine(last.x - getX(),last.y - getY(),current.x - getX(),current.y - getY());        last=current;      }    } else {      g.drawRect(1,1,getWidth() - 3,getHeight() - 3);    }  }}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  public void invalidatePath(){  generalPath=null;  bounds=null;  outer=-1;}  }
class C{  public static String removeFormattingAndColors(String line){  return removeFormatting(removeColors(line));}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @Field(41) public __VARIANT_NAME_3_union pulVal(Pointer<Integer> pulVal){  this.io.setPointerField(this,41,pulVal);  return this;}  }
class C{  public static TransactionParameterBuffer processMapping(String mapping) throws FBResourceException {  TransactionParameterBuffer result=new TransactionParameterBufferImpl();  StringTokenizer st=new StringTokenizer(mapping,",");  while (st.hasMoreTokens()) {    String token=st.nextToken();    Integer argValue=null;    if (token.contains("=")) {      String[] parts=token.split("=");      try {        argValue=Integer.valueOf(parts[1]);      } catch (      NumberFormatException ex) {        throw new FBResourceException(parts[1] + " is not valid integer value");      }      token=parts[0];    }    Integer value=ParameterBufferHelper.getTpbParam(token);    if (value == null) {      throw new FBResourceException("Keyword " + token + " unknown. Please check your mapping.");    }    if (argValue == null) {      result.addArgument(value);    } else {      result.addArgument(value,argValue);    }  }  return result;}  }
class C{  private void doInit(){  if (!wasInitCalled) {    try {      for (      String resource : getProcessDefinitions()) {        if (LOG.isDebugEnabled()) {          LOG.debug("Loading process definition from resource: " + resource + "...");        }        List<ProcessDefinitionImpl> definitions=parseProcessDefinitions(resource);        if (definitions != null && definitions.size() > 1) {          throwException("Process definition from resource: " + resource + " contains more than one process");        }        String processId=null;        RepositoryService aRepositoryService=null;        boolean doDeploy=false;        if (definitions != null && !definitions.isEmpty()) {          for (          ProcessDefinitionImpl definition : definitions) {            String key=definition.getKey();            if (key == null) {              throwException("Process definition from resource: " + resource + " contains no key.");            }            int version=definition.getVersion();            if (version < 1) {              throwException("Process definition from resource: " + resource + " contains no version > 0.");            }            processId=new StringBuilder(key).append("-").append(version).toString();            if (LOG.isDebugEnabled()) {              LOG.debug("Query process repository for id: " + processId);            }            if (processEngine == null) {              throw new RuntimeException("Init failed. ProcessEngine is null");            }            if (processEngine.getRepositoryService() == null) {              throw new RuntimeException("Init failed. RepositoryService is null");            }            aRepositoryService=processEngine.getRepositoryService();            doDeploy=aRepositoryService.createProcessDefinitionQuery().processDefinitionId(processId).count() == 0;          }          if (doDeploy) {            processId=aRepositoryService.createDeployment().addResourceFromClasspath(resource).deploy();            if (LOG.isInfoEnabled()) {              LOG.info("Process definition deployed, Id: " + processId + ", loaded from resource: "+ resource);            }          } else           if (LOG.isDebugEnabled()) {            LOG.debug("Process definition exitsts, Id: " + processId + ", loaded from resource: "+ resource);          }        } else {          LOG.warn("Resource contains no process definitions: " + resource);        }      }    } catch (    RuntimeException re) {      LOG.error("RuntimeException while initializing",re);      throw re;    }catch (    Exception t) {      LOG.error("Error while initializing",t);      throw new RuntimeException("Error while initializing",t);    } finally {      wasInitCalled=true;    }  }}  }
class C{  public static DateValue add(DateValue date,DateValue duration){  DTBuilder db=new DTBuilder(date);  db.year+=duration.year();  db.month+=duration.month();  db.day+=duration.day();  if (duration instanceof TimeValue) {    TimeValue tdur=(TimeValue)duration;    db.hour+=tdur.hour();    db.minute+=tdur.minute();    db.second+=tdur.second();    return db.toDateTime();  }  return (date instanceof TimeValue) ? db.toDateTime() : db.toDate();}  }
class C{  public Period mul(final int scalar){  return new Period(scalar * this.length,this.units);}  }
class C{  public String typeName(){  return typeName;}  }
class C{  public void fillFrame(){  ShowHelpAction helpAction=new ShowHelpAction("Pages/Network/connections.html");  addButton(new JButton(helpAction));  setContentPane(mainPanel);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Number>T convertNumberToTargetClass(Number number,Class<T> targetClass) throws IllegalArgumentException {  Assert.notNull(number,"Number must not be null");  Assert.notNull(targetClass,"Target class must not be null");  if (targetClass.isInstance(number)) {    return (T)number;  } else   if (targetClass.equals(Byte.class)) {    long value=number.longValue();    if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {      raiseOverflowException(number,targetClass);    }    return (T)new Byte(number.byteValue());  } else   if (targetClass.equals(Short.class)) {    long value=number.longValue();    if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {      raiseOverflowException(number,targetClass);    }    return (T)new Short(number.shortValue());  } else   if (targetClass.equals(Integer.class)) {    long value=number.longValue();    if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {      raiseOverflowException(number,targetClass);    }    return (T)new Integer(number.intValue());  } else   if (targetClass.equals(Long.class)) {    return (T)new Long(number.longValue());  } else   if (targetClass.equals(BigInteger.class)) {    if (number instanceof BigDecimal) {      return (T)((BigDecimal)number).toBigInteger();    } else {      return (T)BigInteger.valueOf(number.longValue());    }  } else   if (targetClass.equals(Float.class)) {    return (T)new Float(number.floatValue());  } else   if (targetClass.equals(Double.class)) {    return (T)new Double(number.doubleValue());  } else   if (targetClass.equals(BigDecimal.class)) {    return (T)new BigDecimal(number.toString());  } else {    throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to unknown target class ["+ targetClass.getName()+ "]");  }}  }
class C{  public T3(V1 val1,V2 val2,V3 val3){  super(val1,val2,val3);}  }
class C{  public Transfer(SessionInterface session){  this.session=session;}  }
class C{  public void undo(){  if (undoStack.size() > 0)   undoCommand(undoStack.peek());}  }
class C{  public void emitInvokedynamic(int desc,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokedynamic);  if (!alive)   return;  emit2(desc);  emit2(0);  state.pop(argsize);  state.push(mtype.getReturnType());}  }
class C{  public String toString(){  return Integer.toString(unique,16) + ":" + Long.toString(time,16)+ ":"+ Integer.toString(count,16);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static <V,E>int triCode(Graph<V,E> g,V u,V v,V w){  int i=0;  i+=link(g,v,u) ? 1 : 0;  i+=link(g,u,v) ? 2 : 0;  i+=link(g,v,w) ? 4 : 0;  i+=link(g,w,v) ? 8 : 0;  i+=link(g,u,w) ? 16 : 0;  i+=link(g,w,u) ? 32 : 0;  return i;}  }
class C{  public StackMapTableEntry(final int tag,final int byte_code_offset,final StackMapType[] types_of_locals,final StackMapType[] types_of_stack_items,final ConstantPool constant_pool){  this.frame_type=tag;  this.byte_code_offset=byte_code_offset;  this.types_of_locals=types_of_locals != null ? types_of_locals : new StackMapType[0];  this.types_of_stack_items=types_of_stack_items != null ? types_of_stack_items : new StackMapType[0];  this.constant_pool=constant_pool;}  }
class C{  public Lint augment(Symbol sym){  Lint l=augmentor.augment(this,sym.getDeclarationAttributes());  if (sym.isDeprecated()) {    if (l == this)     l=new Lint(this);    l.values.remove(LintCategory.DEPRECATION);    l.suppressedValues.add(LintCategory.DEPRECATION);  }  return l;}  }
class C{  public synchronized void taskStarted(){  m_ActiveTasks++;  updateMonitor();}  }
class C{  public boolean isOverlaps(int dimensionOfGeometryA,int dimensionOfGeometryB){  if ((dimensionOfGeometryA == Dimension.P && dimensionOfGeometryB == Dimension.P) || (dimensionOfGeometryA == Dimension.A && dimensionOfGeometryB == Dimension.A)) {    return isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) && isTrue(matrix[Location.INTERIOR][Location.EXTERIOR]) && isTrue(matrix[Location.EXTERIOR][Location.INTERIOR]);  }  if (dimensionOfGeometryA == Dimension.L && dimensionOfGeometryB == Dimension.L) {    return matrix[Location.INTERIOR][Location.INTERIOR] == 1 && isTrue(matrix[Location.INTERIOR][Location.EXTERIOR]) && isTrue(matrix[Location.EXTERIOR][Location.INTERIOR]);  }  return false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYPlot)) {    return false;  }  XYPlot that=(XYPlot)obj;  if (this.weight != that.weight) {    return false;  }  if (this.orientation != that.orientation) {    return false;  }  if (!this.domainAxes.equals(that.domainAxes)) {    return false;  }  if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {    return false;  }  if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {    return false;  }  if (this.domainGridlinesVisible != that.domainGridlinesVisible) {    return false;  }  if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {    return false;  }  if (this.domainMinorGridlinesVisible != that.domainMinorGridlinesVisible) {    return false;  }  if (this.rangeMinorGridlinesVisible != that.rangeMinorGridlinesVisible) {    return false;  }  if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {    return false;  }  if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {    return false;  }  if (this.domainCrosshairVisible != that.domainCrosshairVisible) {    return false;  }  if (this.domainCrosshairValue != that.domainCrosshairValue) {    return false;  }  if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {    return false;  }  if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {    return false;  }  if (this.rangeCrosshairValue != that.rangeCrosshairValue) {    return false;  }  if (!ObjectUtilities.equal(this.axisOffset,that.axisOffset)) {    return false;  }  if (!ObjectUtilities.equal(this.renderers,that.renderers)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeAxes,that.rangeAxes)) {    return false;  }  if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {    return false;  }  if (!ObjectUtilities.equal(this.datasetToDomainAxesMap,that.datasetToDomainAxesMap)) {    return false;  }  if (!ObjectUtilities.equal(this.datasetToRangeAxesMap,that.datasetToRangeAxesMap)) {    return false;  }  if (!ObjectUtilities.equal(this.domainGridlineStroke,that.domainGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeGridlineStroke,that.rangeGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.domainMinorGridlineStroke,that.domainMinorGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.domainMinorGridlinePaint,that.domainMinorGridlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke,that.rangeMinorGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.rangeMinorGridlinePaint,that.rangeMinorGridlinePaint)) {    return false;  }  if (!PaintUtilities.equal(this.domainZeroBaselinePaint,that.domainZeroBaselinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.domainZeroBaselineStroke,that.domainZeroBaselineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.rangeZeroBaselinePaint,that.rangeZeroBaselinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke,that.rangeZeroBaselineStroke)) {    return false;  }  if (!ObjectUtilities.equal(this.domainCrosshairStroke,that.domainCrosshairStroke)) {    return false;  }  if (!PaintUtilities.equal(this.domainCrosshairPaint,that.domainCrosshairPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeCrosshairStroke,that.rangeCrosshairStroke)) {    return false;  }  if (!PaintUtilities.equal(this.rangeCrosshairPaint,that.rangeCrosshairPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.annotations,that.annotations)) {    return false;  }  if (!ObjectUtilities.equal(this.fixedLegendItems,that.fixedLegendItems)) {    return false;  }  if (!PaintUtilities.equal(this.domainTickBandPaint,that.domainTickBandPaint)) {    return false;  }  if (!PaintUtilities.equal(this.rangeTickBandPaint,that.rangeTickBandPaint)) {    return false;  }  if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {    return false;  }  for (int i=0; i < 4; i++) {    if (!PaintUtilities.equal(this.quadrantPaint[i],that.quadrantPaint[i])) {      return false;    }  }  if (!ObjectUtilities.equal(this.shadowGenerator,that.shadowGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public void initForTestCase(){  this.stringInputs.clear();  this.yesNoCancelSelections.clear();  this.yesNoSelections.clear();  this.okCancelSelections.clear();  this.optionSelections.clear();}  }
class C{  public boolean isOutputShutdown(){  return shutOut;}  }
class C{  private void installClientDecorations(JRootPane root){  installBorder(root);  if (root.getParent() instanceof JFrame || root.getParent() instanceof JDialog) {    if (PlatformUtils.isMac()) {      makeFrameBackgroundTransparent(root);    } else {      shapeWindow(root);    }  }  JComponent titlePane=createTitlePane(root);  setTitlePane(root,titlePane);  installWindowListeners(root,root.getParent());  installLayout(root);  if (window != null) {    root.revalidate();    root.repaint();  }}  }
class C{  public char nextToken(){  final char nextChar=getChar(currentCharPointer);  currentCharPointer++;  return nextChar;}  }
class C{  protected BestMatchFinder(String pattern){  searchPattern=pattern.toLowerCase();}  }
class C{  public void alignVertical(){  double min=Double.MAX_VALUE;  for (  Neuron neuron : getSelectedModelNeurons()) {    if (neuron.getX() < min) {      min=neuron.getX();    }  }  for (  Neuron neuron : getSelectedModelNeurons()) {    neuron.setX(min);  }  repaint();}  }
class C{  @Deprecated public void testBug8484() throws Exception {  createTable("testBug8484","(field1 DECIMAL(16, 8), field2 varchar(32))");  this.stmt.executeUpdate("INSERT INTO testBug8484 VALUES (12345678.12345678, '')");  this.rs=this.stmt.executeQuery("SELECT field1, field2 FROM testBug8484");  this.rs.next();  assertEquals("12345678.123",this.rs.getBigDecimal(1,3).toString());  assertEquals("0.000",this.rs.getBigDecimal(2,3).toString());  this.pstmt=this.conn.prepareStatement("SELECT field1, field2 FROM testBug8484");  this.rs=this.pstmt.executeQuery();  this.rs.next();  assertEquals("12345678.123",this.rs.getBigDecimal(1,3).toString());  assertEquals("0.000",this.rs.getBigDecimal(2,3).toString());}  }
class C{  public boolean isEditing(){  TreeUI tree=getUI();  if (tree != null)   return tree.isEditing(this);  return false;}  }
class C{  public DNSName(DerValue derValue) throws IOException {  name=derValue.getIA5String();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static char toChar(byte[] bytes,int index){  return (char)((bytes[index + 1] << 8) | (bytes[index] & 0xff));}  }
class C{  public SDKConnection(Credentials credentials){  this.credentials=credentials;  this.url=credentials.url;}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  protected boolean isSimpleHostName(String url){  for (int i=0; i < url.length(); i++) {    char c=url.charAt(i);    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')|| (c == '-')) {      continue;    }    return false;  }  return true;}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Crossfader withPanelSlideListener(SlidingPaneLayout.PanelSlideListener panelSlideListener){  this.mPanelSlideListener=panelSlideListener;  if (mCrossFadeSlidingPaneLayout != null) {    mCrossFadeSlidingPaneLayout.setPanelSlideListener(mPanelSlideListener);  }  return this;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean addDistinct(final IBindingSet bset){  final Key key=makeKey(bset);  assert key != null;  Bucket b=map.get(key);  if (b == null) {    map.put(key,b=new Bucket(key.hash,bset));    return true;  } else {    if (b.addDistinct(bset)) {      return true;    }    return false;  }}  }
class C{  private boolean isAllowedAsForeignMarkup(String tagname,CleanTimeValues cleanTimeValues){  if (!properties.isNamespacesAware())   return false;  if (tagname == null)   return false;  if (tagname.contains(":"))   return true;  if (cleanTimeValues.namespace == null || cleanTimeValues.namespace.size() == 0)   return false;  String ns=cleanTimeValues.namespace.peek();  if (ns == null)   return false;  if (ns.equals("http://www.w3.org/1999/xhtml"))   return false;  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  Attr newAttribute1;  String attrValue;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("namespaceURI","root");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");  newAttribute1=element.setAttributeNodeNS(attribute);  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");  attrValue=attribute.getNodeValue();  assertEquals("elementgetattributenodens02","",attrValue);}  }
class C{  public static String format(String format,Object[] objs){  String[] strings=new String[objs.length];  for (int i=0; i < objs.length; i++) {    Object obj=objs[i];    if (obj == null) {      strings[i]="null";    } else {      try {        strings[i]=obj.toString();      } catch (      Exception ex) {        strings[i]=obj.getClass().getName() + "@" + System.identityHashCode(obj);      }    }  }  return java.text.MessageFormat.format(format,(Object[])strings);}  }
class C{  private void testRange(int precisionStep) throws Exception {  String field="field" + precisionStep;  int count=3000;  long lower=(distance * 3 / 2) + startOffset, upper=lower + count * distance + (distance / 3);  LegacyNumericRangeQuery<Long> q=LegacyNumericRangeQuery.newLongRange(field,precisionStep,lower,upper,true,true);  for (byte i=0; i < 2; i++) {    TopDocs topDocs;    String type;switch (i) {case 0:      type=" (constant score filter rewrite)";    q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  topDocs=searcher.search(q,noDocs,Sort.INDEXORDER);break;case 1:type=" (constant score boolean rewrite)";q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);topDocs=searcher.search(q,noDocs,Sort.INDEXORDER);break;default :return;}ScoreDoc[] sd=topDocs.scoreDocs;assertNotNull(sd);assertEquals("Score doc count" + type,count,sd.length);Document doc=searcher.doc(sd[0].doc);assertEquals("First doc" + type,2 * distance + startOffset,doc.getField(field).numericValue().longValue());doc=searcher.doc(sd[sd.length - 1].doc);assertEquals("Last doc" + type,(1 + count) * distance + startOffset,doc.getField(field).numericValue().longValue());}}  }
class C{  public BigDecimal decrypt(BigDecimal value){  return value;}  }
class C{  private static boolean hasValueNode(Element node){  for (int i=0; i < node.getChildCount(); i++) {    if (node.isText(i))     continue;    Element child=node.getElement(i);    if (child.getName().equalsIgnoreCase(NODE_VALUE))     return true;  }  return false;}  }
class C{  private synchronized void addProvider(String tenantName,IIdentityStoreData idsData) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(idsData,"Identity store configuration");    if (idsData.getDomainType() == DomainType.EXTERNAL_DOMAIN && idsData.getExtendedIdentityStoreData() != null) {      if (idsData.getExtendedIdentityStoreData().getAuthenticationType() == AuthenticationType.SRP) {        throw new InvalidArgumentException("AuthenticationType.SRP is not allowed for EXTERNAL_DOMAIN.");      }      String adIDP=findIdpTypeRegistered(tenantName,IdentityStoreType.IDENTITY_STORE_TYPE_ACTIVE_DIRECTORY);      ActiveDirectoryJoinInfo machineJoinInfo=IdmDomainState.getInstance().getDomainJoinInfo();      if (adIDP != null && machineJoinInfo == null) {        throw new IllegalStateException("A native active directory is configued with SSO, however, machine is not currently joined.");      }      if (idsData.getExtendedIdentityStoreData().getProviderType() == IdentityStoreType.IDENTITY_STORE_TYPE_ACTIVE_DIRECTORY && idsData.getExtendedIdentityStoreData().getAuthenticationType() == AuthenticationType.USE_KERBEROS) {        if (adIDP != null && machineJoinInfo != null) {          logger.error("There is already one nativeAD [%s] registered",adIDP);          throw new ADIDSAlreadyExistException(machineJoinInfo.getName());        }        String adLdapIDPName=findIdpTypeRegisteredWithName(tenantName,IdentityStoreType.IDENTITY_STORE_TYPE_LDAP_WITH_AD_MAPPING,machineJoinInfo.getName());        if (adLdapIDPName != null) {          logger.error(String.format("There is already one AD-Over-LDAP [%s] registered",adLdapIDPName));          throw new ADIDSAlreadyExistException(adLdapIDPName);        }        idsData=checkAndNormalizeAdIdStore(idsData);      } else {        ValidateUtil.validateIdsDomainNameNAlias(idsData);        if (adIDP != null && machineJoinInfo != null && idsData.getName().equalsIgnoreCase(machineJoinInfo.getName())) {          logger.error("There is already one nativeAD [%s] registered",adIDP);          throw new ADIDSAlreadyExistException(machineJoinInfo.getName());        }        ValidateUtil.validateIdsUserNameAndBaseDN(idsData);        ValidateUtil.validateNotNull(idsData.getExtendedIdentityStoreData(),"idsData.getExtendedIdentityStoreData()");        ValidateUtil.validateNotNull(idsData.getExtendedIdentityStoreData().getConnectionStrings(),"idsData.getExtendedIdentityStoreData().getConnectionStrings()");        if (idsData.getExtendedIdentityStoreData().getConnectionStrings().size() < 1) {          throw new InvalidArgumentException("There must be at least 1 connection string provided.");        }        try {          probeProviderConnectivity(tenantName,idsData);        } catch (        Exception ex) {          logger.error(String.format("Failed to pass connection test for [%s]",tenantName));          throw ex;        }      }    }    _configStore.addProvider(tenantName,idsData);    _tenantCache.deleteTenant(tenantName);  } catch (  Exception ex) {    logger.error(String.format("Failed to add identity provider for tenant [%s]",tenantName));    throw ex;  }}  }
class C{  public TextProperty(String value){  super(value);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:19.763 -0500",hash_original_method="148392FC8CA03B9EFECB202A68AE28AE",hash_generated_method="CE0EE09920B5212A4945C1129DC818D5") @Override public void changeCursor(Cursor c){  if (DBG)   Log.d(LOG_TAG,"changeCursor(" + c + ")");  if (mClosed) {    Log.w(LOG_TAG,"Tried to change cursor after adapter was closed.");    if (c != null)     c.close();    return;  }  try {    super.changeCursor(c);    if (c != null) {      mText1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);      mText2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);      mText2UrlCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);      mIconName1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);      mIconName2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);      mFlagsCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"error changing cursor and caching columns",e);  }}  }
class C{  public Key delMax(){  if (isEmpty())   throw new NoSuchElementException("Priority queue underflow");  Key max=pq[1];  exch(1,n--);  sink(1);  pq[n + 1]=null;  if ((n > 0) && (n == (pq.length - 1) / 4))   resize(pq.length / 2);  assert isMaxHeap();  return max;}  }
class C{  boolean verifyString(String str){  if ((str.length() > maxLength) || (str.length() < minLength)) {    return false;  }  int i=0;  Enumeration e=formatConstraints.elements();  if (!str.equals("")) {    char c=str.charAt(i);    for (; e.hasMoreElements(); ) {      FormatConstraint constraint=(FormatConstraint)e.nextElement();      if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {        if (!verifyChar(c,constraint.type)) {          return false;        }        i++;        if (i < str.length()) {          c=str.charAt(i);        } else {          break;        }      } else {        int charNum=0;        while ((i < str.length()) && (charNum < constraint.count)) {          if (!verifyChar(c,constraint.type)) {            break;          }          i++;          charNum++;          if (i < str.length()) {            c=str.charAt(i);          } else {            break;          }        }        if (i >= str.length()) {          break;        }      }    }    if (i < str.length()) {      return false;    }  }  while (e.hasMoreElements()) {    FormatConstraint constraint=(FormatConstraint)e.nextElement();    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {      return false;    }  }  return true;}  }
class C{  private RegressionCovariance(CorrelationMatrix correlations,TetradVector standardDeviations,TetradVector means){  if (correlations == null) {    throw new NullPointerException();  }  if (standardDeviations == null || standardDeviations.size() != correlations.getDimension()) {    throw new IllegalArgumentException();  }  if (means != null && means.size() != correlations.getDimension()) {    throw new IllegalArgumentException();  }  this.correlations=correlations;  this.sd=standardDeviations;  this.means=means;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoRepRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_type = ").append(m_type);  buffer.append(", m_info = ").append(m_info);  buffer.append(", m_stat = ").append(m_stat);  buffer.append("]");  return buffer.toString();}  }
class C{  private Object invokeRemoteMethod(Object proxy,Method method,Object[] args) throws Exception {  try {    if (!(proxy instanceof Remote)) {      throw new IllegalArgumentException("proxy not Remote instance");    }    return ref.invoke((Remote)proxy,method,args,getMethodHash(method));  } catch (  Exception e) {    if (!(e instanceof RuntimeException)) {      Class<?> cl=proxy.getClass();      try {        method=cl.getMethod(method.getName(),method.getParameterTypes());      } catch (      NoSuchMethodException nsme) {        throw (IllegalArgumentException)new IllegalArgumentException().initCause(nsme);      }      Class<?> thrownType=e.getClass();      for (      Class<?> declaredType : method.getExceptionTypes()) {        if (declaredType.isAssignableFrom(thrownType)) {          throw e;        }      }      e=new UnexpectedException("unexpected exception",e);    }    throw e;  }}  }
class C{  private Expression compileUnary(UnaryOperation unary,int opPos) throws TransformerException {  int rightPos=getFirstChildPos(opPos);  unary.setRight(compile(rightPos));  return unary;}  }
class C{  public void testReplicationEvents() throws Exception {  Serializer serializer=new ProtobufSerializer();  LogFile tfrw=LogHelper.createLogFile("testReplicationEvents.dat",3);  Timestamp now=new Timestamp(System.currentTimeMillis());  ReplDBMSEvent replEvent=new ReplDBMSEvent(31,(short)2,true,"unittest",1,now,new DBMSEvent());  THLEvent inputEvent=new THLEvent("dummy",replEvent);  LogEventReplWriter writer=new LogEventReplWriter(inputEvent,serializer,true,null);  LogRecord logRec=writer.write();  tfrw.writeRecord(logRec,10000);  tfrw.close();  LogFile tfro=LogHelper.openExistingFileForRead("testReplicationEvents.dat");  LogRecord logRec2=tfro.readRecord(0);  LogEventReplReader reader=new LogEventReplReader(logRec2,serializer,true);  THLEvent outputEvent=reader.deserializeEvent();  reader.done();  assertEquals("Checking recordType",LogRecord.EVENT_REPL,reader.getRecordType());  assertEquals("Checking setno",31,reader.getSeqno());  assertEquals("Checking fragment",2,reader.getFragno());  assertEquals("Checking last frag",true,reader.isLastFrag());  assertEquals("Checking epoch",1,reader.getEpochNumber());  assertEquals("Checking sourceId","unittest",reader.getSourceId());  assertEquals("Checking eventId","dummy",reader.getEventId());  assertEquals("Checking shardId","#UNKNOWN",reader.getShardId());  assertEquals("Checking source tstamp",inputEvent.getSourceTstamp(),new Timestamp(reader.getSourceTStamp()));  assertNotNull("Event deserialized",outputEvent);  assertEquals("Event seqno",inputEvent.getSeqno(),outputEvent.getSeqno());  tfro.close();}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void assertAnnotations(IonValue actual,String... expectedAnns){  String[] actualAnns=actual.getTypeAnnotations();  assertArrayEquals("Ion annotations",expectedAnns,actualAnns);}  }
class C{  public int size(){  processQueue();  return hash.size();}  }
class C{  private void readContent(){  while (true) {    try {      Socket connection=local.accept();      InputStream in=connection.getInputStream();      MessageType type=MessageType.values()[in.read()];      ByteArrayOutputStream out=new ByteArrayOutputStream();      int n;      byte[] buffer=new byte[1024 * 4];      while (-1 != (n=in.read(buffer))) {        out.write(buffer,0,n);      }      byte[] message=out.toByteArray();      if (type == MessageType.INIT) {        String content=new String(message);        String ip=content.split(":")[0];        int port=Integer.parseInt(content.split(":")[1]);        log.fine("Connected to " + ip + ":"+ port);        system.displayComment("Connected to " + ip + ":"+ port);        system.getSettings().remoteConnections.put(ip,port);        if (system.getSettings().showGUI) {          system.getModule(GUIFrame.class).enableSpeech(true);          system.getModule(GUIFrame.class).getMenu().update();        }      } else       if (type == MessageType.XML) {        String content=new String(message);        Document doc=XMLUtils.loadXMLFromString(content);        BNetwork nodes=XMLStateReader.getBayesianNetwork(XMLUtils.getMainNode(doc));        skipNextTrigger=true;        system.addContent(nodes);      } else       if (type == MessageType.MISC) {        String content=new String(message);        log.fine("received message: " + content);      } else       if (type == MessageType.STREAM) {        SpeechData output=new SpeechData(message);        system.addContent(new Assignment(system.getSettings().systemSpeech,output));      } else       if (type == MessageType.CLOSE) {        String content=new String(message);        log.fine("Disconnecting from " + content);        system.displayComment("Disconnecting from " + content);        String ip=content.split(":")[0];        system.getSettings().remoteConnections.remove(ip);      }      Thread.sleep(100);    } catch (    IOException|InterruptedException|ParserConfigurationException|SAXException|RuntimeException e) {      e.printStackTrace();    }  }}  }
class C{  public static boolean isWindowsAutoConfiguredIPv4Address(InetAddress add){  return (add.getAddress()[0] & 0xFF) == 169 && (add.getAddress()[1] & 0xFF) == 254;}  }
class C{  public GDSException(int fbErrorCode,Throwable cause){  this(fbErrorCode);  initCause(cause);}  }
class C{  @Deprecated @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{pid}/activate") public TaskResourceRep activateFullCopy(@PathParam("id") URI id,@PathParam("pid") URI fullCopyId) throws InternalException {  return getFullCopyManager().activateFullCopy(id,fullCopyId).getTaskList().get(0);}  }
class C{  public static OpenIndexRequest openIndexRequest(String index){  return new OpenIndexRequest(index);}  }
class C{  public BufferedRandomAccessFile(File file,String mode) throws IOException {  super(file,mode);  this.init();}  }
class C{  public GridClientException(Throwable cause){  super(cause);}  }
class C{  public boolean configureSpliceTo(DefaultTrackOutput nextQueue){  if (spliceOutTimeUs != Long.MIN_VALUE) {    return true;  }  long firstPossibleSpliceTime;  if (rollingBuffer.peekSample(sampleInfoHolder)) {    firstPossibleSpliceTime=sampleInfoHolder.timeUs;  } else {    firstPossibleSpliceTime=lastReadTimeUs + 1;  }  RollingSampleBuffer nextRollingBuffer=nextQueue.rollingBuffer;  while (nextRollingBuffer.peekSample(sampleInfoHolder) && (sampleInfoHolder.timeUs < firstPossibleSpliceTime || !sampleInfoHolder.isSyncFrame())) {    nextRollingBuffer.skipSample();  }  if (nextRollingBuffer.peekSample(sampleInfoHolder)) {    spliceOutTimeUs=sampleInfoHolder.timeUs;    return true;  }  return false;}  }
class C{  public void clear(){  mCategories.clear();  mTitles.clear();  mValues.clear();}  }
class C{  private void resize(int c){  int[] newItems=new int[c];  for (int i=0; i < items.length; i+=1) {    newItems[i]=items[i];  }  items=newItems;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.REGULAR_EVENT_SPEC__EVENT:    return basicSetEvent(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected String buildCreateSchemaStatement() throws ReplicatorException {  return null;}  }
class C{  public Boolean isCertfctnBrkdwnInd(){  return certfctnBrkdwnInd;}  }
class C{  protected void tearDown(){  hs=null;  objArray=null;}  }
class C{  public ADialogDialog(Dialog dialog,String title,String message,int messageType){  super(dialog,title,dialog != null);  common(message,messageType);  AEnv.showCenterWindow(dialog,this);}  }
class C{  public static String[] split(String str,String delimiter){  List<String> result=new ArrayList<String>();  int lastIndex=0;  int index=str.indexOf(delimiter);  while (index != -1) {    result.add(str.substring(lastIndex,index));    lastIndex=index + delimiter.length();    index=str.indexOf(delimiter,index + delimiter.length());  }  result.add(str.substring(lastIndex,str.length()));  return ArrayUtil.toArray(result,String.class);}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  public void removeAllErrorCallbacks(){  errorCallbacks.clear();}  }
class C{  public UnitResults convertJUnit(TestResult jUnitResults){  UnitResults results=new UnitResults();  if (jUnitResults == null) {    return results;  }  for (  SuiteResult sr : jUnitResults.getSuites()) {    for (    CaseResult cr : sr.getCases()) {      UnitResult result=new UnitResult(cr.getClassName(),cr.getDisplayName(),cr.getErrorStackTrace(),cr.getDuration(),cr.getFailCount(),cr.getSkipCount(),cr.getPassCount());      results.add(result);    }  }  return results;}  }
class C{  public boolean empty(){  return vstack.empty();}  }
class C{  void focusWheel(){  setFocusType(1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.587 -0500",hash_original_method="7CD87B9188FFFCA76A5FF9BDC65CF37F",hash_generated_method="9D36B23A9DD5456E4D487349E266FDAC") public String toShortString(){  return "{" + mPackage + "/"+ mClass+ "}";}  }
class C{  public static boolean lazyGaussianElimination(final int var2Eq[][],final long[] c,final int[] variable,final long[] solution){  return lazyGaussianElimination(null,var2Eq,c,variable,solution);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof Destination);}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public static SparseBitmap createFromUnsortedData(final int... bitsToSet){  Arrays.sort(bitsToSet);  return new SparseBitmap(EWAHCompressedBitmap.bitmapOf(bitsToSet));}  }
class C{  public Anonymous_multipleIsA_1_ createAnonymous_multipleIsA_1_(){  Anonymous_multipleIsA_1_Impl anonymous_multipleIsA_1_=new Anonymous_multipleIsA_1_Impl();  return anonymous_multipleIsA_1_;}  }
class C{  @SuppressWarnings("deprecation") @Override public void onSuccess(int statusCode,Header[] headers,String responseBody){  onSuccess(statusCode,responseBody);}  }
class C{  private IgfsException handleSecondaryFsError(IOException e,String msg){  if (e instanceof FileNotFoundException)   return new IgfsPathNotFoundException(e); else   return new IgfsException(msg,e);}  }
class C{  private Icon createArrowIcon(boolean etched){  BufferedImage image=new BufferedImage(16,16,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=image.createGraphics();  Color highLight, shadow;  Style style=StyleUtil.getStyle();  if (style != null) {    highLight=style.getHighLightColor();    shadow=style.getShadowColor();  } else {    highLight=Color.WHITE;    shadow=Color.BLACK;  }  Color nwColor, seColor;  if (etched) {    nwColor=shadow;    seColor=highLight;  } else {    nwColor=highLight;    seColor=shadow;  }  g.setColor(nwColor);  g.drawPolyline(new int[]{7,0,13},new int[]{11,4,4},3);  g.setColor(seColor);  g.drawLine(7,11,14,4);  g.dispose();  return new ImageIcon(image);}  }
class C{  public Attribute createAttribute(){  AttributeImpl attribute=new AttributeImpl();  return attribute;}  }
class C{  private boolean isHoneycombOrHigher(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    return true;  }  return false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TickUnits)) {    return false;  }  TickUnits that=(TickUnits)obj;  return that.tickUnits.equals(this.tickUnits);}  }
class C{  public void createOffscreenSurface(int width,int height){  if (mEGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  mEGLSurface=mEglCore.createOffscreenSurface(width,height);  mWidth=width;  mHeight=height;}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  while (true) {    NBT_Tag tag=NBT_Tag.make(stream);    if (tag.ID() == 0)     return;    elements.add(tag);  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof FrequentItemSet) {    return (this.compareTo((FrequentItemSet)o) == 0);  }  return false;}  }
class C{  @Override protected List<Double> computeRelatedness(Page page1,Page page2) throws WikiApiException {  List<Double> relatednessValues=new ArrayList<Double>();  Set<Category> categories1=relatednessUtilities.getCategories(page1);  Set<Category> categories2=relatednessUtilities.getCategories(page2);  if (categories1 == null || categories2 == null) {    return null;  }  Category root=wiki.getMetaData().getMainCategory();  if (!catGraph.getGraph().containsVertex(root.getPageId())) {    logger.error("The root node is not part of this graph. Cannot compute Lin relatedness.");    return null;  }  for (  Category cat1 : categories1) {    for (    Category cat2 : categories2) {      Category lcs=catGraph.getLCS(cat1,cat2);      if (lcs == null) {        continue;      }      double intrinsicIcLcs=catGraph.getIntrinsicInformationContent(lcs);      double intrinsicIcCat1=catGraph.getIntrinsicInformationContent(cat1);      double intrinsicIcCat2=catGraph.getIntrinsicInformationContent(cat2);      double relatedness=0.0;      if (intrinsicIcCat1 != 0 && intrinsicIcCat2 != 0) {        relatedness=2 * intrinsicIcLcs / (intrinsicIcCat1 + intrinsicIcCat2);      }      relatednessValues.add(relatedness);    }  }  logger.debug(relatednessValues);  return relatednessValues;}  }
class C{  public static Date evenSecondDate(Date date){  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.setLenient(true);  c.set(Calendar.SECOND,c.get(Calendar.SECOND) + 1);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public Table findTable(String name,boolean caseSensitive){  for (Iterator<Table> iter=tables.iterator(); iter.hasNext(); ) {    Table table=(Table)iter.next();    if (caseSensitive) {      if (table.getName().equals(name)) {        return table;      }    } else {      if (table.getName().equalsIgnoreCase(name)) {        return table;      }    }  }  return null;}  }
class C{  public static Runnable wrap(Runnable w){  TaskContext c=current();  if (c != null) {    return null;  }  return w;}  }
class C{  public static boolean isMask(int value,int mask){  if ((value & mask) == 0) {    return false;  }  return true;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTableUI();}  }
class C{  private Map<URI,Map<StoragePort,Long>> computeStoragePortUsageMapForPorts(URI storageUri,Map<URI,NetworkLite> networkMap,URI varrayURI,Map<NetworkLite,List<StoragePort>> storagePortsMap) throws PlacementException {  Map<URI,Map<StoragePort,Long>> result=new HashMap<URI,Map<StoragePort,Long>>();  for (  URI networkURI : networkMap.keySet()) {    NetworkLite network=networkMap.get(networkURI);    List<StoragePort> spList=storagePortsMap.get(network);    if (spList == null || spList.isEmpty()) {      throw PlacementException.exceptions.noStoragePortsInNetwork(network.getLabel());    }    if (network.getTransportType().equals(StorageProtocol.Transport.FC.name()) || network.getTransportType().equals(StorageProtocol.Transport.IP.name())) {      Map<StoragePort,Long> portUsage=computeStoragePortUsage(spList);      if (portUsage.isEmpty()) {        throw PlacementException.exceptions.noStoragePortsInNetwork(network.getLabel());      }      result.put(networkURI,portUsage);    } else {      Map<StoragePort,Long> portUsage=new HashMap<StoragePort,Long>();      for (      StoragePort sp : spList) {        portUsage.put(sp,0L);      }      result.put(networkURI,portUsage);    }  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().searchByExactArtist(getPerson(stack));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(jmri.LightManager.class)) {    return true;  }  return false;}  }
class C{  @Deprecated public void addCertificate(String tenantName,Certificate idmCert,CertificateType certificateType) throws Exception {  getService().addCertificate(tenantName,idmCert,certificateType,this.getServiceContext());}  }
class C{  public String buildLocalFilePath(int x,int y,int z,String fileExt){  if (localTilePathBuilder == null) {    localTilePathBuilder=new TilePathBuilder(localCacheDir);  }  return localTilePathBuilder.buildTilePath(x,y,z,fileExt);}  }
class C{  public PostProcessor(int fboWidth,int fboHeight,boolean useDepth,boolean useAlphaChannel,boolean use32Bits,TextureWrap u,TextureWrap v){  if (use32Bits) {    if (useAlphaChannel) {      fbFormat=Format.RGBA8888;    } else {      fbFormat=Format.RGB888;    }  } else {    if (useAlphaChannel) {      fbFormat=Format.RGBA4444;    } else {      fbFormat=Format.RGB565;    }  }  composite=newPingPongBuffer(fboWidth,fboHeight,fbFormat,useDepth);  setBufferTextureWrap(u,v);  pipelineState=new PipelineState();  capturing=false;  hasCaptured=false;  enabled=true;  this.useDepth=useDepth;  if (useDepth) {    clearBits|=GL20.GL_DEPTH_BUFFER_BIT;  }  setViewport(null);}  }
class C{  public static double propabilityForMeanExp(final long mean){  if (mean == 0) {    return 1;  }  double meandouble=mean;  return 1d / meandouble;}  }
class C{  public void clearScheduledSyncOperations(Account account,int userId,String authority){synchronized (mSyncQueue) {    mSyncQueue.remove(account,userId,authority);  }  mSyncStorageEngine.setBackoff(account,userId,authority,SyncStorageEngine.NOT_IN_BACKOFF_MODE,SyncStorageEngine.NOT_IN_BACKOFF_MODE);}  }
class C{  public void addMessage(Localizable pattern,Object... arguments){  msgPatterns.add(pattern);  msgArguments.add(ArgUtils.flatten(arguments));}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  protected CustomToolBar createMainToolBar(){  CustomToolBar mainTools=new CustomToolBar();  for (  Action action : actionManager.getNetworkModeActions()) {    mainTools.add(action);  }  mainTools.addSeparator();  mainTools.add(actionManager.getSetAutoZoomToggleButton());  return mainTools;}  }
class C{  private void scanForward(final int repcount,long delta){  if (musicPlaybackService == null) {    return;  }  if (repcount == 0) {    mStartSeekPos=MusicUtils.position();    mLastSeekEventTime=0;  } else {    if (delta < 5000) {      delta=delta * 10;    } else {      delta=50000 + (delta - 5000) * 40;    }    long newpos=mStartSeekPos + delta;    final long duration=MusicUtils.duration();    if (newpos >= duration) {      MusicUtils.next();      mStartSeekPos-=duration;      newpos-=duration;    }    if (delta - mLastSeekEventTime > 250 || repcount < 0) {      MusicUtils.seek(newpos);      mLastSeekEventTime=delta;    }    if (repcount >= 0) {      mPosOverride=newpos;    } else {      mPosOverride=-1;    }    refreshCurrentTime();  }}  }
class C{  private int findNextUnreservedRopReg(int startReg,int width){  int reg;  reg=reservedRopRegs.nextClearBit(startReg);  while (true) {    int i=1;    while (i < width && !reservedRopRegs.get(reg + i)) {      i++;    }    if (i == width) {      return reg;    }    reg=reservedRopRegs.nextClearBit(reg + i);  }}  }
class C{  public static List<Number> findIndexValues(Object self,Number startIndex,Closure closure){  List<Number> result=new ArrayList<Number>();  long count=0;  long startCount=startIndex.longValue();  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); count++) {    Object value=iter.next();    if (count < startCount) {      continue;    }    if (bcw.call(value)) {      result.add(count);    }  }  return result;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenArchHdr[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_tblPrefix = ").append(m_tblPrefix);  buffer.append(", m_flags = ").append(m_flags);  buffer.append(", m_accessType = ").append(m_accessType);  buffer.append(", m_acsId = ").append(m_acsId);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void launchNavigation(Context context,double latitude,double longitude){  Intent intent=createLaunchNavigationIntent(latitude,longitude);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  public Key delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  Node min=eraseMin();  Node x=(min.child == null) ? min : min.child;  if (min.child != null) {    min.child=null;    Node prevx=null, nextx=x.sibling;    while (nextx != null) {      x.sibling=prevx;      prevx=x;      x=nextx;      nextx=nextx.sibling;    }    x.sibling=prevx;    BinomialMinPQ<Key> H=new BinomialMinPQ<Key>();    H.head=x;    head=union(H).head;  }  return min.key;}  }
class C{  @Override public void close(){  appDataValid=false;  isClosed=true;  mark=0;  pos=0;  count=0;}  }
class C{  Geometry[] createRectangles(Envelope env,int nRect,double rectSize){  int nSide=1 + (int)Math.sqrt((double)nRect);  double dx=env.getWidth() / nSide;  double dy=env.getHeight() / nSide;  List rectList=new ArrayList();  for (int i=0; i < nSide; i++) {    for (int j=0; j < nSide; j++) {      double baseX=env.getMinX() + i * dx;      double baseY=env.getMinY() + j * dy;      Envelope envRect=new Envelope(baseX,baseX + dx,baseY,baseY + dy);      Geometry rect=fact.toGeometry(envRect);      rectList.add(rect);    }  }  return GeometryFactory.toGeometryArray(rectList);}  }
class C{  public CResolveAllFunctionsSingleModuleAction(final JComponent parent,final IDatabase database,final INaviModule module){  super("Resolve all imported functions");  m_parent=Preconditions.checkNotNull(parent,"IE01915: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01916: Database argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE02341: module argument can not be null");}  }
class C{  @Override protected void free(Bitmap value){  Preconditions.checkNotNull(value);  value.recycle();}  }
class C{  public void add(DBIDRef cur,double distance,DBIDRef par){  if (distance < prevdist) {    LOG.warning("Non-monotone hierarchical clustering detected. Adjusting linking distance from " + distance + " to "+ prevdist);    distance=prevdist;  }  parent.putDBID(cur,par);  double olddist=parentDistance.putDouble(cur,distance);  assert (olddist == Double.POSITIVE_INFINITY) : "Object was already linked!";  prevdist=distance;}  }
class C{  static BitSet bitSetFromLabelList(BasicBlockList blocks,IntList labelList){  BitSet result=new BitSet(blocks.size());  for (int i=0, sz=labelList.size(); i < sz; i++) {    result.set(blocks.indexOfLabel(labelList.get(i)));  }  return result;}  }
class C{  AlignmentImpl(boolean allowBackwardShift,@NotNull Anchor anchor){  myAllowBackwardShift=allowBackwardShift;  myAnchor=anchor;}  }
class C{  public static MultiMatchQueryBuilder multiMatchQuery(Object text,String... fieldNames){  return new MultiMatchQueryBuilder(text,fieldNames);}  }
class C{  public void onNavigationEvent(int navigationEvent,Bundle extras){}  }
class C{  public ConnectionImpl(String hostToConnectTo,int portToConnectTo,Properties info,String databaseToConnectTo,String url) throws SQLException {  this.connectionCreationTimeMillis=System.currentTimeMillis();  if (databaseToConnectTo == null) {    databaseToConnectTo="";  }  this.origHostToConnectTo=hostToConnectTo;  this.origPortToConnectTo=portToConnectTo;  this.origDatabaseToConnectTo=databaseToConnectTo;  try {    Blob.class.getMethod("truncate",new Class[]{Long.TYPE});    this.isRunningOnJDK13=false;  } catch (  NoSuchMethodException nsme) {    this.isRunningOnJDK13=true;  }  this.sessionCalendar=new GregorianCalendar();  this.utcCalendar=new GregorianCalendar();  this.utcCalendar.setTimeZone(TimeZone.getTimeZone("GMT"));  this.log=LogFactory.getLogger(getLogger(),LOGGER_INSTANCE_NAME,getExceptionInterceptor());  if (NonRegisteringDriver.isHostPropertiesList(hostToConnectTo)) {    Properties hostSpecificProps=NonRegisteringDriver.expandHostKeyValues(hostToConnectTo);    Enumeration<?> propertyNames=hostSpecificProps.propertyNames();    while (propertyNames.hasMoreElements()) {      String propertyName=propertyNames.nextElement().toString();      String propertyValue=hostSpecificProps.getProperty(propertyName);      info.setProperty(propertyName,propertyValue);    }  } else {    if (hostToConnectTo == null) {      this.host="localhost";      this.hostPortPair=this.host + ":" + portToConnectTo;    } else {      this.host=hostToConnectTo;      if (hostToConnectTo.indexOf(":") == -1) {        this.hostPortPair=this.host + ":" + portToConnectTo;      } else {        this.hostPortPair=this.host;      }    }  }  this.port=portToConnectTo;  this.database=databaseToConnectTo;  this.myURL=url;  this.user=info.getProperty(NonRegisteringDriver.USER_PROPERTY_KEY);  this.password=info.getProperty(NonRegisteringDriver.PASSWORD_PROPERTY_KEY);  if ((this.user == null) || this.user.equals("")) {    this.user="";  }  if (this.password == null) {    this.password="";  }  this.props=info;  initializeDriverProperties(info);  this.defaultTimeZone=TimeUtil.getDefaultTimeZone(getCacheDefaultTimezone());  this.isClientTzUTC=!this.defaultTimeZone.useDaylightTime() && this.defaultTimeZone.getRawOffset() == 0;  if (getUseUsageAdvisor()) {    this.pointOfOrigin=LogUtils.findCallingClassAndMethod(new Throwable());  } else {    this.pointOfOrigin="";  }  try {    this.dbmd=getMetaData(false,false);    initializeSafeStatementInterceptors();    createNewIO(false);    unSafeStatementInterceptors();  } catch (  SQLException ex) {    cleanup(ex);    throw ex;  }catch (  Exception ex) {    cleanup(ex);    StringBuilder mesg=new StringBuilder(128);    if (!getParanoid()) {      mesg.append("Cannot connect to MySQL server on ");      mesg.append(this.host);      mesg.append(":");      mesg.append(this.port);      mesg.append(".\n\n");      mesg.append("Make sure that there is a MySQL server ");      mesg.append("running on the machine/port you are trying ");      mesg.append("to connect to and that the machine this software is running on ");      mesg.append("is able to connect to this host/port (i.e. not firewalled). ");      mesg.append("Also make sure that the server has not been started with the --skip-networking ");      mesg.append("flag.\n\n");    } else {      mesg.append("Unable to connect to database.");    }    SQLException sqlEx=SQLError.createSQLException(mesg.toString(),SQLError.SQL_STATE_COMMUNICATION_LINK_FAILURE,getExceptionInterceptor());    sqlEx.initCause(ex);    throw sqlEx;  }  NonRegisteringDriver.trackConnection(this);}  }
class C{  public DefaultDnDCatcher(){  this(new DragSource());}  }
class C{  public void keyPressed(KeyEvent e){  int keyValue=e.getKeyCode();  inputTextComponent=(JTextComponent)e.getSource();  prevCaretPos=caretPos;switch (keyValue) {case KeyEvent.VK_ENTER:    break;case KeyEvent.VK_LEFT:  break;case KeyEvent.VK_RIGHT:break;case KeyEvent.VK_UP:break;case KeyEvent.VK_DOWN:break;case KeyEvent.VK_F1:break;case KeyEvent.VK_ESCAPE:break;default :caretPos=inputTextComponent.getCaretPosition();}}  }
class C{  public List<GenericValue> findAllByPrimaryKeys(List<GenericPK> primaryKeys) throws GenericEntityException {  if (primaryKeys == null)   return null;  List<GenericValue> results=new LinkedList<GenericValue>();  for (  GenericPK primaryKey : primaryKeys) {    GenericValue result=this.findByPrimaryKey(primaryKey);    if (result != null)     results.add(result);  }  return results;}  }
class C{  @Override public void onDisable(){  if (playerManager != null) {    playerManager.dispose();  }  UltraCosmeticsData.get().getVersionManager().getModule().disable();  BlockUtils.forceRestore();}  }
class C{  public Matrix4x3f normalize3x3(){  return normalize3x3(this);}  }
class C{  private boolean checkStrategyOptionsForGeo(Map<String,String> strategyOptions){  if (onStandby) {    _log.info("Only active site updates geo strategy operation. Do nothing on standby site");    return false;  }  if (!isGeoDbsvc()) {    if (!drUtil.isMultivdc()) {      return false;    }    if (backCompatPreYoda) {      _log.info("Upgraded from preyoda release. Keep db strategy options unchanged.");      return false;    }    if (!strategyOptions.containsKey(_vdcShortId)) {      strategyOptions.clear();      _log.info("Add {} to strategy options",_vdcShortId);      strategyOptions.put(_vdcShortId,Integer.toString(getReplicationFactor()));      return true;    }    return false;  }  _log.debug("vdcList = {}",_vdcList);  if (_vdcList.size() == 1 && !_vdcList.contains(_vdcShortId)) {    strategyOptions.clear();  }  boolean isDrConfig=drUtil.listSites().size() > 1;  if (_vdcList.size() == 1 && strategyOptions.size() > 1 && !isDrConfig) {    strategyOptions.clear();  }  String dcName=_vdcShortId;  Site currentSite=null;  try {    currentSite=drUtil.getLocalSite();  } catch (  Exception e) {  }  if (currentSite != null) {    dcName=drUtil.getCassandraDcId(currentSite);  }  if (strategyOptions.containsKey(dcName)) {    return false;  }  _log.info("Add {} to strategy options",dcName);  strategyOptions.put(dcName,Integer.toString(getReplicationFactor()));  return true;}  }
class C{  public ChartPanel(JFreeChart chart,boolean properties,boolean save,boolean print,boolean zoom,boolean tooltips){  this(chart,DEFAULT_WIDTH,DEFAULT_HEIGHT,DEFAULT_MINIMUM_DRAW_WIDTH,DEFAULT_MINIMUM_DRAW_HEIGHT,DEFAULT_MAXIMUM_DRAW_WIDTH,DEFAULT_MAXIMUM_DRAW_HEIGHT,DEFAULT_BUFFER_USED,properties,save,print,zoom,tooltips);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ERROR_CODE;case 2:  return MESSAGE;default :return null;}}  }
class C{  public HttpException(final String message){  super(message);  cause=null;}  }
class C{  public ScaleChangeEvent(XHTMLPanel pane,double scale){  super();  this.pane=pane;  this.scale=scale;}  }
class C{  public SerialMessage(int value){  super(3);  setOpCode(0xFE);  putAsWord(value);  setTimeout(100);}  }
class C{  public static byte[] SHA256(byte[] data){  Digest sha256=createSHA256();  sha256.update(data,0,data.length);  byte[] res=new byte[32];  sha256.doFinal(res,0);  return res;}  }
class C{  public int writeUShort(int index,int us){  this.writeByte(index,(byte)((us >> 8) & 0xff));  this.writeByte(index + 1,(byte)(us & 0xff));  return 2;}  }
class C{  public void destroy(){  nameToClassMap.clear();  urlClassPath.close();  if (DEBUG) {    System.out.println("Destroying Repository");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String filterSize="3 x 3 (1)";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=args[2].toLowerCase().replace("\u00D7","x");  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.equals("3 x 3 (1)")) {      weights=new double[]{0,-1,0,-1,4,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (2)")) {      weights=new double[]{0,-1,0,-1,5,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (3)")) {      weights=new double[]{-1,-1,-1,-1,8,-1,-1,-1,-1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (4)")) {      weights=new double[]{1,-2,1,-2,4,-2,1,-2,1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("5 x 5 (1)")) {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,17,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    } else {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,16,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ColumnInfo(final String name,final int type,final String aux){  m_name=name;  m_type=type;  m_aux=aux;}  }
class C{  protected static void verifyNameUniqueness(SelectClauseElementCompiled[] selectionList) throws ExprValidationException {  Set<String> names=new HashSet<String>();  for (  SelectClauseElementCompiled element : selectionList) {    if (element instanceof SelectClauseExprCompiledSpec) {      SelectClauseExprCompiledSpec expr=(SelectClauseExprCompiledSpec)element;      if (names.contains(expr.getAssignedName())) {        throw new ExprValidationException("Column name '" + expr.getAssignedName() + "' appears more then once in select clause");      }      names.add(expr.getAssignedName());    } else     if (element instanceof SelectClauseStreamCompiledSpec) {      SelectClauseStreamCompiledSpec stream=(SelectClauseStreamCompiledSpec)element;      if (stream.getOptionalName() == null) {        continue;      }      if (names.contains(stream.getOptionalName())) {        throw new ExprValidationException("Column name '" + stream.getOptionalName() + "' appears more then once in select clause");      }      names.add(stream.getOptionalName());    }  }}  }
class C{  public static MatteBorder createMatteBorder(int top,int left,int bottom,int right,Color color){  return new MatteBorder(top,left,bottom,right,color);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public double min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  double min=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    min=Math.min(min,_data[_pos]);  }  return min;}  }
class C{  public BaseStatement toStatement(AST ast) throws StandardException {  parameters=ast.getParameters();  return toStatement(ast.getStatement());}  }
class C{  protected int parseDigits() throws ParseException, IOException {  int value=0;  if (current < '0' || current > '9') {    reportUnexpectedCharacterError(current);  }  do {    value=value * 10 + (current - '0');    current=reader.read();  } while (current >= '0' && current <= '9');  return value;}  }
class C{  private static String join(CharSequence delimiter,Iterable tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  public synchronized void forceNetworkCheck(){  this.apiBroker.send(new ApiBroker.ForceNetworkCheck());}  }
class C{  protected boolean isConstantAnimation(){  return true;}  }
class C{  public static CtMethod make(String src,CtClass declaring) throws CannotCompileException {  return CtNewMethod.make(src,declaring);}  }
class C{  public void paintTabbedPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public MetricFileReader(Reader reader){  super(reader,NUMBER_OF_METRICS);  setSuppressExceptions(true);}  }
class C{  public void load(File configDir,String filename){  this.config=new Configuration(new File(configDir,filename));  try {    config.load();    loadConfig();    postLoadConfig();  }  finally {    if (config.hasChanged()) {      config.save();      logger.warn("Config file %s has changed, be sure for check for updates.",filename);    }  }}  }
class C{  synchronized void rereadColumn(int columnIndex,ProgressListener listener) throws DataSetException {  if (listener != null) {    listener.setTotal(100);  }  DateFormat originalDateFormat=originalDataSourceMetaData.getDateFormat();  originalDataSourceMetaData.setDateFormat(metaData.getDateFormat());  try {    dataSet.reset();    final ColumnType columnType=metaData.getColumnMetaData(columnIndex).getType();    if (columnType == ColumnType.BINARY && !binaryMapping.containsKey(columnIndex)) {      binaryMapping.put(columnIndex,new HashSet<String>(2));    }    Map<Integer,Set<Integer>> errorCellsCopy=new HashMap<Integer,Set<Integer>>(errorCells);    errorCellsCopy.remove(columnIndex);    removeFromErrors(columnIndex);    int rowIndex=0;    while (dataSet.hasNext() && rowIndex < data.length) {      DataSetRow dataRow=dataSet.nextRow();      String[] containerRow=data[rowIndex];      if (dataRow.isMissing(columnIndex)) {        containerRow[columnIndex]=Attribute.MISSING_NOMINAL_VALUE;      } else {        readNotMissingEntry(dataRow,containerRow,columnIndex,rowIndex,columnType,errorCellsCopy);      }      if (listener != null) {        listener.setCompleted(100 * rowIndex / data.length);      }      rowIndex++;    }    errorCells=errorCellsCopy;  }  finally {    originalDataSourceMetaData.setDateFormat(originalDateFormat);  }}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  private void onCacheDataChanged(){  if (mCacheDataList.size() >= 1) {    mIconStatus=ICON_SHOW_DROP_DOWN;  } else {    mIconStatus=ICON_ABSENT;  }}  }
class C{  public int[] LUDecomposition() throws Exception {  weka.core.matrix.LUDecomposition lu=m_Matrix.lu();  if (!lu.isNonsingular()) {    throw new Exception("Matrix is singular");  }  weka.core.matrix.Matrix u=lu.getU();  weka.core.matrix.Matrix l=lu.getL();  int nr=numRows();  int nc=numColumns();  for (int i=0; i < nr; i++) {    for (int j=0; j < nc; j++) {      if (j < i) {        setElement(i,j,l.get(i,j));      } else {        setElement(i,j,u.get(i,j));      }    }  }  u=null;  l=null;  return lu.getPivot();}  }
class C{  private boolean hasNextInetSocketAddress(){  return socketAddresses != null;}  }
class C{  private void scanHexFractionAndSuffix(int pos,boolean seendigit){  radix=16;  Assert.check(reader.ch == '.');  reader.putChar(true);  skipIllegalUnderscores();  if (reader.digit(pos,16) >= 0) {    seendigit=true;    scanDigits(pos,16);  }  if (!seendigit)   lexError(pos,"invalid.hex.number"); else   scanHexExponentAndSuffix(pos);}  }
class C{  public void stop(){  pleaseStop=true;}  }
class C{  void merge(MetadataCreatorImpl other){  Preconditions.checkNotNull(other,"other");  if (other.name != null) {    this.name=other.name;  }  if (other.required != null) {    this.required=other.required;  }  if (other.visible != null) {    this.visible=other.visible;  }  if (other.virtualValue != null) {    this.virtualValue=other.virtualValue;  }  if (other.source != null) {    this.source=other.source;  }  if (other.path != null) {    this.path=other.path;  }  if (other.isMoved) {    this.isMoved=true;  }}  }
class C{  public MultipartEntity(Part[] parts,HttpParams params){  if (parts == null) {    throw new IllegalArgumentException("parts cannot be null");  }  if (params == null) {    throw new IllegalArgumentException("params cannot be null");  }  this.parts=parts;  this.params=params;}  }
class C{  public boolean containsCertificate(@NotNull String alias){  myReadLock.lock();  try {    return myKeyStore.containsAlias(alias);  } catch (  KeyStoreException e) {    LOG.error(e);    return false;  } finally {    myReadLock.unlock();  }}  }
class C{  @Override public Codebase edit(Codebase input,Map<String,String> options){  File tempDir=filesystem.getTemporaryDirectory("shell_run_");  try {    filesystem.copyDirectory(input.path(),tempDir);  } catch (  IOException e) {    throw new MoeProblem(e.getMessage());  }  try {    cmd.runCommand("bash",ImmutableList.of("-c",this.commandString),tempDir.getAbsolutePath());  } catch (  CommandRunner.CommandException e) {    throw new MoeProblem(e.getMessage());  }  return Codebase.create(tempDir,input.projectSpace(),input.expression());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  boolean queueRequestUntilServiceAvailable(Operation inboundOp,Service s,String path){  if (s != null && s.getProcessingStage() == ProcessingStage.AVAILABLE) {    return false;  }  if (isHelperServicePath(path)) {    path=UriUtils.getParentPath(path);  }  boolean waitForService=isServiceStarting(s,path);  String parentPath=UriUtils.getParentPath(path);  if (parentPath != null && !waitForService) {    Service parentService=this.findService(parentPath);    if (parentService != null) {      if (parentService.hasOption(ServiceOption.FACTORY)) {        waitForService=isServiceStarting(parentService,parentPath);        FactoryService parent=(FactoryService)parentService;        if (!inboundOp.isFromReplication() && parent.hasChildOption(ServiceOption.OWNER_SELECTION)) {          return false;        }      }      if (parentService.hasOption(ServiceOption.PERSISTENCE)) {        if (this.serviceResourceTracker.checkAndResumeService(inboundOp)) {          return true;        }      }    }  }  if (inboundOp.isFromReplication()) {    if (!isServiceAvailable(s) && inboundOp.isUpdate()) {      this.log(Level.WARNING,"Service %s is not available. Failing replication request",inboundOp.getUri().getPath());      IllegalStateException ex=new IllegalStateException("Service not found on replica");      failRequest(inboundOp,Operation.STATUS_CODE_NOT_FOUND,ServiceErrorResponse.ERROR_CODE_SERVICE_NOT_FOUND_ON_REPLICA,ex);      return true;    }  }  if (inboundOp.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_QUEUE_FOR_SERVICE_AVAILABILITY)) {    waitForService=true;  }  if (waitForService || inboundOp.isFromReplication()) {    if (inboundOp.getAction() == Action.DELETE) {      return false;    }    if (isStopping()) {      return false;    }    inboundOp.nestCompletion(null);    registerForServiceAvailability(inboundOp,path);    return true;  }  return false;}  }
class C{  public LastViewed(DateTime value){  this();  setValue(value);}  }
class C{  public GroupEntities(){}  }
class C{  private void parseCursorToResult(Cursor cursor,List<ResultSet> resultList){  int columnCount;  int columnType;  Object columnVal=null;  while (cursor.moveToNext()) {    columnCount=cursor.getColumnCount();    ResultSet result=new ResultSet();    for (int index=0; index < columnCount; ++index) {      columnType=cursor.getType(index);switch (columnType) {case Cursor.FIELD_TYPE_BLOB:        columnVal=cursor.getBlob(index);      break;case Cursor.FIELD_TYPE_FLOAT:    columnVal=cursor.getDouble(index);  break;case Cursor.FIELD_TYPE_INTEGER:columnVal=cursor.getLong(index);break;case Cursor.FIELD_TYPE_NULL:columnVal=null;break;default :columnVal=cursor.getString(index);break;}result.setValue(cursor.getColumnName(index),columnVal);}resultList.add(result);}}  }
class C{  public T caseCall(Call object){  return null;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x0DAFA58F,version=150) public int sceHttpEnableCookie(int templateId){  return 0;}  }
class C{  public void addPoint(Coord point,int pos){  points.put(pos,point);}  }
class C{  public ImagePortrayal3D(ImageIcon icon,boolean oriented,boolean opaque){  this(icon.getImage(),oriented,opaque);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    return N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:  return N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static void sinAndCos(double angle,DoubleWrapper sine,DoubleWrapper cosine){  if (USE_JDK_MATH) {    sine.value=STRICT_MATH ? StrictMath.sin(angle) : Math.sin(angle);    cosine.value=STRICT_MATH ? StrictMath.cos(angle) : Math.cos(angle);    return;  }  boolean negateResult;  if (angle < 0.0) {    angle=-angle;    negateResult=true;  } else {    negateResult=false;  }  if (angle > SIN_COS_MAX_VALUE_FOR_INT_MODULO) {    angle=remainderTwoPi(angle);    if (angle < 0.0) {      angle+=2 * Math.PI;    }  }  int index=(int)(angle * SIN_COS_INDEXER + 0.5);  double delta=(angle - index * SIN_COS_DELTA_HI) - index * SIN_COS_DELTA_LO;  index&=(SIN_COS_TABS_SIZE - 2);  double indexSin=sinTab[index];  double indexCos=cosTab[index];  double result=indexSin + delta * (indexCos + delta * (-indexSin * ONE_DIV_F2 + delta * (-indexCos * ONE_DIV_F3 + delta * indexSin * ONE_DIV_F4)));  sine.value=negateResult ? -result : result;  cosine.value=indexCos + delta * (-indexSin + delta * (-indexCos * ONE_DIV_F2 + delta * (indexSin * ONE_DIV_F3 + delta * indexCos * ONE_DIV_F4)));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildClerk(zone);}  }
class C{  @Override public InstantiatedType apply(Substitution<ReferenceType> substitution){  List<TypeArgument> argumentList=new ArrayList<>();  for (  TypeVariable variable : parameters) {    ReferenceType referenceType=substitution.get(variable);    if (referenceType == null) {      referenceType=variable;    }    argumentList.add(new ReferenceArgument(referenceType));  }  return (InstantiatedType)apply(substitution,new InstantiatedType(new GenericClassType(rawType),argumentList));}  }
class C{  public static void reportError(String message){  ToolIO.out.println(new StringBuffer(UNRECOVERABLE_ERROR).append(message).append(ERROR_POSTFIX).toString());}  }
class C{  public int compareTo(final Decode other){  return CoreUtils.nullSafeComparator(this.getDisplayName(),other.getDisplayName());}  }
class C{  private void composeByteToCharMap(){  if (charset == null || previewText == null)   return;  CharsetDecoder decoder=Charset.forName(charset).newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).replaceWith(".");  ByteBuffer bb=ByteBuffer.allocate(1);  CharBuffer cb=CharBuffer.allocate(1);  for (int i=0; i < 256; ++i) {    if (i < 0x20 || i == 0x7f) {      byteToChar[i]=(char)(160 + i);    } else {      bb.clear();      bb.put((byte)i);      bb.rewind();      cb.clear();      decoder.reset();      decoder.decode(bb,cb,true);      decoder.flush(cb);      cb.rewind();      char decoded=cb.get();      byteToChar[i]=decoded;    }  }}  }
class C{  public StringTokenizer(String str,String delim){  this(str,delim,false);}  }
class C{  @CloudUnitSecurable @RequestMapping(method=RequestMethod.PUT,value="/{id}/ports/{number}") @ResponseBody public JsonResponse publishPort(@PathVariable("id") Integer id,@PathVariable("number") String number,@RequestBody ModulePortResource request) throws ServiceException, CheckException {  request.validatePublishPort();  User user=authentificationUtils.getAuthentificatedUser();  Module module=moduleService.findById(id);  Application application=module.getApplication();  applicationEventPublisher.publishEvent(new ApplicationPendingEvent(application));  moduleService.publishPort(id,request.getPublishPort(),number,user);  applicationEventPublisher.publishEvent(new ApplicationStartEvent(application));  return new HttpOk();}  }
class C{  public boolean showCommands(){  return chatFlags != CHAT_HIDDEN;}  }
class C{  @Override public void notificationOpened(OSNotificationOpenResult openedResult){  Log.e("OneSignalExample","body: " + openedResult.notification.payload.body);  Log.e("OneSignalExample","additional data: " + openedResult.notification.payload.additionalData);}  }
class C{  public boolean addNmeaListener(GpsStatus.NmeaListener listener){  boolean result;  if (mNmeaListeners.get(listener) != null) {    return true;  }  try {    GpsStatusListenerTransport transport=new GpsStatusListenerTransport(listener);    result=mService.addGpsStatusListener(transport,mContext.getPackageName());    if (result) {      mNmeaListeners.put(listener,transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in registerGpsStatusListener: ",e);    result=false;  }  return result;}  }
class C{  public JsonArray add(double value){  values.add(valueOf(value));  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void printRows(java.util.List<TableRow> rows,PrintStream out){  if (rows != null) {    for (    TableRow row : rows) {      for (      TableCell cell : row.getF()) {        out.printf("%s, ",Data.isNull(cell.getV()) ? "null" : cell.getV().toString());      }      out.println();    }  }}  }
class C{  public void classLoaderDestroy(DynamicClassLoader loader){  EnvLoaderListener listener=_listenerRef.get();  if (listener != null)   listener.classLoaderDestroy(loader);}  }
class C{  protected void iconifyFrame(JInternalFrame f){  BasicLookAndFeel.playSound(frame,"InternalFrame.minimizeSound");  getDesktopManager().iconifyFrame(f);}  }
class C{  public static long computeExpirationTime(long durationMicros){  return Utils.getNowMicrosUtc() + durationMicros;}  }
class C{  public void start(){  new Thread(this).start();}  }
class C{  public SWFWriter(){}  }
class C{  public void removeChildAt(int index){  if ((index < 0) || (children == null) || (index >= children.size())) {    throw new ArrayIndexOutOfBoundsException();  }  Element child=(Element)children.get(index);  child.setParent(null);  children.remove(index);}  }
class C{  public static SpannableStringBuilder removeStyleAndColors(SpannableStringBuilder text){  ArrayList<int[]> toremove=new ArrayList<int[]>();  Matcher m=cleanupPattern.matcher(text);  while (m.find()) {    toremove.add(0,new int[]{m.start(),m.end()});  }  for (  int[] i : toremove) {    text.delete(i[0],i[1]);  }  return text;}  }
class C{  public static List<PlanElement> insertTrip(final List<PlanElement> plan,final Activity origin,final List<? extends PlanElement> trip,final Activity destination){  int indexOfOrigin=-1;  int indexOfDestination=-1;  int currentIndex=0;  for (  PlanElement pe : plan) {    if (pe == origin) {      indexOfOrigin=currentIndex;    }    if (pe == destination) {      indexOfDestination=currentIndex;      if (indexOfDestination < indexOfOrigin) {        throw new RuntimeException("destination " + destination + " found before origin "+ origin+ " in "+ plan);      }      break;    }    currentIndex++;  }  if (indexOfOrigin < 0) {    throw new RuntimeException("could not find origin " + origin + " in "+ plan);  }  if (indexOfDestination < 0) {    throw new RuntimeException("could not find destination " + destination + " in "+ plan);  }  List<PlanElement> seq=plan.subList(indexOfOrigin + 1,indexOfDestination);  List<PlanElement> oldTrip=new ArrayList<>(seq);  seq.clear();  assert trip != null;  seq.addAll(trip);  return oldTrip;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXIT_STATE;}  }
class C{  public static void handleSetPropertyExpression(Object bean,String prop,String expression,PageContext pageContext,ProtectedFunctionMapper functionMapper) throws JasperException {  try {    Method method=getWriteMethod(bean.getClass(),prop);    method.invoke(bean,new Object[]{PageContextImpl.evaluateExpression(expression,method.getParameterTypes()[0],pageContext,functionMapper)});  } catch (  Exception ex) {    throw new JasperException(ex);  }}  }
class C{  public void analyzeBytecode(final ClassResult classResult){  classResult.getMethods().forEach(null);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  private void processJournal() throws IOException {  FileUtils.deleteIfExists(mJournalFileTmp);  for (Iterator<CacheEntry> i=mLruEntries.values().iterator(); i.hasNext(); ) {    CacheEntry cacheEntry=i.next();    if (!cacheEntry.isUnderEdit()) {      mSize+=cacheEntry.getSize();    } else {      cacheEntry.delete();      i.remove();    }  }}  }
class C{  private static Set<String> read(ResultSet rs) throws Exception {  Set<String> names=new HashSet<String>();  while (rs.next()) {    String sequenceName=rs.getString(1);    names.add(sequenceName);  }  return names;}  }
class C{  public void installDefaults(SynthContext ctx){  validate();  super.installDefaults(ctx);}  }
class C{  public CCrossReferencesTable(final CCrossReferencesModel model){  super(model);}  }
class C{  public Transform(Vector2 position,float angle){  setPosition(position);  setRotation(angle);}  }
class C{  final public char lastChar(){  return array[length() - 1];}  }
class C{  public static void cleanCustomCache(String filePath){  deleteFilesInDirectory(new File(filePath));}  }
class C{  public void testStreamVsBytes() throws Exception {  FontFactory factory=FontFactory.getInstance();  byte[] data=readToByteArray(TestFont.TestFontNames.ROBOTO.getFile());  Font byteFont=factory.loadFonts(data)[0];  InputStream is=new FileInputStream(TestFont.TestFontNames.ROBOTO.getFile());  Font streamFont;  try {    streamFont=factory.loadFonts(is)[0];  }  finally {    is.close();  }{    boolean thrown=false;    Glyph byteGlyph=getLastGlyph(byteFont);    try {      int byteXMin=byteGlyph.xMin();    } catch (    IndexOutOfBoundsException e) {      thrown=true;    }    assertTrue("IndexOutOfBoundsException was expected but was not thrown.",thrown);  }{    boolean thrown=false;    Glyph streamGlyph=getLastGlyph(streamFont);    try {      int streamXMin=streamGlyph.xMin();    } catch (    IndexOutOfBoundsException e) {      thrown=true;    }    assertTrue("IndexOutOfBoundsException was expected but was not thrown.",thrown);  }}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  void appendProgramDescription(final WrappingStringBuilder wb){  if (!mProgramDescription.equals("")) {    wb.append(LS);    wb.setWrapIndent(0);    wb.wrapTextWithNewLines(mProgramDescription);  }}  }
class C{  public void resetMembers() throws Exception {  for (  MemberRc m : members.values()) {    m.reset();  }}  }
class C{  public static void fillStickyDrawerItemFooter(DrawerBuilder drawer,ViewGroup container,View.OnClickListener onClickListener){  for (  IDrawerItem drawerItem : drawer.mStickyDrawerItems) {    View view=drawerItem.generateView(container.getContext(),container);    view.setTag(drawerItem);    if (drawerItem.isEnabled()) {      view.setOnClickListener(onClickListener);    }    container.addView(view);    DrawerUIUtils.setDrawerVerticalPadding(view);  }  container.setPadding(0,0,0,0);}  }
class C{  protected Node newNode(){  return new SVGOMStopElement();}  }
class C{  public StringSelection(String data){  this.data=data;}  }
class C{  public SnapshotSchema(int schemaID,String schemaJSON,Map<String,String> schemaKeys){  this(schemaJSON,schemaKeys);  this.schemaID=schemaID;}  }
class C{  public ClassDefinition(Class<?> theClass,byte[] theClassFile){  if (theClass == null || theClassFile == null) {    throw new NullPointerException();  }  mClass=theClass;  mClassFile=theClassFile;}  }
class C{  public RotationMatrixBuilder withRandomThetas(){  for (  Plane plane : planes) {    plane.setTheta(PRNG.nextDouble(0.0,2.0 * Math.PI));  }  return this;}  }
class C{  public Point2D inverseTransform(Point2D viewPoint){  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double radius=polar.getRadius();  if (radius > viewRadius)   return delegate.inverseTransform(viewPoint);  double mag=magnification;  radius/=mag;  polar.setRadius(radius);  Point2D projectedPoint=PolarPoint.polarToCartesian(polar);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return delegate.inverseTransform(translatedBack);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of sides: ");  int n=input.nextInt();  System.out.print("Enter the side: ");  double side=input.nextDouble();  System.out.println("The area of the polygon is " + area(n,side));}  }
class C{  public int classIndex(){  return ByteArray.readU16bit(get(),0);}  }
class C{  private VPFUtil(){}  }
class C{  private void fireVmStatusChangedEvents(Set active,Set started,Set terminated){  ArrayList registered=null;  VmStatusChangeEvent ev=null;synchronized (listeners) {    registered=(ArrayList)listeners.clone();  }  for (Iterator i=registered.iterator(); i.hasNext(); ) {    HostListener l=(HostListener)i.next();    if (ev == null) {      ev=new VmStatusChangeEvent(this,active,started,terminated);    }    l.vmStatusChanged(ev);  }}  }
class C{  public static VCenterAPI createVCenterAPI(Host host){  int port=host.getPortNumber() != null ? host.getPortNumber() : 443;  URL url;  try {    url=new URL("https",host.getHostName(),port,"/sdk");  } catch (  MalformedURLException e) {    throw new RuntimeException(e.getMessage());  }  String username=host.getUsername();  String password=host.getPassword();  return new VCenterAPI(url,username,password);}  }
class C{  public int length(){  return str().length();}  }
class C{  public boolean isLocToDim(){  Object oo=get_Value(COLUMNNAME_IsLocToDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void encryptBlock(byte[] plain,int plainOffset,byte[] cipher,int cipherOffset){  cipherBlock(plain,plainOffset,cipher,cipherOffset);}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public static S2LatLngRect fromCenterSize(S2LatLng center,S2LatLng size){  return fromPoint(center).expanded(size.mul(0.5));}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cDocumentoPago=null;  Liquidacion oLiquidacion=null;  Pago oPago=null;  try {    oLiquidacion=PagoElectronicoManagerHelper.altaLiquidacionAL3(request,oForm);    oPago=PagoElectronicoManagerHelper.obtenerPagoBean(oForm);    oPago.setAcreditacion(Pago.ACREDITACION_NO_TERCERO_AUTORIZADO);    oPago.setReferencia(oLiquidacion.getReferencia());    oPago.setLiquidacion(oLiquidacion);    oPago=PagoElectronicoManagerHelper.realizarPago(request,oPago);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oPago);    cDocumentoPago=FormCreator.crearFinalPago(oLiquidacion.getTasa(),cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(REFERENCIA_KEY,oLiquidacion.getReferencia());  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {  Iterator it=set.iterator();  boolean keepGoing=true;  boolean sentLastChunk=false;  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());  do {    mos.reset();    int avgItemSize=0;    int itemCount=0;    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {      Object key=it.next();      DataSerializer.writeObject(key,mos);      itemCount++;      avgItemSize=mos.size() / itemCount;    }    DataSerializer.writeObject((Object)null,mos);    int lastMsg=it.hasNext() ? 0 : 1;    keepGoing=proc.executeWith(mos,lastMsg);    sentLastChunk=lastMsg == 1 && keepGoing;  } while (keepGoing && it.hasNext());  return sentLastChunk;}  }
class C{  @Override public E remove(int index){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void testBug23303() throws Exception {  this.rs=this.conn.getMetaData().getSchemas();  this.rs.findColumn("TABLE_CATALOG");}  }
class C{  public final void mulTransposeRight(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02 + m1.m03 * m2.m03;    this.m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12 + m1.m03 * m2.m13;    this.m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22 + m1.m03 * m2.m23;    this.m03=m1.m00 * m2.m30 + m1.m01 * m2.m31 + m1.m02 * m2.m32 + m1.m03 * m2.m33;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02 + m1.m13 * m2.m03;    this.m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12 + m1.m13 * m2.m13;    this.m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22 + m1.m13 * m2.m23;    this.m13=m1.m10 * m2.m30 + m1.m11 * m2.m31 + m1.m12 * m2.m32 + m1.m13 * m2.m33;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02 + m1.m23 * m2.m03;    this.m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12 + m1.m23 * m2.m13;    this.m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22 + m1.m23 * m2.m23;    this.m23=m1.m20 * m2.m30 + m1.m21 * m2.m31 + m1.m22 * m2.m32 + m1.m23 * m2.m33;    this.m30=m1.m30 * m2.m00 + m1.m31 * m2.m01 + m1.m32 * m2.m02 + m1.m33 * m2.m03;    this.m31=m1.m30 * m2.m10 + m1.m31 * m2.m11 + m1.m32 * m2.m12 + m1.m33 * m2.m13;    this.m32=m1.m30 * m2.m20 + m1.m31 * m2.m21 + m1.m32 * m2.m22 + m1.m33 * m2.m23;    this.m33=m1.m30 * m2.m30 + m1.m31 * m2.m31 + m1.m32 * m2.m32 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02 + m1.m03 * m2.m03;    m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12 + m1.m03 * m2.m13;    m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22 + m1.m03 * m2.m23;    m03=m1.m00 * m2.m30 + m1.m01 * m2.m31 + m1.m02 * m2.m32 + m1.m03 * m2.m33;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02 + m1.m13 * m2.m03;    m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12 + m1.m13 * m2.m13;    m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22 + m1.m13 * m2.m23;    m13=m1.m10 * m2.m30 + m1.m11 * m2.m31 + m1.m12 * m2.m32 + m1.m13 * m2.m33;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02 + m1.m23 * m2.m03;    m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12 + m1.m23 * m2.m13;    m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22 + m1.m23 * m2.m23;    m23=m1.m20 * m2.m30 + m1.m21 * m2.m31 + m1.m22 * m2.m32 + m1.m23 * m2.m33;    m30=m1.m30 * m2.m00 + m1.m31 * m2.m01 + m1.m32 * m2.m02 + m1.m33 * m2.m03;    m31=m1.m30 * m2.m10 + m1.m31 * m2.m11 + m1.m32 * m2.m12 + m1.m33 * m2.m13;    m32=m1.m30 * m2.m20 + m1.m31 * m2.m21 + m1.m32 * m2.m22 + m1.m33 * m2.m23;    m33=m1.m30 * m2.m30 + m1.m31 * m2.m31 + m1.m32 * m2.m32 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  @org.junit.Test public void testSerialToJson() throws JsonGenerationException, JsonMappingException, IOException {  final List<RunningQuery> rQueriesOrig=deserialize(rQueryJson);  final List<RunningQuery> rQueriesDeserial;  final StringWriter sw=new StringWriter();  JsonHelper.writeRunningQueryList(sw,rQueriesOrig);  final String jsonResult=sw.toString();  assert (jsonResult != null);  rQueriesDeserial=deserialize(jsonResult);  final Iterator<RunningQuery> it1=rQueriesOrig.iterator();  final Iterator<RunningQuery> it2=rQueriesDeserial.iterator();  while (it1.hasNext() && it2.hasNext()) {    final RunningQuery r1=it1.next();    final RunningQuery r2=it2.next();    assertEquals(r1.getBegin(),r2.getBegin());    assertEquals(r1.getQueryUuid(),r2.getQueryUuid());    assertEquals(r1.getExtQueryId(),r2.getExtQueryId());  }  assert (!it1.hasNext());  assert (!it2.hasNext());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z > minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void constrain(int x,int y,int w,int h){  constrain(x,y,w,h,null);}  }
class C{  public void dispose(){  m_synchronizer.dispose();  m_registerView.dispose();}  }
class C{  public void add(Instance newInst){  for (int i=0; i < m_Datasets.size(); i++) {    if (m_Datasets.get(i).matchesTemplate(newInst)) {      m_Datasets.get(i).add(newInst);      return;    }  }  Dataset newDataset=new Dataset(newInst);  m_Datasets.add(newDataset);}  }
class C{  public static PendingIntent makeReceiverPendingIntent(Context context){  return PendingIntent.getBroadcast(context,DELETE_CACHE_REQUEST_CODE,new Intent(context,DeleteCacheReceiver.class),PendingIntent.FLAG_CANCEL_CURRENT);}  }
class C{  public void sort(int[] array){  ForkJoinTask<Void> job=pool.submit(new MergeSortTask(array,0,array.length));  job.join();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:49.521 -0500",hash_original_method="7AE3A829A02A70B14E30FF17666004A8",hash_generated_method="3B7496053364E45945255665684F4A5F") public synchronized String generateBranchId(){  long num=rand.nextLong() + Utils.counter++ + System.currentTimeMillis();  byte bid[]=digester.digest(Long.toString(num).getBytes());  return SIPConstants.BRANCH_MAGIC_COOKIE + Utils.toHexString(bid) + this.signature;}  }
class C{  public void stateChanged(ChangeEvent e){  if (m_setting)   return;  m_setting=true;  int newPage=0;  if (e.getSource() == spinner) {    newPage=((Integer)spinnerModel.getValue()).intValue();  } else {    Point p=centerScrollPane.getViewport().getViewPosition();    newPage=Math.round(m_viewPanel.getPageNoAt(p));  }  setPage(newPage);  m_setting=false;}  }
class C{  public ClockEntry(ClockEntry other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.version=other.version;}  }
class C{  public ProjectObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public static Attribute decode(byte[] bytes,char offset,char length) throws StunException {  if (bytes == null || bytes.length < Attribute.HEADER_LENGTH) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Could not decode the specified binary array.");  }  char attributeType=(char)(((bytes[offset] & 0xFF) << 8) | (bytes[offset + 1] & 0xFF));  char attributeLength=(char)(((bytes[offset + 2] & 0xFF) << 8) | (bytes[offset + 3] & 0xFF));  if (attributeLength > bytes.length - offset)   throw new StunException(StunException.ILLEGAL_ARGUMENT,"Could not decode the specified binary array.");  Attribute decodedAttribute=null;switch (attributeType) {case Attribute.CHANGE_REQUEST:    decodedAttribute=new ChangeRequestAttribute();  break;case Attribute.CHANGED_ADDRESS:decodedAttribute=new ChangedAddressAttribute();break;case Attribute.MAPPED_ADDRESS:decodedAttribute=new MappedAddressAttribute();break;case Attribute.ERROR_CODE:decodedAttribute=new ErrorCodeAttribute();break;case Attribute.MESSAGE_INTEGRITY:decodedAttribute=new MessageIntegrityAttribute();break;case Attribute.REFLECTED_FROM:decodedAttribute=new ReflectedFromAttribute();break;case Attribute.RESPONSE_ADDRESS:decodedAttribute=new ResponseAddressAttribute();break;case Attribute.SOURCE_ADDRESS:decodedAttribute=new SourceAddressAttribute();break;case Attribute.UNKNOWN_ATTRIBUTES:decodedAttribute=new UnknownAttributesAttribute();break;case Attribute.XOR_MAPPED_ADDRESS:decodedAttribute=new XorMappedAddressAttribute();break;case Attribute.XOR_ONLY:decodedAttribute=new XorOnlyAttribute();break;case Attribute.SOFTWARE:decodedAttribute=new SoftwareAttribute();break;case Attribute.USERNAME:decodedAttribute=new UsernameAttribute();break;case Attribute.REALM:decodedAttribute=new RealmAttribute();break;case Attribute.NONCE:decodedAttribute=new NonceAttribute();break;case Attribute.FINGERPRINT:decodedAttribute=new FingerprintAttribute();break;case Attribute.ALTERNATE_SERVER:decodedAttribute=new AlternateServerAttribute();break;case Attribute.CHANNEL_NUMBER:decodedAttribute=new ChannelNumberAttribute();break;case Attribute.LIFETIME:decodedAttribute=new LifetimeAttribute();break;case Attribute.XOR_PEER_ADDRESS:decodedAttribute=new XorPeerAddressAttribute();break;case Attribute.DATA:decodedAttribute=new DataAttribute();break;case Attribute.XOR_RELAYED_ADDRESS:decodedAttribute=new XorRelayedAddressAttribute();break;case Attribute.EVEN_PORT:decodedAttribute=new EvenPortAttribute();break;case Attribute.REQUESTED_TRANSPORT:decodedAttribute=new RequestedTransportAttribute();break;case Attribute.DONT_FRAGMENT:decodedAttribute=new DontFragmentAttribute();break;case Attribute.RESERVATION_TOKEN:decodedAttribute=new ReservationTokenAttribute();break;case Attribute.PRIORITY:decodedAttribute=new PriorityAttribute();break;case Attribute.ICE_CONTROLLING:decodedAttribute=new IceControllingAttribute();break;case Attribute.ICE_CONTROLLED:decodedAttribute=new IceControlledAttribute();break;case Attribute.USE_CANDIDATE:decodedAttribute=new UseCandidateAttribute();break;case Attribute.REQUESTED_ADDRESS_FAMILY:decodedAttribute=new RequestedAddressFamilyAttribute();break;case Attribute.CONNECTION_ID:decodedAttribute=new ConnectionIdAttribute();break;default :decodedAttribute=new OptionalAttribute(Attribute.UNKNOWN_OPTIONAL_ATTRIBUTE);break;}decodedAttribute.setAttributeType(attributeType);decodedAttribute.setLocationInMessage(offset);decodedAttribute.decodeAttributeBody(bytes,(char)(Attribute.HEADER_LENGTH + offset),attributeLength);return decodedAttribute;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.EFFECT;}  }
class C{  private static void print(double[] x,int w,int d){  System.out.print("\n");  new jMatrix(x,1).print(w,d);  print("\n");}  }
class C{  public static int squareOfANumber(int n){  int square=0;  for (int i=1; i <= n; i++) {    for (int j=1; j <= n; j++) {      square+=1;    }  }  return square;}  }
class C{  public void testParseSetSingleChar() throws Exception {  String[] setDefinition=new String[2];  setDefinition[0]="set('A','B')";  setDefinition[1]="SET('A','B')";  for (int i=0; i < 2; i++) {    String[] elements=SetToStringFilter.parseSet(setDefinition[i]);    Assert.assertEquals(errorMsgMismatch,"A",elements[0]);    Assert.assertEquals(errorMsgMismatch,"B",elements[1]);  }}  }
class C{  public static void writePaddedInteger(Writer out,long value,int size) throws IOException {  int intValue=(int)value;  if (intValue == value) {    writePaddedInteger(out,intValue,size);  } else   if (size <= 19) {    out.write(Long.toString(value));  } else {    if (value < 0) {      out.write('-');      if (value != Long.MIN_VALUE) {        value=-value;      } else {        for (; size > 19; size--) {          out.write('0');        }        out.write("9223372036854775808");        return;      }    }    int digits=(int)(Math.log(value) / LOG_10) + 1;    for (; size > digits; size--) {      out.write('0');    }    out.write(Long.toString(value));  }}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  int add(Entry source){  Integer id=hash.get(source);  if (id == null) {    id=hash.size() + 1;    list.add(source);    hash.put(source,id);  }  return id;}  }
class C{  public ObjectMatrix2D like2D(int rows,int columns){  return new SparseObjectMatrix2D(rows,columns);}  }
class C{  public void testEmptyApiNameAttribute(){  doTest();}  }
class C{  @Override public int executeUpdate(String sql) throws SQLException {  try {    debugCodeCall("executeUpdate",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static <T,F extends CompletionStage<T>>T await(F future){  String warning;  if (!InitializeAsync.isRunning()) {    warning="Warning: Illegal call to await, static { Async.init(); } must be added to the main program class and the method invoking await must return a CompletableFuture";  } else {    warning="Warning: Illegal call to await, the method invoking await must return a CompletableFuture";  }  LoggerFactory.getLogger(Async.class);  if (logger == null) {    logger=LoggerFactory.getLogger(Async.class);  }  if (logger.isDebugEnabled()) {    logger.warn(warning,new Throwable());  } else {    logger.warn(warning);  }  if (future instanceof CompletableFuture) {    return ((CompletableFuture<T>)future).join();  }  return future.toCompletableFuture().join();}  }
class C{  public B second(){  return b;}  }
class C{  public static TextNode.Anchor convertTextAnchor(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.TEXT_ANCHOR_INDEX);switch (v.getStringValue().charAt(0)) {case 's':    return TextNode.Anchor.START;case 'm':  return TextNode.Anchor.MIDDLE;default :return TextNode.Anchor.END;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.291 -0500",hash_original_method="EDE3AD5442B3DE671B6476C917BB6D0F",hash_generated_method="0BD13C9317D8A307EA5DDA251AC3963A") public WWWAuthenticateHeader createWWWAuthenticateHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("null scheme");  WWWAuthenticate www=new WWWAuthenticate();  www.setScheme(scheme);  return www;}  }
class C{  public int doStartTag() throws JspException {  Properties ctx=JSPEnv.getCtx((HttpServletRequest)pageContext.getRequest());  MLocation loc=new MLocation(ctx,0,null);  HtmlCode html=new HtmlCode();  int C_Country_ID=getCountryID(loc);  int C_Region_ID=getRegionID(loc);  option[] countries=getCountries(loc,C_Country_ID);  String name=null;  label lbl=null;  input field=null;  select sel=null;  name="City";  String city=(String)ExpressionUtil.evalNotNull("location","city",m_city_el,String.class,this,pageContext);  lbl=new label();  lbl.setFor(name);  lbl.setID("LBL_" + name);  lbl.addElement(Msg.translate(ctx,name));  html.addElement(lbl);  field=new input(input.TYPE_TEXT,name,city);  field.setSize(40).setMaxlength(60).setID("ID_" + name);  field.setClass(C_MANDATORY);  html.addElement(field);  html.addElement(new br());  name="Postal";  String postal=(String)ExpressionUtil.evalNotNull("location","postal",m_postal_el,String.class,this,pageContext);  lbl=new label();  lbl.setFor(name);  lbl.setID("LBL_" + name);  lbl.addElement(Msg.translate(ctx,name));  html.addElement(lbl);  field=new input(input.TYPE_TEXT,name,postal);  field.setSize(10).setMaxlength(10).setID("ID_" + name);  field.setClass(C_MANDATORY);  html.addElement(field);  html.addElement(new br());  name="C_Region_ID";  lbl=new label();  lbl.setFor(name);  lbl.setID("LBL_" + name);  String regionName=(String)ExpressionUtil.evalNotNull("location","regionName",m_regionName_el,String.class,this,pageContext);  field=new input(input.TYPE_TEXT,"RegionName",regionName);  field.setSize(40).setMaxlength(60).setID("ID_RegionName");  if (m_country != null && m_country.isHasRegion()) {    sel=new select(name,getRegions(loc,C_Country_ID,C_Region_ID));    sel.setID("ID_" + name);    lbl.addElement(m_country.getRegionName());    html.addElement(lbl);    html.addElement(sel);    html.addElement(new span(" - "));    html.addElement(field);  } else {    lbl.addElement(Msg.translate(ctx,name));    html.addElement(lbl);    html.addElement(field);  }  html.addElement(new br());  name="C_Country_ID";  lbl=new label();  lbl.setFor(name);  lbl.setID("LBL_" + name);  lbl.addElement(Msg.translate(ctx,name));  html.addElement(lbl);  sel=new select(name,countries);  sel.setID("ID_" + name);  sel.setClass(C_MANDATORY);  sel.setOnChange("changeCountry('ID_" + name + "');");  html.addElement(sel);  html.addElement(new br());  log.fine("C_Country_ID=" + C_Country_ID + ", C_Region_ID="+ C_Region_ID+ ", RegionName="+ regionName+ ", City="+ city+ ", Postal="+ postal);  JspWriter out=pageContext.getOut();  html.output(out);  return (SKIP_BODY);}  }
class C{  public GenericEntry updateSettings(String username,GenericEntry entry,String setting) throws IOException, MalformedURLException, ServiceException {  URL singleUrl=buildSettingsUrl(username,setting);  return update(singleUrl,entry);}  }
class C{  public WordDelimiterFilterFactory(Map<String,String> args){  super(args);  int flags=0;  if (getInt(args,"generateWordParts",1) != 0) {    flags|=GENERATE_WORD_PARTS;  }  if (getInt(args,"generateNumberParts",1) != 0) {    flags|=GENERATE_NUMBER_PARTS;  }  if (getInt(args,"catenateWords",0) != 0) {    flags|=CATENATE_WORDS;  }  if (getInt(args,"catenateNumbers",0) != 0) {    flags|=CATENATE_NUMBERS;  }  if (getInt(args,"catenateAll",0) != 0) {    flags|=CATENATE_ALL;  }  if (getInt(args,"splitOnCaseChange",1) != 0) {    flags|=SPLIT_ON_CASE_CHANGE;  }  if (getInt(args,"splitOnNumerics",1) != 0) {    flags|=SPLIT_ON_NUMERICS;  }  if (getInt(args,"preserveOriginal",0) != 0) {    flags|=PRESERVE_ORIGINAL;  }  if (getInt(args,"stemEnglishPossessive",1) != 0) {    flags|=STEM_ENGLISH_POSSESSIVE;  }  wordFiles=get(args,PROTECTED_TOKENS);  types=get(args,TYPES);  this.flags=flags;  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ConstantNode(Constant value,Stamp stamp){  this(value,stamp,0,false);}  }
class C{  public void doClose(){synchronized (isClosingLock) {    if (isClosing)     return; else     isClosing=true;  }  pressStop();  simulation.quit();  Console.allControllers.remove(this);  if (Console.allControllers.size() == 0)   Console.doQuit();}  }
class C{  public EquationRef createEquationRef(){  EquationRefImpl equationRef=new EquationRefImpl();  return equationRef;}  }
class C{  public Task<VcenterDataCenterRestRep> updateVcenterCluster(URI dataCenterId,VcenterClusterParam clusterParam){  TaskResourceRep response=client.post(TaskResourceRep.class,clusterParam,PathConstants.DATACENTER_UPDATE_CLUSTER_URL,dataCenterId);  return new Task<VcenterDataCenterRestRep>(client,response,resourceClass);}  }
class C{  public final boolean isCurrentView(){  Widget p=getParent();  while (p != null) {    if (p instanceof ViewSite<?>) {      return ((ViewSite<?>)p).getView() == this;    }    p=p.getParent();  }  return false;}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   super.fireEntityReference(name);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public BasicAttributes(boolean ignoreCase){  this.ignoreCase=ignoreCase;}  }
class C{  private List<FahrzeitEvent> readFahrzeitData(String[] fahrzeitDataFilenames){  List<FahrzeitEvent> fahrzeitData=new LinkedList<FahrzeitEvent>();  try {    for (    String filename : fahrzeitDataFilenames) {      LinkedList<FahrzeitEvent> tempData=ReadRBLfahrzeit.readFahrzeitEvents(filename);      fahrzeitData.addAll(tempData);    }    log.info("Finished reading input data...");    return fahrzeitData;  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  private boolean isWord(final String str){  if (str == null || str.length() == 0) {    return false;  }  for (int i=0; i < str.length(); i++) {    if (!Character.isJavaIdentifierPart(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  private static ValueLob createClob(Reader in,long length){  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    char[] buff;    if (len >= Integer.MAX_VALUE) {      String data=IOUtils.readStringAndClose(in,-1);      buff=data.toCharArray();      len=buff.length;    } else {      buff=new char[len];      len=IOUtils.readFully(in,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);      return ValueLob.createSmallLob(Value.CLOB,small);    }    ValueLob lob=new ValueLob(Value.CLOB,null);    lob.createFromReader(buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public production base_production(){  return _base_production;}  }
class C{  public static void register(final JComponent comp){  if (INSTANCE == null) {    INSTANCE=new ViewTooltips();  }  INSTANCE.attachTo(comp);}  }
class C{  protected void sequence_BogusTypeRefFragment_ColonSepTypeRef_GetterHeader_N4GetterDeclaration(ISerializationContext context,N4GetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void selectRandomSubset(int n,Random random){  double ratio=(double)n / (double)getAttributes().size();  for (  Attribute attribute : getAttributes()) {    if (random.nextDouble() < ratio) {      setWeight(attribute,1.0d);    } else {      setWeight(attribute,0.0d);    }  }  if (getNumberOfUsedAttributes() == 0) {    double probDelta=1.0d / getAttributes().size();    double prob=random.nextDouble();    double currentMax=probDelta;    for (    Attribute attribute : getAttributes()) {      if (prob < currentMax) {        setWeight(attribute,1.0d);        break;      }      currentMax+=probDelta;    }  }}  }
class C{  public UnrecognizedOptionException(String message,String option){  this(message);  this.option=option;}  }
class C{  public Matrix solve(Matrix B){  Matrix x=U.transposeMultiply(B);  Matrix.diagMult(DenseVector.toDenseVec(getInverseSingularValues()),x);  return V.multiply(x);}  }
class C{  protected void liveVariableAnalysis(){  try {    dmlTranslator=new DMLTranslator(dmlProgram);    dmlTranslator.liveVariableAnalysis(dmlProgram);  } catch (  DMLRuntimeException e) {    throw new MLContextException("Exception occurred during live variable analysis",e);  }catch (  LanguageException e) {    throw new MLContextException("Exception occurred during live variable analysis",e);  }}  }
class C{  public Table findTableOrView(Session session,String name){  Table table=tablesAndViews.get(name);  if (table == null && session != null) {    table=session.findLocalTempTable(name);  }  return table;}  }
class C{  public SimpleImmutableEntry(Entry<? extends K,? extends V> entry){  this.key=entry.getKey();  this.value=entry.getValue();}  }
class C{  public static String stringFor(int n){switch (n) {case CU_COMPUTEMODE_DEFAULT:    return "CU_COMPUTEMODE_DEFAULT";case CU_COMPUTEMODE_EXCLUSIVE:  return "CU_COMPUTEMODE_EXCLUSIVE";case CU_COMPUTEMODE_PROHIBITED:return "CU_COMPUTEMODE_PROHIBITED";case CU_COMPUTEMODE_EXCLUSIVE_PROCESS:return "CU_COMPUTEMODE_EXCLUSIVE_PROCESS";}return "INVALID CUcomputemode: " + n;}  }
class C{  public byte[] toByteArray(){  final int preLongs, outBytes;  final boolean empty=itemsSeen_ == 0;  final int numItems=(int)Math.min(reservoirSize_,itemsSeen_);  if (empty) {    preLongs=1;    outBytes=8;  } else {    preLongs=Family.RESERVOIR.getMaxPreLongs();    outBytes=(preLongs + numItems) << 3;  }  final byte[] outArr=new byte[outBytes];  final Memory mem=new NativeMemory(outArr);  long pre0=0L;  pre0=PreambleUtil.insertPreLongs(preLongs,pre0);  pre0=PreambleUtil.insertResizeFactor(rf_.lg(),pre0);  pre0=PreambleUtil.insertSerVer(SER_VER,pre0);  pre0=PreambleUtil.insertFamilyID(Family.RESERVOIR.getID(),pre0);  pre0=(empty) ? PreambleUtil.insertFlags(EMPTY_FLAG_MASK,pre0) : PreambleUtil.insertFlags(0,pre0);  pre0=PreambleUtil.insertReservoirSize(encodedResSize_,pre0);  pre0=PreambleUtil.insertSerDeId(ARRAY_OF_LONGS_SERDE_ID,pre0);  if (empty) {    mem.putLong(0,pre0);  } else {    long pre1=0L;    pre1=PreambleUtil.insertItemsSeenCount(itemsSeen_,pre1);    final long[] preArr=new long[preLongs];    preArr[0]=pre0;    preArr[1]=pre1;    mem.putLongArray(0,preArr,0,preLongs);    final int preBytes=preLongs << 3;    mem.putLongArray(preBytes,data_,0,numItems);  }  return outArr;}  }
class C{  protected static Config defaultConfigs(String heronHome,String configPath,String releaseFile){  Config config=Config.newBuilder().putAll(ClusterDefaults.getDefaults()).putAll(ClusterDefaults.getSandboxDefaults()).putAll(ClusterConfig.loadConfig(heronHome,configPath,releaseFile)).build();  return config;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TYPE__CONSTRAINT:    return ((InternalEList<?>)getConstraint()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void adjustDate(int diff){  Date date=fieldDate.getValue();  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(date);  cal.add(java.util.Calendar.DAY_OF_YEAR,diff);  fieldDate.setValue(new Timestamp(cal.getTimeInMillis()));  displayCalendar();}  }
class C{  public int flags(){  return FrameHeaderFlyweight.flags(directBuffer,offset);}  }
class C{  @Override public String toString(){  return getName() + "{" + source+ " min="+ minimum+ " pref="+ preferred+ " max="+ maximum+ "}";}  }
class C{  protected boolean destroyFromAvailableIDsAndRegion(Long position) throws InterruptedException {  boolean removedOK=this.destroyFromAvailableIDs(position);  if (removedOK) {    try {      this.destroyFromQueue(position);    } catch (    EntryNotFoundException enfe) {      if (!HARegionQueue.this.destroyInProgress) {        if (!this.region.isDestroyed()) {          Assert.assertTrue(false,"HARegionQueue::remove: The position " + position + "existed in availableIDs set but not in Region object is not expected");        }      }    }  }  return removedOK;}  }
class C{  private static byte[] randomBytes(int size){  byte[] bytes=new byte[size];  for (int index=0; index < size; index++) {    bytes[index]=(byte)randomNumber(0,255);  }  return bytes;}  }
class C{  protected ShaderVar addVarying(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mVaryings.put(v.getName(),v);  return v;}  }
class C{  public static String trimLeadingTabsAndSpaces(String line){  int size=line.length();  int start=size;  for (int i=0; i < size; i++) {    char c=line.charAt(i);    if (!IndentManipulation.isIndentChar(c)) {      start=i;      break;    }  }  if (start == 0)   return line; else   if (start == size)   return ""; else   return line.substring(start);}  }
class C{  public static boolean isDoubleMissingValue(double value){  return Double.isNaN(value);}  }
class C{  public void finish() throws IOException {  outputStream.write(brotliStreamCompressor.finishStream());}  }
class C{  protected double[] fill(double[] array,double val){  for (int i=0; i < array.length; i++)   array[i]=val;  return array;}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  Size2D s=new Size2D(this.image.getWidth(null),this.image.getHeight(null));  return new Size2D(calculateTotalWidth(s.getWidth()),calculateTotalHeight(s.getHeight()));}  }
class C{  private void saveSortedPomFile(final String sortedXml){  fileUtil.savePomFile(sortedXml);  log.info("Saved sorted pom file to " + pomFile.getAbsolutePath());}  }
class C{  public SingleStepParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SINGLE_STEP_SUCCESS);}  }
class C{  @Override public void saveSource(Resource resource,String source){}  }
class C{  public Starts(){  super("text_information.starts");}  }
class C{  public float minScore(){  return minScore;}  }
class C{  public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.addOnItemTouchListener(listener);}  }
class C{  private static void initialize(){  IgniteCache<Long,Organization> orgCache=Ignition.ignite().cache(ORG_CACHE);  orgCache.clear();  Organization org1=new Organization("ApacheIgnite");  Organization org2=new Organization("Other");  orgCache.put(org1.id(),org1);  orgCache.put(org2.id(),org2);  IgniteCache<AffinityKey<Long>,Person> colPersonCache=Ignition.ignite().cache(COLLOCATED_PERSON_CACHE);  IgniteCache<Long,Person> personCache=Ignition.ignite().cache(PERSON_CACHE);  colPersonCache.clear();  personCache.clear();  Person p1=new Person(org1,"John","Doe",2000,"John Doe has Master Degree.");  Person p2=new Person(org1,"Jane","Doe",1000,"Jane Doe has Bachelor Degree.");  Person p3=new Person(org2,"John","Smith",1000,"John Smith has Bachelor Degree.");  Person p4=new Person(org2,"Jane","Smith",2000,"Jane Smith has Master Degree.");  colPersonCache.put(p1.key(),p1);  colPersonCache.put(p2.key(),p2);  colPersonCache.put(p3.key(),p3);  colPersonCache.put(p4.key(),p4);  personCache.put(p1.id,p1);  personCache.put(p2.id,p2);  personCache.put(p3.id,p3);  personCache.put(p4.id,p4);}  }
class C{  private static TransitSchedule filterTransitStopFacilities(Scenario scenario,TransitSchedule transitSchedule){  TransitSchedule newTransitSchedule=new TransitScheduleFactoryImpl().createTransitSchedule();  int numberOfStopsCreated=0;  HashMap<Id<Link>,List<TransitStopFacility>> linkId2Stops=new HashMap<Id<Link>,List<TransitStopFacility>>();  for (  TransitStopFacility transitStop : transitSchedule.getFacilities().values()) {    if (linkId2Stops.get(transitStop.getLinkId()) == null) {      linkId2Stops.put(transitStop.getLinkId(),new LinkedList<TransitStopFacility>());    }    linkId2Stops.get(transitStop.getLinkId()).add(transitStop);  }  for (  Id<Link> linkId : linkId2Stops.keySet()) {    Link link=scenario.getNetwork().getLinks().get(linkId);    double bestDistance=Double.POSITIVE_INFINITY;    TransitStopFacility bestStop=null;    for (    TransitStopFacility transitStop : linkId2Stops.get(linkId)) {      double distance=CoordUtils.calcEuclideanDistance(transitStop.getCoord(),link.getToNode().getCoord());      if (distance < bestDistance) {        bestStop=transitStop;      }    }    newTransitSchedule.addStopFacility(bestStop);    numberOfStopsCreated++;  }  log.info(numberOfStopsCreated + " transit stops remain after filtering");  return newTransitSchedule;}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  int s=getImportCount();  for (int j=0; j < s; j++) {    getImport(j).callVisitors(visitor);  }  s=getIncludeCount();  for (int j=0; j < s; j++) {    getInclude(j).callVisitors(visitor);  }  s=getOutputCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getOutput(j));  }  s=getAttributeSetCount();  for (int j=0; j < s; j++) {    ElemAttributeSet attrSet=getAttributeSet(j);    if (visitor.visitTopLevelInstruction(attrSet)) {      attrSet.callChildVisitors(visitor);    }  }  s=getDecimalFormatCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getDecimalFormat(j));  }  s=getKeyCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getKey(j));  }  s=getNamespaceAliasCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getNamespaceAlias(j));  }  s=getTemplateCount();  for (int j=0; j < s; j++) {    try {      ElemTemplate template=getTemplate(j);      if (visitor.visitTopLevelInstruction(template)) {        template.callChildVisitors(visitor);      }    } catch (    TransformerException te) {      throw new org.apache.xml.utils.WrappedRuntimeException(te);    }  }  s=getVariableOrParamCount();  for (int j=0; j < s; j++) {    ElemVariable var=getVariableOrParam(j);    if (visitor.visitTopLevelVariableOrParamDecl(var)) {      var.callChildVisitors(visitor);    }  }  s=getStripSpaceCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getStripSpace(j));  }  s=getPreserveSpaceCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getPreserveSpace(j));  }  if (null != m_NonXslTopLevel) {    java.util.Enumeration elements=m_NonXslTopLevel.elements();    while (elements.hasMoreElements()) {      ElemTemplateElement elem=(ElemTemplateElement)elements.nextElement();      if (visitor.visitTopLevelInstruction(elem)) {        elem.callChildVisitors(visitor);      }    }  }}  }
class C{  @Override public List<String> addJobFlowStepsRequest(AmazonElasticMapReduceClient emrClient,AddJobFlowStepsRequest addJobFlowStepsRequest){  if (addJobFlowStepsRequest.getSteps() != null && addJobFlowStepsRequest.getSteps().get(0) != null) {    StepConfig firstStep=addJobFlowStepsRequest.getSteps().get(0);    if (firstStep.getName().equals(MockAwsOperationsHelper.AMAZON_BAD_REQUEST)) {      AmazonServiceException badRequestException=new AmazonServiceException(MockAwsOperationsHelper.AMAZON_BAD_REQUEST);      badRequestException.setStatusCode(HttpStatus.SC_BAD_REQUEST);      throw badRequestException;    } else     if (firstStep.getName().equals(MockAwsOperationsHelper.AMAZON_NOT_FOUND)) {      AmazonServiceException notFoundException=new AmazonServiceException(MockAwsOperationsHelper.AMAZON_NOT_FOUND);      notFoundException.setStatusCode(HttpStatus.SC_NOT_FOUND);      throw notFoundException;    } else     if (firstStep.getName().equals(MockAwsOperationsHelper.AMAZON_SERVICE_EXCEPTION)) {      throw new AmazonServiceException(MockAwsOperationsHelper.AMAZON_SERVICE_EXCEPTION);    }  }  MockEmrJobFlow cluster=getClusterById(addJobFlowStepsRequest.getJobFlowId());  if (cluster == null) {    throw new AmazonServiceException("No Cluster exists with jobFlowId: " + addJobFlowStepsRequest.getJobFlowId());  }  List<String> jobIds=new ArrayList<>();  for (  StepConfig step : addJobFlowStepsRequest.getSteps()) {    jobIds.add(addClusterStep(cluster.getJobFlowId(),step).getJobFlowId());  }  return jobIds;}  }
class C{  public SafeCalendar(int year){  this();  set(YEAR,year);}  }
class C{  public void rollRight(){  if (DEBUG) {    Debug.output("Rolling right");  }  doRotateZ(getRollRightAmount());}  }
class C{  public void java_lang_Class_getInterfaces(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public BasicMapPanel(PropertyHandler propertyHandler){  this(propertyHandler,false);}  }
class C{  private EmrCluster createEmrClusterInWaitingState(String namespace,String emrClusterDefinitionName){  String amiVersion=MockAwsOperationsHelper.AMAZON_CLUSTER_STATUS_WAITING;  return createEmrCluster(namespace,emrClusterDefinitionName,amiVersion);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TMODULE;}  }
class C{  public static String toString(PolicyInformation policyInformation) throws IOException {  StringBuffer sbPolicyInformation=new StringBuffer();  ASN1ObjectIdentifier policyIdentifier=policyInformation.getPolicyIdentifier();  sbPolicyInformation.append(MessageFormat.format(res.getString("PolicyInformationUtil.PolicyIdentifier"),policyIdentifier.getId()));  ASN1Sequence policyQualifiers=policyInformation.getPolicyQualifiers();  if (policyQualifiers != null) {    sbPolicyInformation.append(", ");    StringBuffer sbPolicyQualifiers=new StringBuffer();    for (int i=0; i < policyQualifiers.size(); i++) {      PolicyQualifierInfo policyQualifierInfo=PolicyQualifierInfo.getInstance(policyQualifiers.getObjectAt(i));      sbPolicyQualifiers.append(toString(policyQualifierInfo));      if ((i + 1) < policyQualifiers.size()) {        sbPolicyQualifiers.append(", ");      }    }    sbPolicyInformation.append(MessageFormat.format(res.getString("PolicyInformationUtil.PolicyQualifiers"),sbPolicyQualifiers));  }  return sbPolicyInformation.toString();}  }
class C{  public InstrumentForWPC(String counterNameForWindows,String path,double scale){  if (counterNameForWindows == null)   throw new IllegalArgumentException();  if (path == null)   throw new IllegalArgumentException();  this.counterNameForWindows=counterNameForWindows;  this.path=path;  this.scale=scale;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public String readConfigName(String collection){  String configName=null;  String path=COLLECTIONS_ZKNODE + "/" + collection;  if (log.isInfoEnabled()) {    log.info("Load collection config from:" + path);  }  try {    byte[] data=zkClient.getData(path,null,null,true);    if (data != null) {      ZkNodeProps props=ZkNodeProps.load(data);      configName=props.getStr(CONFIGNAME_PROP);    }    if (configName != null) {      if (!zkClient.exists(CONFIGS_ZKNODE + "/" + configName,true)) {        log.error("Specified config does not exist in ZooKeeper:" + configName);        throw new ZooKeeperException(ErrorCode.SERVER_ERROR,"Specified config does not exist in ZooKeeper:" + configName);      } else       if (log.isInfoEnabled()) {        log.info("path={} {}={} specified config exists in ZooKeeper",new Object[]{path,CONFIGNAME_PROP,configName});      }    }  } catch (  KeeperException e) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Error loading config name for collection " + collection,e);  }catch (  InterruptedException e) {    Thread.interrupted();    throw new SolrException(ErrorCode.SERVER_ERROR,"Error loading config name for collection " + collection,e);  }  return configName;}  }
class C{  public boolean isLegacySupported(){  return mLegacySupported;}  }
class C{  public TypeBinding capture(Scope scope,int position){  if ((this.tagBits & TagBits.HasDirectWildcard) == 0)   return this;  TypeBinding[] originalArguments=this.arguments;  int length=originalArguments.length;  TypeBinding[] capturedArguments=new TypeBinding[length];  ReferenceBinding contextType=scope.enclosingSourceType();  if (contextType != null)   contextType=contextType.outermostEnclosingType();  for (int i=0; i < length; i++) {    TypeBinding argument=originalArguments[i];    if (argument.kind() == Binding.WILDCARD_TYPE) {      capturedArguments[i]=new CaptureBinding((WildcardBinding)argument,contextType,position,scope.compilationUnitScope().nextCaptureID());    } else {      capturedArguments[i]=argument;    }  }  ParameterizedTypeBinding capturedParameterizedType=this.environment.createParameterizedType(this.type,capturedArguments,enclosingType());  for (int i=0; i < length; i++) {    TypeBinding argument=capturedArguments[i];    if (argument.isCapture()) {      ((CaptureBinding)argument).initializeBounds(scope,capturedParameterizedType);    }  }  return capturedParameterizedType;}  }
class C{  public static MPrintFormat copyToClient(Properties ctx,int AD_PrintFormat_ID,int to_Client_ID){  return copy(ctx,AD_PrintFormat_ID,0,to_Client_ID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.214 -0500",hash_original_method="85E1DE95D8123E292DCFF62F7D93B47F",hash_generated_method="8A7C619EAF677F2600E4007D5EC728C9") protected int findTokenSeparator(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  final int to=this.currentHeader.length();  while (!found && (from < to)) {    final char ch=this.currentHeader.charAt(from);    if (isTokenSeparator(ch)) {      found=true;    } else     if (isWhitespace(ch)) {      from++;    } else     if (isTokenChar(ch)) {      throw new ParseException("Tokens without separator (pos " + from + "): "+ this.currentHeader);    } else {      throw new ParseException("Invalid character after token (pos " + from + "): "+ this.currentHeader);    }  }  return from;}  }
class C{  private Image calculateImage(){  Thread me=Thread.currentThread();  int width=canvas.getSize().width;  int height=canvas.getSize().height;  int xvals[]=new int[2];  int yvals[]=new int[2];  int xmethod=XControls.getParams(xvals);  int ymethod=YControls.getParams(yvals);  int pixels[]=new int[width * height];  int c[]=new int[4];  int index=0;  for (int j=0; j < height; j++) {    for (int i=0; i < width; i++) {      c[0]=c[1]=c[2]=0;      c[3]=255;      if (xmethod < ymethod) {        applyMethod(c,xmethod,i,width,xvals);        applyMethod(c,ymethod,j,height,yvals);      } else {        applyMethod(c,ymethod,j,height,yvals);        applyMethod(c,xmethod,i,width,xvals);      }      pixels[index++]=((c[3] << 24) | (c[0] << 16) | (c[1] << 8)| c[2]);    }    if (runner != me) {      return null;    }  }  return createImage(new MemoryImageSource(width,height,ColorModel.getRGBdefault(),pixels,0,width));}  }
class C{  public char current(){  if (count != 0 && pos < offset + count) {    return array[pos];  }  return DONE;}  }
class C{  public float modelX(float x,float y,float z){  showMissingWarning("modelX");  return 0;}  }
class C{  private Base64(){}  }
class C{  public static Map<String,Object> createEmailAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> newContext=UtilMisc.makeMapWritable(context);  newContext.put("infoString",newContext.get("emailAddress"));  newContext.remove("emailAddress");  newContext.put("contactMechTypeId","EMAIL_ADDRESS");  return createContactMech(ctx,newContext);}  }
class C{  protected Vector checkPathForJars(String cp,String[] jars){  if ((null == cp) || (null == jars) || (0 == cp.length())|| (0 == jars.length))   return null;  Vector v=new Vector();  StringTokenizer st=new StringTokenizer(cp,File.pathSeparator);  while (st.hasMoreTokens()) {    String filename=st.nextToken();    for (int i=0; i < jars.length; i++) {      if (filename.indexOf(jars[i]) > -1) {        File f=new File(filename);        if (f.exists()) {          try {            Hashtable h=new Hashtable(2);            h.put(jars[i] + "-path",f.getAbsolutePath());            if (!("xalan.jar".equalsIgnoreCase(jars[i]))) {              h.put(jars[i] + "-apparent.version",getApparentVersion(jars[i],f.length()));            }            v.addElement(h);          } catch (          Exception e) {          }        } else {          Hashtable h=new Hashtable(2);          h.put(jars[i] + "-path",WARNING + " Classpath entry: " + filename+ " does not exist");          h.put(jars[i] + "-apparent.version",CLASS_NOTPRESENT);          v.addElement(h);        }      }    }  }  return v;}  }
class C{  protected void childInsertedAtModelIndex(int index,boolean isExpandedAndVisible){  FHTreeStateNode aChild;  int maxCounter=getChildCount();  for (int counter=0; counter < maxCounter; counter++) {    aChild=(FHTreeStateNode)getChildAt(counter);    if (aChild.childIndex >= index) {      if (isExpandedAndVisible) {        adjustRowBy(1,counter);        adjustRowCountBy(1);      }      for (; counter < maxCounter; counter++)       ((FHTreeStateNode)getChildAt(counter)).childIndex++;      childCount++;      return;    }  }  if (isExpandedAndVisible) {    adjustRowBy(1,maxCounter);    adjustRowCountBy(1);  }  childCount++;}  }
class C{  public static synchronized JobConf createTestMRJobConf() throws IOException {  return getHadoopTestBinding().createTestMRJobConf();}  }
class C{  public int[] Gen_columnIndices(android.database.Cursor cursor){  int[] result=new int[GEN_COUNT];  result[0]=cursor.getColumnIndex(GEN_FIELD__ID);  if (result[0] == -1) {    result[0]=cursor.getColumnIndex("_ID");  }  result[1]=cursor.getColumnIndex(GEN_FIELD_SENTTEXT);  return result;}  }
class C{  public static void main(String[] args){  System.out.println("\n i    m(i)");  System.out.println("-----------");  for (int i=1; i <= 10; i++) {    System.out.printf("%2d%8.2f\n",i,m(i));  }}  }
class C{  IntervalWalker(LinearScan allocator,Interval unhandledFixed,Interval unhandledAny){  this.allocator=allocator;  unhandledLists=new RegisterBindingLists(unhandledFixed,unhandledAny,Interval.EndMarker);  activeLists=new RegisterBindingLists(Interval.EndMarker,Interval.EndMarker,Interval.EndMarker);  inactiveLists=new RegisterBindingLists(Interval.EndMarker,Interval.EndMarker,Interval.EndMarker);  currentPosition=-1;}  }
class C{  public static int totalNQueens(int n){  ans=0;  limit=(1 << n) - 1;  dfs(0,0,0);  return ans;}  }
class C{  public static List<Object> runHqlQuery(Session session,String queryString,@Nullable Object[] parameters){  return runHqlQuery(session,queryString,parameters,null,null);}  }
class C{  private void initializeViewFields(){  mIconView=(ImageView)findViewById(R.id.detail_icon);  mDateView=(TextView)findViewById(R.id.detail_date_textview);  mFriendlyDateView=(TextView)findViewById(R.id.detail_day_textview);  mLocationName=(TextView)findViewById(R.id.detail_locationName);  mDescriptionView=(TextView)findViewById(R.id.detail_forecast_textview);  mCelsiusTempView=(TextView)findViewById(R.id.detail_high_textview);  mFarhenheitTempView=(TextView)findViewById(R.id.detail_low_textview);  mHumidityView=(TextView)findViewById(R.id.detail_humidity_textview);  mWindView=(TextView)findViewById(R.id.detail_wind_textview);  mSunriseView=(TextView)findViewById(R.id.detail_sunrise_textview);  mSunsetView=(TextView)findViewById(R.id.detail_sunset_textview);}  }
class C{  public DefaultHighlighter(){  drawsLayeredHighlights=true;}  }
class C{  @Override public void unload(){  this.drawable=null;}  }
class C{  public ViPRCatalogClient withAuthToken(String token){  setAuthToken(token);  return this;}  }
