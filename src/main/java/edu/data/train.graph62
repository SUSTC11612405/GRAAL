class C{  public void updateChanges(Object watchOutFor) throws ObjectDeletedException {}  }
class C{  protected void testAdd(final SequentialFileFactory factory,final int numberOfElements) throws Exception {  SequentialFile file=factory.createSequentialFile("00010.page");  Page impl=new Page(new SimpleString("something"),new NullStorageManager(),factory,file,10);  Assert.assertEquals(10,impl.getPageId());  impl.open();  Assert.assertEquals(1,factory.listFiles("page").size());  SimpleString simpleDestination=new SimpleString("Test");  ArrayList<ActiveMQBuffer> buffers=addPageElements(simpleDestination,impl,numberOfElements);  impl.sync();  impl.close();  file=factory.createSequentialFile("00010.page");  file.open();  impl=new Page(new SimpleString("something"),new NullStorageManager(),factory,file,10);  List<PagedMessage> msgs=impl.read(new NullStorageManager());  Assert.assertEquals(numberOfElements,msgs.size());  Assert.assertEquals(numberOfElements,impl.getNumberOfMessages());  for (int i=0; i < msgs.size(); i++) {    Assert.assertEquals(simpleDestination,msgs.get(i).getMessage().getAddress());    ActiveMQTestBase.assertEqualsByteArrays(buffers.get(i).toByteBuffer().array(),msgs.get(i).getMessage().getBodyBuffer().toByteBuffer().array());  }  impl.delete(null);  Assert.assertEquals(0,factory.listFiles(".page").size());}  }
class C{  public final boolean isViewedAsDeprecated(){  return (this.modifiers & (ClassFileConstants.AccDeprecated | ExtraCompilerModifiers.AccDeprecatedImplicitly)) != 0 || getPackage().isViewedAsDeprecated();}  }
class C{  private void notifyDataListeners(DataSetEvent e){  for (  DataSourceListener l : m_dataListeners) {    l.acceptDataSet(e);  }}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public void renumberLines(int step){  int number=step;  MOrderLine[] lines=getLines(true,null);  for (int i=0; i < lines.length; i++) {    MOrderLine line=lines[i];    line.setLine(number);    line.save(get_TrxName());    number+=step;  }  m_lines=null;}  }
class C{  @GET @Controller @Produces("text/html") @Path("view1/{id}") public String view1(@PathParam("id") String id){  final Book book=new Book();  book.setId(id);  book.setAuthor("Some author");  book.setTitle("Some title");  book.setIsbn("Some ISBN");  models.put("book",book);  return "book.jsp";}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case CURSOR_ID:  return isSetCursorId();case VALUES:return isSetValues();}throw new IllegalStateException();}  }
class C{  public boolean follow(final ActiveEntity entity){  if (currentGoal == null) {    return false;  }  if ((currentGoal.getX() == entity.getX()) && (currentGoal.getY() == entity.getY())) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Completed waypoint #" + pos + "@"+ currentGoal+ " on Path");    }    if (++pos >= nodes.size()) {      if (!isLoop()) {        LOGGER.debug("Completed path");        return false;      }      pos=0;    }    currentGoal=nodes.get(pos);  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Moving to waypoint #" + pos + "@"+ currentGoal+ " on Path from ("+ entity.getX()+ ","+ entity.getY()+ ")");  }  entity.faceto(currentGoal.getX(),currentGoal.getY());  return true;}  }
class C{  ElementInfo(Element element,ElementInfo parent){  this.element=element;  this.parent=parent;  isValid=false;  canBeValid=true;}  }
class C{  public static <X>void mergeSafely(Map<String,List<X>> primary,Map<String,List<X>> secondary){  if (primary == null || secondary == null) {    return;  }  for (  String key : secondary.keySet()) {    if (primary.containsKey(key)) {      primary.get(key).addAll(secondary.get(key));    } else {      primary.put(key,secondary.get(key));    }  }}  }
class C{  public DrawerBuilder withStickyHeader(@LayoutRes int stickyHeaderRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (stickyHeaderRes != -1) {    this.mStickyHeaderView=mActivity.getLayoutInflater().inflate(stickyHeaderRes,null,false);  }  return this;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  out.writeObject(sender);  out.writeObject(recipients);  out.writeObject(state);  out.writeObject(errorMessage);  out.writeObject(name);  out.writeObject(remoteHost);  out.writeObject(remoteAddr);  out.writeObject(lastUpdated);  out.writeObject(attributes);}  }
class C{  List<Type> attribAnyTypes(List<JCExpression> trees,Env<AttrContext> env){  ListBuffer<Type> argtypes=new ListBuffer<Type>();  for (List<JCExpression> l=trees; l.nonEmpty(); l=l.tail)   argtypes.append(attribType(l.head,env));  return argtypes.toList();}  }
class C{  public void manage(ICompilationUnit cu,TextChange change){  fMap.put(cu,change);}  }
class C{  public void testAccumulateAndGet(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  ai.accumulate(2.0);  assertEquals(2.0,ai.get());  ai.accumulate(-4.0);  assertEquals(2.0,ai.get());  ai.accumulate(4.0);  assertEquals(4.0,ai.get());}  }
class C{  public static String toString(int value){  return Integer.toString(value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void flush() throws IOException {  if (writer != null) {    writer.flush();  }  outstr.flush();}  }
class C{  public static void closeQuiet(@Nullable Selector rsrc){  if (rsrc != null)   try {    if (rsrc.isOpen())     rsrc.close();  } catch (  IOException ignored) {  }}  }
class C{  public static Matcher<Route> hasUriAndMethod(final String method,final String uri){  return both(new RouteHasMethod(method)).and(new RouteHasUri(uri));}  }
class C{  public static void applyActionRecursivelyOnEntities(Entity root,Consumer<Entity> action){  action.accept(root);  NodeComponent nodeComponent=ComponentRetriever.get(root,NodeComponent.class);  if (nodeComponent != null && nodeComponent.children != null) {    for (    Entity targetEntity : nodeComponent.children) {      applyActionRecursivelyOnEntities(targetEntity,action);    }  }}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append(crossFeedResolution);  result.append('x');  result.append(feedResolution);  result.append(" dphi");  return result.toString();}  }
class C{  public static boolean isNotInternal(DataObjectRestRep value){  return (value != null) && !Boolean.TRUE.equals(value.getInternal());}  }
class C{  public List<Entity> extractHashtagsWithIndices(final String text){  return extractHashtagsWithIndices(text,true);}  }
class C{  final Expression superTransform(Expression expr){  return super.transform(expr);}  }
class C{  private static List<String> extractTextItems(){  List<String> retList=new ArrayList<String>();  SFileChooser chooser=new SFileChooser(getDictionaryDirectory(),"text file","txt");  chooser.addExtension("rtf");  File theFile=chooser.showOpenDialog();  if (theFile != null) {    Scanner scanner;    try {      scanner=new Scanner(new FileReader(theFile));      try {        while (scanner.hasNextLine()) {          Scanner lineScan=new Scanner(scanner.nextLine());          while (lineScan.hasNext()) {            String word=lineScan.next();            retList.add(word);          }        }      }  finally {        scanner.close();        setDictionaryDirectory(chooser.getCurrentLocation());      }    } catch (    FileNotFoundException e) {      e.printStackTrace();    }  }  return retList;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected int capacity(){  return _values.length;}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public float update(){  value=0;  for (int i=1; i <= maxHarmonics; i+=2) {    value+=1.0 / i * (float)Math.sin(i * phase);  }  value*=amp;  value+=offset;  cyclePhase(frequency + fmod.update());  return value;}  }
class C{  public Builder jsonData(byte[] data){  this.data=data;  this.isJsonData=true;  return this;}  }
class C{  protected void assertResult(String expected,Statement stat,String sql) throws SQLException {  ResultSet rs=stat.executeQuery(sql);  if (rs.next()) {    String actual=rs.getString(1);    Assert.assertEquals(expected,actual);  } else {    Assert.assertEquals(expected,null);  }}  }
class C{  private void stop(final ObjectName namePattern,final String pidAttribute,final String stopMethod,final String[] attributes,final Object[] values) throws ConnectionFailedException, IOException, MBeanInvocationFailedException {  invokeOperationOnTargetMBean(namePattern,pidAttribute,stopMethod,attributes,values);}  }
class C{  public ESRIPointRecord(double x,double y){  this.x=x;  this.y=y;}  }
class C{  protected RuleMatchPair matchWithRule(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  FirewallRule matched_rule=null;  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  AllowDropPair adp=new AllowDropPair(sw.getOFFactory());synchronized (rules) {    Iterator<FirewallRule> iter=this.rules.iterator();    FirewallRule rule=null;    while (iter.hasNext()) {      rule=iter.next();      if (rule.matchesThisPacket(sw.getId(),(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)),eth,adp) == true) {        matched_rule=rule;        break;      }    }  }  RuleMatchPair rmp=new RuleMatchPair();  rmp.rule=matched_rule;  if (matched_rule == null) {    Match.Builder mb=OFFactories.getFactory(pi.getVersion()).buildMatch();    mb.setExact(MatchField.IN_PORT,(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT))).setExact(MatchField.ETH_SRC,eth.getSourceMACAddress()).setExact(MatchField.ETH_DST,eth.getDestinationMACAddress()).setExact(MatchField.ETH_TYPE,eth.getEtherType());    if (mb.get(MatchField.ETH_TYPE).equals(EthType.IPv4)) {      IPv4 ipv4=(IPv4)eth.getPayload();      mb.setExact(MatchField.IPV4_SRC,ipv4.getSourceAddress()).setExact(MatchField.IPV4_DST,ipv4.getDestinationAddress()).setExact(MatchField.IP_PROTO,ipv4.getProtocol());      if (mb.get(MatchField.IP_PROTO).equals(IpProtocol.TCP)) {        TCP tcp=(TCP)ipv4.getPayload();        mb.setExact(MatchField.TCP_SRC,tcp.getSourcePort()).setExact(MatchField.TCP_DST,tcp.getDestinationPort());      } else       if (mb.get(MatchField.IP_PROTO).equals(IpProtocol.UDP)) {        UDP udp=(UDP)ipv4.getPayload();        mb.setExact(MatchField.UDP_SRC,udp.getSourcePort()).setExact(MatchField.UDP_DST,udp.getDestinationPort());      } else {      }    }    rmp.match=mb.build();  } else   if (matched_rule.action == FirewallRule.FirewallAction.DROP) {    rmp.match=adp.drop.build();  } else {    rmp.match=adp.allow.build();  }  return rmp;}  }
class C{  private DeadCodeRemover(SsaMethod ssaMethod){  this.ssaMeth=ssaMethod;  regCount=ssaMethod.getRegCount();  worklist=new BitSet(regCount);  useList=ssaMeth.getUseListCopy();}  }
class C{  public String toHtmlTable(HttpServletRequest request,SessionContext context,Collection distPrefs,String title) throws Exception {  String backId=("PreferenceGroup".equals(request.getParameter("backType")) ? request.getParameter("backId") : null);  WebTable.setOrder(context,"examDistPrefsTable.ord",request.getParameter("order"),4);  WebTable tbl=new WebTable(3,title,"examDistributionPrefs.do?order=%%",new String[]{" Type "," Exam "," Class/Course "},new String[]{"left","left","left"},new boolean[]{true,true,true});  int nrPrefs=0;  for (Iterator i1=distPrefs.iterator(); i1.hasNext(); ) {    DistributionPref dp=(DistributionPref)i1.next();    if (!context.hasPermission(dp,Right.ExaminationDistributionPreferenceDetail))     continue;    boolean prefEditable=context.hasPermission(dp,Right.ExaminationDistributionPreferenceEdit);    nrPrefs++;    String examStr="";    String objStr="";    for (Iterator i2=dp.getOrderedSetOfDistributionObjects().iterator(); i2.hasNext(); ) {      DistributionObject dO=(DistributionObject)i2.next();      Exam exam=(Exam)dO.getPrefGroup();      examStr+=dO.preferenceText();      for (Iterator i3=exam.getOwners().iterator(); i3.hasNext(); ) {        ExamOwner owner=(ExamOwner)i3.next();        objStr+=owner.getLabel();        if (i3.hasNext()) {          examStr+="<BR>";          objStr+="<BR>";        }      }      if (i2.hasNext()) {        examStr+="<BR>";        objStr+="<BR>";      }    }    String distType=dp.getDistributionType().getLabel();    String prefLevel=dp.getPrefLevel().getPrefName();    String prefColor=dp.getPrefLevel().prefcolor();    if (PreferenceLevel.sNeutral.equals(dp.getPrefLevel().getPrefProlog()))     prefColor="gray";    String onClick=null;    boolean gray=false;    if (prefEditable) {      onClick="onClick=\"document.location='examDistributionPrefs.do" + "?dp=" + dp.getUniqueId().toString() + "&op=view'\"";    }    boolean back=dp.getUniqueId().toString().equals(backId);    tbl.addLine(onClick,new String[]{(back ? "<A name=\"back\"</A>" : "") + (gray ? "<span style='color:gray;'>" : "<span style='color:" + prefColor + ";font-weight:bold;' title='"+ prefLevel+ " "+ distType+ "'>") + distType+ "</span>",(gray ? "<span style='color:gray;'>" : "") + examStr + (gray ? "</span>" : ""),(gray ? "<span style='color:gray;'>" : "") + objStr + (gray ? "</span>" : "")},new Comparable[]{distType,examStr,objStr});  }  if (nrPrefs == 0)   tbl.addLine(null,new String[]{"No preferences found","",""},null);  return tbl.printTable(WebTable.getOrder(context,"examDistPrefsTable.ord"));}  }
class C{  public SpannableStringBuilder(CharSequence text){  this(text,0,text.length());}  }
class C{  public boolean isAll(){  return all;}  }
class C{  @Override public final boolean shouldPerform(OptOptions options){  return options.SSA_GCP || options.SSA_GCSE;}  }
class C{  public void addPart(String key,File file,String type){  if (type == null) {    type=APPLICATION_OCTET_STREAM;  }  fileParts.add(new FilePart(key,file,type));}  }
class C{  protected final void _matchToken(String matchStr,int i) throws IOException, JsonParseException {  final int len=matchStr.length();  do {    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOFInValue();      }    }    if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {      _reportInvalidToken(matchStr.substring(0,i),"'null', 'true', 'false' or NaN");    }    ++_inputPtr;  } while (++i < len);  if (_inputPtr >= _inputEnd) {    if (!loadMore()) {      return;    }  }  char c=_inputBuffer[_inputPtr];  if (c < '0' || c == ']' || c == '}') {    return;  }  if (Character.isJavaIdentifierPart(c)) {    _reportInvalidToken(matchStr.substring(0,i),"'null', 'true', 'false' or NaN");  }  return;}  }
class C{  public Pagination evaluate(final Class entityClass){  Paginate paginate=entityClass != null ? (Paginate)entityClass.getAnnotation(Paginate.class) : null;  int defaultLimit=paginate != null ? paginate.defaultLimit() : DEFAULT_PAGE_LIMIT;  int maxLimit=paginate != null ? paginate.maxLimit() : MAX_PAGE_LIMIT;  evaluate(defaultLimit,maxLimit);  generateTotals=generateTotals && (paginate == null || paginate.countable());  return this;}  }
class C{  public boolean hasReachedZero(){  return maxForwards == 0;}  }
class C{  private void recomputeSeperation(double[][] means,double[] sep,double[][] cdist){  final int k=means.length;  assert (sep.length == k);  boolean issquared=(distanceFunction instanceof SquaredEuclideanDistanceFunction);  Arrays.fill(sep,Double.POSITIVE_INFINITY);  for (int i=1; i < k; i++) {    DoubleVector mi=DoubleVector.wrap(means[i]);    for (int j=0; j < i; j++) {      double d=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));      d=issquared ? Math.sqrt(d) : d;      d*=.5;      cdist[i][j]=d;      cdist[j][i]=d;      sep[i]=(d < sep[i]) ? d : sep[i];      sep[j]=(d < sep[j]) ? d : sep[j];    }  }}  }
class C{  private static Credential authorize() throws Exception {  clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(OAuth2Sample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/ " + "into oauth2-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,SCOPES).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  private void dealMessage(boolean isReply,String res){  Document document=Jsoup.parse(res);  if (isReply) {    Elements elemens=document.select(".nts").select("dl.cl");    if (elemens.size() > 0) {      int last_message_id=getSharedPreferences(App.MY_SHP_NAME,MODE_PRIVATE).getInt(App.NOTICE_MESSAGE_KEY,0);      int noticeId=Integer.parseInt(elemens.get(0).attr("notice"));      ishaveReply=last_message_id < noticeId;    }  } else {    Elements lists=document.select(".pmbox").select("ul").select("li");    if (lists.size() > 0) {      ishavePm=lists.get(0).select(".num").text().length() > 0;    }  }  if (ishaveReply || ishavePm) {    messageHandler.sendEmptyMessage(0);  } else {    messageHandler.sendEmptyMessage(-1);  }}  }
class C{  public boolean parse(BashPsiBuilder builder){  if (ParserUtil.hasNextTokens(builder,true,EXPR_ARITH,_EXPR_ARITH)) {    builder.advanceLexer();    builder.advanceLexer();    return true;  }  if (ParserUtil.hasNextTokens(builder,true,EXPR_ARITH_SQUARE,_EXPR_ARITH_SQUARE)) {    builder.advanceLexer();    builder.advanceLexer();    return true;  }  if (builder.getTokenType() == BashTokenTypes.EXPR_ARITH_SQUARE) {    return parse(builder,BashTokenTypes.EXPR_ARITH_SQUARE,BashTokenTypes._EXPR_ARITH_SQUARE);  }  return parse(builder,BashTokenTypes.EXPR_ARITH,BashTokenTypes._EXPR_ARITH);}  }
class C{  public void test(){}  }
class C{  public boolean isCollapsed(){  return collapsed;}  }
class C{  public static void addChemicalWasherRecipe(GasStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalWasherRecipe",GasStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public ReactionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  int sizeCountingDeadAndAliveElements(){  return cache.size();}  }
class C{  public ComputeExecutionRejectedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  private static void printCodePoint(Appendable out,int c,EscapeMode mode) throws IOException {switch (c) {case 0:    out.append(mode == EscapeMode.JSON ? "\\u0000" : "\\0");  return;case '\t':out.append("\\t");return;case '\n':if (mode == EscapeMode.ION_LONG_STRING) {out.append('\n');} else {out.append("\\n");}return;case '\r':out.append("\\r");return;case '\f':out.append("\\f");return;case '\u0008':out.append("\\b");return;case '\u0007':out.append(mode == EscapeMode.JSON ? "\\u0007" : "\\a");return;case '\u000B':out.append(mode == EscapeMode.JSON ? "\\u000b" : "\\v");return;case '\"':if (mode == EscapeMode.JSON || mode == EscapeMode.ION_STRING) {out.append("\\\"");return;}break;case '\'':if (mode == EscapeMode.ION_SYMBOL || mode == EscapeMode.ION_LONG_STRING) {out.append("\\\'");return;}break;case '\\':out.append("\\\\");return;default :break;}if (c < 32) {if (mode == EscapeMode.JSON) {printCodePointAsFourHexDigits(out,c);} else {printCodePointAsTwoHexDigits(out,c);}} else if (c < 0x7F) {out.append((char)c);} else if (c <= 0xFF) {if (mode == EscapeMode.JSON) {printCodePointAsFourHexDigits(out,c);} else {printCodePointAsTwoHexDigits(out,c);}} else if (c <= 0xFFFF) {printCodePointAsFourHexDigits(out,c);} else {if (mode == EscapeMode.JSON) {printCodePointAsSurrogatePairHexDigits(out,c);} else {printCodePointAsEightHexDigits(out,c);}}}  }
class C{  protected void checkParameters() throws BuildException {  if (this.moduleSet.getModules().isEmpty()) {    throw new BuildException("You must specify a <module> or <moduleset>");  }}  }
class C{  public int writeShiftedGamma(int x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < MAX_PRECOMPUTED)   return writeInt(SHIFTED_GAMMA[x],SHIFTED_GAMMA[x] >>> 26);  final int msb=Fast.mostSignificantBit(x);  final int l=writeUnary(msb + 1);  return l + (msb > 0 ? writeInt(x,msb) : 0);}  }
class C{  public void addVectorJoin(QGisLayer layer,String joinFieldName,String targetFieldName,String zField){  this.vectorJoins.add(new VectorJoin(layer.getId(),joinFieldName,targetFieldName));  this.header+=this.delimiter + layer.getName() + "_"+ zField;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public boolean isShowDetails(){  return myState.SHOW_DETAILS;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isTransient(){  return false;}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public void nextBytes(byte[] bytes){  final int length=bytes.length;  for (int i=0; i < length; ) {    for (int rnd=nextInt(), n=Math.min(length - i,INTEGER_SIZE / BYTE_SIZE); n-- > 0; rnd>>=BYTE_SIZE) {      bytes[i++]=(byte)rnd;    }  }}  }
class C{  private Message newEnemyPrototype() throws IOException {  Message village=messageFactory.newMessage(EnemyHomeData);  village.set("timeStamp",(int)(System.currentTimeMillis() / 1000));  village.set("age",0);  return village;}  }
class C{  private Object readResolve(){  if (getDescriptor().getFieldNames().length == 0) {    OpenType<Object> xopenType=cast(openType);    Set<Object> xlegalValues=cast(legalValues);    Comparable<Object> xminValue=cast(minValue);    Comparable<Object> xmaxValue=cast(maxValue);    return new OpenMBeanParameterInfoSupport(name,description,openType,makeDescriptor(xopenType,defaultValue,xlegalValues,xminValue,xmaxValue));  } else   return this;}  }
class C{  public boolean hasOrgJobDescription(){  return hasExtension(OrgJobDescription.class);}  }
class C{  private static boolean checkInvoke(InsnNode insn,String declClsFullName,String mthId,int argsCount){  if (insn.getType() == InsnType.INVOKE) {    InvokeNode inv=(InvokeNode)insn;    MethodInfo callMth=inv.getCallMth();    if (callMth.getArgsCount() == argsCount && callMth.getShortId().equals(mthId) && inv.getInvokeType() == InvokeType.INTERFACE) {      return declClsFullName == null || callMth.getDeclClass().getFullName().equals(declClsFullName);    }  }  return false;}  }
class C{  public FillOutsideLine(Type type){  this.mType=type;}  }
class C{  public static boolean log4JIsConfigured(){  if (Logger.getRootLogger().getAllAppenders().hasMoreElements())   return true;  Enumeration<?> loggers=LogManager.getCurrentLoggers();  while (loggers.hasMoreElements()) {    Logger logger=(Logger)loggers.nextElement();    if (logger.getAllAppenders().hasMoreElements())     return true;  }  return false;}  }
class C{  public static double sampleSkewStandardError(int size){  int n=size;  return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3)));}  }
class C{  private String buildRemoteName(Account account,OCFile file){  return account.name + file.getRemotePath();}  }
class C{  public int size(){  return end - start;}  }
class C{  public static void initialize(){  if (initialized.compareAndSet(false,true)) {    initializeMXBean();  }}  }
class C{  protected List executeCriteriaReturnIdocarchhdrList(Locale locale,StringBuffer query) throws HibernateException {  Session session=null;  List result=null;  try {    session=getSession();    Criteria criteriaResults=session.createCriteria(getIdocarchhdrLanguage(locale.getLanguage()));    criteriaResults.add(Expression.sql(query.toString()));    result=criteriaResults.list();  }  finally {    this.closeSession(session);  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:28.427 -0500",hash_original_method="6907F2ED2DF57E219AB70EADED509565",hash_generated_method="30C160E12136D4D4A9C2EA4D3CA5489B") @Override public int hashCode(){  return super.hashCode() + ((int)(gregorianCutover >>> 32) ^ (int)gregorianCutover);}  }
class C{  public LRParser loadParser(){  try {    FileInputStream fis=new FileInputStream(fFileName);    ObjectInputStream ois=new ObjectInputStream(fis);    LRParser parser=(LRParser)ois.readObject();    return parser;  } catch (  FileNotFoundException fnfe) {    System.err.println("File Not Found: " + fFileName);  }catch (  IOException ioe) {    System.err.println("IOException when trying to load the parser");    System.err.println(ioe.getMessage());  }catch (  ClassNotFoundException cnfe) {    System.err.println("ClassNotFoundException when trying to load the parser");  }  return null;}  }
class C{  protected static void printlnerr(String msg){  System.err.println(msg);}  }
class C{  public static SetContext parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  SetContext object=new SetContext();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"setContext".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (SetContext)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","usageContext").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setUsageContext(null);        reader.next();        reader.next();      } else {        object.setUsageContext(UsageContext.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void debugServers(LinkedList servers){  Iterator itr=servers.iterator();  while (itr.hasNext()) {    ServerContainer container=(ServerContainer)itr.next();    log.debug(container + " mapped to --> " + container.getRule());  }}  }
class C{  public HadoopTaskStatus(HadoopTaskState state,@Nullable Throwable failCause,@Nullable HadoopCounters cntrs){  assert state != null;  this.state=state;  this.failCause=failCause;  this.cntrs=cntrs;}  }
class C{  public UnimplementedError(){  super();}  }
class C{  public RaceGUI(String appName){  UIManager.put("swing.boldMetal",Boolean.FALSE);  JFrame f=new JFrame(appName);  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setLayout(new BorderLayout());  track=new TrackView();  f.add(track,BorderLayout.CENTER);  controlPanel=new RaceControlPanel();  f.add(controlPanel,BorderLayout.SOUTH);  f.pack();  f.setVisible(true);}  }
class C{  public static Object toNull(Object value,Object defaultValue){  if (value == null)   return null;  if (value instanceof String && Caster.toString(value,"").trim().length() == 0)   return null;  if (value instanceof Number && ((Number)value).intValue() == 0)   return null;  return defaultValue;}  }
class C{  private void smoothScrollToPage(int velocity){  int width=getWidth();  int currentX=getScrollX();  int predictedX=currentX + velocity;  int page=currentX / width;  if (predictedX > page * width + width / 2) {    page=page + 1;  }  smoothScrollTo(page * width,getScrollY());}  }
class C{  private boolean isValidStatus(String statusStr){  boolean valid=false;  Status[] validStatus=Status.values();  for (  Status status : validStatus) {    if (status.name().toUpperCase().equals(statusStr.toUpperCase())) {      valid=true;      break;    }  }  return valid;}  }
class C{  @Override protected Void doInBackground(Void... params){  double amount=(double)frameCount++ / ANIMATION_FRAMES;  for (  Placemark aircraft : aircraftPositions.keySet()) {    Position origin=(Position)aircraft.getUserProperty("origin");    Position destination=(Position)aircraft.getUserProperty("destination");    Position currentPosition=aircraftPositions.get(aircraft);    origin.interpolateAlongPath(destination,WorldWind.GREAT_CIRCLE,amount,currentPosition);  }  return null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static double[] readTS(BufferedReader br,int columnIdx,int sizeLimit) throws IOException, SAXException {  ArrayList<Double> preRes=new ArrayList<Double>();  int lineCounter=0;  String line=null;  while ((line=br.readLine()) != null) {    String[] split=line.trim().split("\\s+");    if (split.length < columnIdx) {      String message="Unable to read data from column " + columnIdx;      br.close();      throw new SAXException(message);    }    String str=split[columnIdx];    double num=Double.NaN;    try {      num=Double.valueOf(str);    } catch (    NumberFormatException e) {      LOGGER.info("Skipping the row " + lineCounter + " with value \""+ str+ "\"");      continue;    }    preRes.add(num);    lineCounter++;    if ((0 != sizeLimit) && (lineCounter >= sizeLimit)) {      break;    }  }  br.close();  double[] res=new double[preRes.size()];  for (int i=0; i < preRes.size(); i++) {    res[i]=preRes.get(i);  }  return res;}  }
class C{  int _get() throws IOException {  int value=is.read();  if (value == -1)   throw new EOFException();  position++;  return value & 0xff;}  }
class C{  @SuppressWarnings("unchecked") public static Node createLabel(View owner,String hint){  DecorationNode nameLabel=NotationFactory.eINSTANCE.createDecorationNode();  nameLabel.setType(hint);  ShapeStyle style=NotationFactory.eINSTANCE.createShapeStyle();  style.setFontColor(FigureUtilities.RGBToInteger(ColorConstants.black.getRGB()));  nameLabel.getStyles().add(style);  ViewUtil.insertChildView(owner,nameLabel,ViewUtil.APPEND,true);  nameLabel.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());  return nameLabel;}  }
class C{  private boolean checkCancellationLocked(){  if (runState == CANCEL_REQUESTED) {    workerHandler.obtainMessage(MSG_CALL_ACKNOWLEDGE_CANCEL,this).sendToTarget();    return true;  }  return false;}  }
class C{  private String lockPath(String id){  return String.format("%1$s/%2$s",_workItemLockPath,id);}  }
class C{  public EchelonSymbol(String sidc){  super();  if (sidc == null) {    String msg=Logging.getMessage("nullValue.SymbolCodeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  SymbolCode symbolCode=new SymbolCode(sidc);  String echelon=symbolCode.getEchelon();  if (SymbolCode.isFieldEmpty(echelon)) {    String msg=Logging.getMessage("Symbology.InvalidSymbolCode",sidc);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.sidc=sidc;  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  this.setOffset(DEFAULT_OFFSET);  String iconRetrieverPath=Configuration.getStringValue(AVKey.MIL_STD_2525_ICON_RETRIEVER_PATH,MilStd2525Constants.DEFAULT_ICON_RETRIEVER_PATH);  this.setIconRetriever(new MilStd2525ModifierRetriever(iconRetrieverPath));}  }
class C{  public void addQualifierAndCondition(String qualifier,Condition condition){  List<Condition> conditions=qualifiersAndConditions.get(qualifier);  if (conditions == null) {    conditions=new ArrayList<Condition>();    qualifiersAndConditions.put(qualifier,conditions);  }  conditions.add(condition);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + freedom+ ")";}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void deserialize(final InputStream stream) throws IOException {  Collection<? extends String> empty=Collections.emptySet();  deserialize(stream,empty);}  }
class C{  private static Method[] discoverAccessibleMethods(Class<?> clazz,boolean includeProtected,boolean includePrivate){  Map<MethodSignature,Method> map=new HashMap<MethodSignature,Method>();  discoverAccessibleMethods(clazz,map,includeProtected,includePrivate);  return map.values().toArray(new Method[map.size()]);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent intent){}  }
class C{  @SuppressWarnings("rawtypes") private CIMInstance createAlertIndication(){  CIMObjectPath objPath=CimObjectPathCreator.createInstance(ALERT_INDICATION_CLASS_NAME);  CIMProperty[] properties=new CIMProperty[]{new CIMProperty<String>(ALERTING_MANGED_ELEMENT_KEY,CIMDataType.STRING_T,ALERTING_MANGED_ELEMENT_VALUE)};  CIMInstance indication=new CIMInstance(objPath,properties);  return indication;}  }
class C{  public static String formatDate(Date date){  return getSimplDateFormat(DF_LONG).format(date);}  }
class C{  private Builder(org.apache.nutch.storage.Host.Builder other){  super(other);}  }
class C{  public static boolean hasProperty(ClassNode classNode,String propertyName){  if (classNode == null || propertyName == null || "".equals(propertyName.trim()))   return false;  List properties=classNode.getProperties();  for (Iterator i=properties.iterator(); i.hasNext(); ) {    PropertyNode pn=(PropertyNode)i.next();    if (pn.getName().equals(propertyName))     return true;  }  return false;}  }
class C{  public static void loadJars(final Set<File> jarFiles,final IStandardDescriptionUpdater descriptionUpdater){  Preconditions.checkNotNull(jarFiles,"IE00700: JAR files argument can not be null");  Preconditions.checkNotNull(descriptionUpdater,"IE00701: Description updater argument can not be null");  descriptionUpdater.reset();  descriptionUpdater.setMaximum(jarFiles.size());  for (  final File file : jarFiles) {    descriptionUpdater.next();    descriptionUpdater.setDescription(String.format("Loading JAR file %s",file.getName()));    NaviLogger.info("Loading JAR file %s",file.getAbsolutePath());    ClassPathHacker.addFile(file);  }}  }
class C{  public Instance output(){  if (m_OutputFormat == null) {    throw new NullPointerException("No output instance format defined");  }  if (m_OutputQueue.empty()) {    return null;  }  Instance result=(Instance)m_OutputQueue.pop();  return result;}  }
class C{  private static void rejectUnsupportedOptions(Properties p) throws SQLFeatureNotSupportedException {  if (p.containsKey(DataSourceFactory.JDBC_ROLE_NAME)) {    throw new SQLFeatureNotSupportedException("The " + DataSourceFactory.JDBC_ROLE_NAME + " property is not supported by H2");  }  if (p.containsKey(DataSourceFactory.JDBC_DATASOURCE_NAME)) {    throw new SQLFeatureNotSupportedException("The " + DataSourceFactory.JDBC_DATASOURCE_NAME + " property is not supported by H2");  }}  }
class C{  public String diff_prettyHtml(LinkedList<Diff> diffs){  StringBuilder html=new StringBuilder();  for (  Diff aDiff : diffs) {    String text=aDiff.text.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\n","&para;<br>");switch (aDiff.operation) {case INSERT:      html.append("<ins style=\"background:#e6ffe6;\">").append(text).append("</ins>");    break;case DELETE:  html.append("<del style=\"background:#ffe6e6;\">").append(text).append("</del>");break;case EQUAL:html.append("<span>").append(text).append("</span>");break;}}return html.toString();}  }
class C{  public <T>Builder row(T firstCell,T secondCell,T thirdCell){  return tag("tr").cell(firstCell,false).cell(secondCell,false).cell(thirdCell).end();}  }
class C{  public Intent putExtra(String name,Parcelable[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putParcelableArray(name,value);  return this;}  }
class C{  public boolean containsKey(String itemName){  if (itemName == null) {    return false;  }  return nameToDescription.containsKey(itemName);}  }
class C{  @NonNull public static Animator moveTo(float x,float y,float duration){  return moveTo(x,y,duration,null);}  }
class C{  public void transform(Reader in,Writer out) throws IOException {  BufferedReader br=(in instanceof BufferedReader) ? (BufferedReader)in : new BufferedReader(in);  PrintWriter pw=(out instanceof PrintWriter) ? (PrintWriter)out : new PrintWriter(out);  String line=br.readLine();  if (line != null) {    if (line.length() > 0) {      pw.println(line);    }  }  while ((line=br.readLine()) != null) {    pw.println(line);  }}  }
class C{  public static List<String> deleteInstances(VerificationHost host,Compute compute,String projectId,String zoneId,List<String> instanceNames,int batchSize,long interval) throws Throwable {  if (batchSize <= 0) {    throw new Exception("batch size cannot be less or equal to zero.");  }  if (interval <= 0) {    throw new Exception("waiting interval cannot be less or equal to zero");  }  List<String> instancesToCleanUp=new ArrayList<>();  if (instanceNames != null) {    int num=instanceNames.size();    com.google.api.services.compute.model.Operation[] ops=new com.google.api.services.compute.model.Operation[num];    String[] zones=new String[num];    String[] opIds=new String[num];    for (int i=0; i < num; i++) {      String instanceName=instanceNames.get(i);      try {        ops[i]=compute.instances().delete(projectId,zoneId,instanceName).execute();        zones[i]=ops[i].getZone();        zones[i]=extractZoneFromZoneUri(zones[i]);        opIds[i]=ops[i].getName();        if ((i + 1) % batchSize == 0) {          TimeUnit.MILLISECONDS.sleep(interval);        }      } catch (      Exception e) {        host.log(Level.WARNING,"Error when deleting instances: " + e.getMessage());        e.printStackTrace();        instancesToCleanUp.add(instanceName);      }    }    waitForOperationsDone(host,compute,projectId,ops,zones,opIds);  }  return instancesToCleanUp;}  }
class C{  @Override public void onPostExecute(Integer totalContactsDeleted){  Utils.showToast(mOps.getActivityContext(),totalContactsDeleted + " contact(s) deleted");}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.198 -0500",hash_original_method="6539B8063CABFAD0D8EBA84883A1CF66",hash_generated_method="6539B8063CABFAD0D8EBA84883A1CF66") void startElement(String uri,String localName,String qName,int attributePointer,int attributeCount) throws SAXException {  ContentHandler contentHandler=xmlReader.contentHandler;  if (contentHandler == null) {    return;  }  try {    inStartElement=true;    this.attributePointer=attributePointer;    this.attributeCount=attributeCount;    contentHandler.startElement(uri,localName,qName,this.attributes);  }  finally {    inStartElement=false;    this.attributeCount=-1;    this.attributePointer=0;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, z2, lowestNeighbour;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  boolean isPit;  double aSmallValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          isPit=true;          lowestNeighbour=Float.POSITIVE_INFINITY;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              if (z2 < lowestNeighbour) {                lowestNeighbour=z2;              }              if (z2 < z) {                isPit=false;              }            }          }          if (isPit && lowestNeighbour < Float.POSITIVE_INFINITY) {            output.setValue(row,col,lowestNeighbour + aSmallValue);          } else {            output.setValue(row,col,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void dragEnter(DragSourceDragEvent dsde){}  }
class C{  private double normVector(double[] z){  double sum=0;  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    sum+=z[i] * z[i];  }  return Math.sqrt(sum);}  }
class C{  public ImageBorderCuttingWizard(EditableResources res,String theme,ImageBorderWizard wiz,ImageBorderAppliesToWizard applies){  this.res=res;  this.theme=theme;  this.wiz=wiz;  this.applies=applies;  initComponents();  bottom.setModel(new SpinnerNumberModel(5,1,1000,1));  left.setModel(new SpinnerNumberModel(5,1,1000,1));  right.setModel(new SpinnerNumberModel(5,1,1000,1));  top.setModel(new SpinnerNumberModel(5,1,1000,1));  zoom.setModel(new SpinnerNumberModel(1,1,10,1));  cropTop.setModel(new SpinnerNumberModel(0,0,1000,1));  cropBottom.setModel(new SpinnerNumberModel(0,0,1000,1));  cropLeft.setModel(new SpinnerNumberModel(0,0,1000,1));  cropRight.setModel(new SpinnerNumberModel(0,0,1000,1));  wiz.setWiz(imageLabel);  multiImageComboActionPerformed(null);}  }
class C{  public CassandraProtos.HeapConfig toProto(){  return CassandraProtos.HeapConfig.newBuilder().setSizeMb(sizeMb).setNewMb(newMb).setGcType(gcType.ordinal()).build();}  }
class C{  public SimpleDateFormat(String pattern){  super();  this.pattern=pattern;}  }
class C{  public int numRecords(){  return super.numRecords();}  }
class C{  protected Texture requestTexture(DrawContext dc){  if (this.isBufferedImageSource())   return this.makeBufferedImageTexture(dc);  if (this.getTextureData() != null && this.getTexture(dc) == null)   return this.makeTextureFromTextureData(dc);  if (WorldWind.getTaskService().isFull())   return null;  Runnable task=this.createRequestTask();  if (WorldWind.getTaskService().contains(task))   return null;  this.listener=dc.getCurrentLayer() != null ? dc.getCurrentLayer() : dc.getLayers();  WorldWind.getTaskService().addTask(task);  return null;}  }
class C{  public void addLayoutComponent(String name,Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public ComputationException(@Nullable Throwable cause){  super(cause);}  }
class C{  public void testDifferentBuildOrder(){  String[] newData=new String[m_Data.length];  for (int i=0; i < m_Data.length; i++)   newData[i]=m_Data[m_Data.length - i - 1];  Trie t2=buildTrie(m_Data);  if (!m_Trie.equals(t2))   fail("Tries differ");}  }
class C{  public static void main(String[] args){  System.err.println(Utils.doubleToString(getTimestamp().doubleValue(),4));}  }
class C{  private OptionalUtil(){  instanceNotAllowed(getClass());}  }
class C{  public static TextEdit format2(int kind,String string,int indentationLevel,String lineSeparator,Map options){  int length=string.length();  if (0 < 0 || length < 0 || 0 + length > string.length()) {    throw new IllegalArgumentException("offset or length outside of string. offset: " + 0 + ", length: "+ length+ ", string size: "+ string.length());  }  return ToolFactory.createCodeFormatter(options).format(kind,string,0,length,indentationLevel,lineSeparator);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrentityreplacement.class,args);}  }
class C{  private File showOpenDialogSwing(){  JFileChooser chooser=new JFileChooser();  setCurrentDirectory(chooser);  if (exts.size() > 1) {    chooser.addChoosableFileFilter(new ExtensionSetFileFilter(exts.keySet(),description));  }  if (useViewer) {    ImagePreviewPanel preview=new ImagePreviewPanel();    chooser.setAccessory(preview);    chooser.addPropertyChangeListener(preview);  }  addExtensions(chooser);  if (chooser.showDialog(null,"Open") == JFileChooser.APPROVE_OPTION) {    currentDirectory=chooser.getCurrentDirectory().getPath();    return chooser.getSelectedFile();  } else {    return null;  }}  }
class C{  public FormatException(String s){  super(s);}  }
class C{  public static Response createAllocationResponse(Request request,TransportAddress mappedAddress,TransportAddress relayedAddress,byte[] token,int lifetime) throws IllegalArgumentException {  Response allocationSuccessResponse=new Response();  allocationSuccessResponse.setMessageType(Message.ALLOCATE_RESPONSE);  XorMappedAddressAttribute xorMappedAddressAttribute=AttributeFactory.createXorMappedAddressAttribute(mappedAddress,request.getTransactionID());  allocationSuccessResponse.putAttribute(xorMappedAddressAttribute);  XorRelayedAddressAttribute xorRelayedAddressAttribute=AttributeFactory.createXorRelayedAddressAttribute(relayedAddress,request.getTransactionID());  allocationSuccessResponse.putAttribute(xorRelayedAddressAttribute);  LifetimeAttribute lifetimeAttribute=AttributeFactory.createLifetimeAttribute(lifetime);  allocationSuccessResponse.putAttribute(lifetimeAttribute);  if (token != null) {    ReservationTokenAttribute reservationTokenAttribute=AttributeFactory.createReservationTokenAttribute(token);    allocationSuccessResponse.putAttribute(reservationTokenAttribute);  }  return allocationSuccessResponse;}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  private void registerEventListeners(Map<Object,Object> expMap){  registerEventListeners(expMap,false);}  }
class C{  private CTagFunctions(){}  }
class C{  public void loadAccessors(Class<?> targetClass,MappedField configuredField,MappedField targetField){  xml.fillMappedField(configuredClass,configuredField).fillMappedField(targetClass,targetField).fillOppositeField(configuredClass,configuredField,targetField);  Annotation.fillMappedField(configuredClass,configuredField);  Annotation.fillMappedField(targetClass,targetField);  Annotation.fillOppositeField(configuredClass,configuredField,targetField);}  }
class C{  public synchronized void openChannel(InputStream in){  if (DEBUG) {    System.out.println("AudioDevice: openChannel");    System.out.println("input stream =" + in);  }  Info info=null;  for (int i=0; i < infos.size(); i++) {    info=(AudioDevice.Info)infos.elementAt(i);    if (info.in == in) {      return;    }  }  AudioInputStream as=null;  if (in instanceof AudioStream) {    if (((AudioStream)in).midiformat != null) {      try {        startMidi(((AudioStream)in).stream,in);      } catch (      Exception e) {        return;      }    } else     if (((AudioStream)in).ais != null) {      try {        startSampled(((AudioStream)in).ais,in);      } catch (      Exception e) {        return;      }    }  } else   if (in instanceof AudioDataStream) {    if (in instanceof ContinuousAudioDataStream) {      try {        AudioInputStream ais=new AudioInputStream(in,((AudioDataStream)in).getAudioData().format,AudioSystem.NOT_SPECIFIED);        startSampled(ais,in);      } catch (      Exception e) {        return;      }    } else {      try {        AudioInputStream ais=new AudioInputStream(in,((AudioDataStream)in).getAudioData().format,((AudioDataStream)in).getAudioData().buffer.length);        startSampled(ais,in);      } catch (      Exception e) {        return;      }    }  } else {    BufferedInputStream bis=new BufferedInputStream(in,1024);    try {      try {        as=AudioSystem.getAudioInputStream(bis);      } catch (      IOException ioe) {        return;      }      startSampled(as,in);    } catch (    UnsupportedAudioFileException e) {      try {        try {          MidiFileFormat mff=MidiSystem.getMidiFileFormat(bis);        } catch (        IOException ioe1) {          return;        }        startMidi(bis,in);      } catch (      InvalidMidiDataException e1) {        AudioFormat defformat=new AudioFormat(AudioFormat.Encoding.ULAW,8000,8,1,1,8000,true);        try {          AudioInputStream defaif=new AudioInputStream(bis,defformat,AudioSystem.NOT_SPECIFIED);          startSampled(defaif,in);        } catch (        UnsupportedAudioFileException es) {          return;        }catch (        LineUnavailableException es2) {          return;        }      }catch (      MidiUnavailableException e2) {        return;      }    }catch (    LineUnavailableException e) {      return;    }  }  notify();}  }
class C{  public Union(final int nomEntries,final SummaryFactory<S> summaryFactory){  nomEntries_=nomEntries;  summaryFactory_=summaryFactory;  sketch_=new QuickSelectSketch<S>(nomEntries,summaryFactory);  theta_=sketch_.getThetaLong();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  LogConnection(DiskLog diskLog,boolean readonly){  this.diskLog=diskLog;  this.readonly=readonly;  this.eventSerializer=diskLog.getEventSerializer();  this.doChecksum=diskLog.isDoChecksum();  this.timeoutMillis=diskLog.getTimeoutMillis();  this.logRotateMillis=diskLog.getLogRotateMillis();  if (!readonly) {    this.logFileSize=diskLog.getLogFileSize();  }}  }
class C{  public static int calcMemSize(Object o){  return calcMemSize(o,null,true);}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void startProduction(ImageConsumer ic){  if (proxies == null) {    proxies=new Hashtable();  }  ImageFilter imgf=(ImageFilter)proxies.get(ic);  if (imgf == null) {    imgf=filter.getFilterInstance(ic);    proxies.put(ic,imgf);  }  src.startProduction(imgf);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.246 -0500",hash_original_method="CE14A4FF29D58642FE2BEF405E27FE95",hash_generated_method="B663E5509391218D52F5860CEB3FAC99") @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos < buf.length) {      return buf[pos++];    }    return in.read();  }}  }
class C{  private void createPlatformSpecificImpls(CoordinatorClient coordinator){  _snapshotSessionImpls.put(SnapshotSessionImpl.dflt.name(),new DefaultBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.vmax.name(),new VMAXBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.vmax3.name(),new VMAX3BlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.vnx.name(),new VNXBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.vnxe.name(),new VNXEBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.hds.name(),new HDSBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.openstack.name(),new OpenstackBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.scaleio.name(),new ScaleIOBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.xtremio.name(),new XtremIOBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.xiv.name(),new XIVBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.vplex.name(),new VPlexBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));  _snapshotSessionImpls.put(SnapshotSessionImpl.rp.name(),new RPBlockSnapshotSessionApiImpl(_dbClient,coordinator,_permissionsHelper,_securityContext,this));}  }
class C{  public boolean isModify(){  return modify;}  }
class C{  public static String createBgRGBString(Color c,double opacity){  return "-fx-control-inner-background: " + createRGBAString(c,opacity);}  }
class C{  public OAuthRsaSha1Signer(String privateKeyString) throws OAuthException {  if (privateKeyString == null) {    throw new OAuthException("Private key string cannot be null");  } else   if (privateKeyString.length() == 0) {    throw new OAuthException("Private key string cannot be empty");  }  try {    setPrivateKey(RsaSha1PrivateKeyHelper.getPrivateKey(privateKeyString));  } catch (  Base64DecoderException e) {    throw new OAuthException("Invalid private key",e);  }catch (  NoSuchAlgorithmException e) {    throw new OAuthException("Invalid private key",e);  }catch (  InvalidKeySpecException e) {    throw new OAuthException("Invalid private key",e);  }}  }
class C{  public static <B>Builder<B> builder(){  return new Builder<B>();}  }
class C{  public ToneAnalyzer(String versionDate){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }  this.versionDate=versionDate;}  }
class C{  private void publishEventToCalendar(Event event) throws EPAuthenticationException, IOException, ServiceException {  CalendarService calService=getCalService();  CalendarEventEntry entry=null;  if (event.getCalendarUrl() != null) {    entry=calService.getEntry(event.getCalendarUrl(),CalendarEventEntry.class);  } else {    entry=new CalendarEventEntry();  }  entry.setTitle(new PlainTextConstruct(event.getTitle()));  entry.setContent(new PlainTextConstruct(event.getDescription()));  When when=new When();  DateTime startDateTime=new DateTime(event.getStartDate());  startDateTime.setDateOnly(true);  Calendar endDateCal=new GregorianCalendar();  endDateCal.setTime(event.getEndDate());  endDateCal.add(Calendar.DATE,1);  DateTime endDateTime=new DateTime(endDateCal.getTime());  endDateTime.setDateOnly(true);  when.setStartTime(startDateTime);  when.setEndTime(endDateTime);  entry.getTimes().add(when);  if (event.getCalendarUrl() != null) {    entry.update();  } else {    CalendarEventEntry resultEntry=calService.insert(calUrl,entry);    updateSsEventEditUrl(event.getSsEditUrl(),resultEntry.getEditLink().getHref(),null);  }}  }
class C{  public void addToExistingInitiatorsIfAbsent(List<String> ports){  if (_existingInitiators == null) {    _existingInitiators=new StringSet();  }  for (  String port : ports) {    String normalizedPort=Initiator.normalizePort(port);    if (!_existingInitiators.contains(normalizedPort) && (_userAddedInitiators == null || !_userAddedInitiators.containsKey(normalizedPort))) {      _existingInitiators.add(normalizedPort);    }  }}  }
class C{  public boolean hasCustomVariables(){  return hasRepeatingExtension(CustomVariable.class);}  }
class C{  public static int indexOfCause(Throwable parent,Class<? extends Throwable> causeClass,final boolean isSubtypeOk){  return indexOfCause(parent,causeClass,START_INDEX,isSubtypeOk);}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  protected void beginMyTurn(){  target=null;  if (!clientgui.bv.isMovingUnits()) {    clientgui.setDisplayVisible(true);  }  clientgui.bv.clearFieldofF();  selectEntity(clientgui.getClient().getFirstEntityNum());  GameTurn turn=clientgui.getClient().getMyTurn();  if ((turn instanceof GameTurn.TriggerAPPodTurn) && (ce() != null)) {    disableButtons();    TriggerAPPodDialog dialog=new TriggerAPPodDialog(clientgui.getFrame(),ce());    dialog.setVisible(true);    attacks.removeAllElements();    Enumeration<TriggerAPPodAction> actions=dialog.getActions();    while (actions.hasMoreElements()) {      attacks.addElement(actions.nextElement());    }    ready();  } else   if ((turn instanceof GameTurn.TriggerBPodTurn) && (null != ce())) {    disableButtons();    TriggerBPodDialog dialog=new TriggerBPodDialog(clientgui,ce(),((GameTurn.TriggerBPodTurn)turn).getAttackType());    dialog.setVisible(true);    attacks.removeAllElements();    Enumeration<TriggerBPodAction> actions=dialog.getActions();    while (actions.hasMoreElements()) {      attacks.addElement(actions.nextElement());    }    ready();  } else {    setNextEnabled(true);    butDone.setEnabled(true);    if (numButtonGroups > 1)     buttons.get(FiringCommand.FIRE_MORE).setEnabled(true);    setFireCalledEnabled(clientgui.getClient().getGame().getOptions().booleanOption("tacops_called_shots"));    clientgui.getBoardView().select(null);  }}  }
class C{  public void updateNCharacterStream(int columnIndex,Reader x,int length) throws SQLException {  throw new NotUpdatable();}  }
class C{  public void switchNetwork(final String networkDefinition) throws FileNotFoundException, IOException {  this.log.info("SWITCH NETWORK: switching to '" + networkDefinition + "'");  final boolean lcp=crawlJobIsPaused(SwitchboardConstants.CRAWLJOB_LOCAL_CRAWL);  if (!lcp) {    pauseCrawlJob(SwitchboardConstants.CRAWLJOB_LOCAL_CRAWL,"network switch to " + networkDefinition);  }  final boolean rcp=crawlJobIsPaused(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL);  if (!rcp) {    pauseCrawlJob(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL,"network switch to " + networkDefinition);  }  this.proxyLastAccess=System.currentTimeMillis() + 3000;  this.log.info("SWITCH NETWORK: SHUT DOWN OF OLD INDEX DATABASE...");  SearchEventCache.cleanupEvents(true);synchronized (this) {    CollectionConfiguration collectionConfiguration=this.index.fulltext().getDefaultConfiguration();    WebgraphConfiguration webgraphConfiguration=this.index.fulltext().getWebgraphConfiguration();    this.crawler.close();    if (this.dhtDispatcher != null) {      this.dhtDispatcher.close();    }    this.crawlStacker.announceClose();    this.crawlStacker.close();synchronized (this.index) {      this.index.close();    }    this.webStructure.close();    this.log.info("SWITCH NETWORK: START UP OF NEW INDEX DATABASE...");    setConfig("network.unit.definition",networkDefinition);    overwriteNetworkDefinition(getSysinfo());    final File indexPrimaryPath=getDataPath(SwitchboardConstants.INDEX_PRIMARY_PATH,SwitchboardConstants.INDEX_PATH_DEFAULT);    final int wordCacheMaxCount=(int)getConfigLong(SwitchboardConstants.WORDCACHE_MAX_COUNT,20000);    final long fileSizeMax=(OS.isWindows) ? this.getConfigLong("filesize.max.win",Integer.MAX_VALUE) : this.getConfigLong("filesize.max.other",Integer.MAX_VALUE);    final int redundancy=(int)this.getConfigLong("network.unit.dhtredundancy.senior",1);    final int partitionExponent=(int)this.getConfigLong("network.unit.dht.partitionExponent",0);    final String networkName=getConfig(SwitchboardConstants.NETWORK_NAME,"");    this.networkRoot=new File(new File(indexPrimaryPath,networkName),"NETWORK");    this.queuesRoot=new File(new File(indexPrimaryPath,networkName),"QUEUES");    this.networkRoot.mkdirs();    this.queuesRoot.mkdirs();    ResultURLs.clearStacks();    setConfig(SwitchboardConstants.HEURISTIC_SITE,false);    setConfig(SwitchboardConstants.HEURISTIC_OPENSEARCH,false);    this.peers.relocate(this.networkRoot,redundancy,partitionExponent,this.useTailCache,this.exceed134217727);    final File segmentsPath=new File(new File(indexPrimaryPath,networkName),"SEGMENTS");    final File archivePath=getDataPath(SwitchboardConstants.INDEX_ARCHIVE_PATH,SwitchboardConstants.INDEX_ARCHIVE_DEFAULT);    this.index=new Segment(this.log,segmentsPath,archivePath,collectionConfiguration,webgraphConfiguration);    if (this.getConfigBool(SwitchboardConstants.CORE_SERVICE_RWI,true))     this.index.connectRWI(wordCacheMaxCount,fileSizeMax);    if (this.getConfigBool(SwitchboardConstants.CORE_SERVICE_CITATION,true))     this.index.connectCitation(wordCacheMaxCount,fileSizeMax);    if (this.getConfigBool(SwitchboardConstants.CORE_SERVICE_FULLTEXT,true)) {      this.index.fulltext().connectLocalSolr();    }    this.index.fulltext().setUseWebgraph(this.getConfigBool(SwitchboardConstants.CORE_SERVICE_WEBGRAPH,false));    final String solrurls=getConfig(SwitchboardConstants.FEDERATED_SERVICE_SOLR_INDEXING_URL,"http://127.0.0.1:8983/solr");    final boolean usesolr=getConfigBool(SwitchboardConstants.FEDERATED_SERVICE_SOLR_INDEXING_ENABLED,false) & solrurls.length() > 0;    final int solrtimeout=getConfigInt(SwitchboardConstants.FEDERATED_SERVICE_SOLR_INDEXING_TIMEOUT,60000);    final boolean writeEnabled=getConfigBool(SwitchboardConstants.FEDERATED_SERVICE_SOLR_INDEXING_WRITEENABLED,true);    if (usesolr && solrurls != null && solrurls.length() > 0) {      try {        ArrayList<RemoteInstance> instances=RemoteInstance.getShardInstances(solrurls,null,null,solrtimeout);        String shardMethodName=getConfig(SwitchboardConstants.FEDERATED_SERVICE_SOLR_INDEXING_SHARDING,ShardSelection.Method.MODULO_HOST_MD5.name());        ShardSelection.Method shardMethod=ShardSelection.Method.valueOf(shardMethodName);        this.index.fulltext().connectRemoteSolr(instances,shardMethod,writeEnabled);      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }    }    this.crawlQueues.relocate(this.queuesRoot);    this.crawler=new CrawlSwitchboard(this);    this.dhtDispatcher=(this.peers.sizeConnected() == 0) ? null : new Dispatcher(this.index,this.peers,true,10000);    this.webStructure=new WebStructureGraph(new File(this.queuesRoot,"webStructure.map"));    try {      this.domainList=null;      if (!getConfig("network.unit.domainlist","").equals("")) {        final Reader r=getConfigFileFromWebOrLocally(getConfig("network.unit.domainlist",""),getAppPath().getAbsolutePath(),new File(this.networkRoot,"domainlist.txt"));        this.domainList=new FilterEngine();        BufferedReader br=new BufferedReader(r);        this.domainList.loadList(br,null);        br.close();      }    } catch (    final FileNotFoundException e) {      this.log.severe("CONFIG: domainlist not found: " + e.getMessage());    }catch (    final IOException e) {      this.log.severe("CONFIG: error while retrieving domainlist: " + e.getMessage());    }    this.crawlStacker=new CrawlStacker(this.robots,this.crawlQueues,this.crawler,this.index,this.peers,"local.any".indexOf(getConfig(SwitchboardConstants.NETWORK_DOMAIN,"global")) >= 0,"global.any".indexOf(getConfig(SwitchboardConstants.NETWORK_DOMAIN,"global")) >= 0,this.domainList);  }  Domains.setNoLocalCheck(isAllIPMode());  continueCrawlJob(SwitchboardConstants.CRAWLJOB_LOCAL_CRAWL);  continueCrawlJob(SwitchboardConstants.CRAWLJOB_REMOTE_TRIGGERED_CRAWL);  this.log.info("SWITCH NETWORK: FINISHED START UP, new network is now '" + networkDefinition + "'.");  setRemotecrawlPPM(Math.max(1,(int)getConfigLong("network.unit.remotecrawl.speed",60)));}  }
class C{  public void close(){  workspace.getWorkspaceWatcher().stopWatching();  workspace.getClient().getEventEngine().removeWorkspaceUpdatedListener(listenerAdapter);  workspace.getClient().getEventEngine().removeFolderContentChangedListener(listenerAdapter);  workspace.getClient().getEventEngine().removeGetCompletedListener(listenerAdapter);  workspace.getClient().getEventEngine().removeScannerModifiedFilesListener(listenerAdapter);  workspace.getClient().getEventEngine().removeLocalWorkspaceScanListener(listenerAdapter);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (deactivate_for_1: ");  result.append(deactivate_for_1);  result.append(')');  return result.toString();}  }
class C{  public void modifyLocations(double x,double y,double z){  for (int a=0; a < location_size; a++) {    location_x[a]+=x;    location_y[a]+=y;    location_z[a]+=z;  }  for (int j=0; j < num_children; j++)   daughters[j].modifyLocations(x,y,z);}  }
class C{  public CommandExitLatch(CommandFuture... futures){  for (  CommandFuture future : futures) {    register(future);  }}  }
class C{  private Method findAddRemoveListenerMethod(Class<?> sourceClass,String methodName) throws IntrospectionException {  try {    return sourceClass.getMethod(methodName,listenerType);  } catch (  NoSuchMethodException e) {    return findAddRemoveListnerMethodWithLessCheck(sourceClass,methodName);  }catch (  Exception e) {    throw new IntrospectionException(Messages.getString("beans.31",methodName,listenerType.getName()));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ServiceCall<RecognitionJob> createRecognitionJob(final File audio,final RecognizeOptions recognizeOptions,final RecognitionJobOptions recognitionJobOptions){  Validator.isTrue((audio != null) && audio.exists(),"audio file is null or does not exist");  final double fileSize=audio.length() / Math.pow(1024,2);  Validator.isTrue(fileSize < 100.0,"The audio file is greater than 100MB.");  String contentType=MediaTypeUtils.getMediaTypeFromFile(audio);  if ((recognizeOptions != null) && (recognizeOptions.contentType() != null)) {    contentType=recognizeOptions.contentType();  }  Validator.notNull(contentType,"The audio format cannot be recognized");  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_RECOGNITIONS);  buildRecognizeRequest(requestBuilder,recognizeOptions);  buildRecognitionJobRequest(requestBuilder,recognitionJobOptions);  requestBuilder.body(RequestBody.create(MediaType.parse(contentType),audio));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(RecognitionJob.class));}  }
class C{  public boolean isModification(){  return getAddedCount() == getRemovedCount();}  }
class C{  public void addValue(String key,double val,int precision,String comment) throws HeaderCardException {  this.iter.add(new HeaderCard(key,val,precision,comment));}  }
class C{  public String filterTipText(){  return "The Weka filter to apply to the data.";}  }
class C{  public ConvexHullScan(int numThreads){  this.numThreads=numThreads;}  }
class C{  public static int pairHash(int i,int j,int k,int l){  int t=pairHash(i,j);  t=pairHash(t,k);  return pairHash(t,l);}  }
class C{  public boolean isHeightOneLine(){  Object oo=get_Value(COLUMNNAME_IsHeightOneLine);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private List<String> filterTargetsFromResponse(Set<String> varrayTaggedPortWWNs,Map<String,List<String>> initiatorTargetMap,String initiatorKey){  log.debug("START - filterTargetsFromResponse");  List<String> filteredTargetList=new ArrayList<String>();  List<String> targetPortListFromResponse=initiatorTargetMap.get(initiatorKey);  for (  String portWWN : targetPortListFromResponse) {    if (varrayTaggedPortWWNs.contains(portWWN) || varrayTaggedPortWWNs.contains(portWWN.toUpperCase())) {      filteredTargetList.add(portWWN.toUpperCase());    }  }  log.debug("END - filterTargetsFromResponse");  return filteredTargetList;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public static String htmlLinkText(final String text){  return text == null ? null : "<html><a href=\"#\">" + LUtils.safeForHtml(text) + "</a></html>";}  }
class C{  public String metricTypeTipText(){  return "Set the type of metric by which to rank rules. Confidence is " + "the proportion of the examples covered by the premise that are also " + "covered by the consequence (Class association rules can only be mined using confidence). Lift is confidence divided by the "+ "proportion of all examples that are covered by the consequence. This "+ "is a measure of the importance of the association that is independent "+ "of support. Leverage is the proportion of additional examples covered "+ "by both the premise and consequence above those expected if the "+ "premise and consequence were independent of each other. The total "+ "number of examples that this represents is presented in brackets "+ "following the leverage. Conviction is "+ "another measure of departure from independence. Conviction is given "+ "by P(premise)P(!consequence) / P(premise, !consequence).";}  }
class C{  public ListDataModelTestCase(String name){  super(name);}  }
class C{  public String deltaTipText(){  return "Iteratively decrease support by this factor. Reduces support " + "until min support is reached or required number of rules has been " + "generated.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.694 -0500",hash_original_method="FC1D35A98936766B0E3F368A26829970",hash_generated_method="A695EF67F50A2FB4C68804D7D2441400") public void removeHeader(Header header){  if (header == null) {    return;  }  headers.remove(header);}  }
class C{  public void createOrUpdateConfig(Object objToPersist,String lockName,String configKind,String configId,String configKey) throws Exception {  createOrUpdateConfig(objToPersist,lockName,null,configKind,configId,configKey);}  }
class C{  boolean schedule(Runnable task,ClassLoader loader,long timeout){  return schedule(new RunnableItem(task,loader,timeout));}  }
class C{  public JdbcSQLException(String message,String sql,String state,int errorCode,Throwable cause,String stackTrace){  super(message,state,errorCode);  this.originalMessage=message;  setSQL(sql);  this.cause=cause;  this.stackTrace=stackTrace;  buildMessage();  initCause(cause);}  }
class C{  public synchronized void reset(String startScn) throws ReplicatorException {  String command;  if (startScn == null)   command=vmrrControlScript + " reset"; else   command=vmrrControlScript + " reset " + startScn;  if (logger.isDebugEnabled()) {    logger.debug("Resetting vmrr process: " + command);  }  String stdout=execAndReturnStdout(command,true);  logger.info(stdout);}  }
class C{  private String saveForm(String xml,File folder,String queuePathName){  String pathName;  if (queuePathName == null)   pathName=OpenmrsUtil.getOutFile(folder,new Date(),Context.getAuthenticatedUser()).getAbsolutePath(); else   pathName=folder.getAbsolutePath() + File.separatorChar + queuePathName.substring(queuePathName.lastIndexOf(File.separatorChar) + 1);  try {    FileWriter writter=new FileWriter(pathName,false);    writter.write(xml);    writter.close();    if (queuePathName != null) {      try {        File file=new File(queuePathName);        if (!file.delete())         file.deleteOnExit();      } catch (      Exception e) {        log.error(e.getMessage(),e);      }    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return pathName;}  }
class C{  public static void isLong(String member,String inputValue) throws ValidationException {  if (!GenericValidator.isLong(inputValue)) {    ValidationException vf=new ValidationException(ReasonEnum.LONG,member,new Object[]{inputValue});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGraphicsCubeFacePositiveX:    return "cudaGraphicsCubeFacePositiveX";case cudaGraphicsCubeFaceNegativeX:  return "cudaGraphicsCubeFaceNegativeX";case cudaGraphicsCubeFacePositiveY:return "cudaGraphicsCubeFacePositiveY";case cudaGraphicsCubeFaceNegativeY:return "cudaGraphicsCubeFaceNegativeY";case cudaGraphicsCubeFacePositiveZ:return "cudaGraphicsCubeFacePositiveZ";case cudaGraphicsCubeFaceNegativeZ:return "cudaGraphicsCubeFaceNegativeZ";}return "INVALID cudaGraphicsCubeFace: " + n;}  }
class C{  private StubUtility2(){}  }
class C{  private synchronized int augmentIterationId(Map<Id<Node>,DijkstraNodeData> nodeData){  if (this.iterationID == Integer.MAX_VALUE) {    this.iterationID=Integer.MIN_VALUE + 1;    resetNetworkVisited(nodeData);  } else {    this.iterationID++;  }  return this.iterationID;}  }
class C{  public ArgumentConverterTest(String sassValue,Object expectedValue,AbstractedCalledMock mock){  this.sassValue=sassValue;  this.expectedValue=expectedValue;  this.mock=mock;}  }
class C{  public static String rightBack(String source,String searchFor){  int index=source.lastIndexOf(searchFor) + searchFor.length();  if (index < 0) {    return "";  }  return source.substring(index);}  }
class C{  public Barrier(int queueCapacity){  this.queueCapacity=queueCapacity;}  }
class C{  public void addBean(String name,Object bean){  Assert.notNull(bean);  BeanDefine beanDefine=new BeanDefine(bean);  addBean(name,beanDefine);  Class<?>[] interfaces=beanDefine.getType().getInterfaces();  if (interfaces.length > 0) {    for (    Class<?> interfaceClazz : interfaces) {      this.addBean(interfaceClazz.getName(),beanDefine);    }  }}  }
class C{  byte[] readBinary() throws IOException {  TempOutputStream tos=new TempOutputStream();  while (true) {    int ch=read();    int len;switch (ch) {default :      _peek=ch;    return tos.toByteArray();case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:  len=ch - 0x20;readBinary(tos,len);return tos.toByteArray();case 0x34:case 0x35:case 0x36:case 0x37:len=((ch - 0x34) << 8) + read();readBinary(tos,len);return tos.toByteArray();case 'B':len=readShort();readBinary(tos,len);return tos.toByteArray();case 'A':len=readShort();readBinary(tos,len);break;}}}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ARRAY_ELEMENT__SPREAD:    return spread != SPREAD_EDEFAULT;case N4JSPackage.ARRAY_ELEMENT__EXPRESSION:  return expression != null;}return super.eIsSet(featureID);}  }
class C{  @Override public int hashCode(){  return this.xidToHexString.hashCode();}  }
class C{  public Bindings add(String property,String stateProperty,JToggleButton button,JTextArea textArea){  registerPropertyChangeListener(button);  registerPropertyChangeListener(textArea);  return add(new OptJTextAreaBinding(property,stateProperty,button,textArea));}  }
class C{  void ensureCapacity(final int bytesAmount){  if (currentByteArrayIndex + bytesAmount >= serializedData.length) {    int newSerializedDataArrayLength=(serializedData.length + 1) * 2;    while (currentByteArrayIndex + bytesAmount >= newSerializedDataArrayLength) {      newSerializedDataArrayLength=newSerializedDataArrayLength * 2;    }    final byte[] newSerializedDataArray=new byte[newSerializedDataArrayLength];    System.arraycopy(serializedData,0,newSerializedDataArray,0,currentByteArrayIndex);    serializedData=newSerializedDataArray;  }}  }
class C{  public static void put(byte[] source,byte[] target,int offset){  System.arraycopy(source,0,target,offset,source.length);}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  @Override public C instantiateClass(Parameterization config){  if (instance != null) {    return instance;  }  return instance=super.instantiateClass(config);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public Collection<?> toCollection(int column) throws SQLException {  return crsInternal.toCollection(column);}  }
class C{  public GraphSearcher(){  m_settings.addListener(m_internalSettingsListener);}  }
class C{  public void addEdge(String factor,LaggedFactor laggedFactor) throws IllegalArgumentException {  int lag=laggedFactor.getLag();  if (lag < 1 || lag > maxLagAllowable) {    throw new IllegalArgumentException("Illegal lag specified: " + laggedFactor);  }  TreeSet<LaggedFactor> list=(TreeSet<LaggedFactor>)connectivity.get(factor);  if (list != null) {    list.add(laggedFactor);  } else {    throw new IllegalArgumentException("Either factor not in graph (" + factor + ") or lagged factor not in graph or not into factor ("+ laggedFactor+ ").");  }}  }
class C{  public int updateAttributeValues(HttpServletRequest request){  if (get_ID() == 0)   save();  int count=0;  MRegistrationValue[] regValues=getValues(false);  for (int i=0; i < regValues.length; i++) {    MRegistrationValue regValue=regValues[i];    String attributeName=regValue.getRegistrationAttribute();    String dataValue=WebUtil.getParameter(request,attributeName);    if (dataValue == null)     continue;    regValue.setDescription("Previous=" + regValue.getName());    regValue.setName(dataValue);    if (regValue.save())     count++;  }  log.fine("updateAttributeValues - #" + count + " (of "+ regValues.length+ ")");  return count;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.643 -0500",hash_original_method="391E7039B2527FA351ED94B9C1004246",hash_generated_method="579B77F351718BE58AD7B7B280502260") private void ensureWebContentKeyBindings(){  if (sBindings.size() > 0) {    return;  }  String webContentKeyBindingsString=Settings.Secure.getString(mWebView.getContext().getContentResolver(),Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS);  SimpleStringSplitter semiColonSplitter=new SimpleStringSplitter(';');  semiColonSplitter.setString(webContentKeyBindingsString);  while (semiColonSplitter.hasNext()) {    String bindingString=semiColonSplitter.next();    if (TextUtils.isEmpty(bindingString)) {      Log.e(LOG_TAG,"Disregarding malformed Web content key binding: " + webContentKeyBindingsString);      continue;    }    String[] keyValueArray=bindingString.split("=");    if (keyValueArray.length != 2) {      Log.e(LOG_TAG,"Disregarding malformed Web content key binding: " + bindingString);      continue;    }    try {      long keyCodeAndModifiers=Long.decode(keyValueArray[0].trim());      String[] actionStrings=keyValueArray[1].split(":");      int[] actions=new int[actionStrings.length];      for (int i=0, count=actions.length; i < count; i++) {        actions[i]=Integer.decode(actionStrings[i].trim());      }      sBindings.add(new AccessibilityWebContentKeyBinding(keyCodeAndModifiers,actions));    } catch (    NumberFormatException nfe) {      Log.e(LOG_TAG,"Disregarding malformed key binding: " + bindingString);    }  }}  }
class C{  public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  @SuppressWarnings("unchecked") Class<? extends ComputeTask<?,?>> createResource(String fileName,boolean ignoreUnknownRsrc) throws IgniteSpiException {  if (scanPathDir.isDirectory())   fileName=fileName.substring(scanPathDir.getAbsolutePath().length() + 1);  if (fileName.endsWith(".class")) {    String str=fileName;    str=str.replaceAll("\\/|\\\\",".");    str=str.substring(0,str.indexOf(".class"));    try {      return (Class<? extends ComputeTask<?,?>>)clsLdr.loadClass(str);    } catch (    ClassNotFoundException e) {      if (ignoreUnknownRsrc) {      } else       throw new IgniteSpiException("Failed to load class: " + str,e);    }  }  return null;}  }
class C{  @Nullable public static int[] readIntArray(DataInput in) throws IOException {  int len=in.readInt();  if (len == -1)   return null;  int[] res=new int[len];  for (int i=0; i < len; i++)   res[i]=in.readInt();  return res;}  }
class C{  private Operation buildHostQuery(final State current,String datastoreId){  String reportedImageDatastoreFieldName=QueryTask.QuerySpecification.buildCollectionItemName(HostService.State.FIELD_NAME_REPORTED_IMAGE_DATASTORES);  QueryTask.QuerySpecification querySpecification=buildHostQuerySpec(current,reportedImageDatastoreFieldName,datastoreId);  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  private String convertName(String name){  if (name.indexOf(WM_EXT) > 0) {    return name.substring(0,name.indexOf(WM_EXT)) + VM_EXT;  } else {    return name;  }}  }
class C{  private boolean checkUnitExclusions(final Collection<Territory> Territories,final String exclType,final int numberNeeded,final List<PlayerID> players,final GameData data){  int numberMet=0;  boolean satisfied=false;  boolean useSpecific=false;  if (getUnitPresence() != null && !getUnitPresence().keySet().isEmpty()) {    useSpecific=true;  }  final Iterator<Territory> ownedTerrIter=Territories.iterator();  while (ownedTerrIter.hasNext()) {    final Territory terr=ownedTerrIter.next();    final Collection<Unit> allUnits=Match.getMatches(terr.getUnits().getUnits(),Matches.unitIsBeingTransported().invert());    if (exclType.equals("allied")) {      allUnits.removeAll(Match.getMatches(allUnits,Matches.unitIsOwnedByOfAnyOfThesePlayers(players)));      allUnits.retainAll(Match.getMatches(allUnits,Matches.alliedUnitOfAnyOfThesePlayers(players,data)));    } else     if (exclType.equals("direct")) {      allUnits.removeAll(Match.getMatches(allUnits,Matches.unitIsOwnedByOfAnyOfThesePlayers(players).invert()));    } else     if (exclType.equals("enemy")) {      allUnits.retainAll(Match.getMatches(allUnits,Matches.enemyUnitOfAnyOfThesePlayers(players,data)));    } else     if (exclType.equals("enemy_surface")) {      allUnits.retainAll(Match.getMatches(allUnits,new CompositeMatchAnd<>(Matches.enemyUnitOfAnyOfThesePlayers(players,data),Matches.UnitIsNotSub,Matches.UnitIsNotTransportButCouldBeCombatTransport)));    } else {      return false;    }    if (allUnits.size() == 0) {      numberMet+=1;      if (numberMet >= numberNeeded) {        satisfied=true;        if (!getCountEach()) {          break;        }      }    } else     if (useSpecific) {      final IntegerMap<String> unitComboMap=getUnitPresence();      final Set<String> unitCombos=unitComboMap.keySet();      boolean hasLess=false;      for (      final String uc : unitCombos) {        final int unitsMax=unitComboMap.getInt(uc);        if (uc == null || uc.equals("ANY") || uc.equals("any")) {          hasLess=allUnits.size() <= unitsMax;        } else {          final Set<UnitType> typesAllowed=data.getUnitTypeList().getUnitTypes(uc.split(":"));          hasLess=Match.getMatches(allUnits,Matches.unitIsOfTypes(typesAllowed)).size() <= unitsMax;        }        if (!hasLess) {          break;        }      }      if (hasLess) {        numberMet+=1;        if (numberMet >= numberNeeded) {          satisfied=true;          if (!getCountEach()) {            break;          }        }      }    }  }  if (getCountEach()) {    m_eachMultiple=numberMet;  }  return satisfied;}  }
class C{  public Instances(Instances source,int first,int toCopy){  this(source,toCopy);  if ((first < 0) || ((first + toCopy) > source.numInstances())) {    throw new IllegalArgumentException("Parameters first and/or toCopy out " + "of range");  }  source.copyInstances(first,this,toCopy);}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public NTSid(String stringSid){  if (stringSid == null) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("invalid.null.input.value","sun.security.util.AuthResources"));    Object[] source={"stringSid"};    throw new NullPointerException(form.format(source));  }  if (stringSid.length() == 0) {    throw new IllegalArgumentException(sun.security.util.ResourcesMgr.getString("Invalid.NTSid.value","sun.security.util.AuthResources"));  }  sid=new String(stringSid);}  }
class C{  public CheckoutPage(final PageParameters params){  super(params);  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  final Shop shop=ApplicationDirector.getCurrentShop();  final Customer customer=customerServiceFacade.getCheckoutCustomer(shop,cart);  final boolean guestInProgress=(params.getNamedKeys().contains(STEP) || "1".equals(params.get(GUEST).toString())) && customer != null && customer.isGuest();  final boolean sessionSignedIn=((AuthenticatedWebSession)getSession()).isSignedIn();  final boolean threeStepsProcess=guestInProgress || (params.get(THREE_STEPS_PROCESS).toBoolean(sessionSignedIn) && sessionSignedIn);  final String currentStep=params.get(STEP).toString(threeStepsProcess ? null : STEP_LOGIN);  if (currentStep == null) {    if (shippingServiceFacade.isSkippableAddress(cart)) {      final PageParameters parameters=new PageParameters(getPageParameters());      parameters.set(STEP,STEP_SHIPMENT);      setResponsePage(this.getClass(),parameters);    } else {      final PageParameters parameters=new PageParameters(getPageParameters());      parameters.set(STEP,STEP_ADDR);      setResponsePage(this.getClass(),parameters);    }  }  add(new FeedbackPanel(FEEDBACK)).add(new Fragment(NAVIGATION_VIEW,threeStepsProcess ? NAVIGATION_THREE_FRAGMENT : NAVIGATION_FOUR_FRAGMENT,this)).add(getContent(currentStep,customer,cart,guestInProgress,sessionSignedIn)).addOrReplace(new CheckoutFooter(FOOTER)).addOrReplace(new CheckoutHeader(HEADER)).add(new ServerSideJs("serverSideJs")).add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public MethodExplorer(final MethodDeclaration inner){  this.inner=inner;}  }
class C{  public void addInvitationRejectionListener(InvitationRejectionListener listener){synchronized (invitationRejectionListeners) {    if (!invitationRejectionListeners.contains(listener)) {      invitationRejectionListeners.add(listener);    }  }}  }
class C{  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {  memory.reset();  StringBuilder fooField=new StringBuilder();  StringBuilder termField=new StringBuilder();  final int numFooTerms=random().nextInt(250 * RANDOM_MULTIPLIER);  for (int i=0; i < numFooTerms; i++) {    fooField.append(" ");    fooField.append(randomTerm());  }  final int numTermTerms=random().nextInt(250 * RANDOM_MULTIPLIER);  for (int i=0; i < numTermTerms; i++) {    termField.append(" ");    termField.append(randomTerm());  }  Directory ramdir=new RAMDirectory();  Analyzer analyzer=randomAnalyzer();  IndexWriter writer=new IndexWriter(ramdir,new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));  Document doc=new Document();  Field field1=newTextField("foo",fooField.toString(),Field.Store.NO);  Field field2=newTextField("term",termField.toString(),Field.Store.NO);  doc.add(field1);  doc.add(field2);  writer.addDocument(doc);  writer.close();  memory.addField("foo",fooField.toString(),analyzer);  memory.addField("term",termField.toString(),analyzer);  LeafReader reader=(LeafReader)memory.createSearcher().getIndexReader();  TestUtil.checkReader(reader);  DirectoryReader competitor=DirectoryReader.open(ramdir);  duellReaders(competitor,reader);  IOUtils.close(reader,competitor);  assertAllQueries(memory,ramdir,analyzer);  ramdir.close();}  }
class C{  public static void deleteFilesIgnoringExceptions(Path... files){  deleteFilesIgnoringExceptions(Arrays.asList(files));}  }
class C{  public boolean isPrimaryKey(){  return primaryKey;}  }
class C{  private UpdateDocumentCommand(){}  }
class C{  @Override public String isExportFormatSupported(String mimeType){  return Exportable.FORMAT_NOT_SUPPORTED;}  }
class C{  public static BlockConsistencyGroup createCGFromUnManagedCG(UnManagedConsistencyGroup unManagedCG,Project project,TenantOrg tenant,DbClient dbClient){  BlockConsistencyGroup consistencyGroup=new BlockConsistencyGroup();  consistencyGroup.setId(URIUtil.createId(BlockConsistencyGroup.class));  consistencyGroup.setLabel(unManagedCG.getLabel());  consistencyGroup.setProject(new NamedURI(project.getId(),project.getLabel()));  consistencyGroup.setTenant(project.getTenantOrg());  consistencyGroup.setStorageController(unManagedCG.getStorageSystemUri());  consistencyGroup.addSystemConsistencyGroup(unManagedCG.getStorageSystemUri().toString(),consistencyGroup.getLabel());  consistencyGroup.addConsistencyGroupTypes(Types.LOCAL.name());  return consistencyGroup;}  }
class C{  public void store32(int addr,int value){  store32(addr,value,AccessSource.CODE);}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  super.finalize();}  }
class C{  private GridNode(String id,Coord coord){  this(id);  this.isShifting=false;  this.xMean=coord.getX();  this.yMean=coord.getY();}  }
class C{  private void migrateCMSettingsForExistingUsersIfNeeded(){  boolean hasMigratedCMSettings=mSharedPrefs.getBoolean(PREF_HAS_MIGRATED_CM_SETTINGS,false);  if (!hasMigratedCMSettings) {    long startTime=System.currentTimeMillis();    for (    UserInfo user : mUserManager.getUsers()) {      migrateCMSettingsForUser(user.id);    }    mSharedPrefs.edit().putBoolean(PREF_HAS_MIGRATED_CM_SETTINGS,true).commit();    long timeDiffMillis=System.currentTimeMillis() - startTime;    if (LOCAL_LOGV)     Log.d(TAG,"Migration finished in " + timeDiffMillis + " milliseconds");  }}  }
class C{  public static void binStats(final String[] args) throws Exception {  final Map<String,Stat> globalExtStatMap=new TreeMap<>();  final String[] folders={"bin-launcher","bin-sc2-textures","bin-sc2-balance-data","bin-ext-mod-api","bin-app-libs","bin-app","bin-tool","../ScelightOp/war/WEB-INF/classes"};  for (  final String folder : folders) {    final Map<String,Stat> extStatMap=new TreeMap<>();    countClasses(Paths.get(folder),extStatMap);    final Stat folderAllStat=new Stat("<ALL>");    for (    final Stat stat : extStatMap.values())     folderAllStat.add(stat);    extStatMap.put(folderAllStat.ext,folderAllStat);    printStats(folder,extStatMap);    for (    final Stat stat : extStatMap.values()) {      Stat globalStat=globalExtStatMap.get(stat.ext);      if (globalStat == null)       globalExtStatMap.put(stat.ext,globalStat=new Stat(stat.ext));      globalStat.add(stat);    }    if ("bin-app".equals(folder))     printStats("SCELIGHT BINARY STATS (so far)",globalExtStatMap);  }  printStats("PROJECT BINARY STATS",globalExtStatMap);}  }
class C{  private void stopSampleHost(){  this.sampleHost.stop();}  }
class C{  public NTSidUserPrincipal(String name){  super(name);}  }
class C{  protected void engineReset(){  if (first == false) {    md.reset();    first=true;  }}  }
class C{  public static void showConsoleWithProcess(@NotNull final ConsoleWithProcess consoleWithProcess,@Nullable final JComponent actionListenerComponent,@NotNull final String title,@NotNull final Project project,@Nullable final Collection<Runnable> closeListeners,@NotNull final AnAction... customActions){  final ConsoleStopProcessAction stopProcessAction=new ConsoleStopProcessAction(consoleWithProcess);  final Collection<Runnable> resultCloseListeners=new ArrayList<Runnable>(Collections.singleton(stopProcessAction));  if (closeListeners != null) {    resultCloseListeners.addAll(closeListeners);  }  final AnAction[] resultActions=ArrayUtil.mergeArrays(new AnAction[]{stopProcessAction},customActions);  showConsole(consoleWithProcess,actionListenerComponent,title,project,resultCloseListeners,resultActions);}  }
class C{  private static byte[] save(Bitmap src,Bitmap.CompressFormat format,int quality){  ByteArrayOutputStream outputStream=null;  try {    outputStream=new ByteArrayOutputStream();    src.compress(format,quality,outputStream);    return outputStream.toByteArray();  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      IOException e1) {        e1.printStackTrace();      }    }  }}  }
class C{  public MLOutput execute(String dmlScriptFilePath,ArrayList<String> args,String configFilePath) throws IOException, DMLException, ParseException {  String[] argsArr=new String[args.size()];  argsArr=args.toArray(argsArr);  return execute(dmlScriptFilePath,argsArr,false,configFilePath);}  }
class C{  public CompositeColorMap(ColorMap map1,ColorMap map2,ColorMap map3){  this(new ColorMap[]{map1,map2,map3});}  }
class C{  protected void processLocally(final DM dm){  this.svc=DLockService.getInternalServiceNamed(this.serviceName);  basicProcess(dm,true);}  }
class C{  public boolean enableBluetooth(boolean enable){  if (enable) {    if (!mBluetoothAdapter.isEnabled()) {      return mBluetoothAdapter.enable();    }    return true;  } else {    if (mBluetoothAdapter.isEnabled()) {      return mBluetoothAdapter.disable();    }    return false;  }}  }
class C{  private static Boolean isValidIPV4(final String ipAddress){  boolean status=false;  if (StringUtils.isNotEmpty(ipAddress)) {    status=InetAddressUtils.isIPv4Address(ipAddress);  }  return status;}  }
class C{  public boolean isIndividual(){  return INDIVIDUAL.equals(value);}  }
class C{  public void fitCanvas(){  if (sourceImage == null)   return;  Rectangle imageBound=sourceImage.getBounds();  Rectangle destRect=getClientArea();  double sx=(double)destRect.width / (double)imageBound.width;  double sy=(double)destRect.height / (double)imageBound.height;  double s=Math.min(sx,sy);  double dx=0.5 * destRect.width;  double dy=0.5 * destRect.height;  centerZoom(dx,dy,s,new AffineTransform());}  }
class C{  public LockResponse(@Nullable HeldLocksToken token,Map<LockDescriptor,LockClient> lockHolders){  this.token=token;  this.lockHolders=ImmutableSortedMap.copyOf(lockHolders);  isBlockAndRelease=false;  Preconditions.checkArgument(token != null || !this.lockHolders.isEmpty());}  }
class C{  public void closeEndpoint(InternalDistributedMember member,String reason,boolean notifyDisconnect){  TCPConduit tc=this.conduit;  if (tc != null) {    tc.removeEndpoint(member,reason,notifyDisconnect);  }}  }
class C{  @Override public void endRequest(){}  }
class C{  private void onPrinterChecked(PrinterId printerId,PrinterCapabilitiesInfo printerCapabilitiesInfo){  if (printerCapabilitiesInfo == null) {    final ArrayList<PrinterId> printerIds=new ArrayList<>();    printerIds.add(printerId);    removePrinters(printerIds);  } else {    List<PrinterInfo> printers=new ArrayList<>();    for (    PrinterInfo printer : getPrinters()) {      if (printer.getId().equals(printerId)) {        PrinterInfo printerWithCaps=new PrinterInfo.Builder(printerId,printer.getName(),PrinterInfo.STATUS_IDLE).setCapabilities(printerCapabilitiesInfo).build();        printers.add(printerWithCaps);      } else {        printers.add(printer);      }    }    addPrinters(printers);  }}  }
class C{  public ConstantNode asConstant(CanonicalizerTool tool,ValueNode forObject){  if (isStatic()) {    return ConstantFoldUtil.tryConstantFold(tool.getConstantFieldProvider(),tool.getConstantReflection(),tool.getMetaAccess(),field(),null);  } else   if (forObject.isConstant() && !forObject.isNullConstant()) {    return ConstantFoldUtil.tryConstantFold(tool.getConstantFieldProvider(),tool.getConstantReflection(),tool.getMetaAccess(),field(),forObject.asJavaConstant());  }  return null;}  }
class C{  public void plug(final Object plugin,final Class<?> plugInterface,final PlugInvoker<?> plugInvoker,final HandlerInvoker<?> handlerInvoker){  PlugInvoker plug=plugInvoker;  if (plugInvoker != null) {    invocationPlugs.put(plugInterface,plugInvoker);  } else {    plug=invocationPlugs.get(plugInterface);  }  if (handlerInvoker != null) {    plug.addPlugin(handlerInvoker);  } else {    plug.addPlugin(plugin);  }}  }
class C{  public void vertex(float[] v){  vertexCheck();  curveVertexCount=0;  float[] vertex=vertices[vertexCount];  System.arraycopy(v,0,vertex,0,VERTEX_FIELD_COUNT);  vertexCount++;}  }
class C{  public RrdDefTemplate(File xmlFile) throws IOException {  super(xmlFile);}  }
class C{  protected Shape createInnerFocus(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x - 1,y - 1,w + 2,h + 1,CornerSize.INNER_FOCUS,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y - 1,w + 3,h + 1);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y - 1,w + 2,h + 1,CornerSize.INNER_FOCUS,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x - 1,y - 1,w + 1,h + 1,CornerSize.INNER_FOCUS);}}  }
class C{  public boolean isChargeable(){  return type != PriceModelType.FREE_OF_CHARGE && type != PriceModelType.UNKNOWN;}  }
class C{  private static boolean insertClosingTagIfNecessary(char c,@NotNull Project project,@NotNull Editor editor,@NotNull PsiFile file){  if (c != CLOSE_TAG_SYMBOL || !CodeInsightSettings.getInstance().JAVADOC_GENERATE_CLOSING_TAG) {    return false;  }  PsiDocumentManager.getInstance(project).commitAllDocuments();  if (!isAppropriatePlace(editor,file)) {    return false;  }  int offset=editor.getCaretModel().getOffset();  Document document=editor.getDocument();  String tagName=getTagName(document.getText(),offset);  if (tagName == null || HtmlUtil.isSingleHtmlTag(tagName) || tagName.startsWith(COMMENT_PREFIX)) {    return false;  }  document.insertString(offset,String.valueOf(START_TAG_SYMBOL) + SLASH + tagName+ CLOSE_TAG_SYMBOL);  return true;}  }
class C{  private ImageView createBlankSpace(){  ImageView view=new ImageView(getContext());  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public void success(){  sendPluginResult(new PluginResult(PluginResult.Status.OK));}  }
class C{  public void testBadStreamBounds(){  ThreadLocalRandom r=ThreadLocalRandom.current();  Runnable[] throwingActions={null,null,null,null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  public static boolean isXMLPublicIdCharacter(char c){  return (c < 128) && (PUBLIC_ID_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  public JMenuRecentFiles(String title,int length){  super(title);  if (length > MAX_LENGTH) {    length=MAX_LENGTH;  }  jmiRecentFiles=new JMenuItemRecentFile[length];}  }
class C{  public boolean addLink(Link link,int posCoord,List<Coord> points){  for (  LinkAttached linkA : links)   if (linkA.getLink().getId().equals(link.getId()))   return false;  links.add(new LinkAttached(link,posCoord));  modified=true;  return isGoodPoint(points.get(posCoord));}  }
class C{  @Override public UtilityTable queryUtil(Query.UtilQuery query){  DoubleFactor queryFactor=createQueryFactor(query);  queryFactor.normalise();  return new UtilityTable(queryFactor.getUtilTable());}  }
class C{  public boolean more() throws JSONException {  next();  if (end()) {    return false;  }  back();  return true;}  }
class C{  public GuiDesignerConfigurable(final Project project){  myProject=project;}  }
class C{  public boolean applyOptions() throws IOException {  if (CHECK_BOX.isSelected())   QuestionsHandler.instance().revertToDefault();  CHECK_BOX.setSelected(false);  return false;}  }
class C{  public boolean calculateTaxFromLines(){  BigDecimal taxBaseAmt=Env.ZERO;  BigDecimal taxAmt=Env.ZERO;  boolean documentLevel=getTax().isDocumentLevel();  MTax tax=getTax();  String sql="SELECT LineNetAmt FROM C_OrderLine WHERE C_Order_ID=? AND C_Tax_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getC_Order_ID());    pstmt.setInt(2,getC_Tax_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      BigDecimal baseAmt=rs.getBigDecimal(1);      taxBaseAmt=taxBaseAmt.add(baseAmt);      if (!documentLevel)       taxAmt=taxAmt.add(tax.calculateTax(baseAmt,isTaxIncluded(),getPrecision()));    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,get_TrxName(),e);    taxBaseAmt=null;  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  if (taxBaseAmt == null)   return false;  if (documentLevel)   taxAmt=tax.calculateTax(taxBaseAmt,isTaxIncluded(),getPrecision());  setTaxAmt(taxAmt);  if (isTaxIncluded())   setTaxBaseAmt(taxBaseAmt.subtract(taxAmt)); else   setTaxBaseAmt(taxBaseAmt);  log.fine(toString());  return true;}  }
class C{  public boolean isInsert(){  if (insert == null) {    return true;  } else {    return insert;  }}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInHours(int intervalInHours){  validateInterval(intervalInHours);  this.interval=intervalInHours;  this.intervalUnit=IntervalUnit.HOUR;  return this;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static boolean isLeftClick(MouseEvent e){  return ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 1));}  }
class C{  protected boolean xIsByte(int pointIndex){  return ((getFlag(pointIndex) & 0x2) != 0);}  }
class C{  @Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){  player.setItemInUse(stack,this.getMaxItemUseDuration(stack));  return stack;}  }
class C{  public SuffixArraySample sample(final int[] sourceQuery,int maxSamples,boolean exactMatch){  return sample(sourceQuery,maxSamples,0,-1,exactMatch);}  }
class C{  public static IRenderingEngine createRenderingEngine(){  return createRenderingEngine(Modules.sceDisplayModule.isUsingSoftwareRenderer());}  }
class C{  public Properties extractProperties(Iterable<Map.Entry<String,String>> propSrc){  Properties result=new Properties();  for (  Map.Entry<String,String> entry : propSrc) {    String name=entry.getKey();    if (isNamespacedProperty(name)) {      String val=entry.getValue();      result.setProperty(name,val);    }  }  return result;}  }
class C{  public long resolveCategoryId(final String category){  final long categoryId=NumberUtils.toLong(category,0L);  if (categoryId > 0L) {    bookmarkService.saveBookmarkForCategory(category);    return categoryId;  }  final String categoryIdStr=bookmarkService.getCategoryForURI(category);  return NumberUtils.toLong(categoryIdStr,0L);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument07.class,args);}  }
class C{  public void testBatchApply() throws Exception {  delegate=new GridCacheTestStore(new ConcurrentLinkedHashMap<Integer,String>());  initStore(1);  List<Integer> intList=new ArrayList<>(CACHE_SIZE);  try {    for (int i=0; i < CACHE_SIZE; i++) {      store.write(new CacheEntryImpl<>(i,"val" + i));      intList.add(i);    }  }  finally {    shutdownStore();  }  Map<Integer,String> underlyingMap=delegate.getMap();  assertTrue("Store map key set: " + underlyingMap.keySet(),F.eqOrdered(underlyingMap.keySet(),intList));}  }
class C{  public void cleanup(){  if (!this.keeperCleanedUp) {    this.keeperCleanedUp=true;    keeper.remove(getProcessorId());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.402 -0500",hash_original_method="2A121AFE9268A901CC611E90FC00D0E8",hash_generated_method="8EAEAA8DF652C30AE6AA4AA6CB855AEB") public boolean isChunked(){  return (buffer == null) && wrappedEntity.isChunked();}  }
class C{  private void fillFields(){  ((EditText)findViewById(R.id.urlShaarliView)).setText(account.getUrlShaarli());  ((EditText)findViewById(R.id.usernameView)).setText(account.getUsername());  ((EditText)findViewById(R.id.passwordView)).setText(account.getPassword());  ((EditText)findViewById(R.id.shortNameView)).setText(account.getShortName());  if (!"".equals(account.getBasicAuthUsername())) {    ((EditText)findViewById(R.id.basicUsernameView)).setText(account.getBasicAuthUsername());    ((EditText)findViewById(R.id.basicPasswordView)).setText(account.getBasicAuthPassword());    ((Switch)findViewById(R.id.basicAuthSwitch)).setChecked(true);    enableBasicAuth(findViewById(R.id.basicAuthSwitch));  }  SharedPreferences prefs=getSharedPreferences(getString(R.string.params),MODE_PRIVATE);  this.isDefaultAccount=(prefs.getLong(getString(R.string.p_default_account),-1) == account.getId());  ((CheckBox)findViewById(R.id.defaultAccountCheck)).setChecked(this.isDefaultAccount);  findViewById(R.id.deleteAccountButton).setVisibility(View.VISIBLE);}  }
class C{  public ScannerException(ErrorMessages message){  this(null,ErrorMessages.get(message),message,-1,-1);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof Reference)) {    Reference target=(Reference)obj;    if (target.className.equals(this.className) && target.size() == this.size()) {      Enumeration<RefAddr> mycomps=getAll();      Enumeration<RefAddr> comps=target.getAll();      while (mycomps.hasMoreElements())       if (!(mycomps.nextElement().equals(comps.nextElement())))       return false;      return true;    }  }  return false;}  }
class C{  private boolean isStatic(Field field){  int modifier=field.getModifiers();  if (Modifier.isStatic(modifier)) {    return true;  }  return false;}  }
class C{  public void addBean(Class<?> beanClass,Object bean){  Assert.notNull(beanClass);  addBean(beanClass.getName(),bean);}  }
class C{  private void init() throws AdeException {  dbPropertiesInitialized=false;  final Properties prop=new Properties();  try (FileInputStream fis=new FileInputStream(propertiesFileName)){    prop.load(fis);    dbURL=prop.getProperty(DATABASE_URL_PARAM);    dbDriver=prop.getProperty(DATABASE_DRIVER_PARAM);    dbUserName=prop.getProperty(DATABASE_USER_PARAM);    dbUserPassword=prop.getProperty(DATABASE_PASSWORD_PARAM);    if (dbURL != null) {      dbPropertiesInitialized=true;      dbURL=dbURL.trim();      dbName=parseDBName();    }    if (dbDriver != null) {      dbDriver=dbDriver.trim();    } else {      dbPropertiesInitialized=false;    }    if (dbUserName != null) {      dbUserName=dbUserName.trim();    }    if (dbUserPassword != null) {      dbUserPassword=dbUserPassword.trim();    }  } catch (  FileNotFoundException e) {    throw new AdeExtUsageException("Properties file " + propertiesFileName + " not found.",e);  }catch (  IOException e) {    throw new AdeExtUsageException("Problem in reading properties file " + propertiesFileName + ".",e);  }catch (  Exception e) {    throw new AdeExtUsageException("Problem in processing properties file " + propertiesFileName + ".",e);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SmallSpinnerUI();}  }
class C{  private void validateDataProviderKey(DataProviderKey key) throws IllegalArgumentException {  Assert.notNull(key,"A data provider key must be specified.");  key.setDataProviderName(alternateKeyHelper.validateStringParameter("data provider name",key.getDataProviderName()));}  }
class C{  public <T>T notNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static boolean validateOutputDirectory(File directory){  if (directory.exists()) {    Diagnostic.error(ErrorType.DIRECTORY_EXISTS,directory.getPath());    return false;  }  return true;}  }
class C{  public boolean isValidated(int row){  return getBoolean(row,VisualItem.VALIDATED);}  }
class C{  public Builder from(Date from){  this.from=from;  return this;}  }
class C{  public Builder withKeyStorePassword(String trustStorePassword){  properties.setProperty(NettyOptions.SSL_KEY_STORE_PASSWORD,Assert.notNull(trustStorePassword,"trustStorePassword"));  return this;}  }
class C{  public static void main(String[] args){}  }
class C{  synchronized void flushOperations(RTEditText editor){  Stack<Operation> undoStack=getUndoStack(editor);  Stack<Operation> redoStack=getRedoStack(editor);  undoStack.clear();  redoStack.clear();}  }
class C{  public static void handleCLIException(Exception exception){  System.err.println(exception.getMessage());  Configuration.printHelp();  System.exit(ExitCode.failure());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.405 -0400",hash_original_method="2CA40CF84E3F91F9DEE97B01BD037D11",hash_generated_method="B76FA6807697DC48B463878C7F5CD84F") boolean isWhiteSpace(char c){  if (('\t' == c) || ('\n' == c) || ('\r' == c)|| ('\u0020' == c))   return true;  return false;}  }
class C{  public static double sampleVariance(DoubleArrayList data,double mean){  double[] elements=data.elements();  int size=data.size();  double sum=0;  for (int i=size; --i >= 0; ) {    double delta=elements[i] - mean;    sum+=delta * delta;  }  return sum / (size - 1);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public SocketConnectionPool(ConnectionSettings connectionSettings,SecurityPlan securityPlan,PoolSettings poolSettings,Logging logging){  this.connectionSettings=connectionSettings;  this.securityPlan=securityPlan;  this.poolSettings=poolSettings;  this.logging=logging;}  }
class C{  public TraceRegister(final com.google.security.zynamics.binnavi.debug.models.trace.TraceRegister register){  this.register=register;}  }
class C{  public AlertDialog showAlertDialog(Context context,String title,String message,String buttonText){  return showAlertDialog(context,title,message,buttonText,null);}  }
class C{  static public boolean isThreePartTLD(String domain){  return threePartTLDs.contains(domain);}  }
class C{  private static CacheConfiguration utilitySystemCache(){  CacheConfiguration cache=new CacheConfiguration();  cache.setName(CU.UTILITY_CACHE_NAME);  cache.setCacheMode(REPLICATED);  cache.setAtomicityMode(TRANSACTIONAL);  cache.setSwapEnabled(false);  cache.setRebalanceMode(SYNC);  cache.setWriteSynchronizationMode(FULL_SYNC);  cache.setAffinity(new RendezvousAffinityFunction(false,100));  cache.setNodeFilter(CacheConfiguration.ALL_NODES);  cache.setRebalanceOrder(-2);  cache.setCopyOnRead(false);  return cache;}  }
class C{  public final void error(final String message){  if (isErrorEnabled()) {    output(Priority.ERROR,message,null);  }}  }
class C{  public UniqueFileStrategy(final File baseFile){  m_baseFile=baseFile;}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  public void removeEventListenerNS(String namespaceURI,String type,EventListener listener,boolean useCapture){  HashTable listeners;  if (useCapture) {    listeners=capturingListeners;  } else {    listeners=bubblingListeners;  }  if (listeners == null) {    return;  }  EventListenerList list=(EventListenerList)listeners.get(type);  if (list != null) {    list.removeListener(namespaceURI,listener);    if (list.size() == 0) {      listeners.remove(type);    }  }}  }
class C{  public MethodAmbiguityException(String description){  super(description);}  }
class C{  public void exec(String description,String[] baseCommand,InputStream stdin,File stdout,File stderr,boolean stdoutAppend,boolean stderrAppend) throws BackupException {  String[] cmd=makeCmd(baseCommand);  logger.info(description + ": " + arrayToCommand(cmd));  ProcessExecutor pe=new ProcessExecutor();  pe.setCommands(cmd);  if (stdin != null)   pe.setStdin(stdin);  if (stdout != null) {    pe.setStdOut(stdout);    pe.setStdOutAppend(stdoutAppend);  }  if (stderr != null) {    pe.setStdErr(stderr);    pe.setStdErrAppend(stderrAppend);  }  pe.run();  if (pe.isSuccessful()) {    if (logger.isDebugEnabled()) {      logger.debug(this.processInfo(pe));    }    if (stdout == null) {      outputLines=pe.getStdoutByLine();    }  } else {    logger.error("Operating system command failed");    logger.info(this.processInfo(pe));    if (stderr != null) {      throw new BackupException("Operating system command failed; check " + stderr.getPath() + " for details");    } else {      throw new BackupException("Operating system command failed; check log for details");    }  }}  }
class C{  protected void assertException(final AbstractExceptionCase exceptionCase,@Nullable final String expectedErrorMsg) throws Throwable {  assertExceptionOccurred(true,exceptionCase,expectedErrorMsg);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  if (SageConstants.LITE)   return null;  return stack.getUIMgr() == null ? null : stack.getUIMgr().getModuleGroup().addWidget(WidgetMeta.getTypeForName(s));}  }
class C{  public synchronized void reply(SerialReply r){  processForPollReq(r);}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  public MapStore(String storePath){  this.storePath=storePath;}  }
class C{  @Override public ItemStack decrStackSize(int index,int count){  if (this.chestContents[index] != null) {    ItemStack itemstack;    if (this.chestContents[index].stackSize <= count) {      itemstack=this.chestContents[index];      this.chestContents[index]=null;      this.markDirty();      return itemstack;    } else {      itemstack=this.chestContents[index].splitStack(count);      if (this.chestContents[index].stackSize == 0) {        this.chestContents[index]=null;      }      this.markDirty();      return itemstack;    }  } else {    return null;  }}  }
class C{  public static SQLStream create(String databaseName,String sqlWithSubsParams,String optStreamName){  return new SQLStream(databaseName,sqlWithSubsParams,optStreamName,null);}  }
class C{  public void drawImage(Graphics2D g,RenderedImage image){  mHasImages=true;}  }
class C{  public void contractDetailsEnd(int reqId){  if (m_contractRequests.containsKey(reqId)) {synchronized (m_contractRequests) {      m_contractRequests.remove(reqId);    }  }}  }
class C{  public static <T>LazyImmutable<T> unbound(){  return new LazyImmutable();}  }
class C{  public String toHexString(){  if (nWords == 0) {    return "0";  }  StringBuilder sb=new StringBuilder((nWords + offset) * 8);  for (int i=nWords - 1; i >= 0; i--) {    String subStr=Integer.toHexString(data[i]);    for (int j=subStr.length(); j < 8; j++) {      sb.append('0');    }    sb.append(subStr);  }  for (int i=offset; i > 0; i--) {    sb.append("00000000");  }  return sb.toString();}  }
class C{  private static InputStreamReader decompressWith7Zip(final String archivePath) throws ConfigurationException {  PATH_PROGRAM_7ZIP=(String)config.getConfigParameter(ConfigurationKeys.PATH_PROGRAM_7ZIP);  if (PATH_PROGRAM_7ZIP == null) {    throw ErrorFactory.createConfigurationException(ErrorKeys.CONFIGURATION_PARAMETER_UNDEFINED);  }  try {    Runtime runtime=Runtime.getRuntime();    Process p=runtime.exec(PATH_PROGRAM_7ZIP + " e " + archivePath+ " -so");    return new InputStreamReader(p.getInputStream(),WIKIPEDIA_ENCODING);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected Date evaluateString(String datemathfmt,Locale locale,TimeZone tz){  Date date=null;  datemathfmt=datemathfmt.replaceAll("NOW","");  try {    DateMathParser parser=getDateMathParser(locale,tz);    date=parseMathString(parser,datemathfmt);  } catch (  ParseException e) {    wrapAndThrow(SEVERE,e,"Invalid expression for date");  }  return date;}  }
class C{  public Object push(Object i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  @Override public void widgetSelected(SelectionEvent event){  Button button=(Button)event.widget;  if (button.getSelection()) {    viewer.addFilter(gefaehrdungFilter);    refresh();    packAllColumns();  } else {    viewer.removeFilter(gefaehrdungFilter);    refresh();    selectAssignedGefaehrdungen();    packAllColumns();  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("AxisEntity: ");  sb.append("tooltip = ");  sb.append(getToolTipText());  return sb.toString();}  }
class C{  public void storeValue(){  if (Helper.isNullOrEmpty(methodBase)) {    return;  }  if (Helper.isNullOrEmpty(guiValueField)) {    return;  }  Object setValue=getGuiValue();  if (setValue == null && !(profileType instanceof File)) {    return;  }  putProfileValue(setValue);}  }
class C{  public static File createRandomFile(File folder,String name,final int length) throws IOException {  File file=new File(folder,name);  if (file.exists()) {    file.delete();  }  try (BufferedWriter output=new BufferedWriter(new FileWriter(file))){    output.write(RandomStringUtils.random(length));  }   return file;}  }
class C{  public static List<List<String>> parseProperty(String property){  return parseProperty(property,"|",":");}  }
class C{  public static double toRadians(double angdeg){  if (USE_JDK_MATH) {    return Math.toRadians(angdeg);  }  return angdeg * (Math.PI / 180);}  }
class C{  @Override protected void createSnapshot(List<DTNHost> hosts){  write("[" + (int)getSimTime() + "]");  if (this.trackedHosts == null) {    this.trackedHosts=selectTrackedHosts(hosts);  }  for (  DTNHost host : hosts) {    Set<String> msgIds=null;    String idString="";    if (!this.trackedHosts.contains(host)) {      continue;    }    msgIds=new HashSet<String>();    for (    Message m : host.getMessageCollection()) {      if (!isTracked(m)) {        continue;      }      msgIds.add(m.getId());    }    for (    Connection c : host.getConnections()) {      DTNHost peer=c.getOtherNode(host);      for (      Message m : peer.getMessageCollection()) {        if (!isTracked(m)) {          continue;        }        msgIds.add(m.getId());      }    }    for (    String id : msgIds) {      idString+=" " + id;    }    write(host + idString);  }}  }
class C{  public static int mostSignificantBit(int x){  if (x == 0)   return -1;  int msb=0;  if ((x & 0xFFFF0000) != 0) {    x>>>=(1 << 4);    msb+=(1 << 4);  }  long z=x;  z|=z << 16;  z|=z << 32;  final long y=z & 0xFF00F0F0CCCCAAAAL;  long t=0x8000800080008000L & (y | ((y | 0x8000800080008000L) - (z ^ y)));  t|=t << 15;  t|=t << 30;  t|=t << 60;  return (int)(msb + (t >>> 60));}  }
class C{  public void removeAttribute(Object name){  table.remove(name);}  }
class C{  public static byte max(final byte... array){  validateArray(array);  byte max=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] > max) {      max=array[i];    }  }  return max;}  }
class C{  public SassList(Separator separator){  this.separator=separator;}  }
class C{  @Experimental public boolean hasCompleted(){  Object o=state.get();  return nl.isCompleted(o);}  }
class C{  public void savePlugins(File file) throws IOException {  List<String> activeList=new ArrayList<String>();  for (  AbstractPlugin plugin : activePlugins) {    activeList.add(plugin.getName());  }  FileOutputStream fs=new FileOutputStream(file);  ObjectOutputStream os=new ObjectOutputStream(fs);  os.writeObject(allPlugins);  os.writeObject(activeList);  os.close();}  }
class C{  public BigInteger asBigInteger(){  return priv;}  }
class C{  public void togglePopup(){  if ((Instant.now().toEpochMilli() - lastPopupCloseTime.toEpochMilli()) < 200) {    return;  }  openPopup();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void clearAreas(){  areas.clear();  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public AreaScorer(int maximumScore,int minimumArea,int maximumArea){  maxScore=maximumScore;  minArea=minimumArea;  maxArea=maximumArea;}  }
class C{  private void createNetwork(Scenario sc,double alpha){  Network net=sc.getNetwork();  NetworkFactory netfac=net.getFactory();  double x1=Math.cos((alpha + (Math.PI * 3 / 2))) * 100.0;  double y1=Math.sin((alpha + (Math.PI * 3 / 2))) * 100.0;  double x2=Math.cos((alpha + (Math.PI))) * 100.0;  double y2=Math.sin((alpha + (Math.PI))) * 100.0;  double x3=Math.cos((alpha + (Math.PI / 2))) * 100.0;  double y3=Math.sin((alpha + (Math.PI / 2))) * 100.0;  double x4=Math.cos(alpha) * 100.0;  double y4=Math.sin(alpha) * 100.0;  Coord coord1=new Coord(x1,y1);  Coord coord2=new Coord(x2,y2);  Coord coord3=new Coord(x3,y3);  Coord coord4=new Coord(x4,y4);  Coord coord5=new Coord((double)0,(double)0);  Node node1=netfac.createNode(Id.create("1",Node.class),coord1);  net.addNode(node1);  Node node2=netfac.createNode(Id.create("2",Node.class),coord2);  net.addNode(node2);  Node node3=netfac.createNode(Id.create("3",Node.class),coord3);  net.addNode(node3);  Node node4=netfac.createNode(Id.create("4",Node.class),coord4);  net.addNode(node4);  Node node5=netfac.createNode(Id.create("5",Node.class),coord5);  net.addNode(node5);  Link link=netfac.createLink(Id.create(1,Link.class),node1,node5);  net.addLink(link);  link=netfac.createLink(Id.create(2,Link.class),node5,node2);  net.addLink(link);  link=netfac.createLink(Id.create(3,Link.class),node5,node3);  net.addLink(link);  link=netfac.createLink(Id.create(4,Link.class),node5,node4);  net.addLink(link);}  }
class C{  public Map<String,PsiMethod> sort(){  Map<String,PsiMethod> sortedMethods=new LinkedHashMap<String,PsiMethod>();  for (int i=0; i < mLifecycleOrdering.size(); i++) {    String methodName=mLifecycleOrdering.get(i);    PsiMethod method=mAllMethods.get(methodName);    if (method != null) {      sortedMethods.put(methodName,method);    }  }  return sortedMethods;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public Builder addConnection(Type t,Script.KernelID from,Script.FieldID to){  Node nf=findNode(from);  if (nf == null) {    throw new RSInvalidStateException("From script not found.");  }  Node nt=findNode(to.mScript);  if (nt == null) {    throw new RSInvalidStateException("To script not found.");  }  ConnectLine cl=new ConnectLine(t,from,to);  mLines.add(new ConnectLine(t,from,to));  nf.mOutputs.add(cl);  nt.mInputs.add(cl);  validateCycle(nf,nf);  return this;}  }
class C{  public ServerRegionProxy(String regionName,PoolImpl pool){  super(pool);  this.region=null;  this.regionName=regionName;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public static String formatCurrency(double price,String isoCode,Locale locale,int maximumFractionDigits){  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getCurrencyInstance(locale);  if (isoCode != null && isoCode.length() > 1) {    nf.setCurrency(com.ibm.icu.util.Currency.getInstance(isoCode));  } else {    if (Debug.verboseOn())     Debug.logVerbose("No isoCode specified to format currency value:" + price,module);  }  if (maximumFractionDigits >= 0) {    nf.setMaximumFractionDigits(maximumFractionDigits);  }  return nf.format(price);}  }
class C{  public void testBracketedPasteMode(){  withTerminalSized(3,3);  mTerminal.paste("a");  assertEquals("Pasting 'a' should output 'a' when bracketed paste mode is disabled","a",mOutput.getOutputAndClear());  enterString("\033[?2004h");  mTerminal.paste("a");  assertEquals("Pasting when in bracketed paste mode should be bracketed","\033[200~a\033[201~",mOutput.getOutputAndClear());  enterString("\033[?2004l");  mTerminal.paste("a");  assertEquals("Pasting 'a' should output 'a' when bracketed paste mode is disabled","a",mOutput.getOutputAndClear());  enterString("\033[?2004h");  mTerminal.paste("a");  assertEquals("Pasting when in bracketed paste mode again should be bracketed","\033[200~a\033[201~",mOutput.getOutputAndClear());  mTerminal.paste("\033ab\033cd\033");  assertEquals("Pasting an escape character should not input it","\033[200~abcd\033[201~",mOutput.getOutputAndClear());  mTerminal.paste("\u0081ab\u0081cd\u009F");  assertEquals("Pasting C1 control codes should not input it","\033[200~abcd\033[201~",mOutput.getOutputAndClear());  mTerminal.reset();  mTerminal.paste("a");  assertEquals("Terminal reset() should disable bracketed paste mode","a",mOutput.getOutputAndClear());}  }
class C{  private StorageOSUserDAO foreignTokenCacheLookup(TokenOnWire tw){  BaseToken bToken=fetchTokenLocal(tw);  if (bToken == null || !Token.class.isInstance(bToken)) {    _log.info("Token: no hit from cache");    return null;  }  Token token=(Token)bToken;  Long expirationTime=token.getCacheExpirationTime();  if (expirationTime != null && expirationTime > getCurrentTimeInMins()) {    StorageOSUserDAO user=resolveUser(token);    _log.info("Got user from cached token: {}",user != null ? user.getUserName() : "no hit from cache");    return user;  }  _log.info("Cache expired for foreign token {}",token.getId());  return null;}  }
class C{  private void checkMarketplaceIDForCreateOrganization(String marketplaceID,OrganizationRoleType... roles) throws ValidationException, ObjectNotFoundException {  if (roles.length == 0) {    if (marketplaceID == null || marketplaceID.trim().length() == 0) {      ValidationException validationException=new ValidationException("Creation of customer failed, the marketplaceID must not be null");      throw validationException;    } else {      validateMarketplaceID(marketplaceID);    }  }}  }
class C{  public void clear(){  for (  Node node : getChildren()) {    if (node instanceof ToManyNode) {      ((ToManyNode)node).refresh();    }  }}  }
class C{  public static void delete(Invite invite,JDA jda){  Channel channel;  if (invite.isTextChannel)   channel=jda.getTextChannelById(invite.getChannelId()); else   channel=jda.getVoiceChannelById(invite.getChannelId());  if (channel == null || !channel.checkPermission(jda.getSelfInfo(),Permission.MANAGE_CHANNEL))   throw new PermissionException(Permission.MANAGE_CHANNEL,"JDA cannot delete the invite because the currently logged in account does not have permission");  ((JDAImpl)jda).getRequester().delete(Requester.DISCORD_API_PREFIX + "invite/" + invite.getCode());}  }
class C{  public void mailboxDeleted(MailboxSession session,Mailbox mailbox){  listener.event(eventFactory.mailboxDeleted(session,mailbox));}  }
class C{  @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION') or hasPermission(#cube, 'MANAGEMENT')") public CubeInstance disableCube(CubeInstance cube) throws IOException, JobException {  String cubeName=cube.getName();  RealizationStatusEnum ostatus=cube.getStatus();  if (null != ostatus && !RealizationStatusEnum.READY.equals(ostatus)) {    throw new InternalErrorException("Only ready cube can be disabled, status of " + cubeName + " is "+ ostatus);  }  cube.setStatus(RealizationStatusEnum.DISABLED);  try {    CubeUpdate cubeBuilder=new CubeUpdate(cube);    cubeBuilder.setStatus(RealizationStatusEnum.DISABLED);    return getCubeManager().updateCube(cubeBuilder);  } catch (  IOException e) {    cube.setStatus(ostatus);    throw e;  }}  }
class C{  public static int readFully(InputStream in,byte[] buffer,int max) throws IOException {  try {    int result=0, len=Math.min(max,buffer.length);    while (len > 0) {      int l=in.read(buffer,result,len);      if (l < 0) {        break;      }      result+=l;      len-=l;    }    return result;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  @Override public void initTransition(){  super.initTransition();  startVals=new XYSeries("Start");  copyValues(series,startVals);  endVals=new XYSeries("End");  copyValues(cachedSeries,endVals);}  }
class C{  public static void write(OMRaster raster,Link link,LinkProperties props) throws IOException {switch (raster.getRenderType()) {case OMRaster.RENDERTYPE_LATLON:case OMRaster.RENDERTYPE_XY:case OMRaster.RENDERTYPE_OFFSET:default :    Debug.error("LinkRaster.write: raster not implemented.");}}  }
class C{  public void deleteShardDirectoryUnderLock(ShardLock lock,Settings indexSettings) throws IOException {  assert indexSettings != Settings.EMPTY;  final ShardId shardId=lock.getShardId();  assert isShardLocked(shardId) : "shard " + shardId + " is not locked";  final Path[] paths=availableShardPaths(shardId);  logger.trace("acquiring locks for {}, paths: [{}]",shardId,paths);  acquireFSLockForPaths(indexSettings,paths);  IOUtils.rm(paths);  if (hasCustomDataPath(indexSettings)) {    Path customLocation=resolveCustomLocation(indexSettings,shardId);    logger.trace("acquiring lock for {}, custom path: [{}]",shardId,customLocation);    acquireFSLockForPaths(indexSettings,customLocation);    logger.trace("deleting custom shard {} directory [{}]",shardId,customLocation);    IOUtils.rm(customLocation);  }  logger.trace("deleted shard {} directory, paths: [{}]",shardId,paths);  assert FileSystemUtils.exists(paths) == false;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/subPartition2Values/{subPartition2Value}/subPartition3Values/{subPartition3Value}/subPartition4Values/{subPartition4Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_PUT) public BusinessObjectDataAttribute updateBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("subPartition4Value") String subPartition4Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName,@RequestBody BusinessObjectDataAttributeUpdateRequest request){  return businessObjectDataAttributeService.updateBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value,subPartition4Value),businessObjectDataVersion,businessObjectDataAttributeName),request);}  }
class C{  public static void main(String args[]) throws Exception {  resignToken(SamlTokenCreator.class.getClass().getResource(SAML_TOKEN_DIR + "saml_token_valid.xml").getFile());  resignToken(SamlTokenCreator.class.getClass().getResource(SAML_TOKEN_DIR + "saml_token_valid_groups.xml").getFile());  resignToken(SamlTokenCreator.class.getClass().getResource(SAML_TOKEN_DIR + "saml_token_valid_whitespace.xml").getFile());}  }
class C{  public void generateAndroidId(){  long time=System.currentTimeMillis();  int rand=random.nextInt(10000);  androidId=time + "." + rand;}  }
class C{  public INNER_JOIN INNER_JOIN(String tableToJoin){  return new INNER_JOIN(this,tableToJoin);}  }
class C{  public <T>T fromXML(final HierarchicalStreamDriver driver,final String xml,final TypePermission... permissions) throws ClassNotFoundException, ObjectStreamException {  try {    return fromXML(driver,new StringReader(xml),permissions);  } catch (  final ObjectStreamException e) {    throw e;  }catch (  final IOException e) {    throw new StreamException("Unexpected IO error from a StringReader",e);  }}  }
class C{  public void clearSector(){  if (this.selector.getSector() != null) {    this.selector.disable();  }  updateSector();}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  void reverseWayNodeTags(List<Node> nodes){  for (  Node n : nodes) {    Map<String,String> nodeDirTags=Reverse.getDirectionDependentTags(n);    if (nodeDirTags != null) {      undo.save(n);      Reverse.reverseDirectionDependentTags(n,nodeDirTags,true);      n.updateState(OsmElement.STATE_MODIFIED);      try {        apiStorage.insertElementSafe(n);      } catch (      StorageException e) {        e.printStackTrace();      }    }  }}  }
class C{  public void test_ticket_1202c() throws Exception {  new TestHelper("ticket-1202-group03-modified1","ticket-1202-group03-modified1.rq","ticket-1202-group03-modified1.ttl","ticket-1202-group03-modified1.srx").runTest();}  }
class C{  protected void fillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){switch (fillMethod) {case FIXED_POINT_IMPL:    fixedPointSimplestCaseNonCyclicFillRaster(pixels,off,adjust,x,y,w,h);  break;case ANTI_ALIAS_IMPL:antiAliasFillRaster(pixels,off,adjust,x,y,w,h);break;case DEFAULT_IMPL:default :cyclicCircularGradientFillRaster(pixels,off,adjust,x,y,w,h);}}  }
class C{  public static void numerico(TextField campo){  campo.lengthProperty().addListener(null);}  }
class C{  protected void attrModified(Attr node,String oldv,String newv){}  }
class C{  public static CGPoint ccpForAngle(final float a){  return ccp((float)Math.cos(a),(float)Math.sin(a));}  }
class C{  private void createChunkList(){  this.oneDictionaryChunkList=new ArrayList<ByteBuffer>(dictionary_one_chunk_size);  chunk_count++;}  }
class C{  public void kick(UserHostmask user){  kick(user,"");}  }
class C{  public boolean hasSearchEstimate(){  return ideaEstimate != null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.883 -0500",hash_original_method="6CB35EDB68C77D37EFB134F2D3B374DA",hash_generated_method="6CB35EDB68C77D37EFB134F2D3B374DA") void onUssdFinishedError(){  if (state == State.PENDING) {    state=State.FAILED;    message=context.getText(com.android.internal.R.string.mmiError);    phone.onMMIDone(this);  }}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  return true;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.ACTION_ARGUMENTS__ARGS:    getArgs().clear();  getArgs().addAll((Collection<? extends ArgumentDefinition>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  boolean validateIntensity(int time){  if (time < 0 || time > 100) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error38"),time,rbx.getString("Error42")),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.844 -0500",hash_original_method="52B0D1EECC647FA8F40C23BBC67E314D",hash_generated_method="FE7E0E800654C4370BADD7C037353FD1") public static boolean[] deviceHasKeys(int[] keyCodes){  boolean[] ret=new boolean[keyCodes.length];  IWindowManager wm=Display.getWindowManager();  try {    wm.hasKeys(keyCodes,ret);  } catch (  RemoteException e) {  }  return ret;}  }
class C{  @Override public void draw(Graphics2D g){  if (getOwner().isTextOverflow()) {    drawRectangle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));    g.setColor((Color)getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));    Rectangle r=basicGetBounds();    g.drawLine(r.x + 1,r.y + 1,r.x + r.width - 2,r.y + r.height - 2);    g.drawLine(r.x + r.width - 2,r.y + 1,r.x + 1,r.y + r.height - 2);  }}  }
class C{  public DrmInfoEvent(int uniqueId,int type,String message){  super(uniqueId,type,message);  checkTypeValidity(type);}  }
class C{  public void paintTabbedPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void initializeLog4j(final String log4jConfigurationFile){  String log4jPropertiesFile=StringUtils.lowerCase(StringUtils.trim(log4jConfigurationFile));  if (StringUtils.isNoneBlank(log4jConfigurationFile)) {    File log4jFile=new File(log4jPropertiesFile);    if (log4jFile.isFile()) {      try {        PropertyConfigurator.configure(new FileInputStream(log4jFile));      } catch (      FileNotFoundException e) {        System.out.println("No log4j configuration found at '" + log4jConfigurationFile + "'");      }    } else {      System.out.println("No log4j configuration found at '" + log4jConfigurationFile + "'");    }  } else {    System.out.println("No log4j configuration file provided");  }}  }
class C{  public ServiceNotPublishedException(){}  }
class C{  private void onTimeChanged(){  mDelegator.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);  if (mOnTimeChangedListener != null) {    mOnTimeChangedListener.onTimeChanged(mDelegator,getCurrentHour(),getCurrentMinute());  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  void addLocation(String location){  if (fLocationList.contains(location)) {    return;  }  fLocationList.add(location);  fTableViewer.refresh();  fTableViewer.setChecked(location,true);  fTableViewer.setSelection(new StructuredSelection(location));  validateLocations();}  }
class C{  @Override public void updateNClob(int columnIndex,NClob x) throws SQLException {  throw unsupported("NClob");}  }
class C{  public void addPrimaryEqualities(final TypeVariable target,QualifierHierarchy qualHierarchy,final Set<AnnotationMirror> annos){  final Equalities equalities=targetToRecords.get(target).equalities;  for (  final AnnotationMirror anno : annos) {    final AnnotationMirror top=qualHierarchy.getTopAnnotation(anno);    if (!equalities.primaries.containsKey(top)) {      equalities.primaries.put(top,anno);    }  }}  }
class C{  public String toString(){  return "SHIFT(" + shift_to().index() + ")";}  }
class C{  protected SkullMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(SkullMeta.class);}  }
class C{  public T caseMethodDeclaration(MethodDeclaration object){  return null;}  }
class C{  public void add(int iconResourceId,String text){  this.add(new Entry(iconResourceId,text));}  }
class C{  public static HashMap<String,Integer> constructMaxRefCountTable(String[] refSents,int bleuOrder){  List<HashMap<String,Integer>> listRefNgramTbl=new ArrayList<>();  for (  String refSent : refSents) {    String[] refWords=Regex.spaces.split(refSent);    HashMap<String,Integer> refNgramTbl=new HashMap<>();    Ngram.getNgrams(refNgramTbl,1,bleuOrder,refWords);    listRefNgramTbl.add(refNgramTbl);  }  return computeMaxRefCountTbl(listRefNgramTbl);}  }
class C{  public boolean loopsForever(){  return getLoopExits().isEmpty();}  }
class C{  protected Class<?> loadClass(String name){  return null;}  }
class C{  public ParameterFile(File file) throws IOException {  this(new FileReader(file));}  }
class C{  private static double score(final CharSequence first,final CharSequence second){  String shorter;  String longer;  if (first.length() > second.length()) {    longer=first.toString().toLowerCase();    shorter=second.toString().toLowerCase();  } else {    longer=second.toString().toLowerCase();    shorter=first.toString().toLowerCase();  }  final int halflength=(shorter.length() / 2) + 1;  final String m1=getSetOfMatchingCharacterWithin(shorter,longer,halflength);  final String m2=getSetOfMatchingCharacterWithin(longer,shorter,halflength);  if (m1.length() == 0 || m2.length() == 0) {    return 0.0;  }  if (m1.length() != m2.length()) {    return 0.0;  }  final int transpositions=transpositions(m1,m2);  final double dist=(m1.length() / ((double)shorter.length()) + m2.length() / ((double)longer.length()) + (m1.length() - transpositions) / ((double)m1.length())) / 3.0;  return dist;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.659 -0500",hash_original_method="A022862730CB324FED346DC42742A154",hash_generated_method="AA162B5160A8E91B07EBFE324BF6321B") public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Pair))   return false;  final Pair<F,S> other;  try {    other=(Pair<F,S>)o;  } catch (  ClassCastException e) {    return false;  }  return first.equals(other.first) && second.equals(other.second);}  }
class C{  public ClosureStats assertAll(final TempTripleStore tempStore){  return assertAll(tempStore,null);}  }
class C{  @Deprecated public Single<Boolean> play(final Context context,@RawRes final int audioRes){  return play(PlayConfig.res(context,audioRes).build());}  }
class C{  @Override public void drawRight(){  drawShape(rocket);  drawTextGraphics(textImage);  drawText("Space",30.0f);  drawGridShape(gridImage);}  }
class C{  public static QNameInfo fromProperty(QualifiedName qName,String tableName,PropertyDescriptor propertyDescriptor){  Type vType=propertyDescriptor.type();  List<Class<?>> collectionClasses=new ArrayList<>();  while (vType instanceof ParameterizedType && Collection.class.isAssignableFrom((Class<?>)((ParameterizedType)vType).getRawType())) {    collectionClasses.add((Class<?>)((ParameterizedType)vType).getRawType());    vType=((ParameterizedType)vType).getActualTypeArguments()[0];  }  return new QNameInfo(qName,QNameType.PROPERTY,collectionClasses,tableName,vType,propertyDescriptor,null,null);}  }
class C{  public void init(StreamImpl source){  _disableClose=false;  _isDisableCloseSource=false;  _readTime=0;  if (_source != null && _source != source) {    close();  }  if (source == null) {    throw new IllegalArgumentException();  }  _source=source;  if (source.canRead()) {    if (_tempRead == null) {      _tempRead=TempBuffer.create();      _readBuffer=_tempRead.buffer();    }  }  _readOffset=0;  _readLength=0;  _readEncoding=null;  _readEncodingName="ISO-8859-1";}  }
class C{  static Tuple0 of(){  return Tuple0Impl.EMPTY_TUPLE;}  }
class C{  @Override public Object clone(){  ConfusionMatrix m=(ConfusionMatrix)super.clone();  m.m_ClassNames=m_ClassNames.clone();  return m;}  }
class C{  public String server(){  if (servers == null)   return null;  return servers[0];}  }
class C{  @Override public boolean storesLowerCaseIdentifiers() throws SQLException {  debugCodeCall("storesLowerCaseIdentifiers");  String m=getMode();  return m.equals("MySQL");}  }
class C{  public static RequestBuilder put(String url){  return new RequestBuilder(HTTPMethod.PUT,url);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementcreatenewattribute.class,args);}  }
class C{  public static <S extends Declaration,S2 extends S>SymbolReference<S> unsolved(Class<S2> clazz){  return new SymbolReference(Optional.<S>empty());}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  protected void eatMemory(int remainingKB){  byte[] reserve=new byte[remainingKB * 1024];  for (int size=16 * 1024; size > 0; size/=1024) {    while (true) {      try {        byte[] block=new byte[16 * 1024];        memory.add(block);      } catch (      OutOfMemoryError e) {        break;      }    }  }  reserve[0]=reserve[1];}  }
class C{  private String generateZonesetCloneName(String zonesetToClone){  try {    Thread.sleep(1000);  } catch (  InterruptedException ex) {    _log.warn(ex.getLocalizedMessage());  }  Calendar cal=Calendar.getInstance();  DateFormat dateFormat=new SimpleDateFormat("MMddyy-HHmmss");  String dateString=dateFormat.format(cal.getTime());  String longName=MDSDialogProperties.getString("MDSDialog.zonesetCloneLongName.cmd");  if (!longName.contains("!MDSDialog.zonesetCloneLongName.cmd!")) {    return longName;  }  return "ViPR-" + zonesetToClone + "-"+ dateString;}  }
class C{  SoundSettings(){  int pad=SBoxLayout.COMMON_PADDING;  page=SBoxLayout.createContainer(SBoxLayout.VERTICAL,pad);  page.setBorder(BorderFactory.createEmptyBorder(pad,pad,pad,pad));  JCheckBox muteToggle=new JCheckBox("Play Sounds");  boolean soundOn=Boolean.parseBoolean(WtWindowManager.getInstance().getProperty(SOUND_PROPERTY,"true"));  muteToggle.setSelected(soundOn);  muteToggle.addItemListener(new MuteListener());  page.add(muteToggle);  JComponent hbox=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  JComponent selectorLabel=new JLabel("Sound device:");  hbox.add(selectorLabel);  JComponent selector=createDeviceSelector();  hbox.add(selector);  selector.setToolTipText("<html>Sound output device. <b>auto</b> should" + " work for most people,<br>but try others if you can not get" + " sound to work otherwise</html>");  sliderComponents.add(selectorLabel);  sliderComponents.add(selector);  page.add(hbox);  JComponent row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  page.add(row,SLayout.EXPAND_X);  JLabel label=new JLabel("Master");  row.add(label);  SBoxLayout.addSpring(row);  JSlider masterVolume=createMasterVolumeSlider();  masterVolume.setToolTipText("Volume of all sound channels");  row.add(masterVolume);  sliderComponents.add(label);  sliderComponents.add(masterVolume);  row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  page.add(row,SLayout.EXPAND_X);  label=new JLabel("GUI");  row.add(label);  SBoxLayout.addSpring(row);  JSlider guiVolume=createVolumeSlider("gui");  guiVolume.setToolTipText("Volume of interactive operations, such as closing windows");  row.add(guiVolume);  sliderComponents.add(label);  sliderComponents.add(guiVolume);  row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  page.add(row,SLayout.EXPAND_X);  label=new JLabel("Effects");  row.add(label);  SBoxLayout.addSpring(row);  JSlider effectsVolume=createVolumeSlider("sfx");  effectsVolume.setToolTipText("Volume of fighting, and other effects");  row.add(effectsVolume);  sliderComponents.add(label);  sliderComponents.add(effectsVolume);  row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  page.add(row,SLayout.EXPAND_X);  label=new JLabel("Creatures");  row.add(label);  SBoxLayout.addSpring(row);  JSlider creaturesVolume=createVolumeSlider("creature");  creaturesVolume.setToolTipText("Volume of creature noises");  row.add(creaturesVolume);  sliderComponents.add(label);  sliderComponents.add(creaturesVolume);  row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  page.add(row,SLayout.EXPAND_X);  label=new JLabel("Ambient");  row.add(label);  SBoxLayout.addSpring(row);  JSlider ambientVolume=createVolumeSlider("ambient");  row.add(ambientVolume);  sliderComponents.add(label);  sliderComponents.add(ambientVolume);  row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  page.add(row,SLayout.EXPAND_X);  label=new JLabel("Music");  row.add(label);  SBoxLayout.addSpring(row);  JSlider musicVolume=createVolumeSlider("music");  musicVolume.setToolTipText("Music volume");  row.add(musicVolume);  sliderComponents.add(label);  sliderComponents.add(musicVolume);  for (  JComponent comp : sliderComponents) {    comp.setEnabled(soundOn);  }}  }
class C{  public List<String> matchPrefix(CharSequence prefix,int numReturnValues){  Vector<String> sortKeysResult=new Vector<>();  TSTNode startNode=getNode(prefix);  if (startNode == null) {    return sortKeysResult;  }  if (startNode.data != null) {    sortKeysResult.addElement(getKey(startNode));  }  return sortKeysRecursion(startNode.relatives[TSTNode.EQKID],((numReturnValues < 0) ? -1 : numReturnValues),sortKeysResult);}  }
class C{  private boolean isEnclosedInDoubleArray(final String rawData){  return rawData.matches("(?ims)^\\s*\\[\\[.*\\]\\]");}  }
class C{  public String toString(){  return genStyleKey();}  }
class C{  protected Iterator<K> createKeySetIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new KeySetIterator<K,V>(this);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static double logpdf(double x,double sigma){  if (x <= 0.) {    return Double.NEGATIVE_INFINITY;  }  final double xs=x / sigma;  return Math.log(xs / sigma) - .5 * xs * xs;}  }
class C{  public void dispose(){  mGraphics.dispose();}  }
class C{  public QName(String qname,Element namespaceContext,PrefixResolver resolver,boolean validate){  _namespaceURI=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    if (null != namespaceContext) {      String prefix=qname.substring(0,indexOfNSSep);      _prefix=prefix;      if (prefix.equals("xml")) {        _namespaceURI=S_XMLNAMESPACEURI;      } else       if (prefix.equals("xmlns")) {        return;      } else {        _namespaceURI=resolver.getNamespaceForPrefix(prefix,namespaceContext);      }      if (null == _namespaceURI) {        throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));      }    } else {    }  }  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  m_hashCode=toString().hashCode();}  }
class C{  public String evalUsingTrainingDataTipText(){  return "Use the training data to evaluate attributes rather than " + "cross validation.";}  }
class C{  public static Boolean saveIconToCache(Context context,AppInfo appInfo){  Boolean res=false;  try {    ApplicationInfo applicationInfo=context.getPackageManager().getApplicationInfo(appInfo.getAPK(),0);    File fileUri=new File(context.getCacheDir(),appInfo.getAPK());    FileOutputStream out=new FileOutputStream(fileUri);    Drawable icon=context.getPackageManager().getApplicationIcon(applicationInfo);    BitmapDrawable iconBitmap=(BitmapDrawable)icon;    iconBitmap.getBitmap().compress(Bitmap.CompressFormat.PNG,100,out);    res=true;  } catch (  PackageManager.NameNotFoundException e) {    e.printStackTrace();  }catch (  FileNotFoundException e) {    e.printStackTrace();  }  return res;}  }
class C{  public Vector3(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @Override public boolean checkDistance(final Entity other,final double distance){  if (parent != null) {    Entity base=parent;    RPObject obj=parent.getBaseContainer();    if (obj instanceof Entity) {      base=(Entity)obj;    }    return (other.nextTo(base,distance));  }  return (other.squaredDistance(x,y) < (distance * distance));}  }
class C{  protected boolean isReadAllowed() throws IOException {  if (selfClosed) {    throw new IOException("Attempted read on closed stream.");  }  return (wrappedStream != null);}  }
class C{  public static File locateReplicatorRoleFile(String serviceName){  File confDir=null;  if (replicatorConfDir != null) {    confDir=replicatorConfDir;  } else   if (System.getProperty(CONF_DIR) != null) {    confDir=new File(System.getProperty(CONF_DIR));  } else   if (System.getProperty(HOME_DIR) != null) {    File homeDir=new File(System.getProperty(HOME_DIR));    confDir=new File(homeDir,"conf");  }  if (confDir == null || !confDir.isDirectory()) {    return null;  } else {    return new File(confDir,"dynamic-" + serviceName + ".role");  }}  }
class C{  public void step(SimState state){  ProximitySimulation sim=(ProximitySimulation)state;  Bag people=sim.socialNetwork.getAllNodes();  for (  Object p1 : people) {    Double2D location=sim.space.getObjectLocation(p1);    if (location != null) {      if (sim.mobileJamming) {        boolean jammed=false;        Bag neighborhood=sim.space.getNeighborsExactlyWithinDistance(location,sim.JAMMING_RADIUS);        for (        Object p2 : neighborhood) {          if (((Person)p2).trustPolicy == Person.TRUST_POLICY_ADVERSARY_JAMMER) {            jammed=true;            break;          }        }        if (jammed) {          continue;        }      } else       if (sim.staticJamming) {        boolean jammed=false;        for (int j=0; j < sim.jammerLocations.size(); j++) {          if (location.distance((Double2D)sim.jammerLocations.get(j)) < sim.JAMMING_RADIUS) {            jammed=true;            break;          }        }        if (jammed) {          continue;        }      }      Bag neighborhood=sim.space.getNeighborsExactlyWithinDistance(location,NEIGHBORHOOD_RADIUS);      for (      Object p2 : neighborhood) {        if (sim.random.nextDouble() < ENCOUNTER_CHANCE && p1 != p2) {          ((Person)p1).encounter((Person)p2);        }      }    }  }}  }
class C{  protected float reportReturn(String methodCall,float value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public Coords(Coords c){  this(c.getX(),c.getY());}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  public void storeStepData(String stepOrWorkflowId,String key,Object data){  Workflow workflow=null;  if (stepOrWorkflowId.matches(WORKFLOW_URI_Match)) {    workflow=loadWorkflowFromUri(URI.create(stepOrWorkflowId));    if (workflow != null) {      storeStepData(workflow.getWorkflowURI(),key,stepOrWorkflowId,data);      return;    }  } else {    workflow=getWorkflowFromStepId(stepOrWorkflowId);    if (workflow != null) {      storeStepData(workflow.getWorkflowURI(),key,stepOrWorkflowId,data);      return;    }  }  WorkflowException ex=WorkflowException.exceptions.workflowNotFound(stepOrWorkflowId);  _log.info("Workflow not found for: " + stepOrWorkflowId,ex);  throw ex;}  }
class C{  public ObjectReader withType(JavaType valueType){  if (valueType == _valueType)   return this;  return new ObjectReader(this,_config,valueType,_valueToUpdate,_schema,_injectableValues);}  }
class C{  public void mark(){  mark(1);}  }
class C{  private boolean processStaleNonce(Response response,Request request,TransactionID transactionID) throws StunException {  boolean challenge;  if (request.getAttributeCount() > 0) {    char[] includedRequestAttributeTypes=new char[]{Attribute.USERNAME,Attribute.REALM,Attribute.NONCE,Attribute.MESSAGE_INTEGRITY};    challenge=true;    for (    char includedRequestAttributeType : includedRequestAttributeTypes) {      if (!request.containsAttribute(includedRequestAttributeType)) {        challenge=false;        break;      }    }  } else   challenge=false;  return (challenge && processChallenge(response,request,transactionID));}  }
class C{  public static boolean any(Object... objects){  if (!truthy(objects)) {    return false;  }  for (  Object obj : objects) {    if (truthy(obj)) {      return true;    }  }  return false;}  }
class C{  public static byte[] decodeFromFile(String filename){  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      System.err.println("File is too big for this convenience method (" + file.length() + " bytes).");      return null;    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    System.err.println("Error decoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public boolean isExpired(){  return expiresAt.before(new Date());}  }
class C{  public ExponentialConstantModel(Parameter N0Parameter,Parameter growthRateParameter,Parameter transitionTimeParameter,Type units){  this(ExponentialConstantModelParser.EXPONENTIAL_CONSTANT_MODEL,N0Parameter,growthRateParameter,transitionTimeParameter,units);}  }
class C{  public CacheObject value(){  return val;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  private void testPreferredUnits(int unitId){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));  Assert.assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.settings_stats_units_title)));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_stats_units_title));  instrumentation.waitForIdleSync();  String unit=trackListActivity.getString(unitId);  EndToEndTestUtils.SOLO.clickOnText(unit);  EndToEndTestUtils.SOLO.searchText(unit);  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();}  }
class C{  public void fluchCache(){  if (mDiskLruCache != null) {    try {      mDiskLruCache.flush();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public BCPayResult syncPayPalPayment(final String syncJson){  Gson gson=new Gson();  Map<String,String> syncItem=gson.fromJson(syncJson,new TypeToken<Map<String,String>>(){  }.getType());  Integer billTotalFee;  try {    billTotalFee=Integer.valueOf(syncItem.get("billTotalFee"));  } catch (  Exception e) {    Log.e(TAG,e.getMessage() == null ? "Exception" : e.getMessage());    billTotalFee=-1;  }  return syncPayPalPayment(syncItem.get("billTitle"),billTotalFee,syncItem.get("billNum"),syncItem.get("currency"),syncItem.get("optional"));}  }
class C{  public static void exitWithFailure(int code){  System.out.println("FAIL");  System.exit(code);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.981 -0500",hash_original_method="DCFB2F7E3F738580B672E91DCD38CF42",hash_generated_method="F908F063590E806AC04D7ACB6D9B9CC1") public void addItemFromInflater(Preference preference){  addPreference(preference);}  }
class C{  static <T>void bilinearTimeIncrementHistogramCounters(final T[] samples,final int offset,final int numSamples,final long weight,final T[] splitPoints,final long[] counters,final Comparator<? super T> comparator){  assert (splitPoints.length + 1 == counters.length);  for (int i=0; i < numSamples; i++) {    final T sample=samples[i + offset];    int j=0;    for (j=0; j < splitPoints.length; j++) {      final T splitpoint=splitPoints[j];      if (comparator.compare(sample,splitpoint) < 0) {        break;      }    }    assert j < counters.length;    counters[j]+=weight;  }}  }
class C{  @Override public void stop(){  if (!this.has(AUTOWALK)) {    directions.clear();    super.stop();  }}  }
class C{  private Bundle createAuthBundle(AccountAuthenticatorResponse response,String accountType,String tokenType,String accountName){  Intent intent=new Intent(action);  intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,response);  intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE,accountType);  intent.putExtra(KEY_TOKEN_TYPE,tokenType);  if (null != accountName) {    intent.putExtra(AccountManager.KEY_ACCOUNT_NAME,accountName);  }  Bundle bundle=new Bundle();  bundle.putParcelable(AccountManager.KEY_INTENT,intent);  return bundle;}  }
class C{  public String toLocalizedPattern(){  return convertPattern(pattern,PATTERN_CHARS,formatData.getLocalPatternChars(),false);}  }
class C{  public boolean unlockUserAccount(String tenantName,PrincipalId userId) throws Exception {  return getService().unlockUserAccount(tenantName,userId,this.getServiceContext());}  }
class C{  private void paintRowText(final String text){  g.setColor(ds.getTextColor());  g.drawString(text,drawingRect.x1 + 2,y + (rowHeight + g.getFontMetrics().getAscent()) / 2);  y+=rowHeight + 1;}  }
class C{  protected MediaTray(int value){  super(value);}  }
class C{  public void load(Iterator<V> it){  while (it.hasNext()) {    V v=it.next();    add(v,v);  }}  }
class C{  public PKIndexSplitter(Directory input,Directory dir1,Directory dir2,Term midTerm){  this(input,dir1,dir2,new TermRangeQuery(midTerm.field(),null,midTerm.bytes(),true,false));}  }
class C{  public byte[] toByteArray(){  int length=getByteArrayLength();  ByteBuffer buffer=ByteBuffer.allocate(length);  for (int i=0; i < mRecords.length; i++) {    boolean mb=(i == 0);    boolean me=(i == mRecords.length - 1);    mRecords[i].writeToByteBuffer(buffer,mb,me);  }  return buffer.array();}  }
class C{  private static int annotatedFieldsNumber(Class<?> aClass){  int count=0;  for (  Field it : aClass.getDeclaredFields())   if (it.getAnnotation(JMap.class) != null)   count++;  return count;}  }
class C{  public void await() throws InterruptedException {  await(Long.MAX_VALUE,TimeUnit.NANOSECONDS);}  }
class C{  public MediaType fromString(String mType){  if (mType == null) {    throw new IllegalArgumentException("Media type value can not be null");  }  int i=mType.indexOf('/');  if (i == -1) {    throw new UnsupportedOperationException("Media types without subtype is not supported");  }  int paramsStart=mType.indexOf(';',i + 1);  int end=paramsStart == -1 ? mType.length() : paramsStart;  String type=mType.substring(0,i);  String subtype=mType.substring(i + 1,end);  return new MediaType(type.trim().toLowerCase(Locale.US),subtype.trim().toLowerCase(Locale.US));}  }
class C{  public static void cloneStaticMethods(){  HashMap<SootMethod,List<StaticInvokeExpr>> map=new HashMap<SootMethod,List<StaticInvokeExpr>>();  for (  SootMethod method : PTABridge.v().getReachableMethods()) {    if (method.isAbstract() || !method.isConcrete())     continue;    Body body=method.getActiveBody();    StmtBody stmtBody=(StmtBody)body;    Chain units=stmtBody.getUnits();    Iterator stmtIt=units.snapshotIterator();    while (stmtIt.hasNext()) {      Stmt stmt=(Stmt)stmtIt.next();      if (stmt.containsInvokeExpr() && stmt.getInvokeExpr() instanceof StaticInvokeExpr) {        Set<SootMethod> targets=PTABridge.v().getTargetsInsNoContext(stmt);        for (        SootMethod target : targets) {          if (SootUtils.isStaticInit(target))           continue;          if (!API.v().isSystemMethod(method) || target.getDeclaringClass().getName().startsWith("java.util") || target.getDeclaringClass().getName().startsWith("java.lang")|| target.getDeclaringClass().getName().startsWith("java.net")|| target.getDeclaringClass().getName().startsWith("java.io")|| target.getDeclaringClass().getName().startsWith("android.os")|| target.getDeclaringClass().getName().startsWith("android.net")|| target.getDeclaringClass().getName().startsWith("android.util")|| target.getDeclaringClass().getName().startsWith("android.database")) {            if (!map.containsKey(target)) {              map.put(target,new LinkedList<StaticInvokeExpr>());            }            map.get(target).add(((StaticInvokeExpr)stmt.getInvokeExpr()));          }        }      }    }  }  int clonesAdded=0;  for (  SootMethod method : map.keySet()) {    if (map.get(method).size() <= 1)     continue;    try {      int i=0;      for (      StaticInvokeExpr si : map.get(method)) {        i++;        if (i == 1)         continue;        String cloneName=method.getName() + CloneInheritedMethods.CLONED_METHOD_SUFFIX + i;        SootMethod newMeth=new SootMethod(cloneName,method.getParameterTypes(),method.getReturnType(),method.getModifiers(),method.getExceptions());        method.getDeclaringClass().addMethod(newMeth);        newMeth.setDeclaringClass(method.getDeclaringClass());        API.v().cloneMethodClassifications(method,newMeth);        Body newBody=(Body)method.retrieveActiveBody().clone();        newMeth.setActiveBody(newBody);        JSAStrings.v().updateJSAResults(method.retrieveActiveBody(),newBody);        si.setMethodRef(newMeth.makeRef());        logger.info("Cloning static method {} in {}",newMeth,si);        clonesAdded++;      }    } catch (    Exception e) {      logger.debug("Error during cloning static method: {}",method,e);    }  }  System.out.println("Cloned static methods added: " + clonesAdded);}  }
class C{  public void updateVolumenSerieNoTransaccional(String idSerie){  int numUdocs=_unidadDocumentalDbEntity.getCountUDocsByIdSerie(idSerie);  int numUIs=_udocEnUiDepositoDbEntity.getCountUnidadesInstalacionByIdSerie(idSerie);  double volumen=_udocEnUiDepositoDbEntity.getVolumenSerie(idSerie);  _serieDBEntity.updateVolumenSerie(idSerie,numUdocs,numUIs,volumen);}  }
class C{  @Override public String toString(){  return value == null ? "null" : value.toString();}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_EVDO_0:case TelephonyManager.NETWORK_TYPE_EVDO_A:case TelephonyManager.NETWORK_TYPE_HSDPA:case TelephonyManager.NETWORK_TYPE_HSPA:case TelephonyManager.NETWORK_TYPE_HSUPA:case TelephonyManager.NETWORK_TYPE_UMTS:case TelephonyManager.NETWORK_TYPE_EHRPD:case TelephonyManager.NETWORK_TYPE_EVDO_B:case TelephonyManager.NETWORK_TYPE_HSPAP:case TelephonyManager.NETWORK_TYPE_LTE:    return true;case TelephonyManager.NETWORK_TYPE_1xRTT:case TelephonyManager.NETWORK_TYPE_CDMA:case TelephonyManager.NETWORK_TYPE_EDGE:case TelephonyManager.NETWORK_TYPE_GPRS:case TelephonyManager.NETWORK_TYPE_IDEN:case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :  return false;}}  }
class C{  public void updateBinaryStream(String columnLabel,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public static JPanel stack(String edge,JComponent... components){  return stackIn(new JPanel(new BorderLayout()),edge,components);}  }
class C{  public void testCase3(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,115,44,-127,115,-21,-62,-15,85,64,-87,-2,-36,-36,-106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static U64 computeEntryCookie(int userCookie,String name){  int prime=211;  int flowHash=2311;  for (int i=0; i < name.length(); i++) {    flowHash=flowHash * prime + (int)name.charAt(i);  }  return AppCookie.makeCookie(StaticFlowEntryPusher.STATIC_FLOW_APP_ID,flowHash);}  }
class C{  public Analysis(){  super();}  }
class C{  @Override public String binsTipText(){  return "Ignored.";}  }
class C{  private void addEvent(EntryEventImpl e){synchronized (this) {    if (this.events == null) {      this.events=new ArrayList();    }    this.events.add(e);  }}  }
class C{  public void readData(File file,int dataType) throws IOException {  int columnOffset=sourceList.size();  int numberOfNewColumns=0;  int currentRow=-1;  BufferedReader in=new BufferedReader(new FileReader(file));  RapidMinerLineReader reader=null;  try {    reader=new RapidMinerLineReader(exampleSource.getParameterAsString(ExampleSource.PARAMETER_COLUMN_SEPARATORS),exampleSource.getParameterAsString(ExampleSource.PARAMETER_COMMENT_CHARS).toCharArray(),exampleSource.getParameterAsBoolean(ExampleSource.PARAMETER_USE_QUOTES),exampleSource.getParameterAsString(ExampleSource.PARAMETER_QUOTE_CHARACTER).charAt(0),exampleSource.getParameterAsString(ExampleSource.PARAMETER_QUOTING_ESCAPE_CHARACTER).charAt(0),exampleSource.getParameterAsBoolean(ExampleSource.PARAMETER_TRIM_LINES),exampleSource.getParameterAsBoolean(ExampleSource.PARAMETER_SKIP_ERROR_LINES));  } catch (  UndefinedParameterError e) {    throw new IOException("Cannot create RapidMiner line reader: " + e.getMessage());  }  ArrayList<Object> valueTypes=new ArrayList<>();  int expectedNumberOfColumns=-1;  while (true) {    String[] columns=reader.readLine(in,expectedNumberOfColumns);    if (columns == null) {      break;    }    expectedNumberOfColumns=columns.length;    currentRow++;    for (int currentColumn=0; currentColumn < columns.length; currentColumn++) {      int valueType=Ontology.INTEGER;      String value=columns[currentColumn];      if (!value.equals("?") && value.length() > 0) {        try {          double d=Double.parseDouble(value);          if (Tools.isEqual(Math.round(d),d)) {            valueType=Ontology.INTEGER;          } else {            valueType=Ontology.REAL;          }        } catch (        NumberFormatException e) {          valueType=Ontology.NOMINAL;        }      }      if (currentColumn >= numberOfNewColumns) {        addColumn(file,currentColumn,valueType);        numberOfNewColumns++;        valueTypes.add(Integer.valueOf(valueType));      } else {        int soFar=((Integer)valueTypes.get(currentColumn)).intValue();        if (soFar != valueType) {          if (soFar == Ontology.NOMINAL || valueType == Ontology.NOMINAL) {            valueTypes.set(currentColumn,Integer.valueOf(Ontology.NOMINAL));          } else {            valueTypes.set(currentColumn,Integer.valueOf(Ontology.REAL));          }        }      }      setDatum(currentRow,currentColumn + columnOffset,value);    }  }  in.close();  for (int i=0; i < valueTypes.size(); i++) {    getDataSource(i + columnOffset).setAttribute(AttributeFactory.changeValueType(getDataSource(i + columnOffset).getAttribute(),((Integer)valueTypes.get(i)).intValue()));  }  if (dataType == LOAD_SERIES_DATA) {    getDataSource(columnOffset).getAttribute().setBlockType(Ontology.VALUE_SERIES_START);    for (int i=1; i < valueTypes.size() - 1; i++) {      getDataSource(i + columnOffset).getAttribute().setBlockType(Ontology.VALUE_SERIES);    }    getDataSource(valueTypes.size() - 1 + columnOffset).getAttribute().setBlockType(Ontology.VALUE_SERIES_END);  }  update();  guessAllColumnTypes();  this.dataChanged=false;  this.metaDataChanged=true;}  }
class C{  private PDFObject findInArray(PDFObject[] array,String key) throws IOException {  int start=0;  int end=array.length / 2;  while (end >= start && start >= 0 && end < array.length) {    int pos=start + ((end - start) / 2);    String posKey=array[pos * 2].getStringValue();    int comp=key.compareTo(posKey);    if (comp == 0) {      return array[(pos * 2) + 1];    } else     if (comp > 0) {      start=pos + 1;    } else     if (comp < 0) {      end=pos - 1;    }  }  return null;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  m_C_ProjectLine_ID=getRecord_ID();}  }
class C{  private OperationModel(){  classTypes=new LinkedHashSet<>();  inputTypes=new LinkedHashSet<>();  classLiteralMap=new MultiMap<>();  annotatedTestValues=new LinkedHashSet<>();  contracts=new ContractSet();  contracts.add(EqualsReflexive.getInstance());  contracts.add(EqualsSymmetric.getInstance());  contracts.add(EqualsHashcode.getInstance());  contracts.add(EqualsToNullRetFalse.getInstance());  contracts.add(EqualsReturnsNormally.getInstance());  contracts.add(EqualsTransitive.getInstance());  contracts.add(CompareToReflexive.getInstance());  contracts.add(CompareToAntiSymmetric.getInstance());  contracts.add(CompareToEquals.getInstance());  contracts.add(CompareToSubs.getInstance());  contracts.add(CompareToTransitive.getInstance());  exercisedClasses=new LinkedHashSet<>();  operations=new TreeSet<>();  classCount=0;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitFloatMemberValue(this);}  }
class C{  private void storeBinding(Buffer packet,BindValue bindValue,MysqlIO mysql) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    try {      Object value=bindValue.value;switch (bindValue.bufferType) {case MysqlDefs.FIELD_TYPE_TINY:        packet.writeByte((byte)bindValue.longBinding);      return;case MysqlDefs.FIELD_TYPE_SHORT:    packet.ensureCapacity(2);  packet.writeInt((int)bindValue.longBinding);return;case MysqlDefs.FIELD_TYPE_LONG:packet.ensureCapacity(4);packet.writeLong((int)bindValue.longBinding);return;case MysqlDefs.FIELD_TYPE_LONGLONG:packet.ensureCapacity(8);packet.writeLongLong(bindValue.longBinding);return;case MysqlDefs.FIELD_TYPE_FLOAT:packet.ensureCapacity(4);packet.writeFloat(bindValue.floatBinding);return;case MysqlDefs.FIELD_TYPE_DOUBLE:packet.ensureCapacity(8);packet.writeDouble(bindValue.doubleBinding);return;case MysqlDefs.FIELD_TYPE_TIME:storeTime(packet,(Time)value);return;case MysqlDefs.FIELD_TYPE_DATE:case MysqlDefs.FIELD_TYPE_DATETIME:case MysqlDefs.FIELD_TYPE_TIMESTAMP:storeDateTime(packet,(java.util.Date)value,mysql,bindValue.bufferType);return;case MysqlDefs.FIELD_TYPE_VAR_STRING:case MysqlDefs.FIELD_TYPE_STRING:case MysqlDefs.FIELD_TYPE_VARCHAR:case MysqlDefs.FIELD_TYPE_DECIMAL:case MysqlDefs.FIELD_TYPE_NEW_DECIMAL:if (value instanceof byte[]) {packet.writeLenBytes((byte[])value);} else if (!this.isLoadDataQuery) {packet.writeLenString((String)value,this.charEncoding,this.connection.getServerCharset(),this.charConverter,this.connection.parserKnowsUnicode(),this.connection);} else {packet.writeLenBytes(StringUtils.getBytes((String)value));}return;}} catch (UnsupportedEncodingException uEE) {throw SQLError.createSQLException(Messages.getString("ServerPreparedStatement.22") + this.connection.getEncoding() + "'",SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());}}}  }
class C{  @Override public double distance(Instance first,Instance second,PerformanceStats stats){  return Math.pow(distance(first,second,Double.POSITIVE_INFINITY,stats),1 / m_Order);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Usage: java Dump <class file name>");    return;  }  DataInputStream in=new DataInputStream(new FileInputStream(args[0]));  ClassFile w=new ClassFile(in);  PrintWriter out=new PrintWriter(System.out,true);  out.println("*** constant pool ***");  w.getConstPool().print(out);  out.println();  out.println("*** members ***");  ClassFilePrinter.print(w,out);}  }
class C{  public V releaseHolder(AccessTimeObjectHolder<V> holder){  if (holder == null) {    return null;  }  V oldData=holder.peek();  boolean released=holder.release();  if (released) {    return oldData;  } else {    return null;  }}  }
class C{  public void removeAtMeGroup(String groupId){  if (atMeGroupList.contains(groupId)) {    atMeGroupList.remove(groupId);    EasePreferenceManager.getInstance().setAtMeGroups(atMeGroupList);  }}  }
class C{  public TransformedMapTest(){  dataSet.put(0,0);  dataSet.put(1,10);  dataSet.put(2,314);  dataSet.put(5,141);  dataSet.put(4,65535);  dataSet.put(3,255);}  }
class C{  protected void sequence_AnnotatedFunctionDeclaration_AsyncNoTrailingLineBreak_FunctionBody_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static ProcessResult executeLLVMBinary(File bitcodeFile,Object[] args){  try {    File objectFile=File.createTempFile(absolutePathToFileName(bitcodeFile),".o");    objectFile.deleteOnExit();    File executable=File.createTempFile(absolutePathToFileName(bitcodeFile),".out");    executable.deleteOnExit();    LLC.compileBitCodeToObjectFile(bitcodeFile,objectFile);    GCC.compileObjectToMachineCode(objectFile,executable);    StringBuilder commandBuilder=new StringBuilder(executable.getAbsolutePath());    if (args != null) {      for (int i=0; i < args.length; i++) {        commandBuilder.append(" ");        commandBuilder.append(args[i]);      }    }    return ProcessUtil.executeNativeCommand(commandBuilder.toString());  } catch (  Exception e) {    throw new AssertionError(e);  }}  }
class C{  @Override public boolean canAttackWithItem(){  return false;}  }
class C{  public static long parseTimeString(String time){  String trimmed=time.trim();  long result=0;  if (trimmed.length() > 0) {    Matcher mat=SIMPLE.matcher(trimmed);    if (mat.matches()) {      int days=(mat.group(SIM_DAY) != null) ? Integer.parseInt(mat.group(SIM_DAY)) : 0;      int hours=(mat.group(SIM_HOU) != null) ? Integer.parseInt(mat.group(SIM_HOU)) : 0;      int min=(mat.group(SIM_MIN) != null) ? Integer.parseInt(mat.group(SIM_MIN)) : 0;      int sec=(mat.group(SIM_SEC) != null) ? Integer.parseInt(mat.group(SIM_SEC)) : 0;      int ms=(mat.group(SIM_MS) != null) ? Integer.parseInt(mat.group(SIM_MS)) : 0;      long r=days * DAY_MS + hours * HOU_MS + min * MIN_MS + sec * SEC_MS + ms;      if (mat.group(SIM_SGN) != null && mat.group(SIM_SGN).equals("-")) {        r=-r;      }      result=r;    } else     if ("*".equals(trimmed) || "+*".equals(trimmed)) {      result=Long.MAX_VALUE;    } else     if ("-*".equals(trimmed)) {      result=Long.MIN_VALUE;    } else {      throw new RuntimeException("Error parsing time string: [ " + time + " ]");    }  }  return result;}  }
class C{  public void write32bit(int offset,int value){  write16bit(offset,value >> 16);  write16bit(offset + 2,value);}  }
class C{  public void testCreateDocument3() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  DocumentType docType=null;  String namespaceURI="http://www.w3.org/DOMTest/L2";  String qualifiedName;  List<String> qualifiedNames=new ArrayList<String>();  qualifiedNames.add("_:_");  qualifiedNames.add("_:h0");  qualifiedNames.add("_:test");  qualifiedNames.add("l_:_");  qualifiedNames.add("ns:_0");  qualifiedNames.add("ns:a0");  qualifiedNames.add("ns0:test");  qualifiedNames.add("a.b:c");  qualifiedNames.add("a-b:c");  qualifiedNames.add("a-b:c");  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  for (int indexN1006B=0; indexN1006B < qualifiedNames.size(); indexN1006B++) {    qualifiedName=(String)qualifiedNames.get(indexN1006B);    newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    assertNotNull("domimplementationcreatedocument03",newDoc);  }}  }
class C{  @SmallTest public void testPreconditions() throws Exception {  assertNotNull(mPm);}  }
class C{  public InvalidPortException(int port,String message){  super(message);  this.port=port;}  }
class C{  public static boolean isForwardableFunction(final INaviFunction function){  Preconditions.checkNotNull(function,"IE02334: function argument can not be null");  return ((function.getType() == FunctionType.IMPORT) || (function.getType() == FunctionType.THUNK));}  }
class C{  public HttpsURL(final String user,final String password,final String host,final int port,final String path,final String query,final String fragment) throws URIException {  this(HttpURL.toUserinfo(user,password),host,port,path,query,fragment);}  }
class C{  protected void addCommandOption(final WebRequest request,final CommandStringBuilder command,final String optionName,final Object optionValue){  assertNotNull(command,"The command to append options to cannot be null!");  assertNotNull(optionName,"The name of the option to add to the command cannot be null!");  if (hasValue(optionValue)) {    final String optionValueString=(optionValue instanceof String[] ? StringUtils.concat((String[])optionValue,StringUtils.COMMA_DELIMITER) : String.valueOf(optionValue));    command.addOption(optionName,optionValueString);  } else   if (request != null && request.getParameterMap().containsKey(optionName)) {    command.addOption(optionName);  } else {  }}  }
class C{  private SignedRequestsHelper(){}  }
class C{  public AppMenuHandler(Activity activity,AppMenuPropertiesDelegate delegate,int menuResourceId){  mActivity=activity;  mDelegate=delegate;  mObservers=new ArrayList<AppMenuObserver>();  mMenuResourceId=menuResourceId;}  }
class C{  public List put(Object key,List values){  if (values == null) {    values=new Vector(0);  }  Vector listWithoutDoublicates=new Vector(values.size());  for (int i=0; i < values.size(); i++) {    List keys=(List)backwardStore.get(values.get(i));    if (keys == null) {      keys=new Vector();    }    if (!keys.contains(key)) {      keys.add(key);      listWithoutDoublicates.add(values.get(i));      backwardStore.put(values.get(i),keys);    }  }  return (List)forwardStore.put(key,listWithoutDoublicates);}  }
class C{  public boolean isLessThan(Fiat other){  return compareTo(other) < 0;}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  @Override public Loader<Cursor> onCreateLoader(int aLoaderID,Bundle bundle){  if (loaderID == aLoaderID) {    QueryParameter query=getCurrentQuery();    mRequeryInstanceCount++;    if (Global.debugEnabledSql) {      Log.i(Global.LOG_CONTEXT,mDebugPrefix + " onCreateLoader" + getDebugContext()+ " : query = "+ query);    }    return FotoSql.createCursorLoader(getActivity().getApplicationContext(),query);  }  return null;}  }
class C{  protected void paintBorder(Graphics g){  Border border=getBorder();  if (border != null) {    border.paintBorder(this,g,0,0,getWidth(),getHeight());  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public String numClassesTipText(){  return "The number of classes to generate.";}  }
class C{  public void testGetTag(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  assertEquals("020047C8C3",instance.getTag(msgStandalone));}  }
class C{  public void removeAdjustmentByType(String orderAdjustmentTypeId){  if (orderAdjustmentTypeId == null)   return;  List<List<GenericValue>> adjsLists=FastList.newInstance();  adjsLists.add(this.getAdjustments());  for (  ShoppingCartItem item : this) {    if (item.getAdjustments() != null) {      adjsLists.add(item.getAdjustments());    }  }  for (  List<GenericValue> adjs : adjsLists) {    if (adjs != null) {      for (int i=0; i < adjs.size(); ) {        GenericValue orderAdjustment=adjs.get(i);        if (orderAdjustmentTypeId.equals(orderAdjustment.getString("orderAdjustmentTypeId"))) {          adjs.remove(i);        } else {          i++;        }      }    }  }}  }
class C{  Set addDependency(CompiledValue cv,RuntimeIterator itr){  Set ds=getDependencySet(cv,false);  ds.add(itr);  return ds;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.821 -0500",hash_original_method="43063225C34584E29FE6185CE8AAB05D",hash_generated_method="5B27F14D1A097ACF1D8099A8852C2B0F") public BerInputStream(InputStream in) throws IOException {  this(in,BUF_INCREASE_SIZE);}  }
class C{  public boolean canAttackWithItem(){  return false;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_left.fixupVariables(vars,globalsSize);  m_right.fixupVariables(vars,globalsSize);}  }
class C{  public TriggerDefinitionDataException(String message){  super(message);}  }
class C{  public CModuleNodeMenuBuilder(final JTree projectTree,final DefaultMutableTreeNode parentNode,final IDatabase database,final INaviAddressSpace addressSpace,final INaviModule[] modules,final JTable table){  super(projectTree);  m_database=Preconditions.checkNotNull(database,"IE01109: Database argument can't be null");  m_parentNode=parentNode;  m_addressSpace=addressSpace;  m_modules=modules.clone();  m_table=table;  final boolean singleModule=m_modules.length == 1;  m_loadModulesAction=CActionProxy.proxy(new CLoadModuleAction(projectTree,m_modules));  m_initializeModuleAction=CActionProxy.proxy(new CModuleInitializeAction(projectTree,m_modules));  if (singleModule) {    m_container=new CModuleContainer(database,m_modules[0]);    m_searchAction=CActionProxy.proxy(new CSearchAction(projectTree,m_container));    m_resolveAction=CActionProxy.proxy(new CResolveFunctionsAction(projectTree,m_database,m_modules[0]));    m_resolveAllAction=CActionProxy.proxy(new CResolveAllFunctionsSingleModuleAction(projectTree,m_database,m_modules[0]));    updateActions(m_modules[0]);    m_modules[0].addListener(m_listener);  } else {    m_searchAction=null;    m_resolveAction=null;    m_resolveAllAction=null;    updateActions(m_modules);  }}  }
class C{  private static boolean isAlphanum(char p_char){  return (isAlpha(p_char) || isDigit(p_char));}  }
class C{  public char peek(){  return isEmpty() ? 0 : queue.charAt(pos);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String flowAccumulationHeader=null;  String streamsHeader=null;  double mdInfPower=1;  String outputType=null;  String flowAccumTotalHeader=null;  String flowAccumRightHeader=null;  String flowAccumLeftHeader=null;  double initialValue;  double z;  int numRows;  int numCols;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      flowAccumulationHeader=args[i];    } else     if (i == 2) {      streamsHeader=args[i];    } else     if (i == 3) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 6) {      flowAccumTotalHeader=args[i];    } else     if (i == 7) {      flowAccumRightHeader=args[i];    } else     if (i == 8) {      flowAccumLeftHeader=args[i];    }  }  if ((demHeader == null) || (flowAccumulationHeader == null) || (streamsHeader == null)|| (flowAccumTotalHeader == null)|| (flowAccumRightHeader == null)|| (flowAccumLeftHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    flowAccumulation=new WhiteboxRaster(flowAccumulationHeader,"r");    streams=new WhiteboxRaster(streamsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    flowAccumTotal=new WhiteboxRaster(flowAccumTotalHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumTotal.setPreferredPalette("blueyellow.pal");    flowAccumTotal.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumTotal.setZUnits("dimensionless");    flowAccumRight=new WhiteboxRaster(flowAccumRightHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumRight.setPreferredPalette("blueyellow.pal");    flowAccumRight.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumRight.setZUnits("dimensionless");    flowAccumLeft=new WhiteboxRaster(flowAccumLeftHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumLeft.setPreferredPalette("blueyellow.pal");    flowAccumLeft.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumLeft.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          flowAccumTotal.setValue(row,col,0);          flowAccumRight.setValue(row,col,0);          flowAccumLeft.setValue(row,col,0);        } else {          flowAccumTotal.setValue(row,col,noData);          flowAccumRight.setValue(row,col,noData);          flowAccumLeft.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("",(int)progress);    }    updateProgress("Loop 2 of 2:",0);switch (outputType) {case "specific catchment area (sca)":      initialValue=gridRes;    caThreshold=caThreshold * gridRes;  break;case "total catchment area":initialValue=gridRes * gridRes;caThreshold=caThreshold * gridRes * gridRes;break;default :initialValue=1;break;}for (int row=0; row < numRows; row++) {for (int col=0; col < numCols; col++) {if (streams.getValue(row,col) > 0) {flowAccumTotal.setValue(row,col,initialValue - caThreshold);flowAccumRight.setValue(row,col,(initialValue - caThreshold) / 2);flowAccumLeft.setValue(row,col,(initialValue - caThreshold) / 2);for (int c=0; c < 8; c++) {MDInfAccum(row + yd[c],col + xd[c],row,col,(c + 4) % 8,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("",(int)progress);}flowAccumTotal.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumTotal.addMetadataEntry("Created on " + new Date());flowAccumRight.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumRight.addMetadataEntry("Created on " + new Date());flowAccumLeft.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumLeft.addMetadataEntry("Created on " + new Date());dem.close();flowAccumulation.close();streams.close();flowAccumTotal.close();flowAccumRight.close();flowAccumLeft.close();returnData(flowAccumTotalHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void testMapContainsValue(){  Object[] values=getSampleValues();  resetEmpty();  for (int i=0; i < values.length; i++) {    assertTrue("Empty map must not contain value",!map.containsValue(values[i]));  }  verify();  resetFull();  for (int i=0; i < values.length; i++) {    assertTrue("Map must contain value for a mapping in the map.",map.containsValue(values[i]));  }  verify();}  }
class C{  public void buildRaster(String outputRaster,List<KrigingPoint> pnts,boolean drawKrigingVariance){  double north, south, east, west;  int nrows, ncols;  double northing, easting;  west=bMinX - 0.5 * resolution;  north=bMaxY + 0.5 * resolution;  nrows=(int)(Math.ceil((north - bMinY) / resolution));  ncols=(int)(Math.ceil((bMaxX - west) / resolution));  south=north - nrows * resolution;  east=west + ncols * resolution;  String outputHeader=outputRaster;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  String str1;  double noData=-32768;  if ((new File(outputHeader)).exists()) {    (new File(outputHeader)).delete();    (new File(outputHeader.replace(".dep",".tas"))).delete();  }  try {    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "rgb.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();  } catch (  Exception e) {    return;  }  int row, col;  WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");  double halfResolution=resolution / 2;  int nn=0;  int progress;  int oldProgress=-1;  for (row=0; row < nrows; row++) {    for (col=0; col < ncols; col++) {      easting=(col * resolution) + (west + halfResolution);      northing=(north - halfResolution) - (row * resolution);      if (!drawKrigingVariance) {        image.setValue(row,col,pnts.get(nn).z);      } else {        image.setValue(row,col,pnts.get(nn).v);      }      nn++;    }    progress=(int)(100f * row / (nrows - 1));    if (progress > oldProgress) {      changes.firePropertyChange("progress",oldProgress,progress);      oldProgress=progress;    }  }  image.addMetadataEntry("Created by the Kriging Interpolation Tool.");  image.addMetadataEntry("Created on " + new Date());  image.addMetadataEntry("Semivariogram Model = " + SemiVariogramModel);  image.addMetadataEntry("Range = " + Range);  image.addMetadataEntry("Sill = " + Sill);  image.addMetadataEntry("Nugget = " + Nugget);  image.close();}  }
class C{  public static void main(String[] argv){  runClassifier(new AttributeSelectedClassifier(),argv);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 2276) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static EqualityExpression like(String propertyName,Object value){  return new EqualityExpression(Operator.LIKE,propertyName,value);}  }
class C{  public void close(){  for (  final Window w : getOwnedWindows()) {    if (w instanceof XFrame)     ((XFrame)w).close();    if (w instanceof XDialog)     ((XDialog)w).close();  }  customOnClose();  LSettingsGui.removeAllBoundedScl(cp);  dispose();}  }
class C{  public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  if (SqlUtils.isEmpty(groupBy) && !SqlUtils.isEmpty(having)) {    throw new IllegalArgumentException("HAVING clauses are only permitted when using a groupBy clause");  }  if (!SqlUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {    throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);  }  StringBuilder query=new StringBuilder(120);  query.append("SELECT ");  if (distinct) {    query.append("DISTINCT ");  }  if (columns != null && columns.length != 0) {    appendColumns(query,columns);  } else {    query.append("* ");  }  query.append("FROM ");  query.append(tables);  appendClause(query," WHERE ",where);  appendClause(query," GROUP BY ",groupBy);  appendClause(query," HAVING ",having);  appendClause(query," ORDER BY ",orderBy);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public static JavaCompilerUtil create(ClassLoader loader){  JavacConfig config=JavacConfig.getLocalConfig();  String javac=config.getCompiler();  JavaCompilerUtil javaCompiler=new JavaCompilerUtil();  if (loader == null) {    loader=Thread.currentThread().getContextClassLoader();  }  javaCompiler.setClassLoader(loader);  javaCompiler.setCompiler(javac);  javaCompiler.setArgs(config.getArgs());  javaCompiler.setEncoding(config.getEncoding());  javaCompiler.setMaxBatch(config.getMaxBatch());  javaCompiler.setStartTimeout(config.getStartTimeout());  javaCompiler.setMaxCompileTime(config.getMaxCompileTime());  return javaCompiler;}  }
class C{  private static void storeAuthenticationTimeIntoAuthorizationRequest(final Authentication authentication,final AuthorizationRequest authRequest){  authRequest.getExtensions().put(OIDCConstants.AUTH_TIME,((SpringSecurityAuthenticationToken)authentication).getAuthenticationDateTime().getMillis());}  }
class C{  static ByteString toBytes(String str){  try {    return ByteString.copyFrom(str.getBytes("UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 not supported.",e);  }}  }
class C{  synchronized public void addAlert(AlertEntry entry){  if (this.entries.size() >= ALERT_CAPACITY)   this.entries.remove(0);  this.entries.add(entry);}  }
class C{  public boolean updateOwner(String stream,SocketAddress addr){  SocketAddress oldAddr=stream2Addresses.putIfAbsent(stream,addr);  if (null != oldAddr && oldAddr.equals(addr)) {    return true;  }  if (null != oldAddr) {    if (stream2Addresses.replace(stream,oldAddr,addr)) {      logger.info("Storing ownership for stream : {}, old host : {}, new host : {}.",new Object[]{stream,oldAddr,addr});      StringBuilder sb=new StringBuilder();      sb.append("Ownership changed '").append(oldAddr).append("' -> '").append(addr).append("'");      removeOwnerFromStream(stream,oldAddr,sb.toString());      ownershipStatsLogger.onRemove(stream);      ownershipStatsLogger.onAdd(stream);    } else {      logger.warn("Ownership of stream : {} has been changed from {} to {} when storing host : {}.",new Object[]{stream,oldAddr,stream2Addresses.get(stream),addr});      return false;    }  } else {    logger.info("Storing ownership for stream : {}, host : {}.",stream,addr);    ownershipStatsLogger.onAdd(stream);  }  Set<String> streamsForHost=address2Streams.get(addr);  if (null == streamsForHost) {    Set<String> newStreamsForHost=new HashSet<String>();    streamsForHost=address2Streams.putIfAbsent(addr,newStreamsForHost);    if (null == streamsForHost) {      streamsForHost=newStreamsForHost;    }  }synchronized (streamsForHost) {    if (addr.equals(stream2Addresses.get(stream))) {      streamsForHost.add(stream);    }  }  return true;}  }
class C{  public void removeWrapper(String jspUri){  jsps.remove(jspUri);}  }
class C{  private static void sendNotification(INotificationEvent event){  Set<User> receivers=event.findReceivers();  Iterator<User> iterator=receivers.iterator();  while (iterator.hasNext()) {    User user=iterator.next();    if (user.state != UserState.ACTIVE) {      iterator.remove();    }  }  receivers.remove(User.anonymous);  if (receivers.isEmpty()) {    return;  }  final int partialRecipientSize=getPartialRecipientSize(receivers);  if (partialRecipientSize <= 0) {    return;  }  HashMap<String,List<User>> usersByLang=new HashMap<>();  for (  User receiver : receivers) {    String lang=receiver.getPreferredLanguage();    if (usersByLang.containsKey(lang)) {      usersByLang.get(lang).add(receiver);    } else {      usersByLang.put(lang,new ArrayList<>(Arrays.asList(receiver)));    }  }  for (  String langCode : usersByLang.keySet()) {    List<List<User>> subLists=Lists.partition(usersByLang.get(langCode),partialRecipientSize);    for (    List<User> list : subLists) {      Set<MailRecipient> toList=getToList(list);      Set<MailRecipient> bccList=getBccList(list);      sendMail(event,toList,bccList,langCode);    }  }}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public AreaHandler(SpatialIndex si,DrawingAttributes da){  setDrawingAttributes(da);  setSpatialIndex(si);}  }
class C{  public static WritableNativeMap makeNativeMap(Map<String,Object> objects){  WritableNativeMap nativeMap=new WritableNativeMap();  if (objects == null) {    return nativeMap;  }  for (  Map.Entry<String,Object> entry : objects.entrySet()) {    addEntry(nativeMap,entry.getKey(),entry.getValue());  }  return nativeMap;}  }
class C{  public static int checkedCollatorCompare(String s1,String s2){  final Collator collator=Collator.getInstance();  return checkedCollatorCompare(s1,s2,collator);}  }
class C{  public void vrule(long timestamp,Paint color,String legend,BasicStroke stroke){  LegendText legendText=new LegendText(color,legend);  comments.add(legendText);  plotElements.add(new VRule(timestamp,color,legendText,stroke));}  }
class C{  public boolean containsValue(Date val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSDate.class)) {      NSDate dat=(NSDate)o;      if (dat.getDate().equals(val))       return true;    }  }  return false;}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  public final void append(StringBuffer value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public int addPoint(GrabPoint gp){  return addPoint(gp,Integer.MAX_VALUE);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("three",null));}  }
class C{  public SecurityException(Throwable cause){  super(cause);}  }
class C{  public Set keySet(){  Set ks=keySet;  return (ks != null ? ks : (keySet=new KeySet()));}  }
class C{  public void addYTextLabel(double y,String text){  addYTextLabel(y,text,0);}  }
class C{  private void destroyFailedBatchRemovalMessageKeys(){  final boolean isDebugEnabled=logger.isDebugEnabled();  Iterator<Object> itr=getFailedBatchRemovalMessageKeys().iterator();  while (itr.hasNext()) {    Object key=itr.next();    itr.remove();    if (isDebugEnabled) {      logger.debug("key from failedBatchRemovalMessageKeys is: {}",key);    }    if (containsKey(key)) {      try {        destroyKey(key);        if (isDebugEnabled) {          logger.debug("Destroyed {} from bucket: ",key,getId());        }      } catch (      ForceReattemptException fe) {        if (isDebugEnabled) {          logger.debug("Bucket :{} moved to other member",getId());        }      }    }  }}  }
class C{  public void preInitializationStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].preInitializationStatistics(state);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Deprecated @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static boolean hasPermissions(){  return sessionIsRunning();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.249 -0500",hash_original_method="D7BF0781EB1B150DCC61F7ABE4F04AEB",hash_generated_method="DDA877F9F6A2C3A6C1912809441E01BF") protected HeaderParser(String header){  this.lexer=new Lexer("command_keywordLexer",header);}  }
class C{  public static void match(ArrayList<String> queryList,KeywordMatchingType opType,Analyzer luceneAnalyzer,DataStore dataStore) throws Exception {  List<Attribute> attributes=Arrays.asList(MedlineIndexWriter.ABSTRACT_ATTR);  IDictionary dictionary=new Dictionary(queryList);  DictionaryPredicate dictionaryPredicate=new DictionaryPredicate(dictionary,attributes,luceneAnalyzer,opType);  DictionaryMatcherSourceOperator dictionaryMatcher=new DictionaryMatcherSourceOperator(dictionaryPredicate,dataStore);  long startMatchTime=System.currentTimeMillis();  dictionaryMatcher.open();  ITuple nextTuple=null;  int counter=0;  while ((nextTuple=dictionaryMatcher.getNextTuple()) != null) {    List<Span> spanList=((ListField<Span>)nextTuple.getField(SchemaConstants.SPAN_LIST)).getValue();    counter+=spanList.size();  }  dictionaryMatcher.close();  long endMatchTime=System.currentTimeMillis();  matchTime=(endMatchTime - startMatchTime) / 1000.0;  resultCount=counter;}  }
class C{  private static void addDescription(int type,String description){  if (description.startsWith("<") && description.endsWith(">")) {    DESCRIPTIONS.put(type,description);  } else {    DESCRIPTIONS.put(type,'"' + description + '"');  }}  }
class C{  public ListenableFuture<String> extract(DestinationTable sourceTable,String destinationUri,DestinationFormat destinationFormat,boolean printHeader){  if (sourceTable.type == TableType.TABLE) {    return extractTable(sourceTable,destinationUri,destinationFormat,printHeader);  } else {    return extractQuery(SqlTemplate.create("SELECT * FROM [%DATASET%.%TABLE%]").put("DATASET",sourceTable.getTableReference().getDatasetId()).put("TABLE",sourceTable.getTableReference().getTableId()).build(),destinationUri,destinationFormat,printHeader);  }}  }
class C{  public final void addVetoableChangeListener(String propertyName,VetoableChangeListener listener){  vcs.addVetoableChangeListener(propertyName,listener);}  }
class C{  private Bytestream createUsedHostResponse(StreamHost selectedHost){  Bytestream response=new Bytestream(this.bytestreamRequest.getSessionID());  response.setTo(this.bytestreamRequest.getFrom());  response.setType(IQ.Type.RESULT);  response.setPacketID(this.bytestreamRequest.getPacketID());  response.setUsedHost(selectedHost.getJID());  return response;}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  private void doEstCard(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  final boolean exact=getBooleanValue(req,"exact",false);  final Resource s;  final URI p;  final Value o;  final Resource[] c;  try {    s=EncodeDecodeValue.decodeResource(req.getParameter("s"));    p=EncodeDecodeValue.decodeURI(req.getParameter("p"));    o=EncodeDecodeValue.decodeValue(req.getParameter("o"));    c=decodeContexts(req,"c");  } catch (  IllegalArgumentException ex) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,ex.getLocalizedMessage());    return;  }  if (log.isInfoEnabled())   log.info("ESTCARD: access path: (exact=" + exact + ", s="+ s+ ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  try {    submitApiTask(new EstCardTask(req,resp,getNamespace(req),getTimestamp(req),exact,s,p,o,c)).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"ESTCARD: access path: (exact=" + exact + ", s="+ s+ ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  }}  }
class C{  protected void unfilteredPreviousNode(){  if (referenceNode == null) {    return;  }  if (referenceNode == root) {    referenceNode=null;    return;  }  Node n=referenceNode.getPreviousSibling();  if (n == null) {    referenceNode=referenceNode.getParentNode();    return;  }  if (n.getNodeType() != Node.ENTITY_REFERENCE_NODE || expandEntityReferences) {    Node t;    while ((t=n.getLastChild()) != null) {      n=t;    }  }  referenceNode=n;}  }
class C{  public static Bitmap fromByteArray(byte[] bytes){  return BitmapFactory.decodeByteArray(bytes,0,bytes.length);}  }
class C{  @GwtIncompatible public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public SPOIndexWriter(final SPORelation spoRelation,final ISPO[] a,final int numStmts,final boolean clone,final SPOKeyOrder keyOrder,final boolean primaryIndex,final IElementFilter<ISPO> filter,final AtomicLong sortTime,final AtomicLong insertTime,final AtomicLong numWritten,final boolean reportMutations){  if (spoRelation == null)   throw new IllegalArgumentException();  if (keyOrder == null)   throw new IllegalArgumentException();  this.primaryIndex=primaryIndex;  this.filter=filter;  if (clone) {    this.stmts=new ISPO[numStmts];    System.arraycopy(a,0,this.stmts,0,numStmts);  } else {    this.stmts=a;  }  this.numStmts=numStmts;  this.sortTime=sortTime;  this.insertTime=insertTime;  this.numWritten=numWritten;  this.comparator=keyOrder.getComparator();  this.reportMutation=reportMutations;  this.ndx=spoRelation.getIndex(keyOrder);  assert ndx != null;  quads=keyOrder.getKeyArity() == 4;  sids=spoRelation.getStatementIdentifiers();}  }
class C{  public PropertyValueBuffer startBuilding(JsonParser jp,DeserializationContext ctxt){  PropertyValueBuffer buffer=new PropertyValueBuffer(jp,ctxt,_propertyCount);  if (_propertiesWithInjectables != null) {    buffer.inject(_propertiesWithInjectables);  }  return buffer;}  }
class C{  public Xml(Element element){  this((element == null) ? null : XmlUtils.createDocument());  if (element != null) {    Node imported=value.importNode(element,true);    value.appendChild(imported);  }}  }
class C{  public TextComponent(BaseComponent... extras){  setText("");  setExtra(new ArrayList<BaseComponent>(Arrays.asList(extras)));}  }
class C{  public boolean checkOverride(){  if (checker.shouldSkipUses(overriddenType.getUnderlyingType().asElement())) {    return true;  }  boolean result=checkReturn();  result&=checkParameters();  if (methodReference) {    result&=checkMemberReferenceReceivers();  } else {    result&=checkReceiverOverride();  }  checkPreAndPostConditions();  checkPurity();  return result;}  }
class C{  public static String exec(String[] cmd){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  exec(cmd,baos);  return baos.toString();}  }
class C{  public void paintOptionPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  void maybeRemoveUnreadableSSTables(File directory){  data.removeUnreadableSSTables(directory);}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix2D other){  if (other instanceof SelectedDenseDoubleMatrix2D) {    SelectedDenseDoubleMatrix2D otherMatrix=(SelectedDenseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseDoubleMatrix2D) {    DenseDoubleMatrix2D otherMatrix=(DenseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public PhraseTable(String grammarFile,String owner,String type,JoshuaConfiguration config) throws IOException {  this.config=config;  int spanLimit=0;  if (grammarFile != null && new File(grammarFile).isDirectory()) {    this.backend=new PackedGrammar(grammarFile,spanLimit,owner,type,config);    if (this.backend.getMaxSourcePhraseLength() == -1) {      String msg="FATAL: Using a packed grammar for a phrase table backend requires that you " + "packed the grammar with Joshua 6.0.2 or greater";      throw new RuntimeException(msg);    }  } else {    this.backend=new MemoryBasedBatchGrammar(type,grammarFile,owner,"[X]",spanLimit,config);  }}  }
class C{  public static String formatHumanFriendlyShortDate(final Context context,long timestamp){  long localTimestamp, localTime;  long now=UIUtils.getCurrentTime(context);  TimeZone tz=getDisplayTimeZone(context);  localTimestamp=timestamp + tz.getOffset(timestamp);  localTime=now + tz.getOffset(now);  long dayOrd=localTimestamp / 86400000L;  long nowOrd=localTime / 86400000L;  if (dayOrd == nowOrd) {    return context.getString(R.string.day_title_today);  } else   if (dayOrd == nowOrd - 1) {    return context.getString(R.string.day_title_yesterday);  } else   if (dayOrd == nowOrd + 1) {    return context.getString(R.string.day_title_tomorrow);  } else {    return formatShortDate(context,new Date(timestamp));  }}  }
class C{  long readLong(){  long b1, b2, b3, b4;  long b5, b6, b7, b8;  b1=pkt.data[inCursor++] & 0xff;  b2=pkt.data[inCursor++] & 0xff;  b3=pkt.data[inCursor++] & 0xff;  b4=pkt.data[inCursor++] & 0xff;  b5=pkt.data[inCursor++] & 0xff;  b6=pkt.data[inCursor++] & 0xff;  b7=pkt.data[inCursor++] & 0xff;  b8=pkt.data[inCursor++] & 0xff;  return ((b1 << 56) + (b2 << 48) + (b3 << 40)+ (b4 << 32)+ (b5 << 24)+ (b6 << 16)+ (b7 << 8)+ b8);}  }
class C{  @Override public void drawEmbeddedText(final float[][] Trm,final int fontSize,final PdfGlyph embeddedGlyph,final Object javaGlyph,int type,final GraphicsState gs,final double[] at,final String glyf,final PdfFont currentFontData,final float glyfWidth){  PdfPaint currentCol;  final int text_fill_type=gs.getTextRenderType();  if ((text_fill_type & GraphicsState.FILL) == GraphicsState.FILL) {    currentCol=gs.getNonstrokeColor();    if (currentCol.isPattern()) {      drawColor(currentCol,GraphicsState.FILL);      resetTextColors=true;    } else {      final int newCol=(currentCol).getRGB();      if ((resetTextColors) || ((lastFillTextCol != newCol))) {        lastFillTextCol=newCol;        drawColor(currentCol,GraphicsState.FILL);        resetTextColors=false;      }    }  }  if ((text_fill_type & GraphicsState.STROKE) == GraphicsState.STROKE) {    currentCol=gs.getStrokeColor();    if (currentCol.isPattern()) {      drawColor(currentCol,GraphicsState.STROKE);      resetTextColors=true;    } else {      final int newCol=currentCol.getRGB();      if ((resetTextColors) || (lastStrokeCol != newCol)) {        resetTextColors=false;        lastStrokeCol=newCol;        drawColor(currentCol,GraphicsState.STROKE);      }    }  }  setLineWidth((int)gs.getLineWidth());  drawFontSize(fontSize);  if (javaGlyph != null) {    if (Trm != null) {      final double[] nextAf={Trm[0][0],Trm[0][1],Trm[1][0],Trm[1][1],Trm[2][0],Trm[2][1]};      if ((lastAf[0] == nextAf[0]) && (lastAf[1] == nextAf[1]) && (lastAf[2] == nextAf[2])&& (lastAf[3] == nextAf[3])) {      } else {        this.drawAffine(nextAf);        lastAf[0]=nextAf[0];        lastAf[1]=nextAf[1];        lastAf[2]=nextAf[2];        lastAf[3]=nextAf[3];      }    }    if (!(javaGlyph instanceof Area)) {      type=-type;    }  } else {    if ((lastAf[0] == at[0]) && (lastAf[1] == at[1]) && (lastAf[2] == at[2])&& (lastAf[3] == at[3])) {    } else {      this.drawAffine(at);      lastAf[0]=at[0];      lastAf[1]=at[1];      lastAf[2]=at[2];      lastAf[3]=at[3];    }  }  if (embeddedGlyph == null) {    pageObjects.addElement(javaGlyph);  } else {    pageObjects.addElement(embeddedGlyph);  }  objectType.addElement(type);  if (type < 0) {    areas.addElement(null);  } else {    if (javaGlyph != null) {      final int[] rectParams={(int)Trm[2][0],(int)Trm[2][1],fontSize,fontSize};      areas.addElement(rectParams);      checkWidth(rectParams);    } else {      int realSize=fontSize;      if (realSize < 0) {        realSize=-realSize;      }      final int[] area={(int)Trm[2][0],(int)Trm[2][1],realSize,realSize};      areas.addElement(area);      checkWidth(area);    }  }  x_coord=RenderUtils.checkSize(x_coord,currentItem);  y_coord=RenderUtils.checkSize(y_coord,currentItem);  x_coord[currentItem]=Trm[2][0];  y_coord[currentItem]=Trm[2][1];  currentItem++;}  }
class C{  public SabresQuery<T> selectKeys(List<String> selectKeys){  this.selectKeys.clear();  this.selectKeys.add(SabresObject.getObjectIdKey());  this.selectKeys.addAll(selectKeys);  return this;}  }
class C{  public void testProtectedFieldAccess(){  Class fieldClass=new Support_Field().getClass();  String fieldName=null;  Field objectField=null;  Field booleanField=null;  Field byteField=null;  Field charField=null;  Field shortField=null;  Field intField=null;  Field longField=null;  Field floatField=null;  Field doubleField=null;  try {    fieldName="objectField";    objectField=fieldClass.getDeclaredField(fieldName);    fieldName="booleanField";    booleanField=fieldClass.getDeclaredField(fieldName);    fieldName="byteField";    byteField=fieldClass.getDeclaredField(fieldName);    fieldName="charField";    charField=fieldClass.getDeclaredField(fieldName);    fieldName="shortField";    shortField=fieldClass.getDeclaredField(fieldName);    fieldName="intField";    intField=fieldClass.getDeclaredField(fieldName);    fieldName="longField";    longField=fieldClass.getDeclaredField(fieldName);    fieldName="floatField";    floatField=fieldClass.getDeclaredField(fieldName);    fieldName="doubleField";    doubleField=fieldClass.getDeclaredField(fieldName);  } catch (  NoSuchFieldException e) {    fail("missing field " + fieldName + " in test support class "+ fieldClass.getName());  }  Support_Field parentClass=new Support_Field();  SupportSubClass subclass=new SupportSubClass();  SupportSubClass otherSubclass=new SupportSubClass();  Object plainObject=new Object();  Class illegalAccessExceptionClass=new IllegalAccessException().getClass();  Class illegalArgumentExceptionClass=new IllegalArgumentException().getClass();  char types[]={'L','B','S','C','I','J','F','D'};  Field fields[]={objectField,byteField,shortField,charField,intField,longField,floatField,doubleField};  Object values[]={new Byte((byte)1),new Byte((byte)1),new Short((short)1),new Character((char)1),new Integer(1),new Long(1),new Float(1),new Double(1)};  for (int i=0; i < types.length; i++) {    char type=types[i];    Object value=values[i];    for (int j=i; j < fields.length; j++) {      Field field=fields[j];      fieldName=field.getName();      if (field == charField && type != 'C') {        subclass.setField(type,subclass,field,illegalArgumentExceptionClass,value);      } else {        subclass.setField(type,subclass,field,null,value);        subclass.setField(type,otherSubclass,field,null,value);        subclass.setField(type,parentClass,field,illegalAccessExceptionClass,value);        subclass.setField(type,plainObject,field,illegalAccessExceptionClass,value);      }    }    for (int j=0; j < i; j++) {      Field field=fields[j];      fieldName=field.getName();      subclass.setField(type,subclass,field,illegalArgumentExceptionClass,value);    }  }  Boolean booleanValue=Boolean.TRUE;  subclass.setField('Z',subclass,booleanField,null,booleanValue);  subclass.setField('Z',otherSubclass,booleanField,null,booleanValue);  subclass.setField('Z',parentClass,booleanField,illegalAccessExceptionClass,booleanValue);  subclass.setField('Z',plainObject,booleanField,illegalAccessExceptionClass,booleanValue);  for (int j=0; j < fields.length; j++) {    Field listedField=fields[j];    fieldName=listedField.getName();    subclass.setField('Z',subclass,listedField,illegalArgumentExceptionClass,booleanValue);  }  for (int i=0; i < types.length; i++) {    char type=types[i];    Object value=values[i];    subclass.setField(type,subclass,booleanField,illegalArgumentExceptionClass,value);  }  char newTypes[]=new char[]{'B','S','C','I','J','F','D','L'};  Field newFields[]={byteField,shortField,charField,intField,longField,floatField,doubleField,objectField};  fields=newFields;  types=newTypes;  for (int i=0; i < types.length; i++) {    char type=types[i];    for (int j=0; j <= i; j++) {      Field field=fields[j];      fieldName=field.getName();      if (type == 'C' && field != charField) {        subclass.getField(type,subclass,field,illegalArgumentExceptionClass);      } else {        subclass.getField(type,subclass,field,null);        subclass.getField(type,otherSubclass,field,null);        subclass.getField(type,parentClass,field,illegalAccessExceptionClass);        subclass.getField(type,plainObject,field,illegalAccessExceptionClass);      }    }    for (int j=i + 1; j < fields.length; j++) {      Field field=fields[j];      fieldName=field.getName();      subclass.getField(type,subclass,field,illegalArgumentExceptionClass);    }  }  subclass.getField('Z',subclass,booleanField,null);  subclass.getField('Z',otherSubclass,booleanField,null);  subclass.getField('Z',parentClass,booleanField,illegalAccessExceptionClass);  subclass.getField('Z',plainObject,booleanField,illegalAccessExceptionClass);  for (int j=0; j < fields.length; j++) {    Field listedField=fields[j];    fieldName=listedField.getName();    subclass.getField('Z',subclass,listedField,illegalArgumentExceptionClass);  }  for (int i=0; i < types.length - 1; i++) {    char type=types[i];    subclass.getField(type,subclass,booleanField,illegalArgumentExceptionClass);  }  Object res=subclass.getField('L',subclass,booleanField,null);  assertTrue("unexpected object " + res,res instanceof Boolean);}  }
class C{  public static DataRowReader createDataRowReader(double[][] values){  List<DataRow> dataRows=new LinkedList<DataRow>();  for (int i=0; i < values.length; i++) {    dataRows.add(new DoubleArrayDataRow(values[i]));  }  return new ListDataRowReader(dataRows.iterator());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.931 -0500",hash_original_method="692347B4AF93950259A2DA740A39B258",hash_generated_method="FEF0BFF9BA9E8F1DA2DE7F055FC99EC3") public int lastIndexOf(String string){  addTaint(string.getTaintInt());  return getTaintInt();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.228 -0500",hash_original_method="8E46176062A22F0EF265736A53696086",hash_generated_method="727FC798DE8E6B8B3E3FD242D0744942") @DSSafe(DSCat.SAFE_OTHERS) public boolean verifyRemote(Socket socket){  InetAddress host1, host2;  host1=socket.getInetAddress();  host2=getRemoteAddress();  return host1.equals(host2);}  }
class C{  public final void close(){  try {    log.info("Closing ...");    assert (writer != null);    writer.flush();    writer.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  boolean contains(BinarySearchTreeNode<E> node){  if (node == null)   return false;  if (this.root == null)   return false;  if (node == this.root)   return true;  BinarySearchTreeNode<E> curr=this.root;  while (curr != null) {    if (curr == node)     return true;    int diff=node.compareTo(curr);    if (diff == 0) {      return curr == node;    } else     if (diff < 0) {      curr=curr.left;    } else {      curr=curr.right;    }  }  return false;}  }
class C{  public static int computeMessageSize(final int fieldNumber,final MessageNano value){  return computeTagSize(fieldNumber) + computeMessageSizeNoTag(value);}  }
class C{  public void maybeUnindex(HGPersistentHandle typeHandle,HGAtomType type,HGPersistentHandle atomHandle,Object atom){  List<HGIndexer> indList=(List)indexers.get(typeHandle);  if (indList == null)   return;  for (  HGIndexer indexer : indList) {    HGIndex<Object,Object> idx=getOrCreateIndex(indexer);    indexer.unindex(graph,atomHandle,atom,idx);  }}  }
class C{  public CreateRequest(ContentFormat contentFormat,int objectId,Collection<LwM2mResource> resources){  this(contentFormat,objectId,resources.toArray(new LwM2mResource[resources.size()]));}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  boolean isSupportedMimeType(String mimeType){  if (null != mimeType && !mimeType.equals("")) {    for (int i=0; i < mMimeTypeList.size(); i++) {      String completeMimeType=mMimeTypeList.get(i);      if (completeMimeType.startsWith(mimeType)) {        return true;      }    }  }  return false;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException {  os.defaultReadObject();  AnnotationMember[] defs=getElementsDescription(klazz);  AnnotationMember[] old=elements;  List<AnnotationMember> merged=new ArrayList<AnnotationMember>(defs.length + old.length);  nextOld:   for (  AnnotationMember el1 : old) {    for (    AnnotationMember el2 : defs) {      if (el2.name.equals(el1.name)) {        continue nextOld;      }    }    merged.add(el1);  }  nextNew:   for (  AnnotationMember def : defs) {    for (    AnnotationMember val : old) {      if (val.name.equals(def.name)) {        merged.add(val.setDefinition(def));        continue nextNew;      }    }    merged.add(def);  }  elements=merged.toArray(new AnnotationMember[merged.size()]);}  }
class C{  public HistogramStats(String name,String unit,StatisticsFactory factory,long[] breakPoints,boolean largerIsBetter){  this.bp=breakPoints;  StatisticDescriptor[] fieldDescriptors=new StatisticDescriptor[this.bp.length * 2];  int k=0;  for (int bucketNumber=0; bucketNumber < this.bp.length; bucketNumber++) {    String desc=(bucketNumber < this.bp.length - 1 ? "ForLTE" : "ForGT") + this.bp[bucketNumber];    fieldDescriptors[k]=factory.createIntCounter("BucketCount" + desc,"Number of data points in Bucket " + bucketNumber,"count",!largerIsBetter);    k++;    fieldDescriptors[k]=factory.createLongCounter("BucketTotal" + desc,"Sum of Bucket " + bucketNumber,unit,!largerIsBetter);    k++;  }  StatisticsType hist_type=factory.createType("HistogramWith" + breakPoints.length + "Buckets",hist_typeDesc + unit + " for "+ breakPoints.length+ " breakpoints",fieldDescriptors);  this.statCounterIndex=new int[this.bp.length * 2];  k=0;  for (int bucketNumber=0; bucketNumber < this.bp.length; bucketNumber++) {    String desc=(bucketNumber < this.bp.length - 1 ? "ForLTE" : "ForGT") + this.bp[bucketNumber];    this.statCounterIndex[k]=hist_type.nameToId("BucketCount" + desc);    k++;    this.statCounterIndex[k]=hist_type.nameToId("BucketTotal" + desc);    k++;  }  this.stats=factory.createAtomicStatistics(hist_type,name,0L);}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public InteractiveShell(Class<T> className){  type=className;}  }
class C{  public void fill3DRect(int x,int y,int width,int height,boolean raised){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling 3D rect: " + new Rectangle(x,y,width,height)+ " Raised bezel: "+ raised);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fill3DRect(x,y,width,height,raised);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fill3DRect(x,y,width,height,raised);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fill3DRect(x,y,width,height,raised);}  }
class C{  private void calculatePanningSpeed(){  final int dux=dvx / PAN_INERTIA;  final int duy=dvy / PAN_INERTIA;  final int tspeed=((dux * dux) + (duy * duy)) * PAN_SCALE;  if (speed > tspeed) {    speed=(2 * speed + tspeed) / 3;    if ((dvx != 0) || (dvy != 0)) {      speed=Math.max(speed,1);    }  } else   if (speed < tspeed) {    speed+=2;  }}  }
class C{  public final void sortStructureAttributes(){  processOperation(new SortAttributesOperation());}  }
class C{  public static void assertNotEquals(String itemName,boolean notExpected,boolean actual){  try {    if (notExpected == actual) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public double norm2(){  return s[0];}  }
class C{  public void update(byte input){  digest.update(input);}  }
class C{  public int accessFlags(int i){  return ByteArray.readU16bit(info,i * 4 + 3);}  }
class C{  private ResultContentEvent newResultContentEvent(double[] prediction,InstanceContent inEvent){  ResultContentEvent rce=new ResultContentEvent(inEvent.getInstanceIndex(),inEvent.getInstance(),inEvent.getClassId(),prediction,inEvent.isLastEvent());  rce.setClassifierIndex(this.processorId);  rce.setEvaluationIndex(inEvent.getEvaluationIndex());  return rce;}  }
class C{  public void extractAudioWaveform(ExtractAudioWaveformProgressListener listener) throws IOException {  if (mAudioWaveformFilename == null) {    final String projectPath=mMANativeHelper.getProjectPath();    final String audioWaveFilename=String.format(projectPath + "/audioWaveformFile-" + getId()+ ".dat");    final int frameDuration;    final int sampleCount;    final int codecType=mMANativeHelper.getAudioCodecType(mAudioType);switch (codecType) {case MediaProperties.ACODEC_AMRNB:{        frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRNB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;        sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRNB;        break;      }case MediaProperties.ACODEC_AMRWB:{      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRWB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRWB;      break;    }case MediaProperties.ACODEC_AAC_LC:{    frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AAC * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;    sampleCount=MediaProperties.SAMPLES_PER_FRAME_AAC;    break;  }case MediaProperties.ACODEC_MP3:{  frameDuration=(MediaProperties.SAMPLES_PER_FRAME_MP3 * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;  sampleCount=MediaProperties.SAMPLES_PER_FRAME_MP3;  break;}default :{throw new IllegalStateException("Unsupported codec type: " + codecType);}}mMANativeHelper.generateAudioGraph(mUniqueId,mFilename,audioWaveFilename,frameDuration,MediaProperties.DEFAULT_CHANNEL_COUNT,sampleCount,listener,false);mAudioWaveformFilename=audioWaveFilename;}mWaveformData=new SoftReference<WaveformData>(new WaveformData(mAudioWaveformFilename));}  }
class C{  Oplog removeOplog(long id){  return removeOplog(id,false,null);}  }
class C{  public BlobTest(String name){  super(name);}  }
class C{  public OutgoingMessageEnvelope(SystemStream systemStream,Object message){  this(systemStream,null,null,null,null,message);}  }
class C{  public final boolean prepareConnection(){  return prepareConnection(getServer(),getPorts());}  }
class C{  public void parse(InputSource source) throws IOException {  try {    parser.parse(source);  } catch (  SAXException e) {    throw new IOException(e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  if (!showsBottomSheet) {    outState.putBoolean(SAVED_SHOWS_BOTTOM_SHEET,false);  }  if (backStackId != -1) {    outState.putInt(SAVED_BACK_STACK_ID,backStackId);  }  if (bottomSheetLayoutId != View.NO_ID) {    outState.putInt(SAVED_BOTTOM_SHEET_LAYOUT_ID,bottomSheetLayoutId);  }}  }
class C{  public void addAload(int n){  if (n < 4)   addOpcode(42 + n); else   if (n < 0x100) {    addOpcode(ALOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ALOAD);    addIndex(n);  }}  }
class C{  protected void addAll(double[] values,int group){  for (  double value : values) {    add(value,group);  }}  }
class C{  public Matrix3d rotateYXZ(double angleY,double angleX,double angleZ){  return rotateYXZ(angleY,angleX,angleZ,this);}  }
class C{  private void deobfuscateFiles(ArrayList<DropboxVirtualFile> fileNameList,AbstractObfuscatorFactory aof){  Log.v(TAG_CLASS + TAG_SYNC_SHARE_CONTENT,"in deobfuscateFiles()");  String deobfuscated;  String modified;  if (accessStatus != ERROR_COULD_NOT_EXTRACT_KEYS && accessStatus != ERROR_NOT_OWNER) {    try {      dbList=new ArrayList<DropboxVirtualFile>();      obfuscator=((AndroidObfuscatorFactory)aof).getInstance(path,shareName,panbox.getMyDBCon(),context);      shareContent=new ArrayList<FileItem>();    } catch (    ObfuscationException e) {      Log.e("FileBrowserFragment","Failed to get AndroidObfuscatorFactory.");      return;    }    for (    DropboxVirtualFile dbf : fileNameList) {      try {        if (!dbf.getFileName().endsWith("~") && !dbf.getFileName().equals(".panbox") && !dbf.getFileName().equals(".directory")&& !dbf.getFileName().equals(".dropbox")) {          deobfuscated=obfuscator.deObfuscate(dbf.getFileName(),obfuscationKey);          modified=panbox.getMyDBCon().getFileInfo(dbf.getPath()).modified;          shareContent.add(new FileItem(deobfuscated,dbf.getPath(),modified.substring(0,modified.lastIndexOf("+")),panbox.getMyDBCon().getFileInfo(dbf.getPath()).size,dbf.isDirectory() ? String.valueOf((new DropboxVirtualFile(dbf.getPath(),panbox.getVolume())).list().length) : "",dbf.isDirectory()));          dbList.add(dbf);        }      } catch (      ObfuscationException e) {        Log.v("FileBrowserFragment","Could not deobfuscate file. Will ignore this one: " + dbf.getFileName());      }    }    if (path.equals(root)) {      shareContent.add(0,new FileItem("/",path,"","","0",true));    } else {      shareContent.add(0,new FileItem("..",path,"","","0",true));    }  }}  }
class C{  protected void warning(Token tok,String msg) throws LexerException {  warning(tok.getLine(),tok.getColumn(),msg);}  }
class C{  @Override public void paint(Graphics g){  g.translate(0,-visibleRow * getRowHeight());  super.paint(g);}  }
class C{  public final V remove(int index){  return removeFromDataIndexOfKey(index << 1);}  }
class C{  public void startProximityDetection(ProximityListener proximityListener){  startLibrarySensorDetection(new ProximityDetector(proximityListener),proximityListener);}  }
class C{  public static HistoryEvent createRemoved(long timestamp,Recordable recordable,String referrer){  return new RecordableHistoryEvent(REMOVED_TYPE,timestamp,recordable,referrer,"removed");}  }
class C{  public MetricKDE(DistanceMetric distanceMetric){  this(DEFAULT_KF,distanceMetric,defaultVCF);}  }
class C{  public boolean contains(final char ch){  return (ch >= start && ch <= end) != negated;}  }
class C{  private static void log(String s){  Slog.d(TAG,s);}  }
class C{  public static Collection<? extends Statement> difference(Repository rep1,Repository rep2) throws RepositoryException {  Collection<Statement> model1=new HashSet<Statement>();  Collection<Statement> model2=new HashSet<Statement>();  RepositoryConnection con1=rep1.getConnection();  try {    Iterations.addAll(con1.getStatements(null,null,null,false),model1);  }  finally {    con1.close();  }  RepositoryConnection con2=rep2.getConnection();  try {    Iterations.addAll(con2.getStatements(null,null,null,false),model2);  }  finally {    con2.close();  }  return difference(model1,model2);}  }
class C{  private void handleHtmlHelp(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String helpName=requestAndResponse.getURIParameter();  final String title=helpName.replace("-"," ");  if (addTitle(requestAndResponse,title)) {    return;  }  final String helpMarkdown=getHelpMarkdown(helpName);  if (helpMarkdown == null) {    returnHtml404(requestAndResponse);    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("help");  pageWrapper.addHeader();  requestAndResponse.print(helpMarkdown);  addCallToAction(requestAndResponse);  pageWrapper.addFooter();}  }
class C{  private boolean looksLikeAnonymousTypeDecl(){  nextToken();  if (fToken == Symbols.TokenIDENT) {    nextToken();    while (fToken == Symbols.TokenOTHER) {      nextToken();      if (fToken != Symbols.TokenIDENT)       return false;      nextToken();    }    return fToken == Symbols.TokenNEW;  }  return false;}  }
class C{  Tag(int code){  this.code=code;}  }
class C{  boolean hasInconsistencies(){  return numInconsistencies > 0;}  }
class C{  public void unparsedEntityDecl(StylesheetHandler handler,String name,String publicId,String systemId,String notationName){}  }
class C{  private PromiseHelper(){}  }
class C{  void remove(String inputFragmentStr,String formatFragment){  if (inputFragmentStr != null && inputStr.length() >= inputFragmentStr.length()) {    inputStr=inputStr.substring(inputFragmentStr.length());  }  if (formatFragment != null && formatStr.length() >= formatFragment.length()) {    formatStr=formatStr.substring(formatFragment.length());  }}  }
class C{  public IsNotOtherAccountNameValidator(final String charname,final String username){  this.charname=charname;  this.username=username;}  }
class C{  public MainMenuBar(){  super();  initialize();}  }
class C{  public static <T>T checkNotNull(T reference,String message){  if (reference == null) {    throw new NullPointerException(message);  }  return reference;}  }
class C{  private static void swapBytesAt(byte[] bytes,int p1,int p2){  byte b=bytes[p1];  bytes[p1]=bytes[p2];  bytes[p2]=b;}  }
class C{  public boolean isSuccess(){  return this.status == Status.SUCCESS;}  }
class C{  private void addInterfaceConstraints(StaticDefinitions staticDefs,EntitySpec entitySpec,Class<?> entityDefinitionClass){  if (!entityDefinitionClass.getEnclosingClass().isAssignableFrom(staticDefs.getClass())) {    throw new IllegalStateException(entityDefinitionClass + " not defined in " + staticDefs.getClass());  }  for (  Class<?> interfaceClass : entityDefinitionClass.getInterfaces()) {    addInterfaceConstraints(staticDefs.resolveStaticDefinitionFor(interfaceClass),entitySpec,interfaceClass);  }  if (entityDefinitionClass.isInterface()) {    for (    FieldValuePair<UniqueConstraintSpec> fieldValue : getStaticFieldValues(entityDefinitionClass,UniqueConstraintSpec.class)) {      UniqueConstraintSpec clonedSpec=fieldValue.value.newCopyFor(entitySpec);      entitySpec.add(clonedSpec);    }  }}  }
class C{  public int genID(){  int uid=this.hashCode();  if (uid < 0) {    uid=Math.abs(uid);    uid=uid * 15551;  }  return uid;}  }
class C{  public Cursor query(String tag,int limit){  String selection=(tag == null ? null : TrackerEntry.TAG + "=?");  String[] selectionArgs=(tag == null ? null : new String[]{tag});  Cursor cursor=mContext.getContentResolver().query(TrackerProvider.CONTENT_URI,TrackerEntry.ATTRIBUTES,selection,selectionArgs,null);  if (cursor == null) {    return cursor;  }  int pos=(cursor.getCount() < limit ? 0 : cursor.getCount() - limit);  cursor.moveToPosition(pos);  return cursor;}  }
class C{  public void pointToCellExact(int x,int y,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=(x - hStartPadding) / (mCellWidth + mWidthGap);  result[1]=(y - vStartPadding) / (mCellHeight + mHeightGap);  final int xAxis=mCountX;  final int yAxis=mCountY;  if (result[0] < 0)   result[0]=0;  if (result[0] >= xAxis)   result[0]=xAxis - 1;  if (result[1] < 0)   result[1]=0;  if (result[1] >= yAxis)   result[1]=yAxis - 1;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean deleteFilesInWhiteList(){  return true;}  }
class C{  @Override protected boolean isHostOverUtilized(PowerContainerHost host){  addHistoryEntry(host,getUtilizationThreshold());  double totalRequestedMips=0;  for (  ContainerVm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > getUtilizationThreshold();}  }
class C{  public Entity_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();  casFeat_isNormalised=jcas.getRequiredFeatureDE(casType,"isNormalised","uima.cas.Boolean",featOkTst);  casFeatCode_isNormalised=(null == casFeat_isNormalised) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_isNormalised).getCode();  casFeat_subType=jcas.getRequiredFeatureDE(casType,"subType","uima.cas.String",featOkTst);  casFeatCode_subType=(null == casFeat_subType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_subType).getCode();}  }
class C{  public void deleteObject(){  mRenderer.deleteObject(mObjectPressed);}  }
class C{  public static void reset(){  reset(DEFAULT_RANDOM_SEED);}  }
class C{  @SideOnly(Side.CLIENT) public static void init(){  initAspectEntries();  initElixirEntries();}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  void fillDeltaEntries(Set<PageLeafEntry> entries,Row row,int tail){  int rowOffset=_rowHead;  byte[] buffer=_buffer;  while (rowOffset < tail) {    int code=buffer[rowOffset] & CODE_MASK;    int len=getLength(code,row);    if (code == INSERT || code == REMOVE) {      PageLeafEntry entry=new PageLeafEntry(this,row,rowOffset,len,code);      entries.add(entry);    }    rowOffset+=len;  }}  }
class C{  public boolean ready() throws IOException {  return false;}  }
class C{  public JTree(TreeNode root){  this(root,false);}  }
class C{  private float limit(float value,float min,float max){  return Math.min(Math.max(min,value),max);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    return declaredTypeAccessModifier != DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT;case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_PROVIDED_BY_RUNTIME:  return declaredProvidedByRuntime != DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static double dot(double[] x,double[] y){  double val=0;  for (int i=0; i < x.length; i++)   val+=x[i] * y[i];  return val;}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLViewParameters) {    if (this == o)     return true;    PLViewParameters parameters=(PLViewParameters)o;    return (reset == parameters.reset && scrolling == parameters.scrolling && inertia == parameters.inertia && accelerometer == parameters.accelerometer && sensorialRotation == parameters.sensorialRotation);  }  return false;}  }
class C{  public String validateLastPremiumDate(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null) {    return "";  }  I_HR_EmployeeInsurance employeeInsurance=GridTabWrapper.create(mTab,I_HR_EmployeeInsurance.class);  Timestamp payDate=employeeInsurance.getPayDate();  Timestamp lastPremiumDate=(Timestamp)value;  if (payDate == null)   return "";  if (lastPremiumDate.after(payDate))   return ""; else {    String message=Msg.getMsg(Env.getCtx(),"Invalid") + " " + Msg.parseTranslation(ctx,"@HR_EmployeeInsurance_ID@");    employeeInsurance.setDateLastPremium((Timestamp)mField.getOldValue());    mTab.fireDataStatusEEvent(message,null,false);  }  return "";}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthCheckBoxMenuItemUI();}  }
class C{  public void init(Document document){  DocumentHandle documentHandle=document.getDocumentHandle();  configurePartitioner(documentHandle);  configureReconciler(documentHandle);  configureAnnotationModel(documentHandle);  configureCodeAssist(documentHandle);  configureChangeInterceptors(documentHandle);  configureFormatter(textEditor);  configureSignatureHelp(textEditor);  addQuickAssistKeyBinding();}  }
class C{  private void showPopupMenu(final MouseEvent event){  final JPopupMenu menu=new CStackViewMenu(m_stackView,m_model,event.getPoint());  menu.show(this,event.getX(),event.getY());}  }
class C{  private static String formatPercentage(double percentage){  return NumberFormat.getPercentInstance().format(percentage);}  }
class C{  public static JobBuilder newJob(){  return new JobBuilder();}  }
class C{  public double eval(double params[]){  return (Math.tanh(params[0]));}  }
class C{  public int onAbort(HeaderSet request,HeaderSet reply){  return ResponseCodes.OBEX_HTTP_NOT_IMPLEMENTED;}  }
class C{  private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  @SuppressWarnings("unchecked") public Page poPage2VO(List content,Pageable pageable,Long totalElements){  return new PageImpl<>(content,pageable,totalElements);}  }
class C{  private void checkOOC(){  final Entity ce=ce();  if (null == ce) {    return;  }  if (!(ce instanceof Aero)) {    return;  }  Aero a=(Aero)ce;  if (a.isOutControlTotal() && a.isAirborne()) {    disableButtons();    butDone.setEnabled(true);    if (numButtonGroups > 1)     getBtn(MoveCommand.MOVE_MORE).setEnabled(true);    getBtn(MoveCommand.MOVE_NEXT).setEnabled(true);    setForwardIniEnabled(true);    setLaunchEnabled((a.getLaunchableFighters().size() > 0) || (a.getLaunchableSmallCraft().size() > 0) || (a.getLaunchableDropships().size() > 0));  }  return;}  }
class C{  public boolean hasTextLitOnly(){  return m_hasTextLitOnly;}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0) {    throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  }  while (iLen > 0 && in[iOff + iLen - 1] == '=') {    iLen--;  }  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0) {      throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    }    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen) {      out[op++]=(byte)o1;    }    if (op < oLen) {      out[op++]=(byte)o2;    }  }  return out;}  }
class C{  public void testAccumulateAndGet(){  LongAccumulator ai=new LongAccumulator(null,0L);  ai.accumulate(2);  assertEquals(2,ai.get());  ai.accumulate(-4);  assertEquals(2,ai.get());  ai.accumulate(4);  assertEquals(4,ai.get());}  }
class C{  public static Paint parseColorFromProperties(Properties p,String propName,Paint dfault){  try {    String colorString=p.getProperty(propName);    if (colorString != null) {      return parseColor(colorString,true);    }  } catch (  NumberFormatException nfe) {  }  return dfault;}  }
class C{  @Inject protected PreferencesManagerImpl(PreferencesServiceClient preferencesService){  this.persistedPreferences=new HashMap<>();  this.changedPreferences=new HashMap<>();  this.preferencesService=preferencesService;}  }
class C{  public synchronized boolean removeTemplate(CodeTemplate template){  if (template == null) {    throw new IllegalArgumentException("template cannot be null");  }  return templates.remove(template);}  }
class C{  public static <T>ListIterator<T> emptyListIterator(){  return Collections.<T>emptyList().listIterator();}  }
class C{  public boolean isSynonym(){  return getSynonym() == null;}  }
class C{  private static int GetFieldID(JNIEnvironment env,int classJREF,Address fieldNameAddress,Address descriptorAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetFieldID  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    if (traceJNI)     VM.sysWriteln("called GetFieldID with classJREF = ",classJREF);    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    if (VM.VerifyAssertions)     VM._assert(cls != null);    String fieldString=JNIGenericHelpers.createStringFromC(fieldNameAddress);    Atom fieldName=Atom.findOrCreateAsciiAtom(fieldString);    String descriptorString=JNIGenericHelpers.createStringFromC(descriptorAddress);    Atom descriptor=Atom.findOrCreateAsciiAtom(descriptorString);    RVMField[] fields=java.lang.JikesRVMSupport.getTypeForClass(cls).getInstanceFields();    for (int i=fields.length - 1; i >= 0; i--) {      RVMField f=fields[i];      if (f.getName() == fieldName && f.getDescriptor() == descriptor) {        return f.getId();      }    }    env.recordException(new NoSuchFieldError(fieldString + ", " + descriptorString+ " of "+ cls));    return 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {  if (guard != null)   guard.checkGuard(object);  oos.defaultWriteObject();}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void disconnected(IConnection deadConn){  System.out.println("s: connection " + deadConn.getId() + " disconnected");  panXmit.setEnabled(false);  butSend.setEnabled(false);  boardName.setText("");  board=null;  deadConn=null;  panConnect.setEnabled(true);}  }
class C{  void recordTabStateTransition(int prevState,int newState,long delta){  if (prevState == TAB_STATE_ACTIVE && newState == TAB_STATE_INACTIVE) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Active_Inactive",delta);  } else   if (prevState == TAB_STATE_ACTIVE && newState == TAB_STATE_CLOSED) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Active_Closed",delta);  } else   if (prevState == TAB_STATE_INACTIVE && newState == TAB_STATE_ACTIVE) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Inactive_Active",delta);  } else   if (prevState == TAB_STATE_INACTIVE && newState == TAB_STATE_CLOSED) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Inactive_Close",delta);  }  if (prevState == TAB_STATE_INITIAL) {    RecordHistogram.recordEnumeratedHistogram("Tabs.StateTransfer.Target_Initial",newState,TAB_STATE_MAX);  } else   if (prevState == TAB_STATE_ACTIVE) {    RecordHistogram.recordEnumeratedHistogram("Tabs.StateTransfer.Target_Active",newState,TAB_STATE_MAX);  } else   if (prevState == TAB_STATE_INACTIVE) {    RecordHistogram.recordEnumeratedHistogram("Tabs.StateTransfer.Target_Inactive",newState,TAB_STATE_MAX);  }}  }
class C{  protected void removeDatabaseListeners(){  databaseListeners.clear();}  }
class C{  public static TrazaVO transformToTraza(LoggingEvent event){  TrazaVO traza=new TrazaVO();  traza.setCodError(event.getCodError());  traza.setDirIP(event.getUser().getIp());  traza.setAccion(event.getAction());  traza.setModulo(event.getModule());  traza.setIdUsuario(event.getUser().getId());  traza.setTimeStamp(new Date());  return traza;}  }
class C{  public void close(){  _client.close();}  }
class C{  public TerminateCommand(final int packetId){  super(DebugCommandType.CMD_TERMINATE,packetId);}  }
class C{  public WebShoppingCart(ShoppingCart cart){  super(cart);}  }
class C{  public String epsilonTipText(){  return "The epsilon for round-off error (shouldn't be changed).";}  }
class C{  public void startMessagingActivity(Context context,Bundle extras){  if (!startDelegateActivity(context,delegate.getStartIntent(),extras)) {    startActivity(context,extras,RootActivity.class);  }}  }
class C{  public static GeoTimeSerie zScore(GeoTimeSerie gts,boolean useMedian,boolean inplace) throws WarpScriptException {  doubleCheck(gts);  double[] musigma=madsigma(gts,useMedian);  double m=musigma[0];  double std=musigma[1];  if (0.0D == std) {    throw new WarpScriptException((useMedian ? "Standard" : "Median Absolute") + " Deviation is null");  }  GeoTimeSerie gts_=inplace ? gts : gts.clone();  for (int i=0; i < gts_.values; i++) {    gts_.doubleValues[i]=(gts_.doubleValues[i] - m) / std;  }  return gts_;}  }
class C{  @Override public boolean isRequiringUpdateAllBloomFilter(){  keyChainGroupLock.lock();  try {    return !watchedScripts.isEmpty();  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  private void addAbstract(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getDescription())) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.abstract"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    for (    String para : eml.getDescription()) {      if (!Strings.isNullOrEmpty(para)) {        p.add(para.replace("\r\n","\n"));        p.add(Chunk.NEWLINE);      }    }    doc.add(p);    p.clear();  }}  }
class C{  protected static String toHitIsImpossible(IGame game,Entity ae,Targetable target){  if (target == null) {    return "target is null";  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if ((target.getTargetType() == Targetable.TYPE_ENTITY) && ((((Entity)target).getOwnerId() == ae.getOwnerId()) || ((((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() != IPlayer.TEAM_NONE) && (ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))) {      return "A friendly unit can never be the target of a direct attack.";    }  }  if (Compute.effectiveDistance(game,ae,target) > 1) {    return "Target not in range";  }  if (ae.isEvading()) {    return "Attacker is evading.";  }  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    Entity te=(Entity)target;    if (Entity.NONE != te.getTransportId()) {      return "Target is a passenger.";    }    if (ae.equals(te)) {      return "You can't target yourself";    }    if (te.isAirborne()) {      return "can't target airborne units";    }    if (Entity.NONE != te.getSwarmTargetId()) {      return "Target is swarming a Mek.";    }    if ((ae.getGrappled() != Entity.NONE) && (ae.getGrappleSide() == Entity.GRAPPLE_BOTH)) {      return "Locked in Grapple";    }    final boolean targetInBuilding=Compute.isInBuilding(game,te);    if (targetInBuilding) {      Building TargBldg=game.getBoard().getBuildingAt(te.getPosition());      if (!Compute.isInBuilding(game,ae)) {        return "Target is inside building";      } else       if (!game.getBoard().getBuildingAt(ae.getPosition()).equals(TargBldg)) {        return "Target is inside different building";      }    }    if (te.isMakingDfa()) {      return "Target is making a DFA attack";    }  }  if ((target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_HEX_CLEAR) || (target.getTargetType() == Targetable.TYPE_HEX_IGNITE)) {    return "Invalid attack";  }  return null;}  }
class C{  public static void shareTextIntent(Activity activity,String text){  String shareTitle=activity.getResources().getString(R.string.share);  Intent sharingIntent=new Intent(android.content.Intent.ACTION_SEND);  sharingIntent.setType("text/plain");  sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,shareTitle);  sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT,text);  activity.startActivity(Intent.createChooser(sharingIntent,shareTitle));}  }
class C{  public void addMigration(final Migration migration){  this.migrations.add(migration);}  }
class C{  public BuildImageParams withRepository(String repository){  this.repository=repository;  return this;}  }
class C{  public void clear(){  map.clear();}  }
class C{  private JFrame activateWindow(){  for (  final IGraphContainerWindow window : CWindowManager.instance().getOpenWindows()) {    for (    final IGraphPanel graphPanel : window) {      final BackEndDebuggerProvider debuggerProvider=graphPanel.getModel().getDebuggerProvider();      for (      final IDebugger d : debuggerProvider) {        if (d == m_debugger) {          window.activate(graphPanel);          window.show();          return window.getFrame();        }      }    }  }  return null;}  }
class C{  public T caseN4GetterDeclaration(N4GetterDeclaration object){  return null;}  }
class C{  private void generateFlow(ACLRule rule,String dpid,String flowName){  if (rule == null || checkIfRuleWorksInSwitch(rule.getId(),dpid)) {    return;  }  int priority=getPriorityBySwitch(dpid);  if (rule.getNw_src() != null) {    HashMap<String,Object> flow=new HashMap<String,Object>();    flow.put(StaticFlowEntryPusher.COLUMN_SWITCH,dpid);    flow.put(StaticFlowEntryPusher.COLUMN_NAME,flowName);    flow.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));    flow.put(StaticFlowEntryPusher.COLUMN_COOKIE,"0");    flow.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(priority));    flow.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,"2048");    flow.put(StaticFlowEntryPusher.COLUMN_NW_SRC,rule.getNw_src());    if (rule.getNw_dst() != null) {      flow.put(StaticFlowEntryPusher.COLUMN_NW_DST,rule.getNw_dst());    }    if (rule.getNw_proto() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Integer.toString(rule.getNw_proto()));    }    if (rule.getAction() == Action.ALLOW) {      flow.put(StaticFlowEntryPusher.COLUMN_ACTIONS,"output=controller");    }    if (rule.getTp_dst() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_TP_DST,Integer.toString(rule.getTp_dst()));    }    storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,flow);  } else {    HashMap<String,Object> flow=new HashMap<String,Object>();    flow.put(StaticFlowEntryPusher.COLUMN_SWITCH,dpid);    flow.put(StaticFlowEntryPusher.COLUMN_NAME,flowName);    flow.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));    flow.put(StaticFlowEntryPusher.COLUMN_COOKIE,"0");    flow.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(priority));    flow.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,"2048");    flow.put(StaticFlowEntryPusher.COLUMN_NW_DST,rule.getNw_dst());    if (rule.getNw_proto() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Integer.toString(rule.getNw_proto()));    }    if (rule.getAction() == Action.ALLOW) {      flow.put(StaticFlowEntryPusher.COLUMN_ACTIONS,"output=controller");    }    if (rule.getTp_dst() != 0) {      flow.put(StaticFlowEntryPusher.COLUMN_TP_DST,Integer.toString(rule.getTp_dst()));    }    storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,flow);  }  addRuleToSwitchMapping(rule.getId(),dpid);  addRuleToFlowMapping(rule.getId(),flowName);  logger.debug("ACL flow(id:{}) is added in {}.",flowName,dpid);}  }
class C{  public static WeightedMultiClassPerformance newInstance(String name){  for (int i=0; i < NAMES.length; i++) {    if (NAMES[i].equals(name)) {      return new WeightedMultiClassPerformance(i);    }  }  return null;}  }
class C{  public static List<VirtualFile> findFilesClosestToTarget(@NotNull final List<String> targetParentFolders,final List<FileInfo> candidates,final int minProximityThreshold){  if (candidates.isEmpty()) {    return Collections.emptyList();  }  for (  String folderName : targetParentFolders) {    for (    FileInfo info : candidates) {      info.processRelativePathComponent(folderName);    }  }  int maxProximity=0;  for (  FileInfo fileInfo : candidates) {    final int proximity=fileInfo.getProximity();    if (proximity > maxProximity) {      maxProximity=proximity;    }  }  if (maxProximity >= minProximityThreshold) {    final List<VirtualFile> files=new ArrayList<VirtualFile>();    for (    FileInfo info : candidates) {      if (info.getProximity() == maxProximity) {        files.add(info.getFile());      }    }    return files;  }  return Collections.emptyList();}  }
class C{  @JsonCreator public IntervalTrigger(@JsonProperty("iso8601Interval") String iso8601Interval,@JsonProperty("repeatCount") int repeatCount,@JsonProperty("name") String name,@JsonProperty("data") T data,@JsonProperty("dataType") Class<T> dataType,@JsonProperty("action") Class<? extends Action1<T>> action){  super(name,data,dataType,action,Interval.parse(iso8601Interval).getStart().toDate(),null);  final Interval jodaInterval=Interval.parse(iso8601Interval);  this.repeatCount=repeatCount;  this.repeatInterval=Interval.parse(iso8601Interval).getEndMillis() - jodaInterval.getStartMillis();}  }
class C{  public static Asset createAssetFromBitmap(Bitmap bitmap){  if (bitmap != null) {    final ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    bitmap.compress(Bitmap.CompressFormat.PNG,100,byteStream);    return Asset.createFromBytes(byteStream.toByteArray());  }  return null;}  }
class C{  @Override public boolean hasWindowFocus(){  return mHijackFocus || super.hasWindowFocus();}  }
class C{  private static ILaunchConfiguration findLaunchConfiguration(IProject project) throws CoreException {  ILaunchManager launchManager=DebugPlugin.getDefault().getLaunchManager();  ILaunchConfigurationType typeid=launchManager.getLaunchConfigurationType(GwtSuperDevModeLaunchConfiguration.TYPE_ID);  ILaunchConfiguration[] configs=launchManager.getLaunchConfigurations(typeid);  return searchMatchingConfigWithProject(project,configs);}  }
class C{  private static boolean contains(int[] modes,int mode){  if (modes == null) {    return false;  }  for (  int i : modes) {    if (i == mode) {      return true;    }  }  return false;}  }
class C{  public void addTransform(String transformURI,NodeList contextNodes) throws TransformationException {  try {    Transform transform=new Transform(this.doc,transformURI,contextNodes);    this.addTransform(transform);  } catch (  InvalidTransformException ex) {    throw new TransformationException("empty",ex);  }}  }
class C{  public Biome byBiomeId(int id){  return byBiomeID.get(id);}  }
class C{  public boolean amNotDeadYet(final GameData data){  boolean hasFactory=false;  boolean ownsLand=false;  for (  final Territory t : data.getMap().getTerritories()) {    if (t.getUnits().someMatch(new CompositeMatchAnd<>(Matches.unitIsOwnedBy(this),Matches.unitHasAttackValueOfAtLeast(1),Matches.UnitCanMove,Matches.UnitIsLand))) {      return true;    }    if (t.getOwner().equals(this)) {      ownsLand=true;    }    if (t.getUnits().someMatch(new CompositeMatchAnd<>(Matches.unitIsOwnedBy(this),Matches.UnitCanProduceUnits))) {      hasFactory=true;    }    if (ownsLand && hasFactory) {      return true;    }  }  return false;}  }
class C{  public In(Socket socket){  if (socket == null)   throw new NullPointerException("argument is null");  try {    InputStream is=socket.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + socket);  }}  }
class C{  public String renameReplacement(){  return renameReplacement;}  }
class C{  public void close() throws IOException {  this.in.close();}  }
class C{  public void help(){  p("");  p("Command                Description");  p("=======                ===========");  p("help()                 Display usage and help messages. ");  p("defineClass(className) Define an extension using the Java class");  p("                       named with the string argument. ");  p("                       Uses ScriptableObject.defineClass(). ");  p("load(['foo.js', ...])  Load JavaScript source files named by ");  p("                       string arguments. ");  p("loadClass(className)   Load a class named by a string argument.");  p("                       The class must be a script compiled to a");  p("                       class file. ");  p("print([expr ...])      Evaluate and print expressions. ");  p("quit()                 Quit the shell. ");  p("version([number])      Get or set the JavaScript version number.");  p("");}  }
class C{  public ISchedulingRule buildRule(){  return root;}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public static String decodeIdentifier(String identifier){  if (identifier.indexOf('\\') < 0) {    return identifier;  }  StringBuffer sb=new StringBuffer();  Matcher m=UNICODE_ESCAPE.matcher(identifier);  while (m.find()) {    m.appendReplacement(sb,"");    sb.append((char)Integer.parseInt(m.group(1),16));  }  m.appendTail(sb);  return sb.toString();}  }
class C{  public static void copy(Context context,Intent intent){  ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);  clipboard.setPrimaryClip(ClipData.newIntent(null,intent));}  }
class C{  public void reset(){  if (!isResettable()) {    throw new UnsupportedOperationException("Reset not supported: underlying source cannot be reset");  }  if (stream != null) {    stream=new BufferedInputStream(source.getAsStream());  } else {    reader=new BufferedReader(source.getAsReader());  }}  }
class C{  public boolean isUnset(Option option){  return (values.get(option.text) == null);}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public long schedule(int tenantId,double costEstimate) throws InterruptedException {  Tenant tenant=tenants.get(tenantId);  DiskRequest request=current_request.get();  if (request.isActive()) {    request.reenter();    if (DEBUG)     print("reenter","thread has reentered scheduler, reentrance_count=%d",request.entrance_count);    return 0;  } else {    request.reset(tenant,costEstimate);    tenant.addNewRequest(request);  }  if (slots.addRequest()) {    if (DEBUG)     print("enqueue","can schedule immediately");    triggerNextRequest();  } else {    if (DEBUG)     print("enqueue","cannot schedule immediately");  }  long beginWait=System.nanoTime();  boolean waited=request.await();  if (DEBUG)   print("execute","executing request");  if (waited) {    return System.nanoTime() - beginWait;  } else {    return 0;  }}  }
class C{  public String hashPassword(String username,String pass){  return DigestProcessingFilter.encodePasswordInA1Format(username,entryPoint.getRealmName(),pass);}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  int oldTable[]=table;  Object oldValues[]=values;  byte oldState[]=state;  int newTable[]=new int[newCapacity];  Object newValues[]=new Object[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      int element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  public ServerHelloDone(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHelloDone");  }}  }
class C{  public void addConfigParam(IFloodlightModule mod,String key,String value){  Map<String,String> moduleParams=configParams.get(mod.getClass());  if (moduleParams == null) {    moduleParams=new HashMap<String,String>();    configParams.put(mod.getClass(),moduleParams);  }  moduleParams.put(key,value);}  }
class C{  public DiscussionObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public void stopSession(){  if (logger.isActivated()) {    logger.debug("Stop the session");  }  if (processor != null) {    processor.stopProcessing();  }  if (outputStream != null) {    outputStream.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.786 -0500",hash_original_method="57044B9D87A0326EE4B43E6606266C00",hash_generated_method="9190A97EBCED6B8A7FD2C6BD8694A3B2") public void warn(Object message,Throwable exception){  log(Level.WARNING,String.valueOf(message),exception);}  }
class C{  public static <T>int sizeOf(final Iterable<T> iterable){  if (iterable instanceof Collection) {    return ((Collection<T>)iterable).size();  } else   if (iterable instanceof SizableIterable) {    return ((SizableIterable<T>)iterable).size();  } else {    int size=0;    for (Iterator<T> iter=iterable.iterator(); iter.hasNext(); iter.next()) {      size++;    }    return size;  }}  }
class C{  @Override public void finish() throws CleartkProcessingException {  allFalseWriter.close();  allFalseFile.delete();  for (  PrintWriter pw : trainingDataWriters.values()) {    pw.flush();    pw.close();  }  super.finish();}  }
class C{  public void testSimpleArrayRegistered() throws Exception {  checkSimpleArray(true);}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,int startRow,int startColumn){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,START_PATTERN),INDEXES_START_PATTERN);  if (result[4] != null) {    startColumn=(int)result[4].getX();    startRow=(int)result[4].getY();  }  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,STOP_PATTERN),INDEXES_STOP_PATTERN);  return result;}  }
class C{  @Override public String toString(){  try {    StringBuffer text;    text=new StringBuffer();    if (m_isLeaf) {      text.append(": ");      text.append(m_localModel.dumpLabel(0,m_train) + "\n");    } else {      dumpDecList(text);    }    return text.toString();  } catch (  Exception e) {    return "Can't print rule.";  }}  }
class C{  protected JCCompilationUnit parse(JavaFileObject filename,CharSequence content){  long msec=now();  JCCompilationUnit tree=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());  if (content != null) {    if (verbose) {      log.printVerbose("parsing.started",filename);    }    if (!taskListener.isEmpty()) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.PARSE,filename);      taskListener.started(e);      keepComments=true;      genEndPos=true;    }    Parser parser=parserFactory.newParser(content,keepComments(),genEndPos,lineDebugInfo);    tree=parser.parseCompilationUnit();    if (verbose) {      log.printVerbose("parsing.done",Long.toString(elapsed(msec)));    }  }  tree.sourcefile=filename;  if (content != null && !taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.PARSE,tree);    taskListener.finished(e);  }  return tree;}  }
class C{  @Override public void showStatus(String status){  label.setText(status);}  }
class C{  private void updateStoragePoolCapacityAfterOperationComplete(List<Volume> clones,DbClient dbClient){  Map<URI,List<URI>> dbPoolToClone=new HashMap<>();  for (  Volume clone : clones) {    URI dbPoolUri=clone.getPool();    List<URI> poolClones=dbPoolToClone.get(dbPoolUri);    if (poolClones == null) {      poolClones=new ArrayList<>();      dbPoolToClone.put(dbPoolUri,poolClones);    }    poolClones.add(clone.getId());  }  StorageSystem dbSystem=dbClient.queryObject(StorageSystem.class,_storageSystemURI);  for (  URI dbPoolUri : dbPoolToClone.keySet()) {    StoragePool dbPool=dbClient.queryObject(StoragePool.class,dbPoolUri);    ExternalBlockStorageDevice.updateStoragePoolCapacity(dbPool,dbSystem,dbPoolToClone.get(dbPoolUri),dbClient);  }}  }
class C{  public FolderTokenRelFld findByName(String fldName) throws Exception {  int i;  FolderTokenRelFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getName().equals(fldName)) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  public static boolean isPropertyDynamic(EsperEPL2GrammarParser.StartEventPropertyRuleContext ast){  List<EsperEPL2GrammarParser.EventPropertyAtomicContext> ctxs=ast.eventProperty().eventPropertyAtomic();  for (  EsperEPL2GrammarParser.EventPropertyAtomicContext ctx : ctxs) {    if (ctx.q != null || ctx.q1 != null) {      return true;    }  }  return false;}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float left=right - (targetAspectRatio * height);  return left;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public Namespace updateNamespaceMembers(BigInteger id,Set<String> users) throws IOException {  String requestUrl=RESOURCE + "/" + id.toString()+ "/users";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT,requestUrl,users);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Namespace.class);}  }
class C{  @Deprecated static public SprogTrafficController instance(){  return null;}  }
class C{  @Override public boolean supportsMultipleTransactions(){  debugCodeCall("supportsMultipleTransactions");  return true;}  }
class C{  private void updateInfoBox(){  if (controlShown) {    String msg="";    if (isInputSet() && (objectSelection.getSelectionIndex() != -1)) {      if ((occurrence == 0) && (visibleOccurrences != 0)) {        msg="Found " + visibleOccurrences + " occurrence";        if (visibleOccurrences > 1) {          msg+="s";        }      } else       if (occurrence != 0) {        msg=occurrence + "/" + visibleOccurrences;      } else {        msg="No occurrences found";      }      if (filteredOccurrences > 0) {        msg+=" (" + filteredOccurrences + " filtered out)";      }    } else     if (objectSelection.getItemCount() == 0) {      msg="No object to locate";    } else {      msg="No invocation loaded";    }    info.setText(msg);    mainComposite.layout();  }}  }
class C{  private void deleteLoggingConfiguration(int[] indices){  if (indices == null || indices.length < 1) {    String msg=Localization.Main.getText("gui.logging.delete.select");    JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);    return;  }  for (  int index : indices) {    String loggingConfig=(String)lstLoggingConfigurations.getModel().getElementAt(index);    int result=JOptionPane.showConfirmDialog(this,Localization.Main.getText("gui.logging.delete.msg",loggingConfig),null,JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);    if (result != JOptionPane.CANCEL_OPTION) {      File profileFile=new File(ConfigurationManager.getConfigurationDirectory(),loggingConfig + ConfigurationManager.LOGGING_SUFFIX);      if (profileFile.exists()) {        profileFile.delete();      }    }  }  loadLoggingConfigurations();}  }
class C{  @Override public void perform(IR ir){  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.operator() == SPLIT) {      RegisterOperand lhs=Unary.getResult(s);      Operator mv=IRTools.getMoveOp(lhs.getType());      Operand rhs=Unary.getVal(s);      Move.mutate(s,mv,lhs,rhs);    }  }}  }
class C{  public void callEugene(String name_Eug_file,ArrayList<ArrayList<Part>> module_variants,PartLibrary part_library,Args options){  try {    Eugene e=new Eugene();    EugeneCollection ec=e.executeFile(new File(options.get_output_directory() + name_Eug_file));    EugeneArray variants=(EugeneArray)ec.get("allResults");    int n_variants=options.get_nP();    if (variants.getElements().size() < options.get_nP()) {      n_variants=variants.getElements().size();    }    for (int i=0; i < n_variants; ++i) {      NamedElement circuit=variants.getElement(i);      if (circuit instanceof org.cidarlab.eugene.dom.Device) {        ArrayList<Part> module=new ArrayList<Part>();        int g_index=0;        for (        NamedElement gate : ((Device)circuit).getComponentList()) {          if (gate instanceof org.cidarlab.eugene.dom.Part) {            NamedElement part=gate;            String p_direction="+";            Part p=new Part(part_library.get_ALL_PARTS().get(part.getName()));            p.set_direction(p_direction);            module.add(p);          } else           if (gate instanceof org.cidarlab.eugene.dom.Device) {            String gate_name=gate.getName();            String g_direction="+";            String o=((Device)circuit).getOrientations(g_index).toString();            if (o.equals("[REVERSE]")) {              g_direction="-";              Device reverse_gate=DeviceUtils.flipAndInvert((Device)gate);              gate=reverse_gate;            }            String egate=g_direction + gate_name;            ArrayList<Part> txn_unit=new ArrayList<Part>();            int p_index=0;            for (            NamedElement part : ((Device)gate).getComponentList()) {              String part_name=part.getName();              String p_direction="+";              String op=((Device)gate).getOrientations(p_index).toString();              if (op.equals("[REVERSE]")) {                p_direction="-";              }              Part p=new Part(part_library.get_ALL_PARTS().get(part.getName()));              p.set_direction(p_direction);              txn_unit.add(p);              p_index++;            }            module.addAll(txn_unit);          }          g_index++;        }        module_variants.add(module);      }    }    logger.info("Number of Eugene solutions " + variants.getElements().size());  } catch (  EugeneException exception) {    exception.printStackTrace();  }}  }
class C{  public static final TColor newARGB(int argb){  return newRGBA(((argb >> 16) & 0xff) * INV8BIT,((argb >> 8) & 0xff) * INV8BIT,(argb & 0xff) * INV8BIT,(argb >>> 24) * INV8BIT);}  }
class C{  public Title(String title){  super(title);}  }
class C{  private void startCameraSource() throws SecurityException {  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  public boolean containsAttribute(Object name,Object value){  return value.equals(getAttribute(name));}  }
class C{  @Override public void handlePatch(Operation patch){  ExampleTaskServiceState currentTask=getState(patch);  ExampleTaskServiceState patchBody=getBody(patch);  if (!validateTransition(patch,currentTask,patchBody)) {    return;  }  updateState(currentTask,patchBody);  patch.complete();switch (patchBody.taskInfo.stage) {case CREATED:    break;case STARTED:  handleSubstage(patchBody);break;case CANCELLED:logInfo("Task canceled: not implemented, ignoring");break;case FINISHED:logFine("Task finished successfully");break;case FAILED:logWarning("Task failed: %s",(patchBody.failureMessage == null ? "No reason given" : patchBody.failureMessage));break;default :logWarning("Unexpected stage: %s",patchBody.taskInfo.stage);break;}}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  @Synchronized("accessLock") public UserChannelDaoSnapshot createSnapshot(){  Map<U,UserSnapshot> userSnapshotMap=Maps.newHashMapWithExpectedSize(userNickMap.size());  for (  U curUser : userNickMap.values())   userSnapshotMap.put(curUser,curUser.createSnapshot());  Map<C,ChannelSnapshot> channelSnapshotMap=Maps.newHashMapWithExpectedSize(channelNameMap.size());  for (  C curChannel : channelNameMap.values())   channelSnapshotMap.put(curChannel,curChannel.createSnapshot());  UserChannelMapSnapshot mainMapSnapshot=mainMap.createSnapshot(userSnapshotMap,channelSnapshotMap);  EnumMap<UserLevel,UserChannelMap<UserSnapshot,ChannelSnapshot>> levelsMapSnapshot=Maps.newEnumMap(UserLevel.class);  for (  Map.Entry<UserLevel,UserChannelMap<U,C>> curLevel : levelsMap.entrySet())   levelsMapSnapshot.put(curLevel.getKey(),curLevel.getValue().createSnapshot(userSnapshotMap,channelSnapshotMap));  ImmutableBiMap.Builder<String,UserSnapshot> userNickMapSnapshotBuilder=ImmutableBiMap.builder();  for (  Map.Entry<String,U> curNickEntry : userNickMap.entrySet())   userNickMapSnapshotBuilder.put(curNickEntry.getKey(),userSnapshotMap.get(curNickEntry.getValue()));  ImmutableBiMap.Builder<String,ChannelSnapshot> channelNameMapSnapshotBuilder=ImmutableBiMap.builder();  for (  Map.Entry<String,C> curName : channelNameMap.entrySet())   channelNameMapSnapshotBuilder.put(curName.getKey(),channelSnapshotMap.get(curName.getValue()));  ImmutableBiMap.Builder<String,UserSnapshot> privateUserSnapshotBuilder=ImmutableBiMap.builder();  for (  Map.Entry<String,U> curNickEntry : privateUsers.entrySet())   privateUserSnapshotBuilder.put(curNickEntry.getKey(),userSnapshotMap.get(curNickEntry.getValue()));  UserChannelDaoSnapshot daoSnapshot=new UserChannelDaoSnapshot(bot,locale,mainMapSnapshot,levelsMapSnapshot,userNickMapSnapshotBuilder.build(),channelNameMapSnapshotBuilder.build(),privateUserSnapshotBuilder.build());  for (  UserSnapshot curUserSnapshot : userSnapshotMap.values())   curUserSnapshot.setDao(daoSnapshot);  for (  ChannelSnapshot curChannelSnapshot : channelSnapshotMap.values())   curChannelSnapshot.setDao(daoSnapshot);  return daoSnapshot;}  }
class C{  protected void analyzeParametrizedType(ParameterizedType parameterizedType,Type rawType){  if (List.class.equals(rawType)) {    this.isList=true;    if (parameterizedType.getActualTypeArguments()[0] instanceof Class && ((Class)parameterizedType.getActualTypeArguments()[0]).isAnnotationPresent(DTO.class)) {      isListOfDto=true;      dtoImpl=convertType(parameterizedType.getActualTypeArguments()[0]) + "Impl";    }  } else   if (Map.class.equals(rawType)) {    isMap=true;    if (parameterizedType.getActualTypeArguments()[1] instanceof Class && ((Class)parameterizedType.getActualTypeArguments()[1]).isAnnotationPresent(DTO.class)) {      isMapOfDto=true;      dtoImpl=convertType(parameterizedType.getActualTypeArguments()[1]) + "Impl";    }  }}  }
class C{  private static byte[] readRawLine(InputStream inputStream) throws IOException {  ByteArrayOutputStream buf=new ByteArrayOutputStream();  int ch;  while ((ch=inputStream.read()) >= 0) {    buf.write(ch);    if (ch == '\n') {      break;    }  }  if (buf.size() == 0) {    return null;  }  return buf.toByteArray();}  }
class C{  public static boolean isLessEqual(double d1,double d2){  if (Double.isNaN(d1) || Double.isNaN(d2)) {    return false;  }  return Double.compare(d1,d2) < 0 || isEqual(d1,d2);}  }
class C{  private String generateFieldInfoInputs(Class<?> cls){  java.lang.reflect.Field[] fields=cls.getDeclaredFields();  StringBuilder sb=new StringBuilder();  for (int i=0; i < fields.length; i++) {    java.lang.reflect.Field f=fields[i];    Class<?> c=ClassUtils.primitiveToWrapper(f.getType());    sb.append(f.getName()).append(FIELD_SEPARATOR).append(f.getName()).append(FIELD_SEPARATOR).append(c.getSimpleName().toUpperCase()).append(RECORD_SEPARATOR);  }  return sb.substring(0,sb.length() - 1);}  }
class C{  boolean moveOrCopy(IResource resource,final IPath sourcePrefix,final IPath destinationPrefix,final boolean move){  ProposedResourceDelta sourceDelta=getDelta(resource);  if (sourceDelta.getKind() == IResourceDelta.REMOVED) {    return false;  }  IResource destinationResource=getDestinationResource(resource,sourcePrefix,destinationPrefix);  ProposedResourceDelta destinationDelta=getDelta(destinationResource);  if ((destinationDelta.getKind() & (IResourceDelta.ADDED | IResourceDelta.CHANGED)) > 0) {    return false;  }  IPath fromPath=resource.getFullPath();  boolean wasAdded=false;  final int sourceFlags=sourceDelta.getFlags();  if (move) {    if (sourceDelta.getKind() == IResourceDelta.ADDED) {      if ((sourceFlags & IResourceDelta.MOVED_FROM) != 0) {        fromPath=sourceDelta.getMovedFromPath();        sourceDelta.setMovedFromPath(null);      }      sourceDelta.setKind(0);      wasAdded=true;    } else {      sourceDelta.setKind(IResourceDelta.REMOVED);      sourceDelta.setFlags(IResourceDelta.MOVED_TO);      sourceDelta.setMovedToPath(destinationPrefix.append(fromPath.removeFirstSegments(sourcePrefix.segmentCount())));    }  }  if (destinationDelta.getKind() == IResourceDelta.REMOVED) {    destinationDelta.setKind(IResourceDelta.CHANGED);    destinationDelta.addFlags(IResourceDelta.REPLACED);  } else {    destinationDelta.setKind(IResourceDelta.ADDED);  }  if (!wasAdded || !fromPath.equals(resource.getFullPath())) {    destinationDelta.addFlags(move ? IResourceDelta.MOVED_FROM : IResourceDelta.COPIED_FROM);    destinationDelta.setMovedFromPath(fromPath);    if (move)     destinationDelta.addFlags(sourceFlags);  }  return true;}  }
class C{  public float distanceSquared(vec3 b){  float x=this.m[0] - b.m[0];  float y=this.m[1] - b.m[1];  float z=this.m[2] - b.m[2];  float result=x * x + y * y + z * z;  return result;}  }
class C{  public int entrySize(String name){  name=fixFileName(name);  return Util.getImplementation().getStorageEntrySize(name);}  }
class C{  private void processNewPort(DatapathId sw,OFPort p){  if (isLinkDiscoverySuppressed(sw,p)) {    return;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return;  }  NodePortTuple npt=new NodePortTuple(sw,p);  discover(sw,p);  addToQuarantineQueue(npt);}  }
class C{  default String dive(){  return "I can dive.";}  }
class C{  private void sortNeurons(){}  }
class C{  public EdgeHistogramImplementation(BufferedImage image){  this.image=image;  width=image.getWidth();  height=image.getHeight();  extractFeature();  edgeHistogram=setEdgeHistogram();}  }
class C{  void shutdown(){  run.set(false);}  }
class C{  @Override public String lset(final byte[] key,final long index,final byte[] value){  checkIsInMultiOrPipeline();  client.lset(key,index,value);  return client.getStatusCodeReply();}  }
class C{  public boolean isMainlineAC(){  if (((connectA != null) && (((TrackSegment)connectA).getMainline())) || ((connectB != null) && (((TrackSegment)connectB).getMainline()))) {    return true;  } else {    return false;  }}  }
class C{  public boolean hasRegistrations(){  return (!this.viewResolvers.isEmpty());}  }
class C{  public static void dumpAST(Tree ast){  if (System.getProperty(PROPERTY_ENABLED_AST_DUMP) != null) {    StringWriter writer=new StringWriter();    PrintWriter printer=new PrintWriter(writer);    renderNode(new char[0],ast,printer);    dumpAST(printer,ast,2);    log.info(".dumpAST ANTLR Tree dump follows...\n" + writer.toString());  }}  }
class C{  static byte[] compactMemoryToByteArray(final Memory srcMem,int curCount){  int preLongs=srcMem.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;  int outBytes=(curCount << 3) + (preLongs << 3);  byte[] byteArrOut=new byte[outBytes];  srcMem.getByteArray(0,byteArrOut,0,outBytes);  return byteArrOut;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static void square(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public TungstenProperties asProperties(){  TungstenProperties caps=new TungstenProperties();  caps.setStringList(ROLES,getRoles());  caps.setString(MODEL,getModel());  caps.setBoolean(CAP_CONSISTENCY,this.isConsistencyCheck());  caps.setBoolean(CAP_HEARTBEAT,this.isHeartbeat());  caps.setBoolean(CAP_FLUSH,this.isFlush());  caps.setString(PROVISION,getProvisionDriver());  return caps;}  }
class C{  public static String formatTime(long time){  Date date=new Date(time);  SimpleDateFormat sdf=new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");  return sdf.format(date).toString();}  }
class C{  public UsageTrackingQueryCachingPolicy(int historySize){  this.recentlyUsedFilters=new FrequencyTrackingRingBuffer(historySize,SENTINEL);}  }
class C{  protected void init(Document sqlDoc,String sqlDefsSection,Connection conn,Map<String,String> configParameters) throws SQLException {  Element dbMatcherElement=(Element)(sqlDoc.getElementsByTagName("dbMatchers").item(0));  String dbProduct=null;  if (dbMatcherElement != null) {    dbProduct=matchDbConnection(conn,dbMatcherElement);  }  Element dbOptionsElement=(Element)(sqlDoc.getElementsByTagName("dbOptions").item(0));  if (dbOptionsElement != null) {    populateDbOptions("",dbOptionsElement,m_dbOptions);    if (dbProduct != null) {      populateDbOptions(dbProduct,dbOptionsElement,m_dbOptions);    }  }  NodeList sections=sqlDoc.getElementsByTagName("sqlDefs");  int sectionsCount=sections.getLength();  Element sectionElement=null;  boolean found=false;  for (int i=0; i < sectionsCount; i++) {    sectionElement=(Element)(sections.item(i));    String sectionName=sectionElement.getAttribute("name");    if (sectionName != null && sectionName.equals(sqlDefsSection)) {      found=true;      break;    }  }  if (!found) {    StringBuilder exceptionBuffer=new StringBuilder(64).append("Error loading sql definition file. ").append("The element named \'").append(sqlDefsSection).append("\' does not exist.");    throw new RuntimeException(exceptionBuffer.toString());  }  Map<String,String> parameters=new HashMap<String,String>();  Element parametersElement=(Element)(sectionElement.getElementsByTagName("parameters").item(0));  if (parametersElement != null) {    NamedNodeMap params=parametersElement.getAttributes();    int paramCount=params.getLength();    for (int i=0; i < paramCount; i++) {      Attr param=(Attr)params.item(i);      String paramName=param.getName();      String paramValue=param.getValue();      parameters.put(paramName,paramValue);    }  }  parameters.putAll(configParameters);  Map<String,String> defaultSqlStatements=new HashMap<String,String>();  Map<String,String> dbProductSqlStatements=new HashMap<String,String>();  NodeList sqlDefs=sectionElement.getElementsByTagName("sql");  int sqlCount=sqlDefs.getLength();  for (int i=0; i < sqlCount; i++) {    Element sqlElement=(Element)(sqlDefs.item(i));    String sqlDb=sqlElement.getAttribute("db");    Map<String,String> sqlMap;    if (sqlDb.equals("")) {      sqlMap=defaultSqlStatements;    } else     if (sqlDb.equals(dbProduct)) {      sqlMap=dbProductSqlStatements;    } else {      continue;    }    String sqlKey=sqlElement.getAttribute("name");    if (sqlKey == null) {      continue;    }    String sqlString=sqlElement.getFirstChild().getNodeValue();    StringBuilder replaceBuffer=new StringBuilder(64);    for (    Map.Entry<String,String> entry : parameters.entrySet()) {      replaceBuffer.setLength(0);      replaceBuffer.append("${").append(entry.getKey()).append("}");      sqlString=substituteSubString(sqlString,replaceBuffer.toString(),entry.getValue());    }    String shared=stringTable.get(sqlString);    if (shared == null) {      stringTable.put(sqlString,sqlString);    } else {      sqlString=shared;    }    sqlMap.put(sqlKey,sqlString);  }  m_sql.putAll(defaultSqlStatements);  m_sql.putAll(dbProductSqlStatements);}  }
class C{  public MemoryMapParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_MEMMAP_SUCCESS);}  }
class C{  public String toString(Collection<String> dimensionNames){  StringBuffer buffer=new StringBuffer();  int i=0;  for (  String dimName : dimensionNames) {    buffer.append(dimName + ":\t");    buffer.append(Tools.formatNumber(centroid[i]) + Tools.getLineSeparator());    i++;    if (i > 100) {      break;    }  }  return buffer.toString();}  }
class C{  public static SpannableString typeface(CharSequence sequence){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  return typeface(sequence,sDefaultTypefaceCollection,Typeface.NORMAL);}  }
class C{  public static String resourceToHandle(final String project,final IResource resource){  if (project != null && !"".equals(project) && project.equals(resource.getProject().getName()))   return resource.getProjectRelativePath().toPortableString();  return resource.getFullPath().toPortableString();}  }
class C{  Location readLocation(){  byte tag=readByte();  long classRef=readObjectRef();  long methodRef=readMethodRef();  long codeIndex=readLong();  if (classRef != 0) {    ReferenceTypeImpl refType=vm.referenceType(classRef,tag);    return new LocationImpl(vm,refType,methodRef,codeIndex);  } else {    return null;  }}  }
class C{  void chooseFirstProvider(){  if (spi != null) {    return;  }synchronized (lock) {    if (spi != null) {      return;    }    if (debug != null) {      int w=--warnCount;      if (w >= 0) {        debug.println("KeyAgreement.init() not first method " + "called, disabling delayed provider selection");        if (w == 0) {          debug.println("Further warnings of this type will " + "be suppressed");        }        new Exception("Call trace").printStackTrace();      }    }    Exception lastException=null;    while ((firstService != null) || serviceIterator.hasNext()) {      Service s;      if (firstService != null) {        s=firstService;        firstService=null;      } else {        s=serviceIterator.next();      }      if (JceSecurity.canUseProvider(s.getProvider()) == false) {        continue;      }      try {        Object obj=s.newInstance(null);        if (obj instanceof KeyAgreementSpi == false) {          continue;        }        spi=(KeyAgreementSpi)obj;        provider=s.getProvider();        firstService=null;        serviceIterator=null;        return;      } catch (      Exception e) {        lastException=e;      }    }    ProviderException e=new ProviderException("Could not construct KeyAgreementSpi instance");    if (lastException != null) {      e.initCause(lastException);    }    throw e;  }}  }
class C{  protected SpatialEntry createNewLeafEntry(DBID id){  return new SpatialPointLeafEntry(id,relation.get(id));}  }
class C{  public static void multiplyMV(double[] resultVec,int resultVecOffset,double[] lhsMat,int lhsMatOffset,double[] rhsVec,int rhsVecOffset){  String message=null;  if (resultVec == null) {    message="Result vector can not be null.";  } else   if (lhsMat == null) {    message="Left hand side matrix can not be null.";  } else   if (rhsVec == null) {    message="Right hand side vector can not be null.";  } else   if ((resultVecOffset + 4) > resultVec.length) {    message="Specified result offset would overflow the passed result vector.";  } else   if ((lhsMatOffset + 16) > lhsMat.length) {    message="Specified left hand side offset would overflow the passed lhs matrix.";  } else   if ((rhsVecOffset + 4) > rhsVec.length) {    message="Specified right hand side offset would overflow the passed rhs vector.";  }  if (message != null) {    throw new IllegalArgumentException(message);  }  double sum=0;  for (int i=0; i < 4; ++i) {    sum=0;    for (int k=0; k < 4; ++k) {      sum+=lhsMat[i + 4 * k + lhsMatOffset] * rhsVec[k + rhsVecOffset];    }    resultVec[i + resultVecOffset]=sum;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CustomCategoryURLGenerator clone=(CustomCategoryURLGenerator)super.clone();  clone.urlSeries=new java.util.ArrayList(this.urlSeries);  return clone;}  }
class C{  public static boolean isMethod(Declaration decl){  return (decl instanceof Function) && !((Function)decl).isParameter();}  }
class C{  public Publisher<Payload> requestResponse(final Payload payload){  return startRequestResponse(nextStreamId(),FrameType.REQUEST_RESPONSE,payload);}  }
class C{  public String shortestMatch(String input){  TrieNode node=root;  for (int i=input.length() - 1; i >= 0; i--) {    node=node.getChild(input.charAt(i));    if (node == null)     return null;    if (node.isTerminal())     return input.substring(i);  }  return null;}  }
class C{  @Deprecated public OperatorDescription(final ClassLoader classLoader,final String key,final String name,final String className,final String group,final String iconName,final String deprecationInfo,final Plugin provider) throws ClassNotFoundException {  this(classLoader,key,name,className,null,null,group,iconName,deprecationInfo,provider);}  }
class C{  public static String toUnderscoreName(String name){  if (name == null)   return null;  String filteredName=name;  if (filteredName.indexOf("_") >= 0 && filteredName.equals(filteredName.toUpperCase())) {    filteredName=filteredName.toLowerCase();  }  if (filteredName.indexOf("_") == -1 && filteredName.equals(filteredName.toUpperCase())) {    filteredName=filteredName.toLowerCase();  }  StringBuffer result=new StringBuffer();  if (filteredName != null && filteredName.length() > 0) {    result.append(filteredName.substring(0,1).toLowerCase());    for (int i=1; i < filteredName.length(); i++) {      String preChart=filteredName.substring(i - 1,i);      String c=filteredName.substring(i,i + 1);      if (c.equals("_")) {        result.append("_");        continue;      }      if (preChart.equals("_")) {        result.append(c.toLowerCase());        continue;      }      if (c.matches("\\d")) {        result.append(c);      } else       if (c.equals(c.toUpperCase())) {        result.append("_");        result.append(c.toLowerCase());      } else {        result.append(c);      }    }  }  return result.toString();}  }
class C{  public static short encodeVelocity(double vPerTick){  return (short)(vPerTick * 8000.0);}  }
class C{  private void updateStatus(String message){  setErrorMessage(message);  setPageComplete(message == null);}  }
class C{  public static Class toClass(ClassFile cf,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  try {    byte[] b=toBytecode(cf);    Method method;    Object[] args;    if (domain == null) {      method=defineClass1;      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length)};    } else {      method=defineClass2;      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length),domain};    }    return toClass2(method,loader,args);  } catch (  RuntimeException e) {    throw e;  }catch (  java.lang.reflect.InvocationTargetException e) {    throw new CannotCompileException(e.getTargetException());  }catch (  Exception e) {    throw new CannotCompileException(e);  }}  }
class C{  private void resolveQuicksand(){  IBoard board=game.getBoard();  int width=board.getWidth();  int height=board.getHeight();  debugTime("resolve quicksand 1",true);  for (int currentXCoord=0; currentXCoord < width; currentXCoord++) {    for (int currentYCoord=0; currentYCoord < height; currentYCoord++) {      Coords currentCoords=new Coords(currentXCoord,currentYCoord);      IHex currentHex=board.getHex(currentXCoord,currentYCoord);      if (currentHex.terrainLevel(Terrains.SWAMP) == 3) {        for (        Entity entity : game.getEntitiesVector(currentCoords)) {          if (entity.isStuck()) {            server.doSinkEntity(entity);          }        }      } else       if (currentHex.terrainLevel(Terrains.SWAMP) == 2) {        currentHex.removeTerrain(Terrains.SWAMP);        currentHex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.SWAMP,3));        server.getHexUpdateSet().add(currentCoords);      }    }  }  debugTime("resolve quicksand 1 end",true);}  }
class C{  public Vector3f scaleAdd(float scalar,Vector3f add){  x=x * scalar + add.x;  y=y * scalar + add.y;  z=z * scalar + add.z;  return this;}  }
class C{  @Override public void addNotify(){  super.addNotify();  SystemUtils.setWindowTopMost(this);}  }
class C{  public static vec3 r_scale(vec3 v,float s){  float x=v.m[0];  float y=v.m[1];  float z=v.m[2];  vec3 result=new vec3(x * s,y * s,z * s);  return result;}  }
class C{  public double[] toRealPoint(int scale){  if (mChart instanceof XYChart) {    XYChart chart=(XYChart)mChart;    return chart.toRealPoint(oldX,oldY,scale);  }  return null;}  }
class C{  private void sendMessage(SIPMessage message,boolean retry) throws IOException {  Socket sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),this.peerAddress,this.peerPort,this.peerProtocol,message,retry,this);  if (sock != mySock && sock != null) {    try {      if (mySock != null)       mySock.close();    } catch (    IOException ex) {    }    mySock=sock;    this.myClientInputStream=mySock.getInputStream();    this.myClientOutputStream=mySock.getOutputStream();    Thread thread=new Thread(this);    thread.setDaemon(true);    thread.setName("TCPMessageChannelThread");    thread.start();  }}  }
class C{  public ByteArrayBuffer(final int initialCapacity){  this(0,0,new byte[assertNonNegative("initialCapacity",initialCapacity)]);}  }
class C{  private static void validateNumberField(ServiceField field,String value){  if (StringUtils.isNotBlank(value)) {    validateNumber(field.getName(),value);    if (new Integer(value) < field.getValidation().getMin()) {      throw APIException.badRequests.serviceFieldBelowMin(field.getName());    }    if (new Integer(value) > field.getValidation().getMax()) {      throw APIException.badRequests.serviceFieldAboveMax(field.getName());    }  }}  }
class C{  public LogisticGrowth(Type units){  super(units);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public Arg(QName qname,XObject val,boolean isFromWithParam){  m_qname=qname;  m_val=val;  m_isFromWithParam=isFromWithParam;  m_isVisible=!isFromWithParam;  m_expression=null;}  }
class C{  public void swapBuffers(){  RenderTarget tmp=mReadBuffer;  mReadBuffer=mWriteBuffer;  mWriteBuffer=tmp;}  }
class C{  private void reset(){  tabbedPane().removeAll();  setPreferredSize(new Dimension(600,400));  removeAll();  int selectedIndex=-1;  for (int i=0; i < graphs.size(); i++) {    Graph graph=graphs.get(i);    tabbedPane().addTab(tabName(i + 1),graphDisplay(graph));  }  tabbedPane().setSelectedIndex(selectedIndex);  add(tabbedPane(),BorderLayout.CENTER);  validate();}  }
class C{  private void addEdge(){  childMatrix[randomParent][childMatrix[randomParent][0]]=randomChild;  childMatrix[randomParent][0]++;  parentMatrix[randomChild][parentMatrix[randomChild][0]]=randomParent;  parentMatrix[randomChild][0]++;}  }
class C{  public final synchronized int newClassSerialNumber(){  return ++generatedClassSerial;}  }
class C{  private static int blend_burn(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=(br == 0) ? 0 : 255 - peg(((255 - ar) << 8) / br);  int cg=(bg == 0) ? 0 : 255 - peg(((255 - ag) << 8) / bg);  int cb=(bb == 0) ? 0 : 255 - peg(((255 - ab) << 8) / bb);  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  Part(String s){  named=s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"';  if (named) {    this.s=s.substring(1,s.length() - 1);  } else {    this.s=s;    try {      c=Class.forName("javax.swing.J" + s);    } catch (    Exception e) {    }    try {      c=Class.forName(s.replace("_","."));    } catch (    Exception e) {    }  }}  }
class C{  public static boolean saveAttributes(final String filepath,Bundle bundle){  ExifInterface exif;  try {    exif=new ExifInterface(filepath);  } catch (  IOException e) {    e.printStackTrace();    return false;  }  for (  String tag : EXIF_TAGS) {    if (bundle.containsKey(tag)) {      exif.setAttribute(tag,bundle.getString(tag));    }  }  try {    exif.saveAttributes();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public static boolean isUiThread(){  return Thread.currentThread().getId() == Looper.getMainLooper().getThread().getId();}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  public FieldTypeLookup(){  fullNameToFieldType=new CopyOnWriteHashMap<>();  indexNameToFieldType=new CopyOnWriteHashMap<>();}  }
class C{  public void update(User user){  mDaoSession.update(user);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof RemoteObject) {    if (ref == null) {      return obj == this;    } else {      return ref.remoteEquals(((RemoteObject)obj).ref);    }  } else   if (obj != null) {    return obj.equals(this);  } else {    return false;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getNetwork();}  }
class C{  private static void usage(String s){  p("Didn't understand \"" + s + "\".");  p("Valid arguments are:");  p("-version 100|110|120|130|140|150|160|170");  System.exit(1);}  }
class C{  public boolean isRanged(){  return isRanged;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (dialog != null) {    dialog.setVisible(false);  }}  }
class C{  @Override public void completeImport_ImportURI(EObject model,Assignment assignment,ContentAssistContext context,ICompletionProposalAcceptor acceptor){  List<IContainer> visibleContainers=containerUtil.getVisibleContainers(model.eResource());  URI fromURI=model.eResource().getURI();  List<URI> proposedURIs=new ArrayList<URI>();  FDModel fdmodel=null;  if (model instanceof FDModel) {    fdmodel=(FDModel)model;  } else   if (model instanceof Import) {    fdmodel=(FDModel)model.eContainer();  }  EList<Import> imports=fdmodel.getImports();  List<String> importedUris=Lists.newArrayList();  for (  Import import1 : imports) {    importedUris.add(import1.getImportURI());  }  for (  IContainer iContainer : visibleContainers) {    Iterable<IResourceDescription> resourceDescriptions=iContainer.getResourceDescriptions();    for (Iterator<IResourceDescription> iterator=resourceDescriptions.iterator(); iterator.hasNext(); ) {      IResourceDescription desc=(IResourceDescription)iterator.next();      URI uri=desc.getURI();      if (!uri.equals(fromURI) && Arrays.binarySearch(extensionsForImportURIScope,uri.fileExtension()) > -1) {        proposedURIs.add(desc.getURI());      }    }  }  for (  URI uri : proposedURIs) {    String result=FrancaIDLUtils.relativeURIString(fromURI,uri);    if (!importedUris.contains(result)) {      String displayString=uri.lastSegment() + " - " + result;      acceptor.accept(createCompletionProposal("\"" + result + "\"",displayString,null,context));    }  }  List<URI> classpathResources=Lists.newArrayList();  XtextResourceSet resourceSet=(XtextResourceSet)model.eResource().getResourceSet();  Object classpathURIContext=resourceSet.getClasspathURIContext();  if (classpathURIContext instanceof JavaProject) {    for (    IContainer iContainer : visibleContainers) {      Iterable<IResourceDescription> resourceDescriptions=iContainer.getResourceDescriptions();      for (      IResourceDescription iResourceDescription : resourceDescriptions) {        if (iResourceDescription.getURI().toString() != model.eResource().getURI().toString() && (Arrays.binarySearch(extensionsForImportURIScope,iResourceDescription.getURI().fileExtension()) > -1)) {          classpathResources.add(iResourceDescription.getURI());        }      }    }  }  if (context.getPrefix() == "\"classpath:") {    createProposals(context,acceptor,classpathResources,fromURI,importedUris);  } else {    createProposals(context,acceptor,classpathResources,fromURI,importedUris);  }  super.completeImport_ImportURI(model,assignment,context,acceptor);}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  fragment.startActivityForResult(getIntent(context),REQUEST_CODE);}  }
class C{  public CreateLinkRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String type){  super(requestUrl,client,options,type);}  }
class C{  @Override public long downloadToStream(String uri,OutputStream outputStream,final BitmapUtils.BitmapLoadTask<?> task){  if (task == null || task.isCancelled() || task.getTargetContainer() == null)   return -1;  URLConnection urlConnection=null;  BufferedInputStream bis=null;  OtherUtils.trustAllHttpsURLConnection();  long result=-1;  long fileLen=0;  long currCount=0;  try {    if (uri.startsWith("/")) {      FileInputStream fileInputStream=new FileInputStream(uri);      fileLen=fileInputStream.available();      bis=new BufferedInputStream(fileInputStream);      result=System.currentTimeMillis() + this.getDefaultExpiry();    } else     if (uri.startsWith("assets/")) {      InputStream inputStream=this.getContext().getAssets().open(uri.substring(7,uri.length()));      fileLen=inputStream.available();      bis=new BufferedInputStream(inputStream);      result=Long.MAX_VALUE;    } else {      final URL url=new URL(uri);      urlConnection=url.openConnection();      urlConnection.setConnectTimeout(this.getDefaultConnectTimeout());      urlConnection.setReadTimeout(this.getDefaultReadTimeout());      bis=new BufferedInputStream(urlConnection.getInputStream());      result=urlConnection.getExpiration();      result=result < System.currentTimeMillis() ? System.currentTimeMillis() + this.getDefaultExpiry() : result;      fileLen=urlConnection.getContentLength();    }    if (task.isCancelled() || task.getTargetContainer() == null)     return -1;    byte[] buffer=new byte[4096];    int len=0;    BufferedOutputStream out=new BufferedOutputStream(outputStream);    while ((len=bis.read(buffer)) != -1) {      out.write(buffer,0,len);      currCount+=len;      if (task.isCancelled() || task.getTargetContainer() == null)       return -1;      task.updateProgress(fileLen,currCount);    }    out.flush();  } catch (  Throwable e) {    result=-1;    LogUtils.e(e.getMessage(),e);  } finally {    IOUtils.closeQuietly(bis);  }  return result;}  }
class C{  private boolean commentExists(CommentEntry comment,URL feedUrl,SitesService sitesService){  try {    String content=StringEscapeUtils.unescapeXml(EntryUtils.getXhtmlContent(comment));    ContentQuery query=new ContentQuery(feedUrl);    String parentId=comment.getLink(SitesLink.Rel.PARENT,ILink.Type.ATOM).getHref();    query.setParent(parentId.substring(parentId.lastIndexOf('/') + 1));    query.setKind("comment");    List<BaseContentEntry<?>> entries=entryProvider.getEntries(query,sitesService);    for (    BaseContentEntry<?> entry : entries) {      String otherContent=entry.getTextContent().getContent().getPlainText();      if (otherContent.equals(content)) {        return true;      }    }    return false;  } catch (  IOException e) {    LOGGER.log(Level.WARNING,"Error communicating with the server.",e);    return false;  }catch (  ServiceException e) {    LOGGER.log(Level.WARNING,"Error communicating with the server.",e);    return false;  }}  }
class C{  public void filledPolygon(double[] x,double[] y){  int n=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.fill(path);  draw();}  }
class C{  public byte[] encrypt(String string){  return encrypt(string.getBytes());}  }
class C{  private void routeHandle(Request request,Response response,Route route) throws Exception {  Object target=route.getTarget();  if (null == target) {    Class<?> clazz=route.getAction().getDeclaringClass();    target=ioc.getBean(clazz);    route.setTarget(target);  }  request.initPathParams(route.getPath());  WebContextHolder.init(servletContext,request,response);  if (route.getTargetType() == RouteHandler.class) {    RouteHandler routeHandler=(RouteHandler)target;    routeHandler.handle(request,response);  } else {    routeViewHandler.handle(request,response,route);  }}  }
class C{  public boolean isCancelled(){  return cancelled;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public int stemPrefix(char s[],int len){  for (int i=0; i < prefixes.length; i++)   if (startsWithCheckLength(s,len,prefixes[i]))   return deleteN(s,0,len,prefixes[i].length);  return len;}  }
class C{  private void doFinish(String fileName,String setName,IProgressMonitor monitor) throws IOException, CoreException {  monitor.beginTask("Creating " + setName,1);  monitor.setTaskName("Creating file...");  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IFile file=root.getFile(new Path(fileName));  ObjectXmlPersist persist=new ObjectXmlPersist(XStreamFactory.getSharedRefXStream());  if (file.exists()) {    addToSet(persist,file,setName);  } else {    newFileAndSet(persist,file,setName);  }  monitor.worked(1);}  }
class C{  public EntityMessageDeserializer(){  super(NotificationInterface.ENTITY_VERSIONED_MESSAGE_TYPE,AbstractNotification.CURRENT_MESSAGE_VERSION,getDeserializerMap(),NOTIFICATION_LOGGER);}  }
class C{  protected void append(Node n){  if (table == null) {    table=new Node[11];  } else   if (size == table.length - 1) {    Node[] t=new Node[table.length * 2 + 1];    System.arraycopy(table,0,t,0,size);    table=t;  }  table[size++]=n;}  }
class C{  private void invalidate() throws IOException {  buf_end=0;  buf_pos=0;  real_pos=super.getFilePointer();}  }
class C{  @Override public long skip(long n) throws IOException {  if (bb == null) {    throw new IOException("skip on a closed InputStream");  }  if (n <= 0) {    return 0;  }  int nInt=(int)n;  int skip=Math.min(bb.remaining(),nInt);  bb.position(bb.position() + skip);  return nInt;}  }
class C{  public int[] updateResultsForRewrite(int waitedSize,boolean hasException){  return null;}  }
class C{  public void initOptions(){  _maxSearchesString=SearchSettings.PARALLEL_SEARCH.getValue();  _maxSearchesField.setValue(_maxSearchesString);}  }
class C{  private double semiMinorAxis(){  return minorAxis() / 2;}  }
class C{  public static void compareStatArchiveFiles(final File expectedStatArchiveFile,final File actualStatArchiveFile) throws IOException {  assertThat(expectedStatArchiveFile).exists();  assertThat(actualStatArchiveFile.length()).isEqualTo(expectedStatArchiveFile.length());  assertThat(readBytes(actualStatArchiveFile)).isEqualTo(readBytes(expectedStatArchiveFile));}  }
class C{  public static RegressionDataSet readR(int numeric_target_column,Reader reader,int lines_to_skip,Set<Integer> cat_cols) throws IOException {  return readR(numeric_target_column,reader,DEFAULT_DELIMITER,lines_to_skip,DEFAULT_COMMENT,cat_cols);}  }
class C{  protected void write(BinaryRawWriterEx writer,boolean convertBinary){  writer.writeBoolean(convertBinary);  writer.writeObjectDetached(nativeFactory);  if (nativeFactory == null) {    writer.writeString(typName);    writer.writeMap(props);  }}  }
class C{  public final List append1D(Object value){  if (this.first == null) {    this.first=new ConsCell(value,null);    this.last=this.first;  } else {    this.last.next=new ConsCell(value,null);    this.last=this.last.next;  }  return this;}  }
class C{  public synchronized void zoom(final Point2D p,double scale){  m_itransform.transform(p,m_tmpPoint);  zoomAbs(m_tmpPoint,scale);}  }
class C{  public DataSourceAdministrator(TungstenProperties replicatorProps){  this.replicatorProps=replicatorProps;}  }
class C{  public final static void copy(final InputStream in,final OutputStream out) throws IOException {  final byte[] buffer=new byte[0xffff];  int len;  try {    while ((len=in.read(buffer)) != -1)     out.write(buffer,0,len);  }  finally {    closeEL(in);    closeEL(out);  }}  }
class C{  public CThreadSynchronizer(final ProcessManager processManager,final ThreadListener threadEventListener){  Preconditions.checkNotNull(processManager,"IE01516: Process manager argument can not be null");  Preconditions.checkNotNull(threadEventListener,"IE01517: Thread event listener argument can not be null");  m_processManager=processManager;  m_threadEventListener=threadEventListener;  processManager.addListener(m_internalThreadListener);}  }
class C{  @Override public String encode(String value){  return doubleMetaphone(value);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.023 -0500",hash_original_method="74BC2A8347918586B07692C369988E7C",hash_generated_method="A12A0E4E338A558BFD3C45A30B84EC64") private void delayedExecute(RunnableScheduledFuture<?> task){  if (isShutdown())   reject(task); else {    super.getQueue().add(task);    if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))     task.cancel(false); else     prestartCoreThread();  }}  }
class C{  public void dispose(){  m_settings.getDisplaySettings().removeListener(m_internalListener);  m_navigationPanel.dispose();}  }
class C{  public VasaAssociationObject[] queryAssociatedCapabilityForFileSystem(String[] fsId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedCapabilityForFileSystem(): ";  log.info(methodName + "Entry");  if (fsId != null) {    log.info(methodName + "input file system Ids: " + Arrays.asList(fsId));  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  VasaAssociationObject[] objs=sosManager.queryAssociatedCapabilityForFileSystem(fsId);  log.info(methodName + "Exit returning vasa association objects of size[" + objs.length+ "]");  return objs;}  }
class C{  public String sqlAdmin_prepareDatabaseForTransfer(int step,String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlAdmin_prepareDatabaseForTransfer(step,catalogName,schemaName);}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  private static boolean isReachable(String addr,int openPort,int timeOutMillis){  try {    try (Socket soc=new Socket()){      soc.connect(new InetSocketAddress(addr,openPort),timeOutMillis);    }     return true;  } catch (  IOException ex) {    LOGGER.warn("socket connection failed:  ",ex);    return false;  }}  }
class C{  public void startElement(String name,UIComponent componentForElement) throws IOException {  if (name == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  char firstChar=name.charAt(0);  if ((firstChar == 's') || (firstChar == 'S')) {    if ("script".equalsIgnoreCase(name) || "style".equalsIgnoreCase(name)) {      dontEscape=true;    }  }  writer.write("<");  writer.write(name);  closeStart=true;}  }
class C{  public DigitsKeyListener(boolean sign,boolean decimal){  mSign=sign;  mDecimal=decimal;  int kind=(sign ? SIGN : 0) | (decimal ? DECIMAL : 0);  mAccepted=CHARACTERS[kind];}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height);}  }
class C{  static void fullTests(int maxLen,Class<?> c){  Method cloner=cloners.get(c);  assert (cloner != null) : c;  Method cloneRanger=cloneRangers.get(c);  assert (cloneRanger != null) : c;  for (int src=0; src <= maxLen; src=inc(src,0,maxLen)) {    Object a=makeArray(src,c);    for (    int x : new ArrayList<Integer>()) {    }    for (int j=0; j <= maxLen; j=inc(j,src,maxLen)) {      Object b=invoke(cloner,a,j);      checkArray(b,c,j,0,src);      testCasesRun++;      consing+=j;      int maxI=Math.min(src,j);      for (int i=0; i <= maxI; i=inc(i,src,maxI)) {        Object r=invoke(cloneRanger,a,i,j);        checkArray(r,c,j - i,i,src - i);        testCasesRun++;        consing+=j - i;      }    }  }}  }
class C{  public PublishAssetPackVisualPanel1(){  initComponents();}  }
class C{  public static GenericObjectEditorDialog createDialog(Container parent,PropertyEditor editor){  return createDialog(parent,editor,null);}  }
class C{  public VirtualDataCenterList listVdc(){  WebResource rRoot=createRequest(INTERNAL_VDC_ROOT);  VirtualDataCenterList resp=null;  try {    resp=addSignature(rRoot).get(VirtualDataCenterList.class);  } catch (  UniformInterfaceException e) {    _log.warn("could not list vdc. Err:{}",e);  }  return resp;}  }
class C{  public Boolean isWidescreen(){  if (this.videoWidth == 0 || this.videoHeight == 0) {    return false;  }  return ((float)this.videoWidth) / ((float)this.videoHeight) > 1.37f ? true : false;}  }
class C{  public double calculateLOSSlope(LatLonPoint startLLP,int startTotalHeight,LatLonPoint endLLP,int endObjHeight){  if (dtedCache == null) {    return 0;  }  double arc_dist=startLLP.distance(endLLP);  int endTotalHeight=endObjHeight + dtedCache.getElevation(endLLP.getLatitude(),endLLP.getLongitude());  return calculateLOSSlope(startTotalHeight,endTotalHeight,arc_dist);}  }
class C{  static void testPath(String s,String expectedUri){  Path path=Paths.get(s);  log.println(path);  URI uri=path.toUri();  log.println("  --> " + uri);  if (!uri.toString().equals(expectedUri)) {    log.println("FAILED: Expected " + expectedUri + ", got "+ uri);    failures++;    return;  }  Path result=Paths.get(uri);  log.println("  --> " + result);  if (!result.equals(path.toAbsolutePath())) {    log.println("FAIL: Expected " + path + ", got "+ result);    failures++;  }  log.println();}  }
class C{  public byte[] receive(){  return null;}  }
class C{  private static void handleMethodInsnNode(GetStaticGraph staticUsageTree,ClassNode cn,MethodNode mn,MethodInsnNode methodCall,int depth){  if (methodCall.getOpcode() != Opcodes.INVOKESTATIC) {    return;  }  String calleeClassName=methodCall.owner.replaceAll("/",".");  if (BytecodeInstrumentation.checkIfCanInstrument(calleeClassName)) {    logger.debug("Handling method: " + methodCall.name);    handleClassInitializer(staticUsageTree,cn,mn,methodCall.owner,depth);    if (!staticUsageTree.hasStaticMethodCall(cn.name,mn.name + mn.desc,methodCall.owner,methodCall.name + methodCall.desc)) {      staticUsageTree.addStaticMethodCall(cn.name,mn.name + mn.desc,methodCall.owner,methodCall.name + methodCall.desc);      handle(staticUsageTree,methodCall.owner,methodCall.name + methodCall.desc,depth);    }  }}  }
class C{  public static void main(String[] args){  Profiler.INSTANCE.section("Pre-Initialization").section("Simulation").start("GUI");  create();  Profiler.INSTANCE.section("Pre-Initialization").section("Simulation").stop("GUI");}  }
class C{  public boolean isQuiescedSnapshotsSupported(){  return quiescedSnapshotsSupported;}  }
class C{  private void runAnalysis(Path nodeDb,Path inverted,Path output,int iteration,int numIterations,float rankOne) throws IOException {  JobConf analyzer=new NutchJob(getConf());  analyzer.set("link.analyze.iteration",String.valueOf(iteration + 1));  analyzer.setJobName("LinkAnalysis Analyzer, iteration " + (iteration + 1) + " of "+ numIterations);  FileInputFormat.addInputPath(analyzer,nodeDb);  FileInputFormat.addInputPath(analyzer,inverted);  FileOutputFormat.setOutputPath(analyzer,output);  analyzer.set("link.analyze.rank.one",String.valueOf(rankOne));  analyzer.setMapOutputKeyClass(Text.class);  analyzer.setMapOutputValueClass(ObjectWritable.class);  analyzer.setInputFormat(SequenceFileInputFormat.class);  analyzer.setMapperClass(Analyzer.class);  analyzer.setReducerClass(Analyzer.class);  analyzer.setOutputKeyClass(Text.class);  analyzer.setOutputValueClass(Node.class);  analyzer.setOutputFormat(MapFileOutputFormat.class);  analyzer.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  LOG.info("Starting analysis job");  try {    JobClient.runJob(analyzer);  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  LOG.info("Finished analysis job.");}  }
class C{  ColumnType(String columnType){  type=columnType;}  }
class C{  public AnimationBuilder rollIn(){  for (  View view : views) {    alpha(0,1);    translationX(-(view.getWidth() - view.getPaddingLeft() - view.getPaddingRight()),0);    rotation(-120,0);  }  return this;}  }
class C{  private EmrCluster createEmrClusterInBootstrappingState(String namespace,String emrClusterDefinitionName){  return createEmrCluster(namespace,emrClusterDefinitionName,null);}  }
class C{  public synchronized void begin(Vector2 mousePosition){  this.active=true;  this.beginPosition=mousePosition;}  }
class C{  public static String byteArrayToHexString(final byte[] b){  final StringBuffer sb=new StringBuffer(b.length * 2);  for (  final byte element : b) {    final int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase();}  }
class C{  public static boolean isBase64(final byte[] arrayOctet){  for (int i=0; i < arrayOctet.length; i++) {    if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {      return false;    }  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput conn=getCapDevInput(stack);  return new Integer(conn == null ? 0 : conn.getBrightness());}  }
class C{  public static void verifyResourceOwnership(String myClientId,EppResource resource) throws EppException {  if (!myClientId.equals(resource.getCurrentSponsorClientId())) {    throw new ResourceNotOwnedException();  }}  }
class C{  public PolygonRegion(TextureRegion region,float[] vertices,short[] triangles){  super(region,vertices,triangles);  this.region=region;  this.vertices=vertices;  this.triangles=triangles;  float[] textureCoords=this.textureCoords=new float[vertices.length];  float u=region.getU(), v=region.getV();  float uvWidth=region.getU2() - u;  float uvHeight=region.getV2() - v;  int width=region.getRegionWidth();  int height=region.getRegionHeight();  for (int i=0, n=vertices.length; i < n; i++) {    textureCoords[i]=u + uvWidth * (vertices[i] / width);    i++;    textureCoords[i]=v + uvHeight * (1 - (vertices[i] / height));  }}  }
class C{  public static void releaseScreenLock(Context context){  KeyguardManager keyguardManager=(KeyguardManager)context.getApplicationContext().getSystemService(Context.KEYGUARD_SERVICE);  KeyguardManager.KeyguardLock keyguardLock=keyguardManager.newKeyguardLock("TAG");  keyguardLock.disableKeyguard();}  }
class C{  @DSComment("OS low level") @DSSpec(DSCat.OS_LOW_LEVEL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.536 -0500",hash_original_method="B32C82E8AC66960E05928520E920B8ED",hash_generated_method="D761477CEF9289FDAFFEFEAA5A4174EF") public StatFs(String path){  native_setup(path);}  }
class C{  protected RetainedStateTestEnvironment testInheritance(boolean cache,TestField first,TestField... rest){  final List<TestField> fields=Lists.asList(first,rest);  TestSource lastClass=null;  List<TestSource> sources=new ArrayList<>();  for (  TestField field : fields) {    final TestSource clazz=new TestSource(TEST_PACKAGE,generateClassName(),Modifier.PUBLIC).appendFields(field.createFieldSpec());    if (lastClass != null)     lastClass.superClass(clazz);    lastClass=clazz;    sources.add(clazz);  }  if (!cache) {    sources.get(0).appendTransformation(null);  }  final RetainedStateTestEnvironment environment=new RetainedStateTestEnvironment(this,sources);  environment.tester().invokeSaveAndRestore();  environment.tester().testSaveRestoreInvocation(ALWAYS,BundleRetainerTester.CLASS_EQ,fields.stream().filter(null).map(null).collect(Collectors.toList()),null);  return environment;}  }
class C{  private void destroy(){  if (log.isLoggable(Level.FINEST)) {    log.finest(this + " destroying connection");  }  try {    _socket.forceShutdown();  } catch (  Throwable e) {  }  try {    closeConnection();  } catch (  Throwable e) {    log.log(Level.FINER,e.toString(),e);  }  _port.removeConnection(this);}  }
class C{  public SwappingCategoryDatasetWithTTG(ChangingCategoryDatasetWithTTG dataset){  ArgumentChecking.notNull(dataset,"dataset");  this.dataset=dataset;}  }
class C{  protected EmptyStatementImpl(){  super();}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public void fillOval(int x,int y,int width,int height){  Rectangle2D.Float rect=new Rectangle2D.Float(x,y,width,height);  addDrawingRect(rect);  mPrintMetrics.fill(this);}  }
class C{  static void clearImage(BufferedImage img){  Graphics2D g2=img.createGraphics();  g2.setComposite(AlphaComposite.Clear);  g2.fillRect(0,0,img.getWidth(),img.getHeight());  g2.dispose();}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public UUID clientId(){  return clientId;}  }
class C{  private static boolean isYouGiveMe(final Expression subject1,final Expression verb,final Expression subject2){  if ((verb != null) && (subject1 != null) && (subject2 != null)) {    if (subject1.getNormalized().equals("you") && verb.getNormalized().equals("give") && subject2.getNormalized().equals("i")) {      return true;    }  }  return false;}  }
class C{  public void paintComponent(Graphics g){  int x=PADDING;  int y=PADDING;  g.drawImage(picture,x,y,scaleW,scaleH,null);  x+=scaleW + PADDING;  g.drawImage(picture,x,y,x + scaleW,y + scaleH,0,0,picture.getWidth(),picture.getHeight(),null);  x+=scaleW + PADDING;  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(x,y);  g2d.scale(SCALE_FACTOR,SCALE_FACTOR);  g2d.drawImage(picture,0,0,null);  g2d.dispose();  x+=scaleW + PADDING;  g2d=(Graphics2D)g.create();  AffineTransform at=new AffineTransform();  at.translate(x,y);  at.scale(SCALE_FACTOR,SCALE_FACTOR);  g2d.drawImage(picture,at,null);  g2d.dispose();  x+=scaleW + PADDING;  Image scaledImg=picture.getScaledInstance(scaleW,scaleH,Image.SCALE_DEFAULT);  g.drawImage(scaledImg,x,y,null);}  }
class C{  static public char normalize(char ch){  Character.UnicodeBlock block=Character.UnicodeBlock.of(ch);  if (block == UnicodeBlock.BASIC_LATIN) {    if (ch < 'A' || (ch < 'a' && ch > 'Z') || ch > 'z')     ch=' ';  } else   if (block == UnicodeBlock.LATIN_1_SUPPLEMENT) {    if (LATIN1_EXCLUDED.indexOf(ch) >= 0)     ch=' ';  } else   if (block == UnicodeBlock.LATIN_EXTENDED_B) {    if (ch == '\u0219')     ch='\u015f';    if (ch == '\u021b')     ch='\u0163';  } else   if (block == UnicodeBlock.GENERAL_PUNCTUATION) {    ch=' ';  } else   if (block == UnicodeBlock.ARABIC) {    if (ch == '\u06cc')     ch='\u064a';  } else   if (block == UnicodeBlock.LATIN_EXTENDED_ADDITIONAL) {    if (ch >= '\u1ea0')     ch='\u1ec3';  } else   if (block == UnicodeBlock.HIRAGANA) {    ch='\u3042';  } else   if (block == UnicodeBlock.KATAKANA) {    ch='\u30a2';  } else   if (block == UnicodeBlock.BOPOMOFO || block == UnicodeBlock.BOPOMOFO_EXTENDED) {    ch='\u3105';  } else   if (block == UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS) {    if (cjk_map.containsKey(ch))     ch=cjk_map.get(ch);  } else   if (block == UnicodeBlock.HANGUL_SYLLABLES) {    ch='\uac00';  }  return ch;}  }
class C{  public static void configureMessage(final ActiveMQMessage m) throws JMSException {  m.setJMSMessageID("ID:messageID777");  m.setJMSTimestamp(123456789L);  m.setJMSCorrelationID("correlationID777");  m.setJMSReplyTo(ActiveMQJMSClient.createQueue("ReplyToQueue"));  m.setJMSDestination(ActiveMQJMSClient.createQueue("DestinationQueue"));  m.setJMSDeliveryMode(DeliveryMode.PERSISTENT);  m.setJMSExpiration(987654321L);  m.setJMSPriority(9);  m.setBooleanProperty("booleanProperty",true);  m.setByteProperty("byteProperty",(byte)2);  m.setShortProperty("shortProperty",(short)3);  m.setIntProperty("intProperty",4);  m.setLongProperty("longProperty",5L);  m.setFloatProperty("floatProperty",6);  m.setDoubleProperty("doubleProperty",7);  m.setStringProperty("stringPoperty","someString");  m.setStringProperty("JMSXNaughtyProperty","aardvark");}  }
class C{  public void collectSubstitutes(Scope scope,TypeBinding actualType,InferenceContext inferenceContext,int constraint){  if (this.declaringElement != inferenceContext.genericMethod)   return;switch (actualType.kind()) {case Binding.BASE_TYPE:    if (actualType == TypeBinding.NULL)     return;  TypeBinding boxedType=scope.environment().computeBoxingType(actualType);if (boxedType == actualType) return;actualType=boxedType;break;case Binding.WILDCARD_TYPE:return;}int variableConstraint;switch (constraint) {case TypeConstants.CONSTRAINT_EQUAL:variableConstraint=TypeConstants.CONSTRAINT_EQUAL;break;case TypeConstants.CONSTRAINT_EXTENDS:variableConstraint=TypeConstants.CONSTRAINT_SUPER;break;default :variableConstraint=TypeConstants.CONSTRAINT_EXTENDS;break;}inferenceContext.recordSubstitute(this,actualType,variableConstraint);}  }
class C{  public BedReader(BufferedReader in) throws IOException {  this(in,0);}  }
class C{  public void stopMovementSound(){  movementSoundEvent=null;}  }
class C{  public void testNextIntBoundNonPositive(){  ThreadLocalRandom rnd=ThreadLocalRandom.current();  for (  int bound : new int[]{0,-17,Integer.MIN_VALUE}) {    try {      rnd.nextInt(bound);      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.784 -0500",hash_original_method="56D579416E6E52BEF406E20E9865D4C4",hash_generated_method="E206BEF00DC7D59B3ECBC64D0C607341") public boolean isSipURI(){  return true;}  }
class C{  public static void print(String value){  print(value,OUT);}  }
class C{  public synchronized List<K> keys(boolean cold,boolean nonResident){  ArrayList<K> keys=new ArrayList<K>();  for (  Segment<K,V> s : segments) {    keys.addAll(s.keys(cold,nonResident));  }  return keys;}  }
class C{  public SQLFeatureNotSupportedException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  zzLexicalState=YYINITIAL;}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  return !Space.isInSpace(MC.MARK_COMPACT,object);}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private void tryToGrantUriPermissionToStackServices(Uri file){  if (!ContentResolver.SCHEME_CONTENT.equals(file.getScheme())) {    return;  }  Intent fileTransferServiceIntent=new Intent(IFileUploadService.class.getName());  List<ResolveInfo> stackServices=mCtx.getPackageManager().queryIntentServices(fileTransferServiceIntent,0);  for (  ResolveInfo stackService : stackServices) {    mCtx.grantUriPermission(stackService.serviceInfo.packageName,file,Intent.FLAG_GRANT_READ_URI_PERMISSION);  }}  }
class C{  public AWTGVTFont(Font font,float scale){  this.size=font.getSize2D() * scale;  this.awtFont=font.deriveFont(FONT_SIZE);  this.scale=size / awtFont.getSize2D();  initializeFontCache(awtFont);}  }
class C{  @Override public void activate(){  scriptHelper=getSlingScriptHelper();  blogService=scriptHelper.getService(BlogService.class);}  }
class C{  public boolean retryRequest(final IOException exception,int executionCount,final HttpContext context){  if (exception == null) {    throw new IllegalArgumentException("Exception parameter may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  if (executionCount > this.retryCount) {    return false;  }  if (exception instanceof NoHttpResponseException) {    return true;  }  if (exception instanceof InterruptedIOException) {    return false;  }  if (exception instanceof UnknownHostException) {    return false;  }  if (exception instanceof SSLHandshakeException) {    return false;  }  Boolean b=(Boolean)context.getAttribute(ExecutionContext.HTTP_REQ_SENT);  boolean sent=(b != null && b.booleanValue());  if (!sent || this.requestSentRetryEnabled) {    return true;  }  return false;}  }
class C{  private static int findClosingParenToLeft(IDocument document,int position,String partitioning){  final char CLOSING_PAREN=')';  try {    if (position < 1)     return position;    int nonWS=firstNonWhitespaceBackward(document,position - 1,partitioning,-1);    if (nonWS != -1 && document.getChar(nonWS) == CLOSING_PAREN)     return nonWS;  } catch (  BadLocationException e1) {  }  return position;}  }
class C{  public void remove(String key){  values.remove(key);}  }
class C{  @OnMessage public void onMessage(String message,Session session){  callInternal("onMessage",session,message);}  }
class C{  protected void buildDrawerSelectionList(){  int selectedPosition=-1;  int position=0;  ArrayList<IDrawerItem> profileDrawerItems=new ArrayList<>();  if (mProfiles != null) {    for (    IProfile profile : mProfiles) {      if (profile == mCurrentProfile) {        if (mCurrentHiddenInList) {          continue;        } else {          selectedPosition=mDrawer.mDrawerBuilder.getItemAdapter().getGlobalPosition(position);        }      }      if (profile instanceof IDrawerItem) {        ((IDrawerItem)profile).withSetSelected(false);        profileDrawerItems.add((IDrawerItem)profile);      }      position=position + 1;    }  }  mDrawer.switchDrawerContent(onDrawerItemClickListener,onDrawerItemLongClickListener,profileDrawerItems,selectedPosition);}  }
class C{  public void unBindService(){  if (isServiceConnected()) {    FileDownloadServiceProxy.getImpl().unbindByContext(FileDownloadHelper.getAppContext());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private SAXParser createParser(final SAXParserFactory factory) throws ParserConfigurationException, SAXException {  final SAXParser parser=factory.newSAXParser();  final XMLReader reader=parser.getXMLReader();  try {    reader.setFeature("http://xml.org/sax/features/validation",false);    reader.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);  } catch (  SAXNotRecognizedException exception) {  }catch (  SAXNotSupportedException exception) {  }  return parser;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static byte[] formAdbRequest(String req){  String resultStr=String.format("%04X%s",req.length(),req);  byte[] result;  try {    result=resultStr.getBytes(DEFAULT_ENCODING);  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();    return null;  }  assert result.length == req.length() + 4;  return result;}  }
class C{  public static WritableDBIDDataStore makeDBIDStorage(DBIDs ids,int hints){  return DataStoreFactory.FACTORY.makeDBIDStorage(ids,hints);}  }
class C{  public static java.sql.Time toSqlTime(int hour,int minute,int second){  java.util.Date newDate=toDate(0,0,0,hour,minute,second);  if (newDate != null) {    return new java.sql.Time(newDate.getTime());  } else {    return null;  }}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public void writeTo(ChannelBuffer data){  super.writeTo(data);  data.writeInt(role);}  }
class C{  public float x(){  return this.points[0];}  }
class C{  protected CCMoveBy(float t,CGPoint pos){  super(t,pos);  delta.set(pos.x,pos.y);}  }
class C{  @Override public FileChannel openFileChannel(OpenOption... options) throws IOException {  return FileChannel.open(getJdkPath(),options);}  }
class C{  public String toUpperCase(){  return value.toUpperCase();}  }
class C{  @Override public void restoreGroupSnapshots(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    storage=findProviderFactory.withGroup(storage,consistencyGroupName).find();    if (storage == null) {      ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupWithGivenName();      taskCompleter.error(_dbClient,error);      return;    }    String snapshotGroupName=snapshotObj.getReplicationGroupInstance();    CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,consistencyGroupName,snapshotGroupName);    if (_helper.checkExists(storage,groupSynchronized,false,false) != null) {      CIMObjectPath cimJob=null;      if (storage.checkIfVmax3()) {        if (snapshotObj.getSettingsInstance() == null) {          throw DeviceControllerException.exceptions.snapSettingsInstanceNull(snapshotObj.getSnapsetLabel(),snapshotObj.getId().toString());        }        terminateAnyRestoreSessions(storage,snapshotObj,snapshot,taskCompleter);        CIMObjectPath settingsPath=_cimPath.getGroupSynchronizedSettingsPath(storage,consistencyGroupName,snapshotObj.getSettingsInstance());        cimJob=_helper.callModifySettingsDefineState(storage,_helper.getRestoreFromSettingsStateInputArguments(settingsPath,false));      } else {        CIMArgument[] restoreCGSnapInput=_helper.getRestoreFromReplicaInputArguments(groupSynchronized);        cimJob=_helper.callModifyReplica(storage,restoreCGSnapInput);      }      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockRestoreSnapshotJob(cimJob,storage.getId(),taskCompleter)));    } else {      ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(consistencyGroupName);      taskCompleter.error(_dbClient,error);    }  } catch (  Exception e) {    String message=String.format("Generic exception when trying to restoring snapshots from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreGroupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  numEvents=Integer.parseInt(tokenizer.nextToken());  int i=0;  while (tokenizer.hasMoreTokens()) {    eventDefs.put(new Integer(i++),new TEventDef(tokenizer.nextToken()));  }}  }
class C{  public ImageEvent(Object source,BufferedImage image){  this(source,image,"");}  }
class C{  private void createGapLessBuffer(){  final int gap=this.imageWidth - getWidth();  final int pixelSizeInData=getPixelSizeInData();  Buffer imagebuffer=getImageBuffer();  imagebuffer.position(0);  imagebuffer.limit(0);  PrimitiveType<Buffer> type=primitiveType();  this.gapLessBuffer=type.newBuffer(getPixelSize());  while (imagebuffer.limit() < pixelSizeInData) {    imagebuffer.limit(imagebuffer.position() + getWidth());    type.appendBuffer(this.gapLessBuffer,imagebuffer);    imagebuffer.limit(Math.min(pixelSizeInData,imagebuffer.position() + gap));    imagebuffer.position(imagebuffer.limit());  }  this.gapLessBuffer.rewind();}  }
class C{  @Override protected void notifyClientOfRedirect(L locator,Throwable cause){  master.ndx.staleLocator(master.ndx.getTimestamp(),(L)locator,(StaleLocatorException)cause);}  }
class C{  @Override public Vertex parseTemplate(Vertex formula,TextStream stream,boolean debug,Network network){  Map<String,Map<String,Vertex>> elements=buildElementsMap(network);  return parseTemplate(formula,stream,elements,debug,network);}  }
class C{  public HCardPage(){  Configuration cfg=new Configuration(Configuration.VERSION_2_3_23);  cfg.setClassForTemplateLoading(HCardPage.class,"");  cfg.setWhitespaceStripping(true);  try {    template=cfg.getTemplate("hcard-template.html");  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public int count(){  rw.readLock().lock();  try {    return nodes.size();  }  finally {    rw.readLock().unlock();  }}  }
class C{  @Override public boolean isStarted(){  return started;}  }
class C{  public double[] primal(){  double[] x=new double[n];  for (int i=Math.min(n - 1,m - 1); i >= 0; i--) {    double sum=0.0;    for (int j=i + 1; j < n; j++) {      sum+=a[i][j] * x[j];    }    if (Math.abs(a[i][i]) > EPSILON)     x[i]=(a[i][n] - sum) / a[i][i]; else     if (Math.abs(a[i][n] - sum) > EPSILON)     return null;  }  for (int i=n; i < m; i++) {    double sum=0.0;    for (int j=0; j < n; j++) {      sum+=a[i][j] * x[j];    }    if (Math.abs(a[i][n] - sum) > EPSILON)     return null;  }  return x;}  }
class C{  public static byte[] usbOpsModeLoco(NceTrafficController tc,int locoAddr,int cvAddr,int cvData){  byte[] retVal=new byte[6];  int locoAddr_h=locoAddr / 256;  int locoAddr_l=locoAddr & 0xFF;  int cvAddr_h=cvAddr / 256;  int cvAddr_l=cvAddr & 0xFF;  retVal[0]=(byte)(OPS_PROG_LOCO_CMD);  retVal[1]=(byte)(locoAddr_h);  retVal[2]=(byte)(locoAddr_l);  retVal[3]=(byte)(cvAddr_h);  retVal[4]=(byte)(cvAddr_l);  retVal[5]=(byte)(cvData);  return retVal;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String strSerial(int serialno,int length){  return strPad(Integer.toString(serialno),length,"0",STR_PAD_RIGHT);}  }
class C{  public void merge(BaggageImpl other){  if (other != null) {    Handlers.preMerge(this,other);    for (    ByteString namespace : other.contents.keySet()) {      SetMultimap<ByteString,ByteString> namespaceData=contents.get(namespace);      if (namespaceData == null) {        contents.put(namespace,other.contents.get(namespace));      } else {        namespaceData.putAll(other.contents.get(namespace));      }    }    Handlers.postMerge(this);  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static boolean saveAttributes(final String filepath,Bundle bundle){  ExifInterface exif;  try {    exif=new ExifInterface(filepath);  } catch (  IOException e) {    e.printStackTrace();    return false;  }  for (  String tag : EXIF_TAGS) {    if (bundle.containsKey(tag)) {      exif.setAttribute(tag,bundle.getString(tag));    }  }  try {    exif.saveAttributes();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public CouldntConnectException(final Exception exception){  super(exception);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mEntries.remove(key);  }}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_TWO_OR_THREE,null));}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public StaticImportResolver(){}  }
class C{  protected void postUndo(){  --cursor;  restoreSelection();}  }
class C{  public UserExample(){  oredCriteria=new ArrayList();}  }
class C{  public Class<?> loadClass(String className) throws ClassNotFoundException {  try {    return Class.forName(className,true,getClassloader());  } catch (  Exception e) {    LOG.warning("Could not load class with current threads context classloader. Using default. Reason: " + e.getClass().getSimpleName() + ": "+ e.getMessage());    return Class.forName(className);  }}  }
class C{  protected void paintComponent(Graphics g){  if (ui != null) {    super.paintComponent(g);  } else   if (isOpaque()) {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());  }}  }
class C{  @Override protected void sendFunctionGroup3(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup3OpsMsg(this.getDccAddress(),f9,f10,f11,f12);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  private void load(final InputStream inputStream){  try {    final OCSPResp ocspResp=new OCSPResp(inputStream);    final BasicOCSPResp basicOCSPResp=(BasicOCSPResp)ocspResp.getResponseObject();    ocspResponses.add(basicOCSPResp);  } catch (  Exception e) {    throw new DSSException(e);  }}  }
class C{  public boolean inStack(){  return (nextInStack != null);}  }
class C{  @Override public void onPurchaseUpdatesResponse(final PurchaseUpdatesResponse purchaseUpdatesResponse){  Log.v(TAG,"onPurchaseUpdatesRecived recieved: Response -" + purchaseUpdatesResponse);  Log.v(TAG,"PurchaseUpdatesRequestStatus:" + purchaseUpdatesResponse.getPurchaseUpdatesRequestStatus());  Log.v(TAG,"RequestID:" + purchaseUpdatesResponse.getRequestId());  new PurchaseUpdatesAsyncTask().execute(purchaseUpdatesResponse);}  }
class C{  public JavaCompletionProposal(String replacementString,int replacementOffset,int replacementLength,Image image,String displayString,int relevance){  this(replacementString,replacementOffset,replacementLength,image,new StyledString(displayString),relevance,false);}  }
class C{  public void reload(){  if (mOriginalGeometry != null) {    if (!mOriginalGeometry.isValid()) {      mOriginalGeometry.reload();    }    copyFromGeometry3D(mOriginalGeometry);  }  createBuffers();}  }
class C{  public Warning(String message,Integer code){  this.code=code;  this.message=message;}  }
class C{  private static String trimPackageName(String packageName){  int index=packageName.lastIndexOf('.');  if (index > 0) {    return packageName.substring(0,index);  } else {    return "<unknown>";  }}  }
class C{  public CUfunction(){}  }
class C{  public final String levelDataToString(){  return "LevelParams: " + getLevelParams() + "\n"+ "LevelConstraints: "+ getLevelConstraints()+ "\n"+ "ArgLevelConstraints: "+ getArgLevelConstraints()+ "\n"+ "ArgLevelParams: "+ getArgLevelParams()+ "\n";}  }
class C{  private void verifySnapResults() throws Exception {  log.info("Verifying updated snapshot sresults for XtremioBlockSnapshotReplicationGroupInstanceMigration.");  BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapURI);  Assert.assertNotNull("replicationGroupInstance shouldn't be null",snap.getReplicationGroupInstance());  Assert.assertEquals("replicationGroupInstance should be set from the snapsetLabel",groupInstance,snap.getReplicationGroupInstance());}  }
class C{  public void resize(int sizeinbits){  this.data=Arrays.copyOf(this.data,(sizeinbits + 63) / 64);}  }
class C{  public final void addToTiersByVarNames(List<String> varNames){  if (!variables.containsAll(varNames)) {    for (    String varName : varNames) {      addVariable(varName);    }  }  for (  Object varName : varNames) {    String node=(String)varName;    int index=node.lastIndexOf(":t");    if (index != -1) {      String substring=node.substring(index + 2);      addToTier(new Integer(substring),node);    }  }}  }
class C{  void readIFO() throws IOException {  while (true) {    infoRecord.read(isr);    String info=infoRecord.getStringField(0).trim();    if (info.startsWith("EOI"))     break;    int n=infoRecord.getIntField(5);    E00Record r=getRecord();    if (!info.startsWith(prefix))     readANY(r,n); else {      String suffix=info.substring(prefix.length() + 1);      if (suffix.equals("PAT"))       readPAT(r,n); else       if (suffix.equals("AAT"))       readAAT(r,n); else       if (suffix.equals("BND"))       readANY(r,n); else       if (suffix.equals("TIC"))       readANY(r,n); else       readANY(r,n);    }    Debug.message("e00","E00: " + info + "  "+ n);  }}  }
class C{  public static String constructJobsTableName(String queueName,String shardName,int priority){  return String.format("%s.jobs_p%1d",constructDBName(queueName,shardName),priority);}  }
class C{  boolean isSignedJar(){  return certificates.size() > 0;}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final char[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public final AC noGrid(){  return noGrid(curIx);}  }
class C{  public boolean parseGeoJSON(File file){  mLocalFile=file;  try {    FileInputStream input=new FileInputStream(mLocalFile);    JsonParser parser=new JsonParser();    JsonElement json=parser.parse(new InputStreamReader(input));    input.close();    return parseGeoJSON(json.getAsJsonObject());  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  @DELETE @Path("/{id}") public Response deletePolicy(@Context final HttpServletRequest httpServletRequest,@PathParam("id") String id){  try {    PolicyManager policyManager=PolicyManagerImpl.getInstance();    policyManager.deletePolicy(id);    return RestApiResponseHandler.getResponse(Status.NO_CONTENT);  } catch (  PolicyNotFoundException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_policy_not_found_error,e,httpServletRequest.getLocale());  }catch (  DataStoreException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_database_error,e,httpServletRequest.getLocale());  }}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  public boolean stem(){  return stem(0);}  }
class C{  public void test_4() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,false,false,true);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(1,searchEngine.count(query("1")));  assertEquals(1,searchEngine.count(query("2")));  assertEquals(1,searchEngine.count(query("3.0")));  assertEquals(1,searchEngine.count(query("4.0")));  assertEquals(1,searchEngine.count(query("true")));  assertEquals(1,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(1,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){  updateTokenTimestamps();  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);  if (!valid)   DHT.logDebug("Received Invalid token from " + ip.getHostAddress());  return valid;}  }
class C{  public final void increaseScheduledWriteMessages(){  throughputCalculationLock.lock();  try {    scheduledWriteMessages++;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public static X509CRLEntryImpl toImpl(X509CRLEntry entry) throws CRLException {  if (entry instanceof X509CRLEntryImpl) {    return (X509CRLEntryImpl)entry;  } else {    return new X509CRLEntryImpl(entry.getEncoded());  }}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  @Override public void close(){}  }
class C{  private void ensureMutableMessageList(){  if (!isMessagesListMutable) {    messages=new ArrayList<MType>(messages);    isMessagesListMutable=true;  }}  }
class C{  public void drawUndirectedEdge(String label1,String label2){}  }
class C{  public SparseByteArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new byte[initialCapacity];  mSize=0;}  }
class C{  protected VariableReferenceImpl(){  super();}  }
class C{  public SnapshotsStatusRequest repository(String repository){  this.repository=repository;  return this;}  }
class C{  public final void testIsSatisfiedFails(){  ContainsSymbolConstraint containsSymbolConstraint=new ContainsSymbolConstraint();  assertFalse(containsSymbolConstraint.isSatisfied("abcabc"));}  }
class C{  protected int calculateBreakPosition(int p0,Token tokenList,float x0){  int p=p0;  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();  float currentWidth=getWidth();  if (currentWidth == Integer.MAX_VALUE)   currentWidth=getPreferredSpan(X_AXIS);  currentWidth=Math.max(currentWidth,MIN_WIDTH);  Token t=tokenList;  while (t != null && t.isPaintable()) {    float tokenWidth=t.getWidth(textArea,this,x0);    if (tokenWidth > currentWidth) {      if (p == p0) {        return t.getOffsetBeforeX(textArea,this,0,currentWidth);      }      return t.isWhitespace() ? p + t.textCount : p;    }    currentWidth-=tokenWidth;    x0+=tokenWidth;    p+=t.textCount;    t=t.getNextToken();  }  return p + 1;}  }
class C{  public void resetTransform(){  setTransform(getDefaultTransform());}  }
class C{  protected GfshParseResult(final Method method,final Object instance,final Object[] arguments,final String userInput,final String commandName,final Map<String,String> parametersAsString){  super(method,instance,arguments);  this.userInput=userInput;  this.commandName=commandName;  this.paramValueStringMap=new HashMap<String,String>(parametersAsString);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getRegions()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.683 -0500",hash_original_method="D79A18951B63A09462A96884D78AF17C",hash_generated_method="5B833CF768F6F2BDC6475CB76511D792") public void removeUser(){  this.authority.removeUserInfo();}  }
class C{  public static boolean isLoaded(Object entity,String property){  PersistentAttributesLoadChecker checker=AppBeans.get(PersistentAttributesLoadChecker.NAME);  return checker.isLoaded(entity,property);}  }
