class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.DecisionStump";}  }
class C{  public boolean requiresFreshAST(){  return fRequiresFreshAST;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return (DefaultKeyedValue)super.clone();}  }
class C{  protected int createHashCode(){  int hashCode=super.createHashCode();  if (parent != null) {    hashCode^=parent.hashCode();  }  return hashCode;}  }
class C{  public ECDSASigner(DSAKCalculator kCalculator){  this.kCalculator=kCalculator;}  }
class C{  @Override public int compareTo(final AgendaItem o){  return compare(o.getCost(),getCost());}  }
class C{  public int sol(int i){  validate(i);  return xy[i];}  }
class C{  public int intValue(){  return (int)value;}  }
class C{  public void updateTempLocs(){synchronized (this) {    Log.d(GTG.TAG,"updateTempLocs: futureMltArray: " + futureMltArray.size() + " tempLocMltArray: "+ tempLocMltArray.size());    if (GTG.apCache.getTopRow() == null)     return;    int latestApTime=GTG.cacheCreator.maxTimeSec;    for (int i=futureMltArray.size() - 1; i >= 0; i--) {      MediaLocTime mlt=futureMltArray.get(i);      if (mlt.getTimeSecs() > latestApTime + prefs.maxFutureTimeForPlacingTempMlt)       break;      tempLocMltArray.add(mlt);      futureMltArray.remove(i);    }    if (!tempLocMltArray.isEmpty()) {      try {        GTG.timmyDb.beginTransaction();        TimmyDatastoreAccessor<MediaLocTime> dataAccessor=new TimmyDatastoreAccessor<MediaLocTime>(GTG.mediaLocTimeTimmyTable);        for (int i=tempLocMltArray.size() - 1; i >= 0; i--) {          MediaLocTime mlt=tempLocMltArray.get(i);          GTG.mediaLocTimeMap.remove(mlt);          updateMediaLocTimeLoc(mlt);          GTG.mediaLocTimeMap.insert(mlt);          if (!mlt.isTempLoc())           tempLocMltArray.remove(i);          dataAccessor.updateRow(mlt);        }        GTG.timmyDb.setTransactionSuccessful();      } catch (      IOException e) {        throw new IllegalStateException(e);      } finally {        try {          GTG.timmyDb.endTransaction();        } catch (        IOException e) {          throw new IllegalStateException(e);        }      }      lastApStBox=null;      Log.d(GTG.TAG,"updateTempLocs end: futureMltArray: " + futureMltArray.size() + " tempLocMltArray: "+ tempLocMltArray.size());    }  }}  }
class C{  public DailyTimeIntervalScheduleBuilder onMondayThroughFriday(){  this.daysOfWeek=MONDAY_THROUGH_FRIDAY;  return this;}  }
class C{  public UWidget widget(){  UWidget uw=new UWidget();  uw.cb(this);  return uw;}  }
class C{  public void sort(int i){  Arrays.sort(vector[i],0,sizes.get(i));}  }
class C{  public PdfStreamDecoder(final PdfObjectReader currentPdfFile,final PdfLayerList layers){  if (layers != null) {    this.layers=layers;  }  init(currentPdfFile);}  }
class C{  public SVGFeDiffuseLightingElementBridge(){}  }
class C{  public int crc(){  return uint16FromData(0);}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public static int hsb(float h,float s,float b){  return Color.HSBtoRGB(h,s,b);}  }
class C{  public synchronized static String screenFormatAccountLineup(SDAccountLineup lineup){  if (screenFormatBuilder == null)   screenFormatBuilder=new StringBuilder(); else   screenFormatBuilder.setLength(0);  screenFormatBuilder.append(lineup.getName());  if (!lineup.getName().equals(lineup.getLocation()))   screenFormatBuilder.append(" - ").append(lineup.getLocation());  return screenFormatBuilder.toString();}  }
class C{  public void testGetTables() throws Exception {  DatabaseMetaData dmd=con.getMetaData();  ResultSet rs=dmd.getTables(null,null,null,null);  assertNotNull(rs);  rs.close();}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  private void itemSelected(){  updateGameFromSelection();}  }
class C{  public void includeFrameSize(final boolean value){  includeFrameSize_=true;}  }
class C{  @Override public void print(){  Node<E> node;  System.out.print("[");  if (top == null) {    System.out.println("]");    return;  }  for (node=top; node.next != null; node=node.next) {    System.out.print(node.item + ",");  }  System.out.println(node.item + "]");}  }
class C{  public static String httpPostString(String httpUrl){  HttpResponse response=httpPost(new HttpRequest(httpUrl));  return response == null ? null : response.getResponseBody();}  }
class C{  public static Map<String,Object> testRefund(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  Debug.logInfo("Test Refund Process",module);  result.put("refundResult",Boolean.TRUE);  result.put("refundAmount",context.get("refundAmount"));  result.put("refundRefNum",UtilDateTime.nowAsString());  result.put("refundFlag","R");  result.put("refundMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestRefund",locale));  return result;}  }
class C{  public byte[] convert(byte[] inBuffer,int size){  byte[] result=null;  if (inBuffer != null) {    DrmConvertedStatus convertedStatus=null;    try {      if (size != inBuffer.length) {        byte[] buf=new byte[size];        System.arraycopy(inBuffer,0,buf,0,size);        convertedStatus=mDrmClient.convertData(mConvertSessionId,buf);      } else {        convertedStatus=mDrmClient.convertData(mConvertSessionId,inBuffer);      }      if (convertedStatus != null && convertedStatus.statusCode == DrmConvertedStatus.STATUS_OK && convertedStatus.convertedData != null) {        result=convertedStatus.convertedData;      }    } catch (    IllegalArgumentException e) {      Log.w(TAG,"Buffer with data to convert is illegal. Convertsession: " + mConvertSessionId,e);    }catch (    IllegalStateException e) {      Log.w(TAG,"Could not convert data. Convertsession: " + mConvertSessionId,e);    }  } else {    throw new IllegalArgumentException("Parameter inBuffer is null");  }  return result;}  }
class C{  public void prevFocusElement(){  int selectedColumn=getActiveColumn();  int selectedRow=getActiveRow();  int prevColumn=selectedColumn - 1;  int prevRow=selectedRow;  if (selectedColumn == -1) {    selectedColumn=0;  }  if (selectedRow == -1) {    if (impl.getModel().getRowCount() > 0) {      moveToEnd(impl.getRowCount() - 1,impl.getColumnCount() - 1);    } else     moveFocusToPrevControl();    return;  }  if (selectedColumn == 0) {    prevColumn=impl.getColumnCount() - 1;    prevRow=selectedRow - 1;  }  JComponent activeComponent=getActiveComponent();  boolean wasMoved=false;  if (activeComponent != null) {    wasMoved=moveFocusPrevIntoComponent(activeComponent);  }  if (!wasMoved) {    if (prevRow < 0)     impl.transferFocusBackward(); else     moveToEnd(prevRow,prevColumn);  }}  }
class C{  JMenu createEditMenu(){  JMenu editMenu=new JMenu("Edit");  editMenu.add(actionManager.getCutAction());  editMenu.add(actionManager.getCopyAction());  editMenu.add(actionManager.getPasteAction());  editMenu.add(actionManager.getDeleteAction());  editMenu.addSeparator();  editMenu.add(actionManager.getClearSourceNeuronsAction());  editMenu.add(actionManager.getSetSourceNeuronsAction());  editMenu.add(actionManager.getConnectionMenu());  editMenu.add(actionManager.getAddSynapseGroupAction());  editMenu.addSeparator();  editMenu.add(actionManager.getRandomizeObjectsAction());  editMenu.add(actionManager.getShowAdjustSynapsesDialog());  editMenu.addSeparator();  editMenu.add(actionManager.getLayoutMenu());  editMenu.add(actionManager.getGroupMenu());  editMenu.addSeparator();  editMenu.add(createAlignMenu());  editMenu.add(createSpacingMenu());  editMenu.addSeparator();  editMenu.add(actionManager.getSetNeuronPropertiesAction());  editMenu.add(actionManager.getSetSynapsePropertiesAction());  editMenu.addSeparator();  editMenu.add(createSelectionMenu());  return editMenu;}  }
class C{  private static long GetStaticLongField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticLongField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getLongValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void unusedGenericTypeVariable(MemberMatrix mm){  for (  TMember member : mm.owned()) {    if (member instanceof TMethod) {      TMethod method=(TMethod)member;      if (!mm.hasInherited() && !mm.hasImplemented()) {        MethodDeclaration methodDeclaration=(MethodDeclaration)method.getAstElement();        internalCheckNoUnusedTypeParameters(methodDeclaration);      }    }  }}  }
class C{  private void initializeCommands(){  mAdapter=new AsyncProviderCommandAdapter<CommandArgs>(getApplicationContext().getContentResolver());  mCommands[ContactsCommandType.INSERT_COMMAND.ordinal()]=new InsertContactsCommand(this);  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()]=new QueryContactsCommand(this);  mCommands[ContactsCommandType.MODIFY_COMMAND.ordinal()]=new ModifyContactsCommand(this);  mCommands[ContactsCommandType.DELETE_COMMAND.ordinal()]=new DeleteContactsCommand(this);}  }
class C{  CacheConfiguration cacheConfiguration(String gridName){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setCacheMode(REPLICATED);  cacheCfg.setWriteSynchronizationMode(FULL_SYNC);  cacheCfg.setRebalanceMode(preloadMode);  cacheCfg.setRebalanceBatchSize(batchSize);  cacheCfg.setRebalanceThreadPoolSize(poolSize);  if (extClassloadingAtCfg)   loadExternalClassesToCfg(cacheCfg);  return cacheCfg;}  }
class C{  public final boolean equals(Node node){  try {    DTMNodeProxy dtmp=(DTMNodeProxy)node;    return (dtmp.node == this.node) && (dtmp.dtm == this.dtm);  } catch (  ClassCastException cce) {    return false;  }}  }
class C{  protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length) throws ClassFormatError {  throw new UnsupportedOperationException("can't load this type of class file");}  }
class C{  private ArrayList<Signature> constructOneSignatures(SetDBIDs[][] partitions,final long[][] markers){  final int dim=partitions.length;  ArrayList<Signature> signatures=new ArrayList<>();  for (int d=0; d < dim; d++) {    final DBIDs[] parts=partitions[d];    if (parts == null) {      continue;    }    final long[] marked=markers[d];    for (int start=BitsUtil.nextSetBit(marked,0); start >= 0; ) {      int end=BitsUtil.nextClearBit(marked,start + 1);      end=(end == -1) ? dim : end;      int[] signature=new int[dim << 1];      Arrays.fill(signature,-1);      signature[d << 1]=start;      signature[(d << 1) + 1]=end - 1;      HashSetModifiableDBIDs sids=unionDBIDs(parts,start,end);      if (LOG.isDebugging()) {        LOG.debug("1-signature: " + d + " "+ start+ "-"+ (end - 1));      }      signatures.add(new Signature(signature,sids));      start=(end < dim) ? BitsUtil.nextSetBit(marked,end + 1) : -1;    }  }  return signatures;}  }
class C{  public static SpawnEgg1_9 fromItemStack(ItemStack item){  if (item == null)   throw new IllegalArgumentException("item cannot be null");  if (item.getType() != Material.MONSTER_EGG)   throw new IllegalArgumentException("item is not a monster egg");  net.minecraft.server.v1_9_R2.ItemStack stack=CraftItemStack.asNMSCopy(item);  NBTTagCompound tagCompound=stack.getTag();  if (tagCompound != null) {    @SuppressWarnings("deprecation") EntityType type=EntityType.fromName(tagCompound.getCompound("EntityTag").getString("id"));    if (type != null) {      return new SpawnEgg1_9(type);    } else {      return null;    }  } else {    return null;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DrawerBuilder withStatusBarColorRes(@ColorRes int statusBarColorRes){  this.mStatusBarColorRes=statusBarColorRes;  return this;}  }
class C{  private void initializeTitleLayout(){  View titleLayout=view.findViewById(R.id.titleLayout);  titleLayout.setBackgroundColor(calendarTitleBackgroundColor);  String dateText=new DateFormatSymbols(locale).getShortMonths()[currentCalendar.get(Calendar.MONTH)].toString();  dateText=dateText.substring(0,1).toUpperCase() + dateText.subSequence(1,dateText.length());  TextView dateTitle=(TextView)view.findViewById(R.id.dateTitle);  dateTitle.setTextColor(calendarTitleTextColor);  dateTitle.setText(dateText + " " + currentCalendar.get(Calendar.YEAR));  dateTitle.setTextColor(calendarTitleTextColor);  if (null != getCustomTypeface()) {    dateTitle.setTypeface(getCustomTypeface(),Typeface.BOLD);  }}  }
class C{  public boolean contains(Rect r){  return this.left < this.right && this.top < this.bottom && left <= r.left && top <= r.top && right >= r.right && bottom >= r.bottom;}  }
class C{  public Cursor findRegion(final BeaconRegion region){  mParamsArg[0]=region.getUuid().toString();  mParamsArg[1]=String.valueOf(region.getMajor());  mParamsArg[2]=String.valueOf(region.getMinor());  return mDatabase.query(Tables.REGIONS,BEACON_PROJECTION,BEACON_PARAMS_SELECTION,mParamsArg,null,null,null);}  }
class C{  public boolean dispatchTouchEvent(MotionEvent ev){  if (ev.getAction() == MotionEvent.ACTION_DOWN) {    onUserInteraction();  }  if (getWindow().superDispatchTouchEvent(ev)) {    return true;  }  return onTouchEvent(ev);}  }
class C{  int putData(Object data) throws FitsException {  long lsize=ArrayFuncs.computeLSize(data);  if (lsize > Integer.MAX_VALUE) {    throw new FitsException("FITS Heap > 2 G");  }  int size=(int)lsize;  expandHeap(size);  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);  try {    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);    o.writeArray(data);    o.flush();    o.close();  } catch (  IOException e) {    throw new FitsException("Unable to write variable column length data",e);  }  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);  int oldOffset=this.heapSize;  this.heapSize+=size;  return oldOffset;}  }
class C{  public CPassword(String text,int columns){  super(text,columns);  init();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean onTouchEvent(final MotionEvent event){  int action=MotionEventCompat.getActionMasked(event);switch (action) {case MotionEvent.ACTION_DOWN:    elevate();  return true;case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:lower();return true;}return false;}  }
class C{  public SystemStreamPartition(String system,String stream,Partition partition){  super(system,stream);  this.partition=partition;  this.hash=computeHashCode();}  }
class C{  protected void processOutput() throws CommandException {}  }
class C{  public DeviceinfoendpointRequest(JsonHttpClient client,HttpMethod method,String uriTemplate,Object content){  super(client,method,uriTemplate,content);}  }
class C{  public ChunkCoords subtract(ChunkCoords coords){  return new ChunkCoords(coords.dimension,this.x - coords.x,this.y - coords.y,this.z - coords.z);}  }
class C{  public TLongIntHashMap(){}  }
class C{  public final boolean isEditable(){  return editable;}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException {  return true;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public B put(TypeToken<? extends B> key,B value){  throw new UnsupportedOperationException();}  }
class C{  public static CategoryFragment newInstance(DrawerItemCategory drawerItemCategory){  if (drawerItemCategory != null)   return newInstance(drawerItemCategory.getOriginalId(),drawerItemCategory.getName(),drawerItemCategory.getType()); else {    Timber.e(new RuntimeException(),"Creating category with null arguments");    return null;  }}  }
class C{  protected void establecerNivelExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de establecerNivelExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionAuditoriaBI service=services.lookupGestionAuditoriaBI();  String[] usuariosModificados=request.getParameterValues("detallesseleccionadosasignar");  String level=request.getParameter("nivel");  for (int i=0; i < usuariosModificados.length; i++) {    service.setGroupLogLevel(usuariosModificados[i],Integer.parseInt(level));  }  listadoGruposExecuteLogic(mapping,form,request,response);}  }
class C{  public void testJoinGroupOrderExplainHint02() throws Exception {  final ASTContainer container=new TestHelper("explainHints-joingrouporder02","explainHints-joingrouporder02.rq","explainHints.trig","explainHints-joingrouporder02.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertFalse(explainHintAnnotatedBOps.hasNext());}  }
class C{  public static String typeName(int type){switch (type) {case Types.BIGINT:    return "BIGINT ";case Types.BINARY:  return "BINARY";case Types.BIT:return "BIT";case Types.CHAR:return "CHAR";case Types.DATE:return "DATE";case Types.DECIMAL:return "DECIMAL";case Types.DOUBLE:return "DOUBLE";case Types.FLOAT:return "FLOAT";case Types.INTEGER:return "INTEGER";case Types.LONGVARBINARY:return "LONGVARBINARY";case Types.LONGVARCHAR:return "LONGVARCHAR";case Types.NULL:return "NULL";case Types.NUMERIC:return "NUMERIC";case Types.OTHER:return "OTHER";case Types.REAL:return "REAL";case Types.SMALLINT:return "SMALLINT";case Types.TIME:return "TIME";case Types.TIMESTAMP:return "TIMESTAMP";case Types.TINYINT:return "TINYINT";case Types.VARBINARY:return "VARBINARY";case Types.VARCHAR:return "VARCHAR";default :return "Unknown";}}  }
class C{  private static boolean hasText(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  return (!TextUtils.isEmpty(node.getText()) || !TextUtils.isEmpty(node.getContentDescription()));}  }
class C{  public boolean execute() throws KeeperException, InterruptedException {  do {    if (id == null) {      long sessionId=zookeeper.getSessionId();      String prefix="x-" + sessionId + "-";      findPrefixInChildren(prefix,zookeeper,dir);      idName=new ZNodeName(id);    }    if (id != null) {      List<String> names=zookeeper.getChildren(dir,false);      if (names.isEmpty()) {        LOG.warn("No children in: " + dir + " when we've just "+ "created one! Lets recreate it...");        id=null;      } else {        SortedSet<ZNodeName> sortedNames=new TreeSet<ZNodeName>();        for (        String name : names) {          sortedNames.add(new ZNodeName(dir + "/" + name));        }        ownerId=sortedNames.first().getName();        SortedSet<ZNodeName> lessThanMe=sortedNames.headSet(idName);        if (!lessThanMe.isEmpty()) {          ZNodeName lastChildName=lessThanMe.last();          lastChildId=lastChildName.getName();          if (LOG.isDebugEnabled()) {            LOG.debug("watching less than me node: " + lastChildId);          }          Stat stat=zookeeper.exists(lastChildId,new LockWatcher());          if (stat != null) {            return Boolean.FALSE;          } else {            LOG.warn("Could not find the" + " stats for less than me: " + lastChildName.getName());          }        } else {          if (isOwner()) {            if (callback != null) {              callback.lockAcquired();            }            return Boolean.TRUE;          }        }      }    }  } while (id == null);  return Boolean.FALSE;}  }
class C{  public void clearReadTime(){  _readTime=0;}  }
class C{  public static AetherResult prepareDependencies(final Path tmpDir,final ImportConfiguration cfg) throws RepositoryException {  Objects.requireNonNull(tmpDir);  Objects.requireNonNull(cfg);  final RepositoryContext ctx=new RepositoryContext(tmpDir,cfg.getRepositoryUrl(),cfg.isAllOptional());  final CollectRequest cr=new CollectRequest();  cr.setRepositories(ctx.getRepositories());  for (  final MavenCoordinates coords : cfg.getCoordinates()) {    final Dependency dep=new Dependency(new DefaultArtifact(coords.toString()),COMPILE);    cr.addDependency(dep);  }  final DependencyFilter filter=DependencyFilterUtils.classpathFilter(COMPILE);  final DependencyRequest deps=new DependencyRequest(cr,filter);  final DependencyResult dr=ctx.getSystem().resolveDependencies(ctx.getSession(),deps);  final List<ArtifactResult> arts=dr.getArtifactResults();  if (!cfg.isIncludeSources()) {    return asResult(arts,cfg,of(dr));  }  final List<ArtifactRequest> requests=extendRequests(arts.stream().map(null),ctx,cfg);  return asResult(resolve(ctx,requests),cfg,of(dr));}  }
class C{  @LargeTest public void testStressAddRemoveEffects() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String VideoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String[] loggingInfo=new String[1];  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",VideoItemFileName1,renderingMode);  mVideoEditor.addMediaItem(mediaItem1);  final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2",ImageItemFileName2,10000,renderingMode);  int i=0;  mVideoEditor.addMediaItem(mediaItem2);  writeTestCaseHeader("testStressAddRemoveEffects");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 5 == 0) {      mediaItem1.setExtractBoundaries(10000,30000);      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem1,"effect1" + i,10000,(mediaItem1.getTimelineDuration() - 1000),EffectColor.TYPE_COLOR,EffectColor.GREEN);      mediaItem1.addEffect(effectColor1);    }    if (i % 5 == 1) {      mediaItem2.setDuration(20000);      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem2,"effect1" + i,0,4000,EffectColor.TYPE_GRADIENT,EffectColor.GRAY);      mediaItem2.addEffect(effectColor1);    }    if (i % 5 == 2) {      mediaItem1.setExtractBoundaries(10000,30000);      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem1,"effect1" + i,(mediaItem1.getTimelineDuration() - 4000),4000,EffectColor.TYPE_SEPIA,0);      mediaItem1.addEffect(effectColor1);    }    if (i % 5 == 3) {      mediaItem2.setDuration(20000);      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem2,"effect1" + i,10000,4000,EffectColor.TYPE_NEGATIVE,0);      mediaItem2.addEffect(effectColor1);    }    if (i % 5 == 4) {      mediaItem2.setDuration(20000);      final Rect startRect=new Rect((mediaItem2.getHeight() / 3),(mediaItem2.getWidth() / 3),(mediaItem2.getHeight() / 2),(mediaItem2.getWidth() / 2));      final Rect endRect=new Rect(0,0,mediaItem2.getWidth(),mediaItem2.getHeight());      final EffectKenBurns kbEffectOnMediaItem=new EffectKenBurns(mediaItem2,"KBOnM2" + i,startRect,endRect,500,(mediaItem2.getDuration() - 500));      mediaItem2.addEffect(kbEffectOnMediaItem);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);  for (i=0; i < 50; i++) {    if (i % 5 == 0) {      mediaItem1.removeEffect("effect1" + i);    }    if (i % 5 == 1) {      mediaItem1.removeEffect("effect1" + i);    }    if (i % 5 == 2) {      mediaItem1.removeEffect("effect1" + i);    }    if (i % 5 == 3) {      mediaItem1.removeEffect("effect1" + i);    }    if (i % 5 == 4) {      mediaItem1.removeEffect("KBOnM2" + i);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,true,i);    }  }  getAfterMemory_updateLog(loggingInfo,true,i);}  }
class C{  public T caseFacet(Facet object){  return null;}  }
class C{  public void stop(){  for (  RequestDispatcher dispatcher : mDispatchers)   if (dispatcher != null)   dispatcher.quit();}  }
class C{  public void grantVoice(String nickname) throws XMPPException {  changeRole(nickname,"participant",null);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_fixUpWasCalled=true;  int sz=vars.size();  for (int i=vars.size() - 1; i >= 0; i--) {    QName qn=(QName)vars.elementAt(i);    if (qn.equals(m_qname)) {      if (i < globalsSize) {        m_isGlobal=true;        m_index=i;      } else {        m_index=i - globalsSize;      }      return;    }  }  java.lang.String msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_COULD_NOT_FIND_VAR,new Object[]{m_qname.toString()});  TransformerException te=new TransformerException(msg,this);  throw new org.apache.xml.utils.WrappedRuntimeException(te);}  }
class C{  public static Position skipToUnmatchedEnd(Position pos,Token[][] spec,boolean punct){  Position nextPos=pos;  while (nextPos != null) {    Token tok=nextPos.toToken(spec);    if (tok.type == Token.BUILTIN) {      int symType=BuiltInSymbols.GetBuiltInSymbol(tok.string,true).symbolType;      if ((symType == Symbol.RIGHT_PAREN) || (punct && (tok.string.equals(";") || tok.string.equals(",")))) {        return nextPos;      }      if (symType == Symbol.LEFT_PAREN) {        nextPos=nextNonComment(nextPos,spec);        nextPos=skipToUnmatchedEnd(nextPos,spec,false);      }    }    nextPos=nextNonComment(nextPos,spec);  }  return null;}  }
class C{  @Override public Eval<T> firstValue(){  return Eval.later(null);}  }
class C{  public static ImpFormat load(String name){  log.config(name);  ImpFormat retValue=null;  String sql="SELECT * FROM AD_ImpFormat WHERE Name=?";  int ID=0;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,name);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      retValue=new ImpFormat(name,rs.getInt("AD_Table_ID"),rs.getString("FormatType"));      ID=rs.getInt("AD_ImpFormat_ID");      if (X_AD_ImpFormat.FORMATTYPE_CustomSeparatorChar.equals(rs.getString(I_AD_ImpFormat.COLUMNNAME_FormatType)))       retValue.setSeparatorChar(rs.getString(I_AD_ImpFormat.COLUMNNAME_SeparatorChar));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return null;  }  loadRows(retValue,ID);  return retValue;}  }
class C{  private void removeIsolatedNodes(){  Collection<? extends Node> nodes=scenario.getNetwork().getNodes().values();  List<Id<Node>> nodes2Remove=new ArrayList<>();  for (  Node n : nodes) {    if (n.getInLinks().size() == 0 && n.getOutLinks().size() == 0) {      nodes2Remove.add(n.getId());    }  }  for (  Id<Node> nodeId : nodes2Remove) {    scenario.getNetwork().removeNode(nodeId);    LOG.warn("The isolated node " + nodeId.toString() + " is removed from the network.");  }}  }
class C{  public static boolean isBoxing(Class<?> destination,Class<?> source){  return isAutoboxingOperation(boxingOperations,destination,source);}  }
class C{  public final static int countNonzeroPairs(final long x){  return Long.bitCount((x | x >>> 1) & 0x5555555555555555L);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrprevioussiblingnull.class,args);}  }
class C{  protected void doParse() throws ParseException, IOException {  current=reader.read();  ((TimingSpecifierListHandler)timingSpecifierHandler).startTimingSpecifierList();  skipSpaces();  if (current != -1) {    for (; ; ) {      Object[] spec=parseTimingSpecifier();      handleTimingSpecifier(spec);      skipSpaces();      if (current == -1) {        break;      }      if (current == ';') {        current=reader.read();        continue;      }      reportUnexpectedCharacterError(current);    }  }  skipSpaces();  if (current != -1) {    reportUnexpectedCharacterError(current);  }  ((TimingSpecifierListHandler)timingSpecifierHandler).endTimingSpecifierList();}  }
class C{  public void testGet(){  SpellCheckedMetadata meta=new SpellCheckedMetadata();  assertNull(meta.get("a-name"));  meta.add("a-name","value-1");  assertEquals("value-1",meta.get("a-name"));  meta.add("a-name","value-2");  assertEquals("value-1",meta.get("a-name"));}  }
class C{  protected boolean contains(Vector2 a,Vector2 b,Vector2 c,Vector2 p){  Vector2 ab=a.to(b);  Vector2 ac=a.to(c);  Vector2 pa=a.to(p);  double dot00=ac.dot(ac);  double dot01=ac.dot(ab);  double dot02=ac.dot(pa);  double dot11=ab.dot(ab);  double dot12=ab.dot(pa);  double denominator=dot00 * dot11 - dot01 * dot01;  double u=(dot11 * dot02 - dot01 * dot12) / denominator;  double v=(dot00 * dot12 - dot01 * dot02) / denominator;  return u > 0 && v > 0 && (u + v <= 1 + EarClipping.CONTAINS_EPSILON);}  }
class C{  public static Department createDepartment(){  return new DepartmentImpl();}  }
class C{  private void saveCenters(){  try {    final String fileName=new FileSave("Where To Save centers.txt ?","centers.txt",s_mapFolderLocation).getPathString();    if (fileName == null) {      return;    }    final FileOutputStream out=new FileOutputStream(fileName);    PointFileReaderWriter.writeOneToOne(out,m_centers);    out.flush();    out.close();    System.out.println("Data written to :" + new File(fileName).getCanonicalPath());  } catch (  final Exception ex) {    ClientLogger.logQuietly(ex);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_constantDeclaration_2_();}  }
class C{  @Override public void clear(){  if (size != 0) {    Arrays.fill(table,null);    entryForNullKey=null;    modCount++;    size=0;  }}  }
class C{  public boolean isServiceConnected(RcsServiceName... services){  for (  RcsServiceName service : services) {    if (!mManagedServices.contains(service)) {      throw new IllegalArgumentException("Service " + service + " does not belong to set of managed services!");    }    if (!mConnectedServices.contains(service)) {      return false;    }  }  return true;}  }
class C{  public void close(){  if (connected) {    try {      terminal.deactivate();    } catch (    Exception ex) {      logger.debug("Exception occurred while closing UDPMasterConnection",ex);    }    connected=false;  }}  }
class C{  public static void installEditableHeader(JTable table,TableCellRenderer headerRenderer,TableCellEditor headerEditor,Object[] initialValues){  TableColumnModel columnModel=table.getColumnModel();  table.setTableHeader(new EditableTableHeader(columnModel));  for (int i=0; i < table.getColumnCount(); i++) {    EditableTableHeaderColumn col=(EditableTableHeaderColumn)table.getColumnModel().getColumn(i);    col.setHeaderValue(initialValues[i]);    col.setHeaderRenderer(headerRenderer);    col.setHeaderEditor(headerEditor);  }}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  public AuthnRequestStateCookieWrapper(AuthenticationFilter<AuthnRequestState> authenticator){  this.authenticator=authenticator;}  }
class C{  public CutInHalfMove(){}  }
class C{  public boolean rejoinOpenChannels(){  return rejoinOpenChannels.isEnabled() && rejoinOpenChannels.isSelected();}  }
class C{  @Override public TextMessage createTextMessage(final String string) throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createTextMessage(" + string + ")"+ session);  }  return session.createTextMessage(string);}  }
class C{  @NamespacePermission(fields="#namespace",permissions=NamespacePermissionEnum.READ) private void mockMethod(String namespace){}  }
class C{  public int size(){  return m_Elements.size();}  }
class C{  public void logError(Throwable exception,String message){  LogUtils.log(log,IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  public PaintEvent createPaintEvent(Component target,int x,int y,int w,int h){  return new PaintEvent(target,PaintEvent.PAINT,new Rectangle(x,y,w,h));}  }
class C{  public static Map<String,String> strToMap(String str,String delim,boolean trim){  return strToMap(str,delim,trim,null);}  }
class C{  public static PrettyPrint indentWithTabs(){  return new PrettyPrint(new char[]{'\t'});}  }
class C{  public SetSkuPriceEventCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  public void curveTo(float c0X,float c0Y,float c1X,float c1Y,float x,float y){  mPoints.add(PathPoint.curveTo(c0X,c0Y,c1X,c1Y,x,y));}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public int hashCode(){  return value;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    inStream.mark(1);    if (inStream.read() == '-') {      return getCertificate(decodePEM(inStream,CERT_BOUND_SUFFIX));    } else {      inStream.reset();      return getCertificate(inStream);    }  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  final Segment<V> segmentFor(int hash){  return segments[(hash >>> segmentShift) & segmentMask];}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.934 -0500",hash_original_method="14DECFA9FD444F48F1267DE5834D3279",hash_generated_method="507046DDE19EC846305CEFA119CDCD0F") public NonRepeatableRequestException(){  super();}  }
class C{  protected ParameterizedTypeRefStructural_IMImpl(){  super();}  }
class C{  @Override public void validate(){}  }
class C{  public void service(Mail mail) throws MailetException {  MimeMessage message;  try {    message=mail.getMessage();  } catch (  MessagingException e) {    throw new MailetException("Could not retrieve message from Mail object",e);  }  try {    if (message.isMimeType("multipart/*")) {      analyseMultipartPartMessage(message,mail);    }  } catch (  MessagingException e) {    throw new MailetException("Could not retrieve contenttype of message.",e);  }catch (  Exception e) {    throw new MailetException("Could not analyse message.",e);  }}  }
class C{  public String runExplainPlanJson() throws SQLException {  Statement stmt=null;  ResultSet rs=null;  try {    stmt=connection.createStatement();    rs=stmt.executeQuery("EXPLAIN FORMAT=JSON " + this.sqlText);    if (rs != null && rs.next()) {      return rs.getString(1);    }    DBUtils.close(rs);  }  finally {    DBUtils.close(rs);    DBUtils.close(stmt);  }  return null;}  }
class C{  public String[] valueArray(){  return valueArray(null);}  }
class C{  public InternalServerErrorException(String message,Response response){  super(HttpStatus.INTERNAL_SERVER_ERROR,message,response);}  }
class C{  private static int determineDBVendor(String dbVendor) throws Exception {  if (dbVendor.indexOf(DbEngine.SQLSERVER_STR) != -1)   return DbEngine.SQLSERVER; else   if (dbVendor.indexOf(DbEngine.ORACLE_STR) != -1)   return DbEngine.ORACLE; else   if (dbVendor.indexOf(DbEngine.MYSQL_STR) != -1)   return DbEngine.MYSQL; else   if (dbVendor.indexOf(DbEngine.POSTGRESQL_STR) != 1)   return DbEngine.POSTGRESQL; else   if (dbVendor.indexOf(DbEngine.DB2_STR) != -1)   return DbEngine.DB2;  throw new IeciTdException(DbError.EC_INVALID_ENGINE,DbError.EM_INVALID_ENGINE);}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  }  int idx=startpos;  if (count >= 6) {    sb.append((char)LATCH_TO_BYTE);    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  if (idx < startpos + count) {    sb.append((char)LATCH_TO_BYTE_PADDED);  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public area(String shape,String coords){  setShape(shape);  setCoords(coords);}  }
class C{  public void commit() throws AcmeException {  LOG.debug("modify/commit");  try (Connection conn=getSession().provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource("reg");    if (!editContacts.isEmpty()) {      claims.put("contact",editContacts);    }    if (editAgreement != null) {      claims.put("agreement",editAgreement);    }    int rc=conn.sendSignedRequest(getLocation(),claims,getSession());    if (rc != HttpURLConnection.HTTP_ACCEPTED) {      conn.throwAcmeException();    }    Map<String,Object> json=conn.readJsonResponse();    unmarshal(json,conn);  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public DocTermOrds(LeafReader reader,Bits liveDocs,String field,BytesRef termPrefix,int maxTermDocFreq) throws IOException {  this(reader,liveDocs,field,termPrefix,maxTermDocFreq,DEFAULT_INDEX_INTERVAL_BITS);}  }
class C{  public void computeTaskMap(long taskPtr,long outMemPtr,long inMemPtr){  enter();  try {    PlatformCallbackUtils.computeTaskMap(envPtr,taskPtr,outMemPtr,inMemPtr);  }  finally {    leave();  }}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(MARKER)) {    CSSClass cls=new CSSClass(this,MARKER);    cls.setStatement(SVGConstants.CSS_STROKE_VALUE,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) * 2.);    cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  @SuppressWarnings("try") private void createConstantTree(DefUseTree tree){  ConstantTree constTree=new ConstantTree(lir.getControlFlowGraph(),tree);  constTree.set(Flags.SUBTREE,tree.getBlock());  tree.forEach(null);  if (constTree.get(Flags.USAGE,tree.getBlock())) {    usageAtDefinitionSkipped.increment();    return;  }  constTree.markBlocks();  NodeCost cost=ConstantTreeAnalyzer.analyze(constTree,tree.getBlock());  int usageCount=cost.getUsages().size();  assert usageCount == tree.usageCount() : "Usage count differs: " + usageCount + " vs. "+ tree.usageCount();  if (Debug.isLogEnabled()) {    try (Indent i=Debug.logAndIndent("Variable: %s, Block: %s, prob.: %f",tree.getVariable(),tree.getBlock(),tree.getBlock().probability())){      Debug.log("Usages result: %s",cost);    }   }  if (cost.getNumMaterializations() > 1 || cost.getBestCost() < tree.getBlock().probability()) {    try (Scope s=Debug.scope("CLOmodify",constTree);Indent i=Debug.logAndIndent("Replacing %s = %s",tree.getVariable(),tree.getConstant().toValueString())){      deleteInstruction(tree);      constantsOptimized.increment();      createLoads(tree,constTree,tree.getBlock());    } catch (    Throwable e) {      throw Debug.handle(e);    }  } else {    materializeAtDefinitionSkipped.increment();  }  Debug.dump(Debug.INFO_LOG_LEVEL,constTree,"ConstantTree for %s",tree.getVariable());}  }
class C{  private void count(AggregateAPIEntity targetObj) throws Exception {  targetObj.setNumTotalDescendants(targetObj.getNumTotalDescendants() + 1);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_MEMORYTYPE_HOST:    return "CU_MEMORYTYPE_HOST";case CU_MEMORYTYPE_DEVICE:  return "CU_MEMORYTYPE_DEVICE";case CU_MEMORYTYPE_ARRAY:return "CU_MEMORYTYPE_ARRAY";case CU_MEMORYTYPE_UNIFIED:return "CU_MEMORYTYPE_UNIFIED";}return "INVALID CUmemorytype: " + n;}  }
class C{  public Index next(){  if (unsigned == -1)   throw new IndexOutOfBoundsException();  return Index.of(unsigned + 1);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Nullable private static String toHex(byte[] bytes){  return bytes == null ? null : new String(Hex.encodeHex(bytes));}  }
class C{  public void registerOutParameter(String parameterName,SQLType sqlType,int scale) throws SQLException {  super.registerOutParameter(parameterName,translateAndCheckSqlType(sqlType),scale);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SSLContext.getInstance(null,defaultProvider);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (protocol is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],defaultProvider);      fail("Expected NoSuchAlgorithmException was not thrown as expected");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public static int pickFromDistribution(final double[] probabilities,final double prob,final int checkboundary){  if (prob < 0.0 || prob > 1.0)   throw new ArithmeticException("Invalid probability for pickFromDistribution (must be 0.0<=x<=1.0)");  if (probabilities.length == 1)   return 0; else   if (probabilities.length < checkboundary) {    for (int x=0; x < probabilities.length - 1; x++)     if (probabilities[x] > prob)     return exemptZeroes(probabilities,x);    return exemptZeroes(probabilities,probabilities.length - 1);  } else {    int top=probabilities.length - 1;    int bottom=0;    int cur;    while (top != bottom) {      cur=(top + bottom) / 2;      if (probabilities[cur] > prob)       if (cur == 0 || probabilities[cur - 1] <= prob)       return exemptZeroes(probabilities,cur); else       top=cur; else       if (cur == probabilities.length - 1)       return exemptZeroes(probabilities,cur); else       if (bottom == cur)       bottom++; else       bottom=cur;    }    return exemptZeroes(probabilities,bottom);  }}  }
class C{  public static void report(){  reportReportableObjects();  AOSLogging.logger.decayStatistics(decayEventCounter);}  }
class C{  @GuardedBy("lock") private void updateStats(){  mInternalStatFs=updateStatsHelper(mInternalStatFs,mInternalPath);  mExternalStatFs=updateStatsHelper(mExternalStatFs,mExternalPath);  mLastRestatTime=SystemClock.uptimeMillis();}  }
class C{  public int readBytes(byte[] buffer,int offset,int length) throws IOException {  int readLength=0;  if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  } else   if (_chunkLength == 0) {    int tag=read();switch (tag) {case 'N':      return -1;case 'B':case BC_BINARY_CHUNK:    _isLastChunk=tag == 'B';  _chunkLength=(read() << 8) + read();break;case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:{_isLastChunk=true;_chunkLength=tag - 0x20;break;}case 0x34:case 0x35:case 0x36:case 0x37:{_isLastChunk=true;_chunkLength=(tag - 0x34) * 256 + read();break;}default :throw expect("binary",tag);}}while (length > 0) {if (_chunkLength > 0) {buffer[offset++]=(byte)read();_chunkLength--;length--;readLength++;} else if (_isLastChunk) {if (readLength == 0) return -1; else {_chunkLength=END_OF_DATA;return readLength;}} else {int tag=read();switch (tag) {case 'B':case BC_BINARY_CHUNK:_isLastChunk=tag == 'B';_chunkLength=(read() << 8) + read();break;default :throw expect("binary",tag);}}}if (readLength == 0) return -1; else if (_chunkLength > 0 || !_isLastChunk) return readLength; else {_chunkLength=END_OF_DATA;return readLength;}}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  private void updateKey(int layer){  computeAuthPaths(layer);  if (layer > 0) {    if (layer > 1) {      nextNextLeaf[layer - 1 - 1]=nextNextLeaf[layer - 1 - 1].nextLeaf();    }    upperLeaf[layer - 1]=upperLeaf[layer - 1].nextLeaf();    int t=(int)Math.floor((double)(this.getNumLeafs(layer) * 2) / (double)(this.heightOfTrees[layer - 1] - this.K[layer - 1]));    if (index[layer] % t == 1) {      if (index[layer] > 1 && minTreehash[layer - 1] >= 0) {        byte[] leaf=this.upperTreehashLeaf[layer - 1].getLeaf();        try {          currentTreehash[layer - 1][minTreehash[layer - 1]].update(this.gmssRandom,leaf);          if (currentTreehash[layer - 1][minTreehash[layer - 1]].wasFinished()) {          }        } catch (        Exception e) {          System.out.println(e);        }      }      this.minTreehash[layer - 1]=getMinTreehashIndex(layer - 1);      if (this.minTreehash[layer - 1] >= 0) {        byte[] seed=this.currentTreehash[layer - 1][this.minTreehash[layer - 1]].getSeedActive();        this.upperTreehashLeaf[layer - 1]=new GMSSLeaf(this.digestProvider.get(),this.otsIndex[layer - 1],t,seed);        this.upperTreehashLeaf[layer - 1]=this.upperTreehashLeaf[layer - 1].nextLeaf();      }    } else {      if (this.minTreehash[layer - 1] >= 0) {        this.upperTreehashLeaf[layer - 1]=this.upperTreehashLeaf[layer - 1].nextLeaf();      }    }    nextRootSig[layer - 1].updateSign();    if (index[layer] == 1) {      this.nextNextRoot[layer - 1].initialize(new Vector());    }    this.updateNextNextAuthRoot(layer);  }}  }
class C{  public InstanceStatus dispatch() throws APPlatformException {  Status currentState=paramHandler.getState();  LOGGER.debug("  currentState=" + currentState.toString());  Status newStatus=null;switch (currentState) {case CREATION_REQUESTED:    newStatus=Status.CREATION_STEP1;  break;case MODIFICATION_REQUESTED:newStatus=Status.UPDATING;break;case DELETION_REQUESTED:newStatus=Status.DELETING;break;case ACTIVATION_REQUESTED:newStatus=Status.FINISHED;break;case DEACTIVATION_REQUESTED:newStatus=Status.FINISHED;break;case CREATION_STEP1:platformService.lockServiceInstance("ess.sample",instanceId,paramHandler.getTPAuthentication());newStatus=Status.CREATION_STEP2;break;case CREATION_STEP2:platformService.unlockServiceInstance("ess.sample",instanceId,paramHandler.getTPAuthentication());newStatus=Status.FINISHED;sendMail(instanceId,currentState);break;case UPDATING:newStatus=Status.FINISHED;sendMail(instanceId,currentState);break;case DELETING:newStatus=Status.DESTROYED;break;default :}if (newStatus != null) {LOGGER.debug("  newState=" + newStatus.toString());paramHandler.setState(newStatus);}InstanceStatus result=new InstanceStatus();result.setIsReady(paramHandler.getState() == Status.FINISHED || paramHandler.getState() == Status.DESTROYED);List<LocalizedText> messages=Messages.getAll("status_" + paramHandler.getState());result.setDescription(messages);result.setChangedParameters(paramHandler.getSettings().getParameters());if (result.isReady()) {result.setAccessInfo("Access information for instance " + instanceId);}return result;}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public SimpleDataCoding(Alphabet alphabet,MessageClass messageClass) throws IllegalArgumentException {  if (alphabet == null) {    throw new IllegalArgumentException("Alphabet is mandatory, can't be null");  }  if (alphabet.equals(Alphabet.ALPHA_UCS2) || alphabet.isReserved()) {    throw new IllegalArgumentException("Supported alphabet for SimpleDataCoding does not include " + Alphabet.ALPHA_UCS2 + " or "+ "reserved alphabet codes. Current alphabet is "+ alphabet);  }  if (messageClass == null) {    throw new IllegalArgumentException("MessageClass is mandatory, can't be null");  }  this.alphabet=alphabet;  this.messageClass=messageClass;}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public UF5(){  this(30);}  }
class C{  private static IAbstractNode convertAnd(final CommonTree ast) throws RecognitionException {  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();  for (  final Object childObject : ast.getChildren()) {    children.add(convert((CommonTree)childObject));  }  return new CAbstractAndExpression(children);}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  @RequestMapping(value="/bars",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Bar> updateBar(@RequestBody Bar bar) throws URISyntaxException {  log.debug("REST request to update Bar : {}",bar);  if (bar.getId() == null) {    return createBar(bar);  }  Bar result=barRepository.save(bar);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("bar",bar.getId().toString())).body(result);}  }
class C{  @Override public void updateByte(int columnIndex,byte x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateByte(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueByte.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void writeObject(String key,Object object,CharBuf buffer){  if (isExcludingValues(object)) {    return;  }  if (object == null) {    buffer.addNull();    return;  }  Class<?> objectClass=object.getClass();  Converter converter=findConverter(objectClass);  if (converter != null) {    writeRaw(converter.convert(object,key),buffer);    return;  }  if (CharSequence.class.isAssignableFrom(objectClass)) {    writeCharSequence((CharSequence)object,buffer);  } else   if (objectClass == Boolean.class) {    buffer.addBoolean((Boolean)object);  } else   if (Number.class.isAssignableFrom(objectClass)) {    writeNumber(objectClass,(Number)object,buffer);  } else   if (Date.class.isAssignableFrom(objectClass)) {    writeDate((Date)object,buffer);  } else   if (Calendar.class.isAssignableFrom(objectClass)) {    writeDate(((Calendar)object).getTime(),buffer);  } else   if (Map.class.isAssignableFrom(objectClass)) {    writeMap((Map)object,buffer);  } else   if (Iterable.class.isAssignableFrom(objectClass)) {    writeIterator(((Iterable<?>)object).iterator(),buffer);  } else   if (Iterator.class.isAssignableFrom(objectClass)) {    writeIterator((Iterator)object,buffer);  } else   if (objectClass == Character.class) {    buffer.addJsonEscapedString(Chr.array((Character)object),disableUnicodeEscaping);  } else   if (objectClass == URL.class) {    buffer.addJsonEscapedString(object.toString(),disableUnicodeEscaping);  } else   if (objectClass == UUID.class) {    buffer.addQuoted(object.toString());  } else   if (objectClass == JsonOutput.JsonUnescaped.class) {    buffer.add(object.toString());  } else   if (Closure.class.isAssignableFrom(objectClass)) {    writeMap(JsonDelegate.cloneDelegateAndGetContent((Closure<?>)object),buffer);  } else   if (Expando.class.isAssignableFrom(objectClass)) {    writeMap(((Expando)object).getProperties(),buffer);  } else   if (Enumeration.class.isAssignableFrom(objectClass)) {    List<?> list=Collections.list((Enumeration<?>)object);    writeIterator(list.iterator(),buffer);  } else   if (objectClass.isArray()) {    writeArray(objectClass,object,buffer);  } else   if (Enum.class.isAssignableFrom(objectClass)) {    buffer.addQuoted(((Enum<?>)object).name());  } else   if (File.class.isAssignableFrom(objectClass)) {    Map<?,?> properties=getObjectProperties(object);    Iterator<? extends Map.Entry<?,?>> iterator=properties.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<?,?> entry=iterator.next();      if (entry.getValue() instanceof File) {        iterator.remove();      }    }    writeMap(properties,buffer);  } else {    Map<?,?> properties=getObjectProperties(object);    writeMap(properties,buffer);  }}  }
class C{  public static boolean isUrl(String url){  Pattern pattern=Pattern.compile("^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$");  return pattern.matcher(url).matches();}  }
class C{  @Override public void onDraw(Canvas canvas,RecyclerView parent,RecyclerView.State state){  drawHorizontalDividers(canvas,parent);  drawVerticalDividers(canvas,parent);}  }
class C{  public RequestHandle patch(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return patch(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public boolean containsNearbyDuplicate2(int[] nums,int k){  Set<Integer> set=new HashSet<Integer>();  for (int i=0; i < nums.length; i++) {    if (i > k) {      set.remove(nums[i - k - 1]);    }    if (!set.add(nums[i])) {      return true;    }  }  return false;}  }
class C{  public GliderRegionOfInterest(Iterable<? extends LatLon> locations,Color color){  if (locations == null) {    String message=Logging.getMessage("nullValue.LocationsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (color == null) {    String message=Logging.getMessage("nullValue.ColorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.locations=new ArrayList<LatLon>();  for (  LatLon ll : locations) {    this.locations.add(ll);  }  this.color=color;}  }
class C{  protected void throttlePropertyChange(PropertyChangeEvent event){  String eventName=event.getPropertyName();  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (!enabled) {    log.debug("VSDecoder disabled. Take no action.");    return;  }  log.warn("VSDecoderPane throttle property change: " + eventName);  if (oldValue != null) {    log.warn("Old: " + oldValue.toString());  }  if (newValue != null) {    log.warn("New: " + newValue.toString());  }  for (  SoundEvent t : event_list.values()) {    t.propertyChange(event);  }  for (  Trigger t : trigger_list.values()) {    t.propertyChange(event);  }}  }
class C{  public void forAllPlayersExecute(final Task<Player> task){  for (  Player player : players.values()) {    task.execute(player);  }}  }
class C{  public void close(){  this.setVisible(true);  this.dispose();}  }
class C{  public void zoomIn(){  Matrix save=mViewPortHandler.zoomIn(getWidth() / 2f,-(getHeight() / 2f));  mViewPortHandler.refresh(save,this,true);  calculateOffsets();  postInvalidate();}  }
class C{  public static int[] createNormalizedMap(int[] values,byte[] levels,int start,int limit){  if (values != null) {    if (start != 0 || limit != values.length) {      boolean copyRange, canonical;      byte primaryLevel;      if (levels == null) {        primaryLevel=(byte)0x0;        copyRange=true;        canonical=true;      } else {        if (levels[start] == levels[limit - 1]) {          primaryLevel=levels[start];          canonical=(primaryLevel & (byte)0x1) == 0;          int i;          for (i=start; i < limit; i++) {            if (levels[i] < primaryLevel) {              break;            }            if (canonical) {              canonical=levels[i] == primaryLevel;            }          }          copyRange=(i == limit);        } else {          copyRange=false;          primaryLevel=(byte)0x0;          canonical=false;        }      }      if (copyRange) {        if (canonical) {          return null;        }        int[] result=new int[limit - start];        int baseValue;        if ((primaryLevel & (byte)0x1) != 0) {          baseValue=values[limit - 1];        } else {          baseValue=values[start];        }        if (baseValue == 0) {          System.arraycopy(values,start,result,0,limit - start);        } else {          for (int j=0; j < result.length; j++) {            result[j]=values[j + start] - baseValue;          }        }        return result;      } else {        return computeContiguousOrder(values,start,limit);      }    } else {      return values;    }  }  return null;}  }
class C{  public static <I>Parser<I,I> satisfy(I value){  return label(satisfy(null),value.toString());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Seeker.getInstance().isAClientControllingCaptureDevice(getCapDev(stack)));}  }
class C{  public synchronized void add(Date x,double y){  super.add(x.getTime(),y);}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public boolean isDivByZero(){  return trapCode == RuntimeEntrypoints.TRAP_DIVIDE_BY_ZERO;}  }
class C{  @Override public void resize(long newSize){  final int numPages=numPages(newSize);  if (numPages > pages.length) {    pages=Arrays.copyOf(pages,ArrayUtil.oversize(numPages,RamUsageEstimator.NUM_BYTES_OBJECT_REF));  }  for (int i=numPages - 1; i >= 0 && pages[i] == null; --i) {    pages[i]=newBytePage(i);  }  for (int i=numPages; i < pages.length && pages[i] != null; ++i) {    pages[i]=null;    releasePage(i);  }  this.size=newSize;}  }
class C{  public synchronized void addNewMention(int serverId,Conversation conversation,String msg,boolean vibrate,boolean sound,boolean light){  if (conversation == null) {    return;  }  conversation.addNewMention();  ++newMentions;  String convId=getConversationId(serverId,conversation.getName());  if (!mentions.containsKey(convId)) {    mentions.put(convId,conversation);  }  if (newMentions == 1) {    updateNotification(msg,msg,vibrate,sound,light);  } else {    updateNotification(msg,null,vibrate,sound,light);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"HomeTitleDB\" ("+ "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"NAME\" TEXT,"+ "\"SORT\" TEXT,"+ "\"UT\" TEXT,"+ "\"PIC\" TEXT,"+ "\"CAT_ID\" TEXT,"+ "\"DESCRIPTION\" TEXT,"+ "\"IS_NEW\" TEXT,"+ "\"IS_USE\" TEXT);");  db.execSQL("CREATE INDEX " + constraint + "IDX_HomeTitleDB_ID ON HomeTitleDB"+ " (\"ID\");");}  }
class C{  public PidUnavailableException(final Throwable thr){  super(thr.getMessage(),thr);}  }
class C{  void loadMinecraftVersion(String id){  txtMinecraftVersion.setText("");  if (id == null)   return;  minecraftVersion=MinecraftVersionRequest.minecraftVersion(Settings.getLastProfile().service().version().getMinecraftJar(id));  txtMinecraftVersion.setText(MinecraftVersionRequest.getResponse(minecraftVersion));}  }
class C{  void handle(OngoingRequest ongoingRequest,RequestContext requestContext,Endpoint endpoint){  try {    endpoint.invoke(requestContext).whenComplete(null);  } catch (  Exception e) {    handleException(e,ongoingRequest);  }}  }
class C{  public boolean isDefaultMessageType(){  return isDefaultMessageType(esmClass);}  }
class C{  private void parseEdgesString(String nodeLine){  StringTokenizer tokenizer=new StringTokenizer(nodeLine);  int parameters=6;  if (!tokenizer.hasMoreElements()) {    return;  }  int fromNode=0;  int toNode=0;  float linkDelay=0;  int linkBandwith=0;  for (int actualParam=0; tokenizer.hasMoreElements() && actualParam < parameters; actualParam++) {    String token=tokenizer.nextToken();switch (actualParam) {case 0:      break;case 1:    fromNode=Integer.valueOf(token);  break;case 2:toNode=Integer.valueOf(token);break;case 3:break;case 4:linkDelay=Float.valueOf(token);break;case 5:linkBandwith=Float.valueOf(token).intValue();break;}}graph.addLink(new TopologicalLink(fromNode,toNode,linkDelay,linkBandwith));}  }
class C{  @Setup(Level.Iteration) public void shuffle(){  test.shuffle();}  }
class C{  protected K sanitizeKey(K key){  return key;}  }
class C{  public Transform(Vector2 position,float angle){  setPosition(position);  setRotation(angle);}  }
class C{  public void run(){  try {    if (m_socket == null || m_socket.isClosed())     return;    LdapMessage msg=new LdapMessage();    MLdapUser ldapUser=new MLdapUser();    LdapResult result=new LdapResult();    boolean activeSession=true;    while (activeSession) {      InputStream in=m_socket.getInputStream();      BufferedOutputStream out=new BufferedOutputStream(m_socket.getOutputStream());      byte[] buffer=new byte[512];      int length=in.read(buffer,0,512);      result.reset(msg,ldapUser);      msg.reset(result);      msg.decode(buffer,length);      if (msg.getOperation() == LdapMessage.UNBIND_REQUEST) {        out.close();        break;      }      byte[] bytes=result.getResult(m_model);      out.write(bytes);      out.flush();      if (result.getDone()) {        out.close();        break;      }    }  } catch (  IOException e) {    log.log(Level.SEVERE,"",e);  }  try {    m_socket.close();  } catch (  Exception e) {    log.log(Level.WARNING,"Socket",e);  }  m_socket=null;}  }
class C{  @Inline public static Object initializeArray(Address ptr,TIB tib,int numElems,int size){  Object ref=JavaHeader.initializeArrayHeader(ptr,tib,size);  MiscHeader.initializeHeader(ref,tib,size,false);  setTIB(ref,tib);  setArrayLength(ref,numElems);  return ref;}  }
class C{  public static Hashtable<String,Object> createMarkerDescription(String errorMessage,int severity){  Hashtable<String,Object> prop=new Hashtable<String,Object>();  prop.put(IMarker.SEVERITY,new Integer(severity));  prop.put(IMarker.MESSAGE,errorMessage);  prop.put(TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME,EMPTY_STRING);  prop.put(TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX,new Integer(0));  prop.put(IMarker.LOCATION,EMPTY_STRING);  prop.put(IMarker.CHAR_START,new Integer(0));  prop.put(IMarker.CHAR_END,new Integer(0));  return prop;}  }
class C{  public void testPutInt24(){  byte[] expectedResult={9,0,0,1,1,0,0,2,0,0,3,0,0};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putInt24(1);    array.putInt24(2);    array.putInt24(3);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public boolean abort() throws LoginException {  if (logger.debugOn()) {    logger.debug("abort","Authentication has not completed successfully");  }  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    succeeded=false;    cleanState();    user=null;  } else {    logout();  }  return true;}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(_method.getModifiers());}  }
class C{  public boolean isAltDown(){  return (modifiers & ALT_MASK) != 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  double average;  double sumOfTheSquares;  double stdDev;  double devMean;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          average=sum / n;          z=centreValue - average;          if (n > 2) {            stdDev=Math.sqrt((sumOfTheSquares / n) - (average * average));            devMean=z / stdDev;            output.setValue(row,col,devMean);          } else {            output.setValue(row,col,noData);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected ExecutionFlowImpl(){  super();}  }
class C{  protected Rectangle2D trimBorder(Rectangle2D area){  this.frame.getInsets().trim(area);  return area;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void statusActions(){  final Status status=Status.self();  if (Cfg.DEBUG) {    Check.log(" Status Actions Begins");  }  try {    for (int i=0; i < status.getActionsNumber(); i++) {      final Action a=status.getAction(i);      if (Cfg.DEBUG) {        Check.log(" Action (" + a.getId() + ") "+ a.getDesc());      }      for (int j=0; j < a.getSubActionsNum(); j++) {        final SubAction s=a.getSubAction(j);        if (Cfg.DEBUG) {          Check.log("  -> " + s);        }      }    }  } catch (  final GeneralException rcse) {    if (Cfg.EXCEPTION) {      Check.log(rcse);    }    if (Cfg.DEBUG) {      Check.log(rcse);    }    if (Cfg.DEBUG) {      Check.log(" RCSException detected in Debug.StatusActions()");    }  }  if (Cfg.DEBUG) {    Check.log(" Status Actions Ends");  }}  }
class C{  public long __getId(){  Session session=this.wiki.__getHibernateSession();  session.beginTransaction();  session.lock(hibernateCategory,LockMode.NONE);  long id=hibernateCategory.getId();  session.getTransaction().commit();  return id;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.774 -0500",hash_original_method="42EE7D04E120D0BA05395B903F4DA9F5",hash_generated_method="92F7E12BC4612F2A7DFCF0C8EB87515A") public AuthenticationException(String message){  super(message);}  }
class C{  public void add(Instruction inst){  if (inst != null) {    last.next=inst;    last=inst;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.961 -0500",hash_original_method="123F9816B0FED05FA5B253267B81F032",hash_generated_method="A8DF8D86A10B68C4CE29EE706C113C2D") public SoftReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  private <T>T read(T value,InputNode node,Session session) throws Exception {  return read(value,node,new Source(strategy,support,session));}  }
class C{  protected void layoutDynamicModifiers(DrawContext dc,AVList modifiers,OrderedSymbol osym){}  }
class C{  public static void main(String[] args){  TreeDemo demo=new TreeDemo(null);  demo.mainImpl();}  }
class C{  public static Script dmlFromUrl(String scriptUrlPath){  return scriptFromUrl(scriptUrlPath,ScriptType.DML);}  }
class C{  public static byte[] decode(final String base32) throws IllegalArgumentException {switch (base32.length() % 8) {case 1:case 3:case 6:    throw new IllegalArgumentException(ERR_CANONICAL_LEN);}byte[] bytes=new byte[base32.length() * 5 / 8];int offset=0, i=0, lookup;byte nextByte, digit;while (i < base32.length()) {  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  nextByte=(byte)(digit << 3);  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  bytes[offset++]=(byte)(nextByte | (digit >> 2));  nextByte=(byte)((digit & 3) << 6);  if (i >= base32.length()) {    if (nextByte != (byte)0) {      throw new IllegalArgumentException(ERR_CANONICAL_END);    }    break;  }  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  nextByte|=(byte)(digit << 1);  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  bytes[offset++]=(byte)(nextByte | (digit >> 4));  nextByte=(byte)((digit & 15) << 4);  if (i >= base32.length()) {    if (nextByte != (byte)0) {      throw new IllegalArgumentException(ERR_CANONICAL_END);    }    break;  }  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  bytes[offset++]=(byte)(nextByte | (digit >> 1));  nextByte=(byte)((digit & 1) << 7);  if (i >= base32.length()) {    if (nextByte != (byte)0) {      throw new IllegalArgumentException(ERR_CANONICAL_END);    }    break;  }  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  nextByte|=(byte)(digit << 2);  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  bytes[offset++]=(byte)(nextByte | (digit >> 3));  nextByte=(byte)((digit & 7) << 5);  if (i >= base32.length()) {    if (nextByte != (byte)0) {      throw new IllegalArgumentException(ERR_CANONICAL_END);    }    break;  }  lookup=base32.charAt(i++) - '2';  if (lookup < 0 || lookup >= LOOKUP.length) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  digit=LOOKUP[lookup];  if (digit == -1) {    throw new IllegalArgumentException(ERR_INVALID_CHARS);  }  bytes[offset++]=(byte)(nextByte | digit);}return bytes;}  }
class C{  protected double distance(Solution s1,Solution s2){  double distance=0.0;  for (int i=0; i < s1.getNumberOfObjectives(); i++) {    distance+=Math.pow(s1.getObjective(i) - s2.getObjective(i),2.0);  }  return Math.sqrt(distance);}  }
class C{  public String serializeToString(){  final StringBuilder sb=new StringBuilder();  final int serVer=SER_VER;  final int famID=Family.FREQUENCY.getID();  final int lgMaxMapSz=lgMaxMapSize;  final int flags=(hashMap.getNumActive() == 0) ? EMPTY_FLAG_MASK : 0;  final short type=ARRAY_OF_LONGS_SERDE_ID;  final String fmt="%d,%d,%d,%d,%d,%d,%d,";  final String s=String.format(fmt,serVer,famID,lgMaxMapSz,flags,type,streamLength,offset);  sb.append(s);  sb.append(hashMap.serializeToString());  return sb.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:38.999 -0500",hash_original_method="6053E208B701C67F21F78DB5D1D6AC6A",hash_generated_method="491F5DDF5DBDD960B484D5DC883459C0") private void stopDrag(MotionEvent ev){  mTouchMode=TOUCH_MODE_IDLE;  boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();  cancelSuperTouch(ev);  if (commitChange) {    boolean newState;    mVelocityTracker.computeCurrentVelocity(1000);    float xvel=mVelocityTracker.getXVelocity();    if (Math.abs(xvel) > mMinFlingVelocity) {      newState=xvel > 0;    } else {      newState=getTargetCheckedState();    }    animateThumbToCheckedState(newState);  } else {    animateThumbToCheckedState(isChecked());  }}  }
class C{  public void addActionListener(ActionListener l){  actionListeners.addListener(l);}  }
class C{  @Override protected boolean canStopWaiting(){  return this.receivedAcceptance || this.receivedRejectionMessage;}  }
class C{  public IconifyAction(){  super(ICONIFY_CMD);}  }
class C{  protected void startBackgroundPrefill(){  if (!havePrefillTask) {    havePrefillTask=true;    try {      backgroundProcessor.execute(new PrefillConnectionsTask());    } catch (    RejectedExecutionException e) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.091 -0500",hash_original_method="D9B233459FD7A72AC548D3BF0383246D",hash_generated_method="CDA42B6FAB87B8BB16F41AF58F74C0B3") public void close(){  try {    if (mySock != null) {      mySock.close();      mySock=null;    }    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Closing message Channel " + this);  } catch (  IOException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Error closing socket " + ex);  }}  }
class C{  public void testNextDoubleBadBound(){  SplittableRandom sr=new SplittableRandom();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  public IgniteInterruptedCheckedException(String msg,InterruptedException cause){  super(msg,cause);}  }
class C{  @SuppressWarnings("unchecked") @NonNull public <U>Result<U> sameFailure(){  checkState(failed(),"Not a failure");  return (Result<U>)this;}  }
class C{  public void fAAccountsCompleted(){}  }
class C{  private CassandraTaskExecutor(String frameworkId,String name,String role,String principal,String command,List<String> arguments,double cpus,int memoryMb,int heapMb,int apiPort,Set<String> uris,String javaHome){  this.info=Protos.ExecutorInfo.newBuilder().setFrameworkId(Protos.FrameworkID.newBuilder().setValue(frameworkId)).setName(name).setExecutorId(Protos.ExecutorID.newBuilder().setValue("")).setCommand(createCommandInfo(command,arguments,uris,ImmutableMap.<String,String>builder().put("JAVA_HOME",javaHome).put("JAVA_OPTS","-Xmx" + heapMb + "M").put("EXECUTOR_API_PORT",Integer.toString(apiPort)).build())).addAllResources(Arrays.asList(createCpus(cpus,role,principal),createMemoryMb(memoryMb,role,principal),createPorts(Arrays.asList(apiPort),role,principal))).build();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1)   return new String[]{text};  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?')       list.add("?"); else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false)       list.add("*");    } else     buffer.append(array[i]);  }  if (buffer.length() != 0)   list.add(buffer.toString());  return list.toArray(new String[list.size()]);}  }
class C{  public void testDoCheckWithDefaultNotDetectionResult(){  LOGGER.debug("doCheckWithDefaultNotDetectionResult");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  TextOnlyContainsNonAlphanumericalCharactersChecker instance=new TextOnlyContainsNonAlphanumericalCharactersChecker(mockTextElementBuilder,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public void tableChanged(TableModelEvent e){  initializeSortIndices();  if (isSorted())   sort(m_SortColumn,m_SortAscending);  fireTableChanged(e);}  }
class C{  public Optional<List<Id>> generateIdBatch(final long batchSize){  validateBatchSize(batchSize);  for (int retries=0; retries < maximumAttempts; retries++) {    try {      Optional<List<Id>> result=generateIdsUsingRedis(roundRobinRedisPool.getNextRedis(),batchSize);      if (result.isPresent()) {        return result;      }      Thread.sleep(retries * retries);    } catch (    RuntimeException|InterruptedException e) {      logger.warn("Failed to generate ID. Underlying exception was: {}",e);    }  }  logger.error("No ID generated. ID generation failed after {} retries.",maximumAttempts);  return Optional.absent();}  }
class C{  public void put(byte[] data){  if (data == null)   return;  if (data.length + position >= getCapacity()) {    byte[][] newbuf=new byte[(data.length + position) / SIZE + 2][];    for (int i=0; i < buffer.length; i++)     newbuf[i]=buffer[i];    for (int i=buffer.length; i < newbuf.length; i++)     newbuf[i]=new byte[SIZE];    buffer=newbuf;  }  for (int i=0; i < data.length; i++) {    buffer[position / SIZE][position % SIZE]=data[i];    last=Math.max(last,(position++));  }}  }
class C{  public void putEncodeable(String fieldName,Class<? extends IEncodeable> clazz,IEncodeable s) throws EncodingException {  ctx.encodeableSerializer.calcEncodeable(clazz,s,this);}  }
class C{  private boolean parseInjection(){  if (myBuilder.getTokenType() != GroovyTokenTypes.mDOLLAR)   return false;  final PsiBuilder.Marker injection=myBuilder.mark();  ParserUtils.getToken(myBuilder,GroovyTokenTypes.mDOLLAR);  if (myBuilder.getTokenType() == GroovyTokenTypes.mIDENT || myBuilder.getTokenType() == GroovyTokenTypes.kTHIS) {    PathExpression.parse(myBuilder,myParser);  } else   if (myBuilder.getTokenType() == GroovyTokenTypes.mLCURLY) {    OpenOrClosableBlock.parseClosableBlock(myBuilder,myParser);  } else {    ParserUtils.wrapError(myBuilder,GroovyBundle.message("identifier.or.block.expected"));  }  injection.done(GroovyElementTypes.GSTRING_INJECTION);  return true;}  }
class C{  public FastVector(int capacity,int capIncrement,double capMultiplier){  m_Objects=new Object[capacity];  m_Size=0;  m_CapacityIncrement=capIncrement;  m_CapacityMultiplier=capMultiplier;}  }
class C{  public void render(Graphics g){  if (!isRenderable(getShape()))   return;  if (isUseImage()) {    g.drawImage(image,imageX,imageY,null);    renderLabel(g);  } else   super.render(g);}  }
class C{  public T caseType(Type object){  return null;}  }
class C{  public static DateTimeFormatter basicWeekDate(){  if (bwd == null) {    bwd=new DateTimeFormatterBuilder().appendWeekyear(4,4).appendLiteral('W').appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(),2).appendFixedDecimal(DateTimeFieldType.dayOfWeek(),1).toFormatter();  }  return bwd;}  }
class C{  public StrBuilder minimizeCapacity(){  if (buffer.length > length()) {    char[] old=buffer;    buffer=new char[length()];    System.arraycopy(old,0,buffer,0,size);  }  return this;}  }
class C{  protected void paintButtonPressed(Graphics g,AbstractButton b){}  }
class C{  public void terminate() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Terminate the subscribe manager");  }  stopTimer();  if ((mImsModule.getCurrentNetworkInterface() != null) && mImsModule.getCurrentNetworkInterface().isRegistered() && mSubscribed) {    unSubscribe();  }  if (sLogger.isActivated()) {    sLogger.info("Subscribe manager is terminated");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node createdNode;  String localName;  doc=(Document)load("staffNS",false);  createdNode=doc.createElement("test:employee");  localName=createdNode.getLocalName();  assertNull("localNameNull",localName);}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Bundle bundle=new Bundle();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException e) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  if (name != null && name.length() > 0) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && number.length() > 0) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && data.length() > 0) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && email.length() > 0) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void conditionalizeInstrumentationOperation(IR ir,Instruction i,BasicBlock bb){  BasicBlock C=bb.splitNodeWithLinksAt(i,ir);  bb.recomputeNormalOut(ir);  Instruction prev=i.prevInstructionInCodeOrder();  BasicBlock B=null;  try {    B=bb.splitNodeWithLinksAt(prev,ir);  } catch (  RuntimeException e) {    VM.sysWrite("Bombed when I: " + i + " prev: "+ prev+ "\n");    bb.printExtended();    throw e;  }  bb.recomputeNormalOut(ir);  BasicBlock A=bb;  createCheck(A,C,B,true,ir);}  }
class C{  protected Partitioning(){}  }
class C{  public MySqlWhileStatement parseWhile(String label){  accept(Token.WHILE);  MySqlWhileStatement stmt=new MySqlWhileStatement();  stmt.setLabelName(label);  stmt.setCondition(this.exprParser.expr());  accept(Token.DO);  this.parseProcedureStatementList(stmt.getStatements());  accept(Token.END);  accept(Token.WHILE);  acceptIdentifier(label);  accept(Token.SEMI);  return stmt;}  }
class C{  public static void logPromoOutcome(boolean wasTap){  int preferenceCode=getPreferenceValue();  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchFirstRunFlowOutcome",preferenceCode,PREFERENCE_HISTOGRAM_BOUNDARY);  int preferenceByGestureCode=getPromoByGestureStateCode(preferenceCode,wasTap);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPromoOutcomeByGesture",preferenceByGestureCode,PROMO_BY_GESTURE_BOUNDARY);}  }
class C{  CSVRecord nextRecord() throws IOException {  CSVRecord result=null;  this.record.clear();  StringBuilder sb=null;  do {    this.reusableToken.reset();    this.lexer.nextToken(this.reusableToken);switch (this.reusableToken.type) {case TOKEN:      this.addRecordValue();    break;case EORECORD:  this.addRecordValue();break;case EOF:if (this.reusableToken.isReady) {this.addRecordValue();}break;case INVALID:throw new IOException("(line " + this.getCurrentLineNumber() + ") invalid parse sequence");case COMMENT:if (sb == null) {sb=new StringBuilder();} else {sb.append(Constants.LF);}sb.append(this.reusableToken.content);this.reusableToken.type=TOKEN;break;}} while (this.reusableToken.type == TOKEN);if (!this.record.isEmpty()) {this.recordNumber++;final String comment=sb == null ? null : sb.toString();result=new CSVRecord(this.record.toArray(new String[this.record.size()]),this.headerMap,comment,this.recordNumber);}return result;}  }
class C{  public boolean equivalent(INode state){  return equals(state);}  }
class C{  private static void refundCLTVPaymentChannel(String txHash,String output,Coin feePerKb,boolean allowUnconfirmed){  try {    OutputSpec outputSpec;    Coin value;    try {      outputSpec=new OutputSpec(output);      value=outputSpec.value;    } catch (    WrongNetworkException e) {      System.err.println("Malformed output specification, address is for a different network.");      return;    }catch (    AddressFormatException e) {      System.err.println("Malformed output specification, could not parse as address.");      return;    }catch (    NumberFormatException e) {      System.err.println("Malformed output specification, could not parse as value.");      return;    }catch (    IllegalArgumentException e) {      System.err.println(e.getMessage());      return;    }    SendRequest req=outputSpec.isAddress() ? SendRequest.to(outputSpec.addr,value) : SendRequest.to(params,outputSpec.key,value);    if (feePerKb != null)     req.feePerKb=feePerKb;    Transaction lockTimeVerify=wallet.getTransaction(Sha256Hash.wrap(txHash));    if (lockTimeVerify == null) {      System.err.println("Couldn't find transaction with given hash");      return;    }    TransactionOutput lockTimeVerifyOutput=null;    for (    TransactionOutput out : lockTimeVerify.getOutputs()) {      if (out.getScriptPubKey().isSentToCLTVPaymentChannel()) {        lockTimeVerifyOutput=out;      }    }    if (lockTimeVerifyOutput == null) {      System.err.println("TX to spend wasn't sent to LockTimeVerify");      return;    }    req.tx.setLockTime(lockTimeVerifyOutput.getScriptPubKey().getCLTVPaymentChannelExpiry().longValue());    if (!value.equals(lockTimeVerifyOutput.getValue())) {      System.err.println("You must spend all the money in the input transaction");    }    if (allowUnconfirmed) {      wallet.allowSpendingUnconfirmedTransactions();    }    if (password != null) {      req.aesKey=passwordToKey(true);      if (req.aesKey == null)       return;    }    ECKey key=wallet.findKeyFromPubKey(lockTimeVerifyOutput.getScriptPubKey().getCLTVPaymentChannelSenderPubKey());    if (key == null) {      System.err.println("Don't own private key for pubkey");      return;    }    TransactionInput input=new TransactionInput(params,req.tx,new byte[]{},lockTimeVerifyOutput.getOutPointFor());    input.setSequenceNumber(0);    req.tx.addInput(input);    TransactionSignature sig=req.tx.calculateSignature(0,key,lockTimeVerifyOutput.getScriptPubKey(),Transaction.SigHash.SINGLE,false);    input.setScriptSig(ScriptBuilder.createCLTVPaymentChannelRefund(sig));    System.out.println(req.tx.getHashAsString());    if (options.has("offline")) {      wallet.commitTx(req.tx);      return;    }    setup();    peers.start();    peers.broadcastTransaction(req.tx).future().get();    List<Peer> peerList=peers.getConnectedPeers();    if (peerList.size() == 1)     peerList.get(0).ping().get();  } catch (  BlockStoreException e) {    throw new RuntimeException(e);  }catch (  KeyCrypterException e) {    throw new RuntimeException(e);  }catch (  InterruptedException e) {    throw new RuntimeException(e);  }catch (  ExecutionException e) {    throw new RuntimeException(e);  }}  }
class C{  public void updateBeforeNextTask(Schedule<TaxibusTask> schedule){  if (schedule.getStatus() != ScheduleStatus.STARTED) {    return;  }  double endTime=timer.getTimeOfDay();  TaxibusTask currentTask=schedule.getCurrentTask();  updateTimelineImpl(schedule,endTime);}  }
class C{  @Override public DriverTask resumeVolumeMirror(List<VolumeMirror> list){  return mirrorHelper.resumeVolumeMirror(list);}  }
class C{  DeqSpliterator(ArrayDeque<E> deq,int origin,int fence){  this.deq=deq;  this.index=origin;  this.fence=fence;}  }
class C{  public void limitTransAndScale(Matrix matrix,RectF content){  float[] vals=new float[9];  matrix.getValues(vals);  float curTransX=vals[Matrix.MTRANS_X];  float curScaleX=vals[Matrix.MSCALE_X];  float curTransY=vals[Matrix.MTRANS_Y];  float curScaleY=vals[Matrix.MSCALE_Y];  mScaleX=Math.max(mMinScaleX,curScaleX);  mScaleY=Math.max(mMinScaleY,curScaleY);  float width=0f;  float height=0f;  if (content != null) {    width=content.width();    height=content.height();  }  float maxTransX=-width * (mScaleX - 1f);  float newTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);  float maxTransY=height * (mScaleY - 1f);  float newTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);  vals[Matrix.MTRANS_X]=newTransX;  vals[Matrix.MSCALE_X]=mScaleX;  vals[Matrix.MTRANS_Y]=newTransY;  vals[Matrix.MSCALE_Y]=mScaleY;  matrix.setValues(vals);}  }
class C{  @Override public boolean hasRetractedBlade(int loc){  for (  Mounted m : getEquipment()) {    if ((m.getLocation() == loc) && !m.isDestroyed() && !m.isBreached()&& (m.getType() instanceof MiscType)&& m.getType().hasFlag(MiscType.F_CLUB)&& m.getType().hasSubType(MiscType.S_RETRACTABLE_BLADE)&& !m.curMode().equals("extended")) {      return true;    }  }  return false;}  }
class C{  public double filterFitness(double fitness){  return fitness;}  }
class C{  public boolean hasVideoData(Video v){  Path source=getVideoPath(v);  return Files.exists(source);}  }
class C{  @Override public void handlePatch(Operation patch){  State currentState=getState(patch);  State patchState=patch.getBody(State.class);  try {    validatePatch(currentState,patchState);    applyPatch(currentState,patchState);    validateState(currentState);    patch.complete();switch (currentState.taskInfo.stage) {case STARTED:      handleStartedStage(currentState,patchState);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :throw new IllegalStateException(String.format("Invalid stage %s",currentState.taskInfo.stage));}} catch (Throwable e) {ServiceUtils.logSevere(this,e);if (!OperationUtils.isCompleted(patch)) {patch.fail(e);}}}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  public static Map<String,String> createBasicAuthHeader(String username,String password,Map<String,String> headerMap){  if (headerMap == null)   headerMap=new HashMap<>();  String credentials=username + ":" + password;  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);  headerMap.put("Authorization","Basic " + base64EncodedCredentials);  return headerMap;}  }
class C{  public long defaultRequestTimeoutMillis(){  return defaultRequestTimeoutMillis;}  }
class C{  static public boolean isHttpCtlChar(char ch){  int c=(int)ch;  if (c >= 0 && c <= 31)   return true;  if (c == 127)   return true;  return false;}  }
class C{  public void onRightClick(View view){  final int currentPosition=mPager.getCurrentItem();  if (currentPosition != mPager.getAdapter().getCount() - 1) {    characterSelectedHelper(currentPosition + 1,true);  }}  }
class C{  @Override public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception {  correctlyInitialized();  int splitDim=-1;  double splitVal=Double.NEGATIVE_INFINITY;  double leftAttSum[]=new double[m_Instances.numAttributes()], rightAttSum[]=new double[m_Instances.numAttributes()], leftAttSqSum[]=new double[m_Instances.numAttributes()], rightAttSqSum[]=new double[m_Instances.numAttributes()], rightSqMean, leftSqMean, leftSqSum, rightSqSum, minSum=Double.POSITIVE_INFINITY, val;  for (int dim=0; dim < m_Instances.numAttributes(); dim++) {    if (node.m_NodeRanges[dim][WIDTH] == 0.0 || dim == m_Instances.classIndex()) {      continue;    }    quickSort(m_Instances,m_InstList,dim,node.m_Start,node.m_End);    for (int i=node.m_Start; i <= node.m_End; i++) {      for (int j=0; j < m_Instances.numAttributes(); j++) {        if (j == m_Instances.classIndex()) {          continue;        }        val=m_Instances.instance(m_InstList[i]).value(j);        if (m_NormalizeNodeWidth) {          if (Double.isNaN(universe[j][MIN]) || universe[j][MIN] == universe[j][MAX]) {            val=0.0;          } else {            val=((val - universe[j][MIN]) / universe[j][WIDTH]);          }        }        if (i == node.m_Start) {          leftAttSum[j]=rightAttSum[j]=leftAttSqSum[j]=rightAttSqSum[j]=0.0;        }        rightAttSum[j]+=val;        rightAttSqSum[j]+=val * val;      }    }    for (int i=node.m_Start; i <= node.m_End - 1; i++) {      Instance inst=m_Instances.instance(m_InstList[i]);      leftSqSum=rightSqSum=0.0;      for (int j=0; j < m_Instances.numAttributes(); j++) {        if (j == m_Instances.classIndex()) {          continue;        }        val=inst.value(j);        if (m_NormalizeNodeWidth) {          if (Double.isNaN(universe[j][MIN]) || universe[j][MIN] == universe[j][MAX]) {            val=0.0;          } else {            val=((val - universe[j][MIN]) / universe[j][WIDTH]);          }        }        leftAttSum[j]+=val;        rightAttSum[j]-=val;        leftAttSqSum[j]+=val * val;        rightAttSqSum[j]-=val * val;        leftSqMean=leftAttSum[j] / (i - node.m_Start + 1);        leftSqMean*=leftSqMean;        rightSqMean=rightAttSum[j] / (node.m_End - i);        rightSqMean*=rightSqMean;        leftSqSum+=leftAttSqSum[j] - (i - node.m_Start + 1) * leftSqMean;        rightSqSum+=rightAttSqSum[j] - (node.m_End - i) * rightSqMean;      }      if (minSum > (leftSqSum + rightSqSum)) {        minSum=leftSqSum + rightSqSum;        if (i < node.m_End) {          splitVal=(m_Instances.instance(m_InstList[i]).value(dim) + m_Instances.instance(m_InstList[i + 1]).value(dim)) / 2;        } else {          splitVal=m_Instances.instance(m_InstList[i]).value(dim);        }        splitDim=dim;      }    }  }  int rightStart=rearrangePoints(m_InstList,node.m_Start,node.m_End,splitDim,splitVal);  if (rightStart == node.m_Start || rightStart > node.m_End) {    System.out.println("node.m_Start: " + node.m_Start + " node.m_End: "+ node.m_End+ " splitDim: "+ splitDim+ " splitVal: "+ splitVal+ " node.min: "+ node.m_NodeRanges[splitDim][MIN]+ " node.max: "+ node.m_NodeRanges[splitDim][MAX]+ " node.numInstances: "+ node.numInstances());    if (rightStart == node.m_Start) {      throw new Exception("Left child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "KMeanInspiredMethod splitting method. Please "+ "check code.");    } else {      throw new Exception("Right child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "KMeansInspiredMethod splitting method. Please "+ "check code.");    }  }  node.m_SplitDim=splitDim;  node.m_SplitValue=splitVal;  node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,rightStart - 1,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,rightStart - 1));  node.m_Right=new KDTreeNode(numNodesCreated + 2,rightStart,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,rightStart,node.m_End));}  }
class C{  private void updateIdleExpireTime(long now){  _threadIdleExpireTime.set(now + _idleTimeout);}  }
class C{  private void printValidateSchedule(){  TransitScheduleValidator.ValidationResult validationResult=TransitScheduleValidator.validateAll(schedule,network);  if (validationResult.isValid()) {    log.info("Schedule appears valid!");  } else {    log.warn("Schedule is NOT valid!");  }  if (validationResult.getErrors().size() > 0) {    log.info("Validation errors:");    for (    String e : validationResult.getErrors()) {      log.info(e);    }  }  if (validationResult.getWarnings().size() > 0) {    log.info("Validation warnings:");    for (    String w : validationResult.getWarnings()) {      log.info(w);    }  }}  }
class C{  public boolean isCancelled() throws IOException, BuilderException {  return future.isCancelled();}  }
class C{  protected void checkStatistics(double[][] points,int D){  for (int i=0; i < D; i++) {    DescriptiveStatistics statistics=new DescriptiveStatistics();    for (int j=0; j < points.length; j++) {      statistics.addValue(points[j][i]);    }    testUniformDistribution(0.0,1.0,statistics);  }}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  public void doProperties(final IndicatorSeries series){  try {    this.clearStatusBarMessage();    String indicatorName=series.getType().substring(0,series.getType().indexOf("Series"));    CodeType codeType=m_tradePersistentModel.findCodeTypeByNameType(indicatorName,CodeType.IndicatorParameters);    if (null == codeType) {      this.setStatusBarMessage("There are no properties for this Indicator ...",BasePanel.INFORMATION);    } else {      CodeAttributePanel codeAttributePanel=new CodeAttributePanel(codeType,series.getCodeValues());      if (null != codeAttributePanel) {        TextDialog dialog=new TextDialog(this.getFrame(),"Indicator Properties",true,codeAttributePanel);        dialog.setLocationRelativeTo(this);        dialog.setVisible(true);        if (!dialog.getCancel()) {          for (          CodeValue value : codeAttributePanel.getCodeValues()) {            series.setDirty(true);            if (null == value.getIndicatorSeries())             value.setIndicatorSeries(series);          }        }      }    }  } catch (  Exception ex) {    setErrorMessage("Error getting Indicator properties.",ex.getMessage(),ex);  } finally {    this.getFrame().setCursor(Cursor.getDefaultCursor());  }}  }
class C{  public static boolean isFileWritable(String fileName){  final File file=new File(fileName);  return file.exists() && file.canWrite();}  }
class C{  public VolumeListImpl(){  init(Defs.NULL_ID);}  }
class C{  public DataLengthException(String message){  super(message);}  }
class C{  private void detachVerticalOffScreenChildren(boolean toTop){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toTop) {    final int galleryTop=getPaddingTop();    for (int i=0; i < numChildren; i++) {      int n=i;      final View child=getChildAt(n);      if (child.getBottom() >= galleryTop) {        break;      } else {        count++;        mRecycler.put(firstPosition + n,child);      }    }  } else {    final int galleryBottom=getHeight() - getPaddingBottom();    for (int i=numChildren - 1; i >= 0; i--) {      int n=i;      final View child=getChildAt(n);      if (child.getTop() <= galleryBottom) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }  }  detachViewsFromParent(start,count);  if (toTop) {    mFirstPosition+=count;  }}  }
class C{  private boolean isSpecial(char value){  return value == '_' || value == '-' || value == ':';}  }
class C{  public void newFunction(EditorState editorState,String name){  newFunction(editorState,name,0);}  }
class C{  public boolean equals(Object o){  if (o == null || !(o instanceof ZipShort)) {    return false;  }  return value == ((ZipShort)o).getValue();}  }
class C{  public JLBHOptions runs(int runs){  this.runs=runs;  return this;}  }
class C{  private MPayment createCounterDoc(){  if (getRef_Payment_ID() != 0)   return null;  MOrg org=MOrg.get(getCtx(),getAD_Org_ID());  int counterC_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());  if (counterC_BPartner_ID == 0)   return null;  MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());  int counterAD_Org_ID=bp.getAD_OrgBP_ID_Int();  if (counterAD_Org_ID == 0)   return null;  MBPartner counterBP=new MBPartner(getCtx(),counterC_BPartner_ID,get_TrxName());  log.info("Counter BP=" + counterBP.getName());  int C_DocTypeTarget_ID=0;  MDocTypeCounter counterDT=MDocTypeCounter.getCounterDocType(getCtx(),getC_DocType_ID());  if (counterDT != null) {    log.fine(counterDT.toString());    if (!counterDT.isCreateCounter() || !counterDT.isValid())     return null;    C_DocTypeTarget_ID=counterDT.getCounter_C_DocType_ID();  } else {    C_DocTypeTarget_ID=MDocTypeCounter.getCounterDocType_ID(getCtx(),getC_DocType_ID());    log.fine("Indirect C_DocTypeTarget_ID=" + C_DocTypeTarget_ID);    if (C_DocTypeTarget_ID <= 0)     return null;  }  MPayment counter=new MPayment(getCtx(),0,get_TrxName());  counter.setAD_Org_ID(counterAD_Org_ID);  counter.setC_BPartner_ID(counterBP.getC_BPartner_ID());  counter.setIsReceipt(!isReceipt());  counter.setC_DocType_ID(C_DocTypeTarget_ID);  counter.setTrxType(getTrxType());  counter.setTenderType(getTenderType());  counter.setPayAmt(getPayAmt());  counter.setDiscountAmt(getDiscountAmt());  counter.setTaxAmt(getTaxAmt());  counter.setWriteOffAmt(getWriteOffAmt());  counter.setIsOverUnderPayment(isOverUnderPayment());  counter.setOverUnderAmt(getOverUnderAmt());  counter.setC_Currency_ID(getC_Currency_ID());  counter.setC_ConversionType_ID(getC_ConversionType_ID());  counter.setDateTrx(getDateTrx());  counter.setDateAcct(getDateAcct());  counter.setRef_Payment_ID(getC_Payment_ID());  String sql="SELECT C_BankAccount_ID FROM C_BankAccount " + "WHERE C_Currency_ID=? AND AD_Org_ID IN (0,?) AND IsActive='Y' " + "ORDER BY IsDefault DESC";  int C_BankAccount_ID=DB.getSQLValue(get_TrxName(),sql,getC_Currency_ID(),counterAD_Org_ID);  counter.setC_BankAccount_ID(C_BankAccount_ID);  counter.setC_Activity_ID(getC_Activity_ID());  counter.setC_Campaign_ID(getC_Campaign_ID());  counter.setC_Project_ID(getC_Project_ID());  counter.setUser1_ID(getUser1_ID());  counter.setUser2_ID(getUser2_ID());  counter.saveEx(get_TrxName());  log.fine(counter.toString());  setRef_Payment_ID(counter.getC_Payment_ID());  if (counterDT != null) {    if (counterDT.getDocAction() != null) {      counter.setDocAction(counterDT.getDocAction());      counter.processIt(counterDT.getDocAction());      counter.saveEx(get_TrxName());    }  }  return counter;}  }
class C{  private void deleteSelectedForms(){  if (mBackgroundTasks.mDeleteFormsTask == null) {    mBackgroundTasks.mDeleteFormsTask=new DeleteFormsTask();    mBackgroundTasks.mDeleteFormsTask.setContentResolver(getContentResolver());    mBackgroundTasks.mDeleteFormsTask.setDeleteListener(this);    mBackgroundTasks.mDeleteFormsTask.execute(mSelected.toArray(new Long[mSelected.size()]));  } else {    Toast.makeText(this,getString(R.string.file_delete_in_progress),Toast.LENGTH_LONG).show();  }}  }
class C{  public boolean restart(final String configId,final Password password) throws IOException, ServletException {  if (!singelton.can(CFMLEngine.CAN_RESTART_CONTEXT,password))   throw new IOException("access denied to restart CFML Context (configId:" + configId + ")");  return _restart();}  }
class C{  public static void disposeColors(){  for (Iterator<Color> iter=colorMap.values().iterator(); iter.hasNext(); ) {    iter.next().dispose();  }  colorMap.clear();}  }
class C{  private void groupingByDepartment(){  Map<String,List<Employee>> deptEmployees=employees.stream().collect(groupingBy(null));  System.out.println(deptEmployees);}  }
class C{  public Object convertFieldValue(ModelField modelField,Object value,Delegator delegator,Map<String,? extends Object> context){  ModelFieldTypeReader modelFieldTypeReader=delegator.getModelFieldTypeReader(this);  return this.convertFieldValue(modelField,value,modelFieldTypeReader,context);}  }
class C{  public RowSetWarning(String reason){  super(reason);}  }
class C{  public U decorate(){  return decorate(LemonUtil.getUser());}  }
class C{  @Override protected boolean hasOverflow(N node){  if (node.isLeaf()) {    return node.getNumEntries() == leafCapacity;  } else {    return node.getNumEntries() == dirCapacity;  }}  }
class C{  protected final long capacity(){  return capacity;}  }
class C{  public static boolean isPackageDefault(int flags){  return (flags & (AccPublic | AccPrivate | AccProtected)) == 0;}  }
class C{  private void handleMobileCellScroll(){  mIsMobileScrolling=handleMobileCellScroll(mHoverCellCurrentBounds);}  }
class C{  public static void closeQuietly(FileDescriptor fd){  try {    IoUtils.close(fd);  } catch (  IOException ignored) {  }}  }
class C{  public boolean accept(File file){  if (file.isDirectory())   return true;  String ext=file.getName();  int pos=ext.lastIndexOf('.');  if (pos == -1)   return false;  ext=ext.substring(pos + 1);  if (m_extension.equalsIgnoreCase(ext))   return true;  return false;}  }
class C{  public XMLParser(final Class classToBeBound,final String schema) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(classToBeBound);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schema));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schema));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + classToBeBound,e);  }}  }
class C{  public void append(StringBuffer buffer,String fieldName,int[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public boolean isAcceptVisa(){  Object oo=get_Value(COLUMNNAME_AcceptVisa);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void approveUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionApprove,userId);}  }
class C{  @Nullable @SuppressWarnings("unchecked") public static Map<String,?> read(HttpServletRequest req) throws IOException {  if (!"POST".equals(req.getMethod()) && !"PUT".equals(req.getMethod())) {    logger.warning("JSON request payload only allowed for POST/PUT");    return null;  }  if (!JSON_UTF_8.is(MediaType.parse(req.getContentType()))) {    logger.warningfmt("Invalid JSON Content-Type: %s",req.getContentType());    return null;  }  try (Reader jsonReader=req.getReader()){    try {      return checkNotNull((Map<String,?>)JSONValue.parseWithException(jsonReader));    } catch (    ParseException|NullPointerException|ClassCastException e) {      logger.warning(e,"Malformed JSON");      return null;    }  } }  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void unit(){  xo=0;  xx=1;  xy=0;  xz=0;  yo=0;  yx=0;  yy=1;  yz=0;  zo=0;  zx=0;  zy=0;  zz=1;}  }
class C{  public static void put(JAMonListener jamonListener){  map.put(jamonListener.getName(),jamonListener);}  }
class C{  public boolean isInTransit(){  Object oo=get_Value(COLUMNNAME_IsInTransit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.438 -0500",hash_original_method="5F803054AD541DA3DFDDE2CF3FE59841",hash_generated_method="C205F7B0BD653321927F39C3C6CDDBD5") public void writeUint24(long n){  check(3);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  @Override public void onChangeTheme(Theme theme){  mColorModeButtons.get(theme).setChecked(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetprevioussiblingnull.class,args);}  }
class C{  public int onGet(Operation operation){  return ResponseCodes.OBEX_HTTP_NOT_IMPLEMENTED;}  }
class C{  public static <T>boolean equal(List<T> first,int from,int last,List<T> second,int secondFrom){  while (from < last) {    if (!first.get(from).equals(second.get(secondFrom)))     return false;    from++;    secondFrom++;  }  return true;}  }
class C{  public BigDecimal calculatePrice(BigDecimal Qty,BigDecimal Price,int M_Product_ID,int M_Product_Category_ID,BigDecimal BPartnerFlatDiscount){  log.fine("Price=" + Price + ",Qty="+ Qty+ ",M_Product_ID="+ M_Product_ID+ ",M_Product_Category_ID="+ M_Product_Category_ID+ ",BPartnerFlatDiscount="+ BPartnerFlatDiscount.doubleValue());  if (Price == null || Env.ZERO.compareTo(Price) == 0)   return Price;  BigDecimal discount=calculateDiscount(Qty,Price,M_Product_ID,M_Product_Category_ID,BPartnerFlatDiscount);  log.fine("Discount=" + discount.doubleValue());  if (discount == null || discount.signum() == 0)   return Price;  BigDecimal onehundred=new BigDecimal(100);  BigDecimal multiplier=(onehundred).subtract(discount);  multiplier=multiplier.divide(onehundred,6,BigDecimal.ROUND_HALF_UP);  BigDecimal newPrice=Price.multiply(multiplier);  log.fine("=>" + newPrice);  return newPrice;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VALUES:return isSetValues();case RESPONSE_TO:return isSetResponseTo();}throw new IllegalStateException();}  }
class C{  public boolean isSelected(Segment segment){  return selectedSegments.contains(segment) || indirectSelections.containsValue(segment);}  }
class C{  public static URI createRemainingURI(URI originalURI,Map<String,String> params) throws URISyntaxException {  String s=createQueryString(params);  if (s.length() == 0) {    s=null;  }  return createURIWithQuery(originalURI,s);}  }
class C{  public static Set<ByteString> keys(ByteString namespace){  BaggageImpl impl=Baggage.current.get();  return impl == null ? Collections.<ByteString>emptySet() : impl.keys(namespace);}  }
class C{  private boolean areMultipleLinesSelected(ITextViewer viewer){  if (viewer == null)   return false;  Point s=viewer.getSelectedRange();  if (s.y == 0)   return false;  try {    IDocument document=viewer.getDocument();    int startLine=document.getLineOfOffset(s.x);    int endLine=document.getLineOfOffset(s.x + s.y);    IRegion line=document.getLineInformation(startLine);    return startLine != endLine || (s.x == line.getOffset() && s.y == line.getLength());  } catch (  BadLocationException x) {    return false;  }}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  @Override public InputStream locate(final String uri) throws IOException {  validState(standaloneContext != null,"Locator was not initialized properly. StandaloneContext missing.");  Exception lastException=null;  final String[] contextFolders=standaloneContext.getContextFolders();  for (  final String contextFolder : contextFolders) {    try {      return locateStreamWithContextFolder(uri,contextFolder);    } catch (    final IOException e) {      lastException=e;      LOG.debug("Could not locate: {} using contextFolder: {}",uri,contextFolder);    }  }  final String exceptionMessage=String.format("No valid resource '%s' found inside any of contextFolders: %s",uri,Arrays.toString(standaloneContext.getContextFolders()));  throw new IOException(exceptionMessage,lastException);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private byte[] generateDerivedKey(int bytesNeeded){  byte[] buf=new byte[digest.getDigestSize()];  byte[] key=new byte[bytesNeeded];  int offset=0;  for (; ; ) {    digest.update(password,0,password.length);    digest.update(salt,0,salt.length);    digest.doFinal(buf,0);    int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded;    System.arraycopy(buf,0,key,offset,len);    offset+=len;    bytesNeeded-=len;    if (bytesNeeded == 0) {      break;    }    digest.reset();    digest.update(buf,0,buf.length);  }  return key;}  }
class C{  public static void assertNotNull(Object object,String message){  if (object == null) {    throw new NullPointerException("assertion failed:" + message);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return Boolean.valueOf(a != null && a.isWatched());}  }
class C{  public void skippedEntity(StylesheetHandler handler,String name) throws org.xml.sax.SAXException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.227 -0500",hash_original_method="AE89C08F08BB3F2E2361D882A86E08E6",hash_generated_method="AC9717801F6771F94DD04A5A3483AC34") protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.size() - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.880 -0400",hash_original_method="797C9DAFF8FEBFCA67D357CAB83D21E2",hash_generated_method="8E0E2496963D4E8D95078A01B73CF783") public static IOFileFilter ageFileFilter(File cutoffReference){  return new AgeFileFilter(cutoffReference);}  }
class C{  private static synchronized String makeDateString(Date date){  return sdfDefault.format(date);}  }
class C{  public static <A>SetTSeq<A> of(final AnyMSeq<? extends Set<A>> monads){  return new SetTSeq<>(monads);}  }
class C{  public void initComponents(){  setTitle(Bundle.getMessage("WindowTitle"));  Container contentPane=getContentPane();  contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.Y_AXIS));  contentPane.add(initAddressPanel());  contentPane.add(initNotesPanel());  contentPane.add(initButtonPanel());  pack();}  }
class C{  protected void restoreState(){  Node[] tmp=storedNodes;  storedNodes=nodes;  nodes=tmp;  root=nodes[storedRootNumber];}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  private static int prefixLen(String o1,String o2){  final int l1=o1.length(), l2=o2.length(), l=l1 < l2 ? l1 : l2;  int prefix=0;  while (prefix < l && (o1.charAt(prefix) == o2.charAt(prefix))) {    prefix++;  }  return prefix;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.801 -0500",hash_original_method="1F2F8066B3FF3FBE25C7998F0003547E",hash_generated_method="DF38118D654870147DE2EFB32742E376") public void freeEntry(BasicPoolEntry entry){  if (numEntries < 1) {    throw new IllegalStateException("No entry created for this pool. " + route);  }  if (numEntries <= freeEntries.size()) {    throw new IllegalStateException("No entry allocated from this pool. " + route);  }  freeEntries.add(entry);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.874 -0500",hash_original_method="8D2FFBDF3C47E1B46E6758446155167E",hash_generated_method="D935931994EB884B3A0814B2E72A19B2") public Reader retrieveHeader(String header,int articleNumber) throws IOException {  return __retrieveHeader(header,Integer.toString(articleNumber));}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os){  os.buffer.put(ParameterWriter.QUOTE);  os.writeUnsafe(dateToByte());  ParameterWriter.formatMicrosecondsUnsafe(os,ts.getNanos() / 1000,fractionalSeconds);  os.buffer.put(ParameterWriter.QUOTE);}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  private void addInner(final ITextureRegion pTextureRegion,final float pX1,final float pY1,final float pX2,final float pY2,final float pRed,final float pGreen,final float pBlue,final float pAlpha){  this.mSpriteBatchVertexBufferObject.addWithPackedColor(pTextureRegion,pX1,pY1,pX2,pY2,ColorUtils.convertRGBAToABGRPackedFloat(pRed,pGreen,pBlue,pAlpha));}  }
class C{  public static DetachedBaggage merge(DetachedBaggage a,DetachedBaggage b){  if (a == null || a.impl == null) {    return transferContents(b);  } else   if (b == null || b.impl == null) {    return transferContents(a);  } else {    BaggageImpl impl=a.impl;    impl.merge(b.impl);    a.impl=null;    b.impl=null;    return wrap(impl);  }}  }
class C{  public Observable<ReactiveSensorEvent> observeSensor(int sensorType){  return observeSensor(sensorType,SensorManager.SENSOR_DELAY_NORMAL);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  private CCache<String,String> initMsg(String AD_Language){  CCache<String,String> msg=new CCache<String,String>("AD_Message",MAP_SIZE,0);  if (!DB.isConnected()) {    s_log.log(Level.SEVERE,"No DB Connection");    return null;  }  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    if (AD_Language == null || AD_Language.length() == 0 || Env.isBaseLanguage(AD_Language,"AD_Language"))     pstmt=DB.prepareStatement("SELECT Value, MsgText, MsgTip FROM AD_Message",null); else {      pstmt=DB.prepareStatement("SELECT m.Value, t.MsgText, t.MsgTip " + "FROM AD_Message_Trl t, AD_Message m " + "WHERE m.AD_Message_ID=t.AD_Message_ID"+ " AND t.AD_Language=?",null);      pstmt.setString(1,AD_Language);    }    rs=pstmt.executeQuery();    while (rs.next()) {      String AD_Message=rs.getString(1);      StringBuffer MsgText=new StringBuffer();      MsgText.append(rs.getString(2));      String MsgTip=rs.getString(3);      if (MsgTip != null)       MsgText.append(" ").append(SEPARATOR).append(MsgTip);      msg.put(AD_Message,MsgText.toString());    }  } catch (  SQLException e) {    s_log.log(Level.SEVERE,"initMsg",e);    return null;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (msg.size() < 100) {    s_log.log(Level.SEVERE,"Too few (" + msg.size() + ") Records found for "+ AD_Language);    return null;  }  s_log.info("Records=" + msg.size() + " - "+ AD_Language);  return msg;}  }
class C{  public UnsupportedEncodingException(){}  }
class C{  private void filterCoveredNodeToPoint(Node n){  Coordinate coord=n.getCoordinate();  if (!op.isCoveredByLA(coord)) {    Point pt=geometryFactory.createPoint(coord);    resultPointList.add(pt);  }}  }
class C{  void determineModuleRelationships(ModulePointer currentModule,ModulePointer parent){  ModuleRelatives currentRelatives=new ModuleRelatives(this,currentModule);  currentModule.putRelatives(currentRelatives);  currentRelatives.outerModule=parent;  TreeNode extendNode=currentModule.getExtendsDecl();  for (int i=1; i < extendNode.heirs().length; i+=2) {    String extendedModuleName=extendNode.heirs()[i].getImage();    currentRelatives.directlyExtendedModuleNames.addElement(extendedModuleName);  }  calculateContextWithinParseUnit(currentModule);  TreeNode body=currentModule.getBody();  for (int i=0; i < body.heirs().length; i++) {    TreeNode def=body.heirs()[i];    if (def.getImage().equals("N_Module")) {      ModulePointer innerModule=new ModulePointer(spec,this,def);      currentRelatives.directInnerModules.addElement(innerModule);      determineModuleRelationships(innerModule,currentModule);    } else {      this.getInstances(def,currentRelatives);    }    ;  }}  }
class C{  protected final void copyNS(final int nodeID,SerializationHandler handler,boolean inScope) throws SAXException {  if (m_namespaceDeclSetElements != null && m_namespaceDeclSetElements.size() == 1 && m_namespaceDeclSets != null && ((SuballocatedIntVector)m_namespaceDeclSets.elementAt(0)).size() == 1)   return;  SuballocatedIntVector nsContext=null;  int nextNSNode;  if (inScope) {    nsContext=findNamespaceContext(nodeID);    if (nsContext == null || nsContext.size() < 1)     return; else     nextNSNode=makeNodeIdentity(nsContext.elementAt(0));  } else   nextNSNode=getNextNamespaceNode2(nodeID);  int nsIndex=1;  while (nextNSNode != DTM.NULL) {    int eType=_exptype2(nextNSNode);    String nodeName=m_extendedTypes[eType].getLocalName();    int dataIndex=m_dataOrQName.elementAt(nextNSNode);    if (dataIndex < 0) {      dataIndex=-dataIndex;      dataIndex=m_data.elementAt(dataIndex + 1);    }    String nodeValue=(String)m_values.elementAt(dataIndex);    handler.namespaceAfterStartElement(nodeName,nodeValue);    if (inScope) {      if (nsIndex < nsContext.size()) {        nextNSNode=makeNodeIdentity(nsContext.elementAt(nsIndex));        nsIndex++;      } else       return;    } else     nextNSNode=getNextNamespaceNode2(nextNSNode);  }}  }
class C{  public LEFT_OUTER_JOIN LEFT_OUTER_JOIN(String tableToJoin){  return new LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public boolean showDialog(){  setLocationRelativeTo(MainWindow.getActiveInstance());  setVisible(true);  return continueQueue;}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public LayoutTool(GraphModel layoutGraph,EdgeMatcher<String> edgeMatcher){  super(layoutGraph,edgeMatcher);}  }
class C{  public DeltaCollectionPage(final BaseDeltaCollectionResponse response,final IDeltaRequestBuilder builder){  super(response,builder);}  }
class C{  public void stderrShouldMatch(String pattern){  Matcher matcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stderr);  if (!matcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' missing from stderr \n");  }}  }
class C{  void freeRefCountInfo(Long address){  if (!trackReferenceCounts())   return;  List<RefCountChangeInfo> freedInfo=stacktraces.remove(address);  if (freedInfo == LOCKED) {    MemoryAllocatorImpl.debugLog("freed after orphan detected for @" + Long.toHexString(address),true);  } else   if (trackFreedReferenceCounts()) {    if (freedInfo != null) {      freedStacktraces.put(address,freedInfo);    } else {      freedStacktraces.remove(address);    }  }}  }
class C{  protected void _internalInit(GemFireCacheImpl theCache) throws CacheException {  if (isClosed()) {    return;  }  try {    this.c=theCache;    this.dynamicRegionList=theCache.getRegion(dynamicRegionListName);    final boolean isClient=this.config.getPoolName() != null;    if (this.dynamicRegionList == null) {      InternalRegionArguments ira=new InternalRegionArguments().setDestroyLockFlag(true).setInternalRegion(true).setSnapshotInputStream(null).setImageTarget(null);      AttributesFactory af=new AttributesFactory();      if (this.config.getPersistBackup()) {        af.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);        af.setDiskWriteAttributes(new DiskWriteAttributesFactory().create());        if (this.config.getDiskDir() != null) {          af.setDiskDirs(new File[]{this.config.getDiskDir()});        }      }      if (isClient) {        af.setScope(Scope.LOCAL);        af.setDataPolicy(DataPolicy.NORMAL);        af.setStatisticsEnabled(true);        String cpName=this.config.getPoolName();        if (cpName != null) {          Pool cp=PoolManager.find(cpName);          if (cp == null) {            throw new IllegalStateException("Invalid pool name specified. This pool is not registered with the cache: " + cpName);          } else {            if (!cp.getSubscriptionEnabled()) {              throw new IllegalStateException("The client pool of a DynamicRegionFactory must be configured with queue-enabled set to true.");            }            af.setPoolName(cpName);          }        }        ira.setInternalMetaRegion(new LocalMetaRegion(af.create(),ira));      } else {        af.setScope(Scope.DISTRIBUTED_ACK);        if (!this.config.getPersistBackup()) {          af.setDataPolicy(DataPolicy.REPLICATE);        }        for (        GatewaySender gs : c.getGatewaySenders()) {          if (!gs.isParallel())           af.addGatewaySenderId(gs.getId());        }        ira.setInternalMetaRegion(new DistributedMetaRegion(af.create()));      }      try {        dynamicRegionList=theCache.createVMRegion(dynamicRegionListName,af.create(),ira);      } catch (      IOException e) {        InternalGemFireError assErr=new InternalGemFireError(LocalizedStrings.DynamicRegionFactory_UNEXPECTED_EXCEPTION.toLocalizedString());        assErr.initCause(e);        throw assErr;      }catch (      ClassNotFoundException e) {        InternalGemFireError assErr=new InternalGemFireError(LocalizedStrings.DynamicRegionFactory_UNEXPECTED_EXCEPTION.toLocalizedString());        assErr.initCause(e);        throw assErr;      }      if (isClient) {        dynamicRegionList.registerInterest("ALL_KEYS");      }      if (theCache.getLoggerI18n().fineEnabled()) {        theCache.getLoggerI18n().fine("Created dynamic region: " + dynamicRegionList);      }    } else {      if (theCache.getLoggerI18n().fineEnabled()) {        theCache.getLoggerI18n().fine("Retrieved dynamic region: " + dynamicRegionList);      }    }    createDefinedDynamicRegions();  } catch (  CacheException e) {    theCache.getLoggerI18n().warning(LocalizedStrings.DynamicRegionFactory_ERROR_INITIALIZING_DYNAMICREGIONFACTORY,e);    throw e;  }}  }
class C{  @Override public synchronized void beforeFirst() throws SQLException {  super.beforeFirst();}  }
class C{  public boolean hasId(){  return hasExtension(Id.class);}  }
class C{  public void testOtherRealmsNoAuth() throws Exception {  startServer(47501);  fetchPage("/basic.jsp",200);  fetchPage("/basic.jsp?case=1",401);  fetchPage("/basic.jsp?case=2",401);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  @Override public synchronized void stopAll(){  HashMap<String,ConfModule> agents;  agents=status.getModulesMap();  final Iterator<String> it=agents.keySet().iterator();  if (Cfg.DEBUG) {    Check.log(TAG + " (stopAll)");  }  while (it.hasNext()) {    final String key=it.next();    stop(key);  }  if (Cfg.DEBUG) {    Check.ensures(threads.size() == 0,"Non empty threads");  }  instances.clear();  if (Cfg.DEBUG) {    Check.ensures(instances.size() == 0,"Non empty running");  }  threads.clear();}  }
class C{  public Object clone(){  Object o;  try {    o=super.clone();  } catch (  CloneNotSupportedException cnse) {    o=null;  }  return o;}  }
class C{  public void undoUpdate() throws SQLException {  moveToCurrentRow();  undoDelete();  undoInsert();}  }
class C{  public Scanner(Path source,String charsetName) throws IOException {  this(Objects.requireNonNull(source),toCharset(charsetName));}  }
class C{  public static String nativeSql(String sql,boolean noBackslashEscapes) throws SQLException {  if (sql.indexOf('{') == -1) {    return sql;  }  StringBuilder escapeSequenceBuf=new StringBuilder();  StringBuilder sqlBuffer=new StringBuilder();  char[] charArray=sql.toCharArray();  char lastChar=0;  boolean inQuote=false;  char quoteChar=0;  boolean inComment=false;  boolean isSlashSlashComment=false;  int inEscapeSeq=0;  for (int i=0; i < charArray.length; i++) {    char car=charArray[i];    if (lastChar == '\\' && !noBackslashEscapes) {      sqlBuffer.append(car);      continue;    }switch (car) {case '\'':case '"':      if (!inComment) {        if (inQuote) {          if (quoteChar == car) {            inQuote=false;          }        } else {          inQuote=true;          quoteChar=car;        }      }    break;case '*':  if (!inQuote && !inComment && lastChar == '/') {    inComment=true;    isSlashSlashComment=false;  }break;case '/':case '-':if (!inQuote) {if (inComment) {  if (lastChar == '*' && !isSlashSlashComment) {    inComment=false;  } else   if (lastChar == car && isSlashSlashComment) {    inComment=false;  }} else {  if (lastChar == car) {    inComment=true;    isSlashSlashComment=true;  } else   if (lastChar == '*') {    inComment=true;    isSlashSlashComment=false;  }}}break;case 'S':if (!inQuote && !inComment && inEscapeSeq > 0 && i + 4 < charArray.length && charArray[i + 1] == 'Q' && charArray[i + 2] == 'L' && charArray[i + 3] == 'L' && charArray[i + 4] == '_') {if (i + 8 < charArray.length && charArray[i + 5] == 'T' && charArray[i + 6] == 'S' && charArray[i + 7] == 'I' && charArray[i + 8] == '_') {i+=8;continue;}i+=4;continue;}break;case '\n':if (inComment && isSlashSlashComment) {inComment=false;}break;case '{':if (!inQuote && !inComment) {inEscapeSeq++;}break;case '}':if (!inQuote && !inComment) {inEscapeSeq--;if (inEscapeSeq == 0) {escapeSequenceBuf.append(car);sqlBuffer.append(resolveEscapes(escapeSequenceBuf.toString(),noBackslashEscapes));escapeSequenceBuf.setLength(0);continue;}}break;default :break;}lastChar=car;if (inEscapeSeq > 0) {escapeSequenceBuf.append(car);} else {sqlBuffer.append(car);}}if (inEscapeSeq > 0) {throw new SQLException("Invalid escape sequence , missing closing '}' character in '" + sqlBuffer);}return sqlBuffer.toString();}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public GifTextView(Context context,AttributeSet attrs,int defStyle,int defStyleRes){  super(context,attrs,defStyle,defStyleRes);  init(attrs,defStyle,defStyleRes);}  }
class C{  public final void incrementMessageFailedCounter(int count){  m_instanceCountFailed+=count;}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomRight,ResultPoint bottomLeft) throws NotFoundException {  GridSampler sampler=GridSampler.getInstance();  int dimension=getDimension();  float low=dimension / 2.0f - nbCenterLayers;  float high=dimension / 2.0f + nbCenterLayers;  return sampler.sampleGrid(image,dimension,dimension,low,low,high,low,high,high,low,high,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  public void shiftToEnd(int j){  shift(j,size() - 1);}  }
class C{  public void addListener(ConfigListener listener){synchronized (this.listeners) {    this.listeners.add(listener);  }}  }
class C{  void readMeta(){  final int check=buffer.getInt();  if (check != MAGIC) {    throw new AbortException("File does not start with expected magic.");  }  final int nummeta=buffer.getInt();  assert (nummeta > 0) : "Empty bundle?";  meta=new BundleMeta(nummeta);  sers=new ByteBufferSerializer<?>[nummeta];  data=new Object[nummeta];  for (int i=0; i < nummeta; i++) {    try {      @SuppressWarnings("unchecked") SimpleTypeInformation<? extends Object> type=(SimpleTypeInformation<? extends Object>)TypeInformationSerializer.STATIC.fromByteBuffer(buffer);      sers[i]=type.getSerializer();      if (i == 0 && DBID.class.isAssignableFrom(type.getRestrictionClass())) {        hasids=true;      } else {        meta.add(type);      }    } catch (    UnsupportedOperationException e) {      throw new AbortException("Deserialization failed: " + e.getMessage(),e);    }catch (    IOException e) {      throw new AbortException("IO error",e);    }  }}  }
class C{  public JLabel(String text,Icon icon,int horizontalAlignment){  setText(text);  setIcon(icon);  setHorizontalAlignment(horizontalAlignment);  updateUI();  setAlignmentX(LEFT_ALIGNMENT);}  }
class C{  public static Timestamp addBackward(GenericValue techDataCalendar,Timestamp dateFrom,long amount){  Timestamp dateTo=(Timestamp)dateFrom.clone();  long previousCapacity=capacityRemainingBackward(techDataCalendar,dateFrom);  if (amount <= previousCapacity) {    dateTo.setTime(dateTo.getTime() - amount);    amount=0;  } else   amount-=previousCapacity;  Map<String,Object> result=FastMap.newInstance();  while (amount > 0) {    result=endPreviousDay(techDataCalendar,dateTo);    dateTo=(Timestamp)result.get("dateTo");    previousCapacity=((Double)result.get("previousCapacity")).longValue();    if (amount <= previousCapacity) {      dateTo.setTime(dateTo.getTime() - amount);      amount=0;    } else     amount-=previousCapacity;  }  return dateTo;}  }
class C{  public final int readUnsignedShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (ch1 << 8) + (ch2 << 0);}  }
class C{  private void handleDisconnectRequest() throws IOException {  int length;  int code=ResponseCodes.OBEX_HTTP_OK;  int totalLength=3;  byte[] head=null;  int bytesReceived;  HeaderSet request=new HeaderSet();  HeaderSet reply=new HeaderSet();  length=mInput.read();  length=(length << 8) + mInput.read();  if (length > ObexHelper.MAX_PACKET_SIZE_INT) {    code=ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE;    totalLength=3;  } else {    if (length > 3) {      byte[] headers=new byte[length - 3];      bytesReceived=mInput.read(headers);      while (bytesReceived != headers.length) {        bytesReceived+=mInput.read(headers,bytesReceived,headers.length - bytesReceived);      }      ObexHelper.updateHeaderSet(request,headers);    }    if (mListener.getConnectionId() != -1 && request.mConnectionID != null) {      mListener.setConnectionId(ObexHelper.convertToLong(request.mConnectionID));    } else {      mListener.setConnectionId(1);    }    if (request.mAuthResp != null) {      if (!handleAuthResp(request.mAuthResp)) {        code=ResponseCodes.OBEX_HTTP_UNAUTHORIZED;        mListener.onAuthenticationFailure(ObexHelper.getTagValue((byte)0x01,request.mAuthResp));      }      request.mAuthResp=null;    }    if (code != ResponseCodes.OBEX_HTTP_UNAUTHORIZED) {      if (request.mAuthChall != null) {        handleAuthChall(request);        request.mAuthChall=null;      }      try {        mListener.onDisconnect(request,reply);      } catch (      Exception e) {        sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);        return;      }      long id=mListener.getConnectionId();      if (id == -1) {        reply.mConnectionID=null;      } else {        reply.mConnectionID=ObexHelper.convertToByteArray(id);      }      head=ObexHelper.createHeader(reply,false);      totalLength+=head.length;      if (totalLength > mMaxPacketLength) {        totalLength=3;        head=null;        code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;      }    }  }  byte[] replyData;  if (head != null) {    replyData=new byte[3 + head.length];  } else {    replyData=new byte[3];  }  replyData[0]=(byte)code;  replyData[1]=(byte)(totalLength >> 8);  replyData[2]=(byte)totalLength;  if (head != null) {    System.arraycopy(head,0,replyData,3,head.length);  }  mOutput.write(replyData);  mOutput.flush();}  }
class C{  public Object convert(final String[] values,final Class<?> clazz){  Class<?> type=clazz;  if (clazz.isArray()) {    type=clazz.getComponentType();  }  Converter converter=this.lookup(type);  if (converter == null) {    converter=this.lookup(String.class);  }  Object array=Array.newInstance(type,values.length);  for (int i=0; i < values.length; i++) {    Array.set(array,i,converter.convert(type,values[i]));  }  return array;}  }
class C{  public String missingSeparateTipText(){  return "Treat missing as a separate value. Otherwise, counts for missing " + "values are distributed across other values in proportion to their " + "frequency.";}  }
class C{  public void endAtomicEdit(){  undoManager.endInternalAtomicEdit();}  }
class C{  public boolean contains(double x,double y){  return Math.sqrt(Math.pow(x - this.x,2) + Math.pow(y - this.y,2)) < radius;}  }
class C{  private ArrayList<CalendarBorderProperties> zGetDefaultBorderPropertiesList(){  ArrayList<CalendarBorderProperties> results=new ArrayList<CalendarBorderProperties>();  Color defaultDateBoxBorderColor=new Color(99,130,191);  Color defaultWeekdayEndcapsBorderColor=colorBackgroundWeekdayLabels;  Color defaultWeekNumberEndcapsBorderColor=colorBackgroundWeekNumberLabels;  CalendarBorderProperties dateBoxBorderProperties=new CalendarBorderProperties(new Point(3,3),new Point(5,5),defaultDateBoxBorderColor,1);  results.add(dateBoxBorderProperties);  CalendarBorderProperties weekdayLabelBorderProperties=new CalendarBorderProperties(new Point(3,2),new Point(5,2),defaultWeekdayEndcapsBorderColor,1);  results.add(weekdayLabelBorderProperties);  CalendarBorderProperties weekNumberBorderProperties=new CalendarBorderProperties(new Point(2,3),new Point(2,5),defaultWeekNumberEndcapsBorderColor,1);  results.add(weekNumberBorderProperties);  return results;}  }
class C{  public void testTrainEditFrame(){  TrainEditFrame trainEditFrame=new TrainEditFrame(null);  trainEditFrame.setTitle("Test Edit Train Frame");  ThreadingUtil.runOnGUI(null);  enterClickAndLeave(trainEditFrame.addTrainButton);  TrainManager tmanager=TrainManager.instance();  Train t=tmanager.getTrainByName("Test Train Name");  Assert.assertEquals("train name","Test Train Name",t.getName());  Assert.assertEquals("train description","Test Train Description",t.getDescription());  Assert.assertEquals("train comment","Test Train Comment",t.getComment());  Assert.assertEquals("train depart time","00:00",t.getDepartureTime());  Assert.assertEquals("train route",null,t.getRoute());  Assert.assertTrue("train accepts car type Boxcar",t.acceptsTypeName("Boxcar"));  Assert.assertEquals("train roads",Train.ALL_ROADS,t.getRoadOption());  Assert.assertEquals("train requirements",Train.NO_CABOOSE_OR_FRED,t.getRequirements());  trainEditFrame.hourBox.setSelectedItem("15");  trainEditFrame.minuteBox.setSelectedItem("45");  Assert.assertEquals("train comment","00:00",t.getDepartureTime());  enterClickAndLeave(trainEditFrame.saveTrainButton);  pressDialogButton(trainEditFrame,"OK");  Assert.assertEquals("train comment","15:45",t.getDepartureTime());  Assert.assertEquals("Route Combobox item count",6,trainEditFrame.routeBox.getItemCount());  ThreadingUtil.runOnGUI(null);  Assert.assertEquals("train route 2","Test Route C",t.getRoute().getName());  enterClickAndLeave(trainEditFrame.editButton);  JmriJFrame ref=JmriJFrame.getFrame("Edit Route");  Assert.assertNotNull("route add frame",ref);  ThreadingUtil.runOnGUI(null);  enterClickAndLeave(trainEditFrame.clearButton);  Assert.assertFalse("train accepts car type Boxcar",t.acceptsTypeName("Boxcar"));  enterClickAndLeave(trainEditFrame.setButton);  Assert.assertTrue("train accepts car type Boxcar",t.acceptsTypeName("Boxcar"));  Assert.assertEquals("number of engines","0",t.getNumberEngines());  Assert.assertEquals("engine model","",t.getEngineModel());  Assert.assertEquals("engine road","",t.getEngineRoad());  trainEditFrame.numEnginesBox.setSelectedItem("3");  trainEditFrame.modelEngineBox.setSelectedItem("FT");  trainEditFrame.roadEngineBox.setSelectedItem("UP");  Assert.assertEquals("number of engines 1","0",t.getNumberEngines());  Assert.assertEquals("engine model 1","",t.getEngineModel());  Assert.assertEquals("engine road 1","",t.getEngineRoad());  enterClickAndLeave(trainEditFrame.saveTrainButton);  Assert.assertEquals("number of engines 2","3",t.getNumberEngines());  Assert.assertEquals("engine model 2","FT",t.getEngineModel());  Assert.assertEquals("engine road 2","UP",t.getEngineRoad());  enterClickAndLeave(trainEditFrame.fredRadioButton);  Assert.assertEquals("train requirements 1",Train.NO_CABOOSE_OR_FRED,t.getRequirements());  enterClickAndLeave(trainEditFrame.saveTrainButton);  Assert.assertEquals("train requirements 2",Train.FRED,t.getRequirements());  enterClickAndLeave(trainEditFrame.cabooseRadioButton);  enterClickAndLeave(trainEditFrame.saveTrainButton);  Assert.assertEquals("train requirements 3",Train.CABOOSE,t.getRequirements());  Assert.assertEquals("caboose road 1","",t.getCabooseRoad());  trainEditFrame.roadCabooseBox.setSelectedItem("NH");  Assert.assertEquals("caboose road 2","",t.getCabooseRoad());  enterClickAndLeave(trainEditFrame.saveTrainButton);  Assert.assertEquals("caboose road 3","NH",t.getCabooseRoad());  enterClickAndLeave(trainEditFrame.noneRadioButton);  enterClickAndLeave(trainEditFrame.saveTrainButton);  Assert.assertEquals("train requirements 4",Train.NO_CABOOSE_OR_FRED,t.getRequirements());  ThreadingUtil.runOnGUI(null);  enterClickAndLeave(trainEditFrame.saveTrainButton);  enterClickAndLeave(trainEditFrame.deleteTrainButton);  pressDialogButton(trainEditFrame,"No");  ThreadingUtil.runOnGUI(null);  Train t2=tmanager.getTrainByName("Test Train Name");  Assert.assertNotNull(t);  ThreadingUtil.runOnGUI(null);  TrainEditFrame f=new TrainEditFrame(t2);  f.setTitle("Test Edit Train Frame");  Assert.assertEquals("train name","Test Train Name",f.trainNameTextField.getText());  Assert.assertEquals("train description","Test Train Description",f.trainDescriptionTextField.getText());  Assert.assertEquals("train comment","Test Train Comment",f.commentTextArea.getText());  Assert.assertEquals("train depart hour","15",f.hourBox.getSelectedItem());  Assert.assertEquals("train depart minute","45",f.minuteBox.getSelectedItem());  Assert.assertEquals("train route",t.getRoute(),f.routeBox.getSelectedItem());  Assert.assertEquals("number of engines","3",f.numEnginesBox.getSelectedItem());  Assert.assertEquals("engine model","FT",f.modelEngineBox.getSelectedItem());  Assert.assertEquals("engine road","UP",f.roadEngineBox.getSelectedItem());  Assert.assertEquals("caboose road","CP",f.roadCabooseBox.getSelectedItem());  Assert.assertTrue("caboose selected",f.cabooseRadioButton.isSelected());  Assert.assertFalse("none selected",f.noneRadioButton.isSelected());  Assert.assertFalse("FRED selected",f.fredRadioButton.isSelected());  ThreadingUtil.runOnGUI(null);}  }
class C{  public static void displayDrawableImage(String uri,ImageView imageView,DisplayImageOptions options){  ImageLoader.getInstance().displayImage("drawable://" + uri,new ImageViewAware(imageView),options,null,null);}  }
class C{  public Object clone(){  BitMatrix clone=(BitMatrix)super.clone();  if (this.bits != null)   clone.bits=(long[])this.bits.clone();  return clone;}  }
class C{  NodeTextRep subNodeText(SemanticNode sn){  NodeTextRep result=new NodeTextRep();  int beginIdx=getBeginLine(sn) - getBeginLine(this.semanticNode);  result.nodeText=new String[getEndLine(sn) - getBeginLine(sn) + 1];  result.mapping=new Vector[result.nodeText.length];  int beginCol=sn.stn.getLocation().beginColumn();  int beginPos=colToLoc(beginCol,this.mapping[beginIdx]);  result.nodeText[0]=this.nodeText[beginIdx].substring(beginPos);  Vector<MappingPair> mv=cloneMappingPairVector(this.mapping[beginIdx]);  adjustMappingPairVector(beginCol,-beginPos,mv);  result.mapping[0]=mv;  int minPos=beginPos;  for (int i=1; i < result.mapping.length; i++) {    result.nodeText[i]=this.nodeText[i + beginIdx];    if (!StringHelper.onlySpaces(result.nodeText[i])) {      minPos=Math.min(minPos,StringHelper.leadingSpaces(result.nodeText[i]));    }    result.mapping[i]=new Vector<MappingPair>();    for (int j=0; j < this.mapping[i + beginIdx].size(); j++) {      result.mapping[i].add(this.mapping[i + beginIdx].elementAt(j).clone());    }  }  result.nodeText[result.nodeText.length - 1]=result.nodeText[result.nodeText.length - 1].substring(0,colToLoc(sn.stn.getLocation().endColumn() + 1,result.mapping[result.mapping.length - 1]));  int spacesAddedToFirstLine=beginPos - minPos;  result.nodeText[0]=StringHelper.copyString(" ",spacesAddedToFirstLine) + result.nodeText[0];  adjustMappingPairVector(beginCol,spacesAddedToFirstLine,result.mapping[0]);  for (int i=1; i < result.nodeText.length; i++) {    if (!StringHelper.onlySpaces(result.nodeText[i])) {      result.nodeText[i]=result.nodeText[i].substring(minPos);      adjustMappingPairVector(1,-minPos,result.mapping[i]);    }  }  return result;}  }
class C{  public void updatePreviewTransform(){  int width;  int height;synchronized (mDimensionLock) {    width=mScreenWidth;    height=mScreenHeight;  }  updatePreviewTransform(width,height);}  }
class C{  public ActionForward searchClasses(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  return (performAction(mapping,form,request,response,"search"));}  }
class C{  private void storeLastUsed(){  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));}  }
class C{  public FeatureParsingException(String message){  super(message);}  }
class C{  public SeedPeers(NetworkParameters params){  this(params.getAddrSeeds(),params);}  }
class C{  public synchronized HttpMessage pollPath(HttpMessage msg){  SiteNode resultNode=null;  URI uri=msg.getRequestHeader().getURI();  SiteNode parent=(SiteNode)getRoot();  String folder;  try {    String host=getHostName(uri);    parent=findChild(parent,host);    if (parent == null) {      return null;    }    List<String> path=model.getSession().getTreePath(uri);    if (path.size() == 0) {      resultNode=parent;    }    for (int i=0; i < path.size(); i++) {      folder=path.get(i);      if (folder != null && !folder.equals("")) {        if (i == path.size() - 1) {          String leafName=getLeafName(folder,msg);          resultNode=findChild(parent,leafName);        } else {          parent=findChild(parent,folder);          if (parent == null) {            return null;          }        }      }    }  } catch (  URIException e) {    log.error(e.getMessage(),e);  }  if (resultNode == null || resultNode.getHistoryReference() == null) {    return null;  }  HttpMessage nodeMsg=null;  try {    nodeMsg=resultNode.getHistoryReference().getHttpMessage();  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return nodeMsg;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  @Override public void ready(){  Entity en=ce();  if ((en instanceof Dropship) && !en.isAirborne()) {    ArrayList<Coords> crushedBuildingLocs=new ArrayList<Coords>();    ArrayList<Coords> secondaryPositions=new ArrayList<Coords>();    secondaryPositions.add(en.getPosition());    for (int dir=0; dir < 6; dir++) {      secondaryPositions.add(en.getPosition().translated(dir));    }    for (    Coords pos : secondaryPositions) {      Building bld=clientgui.getClient().getGame().getBoard().getBuildingAt(pos);      if (bld != null) {        crushedBuildingLocs.add(pos);      }    }    if (!crushedBuildingLocs.isEmpty()) {      JOptionPane.showMessageDialog(clientgui,Messages.getString("DeploymentDisplay.dropshipBuildingDeploy"),Messages.getString("DeploymentDisplay.alertDialog.title"),JOptionPane.ERROR_MESSAGE);      return;    }  }  disableButtons();  clientgui.getClient().deploy(cen,en.getPosition(),en.getFacing(),en.getElevation(),en.getLoadedUnits(),assaultDropPreference);  en.setDeployed(true);  if (ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  endMyTurn();}  }
class C{  public boolean hasMoreTokens(){  if (tokenCount == 0) {    return false;  } else   if (tokenCount > 0) {    return true;  }  int savedPosition=position;  boolean savedEmptyReturned=emptyReturned;  int workingPosition=position;  boolean workingEmptyReturned=emptyReturned;  boolean onToken=advancePosition();  while (position != workingPosition || emptyReturned != workingEmptyReturned) {    if (onToken) {      position=savedPosition;      emptyReturned=savedEmptyReturned;      return true;    }    workingPosition=position;    workingEmptyReturned=emptyReturned;    onToken=advancePosition();  }  position=savedPosition;  emptyReturned=savedEmptyReturned;  return false;}  }
class C{  static void checkPriority(double priority) throws IllegalArgumentException {  if (priority < MIN_PRIORITY_VALUE || priority > MAX_PRIORITY_VALUE) {    throw new IllegalArgumentException("Priority " + priority + " is outside valid range of [0,2]");  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public void addFileset(final FileSet set){  filesets.add(set);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isValidClass(int classCode){  return (classCode & mask) != 0;}  }
class C{  public void removeAllListeners(){  if (listeners != null) {    listeners.clear();  }}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getActionCommand().equals("Stop")) {    animator.stop();  }}  }
class C{  public WHRPayPrint(){  try {    dynInit();    zkInit();    Borderlayout contentLayout=new Borderlayout();    contentLayout.setWidth("100%");    contentLayout.setHeight("100%");    form.appendChild(contentLayout);    Center center=new Center();    contentLayout.appendChild(center);    center.appendChild(centerPanel);    South south=new South();    south.setStyle("border: none");    contentLayout.appendChild(south);    south.appendChild(southPanel);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DrawerBuilder withSliderBackgroundColorRes(@ColorRes int sliderBackgroundColorRes){  this.mSliderBackgroundColorRes=sliderBackgroundColorRes;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.452 -0400",hash_original_method="54924678DCA60F174F0C38EC41ACEED7",hash_generated_method="52A5FA9A3306C4FBBAFEAED1F34859F7") @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (wildcards != null) {    for (int i=0; i < wildcards.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(wildcards[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public static String generateAttributesForPastingIntoTargetClass(final Class<?> targetClass){  return generateAttributesForClass(targetClass,false,"");}  }
class C{  public void onSnackbarShown(Snackbar snackbar){}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:22.350 -0500",hash_original_method="1B9818A91692B880BC908F5EBF39CBC8",hash_generated_method="2C950F8E5011DD8B376454BD9C8CC1CB") public Holder(GeneralNames entityName,int version){  this.entityName=entityName;  this.version=version;}  }
class C{  public boolean lastReadIsNewline(){  return this.readChar == '\n' || this.readChar == '\r';}  }
class C{  @Override public boolean isVN(){  return false;}  }
class C{  private void removeFromQueue(int x,int y){  Position p=new Position(x,y);  if (moveQueue.contains(p)) {    moveQueue.remove(p);  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter list1: ");  int[] list1=new int[input.nextInt()];  for (int i=0; i < list1.length; i++)   list1[i]=input.nextInt();  System.out.print("Enter list2: ");  int[] list2=new int[input.nextInt()];  for (int i=0; i < list2.length; i++)   list2[i]=input.nextInt();  System.out.println("Two lists are" + (equals(list1,list2) ? " " : " not ") + "identical");}  }
class C{  public static void LDC(String x){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC(x);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public void push(Type type){  stack[top++]=type;}  }
class C{  public static boolean AM(long packedDateTime){  return PackedLocalTime.AM(time(packedDateTime));}  }
class C{  @Override public void onTokenRefresh(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  String senderId=sharedPreferences.getString(GCMPushPlugin.SENDER_ID_KEY,null);  if (senderId != null) {    sharedPreferences.edit().putBoolean(GCMPushPlugin.REFRESH_TOKEN_KEY,true).apply();    Intent intent=new Intent(this,GPPRegistrationIntentService.class);    intent.putExtra(GCMPushPlugin.SENDER_ID_KEY,senderId);    startService(intent);    return;  }}  }
class C{  private void discoverUnmanagedExportMasks(URI systemId,Map<String,List<UnManagedVolume>> hostVolumesMap,VNXeApiClient apiClient,DbClient dbClient,PartitionManager partitionManager) throws Exception {  unManagedExportMasksToCreate=new ArrayList<UnManagedExportMask>();  unManagedExportMasksToUpdate=new ArrayList<UnManagedExportMask>();  List<UnManagedVolume> unManagedExportVolumesToUpdate=new ArrayList<UnManagedVolume>();  StringSet knownFCStoragePortUris=new StringSet();  StringSet knownIPStoragePortUris=new StringSet();  List<StoragePort> matchedFCPorts=new ArrayList<StoragePort>();  URIQueryResultList storagePortURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(systemId),storagePortURIs);  Iterator<URI> portsItr=storagePortURIs.iterator();  while (portsItr.hasNext()) {    URI storagePortURI=portsItr.next();    StoragePort port=dbClient.queryObject(StoragePort.class,storagePortURI);    if (TransportType.FC.toString().equals(port.getTransportType())) {      knownFCStoragePortUris.add(storagePortURI.toString());      matchedFCPorts.add(port);    } else     if (TransportType.IP.toString().equals(port.getTransportType())) {      knownIPStoragePortUris.add(storagePortURI.toString());    }  }  for (  Map.Entry<String,List<UnManagedVolume>> entry : hostVolumesMap.entrySet()) {    String hostId=entry.getKey();    List<UnManagedVolume> volumes=entry.getValue();    StringSet knownInitSet=new StringSet();    StringSet knownNetworkIdSet=new StringSet();    StringSet knownVolumeSet=new StringSet();    List<Initiator> matchedFCInitiators=new ArrayList<Initiator>();    VNXeHost host=apiClient.getHostById(hostId);    List<VNXeBase> fcInits=host.getFcHostInitiators();    List<VNXeBase> iScsiInits=host.getIscsiHostInitiators();    boolean isVplexHost=false;    boolean isRPHost=false;    if (fcInits != null && !fcInits.isEmpty()) {      for (      VNXeBase init : fcInits) {        VNXeHostInitiator initiator=apiClient.getHostInitiator(init.getId());        String portwwn=initiator.getPortWWN();        if (portwwn == null || portwwn.isEmpty()) {          continue;        }        Initiator knownInitiator=NetworkUtil.getInitiator(portwwn,dbClient);        if (knownInitiator != null) {          knownInitSet.add(knownInitiator.getId().toString());          knownNetworkIdSet.add(portwwn);          matchedFCInitiators.add(knownInitiator);        } else {          knownInitiator=new Initiator();          knownInitiator.setInitiatorPort(portwwn);        }        if (!isVplexHost && VPlexControllerUtils.isVplexInitiator(knownInitiator,dbClient)) {          isVplexHost=true;        }      }    }    if (!matchedFCInitiators.isEmpty() && ExportUtils.checkIfInitiatorsForRP(matchedFCInitiators)) {      log.info("host {} contains RP initiators, " + "so this mask contains RP protected volumes",host.getName());      isRPHost=true;    }    if (iScsiInits != null && !iScsiInits.isEmpty()) {      for (      VNXeBase init : iScsiInits) {        VNXeHostInitiator initiator=apiClient.getHostInitiator(init.getId());        String portwwn=initiator.getPortWWN();        if (portwwn == null || portwwn.isEmpty()) {          continue;        }        Initiator knownInitiator=NetworkUtil.getInitiator(portwwn,dbClient);        if (knownInitiator != null) {          knownInitSet.add(knownInitiator.getId().toString());          knownNetworkIdSet.add(portwwn);        }      }    }    if (knownNetworkIdSet.isEmpty()) {      log.info(String.format("The host %s does not have any known initiators",hostId));      continue;    }    String firstNetworkId=knownNetworkIdSet.iterator().next();    UnManagedExportMask mask=getUnManagedExportMask(firstNetworkId,dbClient,systemId);    mask.setStorageSystemUri(systemId);    mask.setMaskName(host.getName());    allCurrentUnManagedExportMaskUris.add(mask.getId());    for (    UnManagedVolume hostUnManagedVol : volumes) {      hostUnManagedVol.getInitiatorNetworkIds().addAll(knownNetworkIdSet);      hostUnManagedVol.getInitiatorUris().addAll(knownInitSet);      hostUnManagedVol.getUnmanagedExportMasks().add(mask.getId().toString());      if (isVplexHost) {        log.info("marking unmanaged unity volume {} as a VPLEX backend volume",hostUnManagedVol.getLabel());        hostUnManagedVol.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString(),Boolean.TRUE.toString());      }      if (isRPHost) {        log.info("unmanaged volume {} is an RP volume",hostUnManagedVol.getLabel());        hostUnManagedVol.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),Boolean.TRUE.toString());      } else {        log.info("unmanaged volume {} is exported to something other than RP.  Marking IS_NONRP_EXPORTED.",hostUnManagedVol.forDisplay());        hostUnManagedVol.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),Boolean.TRUE.toString());      }      mask.getUnmanagedVolumeUris().add(hostUnManagedVol.getId().toString());      unManagedExportVolumesToUpdate.add(hostUnManagedVol);    }    mask.replaceNewWithOldResources(knownInitSet,knownNetworkIdSet,knownVolumeSet,!matchedFCInitiators.isEmpty() ? knownFCStoragePortUris : knownIPStoragePortUris);    updateZoningMap(mask,matchedFCInitiators,matchedFCPorts);  }  if (!unManagedExportMasksToCreate.isEmpty()) {    partitionManager.insertInBatches(unManagedExportMasksToCreate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);    unManagedExportMasksToCreate.clear();  }  if (!unManagedExportMasksToUpdate.isEmpty()) {    partitionManager.updateInBatches(unManagedExportMasksToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);    unManagedExportMasksToUpdate.clear();  }  if (!unManagedExportVolumesToUpdate.isEmpty()) {    partitionManager.updateAndReIndexInBatches(unManagedExportVolumesToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_VOLUME);    unManagedExportVolumesToUpdate.clear();  }  DiscoveryUtils.markInActiveUnManagedExportMask(systemId,allCurrentUnManagedExportMaskUris,dbClient,partitionManager);}  }
class C{  private void flushTempStream(){}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  public static ByteArrayInputStream bufferedRead(URL url){  try {    URLStreamManager manager=new URLStreamManager(url);    InputStream stream=manager.open();    ByteArrayOutputStream out=new ByteArrayOutputStream();    int read=0;    byte[] buffer=new byte[1204];    while ((read=stream.read(buffer)) > 0) {      out.write(buffer,0,read);    }    manager.close();    return new ByteArrayInputStream(out.toByteArray());  } catch (  Exception e) {    return null;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  @Override public void decode(final BufferedInputStream bis,final BufferedOutputStream streamCache,final String cacheName,final Map<String,String> cachedObjects){  this.bis=bis;  this.streamCache=streamCache;  this.cachedObjects=cachedObjects;  try {    final int count;    int len;    int nextLen;    int value2;    count=bis.available();    for (int i=0; i < count; i++) {      nextLen=bis.read();      if (nextLen >= 128) {        nextLen-=256;      }      len=nextLen;      if (len < 0) {        len=256 + len;      }      if (len == 128) {        i=count;      } else       if (len > 128) {        i++;        len=257 - len;        value2=bis.read();        if (value2 >= 128) {          value2-=256;        }        for (int j=0; j < len; j++) {          streamCache.write(value2);        }      } else {        i++;        len++;        for (int j=0; j < len; j++) {          value2=bis.read();          if (value2 >= 128) {            value2-=256;          }          streamCache.write(value2);        }        i=i + len - 1;      }    }  } catch (  final IOException e1) {    LogWriter.writeLog("IO exception in RunLength " + e1);  }}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  mPosition=null;  super.finalize();}  }
class C{  public void start(ServerLocation location,CacheServerStats cacheServerStats){  probe.open();  this.location=location;  this.pollingThread.start();  this.stats=cacheServerStats;  this.stats.setLoad(lastLoad);}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean match(OFMatch toCompare){  if ((wildcards & OFPFW_IN_PORT) == 0 && this.inputPort != toCompare.getInputPort())   return false;  if ((wildcards & OFPFW_DL_DST) == 0 && !Arrays.equals(this.dataLayerDestination,toCompare.getDataLayerDestination()))   return false;  if ((wildcards & OFPFW_DL_SRC) == 0 && !Arrays.equals(this.dataLayerSource,toCompare.getDataLayerSource()))   return false;  if ((wildcards & OFPFW_DL_TYPE) == 0 && this.dataLayerType != toCompare.getDataLayerType())   return false;  if ((wildcards & OFPFW_DL_VLAN) == 0 && this.dataLayerVirtualLan != toCompare.getDataLayerVirtualLan())   return false;  if ((wildcards & OFPFW_DL_VLAN_PCP) == 0 && this.dataLayerVirtualLanPriorityCodePoint != toCompare.getDataLayerVirtualLanPriorityCodePoint())   return false;  if ((wildcards & OFPFW_NW_PROTO) == 0 && this.networkProtocol != toCompare.getNetworkProtocol())   return false;  if ((wildcards & OFPFW_NW_TOS) == 0 && this.networkTypeOfService != toCompare.getNetworkTypeOfService())   return false;  int dstmasklen=getNetworkDestinationMaskLen();  int srcmasklen=getNetworkSourceMaskLen();  if (dstmasklen >= 32 && networkDestination != toCompare.getNetworkDestination())   return false;  if (srcmasklen >= 32 && networkSource != toCompare.getNetworkSource())   return false;  int dstmask=~((1 << (32 - dstmasklen)) - 1);  int srcmask=~((1 << (32 - srcmasklen)) - 1);  if (dstmasklen < 32 && (networkDestination & dstmask) != (toCompare.getNetworkDestination() & dstmask))   return false;  if (srcmasklen < 32 && (networkSource & srcmask) != (toCompare.getNetworkSource() & srcmask))   return false;  if ((wildcards & OFPFW_TP_DST) == 0 && this.transportDestination != toCompare.getTransportDestination())   return false;  if ((wildcards & OFPFW_TP_SRC) == 0 && this.transportSource != toCompare.getTransportSource())   return false;  return true;}  }
class C{  private void readObject(){}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  private void addGlyphStates(List<Tuple2<TransitionState,Double>> result,int nextLmChar,int[] nextContext,TransitionStateType nextType,int nextLanguage,double transitionScore){  if (!allowGlyphSubstitution)   addState(result,nextContext,nextType,nextLanguage,new GlyphChar(nextLmChar,GlyphType.NORMAL_CHAR),transitionScore); else {    Set<GlyphChar> potentialNextGlyphChars=new HashSet<GlyphChar>();    GlyphType glyphType=glyphChar.glyphType;    if (glyphType == GlyphType.DOUBLED) {      throw new RuntimeException("This should have been handled elsewhere so that we don't re-include ngram LM scores");    } else     if (glyphType == GlyphType.ELISION_TILDE) {      if (canBeElided.contains(nextLmChar)) {        potentialNextGlyphChars.add(new GlyphChar(spaceCharIndex,GlyphType.TILDE_ELIDED));      }    } else {      potentialNextGlyphChars.add(new GlyphChar(nextLmChar,GlyphType.NORMAL_CHAR));      if (canBeReplaced.contains(nextLmChar)) {        for (        int nextGlyphCharIndex : lm.get(nextLanguage).getActiveCharacters()) {          if (validSubstitutionChars.contains(nextGlyphCharIndex)) {            potentialNextGlyphChars.add(new GlyphChar(nextGlyphCharIndex,GlyphType.NORMAL_CHAR));          }        }      }      if (nextLmChar == sCharIndex)       potentialNextGlyphChars.add(new GlyphChar(longsCharIndex,GlyphType.NORMAL_CHAR));      Integer tildeDecorated=addTilde.get(nextLmChar);      if (tildeDecorated != null) {        potentialNextGlyphChars.add(new GlyphChar(tildeDecorated,GlyphType.ELISION_TILDE));      }      if (glyphType == GlyphType.TILDE_ELIDED) {        if (canBeElided.contains(nextLmChar)) {          potentialNextGlyphChars.add(new GlyphChar(spaceCharIndex,GlyphType.TILDE_ELIDED));        }      }      Integer baseChar=diacriticDisregardMap.get(nextLmChar);      if (baseChar != null) {        potentialNextGlyphChars.add(new GlyphChar(baseChar,GlyphType.NORMAL_CHAR));      }      if (!elideAnything) {        if (glyphType != GlyphType.FIRST_ELIDED) {          if (lmCharIndex == spaceCharIndex) {            if (type != TransitionStateType.LMRGN_HPHN && type != TransitionStateType.RMRGN_HPHN_INIT && type != TransitionStateType.RMRGN_HPHN) {              if (nextType == TransitionStateType.TMPL) {                if (canBeElided.contains(nextLmChar)) {                  potentialNextGlyphChars.add(new GlyphChar(spaceCharIndex,GlyphType.FIRST_ELIDED));                }              }            }          }        }      }      if (validDoublableSet.contains(nextLmChar)) {        potentialNextGlyphChars.add(new GlyphChar(nextLmChar,GlyphType.DOUBLED));        if (nextLmChar == sCharIndex)         potentialNextGlyphChars.add(new GlyphChar(longsCharIndex,GlyphType.DOUBLED));      }      if (elideAnything) {        if (nextType == TransitionStateType.TMPL) {          if (canBeElided.contains(nextLmChar)) {            potentialNextGlyphChars.add(new GlyphChar(spaceCharIndex,GlyphType.ELIDED));          }        }      }    }    for (    GlyphChar nextGlyphChar : potentialNextGlyphChars) {      double glyphLogProb=calculateGlyphLogProb(nextType,nextLanguage,nextLmChar,nextGlyphChar);      addState(result,nextContext,nextType,nextLanguage,nextGlyphChar,transitionScore + glyphLogProb);    }  }}  }
class C{  public boolean isEmpty(){  return closed.isEmpty();}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public void verify() throws VerificationException {  verifyHeader();  verifyTransactions();}  }
class C{  private static void vecswap(long x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  protected CtMember.Cache hasMemberCache(){  if (memberCache != null)   return (CtMember.Cache)memberCache.get(); else   return null;}  }
class C{  public Vector3d mulTransposePosition(Matrix4fc mat){  return mulTransposePosition(mat,this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.791 -0500",hash_original_method="3430000E3BB78B9B3224C2ADE055F8C5",hash_generated_method="89985E528DD0E88B550D9AD8B3FD074E") public int model(){  return theType.model();}  }
class C{  @Override public void onChildClick(){  Toast.makeText(context,R.string.long_click,Toast.LENGTH_SHORT).show();}  }
class C{  public void startServer() throws Exception {  getJettyServer().start();}  }
class C{  private static boolean isToStringMethod(GrExpression operand,StringBuilder builder){  if (!(operand instanceof GrMethodCallExpression))   return false;  final GrExpression expression=((GrMethodCallExpression)operand).getInvokedExpression();  if (!(expression instanceof GrReferenceExpression))   return false;  final GrReferenceExpression refExpr=(GrReferenceExpression)expression;  final GrExpression qualifier=refExpr.getQualifierExpression();  if (qualifier == null)   return false;  final GroovyResolveResult[] results=refExpr.multiResolve(false);  if (results.length != 1)   return false;  final PsiElement element=results[0].getElement();  if (!(element instanceof PsiMethod))   return false;  final PsiMethod method=(PsiMethod)element;  final PsiClass objectClass=JavaPsiFacade.getInstance(operand.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT,operand.getResolveScope());  if (objectClass == null)   return false;  final PsiMethod[] toStringMethod=objectClass.findMethodsByName("toString",true);  if (MethodSignatureUtil.isSubsignature(toStringMethod[0].getHierarchicalMethodSignature(),method.getHierarchicalMethodSignature())) {    builder.append(START_BRACE).append(qualifier.getText()).append(END_BRACE);    return true;  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public long position() throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  return seekNeeded ? seekPos : curPos;}  }
class C{  private void notifyPlayerAboutReachedAchievement(Player player,Achievement achievement){  if (achievement.isActive()) {    player.addEvent(new ReachedAchievementEvent(achievement));    player.addEvent(new SoundEvent("yay-1",SoundLayer.USER_INTERFACE));    player.notifyWorldAboutChanges();  }}  }
class C{  public boolean isData(){  return label.isData();}  }
class C{  private NetworkBuilder(boolean directed){  this.directed=directed;}  }
class C{  public void addAnimation(@NonNull Animation animation){  processAnimation((AbstractAnimation)animation);}  }
class C{  public Object mapTo(final Object objectToMap){  return this.mapTo(objectToMap,null);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LdapConnCfg[");  buffer.append("engine = ").append(m_engine);  buffer.append(", provider = ").append(m_provider);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append(", pool = ").append(m_pool);  buffer.append(", poolTimeOut = ").append(m_poolTO);  buffer.append("]");  return buffer.toString();}  }
class C{  public static boolean isIdEmbeddedInURL(final URI resourceURI,UriInfo uriInfo){  ArgValidator.checkUri(resourceURI);  return isIdEmbeddedInURL(resourceURI.toString(),uriInfo);}  }
class C{  public NamedList<Object> convertToNamedList(){  NamedList<Object> newList=new SimpleOrderedMap<>();  newList.add(PivotListEntry.FIELD.getName(),parentPivot.field);  newList.add(PivotListEntry.VALUE.getName(),value);  newList.add(PivotListEntry.COUNT.getName(),count);  if (queryCounts != null) {    newList.add(PivotListEntry.QUERIES.getName(),queryCounts);  }  if (rangeCounts != null) {    SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput=new SimpleOrderedMap<>();    for (    Map.Entry<String,RangeFacetRequest.DistribRangeFacet> entry : rangeCounts.entrySet()) {      String key=entry.getKey();      RangeFacetRequest.DistribRangeFacet value=entry.getValue();      rangeFacetOutput.add(key,value.rangeFacet);    }    newList.add(PivotListEntry.RANGES.getName(),rangeFacetOutput);  }  if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {    newList.add(PivotListEntry.PIVOT.getName(),childPivot.convertToListOfNamedLists());  }  if (null != statsValues) {    newList.add(PivotListEntry.STATS.getName(),StatsComponent.convertToResponse(statsValues));  }  return newList;}  }
class C{  public boolean isCollection(){  return label.isCollection();}  }
class C{  public static boolean hasAppenders(ch.qos.logback.classic.Logger logger){  Iterator<Appender<ILoggingEvent>> it=logger.iteratorForAppenders();  return it.hasNext();}  }
class C{  public static boolean isTokenValid(String token,String cookie,String url,String method,String timestamp){  long createTime=Long.parseLong(timestamp);  long currentTime=(new Date()).getTime() / 1000;  if ((currentTime - createTime) > TOKEN_LIFE_SECONDS) {    return false;  }  String data=url + " " + method+ " "+ createTime;  byte[] hmac;  try {    hmac=computeSHA1HMac(data,cookie);  } catch (  GeneralSecurityException e) {    throw new RuntimeException("Security exception - " + e.getMessage());  }  String hmacEnc=Base64.encodeWebSafe(hmac,true);  return hmacEnc.equals(token);}  }
class C{  public URI relativize(URI uri){  return relativize(this,uri);}  }
class C{  public boolean retainStaleSnapshots(){  return retainStaleSnapshots;}  }
class C{  private RotateDrawable(RotateState rotateState,Resources res){  mState=new RotateState(rotateState,this,res);}  }
class C{  public AlbumGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,String inGroupType,Object inGroupObject,java.util.Vector inFiles){  super(inSource,inParent,inGroupLabel,inGroupType,inGroupObject,inFiles);}  }
class C{  protected void drawArrow(List<mxPoint> pts,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  mxPoint p0=pts.get(0);  mxPoint pe=pts.get(pts.size() - 1);  Polygon poly=createArrow(p0,pe);  if (g.getClipBounds() == null || g.getClipBounds().intersects(poly.getBounds())) {    drawPolygon(poly,fillColor,fillPaint,penColor,shadow);  }}  }
class C{  public List<Transaxtion> postInTransaction(final List<VoucherDetails> billDetailslist,final List<VoucherDetails> subLedgerlist,final CVoucherHeader voucherHeader){  final List<Transaxtion> transaxtionList=new ArrayList<Transaxtion>();  final String accDetailFunc="";  String detailedFunc="";  Integer voucherLineId=1;  final List<String> repeatedglCodes=VoucherHelper.getRepeatedGlcodes(billDetailslist);  try {    for (    final VoucherDetails accountDetails : billDetailslist) {      final String glcodeId=accountDetails.getGlcodeIdDetail().toString();      final Transaxtion transaction=new Transaxtion();      transaction.setGlCode(accountDetails.getGlcodeDetail());      transaction.setGlName(accountDetails.getAccounthead());      transaction.setVoucherLineId(String.valueOf(voucherLineId++));      transaction.setVoucherHeaderId(voucherHeader.getId().toString());      transaction.setCrAmount(accountDetails.getCreditAmountDetail().toString());      transaction.setDrAmount(accountDetails.getDebitAmountDetail().toString());      if (null != accountDetails.getFunctionIdDetail())       transaction.setFunctionId(accountDetails.getFunctionIdDetail().toString());      final ArrayList reqParams=new ArrayList();      for (      final VoucherDetails subledgerDetails : subLedgerlist) {        final String detailGlCode=subledgerDetails.getGlcode().getId().toString();        if (null != voucherHeader.getIsRestrictedtoOneFunctionCenter() && voucherHeader.getIsRestrictedtoOneFunctionCenter())         detailedFunc=voucherHeader.getVouchermis().getFunction().toString(); else         detailedFunc=subledgerDetails.getFunctionDetail();        final String detailtypeid=subledgerDetails.getDetailType().getId().toString();        if (glcodeId.equals(detailGlCode) && (repeatedglCodes.contains(glcodeId) ? accDetailFunc.equals(detailedFunc) : true)) {          final TransaxtionParameter reqData=new TransaxtionParameter();          final Accountdetailtype adt=(Accountdetailtype)accountdetailtypeHibernateDAO.findById(Integer.valueOf(detailtypeid),false);          reqData.setDetailName(adt.getAttributename());          reqData.setGlcodeId(detailGlCode);          reqData.setDetailAmt(subledgerDetails.getAmount().toString());          reqData.setDetailKey(subledgerDetails.getDetailKeyId().toString());          reqData.setDetailTypeId(detailtypeid);          reqParams.add(reqData);        }      }      if (reqParams != null && reqParams.size() > 0)       transaction.setTransaxtionParam(reqParams);      transaxtionList.add(transaction);    }  } catch (  final Exception e) {    LOGGER.error("Exception occured while posting data into voucher detail and transaction");    throw new ApplicationRuntimeException("Exception occured while posting data into voucher detail and transaction" + e.getMessage());  }  return transaxtionList;}  }
class C{  public static void main(String[] args) throws IOException {  String inpath="";  String outpath="";  String sllp;  String[] sllpa;  ShapeFileCrop sfc=null;  ESRIPoint ul=null;  ESRIPoint lr=null;  int index=0;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-i")) {      inpath=args[++i];    } else     if (args[i].equals("-o")) {      outpath=args[++i];    } else     if (args[i].equals("-ul")) {      sllp=args[++i];      index=sllp.indexOf(",");      if (index != -1) {        sllpa=new String[2];        sllpa[0]=sllp.substring(0,index);        sllpa[1]=sllp.substring(index + 1);        ul=new ESRIPoint(Double.valueOf(sllpa[1]).doubleValue(),Double.valueOf(sllpa[0]).doubleValue());      }    } else     if (args[i].equals("-lr")) {      sllp=args[++i];      index=sllp.indexOf(",");      if (index != -1) {        sllpa=new String[2];        sllpa[0]=sllp.substring(0,index);        sllpa[1]=sllp.substring(index + 1);        lr=new ESRIPoint(Double.valueOf(sllpa[1]).doubleValue(),Double.valueOf(sllpa[0]).doubleValue());      }    } else {      usage();    }  }  if ((ul == null) || (lr == null) || (inpath.length() == 0)|| (outpath.length() == 0)) {    usage();  } else {    sfc=new ShapeFileCrop(inpath,outpath);    sfc.ebb=new ESRIBoundingBox(ul,lr);  }  if (sfc != null) {    sfc.cropShapeFile();  }}  }
class C{  public void dumpProgram(){  PrintStream w=new PrintStream(System.out);  dumpProgram(w);  w.flush();}  }
class C{  @Override public int hashCode(){  return ((int)(seconds ^ (seconds >>> 32))) + (51 * nanos);}  }
class C{  public static double logpdf(double x,double mu,double shape){  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  }  final double v=(x - mu) / mu;  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;}  }
class C{  public boolean remove(Change change){  Assert.isNotNull(change);  boolean result=fChanges.remove(change);  if (result) {    change.setParent(null);  }  return result;}  }
class C{  @Override public void updateChart(final JFreeChart chart){  this.titleEditor.setTitleProperties(chart);  this.plotEditor.updatePlotProperties(chart.getPlot());  this.otherEditor.updateChartProperties(chart);}  }
class C{  public CanvasDialogImpl(String text,CanvasComponent... children){  super(text,children);}  }
class C{  @Override public void create(){  camera=new OrthographicCamera();  viewport=new ScreenViewport(camera);  viewport.setScreenBounds(0,0,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());  renderer=new ShapeRenderer();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException {  JsonWriter jsonWriter=new JsonWriter(response.getWriter()).beginObject();  String userId=UserServiceFactory.getUserService().getCurrentUser().getUserId();  DatastoreUtils datastoreUtils=new DatastoreUtils(userId);  String jobStatus=datastoreUtils.getUserJobStatus();  if (("DONE").equalsIgnoreCase(jobStatus)) {    List<Entity> results=datastoreUtils.getResults();    if (!results.isEmpty()) {      writeResultsToMotionChartJson(jsonWriter,results);    }  }  jsonWriter.name("failed").value(datastoreUtils.hasUserQueryFailed());  jsonWriter.name("message").value(datastoreUtils.getUserMessage());  jsonWriter.name("lastRun").value(datastoreUtils.getUserLastRunMessage());  jsonWriter.endObject().close();}  }
class C{  public synchronized CharsToNameCanonicalizer makeChild(boolean canonicalize,boolean intern){  return new CharsToNameCanonicalizer(this,canonicalize,intern,_symbols,_buckets,_size);}  }
class C{  public MultisigSignatureTransaction createSignature(final Account cosigner){  return createSignature(cosigner,this.multisig,this.innerTransactionHash);}  }
class C{  public FrameResizeControl(ScrollFrame frame){  this.frame=frame;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    int minValue=(int)(image.getMinimumValue());    int maxValue=(int)(image.getMaximumValue());    range=maxValue - minValue;    double[] data;    double[][] totals=new double[4][range + 1];    double[] radius=new double[range + 1];    double[][] centroid=new double[2][range + 1];    double[] DFCSum=new double[range + 1];    long[][] minRowAndCol=new long[2][range + 1];    for (a=0; a <= range; a++) {      minRowAndCol[0][a]=Long.MAX_VALUE;      minRowAndCol[1][a]=Long.MAX_VALUE;    }    updateProgress("Finding patch min row and columns:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          if (row < minRowAndCol[0][a]) {            minRowAndCol[0][a]=row;          }          if (col < minRowAndCol[1][a]) {            minRowAndCol[1][a]=col;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Finding patch min row and columns:",(int)progress);    }    updateProgress("Loop 1 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          totals[0][a]+=(col - minRowAndCol[1][a]);          totals[1][a]+=(row - minRowAndCol[0][a]);          totals[2][a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        centroid[0][a]=totals[0][a] / totals[2][a] + minRowAndCol[1][a];        centroid[1][a]=totals[1][a] / totals[2][a] + minRowAndCol[0][a];        radius[a]=Math.sqrt((totals[2][a]) / Math.PI) - 0.5;      }    }    updateProgress("Loop 2 of 3:",0);    double d;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          d=Math.sqrt(Math.pow((col - centroid[0][a]),2d) + Math.pow((row - centroid[1][a]),2));          DFCSum[a]+=(double)d;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        DFCSum[a]=DFCSum[a] / totals[2][a];      }    }    updateProgress("Loop 3 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          output.setValue(row,col,DFCSum[a]);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 3 of 3:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Radius of Gyration\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (DFCSum[a] > 0) {          retstr=retstr + "\n" + (a + minValue)+ "\t"+ df.format(DFCSum[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static String codegenCompiledResourceBundleNames(SortedSet<String> bundleNames){  StringJoiner.ItemStringer itemStringer=new StringJoiner.ItemQuoter();  return "[ " + StringJoiner.join(bundleNames,", ",itemStringer) + " ]";}  }
class C{  public static ProgramStore BLEND_ALPHA_DEPTH_TEST(RenderScript rs){  if (rs.mProgramStore_BLEND_ALPHA_DEPTH_TEST == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.LESS);    builder.setBlendFunc(BlendSrcFunc.SRC_ALPHA,BlendDstFunc.ONE_MINUS_SRC_ALPHA);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(true);    rs.mProgramStore_BLEND_ALPHA_DEPTH_TEST=builder.create();  }  return rs.mProgramStore_BLEND_ALPHA_DEPTH_TEST;}  }
class C{  public List<NamedRelatedResourceRep> listByCluster(URI clusterId){  return getList(PathConstants.HOST_BY_CLUSTER_URL,clusterId);}  }
class C{  void modifying(){  if (this.disableEvents > 0) {    return;  }  this.modificationCount++;}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  public final double sizeOfPredictedRegions(){  if (m_NoPriors || !m_CoverageStatisticsAvailable) {    return Double.NaN;  }  return 100 * m_TotalSizeOfRegions / m_WithClass;}  }
class C{  public void forwardRequest(String selectorPath,String key,Operation request){  if (isStopping()) {    request.fail(new CancellationException());    return;  }  NodeSelectorService nss=findNodeSelectorService(selectorPath,request);  if (nss == null) {    return;  }  prepareRequest(request);  SelectAndForwardRequest body=new SelectAndForwardRequest();  body.targetPath=request.getUri().getPath();  body.targetQuery=request.getUri().getQuery();  body.key=key;  body.options=EnumSet.of(ForwardingOption.UNICAST);  nss.selectAndForward(request,body);}  }
class C{  public GeneralizedSemPmWrapper(GraphSource graphWrapper,GeneralizedSemPmWrapper wrapper){  this(new EdgeListGraph(graphWrapper.getGraph()),wrapper.getSemPm());}  }
class C{  public AbstractSimpleScriptedTestProtocol(HostSystem hostSystem,String userName,String password,String scriptDirectory) throws Exception {  super(hostSystem,userName,password);  this.scriptDirectory=scriptDirectory;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public Builder addSourceFolder(@NonNull File folder){  foldersToScan.add(folder);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.926 -0500",hash_original_method="6D2538BEDFF897738BE4A0A290C33070",hash_generated_method="B7D5D9AD8D04FA258AA5A2672A264BBC") public boolean createIncomingConnect(BluetoothDevice device){  if (DBG)   log("createIncomingConnect");  if (mService != null && isEnabled()) {    try {      return mService.createIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  @Override public boolean isPoolable(){  debugCodeCall("isPoolable");  return false;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(this.selector).append("{");  if (this.subSelectors != null) {    for (    Selector s : this.subSelectors) {      sb.append(s.toString());    }  }  if (this.properties != null) {    for (    Property p : this.properties) {      sb.append(p.toString());    }  }  if (sb.charAt(sb.length() - 1) == ';') {    sb.deleteCharAt(sb.length() - 1);  }  sb.append("}");  return sb.toString();}  }
class C{  public double scaleFromPixel(double y){  return scale.getUnscaled((y - .5) / (height - 1.));}  }
class C{  public int copyLinesFrom(MInOut otherShipment,boolean counter,boolean setOrder){  if (isProcessed() || isPosted() || otherShipment == null)   return 0;  MInOutLine[] fromLines=otherShipment.getLines(true);  int count=0;  for (int i=0; i < fromLines.length; i++) {    MInOutLine line=new MInOutLine(this);    MInOutLine fromLine=fromLines[i];    line.set_TrxName(get_TrxName());    if (counter)     PO.copyValues(fromLine,line,getAD_Client_ID(),getAD_Org_ID()); else     PO.copyValues(fromLine,line,fromLine.getAD_Client_ID(),fromLine.getAD_Org_ID());    line.setM_InOut_ID(getM_InOut_ID());    line.set_ValueNoCheck("M_InOutLine_ID",I_ZERO);    if (!setOrder) {      line.setC_OrderLine_ID(0);      line.setM_RMALine_ID(0);    }    line.setM_AttributeSetInstance_ID(fromLine.getM_AttributeSetInstance_ID());    line.setRef_InOutLine_ID(0);    line.setIsInvoiced(false);    line.setConfirmedQty(Env.ZERO);    line.setPickedQty(Env.ZERO);    line.setScrappedQty(Env.ZERO);    line.setTargetQty(Env.ZERO);    if (getM_Warehouse_ID() != otherShipment.getM_Warehouse_ID()) {      line.setM_Locator_ID(0);      line.setM_Locator_ID(Env.ZERO);    }    if (counter) {      line.setRef_InOutLine_ID(fromLine.getM_InOutLine_ID());      if (fromLine.getC_OrderLine_ID() != 0) {        MOrderLine peer=new MOrderLine(getCtx(),fromLine.getC_OrderLine_ID(),get_TrxName());        if (peer.getRef_OrderLine_ID() != 0)         line.setC_OrderLine_ID(peer.getRef_OrderLine_ID());      }      if (fromLine.getM_RMALine_ID() != 0) {        MRMALine peer=new MRMALine(getCtx(),fromLine.getM_RMALine_ID(),get_TrxName());        if (peer.getRef_RMALine_ID() > 0)         line.setM_RMALine_ID(peer.getRef_RMALine_ID());      }    }    line.setProcessed(false);    if (line.save(get_TrxName()))     count++;    if (counter) {      fromLine.setRef_InOutLine_ID(line.getM_InOutLine_ID());      fromLine.save(get_TrxName());    }  }  if (fromLines.length != count) {    log.log(Level.SEVERE,"Line difference - From=" + fromLines.length + " <> Saved="+ count);    count=-1;  }  return count;}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error: encountered " + (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ") + "after \""+ addEscapes(errorAfter)+ "\".");}  }
class C{  public boolean project(Vec3 modelPoint,Vec3 result){  if (modelPoint == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"RenderContext","project","missingPoint"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"RenderContext","project","missingResult"));  }  double mx=modelPoint.x;  double my=modelPoint.y;  double mz=modelPoint.z;  double[] m=this.modelviewProjection.m;  double x=m[0] * mx + m[1] * my + m[2] * mz + m[3];  double y=m[4] * mx + m[5] * my + m[6] * mz + m[7];  double z=m[8] * mx + m[9] * my + m[10] * mz + m[11];  double w=m[12] * mx + m[13] * my + m[14] * mz + m[15];  if (w == 0) {    return false;  }  x/=w;  y/=w;  z/=w;  if (z < -1 || z > 1) {    return false;  }  x=x * 0.5 + 0.5;  y=y * 0.5 + 0.5;  z=z * 0.5 + 0.5;  x=x * this.viewport.width + this.viewport.x;  y=y * this.viewport.height + this.viewport.y;  result.x=x;  result.y=y;  result.z=z;  return true;}  }
class C{  public static Node serializableInstance(){  return new GraphNode("X");}  }
class C{  public static ImageIcon createImageIcon(String path){  if (path == null) {    return null;  }  java.net.URL imgURL=MultiBitFrame.class.getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    log.error("org.multibit.MultiBitFrame#createImageIcon: Could not find file: " + path);    return null;  }}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  public void partChanged(){}  }
class C{  public String createJournalVolumeName(VirtualArray varray,BlockConsistencyGroup consistencyGroup){  String journalPrefix=new StringBuilder(consistencyGroup.getLabel()).append(VOL_DELIMITER).append(varray.getLabel()).append(VOL_DELIMITER).append(JOURNAL).toString();  List<Volume> existingJournals=getJournalVolumesForSite(varray,consistencyGroup);  List<Volume> newStyleJournals=new ArrayList<Volume>();  for (  Volume journalVol : existingJournals) {    String volName=journalVol.getLabel();    if (volName != null && volName.length() >= journalPrefix.length() && volName.substring(0,journalPrefix.length()).equals(journalPrefix)) {      newStyleJournals.add(journalVol);    }  }  if (newStyleJournals.isEmpty()) {    journalPrefix=journalPrefix.replaceAll("\\s+","");    for (    Volume journalVol : existingJournals) {      String volName=journalVol.getLabel();      if (volName != null && volName.length() >= journalPrefix.length() && volName.substring(0,journalPrefix.length()).equals(journalPrefix)) {        newStyleJournals.add(journalVol);      }    }  }  int largest=0;  for (  Volume journalVol : newStyleJournals) {    String journalVolName=journalVol.getLabel();    if (journalVol.isVPlexVolume(_dbClient)) {      Volume journalBackendVol=VPlexUtil.getVPLEXBackendVolume(journalVol,true,_dbClient);      if (journalBackendVol != null) {        journalVolName=journalBackendVol.getLabel();        journalVolName=journalVolName.substring(0,journalVolName.lastIndexOf("-0"));      }    }    String[] parts=StringUtils.split(journalVolName,VOL_DELIMITER);    try {      int idx=Integer.parseInt(parts[parts.length - 1]);      if (idx > largest) {        largest=idx;      }    } catch (    NumberFormatException e) {      continue;    }  }  String journalName=new StringBuilder(journalPrefix).append(VOL_DELIMITER).append(Integer.toString(largest + 1)).toString();  return journalName;}  }
class C{  public LifecycleException(String message,Throwable throwable){  super();  this.message=message;  this.throwable=throwable;}  }
class C{  public Observable<ImmutableCollection<PreloadItem>> all(){  return queryAllItems().map(null);}  }
class C{  public float latE7ToY(int lat){  return GeoMath.latE7ToY(map.getHeight(),map.getWidth(),viewBox,lat);}  }
class C{  public Map<Integer,Double> compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  static public void inssort(int[] array){  int tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  public void createConfirmPanel(){  Rows rows=new Rows();  Row row=new Row();  m_pnlConfirm.addActionListener(this);  row.appendChild(m_pnlConfirm);  rows.appendChild(row);  m_grdConfirm.appendChild(rows);  return;}  }
class C{  void postAddChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){}  }
class C{  public void onStopDelegate(){  pilotUISyncer.hostActivityOnStopped();}  }
class C{  public void addProtocolLinesFromStream(InputStream is,ProtocolSession session,String fileName) throws Exception {  int sessionNumber=-1;  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  try {    String next;    int lineNumber=-1;    String lastClientMsg="";    while ((next=reader.readLine()) != null) {      String location=fileName + ":" + lineNumber;      if (SERVER_CONTINUATION_TAG.equals(next)) {        session.CONT(sessionNumber);      } else       if (next.startsWith(CLIENT_TAG)) {        String clientMsg="";        if (next.length() > 3) {          clientMsg=next.substring(3);        }        session.CL(sessionNumber,clientMsg);        lastClientMsg=clientMsg;      } else       if (next.startsWith(SERVER_TAG)) {        String serverMsg="";        if (next.length() > 3) {          serverMsg=next.substring(3);        }        session.SL(sessionNumber,serverMsg,location,lastClientMsg);      } else       if (next.startsWith(WAIT)) {        if (next.length() > 5) {          session.WAIT(sessionNumber,Long.valueOf(next.substring(5)));        } else {          throw new Exception("Invalid line length on WAIT instruction : " + next);        }      } else       if (next.startsWith(LOG)) {        String logInstruction=next.substring(4);        if (logInstruction.startsWith(DEBUG)) {          session.LOG(sessionNumber,ProtocolSession.LolLevel.Debug,logInstruction.substring(6));        } else         if (logInstruction.startsWith(INFO)) {          session.LOG(sessionNumber,ProtocolSession.LolLevel.Info,logInstruction.substring(5));        } else         if (logInstruction.startsWith(WARN)) {          session.LOG(sessionNumber,ProtocolSession.LolLevel.Warn,logInstruction.substring(5));        } else         if (logInstruction.startsWith(ERR)) {          session.LOG(sessionNumber,ProtocolSession.LolLevel.Err,logInstruction.substring(4));        } else {          throw new Exception("Unrecognized log level for " + next);        }      } else       if (next.startsWith(OPEN_UNORDERED_BLOCK_TAG)) {        List<String> unorderedLines=new ArrayList<String>(5);        next=reader.readLine();        if (next == null)         throw new Exception("Readline doesn't contain any data, but must not be 'null' (linenumber=" + lineNumber);        while (!next.startsWith(CLOSE_UNORDERED_BLOCK_TAG)) {          if (!next.startsWith(SERVER_TAG)) {            throw new Exception("Only 'S: ' lines are permitted inside a 'SUB {' block.");          }          String serverMsg=next.substring(3);          unorderedLines.add(serverMsg);          next=reader.readLine();          lineNumber++;          if (next == null)           throw new Exception("Readline doesn't contain any data, but must not be 'null' (linenumber=" + lineNumber);        }        session.SUB(sessionNumber,unorderedLines,location,lastClientMsg);      } else       if (next.startsWith(COMMENT_TAG) || next.trim().length() == 0) {      } else       if (next.startsWith(SESSION_TAG)) {        String number=next.substring(SESSION_TAG.length()).trim();        if (number.length() == 0) {          throw new Exception("No session number specified");        }        sessionNumber=Integer.parseInt(number);      } else {        String prefix=next;        if (next.length() > 3) {          prefix=next.substring(0,3);        }        throw new Exception("Invalid line prefix: " + prefix);      }      lineNumber++;    }  }  finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,boolean[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  protected boolean onMouseDown(MouseEvent evt){  return true;}  }
class C{  private ICodeBaseEntry search(List<? extends ICodeBase> codeBaseList,String resourceName){  for (  ICodeBase codeBase : codeBaseList) {    ICodeBaseEntry resource=codeBase.lookupResource(resourceName);    if (resource != null) {      return resource;    }  }  return null;}  }
class C{  public int hammingDistance(BitVector v2){  return BitsUtil.hammingDistance(bits,v2.bits);}  }
class C{  public final void writeFloat(float v) throws IOException {  buffer.putFloat(v);}  }
class C{  public static AndroidCustomField item(String type,String value){  AndroidCustomField property=new AndroidCustomField();  property.dir=false;  property.type=type;  property.values.add(value);  return property;}  }
class C{  public void run(String argv[],int index) throws IOException {  if (should_compare() && argv.length > index + 1) {    compare(argv,index);    return;  }  parse(argv,index);}  }
class C{  public static int add(int x,int y){  int carry;  while (y != 0) {    carry=x & y;    x=x ^ y;    y=carry << 1;  }  return x;}  }
class C{  public AbstractSailImplConfig(String type){  this();  setType(type);}  }
class C{  public void cancel(){  this.handler.cancel();}  }
class C{  public static Collection findAll(Object self,Closure closure){  List answer=new ArrayList();  Iterator iter=InvokerHelper.asIterator(self);  return findAll(closure,answer,iter);}  }
class C{  public static void fill(short[] array,int start,int end,short value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  @InterfaceAudience.Private public Referenceable(String guid,String typeName,Map<String,Object> values,List<String> _traitNames,Map<String,IStruct> _traits){  super(typeName,values);  id=new Id(guid,0,typeName);  traitNames=ImmutableList.copyOf(_traitNames);  traits=ImmutableMap.copyOf(_traits);}  }
class C{  int size(ConstantPool tab){switch (opc) {case opc_try:case opc_label:case opc_dead:    return 0;case opc_bipush:case opc_newarray:  return 2;case opc_sipush:case opc_goto:case opc_jsr:case opc_ifeq:case opc_ifne:case opc_ifgt:case opc_ifge:case opc_iflt:case opc_ifle:case opc_ifnull:case opc_ifnonnull:case opc_if_acmpeq:case opc_if_acmpne:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpgt:case opc_if_icmpge:case opc_if_icmplt:case opc_if_icmple:return 3;case opc_ldc:case opc_ldc_w:if (tab.index(value) < 256) {opc=opc_ldc;return 2;} else {opc=opc_ldc_w;return 3;}case opc_iload:case opc_lload:case opc_fload:case opc_dload:case opc_aload:{int v=((Number)value).intValue();if (v < 4) {if (v < 0) {  throw new CompilerError("invalid slot: " + toString() + "\nThis error possibly resulted from poorly constructed class paths.");}opc=opc_iload_0 + (opc - opc_iload) * 4 + v;return 1;} else if (v <= 255) {return 2;} else {opc+=256;return 4;}}case opc_iinc:{int register=((int[])value)[0];int increment=((int[])value)[1];if (register < 0) {throw new CompilerError("invalid slot: " + toString());}if (register <= 255 && (((byte)increment) == increment)) {return 3;} else {opc+=256;return 6;}}case opc_istore:case opc_lstore:case opc_fstore:case opc_dstore:case opc_astore:{int v=(value instanceof Number) ? ((Number)value).intValue() : ((LocalVariable)value).slot;if (v < 4) {if (v < 0) {throw new CompilerError("invalid slot: " + toString());}opc=opc_istore_0 + (opc - opc_istore) * 4 + v;return 1;} else if (v <= 255) {return 2;} else {opc+=256;return 4;}}case opc_ret:{int v=((Number)value).intValue();if (v <= 255) {if (v < 0) {throw new CompilerError("invalid slot: " + toString());}return 2;} else {opc+=256;return 4;}}case opc_ldc2_w:case opc_new:case opc_putstatic:case opc_getstatic:case opc_putfield:case opc_getfield:case opc_invokevirtual:case opc_invokespecial:case opc_invokestatic:case opc_instanceof:case opc_checkcast:case opc_anewarray:return 3;case opc_multianewarray:return 4;case opc_invokeinterface:case opc_goto_w:case opc_jsr_w:return 5;case opc_tableswitch:{SwitchData sw=(SwitchData)value;int n=1;for (; ((pc + n) % 4) != 0; n++) ;return n + 16 + (sw.maxValue - sw.minValue) * 4;}case opc_lookupswitch:{SwitchData sw=(SwitchData)value;int n=1;for (; ((pc + n) % 4) != 0; n++) ;return n + 8 + sw.tab.size() * 8;}case opc_nop:if ((value != null) && !(value instanceof Integer)) return 2; else return 1;}return 1;}  }
class C{  public void removeFirst(){  remove(innerChain.getFirst());}  }
class C{  public Network owner(){  return owner;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void registerDebugEvents() throws FloodlightModuleException {  if (debugEventService == null) {    debugEventService=new MockDebugEventService();  }  evSwitch=debugEventService.buildEvent(SwitchEvent.class).setModuleName(this.counters.getPrefix()).setEventName("switch-event").setEventDescription("Switch connected, disconnected or port changed").setEventType(EventType.ALWAYS_LOG).setBufferCapacity(100).register();}  }
class C{  public void markUnexplored(IGraphEntity n){  unexplored.add(getKey(n));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ContentImpl createCompoundPackageContent(OleBlobImpl blob,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){  return new CompoundContentImpl(blob,prettyName,className,typeName,blobBb.position(),dataBlockLen);}  }
class C{  default B power(final FireworkMeta src){  this.meta().setPower(src.getPower());  return this.getBuilder();}  }
class C{  public static boolean parseAndHandle(final String input){  final String text=input.trim();  if (text.length() == 0) {    return false;  }  if (text.charAt(0) == '/') {    final SlashActionCommand command=SlashActionParser.parse(text.substring(1));    final String[] params=command.getParams();    if (command.hasError()) {      ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(command.getErrorString(),NotificationType.ERROR));      return false;    }    if (command.getAction() != null) {      return command.getAction().execute(params,command.getRemainder());    } else {      final RPAction extension=new RPAction();      extension.put("type",command.getName());      if ((params.length > 0) && (params[0] != null)) {        extension.put("target",params[0]);        extension.put("args",command.getRemainder());      }      ClientSingletonRepository.getClientFramework().send(extension);      return true;    }  } else {    final RPAction chat=new RPAction("chat");    chat.put("type","chat");    chat.put("text",text);    ClientSingletonRepository.getClientFramework().send(chat);    return true;  }}  }
class C{  public void deleteReplicationSet(RecoverPointVolumeProtectionInfo volume) throws RecoverPointException {  List<RecoverPointVolumeProtectionInfo> wrapper=new ArrayList<RecoverPointVolumeProtectionInfo>();  wrapper.add(volume);  deleteReplicationSets(wrapper);}  }
class C{  public ChannelFuture sendFuture(Class<? extends Protocol> packetProtocol) throws Exception {  if (!isCancelled()) {    ByteBuf output=constructPacket(packetProtocol,true);    return user().sendRawPacketFuture(output);  }  return user().getChannel().newFailedFuture(new Exception("Cancelled packet"));}  }
class C{  public void writeCustomObject(Object object) throws IOException {  throw new IOException("unexpected object: " + object);}  }
class C{  PsTwitter(final com.jcabi.http.Request tkn,final com.jcabi.http.Request creds,final String name,final String keys){  this.token=tkn;  this.user=creds;  this.app=name;  this.key=keys;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.712 -0500",hash_original_method="F1036F08BD30FBFF0AA178D5C9E11EFA",hash_generated_method="E874AAF50216E03F55E0EAFE623DD815") public CallIDParser(String callID){  super(callID);}  }
class C{  public <T>T createObject(Class<T> clazz,URI context) throws RepositoryException, IllegalAccessException, InstantiationException {  return createObject(clazz,context,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  XPathContext xpathSupport=new XPathContext(false);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  private Object reduceMethod(Context cx,int id,Scriptable scope,Scriptable thisObj,Object[] args){  Object callbackArg=args.length > 0 ? args[0] : Undefined.instance;  if (callbackArg == null || !(callbackArg instanceof Function)) {    throw ScriptRuntime.notFunctionError(callbackArg);  }  Function f=(Function)callbackArg;  Scriptable parent=ScriptableObject.getTopLevelScope(f);  long length=getLengthProperty(cx,thisObj);  long offset=id == Id_reduceRight ? length - 1 : 0;  Object value=args.length > 1 ? args[1] : Scriptable.NOT_FOUND;  for (long i=0; i < length; i++) {    Object elem=getRawElem(thisObj,Math.abs(i - offset));    if (elem == Scriptable.NOT_FOUND) {      continue;    }    if (value == Scriptable.NOT_FOUND) {      value=elem;    } else {      Object[] innerArgs=new Object[4];      innerArgs[0]=value;      innerArgs[1]=elem;      innerArgs[2]=Long.valueOf(i);      innerArgs[3]=thisObj;      value=f.call(cx,parent,parent,innerArgs);    }  }  if (value == Scriptable.NOT_FOUND) {    throw ScriptRuntime.typeError0("msg.empty.array.reduce");  }  return value;}  }
class C{  public void testDivideRoundHalfEvenNeg1(){  String a="-92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="-1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Deprecated public void testBug3103() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3103");    if (versionMeetsMinimum(5,6,4)) {      this.stmt.executeUpdate("CREATE TABLE testBug3103 (field1 DATETIME(3))");    } else {      this.stmt.executeUpdate("CREATE TABLE testBug3103 (field1 DATETIME)");    }    PreparedStatement pStmt=this.conn.prepareStatement("INSERT INTO testBug3103 VALUES (?)");    java.util.Date utilDate=new java.util.Date();    pStmt.setObject(1,utilDate);    pStmt.executeUpdate();    this.rs=this.stmt.executeQuery("SELECT field1 FROM testBug3103");    this.rs.next();    java.util.Date retrUtilDate=new java.util.Date(this.rs.getTimestamp(1).getTime());    assertTrue("Dates not equal",(utilDate.getMonth() == retrUtilDate.getMonth()) && (utilDate.getDate() == retrUtilDate.getDate()) && (utilDate.getYear() == retrUtilDate.getYear())&& (utilDate.getHours() == retrUtilDate.getHours())&& (utilDate.getMinutes() == retrUtilDate.getMinutes())&& (utilDate.getSeconds() == retrUtilDate.getSeconds()));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3103");  }}  }
class C{  @Override public void redo() throws CannotRedoException {  super.redo();  try {    getSetter().invoke(source,newValue);  } catch (  Exception e) {    InternalError ie=new InternalError("Couldn't invoke setter for property \"" + propertyName + "\" in "+ source);    ie.initCause(e);    throw ie;  }}  }
class C{  @Override public Object toObject(ByteBuffer content,Type targetType) throws BeanConversionException {  try {    String str=Charset.defaultCharset().decode(content).toString();    JAXBContext jaxbContext=null;    if (targetType instanceof Class) {      jaxbContext=JAXBContext.newInstance((Class)targetType);      return jaxbContext.createUnmarshaller().unmarshal(new StringReader(str));    }  } catch (  JAXBException e) {    throw new BeanConversionException("Unable to perform xml to object conversion",e);  }  return null;}  }
class C{  void removeInternal(Status status){  statuses.remove(status);}  }
class C{  public boolean isAlive(){  return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();}  }
class C{  public BatchPutIfAbsent(){}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public boolean hasInReplyTo(){  return hasExtension(InReplyTo.class);}  }
class C{  public Twitter(){  tweetList=new ArrayList<Integer>();  userList=new ArrayList<Integer>();  followMap=new HashMap<Integer,Map<Integer,Integer>>();}  }
class C{  private static void byte2bin(byte b,StringBuffer buf){  for (int i=0; i < 8; i++) {    if ((b & COMPARE_BITS[i]) != 0) {      buf.append(BIT_DIGIT[1]);    } else {      buf.append(BIT_DIGIT[0]);    }  }}  }
class C{  public boolean isDestructuring(){  return isDestructuring;}  }
class C{  public boolean createXML(String fileName){  try {    File file=new File(fileName);    file.createNewFile();    StreamResult result=new StreamResult(file);    createXML(result);  } catch (  Exception e) {    log.log(Level.SEVERE,"(file)",e);    return false;  }  return true;}  }
class C{  public void installOrderEffectiveness(OrderEffectiveness orderEffectiveness){  if (grouping != null) {    AggregateSource.Implementation implementation;switch (orderEffectiveness) {case SORTED:case GROUPED:      implementation=AggregateSource.Implementation.PRESORTED;    break;case PARTIAL_GROUPED:  implementation=AggregateSource.Implementation.PREAGGREGATE_RESORT;break;default :implementation=AggregateSource.Implementation.SORT;break;}grouping.setImplementation(implementation);}if (ordering != null) {if (orderEffectiveness == IndexScan.OrderEffectiveness.SORTED) {ordering.getOutput().replaceInput(ordering,ordering.getInput());}}if (projectDistinct != null) {Distinct distinct=(Distinct)projectDistinct.getOutput();Distinct.Implementation implementation;switch (orderEffectiveness) {case SORTED:implementation=Distinct.Implementation.PRESORTED;break;default :implementation=Distinct.Implementation.SORT;break;}distinct.setImplementation(implementation);}}  }
class C{  @Override public String toString(){  return degrees() + "d";}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  @Override protected int sizeOf(MemoryCacheKey key,Bitmap bitmap){  if (bitmap == null)   return 0;  return bitmap.getRowBytes() * bitmap.getHeight();}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.412 -0500",hash_original_method="690593276EDD66C533F49BEE09E9C663",hash_generated_method="246273E126350628D3C7920EF6CDCCD5") public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public AlphaBlockDXT3(){}  }
class C{  protected static int discoverBottomSet(int entryIndex,ArrayList<ChartSet> data){  int dataSize=data.size();  int index;  for (index=0; index < dataSize; index++) {    if (data.get(index).getEntry(entryIndex).getValue() == 0)     continue;    break;  }  return index;}  }
class C{  private void zzScanError(final int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  final ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static Stamp unsignedCompare(Stamp stamp,Stamp stamp2){  IntegerStamp x=(IntegerStamp)stamp;  IntegerStamp y=(IntegerStamp)stamp2;  if (x == x.unrestricted() && y == y.unrestricted()) {    return null;  }  if (x.lowerBound() == x.upperBound()) {    if (y.isPositive()) {      if (x.lowerBound() == (1 << x.getBits()) - 1) {        return null;      }      if (x.lowerBound() <= y.lowerBound()) {        return null;      }      return StampFactory.forInteger(x.getBits(),x.lowerBound() + 1,y.upperBound());    }    return null;  }  if (y.lowerBound() == y.upperBound() && y.isStrictlyPositive()) {    return StampFactory.forInteger(y.getBits(),0,y.lowerBound() - 1);  }  return null;}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  PrintWriter outW=null;  if ((getRetrieval() == BATCH) || (getRetrieval() == NONE)) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (getWriter() != null) {    outW=new PrintWriter(getWriter());  }  if (writeMode == WAIT) {    if (structure == null) {      setWriteMode(CANCEL);      if (inst != null) {        System.err.println("Structure (Header Information) has to be set in advance");      }    } else {      setWriteMode(STRUCTURE_READY);    }    writeMode=getWriteMode();  }  if (writeMode == CANCEL) {    if (outW != null) {      outW.close();    }    cancel();  }  if (writeMode == STRUCTURE_READY) {    setWriteMode(WRITE);    if ((retrieveFile() == null) && (outW == null)) {      System.out.println(matlabHeader());    } else {      outW.println(matlabHeader());    }    writeMode=getWriteMode();  }  if (writeMode == WRITE) {    if (structure == null) {      throw new IOException("No instances information available.");    }    if (inst != null) {      if ((retrieveFile() == null) && (outW == null)) {        System.out.println(instanceToMatlab(inst));      } else {        outW.println(instanceToMatlab(inst));        m_incrementalCounter++;        if (m_incrementalCounter > 100) {          m_incrementalCounter=0;          outW.flush();        }      }    } else {      if (outW != null) {        outW.flush();        outW.close();      }      m_incrementalCounter=0;      resetStructure();      outW=null;      resetWriter();    }  }}  }
class C{  public MetacatException(String message,Response.Status status,Throwable cause){  this(Response.status(status).type(MediaType.APPLICATION_JSON_TYPE).entity(metacatJson.emptyObjectNode().put("error",message)).build(),cause == null ? new Exception(message) : cause);}  }
class C{  @Override public void store(PreloadItem entry){  ContentValues values=new ContentValues();  values.put("itemId",entry.itemId());  values.put("creation",entry.creation().getMillis());  values.put("media",entry.media().getPath());  values.put("thumbnail",entry.thumbnail().getPath());  db().insert(TABLE_NAME,values,SQLiteDatabase.CONFLICT_REPLACE);}  }
class C{  protected byte[] engineGetIV(){  return core.getIV();}  }
class C{  private static void removeTarget(Target target){  ObjectEndpoint oe=target.getObjectEndpoint();  WeakRef weakImpl=target.getWeakImpl();  if (DGCImpl.dgcLog.isLoggable(Log.VERBOSE)) {    DGCImpl.dgcLog.log(Log.VERBOSE,"remove object " + oe);  }  objTable.remove(oe);  implTable.remove(weakImpl);  target.markRemoved();}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm,String message){  super(algorithm,message);}  }
class C{  private void swapHeapValues(int i,int j){  if (fastValueRemove == Mode.HASH) {    valueIndexMap.put(heap[i],j);    valueIndexMap.put(heap[j],i);  } else   if (fastValueRemove == Mode.BOUNDED) {    valueIndexStore[heap[i]]=j;    valueIndexStore[heap[j]]=i;  }  int tmp=heap[i];  heap[i]=heap[j];  heap[j]=tmp;}  }
class C{  private static String readRequestTemplate(){  InputStream in=WinRMRequest.class.getResourceAsStream("WinRMRequest.xml");  try {    return IOUtils.toString(in,"UTF-8");  } catch (  IOException e) {    throw new Error(e);  }}  }
class C{  public void resume(){  startTime+=System.currentTimeMillis() - pauseTime;}  }
class C{  public void testNonBlockingStop_MiddleLink() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  Fixture f=new Fixture(2,false,0,false);  f.simEngine.doSimStep(100);  assertEquals(0,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(101);  f.simEngine.doSimStep(101);  assertEquals(1,f.qlink2.getAllVehicles().size());  MobsimVehicle[] vehicles=f.qlink2.getAllVehicles().toArray(new MobsimVehicle[2]);  assertEquals(f.transitVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(102);  f.simEngine.doSimStep(102);  assertEquals(2,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(f.normalVehicle,vehicles[1]);  f.qsim.getSimTimer().setTime(200);  f.simEngine.doSimStep(200);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(201);  f.simEngine.doSimStep(201);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(202);  f.simEngine.doSimStep(202);  assertEquals(2,f.qlink2.getAllVehicles().size());  f.qsim.getSimTimer().setTime(203);  f.simEngine.doSimStep(203);  assertEquals(1,f.qlink2.getAllVehicles().size());  vehicles=f.qlink2.getAllVehicles().toArray(vehicles);  assertEquals(f.transitVehicle,vehicles[0]);  assertEquals(1,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.normalVehicle,vehicles[0]);  f.qsim.getSimTimer().setTime(204);  f.simEngine.doSimStep(204);  assertEquals(1,f.qlink2.getAllVehicles().size());  assertEquals(1,f.qlink3.getAllVehicles().size());  f.qsim.getSimTimer().setTime(219);  f.simEngine.doSimStep(219);  assertEquals(1,f.qlink2.getAllVehicles().size());  assertEquals(1,f.qlink3.getAllVehicles().size());  f.qsim.getSimTimer().setTime(220);  f.simEngine.doSimStep(220);  assertEquals(1,f.qlink2.getAllVehicles().size());  assertEquals(1,f.qlink3.getAllVehicles().size());  f.qsim.getSimTimer().setTime(221);  f.simEngine.doSimStep(221);  assertEquals(2,f.qlink3.getAllVehicles().size());  vehicles=f.qlink3.getAllVehicles().toArray(vehicles);  assertEquals(f.normalVehicle,vehicles[0]);  assertEquals(f.transitVehicle,vehicles[1]);}  }
class C{  public DecoderException(String pMessage){  super(pMessage);}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static ContactListAdapter createContactListAdapter(Context context,String defaultValue){  ContentResolver content=context.getContentResolver();  Cursor cursor=null;  try {    cursor=content.query(Phone.CONTENT_URI,PROJECTION_PHONE,WHERE_CLAUSE_PHONE,null,null);    if (cursor == null) {      throw new SQLException("Query failed!");    }    Set<ContactId> treatedNumbers=new HashSet<>();    MatrixCursor matrix=new MatrixCursor(PROJECTION_PHONE);    if (defaultValue != null) {      matrix.addRow(new Object[]{-1,defaultValue,"",-1,-1});    }    int columnIdxId=cursor.getColumnIndexOrThrow(Phone._ID);    int columIdxLabel=cursor.getColumnIndexOrThrow(Phone.LABEL);    int columnIdxType=cursor.getColumnIndexOrThrow(Phone.TYPE);    int columnIdxContactId=cursor.getColumnIndexOrThrow(Phone.CONTACT_ID);    int columnIdxNumber=cursor.getColumnIndexOrThrow(Phone.NUMBER);    while (cursor.moveToNext()) {      String phoneNumber=cursor.getString(columnIdxNumber);      if (!ContactUtil.isValidContact(phoneNumber)) {        continue;      }      ContactId contact=ContactUtil.formatContact(phoneNumber);      if (!treatedNumbers.contains(contact)) {        matrix.addRow(new Object[]{cursor.getLong(columnIdxId),contact.toString(),cursor.getString(columIdxLabel),cursor.getInt(columnIdxType),cursor.getLong(columnIdxContactId)});        treatedNumbers.add(contact);      }    }    return new ContactListAdapter(context,matrix);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  protected PotentialProducer(WorkspaceComponent parent,Object baseObject,String methodName,Class<?> dataType,Class<?>[] argDataTypes,Object[] argValues,String description){  super(parent,baseObject,methodName,dataType,argDataTypes,argValues,description);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__BASE_TYPE:    setBaseType((PrimitiveType)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public double accuracyLon(){  return Math.abs(int2coord(1) - int2coord(2));}  }
class C{  public static void copyToClipboard(String text){  Clipboard c=Toolkit.getDefaultToolkit().getSystemClipboard();  c.setContents(new StringSelection(text),null);}  }
class C{  public AlgVector(Instances format,Random random) throws Exception {  int len=format.numAttributes();  for (int i=0; i < format.numAttributes(); i++) {    if (!format.attribute(i).isNumeric())     len--;  }  if (len > 0) {    m_Elements=new double[len];    initialize(random);  }}  }
class C{  public InfoModelMappingModel createInfoModelMappingModel(){  InfoModelMappingModelImpl infoModelMappingModel=new InfoModelMappingModelImpl();  return infoModelMappingModel;}  }
class C{  public static void main(String[] args){  PlayerControl simulation=new PlayerControl();  simulation.run();}  }
class C{  public LevelGreaterThanCondition(final int level){  this.level=level;}  }
class C{  @Override public void update(ClassifyTab owner,JMenuItem menuitem){}  }
class C{  public static float[] centroidXY(int w,int h,BoundingBox v,final Way way){  if (way == null) {    return null;  }  List<Node> vertices=way.getNodes();  if (way.isClosed()) {    double A=0;    double Y=0;    double X=0;    int vs=vertices.size();    for (int i=0; i < vs; i++) {      double x1=GeoMath.lonE7ToX(w,v,vertices.get(i).getLon());      double y1=GeoMath.latE7ToY(h,w,v,vertices.get(i).getLat());      double x2=GeoMath.lonE7ToX(w,v,vertices.get((i + 1) % vs).getLon());      double y2=GeoMath.latE7ToY(h,w,v,vertices.get((i + 1) % vs).getLat());      double d=x1 * y2 - x2 * y1;      A=A + d;      X=X + (x1 + x2) * d;      Y=Y + (y1 + y2) * d;    }    Y=Y / (3 * A);    X=X / (3 * A);    float result[]={(float)X,(float)Y};    return result;  } else {    double L=0;    double Y=0;    double X=0;    int vs=vertices.size();    for (int i=0; i < (vs - 1); i++) {      double x1=GeoMath.lonE7ToX(w,v,vertices.get(i).getLon());      double y1=GeoMath.latE7ToY(h,w,v,vertices.get(i).getLat());      double x2=GeoMath.lonE7ToX(w,v,vertices.get(i + 1).getLon());      double y2=GeoMath.latE7ToY(h,w,v,vertices.get(i + 1).getLat());      double len=Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));      L=L + len;      X=X + len * (x1 + x2) / 2;      Y=Y + len * (y1 + y2) / 2;    }    Y=Y / L;    X=X / L;    float result[]={(float)X,(float)Y};    return result;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYGON;    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    ArrayList<com.vividsolutions.jts.geom.Geometry> pointList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    for (    ShapeFileRecord record : input.records) {      recJTS=record.getGeometry().getJTSGeometries();switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}double minX=Double.MAX_VALUE;double maxX=Double.MIN_VALUE;double minY=Double.MAX_VALUE;double maxY=Double.MIN_VALUE;for (i=0; i < vertices.length; i++) {Coordinate coordinate=new Coordinate();coordinate.x=vertices[i][0];coordinate.y=vertices[i][1];pointList.add(factory.createPoint(coordinate));if (vertices[i][0] < minX) {minX=vertices[i][0];}if (vertices[i][0] > maxX) {maxX=vertices[i][0];}if (vertices[i][1] < minY) {minY=vertices[i][1];}if (vertices[i][1] > maxY) {maxY=vertices[i][1];}}Envelope env=new Envelope(minX,maxX,minY,maxY);com.vividsolutions.jts.geom.Geometry geom=factory.buildGeometry(pointList);DelaunayTriangulationBuilder vdb=new DelaunayTriangulationBuilder();vdb.setSites(geom);com.vividsolutions.jts.geom.Geometry vd=vdb.getTriangles(factory);for (int a=0; a < vd.getNumGeometries(); a++) {com.vividsolutions.jts.geom.Geometry g=vd.getGeometryN(a);if (g instanceof com.vividsolutions.jts.geom.Polygon) {com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int[] parts=new int[p.getNumInteriorRing() + 1];Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Exterior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}for (int b=0; b < p.getNumInteriorRing(); b++) {parts[b + 1]=pnts.size();buffCoords=p.getInteriorRingN(b).getCoordinates();if (!Topology.isLineClosed(buffCoords)) {System.out.println("Interior ring not closed.");}if (Topology.isClockwisePolygon(buffCoords)) {for (i=buffCoords.length - 1; i >= 0; i--) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}} else {for (i=0; i < buffCoords.length; i++) {pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));}}}PointsList pl=new PointsList(pnts);whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());Object[] rowData=new Object[1];rowData[0]=new Double(record.getRecordNumber());output.addRecord(wbPoly);}}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private Hotkey listToHotkey(List list){  try {    String actionId=(String)list.get(0);    KeyStroke keyStroke=KeyStroke.getKeyStroke((String)list.get(1));    if (keyStroke == null) {      LOGGER.warning("Error loading hotkey, invalid: " + list);      return null;    }    Type type=Hotkey.Type.REGULAR;    String custom="";    int delay=0;    if (list.size() > 2) {      type=Hotkey.Type.getTypeFromId(((Number)list.get(2)).intValue());    }    if (list.size() > 3) {      custom=(String)list.get(3);    }    if (list.size() > 4) {      delay=((Number)list.get(4)).intValue();    }    return new Hotkey(actionId,keyStroke,type,custom,delay);  } catch (  IndexOutOfBoundsException|NullPointerException|ClassCastException ex) {    LOGGER.warning("Error loading hotkey: " + list + " ["+ ex+ "]");    return null;  }}  }
class C{  public XYValueSeriesTransition(ChartComponent chart,XYValueSeries series){  super(chart);  this.series=series;}  }
class C{  public static java.lang.String valueOf(long l){  return null;}  }
class C{  public BuyClientBuilder shopDomain(final String shopDomain){  this.shopDomain=shopDomain;  return this;}  }
class C{  public void removeNodeMetaData(Object key){  if (key == null)   throw new GroovyBugError("Tried to remove meta data with null key " + this + ".");  if (metaDataMap == null) {    return;  }  metaDataMap.remove(key);}  }
class C{  public static int availableProcessors(){  Runtime runtime=Runtime.getRuntime();  try {    return ((Integer)runtime.getClass().getMethod("availableProcessors",(Class[])null).invoke(runtime,(Object[])null)).intValue();  } catch (  Exception e) {    return 1;  }}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static byte[] encode(byte[] input){  return Base64.encode(input,BASE64_FLAG);}  }
class C{  @Override public MemBufferHolder<VolatileMemAllocator> retrieveBuffer(long phandler,boolean autoreclaim){  MemBufferHolder<VolatileMemAllocator> ret=null;  ByteBuffer bb=m_vmasvc.retrieveByteBuffer(m_nid,getEffectiveAddress(phandler));  if (null != bb) {    ret=new MemBufferHolder<VolatileMemAllocator>(this,bb);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public Complex subtract(Complex secondComplex){  return new Complex(a - secondComplex.a,b - secondComplex.b);}  }
class C{  private void onPut(ArrayList<WatchEntry> list,byte[] key){  if (list != null) {    int size=list.size();    for (int i=0; i < size; i++) {      WatchEntry entry=list.get(i);      RowCursor rowCursor=_table.cursor();      rowCursor.setKey(key,0);      EnvKelp envKelp=null;      CursorKraken cursor=new CursorKraken(table(),envKelp,rowCursor,_results);      entry.onPut(cursor);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Vec3D scaleSelf(float a,float b,float c){  x*=a;  y*=b;  z*=c;  return this;}  }
class C{  public Builder rotate(float degrees){  rotationDegrees=degrees;  return this;}  }
class C{  @Override public String toString(){  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);}  }
class C{  private Oplog[] filterBaselineOplogs(BackupInspector baselineInspector,Map<File,File> baselineCopyMap) throws IOException {  File baselineDir=new File(baselineInspector.getBackupDir(),BackupManager.DATA_STORES);  baselineDir=new File(baselineDir,getBackupDirName());  List<File> baselineOplogFiles=FileUtil.findAll(baselineDir,".*\\.[kdc]rf$");  List<Oplog> oplogList=new LinkedList<Oplog>();  Oplog[] allOplogs=getAllOplogsForBackup();  for (  Oplog log : allOplogs) {    Map<File,File> oplogMap=log.mapBaseline(baselineOplogFiles);    if (oplogMap.isEmpty() && baselineInspector.isIncremental()) {      Set<String> matchingOplogs=log.gatherMatchingOplogFiles(baselineInspector.getIncrementalOplogFileNames());      if (!matchingOplogs.isEmpty()) {        for (        String matchingOplog : matchingOplogs) {          oplogMap.put(new File(baselineInspector.getCopyFromForOplogFile(matchingOplog)),new File(baselineInspector.getCopyToForOplogFile(matchingOplog)));        }      }    }    if (oplogMap.isEmpty()) {      oplogList.add(log);    } else {      baselineCopyMap.putAll(oplogMap);    }  }  return oplogList.toArray(new Oplog[]{});}  }
class C{  private void checkSchema() throws IgniteSpiException {  try {    U.await(initLatch);  } catch (  IgniteInterruptedCheckedException e) {    throw new IgniteSpiException("Thread has been interrupted.",e);  }  Connection conn=null;  Statement stmt=null;  try {    conn=dataSrc.getConnection();    conn.setTransactionIsolation(TRANSACTION_READ_COMMITTED);    stmt=conn.createStatement();    stmt.execute(chkQry);  } catch (  SQLException e) {    throw new IgniteSpiException("IP finder has not been properly initialized.",e);  } finally {    U.closeQuiet(stmt);    U.closeQuiet(conn);  }}  }
class C{  public ScriptedRandomSource(){  final String property=System.getProperty(SCRIPTED_RANDOM_PROPERTY,"1,2,3");  final int length=property.split(",").length;  final StringTokenizer tokenizer=new StringTokenizer(property,",");  m_numbers=new int[length];  for (int i=0; i < m_numbers.length; i++) {    final String token=tokenizer.nextToken();    if (token.equals("e")) {      m_numbers[i]=ERROR;    } else     if (token.equals("p")) {      m_numbers[i]=PAUSE;    } else {      m_numbers[i]=Integer.parseInt(token) - 1;    }  }}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  public boolean checkMasterStatus(SearchFilter searchFilter){  if (currentProtocol != null) {    pingMasterProtocol(currentProtocol);  }  return false;}  }
class C{  public Matrix4f m20(float m20){  this.m20=m20;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public static MetaKey fromString(final String string){  final int idx=string.indexOf(':');  if (idx < 1) {    return null;  }  if (idx + 1 >= string.length()) {    return null;  }  return new MetaKey(string.substring(0,idx),string.substring(idx + 1),true);}  }
class C{  public SynapseGroupNodeVisible(final NetworkPanel networkPanel,final SynapseGroup group){  super(networkPanel,group);  outlinedObjects.setPaint(null);}  }
class C{  public static Map<String,float[]> readEmbeddingFileTxt(File file,boolean hasHeader) throws IOException {  LOG.info("Reading embeddings from file " + file);  InputStream is=CompressionUtils.getInputStream(file.getAbsolutePath(),new FileInputStream(file));  return readEmbeddingFileTxt(is,hasHeader);}  }
class C{  public GridMetadataAwareAdapterSelfTest(){  super(false);}  }
class C{  public boolean scrollTo(int line,int offset){  if (visibleLines == 0) {    setFirstLine(Math.max(0,line - electricScroll));    return true;  }  int newFirstLine=firstLine;  int newHorizontalOffset=horizontalOffset;  if (line < firstLine + electricScroll) {    newFirstLine=Math.max(0,line - electricScroll);  } else   if (line + electricScroll >= firstLine + visibleLines) {    newFirstLine=(line - visibleLines) + electricScroll + 1;    if (newFirstLine + visibleLines >= getLineCount()) {      newFirstLine=getLineCount() - visibleLines;    }    if (newFirstLine < 0) {      newFirstLine=0;    }  }  int x=_offsetToX(line,offset);  int width=painter.getFontMetrics().charWidth('w');  if (x < 0) {    newHorizontalOffset=Math.min(0,horizontalOffset - x + width + 5);  } else   if (x + width >= painter.getWidth()) {    newHorizontalOffset=horizontalOffset + (painter.getWidth() - x) - width - 5;  }  return setOrigin(newFirstLine,newHorizontalOffset);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STATE_MACHINE___ENUM_1:    getEnum_1().clear();  return;case UmplePackage.STATE_MACHINE___INLINE_STATE_MACHINE_1:getInlineStateMachine_1().clear();return;case UmplePackage.STATE_MACHINE___REFERENCED_STATE_MACHINE_1:getReferencedStateMachine_1().clear();return;case UmplePackage.STATE_MACHINE___ACTIVE_DEFINITION_1:getActiveDefinition_1().clear();return;}super.eUnset(featureID);}  }
class C{  public RCDoubleMatrix2D(double[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  StringVector processPREFIX_URLLIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    String prefix=tokenizer.nextToken();    String url=handler.getNamespaceForPrefix(prefix);    if (url != null)     strings.addElement(url); else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));  }  return strings;}  }
class C{  private boolean possibleMatch(TimePattern other,boolean strongComparison){  if (!getNrMeetings().equals(other.getNrMeetings()))   return false;  if (!getMinPerMtg().equals(other.getMinPerMtg()))   return false;  if (strongComparison && !getBreakTime().equals(other.getBreakTime()))   return false;  if (strongComparison && !getSlotsPerMtg().equals(other.getSlotsPerMtg()))   return false;  return (true);}  }
class C{  public int lastIndexOf(Object obj){  return this.hlist.lastIndexOf(obj);}  }
class C{  public String toString(){  return "width=" + width + ", height="+ height+ ", size="+ getSize()+ ", etag="+ etag;}  }
class C{  public HttpMethodInfo build() throws HandlerException {  if (httpMethodInfo == null) {    httpMethodInfo=(new HttpResourceModelProcessor(httpResourceModel)).buildHttpMethodInfo(request,responder,groupValues);  }  return httpMethodInfo;}  }
class C{  public static void closeIgnoringExceptions(AutoCloseable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    Exception e) {      LOG.log(Level.WARNING,String.format("Failed to close %s",closeable),e);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void populateComboBoxItems(){  if (comboBox != null && items != null) {    comboBox.removeAll();    for (int i=0; i < items.length; i++) {      comboBox.add(items[i],i);    }    setValueValid(true);  }}  }
class C{  public void onGroupExpand(int groupPosition){}  }
class C{  byte[] transceive(byte[] data,boolean raw) throws IOException {  checkConnected();  try {    TransceiveResult result=mTag.getTagService().transceive(mTag.getServiceHandle(),data,raw);    if (result == null) {      throw new IOException("transceive failed");    } else {      return result.getResponseOrThrow();    }  } catch (  RemoteException e) {    Log.e(TAG,"NFC service dead",e);    throw new IOException("NFC service died");  }}  }
class C{  public SimpleDependencyListener(GraphBuilder builder){  this.graphBuilder=builder;}  }
class C{  public static short[] toShortArray(char[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(short)array[i];  }  return result;}  }
class C{  public void checkJournalDirectory(){  File journalDir=configuration.getJournalLocation();  if (!journalDir.exists() && configuration.isPersistenceEnabled()) {    if (configuration.isCreateJournalDir()) {      journalDir.mkdirs();    } else {      throw ActiveMQMessageBundle.BUNDLE.cannotCreateDir(journalDir.getAbsolutePath());    }  }}  }
class C{  public InMemoryDocument(final byte[] bytes,final String name,final MimeType mimeType){  this.bytes=bytes;  this.name=name;  this.mimeType=mimeType;}  }
class C{  public void addLabel(Label label){  assertNotNull(label);  labels.add(label);  label.setParent(this);}  }
class C{  public boolean isValid(){  return m_valid;}  }
class C{  public static ProbCNFGrammar buildTrivialGrammar(){  ProbCNFGrammar g=new ProbCNFGrammar();  ArrayList<Rule> rules=new ArrayList<Rule>();  rules.add(new Rule("S","NP,VP",(float)1.0));  rules.add(new Rule("NP","ARTICLE,NOUN",(float)0.50));  rules.add(new Rule("NP","PRONOUN,ADVERB",(float)0.5));  rules.add(new Rule("VP","VERB,NP",(float)1.0));  Lexicon trivLex=LexiconExamples.buildTrivialLexicon();  ArrayList<Rule> terminalRules=new ArrayList<Rule>(trivLex.getAllTerminalRules());  rules.addAll(terminalRules);  if (!g.addRules(rules)) {    return null;  }  return g;}  }
class C{  protected <T extends AbstractTenantResource>List<NamedElementQueryResultList.NamedElement> filterTenantResourcesByTenant(URI tenantId,Class<T> clazz,List<NamedElementQueryResultList.NamedElement> elements){  if (CollectionUtils.isEmpty(elements)) {    return elements;  }  URI localTenantId=tenantId;  if (NullColumnValueGetter.isNullURI(localTenantId) || AbstractTenantResource.NO_TENANT_SELECTOR.equalsIgnoreCase(localTenantId.toString())) {    return elements;  }  if (AbstractDiscoveredTenantResource.TENANT_SELECTOR_FOR_UNASSIGNED.equalsIgnoreCase(localTenantId.toString())) {    localTenantId=NullColumnValueGetter.getNullURI();  }  Iterator<NamedElementQueryResultList.NamedElement> elementIterator=elements.iterator();  while (elementIterator.hasNext()) {    NamedElementQueryResultList.NamedElement element=elementIterator.next();    if (element == null) {      continue;    }    T dataCenter=_dbClient.queryObject(clazz,element.getId());    if (dataCenter == null) {      continue;    }    if (areEqual(localTenantId,dataCenter.getTenant())) {      continue;    }    elementIterator.remove();  }  return elements;}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {  startDocumentInternal();  m_needToCallStartDocument=false;  return;}  }
class C{  public void sendRequests(){  Connection conn=plugin.getDb().getSQLConnection();  try (Statement st=conn.createStatement()){    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getDeathHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "deaths VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (deaths)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "deaths VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getArrowHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "arrows VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (arrows)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "arrows VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getSnowballHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "snowballs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (snowballs)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "snowballs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEggHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "eggs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (eggs)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "eggs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getFishHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "fish VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (fish)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "fish VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getItemBreakHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "itembreaks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (itembreaks)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "itembreaks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEatenItemsHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "eatenitems VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (eatenitems)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "eatenitems VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getShearHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "shears VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (shears)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "shears VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getMilkHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "milks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (milks)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "milks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getTradeHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "trades VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (trades)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "trades VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getAnvilHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "anvils VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (anvils)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "anvils VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEnchantmentHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "enchantments VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (enchantments)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "enchantments VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBedHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "beds VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (beds)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "beds VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getXpHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "levels VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (levels)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "levels VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getConsumedPotionsHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "consumedpotions VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (consumedpotions)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "consumedpotions VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getDropHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "drops VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (drops)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "drops VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getHoePlowingHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "hoeplowing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (hoeplowing)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "hoeplowing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getFertiliseHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "fertilising VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (fertilising)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "fertilising VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getTameHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "tames VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (tames)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "tames VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBrewingHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "brewing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (brewing)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "brewing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getFireworkHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "fireworks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (fireworks)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "fireworks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getMusicDiscHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "musicdiscs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (musicdiscs)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "musicdiscs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEnderPearlHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "enderpearls VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (enderpearls)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "enderpearls VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBlockPlaceHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "places VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,blockid) DO UPDATE SET (places)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "places VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBlockBreakHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "breaks VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,blockid) DO UPDATE SET (breaks)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "breaks VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getKillHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "kills VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,mobname) DO UPDATE SET (kills)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "kills VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getCraftHashMap().entrySet())     if (plugin.getDb().isPostgres())     st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "crafts VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,item) DO UPDATE SET (crafts)=("+ entry.getValue()+ ")"); else     st.addBatch("REPLACE INTO " + plugin.getDb().getTablePrefix() + "crafts VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");    st.executeBatch();  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"Error while sending sync pooled requests to database: ",e);  }  plugin.getPoolsManager().getDeathHashMap().clear();  plugin.getPoolsManager().getArrowHashMap().clear();  plugin.getPoolsManager().getSnowballHashMap().clear();  plugin.getPoolsManager().getEggHashMap().clear();  plugin.getPoolsManager().getFishHashMap().clear();  plugin.getPoolsManager().getItemBreakHashMap().clear();  plugin.getPoolsManager().getEatenItemsHashMap().clear();  plugin.getPoolsManager().getShearHashMap().clear();  plugin.getPoolsManager().getMilkHashMap().clear();  plugin.getPoolsManager().getTradeHashMap().clear();  plugin.getPoolsManager().getAnvilHashMap().clear();  plugin.getPoolsManager().getEnchantmentHashMap().clear();  plugin.getPoolsManager().getBedHashMap().clear();  plugin.getPoolsManager().getXpHashMap().clear();  plugin.getPoolsManager().getConsumedPotionsHashMap().clear();  plugin.getPoolsManager().getDropHashMap().clear();  plugin.getPoolsManager().getHoePlowingHashMap().clear();  plugin.getPoolsManager().getFertiliseHashMap().clear();  plugin.getPoolsManager().getTameHashMap().clear();  plugin.getPoolsManager().getBrewingHashMap().clear();  plugin.getPoolsManager().getFireworkHashMap().clear();  plugin.getPoolsManager().getBlockPlaceHashMap().clear();  plugin.getPoolsManager().getBlockBreakHashMap().clear();  plugin.getPoolsManager().getKillHashMap().clear();  plugin.getPoolsManager().getCraftHashMap().clear();}  }
class C{  private byte[] ipWithSubnetMask(byte[] ip,byte[] subnetMask){  int ipLength=ip.length;  byte[] temp=new byte[ipLength * 2];  System.arraycopy(ip,0,temp,0,ipLength);  System.arraycopy(subnetMask,0,temp,ipLength,ipLength);  return temp;}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  if (translators == null) {    this.translators=null;  } else {    this.translators=translators.clone();  }}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  int length=ncName.length();  if (length == 0)   return false;  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  private boolean isLeftTransposeRewriteApplicable(boolean CP,boolean checkMemMR){  if (DMLScript.rtplatform == RUNTIME_PLATFORM.HADOOP || DMLScript.rtplatform == RUNTIME_PLATFORM.SPARK) {    return false;  }  boolean ret=false;  Hop h1=getInput().get(0);  Hop h2=getInput().get(1);  if (CP) {    if (h1 instanceof ReorgOp && ((ReorgOp)h1).getOp() == ReOrgOp.TRANSPOSE) {      long m=h1.getDim1();      long cd=h1.getDim2();      long n=h2.getDim2();      ret=(m > 0 && cd > 0 && n > 0);      double memX=h1.getInput().get(0).getOutputMemEstimate();      double memtv=OptimizerUtils.estimateSizeExactSparsity(n,cd,1.0);      double memtXv=OptimizerUtils.estimateSizeExactSparsity(n,m,1.0);      double newMemEstimate=memtv + memX + memtXv;      ret&=(newMemEstimate < OptimizerUtils.getLocalMemBudget());      ret&=(m * cd > (cd * n + m * n) && 2 * OptimizerUtils.estimateSizeExactSparsity(cd,n,1.0) < OptimizerUtils.getLocalMemBudget() && 2 * OptimizerUtils.estimateSizeExactSparsity(m,n,1.0) < OptimizerUtils.getLocalMemBudget());      if (ret)       _memEstimate=newMemEstimate;    }  } else {    if (h1 instanceof ReorgOp && ((ReorgOp)h1).getOp() == ReOrgOp.TRANSPOSE) {      long m=h1.getDim1();      long cd=h1.getDim2();      long n=h2.getDim2();      if (m > 0 && cd > 0 && n > 0 && (m * cd > (cd * n + m * n)) && 2 * OptimizerUtils.estimateSizeExactSparsity(cd,n,1.0) < OptimizerUtils.getLocalMemBudget() && 2 * OptimizerUtils.estimateSizeExactSparsity(m,n,1.0) < OptimizerUtils.getLocalMemBudget() && (!checkMemMR || OptimizerUtils.estimateSizeExactSparsity(cd,n,1.0) < OptimizerUtils.getRemoteMemBudgetMap(true))) {        ret=true;      }    }  }  return ret;}  }
class C{  public static void main(String[] args){  final int NUMNBER_OF_UPPERCASE_LETTERS=100;  final int NUMNBER_OF_SINGLE_DIGITS=100;  final int NUMBERS_PER_LINE=10;  for (int i=1; i <= NUMNBER_OF_UPPERCASE_LETTERS; i++) {    System.out.print(RandomCharacter.getRandomUpperCaseLetter());    System.out.print(i % NUMBERS_PER_LINE == 0 ? "\n" : " ");  }  for (int i=1; i <= NUMNBER_OF_SINGLE_DIGITS; i++) {    System.out.print(RandomCharacter.getRandomDigitCharacter());    System.out.print(i % NUMBERS_PER_LINE == 0 ? "\n" : " ");  }}  }
class C{  public boolean namespaceEquals(NodeId nodeId1,NodeId nodeId2){  return nodeId1.getNamespaceIndex() == nodeId2.getNamespaceIndex();}  }
class C{  public int start(String groupName){  return start(groupIndex(groupName));}  }
class C{  RegistrarEmitter emitPhonesAndEmail(@Nullable String phone,@Nullable String fax,@Nullable String email){  return emitField("Phone Number",phone).emitField("Fax Number",fax).emitField("Email",email);}  }
class C{  protected LocalGossipMember selectPartner(List<LocalGossipMember> memberList){  LocalGossipMember member=null;  if (memberList.size() > 0) {    int randomNeighborIndex=random.nextInt(memberList.size());    member=memberList.get(randomNeighborIndex);  } else {    GossipService.LOGGER.debug("I am alone in this world.");  }  return member;}  }
class C{  public Set<K> keySet(){  return Collections.unmodifiableSet(map.keySet());}  }
class C{  public static int putLong(byte[] bytes,int offset,long val){  if (bytes.length - offset < SIZEOF_LONG) {    throw new IllegalArgumentException("Not enough room to put a long at" + " offset " + offset + " in a "+ bytes.length+ " byte array");  }  for (int i=offset + 7; i > offset; i--) {    bytes[i]=(byte)val;    val>>>=8;  }  bytes[offset]=(byte)val;  return offset + SIZEOF_LONG;}  }
class C{  private boolean isMatched(String name,String template){  if (checkType == TYPE_TLS) {    return matchAllWildcards(name,template);  } else   if (checkType == TYPE_LDAP) {    return matchLeftmostWildcard(name,template);  } else {    return false;  }}  }
class C{  public ScriptEditorAction(final SimbrainDesktop desktop){  super("Edit / Run Script...");  this.desktop=desktop;  putValue(SMALL_ICON,ResourceManager.getImageIcon("ScriptEditor.png"));  putValue(SHORT_DESCRIPTION,"Edit / Run Script...");}  }
class C{  @Override public boolean clonePropertiesOf(PLIObject object){  if (mIsNotLocked && super.clonePropertiesOf(object)) {    if (object instanceof PLICamera) {      PLICamera camera=(PLICamera)object;      this.setFovRange(camera.getFovRange());      this.setFovSensitivity(camera.getFovSensitivity());      this.setMinDistanceToEnableFov(camera.getMinDistanceToEnableFov());      this.setInitialFov(camera.getInitialFov());      this.setFovEnabled(camera.isFovEnabled());      this.setInternalFov(null,camera.getFov(),true,false,false);      this.setRotationSensitivity(camera.getRotationSensitivity());      this.setZoomLevels(camera.getZoomLevels());      this.setInitialLookAt(camera.getInitialLookAt());      this.setListener(camera.getListener());    }    return true;  }  return false;}  }
class C{  @Listener(order=Order.FIRST) public void onPlayerSendCommand(SendCommandEvent event,@Root Player player){  List<String> commands=mca.getNodeOrDefault().getBlockedCommands();  if (commands.isEmpty()) {    return;  }  String command=event.getCommand().toLowerCase();  Optional<? extends CommandMapping> oc=Sponge.getCommandManager().get(command,player);  Set<String> cmd;  if (oc.isPresent()) {    cmd=oc.get().getAllAliases().stream().map(null).collect(Collectors.toSet());  } else {    cmd=Sets.newHashSet(command);  }  if (commands.stream().map(null).anyMatch(null)) {    Optional<MuteData> omd=Util.testForEndTimestamp(handler.getPlayerMuteData(player),null);    if (omd.isPresent()) {      onMute(omd.get(),player);      MessageChannel.TO_CONSOLE.send(Text.builder().append(Text.of(player.getName() + " (")).append(plugin.getMessageProvider().getTextMessageWithFormat("standard.muted")).append(Text.of("): ")).append(Text.of("/" + event.getCommand() + " "+ event.getArguments())).build());      event.setCancelled(true);    }  }}  }
class C{  public int searchInsert(ArrayList<Integer> A,int target){  int start=0;  int end=A.size() - 1;  int mid;  if (A == null || A.size() == 0 || target <= A.get(0)) {    return 0;  }  while (start + 1 < end) {    mid=start + (end - start) / 2;    if (A.get(mid) == target) {      return mid;    } else     if (A.get(mid) < target) {      start=mid;    } else {      end=mid;    }  }  if (A.get(end) == target) {    return end;  }  if (A.get(end) < target) {    return end + 1;  }  if (A.get(start) == target) {    return start;  }  return start + 1;}  }
class C{  public DDLScanCtrl(String url,String user,String pass,String db,String tables,String tableFile,String templateFile,String outFile,String renameDefinitions,Hashtable<String,String> templateOptions,String additionalPath) throws Exception {  this.url=url;  this.user=user;  this.pass=pass;  this.db=db;  this.tables=tables;  this.tableFile=tableFile;  this.templateFile=templateFile;  this.additionalPath=additionalPath;  this.templateOptions=templateOptions;  this.outFile=outFile;  this.renameDefinitions=renameDefinitions;}  }
class C{  private void exitFieldColorizer(){  if (thisone.isEnabled()) {    thisone.setForeground(COLOR_OK);    thisone.firePropertyChange(VTF_PC_STAT_LN_UPDATE,"_"," ");    if ((getText() == null) || (getText().length() == 0)) {      if (allow0Length == true) {        if ((lastQueryValue == null) || (lastQueryValue.length() == 0)) {          setBackground(COLOR_BG_UNEDITED);          return;        } else {          setBackground(COLOR_BG_EDITED);          return;        }      } else {        return;      }    }    if ((lastQueryValue == null) || (lastQueryValue.length() == 0)) {      setBackground(COLOR_BG_EDITED);      return;    }    if (!lastQueryValue.equals(thisone.getText())) {      thisone.setBackground(COLOR_BG_EDITED);    } else {      thisone.setBackground(COLOR_BG_UNEDITED);    }    return;  } else {    return;  }}  }
class C{  protected void fetchNext(){  while (pos != null) {    Page p=pos.page;    if (p.isLeaf()) {      while (pos.index < p.getKeyCount()) {        SpatialKey c=(SpatialKey)p.getKey(pos.index++);        if (filter == null || check(true,c,filter)) {          current=c;          return;        }      }    } else {      boolean found=false;      while (pos.index < p.getKeyCount()) {        int index=pos.index++;        SpatialKey c=(SpatialKey)p.getKey(index);        if (filter == null || check(false,c,filter)) {          Page child=pos.page.getChildPage(index);          pos=new CursorPos(child,0,pos);          found=true;          break;        }      }      if (found) {        continue;      }    }    pos=pos.parent;  }  current=null;}  }
class C{  @Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=axis.getRange();    if (!range.contains(value)) {      return;    }    final Composite savedComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    PlotOrientation orientation=plot.getOrientation();    double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());    Line2D line=null;    if (orientation == PlotOrientation.HORIZONTAL) {      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());    } else     if (orientation == PlotOrientation.VERTICAL) {      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);    } else {      throw new IllegalStateException();    }    g2.setPaint(marker.getPaint());    g2.setStroke(marker.getStroke());    g2.draw(line);    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      Point2D coordinates=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);      Rectangle2D rect=TextUtils.calcAlignedStringBounds(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());      g2.setPaint(marker.getLabelBackgroundColor());      g2.fill(rect);      g2.setPaint(marker.getLabelPaint());      TextUtils.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());    }    g2.setComposite(savedComposite);  } else   if (marker instanceof IntervalMarker) {    IntervalMarker im=(IntervalMarker)marker;    double start=im.getStartValue();    double end=im.getEndValue();    Range range=axis.getRange();    if (!(range.intersects(start,end))) {      return;    }    final Composite savedComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));    double start2d=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());    double end2d=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());    double low=Math.min(start2d,end2d);    double high=Math.max(start2d,end2d);    PlotOrientation orientation=plot.getOrientation();    Rectangle2D rect=null;    if (orientation == PlotOrientation.HORIZONTAL) {      low=Math.max(low,dataArea.getMinX());      high=Math.min(high,dataArea.getMaxX());      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());    } else     if (orientation == PlotOrientation.VERTICAL) {      low=Math.max(low,dataArea.getMinY());      high=Math.min(high,dataArea.getMaxY());      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);    }    Paint p=marker.getPaint();    if (p instanceof GradientPaint) {      GradientPaint gp=(GradientPaint)p;      GradientPaintTransformer t=im.getGradientPaintTransformer();      if (t != null) {        gp=t.transform(gp,rect);      }      g2.setPaint(gp);    } else {      g2.setPaint(p);    }    g2.fill(rect);    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {      if (orientation == PlotOrientation.VERTICAL) {        Line2D line=new Line2D.Double();        double x0=dataArea.getMinX();        double x1=dataArea.getMaxX();        g2.setPaint(im.getOutlinePaint());        g2.setStroke(im.getOutlineStroke());        if (range.contains(start)) {          line.setLine(x0,start2d,x1,start2d);          g2.draw(line);        }        if (range.contains(end)) {          line.setLine(x0,end2d,x1,end2d);          g2.draw(line);        }      } else {        Line2D line=new Line2D.Double();        double y0=dataArea.getMinY();        double y1=dataArea.getMaxY();        g2.setPaint(im.getOutlinePaint());        g2.setStroke(im.getOutlineStroke());        if (range.contains(start)) {          line.setLine(start2d,y0,start2d,y1);          g2.draw(line);        }        if (range.contains(end)) {          line.setLine(end2d,y0,end2d,y1);          g2.draw(line);        }      }    }    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());      g2.setPaint(marker.getLabelBackgroundColor());      g2.fill(r);      g2.setPaint(marker.getLabelPaint());      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());    }    g2.setComposite(savedComposite);  }}  }
class C{  protected void checkIntegrity(){  PrintStream errors=System.err;  Hashtable otherIntersections=new Hashtable();  Object bothIntersections=new Object();  Object inRoadsVector=new Object();  for (Enumeration e=intersections.elements(); e.hasMoreElements(); ) {    Intersection intersection=(Intersection)e.nextElement();    int nRoads=intersection.getRoadCount();    if (nRoads == 0) {      errors.println("Dangling intersection");      errors.println("  Intersection = " + intersection);      continue;    }    for (int i=0; i < nRoads; i++) {      Road road=intersection.getRoad(i);      Object other=otherIntersections.get(road);      if (other == null) {        otherIntersections.put(road,road.getOtherIntersection(intersection));      } else       if (other == intersection) {        otherIntersections.put(road,bothIntersections);      } else {        errors.println("Misconnected");        errors.println("          Road = " + road);        errors.println("    Road.Other = " + other);        errors.println("  Intersection = " + intersection);      }    }  }  for (Enumeration e=roads.elements(); e.hasMoreElements(); ) {    Road road=(Road)e.nextElement();    Object other=otherIntersections.get(road);    if (other == null) {      errors.println("Road not found in intersections");      errors.println("          Road = " + road);    } else     if (other != bothIntersections) {      errors.println("Road incompletely connected");      errors.println("          Road = " + road);      errors.println("    Road.Other = " + other);    } else     if (other == inRoadsVector) {      errors.println("Road doubly listed");      errors.println("          Road = " + road);    }    otherIntersections.put(road,inRoadsVector);  }  for (Enumeration e=otherIntersections.keys(); e.hasMoreElements(); ) {    Road road=(Road)e.nextElement();    Object other=otherIntersections.get(road);    if (other != inRoadsVector) {      errors.println("Road not listed");      errors.println("          Road = " + road);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.321 -0500",hash_original_method="B7C67E2F179AF8C301D4B2ED36DBCCCA",hash_generated_method="DD966B6BB8C95D0083472B88ABFFF454") public static void dumpCurrentRow(Cursor cursor){  dumpCurrentRow(cursor,System.out);}  }
class C{  public void resetChannelTab(Channel channel){  tabs.setForegroundForComponent(channel,null);  tabs.setTitleForComponent(channel,channel.getName());  highlighted.remove(channel);}  }
class C{  private Element addDatabaseElementUiNode(String bindName,FormField formField,Element parentUiNode){  Element controlNode=appendElement(parentUiNode,NAMESPACE_XFORMS,CONTROL_INPUT);  controlNode.setAttribute(null,ATTRIBUTE_BIND,bindName);  Field field=formField.getField();  if ("patient".equals(field.getTableName())) {    if ("gender".equals(field.getAttributeName())) {      controlNode.setName(CONTROL_SELECT1);      populateGenders(controlNode);    } else     if ("birthdate".equals(field.getAttributeName())) {      controlNode.setAttribute(null,ATTRIBUTE_APPEARANCE,"minimal|show_years|show_months");    }  } else   if ("encounter".equals(field.getTableName())) {    if ("location_id".equals(field.getAttributeName())) {      controlNode.setName(CONTROL_SELECT1);      populateLocations(controlNode);    } else     if ("provider_id".equals(field.getAttributeName())) {      controlNode.setName(CONTROL_SELECT1);      populateProviders(controlNode);    }  }  appendTextElement(controlNode,NAMESPACE_XFORMS,NODE_LABEL,getDisplayName(formField));  return controlNode;}  }
class C{  public static void initialize(boolean enableLog,String slackToken,String slackChannels){  Config.ENABLE_LOG=enableLog;  Config.SLACK_TOKEN=slackToken;  Config.SLACK_CHANNELS=slackChannels;  SlackClient.initialize();}  }
class C{  public void executeImmediate(String statement) throws SQLException {  database.executeImmediate(statement,getCurrentTransaction());}  }
class C{  public void aggregate(ClassLoadingInformationData other){  count+=other.count;  minLoadedClassCount=Math.min(minLoadedClassCount,other.minLoadedClassCount);  maxLoadedClassCount=Math.max(maxLoadedClassCount,other.maxLoadedClassCount);  totalLoadedClassCount+=other.totalLoadedClassCount;  minTotalLoadedClassCount=Math.min(minTotalLoadedClassCount,other.minTotalLoadedClassCount);  maxTotalLoadedClassCount=Math.max(maxTotalLoadedClassCount,other.maxTotalLoadedClassCount);  totalTotalLoadedClassCount+=other.totalTotalLoadedClassCount;  minUnloadedClassCount=Math.min(minUnloadedClassCount,other.minUnloadedClassCount);  maxUnloadedClassCount=Math.max(maxUnloadedClassCount,other.maxUnloadedClassCount);  totalUnloadedClassCount+=other.maxUnloadedClassCount;}  }
class C{  public SQLTransactionRollbackException(){}  }
class C{  public static boolean isNullValue(String s){  return !isNotNullValue(s);}  }
class C{  public void finish() throws IOException {  if (finished) {    return;  }  flush();  VarInt.encode(0,os);  finished=true;}  }
class C{  protected void processEndSimulation(){}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  @Inject NoAuthService(SystemConfiguration config,UserService userService,MonitorService monitorService){  super(config);  requireArgument(config != null,"The system configuration cannot be null.");  requireArgument(userService != null,"The user service cannot be null.");  requireArgument(monitorService != null,"The monitor service cannot be null.");  _userService=userService;  _monitorService=monitorService;  _config=config;  _dailyUsers=new UserCountCache(86400000L);  _monthlyUsers=new UserCountCache(2592000000L);}  }
class C{  public TimingHit pageLoadTime(Integer value){  setInteger(PAGE_LOAD_TIME,value);  return this;}  }
class C{  public QueryBuilder<T,ID> limit(Long maxRows){  limit=maxRows;  return this;}  }
class C{  public FXGSAXScanner(String profile){  super();  this.profile=profile;  if (profile.equals(FXG_PROFILE_MOBILE))   versionHandler=FXGVersionHandlerRegistry.getDefaultMobileHandler(); else   versionHandler=FXGVersionHandlerRegistry.getDefaultHandler();  if (versionHandler == null)   throw new FXGException("FXGVersionHandlerNotRegistered",FXGVersionHandlerRegistry.defaultVersion.asDouble());}  }
class C{  public CacheDoesNotExistException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void calculateCpuMin(double min){  if (cpuMin == -1) {    cpuMin=min;  } else {    cpuMin=Math.min(cpuMin,min);  }}  }
class C{  public static GenericDraweeHierarchyBuilder inflateBuilder(Context context,@Nullable AttributeSet attrs){  Resources resources=context.getResources();  GenericDraweeHierarchyBuilder builder=new GenericDraweeHierarchyBuilder(resources);  return updateBuilder(builder,context,attrs);}  }
class C{  public void registerAssociation(Association assoc,int regLevel) throws RegisterFailedException {  if (!OSUtils.isGoodWindows()) {    regLevel=AppConstants.SYSTEM_LEVEL;  }  BackupAssociation backupAssoc=new BackupAssociation(assoc,regLevel);  String curMimeType=backupAssoc.getCurMimeType();  String curFileExt=backupAssoc.getCurFileExt();  String curDescription=assoc.getDescription();  String curIconFileName=assoc.getIconFileName();  List<Action> curActionList=assoc.getActionList();  boolean curMimeTypeExisted=backupAssoc.getCurMimeTypeExisted();  boolean curFileExtExisted=backupAssoc.getCurFileExtExisted();  try {    if ((curMimeType == null) && (curFileExt != null)) {      WinRegistryUtil.addFileExt(curFileExt,regLevel);      if (curDescription != null) {        WinRegistryUtil.setDescriptionByFileExt(curDescription,curFileExt,regLevel);      }      if (curIconFileName != null) {        WinRegistryUtil.setIconFileNameByFileExt(curIconFileName,curFileExt,regLevel);      }      if (curActionList != null) {        WinRegistryUtil.setActionListByFileExt(curActionList,curFileExt,regLevel);      }      WinRegistryUtil.markGeneratorByFileExt(curFileExt,regLevel);    } else     if ((curMimeType != null) && (curFileExt == null)) {      WinRegistryUtil.addMimeType(curMimeType,regLevel);    } else     if ((curMimeType != null) && (curFileExt != null)) {      if (!curMimeTypeExisted) {        WinRegistryUtil.addMimeType(curMimeType,regLevel);      }      if (!curFileExtExisted) {        WinRegistryUtil.addFileExt(curFileExt,regLevel);      }      if (curDescription != null) {        WinRegistryUtil.setDescriptionByFileExt(curDescription,curFileExt,regLevel);      }      if (curIconFileName != null) {        WinRegistryUtil.setIconFileNameByFileExt(curIconFileName,curFileExt,regLevel);      }      if (curActionList != null) {        WinRegistryUtil.setActionListByFileExt(curActionList,curFileExt,regLevel);      }      WinRegistryUtil.markGeneratorByFileExt(curFileExt,regLevel);      WinRegistryUtil.setMutualRef(curFileExt,curMimeType,regLevel);    }  } catch (  RegisterFailedException e) {    restoreAssociationRegistration(backupAssoc,regLevel);    throw e;  }}  }
class C{  public void printJobCanceled(PrintJobEvent pje){}  }
class C{  private void readMoreChars() throws IOException {  if (availableCapacity(charBuffer) == 0) {    if (charBuffer.position() > 0) {      charBuffer.compact().flip();    } else {      charBuffer=grow(charBuffer);    }  }  int limit=charBuffer.limit();  int numChars=reader.read(charBuffer.array(),limit,availableCapacity(charBuffer));  if (numChars == -1) {    endOfInput=true;  } else {    charBuffer.limit(limit + numChars);  }}  }
class C{  public void selectParameters(List<Parameter> params){}  }
class C{  public ConditionalBlockImpl(){  type=BlockType.CONDITIONAL_BLOCK;}  }
class C{  public static EndpointDescription[] selectByProtocol(EndpointDescription[] searchSet,String protocol){  List<EndpointDescription> result=new ArrayList<EndpointDescription>();  for (  EndpointDescription d : searchSet)   if (d.getEndpointUrl().toLowerCase().startsWith(protocol.toLowerCase()))   result.add(d);  return result.toArray(new EndpointDescription[result.size()]);}  }
class C{  @Override public String cipherSuite(){  if (!(_s instanceof SSLSocket)) {    return super.cipherSuite();  }  SSLSocket sslSocket=(SSLSocket)_s;  SSLSession sslSession=sslSocket.getSession();  if (sslSession != null) {    return sslSession.getCipherSuite();  } else {    return null;  }}  }
class C{  public static final Parameter base(){  return GPDefaults.base().push(P_KOZA);}  }
class C{  private ActivityRecord findActivityLocked(Intent intent,ActivityInfo info){  ComponentName cls=intent.getComponent();  if (info.targetActivity != null) {    cls=new ComponentName(info.packageName,info.targetActivity);  }  final int userId=UserHandle.getUserId(info.applicationInfo.uid);  final int N=mHistory.size();  for (int i=(N - 1); i >= 0; i--) {    ActivityRecord r=mHistory.get(i);    if (!r.finishing) {      if (r.intent.getComponent().equals(cls) && r.userId == userId) {        return r;      }    }  }  return null;}  }
class C{  public static String queueNameFromDBName(String dbName){  String[] tokens=dbName.split("_",3);  return tokens[2];}  }
class C{  public synchronized boolean enter(CnATreeElement obj) throws TransactionAbortedException {  if (aborted) {    throw new TransactionAbortedException();  }  visited.add(obj);  if (this.initiator != null) {    return false;  }  this.initiator=obj;  aborted=false;  return true;}  }
class C{  public static Date truncate(final Date date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar gval=Calendar.getInstance();  gval.setTime(date);  modify(gval,field,ModifyType.TRUNCATE);  return gval.getTime();}  }
class C{  private void removeLockData(String lockName,String owner){  try {    String path=getLockDataPath(lockName);    Stat stat=dataManager.checkExists(path);    if (stat != null) {      dataManager.removeNode(path);    }    String ownerLockPath=getLockByOwnerPath(lockName,owner);    stat=dataManager.checkExists(ownerLockPath);    if (stat != null) {      dataManager.removeNode(ownerLockPath);    }    String ownerPath=getOwnerPath(owner);    List<String> remainingLocks=dataManager.getChildren(ownerPath);    if (remainingLocks == null || remainingLocks.isEmpty()) {      dataManager.removeNode(ownerPath);    }  } catch (  Exception ex) {    log.error("Can't remove LockData: " + lockName,ex);  }}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  this.forEncryption=forEncryption;  if (param instanceof ParametersWithRandom) {    param=((ParametersWithRandom)param).getParameters();  }  key=(NaccacheSternKeyParameters)param;  if (!this.forEncryption) {    if (debug) {      System.out.println("Constructing lookup Array");    }    NaccacheSternPrivateKeyParameters priv=(NaccacheSternPrivateKeyParameters)key;    Vector primes=priv.getSmallPrimes();    lookup=new Vector[primes.size()];    for (int i=0; i < primes.size(); i++) {      BigInteger actualPrime=(BigInteger)primes.elementAt(i);      int actualPrimeValue=actualPrime.intValue();      lookup[i]=new Vector();      lookup[i].addElement(ONE);      if (debug) {        System.out.println("Constructing lookup ArrayList for " + actualPrimeValue);      }      BigInteger accJ=ZERO;      for (int j=1; j < actualPrimeValue; j++) {        accJ=accJ.add(priv.getPhi_n());        BigInteger comp=accJ.divide(actualPrime);        lookup[i].addElement(priv.getG().modPow(comp,priv.getModulus()));      }    }  }}  }
class C{  protected void dispose(){  final WebSocket currentWebSocket=webSocket;  if (currentWebSocket != null && currentWebSocket.isOpen()) {    try {      currentWebSocket.disconnect(WebSocketCloseCode.AWAY.getCode());    } catch (    final Exception exception) {      postErrorEvent(exception);    }  }}  }
class C{  public void addTwoForTeamA(View v){  scoreTeamA=scoreTeamA + 2;  displayForTeamA(scoreTeamA);}  }
class C{  @Override default Eval<OptionalLong> minLong(final ToLongFunction<? super T> fn){  return Eval.later(null);}  }
class C{  @Override public boolean isValidUse(AnnotatedDeclaredType declarationType,AnnotatedDeclaredType useType,Tree tree){  return super.isValidUse(declarationType,useType,tree);}  }
class C{  public void addSuperClassNoBidirectionalUpdate(ClassType type){  if (null == superClasses) {    superClasses=new TypeSet<ClassType>();  }  superClasses.addOrUpdate(type);}  }
class C{  public JoinGroupNode(final TermNode context,final IGroupMemberNode child){  super();  setContext(context);  addChild(child);}  }
class C{  public void testDefaultsDynamic() throws Exception {  MockConfigurableSimilarity sim=getSimilarity("text_sim3",MockConfigurableSimilarity.class);  assertEquals("is there an echo?",sim.getPassthrough());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 44:    break;case 34:{    int temp=zzStartRead;    addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);    addToken(temp,zzMarkedPos - 1,Token.VARIABLE);    start=zzMarkedPos;  }case 45:break;case 39:{if (start == zzStartRead) {  addToken(Token.COMMENT_DOCUMENTATION);  yybegin(YYINITIAL);}}case 46:break;case 26:{addToken(Token.ERROR_NUMBER_FORMAT);}case 47:break;case 11:{start=zzMarkedPos - 1;yybegin(STRING);}case 48:break;case 36:{if (start == zzStartRead) {addToken(Token.PREPROCESSOR);addNullToken();return firstToken;}}case 49:break;case 32:{addToken(Token.FUNCTION);}case 50:break;case 30:{addToken(Token.VARIABLE);}case 51:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 52:break;case 24:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 53:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 54:break;case 29:{addToken(Token.PREPROCESSOR);addNullToken();return firstToken;}case 55:break;case 38:{if (start == zzStartRead) {int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}}case 56:break;case 42:{start=zzStartRead;yybegin(HEREDOC_EOF_SINGLE_QUOTED);}case 57:break;case 43:{start=zzStartRead;yybegin(HEREDOC_EOT_SINGLE_QUOTED);}case 58:break;case 40:{start=zzStartRead;yybegin(HEREDOC_EOF_UNQUOTED);}case 59:break;case 13:{}case 60:break;case 18:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 61:break;case 28:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 62:break;case 21:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 63:break;case 6:{addToken(Token.WHITESPACE);}case 64:break;case 10:{start=zzMarkedPos - 1;yybegin(CHAR_LITERAL);}case 65:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 66:break;case 33:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 67:break;case 20:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_BACKQUOTE);}case 68:break;case 15:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 69:break;case 16:{}case 70:break;case 23:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 71:break;case 35:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 72:break;case 37:{addToken(Token.COMMENT_EOL);start=zzMarkedPos;yybegin(POD);}case 73:break;case 31:{addToken(Token.RESERVED_WORD);}case 74:break;case 19:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 75:break;case 8:{addToken(Token.SEPARATOR);}case 76:break;case 5:{addNullToken();return firstToken;}case 77:break;case 7:{addToken(Token.OPERATOR);}case 78:break;case 17:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 79:break;case 25:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_POD);return firstToken;}case 80:break;case 27:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 81:break;case 41:{start=zzStartRead;yybegin(HEREDOC_EOT_UNQUOTED);}case 82:break;case 9:{start=zzMarkedPos - 1;yybegin(BACKTICKS);}case 83:break;case 12:{}case 84:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 85:break;case 22:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 86:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case HEREDOC_EOF_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 574:break;case HEREDOC_EOT_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 575:break;case HEREDOC_EOT_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 576:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 577:break;case BACKTICKS:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 578:break;case YYINITIAL:{addNullToken();return firstToken;}case 579:break;case HEREDOC_EOF_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 580:break;case CHAR_LITERAL:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 581:break;case POD:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_POD);return firstToken;}case 582:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  public static byte[] concatenate(byte[] a,byte[] b){  int lengthA=a.length;  int lengthB=b.length;  byte[] concat=new byte[lengthA + lengthB];  System.arraycopy(a,0,concat,0,lengthA);  System.arraycopy(b,0,concat,lengthA,lengthB);  return concat;}  }
class C{  public final Fixture createFixture(FixtureDef def){  assert (m_world.isLocked() == false);  if (m_world.isLocked() == true) {    return null;  }  Fixture fixture=new Fixture();  fixture.create(this,def);  if ((m_flags & e_activeFlag) == e_activeFlag) {    BroadPhase broadPhase=m_world.m_contactManager.m_broadPhase;    fixture.createProxies(broadPhase,m_xf);  }  fixture.m_next=m_fixtureList;  m_fixtureList=fixture;  ++m_fixtureCount;  fixture.m_body=this;  if (fixture.m_density > 0.0f) {    resetMassData();  }  m_world.m_flags|=World.NEW_FIXTURE;  return fixture;}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset) throws ClassNotFound {  if (tracing)   env.dtEvent("SourceMember.check: MEMBER " + getName() + ", status = "+ status);  if (status == PARSED) {    if (isInnerClass()) {      ClassDefinition nc=getInnerClass();      if (nc instanceof SourceClass && !nc.isLocal() && nc.isInsideLocal()) {        status=CHECKING;        vset=((SourceClass)nc).checkInsideClass(env,ctx,vset);      }      status=CHECKED;      return vset;    }    if (env.dump()) {      System.out.println("[check field " + getClassDeclaration().getName() + "."+ getName()+ "]");      if (getValue() != null) {        getValue().print(System.out);        System.out.println();      }    }    env=new Environment(env,this);    env.resolve(where,getClassDefinition(),getType());    if (isMethod()) {      ClassDeclaration throwable=env.getClassDeclaration(idJavaLangThrowable);      ClassDeclaration exp[]=getExceptions(env);      for (int i=0; i < exp.length; i++) {        ClassDefinition def;        long where=getWhere();        if (expIds != null && i < expIds.length) {          where=IdentifierToken.getWhere(expIds[i],where);        }        try {          def=exp[i].getClassDefinition(env);          env.resolveByName(where,getClassDefinition(),def.getName());        } catch (        ClassNotFound e) {          env.error(where,"class.not.found",e.name,"throws");          break;        }        def.noteUsedBy(getClassDefinition(),where,env);        if (!getClassDefinition().canAccess(env,def.getClassDeclaration())) {          env.error(where,"cant.access.class",def);        } else         if (!def.subClassOf(env,throwable)) {          env.error(where,"throws.not.throwable",def);        }      }    }    status=CHECKING;    if (isMethod() && args != null) {      int length=args.size();      outer_loop:       for (int i=0; i < length; i++) {        LocalMember lf=(LocalMember)(args.elementAt(i));        Identifier name_i=lf.getName();        for (int j=i + 1; j < length; j++) {          LocalMember lf2=(LocalMember)(args.elementAt(j));          Identifier name_j=lf2.getName();          if (name_i.equals(name_j)) {            env.error(lf2.getWhere(),"duplicate.argument",name_i);            break outer_loop;          }        }      }    }    if (getValue() != null) {      ctx=new Context(ctx,this);      if (isMethod()) {        Statement s=(Statement)getValue();        for (Enumeration e=args.elements(); e.hasMoreElements(); ) {          LocalMember f=(LocalMember)e.nextElement();          vset.addVar(ctx.declare(env,f));        }        if (isConstructor()) {          vset.clearVar(ctx.getThisNumber());          Expression supCall=s.firstConstructor();          if ((supCall == null) && (getClassDefinition().getSuperClass() != null)) {            supCall=getDefaultSuperCall(env);            Statement scs=new ExpressionStatement(where,supCall);            s=Statement.insertStatement(scs,s);            setValue(s);          }        }        ClassDeclaration exp[]=getExceptions(env);        int htsize=(exp.length > 3) ? 17 : 7;        Hashtable thrown=new Hashtable(htsize);        vset=s.checkMethod(env,ctx,vset,thrown);        ClassDeclaration ignore1=env.getClassDeclaration(idJavaLangError);        ClassDeclaration ignore2=env.getClassDeclaration(idJavaLangRuntimeException);        for (Enumeration e=thrown.keys(); e.hasMoreElements(); ) {          ClassDeclaration c=(ClassDeclaration)e.nextElement();          ClassDefinition def=c.getClassDefinition(env);          if (def.subClassOf(env,ignore1) || def.subClassOf(env,ignore2)) {            continue;          }          boolean ok=false;          if (!isInitializer()) {            for (int i=0; i < exp.length; i++) {              if (def.subClassOf(env,exp[i])) {                ok=true;              }            }          }          if (!ok) {            Node n=(Node)thrown.get(c);            long where=n.getWhere();            String errorMsg;            if (isConstructor()) {              if (where == getClassDefinition().getWhere()) {                errorMsg="def.constructor.exception";              } else {                errorMsg="constructor.exception";              }            } else             if (isInitializer()) {              errorMsg="initializer.exception";            } else {              errorMsg="uncaught.exception";            }            env.error(where,errorMsg,c.getName());          }        }      } else {        Hashtable thrown=new Hashtable(3);        Expression val=(Expression)getValue();        vset=val.checkInitializer(env,ctx,vset,getType(),thrown);        setValue(val.convert(env,ctx,getType(),val));        if (isStatic() && isFinal() && !clazz.isTopLevel()) {          if (!((Expression)getValue()).isConstant()) {            env.error(where,"static.inner.field",getName(),this);            setValue(null);          }        }        ClassDeclaration except=env.getClassDeclaration(idJavaLangThrowable);        ClassDeclaration ignore1=env.getClassDeclaration(idJavaLangError);        ClassDeclaration ignore2=env.getClassDeclaration(idJavaLangRuntimeException);        for (Enumeration e=thrown.keys(); e.hasMoreElements(); ) {          ClassDeclaration c=(ClassDeclaration)e.nextElement();          ClassDefinition def=c.getClassDefinition(env);          if (!def.subClassOf(env,ignore1) && !def.subClassOf(env,ignore2) && def.subClassOf(env,except)) {            Node n=(Node)thrown.get(c);            env.error(n.getWhere(),"initializer.exception",c.getName());          }        }      }      if (env.dump()) {        getValue().print(System.out);        System.out.println();      }    }    status=getClassDefinition().getError() ? ERROR : CHECKED;  }  if (isInitializer() && vset.isDeadEnd()) {    env.error(where,"init.no.normal.completion");    vset=vset.clearDeadEnd();  }  return vset;}  }
class C{  private void initUser(Context context,ContentProviderClient cp) throws RemoteException {  Init init=Server.init();  Intent intent=new Intent(ACTION_USER_LOGGED_IN);  intent.putExtra(EXTRA_HAS_RESTAURANTS,init != null && init.restaurants != null);  LocalBroadcastManager.getInstance(context).sendBroadcast(intent);  if (init != null) {    Prefs.edit(context,APP).putBoolean(ACCOUNT_INITIALISED,true).putLong(INSTALL_ID,init.installId).apply();    if (init.users != null) {      ContentValues vals=new ContentValues(6);      int size=init.users.size();      for (int i=0; i < size; i++) {        cp.insert(CONTACTS_URI,Contacts.values(vals,init.users.get(i)));      }    }    if (init.restaurants != null) {      Prefs.putBoolean(context,APP,ONBOARDED,true);      int size=init.restaurants.size();      for (int i=0; i < size; i++) {        Restaurant restaurant=init.restaurants.get(i);        restaurant.localId=Restaurants.add(restaurant.globalId);        if (restaurant.localId > 0) {          RestaurantService.download(restaurant.localId);        }      }    }  }}  }
class C{  private String createKey(String url){  return String.valueOf(url.hashCode());}  }
class C{  private boolean equalityCompare(final AnnotatedTypeMirror thisType,final AnnotatedTypeMirror thatType){  if (thisType == null) {    return thatType == null;  }  if (thatType == null) {    return false;  }  if (!thisType.getClass().equals(thatType.getClass())) {    return false;  }  if (thisType.getClass().equals(AnnotatedTypeMirror.AnnotatedWildcardType.class)) {    if (thisType.getUnderlyingType().equals(thatType.getUnderlyingType())) {      return true;    }    if (!AnnotationUtils.areSame(thisType.getAnnotations(),thatType.getAnnotations())) {      return false;    } else {      final AnnotatedWildcardType thisWc=(AnnotatedWildcardType)thisType;      final AnnotatedWildcardType thatWc=(AnnotatedWildcardType)thatType;      return equalityCompare(thisWc.getExtendsBound(),thatWc.getExtendsBound()) && equalityCompare(thisWc.getSuperBound(),thatWc.getSuperBound());    }  }  return thisType.equals(thatType);}  }
class C{  public NewReaderWorldAction(Workspace workspace){  super("TextWorld-Reader",workspace);  putValue(SHORT_DESCRIPTION,"New Text World");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Text.png"));}  }
class C{  public void applyMatrix(float n00,float n01,float n02,float n03,float n10,float n11,float n12,float n13,float n20,float n21,float n22,float n23,float n30,float n31,float n32,float n33){  showMissingWarning("applyMatrix");}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public IgniteUuid lastExistingId(){  return ids[lastExistingIdx];}  }
class C{  boolean isActive(){  return _lifecycle.isActive();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean pause(){  paused=true;  return true;}  }
class C{  RedCompletionProposal(final int priority,final String replacementString,final int replacementOffset,final int replacementLength,final int prefixLength,final int cursorPosition,final int selectionLength,final Image image,final boolean decoratePrefix,final String displayString,final boolean activateAssitant,final Collection<Runnable> operationsAfterAccepting,final IContextInformation contextInformation,final String additionalProposalInfo,final boolean additionalInfoAsHtml,final String additionalInfoForStyledLabel,final boolean strikeout){  Preconditions.checkNotNull(replacementString);  Preconditions.checkState(replacementOffset >= 0);  Preconditions.checkState(replacementLength >= 0);  Preconditions.checkState(cursorPosition >= 0);  this.priority=priority;  this.replacementString=replacementString;  this.replacementOffset=replacementOffset;  this.replacementLength=replacementLength;  this.prefixLength=prefixLength;  this.decoratePrefix=decoratePrefix;  this.cursorPosition=cursorPosition;  this.selectionLength=selectionLength;  this.image=image;  this.displayString=displayString;  this.strikeout=strikeout;  this.contextInformation=contextInformation;  this.activateAssistant=activateAssitant;  this.operationsAfterAccepting=operationsAfterAccepting;  this.additionalProposalInfo=additionalProposalInfo;  this.additionalInfoAsHtml=additionalInfoAsHtml;  this.additionalInfoForStyledLabel=additionalInfoForStyledLabel;}  }
class C{  public int lastIndexOf(Object e,int index){  Object[] elements=getArray();  return lastIndexOf(e,elements,index);}  }
class C{  RegexInfo(){  this(GramBooleanQuery.QueryOp.ANY);}  }
class C{  public static String format(final List<? extends NameValuePair> parameters,final String charset){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encodeFormFields(parameter.getName(),charset);    final String encodedValue=encodeFormFields(parameter.getValue(),charset);    if (result.length() > 0) {      result.append(PARAMETER_SEPARATOR);    }    result.append(encodedName);    if (encodedValue != null) {      result.append(NAME_VALUE_SEPARATOR);      result.append(encodedValue);    }  }  return result.toString();}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  protected final boolean isDescendant(int identity){  return (_parent2(identity) >= _startNode) || (_startNode == identity);}  }
class C{  public LogFile(String name,String mode) throws FileNotFoundException, IOException {  super(name,mode);  this.fd=getFD();}  }
class C{  private synchronized boolean removeMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      if (!e.value.equals(value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      return true;    }  }  return false;}  }
class C{  public ImmutableTypeToInstanceMap<B> build(){  return new ImmutableTypeToInstanceMap<B>(mapBuilder.build());}  }
class C{  public void processTuple(K tuple){  MutableInt i=map.get(tuple);  if (i == null) {    i=new MutableInt(0);    map.put(cloneKey(tuple),i);  }  i.increment();}  }
class C{  public void close() throws IOException {  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(PREFIX);  out.writeBytes(NEWLINE);  out.flush();  out.close();}  }
class C{  public String toString(){  return "[" + (space.equals(mySpace) ? "" : space + ", ") + objNum+ "]";}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  protected String translate_labels(production_part rhs[],int rhs_len,String final_action,String lhs_type){  Hashtable label_map=new Hashtable(11);  Hashtable label_types=new Hashtable(11);  symbol_part part;  action_part act_part;  int pos;  for (pos=0; pos < rhs_len; pos++) {    if (!rhs[pos].is_action()) {      part=(symbol_part)rhs[pos];      if (part.label() != null) {        label_map.put(part.label(),new Integer(pos));        label_types.put(part.label(),part.the_symbol().stack_type());      }    }  }  label_map.put("RESULT",new Integer(-1));  label_types.put("RESULT",lhs_type);  for (pos=0; pos < rhs_len; pos++) {    if (rhs[pos].is_action()) {      act_part=(action_part)rhs[pos];      act_part.set_code_string(action_translate(act_part.code_string(),pos,label_map,label_types));    }  }  return action_translate(final_action,rhs_len,label_map,label_types);}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public GitConflictException(String message,List<String> conflictingPaths,Throwable cause){  super(message,cause);  this.conflictingPaths=conflictingPaths;}  }
class C{  public boolean isQCPass(){  Object oo=get_Value(COLUMNNAME_IsQCPass);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static byte[] cipher(byte[] data,byte[] key,int mode) throws Exception {  SecretKeySpec keySpec=new SecretKeySpec(key,"AES");  Cipher cipher=Cipher.getInstance("AES");  cipher.init(mode,keySpec);  byte[] encrypted=cipher.doFinal(data);  return encrypted;}  }
class C{  public float avgShardsPerNode(){  return ((float)metaData.totalNumberOfShards()) / nodes.size();}  }
class C{  private void validateModels(Class type) throws Exception {  for (  ModelList list : models) {    int count=1;    for (    Model model : list) {      if (model != null) {        String name=model.getName();        int index=model.getIndex();        if (index != count++) {          throw new ElementException("Path section '%s[%s]' is out of sequence in %s",name,index,type);        }        model.validate(type);      }    }  }}  }
class C{  public void add(double mean,double standardDeviation,Comparable rowKey,Comparable columnKey){  add(new Double(mean),new Double(standardDeviation),rowKey,columnKey);}  }
class C{  public static String match(String input,String pathAndExpected) throws Exception {  return match(input,pathAndExpected,DEFAULT_DELTA);}  }
class C{  public RenameCompilationUnitProcessor(ICompilationUnit unit) throws CoreException {  fCu=unit;  if (fCu != null) {    computeRenameTypeRefactoring();    setNewElementName(fCu.getElementName());  }}  }
class C{  public BreakpointSetParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BP_SET_SUCCESS);}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if (unit instanceof Protomech) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (doors <= loadedThisTurn) {    result=false;  }  return result;}  }
class C{  public static void releaseScreenLock(Context context){  KeyguardManager keyguardManager=(KeyguardManager)context.getApplicationContext().getSystemService(Context.KEYGUARD_SERVICE);  KeyguardManager.KeyguardLock keyguardLock=keyguardManager.newKeyguardLock("TAG");  keyguardLock.disableKeyguard();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:      return TypesPackage.TSTRUCT_METHOD___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMEMBER___IS_STATIC:    return TypesPackage.TSTRUCT_METHOD___IS_STATIC;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TMemberWithAccessModifier.class) {switch (baseOperationID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_METHOD___GET_MEMBER_ACCESS_MODIFIER;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TMethod.class) {switch (baseOperationID) {case TypesPackage.TMETHOD___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_METHOD___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMETHOD___IS_STATIC:return TypesPackage.TSTRUCT_METHOD___IS_STATIC;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TStructMember.class) {switch (baseOperationID) {case TypesPackage.TSTRUCT_MEMBER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_METHOD___GET_DEFAULT_MEMBER_ACCESS_MODIFIER;case TypesPackage.TSTRUCT_MEMBER___IS_STATIC:return TypesPackage.TSTRUCT_METHOD___IS_STATIC;case TypesPackage.TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_METHOD___GET_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void put(String key,Object val){  this.put(UniqueString.uniqueStringOf(key),val);}  }
class C{  public void visit(BinaryNode<T> parentNode,BinaryNode<T> node){  RightThreadedBinaryNode<T> parent=(RightThreadedBinaryNode<T>)parentNode;  RightThreadedBinaryNode<T> n=(RightThreadedBinaryNode<T>)node;  if (parent != null && !nodes.contains(parent)) {    visitNode(parent);  }  if (!nodes.contains(n)) {    visitNode(n);  }  if (parent != null) {    visitEdge(parent,n);  }  if (n.getNext() != null) {    visitEdge(n,n.getNext());  }}  }
class C{  private void navigate(final int itemId){switch (itemId) {case R.id.drawer_item_1:    getFragmentManager().beginTransaction().replace(R.id.content,mFirstFragment).commit();  break;case R.id.drawer_item_2:getFragmentManager().beginTransaction().replace(R.id.content,mSecondFragment).commit();break;default :break;}}  }
class C{  @Override public String toString(){  return str;}  }
class C{  public static <T>void write(String fileName,Iterable<T> list,ITransformer<T,String> transformer) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(fileName));  for (  T object : list) {    writer.write(transformer.transform(object));    writer.newLine();  }  writer.close();}  }
class C{  public boolean isCancelled(){  for (  Future<T> f : components)   if (f.isCancelled())   return true;  return false;}  }
class C{  public void testFindCNBForClass(){  Class<?> cls=this.getClass();  String expResult="jmri-util-prefs";  String result=JmriPreferencesProvider.findCNBForClass(cls);  assertEquals(expResult,result);}  }
class C{  protected String label_translate(String id_str,int act_pos,Hashtable label_map,Hashtable label_types){  Integer label_pos;  String label_type;  int offset;  label_pos=(Integer)label_map.get(id_str);  if (label_pos == null)   return id_str;  label_type=(String)label_types.get(id_str);  if (label_pos.intValue() == -1) {    return "((" + label_type + ")"+ emit.pre("result")+ ")";  }  if (label_pos.intValue() > act_pos) {    System.err.println("*** Label \"" + id_str + "\" appears in action before it appears in production");    lexer.error_count++;    return id_str;  }  offset=(act_pos - label_pos.intValue()) - 1;  return "(/*" + id_str + "*/("+ label_type+ ")"+ emit.pre("stack")+ ".elementAt("+ emit.pre("top")+ "-"+ offset+ "))";}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public void removeMapping(String virtual) throws ExpressionException, SecurityException {  checkWriteAccess();  _removeMapping(virtual);}  }
class C{  public static long constructHLLValue(final int log2m,final int registerIndex,final int registerValue){  final long partition=registerIndex;  final long substreamValue=(1L << (registerValue - 1));  return (substreamValue << log2m) | partition;}  }
class C{  private boolean checkForcedExtensionCondition(){  return isExtensionTimeLeft();}  }
class C{  public static void matrixMult(MatrixBlock m1,MatrixBlock m2,MatrixBlock ret,int k) throws DMLRuntimeException {  if (m1.isEmptyBlock(false) || m2.isEmptyBlock(false)) {    ret.examSparsity();    return;  }  if (m1.rlen == 1 && (8L * m2.clen * k > MEM_OVERHEAD_THRESHOLD || !LOW_LEVEL_OPTIMIZATION || m2.clen == 1 || m1.isUltraSparse() || m2.isUltraSparse()) || 2L * m1.rlen * m1.clen* m2.clen < PAR_MINFLOP_THRESHOLD) {    matrixMult(m1,m2,ret);    return;  }  boolean tm2=checkPrepMatrixMultRightInput(m1,m2);  m2=prepMatrixMultRightInput(m1,m2);  ret.sparse=(m1.isUltraSparse() || m2.isUltraSparse());  if (!ret.sparse)   ret.allocateDenseBlock(); else   ret.allocateSparseRowsBlock();  if (!ret.isThreadSafe()) {    matrixMult(m1,m2,ret);    return;  }  boolean pm2r=checkParMatrixMultRightInputRows(m1,m2,k);  boolean pm2c=checkParMatrixMultRightInputCols(m1,m2,k,pm2r);  int num=pm2r ? m2.rlen : pm2c ? m2.clen : m1.rlen;  try {    ExecutorService pool=Executors.newFixedThreadPool(k);    ArrayList<MatrixMultTask> tasks=new ArrayList<MatrixMultTask>();    int nk=(pm2r || pm2c) ? k : UtilFunctions.roundToNext(Math.min(8 * k,num / 32),k);    ArrayList<Integer> blklens=getBalancedBlockSizes(num,nk);    for (int i=0, lb=0; i < blklens.size(); lb+=blklens.get(i), i++)     tasks.add(new MatrixMultTask(m1,m2,ret,tm2,pm2r,pm2c,lb,lb + blklens.get(i)));    List<Future<Object>> taskret=pool.invokeAll(tasks);    pool.shutdown();    ret.nonZeros=0;    for (    Future<Object> task : taskret) {      if (pm2r)       vectAdd((double[])task.get(),ret.denseBlock,0,0,ret.rlen * ret.clen); else       ret.nonZeros+=(Long)task.get();    }    if (pm2r)     ret.recomputeNonZeros();  } catch (  Exception ex) {    throw new DMLRuntimeException(ex);  }  ret.examSparsity();}  }
class C{  private void updatePortsWithNewPortsByNumber(Map<OFPort,OFPortDesc> newPortsByNumber){  if (!lock.writeLock().isHeldByCurrentThread()) {    throw new IllegalStateException("Method called without " + "holding writeLock");  }  Map<String,OFPortDesc> newPortsByName=new HashMap<String,OFPortDesc>();  List<OFPortDesc> newPortList=new ArrayList<OFPortDesc>();  List<OFPortDesc> newEnabledPortList=new ArrayList<OFPortDesc>();  List<OFPort> newEnabledPortNumbers=new ArrayList<OFPort>();  for (  OFPortDesc p : newPortsByNumber.values()) {    newPortList.add(p);    newPortsByName.put(p.getName().toLowerCase(),p);    if (!p.getState().contains(OFPortState.LINK_DOWN) && !p.getConfig().contains(OFPortConfig.PORT_DOWN)) {      newEnabledPortList.add(p);      newEnabledPortNumbers.add(p.getPortNo());    }  }  portsByName=Collections.unmodifiableMap(newPortsByName);  portsByNumber=Collections.unmodifiableMap(newPortsByNumber);  enabledPortList=Collections.unmodifiableList(newEnabledPortList);  enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);  portList=Collections.unmodifiableList(newPortList);}  }
class C{  public void changeCIFSShare(String shareName,Map<String,String> attrs){  FlexFileShare share=new FlexFileShare(server.getNaServer(),null);  share.changeCIFSShare(shareName,attrs);}  }
class C{  public LinearScale inverse(){  return new LinearScale(mRangeA,mRangeB,mDomainA,mDomainB);}  }
class C{  public void start(){  for (  Sensor sensor : sensorList) {    sensorManager.registerListener(this,sensor,SensorManager.SENSOR_DELAY_GAME);  }}  }
class C{  public boolean isSorted(){  return (resultCode == 0);}  }
class C{  private void decrementCopyFieldTargetCount(SchemaField dest){  Integer count=copyFieldTargetCounts.get(dest);  assert count != null;  if (count <= 1) {    copyFieldTargetCounts.remove(dest);  } else {    copyFieldTargetCounts.put(dest,count - 1);  }}  }
class C{  public DocumentEngine(DocAction po){  this(po,STATUS_Drafted);}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZones,Map<String,StoragePort> initiatorPortsMap){  Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>();  Zone zone=null;  List<Zone> zones=null;  for (  String initiatorWwn : wwnToZones.keySet()) {    for (    String portWwn : initiatorPortsMap.keySet()) {      zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZones.get(initiatorWwn));      if (zone != null) {        zones=filteredMap.get(initiatorWwn);        if (zones == null) {          zones=new ArrayList<>();          filteredMap.put(initiatorWwn,zones);        }        zones.add(zone);      }    }  }  return filteredMap;}  }
class C{  public static void escapeHtml(Writer writer,String string) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (string == null) {    return;  }  Entities.HTML40.escape(writer,string);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.509 -0500",hash_original_method="39063DDD1454993D1B4985089C8FABB6",hash_generated_method="B49EE5410036343C8449E147C7B09724") public CompareResult<RouteInfo> compareRoutes(LinkProperties target){  CompareResult<RouteInfo> result=new CompareResult<RouteInfo>();  result.removed=new ArrayList<RouteInfo>(mRoutes);  result.added.clear();  if (target != null) {    for (    RouteInfo r : target.getRoutes()) {      if (!result.removed.remove(r)) {        result.added.add(r);      }    }  }  return result;}  }
class C{  public void reset(){  epoch=0;}  }
class C{  public BezierTool(BezierFigure prototype){  this(prototype,null);}  }
class C{  @Override protected void observableDeactivated(){  observable.removeUpdatable(this);}  }
class C{  public void addContextToItems(Example examples){  Map<String,Set<String>> contextStringFeatures=null;  Map<String,Map<String,Double>> contextFloatFeatures=null;  Map<String,List<Double>> contextDenseFeatures=null;  if (examples.context != null) {    if (examples.context.stringFeatures != null) {      contextStringFeatures=examples.context.getStringFeatures();    }    if (examples.context.floatFeatures != null) {      contextFloatFeatures=examples.context.getFloatFeatures();    }    if (examples.context.denseFeatures != null) {      contextDenseFeatures=examples.context.getDenseFeatures();    }  }  for (  FeatureVector item : examples.example) {    addContextToItem(contextStringFeatures,contextFloatFeatures,contextDenseFeatures,item);  }}  }
class C{  public static void createOPUSDirectories(Config config){  log.info("Creating temp directories");  UrbanSimParameterConfigModuleV3 module=M4UConfigUtils.getUrbanSimParameterConfigAndPossiblyConvert(config);  File tempFile=new File(module.getOpusHome());  tempFile.mkdirs();  tempFile=new File(module.getMATSim4Opus());  tempFile.mkdirs();  tempFile=new File(module.getMATSim4OpusOutput());  tempFile.mkdirs();  tempFile=new File(module.getMATSim4OpusTemp());  tempFile.mkdirs();  tempFile=new File(module.getMATSim4OpusConfig());  tempFile.mkdirs();  log.info("Finished creating temp directories");}  }
class C{  private boolean isSpecializedHandlerAvailable(Intent intent){  PackageManager pm=mActivity.getPackageManager();  List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);  if (handlers == null || handlers.size() == 0) {    return false;  }  for (  ResolveInfo resolveInfo : handlers) {    IntentFilter filter=resolveInfo.filter;    if (filter == null) {      continue;    }    if (filter.countDataAuthorities() == 0 && filter.countDataPaths() == 0) {      continue;    }    return true;  }  return false;}  }
class C{  public HistoryChangedEvent(Object source,String name,DefaultListModel history){  super(source);  m_HistoryName=name;  m_History=history;}  }
class C{  private Rectangle2D viewToFrame(Rectangle2D view){  double width=view.getWidth() / this.viewW;  double height=view.getHeight() / this.viewH;  double x=view.getX() - (width * this.viewX);  double y=view.getY() - (height * this.viewY);  return new Rectangle2D.Double(x,y,width,height);}  }
class C{  public boolean exists(File file){  return file.exists();}  }
class C{  public boolean hasVisitedZone(StendhalRPZone zone){  return null != getKeyedSlot("!visited",zone.getName());}  }
class C{  static List<Advice> processRequest(boolean tokenOwner,List<Advice> requested,List<Advice> present){  assert requested != null;  final List<Advice> result=tokenOwner ? requested : combineNoIntersec(requested,present);  assert result != null;  return result;}  }
class C{  public static final boolean inCheck(Position pos){  int kingSq=pos.getKingSq(pos.whiteMove);  if (kingSq < 0)   return false;  return sqAttacked(pos,kingSq);}  }
class C{  private JsonObject broadlinkStandardParams(int api_id,String command){  JsonObject initJsonObjectParams=new JsonObject();  initJsonObjectParams.addProperty(BroadlinkConstants.API_ID,api_id);  initJsonObjectParams.addProperty(BroadlinkConstants.COMMAND,command);  initJsonObjectParams.addProperty(BroadlinkConstants.LICENSE,broadlinkLicense());  return initJsonObjectParams;}  }
class C{  private void migrateFilePermissions(){  File[] files=new File(ThemeUtils.SYSTEM_THEME_PATH).listFiles();  for (  File file : files) {    setAllUsersWritable(file,true);  }}  }
class C{  public boolean isMappingsModifiedSinceLastPublication(){  return mappingsModifiedSinceLastPublication;}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(url),entity),contentType,responseHandler,context);}  }
class C{  public void shrinkImageCache(){  _imageResourceLoader.shrink();}  }
class C{  public void addRequestListener(RequestListener listener){  addMessageListener(new RequestListenerMessageEventHandler(listener));}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  private KeyListener createKeyListener(){  if (keyListener == null) {    keyListener=new KeyHandler();  }  return keyListener;}  }
class C{  public SqlCommitSeqno(SqlConnectionManager connectionManager,String schema,String tableType){  this.connectionManager=connectionManager;  this.schema=schema;  this.tableType=tableType;  allSeqnoQuery="SELECT seqno, fragno, last_frag, source_id, epoch_number, eventid, shard_id, extract_timestamp, applied_latency, update_timestamp, task_id from " + schema + "."+ TABLE_NAME;}  }
class C{  public Select<Model> whereEquals(String column,Object value){  addClause(new DataFilterCriterion(column,DataFilterCriterion.DataFilterOperator.EQUAL,value),DataFilterConjunction.AND);  return this;}  }
class C{  public static void enableUnitTestMode(){  unitTestMode=true;}  }
class C{  public UnicastRef2(){}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public MinProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  public void scheduleSync(Account requestedAccount,int userId,int reason,String requestedAuthority,Bundle extras,long delay,boolean onlyThoseWithUnkownSyncableState){  boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);  final boolean backgroundDataUsageAllowed=!mBootCompleted || getConnectivityManager().getBackgroundDataSetting();  if (extras == null)   extras=new Bundle();  Boolean expedited=extras.getBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,false);  if (expedited) {    delay=-1;  }  AccountAndUser[] accounts;  if (requestedAccount != null && userId != UserHandle.USER_ALL) {    accounts=new AccountAndUser[]{new AccountAndUser(requestedAccount,userId)};  } else {    accounts=mRunningAccounts;    if (accounts.length == 0) {      if (isLoggable) {        Log.v(TAG,"scheduleSync: no accounts configured, dropping");      }      return;    }  }  final boolean uploadOnly=extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD,false);  final boolean manualSync=extras.getBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,false);  if (manualSync) {    extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_BACKOFF,true);    extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,true);  }  final boolean ignoreSettings=extras.getBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,false);  int source;  if (uploadOnly) {    source=SyncStorageEngine.SOURCE_LOCAL;  } else   if (manualSync) {    source=SyncStorageEngine.SOURCE_USER;  } else   if (requestedAuthority == null) {    source=SyncStorageEngine.SOURCE_POLL;  } else {    source=SyncStorageEngine.SOURCE_SERVER;  }  for (  AccountAndUser account : accounts) {    final HashSet<String> syncableAuthorities=new HashSet<String>();    for (    RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapter : mSyncAdapters.getAllServices(account.userId)) {      syncableAuthorities.add(syncAdapter.type.authority);    }    if (requestedAuthority != null) {      final boolean hasSyncAdapter=syncableAuthorities.contains(requestedAuthority);      syncableAuthorities.clear();      if (hasSyncAdapter)       syncableAuthorities.add(requestedAuthority);    }    for (    String authority : syncableAuthorities) {      int isSyncable=getIsSyncable(account.account,account.userId,authority);      if (isSyncable == 0) {        continue;      }      final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo;      syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(authority,account.account.type),account.userId);      if (syncAdapterInfo == null) {        continue;      }      final boolean allowParallelSyncs=syncAdapterInfo.type.allowParallelSyncs();      final boolean isAlwaysSyncable=syncAdapterInfo.type.isAlwaysSyncable();      if (isSyncable < 0 && isAlwaysSyncable) {        mSyncStorageEngine.setIsSyncable(account.account,account.userId,authority,1);        isSyncable=1;      }      if (onlyThoseWithUnkownSyncableState && isSyncable >= 0) {        continue;      }      if (!syncAdapterInfo.type.supportsUploading() && uploadOnly) {        continue;      }      boolean syncAllowed=(isSyncable < 0) || ignoreSettings || (backgroundDataUsageAllowed && mSyncStorageEngine.getMasterSyncAutomatically(account.userId) && mSyncStorageEngine.getSyncAutomatically(account.account,account.userId,authority));      if (!syncAllowed) {        if (isLoggable) {          Log.d(TAG,"scheduleSync: sync of " + account + ", "+ authority+ " is not allowed, dropping request");        }        continue;      }      Pair<Long,Long> backoff=mSyncStorageEngine.getBackoff(account.account,account.userId,authority);      long delayUntil=mSyncStorageEngine.getDelayUntilTime(account.account,account.userId,authority);      final long backoffTime=backoff != null ? backoff.first : 0;      if (isSyncable < 0) {        Bundle newExtras=new Bundle();        newExtras.putBoolean(ContentResolver.SYNC_EXTRAS_INITIALIZE,true);        if (isLoggable) {          Log.v(TAG,"scheduleSync:" + " delay " + delay + ", source "+ source+ ", account "+ account+ ", authority "+ authority+ ", extras "+ newExtras);        }        scheduleSyncOperation(new SyncOperation(account.account,account.userId,reason,source,authority,newExtras,0,backoffTime,delayUntil,allowParallelSyncs));      }      if (!onlyThoseWithUnkownSyncableState) {        if (isLoggable) {          Log.v(TAG,"scheduleSync:" + " delay " + delay + ", source "+ source+ ", account "+ account+ ", authority "+ authority+ ", extras "+ extras);        }        scheduleSyncOperation(new SyncOperation(account.account,account.userId,reason,source,authority,extras,delay,backoffTime,delayUntil,allowParallelSyncs));      }    }  }}  }
class C{  public BType addBuilder(MType message){  ensureMutableMessageList();  ensureBuilders();  SingleFieldBuilder<MType,BType,IType> builder=new SingleFieldBuilder<MType,BType,IType>(message,this,isClean);  messages.add(null);  builders.add(builder);  onChanged();  incrementModCounts();  return builder.getBuilder();}  }
class C{  void keyClass(Class<?> keyCls){  this.keyCls=keyCls;}  }
class C{  private void compileCup2(){  log(" === Compiling CUP2 sources ===",Project.MSG_INFO);  Javac jcct=new Javac();  jcct.setSourcepath(new Path(this.getProject(),cup2srcdir));  jcct.setSrcdir(new Path(this.getProject(),cup2srcdir));  jcct.setDestdir(new File(this.destdir));  jcct.setClasspath(classpath);  jcct.setProject(this.getProject());  jcct.execute();}  }
class C{  public CtClass makeNestedClass(String name,boolean isStatic){  throw new RuntimeException(getName() + " is not a class");}  }
class C{  public ConvexC2_DTLZ2(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void onActivated(ITool prevTool){}  }
class C{  public static void check(boolean condition,int errorCode) throws RuntimeException {  if (!condition) {    throw new RuntimeException(MP.getMessage(errorCode));  }}  }
class C{  private void toggleSpeaker(){  if (null != mCall) {    VectorCallSoundManager.toggleSpeaker();  } else {    Log.w(LOG_TAG,"## toggleSpeaker(): Failed");  }}  }
class C{  private void readInImportFileAndUpdateDetails() throws PrivateKeysHandlerException, KeyCrypterException {  try {    File file=new File(outputFilename);    if (multiBitFileChooser.accept(file)) {      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      PrivateKeysHandler privateKeysHandler=new PrivateKeysHandler(this.bitcoinController.getModel().getNetworkParameters());      Collection<PrivateKeyAndDate> privateKeyAndDates=privateKeysHandler.readInPrivateKeys(new File(outputFilename),CharBuffer.wrap(passwordField1.getPassword()));      numberOfKeysLabel.setText("" + privateKeyAndDates.size());      Date replayDate=privateKeysHandler.calculateReplayDate(privateKeyAndDates,this.bitcoinController.getModel().getActiveWallet());      if (replayDate == null) {        replayDateLabel.setText(controller.getLocaliser().getString("showImportPrivateKeysPanel.thereWereMissingKeyDates"));      } else {        replayDateLabel.setText(DateFormat.getDateInstance(DateFormat.MEDIUM,controller.getLocaliser().getLocale()).format(replayDate));      }      setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }  }  finally {    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }}  }
class C{  public void install(JTextComponent c){  component=c;  Document doc=c.getDocument();  dot=mark=0;  dotLTR=markLTR=true;  dotBias=markBias=Position.Bias.Forward;  if (doc != null) {    doc.addDocumentListener(handler);  }  c.addPropertyChangeListener(handler);  c.addFocusListener(this);  c.addMouseListener(this);  c.addMouseMotionListener(this);  if (component.hasFocus()) {    focusGained(null);  }  Number ratio=(Number)c.getClientProperty("caretAspectRatio");  if (ratio != null) {    aspectRatio=ratio.floatValue();  } else {    aspectRatio=-1;  }  Integer width=(Integer)c.getClientProperty("caretWidth");  if (width != null) {    caretWidth=width.intValue();  } else {    caretWidth=-1;  }}  }
class C{  private void startClusterPort() throws Exception {  bindPort(_portPublic);  bindPort(_portBartender);}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public RotationAboutCenter(){}  }
class C{  public LayerTree(LayerTreeModel model,Offset offset){  if (model == null) {    String message=Logging.getMessage("nullValue.ModelIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (offset == null) {    String message=Logging.getMessage("nullValue.OffsetIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.initialize(model,offset);}  }
class C{  public void onViewAttachedToWindow(){}  }
class C{  private boolean isTaxonomicCoverageEmpty(TaxonomicCoverage cov){  if (cov != null) {    String description=cov.getDescription();    for (    TaxonKeyword word : cov.getTaxonKeywords()) {      boolean isTaxonKeywordEmpty=isTaxonKeywordEmpty(word);      if (!isTaxonKeywordEmpty) {        return false;      }    }    return Strings.isNullOrEmpty(description);  }  return true;}  }
class C{  protected V doRemove(int key,V value){  lock();  try {    int c=count - 1;    IntHashEntry[] tab=table;    int index=key & tab.length - 1;    IntHashEntry<V> first=tab[index];    IntHashEntry<V> e=first;    while (e != null && key != e.key) {      e=e.next;    }    V oldValue=null;    if (e != null) {      V v=e.value;      if (value == null || value.equals(v)) {        oldValue=v;        ++modCount;        IntHashEntry<V> newFirst=e.next;        for (IntHashEntry<V> p=first; p != e; p=p.next) {          newFirst=new IntHashEntry<V>(p.key,newFirst,p.value);        }        tab[index]=newFirst;        count=c;      }    }    return oldValue;  }  finally {    unlock();  }}  }
class C{  private void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int policyFlags){  MotionEvent event=mInjectedPointerTracker.getLastInjectedHoverEvent();  if (event != null && event.getActionMasked() != MotionEvent.ACTION_HOVER_EXIT) {    final int pointerIdBits=event.getPointerIdBits();    if (!mSendTouchExplorationEndDelayed.isPending()) {      mSendTouchExplorationEndDelayed.post();    }    sendMotionEvent(event,MotionEvent.ACTION_HOVER_EXIT,pointerIdBits,policyFlags);  }}  }
class C{  public Master(String filename,Name origin,long ttl) throws IOException {  this(new File(filename),origin,ttl);}  }
class C{  public PAEncTSEnc(DerValue encoding) throws Asn1Exception, IOException {  DerValue der;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  pATimeStamp=KerberosTime.parse(encoding.getData(),(byte)0x00,false);  if (encoding.getData().available() > 0) {    der=encoding.getData().getDerValue();    if ((der.getTag() & 0x1F) == 0x01) {      pAUSec=new Integer(der.getData().getBigInteger().intValue());    } else     throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public static void main(String[] args){  runCLIApplication(CacheFloatDistanceInOnDiskMatrix.class,args);}  }
class C{  private void addArguments(final Node node,final List list){  final NamedNodeMap map=node.getAttributes();  if (map != null) {    Collections.sort(list,new AttributeComparator());    for (final Iterator iterator=list.iterator(); iterator.hasNext(); ) {      final Attr attribute=(Attr)iterator.next();      map.setNamedItem(attribute);    }  }}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(),null,null);}  }
class C{  @Override public double[] clusterPriors(){  double[] n=new double[m_priors.length];  System.arraycopy(m_priors,0,n,0,n.length);  return n;}  }
class C{  public void testBlockCommitOnFragments() throws Exception {  LinkedList<ReplDBMSEvent> events=new LinkedList<ReplDBMSEvent>();  for (int seqno=0; seqno < 10; seqno++) {    for (short fragNo=0; fragNo < 3; fragNo++) {      ReplDBMSEvent event=helper.createEvent(seqno,"db01",fragNo,(fragNo == 2));      events.add(event);    }  }  checkBlockCommitSemantics(events,BlockCommitPolicy.lax,true,null);  checkBlockCommitSemantics(events,BlockCommitPolicy.strict,false,null);  checkBlockCommitSemantics(events,null,false,null);}  }
class C{  public Graph search(List<Node> nodes){  this.logger.log("info","Starting PC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List allNodes=getIndependenceTest().getVariables();  if (!allNodes.containsAll(nodes)) {    throw new IllegalArgumentException("All of the given nodes must " + "be in the domain of the independence test provided.");  }  graph=new EdgeListGraph(nodes);  IFas fas=new FasStableConcurrent(initialGraph,getIndependenceTest());  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setVerbose(verbose);  graph=fas.search();  sepsets=fas.getSepsets();  SearchGraphUtils.pcOrientbk(knowledge,graph,nodes);  SearchGraphUtils.orientCollidersUsingSepsets(this.sepsets,knowledge,graph,verbose);  MeekRules rules=new MeekRules();  rules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);  rules.setKnowledge(knowledge);  rules.orientImplied(graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.elapsedTime=System.currentTimeMillis() - startTime;  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.log("info","Finishing PC Algorithm.");  this.logger.flush();  return graph;}  }
class C{  public boolean needsStash(){  return needsStash;}  }
class C{  public AttributeSet removeAttributes(AttributeSet old,AttributeSet attrs){  if (old != attrs) {    old=removeHTMLTags(old,attrs);  }  return super.removeAttributes(old,convertAttributeSet(attrs));}  }
class C{  public LoadFromDatabaseThread(final INaviModule module){  m_module=module;}  }
class C{  @Override public void initialize(CeylonTool mainTool) throws Exception {  if (throwableClassName != null) {    throw (Exception)Class.forName(throwableClassName).newInstance();  }  this.inited=true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.196 -0500",hash_original_method="F74760D693CA529902BCB312B806950B",hash_generated_method="ACE28FFFFD1910883FF056D2EADE1DDB") public static boolean equals(CharSequence a,CharSequence b){  if (a.length() != b.length()) {    return false;  }  int length=a.length();  for (int i=0; i < length; i++) {    if (a.charAt(i) != b.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public void removeAnnotation(final WorkflowAnnotation toDelete){  if (toDelete == null) {    throw new IllegalArgumentException("toDelete must not be null!");  }synchronized (lock) {    this.annotationsDrawOrder.remove(toDelete);    this.annotationsEventOrder.remove(toDelete);  }}  }
class C{  public final void addElements(Object value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.868 -0400",hash_original_method="516D11BB827757AD8F5587BDBEAF4E8D",hash_generated_method="58B45512843C4AF42CDD4A9D2C256B17") public static IOFileFilter prefixFileFilter(String prefix){  return new PrefixFileFilter(prefix);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putOctetString(userData);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  if (timestamp != null)   bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),timestamp.asn1Encode());  if (usec != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(usec.intValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),temp);  }  if (seqNumber != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(seqNumber.longValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),temp);  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),sAddress.asn1Encode());  if (rAddress != null)   temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public static SimpleBigDecimal approximateDivisionByN(BigInteger k,BigInteger s,BigInteger vm,byte a,int m,int c){  int _k=(m + 5) / 2 + c;  BigInteger ns=k.shiftRight(m - _k - 2 + a);  BigInteger gs=s.multiply(ns);  BigInteger hs=gs.shiftRight(m);  BigInteger js=vm.multiply(hs);  BigInteger gsPlusJs=gs.add(js);  BigInteger ls=gsPlusJs.shiftRight(_k - c);  if (gsPlusJs.testBit(_k - c - 1)) {    ls=ls.add(ECConstants.ONE);  }  return new SimpleBigDecimal(ls,c);}  }
class C{  public IndTestRegression(DataSet dataSet,double alpha){  if (!(alpha >= 0 && alpha <= 1)) {    throw new IllegalArgumentException("Alpha mut be in [0, 1]");  }  this.dataSet=dataSet;  this.data=new DenseDoubleMatrix2D(dataSet.getDoubleData().toArray());  this.variables=Collections.unmodifiableList(dataSet.getVariables());  setAlpha(alpha);}  }
class C{  public EventSource(){  LOG.entering(CLASS_NAME,"<init>");}  }
class C{  public void validateHighAvailabilityTypeForUpdate(VirtualPool virtualPool,BlockVirtualPoolUpdateParam updateParam){  if (updateParam.getHighAvailability().getType() != null) {    final boolean condition=updateParam.specifiesHighAvailability();    if (!condition) {      throw APIException.badRequests.invalidParameterHighAvailabilityType(updateParam.getHighAvailability().getType());    }  }}  }
class C{  StringVector processSTRINGLIST(StylesheetHandler handler,String uri,String name,String rawName,String value){  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    strings.addElement(tokenizer.nextToken());  }  return strings;}  }
class C{  public void released(int tenantclass,long hrt_requested,long hrt_acquired,long hrt_released){  finished(tenantclass,hrt_released - hrt_acquired,hrt_released - hrt_requested);}  }
class C{  public static String formatLongRev(long rev){  return String.format("%015x%x",(rev >>> 4),rev & 0xF);}  }
class C{  @SuppressWarnings({"BusyWait"}) private void initClient() throws IgniteSpiException {  if (initGuard.compareAndSet(false,true))   try {    if (cred == null)     throw new IgniteSpiException("AWS credentials are not set.");    if (cfg == null)     U.warn(log,"Amazon client configuration is not set (will use default).");    if (F.isEmpty(bucketName))     throw new IgniteSpiException("Bucket name is null or empty (provide bucket name and restart).");    s3=cfg != null ? new AmazonS3Client(cred,cfg) : new AmazonS3Client(cred);    if (!s3.doesBucketExist(bucketName)) {      try {        s3.createBucket(bucketName);        if (log.isDebugEnabled())         log.debug("Created S3 bucket: " + bucketName);        while (!s3.doesBucketExist(bucketName))         try {          U.sleep(200);        } catch (        IgniteInterruptedCheckedException e) {          throw new IgniteSpiException("Thread has been interrupted.",e);        }      } catch (      AmazonClientException e) {        if (!s3.doesBucketExist(bucketName)) {          s3=null;          throw new IgniteSpiException("Failed to create bucket: " + bucketName,e);        }      }    }  }  finally {    initLatch.countDown();  } else {    try {      U.await(initLatch);    } catch (    IgniteInterruptedCheckedException e) {      throw new IgniteSpiException("Thread has been interrupted.",e);    }    if (s3 == null)     throw new IgniteSpiException("Ip finder has not been initialized properly.");  }}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  private T request(){  try {    new ConsoleReader().resetPromptLine(textWait,"",1);  } catch (  IOException e) {    throw new IllegalStateException("Unable to write",e);  }  List<String> progress=Arrays.asList("|","/","-","\\");  int index=0;  T result=null;  while (wait) {    try {      new ConsoleReader().resetPromptLine(textWait,progress.get(index),1);    } catch (    IOException e) {      throw new IllegalStateException("Unable to write",e);    }    result=request.execute();    WaitingActionConditionStateImpl<T> waitingActionConditionState=new WaitingActionConditionStateImpl(result);    waitingActionCondition.check(waitingActionConditionState);    wait=!waitingActionConditionState.isComplete();    String textUpdate=waitingActionConditionState.newText();    if (textUpdate != null) {      textWait=textUpdate;    }    try {      Thread.sleep(2000L);    } catch (    InterruptedException e) {      throw new IllegalStateException("Unable to wait",e);    }    index++;    if (index >= progress.size()) {      index=0;    }  }  try {    new ConsoleReader().resetPromptLine(textAfter,"",0);  } catch (  IOException e) {    throw new IllegalStateException("Unable to write",e);  }  System.out.println();  return result;}  }
class C{  public void scrollRectToVisible(int x,int y,int width,int height,Component coordinateSpace){  if (isScrollable()) {    int scrollPosition=getScrollY();    Style s=getStyle();    int w=getWidth() - s.getPadding(isRTL(),LEFT) - s.getPadding(isRTL(),RIGHT);    int h=getHeight() - s.getPadding(false,TOP) - s.getPadding(false,BOTTOM);    Rectangle view;    int invisibleAreaUnderVKB=Form.getInvisibleAreaUnderVKB(getComponentForm());    if (isSmoothScrolling() && destScrollY > -1) {      view=new Rectangle(getScrollX(),destScrollY,w,h - invisibleAreaUnderVKB);    } else {      view=new Rectangle(getScrollX(),getScrollY(),w,h - invisibleAreaUnderVKB);    }    int relativeX=x;    int relativeY=y;    Container parent=null;    if (coordinateSpace != null) {      parent=coordinateSpace.getParent();    }    if (parent == this) {      if (view.contains(x,y,width,height)) {        return;      }    } else {      while (parent != this) {        if (parent == null) {          relativeX=x;          relativeY=y;          break;        }        relativeX+=parent.getX();        relativeY+=parent.getY();        parent=parent.getParent();      }      if (view.contains(relativeX,relativeY,width,height)) {        return;      }    }    if (isScrollableX()) {      if (getScrollX() > relativeX) {        setScrollX(relativeX);      }      int rightX=relativeX + width - s.getPadding(LEFT) - s.getPadding(RIGHT);      if (getScrollX() + w < rightX) {        setScrollX(getScrollX() + (rightX - (getScrollX() + w)));      } else {        if (getScrollX() > relativeX) {          setScrollX(relativeX);        }      }    }    if (isScrollableY()) {      if (getScrollY() > relativeY) {        scrollPosition=relativeY;      }      int bottomY=relativeY + height - s.getPadding(TOP) - s.getPadding(BOTTOM);      if (getScrollY() + h < bottomY + invisibleAreaUnderVKB) {        scrollPosition=getScrollY() + (bottomY - (getScrollY() + h)) + invisibleAreaUnderVKB;      } else {        if (getScrollY() > relativeY) {          scrollPosition=relativeY;        }      }      if (isSmoothScrolling() && isInitialized()) {        initialScrollY=getScrollY();        destScrollY=scrollPosition;        initScrollMotion();      } else {        setScrollY(scrollPosition);      }    }    repaint();  } else {    Container parent=getParent();    if (parent != null) {      parent.scrollRectToVisible(getAbsoluteX() - parent.getAbsoluteX() + x,getAbsoluteY() - parent.getAbsoluteY() + y,width,height,parent);    }  }}  }
class C{  @Override public final int tries(){  return tries;}  }
class C{  public SimpleEdgeStream(DataStream<Edge<K,EV>> edges,AscendingTimestampExtractor<Edge<K,EV>> timeExtractor,StreamExecutionEnvironment context){  context.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);  this.edges=edges.assignTimestampsAndWatermarks(timeExtractor);  this.context=context;}  }
class C{  private static void printUsageAndExit(Options options){  new HelpFormatter().printHelp("rabix <tool> <job> [OPTION]...",options);  System.exit(10);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("OnlyDiscount"))     p_OnlyDiscount="Y".equals(para[i].getParameter()); else     if (name.equals("OnlyDue"))     p_OnlyDue="Y".equals(para[i].getParameter()); else     if (name.equals("IncludeInDispute"))     p_IncludeInDispute="Y".equals(para[i].getParameter()); else     if (name.equals("MatchRequirement"))     p_MatchRequirement=(String)para[i].getParameter(); else     if (name.equals("PaymentRule"))     p_PaymentRule=(String)para[i].getParameter(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("DueDate"))     p_DueDate=(Timestamp)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_PaySelection_ID=getRecord_ID();}  }
class C{  public void testHasSecurityRoleEmpty() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(!WebXmlUtils.hasSecurityRole(webXml,"someRole"));  assertTrue(WebXmlUtils.getSecurityRoleNames(webXml).isEmpty());}  }
class C{  public Arg(){  m_qname=new QName("");  ;  m_val=null;  m_expression=null;  m_isVisible=true;  m_isFromWithParam=false;}  }
class C{  public static boolean hasFroyo(){  return Build.VERSION.SDK_INT >= 8;}  }
class C{  public void removeSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.remove(renderer);}  }
class C{  private static String wrapArgumentCode(Type type,String name){  int typeCode=type.getTypeCode();switch (typeCode) {case TC_BOOLEAN:    return ("(" + name + " ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE)");case TC_BYTE:  return "new java.lang.Byte(" + name + ")";case TC_CHAR:return "new java.lang.Character(" + name + ")";case TC_SHORT:return "new java.lang.Short(" + name + ")";case TC_INT:return "new java.lang.Integer(" + name + ")";case TC_LONG:return "new java.lang.Long(" + name + ")";case TC_FLOAT:return "new java.lang.Float(" + name + ")";case TC_DOUBLE:return "new java.lang.Double(" + name + ")";case TC_ARRAY:case TC_CLASS:return name;default :throw new Error("unexpected type code: " + typeCode);}}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Double && val instanceof Long) {          double k=unwrapKey(key);          long v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  protected void logStatusError(String detailMsg) throws MessagingException {  getLogger().error(getStatusReport(detailMsg).toString());}  }
class C{  public ButtonPainter(Which state){  super();  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);  standard=new SegmentedButtonPainter(state,ctx);  textured=new TexturedButtonPainter(state,ctx);}  }
class C{  public static void deleteFile(File file) throws IOException {  if (file.isDirectory()) {    if (file.list().length == 0) {      file.delete();      System.out.println("Directory is deleted : " + file.getAbsolutePath());    } else {      String files[]=file.list();      for (      String temp : files) {        File fileDelete=new File(file,temp);        deleteFile(fileDelete);      }      if (file.list().length == 0) {        file.delete();      }    }  } else {    file.delete();  }}  }
class C{  public Label(int onLoc,int leftLoc,int rightLoc){  elt[0]=new TopologyLocation(onLoc,leftLoc,rightLoc);  elt[1]=new TopologyLocation(onLoc,leftLoc,rightLoc);}  }
class C{  public void clear(){  for (int x=minX; x <= maxX; x++) {    for (int y=minY; y <= maxY; y++) {      for (int z=minZ; z <= this.maxZ; z++) {        Location loc=new Location(world,x,y,z);        Block block=loc.getBlock();        if (block != null) {          blocks.put(loc,new SectionBlock(block.getType(),block.getData()));          loc.getBlock().setType(Material.AIR);        }      }    }  }}  }
class C{  void _m32(float m32){  this.m32=m32;}  }
class C{  public BerInputStream(byte[] encoded) throws IOException {  this(encoded,0,encoded.length);}  }
class C{  private void writeMetadataTag(double duration,Integer videoCodecId,Integer audioCodecId) throws IOException {  log.debug("writeMetadataTag - duration: {} video codec: {} audio codec: {}",new Object[]{duration,videoCodecId,audioCodecId});  IoBuffer buf=IoBuffer.allocate(192);  buf.setAutoExpand(true);  Output out=new Output(buf);  out.writeString("onMetaData");  Map<Object,Object> params=new HashMap<Object,Object>();  params.put("creationdate",GregorianCalendar.getInstance().getTime().toString());  params.put("duration",duration);  if (videoCodecId != null) {    params.put("videocodecid",videoCodecId.intValue());  }  if (audioCodecId != null) {    params.put("audiocodecid",audioCodecId.intValue());  }  params.put("canSeekToEnd",true);  out.writeMap(params,new Serializer());  buf.flip();  if (fileMetaSize == 0) {    fileMetaSize=buf.limit();  }  log.debug("Metadata size: {}",fileMetaSize);  ITag onMetaData=new Tag(ITag.TYPE_METADATA,0,fileMetaSize,buf,0);  writeTag(onMetaData);}  }
class C{  public InBandBytestreamSession accept() throws XMPPException {  Connection connection=this.manager.getConnection();  InBandBytestreamSession ibbSession=new InBandBytestreamSession(connection,this.byteStreamRequest,this.byteStreamRequest.getFrom());  this.manager.getSessions().put(this.byteStreamRequest.getSessionID(),ibbSession);  IQ resultIQ=IQ.createResultIQ(this.byteStreamRequest);  connection.sendPacket(resultIQ);  return ibbSession;}  }
class C{  public void removeConnection(Connection conn){  int removalIndex=findConnection(conn);  if (removalIndex != -1) {    mConnections.remove(removalIndex);  }}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public Screenshotter takeScreenshot(Context context,int resultCode,Intent data,final ScreenshotCallback cb){  this.context=context;  this.cb=cb;  this.resultCode=resultCode;  this.data=data;  WindowManager windowManager=(WindowManager)MyApplication.getApplication().getSystemService(Context.WINDOW_SERVICE);  width=windowManager.getDefaultDisplay().getWidth();  height=windowManager.getDefaultDisplay().getHeight();  DisplayMetrics metrics=new DisplayMetrics();  windowManager.getDefaultDisplay().getMetrics(metrics);  mScreenDensity=metrics.densityDpi;  mImageReader=ImageReader.newInstance(width,height,0x1,2);  MediaProjectionManager mediaProjectionManager=(MediaProjectionManager)context.getSystemService(Context.MEDIA_PROJECTION_SERVICE);  mMediaProjection=mediaProjectionManager.getMediaProjection(resultCode,data);  try {    virtualDisplay=mMediaProjection.createVirtualDisplay("Screenshotter",width,height,mScreenDensity,DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,mImageReader.getSurface(),null,null);    mImageReader.setOnImageAvailableListener(Screenshotter.this,null);  } catch (  Exception e) {    e.printStackTrace();  }  return this;}  }
class C{  public InvalidAttributesException(){  super();}  }
class C{  public TDoubleIntHashMapDecorator(TDoubleIntHashMap map){  super();  this._map=map;}  }
class C{  public MWMAreaType(Properties ctx,int WM_Area_Type_ID,String trxName){  super(ctx,WM_Area_Type_ID,trxName);  if (WM_Area_Type_ID == 0) {  }}  }
class C{  public static double[] multiply(final double[] a,final double[] b) throws Exception {  Jama.Matrix a_=new Jama.Matrix(a,1);  Jama.Matrix b_=new Jama.Matrix(b,1);  Jama.Matrix c_=a_.arrayTimes(b_);  return c_.getArray()[0];}  }
class C{  public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public boolean isNpivWwnOnNonRdmVmSupported(){  return npivWwnOnNonRdmVmSupported;}  }
class C{  public void close(){  try {    if (read) {      buffIn.close();      in.close();    } else {      buffOut.flush();      buffOut.close();      out.close();    }    name=null;  } catch (  IOException e) {  }}  }
class C{  public StreamRedirectThread(String name,InputStream in,OutputStream out){  super(name);  this.in=new InputStreamReader(in);  this.out=new OutputStreamWriter(out);  this.outWriter=new PrintStream(out);  setPriority(Thread.MAX_PRIORITY - 1);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:00.471 -0500",hash_original_method="D291AC92E2A4746C8F1BADA03A5CE619",hash_generated_method="D27DB6A3FB1E267AFA875190E06BE0A1") public boolean onKeyOther(View view,Editable content,KeyEvent event){  if (event.getAction() != KeyEvent.ACTION_MULTIPLE || event.getKeyCode() != KeyEvent.KEYCODE_UNKNOWN) {    return false;  }  int selectionStart=Selection.getSelectionStart(content);  int selectionEnd=Selection.getSelectionEnd(content);  if (selectionEnd < selectionStart) {    int temp=selectionEnd;    selectionEnd=selectionStart;    selectionStart=temp;  }  CharSequence text=event.getCharacters();  if (text == null) {    return false;  }  content.replace(selectionStart,selectionEnd,text);  return true;}  }
class C{  public V put(final K k,final V v){  final WeakReference<V> ref=newWeakRef(k,v,referenceQueue);  final WeakReference<V> oldRef=map.put(k,ref);  final V oldVal=oldRef == null ? null : oldRef.get();  if (queue.add(v) && DEBUG) {    log.debug("put: key=" + k + ", val="+ v);  }  didUpdate(k,ref,oldRef);  return oldVal;}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numECCodewords;  int offset;  if (ddata.isCompact()) {    offset=NB_BITS_COMPACT[ddata.getNbLayers()] - numCodewords * codewordSize;    numECCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()] - numDataCodewords;  } else {    offset=NB_BITS[ddata.getNbLayers()] - numCodewords * codewordSize;    numECCodewords=NB_DATABLOCK[ddata.getNbLayers()] - numDataCodewords;  }  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      if (rawbits[codewordSize * i + codewordSize - j + offset]) {        dataWords[i]+=flag;      }      flag<<=1;    }  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException rse) {    throw FormatException.getFormatInstance();  }  offset=0;  invertedBitCount=0;  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize];  for (int i=0; i < numDataCodewords; i++) {    boolean seriesColor=false;    int seriesCount=0;    int flag=1 << (codewordSize - 1);    for (int j=0; j < codewordSize; j++) {      boolean color=(dataWords[i] & flag) == flag;      if (seriesCount == codewordSize - 1) {        if (color == seriesColor) {          throw FormatException.getFormatInstance();        }        seriesColor=false;        seriesCount=0;        offset++;        invertedBitCount++;      } else {        if (seriesColor == color) {          seriesCount++;        } else {          seriesCount=1;          seriesColor=color;        }        correctedBits[i * codewordSize + j - offset]=color;      }      flag>>>=1;    }  }  return correctedBits;}  }
class C{  private static void longToBigEndian(byte b[],int pos,long val){  b[pos + 0]=(byte)((val >> 56) & 0xff);  b[pos + 1]=(byte)((val >> 48) & 0xff);  b[pos + 2]=(byte)((val >> 40) & 0xff);  b[pos + 3]=(byte)((val >> 32) & 0xff);  b[pos + 4]=(byte)((val >> 24) & 0xff);  b[pos + 5]=(byte)((val >> 16) & 0xff);  b[pos + 6]=(byte)((val >> 8) & 0xff);  b[pos + 7]=(byte)((val >> 0) & 0xff);}  }
class C{  @Override protected void onSizeChanged(int newWidth,int newHeight,int oldWidth,int oldHeight){  super.onSizeChanged(newWidth,newHeight,oldWidth,oldHeight);  layoutWidth=newWidth;  layoutHeight=newHeight;  setupBounds();  setupPaints();  invalidate();}  }
class C{  public void removeUpdateListener(AnimatorUpdateListener listener){  if (updateListeners == null) {    return;  }  updateListeners.remove(listener);  if (updateListeners.size() == 0) {    updateListeners=null;  }}  }
class C{  public static void put(String key,Object o){  requireLoad();  checkSupported();  engine.put(key,o);}  }
class C{  public static int[] indexOf(String[] searchStrings,String text,int offset){  int[] result={-1,-1};  int zeroIndex=-1;  for (int i=0; i < searchStrings.length; i++) {    int length=searchStrings[i].length();    if (length == 0) {      zeroIndex=i;      continue;    }    int index=text.indexOf(searchStrings[i],offset);    if (index >= 0) {      if (result[0] == -1) {        result[0]=index;        result[1]=i;      } else       if (index < result[0]) {        result[0]=index;        result[1]=i;      } else       if (index == result[0] && length > searchStrings[result[1]].length()) {        result[0]=index;        result[1]=i;      }    }  }  if (zeroIndex > -1 && result[0] == -1) {    result[0]=0;    result[1]=zeroIndex;  }  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, colXCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow, leftCol, rightCol;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {      showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          dataType=WhiteboxRasterBase.DataType.FLOAT;        } else {          showFeedback("The type of data contained in the field " + "can not be mapped into grid cells. Choose a " + "numerical field. The record ID will be used "+ "instead.");          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      if (backgroundValue == noData) {        output.setNoDataValue(noData);      }    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        data=reader.nextRecord();        value=Double.valueOf(data[assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        box=new BoundingBox();        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        for (i=startingPointInPart; i < endingPointInPart; i++) {          if (geometry[i][0] < box.getMinX()) {            box.setMinX(geometry[i][0]);          }          if (geometry[i][0] > box.getMaxX()) {            box.setMaxX(geometry[i][0]);          }          if (geometry[i][1] < box.getMinY()) {            box.setMinY(geometry[i][1]);          }          if (geometry[i][1] > box.getMaxY()) {            box.setMaxY(geometry[i][1]);          }        }        topRow=output.getRowFromYCoordinate(box.getMaxY());        bottomRow=output.getRowFromYCoordinate(box.getMinY());        leftCol=output.getColumnFromXCoordinate(box.getMinX());        rightCol=output.getColumnFromXCoordinate(box.getMaxX());        for (row=topRow; row <= bottomRow; row++) {          rowYCoord=output.getYCoordinateFromRow(row);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {              y1=geometry[i][1];              y2=geometry[i + 1][1];              if (y2 != y1) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                col=output.getColumnFromXCoordinate(xPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }        for (col=leftCol; col <= rightCol; col++) {          colXCoord=output.getXCoordinateFromColumn(col);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {              x1=geometry[i][0];              x2=geometry[i + 1][0];              if (x1 != x2) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                row=output.getRowFromYCoordinate(yPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    do {      cell=pq.poll();      output.setValue(cell.row,cell.col,cell.z);      j++;      if (j % 1000 == 0) {        if (cancelOp) {          cancelOperation();          return;        }        updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));      }    } while (pq.size() > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void editCopy(){}  }
class C{  public ValidationDriver(PropertyMap properties){  this(properties,properties,null);}  }
class C{  public DataSource<CloseableReference<CloseableImage>> fetchImageFromBitmapCache(ImageRequest imageRequest,Object callerContext){  try {    Producer<CloseableReference<CloseableImage>> producerSequence=mProducerSequenceFactory.getDecodedImageProducerSequence(imageRequest);    return submitFetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.BITMAP_MEMORY_CACHE,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE:    return basicSetTimeValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void shutdown() throws MessageServiceException {  LOGGER.warn("Shutdown Signal Received. Shutting down.");  m_shutdown.set(true);  Request shutdownRequest=new AbortRequest();  m_requestQueue.offer(shutdownRequest);  while (m_requestQueue.size() != 0) {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      LOGGER.error("Exception while draining requests from queue",e);    }  }  closeConnection();  if (pingerTask != null)   pingerTask.cancel();  boolean status=Management.removeBeanOrFolder("MessageService/Transport/ZooKeeper/context/" + m_context + "/stats");  if (status)   LOGGER.info("stop monitoring MessageService/Transport/ZooKeeper/context/" + m_context + "/stats");  status=Management.removeBeanOrFolder("MessageService/Transport/ZooKeeper/context/" + m_context + "/registry");  if (status)   LOGGER.info("stop monitoring MessageService/Transport/ZooKeeper/context/" + m_context + "/registry");}  }
class C{  public void testgetPasswordForUser_by_Application() throws ConfigurationException {  PasswordManager pwd=null;  String goodPassword=null;  String goodEncryptedPassword=null;  try {    pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  } catch (  ConfigurationException e) {    assertTrue(false);  }  goodEncryptedPassword=pwd.getEncryptedPasswordForUser("tungsten");  goodPassword=pwd.getClearTextPasswordForUser("tungsten");  assertNotNull(goodEncryptedPassword);  assertNotNull(goodPassword);  assertTrue(goodEncryptedPassword != goodPassword);  assertEquals("secret",goodPassword);  goodPassword=pwd.getClearTextPasswordForUser("non_existing_user");  assertNull(goodPassword);}  }
class C{  public void paintTextAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static double[] quantiles(int n,double[] values){  values=(double[])values.clone();  Arrays.sort(values);  double[] qtls=new double[n + 1];  for (int i=0; i <= n; ++i) {    qtls[i]=values[((values.length - 1) * i) / n];  }  return qtls;}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(OldSchoolVesselTest.class);}  }
class C{  protected static Instance toInstance(JSONNode inst,Instances data){  Instance result;  boolean sparse;  double weight;  JSONNode values;  int i;  int index;  int pos;  String value;  double[] vals;  sparse=(Boolean)inst.getChild(SPARSE).getValue(new Boolean(false));  weight=(Double)inst.getChild(WEIGHT).getValue(new Double(1.0));  values=inst.getChild(VALUES);  vals=new double[data.numAttributes()];  for (i=0; i < values.getChildCount(); i++) {    if (sparse) {      value="" + ((JSONNode)values.getChildAt(i)).getValue();      pos=value.indexOf(SPARSE_SEPARATOR);      index=Integer.parseInt(value.substring(0,pos));      value=value.substring(pos + 1);    } else {      index=i;      value="" + ((JSONNode)values.getChildAt(i)).getValue();    }    try {      if (value.equals(MISSING_VALUE)) {        vals[index]=Utils.missingValue();      } else {        if (value.equals("'" + MISSING_VALUE + "'"))         value=MISSING_VALUE;        if (data.attribute(index).isNumeric() && !data.attribute(index).isDate()) {          vals[index]=Double.parseDouble(value);        } else         if (data.attribute(index).isNominal()) {          vals[index]=data.attribute(index).indexOfValue(value);          if ((vals[index] == -1) && value.startsWith("'") && value.endsWith("'"))           vals[index]=data.attribute(index).indexOfValue(Utils.unquote(value));          if ((vals[index] == -1) && value.startsWith("'") && value.endsWith("'"))           vals[index]=data.attribute(index).indexOfValue(Utils.unbackQuoteChars(Utils.unquote(value)));          if (vals[index] == -1) {            System.err.println("Unknown label '" + value + "' for attribute #"+ (index + 1)+ "!");            return null;          }        } else         if (data.attribute(index).isDate()) {          vals[index]=data.attribute(index).parseDate(value);        } else         if (data.attribute(index).isString()) {          vals[index]=data.attribute(index).addStringValue(value);        } else {          System.err.println("Unhandled attribute type '" + Attribute.typeToString(data.attribute(index).type()) + "'!");          return null;        }      }    } catch (    Exception e) {      System.err.println("Error parsing value #" + (index + 1) + ": "+ e.toString());      return null;    }  }  if (sparse)   result=new SparseInstance(weight,vals); else   result=new DenseInstance(weight,vals);  result.setDataset(data);  return result;}  }
class C{  public static UUID convertUUID(String input) throws IllegalArgumentException {  try {    return UUID.fromString(input);  } catch (  IllegalArgumentException ex) {    return UUID.fromString(input.replaceAll("(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})","$1-$2-$3-$4-$5"));  }}  }
class C{  @Restrictions({@Restrict("SYSTEM_ADMIN"),@Restrict("SYSTEM_MONITOR"),@Restrict("RESTRICTED_SYSTEM_ADMIN")}) public static void externalStatusJson(@As(",") String[] ids){  List<BackupDataTable.Backup> results=Lists.newArrayList();  for (  String id : ids) {    if (StringUtils.isNotBlank(id)) {      BackupDataTable.Backup backup=new BackupDataTable.Backup(id,false);      BackupRestoreStatus restoreStatus=BackupUtils.getRestoreStatus(id,false);      backup.status=restoreStatus.getStatus().name();      if (restoreStatus.getStatus() == BackupRestoreStatus.Status.RESTORE_FAILED) {        backup.error=restoreStatus.getDetails();      }      results.add(backup);    }  }  renderJSON(results);}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.239 -0400",hash_original_method="F690B877344E7DD2303BCB23C8C7DA32",hash_generated_method="8B39F86C40BF11E1628A04566097572F") private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  public Templates newTemplates(Source source) throws TransformerConfigurationException {  String baseID=source.getSystemId();  if (null != baseID) {    baseID=SystemIDResolver.getAbsoluteURI(baseID);  }  if (source instanceof DOMSource) {    DOMSource dsource=(DOMSource)source;    Node node=dsource.getNode();    if (null != node)     return processFromNode(node,baseID); else {      String messageStr=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_DOMSOURCE_INPUT,null);      throw new IllegalArgumentException(messageStr);    }  }  TemplatesHandler builder=newTemplatesHandler();  builder.setSystemId(baseID);  try {    InputSource isource=SAXSource.sourceToInputSource(source);    isource.setSystemId(baseID);    XMLReader reader=null;    if (source instanceof SAXSource)     reader=((SAXSource)source).getXMLReader();    if (null == reader) {      try {        javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();        factory.setNamespaceAware(true);        if (m_isSecureProcessing) {          try {            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);          } catch (          org.xml.sax.SAXException se) {          }        }        javax.xml.parsers.SAXParser jaxpParser=factory.newSAXParser();        reader=jaxpParser.getXMLReader();      } catch (      javax.xml.parsers.ParserConfigurationException ex) {        throw new org.xml.sax.SAXException(ex);      }catch (      javax.xml.parsers.FactoryConfigurationError ex1) {        throw new org.xml.sax.SAXException(ex1.toString());      }catch (      NoSuchMethodError ex2) {      }catch (      AbstractMethodError ame) {      }    }    if (null == reader)     reader=XMLReaderFactory.createXMLReader();    reader.setContentHandler(builder);    reader.parse(isource);  } catch (  org.xml.sax.SAXException se) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(new TransformerException(se));      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    } else {      throw new TransformerConfigurationException(se.getMessage(),se);    }  }catch (  Exception e) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(new TransformerException(e));        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    } else {      throw new TransformerConfigurationException(e.getMessage(),e);    }  }  return builder.getTemplates();}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  private void addNameDatesPanel(final String headline,final IFieldDescription<String> name,final IFieldDescription<Date> creationDate,final IFieldDescription<Date> modificationDate){  final JPanel nameDatesPanel=new JPanel(new GridLayout(3,1,5,5));  nameDatesPanel.setBorder(new TitledBorder(headline));  nameDatesPanel.add(new CLabeledComponent("Name" + ":",name.getHelp(),m_nameTextField));  nameDatesPanel.add(new CLabeledComponent("Creation Date" + ":",creationDate.getHelp(),m_creationDateValueLabel));  nameDatesPanel.add(new CLabeledComponent("Modification Date" + ":",modificationDate.getHelp(),m_modificationDateValueLabel));  add(nameDatesPanel,BorderLayout.NORTH);}  }
class C{  public PNGDecodeParam(){}  }
class C{  @Override public void onAlterPartition(AlterPartitionEvent event) throws MetaException {  try {    Table table=new Table(event.getHandler().get_table(event.getOldPartition().getDbName(),event.getOldPartition().getTableName()));    Set<ReadEntity> readEntities=new HashSet<>();    readEntities.add(new ReadEntity(new Partition(table,event.getOldPartition())));    Set<WriteEntity> writeEntities=new HashSet<>();    writeEntities.add(new WriteEntity(new Partition(table,event.getNewPartition()),WriteType.INSERT));    run(readEntities,writeEntities,HiveOperation.THRIFT_ALTER_PARTITION);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected NotificationContext(){}  }
class C{  protected Integer wrapValue(int k){  return new Integer(k);}  }
class C{  @Override public T remove(int index){  if (index < 0 || index >= size()) {    throw new IndexOutOfBoundsException();  }  Element<T> cursor=head;  for (int i=0; i < index; i++) {    cursor=cursor.next;  }  removeInternal(cursor);  return cursor.entry;}  }
class C{  @Override public void connection_commit(FilterChain chain,ConnectionProxy connection) throws SQLException {  super.connection_commit(chain,connection);  connectionLog("{conn-" + connection.getId() + "} commited");}  }
class C{  public WebVideo(Element e,int w,int h){  videoElement=e;  width=w;  height=h;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().putInt(EventRouter.SCREEN_SAVER_TIME,getInt(stack));  stack.getUIMgrSafe().getRouter().resetSSTimer();  return null;}  }
class C{  public boolean isSpring(){  return this.frequency > 0.0;}  }
class C{  public static void installAll(TomcatServer server){  logger.info("Initializing webServlets...");  for (  WebServlet webServlet : registeredClass) {    logger.info(" - webServlet : " + webServlet.getClass().getName());    server.install(webServlet);  }  logger.info("WebServlets initialized.");}  }
class C{  public MultiwayMinPQ(Key[] a,int d){  if (d < 2)   throw new IllegalArgumentException("Dimension should be 2 or over");  this.d=d;  order=1;  keys=(Key[])new Comparable[d << 1];  comp=new MyComparator();  for (  Key key : a)   insert(key);}  }
class C{  public void clear(){  super.clear();  TIE_STRING=" ";  WIN_STRING="$\\circ$";  LOSS_STRING="$\\bullet$";}  }
class C{  private static byte[] writeShort(short value) throws IOException {  byte[] b=new byte[2];  b[0]=(byte)(value & 0x00FF);  b[1]=(byte)((value & 0xFF00) >> 8);  return b;}  }
class C{  public boolean isCollapsed(){  return expandableSelectorAnimator.isCollapsed();}  }
class C{  protected void log(String message){  if (verbose) {    indent(indentLevel + 1);    log.print(message);  }}  }
class C{  public static RegressionDataSet loadR(File file,double sparseRatio) throws FileNotFoundException, IOException {  return loadR(file,sparseRatio,-1);}  }
class C{  public boolean isSuitedFor(String versionRegex){  Pattern pattern=compile(versionRegex);  return pattern.matcher(toString()).matches();}  }
class C{  public void store(Word val){  SimulatedMemory.setWord(this,val.value);}  }
class C{  public boolean isDynamicElement(Element e){  String ns=e.getNamespaceURI();  if (XBLConstants.XBL_NAMESPACE_URI.equals(ns)) {    return true;  }  if (!SVGConstants.SVG_NAMESPACE_URI.equals(ns)) {    return false;  }  String ln=e.getLocalName();  if (ln.equals(SVGConstants.SVG_SCRIPT_TAG) || ln.equals(SVG12Constants.SVG_HANDLER_TAG) || ln.startsWith("animate")|| ln.equals("set")) {    return true;  }  return false;}  }
class C{  public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,Map<String,String> orderItemAttributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {  if (isReadOnlyCart()) {    throw new CartItemModifyException("Cart items cannot be changed");  }  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;  ShoppingCart.ShoppingCartItemGroup itemGroup=this.getItemGroupByNumber(itemGroupNumber);  GenericValue supplierProduct=null;  for (int i=0; i < this.cartLines.size(); i++) {    ShoppingCartItem sci=cartLines.get(i);    if (sci.equals(productId,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,features,attributes,orderItemAttributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false)) {      BigDecimal newQuantity=sci.getQuantity().add(quantity);      try {        BigDecimal minQuantity=getMinimumOrderQuantity(getDelegator(),sci.getBasePrice(),productId);        if (newQuantity.compareTo(minQuantity) < 0) {          newQuantity=minQuantity;        }      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }      if (sci.getItemType().equals("RENTAL_ORDER_ITEM")) {        String isAvailable=ShoppingCartItem.checkAvailability(productId,newQuantity,reservStart,reservLength,this);        if (isAvailable.compareTo("OK") != 0) {          Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId,"availableMessage",isAvailable);          String excMsg=UtilProperties.getMessage(ShoppingCartItem.resource,"item.product_not_available",messageMap,this.getLocale());          Debug.logInfo(excMsg,module);          throw new CartItemModifyException(isAvailable);        }      }      if (Debug.verboseOn())       Debug.logVerbose("Found a match for id " + productId + " on line "+ i+ ", updating quantity to "+ newQuantity,module);      sci.setQuantity(newQuantity,dispatcher,this);      if (getOrderType().equals("PURCHASE_ORDER")) {        supplierProduct=getSupplierProduct(productId,newQuantity,dispatcher);        if (supplierProduct != null && supplierProduct.getBigDecimal("lastPrice") != null) {          sci.setSupplierProductId(supplierProduct.getString("supplierProductId"));          sci.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));          sci.setName(ShoppingCartItem.getPurchaseOrderItemDescription(sci.getProduct(),supplierProduct,this.getLocale()));        } else {          throw new CartItemModifyException("SupplierProduct not found");        }      }      return i;    }  }  ShoppingCartItem item=null;  if (getOrderType().equals("PURCHASE_ORDER")) {    supplierProduct=getSupplierProduct(productId,quantity,dispatcher);    if (supplierProduct != null || "_NA_".equals(this.getPartyId())) {      item=ShoppingCartItem.makePurchaseOrderItem(Integer.valueOf(0),productId,selectedAmount,quantity,features,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,this,supplierProduct,shipBeforeDate,shipAfterDate,cancelBackOrderDate);    } else {      throw new CartItemModifyException("SupplierProduct not found");    }  } else {    try {      BigDecimal minQuantity=getMinimumOrderQuantity(getDelegator(),null,productId);      if (quantity.compareTo(minQuantity) < 0) {        quantity=minQuantity;      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    item=ShoppingCartItem.makeItem(Integer.valueOf(0),productId,selectedAmount,quantity,null,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,features,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,this,Boolean.TRUE,Boolean.TRUE,parentProductId,Boolean.FALSE,Boolean.FALSE);  }  if (UtilValidate.isNotEmpty(orderItemAttributes)) {    for (    Entry<String,String> entry : orderItemAttributes.entrySet()) {      item.setOrderItemAttribute(entry.getKey(),entry.getValue());    }  }  return this.addItem(0,item);}  }
class C{  public String toWMSURL(int x,int y,int zoom,int tileSize){  String format="image/jpeg";  String styles="";  String srs="EPSG:4326";  int ts=tileSize;  int circumference=widthOfWorldInPixels(zoom,tileSize);  double radius=circumference / (2 * Math.PI);  double ulx=MercatorUtils.xToLong(x * ts,radius);  double uly=MercatorUtils.yToLat(y * ts,radius);  double lrx=MercatorUtils.xToLong((x + 1) * ts,radius);  double lry=MercatorUtils.yToLat((y + 1) * ts,radius);  String bbox=ulx + "," + uly+ ","+ lrx+ ","+ lry;  String url=getBaseUrl() + "version=1.1.1&request=" + "GetMap&Layers="+ layer+ "&format="+ format+ "&BBOX="+ bbox+ "&width="+ ts+ "&height="+ ts+ "&SRS="+ srs+ "&Styles="+ styles+ "";  return url;}  }
class C{  public void activate(){  gl.glUseProgram(id);}  }
class C{  @Inject public StatusPanelGroupPresenter(StatusPanelGroupView view){  this.view=view;  this.view.setDelegate(this);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public static Looper myLooper(){  return sThreadLocal.get();}  }
class C{  protected void runFullImport(String dataConfig,Map<String,String> extraParams) throws Exception {  HashMap<String,String> params=new HashMap<>();  params.put("command","full-import");  params.put("debug","on");  params.put("dataConfig",dataConfig);  params.put("clean","true");  params.put("commit","true");  params.putAll(extraParams);  NamedList l=new NamedList();  for (  Map.Entry<String,String> e : params.entrySet()) {    l.add(e.getKey(),e.getValue());  }  LocalSolrQueryRequest request=new LocalSolrQueryRequest(h.getCore(),l);  h.query("/dataimport",request);}  }
class C{  public static Set<EvalFactoryNode> recursiveGetChildNodes(EvalFactoryNode currentNode,EvalNodeUtilFactoryFilter filter){  Set<EvalFactoryNode> result=new LinkedHashSet<EvalFactoryNode>();  if (filter.consider(currentNode)) {    result.add(currentNode);  }  recursiveGetChildNodes(result,currentNode,filter);  return result;}  }
class C{  Entry(int h,K k,V v,Entry<K,V> n){  value=v;  next=n;  key=k;  hash=h;}  }
class C{  public String useMDLcorrectionTipText(){  return "Whether MDL correction is used when finding splits on numeric attributes.";}  }
class C{  public TagLibTagAttr(TagLibTag tag){  this.tag=tag;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static Calendar round(final Calendar date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar rounded=(Calendar)date.clone();  modify(rounded,field,ModifyType.ROUND);  return rounded;}  }
class C{  public List<Estratigrafia> listar(){  List<Estratigrafia> dadosEstratigrafia=new ArrayList<>();  try {    String sql="SELECT * FROM tb_estratigrafia ";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery(sql);    while (rs.next()) {      Estratigrafia estratigrafia=new Estratigrafia(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4));      dadosEstratigrafia.add(estratigrafia);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar na base de dados estratigrafias! \n" + ex);  }  return dadosEstratigrafia;}  }
class C{  @Override public void init(Bundle savedInstanceState){  super.init(savedInstanceState);  enableFullscreen();}  }
class C{  protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {  if (null != prefix && (prefix.length() == 0 || prefix.equals("xmlns"))) {    prefix=rhandler.getPrefix(nodeNamespace);    if (null == prefix || prefix.length() == 0 || prefix.equals("xmlns")) {      if (nodeNamespace.length() > 0) {        NamespaceMappings prefixMapping=rhandler.getNamespaceMappings();        prefix=prefixMapping.generateNextPrefix();      } else       prefix="";    }  }  return prefix;}  }
class C{  private REnvironment(String name,MaterializedFrame frame){  this(name,new REnvTruffleFrameAccess(frame));  RArguments.setEnvironment(frame,this);}  }
class C{  public void startElement(String qName,AttributeList qAtts) throws SAXException {  ArrayList<SAXParseException> exceptions=null;  if (!namespaces) {    if (contentHandler != null) {      attAdapter.setAttributeList(qAtts);      contentHandler.startElement("","",qName.intern(),attAdapter);    }    return;  }  nsSupport.pushContext();  int length=qAtts.getLength();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    if (!attQName.startsWith("xmlns"))     continue;    String prefix;    int n=attQName.indexOf(':');    if (n == -1 && attQName.length() == 5) {      prefix="";    } else     if (n != 5) {      continue;    } else     prefix=attQName.substring(n + 1);    String value=qAtts.getValue(i);    if (!nsSupport.declarePrefix(prefix,value)) {      reportError("Illegal Namespace prefix: " + prefix);      continue;    }    if (contentHandler != null)     contentHandler.startPrefixMapping(prefix,value);  }  atts.clear();  for (int i=0; i < length; i++) {    String attQName=qAtts.getName(i);    String type=qAtts.getType(i);    String value=qAtts.getValue(i);    if (attQName.startsWith("xmlns")) {      String prefix;      int n=attQName.indexOf(':');      if (n == -1 && attQName.length() == 5) {        prefix="";      } else       if (n != 5) {        prefix=null;      } else {        prefix=attQName.substring(6);      }      if (prefix != null) {        if (prefixes) {          if (uris)           atts.addAttribute(nsSupport.XMLNS,prefix,attQName.intern(),type,value); else           atts.addAttribute("","",attQName.intern(),type,value);        }        continue;      }    }    try {      String attName[]=processName(attQName,true,true);      atts.addAttribute(attName[0],attName[1],attName[2],type,value);    } catch (    SAXException e) {      if (exceptions == null) {        exceptions=new ArrayList<SAXParseException>();      }      exceptions.add((SAXParseException)e);      atts.addAttribute("",attQName,attQName,type,value);    }  }  if (exceptions != null && errorHandler != null) {    for (    SAXParseException ex : exceptions) {      errorHandler.error(ex);    }  }  if (contentHandler != null) {    String name[]=processName(qName,false,false);    contentHandler.startElement(name[0],name[1],name[2],atts);  }}  }
class C{  public static ETC2Texture createTexture(InputStream input) throws IOException {  int width=0;  int height=0;  int format=-1;  byte[] ioBuffer=new byte[4096];  if (input.read(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE) != ETC1.ETC_PKM_HEADER_SIZE) {    throw new IOException("Unable to read PKM file header.");  }  final ByteBuffer headerBuffer=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.BIG_ENDIAN);  headerBuffer.put(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE).position(0);  if (!ETC2.isValid(headerBuffer)) {    throw new IOException("Not a PKM file.");  }  width=ETC2.getWidth(headerBuffer);  height=ETC2.getHeight(headerBuffer);  format=ETC2.getETC2CompressionType(headerBuffer);  final int encodedSize=ETC2.getEncodedDataSize(width,height);  final ByteBuffer dataBuffer=ByteBuffer.allocateDirect(encodedSize).order(ByteOrder.BIG_ENDIAN);  for (int i=0; i < encodedSize; ) {    int chunkSize=Math.min(ioBuffer.length,encodedSize - i);    if (input.read(ioBuffer,0,chunkSize) != chunkSize) {      throw new IOException("Unable to read PKM file data.");    }    dataBuffer.put(ioBuffer,0,chunkSize);    i+=chunkSize;  }  dataBuffer.position(0);  return new ETC2Texture(format,width,height,dataBuffer);}  }
class C{  public void testDisconnectedInteriorShellSelfTouchAtNonVertex(){  String wkt="POLYGON ((40 180, 40 60, 240 60, 240 180, 140 60, 40 180))";  checkIsValidSTR(wkt,false);  checkIsValidDefault(wkt,false);}  }
class C{  public SQLTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static Wildcard createWildcard(){  return TypeRefsFactory.eINSTANCE.createWildcard();}  }
class C{  public boolean authenticateHash(String password){  String hash=null;  String salt=null;  hash=getPassword();  salt=getSalt();  if (hash == null)   hash="0000000000000000";  if (salt == null)   salt="0000000000000000";  return MUser.authenticateHash(password,hash,salt);}  }
class C{  public static boolean deleteDirectory(String directory,boolean useOSNativeDelete) throws IOException {  boolean result=false;  if (!useOSNativeDelete) {    File dir=new File(directory);    for (    File file : dir.listFiles()) {      if (file.delete()) {        log.debug("{} was deleted",file.getName());      } else {        log.debug("{} was not deleted",file.getName());        file.deleteOnExit();      }      file=null;    }    if (dir.delete()) {      log.debug("Directory was deleted");      result=true;    } else {      log.debug("Directory was not deleted, it may be deleted on exit");      dir.deleteOnExit();    }    dir=null;  } else {    Process p=null;    Thread std=null;    try {      Runtime runTime=Runtime.getRuntime();      log.debug("Execute runtime");      if (File.separatorChar == '\\') {        p=runTime.exec("CMD /D /C \"RMDIR /Q /S " + directory.replace('/','\\') + "\"");      } else {        p=runTime.exec("rm -rf " + directory.replace('\\',File.separatorChar));      }      std=stdOut(p);      while (std.isAlive()) {        try {          Thread.sleep(250);        } catch (        Exception e) {        }      }      log.debug("Process threads wait exited");      result=true;    } catch (    Exception e) {      log.error("Error running delete script",e);    } finally {      if (null != p) {        log.debug("Destroying process");        p.destroy();        p=null;      }      std=null;    }  }  return result;}  }
class C{  protected void onSelectLevelChanged(ViewHolder holder){}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.087 -0500",hash_original_method="8993A7EF0CD7BC2114A435E71DE5C46D",hash_generated_method="A1AA69329CF0E7B747928CF9B93902E4") public RedirectException(){  super();}  }
class C{  public void add(SchedulableEvent event){synchronized (lock) {    FastEventQueue list=mEventBuffer.get(event.getTimestamp());    if (list == null) {      long lowestTime=mEventBuffer.isEmpty() ? Long.MAX_VALUE : mEventBuffer.firstKey();      list=new FastEventQueue(event);      mEventBuffer.put(event.getTimestamp(),list);      if (event.getTimestamp() < lowestTime) {        lock.notify();      }    } else {      list.add(event);    }  }}  }
class C{  public static void main(String[] ops){  double[] doubles={4.5,6.7,Double.NaN,3.4,4.8,1.2,3.4};  int[] ints={12,6,2,18,16,6,7,5};  try {    System.out.println("First option split up:");    if (ops.length > 0) {      String[] firstOptionSplitUp=Utils.splitOptions(ops[0]);      for (int i=0; i < firstOptionSplitUp.length; i++) {        System.out.println(firstOptionSplitUp[i]);      }    }    System.out.println("Partitioned options: ");    String[] partitionedOptions=Utils.partitionOptions(ops);    for (int i=0; i < partitionedOptions.length; i++) {      System.out.println(partitionedOptions[i]);    }    System.out.println("Get flag -f: " + Utils.getFlag('f',ops));    System.out.println("Get option -o: " + Utils.getOption('o',ops));    System.out.println("Checking for remaining options... ");    Utils.checkForRemainingOptions(ops);    System.out.println("Original array (doubles): ");    for (int i=0; i < doubles.length; i++) {      System.out.print(doubles[i] + " ");    }    System.out.println();    System.out.println("Original array (ints): ");    for (int i=0; i < ints.length; i++) {      System.out.print(ints[i] + " ");    }    System.out.println();    System.out.println("Correlation: " + Utils.correlation(doubles,doubles,doubles.length));    System.out.println("Mean: " + Utils.mean(doubles));    System.out.println("Variance: " + Utils.variance(doubles));    System.out.println("Sum (doubles): " + Utils.sum(doubles));    System.out.println("Sum (ints): " + Utils.sum(ints));    System.out.println("Max index (doubles): " + Utils.maxIndex(doubles));    System.out.println("Max index (ints): " + Utils.maxIndex(ints));    System.out.println("Min index (doubles): " + Utils.minIndex(doubles));    System.out.println("Min index (ints): " + Utils.minIndex(ints));    System.out.println("Sorted array (doubles): ");    int[] sorted=Utils.sort(doubles);    for (int i=0; i < doubles.length; i++) {      System.out.print(doubles[sorted[i]] + " ");    }    System.out.println();    System.out.println("Normalized array (doubles): ");    Utils.normalize(doubles);    for (int i=0; i < doubles.length; i++) {      System.out.print(doubles[i] + " ");    }    System.out.println();    System.out.println("Normalized again (doubles): ");    Utils.normalize(doubles,Utils.sum(doubles));    for (int i=0; i < doubles.length; i++) {      System.out.print(doubles[i] + " ");    }    System.out.println();    System.out.println("-4.58: " + Utils.doubleToString(-4.57826535,2));    System.out.println("-6.78: " + Utils.doubleToString(-6.78214234,6,2));    System.out.println("5.70001 == 5.7 ? " + Utils.eq(5.70001,5.7));    System.out.println("5.70001 > 5.7 ? " + Utils.gr(5.70001,5.7));    System.out.println("5.70001 >= 5.7 ? " + Utils.grOrEq(5.70001,5.7));    System.out.println("5.7 < 5.70001 ? " + Utils.sm(5.7,5.70001));    System.out.println("5.7 <= 5.70001 ? " + Utils.smOrEq(5.7,5.70001));    System.out.println("Info (ints): " + Utils.info(ints));    System.out.println("log2(4.6): " + Utils.log2(4.6));    System.out.println("5 * log(5): " + Utils.xlogx(5));    System.out.println("5.5 rounded: " + Utils.round(5.5));    System.out.println("5.55555 rounded to 2 decimal places: " + Utils.roundDouble(5.55555,2));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int generate(byte[] output,byte[] additionalInput,boolean predictionResistant){  int numberOfBits=output.length * 8;  if (numberOfBits > MAX_BITS_REQUEST) {    throw new IllegalArgumentException("Number of bits per request limited to " + MAX_BITS_REQUEST);  }  if (_reseedCounter > RESEED_MAX) {    return -1;  }  if (predictionResistant) {    reseed(additionalInput);    additionalInput=null;  }  if (additionalInput != null) {    hmac_DRBG_Update(additionalInput);  }  byte[] rv=new byte[output.length];  int m=output.length / _V.length;  _hMac.init(new KeyParameter(_K));  for (int i=0; i < m; i++) {    _hMac.update(_V,0,_V.length);    _hMac.doFinal(_V,0);    System.arraycopy(_V,0,rv,i * _V.length,_V.length);  }  if (m * _V.length < rv.length) {    _hMac.update(_V,0,_V.length);    _hMac.doFinal(_V,0);    System.arraycopy(_V,0,rv,m * _V.length,rv.length - (m * _V.length));  }  hmac_DRBG_Update(additionalInput);  _reseedCounter++;  System.arraycopy(rv,0,output,0,output.length);  return numberOfBits;}  }
class C{  public static void dump(String message){  dump(message,captureStackBelow());}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  reset();  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  if (data.numInstances() > 0 && !m_dontReplaceMissing) {    m_replaceMissing=new ReplaceMissingValues();    m_replaceMissing.setInputFormat(data);    data=Filter.useFilter(data,m_replaceMissing);  }  boolean onlyNumeric=true;  for (int i=0; i < data.numAttributes(); i++) {    if (i != data.classIndex()) {      if (!data.attribute(i).isNumeric()) {        onlyNumeric=false;        break;      }    }  }  if (!onlyNumeric) {    if (data.numInstances() > 0) {      m_nominalToBinary=new weka.filters.supervised.attribute.NominalToBinary();    } else {      m_nominalToBinary=new weka.filters.unsupervised.attribute.NominalToBinary();    }    m_nominalToBinary.setInputFormat(data);    data=Filter.useFilter(data,m_nominalToBinary);  }  if (!m_dontNormalize && data.numInstances() > 0) {    m_normalize=new Normalize();    m_normalize.setInputFormat(data);    data=Filter.useFilter(data,m_normalize);  }  m_numInstances=data.numInstances();  m_weights=new double[data.numAttributes() + 1];  m_data=new Instances(data,0);  if (data.numInstances() > 0) {    data.randomize(new Random(getSeed()));    train(data);  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  @Override public String description(){  return "URL tokenizer and token filter.";}  }
class C{  private long hash(final int[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public boolean isRPSource(VolumeDescriptor volumeDescriptor){  boolean isSource=false;  if ((volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_SOURCE)) || (volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_EXISTING_SOURCE)) || (volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_EXISTING_PROTECTED_SOURCE))|| (volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE))) {    isSource=true;  }  return isSource;}  }
class C{  public static List<String> loadAll(String homedir,String... filenames) throws FileNotFoundException {  List<String> list=new ArrayList<String>();  if (!USBMassStorage.overridingModules()) {    searchModules(new File(getScriptDirByType(homedir),"modules"));  }  for (  MassStorageDevice device : USBMassStorage.connectedDevices) {    if (device.concurrent_modules || device.override_modules)     searchModules(new File(new File(device.toast_directory,"script/" + homedir),"modules"));  }  Profiler.INSTANCE.section("JavaScript").start("Load");  if (!USBMassStorage.overridingModules())   search(getScriptDirByType(homedir),list,filenames);  for (  MassStorageDevice device : USBMassStorage.connectedDevices) {    if (device.concurrent_modules || device.override_modules)     search(new File(device.toast_directory,"script/" + homedir),list,filenames);  }  Profiler.INSTANCE.section("JavaScript").stop("Load");  return list;}  }
class C{  public static int calculateRMSLevel(short[] audioData,int numframes){  long lSum=0;  int numread=0;  for (  short s : audioData) {    lSum=lSum + s;    numread++;    if (numread == numframes)     break;  }  double dAvg=lSum / numframes;  double sumMeanSquare=0d;  numread=0;  for (  short anAudioData : audioData) {    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);    numread++;    if (numread == numframes)     break;  }  double averageMeanSquare=sumMeanSquare / numframes;  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);}  }
class C{  public boolean isVmSearch(){  return vmSearch;}  }
class C{  @Override public boolean supportsCoreSQLGrammar(){  debugCodeCall("supportsCoreSQLGrammar");  return true;}  }
class C{  public void write(FastPreferenceData<?,?> prefData,String up,String ip) throws FileNotFoundException, IOException {  CompressibleRatingPreferencesFormat.this.write(prefData,new FileOutputStream(up),new FileOutputStream(ip));}  }
class C{  public TerminalSeqf(Collection<Terminal> terminals){  super(terminals);  this.hashCode=calcHashCode();}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFileClusterer.class.toString(),args);  String processedFolder=args[0];  String shapefile=args[1];  int idField=Integer.parseInt(args[2]);  int numberOfThreads=Integer.parseInt(args[3]);  List<File> inputFiles=GrainUtils.getMonthlyOutputFolders(processedFolder);  for (  File month : inputFiles) {    LOG.info("====> Processing month " + month.getAbsolutePath());    String thisXmlFolder=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/") + "xml/";    String thisOutputFolder=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/");    String[] sa={thisXmlFolder,shapefile,String.valueOf(idField),String.valueOf(numberOfThreads),thisOutputFolder};    DigicoreClusterRunner.main(sa);    LOG.info("====> Done processing month.");  }  Header.printFooter();}  }
class C{  public static Button createRadioButton(Composite parent,String label,int hspan){  Button button=new Button(parent,SWT.RADIO);  button.setFont(parent.getFont());  if (label != null) {    button.setText(label);  }  GridData gd=new GridData(GridData.BEGINNING);  gd.horizontalSpan=hspan;  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  public Double next(){  long i, digit;  double h, step;  if (++c == Long.MAX_VALUE) {    c=0;  }  i=c;  h=0.0;  step=1.0 / base;  while (i > 0) {    digit=i % base;    h+=digit * step;    i=(i - digit) / base;    step/=base;  }  return h;}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public void addJoinLeaveListener(JoinLeaveListener observer){synchronized (this.listenersLock) {    final Set oldListeners=this.listeners;    if (!oldListeners.contains(observer)) {      final Set newListeners=new HashSet(oldListeners);      newListeners.add(observer);      this.listeners=newListeners;    }  }}  }
class C{  public Location centroid(Location result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","centroid","missingResult"));  }  result.latitude=this.centroidLatitude();  result.longitude=this.centroidLongitude();  return result;}  }
class C{  public boolean isAttribute(){  return true;}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AccessibleTypeElement.class) {switch (baseFeatureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:      return TypesPackage.TN4_CLASSIFIER__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:    return TypesPackage.TN4_CLASSIFIER__DECLARED_PROVIDED_BY_RUNTIME;default :  return -1;}}if (baseClass == DeclaredTypeWithAccessModifier.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public static ImageTree waveletTransform(Image origImg,int level,FilterGH[] filterGHList,int method){  int width=0;  int height=0;  int min=0;  int maxLevel=0;  Image coarseImg=null;  Image horizontalImg=null;  Image verticalImg=null;  Image diagonalImg=null;  Image tempImg=null;  ImageTree returnTree=null;  ImageTree tempTree=null;  width=origImg.getWidth();  height=origImg.getHeight();  tempImg=new Image(width,height);  copyIntoImage(tempImg,origImg,0,0);  returnTree=new ImageTree();  tempTree=returnTree;  returnTree.setLevel(0);  min=origImg.getWidth();  if (origImg.getHeight() < min) {    min=origImg.getHeight();  }  maxLevel=((int)(Math.log(min) / Math.log(2))) - 2;  if (maxLevel < level) {    level=maxLevel;  }  if (level < 1) {    returnTree.setImage(tempImg);    return returnTree;  }  for (int i=0; i < level; i++) {    width=(width + 1) / 2;    height=(height + 1) / 2;    coarseImg=new Image(width,height);    horizontalImg=new Image(width,height);    verticalImg=new Image(width,height);    diagonalImg=new Image(width,height);    decomposition(tempImg,coarseImg,horizontalImg,verticalImg,diagonalImg,filterGHList[i].getG(),filterGHList[i].getH(),method);    tempTree.setCoarse(new ImageTree());    tempTree.setHorizontal(new ImageTree());    tempTree.setVertical(new ImageTree());    tempTree.setDiagonal(new ImageTree());    tempTree.getCoarse().setLevel(i + 1);    tempTree.getHorizontal().setLevel(i + 1);    tempTree.getVertical().setLevel(i + 1);    tempTree.getDiagonal().setLevel(i + 1);    tempTree.getHorizontal().setImage(horizontalImg);    tempTree.getVertical().setImage(verticalImg);    tempTree.getDiagonal().setImage(diagonalImg);    tempImg=null;    if (i != (level - 1)) {      tempImg=new Image(width,height);      copyIntoImage(tempImg,coarseImg,0,0);      coarseImg=null;    }    tempTree=tempTree.getCoarse();  }  tempTree.setImage(coarseImg);  return returnTree;}  }
class C{  public Name(String name) throws IOException {  rdn=new DNParser(name).parse();}  }
class C{  public Belegundu(){  super(2,2,2);}  }
class C{  protected static List<EndpointHelpDto> describeEndpoints(List<Class<? extends AbstractResource>> resourceClasses){  List<EndpointHelpDto> result=new LinkedList<>();  if (resourceClasses != null && !resourceClasses.isEmpty()) {    for (    Class<? extends AbstractResource> resourceClass : resourceClasses) {      EndpointHelpDto dto=EndpointHelpDto.fromResourceClass(resourceClass);      if (dto != null) {        result.add(dto);      }    }  }  return result;}  }
class C{  public static void verify(byte[] data){  if (data == null) {    throw new IllegalArgumentException("Invalid ICC Profile Data");  }  if (data.length < TOC_OFFSET) {    throw new IllegalArgumentException("Invalid ICC Profile Data");  }  final int size=readInt32(data,0);  final int tagCount=readInt32(data,HEADER_SIZE);  if (tagCount < 0 || tagCount > MAX_TAG_COUNT) {    throw new IllegalArgumentException("Invalid ICC Profile Data");  }  if (size < (TOC_OFFSET + (tagCount * TOC_RECORD_SIZE)) || size > data.length) {    throw new IllegalArgumentException("Invalid ICC Profile Data");  }  final int sig=readInt32(data,36);  if (PROFILE_FILE_SIGNATURE != sig) {    throw new IllegalArgumentException("Invalid ICC Profile Data");  }  for (int i=0; i < tagCount; i++) {    final int tag_offset=getTagOffset(i,data);    final int tag_size=getTagSize(i,data);    if (tag_offset < TOC_OFFSET || tag_offset > size) {      throw new IllegalArgumentException("Invalid ICC Profile Data");    }    if (tag_size < 0 || tag_size > (Integer.MAX_VALUE - tag_offset) || tag_size + tag_offset > size) {      throw new IllegalArgumentException("Invalid ICC Profile Data");    }  }}  }
class C{  public void test_setLongLjava_lang_ObjectJ() throws Exception {  TestField x=new TestField();  Field f=null;  long val=0L;  try {    f=x.getClass().getDeclaredField("longField");    f.setLong(x,Long.MIN_VALUE);    val=f.getLong(x);  } catch (  Exception e) {    fail("Exception during setLong test : " + e.getMessage());  }  assertEquals("Returned incorrect long field value",Long.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setLong(x,Long.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("longPFField");    assertFalse(f.isAccessible());    f.setLong(x,Long.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("longField");    f.setLong(null,Long.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("longSField");  f.setLong(null,Long.MIN_VALUE);  val=f.getLong(x);  assertEquals("Returned incorrect long field value",Long.MIN_VALUE,val);}  }
class C{  public static boolean isDynamicElement(Element elt,BridgeContext ctx,List bridgeExtensions){  Iterator i=bridgeExtensions.iterator();  while (i.hasNext()) {    BridgeExtension bridgeExtension=(BridgeExtension)i.next();    if (bridgeExtension.isDynamicElement(elt)) {      return true;    }  }  if (SVGConstants.SVG_NAMESPACE_URI.equals(elt.getNamespaceURI())) {    if (elt.getAttributeNS(null,SVGConstants.SVG_ONKEYUP_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONKEYDOWN_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONKEYPRESS_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONLOAD_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONERROR_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONACTIVATE_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONCLICK_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONFOCUSIN_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONFOCUSOUT_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONMOUSEDOWN_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONMOUSEMOVE_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONMOUSEOUT_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONMOUSEOVER_ATTRIBUTE).length() > 0) {      return true;    }    if (elt.getAttributeNS(null,SVGConstants.SVG_ONMOUSEUP_ATTRIBUTE).length() > 0) {      return true;    }  }  for (Node n=elt.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() == Node.ELEMENT_NODE) {      if (isDynamicElement(ctx,(Element)n)) {        return true;      }    }  }  return false;}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  public static void main(String[] args){  String regexp="(.*" + args[0] + ".*)";  NFA nfa=new NFA(regexp);  while (StdIn.hasNextLine()) {    String line=StdIn.readLine();    if (nfa.recognizes(line)) {      StdOut.println(line);    }  }}  }
class C{  public void clear(){  mSongs.clear();}  }
class C{  public static Character[] nullToEmpty(Character[] array){  if (array == null || array.length == 0) {    return EMPTY_CHARACTER_OBJECT_ARRAY;  }  return array;}  }
class C{  public static void writeFile(String content,String fileName){  try {    FileUtils.writeStringToFile(new File(fileName),content);  } catch (  IOException e) {    logger.error("Error while writing file " + fileName + " , "+ e.getMessage(),e);  }}  }
class C{  public ImportanceTransferTransaction(final TimeInstant timeStamp,final Account sender,final ImportanceTransferMode mode,final Account remoteAccount){  super(TransactionTypes.IMPORTANCE_TRANSFER,1,timeStamp,sender);  this.mode=mode;  this.remoteAccount=remoteAccount;  if (null == this.remoteAccount) {    throw new IllegalArgumentException("remoteAccount is required");  }  if (!this.mode.isValid()) {    throw new IllegalArgumentException("invalid mode");  }}  }
class C{  public static void runBinary(Context context,String binaryName,String parameter){  Runner runner=new Runner(context,binaryName,parameter);  runner.start();}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public AdapterDelegatesManager<T> removeDelegate(int viewType){  delegates.remove(viewType);  return this;}  }
class C{  public static boolean hasDigit(String token){  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    if (Character.isDigit(c)) {      return true;    }  }  return false;}  }
class C{  public boolean isArray(){  return isArray;}  }
class C{  public void testPreconditions(){  assertNotNull("mTestActivity is null",mTestActivity);}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  return new Pair<OperandSize,String>(OperandSize.BYTE,Helpers.CARRY_FLAG);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public SnackbarWrapper show(){  snackbar.show();  return this;}  }
class C{  public static void init(Set<OutputOption> options){  for (int i=0; i < 0x10000; i++) {    instructionMap[i]=defaultInstruction;  }  addBaseInstructions(options);}  }
class C{  public Boolean isCompleted(){  return completed;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean zoningEnabled(ExportMask exportMask){  if (NetworkUtil.areNetworkSystemDiscovered(_dbClient)) {    List<ExportGroup> exportGroups=ExportUtils.getExportGroupsForMask(exportMask.getId(),_dbClient);    for (    ExportGroup exportGroup : exportGroups) {      if (NetworkScheduler.isZoningRequired(_dbClient,exportGroup.getVirtualArray())) {        return true;      }    }  }  return false;}  }
class C{  public EnumConstantNotPresentException(Class<? extends Enum<?>> enumType,String constantName){  super(enumType.getName() + "." + constantName);  this.enumType=enumType;  this.constantName=constantName;}  }
class C{  @Override protected void installDefaults(){  JTextComponent editor=getComponent();  PaletteLookAndFeel plaf=PaletteLookAndFeel.getInstance();  String prefix=getPropertyPrefix();  Font f=editor.getFont();  if ((f == null) || (f instanceof UIResource)) {    editor.setFont(plaf.getFont(prefix + ".font"));  }  Color bg=editor.getBackground();  if ((bg == null) || (bg instanceof UIResource)) {    editor.setBackground(plaf.getColor(prefix + ".background"));  }  Color fg=editor.getForeground();  if ((fg == null) || (fg instanceof UIResource)) {    editor.setForeground(plaf.getColor(prefix + ".foreground"));  }  Color color=editor.getCaretColor();  if ((color == null) || (color instanceof UIResource)) {    editor.setCaretColor(plaf.getColor(prefix + ".caretForeground"));  }  Color s=editor.getSelectionColor();  if ((s == null) || (s instanceof UIResource)) {    editor.setSelectionColor(plaf.getColor(prefix + ".selectionBackground"));  }  Color sfg=editor.getSelectedTextColor();  if ((sfg == null) || (sfg instanceof UIResource)) {    editor.setSelectedTextColor(plaf.getColor(prefix + ".selectionForeground"));  }  Color dfg=editor.getDisabledTextColor();  if ((dfg == null) || (dfg instanceof UIResource)) {    editor.setDisabledTextColor(plaf.getColor(prefix + ".inactiveForeground"));  }  Border b=editor.getBorder();  if ((b == null) || (b instanceof UIResource)) {    editor.setBorder(plaf.getBorder(prefix + ".border"));  }  Insets margin=editor.getMargin();  if (margin == null || margin instanceof UIResource) {    editor.setMargin(plaf.getInsets(prefix + ".margin"));  }  editor.setOpaque(plaf.getBoolean(prefix + ".opaque"));}  }
class C{  public static Relay relay(int channel){  return new HardwareRelay(channel);}  }
class C{  public SimpleBroadcastInterface(Settings s){  super(s);}  }
class C{  void log(int id,String s){  if (showLog && id == 0) {    System.out.println(s);  }}  }
class C{  public void addFileset(FileSet arg){  this.fileSets.add(arg);}  }
class C{  public void restoreOriginalAtributes(){  try {    if (overwroteOriginalAutoCommitValue) {      conn.setAutoCommit(originalAutoCommitValue);    }  } catch (  Throwable t) {    getLog().warn("Failed restore connection's original auto commit setting.",t);  }  try {    if (overwroteOriginalTxIsolationValue) {      conn.setTransactionIsolation(originalTxIsolationValue);    }  } catch (  Throwable t) {    getLog().warn("Failed restore connection's original transaction isolation setting.",t);  }}  }
class C{  public SpecificationRunnerBuilder sections(String[] paramSections){  Collections.addAll(this.sections,paramSections);  return this;}  }
class C{  public TypeIdsSection(DexFile file){  super("type_ids",file,4);  typeIds=new TreeMap<Type,TypeIdItem>();}  }
class C{  protected void createContents(Composite parent,boolean finish){  TableWrapLayout parentLayout=new TableWrapLayout();  parentLayout.topMargin=5;  parentLayout.leftMargin=5;  parentLayout.rightMargin=2;  parentLayout.bottomMargin=2;  parentLayout.numColumns=2;  parentLayout.makeColumnsEqualWidth=true;  parent.setLayout(parentLayout);  FormToolkit toolkit=managedForm.getToolkit();  FormText title=createTitle(parent,toolkit);  TableWrapData twd=new TableWrapData(TableWrapData.FILL,TableWrapData.TOP);  twd.colspan=2;  title.setLayoutData(twd);  Section section=toolkit.createSection(parent,ExpandableComposite.TITLE_BAR | ExpandableComposite.EXPANDED);  section.setText("Method definition");  section.marginWidth=10;  section.marginHeight=5;  TableWrapData td=new TableWrapData(TableWrapData.FILL,TableWrapData.TOP);  td.grabHorizontal=true;  section.setLayoutData(td);  Composite mainComposite=toolkit.createComposite(section);  GridLayout layout=new GridLayout(7,false);  layout.marginHeight=5;  layout.marginWidth=5;  layout.horizontalSpacing=10;  mainComposite.setLayout(layout);  section.setClient(mainComposite);  addClassContents(mainComposite);  addMethodContents(mainComposite);  if (finish) {    twd=new TableWrapData();    twd.grabHorizontal=true;    toolkit.createLabel(parent,"",SWT.NONE).setLayoutData(twd);  }  if (!isCanEdit()) {    setEnabled(mainComposite,false);  }}  }
class C{  private Cursor queryForUser(int userId,Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  if (uri == null) {    throw new IllegalArgumentException("Uri cannot be null");  }  int code=sUriMatcher.match(uri);  String tableName=getTableNameFromUriMatchCode(code);  CMDatabaseHelper dbHelper=getOrEstablishDatabase(getUserIdForTable(tableName,userId));  SQLiteDatabase db=dbHelper.getReadableDatabase();  SQLiteQueryBuilder queryBuilder=new SQLiteQueryBuilder();  queryBuilder.setTables(tableName);  Cursor returnCursor;  if (isItemUri(code)) {    returnCursor=queryBuilder.query(db,projection,NAME_SELECTION,new String[]{uri.getLastPathSegment()},null,null,sortOrder);  } else {    returnCursor=queryBuilder.query(db,projection,selection,selectionArgs,null,null,sortOrder);  }  try {    AbstractCursor abstractCursor=(AbstractCursor)returnCursor;    abstractCursor.setNotificationUri(getContext().getContentResolver(),uri,userId);  } catch (  ClassCastException e) {    Log.wtf(TAG,"Incompatible cursor derivation");    throw e;  }  return returnCursor;}  }
class C{  public Builder keywords(String... keywords){  this.keywords=(keywords == null) ? null : keywords.clone();  return this;}  }
class C{  public static _SearchFactor fromString(final String value) throws SOAPSerializationException {  return (_SearchFactor)Enumeration.fromString(value,_SearchFactor.VALUES_TO_INSTANCES);}  }
class C{  public static String generateMAX(DbColumnDef colDef,String alias){  StringBuffer sql=new StringBuffer(" MAX(").append(colDef.getQualifiedName()).append(") AS ").append(alias).append(" ");  return sql.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.448 -0500",hash_original_method="487CD3731F38F990825B550D79A7F010",hash_generated_method="F77686E53CB4E6C7B22C14E4E0BD743D") public ProtocolVersion(String protocol,int major,int minor){  if (protocol == null) {    throw new IllegalArgumentException("Protocol name must not be null.");  }  if (major < 0) {    throw new IllegalArgumentException("Protocol major version number must not be negative.");  }  if (minor < 0) {    throw new IllegalArgumentException("Protocol minor version number may not be negative");  }  this.protocol=protocol;  this.major=major;  this.minor=minor;}  }
class C{  public boolean isSrpAuthSettable(){  return srpAuthSettable;}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  long count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  private Attribute[] createSpecialAttributes(ExampleSet exampleSet) throws OperatorException {  final String attributePrefix="BayBoostModelPrediction";  Attribute[] specialAttributes=new Attribute[this.getLabel().getMapping().size()];  for (int i=0; i < specialAttributes.length; i++) {    specialAttributes[i]=com.rapidminer.example.Tools.createSpecialAttribute(exampleSet,attributePrefix + i,Ontology.NUMERICAL);  }  return specialAttributes;}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.getActionCommand());  if (e.getSource() == updateArchive)   cmd_updateArchive(); else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose(); else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (panel.getSelectedIndex() == 1)     dispose(); else     cmd_query();  } else   if (e.getSource() == reportField)   updateQDisplay(); else   if (e.getSource() == bBack)   updateVDisplay(false); else   if (e.getSource() == bNext)   updateVDisplay(true);}  }
class C{  public void test_X500Principal_02(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  byte[] ba=getByteArray(TestUtils.getX509Certificate_v1());  ByteArrayInputStream is=new ByteArrayInputStream(ba);  InputStream isNull=null;  try {    X500Principal xpr=new X500Principal(is);    assertNotNull("Null object returned",xpr);    byte[] resArray=xpr.getEncoded();    assertEquals(ba.length,resArray.length);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    X500Principal xpr=new X500Principal(isNull);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of NullPointerException");  }  is=new ByteArrayInputStream(name.getBytes());  try {    X500Principal xpr=new X500Principal(is);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public Path2D.Double toGeneralPath(){  Path2D.Double gp=new Path2D.Double();  return gp;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  private void processRemoveRequest(RemoveMemberMessage incomingRequest){  NetView v=currentView;  boolean fromMe=incomingRequest.getSender() == null || incomingRequest.getSender().equals(localAddress);  InternalDistributedMember mbr=incomingRequest.getMemberID();  if (v != null && !v.contains(incomingRequest.getSender())) {    logger.info("Membership ignoring removal request for " + mbr + " from non-member "+ incomingRequest.getSender());    return;  }  if (v == null) {    return;  }  if (!fromMe) {    logger.info("Membership received a request to remove " + mbr + " from "+ incomingRequest.getSender()+ " reason="+ incomingRequest.getReason());  }  if (mbr.equals(this.localAddress)) {    forceDisconnect(incomingRequest.getReason());    return;  }  if (getPendingRequestIDs(REMOVE_MEMBER_REQUEST).contains(mbr)) {    logger.debug("ignoring removal request as I already have a removal request for this member");    return;  }  if (!isCoordinator && !isStopping && !services.getCancelCriterion().isCancelInProgress()) {    logger.debug("Checking to see if I should become coordinator");    NetView check=new NetView(v,v.getViewId() + 1);synchronized (removedMembers) {      removedMembers.add(mbr);      check.addCrashedMembers(removedMembers);      check.removeAll(removedMembers);    }synchronized (leftMembers) {      check.removeAll(leftMembers);    }    if (check.getCoordinator().equals(localAddress)) {synchronized (viewInstallationLock) {        becomeCoordinator(mbr);      }    }  } else {    if (!isStopping && !services.getCancelCriterion().isCancelInProgress()) {      if (!getPendingRequestIDs(LEAVE_REQUEST_MESSAGE).contains(mbr)) {        recordViewRequest(incomingRequest);        this.viewProcessor.processRemoveRequest(mbr);        this.prepareProcessor.processRemoveRequest(mbr);      }    }  }}  }
class C{  @Override public CertificateToken addCertificate(final CertificateToken x509Certificate){  final CertificateToken certToken=certPool.getInstance(x509Certificate,getCertificateSourceType());  if (certificateTokens != null) {    if (!certificateTokens.contains(certToken)) {      certificateTokens.add(certToken);    }  }  return certToken;}  }
class C{  public static boolean isMergeDistinctEntities(UimaContext context){  Object value=context.getConfigParameterValue(PipelineCpeBuilder.MERGE_DISTINCT_ENTITIES);  if (value == null || !(value instanceof Boolean)) {    return false;  } else {    return (boolean)value;  }}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  Size2D base=new Size2D(calculateTotalWidth(getWidth()),calculateTotalHeight(getHeight()));  return constraint.calculateConstrainedSize(base);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TYPE:    return isSetType();case HELLO:  return isSetHello();case ERROR:return isSetError();case ECHO_REQUEST:return isSetEchoRequest();case ECHO_REPLY:return isSetEchoReply();case GET_REQUEST:return isSetGetRequest();case GET_RESPONSE:return isSetGetResponse();case PUT_REQUEST:return isSetPutRequest();case PUT_RESPONSE:return isSetPutResponse();case DELETE_REQUEST:return isSetDeleteRequest();case DELETE_RESPONSE:return isSetDeleteResponse();case SYNC_VALUE:return isSetSyncValue();case SYNC_VALUE_RESPONSE:return isSetSyncValueResponse();case SYNC_OFFER:return isSetSyncOffer();case SYNC_REQUEST:return isSetSyncRequest();case FULL_SYNC_REQUEST:return isSetFullSyncRequest();case CURSOR_REQUEST:return isSetCursorRequest();case CURSOR_RESPONSE:return isSetCursorResponse();case REGISTER_REQUEST:return isSetRegisterRequest();case REGISTER_RESPONSE:return isSetRegisterResponse();case CLUSTER_JOIN_REQUEST:return isSetClusterJoinRequest();case CLUSTER_JOIN_RESPONSE:return isSetClusterJoinResponse();}throw new IllegalStateException();}  }
class C{  private void fillStoredFields(int docID) throws IOException, AbortingException {  while (lastStoredDocID < docID) {    startStoredFields();    finishStoredFields();  }}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.420 -0500",hash_original_method="D2F1B0F357AFECE488E1088CFE6DBC57",hash_generated_method="08D553EB52C2E1246CD1707FCCE6C5DC") public static int[] toIntArray(String str){  return toIntArray(str,true);}  }
class C{  public SliderThumbPainter(Which state){  super();  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);switch (state) {case BACKGROUND_DISABLED:    type=CommonControlState.DISABLED;  isFocused=false;isDiscrete=false;break;case BACKGROUND_ENABLED:case BACKGROUND_MOUSEOVER:type=CommonControlState.ENABLED;isFocused=false;isDiscrete=false;break;case BACKGROUND_PRESSED:type=CommonControlState.PRESSED;isFocused=false;isDiscrete=false;break;case BACKGROUND_FOCUSED:case BACKGROUND_FOCUSED_MOUSEOVER:type=CommonControlState.ENABLED;isFocused=true;isDiscrete=false;break;case BACKGROUND_FOCUSED_PRESSED:type=CommonControlState.PRESSED;isFocused=true;isDiscrete=false;break;case BACKGROUND_DISABLED_ARROWSHAPE:type=CommonControlState.DISABLED;isFocused=false;isDiscrete=true;break;case BACKGROUND_ENABLED_ARROWSHAPE:case BACKGROUND_MOUSEOVER_ARROWSHAPE:type=CommonControlState.ENABLED;isFocused=false;isDiscrete=true;break;case BACKGROUND_PRESSED_ARROWSHAPE:type=CommonControlState.PRESSED;isFocused=false;isDiscrete=true;break;case BACKGROUND_FOCUSED_ARROWSHAPE:case BACKGROUND_FOCUSED_MOUSEOVER_ARROWSHAPE:type=CommonControlState.ENABLED;isFocused=true;isDiscrete=true;break;case BACKGROUND_FOCUSED_PRESSED_ARROWSHAPE:type=CommonControlState.PRESSED;isFocused=true;isDiscrete=true;break;}}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public StringLiteralForSTE createStringLiteralForSTE(){  StringLiteralForSTEImpl stringLiteralForSTE=new StringLiteralForSTEImpl();  return stringLiteralForSTE;}  }
class C{  public void resetCount(){  progress=0;  setText("0%");  invalidate();}  }
class C{  private boolean isOff(long flag){  return (options & flag) == 0;}  }
