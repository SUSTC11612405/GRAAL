class C{  @Override public void clear(){  if (_fields != null) {    _fields.clear();  }  _childDocuments=null;}  }
class C{  @Override public boolean applyTo(ImageView imageView,String tag){  if (getUri() != null) {    boolean consumed=DrawerImageLoader.getInstance().setImage(imageView,getUri(),tag);    if (!consumed) {      imageView.setImageURI(getUri());    }  } else   if (getIcon() != null) {    imageView.setImageDrawable(getIcon());  } else   if (getBitmap() != null) {    imageView.setImageBitmap(getBitmap());  } else   if (getIconRes() != -1) {    imageView.setImageResource(getIconRes());  } else   if (mIIcon != null) {    imageView.setImageDrawable(new IconicsDrawable(imageView.getContext(),mIIcon).actionBar());  } else {    imageView.setImageBitmap(null);    return false;  }  return true;}  }
class C{  private void close(){  DB.close(m_rs,m_pstmt);  m_rs=null;  m_pstmt=null;  if (trx != null)   trx.close();}  }
class C{  public void close() throws IOException {  _isClosed=true;  _rolloverWorker.wake();  _rolloverWorker.close();synchronized (_logLock) {    closeLogStream();  }  Alarm alarm=_rolloverAlarm;  _rolloverAlarm=null;  if (alarm != null)   alarm.dequeue();}  }
class C{  public MediaType withoutParameters(){  return parameters.isEmpty() ? this : create(type,subtype);}  }
class C{  public void showEmptyTextView(){  mMiniPlayerLayout.setVisibility(View.GONE);  mListView.setVisibility(View.INVISIBLE);  mEmptyInfoText.setVisibility(View.VISIBLE);}  }
class C{  protected SVGPointShapeElement(){}  }
class C{  public boolean checkModifier(int modifierBits){  long fmod=((modifierBits & ACCESS_BITS) == 0) ? modifierBits | PACKAGE : modifierBits;  return ((oneOf == 0) || ((oneOf & fmod) != 0)) && ((must & fmod) == must) && ((cannot & fmod) == 0);}  }
class C{  public static boolean parseBoolean(CharSequence csq,Cursor cursor){  int start=cursor.getIndex();  int end=csq.length();  if ((end >= start + 5) && (csq.charAt(start) == 'f' || csq.charAt(start) == 'F')) {    if ((csq.charAt(++start) == 'a' || csq.charAt(start) == 'A') && (csq.charAt(++start) == 'l' || csq.charAt(start) == 'L') && (csq.charAt(++start) == 's' || csq.charAt(start) == 'S')&& (csq.charAt(++start) == 'e' || csq.charAt(start) == 'E')) {      cursor.increment(5);      return false;    }  } else   if ((end >= start + 4) && (csq.charAt(start) == 't' || csq.charAt(start) == 'T'))   if ((csq.charAt(++start) == 'r' || csq.charAt(start) == 'R') && (csq.charAt(++start) == 'u' || csq.charAt(start) == 'U') && (csq.charAt(++start) == 'e' || csq.charAt(start) == 'E')) {    cursor.increment(4);    return true;  }  throw new IllegalArgumentException("Invalid boolean representation");}  }
class C{  private void sendStageProgressPatch(TaskState.TaskStage stage){  ServiceUtils.logInfo(this,"Sending stage progress path %s",stage);  TaskUtils.sendSelfPatch(this,buildPatch(stage,null));}  }
class C{  public String toString(){  return host + ":" + port+ "/"+ transport;}  }
class C{  public String normalizeSystemName(String systemName){  return (SerialAddress.normalizeSystemName(systemName));}  }
class C{  public void execute(Runnable r){  nativeExecutorService.execute(r);}  }
class C{  private void paintBorder(SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){  SeaGlassPainter borderPainter=style.getBorderPainter(ctx);  if (borderPainter != null) {    paint(borderPainter,ctx,g,x,y,w,h,transform);  }}  }
class C{  public synchronized void enableAutoIOThrottle(){  doAutoIOThrottle=true;  targetMBPerSec=START_MB_PER_SEC;  updateMergeThreads();}  }
class C{  public static ThreadPoolExecutor newThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler){  return newThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,newNamedThreadFactory(),handler);}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/list") public List<Snapshot> listAll() throws ServiceException {  return snapshotService.listAll();}  }
class C{  public void importSchema(String ns,String schemaLocation) throws SAXException {  NGCCRuntimeEx newRuntime=new NGCCRuntimeEx(parser,false,this);  InputSource source=resolveRelativeURL(ns,schemaLocation);  if (source != null)   newRuntime.parseEntity(source,false,ns,getLocator());}  }
class C{  public static BuilderForDnsDiscoverer forDnsDiscoverer(){  return new BuilderForDnsDiscoverer();}  }
class C{  public Object visit(ASTIdentifier node,Object data){  return showNode(node,data);}  }
class C{  public <T>TSink<T> publishBytes(TStream<T> stream,Function<T,byte[]> keyFn,Function<T,byte[]> valueFn,Function<T,String> topicFn,Function<T,Integer> partitionFn){  return stream.sink(new KafkaPublisher<T>(connector,keyFn,valueFn,topicFn,partitionFn));}  }
class C{  public void clear(){  count=0;  indices=new HashMap<String,Integer>();}  }
class C{  public static void info(Object message){  ri.info(message);}  }
class C{  public static int generateId(){  return addCount();}  }
class C{  public T caseTAnnotableElement(TAnnotableElement object){  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String readLine() throws IOException {  String line=currentFilePart.readLine();  while (line == null) {    currentFilePart=currentFilePart.rollOver();    if (currentFilePart != null) {      line=currentFilePart.readLine();    } else {      break;    }  }  if ("".equals(line) && !trailingNewlineOfFileSkipped) {    trailingNewlineOfFileSkipped=true;    line=readLine();  }  return line;}  }
class C{  @Override public Boolean hexists(final String key,final String field){  checkIsInMultiOrPipeline();  client.hexists(key,field);  return client.getIntegerReply() == 1;}  }
class C{  private Pair<Integer,Integer> readWebPImageSize(){  final Pair<Integer,Integer> dimensions=WebpUtil.getSize(getInputStream());  if (dimensions != null) {    mWidth=dimensions.first;    mHeight=dimensions.second;  }  return dimensions;}  }
class C{  public void startAndBind(){  bindService(true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  Airing a=getAir(stack);  if (a != null) {    ManualRecord mr=Wizard.getInstance().getManualRecord(a);    if (mr != null) {      mr.setName(name);    }  }  return null;}  }
class C{  private void disableJsoupHtmlEntityEscape(){  if (DISABLE_HTML_ENTITY_ESCAPE && !INITED) {    Entities.EscapeMode.base.getMap().clear();    Entities.EscapeMode.extended.getMap().clear();    INITED=true;  }}  }
class C{  @Override public String toString(){  return "[" + getXValue() + ", "+ getYValue()+ "]";}  }
class C{  public void recordData(long start,long end,NetworkStats.Entry entry){  long rxBytes=entry.rxBytes;  long rxPackets=entry.rxPackets;  long txBytes=entry.txBytes;  long txPackets=entry.txPackets;  long operations=entry.operations;  if (entry.isNegative()) {    throw new IllegalArgumentException("tried recording negative data");  }  if (entry.isEmpty()) {    return;  }  ensureBuckets(start,end);  long duration=end - start;  final int startIndex=getIndexAfter(end);  for (int i=startIndex; i >= 0; i--) {    final long curStart=bucketStart[i];    final long curEnd=curStart + bucketDuration;    if (curEnd < start)     break;    if (curStart > end)     continue;    final long overlap=Math.min(curEnd,end) - Math.max(curStart,start);    if (overlap <= 0)     continue;    final long fracRxBytes=rxBytes * overlap / duration;    final long fracRxPackets=rxPackets * overlap / duration;    final long fracTxBytes=txBytes * overlap / duration;    final long fracTxPackets=txPackets * overlap / duration;    final long fracOperations=operations * overlap / duration;    addLong(activeTime,i,overlap);    addLong(this.rxBytes,i,fracRxBytes);    rxBytes-=fracRxBytes;    addLong(this.rxPackets,i,fracRxPackets);    rxPackets-=fracRxPackets;    addLong(this.txBytes,i,fracTxBytes);    txBytes-=fracTxBytes;    addLong(this.txPackets,i,fracTxPackets);    txPackets-=fracTxPackets;    addLong(this.operations,i,fracOperations);    operations-=fracOperations;    duration-=overlap;  }  totalBytes+=entry.rxBytes + entry.txBytes;}  }
class C{  protected static String quoteMap(Map<String,Class<?>> map){  if (map == null) {    return "null";  }  if (map.size() == 0) {    return "new Map()";  }  return "new Map() /* " + map.toString() + " */";}  }
class C{  protected void rotateOrthogonal(){  lowerWestToUpperEast.setRotation(lowerWestToUpperEast.getRotation() + 1,this);  upperWestToLowerEast.setRotation(upperWestToLowerEast.getRotation() + 1,this);  lowerWestToLowerEast.setRotation(lowerWestToLowerEast.getRotation() + 1,this);  upperWestToUpperEast.setRotation(upperWestToUpperEast.getRotation() + 1,this);  unknown.setRotation(unknown.getRotation() + 1,this);  inconsistent.setRotation(inconsistent.getRotation() + 1,this);  displayState(turnoutState());  repaint();}  }
class C{  public void fireSelectionEvent(int oldSelection,int newSelection){  if (listeners == null || listeners.size() == 0) {    return;  }  boolean isEdt=Display.getInstance().isEdt();  if (isEdt && listeners.size() == 1) {    SelectionListener a=(SelectionListener)listeners.get(0);    a.selectionChanged(oldSelection,newSelection);    return;  }  SelectionListener[] array;synchronized (this) {    array=new SelectionListener[listeners.size()];    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter]=(SelectionListener)listeners.get(iter);    }  }  if (isEdt) {    fireSelectionSync(array,oldSelection,newSelection);  } else {    selectionListenerArray=true;    Runnable cl=new CallbackClass(array,new int[]{oldSelection,newSelection});    if (blocking) {      Display.getInstance().callSeriallyAndWait(cl);    } else {      Display.getInstance().callSerially(cl);    }  }}  }
class C{  static public String valueOf(int val){  return java.text.NumberFormat.getInstance().format(val);}  }
class C{  @Override public void showSelectedSynapseProperties(){  StandardDialog dialog=getSynapseDialog(getSelectedSynapses());  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public String outputFileName(){  return m_OutputFileName;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.376 -0500",hash_original_method="4C68F89668EEC8ACA3036C864AE1DCBA",hash_generated_method="CCEFBCB218FB24E74153F4AC5CC8BEB6") public void writeToParcel(Parcel dest,int flags){  crashInfo.writeToParcel(dest,flags);  dest.writeInt(policy);  dest.writeInt(durationMillis);  dest.writeInt(violationNumThisLoop);  dest.writeInt(numAnimationsRunning);  dest.writeLong(violationUptimeMillis);  dest.writeLong(numInstances);  dest.writeString(broadcastIntentAction);  dest.writeStringArray(tags);}  }
class C{  public static void putString(IoBuffer buf,String string){  final byte[] encoded=encodeString(string);  buf.putShort((short)encoded.length);  buf.put(encoded);}  }
class C{  static PageDataNode create(PageDataIndex index,int pageId,int parentPageId){  PageDataNode p=new PageDataNode(index,pageId,index.getPageStore().createData());  index.getPageStore().logUndo(p,null);  p.parentPageId=parentPageId;  p.writeHead();  p.length=p.data.length() + 4;  return p;}  }
class C{  public void testMaxShingleSize() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","maxShingleSize","3").create(stream);  assertTokenStreamContents(stream,new String[]{"this","this is","this is a","is","is a","is a test","a","a test","test"});}  }
class C{  public CloseableImage decodeWebP(final EncodedImage encodedImage,final ImageDecodeOptions options,final Bitmap.Config bitmapConfig){  if (sWebpAnimatedImageDecoder == null) {    throw new UnsupportedOperationException("To encode animated webp please add the dependency " + "to the animated-webp module");  }  final CloseableReference<PooledByteBuffer> bytesRef=encodedImage.getByteBufferRef();  Preconditions.checkNotNull(bytesRef);  try {    final PooledByteBuffer input=bytesRef.get();    AnimatedImage webPImage=sWebpAnimatedImageDecoder.decode(input.getNativePtr(),input.size());    return getCloseableImage(options,webPImage,bitmapConfig);  }  finally {    CloseableReference.closeSafely(bytesRef);  }}  }
class C{  public boolean isCompiledTemplate(){  return false;}  }
class C{  public TransparentGlassPanePanel(ImageIcon icon,String text,Color backgroundColor,float transparency){  setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridy=0;  gbc.gridx=0;  JLabel iconLabel=new JLabel(icon);  add(iconLabel,gbc);  gbc.gridy+=1;  label=new JLabel(text);  add(label,gbc);  if (transparency > 1) {    transparency=1;  } else   if (transparency < 0) {    transparency=0;  }  Color transparentColor=new Color(backgroundColor.getRed(),backgroundColor.getGreen(),backgroundColor.getBlue(),(int)(transparency * 255));  setBackground(transparentColor);  setOpaque(false);}  }
class C{  private void launchExplicitIntentWithParceableObj(){  Intent i=new Intent(MainActivity.this,Main2Activity.class);  POJOClass pojoClass=new POJOClass("Radix","This is some text");  i.putExtra("data",pojoClass);  i.putExtra("type","pojo");  startActivity(i);}  }
class C{  private void updateCiClasses(String path){  if (!path.endsWith("/")) {    path=path.concat("/");  }  File ciLibDir=new File(path + "libraries/");  File ciHelperDir=new File(path + "helpers/");  File ciCoreDir=new File(path + "core/");  List<String> fileExts=new LinkedList<String>();  fileExts.add("php");  this.ciClasses=new ArrayList<CiClass>();  try {    List<File> files=getFilesFromDirectory(ciLibDir,fileExts,false);    files.addAll(getFilesFromDirectory(ciHelperDir,fileExts,false));    files.addAll(getFilesFromDirectory(ciCoreDir,fileExts,false));    for (    File f : files) {      CiClass ciClass=PHPDocumentParser.extractCiClass(f);      ciClass.setFunctions(PHPDocumentParser.extractFunctions(f));      this.ciClasses.add(ciClass);    }    saveCiClasses();  } catch (  Exception e) {    e.printStackTrace(System.err);  }}  }
class C{  public void close(){  getScheduler().shutdownNow();  userThreads.shutdownNow();  invokeAction(null);  notifyCompleter();  List<Runnable> unfinished=controlScheduler.shutdownNow();  if (!unfinished.isEmpty()) {    logger.warn("Scheduler could not finish {} tasks",unfinished.size());  }}  }
class C{  public static void showMessage(String msg,char icon,int timeout){  ToastBar.Status s=ToastBar.getInstance().createStatus();  Style stl=UIManager.getInstance().getComponentStyle(s.getMessageUIID());  s.setIcon(FontImage.createMaterial(icon,stl,4));  s.setMessage(msg);  s.setExpires(timeout);  s.show();}  }
class C{  public VisRunner(IterativeContext process){  this.process=process;}  }
class C{  public static GridData fillLabelDefaults(){  GridData data=new GridData();  data.grabExcessHorizontalSpace=false;  data.grabExcessVerticalSpace=false;  data.horizontalAlignment=SWT.LEFT;  data.verticalAlignment=SWT.CENTER;  return data;}  }
class C{  public static final boolean isLandscape(final Context context){  final int orientation=context.getResources().getConfiguration().orientation;  return orientation == Configuration.ORIENTATION_LANDSCAPE;}  }
class C{  public boolean isInitOK(){  return m_initOK;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BoxAndWhiskerRenderer)) {    return false;  }  BoxAndWhiskerRenderer that=(BoxAndWhiskerRenderer)obj;  if (this.fillBox != that.fillBox) {    return false;  }  if (this.itemMargin != that.itemMargin) {    return false;  }  if (this.maximumBarWidth != that.maximumBarWidth) {    return false;  }  if (this.meanVisible != that.meanVisible) {    return false;  }  if (this.medianVisible != that.medianVisible) {    return false;  }  if (this.useOutlinePaintForWhiskers != that.useOutlinePaintForWhiskers) {    return false;  }  if (this.whiskerWidth != that.whiskerWidth) {    return false;  }  if (!PaintUtilities.equal(this.artifactPaint,that.artifactPaint)) {    return false;  }  return super.equals(obj);}  }
class C{  private void addToStepList(MetadataKey<?> step){  if (selectsAttribute) {    throw new PathException("Cannot add to an attribute path: " + step.getId());  }  if (step instanceof AttributeKey) {    selectsAttribute=true;  }  steps.add(step);}  }
class C{  public SpdyStream newStream(List<String> requestHeaders,boolean out,boolean in) throws IOException {  int flags=(out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);  int associatedStreamId=0;  int priority=0;  int slot=0;  SpdyStream stream;  int streamId;synchronized (spdyWriter) {synchronized (this) {      if (shutdown) {        throw new IOException("shutdown");      }      streamId=nextStreamId;      nextStreamId+=2;      stream=new SpdyStream(streamId,this,flags,priority,slot,requestHeaders,settings);      if (stream.isOpen()) {        streams.put(streamId,stream);        setIdle(false);      }    }    spdyWriter.synStream(flags,streamId,associatedStreamId,priority,slot,requestHeaders);  }  return stream;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  return;case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:setOwner((N4ClassifierDefinition)null);return;}super.eUnset(featureID);}  }
class C{  public AutoRotateDrawable(Drawable drawable,int interval){  this(drawable,interval,true);}  }
class C{  @Override public boolean equals(Object obj){  return (obj instanceof FrequencySet) && set.equals(((FrequencySet)obj).set);}  }
class C{  public boolean isAutoScrolling(){  return this.autoScrolling;}  }
class C{  public static void processNotificationContent(MultipartBody multipartBody,NotificationOptions notificationOptions){  multipartBody.field("disable_notification",notificationOptions.isDisableNotification());}  }
class C{  public static <A,B,C,D>Tuple4<A,B,C,D> of(A a,B b,C c,D d){  return new Tuple4<>(a,b,c,d);}  }
class C{  private UnManagedConsistencyGroup createUnManagedCG(String unManagedCGNativeGuid,StorageResource res,URI storageSystemURI,DbClient dbClient){  UnManagedConsistencyGroup unManagedCG=new UnManagedConsistencyGroup();  unManagedCG.setId(URIUtil.createId(UnManagedConsistencyGroup.class));  unManagedCG.setLabel(res.getName());  unManagedCG.setName(res.getName());  unManagedCG.setNativeGuid(unManagedCGNativeGuid);  unManagedCG.setStorageSystemUri(storageSystemURI);  unManagedCG.setNumberOfVols(Integer.toString(res.getLuns().size()));  dbClient.createObject(unManagedCG);  return unManagedCG;}  }
class C{  public KeyException(){  super();}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc1=(Document)load("hc_staff",true);  doc2=(Document)load("hc_staff",false);  newAttribute=doc2.createAttribute("newAttribute");  addressElementList=doc1.getElementsByTagName("acronym");  testAddress=(Element)addressElementList.item(4);{    boolean success=false;    try {      attrAddress=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public boolean hasValue(){  return textValue != null;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public void fireTableCellUpdated(int row,int column){  fireTableChanged(new TableModelEvent(this,row,row,column));}  }
class C{  public String simpleQueryForString(){  return simpleQuery().getString();}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  void clearArray(long[] ar){  for (int i=0; i < ar.length; i++)   ar[i]=0;}  }
class C{  protected void sequence_ShiftExpression(ISerializationContext context,ShiftExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.SHIFT_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.SHIFT_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.SHIFT_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.SHIFT_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.SHIFT_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.SHIFT_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public GenericScale(String name,int seed){  super(name,new byte[0]);  byte[] tmp=new byte[12];  int j=11;  for (byte i=11; i >= 0; i--) {    if ((seed & 1) != 0) {      tmp[j--]=i;    }    seed>>>=1;  }  tones=new byte[11 - j];  System.arraycopy(tmp,j + 1,tones,0,tones.length);}  }
class C{  public RequestHandle(RequestQueue requestQueue,String url,WebAddress uri,String method,Map<String,String> headers,InputStream bodyProvider,int bodyLength,Request request){  if (headers == null) {    headers=new HashMap<String,String>();  }  mHeaders=headers;  mBodyProvider=bodyProvider;  mBodyLength=bodyLength;  mMethod=method == null ? "GET" : method;  mUrl=url;  mUri=uri;  mRequestQueue=requestQueue;  mRequest=request;}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public final void appendInstance(InstanceNode s){  instanceVec.addElement(s);  topLevelVec.addElement(s);}  }
class C{  public static Remote toStub(Remote obj) throws NoSuchObjectException {  if (obj instanceof RemoteStub || (obj != null && Proxy.isProxyClass(obj.getClass()) && Proxy.getInvocationHandler(obj) instanceof RemoteObjectInvocationHandler)) {    return obj;  } else {    return sun.rmi.transport.ObjectTable.getStub(obj);  }}  }
class C{  public void endPrefixMapping(String prefix){}  }
class C{  protected void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  try {    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    m_ispreserve=true;    m_writer.write(ch,start,length);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @Override UnixMountEntry findMountEntry() throws IOException {  UnixFileSystem fs=file().getFileSystem();  UnixPath path=null;  try {    byte[] rp=UnixNativeDispatcher.realpath(file());    path=new UnixPath(fs,rp);  } catch (  UnixException x) {    x.rethrowAsIOException(file());  }  UnixPath parent=path.getParent();  while (parent != null) {    UnixFileAttributes attrs=null;    try {      attrs=UnixFileAttributes.get(parent,true);    } catch (    UnixException x) {      x.rethrowAsIOException(parent);    }    if (attrs.dev() != dev())     break;    path=parent;    parent=parent.getParent();  }  byte[] dir=path.asByteArray();  for (  UnixMountEntry entry : fs.getMountEntries()) {    if (Arrays.equals(dir,entry.dir()))     return entry;  }  throw new IOException("Mount point not found in fstab");}  }
class C{  private Object executeMinus(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return new Double(Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getOperand(0),row)) - Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getOperand(1),row)));}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractCharacterData cd=(AbstractCharacterData)n;  cd.nodeValue=nodeValue;  return n;}  }
class C{  public static boolean verifyPublicKey(PGPPublicKey keyToVerify,PGPPublicKey keyToVerifyWith) throws PGPException {  try {    Iterator<PGPSignature> signIterator=keyToVerify.getSignatures();    while (signIterator.hasNext()) {      PGPSignature signature=signIterator.next();      signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(provider),keyToVerifyWith);      if (signature.verifyCertification(keyToVerify)) {        return true;      }    }    return false;  } catch (  Exception e) {    throw new PGPException("Error verifying public key",e);  }}  }
class C{  private void pulse(){  addEntries(translateTimestamp(System.currentTimeMillis()));  LineData historyData=(LineData)mStepsPerMinuteHistoryChart.getData();  if (historyData == null) {    return;  }  historyData.notifyDataChanged();  mTotalStepsData.notifyDataSetChanged();  mStepsPerMinuteData.notifyDataSetChanged();  mStepsPerMinuteHistoryChart.notifyDataSetChanged();  renderCharts();  GBApplication.deviceService().onEnableRealtimeHeartRateMeasurement(true);}  }
class C{  public UserProperties(Properties defaults,Properties altDefaults){  super(defaults);  this.altDefaults=altDefaults;}  }
class C{  private static <E>ListIterator<E> constrainedListIterator(ListIterator<E> listIterator,Constraint<? super E> constraint){  return new ConstrainedListIterator<E>(listIterator,constraint);}  }
class C{  public ZipExtractHandler(HttpClient selfClient){  this.selfClient=selfClient;  this.mimeTypeResolver=new MimeTypeResolver(DEFAULT_MIME_TYPE);}  }
class C{  public JSONArray optJSONArray(int index){  Object o=opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public static File validateSettingsDirectory(File dir) throws IOException {  dir=dir.getAbsoluteFile();  if (!dir.isDirectory()) {    dir.delete();    if (!dir.mkdirs())     throw new IOException("could not create preferences directory: " + dir);  }  if (!dir.canWrite())   throw new IOException("settings dir not writable: " + dir);  if (!dir.canRead())   throw new IOException("settings dir not readable: " + dir);  File file=File.createTempFile("test","test",dir);  if (!file.exists())   throw new IOException("can't write test file in directory: " + dir);  file.delete();  return dir;}  }
class C{  private <S,T>boolean checkManyToMany(boolean conditional,Iterable<S> sources,Iterable<T> targets,@Nullable String message){  if (conditional) {    return true;  }  ImmutableList.Builder<Rows> rows=new ImmutableList.Builder<>();  for (  S source : sources) {    for (    T target : targets) {      Map<String,Object> rowData=new ImmutableMap.Builder<String,Object>().put(FIELD_SCANTIME,new com.google.api.client.util.DateTime(scanTime.toDate())).put(FIELD_SOURCE,source.toString()).put(FIELD_TARGET,target.toString()).put(FIELD_MESSAGE,(message == null) ? NULL_STRING : message).build();      rows.add(new TableDataInsertAllRequest.Rows().setJson(rowData).setInsertId(idGenerator.get()));    }  }  streamToBigqueryWithRetry(rows.build());  return false;}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isEntailed(KnowledgeBase kb,Sentence alpha){  Set<Clause> kbAndNotAlpha=new LinkedHashSet<Clause>();  Sentence notQuery=new ComplexSentence(Connective.NOT,alpha);  Set<PropositionSymbol> symbols=new LinkedHashSet<PropositionSymbol>();  List<PropositionSymbol> querySymbols=new ArrayList<PropositionSymbol>(SymbolCollector.getSymbolsFrom(notQuery));  kbAndNotAlpha.addAll(kb.asCNF());  kbAndNotAlpha.addAll(ConvertToConjunctionOfClauses.convert(notQuery).getClauses());  symbols.addAll(querySymbols);  symbols.addAll(kb.getSymbols());  return !dpll(kbAndNotAlpha,new ArrayList<PropositionSymbol>(symbols),new Model());}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public void insert(E obj){  int i;  i=++_n;  E p;  while (i > 1) {    int pIdx=i / 2;    p=_elements[pIdx];    if (comparator.compare(obj,p) > 0) {      break;    }    _elements[i]=p;    i=pIdx;  }  _elements[i]=obj;}  }
class C{  private final int moveTempStateStackToStateStack(){  int startingIndex=mStateStackTopIndex + 1;  int i=mTempStateStackCount - 1;  int j=startingIndex;  while (i >= 0) {    if (mDbg)     mSm.log("moveTempStackToStateStack: i=" + i + ",j="+ j);    mStateStack[j]=mTempStateStack[i];    j+=1;    i-=1;  }  mStateStackTopIndex=j - 1;  if (mDbg) {    mSm.log("moveTempStackToStateStack: X mStateStackTop=" + mStateStackTopIndex + ",startingIndex="+ startingIndex+ ",Top="+ mStateStack[mStateStackTopIndex].state.getName());  }  return startingIndex;}  }
class C{  public String ignoreCaseTipText(){  return "Whether to ignore case when matching nominal values";}  }
class C{  public Boolean isDomainController(){  return domainController;}  }
class C{  private final int turbulenceFractal_4(double pointX,double pointY,final double[] fSum){  int b0, b1, nOctave, i, j;  double px, py, rx0, rx1, ry0, ry1, sx, sy, ratio=127.5;  pointX*=baseFrequencyX;  pointY*=baseFrequencyY;  fSum[0]=fSum[1]=fSum[2]=fSum[3]=127.5;  for (nOctave=numOctaves; nOctave > 0; nOctave--) {    px=pointX + PerlinN;    b0=((int)px) & BM;    i=latticeSelector[b0];    j=latticeSelector[b0 + 1];    rx0=px - (int)px;    rx1=rx0 - 1.0;    sx=s_curve(rx0);    py=pointY + PerlinN;    b0=((int)py) & BM;    b1=(b0 + 1) & BM;    b1=((j + b0) & BM) << 3;    b0=((i + b0) & BM) << 3;    ry0=py - (int)py;    ry1=ry0 - 1.0;    sy=s_curve(ry0);    fSum[0]+=lerp(sy,lerp(sx,rx0 * gradient[b0 + 0] + ry0 * gradient[b0 + 1],rx1 * gradient[b1 + 0] + ry0 * gradient[b1 + 1]),lerp(sx,rx0 * gradient[b0 + 8 + 0] + ry1 * gradient[b0 + 8 + 1],rx1 * gradient[b1 + 8 + 0] + ry1 * gradient[b1 + 8 + 1])) * ratio;    fSum[1]+=lerp(sy,lerp(sx,rx0 * gradient[b0 + 2] + ry0 * gradient[b0 + 3],rx1 * gradient[b1 + 2] + ry0 * gradient[b1 + 3]),lerp(sx,rx0 * gradient[b0 + 8 + 2] + ry1 * gradient[b0 + 8 + 3],rx1 * gradient[b1 + 8 + 2] + ry1 * gradient[b1 + 8 + 3])) * ratio;    fSum[2]+=lerp(sy,lerp(sx,rx0 * gradient[b0 + 4] + ry0 * gradient[b0 + 5],rx1 * gradient[b1 + 4] + ry0 * gradient[b1 + 5]),lerp(sx,rx0 * gradient[b0 + 8 + 4] + ry1 * gradient[b0 + 8 + 5],rx1 * gradient[b1 + 8 + 4] + ry1 * gradient[b1 + 8 + 5])) * ratio;    fSum[3]+=lerp(sy,lerp(sx,rx0 * gradient[b0 + 6] + ry0 * gradient[b0 + 7],rx1 * gradient[b1 + 6] + ry0 * gradient[b1 + 7]),lerp(sx,rx0 * gradient[b0 + 8 + 6] + ry1 * gradient[b0 + 8 + 7],rx1 * gradient[b1 + 8 + 6] + ry1 * gradient[b1 + 8 + 7])) * ratio;    ratio*=.5;    pointX*=2;    pointY*=2;  }  i=(int)fSum[0];  if ((i & 0xFFFFFF00) == 0)   j=i << 16; else   j=((i & 0x80000000) != 0) ? 0 : 0xFF0000;  i=(int)fSum[1];  if ((i & 0xFFFFFF00) == 0)   j|=i << 8; else   j|=((i & 0x80000000) != 0) ? 0 : 0xFF00;  i=(int)fSum[2];  if ((i & 0xFFFFFF00) == 0)   j|=i; else   j|=((i & 0x80000000) != 0) ? 0 : 0xFF;  i=(int)fSum[3];  if ((i & 0xFFFFFF00) == 0)   j|=i << 24; else   j|=((i & 0x80000000) != 0) ? 0 : 0xFF000000;  return j;}  }
class C{  public static org.oscm.internal.vo.VOTriggerDefinition convertToUp(org.oscm.vo.VOTriggerDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOTriggerDefinition newVO=new org.oscm.internal.vo.VOTriggerDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.internal.types.enumtypes.TriggerType.class));  newVO.setTargetType(EnumConverter.convert(oldVO.getTargetType(),org.oscm.internal.types.enumtypes.TriggerTargetType.class));  newVO.setTarget(oldVO.getTarget());  newVO.setSuspendProcess(oldVO.isSuspendProcess());  newVO.setName(oldVO.getName());  return newVO;}  }
class C{  public static void dump(PrinterJob job){  StringBuffer sb=new StringBuffer(job.getJobName());  sb.append("/").append(job.getUserName()).append(" Service=").append(job.getPrintService().getName()).append(" Copies=").append(job.getCopies());  PageFormat pf=job.defaultPage();  sb.append(" DefaultPage ").append("x=").append(pf.getImageableX()).append(",y=").append(pf.getImageableY()).append(" w=").append(pf.getImageableWidth()).append(",h=").append(pf.getImageableHeight());  System.out.println(sb.toString());}  }
class C{  public void save() throws DroidModelException, IllegalAccessException {  if (!DroidUtils.isStringValid(getModelName()) || !DroidUtils.isStringValid(getPrimaryKey().toString())) {    Log.e(TAG,"Model is not initialized properly, not saving");    return;  }  String primaryKeyvalue=getPrimaryKeyValue();  if (this.rowid == -1 && !DroidUtils.isStringValid(primaryKeyvalue)) {    Log.e(TAG,"No primary key is set, not saving");    return;  }  DatabaseRequest dbRequest=new DatabaseRequest();  dbRequest.setTableName(getModelName());  dbRequest.setActionType(DatabaseRequest.Action.INSERT_OR_UPDATE);  dbRequest.setModel(this);  if (DroidUtils.isStringValid(primaryKeyvalue)) {    dbRequest.setConditions(this.getPrimaryKey().toString() + EQUALS + DroidUtils.enclose(primaryKeyvalue));  } else {    dbRequest.setConditions(ROWID + EQUALS + DroidUtils.enclose(this.rowid.toString()));  }  ArrayList<HashMap<String,String>> dbResponse=DatabaseHandler.getInstance().processRequest(dbRequest.getRW(),dbRequest.getRawQuery());  HashMap<String,String> modelValues=new HashMap<>();  if (dbResponse.size() == 1) {    modelValues=dbResponse.get(0);  } else {    return;  }  if (modelValues == null || modelValues.size() == 0) {    return;  }  if (this.rowid != -1 && modelValues.containsKey(ROWID)) {    if (this.rowid != new Integer(modelValues.get(ROWID)))     throw new DroidModelException();  }  if (modelValues.containsKey(ROWID)) {    this.rowid=new Integer(modelValues.get(ROWID));  }}  }
class C{  public void testSetIndexedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  Beans.setIndexedProperty(introspectedTarget,INDEXED_PROPERTY,1,NEW_VALUE);  Beans.setIndexedProperty(hashedTarget,INDEXED_PROPERTY,1,NEW_VALUE);  assertEquals(OLD_VALUE,Beans.getIndexedProperty(introspectedTarget,INDEXED_PROPERTY,0));  assertEquals(NEW_VALUE,Beans.getIndexedProperty(introspectedTarget,INDEXED_PROPERTY,1));  assertEquals(OLD_VALUE,Beans.getIndexedProperty(hashedTarget,INDEXED_PROPERTY,0));  assertEquals(NEW_VALUE,Beans.getIndexedProperty(hashedTarget,INDEXED_PROPERTY,1));}  }
class C{  public void dispose(){  if (children != null) {    for (    IXMLElement c : children) {      c.dispose();    }  }  this.attributes.clear();  this.attributes=null;  this.children=null;  this.fullName=null;  this.name=null;  this.namespace=null;  this.content=null;  this.systemID=null;  this.parent=null;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 1170) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public TObjectDoubleHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void advancedGraphics(GraphicContentNode node,DefineTag symbol,SymbolClassType symbolClassType){  MaskingNode maskNode=node.getMask();  String className=graphicClass.getClassName();  if (maskNode != null)   className+="_Maskee";  className=createUniqueName(className);  FXGSymbolClass symbolClass=new FXGSymbolClass();  symbolClass.setPackageName(packageName);  symbolClass.setClassName(className);  graphicClass.addAdditionalSymbolClass(symbolClass);  StringBuilder buf=new StringBuilder(512);  buf.append("package ").append(packageName).append("\n");  buf.append("{\n\n");  String baseClassName=null;  if (symbolClassType == SymbolClassType.SPRITE) {    buf.append("import flash.display.Sprite;\n");    baseClassName="Sprite";  } else {    buf.append("import flash.display.Shape;\n");    baseClassName="Shape";  }  String blendModeImport=generateBlendModeImport(node.blendMode);  if (blendModeImport != null)   buf.append(blendModeImport);  String blendModeShader=generateBlendMode(node.blendMode);  buf.append("public class ").append(className).append(" extends ").append(baseClassName).append("\n");  buf.append("{\n");  buf.append("    public function ").append(className).append("()\n");  buf.append("    {\n");  buf.append("        super();\n");  buf.append("        this.cacheAsBitmap = true;\n");  if (maskNode != null) {    int maskIndex=maskNode.getMaskIndex();    if (symbolClassType == SymbolClassType.SPRITE)     buf.append("        this.mask = this.getChildAt(").append(maskIndex).append(");\n"); else     buf.append("        this.mask = this.parent.getChildAt(").append(maskIndex).append(");\n");  }  if (blendModeShader != null)   buf.append(blendModeShader);  buf.append("    }\n");  buf.append("}\n");  buf.append("}\n");  symbolClass.setGeneratedSource(buf.toString());  symbolClass.setSymbol(symbol);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.235 -0400",hash_original_method="968990997123B88042733533DFA918C0",hash_generated_method="D3A24179BA1184DD41975C58D8D0D573") public static void copy(String input,Writer output) throws IOException {  output.write(input);}  }
class C{  public boolean hasIssueId(){  return hasExtension(Id.class);}  }
class C{  public final void readObject(final PdfObject pdfObject){  if (pdfObject.isDataExternal() && linHintTable != null) {    readExternalObject(pdfObject);  } else {    final String objectRef=pdfObject.getObjectRefAsString();    final int id=pdfObject.getObjectRefID();    final boolean debug=false;    if (debug) {      System.err.println("reading objectRef=" + objectRef + "< isCompressed="+ offset.isCompressed(id));    }    final boolean isCompressed=offset.isCompressed(id);    pdfObject.setCompressedStream(isCompressed);    final byte[] raw;    if (isCompressed) {      raw=readCompressedObject(pdfObject);    } else {      movePointer(offset.elementAt(id));      if (objectRef.charAt(0) == '<') {        raw=objectReader.readObjectData(-1,pdfObject);      } else {        if (ObjLengthTable == null || offset.isRefTableInvalid()) {          if (getPointer() == 0) {            raw=new byte[0];          } else {            raw=objectReader.readObjectData(-1,pdfObject);          }        } else         if (id > ObjLengthTable.length || ObjLengthTable[id] == 0) {          LogWriter.writeLog(objectRef + " cannot have offset 0");          raw=new byte[0];        } else {          raw=objectReader.readObjectData(ObjLengthTable[id],pdfObject);        }      }    }    if (raw.length > 1) {      final ObjectDecoder objDecoder=new ObjectDecoder(this);      objDecoder.readDictionaryAsObject(pdfObject,0,raw);    }  }}  }
class C{  private JPanel createImageFilePanel(){  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));  panel.add(imageFileName);  panel.add(Box.createHorizontalStrut(6));  panel.add(new JButton(openImageFile));  return panel;}  }
class C{  public void read(ModuleConfig config){  value=config.get(key,defaultValue);}  }
class C{  @Override public void start(){  frame=new JFrame();  ActionListener listener=new CustomActionListener();  frame.setLayout(new BorderLayout());  JButton up=new BasicArrowButton(SwingConstants.NORTH);  up.addActionListener(listener);  frame.add(up,BorderLayout.NORTH);  JButton west=new BasicArrowButton(SwingConstants.WEST);  west.addActionListener(listener);  frame.add(west,BorderLayout.WEST);  frame.add(new JLabel("  "),BorderLayout.CENTER);  JButton east=new BasicArrowButton(SwingConstants.EAST);  east.addActionListener(listener);  frame.add(east,BorderLayout.EAST);  JButton south=new BasicArrowButton(SwingConstants.SOUTH);  south.addActionListener(listener);  frame.add(south,BorderLayout.SOUTH);  frame.setSize(50,100);  frame.setLocation(600,600);  paused=false;  frame.setVisible(true);}  }
class C{  public PackedSwitchPayloadDecodedInstruction(InstructionCodec format,int opcode,int firstKey,int[] targets){  super(format,opcode,0,null,0,0L);  this.firstKey=firstKey;  this.targets=targets;}  }
class C{  @Override public String generateDoc(PsiElement element,PsiElement originalElement){  for (  DocumentationSource source : sourceList) {    String doc=source.documentation(element,originalElement);    if (StringUtils.stripToNull(doc) != null) {      return doc;    }  }  return null;}  }
class C{  @Override public Matrix covarianceDiscretization(final StochasticProcess sp,final double t0,final Array x0,final double dt){  final Matrix sigma=sp.diffusion(t0,x0);  return sigma.mul(sigma.transpose()).mulAssign(dt);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  protected void afterSave(){}  }
class C{  public InterruptedIOException(String detailMessage){  super(detailMessage);}  }
class C{  public String entropicAutoBlendTipText(){  return "Whether entropy-based blending is to be used.";}  }
class C{  private static void deleteTable(String tableId) throws IOException {  View.header("Delete Sample Table");  Delete delete=fusiontables.table().delete(tableId);  delete.execute();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.ROUTE__OWNED_ENDPOINTS:    getOwnedEndpoints().clear();  return;case EipPackage.ROUTE__OWNED_CHANNELS:getOwnedChannels().clear();return;case EipPackage.ROUTE__NAME:setName(NAME_EDEFAULT);return;case EipPackage.ROUTE__EXCHANGE_TYPE:setExchangeType(EXCHANGE_TYPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void testIncrementalSaver(){  int i;  File file;  if (!(getSaver() instanceof IncrementalConverter)) {    return;  }  try {    file=new File(m_ExportFilename);    if (file.exists()) {      file.delete();    }    m_Saver.setFile(new File(m_ExportFilename));    m_Saver.setRetrieval(AbstractSaver.INCREMENTAL);    m_Saver.setStructure(new Instances(m_Instances,0));    for (i=0; i < m_Instances.numInstances(); i++) {      m_Saver.writeIncremental(m_Instances.instance(i));    }    m_Saver.writeIncremental(null);  } catch (  Exception e) {    e.printStackTrace();    fail("Incremental save failed: " + e.toString());  }}  }
class C{  public static Integer[] nullToEmpty(Integer[] array){  if (array == null || array.length == 0) {    return EMPTY_INTEGER_OBJECT_ARRAY;  }  return array;}  }
class C{  public static void copyMTLFile(File dest) throws IOException {  if (Options.singleMaterial) {    File mtlFile=new File(Filesystem.getDatafilesDir(),SINGLE_MTL_FILE);    Filesystem.copyFile(mtlFile,dest);  } else   if (Options.useUVFile) {    File mtlFile=new File(Filesystem.getDatafilesDir(),SINGLE_TEXTURE_MTLS_FILE);    Filesystem.copyFile(mtlFile,dest);  } else {    File mtlFile=new File(Filesystem.getDatafilesDir(),CONFIG_FILE);    Filesystem.copyFile(mtlFile,dest);  }}  }
class C{  @Override public final void close() throws IOException {  StreamImpl s;synchronized (this) {    s=_source;    _source=null;  }  try {    int len=_writeLength;    if (len > 0) {      _writeLength=0;      if (s != null) {        s.write(_writeBuffer,0,len,true);      }    }  }  finally {    _source=null;    if (!_isReuseBuffer) {      TempBufferData tempWrite=_tempWrite;      _tempWrite=null;      _writeBuffer=null;      if (tempWrite != null) {        tempWrite.free();      }    }    if (s != null) {      s.closeWrite();    }  }}  }
class C{  public CacheServerConfig createCacheServerConfig(){  CacheServerConfig config=new CacheServerConfigImpl();  addCacheServerConfig(config);  return config;}  }
class C{  public static RelationalOpExpression eqProperty(String propertyLeft,String propertyRight){  return new RelationalOpExpression(getPropExpr(propertyLeft),"=",new PropertyValueExpression(propertyRight));}  }
class C{  public void redo(){  try {    if (undoManager.canRedo()) {      undoManager.redo();      for (      KeyListener kl : getKeyListeners()) {        kl.keyTyped(null);        kl.keyReleased(null);      }    }  } catch (  CannotRedoException e) {  }}  }
class C{  public void checkJvmMemoryGCCall(EnumJvmMemoryGCCall x) throws SnmpStatusException {  if (x.intValue() != JvmMemoryGCCallStart.intValue())   throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);}  }
class C{  public void addSearchListener(SearchListener l){  m_SearchListeners.add(l);}  }
class C{  public void releaseAllResources(){  finalize();}  }
class C{  public double norm1(DoubleMatrix1D x){  if (x.size() == 0)   return 0;  return x.aggregate(cern.jet.math.Functions.plus,cern.jet.math.Functions.abs);}  }
class C{  public void shutdown(){  mChannelImpl.shutdown();  mCacheStore.backup();  mConnected=false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isSequenceable(){  computeSequence();  return isSequenceable;}  }
class C{  public void testConstructorStringRadix8(){  String value="76356237071623450";  int radix=8;  byte rBytes[]={7,-50,-28,-8,-25,39,40};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  private NceMessage makeAIUPoll2ByteReply(int aiuNo){  NceMessage m=new NceMessage(2);  m.setBinary(true);  m.setReplyLen(2);  m.setElement(0,NceBinaryCommand.READ_AUI2_CMD);  m.setElement(1,aiuNo);  m.setTimeout(pollTimeout);  return m;}  }
class C{  protected void populateCommonParams(Object request,DelegateExecution execution){  EmrStepHelper stepHelper=emrStepHelperFactory.getStepHelper(request.getClass().getName());  stepHelper.setRequestStepName(request,getStepName(execution));  stepHelper.setRequestContinueOnError(request,getContinueOnError(execution));  stepHelper.setRequestNamespace(request,getNamespace(execution));  stepHelper.setRequestEmrClusterDefinitionName(request,getEmrClusterDefinitionName(execution));  stepHelper.setRequestEmrClusterName(request,getEmrClusterName(execution));  stepHelper.setRequestEmrClusterId(request,getEmrClusterId(execution));}  }
class C{  public double key(){  return _map._set[_index];}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=evalBool(stack.pop()) && Sage.WINDOWS_OS;  stack.getUIMgr().put(Java2DSageRenderer.OSD_RENDERING_PLUGIN_CLASS,x ? "sage.PVR350OSDRenderingPlugin" : "");  if (x) {    Sage.writeDwordValue(Sage.HKEY_LOCAL_MACHINE,"SYSTEM\\CurrentControlSet\\Services\\Globespan\\Parameters\\ivac15\\Driver","HcwTVOutColorBars",0);    stack.getUIMgr().getRootPanel().setAcceleratedDrawing(false,false);  } else   if (!stack.getUIMgr().getRootPanel().isAcceleratedDrawing() && stack.getUIMgr().getBoolean("ui/accelerated_rendering",true)) {    stack.getUIMgr().getRootPanel().setAcceleratedDrawing(true,false);  } else {    stack.getUIMgr().getRootPanel().reprepRenderer();  }  return null;}  }
class C{  public String consumeElementSelector(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny('|','_','-')))   pos++;  return queue.substring(start,pos);}  }
class C{  public FilterAlphaRed(CachableRed src){  super(src,src.getBounds(),src.getColorModel(),src.getSampleModel(),src.getTileGridXOffset(),src.getTileGridYOffset(),null);  props.put(ColorSpaceHintKey.PROPERTY_COLORSPACE,ColorSpaceHintKey.VALUE_COLORSPACE_ALPHA);}  }
class C{  public Builder deleteDisplayName(){  deleteFields.add("displayName");  return this;}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked){  return encodeBase64(binaryData,isChunked,false);}  }
class C{  private UiUtils(){  throw new AssertionError();}  }
class C{  public static MonitorConsoleStage attach(GraphManager gm,Long monitorRate,PipeConfig ringBufferMonitorConfig){  MonitorConsoleStage stage=new MonitorConsoleStage(gm,GraphManager.attachMonitorsToGraph(gm,monitorRate,ringBufferMonitorConfig));  GraphManager.addNota(gm,GraphManager.SCHEDULE_RATE,monitorRate,stage);  GraphManager.addNota(gm,GraphManager.MONITOR,"dummy",stage);  return stage;}  }
class C{  public ModelAttribute createModelAttributeFromString(EDataType eDataType,String initialValue){  ModelAttribute result=ModelAttribute.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  protected Position computeTimeLabelPosition(DrawContext dc){  Iterable<? extends LatLon> positions=this.polygon.getLocations(dc.getGlobe());  Sector boundingSector=Sector.boundingSector(positions);  LatLon nwCorner=new LatLon(boundingSector.getMaxLatitude(),boundingSector.getMinLongitude());  Angle minDistance=Angle.POS180;  LatLon nwMost=null;  for (  LatLon location : positions) {    Angle dist=LatLon.greatCircleDistance(location,nwCorner);    if (dist.compareTo(minDistance) < 0) {      minDistance=dist;      nwMost=location;    }  }  if (nwMost != null) {    return new Position(nwMost,0);  }  return null;}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  private void createVisualEditorTrack(){  if (isInEditMode()) {    addSeries(new SeriesItem.Builder(Color.argb(255,218,218,218)).setRange(0,100,100).setLineWidth(mDefaultLineWidth).build());    addSeries(new SeriesItem.Builder(Color.argb(255,255,64,64)).setRange(0,100,25).setLineWidth(mDefaultLineWidth).build());  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  return true;}  }
class C{  private void createAmpResultMethod(JavaClass jClass,Method method,int resultOffset){  String methodName=method.getName();  Class<?>[] parameterTypes=method.getParameterTypes();  Annotation[][] parameterAnns=method.getParameterAnnotations();  addMethod(method);  CodeWriterAttribute code=createMethodHeader(jClass,method);  code.setMaxLocals(1 + 2 * parameterTypes.length);  code.setMaxStack(10 + 2 * parameterTypes.length);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),"_messageFactory",MessageFactoryAmp.class);  int argLen=parameterTypes.length - 1;  code.pushObjectVar(getLength(parameterTypes,resultOffset) + 1);  long timeout=_defaultTimeout;  code.pushConstant(timeout);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),"_serviceRef",ServiceRefAmp.class);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),fieldName(method),MethodAmp.class);  partitionMethod(code,parameterTypes,parameterAnns);switch (argLen) {case 0:    pushRawParameters(code,parameterTypes,parameterAnns,1,0,argLen);  code.invokeInterface(MessageFactoryAmp.class,"queryResult",void.class,Result.class,long.class,ServiceRefAmp.class,MethodAmp.class);break;case 1:pushRawParameters(code,parameterTypes,parameterAnns,1,0,argLen + 1,resultOffset);code.invokeInterface(MessageFactoryAmp.class,"queryResult",void.class,Result.class,long.class,ServiceRefAmp.class,MethodAmp.class,Object.class);break;default :pushParameters(code,parameterTypes,parameterAnns,1,0,argLen + 1,resultOffset);code.invokeInterface(MessageFactoryAmp.class,"queryResult",void.class,Result.class,long.class,ServiceRefAmp.class,MethodAmp.class,Object[].class);break;}code.addReturn();code.close();}  }
class C{  private ConsistencyGroupLinkPolicy createLinkPolicy(RecoverPointCGCopyType copyType,String copyMode,String rpoType,Long rpoValue){  ConsistencyGroupLinkPolicy linkPolicy=new ConsistencyGroupLinkPolicy();  linkPolicy.setAdvancedPolicy(new LinkAdvancedPolicy());  linkPolicy.getAdvancedPolicy().setPerformLongInitialization(true);  linkPolicy.getAdvancedPolicy().setSnapshotGranularity(SnapshotGranularity.FIXED_PER_SECOND);  linkPolicy.setProtectionPolicy(new LinkProtectionPolicy());  linkPolicy.getProtectionPolicy().setBandwidthLimit(0.0);  linkPolicy.getProtectionPolicy().setCompression(WanCompression.NONE);  linkPolicy.getProtectionPolicy().setDeduplication(false);  linkPolicy.getProtectionPolicy().setMeasureLagToTargetRPA(true);  linkPolicy.getProtectionPolicy().setProtectionType(ProtectionMode.ASYNCHRONOUS);  linkPolicy.getProtectionPolicy().setReplicatingOverWAN(copyType.isRemote());  linkPolicy.getProtectionPolicy().setRpoPolicy(new RpoPolicy());  linkPolicy.getProtectionPolicy().getRpoPolicy().setAllowRegulation(false);  linkPolicy.getProtectionPolicy().getRpoPolicy().setMaximumAllowedLag(getQuantity(QuantityType.MICROSECONDS,25000000));  linkPolicy.getProtectionPolicy().getRpoPolicy().setMinimizationType(RpoMinimizationType.IRRELEVANT);  linkPolicy.getProtectionPolicy().setSyncReplicationLatencyThresholds(new SyncReplicationThreshold());  linkPolicy.getProtectionPolicy().getSyncReplicationLatencyThresholds().setResumeSyncReplicationBelow(getQuantity(QuantityType.MICROSECONDS,3000));  linkPolicy.getProtectionPolicy().getSyncReplicationLatencyThresholds().setStartAsyncReplicationAbove(getQuantity(QuantityType.MICROSECONDS,5000));  linkPolicy.getProtectionPolicy().getSyncReplicationLatencyThresholds().setThresholdEnabled(false);  linkPolicy.getProtectionPolicy().setSyncReplicationThroughputThresholds(new SyncReplicationThreshold());  linkPolicy.getProtectionPolicy().getSyncReplicationThroughputThresholds().setResumeSyncReplicationBelow(getQuantity(QuantityType.KB,35000));  linkPolicy.getProtectionPolicy().getSyncReplicationThroughputThresholds().setStartAsyncReplicationAbove(getQuantity(QuantityType.KB,45000));  linkPolicy.getProtectionPolicy().getSyncReplicationThroughputThresholds().setThresholdEnabled(false);  linkPolicy.getProtectionPolicy().setWeight(1);  LinkProtectionPolicy linkProtectionPolicy=linkPolicy.getProtectionPolicy();  if (copyMode != null) {    logger.info("Setting CG policy of: " + copyMode);    ProtectionMode protectionMode=ProtectionMode.valueOf(copyMode);    if (protectionMode == null) {      protectionMode=ProtectionMode.ASYNCHRONOUS;    }    linkProtectionPolicy.setProtectionType(protectionMode);  }  RpoPolicy rpoPolicy=linkProtectionPolicy.getRpoPolicy();  if (rpoValue != null && rpoType != null) {    logger.info("Setting CG RPO policy of: " + rpoValue.toString() + " "+ rpoType);    Quantity rpoQuantity=new Quantity();    QuantityType quantityType=QuantityType.valueOf(rpoType);    rpoQuantity.setType(quantityType);    rpoQuantity.setValue(rpoValue);    rpoPolicy.setMaximumAllowedLag(rpoQuantity);  } else   if ((rpoValue == null && rpoType != null) || (rpoValue != null && rpoType == null)) {    logger.warn("RPO Policy specified only one of value and type, both need to be specified for RPO policy to be applied.  Ignoring RPO policy.");  }  linkProtectionPolicy.setRpoPolicy(rpoPolicy);  linkPolicy.setProtectionPolicy(linkProtectionPolicy);  return linkPolicy;}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  @Override public synchronized boolean load(){  Xor<Void,T> oldData=data;  long oldModified=modified;  String oldKey=versionedKey;  try {    if (isOutOfDate()) {      String newVersionedKey=reader.getAsString(key).get();      val loaded=nonAtomicload(newVersionedKey);      data=Xor.primary((T)loaded.v2);      modified=loaded.v1;      versionedKey=newVersionedKey;    } else {      return false;    }  } catch (  Throwable e) {    data=oldData;    versionedKey=oldKey;    modified=oldModified;    logger.debug(e.getMessage(),e);    throw ExceptionSoftener.throwSoftenedException(e);  }  return true;}  }
class C{  public boolean isInterim(){  return interim;}  }
class C{  public int removeNondestructively(final int index){  if (index >= numObjs)   throw new ArrayIndexOutOfBoundsException(index);  int ret=objs[index];  if (index < numObjs - 1)   System.arraycopy(objs,index + 1,objs,index,numObjs - index - 1);  numObjs--;  return ret;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.PARAMETER___ANONYMOUS_PARAMETER_11:    return ((InternalEList<?>)getAnonymous_parameter_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void tearDown() throws Exception {  pageContext=null;  root=null;  super.tearDown();}  }
class C{  void writeBlock(int[] data,byte[] encoded,IndexOutput out) throws IOException {  if (isAllEqual(data)) {    out.writeByte((byte)ALL_VALUES_EQUAL);    out.writeVInt(data[0]);    return;  }  final int numBits=bitsRequired(data);  assert numBits > 0 && numBits <= 32 : numBits;  final PackedInts.Encoder encoder=encoders[numBits];  final int iters=iterations[numBits];  assert iters * encoder.byteValueCount() >= BLOCK_SIZE;  final int encodedSize=encodedSizes[numBits];  assert iters * encoder.byteBlockCount() >= encodedSize;  out.writeByte((byte)numBits);  encoder.encode(data,0,encoded,0,iters);  out.writeBytes(encoded,encodedSize);}  }
class C{  default Predicate<String> knownFieldNames(){  return null;}  }
class C{  public int refCount(){  return refCounter.refCount();}  }
class C{  public NotificationChain basicSetInitExpr(Expression newInitExpr,NotificationChain msgs){  Expression oldInitExpr=initExpr;  initExpr=newInitExpr;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FOR_STATEMENT__INIT_EXPR,oldInitExpr,newInitExpr);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void handleUpdateExtensions(Intent intent){  int reason=intent.getIntExtra(EXTRA_UPDATE_REASON,DashClockExtension.UPDATE_REASON_UNKNOWN);  String updateExtension=intent.getStringExtra(EXTRA_COMPONENT_NAME);  LOGD(TAG,String.format("handleUpdateExtensions [action=%s, reason=%d, extension=%s]",intent.getAction(),reason,updateExtension == null ? "" : updateExtension));  if (!TextUtils.isEmpty(updateExtension)) {    ComponentName cn=ComponentName.unflattenFromString(updateExtension);    mExtensionHost.execute(cn,ExtensionHost.UPDATE_OPERATIONS.get(reason),ExtensionHost.UPDATE_COLLAPSE_TIME_MILLIS,reason);  } else {    for (    ComponentName cn : mExtensionManager.getActiveExtensionNames()) {      mExtensionHost.execute(cn,ExtensionHost.UPDATE_OPERATIONS.get(reason),ExtensionHost.UPDATE_COLLAPSE_TIME_MILLIS,reason);    }  }}  }
class C{  public void endPutAll(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(putAllInProgressId,-1);  int endPutAllId;  if (timedOut) {    endPutAllId=putAllTimedOutId;  } else   if (failed) {    endPutAllId=putAllFailedId;  } else {    endPutAllId=putAllId;  }  this.stats.incInt(endPutAllId,1);  this.stats.incLong(putAllDurationId,duration);}  }
class C{  public BinaryFieldImpl createField(int typeId,String fieldName){  BinarySchemaRegistry schemaReg=schemaRegistry(typeId);  BinaryInternalMapper mapper=userTypeMapper(typeId);  int fieldId=mapper.fieldId(typeId,fieldName);  return new BinaryFieldImpl(typeId,schemaReg,fieldName,fieldId);}  }
class C{  private float handleReplacement(ReplacementSpan replacement,TextPaint wp,int start,int limit,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  float ret=0;  int textStart=mStart + start;  int textLimit=mStart + limit;  if (needWidth || (c != null && runIsRtl)) {    int previousTop=0;    int previousAscent=0;    int previousDescent=0;    int previousBottom=0;    int previousLeading=0;    boolean needUpdateMetrics=(fmi != null);    if (needUpdateMetrics) {      previousTop=fmi.top;      previousAscent=fmi.ascent;      previousDescent=fmi.descent;      previousBottom=fmi.bottom;      previousLeading=fmi.leading;    }    ret=replacement.getSize(wp,mText,textStart,textLimit,fmi);    if (needUpdateMetrics) {      updateMetrics(fmi,previousTop,previousAscent,previousDescent,previousBottom,previousLeading);    }  }  if (c != null) {    if (runIsRtl) {      x-=ret;    }    replacement.draw(c,mText,textStart,textLimit,x,top,y,bottom,wp);  }  return runIsRtl ? -ret : ret;}  }
class C{  public long nextID(){  return id.getAndIncrement();}  }
class C{  public static String decodeString(String source) throws URISyntaxException {  if (source == null) {    return source;  }  int i;  if ((i=source.indexOf(QUOTE_MARKER)) == -1) {    return source;  }  ByteArrayOutputStream decoded=new ByteArrayOutputStream();  try {    decoded.write(toBytes(source.substring(0,i)));    int len=source.length();    for (; i < len; i++) {      char ch=source.charAt(i);      if (ch == QUOTE_MARKER) {        if ((i + 2) >= len) {          ch=ENCODING_ERROR_MARKER;        } else {          try {            ch=(char)Integer.parseInt(source.substring(i + 1,i + 3),16);          } catch (          NumberFormatException nfe) {            throw new URISyntaxException(source,"Invalid escape value");          }          decoded.write(ch);        }        i+=2;      } else {        decoded.write(ch);      }    }    return new String(decoded.toByteArray(),"UTF8");  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  @Override public void close(){  super.close();}  }
class C{  public boolean isMonitoring(){  return m_Monitor.isMonitoring();}  }
class C{  private DataAlgorithmRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  private void clearRegistryForComponent(WXComponent component){  WXComponent removedComponent=mRegistry.remove(component.getDomObject().getRef());  if (removedComponent != null) {    removedComponent.removeAllEvent();    removedComponent.removeStickyStyle();  }  if (component instanceof WXVContainer) {    WXVContainer container=(WXVContainer)component;    int count=container.childCount();    for (int i=count - 1; i >= 0; --i) {      clearRegistryForComponent(container.getChild(i));    }  }}  }
class C{  private void syncDestination(State state){  FileOutputStream downloadedFileStream=null;  try {    downloadedFileStream=new FileOutputStream(state.mFilename,true);    downloadedFileStream.getFD().sync();  } catch (  FileNotFoundException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " not found: "+ ex);  }catch (  SyncFailedException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " sync failed: "+ ex);  }catch (  IOException ex) {    Log.w(Constants.TAG,"IOException trying to sync " + state.mFilename + ": "+ ex);  }catch (  RuntimeException ex) {    Log.w(Constants.TAG,"exception while syncing file: ",ex);  } finally {    if (downloadedFileStream != null) {      try {        downloadedFileStream.close();      } catch (      IOException ex) {        Log.w(Constants.TAG,"IOException while closing synced file: ",ex);      }catch (      RuntimeException ex) {        Log.w(Constants.TAG,"exception while closing file: ",ex);      }    }  }}  }
class C{  protected AbstractSiblingSelector(short type,Selector sel,SimpleSelector simple){  nodeType=type;  selector=sel;  simpleSelector=simple;}  }
class C{  public static boolean hasResponseBody(int responseCode){  return !(100 <= responseCode && responseCode < 200) && responseCode != 204 && responseCode != 205 && !(300 <= responseCode && responseCode < 400);}  }
class C{  public void updateNodeProperty(GraphNode node,NodeDisplayProperty property){  glPanel.setNodeColor(node,property.getColor());  glPanel.setNodeVisible(node,property.isVisible());  Size nodeSize=property.getSize();  if (nodeSize != null) {    NodePreferencesIds.NodeSize sizeRepresentation=NodePreferencesIds.NodeSize.convertSizeRepresentation(nodeSize);    glPanel.setNodeSize(node,sizeRepresentation);  }}  }
class C{  public void prepareCommit(String transactionName){  if (transaction != null) {    database.prepareCommit(this,transactionName);  }  if (containsUncommitted()) {    database.prepareCommit(this,transactionName);  }  currentTransactionName=transactionName;}  }
class C{  private boolean createOrder(WebUser wu,WebBasket wb){  m_order=new MOrder(m_ctx,0,null);  log.fine("AD_Client_ID=" + m_order.getAD_Client_ID() + ",AD_Org_ID="+ m_order.getAD_Org_ID()+ " - "+ m_order);  m_order.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_Prepay);  m_order.setPaymentRule(MOrder.PAYMENTRULE_CreditCard);  m_order.setDeliveryRule(MOrder.DELIVERYRULE_AfterReceipt);  m_order.setInvoiceRule(MOrder.INVOICERULE_Immediate);  m_order.setIsSelfService(true);  if (wb.getM_PriceList_ID() > 0)   m_order.setM_PriceList_ID(wb.getM_PriceList_ID());  if (wb.getSalesRep_ID() != 0)   m_order.setSalesRep_ID(wb.getSalesRep_ID());  m_order.setC_BPartner_ID(wu.getC_BPartner_ID());  m_order.setC_BPartner_Location_ID(wu.getC_BPartner_Location_ID());  m_order.setAD_User_ID(wu.getAD_User_ID());  m_order.setSendEMail(true);  m_order.setDocAction(MOrder.DOCACTION_Prepare);  m_order.saveEx();  log.fine("ID=" + m_order.getC_Order_ID() + ", DocNo="+ m_order.getDocumentNo());  ArrayList<WebBasketLine> lines=wb.getLines();  for (int i=0; i < lines.size(); i++) {    WebBasketLine wbl=lines.get(i);    MOrderLine ol=new MOrderLine(m_order);    ol.setM_Product_ID(wbl.getM_Product_ID(),true);    ol.setQty(wbl.getQuantity());    ol.setPrice();    ol.setPrice(wbl.getPrice());    ol.setTax();    ol.saveEx();  }  boolean ok=m_order.processIt(MOrder.DOCACTION_Prepare);  m_order.saveEx();  if (!wu.isCustomer()) {    wu.setIsCustomer(true);    wu.save();  }  BigDecimal amt=m_order.getGrandTotal();  log.info("Amt=" + amt);  return ok;}  }
class C{  public BlankPetScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.240 -0500",hash_original_method="929DA853C72DCA36C1C2D5AEB0F0EEC1",hash_generated_method="4963A10BE9A7760ABAFB8261B92A7C9A") public void drawPoints(float[] pts,Paint paint){  drawPoints(pts,0,pts.length,paint);}  }
class C{  protected void sequence_ArgumentDefinition(ISerializationContext context,ArgumentDefinition semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void addInput(TransformTreeNode node,PInput input){  for (  PValue i : input.expand()) {    TransformTreeNode producer=producingTransformNode.get(i);    checkState(producer != null,"Producer unknown for input: %s",i);    producer.finishSpecifying();    node.addInputProducer(i,producer);  }}  }
class C{  @SuppressWarnings("unchecked") public void mouseDragged(MouseEvent e){  if (checkModifiers(e)) {    VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();    if (createMode == Creating.EDGE) {      edgeSupport.midEdgeCreate(vv,e.getPoint());    } else     if (createMode == Creating.VERTEX) {      vertexSupport.midVertexCreate(vv,e.getPoint());    }  }}  }
class C{  protected void logErrorDisconnect(OFErrorMsg error){  logError(error);  channel.disconnect();}  }
class C{  public boolean isBodySizeExceeded(){  return _bodySizeExceeded;}  }
class C{  public boolean isCanceled(){  if (pane == null)   return false;  Object v=pane.getValue();  return ((v != null) && (cancelOption.length == 1) && (v.equals(cancelOption[0])));}  }
class C{  public void downloadImageToStorage(String storageFile,SuccessCallback<Image> onSuccess){  downloadImageToStorage(storageFile,onSuccess,new CallbackAdapter<Image>(),true);}  }
class C{  public boolean obsolete(){  int[] stamp=new int[1];  boolean undeployed=usage.get(stamp);  return undeployed && stamp[0] == 0;}  }
class C{  public boolean isCoinBase(){  return outpoint.getHash().equals(Sha256Hash.ZERO_HASH) && (outpoint.getIndex() & 0xFFFFFFFFL) == 0xFFFFFFFFL;}  }
class C{  @LargeTest public void testThumbnailWithWidth() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int atTime=1000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=10;  final int outHeight=mediaVideoItem.getHeight();  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public synchronized void remove(int index){  super.remove(index);  double removedValue=mValue.remove(index);  if (removedValue == mMinValue || removedValue == mMaxValue) {    initRange();  }}  }
class C{  public PcMaxLocal(IndependenceTest independenceTest){  this(independenceTest,null);}  }
class C{  public GDSException(String message){  super(message);  this.type=ISCConstants.isc_arg_string;  this.intParam=0;  this.strParam=null;}  }
class C{  public void addLine(float lat_1,float lon_1,float lat_2,float lon_2,int lineType,int nsegs,LinkProperties properties) throws IOException {  LinkLine.write(lat_1,lon_1,lat_2,lon_2,lineType,nsegs,properties,link.dos);}  }
class C{  public final CC push(){  return pushX().pushY();}  }
class C{  public RangeQueryBuilder lt(Object to){  this.to=to;  this.includeUpper=false;  return this;}  }
class C{  public Crew(int size){  this("Unnamed",1,4,5);}  }
class C{  @Override protected Void doInBackground(Void... notUsed){  MilStd2525.initializeRenderer(getApplicationContext());  return null;}  }
class C{  @Override public void bindAppearEvent(WXComponent component){  setWatch(AppearanceHelper.APPEAR,component,true);}  }
class C{  public DateTime withMillis(long newMillis){  return (newMillis == getMillis() ? this : new DateTime(newMillis,getChronology()));}  }
class C{  public static Intent makeIntent(List<AcronymExpansion> results){  return new Intent(ACTION_DISPLAY_ACRONYM_EXPANSIONS).putParcelableArrayListExtra(KEY_ACRONYM_DATA,ParcelableAcronymExpansion.getExpansions(results));}  }
class C{  protected void createEmptySiteResource(String url){  Site site=getWebResourceDataService().createSite(url);  getAudit().setSubject(site);  getWebResourceDataService().saveOrUpdate(site);}  }
class C{  @Override public boolean isResetted(){  return (x == 0.0f && y == 0.0f && z == 0.0f);}  }
class C{  public void initializeScreen(){  mEditTextUsernameCreate=(EditText)findViewById(R.id.edit_text_username_create);  mEditTextEmailCreate=(EditText)findViewById(R.id.edit_text_email_create);  LinearLayout linearLayoutCreateAccountActivity=(LinearLayout)findViewById(R.id.linear_layout_create_account_activity);  initializeBackground(linearLayoutCreateAccountActivity);  mAuthProgressDialog=new ProgressDialog(this);  mAuthProgressDialog.setTitle(getResources().getString(R.string.progress_dialog_loading));  mAuthProgressDialog.setMessage(getResources().getString(R.string.progress_dialog_check_inbox));  mAuthProgressDialog.setCancelable(false);}  }
class C{  public CategorySeries(String title){  mTitle=title;}  }
class C{  public Point2D forward(double lat,double lon,Point2D p,boolean isRadian){  if (isRadian) {    lat=Math.toDegrees(normalizeLatitude(lat));    lon=Math.toDegrees(ProjMath.wrapLongitude(lon - cLonRad));  } else {    lat=normalizeLatitudeDeg(lat);    lon=wrapLongitudeDeg(lon - cLon);  }  double x=wx + (lon * ppd);  double y=hy - ((lat - cLat) * ppd);  p.setLocation(x,y);  return p;}  }
class C{  protected StringBuffer createServerUriStringBuffer(String scheme,String server,int port,String uri){  StringBuffer serverUri=createServerStringBuffer(scheme,server,port);  serverUri.append(uri);  return serverUri;}  }
class C{  private void incrementLmCounts(int[] languageCounts,List<TransitionState> fullViterbiStateSeq,Indexer<String> charIndexer){  int spaceCharIndex=charIndexer.getIndex(" ");  for (  TransitionState ts : fullViterbiStateSeq) {    int currLanguage=ts.getLanguageIndex();    if (currLanguage >= 0 && ts.getType() == TransitionStateType.TMPL && ts.getLmCharIndex() != spaceCharIndex) {      languageCounts[currLanguage]+=1;    }  }}  }
class C{  public static void fill(long[][][] matrix,long value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    int cols=matrix[r].length;    for (int c=0; c < cols; c++) {      int height=matrix[r][c].length;      for (int h=0; h < height; h++) {        matrix[r][c][h]=value;      }    }  }}  }
class C{  @Override public MapStream<K,V> unordered(){  inner=inner.unordered();  return this;}  }
class C{  void addSubregion(String name,RegionCreation region) throws RegionExistsException {  if (this.subregions.containsKey(name)) {    RegionCreation existing=(RegionCreation)this.subregions.get(name);    throw new RegionExistsException(existing);  } else {    this.subregions.put(name,region);  }}  }
class C{  protected static User parseUser(String userAsString){  if (userAsString.isEmpty()) {    throw new ContainerException("User property has empty value.");  }  User user=new User();  StringTokenizer fieldTokens=new StringTokenizer(userAsString,":",true);  try {    String userName=fieldTokens.nextToken().trim();    user.setName(userName);    fieldTokens.nextToken();    String password=fieldTokens.nextToken();    if (":".equals(password)) {      user.setPassword("");    } else {      user.setPassword(password);      if (fieldTokens.hasMoreTokens()) {        fieldTokens.nextToken();      }    }    if (fieldTokens.hasMoreTokens()) {      String roles=fieldTokens.nextToken();      if (!":".equals(roles)) {        user.addRoles(parseRoles(roles));      } else {        throw new ContainerException("Invalid format for [" + userAsString + "]");      }    }  } catch (  NoSuchElementException exception) {    throw new ContainerException("Invalid format for [" + userAsString + "]");  }  if (fieldTokens.hasMoreTokens()) {    throw new ContainerException("Invalid format for [" + userAsString + "]");  }  return user;}  }
class C{  private final void sendNotification(){  if (localLOGV)   Slog.i(TAG,"Sending low memory notification");  EventLog.writeEvent(EventLogTags.LOW_STORAGE,mFreeMem);  Intent lowMemIntent=new Intent(Environment.isExternalStorageEmulated() ? Settings.ACTION_INTERNAL_STORAGE_SETTINGS : Intent.ACTION_MANAGE_PACKAGE_STORAGE);  lowMemIntent.putExtra("memory",mFreeMem);  lowMemIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  NotificationManager mNotificationMgr=(NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE);  CharSequence title=mContext.getText(com.android.internal.R.string.low_internal_storage_view_title);  CharSequence details=mContext.getText(com.android.internal.R.string.low_internal_storage_view_text);  PendingIntent intent=PendingIntent.getActivityAsUser(mContext,0,lowMemIntent,0,null,UserHandle.CURRENT);  Notification notification=new Notification();  notification.icon=com.android.internal.R.drawable.stat_notify_disk_full;  notification.tickerText=title;  notification.flags|=Notification.FLAG_NO_CLEAR;  notification.setLatestEventInfo(getUiContext(),title,details,intent);  mNotificationMgr.notifyAsUser(null,LOW_MEMORY_NOTIFICATION_ID,notification,UserHandle.ALL);  mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL);}  }
class C{  @Override public boolean equals(final Object obj){  if (!(obj instanceof HgVersion)) {    return false;  }  return compareTo((HgVersion)obj) == 0;}  }
class C{  public Sequence findSequence(String sequenceName){  return sequences.get(sequenceName);}  }
class C{  private static void checkClientSequences(Properties ctx,SvrProcess sp){  String trxName=null;  if (sp != null)   trxName=sp.get_TrxName();  Trx trx=Trx.get(trxName,false);  trx.commit();  MClient[] clients=MClient.getAll(ctx);  for (int i=0; i < clients.length; i++) {    MClient client=clients[i];    if (!client.isActive())     continue;    MSequence.checkClientSequences(ctx,client.getAD_Client_ID(),trxName);  }}  }
class C{  public static boolean matchesUrl(final HttpServletRequest request,final String path){  final Pattern pattern=Pattern.compile(".*" + path + "[/]?",Pattern.CASE_INSENSITIVE);  if (request.getRequestURI() != null) {    final Matcher m=pattern.matcher(request.getRequestURI());    return m.matches();  }  return false;}  }
class C{  public void testEncodeDecodeRoundsDown() throws Exception {  int iters=atLeast(1000);  for (int iter=0; iter < iters; iter++) {    final double latBase=GeoTestUtil.nextLatitude();    final double lonBase=GeoTestUtil.nextLongitude();    double lat=latBase;    double lon=lonBase;    for (int i=0; i < 1000; i++) {      lat=Math.min(90,Math.nextUp(lat));      lon=Math.min(180,Math.nextUp(lon));      GeoPoint point=new GeoPoint(PlanetModel.WGS84,toRadians(lat),toRadians(lon));      GeoPoint pointEnc=new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));      assertTrue(pointEnc.x <= point.x);      assertTrue(pointEnc.y <= point.y);      assertTrue(pointEnc.z <= point.z);    }    lat=latBase;    lon=lonBase;    for (int i=0; i < 1000; i++) {      lat=Math.max(-90,Math.nextDown(lat));      lon=Math.max(-180,Math.nextDown(lon));      GeoPoint point=new GeoPoint(PlanetModel.WGS84,toRadians(lat),toRadians(lon));      GeoPoint pointEnc=new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));      assertTrue(pointEnc.x <= point.x);      assertTrue(pointEnc.y <= point.y);      assertTrue(pointEnc.z <= point.z);    }  }}  }
class C{  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final List<GeoPolygon> holes,final double leniencyValue){  final List<GeoPoint> firstFilteredPointList=filterPoints(pointList);  if (firstFilteredPointList == null) {    return null;  }  final List<GeoPoint> filteredPointList=filterEdges(firstFilteredPointList,leniencyValue);  if (filteredPointList == null) {    return null;  }  final Random generator=new Random(1234);  for (int counter=0; counter < 1000000; counter++) {    final GeoPoint pole=pickPole(generator,planetModel,filteredPointList);    final Boolean isPoleInside=isInsidePolygon(pole,filteredPointList);    if (isPoleInside != null) {      return generateGeoPolygon(planetModel,filteredPointList,holes,pole,isPoleInside);    }  }  throw new IllegalArgumentException("cannot find a point that is inside the polygon " + filteredPointList);}  }
class C{  public void xMidYMin() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMIN;}  }
class C{  void addFolder(Folder folder) throws RepositoryException {  acquireWriteLock();  try {    folders.add(folder);  }  finally {    releaseWriteLock();  }}  }
class C{  protected InfoModelAttributeSourceImpl(){  super();}  }
class C{  public void updateSelectedUnit(){  if (getSubscriptionUnitCtrl().isUnitSelected()) {    model.getSubscription().setUnitKey(getSubscriptionUnitCtrl().getModel().getSelectedUnitId());    model.getSubscription().setUnitName(getSubscriptionUnitCtrl().getModel().getSelectedUnitName());  } else {    model.getSubscription().setUnitKey(0);    model.getSubscription().setUnitName("");  }  model.setShowOwnerWarning(shouldOwnerWarningBeShown());}  }
class C{  public static Object valueAtIndex(GeoTimeSerie gts,int idx){  if (idx >= gts.values) {    return null;  }  if (TYPE.LONG == gts.type) {    return gts.longValues[idx];  } else   if (TYPE.DOUBLE == gts.type) {    return gts.doubleValues[idx];  } else   if (TYPE.STRING == gts.type) {    return gts.stringValues[idx];  } else   if (TYPE.BOOLEAN == gts.type) {    return gts.booleanValues.get(idx);  } else {    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.663 -0500",hash_original_method="3C5B2D25E22696E048ED7556D298C58C",hash_generated_method="950BA299B573064452A86E0E53D88336") @Override protected URLConnection openConnection(URL u) throws IOException {  return new FtpURLConnection(u);}  }
class C{  public T caseParameterList_(ParameterList_ object){  return null;}  }
class C{  public boolean useExifOrientation(){  return useExifOrientation;}  }
class C{  public static int EUCLEAN(){  return 117;}  }
class C{  private SubjectConfirmation createSubjectConfirmation(Date endTime,Confirmation confirmation,TokenDelegate lastDelegate){  assert endTime != null;  assert confirmation != null;  SubjectConfirmation conf=new SubjectConfirmationBuilder().buildObject();  SubjectConfirmationData confData;  if (confirmation.getType().equals(ConfirmationType.BEARER)) {    conf.setMethod(SubjectConfirmation.METHOD_BEARER);    confData=createSubjectConfirmationData(confirmation,endTime);    log.debug("Created subject confirmation - method: BEARER");  } else {    conf.setMethod(SubjectConfirmation.METHOD_HOLDER_OF_KEY);    confData=createHoKSubjectConfData(confirmation);    log.debug("Created subject confirmation - method: HoK");  }  conf.setSubjectConfirmationData(confData);  if (lastDelegate != null) {    conf.setNameID(createUPNNameId(lastDelegate.getSubject()));  }  return conf;}  }
class C{  public void addExceptionContext(ExceptionContext exceptionContext){  ExceptionMessage mostRecent;  mostRecent=m_exceptionMessages.lastElement();  if (null != mostRecent) {    mostRecent.addExceptionContext(exceptionContext);  } else {    m_exceptionContexts.addElement(exceptionContext);  }  if (null != m_nestedException) {    Enumeration<?> enumeration;    enumeration=m_nestedException.getAllExceptionMessages();    ExceptionMessage exceptionMessage;    while (enumeration.hasMoreElements()) {      exceptionMessage=(ExceptionMessage)enumeration.nextElement();      exceptionMessage.addExceptionContext(exceptionContext);    }  }}  }
class C{  public boolean isZeroBalance(){  return getBalance().signum() == 0;}  }
class C{  private void validateJdbcStatements(List<JdbcStatement> jdbcStatements){  Assert.notNull(jdbcStatements,"JDBC statements are required");  Assert.isTrue(!jdbcStatements.isEmpty(),"JDBC statements are required");  Integer jdbcMaxStatements=configurationHelper.getProperty(ConfigurationValue.JDBC_MAX_STATEMENTS,Integer.class);  if (jdbcMaxStatements != null) {    Assert.isTrue(jdbcStatements.size() <= jdbcMaxStatements,"The number of JDBC statements exceeded the maximum allowed " + jdbcMaxStatements + ".");  }  for (int i=0; i < jdbcStatements.size(); i++) {    JdbcStatement jdbcStatement=jdbcStatements.get(i);    validateJdbcStatement(jdbcStatement,i);  }}  }
class C{  public synchronized void log(Level msgLevel,String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(msgLevel,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public DoubleMatrix[] jblas_symmetricGeneralizedEigenvectors(double[][] B){  return org.jblas.Eigen.symmetricGeneralizedEigenvectors(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  public Byte read(String value){  return Byte.valueOf(value);}  }
class C{  private static InputStream openSystemFile(String filename) throws FileNotFoundException {  try {    return new FileInputStream(filename);  } catch (  FileNotFoundException e) {    String resname=filename.replace(File.separatorChar,'/');    InputStream result=ClassLoader.getSystemResourceAsStream(resname);    if (result == null) {      throw e;    }    return result;  }}  }
class C{  public void clearModified(){  setModified(false);}  }
class C{  private void calculateSteps(Tree tree,NodeRef node,PatternList patterns){  if (!tree.isExternal(node)) {    for (int i=0; i < tree.getChildCount(node); i++) {      calculateSteps(tree,tree.getChild(node,i),patterns);    }    if (compressStates) {      for (int i=0; i < patterns.getPatternCount(); i++) {        double[] Sc=nodeScores[tree.getChild(node,0).getNumber()][i];        double[] Sa=nodeScores[node.getNumber()][i];        int[] set=stateSets[i];        for (int k=0; k < set.length; k++) {          Sa[set[k]]=minCost(k,Sc,costMatrix,set);        }        for (int j=1; j < tree.getChildCount(node); j++) {          Sc=nodeScores[tree.getChild(node,j).getNumber()][i];          for (int k=0; k < set.length; k++) {            Sa[set[k]]+=minCost(k,Sc,costMatrix,set);          }        }      }    } else {      for (int i=0; i < patterns.getPatternCount(); i++) {        double[] Sc=nodeScores[tree.getChild(node,0).getNumber()][i];        double[] Sa=nodeScores[node.getNumber()][i];        for (int k=0; k < stateCount; k++) {          Sa[k]=minCost(k,Sc,costMatrix);        }        for (int j=1; j < tree.getChildCount(node); j++) {          Sc=nodeScores[tree.getChild(node,j).getNumber()][i];          for (int k=0; k < stateCount; k++) {            Sa[k]+=minCost(k,Sc,costMatrix);          }        }      }    }  }}  }
class C{  public Vertex evaluateEQUALS(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  Boolean matches=left.matches(right,variables);  if (matches == null) {    matches=false;  }  if (matches) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  public java.math.BigDecimal readBigDecimal() throws SQLException {  return (java.math.BigDecimal)getNextAttribute();}  }
class C{  public static String removeVowels(String s){  String result=s;  result=replaceAll(s,"a","");  result=replaceAll(s,"e","");  result=replaceAll(s,"i","");  result=replaceAll(s,"o","");  result=replaceAll(s,"u","");  result=replaceAll(s,"A","");  result=replaceAll(s,"E","");  result=replaceAll(s,"I","");  result=replaceAll(s,"O","");  result=replaceAll(s,"U","");  return result;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public void outputReloaded(){}  }
class C{  private static Object[] createFullArgs(Geometry g,Object[] arg){  int fullArgLen=1;  if (arg != null)   fullArgLen=arg.length + 1;  Object[] fullArg=new Object[fullArgLen];  fullArg[0]=g;  for (int i=1; i < fullArgLen; i++) {    fullArg[i]=arg[i - 1];  }  return fullArg;}  }
class C{  public void layout(Container container){  Info[] infos=getInfo(container);  Rectangle2D bounds=container.getBounds();  Insets2D insets=container.getInsets();  if (insets == null) {    insets=new Insets2D.Double();  }  Integer lastCol=infos[COLS].size - 1;  int compIndex=0;  double x=bounds.getX() + insets.getLeft();  double y=bounds.getY() + insets.getTop();  for (  Drawable component : container) {    Integer col=compIndex % infos[COLS].size;    Integer row=compIndex / infos[COLS].size;    double colWidth=infos[COLS].sizes.get(col);    double rowHeight=infos[ROWS].sizes.get(row);    double w=Math.max(infos[COLS].sizeMean - infos[COLS].unsizeableSpace,colWidth);    double h=Math.max(infos[ROWS].sizeMean - infos[ROWS].unsizeableSpace,rowHeight);    if (component != null) {      component.setBounds(x,y,w,h);    }    if (col.equals(lastCol)) {      x=bounds.getX() + insets.getLeft();      y+=h + getGapY();    } else {      x+=w + getGapX();    }    compIndex++;  }}  }
class C{  @Override public void addBottomCount(CarbonDimensionLevel dimensionLevel,CarbonMeasure measure,int count){  topCounts.add(new TopCount(dimensionLevel,measure,count,TopCount.TopNType.BOTTOM));}  }
class C{  private static void applyOverrides(){  InputStream stream=getContentTypesPropertiesStream();  if (stream == null) {    return;  }  try {    try {      Properties overrides=new Properties();      overrides.load(stream);      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {        String extension=(String)entry.getKey();        String mimeType=(String)entry.getValue();        add(mimeType,extension);      }    }  finally {      stream.close();    }  } catch (  IOException ignored) {  }}  }
class C{  protected boolean singleUse(){  return false;}  }
class C{  public void normalize(){  float m=mag();  if (m != 0 && m != 1) {    div(m);  }}  }
class C{  public MultiUnion createMultiUnion(){  return new MultiUnion();}  }
class C{  public Seconds negated(){  return Seconds.seconds(FieldUtils.safeNegate(getValue()));}  }
class C{  static public void assertFalse(boolean condition){  assertFalse(null,condition);}  }
class C{  public static double powQuick(final double value,final double power){  if (USE_JDK_MATH) {    return Math.pow(value,power);  }  return exp(power * logQuick(value));}  }
class C{  public void addIssuerSerial(String X509IssuerName,String X509SerialNumber){  this.add(new XMLX509IssuerSerial(this.doc,X509IssuerName,X509SerialNumber));}  }
class C{  public static void assertTrue(String message,boolean condition){  if (!condition) {    fail(message);  }}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  if (bufferedBlockCipher != null) {    byte[] buf=new byte[bufferedBlockCipher.getOutputSize(len)];    int outLen=bufferedBlockCipher.processBytes(b,off,len,buf,0);    if (outLen != 0) {      out.write(buf,0,outLen);    }  } else {    byte[] buf=new byte[len];    streamCipher.processBytes(b,off,len,buf,0);    out.write(buf,0,len);  }}  }
class C{  public OfflineSQLiteOpenHelper(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);}  }
class C{  private Collection<EvictableEntry<Integer,Integer>> internalQueue(EvictionPolicy<?,?> plc){  if (plc instanceof FifoEvictionPolicy) {    FifoEvictionPolicy<Integer,Integer> plc0=(FifoEvictionPolicy<Integer,Integer>)plc;    return plc0.queue();  } else   if (plc instanceof LruEvictionPolicy) {    LruEvictionPolicy<Integer,Integer> plc0=(LruEvictionPolicy<Integer,Integer>)plc;    return plc0.queue();  } else   if (plc instanceof SortedEvictionPolicy) {    SortedEvictionPolicy<Integer,Integer> plc0=(SortedEvictionPolicy<Integer,Integer>)plc;    return plc0.queue();  }  assert false : "Unexpected policy type: " + plc.getClass().getName();  return Collections.emptyList();}  }
class C{  @Override public int hashCode(){  return (getName().hashCode() ^ getActions().hashCode());}  }
class C{  public static boolean validateIpv4Addr(String value){  try {    return validateIpAddr(value) && InetAddresses.forString(value) instanceof Inet4Address;  } catch (  Exception e) {    return false;  }}  }
class C{  public boolean gatherElement(String localName,Attributes atts){  return true;}  }
class C{  public static ResolveUserTokenE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ResolveUserTokenE object=new ResolveUserTokenE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","resolveUserToken").equals(reader.getName())) {          object.setResolveUserToken(ResolveUserToken.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public String signature(){  return signature;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static MigrationAttribute valueOfAttribute(String name){  MigrationAttribute[] migrationAtts=values();  for (int i=0; i < migrationAtts.length; i++) {    if (migrationAtts[i].getAttributeName().equals(name)) {      return migrationAtts[i];    }  }  return null;}  }
class C{  public Truss popSpan(){  Span span=stack.removeLast();  builder.setSpan(span.span,span.start,builder.length(),SPAN_INCLUSIVE_EXCLUSIVE);  return this;}  }
class C{  public DTLZ(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public SmbFile(String context,String name,NtlmPasswordAuthentication auth) throws MalformedURLException {  this(new URL(new URL(null,context,Handler.SMB_HANDLER),name,Handler.SMB_HANDLER),auth);}  }
class C{  private void onColumnSync(){  int syncPosition=Math.min(mSyncPosition,getCount() - 1);  SparseArray<Double> positionHeightRatios=new SparseArray<Double>(syncPosition);  for (int pos=0; pos < syncPosition; pos++) {    final GridItemRecord rec=mPositionData.get(pos);    if (rec == null)     break;    Log.d(TAG,"onColumnSync:" + pos + " ratio:"+ rec.heightRatio);    positionHeightRatios.append(pos,rec.heightRatio);  }  mPositionData.clear();  if (DBG)   Log.d(TAG,"onColumnSync column width:" + mColumnWidth);  for (int pos=0; pos < syncPosition; pos++) {    final GridItemRecord rec=getOrCreateRecord(pos);    final double heightRatio=positionHeightRatios.get(pos);    final int height=(int)(mColumnWidth * heightRatio);    rec.heightRatio=heightRatio;    int top;    int bottom;    if (isHeaderOrFooter(pos)) {      top=getLowestPositionedBottom();      bottom=top + height;      for (int i=0; i < mColumnCount; i++) {        mColumnTops[i]=top;        mColumnBottoms[i]=bottom;      }    } else {      final int column=getHighestPositionedBottomColumn();      top=mColumnBottoms[column];      bottom=top + height + getChildTopMargin(pos)+ getChildBottomMargin();      mColumnTops[column]=top;      mColumnBottoms[column]=bottom;      rec.column=column;    }    if (DBG)     Log.d(TAG,"onColumnSync position:" + pos + " top:"+ top+ " bottom:"+ bottom+ " height:"+ height+ " heightRatio:"+ heightRatio);  }  final int syncColumn=getHighestPositionedBottomColumn();  setPositionColumn(syncPosition,syncColumn);  int syncToBottom=mColumnBottoms[syncColumn];  int offset=-syncToBottom + mSpecificTop;  offsetAllColumnsTopAndBottom(offset);  mDistanceToTop=-syncToBottom;  System.arraycopy(mColumnBottoms,0,mColumnTops,0,mColumnCount);}  }
class C{  @Override public int compare(byte[] bterm1,int offset1,int length1,byte[] bterm2,int offset2,int length2){  DataInputStream b1S=new DataInputStream(new ByteArrayInputStream(bterm1,offset1,length1));  DataInputStream b2S=new DataInputStream(new ByteArrayInputStream(bterm2,offset2,length2));  try {    String t1;    String t2;    if (USE_HADOOP_TEXT) {      t1=Text.readString(b1S);      t2=Text.readString(b2S);    } else {      t1=b1S.readUTF();      t2=b2S.readUTF();    }    int result=t1.compareTo(t2);    if (result != 0)     return result;    int i1=WritableUtils.readVInt(b1S);    int i2=WritableUtils.readVInt(b2S);    if (i1 != i2)     return i1 - i2;    i1=WritableUtils.readVInt(b1S);    i2=WritableUtils.readVInt(b2S);    return i1 - i2;  } catch (  IOException e) {    System.err.println("ERROR during raw comparision of term objects, unable to read input streams.");    e.printStackTrace();    return 0;  }}  }
class C{  public Builder actionDismissCallback(SnackbarActionDismissCallback callback){  actionDismissCallback=callback;  return this;}  }
class C{  private static int calculateInSampleSize(BitmapFactory.Options options,int reqWidth,int reqHeight){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    final int halfHeight=height / 2;    final int halfWidth=width / 2;    while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public static char[] copyOfRange(char[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  char[] copy=new char[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public boolean hasInvalidCharacters(){  return this.characterClasses.contains(CharacterClass.INVALID);}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (X.getColumnDimension() != D)   throw new IllegalArgumentException("The number of dimensions specified on the covariance function " + D + " must agree with the size of the input vector"+ X.getColumnDimension());  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  final Matrix ell=exp(loghyper.getMatrix(0,D - 1,0,0));  Matrix diag=new Matrix(D,D);  for (int i=0; i < D; i++)   diag.set(i,i,1 / ell.get(i,0));  X=X.times(diag);  Matrix tmp=X.getMatrix(0,X.getRowDimension() - 1,index,index);  return tmp.times(tmp.transpose()).times(-2);}  }
class C{  public boolean isSmallestMinX(final PlanetModel planetModel){  if (minX == null)   return false;  return minX - planetModel.getMinimumXValue() < Vector.MINIMUM_RESOLUTION;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static Polygon[] toPolygonArray(Collection polygons){  Polygon[] polygonArray=new Polygon[polygons.size()];  return (Polygon[])polygons.toArray(polygonArray);}  }
class C{  public void init(){  numLabels=model.data.numLabels();  humanLabelCounts=new int[numLabels];  modelLabelCounts=new int[numLabels];  humanModelCounts=new int[numLabels];}  }
class C{  public synchronized Data findData(Data data){  return data;}  }
class C{  public void configureOption1(String value){  setOptionState(option1Name,value);  if (value.equals(validOptions1[0])) {    version=1;  } else   if (value.equals(validOptions1[1])) {    version=2;  }}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("DB_Oracle[");  sb.append(m_connectionURL);  try {    StringBuffer logBuffer=new StringBuffer(50);    logBuffer.append("# Connections: ").append(m_ds.getNumConnections());    logBuffer.append(" , # Busy Connections: ").append(m_ds.getNumBusyConnections());    logBuffer.append(" , # Idle Connections: ").append(m_ds.getNumIdleConnections());    logBuffer.append(" , # Orphaned Connections: ").append(m_ds.getNumUnclosedOrphanedConnections());  } catch (  Exception e) {    sb.append("=").append(e.getLocalizedMessage());  }  sb.append("]");  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.842 -0500",hash_original_method="2C75F11DE6E05BFA889C5ACE2D8E3910",hash_generated_method="719D35B248AF1706517F971F9B3687C2") public String encodeBody(){  StringBuffer retval=new StringBuffer(LESS_THAN).append(errorInfo.toString()).append(GREATER_THAN);  if (!parameters.isEmpty()) {    retval.append(SEMICOLON).append(parameters.encode());  }  return retval.toString();}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,float halfDiffX,int seriesNr,int seriesIndex,Paint paint){  int scale=mDataset.getSeriesAt(seriesIndex).getScaleNumber();  if (mType == Type.STACKED) {    drawBar(canvas,xMin - halfDiffX,yMax,xMax + halfDiffX,yMin,scale,seriesIndex,paint);  } else {    float startX=xMin - seriesNr * halfDiffX + seriesIndex * 2 * halfDiffX;    drawBar(canvas,startX,yMax,startX + 2 * halfDiffX,yMin,scale,seriesIndex,paint);  }}  }
class C{  static synchronized void ensureCapacity(int id){  if (id >= memberOffsets.length) {    int oldLen=memberOffsets.length;    int[] tmp1=MemoryManager.newContiguousIntArray((oldLen * 3) / 2);    System.arraycopy(memberOffsets,0,tmp1,0,oldLen);    if (NEEDS_DYNAMIC_LINK != 0) {      java.util.Arrays.fill(tmp1,oldLen,tmp1.length,NEEDS_DYNAMIC_LINK);    }    Magic.sync();    memberOffsets=tmp1;  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void waitUserAckAndSendReInviteResp(SipRequest request,String[] featureTags,int serviceContext) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("waitUserAckAndSendReInviteResp()");  }  mReInviteStatus=InvitationStatus.INVITATION_NOT_ANSWERED;  InvitationStatus answer=waitInvitationAnswer();switch (answer) {case INVITATION_REJECTED:    if (sLogger.isActivated()) {      sLogger.debug("reInvite has been rejected by user");    }  mSession.sendErrorResponse(request,mSession.getDialogPath().getLocalTag(),InvitationStatus.INVITATION_REJECTED_DECLINE);mSession.handleReInviteUserAnswer(InvitationStatus.INVITATION_REJECTED,serviceContext);break;case INVITATION_NOT_ANSWERED:if (sLogger.isActivated()) {sLogger.debug("Session has been rejected on timeout");}mSession.sendErrorResponse(request,mSession.getDialogPath().getLocalTag(),InvitationStatus.INVITATION_REJECTED_DECLINE);mSession.handleReInviteUserAnswer(InvitationStatus.INVITATION_NOT_ANSWERED,serviceContext);break;case INVITATION_ACCEPTED:if (sLogger.isActivated()) {sLogger.debug("Send 200 OK");}String sdp=mSession.buildReInviteSdpResponse(request,serviceContext);if (sdp == null) {mSession.handleError(new ImsSessionBasedServiceError(ImsSessionBasedServiceError.SEND_RESPONSE_FAILED));return;}mSession.getDialogPath().setLocalContent(sdp);mSession.handleReInviteUserAnswer(InvitationStatus.INVITATION_ACCEPTED,serviceContext);SipResponse resp=SipMessageFactory.create200OkReInviteResponse(mSession.getDialogPath(),request,featureTags,sdp);SipTransactionContext ctx=mSession.getImsService().getImsModule().getSipManager().sendSipMessageAndWait(resp);if (ctx.isSipAck()) {if (sLogger.isActivated()) {sLogger.info("ACK request received");sLogger.info("ACK status code = " + ctx.getStatusCode());}mSession.handleReInviteAck(InvitationStatus.INVITATION_ACCEPTED,serviceContext);} else {if (sLogger.isActivated()) {sLogger.debug("No ACK received for INVITE");}mSession.handleError(new ImsSessionBasedServiceError(ImsSessionBasedServiceError.SEND_RESPONSE_FAILED));}break;default :mSession.handleError(new ImsSessionBasedServiceError(ImsSessionBasedServiceError.SEND_RESPONSE_FAILED));break;}}  }
class C{  public XML atRuntime() throws MalformedURLException, IOException {  return new XML(true,path);}  }
class C{  public JobImpressions(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (!player.getZone().isMoveToAllowed()) {    player.sendPrivateText("Mouse movement is not possible here. Use your keyboard.");    return;  }  if (player.hasStatus(StatusType.POISONED)) {    player.sendPrivateText("Poison has disoriented you and you cannot move normally. You only seem able to walk backwards and cannot plan out any route in advance.");    return;  }  if (player.getStatusList().hasStatus(StatusType.CONFUSED)) {    player.sendPrivateText("You are disoriented and you cannot move normally. You only seem able to walk backwards and cannot plan out any route in advance.");    return;  }  if (player.hasPath()) {    player.clearPath();  }  if (player.has(AUTOWALK)) {    player.remove(AUTOWALK);  }  move(player,action);  TutorialNotifier.move(player);  player.applyClientDirection(false);  player.notifyWorldAboutChanges();}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mApps != null) {    onReleaseResources(mApps);    mApps=null;  }  if (mPackageObserver != null) {    getContext().unregisterReceiver(mPackageObserver);    mPackageObserver=null;  }}  }
class C{  @Override public void initGui(){  super.initGui();  this.textFieldFrequency=new GuiTextField(fontRendererObj,80,50,40,12);  this.textFieldFrequency.setMaxStringLength(4);  if (itemStack != null) {    this.textFieldFrequency.setText(((IItemFrequency)this.itemStack.getItem()).getFrequency(this.itemStack) + "");  }}  }
class C{  public RegressionDataset(DataSet data){  this.data=data.getDoubleData();  this.variables=data.getVariables();  setRows(new int[data.getNumRows()]);  for (int i=0; i < getRows().length; i++)   getRows()[i]=i;}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  @SuppressWarnings("unchecked") protected GenericServiceAPIResponseEntity<String> putEntitiesWithService(String resourceURL,List<? extends TaggedLogAPIEntity> entities,String serviceName) throws JsonMappingException, JsonGenerationException, IOException {  final String json=marshall(entities);  final WebResource r=getWebResource(resourceURL);  return putAuthHeaderIfNeeded(r.queryParam(SERVICE_NAME,serviceName).accept(DEFAULT_MEDIA_TYPE)).header(CONTENT_TYPE,DEFAULT_HTTP_HEADER_CONTENT_TYPE).put(GenericServiceAPIResponseEntity.class,json);}  }
class C{  public ExtendedStringLiteral(StringLiteral str1,StringLiteral str2){  super(str1.source,str1.sourceStart,str1.sourceEnd,str1.lineNumber);  extendWith(str2);}  }
class C{  public void rebuildEventsTable(){  final Set<Integer> allowedIds=new HashSet<>();  if (showCmdCheckBox.isSelected())   allowedIds.add(IGameEvents.ID_CMD);  if (showSelectionDeltaCheckBox.isSelected())   allowedIds.add(IGameEvents.ID_SELECTION_DELTA);  if (showControlGroupUpdateCheckBox.isSelected())   allowedIds.add(IGameEvents.ID_CONTROL_GROUP_UPDATE);  if (showCameraUpdateCheckBox.isSelected())   allowedIds.add(IGameEvents.ID_CAMERA_UPDATE);  if (showOtherEssentialsCheckBox.isSelected())   allowedIds.addAll(OTHER_ESSENTIALS_ID_SET);  if (showOtherRestCheckBox.isSelected())   allowedIds.addAll(OTHER_REST_ID_SET);  final boolean seconds=Env.APP_SETTINGS.get(Settings.TIME_IN_SECONDS);  final XTableModel model=table.getXTableModel();  final boolean showRawParams=Settings.SHOW_RAW_PARAMETERS.skillLevel.isAtLeast() && Env.APP_SETTINGS.get(Settings.SHOW_RAW_PARAMETERS);  final Vector<String> columns=Utils.asNewVector("User Color","Event","I","Time","User","Event","Parameters");  if (showRawParams)   columns.add("Raw Parameters");  final Vector<Vector<Object>> data=new Vector<>();  final User[] userIdUsers=repProc.usersByUserId;  final boolean[] userByIdEnableds=chartsComp.getUserByUserIdEnableds();  final int rowheight=Env.APP_SETTINGS.get(Settings.EVENTS_TABLE_ROW_HEIGHT);  for (  final Event e : repProc.replay.gameEvents.events)   if (userByIdEnableds[e.userId] && allowedIds.contains(e.id)) {    final Vector<Object> row=new Vector<>(columns.size());    final User u=userIdUsers[e.userId];    row.add(u == null ? null : u.getPlayerColor().darkerColor);    row.add(e);    row.add(e.getRicon().size(rowheight));    row.add(seconds ? repProc.formatLoopTime(e.loop) : Env.LANG.formatNumber(e.loop));    row.add(u == null ? null : u.uid.fullName);    row.add(e.name);    row.add(e.getParameters(repProc));    if (showRawParams)     row.add(e.getRawParameters());    data.add(row);  }  model.setDataVector(data,columns);  table.removeColumn(table.getColumnModel().getColumn(eventColIdx));  table.removeColumn(table.getColumnModel().getColumn(userColorColIdx));  table.setRowHeight(rowheight);  table.setSortable(false);  if (Env.APP_SETTINGS.get(Settings.EVENTS_STRETCH_TABLE)) {    table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);    for (int i=table.getColumnCount() - (showRawParams ? 3 : 2); i >= 0; i--)     table.packColumns(i);  } else {    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    table.pack();  }}  }
class C{  public void exit(String group,String handle){  this.group(group).exit(handle);}  }
class C{  protected void onDeVoice(String channel,String sourceNick,String sourceLogin,String sourceHostname,String recipient){}  }
class C{  public void finish(){  ent.pathnotifier.removeObserver(this);  finishnotifier.setChanges();  finishnotifier.notifyObservers();}  }
class C{  public void output(String msg){  rootDoc.printNotice(msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.257 -0500",hash_original_method="76992CA06444764D9CF7DB1AFF10640E",hash_generated_method="5B1E0534FC73153EA3F058EDA9D163AF") public boolean wpsPbcSupported(){  return (wpsConfigMethodsSupported & WPS_CONFIG_PUSHBUTTON) != 0;}  }
class C{  public Promise<BitbucketPullRequest> updatePullRequest(final String owner,final String repository,final String pullRequestId,final BitbucketPullRequest pullRequest){  return Promises.reject(JsPromiseError.create("Not implemented yet"));}  }
class C{  public boolean await(Date deadline) throws InterruptedException {  if (this.waiter != null) {    throw new IllegalStateException("A thread is already waiting on this object." + "\ncaller: " + Thread.currentThread() + "\nwaiter: "+ this.waiter);  }  if (aborted)   throw new InterruptedException("Operation interrupted");  this.waiter=Thread.currentThread();  boolean success=false;  try {    if (deadline != null) {      success=this.cond.awaitUntil(deadline);    } else {      this.cond.await();      success=true;    }    if (aborted)     throw new InterruptedException("Operation interrupted");  }  finally {    this.waiter=null;  }  return success;}  }
class C{  public BoundingBox clr(){  crn_dirty=true;  return this.set(min.set(0,0,0),max.set(0,0,0));}  }
class C{  public static double kolmogorovSmirnovCDF(double x){  double sum=0.0;  for (int i=0; i < 100; i++) {    sum+=Math.pow(Math.E,(-1 * Math.pow((2 * i) - 1,2) * Math.pow(Math.PI,2)) / Math.pow(8 * x,2));  }  double estimatedValue=sum * (Math.sqrt(2 * Math.PI) / x);  return estimatedValue;}  }
class C{  public synchronized void erase(){  if (fileTable != null) {synchronized (this) {      Set<Object> keys=new HashSet<Object>();      try {        addAllFileTableKeys(keys);      } catch (      IOException e) {        Debug.logError(e,module);      }      for (      Object key : keys) {        try {          V value=fileTable.get(key);          noteRemoval(toKey(key),value);          removeHitCount.incrementAndGet();          fileTable.remove(key);          jdbmMgr.commit();        } catch (        IOException e) {          Debug.logError(e,module);        }      }    }    memoryTable.clear();  } else {    Iterator<Map.Entry<Object,CacheLine<V>>> it=memoryTable.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<Object,CacheLine<V>> entry=it.next();      noteRemoval(toKey(entry.getKey()),entry.getValue().getValue());      removeHitCount.incrementAndGet();      it.remove();    }  }}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateAsciiStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(IOUtils.getAsciiReader(x),length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void repaintPanel(){  removeAll();  initializeLayout();  repaint();}  }
class C{  public void addAsAlternativeExportForVolume(URI volumeURI,URI exportMaskURI){  Set<URI> alternatesForVolume=volumeToAlternativeMasks.get(volumeURI);  if (alternatesForVolume == null) {    alternatesForVolume=new HashSet<>();    volumeToAlternativeMasks.put(volumeURI,alternatesForVolume);  }  alternatesForVolume.add(exportMaskURI);}  }
class C{  public DoubleMatrix2D like2D(int rows,int columns){  return new DenseDoubleMatrix2D(rows,columns);}  }
class C{  public static <T>T[] newArray(Class<T> clazz,int size) throws PostmanException {  Parceler<T> parceler=getParcelerForClass(clazz);  return parceler.newArray(size);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void query(Envelope searchEnv,ItemVisitor visitor){  super.query(searchEnv,visitor);}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  rehash();  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashtableEntry<K,V> e=oldTable[i]; e != null; ) {        HashtableEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashtableEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  private int[] stringToArray(String string){  return Arrays.asList(string.trim().split("\\s+")).stream().mapToInt(null).toArray();}  }
class C{  public static PojoField findFieldByName(Collection<PojoField> fields,String name){  for (  PojoField field : fields)   if (field.dbName().equals(name))   return field;  return null;}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  public static <T>MutuallyExclusiveSetLock<T> createWithComparator(boolean fair,Comparator<? super T> comparator){  return new MutuallyExclusiveSetLock<T>(fair,comparator);}  }
class C{  public static boolean isMissingValue(double val){  return Double.isNaN(val);}  }
class C{  public ShortLazyValue(Collection<? super ShortLazyValue> collection,ShortSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public void requestClose(){  mLock.lock();  try {    if (mIsShutdown) {      return;    }    mTargetState=TargetState.CLOSED;    update();  }  finally {    mLock.unlock();  }}  }
class C{  public ByteArrayBuilder(int initialCapacity){  this(null,initialCapacity);}  }
class C{  public static int recognizeVendor(long creditCardNumber){  int i=findMatchingRange(creditCardNumber);  if (i < 0) {    return i;  }  return ranges[i].vendor;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/register") public NetworkRestRep registerNetwork(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Network.class,"id");  Network network=_dbClient.queryObject(Network.class,id);  ArgValidator.checkEntity(network,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(network.getRegistrationStatus())) {    if (network.getDiscovered()) {      List<URI> registeredNetworkSystems=getRegisteredNetworkSystems(network,_dbClient);      if (registeredNetworkSystems.isEmpty()) {        throw APIException.badRequests.invalidParameterCannotRegisterUnmanagedNetwork(network.getId());      }    }    network.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    _dbClient.persistObject(network);    auditOp(OperationTypeEnum.REGISTER_NETWORK,true,null,network.getId().toString());  }  return MapNetwork.toNetworkRestRep(network,_dbClient);}  }
class C{  public void onAttackPerformed(final Nature type,boolean ranged,String weapon){  attackNature=type;  isDoingRangedAttack=ranged;  this.weapon=weapon;  fireChange(PROP_ATTACK);}  }
class C{  final public boolean isReadOnly(){  return false;}  }
class C{  public TimeSeries(String title){  super(title);}  }
class C{  public List<NamedRelatedResourceRep> listByTenant(URI tenantId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  ComputeVirtualPoolList response=client.getURI(ComputeVirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getComputeVirtualPool());}  }
class C{  @Override @Deprecated public void write(ObjectOutput output) throws IOException {  if (!output.equals(oos)) {    throw new IllegalArgumentException("Attempting to write to a different stream than the one that created this PutField");  }  for (  EmulatedFields.ObjectSlot slot : emulatedFields.slots()) {    Object fieldValue=slot.getFieldValue();    Class<?> type=slot.getField().getType();    if (type == int.class) {      output.writeInt(fieldValue != null ? ((Integer)fieldValue).intValue() : 0);    } else     if (type == byte.class) {      output.writeByte(fieldValue != null ? ((Byte)fieldValue).byteValue() : 0);    } else     if (type == char.class) {      output.writeChar(fieldValue != null ? ((Character)fieldValue).charValue() : 0);    } else     if (type == short.class) {      output.writeShort(fieldValue != null ? ((Short)fieldValue).shortValue() : 0);    } else     if (type == boolean.class) {      output.writeBoolean(fieldValue != null ? ((Boolean)fieldValue).booleanValue() : false);    } else     if (type == long.class) {      output.writeLong(fieldValue != null ? ((Long)fieldValue).longValue() : 0);    } else     if (type == float.class) {      output.writeFloat(fieldValue != null ? ((Float)fieldValue).floatValue() : 0);    } else     if (type == double.class) {      output.writeDouble(fieldValue != null ? ((Double)fieldValue).doubleValue() : 0);    } else {      output.writeObject(fieldValue);    }  }}  }
class C{  void editDestroy(){  if (!selectedOK())   return;  if (selectedAgent.startsWith("Node.")) {    showError("Node cannot be deleted.");    return;  }  node.destroyAgent(selectedAgent);}  }
class C{  public boolean isLightboxEnabled(){  return lightboxEnabled;}  }
class C{  protected void validateInterfaces() throws ValidationException {  ArrayList<ClassifierReference> interfaces=new ArrayList<>(getModel().getInterfaces());  for (int i=0; i < interfaces.size(); i++) {    ClassifierReference iface=interfaces.get(i);    if (!isValidInterface(iface)) {      throw new ValidationException(String.format(ErrorMessages.THE_INTERFACE_CANNOT_BE_FOUND,iface.getFullSpecifier()).toString());    } else     if (iface.uri == null) {      IEObjectDescription interfaceDescription=getClassifierObjectDescriptionForFQN(iface.getFullSpecifier());      if (interfaceDescription != null) {        iface.uri=interfaceDescription.getEObjectURI();      }    }  }  getModel().setInterfaces(interfaces);}  }
class C{  private boolean placeResourceCompliantRRInstance(ArrayList<Container> containers,int container,PackingPlan.InstancePlan instancePlan){  return containers.get(container - 1).add(instancePlan);}  }
class C{  public Instance placeSymbol(Symbol symbol,Transform matrix,AlphaTransform cxform){  return placeSymbol(symbol,matrix,cxform,-1,-1);}  }
class C{  public void testCase5(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-116,-45,126,-116,20,61,14,-86,-65,86,1,35,35,106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static JsonObject parseIndicatorFile(File jsonFile){  try {    JsonParser jp=new JsonParser();    JsonElement je=jp.parse(new FileReader(jsonFile));    if (je.isJsonObject())     return (JsonObject)je;  } catch (  Exception ex) {    showError("JSON file parse error","Error parsing the JSON file " + jsonFile,ex);    ex.printStackTrace();  }  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.161 -0500",hash_original_method="735EC7AEC4F3C97B9E273B68A8C134FA",hash_generated_method="EA3AB24781A5CC0C1AB8613C230C6044") public int compareTo(Integer object){  return compare(value,object.value);}  }
class C{  private void signalStopToEnumerationAdapter(){  this.aws.computeEnumerationRequest.enumerationAction=EnumerationAction.STOP;  this.service.handleEnumerationRequest(this.aws);}  }
class C{  public ComplexCondition(List<Condition> subconditions,BinaryOperator operator){  this.subconditions=subconditions;  this.operator=operator;}  }
class C{  public MosaicJpeg generateFinalMosaic(boolean highRes){  int mosaicReturnCode=mMosaicFrameProcessor.createMosaic(highRes);  if (mosaicReturnCode == Mosaic.MOSAIC_RET_CANCELLED) {    return null;  } else   if (mosaicReturnCode == Mosaic.MOSAIC_RET_ERROR) {    return new MosaicJpeg();  }  byte[] imageData=mMosaicFrameProcessor.getFinalMosaicNV21();  if (imageData == null) {    Log.e(TAG,"getFinalMosaicNV21() returned null.");    return new MosaicJpeg();  }  int len=imageData.length - 8;  int width=(imageData[len + 0] << 24) + ((imageData[len + 1] & 0xFF) << 16) + ((imageData[len + 2] & 0xFF) << 8)+ (imageData[len + 3] & 0xFF);  int height=(imageData[len + 4] << 24) + ((imageData[len + 5] & 0xFF) << 16) + ((imageData[len + 6] & 0xFF) << 8)+ (imageData[len + 7] & 0xFF);  Log.d(TAG,"ImLength = " + (len) + ", W = "+ width+ ", H = "+ height);  if (width <= 0 || height <= 0) {    Log.e(TAG,"width|height <= 0!!, len = " + (len) + ", W = "+ width+ ", H = "+ height);    return new MosaicJpeg();  }  YuvImage yuvimage=new YuvImage(imageData,ImageFormat.NV21,width,height,null);  ByteArrayOutputStream out=new ByteArrayOutputStream();  yuvimage.compressToJpeg(new Rect(0,0,width,height),100,out);  try {    out.close();  } catch (  Exception e) {    Log.e(TAG,"Exception in storing final mosaic",e);    return new MosaicJpeg();  }  return new MosaicJpeg(out.toByteArray(),width,height);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.885 -0500",hash_original_method="BA9B01A70699F7EA70070719DF8ACE84",hash_generated_method="A9B20A2F30412BBB4B42DB4B59A89726") public void dump(Printer pw,String prefix){  pw.println(prefix + "durationMillis: " + durationMillis);  pw.println(prefix + "serviceDetails: " + serviceDetails);}  }
class C{  public static String unescape(String string){  int length=string.length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < length) {      int d=JSONTokener.dehexchar(string.charAt(i + 1));      int e=JSONTokener.dehexchar(string.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public boolean isIPVoiceCallSupported(){  return mIpVoiceCall;}  }
class C{  @Override public void mouseClicked(int par1,int par2,int par3){  super.mouseClicked(par1,par2,par3);  this.textFieldX.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);  this.textFieldZ.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);  this.textFieldY.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);  this.textFieldFreq.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);}  }
class C{  public static void loadCircularImage(Context context,OkulusImageView imageView,Drawable image,AvatarBitmapTransformation.AvatarSize avatarSize){  Glide.with(context).load(image).asBitmap().placeholder(R.drawable.ic_placeholder_profile).diskCacheStrategy(DiskCacheStrategy.SOURCE).error(R.drawable.ic_placeholder_profile).into(imageView);}  }
class C{  public SymbolTableEntryInternal steFor_set(){  return getSymbolTableEntryInternal("set",true);}  }
class C{  private static Set<String> readBlacklistFile(String blacklistPath) throws IOException {  InputStream blacklistStream;  File blacklistFile=new File(blacklistPath);  if (blacklistFile.exists() && blacklistFile.isFile()) {    blacklistStream=new FileInputStream(blacklistFile);  } else {    blacklistStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(blacklistPath);    if (blacklistStream == null) {      throw new FileNotFoundException("Blacklist file " + blacklistPath + " not found!");    }  }  try (InputStream is=blacklistStream){    Set<String> blacklist=new HashSet<>();    try (Scanner in=new Scanner(is)){      while (in.hasNextLine()) {        blacklist.add(in.nextLine().trim());      }    }     return blacklist;  } }  }
class C{  public static boolean isInMesh(float x,float y,float radius,TerrainTool.Meshes mesh){switch (mesh) {case Box:    return isInBox(x,y,radius);case Sphere:  return isInRadius(x,y,radius);default :throw new IllegalArgumentException("Unkown mesh type " + mesh);}}  }
class C{  public final AssertSubscriber<T> assertNotComplete(){  int c=completionCount;  if (c == 1) {    throw new AssertionError("Completed",null);  }  if (c > 1) {    throw new AssertionError("Multiple completions: " + c,null);  }  return this;}  }
class C{  public void addLdc2w(double d){  addOpcode(LDC2_W);  addIndex(constPool.addDoubleInfo(d));}  }
class C{  public void decodeToFile(String inputBase64String,String outFileName) throws IOException {  ByteBuffer fileData=ByteBuffer.wrap(Base64.decodeBase64(inputBase64String));  File file=new File(outFileName);  FileChannel wChannel=new FileOutputStream(file).getChannel();  wChannel.write(fileData);  wChannel.close();}  }
class C{  public InterruptedIOException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private void isElementIndex(int index){  if (index < 0 || index >= size) {    throw new IndexOutOfBoundsException("Index [" + index + "] must be less than size ["+ size+ "]");  }}  }
class C{  public CIMObjectPath createVolumeGroupBasedOnSLO(StorageSystem forProvider,StorageSystem storageSystem,String slo,String workload,String srp){  String groupName=generateGroupName(slo,workload,srp);  String lockName=generateParkingSLOSGLockName(storageSystem,groupName);  boolean gotLock=false;  CIMObjectPath volumeGroupObjectPath=null;  try {    if (_locker.acquireLock(lockName,PARKING_SLO_SG_LOCK_WAIT_SECS)) {      gotLock=true;      volumeGroupObjectPath=_cimPath.getStorageGroupObjectPath(groupName,storageSystem);      CIMInstance instance=checkExists(forProvider,volumeGroupObjectPath,false,false);      if (instance == null) {        CIMArgument[] inArgs=getCreateVolumeGroupInputArguments(storageSystem,groupName,slo,srp,workload,null,false);        CIMArgument[] outArgs=new CIMArgument[5];        invokeMethod(forProvider,_cimPath.getControllerConfigSvcPath(storageSystem),"CreateGroup",inArgs,outArgs);        volumeGroupObjectPath=_cimPath.getCimObjectPathFromOutputArgs(outArgs,"MaskingGroup");      }    } else {      _log.warn(String.format("Could not get lock %s while trying to createVolumeGroupBasedOnSLO",lockName));      throw DeviceControllerException.exceptions.failedToAcquireLock(lockName,"createVolumeGroupBasedOnSLO");    }  } catch (  WBEMException we) {    _log.info(storageSystem.getSystemType() + " Problem when trying to create volume group for SLO: " + slo+ " SRP: "+ srp+ " Workload:  "+ workload,we);    throw new DeviceControllerException(we);  }catch (  Exception e) {    _log.error("An exception while processing createVolumeGroupBasedOnSLO",e);  } finally {    if (gotLock) {      _locker.releaseLock(lockName);    }  }  return volumeGroupObjectPath;}  }
class C{  public void moveToFirst(){  checkWidget();  changeSelectionTo(0);}  }
class C{  public MarkupBuilder(Writer writer){  this(new IndentPrinter(new PrintWriter(writer)));}  }
class C{  public void close() throws IOException {  maxStreamPos=cache.length();  seek(maxStreamPos);  flushBefore(maxStreamPos);  super.close();  cache.close();  cache=null;  cacheFile.delete();  cacheFile=null;  stream.flush();  stream=null;  StreamCloser.removeFromQueue(closeAction);}  }
class C{  public void takeTurn(Player player){  Card prev=discardPile.last();  Card next=player.play(this,prev);  discardPile.addCard(next);  System.out.println(player.getName() + " plays " + next);  System.out.println();}  }
class C{  public static boolean attemptLong(Object object,Offset offset,long oldValue,long newValue){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  void startScanSFeaturesAt(List seq,int pos){  sFeatures.clear();  sFeatureIdx=0;  Observation obsr=(Observation)seq.get(pos);  for (int i=0; i < obsr.cps.length; i++) {    Element elem=(Element)dict.dict.get(new Integer(obsr.cps[i]));    if (elem == null) {      continue;    }    if (!(elem.isScanned)) {      Iterator it=elem.lbCntFidxes.keySet().iterator();      while (it.hasNext()) {        Integer label=(Integer)it.next();        CountFeatureIdx cntFidx=(CountFeatureIdx)elem.lbCntFidxes.get(label);        if (cntFidx.fidx >= 0) {          Feature sF=new Feature();          sF.sFeature1Init(label.intValue(),obsr.cps[i]);          sF.idx=cntFidx.fidx;          elem.cpFeatures.add(sF);        }      }      elem.isScanned=true;    }    for (int j=0; j < elem.cpFeatures.size(); j++) {      sFeatures.add(elem.cpFeatures.get(j));    }  }}  }
class C{  private static String decode(final String text) throws UnsupportedEncodingException {  try {    return URLDecoder.decode(text,Charset.defaultCharset().name());  } catch (  final IllegalArgumentException ex) {    throw new DecodingException(ex);  }}  }
class C{  public long convert(String value){  if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals("-1")) {    return MISSING_VALUE;  }  value=Strings.padStart(value,4,'0');  if (selectedFormatter == null) {    selectedFormatter=TypeUtils.getDateTimeFormatter(value);  }  LocalDateTime time;  try {    time=LocalDateTime.parse(value,selectedFormatter);  } catch (  DateTimeParseException e) {    selectedFormatter=TypeUtils.DATE_TIME_FORMATTER;    time=LocalDateTime.parse(value,selectedFormatter);  }  return PackedLocalDateTime.pack(time);}  }
class C{  public Builder removeX509Certificate(X509Certificate x509Certificate){  this.x509Certificates.remove(x509Certificate);  return this;}  }
class C{  public LinearColormap(int color1,int color2){  this.color1=color1;  this.color2=color2;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.SPLITTER__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.SPLITTER__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static final int find(int[] a,int key,int begin,int end){  for (int i=begin; i < end; i++) {    if (a[i] == key) {      return i;    }  }  return -1;}  }
class C{  protected ProvidedRuntimeLibrariesImpl(){  super();}  }
class C{  public static String readableFileSize(long size){  if (size <= 0) {    return "0";  }  final String[] units=new String[]{"Bi","KiB","MiB","GiB"};  int digitGroups=(int)(Math.log10(size) / Math.log10(1024));  return new DecimalFormat("#,##0.#").format(size / Math.pow(1024,digitGroups)) + " " + units[digitGroups];}  }
class C{  public boolean isHover(Object e){  return ui.isHover((Element)e);}  }
class C{  public static boolean isExistingPathname(final String pathname){  return (!StringUtils.isBlank(pathname) && new File(pathname).exists());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void diffuse(HeatBugs heatbugs,int start,int end){  final DoubleGrid2D _valgrid=heatbugs.valgrid;  final double[][] _valgrid_field=heatbugs.valgrid.field;  final double[][] _valgrid2_field=heatbugs.valgrid2.field;  final int _gridHeight=_valgrid.getHeight();  final double _evaporationRate=heatbugs.evaporationRate;  final double _diffusionRate=heatbugs.diffusionRate;  double average;  double[] _past=_valgrid_field[_valgrid.stx(start - 1)];  double[] _current=_valgrid_field[start];  double[] _next;  double[] _put;  int yminus1;  int yplus1;  for (int x=start; x < end; x++) {    _next=_valgrid_field[_valgrid.stx(x + 1)];    _put=_valgrid2_field[_valgrid.stx(x)];    yminus1=_valgrid.sty(-1);    for (int y=0; y < _gridHeight; y++) {      yplus1=_valgrid.sty(y + 1);      average=(_past[yminus1] + _past[y] + _past[yplus1]+ _current[yminus1]+ _current[y]+ _current[yplus1]+ _next[yminus1]+ _next[y]+ _next[yplus1]) / 9.0;      _put[y]=_evaporationRate * (_current[y] + _diffusionRate * (average - _current[y]));      yminus1=y;    }    _past=_current;    _current=_next;  }}  }
class C{  public boolean isCreditStopHold(){  String status=getSOCreditStatus();  return SOCREDITSTATUS_CreditStop.equals(status) || SOCREDITSTATUS_CreditHold.equals(status);}  }
class C{  public boolean removeHighlightField(String f){  boolean b=this.remove(HighlightParams.FIELDS,f);  if (this.get(HighlightParams.FIELDS) == null) {    this.setHighlight(false);  }  return b;}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_BogusTypeRefFragment_ColonSepTypeRef_GetterHeader(ISerializationContext context,PropertyGetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.130 -0500",hash_original_method="9CF355A1080B1C5188ACDD31B59B3C7A",hash_generated_method="DF56149423846E6235D8003E1808F06E") private void flush(boolean propogate) throws IOException {  int avail=base64.avail();  if (avail > 0) {    byte[] buf=new byte[avail];    int c=base64.readResults(buf,0,avail);    if (c > 0) {      out.write(buf,0,c);    }  }  if (propogate) {    out.flush();  }}  }
class C{  public ActivateWindow(String window,String... parameters){  super();  addParameterToRequest("window",window);  addParameterToRequest("parameters",parameters);}  }
class C{  void sessionsSupported(){  sessionSupported=true;}  }
class C{  public void switchSingleRow(){  if (m_onlyMultiRow)   return;  cardLayout.first(cardPanel);  m_singleRow=true;  dynamicDisplay(0);}  }
class C{  private static int mod(int x,int y){  int result=x % y;  return result < 0 ? result + y : result;}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Carny.getInstance().removeFavorite(a);  }  return null;}  }
class C{  private static void _fix_update_source_response(UpdateSource source,String page_contents) throws java.io.IOException {  Matcher m;  if ("F-Droid".equals(source.get_name())) {    m=_fdroid_not_found.matcher(page_contents);    if (m.find()) {      throw new FileNotFoundException();    }  } else   if ("AppBrain".equals(source.get_name())) {    m=_appbrain_not_found.matcher(page_contents);    if (m.find()) {      throw new FileNotFoundException();    }  }}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public int fontSize(){  return 0;}  }
class C{  public void temporarilyDisabledSoPleaseRunManuallytestServerLock() throws NotUnlockedException {  final byte[] data=new byte[]{0,1,2,3,4,5};  final VaultID id=m_serverVault.lock(data);  m_clientVault.waitForID(id,1000);  assertTrue(m_clientVault.knowsAbout(id));  m_serverVault.unlock(id);  m_clientVault.waitForIdToUnlock(id,1000);  assertTrue(m_clientVault.isUnlocked(id));  assertEquals(data,m_clientVault.get(id));  assertEquals(m_serverVault.get(id),m_clientVault.get(id));  m_clientVault.release(id);}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public EntityViewCommandList(final String name,final String[] items,final EntityView<?> view){  super(name,items);  this.view=view;}  }
class C{  protected Path path(String pathString){  return new Path(pathString);}  }
class C{  @Override public void close(){  LogManager.getLogManager().checkAccess();  close(true);}  }
class C{  public static void removeLookupServiceProvider(LookupServiceProvider provider){  _providers.removeElement(provider);}  }
class C{  public SVGOMPolylineElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public synchronized void add(ArrayList<byte[]> bytesList){  if (null == mQueue) {    mQueue=new ArrayList<byte[]>();  }  if (null != bytesList) {    mQueue.addAll(bytesList);  }  print();}  }
class C{  public MaterialEditText hintScaleColor(int color){  mHintScaleColor=color;  return this;}  }
class C{  public ServerProxyEmptyFault(){  requestFileName="getstate.query";  responseFile="empty.query";}  }
class C{  public static boolean isFinalResponse(int rc){  return rc >= 200 && rc < 700;}  }
class C{  public synchronized void printTrace(String classname,int level,String trace){  classname="[RCS][" + classname + "]";  if (level == Logger.INFO_LEVEL) {    Log.i(classname,trace);  } else   if (level == Logger.WARN_LEVEL) {    Log.w(classname,trace);  } else   if (level == Logger.ERROR_LEVEL) {    Log.e(classname,trace);  } else   if (level == Logger.FATAL_LEVEL) {    Log.e(classname,trace);  } else {    Log.v(classname,trace);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.805 -0500",hash_original_method="75A731730EAFA84E0B65F7039A32C61B",hash_generated_method="DC75A733962790116C4354C7F58C1294") private int nativeDeleteRights(DrmRights rights){  addTaint(rights.getTaint());  return getTaintInt();}  }
class C{  public void shuffle(Random random){  Object[] objs=this.objs;  int numObjs=this.numObjs;  Object obj;  int rand;  for (int x=numObjs - 1; x >= 1; x--) {    rand=random.nextInt(x + 1);    obj=objs[x];    objs[x]=objs[rand];    objs[rand]=obj;  }}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,Icon icon,int hAlign,int vAlign,int hTextPosition,int vTextPosition,int iconTextGap,int mnemonicIndex,int textOffset){  if ((icon == null) && (text == null)) {    return;  }  JComponent c=ss.getComponent();  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);  Insets insets=SynthLookAndFeel.getPaintingInsets(ss,paintInsets);  paintViewR.x=insets.left;  paintViewR.y=insets.top;  paintViewR.width=c.getWidth() - (insets.left + insets.right);  paintViewR.height=c.getHeight() - (insets.top + insets.bottom);  paintIconR.x=paintIconR.y=paintIconR.width=paintIconR.height=0;  paintTextR.x=paintTextR.y=paintTextR.width=paintTextR.height=0;  String clippedText=layoutText(ss,fm,text,icon,hAlign,vAlign,hTextPosition,vTextPosition,paintViewR,paintIconR,paintTextR,iconTextGap);  if (icon != null) {    Color color=g.getColor();    if (ss.getStyle().getBoolean(ss,"TableHeader.alignSorterArrow",false) && "TableHeader.renderer".equals(c.getName())) {      paintIconR.x=paintViewR.width - paintIconR.width;    } else {      paintIconR.x+=textOffset;    }    paintIconR.y+=textOffset;    SynthIcon.paintIcon(icon,ss,g,paintIconR.x,paintIconR.y,paintIconR.width,paintIconR.height);    g.setColor(color);  }  if (text != null) {    View v=(View)c.getClientProperty(BasicHTML.propertyKey);    if (v != null) {      v.paint(g,paintTextR);    } else {      paintTextR.x+=textOffset;      paintTextR.y+=textOffset;      paintText(ss,g,clippedText,paintTextR,mnemonicIndex);    }  }}  }
class C{  public boolean isEmpty(){  return totalKeySet().size() == 0;}  }
class C{  public static String toBase64(long value){  int low=(int)(value & 0xffffffff);  int high=(int)(value >> 32);  StringBuilder sb=new StringBuilder();  boolean haveNonZero=base64Append(sb,(high >> 28) & 0xf,false);  haveNonZero=base64Append(sb,(high >> 22) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(high >> 16) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(high >> 10) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(high >> 4) & 0x3f,haveNonZero);  int v=((high & 0xf) << 2) | ((low >> 30) & 0x3);  haveNonZero=base64Append(sb,v,haveNonZero);  haveNonZero=base64Append(sb,(low >> 24) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(low >> 18) & 0x3f,haveNonZero);  haveNonZero=base64Append(sb,(low >> 12) & 0x3f,haveNonZero);  base64Append(sb,(low >> 6) & 0x3f,haveNonZero);  base64Append(sb,low & 0x3f,true);  return sb.toString();}  }
class C{  public String marketplaceChanged(){  String result="";  String selectedMarketplaceId=model.getSelectedMarketplace();  try {    if (selectedMarketplaceId != null) {      boolean isOK=false;      model.setSelectedMarketplace(selectedMarketplaceId);      if (isPublicLandingpageActivated(selectedMarketplaceId)) {        isOK=loadPublicLandingpage(selectedMarketplaceId);      } else {        isOK=loadEnterpriseLandingpage();      }      if (!isOK) {        concurrentModification();      }    } else {      resetModel();    }  } catch (  SaaSApplicationException e) {    ui.handleException(e);    resetModel();    result=CONCURRENT_MODIFICATION_ERROR;  }  return result;}  }
class C{  public void destroy(){}  }
class C{  public String toShortString(){  return "{" + mPackage + "/"+ mClass+ "}";}  }
class C{  private void ensureResponse() throws IOException {  if (m_response == null) {    try {      final boolean traceEnabled=log.isTraceEnabled();      final long start=traceEnabled ? System.currentTimeMillis() : 0;      m_response=get(queryTimeoutMillis,TimeUnit.MILLISECONDS);      if (traceEnabled)       log.trace("Response in " + (System.currentTimeMillis() - start) + "ms");    } catch (    InterruptedException|TimeoutException|ExecutionException e) {      throw new IOException(e);    }  }}  }
class C{  public boolean isRoot(){  return false;}  }
class C{  protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {  if (_inputStream == null) {    return false;  }  int amount=_inputEnd - _inputPtr;  if (amount > 0 && _inputPtr > 0) {    _currInputProcessed+=_inputPtr;    _currInputRowStart-=_inputPtr;    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);    _inputEnd=amount;  } else {    _inputEnd=0;  }  _inputPtr=0;  while (_inputEnd < minAvailable) {    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);    if (count < 1) {      _closeInput();      if (count == 0) {        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");      }      return false;    }    _inputEnd+=count;  }  return true;}  }
class C{  public String toString(){  return getName();}  }
class C{  public static int binarySearchCeil(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(a.length - 1,index) : index;}  }
class C{  @Override public void onFailure(Throwable e){}  }
class C{  public double tdz(final double z1,final double z2){  double length=this.length;  if (Math.abs(z1 - z2) <= length / 2)   return z1 - z2;  double dz=stz(z1,length) - stz(z2,length);  if (dz * 2 > length)   return dz - length;  if (dz * 2 < -length)   return dz + length;  return dz;}  }
class C{  protected Ignite startGridWithIgfs(String gridName,IgfsMode mode,@Nullable IgfsSecondaryFileSystem secondaryFs) throws Exception {  final FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName("igfs");  igfsCfg.setBlockSize(igfsBlockSize);  igfsCfg.setDefaultMode(mode);  igfsCfg.setSecondaryFileSystem(secondaryFs);  CacheConfiguration<?,?> dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(affGrpSize));  dataCacheCfg.setBackups(numBackups);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName(gridName);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  return startGrid(gridName,cfg);}  }
class C{  protected void validateState(State current){  checkNotNull(current.taskInfo);  checkNotNull(current.taskInfo.stage);  checkNotNull(current.image,"image not provided");  checkNotNull(current.sourceDatastore,"source datastore not provided");  checkNotNull(current.destinationDatastore,"destination datastore not provided");  checkNotNull(current.parentLink,"parentLink not provided");  checkState(current.documentExpirationTimeMicros > 0,"documentExpirationTimeMicros needs to be greater than 0");switch (current.taskInfo.stage) {case STARTED:    checkState(current.taskInfo.subStage != null,"subStage cannot be null");switch (current.taskInfo.subStage) {case CHECK_IMAGE_TO_IMAGE_DATASTORE_MAPPING_DOC:case RETRIEVE_HOSTS:    break;case TRANSFER_IMAGE:  checkArgument(current.host != null,"host cannot be null");checkArgument(current.destinationDatastore != null,"destination host cannot be null");break;case UPDATE_IMAGE_REPLICATION_DOCUMENT:checkArgument(current.image != null,"image cannot be null");checkArgument(current.destinationDatastore != null,"destination host cannot be null");break;default :checkState(false,"unsupported sub-state: " + current.taskInfo.subStage.toString());}break;case CREATED:case FAILED:case FINISHED:case CANCELLED:checkState(current.taskInfo.subStage == null,"Invalid stage update. subStage must be null");break;default :checkState(false,"cannot process patches in state: " + current.taskInfo.stage.toString());}}  }
class C{  public LinkLoopException(){  super();}  }
class C{  public static ProbDistribution createProbDistribution(String headVar,DoubleFactor factor){  Set<String> variables=factor.getVariables();  if (variables.size() == 1) {    factor.normalise();    CategoricalTable.Builder builder=new CategoricalTable.Builder(headVar);    for (    Assignment a : factor.getAssignments()) {      builder.addRow(a.getValue(headVar),factor.getProbEntry(a));    }    return builder.build();  } else {    Set<String> depVariables=new HashSet<String>(variables);    depVariables.remove(headVar);    factor.normalise(depVariables);    Builder builder=new ConditionalTable.Builder(headVar);    for (    Assignment a : factor.getAssignments()) {      Assignment cond=a.getTrimmed(depVariables);      builder.addRow(cond,a.getValue(headVar),factor.getProbEntry(a));    }    return builder.build();  }}  }
class C{  private AttrMaxPause(final String val) throws BOSHException {  super(val);  checkMinValue(1);}  }
class C{  @Override public void run(){  while (running) {    String[] pendingMessages;synchronized (messages) {      try {        if (messages.size() == 0) {          messages.wait();        }      } catch (      InterruptedException e) {      }      pendingMessages=messages.toArray(new String[0]);      messages.clear();    }synchronized (connections) {      for (int i=0; i < connections.size(); i++) {        try {          PrintWriter writer=connections.get(i).getWriter();          for (int j=0; j < pendingMessages.length; j++) {            writer.println("<div>" + filter(pendingMessages[j]) + "</div>");          }          writer.flush();        } catch (        IOException e) {          log("IOException sending message",e);        }      }    }  }}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple6<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6));}  }
class C{  public synchronized T removeNextHatched() throws InterruptedException {  T o=getNextHatched();  orderList.removeFirst();  hatchMap.remove(o);  notifyAll();  return o;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  double[] currentProbs=null;  double[] sumProbs;  double currentWeight, weight=1;  int i, j;  sumProbs=new double[instance.numClasses()];  i=0;  while (Utils.gr(weight,0)) {    currentWeight=theRules.elementAt(i).weight(instance);    if (Utils.gr(currentWeight,0)) {      currentProbs=theRules.elementAt(i).distributionForInstance(instance);      for (j=0; j < sumProbs.length; j++) {        sumProbs[j]+=weight * currentProbs[j];      }      weight=weight * (1 - currentWeight);    }    i++;  }  return sumProbs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.095 -0500",hash_original_method="038F050AED1C1465ECEA892ABE879633",hash_generated_method="37D3615CD89AA875D9B50012D35E60C5") public DigitalSignature(String authType){  try {    sha=MessageDigest.getInstance("SHA-1");    if ("RSA".equals(authType)) {      md5=MessageDigest.getInstance("MD5");      cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");      signature=null;    } else     if ("DSA".equals(authType)) {      signature=Signature.getInstance("NONEwithDSA");      cipher=null;      md5=null;    } else {      cipher=null;      signature=null;      md5=null;    }  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }catch (  NoSuchPaddingException e) {    throw new AssertionError(e);  }}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public static View create(String namespace,String name){  return new View(namespace,name,new ArrayList<Expression>());}  }
class C{  private void disposeEncoder(IoSession session){  ProtocolEncoder encoder=(ProtocolEncoder)session.removeAttribute(ENCODER);  if (encoder == null) {    return;  }  try {    encoder.dispose(session);  } catch (  Exception e) {    LOGGER.warn("Failed to dispose: " + encoder.getClass().getName() + " ("+ encoder+ ')');  }}  }
class C{  public static Document createXMLValidationList(ValidationResults results,int initRow,int enabled,Locale locale,List fieldsInfo,String caseSensitive){  Document doc=createDocument(initRow,results,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_TYPEOFFIC),"","",fieldsInfo,locale,caseSensitive,0,0);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  ScrOfic scr=null;  ScrOficeu scr1=null;  ScrOficgl scr2=null;  ScrOficct scr3=null;  Object scrAux=null;  Boolean bool=null;  for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {    scrAux=it.next();    if (scrAux instanceof ScrOfic) {      scr=(ScrOfic)scrAux;      if (scr.getDisableDate() == null) {        bool=Boolean.TRUE;      } else {        bool=Boolean.FALSE;      }      addNode(scr.getId().intValue(),scr.getName(),scr.getCode(),scr.getAcron(),bool,scr.getStamp(),Integer.MIN_VALUE,"",nodeList,"");    } else     if (scrAux instanceof ScrOficeu) {      scr1=(ScrOficeu)scrAux;      if (scr1.getDisableDate() == null) {        bool=Boolean.TRUE;      } else {        bool=Boolean.FALSE;      }      addNode(scr1.getId().intValue(),scr1.getName(),scr1.getCode(),scr1.getAcron(),bool,scr1.getStamp(),Integer.MIN_VALUE,"",nodeList,"");    } else     if (scrAux instanceof ScrOficgl) {      scr2=(ScrOficgl)scrAux;      if (scr2.getDisableDate() == null) {        bool=Boolean.TRUE;      } else {        bool=Boolean.FALSE;      }      addNode(scr2.getId().intValue(),scr2.getName(),scr2.getCode(),scr2.getAcron(),bool,scr2.getStamp(),Integer.MIN_VALUE,"",nodeList,"");    } else     if (scrAux instanceof ScrOficct) {      scr3=(ScrOficct)scrAux;      if (scr3.getDisableDate() == null) {        bool=Boolean.TRUE;      } else {        bool=Boolean.FALSE;      }      addNode(scr3.getId().intValue(),scr3.getName(),scr3.getCode(),scr3.getAcron(),bool,scr3.getStamp(),Integer.MIN_VALUE,"",nodeList,"");    }  }  return doc;}  }
class C{  public void execute(String commandLine){  final Machine machine=appContext.getDevMachine().getDescriptor();  if (machine == null) {    return;  }  String workspaceID=appContext.getWorkspaceId();  String machineID=machine.getId();  final CommandDto command=dtoFactory.createDto(CommandDto.class).withName("some-command").withCommandLine(commandLine).withType("arbitrary-type");  final String outputChannel="process:output:" + UUID.uuid();  executeCommand(command,workspaceID,machineID,outputChannel);}  }
class C{  public static void sort(byte[] a){  doSort(a,0,a.length - 1);}  }
class C{  private void persistStatsInDB(List<Stat> stats) throws BaseCollectionException {  if (!stats.isEmpty()) {    _keyMap.put(Constants._Stats,stats);    dumpStatRecords();    injectStats();    stats.clear();  }}  }
class C{  public boolean hasConsultas(String idUsuario,String[] estados){  StringBuffer qual=new StringBuffer();  if (StringUtils.isNotBlank(idUsuario)) {    qual.append(DBUtils.getCondition(qual.toString())).append(DBUtils.generateEQTokenField(CAMPO_IDUSRSOLICITANTE,idUsuario));  }  if (!ArrayUtils.isEmpty(estados)) {    qual.append(DBUtils.getCondition(qual.toString())).append(DBUtils.generateInTokenField(CAMPO_ESTADO,estados));  }  return getVOCount(qual.toString(),TABLE_NAME) > 0;}  }
class C{  public AggregatorTest(String name){  super(name);}  }
class C{  private void togglePopup(){  if (doNotTogglePopup)   return;  if (comboBoxModel.getSize() == 0) {    comboBox.hidePopup();  } else   if (comboBox.isShowing() && !comboBox.isPopupVisible() && comboBoxEditorComponent.hasFocus())   comboBox.showPopup();}  }
class C{  private CompoundInterval processLiveInterval(LiveIntervalElement live,BasicBlock bb){  Register reg=live.getRegister();  int dfnend=regAllocState.getDfnEnd(live,bb);  int dfnbegin=regAllocState.getDfnBegin(live,bb);  if (MUTATE_FMOV && reg.isFloatingPoint()) {    mutateFMOVs(live,reg,dfnbegin,dfnend);  }  CompoundInterval existingInterval=regAllocState.getInterval(reg);  if (existingInterval == null) {    CompoundInterval newInterval=new CompoundInterval(dfnbegin,dfnend,reg);    if (LinearScan.VERBOSE_DEBUG)     System.out.println("created a new interval " + newInterval);    regAllocState.setInterval(reg,newInterval);    BasicInterval b=newInterval.first();    ir.MIRInfo.linearScanState.intervals.add(b);    return newInterval;  } else {    ArrayList<BasicInterval> intervals=ir.MIRInfo.linearScanState.intervals;    BasicInterval added=existingInterval.addRange(regAllocState,live,bb);    if (added != null) {      intervals.add(added);    }    if (LinearScan.VERBOSE_DEBUG)     System.out.println("Extended old interval " + reg);    if (LinearScan.VERBOSE_DEBUG)     System.out.println(existingInterval);    return existingInterval;  }}  }
class C{  public <T extends BlockObject>T ingestExportMasks(UnManagedVolume unManagedVolume,T blockObject,IngestionRequestContext requestContext) throws IngestionException {  _logger.info("ingesting export masks for requestContext " + requestContext.getCurrentUnmanagedVolume());  if (null != requestContext.getExportGroup()) {    if (null != unManagedVolume.getUnmanagedExportMasks() && !unManagedVolume.getUnmanagedExportMasks().isEmpty()) {      List<URI> unManagedMaskUris=new ArrayList<URI>(Collections2.transform(unManagedVolume.getUnmanagedExportMasks(),CommonTransformerFunctions.FCTN_STRING_TO_URI));      List<UnManagedExportMask> unManagedMasks=_dbClient.queryObject(UnManagedExportMask.class,unManagedMaskUris);      int originalSize=unManagedMasks.size();      MutableInt masksIngestedCount=new MutableInt(0);      ingestExportOrchestrator.ingestExportMasks(requestContext,unManagedVolume,blockObject,unManagedMasks,masksIngestedCount);      _logger.info("{} of {} unmanaged export masks were ingested",masksIngestedCount,originalSize);      List<String> errorMessages=requestContext.getErrorMessagesForVolume(unManagedVolume.getNativeGuid());      if (blockObject.checkInternalFlags(Flag.PARTIALLY_INGESTED)) {        _logger.info("block object {} is partially ingested",blockObject.forDisplay());        if (masksIngestedCount.intValue() == 0) {          if (null != errorMessages && !errorMessages.isEmpty()) {            throw IngestionException.exceptions.unmanagedVolumeMasksNotIngestedAdditionalInfo(unManagedVolume.getLabel(),Joiner.on(", ").join(errorMessages));          } else {            throw IngestionException.exceptions.unmanagedVolumeMasksNotIngested(unManagedVolume.getLabel());          }        } else {          requestContext.addDataObjectToUpdate(unManagedVolume,unManagedVolume);          _logger.info("all export masks of unmanaged volume {} have been ingested, " + "but the volume is still marked as partially ingested, returning block object {}",unManagedVolume.forDisplay(),blockObject.forDisplay());          return blockObject;        }      }      if (unManagedVolume.getUnmanagedExportMasks().size() != originalSize) {        if (VolumeIngestionUtil.canDeleteUnManagedVolume(unManagedVolume)) {          _logger.info("Marking UnManaged Volume {} inactive as it doesn't have any associated unmanaged export masks ",unManagedVolume.getNativeGuid());          boolean isRPVolume=VolumeIngestionUtil.checkUnManagedResourceIsRecoverPointEnabled(unManagedVolume);          if (isRPVolume && VolumeIngestionUtil.checkUnManagedResourceIsNonRPExported(unManagedVolume)) {            _logger.info("unmanaged volume {} is both RecoverPoint protected and exported to another Host or Cluster",unManagedVolume.forDisplay());            Set<DataObject> updateObjects=requestContext.getDataObjectsToBeUpdatedMap().get(unManagedVolume.getNativeGuid());            if (updateObjects == null) {              updateObjects=new HashSet<DataObject>();              requestContext.getDataObjectsToBeUpdatedMap().put(unManagedVolume.getNativeGuid(),updateObjects);            }            List<UnManagedVolume> ingestedUnManagedVolumes=requestContext.findAllUnManagedVolumesToBeDeleted();            ingestedUnManagedVolumes.add(unManagedVolume);            UnManagedProtectionSet umpset=VolumeIngestionUtil.getUnManagedProtectionSetForUnManagedVolume(requestContext,unManagedVolume,_dbClient);            if (umpset == null) {              umpset=VolumeIngestionUtil.getUnManagedProtectionSetForManagedVolume(requestContext,blockObject,_dbClient);            }            if (VolumeIngestionUtil.validateAllVolumesInCGIngested(ingestedUnManagedVolumes,umpset,requestContext,_dbClient)) {              VolumeIngestionUtil.validateRPVolumesAlignWithIngestVpool(requestContext,umpset,_dbClient);              VolumeIngestionUtil.setupRPCG(requestContext,umpset,unManagedVolume,updateObjects,_dbClient);            } else {              blockObject.addInternalFlags(BlockRecoverPointIngestOrchestrator.INTERNAL_VOLUME_FLAGS);            }          }          unManagedVolume.setInactive(true);          requestContext.getUnManagedVolumesToBeDeleted().add(unManagedVolume);        } else {          requestContext.addDataObjectToUpdate(unManagedVolume,unManagedVolume);        }        return blockObject;      } else {        if (null != errorMessages && !errorMessages.isEmpty()) {          throw IngestionException.exceptions.unmanagedVolumeMasksNotIngestedAdditionalInfo(unManagedVolume.getLabel(),Joiner.on(", ").join(errorMessages));        } else {          throw IngestionException.exceptions.unmanagedVolumeMasksNotIngested(unManagedVolume.getLabel());        }      }    }  }  return blockObject;}  }
class C{  void addDecimalPoint(){  this.displayMode=DISPLAY_MODE.INPUT;  if (this.clearOnNextDigit) {    setDisplayString(EMPTY_STRING);  }  final String inputString=getDisplayString();  if (inputString.indexOf(DOT_CHARACTER) < 0) {    setDisplayString(inputString + DOT_CHARACTER);  }}  }
class C{  public T caseArgumentPair(ArgumentPair object){  return null;}  }
class C{  public static Console create(boolean interactive) throws IOException {  consoleInstance.set(new Console(interactive));  return consoleInstance.get();}  }
class C{  public static RcsStatus valueOf(int value){  RcsStatus status=mValueToEnum.get(value);  if (status != null) {    return status;  }  return NO_INFO;}  }
class C{  @Override public void preProcess(ResultProducer rp) throws Exception {  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  m_ResultListener.preProcess(this);}  }
class C{  public ModifyHpSpell(String name,Nature nature,int amount,int atk,int cooldown,int def,double lifesteal,int mana,int minimumlevel,int range,int rate,int regen,double modifier){  super(name,nature,amount,atk,cooldown,def,lifesteal,mana,minimumlevel,range,rate,regen,modifier);}  }
class C{  public RestClient(int readTimeoutMillis,int connectTimeoutMillis){  this.client=initClient(readTimeoutMillis,connectTimeoutMillis);  contentType=MediaType.APPLICATION_JSON;  accept=MediaType.APPLICATION_JSON;  response=(Class<T>)String.class;  genericResponse=null;}  }
class C{  protected void readChangeLogVersionNode(XmlPullParser parser,ChangeLog changeLog) throws Exception {  if (parser == null)   return;  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOGVERSION);  String versionName=parser.getAttributeValue(null,ATTRIBUTE_VERSIONNAME);  String changeDate=parser.getAttributeValue(null,ATTRIBUTE_CHANGEDATE);  if (versionName == null)   throw new ChangeLogException("VersionName required in changeLogVersion node");  ChangeLogRowHeader row=new ChangeLogRowHeader();  row.setVersionName(versionName);  row.setChangeDate(changeDate);  changeLog.addRow(row);  Log.d(TAG,"Added rowHeader:" + row.toString());  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String tag=parser.getName();    Log.d(TAG,"Processing tag=" + tag);    if (tag.equals(TAG_CHANGELOGTEXT)) {      readChangeLogRowNode(parser,changeLog,versionName);    }  }}  }
class C{  protected int _sliceOffset(int absRank){  return sliceOffsets[absRank];}  }
class C{  public static _DeletedState fromString(final String value) throws SOAPSerializationException {  return (_DeletedState)Enumeration.fromString(value,_DeletedState.VALUES_TO_INSTANCES);}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  @Override public void process(Map<K,V> tuple){  if (result) {    return;  }  V val=tuple.get(getKey());  if ((val != null) && compareValue(val.doubleValue())) {    result=true;    any.emit(true);  }}  }
class C{  public TypeInferencer(){  this(new ParserFactory());}  }
class C{  public String toId(){  return toId;}  }
class C{  private List<Observable<Word>> createObservables(){  List<Observable<Word>> observables=new ArrayList<>();  observables.add(wordService.getSubject());  observables.add(wordService.getVerb());  observables.add(wordService.getArticle());  observables.add(wordService.getAdjective());  observables.add(wordService.getNoun());  return observables;}  }
class C{  public void fatalError(Exception e){  scannerStatus=fr.gael.dhus.database.object.FileScanner.STATUS_ERROR;  processingsDone(e.getMessage());}  }
class C{  public boolean previous() throws SQLException {  checkState();  boolean b=rs.previous();  notifyCursorMoved();  return b;}  }
class C{  private void reportProblems(Player admin){  String message;  if (problems.isEmpty()) {    message="No problematic corpses found!";  } else {    StringBuilder builder=new StringBuilder("Problems:");    for (    Entry<String,List<String>> entry : problems.entrySet()) {      builder.append("\n");      builder.append(entry.getKey());      builder.append(":\n");      for (      String problem : entry.getValue()) {        builder.append(problem);        builder.append("\n");      }    }    message=builder.toString();  }  admin.sendPrivateText(message);}  }
class C{  public List<Movie> findClassics2(List<Movie> movies){  return movies.parallelStream().filter(null).collect(toList());}  }
class C{  public EventStoreException(Throwable cause){  super(cause);}  }
class C{  public IntIterator nodeRows(){  return getNodeTable().rows();}  }
class C{  public void clear(){  mSize=0;}  }
class C{  private void replaceTop(JsonScope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public void close() throws IOException {  log.info("Closing UdpInputStream");  closeItAll();  super.close();}  }
class C{  @Override @Inline public void scan(ObjectReference object){  if (!RCHeader.isMarked(object)) {  } else {    RCHeader.clearMarked(object);  }}  }
class C{  void refresh(){  String text=fLabelProvider.getText(getData());  Image image=fLabelProvider.getImage(getData());  String toolTip=fToolTipLabelProvider.getText(getData());  fDetailsBlock.setText(text);  fDetailsBlock.setImage(image);  fDetailsBlock.setToolTip(toolTip);  refreshArrow();}  }
class C{  protected final AspectContainer putAmount(IAspectType type,int amount,boolean isDynamic){  List<InternalAspect> entries=this.getEntries(type);  int dynAmounts=0;  int staticAmounts=0;  int prevStaticAmounts=this.getAmount(type,false);  int prevDynAmounts=this.getAmount(type,true);  for (  InternalAspect aspect : entries) {    if (!aspect.isDynamic)     staticAmounts+=aspect.amount; else     dynAmounts+=aspect.amount;  }  if (!isDynamic)   staticAmounts=amount; else   dynAmounts=amount;  entries.clear();  entries.add(new InternalAspect(type,staticAmounts > 0 ? staticAmounts : 0,false,prevStaticAmounts != staticAmounts));  entries.add(new InternalAspect(type,dynAmounts > 0 ? dynAmounts : 0,true,true));  if (prevStaticAmounts != staticAmounts || prevDynAmounts != dynAmounts)   this.onChanged();  return this;}  }
class C{  public static int floorLog10(double d){  int guess=(int)(LOG2_DIV_LOG10 * MathLib.floorLog2(d));  double pow10=MathLib.toDoublePow10(1,guess);  if ((pow10 <= d) && (pow10 * 10 > d))   return guess;  if (pow10 > d)   return guess - 1;  return guess + 1;}  }
class C{  public FastScatterPlot(float[][] data,ValueAxis domainAxis,ValueAxis rangeAxis){  super();  ParamChecks.nullNotPermitted(domainAxis,"domainAxis");  ParamChecks.nullNotPermitted(rangeAxis,"rangeAxis");  this.data=data;  this.xDataRange=calculateXDataRange(data);  this.yDataRange=calculateYDataRange(data);  this.domainAxis=domainAxis;  this.domainAxis.setPlot(this);  this.domainAxis.addChangeListener(this);  this.rangeAxis=rangeAxis;  this.rangeAxis.setPlot(this);  this.rangeAxis.addChangeListener(this);  this.paint=Color.red;  this.domainGridlinesVisible=true;  this.domainGridlinePaint=FastScatterPlot.DEFAULT_GRIDLINE_PAINT;  this.domainGridlineStroke=FastScatterPlot.DEFAULT_GRIDLINE_STROKE;  this.rangeGridlinesVisible=true;  this.rangeGridlinePaint=FastScatterPlot.DEFAULT_GRIDLINE_PAINT;  this.rangeGridlineStroke=FastScatterPlot.DEFAULT_GRIDLINE_STROKE;}  }
class C{  private static Pair<Integer,Long> parseTkhd(ParsableByteArray tkhd){  tkhd.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=tkhd.readInt();  int version=Mp4Util.parseFullAtomVersion(fullAtom);  tkhd.skip(version == 0 ? 8 : 16);  int trackId=tkhd.readInt();  tkhd.skip(4);  boolean durationUnknown=true;  int durationPosition=tkhd.getPosition();  int durationByteCount=version == 0 ? 4 : 8;  for (int i=0; i < durationByteCount; i++) {    if (tkhd.data[durationPosition + i] != -1) {      durationUnknown=false;      break;    }  }  long duration;  if (durationUnknown) {    tkhd.skip(durationByteCount);    duration=-1;  } else {    duration=version == 0 ? tkhd.readUnsignedInt() : tkhd.readUnsignedLongToLong();  }  return Pair.create(trackId,duration);}  }
class C{  public String calculateAdvanceAdjustment(){  final WorkOrderEstimate workOrderEstimate=(WorkOrderEstimate)persistenceService.find("from WorkOrderEstimate where id=?",workOrderEstimateId);  totalAdvancePaid=contractorAdvanceService.getTotalAdvancePaymentMadeByWOEstimateId(workOrderEstimate.getId(),billDate);  totalPendingBalance=contractorBillService.calculateTotalPendingAdvance(totalAdvancePaid,billDate,workOrderEstimate,billId);  return ADVANCE_AJUSTMENT;}  }
class C{  public void addFileNamePattern(String pattern){  if (fFileNamePatterns.add(pattern)) {    fFileNameMatcher=null;  }}  }
class C{  @Override public void closeReset(){  closeRead();}  }
class C{  public ThreadIdToSequenceIdExpiryTask(){  expiryTime=QueueStateImpl.this.qManager.getPool().getSubscriptionMessageTrackingTimeout();}  }
class C{  @NonNull private PendingIntent createPendingIntent(@NonNull Context context,@NonNull String action,@NonNull Class<? extends Service> serviceClass){  Intent intent=new Intent(context,serviceClass);  intent.setAction(action);  return PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);}  }
class C{  private void write(Coordinate[] coords,Writer writer,int level) throws IOException {  startLine(level,writer);  startGeomTag(GMLConstants.GML_COORDINATES,null,writer);  int dim=2;  if (coords.length > 0) {    if (!(Double.isNaN(coords[0].z)))     dim=3;  }  boolean isNewLine=true;  for (int i=0; i < coords.length; i++) {    if (isNewLine) {      startLine(level + 1,writer);      isNewLine=false;    }    if (dim == 2) {      writer.write("" + coords[i].x);      writer.write(coordinateSeparator);      writer.write("" + coords[i].y);    } else     if (dim == 3) {      writer.write("" + coords[i].x);      writer.write(coordinateSeparator);      writer.write("" + coords[i].y);      writer.write(coordinateSeparator);      writer.write("" + coords[i].z);    }    writer.write(tupleSeparator);    if ((i + 1) % maxCoordinatesPerLine == 0 && i < coords.length - 1) {      writer.write("\n");      isNewLine=true;    }  }  if (!isNewLine)   writer.write("\n");  startLine(level,writer);  endGeomTag(GMLConstants.GML_COORDINATES,writer);}  }
class C{  public JSONArray put(boolean value){  put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public synchronized void removeChartListener(ChartListener cl){  m_listeners.remove(cl);}  }
class C{  public boolean isModified(int rowIndex){  if (newFields.containsKey(rowIndex)) {    return true;  } else   if (deletedFields.containsKey(rowIndex)) {    return true;  }  return false;}  }
class C{  @Override public Collection<ObjectReference> dumpThreadRoots(int width){  int frameId=0;  List<ObjectReference> roots=new ArrayList<ObjectReference>();  for (  StackFrame frame : stack) {    System.err.printf("  Frame %5d [",frameId++);    roots.addAll(frame.dumpRoots(width));    System.err.println(" ]");  }  System.err.println();  return roots;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  return builder.build();}  }
class C{  public Raster(Polygon polygon,double resolution,Double radius,int KdeType,Color color){  this.resolution=resolution;  envelope=polygon.getEnvelope();  originX=Double.POSITIVE_INFINITY;  originY=Double.NEGATIVE_INFINITY;  for (  Coordinate c : envelope.getCoordinates()) {    originX=Math.min(originX,c.x);    originY=Math.max(originY,c.y);  }  this.radius=radius;  this.KdeType=KdeType;  this.color=color;  Coordinate[] c=polygon.getEnvelope().getCoordinates();  if ((c[2].x - c[0].x) / this.resolution < 1 || (c[2].y - c[0].y) / this.resolution < 1) {    log.warn("Adjust stride! The envelope of the area fits within a single pixel.");  } else {    int numberOfPixelsX=(int)Math.ceil((c[2].x - c[0].x) / this.resolution);    int numberOfPixelsY=(int)Math.ceil((c[2].y - c[0].y) / this.resolution);    bufferedImage=new BufferedImage(numberOfPixelsX,numberOfPixelsY,BufferedImage.TYPE_INT_ARGB);    setInitialColor(this.color);    imageMatrix=new SparseDoubleMatrix2D(numberOfPixelsX,numberOfPixelsY);  }}  }
class C{  public Observable<UserRateCount> updateUserRateCounts(){  return routes.getUserRateCount(KEY,Session.get().getUserId()).flatMapIterable(null).doOnNext(null);}  }
class C{  private void checkNotEqual(Message m1,Message m2){  String equalsError=String.format("%s should not be equal to %s",m1,m2);  assertFalse(equalsError,m1.equals(m2));  assertFalse(equalsError,m2.equals(m1));  assertFalse(String.format("%s should have a different hash code from %s",m1,m2),m1.hashCode() == m2.hashCode());}  }
class C{  public static void copy(Reader reader,Writer writer) throws IOException {  char[] buffer=new char[2048];  int i;  while ((i=reader.read(buffer)) > 0) {    writer.write(buffer,0,i);  }}  }
class C{  protected AbstractPreparedStatement(GDSHelper c,String sql,int rsType,int rsConcurrency,int rsHoldability,FBObjectListener.StatementListener statementListener,FBObjectListener.BlobListener blobListener,boolean metaDataQuery,boolean standaloneStatement,boolean generatedKeys) throws SQLException {  super(c,rsType,rsConcurrency,rsHoldability,statementListener);  this.blobListener=blobListener;  this.metaDataQuery=metaDataQuery;  this.standaloneStatement=standaloneStatement;  this.generatedKeys=generatedKeys;  try {    notifyStatementStarted();    prepareFixedStatement(sql);  } catch (  SQLException|RuntimeException e) {    notifyStatementCompleted(false);    throw e;  }}  }
class C{  public long convertMGRSToGeodetic(String MGRSString){  latitude=0;  longitude=0;  long error_code=checkZone(MGRSString);  if (error_code == MGRS_NO_ERROR) {    UTMCoord UTM=convertMGRSToUTM(MGRSString);    if (UTM != null) {      latitude=UTM.getLatitude().radians;      longitude=UTM.getLongitude().radians;    } else     error_code=MGRS_UTM_ERROR;  } else   if (error_code == MGRS_NOZONE_WARNING) {    UPSCoord UPS=convertMGRSToUPS(MGRSString);    if (UPS != null) {      latitude=UPS.getLatitude().radians;      longitude=UPS.getLongitude().radians;    } else     error_code=MGRS_UPS_ERROR;  }  return (error_code);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStore keyStore=currentState.getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    PublicKey pubKey=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)))[0].getPublicKey();    DViewPublicKey dViewPublicKey=new DViewPublicKey(frame,MessageFormat.format(res.getString("KeyPairPublicKeyDetailsAction.PubKeyDetailsEntry.Title"),alias),pubKey);    dViewPublicKey.setLocationRelativeTo(frame);    dViewPublicKey.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void write(Object obj,String name) throws XMLStreamException {  _xml.add(obj,name);}  }
class C{  public boolean isModifiable(){  return false;}  }
class C{  public ImportScope createImportScope(){  ImportScopeImpl importScope=new ImportScopeImpl();  return importScope;}  }
class C{  protected void stopProcessing(){  continueProcessing.set(false);}  }
class C{  private static int uarimaxNe(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {  int ixMax=bv.length;  if (bv[bv.length - 1] == value)   ixMax=bvi[0] + 1;  return ixMax;}  }
class C{  public void query(){  boolean open=gridTab.isOpen();  gridTab.query(false);  if (listPanel.isVisible() && !open)   gridTab.getTableModel().fireTableDataChanged();}  }
class C{  public static final int[][] threshold(double Rpred[][],double t){  int Ypred[][]=new int[Rpred.length][Rpred[0].length];  for (int i=0; i < Rpred.length; i++) {    for (int j=0; j < Rpred[i].length; j++) {      Ypred[i][j]=(Rpred[i][j] >= t) ? 1 : 0;    }  }  return Ypred;}  }
class C{  public BeanPropertyRowMapper(final Class<T> requiredType){  Hasor.assertIsNotNull(requiredType,"requiredType is null.");  this.requiredType=requiredType;  this.loadMapping();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int mainInit(final String[] args,final OutputStream outStream,final PrintStream errStream,CommandLookup info){  return printHelp(args,outStream,errStream,info);}  }
class C{  public boolean isShowCenterScale(){  return (worldScene.getShowCenterScale());}  }
class C{  public boolean hasThumbnail(){  return hasExtension(GphotoThumbnail.class);}  }
class C{  public void createScheduler(String schedulerName,String schedulerInstanceId,ThreadPool threadPool,JobStore jobStore,String rmiRegistryHost,int rmiRegistryPort,long idleWaitTime,long dbFailureRetryInterval) throws SchedulerException {  createScheduler(schedulerName,schedulerInstanceId,threadPool,jobStore,null,rmiRegistryHost,rmiRegistryPort,idleWaitTime,dbFailureRetryInterval,DEFAULT_JMX_EXPORT,DEFAULT_JMX_OBJECTNAME);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableNumberListValue toNumList=(AnimatableNumberListValue)to;  AnimatableNumberListValue accNumList=(AnimatableNumberListValue)accumulation;  boolean hasTo=to != null;  boolean hasAcc=accumulation != null;  boolean canInterpolate=!(hasTo && toNumList.numbers.length != numbers.length) && !(hasAcc && accNumList.numbers.length != numbers.length);  float[] baseValues;  if (!canInterpolate && hasTo && interpolation >= 0.5) {    baseValues=toNumList.numbers;  } else {    baseValues=numbers;  }  int len=baseValues.length;  AnimatableNumberListValue res;  if (result == null) {    res=new AnimatableNumberListValue(target);    res.numbers=new float[len];  } else {    res=(AnimatableNumberListValue)result;    if (res.numbers == null || res.numbers.length != len) {      res.numbers=new float[len];    }  }  for (int i=0; i < len; i++) {    float newValue=baseValues[i];    if (canInterpolate) {      if (hasTo) {        newValue+=interpolation * (toNumList.numbers[i] - newValue);      }      if (hasAcc) {        newValue+=multiplier * accNumList.numbers[i];      }    }    if (res.numbers[i] != newValue) {      res.numbers[i]=newValue;      res.hasChanged=true;    }  }  return res;}  }
class C{  public code addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public NewCookie(Cookie cookie){  this(cookie,null,DEFAULT_MAX_AGE,false,false);}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public SortableMapObject(Key key,double weight){  this.key=key;  this.weight=weight;}  }
class C{  protected void doDispose(){  super.doDispose();  XToolkit.targetDisposedPeer(popupMenuTarget,this);}  }
class C{  public Class<? extends TerminalsTokenTypeToPartitionMapper> bindTerminalTokenTypeToPartitionMapper(){  return TokenTypeToPartitionMapper.class;}  }
class C{  public PvTableModel(){}  }
class C{  public DataTableCellRenderer(Color missingColor,Color missingColorSelected,Color highlightColor,Color highlightColorSelected){  super();  this.missingColor=missingColor;  this.missingColorSelected=missingColorSelected;  this.highlightColor=highlightColor;  this.highlightColorSelected=highlightColorSelected;}  }
class C{  public ImageIcon(){}  }
class C{  public ReplDBMSEvent filter(ReplDBMSEvent event) throws ReplicatorException, InterruptedException {  totalEvents++;  Timestamp sourceTstamp=event.getExtractedTstamp();  long currentTime=System.currentTimeMillis();  prefetchLatency=currentTime - sourceTstamp.getTime();  if (logger.isDebugEnabled()) {    logger.debug("Processing event: seqno=" + event.getSeqno() + " prefetchLatency="+ prefetchLatency);  }  if (lastChecked == 0 || (currentTime - lastChecked >= interval)) {    getCurrentSlaveHeader();  }  if (allowAll) {    prefetchEvents++;    return event;  }  if (event.getSeqno() <= slaveSeqno) {    if (logger.isDebugEnabled()) {      logger.debug("Discarding event already executed by slave seqno=" + event.getSeqno() + " slaveSeqno="+ slaveSeqno);    }    return null;  }  if ((slaveLatency - prefetchLatency) < aheadMinMillis) {    if (logger.isDebugEnabled()) {      logger.debug("Discarding event that is under minimum prefetch latency: seqno=" + event.getSeqno() + " prefetchLatency="+ prefetchLatency+ " slaveLatency="+ slaveLatency);    }    return null;  }  long aheadMillis=0;  long originalSlaveLatency=slaveLatency;  while ((aheadMillis=originalSlaveLatency - prefetchLatency) > aheadMaxMillis) {    if (logger.isDebugEnabled())     logger.debug("Event is too far ahead of current slave position: aheadMillis=" + aheadMillis);    long sleepStartMillis=System.currentTimeMillis();    try {      prefetchState=PrefetchState.sleeping;      Thread.sleep(sleepTime);    }  finally {      prefetchState=PrefetchState.active;      sleepTimeMillis+=(System.currentTimeMillis() - sleepStartMillis);    }    currentTime=System.currentTimeMillis();    prefetchLatency=currentTime - sourceTstamp.getTime();    getCurrentSlaveHeader();    if (event.getSeqno() <= slaveSeqno) {      if (logger.isDebugEnabled()) {        logger.debug("Discarding event already executed by slave seqno=" + event.getSeqno() + " slaveSeqno="+ slaveSeqno);      }      return null;    }  }  prefetchEvents++;  if (logger.isDebugEnabled() && totalEvents % 20000 == 0)   logger.debug("Prefetched " + prefetchEvents + " events - Ratio "+ (100 * prefetchEvents / totalEvents)+ "%");  return event;}  }
class C{  public JobDetailImpl(String name,String group,Class<? extends Job> jobClass){  setName(name);  setGroup(group);  setJobClass(jobClass);}  }
class C{  public static Classifier[] makeCopies(Classifier model,int num) throws Exception {  if (model == null) {    throw new Exception("No model classifier set");  }  Classifier[] classifiers=new Classifier[num];  SerializedObject so=new SerializedObject(model);  for (int i=0; i < classifiers.length; i++) {    classifiers[i]=(Classifier)so.getObject();  }  return classifiers;}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  public static String convertBracketsFromPTBFormat(String sentence){  sentence=sentence.replaceAll("-LRB-","(");  sentence=sentence.replaceAll("-RRB-",")");  sentence=sentence.replaceAll("-LSB-","[");  sentence=sentence.replaceAll("-RSB-","]");  sentence=sentence.replaceAll("-LCB-","{");  sentence=sentence.replaceAll("-RCB-","}");  return sentence;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  @Override public void onLowMemory(){  super.onLowMemory();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String randomNegative(Object length){  return numericFunctions.randomNegativeFloat(length,2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.074 -0500",hash_original_method="11301E3D259A26B05B62DD42A72B1913",hash_generated_method="D1724525721DB5F537A5B61C1E9561A4") public TimeStampParser(String timeStamp){  super(timeStamp);}  }
class C{  public static LeaderElectionService create(Environment env,LeaderConfig config){  PaxosAcceptor ourAcceptor=PaxosAcceptorImpl.newAcceptor(config.acceptorLogDir().getPath());  PaxosLearner ourLearner=PaxosLearnerImpl.newLearner(config.learnerLogDir().getPath());  Set<String> remoteLeaderUris=Sets.newHashSet(config.leaders());  remoteLeaderUris.remove(config.localServer());  Optional<SSLSocketFactory> sslSocketFactory=TransactionManagers.createSslSocketFactory(config.sslConfiguration());  List<PaxosLearner> learners=AtlasDbHttpClients.createProxies(sslSocketFactory,remoteLeaderUris,PaxosLearner.class);  learners.add(ourLearner);  List<PaxosAcceptor> acceptors=AtlasDbHttpClients.createProxies(sslSocketFactory,remoteLeaderUris,PaxosAcceptor.class);  acceptors.add(ourAcceptor);  Map<PingableLeader,HostAndPort> otherLeaders=generatePingables(remoteLeaderUris,sslSocketFactory);  ExecutorService executor=Executors.newCachedThreadPool();  PaxosProposer proposer=PaxosProposerImpl.newProposer(ourLearner,ImmutableList.copyOf(acceptors),ImmutableList.copyOf(learners),config.quorumSize(),executor);  PaxosLeaderElectionService leader=new PaxosLeaderElectionService(proposer,ourLearner,otherLeaders,ImmutableList.copyOf(acceptors),ImmutableList.copyOf(learners),executor,config.pingRateMs(),config.randomWaitBeforeProposingLeadershipMs(),config.leaderPingResponseWaitMs());  env.register(ourAcceptor);  env.register(ourLearner);  env.register(leader);  env.register(new NotCurrentLeaderExceptionMapper());  return leader;}  }
class C{  public static int compareParentToChild(@NotNull String path1,boolean isDirectory1,@NotNull String path2,boolean isDrectory2){  String[] pathComponents1=getPathComponents(path1);  String[] pathComponents2=getPathComponents(path2);  final int minLength=Math.min(pathComponents1.length,pathComponents2.length);  for (int i=0; i < minLength - 1; i++) {    String s1=pathComponents1[i];    String s2=pathComponents2[i];    if (!s1.equals(s2)) {      return s1.compareTo(s2);    }  }  if (pathComponents1.length == pathComponents2.length) {    if (isDirectory1 == isDrectory2) {      return pathComponents1[pathComponents1.length - 1].compareTo(pathComponents2[pathComponents2.length - 1]);    } else {      return isDirectory1 ? 1 : -1;    }  } else {    if (pathComponents1.length == minLength && !isDirectory1) {      return -1;    } else     if (pathComponents2.length == minLength && !isDrectory2) {      return 1;    } else {      if (pathComponents1[minLength - 1].equals(pathComponents2[minLength - 1])) {        return pathComponents1.length - pathComponents2.length;      } else {        return pathComponents1[minLength - 1].compareTo(pathComponents2[minLength - 1]);      }    }  }}  }
class C{  private static String val_(String val){  return val.replace("\\","/").replace("\n","\\\n");}  }
class C{  private HashMap<String,Boolean> parseFeature(String optString){  if (optString.equals(NULL)) {    return null;  } else {    HashMap<String,Boolean> map=new HashMap<String,Boolean>();    StringTokenizer features=new StringTokenizer(optString,",");    StringTokenizer option;    while (features.hasMoreElements()) {      option=new StringTokenizer(features.nextToken(),"=");      if (option.hasMoreElements()) {        String key=option.nextToken();        Boolean value=option.nextToken().equals("no") ? Boolean.FALSE : Boolean.TRUE;        map.put(key,value);      }    }    return map;  }}  }
class C{  public ZDT2(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public void flushed(int tenant,long time_nanos){  finished(Operation.FLUSH,tenant,0,time_nanos);}  }
class C{  private void initialize(String component){  SkinSpecification skinSpec=SkinXMLHandler.getSkin(component,true);  setBorder(new MegamekBorder(skinSpec));  loadIcon(skinSpec);  isBGTiled=skinSpec.tileBackground;  if (skinSpec.fontColors.size() >= 1) {    buttonColor=skinSpec.fontColors.get(0);  } else {    buttonColor=defaultColor;  }  if (skinSpec.fontColors.size() >= 2) {    disabledColor=skinSpec.fontColors.get(1);  } else {    disabledColor=defaultDisabledColor;  }  if (skinSpec.fontColors.size() >= 3) {    activeColor=skinSpec.fontColors.get(2);  } else {    activeColor=defaultActiveColor;  }}  }
class C{  public LookAndFeelInfo(String name,String className){  this.name=name;  this.className=className;}  }
class C{  public static int[] kMinIndicesSubjectTo(double[][] matrix,int column,int k,int[] extraData,int condition) throws Exception {  if (matrix.length < k) {    throw new Exception(String.format("Length of array (%d) is less than k (%d)",matrix.length,k));  }  double[] mins=new double[k];  int[] minIndices=new int[k];  for (int i=0; i < k; i++) {    mins[i]=Double.POSITIVE_INFINITY;    minIndices[i]=-1;  }  for (int t=0; t < matrix.length; t++) {    if (extraData[t] != condition) {      continue;    }    if (matrix[t][column] < mins[k - 1]) {      mins[k - 1]=matrix[t][column];      minIndices[k - 1]=t;      for (int i=k - 2; i >= 0; i--) {        if (matrix[t][column] < mins[i]) {          mins[i + 1]=mins[i];          minIndices[i + 1]=minIndices[i];          mins[i]=matrix[t][column];          minIndices[i]=t;          continue;        }        break;      }    }  }  return minIndices;}  }
class C{  public double weight(){  return m_Weight;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public void addTargetSubtype(final TypeVariable target,final TypeVariable supertype,Set<AnnotationMirror> hierarchies){  final Subtypes subtypes=targetToRecords.get(target).subtypes;  final Set<AnnotationMirror> subtypesTops=subtypes.targets.get(supertype);  if (subtypesTops == null) {    subtypes.targets.put(supertype,new HashSet<>(hierarchies));  } else {    subtypesTops.addAll(hierarchies);  }}  }
class C{  protected void LocationPathPattern() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  final int RELATIVE_PATH_NOT_PERMITTED=0;  final int RELATIVE_PATH_PERMITTED=1;  final int RELATIVE_PATH_REQUIRED=2;  int relativePathStatus=RELATIVE_PATH_NOT_PERMITTED;  appendOp(2,OpCodes.OP_LOCATIONPATHPATTERN);  if (lookahead('(',1) && (tokenIs(Keywords.FUNC_ID_STRING) || tokenIs(Keywords.FUNC_KEY_STRING))) {    IdKeyPattern();    if (tokenIs('/')) {      nextToken();      if (tokenIs('/')) {        appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);        nextToken();      } else {        appendOp(4,OpCodes.MATCH_IMMEDIATE_ANCESTOR);      }      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_FUNCTEST);      relativePathStatus=RELATIVE_PATH_REQUIRED;    }  } else   if (tokenIs('/')) {    if (lookahead('/',1)) {      appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);      nextToken();      relativePathStatus=RELATIVE_PATH_REQUIRED;    } else {      appendOp(4,OpCodes.FROM_ROOT);      relativePathStatus=RELATIVE_PATH_PERMITTED;    }    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);    nextToken();  } else {    relativePathStatus=RELATIVE_PATH_REQUIRED;  }  if (relativePathStatus != RELATIVE_PATH_NOT_PERMITTED) {    if (!tokenIs('|') && (null != m_token)) {      RelativePathPattern();    } else     if (relativePathStatus == RELATIVE_PATH_REQUIRED) {      error(XPATHErrorResources.ER_EXPECTED_REL_PATH_PATTERN,null);    }  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  private void push() throws IOException {  int local_requested;synchronized (lock) {    while ((local_requested=requested) < 1 && !disconnected) {      try {        lock.wait();      } catch (      InterruptedException e) {      }    }    if (disconnected)     throw new IOException("Connection closed");  }  if (local_requested < pos) {    manager.sendTransmit(info,buffer,0,local_requested);    System.arraycopy(buffer,local_requested,buffer,0,pos - local_requested);    pos-=local_requested;synchronized (lock) {      requested-=local_requested;    }  } else {    manager.sendTransmit(info,buffer,0,pos);synchronized (lock) {      requested-=pos;    }    pos=0;  }}  }
class C{  public void assertValidGenericType(Type t,boolean expected){  if (chk.checkValidGenericType(t) != expected) {    String msg=expected ? " is not a valid generic type" : " is a valid generic type";    error(t + msg + "   "+ t.tsym.type);  }}  }
class C{  public APIError(Type type,String message){  this.type=type;  this.message=message;  this.statusCode=null;  this.expected=null;}  }
class C{  public static double pow(double a,double b){  if (b < 0)   return 1 / pow(a,-b);  long rawBits_a=doubleToLongBits(a);  long mantissa_a=getMantissa(rawBits_a);  final int e_a=Math.getExponent(a);  double m=longBitsToDouble(1023L << 52 | mantissa_a);  final double log2m=1.790711564253215 + 0.248597253161674 * m - 3.495545043418375 / (0.714309275671154 + 1.000000000000000 * m);  return pow2(b * log2m + b * e_a);}  }
class C{  @Override public void updateLong(String columnLabel,long x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateLong(" + quote(columnLabel) + ", "+ x+ "L);");    }    update(columnLabel,ValueLong.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static <T>Set<T> difference(Collection<? extends T> pos,Collection<? extends T> neg){  Set<T> d=newLinkedHashSet(pos);  d.removeAll(neg);  return d;}  }
class C{  private final void add(ArrayList<GalleryImage> images,int imageId,int nameId,int searchTermId){  images.add(new GalleryImage(imageId,getString(nameId),getString(searchTermId)));}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  private List<AnimParameter> createAnimParamList(TweenParameter tweenParameter,int position){  List<AnimParameter> params=new ArrayList<>();  long animParamNum=tweenParameter.animDuration / mFps;  if (animParamNum < 1) {    animParamNum=1;  }  float cntX;  float cntY;  int cntAlpha;  float cntRotation;  float cntScaleX;  float cntScaleY;  AnimParameter beforeParam=position == 0 ? mInitialParam : mTweenParameters.get(position - 1);  cntX=(tweenParameter.x - beforeParam.x) / animParamNum;  cntY=(tweenParameter.y - beforeParam.y) / animParamNum;  cntAlpha=(int)((tweenParameter.alpha - beforeParam.alpha) / animParamNum);  cntRotation=(tweenParameter.rotation - beforeParam.rotation) / animParamNum;  cntScaleX=(tweenParameter.scaleX - beforeParam.scaleX) / animParamNum;  cntScaleY=(tweenParameter.scaleY - beforeParam.scaleY) / animParamNum;  if (tweenParameter.angle == TweenParameter.DEFAULT_ANGLE) {    for (int i=0; i < animParamNum; i++) {      float elapsedTimeRate=(float)i / (float)animParamNum;      float valueChangeRate=EaseProvider.get(tweenParameter.ease,elapsedTimeRate);      AnimParameter animParameter=new AnimParameter(beforeParam.x + cntX * i * valueChangeRate,beforeParam.y + cntY * i * valueChangeRate,(int)(beforeParam.alpha + cntAlpha * i * valueChangeRate),beforeParam.scaleX + cntScaleX * i * valueChangeRate,beforeParam.scaleY + cntScaleY * i * valueChangeRate,beforeParam.rotation + cntRotation * i * valueChangeRate);      params.add(animParameter);    }  } else {    float differX=tweenParameter.x - beforeParam.x;    float differY=tweenParameter.y - beforeParam.y;    float halfDifferX=differX / 2;    float halfDifferY=differY / 2;    float baseLineLength=(float)Math.sqrt(halfDifferX * halfDifferX + halfDifferY * halfDifferY);    double baseRadian=Math.atan2(differY,differX);    double baseDegree=Math.toDegrees(baseRadian);    double cosRadius=90 - (tweenParameter.angle / 2);    double distance=(baseLineLength / Math.cos(Math.toRadians(cosRadius)));    float plusAngle=0;    float startAngle=0;    if (beforeParam.x >= tweenParameter.x && beforeParam.y <= tweenParameter.y) {      plusAngle=0;      startAngle=(float)(plusAngle + (90 - tweenParameter.angle) / 2 + baseDegree - 90 - 45f);    } else     if (beforeParam.x >= tweenParameter.x && beforeParam.y > tweenParameter.y) {      plusAngle=90;      startAngle=(float)(plusAngle + (90 - tweenParameter.angle) / 2 + -(-180 - baseDegree) - 45f);    } else     if (beforeParam.x < tweenParameter.x && beforeParam.y > tweenParameter.y) {      plusAngle=180;      startAngle=(float)(plusAngle + (90 - tweenParameter.angle) / 2 + -(-90 - baseDegree) - 45f);    } else     if (beforeParam.x < tweenParameter.x && beforeParam.y <= tweenParameter.y) {      plusAngle=270;      startAngle=(float)(plusAngle + (90 - tweenParameter.angle) / 2 + baseDegree - 45f);    }    PointF differPointF=Util.getPointByDistanceAndDegree(distance,startAngle);    float differBaseX=beforeParam.x - differPointF.x;    float differBaseY=beforeParam.y - differPointF.y;    float cntAngle=tweenParameter.angle / animParamNum;    for (int i=0; i < animParamNum; i++) {      float elapsedTimeRate=(float)i / (float)animParamNum;      float valueChangeRate=EaseProvider.get(tweenParameter.ease,elapsedTimeRate);      float angle=startAngle + cntAngle * (i + 1) * valueChangeRate;      PointF pointF=Util.getPointByDistanceAndDegree(distance,angle);      AnimParameter animParameter=new AnimParameter(pointF.x + differBaseX,pointF.y + differBaseY,(int)(beforeParam.alpha + cntAlpha * i * valueChangeRate),beforeParam.scaleX + cntScaleX * i * valueChangeRate,beforeParam.scaleY + cntScaleY * i * valueChangeRate,beforeParam.rotation + cntRotation * i * valueChangeRate);      params.add(animParameter);    }  }  return params;}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public Object clone(){  try {    Bytecode bc=(Bytecode)super.clone();    bc.tryblocks=(ExceptionTable)tryblocks.clone();    return bc;  } catch (  CloneNotSupportedException cnse) {    throw new RuntimeException(cnse);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.219 -0400",hash_original_method="84986DC2D90959660B24E731A37BB035",hash_generated_method="AF9F4D06DF2CA58C0A0386A10094685E") public static final byte[] encodeQuotedPrintable(BitSet printable,byte[] bytes){  if (bytes == null) {    return null;  }  if (printable == null) {    printable=PRINTABLE_CHARS;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (printable.get(b)) {      buffer.write(b);    } else {      encodeQuotedPrintable(b,buffer);    }  }  return buffer.toByteArray();}  }
class C{  @Reference(title="Fast and accurate computation of binomial probabilities",authors="C. Loader",booktitle="",url="http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf") private static double stirlingError(double n){  if (n < 16.0) {    final double n2=2.0 * n;    if (Math.floor(n2) == n2) {      return STIRLING_EXACT_ERROR[(int)n2];    } else {      return GammaDistribution.logGamma(n + 1.0) - (n + 0.5) * Math.log(n) + n - MathUtil.LOGSQRTTWOPI;    }  }  final double nn=n * n;  if (n > 500.0) {    return (S0 - S1 / nn) / n;  }  if (n > 80.0) {    return ((S0 - (S1 - S2 / nn)) / nn) / n;  }  if (n > 35.0) {    return ((S0 - (S1 - (S2 - S3 / nn) / nn) / nn) / n);  }  return ((S0 - (S1 - (S2 - (S3 - S4 / nn) / nn) / nn) / nn) / n);}  }
class C{  @SubscribeEvent public static void harvestDrops(BlockEvent.HarvestDropsEvent event){  if (event.getState().getBlock().isLeaves(event.getState(),event.getWorld(),event.getPos())) {    event.getDrops().add(new ItemStack(Items.STICK,2));  }}  }
class C{  private void dynInit(int AD_Table_ID,int Record_ID){  m_data.fillAcctSchema(selAcctSchema);  selAcctSchema.addEventListener(Events.ON_SELECT,this);  selAcctSchema.setSelectedIndex(0);  actionAcctSchema();  m_data.fillTable(selTable);  selTable.addEventListener(Events.ON_SELECT,this);  selRecord.setImage("/images/Find16.png");  selRecord.addEventListener(Events.ON_CLICK,this);  selRecord.setLabel("");  m_data.fillPostingType(selPostingType);  selPostingType.setSelectedIndex(0);  m_data.fillOrg(selOrg);  selAcct.setName("Account_ID");  selAcct.addEventListener(Events.ON_CLICK,this);  selAcct.setLabel("");  selAcct.setImage("/images/Find16.png");  statusLine.setValue(" " + Msg.getMsg(Env.getCtx(),"ViewerOptions"));  selOrg.setSelectedIndex(0);  sortBy1.setSelectedIndex(0);  sortBy2.setSelectedIndex(0);  sortBy3.setSelectedIndex(0);  sortBy4.setSelectedIndex(0);  boolean haveDoc=(AD_Table_ID != 0 && Record_ID != 0);  selDocument.setChecked(haveDoc);  actionDocument();  actionTable();  statusLine.setText(" " + Msg.getMsg(Env.getCtx(),"ViewerOptions"));  if (haveDoc) {    m_data.AD_Table_ID=AD_Table_ID;    m_data.Record_ID=Record_ID;    actionQuery();    String keyColumn=selRecord.getName();    String tableName=keyColumn.substring(0,keyColumn.length() - 3);    String selectSQL=keyColumn + "=" + Record_ID;    m_data.buttonRecordID.put(keyColumn,Record_ID);    selRecord.setLabel(m_data.getButtonText(tableName,keyColumn,selectSQL));  }  if (tabResult.isSelected())   stateChanged();}  }
class C{  @Override public final int length(){  return _length;}  }
class C{  public void min(RaptorState other){  int nStops=this.bestTimes.length;  for (int stop=0; stop < nStops; stop++) {    if (other.bestTimes[stop] <= this.bestTimes[stop]) {      this.bestTimes[stop]=other.bestTimes[stop];      this.transferStop[stop]=other.transferStop[stop];      this.inVehicleTravelTime[stop]=other.inVehicleTravelTime[stop];      this.waitTime[stop]=other.waitTime[stop] + (other.departureTime - this.departureTime);    }    if (other.bestNonTransferTimes[stop] <= this.bestNonTransferTimes[stop]) {      this.bestNonTransferTimes[stop]=other.bestNonTransferTimes[stop];      this.previousPatterns[stop]=other.previousPatterns[stop];      this.previousStop[stop]=other.previousStop[stop];      this.nonTransferInVehicleTravelTime[stop]=other.nonTransferInVehicleTravelTime[stop];      this.nonTransferWaitTime[stop]=other.nonTransferWaitTime[stop] + (other.departureTime - this.departureTime);    }  }}  }
class C{  public AtomicLong read(String value){  Long number=Long.valueOf(value);  return new AtomicLong(number);}  }
class C{  void tryDeregisterAnimated(){  deregisterAnimatedInternal();}  }
class C{  public boolean isAttributeSpecified(int attributeHandle){  return true;}  }
class C{  protected void initializeMacroCommand(){}  }
class C{  @SuppressWarnings("unchecked") @Override public void paintIcon(Component c,Graphics g,int x,int y){  SeaGlassPainter painter=(SeaGlassPainter)UIManager.get(prefix + "[Enabled]." + key);  if (painter != null) {    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;    Graphics2D gfx=(Graphics2D)g;    gfx.translate(x,y);    painter.paint(gfx,jc,width,height);    gfx.translate(-x,-y);  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover-cancel") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList failoverCancel(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() > 1) {    throw APIException.badRequests.failOverCancelCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  ArgValidator.checkFieldUriType(copy.getCopyID(),Volume.class,"id");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.FAILOVER_CANCEL.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);    copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.FAILOVER_CANCEL.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public Object createImplementation(){  if (AndroidImplementation.getInstance() != null) {    return AndroidImplementation.getInstance();  }  return new AndroidImplementation();}  }
class C{  public ValidateableSectionPart(Section section,BasicFormPage page,String sectionName){  super(section);  this.page=page;  page.getDataBindingManager().bindSection(this,sectionName,page.getId());}  }
class C{  private Map<Id<TransitRoute>,List<Id<Link>>> createRoutesNetworkLinksMap(TransitSchedule transitSchedule){  log.info("Start generating transitRouteNetworkLinksMap -- thread = " + threadName);  Map<Id<TransitRoute>,List<Id<Link>>> transitRouteNetworkLinksMap=new HashMap<Id<TransitRoute>,List<Id<Link>>>();  for (  TransitLine transitLine : transitSchedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      List<Id<Link>> fullLinkIdList=new LinkedList<Id<Link>>();      fullLinkIdList.add(transitRoute.getRoute().getStartLinkId());      fullLinkIdList.addAll(transitRoute.getRoute().getLinkIds());      fullLinkIdList.add(transitRoute.getRoute().getEndLinkId());      transitRouteNetworkLinksMap.put(transitRoute.getId(),fullLinkIdList);    }  }  log.info("Finish generating transitRouteNetworkLinksMap -- thread = " + threadName);  return transitRouteNetworkLinksMap;}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  public RescaleOp(float scaleFactor,float offset,RenderingHints hints){  length=1;  this.scaleFactors=new float[1];  this.offsets=new float[1];  this.scaleFactors[0]=scaleFactor;  this.offsets[0]=offset;  this.hints=hints;}  }
class C{  public void locate(GL10 gl){  if (dirty) {    GLU.gluLookAt(gl,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,upX,upY,upZ);  }}  }
class C{  public boolean doAuthenticate(HashMap userProps) throws Exception {  String n=(String)userProps.get("username");  String p=(String)userProps.get("password");  User u=new UserDAO().get(n);  if (u != null) {    String pwd=u.getPassword();    if (checkPassword(p,pwd)) {      sLog.debug("Db authentication passed ... ");      setAuthSucceeded(true);      iExternalUid=u.getExternalUniqueId();      setUser(n);      return true;    }  }  return false;}  }
class C{  public long pop(){  return items[--size];}  }
class C{  public boolean isExpiredOn(final Date date){  if ((x509Certificate == null) || (date == null)) {    return true;  }  return x509Certificate.getNotAfter().before(date);}  }
class C{  public static String checkAttribute(String attributeValue,String defaultValue){  return attributeValue.isEmpty() ? defaultValue : attributeValue;}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException {  try {    stream.defaultReadObject();    m_clones=new IteratorPool(this);  } catch (  ClassNotFoundException cnfe) {    throw new javax.xml.transform.TransformerException(cnfe);  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public void blend(int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh,int mode){  g.blend(sx,sy,sw,sh,dx,dy,dw,dh,mode);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){  if (array != null) {    final int arrayLength=Array.getLength(array);    final Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);    System.arraycopy(array,0,newArray,0,arrayLength);    return newArray;  }  return Array.newInstance(newArrayComponentType,1);}  }
class C{  public static void wrapThreadLoader(ClassLoader ldr,Runnable c){  Thread curThread=Thread.currentThread();  ClassLoader ctxLdr=curThread.getContextClassLoader();  try {    curThread.setContextClassLoader(ldr);    c.run();  }  finally {    curThread.setContextClassLoader(ctxLdr);  }}  }
class C{  @SuppressWarnings({"SameParameterValue"}) public static void testPrint(int a,int b){  ChoiceGenerator cg=new ChoiceGenerator(a,b);  int[] choice;  System.out.println();  System.out.println("Printing combinations for " + a + " choose "+ b+ ":");  System.out.println();  while ((choice=cg.next()) != null) {    if (choice.length == 0) {      System.out.println("zero-length array");    } else {      for (      int aChoice : choice) {        System.out.print(aChoice + "\t");      }      System.out.println();    }  }  System.out.println();}  }
class C{  public final Vec3D modSelf(float bx,float by,float bz){  x%=bx;  y%=by;  z%=bz;  return this;}  }
class C{  @Post public ResetOutput postHandler(DebugEventPost postData){  ResetOutput output=new ResetOutput();  String param1=(String)getRequestAttributes().get("param1");  String param2=(String)getRequestAttributes().get("param2");  if (postData.getReset() != null && postData.getReset()) {    Option choice=Option.ERROR_BAD_PARAM;    if (param1 == null) {      param1="all";      choice=Option.ALL;    } else     if (param1.equals("all")) {      choice=Option.ALL;    } else     if (param2 == null) {      boolean isRegistered=debugEvent.containsModuleName(param1);      if (isRegistered) {        choice=Option.ONE_MODULE;      } else {        choice=Option.ERROR_BAD_MODULE_NAME;      }    } else {      boolean isRegistered=debugEvent.containsModuleEventName(param1,param2);      if (isRegistered) {        choice=Option.ONE_MODULE_EVENT;      } else {        choice=Option.ERROR_BAD_MODULE_EVENT_NAME;      }    }switch (choice) {case ALL:      debugEvent.resetAllEvents();    break;case ONE_MODULE:  debugEvent.resetAllModuleEvents(param1);break;case ONE_MODULE_EVENT:debugEvent.resetSingleEvent(param1,param2);break;case ERROR_BAD_MODULE_NAME:output.error="Module name has no corresponding registered events";break;case ERROR_BAD_MODULE_EVENT_NAME:output.error="Event not registered";break;case ERROR_BAD_PARAM:output.error="Bad param";}}return output;}  }
class C{  private void closeOtherOplogs(){  Oplog[] oplogs=getAllOplogs();  for (int i=1; i < oplogs.length; i++) {    oplogs[i].finishKrf();    oplogs[i].close();    removeOplog(oplogs[i].getOplogId());  }}  }
class C{  private boolean isConditional(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenIDENT:case Symbols.TokenOTHER:      continue;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:    return false;default :  return true;}}}  }
class C{  public URIPropertyMatcherBuilder uri(){  return new URIPropertyMatcherBuilder(this,"URI",null);}  }
class C{  public UpdateConstraintException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static ExampleSet createExampleSet(Object[][] data){  return createExampleSet(data,null);}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);  if (nested != null)   nested.printStackTrace(ps);}  }
class C{  void paintBorder(Graphics graphics){  Graphics2D g=(Graphics2D)graphics.create();  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g.setColor(Colors.BUTTON_BORDER);  int radius=RapidLookAndFeel.CORNER_DEFAULT_RADIUS;switch (position) {case SwingConstants.LEFT:    g.drawRoundRect(0,0,button.getWidth() + radius,button.getHeight() - 1,radius,radius);  break;case SwingConstants.CENTER:g.drawRect(0,0,button.getWidth() + radius,button.getHeight() - 1);break;default :g.drawRoundRect(-radius,0,button.getWidth() + radius - 1,button.getHeight() - 1,radius,radius);g.drawLine(0,0,0,button.getHeight());break;}}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  protected void deleteExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=null;  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  if ((errors=validateFormParaEliminarCampo(camposTablaForm)) == null) {    GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);    String idCamposABorrar[]=camposTablaForm.getCamposABorrar();    if (!isCampoTablaEnUso(request,idCamposABorrar))     descripcionService.deleteCamposTabla(idCamposABorrar);  } else {    ErrorsTag.saveErrors(request,errors);  }  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  @Override protected void buildSprites(Food entity,final Map<Object,Sprite> map){  final SpriteStore store=SpriteStore.get();  ZoneInfo info=ZoneInfo.get();  final Sprite tiles=store.getModifiedSprite(translate(entity.getType()),info.getZoneColor(),info.getColorMethod());  final int theight=tiles.getHeight();  int i=0;  for (int y=0; y < theight; y+=IGameScreen.SIZE_UNIT_PIXELS) {    map.put(Integer.valueOf(i++),store.getTile(tiles,0,y,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS));  }}  }
class C{  public CodeValue findByAttributeName(String codeTypeName,String codeAttributeName){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<CodeValue> query=builder.createQuery(CodeValue.class);    Root<CodeValue> from=query.from(CodeValue.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != codeAttributeName) {      Join<CodeValue,CodeAttribute> codeAttribute=from.join("codeAttribute");      Predicate predicate=builder.equal(codeAttribute.get("name"),codeAttributeName);      predicates.add(predicate);      Join<CodeAttribute,CodeType> codeType=codeAttribute.join("codeType");      Predicate predicate1=builder.equal(codeType.get("name"),codeTypeName);      predicates.add(predicate1);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<CodeValue> typedQuery=entityManager.createQuery(query);    List<CodeValue> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.843 -0500",hash_original_method="7ECE87C8E0B6AC612BF4B05EB3BE89DA",hash_generated_method="5061C51BA9AB55A45A330545ECB336D2") public void disconnected(){}  }
class C{  public static boolean deodexApk(File odexFile,File dexFile){  String cmd[]={"java",Cfg.getMaxHeadSizeArg(),"-jar",S.getAot2Dex(),odexFile.getAbsolutePath(),S.getBootTmpDex().getAbsolutePath()};  CmdUtils.runCommand(cmd);  if (dexFile.exists()) {    return true;  }  ArrayList<File> failSafeOat2dex=ArrayUtils.deletedupricates(FilesUtils.searchrecursively(S.OAT2DEX_FAILSAFE_PATH,".jar"));  for (  File f : failSafeOat2dex) {    Logger.appendLog("[Deodexer][W]" + R.getString(S.LOG_WARNING) + " odex file : "+ odexFile+ " fail trying with "+ f.getName());    String cmd1[]={"java",Cfg.getMaxHeadSizeArg(),"-jar",f.getAbsolutePath(),odexFile.getAbsolutePath(),S.getBootTmpDex().getAbsolutePath()};    CmdUtils.runCommand(cmd1);    if (dexFile.exists()) {      return true;    }  }  return dexFile.exists();}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  static void accumSingleSeg(int counts[],SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final int segCounts[];  if (map == null) {    segCounts=counts;  } else {    segCounts=new int[1 + si.getValueCount()];  }  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    segCounts[1 + si.getOrd(doc)]++;  }  if (map != null) {    migrateGlobal(counts,segCounts,subIndex,map);  }}  }
class C{  public boolean attempt(int old,int value,Offset offset){  return false;}  }
class C{  private static void delete(IgniteFileSystem fs,IgfsPath path) throws IgniteException {  assert fs != null;  assert path != null;  if (fs.exists(path)) {    boolean isFile=fs.info(path).isFile();    try {      fs.delete(path,true);      System.out.println();      System.out.println(">>> Deleted " + (isFile ? "file" : "directory") + ": "+ path);    } catch (    IgfsException e) {      System.out.println();      System.out.println(">>> Failed to delete " + (isFile ? "file" : "directory") + " [path="+ path+ ", msg="+ e.getMessage()+ ']');    }  } else {    System.out.println();    System.out.println(">>> Won't delete file or directory (doesn't exist): " + path);  }}  }
class C{  @LargeTest public void testThumbnailMPEG4withMorethanFileDuration() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  boolean flagForException=false;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 2;  final int outHeight=mediaVideoItem.getHeight() / 2;  final long atTime=mediaVideoItem.getDuration() + 100;  try {    final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Thumbnail duration is more than file duration",flagForException);}  }
class C{  private static void testSubnormalPowers(){  boolean failed=false;  BigDecimal TWO=BigDecimal.valueOf(2);  BigDecimal ulp_BD=new BigDecimal(Double.MIN_VALUE);  for (int i=-1073; i <= -1022; i++) {    double d=Math.scalb(1.0,i);    BigDecimal d_BD=new BigDecimal(d);    BigDecimal lowerBound=d_BD.subtract(ulp_BD.divide(TWO));    BigDecimal upperBound=d_BD.add(ulp_BD.divide(TWO));    double convertedLowerBound=Double.parseDouble(lowerBound.toString());    double convertedUpperBound=Double.parseDouble(upperBound.toString());    if (convertedLowerBound != d) {      failed=true;      System.out.printf("2^%d lowerBound converts as %a %s%n",i,convertedLowerBound,lowerBound);    }    if (convertedUpperBound != d) {      failed=true;      System.out.printf("2^%d upperBound converts as %a %s%n",i,convertedUpperBound,upperBound);    }  }  BigDecimal minValue=new BigDecimal(Double.MIN_VALUE);  if (Double.parseDouble(minValue.multiply(new BigDecimal(0.5)).toString()) != 0.0) {    failed=true;    System.out.printf("0.5*MIN_VALUE doesn't convert 0%n");  }  if (Double.parseDouble(minValue.multiply(new BigDecimal(0.50000000001)).toString()) != Double.MIN_VALUE) {    failed=true;    System.out.printf("0.50000000001*MIN_VALUE doesn't convert to MIN_VALUE%n");  }  if (Double.parseDouble(minValue.multiply(new BigDecimal(1.49999999999)).toString()) != Double.MIN_VALUE) {    failed=true;    System.out.printf("1.49999999999*MIN_VALUE doesn't convert to MIN_VALUE%n");  }  if (Double.parseDouble(minValue.multiply(new BigDecimal(1.5)).toString()) != 2 * Double.MIN_VALUE) {    failed=true;    System.out.printf("1.5*MIN_VALUE doesn't convert to 2*MIN_VALUE%n");  }  if (failed)   throw new RuntimeException("Inconsistent conversion");}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MessageOutputStream(IChannel channel){  this.channel=channel;}  }
class C{  public String html_api_call(Method m,Method event){  String out=String.format("<h5 api='%s|%s'>",short_sig(m),short_sig(event));  String full_cname=m.getCname();  String method_name=m.getName().replaceAll("<","&lt;") + " ";  String txt=String.format("<span style='%s' title='%s'>%s</span>","color:green",full_cname,extract_classname(full_cname));  txt+=" " + method_name;  String dbSig=m.getSignature();  out+=api_xref(dbSig,txt);  txt="(";  String delim="";  for (  ArgumentValue arg : m.getArgs()) {    txt+=delim;    if (arg.isType()) {      String full_arg_cname=arg.toString();      txt+=String.format("<a href='%s/%s.html' target=%s title='%s'><span style='%s'>%s</span></a>",ANDROID_API_BASE,full_arg_cname.replace(".","/").replace("$","."),TARGET,full_arg_cname,"color:green",extract_classname(full_arg_cname));    } else {      txt+=arg.toString();    }    delim=", ";  }  txt+=")";  out+=txt + "</h5>";  out+="<div style='padding-left:15px' class=calls>";  out+=source_locations_xref(m);  out+="</div>";  return (out + "\n");}  }
class C{  public static StringBuffer createServerStringBuffer(String scheme,String server,int port){  StringBuffer url=new StringBuffer();  if (port < 0) {    port=80;  }  url.append(scheme);  url.append("://");  url.append(server);  if ((scheme.equals("http") && (port != 80)) || (scheme.equals("https") && (port != 443))) {    url.append(':');    url.append(port);  }  return url;}  }
class C{  public static BufferedWriter newWriter(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),charset));}  }
class C{  public static float[] RGBtoHSL(int r,int g,int b,float[] hsl){  if (hsl == null) {    hsl=new float[3];  } else   if (hsl.length < 3) {    throw new IllegalArgumentException("hsl array must have a length of" + " at least 3");  }  if (r < 0)   r=0; else   if (r > 255)   r=255;  if (g < 0)   g=0; else   if (g > 255)   g=255;  if (b < 0)   b=0; else   if (b > 255)   b=255;  float var_R=(r / 255f);  float var_G=(g / 255f);  float var_B=(b / 255f);  float var_Min;  float var_Max;  float del_Max;  if (var_R > var_G) {    var_Min=var_G;    var_Max=var_R;  } else {    var_Min=var_R;    var_Max=var_G;  }  if (var_B > var_Max) {    var_Max=var_B;  }  if (var_B < var_Min) {    var_Min=var_B;  }  del_Max=var_Max - var_Min;  float H, S, L;  L=(var_Max + var_Min) / 2f;  if (del_Max - 0.01f <= 0.0f) {    H=0;    S=0;  } else {    if (L < 0.5f) {      S=del_Max / (var_Max + var_Min);    } else {      S=del_Max / (2 - var_Max - var_Min);    }    float del_R=(((var_Max - var_R) / 6f) + (del_Max / 2f)) / del_Max;    float del_G=(((var_Max - var_G) / 6f) + (del_Max / 2f)) / del_Max;    float del_B=(((var_Max - var_B) / 6f) + (del_Max / 2f)) / del_Max;    if (var_R == var_Max) {      H=del_B - del_G;    } else     if (var_G == var_Max) {      H=(1 / 3f) + del_R - del_B;    } else {      H=(2 / 3f) + del_G - del_R;    }    if (H < 0) {      H+=1;    }    if (H > 1) {      H-=1;    }  }  hsl[0]=H;  hsl[1]=S;  hsl[2]=L;  return hsl;}  }
class C{  public boolean isReadOnly(){  return readOnly;}  }
class C{  public void randomizeIncomingWeights(){  for (Iterator<Neuron> i=getNeuronList().iterator(); i.hasNext(); ) {    Neuron n=i.next();    for (    Synapse s : n.getFanIn()) {      s.randomize();    }  }}  }
class C{  private final ResultSetImpl sendFileToServer(StatementImpl callingStatement,String fileName) throws SQLException {  if (this.useCompression) {    this.compressedPacketSequence++;  }  Buffer filePacket=(this.loadFileBufRef == null) ? null : this.loadFileBufRef.get();  int bigPacketLength=Math.min(this.connection.getMaxAllowedPacket() - (HEADER_LENGTH * 3),alignPacketSize(this.connection.getMaxAllowedPacket() - 16,4096) - (HEADER_LENGTH * 3));  int oneMeg=1024 * 1024;  int smallerPacketSizeAligned=Math.min(oneMeg - (HEADER_LENGTH * 3),alignPacketSize(oneMeg - 16,4096) - (HEADER_LENGTH * 3));  int packetLength=Math.min(smallerPacketSizeAligned,bigPacketLength);  if (filePacket == null) {    try {      filePacket=new Buffer((packetLength + HEADER_LENGTH));      this.loadFileBufRef=new SoftReference<Buffer>(filePacket);    } catch (    OutOfMemoryError oom) {      throw SQLError.createSQLException("Could not allocate packet of " + packetLength + " bytes required for LOAD DATA LOCAL INFILE operation."+ " Try increasing max heap allocation for JVM or decreasing server variable 'max_allowed_packet'",SQLError.SQL_STATE_MEMORY_ALLOCATION_FAILURE,getExceptionInterceptor());    }  }  filePacket.clear();  send(filePacket,0);  byte[] fileBuf=new byte[packetLength];  BufferedInputStream fileIn=null;  try {    if (!this.connection.getAllowLoadLocalInfile()) {      throw SQLError.createSQLException(Messages.getString("MysqlIO.LoadDataLocalNotAllowed"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());    }    InputStream hookedStream=null;    if (callingStatement != null) {      hookedStream=callingStatement.getLocalInfileInputStream();    }    if (hookedStream != null) {      fileIn=new BufferedInputStream(hookedStream);    } else     if (!this.connection.getAllowUrlInLocalInfile()) {      fileIn=new BufferedInputStream(new FileInputStream(fileName));    } else {      if (fileName.indexOf(':') != -1) {        try {          URL urlFromFileName=new URL(fileName);          fileIn=new BufferedInputStream(urlFromFileName.openStream());        } catch (        MalformedURLException badUrlEx) {          fileIn=new BufferedInputStream(new FileInputStream(fileName));        }      } else {        fileIn=new BufferedInputStream(new FileInputStream(fileName));      }    }    int bytesRead=0;    while ((bytesRead=fileIn.read(fileBuf)) != -1) {      filePacket.clear();      filePacket.writeBytesNoNull(fileBuf,0,bytesRead);      send(filePacket,filePacket.getPosition());    }  } catch (  IOException ioEx) {    StringBuilder messageBuf=new StringBuilder(Messages.getString("MysqlIO.60"));    if (fileName != null && !this.connection.getParanoid()) {      messageBuf.append("'");      messageBuf.append(fileName);      messageBuf.append("'");    }    messageBuf.append(Messages.getString("MysqlIO.63"));    if (!this.connection.getParanoid()) {      messageBuf.append(Messages.getString("MysqlIO.64"));      messageBuf.append(Util.stackTraceToString(ioEx));    }    throw SQLError.createSQLException(messageBuf.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  } finally {    if (fileIn != null) {      try {        fileIn.close();      } catch (      Exception ex) {        SQLException sqlEx=SQLError.createSQLException(Messages.getString("MysqlIO.65"),SQLError.SQL_STATE_GENERAL_ERROR,ex,getExceptionInterceptor());        throw sqlEx;      }      fileIn=null;    } else {      filePacket.clear();      send(filePacket,filePacket.getPosition());      checkErrorPacket();    }  }  filePacket.clear();  send(filePacket,filePacket.getPosition());  Buffer resultPacket=checkErrorPacket();  return buildResultSetWithUpdates(callingStatement,resultPacket);}  }
class C{  @Override void writeJournal(OutputStream os,byte[] buffer,int offset,BlobOutputStream blob) throws IOException {  if (blob == null) {    BitsUtil.writeInt16(os,0);    return;  }  if (blob.isLargeBlob()) {    blob.flushBlob();    BitsUtil.writeInt16(os,LARGE_BLOB_MASK | 4);    BitsUtil.writeInt(os,blob.getBlobId());    return;  }  int len=blob.getSize();  if (len >= 32 * 1024) {    throw new IllegalStateException("TOO_BIG: " + len);  }  BitsUtil.writeInt16(os,len);  blob.writeToStream(os);}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  window.setTitle(getTitle());  Integer docTypeId=(Integer)getGridTab().getValue("C_DocTypeTarget_ID");  MDocType docType=MDocType.get(Env.getCtx(),docTypeId);  if (!MDocType.DOCBASETYPE_APCreditMemo.equals(docType.getDocBaseType())) {    rmaLabel.setVisible(false);    rmaField.setVisible(false);  }  initBPartner(true);  bPartnerField.addValueChangeListener(this);  return true;}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  GeneralPath shape=new GeneralPath();  shape.append(new Arc2D.Double(-9.0,-7.0,10,14,0.0,25.5,Arc2D.OPEN),true);  shape.append(new Arc2D.Double(0.0,-7.0,10,14,154.5,25.5,Arc2D.OPEN),true);  shape.closePath();  getTransform().setToTranslation(plotArea.getMinX(),plotArea.getMaxY());  getTransform().scale(plotArea.getWidth(),plotArea.getHeight() / 3);  shape.transform(getTransform());  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    shape.transform(getTransform());  }  defaultDisplay(g2,shape);}  }
class C{  public void errPos(int pos){  errPos=pos;}  }
class C{  private List<Statistics> removeFailed(List<Statistics> statistics){  List<Statistics> result=new ArrayList<>();  for (  Statistics statistic : statistics) {    if (statistic.getSucceeded())     result.add(statistic);  }  return result;}  }
class C{  public List<String> localText(){  final List<String> result=new ArrayList<String>();  for (  Object child : this.children) {    if (!(child instanceof Node)) {      result.add(child.toString());    }  }  return result;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeHeader(v)) {      if (mDataSetObserver != null) {        mDataSetObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  protected GeneratorConfigurationImpl(){  super();}  }
class C{  public boolean containsKey(int key){  Entry tab[]=table;  int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.hash == hash) {      return true;    }  }  return false;}  }
class C{  public String dateFormatTipText(){  return "The formatting string to use for parsing the date replacement value";}  }
class C{  protected boolean isPrimitive(Type type){  requireNonNull(type);switch (type.getTypeName()) {case "byte":case "short":case "int":case "long":case "float":case "double":case "boolean":case "char":    return true;default :  return false;}}  }
class C{  public void addProjectionStackTrigger(ProjectionStackTrigger trigger){  trigger.addActionListener(this);  if (triggers == null) {    triggers=new ProjectionStackSupport();  }  triggers.add(trigger);  trigger.updateProjectionStackStatus((backStack != null && backStack.size() > 1),(forwardStack != null && !forwardStack.empty()));}  }
class C{  public CreateClassResetClassAdapter(ClassVisitor visitor,String className,boolean removeFinalModifierOnStaticFields){  super(Opcodes.ASM5,visitor);  this.className=className;  this.removeFinalModifierOnStaticFields=removeFinalModifierOnStaticFields;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.268 -0400",hash_original_method="27E0D57FF2AEBC70EE6BF760C51E525C",hash_generated_method="70C186BF3C020F97975A93D7ABF97EE3") public final int length(){  return array.length;}  }
class C{  public static void bodyContainsIllegalCode(Method method,Exception additionalInformation){  Class<?> clazz=method.getClazz();  if (isNull(clazz))   clazz=JMapper.class;  String originalName=method.getOriginalName();  if (isNull(originalName))   originalName=method.getName();  String message=clazz != JMapper.class ? MSG.INSTANCE.message(conversionBodyIllegalCode,clazz.getSimpleName(),originalName,"" + additionalInformation.getMessage()) : MSG.INSTANCE.message(conversionBodyIllegalCode2,"" + additionalInformation.getMessage());  throw new ConversionBodyIllegalCodeException(message);}  }
class C{  static public void delete(File path,boolean check){  if (path.exists()) {    if (check) {      for (      String f : FilesToKeep) {        if (path.getName().toLowerCase().endsWith(f)) {          if (logger.isTraceEnabled())           logger.trace("File not deleted (on exception list): " + path);          return;        }      }    }    if (path.isDirectory()) {      File[] files=path.listFiles();      if (files != null)       for (int i=0; i < files.length; i++) {        delete(files[i],check);      }    }    path.delete();  }}  }
class C{  protected void bananaSplit(ValueNode<DecompoundedWord> aParent,int aDepth){  if (aDepth > maxTreeDepth) {    return;  }  for (int i=0; i < aParent.getValue().getSplits().size(); i++) {    Fragment element=aParent.getValue().getSplits().get(i);    if (element.shouldSplitAgain()) {      DecompoundedWord result=makeSplit(element.getWord());      if (result != null) {        DecompoundedWord copy=aParent.getValue().createCopy();        if (result.getSplits().size() > 1) {          result.getSplits().get(0).setSplitAgain(true);          result.getSplits().get(1).setSplitAgain(true);          copy.replaceSplitElement(i,result);          ValueNode<DecompoundedWord> child=new ValueNode<DecompoundedWord>(copy);          aParent.addChild(child);          bananaSplit(child,aDepth + 1);        } else         if (result.getSplits().size() == 1 && !result.equals(aParent.getValue())) {          copy.replaceSplitElement(i,result);          ValueNode<DecompoundedWord> child=new ValueNode<DecompoundedWord>(copy);          aParent.addChild(child);        }      }    }  }}  }
class C{  private void init(SSLParametersImpl sslParameters) throws IOException {  init(sslParameters,NativeCrypto.getDefaultProtocols(),NativeCrypto.getDefaultCipherSuites());}  }
class C{  public void execQuery(String sql,ExecQueryCallbackFunctionIF aListener) throws GenericEntityException {  if (_connection == null) {    getConnection();  }  try {    if (Debug.verboseOn())     Debug.logVerbose("[SQLProcessor.execQuery]: " + sql,module);    executeQuery(sql);    boolean keepGoing=true;    while (keepGoing && _rs.next()) {      keepGoing=aListener.processNextRow(_rs);    }    if (_manualTX) {      _connection.commit();    }  } catch (  SQLException sqle) {    Debug.logWarning("[SQLProcessor.execQuery]: SQL Exception while executing the following:\n" + sql + "\nError was:",module);    Debug.logWarning(sqle.getMessage(),module);    throw new GenericEntityException("SQL Exception while executing the following:" + _sql,sqle);  } finally {    close();  }}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<java.lang.Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  public NamespaceSupport2(){  reset();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.732 -0500",hash_original_method="D10C36D7B6CDC51D018139E7A34B7076",hash_generated_method="75F94075F8DDFE48734272B5192F0A28") public boolean isStatusReportMessage(){  return mWrappedSmsMessage.isStatusReportMessage();}  }
class C{  public void actionPerformed(ActionEvent e){  optionPane.setValue(btnString1);}  }
class C{  public void show(){  setVisible(true);}  }
class C{  public final boolean isCaretVisible(){  return (!caretBlinks || blink) && caretVisible;}  }
class C{  public IsindexView(Element elem){  super(elem);}  }
class C{  public static String makeDescriptor(Class[] params,Class retType){  StringBuffer sbuf=new StringBuffer();  sbuf.append('(');  for (int i=0; i < params.length; i++)   makeDesc(sbuf,params[i]);  sbuf.append(')');  if (retType != null)   makeDesc(sbuf,retType);  return sbuf.toString();}  }
class C{  @Override public boolean supportsCatalogsInDataManipulation(){  debugCodeCall("supportsCatalogsInDataManipulation");  return true;}  }
class C{  public SpatialDataStore(File directory,String dataFile,Serializer serializer,Integer cacheSize){  this.dataFile=dataFile;  if (!directory.exists())   directory.mkdirs();  spatialId=new IdStore(directory,dataFile);  DBMaker dbm=DBMaker.newFileDB(new File(directory,dataFile + ".db")).mmapFileEnableIfSupported().cacheLRUEnable().cacheSize(cacheSize).closeOnJvmShutdown();  db=dbm.make();  BTreeMapMaker maker=db.createTreeMap(dataFile).valueSerializer(serializer).keySerializer(BTreeKeySerializer.ZERO_OR_POSITIVE_LONG);  map=maker.makeOrGet();  tileIndex=db.createTreeSet(dataFile + "_tileIndex").serializer(BTreeKeySerializer.TUPLE3).makeOrGet();}  }
class C{  public AsyncLogTarget(final LogTarget logTarget){  this(logTarget,15);}  }
class C{  public ContentEncodingHeader createContentEncodingHeader(String encoding) throws ParseException {  if (encoding == null)   throw new NullPointerException("null encoding");  ContentEncoding c=new ContentEncoding();  c.setEncoding(encoding);  return c;}  }
class C{  private void checkAndUpdate(DurationFieldType type,int[] values,int newValue){  int index=indexOf(type);  if (index == -1) {    if (newValue != 0) {      throw new IllegalArgumentException("Period does not support field '" + type.getName() + "'");    }  } else {    values[index]=newValue;  }}  }
class C{  public ZipFileStructureProvider(ZipFile sourceFile){  super();  zipFile=sourceFile;}  }
class C{  public BayesPm(Graph graph,BayesPm oldBayesPm){  this(graph,oldBayesPm,2,2);}  }
class C{  @SuppressWarnings("rawtypes") private CIMInstance createAlertIndication(){  CIMObjectPath objPath=CimObjectPathCreator.createInstance(ALERT_INDICATION_CLASS_NAME);  CIMProperty[] properties=new CIMProperty[]{new CIMProperty<String>(ALERTING_MANGED_ELEMENT_KEY,CIMDataType.STRING_T,ALERTING_MANGED_ELEMENT_VALUE)};  CIMInstance indication=new CIMInstance(objPath,properties);  return indication;}  }
class C{  private static String regQueryValueEx(String subKey,String valueName,int regLevel){  if (isValueExist(subKey,valueName,regLevel)) {    int hKey=getHKeyByLevel(regLevel);    return WinRegistryWrapper.WinRegQueryValueEx(hKey,subKey,valueName);  }  return null;}  }
class C{  private static boolean safeDestroy(RMID rmid,long timeAllowed){  DestroyThread destroyThread=new DestroyThread(rmid);  destroyThread.start();  try {    destroyThread.join(timeAllowed);  } catch (  InterruptedException ie) {    Thread.currentThread().interrupt();  }  return destroyThread.shutdownSucceeded();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static boolean eq(double v1,double v2){  return v1 == v2;}  }
class C{  protected void updateCustomNotificationMediaState(@Nullable RemoteViews customNotification){  NotificationMediaState state=notificationInfo.getMediaState();  if (customNotification == null || state == null) {    return;  }  customNotification.setImageViewResource(R.id.playlistcore_notification_playpause,state.isPlaying() ? R.drawable.playlistcore_notification_pause : R.drawable.playlistcore_notification_play);  customNotification.setInt(R.id.playlistcore_notification_prev,"setVisibility",state.isPreviousEnabled() ? View.VISIBLE : View.GONE);  customNotification.setInt(R.id.playlistcore_notification_next,"setVisibility",state.isNextEnabled() ? View.VISIBLE : View.GONE);}  }
class C{  public static void notifyHeat(final JSONObject message){  final String articleId=message.optString(Article.ARTICLE_T_ID);  final String msgStr=message.toString();synchronized (SESSIONS) {    for (    final Map.Entry<Session,String> entry : SESSIONS.entrySet()) {      final Session session=entry.getKey();      final String articleIds=entry.getValue();      if (!StringUtils.contains(articleIds,articleId)) {        continue;      }      if (session.isOpen()) {        session.getAsyncRemote().sendText(msgStr);      }    }  }}  }
class C{  private static int[] generateRandomArray(int size){  int[] ret=new int[size];  Random rnd=new Random(FIXED_SEED);  for (int i=0; i < ret.length; i++)   ret[i]=rnd.nextInt(100);  return ret;}  }
class C{  public void updateTime(ActionEvent ae){}  }
class C{  public void testTurkishLowerCaseFilter() throws Exception {  TokenStream stream=whitespaceMockTokenizer("\u0130STANBUL \u0130ZM\u0130R ISPARTA");  TurkishLowerCaseFilter filter=new TurkishLowerCaseFilter(stream);  assertTokenStreamContents(filter,new String[]{"istanbul","izmir","\u0131sparta"});}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public void configure(){  SerialTrafficController tc=null;  tc=new SpecificTrafficController(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().setTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.connectPort(this);  this.getSystemConnectionMemo().setSerialAddress(new jmri.jmrix.powerline.SerialAddress(this.getSystemConnectionMemo()));}  }
class C{  public long deleteAttributeValue(final long attributeValuePk){  final AttrValueEntityCategory valueEntityCategory=attrValueEntityCategoryDao.findById(attributeValuePk);  if (Etype.IMAGE_BUSINESS_TYPE.equals(valueEntityCategory.getAttribute().getEtype().getBusinesstype())) {    imageService.deleteImage(valueEntityCategory.getVal(),Constants.CATEGORY_IMAGE_REPOSITORY_URL_PATTERN,systemService.getImageRepositoryDirectory());  }  attrValueEntityCategoryDao.delete(valueEntityCategory);  return valueEntityCategory.getCategory().getCategoryId();}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public static Calscale find(String value){  return enums.find(value);}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (StringUtils.left(line,SENTENCE_HEADER_LEN).equals(SENTENCE_HEADER)) {      break;    }    String[] fields=line.split(TAB);    if (fields.length != 3) {      throw new IOException("Invalid file format. Line needs to have 3 tab-separated fields.");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public DoNothingMutator(Config config){  super(config.global());}  }
class C{  public static BigInteger[] calculateZeroKnowledgeProof(BigInteger p,BigInteger q,BigInteger g,BigInteger gx,BigInteger x,String participantId,Digest digest,SecureRandom random){  BigInteger[] zeroKnowledgeProof=new BigInteger[2];  BigInteger vMin=ZERO;  BigInteger vMax=q.subtract(ONE);  BigInteger v=BigIntegers.createRandomInRange(vMin,vMax,random);  BigInteger gv=g.modPow(v,p);  BigInteger h=calculateHashForZeroKnowledgeProof(g,gv,gx,participantId,digest);  zeroKnowledgeProof[0]=gv;  zeroKnowledgeProof[1]=v.subtract(x.multiply(h)).mod(q);  return zeroKnowledgeProof;}  }
class C{  private void init(Context context,TypedArray attributes,int pagePosition,OnSlidePageChangeListener pageListener){  if (!isInEditMode()) {    this.mPagePosition=pagePosition;    this.mUserPageListener=pageListener;    LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);    mBinding=DataBindingUtil.inflate(inflater,R.layout.view_chart_slide,this,true);    mAttributes=attributes;    loadStyledAttributes(attributes);    injectViewsAndAttributes();    setListeners();  }}  }
class C{  public static void shuffle(List<?> list,Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  private void processTestStartedTag(String identifier){  ParsedTestInfo parsedResults=parseTestIdentifier(identifier);  TestResult testResult=getCurrentTestResult();  testResult.mTestClass=parsedResults.mTestClassName;  testResult.mTestName=parsedResults.mTestName;  TestIdentifier testId=new TestIdentifier(mFakePackagePrefix + testResult.mTestClass,testResult.mTestName);  for (  ITestRunListener listener : mTestListeners) {    listener.testStarted(testId);  }  setTestStarted();}  }
class C{  public JToggleButton(String text){  this(text,null,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static QName valueOf(CharSequence name){  QName qName=(QName)FULL_NAME_TO_QNAME.get(name);  return (qName != null) ? qName : QName.createNoNamespace(name.toString());}  }
class C{  public void incHarvestedForItem(String item,int count){  handlePrefixedCounting(item,count,"harvested.",harvested);}  }
class C{  public Matrix U(){  return U.clone();}  }
class C{  public SimpleNaiveBayesDocumentClassifier(IndexReader indexReader,Query query,String classFieldName,Map<String,Analyzer> field2analyzer,String... textFieldNames){  super(indexReader,null,query,classFieldName,textFieldNames);  this.field2analyzer=field2analyzer;}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.997 -0500",hash_original_method="5AFF5330EA4A2771143BBB17EF4E79AC",hash_generated_method="78E52953AC1E5604BF9C3F2A580E0082") public ErrorInfoParser(String errorInfo){  super(errorInfo);}  }
class C{  static BigInteger flipBit(BigInteger val,int n){  val.prepareJavaRepresentation();  int resSign=(val.sign == 0) ? 1 : val.sign;  int intCount=n >> 5;  int bitN=n & 31;  int resLength=Math.max(intCount + 1,val.numberLength) + 1;  int[] resDigits=new int[resLength];  int i;  int bitNumber=1 << bitN;  System.arraycopy(val.digits,0,resDigits,0,val.numberLength);  if (val.sign < 0) {    if (intCount >= val.numberLength) {      resDigits[intCount]=bitNumber;    } else {      int firstNonZeroDigit=val.getFirstNonzeroDigit();      if (intCount > firstNonZeroDigit) {        resDigits[intCount]^=bitNumber;      } else       if (intCount < firstNonZeroDigit) {        resDigits[intCount]=-bitNumber;        for (i=intCount + 1; i < firstNonZeroDigit; i++) {          resDigits[i]=-1;        }        resDigits[i]=resDigits[i]--;      } else {        i=intCount;        resDigits[i]=-((-resDigits[intCount]) ^ bitNumber);        if (resDigits[i] == 0) {          for (i++; resDigits[i] == -1; i++) {            resDigits[i]=0;          }          resDigits[i]++;        }      }    }  } else {    resDigits[intCount]^=bitNumber;  }  return new BigInteger(resSign,resLength,resDigits);}  }
class C{  @Override public Entry<K,V> pollFirstEntry(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static void updateHighlighting(final ZyGraph graph,final List<CSpecialInstruction> instructionResults){  Preconditions.checkNotNull(graph,"IE01686: Graph argument can not be null");  Preconditions.checkNotNull(instructionResults,"IE01689: Instruction results argument can not be null");  clearHighlighting(graph);  highlightInstructions(graph,instructionResults);}  }
class C{  int addLayer(ChildDrawable layer){  final LayerState st=mLayerState;  final int N=st.mChildren != null ? st.mChildren.length : 0;  final int i=st.mNum;  if (i >= N) {    final ChildDrawable[] nu=new ChildDrawable[N + 10];    if (i > 0) {      System.arraycopy(st.mChildren,0,nu,0,i);    }    st.mChildren=nu;  }  st.mChildren[i]=layer;  st.mNum++;  st.invalidateCache();  return i;}  }
class C{  public static double P_PrecisionMacro(int Y[][],int Ypred[][]){  int L=Y[0].length;  double m=0.0;  for (int j=0; j < L; j++) {    int[] y_j=MatrixUtils.getCol(Y,j);    int[] p_j=MatrixUtils.getCol(Ypred,j);    if (allMissing(y_j)) {      L--;      continue;    }    int[][] aligned=align(y_j,p_j);    int[] y_jAligned=aligned[0];    int[] p_jAligned=aligned[1];    double curPrec=P_Precision(y_jAligned,p_jAligned);    if (Double.isNaN(curPrec)) {      continue;    }    m+=curPrec;  }  return m / L;}  }
class C{  public void testBogusFormats() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  String msg=expected.getMessage();  assertTrue(msg,msg.contains("Unknown"));  assertTrue(msg,msg.contains("format"));  assertTrue(msg,msg.contains("bogus"));  expected=expectThrows(IllegalArgumentException.class,null);  msg=expected.getMessage();  assertTrue(msg,msg.contains("can not be specified"));  assertTrue(msg,msg.contains("format"));  assertTrue(msg,msg.contains("bogus"));}  }
class C{  public boolean hasContentFormat(){  return content_format != null;}  }
class C{  public void printText(String text,String color){  view.print(text,text.endsWith("\r"),color);  for (  ActionDelegate actionDelegate : actionDelegates) {    actionDelegate.onConsoleOutput(this);  }}  }
class C{  public boolean onKeyEvent(KeyEvent event){  if (isEnterActionKey(event.getKeyCode())) {    return false;  }  if (event.getAction() == KeyEvent.ACTION_UP) {    return mLastDownEventHandled;  }  mLastDownEventHandled=false;  AccessibilityWebContentKeyBinding binding=null;  for (  AccessibilityWebContentKeyBinding candidate : sBindings) {    if (event.getKeyCode() == candidate.getKeyCode() && event.hasModifiers(candidate.getModifiers())) {      binding=candidate;      break;    }  }  if (binding == null) {    return false;  }  for (int i=0, count=binding.getActionCount(); i < count; i++) {    int actionCode=binding.getActionCode(i);    String contentDescription=Integer.toHexString(binding.getAction(i));switch (actionCode) {case ACTION_SET_CURRENT_AXIS:      int axis=binding.getFirstArgument(i);    boolean sendEvent=(binding.getSecondArgument(i) == 1);  setCurrentAxis(axis,sendEvent,contentDescription);mLastDownEventHandled=true;break;case ACTION_TRAVERSE_CURRENT_AXIS:int direction=binding.getFirstArgument(i);if (direction == mLastDirection && mIsLastSelectionStringNull) {mIsLastSelectionStringNull=false;return false;}mLastDirection=direction;sendEvent=(binding.getSecondArgument(i) == 1);mLastDownEventHandled=traverseGivenAxis(direction,mCurrentAxis,sendEvent,contentDescription,false);break;case ACTION_TRAVERSE_GIVEN_AXIS:direction=binding.getFirstArgument(i);if (direction == mLastDirection && mIsLastSelectionStringNull) {mIsLastSelectionStringNull=false;return false;}mLastDirection=direction;axis=binding.getSecondArgument(i);sendEvent=(binding.getThirdArgument(i) == 1);traverseGivenAxis(direction,axis,sendEvent,contentDescription,false);mLastDownEventHandled=true;break;case ACTION_PERFORM_AXIS_TRANSITION:int fromAxis=binding.getFirstArgument(i);int toAxis=binding.getSecondArgument(i);sendEvent=(binding.getThirdArgument(i) == 1);performAxisTransition(fromAxis,toAxis,sendEvent,contentDescription);mLastDownEventHandled=true;break;case ACTION_TRAVERSE_DEFAULT_WEB_VIEW_BEHAVIOR_AXIS:if (mCurrentAxis == NAVIGATION_AXIS_DEFAULT_WEB_VIEW_BEHAVIOR) {mLastDirection=binding.getFirstArgument(i);sendEvent=(binding.getSecondArgument(i) == 1);traverseGivenAxis(mLastDirection,NAVIGATION_AXIS_DEFAULT_WEB_VIEW_BEHAVIOR,sendEvent,contentDescription,false);mLastDownEventHandled=false;} else {mLastDownEventHandled=true;}break;default :Log.w(LOG_TAG,"Unknown action code: " + actionCode);}}return mLastDownEventHandled;}  }
class C{  public InterpolatingHilbertTransform(){  mBufferSize=HALF_BAND_FILTER.length;  mBuffer=new float[mBufferSize];  createHilbertCoefficients();  generateIndexMap(mBufferSize);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasetdatanomodificationallowederr.class,args);}  }
class C{  public int read(char cbuf[],int off,int len){  int k;  if (position >= document.getLength()) {    return -1;  }  k=len;  if ((position + k) >= document.getLength())   k=document.getLength() - (int)position;  if (off + k >= cbuf.length)   k=cbuf.length - off;  try {    document.getText((int)position,k,segment);    position+=k;    System.arraycopy(segment.array,segment.offset,cbuf,off,k);    return k;  } catch (  BadLocationException ble) {    return -1;  }}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  protected void transmitPartialTask(final Task<Diff> result) throws TimeoutException {  if (this.partCounter == 1) {    this.result.setTaskType(TaskTypes.TASK_PARTIAL_FIRST);    this.taskTransmitter.transmitDiff(result);  } else {    this.result.setTaskType(TaskTypes.TASK_PARTIAL);    this.taskTransmitter.transmitPartialDiff(result);  }}  }
class C{  public boolean hasGetter(){  return getter(CONCRETE) != null || getter(ABSTRACT) != null;}  }
class C{  synchronized void changeInputMethod(InputMethodLocator newLocator){  if (inputMethodLocator == null) {    inputMethodLocator=newLocator;    inputMethodCreationFailed=false;    return;  }  if (inputMethodLocator.sameInputMethod(newLocator)) {    Locale newLocale=newLocator.getLocale();    if (newLocale != null && inputMethodLocator.getLocale() != newLocale) {      if (inputMethod != null) {        inputMethod.setLocale(newLocale);      }      inputMethodLocator=newLocator;    }    return;  }  Locale savedLocale=inputMethodLocator.getLocale();  boolean wasInputMethodActive=isInputMethodActive;  boolean wasCompositionEnabledSupported=false;  boolean wasCompositionEnabled=false;  if (inputMethod != null) {    try {      wasCompositionEnabled=inputMethod.isCompositionEnabled();      wasCompositionEnabledSupported=true;    } catch (    UnsupportedOperationException e) {    }    if (currentClientComponent != null) {      if (!isInputMethodActive) {        activateInputMethod(false);      }      endComposition();      deactivateInputMethod(false);      if (inputMethod instanceof InputMethodAdapter) {        ((InputMethodAdapter)inputMethod).setClientComponent(null);      }    }    savedLocale=inputMethod.getLocale();    if (usedInputMethods == null) {      usedInputMethods=new HashMap<>(5);    }    if (perInputMethodState == null) {      perInputMethodState=new HashMap<>(5);    }    usedInputMethods.put(inputMethodLocator.deriveLocator(null),inputMethod);    perInputMethodState.put(inputMethod,Boolean.valueOf(clientWindowNotificationEnabled));    enableClientWindowNotification(inputMethod,false);    if (this == inputMethodWindowContext) {      inputMethod.hideWindows();      inputMethodWindowContext=null;    }    inputMethodLocator=null;    inputMethod=null;    inputMethodCreationFailed=false;  }  if (newLocator.getLocale() == null && savedLocale != null && newLocator.isLocaleAvailable(savedLocale)) {    newLocator=newLocator.deriveLocator(savedLocale);  }  inputMethodLocator=newLocator;  inputMethodCreationFailed=false;  if (wasInputMethodActive) {    inputMethod=getInputMethodInstance();    if (inputMethod instanceof InputMethodAdapter) {      ((InputMethodAdapter)inputMethod).setAWTFocussedComponent(awtFocussedComponent);    }    activateInputMethod(true);  }  if (wasCompositionEnabledSupported) {    inputMethod=getInputMethod();    if (inputMethod != null) {      try {        inputMethod.setCompositionEnabled(wasCompositionEnabled);      } catch (      UnsupportedOperationException e) {      }    }  }}  }
class C{  public void testDoCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  TextOnlyContainsNonAlphanumericalCharactersChecker instance=new TextOnlyContainsNonAlphanumericalCharactersChecker(mockTextElementBuilder,TestSolution.NEED_MORE_INFO,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  private Object readResolve(){  return ToStringStyle.NO_FIELD_NAMES_STYLE;}  }
class C{  public Element store(Object o){  PositionableShape p=(PositionableShape)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("PositionableShape");  storeCommonAttributes(p,element);  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.PositionableShapeXml");  return element;}  }
class C{  public void removeResponseCodeListener(ActionListener a){  responseCodeListeners.removeElement(a);}  }
class C{  public void dontNotify(final TurnListener turnListener){  for (  final Map.Entry<Integer,Set<TurnListener>> mapEntry : register.entrySet()) {    final Set<TurnListener> set=mapEntry.getValue();    final Set<TurnListener> toBeRemoved=new HashSet<TurnListener>();    if (set.contains(turnListener)) {      toBeRemoved.add(turnListener);    }    for (    final TurnListener event : toBeRemoved) {      set.remove(event);    }  }}  }
class C{  public void testOfferLast(){  LinkedBlockingDeque q=new LinkedBlockingDeque();  assertTrue(q.offerLast(new Integer(0)));  assertTrue(q.offerLast(new Integer(1)));}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public static boolean isEquals(String actual,String expected){  return ObjectUtil.isEquals(actual,expected);}  }
class C{  protected void announceIdealIndividual(Address except){  output.message("Telling everybody that an ideal individual has been found.");  Address target=null;synchronized (islands) {    Iterator peers=islands.iterator();    while (peers.hasNext())     target=(Address)peers.next();    if (!target.equals(null) && !target.equals(except))     fireMessage(target,M_IDEAL_FOUND,null);  }}  }
class C{  public Vector3 subtract(Vector3 that){  x-=that.x;  y-=that.y;  z-=that.z;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().ff();  return null;}  }
class C{  public static <K,V>MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K,? extends V> map){  Assert.notNull(map,"'map' must not be null");  Map<K,List<V>> result=new LinkedHashMap<K,List<V>>(map.size());  for (  Map.Entry<? extends K,? extends List<? extends V>> entry : map.entrySet()) {    List<V> values=Collections.unmodifiableList(entry.getValue());    result.put(entry.getKey(),values);  }  Map<K,List<V>> unmodifiableMap=Collections.unmodifiableMap(result);  return toMultiValueMap(unmodifiableMap);}  }
class C{  public static int hash(int seed,int anInt){  return (PRIME * seed) + anInt;}  }
class C{  public CameraDecodeResult decode(byte[] data){  int width=mCameraManger.getCameraConfig().getCameraResolution().x;  int height=mCameraManger.getCameraConfig().getCameraResolution().y;  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=mCameraManger.buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  Log.e(TAG,"decode:" + rawResult);  CameraDecodeResult cameraDecodeResult=new CameraDecodeResult();  cameraDecodeResult.setDecodeResult(rawResult);  if (rawResult != null) {    cameraDecodeResult.setDecodeByte(bundleThumbnail(source));  }  return cameraDecodeResult;}  }
class C{  protected void printAttributeSummary(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  String str="";  if (numericPredictor) {    str+=" numeric";  }  if (nominalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" nominal";  }  if (stringPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" string";  }  if (datePredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" date";  }  if (relationalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" relational";  }  str+=" predictors)";switch (classType) {case Attribute.NUMERIC:    str=" (numeric class," + str;  break;case Attribute.NOMINAL:str=" (nominal class," + str;break;case Attribute.STRING:str=" (string class," + str;break;case Attribute.DATE:str=" (date class," + str;break;case Attribute.RELATIONAL:str=" (relational class," + str;break;}print(str);}  }
class C{  @Override public boolean supportsStatementPooling(){  debugCodeCall("supportsStatementPooling");  return false;}  }
class C{  public void showPreferences(){  if (preferencesMap != null) {    view.show();    return;  }  preferencesMap=new HashMap<>();  for (  PreferencePagePresenter preference : preferences) {    Set<PreferencePagePresenter> prefsList=preferencesMap.get(preference.getCategory());    if (prefsList == null) {      prefsList=new HashSet<PreferencePagePresenter>();      preferencesMap.put(preference.getCategory(),prefsList);    }    prefsList.add(preference);  }  view.setPreferences(preferencesMap);  view.show();  view.enableSaveButton(false);  view.selectPreference(preferencesMap.entrySet().iterator().next().getValue().iterator().next());}  }
class C{  public String timerString(String message,String module){  long tsStart=System.currentTimeMillis();  StringBuilder retBuf=new StringBuilder();  retBuf.append("[[").append(message).append("- total:").append(secondsSinceStart());  if (lastMessage != null) {    retBuf.append(",since last(").append(((lastMessage.length() > 20) ? (lastMessage.substring(0,17) + "...") : lastMessage)).append("):").append(secondsSinceLast());  }  retBuf.append("]]");  if (UtilValidate.isNotEmpty(timerName)) {    retBuf.append(" - '").append(timerName).append("'");  }  lastMessage=message;  String retString=retBuf.toString();  if (log)   Debug.log(Debug.TIMING,null,retString,module,"org.ofbiz.base.util.UtilTimer");  lastMessageTime=System.currentTimeMillis();  startTime+=(lastMessageTime - tsStart);  return retString;}  }
class C{  public static void addTocItem(String item,int depth){  if (!item.equals("")) {    StringBuilder sb=new StringBuilder(depth + item.length());    for (int i=0; i < depth; i++) {      sb.append(" ");    }    sb.append(item);    items.add(sb.toString());    pages.add(pageNumber);  }}  }
class C{  public void write(final String filename){  PrintStream stream;  try {    stream=new PrintStream(new File(filename));  } catch (  FileNotFoundException e) {    e.printStackTrace();    return;  }  write(stream);  stream.close();}  }
class C{  public void removeListeners(){  insideDisplay.removeListeners();}  }
class C{  public AltField(String id,String description){  mId=id;  mDescription=description;}  }
class C{  @Override public DriverTask restoreFromClone(List<VolumeClone> clones){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_RESTORE_CLONE_VOLUMES);  return cloneHelper.restoreFromClone(clones,this.driverRegistry,task);}  }
class C{  public static Object perform(Action action,Stack<Object> valueStack,int rhsSize){  Object[] parameters=new Object[action.getParamsCount()];  int parametersIndex=0;  for (int i=0; i < rhsSize; i++) {    Object v=valueStack.get(valueStack.size() - 1 - i);    if (v != SymbolValue.NoValue) {      if (parametersIndex < parameters.length) {        parameters[parameters.length - 1 - parametersIndex]=v;        parametersIndex++;      } else {        throw new IllegalStateException("Too many parameters for semantic action found on stack!");      }    }  }  try {    return action.doAction(parameters);  } catch (  IllegalArgumentException ex) {    System.err.println("Error:");    System.err.println("  Requested action: " + action.getMethod().toGenericString());    System.err.println("  Given parameters: " + Arrays.toString(parameters));    System.err.println("  RHS size:         " + rhsSize);    System.err.println("  Value stack:      " + valueStack);    System.exit(0);    return null;  }catch (  Exception ex) {    ex.printStackTrace();    return null;  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String theFirstString=m_arg0.execute(xctxt).str();  String theSecondString=m_arg1.execute(xctxt).str();  String theThirdString=m_arg2.execute(xctxt).str();  int theFirstStringLength=theFirstString.length();  int theThirdStringLength=theThirdString.length();  StringBuffer sbuffer=new StringBuffer();  for (int i=0; i < theFirstStringLength; i++) {    char theCurrentChar=theFirstString.charAt(i);    int theIndex=theSecondString.indexOf(theCurrentChar);    if (theIndex < 0) {      sbuffer.append(theCurrentChar);    } else     if (theIndex < theThirdStringLength) {      sbuffer.append(theThirdString.charAt(theIndex));    } else {    }  }  return new XString(sbuffer.toString());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=stack.getUIMgrSafe().getVideoFrame().getCurrFile();  return (mf != null) && (mf.isMusic()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  protected Iterator<V> createValuesIterator(){  if (size() == 0) {    return EmptyIterator.<V>emptyIterator();  }  return new ValuesIterator<V>(this);}  }
class C{  public static void leftMethod(String classname,String methodname){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  tracer.trace.exitMethod(classname,methodname);}  }
class C{  public Action build(Class<?> cls){  EdmAction edmAction=cls.getAnnotation(EdmAction.class);  EdmReturnType edmReturnType=cls.getAnnotation(EdmReturnType.class);  Set<Parameter> parameters=new HashSet<>();  for (  Field field : cls.getDeclaredFields()) {    EdmParameter parameterAnnotation=field.getAnnotation(EdmParameter.class);    if (parameterAnnotation != null) {      String parameterName=isNullOrEmpty(parameterAnnotation.name()) ? field.getName() : parameterAnnotation.name();      String parameterType=isNullOrEmpty(parameterAnnotation.type()) ? field.getType().getSimpleName() : parameterAnnotation.type();      parameters.add(new ParameterImpl.Builder().setMaxLength(parameterAnnotation.maxLength()).setName(parameterName).setNullable(parameterAnnotation.nullable()).setPrecision(parameterAnnotation.precision()).setScale(parameterAnnotation.scale()).setSRID(parameterAnnotation.srid()).setType(parameterType).setUnicode(parameterAnnotation.unicode()).setJavaField(field).build());    }  }  return new ActionImpl.Builder().setName(getTypeName(edmAction,cls)).setNamespace(getNamespace(edmAction,cls)).setBound(edmAction.isBound()).setEntitySetPath(edmAction.entitySetPath()).setParameters(parameters).setReturnType(edmReturnType.type()).setJavaClass(cls).build();}  }
class C{  public boolean isValidPath(OPath path){  String name=path.getName();  for (int i=0; i < _toPaths.size(); i++) {    if (_toPaths.get(i).getName().equals(name)) {      return true;    }  }  for (int i=0; i < _fromPaths.size(); i++) {    if (_fromPaths.get(i).getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  private void calcTabAreaRect(){  Insets insets=tabPane.getInsets();  Insets tabAreaInsets=getTabAreaInsets(tabPlacement);  Rectangle bounds=tabPane.getBounds();  if (tabPane.getTabCount() == 0) {    tabAreaRect.setBounds(0,0,0,0);    return;  }  int position;  int offset;  int length;  int thickness;  if (orientation == ControlOrientation.HORIZONTAL) {    length=bounds.width - insets.left - insets.right;    position=insets.left;    thickness=maxTabHeight + tabAreaInsets.top + tabAreaInsets.bottom;    offset=(tabPlacement == BOTTOM) ? bounds.height - insets.bottom - thickness : insets.top;  } else {    length=bounds.height - insets.top - insets.bottom;    position=insets.top;    thickness=maxTabWidth + tabAreaInsets.left + tabAreaInsets.right;    offset=(tabPlacement == RIGHT) ? bounds.width - insets.right - thickness : insets.left;  }  tabAreaRect.setBounds(orientation.createBounds(position,offset,length,thickness));}  }
class C{  public SetDynamicPropertiesEvent(TungstenProperties props){  super(props);}  }
class C{  public void clearAndHide(){  textField.setText(null);  setVisible(false);}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public boolean isText(){  return false;}  }
class C{  public void error(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=xctxt.getErrorListener();  if (null != ehandler) {    ehandler.fatalError(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));  } else {    SourceLocator slocator=xctxt.getSAXLocator();    System.out.println(fmsg + "; file " + slocator.getSystemId()+ "; line "+ slocator.getLineNumber()+ "; column "+ slocator.getColumnNumber());  }}  }
class C{  public int deleteBlobTrigger(Connection conn,TriggerKey triggerKey) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(DELETE_BLOB_TRIGGER));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.125 -0400",hash_original_method="2629CFA25E1C88868D85E1F8B588DA31",hash_generated_method="A657FE6538844C44D68B9541E520CD04") protected byte[] engineDigest(){  byte[] hash=new byte[DIGEST_LENGTH];  processDigest(hash,0);  return hash;}  }
class C{  public void testFailoverReadOnly() throws Exception {  Properties props=getHostFreePropertiesFromTestsuiteUrl();  props.setProperty("autoReconnect","true");  props.setProperty("queriesBeforeRetryMaster","0");  props.setProperty("secondsBeforeRetryMaster","0");  Connection failoverConn=null;  Statement failoverStmt=null;  try {    failoverConn=getConnectionWithProps(getMasterSlaveUrl(),props);    failoverStmt=failoverConn.createStatement();    String masterConnectionId=getSingleIndexedValueWithQuery(failoverConn,1,"SELECT connection_id()").toString();    this.stmt.execute("KILL " + masterConnectionId);    for (int i=0; i < 100; i++) {      try {        failoverStmt.executeQuery("SELECT 1");      } catch (      SQLException sqlEx) {        break;      }    }    String slaveConnectionId=getSingleIndexedValueWithQuery(failoverConn,1,"SELECT connection_id()").toString();    assertTrue("Didn't get a new physical connection",!masterConnectionId.equals(slaveConnectionId));    failoverConn.setReadOnly(false);    assertTrue(failoverConn.isReadOnly());    this.stmt.execute("KILL " + slaveConnectionId);    for (int i=0; i < 100; i++) {      try {        failoverStmt.executeQuery("SELECT 1");      } catch (      SQLException sqlEx) {        break;      }    }    String newMasterId=getSingleIndexedValueWithQuery(failoverConn,1,"SELECT connection_id()").toString();    assertTrue("Didn't get a new physical connection",!slaveConnectionId.equals(newMasterId));    failoverConn.setReadOnly(false);    assertFalse(failoverConn.isReadOnly());  }  finally {    if (failoverStmt != null) {      failoverStmt.close();    }    if (failoverConn != null) {      failoverConn.close();    }  }}  }
class C{  public void markVisited(int loc){  if (checkBounds(loc)) {    if (ZERO == this.registry[loc]) {      this.unvisitedCount--;    }    this.registry[loc]=ONE;  } else {    throw new RuntimeException("The location " + loc + " out of bounds [0,"+ (this.registry.length - 1)+ "]");  }}  }
class C{  public static void showSomeBytes(String tag,byte[] bytes){  Log.i("enc: " + tag + ": length: "+ bytes.length);  String str="";  int len=bytes.length;  if (len > 0) {    for (int i=0; i < len && i < 5; i++) {      str+=Integer.toHexString(bytes[i]) + " ";    }    Log.i("enc: " + tag + ": hex: "+ str);  }}  }
class C{  public SerializerReadBasic(Datas[] classes){  m_classes=classes;}  }
class C{  public String preference(){  return this.preference;}  }
class C{  public IndicatorCollector(Indicator indicator,EpsilonBoxDominanceArchive archive,Algorithm algorithm){  super();  this.indicator=indicator;  this.archive=archive;  this.algorithm=algorithm;}  }
class C{  private void initNamePatternFields(Entity entity){  Collection<MetaProperty> properties=metadata.getTools().getNamePatternProperties(entity.getMetaClass());  for (  MetaProperty property : properties) {    if (entity.getValue(property.getName()) == null) {      if (property.getType() == MetaProperty.Type.DATATYPE)       try {        entity.setValue(property.getName(),property.getJavaType().newInstance());      } catch (      InstantiationException|IllegalAccessException e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  @Override public long redisOffsetToKeeperOffset(long redisOffset){  return redisOffsetToKeeperOffset(redisOffset,metaRef.get());}  }
class C{  public Park(){  super();}  }
class C{  public static void tryToSetReceiverForegroundFlag(Intent intent){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {    return;  }  intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);}  }
class C{  static int lastArgMatchesVarg(Parameter[] params,ClassNode... args){  if (!isVargs(params))   return -1;  ClassNode lastParamType=params[params.length - 1].getType();  ClassNode ptype=lastParamType.getComponentType();  ClassNode arg=args[args.length - 1];  if (isNumberType(ptype) && isNumberType(arg) && !ptype.equals(arg))   return -1;  return isAssignableTo(arg,ptype) ? Math.min(getDistance(arg,lastParamType),getDistance(arg,ptype)) : -1;}  }
class C{  private void jbInit(){  this.setLayout(mainLayout);  this.setPreferredSize(new Dimension(640,480));  labelProduct.setText(Msg.getElement(getCtx(),"M_Product_ID"));  implosion.setText(Msg.getElement(getCtx(),"Implosion"));  treeInfo.setText("    ");  spacer.setText("    ");  northPanel.setLayout(northLayout);  northLayout.setAlignment(FlowLayout.LEFT);  this.add(northPanel,BorderLayout.NORTH);  northPanel.add(labelProduct,null);  northPanel.add(fieldProduct,null);  northPanel.add(implosion,null);  northPanel.add(spacer,null);  northPanel.add(spacer,null);  northPanel.add(treeInfo,null);  treeExpand.setText(Msg.getMsg(Env.getCtx(),"ExpandTree"));  treeExpand.setActionCommand("Expand");  treeExpand.addMouseListener(mouseListener);  treeExpand.addActionListener(this);  treeSearchLabel.setText(Msg.getMsg(Env.getCtx(),"TreeSearch") + " ");  treeSearchLabel.setLabelFor(treeSearch);  treeSearchLabel.setToolTipText(Msg.getMsg(Env.getCtx(),"TreeSearchText"));  treeSearch.setBackground(AdempierePLAF.getInfoBackground());  treeSearch.addKeyListener(keyListener);  this.add(southPanel,BorderLayout.SOUTH);  southPanel.setLayout(southLayout);  confirmPanel.addActionListener(this);  southPanel.add(confirmPanel,BorderLayout.SOUTH);  southPanel2.setLayout(southLayout2);  southLayout2.setAlignment(FlowLayout.LEFT);  southPanel.add(southPanel2,BorderLayout.NORTH);  southPanel2.add(treeExpand,null);  southPanel2.add(spacer,null);  southPanel2.add(treeSearchLabel,null);  southPanel2.add(treeSearch,null);  this.add(splitPane,BorderLayout.CENTER);  splitPane.setDividerLocation(DIVIDER_LOCATION);  mBOM=new CMenuItem(Msg.getMsg(Env.getCtx(),"BOM"),Env.getImageIcon("Detail16.gif"));  mBOM.addActionListener(this);  popupMenu.add(mBOM);  mImplosion=new CMenuItem(Msg.getMsg(Env.getCtx(),"Implosion"),Env.getImageIcon("Parent16.gif"));  mImplosion.addActionListener(this);  popupMenu.add(mImplosion);}  }
class C{  public synchronized boolean hasAlerts(){  if (alerts == null) {    return false;  }  return !alerts.isEmpty();}  }
class C{  public void connect() throws DebugException {  try {    m_debugger.connect();  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value) throws IOException {  this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));}  }
class C{  public BreakpointRemovedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static void verifyUserIsAuthorizedForRequest(Project project,StorageOSUser user,PermissionsHelper permissionsHelper){  if (!(permissionsHelper.userHasGivenRole(user,project.getTenantOrg().getURI(),Role.TENANT_ADMIN) || permissionsHelper.userHasGivenACL(user,project.getId(),ACL.OWN,ACL.ALL))) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }}  }
class C{  private ReportObjects extractReportObjects(ZipInputStream reportData) throws IOException {  ReportObjects reportObjects=new ReportObjects();  try {    ZipEntry entry=null;    while ((entry=reportData.getNextEntry()) != null) {      byte[] buffer=new byte[1024];      ByteArrayOutputStream baos=new ByteArrayOutputStream();      int len;      while ((len=reportData.read(buffer)) > 0) {        baos.write(buffer,0,len);      }      if (entry.getName().lastIndexOf("_") != -1) {        reportObjects.getSubreports().put(entry.getName(),new ByteArrayInputStream(baos.toByteArray()));      } else {        reportObjects.setReportTemplate(new ByteArrayInputStream(baos.toByteArray()));      }      reportData.closeEntry();    }  }  finally {    if (null != reportData) {      reportData.close();    }  }  return reportObjects;}  }
class C{  protected Position computeRectangularEdgeLocation(LatLon begin,LatLon end,double width){  LatLon center=LatLon.interpolateGreatCircle(0.5,begin,end);  Angle edgeAzimuth=LatLon.greatCircleAzimuth(center,end).add(Angle.POS90);  Angle edgeLength=Angle.fromRadians(width / this.getWwd().getModel().getGlobe().getRadius());  LatLon edgeLocation=LatLon.greatCircleEndPosition(center,edgeAzimuth,edgeLength);  double edgeAltitude=this.getControlPointAltitude(edgeLocation);  return new Position(edgeLocation,edgeAltitude);}  }
class C{  private void generateSoundFiles(SoundPool soundPool,File privateDir){  mSounds[BRICK_HIT]=generateSound(soundPool,privateDir,"brick",50,900);  mSounds[PADDLE_HIT]=generateSound(soundPool,privateDir,"paddle",50,700);  mSounds[WALL_HIT]=generateSound(soundPool,privateDir,"wall",50,300);  mSounds[BALL_LOST]=generateSound(soundPool,privateDir,"ball_lost",500,280);}  }
class C{  public TvShowScrapeTask(List<TvShow> tvShowsToScrape,boolean doSearch,TvShowSearchAndScrapeOptions options){  super(BUNDLE.getString("tvshow.scraping"));  this.tvShowsToScrape=tvShowsToScrape;  this.doSearch=doSearch;  this.options=options;}  }
class C{  public static void main(String[] args){  RotatingSList<Integer> rsl=new RotatingSList<Integer>();  rsl.insertBack(10);  rsl.insertBack(11);  rsl.insertBack(12);  rsl.insertBack(13);  rsl.rotateRight();  rsl.print();}  }
class C{  @Override public void opened(){}  }
class C{  static StateType synthStateToGTKStateType(int state){  StateType result;switch (state) {case SynthConstants.PRESSED:    result=StateType.ACTIVE;  break;case SynthConstants.MOUSE_OVER:result=StateType.PRELIGHT;break;case SynthConstants.SELECTED:result=StateType.SELECTED;break;case SynthConstants.DISABLED:result=StateType.INSENSITIVE;break;case SynthConstants.ENABLED:default :result=StateType.NORMAL;break;}return result;}  }
class C{  public static IMethodBinding findMethodInHierarchy(ITypeBinding type,String methodName,ITypeBinding[] parameters){  IMethodBinding method=findMethodInType(type,methodName,parameters);  if (method != null)   return method;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    method=findMethodInHierarchy(superClass,methodName,parameters);    if (method != null)     return method;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    method=findMethodInHierarchy(interfaces[i],methodName,parameters);    if (method != null)     return method;  }  return null;}  }
class C{  public StandardDialog(final Frame parent,final String title){  super(parent,title);  init();}  }
class C{  public SurfaceQuad(){}  }
class C{  protected Element defElement(String name,int type,boolean omitStart,boolean omitEnd,ContentModel content,String[] exclusions,String[] inclusions,AttributeList atts){  BitSet excl=null;  if (exclusions != null && exclusions.length > 0) {    excl=new BitSet();    for (    String str : exclusions) {      if (str.length() > 0) {        excl.set(getElement(str).getIndex());      }    }  }  BitSet incl=null;  if (inclusions != null && inclusions.length > 0) {    incl=new BitSet();    for (    String str : inclusions) {      if (str.length() > 0) {        incl.set(getElement(str).getIndex());      }    }  }  return defineElement(name,type,omitStart,omitEnd,content,excl,incl,atts);}  }
class C{  public static ZTauElement partModReduction(BigInteger k,int m,byte a,BigInteger[] s,byte mu,byte c){  BigInteger d0;  if (mu == 1) {    d0=s[0].add(s[1]);  } else {    d0=s[0].subtract(s[1]);  }  BigInteger[] v=getLucas(mu,m,true);  BigInteger vm=v[1];  SimpleBigDecimal lambda0=approximateDivisionByN(k,s[0],vm,a,m,c);  SimpleBigDecimal lambda1=approximateDivisionByN(k,s[1],vm,a,m,c);  ZTauElement q=round(lambda0,lambda1,mu);  BigInteger r0=k.subtract(d0.multiply(q.u)).subtract(BigInteger.valueOf(2).multiply(s[1]).multiply(q.v));  BigInteger r1=s[1].multiply(q.u).subtract(s[0].multiply(q.v));  return new ZTauElement(r0,r1);}  }
class C{  private void doValidation(){  Integer error=mAdapter.isTimeValidForStage(mStage,mDuration.getMillis());  if (error == null) {    mButton.setEnabled(true);    mErrorLayout.collapse();  } else {    mButton.setEnabled(false);    mErrorText.setText(itemView.getResources().getString(error));    mErrorLayout.expand();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TEXPORTABLE_ELEMENT__EXPORTED_NAME:    return getExportedName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static int calcChecksum(long num,int digits){  boolean doubleDigit=true;  int total=0;  while (0 < digits--) {    int digit=(int)(num % 10);    num/=10;    if (doubleDigit) {      digit=doubleDigits[digit];    }    total+=digit;    doubleDigit=!doubleDigit;  }  int result=total % 10;  if (result > 0) {    result=10 - result;  }  return result;}  }
class C{  @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  return mFastAdapter.onCreateViewHolder(parent,viewType);}  }
class C{  public boolean keepCarriageReturns(){  return keepCR;}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public boolean isChargeInterest(){  Object oo=get_Value(COLUMNNAME_ChargeInterest);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void validationError(String systemID,int lineNr,String message,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISC_ERROR,systemID,lineNr,elementName,attributeName,attributeValue,message);}  }
class C{  public EmptyRegionFunctionException(String msg){  super(msg);}  }
class C{  private void onWifiP2pDiscoveryChanged(Context context,Intent intent){  int discoveryStateCode=intent.getIntExtra(WifiP2pManager.EXTRA_DISCOVERY_STATE,-1);  if (discoveryStateCode == WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED) {    log.debug("Device is seeking Wifi Direct peers.");    Log.d("peerDebug","Device is seeking Wifi Direct peers.");    setSeeking(true);  } else   if (discoveryStateCode == WifiP2pManager.WIFI_P2P_DISCOVERY_STOPPED) {    log.debug("Device is NOT seeking Wifi Direct peers.");    Log.d("peerDebug","Device is NOT seeking Wifi Direct peers.");    setSeeking(false);  } else {    log.error("Discovery changed event didn't have an EXTRA_DISCOVERY_STATE?!");    Log.d("peerDebug","Discovery changed event didn't have an EXTRA_DISCOVERY_STATE?!");  }}  }
class C{  public UserActiveException(String message){  super(message);}  }
class C{  private void shrinkSize(){  int i=longCount - 1;  while (i >= 0 && bits[i] == 0) {    --i;  }  this.longCount=i + 1;}  }
class C{  public NotifyingSailWrapper(NotifyingSail baseSail){  setBaseSail(baseSail);}  }
class C{  public UtilTabCloseIcon(){  mIcon=new JarImageIcon(getClass(),"16x16/delete.png");}  }
class C{  public String invertSelectionTipText(){  return "Randomly remove rather than select attributes.";}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public PerFileSuite(Class<?> klass) throws Throwable {  super(klass,Collections.<Runner>emptyList());  final TestClass testClass=getTestClass();  final Class<?> javaTestClass=testClass.getJavaClass();  final List<Object[]> parametersList=getParametersList(testClass);  for (  Object[] parameters : parametersList) {    runners.add(new PerParameterSetTestRunner(javaTestClass,parameters));  }}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>Function<T7,R> partial7(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final T6 t6,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  private String oldHostName() throws Exception {  return getUniqueIdFromCommand();}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof Protocol) {    final Protocol p=(Protocol)obj;    return (defaultPort == p.getDefaultPort() && scheme.equalsIgnoreCase(p.getScheme()) && secure == p.isSecure() && socketFactory.equals(p.getSocketFactory()));  } else {    return false;  }}  }
class C{  public void sendCustomInit(IPlayer player){  send(new Packet(Packet.COMMAND_CUSTOM_INITIATIVE,player));}  }
class C{  public CharSet union(CharSet that){  return new CharSet(doUnion(that.chars));}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) >> 2;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  private void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  @HLEFunction(nid=0xB7C18B77,version=150) public long sceKernelGetVTimerBaseWide(@CheckArgument("checkVTimerID") int vtimerUid){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  return sceKernelVTimerInfo.base;}  }
class C{  public WFSTCompletionLookup(Directory tempDir,String tempFileNamePrefix,boolean exactFirst){  this.exactFirst=exactFirst;  this.tempDir=tempDir;  this.tempFileNamePrefix=tempFileNamePrefix;}  }
class C{  protected DLockGrantToken(DLockService dlock,DLockGrantor grantor,Object name){  this.lockName=name;  this.dlock=dlock;  this.grantor=grantor;}  }
class C{  public CCTimer(Object t,UpdateCallback c,float seconds){  target=t;  callback=c;  interval=seconds;  elapsed=-1;}  }
class C{  public static Result download(long id){  ContentResolver cr=cr();  Uri uri=ContentUris.withAppendedId(Restaurants.CONTENT_URI,id);  String[] proj={Restaurants.GLOBAL_ID,Restaurants.PLACE_ID};  EasyCursor c=new EasyCursor(cr.query(uri,proj,null,null,null));  Restaurant restaurant=new Restaurant();  restaurant.localId=id;  if (c.moveToFirst()) {    restaurant.globalId=c.getLong(Restaurants.GLOBAL_ID);    restaurant.placeId=c.getString(Restaurants.PLACE_ID);  }  c.close();  if (restaurant.globalId > 0 && TextUtils.isEmpty(restaurant.placeId)) {    restaurant=Server.restaurant(restaurant);  }  Result result=null;  if (restaurant != null && !TextUtils.isEmpty(restaurant.placeId)) {    try {      ContentValues vals=new ContentValues(14);      vals.put(Restaurants.PLACE_ID,restaurant.placeId);      result=details(id,vals);      if (STATUS_NOT_FOUND.equals(result.status)) {        return result;      }      if (result.place != null) {        photo(result.photoId,id,result.place);      }    } catch (    IOException e) {      Log.e(TAG,"getting place details or downloading restaurant photo",e);      exception(e);    }  }  if (restaurant != null && restaurant.status == null) {    restaurant=Server.restaurant(restaurant);  }  if (restaurant != null) {    restaurant.status=ACTIVE;    ContentValues vals=Restaurants.values(restaurant);    Restaurants.deleteConflict(restaurant.localId,restaurant.globalId);    try {      cr.update(uri,vals,null,null);    } catch (    SQLiteConstraintException e) {      Log.e(TAG,"updating restaurant from server",e);      exception(e);    }    try {      photo(id,vals);    } catch (    IOException e) {      Log.e(TAG,"downloading Street View image",e);      exception(e);    }    List<Review> reviews=Server.reviews(restaurant);    if (reviews != null) {      boolean hasOwn=false;      int size=reviews.size();      for (int i=0; i < size; i++) {        Review review=reviews.get(i);        vals=Reviews.values(review);        String sel=Reviews.GLOBAL_ID + " = ?";        String[] args={String.valueOf(review.globalId)};        if (cr.update(Reviews.CONTENT_URI,vals,sel,args) == 0) {          review.localId=ContentUris.parseId(cr.insert(Reviews.CONTENT_URI,vals));          if (review.localId > 0 && review.userId == 0) {            hasOwn=true;          }        }      }      String restaurantId=String.valueOf(id);      cr.call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_RATING,restaurantId,null);      if (hasOwn) {        cr.call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_LAST_VISIT,restaurantId,null);      }    }  }  return result;}  }
class C{  public UPSCoord(Angle latitude,Angle longitude,String hemisphere,double easting,double northing){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  this.latitude=latitude;  this.longitude=longitude;  this.hemisphere=hemisphere;  this.easting=easting;  this.northing=northing;}  }
class C{  public static boolean isSunJCE(Provider provider){  Class<?> sunJCE=null;  try {    sunJCE=Class.forName("com.sun.crypto.provider.SunJCE");  } catch (  Exception e) {    return false;  }  if (sunJCE == null) {    return false;  }  return sunJCE.isInstance(provider);}  }
class C{  public void range(IRectangle space,IVisitTwoDNode visitor){  if (root == null) {    return;  }  root.range(space,visitor);}  }
class C{  public boolean isDefaultModule(){  List<String> name=getName();  return name.size() == 1 && name.get(0).equals(DEFAULT_MODULE_NAME);}  }
class C{  public QueryStringDecoder(String uri,boolean hasPath){  this(uri,DEFAULT_CHARSET,hasPath);}  }
class C{  public void shutDown(){synchronized (this) {    if (m_isShutDown) {      return;    }    m_isShutDown=true;  }  for (  final CountDownLatch latch : m_latchesToCloseOnShutdown) {    releaseLatch(latch);  }  m_latchesToCloseOnShutdown.clear();}  }
class C{  public void init(){  titleIndicator=new ConversationTitlePageIndicator(getContext());  titleIndicator.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,Gravity.CENTER));  int indicatorWidth=DisplayUtils.convertToPixels(getContext(),5);  int indicatorHeight=DisplayUtils.convertToPixels(getContext(),5);  leftIndicatorView=new View(getContext());  leftIndicatorView.setLayoutParams(new LayoutParams(indicatorWidth,indicatorHeight,Gravity.LEFT | Gravity.BOTTOM));  leftIndicatorView.setVisibility(View.INVISIBLE);  rightIndicatorView=new View(getContext());  rightIndicatorView.setLayoutParams(new LayoutParams(indicatorWidth,indicatorHeight,Gravity.RIGHT | Gravity.BOTTOM));  rightIndicatorView.setVisibility(View.INVISIBLE);  addView(leftIndicatorView);  addView(rightIndicatorView);  addView(titleIndicator);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ArrayElement createArrayElement(){  ArrayElementImpl arrayElement=new ArrayElementImpl();  return arrayElement;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.WINDOWS_OS ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public FastSet(E element){  this(1);  this.add(element);}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Facet counting example:");  System.out.println("-----------------------");  SimpleSortedSetFacetsExample example=new SimpleSortedSetFacetsExample();  List<FacetResult> results=example.runSearch();  System.out.println("Author: " + results.get(0));  System.out.println("Publish Year: " + results.get(0));  System.out.println("\n");  System.out.println("Facet drill-down example (Publish Year/2010):");  System.out.println("---------------------------------------------");  System.out.println("Author: " + example.runDrillDown());}  }
class C{  void process(String url,String user,String password,String fileName,Charset charset,boolean continueOnError) throws SQLException {  try {    org.h2.Driver.load();    Connection conn=DriverManager.getConnection(url,user,password);    if (charset == null) {      charset=Constants.UTF8;    }    try {      process(conn,fileName,continueOnError,charset);    }  finally {      conn.close();    }  } catch (  IOException e) {    throw DbException.convertIOException(e,fileName);  }}  }
class C{  public boolean isPowerOfTwo(int n){  return n > 0 && (n & (n - 1)) == 0;}  }
class C{  public void onEvict(){  evictCnt.incrementAndGet();  if (delegate != null)   delegate.onEvict();}  }
class C{  public Builder configAutoRelease(boolean autoRelease){  this.mAutoRelease=autoRelease;  return this;}  }
class C{  public FromSpaceInvariant(){  Traversal.traverse(this);}  }
class C{  public WorkerDocument(String initialContent){  super();  ConfigurableLineTracker lineTracker=new ConfigurableLineTracker(delimeters);  setTextStore(new CopyOnWriteTextStore(new GapTextStore()));  setLineTracker(lineTracker);  getStore().set(initialContent);  getTracker().set(initialContent);  completeInitialization();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected static void updateFilterMap(Element filterElement,Filter filter,Map filterMap){  String s=filterElement.getAttributeNS(null,SVG_RESULT_ATTRIBUTE);  if ((s.length() != 0) && (s.trim().length() != 0)) {    filterMap.put(s,filter);  }}  }
class C{  public Map<EnumFacing,Multiblock> createRotations(){  Map<EnumFacing,Multiblock> ret=new EnumMap<>(EnumFacing.class);  ret.put(EnumFacing.SOUTH,this);  ret.put(EnumFacing.WEST,ret.get(EnumFacing.SOUTH).copy());  ret.get(EnumFacing.WEST).rotate(Math.PI / 2);  ret.put(EnumFacing.NORTH,ret.get(EnumFacing.WEST).copy());  ret.get(EnumFacing.NORTH).rotate(Math.PI / 2);  ret.put(EnumFacing.EAST,ret.get(EnumFacing.NORTH).copy());  ret.get(EnumFacing.EAST).rotate(Math.PI / 2);  return ret;}  }
class C{  void decode(byte[] data,int width,int height){  Size size=scanManager.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=scanManager.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  static void purgeBlockFromPHIs(BasicBlock source,BasicBlock target){  for (Enumeration<Instruction> e=target.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.operator() != PHI)     return;    int numPairs=Phi.getNumberOfPreds(s);    int dst=0;    for (int src=0; src < numPairs; src++) {      BasicBlockOperand bbop=Phi.getPred(s,src);      if (bbop.block == source) {        Phi.setValue(s,src,null);        Phi.setPred(s,src,null);      } else {        if (src != dst) {          Phi.setValue(s,dst,Phi.getClearValue(s,src));          Phi.setPred(s,dst,Phi.getClearPred(s,src));        }        dst++;      }    }    for (int i=dst; i < numPairs; i++) {      Phi.setValue(s,i,null);      Phi.setPred(s,i,null);    }  }}  }
class C{  public static double hypot(double x,double y){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.hypot(x,y) : Math.hypot(x,y);  }  x=Math.abs(x);  y=Math.abs(y);  if (y < x) {    double a=x;    x=y;    y=a;  } else   if (!(y >= x)) {    if ((x == Double.POSITIVE_INFINITY) || (y == Double.POSITIVE_INFINITY)) {      return Double.POSITIVE_INFINITY;    } else {      return Double.NaN;    }  }  if (y - x == y) {    return y;  } else {    double factor;    if (x > TWO_POW_450) {      x*=TWO_POW_N750;      y*=TWO_POW_N750;      factor=TWO_POW_750;    } else     if (y < TWO_POW_N450) {      x*=TWO_POW_750;      y*=TWO_POW_750;      factor=TWO_POW_N750;    } else {      factor=1.0;    }    return factor * FastMath.sqrt(x * x + y * y);  }}  }
class C{  @Override protected DSSDocument transformReference(final DSSReference reference){  DSSDocument dssDocument=reference.getContents();  final List<DSSTransform> transforms=reference.getTransforms();  if (CollectionUtils.isEmpty(transforms)) {    return dssDocument;  }  Node nodeToTransform=null;  final String uri=reference.getUri();  if (StringUtils.isNotBlank(uri) && uri.startsWith("#") && !isXPointer(uri)) {    final Document document=DSSXMLUtils.buildDOM(dssDocument);    DSSXMLUtils.recursiveIdBrowse(document.getDocumentElement());    final String uri_id=uri.substring(1);    nodeToTransform=document.getElementById(uri_id);  }  byte[] transformedReferenceBytes=applyTransformations(dssDocument,transforms,nodeToTransform);  return new InMemoryDocument(transformedReferenceBytes);}  }
class C{  public boolean canEncode(char ch){  int index;  int theBytes;  index=index1[((ch & mask1) >> shift)] + (ch & mask2);  if (index < 15000)   theBytes=(int)(index2.charAt(index)); else   theBytes=(int)(index2a.charAt(index - 15000));  if (theBytes != 0)   return (true);  return (ch == '\u0000');}  }
class C{  public MutableDateTime toMutableDateTime(){  return new MutableDateTime(getMillis(),ISOChronology.getInstance());}  }
class C{  public T ajaxCancel(){  AjaxCallback.cancel();  return self();}  }
class C{  public String docType(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  setDocumentNo(ctx,WindowNo,mTab);  return "";}  }
class C{  public DataFilterCriterion(String filterColumn,DataFilterOperator operator,Object filterValue){  this.mFilterColumn=filterColumn;  this.mFilterOperator=operator;  this.mFilterValue=filterValue;}  }
class C{  private boolean changeFocusState(Component cmp,boolean gained){  boolean trigger=false;  Style selected=cmp.getSelectedStyle();  Style unselected=cmp.getUnselectedStyle();  if (!selected.getFont().equals(unselected.getFont()) || selected.getPadding(false,Component.TOP) != unselected.getPadding(false,Component.TOP) || selected.getPadding(false,Component.BOTTOM) != unselected.getPadding(false,Component.BOTTOM) || selected.getPadding(isRTL(),Component.RIGHT) != unselected.getPadding(isRTL(),Component.RIGHT) || selected.getPadding(isRTL(),Component.LEFT) != unselected.getPadding(isRTL(),Component.LEFT) || selected.getMargin(false,Component.TOP) != unselected.getMargin(false,Component.TOP) || selected.getMargin(false,Component.BOTTOM) != unselected.getMargin(false,Component.BOTTOM) || selected.getMargin(isRTL(),Component.RIGHT) != unselected.getMargin(isRTL(),Component.RIGHT) || selected.getMargin(isRTL(),Component.LEFT) != unselected.getMargin(isRTL(),Component.LEFT)) {    trigger=true;  }  int prefW=0;  int prefH=0;  if (trigger) {    Dimension d=cmp.getPreferredSize();    prefW=d.getWidth();    prefH=d.getHeight();  }  if (gained) {    cmp.setFocus(true);    cmp.fireFocusGained();    fireFocusGained(cmp);  } else {    cmp.setFocus(false);    cmp.fireFocusLost();    fireFocusLost(cmp);  }  if (trigger) {    cmp.setShouldCalcPreferredSize(true);    Dimension d=cmp.getPreferredSize();    if (prefW != d.getWidth() || prefH != d.getHeight()) {      cmp.setShouldCalcPreferredSize(false);      trigger=false;    }  }  return trigger;}  }
class C{  public static <T>void assertNotEmpty(T expression,String message){  Assert.notEmpty(expression,message);}  }
class C{  public void unlockWrite(long stamp){  WNode h;  if (state != stamp || (stamp & WBIT) == 0L)   throw new IllegalMonitorStateException();  U.putLongVolatile(this,STATE,(stamp+=WBIT) == 0L ? ORIGIN : stamp);  if ((h=whead) != null && h.status != 0)   release(h);}  }
class C{  public boolean isZoomEnabled(){  return mZoomEnabled;}  }
class C{  public String toString(){  return mName;}  }
class C{  public VerticalGridLayout(int rows,int cols){  this(rows,cols,0,0);}  }
class C{  private void computeTipVisibleBounds(){  Rectangle r=tipWindow.getBounds();  Point p=r.getLocation();  SwingUtilities.convertPointFromScreen(p,textArea);  r.setLocation(p);  tipVisibleBounds.setBounds(r.x,r.y - 15,r.width,r.height + 15 * 2);}  }
class C{  public static char toChar(byte b){  return (char)(b & 0xFF);}  }
class C{  public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  public void initLeading(){  this.leading=0;  while (this.leading < this.value.length() && this.value.charAt(this.leading) == ' ') {    this.leading++;  }  if (this.leading == this.value.length()) {    this.setEmpty();  }}  }
class C{  public final String toString(){  StringBuilder sb=new StringBuilder(64);switch (_type) {case TYPE_ROOT:    sb.append("/");  break;case TYPE_ARRAY:sb.append('[');sb.append(getCurrentIndex());sb.append(']');break;case TYPE_OBJECT:sb.append('{');if (_currentName != null) {sb.append('"');CharTypes.appendQuoted(sb,_currentName);sb.append('"');} else {sb.append('?');}sb.append(']');break;}return sb.toString();}  }
class C{  public IntegerMapperBuilder boost(Float boost){  this.boost=boost;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.577 -0500",hash_original_method="62D967C94A5AE3381329492B03B8E183",hash_generated_method="F6623F8B06A9D28FCFE1C4FAAFEFBC6B") public String encodeBody(){  if (callId == null)   return null; else {    String retVal=callId;    if (!parameters.isEmpty()) {      retVal+=SEMICOLON + parameters.encode();    }    return retVal;  }}  }
class C{  public static boolean isAppletAvailable(String applet,String path){  return getInternals().isAppletAvailable(applet,path);}  }
class C{  @SuppressWarnings("deprecation") public void stop(){  if (currentThread == null) {    log.error("Stop with currentThread null!");    return;  }  try {    currentThread.stop();  } catch (  java.lang.ThreadDeath e) {    log.error(e.toString());  }  currentThread=null;  done();}  }
class C{  public static int toIntFromNibbles(byte[] nibbles){  return toInt(nibbles[0],nibbles[1],nibbles[2],nibbles[3],nibbles[4],nibbles[5],nibbles[6],nibbles[7]);}  }
class C{  public UnicodeWriter(OutputStream out,String encoding) throws UnsupportedEncodingException, IOException {  init(out,encoding);}  }
class C{  public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  vcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  public int size(){  return parseMap.size();}  }
class C{  public void endQuery(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(queryInProgressId,-1);  int endQueryId;  if (timedOut) {    endQueryId=queryTimedOutId;  } else   if (failed) {    endQueryId=queryFailedId;  } else {    endQueryId=queryId;  }  this.stats.incInt(endQueryId,1);  this.stats.incLong(queryDurationId,duration);}  }
class C{  public int discretizeY(double position){  int i=(int)(position * oneOverSpaceHeight * trapGridHeight);  if (toroidalWorld)   return (i + trapGridHeight) % trapGridHeight;  i+=2 * trapGridHeight;  i%=(2 * trapGridHeight);  if (i < trapGridHeight)   return i;  return trapGridHeight - i;}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  public Period sub(final Period another){  return this.clone().subAssign(another);}  }
class C{  public void changeCursor(SquidCursor<? extends T> newCursor){  SquidCursor<? extends T> oldCursor=swapCursor(newCursor);  if (oldCursor != null) {    oldCursor.close();  }}  }
class C{  public static boolean registerCanonicalizer(final String c14nAlgorithmURI){  final boolean added=canonicalizers.add(c14nAlgorithmURI);  return added;}  }
class C{  public boolean supportsSchemasInProcedureCalls() throws SQLException {  return false;}  }
class C{  public GroupingIdExpression(){}  }
class C{  public void commit() throws SQLException {  conn.commit();  if (conn.getHoldability() != HOLD_CURSORS_OVER_COMMIT) {    rs=null;  }}  }
class C{  public static String fromIPv4Address(int ipAddress){  StringBuffer sb=new StringBuffer();  int result=0;  for (int i=0; i < 4; ++i) {    result=(ipAddress >> ((3 - i) * 8)) & 0xff;    sb.append(Integer.valueOf(result).toString());    if (i != 3)     sb.append(".");  }  return sb.toString();}  }
class C{  public FileProvider(File file){  this.file=file;}  }
class C{  public int length(){  return info.length + 6;}  }
class C{  @DSComment("data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.677 -0500",hash_original_method="A5B6E1F6D425F99E0AE9246791CF1B08",hash_generated_method="B309F6487EC0084BAC11E56A87B00298") public boolean isEmail(){  return mWrappedSmsMessage.isEmail();}  }
class C{  private void handleSelectionChanged(){  updateButtonAvailability();}  }
class C{  public void debug(Object message,Throwable t){}  }
class C{  public SwaggerBackendBuilder domain(final String domain){  options.setDomain(domain);  return this;}  }
class C{  public EpsilonInsensitiveLoss(double eps){  if (eps < 0 || Double.isNaN(eps) || Double.isInfinite(eps))   throw new IllegalArgumentException("Epsilon must be non-negative, not " + eps);  this.eps=eps;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static <K,V>SynchronizedListMultimap<K,V> of(MutableListMultimap<K,V> multimap){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedListMultimap for null");  }  return new SynchronizedListMultimap<>(multimap);}  }
class C{  @Override public void onOutputAppend(String noteId,String paragraphId,String appId,String output){  Message msg=new Message(OP.APP_APPEND_OUTPUT).put("noteId",noteId).put("paragraphId",paragraphId).put("appId",appId).put("data",output);  broadcast(noteId,msg);}  }
class C{  public String select(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  return new String(text,index[i],n - index[i]);}  }
class C{  public Matrix4x3f reflection(float a,float b,float c,float d){  float da=a + a, db=b + b, dc=c + c, dd=d + d;  m00=1.0f - da * a;  m01=-da * b;  m02=-da * c;  m10=-db * a;  m11=1.0f - db * b;  m12=-db * c;  m20=-dc * a;  m21=-dc * b;  m22=1.0f - dc * c;  m30=-dd * a;  m31=-dd * b;  m32=-dd * c;  properties=0;  return this;}  }
class C{  public static void makeFiles(int n,File dir,String fileName,String ext) throws FileNotFoundException {  for (int j=1; j <= n; j++) {    File file=new File(dir,fileName + j + ext);    if (!file.exists()) {      try (PrintWriter output=new PrintWriter(file)){        for (int i=0; i < 100; i++) {          output.print(((int)(Math.random() * 500) + 1));          output.print(" ");        }      }     }  }}  }
class C{  public static Object executeOn(ServerLocation location,ExecutablePool pool,Properties securityProps){  AbstractOp op=new AuthenticateUserOpImpl(pool,securityProps);  return pool.executeOn(location,op);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CandlestickRenderer)) {    return false;  }  CandlestickRenderer that=(CandlestickRenderer)obj;  if (this.candleWidth != that.candleWidth) {    return false;  }  if (!PaintUtilities.equal(this.upPaint,that.upPaint)) {    return false;  }  if (!PaintUtilities.equal(this.downPaint,that.downPaint)) {    return false;  }  if (this.drawVolume != that.drawVolume) {    return false;  }  if (this.maxCandleWidthInMilliseconds != that.maxCandleWidthInMilliseconds) {    return false;  }  if (this.autoWidthMethod != that.autoWidthMethod) {    return false;  }  if (this.autoWidthFactor != that.autoWidthFactor) {    return false;  }  if (this.autoWidthGap != that.autoWidthGap) {    return false;  }  if (this.useOutlinePaint != that.useOutlinePaint) {    return false;  }  if (!PaintUtilities.equal(this.volumePaint,that.volumePaint)) {    return false;  }  return super.equals(obj);}  }
class C{  public void openWifi(){  if (!mWifiManager.isWifiEnabled()) {    mWifiManager.setWifiEnabled(true);  }}  }
class C{  Token nextToken(final Token token) throws IOException {  int lastChar=in.getLastChar();  int c=in.read();  boolean eol=readEndOfLine(c);  if (ignoreEmptyLines) {    while (eol && isStartOfLine(lastChar)) {      lastChar=c;      c=in.read();      eol=readEndOfLine(c);      if (isEndOfFile(c)) {        token.type=EOF;        return token;      }    }  }  if (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {    token.type=EOF;    return token;  }  if (isStartOfLine(lastChar) && isCommentStart(c)) {    final String line=in.readLine();    if (line == null) {      token.type=EOF;      return token;    }    final String comment=line.trim();    token.content.append(comment);    token.type=COMMENT;    return token;  }  while (token.type == INVALID) {    if (ignoreSurroundingSpaces) {      while (isWhitespace(c) && !eol) {        c=in.read();        eol=readEndOfLine(c);      }    }    if (isDelimiter(c)) {      token.type=TOKEN;    } else     if (eol) {      token.type=EORECORD;    } else     if (isQuoteChar(c)) {      parseEncapsulatedToken(token);    } else     if (isEndOfFile(c)) {      token.type=EOF;      token.isReady=true;    } else {      parseSimpleToken(token,c);    }  }  return token;}  }
class C{  public synchronized void initTaskSchedulerIfNot(){  if (scheduler == null) {    scheduler=Executors.newSingleThreadScheduledExecutor(DaemonThreadFactory.getInstance());    CapacityAwareTaskScheduler runner=new CapacityAwareTaskScheduler();    scheduler.scheduleAtFixedRate(runner,ParallecGlobalConfig.schedulerInitDelay,ParallecGlobalConfig.schedulerCheckInterval,TimeUnit.MILLISECONDS);    logger.info("initialized daemon task scheduler to evaluate waitQ tasks.");  }}  }
class C{  int findEndText(String source,int ofs){  for (int i=ofs; i < source.length(); i++) {    if (isAlpha(source.charAt(i)) == false && isNumeric(source.charAt(i)) == false) {      return i;    }  }  return -1;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new CJKAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public void buildStructure() throws Exception {  m_SearchAlgorithm.buildStructure(this,m_Instances);}  }
class C{  public Resource mapAttributes(Resource object,JSONObject attributesJsonObject){  if (attributesJsonObject == null) {    return object;  }  for (  Field field : object.getClass().getDeclaredFields()) {    String jsonFieldName=field.getName();    boolean isRelation=false;    for (    Annotation annotation : field.getAnnotations()) {      if (annotation.annotationType() == SerializedName.class) {        SerializedName serializeName=(SerializedName)annotation;        jsonFieldName=serializeName.value();      }      if (annotation.annotationType() == Relationship.class) {        isRelation=true;      }    }    if (isRelation) {      continue;    }    mAttributeMapper.mapAttributeToObject(object,attributesJsonObject,field,jsonFieldName);  }  return object;}  }
class C{  public static void write(Address a){  writeHex(a.toWord(),BYTES_IN_ADDRESS);}  }
class C{  public void test_lbs_host_policy(){  final String H1="H1";  final HostScore hostScore1=new HostScore("H1",1d);  assertEquals(1d,hostScore1.getAvailability());  final HostScore[] hostScores=new HostScore[]{hostScore1};{    final HostScore actualHost=AbstractHostLBSPolicy.getHost(.0,hostScores);    assertSameRef(hostScore1,actualHost);  }{    final HostScore actualHost=AbstractHostLBSPolicy.getHost(.1,hostScores);    assertSameRef(hostScore1,actualHost);  }{    final HostScore actualHost=AbstractHostLBSPolicy.getHost(.5,hostScores);    assertSameRef(hostScore1,actualHost);  }{    final HostScore actualHost=AbstractHostLBSPolicy.getHost(.9,hostScores);    assertSameRef(hostScore1,actualHost);  }{    try {      AbstractHostLBSPolicy.getHost(1d,hostScores);    } catch (    IllegalArgumentException ex) {      if (log.isInfoEnabled())       log.info(ex);    }  }{    try {      AbstractHostLBSPolicy.getHost(-.00001d,hostScores);    } catch (    IllegalArgumentException ex) {      if (log.isInfoEnabled())       log.info(ex);    }  }  final UUID A=UUID.randomUUID();  final UUID B=UUID.randomUUID();  final UUID C=UUID.randomUUID();  final ServiceScore serviceA=new ServiceScore(A,H1,toRequestURI(H1));  final ServiceScore serviceB=new ServiceScore(B,H1,toRequestURI(H1));  final ServiceScore serviceC=new ServiceScore(C,H1,toRequestURI(H1));{{      final Random rand=new Random(1L);      final ServiceScore[] serviceScores=new ServiceScore[]{serviceA};      final ServiceScore actualService=AbstractHostLBSPolicy.getService(rand,hostScore1,serviceScores);      assertTrue(actualService == serviceA);    }{      final Random rand=new Random(1L);      final ServiceScore[] serviceScores=new ServiceScore[]{serviceA,serviceB,serviceC};      final ServiceScore actualService=AbstractHostLBSPolicy.getService(rand,hostScore1,serviceScores);      assertTrue(actualService == serviceA);    }  }}  }
class C{  private void adjustTopByAspectRatio(RectF rect,float aspectRatio){  rect.top=rect.bottom - rect.width() / aspectRatio;}  }
class C{  public ObjectFactory(){}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof InformationDelegator) {    Debug.message("mousemode","NavMouseMode: found InformationDelegator");    setInfoDelegator((InformationDelegator)someObj);  }  if (someObj instanceof CoordInfoFormatterHandler) {    setCoordFormatterHandler((CoordInfoFormatterHandler)someObj);  }}  }
class C{  @Override protected void buildActions(final List<String> list){  super.buildActions(list);  Chest chest=entity;  if (chest != null && chest.isOpen()) {    list.add(ActionType.INSPECT.getRepresentation());    list.add(ActionType.CLOSE.getRepresentation());  } else {    list.add(ActionType.OPEN.getRepresentation());  }}  }
class C{  private Service(){}  }
class C{  private String computeGuessingCompletion() throws JavaModelException {  StringBuffer buffer=new StringBuffer();  appendMethodNameReplacement(buffer);  FormatterPrefs prefs=getFormatterPrefs();  setCursorPosition(buffer.length());  if (prefs.afterOpeningParen)   buffer.append(SPACE);  char[][] parameterNames=fProposal.findParameterNames(null);  fChoices=guessParameters(parameterNames);  int count=fChoices.length;  int replacementOffset=getReplacementOffset();  for (int i=0; i < count; i++) {    if (i != 0) {      if (prefs.beforeComma)       buffer.append(SPACE);      buffer.append(COMMA);      if (prefs.afterComma)       buffer.append(SPACE);    }    ICompletionProposal proposal=fChoices[i][0];    String argument=proposal.getDisplayString();    Position position=fPositions[i];    position.setOffset(replacementOffset + buffer.length());    position.setLength(argument.length());    if (proposal instanceof JavaCompletionProposal)     ((JavaCompletionProposal)proposal).setReplacementOffset(replacementOffset + buffer.length());    buffer.append(argument);  }  if (prefs.beforeClosingParen)   buffer.append(SPACE);  buffer.append(RPAREN);  if (canAutomaticallyAppendSemicolon())   buffer.append(SEMICOLON);  return buffer.toString();}  }
class C{  public boolean removeParameter(final String name){  return this.local.removeParameter(name);}  }
class C{  private CNodeColorCollector(){}  }
class C{  private static String checksumMD5(String data){  MessageDigest md5=null;  try {    md5=MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException("Unable to create MD5 instance",ex);  }  return hexEncode(md5.digest(data.getBytes()));}  }
class C{  public static void uiImpl(){  UIManager.put("Tree.background",new ColorUIResource(Color.white));  UIManager.put("Tree.textBackground",new ColorUIResource(Color.white));  UIManager.put("Tree.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("Tree.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("Tree.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Tree.selectionBorderColor",new ColorUIResource(BeautyEyeLNFHelper.commonFocusedBorderColor));  UIManager.put("Tree.openIcon",__IconFactory__.getInstance().getTreeDefaultOpenIcon_16_16());  UIManager.put("Tree.closedIcon",__IconFactory__.getInstance().getTreeDefaultClosedIcon_16_16());  UIManager.put("Tree.leafIcon",__IconFactory__.getInstance().getTreeDefaultLeafIcon_16_16());  UIManager.put("Tree.expandedIcon",__IconFactory__.getInstance().getTreeA());  UIManager.put("Tree.collapsedIcon",__IconFactory__.getInstance().getTreeB());  UIManager.put("Tree.paintLines",false);  UIManager.put("Tree.rowHeight",18);  UIManager.put("Tree.textForeground",new ColorUIResource(70,70,70));  UIManager.put("Tree.editorBorder",new BorderUIResource(BorderFactory.createEmptyBorder(1,5,1,5)));  UIManager.put("TreeUI",org.jb2011.lnf.beautyeye.ch16_tree.BETreeUI.class.getName());}  }
class C{  private void checkVolumeNames(Volume volume){  URI storageSystemUri=volume.getStorageController();  if (null != storageSystemUri) {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemUri);    if (storageSystem.deviceIsType(Type.ibmxiv)) {      if (volume.getLabel().matches(REGEX_XIV)) {        return;      } else {        throw APIException.badRequests.invalidVolumeName(volume.getLabel());      }    }  }}  }
class C{  public void starting(FrameworkMethod method){}  }
class C{  public void writeTo(OutputStream stream){  try {    stream.write(baos.getByteBuffer().array());  } catch (  IOException ioe) {    throw new FacesException(ioe);  }}  }
class C{  public static Severity parseSeverity(String str) throws IllegalSeverityException {  if (str.equalsIgnoreCase(Messages.ERROR)) {    return ERROR;  } else   if (str.equalsIgnoreCase(Messages.WARNING)) {    return WARNING;  } else {    throw new IllegalSeverityException();  }}  }
class C{  private void convertInstanceNumeric(Instance instance){  if (!m_needToTransform) {    push(instance);    return;  }  double[] vals=new double[outputFormatPeek().numAttributes()];  int attSoFar=0;  for (int j=0; j < getInputFormat().numAttributes(); j++) {    Attribute att=getInputFormat().attribute(j);    if ((!att.isNominal()) || (j == getInputFormat().classIndex())) {      vals[attSoFar]=instance.value(j);      attSoFar++;    } else {      if (instance.isMissing(j)) {        for (int k=0; k < att.numValues() - 1; k++) {          vals[attSoFar + k]=instance.value(j);        }      } else {        int k=0;        while ((int)instance.value(j) != m_Indices[j][k]) {          vals[attSoFar + k]=1;          k++;        }        while (k < att.numValues() - 1) {          vals[attSoFar + k]=0;          k++;        }      }      attSoFar+=att.numValues() - 1;    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);}  }
class C{  public void fireProjectionChanged(Projection p){  projectionSupport.fireProjectionChanged(p);}  }
class C{  protected void prepare(){  System.out.println("In AddLiberoRecords prepare");  log.fine("In AddLiberoRecords prepare");  AD_Client_ID=Integer.parseInt(Env.getContext(Env.getCtx(),"#AD_Client_ID"));  ProcessInfoParameter[] para=getParameter();}  }
class C{  public void appendToString(StringBuffer buffer,String toString){  if (toString != null) {    int pos1=toString.indexOf(contentStart) + contentStart.length();    int pos2=toString.lastIndexOf(contentEnd);    if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {      String data=toString.substring(pos1,pos2);      if (fieldSeparatorAtStart) {        removeLastFieldSeparator(buffer);      }      buffer.append(data);      appendFieldSeparator(buffer);    }  }}  }
class C{  public IonException(Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  public void loadSheet(BufferedReader reader) throws IOException, ServiceException {  SpreadsheetFeed feed=service.getFeed(factory.getSpreadsheetsFeedUrl(),SpreadsheetFeed.class);  List spreadsheets=feed.getEntries();  int spreadsheetIndex=getIndexFromUser(reader,spreadsheets,"spreadsheet");  SpreadsheetEntry spreadsheet=feed.getEntries().get(spreadsheetIndex);  if (spreadsheet.getWorksheets().size() == 1) {    cellFeedUrl=spreadsheet.getWorksheets().get(0).getCellFeedUrl();  } else {    List worksheets=spreadsheet.getWorksheets();    int worksheetIndex=getIndexFromUser(reader,worksheets,"worksheet");    WorksheetEntry worksheet=(WorksheetEntry)worksheets.get(worksheetIndex);    cellFeedUrl=worksheet.getCellFeedUrl();  }  System.out.println("Sheet loaded.");}  }
class C{  private static String trimLeadingSlash(String value){  if (value == null)   return "";  while (value.indexOf("/") > -1) {    value=value.substring(value.indexOf("/") + 1);  }  return value;}  }
class C{  protected boolean computeBlit(int dx,int dy,Point blitFrom,Point blitTo,Dimension blitSize,Rectangle blitPaint){  int dxAbs=Math.abs(dx);  int dyAbs=Math.abs(dy);  Dimension extentSize=getExtentSize();  if ((dx == 0) && (dy != 0) && (dyAbs < extentSize.height)) {    if (dy < 0) {      blitFrom.y=-dy;      blitTo.y=0;      blitPaint.y=extentSize.height + dy;    } else {      blitFrom.y=0;      blitTo.y=dy;      blitPaint.y=0;    }    blitPaint.x=blitFrom.x=blitTo.x=0;    blitSize.width=extentSize.width;    blitSize.height=extentSize.height - dyAbs;    blitPaint.width=extentSize.width;    blitPaint.height=dyAbs;    return true;  } else   if ((dy == 0) && (dx != 0) && (dxAbs < extentSize.width)) {    if (dx < 0) {      blitFrom.x=-dx;      blitTo.x=0;      blitPaint.x=extentSize.width + dx;    } else {      blitFrom.x=0;      blitTo.x=dx;      blitPaint.x=0;    }    blitPaint.y=blitFrom.y=blitTo.y=0;    blitSize.width=extentSize.width - dxAbs;    blitSize.height=extentSize.height;    blitPaint.width=dxAbs;    blitPaint.height=extentSize.height;    return true;  } else {    return false;  }}  }
class C{  private void generateIndexMap(int size){  mIndexMap=new int[size][size];  for (int x=0; x < size; x++) {    for (int y=0; y < size; y++) {      int z=x + y;      mIndexMap[x][y]=z < size ? z : z - size;    }  }}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public boolean isThresholdVisible(){  return null == thresholdVisible ? _thresholdVisible : thresholdVisible.get();}  }
class C{  public static UnicodeEscaper between(final int codepointLow,final int codepointHigh){  return new UnicodeEscaper(codepointLow,codepointHigh,true);}  }
class C{  public EqualsResult append(final char lhs,final char rhs){  if (!isEqual) {    return this;  }  isEqual=lhs == rhs;  return this;}  }
class C{  boolean isSupportedPlatform(String plugin){  return !unsupportedPlatform.contains(plugin);}  }
class C{  public boolean hasLeaf(){  return this.hasLeaf;}  }
class C{  public void update(){  this.expirySupport.setExpired(true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Channel c=getChannel(stack);  return (c == null) ? "" : c.getNumber();}  }
class C{  public String permplustermvectorfile(){  return permplustermvectorfile;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public SocksServerSocket(SocksProxy proxy,InetAddress inetAddress,int port) throws SocksException, IOException {  this.proxy=proxy.copy();  this.incomePort=port;  this.incomeAddress=inetAddress;  this.proxy.buildConnection();  CommandReplyMessage replyMesasge=this.proxy.requestBind(incomeAddress,incomePort);  bindAddress=replyMesasge.getIp();  bindPort=replyMesasge.getPort();  logger.debug("Bind at {}:{}",bindAddress,bindPort);}  }
class C{  public void send(String body){  send(_subject,body);}  }
class C{  void add(SuperActivityToast superActivityToast){  mList.add(superActivityToast);  this.showNextSuperToast();}  }
class C{  public final BytesRef bytes(){  return bytes;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  synchronized public int writeBulk(List<LogRecord> records) throws IOException {  int numRecords=0;  for (  LogRecord r : records) {    write(r);    numRecords++;  }  return numRecords;}  }
class C{  boolean hasRequired(){  return m_has_required;}  }
class C{  public static int round4(double d){  return (int)(10000 * (d + (d > 0 ? 0.00005 : -0.00005)));}  }
class C{  @Override public String toString(){  return "Normal Distribution. Mean = " + Utils.doubleToString(m_Mean,4) + " StandardDev = "+ Utils.doubleToString(m_StandardDev,4)+ " WeightSum = "+ Utils.doubleToString(m_SumOfWeights,4)+ " Precision = "+ m_Precision+ "\n";}  }
class C{  public static void initialize(Application app,List<SqlColumnMapping> customMappings,QuantumFluxDatabaseUpgradeListener quantumFluxDatabaseUpgradeListener){  mApplicationContext=app;  mMappingFactory=new SqlColumnMappingFactory();  if (customMappings != null) {    for (    SqlColumnMapping mapping : customMappings) {      mMappingFactory.addColumnMapping(mapping);    }  }  mDatabase=new QuantumFluxDatabase(app,quantumFluxDatabaseUpgradeListener);}  }
class C{  public Observable<List<Api.Tag>> tag(FeedItem feedItem,List<String> tags){  String tagString=Joiner.on(",").join(transform(tags,null));  return api.addTags(null,feedItem.id(),tagString).map(null);}  }
class C{  @RolesAllowed({"PLATFORM_OPERATOR"}) public void saveProperties(Map<String,Properties> messagePropertiesMap,String languageCode,LocalizedDataType dataType) throws OperationNotPermittedException, PropertiesImportException, ObjectNotFoundException {  PropertiesImportValidator validator=new PropertiesImportValidator(dm);  validator.checkLanguageCodeNotNull(languageCode);  validator.checkLanguageSupported(languageCode);  if (dataType.equals(LocalizedDataType.MessageProperties)) {    storePropertiesToDB(messagePropertiesMap,LocalizedObjectTypes.MESSAGE_PROPERTIES);  } else   if (dataType.equals(LocalizedDataType.MailProperties)) {    storePropertiesToDB(messagePropertiesMap,LocalizedObjectTypes.MAIL_PROPERTIES);  } else   if (dataType.equals(LocalizedDataType.PlatformObjects)) {    storeLocalizedNamesToDB(messagePropertiesMap);  }}  }
class C{  public Iterator childEdges(Node n){  return super.outEdges(n);}  }
class C{  @Deprecated public static void fill(final char[] array,final int from,int to,final char value){  ensureFromTo(array,from,to);  if (from == 0)   while (to-- != 0)   array[to]=value; else   for (int i=from; i < to; i++)   array[i]=value;}  }
class C{  public String seedTipText(){  return "The seed used for randomizing the data " + "for cross-validation.";}  }
class C{  public ListMultimap(int initialCapacity){  this(new LinkedHashMap<K,List<V>>(initialCapacity));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.888 -0500",hash_original_method="072F8B79FA7D55AD4D16BF2975AA6259",hash_generated_method="F26C02109EF7607977BCCAA2DBE030B1") synchronized void close(){  if (DBG)   log("close()");  if (mConnection != null) {    mContext.unbindService(mConnection);    mConnection=null;  }  mServiceListener=null;}  }
class C{  public void assertSeenPrompts(List<String> prompts){  Assert.assertEquals(prompts,seenPrompts);}  }
class C{  public boolean removeEdge(int edge){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits){  this.effectiveKeyBits=effectiveKeyBits;}  }
class C{  @Override public SPOPredicate asBound(IBindingSet bindingSet){  final SPOStarJoin starJoin=(SPOStarJoin)super.asBound(bindingSet);  for (  IStarConstraint starConstraint : starConstraints) {    starJoin.addStarConstraint(starConstraint.asBound(bindingSet));  }  return starJoin;}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  public boolean isUnion(){  return true;}  }
class C{  public Fits(File myFile) throws FitsException {  this(myFile,CompressionManager.isCompressed(myFile));}  }
class C{  public void passivate(boolean includeSelection){  for (int i=0; i < getItemCount(); i++) {    if (!includeSelection && getRaptorTabItemAt(i) == getRaptorTabItemSelection()) {    } else {      getRaptorTabItemAt(i).raptorItem.onPassivate();    }  }}  }
class C{  public boolean isAveraged(){  return averaged;}  }
class C{  public int redeliver(){  if (this.isComplete())   return 0;  if (tasksAwaitingDelivery.size() > 0)   return 0;  if (System.currentTimeMillis() - lastDeliveryTime < REDELIVERY_QUIET_PERIOD_MSEC)   return 0;  tasksById.forEachEntry(null);  redeliveryCount+=1;  LOG.info("Re-enqueued {} incomplete tasks for delivery on job {}.",tasksAwaitingDelivery.size(),this.jobId);  return tasksAwaitingDelivery.size();}  }
class C{  public BuildViewMetadata(final ILocalBTreeView src,final long maxSumSegBytes,final Event parentEvent){  if (src == null)   throw new IllegalArgumentException();  if (maxSumSegBytes < 0)   throw new IllegalArgumentException();  final Event e=parentEvent.newSubEvent(OverflowSubtaskEnum.ChooseView).start();  try {    this.maxSumSegBytes=maxSumSegBytes;    final AbstractBTree[] sources=src.getSources();    this.nsources=sources.length;    final List<AbstractBTree> accepted=new ArrayList<AbstractBTree>(nsources);    accepted.add(sources[0]);    int journalCount=1;    int segmentCount=0;    long sumEntryCount=sources[0].getEntryCount();    long sumSegBytes=0L;    for (int i=1; i < sources.length; i++) {      final AbstractBTree s=sources[i];      final long entryCount=s.getEntryCount();      final boolean isJournal=!(s instanceof IndexSegment);      final long segBytes=(isJournal ? 0L : s.getStore().size());      if (sumSegBytes + segBytes > maxSumSegBytes)       break;      sumEntryCount+=entryCount;      if (isJournal)       journalCount++; else       segmentCount++;      sumSegBytes+=segBytes;      accepted.add(s);    }    this.journalCount=journalCount;    this.segmentCount=segmentCount;    this.sumEntryCount=sumEntryCount;    this.sumSegBytes=sumSegBytes;    compactingMerge=accepted.size() == sources.length;    naccepted=accepted.size();    if (naccepted == 1) {      acceptedView=(BTree)accepted.get(0);    } else {      acceptedView=new FusedView(accepted.toArray(new AbstractBTree[naccepted]));    }    e.addDetails(getParams());  }  finally {    e.end();  }}  }
class C{  public static OperatorInfoBubble displayMissingMandatoryParameterInformation(final Operator op,final ParameterType param){  if (op == null) {    throw new IllegalArgumentException("op must not be null!");  }  if (param == null) {    throw new IllegalArgumentException("param must not be null!");  }  String key="process_mandatory_parameter_missing";  String opName=op.getOperatorDescription().getName();  return displayMissingMandatoryParameterInformation(op,param,true,key,opName,param.getKey());}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public void testSystemCacheTx() throws Exception {  final Ignite ignite=grid(0);  final IgniteInternalCache<Object,Object> hadoopCache=getSystemCache(ignite,CU.SYS_CACHE_HADOOP_MR);  checkImplicitTxSuccess(hadoopCache);  checkStartTxSuccess(hadoopCache);}  }
class C{  public String toString(){  return m_str;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  for (int i=0; i < m_exprs.length; i++) {    m_exprs[i].fixupVariables(vars,globalsSize);  }}  }
class C{  public List<Long> computeFunnel(){  Integer[] sortedIndex=IntStream.rangeClosed(0,actions.size() - 1).boxed().sorted(null).toArray(null);  int inputSize=actions.size();  int currentFunnelStep=0;  int funnelStepSize=funnelSteps.size();  List<Long> results=new ArrayList<>(Collections.nCopies(funnelStepSize,0L));  for (int i=0; i < inputSize && currentFunnelStep < funnelStepSize; i++) {    if (funnelSteps.get(currentFunnelStep).contains(actions.get(sortedIndex[i]))) {      results.set(currentFunnelStep,1L);      currentFunnelStep++;    }  }  return results;}  }
class C{  public boolean isAddressedModePossible(){  AddressedProgrammerManager ap=InstanceManager.getNullableDefault(AddressedProgrammerManager.class);  if (ap == null) {    return false;  }  return ap.isAddressedModePossible();}  }
class C{  public long delayacct_blkio_ticks(){  return Long.parseLong(fields[41]);}  }
class C{  private void selectRadioButton(ActionEvent event,boolean next){  Object eventSrc=event.getSource();  if (!isValidRadioButtonObj(eventSrc))   return;  ButtonGroupInfo btnGroupInfo=new ButtonGroupInfo((JRadioButton)eventSrc);  btnGroupInfo.selectNewButton(next);}  }
class C{  public StackedAreaChart(String group,String field,String[] columns){  this(group,field,columns,1.0);}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.write(server_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  out.write(cipher_suite.toBytes());  out.write(compression_method);  length=38 + session_id.length;}  }
class C{  public static boolean isImageCached(final String sURL){  assert isInitialized || SD_CACHE_PATH != null : SD_CARD_HELPER_INIT_ERR;  if (sURL == null || !isExternalStorageAvailable())   return false;  File file=getFile(sURL);  return file.exists();}  }
class C{  public static void main(String[] args){  Run();}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static String makeLength(String s,int n,boolean bRightJustify){  int l=s.length();  if (l == n) {    return s;  } else   if (l < n) {    if (bRightJustify) {      return SPACES.substring(0,n - l) + s;    }    return s + SPACES.substring(0,n - l);  } else {    return s.substring(0,n - 2) + "..";  }}  }
class C{  public void testAttributesSumGreaterThan1024RegresssionTest() throws Exception {  StringBuilder value=new StringBuilder();  for (int i=0; i < 2111; i++) {    value.append(i);  }  sw=new StringWriter();  writer=renderKit.createResponseWriter(sw,"text/html","UTF-8");  writer.startElement("input",null);  writer.writeAttribute("onclick",value.toString(),"onclick");  writer.writeAttribute("onclick",value.toString(),"onclick");  writer.endElement("input");  StringBuilder control=new StringBuilder();  control.append("<input onclick=\"").append(value.toString()).append("\" onclick=\"").append(value.toString()).append("\" />");  assertTrue(sw.toString(),control.toString().trim().equals(sw.toString().trim()));}  }
class C{  protected synchronized void addException(long previousVersion,long nextVersion){  if (this.exceptions == null) {    this.exceptions=new LinkedList<RVVException>();  }  int i=0;  for (Iterator<RVVException> it=this.exceptions.iterator(); it.hasNext(); i++) {    RVVException e=it.next();    if (previousVersion >= e.nextVersion) {      RVVException except=RVVException.createException(previousVersion,nextVersion);      this.exceptions.add(i,except);      return;    }  }  this.exceptions.add(RVVException.createException(previousVersion,nextVersion));}  }
class C{  public T queryForId(DatabaseConnection databaseConnection,ID id,ObjectCache objectCache) throws SQLException {  if (mappedQueryForId == null) {    mappedQueryForId=MappedQueryForId.build(databaseType,tableInfo,null);  }  return mappedQueryForId.execute(databaseConnection,id,objectCache);}  }
class C{  private void incorporateTimestampValidationData(final ValidationContext validationContext){  final Element timeStampValidationDataDom=DSSXMLUtils.addElement(documentDom,unsignedSignaturePropertiesDom,XAdESNamespaces.XAdES141,"xades141:TimeStampValidationData");  final Set<CertificateToken> toIncludeSetOfCertificates=xadesSignature.getCertificatesForInclusion(validationContext);  final List<CertificateToken> toIncludeCertificates=new ArrayList<CertificateToken>();  toIncludeCertificates.addAll(toIncludeSetOfCertificates);  incorporateCertificateValues(timeStampValidationDataDom,toIncludeCertificates);  incorporateRevocationValues(timeStampValidationDataDom,validationContext);  String id="1";  final List<TimestampToken> archiveTimestamps=xadesSignature.getArchiveTimestamps();  if (archiveTimestamps.size() > 0) {    final TimestampToken timestampToken=archiveTimestamps.get(archiveTimestamps.size() - 1);    id=timestampToken.getDSSId().asXmlId();  }  timeStampValidationDataDom.setAttribute("Id","id-" + id);}  }
class C{  public boolean updatePhotoDescription(final Key photoKey,final String description) throws DatastoreException {  List<Property> properties=ImmutableList.of(makeProperty("description",makeValue(description)).build());  return DbUtils.updateEntity(datastore,photoKey,properties);}  }
class C{  private void loadPaymentRule(){  log.info("");  if (m_C_BankAccount_ID == -1)   return;  fPaymentRule.removeAllItems();  int HR_PaySelection_ID=fPaySelect.getSelectedItem().toKeyNamePair().getKey();  ArrayList<ValueNamePair> data=loadPaymentRule(HR_PaySelection_ID);  for (  ValueNamePair pp : data)   fPaymentRule.addItem(pp);  if (fPaymentRule.getItemCount() > 0)   fPaymentRule.setSelectedIndex(0);  loadPaymentRuleInfo();}  }
class C{  public int size(){  return sizeOfVector;}  }
class C{  public ParallaxPage descriptionTypefacePath(String path){  this.descriptionTyefacePath=path;  return this;}  }
class C{  protected int[] generateWorkingKey(boolean encrypting,byte[] key){  int[] newKey=new int[32];  boolean[] pc1m=new boolean[56], pcr=new boolean[56];  for (int j=0; j < 56; j++) {    int l=pc1[j];    pc1m[j]=((key[l >>> 3] & bytebit[l & 07]) != 0);  }  for (int i=0; i < 16; i++) {    int l, m, n;    if (encrypting) {      m=i << 1;    } else {      m=(15 - i) << 1;    }    n=m + 1;    newKey[m]=newKey[n]=0;    for (int j=0; j < 28; j++) {      l=j + totrot[i];      if (l < 28) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=28; j < 56; j++) {      l=j + totrot[i];      if (l < 56) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=0; j < 24; j++) {      if (pcr[pc2[j]]) {        newKey[m]|=bigbyte[j];      }      if (pcr[pc2[j + 24]]) {        newKey[n]|=bigbyte[j];      }    }  }  for (int i=0; i != 32; i+=2) {    int i1, i2;    i1=newKey[i];    i2=newKey[i + 1];    newKey[i]=((i1 & 0x00fc0000) << 6) | ((i1 & 0x00000fc0) << 10) | ((i2 & 0x00fc0000) >>> 10)| ((i2 & 0x00000fc0) >>> 6);    newKey[i + 1]=((i1 & 0x0003f000) << 12) | ((i1 & 0x0000003f) << 16) | ((i2 & 0x0003f000) >>> 4)| (i2 & 0x0000003f);  }  return newKey;}  }
class C{  public static boolean isDoThinning(){  return doThinning;}  }
class C{  public void shutdown(){  this.shallRun=false;  this.interrupt();  Log.getLog().info("catched DumpImporter termination signal");}  }
class C{  public boolean canConvert(Class clazz){  return this.getClass().equals(clazz);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  static void testLongFloorDivMod(long x,long y,Object divExpected,Object modExpected){  testLongFloorDiv(x,y,divExpected);  testLongFloorMod(x,y,modExpected);}  }
class C{  @Deprecated public void listSearches(OnClientCallback<List<SavedSearch>> callback){  AsyncReflector.execute(mClient,callback,"listSearches",mAuthenticationToken);}  }
class C{  public SQLTimeoutException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public int applyFilterToRecord(MedtronicSensorRecord currentRecord,List<Record> auxList){  return (int)currentRecord.unfilteredGlucose;}  }
class C{  public boolean isRoot(){  return this.root;}  }
class C{  public boolean seekTo(byte[] key) throws IOException {  return seekTo(key,0,key.length);}  }
class C{  public static boolean tryValidatePrefix(String uri,boolean useStrictValidation){  return tryValidate(uri,useStrictValidation ? STRICT_URI_PREFIX : LOOSE_URI_PREFIX);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public CUngroupSelectedGroupsAction(final ZyGraph graph){  super("Remove Selected Groups");  m_graph=Preconditions.checkNotNull(graph,"IE02842: graph argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_UNGROUP_SELECTED_GROUPS_HK.getKeyStroke());}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ContextMap))   return false;  ContextMap other=(ContextMap)obj;  if (!Equal.equal(this.rootValue,other.rootValue) || !Equal.equal(this.otherValue,other.otherValue))   return false;  if (this.nameTable.size() != other.nameTable.size())   return false;  for (Enumeration e=nameTable.keys(); e.hasMoreElements(); ) {    Object key=e.nextElement();    if (!nameTable.get(key).equals(other.nameTable.get(key)))     return false;  }  return true;}  }
class C{  @Override public boolean nullPlusNonNullIsNull(){  debugCodeCall("nullPlusNonNullIsNull");  return true;}  }
class C{  private LoginStatus tryLogin(HttpServletRequest httpRequest,String service,boolean setCookie,HttpServletResponse servletResponse,boolean tokenOnly) throws UnsupportedEncodingException, IOException {  String newToken=null;  String userName=null;  _log.debug("Logging in");  UsernamePasswordCredentials credentials=tokenOnly ? null : getCredentials(httpRequest);  if (credentials == null) {    StorageOSUser user=getUserFromContext();    if (user != null) {      newToken=user.getToken();      userName=user.getName();      _log.debug("Logged in with user from context");    }  } else {    StorageOSUserDAO user=authenticateUser(credentials);    if (user != null) {      validateLocalUserExpiration(credentials);      newToken=_tokenManager.getToken(user);      if (newToken == null) {        _log.error("Could not generate token for user: {}",user.getUserName());        throw new IllegalStateException(MessageFormat.format("Could not generate token for user: {}",user.getUserName()));      }      userName=user.getUserName();      auditOp(URI.create(user.getTenantId()),URI.create(user.getUserName()),OperationTypeEnum.AUTHENTICATION,true,null,credentials.getUserName());    } else {      auditOp(null,null,OperationTypeEnum.AUTHENTICATION,false,null,credentials.getUserName());    }  }  return new LoginStatus(userName,newToken,null != credentials);}  }
class C{  public void leftTrim(int numberOfSample){  trim(numberOfSample,0);}  }
class C{  public static String repeat(String str,int count){  final StringBuilder result=new StringBuilder();  for (int i=0; i < count; i++) {    result.append(str);  }  return result.toString();}  }
class C{  public DExaminingSsl(JFrame parent,String sslHost,int sslPort,boolean useClientAuth,KeyStoreHistory ksh){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.sslHost=sslHost;  this.sslPort=sslPort;  if (useClientAuth) {    this.keyStore=ksh.getCurrentState().getKeyStore();    Password pwd=ksh.getCurrentState().getPassword();    if (pwd != null) {      this.password=pwd.toCharArray();    }  }  initComponents();}  }
class C{  protected UnmanagedControllerCommand(Controller controller,Runnable initializer,Requirable... requirements){  super(controller,initializer,requirements);}  }
class C{  public FileCommandInfo(int fd,String command,int result,String parameters){  this(true,fd,command,result,parameters);}  }
class C{  public final Vec3D subSelf(float a,float b,float c){  x-=a;  y-=b;  z-=c;  return this;}  }
class C{  public SynthScrollableTabButton(int direction){  super(direction);  putClientProperty("__arrow_scale__",0.6);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  }  finally {    try {      if (out != null) {        out.close();      }    } catch (    Exception ignored) {    }  }}  }
class C{  public void executeQuery(){  m_sql=m_sql + " ORDER BY obl." + MPPOrderBOMLine.COLUMNNAME_Line;  issue.clearTable();  executeQuery(issue);  issue.repaint();}  }
class C{  public void throttleChange(ChangeEvent e){  firePropertyChangeEvent(new PropertyChangeEvent(this,"throttle",throttle_setting,throttle_spinner.getModel().getValue()));  throttle_setting=(Integer)throttle_spinner.getModel().getValue();}  }
class C{  public void saveState(Bundle bundle){  float currPosOnMapX=translateXToMapCoordinate(getWidth() / 2.0f);  float currPosOnMapY=translateYToMapCoordinate(getHeight() / 2.0f);  bundle.putFloat("com.ls.curPosOnMapX",currPosOnMapX);  bundle.putFloat("com.ls.curPosOnMapY",currPosOnMapY);  if (grid != null) {    bundle.putInt("com.ls.zoomLevel",grid.getZoomLevel());  }  bundle.putFloat("com.ls.scale",scale);  Log.d("MapWidget","Saved point pos: [" + currPosOnMapX + ", "+ currPosOnMapY+ " ]");}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  private Content saveAndPersistFetchDataToContent(Content content,String uri,int status){  if (isRelCanonicalPage(content)) {    LOGGER.info("Fetching page with rel canonical " + uri + ". Set Http status to 900");    content.setHttpStatusCode(REL_CANONICAL_PAGE_FAKE_HTTP_STATUS);  } else {    content.setHttpStatusCode(status);  }  content.setDateOfLoading(Calendar.getInstance().getTime());  if (persistOnTheFly) {    content=contentDataService.saveOrUpdate(content);  }  return content;}  }
class C{  public void close(ResultSet rs){  try {    Statement statement=rs.getStatement();    rs.close();    statement.close();    statement=null;    rs=null;  } catch (  Exception e) {  }}  }
class C{  public T caseProvidedRuntimeLibraryDependency(ProvidedRuntimeLibraryDependency object){  return null;}  }
class C{  private void initCropWindow(Rect bitmapRect){  if (!initializedCropWindow)   initializedCropWindow=true;  if (mFixAspectRatio) {    if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {      Edge.TOP.setCoordinate(bitmapRect.top);      Edge.BOTTOM.setCoordinate(bitmapRect.bottom);      final float centerX=getWidth() / 2f;      final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));      if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());      final float halfCropWidth=cropWidth / 2f;      Edge.LEFT.setCoordinate(centerX - halfCropWidth);      Edge.RIGHT.setCoordinate(centerX + halfCropWidth);    } else {      Edge.LEFT.setCoordinate(bitmapRect.left);      Edge.RIGHT.setCoordinate(bitmapRect.right);      final float centerY=getHeight() / 2f;      final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));      if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;      final float halfCropHeight=cropHeight / 2f;      Edge.TOP.setCoordinate(centerY - halfCropHeight);      Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);    }  } else {    final float horizontalPadding=0.1f * bitmapRect.width();    final float verticalPadding=0.1f * bitmapRect.height();    Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);    Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);    Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);    Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);  }}  }
class C{  public Date parseDate(String str){  try {    return dateFormat.parse(str);  } catch (  java.text.ParseException e) {    throw new RuntimeException(e);  }}  }
