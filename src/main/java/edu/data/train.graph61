class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteVirtualArray(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,VirtualArray.class,"id");  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,id);  ArgValidator.checkEntityNotNull(varray,id,isIdEmbeddedInURL(id));  ArgValidator.checkReference(VirtualArray.class,id,checkForDelete(varray));  if (varray.getDeviceRegistered()) {    throw APIException.badRequests.resourceCannotBeDeleted("Varray is already registered.");  }  _dbClient.markForDeletion(varray);  auditOp(OperationTypeEnum.DELETE_VARRAY,true,null,id.toString(),varray.getLabel());  return Response.ok().build();}  }
class C{  public static String toStrictSan(String unstrictSan){  String result=StringUtils.replaceChars(unstrictSan,",+#=x:X",null);  result=StringUtils.remove(result,"e.p.");  result=StringUtils.replaceChars(result,"ACDEFGH","acdefgh");  return result;}  }
class C{  @NotNull @ObjectiveCName("doValidateCode:withTransaction:") public Promise<AuthCodeRes> doValidateCode(String code,String transactionHash){  return modules.getAuthModule().doValidateCode(transactionHash,code);}  }
class C{  public static boolean isEmptyEditText(EditText edText){  return edText.getText().toString().trim().length() <= 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String charAt(String source,int posIndex){  posIndex=posIndex - 1;  if (source == null || source.length() == 0 || posIndex < 0 || posIndex > source.length())   return null;  try {    return String.valueOf(source.charAt(posIndex));  } catch (  Exception e) {  }  return null;}  }
class C{  public boolean isNow(){  return now;}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  super(fixNoHttpResponseException,httpPort,httpsPort);}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public void clearEditInfo() throws Exception {  m_relFlds.clearEditInfo();  m_extFlds.clearEditInfo();  m_multFlds.clearEditInfo();}  }
class C{  public static JsonArray array(int... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JsonArray array=new JsonArray();  for (  int value : values) {    array.add(value);  }  return array;}  }
class C{  final public void enable_tracing(){}  }
class C{  public Range<C> until(C to){  Objects.requireNonNull(to);  this.to=to;  toIncluded=false;  return this;}  }
class C{  public void reset(){  System.arraycopy(IV,0,cfbV,0,IV.length);  Arrays.fill(inBuf,(byte)0);  byteCount=0;  cipher.reset();}  }
class C{  public T caseValidationMarker(ValidationMarker object){  return null;}  }
class C{  @Override public void restoreSingleVolumeSnapshot(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot from=_dbClient.queryObject(BlockSnapshot.class,snapshot);    Volume to=_dbClient.queryObject(Volume.class,volume);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,from);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      CIMObjectPath cimJob;      if (_helper.isThinlyProvisioned(storage,to) || isBasedOnVNXThinStoragePool(to)) {        _log.info("Volume {} is thinly provisioned or based on a Thin StoragePool, need to deactivate the volume before restore",to.getLabel());        deactivateSnapshot(storage,from,syncObjectPath);        cimJob=_helper.callModifySettingsDefineState(storage,_helper.getRestoreFromSnapshotInputArguments(storage,to,from));      } else {        _log.info("Volume {} is not thinly provisioned, will attempt restore",to.getLabel());        cimJob=_helper.callModifyReplica(storage,_helper.getRestoreFromReplicaInputArguments(syncObjectPath));      }      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockRestoreSnapshotJob(cimJob,storage.getId(),taskCompleter)));    } else {      ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(storage.getLabel());      taskCompleter.error(_dbClient,error);    }  } catch (  WBEMException e) {    String message=String.format("Error encountered when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public StatisticsType addType(StatisticsType t){  StatisticsType result=t;synchronized (this.statTypes) {    StatisticsType currentValue=findType(result.getName());    if (currentValue == null) {      this.statTypes.put(result.getName(),result);    } else     if (result.equals(currentValue)) {      result=currentValue;    } else {      throw new IllegalArgumentException(LocalizedStrings.StatisticsTypeFactoryImpl_STATISTICS_TYPE_NAMED_0_ALREADY_EXISTS.toLocalizedString(result.getName()));    }  }  return result;}  }
class C{  public List<Candle> findCandlesByContractDateRangeBarSize(Integer idContract,ZonedDateTime startOpenDate,ZonedDateTime endOpenDate,Integer barSize){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Candle> query=builder.createQuery(Candle.class);    Root<Candle> from=query.from(Candle.class);    query.select(from);    query.orderBy(builder.asc(from.get("startPeriod")));    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != idContract) {      Join<Candle,Contract> contract=from.join("contract");      Predicate predicateContract=builder.equal(contract.get("idContract"),idContract);      predicates.add(predicateContract);    }    if (null != startOpenDate) {      Join<Candle,Tradingday> tradingdayOpenDate=from.join("tradingday");      Predicate predicateStartDate=builder.greaterThanOrEqualTo(tradingdayOpenDate.get("open").as(ZonedDateTime.class),startOpenDate);      predicates.add(predicateStartDate);      Predicate predicateEndDate=builder.lessThanOrEqualTo(tradingdayOpenDate.get("open").as(ZonedDateTime.class),endOpenDate);      predicates.add(predicateEndDate);    }    if (null != barSize) {      Predicate predicate=builder.equal(from.get("barSize"),barSize);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Candle> typedQuery=entityManager.createQuery(query);    List<Candle> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public Quaternionf rotationXYZ(float angleX,float angleY,float angleZ){  float sx=(float)Math.sin(angleX * 0.5);  float cx=(float)Math.cos(angleX * 0.5);  float sy=(float)Math.sin(angleY * 0.5);  float cy=(float)Math.cos(angleY * 0.5);  float sz=(float)Math.sin(angleZ * 0.5);  float cz=(float)Math.cos(angleZ * 0.5);  float cycz=cy * cz;  float sysz=sy * sz;  float sycz=sy * cz;  float cysz=cy * sz;  w=cx * cycz - sx * sysz;  x=sx * cycz + cx * sysz;  y=cx * sycz - sx * cysz;  z=cx * cysz + sx * sycz;  return this;}  }
class C{  public void deleteAlertingDefinition(AlertingDefinition alertingDefinition) throws IOException {  String id=alertingDefinition.getId();  AlertingDefinition local=existingAlertingDefinitions.remove(id);  if (local != null) {    Files.deleteIfExists(pathResolver.getAlertingDefinitionFilePath(local));    eventPublisher.publishEvent(new AbstractAlertingDefinitionEvent.AlertingDefinitionDeletedEvent(this,local));  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.743 -0500",hash_original_method="C1C113EB7A09B292CF1C69F4CC48EB73",hash_generated_method="9221D76F05BD5816E653D4B3D94FCBF6") public static ExecutorService newSingleThreadExecutor(){  return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1,1,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>()));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static String trimLeft(String src){  int len=src.length();  int st=0;  while ((st < len) && (CharUtil.isWhitespace(src.charAt(st)))) {    st++;  }  return st > 0 ? src.substring(st) : src;}  }
class C{  public synchronized void fuse(HyperLogLogPlus other) throws IOException {  if (null == other) {    return;  }  if (this.p != other.p) {    throw new IOException("Can't fuse estimators with different prefix length.");  }  if (this.pprime != other.pprime) {    other.toNormal();    this.toNormal();  }  if (Format.SPARSE == this.format || Format.SPARSE == other.format) {    other.toNormal();    this.toNormal();  }  if (Format.SPARSE == this.format && Format.SPARSE == this.format) {    this.merge();    other.merge();    int[] slthis=this.decodeSparseList();    int[] slother=other.decodeSparseList();    slthis=Arrays.copyOf(slthis,slthis.length + slother.length);    System.arraycopy(slother,0,slthis,slthis.length - slother.length,slother.length);    merge(slthis);    if (sparse_list.length > (int)Math.ceil((this.m * 6) / 8)) {      toNormal();      this.sparse_list=null;      this.tmp_set=null;    }  } else {    for (int i=0; i < this.m; i++) {      byte rho=other.getRho(i);      this.setRho(i,rho);    }  }}  }
class C{  public AbstractMRMessage createOutPacket(){  if (log.isDebugEnabled()) {    log.debug("createOutPacket for nodeType " + nodeType + " with "+ outputByteChanged[0]+ " "+ outputArray[0]+ ";"+ outputByteChanged[1]+ " "+ outputArray[1]+ ";"+ outputByteChanged[2]+ " "+ outputArray[2]+ ";"+ outputByteChanged[3]+ " "+ outputArray[3]+ ";");  }  SerialMessage m=new SerialMessage(1);  m.setElement(0,getNodeAddress());  m.setElement(1,17);  for (int i=0; i < outputBytes[nodeType]; i++) {    if (outputByteChanged[i]) {      outputByteChanged[i]=false;      m.setElement(2,i);      m.setElement(3,outputArray[i]);      return m;    }  }  m.setElement(2,0);  m.setElement(3,outputArray[0]);  return m;}  }
class C{  public static boolean useIC2(){  return Mekanism.hooks.IC2Loaded && EnergyNet.instance != null && !general.blacklistIC2;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.934 -0500",hash_original_method="E1E63B3BD3E5801BD481EB78C5FBD93C",hash_generated_method="4CC7DBA3774EC020B36C17E82CD9EC8C") private boolean defaultResolve(){switch (typeString.charAt(0)) {case 'I':    type=int.class;  return true;case 'B':type=byte.class;return true;case 'C':type=char.class;return true;case 'S':type=short.class;return true;case 'Z':type=boolean.class;return true;case 'J':type=long.class;return true;case 'F':type=float.class;return true;case 'D':type=double.class;return true;default :type=Object.class;return false;}}  }
class C{  @Delete public String remove(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule=jsonToFirewallRule(fmJson);  if (rule == null) {    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  boolean exists=false;  Iterator<FirewallRule> iter=firewall.getRules().iterator();  while (iter.hasNext()) {    FirewallRule r=iter.next();    if (r.ruleid == rule.ruleid) {      exists=true;      break;    }  }  if (!exists) {    status="Error! Can't delete, a rule with this ID doesn't exist.";    log.error(status);  } else {    firewall.deleteRule(rule.ruleid);    status="Rule deleted";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  @Override public void enterScope(final IScope scope){  super.enterScope(scope);  final ITopology topo=Cast.asTopology(scope,topology.value(scope));  if (topo != null) {    previous.set(scope.setTopology(topo));  }}  }
class C{  public void test_agg10() throws MalformedQueryException {  final String query="PREFIX : <http://www.example.org/>\n" + "SELECT ?P (COUNT(?O) AS ?C)\n" + "WHERE { ?S ?P ?O }";  negativeTest(query);}  }
class C{  @POST @Path("connectemc/ftps/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response configureConnectEmcFtpsParams(ConnectEmcFtps ftpsParams) throws Exception {  PropertyInfoUpdate ext=ConfigService.ConfigureConnectEmc.configureFtps(ftpsParams);  PropertyInfoRestRep targetPropInfo=getTargetPropsCommon();  PropertyInfoRestRep updateProps=getUpdateProps(ext,targetPropInfo.getAllProperties());  return updatePropertiesCommon(updateProps,null);}  }
class C{  public HttpCache(){  this(HttpCache.DEFAULT_CACHE_SIZE,HttpCache.DEFAULT_EXPIRY_TIME);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <T>ValueHashMap<T> newInstance(){  return new ValueHashMap<T>();}  }
class C{  public static FlakeId endOf(long epochMilli){  long sequenceTime=sequenceTimeFromEpochMilli(epochMilli);  long maxSubMilli=(1L << SUB_MILLI_BITS) - 1;  int maxNodeId=(1 << NODE_ID_BITS) - 1;  return new FlakeId(sequenceTime + maxSubMilli,maxNodeId);}  }
class C{  public boolean isEditable(){  return getAD_Client_ID() == Env.getAD_Client_ID(Env.getCtx());}  }
class C{  public boolean intersects(float start,float end){  boolean doesIntersect;  if (mSpans != null) {    if (mAddsSinceSort > 0) {      sortAndCollapse();    }    int found=Collections.binarySearch(mSpans,new Span(start,end),SpanIntersection.instance);    doesIntersect=found >= 0;  } else {    doesIntersect=true;  }  return doesIntersect;}  }
class C{  public void addAdditionalRoleInfo(AdditionalRoleInfo additionalRoleInfo){  getAdditionalRoleInfos().add(additionalRoleInfo);}  }
class C{  public T caseRuntimeProjectDependency(RuntimeProjectDependency object){  return null;}  }
class C{  protected int index(float val){  float[] set=_set;  Object[] values=_values;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val));  }  return isFree(values,index) ? -1 : index;}  }
class C{  public static SpanQuery spanPositionRangeQuery(SpanQuery query,int start,int end){  return spanQuery(new SpanPositionRangeQuery(query,start,end));}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:      return TypesPackage.TVARIABLE__AST_ELEMENT;default :    return -1;}}if (baseClass == TAnnotableElement.class) {switch (baseFeatureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:  return TypesPackage.TVARIABLE__ANNOTATIONS;default :return -1;}}if (baseClass == AccessibleTypeElement.class) {switch (baseFeatureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:return TypesPackage.TVARIABLE__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:return TypesPackage.TVARIABLE__DECLARED_PROVIDED_BY_RUNTIME;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_INTEGER);  out.writeInt(_value);}  }
class C{  public boolean isDynamicRecordings(){  return dynamicRecordings;}  }
class C{  private boolean explodeBOM(){  boolean retValue=false;  String where="AND IsActive='Y' AND EXISTS " + "(SELECT * FROM M_Product p WHERE C_OrderLine.M_Product_ID=p.M_Product_ID" + " AND	p.IsBOM='Y' AND p.IsVerified='Y' AND p.IsStocked='N')";  String sql="SELECT COUNT(*) FROM C_OrderLine " + "WHERE C_Order_ID=? " + where;  int count=DB.getSQLValue(get_TrxName(),sql,getC_Order_ID());  while (count != 0) {    retValue=true;    renumberLines(1000);    MOrderLine[] lines=getLines(where,MOrderLine.COLUMNNAME_Line);    for (int i=0; i < lines.length; i++) {      MOrderLine line=lines[i];      MProduct product=MProduct.get(getCtx(),line.getM_Product_ID());      log.fine(product.getName());      int lineNo=line.getLine();      MPPProductBOM bom=MPPProductBOM.get(product,getAD_Org_ID(),getDatePromised(),get_TrxName());      if (bom != null) {        MPPProductBOMLine[] bomlines=bom.getLines(getDatePromised());        for (int j=0; j < bomlines.length; j++) {          MPPProductBOMLine bomline=bomlines[j];          MOrderLine newLine=new MOrderLine(this);          newLine.setLine(++lineNo);          newLine.setM_Product_ID(bomline.getM_Product_ID());          newLine.setC_UOM_ID(bomline.getC_UOM_ID());          newLine.setQty(line.getQtyOrdered().multiply(bomline.getQtyBOM()));          if (bomline.getDescription() != null)           newLine.setDescription(bomline.getDescription());          newLine.setPrice();          newLine.save(get_TrxName());        }      }      line.setM_Product_ID(0);      line.setM_AttributeSetInstance_ID(0);      line.setPrice(Env.ZERO);      line.setPriceLimit(Env.ZERO);      line.setPriceList(Env.ZERO);      line.setLineNetAmt(Env.ZERO);      line.setFreightAmt(Env.ZERO);      String description=product.getName();      if (product.getDescription() != null)       description+=" " + product.getDescription();      if (line.getDescription() != null)       description+=" " + line.getDescription();      line.setDescription(description);      line.save(get_TrxName());    }    m_lines=null;    count=DB.getSQLValue(get_TrxName(),sql,getC_Invoice_ID());    renumberLines(10);  }  return retValue;}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  if (!XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_X509DATA)) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"I can't");    }    return null;  }  XMLX509SKI x509childObject[]=null;  Element x509childNodes[]=null;  x509childNodes=XMLUtils.selectDsNodes(element.getFirstChild(),Constants._TAG_X509SKI);  if (!((x509childNodes != null) && (x509childNodes.length > 0))) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"I can't");    }    return null;  }  try {    if (storage == null) {      Object exArgs[]={Constants._TAG_X509SKI};      KeyResolverException ex=new KeyResolverException("KeyResolver.needStorageResolver",exArgs);      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"",ex);      }      throw ex;    }    x509childObject=new XMLX509SKI[x509childNodes.length];    for (int i=0; i < x509childNodes.length; i++) {      x509childObject[i]=new XMLX509SKI(x509childNodes[i],baseURI);    }    Iterator<Certificate> storageIterator=storage.getIterator();    while (storageIterator.hasNext()) {      X509Certificate cert=(X509Certificate)storageIterator.next();      XMLX509SKI certSKI=new XMLX509SKI(element.getOwnerDocument(),cert);      for (int i=0; i < x509childObject.length; i++) {        if (certSKI.equals(x509childObject[i])) {          if (log.isLoggable(java.util.logging.Level.FINE)) {            log.log(java.util.logging.Level.FINE,"Return PublicKey from " + cert.getSubjectX500Principal().getName());          }          return cert;        }      }    }  } catch (  XMLSecurityException ex) {    throw new KeyResolverException("empty",ex);  }  return null;}  }
class C{  @Override protected void initRequest(){  super.initRequest();  _uri.clear();  _host.clear();  _headerSize=0;  _remoteHost.clear();  _remoteAddr.clear();  _serverName.clear();  _serverPort.clear();  _remotePort.clear();  _clientCert.clear();}  }
class C{  @Override public void teardown(){  producer.close();}  }
class C{  public boolean pantherLocationWithinRange(Protein protein,RawMatch rawMatch){  if (protein.getSequenceLength() < rawMatch.getLocationEnd() || protein.getSequenceLength() < rawMatch.getLocationStart()) {    return false;  }  return true;}  }
class C{  public static void checkSymbol(String name,IonValue value){  checkType(IonType.SYMBOL,value);  IonSymbol sym=(IonSymbol)value;  assertEquals("symbol name",name,sym.stringValue());  assertEquals("isNullValue",name == null,sym.isNullValue());  SymbolToken is=sym.symbolValue();  if (name == null) {    assertEquals("IonSymbol.symbolValue()",null,is);  } else {    assertEquals("symbolValue.getText()",name,is.getText());  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ACTION___ANONYMOUS_ACTION_11:    getAnonymous_action_1_1().clear();  return;case UmplePackage.ACTION___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.ACTION___ANONYMOUS_ACTION_21:getAnonymous_action_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public OptimizedFlowNetwork(int numVertices,int srcIndex,int sinkIndex,Iterator<EdgeInfo> edges){  n=numVertices;  capacity=new int[n][n];  flow=new int[n][n];  previous=new int[n];  visited=new int[n];  source=srcIndex;  sink=sinkIndex;  while (edges.hasNext()) {    EdgeInfo ei=edges.next();    capacity[ei.start][ei.end]=ei.capacity;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=getPlaylist(stack);  if (p != null && !p.isMusicPlaylist())   return Boolean.TRUE; else   return Boolean.FALSE;}  }
class C{  private static int next(int v,ByteBuffer in,int inPos){  return (v << 8) | (in.get(inPos + 2) & 255);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public byte[] peek() throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_peek");  try {    QueueEvent element=element();    if (element == null)     return null;    return element.getBytes();  }  finally {    time.stop();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Attr newAttr;  Text importedChild;  Node aNode;  Document ownerDocument;  Element attrOwnerElement;  DocumentType docType;  String system;  boolean specified;  NodeList childList;  String nodeName;  Node child;  String childValue;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("elem:attr1");  expectedResult.add("importedText");  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  newAttr=aNewDoc.createAttribute("elem:attr1");  importedChild=aNewDoc.createTextNode("importedText");  aNode=newAttr.appendChild(importedChild);  aNode=doc.importNode(newAttr,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertNotNull("aNode",aNode);  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  attrOwnerElement=((Attr)aNode).getOwnerElement();  assertNull("ownerElement",attrOwnerElement);  specified=((Attr)aNode).getSpecified();  assertTrue("specified",specified);  childList=aNode.getChildNodes();  assertSize("childList",1,childList);  nodeName=aNode.getNodeName();  assertEquals("nodeName","elem:attr1",nodeName);  child=aNode.getFirstChild();  childValue=child.getNodeValue();  assertEquals("childValue","importedText",childValue);}  }
class C{  public boolean implies(Permission permission){  if (permission instanceof CardPermission == false) {    return false;  }  CardPermission other=(CardPermission)permission;  if ((this.mask & other.mask) != other.mask) {    return false;  }  String thisName=getName();  if (thisName.equals("*")) {    return true;  }  if (thisName.equals(other.getName())) {    return true;  }  return false;}  }
class C{  protected void computeTime(){  if (!isLenient()) {    if (originalFields == null) {      originalFields=new int[FIELD_COUNT];    }    for (int field=0; field < FIELD_COUNT; field++) {      int value=internalGet(field);      if (isExternallySet(field)) {        if (value < getMinimum(field) || value > getMaximum(field)) {          throw new IllegalArgumentException(getFieldName(field));        }      }      originalFields[field]=value;    }  }  int fieldMask=selectFields();  int year;  int era;  if (isSet(ERA)) {    era=internalGet(ERA);    year=isSet(YEAR) ? internalGet(YEAR) : 1;  } else {    if (isSet(YEAR)) {      era=eras.length - 1;      year=internalGet(YEAR);    } else {      era=SHOWA;      year=45;    }  }  long timeOfDay=0;  if (isFieldSet(fieldMask,HOUR_OF_DAY)) {    timeOfDay+=(long)internalGet(HOUR_OF_DAY);  } else {    timeOfDay+=internalGet(HOUR);    if (isFieldSet(fieldMask,AM_PM)) {      timeOfDay+=12 * internalGet(AM_PM);    }  }  timeOfDay*=60;  timeOfDay+=internalGet(MINUTE);  timeOfDay*=60;  timeOfDay+=internalGet(SECOND);  timeOfDay*=1000;  timeOfDay+=internalGet(MILLISECOND);  long fixedDate=timeOfDay / ONE_DAY;  timeOfDay%=ONE_DAY;  while (timeOfDay < 0) {    timeOfDay+=ONE_DAY;    --fixedDate;  }  fixedDate+=getFixedDate(era,year,fieldMask);  long millis=(fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;  TimeZone zone=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  int tzMask=fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK);  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (zone instanceof ZoneInfo) {      ((ZoneInfo)zone).getOffsetsByWall(millis,zoneOffsets);    } else {      zone.getOffsets(millis - zone.getRawOffset(),zoneOffsets);    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }  }  millis-=zoneOffsets[0] + zoneOffsets[1];  time=millis;  int mask=computeFields(fieldMask | getSetStateFields(),tzMask);  if (!isLenient()) {    for (int field=0; field < FIELD_COUNT; field++) {      if (!isExternallySet(field)) {        continue;      }      if (originalFields[field] != internalGet(field)) {        int wrongValue=internalGet(field);        System.arraycopy(originalFields,0,fields,0,fields.length);        throw new IllegalArgumentException(getFieldName(field) + "=" + wrongValue+ ", expected "+ originalFields[field]);      }    }  }  setFieldsNormalized(mask);}  }
class C{  public void writeText(char text[]) throws IOException {  if (text == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    Util.writeText(writer,buffer,text);  }}  }
class C{  public MetricFileReader(File file) throws FileNotFoundException {  super(file,NUMBER_OF_METRICS);  setSuppressExceptions(true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.736 -0500",hash_original_method="F143F03043BA4507E1E78FA3303F668C",hash_generated_method="E01AC0430679ABAA5EC7EB2A86CE700F") public void recycle(){  if (!mRecycled) {    mBuffer=null;    nativeRecycle(mNativeBitmap);    mNinePatchChunk=null;    mRecycled=true;  }}  }
class C{  @CalledOnlyBy(AmidstThread.EDT) public FragmentGraphItem adjustRowsAndColumns(int newAbove,int newBelow,int newLeft,int newRight,FragmentManager manager){  FragmentGraphItem firstColumn=getFirstColumn();  FragmentGraphItem topLeft=firstColumn.getFirstRow();  topLeft=topLeft.createOrRemoveRowsAbove(manager,newAbove);  topLeft.getLastRow().createOrRemoveRowsBelow(manager,newBelow);  topLeft=topLeft.createOrRemoveColumnsLeft(manager,newLeft);  topLeft.getLastColumn().createOrRemoveColumnsRight(manager,newRight);  return topLeft;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static TextLine obtain(){  TextLine tl;synchronized (sCached) {    for (int i=sCached.length; --i >= 0; ) {      if (sCached[i] != null) {        tl=sCached[i];        sCached[i]=null;        return tl;      }    }  }  tl=new TextLine();  if (DEBUG) {    Log.v("TLINE","new: " + tl);  }  return tl;}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private boolean lifeExists(){  return population > 0;}  }
class C{  @RequestMapping(value="/stub/admin/users/{userid}/uploadedproducts/count",method=RequestMethod.GET) public ResponseEntity<?> uploadedProductsCount(Principal principal){  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    User user=(User)((UsernamePasswordAuthenticationToken)principal).getPrincipal();    return new ResponseEntity<>("{\"count\":" + userService.countUploadedProducts(user.getId()) + "}",HttpStatus.OK);  } catch (  org.springframework.security.access.AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  public IndTestGSquare(DataSet dataSet,double alpha){  this.dataSet=dataSet;  this.alpha=alpha;  this.variables=new ArrayList<>(dataSet.getVariables());  int[] numVals=new int[this.variables.size()];  for (int i=0; i < this.variables.size(); i++) {    DiscreteVariable v=(DiscreteVariable)(this.variables.get(i));    numVals[i]=v.getNumCategories();  }  this.gSquareTest=new GSquareTest(dataSet,alpha);}  }
class C{  public void show(Container parent,String name){synchronized (parent.getTreeLock()) {    checkLayout(parent);    Component next=null;    int ncomponents=vector.size();    for (int i=0; i < ncomponents; i++) {      Card card=(Card)vector.get(i);      if (card.name.equals(name)) {        next=card.comp;        currentCard=i;        break;      }    }    if ((next != null) && !next.isVisible()) {      ncomponents=parent.getComponentCount();      for (int i=0; i < ncomponents; i++) {        Component comp=parent.getComponent(i);        if (comp.isVisible()) {          comp.setVisible(false);          break;        }      }      next.setVisible(true);      parent.validate();    }  }}  }
class C{  private void executeStatement(String query) throws SQLException {  Statement stmt=null;  try {    stmt=conn.createStatement();    stmt.execute(query);  } catch (  SQLException e) {    if (stmt != null) {      stmt.close();    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public EncodedImage(final RasterPlotter sourceImage,final String targetExt,final boolean isStatic){  this.image="png".equals(targetExt) ? sourceImage.exportPng() : RasterPlotter.exportImage(sourceImage.getImage(),targetExt);  this.extension=targetExt;  this.isStatic=isStatic;}  }
class C{  public boolean isNot(){  return isNot;}  }
class C{  public boolean isSystem(){  return system;}  }
class C{  public String invertSelectionTipText(){  return "Whether to process the inverse of the given attribute ranges.";}  }
class C{  public ProtocolCodecSession(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:27.671 -0500",hash_original_method="66B541002324CA4265A637C3F35D74A1",hash_generated_method="EE32F948D2E48B6DA5AC4DA9B3B73969") public boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (!(sock instanceof SSLSocket)) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return true;}  }
class C{  public void updateMutable(ApplicationEntity entityToUpdate){  this.ensureDefault();  this.setJarPath(entityToUpdate.getJarPath());  this.setMode(entityToUpdate.getMode());  this.setConfiguration(entityToUpdate.getConfiguration());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (attribute: ");  result.append(attribute);  result.append(')');  return result.toString();}  }
class C{  public void decQueueSize(){  this.stats.incInt(eventQueueSizeId,-1);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_masterPlot != null) {    newVector.addElement("Show chart");    newVector.addElement("?Clear all plots");  }  return newVector.elements();}  }
class C{  public Value validateConvertUpdateSequence(Session session,Value value){  if (value == null) {    if (defaultExpression == null) {      value=ValueNull.INSTANCE;    } else {synchronized (this) {        value=defaultExpression.getValue(session).convertTo(type);      }      if (primaryKey) {        session.setLastIdentity(value);      }    }  }  Mode mode=session.getDatabase().getMode();  if (value == ValueNull.INSTANCE) {    if (convertNullToDefault) {synchronized (this) {        value=defaultExpression.getValue(session).convertTo(type);      }    }    if (value == ValueNull.INSTANCE && !nullable) {      if (mode.convertInsertNullToZero) {        DataType dt=DataType.getDataType(type);        if (dt.decimal) {          value=ValueInt.get(0).convertTo(type);        } else         if (dt.type == Value.TIMESTAMP) {          value=ValueTimestamp.fromMillis(session.getTransactionStart());        } else         if (dt.type == Value.TIME) {          value=ValueTime.fromNanos(0);        } else         if (dt.type == Value.DATE) {          value=ValueDate.fromMillis(session.getTransactionStart());        } else {          value=ValueString.get("").convertTo(type);        }      } else {        throw DbException.get(ErrorCode.NULL_NOT_ALLOWED,name);      }    }  }  if (checkConstraint != null) {    resolver.setValue(value);    Value v;synchronized (this) {      v=checkConstraint.getValue(session);    }    if (Boolean.FALSE.equals(v.getBoolean())) {      throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,checkConstraint.getSQL());    }  }  value=value.convertScale(mode.convertOnlyToSmallerScale,scale);  if (precision > 0) {    if (!value.checkPrecision(precision)) {      String s=value.getTraceSQL();      if (s.length() > 127) {        s=s.substring(0,128) + "...";      }      throw DbException.get(ErrorCode.VALUE_TOO_LONG_2,getCreateSQL(),s + " (" + value.getPrecision()+ ")");    }  }  updateSequenceIfRequired(session,value);  return value;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void checkSameThread(){  mBuilderConfig|=GLDebugHelper.CONFIG_CHECK_THREAD;}  }
class C{  public boolean isConnected(short nodeId){  NodeConnection nc=connections.get(nodeId);  return (nc != null && nc.state == NodeConnectionState.CONNECTED);}  }
class C{  private void displayPermissions(List<MyPermissionGroupInfo> groups,LinearLayout permListView,int which,boolean showRevokeUI){  permListView.removeAllViews();  int spacing=(int)(8 * mContext.getResources().getDisplayMetrics().density);  for (int i=0; i < groups.size(); i++) {    MyPermissionGroupInfo grp=groups.get(i);    final List<MyPermissionInfo> perms=getPermissionList(grp,which);    for (int j=0; j < perms.size(); j++) {      MyPermissionInfo perm=perms.get(j);      View view=getPermissionItemView(grp,perm,j == 0,which != WHICH_NEW ? mNewPermPrefix : null,showRevokeUI);      LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);      if (j == 0) {        lp.topMargin=spacing;      }      if (j == grp.mAllPermissions.size() - 1) {        lp.bottomMargin=spacing;      }      if (permListView.getChildCount() == 0) {        lp.topMargin*=2;      }      permListView.addView(view,lp);    }  }}  }
class C{  public void addNode(PrintDataElement node){  if (node == null)   throw new IllegalArgumentException("Node cannot be null");  if (m_nodes == null)   addRow(false,0);  m_nodes.add(node);}  }
class C{  @ApiMethod(httpMethod="POST") public final void sendMessage(final ImmutableMap<String,String> payload) throws IOException {  if (payload == null || payload.size() == 0) {    LOG.warning("Not sending message because payload is empty");    return;  }  Sender sender=new Sender(Constants.GCM_API_KEY);  Message msg=new Message.Builder().setData(payload).build();  List<Registration> records=ofy().load().type(Registration.class).limit(NUMBER_OF_DEVICES).list();  for (  Registration record : records) {    Result result=sender.send(msg,record.getRegId(),MAXIMUM_RETRIES);    if (result.getMessageId() != null) {      LOG.info("Message sent to " + record.getRegId());      String canonicalRegId=result.getCanonicalRegistrationId();      if (canonicalRegId != null) {        LOG.info("Registration Id changed for " + record.getRegId() + " updating to "+ canonicalRegId);        record.setRegId(canonicalRegId);        ofy().save().entity(record).now();      }    } else {      String error=result.getErrorCodeName();      if (error.equals(com.google.android.gcm.server.Constants.ERROR_NOT_REGISTERED)) {        LOG.warning("Registration Id " + record.getRegId() + " no longer registered with GCM, "+ "removing from datastore");        ofy().delete().entity(record).now();      } else {        LOG.warning("Error when sending message : " + error);      }    }  }}  }
class C{  @Override public double java2DToValue(double java2DValue,Rectangle2D dataArea,RectangleEdge edge){  Range range=getRange();  double vmax=range.getUpperBound();  double vp=getCycleBound();  double jmin=0.0;  double jmax=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    jmin=dataArea.getMinX();    jmax=dataArea.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    jmin=dataArea.getMaxY();    jmax=dataArea.getMinY();  }  if (isInverted()) {    double jbreak=jmax - (vmax - vp) * (jmax - jmin) / this.period;    if (java2DValue >= jbreak) {      return vp + (jmax - java2DValue) * this.period / (jmax - jmin);    } else {      return vp - (java2DValue - jmin) * this.period / (jmax - jmin);    }  } else {    double jbreak=(vmax - vp) * (jmax - jmin) / this.period + jmin;    if (java2DValue <= jbreak) {      return vp + (java2DValue - jmin) * this.period / (jmax - jmin);    } else {      return vp - (jmax - java2DValue) * this.period / (jmax - jmin);    }  }}  }
class C{  public boolean isPruned(){  return isPruned;}  }
class C{  @Override public UpdateResponse add(Collection<SolrInputDocument> docs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.add(docs);  if (this.solr1 != null)   ur=this.solr1.add(docs);  return ur;}  }
class C{  public void doPost(String requestUrl,String postBodyString,OnDaVinciRequestListener requestListener){  doRequest(Request.Method.POST,requestUrl,null,postBodyString,requestListener);}  }
class C{  protected void focusView(){  getElement().focus();}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  updateKeyMaskFields();  out.defaultWriteObject();}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteComputeImage(@PathParam("id") URI id,@QueryParam("force") String force){  log.info("deleteComputeImage: {}",id);  ComputeImage ci=queryObject(ComputeImage.class,id,true);  ArgValidator.checkEntity(ci,id,isIdEmbeddedInURL(id));  if (ComputeImage.ComputeImageStatus.AVAILABLE.name().equals(ci.getComputeImageStatus())) {    if (force == null || !force.equals("true")) {      URIQueryResultList ceUriList=new URIQueryResultList();      _dbClient.queryByConstraint(ContainmentConstraint.Factory.getComputeImageJobsByComputeImageConstraint(ci.getId()),ceUriList);      Iterator<URI> iterator=ceUriList.iterator();      while (iterator.hasNext()) {        ComputeImageJob job=_dbClient.queryObject(ComputeImageJob.class,iterator.next());        if (job.getJobStatus().equals(ComputeImageJob.JobStatus.CREATED.name())) {          throw APIException.badRequests.cannotDeleteComputeWhileInUse();        }      }    }    auditOp(OperationTypeEnum.DELETE_COMPUTE_IMAGE,true,AuditLogManager.AUDITOP_BEGIN,ci.getId().toString(),ci.getImageUrl());    return doRemoveImage(ci);  } else   if (ComputeImage.ComputeImageStatus.IN_PROGRESS.name().equals(ci.getComputeImageStatus())) {    if (force == null || !force.equals("true")) {      throw APIException.badRequests.resourceCannotBeDeleted(ci.getLabel());    } else {      deleteImageFromImageServers(ci);      _dbClient.markForDeletion(ci);      auditOp(OperationTypeEnum.DELETE_COMPUTE_IMAGE,true,null,ci.getId().toString(),ci.getImageUrl());      return getReadyOp(ci,ResourceOperationTypeEnum.REMOVE_IMAGE);    }  } else {    deleteImageFromImageServers(ci);    _dbClient.markForDeletion(ci);    auditOp(OperationTypeEnum.DELETE_COMPUTE_IMAGE,true,null,ci.getId().toString(),ci.getImageUrl());    return getReadyOp(ci,ResourceOperationTypeEnum.REMOVE_IMAGE);  }}  }
class C{  public double distance(LineSegment ls){  return CGAlgorithms.distanceLineLine(p0,p1,ls.p0,ls.p1);}  }
class C{  public boolean requestTrackLength(Track track,int length){  int additionalLength=track.getUsedLength() + track.getReserved() + length - track.getLength();  for (  Track t : getTracks()) {    if (t != track) {      if (t.getUsedLength() + t.getReserved() + additionalLength <= t.getLength() && t.getLength() - additionalLength >= t.getMinimumLength()) {        log.debug("Pool ({}) increasing track ({}) length ({}) decreasing ({})",getName(),track.getName(),additionalLength,t.getName());        t.setLength(t.getLength() - additionalLength);        track.setLength(track.getLength() + additionalLength);        return true;      } else {        int available=t.getLength() - (t.getUsedLength() + t.getReserved());        int min=t.getLength() - t.getMinimumLength();        if (min < available) {          available=min;        }        if (available > 0) {          log.debug("Pool ({}) incremental increase for track ({}) length ({}) decreasing ({})",getName(),track.getName(),available,t.getName());          t.setLength(t.getLength() - available);          track.setLength(track.getLength() + available);          additionalLength=additionalLength - available;        }      }    }  }  return false;}  }
class C{  void ioMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.io");  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public void show(){  if (mList.getVisibility() != View.VISIBLE) {    animate(View.VISIBLE);  }}  }
class C{  AttachAction(ModeUsage modeUsage){  super(modeUsage);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,"ISO-8859-1");}  }
class C{  @Nullable private GridClientMessage parseCustomPacket(GridNioSession ses,ByteBuffer buf,ParserState state) throws IOException, IgniteCheckedException {  assert state.packetType() == GridClientPacketType.IGNITE;  assert state.packet() == null;  ByteArrayOutputStream tmp=state.buffer();  int len=state.index();  if (buf.remaining() > 0) {    if (len == 0) {      byte[] lenBytes=statefulRead(buf,tmp,4);      if (lenBytes != null) {        len=U.bytesToInt(lenBytes,0);        if (len == 0)         return GridClientPingPacket.PING_MESSAGE; else         if (len < 0)         throw new IOException("Failed to parse incoming packet (invalid packet length) [ses=" + ses + ", len="+ len+ ']');        state.index(len);      }    }    if (len > 0 && state.header() == null) {      byte[] hdrBytes=statefulRead(buf,tmp,40);      if (hdrBytes != null) {        long reqId=GridClientByteUtils.bytesToLong(hdrBytes,0);        UUID clientId=GridClientByteUtils.bytesToUuid(hdrBytes,8);        UUID destId=GridClientByteUtils.bytesToUuid(hdrBytes,24);        state.header(new HeaderData(reqId,clientId,destId));      }    }    if (len > 0 && state.header() != null) {      final int packetSize=len - 40;      if (tmp.size() + buf.remaining() >= packetSize) {        if (buf.remaining() > 0) {          byte[] bodyBytes=new byte[packetSize - tmp.size()];          buf.get(bodyBytes);          tmp.write(bodyBytes);        }        return parseClientMessage(ses,state);      } else       copyRemaining(buf,tmp);    }  }  return null;}  }
class C{  @Override public String isExportFormatSupported(String mimeType){  return Exportable.FORMAT_NOT_SUPPORTED;}  }
class C{  private void addParsedValue(int nTrace,String value){  String name=getTraceName(nTrace);  if (tracesType.get(name).isNumber()) {    Double v=Double.parseDouble(value);    getTrace(nTrace).add(v);  } else {    getTrace(nTrace).add(value);  }}  }
class C{  public static Class<?>[] toClassArray(Collection<Class<?>> collection){  if (collection == null) {    return null;  }  return collection.toArray(new Class<?>[collection.size()]);}  }
class C{  private void maybeAsync(boolean async,Runnable runnable){  if (async) {    server.getScheduler().runTaskAsynchronously(null,runnable);  } else {    runnable.run();  }}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  public FBUser(){  super();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public void styleMarker(Marker marker,Context context){  BitmapDrawable icon=getFinalIcon(context);  marker.setIcon(icon);  if (icon != null)   marker.setAnchor(mHotSpot.getX(icon.getIntrinsicWidth() / mScale),1.0f - mHotSpot.getY(icon.getIntrinsicHeight() / mScale));  marker.setRotation(mHeading);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Inline public boolean copyNurseryIsLive(ObjectReference object){  return ForwardingWord.isForwardedOrBeingForwarded(object) || ObjectHeader.testMarkState(object,markState);}  }
class C{  public ReadInputRegistersRequest(){  super();  setFunctionCode(Modbus.READ_INPUT_REGISTERS);  setDataLength(4);}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Result runCmd(File directory,String cmd,boolean echoCmd,boolean echoOutput) throws IOException {  List<String> cmds=getPlatformCmds(cmd);  ProcessBuilder builder=new ProcessBuilder(cmds);  builder.directory(directory);  Process process=builder.start();  try (BufferedReader stdInput=new BufferedReader(new InputStreamReader(process.getInputStream(),Charset.defaultCharset()));BufferedReader stdError=new BufferedReader(new InputStreamReader(process.getErrorStream(),Charset.defaultCharset()))){    if (echoCmd) {      System.out.println("cmd>" + cmd);    }    ImmutableList.Builder<String> output=ImmutableList.builder();    ImmutableList.Builder<String> error=ImmutableList.builder();    String line=null;    while ((line=stdInput.readLine()) != null) {      output.add(line);      if (echoOutput) {        System.out.println(line);      }    }    while ((line=stdError.readLine()) != null) {      error.add(line);      if (echoOutput) {        System.err.println(line);      }    }    int exitValue=process.waitFor();    if (exitValue != EXIT_VALUE_SUCCESS) {      throw new RuntimeException("'" + cmd + "' exited with "+ exitValue);    }    return new Result(directory,cmd,output.build(),error.build());  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public synchronized boolean isClosed(){  return this.logWriter.isClosed();}  }
class C{  public String number(){  return number;}  }
class C{  private Document marshallAssertion(AssertionType assertion) throws ParserException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setNamespaceAware(true);  Document result=null;  try {    JAXBContext jaxbContext=JAXBContext.newInstance(ASSERTION_JAXB_PACKAGE);    result=dbf.newDocumentBuilder().newDocument();    jaxbContext.createMarshaller().marshal(assertion,result);  } catch (  JAXBException jaxbException) {    throw new ParserException("Unable to marshall the SAML assertion element",jaxbException);  }catch (  ParserConfigurationException pce) {    throw new ParserException("Unable to generate document container for the assertion element",pce);  }  return result;}  }
class C{  private void dumpEnvelope(Message m) throws Exception {  printOut("-----------------------------------------------------------------");  Address[] a;  if ((a=m.getFrom()) != null) {    for (int j=0; j < a.length; j++)     printOut("FROM: " + a[j].toString());  }  if ((a=m.getRecipients(Message.RecipientType.TO)) != null) {    for (int j=0; j < a.length; j++)     printOut("TO: " + a[j].toString());  }  printOut("SUBJECT: " + m.getSubject());  java.util.Date d=m.getSentDate();  printOut("SendDate: " + (d != null ? d.toString() : "UNKNOWN"));  Flags flags=m.getFlags();  StringBuffer sb=new StringBuffer();  Flags.Flag[] sf=flags.getSystemFlags();  boolean first=true;  for (int i=0; i < sf.length; i++) {    String s;    Flags.Flag f=sf[i];    if (f == Flags.Flag.ANSWERED)     s="\\Answered"; else     if (f == Flags.Flag.DELETED)     s="\\Deleted"; else     if (f == Flags.Flag.DRAFT)     s="\\Draft"; else     if (f == Flags.Flag.FLAGGED)     s="\\Flagged"; else     if (f == Flags.Flag.RECENT)     s="\\Recent"; else     if (f == Flags.Flag.SEEN)     s="\\Seen"; else     continue;    if (first)     first=false; else     sb.append(' ');    sb.append(s);  }  String[] uf=flags.getUserFlags();  for (int i=0; i < uf.length; i++) {    if (first)     first=false; else     sb.append(' ');    sb.append(uf[i]);  }  printOut("FLAGS: " + sb.toString());  String[] hdrs=m.getHeader("X-Mailer");  if (hdrs != null) {    StringBuffer sb1=new StringBuffer("X-Mailer: ");    for (int i=0; i < hdrs.length; i++)     sb1.append(hdrs[i]).append("  ");    printOut(sb1.toString());  } else   printOut("X-Mailer NOT available");  hdrs=m.getHeader("Message-ID");  if (hdrs != null) {    StringBuffer sb1=new StringBuffer("Message-ID: ");    for (int i=0; i < hdrs.length; i++)     sb1.append(hdrs[i]).append("  ");    printOut(sb1.toString());  } else   printOut("Message-ID NOT available");  printOut("ALL HEADERs:");  Enumeration en=m.getAllHeaders();  while (en.hasMoreElements()) {    Header hdr=(Header)en.nextElement();    printOut("  " + hdr.getName() + " = "+ hdr.getValue());  }  printOut("-----------------------------------------------------------------");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.402 -0500",hash_original_method="42A83CA5C5D82F280A6650571B6091DC",hash_generated_method="9EA11A633B494EDD36EEB255596A1D17") private boolean isConnectingInOrOut(){  return parent == null || parent == owner.ringingCall || parent.state == GsmCall.State.DIALING || parent.state == GsmCall.State.ALERTING;}  }
class C{  public void addLdc2w(long l){  addOpcode(LDC2_W);  addIndex(constPool.addLongInfo(l));}  }
class C{  public VersionException(){  super();}  }
class C{  public List<Cookie> parse(final Header header,final CookieOrigin origin) throws MalformedCookieException {  if (header == null) {    throw new IllegalArgumentException("Header may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  NetscapeDraftHeaderParser parser=NetscapeDraftHeaderParser.DEFAULT;  CharArrayBuffer buffer;  ParserCursor cursor;  if (header instanceof FormattedHeader) {    buffer=((FormattedHeader)header).getBuffer();    cursor=new ParserCursor(((FormattedHeader)header).getValuePos(),buffer.length());  } else {    String s=header.getValue();    if (s == null) {      throw new MalformedCookieException("Header value is null");    }    buffer=new CharArrayBuffer(s.length());    buffer.append(s);    cursor=new ParserCursor(0,buffer.length());  }  return parse(new HeaderElement[]{parser.parseHeader(buffer,cursor)},origin);}  }
class C{  protected JMenuBar createMenuBar(@Nullable View v){  JMenuBar mb=new JMenuBar();  JMenu fileMenu=null;  JMenu editMenu=null;  JMenu helpMenu=null;  JMenu viewMenu=null;  JMenu windowMenu=null;  String fileMenuText=labels.getString("file.text");  String editMenuText=labels.getString("edit.text");  String viewMenuText=labels.getString("view.text");  String windowMenuText=labels.getString("window.text");  String helpMenuText=labels.getString("help.text");  LinkedList<JMenu> ll=new LinkedList<JMenu>();  getModel().getMenuBuilder().addOtherMenus(ll,this,v);  for (  JMenu mm : ll) {    String text=mm.getText();    if (text == null) {      mm.setText("-null-");    } else     if (text.equals(fileMenuText)) {      fileMenu=mm;      continue;    } else     if (text.equals(editMenuText)) {      editMenu=mm;      continue;    } else     if (text.equals(viewMenuText)) {      viewMenu=mm;      continue;    } else     if (text.equals(windowMenuText)) {      windowMenu=mm;      continue;    } else     if (text.equals(helpMenuText)) {      helpMenu=mm;      continue;    }    mb.add(mm);  }  if (fileMenu == null) {    fileMenu=createFileMenu(v);  }  if (editMenu == null) {    editMenu=createEditMenu(v);  }  if (viewMenu == null) {    viewMenu=createViewMenu(v);  }  if (windowMenu == null) {    windowMenu=createWindowMenu(v);  }  if (helpMenu == null) {    helpMenu=createHelpMenu(v);  }  if (fileMenu != null) {    mb.add(fileMenu,0);  }  if (editMenu != null) {    mb.add(editMenu,Math.min(1,mb.getComponentCount()));  }  if (viewMenu != null) {    mb.add(viewMenu,Math.min(2,mb.getComponentCount()));  }  if (windowMenu != null) {    mb.add(windowMenu);  }  if (helpMenu != null) {    mb.add(helpMenu);  }  return mb;}  }
class C{  public UrlBasedViewResolverRegistration prefix(String prefix){  this.viewResolver.setPrefix(prefix);  return this;}  }
class C{  protected double[] doLineSearch(DifferentiableFunction function,BacktrackingLineSearcher lineSearcher,double[] guess,double[] direction){  return lineSearcher.minimize(function,guess,direction);}  }
class C{  public Boolean isPLDPWallet(){  return pldpWallet;}  }
class C{  public static double gaussian(double mean,double stddev){  return mean + stddev * gaussian();}  }
class C{  private void init(AccessibilityNodeInfo other){  mSealed=other.mSealed;  mSourceNodeId=other.mSourceNodeId;  mParentNodeId=other.mParentNodeId;  mLabelForId=other.mLabelForId;  mLabeledById=other.mLabeledById;  mWindowId=other.mWindowId;  mConnectionId=other.mConnectionId;  mBoundsInParent.set(other.mBoundsInParent);  mBoundsInScreen.set(other.mBoundsInScreen);  mPackageName=other.mPackageName;  mClassName=other.mClassName;  mText=other.mText;  mContentDescription=other.mContentDescription;  mViewIdResourceName=other.mViewIdResourceName;  mActions=other.mActions;  mBooleanProperties=other.mBooleanProperties;  mMovementGranularities=other.mMovementGranularities;  final int otherChildIdCount=other.mChildNodeIds.size();  for (int i=0; i < otherChildIdCount; i++) {    mChildNodeIds.put(i,other.mChildNodeIds.valueAt(i));  }  mTextSelectionStart=other.mTextSelectionStart;  mTextSelectionEnd=other.mTextSelectionEnd;}  }
class C{  static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){  File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName));  if (fileForNewFile.exists()) {    if (fileForNewFile.length() == fileSize) {      return true;    }    if (deleteFileOnMismatch) {      fileForNewFile.delete();    }  }  return false;}  }
class C{  private String assembleMessageText(final String preparedMessage,final UserData userData){  String assembledMessage;  assembledMessage=preparedMessage.replace(MARKER_NEWID,userData.userid);  assembledMessage=assembledMessage.replace(MARKER_OLDID,userData.olduserid);  return assembledMessage;}  }
class C{  @Override public void notifyChanged(){  getData().notifyTerritoryUnitsChanged(this);}  }
class C{  public int methodIndex(){  return ByteArray.readU16bit(get(),2);}  }
class C{  public WrapLayout(int align,int hgap,int vgap){  super(align,hgap,vgap);}  }
class C{  @Override synchronized public void reset(){  id=0;}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  try {    SQLEncoding[] encoding=sqlEncoder.encodeTask(task);    for (    SQLEncoding sql : encoding) {      this.writer.write(sql.getQuery() + "\r\n");      this.writer.flush();    }    if (task.getTaskType() == TaskTypes.TASK_FULL || task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST) {      if (this.sqlFile.length() > LIMIT_SQL_FILE_SIZE) {        writeHeader();      }      if (!MODE_STATISTICAL_OUTPUT) {        System.out.println(task.toString());      }    } else {      System.out.println(task.toString());    }  } catch (  DecodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }catch (  EncodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }}  }
class C{  public InvalidProviderAddress2(){  requestFileName="attachm.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  static double calculateNewMeanNonFinite(double previousMean,double value){  if (isFinite(previousMean)) {    return value;  } else   if (isFinite(value) || previousMean == value) {    return previousMean;  } else {    return NaN;  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void onJobStart(long ts){  assert nodeId != null;  evts.add(new T2<>("JOB start " + nodeId,ts));}  }
class C{  public static int secondaryIdentityHash(Object key){  return secondaryHash(System.identityHashCode(key));}  }
class C{  public static void disableCommands(Set<String> disabledCmds){  for (  CMD cmd : CMD.values()) {    cmd.setEnabled(disabledCmds == null || !disabledCmds.contains(cmd.toString()));  }}  }
class C{  public boolean write(byte[] buf1,int off1,int len1,byte[] buf2,int off2,int len2,boolean isEnd) throws IOException {  if (len1 == 0) {    write(buf2,off2,len2,isEnd);    return true;  } else   return false;}  }
class C{  public synchronized void store(String fileName) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  store(out,null);  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());  InputStreamReader reader=new InputStreamReader(in,"ISO8859-1");  LineNumberReader r=new LineNumberReader(reader);  Writer w;  try {    w=new OutputStreamWriter(FileUtils.newOutputStream(fileName,false));  } catch (  Exception e) {    throw new IOException(e.toString(),e);  }  PrintWriter writer=new PrintWriter(new BufferedWriter(w));  while (true) {    String line=r.readLine();    if (line == null) {      break;    }    if (!line.startsWith("#")) {      writer.print(line + "\n");    }  }  writer.close();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.CONTINUE_STATEMENT;}  }
class C{  private void addToErrorList(String errorStr){  if (errorList != null) {    errorList.addElement(errorStr);  }}  }
class C{  public GCActivitySet(String gcActivityName){  this.gcActivityName=gcActivityName;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void notifyInterfaceRemoved(String iface){  mActiveAlerts.remove(iface);  mActiveQuotas.remove(iface);  final int length=mObservers.beginBroadcast();  for (int i=0; i < length; i++) {    try {      mObservers.getBroadcastItem(i).interfaceRemoved(iface);    } catch (    RemoteException e) {    }catch (    RuntimeException e) {    }  }  mObservers.finishBroadcast();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void test_constants(){  assertEquals("filesPerDirectory",1000,CommitCounterUtility.getFilesPerDirectory());  assertEquals("digitsPerDirectory",3,CommitCounterUtility.getDigitsPerDirectory());  assertEquals("basenameDigits",21,CommitCounterUtility.getBasenameDigits());  assertEquals("rootDirectoryDepth",0,CommitCounterUtility.getRootDirectoryDepth());  assertEquals("leafDirectoryDepth",6,CommitCounterUtility.getLeafDirectoryDepth());}  }
class C{  public void rollbackNamedTransaction(String savepointName){  SQLiteStatement statement=mDbHelper.getWritableDatabase().compileStatement(";ROLLBACK TO " + savepointName);  statement.execute();  statement.close();}  }
class C{  protected void error(HttpServletRequest request,HttpServletResponse response,Exception cause) throws ServletException, IOException {  StringBuffer html=new StringBuffer();  html.append("<html>");  html.append("<title>Error</title>");  html.append("<body bgcolor=\"#ffffff\">");  html.append("<h2>VelocityServlet: Error processing the template</h2>");  html.append("<pre>");  String why=cause.getMessage();  if (why != null && why.trim().length() > 0) {    html.append(why);    html.append("<br>");  }  StringWriter sw=new StringWriter();  cause.printStackTrace(new PrintWriter(sw));  html.append(sw.toString());  html.append("</pre>");  html.append("</body>");  html.append("</html>");  response.getOutputStream().print(html.toString());}  }
class C{  public void testGetRowCount(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  assertTrue(d.getRowCount() == 0);  d.addValue(1.0,"R1","C1");  assertTrue(d.getRowCount() == 1);  d.addValue(1.0,"R2","C1");  assertTrue(d.getRowCount() == 2);  d.addValue(2.0,"R2","C1");  assertTrue(d.getRowCount() == 2);  d.setValue(null,"R2","C1");  assertTrue(d.getRowCount() == 2);}  }
class C{  private void pipe(InputStream in,OutputStream out) throws IOException {  BufferedOutputStream bufferedOut=new BufferedOutputStream(out);  int n;  byte[] bytes=new byte[1024 * 4];  while ((n=in.read(bytes)) != -1) {    bufferedOut.write(bytes,0,n);  }  bufferedOut.flush();  bufferedOut.close();  in.close();}  }
class C{  public void handle(StateContext state,SubCollectionSubCollectionContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  public void clear(){  for (  DataSource source : data) {    source.removeDataListener(this);  }  dataVisible.clear();  if (getLegend() != null) {    getLegend().clear();  }  data.clear();  invalidateAxisExtrema();}  }
class C{  public double key(){  return _map._set[_index];}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return BridgeServerResponse.create(dm,this);}  }
class C{  final synchronized public Object clone(){  SnmpNull newclone=null;  try {    newclone=(SnmpNull)super.clone();    newclone.tag=tag;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }  return newclone;}  }
class C{  @SuppressWarnings("unchecked") @Override public void execute(Iterator<String> contactsIter){  final GenericAsyncTask<Iterator<String>,Void,Integer,DeleteContactsCommand> asyncTask=new GenericAsyncTask<>(this);  asyncTask.execute(contactsIter);}  }
class C{  public boolean validRule(Rule r){  if (!super.validRule(r)) {    return false;  }  if (r.rhs == null || r.rhs.size() == 0) {    return true;  } else   if (r.rhs.size() == 1 && isTerminal(r.rhs.get(0))) {    return true;  } else   if (r.rhs.size() == 2 && isVariable(r.rhs.get(0)) && isVariable(r.rhs.get(1))) {    return true;  }  return false;}  }
class C{  public final void sendMessageDelayed(int what,long delayMillis){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageDelayed(obtainMessage(what),delayMillis);}  }
class C{  public static String showFilters(File pngr,int maxgroups,boolean usenewlines,boolean showSumm,boolean showSummPercent){  if (maxgroups == 0)   usenewlines=false;  if (maxgroups < 0)   maxgroups=Integer.MAX_VALUE;  int[] types=new int[5];  PngReaderByte png=new PngReaderByte(pngr);  StringBuilder sb=new StringBuilder();  int[] ft=new int[png.imgInfo.rows + 1];  for (int r=0; r < png.imgInfo.rows; r++) {    ft[r]=((IImageLineArray)png.readRow()).getFilterType().val;    types[ft[r]]++;  }  png.end();  ft[png.imgInfo.rows]=-1;  if (showSummPercent) {    for (int i=0; i <= 4; i++) {      types[i]=(int)((types[i] * 100 + png.imgInfo.rows / 2) / png.imgInfo.rows);    }  }  if (showSumm || showSummPercent)   sb.append(Arrays.toString(types) + (usenewlines ? "\n" : "\t"));  if (maxgroups != 0) {    int contgroups=0;    int r0=0;    for (int r=1; r < ft.length; r++) {      if (ft[r] != ft[r - 1]) {        sb.append(String.format("%s:%d(%d)",FilterType.getByVal(ft[r - 1]),r0,r - r0)).append(usenewlines ? "\n" : " ");        contgroups++;        r0=r;        if (contgroups >= maxgroups && r < ft.length - 1) {          sb.append("...").append(usenewlines ? "\n" : " ");          break;        }      }    }  }  return sb.toString().trim().replaceAll("FILTER_","");}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CopyAction(final NetworkPanel networkPanel){  super(networkPanel,"Copy",EnablingCondition.ALLITEMS);  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_C,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Copy.png"));  putValue(SHORT_DESCRIPTION,"Copy selected neurons, (connected) synapses, and neuron groups");}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (StringWrapper.class.isAssignableFrom(targetType)) {    try {      StringWrapper vt=(StringWrapper)targetType.newInstance();      if (valueToConvert instanceof String) {        vt.setValue((String)valueToConvert);      } else {        throw new JavaTypeTranslatorException("The ObjectToStringWrapper convertor only supports strings at the moment");      }      rVal=vt;    } catch (    Exception ex) {      throw new JavaTypeTranslatorException(ex,"Unable to set value for StringWrapper");    }  } else {    throw new JavaTypeTranslatorException("Target type must be a StringWrapper");  }  return (rVal);}  }
class C{  @Override public String toString(){  ArrayList<String> properties=new ArrayList<String>();  if (getCN() != null) {    properties.add(formatNameValue(CN_PROPERTY,getCN()));  }  if (getOU() != null) {    properties.add(formatNameValue(OU_PROPERTY,getOU()));  }  if (getO() != null) {    properties.add(formatNameValue(O_PROPERTY,getO()));  }  if (getL() != null) {    properties.add(formatNameValue(L_PROPERTY,getL()));  }  if (getST() != null) {    properties.add(formatNameValue(ST_PROPERTY,getST()));  }  if (getC() != null) {    properties.add(formatNameValue(C_PROPERTY,getC()));  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < properties.size(); i++) {    sb.append(properties.get(i));    if ((i + 1) < properties.size()) {      sb.append(", ");    }  }  return sb.toString();}  }
class C{  public LongSparseLongArray(){  this(10);}  }
class C{  public static String replaceAll(String str,String originalToken,String replacementToken){  return str.replaceAll(Pattern.quote(originalToken),Matcher.quoteReplacement(replacementToken));}  }
class C{  public static double hypergeometric(int k,int n,int r,int m){  if (k < 0 || r > n || m > n || n <= 0 || m < 0 | r < 0) {    throw new IllegalArgumentException("Invalid hypergeometric");  }  if (m > n / 2) {    m=n - m;    k=r - k;  }  if (r > n / 2) {    r=n - r;    k=m - k;  }  if (m > r) {    int temp=m;    m=r;    r=temp;  }  if (k < (m + r) - n || k > m) {    return 0.0;  }  if (r == n) {    if (k == m) {      return 1.0;    } else {      return 0.0;    }  } else   if (r == n - 1) {    if (k == m) {      return (n - m) / (double)n;    } else     if (k == m - 1) {      return m / (double)n;    } else {      return 0.0;    }  } else   if (m == 1) {    if (k == 0) {      return (n - r) / (double)n;    } else     if (k == 1) {      return r / (double)n;    } else {      return 0.0;    }  } else   if (m == 0) {    if (k == 0) {      return 1.0;    } else {      return 0.0;    }  } else   if (k == 0) {    double ans=1.0;    for (int m0=0; m0 < m; m0++) {      ans*=((n - r) - m0);      ans/=(n - m0);    }    return ans;  }  double ans=1.0;  for (int nr=n - r, n0=n; nr > (n - r) - (m - k); nr--, n0--) {    ans*=nr;    ans/=n0;  }  for (int k0=0; k0 < k; k0++) {    ans*=(m - k0);    ans/=((n - (m - k0)) + 1);    ans*=(r - k0);    ans/=(k0 + 1);  }  return ans;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.408 -0400",hash_original_method="B1BA8670604DCF1D4886449B3C294726",hash_generated_method="E04D922422F30AD07F42B2235C4CFBCA") public static int readSwappedUnsignedShort(byte[] data,int offset){  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));}  }
class C{  public void openOrder(int orderId,com.ib.client.Contract contractIB,com.ib.client.Order order,OrderState orderState){  try {    TWSBrokerModel.logOrderState(orderState);    TWSBrokerModel.logTradeOrder(order);    TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(new Integer(order.m_orderId));    if (null == transientInstance) {      error(orderId,3170,"Warning Order not found for Order Key: " + order.m_orderId + " make sure Client ID: "+ this.m_clientId+ " is not the master in TWS. On openOrder update.");      transientInstance=new TradeOrder();      transientInstance.setOrderKey(order.m_orderId);      transientInstance.setCreateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      TWSBrokerModel.updateTradeOrder(order,orderState,transientInstance);      openOrders.put(transientInstance.getOrderKey(),transientInstance);      return;    }    if (TWSBrokerModel.updateTradeOrder(order,orderState,transientInstance)) {      if (OrderStatus.FILLED.equals(transientInstance.getStatus())) {        _log.debug("Open order filled Order Key:" + transientInstance.getOrderKey());        transientInstance=m_tradePersistentModel.persistTradeOrder(transientInstance);        if (transientInstance.hasTradePosition() && !transientInstance.getTradePosition().isOpen()) {          this.firePositionClosed(transientInstance.getTradePosition());        }      } else {        _log.debug("Open order state changed. Status:" + orderState.m_status);        transientInstance=m_tradePersistentModel.persistTradeOrder(transientInstance);        if (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {          this.fireTradeOrderCancelled(transientInstance);        } else {          this.fireTradeOrderStatusChanged(transientInstance);        }      }    }    openOrders.put(transientInstance.getOrderKey(),transientInstance);  } catch (  Exception ex) {    error(orderId,3180,"Errors updating open order: " + ex.getMessage());  }}  }
class C{  public boolean match(Modifier node,Object other){  if (!(other instanceof Modifier)) {    return false;  }  Modifier o=(Modifier)other;  return (node.getKeyword() == o.getKeyword());}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void bringToHierarchy(SootClass sc){  if (sc.resolvingLevel() >= SootClass.HIERARCHY)   return;  if (Options.v().debug_resolver())   G.v().out.println("bringing to HIERARCHY: " + sc);  sc.setResolvingLevel(SootClass.HIERARCHY);  String className=sc.getName();  ClassSource is=SourceLocator.v().getClassSource(className);  boolean modelAsPhantomRef=is == null;  if (modelAsPhantomRef) {    if (!Scene.v().allowsPhantomRefs()) {      String suffix="";      if (className.equals("java.lang.Object")) {        suffix=" Try adding rt.jar to Soot's classpath, e.g.:\n" + "java -cp sootclasses.jar soot.Main -cp " + ".:/path/to/jdk/jre/lib/rt.jar <other options>";      } else       if (className.equals("javax.crypto.Cipher")) {        suffix=" Try adding jce.jar to Soot's classpath, e.g.:\n" + "java -cp sootclasses.jar soot.Main -cp " + ".:/path/to/jdk/jre/lib/rt.jar:/path/to/jdk/jre/lib/jce.jar <other options>";      }      throw new RuntimeException("couldn't find class: " + className + " (is your soot-class-path set properly?)"+ suffix);    } else {      G.v().out.println("Warning: " + className + " is a phantom class!");      sc.setPhantomClass();      classToTypesSignature.put(sc,new ArrayList());      classToTypesHierarchy.put(sc,new ArrayList());    }  } else {    Dependencies dependencies=is.resolve(sc);    classToTypesSignature.put(sc,new ArrayList(dependencies.typesToSignature));    classToTypesHierarchy.put(sc,new ArrayList(dependencies.typesToHierarchy));  }  reResolveHierarchy(sc);}  }
class C{  public void normaliseUtil(){  for (  Entry<Assignment,double[]> e : matrix.entrySet()) {    double[] old=e.getValue();    if (old[0] > 0.0 && old[1] != 0 && old[0] != 1) {      e.setValue(new double[]{old[0],old[1] / old[0]});    }  }}  }
class C{  public IllegalAccessError(String s){  super(s);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.468 -0500",hash_original_method="2DC72BFF923FF55EA48E8D651F79AFBE",hash_generated_method="C104F51FC01594EFD5D80ED444738FFE") public void prepareForReplace(){  mPreparedStatement=getStatement(true);  mPreparedStatement.clearBindings();}  }
class C{  private void processPacket(Packet packet){  if (packet == null) {    return;  }  for (  PacketCollector collector : connection.getPacketCollectors()) {    collector.processPacket(packet);  }  listenerExecutor.submit(new ListenerNotification(packet));}  }
class C{  private static String fieldsToStringPretty(JsonObject jsonObj,int level){  StringBuffer buf=new StringBuffer();  String indent="\n" + VAUtils.indent(level);  boolean firstField=true;  for (  Map.Entry<String,JsonElement> entry : jsonObj.entrySet()) {    String field=entry.getKey();    if (!field.equals(CHILDREN_PROP) && !field.equals("src-loc")) {      if (!firstField)       buf.append(",");      if (level == 1 && firstField)       buf.append(" "); else       buf.append(indent);      firstField=false;      buf.append(field);      buf.append(": ");      JsonElement value=entry.getValue();      buf.append(toStringPretty(value,level + 1));    }  }  return buf.toString();}  }
class C{  public void addConnection(final IConnectionWithReconnect connection,final Runnable connector){synchronized (connections) {    connections.put(connection,connector);  }}  }
class C{  public void testGetLibDir(){  String expected=this.fileHandler.append(CONFIGURATION_HOME,"lib");  assertEquals(expected,this.container.getLibDir(this.container.getConfiguration().getPropertyValue(JBossPropertySet.CONFIGURATION)));}  }
class C{  public static boolean endsWith(char s[],int len,String suffix){  final int suffixLen=suffix.length();  if (suffixLen > len)   return false;  for (int i=suffixLen - 1; i >= 0; i--)   if (s[len - (suffixLen - i)] != suffix.charAt(i))   return false;  return true;}  }
class C{  public static boolean tryToUseCachedRsrc(ServiceContext context) throws IOException {  String url=context.url;  HttpServletRequest request=context.request;  HttpServletResponse response=context.response;  boolean isIE8=context.isIE8;  boolean isMobile=context.isMobile;  boolean isRobot=context.isRobot;  ConfigData configData=context.configData;  boolean isVersioned=url.endsWith(CacheUtils.VERSION_SUFFIX);  String etag=request.getHeader("If-None-Match");  if (isVersioned && "1".equals(etag)) {    response.setHeader("ETag","1");    response.setHeader("Cache-Control","max-age=31536000");    response.setStatus(304);    return true;  }  char variant=CacheUtils.variantOf(context.url,etag,isIE8,isMobile,isRobot);  if (variant == CacheUtils.FIRST_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_VISIT_VARIANT) {    String referer=request.getHeader("Referer");    int index=referer == null ? (-1) : referer.indexOf(context.host);    if (index == 7 || index == 8) {      if (_isWithFirstPlus)       variant+=1; else       variant+=2;    }  }  context.variant=variant;  char savedVariant=context.variant;  if (etag != null && !CacheUtils.isHtmlSpeedEtag(etag))   return false;  boolean isGziped=false;  String contentEncoding=null;  byte[] cachedContent=null;  String[] cachedHttpHeaders=null;  long currentTime=System.currentTimeMillis();  Rsrc rsrc=findFreshCachedRsrc(context,currentTime);  long rsrcMaxFreshTime=context.maxFreshTime;  long maxAge=0;  if (rsrc != null) {    if (!(rsrc instanceof PageRsrc)) {      variant=CacheUtils.NON_PAGE_VARIANT;      context.variant=variant;    }    isGziped=rsrc.optimGzip != null;    if (isGziped)     contentEncoding=rsrc.optimGzipEncoding;    if (configData.isFixedMaxAge)     maxAge=context.maxAge; else     maxAge=(rsrcMaxFreshTime - currentTime) / 1000;    if (maxAge < 0)     maxAge=0;    if (etag != null && rsrc.origMd5 != null && etag.contains(rsrc.origMd5)) {      response.setHeader("ETag",etag);      if (rsrc instanceof PageRsrc && configData.minStateLessVariant != configData.maxStateLessVariant)       response.setHeader("Cache-Control","private, max-age=" + maxAge); else       response.setHeader("Cache-Control","max-age=" + maxAge);      response.setStatus(304);      return true;    }    if (etag != null && rsrc instanceof PageRsrc && ((CacheUtils.FIRST_VISIT_VARIANT <= variant && variant < CacheUtils.FORTH_VISIT_VARIANT) || (CacheUtils.IE8_FIRST_VISIT_VARIANT <= variant && variant < CacheUtils.IE8_FORTH_VISIT_VARIANT) || (CacheUtils.MOBILE_FIRST_VISIT_VARIANT <= variant && variant < CacheUtils.MOBILE_FORTH_VISIT_VARIANT))) {      variant++;      if (variant == CacheUtils.FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_PLUS_VISIT_VARIANT)       variant++;      context.variant=variant;      rsrc=findFreshCachedRsrc(context,currentTime);      rsrcMaxFreshTime=context.maxFreshTime;      if (rsrc == null) {        context.variant=savedVariant;        return false;      }      if (configData.isFixedMaxAge)       maxAge=context.maxAge; else       maxAge=(rsrcMaxFreshTime - currentTime) / 1000;      if (maxAge < 0)       maxAge=0;    }    etag='[' + rsrc.origMd5 + variant+ ']';    if (System.currentTimeMillis() < rsrcMaxFreshTime) {      cachedHttpHeaders=rsrc.httpHeaders;      if (rsrc.optimGzip != null) {        isGziped=true;        contentEncoding=rsrc.optimGzipEncoding;        cachedContent=rsrc.optimGzip;      } else       if (rsrc.origGzip != null) {        isGziped=true;        contentEncoding=rsrc.origGzipEncoding;        cachedContent=rsrc.origGzip;      } else       if (rsrc.optimData != null) {        isGziped=false;        cachedContent=rsrc.optimData;      } else       if (rsrc.origData != null) {        isGziped=false;        cachedContent=rsrc.origData;      }    }  }  if (cachedContent != null) {    boolean foundVaryHeader=false;    for (int h=0; h < cachedHttpHeaders.length; h+=2) {      String header=cachedHttpHeaders[h].toLowerCase();      if (header.equals("etag") || header.equals("cache-control") || header.equals("expires")|| header.equals("set-cookie")|| (header.equals("pragma") && cachedHttpHeaders[h + 1].equalsIgnoreCase("no-cache"))|| header.equals("content-encoding")) {      } else       if (rsrc instanceof PageRsrc && header.equals("vary")) {        foundVaryHeader=true;        if (cachedHttpHeaders[h + 1].toLowerCase().contains("user-agent"))         response.addHeader(cachedHttpHeaders[h],cachedHttpHeaders[h + 1]); else         response.addHeader(cachedHttpHeaders[h],cachedHttpHeaders[h + 1] + ",User-Agent");      } else {        response.addHeader(cachedHttpHeaders[h],cachedHttpHeaders[h + 1]);      }    }    if (isVersioned) {      response.setHeader("ETag","1");      response.setHeader("Cache-Control","max-age=31536000");    } else {      response.setHeader("ETag",etag);      if (rsrc instanceof PageRsrc && configData.minStateLessVariant != configData.maxStateLessVariant)       response.setHeader("Cache-Control","private, max-age=" + maxAge); else       response.setHeader("Cache-Control","max-age=" + maxAge);      if (rsrc instanceof PageRsrc && !foundVaryHeader)       response.addHeader("Vary","User-Agent");    }    if (isGziped)     response.setHeader("Content-Encoding",contentEncoding);    response.setHeader("Content-Length",cachedContent.length + "");    response.setStatus(200);    response.getOutputStream().write(cachedContent);    return true;  }  context.variant=savedVariant;  return false;}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public double nextDouble(){  return nextDouble(this.mean,this.standardDeviation);}  }
class C{  public void addLocalEventListener(IgnitePredicate<? extends Event> lsnr,int[] types){  try {    ctx.resource().injectGeneric(lsnr);  } catch (  IgniteCheckedException e) {    throw new IgniteException("Failed to inject resources to event listener: " + lsnr,e);  }  addLocalEventListener(new UserListenerWrapper(lsnr),types);}  }
class C{  public Iterator<INode> iterator(){  return stack.iterator();}  }
class C{  public EmitterRuntimeEnvironment(final String processingNodeId,final String pipelineId,final Emitter emitter,final StreamingMessageQueueConsumer queueConsumer) throws RequiredInputMissingException {  if (StringUtils.isBlank(processingNodeId))   throw new RequiredInputMissingException("Missing required processing node identifier");  if (StringUtils.isBlank(pipelineId))   throw new RequiredInputMissingException("Missing required pipeline identifier");  if (emitter == null)   throw new RequiredInputMissingException("Missing required emitter");  if (queueConsumer == null)   throw new RequiredInputMissingException("Missing required input queue consumer");  this.processingNodeId=StringUtils.lowerCase(StringUtils.trim(processingNodeId));  this.pipelineId=StringUtils.lowerCase(StringUtils.trim(pipelineId));  this.emitterId=StringUtils.lowerCase(StringUtils.trim(emitter.getId()));  this.emitter=emitter;  this.queueConsumer=queueConsumer;  this.running=true;  if (logger.isDebugEnabled())   logger.debug("emitter init [node=" + this.processingNodeId + ", pipeline="+ this.pipelineId+ ", emitter="+ this.emitterId+ "]");}  }
class C{  private Path generateFetchlist(int numResults,Configuration config,boolean filter) throws IOException {  Generator g=new Generator(config);  Path[] generatedSegment=g.generate(dbDir,segmentsDir,-1,numResults,Long.MAX_VALUE,filter,false);  if (generatedSegment == null)   return null;  return generatedSegment[0];}  }
class C{  public final double dot(MutableDouble3D other){  return other.x * x + other.y * y + other.z * z;}  }
class C{  public int doEndTag() throws JspException {  StringBuffer results=new StringBuffer();  results.append("");  ResponseUtils.write(pageContext,results.toString());  return (EVAL_PAGE);}  }
class C{  @Path("switch") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputWithRevisionResponse doSwitch(final SwitchRequest request) throws ApiException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return subversionApi.doSwitch(request);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.814 -0500",hash_original_method="BBA8F566F6EBBAE4E624DE5E2288492A",hash_generated_method="5E8CAC32EF86836AAB409F83647A3C3E") private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @NotNull @ObjectiveCName("revokeIntegrationTokenCommandWithGid:") public Command<String> revokeIntegrationToken(int gid){  return null;}  }
class C{  public static byte[] stringToUtf8Bytes(String string){  int len=string.length();  byte[] bytes=new byte[len * 3];  int outAt=0;  for (int i=0; i < len; i++) {    char c=string.charAt(i);    if ((c != 0) && (c < 0x80)) {      bytes[outAt]=(byte)c;      outAt++;    } else     if (c < 0x800) {      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);      outAt+=2;    } else {      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);      outAt+=3;    }  }  byte[] result=new byte[outAt];  System.arraycopy(bytes,0,result,0,outAt);  return result;}  }
class C{  public static Offset topLeft(){  return new Offset(WorldWind.OFFSET_FRACTION,0.0,WorldWind.OFFSET_FRACTION,1.0);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldW,int oldH){  super.onSizeChanged(w,h,oldW,oldH);  canvasWidth=(float)w - (float)(getPaddingLeft() + getPaddingRight());  canvasHeight=(float)h - (float)(getPaddingTop() + getPaddingBottom());  updateAll();}  }
class C{  public void update(String[] columns,Object[] columnValues,String[] conditions,Object[] conditionValues) throws DataAccessException {  if (columns.length != columnValues.length || conditions.length != conditionValues.length) {    logger.error("DatabaseWriter update columns and values mismatch");    return;  }  Object[] values=Arrays.copyOf(columnValues,columnValues.length + conditionValues.length);  System.arraycopy(conditionValues,0,values,columnValues.length,conditionValues.length);  final String sql=PreparedStatementUtil.prepareUpdateTemplateWithColumn(tableName,columns,conditions);  execute(sql,values);}  }
class C{  private static int createShader(String resource,int type) throws IOException {  int shader=glCreateShader(type);  ByteBuffer source=ioResourceToByteBuffer(resource,8192);  PointerBuffer strings=BufferUtils.createPointerBuffer(1);  IntBuffer lengths=BufferUtils.createIntBuffer(1);  strings.put(0,source);  lengths.put(0,source.remaining());  glShaderSource(shader,strings,lengths);  glCompileShader(shader);  int compiled=glGetShaderi(shader,GL_COMPILE_STATUS);  String shaderLog=glGetShaderInfoLog(shader);  if (shaderLog.trim().length() > 0) {    System.err.println(shaderLog);  }  if (compiled == 0) {    throw new AssertionError("Could not compile shader");  }  return shader;}  }
class C{  void removeDescendantSelectedPaths(TreeModelEvent e){  TreePath pPath=SwingUtilities2.getTreePath(e,getModel());  Object[] oldChildren=e.getChildren();  TreeSelectionModel sm=getSelectionModel();  if (sm != null && pPath != null && oldChildren != null && oldChildren.length > 0) {    for (int counter=oldChildren.length - 1; counter >= 0; counter--) {      removeDescendantSelectedPaths(pPath.pathByAddingChild(oldChildren[counter]),true);    }  }}  }
class C{  public QueryWhere<T> orderBy(Object... expressions){  for (  Object expr : expressions) {    OrderExpression<T> e=new OrderExpression<T>(query,expr,false,false,false);    query.addOrderBy(e);  }  return this;}  }
class C{  public void generateRss(XmlWriter w) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);  if (scheme != null) {    attrs.add(new XmlWriter.Attribute("domain",scheme));  }  if (labelLang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",labelLang));  }  String value=term;  if (term == null) {    value=label;  }  w.simpleElement(Namespaces.rssNs,"category",attrs,value);}  }
class C{  public MixStruct(MixStruct other){  __isset_bitfield=other.__isset_bitfield;  this.id=other.id;  this.uid=other.uid;}  }
class C{  public static PdeInstallation from(EclipseRelease release){  return new PdeInstallation(release);}  }
class C{  public static void concat(Iterable<File> toMerge,File dst) throws IOException {  try (FileChannel dstChannel=FileChannel.open(dst.toPath(),StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.WRITE)){    for (    File file : toMerge) {      try (RandomAccessFile raf=new RandomAccessFile(file,"r")){        FileChannel channel=raf.getChannel();        dstChannel.write(channel.map(FileChannel.MapMode.READ_ONLY,0,raf.length()));      }     }  } }  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("IsEncrypted"))     p_IsEncrypted="Y".equals(para[i].getParameter()); else     if (name.equals("ChangeSetting"))     p_ChangeSetting="Y".equals(para[i].getParameter()); else     if (name.equals("MaxLength"))     p_MaxLength=para[i].getParameterAsInt(); else     if (name.equals("TestValue"))     p_TestValue=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_Column_ID=getRecord_ID();}  }
class C{  public int write(Protein protein) throws IOException {  int sequenceLength=protein.getSequenceLength();  String md5=protein.getMd5();  String date=dmyFormat.format(new Date());  Set<Match> matches=protein.getMatches();  String proteinIdForGFF=null;  List<String> proteinIdsFromGetOrf=getProteinAccessions(protein);  for (  String proteinIdFromGetorf : proteinIdsFromGetOrf) {    if (matches.size() > 0) {      proteinIdFromGetorf=getValidGFF3SeqId(proteinIdFromGetorf);      writeSequenceRegionPart(protein,sequenceLength,md5,proteinIdFromGetorf);      processMatches(matches,proteinIdForGFF,date,protein,getNucleotideId());    }  }  return 0;}  }
class C{  public Obayashi(){  super(2,2,1);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Connection)) {    return false;  }  Connection c=(Connection)o;  return clientHandle.equals(c.clientHandle);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Array<V> toArray(){  Array array=new Array(true,map.size);  while (hasNext)   array.add(next());  return array;}  }
class C{  public int size(){  return cache.size();}  }
class C{  public Object call(Object object,String method,Object[] args) throws BSFException {  return InvokerHelper.invokeMethod(object,method,args);}  }
class C{  public void initialize(CordovaInterface cordova,CordovaWebView webView){}  }
class C{  public SyncApnsClient(InputStream certificate,String password,boolean production,String defaultTopic) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {  this.defaultTopic=defaultTopic;  client=Utils.buildClient(certificate,password,production);  if (production) {    gateway=Constants.ENDPOINT_PRODUCTION;  } else {    gateway=Constants.ENDPOINT_SANDBOX;  }}  }
class C{  private static void handleMethodInsnNode(CallGraph callGraph,ClassNode cn,MethodNode mn,MethodInsnNode methodCall,int depth){  if (BytecodeInstrumentation.checkIfCanInstrument(methodCall.owner.replaceAll("/","."))) {    logger.debug("Handling method: " + methodCall.name);    if (!callGraph.hasCall(cn.name,mn.name + mn.desc,methodCall.owner,methodCall.name + methodCall.desc)) {      if (callGraph.addCall(cn.name,mn.name + mn.desc,methodCall.owner,methodCall.name + methodCall.desc)) {        handle(callGraph,methodCall.owner,methodCall.name + methodCall.desc,depth);      }    }  }}  }
class C{  public String constantName(){  return constantName;}  }
class C{  public boolean forceCompaction(){  return diskStore.forceCompaction();}  }
class C{  @PUT @Path("/{id}/suspend/{stepId}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.TENANT_ADMIN}) public Response suspendWorkflowStep(@PathParam("id") URI uri,@PathParam("stepId") URI stepURI){  Workflow workflow=queryResource(uri);  EnumSet<WorkflowState> expected=EnumSet.of(WorkflowState.RUNNING,WorkflowState.ROLLING_BACK);  if (workflow.getCompletionState() == null) {    throw APIException.badRequests.workflowCompletionStateNotFound(workflow.getId());  }  WorkflowState completionState=WorkflowState.valueOf(workflow.getCompletionState());  ArgValidator.checkFieldForValueFromEnum(completionState,"Workflow State",expected);  if (!NullColumnValueGetter.isNullURI(stepURI)) {    WorkflowStep step=_dbClient.queryObject(WorkflowStep.class,stepURI);    ArgValidator.checkEntityNotNull(step,stepURI,isIdEmbeddedInURL(stepURI));  }  String taskId=UUID.randomUUID().toString();  getController().suspendWorkflowStep(uri,stepURI,taskId);  return Response.ok().build();}  }
class C{  public static Angle fromRadians(double radians){  return new Angle(RADIANS_TO_DEGREES * radians,radians);}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof SocketPermission))   return false;  SocketPermission np=(SocketPermission)permission;  int desired=np.getMask();  int effective=0;  int needed=desired;synchronized (this) {    int len=perms.size();    for (int i=0; i < len; i++) {      SocketPermission x=perms.get(i);      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(np)) {        effective|=x.getMask();        if ((effective & desired) == desired)         return true;        needed=(desired ^ effective);      }    }  }  return false;}  }
class C{  public void logWrapper(String message){  Log.v(TAG,message);}  }
class C{  public PowerDatacenter(String name,DatacenterCharacteristics characteristics,VmAllocationPolicy vmAllocationPolicy,List<Storage> storageList,double schedulingInterval) throws Exception {  super(name,characteristics,vmAllocationPolicy,storageList,schedulingInterval);  setPower(0.0);  setDisableMigrations(false);  setCloudletSubmitted(-1);  setMigrationCount(0);}  }
class C{  public String byteStringNoSlash(){  StringBuffer retval=new StringBuffer();  try {    while (true) {      char next=lookAhead(0);      if (next == '\0' || next == '\n' || next == '/') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {    return retval.toString();  }  return retval.toString();}  }
class C{  private TradingController(){  window=new TradingWindow(this);}  }
class C{  public void namespaceAfterStartElement(String uri,String prefix) throws SAXException {}  }
class C{  protected void curveVertexCheck(int shape){  if (shape != POLYGON) {    throw new RuntimeException("You must use beginShape() or " + "beginShape(POLYGON) before curveVertex()");  }  if (curveVertices == null) {    curveVertices=new float[128][3];  }  if (curveVertexCount == curveVertices.length) {    float[][] temp=new float[curveVertexCount << 1][3];    System.arraycopy(curveVertices,0,temp,0,curveVertexCount);    curveVertices=temp;  }  curveInitCheck();}  }
class C{  public static void close(Reader reader){  try {    if (reader != null) {      reader.close();    }  } catch (  IOException ex) {    LOGGER.warn(String.format(LOG_FORMAT,"reader"));  }}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  private final void primitiveLeftShift(int n){  int[] val=value;  int n2=32 - n;  for (int i=offset, c=val[i], m=i + intLen - 1; i < m; i++) {    int b=c;    c=val[i + 1];    val[i]=(b << n) | (c >>> n2);  }  val[offset + intLen - 1]<<=n;}  }
class C{  private Object js_unescape(Object[] args){  String s=ScriptRuntime.toString(args,0);  int firstEscapePos=s.indexOf('%');  if (firstEscapePos >= 0) {    int L=s.length();    char[] buf=s.toCharArray();    int destination=firstEscapePos;    for (int k=firstEscapePos; k != L; ) {      char c=buf[k];      ++k;      if (c == '%' && k != L) {        int end, start;        if (buf[k] == 'u') {          start=k + 1;          end=k + 5;        } else {          start=k;          end=k + 2;        }        if (end <= L) {          int x=0;          for (int i=start; i != end; ++i) {            x=Kit.xDigitToInt(buf[i],x);          }          if (x >= 0) {            c=(char)x;            k=end;          }        }      }      buf[destination]=c;      ++destination;    }    s=new String(buf,0,destination);  }  return s;}  }
class C{  public static boolean pointInRotatedRect(float[] point,float[] rotatedRect,float[] center){  RectF unrotated=new RectF();  float angle=getUnrotated(rotatedRect,center,unrotated);  return pointInRotatedRect(point,unrotated,angle);}  }
class C{  public void handleDOMCharacterDataModified(MutationEvent evt){}  }
class C{  public SitemapsEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);}  }
class C{  public ZipfianGenerator(long _items,double _zipfianconstant){  this(0,_items - 1,_zipfianconstant);}  }
class C{  private boolean isLineInformationRepairNeeded(String text){  if (text == null)   return false;  int length=text.length();  if (length == 0)   return false;  int rIndex=text.indexOf('\r');  int nIndex=text.indexOf('\n');  if (rIndex == -1 && nIndex == -1)   return false;  if (rIndex > 0 && rIndex < length - 1 && nIndex > 1 && rIndex < length - 2)   return false;  String defaultLD=null;  try {    defaultLD=getLineDelimiter(0);  } catch (  BadLocationException x) {    return true;  }  if (defaultLD == null)   return false;  defaultLD=getDefaultLineDelimiter();  if (defaultLD.length() == 1) {    if (rIndex != -1 && !"\r".equals(defaultLD))     return true;    if (nIndex != -1 && !"\n".equals(defaultLD))     return true;  } else   if (defaultLD.length() == 2)   return rIndex == -1 || nIndex - rIndex != 1;  return false;}  }
class C{  public ImageTypeSpecifier(RenderedImage image){  if (image == null) {    throw new IllegalArgumentException("image == null!");  }  colorModel=image.getColorModel();  sampleModel=image.getSampleModel();}  }
class C{  public LifecycleEvent(Lifecycle lifecycle,String type,Object data){  super(lifecycle);  this.type=type;  this.data=data;}  }
class C{  public int size(int peekModes,boolean loc){  CachePeekMode[] modes=PlatformUtils.decodeCachePeekModes(peekModes);  return loc ? cache.localSize(modes) : cache.size(modes);}  }
class C{  public static boolean isLanguageChar(int codePoint){  return ASCIIUtil.isLetter(codePoint) || ASCIIUtil.isNumber(codePoint) || codePoint == '-';}  }
class C{  private void assertAuthenticationUserIdEquals(String expectedUserId,Authentication actualAuthentication){  assertNotNull(actualAuthentication);  assertEquals(PreAuthenticatedAuthenticationToken.class,actualAuthentication.getClass());  PreAuthenticatedAuthenticationToken preAuthenticatedAuthenticationToken=(PreAuthenticatedAuthenticationToken)actualAuthentication;  Object principal=preAuthenticatedAuthenticationToken.getPrincipal();  assertNotNull(principal);  assertEquals(SecurityUserWrapper.class,principal.getClass());  SecurityUserWrapper securityUserWrapper=(SecurityUserWrapper)principal;  assertEquals(expectedUserId,securityUserWrapper.getUsername());  assertNotNull(securityUserWrapper.getApplicationUser());  assertEquals(expectedUserId,securityUserWrapper.getApplicationUser().getUserId());}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public void onUpdate(){  this.onEntityUpdate();  if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {    float f=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);    this.prevRotationYaw=this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180.0D / Math.PI);    this.prevRotationPitch=this.rotationPitch=(float)(Math.atan2(this.motionY,(double)f) * 180.0D / Math.PI);  }  Block block=this.worldObj.getBlock(this.field_145791_d,this.field_145792_e,this.field_145789_f);  if (block.getMaterial() != Material.air) {    block.setBlockBoundsBasedOnState(this.worldObj,this.field_145791_d,this.field_145792_e,this.field_145789_f);    AxisAlignedBB axisalignedbb=block.getCollisionBoundingBoxFromPool(this.worldObj,this.field_145791_d,this.field_145792_e,this.field_145789_f);    if (axisalignedbb != null && axisalignedbb.isVecInside(Vec3.createVectorHelper(this.posX,this.posY,this.posZ))) {      this.inGround=true;    }  }  if (this.inGround) {    int j=this.worldObj.getBlockMetadata(this.field_145791_d,this.field_145792_e,this.field_145789_f);    if (block == this.field_145790_g && j == this.inData) {      ++this.ticksInGround;      if (this.ticksInGround == 2400) {        this.setDead();      }    } else {      this.inGround=false;      this.motionX*=(double)(this.rand.nextFloat() * 0.2F);      this.motionY*=(double)(this.rand.nextFloat() * 0.2F);      this.motionZ*=(double)(this.rand.nextFloat() * 0.2F);      this.ticksInGround=0;      this.ticksInAir=0;    }  } else {    ++this.ticksInAir;    Vec3 vec31=Vec3.createVectorHelper(this.posX,this.posY,this.posZ);    Vec3 vec3=Vec3.createVectorHelper(this.posX + this.motionX,this.posY + this.motionY,this.posZ + this.motionZ);    MovingObjectPosition movingobjectposition=this.worldObj.func_147447_a(vec31,vec3,false,true,false);    vec31=Vec3.createVectorHelper(this.posX,this.posY,this.posZ);    vec3=Vec3.createVectorHelper(this.posX + this.motionX,this.posY + this.motionY,this.posZ + this.motionZ);    if (movingobjectposition != null) {      vec3=Vec3.createVectorHelper(movingobjectposition.hitVec.xCoord,movingobjectposition.hitVec.yCoord,movingobjectposition.hitVec.zCoord);    }    Entity entity=null;    @SuppressWarnings("rawtypes") List list=this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.boundingBox.addCoord(this.motionX,this.motionY,this.motionZ).expand(1.0D,1.0D,1.0D));    double d0=0.0D;    int i;    float f1;    for (i=0; i < list.size(); ++i) {      Entity entity1=(Entity)list.get(i);      if (entity1.canBeCollidedWith() && (entity1 != this.shootingEntity || this.ticksInAir >= 5)) {        f1=0.075F;        AxisAlignedBB axisalignedbb1=entity1.boundingBox.expand((double)f1,(double)f1,(double)f1);        MovingObjectPosition movingobjectposition1=axisalignedbb1.calculateIntercept(vec31,vec3);        if (movingobjectposition1 != null) {          double d1=vec31.distanceTo(movingobjectposition1.hitVec);          if (d1 < d0 || d0 == 0.0D) {            entity=entity1;            d0=d1;          }        }      }    }    if (entity != null) {      movingobjectposition=new MovingObjectPosition(entity);    }    if (movingobjectposition != null && movingobjectposition.entityHit != null && movingobjectposition.entityHit instanceof EntityPlayer) {      EntityPlayer entityplayer=(EntityPlayer)movingobjectposition.entityHit;      if (entityplayer.capabilities.disableDamage || this.shootingEntity instanceof EntityPlayer && !((EntityPlayer)this.shootingEntity).canAttackPlayer(entityplayer)) {        movingobjectposition=null;      }    }    float f2;    float f4;    if (movingobjectposition != null) {      if (movingobjectposition.entityHit != null) {        f2=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);        int k=MathHelper.ceiling_double_int((double)f2 * this.damage);        if (this.getIsCritical()) {          k+=this.rand.nextInt(k / 2 + 2);        }        DamageSource damagesource=null;        if (this.shootingEntity == null) {          damagesource=causeBulletDamage(this,this);        } else {          damagesource=causeBulletDamage(this,this.shootingEntity);        }        if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman)) {          movingobjectposition.entityHit.setFire(5);        }        if (movingobjectposition.entityHit.attackEntityFrom(damagesource,(float)k)) {          if (movingobjectposition.entityHit instanceof EntityLivingBase) {            EntityLivingBase entitylivingbase=(EntityLivingBase)movingobjectposition.entityHit;            if (!this.worldObj.isRemote) {              entitylivingbase.setArrowCountInEntity(entitylivingbase.getArrowCountInEntity() + 1);            }            if (this.knockbackStrength > 0) {              f4=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);              if (f4 > 0.0F) {                movingobjectposition.entityHit.addVelocity(this.motionX * (double)this.knockbackStrength * 0.6000000238418579D / (double)f4,0.1D,this.motionZ * (double)this.knockbackStrength * 0.6000000238418579D / (double)f4);              }            }            if (this.shootingEntity != null && this.shootingEntity instanceof EntityLivingBase) {              EnchantmentHelper.func_151384_a(entitylivingbase,this.shootingEntity);              EnchantmentHelper.func_151385_b((EntityLivingBase)this.shootingEntity,entitylivingbase);            }            if (this.shootingEntity != null && movingobjectposition.entityHit != this.shootingEntity && movingobjectposition.entityHit instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP) {              ((EntityPlayerMP)this.shootingEntity).playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(6,0.0F));            }          }          if (!(movingobjectposition.entityHit instanceof EntityEnderman)) {            this.setDead();          }        } else {          this.motionX*=-0.10000000149011612D;          this.motionY*=-0.10000000149011612D;          this.motionZ*=-0.10000000149011612D;          this.rotationYaw+=180.0F;          this.prevRotationYaw+=180.0F;          this.ticksInAir=0;        }      } else {        this.field_145791_d=movingobjectposition.blockX;        this.field_145792_e=movingobjectposition.blockY;        this.field_145789_f=movingobjectposition.blockZ;        this.field_145790_g=this.worldObj.getBlock(this.field_145791_d,this.field_145792_e,this.field_145789_f);        this.inData=this.worldObj.getBlockMetadata(this.field_145791_d,this.field_145792_e,this.field_145789_f);        this.motionX=(double)((float)(movingobjectposition.hitVec.xCoord - this.posX));        this.motionY=(double)((float)(movingobjectposition.hitVec.yCoord - this.posY));        this.motionZ=(double)((float)(movingobjectposition.hitVec.zCoord - this.posZ));        f2=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);        this.posX-=this.motionX / (double)f2 * 0.05000000074505806D;        this.posY-=this.motionY / (double)f2 * 0.05000000074505806D;        this.posZ-=this.motionZ / (double)f2 * 0.05000000074505806D;        this.inGround=true;        this.arrowShake=0;        this.setIsCritical(false);        if (this.field_145790_g.getMaterial() != Material.air) {          this.field_145790_g.onEntityCollidedWithBlock(this.worldObj,this.field_145791_d,this.field_145792_e,this.field_145789_f,this);        }      }    }    if (this.getIsCritical()) {      for (i=0; i < 4; ++i) {        this.worldObj.spawnParticle("crit",this.posX + this.motionX * (double)i / 4.0D,this.posY + this.motionY * (double)i / 4.0D,this.posZ + this.motionZ * (double)i / 4.0D,-this.motionX,-this.motionY + 0.2D,-this.motionZ);      }    }    this.posX+=this.motionX;    this.posY+=this.motionY;    this.posZ+=this.motionZ;    f2=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);    this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180.0D / Math.PI);    for (this.rotationPitch=(float)(Math.atan2(this.motionY,(double)f2) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch-=360.0F) {      ;    }    while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {      this.prevRotationPitch+=360.0F;    }    while (this.rotationYaw - this.prevRotationYaw < -180.0F) {      this.prevRotationYaw-=360.0F;    }    while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {      this.prevRotationYaw+=360.0F;    }    this.rotationPitch=this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;    this.rotationYaw=this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;    float f3=0.99F;    f1=0.0125F;    if (this.isInWater()) {      for (int l=0; l < 4; ++l) {        f4=0.25F;        this.worldObj.spawnParticle("bubble",this.posX - this.motionX * (double)f4,this.posY - this.motionY * (double)f4,this.posZ - this.motionZ * (double)f4,this.motionX,this.motionY,this.motionZ);      }      f3=0.8F;    }    if (this.isWet()) {      this.extinguish();    }    this.motionX*=(double)f3;    this.motionY*=(double)f3;    this.motionZ*=(double)f3;    this.motionY-=(double)f1;    this.setPosition(this.posX,this.posY,this.posZ);    this.func_145775_I();  }}  }
class C{  public static int computeRow(Angle delta,Angle latitude,Angle origin){  if (delta == null || latitude == null || origin == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (delta.degrees <= 0d) {    String message=Logging.getMessage("generic.DeltaAngleOutOfRange",delta);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (latitude.degrees < -90d || latitude.degrees > 90d) {    String message=Logging.getMessage("generic.AngleOutOfRange",latitude);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int row=(int)((latitude.degrees - origin.degrees) / delta.degrees);  if ((latitude.degrees - origin.degrees) == 180d)   row=row - 1;  return row;}  }
class C{  @Deprecated public static <V1,V2>IgniteBiTuple<V1,V2> t2(){  return new IgniteBiTuple<>();}  }
class C{  public FontChooserMain(){  initComponents();  add(new JFontChooser());}  }
class C{  private void processNonOptionToken(String value,boolean stopAtNonOption){  if (stopAtNonOption && (currentOption == null || !currentOption.hasArg())) {    eatTheRest=true;    tokens.add("--");  }  tokens.add(value);}  }
class C{  public Bar(int initialCapacity){  super();  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  this.elementData=(E[])new Object[initialCapacity];}  }
class C{  public void test_update$BII() throws Exception {  for (int index=1; index < 4; index++) {    Cipher c=Cipher.getInstance("DESEDE/CBC/PKCS5Padding");    byte[] keyMaterial=loadBytes("hyts_" + "des-ede3-cbc.test" + index + ".key");    DESedeKeySpec keySpec=new DESedeKeySpec(keyMaterial);    SecretKeyFactory skf=SecretKeyFactory.getInstance("DESEDE");    Key k=skf.generateSecret(keySpec);    byte[] ivMaterial=loadBytes("hyts_" + "des-ede3-cbc.test" + index + ".iv");    IvParameterSpec iv=new IvParameterSpec(ivMaterial);    c.init(Cipher.DECRYPT_MODE,k,iv);    ByteArrayOutputStream baos=new ByteArrayOutputStream();    byte[] input=new byte[256];    String resPath="hyts_" + "des-ede3-cbc.test" + index + ".ciphertext";    File resources=Support_Resources.createTempFolder();    Support_Resources.copyFile(resources,null,resPath);    InputStream is=Support_Resources.getStream(resPath);    int bytesRead=is.read(input,0,256);    while (bytesRead > 0) {      byte[] output=c.update(input,0,bytesRead);      if (output != null) {        baos.write(output);      }      bytesRead=is.read(input,0,256);    }    byte[] output=c.doFinal();    if (output != null) {      baos.write(output);    }    byte[] decipheredCipherText=baos.toByteArray();    is.close();    byte[] plaintextBytes=loadBytes("hyts_" + "des-ede3-cbc.test" + index + ".plaintext");    assertEquals("Operation produced incorrect results for index " + index,Arrays.toString(plaintextBytes),Arrays.toString(decipheredCipherText));  }  Cipher cipher=Cipher.getInstance("DESEDE/CBC/PKCS5Padding");  try {    cipher.update(new byte[64],0,32);    fail();  } catch (  IllegalStateException expected) {  }}  }
class C{  public RotatingTransformer(int degrees,float minAlpha){  this.degrees=degrees;  distanceToCentreFactor=(float)Math.tan(Math.toRadians(degrees / 2)) / 2;  this.minAlpha=minAlpha;}  }
class C{  public void unregisterFromConnectivityEvents(Object object){  NetworkChangeReceiver receiver=receiversHashMap.get(object.toString());  configuration.getContext().unregisterReceiver(receiver);  receiversHashMap.remove(object.toString());  receiver=null;}  }
class C{  public boolean isModified(){  return false;}  }
class C{  public void updateCursorPosition(final TextPosition position){  setCharPosition(position.getCharacter() + 1);  setLineNumber(position.getLine() + 1);}  }
class C{  public static PostViewChangeEvent createPostViewChangeEvent(final DashboardMenuItem view){  return new PostViewChangeEvent(view);}  }
class C{  public static NUMBER toNUMBER(double number) throws SQLException {  if (Double.isNaN(number)) {    return null;  }  return new NUMBER(number);}  }
class C{  private boolean saveAnswers(boolean evaluateConstraints){  FormController formController=Collect.getInstance().getFormController();  int childCount=mQuestionHolder.getChildCount();  LinkedHashMap<FormIndex,IAnswerData> answers=getAnswers();  try {    FailedConstraint constraint=formController.saveAnswers(answers,evaluateConstraints);    if (constraint != null) {      createConstraintToast(constraint.index,constraint.status);      return false;    }  } catch (  JavaRosaException e) {    Log.e(TAG,e.getMessage(),e);    createErrorDialog(e.getCause().getMessage(),DO_NOT_EXIT);    return false;  }  return true;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static Uri addCall(CallerInfo ci,Context context,String number,int presentation,int callType,long start,int duration){  final ContentResolver resolver=context.getContentResolver();  if (presentation == PhoneConstants.PRESENTATION_RESTRICTED) {    number=CallerInfo.PRIVATE_NUMBER;    if (ci != null)     ci.name="";  } else   if (presentation == PhoneConstants.PRESENTATION_PAYPHONE) {    number=CallerInfo.PAYPHONE_NUMBER;    if (ci != null)     ci.name="";  } else   if (TextUtils.isEmpty(number) || presentation == PhoneConstants.PRESENTATION_UNKNOWN) {    number=CallerInfo.UNKNOWN_NUMBER;    if (ci != null)     ci.name="";  }  ContentValues values=new ContentValues(5);  values.put(NUMBER,number);  values.put(TYPE,Integer.valueOf(callType));  values.put(DATE,Long.valueOf(start));  values.put(DURATION,Long.valueOf(duration));  values.put(NEW,Integer.valueOf(1));  if (callType == MISSED_TYPE) {    values.put(IS_READ,Integer.valueOf(0));  }  if (ci != null) {    values.put(CACHED_NAME,ci.name);    values.put(CACHED_NUMBER_TYPE,ci.numberType);    values.put(CACHED_NUMBER_LABEL,ci.numberLabel);  }  if ((ci != null) && (ci.person_id > 0)) {    final Cursor cursor;    if (ci.normalizedNumber != null) {      final String normalizedPhoneNumber=ci.normalizedNumber;      cursor=resolver.query(Phone.CONTENT_URI,new String[]{Phone._ID},Phone.CONTACT_ID + " =? AND " + Phone.NORMALIZED_NUMBER+ " =?",new String[]{String.valueOf(ci.person_id),normalizedPhoneNumber},null);    } else {      final String phoneNumber=ci.phoneNumber != null ? ci.phoneNumber : number;      cursor=resolver.query(Uri.withAppendedPath(Callable.CONTENT_FILTER_URI,Uri.encode(phoneNumber)),new String[]{Phone._ID},Phone.CONTACT_ID + " =?",new String[]{String.valueOf(ci.person_id)},null);    }    if (cursor != null) {      try {        if (cursor.getCount() > 0 && cursor.moveToFirst()) {          final Uri feedbackUri=DataUsageFeedback.FEEDBACK_URI.buildUpon().appendPath(cursor.getString(0)).appendQueryParameter(DataUsageFeedback.USAGE_TYPE,DataUsageFeedback.USAGE_TYPE_CALL).build();          resolver.update(feedbackUri,new ContentValues(),null,null);        }      }  finally {        cursor.close();      }    }  }  Uri result=resolver.insert(CONTENT_URI,values);  removeExpiredEntries(context);  return result;}  }
class C{  public void testPreviousOnEmptyCache(){  ChatCache cache=new ChatCache(null);  assertFalse(cache.hasPrevious());  cache.addlinetoCache("one");  try {    cache.previous();  } catch (  NoSuchElementException e) {    assertThat(cache.current(),is("one"));  }}  }
class C{  protected void sendFunctionGroup1(){  byte[] result=jmri.NmraPacket.function0Through4Packet(address,(address >= 100),getF0(),getF1(),getF2(),getF3(),getF4());  TrafficController.instance().sendPacket(result,1);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public ContextedException(final Throwable cause){  super(cause);  exceptionContext=new DefaultExceptionContext();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.973 -0500",hash_original_method="8F6462E23806D652AB2FB8FE10D0061F",hash_generated_method="3C7532443F0E1BCE055B73DA114D8A47") public String debugDump(){  stringRepresentation="";  Class<?> myclass=getClass();  sprint(myclass.getName());  sprint("{");  Field[] fields=myclass.getDeclaredFields();  for (int i=0; i < fields.length; i++) {    Field f=fields[i];    int modifier=f.getModifiers();    if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)     continue;    Class<?> fieldType=f.getType();    String fieldName=f.getName();    if (fieldName.compareTo("stringRepresentation") == 0) {      continue;    }    if (fieldName.compareTo("indentation") == 0) {      continue;    }    sprint(fieldName + ":");    try {      if (fieldType.isPrimitive()) {        String fname=fieldType.toString();        sprint(fname + ":");        if (fname.compareTo("int") == 0) {          int intfield=f.getInt(this);          sprint(intfield);        } else         if (fname.compareTo("short") == 0) {          short shortField=f.getShort(this);          sprint(shortField);        } else         if (fname.compareTo("char") == 0) {          char charField=f.getChar(this);          sprint(charField);        } else         if (fname.compareTo("long") == 0) {          long longField=f.getLong(this);          sprint(longField);        } else         if (fname.compareTo("boolean") == 0) {          boolean booleanField=f.getBoolean(this);          sprint(booleanField);        } else         if (fname.compareTo("double") == 0) {          double doubleField=f.getDouble(this);          sprint(doubleField);        } else         if (fname.compareTo("float") == 0) {          float floatField=f.getFloat(this);          sprint(floatField);        }      } else       if (GenericObject.class.isAssignableFrom(fieldType)) {        if (f.get(this) != null) {          sprint(((GenericObject)f.get(this)).debugDump(indentation + 1));        } else {          sprint("<null>");        }      } else       if (GenericObjectList.class.isAssignableFrom(fieldType)) {        if (f.get(this) != null) {          sprint(((GenericObjectList)f.get(this)).debugDump(indentation + 1));        } else {          sprint("<null>");        }      } else {        if (f.get(this) != null) {          sprint(f.get(this).getClass().getName() + ":");        } else {          sprint(fieldType.getName() + ":");        }        sprint("{");        if (f.get(this) != null) {          sprint(f.get(this).toString());        } else {          sprint("<null>");        }        sprint("}");      }    } catch (    IllegalAccessException ex1) {      continue;    }  }  sprint("}");  return stringRepresentation;}  }
class C{  @Override public HierarchyWrapperOperation createSubOperation(){  return new ToStringOperation(builder,baseIndent);}  }
class C{  public static FormObject[] sortGroupLargestFirst(final FormObject[] comps){  return sortCompsDesending(comps);}  }
class C{  public void evalPrint(final EvolutionState state,final int thread,final GPData input,final ADFStack stack,final GPIndividual individual,final Problem problem,final int[][] map2){  Ant p=(Ant)problem;switch (p.orientation) {case Ant.O_UP:    p.posy--;  if (p.posy < 0)   p.posy=p.maxy - 1;break;case Ant.O_LEFT:p.posx--;if (p.posx < 0) p.posx=p.maxx - 1;break;case Ant.O_DOWN:p.posy++;if (p.posy >= p.maxy) p.posy=0;break;case Ant.O_RIGHT:p.posx++;if (p.posx >= p.maxx) p.posx=0;break;default :state.output.fatal("Whoa, somehow I got a bad orientation! (" + p.orientation + ")");break;}p.moves++;if (p.map[p.posx][p.posy] == Ant.FOOD && p.moves < p.maxMoves) {p.sum++;p.map[p.posx][p.posy]=Ant.ATE;}if (p.moves < p.maxMoves) {if (++p.pmod > 122) p.pmod=97;map2[p.posx][p.posy]=p.pmod;}}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public OpenInNewWindowAction(final Window parent,final IViewContainer container,final INaviView[] views){  super("Open in new window");  parentWindow=Preconditions.checkNotNull(parent,"IE02378: parent argument can not be null");  viewContainer=Preconditions.checkNotNull(container,"IE02379: container argument can not be null");  this.views=Preconditions.checkNotNull(views,"IE02875: views argument can not be null").clone();  putValue(ACCELERATOR_KEY,HotKeys.LOAD_NEW_WINDOW_HK.getKeyStroke());}  }
class C{  public static void activateGhostmode(final Player player){  player.setInvisible(true);  new GameEvent(player.getName(),INVISIBLE,"on").raise();  player.setGhost(true);  new GameEvent(player.getName(),GHOSTMODE,"on").raise();}  }
class C{  public boolean isSparse(){  return true;}  }
class C{  public int compareTo(Date anotherDate){  long thisTime=getMillisOf(this);  long anotherTime=getMillisOf(anotherDate);  return (thisTime < anotherTime ? -1 : (thisTime == anotherTime ? 0 : 1));}  }
class C{  public Lis(){  super(2,2);}  }
class C{  public void deleteContacts(){  mCommands[ContactsCommandType.DELETE_COMMAND.ordinal()].execute(mModifyContacts.iterator());}  }
class C{  public IOTask<UserProfile> loadProfileTask(){  log.debug(null);  return FS.<UserProfile>readDataTask(profileDir() + PROFILE_FILE_NAME);}  }
class C{  private Table table(){  return this.region.table("domains");}  }
class C{  public SimEvent(){  etype=ENULL;  time=-1L;  endWaitingTime=-1.0;  entSrc=-1;  entDst=-1;  tag=-1;  data=null;}  }
class C{  public void toplevel(NodeInfo element){  if (!myIsInitialized) {    myIsInitialized=true;    final Properties properties=myController.getOutputProperties();    final String method=properties.getProperty(OutputKeys.METHOD);    if (method == null || "xml".equals(method) || "html".equals(method)) {      try {        final Emitter emitter=myController.getOutputter().getEmitter();        final GeneralOutputter outputter=new TracingOutputter(emitter,myController.getNamePool());        final Field fOutputter=Controller.class.getDeclaredField("currentOutputter");        fOutputter.setAccessible(true);        fOutputter.set(myController,outputter);      } catch (      Exception e1) {        System.err.println("Failed to change output emitter");        e1.printStackTrace();      }    }  }  if (TRACE) {    StyleElement e=(StyleElement)element;    trace("<Top-level element=\"" + e.getDisplayName() + "\" line=\""+ e.getLineNumber()+ "\" file=\""+ e.getSystemId()+ "\" precedence=\""+ e.getPrecedence()+ "\"/>");  }}  }
class C{  public QPTestFilter(TokenStream in){  super(in);}  }
class C{  public void unsetTaskId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,TASKID_ISSET_ID);}  }
class C{  public HttpReplicator(String host,int port,String path,HttpClientConnectionManager conMgr){  super(host,port,path,conMgr,null);}  }
class C{  public void testSendRequest() throws Exception {  Request bindingRequest=MessageFactory.createBindingRequest();  dgramCollector.startListening(dummyServerSocket);  stunStack.sendRequest(bindingRequest,dummyServerAddress,localAddress,new SimpleResponseCollector());  dgramCollector.waitForPacket();  DatagramPacket receivedPacket=dgramCollector.collectPacket();  assertTrue("The stack did not properly send a Binding Request",(receivedPacket.getLength() > 0));  Request receivedRequest=(Request)Request.decode(receivedPacket.getData(),(char)0,(char)receivedPacket.getLength());  assertEquals("The received request did not match the " + "one that was sent.",bindingRequest,receivedRequest);  dgramCollector.startListening(dummyServerSocket);  dgramCollector.waitForPacket();  receivedPacket=dgramCollector.collectPacket();  assertTrue("The stack did not retransmit a Binding Request",(receivedPacket.getLength() > 0));  receivedRequest=(Request)Request.decode(receivedPacket.getData(),(char)0,(char)receivedPacket.getLength());  assertEquals("The retransmitted request did not match the original.",bindingRequest,receivedRequest);}  }
class C{  public PendingException(){  super();}  }
class C{  public static byte[] encodeInteger(final BigInteger bigInt){  if (bigInt == null) {    throw new NullPointerException("encodeInteger called with null parameter");  }  return encodeBase64(toIntegerBytes(bigInt),false);}  }
class C{  protected final void LONG_SHR(Instruction s,Operand result,Operand val1,Operand val2,boolean maskWith3f){  if (!val2.isIntConstant()) {    Binary.mutate(s,LONG_SHR,result.asRegister(),val1,val2);    EMIT(s);  } else   if (result.isRegister()) {    int shift=val2.asIntConstant().value;    if (maskWith3f) {      shift=shift & 0x3F;    }    Register lhsReg=result.asRegister().getRegister();    Register lowlhsReg=burs.ir.regpool.getSecondReg(lhsReg);    Register rhsReg1=val1.asRegister().getRegister();    Register lowrhsReg1=burs.ir.regpool.getSecondReg(rhsReg1);    if (shift == 0) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }    } else     if (shift == 1) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,new RegisterOperand(lhsReg,TypeReference.Int),IC(1))));      EMIT(MIR_BinaryAcc.mutate(s,IA32_RCR,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(1)));    } else     if (shift < 32) {      Register tmp=regpool.getInteger();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,new RegisterOperand(tmp,TypeReference.Int),IC(32 - shift))));      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      }      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(shift))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      EMIT(MIR_BinaryAcc.mutate(s,IA32_SAR,new RegisterOperand(lhsReg,TypeReference.Int),IC(shift)));    } else     if (shift == 32) {      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int)));      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,new RegisterOperand(lhsReg,TypeReference.Int),IC(31))));    } else {      if ((!maskWith3f && (shift >= 0x3F)) || (maskWith3f && ((shift & 0x3F) == 0x3F))) {        if (!result.similar(val1)) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,new RegisterOperand(lhsReg,TypeReference.Int),IC(31))));        EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lhsReg,TypeReference.Int)));      } else {        if (!result.similar(val1)) {          EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        }        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,new RegisterOperand(lhsReg,TypeReference.Int),IC(31))));        EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int)));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,new RegisterOperand(lowlhsReg,TypeReference.Int),IC((shift - 32) & 0x3F))));      }    }  } else {    throw new OptimizingCompilerException("BURS_Helpers","unexpected parameters: " + result + "="+ val1+ ">>"+ val2);  }}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof MutableByte) {    return value == ((MutableByte)obj).byteValue();  }  return false;}  }
class C{  public boolean hasAdditionalProperties(){  return false;}  }
class C{  void fileLock(boolean acquire) throws IOException {  if (acquire) {    File file=new File(fileLockDir,String.format("gondola-lock-%s-%s",gondola.getHostId(),memberId));    fileLockChannel=new RandomAccessFile(file,"rw").getChannel();    fileLock=fileLockChannel.tryLock();    if (fileLock == null) {      throw new IllegalStateException(String.format("Another process has the lock on %s",file));    }  } else {    if (fileLock != null) {      fileLock.release();    }  }}  }
class C{  private RhinoUtils(){}  }
class C{  public static <T extends GenericEntity>List<T> filterByAnd(List<T> values,List<? extends EntityCondition> exprs){  if (values == null)   return null;  if (UtilValidate.isEmpty(exprs)) {    return values;  }  List<T> result=new LinkedList<T>();  for (  T value : values) {    boolean include=true;    for (    EntityCondition condition : exprs) {      include=condition.entityMatches(value);      if (!include)       break;    }    if (include) {      result.add(value);    }  }  return result;}  }
class C{  @Override protected Iterator<V> createValuesIterator(){  return new ReferenceValuesIterator<V>(this);}  }
class C{  @Override public String toString(){  if (m_ClusterCentroids == null) {    return "No clusterer built yet!";  }  int maxWidth=0;  int maxAttWidth=0;  boolean containsNumeric=false;  for (int i=0; i < m_NumClusters; i++) {    for (int j=0; j < m_ClusterCentroids.numAttributes(); j++) {      if (m_ClusterCentroids.attribute(j).name().length() > maxAttWidth) {        maxAttWidth=m_ClusterCentroids.attribute(j).name().length();      }      if (m_ClusterCentroids.attribute(j).isNumeric()) {        containsNumeric=true;        double width=Math.log(Math.abs(m_ClusterCentroids.instance(i).value(j))) / Math.log(10.0);        if (width < 0) {          width=1;        }        width+=6.0;        if ((int)width > maxWidth) {          maxWidth=(int)width;        }      }    }  }  for (int i=0; i < m_ClusterCentroids.numAttributes(); i++) {    if (m_ClusterCentroids.attribute(i).isNominal()) {      Attribute a=m_ClusterCentroids.attribute(i);      for (int j=0; j < m_ClusterCentroids.numInstances(); j++) {        String val=a.value((int)m_ClusterCentroids.instance(j).value(i));        if (val.length() > maxWidth) {          maxWidth=val.length();        }      }      for (int j=0; j < a.numValues(); j++) {        String val=a.value(j) + " ";        if (val.length() > maxAttWidth) {          maxAttWidth=val.length();        }      }    }  }  if (m_displayStdDevs) {    for (int i=0; i < m_ClusterCentroids.numAttributes(); i++) {      if (m_ClusterCentroids.attribute(i).isNominal()) {        int maxV=Utils.maxIndex(m_FullNominalCounts[i]);        int percent=6;        String nomV="" + m_FullNominalCounts[i][maxV];        if (nomV.length() + percent > maxWidth) {          maxWidth=nomV.length() + 1;        }      }    }  }  for (  int m_ClusterSize : m_ClusterSizes) {    String size="(" + m_ClusterSize + ")";    if (size.length() > maxWidth) {      maxWidth=size.length();    }  }  if (m_displayStdDevs && maxAttWidth < "missing".length()) {    maxAttWidth="missing".length();  }  String plusMinus="+/-";  maxAttWidth+=2;  if (m_displayStdDevs && containsNumeric) {    maxWidth+=plusMinus.length();  }  if (maxAttWidth < "Attribute".length() + 2) {    maxAttWidth="Attribute".length() + 2;  }  if (maxWidth < "Full Data".length()) {    maxWidth="Full Data".length() + 1;  }  if (maxWidth < "missing".length()) {    maxWidth="missing".length() + 1;  }  StringBuffer temp=new StringBuffer();  temp.append("\nkMeans\n======\n");  temp.append("\nNumber of iterations: " + m_Iterations);  if (!m_FastDistanceCalc) {    temp.append("\n");    if (m_DistanceFunction instanceof EuclideanDistance) {      temp.append("Within cluster sum of squared errors: " + Utils.sum(m_squaredErrors));    } else {      temp.append("Sum of within cluster distances: " + Utils.sum(m_squaredErrors));    }  }  temp.append("\n\nInitial starting points (");switch (m_initializationMethod) {case FARTHEST_FIRST:    temp.append("farthest first");  break;case KMEANS_PLUS_PLUS:temp.append("k-means++");break;case CANOPY:temp.append("canopy");break;default :temp.append("random");}temp.append("):\n");if (m_initializationMethod != CANOPY) {temp.append("\n");for (int i=0; i < m_initialStartPoints.numInstances(); i++) {temp.append("Cluster " + i + ": "+ m_initialStartPoints.instance(i)).append("\n");}} else {temp.append(m_canopyClusters.toString(false));}if (m_speedUpDistanceCompWithCanopies) {temp.append("\nReduced number of distance calculations by using canopies.");if (m_initializationMethod != CANOPY) {temp.append("\nCanopy T2 radius: " + String.format("%-10.3f",m_canopyClusters.getActualT2()));temp.append("\nCanopy T1 radius: " + String.format("%-10.3f",m_canopyClusters.getActualT1())).append("\n");}}if (!m_dontReplaceMissing) {temp.append("\nMissing values globally replaced with mean/mode");}temp.append("\n\nFinal cluster centroids:\n");temp.append(pad("Cluster#"," ",(maxAttWidth + (maxWidth * 2 + 2)) - "Cluster#".length(),true));temp.append("\n");temp.append(pad("Attribute"," ",maxAttWidth - "Attribute".length(),false));temp.append(pad("Full Data"," ",maxWidth + 1 - "Full Data".length(),true));for (int i=0; i < m_NumClusters; i++) {String clustNum="" + i;temp.append(pad(clustNum," ",maxWidth + 1 - clustNum.length(),true));}temp.append("\n");String cSize="(" + Utils.sum(m_ClusterSizes) + ")";temp.append(pad(cSize," ",maxAttWidth + maxWidth + 1 - cSize.length(),true));for (int i=0; i < m_NumClusters; i++) {cSize="(" + m_ClusterSizes[i] + ")";temp.append(pad(cSize," ",maxWidth + 1 - cSize.length(),true));}temp.append("\n");temp.append(pad("","=",maxAttWidth + (maxWidth * (m_ClusterCentroids.numInstances() + 1) + m_ClusterCentroids.numInstances() + 1),true));temp.append("\n");for (int i=0; i < m_ClusterCentroids.numAttributes(); i++) {String attName=m_ClusterCentroids.attribute(i).name();temp.append(attName);for (int j=0; j < maxAttWidth - attName.length(); j++) {temp.append(" ");}String strVal;String valMeanMode;if (m_ClusterCentroids.attribute(i).isNominal()) {if (m_FullMeansOrMediansOrModes[i] == -1) {valMeanMode=pad("missing"," ",maxWidth + 1 - "missing".length(),true);} else {valMeanMode=pad((strVal=m_ClusterCentroids.attribute(i).value((int)m_FullMeansOrMediansOrModes[i]))," ",maxWidth + 1 - strVal.length(),true);}} else {if (Double.isNaN(m_FullMeansOrMediansOrModes[i])) {valMeanMode=pad("missing"," ",maxWidth + 1 - "missing".length(),true);} else {valMeanMode=pad((strVal=Utils.doubleToString(m_FullMeansOrMediansOrModes[i],maxWidth,4).trim())," ",maxWidth + 1 - strVal.length(),true);}}temp.append(valMeanMode);for (int j=0; j < m_NumClusters; j++) {if (m_ClusterCentroids.attribute(i).isNominal()) {if (m_ClusterCentroids.instance(j).isMissing(i)) {valMeanMode=pad("missing"," ",maxWidth + 1 - "missing".length(),true);} else {valMeanMode=pad((strVal=m_ClusterCentroids.attribute(i).value((int)m_ClusterCentroids.instance(j).value(i)))," ",maxWidth + 1 - strVal.length(),true);}} else {if (m_ClusterCentroids.instance(j).isMissing(i)) {valMeanMode=pad("missing"," ",maxWidth + 1 - "missing".length(),true);} else {valMeanMode=pad((strVal=Utils.doubleToString(m_ClusterCentroids.instance(j).value(i),maxWidth,4).trim())," ",maxWidth + 1 - strVal.length(),true);}}temp.append(valMeanMode);}temp.append("\n");if (m_displayStdDevs) {String stdDevVal="";if (m_ClusterCentroids.attribute(i).isNominal()) {Attribute a=m_ClusterCentroids.attribute(i);for (int j=0; j < a.numValues(); j++) {String val="  " + a.value(j);temp.append(pad(val," ",maxAttWidth + 1 - val.length(),false));int count=m_FullNominalCounts[i][j];int percent=(int)((double)m_FullNominalCounts[i][j] / Utils.sum(m_ClusterSizes) * 100.0);String percentS="" + percent + "%)";percentS=pad(percentS," ",5 - percentS.length(),true);stdDevVal="" + count + " ("+ percentS;stdDevVal=pad(stdDevVal," ",maxWidth + 1 - stdDevVal.length(),true);temp.append(stdDevVal);for (int k=0; k < m_NumClusters; k++) {count=m_ClusterNominalCounts[k][i][j];percent=(int)((double)m_ClusterNominalCounts[k][i][j] / m_ClusterSizes[k] * 100.0);percentS="" + percent + "%)";percentS=pad(percentS," ",5 - percentS.length(),true);stdDevVal="" + count + " ("+ percentS;stdDevVal=pad(stdDevVal," ",maxWidth + 1 - stdDevVal.length(),true);temp.append(stdDevVal);}temp.append("\n");}if (m_FullMissingCounts[i] > 0) {temp.append(pad("  missing"," ",maxAttWidth + 1 - "  missing".length(),false));int count=m_FullMissingCounts[i];int percent=(int)((double)m_FullMissingCounts[i] / Utils.sum(m_ClusterSizes) * 100.0);String percentS="" + percent + "%)";percentS=pad(percentS," ",5 - percentS.length(),true);stdDevVal="" + count + " ("+ percentS;stdDevVal=pad(stdDevVal," ",maxWidth + 1 - stdDevVal.length(),true);temp.append(stdDevVal);for (int k=0; k < m_NumClusters; k++) {count=m_ClusterMissingCounts[k][i];percent=(int)((double)m_ClusterMissingCounts[k][i] / m_ClusterSizes[k] * 100.0);percentS="" + percent + "%)";percentS=pad(percentS," ",5 - percentS.length(),true);stdDevVal="" + count + " ("+ percentS;stdDevVal=pad(stdDevVal," ",maxWidth + 1 - stdDevVal.length(),true);temp.append(stdDevVal);}temp.append("\n");}temp.append("\n");} else {if (Double.isNaN(m_FullMeansOrMediansOrModes[i])) {stdDevVal=pad("--"," ",maxAttWidth + maxWidth + 1 - 2,true);} else {stdDevVal=pad((strVal=plusMinus + Utils.doubleToString(m_FullStdDevs[i],maxWidth,4).trim())," ",maxWidth + maxAttWidth + 1 - strVal.length(),true);}temp.append(stdDevVal);for (int j=0; j < m_NumClusters; j++) {if (m_ClusterCentroids.instance(j).isMissing(i)) {stdDevVal=pad("--"," ",maxWidth + 1 - 2,true);} else {stdDevVal=pad((strVal=plusMinus + Utils.doubleToString(m_ClusterStdDevs.instance(j).value(i),maxWidth,4).trim())," ",maxWidth + 1 - strVal.length(),true);}temp.append(stdDevVal);}temp.append("\n\n");}}}temp.append("\n\n");return temp.toString();}  }
class C{  @Override public void run(){  try {    doRun();  }  finally {  }}  }
class C{  private Geometry createValidArea(Geometry roughAreaGeom){  return roughAreaGeom.buffer(0.0);}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx >> 1;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  public PositionBasedCompletionProposal(String replacementString,Position replacementPosition,int cursorPosition){  this(replacementString,replacementPosition,cursorPosition,null,null,null,null);}  }
class C{  @SuppressWarnings("unchecked") public CompositeComparator(Comparator<? super T> comparator1,Comparator<? super T> comparator2,Comparator<? super T> comparator3){  this(new Comparator[]{comparator1,comparator2,comparator3});}  }
class C{  public static void main(String[] args){  int size;  HashSet collection=new HashSet();  String str1="Yellow", str2="White", str3="Green", str4="Blue";  if (true)   System.out.println("True");  Iterator iterator;  if (true)   System.out.println("True");  collection.add(str1);  collection.add(str2);  collection.add(str3);  collection.add(str4);  iterator=collection.iterator();  while (iterator.hasNext()) {    System.out.print(iterator.next() + " ");  }}  }
class C{  public static void write(File file,String text,String charset) throws IOException {  write(file,text,charset,false);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int portNum=getInt(stack);  String prettyirdev=getString(stack);  return Boolean.valueOf(getCapDevInput(stack).setTuningPluginAndPort(SFIRTuner.getFileForPrettyDeviceName(prettyirdev),portNum));}  }
class C{  public boolean writeEvidences(final ArrayList<byte[]> byteList){  int totalLen=0;  for (  byte[] bs : byteList) {    totalLen+=bs.length;  }  final int offset=0;  final byte[] buffer=new byte[totalLen];  final DataBuffer databuffer=new DataBuffer(buffer,0,totalLen);  for (  byte[] bs : byteList) {    databuffer.write(bs);  }  return writeEvidence(buffer);}  }
class C{  public Todo_Deleter idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  protected HSSFRichTextString escapeColumnValue(final Object rawValue){  if (rawValue == null) {    return null;  }  String returnString=ObjectUtils.toString(rawValue);  returnString=StringEscapeUtils.escapeJava(StringUtils.trimToEmpty(returnString));  returnString=StringUtils.replace(StringUtils.trim(returnString),"\\t","    ");  returnString=StringUtils.replace(StringUtils.trim(returnString),"\\r"," ");  returnString=StringEscapeUtils.unescapeJava(returnString);  returnString=removeHtmlTagsAndSpaces(returnString);  return new HSSFRichTextString(returnString);}  }
class C{  public void message(String message){  bot.sendIRC().message(serverUser.getNick(),message);}  }
class C{  public static OutputAnalyzer executeCommand(ProcessBuilder pb) throws Throwable {  String cmdLine=pb.command().stream().collect(Collectors.joining(" "));  System.out.println("Command line: [" + cmdLine + "]");  OutputAnalyzer analyzer=ProcessTools.executeProcess(pb);  System.out.println(analyzer.getOutput());  return analyzer;}  }
class C{  public final static Point[] lineSegments(Point pt1,Point pt2,int n,boolean include_last){  Point v=new Point(pt2.x - pt1.x,pt2.y - pt1.y);  int end=include_last ? n + 1 : n;  Point[] ret_val=new Point[end];  float inc=1f / (float)n;  float t=inc;  ret_val[0]=pt1;  for (int i=1; i < end; i++, t+=inc) {    ret_val[i]=new Point(pt1.x + (int)((float)v.x * t),pt1.y + (int)((float)v.y * t));  }  return ret_val;}  }
class C{  public Boolean isPclmulqdq(){  return pclmulqdq;}  }
class C{  public FgsMbRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  protected Map<String,Double> loadNRC() throws FileNotFoundException {  Map<String,Double> lexiMap=new HashMap<String,Double>();  File file=new File("resources/lexi/NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    if (line.length == 3) {      if (line[1].equals("negative") && line[2].equals("1")) {        lexiMap.put(line[0],-1.0);      } else {        if (line[1].equals("positive") && line[2].equals("1")) {          lexiMap.put(line[0],1.0);        }      }    }  }  scanner.close();  return lexiMap;}  }
class C{  public void triggerJob(JobKey jobKey) throws SchedulerException {  triggerJob(jobKey,null);}  }
class C{  protected void tearDown(){}  }
class C{  String sourceFormForAnnotation(AnnotationMirror annotationMirror){  StringBuilder sb=new StringBuilder();  new AnnotationSourceFormVisitor().visitAnnotation(annotationMirror,sb);  return sb.toString();}  }
class C{  protected RTextAreaUI createRTextAreaUI(){  return new RTextAreaUI(this);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MRfQResponseLineQty) {    MRfQResponseLineQty cmp=(MRfQResponseLineQty)obj;    if (!cmp.isValidAmt() || !isValidAmt())     return false;    BigDecimal cmpNet=cmp.getNetAmt();    if (cmpNet == null)     return false;    BigDecimal net=cmp.getNetAmt();    if (net == null)     return false;    return cmpNet.compareTo(net) == 0;  }  return false;}  }
class C{  public TextResult(Bundle bundle){  mExpectedResult=bundle.getString("expectedTextualResult");  mExpectedResultPath=bundle.getString("expectedTextualResultPath");  mActualResult=bundle.getString("actualTextualResult");  setAdditionalTextOutputString(bundle.getString("additionalTextOutputString"));  mRelativePath=bundle.getString("relativePath");  mDidTimeOut=bundle.getBoolean("didTimeOut");}  }
class C{  public Mat22(final Vec2 c1,final Vec2 c2){  ex=c1.clone();  ey=c2.clone();}  }
class C{  private static void findEntryExitNodes(final Collection<FunctionBlock> passedFunctions,final Map<BasicBlock,ViewNode> nodeMap,final Map<ViewNode,Function> functionMap,final Map<Function,ViewNode> entryNodes,final ArrayListMultimap<Function,ViewNode> exitNodes){  for (  final FunctionBlock functionBlock : passedFunctions) {    final Function function=functionBlock.getFunction();    if (function.getType() != FunctionType.Import) {      entryNodes.put(function,nodeMap.get(findEntryNode(function)));      for (      final BasicBlock block : findExitNode(function.getGraph())) {        exitNodes.put(function,nodeMap.get(block));      }    }  }  for (  final Map.Entry<ViewNode,Function> p : functionMap.entrySet()) {    final Function function=p.getValue();    if (function.getType() == FunctionType.Import) {      final ViewNode node=p.getKey();      entryNodes.put(function,node);      exitNodes.put(function,node);    }  }}  }
class C{  public static <T extends IIdentifyable>List<T> checkIds(@NonNull List<T> items){  for (int i=0, size=items.size(); i < size; i++) {    checkId(items.get(i));  }  return items;}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getSource().equals(this)) {    if (!timer.isRunning()) {      animationStartTime=System.nanoTime() / 1000000;      this.setText("Stop Animation");      timer.start();    } else {      timer.stop();      this.setText("Start Animation");      alpha=1.0f;    }  } else {    long currentTime=System.nanoTime() / 1000000;    long totalTime=currentTime - animationStartTime;    if (totalTime > animationDuration) {      animationStartTime=currentTime;    }    float fraction=(float)totalTime / animationDuration;    fraction=Math.min(1.0f,fraction);    alpha=Math.abs(1 - (2 * fraction));    repaint();  }}  }
class C{  @Override public void write(URI f,URIChooser fc) throws IOException {  Drawing drawing=view.getDrawing();  OutputFormat outputFormat=drawing.getOutputFormats().get(0);  outputFormat.write(f,drawing);}  }
class C{  public TabixLineReader(File input,TabixIndexReader tir,RegionRestriction region) throws IOException {  this(new SingleRestrictionLineReader(input,tir,region));}  }
class C{  public static byte[] readHttpRequestBody(HttpExchange exchange){  int contentLength=Integer.parseInt(exchange.getRequestHeaders().getFirst(CONTENT_LENGTH));  if (contentLength <= 0) {    LOG.log(Level.SEVERE,"Failed to read content length http request body: " + contentLength);    return new byte[0];  }  byte[] requestBody=new byte[contentLength];  InputStream is=exchange.getRequestBody();  try {    int off=0;    int bRead=0;    while (off != (contentLength - 1) && (bRead=is.read(requestBody,off,contentLength - off)) != -1) {      off+=bRead;    }  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to read http request body: ",e);    return new byte[0];  } finally {    try {      is.close();    } catch (    IOException e) {      LOG.log(Level.SEVERE,"Failed to close InputStream: ",e);      return new byte[0];    }  }  return requestBody;}  }
class C{  public static NSObject parse(String filePath) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  return parse(new File(filePath));}  }
class C{  public static IStub CreateStub(IDownloaderService itf){  return new Stub(itf);}  }
class C{  public BlockFactory(Context context,int[] blockSourceIds){  this(context);  if (blockSourceIds != null) {    for (int i=0; i < blockSourceIds.length; i++) {      addBlocks(blockSourceIds[i]);    }  }}  }
class C{  private View fillUp(int pos,int nextBottom){  View selectedView=null;  int end=0;  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end=mListPadding.top;  }  while (nextBottom > end && pos >= 0) {    boolean selected=pos == mSelectedPosition;    View child=makeAndAddView(pos,nextBottom,false,mListPadding.left,selected);    nextBottom=child.getTop() - mDividerHeight;    if (selected) {      selectedView=child;    }    pos--;  }  mFirstPosition=pos + 1;  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);  return selectedView;}  }
class C{  public AnimatedFlowContainer(Duration duration,Function<io.datafx.controller.flow.container.AnimatedFlowContainer,List<KeyFrame>> animationProducer){  this.root=new StackPane();  this.duration=duration;  this.animationProducer=animationProducer;  placeholder=new ImageView();  placeholder.setPreserveRatio(true);  placeholder.setSmooth(true);}  }
class C{  @Override protected void closeDialogOk(){  somPanel.commitChanges();  SOMGroup som=(SOMGroup)somPanel.getGroup();  layoutPanel.commitChanges();  som.setLayout(layoutPanel.getCurrentLayout());  som.applyLayout();  som.offset(networkPanel.getWhereToAdd().getX(),networkPanel.getWhereToAdd().getY());  networkPanel.getNetwork().addGroup(som);  super.closeDialogOk();}  }
class C{  public ConfigurationHTTPAdapter configureFromString(String xml) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from string");  }  try {    InputSource source=new InputSource(new StringReader(xml));    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();    builderFactory.setNamespaceAware(true);    Document doc=builderFactory.newDocumentBuilder().parse(source);    ConfigurationHTTPAdapterParser.doConfigure(this,doc);    return this;  } catch (  IOException ioe) {    throw new RuntimeException("could not configure from String: " + ioe.getMessage(),ioe);  }catch (  SAXException e) {    throw new RuntimeException("could not configure from String: " + e.getMessage(),e);  }catch (  ParserConfigurationException e) {    throw new RuntimeException("could not configure from String: " + e.getMessage(),e);  }}  }
class C{  private boolean hasItems(Collection<? extends Object> col){  return col != null && !col.isEmpty();}  }
class C{  public ResultMatrixSignificance(){  this(1,1);}  }
class C{  static List<S3ObjectSummary> listObjectsLexicographically(AmazonS3Client s3Client,S3ConfigBean s3ConfigBean,AntPathMatcher pathMatcher,AmazonS3Source.S3Offset s3Offset,int fetchSize){  List<S3ObjectSummary> list=new ArrayList<>(fetchSize);  ListObjectsRequest listObjectsRequest=new ListObjectsRequest();  listObjectsRequest.setBucketName(s3ConfigBean.s3Config.bucket);  listObjectsRequest.setPrefix(s3ConfigBean.s3Config.commonPrefix);  listObjectsRequest.setMaxKeys(BATCH_SIZE);  if (s3Offset.getKey() != null) {    listObjectsRequest.setMarker(s3Offset.getKey());  }  ObjectListing objectListing=s3Client.listObjects(listObjectsRequest);  while (true) {    for (    S3ObjectSummary s : objectListing.getObjectSummaries()) {      String fullPrefix=s.getKey();      String remainingPrefix=fullPrefix.substring(s3ConfigBean.s3Config.commonPrefix.length(),fullPrefix.length());      if (!remainingPrefix.isEmpty()) {        if (pathMatcher.match(s3ConfigBean.s3FileConfig.prefixPattern,remainingPrefix)) {          list.add(s);        }        if (list.size() == fetchSize) {          return list;        }      }    }    if (!objectListing.isTruncated()) {      break;    }    objectListing=s3Client.listNextBatchOfObjects(objectListing);  }  return list;}  }
class C{  public static SelectionJavaElementResolver from(Collection<?> adaptables){  return new SelectionJavaElementResolver(adaptables);}  }
class C{  private void doneLoading(boolean isPlaying){  loadCompleted();  updatePlayPauseImage(isPlaying);}  }
class C{  private int quantize(int[] pixel){  return (int)((int)(pixel[0] / quantH) * (quantV_f) * (quantS_f) + (int)(pixel[1] / quantS) * (quantV_f) + (int)(pixel[2] / quantV));}  }
class C{  @Override public void perform(IR ir){  HashMap<Register,ConstantOperand> info=new HashMap<Register,ConstantOperand>();  boolean runBranchOpts=false;  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    if (bb.isEmpty())     continue;    container.counter2++;    if (bb.getInfrequent()) {      container.counter1++;      if (ir.options.FREQ_FOCUS_EFFORT)       continue;    }    for (Instruction s=bb.firstRealInstruction(), next, sentinel=bb.lastInstruction(); s != sentinel; s=next) {      next=s.nextInstructionInCodeOrder();      if (!info.isEmpty()) {        int numUses=s.getNumberOfPureUses();        if (numUses > 0) {          boolean didSomething=false;          int numDefs=s.getNumberOfDefs();          for (int idx=numDefs; idx < numUses + numDefs; idx++) {            Operand use=s.getOperand(idx);            if (use instanceof RegisterOperand) {              RegisterOperand rUse=(RegisterOperand)use;              Operand value=info.get(rUse.getRegister());              if (value != null) {                didSomething=true;                s.putOperand(idx,value.copy());              }            }          }          if (didSomething) {            Simplifier.simplify(ir.isHIR(),ir.regpool,ir.options,s);          }        }        for (Enumeration<Operand> e=s.getDefs(); e.hasMoreElements(); ) {          Operand def=e.nextElement();          if (def != null) {            Register defReg=((RegisterOperand)def).getRegister();            info.remove(defReg);          }        }      }      if (Move.conforms(s) && Move.getVal(s).isConstant()) {        info.put(Move.getResult(s).getRegister(),(ConstantOperand)Move.getVal(s));      }    }    info.clear();    runBranchOpts|=BranchSimplifier.simplify(bb,ir);  }  if (runBranchOpts) {    new BranchOptimizations(0,true,false,false).perform(ir);  }}  }
class C{  public HotwashPanel(){  create();}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null)   displayFrame.dispose();  displayFrame=null;  display=null;}  }
class C{  public <R1>FluentFunction<T,R1> matches(final Function<CheckValue1<R,R1>,CheckValue1<R,R1>> case1,final Supplier<? extends R1> otherwise){  return FluentFunctions.of(null);}  }
class C{  public void checkState(){  assertNotNull(appCtx);}  }
class C{  public String toString(){  return "IndexedParent, index = " + getIndex() + ", lag = "+ getLag();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemreturnnodevalue.class,args);}  }
class C{  public void deleteSnapshotSchedule(String id) throws IsilonException {  try {    id=URLEncoder.encode(id,"UTF-8");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  deleteSnapshotSchedule(_baseUrl.resolve(URI_SNAPSHOT_SCHEDULES + "/" + id));}  }
class C{  private String evaluate(String expression){  try {    String result=(String)xPath.evaluate(expression,document,XPathConstants.STRING);    if (result.isEmpty()) {      result=null;    }    return result;  } catch (  XPathExpressionException e) {    throw new IllegalStateException(e);  }}  }
class C{  public boolean isRunAsSuperUser(){  return runAsSuperUser;}  }
class C{  public static void main(String[] argv){  runFilter(new MergeTwoValues(),argv);}  }
class C{  protected ConnAdapter(PoolEntry entry,HttpRoute route){  super(SingleClientConnManager.this,entry);  markReusable();  entry.route=route;}  }
class C{  public A[] toArray(A[] vec){  int i=0;  List<A> l=this;  while (l.nonEmpty() && i < vec.length) {    vec[i]=l.head;    l=l.tail;    i++;  }  return vec;}  }
class C{  public void addElement(AstNode element){  assertNotNull(element);  if (elements == null)   elements=new ArrayList<AstNode>();  elements.add(element);  element.setParent(this);}  }
class C{  @Override public DriverTask createVolumeSnapshot(List<VolumeSnapshot> snapshots,StorageCapabilities capabilities){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_CREATE_SNAPSHOT_VOLUMES);  return snapshotHelper.createVolumeSnapshot(snapshots,capabilities,task,this.driverRegistry);}  }
class C{  public EntityClassifier<C> replaceRule(String attName,String attValue,C eclass){  EntityClassifier<C> newClassifier=new EntityClassifier<C>();  newClassifier.setDefaultEntityClass(eclass);  for (  RuleGroup<C> rg : rules) {    if (attName.equals(rg.attName)) {      if (attValue == null) {        if (rg.defaultSubClassifier != null) {          rg.defaultSubClassifier=newClassifier;          return newClassifier;        }      } else {        for (        Rule<C> rule : rg.attValueRules) {          if (attValue.equals(rule.attValue)) {            rule.subClassifier=newClassifier;            return newClassifier;          }        }      }    }  }  return null;}  }
class C{  static int mysqlToJavaType(int mysqlType){  int jdbcType;switch (mysqlType) {case MysqlDefs.FIELD_TYPE_NEW_DECIMAL:case MysqlDefs.FIELD_TYPE_DECIMAL:    jdbcType=Types.DECIMAL;  break;case MysqlDefs.FIELD_TYPE_TINY:jdbcType=Types.TINYINT;break;case MysqlDefs.FIELD_TYPE_SHORT:jdbcType=Types.SMALLINT;break;case MysqlDefs.FIELD_TYPE_LONG:jdbcType=Types.INTEGER;break;case MysqlDefs.FIELD_TYPE_FLOAT:jdbcType=Types.REAL;break;case MysqlDefs.FIELD_TYPE_DOUBLE:jdbcType=Types.DOUBLE;break;case MysqlDefs.FIELD_TYPE_NULL:jdbcType=Types.NULL;break;case MysqlDefs.FIELD_TYPE_TIMESTAMP:jdbcType=Types.TIMESTAMP;break;case MysqlDefs.FIELD_TYPE_LONGLONG:jdbcType=Types.BIGINT;break;case MysqlDefs.FIELD_TYPE_INT24:jdbcType=Types.INTEGER;break;case MysqlDefs.FIELD_TYPE_DATE:jdbcType=Types.DATE;break;case MysqlDefs.FIELD_TYPE_TIME:jdbcType=Types.TIME;break;case MysqlDefs.FIELD_TYPE_DATETIME:jdbcType=Types.TIMESTAMP;break;case MysqlDefs.FIELD_TYPE_YEAR:jdbcType=Types.DATE;break;case MysqlDefs.FIELD_TYPE_NEWDATE:jdbcType=Types.DATE;break;case MysqlDefs.FIELD_TYPE_ENUM:jdbcType=Types.CHAR;break;case MysqlDefs.FIELD_TYPE_SET:jdbcType=Types.CHAR;break;case MysqlDefs.FIELD_TYPE_TINY_BLOB:jdbcType=Types.VARBINARY;break;case MysqlDefs.FIELD_TYPE_MEDIUM_BLOB:jdbcType=Types.LONGVARBINARY;break;case MysqlDefs.FIELD_TYPE_LONG_BLOB:jdbcType=Types.LONGVARBINARY;break;case MysqlDefs.FIELD_TYPE_BLOB:jdbcType=Types.LONGVARBINARY;break;case MysqlDefs.FIELD_TYPE_VAR_STRING:case MysqlDefs.FIELD_TYPE_VARCHAR:jdbcType=Types.VARCHAR;break;case MysqlDefs.FIELD_TYPE_STRING:jdbcType=Types.CHAR;break;case MysqlDefs.FIELD_TYPE_GEOMETRY:jdbcType=Types.BINARY;break;case MysqlDefs.FIELD_TYPE_BIT:jdbcType=Types.BIT;break;default :jdbcType=Types.VARCHAR;}return jdbcType;}  }
class C{  public void registerListener(TrackDataListener listener,EnumSet<TrackDataType> trackDataTypes){  if (listenerToTypesMap.containsKey(listener)) {    Log.w(TAG,"Tried to register a listener that is already registered. Ignore.");    return;  }  listenerToTypesMap.put(listener,trackDataTypes);  for (  TrackDataType trackDataType : trackDataTypes) {    typeToListenersMap.get(trackDataType).add(listener);  }}  }
class C{  public static int intersectionSize(long x,long y){  return Long.bitCount(x & y);}  }
class C{  protected static final List<CView> processQueryResults(final ResultSet resultSet,final INaviModule module,final Map<Integer,Set<CTag>> tags,final ITagManager nodeTagManager,final SQLProvider provider,final List<CView> views,final ViewType viewType,final GraphType graphType) throws SQLException {  final Map<Integer,Set<CTag>> nodeTagMap=getNodeTags(provider.getConnection(),module,nodeTagManager);  try {    while (resultSet.next()) {      final int viewId=resultSet.getInt("view_id");      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final String description=PostgreSQLHelpers.readString(resultSet,"description");      final Timestamp creationDate=resultSet.getTimestamp("creation_date");      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");      final boolean starState=resultSet.getBoolean("stared");      final int nodeCount=resultSet.getInt("bbcount");      final int edgeCount=resultSet.getInt("edgecount");      final Set<CTag> viewTags=tags.containsKey(viewId) ? tags.get(viewId) : new HashSet<CTag>();      final Set<CTag> nodeTags=nodeTagMap.containsKey(viewId) ? nodeTagMap.get(viewId) : new HashSet<CTag>();      final CModuleViewGenerator generator=new CModuleViewGenerator(provider,module);      views.add(generator.generate(viewId,name,description,viewType,graphType,creationDate,modificationDate,nodeCount,edgeCount,viewTags,nodeTags,starState));    }    return views;  }  finally {    resultSet.close();  }}  }
class C{  public void minusEquals(double a){  real-=a;}  }
class C{  protected boolean redirectEdges(V from,V newStart,V newEnd){  if (!(containsVertex(from) && containsVertex(newStart) && containsVertex(newEnd)))   throw new IllegalArgumentException("expect all given nodes to be present in this graph");  if (!redirectIncomingEdges(from,newStart))   return false;  if (!redirectOutgoingEdges(from,newEnd))   return false;  return true;}  }
class C{  private void toggleSelection(int position){  adapter.toggleSelection(position);  int count=adapter.getSelectedItemCount();  if (count == 0) {    actionMode.finish();  } else {    actionMode.setTitle(String.valueOf(count));    actionMode.invalidate();  }}  }
class C{  public static <V>String replace(final Object source,final Map<String,V> valueMap,final String prefix,final String suffix){  return new StrSubstitutor(valueMap,prefix,suffix).replace(source);}  }
class C{  private List<VolumeDescriptor> createBackendVolumeMigrationDescriptors(StorageSystem vplexSystem,Volume virtualVolume,Volume sourceVolume,VirtualArray varray,VirtualPool vpool,Long capacity,String taskId,List<Recommendation> recommendations,boolean isHA,VirtualPoolCapabilityValuesWrapper capabilities){  URI sourceVolumeURI=null;  Project targetProject=null;  String targetLabel=null;  if (sourceVolume != null) {    sourceVolumeURI=sourceVolume.getId();    targetProject=_dbClient.queryObject(Project.class,sourceVolume.getProject().getURI());    targetLabel=sourceVolume.getLabel();    if (!targetLabel.endsWith(MIGRATION_LABEL_SUFFIX)) {      targetLabel+=MIGRATION_LABEL_SUFFIX;    } else {      targetLabel=targetLabel.substring(0,targetLabel.length() - 1);    }  } else {    targetProject=getVplexProject(vplexSystem,_dbClient,_tenantsService);    targetLabel=virtualVolume.getLabel();    if (virtualVolume.getVirtualArray().equals(varray.getId())) {      targetLabel+=SRC_BACKEND_VOL_LABEL_SUFFIX;    } else {      targetLabel+=HA_BACKEND_VOL_LABEL_SUFFIX;    }  }  Set<URI> requestedVPlexSystems=new HashSet<URI>();  requestedVPlexSystems.add(vplexSystem.getId());  URI cgURI=null;  if (capabilities != null) {    final BlockConsistencyGroup consistencyGroup=capabilities.getBlockConsistencyGroup() == null ? null : _dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());    if ((consistencyGroup != null) && ((!consistencyGroup.created()) || (consistencyGroup.getTypes().contains(Types.LOCAL.toString())))) {      cgURI=consistencyGroup.getId();    }  } else {    capabilities=new VirtualPoolCapabilityValuesWrapper();    capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,capacity);    capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  }  boolean premadeRecs=false;  if (recommendations == null || recommendations.isEmpty()) {    recommendations=getBlockScheduler().scheduleStorage(varray,requestedVPlexSystems,null,vpool,false,null,null,capabilities,targetProject,VpoolUse.ROOT,new HashMap<VpoolUse,List<Recommendation>>());    if (recommendations.isEmpty()) {      throw APIException.badRequests.noStorageFoundForVolumeMigration(vpool.getLabel(),varray.getLabel(),sourceVolumeURI);    }    s_logger.info("Got recommendation");  } else {    premadeRecs=true;  }  int recIndex=(premadeRecs && isHA) ? 1 : 0;  URI targetStorageSystem=recommendations.get(recIndex).getSourceStorageSystem();  URI targetStoragePool=recommendations.get(recIndex).getSourceStoragePool();  Volume targetVolume=prepareVolumeForRequest(capacity,targetProject,varray,vpool,targetStorageSystem,targetStoragePool,targetLabel,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME,taskId,_dbClient);  if (cgURI == null) {    if ((sourceVolume != null) && (!NullColumnValueGetter.isNullURI(sourceVolume.getConsistencyGroup()))) {      cgURI=sourceVolume.getConsistencyGroup();      targetVolume.setConsistencyGroup(cgURI);    }  }  if ((sourceVolume != null) && NullColumnValueGetter.isNotNullValue(sourceVolume.getReplicationGroupInstance())) {    targetVolume.setReplicationGroupInstance(sourceVolume.getReplicationGroupInstance());  }  if ((sourceVolume != null) && NullColumnValueGetter.isNotNullValue(sourceVolume.getRpCopyName())) {    targetVolume.setRpCopyName(sourceVolume.getRpCopyName());  }  if ((sourceVolume != null) && NullColumnValueGetter.isNotNullValue(sourceVolume.getInternalSiteName())) {    targetVolume.setInternalSiteName(sourceVolume.getInternalSiteName());  }  targetVolume.addInternalFlags(Flag.INTERNAL_OBJECT);  _dbClient.updateObject(targetVolume);  s_logger.info("Prepared volume {}",targetVolume.getId());  URI targetVolumeURI=targetVolume.getId();  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  descriptors.add(new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,targetStorageSystem,targetVolumeURI,targetStoragePool,cgURI,capabilities,capacity));  Migration migration=prepareMigration(virtualVolume.getId(),sourceVolumeURI,targetVolumeURI,taskId);  descriptors.add(new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_MIGRATE_VOLUME,targetStorageSystem,targetVolumeURI,targetStoragePool,cgURI,migration.getId(),capabilities));  s_logger.info("Prepared migration {}.",migration.getId());  return descriptors;}  }
class C{  public boolean isPretty(){  return pretty;}  }
class C{  protected boolean isBlockedLink(Link l){  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  return (isBlockedPort(n1) || isBlockedPort(n2));}  }
class C{  protected TestedProjectImpl(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexequalzero.class,args);}  }
class C{  private static void matchJcmdCommands(OutputAnalyzer output) throws Exception {  int matchedCount=output.shouldMatchByLine(JCMD_COMMAND_REGEX,"help",JCMD_COMMAND_REGEX);  assertGreaterThan(matchedCount,0,"Found no lines matching pattern: " + JCMD_COMMAND_REGEX);}  }
class C{  public boolean isPresent(){  return value != null;}  }
class C{  private MonitorTriggerEvent createEvent(Trigger t,Statistic globalStat){  MonitorTriggerEvent event=new MonitorTriggerEvent();  event.setAppId(this.appId);  event.setTriggerId(t.getTriggerId());  event.setMetricValue(globalStat.getValue());  event.setTimeStamp(System.currentTimeMillis());  event.setTrigger(t);  event.setMetricType(t.getMetric());  return event;}  }
class C{  public ImageException(String message,ImageExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  @Override public int[] executeBatch() throws SQLException {  try {    debugCodeCall("executeBatch");    if (batchParameters == null) {      batchParameters=New.arrayList();    }    int size=batchParameters.size();    int[] result=new int[size];    boolean error=false;    SQLException next=null;    checkClosedForWrite();    try {      for (int i=0; i < size; i++) {        Value[] set=batchParameters.get(i);        ArrayList<? extends ParameterInterface> parameters=command.getParameters();        for (int j=0; j < set.length; j++) {          Value value=set[j];          ParameterInterface param=parameters.get(j);          param.setValue(value,false);        }        try {          result[i]=executeUpdateInternal();        } catch (        Exception re) {          SQLException e=logAndConvert(re);          if (next == null) {            next=e;          } else {            e.setNextException(next);            next=e;          }          result[i]=Statement.EXECUTE_FAILED;          error=true;        }      }      batchParameters=null;      if (error) {        JdbcBatchUpdateException e=new JdbcBatchUpdateException(next,result);        throw e;      }      return result;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String normalizeSystemName(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String nName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    nName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    nName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  }  return nName;}  }
class C{  public static AsyncCreateInstance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncCreateInstance object=new AsyncCreateInstance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"asyncCreateInstance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (AsyncCreateInstance)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","request").equals(reader.getName())) {      object.setRequest(org.oscm.xsd.InstanceRequest.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void addCardToTable(MyCard c){  GameTableViews.addCard(c.id,c);  if (c.pile == MyCard.MONEYPILE)   moneyPile.addCard(c); else   if (c.pile == MyCard.VPPILE)   vpPile.addCard(c); else   if (c.pile == MyCard.SUPPLYPILE)   supplyPile.addCard(c); else   if (c.pile == MyCard.PRIZEPILE)   prizePile.addCard(c); else   if (c.pile == MyCard.NON_SUPPLY_PILE)   nonSupplyPile.addCard(c);}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public int indexOf(char c,int fromIndex){  if (_data != null) {    for (int i=MathLib.max(fromIndex,0); i < _count; i++) {      if (_data[i] == c)       return i;    }    return -1;  } else {    final int cesure=_head._count;    if (fromIndex < cesure) {      final int headIndex=_head.indexOf(c,fromIndex);      if (headIndex >= 0)       return headIndex;    }    final int tailIndex=_tail.indexOf(c,fromIndex - cesure);    return (tailIndex >= 0) ? tailIndex + cesure : -1;  }}  }
class C{  @Override public WebTarget path(String path){  if (!path.isEmpty()) {    return new MSF4JWebTarget(client,uri.resolve((path.startsWith(PATH_SEPARATOR)) ? path : PATH_SEPARATOR + path),providerComponents);  } else {    return new MSF4JWebTarget(client,uri,providerComponents);  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  return success;}  }
class C{  private String simpleClassName(Object o){  return (o == null) ? "null" : o.getClass().getName().replaceFirst(".*\\.","");}  }
class C{  public static Map<String,Integer> sequenceToIds(Reader input) throws IOException {  final Map<String,Integer> ret=new HashMap<>();  try (BufferedReader mergedReader=new BufferedReader(input)){    String line;    while ((line=mergedReader.readLine()) != null) {      if (line.startsWith("#") || line.length() == 0) {        continue;      }      final String[] parts=StringUtils.split(line,'\t');      if (parts.length != 2) {        throw new IOException("Malformed line: " + line);      }      final String name;      final int indexOfSpace=parts[1].indexOf(' ');      if (indexOfSpace != -1) {        name=parts[1].substring(0,indexOfSpace);      } else {        name=parts[1];      }      final int taxId;      try {        taxId=Integer.parseInt(parts[0]);      } catch (      NumberFormatException e) {        throw new IOException("Malformed line: " + line);      }      if (ret.put(new String(name.toCharArray()),taxId) != null) {        throw new IOException("Duplicate name detected: " + line);      }    }  }   return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isGettingPowered(World world,Coord4D coord){  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {    Coord4D sideCoord=coord.getFromSide(side);    if (sideCoord.exists(world) && sideCoord.getFromSide(side).exists(world)) {      Block block=sideCoord.getBlock(world);      boolean weakPower=block.shouldCheckWeakPower(world,coord.xCoord,coord.yCoord,coord.zCoord,side.ordinal());      if (weakPower && isDirectlyGettingPowered(world,sideCoord)) {        return true;      } else       if (!weakPower && block.isProvidingWeakPower(world,sideCoord.xCoord,sideCoord.yCoord,sideCoord.zCoord,side.ordinal()) > 0) {        return true;      }    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.045 -0500",hash_original_method="92AAFAE1121490A2E461EB88A6DC741C",hash_generated_method="7F5D5393B4EA764BDC990A4E8D36D27D") protected void fill() throws IOException {  checkClosed();  if (nativeEndBufSize > 0) {    ZipFile.RAFStream is=(ZipFile.RAFStream)in;synchronized (is.mSharedRaf) {      long len=is.mLength - is.mOffset;      if (len > nativeEndBufSize)       len=nativeEndBufSize;      int cnt=inf.setFileInput(is.mSharedRaf.getFD(),is.mOffset,nativeEndBufSize);      is.skip(cnt);    }  } else {    if ((len=in.read(buf)) > 0) {      inf.setInput(buf,0,len);    }  }}  }
class C{  public static Element findCorrespondingElement(Document doc,Element element){  List<Element> parentElements=new ArrayList<Element>();  List<Integer> parentIndex=new ArrayList<Integer>();  Node theParent=element;  while (theParent != null && theParent.getNodeType() == Node.ELEMENT_NODE) {    parentElements.add((Element)theParent);    parentIndex.add(getElementIndex((Element)theParent));    theParent=theParent.getParentNode();  }  Element ret=doc.getDocumentElement();  if (ret.isSameNode(element.getOwnerDocument().getDocumentElement())) {    LOG.warn("No different Root Nodes");  }  for (int i=(parentElements.size() - 2); i >= 0; --i) {    Element child=parentElements.get(i);    int index=parentIndex.get(i);    List<Element> children=findChildren(ret,child.getLocalName(),child.getNamespaceURI());    if (index > children.size()) {      for (int j=0; j < (index - children.size()); ++j) {        Node imported=doc.importNode(child,false);        ret.appendChild(imported);      }      children=findChildren(ret,child.getLocalName(),child.getNamespaceURI());    }    ret=children.get(index - 1);  }  return ret;}  }
class C{  protected void runDataBridgeAndCheckReturnValue(DataBridgeApp dataBridgeApp,String[] args,Class<?> noLoggingClass,DataBridgeApp.ReturnValue expectedReturnValue) throws Exception {  runDataBridgeAndCheckReturnValue(dataBridgeApp,args,noLoggingClass,expectedReturnValue,null);}  }
class C{  private boolean isJavaIdentifier(String identifier){  char[] identifierChars=identifier.toCharArray();  if (!(identifierChars.length > 0 && (Character.isJavaIdentifierStart(identifierChars[0])))) {    return false;  }  for (int i=1; i < identifierChars.length; i++) {    if (!Character.isJavaIdentifierPart(identifierChars[i])) {      return false;    }  }  return true;}  }
class C{  private static void tryInitializeSporkAndroidBindings(BinderManager binderManager){  try {    Class<?> sporkAndroidClass=Class.forName("io.github.sporklibrary.android.SporkAndroid");    Method initializeMethod=sporkAndroidClass.getDeclaredMethod("initialize",BinderManager.class);    initializeMethod.invoke(null,binderManager);    System.out.println("Spork: BinderManager created without Spork for Android");  } catch (  ClassNotFoundException e) {    System.out.println("Spork: BinderManager created with Spork for Android");  }catch (  NoSuchMethodException e) {    System.out.println("Spork: Spork for Android found, but initialize method is not present");  }catch (  InvocationTargetException e) {    System.out.println("Spork: Spork for Android found, but initialization failed because of InvocationTargetException: " + e.getMessage());  }catch (  IllegalAccessException e) {    System.out.println("Spork: Spork for Android found, but initialization failed because of IllegalAccessException: " + e.getMessage());  }}  }
class C{  public IntegerMap(final IntegerMap<T>[] integerMaps){  mapValues=new HashMap<>();  for (  final IntegerMap<T> integerMap : integerMaps) {    this.add(integerMap);  }}  }
class C{  public void test_ConstructorII(){  Vector v=new Vector(2,10);  v.addElement(new Object());  v.addElement(new Object());  v.addElement(new Object());  assertEquals("Failed to inc capacity by proper amount",12,v.capacity());  Vector grow=new Vector(3,-1);  grow.addElement("one");  grow.addElement("two");  grow.addElement("three");  grow.addElement("four");  assertEquals("Wrong size",4,grow.size());  assertEquals("Wrong capacity",6,grow.capacity());  try {    new Vector(-1,1);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public String toInternal(String val){  if (val == null || 0 == val.length() || NEW.equals(val)) {    return UUID.randomUUID().toString().toLowerCase(Locale.ROOT);  } else {    if (val.length() != 36 || val.charAt(8) != DASH || val.charAt(13) != DASH || val.charAt(18) != DASH || val.charAt(23) != DASH) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid UUID String: '" + val + "'");    }    return val.toLowerCase(Locale.ROOT);  }}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  ElemTemplateElement parent=handler.getElemTemplateElement();  if (null != parent) {    parent.appendChild(elem);    handler.pushElemTemplateElement(elem);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void reserveStock(){  final int header_M_Warehouse_ID=getParent().getM_Warehouse_ID();  if (header_M_Warehouse_ID != 0) {    if (header_M_Warehouse_ID != getM_Warehouse_ID())     setM_Warehouse_ID(header_M_Warehouse_ID);    if (getAD_Org_ID() != getAD_Org_ID())     setAD_Org_ID(getAD_Org_ID());  }  final BigDecimal target=getQtyRequired();  final BigDecimal difference=target.subtract(getQtyReserved()).subtract(getQtyDelivered());  log.fine("Line=" + getLine() + " - Target="+ target+ ",Difference="+ difference+ " - Requiered="+ getQtyRequired()+ ",Reserved="+ getQtyReserved()+ ",Delivered="+ getQtyDelivered());  if (difference.signum() == 0) {    return;  }  MProduct product=getM_Product();  if (!product.isStocked()) {    return;  }  BigDecimal reserved=difference;  int M_Locator_ID=getM_Locator_ID(reserved);  if (!MStorage.add(getCtx(),getM_Warehouse_ID(),M_Locator_ID,getM_Product_ID(),getM_AttributeSetInstance_ID(),getM_AttributeSetInstance_ID(),Env.ZERO,reserved,Env.ZERO,get_TrxName())) {    throw new AdempiereException();  }  setQtyReserved(getQtyReserved().add(difference));}  }
class C{  public ImageLoadOption imgLoadAnimation(Animation imgLoadAnimation){  this.imgLoadAnimation=imgLoadAnimation;  return this;}  }
class C{  public static void checkMainThread(){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && Looper.myLooper() != Looper.getMainLooper()) {    throw new IllegalStateException("Not in applications main thread");  }}  }
class C{  public void sendMessage(Message<JsonObject> message){  JsonObject payload=message.body();  ProducerRecord<String,String> record;  if (!payload.containsKey(KafkaPublisher.TYPE_FIELD)) {    logger.error("Invalid message sent missing {} field, msg: {}",KafkaPublisher.TYPE_FIELD,message);    return;  }  KafkaPublisher.MessageType type=KafkaPublisher.MessageType.fromInt(payload.getInteger(KafkaPublisher.TYPE_FIELD));  String value=payload.getString(ConfigConstants.VALUE_FIELD);switch (type) {case SIMPLE:    record=new ProducerRecord(defaultTopic,value);  break;case CUSTOM_TOPIC:record=new ProducerRecord(payload.getString(ConfigConstants.TOPIC_FIELD),value);break;case CUSTOM_KEY:record=new ProducerRecord(payload.getString(ConfigConstants.TOPIC_FIELD),payload.getString(ConfigConstants.KEY_FIELD),value);break;case CUSTOM_PARTITION:record=new ProducerRecord(payload.getString(ConfigConstants.TOPIC_FIELD),payload.getInteger(ConfigConstants.PARTITION_FIELD),payload.getString(ConfigConstants.KEY_FIELD),value);break;default :String error=String.format("Invalid type submitted: {} message being thrown away: %s",type.toString(),value);logger.error(error);message.fail(-1,error);return;}sender.submit(null);}  }
class C{  public boolean send(byte oneByte){  return send(new byte[]{oneByte});}  }
class C{  private void tuneSplitter(Element el){  el.getParentElement().getStyle().setProperty("zIndex","1000");  el.getParentElement().getStyle().setProperty("overflow","visible");  el.getStyle().setProperty("boxSizing","border-box");  el.getStyle().setProperty("width","5px");  el.getStyle().setProperty("overflow","hidden");  el.getStyle().setProperty("marginLeft","-3px");  el.getStyle().setProperty("backgroundColor","transparent");  DivElement smallBorder=Document.get().createDivElement();  smallBorder.getStyle().setProperty("position","absolute");  smallBorder.getStyle().setProperty("width","1px");  smallBorder.getStyle().setProperty("height","100%");  smallBorder.getStyle().setProperty("left","3px");  smallBorder.getStyle().setProperty("top","0px");  smallBorder.getStyle().setProperty("backgroundColor",Style.getSplitterSmallBorderColor());  el.appendChild(smallBorder);  DivElement largeBorder=Document.get().createDivElement();  largeBorder.getStyle().setProperty("position","absolute");  largeBorder.getStyle().setProperty("width","2px");  largeBorder.getStyle().setProperty("height","100%");  largeBorder.getStyle().setProperty("left","1px");  largeBorder.getStyle().setProperty("top","0px");  largeBorder.getStyle().setProperty("opacity","0.4");  largeBorder.getStyle().setProperty("backgroundColor",Style.getSplitterLargeBorderColor());  el.appendChild(largeBorder);}  }
class C{  public TupleQueryResultHandlerException(Throwable cause){  super(cause);}  }
class C{  @Override public void traceDebug(String tag,String message){  traceCallback(MqttServiceConstants.TRACE_DEBUG,tag,message);}  }
class C{  public static int binarySearch(char[] array,int startIndex,int endIndex,char value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public MinimalHTMLWriter(Writer w,StyledDocument doc){  super(w,doc);}  }
class C{  public AppAuthConfiguration build(){  return new AppAuthConfiguration(mBrowserMatcher);}  }
class C{  public Anonymous_numExpr_4_ createAnonymous_numExpr_4_(){  Anonymous_numExpr_4_Impl anonymous_numExpr_4_=new Anonymous_numExpr_4_Impl();  return anonymous_numExpr_4_;}  }
class C{  public CSelectionSnapshot(final Collection<NaviNode> selectedNodes){  m_selectedNodes=new ArrayList<NaviNode>(selectedNodes);}  }
class C{  public void saveSelection(IMiniTable miniTable){  log.info("");  ArrayList<Integer> results=new ArrayList<Integer>();  setSelection(null);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  setSelection(results);}  }
class C{  protected static RevisionSpec validateRevision(String revisioneventTypeName,ConfigurationRevisionEventType config,EventAdapterService eventAdapterService) throws ConfigurationException {  if ((config.getNameBaseEventTypes() == null) || (config.getNameBaseEventTypes().size() == 0)) {    throw new ConfigurationException("Required base event type name is not set in the configuration for revision event type '" + revisioneventTypeName + "'");  }  if (config.getNameBaseEventTypes().size() > 1) {    throw new ConfigurationException("Only one base event type name may be added to revision event type '" + revisioneventTypeName + "', multiple base types are not yet supported");  }  String baseeventTypeName=config.getNameBaseEventTypes().iterator().next();  EventType baseEventType=eventAdapterService.getExistsTypeByName(baseeventTypeName);  if (baseEventType == null) {    throw new ConfigurationException("Could not locate event type for name '" + baseeventTypeName + "' in the configuration for revision event type '"+ revisioneventTypeName+ "'");  }  EventType[] deltaTypes=new EventType[config.getNameDeltaEventTypes().size()];  String[] deltaNames=new String[config.getNameDeltaEventTypes().size()];  int count=0;  for (  String deltaName : config.getNameDeltaEventTypes()) {    EventType deltaEventType=eventAdapterService.getExistsTypeByName(deltaName);    if (deltaEventType == null) {      throw new ConfigurationException("Could not locate event type for name '" + deltaName + "' in the configuration for revision event type '"+ revisioneventTypeName+ "'");    }    deltaTypes[count]=deltaEventType;    deltaNames[count]=deltaName;    count++;  }  if ((config.getKeyPropertyNames() == null) || (config.getKeyPropertyNames().length == 0)) {    throw new ConfigurationException("Required key properties are not set in the configuration for revision event type '" + revisioneventTypeName + "'");  }  checkKeysExist(baseEventType,baseeventTypeName,config.getKeyPropertyNames(),revisioneventTypeName);  for (int i=0; i < deltaTypes.length; i++) {    checkKeysExist(deltaTypes[i],deltaNames[i],config.getKeyPropertyNames(),revisioneventTypeName);  }  String keyPropertyNames[]=PropertyUtility.copyAndSort(config.getKeyPropertyNames());  for (  String key : keyPropertyNames) {    Class typeProperty=baseEventType.getPropertyType(key);    for (    EventType dtype : deltaTypes) {      Class dtypeProperty=dtype.getPropertyType(key);      if ((dtypeProperty != null) && (typeProperty != dtypeProperty)) {        throw new ConfigurationException("Key property named '" + key + "' does not have the same type for base and delta types of revision event type '"+ revisioneventTypeName+ "'");      }    }  }  if (config.getPropertyRevision() == ConfigurationRevisionEventType.PropertyRevision.OVERLAY_DECLARED) {    String nonkeyPropertyNames[]=PropertyUtility.uniqueExclusiveSort(baseEventType.getPropertyNames(),keyPropertyNames);    Set<String> baseEventOnlyProperties=new HashSet<String>();    Set<String> changesetPropertyNames=new HashSet<String>();    for (    String nonKey : nonkeyPropertyNames) {      boolean overriddenProperty=false;      for (      EventType type : deltaTypes) {        if (type.isProperty(nonKey)) {          changesetPropertyNames.add(nonKey);          overriddenProperty=true;          break;        }      }      if (!overriddenProperty) {        baseEventOnlyProperties.add(nonKey);      }    }    String changesetProperties[]=changesetPropertyNames.toArray(new String[changesetPropertyNames.size()]);    String baseEventOnlyPropertyNames[]=baseEventOnlyProperties.toArray(new String[baseEventOnlyProperties.size()]);    for (    String changesetProperty : changesetProperties) {      Class typeProperty=baseEventType.getPropertyType(changesetProperty);      for (      EventType dtype : deltaTypes) {        Class dtypeProperty=dtype.getPropertyType(changesetProperty);        if ((dtypeProperty != null) && (typeProperty != dtypeProperty)) {          throw new ConfigurationException("Property named '" + changesetProperty + "' does not have the same type for base and delta types of revision event type '"+ revisioneventTypeName+ "'");        }      }    }    return new RevisionSpec(config.getPropertyRevision(),baseEventType,deltaTypes,deltaNames,keyPropertyNames,changesetProperties,baseEventOnlyPropertyNames,false,null);  } else {    Set<String> allProperties=new HashSet<String>();    allProperties.addAll(Arrays.asList(baseEventType.getPropertyNames()));    for (    EventType deltaType : deltaTypes) {      allProperties.addAll(Arrays.asList(deltaType.getPropertyNames()));    }    String[] allPropertiesArr=allProperties.toArray(new String[allProperties.size()]);    String[] changesetProperties=PropertyUtility.uniqueExclusiveSort(allPropertiesArr,keyPropertyNames);    boolean hasContributedByDelta=false;    boolean[] contributedByDelta=new boolean[changesetProperties.length];    count=0;    for (    String property : changesetProperties) {      Class basePropertyType=baseEventType.getPropertyType(property);      Class typeTemp=null;      if (basePropertyType != null) {        typeTemp=basePropertyType;      } else {        hasContributedByDelta=true;        contributedByDelta[count]=true;      }      for (      EventType dtype : deltaTypes) {        Class dtypeProperty=dtype.getPropertyType(property);        if (dtypeProperty != null) {          if ((typeTemp != null) && (dtypeProperty != typeTemp)) {            throw new ConfigurationException("Property named '" + property + "' does not have the same type for base and delta types of revision event type '"+ revisioneventTypeName+ "'");          }        }        typeTemp=dtypeProperty;      }      count++;    }    return new RevisionSpec(config.getPropertyRevision(),baseEventType,deltaTypes,deltaNames,keyPropertyNames,changesetProperties,new String[0],hasContributedByDelta,contributedByDelta);  }}  }
class C{  public T caseS_Assignment(S_Assignment object){  return null;}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public int scaledFloor(float length){  return MathUtil.ifloor(scaled(length));}  }
class C{  public SaaSApplicationException(Throwable cause,Object[] params){  super(cause);  init(params);}  }
class C{  private static Set<String> loadClass(String clazz) throws Exception {  ListResourceBundle lrb=(ListResourceBundle)Class.forName(clazz).newInstance();  Set<String> keys=lrb.keySet();  Map<String,String> newold=new HashMap<String,String>();  boolean dup=false;  for (  String k : keys) {    String key=normalize(k);    if (newold.containsKey(key)) {      err("Dup found for " + key + ":");      err("[" + newold.get(key) + "]");      err("[" + k + "]");      dup=true;    }    newold.put(key,k);  }  if (dup)   throw new Exception();  return keys;}  }
class C{  public AnyToXYTransform(double nx,double ny,double nz){  setSourceNormal(nx,ny,nz);}  }
class C{  private String addPostVolumeCreateSteps(Workflow workflow,List<VolumeDescriptor> volumeDescriptors,ProtectionSystem rpSystem,String taskId){  List<VolumeDescriptor> rpSourceDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});  if (rpSourceDescriptors != null && !rpSourceDescriptors.isEmpty()) {    String stepId=workflow.createStepId();    Workflow.Method rpVPlexRestoreSourceVirtualVolumeMethod=new Workflow.Method(METHOD_RP_VPLEX_REINSTATE_SRC_VVOL_STEP,rpSourceDescriptors);    workflow.createStep(STEP_POST_VOLUME_CREATE,"RP VPlex reinstate Virtual Volume to original request",STEP_CG_CREATION,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),rpVPlexRestoreSourceVirtualVolumeMethod,null,stepId);    return STEP_POST_VOLUME_CREATE;  } else {    return STEP_CG_CREATION;  }}  }
class C{  private void syncReview(ContentProviderClient cp,Sync<Review> sync) throws RemoteException {  Review review=sync.object;switch (sync.action) {case INSERT:    ReviewsService.add(review);  if (review.localId > 0 && review.userId > 0) {    cp.insert(SYNCS_URI,Syncs.values(sync));  }break;case UPDATE:ContentValues vals=new ContentValues(3);vals.put(Reviews.COMMENTS,review.comments);vals.put(Reviews.RATING,review.rating);vals.put(Reviews.STATUS_ID,review.status.id);String sel=Reviews.GLOBAL_ID + " = ?";String[] args={String.valueOf(review.globalId)};cp.update(REVIEWS_URI,vals,sel,args);break;}String id=String.valueOf(Restaurants.idForGlobalId(review.restaurantId));if (sync.action != INSERT) {cr().call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_RATING,id,null);}if (review.userId == 0 && sync.action != UPDATE) {cr().call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_LAST_VISIT,id,null);}}  }
class C{  public static ExprBoolean toExprBoolean(Expression expr,Position start,Position end){  if (expr instanceof Literal) {    Boolean b=((Literal)expr).getBoolean(null);    if (b != null) {      return expr.getFactory().createLitBoolean(!b.booleanValue(),start,end);    }  }  return new OpNegate(expr,start,end);}  }
class C{  private int awaitDone(boolean timed,long nanos) throws InterruptedException {  final long deadline=timed ? System.nanoTime() + nanos : 0L;  WaitNode q=null;  boolean queued=false;  for (; ; ) {    if (Thread.interrupted()) {      removeWaiter(q);      throw new InterruptedException();    }    int s=state;    if (s > COMPLETING) {      if (q != null)       q.thread=null;      return s;    } else     if (s == COMPLETING)     Thread.yield(); else     if (q == null)     q=new WaitNode(); else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q); else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos <= 0L) {        removeWaiter(q);        return state;      }      LockSupport.parkNanos(this,nanos);    } else     LockSupport.park(this);  }}  }
class C{  @Override public ObjectInputStream createObjectInputStream(InputStream source) throws IOException {  return new ApplicationObjectInputStream(source);}  }
class C{  public static String errorAsString(String msgId){  return LivingDocServerErrorKey.ERROR + msgId;}  }
class C{  public static final boolean canWrite(String path){  if (isSDCardPath(path)) {    if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {      return true;    }  } else {    return true;  }  return false;}  }
class C{  public Query wrapQuery(Query query){  return Queries.filtered(query,new MinDocQuery(docUpTo));}  }
class C{  public Anonymous_recordEntity_2_ createAnonymous_recordEntity_2_(){  Anonymous_recordEntity_2_Impl anonymous_recordEntity_2_=new Anonymous_recordEntity_2_Impl();  return anonymous_recordEntity_2_;}  }
class C{  public boolean isInside(Contour contour){  return left() >= contour.left() && right() <= contour.right() && top() >= contour.top() && bottom() <= contour.bottom();}  }
class C{  public static RoundingParams fromCornersRadius(float radius){  return (new RoundingParams()).setCornersRadius(radius);}  }
class C{  public void addHttpRequestListener(HttpRequestListener l){  listeners.addElement(l);}  }
class C{  public static boolean checkpw(String plaintext,String hashed){  return (hashed.compareTo(hashpw(plaintext,hashed)) == 0);}  }
class C{  public void warn(String format,Object... argArray){  formatAndLog(Log.WARN,format,argArray);}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecCipher01(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        PKCS8EncodedKeySpec eks=epki.getKeySpec(g.c());        if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {          fail(algName[i][0] + " != " + algName[i][1]);        }      } catch (      InvalidKeySpecException e) {        fail(algName[i][0] + ", " + algName[i][1]+ e+ "\n");      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowed) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Week)) {    return false;  }  Week that=(Week)obj;  if (this.week != that.week) {    return false;  }  if (this.year != that.year) {    return false;  }  return true;}  }
class C{  @Override public boolean isRunning(){  return doc != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.022 -0400",hash_original_method="53DE123D2C6C56C9F3E091E35AEAA157",hash_generated_method="22BE71A05B2A301ABC2AB109753163D3") public HttpCookie(String name,String value){  String ntrim=name.trim();  if (!isValidName(ntrim)) {    throw new IllegalArgumentException();  }  this.name=ntrim;  this.value=value;}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField f=s.readFields();  hgap=f.get("hgap",0);  vgap=f.get("vgap",0);  if (f.defaulted("vector")) {    Hashtable<String,Component> tab=(Hashtable)f.get("tab",null);    vector=new Vector<>();    if (tab != null && !tab.isEmpty()) {      for (Enumeration<String> e=tab.keys(); e.hasMoreElements(); ) {        String key=(String)e.nextElement();        Component comp=(Component)tab.get(key);        vector.add(new Card(key,comp));        if (comp.isVisible()) {          currentCard=vector.size() - 1;        }      }    }  } else {    vector=(Vector)f.get("vector",null);    currentCard=f.get("currentCard",0);  }}  }
class C{  public Object readRef() throws IOException {  int value=parseInt();  return _refs.get(value);}  }
class C{  private void fillMapWithTemplateData(String textForTemplateExtraction,TemplateFilter filterToApply,int id,Map<String,Set<Integer>> mapToFill){  Set<String> names=getTemplateNames(textForTemplateExtraction);  for (  String name : names) {    if (filterToApply.acceptTemplate(name)) {      if (mapToFill.containsKey(name)) {        Set<Integer> pIdList=mapToFill.remove(name);        pIdList.add(id);        mapToFill.put(name,pIdList);      } else {        Set<Integer> newIdList=new HashSet<Integer>();        newIdList.add(id);        mapToFill.put(name,newIdList);      }    }  }}  }
class C{  protected void param(float val) throws ParseException {  if (pindex == p.length) {    ps.add(p);    p=new float[p.length * 2 + 1];    pindex=0;  }  p[pindex++]=val;  pcount++;}  }
class C{  public GemFireCacheException(String message,CacheException ex){  super(message,ex);}  }
class C{  protected List<? extends VPFSymbolKey> doGetUnknownSymbolKeys(){  return Arrays.asList(VPFSymbolKey.UNKNOWN_SYMBOL_KEY);}  }
class C{  public static void info(final String message,final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.info(message,t);  } else {    System.err.printf("INFO: %s : %s\n",message,t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  public boolean canLoadFolder(AcsAccessObject acs,ArchiveObject arch,int fdrId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    can=FolderMdoFdr.canLoadFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdrId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public ToStringBuilder append(char value){  style.append(buffer,null,value);  return this;}  }
class C{  public void addInfo(String msg){  addInfo(msg,null);}  }
class C{  public static byte[] secureRandomBytes(int len){  if (len <= 0) {    len=1;  }  byte[] buff=new byte[len];  SecureRandom sr=getSecureRandom();synchronized (sr) {    sr.nextBytes(buff);  }  return buff;}  }
class C{  public static List<Element> findChildren(Node parent,String localname,String namespaceuri){  return findChildren(parent,localname,namespaceuri,false);}  }
class C{  public static void init(int poolSize){  mPool=new ByteArrayPool(poolSize);}  }
class C{  public DualList(final Composite parent,final int style){  super(parent,style);  items=new ArrayList<DLItem>();  selection=new ArrayList<DLItem>();  setLayout(new GridLayout(4,false));  createItemsTable();  createButtonSelectAll();  createSelectionTable();  createButtonMoveFirst();  createButtonSelect();  createButtonMoveUp();  createButtonDeselect();  createButtonMoveDown();  createButtonDeselectAll();  createButtonMoveLast();}  }
class C{  protected void configureXML11Pipeline(){  if (fCurrentDVFactory != fXML11DatatypeFactory) {    fCurrentDVFactory=fXML11DatatypeFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fXML11DTDScanner) {    fCurrentDTDScanner=fXML11DTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);    setProperty(DTD_PROCESSOR,fXML11DTDProcessor);  }  fXML11DTDScanner.setDTDHandler(fXML11DTDProcessor);  fXML11DTDProcessor.setDTDSource(fXML11DTDScanner);  fXML11DTDProcessor.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fXML11DTDProcessor);  }  fXML11DTDScanner.setDTDContentModelHandler(fXML11DTDProcessor);  fXML11DTDProcessor.setDTDContentModelSource(fXML11DTDScanner);  fXML11DTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.setDTDContentModelSource(fXML11DTDProcessor);  }  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fXML11NSDocScanner) {      fCurrentScanner=fXML11NSDocScanner;      setProperty(DOCUMENT_SCANNER,fXML11NSDocScanner);      setProperty(DTD_VALIDATOR,fXML11NSDTDValidator);    }    fXML11NSDocScanner.setDTDValidator(fXML11NSDTDValidator);    fXML11NSDocScanner.setDocumentHandler(fXML11NSDTDValidator);    fXML11NSDTDValidator.setDocumentSource(fXML11NSDocScanner);    fXML11NSDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11NSDTDValidator);    }    fLastComponent=fXML11NSDTDValidator;  } else {    if (fXML11DocScanner == null) {      fXML11DocScanner=new XML11DocumentScannerImpl();      addXML11Component(fXML11DocScanner);      fXML11DTDValidator=new XML11DTDValidator();      addXML11Component(fXML11DTDValidator);    }    if (fCurrentScanner != fXML11DocScanner) {      fCurrentScanner=fXML11DocScanner;      setProperty(DOCUMENT_SCANNER,fXML11DocScanner);      setProperty(DTD_VALIDATOR,fXML11DTDValidator);    }    fXML11DocScanner.setDocumentHandler(fXML11DTDValidator);    fXML11DTDValidator.setDocumentSource(fXML11DocScanner);    fXML11DTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11DTDValidator);    }    fLastComponent=fXML11DTDValidator;  }  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      setProperty(SCHEMA_VALIDATOR,fSchemaValidator);      addCommonComponent(fSchemaValidator);      fSchemaValidator.reset(this);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentSource(fLastComponent);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fSchemaValidator);    }    fLastComponent=fSchemaValidator;  }}  }
class C{  public T caseReferenceTarget(ReferenceTarget object){  return null;}  }
class C{  protected void sequence_ExpressionDisguisedAsBlock(ISerializationContext context,Block semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void openConnection(@NonNls String preamble,@NonNls String postamble,IStreamLogger streamLogger) throws AuthenticationException {  boolean error=true;  try {    createSocket();    this.socketOutputStream=new BufferedOutputStream(socket.getOutputStream());    this.socketInputStream=new BufferedInputStream(socket.getInputStream());    final OutputStream loggingOutputStream=streamLogger.createLoggingOutputStream(this.socketOutputStream);    final InputStream loggingInputStream=streamLogger.createLoggingInputStream(this.socketInputStream);    writeLn(loggingOutputStream,preamble,"US-ASCII");    writeLn(loggingOutputStream,repository);    writeLn(loggingOutputStream,userName);    writeLn(socketOutputStream,encodedPassword,"US-ASCII");    writeLn(streamLogger.getOutputLogStream(),ENCODED_PASSWORD_OUTPUT_MESSAGE);    writeLn(loggingOutputStream,postamble,"US-ASCII");    loggingOutputStream.flush();    String response=new StreamUtilities(null).readLine(loggingInputStream);    if (response.equals(SUCCESS_MESSAGE)) {      error=false;      return;    }    if (response.length() == 0) {      throw new AuthenticationException(JavaCvsSrcBundle.message("no.response.from.server.error.message"));    }    if (response.equals(FAILED_MESSAGE)) {      throw new UnknownUserException(JavaCvsSrcBundle.message("wrong.password.or.unknown.user.error.message"));    }    response=removePrefix(response,"error ");    response=removePrefix(response,"E ");    throw new AuthenticationException(JavaCvsSrcBundle.message("authentication.failed.error.message",response));  } catch (  ConnectException ex) {    throw new AuthenticationException(JavaCvsSrcBundle.message("cannot.connect.to.host.error.message",connectionSettings.getHostName()),ex);  }catch (  NoRouteToHostException ex) {    throw new AuthenticationException(JavaCvsSrcBundle.message("no.route.to.host.error.message",connectionSettings.getHostName()),ex);  }catch (  UnknownHostException ex) {    throw new AuthenticationException(JavaCvsSrcBundle.message("unknown.host.error.message",connectionSettings.getHostName()),ex);  }catch (  SocketTimeoutException ex) {    throw new AuthenticationException(JavaCvsSrcBundle.message("timeout.error.message",connectionSettings.getHostName()),ex);  }catch (  IOException ex) {    throw new AuthenticationException(JavaCvsSrcBundle.message("i.o.error.while.connecting.to.host.error.message",connectionSettings.getHostName()),ex);  } finally {    if (error) {      close();    }  }}  }
class C{  public String Get(StreamKind StreamKind,int StreamNumber,String parameter,InfoKind infoKind){  return Get(StreamKind,StreamNumber,parameter,infoKind,InfoKind.Name);}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  public int double_set_old(){  String s=soot.PhaseOptions.getString(options,"double-set-old");  if (s.equalsIgnoreCase("hash"))   return double_set_old_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_old_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_old_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_old_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_old_heintze;  if (s.equalsIgnoreCase("sharedlist"))   return double_set_old_sharedlist;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-old");}  }
class C{  @Modifying @Transactional public void addNote(@PathVariable Long chequeID,@RequestBody Note note){  noteRepository.save(note.withDateTime());}  }
class C{  protected void reset(){  lastTimestamp=0;  totalDelay=0;  atEOF=false;  if (reader.isResettable()) {    reader.reset();  }}  }
class C{  public boolean containsAll(Collection<?> c){  int n=c.size();  final Iterator<?> i=c.iterator();  while (n-- != 0)   if (!contains(i.next()))   return false;  return true;}  }
class C{  public static String decode(String s) throws IOException {  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '+':      sb.append(' ');    break;case '%':  if (i + 3 > s.length()) {    throw new IOException("invalid url: " + s);  }try {  sb.append((char)Integer.parseInt(s.substring(i + 1,i + 3),16));} catch (NumberFormatException e) {  throw new IOException("invalid url: " + s);}i+=2;break;default :sb.append(c);break;}}String result=sb.toString();try {byte[] inputBytes=result.getBytes("8859_1");result=new String(inputBytes);} catch (UnsupportedEncodingException e) {ErrorService.error(e);}return result;}  }
class C{  public boolean isFocusScrolling(){  return focusScrolling;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:16.159 -0400",hash_original_method="261A2C4A28631122E0753A758E6A08A3",hash_generated_method="882271BFDFD2A58428C2876130268B79") public void addIssuerName(byte[] iss_name) throws IOException {  if (iss_name == null) {    throw new NullPointerException("iss_name == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=new Name(iss_name).getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }}  }
class C{  public boolean hasSeparateLargeIcons(){  return separateLargeIcons;}  }
class C{  public SVGTestsSupport(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void requestChannelEmotes(String channel){  if (settings.getBoolean("ffz")) {    frankerFaceZ.requestEmotes(channel,false);  }  if (settings.getBoolean("bttvEmotes")) {    bttvEmotes.requestEmotes(channel,false);  }}  }
class C{  public static Function<String> json(Object arg){  return new JSONArgumentFunction<>("json",arg);}  }
class C{  @SkipValidation private void prepareDisplayInfo(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Entered into method prepareDisplayInfo");  dcbDispInfo=new DCBDisplayInfo();  dcbDispInfo.setReasonCategoryCodes(Collections.<String>emptyList());  List<String> reasonList=new ArrayList<String>();  reasonList.addAll(DEMAND_REASON_ORDER_MAP.keySet());  dcbDispInfo.setReasonMasterCodes(reasonList);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("DCB Display Info : " + dcbDispInfo);    LOGGER.debug("Number of Demand Reasons : " + (reasonList != null ? reasonList.size() : ZERO));    LOGGER.debug("Exit from method prepareDisplayInfo");  }}  }
class C{  private void addIndent(Document document,int line,CharSequence indent,int tabLength) throws BadLocationException {  IRegion region=document.getLineInformation(line);  int insert=region.getOffset();  int endOffset=region.getOffset() + region.getLength();  int newInsert=insert;  while (newInsert < endOffset - 2 && document.get(newInsert,2).equals(LINE_COMMENT))   newInsert+=2;  if (newInsert > insert) {    int whitespaceCount=0;    int i=newInsert;    while (i < endOffset - 1) {      char ch=document.get(i,1).charAt(0);      if (!Character.isWhitespace(ch))       break;      whitespaceCount=whitespaceCount + computeVisualLength(ch,tabLength);      i++;    }    if (whitespaceCount != 0 && whitespaceCount >= fProject.getFormatOptions().getIndentSize())     insert=newInsert;  }  document.replace(insert,0,indent.toString());}  }
class C{  public ObjectPropertyType createObjectPropertyType(){  ObjectPropertyTypeImpl objectPropertyType=new ObjectPropertyTypeImpl();  return objectPropertyType;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private void rollback(SharedSessionContract ses,Transaction tx){  if (tx == null) {    org.hibernate.Transaction hTx=ses.getTransaction();    if (hTx != null && hTx.isActive())     hTx.rollback();  }}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ADDITIVE_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Nullable private static PsiDirectory createDirectories(Project project,String target) throws IOException {  String the_rest=null;  VirtualFile the_root=null;  PsiDirectory ret=null;  target=FileUtil.toSystemIndependentName(target);  for (  VirtualFile file : ProjectRootManager.getInstance(project).getContentRoots()) {    final String root_path=file.getPath();    if (target.startsWith(root_path)) {      the_rest=target.substring(root_path.length());      the_root=file;      break;    }  }  if (the_root == null) {    throw new IOException("Can't find '" + target + "' among roots");  }  if (the_rest != null) {    final LocalFileSystem lfs=LocalFileSystem.getInstance();    final PsiManager psi_mgr=PsiManager.getInstance(project);    String[] dirs=the_rest.split("/");    int i=0;    if ("".equals(dirs[0]))     i=1;    while (i < dirs.length) {      VirtualFile subdir=the_root.findChild(dirs[i]);      if (subdir != null) {        if (!subdir.isDirectory()) {          throw new IOException("Expected dir, but got non-dir: " + subdir.getPath());        }      } else {        subdir=the_root.createChildDirectory(lfs,dirs[i]);      }      VirtualFile init_vfile=subdir.findChild(PyNames.INIT_DOT_PY);      if (init_vfile == null)       init_vfile=subdir.createChildData(lfs,PyNames.INIT_DOT_PY);      the_root=subdir;      i+=1;    }    ret=psi_mgr.findDirectory(the_root);  }  return ret;}  }
class C{  public void writeTo(IndentingWriter writer,int register) throws IOException {  if (!options.noParameterRegisters) {    if (register >= registerCount - parameterRegisterCount) {      writer.write('p');      writer.printSignedIntAsDec((register - (registerCount - parameterRegisterCount)));      return;    }  }  writer.write('v');  writer.printSignedIntAsDec(register);}  }
class C{  @SuppressWarnings("unused") private static ParcelFileDescriptor makeInputStream(Uri uri,ContentResolver cr){  try {    return cr.openFileDescriptor(uri,"r");  } catch (  IOException ex) {    return null;  }}  }
class C{  private boolean isTokenExpired(String oldToken){  return true;}  }
class C{  public MemBNode(Object creator,String id){  super(id);  this.creator=creator;}  }
class C{  protected Refactoring createRefactoring(final RefactoringDescriptor descriptor,final RefactoringStatus status) throws CoreException {  Assert.isNotNull(descriptor);  return descriptor.createRefactoring(status);}  }
class C{  private void handleShowInstructionComment(final NaviNode node,final double y){  if (!(node.getRawNode() instanceof INaviCodeNode)) {    return;  }  final INaviCodeNode codeNode=(INaviCodeNode)node.getRawNode();  final double yPos=y - node.getY();  final int row=node.positionToRow(yPos);  final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(codeNode,row);  if (instruction == null) {    return;  }  CGraphDialogs.showInstructionCommentDialog(m_model.getParent(),m_model,codeNode,instruction);}  }
class C{  @Override public long readLong(String filePath,long offset){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);  return byteBffer.getLong();}  }
class C{  private void drawAFC(Graphics2D graphics,double frequencyAxis,double errorAxis){  double height=getSize().getHeight() - mSpectrumInset;  double lineHeight=height * 0.75d;  graphics.setColor(Color.YELLOW);  graphics.draw(new Line2D.Double(errorAxis,lineHeight,errorAxis,height - 1.0d));  graphics.draw(new Line2D.Double(frequencyAxis,lineHeight,errorAxis,lineHeight));}  }
class C{  public ListFilesSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public SourceStorageDto build(GitlabUrl gitlabUrl){  Map<String,String> parameters=new HashMap<>(2);  parameters.put("branch",gitlabUrl.branch());  if (!Strings.isNullOrEmpty(gitlabUrl.subfolder())) {    parameters.put("keepDir",gitlabUrl.subfolder());  }  return newDto(SourceStorageDto.class).withLocation(gitlabUrl.repositoryLocation()).withType("git").withParameters(parameters);}  }
class C{  public void startThreads(){  int priority=Thread.currentThread().getPriority();  log.debug("startThreads current priority = " + priority + " max available = "+ Thread.MAX_PRIORITY+ " default = "+ Thread.NORM_PRIORITY+ " min available = "+ Thread.MIN_PRIORITY);  int xmtpriority=(Thread.MAX_PRIORITY - 1 > priority ? Thread.MAX_PRIORITY - 1 : Thread.MAX_PRIORITY);  if (xmtHandler == null) {    xmtHandler=new XmtHandler();  }  Thread xmtThread=new Thread(xmtHandler,"LocoNet Intellibox transmit handler");  log.debug("Xmt thread starts at priority " + xmtpriority);  xmtThread.setDaemon(true);  xmtThread.setPriority(Thread.MAX_PRIORITY - 1);  xmtThread.start();  if (rcvHandler == null) {    rcvHandler=new RcvHandler(this);  }  Thread rcvThread=new Thread(rcvHandler,"LocoNet Intellibox receive handler");  rcvThread.setDaemon(true);  rcvThread.setPriority(Thread.MAX_PRIORITY);  rcvThread.start();}  }
class C{  protected void decodeGroup(FacesContext context,UISelectOne radio,Group group){  rendererParamsNotNull(context,radio);  if (!shouldDecode(radio)) {    return;  }  String clientId=decodeBehaviors(context,radio);  if (clientId == null) {    clientId=radio.getClientId(context);  }  assert (clientId != null);  Map<String,String> requestParameterMap=context.getExternalContext().getRequestParameterMap();  String newValue=requestParameterMap.get(group.getClientName());  String prefix=clientId + UINamingContainer.getSeparatorChar(context);  if (newValue != null) {    if (newValue.startsWith(prefix)) {      String submittedValue=newValue.substring(prefix.length());      setSubmittedValue(radio,submittedValue);      if (logger.isLoggable(Level.FINE)) {        logger.fine("submitted value for UISelectOne group component " + radio.getId() + " after decoding "+ submittedValue);      }    } else {      radio.resetValue();    }  } else {    group.setNoSubmittedValue(radio);  }}  }
class C{  public void put(String key,File file,String contentType,String customFileName) throws FileNotFoundException {  if (file == null || !file.exists()) {    throw new FileNotFoundException();  }  if (key != null) {    fileParams.put(key,new FileWrapper(file,contentType,customFileName));  }}  }
class C{  public void publish(PEPItem item){  PEPPubSub pubSub=new PEPPubSub(item);  pubSub.setType(Type.SET);  connection.sendPacket(pubSub);}  }
class C{  @Override public void visitTree(JCTree tree){  result=null;}  }
class C{  public void pushPairCurrentMatched(ElemTemplateElement template,int child){  m_currentMatchTemplates.push(template);  m_currentMatchedNodes.push(child);}  }
class C{  @Override public void close() throws IOException {  if (in != null) {    in.close();    in=null;    buf=null;  }}  }
class C{  public void unsetOperatorId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,OPERATORID_ISSET_ID);}  }
class C{  protected SeaGlassRegion(String name,String ui,boolean subregion){  super(name,ui,subregion);}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    if (input2.getShapeType() != shapeType) {      showFeedback("Both input images must be of the same shape type.");      return;    }    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    DBFWriter writer=null;    output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input1);    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests1.length; m++) {          if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {            parentRecNum=userData1[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum);          rowData[2]=null;          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g2.difference(g1);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g2,g1);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        for (int m=0; m < tests2.length; m++) {          if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {            parentRecNum=userData2[m];            break;          }        }        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[3];          rowData[0]=new Double(FID);          rowData[1]=null;          rowData[2]=new Double(parentRecNum);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    if (outputShapeType == ShapeType.POLYGON) {      updateProgress("Performing operation (progress will not be updated):",-1);      try {        outputGeometry=g1.intersection(g2);      } catch (      Exception ex) {        outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);      }      if (outputGeometry instanceof GeometryCollection) {        int numGeometries=outputGeometry.getNumGeometries();        oneHundredthTotal=(int)(numGeometries / 100.0);        progress=0;        n=0;        int parentRecNum1=0;        int parentRecNum2=0;        for (int a=0; a < numGeometries; a++) {          parentRecNum1=-99;          parentRecNum2=-99;          com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || tests1[m].covers(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || tests2[m].covers(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {            Coordinate p=gN.getCoordinate();            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {            LineString ls=(LineString)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else           if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;            ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] coords=p.getExteriorRing().getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              coords=p.getInteriorRingN(b).getCoordinates();              if (Topology.isClockwisePolygon(coords)) {                for (i=coords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              } else {                for (i=0; i < coords.length; i++) {                  pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            output.addRecord(wbGeometry);            FID++;            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(parentRecNum1);            rowData[2]=new Double(parentRecNum2);            writer.addRecord(rowData);          } else {          }          n++;          if (n >= oneHundredthTotal) {            n=0;            if (cancelOp) {              cancelOperation();              return;            }            progress++;            updateProgress("Saving output file",progress);          }        }      } else {        showFeedback("An error was encountered when saving the output file.");        return;      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addSrcfiles(FileSet fs){  sourceFileSets.addElement(fs);}  }
class C{  public DataSortedTableModel(String filename,AbstractFileLoader... loaders){  this(new DataTableModel(filename,loaders));}  }
class C{  public OverwriteDataSet(double[] x,double[] y,XYDataset delegateSet){  this.delegateSet=delegateSet;  this.x=new Double[x.length];  this.y=new Double[y.length];  for (int i=0; i < x.length; ++i) {    this.x[i]=new Double(x[i]);    this.y[i]=new Double(y[i]);  }}  }
class C{  void finish(){  if (downloadRequestQueue != null) {    downloadRequestQueue.finish(this);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (active_1: ");  result.append(active_1);  result.append(", name_1: ");  result.append(name_1);  result.append(", code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  private void grow() throws OutOfMemoryError {  if (data.length == MAX_ARRAY_SIZE) {    throw new OutOfMemoryError("Array size has reached the Java maximum.");  }  final int newsize=(size >= LAST_GROW_SIZE) ? MAX_ARRAY_SIZE : (size + (size >> 1) + 1);  data=Arrays.copyOf(data,newsize);}  }
class C{  private CTagSelectionFunctions(){}  }
class C{  public MediaNotificationInfo(String title,boolean isPaused,String origin,int tabId,boolean isPrivate,MediaPlaybackListener listener){  this.title=title;  this.isPaused=isPaused;  this.origin=origin;  this.tabId=tabId;  this.isPrivate=isPrivate;  this.listener=listener;}  }
class C{  @Override public String basePath(){  return "/wm/firewall";}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.326 -0500",hash_original_method="2413D525F1F2FBC6EE783A47B6048FA5",hash_generated_method="86F84AC70263C31F92A614E837A3C613") public static boolean isUnicodeIdentifierPart(char c){  return isUnicodeIdentifierPartImpl(c);}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  private ColtDataSet(int rows,List<Node> variables,double[][] data){  tetradMatrix=new TetradMatrix(rows,variables.size());  this.variables=new LinkedList<>(variables);  for (int i=0; i < rows; i++) {    for (int j=0; j < variables.size(); j++) {      tetradMatrix.set(i,j,Double.NaN);    }  }  if (data[0].length != variables.size() || data.length != rows) {    throw new IllegalArgumentException("Wrong shape for data.");  }  this.tetradMatrix=new TetradMatrix(data);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.823 -0500",hash_original_method="62ECA1A77D23337015138C43AC039257",hash_generated_method="0E9F76BDA6A2C5FDCC7BF68E2DDF98DC") public boolean selectNextArticle(ArticlePointer pointer) throws IOException {  if (!NNTPReply.isPositiveCompletion(next()))   return false;  if (pointer != null)   __parseArticlePointer(getReplyString(),pointer);  return true;}  }
class C{  public T caseTAnnotationTypeRefArgument(TAnnotationTypeRefArgument object){  return null;}  }
class C{  final void removeThread(Thread thread) throws IllegalThreadStateException {synchronized (threadRefs) {    for (Iterator<Thread> i=threads.iterator(); i.hasNext(); ) {      if (i.next().equals(thread)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  public static final double[] llaToECF(double lon,double lat,double alt,double[] ecf){  lon=StrictMath.toRadians(lon);  lat=StrictMath.toRadians(lat);  final double sl=StrictMath.sin(lat);  final double s2=sl * sl;  final double cl=StrictMath.cos(lat);  final double ge2=(SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2) / (SEMIMAJOR_AXIS2);  if (ecf == null) {    ecf=new double[3];  }  if (lat < -PI_OVER_2 && lat > -1.001D * PI_OVER_2) {    lat=-PI_OVER_2;  } else   if (lat > PI_OVER_2 && lat < 1.001D * PI_OVER_2) {    lat=PI_OVER_2;  }  assert (lat >= -PI_OVER_2) || (lat <= PI_OVER_2);  if (lon > StrictMath.PI) {    lon-=(2 * StrictMath.PI);  }  final double rn=SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - ge2 * s2);  ecf[0]=(rn + alt) * cl * StrictMath.cos(lon);  ecf[1]=(rn + alt) * cl * StrictMath.sin(lon);  ecf[2]=((rn * (1.0 - ge2)) + alt) * sl;  return ecf;}  }
class C{  public PriorityQueue<E> asMinPriorityQueue(){  PriorityQueue<E> pq=new PriorityQueue<E>(entries.size());  for (  Map.Entry<E,Double> entry : entries.entrySet()) {    pq.add(entry.getKey(),-entry.getValue());  }  return pq;}  }
class C{  public static VisorThreadLockInfo from(LockInfo li){  assert li != null;  return new VisorThreadLockInfo(li.getClassName(),li.getIdentityHashCode());}  }
class C{  private static JValueSlider createField(Force f,int param){  double value=f.getParameter(param);  double min=f.getMinValue(param);  double max=f.getMaxValue(param);  String name=f.getParameterName(param);  JValueSlider s=new JValueSlider(name,min,max,value);  s.setBackground(Color.WHITE);  s.putClientProperty("force",f);  s.putClientProperty("param",new Integer(param));  s.setPreferredSize(new Dimension(300,30));  s.setMaximumSize(new Dimension(300,30));  return s;}  }
class C{  public String chompTo(String seq){  String data=consumeTo(seq);  matchChomp(seq);  return data;}  }
class C{  public synchronized void releaseLock(){  if (file != null && lock != null) {    try {      lock.release();    } catch (    Exception e) {    }    lock=null;  }}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(){  return create(Collections.<T>emptySet());}  }
class C{  public boolean isReversal(){  Object oo=get_Value(COLUMNNAME_IsReversal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean filter(Object o,List list) throws Exception {  for (  Protocol protocol : protocolList) {    if (protocol.isFiltered(o.getClass())) {      protocol.filterPacket(userConnection,o,list);      return true;    }  }  return false;}  }
class C{  protected void renderImage(Graphics g,Image image,Point loc){  Rectangle visibleImageArea=getClippedRectangle();  if (image != null) {    if (visibleImageArea != null) {      if (DEBUG) {        logger.fine("drawing " + visibleImageArea + " image at "+ loc.x+ ", "+ loc.y);      }      if (g instanceof Graphics2D) {        if (image instanceof BufferedImage) {          ((Graphics2D)g).drawImage(((BufferedImage)image).getSubimage(visibleImageArea.x,visibleImageArea.y,visibleImageArea.width,visibleImageArea.height),scalingXFormOp,loc.x,loc.y);        } else {          int sx1=visibleImageArea.x;          int sy1=visibleImageArea.y;          int sx2=sx1 + visibleImageArea.width;          int sy2=sy1 + visibleImageArea.height;          int dx1=loc.x;          int dy1=loc.y;          Point2D d2=scalingXFormOp.getPoint2D(new Point2D.Double(dx1 + visibleImageArea.width,dy1 + visibleImageArea.height),new Point2D.Double());          int dx2=(int)d2.getX();          int dy2=(int)d2.getY();          ((Graphics2D)g).drawImage(image,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,this);        }      }    }  } else   if (DEBUG) {    logger.fine("ignoring null bitmap image");  }}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  public Executor inheritEnv(boolean b){  this.inheritEnv=b;  return this;}  }
class C{  public void refreshCandidateTable(ChangeItem[] changesToScan){  if (changesToScan == null) {    changesToScan=candidates;  }  final List<String> paths=new ArrayList<String>();  for (  final ChangeItem change : changesToScan) {    final String path=change.getPendingChange().getLocalItem();    if (path != null) {      paths.add(path);    }  }  if (paths.size() > 0) {    final Command command=new ScanLocalWorkspaceCommand(repository,paths);    UICommandExecutorFactory.newUICommandExecutor(getShell()).execute(command);  }  final ItemSpec[] itemSpecs=new ItemSpec[]{new ItemSpec(ServerPath.ROOT,RecursionType.FULL)};  final AtomicReference<PendingChange[]> outCandidateChanges=new AtomicReference<PendingChange[]>();  repository.getWorkspace().getPendingChangesWithCandidates(itemSpecs,false,outCandidateChanges);  candidates=PendingChangesHelpers.pendingChangesToChangeItems(repository,outCandidateChanges.get());  table.setChangeItems(candidates);}  }
class C{  public static void calculateAffectedVehicleVkt(String[] args){  LOG.info("Calculating comparative VKT for affected vehicles.");  String affectedFile=args[1];  String networkFile=args[2];  String shapefile=args[3];  int idField=Integer.parseInt(args[4]);  String basePopulation=args[5];  String belconPopulation=args[6];  String kraaiconPopulation=args[7];  String outputFile=args[8];  int numberOfThreads=Integer.parseInt(args[9]);  Map<Id<Person>,Double[]> map=new TreeMap<>();  BufferedReader br=IOUtils.getBufferedReader(affectedFile);  try {    String line=br.readLine();    while ((line=br.readLine()) != null) {      Id<Person> id=Id.createPersonId(line);      Double[] da={0.0,0.0,0.0};      map.put(id,da);    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot read from " + affectedFile);  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + affectedFile);    }  }  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new MatsimNetworkReader(sc.getNetwork()).readFile(networkFile);  MyMultiFeatureReader mfr=new MyMultiFeatureReader();  try {    mfr.readMultizoneShapefile(shapefile,idField);  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot parse Cape Town shapefile.");  }  LOG.info("Cape Town shapefile has " + mfr.getAllZones().size() + " feature(s).");  Geometry geom=mfr.getAllZones().get(0);  LOG.info("Ready to process different scenarios (" + map.size() + " affected)...");  Counter counter=new Counter("  affected # ");  LOG.info("Reading base case...");  Scenario scBase=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(scBase).readFile(basePopulation);  LOG.info("Processing base case...");  ExecutorService threadExecutor=Executors.newFixedThreadPool(numberOfThreads);  Map<Id<Person>,Future<Double>> mapOfJobs=new TreeMap<>();  for (  Person person : scBase.getPopulation().getPersons().values()) {    if (map.containsKey(person.getId())) {      Plan plan=person.getSelectedPlan();      Callable<Double> job=new VktEstimatorCallable(sc.getNetwork(),plan,geom,counter);      Future<Double> submit=threadExecutor.submit(job);      mapOfJobs.put(person.getId(),submit);    }  }  scBase=null;  LOG.info("Waiting for parallel handling of base case...");  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  counter.printCounter();  LOG.info("Populating base case results...");  for (  Id<Person> id : mapOfJobs.keySet()) {    try {      double d=mapOfJobs.get(id).get();      Double[] da=map.get(id);      da[0]=d;      map.put(id,da);    } catch (    InterruptedException|ExecutionException e) {      e.printStackTrace();      throw new RuntimeException("Could not get callable results for person " + id.toString());    }  }  LOG.info("Reading Belcon case...");  counter.reset();  Scenario scBelcon=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(scBelcon).readFile(belconPopulation);  LOG.info("Processing Belcon case...");  threadExecutor=Executors.newFixedThreadPool(numberOfThreads);  mapOfJobs=new TreeMap<>();  for (  Person person : scBelcon.getPopulation().getPersons().values()) {    if (map.containsKey(person.getId())) {      Plan plan=person.getSelectedPlan();      Callable<Double> job=new VktEstimatorCallable(sc.getNetwork(),plan,geom,counter);      Future<Double> submit=threadExecutor.submit(job);      mapOfJobs.put(person.getId(),submit);    }  }  scBelcon=null;  LOG.info("Waiting for parallel handling of belcon case...");  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  counter.printCounter();  LOG.info("Populating belcon case results...");  for (  Id<Person> id : mapOfJobs.keySet()) {    try {      double d=mapOfJobs.get(id).get();      Double[] da=map.get(id);      da[1]=d;      map.put(id,da);    } catch (    InterruptedException|ExecutionException e) {      e.printStackTrace();      throw new RuntimeException("Could not get callable results for person " + id.toString());    }  }  LOG.info("Reading Kraaicon case...");  counter.reset();  Scenario scKraaicon=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(scKraaicon).readFile(kraaiconPopulation);  LOG.info("Processing Kraaicon case...");  threadExecutor=Executors.newFixedThreadPool(numberOfThreads);  mapOfJobs=new TreeMap<>();  for (  Person person : scKraaicon.getPopulation().getPersons().values()) {    if (map.containsKey(person.getId())) {      Plan plan=person.getSelectedPlan();      Callable<Double> job=new VktEstimatorCallable(sc.getNetwork(),plan,geom,counter);      Future<Double> submit=threadExecutor.submit(job);      mapOfJobs.put(person.getId(),submit);    }  }  scKraaicon=null;  LOG.info("Waiting for parallel handling of kraaicon case...");  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  counter.printCounter();  LOG.info("Populating kraaicon case results...");  for (  Id<Person> id : mapOfJobs.keySet()) {    try {      double d=mapOfJobs.get(id).get();      Double[] da=map.get(id);      da[2]=d;      map.put(id,da);    } catch (    InterruptedException|ExecutionException e) {      e.printStackTrace();      throw new RuntimeException("Could not get callable results for person " + id.toString());    }  }  BufferedWriter bw=IOUtils.getBufferedWriter(outputFile);  try {    bw.write("id,base,belcon,kraaicon");    bw.newLine();    for (    Id<Person> id : map.keySet()) {      Double[] da=map.get(id);      bw.write(String.format("%s,%.0f,%.0f,%.0f\n",id.toString(),da[0],da[1],da[2]));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + outputFile);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + outputFile);    }  }  LOG.info("Done comparing VKT.");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.EVENT_SOURCE__EVENT:    setEvent((Event)null);  return;case MappingPackage.EVENT_SOURCE__EVENT_PROPERTY:setEventProperty((Property)null);return;}super.eUnset(featureID);}  }
class C{  public TransformationPlan hasDeclarationError(Tree.Declaration node){  return declarationVisitor.getRecoveryPlan(node);}  }
class C{  public StringBuilder computeIndentation(int offset){  return computeIndentation(offset,false);}  }
class C{  @Override public String globalInfo(){  return "Applies several filters successively. In case all supplied filters " + "are StreamableFilters, it will act as a streamable one, too.";}  }
class C{  public void removeLinks(){  removeElement(Link.KEY);}  }
class C{  public static File showOpenFile(final Shell parent){  return showOpenFile(parent,null);}  }
class C{  public void mousePressed(MouseEvent e){  mouseSupport.fireMapMousePressed(e);  fireMouseLocation(e);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SharedPreferences putInt(String key,int value){  editor.putInt(key,value);  return this;}  }
class C{  public static byte[] drawableToByte(Drawable d){  return bitmapToByte(drawableToBitmap(d));}  }
class C{  private static void initTestFile(File blah) throws Exception {  FileOutputStream fos=new FileOutputStream(blah);  BufferedWriter awriter=new BufferedWriter(new OutputStreamWriter(fos,"8859_1"));  for (int i=0; i < 4000; i++) {    String number=new Integer(i).toString();    for (int h=0; h < 4 - number.length(); h++)     awriter.write("0");    awriter.write("" + i);    awriter.newLine();  }  awriter.flush();  awriter.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.544 -0400",hash_original_method="728CEF6DE4AAC5A65116740ACA7F6B05",hash_generated_method="E7ED1A3B5144C3E529A28E03AA44795D") public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  JarDepend(Depend depend,long digest){  _depend=depend;  _isDigestModified=_depend.getDigest() != digest;}  }
class C{  public NotificationChain basicSetBlock(Block newBlock,NotificationChain msgs){  Block oldBlock=block;  block=newBlock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TRY_STATEMENT__BLOCK,oldBlock,newBlock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static Object run(String rule,Map<String,Object> variables,Context context){  StellarProcessor processor=new StellarProcessor();  Assert.assertTrue(rule + " not valid.",processor.validate(rule,context));  Object ret=processor.parse(rule,null,StellarFunctions.FUNCTION_RESOLVER(),context);  byte[] raw=SerDeUtils.toBytes(ret);  Object actual=SerDeUtils.fromBytes(raw,Object.class);  Assert.assertEquals(ret,actual);  return ret;}  }
class C{  private boolean updateStoragePoolObject(UpdtableStoragePoolModel spModel){  Long freeCapacity=spModel.getFreeCapacityInKB();  String poolName=spModel.getPoolName();  Long totalCapacity=spModel.getTotalCapacityInKB();  Long subscribedCapacity=spModel.getSubscribedCapacityInKB();  try {    StoragePool pool=retriveStoragePoolFromDatabase();    if (pool != null) {      boolean isUpdateRequired=Boolean.FALSE;      logMessage("==> Comparing Existing StoregPool Object with Recieved Information :\n freeCapacity: Existing Value [{}] - Recieved Value [{}], \n PoolName: Existing Value [{}] - Recieved Value [{}], \n TotalCapacity: Existing Value [{}] - Recieved Value [{}], \n SubscribedCapacity: Existing Value [{}] - Recieved Value [{}] \n",new Object[]{pool.calculateFreeCapacityWithoutReservations(),freeCapacity,pool.getPoolName(),poolName,pool.getTotalCapacity(),totalCapacity,pool.getSubscribedCapacity(),subscribedCapacity});      if (freeCapacity != null && freeCapacity.longValue() != pool.calculateFreeCapacityWithoutReservations().longValue()) {        logMessage("Updating Free Capacity : from {} to {}",new Object[]{pool.calculateFreeCapacityWithoutReservations(),freeCapacity});        pool.setFreeCapacity(freeCapacity);        isUpdateRequired=true;      }      if (poolName != null && !poolName.equals(pool.getPoolName())) {        logMessage("Updating Pool Name : from {} to {}",new Object[]{pool.getPoolName(),poolName});        pool.setPoolName(poolName);        isUpdateRequired=true;      }      if (totalCapacity != null && totalCapacity.longValue() != pool.getTotalCapacity().longValue()) {        logMessage("Updating Total Capacity : from {} to {}",new Object[]{pool.getTotalCapacity(),totalCapacity});        pool.setTotalCapacity(totalCapacity);        isUpdateRequired=true;      }      if (subscribedCapacity != null && subscribedCapacity.longValue() != pool.getSubscribedCapacity().longValue()) {        logMessage("Updating Subscribed Capacity : from {} to {}",new Object[]{pool.getSubscribedCapacity(),subscribedCapacity});        pool.setSubscribedCapacity(subscribedCapacity);        isUpdateRequired=true;      }      if (isUpdateRequired) {        _dbClient.persistObject(pool);        logMessage("Storage Pool Object Updated",new Object[]{});      }      return isUpdateRequired;    } else {      _logger.debug("Indication not processed as no assosiated Storage Pool Object found");    }  } catch (  IOException e) {    _logger.error("Error occured while retriving StoragePool Object for Corresponding Indication {}",e.getMessage());  }catch (  NumberFormatException e) {    _logger.error("Error occured while reading capacity data from Corresponding Indication {}",e.getMessage());  }  return Boolean.FALSE;}  }
class C{  public synchronized void saveBatch(){  m_Saver.setRetrieval(weka.core.converters.Saver.BATCH);  m_ioThread=new SaveBatchThread(Saver.this);  m_ioThread.setPriority(Thread.MIN_PRIORITY);  m_ioThread.start();  block(true);}  }
class C{  public static double staticNextDouble(double freedom){synchronized (shared) {    return shared.nextDouble(freedom);  }}  }
class C{  public UserModificationConstraintException(String message){  super(message);}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  @Override public synchronized void start(){  log.debug("start");  if (mBtConnectThread != null) {    mBtConnectThread.cancel();    mBtConnectThread=null;  }  if (mBtWorkerThread != null) {    mBtWorkerThread.cancel();    mBtWorkerThread=null;  }  setState(STATE.LISTEN);}  }
class C{  private String normalizeFileName(String fileName){  String path=DelphiUtils.normalizeFileName(fileName);  path=path.replaceAll("\\\\\\.\\.","");  path=path.replaceAll("\\.\\.","");  return path;}  }
class C{  private BaseIndexStats warmUpIndex(final String name,final ICommitRecord commitRecord){  final ICheckpointProtocol ndx;  try {    ndx=journal.getIndexWithCommitRecord(name,commitRecord);  } catch (  Throwable t) {    if (InnerCause.isInnerCause(t,ClassNotFoundException.class)) {      log.warn("Could not load index: " + InnerCause.getInnerCause(t,ClassNotFoundException.class));      return null;    } else     throw new RuntimeException(t);  }  if (log.isDebugEnabled())   log.debug(ndx.getCheckpoint());{    final BaseIndexStats stats=ndx.dumpPages(true,visitLeaves);    if (log.isInfoEnabled())     log.info("name=" + name + ", stats="+ stats);    return stats;  }}  }
class C{  private static PolicyNodeImpl rewriteLeafNodes(int certIndex,Set<String> initPolicies,PolicyNodeImpl rootNode){  Set<PolicyNodeImpl> anyNodes=rootNode.getPolicyNodesValid(certIndex,ANY_POLICY);  if (anyNodes.isEmpty()) {    return rootNode;  }  PolicyNodeImpl anyNode=anyNodes.iterator().next();  PolicyNodeImpl parentNode=(PolicyNodeImpl)anyNode.getParent();  parentNode.deleteChild(anyNode);  Set<String> initial=new HashSet<>(initPolicies);  for (  PolicyNodeImpl node : rootNode.getPolicyNodes(certIndex)) {    initial.remove(node.getValidPolicy());  }  if (initial.isEmpty()) {    rootNode.prune(certIndex);    if (rootNode.getChildren().hasNext() == false) {      rootNode=null;    }  } else {    boolean anyCritical=anyNode.isCritical();    Set<PolicyQualifierInfo> anyQualifiers=anyNode.getPolicyQualifiers();    for (    String policy : initial) {      Set<String> expectedPolicies=Collections.singleton(policy);      PolicyNodeImpl node=new PolicyNodeImpl(parentNode,policy,anyQualifiers,anyCritical,expectedPolicies,false);    }  }  return rootNode;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void writeXML(File file,Document doc) throws IOException, FileNotFoundException {  if (file.getParent() != null) {    FileUtil.createDirectory(file.getParent());  }  FileOutputStream o=new FileOutputStream(file);  try {    XMLOutputter fmt=new XMLOutputter();    fmt.setFormat(Format.getPrettyFormat().setLineSeparator(System.getProperty("line.separator")).setTextMode(Format.TextMode.TRIM_FULL_WHITE));    fmt.output(doc,o);    o.flush();  }  finally {    o.close();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int computePastValue(int[][] data,int columnNumber,int t){  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=base;    pastVal+=data[t - k + 1 + p][columnNumber];  }  return pastVal;}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) / 4;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public void bezier(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4){  beginShape();  vertex(x1,y1);  bezierVertex(x2,y2,x3,y3,x4,y4);  endShape();}  }
class C{  public void copyFrom(Invocation invocation){  _classLoader=invocation._classLoader;  _rawHost=invocation._rawHost;  _rawURI=invocation._rawURI;  _hostName=invocation._hostName;  _port=invocation._port;  _uri=invocation._uri;  _depend=invocation._depend;  _queryString=invocation._queryString;}  }
class C{  protected DistributedSchedulingLock(){}  }
class C{  @Override public int compareTo(Value o){  if (o instanceof DoubleVal) {    return Double.compare(d,((DoubleVal)o).getDouble());  } else {    return 0;  }}  }
class C{  public WMSService(){  setLayer("BMNG");  setBaseUrl("http://wms.jpl.nasa.gov/wms.cgi?");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public synchronized void draw(final Graphics2D gfx,final float x,final float y){  if (!isEmpty()) {    m_textLayout.draw(gfx,x,y);    for (    final CHighlighting highlighting : new ArrayList<CHighlighting>(m_highlighting)) {      final double bpX=(x + highlighting.getStart()) - 2.;      final double bpY=(y - m_charHeight) + 4;      final double bpW=highlighting.getEnd() + 4;      final double bpH=m_charHeight - 1;      drawHighlighting(gfx,bpX,bpY,bpW,bpH,highlighting.getColor());    }  }}  }
class C{  public static boolean worldFileValuesAppearGeographic(AVList values){  double xLocation;  double yLocation;  double xPixelSize;  double yPixelSize;  Object o=values.getValue(WORLD_FILE_X_LOCATION);  if (o != null && o instanceof Double)   xLocation=(Double)o; else   return false;  o=values.getValue(WORLD_FILE_Y_LOCATION);  if (o != null && o instanceof Double)   yLocation=(Double)o; else   return false;  o=values.getValue(WORLD_FILE_X_PIXEL_SIZE);  if (o != null && o instanceof Double)   xPixelSize=(Double)o; else   return false;  o=values.getValue(WORLD_FILE_Y_PIXEL_SIZE);  if (o != null && o instanceof Double)   yPixelSize=(Double)o; else   return false;  return (Angle.isValidLongitude(xPixelSize) && Angle.isValidLatitude(yPixelSize) && Angle.isValidLongitude(xLocation)&& Angle.isValidLatitude(yLocation));}  }
class C{  public JCTree translateTopLevelClass(JCTree cdef,TreeMaker make){  this.make=make;  pt=null;  return translate(cdef,null);}  }
class C{  public void sendUpdateEntity(Entity entity){  send(new Packet(Packet.COMMAND_ENTITY_UPDATE,entity));}  }
class C{  @Override public void installConfigurationFiles(Session session,AcInstallationHistoryPojo history,Map<String,String> configurationFileContentsByFilename,Set<AuthorizableInstallationHistory> authorizableInstallationHistorySet) throws Exception {  String origThreadName=Thread.currentThread().getName();  try {    Thread.currentThread().setName(origThreadName + "-ACTool-Config-Worker");    StopWatch sw=new StopWatch();    sw.start();    isExecuting=true;    String message="*** Applying AC Tool Configuration...";    LOG.info(message);    history.addMessage(message);    if (configurationFileContentsByFilename != null) {      history.setConfigFileContentsByName(configurationFileContentsByFilename);      AcConfiguration acConfiguration=configurationMerger.getMergedConfigurations(configurationFileContentsByFilename,history,configReader);      history.setAcConfiguration(acConfiguration);      installMergedConfigurations(history,session,authorizableInstallationHistorySet,acConfiguration);      history.addVerboseMessage("Finished (transient) installation of access control configuration without errors, saving now...");      session.save();      history.addMessage("Persisted changes of ACLs");      removeObsoleteAuthorizables(history,session,acConfiguration.getObsoleteAuthorizables());    }    sw.stop();    long executionTime=sw.getTime();    LOG.info("Successfully applied AC Tool configuration in " + msHumanReadable(executionTime));    history.setExecutionTime(executionTime);  } catch (  Exception e) {    history.addError(e.toString());    throw e;  } finally {    try {      acHistoryService.persistHistory(history);    } catch (    Exception e) {      LOG.warn("Could not persist history, e=" + e,e);    }    Thread.currentThread().setName(origThreadName);    isExecuting=false;  }}  }
class C{  public final void testRemoveHelperTextColorsFromArray(){  int helperTextColor1=Color.BLACK;  int helperTextColor2=Color.GRAY;  int helperTextColor3=Color.WHITE;  int[] helperTextColors=new int[2];  helperTextColors[0]=helperTextColor1;  helperTextColors[1]=helperTextColor2;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColors(helperTextColors);  passwordEditText.addHelperTextColor(helperTextColor3);  passwordEditText.removeAllHelperTextColors(helperTextColors);  passwordEditText.removeAllHelperTextColors(helperTextColors);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(helperTextColor3,(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  private boolean isWriteAsRectangle(Polygon polygon){  if (!isOptimizeRectangle)   return false;  if (lrsDim(polygon) != 0) {    return false;  }  return polygon.isRectangle();}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  Boolean isJDK11Target(Class clazz){  return (Boolean)jdk11AppletInfo.get(clazz.toString());}  }
class C{  public MutableFloat(final String value) throws NumberFormatException {  super();  this.value=Float.parseFloat(value);}  }
class C{  public boolean isMimeTypeSupported(String mimeType){  return "*".equals(mimeType) || !TextUtils.isEmpty(mimeType) && mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  public SearchAction(String keywords){  this(SearchInformation.createKeywordSearch(keywords,null,MediaType.getTorrentMediaType()),I18n.tr("Search for Keywords: {0}"));}  }
class C{  private String rebuildSlonyQuery(String cmdType,String cmdData,String tableSchemaName) throws ReplicatorException {  StringBuffer sb=new StringBuffer();  if (cmdType.compareTo("I") == 0) {    sb.append("INSERT INTO ");    sb.append(tableSchemaName);    sb.append(" ");  } else   if (cmdType.compareTo("U") == 0) {    sb.append("UPDATE ONLY ");    sb.append(tableSchemaName);    sb.append(" SET ");  } else   if (cmdType.compareTo("D") == 0) {    sb.append("DELETE FROM ONLY ");    sb.append(tableSchemaName);    sb.append(" WHERE ");  } else   throw new ExtractorException("Unrecognized command type: " + cmdType);  sb.append(cmdData);  return sb.toString();}  }
class C{  public NewInstanceOperatorExpression(String className){  this.className=className;}  }
class C{  public static int fillStackTraceElements(Thread t,StackTraceElement[] stackTraceElements){  Arrays.fill(stackTraceElements,null);  StackTraceElement[] st=t.getStackTrace();  int n=Math.min(st.length,stackTraceElements.length);  System.arraycopy(st,0,stackTraceElements,0,n);  return n;}  }
class C{  private boolean validateFolder(File defaultFingerprintFolder){  return defaultFingerprintFolder.exists() && defaultFingerprintFolder.canRead() && defaultFingerprintFolder.canWrite();}  }
class C{  public void addGreeting(final String text){  addGreeting(text,null);}  }
class C{  public static boolean begin(int timeout) throws GenericTransactionException {  UserTransaction ut=TransactionFactoryLoader.getInstance().getUserTransaction();  if (ut != null) {    try {      int currentStatus=ut.getStatus();      if (Debug.verboseOn()) {        Debug.logVerbose("Current status : " + getTransactionStateString(currentStatus),module);      }      if (currentStatus == Status.STATUS_ACTIVE) {        if (Debug.verboseOn()) {          Debug.logVerbose("Active transaction in place, so no transaction begun",module);        }        return false;      } else       if (currentStatus == Status.STATUS_MARKED_ROLLBACK) {        Exception e=getTransactionBeginStack();        if (e != null) {          Debug.logWarning(e,"Active transaction marked for rollback in place, so no transaction begun; this stack trace shows when the exception began: ",module);        } else {          Debug.logWarning("Active transaction marked for rollback in place, so no transaction begun",module);        }        RollbackOnlyCause roc=getSetRollbackOnlyCause();        if (UtilValidate.isNotEmpty(roc)) {          throw new GenericTransactionException("The current transaction is marked for rollback, not beginning a new transaction and aborting current operation; the rollbackOnly was caused by: " + roc.getCauseMessage(),roc.getCauseThrowable());        } else {          return false;        }      }      internalBegin(ut,timeout);      clearTransactionStamps();      getTransactionStartStamp();      setTransactionBeginStack();      if (debugResources()) {        DebugXaResource dxa=new DebugXaResource();        try {          dxa.enlist();        } catch (        XAException e) {          Debug.logError(e,module);        }      }      return true;    } catch (    NotSupportedException e) {      throw new GenericTransactionException("Not Supported error, could not begin transaction (probably a nesting problem)",e);    }catch (    SystemException e) {      throw new GenericTransactionException("System error, could not begin transaction",e);    }  } else {    if (Debug.infoOn())     Debug.logInfo("No user transaction, so no transaction begun",module);    return false;  }}  }
class C{  public List<String> header(String key){  return headers.get(key);}  }
class C{  public double doOperation() throws OperatorFailedException {  final double priorMean=prior.mean();  final double priorVariance=prior.variance();  double priorRate;  double priorShape;  if (priorMean == 0) {    priorRate=0;    priorShape=-0.5;  } else {    priorRate=priorMean / priorVariance;    priorShape=priorMean * priorRate;  }  final double mu=meanParameter.getParameterValue(0);  double SSE=0;  int n=0;  for (  Attribute<double[]> statistic : dataList) {    for (    double x : statistic.getAttributeValue()) {      if (isLog) {        final double logX=Math.log(x);        SSE+=(logX - mu) * (logX - mu);      } else {        SSE+=(x - mu) * (x - mu);      }      n++;    }  }  final double shape=priorShape + n / 2.0;  final double rate=priorRate + 0.5 * SSE;  final double draw=MathUtils.nextGamma(shape,rate);  precisionParameter.setParameterValue(0,draw);  return 0;}  }
class C{  public void removeFacets(){  _facetFields=new ArrayList<>();}  }
class C{  public final boolean equalHeaders(Instances dataset){  if (m_ClassIndex != dataset.m_ClassIndex) {    return false;  }  if (m_Attributes.size() != dataset.m_Attributes.size()) {    return false;  }  for (int i=0; i < m_Attributes.size(); i++) {    if (!(attribute(i).equals(dataset.attribute(i)))) {      return false;    }  }  return true;}  }
class C{  private int readData(InputStream is,int length){  int read=0;  int count;  byte[] buf=new byte[length];  try {    while (is.available() > 0) {      count=is.read(buf,read,length - read);      read+=count;    }  } catch (  IOException e) {    log("IOException from readData");    e.printStackTrace();  }  return read;}  }
class C{  private static int med3(int[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  public void renewServiceCollector(DNSRecord record){  ServiceInfo info=record.getServiceInfo();  if (_serviceCollectors.containsKey(info.getType().toLowerCase())) {    this.startServiceResolver(info.getType());  }}  }
class C{  public void testSingleLineStringRoundTrip() throws SAXException, IOException, ParserConfigurationException {  LineStringGenerator pg=new LineStringGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberPoints(10);  LineString pt=(LineString)pg.create();  checkRoundTrip(pt);}  }
class C{  public void addMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener){synchronized (changeListenerList) {    changeListenerList.add(listener);  }}  }
class C{  private void DFS(TreeNode node){  Enumeration<TreeNode> childEnum=node.getChildren();  while (childEnum.hasMoreElements()) {    TreeNode child=childEnum.nextElement();    DFS(child);  }  list.add(node);}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  private void fillCategories(final List<Crumb> categoriesCrumbs,final long shopId,final long categoryId,final Set<Long> shopCategoryIds,final boolean isContent){  if (categoryId > 0l && shopCategoryIds.contains(categoryId)) {    final Category category=categoryService.getById(categoryId);    if (!category.isRoot() && !CentralViewLabel.INCLUDE.equals(category.getUitemplate())) {      categoriesCrumbs.add(new Crumb("category",category.getName(),category.getDisplayName(),getCategoryLinkParameters(categoryId,isContent),getRemoveCategoryLinkParameters(category,shopCategoryIds,isContent)));      final Long parentId=shopService.getShopCategoryParentId(shopId,categoryId);      if (parentId != null) {        fillCategories(categoriesCrumbs,shopId,parentId,shopCategoryIds,isContent);      }    }  }}  }
class C{  public static List<String> tokenizeCommand(String commandline){  List<String> tokens=ArgumentTokenizer.tokenize(commandline,true);  List<String> args=new ArrayList<>();  for (  String token : tokens) {    args.add(token.replaceAll("\\\\","\\\\").replaceAll("^\"|\"$",""));  }  return args;}  }
class C{  private void readDoctype(boolean saveDtdText) throws IOException, XmlPullParserException {  read(START_DOCTYPE);  int startPosition=-1;  if (saveDtdText) {    bufferCapture=new StringBuilder();    startPosition=position;  }  try {    skip();    rootElementName=readName();    readExternalId(true,true);    skip();    if (peekCharacter() == '[') {      readInternalSubset();    }    skip();  }  finally {    if (saveDtdText) {      bufferCapture.append(buffer,0,position);      bufferCapture.delete(0,startPosition);      text=bufferCapture.toString();      bufferCapture=null;    }  }  read('>');}  }
class C{  public static int indexOf(Object[] arr,Object value){  int l=arr.length;  for (int iter=0; iter < l; iter++) {    if (arr[iter] == value) {      return iter;    }  }  return -1;}  }
class C{  public static String timeStamp2DateInSeconds(long timestamp){  return timeStamp2Date(timestamp,"yyyy-MM-dd HH:mm:ss",true);}  }
class C{  public GroupRoleExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void childElements(SimpleMethod method,Element element,String... validChildElementNames) throws ValidationException {  Set<String> validNames=new HashSet<String>();  for (  String name : validChildElementNames) {    validNames.add(name);  }  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      if (!validNames.contains(childElement.getTagName())) {        handleError("Child element <" + childElement.getTagName() + "> is not valid.",method,element);      }    }    node=node.getNextSibling();  }}  }
class C{  protected String doIt() throws Exception {  String result=null;  ArrayList<Object> parameters=new ArrayList<Object>();  StringBuffer whereClause=new StringBuffer(MResource.COLUMNNAME_ManufacturingResourceType + "=? AND AD_Client_ID=?");  parameters.add(MResource.MANUFACTURINGRESOURCETYPE_Plant);  parameters.add(m_AD_Client_ID);  if (p_S_Resource_ID > 0) {    whereClause.append(" AND S_Resource_ID=?");    parameters.add(p_S_Resource_ID);  }  List<MResource> plants=new Query(getCtx(),MResource.Table_Name,whereClause.toString(),get_TrxName()).setParameters(parameters).list();  if (plants.size() == 0) {    throw new AdempiereException("No plants found");  }  for (  MResource plant : plants) {    log.info("Run MRP to Plant: " + plant.getName());    parameters=new ArrayList<Object>();    whereClause=new StringBuffer("AD_Client_ID=?");    parameters.add(m_AD_Client_ID);    if (p_AD_Org_ID > 0) {      whereClause.append(" AND AD_Org_ID=?");      parameters.add(p_AD_Org_ID);    }    List<MOrg> organizations=new Query(getCtx(),MOrg.Table_Name,whereClause.toString(),get_TrxName()).setParameters(parameters).list();    for (    MOrg organization : organizations) {      log.info("Run MRP to Organization: " + organization.getName());      if (p_M_Warehouse_ID == 0) {        MWarehouse[] ws=MWarehouse.getForOrg(getCtx(),organization.getAD_Org_ID());        for (        MWarehouse w : ws) {          log.info("Run MRP to Wharehouse: " + w.getName());          deleteRecords(m_AD_Client_ID,organization.getAD_Org_ID(),plant.getS_Resource_ID(),w.getM_Warehouse_ID());          createRecords(m_AD_Client_ID,organization.getAD_Org_ID(),plant.getS_Resource_ID(),w.getM_Warehouse_ID());          result=result + "<br>finish MRP to Warehouse " + w.getName();        }      } else {        log.info("Run MRP to Wharehouse: " + p_M_Warehouse_ID);        deleteRecords(m_AD_Client_ID,organization.getAD_Org_ID(),plant.getS_Resource_ID(),p_M_Warehouse_ID);        createRecords(m_AD_Client_ID,organization.getAD_Org_ID(),plant.getS_Resource_ID(),p_M_Warehouse_ID);      }      result=result + "<br>finish MRP to Organization " + organization.getName();    }    result=result + "<br>finish MRP to Plant " + plant.getName();  }  if (Util.isEmpty(result,true)) {    return "No records found";  }  return Msg.getMsg(getCtx(),"ProcessOK");}  }
class C{  @Override protected void injectComponent(BrainPhaserComponent component){  component.inject(this);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:08.891 -0500",hash_original_method="452A1F4FB6807BADBE67E3FEF1703DF6",hash_generated_method="52231DDFA78692940605245633DE0D64") public AbsoluteSizeSpan(int size,boolean dip){  mSize=size;  mDip=dip;}  }
class C{  @Override public Node next(){  Node cur=next;  next=next.getNextSibling();  return cur;}  }
class C{  public BaseDateTime(){  this(DateTimeUtils.currentTimeMillis(),ISOChronology.getInstance());}  }
class C{  public ComputeVirtualPoolRestRep create(ComputeVirtualPoolCreateParam input){  return client.post(ComputeVirtualPoolRestRep.class,input,baseUrl);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public GsonRequest(String url,Type type,Map<String,String> headers,Response.Listener<T> listener,Response.ErrorListener errorListener){  this(Method.GET,null,url,type,headers,listener,errorListener);}  }
class C{  FileSetSetting(Properties defaultProps,Properties props,String key,File[] defaultValue){  super(defaultProps,props,key,decode(new HashSet<File>(Arrays.asList(defaultValue))));  setPrivate(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.363 -0500",hash_original_method="7A3E4AE36777C6F2CF79A6B3882A3053",hash_generated_method="A03BB373737BEB4EF11616B7687DED0D") public SecurityServerHeader createSecurityServerHeader(){  SecurityServer secServer=new SecurityServer();  return secServer;}  }
class C{  public CheerleaderClient build(){  if (this.context == null) {    throw new IllegalStateException("Context should be passed using " + "'Builder.from' to build the client.");  }  if (this.apiKey == null) {    throw new IllegalStateException("Api key should be passed using " + "'Builder.with' to build the client.");  }  if (this.artistName == null) {    throw new IllegalStateException("Artist name should be passed using " + "'Builder.supports' to build the client.");  }  CheerleaderClient instance=getInstance(this.context,this.apiKey,this.artistName);  if (!this.apiKey.equals(instance.mClientKey)) {    throw new IllegalStateException("Only one api key can be used at the same time.");  }  if (logLevel != LOG_NONE) {    sInstance.setLog(logLevel);  }  return sInstance;}  }
class C{  public Model(Node node,BayesIm bayesIm,JComponent messageAnchor){  if (node == null) {    throw new NullPointerException("Node must not be null.");  }  if (bayesIm == null) {    throw new NullPointerException("Bayes IM must not be null.");  }  if (messageAnchor == null) {    throw new NullPointerException("Message anchor must not be null.");  }  this.bayesIm=bayesIm;  this.nodeIndex=bayesIm.getNodeIndex(node);  this.messageAnchor=messageAnchor;}  }
class C{  public static boolean removeCount(Context context){  return applyCount(context,0);}  }
class C{  private void writeAttribute(OutputNode node,Object value,Label label) throws Exception {  if (value != null) {    Decorator decorator=label.getDecorator();    String name=label.getName();    String text=factory.getText(value);    OutputNode done=node.setAttribute(name,text);    decorator.decorate(done);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.731 -0400",hash_original_method="607673C7F0C479BD29B5457E75015964",hash_generated_method="46BBFE1C9011ABBEAFC2BEDE735CE8AA") @Override public void close() throws IOException {  out.close();}  }
class C{  private void doScroll(int deltaX,int deltaY){  if (deltaX != 0 || deltaY != 0) {    smoothScrollBy(deltaX,deltaY);  }}  }
class C{  @Override public Object compute(@NotNull ArrayList<Map<String,Object>> rows) throws Exception {  if (rows.size() == 0) {    return null;  }  if (isFirst) {    for (int i=0; i < rows.size(); i++) {      if (rows.get(i).get(column) != null) {        return rows.get(i).get(column);      }    }  } else {    for (int i=(rows.size() - 1); i >= 0; i--) {      if (rows.get(i).get(column) != null) {        return rows.get(i).get(column);      }    }  }  return null;}  }
class C{  @Override public synchronized int replace(final byte[] key,final Rewriter rewriter) throws IOException, SpaceExceededException {  int d=0;  for (  final blobItem bi : this.blobs) {    d+=bi.blob.replace(key,rewriter);  }  return d;}  }
class C{  public void removeBidirectionalLink(String fromLocation,String toLocation){  links.remove(fromLocation,toLocation);  links.remove(toLocation,fromLocation);}  }
class C{  private byte[] calculateCMSKeyChecksum(byte[] key){  byte[] result=new byte[8];  sha1.update(key,0,key.length);  sha1.doFinal(digest,0);  System.arraycopy(digest,0,result,0,8);  return result;}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  protected SVGOMAnimateColorElement(){}  }
class C{  public void localToWorld(Vector3 coord){  coord.setX(coord.getX() + physicalWidth / 2 + tiePoint[0]);  coord.setY(coord.getY() - (physicalLength / 2) + tiePoint[1]);  coord.setZ(coord.getZ() + tiePoint[2]);}  }
class C{  public void sawUniversal(){  clear();  universalHandler=true;}  }
class C{  protected void newBuffer(){  currentBufferToFill=bufferSet._getFirstEmptyBuffer();  if (currentBufferToFill == null)   throw new RuntimeException("Oops, no empty buffer.");  currentBufferToFill.level(currentTreeHeight - 1);  currentBufferToFill.weight(sampler.getWeight());}  }
class C{  public Map flatten(){  return flatten(null);}  }
class C{  @NonNull public T view(){  return view;}  }
class C{  public void address(String addr){  this.addr=addr;}  }
class C{  @POST @Path("internal/pull") public Response downloadBackupFile(@QueryParam("backupname") String backupName,@QueryParam("endpoint") URI endpoint){  log.info("To download files of backupname={} endpoint={}",backupName,endpoint);  downloadTask=new DownloadExecutor(backupName,backupOps,endpoint);  Thread downloadThread=new Thread(downloadTask);  downloadThread.setDaemon(true);  downloadThread.setName("PullBackupFromOtherNode");  downloadThread.start();  return Response.status(ASYNC_STATUS).build();}  }
class C{  @Override protected boolean beforeSave(boolean newRecord){  if (isDueFixed()) {    int dd=getFixMonthDay();    if (dd < 1 || dd > 31) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Invalid@ @FixMonthDay@"));      return false;    }    dd=getFixMonthCutoff();    if (dd < 1 || dd > 31) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Invalid@ @FixMonthCutoff@"));      return false;    }  }  if (Integer.signum(getNetDays()) < 0) {    throw new AdempiereException(Msg.parseTranslation(getCtx(),"@NetDays@") + " " + Msg.parseTranslation(getCtx(),"@positive.number@"));  }  if (!newRecord || !isValid())   validate();  return true;}  }
class C{  public Boolean isUptCompatibilityEnabled(){  return uptCompatibilityEnabled;}  }
class C{  public URL findResourceInAddOn(String name){  return super.findResource(name);}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public CProjectContainerNodeMenuBuilder(final JTree projectTree,final IDatabase database){  super(projectTree);  this.database=database;}  }
class C{  public boolean hasAllCols(){  return allColumns;}  }
class C{  public int size(){  return mCodes.size();}  }
class C{  public boolean first() throws SQLException {  checkState();  boolean b=rs.first();  notifyCursorMoved();  return b;}  }
class C{  private static ArrayList<String> readAllFiles(File[] files) throws FileNotFoundException {  ArrayList<String> strings=new ArrayList<String>();  for (  File file : files) {    strings.add(readString(file));  }  return strings;}  }
class C{  public static URI uri(String r){  if (r.startsWith("Q") || r.startsWith("P")) {    return new URIImpl(WikibaseUris.getURISystem().entity() + r);  }  return new URIImpl(r);}  }
class C{  public StrokeCellRenderer(){  panel=new JPanel();  panel.setOpaque(true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CopyOnWriteArrayList(E[] toCopyIn){  setArray(Arrays.copyOf(toCopyIn,toCopyIn.length,Object[].class));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:40.407 -0500",hash_original_method="A5AEC64904918A444A1E291605339382",hash_generated_method="A5AEC64904918A444A1E291605339382") void draw(Canvas canvas,Paint paint){  if (mCachedPath == null) {    makePath();  }  canvas.drawPath(mCachedPath,paint);}  }
class C{  private void respondError(AdHocCommandData response,XMPPError error){  response.setType(IQ.Type.ERROR);  response.setError(error);  connection.get().sendPacket(response);}  }
class C{  protected final void collectFFDCDBData(Connection con) throws AdeException {  try {    exportDBTables(con);    fileLength=archiveExportedDBTables();  } catch (  AdeException e) {    throw e;  }catch (  Exception e) {    throw new AdeExtUsageException("Exception in exporting files : ",e);  }}  }
class C{  public boolean isLast(char c){  return str.charAt(str.length() - 1) == c;}  }
class C{  public WhereBuilder and(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "AND",columnName,op,value);  return this;}  }
class C{  public UF7(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public static RibbonMaker createFromDecimalDegrees(double[] coords){  return new RibbonMaker(GeoArray.Double.createFromLatLonDegrees(coords));}  }
class C{  public void testIsValid(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  assertEquals(true,instance.isValid(msgStandalone));  assertEquals(false,instance.isValid(msgInvalidStandalone));}  }
class C{  public static int waitingRobots(final MultiProtocolURL url,final RobotsTxt robots,final ClientIdentification.Agent agent){  int robotsDelay=0;  RobotsTxtEntry robotsEntry=robots.getEntry(url,agent);  robotsDelay=(robotsEntry == null) ? 0 : robotsEntry.getCrawlDelayMillis();  if (robotsEntry != null && robotsDelay == 0 && robotsEntry.getAgentName() != null)   return -1;  return robotsDelay;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_KEY_1__KEY_ID_1:    setKeyId_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void eFeature1Init(int y,int yp,Map fmap){  eFeature1Init(y,yp);  strId2IdxAdd(fmap);}  }
class C{  public final void writeFloat(float v) throws IOException {  writeInt(Float.floatToIntBits(v));}  }
class C{  protected String paramNameOrValue() throws ParseException {  int startIdx=lexer.getPtr();  while (lexer.hasMoreChars()) {    char next=lexer.lookAhead(0);    boolean isValidChar=false;switch (next) {case '[':case ']':case '/':case ':':case '&':case '+':case '$':      isValidChar=true;  }  if (isValidChar || isUnreserved(next)) {    lexer.consume(1);  } else   if (isEscaped()) {    lexer.consume(3);  } else   break;}return lexer.getBuffer().substring(startIdx,lexer.getPtr());}  }
class C{  public void clear(){  initialize();}  }
class C{  public static long decodeDate(String date){  long millis=-1;  String normalizedDate=date.replaceAll("Z$","+0000");  for (int i=0; millis == -1 && i < ISO8601DATEFORMAT.length; i++) {    try {      Date iso8601=ISO8601DATEFORMAT[i].parse(normalizedDate);      millis=iso8601.getTime();    } catch (    ParseException ex) {    }  }  if (millis == -1) {    Time t=new Time(UTC.getID());    t.parse3339(date);    millis=t.toMillis(false);  }  return millis;}  }
class C{  protected void destroyEntry(HashEntry<K,V> entry){  entry.next=null;  entry.key=null;  entry.value=null;}  }
class C{  ClientResponse post(URI resourceUri,String postData){  return post(resourceUri,postData,VPlexApiConstants.ACCEPT_JSON_FORMAT_0);}  }
class C{  public boolean isDrawCubicEnabled(){  return mDrawCubic;}  }
class C{  public static void rReplaceLiterals(Hop hop,LocalVariableMap vars) throws DMLRuntimeException {  LiteralReplacement.rReplaceLiterals(hop,vars);}  }
class C{  private AMD64SaveRegistersOp emitSaveAllRegisters(Register[] savedRegisters,boolean supportsRemove){  AllocatableValue[] savedRegisterLocations=new AllocatableValue[savedRegisters.length];  for (int i=0; i < savedRegisters.length; i++) {    savedRegisterLocations[i]=allocateSaveRegisterLocation(savedRegisters[i]);  }  return emitSaveRegisters(savedRegisters,savedRegisterLocations,supportsRemove);}  }
class C{  public Path createClasspath(){  if (taskClasspath == null) {    taskClasspath=new Path(getProject());  }  return taskClasspath.createPath();}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public static boolean readEmptyListFollowedBy(BashPsiBuilder builder,TokenSet tokens){  if (tokens.contains(builder.getTokenType())) {    return true;  }  int steps=0;  while (builder.lookAhead(steps) == BashTokenTypes.LINE_FEED) {    steps++;  }  if (builder.lookAhead(steps) == BashTokenTypes.SEMI) {    steps++;  }  while (builder.lookAhead(steps) == BashTokenTypes.LINE_FEED) {    steps++;  }  if (tokens.contains(builder.lookAhead(steps))) {    for (int i=0; i < steps; i++) {      builder.advanceLexer();      builder.getTokenType();    }    return true;  }  return false;}  }
class C{  private void executeGroupValidation(){  try {    groupedProperty.validateForPropertiesUpdate(correctUpdateMap.values());    propertyValidation=null;  } catch (  PropertyValidationException exception) {    propertyValidation=exception.getPropertyValidation();  }}  }
class C{  protected void processCDATA() throws Exception {  if (!XMLUtil.checkLiteral(this.reader,"CDATA[")) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<![[CDATA[");  }  this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());  Reader reader=new CDATAReader(this.reader);  this.builder.addPCData(reader,this.reader.getSystemID(),this.reader.getLineNr());  reader.close();}  }
class C{  private static Map<String,Set<String>> filterQueryParamsByKey(Map<String,Set<String>> queryParams,String queryKey){  Map<String,Set<String>> filteredQueryParams=new HashMap<>();  for (  Map.Entry<String,Set<String>> entry : queryParams.entrySet()) {    if (entry.getKey().startsWith(queryKey)) {      filteredQueryParams.put(entry.getKey(),entry.getValue());    }  }  return filteredQueryParams;}  }
class C{  protected void addChannelId(String userId,String channel,String channelId){  if (!userChannels.containsKey(userId)) {    userChannels.putIfAbsent(userId,new ConcurrentHashMap<String,Set<String>>(ESTIMATED_USER_CHANNELS_PER_APPLICATION));  }  ConcurrentMap<String,Set<String>> channelIds=userChannels.get(userId);  if (!channelIds.containsKey(channel)) {    channelIds.putIfAbsent(channel,synchronizedSet(new HashSet<String>(ESTIMATED_USER_CHANNELS_PER_SESSION)));  }  channelIds.get(channel).add(channelId);}  }
class C{  public static byte[] hash(byte[] body){  if (HASH_DIGEST != null) {    return HASH_DIGEST.digest(body);  } else {    throw new EvernoteUtilException(EDAM_HASH_ALGORITHM + " not supported",new NoSuchAlgorithmException(EDAM_HASH_ALGORITHM));  }}  }
class C{  Entry(Object key,Object value,ReferenceQueue queue,int hash,Entry next){  super(key,queue);  this.value=value;  this.hash=hash;  this.next=next;}  }
class C{  private void updateAllElements(){  for (  Organization org : getOrgDao().findAll()) {    update(org,org.getDbId());  }  for (  ITVerbund itverbund : getItverbundDao().findAll()) {    update(itverbund,itverbund.getDbId());  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MBPartner_Location[ID=").append(get_ID()).append(",C_Location_ID=").append(getC_Location_ID()).append(",Name=").append(getName()).append("]");  return sb.toString();}  }
class C{  public static Object copy(Object orig) throws IOException, ClassNotFoundException {  SimpleByteArrayOutputStream fbos=new SimpleByteArrayOutputStream();  ObjectOutputStream outStream=new ObjectOutputStream(fbos);  try {    outStream.writeObject(orig);    outStream.flush();  }  finally {    outStream.close();  }  ObjectInputStream inStream=new ObjectInputStreamWithTCCL(fbos.getInputStream());  try {    return inStream.readObject();  }  finally {    inStream.close();  }}  }
class C{  public Object refresh(){  fireTableRowsUpdated(0,getRowCount());  return null;}  }
class C{  public Quaternionf rotateX(float angle){  return rotateX(angle,this);}  }
class C{  public static boolean isTotal(Automaton a,int minAlphabet,int maxAlphabet){  if (a.isAccept(0) && a.getNumTransitions(0) == 1) {    Transition t=new Transition();    a.getTransition(0,0,t);    return t.dest == 0 && t.min == minAlphabet && t.max == maxAlphabet;  }  return false;}  }
class C{  private static PipelineOp convertZeroLengthPath(PipelineOp left,final ZeroLengthPathNode zlpNode,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final IVariableOrConstant<?> leftTerm=(IVariableOrConstant<?>)zlpNode.left().getValueExpression();  final IVariableOrConstant<?> rightTerm=(IVariableOrConstant<?>)zlpNode.right().getValueExpression();  left=applyQueryHints(new ZeroLengthPathOp(leftOrEmpty(left),new NV(ZeroLengthPathOp.Annotations.LEFT_TERM,leftTerm),new NV(ZeroLengthPathOp.Annotations.RIGHT_TERM,rightTerm),new NV(Predicate.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)),zlpNode,ctx);  return left;}  }
class C{  @SuppressWarnings("rawtypes") @Override public Map func_77277_b(){  return affectedPlayers;}  }
class C{  static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){  File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName));  if (fileForNewFile.exists()) {    if (fileForNewFile.length() == fileSize) {      return true;    }    if (deleteFileOnMismatch) {      fileForNewFile.delete();    }  }  return false;}  }
class C{  public HGAtomRemoveRequestEvent(HGHandle handle){  super(handle);}  }
class C{  public synchronized void addRoom(String room){  if (!Helper.validateStream(room)) {    return;  }  connect();  room=room.toLowerCase();  if (rooms.add(room)) {    subRoom(room);  }}  }
class C{  public void fadeUpToLayer(int index){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,0,index + 1,true);  Arrays.fill(mIsLayerOn,index + 1,mLayers.length,false);  invalidateSelf();}  }
class C{  public T caseTraceEndRunCycle(TraceEndRunCycle object){  return null;}  }
class C{  public double manhattanDistance(final MutableDouble3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  private void run() throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("jdbcSampleWriter");  JdbcStreams myDb=new JdbcStreams(t,null,null);  List<PersonId> personIdList=PersonData.toPersonIds(PersonData.loadPersonData(props));  personIdList.add(new PersonId(99999));  TStream<PersonId> personIds=t.collection(personIdList);  TStream<Person> persons=myDb.executeStatement(personIds,null,null,null);  persons.sink(null);  tp.submit(t);}  }
class C{  public static boolean contains(SpatialComparable box1,SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  for (int i=0; i < dim; i++) {    if (box2.getMin(i) < box1.getMin(i) || box1.getMax(i) < box2.getMax(i)) {      return false;    }  }  return true;}  }
class C{  public void run(){  IPath[] paths=BuildPathDialogAccess.chooseJAREntries(getShell(),null,new IPath[0]);  if (paths != null && paths.length > 0) {    IRuntimeClasspathEntry[] res=new IRuntimeClasspathEntry[paths.length];    for (int i=0; i < res.length; i++) {      IResource elem=ResourcesPlugin.getWorkspace().getRoot().getFile(paths[i]);      res[i]=JavaRuntime.newArchiveRuntimeClasspathEntry(elem);    }    getViewer().addEntries(res);  }}  }
class C{  public ZDT2(){  this(30);}  }
class C{  public boolean isRunning(){  return this.startTime > 0 && this.stopTime == 0;}  }
class C{  public PlaceholderReplacer(String searchString,String replacementString){  this.source="(dummy)";  Map<String,Integer> placeholderNameToIndex=Maps.newHashMap();  this.searchPattern=createPattern(searchString,placeholderNameToIndex);  this.replacement=createReplace(replacementString,placeholderNameToIndex);}  }
class C{  public Vector add(Vector other){  if (!(other instanceof GF2Vector)) {    throw new ArithmeticException("vector is not defined over GF(2)");  }  GF2Vector otherVec=(GF2Vector)other;  if (length != otherVec.length) {    throw new ArithmeticException("length mismatch");  }  int[] vec=IntUtils.clone(((GF2Vector)other).v);  for (int i=vec.length - 1; i >= 0; i--) {    vec[i]^=v[i];  }  return new GF2Vector(length,vec);}  }
class C{  public Stage(Pipeline pipeline){  this.pipeline=pipeline;}  }
class C{  @After public void teardown(){  if (pipeline != null) {    logger.info("Shutting down pipeline...");    pipeline.shutdown(true);  }  if (runtime != null) {    logger.info("Releasing runtime...");    runtime.release();  }}  }
class C{  protected ArrayList<Instance> contents(){  return m_Dataset;}  }
class C{  public boolean isEmpty(){  return timeWindow.isEmpty();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element createdNode;  Node parentNode;  doc=(Document)load("staff",false);  createdNode=doc.createElement("employee");  parentNode=createdNode.getParentNode();  assertNull("parentNode",parentNode);}  }
class C{  protected ArgumentPairImpl(){  super();}  }
class C{  public TestCase readJUnitTestCase(String className,final String methodName,final CompilationUnit cu){  CompoundTestCase testCase=new CompoundTestCase(className,methodName);  TestExtractingVisitor testExtractingVisitor=new TestExtractingVisitor(testCase,className,null,this);  compilationUnit=cu;  compilationUnit.accept(testExtractingVisitor);  TestCase result=testCase.finalizeTestCase();  return result;}  }
class C{  @SuppressWarnings("unused") private void mergeMethod(MethodNode methodNode,LinkedList<String> renamedMethods){  InsnList instructions=methodNode.instructions;  Iterator<AbstractInsnNode> instructionIterator=instructions.iterator();  while (instructionIterator.hasNext()) {    AbstractInsnNode abstractInstruction=instructionIterator.next();    if (abstractInstruction instanceof FieldInsnNode) {      FieldInsnNode instruction=(FieldInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof FrameNode) {      FrameNode instruction=(FrameNode)abstractInstruction;    } else     if (abstractInstruction instanceof IincInsnNode) {      IincInsnNode instruction=(IincInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof InsnNode) {      InsnNode instruction=(InsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof IntInsnNode) {      IntInsnNode instruction=(IntInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof InvokeDynamicInsnNode) {      InvokeDynamicInsnNode instruction=(InvokeDynamicInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof JumpInsnNode) {      JumpInsnNode instruction=(JumpInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof LabelNode) {      LabelNode instruction=(LabelNode)abstractInstruction;    } else     if (abstractInstruction instanceof LdcInsnNode) {      LdcInsnNode instruction=(LdcInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof LineNumberNode) {      LineNumberNode instruction=(LineNumberNode)abstractInstruction;    } else     if (abstractInstruction instanceof LookupSwitchInsnNode) {      LookupSwitchInsnNode instruction=(LookupSwitchInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof MethodInsnNode) {      MethodInsnNode instruction=(MethodInsnNode)abstractInstruction;      for (      String renamedMethod : renamedMethods) {        if (instruction.name.equals(renamedMethod)) {          instruction.name=mergeRenamePrefix + instruction.name;          if (instruction.getOpcode() == Opcodes.INVOKESPECIAL) {            instruction.setOpcode(Opcodes.INVOKEVIRTUAL);          }        }      }    } else     if (abstractInstruction instanceof MultiANewArrayInsnNode) {      MultiANewArrayInsnNode instruction=(MultiANewArrayInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof TableSwitchInsnNode) {      TableSwitchInsnNode instruction=(TableSwitchInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof TypeInsnNode) {      TypeInsnNode instruction=(TypeInsnNode)abstractInstruction;    } else     if (abstractInstruction instanceof VarInsnNode) {      VarInsnNode instruction=(VarInsnNode)abstractInstruction;    }  }  addMethod(methodNode);}  }
class C{  protected boolean matchBracketsAt(){  if (curPos == 0) {    return false;  }  char prevChar, nextChar;  int i;  int bracketIndex1=fgBrackets.length;  int bracketIndex2=fgBrackets.length;  startPos=-1;  endPos=-1;  try {    IDocument doc=fText.getDocument();    prevChar=doc.getChar(curPos - 1);    nextChar=doc.getChar(curPos);    for (i=0; i < fgBrackets.length; i=i + 2) {      if (prevChar == fgBrackets[i]) {        startPos=curPos - 1;        bracketIndex1=i;      }    }    for (i=1; i < fgBrackets.length; i=i + 2) {      if (nextChar == fgBrackets[i]) {        endPos=curPos;        bracketIndex2=i;      }    }    if (startPos > -1 && bracketIndex1 < bracketIndex2) {      endPos=searchForClosingBracket(startPos,prevChar,fgBrackets[bracketIndex1 + 1],doc);      if (endPos > -1)       return true;      startPos=-1;    } else     if (endPos > -1) {      startPos=searchForOpenBracket(endPos,fgBrackets[bracketIndex2 - 1],nextChar,doc);      if (startPos > -1)       return true;      endPos=-1;    }  } catch (  BadLocationException x) {    log.debug(x);  }  return false;}  }
class C{  public List<Object> toList(){  List<Object> results=new ArrayList<Object>(this.list.size());  for (  Object element : this.list) {    if (element == null || JSONObject.NULL.equals(element)) {      results.add(null);    } else     if (element instanceof JSONArray) {      results.add(((JSONArray)element).toList());    } else     if (element instanceof JSONObject) {      results.add(((JSONObject)element).toMap());    } else {      results.add(element);    }  }  return results;}  }
class C{  public ResponseOnSingeRequest executeSshCommand(){  ResponseOnSingeRequest sshResponse=new ResponseOnSingeRequest();  try {    session=startSshSessionAndObtainSession();    channel=sessionConnectGenerateChannel(session);    sshResponse=executeAndGenResponse((ChannelExec)channel);  } catch (  Exception e) {    sshResponse=genErrorResponse(e);  } finally {    if (session != null)     session.disconnect();    if (channel != null)     channel.disconnect();  }  return sshResponse;}  }
class C{  public ContainerDescription(IContainer container){  super(container);  this.name=container.getName();  if (container.isLinked()) {    this.location=container.getLocationURI();  }  try {    if (container.isAccessible()) {      defaultCharSet=container.getDefaultCharset(false);      IResource[] resourceMembers=container.members();      members=new AbstractResourceDescription[resourceMembers.length];      for (int i=0; i < resourceMembers.length; i++) {        members[i]=(AbstractResourceDescription)ResourceDescription.fromResource(resourceMembers[i]);      }    }  } catch (  CoreException e) {  }}  }
class C{  public void returnToMark(){  readPosition=markPosition;}  }
class C{  public static <T>List<T> emptyList(final List<T> list){  return (list != null ? list : Collections.<T>emptyList());}  }
class C{  @Override public void message(Z21Message msg){}  }
class C{  public boolean equals(Object object){  if (!(object instanceof ObjectInstance)) {    return false;  }  ObjectInstance val=(ObjectInstance)object;  if (!name.equals(val.getObjectName()))   return false;  if (className == null)   return (val.getClassName() == null);  return className.equals(val.getClassName());}  }
class C{  public void insert(E item){  SingleLinkedNode<E> node=head;  while (node != null) {    if (node.item.compareTo(item) > 0) {      head=new SingleLinkedNode<>(item,node);      return;    } else     if (node.next == null || node.next.item.compareTo(item) > 0) {      node.next=new SingleLinkedNode<>(item,node.next);      return;    }    node=node.next;  }}  }
class C{  public void add(ResourceCollection rc){  ivyXmlResources.add(rc);}  }
class C{  @Override public void deleteLastNodeInFeature(){  try {    MapLayer layer=openMaps.get(activeMap).getActiveMapArea().getActiveLayer();    if (layer instanceof VectorLayerInfo) {      VectorLayerInfo vli=(VectorLayerInfo)layer;      if (!vli.isActivelyEdited()) {        showFeedback(messages.getString("NotEditingVector") + " \n" + messages.getString("SelectEditVector"));        return;      }      vli.deleteLastNodeInFeature();      drawingArea.removeLastNodeInFeature();      refreshMap(false);    } else {      showFeedback(messages.getString("ActiveLayerNotVector"));    }  } catch (  Exception e) {    showFeedback(messages.getString("Error") + e.getMessage());    logger.log(Level.SEVERE,"WhiteboxGui.deleteFeature",e);  }}  }
class C{  private boolean isViewLeftAligned(ViewGroup.MarginLayoutParams layoutParams){  final int left=getView().getLeft();  boolean viewLeftAligned=left == 0 || left == layoutParams.leftMargin;  LOGGER.trace("View is {} aligned",viewLeftAligned ? "LEFT" : "RIGHT");  return viewLeftAligned;}  }
class C{  private static boolean isUniqueCategoryName(String id,String name,String parentId){  if (parentId == null) {    return true;  }  CatalogCategoryRestRep parentCatalogCategory=CatalogCategoryUtils.getCatalogCategory(uri(parentId));  if (parentCatalogCategory != null) {    List<CatalogCategoryRestRep> subCatalogCategories=CatalogCategoryUtils.getCatalogCategories(parentCatalogCategory);    for (    CatalogCategoryRestRep subCatalogCategory : subCatalogCategories) {      if (subCatalogCategory.getId().toString().equals(id) == false && name.equalsIgnoreCase(subCatalogCategory.getName())) {        return false;      }    }  }  return true;}  }
class C{  public VNXeCommandResult deleteSnap(String snapId){  _logger.info("deleting snap:" + snapId);  SnapRequests req=new SnapRequests(_khClient);  return req.deleteSnap(snapId);}  }
class C{  public TimeSection(){  this(LocalTime.now(),LocalTime.now(),"",null,Color.TRANSPARENT,Color.TRANSPARENT,Color.TRANSPARENT);}  }
class C{  public byte readByte() throws IOException {  if (head == tail) {    head=0;    tail=input.read(buffer,head,bufSize);    if (tail == -1) {      throw new IOException("No more data is available");    }  }  return buffer[head++];}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField gfields=in.readFields();  @SuppressWarnings("unchecked") Hashtable<String,Permission> permissions=(Hashtable<String,Permission>)gfields.get("permissions",null);  perms=new HashMap<String,Permission>(permissions.size() * 2);  perms.putAll(permissions);  all_allowed=gfields.get("all_allowed",false);  permClass=(Class<?>)gfields.get("permClass",null);  if (permClass == null) {    Enumeration<Permission> e=permissions.elements();    if (e.hasMoreElements()) {      Permission p=e.nextElement();      permClass=p.getClass();    }  }}  }
class C{  public boolean isDoubleTapToZoomEnabled(){  return mDoubleTapToZoomEnabled;}  }
class C{  public void resetReusedObject(Object tmp){  this.tmp=tmp;}  }
class C{  public static LineCoverageTestFitness createLineTestFitness(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  return createLineTestFitness(instruction.getClassName(),instruction.getMethodName(),instruction.getLineNumber());}  }
class C{  private boolean isCompressEnabled(){  String defaultValue=Play.mode.isProd() ? "true" : "false";  return Play.configuration.getProperty("less.compress",defaultValue).equals("true");}  }
class C{  public void testBug51912() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  Connection overrideConn=null;  try {    Properties props=new Properties();    props.setProperty("nullCatalogMeansCurrent","false");    overrideConn=getConnectionWithProps(props);    DatabaseMetaData dbmd=overrideConn.getMetaData();    this.rs=dbmd.getProcedureColumns(null,null,"%",null);    this.rs.close();  }  finally {    if (overrideConn != null) {      overrideConn.close();    }  }}  }
class C{  public Vectorization(float tolerance){  this.tolerance=tolerance;}  }
class C{  public static DiceRoll rollNDice(final IDelegateBridge bridge,final int rollCount,final int sides,final PlayerID playerRolling,final DiceType diceType,final String annotation){  if (rollCount == 0) {    return new DiceRoll(new ArrayList<>(),0);  }  final int[] random=bridge.getRandom(sides,rollCount,playerRolling,diceType,annotation);  final List<Die> dice=new ArrayList<>();  for (int i=0; i < rollCount; i++) {    dice.add(new Die(random[i],1,DieType.IGNORED));  }  return new DiceRoll(dice,rollCount);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {  _queue.write(this,buffer,offset,length);}  }
class C{  public boolean previousConflict() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegOrDot=false;  boolean secondDot=false;  boolean isExponential=false;  for (; currentIndex < s.length(); currentIndex++) {    boolean isPrevExponential=isExponential;    isExponential=false;    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start && !isPrevExponential) {    foundSeparator=true;    result.mEndWithNegOrDot=true;  }break;case '.':if (!secondDot) {secondDot=true;} else {foundSeparator=true;result.mEndWithNegOrDot=true;}break;case 'e':case 'E':isExponential=true;break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  @Uninterruptible public static Address unwindNativeStackFrameForGC(Address currfp){  return unwindNativeStackFrame(currfp);}  }
class C{  public static String date2String(Date date,String format){  String result=null;  if (date != null) {    DateFormat sdf=new SimpleDateFormat(format);    result=sdf.format(date);  }  return result;}  }
class C{  public static boolean statementSemi(PsiBuilder b,int l){  return ((PerlBuilder)b).getPerlParser().parseStatementSemi(b,l);}  }
class C{  public DocumentListEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);}  }
class C{  public void deserializeSessionData(byte[] data,CustomRequestSession session,SessionSerializationMetadata metadata) throws IOException, ClassNotFoundException {  try (BufferedInputStream bis=new BufferedInputStream(new ByteArrayInputStream(data));ObjectInputStream ois=new CustomObjectInputStream(bis,loader)){    SessionSerializationMetadata serializedMetadata=(SessionSerializationMetadata)ois.readObject();    metadata.copyFieldsFrom(serializedMetadata);    session.readObjectData(ois);  } }  }
class C{  public static void convolveAndTranspose(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,boolean premultiply,boolean unpremultiply,int edgeAction){  float[] matrix=kernel.getKernelData(null);  int cols=kernel.getWidth();  int cols2=cols / 2;  for (int y=0; y < height; y++) {    int index=y;    int ioffset=y * width;    for (int x=0; x < width; x++) {      float r=0, g=0, b=0, a=0;      int moffset=cols2;      for (int col=-cols2; col <= cols2; col++) {        float f=matrix[moffset + col];        if (f != 0) {          int ix=x + col;          if (ix < 0) {            if (edgeAction == CLAMP_EDGES)             ix=0; else             if (edgeAction == WRAP_EDGES)             ix=(x + width) % width;          } else           if (ix >= width) {            if (edgeAction == CLAMP_EDGES)             ix=width - 1; else             if (edgeAction == WRAP_EDGES)             ix=(x + width) % width;          }          int rgb=inPixels[ioffset + ix];          int pa=(rgb >> 24) & 0xff;          int pr=(rgb >> 16) & 0xff;          int pg=(rgb >> 8) & 0xff;          int pb=rgb & 0xff;          if (premultiply) {            float a255=pa * (1.0f / 255.0f);            pr*=a255;            pg*=a255;            pb*=a255;          }          a+=f * pa;          r+=f * pr;          g+=f * pg;          b+=f * pb;        }      }      if (unpremultiply && a != 0 && a != 255) {        float f=255.0f / a;        r*=f;        g*=f;        b*=f;      }      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;      int ir=PixelUtils.clamp((int)(r + 0.5));      int ig=PixelUtils.clamp((int)(g + 0.5));      int ib=PixelUtils.clamp((int)(b + 0.5));      outPixels[index]=(ia << 24) | (ir << 16) | (ig << 8)| ib;      index+=height;    }  }}  }
class C{  protected Map<String,Double> loadSentiWordNet() throws FileNotFoundException {  Map<String,Double> sentiWordMap=new HashMap<String,Double>();  File file=new File("resources/lexi/SentiWordNet_3.0.0.txt");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    if (line.length == 6) {      for (      String word : line[4].split(" ")) {        sentiWordMap.put(word.split("#")[0] + "+",Double.valueOf(line[2]));        sentiWordMap.put(word.split("#")[0] + "-",Double.valueOf(line[3]));      }    }  }  scanner.close();  return sentiWordMap;}  }
class C{  @Override public void run(){  amIActive=true;  String featureFile=null;  ShapeFile featureShape;  String dataFile=null;  ShapeFile dataShape;  String outputFile=null;  ShapeFile output;  String instructions=null;  int progress;  int previousProgress=0;  int i, n;  int numRecsFeature;  int numRecsData;  boolean blnSelect=true;  double distThreshold=0;  ShapeType featureShapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outputFile=args[1];  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureFile=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("does not intersect")) {        instructions="notIntersect";      } else       if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("contains")) {        instructions="contains";      } else       if (args[i].toLowerCase().contains("does not contain")) {        instructions="notContain";      } else       if (args[i].toLowerCase().contains("covers")) {        instructions="covers";      } else       if (args[i].toLowerCase().contains("are covered by")) {        instructions="coveredBy";      } else       if (args[i].toLowerCase().contains("crosses")) {        instructions="crosses";      } else       if (args[i].toLowerCase().contains("touches")) {        instructions="touches";      } else       if (args[i].toLowerCase().contains("does not touch")) {        instructions="notTouch";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      }    } else     if (i == 3) {      dataFile=args[i];    } else     if (i == 4) {      outputFile=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureFile == null) || (dataFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    featureShape=new ShapeFile(featureFile);    featureShapeType=featureShape.getShapeType();    numRecsFeature=featureShape.getNumberOfRecords();    dataShape=new ShapeFile(dataFile);    numRecsData=dataShape.getNumberOfRecords();    AttributeTable reader=featureShape.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a]=inputField;    }    outputShapeType=featureShapeType;    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(featureShape);    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    updateProgress("Loop 1 of 2:",0);    n=0;    for (    ShapeFileRecord record : dataShape.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      n++;      progress=(int)(n * 100.0 / numRecsData);      if (progress != previousProgress) {        previousProgress=progress;        updateProgress("Loop 1 of 2:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    previousProgress=0;    if (instructions.equals("intersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notIntersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("within")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.within(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("contains")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notContain")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("covers")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.covers(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("coveredBy")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.coveredBy(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("crosses")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.crosses(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("touches")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notTouch")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("distance")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.isWithinDistance(g1,distThreshold)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private MessageHeader computeEntry(MessageHeader mh) throws IOException {  MessageHeader smh=new MessageHeader();  String name=mh.findValue("Name");  if (name == null) {    return null;  }  smh.set("Name",name);  try {    for (int i=0; i < hashes.length; ++i) {      MessageDigest dig=getDigest(hashes[i]);      ByteArrayOutputStream baos=new ByteArrayOutputStream();      PrintStream ps=new PrintStream(baos);      mh.print(ps);      byte[] headerBytes=baos.toByteArray();      byte[] digest=dig.digest(headerBytes);      smh.set(hashes[i] + "-Digest",Base64.getMimeEncoder().encodeToString(digest));    }    return smh;  } catch (  NoSuchAlgorithmException e) {    throw new JarException(e.getMessage());  }}  }
class C{  public String toSourceCode(ObjectMatrix3D matrix){  Formatter copy=(Formatter)this.clone();  String b3=blanks(3);  String b6=blanks(6);  copy.setPrintShape(false);  copy.setColumnSeparator(", ");  copy.setRowSeparator("},\n" + b6 + "{");  copy.setSliceSeparator("}\n" + b3 + "},\n"+ b3+ "{\n"+ b6+ "{");  String lead="{\n" + b3 + "{\n"+ b6+ "{";  String trail="}\n" + b3 + "}\n}";  return lead + copy.toString(matrix) + trail;}  }
class C{  public void remove(RegisterSpec toRemove){  try {    specs[toRemove.getReg()]=null;    size=-1;  } catch (  ArrayIndexOutOfBoundsException ex) {    throw new IllegalArgumentException("bogus reg");  }}  }
class C{  public void testSimpleWatchAction() throws Exception {  WatchManager<String> em=new WatchManager<String>();  StringWatchAction action=new StringWatchAction(1);  Watch<String> w=em.watch(new StringWatchPredicate("hello"),1,action);  em.process("hello!",0);  assertNull("String not matched yet",action.getString(0));  em.process("hello",0);  assertEquals("Should have string","hello",action.getString(0));  assertTrue("Should be done",w.isDone());}  }
class C{  public RecordedRequest takeRequest() throws InterruptedException {  return requestQueue.take();}  }
class C{  public RuntimeCopyException(String s){  super(s);}  }
class C{  public synchronized <T extends EventListener>void add(Class<T> t,T l){  if (l == null) {    return;  }  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  if (listenerList == NULL_ARRAY) {    listenerList=new Object[]{t,l};  } else {    int i=listenerList.length;    Object[] tmp=new Object[i + 2];    System.arraycopy(listenerList,0,tmp,0,i);    tmp[i]=t;    tmp[i + 1]=l;    listenerList=tmp;  }}  }
class C{  public void openOutFileInAppFilesDir(File pFile,String pFileOut){  FileOutputStream fos=null;  try {    fos=new FileOutputStream(pFile);  } catch (  FileNotFoundException e1) {    failStr("Error when opening file " + e1);    return;  }  try {    fos.write(pFileOut.getBytes());    fos.close();  } catch (  FileNotFoundException e) {    failStr(e.getMessage());  }catch (  IOException e) {    failStr(e.getMessage());  }  int count=pFileOut.getBytes().length;  byte[] buffer=new byte[count];  try {    FileInputStream fis=new FileInputStream(pFile);    fis.read(buffer,0,count);    fis.close();  } catch (  FileNotFoundException e) {    failStr("Failed when verifing output opening file " + e.getMessage());  }catch (  IOException e) {    failStr("Failed when verifying output, reading from written file " + e);  }  String str=new String(buffer);  assertEquals(str,pFileOut);}  }
class C{  public static ThreadSafeIsolate wrap(Object syncObj,Isolate isolate){  if (isolate != null)   return new ThreadSafeIsolate(syncObj,isolate); else   return null;}  }
class C{  public static void verifyViewLocale(){  FacesContext fc=FacesContext.getCurrentInstance();  HttpServletRequest request=(HttpServletRequest)fc.getExternalContext().getRequest();  HttpSession session=request.getSession();  String localeString=null;  if (session != null) {    localeString=(String)session.getAttribute(SessionConstants.SESSION_USER_LOCALE);  }  Locale locale=fc.getViewRoot().getLocale();  if (localeString != null && !locale.toString().equals(localeString)) {    Iterator<Locale> it=fc.getApplication().getSupportedLocales();    while (it.hasNext()) {      locale=it.next();      if (locale.toString().equals(localeString)) {        fc.getViewRoot().setLocale(locale);        return;      }    }    if (!fc.getViewRoot().getLocale().equals(fc.getApplication().getDefaultLocale())) {      fc.getViewRoot().setLocale(fc.getApplication().getDefaultLocale());    }  }}  }
class C{  public CheckboxTree(){  super(getDefaultTreeModel());  initialize();}  }
class C{  private void encodePendingBytes(boolean pad) throws IOException {  int eLen=(count / 3) * 3;  for (int s=0; s < eLen; ) {    int i=(buf[s++] & 0xff) << 16 | (buf[s++] & 0xff) << 8 | (buf[s++] & 0xff);    if ((encCount + 4) > chars.length) {      drainCharBuffer();    }    chars[encCount++]=CA[(i >>> 18) & 0x3f];    chars[encCount++]=CA[(i >>> 12) & 0x3f];    chars[encCount++]=CA[(i >>> 6) & 0x3f];    chars[encCount++]=CA[i & 0x3f];  }  int left=(count - eLen);  if (!pad) {    System.arraycopy(buf,eLen,buf,0,left);    count=left;  } else {    drainCharBuffer();    if (left > 0) {      int i=((buf[eLen] & 0xff) << 10) | (left == 2 ? ((buf[count - 1] & 0xff) << 2) : 0);      writer.write(CA[i >> 12]);      writer.write(CA[(i >>> 6) & 0x3f]);      writer.write(left == 2 ? CA[i & 0x3f] : '=');      writer.write('=');    }  }}  }
class C{  public void hidePairingDialog(){  if (pairingDialog != null) {    pairingDialog.dismiss();    pairingDialog=null;  }}  }
class C{  public Zoom(AbstractChart chart,boolean in,float rate){  super(chart);  mZoomIn=in;  setZoomRate(rate);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.684 -0500",hash_original_method="218BC2BA6DFB456EB7693A201AB85277",hash_generated_method="F69F0AF74A9089F685343761B088AEFA") private boolean attemptToExtractCountryCallingCode(){  if (nationalNumber.length() == 0) {    return false;  }  StringBuilder numberWithoutCountryCallingCode=new StringBuilder();  int countryCode=phoneUtil.extractCountryCode(nationalNumber,numberWithoutCountryCallingCode);  if (countryCode == 0) {    return false;  }  nationalNumber.setLength(0);  nationalNumber.append(numberWithoutCountryCallingCode);  String newRegionCode=phoneUtil.getRegionCodeForCountryCode(countryCode);  if (!newRegionCode.equals(defaultCountry)) {    currentMetaData=getMetadataForRegion(newRegionCode);  }  String countryCodeString=Integer.toString(countryCode);  prefixBeforeNationalNumber.append(countryCodeString).append(" ");  return true;}  }
class C{  public static <T1,T2,T3,T4,T5,R>Supplier<R> partial5(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final QuintFunction<T1,T2,T3,T4,T5,R> quintFunc){  return null;}  }
class C{  public void queryAABB(QueryCallback callback,ParticleQueryCallback particleCallback,AABB aabb){  wqwrapper.broadPhase=m_contactManager.m_broadPhase;  wqwrapper.callback=callback;  m_contactManager.m_broadPhase.query(wqwrapper,aabb);  m_particleSystem.queryAABB(particleCallback,aabb);}  }
class C{  public void putLong(long val) throws ArrayIndexOutOfBoundsException {  put(val,8);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  public DataSet simulateDataReducedForm(int sampleSize){  if (sampleSize < 1)   throw new IllegalArgumentException("Sample size must be >= 1: " + sampleSize);  int size=variableNodes.size();  setupModel(size);  NormalDistribution normal=new NormalDistribution(new Well1024a(++seed),0,1);  TetradMatrix B=new TetradMatrix(getCoefficientMatrix());  TetradMatrix iMinusBInv=TetradAlgebra.identity(B.rows()).minus(B).inverse();  double[][] all=new double[variableNodes.size()][sampleSize];  for (int row=0; row < sampleSize; row++) {    TetradVector e=new TetradVector(B.rows());    for (int j=0; j < e.size(); j++) {      e.set(j,normal.sample() * sqrt(errorVars[j]));    }    TetradVector x=iMinusBInv.times(e);    for (int j=0; j < x.size(); j++) {      all[j][row]=x.get(j);    }  }  List<Node> continuousVars=new ArrayList<>();  for (  Node node : getVariableNodes()) {    final ContinuousVariable var=new ContinuousVariable(node.getName());    var.setNodeType(node.getNodeType());    continuousVars.add(var);  }  BoxDataSet boxDataSet=new BoxDataSet(new VerticalDoubleDataBox(all),continuousVars);  return DataUtils.restrictToMeasured(boxDataSet);}  }
class C{  public OneMax(int numberOfBits){  super(1,1);  this.numberOfBits=numberOfBits;}  }
class C{  public ClusteredPatterns(PatternReference pattern){  patterns.add(pattern);}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  public static boolean isInDebugMode(){  return Boolean.valueOf(System.getProperty(TEST_RUNNER_DEBUG_MODE_PROPERTY));}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public static final double acos(double a){  return ieee754_acos(a);}  }
class C{  private static String removeXMLTags(String inputText){  if (inputText == null)   return null;  while (inputText.contains("<")) {    int p=inputText.indexOf('<');    int q=inputText.indexOf('>');    inputText=inputText.substring(0,p) + inputText.substring(q + 1,inputText.length());  }  return inputText;}  }
class C{  MarkerSegment(Node node) throws IIOInvalidTreeException {  tag=getAttributeValue(node,null,"MarkerTag",0,255,true);  length=0;  if (node instanceof IIOMetadataNode) {    IIOMetadataNode iioNode=(IIOMetadataNode)node;    try {      data=(byte[])iioNode.getUserObject();    } catch (    Exception e) {      IIOInvalidTreeException newGuy=new IIOInvalidTreeException("Can't get User Object",node);      newGuy.initCause(e);      throw newGuy;    }  } else {    throw new IIOInvalidTreeException("Node must have User Object",node);  }}  }
class C{  public boolean hasNPartentsMChildren(V node,int n,int m){  if (node == null || !containsVertex(node))   return false;  return inDegreeOf(node) == n && outDegreeOf(node) == m;}  }
class C{  public Iterator<Item> iterator(){  return new ArrayIterator();}  }
class C{  private Map<String,ExecutableElement> makeSetterMap(Map<ExecutableElement,String> getterToPropertyName){  Map<String,TypeMirror> getterMap=new TreeMap<String,TypeMirror>();  for (  Map.Entry<ExecutableElement,String> entry : getterToPropertyName.entrySet()) {    getterMap.put(entry.getValue(),entry.getKey().getReturnType());  }  Map<String,ExecutableElement> noPrefixMap=Maps.newLinkedHashMap();  Map<String,ExecutableElement> prefixMap=Maps.newLinkedHashMap();  boolean ok=true;  for (  ExecutableElement setter : setters) {    Map<String,ExecutableElement> map=noPrefixMap;    String name=setter.getSimpleName().toString();    TypeMirror type=getterMap.get(name);    if (type == null && name.startsWith("set")) {      name=Introspector.decapitalize(name.substring(3));      type=getterMap.get(name);      map=prefixMap;    }    if (type == null) {      errorReporter.reportError("Method does not correspond to a property of " + autoValueClass,setter);      ok=false;    } else {      VariableElement parameter=Iterables.getOnlyElement(setter.getParameters());      if (TYPE_EQUIVALENCE.equivalent(type,parameter.asType())) {        getterMap.remove(name);        map.put(name,setter);      } else {        errorReporter.reportError("Parameter type should be " + type,parameter);        ok=false;      }    }  }  if (!ok) {    return null;  }  boolean prefixing=!prefixMap.isEmpty();  if (prefixing && !noPrefixMap.isEmpty()) {    errorReporter.reportError("If any setter methods use the setFoo convention then all must",noPrefixMap.values().iterator().next());    return null;  }  if (!getterMap.isEmpty()) {    for (    Map.Entry<String,TypeMirror> entry : getterMap.entrySet()) {      String setterName=prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();      String error=String.format("Expected a method with this signature: %s%s %s(%s)",builderTypeElement,TypeSimplifier.actualTypeParametersString(builderTypeElement),setterName,entry.getValue());      errorReporter.reportError(error,builderTypeElement);    }    return null;  }  return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;}  }
class C{  public void fill(int val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  public void replaceTradingday(Tradingday newTradingday){synchronized (this.tradingdays) {    for (ListIterator<Tradingday> itemIter=this.tradingdays.listIterator(); itemIter.hasNext(); ) {      Tradingday item=itemIter.next();      if (item.equals(newTradingday)) {        itemIter.set(newTradingday);        break;      }    }  }}  }
class C{  @Override protected double updateDistance(double currDist,double diff){  double result;  result=currDist;  result+=Math.pow(Math.abs(diff),m_Order);  return result;}  }
class C{  public Vector2f sub(float x,float y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.TRANSITION_SPECIFICATION__REACTION:    setReaction((TransitionReaction)null);  return;}super.eUnset(featureID);}  }
class C{  public static <T>T unmarshal(byte[] bytes) throws SQLException {  assert bytes != null;  try {    return MARSHALLER.unmarshal(bytes,null);  } catch (  IgniteCheckedException e) {    throw new SQLException("Failed to unmarshal result.",e);  }}  }
class C{  public PointsToSet reachingObjects(PointsToSet s,SootField f){  return reachingObjects(f);}  }
class C{  protected void curveVertexSegment(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4){  float x0=x2;  float y0=y2;  PMatrix3D draw=curveDrawMatrix;  float xplot1=draw.m10 * x1 + draw.m11 * x2 + draw.m12 * x3 + draw.m13 * x4;  float xplot2=draw.m20 * x1 + draw.m21 * x2 + draw.m22 * x3 + draw.m23 * x4;  float xplot3=draw.m30 * x1 + draw.m31 * x2 + draw.m32 * x3 + draw.m33 * x4;  float yplot1=draw.m10 * y1 + draw.m11 * y2 + draw.m12 * y3 + draw.m13 * y4;  float yplot2=draw.m20 * y1 + draw.m21 * y2 + draw.m22 * y3 + draw.m23 * y4;  float yplot3=draw.m30 * y1 + draw.m31 * y2 + draw.m32 * y3 + draw.m33 * y4;  int savedCount=curveVertexCount;  vertex(x0,y0);  for (int j=0; j < curveDetail; j++) {    x0+=xplot1;    xplot1+=xplot2;    xplot2+=xplot3;    y0+=yplot1;    yplot1+=yplot2;    yplot2+=yplot3;    vertex(x0,y0);  }  curveVertexCount=savedCount;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void wmSubBand(Image img,double[] wm,int n,double a,double threshold){  for (int i=0; i < img.getWidth() * img.getHeight(); i++) {    if (Math.abs(img.getData()[i]) > threshold) {      img.getData()[i]+=(a * Math.abs(img.getData()[i]) * wm[i % n]);    }  }}  }
class C{  public static Ignite start(IgniteConfiguration cfg,@Nullable GridSpringResourceContext springCtx) throws IgniteCheckedException {  A.notNull(cfg,"cfg");  return start0(new GridStartContext(cfg,null,springCtx),true).grid();}  }
class C{  public void newCheckpoint(byte[] state,byte[] stateHash,int lastConsensusId){  if (messageBatches != null) {    for (int i=0; i < this.messageBatches.length; i++)     messageBatches[i]=null;  }  position=0;  this.state=state;  this.stateHash=stateHash;}  }
class C{  public synchronized void resumeProcessing(){  Log.d(TAG,"Resume processing. Queue size: " + mQueue.size());  if (mHoldProcessing) {    mHoldProcessing=false;    if (!mQueue.isEmpty()) {      startService();    }  }}  }
class C{  public void putAll(final Map t){  Iterator iterator=t.keySet().iterator();  Object key=null;  while (iterator.hasNext()) {    key=iterator.next();    put(key,t.get(key));  }}  }
class C{  public static final String timeStampForZone(String zoneID,Date date){  return timeStamp(date,TimeZone.getTimeZone(zoneID));}  }
class C{  public int[] batch(Connection conn,String sql,Object[][] params,int[] paramTypes) throws SQLException {  PreparedStatement stmt=null;  int[] rows=null;  try {    stmt=this.prepareStatement(conn,sql);    for (    Object[] param : params) {      this.fillStatement(stmt,param,paramTypes);      stmt.addBatch();    }    rows=stmt.executeBatch();  } catch (  SQLException e) {    this.rethrow(e,sql,params);  } finally {    close(stmt);  }  return rows;}  }
class C{  public boolean pauseBatch(long batchId){  int batchStatus=batchRepository.getBatchStatus(batchId);  if (DownloadStatus.isRunning(batchStatus)) {    downloadsRepository.pauseDownloadWithBatchId(batchId);    return true;  } else {    return false;  }}  }
class C{  public SearchRequestBuilder addSort(SortBuilder sort){  sourceBuilder().sort(sort);  return this;}  }
class C{  public boolean hasCycle(ListNode head){  if (head == null || head.next == null)   return false;  ListNode fast=head;  ListNode slow=head;  while (fast.next != null && fast.next.next != null) {    fast=fast.next.next;    slow=slow.next;    if (fast == slow)     return true;  }  return false;}  }
class C{  public final void recalculateVisibleLines(){  if (painter == null) {    return;  }  int height=painter.getHeight();  int lineHeight=painter.getFontMetrics().getHeight();  visibleLines=height / lineHeight;  updateScrollBars();}  }
class C{  public void endDTD() throws SAXException {  m_insideDTD=false;}  }
class C{  @Override protected Void doTask() throws Exception {  updateEvent.start();  try {    if (resourceManager.isOverflowAllowed())     throw new IllegalStateException();    final String scaleOutIndexName=splitResult.indexMetadata.getName();    final String name=splitResult.name;    final BTree src=((ILocalBTreeView)getIndex(name)).getMutableBTree();    assertSameIndex(indexUUID,src);    if (INFO) {      log.info("src=" + name + ", counter="+ src.getCounter().get()+ ", checkpoint="+ src.getCheckpoint());      log.info("src=" + name + ", splitResult="+ splitResult);    }    final long oldCounter=src.getCounter().get();    final LocalPartitionMetadata oldpmd=(LocalPartitionMetadata)src.getIndexMetadata().getPartitionMetadata();    if (oldpmd.getSourcePartitionId() != -1) {      throw new IllegalStateException("Split not allowed during move: sourcePartitionId=" + oldpmd.getSourcePartitionId());    }    final Split[] splits=splitResult.splits;    final PartitionLocator[] locators=new PartitionLocator[splits.length];    for (int i=0; i < splits.length; i++) {      final IndexMetadata md=src.getIndexMetadata().clone();      final LocalPartitionMetadata pmd=(LocalPartitionMetadata)splits[i].pmd;      assert pmd.getResources() == null : "Not expecting resources for index segment: " + pmd;      final int partitionId=pmd.getPartitionId();      final String name2=DataService.getIndexPartitionName(scaleOutIndexName,partitionId);      final PartitionLocator locator=new PartitionLocator(pmd.getPartitionId(),resourceManager.getDataServiceUUID(),pmd.getLeftSeparatorKey(),pmd.getRightSeparatorKey());      locators[i]=locator;      final String summary=action + "(" + name+ "->"+ name2+ ")";      md.setPartitionMetadata(new LocalPartitionMetadata(pmd.getPartitionId(),-1,pmd.getLeftSeparatorKey(),pmd.getRightSeparatorKey(),new IResourceMetadata[]{resourceManager.getLiveJournal().getResourceMetadata(),splitResult.buildResults[i].segmentMetadata},IndexPartitionCause.split(resourceManager)));      final BTree btree=BTree.create(resourceManager.getLiveJournal(),md);      assert partitionId == btree.getIndexMetadata().getPartitionMetadata().getPartitionId();      final long newCounter=btree.getCounter().get();      assert newCounter > oldCounter : "newCounter=" + newCounter + " not GT oldCounter="+ oldCounter;      final byte[] fromKey=pmd.getLeftSeparatorKey();      final byte[] toKey=pmd.getRightSeparatorKey();      if (INFO)       log.info("Copying data to new btree: index=" + scaleOutIndexName + ", pmd="+ pmd);      final long ncopied=btree.rangeCopy(src,fromKey,toKey,false);      if (INFO)       log.info("Copied " + ncopied + " index entries from the live index "+ name+ " onto "+ name2);      if (INFO)       log.info("Registering index: " + name2);      getJournal().registerIndex(name2,btree);    }    if (INFO)     log.info("Dropping source index: " + name);    getJournal().dropIndex(name);    resourceManager.getFederation().getMetadataService().splitIndexPartition(src.getIndexMetadata().getName(),new PartitionLocator(oldpmd.getPartitionId(),resourceManager.getDataServiceUUID(),oldpmd.getLeftSeparatorKey(),oldpmd.getRightSeparatorKey()),locators);    if (INFO)     log.info("Notified metadata service: name=" + name + " was split into "+ Arrays.toString(locators));    resourceManager.setIndexPartitionGone(name,StaleLocatorReason.Split);    return null;  }  finally {    updateEvent.end();  }}  }
class C{  public T caseSkillRef(SkillRef object){  return null;}  }
class C{  public static void twoLoopHp(Vec x_grad,List<Double> rho,List<Vec> s,List<Vec> y,Vec q,double[] alphas){  x_grad.copyTo(q);  if (s.isEmpty())   return;  for (int i=0; i < s.size(); i++) {    Vec s_i=s.get(i);    Vec y_i=y.get(i);    double alpha_i=alphas[i]=rho.get(i) * s_i.dot(q);    q.mutableSubtract(alpha_i,y_i);  }  q.mutableMultiply(s.get(0).dot(y.get(0)) / y.get(0).dot(y.get(0)));  for (int i=s.size() - 1; i >= 0; i--) {    double beta=rho.get(i) * y.get(i).dot(q);    q.mutableAdd(alphas[i] - beta,s.get(i));  }}  }
class C{  public CoapObserveRelation observeAndWait(CoapHandler handler){  Request request=newGet().setURI(uri).setObserve();  return observeAndWait(request,handler);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static String random(int count,int start,int end,boolean letters,boolean numbers){  return random(count,start,end,letters,numbers,null,RANDOM);}  }
class C{  private void updateView(int viewPosition){  notifyItemChanged(viewPosition);}  }
class C{  @Override public R scan(Tree tree,P p){  if (tree == null)   return null;  TreePath prev=path;  path=new TreePath(path,tree);  try {    return tree.accept(this,p);  }  finally {    path=prev;  }}  }
class C{  @Override public int bulkInsert(Uri uri,ContentValues[] values){  throw new UnsupportedOperationException("unimplemented mock method");}  }
class C{  public GrantorInfo becomeGrantor(String serviceName,InternalDistributedMember newGrantor,int newGrantorSerialNumber,InternalDistributedMember oldTurk){  GrantorInfo newInfo=null;  InternalDistributedMember previousGrantor=null;  long newGrantorVersion=-1;  try {synchronized (this) {      GrantorInfo gi=(GrantorInfo)this.nameToInfo.get(serviceName);      while (gi != null && gi.isInitiatingTransfer()) {        waitWhileInitiatingTransfer(gi);        gi=(GrantorInfo)this.nameToInfo.get(serviceName);      }      if (gi != null) {        previousGrantor=gi.getId();        if (previousGrantor != null && this.dm.getDistributionManagerIds().contains(previousGrantor)) {          if (!newGrantor.equals(previousGrantor)) {            if (oldTurk != null && !oldTurk.equals(previousGrantor)) {              if (logger.isTraceEnabled(LogMarker.DLS)) {                logger.trace(LogMarker.DLS,"Elder did not become grantor for {} to {} because oldT was {} and the current grantor is {}",serviceName,newGrantor,oldTurk,previousGrantor);              }            } else {              if (logger.isTraceEnabled(LogMarker.DLS)) {                logger.trace(LogMarker.DLS,"Elder forced to set grantor for {} to {}",serviceName,newGrantor);              }              long myVersion=gi.getVersionId() + 1;              newGrantorVersion=myVersion;              newInfo=new GrantorInfo(newGrantor,myVersion,newGrantorSerialNumber,false);              this.nameToInfo.put(serviceName,newInfo);              if (gi.getId() != null && (oldTurk == null || gi.getId().equals(oldTurk)) && !gi.getId().equals(newGrantor)) {                beginInitiatingTransfer(newInfo);              }            }          }          return new GrantorInfo(gi.getId(),gi.getVersionId(),gi.getSerialNumber(),true);        } else {          long myVersion=gi.getVersionId() + 1;          if (oldTurk != null) {            if (logger.isTraceEnabled(LogMarker.DLS)) {              logger.trace(LogMarker.DLS,"Elder did not become grantor for {} to {} because oldT was {} and the current grantor {} had crashed",serviceName,newGrantor,oldTurk,previousGrantor);            }          } else {            if (logger.isTraceEnabled(LogMarker.DLS)) {              logger.trace(LogMarker.DLS,"Elder forced to set grantor for {} to {} and noticed previous grantor had crashed",serviceName,newGrantor);            }            this.nameToInfo.put(serviceName,new GrantorInfo(newGrantor,myVersion,newGrantorSerialNumber,false));          }          return new GrantorInfo(null,myVersion - 1,gi.getSerialNumber(),true);        }      } else {        if (oldTurk != null) {          if (logger.isTraceEnabled(LogMarker.DLS)) {            logger.trace(LogMarker.DLS,"Elder did not become grantor for {} to {} because oldT was {} and elder had no current grantor",serviceName,newGrantor,oldTurk);          }        } else {          if (logger.isTraceEnabled(LogMarker.DLS)) {            logger.trace(LogMarker.DLS,"Elder forced to set grantor for {} to {} because of clean grantor shutdown",serviceName,newGrantor);          }          gi=new GrantorInfo(newGrantor,1,newGrantorSerialNumber,false);          this.nameToInfo.put(serviceName,gi);        }        return new GrantorInfo(null,0,0,false);      }    }  }  finally {    if (isInitiatingTransfer(newInfo)) {      Assert.assertTrue(newGrantorVersion > -1);      DeposeGrantorProcessor.send(serviceName,previousGrantor,newGrantor,newGrantorVersion,newGrantorSerialNumber,dm);      finishInitiatingTransfer(newInfo);    }  }}  }
class C{  @TargetApi(23) private boolean maybeRequestPermission(){  if (requiresPermission(contentUri)) {    requestPermissions(new String[]{permission.READ_EXTERNAL_STORAGE},0);    return true;  } else {    return false;  }}  }
class C{  @HLEFunction(nid=0xA0229362,version=150) public int sceNetAdhocGameModeDeleteMaster(){  checkInitialized();  masterGameModeArea=null;  if (replicaGameModeAreas.size() <= 0) {    stopGameMode();  }  return 0;}  }
class C{  public static <T,S extends Comparator<T>>List<T> mergeIntoList(Iterable<? extends Iterable<T>> iterablesToMerge,S comparator){  return mergeIntoList(iterablesToMerge,comparator,Integer.MAX_VALUE);}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public Collection<Tuple2<TransitionState,Double>> forwardTransitions(){  SingleLanguageModel thisLM=lm.get(this.langIndex);  List<Tuple2<TransitionState,Double>> result=new ArrayList<Tuple2<TransitionState,Double>>();  if (type == TransitionStateType.LMRGN) {{      double score=Math.log(LINE_MRGN_PROB);      addNoSubGlyphStates(result,this.context,TransitionStateType.LMRGN,this.langIndex,score);    }    addTransitionsToTmpl(result,context);  } else   if (type == TransitionStateType.LMRGN_HPHN) {{      double score=Math.log(LINE_MRGN_PROB);      addNoSubGlyphStates(result,this.context,TransitionStateType.LMRGN_HPHN,this.langIndex,score);    }    if (this.langIndex >= 0) {      if (glyphChar.glyphType == GlyphType.DOUBLED) {        TransitionStateType nextType=TransitionStateType.TMPL;        int nextLanguage=langIndex;        int nextLmChar=lmCharIndex;        double score=Math.log(1.0);        if (nextLmChar == sCharIndex) {          GlyphChar nextGlyphCharS=new GlyphChar(sCharIndex,GlyphType.NORMAL_CHAR);          double glyphLogProbS=calculateGlyphLogProb(nextType,nextLanguage,nextLmChar,nextGlyphCharS);          addState(result,context,nextType,nextLanguage,nextGlyphCharS,score + glyphLogProbS);          GlyphChar nextGlyphCharLongs=new GlyphChar(longsCharIndex,GlyphType.NORMAL_CHAR);          double glyphLogProbLongs=calculateGlyphLogProb(nextType,nextLanguage,nextLmChar,nextGlyphCharLongs);          addState(result,context,nextType,nextLanguage,nextGlyphCharLongs,score + glyphLogProbLongs);        } else {          GlyphChar nextGlyphChar=new GlyphChar(lmCharIndex,GlyphType.NORMAL_CHAR);          double glyphLogProb=calculateGlyphLogProb(nextType,nextLanguage,nextLmChar,nextGlyphChar);          addState(result,context,nextType,nextLanguage,nextGlyphChar,score + glyphLogProb);        }      } else {        for (        int c : thisLM.getActiveCharacters()) {          if (c != spaceCharIndex && !punctSet.contains(c)) {            double pDestLang=1.0;            int[] shrunkenContext=shrinkContext(context,thisLM);            double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(getNgramProb(thisLM,shrunkenContext,c)) + Math.log(pDestLang);            int[] nextContext=a.append(shrunkenContext,c);            addGlyphStates(result,c,nextContext,TransitionStateType.TMPL,this.langIndex,score);          }        }      }    }  } else   if (type == TransitionStateType.RMRGN) {    double score=Math.log(LINE_MRGN_PROB);    addNoSubGlyphStates(result,this.context,TransitionStateType.RMRGN,this.langIndex,score);  } else   if (type == TransitionStateType.RMRGN_HPHN) {    double score=Math.log(LINE_MRGN_PROB);    addNoSubGlyphStates(result,this.context,TransitionStateType.RMRGN_HPHN,this.langIndex,score);  } else   if (type == TransitionStateType.RMRGN_HPHN_INIT) {    double score=Math.log(LINE_MRGN_PROB);    addNoSubGlyphStates(result,this.context,TransitionStateType.RMRGN_HPHN,this.langIndex,score);  } else   if (type == TransitionStateType.TMPL) {{      int[] shrunkenContext=shrinkContext(context,thisLM);      double score=Math.log(LINE_MRGN_PROB) + Math.log(1.0 - LINE_END_HYPHEN_PROB) + Math.log(getNgramProb(thisLM,shrunkenContext,spaceCharIndex));      int[] nextContext=a.append(shrunkenContext,spaceCharIndex);      addNoSubGlyphStates(result,spaceCharIndex,nextContext,TransitionStateType.RMRGN,this.langIndex,score);    }{      double score=Math.log(LINE_MRGN_PROB) + Math.log(LINE_END_HYPHEN_PROB);      addNoSubGlyphStates(result,this.context,TransitionStateType.RMRGN_HPHN_INIT,this.langIndex,score);    }    addTransitionsToTmpl(result,context);  }  return result;}  }
class C{  @Inline public static boolean tryCompareAndSwap(Object base,Offset offset,Word testValue,Word newValue){  if (Barriers.NEEDS_WORD_PUTFIELD_BARRIER || Barriers.NEEDS_WORD_GETFIELD_BARRIER) {    return Barriers.wordTryCompareAndSwap(base,offset,testValue,newValue);  } else {    if (VM.BuildForIA32) {      return Magic.attemptWord(base,offset,testValue,newValue);    } else {      Word oldValue;      do {        oldValue=Magic.prepareWord(base,offset);        if (oldValue.NE(testValue))         return false;      } while (!Magic.attemptWord(base,offset,oldValue,newValue));      return true;    }  }}  }
class C{  public ContextSensitiveImportRewriteContext(ASTNode node,ImportRewrite importRewrite){  this((CompilationUnit)node.getRoot(),node.getStartPosition(),importRewrite);}  }
class C{  public DrawerBuilder(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  this.mLayoutManager=new LinearLayoutManager(mActivity);}  }
class C{  public boolean isCompositeNode(){  return !parts.isEmpty() || returnsOthersOutput() || isRootNode();}  }
class C{  private int[] add(int[] a,int[] b){  int[] result, addend;  if (a.length < b.length) {    result=new int[b.length];    System.arraycopy(b,0,result,0,b.length);    addend=a;  } else {    result=new int[a.length];    System.arraycopy(a,0,result,0,a.length);    addend=b;  }  for (int i=addend.length - 1; i >= 0; i--) {    result[i]=field.add(result[i],addend[i]);  }  return result;}  }
class C{  public void close(){  if (null != announcer) {    try {      announcer.unannounce();    } catch (    IOException e) {      logger.warn("Error on unannouncing service : ",e);    }    announcer.close();  }  closeServer(Pair.of(dlService,server),gracefulShutdownMs,TimeUnit.MILLISECONDS);  if (null != statsProvider) {    statsProvider.stop();  }  SchedulerUtils.shutdownScheduler(configExecutorService,60,TimeUnit.SECONDS);  keepAliveLatch.countDown();}  }
class C{  private static String randomElement(ArrayList<String> list){  int index=random.nextInt(list.size());  return list.get(index);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (keyId_1: ");  result.append(keyId_1);  result.append(')');  return result.toString();}  }
class C{  Member(Gondola gondola,CoreMember cmember,Peer peer) throws GondolaException {  this.gondola=gondola;  this.cmember=cmember;  this.peer=peer;}  }
class C{  public int size(){  return 5;}  }
class C{  public SabresQuery<T> whereEqualTo(String key,Object value){  SabresValue sabresValue=SabresValue.create(value);  if (sabresValue instanceof ListValue) {    innerSelect=new SelectCommand(SabresList.getTableName(name,key),Collections.singletonList(SabresList.getParentIdKey()));    innerSelect.as(SabresList.getParentIdKey(),SabresObject.getObjectIdKey());    innerSelect.where(Where.equalTo(SabresList.getValueKey(),sabresValue));    innerSelect.withoutSemicolon();  } else {    addWhere(key,Where.equalTo(key,sabresValue));  }  return this;}  }
class C{  Map<String,String> loadConfigProperties(Path binaries,InstallType installType) throws IOException {  SimpleCommand command=createCommand(format("rm -rf /tmp/codenvy; " + "mkdir /tmp/codenvy/; " + "unzip -o %s -d /tmp/codenvy",binaries.toString()));  command.execute();  ConfigManager configManager=new ConfigManager(updateEndpoint,"/tmp/codenvy",transport);  return configManager.loadInstalledCodenvyProperties(installType);}  }
class C{  private void writeUtf8Length(int value){  if (value >>> 6 == 0) {    require(1);    buffer[position++]=(byte)(value | 0x80);  } else   if (value >>> 13 == 0) {    require(2);    byte[] buffer=this.buffer;    buffer[position++]=(byte)(value | 0x40 | 0x80);    buffer[position++]=(byte)(value >>> 6);  } else   if (value >>> 20 == 0) {    require(3);    byte[] buffer=this.buffer;    buffer[position++]=(byte)(value | 0x40 | 0x80);    buffer[position++]=(byte)((value >>> 6) | 0x80);    buffer[position++]=(byte)(value >>> 13);  } else   if (value >>> 27 == 0) {    require(4);    byte[] buffer=this.buffer;    buffer[position++]=(byte)(value | 0x40 | 0x80);    buffer[position++]=(byte)((value >>> 6) | 0x80);    buffer[position++]=(byte)((value >>> 13) | 0x80);    buffer[position++]=(byte)(value >>> 20);  } else {    require(5);    byte[] buffer=this.buffer;    buffer[position++]=(byte)(value | 0x40 | 0x80);    buffer[position++]=(byte)((value >>> 6) | 0x80);    buffer[position++]=(byte)((value >>> 13) | 0x80);    buffer[position++]=(byte)((value >>> 20) | 0x80);    buffer[position++]=(byte)(value >>> 27);  }}  }
class C{  protected void generateIntermediatePositions(DrawContext dc,Iterable<? extends Position> positions){  Globe globe=dc.getGlobe();  double waveLength=this.getWaveLength();  if (waveLength == 0)   waveLength=this.computeDefaultWavelength(positions,globe);  double radius=(waveLength / 2.0) / globe.getRadius();  PositionIterator iterator=new PositionIterator(positions,waveLength,globe);  this.computedPositions=this.generateWavePositions(iterator,radius,false);}  }
class C{  public static void skipPredSyntheticPaths(BlockNode block){  for (  BlockNode pred : block.getPredecessors()) {    if (pred.contains(AFlag.SYNTHETIC) && !pred.contains(AType.SPLITTER_BLOCK) && pred.getInstructions().isEmpty()) {      pred.add(AFlag.SKIP);      skipPredSyntheticPaths(pred);    }  }}  }
class C{  public void XtestWildCardSubscriptionPreservedOnRestart() throws Exception {  ActiveMQDestination dest1=new ActiveMQTopic("TEST.A");  ActiveMQDestination dest2=new ActiveMQTopic("TEST.B");  ActiveMQDestination dest3=new ActiveMQTopic("TEST.C");  ActiveMQDestination wildDest=new ActiveMQTopic("TEST.>");  ArrayList<MessageId> sentBeforeRestart=new ArrayList<>();  ArrayList<MessageId> sentBeforeCreateConsumer=new ArrayList<>();  ArrayList<MessageId> sentAfterCreateConsumer=new ArrayList<>();{    StubConnection connection1=createConnection();    ConnectionInfo connectionInfo1=createConnectionInfo();    connectionInfo1.setClientId("A");    SessionInfo sessionInfo1=createSessionInfo(connectionInfo1);    ProducerInfo producerInfo1=createProducerInfo(sessionInfo1);    connection1.send(connectionInfo1);    connection1.send(sessionInfo1);    connection1.send(producerInfo1);    ConsumerInfo consumerInfo1=createConsumerInfo(sessionInfo1,wildDest);    consumerInfo1.setSubscriptionName("test");    consumerInfo1.setPrefetchSize(100);    connection1.send(consumerInfo1);    connection1.send(closeConsumerInfo(consumerInfo1));    for (int i=0; i < 4; i++) {      Message m=createMessage(producerInfo1,dest1,DeliveryMode.PERSISTENT);      connection1.send(m);      sentBeforeRestart.add(m.getMessageId());    }    connection1.request(closeConnectionInfo(connectionInfo1));    connection1.stop();  }  restartBroker();{    StubConnection connection2=createConnection();    ConnectionInfo connectionInfo2=createConnectionInfo();    connectionInfo2.setClientId("A");    SessionInfo sessionInfo2=createSessionInfo(connectionInfo2);    connection2.send(connectionInfo2);    connection2.send(sessionInfo2);    ProducerInfo producerInfo2=createProducerInfo(sessionInfo2);    connection2.send(producerInfo2);    for (int i=0; i < 4; i++) {      Message m=createMessage(producerInfo2,dest2,DeliveryMode.PERSISTENT);      connection2.send(m);      sentBeforeCreateConsumer.add(m.getMessageId());    }    ConsumerInfo consumerInfo2=createConsumerInfo(sessionInfo2,wildDest);    consumerInfo2.setSubscriptionName("test");    consumerInfo2.setPrefetchSize(100);    connection2.send(consumerInfo2);    for (int i=0; i < 4; i++) {      Message m=createMessage(producerInfo2,dest3,DeliveryMode.PERSISTENT);      connection2.send(m);      sentAfterCreateConsumer.add(m.getMessageId());    }    for (int i=0; i < 4; i++) {      Message m2=receiveMessage(connection2);      assertNotNull("Recovered message missing: " + i,m2);      assertEquals(sentBeforeRestart.get(i),m2.getMessageId());    }    for (int i=0; i < 4; i++) {      Message m2=receiveMessage(connection2);      assertNotNull("Before activated message missing: " + i,m2);      assertEquals(sentBeforeCreateConsumer.get(i),m2.getMessageId());    }    for (int i=0; i < 4; i++) {      Message m2=receiveMessage(connection2);      assertNotNull("After activated message missing: " + i,m2);      assertEquals("" + i,sentAfterCreateConsumer.get(i),m2.getMessageId());    }    assertNoMessagesLeft(connection2);  }}  }
class C{  public ParallelTaskBean(ParallelTask task){  super();  BeanMapper.copy(task,this);  this.parallelTaskResult.putAll(task.getParallelTaskResult());  this.taskErrorMetas.addAll(task.getTaskErrorMetas());  this.replacementVarMap.putAll(task.getReplacementVarMap());  this.state=task.getState().toString();  this.submitTime=PcDateUtils.getDateTimeStrStandard(new Date(task.getSubmitTime()));  this.executeStartTime=PcDateUtils.getDateTimeStrStandard(new Date(task.getExecuteStartTime()));  this.executionEndTime=PcDateUtils.getDateTimeStrStandard(new Date(task.getExecutionEndTime()));}  }
class C{  public static boolean isShunned(DistributedSystem sys,DistributedMember mbr){  return ((Manager)getMembershipManager(sys)).isShunned(mbr);}  }
class C{  public void registerBus(BusMovement bus){  busses.put(bus.getID(),bus);}  }
class C{  public int jsGet_counter(){  return counter++;}  }
class C{  public float percentSlotsInuse(final long totalInuse){  if (totalInuse == 0) {    return 0.0f;  }  final BigDecimal used=new BigDecimal(100 * usedSlots());  final BigDecimal total=new BigDecimal(totalInuse);  if (total.signum() == 0)   return 0f;  return used.divide(total,2,RoundingMode.HALF_UP).floatValue();}  }
class C{  public synchronized void commit() throws ReplicatorException, InterruptedException {  assertWritable();  if (cursor != null) {    LogFile dataFile=cursor.getLogFile();    try {      dataFile.flush();    } catch (    IOException e) {      throw new THLException("Commit failed on log: seqno=" + cursor.getLastSeqno() + " log file="+ dataFile.getFile().getName());    }    diskLog.checkLogSyncTask();  }}  }
class C{  public void addBusyConnections(int busyConnectionsDelta){  setBusyConnections(getBusyConnections() + busyConnectionsDelta);}  }
class C{  BigInteger(int sign,int numberLength,int[] digits){  setJavaRepresentation(sign,numberLength,digits);}  }
class C{  public static Vec4[] clipToFrustum(Vec4 pa,Vec4 pb,Frustum frustum){  return clipToFrustum(pa,pb,frustum,1);}  }
class C{  public void incSoldForItem(String item,int count){  handlePrefixedCounting(item,count,"sold.",sold);}  }
class C{  public void testTwoTailDelimiters() throws Exception {  byte[] delim=array(F.t(wrap(2),8));  byte[] data=array(F.t(wrap(1),8),F.t(delim,2));  assertSplit(0,4,0,16,data,delim);  assertSplit(0,8,0,16,data,delim);  assertSplit(0,12,0,16,data,delim);  assertSplit(0,16,0,16,data,delim);  assertSplit(0,20,0,24,data,delim);  assertSplit(0,24,0,24,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplitNull(2,10,data,delim);  assertSplitNull(2,14,data,delim);  assertSplit(2,18,16,8,data,delim);  assertSplit(2,22,16,8,data,delim);  assertSplitNull(8,4,data,delim);  assertSplitNull(8,8,data,delim);  assertSplit(8,12,16,8,data,delim);  assertSplit(8,16,16,8,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);  assertSplit(10,10,16,8,data,delim);  assertSplit(10,14,16,8,data,delim);  assertSplit(16,4,16,8,data,delim);  assertSplit(16,8,16,8,data,delim);  assertSplitNull(18,2,data,delim);  assertSplitNull(18,6,data,delim);}  }
class C{  protected void onMeasureChild(View child,int position,int widthMeasureSpec,int heightMeasureSpec){  child.measure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public static boolean isDigits(String str){  if (StringUtils.isEmpty(str)) {    return false;  }  for (int i=0; i < str.length(); i++) {    if (!Character.isDigit(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof FacesConfigBean : "Assertion Error: Expected FacesConfigBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ValidatorRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ValidatorBean vb=(ValidatorBean)clazz.newInstance();  digester.push(vb);}  }
class C{  public blockquote addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static boolean testAarLine(float minX,float minY,float maxX,float maxY,float x0,float y0,float x1,float y1){  float a=y0 - y1;  float b=x1 - x0;  float c=-b * y0 - a * x0;  return testAarLine(minX,minY,maxX,maxY,a,b,c);}  }
class C{  public boolean isCancelable(){  return cancelable;}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes attr) throws SAXException {  try {    stopTerminator();    if (isIndenting()) {      if (curIndent > 0) {        indentMe();      }      curIndent++;    }    if (w != null) {      w.write('<');      w.write(qName);      if (attr != null) {        for (int i=attr.getLength(); i > 0; ) {          w.write(' ');          String name=attr.getQName(--i);          w.write(name);          if (delayedPrefixes != null) {            delayedPrefixes.remove(name);          }          w.write("=\"");          writeCData(attr.getValue(i));          w.write('"');        }      }      if (delayedPrefixes != null && delayedPrefixes.size() > 0) {        for (        Map.Entry<String,String> entry : delayedPrefixes.entrySet()) {          w.write(' ');          w.write(entry.getKey());          w.write("=\"");          w.write(entry.getValue());          w.write('"');        }        delayedPrefixes.clear();      }    }    state=STATE_IN_START_ELEMENT;  } catch (  java.io.IOException e) {    throw new SAXException(e);  }}  }
class C{  private boolean isTaxonomicPageEmpty(Eml eml){  for (  TaxonomicCoverage cov : eml.getTaxonomicCoverages()) {    boolean isTaxonomicCoverageEmpty=isTaxonomicCoverageEmpty(cov);    if (!isTaxonomicCoverageEmpty) {      return false;    }  }  return true;}  }
class C{  public void renameAttribute(Attribute att,String name){  renameAttribute(att.index(),name);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int which=getArg0AsNode(xctxt);  if (DTM.NULL != which) {    return new XString("N" + Integer.toHexString(which).toUpperCase());  } else   return XString.EMPTYSTRING;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof JarEntry))   return false;  JarEntry entry=(JarEntry)o;  return _jarPath.equals(entry._jarPath);}  }
class C{  @Override public void parse(final Cookie cookie,final String value) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof Cookie2) {    final Cookie2 cookie2=(Cookie2)cookie;    if (value == null) {      throw new MalformedCookieException("Missing value for version attribute");    }    int version=-1;    try {      version=Integer.parseInt(value);    } catch (    final NumberFormatException e) {      version=-1;    }    if (version < 0) {      throw new MalformedCookieException("Invalid cookie version.");    }    cookie2.setVersion(version);    cookie2.setVersionAttributeSpecified(true);  }}  }
class C{  public void testGetView_getsCompactTweetView(){  final Timeline<Tweet> fakeTimeline=new FakeTweetTimeline(10);  final TimelineDelegate<Tweet> fakeDelegate=new TimelineDelegate<>(fakeTimeline);  listAdapter=new TweetTimelineListAdapter(getContext(),fakeDelegate,ANY_STYLE,null);  final View view=listAdapter.getView(0,null,null);  assertEquals(CompactTweetView.class,view.getClass());  final BaseTweetView tv=(BaseTweetView)view;  assertEquals(listAdapter.getItemId(0),tv.getTweetId());}  }
class C{  byte[] javacCompile(String packageName,String className,String source){  File dir=new File(COMPILE_DIR);  if (packageName != null) {    dir=new File(dir,packageName.replace('.','/'));    FileUtils.createDirectories(dir.getAbsolutePath());  }  File javaFile=new File(dir,className + ".java");  File classFile=new File(dir,className + ".class");  try {    OutputStream f=FileUtils.newOutputStream(javaFile.getAbsolutePath(),false);    Writer out=IOUtils.getBufferedWriter(f);    classFile.delete();    out.write(source);    out.close();    if (JAVAC_SUN != null) {      javacSun(javaFile);    } else {      javacProcess(javaFile);    }    byte[] data=new byte[(int)classFile.length()];    DataInputStream in=new DataInputStream(new FileInputStream(classFile));    in.readFully(data);    in.close();    return data;  } catch (  Exception e) {    throw DbException.convert(e);  } finally {    javaFile.delete();    classFile.delete();  }}  }
class C{  public void bridgeSetValue(int index,String name,boolean isFramework,ResourceValue value){  mResourceData[index]=value;  mNames[index]=name;  mIsFramework[index]=isFramework;}  }
class C{  public final static float perpendicular_distance_to_line(int x1,int y1,int x2,int y2,int x3,int y3){  int x12=x2 - x1;  int y12=y2 - y1;  int x13=x3 - x1;  int y13=y3 - y1;  float D12=distance(x1,y1,x2,y2);  return Math.abs(((x12 * y13) - (x13 * y12)) / D12);}  }
class C{  public static ArrayList<String> readQueries(String filePath) throws FileNotFoundException {  ArrayList<String> queries=new ArrayList<String>();  Scanner scanner=new Scanner(new File(filePath));  while (scanner.hasNextLine()) {    queries.add(scanner.nextLine().trim());  }  scanner.close();  return queries;}  }
class C{  public ImageUrlsRequestBuilder addImageFormat(ImageFormat imageFormat,ImageSize imageSize){  mRequestedImageFormats.put(imageFormat,imageSize);  return this;}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  private void addPoint(Coordinate pt){  ptCount+=1;  ptCentSum.x+=pt.x;  ptCentSum.y+=pt.y;}  }
class C{  public void testIterate() throws Throwable {  Collection<Address> servers=Arrays.asList(new Address("localhost",5000),new Address("localhost",5001),new Address("localhost",5002));  AddressSelector selector=new AddressSelector(ServerSelectionStrategies.ANY);  selector.reset(null,servers);  assertNull(selector.leader());  assertEquals(selector.servers(),servers);  assertEquals(selector.state(),AddressSelector.State.RESET);  assertTrue(selector.hasNext());  assertNotNull(selector.next());  assertEquals(selector.state(),AddressSelector.State.ITERATE);  assertTrue(selector.hasNext());  assertNotNull(selector.next());  assertTrue(selector.hasNext());  assertNotNull(selector.next());  assertFalse(selector.hasNext());  assertEquals(selector.state(),AddressSelector.State.COMPLETE);}  }
class C{  public String toString(){  return null;}  }
class C{  private void addLatitudeBound(double latitude){  if (!noTopLatitudeBound && (maxLatitude == null || latitude > maxLatitude))   maxLatitude=latitude;  if (!noBottomLatitudeBound && (minLatitude == null || latitude < minLatitude))   minLatitude=latitude;}  }
class C{  public void convolveCartesian(ComplexVector other,int direction){  IncompatibleVectorsException.checkVectorsCompatible(this,other);  float[] norms=new float[dimension];  float[] otherNorms=new float[dimension];  for (int q=0; q < dimension; q++) {    float norm=0;    float othernorm=0;    norm+=Math.pow(this.coordinates[q * 2],2);    norm+=Math.pow(this.coordinates[2 * q + 1],2);    othernorm+=Math.pow(other.coordinates[q * 2],2);    othernorm+=Math.pow(other.coordinates[2 * q + 1],2);    norm=(float)Math.sqrt(norm);    othernorm=(float)Math.sqrt(othernorm);    norms[q]=norm;    otherNorms[q]=othernorm;  }  toDensePolar();  ComplexVector otherCopy=other.copy();  otherCopy.toDensePolar();  short[] otherAngles=otherCopy.getPhaseAngles();  for (int i=0; i < dimension; i++) {    if (otherAngles[i] == CircleLookupTable.ZERO_INDEX) {      continue;    }    if (phaseAngles[i] == CircleLookupTable.ZERO_INDEX) {      phaseAngles[i]=otherAngles[i];      continue;    }    short angleToAdd=otherAngles[i];    if (direction <= 0) {      angleToAdd=(short)(CircleLookupTable.PHASE_RESOLUTION - angleToAdd);    }    phaseAngles[i]=(short)((phaseAngles[i] + angleToAdd) % CircleLookupTable.PHASE_RESOLUTION);  }  toCartesian();  double newNorm=0;  for (int q=0; q < dimension; q++) {    this.coordinates[q * 2]*=(norms[q] * otherNorms[q]);    this.coordinates[q * 2 + 1]*=(norms[q] * otherNorms[q]);  }  normalizeHermitian();}  }
class C{  private void deletePubsubSubscription(String subscription) throws IOException {  if (pubsubClient == null) {    pubsubClient=Transport.newPubsubClient(options.as(PubsubOptions.class)).build();  }  if (executeNullIfNotFound(pubsubClient.projects().subscriptions().get(subscription)) != null) {    pubsubClient.projects().subscriptions().delete(subscription).execute();  }}  }
class C{  public TObjectIntHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  @Override public void chartProgress(ChartProgressEvent event){}  }
class C{  static String stringFromPacket(DatagramPacket packet){  return new String(packet.getData(),0,packet.getLength());}  }
class C{  private void processHistoryNotification(final IFileStore store,final RefactoringHistoryEvent event,final String name) throws CoreException {  final RefactoringDescriptorProxy proxy=event.getDescriptor();  final int type=event.getEventType();  final RefactoringHistoryManager manager=new RefactoringHistoryManager(store,name);  final NullProgressMonitor monitor=new NullProgressMonitor();  if (type == RefactoringHistoryEvent.PUSHED || type == RefactoringHistoryEvent.ADDED) {    final RefactoringDescriptor descriptor=proxy.requestDescriptor(monitor);    if (descriptor != null)     manager.addRefactoringDescriptor(descriptor,type == RefactoringHistoryEvent.ADDED,monitor);  } else   if (type == RefactoringHistoryEvent.POPPED)   manager.removeRefactoringDescriptors(new RefactoringDescriptorProxy[]{proxy},monitor,RefactoringCoreMessages.RefactoringHistoryService_updating_history);}  }
class C{  private static Font createCommonSizeFont(Font font){  Map attributes=new HashMap(font.getAttributes());  attributes.put(TextAttribute.SIZE,new Float(COMMON_FONT_SIZE));  attributes.remove(TextAttribute.TRANSFORM);  return new Font(attributes);}  }
class C{  private void testAdempiereUsers(String host,int port){  String sql="SELECT Name, Password FROM AD_User WHERE IsActive='Y'";  String urlC="jdbc:oracle:thin:@//" + host + ":"+ port+ "/"+ m_dbName;  try {    inform("  - Client connection URL=" + urlC + ", User="+ m_uid);    Connection con=DriverManager.getConnection(urlC,m_uid,m_pwd);    inform("  - connected");    Statement stmt=con.createStatement();    inform("  - statement created");    ResultSet rs=stmt.executeQuery(sql);    inform("  - query executed listing active application users:");    while (rs.next()) {      String user=rs.getString(1);      String password=rs.getString(2);      String answer=">>  User = " + user;      if ((user.equals("System") || user.equals("SuperUser")) && password.equals("System"))       answer+="  with standard password (should be changed)";      inform(answer);    }    rs.close();    inform("  - query closed");    stmt.close();    inform("  - statement closed");    con.close();    inform("  - connection closed");  } catch (  SQLException e) {    inform("  ERROR: " + e.getMessage());  }}  }
class C{  public static boolean equals(Coordinate[] coord1,Coordinate[] coord2){  if (coord1 == coord2)   return true;  if (coord1 == null || coord2 == null)   return false;  if (coord1.length != coord2.length)   return false;  for (int i=0; i < coord1.length; i++) {    if (!coord1[i].equals(coord2[i]))     return false;  }  return true;}  }
class C{  public C1_DTLZ1(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public void fireZoom(int zoomType,float amount){  if (!((zoomType == ZoomEvent.RELATIVE) || (zoomType == ZoomEvent.ABSOLUTE))) {    throw new IllegalArgumentException("Bad value, " + zoomType + " for zoomType in "+ "ZoomSupport.fireZoom()");  }  if (isEmpty())   return;  ZoomEvent evt=new ZoomEvent(source,zoomType,amount);  for (  ZoomListener listener : this) {    listener.zoom(evt);  }}  }
class C{  @SuppressWarnings({"RedundantIfStatement"}) protected boolean needsToUpdate(DrawContext dc){  if (this.lastEyePoint == null)   return true;  View view=dc.getView();  double altitudeAboveGround=computeAltitudeAboveGround(dc);  if (view.getEyePoint().distanceTo3(this.lastEyePoint) > altitudeAboveGround / 100)   return true;  if (this.lastVerticalExaggeration != dc.getVerticalExaggeration())   return true;  if (Math.abs(this.lastViewHeading - view.getHeading().degrees) > 1)   return true;  if (Math.abs(this.lastViewPitch - view.getPitch().degrees) > 1)   return true;  if (Math.abs(this.lastViewFOV - view.getFieldOfView().degrees) > 1)   return true;  if (dc.getGlobe() != this.globe)   return true;  if (dc.is2DGlobe()) {    if (((Globe2D)dc.getGlobe()).getProjection() != this.lastProjection)     return true;  }  return false;}  }
class C{  private static void loadHash(){  reservedWords.put("abstract","abstract");  reservedWords.put("do","do");  reservedWords.put("inner","inner");  reservedWords.put("public","public");  reservedWords.put("var","var");  reservedWords.put("boolean","boolean");  reservedWords.put("continue","continue");  reservedWords.put("int","int");  reservedWords.put("return","return");  reservedWords.put("void","void");  reservedWords.put("break","break");  reservedWords.put("else","else");  reservedWords.put("interface","interface");  reservedWords.put("short","short");  reservedWords.put("volatile","volatile");  reservedWords.put("byvalue","byvalue");  reservedWords.put("extends","extends");  reservedWords.put("long","long");  reservedWords.put("static","static");  reservedWords.put("while","while");  reservedWords.put("case","case");  reservedWords.put("final","final");  reservedWords.put("naive","naive");  reservedWords.put("super","super");  reservedWords.put("transient","transient");  reservedWords.put("cast","cast");  reservedWords.put("float","float");  reservedWords.put("new","new");  reservedWords.put("rest","rest");  reservedWords.put("catch","catch");  reservedWords.put("for","for");  reservedWords.put("null","null");  reservedWords.put("synchronized","synchronized");  reservedWords.put("char","char");  reservedWords.put("finally","finally");  reservedWords.put("operator","operator");  reservedWords.put("this","this");  reservedWords.put("class","class");  reservedWords.put("generic","generic");  reservedWords.put("outer","outer");  reservedWords.put("switch","switch");  reservedWords.put("const","const");  reservedWords.put("goto","goto");  reservedWords.put("package","package");  reservedWords.put("throw","throw");  reservedWords.put("double","double");  reservedWords.put("if","if");  reservedWords.put("private","private");  reservedWords.put("true","true");  reservedWords.put("default","default");  reservedWords.put("import","import");  reservedWords.put("protected","protected");  reservedWords.put("try","try");}  }
class C{  private boolean upField(EditorState editorState,MathContainer component){  if (component instanceof MathSequence) {    if (component.getParent() instanceof MathFunction) {      MathFunction function=(MathFunction)component.getParent();      int upIndex=function.getUpIndex(component.getParentIndex());      if (upIndex >= 0) {        editorState.setCurrentField(function.getArgument(upIndex));        editorState.setCurrentOffset(0);        return true;      }    }  }  if (component.getParent() != null) {    return upField(editorState,component.getParent());  }  return false;}  }
class C{  public Deployer createDeployer(Container container){  Deployer deployer=DEPLOYER_FACTORY.createDeployer(container);  deployer.setLogger(getLogger());  return deployer;}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  for (int i=0; i < mValues.size(); i++) {    double value=mValues.get(i);    xySeries.add(i + 1,value,mColors.get(i),mExplains.get(i));  }  return xySeries;}  }
class C{  @Override protected void reset(){  inputToRoots.clear();}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    return in.read();  }}  }
class C{  public Yaml(DumperOptions dumperOptions){  this(new Constructor(),new Representer(),dumperOptions);}  }
class C{  public JButton addButton(JButton button){  addComponent(button);  return button;}  }
class C{  public void addColumn(String columnName,boolean searchable,boolean orderable,String searchValue){  this.columns.add(new Column(columnName,"",searchable,orderable,new Search(searchValue,false)));}  }
class C{  private void calculateTrimArea(Rect bounds){  float size=Math.min(bounds.height(),bounds.width());  float yOffset=(bounds.height() - size) / 2f;  float xOffset=(bounds.width() - size) / 2f;  float padding=mPadding + (bounds.height() - 2f * mPadding) * 1f / 6f;  mInternalBounds.set(bounds.left + padding + xOffset,bounds.top + padding + yOffset,bounds.right - padding - xOffset,bounds.bottom - padding - yOffset);  mCenter=mInternalBounds.centerX();  mSize=mInternalBounds.width();  mPlayTipOffset=1f / 6f * mSize;  mPlayBaseOffset=0.07735f * mSize;  setTransitionState(0f,0f);}  }
class C{  public static List<Audit> findByEntity(EntityManager em,JPAEntity entity){  return findByEntity(em,entity,null);}  }
class C{  public static String convertToTitleRec(int n){  return n <= 0 ? "" : convertToTitleRec(--n / 26) + (char)('A' + (n % 26));}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static int indexInArray(int needle,int[] stack,int maxLen){  for (int i=0; i < maxLen; i++) {    if (stack[i] == needle) {      return i;    }  }  return -1;}  }
class C{  public boolean hasDepth(){  return this.depth;}  }
class C{  public static ConsoleComponent open(InputStream input,final String name,final String format){  return new ConsoleComponent(name);}  }
class C{  public static boolean isRooted(Context c){  boolean result=false;  OutputStream stdin=null;  InputStream stdout=null;  try {    Process process=Runtime.getRuntime().exec("su");    stdin=process.getOutputStream();    stdout=process.getInputStream();    DataOutputStream os=null;    try {      os=new DataOutputStream(stdin);      os.writeBytes("ls /data\n");      os.writeBytes("exit\n");      os.flush();    } catch (    IOException e) {      e.printStackTrace();    } finally {      close(os);    }    int n=0;    BufferedReader reader=null;    try {      reader=new BufferedReader(new InputStreamReader(stdout));      while (reader.readLine() != null) {        n++;      }    } catch (    IOException e) {      e.printStackTrace();    } finally {      close(reader);    }    if (n > 0) {      result=true;    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    close(stdout);    close(stdin);  }  if (result == false) {    Logger.log(c,"Require superuser privileges (root).\n");  }  return result;}  }
class C{  public FactoryDto build(Reader json) throws IOException, ApiException {  FactoryDto factory=DtoFactory.getInstance().createDtoFromJson(json,FactoryDto.class);  checkValid(factory);  return factory;}  }
class C{  protected void dispatchMouseEvent(String eventType,Element targetElement,Element relatedElement,Point clientXY,GraphicsNodeMouseEvent evt,boolean cancelable,int bubbleLimit){  if (ctx12.mouseCaptureTarget != null) {    NodeEventTarget net=null;    if (targetElement != null) {      net=(NodeEventTarget)targetElement;      while (net != null && net != ctx12.mouseCaptureTarget) {        net=net.getParentNodeEventTarget();      }    }    if (net == null) {      if (ctx12.mouseCaptureSendAll) {        targetElement=(Element)ctx12.mouseCaptureTarget;      } else {        targetElement=null;      }    }  }  if (targetElement != null) {    Point screenXY=evt.getScreenPoint();    DocumentEvent d=(DocumentEvent)targetElement.getOwnerDocument();    DOMMouseEvent mouseEvt=(DOMMouseEvent)d.createEvent("MouseEvents");    String modifiers=DOMUtilities.getModifiersList(evt.getLockState(),evt.getModifiers());    mouseEvt.initMouseEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,eventType,true,cancelable,null,evt.getClickCount(),screenXY.x,screenXY.y,clientXY.x,clientXY.y,(short)(evt.getButton() - 1),(EventTarget)relatedElement,modifiers);    ((AbstractEvent)mouseEvt).setBubbleLimit(bubbleLimit);    try {      ((EventTarget)targetElement).dispatchEvent(mouseEvt);    } catch (    RuntimeException e) {      ua.displayError(e);    } finally {      lastTargetElement=targetElement;    }  }  if (ctx12.mouseCaptureTarget != null && ctx12.mouseCaptureAutoRelease && "mouseup".equals(eventType)) {    ctx12.stopMouseCapture();  }}  }
class C{  @Override public void writeClassFieldLength(int len) throws IOException {  writeInt(len);}  }
class C{  public static boolean isMobileRestrict(Context context,String pkgName){  return isNetworkRestrict(context,pkgName,FIREWALL_MOBILE_RULE);}  }
class C{  public Try<R,Throwable> execute(T input){  return Try.withCatch(null);}  }
class C{  public SparseDoubleMatrix3D(double[][][] values){  this(values.length,(values.length == 0 ? 0 : values[0].length),(values.length == 0 ? 0 : values[0].length == 0 ? 0 : values[0][0].length));  assign(values);}  }
class C{  @Override public IMessage onMessage(final MessageUpdateHeldPigSpawnerFinite message,final MessageContext ctx){  Minecraft.getMinecraft().addScheduledTask(null);  return null;}  }
class C{  public void add(float element){  if (size == elements.length)   ensureCapacity(size + 1);  elements[size++]=element;}  }
class C{  @Override public void removeVehicle(final Id<Vehicle> vehicleId){  this.vehicles.remove(vehicleId);}  }
class C{  private void buildAndSendResult(HttpServerRequest req,JsonObject responseObject,String collectedeTags){  String etagFromResources=HashCodeGenerator.createSHA256HashCode(collectedeTags);  if (finalOriginalParams.contains("delta")) {    req.response().headers().set("x-delta","" + xDeltaResponseNumber);  }  JsonObject responseContent=makeCachedResponse(req,etagFromResources,responseObject);  if (responseContent == null) {    if (log.isTraceEnabled()) {      log.trace("end response without content");    }    req.response().end();  } else {    if (log.isTraceEnabled()) {      log.trace("end response with content");    }    req.response().end(responseObject.toString());  }}  }
class C{  public static int findRange(ByteBuffer buffer,int start,byte[] pattern){  byte firstByte=pattern[0];  int limit=buffer.limit() - pattern.length;  for (int i=start; i < limit; ++i) {    if ((firstByte == buffer.get(i)) && matchesRange(buffer,i,pattern)) {      return i;    }  }  return -1;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == FunctionExpression.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_EXPRESSION___IS_ARROW_FUNCTION:      return N4JSPackage.ARROW_FUNCTION___IS_ARROW_FUNCTION;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public int parse(char c,CharBuffer in){  if (Surrogate.isHigh(c)) {    if (!in.hasRemaining()) {      error=CoderResult.UNDERFLOW;      return -1;    }    char d=in.get();    if (Surrogate.isLow(d)) {      character=toUCS4(c,d);      isPair=true;      error=null;      return character;    }    error=CoderResult.malformedForLength(1);    return -1;  }  if (Surrogate.isLow(c)) {    error=CoderResult.malformedForLength(1);    return -1;  }  character=c;  isPair=false;  error=null;  return character;}  }
class C{  protected void trace(Throwable t,String msg){  if ((DEBUG) && (t.getStackTrace().length > 0)) {    System.out.println("trace: " + t.getStackTrace()[0] + ": "+ msg);  }}  }
class C{  public NewCookie cookieFor(String value,ZonedDateTime expiration){  long maxAge=Duration.between(ZonedDateTime.now(clock),expiration).getSeconds();  HttpCookie cookie=new HttpCookie(config.getName(),value,config.getDomain(),config.getPath(),maxAge,config.isHttpOnly(),config.isSecure());  Response response=new Response(null,null);  response.addCookie(cookie);  return NewCookie.valueOf(response.getHttpFields().getStringField(HttpHeader.SET_COOKIE));}  }
class C{  protected void doDescribeTest(final String method,final RDFFormat format) throws Exception {  final URI mike=new URIImpl(BD.NAMESPACE + "Mike");  final URI bryan=new URIImpl(BD.NAMESPACE + "Bryan");  final URI person=new URIImpl(BD.NAMESPACE + "Person");  final URI likes=new URIImpl(BD.NAMESPACE + "likes");  final URI rdf=new URIImpl(BD.NAMESPACE + "RDF");  final URI rdfs=new URIImpl(BD.NAMESPACE + "RDFS");  final Literal label1=new LiteralImpl("Mike");  final Literal label2=new LiteralImpl("Bryan");{    final Graph g=new LinkedHashModel();    g.add(mike,RDF.TYPE,person);    g.add(mike,likes,rdf);    g.add(mike,RDFS.LABEL,label1);    g.add(bryan,RDF.TYPE,person);    g.add(bryan,likes,rdfs);    g.add(bryan,RDFS.LABEL,label2);    m_repo.add(new AddOp(g));  }  final Graph expected=new LinkedHashModel();{    expected.add(new StatementImpl(mike,likes,rdf));    expected.add(new StatementImpl(mike,RDF.TYPE,person));    expected.add(new StatementImpl(mike,RDFS.LABEL,label1));  }{    final String queryStr="prefix bd: <" + BD.NAMESPACE + "> "+ "prefix rdf: <"+ RDF.NAMESPACE+ "> "+ "prefix rdfs: <"+ RDFS.NAMESPACE+ "> "+ "DESCRIBE ?x "+ "WHERE { "+ "  ?x rdf:type bd:Person . "+ "  ?x bd:likes bd:RDF "+ "}";    assertSameGraph(expected,m_repo.prepareGraphQuery(queryStr));  }}  }
class C{  private void updateSaveFields(){  m_imageBaseAddr.setModified(isImageBaseModified());  m_fileBaseAddr.setModified(isFileBaseModified());  if (m_debuggerCombo != null) {    m_debuggerCombo.setModified(getSelectedDebugger() != m_module.getConfiguration().getDebuggerTemplate());  }}  }
class C{  public static Test suite(){  return (new TestSuite(ComponentITCase.class));}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  @Override public void printOperator(Vertex expression,Writer writer,String indent,List<Vertex> functions,List<Vertex> variables,Set<Vertex> elements,Network network) throws IOException {  printComments(expression,writer,indent + "\t\t",true,network);  Vertex operator=expression.getRelationship(Primitive.OPERATOR);  if (operator == null) {    return;  }  List<Relationship> arguments=expression.orderedRelationships(Primitive.ARGUMENT);  if (operator.is(Primitive.CALL)) {    Vertex source=expression.getRelationship(Primitive.THIS);    if (source != null) {      printElement(source,writer,indent,functions,variables,elements,network);    }    Vertex function=expression.getRelationship(Primitive.FUNCTION);    if (function != null) {      if (source == null) {        if (function.isPrimitive()) {          writer.write(((Primitive)function.getData()).getIdentity());        } else {          printElement(function,writer,indent,functions,variables,elements,network);        }      } else {        if (function.isPrimitive() && !(source.getData() instanceof Number)) {          writer.write(".");          writer.write(((Primitive)function.getData()).getIdentity());        } else {          writer.write("[");          printElement(function,writer,indent,functions,variables,elements,network);          writer.write("]");        }      }    } else {      writer.write("** missing function **");    }    printArguments(expression,Primitive.ARGUMENT,0,null,false,false,false,true,writer,indent + "\t",variables,functions,elements,false,network);    return;  } else   if (operator.is(Primitive.ASSIGN)) {    if (arguments != null && !arguments.isEmpty()) {      printElement(arguments.get(0).getTarget(),writer,indent,functions,variables,elements,network);    }    if (expression.hasRelationship(Primitive.NOT,Primitive.NOT)) {      writer.write(" = ! ");    } else {      writer.write(" = ");    }    if (arguments != null && arguments.size() > 1) {      printElement(arguments.get(1).getTarget(),writer,indent,functions,variables,elements,network);    }    return;  } else   if (operator.is(Primitive.INCREMENT)) {    if (arguments != null && !arguments.isEmpty()) {      printElement(arguments.get(0).getTarget(),writer,indent,functions,variables,elements,network);    }    writer.write(" ++");    return;  } else   if (operator.is(Primitive.DECREMENT)) {    if (arguments != null && !arguments.isEmpty()) {      printElement(arguments.get(0).getTarget(),writer,indent,functions,variables,elements,network);    }    writer.write(" --");    return;  } else   if (operator.is(Primitive.GET)) {    Vertex source=null;    if (arguments != null && !arguments.isEmpty()) {      source=arguments.get(0).getTarget();      printElement(source,writer,indent,functions,variables,elements,network);    }    if (arguments != null && arguments.size() > 1) {      Vertex variable=arguments.get(1).getTarget();      if (variable.isPrimitive()) {        writer.write(".");        writer.write(((Primitive)variable.getData()).getIdentity());        Vertex index=expression.getRelationship(Primitive.INDEX);        if ((index != null) && (index.getData() instanceof Number)) {          writer.write("[");          writer.write(index.getData().toString());          writer.write("]");        } else         if (arguments.size() > 3) {          Vertex associate=arguments.get(2).getTarget();          Vertex associateRelationship=arguments.get(3).getTarget();          writer.write("[");          printElement(associate,writer,indent,functions,variables,elements,network);          writer.write(", ");          printElement(associateRelationship,writer,indent,functions,variables,elements,network);          writer.write("]");        }      } else {        writer.write("[");        printElement(variable,writer,indent,functions,variables,elements,network);        writer.write("]");      }    }    return;  } else   if (operator.is(Primitive.SET)) {    Vertex source=null;    if (arguments != null && !arguments.isEmpty()) {      source=arguments.get(0).getTarget();      printElement(source,writer,indent,functions,variables,elements,network);    }    if (arguments != null && arguments.size() > 2) {      Vertex variable=arguments.get(1).getTarget();      Vertex value=arguments.get(2).getTarget();      if (variable.isPrimitive() && !(source.getData() instanceof Number)) {        writer.write(".");        writer.write(((Primitive)variable.getData()).getIdentity());        Vertex index=expression.getRelationship(Primitive.INDEX);        if ((index != null) && (index.getData() instanceof Number)) {          writer.write("[");          writer.write(index.getData().toString());          writer.write("]");        }      } else {        writer.write("[");        printElement(variable,writer,indent,functions,variables,elements,network);        writer.write("]");      }      writer.write(" = ");      printElement(value,writer,indent,functions,variables,elements,network);    }    return;  } else   if (operator.is(Primitive.ADD)) {    Vertex source=null;    if (arguments != null && !arguments.isEmpty()) {      source=arguments.get(0).getTarget();      printElement(source,writer,indent,functions,variables,elements,network);    }    if (arguments != null && arguments.size() > 2) {      Vertex variable=arguments.get(1).getTarget();      Vertex value=arguments.get(2).getTarget();      if (variable.isPrimitive() && !(source.getData() instanceof Number)) {        writer.write(".");        writer.write(((Primitive)variable.getData()).getIdentity());        Vertex index=expression.getRelationship(Primitive.INDEX);        if ((index != null) && (index.getData() instanceof Number)) {          writer.write("[");          writer.write(index.getData().toString());          writer.write("]");        }      } else {        writer.write("[");        printElement(variable,writer,indent,functions,variables,elements,network);        writer.write("]");      }      writer.write(" =+ ");      printElement(value,writer,indent,functions,variables,elements,network);    }    return;  } else   if (operator.is(Primitive.REMOVE)) {    Vertex source=null;    if (arguments != null && !arguments.isEmpty()) {      source=arguments.get(0).getTarget();      printElement(source,writer,indent,functions,variables,elements,network);    }    if (arguments != null && arguments.size() > 2) {      Vertex variable=arguments.get(1).getTarget();      Vertex value=arguments.get(2).getTarget();      if (variable.isPrimitive() && !(source.getData() instanceof Number)) {        writer.write(".");        writer.write(((Primitive)variable.getData()).getIdentity());        Vertex index=expression.getRelationship(Primitive.INDEX);        if ((index != null) && (index.getData() instanceof Number)) {          writer.write("[");          writer.write(index.getData().toString());          writer.write("]");        }      } else {        writer.write("[");        printElement(variable,writer,indent,functions,variables,elements,network);        writer.write("]");      }      writer.write(" =- ");      printElement(value,writer,indent,functions,variables,elements,network);    }    return;  } else   if (BINARY_OPERATORS.containsKey(operator.getData())) {    if (arguments != null && !arguments.isEmpty()) {      Vertex left=arguments.get(0).getTarget();      boolean bracket=left.instanceOf(Primitive.EXPRESSION);      if (bracket) {        writer.write("(");      }      printElement(left,writer,indent,functions,variables,elements,network);      if (bracket) {        writer.write(")");      }    }    writer.write(" ");    writer.write(BINARY_OPERATORS.get(operator.getData()));    writer.write(" ");    if (arguments != null && arguments.size() > 1) {      Vertex right=arguments.get(1).getTarget();      boolean bracket=right.instanceOf(Primitive.EXPRESSION);      if (bracket) {        writer.write("(");      }      printElement(arguments.get(1).getTarget(),writer,indent,functions,variables,elements,network);      if (bracket) {        writer.write(")");      }    }    return;  } else   if (operator.is(Primitive.NOT)) {    writer.write("! ");    if (arguments != null && arguments.size() > 0) {      printElement(arguments.get(0).getTarget(),writer,indent,functions,variables,elements,network);    }    return;  } else {    writer.write(((Primitive)operator.getData()).getIdentity());  }  if (operator.is(Primitive.WHILE)) {    writer.write(" ");    printArguments(expression,Primitive.ARGUMENT,0,null,false,false,false,true,writer,indent,variables,functions,elements,false,network);    Collection<Relationship> dos=expression.orderedRelationships(Primitive.DO);    if (dos != null) {      String newIndent=indent + "\t";      writer.write(" {\r\n");      writer.write(newIndent);      writer.write("\t");      writer.write("\t");      printArguments(expression,Primitive.DO,0,null,false,true,true,false,writer,newIndent,variables,functions,elements,true,network);      writer.write(newIndent);      writer.write("\t");      writer.write("}");    } else {      writer.write(" {}");    }  } else   if (operator.is(Primitive.DO) || operator.is(Primitive.THINK)) {    Collection<Relationship> dos=expression.orderedRelationships(Primitive.DO);    if (dos != null) {      String newIndent=indent + "\t";      writer.write(" {\r\n");      writer.write(newIndent);      writer.write("\t");      writer.write("\t");      printArguments(expression,Primitive.DO,0,null,false,true,true,false,writer,newIndent,variables,functions,elements,true,network);      writer.write(newIndent);      writer.write("\t");      writer.write("}");    } else {      writer.write(" {}");    }  } else   if (operator.is(Primitive.FOR)) {    writer.write(" (");    int index=0;    while (arguments != null && (arguments.size() > index)) {      if (index > 0) {        writer.write(", ");      }      printElement(arguments.get(index++).getTarget(),writer,indent,functions,variables,elements,network);      writer.write(" in ");      printElement(arguments.get(index++).getTarget(),writer,indent,functions,variables,elements,network);      index=index + 2;    }    writer.write(") ");    Collection<Relationship> dos=expression.orderedRelationships(Primitive.DO);    if (dos != null) {      String newIndent=indent + "\t";      writer.write(" {\r\n");      writer.write(newIndent);      writer.write("\t");      writer.write("\t");      printArguments(expression,Primitive.DO,0,null,false,true,true,false,writer,newIndent,variables,functions,elements,true,network);      writer.write(newIndent);      writer.write("\t");      writer.write("}");    } else {      writer.write(" {}");    }  } else   if (operator.is(Primitive.IF)) {    writer.write(" ");    printArguments(expression,Primitive.ARGUMENT,0,null,false,false,false,true,writer,indent,variables,functions,elements,false,network);    Collection<Relationship> thens=expression.orderedRelationships(Primitive.THEN);    Collection<Relationship> elses=expression.orderedRelationships(Primitive.ELSE);    Collection<Relationship> elseifs=expression.orderedRelationships(Primitive.ELSEIF);    if (thens == null && elseifs == null && elses == null) {      writer.write(" {}\r\n");    } else {      String newIndent=indent + "\t";      writer.write(" {\r\n");      if (thens != null) {        writer.write(newIndent);        writer.write("\t");        writer.write("\t");        printArguments(expression,Primitive.THEN,0,null,false,true,true,false,writer,newIndent,variables,functions,elements,true,network);        if (elses == null && elseifs == null) {          writer.write(newIndent);          writer.write("\t");          writer.write("}");        }      }      if (elseifs != null) {        writer.write(newIndent);        writer.write("\t");        writer.write("} else ");        for (        Relationship elseif : elseifs) {          printOperator(elseif.getTarget(),writer,indent,functions,variables,elements,network);        }      }      if (elses != null) {        if (elseifs == null) {          writer.write(newIndent);          writer.write("\t");          writer.write("}");        }        writer.write(" else {\r\n");        writer.write(newIndent);        writer.write("\t");        writer.write("\t");        printArguments(expression,Primitive.ELSE,0,null,false,true,true,false,writer,newIndent,variables,functions,elements,true,network);        writer.write(newIndent);        writer.write("\t");        writer.write("}");      }    }  } else {    writer.write(" ");    printArguments(expression,Primitive.ARGUMENT,0,null,false,(operator.is(Primitive.DO)),false,true,writer,indent,variables,functions,elements,false,network);  }}  }
class C{  public Task<VirtualDataCenterRestRep> create(VirtualDataCenterAddParam input){  return postTask(input,PathConstants.VDC_URL);}  }
class C{  public <T>boolean has(ConfigurationKey<T> key){  if (key == null) {    throw new IllegalArgumentException("key must not be null!");  }  return this.configMap.containsKey(key);}  }
class C{  static float readZFloat(DataInput in) throws IOException {  int b=in.readByte() & 0xFF;  if (b == 0xFF) {    return Float.intBitsToFloat(in.readInt());  } else   if ((b & 0x80) != 0) {    return (b & 0x7f) - 1;  } else {    int bits=b << 24 | ((in.readShort() & 0xFFFF) << 8) | (in.readByte() & 0xFF);    return Float.intBitsToFloat(bits);  }}  }
class C{  public boolean isPermitidoVerInformeCotejo(){  return isConErroresCotejo();}  }
class C{  protected final String copyElement(int nodeID,int exptype,SerializationHandler handler) throws SAXException {  final ExtendedType extType=m_extendedTypes[exptype];  String uri=extType.getNamespace();  String name=extType.getLocalName();  if (uri.length() == 0) {    handler.startElement(name);    return name;  } else {    int qnameIndex=m_dataOrQName.elementAt(nodeID);    if (qnameIndex == 0) {      handler.startElement(name);      handler.namespaceAfterStartElement(EMPTY_STR,uri);      return name;    }    if (qnameIndex < 0) {      qnameIndex=-qnameIndex;      qnameIndex=m_data.elementAt(qnameIndex);    }    String qName=m_valuesOrPrefixes.indexToString(qnameIndex);    handler.startElement(qName);    int prefixIndex=qName.indexOf(':');    String prefix;    if (prefixIndex > 0) {      prefix=qName.substring(0,prefixIndex);    } else {      prefix=null;    }    handler.namespaceAfterStartElement(prefix,uri);    return qName;  }}  }
class C{  private Set<Statement> readExpectedGraphQueryResult(String resultFile) throws Exception {  final RDFFormat rdfFormat=Rio.getParserFormatForFileName(resultFile);  if (rdfFormat != null) {    final RDFParser parser=Rio.createParser(rdfFormat);    parser.setDatatypeHandling(DatatypeHandling.IGNORE);    parser.setPreserveBNodeIDs(true);    parser.setValueFactory(ValueFactoryImpl.getInstance());    final Set<Statement> result=new LinkedHashSet<Statement>();    parser.setRDFHandler(new StatementCollector(result));    final InputStream in=TestFederatedQuery.class.getResourceAsStream(TEST_RESOURCE_PATH + resultFile);    try {      parser.parse(in,null);    }  finally {      in.close();    }    return result;  } else {    throw new RuntimeException("Unable to determine file type of results file");  }}  }
class C{  @Override public Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement(" + resultSetType + ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    return new JdbcStatement(this,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public BlackVolatilityTermStructure(final Date referenceDate){  super(referenceDate,new Calendar(),BusinessDayConvention.Following,new DayCounter());}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[propertyName=").append(getPropertyName());  sb.append("; oldValue=").append(getOldValue());  sb.append("; newValue=").append(getNewValue());  sb.append("; source=").append(getSource());  return sb.append("]").toString();}  }
class C{  public static DateTimeFormatter dateHourMinuteSecondFraction(){  if (dhmsf == null) {    dhmsf=new DateTimeFormatterBuilder().append(date()).append(literalTElement()).append(hourMinuteSecondFraction()).toFormatter();  }  return dhmsf;}  }
class C{  protected JButton createLeftOneTouchButton(){  SeaGlassArrowButton b=new SeaGlassArrowButton(SwingConstants.NORTH);  int oneTouchSize=lookupOneTouchSize();  b.setName("SplitPaneDivider.leftOneTouchButton");  b.setMinimumSize(new Dimension(oneTouchSize,oneTouchSize));  b.setCursor(Cursor.getPredefinedCursor(splitPane.getOrientation() == JSplitPane.HORIZONTAL_SPLIT ? Cursor.W_RESIZE_CURSOR : Cursor.N_RESIZE_CURSOR));  b.setFocusPainted(false);  b.setBorderPainted(false);  b.setRequestFocusEnabled(false);  b.setDirection(mapDirection(true));  return b;}  }
class C{  private List<Item> generateConsequentsFrom(Consequent<TK,FV> antecedent,HyperedgeBundle<TK,FV> bundle,int sourceInputId,OutputSpace<TK,FV> outputSpace,boolean checkSourceCoverage){  List<Item> successors=new ArrayList<>(2);  for (  Consequent<TK,FV> successor : bundle.nextSuccessors(antecedent)) {    boolean buildDerivation=outputSpace.allowableContinuation(successor.antecedent.featurizable,successor.rule) && (!checkSourceCoverage || (!successor.antecedent.sourceCoverage.intersects(successor.rule.sourceCoverage)));    Derivation<TK,FV> derivation=buildDerivation ? new Derivation<>(sourceInputId,successor.rule,successor.antecedent.length,successor.antecedent,featurizer,scorer,heuristic,outputSpace) : null;    successors.add(new Item(derivation,successor));  }  return successors;}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  @Override public void startOnInit(){  service().startOnInit(Result.ignore());}  }
class C{  protected VideoDTO extractOneVideoFromCursor(Cursor cursor){  if (videoIdCol == -1) {    videoIdCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media._ID);    videoTitleCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.TITLE);    videoDisplayNameCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DISPLAY_NAME);    videoDescriptionCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DESCRIPTION);    videoBucketIdCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.BUCKET_ID);    videoBucketDisplayNameCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.BUCKET_DISPLAY_NAME);    videoDataCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);    videoMimeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.MIME_TYPE);    videoResolutionCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.RESOLUTION);    videoSizeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.SIZE);    videoDateAddedCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATE_ADDED);    videoDateTakenCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATE_TAKEN);    videoDateModifyCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATE_MODIFIED);    videoLatitudeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.LATITUDE);    videoLongitudeCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.LONGITUDE);    videoAlbumCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.ALBUM);    videoArtistCol=cursor.getColumnIndexOrThrow(MediaStore.Video.Media.ARTIST);  }  VideoDTO video=new VideoDTO();  video.setId(cursor.getLong(videoIdCol));  video.setTitle(cursor.getString(videoTitleCol));  video.setDisplayName(cursor.getString(videoDisplayNameCol));  video.setDescription(cursor.getString(videoDescriptionCol));  video.setBucketId(cursor.getString(videoBucketIdCol));  video.setBucketDisplayName(cursor.getString(videoBucketDisplayNameCol));  video.setUri(cursor.getString(videoDataCol));  video.setMimeType(cursor.getString(videoMimeCol));  video.setSize(cursor.getLong(videoSizeCol));  video.setAddedDate(new Date(cursor.getLong(videoDateAddedCol)));  video.setTakenDate(new Date(cursor.getLong(videoDateTakenCol)));  video.setModifyDate(new Date(cursor.getLong(videoDateModifyCol)));  video.setLatitude(cursor.getDouble(videoLatitudeCol));  video.setLongitude(cursor.getDouble(videoLongitudeCol));  video.setAlbum(cursor.getString(videoAlbumCol));  video.setArtist(cursor.getString(videoArtistCol));  String resolution=cursor.getString(videoResolutionCol);  if (resolution != null) {    try {      String[] res=resolution.split("x");      int width=Integer.parseInt(res[0]);      int height=Integer.parseInt(res[1]);      video.setWidth(width);      video.setHeight(height);    } catch (    Exception e) {      Log.w(TAG,String.format("Failed to parse resolution of video(id=%d, title=%s, displayName=%s)",video.getId(),video.getTitle(),video.getDisplayName()),e);    }  }  return video;}  }
class C{  private void inviteRoom(String contactInformation){  ResolvedContact res=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_CELL);  if (res == null) {    send(R.string.chat_no_match_for,contactInformation);  } else   if (res.isDistinct()) {    try {      XmppMuc.getInstance(sContext).inviteRoom(res.getNumber(),res.getName(),XmppMuc.MODE_SMS);    } catch (    Exception e) {      send(R.string.chat_error,e.getLocalizedMessage());    }  } else {    askForMoreDetails(res.getCandidates());  }}  }
class C{  protected void prepareWriterAndWriteData(List<String> data,String columnId) throws IOException {  ColumnIdentifier columnIdentifier=new ColumnIdentifier(columnId,null,null);  CarbonDictionaryWriter carbonDictionaryWriter=new CarbonDictionaryWriterImpl(carbonStorePath,carbonTableIdentifier,columnIdentifier);  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);  CarbonUtil.checkAndCreateFolder(carbonTablePath.getMetadataDirectoryPath());  List<byte[]> valueList=convertStringListToByteArray(data);  try {    carbonDictionaryWriter.write(valueList);  }  finally {    carbonDictionaryWriter.close();    carbonDictionaryWriter.commit();  }}  }
class C{  @Deprecated public synchronized void pluginClicked(Context context,int position){  try {    Plugin plugin=mPlugins.get(position);    plugin.dispatchClickEvent(context);  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public static Curve25519KeyPair keyGen(byte[] randomBytes){  byte[] privateKey=keyGenPrivate(randomBytes);  byte[] publicKey=keyGenPublic(privateKey);  return new Curve25519KeyPair(publicKey,privateKey);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static <T>T newInstance(Class<T> exp,String clsName) throws GridClientException {  Object obj;  try {    obj=Class.forName(clsName).newInstance();  } catch (  Exception e) {    throw new GridClientException("Failed to create class instance: " + clsName,e);  }  return exp.cast(obj);}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.355 -0500",hash_original_method="0F23F53D1861BCD51C7CF85FD75916D2",hash_generated_method="0F23F53D1861BCD51C7CF85FD75916D2") boolean updateCurrentCarrierInProvider(){  if (mIccRecords != null) {    try {      Uri uri=Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI,"current");      ContentValues map=new ContentValues();      map.put(Telephony.Carriers.NUMERIC,mIccRecords.getOperatorNumeric());      mContext.getContentResolver().insert(uri,map);      return true;    } catch (    SQLException e) {      Log.e(LOG_TAG,"Can't store current operator",e);    }  }  return false;}  }
class C{  public byte[] canonicalize(byte[] inputBytes) throws javax.xml.parsers.ParserConfigurationException, java.io.IOException, org.xml.sax.SAXException, CanonicalizationException {  InputStream bais=new ByteArrayInputStream(inputBytes);  InputSource in=new InputSource(bais);  DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();  dfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,Boolean.TRUE);  dfactory.setNamespaceAware(true);  dfactory.setValidating(true);  DocumentBuilder db=dfactory.newDocumentBuilder();  db.setErrorHandler(new com.sun.org.apache.xml.internal.security.utils.IgnoreAllErrorHandler());  Document document=db.parse(in);  return this.canonicalizeSubtree(document);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.832 -0500",hash_original_method="ED2C86C86B2D9BBF3015D425DB337069",hash_generated_method="896FFE0DBAD8D0605B4998C2784C2FC6") public void run(TestResult result){  result.run(this);}  }
class C{  public void addSinglePathResolver(SinglePathResolver resolver){  int index=0;  if (bases != null) {    index=bases.size();  }  addSinglePathResolver(index,resolver);}  }
class C{  private static void closeOutput(PcapByteOutputStream os){  if (os == null) {    return;  }  try {    os.close();  } catch (  IOException e) {    LOG.error("Failed to close output stream",e);  }}  }
class C{  public void ideDir(Object ideDir){  this.ideDir=Objects.requireNonNull(ideDir);}  }
class C{  public void addAlternateNames(List<AlternateName> alternateNames){  if (alternateNames != null) {    for (    AlternateName alternateName : alternateNames) {      addAlternateName(alternateName);    }  }}  }
class C{  private void assertValidIndex(final int index){  if (index >= length || index < 0) {    throw new IndexOutOfBoundsException("Invalid index: " + index + " (length: "+ length+ ")");  }}  }
class C{  CounterNode lookup(List<String> hierarchyElements){  CounterNode cur=this;  for (  String element : hierarchyElements) {    cur=cur.children.get(element);    if (cur == null) {      break;    }  }  return cur;}  }
class C{  public void demo1(){  System.out.println("\n\n");  DoubleMatrix2D[][] parts1={{null,make(2,2,1),null},{make(4,4,2),null,make(4,3,3)},{null,make(2,2,4),null}};  System.out.println("\n" + compose(parts1));  DoubleMatrix2D[][] parts3={{identity(3),null},{null,identity(3).viewColumnFlip()},{identity(3).viewRowFlip(),null}};  System.out.println("\n" + compose(parts3));  DoubleMatrix2D A=ascending(2,2);  DoubleMatrix2D B=descending(2,2);  DoubleMatrix2D _=null;  DoubleMatrix2D[][] parts4={{A,_,A,_},{_,A,_,B}};  System.out.println("\n" + compose(parts4));}  }
class C{  private void decrementWorkerCount(){  do {  } while (!compareAndDecrementWorkerCount(ctl.get()));}  }
class C{  public Builder fragmentManager(FragmentManager fragmentManager){  mFragmentManager=fragmentManager;  return this;}  }
class C{  @CheckReturnValue public ThreadFactory build(){  return build(this);}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"stosw");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a stosw instruction (invalid number of operand)");  }  new StosGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.WORD,instructions);}  }
class C{  public MutableDateTime roundHalfEven(){  iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));  return iInstant;}  }
class C{  public boolean containsKey(int key){  return indexOfKey(key) >= 0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @MediumTest public void testFocusedRectAndFocusHintWorkWithinListItemHorizontal(){  sendKeys(KeyEvent.KEYCODE_DPAD_DOWN);  assertEquals(1,mLeftIsv.getSelectedRow());  sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);  assertTrue(mLeftListView.hasFocus());  assertTrue(mLeftMiddleIsv.isFocused());  assertEquals("mLeftMiddleIsv.getSelectedRow()",1,mLeftMiddleIsv.getSelectedRow());  sendKeys(KeyEvent.KEYCODE_DPAD_LEFT);  assertTrue(mLeftIsv.isFocused());  assertEquals("mLeftIsv.getSelectedRow()",1,mLeftIsv.getSelectedRow());}  }
class C{  public BufferedImage JPEG2000ToRGBImage(byte[] data,final int w,final int h,final int pX,final int pY,final int d) throws PdfException {  BufferedImage image;  try {    image=JDeliHelper.JPEG2000ToRGBImage(data);  } catch (  Exception ex) {    throw new PdfException(ex.getMessage());  }  if (image != null) {    IndexedColorMap=null;    byte[] index=getIndexedMap();    if (index != null) {      if (value != ColorSpaces.DeviceRGB) {        index=convertIndexToRGB(index);        final int count=index.length;        for (byte i=0; i < count; i++) {          index[i]=(byte)(index[i] ^ 255);        }      }      data=((DataBufferByte)image.getRaster().getDataBuffer()).getData();      image=ColorSpaceConvertor.convertIndexedToFlat(d,w,h,data,index,false,false);    }    image=cleanupImage(image,pX,pY);    if (image.getType() == BufferedImage.TYPE_BYTE_INDEXED) {      final BufferedImage oldImage=image;      final int newW=image.getWidth();      final int newH=image.getHeight();      image=new BufferedImage(newW,newH,BufferedImage.TYPE_INT_RGB);      final Graphics2D g2=(Graphics2D)image.getGraphics();      g2.setPaint(Color.WHITE);      g2.fillRect(0,0,newW,newH);      g2.drawImage(oldImage,0,0,null);    }    ColorSpace cSpace=image.getColorModel().getColorSpace();    int csType=cSpace.getType();    int trnsType=image.getColorModel().getTransferType();    if (image.getType() == BufferedImage.TYPE_CUSTOM && (csType == ColorSpace.CS_sRGB || csType == ColorSpace.TYPE_RGB) && trnsType == DataBuffer.TYPE_BYTE) {      BufferedImage temp=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_RGB);      int[] tempData=((DataBufferInt)temp.getRaster().getDataBuffer()).getData();      byte[] imgData=((DataBufferByte)image.getRaster().getDataBuffer()).getData();      int p=0;      for (int i=0; i < tempData.length; i++) {        int rgb=((imgData[p] & 0xFF) << 16) | ((imgData[p + 1] & 0xFF) << 8) | ((imgData[p + 2] & 0xFF));        tempData[i]=rgb;        p+=3;      }      image=temp;    } else {      image=ColorSpaceConvertor.convertToRGB(image);    }  }  return image;}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.SHIFT_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ColumnArrangement)) {    return false;  }  ColumnArrangement that=(ColumnArrangement)obj;  if (this.horizontalAlignment != that.horizontalAlignment) {    return false;  }  if (this.verticalAlignment != that.verticalAlignment) {    return false;  }  if (this.horizontalGap != that.horizontalGap) {    return false;  }  if (this.verticalGap != that.verticalGap) {    return false;  }  return true;}  }
class C{  private FileTime(long value,TimeUnit unit,Instant instant){  this.value=value;  this.unit=unit;  this.instant=instant;}  }
class C{  public static String findAdempiereHome(){  String ch=getAdempiereHome();  if (ch != null)   return ch;  File[] roots=File.listRoots();  for (int i=0; i < roots.length; i++) {    if (roots[i].getAbsolutePath().startsWith("A:"))     continue;    File[] subs=roots[i].listFiles();    if (subs == null)     continue;    for (int j=0; j < subs.length; j++) {      if (!subs[j].isDirectory())       continue;      String fileName=subs[j].getAbsolutePath();      if (fileName.indexOf("Adempiere") != -1) {        String libDir=fileName + File.separator + "lib";        File lib=new File(libDir);        if (lib.exists() && lib.isDirectory())         return fileName;      }    }  }  return ch;}  }
class C{  public void testCertPathBuilder11() throws NoSuchAlgorithmException, NoSuchProviderException, CertPathBuilderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathBuilder[] certPB=createCPBs();  assertNotNull("CertPathBuilder objects were not created",certPB);  for (int i=0; i < certPB.length; i++) {    try {      certPB[i].build(null);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  public static void testReturnAny2Void(){  for (  Wrapper from : Wrapper.values()) {    testConversion(TestConversionMode.RETURN_VALUE,from.wrapperType(),void.class,RANDOM_VALUES.get(from),null,false,null);    testConversion(TestConversionMode.RETURN_VALUE,from.primitiveType(),void.class,RANDOM_VALUES.get(from),null,false,null);  }}  }
class C{  public void addListener(final ProjectorListener projectorListener){  if (listeners == null) {    listeners=new ArrayList<ProjectorListener>();  }  listeners.add(projectorListener);}  }
class C{  private String readBoundariesToString(BreakIterator bi,String text){  StringBuilder markers=new StringBuilder();  markers.setLength(text.length() + 1);  for (int k=0; k < markers.length(); k++) {    markers.setCharAt(k,' ');  }  bi.setText(text);  for (int boundary=bi.current(); boundary != BreakIterator.DONE; boundary=bi.next()) {    markers.setCharAt(boundary,'^');  }  return markers.toString();}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mCameraSource != null) {    mCameraSource.release();  }}  }
class C{  public ProvisionNamespaceTransaction(final TimeInstant timeStamp,final Account sender,final NamespaceIdPart newPart,final NamespaceId parent){  this(timeStamp,sender,MosaicConstants.NAMESPACE_OWNER_NEM,null == parent ? Amount.fromNem(50_000) : Amount.fromNem(5_000),newPart,parent);}  }
class C{  protected void sizeChanged(int w,int h){}  }
class C{  public DbException addSQL(String sql){  SQLException e=getSQLException();  if (e instanceof JdbcSQLException) {    JdbcSQLException j=(JdbcSQLException)e;    if (j.getSQL() == null) {      j.setSQL(sql);    }    return this;  }  e=new JdbcSQLException(e.getMessage(),sql,e.getSQLState(),e.getErrorCode(),e,null);  return new DbException(e);}  }
class C{  protected boolean limitRate(){  final long periodInMs=period * 1000;  final long timeSinceLast=System.currentTimeMillis() - lastRunTime;  if (timeSinceLast > periodInMs) {    lastRunTime=System.currentTimeMillis();    return true;  }  try {    Thread.sleep(Math.max(0,periodInMs - timeSinceLast));    lastRunTime=System.currentTimeMillis();    return true;  } catch (  final InterruptedException e) {    getMonitor().warn("Interrupted, stopping the scheduler");    return false;  }}  }
class C{  public static boolean playerExists(String name){  return getUserByName(name) != null;}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  super(false,httpPort,httpsPort);}  }
class C{  public static Coord orthogonalProjectionOnLineSegment(final Coord lineFrom,final Coord lineTo,final Coord point){  if (!lineFrom.hasZ() && !lineTo.hasZ() && !point.hasZ()) {    double lineDX=lineTo.getX() - lineFrom.getX();    double lineDY=lineTo.getY() - lineFrom.getY();    if ((lineDX == 0.0) && (lineDY == 0.0)) {      return lineFrom;    }    double u=((point.getX() - lineFrom.getX()) * lineDX + (point.getY() - lineFrom.getY()) * lineDY) / (lineDX * lineDX + lineDY * lineDY);    if (u <= 0) {      return lineFrom;    }    if (u >= 1) {      return lineTo;    }    return new Coord(lineFrom.getX() + u * lineDX,lineFrom.getY() + u * lineDY);  } else   if (lineFrom.hasZ() && lineTo.hasZ() && point.hasZ()) {    Coord direction=minus(lineTo,lineFrom);    double t0=dotProduct(direction,minus(point,lineFrom)) / dotProduct(direction,direction);    Coord q=plus(lineFrom,scalarMult(t0,direction));    return q;  } else {    throw new RuntimeException("All given coordinates must either be 2D, or 3D. A mix is not allowed.");  }}  }
class C{  public boolean isEmpty(){  return this.expressions.isEmpty();}  }
class C{  public boolean isValidPotentialQuorumMembersSet(boolean verbose){  if (configuredDBMembers.size() == 0) {    if (verbose) {      logDecisionStep(verbose,"INVALID POTENTIAL QUORUM MEMBERS SET: NO CONFIGURED MEMBERS FOUND");      logDecisionStep(verbose,"(ENSURE THAT dataservices.properties FILE CONTAINS AT LEAST MEMBER " + name + ")");    }    return false;  } else   if (viewDBMembers.size() == 0) {    if (verbose) {      logDecisionStep(verbose,"INVALID POTENTIAL QUORUM MEMBERS SET: GROUP COMMUNICATION VIEW CONTAINS NO MEMBERS");      logDecisionStep(verbose,"(GROUP COMMUNICATIONS MAY BE MISCONFIGURED OR BLOCKED BY A FIREWALL)");    }    return false;  } else   if (potentialQuorumMembersSet.get(name) == null) {    if (verbose) {      logDecisionStep(verbose,"INVALID POTENTIAL QUORUM MEMBERS SET: THIS MEMBER " + name + " IS NOT LISTED");      logDecisionStep(verbose,"(GROUP COMMUNICATIONS MAY BE MISCONFIGURED OR BLOCKED BY A FIREWALL; MEMBER NAME MAY BE MISSING FROM dataservices.properties)");    }    return false;  } else   if (!potentialQuorumMembersSet.get(name).isInView()) {    if (verbose) {      logDecisionStep(verbose,"INVALID POTENTIAL QUORUM MEMBERS SET: THIS MEMBER " + name + " IS NOT LISTED IN THE GROUP COMMUNICATION VIEW");      logDecisionStep(verbose,"(GROUP COMMUNICATIONS MAY BE MISCONFIGURED OR BLOCKED BY A FIREWALL)");    }    return false;  } else {    return true;  }}  }
class C{  public boolean strictBeforeVersion(int major,int minor) throws SQLException {  DatabaseMetaData md=sharedConnection.getMetaData();  int dbMajor=md.getDatabaseMajorVersion();  int dbMinor=md.getDatabaseMinorVersion();  return (dbMajor < major || (dbMajor == major && dbMinor < minor));}  }
class C{  @Override public void run(){  try {    returnValue=evaluateExpression(expressionLine);    if (myListener != null) {      myListener.notifyOfReturn(returnValue);      myListener.notifyOfThreadComplete(this);    }  } catch (  NotSupportedException e) {  }}  }
class C{  public static String normalize(String value){  if (value == null)   return value;  value=value.trim();  if (value.indexOf("  ") == -1)   return value;  boolean space=false;  int len=value.length();  StringBuffer b=new StringBuffer(len);  for (int i=0; i < len; i++) {    char v=value.charAt(i);    if (v == ' ') {      if (!space)       b.append(v);      space=true;    } else {      b.append(v);      space=false;    }  }  return b.toString();}  }
class C{  public final TextBuilder append(CharSequence csq,int start,int end){  if (csq == null)   return append("null");  if ((start < 0) || (end < 0) || (start > end)|| (end > csq.length()))   throw new IndexOutOfBoundsException();  for (int i=start; i < end; ) {    append(csq.charAt(i++));  }  return this;}  }
class C{  void addNamedParameter(String parameterName,int startIndex,int endIndex){  this.parameterNames.add(parameterName);  this.parameterIndexes.add(new int[]{startIndex,endIndex});}  }
class C{  public void testDigestAuth() throws Exception {  startServer(47500);  fetchPage("/digest.jsp",200);}  }
class C{  public boolean dot_at_end(){  return _dot_pos >= _the_production.rhs_length();}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public void reset(){  circuitCheckEnabled=false;  statisticsUpdateEnabled=false;  errorThresholdPercentage=DEFAULT_ERROR_THRESHOLD;  entriesMaxAgeMS=DEFAULT_ENTRY_MAX_AGE;  minQueueSampleCount=DEFAULT_MIN_SAMPLE_COUNT;  maxQueueSampleCount=DEFAULT_MAX_SAMPLE_COUNT;  openToHalfOpenTaskEnabled=false;  openToHalfOpenTaskInterval=DEFAULT_TO_HALFOPEN_INTERVAL;  unlockQueuesTaskEnabled=false;  unlockQueuesTaskInterval=DEFAULT_UNLOCK_QUEUES_INTERVAL;  unlockSampleQueuesTaskEnabled=false;  unlockSampleQueuesTaskInterval=DEFAULT_UNLOCK_SAMPLE_QUEUES_INTERVAL;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  private synchronized void endProcess(final boolean error,final boolean finished){  if (error) {    isError=true;  } else   if (finished) {    isProcessFinished=true;  }}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  public String addStepsForCreateMirrors(Workflow workflow,String waitFor,List<VolumeDescriptor> volumes,String taskId) throws ControllerException {  try {    List<VolumeDescriptor> vplexLocalMirrors=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.VPLEX_LOCAL_MIRROR},new VolumeDescriptor.Type[]{});    if (vplexLocalMirrors.isEmpty()) {      return waitFor;    }    Map<URI,StorageSystem> arrayMap=buildArrayMap(volumes,Type.BLOCK_DATA);    Map<URI,Volume> volumeMap=buildVolumeMap(volumes,Type.BLOCK_DATA);    Volume firstVolume=volumeMap.values().iterator().next();    URI projectURI=firstVolume.getProject().getURI();    URI tenantURI=firstVolume.getTenant().getURI();    Map<URI,List<VolumeDescriptor>> vplexDescMap=VolumeDescriptor.getDeviceMap(vplexLocalMirrors);    String lastStep=VPLEX_STEP;    for (    URI vplexURI : vplexDescMap.keySet()) {      StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);      try {        createWorkflowStepsForBlockVolumeExport(workflow,vplexSystem,arrayMap,volumeMap,projectURI,tenantURI,waitFor);      } catch (      Exception ex) {        _log.error("Could not create volumes for vplex: " + vplexURI,ex);        TaskCompleter completer=new VPlexTaskCompleter(Volume.class,vplexURI,taskId,null);        ServiceError serviceError=VPlexApiException.errors.jobFailed(ex);        completer.error(_dbClient,serviceError);        throw ex;      }      List<URI> vplexMirrorURIs=VolumeDescriptor.getVolumeURIs(vplexDescMap.get(vplexURI));      String mirrorStep=workflow.createStepId();      lastStep=workflow.createStep(VPLEX_STEP,String.format("VPlex %s creating mirrors:%n%s",vplexSystem.getIpAddress(),BlockDeviceController.getVolumesMsg(_dbClient,vplexMirrorURIs)),EXPORT_STEP,vplexURI,vplexSystem.getSystemType(),this.getClass(),createMirrorsMethod(vplexURI,vplexMirrorURIs,taskId),rollbackCreateMirrorsMethod(vplexURI,vplexMirrorURIs,mirrorStep),mirrorStep);    }    return lastStep;  } catch (  Exception ex) {    throw VPlexApiException.exceptions.addStepsForCreateMirrors(ex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - dpToPx(4,getResources())) ? (float)getWidth() / 2 - dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  public void search(IWorkspace workspace,ISearchPattern searchPattern,IJavaSearchScope scope,IJavaSearchResultCollector resultCollector) throws JavaModelException {  throw new UnsupportedOperationException();}  }
class C{  protected void assertZeroUlps(double d1,double d2){  long ulps=getUlps(d1,d2);  if (ulps != 0L) {    fail("Expecting zero ulps, but found: " + ulps + "; f1="+ d1+ ", f2="+ d2);  }}  }
class C{  static Object createObjectArray(Class<?> cls,int length) throws OutOfMemoryError, NegativeArraySizeException {  return VMCommonLibrarySupport.createArray(cls,length);}  }
class C{  private static void removeFakeStatusBarViewIfExist(Activity activity){  Window window=activity.getWindow();  ViewGroup mDecorView=(ViewGroup)window.getDecorView();  View fakeView=mDecorView.findViewWithTag(TAG_FAKE_STATUS_BAR_VIEW);  if (fakeView != null) {    mDecorView.removeView(fakeView);  }}  }
class C{  protected void sendMembershipList(LocalGossipMember me,List<LocalGossipMember> memberList){  GossipService.LOGGER.debug("Send sendMembershipList() is called.");  me.setHeartbeat(System.currentTimeMillis());  LocalGossipMember member=selectPartner(memberList);  if (member == null) {    return;  }  try (DatagramSocket socket=new DatagramSocket()){    socket.setSoTimeout(gossipManager.getSettings().getGossipInterval());    InetAddress dest=InetAddress.getByName(member.getHost());    ActiveGossipMessage message=new ActiveGossipMessage();    message.getMembers().add(convert(me));    for (    LocalGossipMember other : memberList) {      message.getMembers().add(convert(other));    }    byte[] json_bytes=om.writeValueAsString(message).getBytes();    int packet_length=json_bytes.length;    if (packet_length < GossipManager.MAX_PACKET_SIZE) {      byte[] buf=createBuffer(packet_length,json_bytes);      DatagramPacket datagramPacket=new DatagramPacket(buf,buf.length,dest,member.getPort());      socket.send(datagramPacket);    } else {      GossipService.LOGGER.error("The length of the to be send message is too large (" + packet_length + " > "+ GossipManager.MAX_PACKET_SIZE+ ").");    }  } catch (  IOException e1) {    GossipService.LOGGER.warn(e1);  }}  }
class C{  protected void importZipResult(final BuildTaskDescriptor descriptor,final BuildFinishedCallback buildFinishedCallback){  Link downloadLink=null;  List<Link> links=descriptor.getLinks();  for (  Link link : links) {    if (link.getRel().equalsIgnoreCase("download result")) {      downloadLink=link;    }  }  if (downloadLink != null) {    ImportProject importProject=dtoFactory.createDto(ImportProject.class).withSource(dtoFactory.createDto(Source.class).withProject(dtoFactory.createDto(ImportSourceDescriptor.class).withLocation(downloadLink.getHref()).withType("zip")));    projectServiceClient.importProject(appContext.getCurrentProject().getRootProject().getPath(),true,importProject,new ImportResponseAsyncRequestCallback(buildFinishedCallback,descriptor));  } else {    if (buildFinishedCallback != null) {      buildFinishedCallback.onFinished(descriptor.getStatus());    }  }}  }
class C{  public void indexIterator(Session session,FDBStoreData storeData,FDBScanTransactionOptions transactionOptions){  indexIterator(session,storeData,false,false,true,false,transactionOptions);}  }
class C{  public ConditionalTransferEntropyCalculatorViaCondMutualInfo(Class<ConditionalMutualInfoCalculatorMultiVariate> condMiCalcClass) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  ConditionalMutualInfoCalculatorMultiVariate condMiCalc=condMiCalcClass.newInstance();  construct(condMiCalc);}  }
class C{  private void assignToPass(DetectorFactory factory,AnalysisPass pass){  pass.addToPass(factory);  assignedToPassSet.add(factory);}  }
class C{  public static int convertLatmToY(int latm){  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;  if (v < 0)   return -1;  return (int)v;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double gridRes;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  outputType=args[2].toLowerCase();  logTransform=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 2 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 3 of 3:",0);    oldProgress=-1;    if (outputType.contains("specific") || outputType.contains("sca")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (outputType.contains("total")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    if (logTransform) {      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean equalsIdentifiers(String a,String b){  if (a == b || a.equals(b)) {    return true;  }  return !dbSettings.databaseToUpper && a.equalsIgnoreCase(b);}  }
class C{  private Encoding fromExternalToWrapperEncoding(org.carbondata.format.Encoding encoderThrift){switch (encoderThrift) {case DICTIONARY:    return Encoding.DICTIONARY;case DELTA:  return Encoding.DELTA;case RLE:return Encoding.RLE;case INVERTED_INDEX:return Encoding.INVERTED_INDEX;case BIT_PACKED:return Encoding.BIT_PACKED;case DIRECT_DICTIONARY:return Encoding.DIRECT_DICTIONARY;default :return Encoding.DICTIONARY;}}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.hello_world,container,false);  View tv=v.findViewById(R.id.text);  ((TextView)tv).setText("Fragment #" + mNum);  tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));  return v;}  }
class C{  public void position(final long position) throws IOException {  this.position=Math.min(position,length());}  }
class C{  private void hideLoadingProgress(){  if (progressWheel != null) {    progressWheel.setVisibility(View.GONE);  }}  }
class C{  private static void processArgs(String[] args){  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (arg.equals("-spec")) {      specfile=args[++i];    } else     if (arg.equals("-old")) {      oldDatafile=args[++i];    } else     if (arg.equals("-o")) {      outputDir=args[++i];    } else {      System.err.println("Usage: java CharacterCategory [-spec specfile]");      System.exit(1);    }  }}  }
class C{  public javax2.sip.address.Address createAddress(){  return new AddressImpl();}  }
class C{  public void beginRegisterUpdate(){  for (  final RegisterInformationInternal register : m_registerModel.getRegisterInformation()) {    register.setModified(false);  }}  }
