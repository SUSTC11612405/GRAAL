class C{  public StateMachineTestPlanStepBuilder expectVariable(Object key){  this.expectVariableKeys.add(key);  return this;}  }
class C{  protected MetricUnionTransform(ValueReducer valueUnionReducer){  this.defaultScope=TransformFactory.Function.UNION.name();  this.defaultMetricName=TransformFactory.DEFAULT_METRIC_NAME;  this.valueUnionReducer=valueUnionReducer;}  }
class C{  private static int blend_multiply(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=(ar * br) >> 8;  int cg=(ag * bg) >> 8;  int cb=(ab * bb) >> 8;  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!newRecord) {    int id=getAD_EntityType_ID();    boolean systemMaintained=(id == 10 || id == 20);    if (systemMaintained) {      log.saveError("Error","You cannot modify a System maintained entity");      return false;    }    systemMaintained=is_ValueChanged("EntityType");    if (systemMaintained) {      log.saveError("Error","You cannot modify EntityType");      return false;    }    systemMaintained=isSystemMaintained() && (is_ValueChanged("Name") || is_ValueChanged("Description") || is_ValueChanged("Help")|| is_ValueChanged("IsActive"));    if (systemMaintained) {      log.saveError("Error","You cannot modify Name,Description,Help");      return false;    }  } else {  }  s_entityTypes=null;  return true;}  }
class C{  public static double L_ZeroOne(int Y[][],int Ypred[][]){  int allMissings=0;  int N=Y.length;  double loss=0.0;  for (int i=0; i < N; i++) {    if (allMissing(Y[i])) {      allMissings++;      continue;    }    double curLoss=L_ZeroOne(Y[i],Ypred[i]);    if (Double.isNaN(curLoss)) {      allMissings++;      continue;    }    loss+=curLoss;  }  return loss / (double)(N - allMissings);}  }
class C{  private void printStatEof() throws AdeException {  Format formatter;  formatter=new SimpleDateFormat("E, dd MMM yyyy HH:mm:ss Z");  String message;  final int m_statCounterRawLines=getLineNumber();  final long endTime=System.nanoTime();  final long elapsedTime=endTime - m_parserStartTime;  final double seconds=Math.ceil(elapsedTime / 1.0E09);  final AdeExtRequestType requestType=m_adeExtProperties.getRequestType();  message=String.format(PARSED_DATA_STATS_MSG,m_statCounterRawLines,m_nonWrapperMessageCount,m_suppressedNonWrapperMessageCount,m_wrapperMessageCount,m_errorLineCount,m_componentMissingLineCount,m_unexpectedSourceLineCount,seconds);  logger.info(message);  final String StartDate=formatter.format(m_parserStartDate);  String sourceId;  if (m_prevMessageInstance != null) {    sourceId=m_prevMessageInstance.getSourceId();  } else   if (m_adeExtProperties.isSourceOptionProvided()) {    final Collection<ISource> sources=m_adeExtProperties.getSources();    sourceId=(sources.iterator().next()).getSourceId();  } else {    sourceId="Unknown";  }  final double goodPercent=((double)m_nonWrapperMessageCount) / ((double)m_statCounterRawLines);switch (requestType) {case UPLOAD:{      try {        if (goodPercent > goodPercentThreshold) {          message=String.format(GOOD_UPLOAD_MSG,StartDate,m_statCounterRawLines,sourceId,m_nonWrapperMessageCount,DataType.SYSLOG.name());        } else {          message=String.format(BAD_UPLOAD_MSG,StartDate,m_statCounterRawLines,sourceId,m_nonWrapperMessageCount,DataType.SYSLOG.name());        }      } catch (      Throwable t) {        logger.error("An error occured - Internal Error: Building Notification ",t);      }      break;    }case ANALYZE:  try {    if (goodPercent > goodPercentThreshold) {      message=String.format(GOOD_ANALYZE_MSG,StartDate,m_statCounterRawLines,DataType.SYSLOG.name(),sourceId,m_nonWrapperMessageCount);    } else {      if (goodPercent == 0) {        message=String.format(NO_MSGS_PARSED_MSG,StartDate,m_statCounterRawLines,DataType.SYSLOG.name(),sourceId);      } else {        message=String.format(BAD_ANALYZE_MSG,StartDate,m_statCounterRawLines,DataType.SYSLOG.name(),sourceId,m_nonWrapperMessageCount);      }    }  } catch (  Throwable t) {    logger.error("An error occured - Internal Error: Building Notification ",t);  }break;}logger.info(message);}  }
class C{  public ActivateSessionResponse clone(){  ActivateSessionResponse result=new ActivateSessionResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.ServerNonce=ServerNonce;  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public SQLNonTransientException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  private void resetToken(){  getDeltaInfo().edit().putString(mItemId,null).commit();  Toast.makeText(getActivity(),getString(R.string.cleared_saved_delta_token,mItemName),Toast.LENGTH_LONG).show();  refresh();}  }
class C{  @LargeTest public void testTransitionSliding() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String videoItemFilename2=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_128kbps_1_35.3gp";  final String imageItemFilename1=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String videoItemFilename3=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final String videoItemFilename4=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final String videoItemFilename5=INPUT_FILE_PATH + "H263_profile0_176x144_10fps_96kbps_0_25.3gp";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFilename2,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem2.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem2);  final TransitionSliding transition1And2=mVideoEditorHelper.createTSliding("transition1And2",mediaVideoItem1,mediaVideoItem2,3000,Transition.BEHAVIOR_SPEED_UP,TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN);  mVideoEditor.addTransition(transition1And2);  assertTrue("Transition ID",transition1And2.getId().equals("transition1And2"));  assertEquals("Transtion After Media item",mediaVideoItem1,transition1And2.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem2,transition1And2.getBeforeMediaItem());  assertEquals("Transtion Duration",3000,transition1And2.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_UP,transition1And2.getBehavior());  assertEquals("Transition Sliding",TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN,transition1And2.getDirection());  final MediaImageItem mediaImageItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",imageItemFilename1,15000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem3);  final TransitionSliding transition2And3=mVideoEditorHelper.createTSliding("transition2And3",mediaVideoItem2,mediaImageItem3,1000,Transition.BEHAVIOR_SPEED_DOWN,TransitionSliding.DIRECTION_LEFT_OUT_RIGHT_IN);  mVideoEditor.addTransition(transition2And3);  assertTrue("Transition ID",transition2And3.getId().equals("transition2And3"));  assertEquals("Transtion After Media item",mediaVideoItem2,transition2And3.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaImageItem3,transition2And3.getBeforeMediaItem());  assertEquals("Transtion Duration",1000,transition2And3.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_DOWN,transition2And3.getBehavior());  assertEquals("Transition Sliding",TransitionSliding.DIRECTION_LEFT_OUT_RIGHT_IN,transition2And3.getDirection());  final MediaVideoItem mediaVideoItem4=mVideoEditorHelper.createMediaItem(mVideoEditor,"m4",videoItemFilename3,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem4.setExtractBoundaries(0,18000);  mVideoEditor.addMediaItem(mediaVideoItem4);  final TransitionSliding transition3And4=mVideoEditorHelper.createTSliding("transition3And4",mediaImageItem3,mediaVideoItem4,5000,Transition.BEHAVIOR_LINEAR,TransitionSliding.DIRECTION_TOP_OUT_BOTTOM_IN);  mVideoEditor.addTransition(transition3And4);  assertTrue("Transition ID",transition3And4.getId().equals("transition3And4"));  assertEquals("Transtion After Media item",mediaImageItem3,transition3And4.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem4,transition3And4.getBeforeMediaItem());  assertEquals("Transtion Duration",5000,transition3And4.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_LINEAR,transition3And4.getBehavior());  assertEquals("Transition Sliding",TransitionSliding.DIRECTION_TOP_OUT_BOTTOM_IN,transition3And4.getDirection());  final MediaVideoItem mediaVideoItem5=mVideoEditorHelper.createMediaItem(mVideoEditor,"m5",videoItemFilename4,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem5);  final TransitionSliding transition4And5=mVideoEditorHelper.createTSliding("transition4And5",mediaVideoItem4,mediaVideoItem5,8000,Transition.BEHAVIOR_MIDDLE_FAST,TransitionSliding.DIRECTION_BOTTOM_OUT_TOP_IN);  mVideoEditor.addTransition(transition4And5);  assertTrue("Transition ID",transition4And5.getId().equals("transition4And5"));  assertEquals("Transtion After Media item",mediaVideoItem4,transition4And5.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem5,transition4And5.getBeforeMediaItem());  assertEquals("Transtion Duration",8000,transition4And5.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_FAST,transition4And5.getBehavior());  assertEquals("Transition Sliding",TransitionSliding.DIRECTION_BOTTOM_OUT_TOP_IN,transition4And5.getDirection());  final MediaVideoItem mediaVideoItem6=mVideoEditorHelper.createMediaItem(mVideoEditor,"m6",videoItemFilename5,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem6.setExtractBoundaries(0,20000);  mVideoEditor.addMediaItem(mediaVideoItem6);  final TransitionSliding transition5And6=mVideoEditorHelper.createTSliding("transition5And6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_SLOW,TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN);  mVideoEditor.addTransition(transition5And6);  assertTrue("Transition ID",transition5And6.getId().equals("transition5And6"));  assertEquals("Transtion After Media item",mediaVideoItem5,transition5And6.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem6,transition5And6.getBeforeMediaItem());  assertEquals("Transtion Duration",2000,transition5And6.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_SLOW,transition5And6.getBehavior());  assertEquals("Transition Sliding",TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN,transition5And6.getDirection());  flagForException=false;  try {    mVideoEditorHelper.createTSliding("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_SLOW,TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN - 1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition Sliding with Invalid Direction",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTSliding("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_FAST + 1,TransitionSliding.DIRECTION_BOTTOM_OUT_TOP_IN + 1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition Sliding with Invalid behavior",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTSliding("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_SPEED_UP - 1,TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition Sliding with Invalid behavior",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTSliding("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_FAST + 1,TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition Sliding with Invalid behavior",flagForException);}  }
class C{  public void testProcessMsg4(){  byte[] originalMessageBody=mMessageBody;  mMessageBody=new byte[]{(byte)0xee,(byte)0xff,(byte)0xee,(byte)0xff,(byte)0xee,(byte)0xff,(byte)0xee,(byte)0xff,(byte)0xee,(byte)0xff,(byte)0xee,(byte)0xff};  byte[] pdu=createPDU(1);  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);  int pduType=6;  int tranId=0;  String originalPackageName=mPackageName;  String originalClassName=mClassName;  try {    IWapPushManager iwapman=getInterface();    IDataVerify dataverify=getVerifyInterface();    dataverify.resetData();    mClassName="com.android.smspush.unitTests.ReceiverActivity";    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);    iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId));    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    assertTrue(dataverify.verifyData(mMessageBody));    dataverify.resetData();    mClassName="com.android.smspush.unitTests.ReceiverService";    mMessageBody=new byte[]{(byte)0xaa,(byte)0xbb,(byte)0x11,(byte)0x22,(byte)0xaa,(byte)0xbb,(byte)0x11,(byte)0x22,(byte)0xaa,(byte)0xbb,(byte)0x11,(byte)0x22,(byte)0xaa,(byte)0xbb,(byte)0x11,(byte)0x22,(byte)0xaa,(byte)0xbb,(byte)0x11,(byte)0x22,(byte)0xaa,(byte)0xbb,(byte)0x11,(byte)0x22};    pdu=createPDU(1);    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,false,false);    iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId));    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    assertTrue(dataverify.verifyData(mMessageBody));  } catch (  RemoteException e) {    assertTrue(false);  }  mPackageName=originalPackageName;  mClassName=originalClassName;  mMessageBody=originalMessageBody;}  }
class C{  private void checkDirHasChildren(String entidad) throws Exception {  int count;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    count=DbSelectFns.selectCount(dbConn,table.getNodeTableName(),table.getLoadAllChildrenDirQual(_id));    if (count > 0) {      AdminException.throwException(DirErrorCodes.EC_DIR_HAS_CHILDREN);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public int write(OutputStreamWithBuffer os,char[] cbuf,int off,int len) throws IOException {  for (int i=0; i < len; i++) {    char ch=cbuf[off + i];    if (ch < 0x80)     os.write(ch); else {      os.write('\\');      os.write('u');      int b=(ch >> 12) & 0xf;      os.write(b < 10 ? b + '0' : b + 'a' - 10);      b=(ch >> 8) & 0xf;      os.write(b < 10 ? b + '0' : b + 'a' - 10);      b=(ch >> 4) & 0xf;      os.write(b < 10 ? b + '0' : b + 'a' - 10);      b=ch & 0xf;      os.write(b < 10 ? b + '0' : b + 'a' - 10);    }  }  return len;}  }
class C{  public TeXFormula centerOnAxis(){  root=new VCenteredAtom(root);  return this;}  }
class C{  private double[][] harvestData(){  int columnNumber=numResNodes;  if (directInOutWeights) {    columnNumber+=numInputs;  }  if (recurrentOutWeights) {    columnNumber+=numOutputs;  }  double[][] returnMatrix=new double[inputData.length][columnNumber];  boolean harvest=false;  for (int t=0; t < 2; t++) {    for (int row=0; row < inputData.length; row++) {      int col=0;      for (      Neuron neuron : getInputLayer().getNeuronList()) {        double clampValue=inputData[row][col];        neuron.setActivation(clampValue);        if (directInOutWeights && harvest) {          returnMatrix[row][col]=neuron.getActivation();          col++;        }      }      if (backWeights) {        int count=0;        double clampValue=0.5;        for (        Neuron neuron : getOutputLayer().getNeuronList()) {          if (row > 0) {            clampValue=targetData[row - 1][count];          }          neuron.setActivation(clampValue);          count++;        }      }      for (      Neuron n : getReservoirLayer().getNeuronList()) {        n.update();      }      for (      Neuron n : getReservoirLayer().getNeuronList()) {        double val=n.getBuffer();        if (noise) {          n.setActivation(val + reservoirNoise());        } else {          n.setActivation(val);        }        if (harvest) {          returnMatrix[row][col]=n.getActivation();        }        col++;      }      if (recurrentOutWeights && harvest) {        for (int i=0; i < targetData[0].length; i++) {          returnMatrix[row][col]=targetData[row][i];          col++;        }      }    }    harvest=true;  }  return returnMatrix;}  }
class C{  public static void main(String[] args){  try {    EvoSuite evosuite=new EvoSuite();    evosuite.parseCommandLine(args);  } catch (  Throwable t) {    logger.error("Fatal crash on main EvoSuite process. Class " + Properties.TARGET_CLASS + " using seed "+ Randomness.getSeed()+ ". Configuration id : "+ Properties.CONFIGURATION_ID,t);    System.exit(-1);  }  System.exit(0);}  }
class C{  public Clustering<PrototypeModel<O>> run(Database database,Relation<O> relation){  DistanceQuery<O> dq=database.getDistanceQuery(relation,getDistanceFunction());  ModifiableDBIDs ids=DBIDUtil.newHashSet(relation.getDBIDs());  ArrayList<Cluster<PrototypeModel<O>>> clusters=new ArrayList<>();  final int size=relation.size();  if (!(t1 >= t2)) {    throw new AbortException("T1 must be at least as large as T2.");  }  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Canopy clustering",size,LOG) : null;  DBIDVar first=DBIDUtil.newVar();  while (!ids.isEmpty()) {    ids.pop(first);    ModifiableDBIDs cids=DBIDUtil.newArray();    cids.add(first);    for (DBIDMIter iter=ids.iter(); iter.valid(); iter.advance()) {      double dist=dq.distance(first,iter);      if (dist > t1) {        continue;      }      cids.add(iter);      if (dist <= t2) {        iter.remove();      }    }    clusters.add(new Cluster<>(cids,new PrototypeModel<>(relation.get(first))));    if (prog != null) {      prog.setProcessed(size - ids.size(),LOG);    }  }  LOG.ensureCompleted(prog);  return new Clustering<>("Canopy clustering","canopy-clustering",clusters);}  }
class C{  public static ArrayList<Class<?>> findAllClassesWithReferences(){  ArrayList<Class<?>> references=new ArrayList<>();  for (  final Class<?> cls : ELKIServiceRegistry.findAllImplementations(Object.class,true,false)) {    if (cls.isAnnotationPresent(Reference.class)) {      references.add(cls);    } else {      for (      Method m : cls.getDeclaredMethods()) {        if (m.isAnnotationPresent(Reference.class)) {          references.add(cls);        }      }    }  }  return references;}  }
class C{  void run() throws Exception {  File javaHome=new File(System.getProperty("java.home"));  if (javaHome.getName().equals("jre"))   javaHome=javaHome.getParentFile();  File javadoc=new File(new File(javaHome,"bin"),"javadoc");  File testSrc=new File(System.getProperty("test.src"));  File testClasses=new File(System.getProperty("test.classes"));  String thisClassName=TestUserDoclet.class.getName();  Process p=new ProcessBuilder().command(javadoc.getPath(),"-J-Xbootclasspath:" + System.getProperty("sun.boot.class.path"),"-doclet",thisClassName,"-docletpath",testClasses.getPath(),new File(testSrc,thisClassName + ".java").getPath()).redirectErrorStream(true).start();  int actualDocletWarnCount=0;  int reportedDocletWarnCount=0;  BufferedReader in=new BufferedReader(new InputStreamReader(p.getInputStream()));  try {    String line;    while ((line=in.readLine()) != null) {      System.err.println(line);      if (line.contains(docletWarning))       actualDocletWarnCount++;      if (line.matches("[0-9]+ warning(s)?"))       reportedDocletWarnCount=Integer.valueOf(line.substring(0,line.indexOf(" ")));    }  }  finally {    in.close();  }  int rc=p.waitFor();  if (rc != 0)   System.err.println("javadoc failed, rc:" + rc);  int expectedDocletWarnCount=1;  checkEqual("actual",actualDocletWarnCount,"expected",expectedDocletWarnCount);  checkEqual("actual",actualDocletWarnCount,"reported",reportedDocletWarnCount);}  }
class C{  public static Explanation noMatch(String description,Explanation... details){  return new Explanation(false,0f,description,Arrays.asList(details));}  }
class C{  public void resetAxisMinValue(){  mCustomAxisMin=Float.NaN;}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  private BitLevel(){}  }
class C{  private static void parse(Reader in,ContentHandler contentHandler) throws IOException, SAXException {  XMLReader reader=new ExpatReader();  reader.setContentHandler(contentHandler);  reader.parse(new InputSource(in));}  }
class C{  private int estimateNumberOfObjects(InputStream source){  int numLines=0;  long maxCount=0;  for (  String line : new LineReader(source)) {    if (line.trim().equals(""))     continue;    String[] toks=Regex.spaces.split(line);    if (toks.length > ngramOrder + 1)     continue;    try {      long cnt=Long.parseLong(toks[toks.length - 1]);      if (cnt > maxCount)       maxCount=cnt;    } catch (    NumberFormatException e) {      LOG.error(e.getMessage(),e);      break;    }    numLines++;  }  double estimate=Math.log(maxCount) / Math.log(quantizationBase);  return (int)Math.round(numLines * estimate);}  }
class C{  private void flushInternal() throws IOException {  if (pos > 0) {    out.write(buf,0,pos);  }  pos=0;}  }
class C{  @Inject public ChangeValuePresenter(ChangeValueView view,DebuggerServiceClient service,JavaRuntimeLocalizationConstant constant,NotificationManager notificationManager,DtoFactory dtoFactory){  this.view=view;  this.dtoFactory=dtoFactory;  this.view.setDelegate(this);  this.service=service;  this.constant=constant;  this.notificationManager=notificationManager;}  }
class C{  private static int first(byte[] in,int inPos){  return (in[inPos] << 8) | (in[inPos + 1] & 255);}  }
class C{  public TypeDeclaration referenceType(){  return ((ClassScope)this.parent).referenceContext;}  }
class C{  public RequestTag(String tagName,String value){  this.tagName=tagName;  this.value=value;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case SGenPackage.GENERATOR_MODEL:{      GeneratorModel generatorModel=(GeneratorModel)theEObject;      T result=caseGeneratorModel(generatorModel);      if (result == null)       result=defaultCase(theEObject);      return result;    }case SGenPackage.GENERATOR_CONFIGURATION:{    GeneratorConfiguration generatorConfiguration=(GeneratorConfiguration)theEObject;    T result=caseGeneratorConfiguration(generatorConfiguration);    if (result == null)     result=defaultCase(theEObject);    return result;  }case SGenPackage.FEATURE_TYPE:{  FeatureType featureType=(FeatureType)theEObject;  T result=caseFeatureType(featureType);  if (result == null)   result=caseNamedElement(featureType);  if (result == null)   result=caseDeprecatableElement(featureType);  if (result == null)   result=defaultCase(theEObject);  return result;}case SGenPackage.FEATURE_PARAMETER:{FeatureParameter featureParameter=(FeatureParameter)theEObject;T result=caseFeatureParameter(featureParameter);if (result == null) result=caseNamedElement(featureParameter);if (result == null) result=caseDeprecatableElement(featureParameter);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.FEATURE_CONFIGURATION:{FeatureConfiguration featureConfiguration=(FeatureConfiguration)theEObject;T result=caseFeatureConfiguration(featureConfiguration);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.GENERATOR_ENTRY:{GeneratorEntry generatorEntry=(GeneratorEntry)theEObject;T result=caseGeneratorEntry(generatorEntry);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.FEATURE_PARAMETER_VALUE:{FeatureParameterValue featureParameterValue=(FeatureParameterValue)theEObject;T result=caseFeatureParameterValue(featureParameterValue);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.FEATURE_TYPE_LIBRARY:{FeatureTypeLibrary featureTypeLibrary=(FeatureTypeLibrary)theEObject;T result=caseFeatureTypeLibrary(featureTypeLibrary);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.LITERAL:{Literal literal=(Literal)theEObject;T result=caseLiteral(literal);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.BOOL_LITERAL:{BoolLiteral boolLiteral=(BoolLiteral)theEObject;T result=caseBoolLiteral(boolLiteral);if (result == null) result=caseLiteral(boolLiteral);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.INT_LITERAL:{IntLiteral intLiteral=(IntLiteral)theEObject;T result=caseIntLiteral(intLiteral);if (result == null) result=caseLiteral(intLiteral);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.REAL_LITERAL:{RealLiteral realLiteral=(RealLiteral)theEObject;T result=caseRealLiteral(realLiteral);if (result == null) result=caseLiteral(realLiteral);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.STRING_LITERAL:{StringLiteral stringLiteral=(StringLiteral)theEObject;T result=caseStringLiteral(stringLiteral);if (result == null) result=caseLiteral(stringLiteral);if (result == null) result=defaultCase(theEObject);return result;}case SGenPackage.DEPRECATABLE_ELEMENT:{DeprecatableElement deprecatableElement=(DeprecatableElement)theEObject;T result=caseDeprecatableElement(deprecatableElement);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public void encryptStorage(String code,String data){  boolean doEncrypt=true;  try {    JSONObject encryptData=new JSONObject(data);    if (!encryptData.isNull(resources.getString(R.string.intent_extra_function)) && encryptData.get(resources.getString(R.string.intent_extra_function)).toString().equalsIgnoreCase(resources.getString(R.string.intent_extra_encrypt))) {      doEncrypt=true;    } else     if (!encryptData.isNull(resources.getString(R.string.intent_extra_function)) && encryptData.get(resources.getString(R.string.intent_extra_function)).toString().equalsIgnoreCase(resources.getString(R.string.intent_extra_decrypt))) {      doEncrypt=false;    } else     if (!encryptData.isNull(resources.getString(R.string.intent_extra_function))) {      doEncrypt=Boolean.parseBoolean(encryptData.get(resources.getString(R.string.intent_extra_function)).toString());    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }  ComponentName admin=new ComponentName(context,AgentDeviceAdminReceiver.class);  if (doEncrypt && devicePolicyManager.getStorageEncryptionStatus() != DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && (devicePolicyManager.getStorageEncryptionStatus() == DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE)) {    devicePolicyManager.setStorageEncryption(admin,doEncrypt);    Intent intent=new Intent(DevicePolicyManager.ACTION_START_ENCRYPTION);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(intent);  } else   if (!doEncrypt && devicePolicyManager.getStorageEncryptionStatus() != DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && (devicePolicyManager.getStorageEncryptionStatus() == DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE || devicePolicyManager.getStorageEncryptionStatus() == DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING)) {    devicePolicyManager.setStorageEncryption(admin,doEncrypt);  }  String status;  if (devicePolicyManager.getStorageEncryptionStatus() != DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED) {    status=resources.getString(R.string.shared_pref_default_status);  } else {    status=resources.getString(R.string.shared_pref_false_status);  }  resultBuilder.build(code,status);}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  @Override public int deleteCharacter(Uri uri,String selection,String[] selectionArgs){  final long requestId=ContentUris.parseId(uri);synchronized (this) {    CharacterRecord rec=mCharacterMap.get(requestId);    if (rec != null)     return deleteEntryConditionally(rec,selection,selectionArgs); else     return 0;  }}  }
class C{  private static ObjID[] createObjIDArray(Set<RefEntry> refEntries){  ObjID[] ids=new ObjID[refEntries.size()];  Iterator<RefEntry> iter=refEntries.iterator();  for (int i=0; i < ids.length; i++) {    ids[i]=iter.next().getRef().getObjID();  }  return ids;}  }
class C{  public synchronized BookKeeperClientBuilder channelFactory(ClientSocketChannelFactory channelFactory){  this.channelFactory=channelFactory;  return this;}  }
class C{  @SuppressWarnings("rawtypes") protected boolean writeBasic(Output out,Object basic){  if (basic == null) {    out.writeNull();  } else   if (basic instanceof Boolean) {    out.writeBoolean((Boolean)basic);  } else   if (basic instanceof Number) {    out.writeNumber((Number)basic);  } else   if (basic instanceof String) {    out.writeString((String)basic);  } else   if (basic instanceof Enum) {    out.writeString(((Enum)basic).name());  } else   if (basic instanceof Date) {    out.writeDate((Date)basic);  } else {    return false;  }  return true;}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case EipPackage.MESSAGE_PART:    return createMessagePartFromString(eDataType,initialValue);case EipPackage.ROUTING_TYPE:  return createRoutingTypeFromString(eDataType,initialValue);case EipPackage.EXCHANGE_TYPE:return createExchangeTypeFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  protected String encodeBody(){  if (address == null)   return null;  String retval="";  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=LESS_THAN;  }  retval+=address.encode();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=GREATER_THAN;  }  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  private void onMediaScannerAnswer(String scanRootDir){  if ((AndroidFileCommands.canProcessFile(mContext)) || (RecursiveMediaScanner.sScanner == null)) {    final String message=mContext.getString(R.string.scanner_menu_title);    final RecursiveMediaScanner scanner=(RecursiveMediaScanner.sScanner != null) ? RecursiveMediaScanner.sScanner : new RecursiveMediaScanner(mContext,message);synchronized (this) {      if (RecursiveMediaScanner.sScanner == null) {        RecursiveMediaScanner.sScanner=scanner;        scanner.execute(new String[]{scanRootDir});      }    }    showMediaScannerStatus(RecursiveMediaScanner.sScanner);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addElement(Workspace.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE).setRequired(true);}  }
class C{  public GlassFish3xRuntimeConfigurationCapability(){  this.propertySupportMap.put(GlassFishPropertySet.ADMIN_PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.TIMEOUT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.TARGET,Boolean.TRUE);}  }
class C{  static short computeSeedHash(final long seed){  final long[] seedArr={seed};  final short seedHash=(short)((hash(seedArr,0L)[0]) & 0xFFFFL);  if (seedHash == 0) {    throw new SketchesArgumentException("The given seed: " + seed + " produced a seedHash of zero. "+ "You must choose a different seed.");  }  return seedHash;}  }
class C{  private void writeToXML(Systems jaxbSystem,Marshaller marshaller) throws AdeException {  File outFile=new File(m_outputFileName);  File tempOutputFile=new File(outFile.getParent(),outFile.getName() + ".tmp");  if (m_verbose) {    System.out.println("saving xml in " + outFile.getAbsolutePath());  }  OutputStreamWriter xmlStreamWriter;  FileOutputStream fos=null;  try {    File parentdir=outFile.getParentFile();    parentdir.mkdirs();    fos=new FileOutputStream(tempOutputFile);    xmlStreamWriter=new OutputStreamWriter(fos,StandardCharsets.UTF_8);    xmlStreamWriter.write("<?xml version='1.0' encoding='UTF-8' ?> \n");    xmlStreamWriter.write("<?xml-stylesheet href='" + XSL_FILENAME + "' type='text/xsl' ?>\n");  } catch (  IOException e) {    throw new AdeInternalException("Failed to create xml file for system " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  }  try {    marshaller.marshal(jaxbSystem,xmlStreamWriter);    xmlStreamWriter.close();    xmlStreamWriter=null;    if (outFile.exists()) {      outFile.delete();    }    if (!tempOutputFile.renameTo(outFile)) {      s_logger.error("failed to rename " + tempOutputFile.getName() + " to "+ outFile.getName());      throw new IOException("failed to rename " + tempOutputFile.getName() + " to "+ outFile.getName());    }  } catch (  JAXBException|IOException e) {    throw new AdeInternalException("Failed to write xml file for period " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  } finally {    try {      if (fos != null) {        fos.close();      }    } catch (    IOException e) {      s_logger.error("Failed to close xml file for period " + outFile.getName() + " of source "+ m_source.getSourceId(),e);    }    org.apache.commons.io.FileUtils.deleteQuietly(tempOutputFile);  }}  }
class C{  public MemBufferHolderCachePool(long maxCapacity){  super(512,0.75f);  maxStoreCapacity=maxCapacity;}  }
class C{  public static Document readXml(InputStream is) throws SAXException, IOException, ParserConfigurationException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setValidating(false);  dbf.setIgnoringComments(false);  dbf.setIgnoringElementContentWhitespace(true);  dbf.setNamespaceAware(true);  DocumentBuilder db=null;  db=dbf.newDocumentBuilder();  db.setEntityResolver(new NullResolver());  return db.parse(is);}  }
class C{  public ReferenceTextBuilder addSequence(String name,Sex sex,Ploidy ploidy,boolean linear){  mText.append(sex.name().toLowerCase(Locale.getDefault()));  mText.append("\t");  mText.append("seq");  mText.append("\t");  mText.append(name);  mText.append("\t");  mText.append(ploidy.name().toLowerCase(Locale.getDefault()));  mText.append("\t");  mText.append(linear ? "linear" : "circular");  mText.append("\n");  return this;}  }
class C{  void addRoleSpecificPriceToParameters(){  if (parametersRoles != null) {    for (int paramIndex=0; paramIndex < parametersRoles.size(); paramIndex++) {      PricedParameterRow curParam=parametersRoles.get(paramIndex);      if (!curParam.isOption()) {        if (curParam.getParameterDefinition().getValueType() != ParameterValueType.ENUMERATION) {          addForNotEnumeration(curParam,paramIndex);        } else {          addForEnumeration(curParam,paramIndex);        }      }    }  }}  }
class C{  void clear(){  final ArrayList<Node> nodes=mNodes;  final int count=nodes.size();  for (int i=0; i < count; i++) {    nodes.get(i).release();  }  nodes.clear();  mKeyNodes.clear();  mRoots.clear();}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 2) {    System.out.println("usage: [input] [output]");    System.exit(-1);  }  Job job=getJob(args[0],args[1]);  job.submit();}  }
class C{  public void prepareBreakTriggers(int chip,ExecutionMode executionMode,Integer endAddress){  if (!isImageLoaded[chip]) {    throw new RuntimeException("No Image loaded !");  }  if (executionMode == ExecutionMode.STEP) {    emulator[chip].addBreakCondition(new AlwaysBreakCondition());  } else {    if (executionMode == ExecutionMode.DEBUG) {      for (      BreakTrigger breakTrigger : prefs.getTriggers(chip)) {        if (breakTrigger.isActive()) {          for (          MemoryValueBreakCondition memoryValueBreakCondition : breakTrigger.getMemoryValueBreakConditions()) {            if (memoryValueBreakCondition.isChangeDetection()) {              memoryValueBreakCondition.setValue(platform[chip].getMemory().load32(memoryValueBreakCondition.getAddress()));              memoryValueBreakCondition.setNegate(true);            }          }          emulator[chip].addBreakCondition(new AndCondition(breakTrigger.getBreakConditions(codeStructure[chip],platform[chip].getMemory()),breakTrigger));        }      }    }    if (endAddress != null) {      BreakTrigger breakTrigger=new BreakTrigger(chip,"Run to cursor at 0x" + Format.asHex(endAddress,8));      breakTrigger.getCpuStateValues().setPc(endAddress);      breakTrigger.getCpuStateFlags().pc=1;      emulator[chip].addBreakCondition(new BreakPointCondition(endAddress,breakTrigger));    }  }}  }
class C{  @PrePersist public void prePersist(final Object entity){  notifyAll(null);}  }
class C{  public Builder hostnameVerifier(HostnameVerifier hostnameVerifier){  if (hostnameVerifier == null)   throw new NullPointerException("hostnameVerifier == null");  this.hostnameVerifier=hostnameVerifier;  return this;}  }
class C{  public TimeChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MWFActivity[");  sb.append(get_ID()).append(",Node=");  if (m_node == null)   sb.append(getAD_WF_Node_ID()); else   sb.append(m_node.getName());  sb.append(",State=").append(getWFState()).append(",AD_User_ID=").append(getAD_User_ID()).append(",").append(getCreated()).append("]");  return sb.toString();}  }
class C{  public void testNewTrackWithSplit(){  EndToEndTestUtils.changeToMetricUnits();  EndToEndTestUtils.startRecording();  checkRecording();  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_split_frequency),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.unit_kilometer),0);  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);  EndToEndTestUtils.sendGps(50);  assertTrue(EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_markers),true));  instrumentation.waitForIdleSync();  if (EndToEndTestUtils.isEmulator) {    assertTrue(EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount() > 0);  }  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  EndToEndTestUtils.stopRecording(true);}  }
class C{  public void generateCentered(int numSamples,Callback2d callback){  for (int i=0; i < numSamples; i++) {    float r=rnd.nextFloat();    float a=rnd.nextFloat() * 2.0f * (float)Math.PI;    float x=r * (float)Math.sin_roquen_9(a + 0.5 * Math.PI);    float y=r * (float)Math.sin_roquen_9(a);    callback.onNewSample(x,y);  }}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public void addExtendedProperty(ExtendedProperty prop){  getExtendedProperty().add(prop);}  }
class C{  @Override protected Category iniCustomParentHolder(View parentview){  return new Category(parentview);}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.FEATURE_PARAMETER;}  }
class C{  public boolean isGeoDbsvc(){  return getKeyspaceName().equals(GEO_KEYSPACE_NAME);}  }
class C{  public byte[] hashName(Name name) throws NoSuchAlgorithmException {  return hashName(name,hashAlg,iterations,salt);}  }
class C{  public boolean match(EnhancedForStatement node,Object other){  if (!(other instanceof EnhancedForStatement)) {    return false;  }  EnhancedForStatement o=(EnhancedForStatement)other;  return (safeSubtreeMatch(node.getParameter(),o.getParameter()) && safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  public static Response.Builder readSpdy3HeadersList(List<Header> headerBlock) throws IOException {  String status=null;  String version="HTTP/1.1";  Headers.Builder headersBuilder=new Headers.Builder();  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name;    String values=headerBlock.get(i).value.utf8();    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (name.equals(RESPONSE_STATUS)) {        status=value;      } else       if (name.equals(VERSION)) {        version=value;      } else       if (!SPDY_3_SKIPPED_RESPONSE_HEADERS.contains(name)) {        headersBuilder.add(name.utf8(),value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  StatusLine statusLine=StatusLine.parse(version + " " + status);  return new Response.Builder().protocol(Protocol.SPDY_3).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build());}  }
class C{  public void restart(){  getLock().lock();  try {    stop();    start();  }  finally {    getLock().unlock();  }}  }
class C{  public void createQtree(String qtree,String volume,String mode,Boolean opLocks,String securityStyle){  if (log.isDebugEnabled()) {    log.debug("Creating Qtree " + qtree + " in volume "+ volume+ " [mode="+ mode+ "]");  }  ClusterQtreeCommands commands=new ClusterQtreeCommands(server.getNaServer());  commands.createQtree(qtree,volume,mode,opLocks,securityStyle);}  }
class C{  private void adaptMaxNumberOfCharactersMessage(){  if (getMaxNumberOfCharacters() != -1) {    setRightMessage(getMaxNumberOfCharactersMessage(),getView().length() > getMaxNumberOfCharacters());  } else {    setRightMessage(null);  }}  }
class C{  public String encryptAttributeValue(String unencrypted) throws PwmUnrecoverableException, PwmOperationalException {  final PwmBlockAlgorithm pwmBlockAlgorithm=figureBlockAlg();  final PwmSecurityKey pwmSecurityKey=pwmApplication.getConfig().getSecurityKey();  return SecureEngine.encryptToString(unencrypted,pwmSecurityKey,pwmBlockAlgorithm);}  }
class C{  public void attach(FieldPortrayal2D portrayal,String name,boolean visible){  attach(portrayal,name,0,0,visible);}  }
class C{  public void removeLogListener(LogListener l){  super.removeLogListener(l);  for (  DatasetProvider provider : m_Providers)   provider.removeLogListener(l);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public SiteRestRep addStandby(SiteAddParam param){  log.info("Adding standby site: {}",param.getVip());  precheckForSiteNumber();  precheckForGeo();  List<Site> existingSites=drUtil.listStandbySites();  validateAddParam(param,existingSites);  precheckStandbyVersion(param);  ViPRCoreClient viprCoreClient;  SiteConfigRestRep standbyConfig;  try {    viprCoreClient=createViPRCoreClient(param.getVip(),param.getUsername(),param.getPassword());    standbyConfig=viprCoreClient.site().getStandbyConfig();  } catch (  Exception e) {    log.error("Unexpected error when retrieving standby config",e);    throw APIException.internalServerErrors.addStandbyPrecheckFailed("Cannot retrieve config from standby site");  }  String siteId=standbyConfig.getUuid();  precheckForStandbyAdd(standbyConfig,viprCoreClient);  InterProcessLock lock=drUtil.getDROperationLock();  Site standbySite=null;  try {    standbySite=new Site();    standbySite.setCreationTime((new Date()).getTime());    standbySite.setName(param.getName());    standbySite.setVdcShortId(drUtil.getLocalVdcShortId());    standbySite.setVip(standbyConfig.getVip());    standbySite.setVip6(standbyConfig.getVip6());    standbySite.getHostIPv4AddressMap().putAll(new StringMap(standbyConfig.getHostIPv4AddressMap()));    standbySite.getHostIPv6AddressMap().putAll(new StringMap(standbyConfig.getHostIPv6AddressMap()));    standbySite.setNodeCount(standbyConfig.getNodeCount());    standbySite.setUuid(standbyConfig.getUuid());    String shortId=generateShortId(drUtil.listSites());    standbySite.setSiteShortId(shortId);    standbySite.setDescription(param.getDescription());    standbySite.setState(SiteState.STANDBY_ADDING);    if (log.isDebugEnabled()) {      log.debug(standbySite.toString());    }    SecretKey secretKey=apiSignatureGenerator.getSignatureKey(SignatureKeyType.INTERVDC_API);    coordinator.startTransaction();    coordinator.addSite(standbyConfig.getUuid());    log.info("Persist standby site to ZK {}",shortId);    coordinator.persistServiceConfiguration(standbySite.toConfiguration());    drUtil.recordDrOperationStatus(standbySite.getUuid(),InterState.ADDING_STANDBY);    long vdcConfigVersion=DrUtil.newVdcConfigVersion();    drUtil.updateVdcTargetVersion(coordinator.getSiteId(),SiteInfo.DR_OP_ADD_STANDBY,vdcConfigVersion);    for (    Site site : existingSites) {      drUtil.updateVdcTargetVersion(site.getUuid(),SiteInfo.DR_OP_ADD_STANDBY,vdcConfigVersion);    }    long dataRevision=vdcConfigVersion;    List<Site> allStandbySites=new ArrayList<>();    allStandbySites.add(standbySite);    allStandbySites.addAll(existingSites);    SiteConfigParam configParam=prepareSiteConfigParam(allStandbySites,ipsecConfig.getPreSharedKey(),standbyConfig.getUuid(),dataRevision,vdcConfigVersion,secretKey);    viprCoreClient.site().syncSite(standbyConfig.getUuid(),configParam);    drUtil.updateVdcTargetVersion(siteId,SiteInfo.DR_OP_CHANGE_DATA_REVISION,vdcConfigVersion,dataRevision);    coordinator.commitTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.ADD_STANDBY,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,standbySite.toBriefString());    return siteMapper.map(standbySite);  } catch (  Exception e) {    log.error("Internal error for updating coordinator on standby",e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.ADD_STANDBY,AuditLogManager.AUDITLOG_FAILURE,null,standbySite.toBriefString());    InternalServerErrorException addStandbyFailedException=APIException.internalServerErrors.addStandbyFailed(e.getMessage());    throw addStandbyFailedException;  } finally {    try {      lock.release();    } catch (    Exception ignore) {      log.error(String.format("Lock release failed when adding standby %s",siteId));    }  }}  }
class C{  public static SecP256K1Curve secp256k1(){  return SECP256K1;}  }
class C{  private void updateRefreshInterval(){  String refreshIntervalSecsString=(String)this.source.get(REFRESH_INTERVAL_SECS_OVERRIDE_KEY);  if (StringUtils.hasText(refreshIntervalSecsString)) {    try {      long newRefreshIntervalMillis=Long.parseLong(refreshIntervalSecsString) * MILLISECONDS_IN_A_SECOND;      if (newRefreshIntervalMillis != refreshIntervalMillis) {        refreshIntervalMillis=newRefreshIntervalMillis;        LOGGER.info("A new refresh interval of " + refreshIntervalSecsString + " seconds has been configured.");      }    } catch (    NumberFormatException ex) {      LOGGER.warn("Invalid refresh interval seconds override value found: " + refreshIntervalSecsString + ". Value must be a valid number.");    }  }}  }
class C{  public void testFloatMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",-1.3F));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatDocValuesField("value",4.2F));  doc.add(newStringField("value","4.2",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.FLOAT);  sortField.setMissingValue(Float.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static ShapePainter convertFillAndStroke(Element e,ShapeNode node,BridgeContext ctx){  Shape shape=node.getShape();  if (shape == null)   return null;  Paint fillPaint=convertFillPaint(e,node,ctx);  FillShapePainter fp=new FillShapePainter(shape);  fp.setPaint(fillPaint);  Stroke stroke=convertStroke(e);  if (stroke == null)   return fp;  Paint strokePaint=convertStrokePaint(e,node,ctx);  StrokeShapePainter sp=new StrokeShapePainter(shape);  sp.setStroke(stroke);  sp.setPaint(strokePaint);  CompositeShapePainter cp=new CompositeShapePainter(shape);  cp.addShapePainter(fp);  cp.addShapePainter(sp);  return cp;}  }
class C{  @Inject protected DefaultWardenService(AlertService alertService,MonitorService monitorService,UserService userService,MetricService metricService,ServiceManagementService serviceManagementService,DashboardService dashboardService,AuditService auditService,AnnotationService annotationService,SystemConfiguration _sysConfig){  super(auditService,_sysConfig);  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(monitorService != null,"Monitor service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(metricService != null,"Metric service cannot be null.");  requireArgument(serviceManagementService != null,"Service management service cannot be null.");  requireArgument(dashboardService != null,"Dashboard service cannot be null.");  requireArgument(annotationService != null,"Annotation service cannot be null.");  _alertService=alertService;  _monitorService=monitorService;  _userService=userService;  _metricService=metricService;  _serviceManagementRecordService=serviceManagementService;  _dashboardService=dashboardService;  _annotationService=annotationService;  _adminUser=_userService.findAdminUser();  _scheduledExecutorService=_createScheduledExecutorService();  _startScheduledExecutorService();}  }
class C{  public JButton createJButton(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JButton result;  try {    result=new JButton(getString(name + TEXT_SUFFIX));  } catch (  MissingResourceException e) {    result=new JButton();  }  initializeButton(result,name);  return result;}  }
class C{  public static Object sum(Iterator<Object> self,Closure closure){  return sum(toList(self),null,closure,true);}  }
class C{  public int hashCode(){  throw new UnsupportedOperationException("hashCode() is not supported because pictures are mutable");}  }
class C{  public TLongFloatHashMap(){}  }
class C{  public static PlaylistListFragment newInstance(boolean isStandalone){  PlaylistListFragment fragment=new PlaylistListFragment();  fragment.setIsStandalone(isStandalone);  return fragment;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getEditorial(stack).getAirdate();}  }
class C{  public SignedObject(Serializable object,PrivateKey signingKey,Signature signingEngine) throws IOException, InvalidKeyException, SignatureException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  ObjectOutput a=new ObjectOutputStream(b);  a.writeObject(object);  a.flush();  a.close();  this.content=b.toByteArray();  b.close();  this.sign(signingKey,signingEngine);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  for (  Entry<Provider,List<String>> e : digestAlgs.entrySet()) {    for (    String algorithm : e.getValue()) {      MessageDigest md=MessageDigest.getInstance(algorithm,e.getKey().getName());      assertNotNull(md);    }  }  for (  List<String> algorithms : digestAlgs.values()) {    for (    String algorithm : algorithms) {      try {        MessageDigest.getInstance(algorithm,"UnknownProvider");        fail("expected NoSuchProviderException");      } catch (      NoSuchProviderException expected) {      }    }  }  for (  Provider provider : digestAlgs.keySet()) {    try {      MessageDigest.getInstance("UnknownDigest",provider.getName());      fail("expected NoSuchAlgorithmException");    } catch (    NoSuchAlgorithmException expected) {    }  }  for (  Provider provider : digestAlgs.keySet()) {    try {      MessageDigest.getInstance(null,provider.getName());      fail("expected NullPointerException");    } catch (    NullPointerException expected) {    }  }  try {    MessageDigest.getInstance("AnyDigest",(String)null);    fail("expected IllegalArgumentException");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  @Override public void shutdown(DeployService2Impl<I> deploy,ShutdownModeAmp mode,Result<Boolean> result){  deploy.shutdownImpl(mode,result);}  }
class C{  public FaceDetection(){  initComponents();  System.out.println(FaceDetection.class.getResource("haarcascade_frontalface_alt.xml").getPath().substring(1));}  }
class C{  public Symbol resolveBinaryNameOrIdent(String name){  try {    Name flatname=names.fromString(name.replace("/","."));    return reader.loadClass(flatname);  } catch (  CompletionFailure ignore) {    return resolveIdent(name);  }}  }
class C{  public boolean isWhitespace(){  return gm.isWhitespace();}  }
class C{  public CreatureSpawner(){  final Collection<Creature> creatures=SingletonRepository.getEntityManager().getCreatures();  for (  Creature creature : creatures) {    if (!creature.isRare()) {      sortedCreatures.add(creature);    }  }  Collections.sort(sortedCreatures,new LevelBasedComparator());}  }
class C{  private void check(IntMathVec iVec){  if (iVec.iV.length != iV.length) {    System.out.println("IntMathVec.check: Vector sizes don't match.");  }}  }
class C{  public boolean updateUserAcl(String username,String dbgroupname,boolean visible){  Connection conn=null;  PreparedStatement stmt=null;  ResultSet rs=null;  try {    conn=getConnection();    String sql="select dbgroupname from " + USERACL_TABLENAME + " where username=? and dbgroupname=?";    stmt=conn.prepareStatement(sql);    stmt.setString(1,username);    stmt.setString(2,dbgroupname);    rs=stmt.executeQuery();    boolean findOne=false;    if (rs != null && rs.next())     findOne=true;    DBUtils.close(rs);    rs=null;    DBUtils.close(stmt);    stmt=null;    if (findOne) {      sql="update " + USERACL_TABLENAME + " set visible=? where username=? and dbgroupname=?";      stmt=conn.prepareStatement(sql);      stmt.setInt(1,visible ? 1 : 0);      stmt.setString(2,username);      stmt.setString(3,dbgroupname);      stmt.execute();      DBUtils.close(stmt);      stmt=null;    } else {      sql="insert into " + USERACL_TABLENAME + " (username, dbgroupname, visible) values (?, ?, ?)";      stmt=conn.prepareStatement(sql);      stmt.setString(1,username);      stmt.setString(2,dbgroupname);      stmt.setInt(3,visible ? 1 : 0);      stmt.execute();    }    DBUtils.close(stmt);    stmt=null;    conn.commit();    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);    return false;  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(conn);  }}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  private void createCommodities(String ksModelDirectory){  DgIdPool idPool=DgIdPool.readFromFile(ksModelDirectory + "id_conversions.txt");  this.idConverter=new DgIdConverter(idPool);  for (  Id<Person> personId : matsimRoutes.keySet()) {    List<Id<Link>> matsimRoute=matsimRoutes.get(personId);    Id<Link> matsimFirstLink=matsimRoute.get(0);    Id<Link> matsimLastLink=matsimRoute.get(matsimRoute.size() - 1);    Id<Node> matsimSourceNodeId=this.matsimNet.getLinks().get(matsimFirstLink).getToNode().getId();    Id<Node> matsimDrainNodeId=this.matsimNet.getLinks().get(matsimLastLink).getToNode().getId();    Id<DgCommodity> comId=idConverter.convertLinkToLinkPair2CommodityId(matsimFirstLink,matsimLastLink);    Id<DgCrossingNode> ksSourceNodeId=getCrossingNodeIdFromNodeAndLink(matsimSourceNodeId,matsimFirstLink);    Id<DgCrossingNode> ksDrainNodeId=getCrossingNodeIdFromNodeAndLink(matsimDrainNodeId,matsimLastLink);    List<Id<DgStreet>> ksPath=new ArrayList<>();    for (    Id<Link> linkId : matsimRoute) {      Id<DgStreet> streetId=idConverter.convertLinkId2StreetId(linkId);      ksPath.add(streetId);    }    ksPath.remove(0);    Id<TtPath> pathId=idConverter.convertPathInfo2PathId(ksPath,ksSourceNodeId,ksDrainNodeId);    addRouteToCommodity(ksSourceNodeId,ksDrainNodeId,comId,ksPath,pathId);  }}  }
class C{  public void rebuildStackMapForME(ClassPool pool) throws BadBytecode {  CodeAttribute ca=getCodeAttribute();  if (ca != null) {    StackMap sm=MapMaker.make2(pool,this);    ca.setAttribute(sm);  }}  }
class C{  @Override public boolean containsValue(final Object value){  purgeBeforeRead();  if (value == null) {    return false;  }  return super.containsValue(value);}  }
class C{  public SteppedPrice copy(){  SteppedPrice sp=new SteppedPrice();  sp.setAdditionalPrice(getAdditionalPrice());  sp.setFreeEntityCount(getFreeEntityCount());  sp.setLimit(getLimit());  sp.setPrice(getPrice());  return sp;}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressNone(DataType compDataType,DataType actualDataType){  if (actualDataType == DataType.DATA_BIGINT) {    return new UnCompressDefaultLong();  } else {switch (compDataType) {case DATA_BYTE:      return new UnCompressNoneByte();case DATA_SHORT:    return new UnCompressNoneShort();case DATA_INT:  return new UnCompressNoneInt();case DATA_LONG:return new UnCompressNoneLong();case DATA_FLOAT:return new UnCompressNoneFloat();default :return new UnCompressNoneDefault();}}}  }
class C{  protected void checkOffset(long offset){  checkOpen();  if (offset < 0 || offset > size())   throw new IndexOutOfBoundsException();}  }
class C{  private static final String decode(File[] src){  if (src == null || src.length == 0) {    return "";  }  StringBuilder buffer=new StringBuilder();  for (  File file : src) {    buffer.append(file.getAbsolutePath()).append(';');  }  if (buffer.length() > 0) {    buffer.setLength(buffer.length() - 1);  }  return buffer.toString();}  }
class C{  public static void zip(File inFile,File outFile) throws IOException {  FileInputStream fin=new FileInputStream(inFile);  FileOutputStream fout=new FileOutputStream(outFile);  ZipOutputStream zout=new ZipOutputStream(fout);  try {    zout.putNextEntry(new ZipEntry(inFile.getName()));    byte[] buffer=new byte[1024];    int len;    while ((len=fin.read(buffer)) > 0) {      zout.write(buffer,0,len);    }    zout.closeEntry();  }  finally {    zout.close();    fin.close();  }}  }
class C{  public void parseType(String val){}  }
class C{  public void initAnadirTareaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=getServiceRepository(request);  GestionDocumentosElectronicosBI serviceDocElec=services.lookupGestionDocumentosElectronicosBI();  TareaForm frm=(TareaForm)form;  frm.resetForCreate();  frm.setBuscarPor(DocumentosConstants.BUSQUEDA_X_DESCRIPTOR);  setInTemporalSession(request,DocumentosConstants.LISTA_LISTAS_DESCRIPTORAS_KEY,serviceDocElec.getListasDescriptorasDigitalizables());  setInTemporalSession(request,DocumentosConstants.LISTA_FONDOS_KEY,serviceDocElec.getFondosDigitalizables());  removeInTemporalSession(request,DocumentosConstants.RESPUESTA_BUSQUEDA_ENTIDADES);  removeInTemporalSession(request,DocumentosConstants.RESPUESTA_BUSQUEDA_CUADRO);  setReturnActionFordward(request,mapping.findForward("redirect_anadirTareaPaso1"));}  }
class C{  public int inputRepAddr(){  if (getOpCode() == LnConstants.OPC_INPUT_REP) {    return sensorAddr();  } else {    return -1;  }}  }
class C{  @Override public void inform(ResourceLoader resourceLoader){  provider.inform(resourceLoader);  boolean reloaded=provider.reload();  if (!reloaded) {    log.warn("Failed reloading currencies");  }}  }
class C{  public void testLegacyDoubleReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyDoubleField("value",30.1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",-1.3,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333333,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333332,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_DOUBLE));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("30.1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("-1.3",searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public XORShift64Random(long seed){  x=seed == 0 ? 0xdeadbeef : seed;}  }
class C{  public void insert(int index,Float value){  if (value == null) {    insertNull(index);  } else {    _insert(index,numberNode(value.floatValue()));  }}  }
class C{  public boolean validate(File file){  if (file != null) {    if (file.lastModified() != this.lastModified) {      return false;    }    if (file.length() != this.length) {      return false;    }  }  hit++;  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementreplaceexistingattributegevalue.class,args);}  }
class C{  public boolean canValidMemory(){  return canValidMemory;}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  ParamChecks.nullNotPermitted(dataset,"dataset");  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int seriesCount=dataset.getSeriesCount();  double lvalue;  double uvalue;  if (dataset instanceof VectorXYDataset) {    VectorXYDataset vdataset=(VectorXYDataset)dataset;    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double delta=vdataset.getVectorXValue(series,item);        if (delta < 0.0) {          uvalue=vdataset.getXValue(series,item);          lvalue=uvalue + delta;        } else {          lvalue=vdataset.getXValue(series,item);          uvalue=lvalue + delta;        }        minimum=Math.min(minimum,lvalue);        maximum=Math.max(maximum,uvalue);      }    }  } else {    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        lvalue=dataset.getXValue(series,item);        uvalue=lvalue;        minimum=Math.min(minimum,lvalue);        maximum=Math.max(maximum,uvalue);      }    }  }  if (minimum > maximum) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  static <T1,T2,T3,R1,R2,R3,R>AnyMValue<R> each4(final MonadicValue<? extends T1> monadicValue,final Function<? super T1,? extends MonadicValue<R1>> value2,final BiFunction<? super T1,? super R1,? extends MonadicValue<R2>> value3,final TriFunction<? super T1,? super R1,? super R2,? extends MonadicValue<R3>> value4,final QuadFunction<? super T1,? super R1,? super R2,? super R3,Boolean> filterFunction,final QuadFunction<? super T1,? super R1,? super R2,? super R3,? extends R> yieldingFunction){  return AnyM.ofValue(For.iterable(monadicValue).iterable(null).iterable(null).iterable(null).filter(null).yield4(yieldingFunction).unwrap());}  }
class C{  @NotNull public static <T>T installMockService(@NotNull Class<T> serviceInterface){  T mock=Mockito.mock(serviceInterface);  MutablePicoContainer picoContainer=(MutablePicoContainer)ApplicationManager.getApplication().getPicoContainer();  picoContainer.unregisterComponent(serviceInterface.getName());  picoContainer.registerComponentInstance(serviceInterface.getName(),mock);  return mock;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public void showMapEntityInfoDialog(MapEntity entity,boolean debug){  List<MapEntity> entities=new ArrayList<MapEntity>();  if (entity.getName() != null || entity.getAttributes().length > 0 || debug)   entities.add(entity);  if (entity instanceof MapNode) {    MapNode mNode=(MapNode)entity;    for (    WayRef ref : mNode.getWayRefs()) {      MapEntity me=ref.getWay();      if (me.getName() != null || me.getAttributes().length > 0 || debug)       entities.add(me);    }  }  boolean done=false;  for (int i=0; i < entities.size() && !done; i++) {    MapEntity me=entities.get(i);    Object[] content=new Object[]{"","",""};    String text=(me.getName() != null) ? me.getName() : "";    if (debug)     text+=" (" + ((me instanceof MapNode) ? "Node " : "Way ") + me.getId()+ ")";    content[0]=text;    if (me instanceof MapNode) {      PositionPanel pos=new PositionPanel();      pos.setPosition(((MapNode)me).getLat(),((MapNode)me).getLon());      pos.setEnabled(false);      content[1]=pos;    }    if (me.getAttributes().length > 0) {      EntityAttribute[] atts=me.getAttributes();      String[][] attTexts=new String[atts.length][2];      for (int j=0; j < atts.length; j++) {        attTexts[j][0]=atts[j].getKey();        attTexts[j][1]=atts[j].getValue();      }      JTable table=new JTable(attTexts,new String[]{"Name","Value"});      JScrollPane spane=new JScrollPane(table);      spane.setPreferredSize(new Dimension(300,150));      content[2]=spane;    }    Object[] options;    if (i < entities.size() - 1)     options=new String[]{"OK","Next"}; else     options=new String[]{"OK"};    if (JOptionPane.showOptionDialog(this,content,"Map Entity Info",JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options,options[0]) != 1)     done=true;  }}  }
class C{  public static int[] readIntArray(ByteBuffer buffer,int numEntries){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int[] array=new int[numEntries];  for (int i=0; i < numEntries; i++) {    array[i]=buffer.getInt();  }  return array;}  }
class C{  public StreamHandler(){  sealed=false;  configure();  sealed=true;}  }
class C{  public static <T extends NbtSerializable>T deserialize(Class<T> clazz,NbtTagCompound data){  Function<NbtTagCompound,Object> f=tag.get(clazz);  if (f == null) {    Class c=aliases.get(clazz);    if (c == null) {      return null;    }    f=tag.get(c);    if (f == null) {      return null;    }  }  return (T)f.apply(data);}  }
class C{  ContentType(String userContentType){  _userContentType=userContentType;  parseContentType(userContentType);  parseEncodingDefault();}  }
class C{  public boolean isNextBlockFreeAndAllocated(){  BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);  if (bo == null)   return false;  int blockState=bo.getBlock().getState();  if (blockState == (OBlock.UNOCCUPIED | OBlock.ALLOCATED)) {    return getBlockOrderAt(_idxCurrentOrder + 1).getBlock().isAllocatedTo(this);  } else {    return false;  }}  }
class C{  public String addStepsForRemovingVolumesFromCG(Workflow workflow,String waitFor,URI cgURI,List<URI> volumeList,String taskId) throws InternalException {  Map<URI,List<URI>> storageToVolMap=new HashMap<URI,List<URI>>();  Iterator<Volume> volumes=_dbClient.queryIterativeObjects(Volume.class,volumeList);  while (volumes.hasNext()) {    Volume volume=volumes.next();    URI system=volume.getStorageController();    if (storageToVolMap.get(system) == null) {      storageToVolMap.put(system,new ArrayList<URI>());    }    storageToVolMap.get(system).add(volume.getId());  }  for (  Entry<URI,List<URI>> entry : storageToVolMap.entrySet()) {    waitFor=addStepsForRemovingVolumesFromCG(workflow,waitFor,cgURI,entry.getKey(),entry.getValue(),taskId);  }  return waitFor;}  }
class C{  public static Iterator keysByPrefix(String prefix){  Configuration conf=instance();  Iterator iter=conf.properties.keySet().iterator();  List l=new ArrayList();  while (iter.hasNext()) {    String key=(String)iter.next();    if (key.startsWith(prefix)) {      l.add(key);    }  }  return l.iterator();}  }
class C{  public Builder withDrawable(final Drawable drawable){  this.drawable=drawable;  return this;}  }
class C{  public void zoomOut(){  if (zoomIndex == 0) {    return;  }  zoomIndex--;  zoom();}  }
class C{  public static ImmutableSet<CommitLogBucket> loadAllBuckets(){  ofy().load().keys(getAllBucketKeys());  ImmutableSet.Builder<CommitLogBucket> allBuckets=new ImmutableSet.Builder<>();  for (  Key<CommitLogBucket> key : getAllBucketKeys()) {    allBuckets.add(loadBucket(key));  }  return allBuckets.build();}  }
class C{  public void clear(){  reset();  instructions.clear();  labels.clear();  code=null;  lineNumbers.clear();}  }
class C{  @Override protected void validate(){  failIf(this.value < 0,"Unreasonable verbosity level");}  }
class C{  public RegularEventSpecItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public PickledGraphite(InetSocketAddress address,SocketFactory socketFactory,int batchSize){  this(address,socketFactory,UTF_8,batchSize);}  }
class C{  public boolean equals(Object a){  if (a instanceof PrincipalImpl) {    for (int i=0; i < add.length; i++) {      if (add[i].equals(((PrincipalImpl)a).getAddress()))       return true;    }    return false;  } else {    return false;  }}  }
class C{  private void redirectGpgConnection(){  try {    while (true) {      String message=gameInputStream.readString();      List<Object> chunks=gameInputStream.readChunks();      GpgClientMessage gpgClientMessage=new GpgClientMessage(message,chunks);      handleDataFromFa(gpgClientMessage);    }  } catch (  IOException e) {    logger.info("Forged Alliance disconnected from local relay server (" + e.getMessage() + ")");    close();  }}  }
class C{  public Matrix4d rotateXYZ(Vector3d angles){  return rotateXYZ(angles.x,angles.y,angles.z);}  }
class C{  private int encodeHash(long x,int p,int sp){  int idx=(int)(x >>> (64 - sp));  int zeroTest=0;  if (p < sp) {    zeroTest=idx << ((32 - sp) + p);  }  if (zeroTest == 0) {    final int runLength=Long.numberOfLeadingZeros((x << this.p) | (1 << (this.p - 1))) + 1;    int invrl=runLength ^ 63;    return (((idx << 6) | invrl) << 1) | 1;  } else {    return idx << 1;  }}  }
class C{  public OutputNode remove(String name){  return super.remove(name);}  }
class C{  public Point2D other(){  return best2;}  }
class C{  @Override public Iterator<E> iterator(){  return this.inOrderIterator();}  }
class C{  protected void integrate(){}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;  if (strength == 0 || strength == (168 / 8)) {    strength=DESedeParameters.DES_EDE_KEY_LENGTH;  } else   if (strength == (112 / 8)) {    strength=2 * DESedeParameters.DES_KEY_LENGTH;  } else   if (strength != DESedeParameters.DES_EDE_KEY_LENGTH && strength != (2 * DESedeParameters.DES_KEY_LENGTH)) {    throw new IllegalArgumentException("DESede key must be " + (DESedeParameters.DES_EDE_KEY_LENGTH * 8) + " or "+ (2 * 8 * DESedeParameters.DES_KEY_LENGTH)+ " bits long.");  }}  }
class C{  public boolean isRandomized(){  if (sessionEdgeMode == RANDOMIZED) {    return true;  } else   if (sessionEdgeMode == UNRANDOMIZED) {    return false;  } else {    throw new IllegalStateException();  }}  }
class C{  private final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private View createContentView(){  LinearLayout layout=new LinearLayout(this);  layout.setOrientation(LinearLayout.VERTICAL);  mTitle=new TextView(this);  mTitle.setGravity(Gravity.CENTER);  mTitle.setTextColor(Color.BLACK);  mTitle.setTextSize(TypedValue.COMPLEX_UNIT_DIP,18);  mTitle.setSingleLine();  mTitle.setEllipsize(TextUtils.TruncateAt.END);  mTitle.setPadding(DisplayUtils.dip2px(this,20),0,DisplayUtils.dip2px(this,20),0);  LinearLayout.LayoutParams titleParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,DisplayUtils.dip2px(this,45));  layout.addView(mTitle,titleParams);  mProgress=new ProgressBar(this,null,android.R.attr.progressBarStyleHorizontal);  LinearLayout.LayoutParams progressParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,DisplayUtils.dip2px(this,3));  layout.addView(mProgress,progressParams);  mWebView=new WebView(this);  LinearLayout.LayoutParams webviewParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT);  layout.addView(mWebView,webviewParams);  return layout;}  }
class C{  @Override public void service(TupleResultBuilder builder,String xslPath) throws RepositoryException, QueryResultHandlerException {  builder.transform(xslPath,"delete.xsl");  builder.start("readable","writeable","id","description","location");  builder.link(Arrays.asList(INFO));  for (  RepositoryInfo info : manager.getAllRepositoryInfos()) {    builder.result(info.isReadable(),info.isWritable(),info.getId(),info.getDescription(),info.getLocation());  }  builder.end();}  }
class C{  public KMeansClusterer(int max_iterations,double convergence_threshold){  this.max_iterations=max_iterations;  this.convergence_threshold=convergence_threshold;  this.rand=new Random();}  }
class C{  public BERoundBorder(Color color){  this(color,1);}  }
class C{  public static BitArray allocate(long bits){  if (!(bits > 0 & (bits & (bits - 1)) == 0))   throw new IllegalArgumentException("size must be a power of 2");  return new BitArray(HeapBytes.allocate(Math.max(bits / 8 + 8,8)),bits);}  }
class C{  public Label(Position position,TextAttributes attributes){  if (position == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Label","constructor","missingPosition"));  }  this.position.set(position);  this.attributes=attributes;}  }
class C{  public void validateBusinessObjectDataStatusUpdateResponse(BusinessObjectDataKey expectedBusinessObjectDataKey,String expectedBusinessObjectDataStatus,String expectedPreviousBusinessObjectDataStatus,BusinessObjectDataStatusUpdateResponse actualResponse){  assertNotNull(actualResponse);  assertEquals(expectedBusinessObjectDataKey,actualResponse.getBusinessObjectDataKey());  assertEquals(expectedBusinessObjectDataStatus,actualResponse.getStatus());  assertEquals(expectedPreviousBusinessObjectDataStatus,actualResponse.getPreviousStatus());}  }
class C{  @Deprecated public IgfsPath(){  path=SLASH;}  }
class C{  public static String removePathParameters(String originalPath){  String[] tokens=originalPath.split("/");  for (int i=0; i < tokens.length; i++) {    int index=tokens[i].indexOf(";");    if (index >= 0) {      tokens[i]=tokens[i].substring(0,index);    }  }  return StringUtils.join(tokens,"/");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  public void addViewer(HumanEntity viewer){  viewers.add(viewer);}  }
class C{  private void sendEmail(){  Intent requestIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(getString(R.string.email_intent_type),getString(R.string.dev_email_address),null));  requestIntent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.email_subject));  startActivity(Intent.createChooser(requestIntent,getString(R.string.email_intent_title)));}  }
class C{  public void testSendWithDelay(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setDelay(50);  test.doTestTransfer(1000000);}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  public static CharSequence parseMarkdown(String input){  CharSequence output=Html.fromHtml(processor.markdownToHtml(EmojiParser.parseEmojis(input.trim())));  if (output.length() >= 2)   output=output.subSequence(0,output.length() - 2);  return output;}  }
class C{  public HibernatePersistentMapConverter(final Mapper mapper){  super(mapper);}  }
class C{  @SuppressWarnings("rawtypes") private IV handleTwoDates(final LiteralExtensionIV iv1,final LiteralExtensionIV iv2,final MathOp op,final BigdataValueFactory vf){  long ts1=iv1.getDelegate().longValue();  long ts2=iv2.getDelegate().longValue();switch (op) {case MIN:    return ts1 < ts2 ? iv1 : iv2;case MAX:  return ts1 > ts2 ? iv1 : iv2;case MINUS:double days=(double)(ts1 - ts2) / ((double)(60 * 60 * 24));return new XSDNumericIV(days);default :throw new SparqlTypeErrorException();}}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_CLASS_DECLARATION;}  }
class C{  public synchronized void removeGraphListener(GraphListener cl){  m_graphListeners.remove(cl);}  }
class C{  public AsyncExecutor(){  this.streamHandler=new PumpStreamHandler();  this.launcher=CommandLauncherFactory.createVMLauncher();  this.exitValues=new int[0];}  }
class C{  public void addShutDownScript(String pathname){  _shutDownScripts.add(pathname);  setDirtyAndFirePropertyChange("addShutDownScript",pathname,null);}  }
class C{  private final Object slotExchange(Object item,boolean timed,long ns){  Node p=participant.get();  Thread t=Thread.currentThread();  if (t.isInterrupted())   return null;  for (Node q; ; ) {    if ((q=slot) != null) {      if (U.compareAndSwapObject(this,SLOT,q,null)) {        Object v=q.item;        q.match=item;        Thread w=q.parked;        if (w != null)         U.unpark(w);        return v;      }      if (NCPU > 1 && bound == 0 && U.compareAndSwapInt(this,BOUND,0,SEQ))       arena=new Node[(FULL + 2) << ASHIFT];    } else     if (arena != null)     return null; else {      p.item=item;      if (U.compareAndSwapObject(this,SLOT,null,p))       break;      p.item=null;    }  }  int h=p.hash;  long end=timed ? System.nanoTime() + ns : 0L;  int spins=(NCPU > 1) ? SPINS : 1;  Object v;  while ((v=p.match) == null) {    if (spins > 0) {      h^=h << 1;      h^=h >>> 3;      h^=h << 10;      if (h == 0)       h=SPINS | (int)t.getId(); else       if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)       Thread.yield();    } else     if (slot != p)     spins=SPINS; else     if (!t.isInterrupted() && arena == null && (!timed || (ns=end - System.nanoTime()) > 0L)) {      U.putObject(t,BLOCKER,this);      p.parked=t;      if (slot == p)       U.park(false,ns);      p.parked=null;      U.putObject(t,BLOCKER,null);    } else     if (U.compareAndSwapObject(this,SLOT,p,null)) {      v=timed && ns <= 0L && !t.isInterrupted() ? TIMED_OUT : null;      break;    }  }  U.putOrderedObject(p,MATCH,null);  p.item=null;  p.hash=h;  return v;}  }
class C{  public void writeToFile(File file,String fileContent){  if (!file.exists()) {    try {      FileWriter writer=new FileWriter(file);      writer.write(fileContent);      writer.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    } finally {    }  }}  }
class C{  public SharedObject(Map<String,Object> data,String name,String path,boolean persistent){  super();  this.name=name;  this.path=path;  this.persistentSO=persistent;  ownerMessage=new SharedObjectMessage(null,name,0,persistent);  creationTime=System.currentTimeMillis();  super.setAttributes(data);}  }
class C{  protected Object fill(Object key){  return null;}  }
class C{  public static Object remove(FacesContext ctx,String key){  if (ctx == null || key == null) {    return null;  }  return ctx.getAttributes().remove(key);}  }
class C{  protected InternalReadReport asyncStreamRead(EntityDefinition ed,Scan scan,QualifierCreationListener listener) throws IOException {  long counter=0;  long startTimestamp=0;  long stopTimestamp=0;  InternalScanner scanner=this.getCurrentRegion().getScanner(scan);  List<Cell> results=new ArrayList<Cell>();  try {    boolean hasMoreRows;    do {      hasMoreRows=scanner.next(results);      Map<String,byte[]> kvMap=new HashMap<>();      if (!results.isEmpty()) {        counter++;        byte[] row=results.get(0).getRow();        long timestamp=RowkeyBuilder.getTimestamp(row,ed);        if (startTimestamp == 0 || startTimestamp > timestamp) {          startTimestamp=timestamp;        }        if (stopTimestamp == 0 || stopTimestamp < timestamp) {          stopTimestamp=timestamp;        }        for (        Cell kv : results) {          String qualifierName=Bytes.toString(kv.getQualifier());          Qualifier qualifier=null;          if (!ed.isTag(qualifierName)) {            qualifier=ed.getQualifierNameMap().get(qualifierName);            if (qualifier == null) {              LOG.error("qualifier for field " + qualifierName + " not exist");              throw new IOException(new NullPointerException("qualifier for field " + qualifierName + " is null"));            }            qualifierName=qualifier.getDisplayName();          }          if (kv.getValue() != null) {            kvMap.put(qualifierName,kv.getValue());          }        }        if (!kvMap.isEmpty()) {          listener.qualifierCreated(kvMap);        }        results.clear();      } else {        if (LOG.isDebugEnabled()) {          LOG.warn("Empty batch of KeyValue");        }      }    } while (hasMoreRows);  } catch (  IOException ex) {    LOG.error(ex.getMessage(),ex);    throw ex;  } finally {    if (scanner != null) {      scanner.close();    }  }  return new InternalReadReport(counter,startTimestamp,stopTimestamp);}  }
class C{  @Override public int hashCode(){  int result=leftParenthesisCount;  result=31 * result + rightParenthesisCount;  result=31 * result + (nextAnd ? 1 : 0);  return result;}  }
class C{  public void writeSyncValue(String storeName,Scope scope,boolean persist,byte[] key,Iterable<Versioned<byte[]>> values) throws PersistException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null) {    store=storeRegistry.register(storeName,scope,persist);  }  store.writeSyncValue(new ByteArray(key),values);}  }
class C{  public static void swap(Array array,int left,int right) throws ExpressionException {  int len=array.size();  if (len == 0)   throw new ExpressionException("array is empty");  if (left < 1 || left > len)   throw new ExpressionException("invalid index [" + left + "]","valid indexes are from 1 to " + len);  if (right < 1 || right > len)   throw new ExpressionException("invalid index [" + right + "]","valid indexes are from 1 to " + len);  try {    Object leftValue=array.get(left,null);    Object rightValue=array.get(right,null);    array.setE(left,rightValue);    array.setE(right,leftValue);  } catch (  PageException e) {    throw new ExpressionException("can't swap values of array",e.getMessage());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @ObjectiveCName("toggleVideoEnabledWithCallId:") public void toggleVideoEnabled(long callId){  if (modules.getCallsModule().getCall(callId).getIsVideoEnabled().get()) {    modules.getCallsModule().disableVideo(callId);  } else {    modules.getCallsModule().enableVideo(callId);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.STATE_VECTOR__SIZE:    setSize(SIZE_EDEFAULT);  return;case SexecPackage.STATE_VECTOR__OFFSET:setOffset(OFFSET_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public final void listPhotos(final PhotoListRequest request,final StreamObserver<PhotoListResponse> responseObserver,final DbClient.PhotoListType listKind){  PhotoListResponse reply;  if (AuthUtils.isSignedIn()) {    long page=request.getPageNumber();    DbClient.EntityListAndCursorResult photoListAndCursor;    try {      ByteString cursor=null;      boolean pageError=false;      if (page != 0) {        Entity cursorEntity=dbClient.getAndDeleteCursor(page);        if (cursorEntity != null) {          cursor=getByteString(getPropertyMap(cursorEntity).get("cursor"));        } else {          pageError=true;        }      }      photoListAndCursor=dbClient.getPhotoList(AuthUtils.getUserId(),listKind,cursor);      PhotoListResponse.Builder builder=PhotoListResponse.newBuilder();      if (pageError) {        builder.setError(getErrorMessage("400-200","Invalid page, returning results from scratch"));      }      for (      Entity result : photoListAndCursor.getEntityList()) {        Map<String,Value> props=getPropertyMap(result);        long rating=1;        if (listKind == DbClient.PhotoListType.PHOTO_LIST_STREAM) {          rating=dbClient.getVoteValueForPhoto(DbUtils.getEntityId(result),getString(props.get("userId")));        }        Photo photo=Photo.newBuilder().setPhotoId(DbUtils.getEntityId(result)).setUserId(getString(props.get("userId"))).setDate(getTimestamp(props.get("date"))).setDescription(getString(props.get("description"))).setRating(rating).setUrl(BackendConstants.IMAGES_BASE_URL + DbUtils.getEntityId(result) + "_"+ getString(props.get("userId"))+ ".webp").build();        builder.addPhoto(photo);      }      if (photoListAndCursor.getCursor() != null && photoListAndCursor.getEntityList().size() > 0) {        long cursorId=dbClient.insertCursor(photoListAndCursor.getCursor(),AuthUtils.getUserId());        builder.setNextPage(cursorId);      }      reply=builder.build();    } catch (    DatastoreException e) {      reply=PhotoListResponse.newBuilder().setError(getDbErrorMessage()).build();    }  } else {    reply=PhotoListResponse.newBuilder().setError(getAuthErrorMessage()).build();  }  responseObserver.onValue(reply);  responseObserver.onCompleted();}  }
class C{  private static void checkVPoolValidForGivenUnManagedVolumeUris(StringSetMap preExistVolumeInformation,UnManagedVolume unManagedVolume,URI vpoolUri,DbClient dbClient){  StringSet supportedVPoolUris=unManagedVolume.getSupportedVpoolUris();  String spoolName="(not set)";  if (unManagedVolume.getStoragePoolUri() != null) {    StoragePool spool=dbClient.queryObject(StoragePool.class,unManagedVolume.getStoragePoolUri());    if (spool != null) {      spoolName=spool.getLabel();    }  }  if (null == supportedVPoolUris || supportedVPoolUris.isEmpty()) {    if (isVplexVolume(unManagedVolume)) {      throw APIException.internalServerErrors.noMatchingVplexVirtualPool(unManagedVolume.getLabel(),unManagedVolume.getId());    }    throw APIException.internalServerErrors.storagePoolNotMatchingVirtualPoolNicer(spoolName,VOLUME_TEXT,unManagedVolume.getLabel());  }  VirtualPool vpool=dbClient.queryObject(VirtualPool.class,vpoolUri);  if (!supportedVPoolUris.contains(vpoolUri.toString())) {    String vpoolName=vpool != null ? vpool.getLabel() : vpoolUri.toString();    List<VirtualPool> supportedVpools=dbClient.queryObject(VirtualPool.class,Collections2.transform(supportedVPoolUris,CommonTransformerFunctions.FCTN_STRING_TO_URI));    String vpoolsString=null;    if (supportedVpools != null && !supportedVpools.isEmpty()) {      List<String> supportedVpoolNames=new ArrayList<String>();      for (      VirtualPool svp : supportedVpools) {        supportedVpoolNames.add(svp.getLabel());      }      vpoolsString=Joiner.on(", ").join(supportedVpoolNames);    } else {      vpoolsString=Joiner.on(", ").join(supportedVPoolUris);    }    throw APIException.internalServerErrors.virtualPoolNotMatchingStoragePoolNicer(vpoolName,VOLUME_TEXT,unManagedVolume.getLabel(),vpoolsString);  }  if (VirtualPool.vPoolSpecifiesProtection(vpool)) {    String value=unManagedVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString());    if (FALSE.equalsIgnoreCase(value)) {      throw APIException.internalServerErrors.ingestNotAllowedNonRPVolume(vpool.getLabel(),unManagedVolume.getLabel());    }  }}  }
class C{  private void solve(long puzzle,int row,int col){  for (int ix=0; ix < pieces.length; ix++) {    Piece piece;    Shape[] list;    if ((piece=pieces[ix]) == null)     continue; else     list=pieces[ix].shapes(row,col);    for (    Shape shape : list) {      if ((shape.bitmap & puzzle) != 0)       continue;      long clone=puzzle | shape.bitmap;      int irow=row;      int icol=col / 2 + 1;      next:       while (irow < 10) {        while (icol < 5) {          if ((clone & MASK[irow][icol]) == 0)           break next;          icol++;        }        irow++;        icol=0;      }      Entry entry;      pieces[ix]=null;      entry=solution[depth++];      entry.row=row;      entry.col=col;      entry.shape=shape;      if (depth == 10)       solutions.add(serialize(solution)); else       solve(clone,irow,2 * icol + (irow % 2));      depth--;      pieces[ix]=piece;    }  }}  }
class C{  void cleanupOperation(double newValue,double oldValue){}  }
class C{  private static LambdaForm invokeHandleForm(MethodType mtype,boolean customized,int which){  boolean isCached;  if (!customized) {    mtype=mtype.basicType();    isCached=true;  } else {    isCached=false;  }  boolean isLinker, isGeneric;  String debugName;switch (which) {case MethodTypeForm.LF_EX_LINKER:    isLinker=true;  isGeneric=false;debugName="invokeExact_MT";break;case MethodTypeForm.LF_EX_INVOKER:isLinker=false;isGeneric=false;debugName="exactInvoker";break;case MethodTypeForm.LF_GEN_LINKER:isLinker=true;isGeneric=true;debugName="invoke_MT";break;case MethodTypeForm.LF_GEN_INVOKER:isLinker=false;isGeneric=true;debugName="invoker";break;default :throw new InternalError();}LambdaForm lform;if (isCached) {lform=mtype.form().cachedLambdaForm(which);if (lform != null) return lform;}final int THIS_MH=0;final int CALL_MH=THIS_MH + (isLinker ? 0 : 1);final int ARG_BASE=CALL_MH + 1;final int OUTARG_LIMIT=ARG_BASE + mtype.parameterCount();final int INARG_LIMIT=OUTARG_LIMIT + (isLinker && !customized ? 1 : 0);int nameCursor=OUTARG_LIMIT;final int MTYPE_ARG=customized ? -1 : nameCursor++;final int CHECK_TYPE=nameCursor++;final int CHECK_CUSTOM=(CUSTOMIZE_THRESHOLD >= 0) ? nameCursor++ : -1;final int LINKER_CALL=nameCursor++;MethodType invokerFormType=mtype.invokerType();if (isLinker) {if (!customized) invokerFormType=invokerFormType.appendParameterTypes(MemberName.class);} else {invokerFormType=invokerFormType.invokerType();}Name[] names=arguments(nameCursor - INARG_LIMIT,invokerFormType);assert (names.length == nameCursor) : Arrays.asList(mtype,customized,which,nameCursor,names.length);if (MTYPE_ARG >= INARG_LIMIT) {assert (names[MTYPE_ARG] == null);BoundMethodHandle.SpeciesData speciesData=BoundMethodHandle.speciesData_L();names[THIS_MH]=names[THIS_MH].withConstraint(speciesData);NamedFunction getter=speciesData.getterFunction(0);names[MTYPE_ARG]=new Name(getter,names[THIS_MH]);}MethodType outCallType=mtype.basicType();Object[] outArgs=Arrays.copyOfRange(names,CALL_MH,OUTARG_LIMIT,Object[].class);Object mtypeArg=(customized ? mtype : names[MTYPE_ARG]);if (!isGeneric) {names[CHECK_TYPE]=new Name(NF_checkExactType,names[CALL_MH],mtypeArg);} else {names[CHECK_TYPE]=new Name(NF_checkGenericType,names[CALL_MH],mtypeArg);outArgs[0]=names[CHECK_TYPE];}if (CHECK_CUSTOM != -1) {names[CHECK_CUSTOM]=new Name(NF_checkCustomized,outArgs[0]);}names[LINKER_CALL]=new Name(outCallType,outArgs);lform=new LambdaForm(debugName,INARG_LIMIT,names);if (isLinker) lform.compileToBytecode();if (isCached) lform=mtype.form().setCachedLambdaForm(which,lform);return lform;}  }
class C{  @Override public void addEjbReference(EjbRef ref){  Element refDescr;  List<Element> referenceDescriptors=getElements(WeblogicXmlTag.REFERENCE_DESCRIPTOR);  if (referenceDescriptors.isEmpty()) {    refDescr=new Element(WeblogicXmlTag.REFERENCE_DESCRIPTOR);    refDescr=addElement(getDescriptorType().getTagByName(WeblogicXmlTag.REFERENCE_DESCRIPTOR),refDescr,getRootElement());  } else {    refDescr=referenceDescriptors.get(0);  }  Element ejbRefElement=new Element(WeblogicXmlTag.EJB_REFERENCE_DESCRIPTION);  ejbRefElement.addContent(createNestedText(getDescriptorType().getTagByName(WeblogicXmlTag.EJB_REF_NAME),ref.getName()));  ejbRefElement.addContent(createNestedText(getDescriptorType().getTagByName(WeblogicXmlTag.JNDI_NAME),ref.getJndiName()));  addElement(getDescriptorType().getTagByName(WeblogicXmlTag.EJB_REFERENCE_DESCRIPTION),ejbRefElement,refDescr);}  }
class C{  private boolean areMethodModifiedCompatibile(JDiffMethod apiMethod,Method reflectedMethod){  if (((apiMethod.mModifier & Modifier.SYNCHRONIZED) == 0) && ((reflectedMethod.getModifiers() & Modifier.SYNCHRONIZED) != 0)) {    return false;  }  int mod1=reflectedMethod.getModifiers() & ~(Modifier.NATIVE | Modifier.SYNCHRONIZED);  int mod2=apiMethod.mModifier & ~(Modifier.NATIVE | Modifier.SYNCHRONIZED);  if ((mModifier & Modifier.FINAL) != 0) {    mod1&=~Modifier.FINAL;    mod2&=~Modifier.FINAL;  }  return mod1 == mod2;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.619 -0500",hash_original_method="F374B48EE0586B0F56A0A6BEC28E9201",hash_generated_method="81C50F436205C428E7EDDB5CEAEA2CA5") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onDataActivity(int direction){}  }
class C{  public static void registerDefaultAlgorithms(){  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_DSA,SignatureDSA.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_DSA_SHA256,SignatureDSA.SHA256.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1,SignatureBaseRSA.SignatureRSASHA1.class);  algorithmHash.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA1,IntegrityHmac.IntegrityHmacSHA1.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5,SignatureBaseRSA.SignatureRSAMD5.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_RIPEMD160,SignatureBaseRSA.SignatureRSARIPEMD160.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256,SignatureBaseRSA.SignatureRSASHA256.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA384,SignatureBaseRSA.SignatureRSASHA384.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA512,SignatureBaseRSA.SignatureRSASHA512.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA1,SignatureECDSA.SignatureECDSASHA1.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA256,SignatureECDSA.SignatureECDSASHA256.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA384,SignatureECDSA.SignatureECDSASHA384.class);  algorithmHash.put(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA512,SignatureECDSA.SignatureECDSASHA512.class);  algorithmHash.put(XMLSignature.ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5,IntegrityHmac.IntegrityHmacMD5.class);  algorithmHash.put(XMLSignature.ALGO_ID_MAC_HMAC_RIPEMD160,IntegrityHmac.IntegrityHmacRIPEMD160.class);  algorithmHash.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA256,IntegrityHmac.IntegrityHmacSHA256.class);  algorithmHash.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA384,IntegrityHmac.IntegrityHmacSHA384.class);  algorithmHash.put(XMLSignature.ALGO_ID_MAC_HMAC_SHA512,IntegrityHmac.IntegrityHmacSHA512.class);}  }
class C{  public void testBug3570() throws Exception {  String createTableQuery=" CREATE TABLE testBug3570(field_tinyint TINYINT,field_smallint SMALLINT,field_mediumint MEDIUMINT" + ",field_int INT,field_integer INTEGER,field_bigint BIGINT,field_real REAL,field_float FLOAT,field_decimal DECIMAL" + ",field_numeric NUMERIC,field_double DOUBLE,field_char CHAR(3),field_varchar VARCHAR(255),field_date DATE"+ ",field_time TIME,field_year YEAR,field_timestamp TIMESTAMP,field_datetime DATETIME,field_tinyblob TINYBLOB"+ ",field_blob BLOB,field_mediumblob MEDIUMBLOB,field_longblob LONGBLOB,field_tinytext TINYTEXT,field_text TEXT"+ ",field_mediumtext MEDIUMTEXT,field_longtext LONGTEXT,field_enum ENUM('1','2','3'),field_set SET('1','2','3'))";  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3570");    this.stmt.executeUpdate(createTableQuery);    ResultSet dbmdRs=this.conn.getMetaData().getColumns(this.conn.getCatalog(),null,"testBug3570","%");    this.rs=this.stmt.executeQuery("SELECT * FROM testBug3570");    ResultSetMetaData rsmd=this.rs.getMetaData();    while (dbmdRs.next()) {      String columnName=dbmdRs.getString(4);      int typeFromGetColumns=dbmdRs.getInt(5);      int typeFromRSMD=rsmd.getColumnType(this.rs.findColumn(columnName));      if (!"field_tinyblob".equals(columnName) && !"field_tinytext".equals(columnName)) {        assertTrue(columnName + " -> type from DBMD.getColumns(" + typeFromGetColumns+ ") != type from RSMD.getColumnType("+ typeFromRSMD+ ")",typeFromGetColumns == typeFromRSMD);      }    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3570");  }}  }
class C{  public void add(OMGrid grid){  add(OMGraphicUtil.createShape3D(grid,0,proj));}  }
class C{  public ExceptionHandlingProcessorDecorator(final Object processor){  super(processor);}  }
class C{  public static int dpToPixels(Activity context,int dp){  DisplayMetrics metrics=new DisplayMetrics();  context.getWindowManager().getDefaultDisplay().getMetrics(metrics);  return (int)((dp * metrics.density) + 0.5);}  }
class C{  public void absent(Name name){  newPrereq(Record.newRecord(name,Type.ANY,DClass.NONE,0));}  }
class C{  public void select(int index){  checkWidget();  if (index == -1) {    table.deselectAll();    text.setText("");    return;  }  if (0 <= index && index < table.getItemCount()) {    if (index != getSelectionIndex()) {      text.setText(table.getItem(index).getText());      text.selectAll();      table.select(index);      table.showSelection();    }  }}  }
class C{  @Override public DataTable sample(int newSize){  int rowCount=getRowNumber();  if (rowCount <= newSize) {    return this;  }  int[] sampledSelectedIndices=new int[rowCount];  for (int i=0; i < rowCount; ++i) {    sampledSelectedIndices[i]=i;  }  Random rng=new Random(0);  int swapIdx;  int tmpValue;  for (int i=0; i < rowCount; ++i) {    swapIdx=rng.nextInt(rowCount);    tmpValue=sampledSelectedIndices[swapIdx];    sampledSelectedIndices[swapIdx]=sampledSelectedIndices[i];    sampledSelectedIndices[i]=tmpValue;  }  DataTableView sampledDataTable=new DataTableView(this);  Vector<Integer> sampledSelectedIndicesVector=new Vector<Integer>(newSize);  for (int i=0; i < newSize; ++i) {    sampledSelectedIndicesVector.add(sampledSelectedIndices[i]);  }  sampledDataTable.setSelectedIndices(sampledSelectedIndicesVector);  return new SortedDataTableView(sampledDataTable,sortProvider);}  }
class C{  public void removeModule(final INaviModule module) throws CouldntDeleteException, CouldntSaveDataException {  Preconditions.checkNotNull(module,"IE00041: Module argument can not be null");  Preconditions.checkArgument(m_modules.contains(module),"IE00043: Module does not belong to this address space");  m_provider.removeModule(m_addressSpace,module);  m_modules.remove(module);  for (  final IAddressSpaceContentListener listener : m_listeners) {    try {      listener.removedModule(m_addressSpace,module);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_addressSpace.getConfiguration().updateModificationDate();}  }
class C{  public static void threadedPutObject() throws Exception {  println("Test: threadedPutObject");  Thread[] threads=new Thread[7];  for (int i=0; i < 7; i++) {    threads[i]=new Thread(new PutObjectRunnable(client,bucketName,createFile(17 * MB)));    println("[MAIN] thread",i,"is created");  }  for (int i=0; i < 7; i++) {    threads[i].start();    println("[MAIN] thread",i,"is started");  }  println("[MAIN] waiting for threads complete");  for (int i=0; i < 7; i++) {    threads[i].join();  }  println("[MAIN] all threads are completed");}  }
class C{  public void seek(long seekBytes) throws FileNotFoundException, IOException, InterruptedException {  try {    if (fileInput != null) {      fileInput.close();    }    fileInput=new FileInputStream(file);    fileChannel=fileInput.getChannel();    fileChannel.position(seekBytes);  } catch (  ClosedByInterruptException e) {    throw new InterruptedException();  }  bufferedInput=new BufferedInputStream(fileInput,size);  dataInput=new DataInputStream(bufferedInput);  offset=seekBytes;  markOffset=-1;  available();}  }
class C{  public RangeConditionBuilder includeLower(Boolean includeLower){  this.includeLower=includeLower;  return this;}  }
class C{  void modificationTime(String fileName) throws IOException {  send("MDTM " + fileName);  readCode(213);}  }
class C{  @Deprecated OffsetInfo(){}  }
class C{  private void showNotification(int id,NotificationCompat.Builder builder){  ((NotificationManager)getContext().getSystemService(Context.NOTIFICATION_SERVICE)).notify(id,builder.build());}  }
class C{  public boolean matchName(String regexp) throws IllegalArgumentException {  if (StringUtil.isEmpty(regexp)) {    throw new IllegalArgumentException("Can't perform regular expression since the given input is empty. Check the Method body velocity code: regexp='" + regexp + "'");  }  return name.matches(regexp);}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode17.class,args);}  }
class C{  private void expandPsiMinusPsiSum(Vec input,double sum,Vec output){  double psiSum=FastMath.digamma(sum);  for (int i=0; i < input.length(); i++)   output.set(i,FastMath.digamma(input.get(i)) - psiSum);}  }
class C{  public GmPublishingPriority(){}  }
class C{  public Matrix4f arcball(float radius,Vector3fc center,float angleX,float angleY){  return arcball(radius,center.x(),center.y(),center.z(),angleX,angleY,this);}  }
class C{  public void updateObject(int columnIndex,Object x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateObject(columnIndex,x);}  }
class C{  public void addContextDecl(String altLabel,Decl d){  CodeBlockForOuterMostAlt alt=d.getOuterMostAltCodeBlock();  if (alt != null && altLabelCtxs != null) {    AltLabelStructDecl altCtx=altLabelCtxs.get(altLabel);    if (altCtx != null) {      altCtx.addDecl(d);      return;    }  }  ruleCtx.addDecl(d);}  }
class C{  public static ProcessBackgroundImage lookupBackgroundImage(ExecutionUnit process){  return (ProcessBackgroundImage)process.getUserData(KEY_PROCESS_BACKGROUND_IMAGE);}  }
class C{  @Before public void twoFactorTestSetup() throws Exception {  twoFactorData=new TwoFactorTestData();  testIdentity.setTwoFactorSecret(twoFactorData.testSecret);  twoFactorData.testToken=GetMyPrivateKey.makeLoginTokenString(testIdentity,twoFactorData.redirectUrl,null);  twoFactorData.testSignature=TwoFactorSigningService.signToken(twoFactorData.testToken);  Base32 codec=new Base32();  byte[] decodedKey=codec.decode(twoFactorData.testSecret);  long t=(System.currentTimeMillis() / 1000L) / 30L;  twoFactorData.validTimeCode=Integer.toString(TwoFactorCodeChecker.computeHash(decodedKey,t));  twoFactorData.backupCode="123456789";  byte[] salt=CryptoForBackupCodes.randSaltGen();  testIdentity.setBackup(0,CryptoForBackupCodes.digest(twoFactorData.backupCode,salt));  manager.identityDao.update(testIdentity);  manager.commitTransaction();}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public static PrintWriter newPrintWriter(File file,String charset) throws IOException {  return new GroovyPrintWriter(newWriter(file,charset));}  }
class C{  @Override public void visitVertical(Divider<T> s){  for (  Node<T> n : s.previousNodes()) {    n.r.height+=(s.r.getY() - n.r.getMaxY());    n.r.height=Math.ceil(n.r.height);  }  for (  Node<T> n : s.nextNodes()) {    double delta=s.r.getMaxY() - n.r.getY();    n.r.y+=delta;    n.r.height-=delta;  }  Rectangle2D.Double surfaceArea=surface.getArea();  for (  Divider<T> d : surface.getVerticalDividers()) {    if (d.r.x > s.r.x && d.r.x < s.r.getMaxX() && (surface.getIsInit() || (d.r.y != s.r.getMaxY()) && (d.r.getMaxY() != s.r.y)) && ((d.r.y >= s.r.y - 2 && d.r.y <= s.r.getMaxY() + 2) || (d.r.getMaxY() >= s.r.y - 2 && d.r.getMaxY() < s.r.getMaxY() + 2))) {      if (d.r.y >= s.r.y - 2 && d.r.y <= s.r.getMaxY() + 2) {        d.r.y=s.r.getMaxY();        Node<T> distal=d.getMostDistalNode();        d.r.height=Math.min(surfaceArea.height,distal.r.getMaxY() - d.r.y);        s.addPerpendicularJoin(d,false);      } else       if (d.r.getMaxY() >= s.r.y - 2 && d.r.getMaxY() < s.r.getMaxY() + 2) {        d.r.height=Math.min(surfaceArea.height,s.r.y - d.r.y);        s.addPerpendicularJoin(d,true);      }    }  }  for (  Divider<T> d : surface.getVerticalDividers()) {    d.r.y=d.getMostProximalNode().r.y;    d.r.height=Math.min(surfaceArea.height,d.getMostDistalNode().r.getMaxY() - d.r.y);  }}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") public IgniteInternalFuture<GridNearTxPrepareResponse> prepareAsyncLocal(@Nullable Collection<IgniteTxEntry> reads,@Nullable Collection<IgniteTxEntry> writes,Map<UUID,Collection<UUID>> txNodes,boolean last){  long timeout=remainingTime();  if (state() != PREPARING) {    if (timeout == -1)     return new GridFinishedFuture<>(new IgniteTxTimeoutCheckedException("Transaction timed out: " + this));    setRollbackOnly();    return new GridFinishedFuture<>(new IgniteCheckedException("Invalid transaction state for prepare [state=" + state() + ", tx="+ this+ ']'));  }  if (timeout == -1)   return new GridFinishedFuture<>(timeoutException());  init();  GridDhtTxPrepareFuture fut=new GridDhtTxPrepareFuture(cctx,this,timeout,IgniteUuid.randomUuid(),Collections.<IgniteTxKey,GridCacheVersion>emptyMap(),last,needReturnValue() && implicit());  try {    optimisticLockEntries=(serializable() && optimistic()) ? F.concat(false,writes,reads) : writes;    userPrepare();    cctx.mvcc().addFuture(fut);    if (isSystemInvalidate())     fut.complete(); else     fut.prepare(reads,writes,txNodes);  } catch (  IgniteTxTimeoutCheckedException|IgniteTxOptimisticCheckedException e) {    fut.onError(e);  }catch (  IgniteCheckedException e) {    setRollbackOnly();    fut.onError(new IgniteTxRollbackCheckedException("Failed to prepare transaction: " + this,e));    try {      rollback();    } catch (    IgniteTxOptimisticCheckedException e1) {      if (log.isDebugEnabled())       log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e="+ e1+ ']');      fut.onError(e);    }catch (    IgniteCheckedException e1) {      U.error(log,"Failed to rollback transaction: " + this,e1);    }  }  return chainOnePhasePrepare(fut);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  @Override public int hashCode(){  int retval=permission.hashCode();  if (name != null)   retval^=name.hashCode();  if (action != null)   retval^=action.hashCode();  return retval;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Class toClass(CtClass clazz) throws CannotCompileException {  return toClass(clazz,getClassLoader());}  }
class C{  public void toEPL(StringWriter writer){  writer.write(name);  writer.write(' ');  writer.write(type);  if (array) {    if (primitiveArray) {      writer.write("[primitive]");    } else {      writer.write("[]");    }  }}  }
class C{  public static List<IpInterface> queryIpInterfaces(DbClient dbClient,URI id){  List<IpInterface> ipInterfaces=new ArrayList<IpInterface>();  URIQueryResultList ipInterfaceUris=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(id,IpInterface.class,"host"),ipInterfaceUris);  if (ipInterfaceUris.iterator().hasNext()) {    for (    URI ipInterfaceUri : ipInterfaceUris) {      IpInterface ipInterface=dbClient.queryObject(IpInterface.class,ipInterfaceUri);      if (ipInterface != null && !ipInterface.getInactive()) {        ipInterfaces.add(ipInterface);      }    }  }  return ipInterfaces;}  }
class C{  private JsonWriter close(JsonScope empty,JsonScope nonempty,String closeBracket) throws IOException {  JsonScope context=peek();  if (context != nonempty && context != empty) {    throw new IllegalStateException("Nesting problem: " + stack);  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.write(closeBracket);  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public List<T> readAll(){  return find("FROM " + entityClass.getName());}  }
class C{  public static boolean checkArgs(String[] args){  if (args.length < 5) {    return false;  }  if (!(args[0].compareToIgnoreCase("-all") == 0 || args[0].compareToIgnoreCase("-trn") == 0 || args[0].compareToIgnoreCase("-tst") == 0) || args[0].compareToIgnoreCase("-cont") == 0) {    return false;  }  if (args[1].compareToIgnoreCase("-d") != 0) {    return false;  }  if (args[3].compareToIgnoreCase("-o") != 0)   return false;  return true;}  }
class C{  public void addLayer(Layer layer){  addLayer(layer,0,_map.maxZoomLevel());}  }
class C{  public void tagDefineQuickTimeMovie(int id,String filename) throws IOException {  if (tags != null) {    tags.tagDefineQuickTimeMovie(id,filename);  }}  }
class C{  public static PublicKey fromHexString(final String hex){  try {    return new PublicKey(HexEncoder.getBytes(hex));  } catch (  final IllegalArgumentException e) {    throw new CryptoException(e);  }}  }
class C{  public void removeBookmarkedURL(String bookmarkURL) throws XMPPException {  retrieveBookmarks();  Iterator<BookmarkedURL> it=bookmarks.getBookmarkedURLS().iterator();  while (it.hasNext()) {    BookmarkedURL bookmark=it.next();    if (bookmark.getURL().equalsIgnoreCase(bookmarkURL)) {      if (bookmark.isShared()) {        throw new IllegalArgumentException("Cannot delete a shared bookmark.");      }      it.remove();      privateDataManager.setPrivateData(bookmarks);      return;    }  }}  }
class C{  void notifyPeekAndTakeThreads(){}  }
class C{  private String queryForSelection(){  return Utils.getHideDeclinedEvents(mContext) ? EVENT_SELECTION_HIDE_DECLINED : EVENT_SELECTION;}  }
class C{  public <T>Class<? extends T> findClass(String cname,Class<T> expectedType,String... subpackages){  if (subpackages == null || subpackages.length == 0 || subpackages == packages) {    subpackages=packages;    String c=classNameCache.get(cname);    if (c != null) {      try {        return Class.forName(c,true,classLoader).asSubclass(expectedType);      } catch (      ClassNotFoundException e) {        log.error("Unable to load cached class-name :  " + c + " for shortname : "+ cname+ e);      }    }  }  Class<? extends T> clazz=null;  try {    final Matcher m=legacyAnalysisPattern.matcher(cname);    if (m.matches()) {      final String name=m.group(4);      log.trace("Trying to load class from analysis SPI using name='{}'",name);      try {        if (CharFilterFactory.class.isAssignableFrom(expectedType)) {          return clazz=CharFilterFactory.lookupClass(name).asSubclass(expectedType);        } else         if (TokenizerFactory.class.isAssignableFrom(expectedType)) {          return clazz=TokenizerFactory.lookupClass(name).asSubclass(expectedType);        } else         if (TokenFilterFactory.class.isAssignableFrom(expectedType)) {          return clazz=TokenFilterFactory.lookupClass(name).asSubclass(expectedType);        } else {          log.warn("'{}' looks like an analysis factory, but caller requested different class type: {}",cname,expectedType.getName());        }      } catch (      IllegalArgumentException ex) {      }    }    try {      return clazz=Class.forName(cname,true,classLoader).asSubclass(expectedType);    } catch (    ClassNotFoundException e) {      String newName=cname;      if (newName.startsWith(project)) {        newName=cname.substring(project.length() + 1);      }      for (      String subpackage : subpackages) {        try {          String name=base + '.' + subpackage+ newName;          log.trace("Trying class name " + name);          return clazz=Class.forName(name,true,classLoader).asSubclass(expectedType);        } catch (        ClassNotFoundException e1) {        }      }      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error loading class '" + cname + "'",e);    }  }  finally {    if (clazz != null) {      if (clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() && !cname.equals(clazz.getName()) && (subpackages.length == 0 || subpackages == packages)) {        classNameCache.put(cname,clazz.getName());      }      if (clazz.isAnnotationPresent(Deprecated.class)) {        log.warn("Solr loaded a deprecated plugin/analysis class [{}]. Please consult documentation how to replace it accordingly.",cname);      }    }  }}  }
class C{  public AbstractMRMessage createOutPacket(){  int cmdlen=3;  byte cmdcode=0x03;  byte addrhi=0x00;  byte addrlo=0x00;  byte settinghi=0x00;  byte settinglo=0x00;  boolean bulk_message=true;  int c=0;  while (c < outputbitsPerCard) {    if ((outputType[c] != AcelaNode.ONOFF) || (outputSpecial[c] != 0)) {      bulk_message=false;    }    c++;  }  if (!bulk_message) {    c=0;    boolean foundfirst=false;    boolean foundanother=false;    while (c < outputbitsPerCard) {      if (outputNeedToSend[c] && foundfirst) {        foundanother=true;      }      if (outputNeedToSend[c] && !foundfirst) {        foundfirst=true;      }      c++;    }    if (foundanother) {      setMustSend();    }  }  Integer tempint=Integer.valueOf(startingOutputAddress);  addrlo=tempint.byteValue();  if (bulk_message) {    if (nodeType == TB) {      cmdlen=4;      cmdcode=0x07;      int tempsettings=(outputArray[3] ^ outputWired[3]) * 8 + (outputArray[2] ^ outputWired[2]) * 4 + (outputArray[1] ^ outputWired[1]) * 2 + (outputArray[0] ^ outputWired[0]) * 1;      settinglo=(byte)(tempsettings);    }    if (nodeType == D8) {      cmdlen=4;      cmdcode=0x08;      int tempsettings=(outputArray[3] ^ outputWired[3]) * 8 + (outputArray[2] ^ outputWired[2]) * 4 + (outputArray[1] ^ outputWired[1]) * 2 + (outputArray[0] ^ outputWired[0]) * 1;      tempsettings=(outputArray[7] ^ outputWired[7]) * 128 + (outputArray[6] ^ outputWired[6]) * 64 + (outputArray[5] ^ outputWired[5]) * 32 + (outputArray[4] ^ outputWired[4]) * 16 + tempsettings;      settinglo=(byte)(tempsettings);    }    if ((nodeType == WM) || (nodeType == SY)) {      cmdlen=3;      cmdcode=0x01;    }    if (nodeType == SC) {      cmdlen=3;      cmdcode=0x01;    }    if ((nodeType == SM) || (nodeType == SW) || (nodeType == YM)) {      cmdlen=5;      cmdcode=0x09;      int tempsettings=(outputArray[3] ^ outputWired[3]) * 8 + (outputArray[2] ^ outputWired[2]) * 4 + (outputArray[1] ^ outputWired[1]) * 2 + (outputArray[0] ^ outputWired[0]) * 1;      tempsettings=(outputArray[7] ^ outputWired[7]) * 128 + (outputArray[6] ^ outputWired[6]) * 64 + (outputArray[5] ^ outputWired[5]) * 32 + (outputArray[4] ^ outputWired[4]) * 16 + tempsettings;      settinglo=(byte)(tempsettings);      int tempsettings2=(outputArray[11] ^ outputWired[11]) * 8 + (outputArray[10] ^ outputWired[10]) * 4 + (outputArray[9] ^ outputWired[9]) * 2 + (outputArray[8] ^ outputWired[8]) * 1;      tempsettings2=(outputArray[15] ^ outputWired[15]) * 128 + (outputArray[14] ^ outputWired[14]) * 64 + (outputArray[13] ^ outputWired[13]) * 32 + (outputArray[12] ^ outputWired[12]) * 16 + tempsettings2;      settinghi=(byte)(tempsettings2);    }  } else {    c=0;    boolean foundsomething=false;    while ((c < outputbitsPerCard) && !foundsomething) {      if (outputNeedToSend[c]) {        Integer tempaddr=Integer.valueOf(c + addrlo);        addrlo=tempaddr.byteValue();        outputNeedToSend[c]=false;        foundsomething=true;        if (outputSpecial[c] == 0) {          if (outputType[c] == AcelaNode.ONOFF) {            int tempcommand=(outputArray[c] ^ outputWired[c]);            if (tempcommand == 0) {              tempcommand=2;            }            cmdcode=(byte)(tempcommand);            cmdlen=3;          }          if (outputType[c] == AcelaNode.BLINK) {            int tempcommand=outputArray[c];            if ((tempcommand == 1) && (outputWired[c] == 1)) {              tempcommand=5;            }            if ((tempcommand == 1) && (outputWired[c] == 0)) {              tempcommand=6;            }            if (tempcommand == 0) {              tempcommand=2;            }            cmdcode=(byte)(tempcommand);            if (cmdcode == 0x02) {              cmdlen=3;            } else {              cmdlen=4;              settinglo=(byte)outputLength[c];            }          }          if (outputType[c] == AcelaNode.PULSE) {            int tempcommand=outputArray[c];            if ((tempcommand == 1) && (outputWired[c] == 1)) {              tempcommand=4;            }            if ((tempcommand == 1) && (outputWired[c] == 0)) {              tempcommand=3;            }            if (tempcommand == 0) {              tempcommand=2;            }            cmdcode=(byte)(tempcommand);            if (cmdcode == 0x02) {              cmdlen=3;            } else {              cmdlen=4;              settinglo=(byte)outputLength[c];            }          }        } else {switch (outputSignalHeadType[c]) {case DOUBLE:{switch (outputSpecial[c]) {case 1:                cmdcode=0x0c;              settinglo=0x01;            break;case 2:          cmdcode=0x0c;        settinglo=0x02;      break;case 3:    cmdcode=0x0c;  settinglo=0x08;break;case 4:cmdcode=0x0c;settinglo=0x08;break;case 5:cmdcode=0x0c;settinglo=0x04;break;case 6:cmdcode=0x0c;settinglo=0x08;break;case 7:cmdcode=0x0c;settinglo=0x00;break;default :cmdcode=0x0c;settinglo=0x03;break;}break;}case TRIPLE:{switch (outputSpecial[c]) {case 1:cmdcode=0x0d;settinglo=0x01;break;case 2:cmdcode=0x0d;settinglo=0x02;break;case 3:cmdcode=0x0d;settinglo=0x04;break;case 4:cmdcode=0x0d;settinglo=0x08;break;case 5:cmdcode=0x0d;settinglo=0x10;break;case 6:cmdcode=0x0d;settinglo=0x20;break;case 7:cmdcode=0x0d;settinglo=0x00;break;default :cmdcode=0x0d;settinglo=0x03;break;}break;}case BPOLAR:{switch (outputSpecial[c]) {case 1:cmdcode=0x0c;settinglo=0x01;break;case 2:cmdcode=0x0c;settinglo=0x02;break;case 3:cmdcode=0x0c;settinglo=0x10;break;case 4:cmdcode=0x0c;settinglo=0x20;break;case 5:cmdcode=0x0c;settinglo=0x04;break;case 6:cmdcode=0x0c;settinglo=0x08;break;case 7:cmdcode=0x0c;settinglo=0x00;break;default :cmdcode=0x0c;settinglo=0x03;break;}break;}case WIGWAG:{switch (outputSpecial[c]) {case 1:cmdcode=0x0c;settinglo=0x0B;break;case 2:cmdcode=0x0c;settinglo=0x0B;break;case 3:cmdcode=0x0c;settinglo=0x0B;break;case 4:cmdcode=0x0c;settinglo=0x0B;break;case 5:cmdcode=0x0c;settinglo=0x0B;break;case 6:cmdcode=0x0c;settinglo=0x0B;break;case 7:cmdcode=0x0c;settinglo=0x00;break;default :cmdcode=0x0c;settinglo=0x0F;break;}break;}default :{switch (outputSpecial[c]) {case 1:cmdcode=0x0d;settinglo=0x01;break;case 2:cmdcode=0x0d;settinglo=0x03;break;case 3:cmdcode=0x0d;settinglo=0x04;break;case 4:cmdcode=0x0d;settinglo=0x08;break;case 5:cmdcode=0x0d;settinglo=0x10;break;case 6:cmdcode=0x0d;settinglo=0x30;break;case 7:cmdcode=0x0d;settinglo=0x00;break;default :cmdcode=0x0d;settinglo=0x03;break;}}}cmdlen=4;}}c++;}}AcelaMessage m=new AcelaMessage(cmdlen);m.setElement(0,cmdcode);m.setElement(1,addrhi);m.setElement(2,addrlo);if (cmdlen > 3) {if (cmdlen > 4) {m.setElement(3,settinghi);} else {m.setElement(3,settinglo);}}if (cmdlen > 4) {m.setElement(4,settinglo);}m.setBinary(true);return m;}  }
class C{  public int lastIndexOfFromTo(long element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  long[] theElements=elements;  for (int i=to; i >= from; i--) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public EncodingWriter create(){  return _writer;}  }
class C{  public static double rRRSEfitness(boolean useTrainingData,GEPIndividual ind){  double rRRSE=rRRSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + rRRSE);}  }
class C{  public EnhancedTextField(String textWhenNotFocused,Icon icon){  super();  if (icon != null) {    this.icon=icon;  } else {    this.icon=IconManager.EMPTY_IMAGE;  }  if (textWhenNotFocused != null) {    this.textWhenNotFocused=textWhenNotFocused;  } else {    this.textWhenNotFocused="";  }  if (StringUtils.isNotBlank(textWhenNotFocused)) {    this.addFocusListener(this);  }  Border border=UIManager.getBorder("TextField.border");  JTextField dummy=new JTextField();  this.dummyInsets=border.getBorderInsets(dummy);}  }
class C{  public void stop(){  log.fine("PosKeyboardFocusManager.stop - " + m_timer);  if (m_timer != null)   m_timer.stop();}  }
class C{  public InputTab(IMessageEditorController controller,boolean editable){  this.editable=editable;  guiContainer=new JTabbedPane();  sourceViewer=new UISourceViewer();  sourceViewer.setListener(listeners);  guiContainer.addTab("Source Code",sourceViewer);  rawEditor=new UIRawEditor(callbacks,editable);  rawEditor.setListener(listeners);  guiContainer.addTab(samlParamtername,rawEditor.getComponent());  samlAttacker=new UISAMLAttacker();  samlAttacker.setListeners(listeners);  guiContainer.addTab("Attacker",samlAttacker);}  }
class C{  public void handleDOMCharacterDataModified(MutationEvent evt){  Node childNode=(Node)evt.getTarget();  if (isParentDisplayed(childNode)) {    laidoutText=null;  }}  }
class C{  public void removeFromHtml() throws IOException {  byte[] removeFromHtml=_context.configData.removeFromHtml;  if (removeFromHtml == null || removeFromHtml.length == 0 || (!_isHtml))   return;  getUngzipedResponseContent();  if (_responseStatus == 200 && _bytes != null && _bytes.length > removeFromHtml.length) {    ByteArrayOutputStream baos=null;    int bytesOffset=0;    int removeLen=removeFromHtml.length;    for (int i=0; i + removeLen < _bytes.length; i++) {      if (_bytes[i] == removeFromHtml[0]) {        boolean found=true;        for (int j=1; j < removeLen; j++) {          if (_bytes[i + j] != removeFromHtml[j]) {            found=false;            break;          }        }        if (found) {          int len=i - bytesOffset;          if (baos == null)           baos=new ByteArrayOutputStream(_bytes.length);          baos.write(_bytes,bytesOffset,len);          bytesOffset+=len;          bytesOffset+=removeLen;          i=bytesOffset;        }        continue;      }    }    if (baos != null) {      int len=_bytes.length - bytesOffset;      baos.write(_bytes,bytesOffset,len);      bytesOffset+=len;      _bytes=baos.toByteArray();      if (_isGziped || _isDeflated) {        try {          ByteArrayOutputStream oByteArr=new ByteArrayOutputStream(_bytes.length * 3 / 4);          OutputStream oGzip=new GZIPOutputStream(oByteArr);          oGzip.write(_bytes);          oGzip.close();          _gzipedBytes=oByteArr.toByteArray();          _isGziped=true;          _isDeflated=false;        } catch (        IOException exc) {          _gzipedBytes=null;          _isGziped=false;          _isDeflated=false;          throw exc;        }      }    }  }  if (_context.isRouter && _bytes != null && _bytes.length > 0) {    OutputStream out=_context.response.getOutputStream();    if (_isGziped || _isDeflated)     out.write(_gzipedBytes); else     out.write(_bytes);  }}  }
class C{  public CoderResult unmappableResult(){  assert (error == null);  return CoderResult.unmappableForLength(isPair ? 2 : 1);}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,filterRegion,filterRegion,ctx);  Color color=CSSUtilities.convertFloodColor(filterElement,ctx);  Filter filter=new FloodRable8Bit(primitiveRegion,color);  handleColorInterpolationFilters(filter,filterElement);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public static PeriodFormatter alternateExtendedWithWeeks(){  if (cAlternateExtendedWihWeeks == null) {    cAlternateExtendedWihWeeks=new PeriodFormatterBuilder().appendLiteral("P").printZeroAlways().minimumPrintedDigits(4).appendYears().appendSeparator("-").minimumPrintedDigits(2).appendPrefix("W").appendWeeks().appendSeparator("-").appendDays().appendSeparatorIfFieldsAfter("T").appendHours().appendSeparator(":").appendMinutes().appendSeparator(":").appendSecondsWithOptionalMillis().toFormatter();  }  return cAlternateExtendedWihWeeks;}  }
class C{  @Override public void run(){  final Map<String,Object> authInfo=Collections.singletonMap(ResourceResolverFactory.SUBSERVICE,(Object)"my-service-account");  ResourceResolver resourceResolver=null;  try {    resourceResolver=resourceResolverFactory.getServiceResourceResolver(authInfo);    Resource resource=resourceResolver.getResource(path);    if (resource != null) {      ValueMap properties=resource.getValueMap();    }  } catch (  LoginException e) {    log.error("Could not get service resolver",e);  } finally {    if (resourceResolver != null) {      resourceResolver.close();    }  }}  }
class C{  public PrototypeSize(String prototype){  this.prototype=prototype;}  }
class C{  public void invalidate(){  status=INVALID;}  }
class C{  public void addPlottable(Plottable plottable){  mAlias=plottable.getAlias();  mID=plottable.getID();  mPlottables.add(plottable);  while (mPlottables.size() > mMaxHistory) {    mPlottables.remove(mPlottables.first());  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public int nextInt(){  return nextIntFromTo((int)Math.round(min),(int)Math.round(max));}  }
class C{  public int indexX(int k){  int i=Arrays.binarySearch(this.xIndex,k);  if (i >= 0) {    return i;  } else {    return -1 * i - 2;  }}  }
class C{  @Override public boolean supportsTransactions(){  debugCodeCall("supportsTransactions");  return true;}  }
class C{  public boolean isStandardModule(String moduleName){  ModuleNode moduleNode=ResourceHelper.getModuleNode(moduleName);  if (moduleNode == null) {    return false;  }  return !ResourceHelper.isFromUserModule(moduleNode);}  }
class C{  @Override public synchronized void clear() throws IOException {  this.index.clear();  this.free.clear();  this.file.close();  this.file=null;  FileUtils.deletedelete(this.heapFile);  super.deleteFingerprint();  this.file=new CachedFileWriter(this.heapFile);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___MULTIPLICITY_1:    return multiplicity_1 != null && !multiplicity_1.isEmpty();case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___ROLE_NAME_1:  return ROLE_NAME_1_EDEFAULT == null ? roleName_1 != null : !ROLE_NAME_1_EDEFAULT.equals(roleName_1);}return super.eIsSet(featureID);}  }
class C{  public static Class toReturnType(SchemaItem item){  if (item instanceof SchemaItemAttribute) {    SchemaItemAttribute att=(SchemaItemAttribute)item;    return SchemaUtil.toReturnType(att.getXsSimpleType(),att.getTypeName(),null);  } else   if (item instanceof SchemaElementSimple) {    SchemaElementSimple simple=(SchemaElementSimple)item;    Class returnType=SchemaUtil.toReturnType(simple.getXsSimpleType(),simple.getTypeName(),simple.getFractionDigits());    if (simple.isArray()) {      returnType=Array.newInstance(returnType,0).getClass();    }    return returnType;  } else   if (item instanceof SchemaElementComplex) {    SchemaElementComplex complex=(SchemaElementComplex)item;    if (complex.getOptionalSimpleType() != null) {      return SchemaUtil.toReturnType(complex.getOptionalSimpleType(),complex.getOptionalSimpleTypeName(),null);    }    if (complex.isArray()) {      return NodeList.class;    }    return Node.class;  } else {    throw new PropertyAccessException("Invalid schema return type:" + item);  }}  }
class C{  public static boolean isBlocked(final BreakpointManager manager,final BreakpointAddress address){  return (manager.hasBreakpoint(BreakpointType.REGULAR,address) && (manager.getBreakpointStatus(address,BreakpointType.REGULAR) != BreakpointStatus.BREAKPOINT_DISABLED)) || manager.hasBreakpoint(BreakpointType.ECHO,address) || manager.hasBreakpoint(BreakpointType.STEP,address);}  }
class C{  public static void printUnknownFieldValue(final int tag,final Object value,final Appendable output) throws IOException {  printUnknownFieldValue(tag,value,new TextGenerator(output));}  }
class C{  public static double fanOut(final int frontierSize,final long nedges){  return ((int)(nedges * 10d / frontierSize)) / 10d;}  }
class C{  public static int secondaryHash(Object key){  return secondaryHash(key.hashCode());}  }
class C{  public static void addAllJars(File folder,List<File> files){  if (folder.isDirectory()) {    for (    File file : folder.listFiles()) {      if (file.isFile() && file.getName().endsWith(".jar")) {        files.add(file);      } else       if (file.isDirectory()) {        addAllJars(file,files);      }    }  }}  }
class C{  private RefactoringStatus checkCanCreateIntermediaryMethod() throws JavaModelException {  List<ITypeBinding> parameterBindings=new ArrayList<ITypeBinding>();  if (!isStaticTarget())   parameterBindings.add(fIntermediaryFirstParameterType);  parameterBindings.addAll(Arrays.asList(fTargetMethodBinding.getParameterTypes()));  return Checks.checkMethodInType(fIntermediaryTypeBinding,fIntermediaryMethodName,parameterBindings.toArray(new ITypeBinding[parameterBindings.size()]));}  }
class C{  public int size(){  return m.size();}  }
class C{  static public void saveBytes(OutputStream output,byte buffer[]){  try {    output.write(buffer);    output.flush();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void showOfflineAccessMessage(){  try {    animateLayouts(findViewById(R.id.offline_access_panel));  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public void drawText(Graphics2D g,TextLayout textLayout){  mHasText=true;  checkDrawingMode(g);}  }
class C{  public final void skipUntil(final double when){  this.skipUntil=when;}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void reset(){  fontList.clear();  colorList.clear();  document.setLength(0);  lastWasControlWord=false;  lastFontIndex=0;  lastFGIndex=0;  lastBold=false;  lastItalic=false;  lastFontSize=DEFAULT_FONT_SIZE;  screenRes=Toolkit.getDefaultToolkit().getScreenResolution();}  }
class C{  public boolean add(symbol sym) throws internal_error {  Object previous;  not_null(sym);  previous=_all.put(sym.name(),sym);  return previous == null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.788 -0500",hash_original_method="6AE2D5DA6C5F460EE4B46BC785279C7C",hash_generated_method="07B2A188896D620B2AEF2081BDEE7294") static CommandDetails retrieveCommandDetails(ComprehensionTlv ctlv) throws ResultException {  CommandDetails cmdDet=new CommandDetails();  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  try {    cmdDet.compRequired=ctlv.isComprehensionRequired();    cmdDet.commandNumber=rawValue[valueIndex] & 0xff;    cmdDet.typeOfCommand=rawValue[valueIndex + 1] & 0xff;    cmdDet.commandQualifier=rawValue[valueIndex + 2] & 0xff;    return cmdDet;  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  if (savedInstanceState != null) {    mLogTextView.setText(Html.fromHtml(savedInstanceState.getString(LOG_TEXT_KEY)));  }}  }
class C{  private double restore(int d,double val){  d=(mean.length == 1) ? 0 : d;  return val * mean[d];}  }
class C{  public OrganizationAlreadyBannedException(final String message){  super(message);}  }
class C{  public String asi(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  Integer M_ASI_ID=(Integer)value;  if (M_ASI_ID == null || M_ASI_ID.intValue() == 0)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  int M_Warehouse_ID=Env.getContextAsInt(ctx,WindowNo,"M_Warehouse_ID");  int M_Locator_ID=Env.getContextAsInt(ctx,WindowNo,"M_Locator_ID");  log.fine("M_Product_ID=" + M_Product_ID + ", M_ASI_ID="+ M_ASI_ID+ " - M_Warehouse_ID="+ M_Warehouse_ID+ ", M_Locator_ID="+ M_Locator_ID);  int M_AttributeSetInstance_ID=Env.getContextAsInt(Env.getCtx(),WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID");  if (M_ASI_ID.intValue() == M_AttributeSetInstance_ID) {    int selectedM_Locator_ID=Env.getContextAsInt(Env.getCtx(),WindowNo,Env.TAB_INFO,"M_Locator_ID");    if (selectedM_Locator_ID != 0) {      log.fine("Selected M_Locator_ID=" + selectedM_Locator_ID);      mTab.setValue("M_Locator_ID",new Integer(selectedM_Locator_ID));    }  }  return "";}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator<?> it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,DateTimeZone zone){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,0,zone);}  }
class C{  public void printStackTrace(PrintWriter writer){  super.printStackTrace(writer);  if (this.encapsulatedException != null) {    writer.println("*** Nested Exception:");    this.encapsulatedException.printStackTrace(writer);  }}  }
class C{  public synchronized void newPixels(int x,int y,int w,int h){  newPixels(x,y,w,h,true);}  }
class C{  public static InputStream checkGZIP(InputStream is) throws IOException {  return ParsedURLData.checkGZIP(is);}  }
class C{  public void fromArray(int[] codon){  for (int i=0; i < codon.length; i++) {    if ((codon[i] < 0) || (codon[i] >= maximumValue)) {      throw new IllegalArgumentException("invalid codon value");    }  }  this.codon=codon.clone();}  }
class C{  public T onblur(String value){  return attr("onblur",value);}  }
class C{  public void addObservation(double value,boolean notify){  boolean placed=false;  Iterator iterator=this.bins.iterator();  while (iterator.hasNext() && !placed) {    SimpleHistogramBin bin=(SimpleHistogramBin)iterator.next();    if (bin.accepts(value)) {      bin.setItemCount(bin.getItemCount() + 1);      placed=true;    }  }  if (!placed) {    throw new RuntimeException("No bin.");  }  if (notify) {    notifyListeners(new DatasetChangeEvent(this,this));  }}  }
class C{  public boolean isValidOn(Date date){  AttCertValidityPeriod certValidityPeriod=attrCert.getAcinfo().getAttrCertValidityPeriod();  return !date.before(CertUtils.recoverDate(certValidityPeriod.getNotBeforeTime())) && !date.after(CertUtils.recoverDate(certValidityPeriod.getNotAfterTime()));}  }
class C{  @BindingAdapter({"bind:photoUrl"}) public static void loadImage(ImageView view,String url){  if (url != null && !url.isEmpty()) {    if (url.equals(ConstantsFirebase.FIREBASE_LOCATION_CHAT_GLOBAL)) {      view.setImageDrawable(view.getContext().getResources().getDrawable(R.drawable.ic_chat_global));    } else {      Glide.with(view.getContext()).load(url).placeholder(R.drawable.ic_person).fitCenter().dontAnimate().into(view);    }  } else {    view.setImageDrawable(view.getContext().getResources().getDrawable(R.drawable.ic_person));  }}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public static PreferenceWindow create(final Shell parent,final Map<String,Object> values){  instance=new PreferenceWindow(parent,values);  return instance;}  }
class C{  public FencedAtom(Atom base,SymbolAtom l,SymbolAtom r){  this(base,l,null,r);}  }
class C{  private void commitToNewVersion() throws IOException {  writeVersionFile(false);  deleteNewVersionFile();}  }
class C{  public void run(){}  }
class C{  protected int extraVec4s(){  return 0;}  }
class C{  public void testLongsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.longs(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  private StringBuilder escape(StringBuilder builder,String unlessSchema){  if (unlessSchema == null || (!schemaName.equals(unlessSchema))) {    if (needsEscaping(schemaName)) {      escape(schemaName,builder);    } else {      builder.append(schemaName);    }    builder.append('.');  }  if (needsEscaping(tableName)) {    escape(tableName,builder);  } else {    builder.append(tableName);  }  return builder;}  }
class C{  public void markUsed(){  used=true;}  }
class C{  @Override public String toString(){  return String.format("Memory Map (%d sections)",memoryMap.getNumberOfSections());}  }
class C{  public void readExternal(ObjectInput is) throws IOException {  DataInput dis=is;  int code=readHeader(dis);  if (is instanceof ObjectInputStream && code == 0) {    ObjectInputStream ois=(ObjectInputStream)is;    dis=new FastBufferedDataInputStream(ois);  }  readPayload(dis,code);}  }
class C{  public void testWithValueInSuperclass(){  converterLookup.registerConverter(new ToAttributedValueConverter(OpenSourceSoftware.class,mapper,reflectionProvider,converterLookup,"name",Software.class),0);  final Software software=new OpenSourceSoftware("Codehaus","XStream","BSD");  final StringWriter writer=new StringWriter();  final CompactWriter compactWriter=new CompactWriter(writer);  new TreeMarshaller(compactWriter,converterLookup,mapper).start(software,null);  compactWriter.flush();  assertEquals("<open-source vendor=\"Codehaus\" license=\"BSD\">XStream</open-source>",writer.toString());  final HierarchicalStreamReader reader=driver.createReader(new StringReader(writer.toString()));  assertEquals(software,new TreeUnmarshaller(null,reader,converterLookup,mapper).start(null));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgrSafe();  if (uiMgr.getLocalUIClientName().equals(Seeker.LOCAL_PROCESS_CLIENT))   SageTV.exit(); else   uiMgr.goodbye();  return null;}  }
class C{  public String toString(){  return "" + offset;}  }
class C{  private void pingSomeone(Pinger pinger){  final Context context=getActivity();  Bundle data=new Bundle();  data.putString(PingerKeys.ACTION,GcmAction.PING_CLIENT);  data.putString(PingerKeys.TO,pinger.getRegistrationToken());  data.putString(PingerKeys.SENDER,mDefaultSharedPreferences.getString(RegistrationConstants.TOKEN,null));  try {    GoogleCloudMessaging.getInstance(context).send(FriendlyPingUtil.getServerUrl(getActivity()),String.valueOf(System.currentTimeMillis()),data);    AnalyticsHelper.send(context,TrackingEvent.PING_SENT);  } catch (  IOException e) {    Log.w(TAG,"Could not ping client.",e);  }  mPingerAdapter.moveToTop(pinger);}  }
class C{  public ValueType popValue() throws DataflowAnalysisException {  if (!isValid()) {    throw new DataflowAnalysisException("accessing top or bottom frame");  }  if (slotList.size() == numLocals) {    throw new DataflowAnalysisException("operand stack empty");  }  return slotList.remove(slotList.size() - 1);}  }
class C{  public static Path write(Path path,String string,Charset cs,OpenOption... options) throws IOException {  try (Writer w=Files.newBufferedWriter(path,cs,options)){    w.write(string);  }   return path;}  }
class C{  public String toString(){  if (m_Classifier == null) {    return "CostSensitiveClassifier: No model built yet.";  }  String result="CostSensitiveClassifier using ";  if (m_MinimizeExpectedCost) {    result+="minimized expected misclasification cost\n";  } else {    result+="reweighted training instances\n";  }  result+="\n" + getClassifierSpec() + "\n\nClassifier Model\n"+ m_Classifier.toString()+ "\n\nCost Matrix\n"+ m_CostMatrix.toString();  return result;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public boolean isDone(){  return isDone;}  }
class C{  private void handleLaunchMessageEvent(MessageEvent messageEvent){  DataMap dataMap=DataMap.fromByteArray(messageEvent.getData());  boolean relaunchIfRunning=dataMap.getBoolean(KEY_START_ACTIVITY_RELAUNCH,false);  DataMap bundleData=dataMap.getDataMap(KEY_START_ACTIVITY_BUNDLE);  String activityName=dataMap.getString(KEY_START_ACTIVITY_NAME);  Bundle bundle=null;  if (bundleData != null) {    bundle=bundleData.toBundle();  }  if (activityName == null) {    for (    WearConsumer consumer : mWearConsumers) {      consumer.onWearableApplicationLaunchRequestReceived(bundle,relaunchIfRunning);    }  } else {    try {      if (!TextUtils.isEmpty(activityName)) {        Class<?> targetActivity=Class.forName(activityName);        Intent intent=new Intent(mContext,targetActivity);        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        if (bundle != null) {          intent.putExtras(bundle);        }        if (!mAppForeground || relaunchIfRunning) {          mContext.startActivity(intent);        }      } else {        Log.e(TAG,"Activity Name cannot be empty");      }    } catch (    ClassNotFoundException e) {      Log.e(TAG,"Failed to find the activity class to launch",e);    }  }}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void init() throws RecurrenceInfoException {  if (info.get("startDateTime") == null)   throw new RecurrenceInfoException("Recurrence startDateTime cannot be null.");  long startTime=info.getTimestamp("startDateTime").getTime();  if (startTime > 0) {    int nanos=info.getTimestamp("startDateTime").getNanos();    startTime+=(nanos / 1000000);  } else {    throw new RecurrenceInfoException("Recurrence startDateTime must have a value.");  }  startDate=new Date(startTime);  try {    rRulesList=new ArrayList<RecurrenceRule>();    for (    GenericValue value : info.getRelated("RecurrenceRule",null,null,false)) {      rRulesList.add(new RecurrenceRule(value));    }  } catch (  GenericEntityException gee) {    rRulesList=null;  }catch (  RecurrenceRuleException rre) {    throw new RecurrenceInfoException("Illegal rule format.",rre);  }  try {    eRulesList=new ArrayList<RecurrenceRule>();    for (    GenericValue value : info.getRelated("ExceptionRecurrenceRule",null,null,false)) {      eRulesList.add(new RecurrenceRule(value));    }  } catch (  GenericEntityException gee) {    eRulesList=null;  }catch (  RecurrenceRuleException rre) {    throw new RecurrenceInfoException("Illegal rule format",rre);  }  rDateList=RecurrenceUtil.parseDateList(StringUtil.split(info.getString("recurrenceDateTimes"),","));  eDateList=RecurrenceUtil.parseDateList(StringUtil.split(info.getString("exceptionDateTimes"),","));  Collections.sort(rDateList);  Collections.sort(eDateList);}  }
class C{  public static <T extends CodedEnum>T readEnum(final InputStream input,final T[] all) throws IOException {  final int val=readVarInt32(input);  for (  T t : all) {    if (t.getCode() == val) {      return t;    }  }  throw new IOException("Invalid enum " + val + " for "+ all[0].getClass());}  }
class C{  public Builder(Date created,Date lastModified){  this.created=created != null ? new Date(created.getTime()) : null;  this.lastModified=lastModified != null ? new Date(lastModified.getTime()) : null;}  }
class C{  public CreateRequest(String path,Collection<LwM2mResource> resources){  this(path,resources.toArray(new LwM2mResource[resources.size()]));}  }
class C{  public int depth(){  return levelwiseNames.length - 1;}  }
class C{  protected Object invoke(Method method){  return invoke(method,new Object[0]);}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  System.out.println("[Source] dragEnter");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());}  }
class C{  private void sendResponse(){  try {    if (this.responded)     return;    InternalDistributedMember myId=this.receivingDM.getDistributionManagerId();    if (getSender().equals(myId)) {      if (debugReleaseOrphanedGrant()) {        waitToProcessDLockResponse(this.receivingDM);      }      ReplyProcessor21 processor=ReplyProcessor21.getProcessor(processorId);      if (processor == null) {        logger.warn(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_FAILED_TO_FIND_PROCESSOR_FOR__0,this.response));        if (this.response.responseCode == DLockResponseMessage.GRANT) {          logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_RELEASING_LOCAL_ORPHANED_GRANT_FOR_0,this));          try {            this.grantor.releaseIfLocked(this.objectName,getSender(),this.lockId);          } catch (          InterruptedException e) {            Thread.currentThread().interrupt();            logger.warn(LocalizedMessage.create(LocalizedStrings.DLockRequestProcess_INTERRUPTED_WHILE_RELEASING_GRANT),e);          }          logger.info(LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_HANDLED_LOCAL_ORPHANED_GRANT));        }        endGrantWaitStatistic();        return;      }      this.response.setSender(getSender());      endGrantWaitStatistic();      processor.process(this.response);    } else {      this.receivingDM.putOutgoing(this.response);      endGrantWaitStatistic();    }  }  finally {    this.responded=true;  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryAt(HashEntry<K,V>[] tab,int i){  return (tab == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)i << TSHIFT) + TBASE);}  }
class C{  public boolean isUseIdleTimeTo(){  return idleTimeToSec != null;}  }
class C{  private void clippingConsistencyCheckAndAssign(List<NeuronUpdateRule> ruleList) throws ClassCastException {  Neuron neuronRef=neuronList.get(0);  boolean clipped=((ClippableUpdateRule)neuronRef.getUpdateRule()).isClipped();  boolean discrepancy=ruleList.stream().anyMatch(null);  if (discrepancy) {    clippingDropDown.setNull();    setBoundsEnabled(false);  } else {    clippingDropDown.setSelected(clipped);    setBoundsEnabled(clipped);  }  setClippingPanelVisible(true);  setBoundsEnabled(clipped);}  }
class C{  public static void disable(){  setDisabled(true);}  }
class C{  public NormalizationZ(float z){  this.z=z;}  }
class C{  public void onResetState(){  send(new PeerConnectionActor.ResetState());}  }
class C{  public int size(){  DoubleNode<IPoint> p=points.first();  int ct=0;  while (p != null) {    ct++;    p=p.next();  }  return ct;}  }
class C{  @Override protected void tearDown() throws Exception {  File file;  file=new File(m_SourceFilename);  if (file.exists()) {    file.delete();  }  file=new File(m_ExportFilename);  if (file.exists()) {    file.delete();  }  m_SourceFilename=null;  m_ExportFilename=null;  super.tearDown();}  }
class C{  private List<String> arrayToList(String[] array){  return Arrays.asList(array);}  }
class C{  public static void eliminarHitoActual(String numExp,String entidad) throws ConsultaExcepcion {  try {    if (HitoEstadoDatos.existeHitoActual(numExp,entidad)) {      HitoEstadoDatos hit=new HitoEstadoDatos();      hit.setNumeroExpediente(numExp);      hit.eliminar(entidad);    }  } catch (  ConsultaExcepcion ce) {    logger.error("Error al eliminar hito actual [eliminarHitoActual][ConsultaExcepcion]",ce.fillInStackTrace());    throw ce;  }catch (  Exception e) {    logger.error("Error al eliminar hito actual [eliminarHitoActual][Excepcion]",e.fillInStackTrace());    throw new ConsultaExcepcion(ConsultaCodigosError.EC_ELIMINAR_HITO_ESTADO,e.getCause());  }}  }
class C{  public ObjectParser(){  this(Object.class);}  }
class C{  public void testExact() throws Exception {  query=new PhraseQuery("field","four","five");  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  assertEquals("exact match",1,hits.length);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery("field","two","one");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("reverse not exact",0,hits.length);  QueryUtils.check(random(),query,searcher);}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!this.getClass().equals(obj.getClass())) {    return false;  }  Host otherHost=(Host)obj;  return otherHost.hostname.equals(hostname);}  }
class C{  public static Map<String,Set<String>> computeGenericFacets(Map<String,Set<Tagging.Metatag>> tags){  Map<String,Set<String>> gf=new HashMap<String,Set<String>>();  for (  Map.Entry<String,Set<Tagging.Metatag>> e : tags.entrySet()) {    Tagging vocabulary=LibraryProvider.autotagging.getVocabulary(e.getKey());    if (vocabulary == null)     continue;    Set<String> objects=new HashSet<String>();    for (    Tagging.Metatag s : e.getValue()) {      objects.add(s.getObject());    }    gf.put(vocabulary.getName(),objects);  }  return gf;}  }
class C{  public static ItemStatus convertVersionStatus(final ReleaseStatus release){switch (release.getUpdateStatus()) {case CRITICAL:    return ItemStatus.ERROR;case UPDATE_RECOMMENDED:  return ItemStatus.WARN;case NEW_AVAILABLE:return ItemStatus.INFO;case ON_LATEST:return ItemStatus.OK;default :return ItemStatus.ERROR;}}  }
class C{  public boolean isOpaqueCube(IBlockState state){  return false;}  }
class C{  @VisibleForTesting public void simulatSecondsLapsed(int seconds){  for (  String serverName : serverTrackerMap.keySet()) {    int pingIntervalSecs=serverTrackerMap.get(serverName).pingIntervalSecs;    if (pingIntervalSecs <= 0) {      continue;    }    int totalSecondsLapsed=serverTrackerMap.get(serverName).totalSecondsLapsed;    int newTotalSecondsLapsed=totalSecondsLapsed + seconds;    for (int i=0; i < (newTotalSecondsLapsed / pingIntervalSecs) - (totalSecondsLapsed / pingIntervalSecs); i++) {      checkServer(serverName);    }    serverTrackerMap.get(serverName).totalSecondsLapsed=newTotalSecondsLapsed;  }}  }
class C{  private ColorUIResource parseColor(String s){  int red=0;  int green=0;  int blue=0;  try {    StringTokenizer st=new StringTokenizer(s,",");    red=Integer.parseInt(st.nextToken());    green=Integer.parseInt(st.nextToken());    blue=Integer.parseInt(st.nextToken());  } catch (  Exception e) {    System.out.println(e);    System.out.println("Couldn't parse color :" + s);  }  return new ColorUIResource(red,green,blue);}  }
class C{  public void update(byte[] seed,byte[] leaf){  if (this.heightOfNextSeed < (this.heightOfTree - this.K) && this.indexForNextSeed - 2 == index[0]) {    this.initializeTreehashSeed(seed,this.heightOfNextSeed);    this.heightOfNextSeed++;    this.indexForNextSeed*=2;  }  this.update(leaf);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public AtomicLongArray(int length){  array=new long[length];}  }
class C{  private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){  String[] t=new String[buffer.length + lastRead.length];  System.arraycopy(buffer,0,t,0,buffer.length);  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);  return t;}  }
class C{  static String genTables(){  int n=sizes.length;  StringBuffer result=new StringBuffer();  result.append(commentStart + " The following tables and code generated using:" + commentEnd+ "\n  ");  result.append(commentStart + ' ' + commandLineDescription+ commentEnd+ "\n  ");  if (plane == 0 && bLatin1 == false) {    genCaseMapTableDeclaration(result);    genCaseMapTable(initializers,specialCaseMaps);  }  int totalBytes=0;  for (int k=0; k < n - 1; k++) {    genTable(result,tableNames[k],tables[k],0,bytes[k] << 3,sizes[k],preshifted[k],sizes[k + 1],false,false,k == 0);    int s=bytes[k];    if (s == 1 && useCharForByte) {      s=2;    }    totalBytes+=tables[k].length * s;  }  genTable(result,"A",tables[n - 1],0,(identifiers ? 2 : 32),sizes[n - 1],false,0,true,!(identifiers),false);  genTable(result,"B",tables[n - 1],32,16,sizes[n - 1],false,0,true,true,false);  totalBytes+=((((tables[n - 1].length * (identifiers ? 2 : 32)) + 31) >> 5) << 2);  result.append(commentStart);  result.append(" In all, the character property tables require ");  result.append(totalBytes).append(" bytes.").append(commentEnd);  if (verbose) {    System.out.println("The character property tables require " + totalBytes + " bytes.");  }  return result.toString();}  }
class C{  public MutableByte(){  super();}  }
class C{  public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,TextAnchor textAnchor){  this(itemLabelAnchor,textAnchor,TextAnchor.CENTER,0.0);}  }
class C{  public static String unescapeCString(String s){  if (s.indexOf('\\') < 0) {    return s;  }  StringBuilder sb=new StringBuilder();  int len=s.length();  for (int i=0; i < len; ) {    char c=s.charAt(i++);    if (c == '\\' && (i < len)) {      c=s.charAt(i++);switch (c) {case 'a':        c='\007';      break;case 'b':    c='\b';  break;case 'f':c='\f';break;case 'n':c='\n';break;case 'r':c='\r';break;case 't':c='\t';break;case 'v':c='\013';break;case '\\':c='\\';break;case '?':c='?';break;case '\'':c='\'';break;case '"':c='\"';break;default :{if ((c == 'x') && (i < len) && isHex(s.charAt(i))) {int v=hexValue(s.charAt(i++));if ((i < len) && isHex(s.charAt(i))) {v=v * 16 + hexValue(s.charAt(i++));}c=(char)v;} else if (isOctal(c)) {int v=(c - '0');if ((i < len) && isOctal(s.charAt(i))) {v=v * 8 + (s.charAt(i++) - '0');}if ((i < len) && isOctal(s.charAt(i))) {v=v * 8 + (s.charAt(i++) - '0');}c=(char)v;} else {sb.append('\\');}break;}}}sb.append(c);}return sb.toString();}  }
class C{  public List<List<Integer>> zigzagLevelOrder(TreeNode root){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (root == null)   return res;  List<TreeNode> nextLevel=new ArrayList<TreeNode>();  nextLevel.add(root);  boolean toggle=false;  while (!level.isEmpty()) {    List<Integer> curLevel=new ArrayList<Integer>();    List<TreeNode> nextLevel=new ArrayList<TreeNode>();    while (!level.isEmpty()) {      TreeNode temp=level.remove(0);      if (!toggle)       curLevel.add(temp.val); else       curLevel.add(0,temp.val);      if (temp.left != null)       nextLevel.add(temp.left);      if (temp.right != null)       nextLevel.add(temp.right);    }    res.add(curLevel);    level=nextLevel;    toggle=toggle ? false : true;  }  return res;}  }
class C{  public void writeTo(final OutputStream out,MultipartEntity.CallBackInfo callBackInfo) throws IOException {  doWriteTo(this.mode,out,callBackInfo,true);}  }
class C{  public T caseAnonymous_traceType_1_(Anonymous_traceType_1_ object){  return null;}  }
class C{  public byte[] completeAndCoalesce(int lastBlockLength){  _currBlockPtr=lastBlockLength;  return toByteArray();}  }
class C{  public void update(long dt,float ratioY){  double step=2 * Math.PI / POINTS_PER_CIRCLE;  angle+=dt * BUBBLE_D_ANGLE;  float fromX=startX + (float)(0.05f * Math.sin(angle));  float toX=fromX + size;  float fromY=this.fromY + dt * speed;  float toY=fromY + size;  centerY+=dt * virtualSpeed;  getColor()[3]=(TOP_Y - centerY / TOP_Y);  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));  }  this.fromY=fromY;}  }
class C{  @Override public String fetch(){  return fetch(REFS_HEADS + "*",REFS_REMOTES + "*");}  }
class C{  public void rotate(float degrees){  if (!enabled) {    return;  }  Log.d(TAG,"Rotating by " + degrees);  Pointing pointing=model.getPointing();  GeocentricCoordinates pointingXyz=pointing.getLineOfSight();  Matrix33 rotation=Geometry.calculateRotationMatrix(degrees,pointingXyz);  GeocentricCoordinates topXyz=pointing.getPerpendicular();  Vector3 newUpXyz=Geometry.matrixVectorMultiply(rotation,topXyz);  newUpXyz.normalize();  model.setPointing(pointingXyz,newUpXyz);}  }
class C{  public double shortfall(final double target){  QL.ensure(samples() != 0,EMPTY_SAMPLE_SET);  final Ops.DoublePredicate less=new Bind2ndPredicate(new LessThanPredicate(),target);  return expectationValue(new Clipped(less,new Constant(1.0)),new TruePredicate()).first();}  }
class C{  public Sprite modifySprite(Sprite base,Color color,Composite blend,Object ref){  int width=base.getWidth();  int height=base.getHeight();  BufferedImage image=gc.createCompatibleImage(width,height,TransparencyMode.TRANSPARENCY);  Graphics2D g=image.createGraphics();  base.draw(g,0,0);  g.setColor(color);  g.setComposite(blend);  g.fillRect(0,0,width,height);  g.dispose();  Sprite sprite=new ImageSprite(image,ref);  SpriteCache cache=SpriteCache.get();  cache.add(ref,sprite);  return sprite;}  }
class C{  public GeneralizedSemPmWrapper(DagWrapper dagWrapper,GeneralizedSemPmWrapper wrapper){  this(new EdgeListGraph(dagWrapper.getDag()),wrapper.getSemPm());}  }
class C{  public void Locationbtn(){  try {    byte[] buff=new byte[250];    FileInputStream fs=openFileInput("My_Last_Location");    fs.read(buff);    fs.close();    String st=new String(buff).trim();    Intent i=new Intent(Intent.ACTION_VIEW);    i.setData(Uri.parse(st));    startActivity(i);  } catch (  FileNotFoundException e) {    Toast.makeText(a2dp.Vol.main.this,R.string.NoData,Toast.LENGTH_LONG).show();    Log.e(LOG_TAG,"error" + e.getMessage());  }catch (  IOException e) {    Toast.makeText(a2dp.Vol.main.this,"Some IO issue",Toast.LENGTH_LONG).show();    Log.e(LOG_TAG,"error" + e.getMessage());  }}  }
class C{  public boolean hasTimeZone(){  return hasExtension(TimeZoneProperty.class);}  }
class C{  public void remove(int theIndex){  messages.remove(theIndex);}  }
class C{  public FacebookOperationCanceledException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public static boolean contains(Rectangle2D r1,Rectangle2D r2){  return (r2.getX()) >= r1.getX() && r2.getY() >= r1.getY() && (r2.getX() + max(0,r2.getWidth())) <= r1.getX() + max(0,r1.getWidth()) && (r2.getY() + max(0,r2.getHeight())) <= r1.getY() + max(0,r1.getHeight());}  }
class C{  public void addCheckingPaths(TreePath[] paths){  for (  TreePath path : paths) {    addCheckingPath(path);  }}  }
class C{  public void cleanup(){  XDropTargetEventProcessor.reset();  if (targetXWindow != null) {    notifyProtocolListener(targetXWindow,0,0,DnDConstants.ACTION_NONE,sourceActions,null,MouseEvent.MOUSE_EXITED);  }  if (sourceWindow != 0) {    XToolkit.awtLock();    try {      XErrorHandlerUtil.WITH_XERROR_HANDLER(XErrorHandler.IgnoreBadWindowHandler.getInstance());      XlibWrapper.XSelectInput(XToolkit.getDisplay(),sourceWindow,sourceWindowMask);      XErrorHandlerUtil.RESTORE_XERROR_HANDLER();    }  finally {      XToolkit.awtUnlock();    }  }  sourceWindow=0;  sourceWindowMask=0;  sourceProtocolVersion=0;  sourceActions=DnDConstants.ACTION_NONE;  sourceFormats=null;  sourceAtom=0;  userAction=DnDConstants.ACTION_NONE;  sourceX=0;  sourceY=0;  targetXWindow=null;  topLevelLeavePostponed=false;}  }
class C{  @Scheduled(fixedDelay=3000) public void runMonitoring(){  if (EventBusFactory.getDefault() == null) {    return;  }  log.debug("start run monitoring");  List<Check> checks=checkService.findAll();  for (  Check check : checks) {    if (check.getCheckState() == CheckState.NOT_RUNNING) {      boolean startCheck=false;      Date scheduledNextDate=check.getScheduledNextDate();      if (scheduledNextDate == null) {        if (new Date().after(check.getScheduledStartDate())) {          startCheck=true;        }      } else {        if (new Date().after(scheduledNextDate)) {          startCheck=true;        }      }      if (startCheck) {        Calendar calendar=new GregorianCalendar();switch (check.getScheduledIntervalType()) {case SECOND:          calendar.add(Calendar.SECOND,check.getScheduledInterval());        break;case MINUTE:      calendar.add(Calendar.MINUTE,check.getScheduledInterval());    break;case HOUR:  calendar.add(Calendar.HOUR_OF_DAY,check.getScheduledInterval());break;case DAY:calendar.add(Calendar.DAY_OF_MONTH,check.getScheduledInterval());break;case MONTH:calendar.add(Calendar.MONTH,check.getScheduledInterval());break;default :throw new UnsupportedOperationException("Unknown scheduled interval type");}monitoringService.startCheck(check,calendar.getTime());}}}log.debug("finish run monitoring");}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=createShader("org/lwjgl/demo/opengl/raytracing/hybridSsboTriangle.glsl",GL_COMPUTE_SHADER);  int random=createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  @SafeVarargs public static <T>PromisesArray<T> of(T... items){  ArrayList<Promise<T>> res=new ArrayList<>();  for (  T t : items) {    res.add(Promise.success(t));  }  final Promise[] promises=res.toArray(new Promise[res.size()]);  return new PromisesArray<>((PromiseFunc<Promise<T>[]>)null);}  }
class C{  public boolean isAntiAliased(){  return impl.isAntiAliased(nativeGraphics);}  }
class C{  private int[] smallArrayOfRandomNumbers(){  int size=TestUtil.nextInt(random(),1,5);  int[] result=new int[size];  for (int i=0; i < size; i++) {    result[i]=TestUtil.nextInt(random(),1,5);  }  return result;}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  if (GCTrace.traceInducedGC)   return true; else   return super.willNotMoveInCurrentCollection(object);}  }
class C{  @Override public void commit(){  if (writeCache != null) {synchronized (this) {      flushWriteCache();    }  }  super.commit();}  }
class C{  public byte[] resetAndGetFirstSegment(){  reset();  return _currBlock;}  }
class C{  public void start(@NonNull Context context,@NonNull Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public void pushVariableScope(VariableScope el){  pushState();  scope=el;  superBlockNamedLabels=new HashMap(superBlockNamedLabels);  superBlockNamedLabels.putAll(currentBlockNamedLabels);  currentBlockNamedLabels=new HashMap();}  }
class C{  protected int update(DataPoint dataPoint,final int y_t,int z_t){  final Vec x_t=dataPoint.getNumericalValues();  double z_t_val;  if (z_t == Integer.MIN_VALUE || z_t > nextID[y_t]) {    z_t_val=0.0;    z_t=-1;    Map<Integer,Vec> w_yt=weightMatrix.get(y_t);    for (    Map.Entry<Integer,Vec> entry_yt : w_yt.entrySet()) {      Vec v=entry_yt.getValue();      double tmp=x_t.dot(v);      if (tmp >= z_t_val) {        z_t=entry_yt.getKey();        z_t_val=tmp;      }    }  } else {    if (!weightMatrix.get(y_t).containsKey(z_t)) {      return update(dataPoint,y_t,Integer.MIN_VALUE);    }    if (z_t == -1)     z_t_val=0.0; else     z_t_val=weightMatrix.get(y_t).get(z_t).dot(x_t);  }  final double eta=1.0 / (lambda * time++);  int i_t=(y_t > 0 ? 0 : 1);  double i_t_val=0.0;  int j_t=-1;  for (int k=0; k < weightMatrix.size(); k++) {    if (k == y_t)     continue;    Map<Integer,Vec> w_k=weightMatrix.get(k);    for (    Map.Entry<Integer,Vec> entry_kj : w_k.entrySet()) {      Vec w_kj=entry_kj.getValue();      double tmp=x_t.dot(w_kj);      if (tmp > i_t_val) {        i_t=k;        j_t=entry_kj.getKey();        i_t_val=tmp;      }    }  }  boolean nonZeroLoss=0 < 1 + i_t_val - z_t_val;  for (int i=0; i < weightMatrix.size(); i++) {    Map<Integer,Vec> w_i=weightMatrix.get(i);    for (    Map.Entry<Integer,Vec> w_entry_ij : w_i.entrySet()) {      int j=w_entry_ij.getKey();      Vec w_ij=w_entry_ij.getValue();      w_ij.mutableMultiply(-(eta * lambda - 1));      if (i == i_t && j == j_t && nonZeroLoss)       w_ij.mutableSubtract(eta,x_t); else       if (i == y_t && j == z_t && nonZeroLoss)       w_ij.mutableAdd(eta,x_t);    }    if (i == i_t && j_t == -1 && nonZeroLoss && w_i.size() < classBudget) {      double norm=x_t.pNorm(2);      Vec v=new DenseVector(x_t);      v=new VecWithNorm(v,norm);      v=new ScaledVector(v);      v.mutableMultiply(-eta);      w_i.put(nextID[i]++,v);    } else     if (i == y_t && z_t == -1 && nonZeroLoss && w_i.size() < classBudget) {      double norm=x_t.pNorm(2);      Vec v=new DenseVector(x_t);      v=new VecWithNorm(v,norm);      v=new ScaledVector(v);      v.mutableMultiply(eta);      w_i.put(nextID[i]++,v);      z_t=w_i.size() - 1;    }  }  if (time % k == 0) {    double threshold=c / ((time - 1) * lambda);    IntList classOwner=new IntList(weightMatrix.size());    IntList vecID=new IntList(weightMatrix.size());    DoubleList normVal=new DoubleList(weightMatrix.size());    for (int i=0; i < weightMatrix.size(); i++) {      for (      Map.Entry<Integer,Vec> entry : weightMatrix.get(i).entrySet()) {        Vec v=entry.getValue();        classOwner.add(i);        vecID.add(entry.getKey());        normVal.add(v.dot(v));      }    }    IndexTable it=new IndexTable(normVal);    for (int orderIndx=0; orderIndx < normVal.size(); orderIndx++) {      int i=it.index(orderIndx);      double norm=normVal.get(i);      if (norm >= threshold)       break;      threshold-=norm;      int classOf=classOwner.getI(i);      weightMatrix.get(classOf).remove(vecID.getI(i));    }  }  return z_t;}  }
class C{  public SampledGraphProjectionBuilder(GraphProjectionFactory<G,V,E,SampledGraphProjection<G,V,E>,SampledVertexDecorator<V>,SampledEdgeDecorator<E>> factory){  super(factory);}  }
class C{  public static float abs(float fValue){  if (fValue < 0) {    return -fValue;  }  return fValue;}  }
class C{  private void moveWaitToBuffer(final double now){  while (hasFlowCapacityLeftAndBufferSpace()) {    QVehicle veh=this.waitingList.poll();    if (veh == null) {      return;    }    this.network.simEngine.getMobsim().getEventsManager().processEvent(new VehicleEntersTrafficEvent(now,veh.getDriver().getId(),this.getLink().getId(),veh.getId(),veh.getDriver().getMode(),1.0));    boolean handled=this.addTransitToBuffer(now,veh);    if (!handled) {      if (veh.getDriver() instanceof TransitDriverAgent) {        TransitDriverAgent trDriver=(TransitDriverAgent)veh.getDriver();        Id<Link> nextLinkId=trDriver.chooseNextLinkId();        if (nextLinkId == null || nextLinkId.equals(trDriver.getCurrentLinkId())) {          trDriver.endLegAndComputeNextState(now);          this.addParkedVehicle(veh);          this.network.simEngine.internalInterface.arrangeNextAgentState(trDriver);          this.makeVehicleAvailableToNextDriver(veh,now);          this.vehQueue.poll();          this.usedStorageCapacity-=veh.getSizeInEquivalents();          if (HOLES) {            Hole hole=new Hole();            hole.setEarliestLinkExitTime(now + this.link.getLength() * 3600. / 15. / 1000.);            holes.add(hole);          }          continue;        }      }      addToBuffer(veh,now);    }  }}  }
class C{  public void testPutFirstNull() throws InterruptedException {  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    q.putFirst(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public Object readObject(Class expectedClass) throws IOException {  int tag=is.read();switch (tag) {case 'N':    return null;case 'T':  return new Boolean(true);case 'F':return new Boolean(false);case 'I':{int b32=is.read();int b24=is.read();int b16=is.read();int b8=is.read();return new Integer((b32 << 24) + (b24 << 16) + (b16 << 8)+ b8);}case 'L':{long b64=is.read();long b56=is.read();long b48=is.read();long b40=is.read();long b32=is.read();long b24=is.read();long b16=is.read();long b8=is.read();return new Long((b64 << 56) + (b56 << 48) + (b48 << 40)+ (b40 << 32)+ (b32 << 24)+ (b24 << 16)+ (b16 << 8)+ b8);}case 'd':{long b64=is.read();long b56=is.read();long b48=is.read();long b40=is.read();long b32=is.read();long b24=is.read();long b16=is.read();long b8=is.read();return new Date((b64 << 56) + (b56 << 48) + (b48 << 40)+ (b40 << 32)+ (b32 << 24)+ (b24 << 16)+ (b16 << 8)+ b8);}case 'S':case 'X':{int b16=is.read();int b8=is.read();int len=(b16 << 8) + b8;return readStringImpl(len);}case 'B':{if (tag != 'B') throw expect("bytes",tag);int b16=is.read();int b8=is.read();int len=(b16 << 8) + b8;ByteArrayOutputStream bos=new ByteArrayOutputStream();for (int i=0; i < len; i++) bos.write(is.read());return bos.toByteArray();}default :throw new IOException("unknown code:" + (char)tag);}}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  Graphics2D g2d=(Graphics2D)g;  Composite originalComposite=null;  if (getAlpha() < 1.0f) {    originalComposite=g2d.getComposite();    g2d.setComposite(getAlphaComposite());  }  Paint paint=getPaint();  if (paint == null)   g2d.setColor(c.getSelectionColor()); else   g2d.setPaint(paint);  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    Rectangle alloc;    if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds; else     alloc=bounds.getBounds();    g2d.fillRect(alloc.x,alloc.y,alloc.width,alloc.height);    if (getAlpha() < 1.0f)     g2d.setComposite(originalComposite);    return alloc;  } else {    try {      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);      Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();      if (roundedEdges) {        g2d.fillRoundRect(r.x,r.y,r.width,r.height,ARCWIDTH,ARCHEIGHT);      } else {        g2d.fillRect(r.x,r.y,r.width,r.height);      }      if (getAlpha() < 1.0f)       g2d.setComposite(originalComposite);      return r;    } catch (    BadLocationException ble) {      ble.printStackTrace();    } finally {      if (getAlpha() < 1.0f)       g2d.setComposite(originalComposite);    }  }  return null;}  }
class C{  public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index].get();}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  public int receiveFromDataSocket(byte[] buf){  int bytesRead;  if (dataSocket == null) {    Log.i(TAG,"Can't receive from null dataSocket");    return -2;  }  if (!dataSocket.isConnected()) {    Log.i(TAG,"Can't receive from unconnected socket");    return -2;  }  InputStream in;  try {    in=dataSocket.getInputStream();    while ((bytesRead=in.read(buf,0,buf.length)) == 0) {    }    if (bytesRead == -1) {      return -1;    }  } catch (  IOException e) {    Log.i(TAG,"Error reading data socket");    return 0;  }  localDataSocket.reportTraffic(bytesRead);  return bytesRead;}  }
class C{  @Override public void exec() throws InvalidJobException {  if (currentState != State.QUEUED) {    throw new InvalidJobException("Illegal state change");  }  currentState=State.RUNNING;  init();  Throwable thrown=null;  Map<String,Object> result=null;  try {    LocalDispatcher dispatcher=dctx.getDispatcher();    result=dispatcher.runSync(getServiceName(),getContext());    if (ServiceUtil.isError(result)) {      thrown=new Exception(ServiceUtil.getErrorMessage(result));    }    if (requester != null) {      requester.receiveResult(result);    }  } catch (  Throwable t) {    if (requester != null) {      requester.receiveThrowable(t);    }    thrown=t;  }  if (thrown == null) {    finish(result);  } else {    failed(thrown);  }}  }
class C{  public static GracePeriod createForRecurring(GracePeriodStatus type,DateTime expirationTime,String clientId,Key<BillingEvent.Recurring> billingEventRecurring){  checkArgumentNotNull(billingEventRecurring);  return createInternal(type,expirationTime,clientId,null,billingEventRecurring);}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  if (isLoaded()) {    super.changedUpdate(e,a,f);  }}  }
class C{  public void addBannedIp(final String ip){  addBannedIp(ip,null);}  }
class C{  public String process(String to_process){  if (to_process == null || to_process.length() == 0)   return "";  String tmp="";  StringTokenizer st=new StringTokenizer(to_process," ",true);  StringBuffer newValue=new StringBuffer(to_process.length() + 50);  while (st.hasMoreTokens()) {    tmp=st.nextToken();    if (hasAttribute(tmp))     newValue.append((String)get(tmp)); else     newValue.append(tmp);  }  return newValue.toString();}  }
class C{  public boolean isHidden(){  return getVisibility() == INVISIBLE;}  }
class C{  public void test_NeedClientAuth() throws UnknownHostException, IOException {  SSLSocket ssl=getSSLSocket();  ssl.setNeedClientAuth(true);  assertTrue(ssl.getNeedClientAuth());  ssl.setNeedClientAuth(false);  assertFalse(ssl.getNeedClientAuth());  ssl.close();}  }
class C{  public IgniteTxOptimisticCheckedException(String msg){  super(msg);}  }
class C{  public static Keymap fromKey(final String key){  if (key == null || key.isEmpty()) {    return null;  }  final Keymap searchResult=instances.get(key);  return searchResult;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits){  return appendDecimal(DateTimeFieldType.minuteOfHour(),minDigits,2);}  }
class C{  public String name(long seqId) throws IllegalStateException, IOException {  if (hasNames()) {    if (mIsPaired) {      return mLeft.name(seqId);    } else {      return mSingle.name(seqId);    }  }  return null;}  }
class C{  public Xeger(String regex,Random random){  assert regex != null;  assert random != null;  this.automaton=new RegExp(regex).toAutomaton();  this.random=random;}  }
class C{  public static org.oscm.vo.VOServiceReview convertToApi(org.oscm.internal.vo.VOServiceReview oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceReview newVO=new org.oscm.vo.VOServiceReview();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setTitle(oldVO.getTitle());  newVO.setComment(oldVO.getComment());  newVO.setRating(oldVO.getRating());  newVO.setModificationDate(oldVO.getModificationDate());  newVO.setProductKey(oldVO.getProductKey());  newVO.setUserId(oldVO.getUserId());  newVO.setUserName(oldVO.getUserName());  return newVO;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FlushFdrInter[");  buffer.append("interId = ").append(interId);  buffer.append(", interName = ").append(interName);  buffer.append(", domId = ").append(domId);  buffer.append(", Direction = ").append(Direction);  if (null != getRepresentante()) {    buffer.append(", repreId = ").append(getRepresentante().getInterId());    buffer.append(", repreName = ").append(getRepresentante().getInterName());    buffer.append(", domRepreId = ").append(getRepresentante().getDomId());    buffer.append(", repreDirection = ").append(getRepresentante().getDirection());  }  buffer.append("]");  return buffer.toString();}  }
class C{  void resetChannel(){  reset(channel);  expect(channel.getPipeline()).andReturn(pipeline).anyTimes();  expect(channel.getRemoteAddress()).andReturn(InetSocketAddress.createUnresolved("1.1.1.1",80)).anyTimes();}  }
class C{  private boolean saveDataToDisk(boolean exit,boolean complete,String updatedSaveName){  return saveDataToDisk(exit,complete,updatedSaveName,true);}  }
class C{  public void selectMap(String mapName) throws MapDoesNotExistException {  if (!maps.containsKey(mapName)) {    throw new MapDoesNotExistException("No map exists with name: " + mapName);  }  selectedMap=mapName;}  }
class C{  public static void print(boolean[] a){  int n=a.length;  StdOut.println(n);  for (int i=0; i < n; i++) {    if (a[i])     StdOut.print("1 "); else     StdOut.print("0 ");  }  StdOut.println();}  }
class C{  static byte[] concatDigests(String digestMethodUri,byte[]... items) throws Exception {  ASN1Encodable[] digestList=new ASN1Encodable[items.length];  for (int i=0; i < items.length; ++i) {    digestList[i]=singleDigest(digestMethodUri,items[i]);  }  DERSequence step=new DERSequence(digestList);  return step.getEncoded(DER);}  }
class C{  public DOMNodeInsertedListenerWrapper(CSSNavigableDocumentListener l){  listener=l;}  }
class C{  @SuppressWarnings("deprecation") public CLImage3D createImage3DFromGLTexture3D(CLMem.Usage usage,int texture,int mipLevel){}  }
class C{  private void addBlockingView(){  if (mBlockingView == null) {    mBlockingView=new View(this);    RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);    lp.addRule(RelativeLayout.BELOW,R.id.toolbar);    mBlockingView.setLayoutParams(lp);    mBlockingView.setClickable(true);  }  ((RelativeLayout)findViewById(R.id.ucrop_photobox)).addView(mBlockingView);}  }
class C{  @Override public void handleMessage(Message msg){  if (LOCAL_LOGV)   Log.v(TAG,"Handling incoming message: " + msg + " = "+ decodeMessage(msg));  Transaction transaction=null;switch (msg.what) {case EVENT_NEW_INTENT:    onNewIntent((Intent)msg.obj,msg.arg1);  break;case EVENT_QUIT:getLooper().quit();return;case EVENT_CONTINUE_MMS_CONNECTIVITY:synchronized (mProcessing) {if (mProcessing.isEmpty()) {return;}}if (LOCAL_LOGV) Log.v(TAG,"handle EVENT_CONTINUE_MMS_CONNECTIVITY event...");try {int result=beginMmsConnectivity();if (result != PhoneConstants.APN_ALREADY_ACTIVE) {if (LOCAL_LOGV) Log.v(TAG,"Extending MMS connectivity returned " + result + " instead of APN_ALREADY_ACTIVE");return;}} catch (IOException e) {Log.w(TAG,"Attempt to extend use of MMS connectivity failed");return;}renewMmsConnectivity();return;case EVENT_TRANSACTION_REQUEST:int serviceId=msg.arg1;try {TransactionBundle args=(TransactionBundle)msg.obj;TransactionSettings transactionSettings;if (LOCAL_LOGV) Log.v(TAG,"EVENT_TRANSACTION_REQUEST MmscUrl=" + args.getMmscUrl() + " proxy port: "+ args.getProxyAddress());String mmsc=args.getMmscUrl();if (mmsc != null) {transactionSettings=new TransactionSettings(mmsc,args.getProxyAddress(),args.getProxyPort());} else {transactionSettings=new TransactionSettings(TransactionService.this,null);}int transactionType=args.getTransactionType();if (LOCAL_LOGV) Log.v(TAG,"handle EVENT_TRANSACTION_REQUEST: transactionType=" + transactionType + " "+ decodeTransactionType(transactionType));switch (transactionType) {case Transaction.NOTIFICATION_TRANSACTION:String uri=args.getUri();if (uri != null) {transaction=new NotificationTransaction(TransactionService.this,serviceId,transactionSettings,uri);} else {byte[] pushData=args.getPushData();PduParser parser=new PduParser(pushData);GenericPdu ind=parser.parse();int type=PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND;if ((ind != null) && (ind.getMessageType() == type)) {transaction=new NotificationTransaction(TransactionService.this,serviceId,transactionSettings,(NotificationInd)ind);} else {Log.e(TAG,"Invalid PUSH data.");transaction=null;return;}}break;case Transaction.RETRIEVE_TRANSACTION:transaction=new RetrieveTransaction(TransactionService.this,serviceId,transactionSettings,args.getUri());break;case Transaction.SEND_TRANSACTION:transaction=new SendTransaction(TransactionService.this,serviceId,transactionSettings,args.getUri());break;case Transaction.READREC_TRANSACTION:transaction=new ReadRecTransaction(TransactionService.this,serviceId,transactionSettings,args.getUri());break;default :Log.w(TAG,"Invalid transaction type: " + serviceId);transaction=null;return;}if (!processTransaction(transaction)) {transaction=null;return;}if (LOCAL_LOGV) Log.v(TAG,"Started processing of incoming message: " + msg);} catch (Exception ex) {Log.w(TAG,"Exception occurred while handling message: " + msg,ex);if (transaction != null) {try {transaction.detach(TransactionService.this);synchronized (mProcessing) {if (mProcessing.contains(transaction)) {mProcessing.remove(transaction);}}} catch (Throwable t) {Log.e(TAG,"Unexpected Throwable.",t);} finally {transaction=null;}}} finally {if (transaction == null) {if (LOCAL_LOGV) Log.v(TAG,"Transaction was null. Stopping self: " + serviceId);endMmsConnectivity();stopSelf(serviceId);}}return;case EVENT_HANDLE_NEXT_PENDING_TRANSACTION:processPendingTransaction((TransactionSettings)msg.obj);return;default :Log.w(TAG,"what=" + msg.what);return;}}  }
class C{  public AtomicReferenceArray(int length){  array=new Object[length];}  }
class C{  public synchronized void useApple(Apple apple) throws RemoteException {  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": AppleUserImpl.useApple(): BEGIN");  AppleUserThread t=new AppleUserThread("AppleUserThread-" + (++threadNum),apple);  t.start();  logger.log(Level.FINEST,threadName + ": AppleUserImpl.useApple(): END");}  }
class C{  public void removeFile(@NotNull final VirtualFile file){  final HistoryEntry entry=getEntry(file);  if (entry != null) {    myEntriesList.remove(entry);  }}  }
class C{  protected String patchName(String qname){  final int lastColon=qname.lastIndexOf(':');  if (lastColon > 0) {    final int firstColon=qname.indexOf(':');    final String prefix=qname.substring(0,firstColon);    final String localName=qname.substring(lastColon + 1);    final String uri=m_prefixMap.lookupNamespace(prefix);    if (uri != null && uri.length() == 0) {      return localName;    } else     if (firstColon != lastColon) {      return prefix + ':' + localName;    }  }  return qname;}  }
class C{  public SaaSApplicationException(Throwable cause){  super(cause);  init();  this.setCauseStackTrace(cause);}  }
class C{  private static int trailingZeroBits(int x){  Assert.check(wordlen == 32);  if (x == 0) {    return 32;  }  int n=1;  if ((x & 0xffff) == 0) {    n+=16;    x>>>=16;  }  if ((x & 0x00ff) == 0) {    n+=8;    x>>>=8;  }  if ((x & 0x000f) == 0) {    n+=4;    x>>>=4;  }  if ((x & 0x0003) == 0) {    n+=2;    x>>>=2;  }  return n - (x & 1);}  }
class C{  @VisibleForTesting protected void deleteDirectoryContainingSingleFile(File file){  File parent=file.getParentFile();  File[] files=parent.listFiles();  if (files != null && files.length == 1 && files[0].equals(file)) {    try {      FileUtils.deleteDirectory(parent);      log.info("Deleted directory: " + parent.getAbsolutePath());    } catch (    IOException e) {      log.error("Failed to delete directory " + parent.getAbsolutePath() + ": "+ e.getMessage(),e);    }  }}  }
class C{  public Notifications hideAfter(Duration duration){  this.hideAfterDuration=duration;  return this;}  }
class C{  @Override public void postProcess(){}  }
class C{  public static boolean isNonMissingGt(String gt){  final int gtlen=gt.length();  for (int i=0; i < gtlen; i++) {    final char c=gt.charAt(i);switch (c) {case PHASED_SEPARATOR:case UNPHASED_SEPARATOR:case MISSING_VALUE:      continue;default :    return true;}}return false;}  }
class C{  @Override public void populateTagNameCombo(){  tagNameComboBox.removeAllItems();  final List<TargetTag> trgTagNameList=tagManagement.findAllTargetTags();  trgTagNameList.forEach(null);}  }
class C{  public void makeTruthtableBargraph(Gate g,String prefix,String suffix){  String name_rpu_data=prefix + "_" + g.Name+ "_"+ suffix+ ".txt";  LogicCircuit lc=new LogicCircuit();  String rpu_data=lc.printLogicRPU(g);  Util.fileWriter(_output_directory + name_rpu_data,rpu_data,false);  String logic_string=BooleanLogic.logicString(g.get_logics());  logic_string=logic_string.replaceAll("[^\\d.]","");  String cmd="perl " + _home + "/resources/scripts/make_gnuplot_truthtable.pl "+ _output_directory+ " "+ _dateID+ " "+ name_rpu_data+ " "+ logic_string;  Util.executeCommand(cmd);}  }
class C{  @SuppressWarnings({"varargs","unchecked"}) public static <T>List<T> concat(List<? extends T>... lists){  List<T> result=new ArrayList<>();  for (  List<? extends T> list : lists) {    result.addAll(list);  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.753 -0500",hash_original_method="E08E603F610DF9EAD1243BA93888D718",hash_generated_method="5797599B65945F2B2406534D8E8A3524") static void closeServerSocket(){  try {    if (sServerSocket != null) {      sServerSocket.close();    }  } catch (  IOException ex) {    Log.e(TAG,"Zygote:  error closing sockets",ex);  }  sServerSocket=null;}  }
class C{  @Provides @Config("rdeReportLockTimeout") public static Duration provideRdeReportLockTimeout(){  return Duration.standardSeconds(60);}  }
class C{  public static void addSquaresInPlace(double[] input1,double[] input2) throws Exception {  if (input1.length != input2.length) {    throw new Exception("Lengths of arrays are not equal");  }  for (int i=0; i < input1.length; i++) {    input1[i]=input1[i] + input2[i] * input2[i];  }}  }
class C{  private static int NextSpace(String s,int cur){  int i=cur;  boolean inString=false;  while ((i < s.length()) && ((s.charAt(i) != ' ') || inString)) {    if ((s.charAt(i) == '"') && ((i == 0) || (s.charAt(i - 1) != '\\')))     inString=!inString;    i=i + 1;  }  if (i == s.length())   return i - 1; else   return i;}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (X.getColumnDimension() != D)   throw new IllegalArgumentException("The number of dimensions specified on the covariance function " + D + " must agree with the size of the input vector"+ X.getColumnDimension());  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final Matrix ell=exp(loghyper.getMatrix(0,D - 1,0,0));  Matrix diag=new Matrix(D,D);  for (int i=0; i < D; i++)   diag.set(i,i,1 / ell.get(i,0));  X=X.times(diag);  Xstar=Xstar.times(diag);  Matrix A=sumRows(Xstar.arrayTimes(Xstar));  Matrix B=X.times(Xstar.transpose());  return new Matrix[]{A,B};}  }
class C{  private void heapifyDown(double cur,int val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best < twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur >= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public void verify(final int height,final EnumSet<VerifyFlag> flags) throws VerificationException {  verifyHeader();  verifyTransactions(height,flags);}  }
class C{  public static byte[] decode(byte[] base64Data){  if (base64Data.length == 0) {    return EMPTY_BYTE_ARRAY;  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return EMPTY_BYTE_ARRAY;      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  private void startEaster(Player admin){  if (System.getProperty("stendhal.easterbunny") != null) {    admin.sendPrivateText("Easter Bunny is already active.");    return;  }  System.setProperty("stendhal.easterbunny","true");  StendhalQuestSystem.get().loadQuest(new MeetBunny());}  }
class C{  private static int[] readIntArray(final byte[] data,final int start){  int[] result=null;  final int l=data.length;  int j=start;  int end=-1;  while (j < l && end == -1) {    if (data[j] == ']' || data[j] == '/' || data[j] == '\n') {      end=j;    }    j++;  }  if (end != -1) {    String values=new String(data,start,end - start);    if (values.contains("[")) {      final String[] stringParts=values.split("\\[");      if (stringParts.length < 2) {        return null;      }      values=stringParts[1];    }    values=values.trim();    final String[] stringValues=values.split(" ");    result=new int[stringValues.length];    for (j=0; j < stringValues.length; j++) {      try {        result[j]=Integer.parseInt(stringValues[j].split("\\.")[0]);      } catch (      final NumberFormatException e) {        LogWriter.writeLog("Exception in handling IntArray " + e);        result[j]=-1;      }    }  }  return result;}  }
class C{  private static void sparseStepTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"sparse_step",TestType.ADD);  final HLL hll=newHLL(HLLType.SPARSE);  initLineAdd(output,hll,schemaVersion);  for (int i=0; i < SPARSE_THRESHOLD; i++) {    final long rawValue=constructHLLValue(LOG2M,i,((i % REGISTER_MAX_VALUE) + 1));    cumulativeAddLine(output,hll,rawValue,schemaVersion);  }  output.flush();  output.close();}  }
class C{  protected void addExternalProperty(String name,String extName){  m_externalMap.put(name,extName);}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public static void serializeMeterConfigReply(List<OFMeterConfigStatsReply> meterConfigReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterConfigStatsReply meterConfigReply=meterConfigReplies.get(0);  jGen.writeStringField("version",meterConfigReply.getVersion().toString());  jGen.writeFieldName("meterConfig");  jGen.writeStartArray();  for (  OFMeterBand band : meterConfigReply.getEntries()) {    jGen.writeStartObject();    short type=(short)band.getType();    jGen.writeNumberField("bandType",type);switch (type) {case OFMeterBandTypeSerializerVer13.DROP_VAL:      OFMeterBandDrop bandDrop=(OFMeterBandDrop)band;    jGen.writeNumberField("rate",bandDrop.getRate());  jGen.writeNumberField("burstSize",bandDrop.getBurstSize());break;case OFMeterBandTypeSerializerVer13.DSCP_REMARK_VAL:OFMeterBandDscpRemark bandDscp=(OFMeterBandDscpRemark)band;jGen.writeNumberField("rate",bandDscp.getRate());jGen.writeNumberField("burstSize",bandDscp.getBurstSize());jGen.writeNumberField("precLevel",bandDscp.getPrecLevel());break;case OFMeterBandTypeSerializerVer13.EXPERIMENTER_VAL:OFMeterBandExperimenter bandExp=(OFMeterBandExperimenter)band;jGen.writeNumberField("rate",bandExp.getRate());jGen.writeNumberField("burstSize",bandExp.getBurstSize());jGen.writeNumberField("experimenter",bandExp.getExperimenter());break;default :break;}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public static String joinInts(int[] tokens,String delimiter){  if (tokens == null)   return "";  StringBuilder result=new StringBuilder();  for (int i=0; i < tokens.length; i++) {    if (i > 0 && delimiter != null) {      result.append(delimiter);    }    result.append(String.valueOf(tokens[i]));  }  return result.toString();}  }
class C{  final void matchAll(Vector decls){  for (int i=0; i < decls.size(); i++) {    UniqueString opName=((OpDeclNode)decls.elementAt(i)).getName();    int j;    for (j=0; j < this.substs.length; j++) {      if (this.substs[j].getOp().getName() == opName)       break;    }    if (j >= this.substs.length) {      errors.addError(stn.getLocation(),"Substitution missing for symbol " + opName + " declared at "+ ((OpDeclNode)(decls.elementAt(i))).getTreeNode().getLocation()+ " \nand instantiated in module "+ instantiatingModule.getName()+ ".");    }  }}  }
class C{  private void addSetting(Setting setting){  mSettings.addSetting(setting);  scheduleSettingsSave();  broadcastSettingChange(setting);}  }
class C{  public void loadFromGtfs(GTFSFeed gtfs) throws DuplicateFeedException {  loadFromGtfs(gtfs,LoadLevel.FULL);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NetworkRestRep createNetwork(NetworkCreate param){  _log.info("createNetwork: started for param: name {} and type {}",param.getLabel(),param.getTransportType());  ArgValidator.checkFieldNotEmpty(param.getLabel(),"label");  checkDuplicateLabel(Network.class,param.getLabel());  StorageProtocol.Transport type=StorageProtocol.Transport.valueOf(param.getTransportType());  if (param.getVarrays() != null) {    for (    URI uri : param.getVarrays()) {      queryObject(VirtualArray.class,uri,true);    }  }  Network network=new Network();  network.setId(URIUtil.createId(Network.class));  network.setLabel(param.getLabel());  network.setTransportType(type.name());  network.setAssignedVirtualArrays(StringSetUtil.uriListToStringSet(param.getVarrays()));  network.addEndpoints(checkAndFilterAddEndpoints(network,param.getEndpoints()),false);  _dbClient.createObject(network);  recordAndAudit(network,OperationTypeEnum.CREATE_NETWORK);  _log.info("createNetwork: updating ports and pools associations ");  NetworkAssociationHelper.handleNetworkUpdated(network,StringSetUtil.stringSetToUriList(network.getAssignedVirtualArrays()),null,network.getEndpointsMap().keySet(),null,_dbClient,_coordinator);  return MapNetwork.toNetworkRestRep(network,_dbClient);}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public RuleNode parentNode(){  return m_parent;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.244 -0500",hash_original_method="1ACE38F1A3DCA2E175832759CC0EDB36",hash_generated_method="D7486A2C1D1BC6F4E42697FE5F899AF6") public void rcommand(String localUsername,String remoteUsername,String command) throws IOException {  rcommand(localUsername,remoteUsername,command,false);}  }
class C{  public static void storeLocation(Context context,LatLng location){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  editor.putLong(PREFERENCES_LAT,Double.doubleToRawLongBits(location.latitude));  editor.putLong(PREFERENCES_LNG,Double.doubleToRawLongBits(location.longitude));  editor.apply();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.MARKER__KEY:    return getKey();case DomPackage.MARKER__VALUE:  return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ProposalContextInformation(CompletionProposal proposal){  CompletionProposalLabelProvider labelProvider=new CompletionProposalLabelProvider();  fInformationDisplayString=labelProvider.createParameterList(proposal);  ImageDescriptor descriptor=labelProvider.createImageDescriptor(proposal);  if (descriptor != null)   fImage=JavaPlugin.getImageDescriptorRegistry().get(descriptor); else   fImage=null;  if (proposal.getCompletion().length == 0)   fPosition=proposal.getCompletionLocation() + 1; else   fPosition=-1;  fContextDisplayString=labelProvider.createLabel(proposal);}  }
class C{  public SetGlobalSecurityPropertyScriptCommand(Configuration configuration,String resourcePath,String propertyName,String propertyValue){  super(configuration,resourcePath);  this.propertyName=propertyName;  this.propertyValue=propertyValue;}  }
class C{  protected void onChoiceEnded(){  if (swipeListViewListener != null) {    swipeListViewListener.onChoiceEnded();  }}  }
class C{  private Expression multExpression() throws ParserException, IOException {  Expression e=unary();  Operator op=null;  while (true) {switch (lookahead.ttype) {case OPERATOR_MULTIPLY:      match(OPERATOR_MULTIPLY);    op=Operator.MULTIPLY;  break;case OPERATOR_DIVIDE:match(OPERATOR_DIVIDE);op=Operator.DIVIDE;break;default :log(pdebug,"Parsed: multExpression -> " + e);return e;}Expression e1=new Expression();e1.setOperator(op);e1.setLeft(e);e1.setRight(unary());e=e1;log(pdebug,"Parsed: multExpression -> " + e);}}  }
class C{  public boolean isVisible(){  return m_isVisible;}  }
class C{  public boolean isPause(){  return mAnimator.isPause();}  }
class C{  public static List<String> toStringLines(Collection<?> c){  List<String> lines=new ArrayList<>(c.size());  for (  Object each : c) {    lines.add(String.valueOf(each));  }  return lines;}  }
class C{  public void error(String msg,Object arg0,Object arg1){  innerLog(Level.ERROR,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public static SepsetMap serializableInstance(){  return new SepsetMap();}  }
class C{  public void onVisibleLevelInfo(View view){  IndoorBuilding building=mMap.getFocusedBuilding();  if (building != null) {    IndoorLevel level=building.getLevels().get(building.getActiveLevelIndex());    if (level != null) {      setText(level.getName());    } else {      setText("No visible level");    }  } else {    setText("No visible building");  }}  }
class C{  private BusinessObjectDataStorageFilesCreateResponse createBusinessObjectDataStorageFilesCreateResponse(StorageEntity storageEntity,BusinessObjectDataEntity businessObjectDataEntity,List<StorageFile> storageFiles){  BusinessObjectDataStorageFilesCreateResponse response=new BusinessObjectDataStorageFilesCreateResponse();  response.setNamespace(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getNamespace().getCode());  response.setBusinessObjectDefinitionName(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getName());  response.setBusinessObjectFormatUsage(businessObjectDataEntity.getBusinessObjectFormat().getUsage());  response.setBusinessObjectFormatFileType(businessObjectDataEntity.getBusinessObjectFormat().getFileType().getCode());  response.setBusinessObjectFormatVersion(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectFormatVersion());  response.setPartitionValue(businessObjectDataEntity.getPartitionValue());  response.setSubPartitionValues(businessObjectDataHelper.getSubPartitionValues(businessObjectDataEntity));  response.setBusinessObjectDataVersion(businessObjectDataEntity.getVersion());  response.setStorageName(storageEntity.getName());  response.setStorageFiles(storageFiles);  return response;}  }
class C{  public void verifyKeyAndValueNotNull(K key,V value){  verifyKeyNotNull(key);  verifyValueNotNull(value);}  }
class C{  public ExportDirectorImplService(final String pathToExportDirectory,final DataDescriptorResolver<ExportDescriptor> dataDescriptorResolver,final TaskExecutor executor,final NodeService nodeService,final SystemService systemService,final FederationFacade federationFacade){  super(executor);  this.pathToExportDirectory=pathToExportDirectory;  this.nodeService=nodeService;  this.systemService=systemService;  this.dataDescriptorResolver=dataDescriptorResolver;  this.federationFacade=federationFacade;}  }
class C{  protected void transcode(Document document,String uri,TranscoderOutput output) throws TranscoderException {  if ((document != null) && !(document.getImplementation() instanceof SVGDOMImplementation)) {    DOMImplementation impl;    impl=(DOMImplementation)hints.get(KEY_DOM_IMPLEMENTATION);    document=DOMUtilities.deepCloneDocument(document,impl);    if (uri != null) {      ParsedURL url=new ParsedURL(uri);      ((SVGOMDocument)document).setParsedURL(url);    }  }  if (hints.containsKey(KEY_WIDTH))   width=((Float)hints.get(KEY_WIDTH)).floatValue();  if (hints.containsKey(KEY_HEIGHT))   height=((Float)hints.get(KEY_HEIGHT)).floatValue();  SVGOMDocument svgDoc=(SVGOMDocument)document;  SVGSVGElement root=svgDoc.getRootElement();  ctx=createBridgeContext(svgDoc);  builder=new GVTBuilder();  boolean isDynamic=hints.containsKey(KEY_EXECUTE_ONLOAD) && ((Boolean)hints.get(KEY_EXECUTE_ONLOAD)).booleanValue();  GraphicsNode gvtRoot;  try {    if (isDynamic)     ctx.setDynamicState(BridgeContext.DYNAMIC);    gvtRoot=builder.build(ctx,svgDoc);    if (ctx.isDynamic()) {      BaseScriptingEnvironment se;      se=new BaseScriptingEnvironment(ctx);      se.loadScripts();      se.dispatchSVGLoadEvent();      if (hints.containsKey(KEY_SNAPSHOT_TIME)) {        float t=((Float)hints.get(KEY_SNAPSHOT_TIME)).floatValue();        ctx.getAnimationEngine().setCurrentTime(t);      } else       if (ctx.isSVG12()) {        float t=SVGUtilities.convertSnapshotTime(root,null);        ctx.getAnimationEngine().setCurrentTime(t);      }    }  } catch (  BridgeException ex) {    ex.printStackTrace();    throw new TranscoderException(ex);  }  float docWidth=(float)ctx.getDocumentSize().getWidth();  float docHeight=(float)ctx.getDocumentSize().getHeight();  setImageSize(docWidth,docHeight);  AffineTransform Px;  if (hints.containsKey(KEY_AOI)) {    Rectangle2D aoi=(Rectangle2D)hints.get(KEY_AOI);    Px=new AffineTransform();    double sx=width / aoi.getWidth();    double sy=height / aoi.getHeight();    double scale=Math.min(sx,sy);    Px.scale(scale,scale);    double tx=-aoi.getX() + (width / scale - aoi.getWidth()) / 2;    double ty=-aoi.getY() + (height / scale - aoi.getHeight()) / 2;    Px.translate(tx,ty);    curAOI=aoi;  } else {    String ref=new ParsedURL(uri).getRef();    String viewBox=root.getAttributeNS(null,SVGConstants.SVG_VIEW_BOX_ATTRIBUTE);    if ((ref != null) && (ref.length() != 0)) {      Px=ViewBox.getViewTransform(ref,root,width,height,ctx);    } else     if ((viewBox != null) && (viewBox.length() != 0)) {      String aspectRatio=root.getAttributeNS(null,SVGConstants.SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE);      Px=ViewBox.getPreserveAspectRatioTransform(root,viewBox,aspectRatio,width,height,ctx);    } else {      float xscale, yscale;      xscale=width / docWidth;      yscale=height / docHeight;      float scale=Math.min(xscale,yscale);      Px=AffineTransform.getScaleInstance(scale,scale);    }    curAOI=new Rectangle2D.Float(0,0,width,height);  }  CanvasGraphicsNode cgn=getCanvasGraphicsNode(gvtRoot);  if (cgn != null) {    cgn.setViewingTransform(Px);    curTxf=new AffineTransform();  } else {    curTxf=Px;  }  this.root=gvtRoot;}  }
class C{  @Override public void sessionIdle(IoSession session,IdleStatus status) throws Exception {  System.out.println("IDLE " + session.getIdleCount(status));}  }
class C{  public BuilderForGossipSeedDiscoverer discoverAttemptInterval(Duration discoverAttemptInterval){  super.discoverAttemptInterval=discoverAttemptInterval;  return this;}  }
class C{  public OpenDirectoryAction(Application app){  super(app);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public void testBackupRestore() throws Exception {  backupRestore("testBackupRestoreDefault","dummy","file");}  }
class C{  public static void transform(DataSet data,String... equations) throws ParseException {  if (equations.length == 0) {    return;  }  for (  String equation : equations) {    transformEquation(data,equation);  }}  }
class C{  private boolean hasFullClippingSupport(Canvas c){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && mIsHardwareAccelerated != null) {    try {      return !(Boolean)mIsHardwareAccelerated.invoke(c,(Object[])null);    } catch (    IllegalArgumentException e) {    }catch (    IllegalAccessException e) {    }catch (    InvocationTargetException e) {    }  }  return true;}  }
class C{  public TDoubleFloatHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public BasePermissionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    super.execute(mapping,form,request,response);    SchedulingSubpartEditForm frm=(SchedulingSubpartEditForm)form;    MessageResources rsc=getResources(request);    ActionMessages errors=new ActionMessages();    String subpartId=request.getParameter("ssuid") == null ? request.getAttribute("ssuid") != null ? request.getAttribute("ssuid").toString() : null : request.getParameter("ssuid");    String reloadCause=request.getParameter("reloadCause");    String op=frm.getOp();    if (request.getParameter("op2") != null && request.getParameter("op2").length() > 0)     op=request.getParameter("op2");    if (op.equals(MSG.actionAddTimePreference()) || op.equals(MSG.actionAddRoomPreference()) || op.equals(MSG.actionAddBuildingPreference())|| op.equals(MSG.actionAddRoomFeaturePreference())|| op.equals(MSG.actionAddDistributionPreference())|| op.equals(MSG.actionAddRoomGroupPreference())|| op.equals(MSG.actionUpdatePreferences())|| op.equals(MSG.actionAddDatePatternPreference())|| op.equals(MSG.actionClearSubpartPreferences())|| op.equals(MSG.actionRemoveBuildingPreference())|| op.equals(MSG.actionRemoveDistributionPreference())|| op.equals(MSG.actionRemoveRoomFeaturePreference())|| op.equals(MSG.actionRemoveRoomGroupPreference())|| op.equals(MSG.actionRemoveRoomPreference())|| op.equals(MSG.actionRemoveTimePattern())|| op.equals(MSG.actionBackToDetail())|| op.equals(MSG.actionNextSubpart())|| op.equals(MSG.actionPreviousSubpart())|| op.equals("updateDatePattern")) {      subpartId=frm.getSchedulingSubpartId();    }    if (op == null || op.trim().length() == 0 || (op.equals(rsc.getMessage("button.reload")) && (reloadCause == null || reloadCause.trim().length() == 0))) {      op="init";    }    if (op == null || op.trim() == "")     throw new Exception(MSG.errorNullOperationNotSupported());    sessionContext.checkPermission(subpartId,"SchedulingSubpart",Right.SchedulingSubpartEdit);    boolean timeVertical=CommonValues.VerticalGrid.eq(sessionContext.getUser().getProperty(UserProperty.GridOrientation));    Debug.debug("op: " + op);    Debug.debug("subpart: " + subpartId);    Debug.debug("reload cause: " + reloadCause);    if (subpartId == null || subpartId.trim() == "")     throw new Exception(MSG.errorSubpartInfoNotSupplied());    SchedulingSubpartDAO sdao=new SchedulingSubpartDAO();    SchedulingSubpart ss=sdao.get(new Long(subpartId));    if (op.equals(MSG.actionBackToDetail()) && subpartId != null && subpartId.trim() != "") {      ActionRedirect redirect=new ActionRedirect(mapping.findForward("displaySubpartDetail"));      redirect.addParameter("ssuid",subpartId);      return redirect;    }    if (op.equals(MSG.actionClearSubpartPreferences())) {      sessionContext.checkPermission(ss,Right.SchedulingSubpartEditClearPreferences);      Set s=ss.getPreferences();      s.clear();      ss.setPreferences(s);      sdao.update(ss);      ChangeLog.addChange(null,sessionContext,ss,ChangeLog.Source.SCHEDULING_SUBPART_EDIT,ChangeLog.Operation.CLEAR_PREF,ss.getInstrOfferingConfig().getInstructionalOffering().getControllingCourseOffering().getSubjectArea(),ss.getManagingDept());      ActionRedirect redirect=new ActionRedirect(mapping.findForward("displaySubpartDetail"));      redirect.addParameter("ssuid",subpartId);      return redirect;    }    if (op.equals("init")) {      frm.reset(mapping,request);      frm.setAutoSpreadInTime(ss.isAutoSpreadInTime());      frm.setStudentAllowOverlap(ss.isStudentAllowOverlap());    }    doLoad(request,frm,ss,subpartId);    if (op.equals("init")) {      frm.setDatePattern(ss.getDatePattern() == null ? new Long(-1) : ss.getDatePattern().getUniqueId());    }    if (op.equals(MSG.actionUpdatePreferences()) || op.equals(MSG.actionNextSubpart()) || op.equals(MSG.actionPreviousSubpart())) {      errors=frm.validate(mapping,request);      if (errors.size() == 0) {        this.doUpdate(request,frm,ss,sdao,timeVertical);        if (op.equals(MSG.actionNextSubpart())) {          response.sendRedirect(response.encodeURL("schedulingSubpartEdit.do?ssuid=" + frm.getNextId()));          return null;        }        if (op.equals(MSG.actionPreviousSubpart())) {          response.sendRedirect(response.encodeURL("schedulingSubpartEdit.do?ssuid=" + frm.getPreviousId()));          return null;        }        ActionRedirect redirect=new ActionRedirect(mapping.findForward("displaySubpartDetail"));        redirect.addParameter("ssuid",subpartId);        return redirect;      } else {        saveErrors(request,errors);      }    }    Set timePatterns=null;    frm.setAvailableTimePatterns(TimePattern.findApplicable(sessionContext.getUser(),ss.getMinutesPerWk(),(frm.getDatePattern() < 0 ? (ss.canInheritParentPreferences() ? ss.getParentSubpart().effectiveDatePattern() : ss.getSession().getDefaultDatePatternNotNull()) : DatePatternDAO.getInstance().get(frm.getDatePattern())),ss.getInstrOfferingConfig().getDurationModel(),false,ss.getManagingDept()));    if (op.equals("init")) {      initPrefs(frm,ss,null,true);      timePatterns=ss.getTimePatterns();      DatePattern selectedDatePattern=ss.effectiveDatePattern();      if (selectedDatePattern != null) {        for (        DatePattern dp : selectedDatePattern.findChildren()) {          if (!frm.getDatePatternPrefs().contains(dp.getUniqueId().toString())) {            frm.addToDatePatternPrefs(dp.getUniqueId().toString(),PreferenceLevel.PREF_LEVEL_NEUTRAL);          }        }      }    }    if (op.equals("updateDatePattern")) {      initPrefs(frm,ss,null,true);      timePatterns=ss.getTimePatterns();      frm.getDatePatternPrefs().clear();      frm.getDatePatternPrefLevels().clear();      DatePattern selectedDatePattern=(frm.getDatePattern() < 0 ? (ss.canInheritParentPreferences() ? ss.getParentSubpart().effectiveDatePattern() : ss.getSession().getDefaultDatePatternNotNull()) : DatePatternDAO.getInstance().get(frm.getDatePattern()));      if (selectedDatePattern != null) {        for (        DatePattern dp : selectedDatePattern.findChildren()) {          boolean found=false;          for (          DatePatternPref dpp : (Set<DatePatternPref>)ss.getPreferences(DatePatternPref.class)) {            if (dp.equals(dpp.getDatePattern())) {              frm.addToDatePatternPrefs(dp.getUniqueId().toString(),dpp.getPrefLevel().getUniqueId().toString());              found=true;            }          }          if (!found)           frm.addToDatePatternPrefs(dp.getUniqueId().toString(),PreferenceLevel.PREF_LEVEL_NEUTRAL);        }      }    }    processPrefAction(request,frm,errors);    super.generateTimePatternGrids(request,frm,ss,ss.getMinutesPerWk(),ss.getInstrOfferingConfig().getDurationModel(),(frm.getDatePattern() < 0 ? (ss.canInheritParentPreferences() ? ss.getParentSubpart().effectiveDatePattern() : ss.getSession().getDefaultDatePatternNotNull()) : DatePatternDAO.getInstance().get(frm.getDatePattern())),timePatterns,op,timeVertical,true,null);    setupChildren(frm,request,ss);    LookupTables.setupDatePatterns(request,sessionContext.getUser(),"Default",(ss.canInheritParentPreferences() ? ss.getParentSubpart().effectiveDatePattern() : ss.getSession().getDefaultDatePatternNotNull()),ss.getManagingDept(),ss.effectiveDatePattern());    LookupTables.setupRooms(request,ss);    LookupTables.setupBldgs(request,ss);    LookupTables.setupRoomFeatures(request,ss);    LookupTables.setupRoomGroups(request,ss);    LookupTables.setupCourseCreditFormats(request);    LookupTables.setupCourseCreditTypes(request);    LookupTables.setupCourseCreditUnitTypes(request);    frm.setAllowHardPrefs(sessionContext.hasPermission(ss,Right.CanUseHardRoomPrefs));    BackTracker.markForBack(request,"schedulingSubpartDetail.do?ssuid=" + frm.getSchedulingSubpartId(),MSG.backSubpart(ss.getSchedulingSubpartLabel()),true,false);    return mapping.findForward("editSchedulingSubpart");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  public int[] validBaudValues(){  return new int[]{57600,115200,230400,250000,288000,333333,460800};}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("CollectionCertStoreParameters: [\n");  sb.append("  collection: " + coll + "\n");  sb.append("]");  return sb.toString();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void localMustBeSubtypeOf(Local l,RefType t){  FastHierarchy fh=Scene.v().getFastHierarchy();  for (  Type type : types) {    RefType supertype=(RefType)type;    if (fh.canStoreType(t,supertype)) {      set(indexOf(l,supertype));    }  }}  }
class C{  boolean isSignedJar(){  return certificates.size() > 0;}  }
class C{  public void close(){  this._stats.close();}  }
class C{  public float weight(int contentLength,int totalTermFreq){  float numDocs=1 + contentLength / pivot;  return (k1 + 1) * (float)Math.log(1 + (numDocs + 0.5D) / (totalTermFreq + 0.5D));}  }
class C{  public synchronized void verifyProcessExitValue(PrintStream err){  if (exitValue != 0) {    throw new RuntimeException("Child process returns not 0 value!" + "Returned value is " + exitValue);  }}  }
class C{  public Connection(String clientHandle,String clientId,String host,int port,Context context,MqttAndroidClient client,boolean sslConnection){  this.clientHandle=clientHandle;  this.clientId=clientId;  this.host=host;  this.port=port;  this.context=context;  this.client=client;  this.sslConnection=sslConnection;  history=new ArrayList<String>();  StringBuffer sb=new StringBuffer();  sb.append("Client: ");  sb.append(clientId);  sb.append(" created");  addAction(sb.toString());}  }
class C{  public String save(){  synchronizeUIWithObjects();  final List<POResalePermissionDetails> toGrant=new ArrayList<POResalePermissionDetails>();  final List<POResalePermissionDetails> toRevoke=new ArrayList<POResalePermissionDetails>();  if (model.isSupplier()) {    toGrant.addAll(getPermissionList(model.getBrokers(),OfferingType.BROKER,true));    toGrant.addAll(getPermissionList(model.getResellers(),OfferingType.RESELLER,true));    toRevoke.addAll(getPermissionList(model.getBrokers(),OfferingType.BROKER,false));    toRevoke.addAll(getPermissionList(model.getResellers(),OfferingType.RESELLER,false));  }  try {    String mplId=model.getServiceDetails().getMarketplaceId();    VOMarketplace marketplace=mplService.getMarketplaceById(mplId);    if (marketplace.isRestricted()) {      handleRestrictedMarketplaceAccess(marketplace,model.getServiceDetails().getService());    }    getCategorizationService().verifyCategoriesUpdated(model.getChangedCategoriess());    Response response=getPublishService().updateAndPublishService(model.getServiceDetails(),toGrant,toRevoke);    ui.handle(response,"info.service.saved",model.getServiceDetails().getService().getServiceId());    updateAssignedPermissions(model.getBrokers(),model.getResellers());    initRevenueShare(model.getSelectedServiceKey(),model.getServiceDetails().getMarketplaceId());  } catch (  SaaSApplicationException e) {    if (e instanceof ObjectNotFoundException) {      String[] keys=e.getMessageParams();      String displayedName=getDisplayedName(keys[0]);      e.setMessageParams(new String[]{displayedName});    }    ui.handleException(e);    return OUTCOME_ERROR;  }  return OUTCOME_SUCCESS;}  }
class C{  public MbSearchEditor(CeFanSearchRunner runner){  super(runner,"Result Causal Environment");}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  protected final void closeConnection() throws IOException {  if (!connection.isConnected())   return;synchronized (getSynchronizationObject()) {    try {      connection.close();    }  finally {      setDetached();    }  }}  }
class C{  public boolean isNone(){  return this == NONE;}  }
class C{  public static final String URIToFilename(String str){  if (str.length() >= 3) {    if (str.charAt(0) == '/' && str.charAt(2) == ':') {      char ch1=Character.toUpperCase(str.charAt(1));      if (ch1 >= 'A' && ch1 <= 'Z')       str=str.substring(1);    }  }  str=str.replace('/',java.io.File.separatorChar);  return str;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.NEW_EXPRESSION__TYPE_ARGS:    return getTypeArgs();case N4JSPackage.NEW_EXPRESSION__CALLEE:  return getCallee();case N4JSPackage.NEW_EXPRESSION__ARGUMENTS:return getArguments();case N4JSPackage.NEW_EXPRESSION__WITH_ARGS:return isWithArgs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isIncremental(){  return m_Incremental;}  }
class C{  public void unsetLastExecuteTime(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,LASTEXECUTETIME_ISSET_ID);}  }
class C{  public void computeAverageLocal(int history,int base,int states[][]){  initialise(history,base);  addObservations(states);  computeAverageLocalOfObservations();}  }
class C{  private boolean isXmlFile(Path path){  return !Files.isDirectory(path) && path.toString().endsWith(".xml");}  }
class C{  public boolean equals(Operation other){  if (other == null) {    return false;  }  return ((m_nOperation == other.m_nOperation) && (m_nHead == other.m_nHead) && (m_nTail == other.m_nTail));}  }
class C{  public TreeCategory(String name,int iconID,boolean filtering){  setName(name);  setFilterEnabled(filtering);  setIconID(iconID);}  }
class C{  public void compileSingleFile(File modelFile,IssueAcceptor issueAcceptor) throws N4JSCompileException {  compileSingleFiles(Arrays.asList(modelFile),issueAcceptor);}  }
class C{  private void applyStatusBtnStyle(){  unknown.addStyleName("unknownBtn");  inSync.addStyleName("inSynchBtn");  pending.addStyleName("pendingBtn");  error.addStyleName("errorBtn");  registered.addStyleName("registeredBtn");  overdue.addStyleName("overdueBtn");}  }
class C{  public static String readString(ByteBuffer buff,int len){  char[] chars=new char[len];  for (int i=0; i < len; i++) {    int x=buff.get() & 0xff;    if (x < 0x80) {      chars[i]=(char)x;    } else     if (x >= 0xe0) {      chars[i]=(char)(((x & 0xf) << 12) + ((buff.get() & 0x3f) << 6) + (buff.get() & 0x3f));    } else {      chars[i]=(char)(((x & 0x1f) << 6) + (buff.get() & 0x3f));    }  }  return new String(chars);}  }
class C{  protected void restoreState(){  if (tree != null) {    System.arraycopy(storedIntervals,0,intervals,0,storedIntervals.length);    System.arraycopy(storedLineageCounts,0,lineageCounts,0,storedLineageCounts.length);    intervalsKnown=storedIntervalsKnown;    intervalCount=storedIntervalCount;  } else   if (treesSet != null) {    treesSet.restoreTheState();  }  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;  if (!intervalsKnown) {    likelihoodKnown=false;  }}  }
class C{  @Override public Set<K> keySet(){  if (keySet == null) {    keySet=new ReferenceKeySet<K>(this);  }  return keySet;}  }
class C{  public final boolean isGpsEnabled(){  return isGpsEnabled;}  }
class C{  private User constructUserFromJSON(JSONObject user){  String id=(String)user.get("id");  String username=(String)user.get("username");  String avatar=(String)user.get("avatar");  User ourUser=new User(username,id,avatar);  ourUser.setPresence(Presences.ONLINE);  return ourUser;}  }
class C{  public Channel chan(final String topic,final JsonNode payload){  LOG.log(Level.FINE,"chan: {0}, {1}",new Object[]{topic,payload});  final Channel channel=new Channel(topic,payload,Socket.this);synchronized (channels) {    channels.add(channel);  }  return channel;}  }
class C{  public GeneralException(String msg,List<String> messages,Throwable nested){  super(msg,nested);  this.messages=messages;}  }
class C{  public void end() throws IOException {  mServer.stop(mStopTimer);synchronized (mSync) {    closeCurrentFile();  }  mThreadPoolExecutor.shutdown();}  }
class C{  @Override public Object extractKey(Object tuple,boolean isStream1Data){  return isStream1Data ? inputFieldObjects[0].keyGet.get(tuple) : inputFieldObjects[1].keyGet.get(tuple);}  }
class C{  public boolean isCalculationTypeAdd(){  return CALCULATIONTYPE_AddOp1PlusOp2.equals(getCalculationType());}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public final void resume(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    checkAccess();    for (int i=0; i < nthreads; i++) {      threads[i].resume();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  for (int i=0; i < ngroupsSnapshot; i++) {    groupsSnapshot[i].resume();  }}  }
class C{  public NdefMessage(NdefRecord[] records){  if (records.length < 1) {    throw new IllegalArgumentException("must have at least one record");  }  for (  NdefRecord r : records) {    if (r == null) {      throw new NullPointerException("records cannot contain null");    }  }  mRecords=records;}  }
class C{  public ContributionContextTypeRegistry(String registryId){  readRegistry(registryId);}  }
class C{  private void invokeListener(Byte plc,GridMessageListener lsnr,UUID nodeId,Object msg){  Byte oldPlc=CUR_PLC.get();  boolean change=F.eq(oldPlc,plc);  if (change)   CUR_PLC.set(plc);  try {    lsnr.onMessage(nodeId,msg);  }  finally {    if (change)     CUR_PLC.set(oldPlc);  }}  }
class C{  public boolean isNodeAncestor(TreeNode anotherNode){  if (anotherNode == null) {    return false;  }  TreeNode ancestor=this;  do {    if (ancestor == anotherNode) {      return true;    }  } while ((ancestor=ancestor.getParent()) != null);  return false;}  }
class C{  void assignFieldToLocal(Stmt stmt,Local right,String field,Local left){  Set<PurityNode> esc=new HashSet<PurityNode>();  Set<PurityNode> escaping=getEscaping();  localsRemove(left);  Iterator itRight=locals.get(right).iterator();  while (itRight.hasNext()) {    PurityNode nodeRight=(PurityNode)itRight.next();    Iterator itEdges=edges.get(nodeRight).iterator();    while (itEdges.hasNext()) {      PurityEdge edge=(PurityEdge)itEdges.next();      if (edge.isInside() && edge.getField().equals(field))       localsPut(left,edge.getTarget());    }    if (escaping.contains(nodeRight))     esc.add(nodeRight);  }  if (!esc.isEmpty()) {    PurityNode loadNode=cacheNode(new PurityStmtNode(stmt,false));    nodes.add(loadNode);    Iterator<PurityNode> itEsc=esc.iterator();    while (itEsc.hasNext()) {      PurityNode node=itEsc.next();      PurityEdge edge=cacheEdge(new PurityEdge(node,field,loadNode,false));      if (edges.put(node,edge))       backEdges.put(loadNode,edge);    }    localsPut(left,loadNode);  }  if (doCheck)   sanityCheck();}  }
class C{  public static Result organization(String organizationName){  Organization org=Organization.findByName(organizationName);  if (org == null) {    return notFound(ErrorViews.NotFound.render("error.notfound.organization"));  }  return ok(view.render(org));}  }
class C{  public boolean isRooted(){  boolean rootManagement=detectRootManagementApps();  boolean potentiallyDangerousApps=detectPotentiallyDangerousApps();  boolean suBinary=checkForBinary("su");  boolean busyboxBinary=checkForBinary("busybox");  boolean dangerousProps=checkForDangerousProps();  boolean rwSystem=checkForRWPaths();  boolean testKeys=detectTestKeys();  boolean testSuExists=checkSuExists();  boolean testRootNative=checkForRootNative();  return rootManagement || potentiallyDangerousApps || suBinary|| busyboxBinary|| dangerousProps|| rwSystem|| testKeys|| testSuExists|| testRootNative;}  }
class C{  @Override public short shortValue(){  return value;}  }
class C{  public void testSimpleCriticalPartitioning() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.setPartitions(4);  pqs.setMaxSize(10);  pqs.setSyncEnabled(false);  pqs.setPartitionerClass(ShardListPartitioner.class.getName());  pqs.configure(context);  pqs.prepare(context);  ShardListPartitioner partitioner=(ShardListPartitioner)pqs.getPartitioner();  TungstenProperties partCfg=new TungstenProperties();  partCfg.setString("(critical)","db0");  File partCfgFile=File.createTempFile("part2","properties");  FileOutputStream cfgFos=new FileOutputStream(partCfgFile);  partCfg.store(cfgFos);  cfgFos.close();  partitioner.setShardMap(partCfgFile);  pqs.setPartitioner(partitioner);  int[] eventPartitions=new int[3];  for (int i=0; i < 3; i++) {    ReplDBMSEvent event=createEvent(i,"db" + i);    pqs.put(0,event);    ReplDBMSEvent event2=null;    for (int p=0; p < 4; p++) {      if (pqs.peek(p) != null) {        eventPartitions[i]=p;        event2=(ReplDBMSEvent)pqs.get(p);        break;      }    }    assertNotNull("Must have found event again",event2);    assertEquals("Sequence number must match",i,event2.getSeqno());  }  for (int i=0; i <= 100; i++) {    int p=i % 3;    ReplDBMSEvent event=createEvent(i,"db" + p);    pqs.put(0,event);    assertNotNull("Must see event in queue",pqs.peek(eventPartitions[p]));    ReplDBMSEvent event2=(ReplDBMSEvent)pqs.get(eventPartitions[p]);    assertNotNull("Must have found event again",event2);    assertEquals("Sequence number must match",i,event2.getSeqno());  }  assertEquals("Total store size after test",0,pqs.getStoreSize());  pqs.release(context);  partCfgFile.delete();}  }
class C{  public String signMessage(String message,@Nullable KeyParameter aesKey) throws KeyCrypterException {  if (priv == null)   throw new IllegalStateException("This ECKey does not have the private key necessary for signing.");  byte[] data=Utils.formatMessageForSigning(message);  Sha256Hash hash=Sha256Hash.createDouble(data);  ECDSASignature sig=sign(hash,aesKey);  int recId=-1;  for (int i=0; i < 4; i++) {    ECKey k=ECKey.recoverFromSignature(i,sig,hash,isCompressed());    if (k != null && Arrays.equals(k.pub,pub)) {      recId=i;      break;    }  }  if (recId == -1)   throw new RuntimeException("Could not construct a recoverable key. This should never happen.");  int headerByte=recId + 27 + (isCompressed() ? 4 : 0);  byte[] sigData=new byte[65];  sigData[0]=(byte)headerByte;  System.arraycopy(Utils.bigIntegerToBytes(sig.r,32),0,sigData,1,32);  System.arraycopy(Utils.bigIntegerToBytes(sig.s,32),0,sigData,33,32);  return new String(Base64.encode(sigData),Charset.forName("UTF-8"));}  }
class C{  public XYPolygonAnnotation(double[] polygon,Stroke stroke,Paint outlinePaint,Paint fillPaint){  super();  ParamChecks.nullNotPermitted(polygon,"polygon");  if (polygon.length % 2 != 0) {    throw new IllegalArgumentException("The 'polygon' array must " + "contain an even number of items.");  }  this.polygon=(double[])polygon.clone();  this.stroke=stroke;  this.outlinePaint=outlinePaint;  this.fillPaint=fillPaint;}  }
class C{  private void addConnections(Collection<Connection> connections) throws GuacamoleException {  for (  Connection connection : connections) {    APIConnectionGroup parent=retrievedGroups.get(connection.getParentIdentifier());    if (parent != null) {      Collection<APIConnection> children=parent.getChildConnections();      if (children == null) {        children=new ArrayList<APIConnection>();        parent.setChildConnections(children);      }      APIConnection apiConnection=new APIConnection(connection);      retrievedConnections.put(connection.getIdentifier(),apiConnection);      children.add(apiConnection);    } else     logger.debug("Connection \"{}\" cannot be added to the tree: parent \"{}\" does not actually exist.",connection.getIdentifier(),connection.getParentIdentifier());  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.209 -0500",hash_original_method="623C745ED7578EC4227F3B15A38B5D4A",hash_generated_method="B10F93C097FE82E158B0DB65EFE2067A") public MimeVersionHeader createMimeVersionHeader(int majorVersion,int minorVersion) throws InvalidArgumentException {  if (majorVersion < 0 || minorVersion < 0)   throw new javax.sip.InvalidArgumentException("bad major/minor version");  MimeVersion m=new MimeVersion();  m.setMajorVersion(majorVersion);  m.setMinorVersion(minorVersion);  return m;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  Attribute[] attrs=toArray();  s.writeInt(attrs.length);  for (int i=0; i < attrs.length; i++) {    s.writeObject(attrs[i]);  }}  }
class C{  public static void add(String extension,String contentType){  if (extension == null || extension.length() == 0 || contentType == null || contentType.length() == 0) {    return;  }  contentTypes.put(extension,contentType);}  }
class C{  public static Model readFrom(InputStream is) throws IOException {  return fetchModel(XMLTree.from(requireNonNull(is,"Required not null input stream")));}  }
class C{  @SuppressWarnings("unchecked") public static <T>Lazyable<List<T>> ofList(){  return (Lazyable<List<T>>)(Object)ofArrayList();}  }
class C{  @Override public float tf(float freq){  return (float)Math.sqrt(freq);}  }
class C{  public QueryParams buildQueryParams(Map<String,Set<String>> queryParams){  QueryParams deserializedQueryParams=new QueryParams();  try {    deserializedQueryParams.setFilters(this.queryParamsParser.parseFiltersParameters(queryParams));    deserializedQueryParams.setSorting(this.queryParamsParser.parseSortingParameters(queryParams));    deserializedQueryParams.setGrouping(this.queryParamsParser.parseGroupingParameters(queryParams));    deserializedQueryParams.setPagination(this.queryParamsParser.parsePaginationParameters(queryParams));    deserializedQueryParams.setIncludedFields(this.queryParamsParser.parseIncludedFieldsParameters(queryParams));    deserializedQueryParams.setIncludedRelations(this.queryParamsParser.parseIncludedRelationsParameters(queryParams));  } catch (  KatharsisException e) {    throw e;  }catch (  RuntimeException e) {    throw new ParametersDeserializationException(e.getMessage());  }  return deserializedQueryParams;}  }
class C{  private boolean isIncluded_L1(final IRepFilterBean filterBean,final Context context){switch ((FilterByGroup)filterBean.getFilterByGroup()) {case ALL_PLAYERS:    for (    final IUser u : context.repProc.getPlayerUsers()) {      context.user=u;      if (!isIncluded_L2(filterBean,context))       return false;    }  return true;case ANY_PLAYER:for (final IUser u : context.repProc.getPlayerUsers()) {  context.user=u;  if (isIncluded_L2(filterBean,context))   return true;}return false;case PLAYER_A:case PLAYER_B:case PLAYER_C:case PLAYER_D:context.user=context.filterByGroupUserMap.get(filterBean.getFilterByGroup());default :return isIncluded_L2(filterBean,context);}}  }
class C{  public boolean isGuardOutput(){  return (flags & GUARD_OUTPUT) != 0;}  }
class C{  public void testGetInstance() throws Exception {  try {    ExemptionMechanism.getInstance((String)null,"aaa");    fail("NoSuchProviderException must be thrown");  } catch (  NoSuchProviderException pe) {  }  try {    ExemptionMechanism.getInstance("AlgName",(String)null);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public boolean isTableLoaded(){  return _tableManager.getTable(_tableName) != null;}  }
class C{  public void initialise() throws CarbonDataWriterException {  fileManager=new FileManager();  fileManager.setName(new File(this.storeLocation).getName());  setWritingConfiguration();}  }
class C{  public Rfc822Msg(){  this(null,Encoding.NONE);}  }
class C{  public static double[] toDoubleArray(Float[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.181 -0400",hash_original_method="498D343F9E83CB06D9E88720A3570206",hash_generated_method="6DAC4BCEDF77481D939D5B7849BFA5A2") public static LineIterator lineIterator(File file) throws IOException {  return lineIterator(file,null);}  }
class C{  public EventSource close(){  readyState=CLOSED;  clientHandler.close();  return this;}  }
class C{  @HLEFunction(nid=0xDFE53E03,version=150) public int sceNetAdhocPdpRecv(@CheckArgument("checkPdpId") int id,TPointer srcMacAddr,TPointer16 portAddr,TPointer data,TPointer32 dataLengthAddr,int timeout,int nonblock){  int result=pdpObjects.get(id).recv(srcMacAddr,portAddr,data,dataLengthAddr,timeout,nonblock);  return result;}  }
class C{  public final boolean peekOrTrue(){  return (m_index > -1) ? m_values[m_index] : true;}  }
class C{  public BinaryLogicalOperator createBinaryLogicalOperatorFromString(EDataType eDataType,String initialValue){  BinaryLogicalOperator result=BinaryLogicalOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static String localizeContractCode(String str,Variable... vars){  for (int i=0; i < vars.length; i++) {    str=str.replaceAll("x" + i,vars[i].getName());  }  return str;}  }
class C{  private void deleteAndRetrieveUnmodifiedPoi(final Poi poi){  poiManager.deletePoi(poi);  if (poi.getBackendId() != null) {    Poi backendPoi=backend.getPoiById(poi.getBackendId());    if (backendPoi != null) {      poiManager.savePoi(backendPoi);    } else {      Timber.w("The poi with id %s couldn't be found ",poi.getBackendId());    }  }}  }
class C{  @Override public String globalInfo(){  return "A simple filter for sorting the labels of nominal attributes.";}  }
class C{  static MediaType createTextType(String subtype){  return create(TEXT_TYPE,subtype);}  }
class C{  public static int hash(int hash,double item){  long l=Double.doubleToLongBits(item);  return seed * prime + (int)(l ^ (l >>> 32));}  }
class C{  public static SimpleBigDecimal norm(final byte mu,SimpleBigDecimal u,SimpleBigDecimal v){  SimpleBigDecimal norm;  SimpleBigDecimal s1=u.multiply(u);  SimpleBigDecimal s2=u.multiply(v);  SimpleBigDecimal s3=v.multiply(v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double fromRangeSize=fromHigh - fromLow;  double toRangeSize=toHigh - toLow;  double valueScale=(value - fromLow) / fromRangeSize;  return toLow + (valueScale * toRangeSize);}  }
class C{  final public long m(){  return m;}  }
class C{  public void parseTemplate(String templateFile) throws ReplicatorException {  try {    template=velocity.getTemplate(templateFile);  } catch (  ResourceNotFoundException rnfe) {    throw new ReplicatorException("Couldn't open the template",rnfe);  }catch (  ParseErrorException pee) {    throw new ReplicatorException("Problem parsing the template",pee);  }}  }
class C{  private static int writeSize(Annotations annotations){  try {    return (annotations.size() * ENTRY_WRITE_SIZE) + 4;  } catch (  NullPointerException ex) {    throw new NullPointerException("list == null");  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public static boolean isKnownAsParameterUse(BytecodeInstruction instruction){  return knownParameterUses.contains(instruction);}  }
class C{  @Override public Float put(V key,Float value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public EntityQuery cursorScrollInsensitive(){  this.resultSetType=EntityFindOptions.TYPE_SCROLL_INSENSITIVE;  return this;}  }
class C{  public void renameFactor(String oldName,String newName){  try {    lagGraph.renameFactor(oldName,newName);    getPropertyChangeManager().firePropertyChange("factorRenamed",oldName,newName);  } catch (  IllegalArgumentException e) {  }}  }
class C{  private void syncShardStatsOnNewMaster(ClusterChangedEvent event){  SnapshotsInProgress snapshotsInProgress=event.state().custom(SnapshotsInProgress.TYPE);  if (snapshotsInProgress == null) {    return;  }  for (  SnapshotsInProgress.Entry snapshot : snapshotsInProgress.entries()) {    if (snapshot.state() == SnapshotsInProgress.State.STARTED || snapshot.state() == SnapshotsInProgress.State.ABORTED) {      Map<ShardId,IndexShardSnapshotStatus> localShards=currentSnapshotShards(snapshot.snapshotId());      if (localShards != null) {        ImmutableMap<ShardId,SnapshotsInProgress.ShardSnapshotStatus> masterShards=snapshot.shards();        for (        Map.Entry<ShardId,IndexShardSnapshotStatus> localShard : localShards.entrySet()) {          ShardId shardId=localShard.getKey();          IndexShardSnapshotStatus localShardStatus=localShard.getValue();          SnapshotsInProgress.ShardSnapshotStatus masterShard=masterShards.get(shardId);          if (masterShard != null && masterShard.state().completed() == false) {            if (localShardStatus.stage() == IndexShardSnapshotStatus.Stage.DONE) {              logger.debug("[{}] new master thinks the shard [{}] is not completed but the shard is done locally, updating status on the master",snapshot.snapshotId(),shardId);              updateIndexShardSnapshotStatus(snapshot.snapshotId(),shardId,new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(),SnapshotsInProgress.State.SUCCESS));            } else             if (localShard.getValue().stage() == IndexShardSnapshotStatus.Stage.FAILURE) {              logger.debug("[{}] new master thinks the shard [{}] is not completed but the shard failed locally, updating status on master",snapshot.snapshotId(),shardId);              updateIndexShardSnapshotStatus(snapshot.snapshotId(),shardId,new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(),SnapshotsInProgress.State.FAILED,localShardStatus.failure()));            }          }        }      }    }  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static void fillAllVariablesInScope(Map<String,VarSymbol> vars,Stack<JCTree> scanningStack,JCTree from,JCTree to){  if (from == to) {    return;  }  int i=scanningStack.indexOf(from);  if (i == -1 || i == 0) {    return;  }  JCTree parent=scanningStack.get(i - 1);  List<JCStatement> statements=null;switch (parent.getKind()) {case BLOCK:    statements=((JCBlock)parent).stats;  break;case CASE:statements=((JCCase)parent).stats;break;case CATCH:putVar(vars,((JCCatch)parent).param.sym);break;case FOR_LOOP:if (((JCForLoop)parent).init != null) {for (JCStatement s : ((JCForLoop)parent).init) {if (s instanceof JCVariableDecl) {putVar(vars,((JCVariableDecl)s).sym);}}}break;case ENHANCED_FOR_LOOP:putVar(vars,((JCEnhancedForLoop)parent).var.sym);break;case METHOD:for (JCVariableDecl var : ((JCMethodDecl)parent).params) {putVar(vars,var.sym);}break;default :}if (statements != null) {for (JCStatement s : statements) {if (s == from) {break;} else if (s instanceof JCVariableDecl) {putVar(vars,((JCVariableDecl)s).sym);}}}fillAllVariablesInScope(vars,scanningStack,parent,to);}  }
class C{  public static ModifiableHyperBoundingBox intersection(final SpatialComparable box1,final SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  double[] min=new double[dim];  double[] max=new double[dim];  for (int i=0; i < dim; i++) {    min[i]=Math.max(box1.getMin(i),box2.getMin(i));    max[i]=Math.min(box1.getMax(i),box2.getMax(i));    if (min[i] > max[i]) {      return null;    }  }  return new ModifiableHyperBoundingBox(min,max);}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(Entry<? extends K,? extends V> entry){  builderMultimap.put(checkNotNull(entry.getKey()),checkNotNull(entry.getValue()));  return this;}  }
class C{  public void testVerifyWeblogicHomeWhenValidConfiguration() throws Exception {  this.fsManager.resolveFile(WL_HOME + "/server/lib/weblogic.jar").createFile();  this.container.setFileHandler(this.fileHandler);  this.container.verifyWeblogicHome();}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public String show(){  StringBuffer tStrHTML=new StringBuffer();  Enumeration thisEnum=null;  tStrHTML.append("      <size>" + this.getSize() + "</size>\n");  thisEnum=this.getKeys();  while (thisEnum.hasMoreElements()) {    tStrHTML.append("      <item>" + thisEnum.nextElement() + "</item>\n");  }  return tStrHTML.toString();}  }
class C{  private double computeReferenceAngle(){  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();  return r1 - r2;}  }
class C{  private List<Map<String,Object>> typeParameters(List<TypeParameter> tpl,Declaration from){  if (tpl != null && !tpl.isEmpty()) {    List<Map<String,Object>> l=new ArrayList<>(tpl.size());    for (    TypeParameter tp : tpl) {      l.add(typeParameterMap(tp,from));    }    return l;  }  return null;}  }
class C{  public RandomLoadBalanceStrategy(FailStrategy failStrategy){  this.failStrategy=failStrategy;}  }
class C{  public boolean validSystemNameFormat(String systemName){  if (tc.getNodeFromName(addressFromSystemName(systemName)) == null && tc.getNodeFromAddress(addressFromSystemName(systemName)) == null) {    try {      if (tc.getNodeFromAddress(Integer.parseInt(addressFromSystemName(systemName))) == null) {        return false;      } else {        return (pinFromSystemName(systemName) >= 0 && pinFromSystemName(systemName) <= 7);      }    } catch (    java.lang.NumberFormatException nfe) {      return false;    }  } else {    return (pinFromSystemName(systemName) >= 0 && pinFromSystemName(systemName) <= 7);  }}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  int nodeType=_nodeType;  int node=_startNode;  int expType=getExpandedTypeID(node);  _currentNode=node;  if (nodeType >= DTM.NTYPES) {    if (nodeType == expType) {      return returnNode(node);    }  } else {    if (expType < DTM.NTYPES) {      if (expType == nodeType) {        return returnNode(node);      }    } else {      if (m_expandedNameTable.getType(expType) == nodeType) {        return returnNode(node);      }    }  }  return END;}  }
class C{  private static boolean volumeIsInAnotherExportMask(ExportMask exportMask,String volumeURIString,TreeMultimap<String,URI> volumesToExportMasks){  boolean isInAnotherMask=false;  if (volumesToExportMasks.containsKey(volumeURIString)) {    Set<URI> exportMaskURIs=new HashSet<>(volumesToExportMasks.get(volumeURIString));    exportMaskURIs.remove(exportMask.getId());    isInAnotherMask=!exportMaskURIs.isEmpty();  }  return isInAnotherMask;}  }
class C{  public static void displayAppPrivacyPolicy(final Activity activity){  displayInWebview(activity,"https://riot.im/privacy");}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMDescElement(prefix,(AbstractDocument)doc);}  }
class C{  private String parseString(String[] ss,int ix){  if (ss.length <= ix)   return ""; else {    String s=ss[ix];    return s.isEmpty() ? "" : s;  }}  }
class C{  static <T1,T2>Seq<Tuple2<T1,T2>> withLatest(final SimpleReactStream<T1> left,final SimpleReactStream<T2> right){  return withLatest(left,right,null);}  }
class C{  public RestClientBuilder authenticationToken(AuthenticationToken token){  if (token.getAuthMode() == AuthenticationMode.SHARED_SECRET_KEY) {    headers.add(HttpHeaders.AUTHORIZATION,token.getSharedSecretKey());  } else   if (token.getAuthMode() == AuthenticationMode.BASIC_AUTH) {    String base64=Base64.encodeAsString(token.getUsername() + ":" + token.getPassword());    headers.add(HttpHeaders.AUTHORIZATION,"Basic " + base64);  }  this.token=token;  return this;}  }
class C{  public void close() throws SQLException {  if (triggerCallback != null) {    triggerCallback.close();  }}  }
class C{  public byte[] generate160BitHashId() throws CryptoException {  try {    DERBitString publicKeyBitString=encodePublicKeyAsBitString(publicKey);    return DigestUtil.getMessageDigest(publicKeyBitString.getBytes(),DigestType.SHA1);  } catch (  IOException ex) {    throw new CryptoException(res.getString("NoGenerateKeyIdentifier.exception.message"),ex);  }}  }
class C{  public RegexFileFilter(String pattern){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=Pattern.compile(pattern);}  }
class C{  public static boolean delete(final File pFileOrDirectory){  if (pFileOrDirectory.isDirectory()) {    final String[] children=pFileOrDirectory.list();    final int childCount=children.length;    for (int i=0; i < childCount; i++) {      final boolean success=FileUtils.delete(new File(pFileOrDirectory,children[i]));      if (!success) {        return false;      }    }  }  return pFileOrDirectory.delete();}  }
class C{  static Random random(){  if (null == LUCENE_TEST_CASE) {    return null;  } else {    try {      Method randomMethod=LUCENE_TEST_CASE.getMethod("random");      return (Random)randomMethod.invoke(null);    } catch (    Exception e) {      throw new IllegalStateException("Unable to use reflection to invoke LuceneTestCase.random()",e);    }  }}  }
class C{  public SmsAction(final ConfAction params){  super(params);  sm=SmsManager.getDefault();}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  handler.removeMessages(SCROLL_WHAT);}  }
class C{  public HttpRequest(Method method,HttpURI uri,boolean async){  this.id=nextId++;  if (uri == null) {    LOG.severe("HTTP request URL is null");    throw new IllegalArgumentException("HTTP request URL is null");  }  if (method == null) {    LOG.severe("Invalid Method in an HTTP request");    throw new IllegalArgumentException("Invalid Method in an HTTP request");  }  this.method=method;  this.uri=uri;  this.async=async;}  }
class C{  private boolean isFieldMappingMissingField(ImmutableMap<String,ImmutableMap<String,ImmutableMap<String,FieldMappingMetaData>>> mappingsByIndex) throws IOException {  if (mappingsByIndex.size() != 1) {    return false;  }  for (  ImmutableMap<String,ImmutableMap<String,FieldMappingMetaData>> value : mappingsByIndex.values()) {    for (    ImmutableMap<String,FieldMappingMetaData> fieldValue : value.values()) {      for (      Map.Entry<String,FieldMappingMetaData> fieldMappingMetaDataEntry : fieldValue.entrySet()) {        if (fieldMappingMetaDataEntry.getValue().isNull()) {          return true;        }      }    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cmd=getString(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null) {synchronized (tun) {      tun.getRemoteInfo(remoteName);      tun.setConfirmKey(cmd);      tun.saveChanges();    }  }  return null;}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,char[] match){  int length=offset + match.length;  char[] textArray=text.array;  if (length > text.offset + text.count)   return false;  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match[j];    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2)     return false;  }  return true;}  }
class C{  public void paintArrowButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static SettingsFragment newInstance(String param1,String param2){  SettingsFragment fragment=new SettingsFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public String globalInfo(){  return "Class implementing the Cobweb and Classit clustering algorithms.\n\n" + "Note: the application of node operators (merging, splitting etc.) in " + "terms of ordering and priority differs (and is somewhat ambiguous) "+ "between the original Cobweb and Classit papers. This algorithm always "+ "compares the best host, adding a new leaf, merging the two best hosts, "+ "and splitting the best host when considering where to place a new "+ "instance.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  protected BatchContains(final IRabaCoder keysCoder,final int fromIndex,final int toIndex,final byte[][] keys){  super(keysCoder,null,fromIndex,toIndex,keys,null);}  }
class C{  static synchronized void initializeExecutorService(){  if (execService == null || execService.isShutdown() || execService.isTerminated()) {    int numThreads=(TEST_NUM_THREADS > 1 ? TEST_NUM_THREADS : NUM_THREADS);    execService=Executors.newFixedThreadPool(numThreads);  }}  }
class C{  public GuacamoleClientOverrunException(Throwable cause){  super(cause);}  }
class C{  @Override public boolean delete(DBIDRef id){  O obj=relation.get(id);  IndexTreePath<SpatialEntry> deletionPath=findPathToObject(getRootPath(),obj,id);  if (deletionPath == null) {    return false;  }  deletePath(deletionPath);  return true;}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,ContentHandler handler) throws TransformerException {  SerializationHandler xoh=this.getSerializationHandler();  SerializationHandler savedHandler=xoh;  try {    xoh.flushPending();    LexicalHandler lex=null;    if (handler instanceof LexicalHandler) {      lex=(LexicalHandler)handler;    }    m_serializationHandler=new ToXMLSAXHandler(handler,lex,savedHandler.getEncoding());    m_serializationHandler.setTransformer(this);    executeChildTemplates(elem,true);  } catch (  TransformerException e) {    throw e;  }catch (  SAXException se) {    throw new TransformerException(se);  } finally {    m_serializationHandler=savedHandler;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  @Override public void populate(ChunkManager level,int chunkX,int chunkZ,BukkitPERandom random){}  }
class C{  public IconicsDrawable contourColorRes(int contourColorRes){  mContourPaint.setColor(mContext.getResources().getColor(contourColorRes));  drawContour(true);  invalidateSelf();  return this;}  }
class C{  public CompilationUnitScope scope(){  return null;}  }
class C{  public MAVLinkMessage(MAVLinkSchema schema,ByteBuffer buffer) throws MAVLinkProtocolException, MAVLinkUnknownMessage, BufferUnderflowException {  if (buffer.remaining() < NON_PAYLOAD_LENGTH) {    throw new BufferUnderflowException();  }  int startPos=buffer.position();  byte startSign=buffer.get();  if (startSign != START_OF_FRAME) {    throw new MAVLinkProtocolException(String.format("Invalid start sign: %02x, should be %02x",startSign,START_OF_FRAME));  }  int payloadLen=buffer.get() & 0xff;  if (buffer.remaining() < payloadLen + NON_PAYLOAD_LENGTH - 2) {    buffer.position(startPos);    throw new BufferUnderflowException();  }  sequence=buffer.get();  systemID=buffer.get() & 0xff;  componentID=buffer.get() & 0xff;  msgID=buffer.get() & 0xff;  this.schema=schema;  this.definition=schema.getMessageDefinition(msgID);  if (definition == null) {    buffer.position(buffer.position() + payloadLen + CRC_LENGTH);    throw new MAVLinkUnknownMessage(String.format("Unknown message: %s",msgID));  }  if (payloadLen != definition.payloadLength) {    buffer.position(buffer.position() + payloadLen + CRC_LENGTH);    throw new MAVLinkUnknownMessage(String.format("Invalid payload len for msg %s (%s): %s, should be %s",definition.name,msgID,payloadLen,definition.payloadLength));  }  this.payload=new byte[definition.payloadLength];  buffer.get(payload);  crc=Short.reverseBytes(buffer.getShort()) & 0xffff;  int endPos=buffer.position();  buffer.position(startPos);  int crcCalc=calculateCRC(buffer);  buffer.position(endPos);  if (crc != crcCalc) {    throw new MAVLinkUnknownMessage(String.format("CRC error for msg %s (%s): %02x, should be %02x",definition.name,msgID,crc,crcCalc));  }  this.payloadBB=ByteBuffer.wrap(payload);  payloadBB.order(schema.getByteOrder());}  }
class C{  public void dataSourceAdded(int index){  update();  updateCoordinateProjectionComboBoxes();}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  private void addBindingData(final String name,final ASTNode nameNode,final Map<String,Integer> scopeBindings){  final Integer variableId=scopeBindings.get(name);  if (variableId == null || !variableBinding.containsKey(variableId)) {    return;  }  variableBinding.get(variableId).add(nameNode);}  }
class C{  private static void copyFile(InputStream stream,OutputStream outStream) throws IOException {  int len;  final byte[] buffer=new byte[CarbonCommonConstants.BYTEBUFFER_SIZE];  try {    for (; ; ) {      len=stream.read(buffer);      if (len == -1) {        return;      }      outStream.write(buffer,0,len);    }  } catch (  IOException e) {    throw e;  } finally {    CarbonUtil.closeStreams(stream,outStream);  }}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public SessionCacheRetrievalPostProcessor(SessionCache cache,Object cacheKey,AbsentResourceList absentResourceList,long resourceID,PropertyChangeListener propertyListener,String propertyName){  if (cache == null) {    String message=Logging.getMessage("nullValue.CacheIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (cacheKey == null) {    String message=Logging.getMessage("nullValue.CacheKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.cache=cache;  this.cacheKey=cacheKey;  this.absentResourceList=absentResourceList;  this.resourceID=resourceID;  this.propertyListener=propertyListener;  this.propertyName=propertyName;}  }
class C{  public @Test final void testRemoveUser(){  Role role=new Role(TEST_ROLE);  User user=new User(TEST_ROLE);  role.addUser(user);  assertThat(role.getUsers()).hasSize(1);  role.removeUser(user);  assertThat(role.getUsers()).hasSize(0);}  }
class C{  public void removeDropListener(ActionListener l){  if (dropListener == null) {    return;  }  dropListener.removeListener(l);  if (!dropListener.hasListeners()) {    dropListener=null;  }}  }
class C{  public static void printStutteringState(int num){  MP.printState(EC.TLC_STATE_PRINT3,new String[]{String.valueOf(num + 1)},(TLCState)null,num + 1);}  }
class C{  public MapBuilder<K,V> withHashCapacity(int capacity){  this.hashCapacity=capacity;  return this;}  }
class C{  @LmlAction("switch") public void switchTemplate(final Button actor){  buttonManager.switchCheckedButton(actor);  final String templateName=LmlUtilities.getActorId(actor);  templateInput.setText(Gdx.files.internal(toExamplePath(templateName)).readString());  parseTemplate();}  }
class C{  public void log(String message,LogLevel level){  log(message,level.getName().toUpperCase(),level.getColor().name().toLowerCase(),level.getPrintSteam());}  }
class C{  public void add(String fieldName,String value){  if (fieldName == null)   throw new IllegalArgumentException("fieldname == null");  if (value == null)   throw new IllegalArgumentException("value == null");  if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {    throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value);  }  addLenient(fieldName,value);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'TimeLock' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BEYOND_TIME_MANAGER' INTEGER,"+ "'PACKAGE_NAME' TEXT);");}  }
class C{  public void attachSprite(Sprite sprite,HorizontalAlignment xAlign,VerticalAlignment yAlign,int xOffset,int yOffset){  int x=xOffset;switch (xAlign) {case LEFT:    break;case RIGHT:  x+=getWidth() - sprite.getWidth();break;case CENTER:x+=(getWidth() - sprite.getWidth()) / 2;break;}int y=yOffset;switch (yAlign) {case TOP:break;case MIDDLE:y+=(getHeight() - sprite.getHeight()) / 2;break;case BOTTOM:y+=getHeight() - sprite.getHeight();break;}synchronized (this) {if (attachedSprites == null) {attachedSprites=new ConcurrentLinkedQueue<AttachedSprite>();}}attachedSprites.add(new AttachedSprite(sprite,x,y));}  }
class C{  public boolean containsObject(Object obj){  NSObject nso=NSObject.fromJavaObject(obj);  for (  NSObject elem : array) {    if (elem == null) {      if (obj == null)       return true;      continue;    }    if (elem.equals(nso)) {      return true;    }  }  return false;}  }
class C{  @Override public WebTarget target(URI uri){  return new MSF4JWebTarget(this,uri,providerComponents);}  }
class C{  public void printJavaTypeToObject(String value,Class<?> javaType) throws IOException {  if (Object.class.isAssignableFrom(javaType))   print(value); else   if (javaType.equals(boolean.class))   print("new Boolean(" + value + ")"); else   if (javaType.equals(byte.class))   print("new Byte(" + value + ")"); else   if (javaType.equals(short.class))   print("new Short(" + value + ")"); else   if (javaType.equals(int.class))   print("new Integer(" + value + ")"); else   if (javaType.equals(long.class))   print("new Long(" + value + ")"); else   if (javaType.equals(char.class))   print("String.valueOf(" + value + ")"); else   if (javaType.equals(float.class))   print("new Float(" + value + ")"); else   if (javaType.equals(double.class))   print("new Double(" + value + ")"); else   print(value);}  }
class C{  @SuppressWarnings({"CatchGenericClass"}) public static void stopGrid(String gridName,IgniteLogger log){  try {    G.stop(gridName,false);  } catch (  Throwable e) {    U.error(log,"Failed to stop grid: " + gridName,e);  }}  }
class C{  @Override public void eventHappened(MapEvent event){  if (event.getType() == MapEvent.Type.MAP_CLEARED || event.getType() == MapEvent.Type.MAP_NEW) {    entityFinder=null;    updateResults(true);  }}  }
class C{  public SafeTimeTracker(){}  }
class C{  public boolean isConnectedToMobile(){  return mCurrentNetworkInterface == getMobileNetworkInterface();}  }
class C{  public Boolean isChrgsApldInd(){  return chrgsApldInd;}  }
class C{  public static void fillMappedField(Class<?> configuredClass,MappedField mappedField){  JMapAccessor accessor=getClassAccessors(configuredClass,mappedField.getValue().getName(),false);  if (isNull(accessor))   accessor=getFieldAccessors(configuredClass,mappedField.getValue());  if (isNull(accessor))   return;  if (mappedField.getMethod().equals(Constants.DEFAULT_ACCESSOR_VALUE) && !accessor.get().equals(Constants.DEFAULT_ACCESSOR_VALUE))   mappedField.getMethod(accessor.get());  if (mappedField.setMethod().equals(Constants.DEFAULT_ACCESSOR_VALUE) && !accessor.set().equals(Constants.DEFAULT_ACCESSOR_VALUE))   mappedField.setMethod(accessor.set());}  }
class C{  public boolean removeEdge(Edge e){  if (!edges.remove(e))   return false;  e.remove();  if (srcUnitToEdge.get(e.srcUnit()) == e) {    if (e.nextByUnit().srcUnit() == e.srcUnit()) {      srcUnitToEdge.put(e.srcUnit(),e.nextByUnit());    } else {      srcUnitToEdge.put(e.srcUnit(),null);    }  }  if (srcMethodToEdge.get(e.getSrc()) == e) {    if (e.nextBySrc().getSrc() == e.getSrc()) {      srcMethodToEdge.put(e.getSrc(),e.nextBySrc());    } else {      srcMethodToEdge.put(e.getSrc(),null);    }  }  if (tgtToEdge.get(e.getTgt()) == e) {    if (e.nextByTgt().getTgt() == e.getTgt()) {      tgtToEdge.put(e.getTgt(),e.nextByTgt());    } else {      tgtToEdge.put(e.getTgt(),null);    }  }  return true;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public void prepareConcolicExecution(){  stopped=false;  ignoreCallback=false;  zeroPathCallbacks();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.331 -0500",hash_original_method="8491D5DB3EE7F3091D07F531500A5169",hash_generated_method="A0D1B874691031EEBD4E550BA5530EF4") public static String defaultTimeZoneForMcc(int mcc){  MccEntry entry;  entry=entryForMcc(mcc);  if (entry == null || entry.iso == null) {    return null;  } else {    Locale locale;    if (entry.language == null) {      locale=new Locale(entry.iso);    } else {      locale=new Locale(entry.language,entry.iso);    }    String[] tz=TimeZones.forLocale(locale);    if (tz.length == 0)     return null;    return tz[0];  }}  }
class C{  public void createPictScenario05_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-30 10:00:00"));  String supplierAdminId="Pict05_1_Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict05_1_SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),2);  String customerAdminId="Pict05_1_Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict05_1_CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_05_1",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT05_1_UNIT_WEEK,technicalService,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_05_1",serviceDetails,customerAdmin,role);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT05_1_RATA_WEEK_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT05_1_RATA_WEEK,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 11:00:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  upgradedSubDetails.setSubscriptionId("PICT_TEST_05_1" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-02-03 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05_1",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05_1",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_05_1",customer);}  }
class C{  public JViewport(){  super();  setLayout(createLayoutManager());  setOpaque(true);  updateUI();  setInheritsPopupMenu(true);}  }
class C{  private boolean isAnyNodeInState(String state,boolean isVersioned) throws Exception {  List<Configuration> configs=coordinator.queryAllConfiguration(coordinator.getSiteId(),coordinator.getVersionedDbConfigPath(serviceName,getDbsvcVersion(isVersioned)));  for (int i=0; i < configs.size(); i++) {    Configuration config=configs.get(i);    String value=config.getConfig(state);    if (value != null && Boolean.parseBoolean(value)) {      return true;    }  }  return false;}  }
class C{  public boolean isIPVoiceCallSupported(){  return false;}  }
class C{  public void readTemperature(Callback<Integer> callback){  addCallback(BeanMessageID.CC_TEMP_READ,callback);  sendMessageWithoutPayload(BeanMessageID.CC_TEMP_READ);}  }
class C{  public In(Scanner scanner){  this.scanner=scanner;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static int maximumSumNonAdjacentSubSequence(int[] a){  int incl=a[0], excl=0, prevIncl=incl;  for (int i=1; i < a.length; i++) {    incl=excl + a[i];    excl=Math.max(prevIncl,excl);    prevIncl=incl;  }  return Math.max(incl,excl);}  }
class C{  public void testNestedOuterJoin() throws Exception {  check("t OUTER JOIN (t2 OUTER JOIN t3 ON t2.id=t3.id) ON t.id=t2.id","{oj t OUTER JOIN ({oj t2 OUTER JOIN t3 ON t2.id=t3.id}) ON t.id=t2.id}");  check("select * from t OUTER JOIN (t2 OUTER JOIN t3 ON t2.id=t3.id) ON t.id=t2.id","select * from {oj t OUTER JOIN ({oj  t2 OUTER JOIN t3 ON t2.id=t3.id}) ON t.id=t2.id}");  check("select * from t OUTER JOIN (t2 OUTER JOIN t3 ON t2.id=t3.id) ON t.id=t2.id ORDER BY t2.id","select * from {oj t OUTER JOIN ({oj t2 OUTER JOIN t3 ON t2.id=t3.id}) ON t.id=t2.id} ORDER BY t2.id");}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public boolean isRevenueRecognition(){  return m_C_RevenueRecognition_ID != 0;}  }
class C{  public static int interfaceModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| STRICT;}  }
class C{  public XmlNamespace(String alias,String uri){  Preconditions.checkNotNull(uri,"Null namespace URI");  this.alias=alias;  this.uri=uri;}  }
class C{  private boolean srdfOpRequiresVplexCacheFlush(String op){  return Arrays.asList(srdfFlushableOps).contains(op);}  }
class C{  public static void skip(TProtocol prot,byte type) throws TException {  skip(prot,type,maxSkipDepth);}  }
class C{  public MockNioSession(InetSocketAddress locAddr,InetSocketAddress rmtAddr){  this();  this.locAddr=locAddr;  this.rmtAddr=rmtAddr;}  }
class C{  private boolean validateZoneName(String name,String deviceType){  boolean validZoneName=false;  if (name != null && name.length() > ZONE_NAME_LENGTH) {    _log.info("Zone name {} is not valid for device type {}",name,deviceType);    throw APIException.badRequests.nameZoneLongerThanAllowed(name,ZONE_NAME_LENGTH);  }  if (deviceType != null) {    if (deviceType.equalsIgnoreCase(Type.brocade.toString())) {      if (name.matches(BROCADE_ZONE_NAME_EXP)) {        validZoneName=true;      }    } else     if (deviceType.equalsIgnoreCase(Type.mds.toString())) {      if (name.matches(CISCO_ZONE_NAME_EXP)) {        validZoneName=true;      }    }  }  if (!validZoneName) {    _log.info("Zone name {} is not valid for device type {}",name,deviceType);    throw APIException.badRequests.illegalZoneName(name);  }  _log.info("Zone name {} is valid for device type {}",name,deviceType);  return validZoneName;}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  double sumOfWeights=0;  m_Class=instances.classAttribute();  m_ClassValue=0;switch (instances.classAttribute().type()) {case Attribute.NUMERIC:    m_Counts=null;  break;case Attribute.NOMINAL:m_Counts=new double[instances.numClasses()];for (int i=0; i < m_Counts.length; i++) {m_Counts[i]=1;}sumOfWeights=instances.numClasses();break;}Enumeration<Instance> enu=instances.enumerateInstances();while (enu.hasMoreElements()) {Instance instance=enu.nextElement();if (!instance.classIsMissing()) {if (instances.classAttribute().isNominal()) {m_Counts[(int)instance.classValue()]+=instance.weight();} else {m_ClassValue+=instance.weight() * instance.classValue();}sumOfWeights+=instance.weight();}}if (instances.classAttribute().isNumeric()) {if (Utils.gr(sumOfWeights,0)) {m_ClassValue/=sumOfWeights;}} else {m_ClassValue=Utils.maxIndex(m_Counts);Utils.normalize(m_Counts,sumOfWeights);}}  }
class C{  @Override public WbXmlContent parse(WbXmlParser parser,byte[] data) throws IOException {  WbXmlContent res;  WbXmlDocument doc=null;  try {    ByteArrayInputStream bis=new ByteArrayInputStream(data);    WbXmlParser tmp=new WbXmlParser(bis);    doc=tmp.parse();    res=new WbXmlContent(doc.getBody().getElement());  } catch (  Exception e) {    res=new WbXmlContent(new String(data,parser.getCharset()));  }  if (res.isElement() && doc != null && parser.getDefinition().getLinkedDef(doc.getDefinition().getName()) == null) {    throw new IOException(String.format("The definition %s is not defined as linked!",doc.getDefinition().getName()));  }  return res;}  }
class C{  public static void initializeJavaObject(Object obj,String clsName,@Nullable Map<String,Object> props,@Nullable GridKernalContext ctx){  if (props != null) {    for (    Map.Entry<String,Object> prop : props.entrySet()) {      String fieldName=prop.getKey();      if (fieldName == null)       throw new IgniteException("Java object/factory field name cannot be null: " + clsName);      Field field=U.findField(obj.getClass(),fieldName);      if (field == null)       throw new IgniteException("Java object/factory class field is not found [" + "className=" + clsName + ", fieldName="+ fieldName+ ']');      try {        field.set(obj,prop.getValue());      } catch (      Exception e) {        throw new IgniteException("Failed to set Java object/factory field [className=" + clsName + ", fieldName="+ fieldName+ ", fieldValue="+ prop.getValue()+ ']',e);      }    }  }  if (ctx != null) {    try {      ctx.resource().injectGeneric(obj);    } catch (    IgniteCheckedException e) {      throw new IgniteException("Failed to inject resources to Java factory: " + clsName,e);    }  }}  }
class C{  public void read(ExceptionlessInputStream in){  super.read(in);  forget();  read(in,table);}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryStorageLunsResponse queryStorageLuns(com.emc.storageos.vasa.VasaServiceStub.QueryStorageLuns queryStorageLuns39) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[19].getName());    _operationClient.getOptions().setAction("urn:queryStorageLuns");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryStorageLuns39,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryStorageLuns")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryStorageLunsResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryStorageLunsResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatagetlengthanddata.class,args);}  }
class C{  private BufferedImage loadStoredJPEGImage(final String current_image){  final String file_name=temp_dir + key + current_image+ ".jpg";  BufferedImage image=null;  final File a=new File(file_name);  if (a.exists()) {    try {      image=DefaultImageHelper.read(file_name);    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " loading "+ current_image);    }  } else {    image=new BufferedImage(100,100,BufferedImage.TYPE_INT_RGB);  }  return image;}  }
class C{  public synchronized void resetFeedSources(){  feedSources=null;}  }
class C{  public boolean add(symbol_set other) throws internal_error {  boolean result=false;  not_null(other);  for (Enumeration e=other.all(); e.hasMoreElements(); )   result=add((symbol)e.nextElement()) || result;  return result;}  }
class C{  Entry<K,V> find(Object key,int hash){  int index=hash & mask;  Entry<K,V> e=entries[index];  while (e != null && !e.key.equals(key)) {    e=e.mapNext;  }  return e;}  }
class C{  public boolean isDeprecatedValueFalse(){  return "false".equalsIgnoreCase(childElementNameList);}  }
class C{  public static void createClientCache1CommonWriter(String host,Integer port) throws Exception {  ConflationDUnitTest test=new ConflationDUnitTest();  cache=test.createCache(createProperties1());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  factory.setPoolName(createPool(host,"p1",port,true).getName());  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME1,attrs);  cache.createRegion(REGION_NAME2,attrs);}  }
class C{  public boolean creationInitiated(){  return !getRequestedTypes().isEmpty();}  }
class C{  @Override public void startSequence(final String label) throws IOException {  mHaveStartedWritingSequenceData=false;  mCurrentLength=0;  initSequenceStatistics();  if (mHasNames) {    if (mCurrentName == null) {      rollLabel();    }    if (mCurrentNameSuffix == null) {      rollLabelSuffix();    }    mCurrentLabel=handleSequenceName(label);  }  if (mCurrentSeq == null) {    rollSequence();  }}  }
class C{  public final void incrementBucketDocCount(long bucketOrd,int inc){  docCounts=bigArrays.grow(docCounts,bucketOrd + 1);  docCounts.increment(bucketOrd,inc);}  }
class C{  public final static byte[] toSimpleByteArray(CharSequence charSequence){  byte[] barr=new byte[charSequence.length()];  for (int i=0; i < barr.length; i++) {    barr[i]=(byte)charSequence.charAt(i);  }  return barr;}  }
class C{  public ColladaGeometry(String ns){  super(ns);}  }
class C{  protected boolean sampleNextElement(){  return sampler.sampleNextElement();}  }
class C{  private void handleSlice(final ASTQuery astQuery,final QueryBase queryRoot){  final ASTLimit theLimit=astQuery.getLimit();  final ASTOffset theOffset=astQuery.getOffset();  if (theLimit != null || theOffset != null) {    final SliceNode theSlice=new SliceNode();    if (theLimit != null)     theSlice.setLimit(theLimit.getValue());    if (theOffset != null)     theSlice.setOffset(theOffset.getValue());    queryRoot.setSlice(theSlice);  }}  }
class C{  public PixelGrabber(ImageProducer ip,int x,int y,int w,int h,int[] pix,int off,int scansize){  producer=ip;  dstX=x;  dstY=y;  dstW=w;  dstH=h;  dstOff=off;  dstScan=scansize;  intPixels=pix;  imageModel=ColorModel.getRGBdefault();}  }
class C{  public static void updateBarsColor(Window window,@ColorRes int colorID){  updateBarsColor(window,colorID,false);}  }
class C{  public JComponent createPropertyGUI(PropertyConsumer pc){  this.propertyConsumer=pc;  Properties props=new Properties();  props=pc.getProperties(props);  Properties info=new Properties();  info=pc.getPropertyInfo(info);  String prefix=pc.getPropertyPrefix();  return createPropertyGUI(prefix,props,info);}  }
class C{  private boolean overlapsOrTouches(Position gap,int offset,int length){  return gap.getOffset() <= offset + length && offset <= gap.getOffset() + gap.getLength();}  }
class C{  public double eval(double params[]){  return ((params[0] + params[1] + params[2]+ params[3]) / 4.0);}  }
class C{  public void testStartSearchIdempotent() throws Exception {  SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  assertNotNull(searchManager);  searchManager.startSearch(null,false,SEARCHABLE_ACTIVITY,null,false);  searchManager.startSearch(null,false,SEARCHABLE_ACTIVITY,null,false);  searchManager.stopSearch();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,1)) {    return makeNetworkedCall(stack);  }  int x=getInt(stack);  Playlist p=getPlaylist(stack);  if (p == null)   return null;  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  p.movePlaylistSegment(x,true);  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  public void paintCircle(Point2D pt1,Point2D pt2){  if (displayCircle) {    if (pt1 != null && pt2 != null) {      double radphi1=ProjMath.degToRad(pt1.getY());      double radlambda0=ProjMath.degToRad(pt1.getX());      double radphi=ProjMath.degToRad(pt2.getY());      double radlambda=ProjMath.degToRad(pt2.getX());      double dRad=GreatCircle.sphericalDistance(radphi1,radlambda0,radphi,radlambda);      double rad=ProjMath.radToDeg(dRad);      OMCircle circle=new OMCircle(pt1.getY(),pt1.getX(),rad);      Projection proj=theMap.getProjection();      circle.generate(proj);      distanceList.add(circle);    }  }}  }
class C{  public synchronized RelayLogPosition clone(){  RelayLogPosition clone=new RelayLogPosition();  clone.setPosition(curFile,curOffset);  return clone;}  }
class C{  public LinkingMorphemes(BufferedReader aReader) throws IOException {  morphemes=new ArrayList<String>();  String line;  while ((line=aReader.readLine()) != null) {    if (line.length() > 0 && line.charAt(0) != '#') {      morphemes.add(line);    }  }}  }
class C{  public static boolean isRootOrTrashId(@Nullable IgniteUuid id){  return isRootId(id) || isTrashId(id);}  }
class C{  public void moveRow(int from,int to){  m_data.moveRow(from,to);}  }
class C{  public static Version parseVersionLenient(String toParse,Version defaultValue){  return LenientParser.parse(toParse,defaultValue);}  }
class C{  public byte[] makeTile(double uvx,double uvy,ZoomLevelMaker zoomInfo,Proj proj){  Point2D center=tileUVToLatLon(new Point2D.Double(uvx + .5,uvy + .5),zoomInfo.getZoomLevel());  proj.setScale(mtcTransform.getScaleForZoom(zoomInfo.getZoomLevel()));  proj.setCenter(center);  proj.setHeight(TILE_SIZE);  proj.setWidth(TILE_SIZE);  return createImage(proj,-1,-1,zoomInfo.getLayers());}  }
class C{  protected void correlatedPointRemovedCallback(int removedCorrelatedTimeStep){  boolean sourceMatches=false;  if (stepKernel(sourceObs,source[removedCorrelatedTimeStep],kernelWidthSourceInUse) > 0) {    countPastSource--;    sourceMatches=true;  }  if (stepKernel(destNextObs,destNext[removedCorrelatedTimeStep],kernelWidthDestNextInUse) > 0) {    countNextPast--;    if (sourceMatches) {      countNextPastSource--;    }  }}  }
class C{  public synchronized long updateDocument(String id,Document doc) throws IOException {  assert buffer.getFilePointer() == 0;  buffer.writeByte(OP_UPDATE_DOCUMENT);  encode(id,doc);  return flushBuffer();}  }
class C{  public boolean isCollection(){  return true;}  }
class C{  private void adjustLeftRightByAspectRatio(RectF rect,RectF bounds,float aspectRatio){  rect.inset((rect.width() - rect.height() * aspectRatio) / 2,0);  if (rect.left < bounds.left) {    rect.offset(bounds.left - rect.left,0);  }  if (rect.right > bounds.right) {    rect.offset(bounds.right - rect.right,0);  }}  }
class C{  protected void appendInternal(StringBuffer buffer,String fieldName,Object value,boolean detail){  if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {    appendCyclicObject(buffer,fieldName,value);    return;  }  register(value);  try {    if (value instanceof Collection) {      if (detail) {        appendDetail(buffer,fieldName,(Collection)value);      } else {        appendSummarySize(buffer,fieldName,((Collection)value).size());      }    } else     if (value instanceof Map) {      if (detail) {        appendDetail(buffer,fieldName,(Map)value);      } else {        appendSummarySize(buffer,fieldName,((Map)value).size());      }    } else     if (value instanceof long[]) {      if (detail) {        appendDetail(buffer,fieldName,(long[])value);      } else {        appendSummary(buffer,fieldName,(long[])value);      }    } else     if (value instanceof int[]) {      if (detail) {        appendDetail(buffer,fieldName,(int[])value);      } else {        appendSummary(buffer,fieldName,(int[])value);      }    } else     if (value instanceof short[]) {      if (detail) {        appendDetail(buffer,fieldName,(short[])value);      } else {        appendSummary(buffer,fieldName,(short[])value);      }    } else     if (value instanceof byte[]) {      if (detail) {        appendDetail(buffer,fieldName,(byte[])value);      } else {        appendSummary(buffer,fieldName,(byte[])value);      }    } else     if (value instanceof char[]) {      if (detail) {        appendDetail(buffer,fieldName,(char[])value);      } else {        appendSummary(buffer,fieldName,(char[])value);      }    } else     if (value instanceof double[]) {      if (detail) {        appendDetail(buffer,fieldName,(double[])value);      } else {        appendSummary(buffer,fieldName,(double[])value);      }    } else     if (value instanceof float[]) {      if (detail) {        appendDetail(buffer,fieldName,(float[])value);      } else {        appendSummary(buffer,fieldName,(float[])value);      }    } else     if (value instanceof boolean[]) {      if (detail) {        appendDetail(buffer,fieldName,(boolean[])value);      } else {        appendSummary(buffer,fieldName,(boolean[])value);      }    } else     if (value.getClass().isArray()) {      if (detail) {        appendDetail(buffer,fieldName,(Object[])value);      } else {        appendSummary(buffer,fieldName,(Object[])value);      }    } else {      if (detail) {        appendDetail(buffer,fieldName,value);      } else {        appendSummary(buffer,fieldName,value);      }    }  }  finally {    unregister(value);  }}  }
class C{  public static void propagateDeathTime(ObjectReference ref){  if (VM.traceInterface.getDeathTime(ref).LT(agePropagate)) {    if (!getTraceLocal().isReachable(ref)) {      VM.traceInterface.setDeathTime(ref,agePropagate);      worklist.push(ref);    } else {      VM.traceInterface.setDeathTime(getTraceLocal().getForwardedReference(ref),agePropagate);    }  }}  }
class C{  public static List<String> tokenize(String arguments,boolean stringify){  LinkedList<String> argList=new LinkedList<String>();  StringBuilder currArg=new StringBuilder();  boolean escaped=false;  int state=NO_TOKEN_STATE;  int len=arguments.length();  for (int i=0; i < len; i++) {    char c=arguments.charAt(i);    if (escaped) {      escaped=false;      currArg.append(c);    } else {switch (state) {case SINGLE_QUOTE_STATE:        if (c == '\'') {          state=NORMAL_TOKEN_STATE;        } else {          currArg.append(c);        }      break;case DOUBLE_QUOTE_STATE:    if (c == '"') {      state=NORMAL_TOKEN_STATE;    } else     if (c == '\\') {      i++;      char next=arguments.charAt(i);      if (next == '"' || next == '\\') {        currArg.append(next);      } else {        currArg.append(c);        currArg.append(next);      }    } else {      currArg.append(c);    }  break;case NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {case '\\':  escaped=true;state=NORMAL_TOKEN_STATE;break;case '\'':state=SINGLE_QUOTE_STATE;break;case '"':state=DOUBLE_QUOTE_STATE;break;default :if (!Character.isWhitespace(c)) {currArg.append(c);state=NORMAL_TOKEN_STATE;} else if (state == NORMAL_TOKEN_STATE) {argList.add(currArg.toString());currArg=new StringBuilder();state=NO_TOKEN_STATE;}}break;default :throw new IllegalStateException("ArgumentTokenizer state " + state + " is invalid!");}}}if (escaped) {currArg.append('\\');argList.add(currArg.toString());} else if (state != NO_TOKEN_STATE) {argList.add(currArg.toString());}if (stringify) {for (int i=0; i < argList.size(); i++) {argList.set(i,"\"" + _escapeQuotesAndBackslashes(argList.get(i)) + "\"");}}return argList;}  }
class C{  public void createDefaultRanges(int randomSeed){  this.training.clear();  this.validation.clear();  Random random=new Random(randomSeed);  int overallNumberMatchesInTraining=(int)Math.ceil(this.dataset.getNumberMatches() / 2.0);  overallNumberMatchesInTraining=(overallNumberMatchesInTraining == 0) ? 1 : overallNumberMatchesInTraining;  int matchesInTrainingCountdown=overallNumberMatchesInTraining;  List<Integer> examplePositiveIndexes=new ArrayList<>();  List<Integer> exampleNegativeIndexes=new ArrayList<>();  for (int i=0; i < this.dataset.getNumberExamples(); i++) {    Example example=this.dataset.getExamples().get(i);    if (example.getNumberMatches() > 0) {      examplePositiveIndexes.add(i);    } else {      exampleNegativeIndexes.add(i);    }  }  Collections.shuffle(examplePositiveIndexes,random);  Collections.shuffle(exampleNegativeIndexes,random);  for (  Integer exampleIndex : examplePositiveIndexes) {    Example example=this.dataset.getExamples().get(exampleIndex);    if (examplePositiveIndexes.size() == 1 || ((matchesInTrainingCountdown > 0) && !(validation.isEmpty() && example.getNumberMatches() < overallNumberMatchesInTraining))) {      this.training.add(new Range(exampleIndex,exampleIndex));      matchesInTrainingCountdown-=example.getNumberMatches();    } else {      this.validation.add(new Range(exampleIndex,exampleIndex));    }  }  for (int i=0; i < exampleNegativeIndexes.size(); i++) {    if (i < Math.ceil(exampleNegativeIndexes.size() / 2.0)) {      this.training.add(new Range(exampleNegativeIndexes.get(i),exampleNegativeIndexes.get(i)));    } else {      this.validation.add(new Range(exampleNegativeIndexes.get(i),exampleNegativeIndexes.get(i)));    }  }}  }
class C{  private void removePersons(Population population){  population.getPersons().remove(Id.createPersonId("23187103"));  population.getPersons().remove(Id.createPersonId("13768103"));  population.getPersons().remove(Id.createPersonId("11865102"));  population.getPersons().remove(Id.createPersonId("11955002"));  population.getPersons().remove(Id.createPersonId("21043102"));  population.getPersons().remove(Id.createPersonId("27752101"));  population.getPersons().remove(Id.createPersonId("21043101"));  population.getPersons().remove(Id.createPersonId("14380104"));  population.getPersons().remove(Id.createPersonId("25611002"));  population.getPersons().remove(Id.createPersonId("13491103"));  population.getPersons().remove(Id.createPersonId("22343101"));}  }
class C{  private void recalculateWordsInUse(){  int i;  for (i=wordsInUse - 1; i >= 0; i--)   if (words[i] != 0)   break;  wordsInUse=i + 1;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:      return N4JSPackage.IDENTIFIER_REF___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == StrictModeRelevant.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Deprecated public static LogStream log(String name){  LogStream stream;synchronized (known) {    stream=known.get(name);    if (stream == null) {      stream=new LogStream(name,defaultStream);    }    known.put(name,stream);  }  return stream;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public ChartChangeEvent(Object source){  this(source,null,ChartChangeEventType.GENERAL);}  }
class C{  private static String readHeader(InputStream inputStream) throws IOException {  String line;  String firstLine=null;  while ((line=readLine(inputStream)) != null && line.length() > 0) {    if (firstLine == null) {      firstLine=line;    }  }  return firstLine;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;case 2:  return PROPERTY;default :return null;}}  }
class C{  public JdkProvider(String name,String version,Module module,File jar) throws ZipException, IOException {  this.module=module;  this.name=name;  loadJar(jar);  alternateJdk=true;}  }
class C{  public ExtendedNamedNodeHashMap(){}  }
class C{  public JPasswordField(String text,int columns){  this(null,text,columns);}  }
class C{  public void createFilter(List<String> users,String from,String to,String subject,String hasTheWord,String doesNotHaveTheWord,boolean hasAttachment,boolean shouldMarkAsRead,boolean shouldArchive,String label,String forwardTo,boolean neverSpam,boolean shouldStar,boolean shouldTrash) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.FROM,from);  entry.addProperty(Constants.TO,to);  entry.addProperty(Constants.SUBJECT,subject);  entry.addProperty(Constants.HAS_THE_WORD,hasTheWord);  entry.addProperty(Constants.DOESNT_HAVE_THE_WORD,doesNotHaveTheWord);  entry.addProperty(Constants.HAS_ATTACHMENT,String.valueOf(hasAttachment));  entry.addProperty(Constants.SHOULD_MARK_AS_READ,String.valueOf(shouldMarkAsRead));  entry.addProperty(Constants.SHOULD_ARCHIVE,String.valueOf(shouldArchive));  entry.addProperty(Constants.LABEL,label);  entry.addProperty(Constants.FORWARD_TO,forwardTo);  entry.addProperty(Constants.NEVER_SPAM,String.valueOf(neverSpam));  entry.addProperty(Constants.SHOULD_STAR,String.valueOf(shouldStar));  entry.addProperty(Constants.SHOULD_TRASH,String.valueOf(shouldTrash));  for (  String user : users) {    logger.log(Level.INFO,"Creating filter ( " + "from: " + from + ", to: "+ to+ ", subject: "+ subject+ ", hasTheWord: "+ hasTheWord+ ", doesNotHaveTheWord: "+ doesNotHaveTheWord+ ", hasAttachment: "+ hasAttachment+ ", shouldMarkAsRead: "+ shouldMarkAsRead+ ", shouldArchive: "+ shouldArchive+ ", label: "+ label+ ", forwardTo: "+ forwardTo+ ", neverSpam: "+ neverSpam+ ", shouldStar: "+ shouldStar+ ", shouldTrash: "+ shouldTrash+ " ) for user "+ user+ " ...");    insertSettings(user,entry,"filter");    logger.log(Level.INFO,"Successfully created filter.");  }}  }
class C{  public void deleteShardState() throws IOException {  if (this.routingEntry() != null && this.routingEntry().active()) {    throw new IllegalStateException("Can't delete shard state on an active shard");  }  MetaDataStateFormat.deleteMetaState(shardPath().getDataPath());}  }
class C{  public ValidatingTokenFilter(TokenStream in,String name,boolean offsetsAreCorrect){  super(in);  this.name=name;  this.offsetsAreCorrect=offsetsAreCorrect;}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  public static TermsQueryBuilder termsQuery(String name,int... values){  return new TermsQueryBuilder(name,values);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:12.982 -0500",hash_original_method="DB07DE8DB9A02739307D238F9A46C5FB",hash_generated_method="D182B88943E9D1831B024BB12CBD1E48") public DynamicLayout(CharSequence base,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad){  this(base,base,paint,width,align,spacingmult,spacingadd,includepad);}  }
class C{  public File bunzip2(final File inputFile,final File outputFile){  LOGGER.info(String.format("Ungzipping %s to dir %s.",inputFile.getAbsolutePath(),outputFile.getAbsolutePath()));  try (BZip2CompressorInputStream in=new BZip2CompressorInputStream(new FileInputStream(inputFile));FileOutputStream out=new FileOutputStream(outputFile)){    IOUtils.copy(in,out);    return outputFile;  } catch (  IOException e) {    throw new ArchiveException("Unable to gunzip file",e);  }}  }
class C{  private ByteBuffer loadCompleteTableDefinitionBuffer(ByteBuffer tableBuffer,List<Integer> pages) throws IOException {  int nextPage=tableBuffer.getInt(getFormat().OFFSET_NEXT_TABLE_DEF_PAGE);  ByteBuffer nextPageBuffer=null;  while (nextPage != 0) {    if (pages != null) {      pages.add(nextPage);    }    if (nextPageBuffer == null) {      nextPageBuffer=getPageChannel().createPageBuffer();    }    getPageChannel().readPage(nextPageBuffer,nextPage);    nextPage=nextPageBuffer.getInt(getFormat().OFFSET_NEXT_TABLE_DEF_PAGE);    tableBuffer=expandTableBuffer(tableBuffer);    tableBuffer.put(nextPageBuffer.array(),8,getFormat().PAGE_SIZE - 8);    tableBuffer.flip();  }  return tableBuffer;}  }
class C{  public void dispose(){  mLunar=null;  super.dispose();}  }
class C{  public void stop(){  Display.impl.browserStop(internal);}  }
class C{  public void step(SimState state){  super.step(state);  count--;}  }
class C{  public int size(){  return entries.size();}  }
class C{  public boolean loadChunk(int x,int z,boolean generate){  GlowChunk chunk=getChunk(x,z);  try {    if (service.read(chunk)) {      EventFactory.callEvent(new ChunkLoadEvent(chunk,false));      return true;    }  } catch (  Exception e) {    GlowServer.logger.log(Level.SEVERE,"Error while loading chunk (" + x + ","+ z+ ")",e);    chunk.unload(false,false);  }  if (!generate) {    return false;  }  try {    generateChunk(chunk,x,z);  } catch (  Throwable ex) {    GlowServer.logger.log(Level.SEVERE,"Error while generating chunk (" + x + ","+ z+ ")",ex);    return false;  }  EventFactory.callEvent(new ChunkLoadEvent(chunk,true));  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.399 -0500",hash_original_method="CE6F8F1C6C2218F6FF3D168198E2B46E",hash_generated_method="85C3B777A9E01CD242A7BE36DADA6003") static public void assertEquals(String message,boolean expected,boolean actual){  assertEquals(message,new Boolean(expected),new Boolean(actual));}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  nbtTags.setInteger("x",xCoord);  nbtTags.setInteger("y",yCoord);  nbtTags.setInteger("z",zCoord);  nbtTags.setInteger("dimensionId",dimensionId);  return nbtTags;}  }
class C{  private void writeToXmlFile(String outFileName){  try {    FileOutputStream fos=new FileOutputStream(outFileName);    OutputStreamWriter outwriter=new OutputStreamWriter(fos);    callWriteXmlFile(doc,outwriter,"utf-8");    outwriter.close();    fos.close();    System.out.println(String.format("Dump into file: %s successfully",outFileName));    log.info("Dump into file: {} successfully",outFileName);  } catch (  Exception e) {    System.err.println("Caught Exception: " + e);    log.error("Caught Exception: ",e);  }}  }
class C{  public GitInvalidRefNameException(Throwable cause){  super(cause);}  }
class C{  private RealConnection findConnection(int connectTimeout,int readTimeout,int writeTimeout,boolean connectionRetryEnabled) throws IOException, RouteException {synchronized (connectionPool) {    if (released)     throw new IllegalStateException("released");    if (stream != null)     throw new IllegalStateException("stream != null");    if (canceled)     throw new IOException("Canceled");    RealConnection allocatedConnection=this.connection;    if (allocatedConnection != null && !allocatedConnection.noNewStreams) {      return allocatedConnection;    }    RealConnection pooledConnection=Internal.instance.get(connectionPool,address,this);    if (pooledConnection != null) {      this.connection=pooledConnection;      return pooledConnection;    }    if (routeSelector == null) {      routeSelector=new RouteSelector(address,routeDatabase());    }  }  Route route=routeSelector.next();  RealConnection newConnection=new RealConnection(route);  acquire(newConnection);synchronized (connectionPool) {    Internal.instance.put(connectionPool,newConnection);    this.connection=newConnection;    if (canceled)     throw new IOException("Canceled");  }  newConnection.connect(connectTimeout,readTimeout,writeTimeout,address.connectionSpecs(),connectionRetryEnabled);  routeDatabase().connected(newConnection.getRoute());  return newConnection;}  }
class C{  private static Reader internalGetContentReader(IMember member) throws JavaModelException {  IBuffer buf=member.getOpenable().getBuffer();  if (buf == null) {    return null;  }  ISourceRange javadocRange=member.getJavadocRange();  if (javadocRange != null) {    JavaDocCommentReader reader=new JavaDocCommentReader(buf,javadocRange.getOffset(),javadocRange.getOffset() + javadocRange.getLength() - 1);    if (!containsOnlyInheritDoc(reader,javadocRange.getLength())) {      reader.reset();      return reader;    }  }  return null;}  }
class C{  public void testBug20685022() throws Exception {  if (!isCommunityEdition()) {    return;  }  final Properties props=new Properties();  props.clear();  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("verifyServerCertificate","false");  getConnectionWithProps(props);  props.clear();  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("verifyServerCertificate","true");  props.setProperty("trustCertificateKeyStoreUrl","file:src/testsuite/ssl-test-certs/test-cert-store");  props.setProperty("trustCertificateKeyStoreType","JKS");  props.setProperty("trustCertificateKeyStorePassword","password");  getConnectionWithProps(props);  props.clear();  props.setProperty("useSSL","true");  props.setProperty("requireSSL","true");  props.setProperty("verifyServerCertificate","true");  String trustStorePath="src/testsuite/ssl-test-certs/test-cert-store";  System.setProperty("javax.net.ssl.keyStore",trustStorePath);  System.setProperty("javax.net.ssl.keyStorePassword","password");  System.setProperty("javax.net.ssl.trustStore",trustStorePath);  System.setProperty("javax.net.ssl.trustStorePassword","password");  getConnectionWithProps(props);}  }
class C{  public Sequence(Schema schema,int id,String name,long startValue,long increment){  this(schema,id,name,startValue,increment,null,null,null,false,true);}  }
class C{  public boolean checkAfterCondition(EventBean[] newEvents,StatementContext statementContext){  return afterConditionState.checkUpdateAfterCondition(newEvents,statementContext);}  }
class C{  static byte[] rawKey(Class requester,String key){  return hash(getUTF8Bytes(requester.getName() + "/" + key));}  }
class C{  public void testDoubleAsNumber() throws Exception {  Number result=new ObjectMapper().readValue(new StringReader(" 1.0 "),Number.class);  assertEquals(Double.valueOf(1.0),result);}  }
class C{  private void readPolicies(XmlPullParser parser) throws IOException, XmlPullParserException {  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String name=parser.getName();    if (TAG_USER_RESTRICTION.equals(name)) {      String userRestriction=parser.getAttributeValue(null,ATTRIBUTE_NAME);      if (userRestriction != null) {        mUserRestrictions.add(userRestriction);      }    } else     if (TAG_GLOBAL_SETTING.equals(name)) {      String setting=parser.getAttributeValue(null,ATTRIBUTE_NAME);      String value=parser.getAttributeValue(null,ATTRIBUTE_VALUE);      if (setting != null && value != null) {        mGlobalSettings.add(new GlobalSetting(setting,value));      }    } else     if (TAG_DISABLE_STATUS_BAR.equals(name)) {      mDisableStatusBar=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));    } else     if (TAG_DISABLE_KEYGUARD.equals(name)) {      mDisableKeyguard=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));    } else     if (TAG_DISABLE_CAMERA.equals(name)) {      mDisableCamera=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));    } else     if (TAG_DISABLE_SCREEN_CAPTURE.equals(name)) {      mDisableScreenCapture=Boolean.parseBoolean(parser.getAttributeValue(null,ATTRIBUTE_VALUE));    }    skipCurrentTag(parser);  }}  }
class C{  private void openCurrentAndMaybeNext(final boolean openNext){  LOG.info("openCurrentAndMaybeNext() waiting for synchronized(this)");synchronized (this) {    LOG.info("openCurrentAndMaybeNext() DONE waiting for synchronized(this)\n");    closeCursor();    if (mPlayListLen == 0 || mPlayList == null) {      return;    }    stop(false);    mPlayPos=Math.min(mPlayPos,mPlayList.length - 1);    updateCursor(mPlayList[mPlayPos]);    while (true) {      if (mCursor != null && !mCursor.isClosed() && openFile(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI + "/" + mCursor.getLong(IDCOLIDX))) {        break;      }      closeCursor();      if (mOpenFailedCounter++ < 10 && mPlayListLen > 1) {        final int pos=getNextPosition(false);        if (scheduleShutdownAndNotifyPlayStateChange(pos))         return;        mPlayPos=pos;        stop(false);        mPlayPos=pos;        updateCursor(mPlayList[mPlayPos]);      } else {        mOpenFailedCounter=0;        LOG.warn("Failed to open file for playback");        scheduleDelayedShutdown();        if (mIsSupposedToBePlaying) {          mIsSupposedToBePlaying=false;          notifyChange(PLAYSTATE_CHANGED);        }        return;      }    }    if (openNext) {      setNextTrack();    }  }}  }
class C{  public NewPropertyDetails updateProperty(ViewPropertyDetails viewPropertyDetails) throws ParseException {  NewPropertyDetails newPropertyDetails=null;  final PropertyService propService=beanProvider.getBean("propService",PropertyService.class);  BasicProperty basicProperty=updateBasicProperty(viewPropertyDetails,propService);  PropertyImpl property=(PropertyImpl)basicProperty.getWFProperty();  basicProperty.setUnderWorkflow(Boolean.TRUE);  transitionWorkFlow(property,propService,PROPERTY_MODE_MODIFY);  basicPropertyService.applyAuditing(property.getState());  propService.updateIndexes(property,PropertyTaxConstants.APPLICATION_TYPE_ALTER_ASSESSENT);  if (basicProperty.getWFProperty() != null && basicProperty.getWFProperty().getPtDemandSet() != null && !basicProperty.getWFProperty().getPtDemandSet().isEmpty()) {    for (    Ptdemand ptDemand : basicProperty.getWFProperty().getPtDemandSet()) {      basicPropertyService.applyAuditing(ptDemand.getDmdCalculations());    }  }  basicProperty=basicPropertyService.update(basicProperty);  if (basicProperty != null) {    newPropertyDetails=new NewPropertyDetails();    newPropertyDetails.setApplicationNo(basicProperty.getWFProperty().getApplicationNo());    final ErrorDetails errorDetails=new ErrorDetails();    errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_SUCCESS);    errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_SUCCESS);    newPropertyDetails.setErrorDetails(errorDetails);  }  return newPropertyDetails;}  }
class C{  public static boolean isZType(String shapeType){  if (shapeType == null) {    String message=Logging.getMessage("nullValue.ShapeType");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return zTypes.contains(shapeType);}  }
class C{  void writeSlot(int position,int w0,int w1,int w2,int w3){  position*=slotsize;  int chunkpos=position >> lowbits;  int slotpos=(position & lowmask);  if (chunkpos > chunks.size() - 1)   chunks.addElement(new int[chunkalloc]);  int[] chunk=chunks.elementAt(chunkpos);  chunk[slotpos]=w0;  chunk[slotpos + 1]=w1;  chunk[slotpos + 2]=w2;  chunk[slotpos + 3]=w3;}  }
class C{  public SourceUnit(File source,CompilerConfiguration configuration,GroovyClassLoader loader,ErrorCollector er){  this(source.getPath(),new FileReaderSource(source,configuration),configuration,loader,er);}  }
class C{  static long nowMs(){  return TimeUnit.MILLISECONDS.convert(System.nanoTime(),TimeUnit.NANOSECONDS);}  }
class C{  public Object clone(){  DefaultSynthStyle style;  try {    style=(DefaultSynthStyle)super.clone();  } catch (  CloneNotSupportedException cnse) {    return null;  }  if (states != null) {    style.states=new StateInfo[states.length];    for (int counter=states.length - 1; counter >= 0; counter--) {      style.states[counter]=(StateInfo)states[counter].clone();    }  }  if (data != null) {    style.data=new HashMap();    style.data.putAll(data);  }  return style;}  }
class C{  @Override public void runWithBigquery() throws Exception {  kindNames.removeAll(ImmutableList.of(""));  if (snapshotPrefix == null || kindNames.isEmpty()) {    System.err.println("Nothing to import; specify --snapshot and at least one kind.");    return;  }  Map<String,ListenableFuture<?>> loadJobs=loadSnapshotKinds(kindNames);  waitForLoadJobs(loadJobs);}  }
class C{  private double gammaRatio(int n,int k){  double top=(n - k + 1) / 2.0;  double bottom=(n - k) / 2.0;  double lngamma=ProbUtils.lngamma(top) - ProbUtils.lngamma(bottom);  return Math.exp(lngamma);}  }
class C{  public static Builder builder(){  return new Builder(new InstallRequest());}  }
class C{  @Override public Boolean readBoolean(Type target){  return (currentDataType == AMF3.TYPE_BOOLEAN_TRUE) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public NotificationChain basicSetIdentifierRef(IdentifierRef newIdentifierRef,NotificationChain msgs){  IdentifierRef oldIdentifierRef=identifierRef;  identifierRef=newIdentifierRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF,oldIdentifierRef,newIdentifierRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static boolean isGoingToSplash(Activity activity){  return isGoingToSplash(activity,null,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void cancelRowUpdates() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static BitmapDrawable builtInPixelization(Context context,float pixelizationFactor,Bitmap bitmap){  int width=bitmap.getWidth();  int height=bitmap.getHeight();  int downScaleFactorWidth=(int)(pixelizationFactor * width);  downScaleFactorWidth=downScaleFactorWidth > 0 ? downScaleFactorWidth : 1;  int downScaleFactorHeight=(int)(pixelizationFactor * height);  downScaleFactorHeight=downScaleFactorHeight > 0 ? downScaleFactorHeight : 1;  int downScaledWidth=width / downScaleFactorWidth;  int downScaledHeight=height / downScaleFactorHeight;  Bitmap pixelatedBitmap=Bitmap.createScaledBitmap(bitmap,downScaledWidth,downScaledHeight,false);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {    BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),pixelatedBitmap);    bitmapDrawable.setFilterBitmap(false);    return bitmapDrawable;  } else {    Bitmap upscaled=Bitmap.createScaledBitmap(pixelatedBitmap,width,height,false);    return new BitmapDrawable(context.getResources(),upscaled);  }}  }
class C{  @Override public boolean supportsTableCorrelationNames(){  debugCodeCall("supportsTableCorrelationNames");  return true;}  }
class C{  public static byte[] decodeFromFile(String filename){  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      System.err.println("File is too big for this convenience method (" + file.length() + " bytes).");      return null;    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    System.err.println("Error decoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public Clustering<ClusterModel> run(Relation<V> relation){  ArrayModifiableDBIDs ids=DBIDUtil.newArray(relation.getDBIDs());  final int size=ids.size();  ids.sort(new VectorUtil.SortDBIDsBySingleDimension(relation,dim));  WritableDoubleDataStore density=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,0.);  DBIDArrayIter iter=ids.iter(), iter2=ids.iter();  StepProgress sprog=LOG.isVerbose() ? new StepProgress("Clustering steps",2) : null;  LOG.beginStep(sprog,1,"Kernel density estimation.");{    double[] scratch=new double[2 * k];    iter.seek(0);    for (int i=0; i < size; i++, iter.advance()) {      final double curv=relation.get(iter).doubleValue(dim);      final int pre=Math.max(i - k,0), prek=i - pre;      final int pos=Math.min(i + k,size - 1), posk=pos - i;      iter2.seek(pre);      for (int j=0; j < prek; j++, iter2.advance()) {        scratch[j]=curv - relation.get(iter2).doubleValue(dim);      }      assert (iter2.getOffset() == i);      iter2.advance();      for (int j=0; j < posk; j++, iter2.advance()) {        scratch[prek + j]=relation.get(iter2).doubleValue(dim) - curv;      }      assert (prek + posk >= k);      double kdist=QuickSelect.quickSelect(scratch,0,prek + posk,k);switch (mode) {case BALLOON:{          double dens=0.;          if (kdist > 0.) {            for (int j=0; j < prek + posk; j++) {              dens+=kernel.density(scratch[j] / kdist);            }          } else {            dens=Double.POSITIVE_INFINITY;          }          assert (iter.getOffset() == i);          density.putDouble(iter,dens);          break;        }case SAMPLE:{        if (kdist > 0.) {          iter2.seek(pre);          for (int j=0; j < prek; j++, iter2.advance()) {            double delta=curv - relation.get(iter2).doubleValue(dim);            density.putDouble(iter2,density.doubleValue(iter2) + kernel.density(delta / kdist));          }          assert (iter2.getOffset() == i);          iter2.advance();          for (int j=0; j < posk; j++, iter2.advance()) {            double delta=relation.get(iter2).doubleValue(dim) - curv;            density.putDouble(iter2,density.doubleValue(iter2) + kernel.density(delta / kdist));          }        } else {          iter2.seek(pre);          for (int j=0; j < prek; j++, iter2.advance()) {            double delta=curv - relation.get(iter2).doubleValue(dim);            if (!(delta > 0.)) {              density.putDouble(iter2,Double.POSITIVE_INFINITY);            }          }          assert (iter2.getOffset() == i);          iter2.advance();          for (int j=0; j < posk; j++, iter2.advance()) {            double delta=relation.get(iter2).doubleValue(dim) - curv;            if (!(delta > 0.)) {              density.putDouble(iter2,Double.POSITIVE_INFINITY);            }          }        }        break;      }default :    throw new UnsupportedOperationException("Unknown mode specified.");}}}LOG.beginStep(sprog,2,"Local minima detection.");Clustering<ClusterModel> clustering=new Clustering<>("onedimensional-kde-clustering","One-Dimensional clustering using kernel density estimation.");{double[] scratch=new double[2 * minwindow + 1];int begin=0;int halfw=(minwindow + 1) >> 1;iter.seek(0);for (int i=0; i < size; i++, iter.advance()) {final int m=i % scratch.length, t=(i - minwindow - 1) % scratch.length;scratch[m]=density.doubleValue(iter);if (i > scratch.length) {  double min=Double.POSITIVE_INFINITY;  for (int j=0; j < scratch.length; j++) {    if (j != t && scratch[j] < min) {      min=scratch[j];    }  }  if (scratch[t] < min) {    int end=i - minwindow + 1;{      iter2.seek(end);      double curv=relation.get(iter2).doubleValue(dim);      iter2.seek(end - halfw);      double left=relation.get(iter2).doubleValue(dim) - curv;      iter2.seek(end + halfw);      double right=curv - relation.get(iter2).doubleValue(dim);      if (left < right) {        end++;      }    }    iter2.seek(begin);    ArrayModifiableDBIDs cids=DBIDUtil.newArray(end - begin);    for (int j=0; j < end - begin; j++, iter2.advance()) {      cids.add(iter2);    }    clustering.addToplevelCluster(new Cluster<>(cids,ClusterModel.CLUSTER));    begin=end;  }}}int end=size;iter2.seek(begin);ArrayModifiableDBIDs cids=DBIDUtil.newArray(end - begin);for (int j=0; j < end - begin; j++, iter2.advance()) {cids.add(iter2);}clustering.addToplevelCluster(new Cluster<>(cids,ClusterModel.CLUSTER));}LOG.ensureCompleted(sprog);return clustering;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCIES__PROJECT_DEPENDENCIES:    return getProjectDependencies();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public boolean hasArgs(){  return fieldSetFlags()[2];}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  AbstractXYItemRenderer clone=(AbstractXYItemRenderer)super.clone();  if (this.itemLabelGenerator != null && this.itemLabelGenerator instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.itemLabelGenerator;    clone.itemLabelGenerator=(XYItemLabelGenerator)pc.clone();  }  clone.itemLabelGeneratorMap=CloneUtils.cloneMapValues(this.itemLabelGeneratorMap);  if (this.baseItemLabelGenerator != null && this.baseItemLabelGenerator instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.baseItemLabelGenerator;    clone.baseItemLabelGenerator=(XYItemLabelGenerator)pc.clone();  }  if (this.toolTipGenerator != null && this.toolTipGenerator instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.toolTipGenerator;    clone.toolTipGenerator=(XYToolTipGenerator)pc.clone();  }  clone.toolTipGeneratorMap=CloneUtils.cloneMapValues(this.toolTipGeneratorMap);  if (this.baseToolTipGenerator != null && this.baseToolTipGenerator instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.baseToolTipGenerator;    clone.baseToolTipGenerator=(XYToolTipGenerator)pc.clone();  }  if (this.legendItemLabelGenerator instanceof PublicCloneable) {    clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);  }  if (this.legendItemToolTipGenerator instanceof PublicCloneable) {    clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);  }  if (this.legendItemURLGenerator instanceof PublicCloneable) {    clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);  }  clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);  clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);  return clone;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  @RequestMapping(value=STORAGE_UNIT_NOTIFICATIONS_URI_PREFIX + "/namespaces/{namespace}/notificationNames/{notificationName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_STORAGE_UNIT_NOTIFICATION_REGISTRATIONS_DELETE) public StorageUnitNotificationRegistration deleteStorageUnitNotification(@PathVariable("namespace") String namespace,@PathVariable("notificationName") String notificationName){  return storageUnitNotificationRegistrationService.deleteStorageUnitNotificationRegistration(new NotificationRegistrationKey(namespace,notificationName));}  }
class C{  public void addPhoto(String url,Long poiId,int size){  if (size == Size.SQUARE && !photoUrlsCachedThumbs.get(poiId).contains(url)) {    photoUrlsCachedThumbs.get(poiId).add(url);    notifyDataSetChanged();  } else   if (size == Size.ORIGINAL && !photoUrlsCachedOriginal.get(poiId).contains(url)) {    photoUrlsCachedOriginal.get(poiId).add(url);  }}  }
class C{  @Inline private void clearCompletionFlag(){  if (TRACE_DETAIL) {    Log.writeln("# clearCompletionFlag: ");  }  completionFlag=0;}  }
class C{  @Override public void move(Movable d,ReadOnlyVector3 pos){  if (lineIsEnabled) {    pointSet.updateLine(line);  }  if (polyIsEnabled) {    pointSet.updatePolygon(poly);  }  updateLabels(null);  state.pathDirty();}  }
class C{  public List populateToListPlazosValoracion(){  List listaPlazosVO=new ArrayList();  if (campo_plazo == null || (campo_plazo.length == 1 && StringUtils.isEmpty(campo_nivelArchivoOrigen[0]) && StringUtils.isEmpty(campo_nivelArchivoDestino[0]) && StringUtils.isEmpty(campo_plazo[0]))) {    return listaPlazosVO;  }  if (campo_plazo == null)   return listaPlazosVO;  for (int i=0; i < campo_plazo.length; i++) {    PlazoValoracionVO vo=new PlazoValoracionVO();    vo.setIdValSerie(id);    vo.setIdNivelOrigen(campo_nivelArchivoOrigen[i]);    vo.setIdNivelDestino(campo_nivelArchivoDestino[i]);    vo.setPlazo(Integer.parseInt(campo_plazo[i]));    vo.setOrden(i + 1);    listaPlazosVO.add(vo);  }  return listaPlazosVO;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public int hashCode(){  int result=37;  result=HashUtilities.hashCode(result,this.toolTipText);  result=HashUtilities.hashCode(result,this.urlText);  return result;}  }
class C{  public void log(Throwable t){  TestUtils.log(t);}  }
class C{  public FunctionValueMap(int amountOfAggregations,int amountOfAnalyses,int amountOfTransformations){  this.aggregations=new ChronixAggregation[amountOfAggregations];  this.analyses=new ChronixAnalysis[amountOfAnalyses];  this.transformations=new ChronixTransformation[amountOfTransformations];  this.analysisValues=new boolean[amountOfAnalyses];  this.aggregationValues=new double[amountOfAggregations];  this.identifiers=new String[amountOfAggregations + amountOfAnalyses];}  }
class C{  @Override public void createOrAddVolumesToExportMask(URI arrayURI,URI exportGroupURI,URI exportMaskURI,Map<URI,Integer> volumeMap,List<URI> initiatorURIs,TaskCompleter completer,String stepId){  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem array=_dbClient.queryObject(StorageSystem.class,arrayURI);    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    if (exportMask == null || exportMask.getInactive()) {      _log.info(String.format("ExportMask %s deleted or inactive, failing",exportMaskURI));      ServiceError svcerr=VPlexApiException.errors.createBackendExportMaskDeleted(exportMaskURI.toString(),arrayURI.toString());      WorkflowStepCompleter.stepFailed(stepId,svcerr);      return;    }    List<String> lockKeys=ControllerLockingUtil.getHostStorageLockKeys(_dbClient,ExportGroupType.Host,StringSetUtil.stringSetToUriList(exportMask.getInitiators()),arrayURI);    getWorkflowService().acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.VPLEX_BACKEND_EXPORT));    List<Initiator> initiators=new ArrayList<Initiator>();    for (    String initiatorId : exportMask.getInitiators()) {      Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorId));      if (initiator != null) {        initiators.add(initiator);      }    }    BlockStorageDevice device=_blockController.getDevice(array.getSystemType());    exportMask=refreshExportMask(array,device,exportMask);    if (!exportMask.hasAnyVolumes()) {      List<URI> targets=new ArrayList<URI>();      for (      String targetId : exportMask.getStoragePorts()) {        targets.add(URI.create(targetId));      }      if (volumeMap != null) {        for (        URI volume : volumeMap.keySet()) {          exportMask.addVolume(volume,volumeMap.get(volume));        }      }      device.doExportCreate(array,exportMask,volumeMap,initiators,targets,completer);    } else {      device.doExportAddVolumes(array,exportMask,initiators,volumeMap,completer);    }  } catch (  Exception ex) {    _log.error("Failed to create or add volumes to export mask for hds: ",ex);    VPlexApiException vplexex=DeviceControllerExceptions.vplex.addStepsForCreateVolumesFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,vplexex);  }}  }
class C{  public double[] computeLocalFromPreviousObservations(int states[][],int sourceCol,int destCol,int[] othersAbsolute){  return computeLocalFromPreviousObservations(states,sourceCol,destCol,othersAbsolute,false);}  }
class C{  public void addSymbol(String text){  symbols.add(new TokenizerSymbol(null,text,null,false,false,true,false));}  }
class C{  public static final boolean symtabIsSharedNotSystem(SymbolTable symtab){  return (symtab != null && symtab.isSharedTable() && !symtab.isSystemTable());}  }
class C{  private void makePositionIndex(Set uniqueValues){  int valuesPerColor=(int)Math.ceil((double)uniqueValues.size() / this.paintLimit);  int count=0;  int paint=0;  for (Iterator i=uniqueValues.iterator(); i.hasNext(); ) {    this.paintIndex.put(i.next(),new Integer(paint));    if (++count % valuesPerColor == 0) {      paint++;    }    if (paint > this.paintLimit) {      paint=this.paintLimit;    }  }}  }
class C{  public V put(double key,V value){  boolean wasFree=false;  V previous=null;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=unwrapNull(_values[index]);    isNewMapping=false;  } else {    wasFree=isFree(_values,index);  }  _set[index]=key;  _values[index]=wrapNull(value);  if (isNewMapping) {    postInsertHook(wasFree);  }  return previous;}  }
class C{  public void pushPackets(Packet<?>... packets){  this.pushPackets(null,packets);}  }
class C{  private BlockPos blockPosFromInt(int serialized){  int x=this.xPosition * 16 + (serialized & XZ_MASK);  int y=(serialized >> Y_SHIFT) & Y_INT_MASK;  int z=this.zPosition * 16 + ((serialized >> Z_INT_SHIFT) & XZ_MASK);  return new BlockPos(x,y,z);}  }
class C{  @Override public void initialize(){  super.initialize();  for (  V v : graph.getVertices())   setOutputValue(v,getVertexPrior(v));}  }
class C{  @Override Query handleBareFuzzy(String qfield,Token fuzzySlop,String termImage) throws ParseException {  if (fuzzySlop.image.length() == 1) {    return getFuzzyQuery(qfield,termImage,Float.toString(fuzzyMinSim));  }  return getFuzzyQuery(qfield,termImage,fuzzySlop.image.substring(1));}  }
class C{  public static int ENOKEY(){  return 126;}  }
class C{  public KafkaEmbedded(int count,boolean controlledShutdown,int partitions,String... topics){  this.count=count;  this.controlledShutdown=controlledShutdown;  if (topics != null) {    this.topics=topics;  } else {    this.topics=new String[0];  }  this.partitionsPerTopic=partitions;}  }
class C{  public JPEGTranscoder(){  hints.put(ImageTranscoder.KEY_BACKGROUND_COLOR,Color.white);}  }
class C{  protected void unlock(){  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("unlock()");  }  lock.unlock();}  }
class C{  @Override public void removeAllRules(){  this.lastRuleId=1;  this.ruleSet=new ArrayList<ACLRule>();  this.dpid2FlowPriority=new HashMap<String,Integer>();  this.ruleId2Dpid=new HashMap<Integer,Set<String>>();  Iterator<Integer> ruleIdIter=ruleId2FlowName.keySet().iterator();  while (ruleIdIter.hasNext()) {    int ruleId=ruleIdIter.next();    Set<String> flowNameSet=ruleId2FlowName.get(ruleId);    logger.info("No.{} ACL rule removed.",ruleId);    for (    String flowName : flowNameSet) {      removeFlow(flowName);      logger.info("ACL flow {} removed.",flowName);    }  }  this.ruleId2FlowName=new HashMap<Integer,Set<String>>();}  }
class C{  public void notifyLightCreationError(String conflict,int bitNum){  javax.swing.JOptionPane.showMessageDialog(null,"The output bit, " + bitNum + ", is currently assigned to "+ conflict+ ". Light cannot be created as "+ "you specified.","Assignment Conflict",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);}  }
class C{  private CommandLine createCommandLine(Map<String,String> archetypeProperties){  final CommandLine commandLine=new CommandLine(MavenUtils.getMavenExecCommand());  commandLine.add("--batch-mode");  commandLine.add("org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate");  commandLine.add(archetypeProperties);  return commandLine;}  }
class C{  public static <T>T[] toSorted(T[] self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure condition){  Comparator<T> comparator=(condition.getMaximumNumberOfParameters() == 1) ? new OrderBy<T>(condition) : new ClosureComparator<T>(condition);  return toSorted(self,comparator);}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(LMJelinekMercerSimilarity.class,sim.getClass());  LMJelinekMercerSimilarity lm=(LMJelinekMercerSimilarity)sim;  assertEquals(0.4f,lm.getLambda(),0.01f);}  }
class C{  @Override default void close() throws Exception {  for (  AutoCloseable closeable : getCloseables()) {    closeable.close();  }}  }
class C{  HttpsClient(SSLSocketFactory sf,URL url,String proxyHost,int proxyPort) throws IOException {  this(sf,url,proxyHost,proxyPort,-1);}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public Axis(){  this(true);}  }
class C{  private void drawLineWithTranslate(final Graphics2D graphics,final Line2D line,final double xOffset,final double yOffset,final double scale){  final Point2D point1=new Point2D.Double((line.getP1().getX() - xOffset) * scale,(line.getP1().getY() - yOffset) * scale);  final Point2D point2=new Point2D.Double((line.getP2().getX() - xOffset) * scale,(line.getP2().getY() - yOffset) * scale);  if (graphics.getClip().contains(point1) || graphics.getClip().contains(point2)) {    graphics.draw(new Line2D.Double(point1,point2));  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiOptionPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiOptionPaneUI)mui).uis,a);}  }
class C{  public TeleportAction(final String zonename,final int x,final int y,final Direction direction){  this.zonename=checkNotNull(zonename);  this.x=x;  this.y=y;  this.direction=direction;}  }
class C{  public Link(String href){  this.href=href;}  }
class C{  public OverpassFilterQuery tagNot(String name,String value){  builder.notEquals(name,value);  return this;}  }
class C{  public int hashCode(){  return group.hashCode();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(getValue()).append(" - ").append(getName());  return sb.toString();}  }
class C{  public boolean isSuccess(){  return "Success".equals(status);}  }
class C{  @Override public void onRestoreInstanceState(Parcelable state){  if (state == null)   return;  String path=((Bundle)state).getString("photoFilePath");  mPhotoFilePath.set(path);}  }
class C{  protected void skipToNextLine(MappedByteBuffer buffer){  byte currentChar;  byte prevChar=NEW_LINE;  while (buffer.hasRemaining()) {    currentChar=buffer.get();    if (currentChar == CARRIAGE_RETURN) {      currentChar=NEW_LINE;    }    if (currentChar == NEW_LINE && prevChar != NEW_LINE) {      break;    }    prevChar=currentChar;  }}  }
class C{  public GeneralAttribute customGet(String get){  this.targetAttribute.get=get;  return this;}  }
class C{  public void rotateTo(float degree){  rotate(degree % 360,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  String namespaceURI;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  namespaceURI=employeeNode.getNamespaceURI();{    boolean success=false;    try {      employeeNode.setPrefix("employee1");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.209 -0400",hash_original_method="46EC5EF747261262EAD8ED1BD4879967",hash_generated_method="2CB0A7EEA30A4F8FDF3B216777E92993") @Override public void write(char[] chr) throws IOException {  out.write(chr);}  }
class C{  public static double P_JaccardIndex(int Y[][],int Ypred[][]){  return P_Accuracy(Y,Ypred);}  }
class C{  String renameFile(String inputFilename){  for (  Pattern searchExp : regexMappings.keySet()) {    Matcher matcher=searchExp.matcher(inputFilename);    if (matcher.find()) {      String renamed=matcher.replaceFirst(regexMappings.get(searchExp));      return FILE_SEP_CHAR_MATCHER.trimLeadingFrom(renamed);    }  }  throw new MoeProblem("Cannot find a rename mapping that covers file %s. " + "Every file needs an applicable renaming rule.",inputFilename);}  }
class C{  public static boolean arityMatch(BuiltinInfo fastr,BuiltinInfo gnur){  return fastr.arity == -1 || gnur.arity == -1 || fastr.arity == gnur.arity;}  }
class C{  public LayersMenu(){  this(null);}  }
class C{  public tt removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public VisorClusterGroupEmptyException(String msg){  super(msg);}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  int size=timeSeries.size();  double current=0;  for (int i=0; i < size; i++) {    current+=timeSeries.getValue(i);  }  functionValueMap.add(this,current / timeSeries.size());}  }
class C{  static void disableInstrumentation(){  instrumentationEnabled=false;}  }
class C{  public void testConstrStringWithExponentWithoutPoint4(){  String a="238768787678287e+214";  int aScale=-214;  BigInteger bA=new BigInteger("238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Override public IMessageEditorTab createNewInstance(IMessageEditorController controller,boolean editable){  return new InputTab(controller,editable);}  }
class C{  private static void addGraphQLSchemaFileToProjectAndLibrariesScope(FindUsagesOptions options){  if (options.searchScope instanceof ProjectAndLibrariesScope) {    final ProjectAndLibrariesScope projectAndLibrariesScope=(ProjectAndLibrariesScope)options.searchScope;    options.searchScope=new JSGraphQLProjectAndLibrariesScope(projectAndLibrariesScope);  }}  }
class C{  public String percentageTipText(){  return "The percentage of the data to select.";}  }
class C{  public StrBuilder reverse(){  if (size == 0) {    return this;  }  final int half=size / 2;  final char[] buf=buffer;  for (int leftIdx=0, rightIdx=size - 1; leftIdx < half; leftIdx++, rightIdx--) {    final char swap=buf[leftIdx];    buf[leftIdx]=buf[rightIdx];    buf[rightIdx]=swap;  }  return this;}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  char c;  if (++bufpos == available)   AdjustBuffSize();  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    UpdateLineColumn(c);    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available)       AdjustBuffSize();      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          UpdateLineColumn(c);          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0)             bufpos=bufsize - 1;            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1)         backup(backSlashCnt - 1);        return '\\';      }      UpdateLineColumn(c);      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new Error("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1)     return c; else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  public Line(int offset,int length){  this.offset=offset;  this.length=length;  this.delimiter=null;}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public boolean isMustRevalidate(){  return mustRevalidate;}  }
class C{  public static String toString(short[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public boolean isEffective(){  boolean result[]=new boolean[parents.length];  for (int row=0; row < lookupTable.length; row++) {    int jump=1;    for (int i=0; i < parents.length; i++) {      if ((row / jump) % 2 == 0) {        if (lookupTable[row] != lookupTable[row + jump]) {          result[i]=true;        }      }      jump*=2;    }  }  for (int i=0; i < parents.length; i++) {    if (!result[i]) {      return false;    }  }  return true;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("UQASX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQASX");    translateAll(environment,instruction,"UQASX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQADDSUBX");    translateAll(environment,instruction,"UQADDSUBX",instructions);  }}  }
class C{  public static void addCol(Matrix A,int j,double c){  addCol(A,j,0,A.rows(),c);}  }
class C{  @Override public void addAttribute(String name,float value){  String str=Float.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  ((Element)current).setAttribute(name,str);}  }
class C{  public static long abs(final long x){  final long l=x >>> 63;  return (x ^ (~l + 1)) + l;}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=HashUtilities.hashCode(hash,this.intervalDelegate);  hash=HashUtilities.hashCode(hash,this.data);  return hash;}  }
class C{  public void shutdownCrash(){  log().info("Robot Error Detected... Shutting Down...");  Async.INSTANCE.shutdownNow();  shutdownCommon();  System.exit(-1);}  }
class C{  public DeletingUnitWithSubscriptionsNotPermittedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void removeAllListeners(){  die();}  }
class C{  public void invert(){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=!m_Selected[i];  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  String pathField=(String)fields.get("path",null);  char sep=s.readChar();  if (sep != separatorChar)   pathField=pathField.replace(sep,separatorChar);  String path=fs.normalize(pathField);  UNSAFE.putObject(this,PATH_OFFSET,path);  UNSAFE.putIntVolatile(this,PREFIX_LENGTH_OFFSET,fs.prefixLength(path));}  }
class C{  public int size(){  return data.size() >> 1;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ")";}  }
class C{  protected Map<DynamicAccountKey,DynamicAccount> computeDynamicAccounts() throws ConfigurationException {  Map<DynamicAccountKey,DynamicAccount> newAccounts;  try {    newAccounts=new HashMap<DynamicAccountKey,DynamicAccount>(getLocalUsers().countUsers() * getParsedDynamicAccountParameters().size());  } catch (  UsersRepositoryException e) {    throw new ConfigurationException("Unable to acces UsersRepository",e);  }  Map<DynamicAccountKey,DynamicAccount> oldAccounts=getDynamicAccountsBasic();  if (null == oldAccounts)   oldAccounts=new HashMap<DynamicAccountKey,DynamicAccount>(0);  for (  ParsedDynamicAccountParameters parsedDynamicAccountParameters : getParsedDynamicAccountParameters()) {    Map<DynamicAccountKey,DynamicAccount> accounts=computeDynamicAccounts(oldAccounts,parsedDynamicAccountParameters);    Iterator<DynamicAccountKey> oldAccountsIterator=oldAccounts.keySet().iterator();    while (oldAccountsIterator.hasNext()) {      if (accounts.containsKey(oldAccountsIterator.next()))       oldAccountsIterator.remove();    }    newAccounts.putAll(accounts);  }  return newAccounts;}  }
class C{  private PrincipalId validateExternalUser(IdmAccessor idmAccessor,Message arg0) throws InvalidSignatureException, InvalidTokenException, SystemException {  Validate.notNull(idmAccessor,"idmAccessor");  Validate.notNull(arg0,"Message");  String tenant=idmAccessor.getTenant();  Validate.notNull(tenant,"tenant");  AuthnData authnData=(AuthnData)arg0.getMessageData();  Validate.notNull(authnData,"authnData");  Element tokenEle=(Element)authnData.getToken().getElementsByTagNameNS(SAMLNames.NS_VAL_SAML_SAML,SAMLNames.ASSERTION).item(0);  ServerValidatableSamlToken servToken=tokenFactory.parseToken(tokenEle);  final TokenValidator authnOnlyTokenValidator=samlAuthFactory.createAuthnOnlyTokenValidator(tenant);  final ServerValidatableSamlToken validatedToken=authnOnlyTokenValidator.validate(servToken);  Validate.isTrue(validatedToken.isExternal());  IDPConfig extIdp=getIssuerIDPConfig(arg0,idmAccessor);  boolean isJitEnabled=extIdp.getJitAttribute();  PrincipalId subjectUpn=validatedToken.getSubject().subjectUpn();  boolean isSubjectValidated=subjectUpn != null && validatedToken.getSubject().subjectValidation() != SubjectValidation.None;  if (!isJitEnabled && !isSubjectValidated) {    log.error("Not able to validate the subject in external token ");    com.vmware.identity.websso.client.ValidationResult extResponseVr=new com.vmware.identity.websso.client.ValidationResult(HttpServletResponse.SC_NOT_ACCEPTABLE,OasisNames.REQUEST_DENIED,"Subject validation of external token." + " Unable to validate the subject.");    arg0.setValidationResult(extResponseVr);    return null;  }  if (isJitEnabled && !isSubjectValidated) {    try {      subjectUpn=idmAccessor.createUserAccountJustInTime(servToken.getSubject(),tenant,extIdp);    } catch (    Exception e) {      log.error("Failure to create a temporary user.",e);      com.vmware.identity.websso.client.ValidationResult extResponseVr=new com.vmware.identity.websso.client.ValidationResult(HttpServletResponse.SC_UNAUTHORIZED,OasisNames.RESPONDER,null);      arg0.setValidationResult(extResponseVr);      return null;    }  }  if (isJitEnabled) {    try {      idmAccessor.updateJitUserGroups(subjectUpn,tenant,extIdp.getTokenClaimGroupMappings(),authnData.getAttributes());    } catch (    Exception e) {      log.error("Encountered an error while updating Jit user groups",e);      com.vmware.identity.websso.client.ValidationResult extResponseVr=new com.vmware.identity.websso.client.ValidationResult(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,OasisNames.RESPONDER,null);      arg0.setValidationResult(extResponseVr);      return null;    }  }  return subjectUpn;}  }
class C{  private static void hbCreateDecodeTables(final int[] limit,final int[] base,final int[] perm,final char[] length,final int minLen,final int maxLen,final int alphaSize){  for (int i=minLen, pp=0; i <= maxLen; i++) {    for (int j=0; j < alphaSize; j++) {      if (length[j] == i) {        perm[pp++]=j;      }    }  }  for (int i=MAX_CODE_LEN; --i > 0; ) {    base[i]=0;    limit[i]=0;  }  for (int i=0; i < alphaSize; i++) {    base[length[i] + 1]++;  }  for (int i=1, b=base[0]; i < MAX_CODE_LEN; i++) {    b+=base[i];    base[i]=b;  }  for (int i=minLen, vec=0, b=base[i]; i <= maxLen; i++) {    final int nb=base[i + 1];    vec+=nb - b;    b=nb;    limit[i]=vec - 1;    vec<<=1;  }  for (int i=minLen + 1; i <= maxLen; i++) {    base[i]=((limit[i - 1] + 1) << 1) - base[i];  }}  }
class C{  private void insertEpilogue(Instruction ret){  if (ir.compiledMethod.isSaveVolatile()) {    restoreVolatileRegisters(ret);    restoreFloatingPointState(ret);  }  restoreNonVolatiles(ret);  int frameSize=getFrameFixedSize();  ret.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(frameSize)));  MemoryOperand fpHome=MemoryOperand.BD(ir.regpool.makeTROp(),ArchEntrypoints.framePointerField.getOffset(),(byte)WORDSIZE,null,null);  ret.insertBefore(MIR_Nullary.create(IA32_POP,fpHome));}  }
class C{  private void formatColumns(){  final Enumeration<TableColumn> columnList=getColumnModel().getColumns();  while (columnList.hasMoreElements()) {    final TableColumn column=columnList.nextElement();    if (defaultLongColumn != null && defaultLongColumn.toLowerCase().equals(column.getHeaderValue().toString().toLowerCase())) {      column.setPreferredWidth(Short.MAX_VALUE);    } else {      final TableCellRenderer headerRenderer=column.getHeaderRenderer() != null ? column.getHeaderRenderer() : getTableHeader().getDefaultRenderer();      final Component headerComponent=headerRenderer.getTableCellRendererComponent(this,column.getHeaderValue(),false,false,-1,column.getModelIndex());      int maxWidth=headerComponent.getPreferredSize().width + JBUI.scale(20);      final int maxRowsToCheck=Math.min(MAX_ROWS_CHECKED,getRowCount());      for (int row=0; row < maxRowsToCheck; row++) {        final TableCellRenderer renderer=getCellRenderer(row,column.getModelIndex());        final Component comp=prepareRenderer(renderer,row,column.getModelIndex());        maxWidth=Math.max(comp.getPreferredSize().width,maxWidth);      }      column.setMinWidth(Math.min(maxWidth + JBUI.scale(10),DEFAULT_COLUMN_WIDTH));      column.setWidth(column.getMinWidth());    }  }}  }
class C{  public static String toCapitalizeCamelCase(String s){  if (s == null) {    return null;  }  s=toCamelCase(s);  return s.substring(0,1).toUpperCase() + s.substring(1);}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double ell=Math.exp(loghyper.get(0,0));  final double em2=1 / (ell * ell);  final double oneplusem2=1 + em2;  final double sf2=Math.exp(2 * loghyper.get(1,0));  final int m=X.getRowDimension();  final int n=X.getColumnDimension();  double[][] x=X.getArray();  final int mstar=Xstar.getRowDimension();  final int nstar=Xstar.getColumnDimension();  double[][] xstar=Xstar.getArray();  double[] sumxstardotTimesxstar=new double[mstar];  for (int i=0; i < mstar; i++) {    double t=0;    for (int j=0; j < nstar; j++) {      final double tt=xstar[i][j];      t+=tt * tt * em2;    }    sumxstardotTimesxstar[i]=t;  }  Matrix A=new Matrix(mstar,1);  double[][] a=A.getArray();  for (int i=0; i < mstar; i++) {    a[i][0]=sf2 * Math.asin((em2 + sumxstardotTimesxstar[i]) / (oneplusem2 + sumxstardotTimesxstar[i]));  }  double[] sumxdotTimesx=new double[m];  for (int i=0; i < m; i++) {    double t=0;    for (int j=0; j < n; j++) {      final double tt=x[i][j];      t+=tt * tt * em2;    }    sumxdotTimesx[i]=t + oneplusem2;  }  Matrix B=new Matrix(m,mstar);  double[][] b=B.getArray();  for (int i=0; i < m; i++) {    final double[] xi=x[i];    for (int j=0; j < mstar; j++) {      double t=0;      final double[] xstarj=xstar[j];      for (int k=0; k < n; k++) {        t+=xi[k] * xstarj[k] * em2;      }      b[i][j]=t + em2;    }  }  for (int i=0; i < m; i++) {    for (int j=0; j < mstar; j++) {      b[i][j]=sf2 * Math.asin(b[i][j] / Math.sqrt((sumxstardotTimesxstar[j] + oneplusem2) * sumxdotTimesx[i]));    }  }  return new Matrix[]{A,B};}  }
class C{  public boolean isLookup(){  boolean retValue=false;  int displayType=getAD_Reference_ID();  if (DisplayType.isLookup(displayType))   retValue=true; else   if (displayType == DisplayType.Location || displayType == DisplayType.Locator || displayType == DisplayType.Account || displayType == DisplayType.PAttribute)   retValue=true;  return retValue;}  }
class C{  public int hammingWeightC(int n){  return n == 0 || n == 1 ? n : (n & 1) + hammingWeightC(n >>> 1);}  }
class C{  public MissingBodyResponse(){  requestFileName="getstate.query";  responseFile="missing-body.query";}  }
class C{  private void throwISEwhenClosed(){  if (isClosed())   throw new IllegalStateException("Cache already closed: " + tcache.id());}  }
class C{  private int processColon(int length){  if (_hasScheme) {    if (!readUserPass(length) && _buffer.length() > 0) {      _reader.goBack();      _buffer.delete(_buffer.length() - 1,_buffer.length());      int backtrackOnFail=_reader.getPosition() - _buffer.length() + length;      if (!readDomainName(_buffer.substring(length))) {        _reader.seek(backtrackOnFail);        readEnd(ReadEndState.InvalidUrl);      }      length=0;    }  } else   if (readScheme() && _buffer.length() > 0) {    _hasScheme=true;    length=_buffer.length();  } else   if (_buffer.length() > 0 && _options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _reader.canReadChars(1)) {    _reader.goBack();    _buffer.delete(_buffer.length() - 1,_buffer.length());    readDomainName(_buffer.toString());  } else {    readEnd(ReadEndState.InvalidUrl);    length=0;  }  return length;}  }
class C{  private boolean processNewNode(final INaviViewNode node){  if (node instanceof INaviCodeNode) {    final INaviCodeNode cnode=(INaviCodeNode)node;    try {      final INaviFunction targetFunction=cnode.getParentFunction();      if (m_nodeCounter.containsKey(targetFunction)) {        m_nodeCounter.put(targetFunction,m_nodeCounter.get(targetFunction) + 1);      } else {        m_nodeCounter.put(targetFunction,1);        for (        final INaviModule sourceModule : m_viewContainer.getModules()) {          if (sourceModule == targetFunction.getModule()) {            for (            final INaviFunction sourceFunction : sourceModule.getContent().getNativeCallgraph().getCallers(targetFunction)) {              m_crossReferences.add(new CCrossReference(sourceFunction,targetFunction));            }          } else {            try {              final INaviFunction forwardedFunction=findForwardedFunction(sourceModule,targetFunction);              for (              final INaviFunction sourceFunction : sourceModule.getContent().getNativeCallgraph().getCallers(forwardedFunction)) {                m_crossReferences.add(new CCrossReference(sourceFunction,targetFunction));              }            } catch (            final MaybeNullException exception) {            }          }        }        return true;      }    } catch (    final MaybeNullException exception) {    }  }  return false;}  }
class C{  public static AsyncModifySubscriptionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncModifySubscriptionResponse object=new AsyncModifySubscriptionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"asyncModifySubscriptionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (AsyncModifySubscriptionResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  list.add(obj4);  return list;}  }
class C{  public static short[] insert(short[] dest,short src,int offset){  short[] temp=new short[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean booleanValue(){  return value;}  }
class C{  @Override public void changeSelection(int row,int col,boolean toggle,boolean extend){  TableEntry entry=list.get(row);  UIHistory.requestViewer.setMessage(entry.getMessage().getRequest(),true);  UIHistory.responseViewer.setMessage(entry.getMessage().getResponse(),false);  UIHistory.currentlyDisplayedItem=entry.getMessage();  super.changeSelection(row,col,toggle,extend);}  }
class C{  public StreamHandler(OutputStream stream,Formatter formatter){  super();  this.pw=new PrintWriter(stream,true);  this.setFormatter(formatter);}  }
class C{  public BackgroundScriptProperties(final String script,final boolean autoStart,final boolean repeat){  this.script=new SimpleStringProperty(script);  this.autoStart=new SimpleBooleanProperty(autoStart);  this.repeat=new SimpleBooleanProperty(repeat);}  }
class C{  public boolean remove(final Uri uri){  try {    mContext.getContentResolver().delete(uri,null,null);    return true;  } catch (  Throwable e) {    e.printStackTrace();    return false;  }}  }
class C{  public static GridJavaProcess exec(Class cls,String params,@Nullable IgniteLogger log,@Nullable IgniteInClosure<String> printC,@Nullable GridAbsClosure procKilledC,@Nullable Collection<String> jvmArgs,@Nullable String cp) throws Exception {  return exec(cls.getCanonicalName(),params,log,printC,procKilledC,null,jvmArgs,cp);}  }
class C{  public void applyPattern(String pattern){  applyPattern(pattern,false);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MRequisitionLine[] lines=getLines();  if (getAD_User_ID() == 0 || getM_PriceList_ID() == 0 || getM_Warehouse_ID() == 0) {    return DocAction.STATUS_Invalid;  }  if (lines.length == 0) {    throw new AdempiereException("@NoLines@");  }  MPeriod.testPeriodOpen(getCtx(),getDateDoc(),MDocType.DOCBASETYPE_PurchaseRequisition,getAD_Org_ID());  int precision=MPriceList.getStandardPrecision(getCtx(),getM_PriceList_ID());  BigDecimal totalLines=Env.ZERO;  for (int i=0; i < lines.length; i++) {    MRequisitionLine line=lines[i];    BigDecimal lineNet=line.getQty().multiply(line.getPriceActual());    lineNet=lineNet.setScale(precision,BigDecimal.ROUND_HALF_UP);    if (lineNet.compareTo(line.getLineNetAmt()) != 0) {      line.setLineNetAmt(lineNet);      line.saveEx();    }    totalLines=totalLines.add(line.getLineNetAmt());  }  if (totalLines.compareTo(getTotalLines()) != 0) {    setTotalLines(totalLines);    saveEx();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  @Override public boolean isLocalValueSet(){  return (Boolean)getStateHelper().eval(PropertyKeys.localValueSet,false);}  }
class C{  @Override public void updateSelectionTo(Collection<GraphNode> selection){  updateSelectedExtend(selection);}  }
class C{  public static boolean isPointInPolygon(Geo x,double[] poly,boolean polyInDegrees){  if (polyInDegrees) {    return isPointInPolygon(x,GeoArray.Float.createFromLatLonDegrees(poly));  } else {    return isPointInPolygon(x,GeoArray.Float.createFromLatLonRadians(poly));  }}  }
class C{  public void annotationRemoved(Annotation annotation,Position position){  removedAnnotations.put(annotation,position);}  }
class C{  public Axis(Number min,Number max){  this(false);  this.min=min;  this.max=max;}  }
class C{  public boolean isInEditZoomRange(){  return (viewBox.getWidth() < TOLERANCE_MIN_VIEWBOX_WIDTH) && (viewBox.getHeight() < TOLERANCE_MIN_VIEWBOX_WIDTH) && !map.tooManyNodes();}  }
class C{  public boolean nodeEquals(final GPNode node){  if (!this.getClass().equals(node.getClass()) || children.length != node.children.length)   return false;  ADF adf=(ADF)node;  return (associatedTree == adf.associatedTree && name.equals(adf.name));}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<java.lang.Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  @Override public boolean apply(TypeMirror input){  return input != null && input.accept(this,null);}  }
class C{  public static byte[] createDataToSign(byte[] digest){  byte[] prefix=getDigestInfoPrefix(digest);  byte[] digestInfo=new byte[prefix.length + digest.length];  System.arraycopy(prefix,0,digestInfo,0,prefix.length);  System.arraycopy(digest,0,digestInfo,prefix.length,digest.length);  return digestInfo;}  }
class C{  public E(){  super("e",0);}  }
class C{  public GetEndpointsRequest clone(){  GetEndpointsRequest result=new GetEndpointsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.EndpointUrl=EndpointUrl;  result.LocaleIds=LocaleIds == null ? null : LocaleIds.clone();  result.ProfileUris=ProfileUris == null ? null : ProfileUris.clone();  return result;}  }
class C{  public static final String toHex(byte[] b,int offset,int length){  if ((b.length - offset) < length) {    throw new IllegalArgumentException("Less then " + length + " bytes starting from offset:"+ offset);  }  char[] buf=new char[length * 2];  for (int i=0, j=0, k; i < length; ) {    k=b[offset + i++];    buf[j++]=HEX_CHARS[(k >>> 4) & 0x0F];    buf[j++]=HEX_CHARS[k & 0x0F];  }  return new String(buf);}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public void deselect(final int start,final int end){  deselect(start,end,true);}  }
class C{  public E sample(final Random rand){  final double total=totalCount();  if (total <= 0.0) {    throw new RuntimeException(String.format("Attempting to sample() with totalCount() %.3f\n",total));  }  double sum=0.0;  final double r=rand.nextDouble();  for (  final Map.Entry<E,Double> entry : entries.entrySet()) {    final double count=entry.getValue();    final double frac=count / total;    sum+=frac;    if (r < sum) {      return entry.getKey();    }  }  throw new IllegalStateException("Shoudl've have returned a sample by now....");}  }
class C{  private void updateTimes(Plan plan){  boolean firstActivity=true;  Activity lastActivity=null;  for (  PlanElement pe : plan.getPlanElements()) {    if (pe instanceof Activity) {      lastActivity=(Activity)pe;      if (firstActivity) {        ((Activity)pe).setStartTime(Time.UNDEFINED_TIME);        firstActivity=false;      }    }  }  if (plan.getPlanElements().size() != 1)   lastActivity.setEndTime(Time.UNDEFINED_TIME);}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public Image renderImage(IFile file,ExecutionContext context){  Diagram diagram=getDiagramCopy(file);  return renderImage(diagram,context);}  }
class C{  public static <T1,T2,T3,T4,R>QuadFunction<T1,T2,T3,T4,R> memoizeQuadFunction(final QuadFunction<T1,T2,T3,T4,R> fn){  val memoise2=memoizeFunction(null);  return null;}  }
class C{  public Option values(HashMap<String,Object> values){  this.values=values;  return this;}  }
class C{  public boolean isLessThan(Years other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  @Inline public static boolean fits(Offset val,int bits){  return fits(val.toWord(),bits);}  }
class C{  public static final String trunc(final String str,final int length){  if (str == null) {    return str;  }  if (str.length() <= length) {    return str;  }  return str.substring(0,length);}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  @Override public IFileTransfer transferFileToGroupChat2(final String chatId,Uri file,int disposition,boolean attachFileIcon) throws RemoteException {  if (TextUtils.isEmpty(chatId)) {    throw new ServerApiIllegalArgumentException("chatId must not be null or empty!");  }  if (file == null) {    throw new ServerApiIllegalArgumentException("file must not be null!");  }  if (!FileUtils.isReadFromUriPossible(mCtx,file)) {    throw new ServerApiIllegalArgumentException("file '" + file.toString() + "' must refer to a file that exists and that is readable by stack!");  }  if (!isAllowedToTransferFileToGroupChat(chatId)) {    throw new ServerApiPermissionDeniedException("No sufficient capabilities to transfer file to group chat!");  }  if (sLogger.isActivated()) {    sLogger.info("sendFile (file=" + file + ") (fileicon="+ attachFileIcon+ ")");  }  try {    Uri localFile=FileUtils.createCopyOfSentFile(file,mRcsSettings);    FileDescription fileDescription=FileFactory.getFactory().getFileDescription(localFile);    String mime=FileUtils.getMimeType(localFile);    final MmContent content=ContentManager.createMmContent(localFile,mime,fileDescription.getSize(),fileDescription.getName());    if (Disposition.valueOf(disposition) == Disposition.RENDER) {      content.setPlayable(true);    }    final String fileTransferId=IdGenerator.generateMessageID();    MmContent fileIconContent=null;    if (attachFileIcon && MimeManager.isImageType(content.getEncoding())) {      fileIconContent=FileTransferUtils.createFileicon(content.getUri(),fileTransferId,mRcsSettings);    }    final long timestamp=System.currentTimeMillis();    addOutgoingGroupFileTransfer(fileTransferId,chatId,content,fileIconContent,State.QUEUED,timestamp,timestamp);    if (!mChatService.isGroupChatActive(chatId)) {      mChatService.setGroupChatStateAndReasonCode(chatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);    }    GroupFileTransferImpl groupFileTransfer=getOrCreateGroupFileTransfer(chatId,fileTransferId);    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(chatId);    return groupFileTransfer;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public static boolean deleteQuietly(final File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  final Exception ignored) {  }  try {    return file.delete();  } catch (  final Exception ignored) {    return false;  }}  }
class C{  public long position(){  long result=0;  try {    result=mCurrentMediaPlayer.getCurrentPosition();  } catch (  Throwable ignored) {  }  return result;}  }
class C{  public boolean isOldToken(){  return oldToken;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  UnitError(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private boolean removeTokenIfUnused(Object name){synchronized (this.tokens) {    if (this.destroyed) {      getStats().incFreeResourcesFailed();      return false;    }    DLockToken token=(DLockToken)this.tokens.get(name);    if (token != null) {synchronized (token) {        if (!token.isBeingUsed()) {          if (logger.isTraceEnabled(LogMarker.DLS)) {            logger.trace(LogMarker.DLS,"Freeing {} in {}",token,this);          }          removeTokenFromMap(name);          token.destroy();          getStats().incTokens(-1);          getStats().incFreeResourcesCompleted();          return true;        }      }    }  }  getStats().incFreeResourcesFailed();  return false;}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float right=(targetAspectRatio * height) + left;  return right;}  }
class C{  public OnStateMachineStart(Object source,StateMachine<?,?> stateMachine){  super(source);  this.stateMachine=stateMachine;}  }
class C{  public void toggleState(final boolean animate){  if (currentAnimator != null) {    currentAnimator.cancel();  }  if (state != State.ACTIVE) {    setActive(animate);  } else   if (state != State.INACTIVE) {    setInactive(animate);  } else {    Log.e(TAG,"[Animation trying to start from illegal state]");  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){  for (ElemTemplateElement node=m_firstChild; node != null; node=node.m_nextSibling) {    node.callVisitors(visitor);  }}  }
class C{  private static void print(String s){  System.out.print(s);}  }
class C{  public <T>T newModel(Class<T> type){  return newModel(type,EntityConstraint.noConstraints());}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public static boolean sameVectors(int[] v1,int[] v2){  for (int i=0; i < 6; i++) {    if (v1[i] != v2[i]) {      return false;    }  }  return true;}  }
class C{  public Document read(InputStream in) throws DocumentException {  InputSource source=new InputSource(in);  if (this.encoding != null) {    source.setEncoding(this.encoding);  }  return read(source);}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Border border=getBorder();  if (label == null) {    if (border != null) {      border.paintBorder(c,g,x,y,width,height);    }    return;  }  Rectangle grooveRect=new Rectangle(x + EDGE_SPACING,y + EDGE_SPACING,width - (EDGE_SPACING * 2),height - (EDGE_SPACING * 2));  Dimension labelDim=label.getPreferredSize();  int baseline=label.getBaseline(labelDim.width,labelDim.height);  int ascent=Math.max(0,baseline);  int descent=labelDim.height - ascent;  int diff;  Insets insets;  if (border != null) {    insets=border.getBorderInsets(c);  } else {    insets=new Insets(0,0,0,0);  }  diff=Math.max(0,ascent / 2 + TEXT_SPACING - EDGE_SPACING);  grooveRect.y+=diff;  grooveRect.height-=diff;  compLoc.y=grooveRect.y + insets.top / 2 - (ascent + descent) / 2 - 1;  int justification;  if (c.getComponentOrientation().isLeftToRight()) {    justification=LEFT;  } else {    justification=RIGHT;  }switch (justification) {case LEFT:    compLoc.x=grooveRect.x + TEXT_INSET_H + insets.left;  break;case RIGHT:compLoc.x=(grooveRect.x + grooveRect.width - (labelDim.width + TEXT_INSET_H + insets.right));break;}if (border != null) {if (grooveRect.y > compLoc.y - ascent) {Rectangle clipRect=new Rectangle();Rectangle saveClip=g.getClipBounds();clipRect.setBounds(saveClip);if (computeIntersection(clipRect,x,y,compLoc.x - 1 - x,height)) {g.setClip(clipRect);border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}clipRect.setBounds(saveClip);if (computeIntersection(clipRect,compLoc.x + labelDim.width + 1,y,x + width - (compLoc.x + labelDim.width + 1),height)) {g.setClip(clipRect);border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}clipRect.setBounds(saveClip);if (computeIntersection(clipRect,compLoc.x - 1,compLoc.y + ascent + descent,labelDim.width + 2,y + height - compLoc.y - ascent - descent)) {g.setClip(clipRect);border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}g.setClip(saveClip);} else {border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}label.setLocation(compLoc);label.setSize(labelDim);}}  }
class C{  public static ASTNode findParentType(ASTNode node){  return findParentType(node,false);}  }
class C{  public InvalidCredentialsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private static void addDetailedTransportErrorMessage(Form<Project> filledNewProjectForm,TransportException e,boolean hasNoCredentials){  String errorMessage=e.getMessage();  if (errorMessage.contains(JGitText.get().notAuthorized)) {    if (hasNoCredentials) {      filledNewProjectForm.reject("repoAuth","required");      filledNewProjectForm.reject("url","project.import.error.transport.unauthorized");    } else {      filledNewProjectForm.reject("authId","project.import.error.transport.failedToAuth");    }  } else   if (errorMessage.contains(java.text.MessageFormat.format(JGitText.get().serviceNotPermitted,""))) {    filledNewProjectForm.reject("url","project.import.error.transport.forbidden");  } else {    String statusCode=errorMessage.split(" ")[1];    filledNewProjectForm.reject("url",Messages.get("project.import.error.transport",statusCode));  }}  }
class C{  public String densityBasedClustererTipText(){  return "The clusterer that will generate membership values for the instances.";}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public static void assertSame(Object expected,Object actual){  Assert.assertSame(expected,actual);}  }
class C{  private static int capAtMaximumSize(int queueSize,int maximumSize){  return Math.min(queueSize - 1,maximumSize) + 1;}  }
class C{  protected int addHeaderToOutput(byte[] msg,AbstractMRMessage m){  return 0;}  }
class C{  public DDistinguishedNameChooser(JDialog parent,String title,X500Name distinguishedName,boolean editable){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.distinguishedName=distinguishedName;  this.editable=editable;  initComponents();}  }
class C{  public RDFParseException(String msg,Throwable t){  this(msg,t,-1,-1);}  }
class C{  private void cut(FibonacciHeapNode<T> x,FibonacciHeapNode<T> y){  x.left.right=x.right;  x.right.left=x.left;  y.degree--;  if (y.child == x) {    y.child=x.right;  }  if (y.degree == 0) {    y.child=null;  }  x.left=minNode;  x.right=minNode.right;  minNode.right=x;  x.right.left=x;  x.parent=null;  x.mark=false;}  }
class C{  private void handleError(@NotNull Throwable e){  String errorMessage=(e.getMessage() != null && !e.getMessage().isEmpty()) ? e.getMessage() : constant.removeFilesFailed();  console.printError(errorMessage);  Notification notification=new Notification(errorMessage,ERROR);  notificationManager.showNotification(notification);}  }
class C{  public MinMaxFilter(Level min,Level max){  this.min=min == null ? Level.INFO : min;  this.max=max == null ? Level.ERROR : max;}  }
class C{  private boolean processRedirectResponse(final HttpMethod method) throws RedirectException {  final Header locationHeader=method.getResponseHeader("location");  if (locationHeader == null) {    LOG.error("Received redirect response " + method.getStatusCode() + " but no location header");    return false;  }  final String location=locationHeader.getValue();  if (LOG.isDebugEnabled()) {    LOG.debug("Redirect requested to location '" + location + "'");  }  URI redirectUri=null;  URI currentUri=null;  try {    currentUri=new URI(conn.getProtocol().getScheme(),null,conn.getHost(),conn.getPort(),method.getPath());    final String charset=method.getParams().getUriCharset();    redirectUri=new URI(location,true,charset);    if (redirectUri.isRelativeURI()) {      if (params.isParameterTrue(HttpClientParams.REJECT_RELATIVE_REDIRECT)) {        LOG.warn("Relative redirect location '" + location + "' not allowed");        return false;      } else {        LOG.debug("Redirect URI is not absolute - parsing as relative");        redirectUri=new URI(currentUri,redirectUri);      }    } else {      method.getParams().setDefaults(params);    }    method.setURI(redirectUri);    hostConfiguration.setHost(redirectUri);  } catch (  final URIException ex) {    throw new InvalidRedirectLocationException("Invalid redirect location: " + location,location,ex);  }  if (params.isParameterFalse(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS)) {    if (redirectLocations == null) {      redirectLocations=new HashSet();    }    redirectLocations.add(currentUri);    try {      if (redirectUri.hasQuery()) {        redirectUri.setQuery(null);      }    } catch (    final URIException e) {      return false;    }    if (redirectLocations.contains(redirectUri)) {      throw new CircularRedirectException("Circular redirect to '" + redirectUri + "'");    }  }  if (LOG.isDebugEnabled()) {    LOG.debug("Redirecting from '" + currentUri.getEscapedURI() + "' to '"+ redirectUri.getEscapedURI());  }  method.getHostAuthState().invalidate();  return true;}  }
class C{  public void testMapToMap(){  Map<String,Integer> input=new LinkedHashMap<String,Integer>();  input.put("A",Integer.valueOf(3));  input.put("B",Integer.valueOf(-4));  Map<AB,String> output=mapper.convertValue(input,new TypeReference<Map<AB,String>>(){  });  assertEquals(2,output.size());  assertEquals("3",output.get(AB.A));  assertEquals("-4",output.get(AB.B));  Map<String,Integer> roundtrip=mapper.convertValue(input,new TypeReference<TreeMap<String,Integer>>(){  });  assertEquals(2,roundtrip.size());  assertEquals(Integer.valueOf(3),roundtrip.get("A"));  assertEquals(Integer.valueOf(-4),roundtrip.get("B"));}  }
class C{  private static <T>WhereCondition isAtLeastPartiallyInRange(QueryBuilder<T> qb,Property tsFromProperty,Property tsToProperty,int tsFrom,int tsTo){  return qb.and(tsFromProperty.lt(tsTo),tsToProperty.gt(tsFrom));}  }
class C{  public String toString(){  return set.toString();}  }
class C{  @After public void tearDown(){  population=null;  variation=null;}  }
class C{  @Override public Object stringToValue(String text) throws ParseException {  if ((text == null || text.length() == 0) && getAllowsNullValue()) {    return null;  }  if (unit != null) {    int p=text.lastIndexOf(unit);    if (p != -1) {      text=text.substring(0,p);    }  }  Class valueClass=getValueClass();  Object value;  if (valueClass != null) {    try {      if (valueClass == Integer.class) {        int v=Integer.parseInt(text);        v=(int)(v / multiplier);        value=v;      } else       if (valueClass == Long.class) {        long v=Long.parseLong(text);        v=(long)(v / multiplier);        value=v;      } else       if (valueClass == Float.class) {        float v=Float.parseFloat(text);        v=(float)(v / multiplier);        value=new Float(v);      } else       if (valueClass == Double.class) {        double v=Double.parseDouble(text);        v=(double)(v / multiplier);        value=new Double(v);      } else       if (valueClass == Byte.class) {        byte v=Byte.parseByte(text);        v=(byte)(v / multiplier);        value=v;      } else       if (valueClass == Short.class) {        short v=Short.parseShort(text);        v=(short)(v / multiplier);        value=v;      } else {        throw new ParseException("Unsupported value class " + valueClass,0);      }    } catch (    NumberFormatException e) {      throw new ParseException(e.getMessage(),0);    }  } else {    throw new ParseException("Unsupported value class " + valueClass,0);  }  try {    if (!isValidValue(value,true)) {      throw new ParseException("Value not within min/max range",0);    }  } catch (  ClassCastException cce) {    throw new ParseException("Class cast exception comparing values: " + cce,0);  }  return value;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STREX");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:      return N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:    return N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public Xpp3DomDriver(){  super(new XmlFriendlyNameCoder());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAging[");  sb.append("AD_PInstance_ID=").append(getAD_PInstance_ID()).append(",C_BPartner_ID=").append(getC_BPartner_ID()).append(",C_Currency_ID=").append(getC_Currency_ID()).append(",C_Invoice_ID=").append(getC_Invoice_ID());  sb.append("]");  return sb.toString();}  }
class C{  public static String extractReminder(String publicURL,String accessURL){  return publicURL.substring(accessURL.length());}  }
class C{  protected void addEntityNode(NodeEditPart nodeEditPart){  Node entityNode;  if (nodeEditPart instanceof EntityPart && ((EntityPart)nodeEditPart).getTable().hasSelfLinks()) {    entityNode=new Subgraph(nodeEditPart);  } else {    entityNode=new Node(nodeEditPart);  }  Dimension preferredSize=nodeEditPart.getFigure().getPreferredSize(400,300);  entityNode.width=preferredSize.width;  entityNode.height=preferredSize.height;  entityNode.setPadding(new Insets(20,20,10,20));  partToNodesMap.put(nodeEditPart,entityNode);  graph.nodes.add(entityNode);  if (entityNode instanceof Subgraph) {    Node sourceAnchor=new Node("Fake node for source links",(Subgraph)entityNode);    sourceAnchor.width=0;    sourceAnchor.height=0;    Node targetAnchor=new Node("Fake node for target links",(Subgraph)entityNode);    targetAnchor.width=0;    targetAnchor.height=0;  }}  }
class C{  public void add(IntegerPolynomial b,int modulus){  add(b);  mod(modulus);}  }
class C{  @Override public TopicConnection createTopicConnection() throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createTopicConnection()");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.TOPIC_CONNECTION);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created topic connection: " + s);  }  return s;}  }
class C{  protected void insertGraphDocument(IFile file,GraphDocument graph) throws CoreException {  saveGraphDocument(file,graph);  installGraphDocument(file,graph);}  }
class C{  public boolean paint(Graphics2D g,Projection proj){  Projection currentProj=currentProjection;  OMScalingRaster omr=getImageRaster();  if (!proj.equals(currentProj)) {    currentProjection=proj;    if (omr != null) {      omr.generate(proj);      omr.render(g);      return true;    }  }  return false;}  }
class C{  protected void debugCodeAssign(String className,int newType,int newId,String value){  if (trace.isDebugEnabled()) {    trace.debugCode(className + " " + PREFIX[newType]+ newId+ " = "+ getTraceObjectName()+ "."+ value+ ";");  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.SAVE_HISTORY;}  }
class C{  public boolean validateRequestSignature(HttpServletRequest request,Boolean mustSigned) throws Exception {  Validate.notNull(request,"HttpServletRequest");  String signatureRawQueryString=HTTPTransportUtils.getRawQueryStringParameter(request.getQueryString(),SamlUtils.SIGNATURE_PARAMETER);  String sigAlgRawQueryString=HTTPTransportUtils.getRawQueryStringParameter(request.getQueryString(),SamlUtils.SIGNATURE_ALGORITHM_PARAMETER);  ;  if (StringUtils.isEmpty(signatureRawQueryString) || StringUtils.isEmpty(sigAlgRawQueryString))   if (mustSigned) {    String errMsg="Http request query string missing signature or algorithm.";    log.error(errMsg);    throw new IllegalArgumentException(errMsg);  } else {    return false;  }  try {    Validate.notNull(getCertificate(),"Certificate");    String signature=signatureRawQueryString.split("=")[1];    String algorithmUri=sigAlgRawQueryString.split("=")[1];    String signedContent=parseSignedMessage(request);    verifySignature(signedContent,signature,algorithmUri);    log.info("Successfully validated SAML message signature. ");  } catch (  Exception e) {    log.error("Unable to verify signature of the query string. ",e);    throw e;  }  return true;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return (updater != null) ? right.costInline(thresh,env,ctx) + updater.costInline(thresh,env,ctx,false) : right.costInline(thresh,env,ctx) + left.costInline(thresh,env,ctx) + 2;}  }
class C{  public static SynchronizerStatus makeUnknownStatus(){  return new SynchronizerStatus(Status.UNKNOWN,null,null);}  }
class C{  public void unsubscribe(ClientConnection connection){  log.info("Unsubscribed {} from channel {}",connection.getPeerID(),channelID);  subscriberOffsets.remove(connection);synchronized (publishLock) {    seqNoBySenderID.remove(connection.getPeerID());  }}  }
class C{  public void savePreviousOptOutState(){  final int previousState=mSharedPreferences.getInt(OPT_OUT_STATE,0);  SharedPreferences.Editor sharedPreferencesEditor=mSharedPreferences.edit();  sharedPreferencesEditor.putInt(OPT_OUT_PREVIOUS_STATE,previousState);  sharedPreferencesEditor.apply();}  }
class C{  public SimpleWeighting(double compareWeight,double[] weights){  this.compareWeight=compareWeight;  this.weights=weights;}  }
class C{  public static int deleteInOutLineMA(int M_InOutLine_ID,String trxName){  String sql="DELETE FROM M_InOutLineMA ma WHERE ma.M_InOutLine_ID=?";  return DB.executeUpdate(sql,M_InOutLine_ID,trxName);}  }
class C{  public cern.colt.list.DoubleArrayList toList(DoubleMatrix1D values){  int size=values.size();  cern.colt.list.DoubleArrayList list=new cern.colt.list.DoubleArrayList(size);  list.setSize(size);  for (int i=size; --i >= 0; )   list.set(i,values.get(i));  return list;}  }
class C{  public final TBPar impliedSuccessors(){  TBPar successors=new TBPar(this.size());  for (int i=0; i < this.size(); i++) {    LiveExprNode ln=this.exprAt(i);    if (ln instanceof LNNext) {      successors.addElement(((LNNext)ln).getBody());    }  }  return successors;}  }
class C{  public S1Interval addPoint(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  if (fastContains(p)) {    return new S1Interval(this);  }  if (isEmpty()) {    return S1Interval.fromPoint(p);  } else {    double dlo=positiveDistance(p,lo());    double dhi=positiveDistance(hi(),p);    if (dlo < dhi) {      return new S1Interval(p,hi());    } else {      return new S1Interval(lo(),p);    }  }}  }
class C{  SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public static final void printBitVectorOfStates(long vector){  System.out.println(bitVectorOfStatesToString(vector));}  }
class C{  @Override public boolean isActive(){  return true;}  }
class C{  public RTFEditorKit(){  super();}  }
class C{  public Boolean isNetworkResourceControlVersion3Supported(){  return networkResourceControlVersion3Supported;}  }
class C{  public boolean isManuallyDestroyed(){  return myIsDestroyed;}  }
class C{  public Maybe<Zipper<A>> maybeRemoveNext(){  return Maybe.JustWhenTrue(!isEnd(),null);}  }
class C{  protected String unique(String source){  String result="";  for (int k=0; k < source.length(); k++) {    if (result.indexOf(source.charAt(k)) == -1) {      result+=source.charAt(k);    }  }  return result;}  }
class C{  private long parseLong(String value,String setting){  long number;  int multiplier=getMultiplier(value);  if (multiplier > 1) {    value=value.replaceAll("[^\\d.]","");  }  try {    number=Long.parseLong(value) * multiplier;  } catch (  NumberFormatException e) {    throw new SettingsError("Invalid numeric setting '" + value + "' for '"+ setting+ "'\n"+ e.getMessage());  }  return number;}  }
class C{  public Builder strike(){  this.strike=true;  return this;}  }
class C{  public PaymentDeregistrationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private double[] solve(double[] b){  double[][] a=new double[][]{{src0.x,src0.y,1},{src1.x,src1.y,1},{src2.x,src2.y,1}};  return Matrix.solve(a,b);}  }
class C{  @Override protected void tearDown() throws Exception {  Espresso.unregisterIdlingResources(webViewIdlingResource);  super.tearDown();}  }
class C{  public static Test suite(){  return new TestSuite(XRFFTest.class);}  }
class C{  public void connectTo(String address,int port){  settings.remoteConnections.put(address,port);  getModule(RemoteConnector.class).connectTo(address,port);  if (settings.showGUI) {    getModule(GUIFrame.class).getMenu().update();  }}  }
class C{  public T caseRegularExpressionFlags(RegularExpressionFlags object){  return null;}  }
class C{  public static String encode(String src,String encodeing){  String target=null;  if (src != null) {    byte[] bts1;    if (encodeing == null)     bts1=src.getBytes(); else     try {      bts1=src.getBytes(encodeing);    } catch (    UnsupportedEncodingException e) {      throw new RuntimeException(e);    }    byte[] bts2=encode(bts1);    if (bts2 != null) {      target=new String(bts2);    }  }  return target;}  }
class C{  public TvShowSearchAndScrapeOptions(){}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AxisEntity)) {    return false;  }  AxisEntity that=(AxisEntity)obj;  if (!getArea().equals(that.getArea())) {    return false;  }  if (!ObjectUtilities.equal(getToolTipText(),that.getToolTipText())) {    return false;  }  if (!ObjectUtilities.equal(getURLText(),that.getURLText())) {    return false;  }  if (!(this.axis.equals(that.axis))) {    return false;  }  return true;}  }
class C{  @Override public void beforeRead(Client client){  String message=client.nextMessage();  while (message != null) {    chatServer.writeMessageToClients(client,message);    message=client.nextMessage();  }}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  public synchronized void requestConsumed(){  this.nextSeqno=Long.valueOf(this.getRemoteSeqNumber() + 1);  if (sipStack.isLoggingEnabled()) {    this.sipStack.getStackLogger().logDebug("Request Consumed -- next consumable Request Seqno = " + this.nextSeqno);  }}  }
class C{  public void add(final PassiveEntity entity){  final RPSlot content=getSlot("content");  content.add(entity);}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  protected void sequence_ArgumentPair(ISerializationContext context,ArgumentPair semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException {  return spiImpl.engineGenerateCertificates(inStream);}  }
class C{  public void replaceWith(Scope newScope){  if (childScopes != null) {    for (    Scope kid : childScopes) {      newScope.addChildScope(kid);    }    childScopes.clear();    childScopes=null;  }  if (symbolTable != null && !symbolTable.isEmpty()) {    joinScopes(this,newScope);  }}  }
class C{  public void retrieveList(String path,List<FTPFile> entries,int limit,FTPFileEntryParser parser) throws IOException, FtpExceptionCanNotHaveDataConnection, FtpExceptionUnknownForcedDataClose, FtpExceptionControlClosedByForcedDataClose {  Socket socket=__openPassiveDataConnection(FTPCommand.LIST,path);  if (socket == null)   throw new FtpExceptionCanNotHaveDataConnection("LIST " + ((path == null) ? "" : path));  BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream()));  int count=0;  String line=parser.readNextEntry(reader);  while (line != null) {    FTPFile ftpFile=parser.parseFTPEntry(line);    if (ftpFile == null) {      line=parser.readNextEntry(reader);      continue;    }    entries.add(ftpFile);    count+=line.length();    if (limit >= 0 && count > limit) {      break;    }    line=parser.readNextEntry(reader);  }  socket.close();  try {    int reply=getReply();    if (!_notBadReply(reply))     throw new FtpExceptionUnknownForcedDataClose(getReplyString());  } catch (  FTPConnectionClosedException e) {    throw new FtpExceptionControlClosedByForcedDataClose(e.getMessage());  }}  }
class C{  public <T extends Node>T jjtGetChild(Class<T> type){  for (  Node n : children) {    if (type.isInstance(n)) {      return (T)n;    }  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:02.588 -0500",hash_original_method="968F65DD7A0A827F06FAF23F78E04C48",hash_generated_method="CD3068A149CCD5B39C06926A2722E3EE") public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  static public void fillRandomUniform(IDoubleVector vec,Random rand,double min,double max){  final double delta=max - min;  for (int i=0; i < vec.getLength(); ++i) {    vec.set(i,min + rand.nextDouble() * delta);  }}  }
class C{  public ServiceEventImpl(JmDNSImpl jmDNS,String type,String name,ServiceInfo info){  super(jmDNS);  this._type=type;  this._name=name;  this._info=info;}  }
class C{  public ZkClusterData fetchAllCollections(){  Set<String> collections=getZkClusterData().getClusterState().keySet();  getZkClusterData().setCollections(collections);  return getZkClusterData();}  }
class C{  public String toString(SootMethod method,Block start){  Map<Block,Integer> blockNumbers=new HashMap<Block,Integer>();  StringBuilder sb=new StringBuilder("digraph " + method.getName() + "CFG {\n");  int bIdx=0;  int instOff=0;  for (  Block b : this) {    blockNumbers.put(b,bIdx);    sb.append("  bb");    sb.append(bIdx);    sb.append(" [shape=none, margin=0, label=<\n");    if (b.equals(start))     sb.append("    <table bgcolor=\"#FF6666\" border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n"); else     sb.append("    <table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n");    int idx=b.getIndexInMethod();    if (heads.contains(b)) {      sb.append("      <tr><td align=\"center\">START</td></tr>");    } else     if (tails.contains(b)) {      sb.append("      <tr><td align=\"center\">END</td></tr>");    } else {      for (      Unit unit : b) {        sb.append("      <tr><td align=\"left\">");        sb.append(idx + instOff);        sb.append("</td><td align=\"left\">");        sb.append(StringEscapeUtils.escapeHtml4(unit.toString()));        sb.append("</td></tr>\n");        instOff++;      }      instOff--;    }    sb.append("    </table>>];\n");    bIdx++;  }  for (  Block b : this) {    int bFrom=blockNumbers.containsKey(b) ? blockNumbers.get(b) : blockNumbers.size();    for (    Block succ : getSuccsOf(b)) {      int bTo=blockNumbers.containsKey(succ) ? blockNumbers.get(succ) : blockNumbers.size();      sb.append("  bb");      sb.append(bFrom);      sb.append(" -> bb");      sb.append(bTo);      sb.append(";\n");    }  }  sb.append("}");  return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] < z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.TIME_EVENT_SPEC__VALUE:    return basicSetValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void dbgPrintDetail(){  Log.writeln("--vvv-- Free List --vvv--");  for (int i=-heads; i <= table.length / 2 - heads - 1; i++) {    dbgPrintEntry(i);  }  Log.writeln("--^^^-- Free List --^^^--");}  }
class C{  public static CCLabel makeLabel(String string,final CGSize dimensions,TextAlignment alignment,String fontname,float fontsize,int fontStyle){  return new CCLabel(string,dimensions,alignment,fontname,fontsize,fontStyle);}  }
class C{  public static byte[] stringToGsm7BitPackedWithHeader(String data,byte[] header) throws EncodeException {  return stringToGsm7BitPackedWithHeader(data,header,0,0);}  }
class C{  protected void installListeners(){  TransferHandler th=list.getTransferHandler();  if (th == null || th instanceof UIResource) {    list.setTransferHandler(defaultTransferHandler);    if (list.getDropTarget() instanceof UIResource) {      list.setDropTarget(null);    }  }  focusListener=createFocusListener();  mouseInputListener=createMouseInputListener();  propertyChangeListener=createPropertyChangeListener();  listSelectionListener=createListSelectionListener();  listDataListener=createListDataListener();  list.addFocusListener(focusListener);  list.addMouseListener(mouseInputListener);  list.addMouseMotionListener(mouseInputListener);  list.addPropertyChangeListener(propertyChangeListener);  list.addKeyListener(getHandler());  ListModel model=list.getModel();  if (model != null) {    model.addListDataListener(listDataListener);  }  ListSelectionModel selectionModel=list.getSelectionModel();  if (selectionModel != null) {    selectionModel.addListSelectionListener(listSelectionListener);  }}  }
class C{  void recordAccess(ParameterizedHashMap<K,V> m){  ParameterizedLinkedHashMap<K,V> lm=(ParameterizedLinkedHashMap<K,V>)m;  if (lm.accessOrder) {    lm.modCount++;    remove();    addBefore(lm.header);  }}  }
class C{  private void add(){  try (RandomAccessFile inout=new RandomAccessFile("AddressBook.dat","rw")){    inout.seek(inout.length());    write(inout);  } catch (  FileNotFoundException ex) {  }catch (  IOException ex) {  }catch (  IndexOutOfBoundsException ex) {  }}  }
class C{  public static InvalidSessionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidSessionE object=new InvalidSessionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidSession".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidSessionE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","InvalidSession").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setInvalidSession(null);        reader.next();        reader.next();      } else {        object.setInvalidSession(InvalidSession.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public UUID client(){  return client;}  }
class C{  protected String serializeFacetValue(final SymbolDescription symbolDescription,final String key,final boolean includingBuiltIn){  if (uselessFacets.contains(key)) {    return null;  }  final IExpressionDescription ed=symbolDescription.getFacet(key);  if (ed == null) {    return null;  }  String exprString=ed.serialize(includingBuiltIn);  if (exprString.startsWith(INTERNAL)) {    return null;  }  if (ed instanceof LabelExpressionDescription) {    final boolean isId=symbolDescription.getMeta().isId(key);    if (!isId) {      exprString=StringUtils.toGamlString(exprString);    }  }  return exprString;}  }
class C{  public TreeViewerColumnBuilder columnBuilder(String headerText,int style){  return new TreeViewerColumnBuilder(this,headerText,style);}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public OutputStream createStreamsAndStartThreads(int numberReferences,boolean expectHeader,boolean terminateBlockGzip) throws IOException {  if (mOutputStream == null) {    final boolean bam=mIndexerFactory == null;    final boolean gzonly=!bam && mCompress;    if (mCreateIndexIfPossible && mCompress) {      final PipedInputStream pipeToIndexIn=new PipedInputStream();      final PipedOutputStream pipeToIndexOut=new PipedOutputStream(pipeToIndexIn);      mOutputStream=FileUtils.createTeedOutputStream(mOutputFile,pipeToIndexOut,gzonly,false,terminateBlockGzip);      final OutputStream indexOutputStream;      if (bam) {        indexOutputStream=FileUtils.createOutputStream(BamIndexer.indexFileName(mOutputFile));      } else {        assert mCompress;        indexOutputStream=FileUtils.createOutputStream(TabixIndexer.indexFileName(mOutputFile));      }      final IndexRunner indexRunner=new IndexRunner(pipeToIndexIn,indexOutputStream,mIndexerFactory,expectHeader,numberReferences,mOutputFile.toString());      mProxy=new IORunnableProxy(indexRunner);      mIndexThread=new Thread(mProxy);      mIndexThread.start();    } else {      mOutputStream=FileUtils.createOutputStream(mOutputFile,gzonly,false,true);    }  }  return mOutputStream;}  }
class C{  public static BenchmarkConfig fromArgs(String[] args) throws FileNotFoundException {  if (args.length < 1) {    return new BenchmarkConfig("conf/benchmarkConf.yaml");  } else {    return new BenchmarkConfig(args[0]);  }}  }
class C{  private boolean isCollection(JsonNode source){  JsonNode data=source.get(DATA);  return data != null && data.isArray();}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public <T>T mapTo(final Class<T> mappingClass,final int flags){  return mapTo(mappingClass,null,flags);}  }
class C{  public static Match.Builder createRetentiveBuilder(Match m){  return convertToVersion(m,m.getVersion());}  }
class C{  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final List<GeoPolygon> holes){  return makeGeoPolygon(planetModel,pointList,holes,0.0);}  }
class C{  protected void drawMultipleEllipse(Point2D point,double boxWidth,double oRadius,Graphics2D g2){  Ellipse2D.Double dot1=new Ellipse2D.Double(point.getX() - (boxWidth / 2) + oRadius,point.getY(),oRadius,oRadius);  Ellipse2D.Double dot2=new Ellipse2D.Double(point.getX() + (boxWidth / 2),point.getY(),oRadius,oRadius);  g2.draw(dot1);  g2.draw(dot2);}  }
class C{  public void run(){  for (; ; ) {    checkOnlineServers();    checkOfflineServers();    try {      sleep(pollingTime);    } catch (    InterruptedException ie) {    }  }}  }
class C{  public caption(){}  }
class C{  @Deprecated public static void markAsContacted(ContentResolver resolver,long personId){  Uri uri=ContentUris.withAppendedId(CONTENT_URI,personId);  uri=Uri.withAppendedPath(uri,"update_contact_time");  ContentValues values=new ContentValues();  values.put(LAST_TIME_CONTACTED,System.currentTimeMillis());  resolver.update(uri,values,null,null);}  }
class C{  public void addAnnotation(final Annotation annotation){  annotationList.add(annotation);  annotation.setxyGraph(xyGraph);  add(annotation);  revalidate();  changeSupport.firePropertyChange("annotationList",null,annotation);}  }
class C{  public LoadNamedField(Token t,Symbol symbol,String fieldName){  super(t);  this.symbol=symbol;  this.slot=symbol.getLocation();  this.fieldName=fieldName;}  }
class C{  public void copyFrom(StateSet other){  this.isTop=other.isTop;  this.isBottom=other.isBottom;  this.onExceptionPath=other.onExceptionPath;  this.stateMap.clear();  for (  State state : other.stateMap.values()) {    State dup=state.duplicate();    this.stateMap.put(dup.getObligationSet(),dup);  }}  }
class C{  public static void showDocument(String url){  boolean windows=isWindowsPlatform();  String cmd=null;  try {    if (windows) {      cmd=WIN_PATH + " " + WIN_FLAG+ " "+ url;      Runtime.getRuntime().exec(cmd);    } else {      cmd=UNIX_PATH + " " + UNIX_FLAG+ "("+ url+ ")";      Process p=Runtime.getRuntime().exec(cmd);      try {        int exitCode=p.waitFor();        if (exitCode != 0) {          cmd=UNIX_PATH + " " + url;          p=Runtime.getRuntime().exec(cmd);        }      } catch (      InterruptedException x) {        System.err.println("Error bringing up browser, cmd='" + cmd + "'");        System.err.println("Caught: " + x);      }    }  } catch (  IOException x) {    System.err.println("Could not invoke browser, command=" + cmd);    System.err.println("Caught: " + x);  }}  }
class C{  private String token(final String home,final String code) throws IOException {  final String response=this.request.uri().set(URI.create(new Href(PsFacebook.ACCESS_TOKEN_URL).with(PsFacebook.CLIENT_ID,this.app).with("redirect_uri",home).with(PsFacebook.CLIENT_SECRET,this.key).with(PsFacebook.CODE,code).toString())).back().fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).body();  final String[] sectors=response.split("&");  for (  final String sector : sectors) {    final String[] pair=sector.split("=");    if (pair.length != 2) {      throw new IllegalArgumentException(String.format("Invalid response: '%s'",response));    }    if ("access_token".equals(pair[0])) {      return pair[1];    }  }  throw new IllegalArgumentException(String.format("Access token not found in response: '%s'",response));}  }
class C{  public boolean isXValuesHorizontal(){  return xValuesHorizontal;}  }
class C{  public boolean equals(MyInteger myInteger){  return myInteger.value == this.value;}  }
